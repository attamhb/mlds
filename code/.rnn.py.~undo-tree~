(undo-tree-save-format-version . 1)
"7823b0963ea70ac631d9be83fe27ab537da65b78"
[nil nil nil nil (25760 29781 139674 803000) 0 nil]
([nil nil ((#("# coding: utf-8
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 16 (face font-lock-comment-face fontified t)) . 23) (undo-tree-id55 . -15) (undo-tree-id56 . -16) (t 25760 29719 59449 120000)) nil (25760 29789 427838 386000) 0 nil] [nil nil ((22 . 23) (t 25760 29719 59449 120000)) ((#("3" 0 1 (face font-lock-comment-face fontified t)) . 22)) (25760 29781 139118 211000) 0 nil])
([nil nil ((#("# **Chapter 15 – Processing Sequences Using RNNs and CNNs**
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 60 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id53 . -59) (undo-tree-id54 . -60)) nil (25760 29789 427835 814000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id52 . -1)) nil (25760 29789 427833 742000) 0 nil])
([nil nil ((#("# _This notebook contains all the sample code in chapter 15._
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 61 (face font-lock-comment-face fontified t) 61 62 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id49 . -61) (undo-tree-id50 . -61) (undo-tree-id51 . -62)) nil (25760 29789 427832 342000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id48 . -1)) nil (25760 29789 427829 698000) 0 nil])
([nil nil ((#("# <table align=\"left\">
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 22 (face font-lock-comment-face fontified t) 22 23 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id45 . -22) (undo-tree-id46 . -22) (undo-tree-id47 . -23)) nil (25760 29789 427827 790000) 0 nil])
([nil nil ((#("#   <td>
" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id42 . -8) (undo-tree-id43 . -8) (undo-tree-id44 . -9)) nil (25760 29789 427824 910000) 0 nil])
([nil nil ((#("#     <a href=\"https://colab.research.google.com/github/ageron/handson-ml2/blob/master/15_processing_sequences_using_rnns_and_cnns.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>
" 0 6 (face font-lock-comment-delimiter-face fontified t) 6 248 (face font-lock-comment-face fontified t) 248 249 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id39 . -248) (undo-tree-id40 . -248) (undo-tree-id41 . -249)) nil (25760 29789 427822 326000) 0 nil])
([nil nil ((#("#   </td>
" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 9 (face font-lock-comment-face fontified t) 9 10 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id36 . -9) (undo-tree-id37 . -9) (undo-tree-id38 . -10)) nil (25760 29789 427819 746000) 0 nil])
([nil nil ((#("#   <td>
" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id33 . -8) (undo-tree-id34 . -8) (undo-tree-id35 . -9)) nil (25760 29789 427816 944000) 0 nil])
([nil nil ((#("#     <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/ageron/handson-ml2/blob/master/15_processing_sequences_using_rnns_and_cnns.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>
" 0 6 (face font-lock-comment-delimiter-face fontified t) 6 37 (face font-lock-comment-face fontified t) 37 59 (face font-lock-comment-face fontified t) 59 76 (face font-lock-comment-face fontified t) 76 137 (face font-lock-comment-face fontified t) 137 200 (face font-lock-comment-face fontified t) 200 240 (face font-lock-comment-face fontified t) 240 241 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id30 . -240) (undo-tree-id31 . -240) (undo-tree-id32 . -241)) nil (25760 29789 427814 21000) 0 nil])
([nil nil ((#("#   </td>
" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 9 (face font-lock-comment-face fontified t) 9 10 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id27 . -9) (undo-tree-id28 . -9) (undo-tree-id29 . -10)) nil (25760 29789 427810 827000) 0 nil])
([nil nil ((#("# </table>
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id24 . -10) (undo-tree-id25 . -10) (undo-tree-id26 . -11)) nil (25760 29789 427808 162000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id23 . -1)) nil (25760 29789 427805 134000) 0 nil])
([nil nil ((#("# # Setup
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 9 (face font-lock-comment-face fontified t) 9 10 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id20 . -9) (undo-tree-id21 . -9) (undo-tree-id22 . -10)) nil (25760 29789 427803 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id19 . -1)) nil (25760 29789 427801 185000) 0 nil])
([nil nil ((#("# First, let's import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures. We also check that Python 3.5 or later is installed (although Python 2.x may work, it is deprecated so we strongly recommend you use Python 3 instead), as well as Scikit-Learn ≥0.20 and TensorFlow ≥2.0.
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 207 (face font-lock-comment-face fontified t) 207 329 (face font-lock-comment-face fontified t) 329 330 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id16 . -329) (undo-tree-id17 . -329) (undo-tree-id18 . -330)) nil (25760 29789 427799 608000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id15 . -1)) nil (25760 29789 427795 431000) 0 nil])
([nil nil ((#("# In[1]:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . -9)) nil (25760 29789 427791 528000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id11 . -1)) nil (25760 29789 427452 260000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id10 . -1)) nil (25760 29789 427450 789000) 0 nil])
([nil nil ((#("# Python ≥3.5 is required
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 25 (face font-lock-comment-face fontified t) 25 26 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id7 . -25) (undo-tree-id8 . -25) (undo-tree-id9 . -26)) nil (25760 29790 339850 383000) 0 nil])
([nil nil ((#("import sys
" 0 6 (face font-lock-keyword-face fontified t) 6 10 (fontified t) 10 11 (fontified t)) . 24) (undo-tree-id2695 . -10) (undo-tree-id2696 . -10) (undo-tree-id2697 . -11)) nil (25760 29817 770741 692000) 0 nil] [nil nil ((#("import sys
" 0 6 (face font-lock-keyword-face fontified t) 6 10 (fontified t) 10 11 (fontified t)) . 24) (undo-tree-id4 . -10) (undo-tree-id5 . -10) (undo-tree-id6 . -11)) ((24 . 35)) (25760 29789 630182 141000) 0 nil])
([nil nil ((#("assert sys.version_info >= (3, 5)
" 0 6 (face font-lock-keyword-face fontified t) 6 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (fontified t)) . 24) (undo-tree-id2691 . -33) (undo-tree-id2692 . -33) (undo-tree-id2693 . -33) (undo-tree-id2694 . -34)) nil (25760 29817 770738 432000) 0 nil])
([nil nil ((#("assert sys.version_info >= (3, 5)
" 0 6 (face font-lock-keyword-face fontified t) 6 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (fontified t)) . 24) (undo-tree-id1 . -33) (undo-tree-id2 . -33) (undo-tree-id3 . -34)) ((24 . 58)) (25760 29789 428277 776000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id2690 . -1)) nil (25760 29817 770734 229000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id0 . -1)) ((24 . 25)) (25760 29789 427435 387000) 0 nil])
([nil nil ((#("# Is this notebook running on Colab or Kaggle?
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 46 (face font-lock-comment-face fontified t) 46 47 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id2683 . -46) (undo-tree-id2684 . -47) (undo-tree-id2685 . -47) (undo-tree-id2686 . -47) (undo-tree-id2687 . -47) (undo-tree-id2688 . -46) (undo-tree-id2689 . -47)) nil (25760 29817 770731 680000) 0 nil])
nil
([nil nil ((#("IS_COLAB = \"google.colab\" in sys.modules
" 0 6 (face font-lock-variable-name-face fontified t) 6 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 25 (face font-lock-string-face fontified t) 25 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 40 (fontified t) 40 41 (fontified t)) . 24) (undo-tree-id2673 . -40) (undo-tree-id2674 . -11) (undo-tree-id2675 . -41) (undo-tree-id2676 . -41) (undo-tree-id2677 . -11) (undo-tree-id2678 . -41) (undo-tree-id2679 . -41) (undo-tree-id2680 . -11) (undo-tree-id2681 . -40) (undo-tree-id2682 . -41)) nil (25760 29817 770725 179000) 0 nil])
([nil nil ((#("IS_KAGGLE = \"kaggle_secrets\" in sys.modules
" 0 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 28 (face font-lock-string-face fontified t) 28 29 (fontified t) 29 31 (face font-lock-keyword-face fontified t) 31 43 (fontified t) 43 44 (fontified t)) . 24) (undo-tree-id2667 . -43) (undo-tree-id2668 . -12) (undo-tree-id2669 . -12) (undo-tree-id2670 . -12) (undo-tree-id2671 . -43) (undo-tree-id2672 . -44)) nil (25760 29817 770717 674000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id2666 . -1)) nil (25760 29817 770711 526000) 0 nil])
([nil nil ((#("# Scikit-Learn ≥0.20 is required
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t)) . 24) (undo-tree-id2662 . -32) (undo-tree-id2663 . -33) (undo-tree-id2664 . -32) (undo-tree-id2665 . -33)) nil (25760 29817 770709 809000) 0 nil])
([nil nil ((#("# TensorFlow ≥2.0 is required
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 30 (face font-lock-comment-face fontified t)) . 77) (undo-tree-id2659 . -29) (undo-tree-id2660 . -30) (undo-tree-id2661 . -30)) nil (25760 29817 770706 335000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 76) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1)) nil (25760 29817 770701 852000) 0 nil])
([nil nil ((#("assert sklearn.__version__ >= \"0.20\"
" 0 6 (face font-lock-keyword-face fontified t) 6 30 (fontified t) 30 36 (face font-lock-string-face fontified t) 36 37 (fontified t)) . 39) (undo-tree-id2463 . -36) (undo-tree-id2464 . -37) (undo-tree-id2465 . -37) (undo-tree-id2466 . -37) (undo-tree-id2467 . -37) (undo-tree-id2468 . -37) (undo-tree-id2469 . -37) (undo-tree-id2470 . -37) (undo-tree-id2471 . -37) (undo-tree-id2472 . -37) (undo-tree-id2473 . -37) (undo-tree-id2474 . -37) (undo-tree-id2475 . -37) (undo-tree-id2476 . -37) (undo-tree-id2477 . -37) (undo-tree-id2478 . -37) (undo-tree-id2479 . -37) (undo-tree-id2480 . -37) (undo-tree-id2481 . -37) (undo-tree-id2482 . -37) (undo-tree-id2483 . -37) (undo-tree-id2484 . -37) (undo-tree-id2485 . -37) (undo-tree-id2486 . -37) (undo-tree-id2487 . -37) (undo-tree-id2488 . -37) (undo-tree-id2489 . -37) (undo-tree-id2490 . -37) (undo-tree-id2491 . -37) (undo-tree-id2492 . -37) (undo-tree-id2493 . -37) (undo-tree-id2494 . -37) (undo-tree-id2495 . -37) (undo-tree-id2496 . -37) (undo-tree-id2497 . -37) (undo-tree-id2498 . -37) (undo-tree-id2499 . -37) (undo-tree-id2500 . -37) (undo-tree-id2501 . -37) (undo-tree-id2502 . -37) (undo-tree-id2503 . -37) (undo-tree-id2504 . -37) (undo-tree-id2505 . -37) (undo-tree-id2506 . -37) (undo-tree-id2507 . -37) (undo-tree-id2508 . -37) (undo-tree-id2509 . -37) (undo-tree-id2510 . -37) (undo-tree-id2511 . -37) (undo-tree-id2512 . -37) (undo-tree-id2513 . -37) (undo-tree-id2514 . -37) (undo-tree-id2515 . -37) (undo-tree-id2516 . -37) (undo-tree-id2517 . -37) (undo-tree-id2518 . -37) (undo-tree-id2519 . -37) (undo-tree-id2520 . -37) (undo-tree-id2521 . -37) (undo-tree-id2522 . -37) (undo-tree-id2523 . -37) (undo-tree-id2524 . -37) (undo-tree-id2525 . -37) (undo-tree-id2526 . -37) (undo-tree-id2527 . -37) (undo-tree-id2528 . -37) (undo-tree-id2529 . -37) (undo-tree-id2530 . -37) (undo-tree-id2531 . -37) (undo-tree-id2532 . -37) (undo-tree-id2533 . -37) (undo-tree-id2534 . -37) (undo-tree-id2535 . -37) (undo-tree-id2536 . -37) (undo-tree-id2537 . -37) (undo-tree-id2538 . -37) (undo-tree-id2539 . -37) (undo-tree-id2540 . -37) (undo-tree-id2541 . -37) (undo-tree-id2542 . -37) (undo-tree-id2543 . -37) (undo-tree-id2544 . -37) (undo-tree-id2545 . -37) (undo-tree-id2546 . -37) (undo-tree-id2547 . -37) (undo-tree-id2548 . -37) (undo-tree-id2549 . -37) (undo-tree-id2550 . -37) (undo-tree-id2551 . -37) (undo-tree-id2552 . -37) (undo-tree-id2553 . -37) (undo-tree-id2554 . -37) (undo-tree-id2555 . -37) (undo-tree-id2556 . -37) (undo-tree-id2557 . -37) (undo-tree-id2558 . -37) (undo-tree-id2559 . -37) (undo-tree-id2560 . -37) (undo-tree-id2561 . -37) (undo-tree-id2562 . -37) (undo-tree-id2563 . -37) (undo-tree-id2564 . -37) (undo-tree-id2565 . -37) (undo-tree-id2566 . -37) (undo-tree-id2567 . -37) (undo-tree-id2568 . -37) (undo-tree-id2569 . -37) (undo-tree-id2570 . -37) (undo-tree-id2571 . -37) (undo-tree-id2572 . -37) (undo-tree-id2573 . -37) (undo-tree-id2574 . -37) (undo-tree-id2575 . -37) (undo-tree-id2576 . -37) (undo-tree-id2577 . -37) (undo-tree-id2578 . -37) (undo-tree-id2579 . -37) (undo-tree-id2580 . -37) (undo-tree-id2581 . -37) (undo-tree-id2582 . -37) (undo-tree-id2583 . -37) (undo-tree-id2584 . -37) (undo-tree-id2585 . -37) (undo-tree-id2586 . -37) (undo-tree-id2587 . -37) (undo-tree-id2588 . -37) (undo-tree-id2589 . -37) (undo-tree-id2590 . -37) (undo-tree-id2591 . -37) (undo-tree-id2592 . -37) (undo-tree-id2593 . -37) (undo-tree-id2594 . -37) (undo-tree-id2595 . -37) (undo-tree-id2596 . -37) (undo-tree-id2597 . -37) (undo-tree-id2598 . -37) (undo-tree-id2599 . -37) (undo-tree-id2600 . -37) (undo-tree-id2601 . -37)) nil (25760 29817 770659 43000) 0 nil])
([nil nil ((#("assert tf.__version__ >= \"2.0\"
" 0 6 (face font-lock-keyword-face fontified t) 6 25 (fontified t) 25 30 (face font-lock-string-face fontified t) 30 31 (fontified t)) . 92) (undo-tree-id2461 . -30) (undo-tree-id2462 . -31)) nil (25760 29817 770536 651000) 0 nil])
([nil nil ((#("if not tf.config.list_physical_devices('GPU'):
" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 44 (face font-lock-string-face fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 47 (fontified t)) . 93) (undo-tree-id2459 . -46) (undo-tree-id2460 . -47)) nil (25760 29817 770534 602000) 0 nil])
([nil nil ((#("    print(\"No GPU was detected. LSTMs and CNNs can be very slow without a GPU.\")
" 0 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 35 (face font-lock-string-face fontified t) 35 79 (face font-lock-string-face fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 81 (fontified t)) . 93) (undo-tree-id2436 . -80) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -79) (undo-tree-id2440 . -80) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -80) (undo-tree-id2458 . -81)) nil (25760 29817 770530 848000) 0 nil])
([nil nil ((#("    if IS_COLAB:
" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 16 (fontified t) 16 17 (fontified t)) . 93) (undo-tree-id2433 . -16) (undo-tree-id2434 . -16) (undo-tree-id2435 . -17)) nil (25760 29817 770514 973000) 0 nil])
([nil nil ((#("        print(\"Go to Runtime > Change runtime and select a GPU hardware accelerator.\")
" 0 8 (fontified t) 8 13 (face font-lock-keyword-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 85 (face font-lock-string-face fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) fontified t) 86 87 (fontified t)) . 93) (undo-tree-id2410 . -86) (undo-tree-id2411 . -8) (undo-tree-id2412 . -8) (undo-tree-id2413 . -72) (undo-tree-id2414 . -83) (undo-tree-id2415 . -8) (undo-tree-id2416 . -8) (undo-tree-id2417 . -8) (undo-tree-id2418 . -8) (undo-tree-id2419 . -8) (undo-tree-id2420 . -8) (undo-tree-id2421 . -8) (undo-tree-id2422 . -8) (undo-tree-id2423 . -8) (undo-tree-id2424 . -8) (undo-tree-id2425 . -8) (undo-tree-id2426 . -8) (undo-tree-id2427 . -8) (undo-tree-id2428 . -8) (undo-tree-id2429 . -8) (undo-tree-id2430 . -8) (undo-tree-id2431 . -86) (undo-tree-id2432 . -87)) nil (25760 29817 770511 319000) 0 nil])
([nil nil ((#("    if IS_KAGGLE:
" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 17 (fontified t) 17 18 (fontified t)) . 93) (undo-tree-id2407 . -17) (undo-tree-id2408 . -17) (undo-tree-id2409 . -18)) nil (25760 29817 770496 453000) 0 nil])
([nil nil ((#("        print(\"Go to Settings > Accelerator and select GPU.\")
" 0 4 (fontified t) 4 8 (fontified t) 8 13 (face font-lock-keyword-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 60 (face font-lock-string-face fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 62 (fontified t)) . 93) (undo-tree-id2386 . -61) (undo-tree-id2387 . -8) (undo-tree-id2388 . -8) (undo-tree-id2389 . -8) (undo-tree-id2390 . -8) (undo-tree-id2391 . -8) (undo-tree-id2392 . -8) (undo-tree-id2393 . -8) (undo-tree-id2394 . -8) (undo-tree-id2395 . -8) (undo-tree-id2396 . -8) (undo-tree-id2397 . -8) (undo-tree-id2398 . -8) (undo-tree-id2399 . -8) (undo-tree-id2400 . -8) (undo-tree-id2401 . -8) (undo-tree-id2402 . -8) (undo-tree-id2403 . -8) (undo-tree-id2404 . -8) (undo-tree-id2405 . -61) (undo-tree-id2406 . -62)) nil (25760 29817 770493 176000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 93) (undo-tree-id2385 . -1)) nil (25760 29817 770479 80000) 0 nil])
([nil nil ((#("# Common imports
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 16 (face font-lock-comment-face fontified t) 16 17 (face font-lock-comment-face fontified t)) . 93) (undo-tree-id2381 . -16) (undo-tree-id2382 . -17) (undo-tree-id2383 . -16) (undo-tree-id2384 . -17)) nil (25760 29817 770477 99000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 92) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1)) nil (25760 29817 770462 303000) 0 nil])
([nil nil ((#("import os
" 0 6 (face font-lock-keyword-face fontified t) 6 10 (fontified t)) . 111) (undo-tree-id2024 . -9) (undo-tree-id2025 . -6) (undo-tree-id2026 . -10) (undo-tree-id2027 . -10)) nil (25760 29817 770209 607000) 0 nil])
([nil nil ((#("# To plot pretty figures
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 20 (face font-lock-comment-face fontified t) 20 25 (face font-lock-comment-face fontified t)) . 232) (undo-tree-id1969 . -24) (undo-tree-id1970 . -25) (undo-tree-id1971 . -25) (undo-tree-id1972 . -25) (undo-tree-id1973 . -25) (undo-tree-id1974 . -25) (undo-tree-id1975 . -25) (undo-tree-id1976 . -25) (undo-tree-id1977 . -25) (undo-tree-id1978 . -25) (undo-tree-id1979 . -25) (undo-tree-id1980 . -25) (undo-tree-id1981 . -25) (undo-tree-id1982 . -25) (undo-tree-id1983 . -25) (undo-tree-id1984 . -25) (undo-tree-id1985 . -25) (undo-tree-id1986 . -25) (undo-tree-id1987 . -25) (undo-tree-id1988 . -25) (undo-tree-id1989 . -25) (undo-tree-id1990 . -25) (undo-tree-id1991 . -25) (undo-tree-id1992 . -25) (undo-tree-id1993 . -25) (undo-tree-id1994 . -25) (undo-tree-id1995 . -25) (undo-tree-id1996 . -25) (undo-tree-id1997 . -25) (undo-tree-id1998 . -25) (undo-tree-id1999 . -25) (undo-tree-id2000 . -25) (undo-tree-id2001 . -25) (undo-tree-id2002 . -25) (undo-tree-id2003 . -25) (undo-tree-id2004 . -25) (undo-tree-id2005 . -25) (undo-tree-id2006 . -25) (undo-tree-id2007 . -25) (undo-tree-id2008 . -25) (undo-tree-id2009 . -25) (undo-tree-id2010 . -25) (undo-tree-id2011 . -25) (undo-tree-id2012 . -25) (undo-tree-id2013 . -25) (undo-tree-id2014 . -25) (undo-tree-id2015 . -25) (undo-tree-id2016 . -25) (undo-tree-id2017 . -25) (undo-tree-id2018 . -25) (undo-tree-id2019 . -25) (undo-tree-id2020 . -25) (undo-tree-id2021 . -25) (undo-tree-id2022 . -25) (undo-tree-id2023 . -25)) nil (25760 29817 770203 990000) 0 nil])
([nil nil ((#("get_ipython().run_line_magic('matplotlib', 'inline')
" 0 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 41 (face font-lock-string-face fontified t) 41 43 (fontified t) 43 51 (face font-lock-string-face fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (fontified t)) . 232) (undo-tree-id1963 . -52) (undo-tree-id1964 . -11) (undo-tree-id1965 . -53) (undo-tree-id1966 . -52) (undo-tree-id1967 . -11) (undo-tree-id1968 . -53)) nil (25760 29817 770157 263000) 0 nil])
([nil nil ((1 . 42655) (#("#!/usr/bin/env python

import sklearn
import tensorflow as tf
from tensorflow import keras
import numpy as np
from pathlib import Path

# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)

import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)

# Where to save the figures
PROJECT_ROOT_DIR = \".\"
CHAPTER_ID = \"rnn\"
IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)
os.makedirs(IMAGES_PATH, exist_ok=True)

def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):
    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)
    print(\"Saving figure\", fig_id)
    if tight_layout:
        plt.tight_layout()
    plt.savefig(path, format=fig_extension, dpi=resolution)


# # Basic RNNs

# ## Generate the Dataset

# In[2]:


def generate_time_series(batch_size, n_steps):
    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
    time = np.linspace(0, 1, n_steps)
    series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10))  #   wave 1
    series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) # + wave 2
    series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5)   # + noise
    return series[..., np.newaxis].astype(np.float32)


# In[3]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]


# In[4]:


X_train.shape, y_train.shape


# In[5]:


def plot_series(series, y=None, y_pred=None, x_label=\"$t$\", y_label=\"$x(t)$\", legend=True):
    plt.plot(series, \".-\")
    if y is not None:
        plt.plot(n_steps, y, \"bo\", label=\"Target\")
    if y_pred is not None:
        plt.plot(n_steps, y_pred, \"rx\", markersize=10, label=\"Prediction\")
    plt.grid(True)
    if x_label:
        plt.xlabel(x_label, fontsize=16)
    if y_label:
        plt.ylabel(y_label, fontsize=16, rotation=0)
    plt.hlines(0, 0, 100, linewidth=1)
    plt.axis([0, n_steps + 1, -1, 1])
    if legend and (y or y_pred):
        plt.legend(fontsize=14, loc=\"upper left\")

fig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))
for col in range(3):
    plt.sca(axes[col])
    plot_series(X_valid[col, :, 0], y_valid[col, 0],
                y_label=(\"$x(t)$\" if col==0 else None),
                legend=(col == 0))
save_fig(\"time_series_plot\")
plt.show()


# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.

# ## Computing Some Baselines

# Naive predictions (just predict the last observed value):

# In[6]:


y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))


# In[7]:


plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Linear predictions:

# In[8]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.Flatten(input_shape=[50, 1]),
    keras.layers.Dense(1)
])

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20,
                    validation_data=(X_valid, y_valid))


# In[9]:


model.evaluate(X_valid, y_valid)


# In[10]:


def plot_learning_curves(loss, val_loss):
    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")
    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")
    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    plt.axis([1, 20, 0, 0.05])
    plt.legend(fontsize=14)
    plt.xlabel(\"Epochs\")
    plt.ylabel(\"Loss\")
    plt.grid(True)

plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[11]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Using a Simple RNN

# In[12]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.SimpleRNN(1, input_shape=[None, 1])
])

optimizer = keras.optimizers.Adam(learning_rate=0.005)
model.compile(loss=\"mse\", optimizer=optimizer)
history = model.fit(X_train, y_train, epochs=20,
                    validation_data=(X_valid, y_valid))


# In[13]:


model.evaluate(X_valid, y_valid)


# In[14]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[15]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Deep RNNs

# In[16]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.SimpleRNN(20, return_sequences=True),
    keras.layers.SimpleRNN(1)
])

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20,
                    validation_data=(X_valid, y_valid))


# In[17]:


model.evaluate(X_valid, y_valid)


# In[18]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[19]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Make the second `SimpleRNN` layer return only the last output:

# In[20]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.SimpleRNN(20),
    keras.layers.Dense(1)
])

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20,
                    validation_data=(X_valid, y_valid))


# In[21]:


model.evaluate(X_valid, y_valid)


# In[22]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[23]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Forecasting Several Steps Ahead

# In[24]:


np.random.seed(43) # not 42, as it would give the first series in the train set

series = generate_time_series(1, n_steps + 10)
X_new, Y_new = series[:, :n_steps], series[:, n_steps:]
X = X_new
for step_ahead in range(10):
    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:]


# In[25]:


Y_pred.shape


# In[26]:


def plot_multiple_forecasts(X, Y, Y_pred):
    n_steps = X.shape[1]
    ahead = Y.shape[1]
    plot_series(X[0, :, 0])
    plt.plot(np.arange(n_steps, n_steps + ahead), Y[0, :, 0], \"bo-\", label=\"Actual\")
    plt.plot(np.arange(n_steps, n_steps + ahead), Y_pred[0, :, 0], \"rx-\", label=\"Forecast\", markersize=10)
    plt.axis([0, n_steps + ahead, -1, 1])
    plt.legend(fontsize=14)

plot_multiple_forecasts(X_new, Y_new, Y_pred)
save_fig(\"forecast_ahead_plot\")
plt.show()


# Now let's use this model to predict the next 10 values. We first need to regenerate the sequences with 9 more time steps.

# In[27]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, Y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, Y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, Y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


# Now let's predict the next 10 values one by one:

# In[28]:


X = X_valid
for step_ahead in range(10):
    y_pred_one = model.predict(X)[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:, 0]


# In[29]:


Y_pred.shape


# In[30]:


np.mean(keras.metrics.mean_squared_error(Y_valid, Y_pred))


# Let's compare this performance with some baselines: naive predictions and a simple linear model:

# In[31]:


Y_naive_pred = np.tile(X_valid[:, -1], 10) # take the last time step value, and repeat it 10 times
np.mean(keras.metrics.mean_squared_error(Y_valid, Y_naive_pred))


# In[32]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.Flatten(input_shape=[50, 1]),
    keras.layers.Dense(10)
])

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# Now let's create an RNN that predicts all 10 next values at once:

# In[33]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.SimpleRNN(20),
    keras.layers.Dense(10)
])

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# In[34]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, -10:, :]
Y_pred = model.predict(X_new)[..., np.newaxis]


# In[35]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's create an RNN that predicts the next 10 steps at each time step. That is, instead of just forecasting time steps 50 to 59 based on time steps 0 to 49, it will forecast time steps 1 to 10 at time step 0, then time steps 2 to 11 at time step 1, and so on, and finally it will forecast time steps 50 to 59 at the last time step. Notice that the model is causal: when it makes predictions at any time step, it can only see past time steps.

# In[36]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]
Y = np.empty((10000, n_steps, 10))
for step_ahead in range(1, 10 + 1):
    Y[..., step_ahead - 1] = series[..., step_ahead:step_ahead + n_steps, 0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]


# In[37]:


X_train.shape, Y_train.shape


# In[38]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.SimpleRNN(20, return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])

model.compile(loss=\"mse\", optimizer=keras.optimizers.Adam(learning_rate=0.01), metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# In[39]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[40]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # Deep RNN with Batch Norm

# In[41]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.BatchNormalization(),
    keras.layers.SimpleRNN(20, return_sequences=True),
    keras.layers.BatchNormalization(),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# # Deep RNNs with Layer Norm

# In[42]:


from tensorflow.keras.layers import LayerNormalization


# In[43]:


class LNSimpleRNNCell(keras.layers.Layer):
    def __init__(self, units, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.state_size = units
        self.output_size = units
        self.simple_rnn_cell = keras.layers.SimpleRNNCell(units,
                                                          activation=None)
        self.layer_norm = LayerNormalization()
        self.activation = keras.activations.get(activation)
    def get_initial_state(self, inputs=None, batch_size=None, dtype=None):
        if inputs is not None:
            batch_size = tf.shape(inputs)[0]
            dtype = inputs.dtype
        return [tf.zeros([batch_size, self.state_size], dtype=dtype)]
    def call(self, inputs, states):
        outputs, new_states = self.simple_rnn_cell(inputs, states)
        norm_outputs = self.activation(self.layer_norm(outputs))
        return norm_outputs, [norm_outputs]


# In[44]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True,
                     input_shape=[None, 1]),
    keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# # Creating a Custom RNN Class

# In[45]:


class MyRNN(keras.layers.Layer):
    def __init__(self, cell, return_sequences=False, **kwargs):
        super().__init__(**kwargs)
        self.cell = cell
        self.return_sequences = return_sequences
        self.get_initial_state = getattr(
            self.cell, \"get_initial_state\", self.fallback_initial_state)
    def fallback_initial_state(self, inputs):
        batch_size = tf.shape(inputs)[0]
        return [tf.zeros([batch_size, self.cell.state_size], dtype=inputs.dtype)]
    @tf.function
    def call(self, inputs):
        states = self.get_initial_state(inputs)
        shape = tf.shape(inputs)
        batch_size = shape[0]
        n_steps = shape[1]
        sequences = tf.TensorArray(
            inputs.dtype, size=(n_steps if self.return_sequences else 0))
        outputs = tf.zeros(shape=[batch_size, self.cell.output_size], dtype=inputs.dtype)
        for step in tf.range(n_steps):
            outputs, states = self.cell(inputs[:, step], states)
            if self.return_sequences:
                sequences = sequences.write(step, outputs)
        if self.return_sequences:
            return tf.transpose(sequences.stack(), [1, 0, 2])
        else:
            return outputs


# In[46]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    MyRNN(LNSimpleRNNCell(20), return_sequences=True,
          input_shape=[None, 1]),
    MyRNN(LNSimpleRNNCell(20), return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# # LSTMs

# In[47]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.LSTM(20, return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# In[48]:


model.evaluate(X_valid, Y_valid)


# In[49]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[50]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[51]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # GRUs

# In[52]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.GRU(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.GRU(20, return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# In[53]:


model.evaluate(X_valid, Y_valid)


# In[54]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[55]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[56]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# ## Using One-Dimensional Convolutional Layers to Process Sequences

# ```
# 1D conv layer with kernel size 4, stride 2, VALID padding:
# 
#               |-----2-----|     |-----5---...------|     |-----23----|
#         |-----1-----|     |-----4-----|   ...      |-----22----|
#   |-----0----|      |-----3-----|     |---...|-----21----|
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 42 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 43 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 52 53 54 55 56 57 58 59
# 
# Output:
# 
# X:     0/3   2/5   4/7   6/9   8/11 10/13 .../43 42/45 44/47 46/49
# Y:     4/13  6/15  8/17 10/19 12/21 14/23 .../53 46/55 48/57 50/59
# ```

# In[57]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([
    keras.layers.Conv1D(filters=20, kernel_size=4, strides=2, padding=\"valid\",
                        input_shape=[None, 1]),
    keras.layers.GRU(20, return_sequences=True),
    keras.layers.GRU(20, return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train[:, 3::2], epochs=20,
                    validation_data=(X_valid, Y_valid[:, 3::2]))


# ## WaveNet

# ```
# C2  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\.../\\ /\\ /\\ /\\ /\\ /\\
#    \\  /  \\  /  \\  /  \\  /  \\  /  \\  /  \\       /  \\  /  \\  /  \\
#      /    \\      /    \\      /    \\                 /    \\
# C1  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\  /\\ /.../\\ /\\ /\\ /\\ /\\ /\\ /\\
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 53 54 55 56 57 58 59
# ```

# In[58]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape=[None, 1]))
for rate in (1, 2, 4, 8) * 2:
    model.add(keras.layers.Conv1D(filters=20, kernel_size=2, padding=\"causal\",
                                  activation=\"relu\", dilation_rate=rate))
model.add(keras.layers.Conv1D(filters=10, kernel_size=1))
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20,
                    validation_data=(X_valid, Y_valid))


# Here is the original WaveNet defined in the paper: it uses Gated Activation Units instead of ReLU and parametrized skip connections, plus it pads with zeros on the left to avoid getting shorter and shorter sequences:

# In[59]:


class GatedActivationUnit(keras.layers.Layer):
    def __init__(self, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.activation = keras.activations.get(activation)
    def call(self, inputs):
        n_filters = inputs.shape[-1] // 2
        linear_output = self.activation(inputs[..., :n_filters])
        gate = keras.activations.sigmoid(inputs[..., n_filters:])
        return self.activation(linear_output) * gate


# In[60]:


def wavenet_residual_block(inputs, n_filters, dilation_rate):
    z = keras.layers.Conv1D(2 * n_filters, kernel_size=2, padding=\"causal\",
                            dilation_rate=dilation_rate)(inputs)
    z = GatedActivationUnit()(z)
    z = keras.layers.Conv1D(n_filters, kernel_size=1)(z)
    return keras.layers.Add()([z, inputs]), z


# In[61]:


keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

n_layers_per_block = 3 # 10 in the paper
n_blocks = 1 # 3 in the paper
n_filters = 32 # 128 in the paper
n_outputs = 10 # 256 in the paper

inputs = keras.layers.Input(shape=[None, 1])
z = keras.layers.Conv1D(n_filters, kernel_size=2, padding=\"causal\")(inputs)
skip_to_last = []
for dilation_rate in [2**i for i in range(n_layers_per_block)] * n_blocks:
    z, skip = wavenet_residual_block(z, n_filters, dilation_rate)
    skip_to_last.append(skip)
z = keras.activations.relu(keras.layers.Add()(skip_to_last))
z = keras.layers.Conv1D(n_filters, kernel_size=1, activation=\"relu\")(z)
Y_proba = keras.layers.Conv1D(n_outputs, kernel_size=1, activation=\"softmax\")(z)

model = keras.models.Model(inputs=[inputs], outputs=[Y_proba])


# In[62]:


model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=2,
                    validation_data=(X_valid, Y_valid))


# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.

# # Exercise solutions

# ## 1. to 8.

# See Appendix A.

# ## 9. Tackling the SketchRNN Dataset

# _Exercise: Train a classification model for the SketchRNN dataset, available in TensorFlow Datasets._

# The dataset is not available in TFDS yet, the [pull request](https://github.com/tensorflow/datasets/pull/361) is still work in progress. Luckily, the data is conveniently available as TFRecords, so let's download it (it might take a while, as it's about 1 GB large, with 3,450,000 training sketches and 345,000 test sketches):

# In[63]:


DOWNLOAD_ROOT = \"http://download.tensorflow.org/data/\"
FILENAME = \"quickdraw_tutorial_dataset_v1.tar.gz\"
filepath = keras.utils.get_file(FILENAME,
                                DOWNLOAD_ROOT + FILENAME,
                                cache_subdir=\"datasets/quickdraw\",
                                extract=True)


# In[64]:


quickdraw_dir = Path(filepath).parent
train_files = sorted([str(path) for path in quickdraw_dir.glob(\"training.tfrecord-*\")])
eval_files = sorted([str(path) for path in quickdraw_dir.glob(\"eval.tfrecord-*\")])


# In[65]:


train_files


# In[66]:


eval_files


# In[67]:


with open(quickdraw_dir / \"eval.tfrecord.classes\") as test_classes_file:
    test_classes = test_classes_file.readlines()
    
with open(quickdraw_dir / \"training.tfrecord.classes\") as train_classes_file:
    train_classes = train_classes_file.readlines()


# In[68]:


assert train_classes == test_classes
class_names = [name.strip().lower() for name in train_classes]


# In[69]:


sorted(class_names)


# In[70]:


def parse(data_batch):
    feature_descriptions = {
        \"ink\": tf.io.VarLenFeature(dtype=tf.float32),
        \"shape\": tf.io.FixedLenFeature([2], dtype=tf.int64),
        \"class_index\": tf.io.FixedLenFeature([1], dtype=tf.int64)
    }
    examples = tf.io.parse_example(data_batch, feature_descriptions)
    flat_sketches = tf.sparse.to_dense(examples[\"ink\"])
    sketches = tf.reshape(flat_sketches, shape=[tf.size(data_batch), -1, 3])
    lengths = examples[\"shape\"][:, 0]
    labels = examples[\"class_index\"][:, 0]
    return sketches, lengths, labels


# In[71]:


def quickdraw_dataset(filepaths, batch_size=32, shuffle_buffer_size=None,
                      n_parse_threads=5, n_read_threads=5, cache=False):
    dataset = tf.data.TFRecordDataset(filepaths,
                                      num_parallel_reads=n_read_threads)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(parse, num_parallel_calls=n_parse_threads)
    return dataset.prefetch(1)


# In[72]:


train_set = quickdraw_dataset(train_files, shuffle_buffer_size=10000)
valid_set = quickdraw_dataset(eval_files[:5])
test_set = quickdraw_dataset(eval_files[5:])


# In[73]:


for sketches, lengths, labels in train_set.take(1):
    print(\"sketches =\", sketches)
    print(\"lengths =\", lengths)
    print(\"labels =\", labels)


# In[74]:


def draw_sketch(sketch, label=None):
    origin = np.array([[0., 0., 0.]])
    sketch = np.r_[origin, sketch]
    stroke_end_indices = np.argwhere(sketch[:, -1]==1.)[:, 0]
    coordinates = np.cumsum(sketch[:, :2], axis=0)
    strokes = np.split(coordinates, stroke_end_indices + 1)
    title = class_names[label.numpy()] if label is not None else \"Try to guess\"
    plt.title(title)
    plt.plot(coordinates[:, 0], -coordinates[:, 1], \"y:\")
    for stroke in strokes:
        plt.plot(stroke[:, 0], -stroke[:, 1], \".-\")
    plt.axis(\"off\")

def draw_sketches(sketches, lengths, labels):
    n_sketches = len(sketches)
    n_cols = 4
    n_rows = (n_sketches - 1) // n_cols + 1
    plt.figure(figsize=(n_cols * 3, n_rows * 3.5))
    for index, sketch, length, label in zip(range(n_sketches), sketches, lengths, labels):
        plt.subplot(n_rows, n_cols, index + 1)
        draw_sketch(sketch[:length], label)
    plt.show()

for sketches, lengths, labels in train_set.take(1):
    draw_sketches(sketches, lengths, labels)


# Most sketches are composed of less than 100 points:

# In[75]:


lengths = np.concatenate([lengths for _, lengths, _ in train_set.take(1000)])
plt.hist(lengths, bins=150, density=True)
plt.axis([0, 200, 0, 0.03])
plt.xlabel(\"length\")
plt.ylabel(\"density\")
plt.show()


# In[76]:


def crop_long_sketches(dataset, max_length=100):
    return dataset.map(lambda inks, lengths, labels: (inks[:, :max_length], labels))

cropped_train_set = crop_long_sketches(train_set)
cropped_valid_set = crop_long_sketches(valid_set)
cropped_test_set = crop_long_sketches(test_set)


# In[77]:


model = keras.models.Sequential([
    keras.layers.Conv1D(32, kernel_size=5, strides=2, activation=\"relu\"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv1D(64, kernel_size=5, strides=2, activation=\"relu\"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv1D(128, kernel_size=3, strides=2, activation=\"relu\"),
    keras.layers.BatchNormalization(),
    keras.layers.LSTM(128, return_sequences=True),
    keras.layers.LSTM(128),
    keras.layers.Dense(len(class_names), activation=\"softmax\")
])
optimizer = keras.optimizers.SGD(learning_rate=1e-2, clipnorm=1.)
model.compile(loss=\"sparse_categorical_crossentropy\",
              optimizer=optimizer,
              metrics=[\"accuracy\", \"sparse_top_k_categorical_accuracy\"])
history = model.fit(cropped_train_set, epochs=2,
                    validation_data=cropped_valid_set)


# In[78]:


y_test = np.concatenate([labels for _, _, labels in test_set])
y_probas = model.predict(test_set)


# In[79]:


np.mean(keras.metrics.sparse_top_k_categorical_accuracy(y_test, y_probas))


# In[80]:


n_new = 10
Y_probas = model.predict(sketches)
top_k = tf.nn.top_k(Y_probas, k=5)
for index in range(n_new):
    plt.figure(figsize=(3, 3.5))
    draw_sketch(sketches[index])
    plt.show()
    print(\"Top-5 predictions:\".format(index + 1))
    for k in range(5):
        class_name = class_names[top_k.indices[index, k]]
        proba = 100 * top_k.values[index, k]
        print(\"  {}. {} {:.3f}%\".format(k + 1, class_name, proba))
    print(\"Answer: {}\".format(class_names[labels[index].numpy()]))


# In[81]:


model.save(\"my_sketchrnn\")


# ## 10. Bach Chorales
# _Exercise: Download the [Bach chorales](https://homl.info/bach) dataset and unzip it. It is composed of 382 chorales composed by Johann Sebastian Bach. Each chorale is 100 to 640 time steps long, and each time step contains 4 integers, where each integer corresponds to a note's index on a piano (except for the value 0, which means that no note is played). Train a model—recurrent, convolutional, or both—that can predict the next time step (four notes), given a sequence of time steps from a chorale. Then use this model to generate Bach-like music, one note at a time: you can do this by giving the model the start of a chorale and asking it to predict the next time step, then appending these time steps to the input sequence and asking the model for the next note, and so on. Also make sure to check out [Google's Coconet model](https://homl.info/coconet), which was used for a nice [Google doodle about Bach](https://www.google.com/doodles/celebrating-johann-sebastian-bach)._
# 
# 

# In[82]:


DOWNLOAD_ROOT = \"https://github.com/ageron/handson-ml2/raw/master/datasets/jsb_chorales/\"
FILENAME = \"jsb_chorales.tgz\"
filepath = keras.utils.get_file(FILENAME,
                                DOWNLOAD_ROOT + FILENAME,
                                cache_subdir=\"datasets/jsb_chorales\",
                                extract=True)


# In[83]:


jsb_chorales_dir = Path(filepath).parent
train_files = sorted(jsb_chorales_dir.glob(\"train/chorale_*.csv\"))
valid_files = sorted(jsb_chorales_dir.glob(\"valid/chorale_*.csv\"))
test_files = sorted(jsb_chorales_dir.glob(\"test/chorale_*.csv\"))


# In[84]:


import pandas as pd

def load_chorales(filepaths):
    return [pd.read_csv(filepath).values.tolist() for filepath in filepaths]

train_chorales = load_chorales(train_files)
valid_chorales = load_chorales(valid_files)
test_chorales = load_chorales(test_files)


# In[85]:


train_chorales[0]


# Notes range from 36 (C1 = C on octave 1) to 81 (A5 = A on octave 5), plus 0 for silence:

# In[86]:


notes = set()
for chorales in (train_chorales, valid_chorales, test_chorales):
    for chorale in chorales:
        for chord in chorale:
            notes |= set(chord)

n_notes = len(notes)
min_note = min(notes - {0})
max_note = max(notes)

assert min_note == 36
assert max_note == 81


# Let's write a few functions to listen to these chorales (you don't need to understand the details here, and in fact there are certainly simpler ways to do this, for example using MIDI players, but I just wanted to have a bit of fun writing a synthesizer):

# In[87]:


from IPython.display import Audio

def notes_to_frequencies(notes):
    # Frequency doubles when you go up one octave; there are 12 semi-tones
    # per octave; Note A on octave 4 is 440 Hz, and it is note number 69.
    return 2 ** ((np.array(notes) - 69) / 12) * 440

def frequencies_to_samples(frequencies, tempo, sample_rate):
    note_duration = 60 / tempo # the tempo is measured in beats per minutes
    # To reduce click sound at every beat, we round the frequencies to try to
    # get the samples close to zero at the end of each note.
    frequencies = np.round(note_duration * frequencies) / note_duration
    n_samples = int(note_duration * sample_rate)
    time = np.linspace(0, note_duration, n_samples)
    sine_waves = np.sin(2 * np.pi * frequencies.reshape(-1, 1) * time)
    # Removing all notes with frequencies ≤ 9 Hz (includes note 0 = silence)
    sine_waves *= (frequencies > 9.).reshape(-1, 1)
    return sine_waves.reshape(-1)

def chords_to_samples(chords, tempo, sample_rate):
    freqs = notes_to_frequencies(chords)
    freqs = np.r_[freqs, freqs[-1:]] # make last note a bit longer
    merged = np.mean([frequencies_to_samples(melody, tempo, sample_rate)
                     for melody in freqs.T], axis=0)
    n_fade_out_samples = sample_rate * 60 // tempo # fade out last note
    fade_out = np.linspace(1., 0., n_fade_out_samples)**2
    merged[-n_fade_out_samples:] *= fade_out
    return merged

def play_chords(chords, tempo=160, amplitude=0.1, sample_rate=44100, filepath=None):
    samples = amplitude * chords_to_samples(chords, tempo, sample_rate)
    if filepath:
        from scipy.io import wavfile
        samples = (2**15 * samples).astype(np.int16)
        wavfile.write(filepath, sample_rate, samples)
        return display(Audio(filepath))
    else:
        return display(Audio(samples, rate=sample_rate))


# Now let's listen to a few chorales:

# In[88]:


for index in range(3):
    play_chords(train_chorales[index])


# Divine! :)

# In order to be able to generate new chorales, we want to train a model that can predict the next chord given all the previous chords. If we naively try to predict the next chord in one shot, predicting all 4 notes at once, we run the risk of getting notes that don't go very well together (believe me, I tried). It's much better and simpler to predict one note at a time. So we will need to preprocess every chorale, turning each chord into an arpegio (i.e., a sequence of notes rather than notes played simultaneuously). So each chorale will be a long sequence of notes (rather than chords), and we can just train a model that can predict the next note given all the previous notes. We will use a sequence-to-sequence approach, where we feed a window to the neural net, and it tries to predict that same window shifted one time step into the future.
# 
# We will also shift the values so that they range from 0 to 46, where 0 represents silence, and values 1 to 46 represent notes 36 (C1) to 81 (A5).
# 
# And we will train the model on windows of 128 notes (i.e., 32 chords).
# 
# Since the dataset fits in memory, we could preprocess the chorales in RAM using any Python code we like, but I will demonstrate here how to do all the preprocessing using tf.data (there will be more details about creating windows using tf.data in the next chapter).

# In[89]:


def create_target(batch):
    X = batch[:, :-1]
    Y = batch[:, 1:] # predict next note in each arpegio, at each step
    return X, Y

def preprocess(window):
    window = tf.where(window == 0, window, window - min_note + 1) # shift values
    return tf.reshape(window, [-1]) # convert to arpegio

def bach_dataset(chorales, batch_size=32, shuffle_buffer_size=None,
                 window_size=32, window_shift=16, cache=True):
    def batch_window(window):
        return window.batch(window_size + 1)

    def to_windows(chorale):
        dataset = tf.data.Dataset.from_tensor_slices(chorale)
        dataset = dataset.window(window_size + 1, window_shift, drop_remainder=True)
        return dataset.flat_map(batch_window)

    chorales = tf.ragged.constant(chorales, ragged_rank=1)
    dataset = tf.data.Dataset.from_tensor_slices(chorales)
    dataset = dataset.flat_map(to_windows).map(preprocess)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(create_target)
    return dataset.prefetch(1)


# Now let's create the training set, the validation set and the test set:

# In[90]:


train_set = bach_dataset(train_chorales, shuffle_buffer_size=1000)
valid_set = bach_dataset(valid_chorales)
test_set = bach_dataset(test_chorales)


# Now let's create the model:
# 
# * We could feed the note values directly to the model, as floats, but this would probably not give good results. Indeed, the relationships between notes are not that simple: for example, if you replace a C3 with a C4, the melody will still sound fine, even though these notes are 12 semi-tones apart (i.e., one octave). Conversely, if you replace a C3 with a C\\#3, it's very likely that the chord will sound horrible, despite these notes being just next to each other. So we will use an `Embedding` layer to convert each note to a small vector representation (see Chapter 16 for more details on embeddings). We will use 5-dimensional embeddings, so the output of this first layer will have a shape of `[batch_size, window_size, 5]`.
# * We will then feed this data to a small WaveNet-like neural network, composed of a stack of 4 `Conv1D` layers with doubling dilation rates. We will intersperse these layers with `BatchNormalization` layers for faster better convergence.
# * Then one `LSTM` layer to try to capture long-term patterns.
# * And finally a `Dense` layer to produce the final note probabilities. It will predict one probability for each chorale in the batch, for each time step, and for each possible note (including silence). So the output shape will be `[batch_size, window_size, 47]`.

# In[91]:


n_embedding_dims = 5

model = keras.models.Sequential([
    keras.layers.Embedding(input_dim=n_notes, output_dim=n_embedding_dims,
                           input_shape=[None]),
    keras.layers.Conv1D(32, kernel_size=2, padding=\"causal\", activation=\"relu\"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv1D(48, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=2),
    keras.layers.BatchNormalization(),
    keras.layers.Conv1D(64, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=4),
    keras.layers.BatchNormalization(),
    keras.layers.Conv1D(96, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=8),
    keras.layers.BatchNormalization(),
    keras.layers.LSTM(256, return_sequences=True),
    keras.layers.Dense(n_notes, activation=\"softmax\")
])

model.summary()


# Now we're ready to compile and train the model!

# In[92]:


optimizer = keras.optimizers.Nadam(learning_rate=1e-3)
model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer,
              metrics=[\"accuracy\"])
model.fit(train_set, epochs=20, validation_data=valid_set)


# I have not done much hyperparameter search, so feel free to iterate on this model now and try to optimize it. For example, you could try removing the `LSTM` layer and replacing it with `Conv1D` layers. You could also play with the number of layers, the learning rate, the optimizer, and so on.

# Once you're satisfied with the performance of the model on the validation set, you can save it and evaluate it one last time on the test set:

# In[93]:


model.save(\"my_bach_model.h5\")
model.evaluate(test_set)


# **Note:** There's no real need for a test set in this exercise, since we will perform the final evaluation by just listening to the music produced by the model. So if you want, you can add the test set to the train set, and train the model again, hopefully getting a slightly better model.

# Now let's write a function that will generate a new chorale. We will give it a few seed chords, it will convert them to arpegios (the format expected by the model), and use the model to predict the next note, then the next, and so on. In the end, it will group the notes 4 by 4 to create chords again, and return the resulting chorale.

# **Warning**: `model.predict_classes(X)` is deprecated. It is replaced with `np.argmax(model.predict(X), axis=-1)`.

# In[94]:


def generate_chorale(model, seed_chords, length):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            #next_note = model.predict_classes(arpegio)[:1, -1:]
            next_note = np.argmax(model.predict(arpegio), axis=-1)[:1, -1:]
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# To test this function, we need some seed chords. Let's use the first 8 chords of one of the test chorales (it's actually just 2 different chords, each played 4 times):

# In[95]:


seed_chords = test_chorales[2][:8]
play_chords(seed_chords, amplitude=0.2)


# Now we are ready to generate our first chorale! Let's ask the function to generate 56 more chords, for a total of 64 chords, i.e., 16 bars (assuming 4 chords per bar, i.e., a 4/4 signature):

# In[96]:


new_chorale = generate_chorale(model, seed_chords, 56)
play_chords(new_chorale)


# This approach has one major flaw: it is often too conservative. Indeed, the model will not take any risk, it will always choose the note with the highest score, and since repeating the previous note generally sounds good enough, it's the least risky option, so the algorithm will tend to make notes last longer and longer. Pretty boring. Plus, if you run the model multiple times, it will always generate the same melody.
# 
# So let's spice things up a bit! Instead of always picking the note with the highest score, we will pick the next note randomly, according to the predicted probabilities. For example, if the model predicts a C3 with 75% probability, and a G3 with a 25% probability, then we will pick one of these two notes randomly, with these probabilities. We will also add a `temperature` parameter that will control how \"hot\" (i.e., daring) we want the system to feel. A high temperature will bring the predicted probabilities closer together, reducing the probability of the likely notes and increasing the probability of the unlikely ones.

# In[97]:


def generate_chorale_v2(model, seed_chords, length, temperature=1):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            next_note_probas = model.predict(arpegio)[0, -1:]
            rescaled_logits = tf.math.log(next_note_probas) / temperature
            next_note = tf.random.categorical(rescaled_logits, num_samples=1)
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# Let's generate 3 chorales using this new function: one cold, one medium, and one hot (feel free to experiment with other seeds, lengths and temperatures). The code saves each chorale to a separate file. You can run these cells over an over again until you generate a masterpiece!
# 
# **Please share your most beautiful generated chorale with me on Twitter @aureliengeron, I would really appreciate it! :))**

# In[98]:


new_chorale_v2_cold = generate_chorale_v2(model, seed_chords, 56, temperature=0.8)
play_chords(new_chorale_v2_cold, filepath=\"bach_cold.wav\")


# In[99]:


new_chorale_v2_medium = generate_chorale_v2(model, seed_chords, 56, temperature=1.0)
play_chords(new_chorale_v2_medium, filepath=\"bach_medium.wav\")


# In[100]:


new_chorale_v2_hot = generate_chorale_v2(model, seed_chords, 56, temperature=1.5)
play_chords(new_chorale_v2_hot, filepath=\"bach_hot.wav\")


# Lastly, you can try a fun social experiment: send your friends a few of your favorite generated chorales, plus the real chorale, and ask them to guess which one is the real one!

# In[101]:


play_chords(test_chorales[2][:64], filepath=\"bach_test_4.wav\")

" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 22 (face font-lock-comment-face fontified t) 22 23 (fontified t) 23 29 (face font-lock-keyword-face fontified t) 29 37 (fontified t) 37 38 (fontified t) 38 44 (face font-lock-keyword-face fontified t) 44 56 (fontified t) 56 58 (face font-lock-keyword-face fontified t) 58 61 (fontified t) 61 62 (fontified t) 62 66 (face font-lock-keyword-face fontified t) 66 78 (fontified t) 78 84 (face font-lock-keyword-face fontified t) 84 91 (fontified t) 91 93 (face font-lock-keyword-face fontified t) 93 97 (face font-lock-keyword-face fontified t) 97 104 (fontified t) 104 106 (face font-lock-keyword-face fontified t) 106 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 114 (face font-lock-keyword-face fontified t) 114 123 (fontified t) 123 129 (face font-lock-keyword-face fontified t) 129 134 (fontified t) 134 135 (fontified t) 135 136 (fontified t) 136 138 (face font-lock-comment-delimiter-face fontified t) 138 188 (face font-lock-comment-face fontified t) 188 190 (fontified t) 190 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-1-face) fontified t) 203 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-1-face) fontified t) 206 207 (fontified t) 207 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-1-face) fontified t) 226 228 (fontified t) 228 229 (face (rainbow-delimiters-depth-1-face) fontified t) 229 231 (fontified t) 231 237 (face font-lock-keyword-face fontified t) 237 249 (fontified t) 249 251 (face font-lock-keyword-face fontified t) 251 255 (fontified t) 255 256 (fontified t) 256 262 (face font-lock-keyword-face fontified t) 262 281 (fontified t) 281 283 (face font-lock-keyword-face fontified t) 283 294 (fontified t) 294 295 (face (rainbow-delimiters-depth-1-face) fontified t) 295 301 (face font-lock-string-face fontified t) 301 315 (fontified t) 315 316 (face (rainbow-delimiters-depth-1-face) fontified t) 316 317 (fontified t) 317 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-1-face) fontified t) 324 331 (face font-lock-string-face fontified t) 331 345 (fontified t) 345 346 (face (rainbow-delimiters-depth-1-face) fontified t) 346 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-1-face) fontified t) 354 361 (face font-lock-string-face fontified t) 361 375 (fontified t) 375 376 (face (rainbow-delimiters-depth-1-face) fontified t) 376 378 (fontified t) 378 380 (face font-lock-comment-delimiter-face fontified t) 380 405 (face font-lock-comment-face fontified t) 405 406 (face font-lock-comment-face fontified t) 406 422 (face font-lock-variable-name-face fontified t) 422 425 (fontified t) 425 428 (face font-lock-string-face fontified t) 428 429 (fontified t) 429 439 (face font-lock-variable-name-face fontified t) 439 442 (fontified t) 442 447 (face font-lock-string-face fontified t) 447 448 (fontified t) 448 459 (face font-lock-variable-name-face fontified t) 459 474 (fontified t) 474 475 (face (rainbow-delimiters-depth-1-face) fontified t) 475 485 (fontified t) 485 486 (fontified t) 486 493 (fontified t) 493 501 (face font-lock-string-face fontified t) 501 503 (fontified t) 503 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-1-face) fontified t) 514 515 (fontified t) 515 522 (fontified t) 522 526 (fontified t) 526 527 (face (rainbow-delimiters-depth-1-face) fontified t) 527 549 (fontified t) 549 553 (face font-lock-constant-face fontified t) 553 554 (face (rainbow-delimiters-depth-1-face) fontified t) 554 555 (fontified t) 555 556 (fontified t) 556 557 (face font-lock-keyword-face fontified t) 557 559 (face font-lock-keyword-face fontified t) 559 560 (fontified t) 560 568 (face font-lock-function-name-face fontified t) 568 569 (face (rainbow-delimiters-depth-1-face) fontified t) 569 590 (fontified t) 590 594 (face font-lock-constant-face fontified t) 594 610 (fontified t) 610 615 (face font-lock-string-face fontified t) 615 629 (fontified t) 629 631 (fontified t) 631 632 (face (rainbow-delimiters-depth-1-face) fontified t) 632 634 (fontified t) 634 638 (fontified t) 638 642 (face font-lock-variable-name-face fontified t) 642 657 (fontified t) 657 658 (face (rainbow-delimiters-depth-1-face) fontified t) 658 678 (fontified t) 678 680 (fontified t) 680 683 (face font-lock-string-face fontified t) 683 699 (fontified t) 699 700 (face (rainbow-delimiters-depth-1-face) fontified t) 700 701 (fontified t) 701 705 (fontified t) 705 710 (face font-lock-keyword-face fontified t) 710 711 (face (rainbow-delimiters-depth-1-face) fontified t) 711 726 (face font-lock-string-face fontified t) 726 731 (fontified t) 731 734 (fontified t) 734 735 (face (rainbow-delimiters-depth-1-face) fontified t) 735 736 (fontified t) 736 740 (fontified t) 740 742 (face font-lock-keyword-face fontified t) 742 756 (fontified t) 756 757 (fontified t) 757 781 (fontified t) 781 782 (face (rainbow-delimiters-depth-1-face) fontified t) 782 783 (face (rainbow-delimiters-depth-1-face) fontified t) 783 799 (fontified t) 799 800 (face (rainbow-delimiters-depth-1-face) fontified t) 800 806 (fontified t) 806 812 (face font-lock-builtin-face fontified t) 812 842 (fontified t) 842 843 (face (rainbow-delimiters-depth-1-face) fontified t) 843 846 (fontified t) 846 848 (face font-lock-comment-delimiter-face fontified t) 848 861 (face font-lock-comment-face fontified t) 861 862 (fontified t) 862 864 (face font-lock-comment-delimiter-face fontified t) 864 888 (face font-lock-comment-face fontified t) 888 889 (fontified t) 889 891 (face font-lock-comment-delimiter-face fontified t) 891 898 (face font-lock-comment-face fontified t) 898 900 (fontified t) 900 903 (face font-lock-keyword-face fontified t) 903 904 (fontified t) 904 924 (face font-lock-function-name-face fontified t) 924 925 (face (rainbow-delimiters-depth-1-face) fontified t) 925 944 (fontified t) 944 945 (face (rainbow-delimiters-depth-1-face) fontified t) 945 951 (fontified t) 951 956 (face font-lock-variable-name-face fontified t) 956 958 (fontified t) 958 963 (face font-lock-variable-name-face fontified t) 963 965 (fontified t) 965 973 (face font-lock-variable-name-face fontified t) 973 975 (fontified t) 975 983 (face font-lock-variable-name-face fontified t) 983 1000 (fontified t) 1000 1001 (face (rainbow-delimiters-depth-1-face) fontified t) 1001 1015 (fontified t) 1015 1017 (fontified t) 1017 1018 (face (rainbow-delimiters-depth-1-face) fontified t) 1018 1019 (fontified t) 1019 1023 (fontified t) 1023 1027 (face font-lock-variable-name-face fontified t) 1027 1041 (fontified t) 1041 1042 (face (rainbow-delimiters-depth-1-face) fontified t) 1042 1055 (fontified t) 1055 1056 (face (rainbow-delimiters-depth-1-face) fontified t) 1056 1057 (fontified t) 1057 1061 (fontified t) 1061 1067 (face font-lock-variable-name-face fontified t) 1067 1082 (fontified t) 1082 1083 (face (rainbow-delimiters-depth-1-face) fontified t) 1083 1084 (face (rainbow-delimiters-depth-2-face) fontified t) 1084 1099 (fontified t) 1099 1100 (face (rainbow-delimiters-depth-2-face) fontified t) 1100 1103 (fontified t) 1103 1104 (face (rainbow-delimiters-depth-2-face) fontified t) 1104 1119 (fontified t) 1119 1120 (face (rainbow-delimiters-depth-2-face) fontified t) 1120 1121 (face (rainbow-delimiters-depth-1-face) fontified t) 1121 1123 (fontified t) 1123 1127 (face font-lock-comment-delimiter-face fontified t) 1127 1134 (face font-lock-comment-face fontified t) 1134 1138 (fontified t) 1138 1144 (face font-lock-variable-name-face fontified t) 1144 1160 (fontified t) 1160 1161 (face (rainbow-delimiters-depth-1-face) fontified t) 1161 1162 (face (rainbow-delimiters-depth-2-face) fontified t) 1162 1177 (fontified t) 1177 1178 (face (rainbow-delimiters-depth-2-face) fontified t) 1178 1181 (fontified t) 1181 1182 (face (rainbow-delimiters-depth-2-face) fontified t) 1182 1197 (fontified t) 1197 1198 (face (rainbow-delimiters-depth-2-face) fontified t) 1198 1199 (face (rainbow-delimiters-depth-1-face) fontified t) 1199 1200 (fontified t) 1200 1201 (face font-lock-comment-delimiter-face fontified t) 1201 1202 (face font-lock-comment-delimiter-face fontified t) 1202 1211 (face font-lock-comment-face fontified t) 1211 1215 (fontified t) 1215 1221 (face font-lock-variable-name-face fontified t) 1221 1231 (fontified t) 1231 1232 (face (rainbow-delimiters-depth-1-face) fontified t) 1232 1236 (fontified t) 1236 1246 (fontified t) 1246 1247 (face (rainbow-delimiters-depth-2-face) fontified t) 1247 1257 (fontified t) 1257 1266 (fontified t) 1266 1267 (fontified t face (rainbow-delimiters-depth-2-face)) 1267 1273 (fontified t) 1273 1274 (fontified t face (rainbow-delimiters-depth-1-face)) 1274 1277 (fontified t) 1277 1279 (fontified t face font-lock-comment-delimiter-face) 1279 1287 (fontified t face font-lock-comment-face)) . 1) (undo-tree-id57 . -231) (undo-tree-id58 . -231) (undo-tree-id59 . 42612) (undo-tree-id60 . -23) (undo-tree-id61 . -23) (undo-tree-id62 . -23) (undo-tree-id63 . -23) (undo-tree-id64 . -23) (undo-tree-id65 . -23) (undo-tree-id66 . -23) (undo-tree-id67 . -23) (undo-tree-id68 . -23) (undo-tree-id69 . -23) (undo-tree-id70 . -23) (undo-tree-id71 . -23) (undo-tree-id72 . -23) (undo-tree-id73 . -23) (undo-tree-id74 . -23) (undo-tree-id75 . -23) (undo-tree-id76 . -23) (undo-tree-id77 . -23) (undo-tree-id78 . -23) (undo-tree-id79 . -23) (undo-tree-id80 . -23) (undo-tree-id81 . -23) (undo-tree-id82 . -23) (undo-tree-id83 . -23) (undo-tree-id84 . -23) (undo-tree-id85 . -23) (undo-tree-id86 . -23) (undo-tree-id87 . -23) (undo-tree-id88 . -23) (undo-tree-id89 . -23) (undo-tree-id90 . -23) (undo-tree-id91 . -23) (undo-tree-id92 . -23) (undo-tree-id93 . -23) (undo-tree-id94 . -23) (undo-tree-id95 . -23) (undo-tree-id96 . -23) (undo-tree-id97 . -23) (undo-tree-id98 . -23) (undo-tree-id99 . -23) (undo-tree-id100 . -23) (undo-tree-id101 . -23) (undo-tree-id102 . -23) (undo-tree-id103 . -23) (undo-tree-id104 . -23) (undo-tree-id105 . -23) (undo-tree-id106 . -23) (undo-tree-id107 . -23) (undo-tree-id108 . -23) (undo-tree-id109 . -23) (undo-tree-id110 . -38) (undo-tree-id111 . -38) (undo-tree-id112 . -91) (undo-tree-id113 . -91) (undo-tree-id114 . -91) (undo-tree-id115 . -91) (undo-tree-id116 . -91) (undo-tree-id117 . -91) (undo-tree-id118 . -91) (undo-tree-id119 . -91) (undo-tree-id120 . -91) (undo-tree-id121 . -91) (undo-tree-id122 . -231) (undo-tree-id123 . -231) (undo-tree-id124 . -231) (undo-tree-id125 . -231) (undo-tree-id126 . -288) (undo-tree-id127 . -288) (undo-tree-id128 . -317) (undo-tree-id129 . -317) (undo-tree-id130 . -347) (undo-tree-id131 . -347) (undo-tree-id132 . -23) (undo-tree-id133 . -23) (undo-tree-id134 . -23) (undo-tree-id135 . -23) (undo-tree-id136 . -23) (undo-tree-id137 . -23) (undo-tree-id138 . -23) (undo-tree-id139 . -23) (undo-tree-id140 . -23) (undo-tree-id141 . -23) (undo-tree-id142 . -23) (undo-tree-id143 . -23) (undo-tree-id144 . -23) (undo-tree-id145 . -23) (undo-tree-id146 . -23) (undo-tree-id147 . -23) (undo-tree-id148 . -23) (undo-tree-id149 . -23) (undo-tree-id150 . -23) (undo-tree-id151 . -23) (undo-tree-id152 . -23) (undo-tree-id153 . -23) (undo-tree-id154 . -23) (undo-tree-id155 . -23) (undo-tree-id156 . -23) (undo-tree-id157 . -23) (undo-tree-id158 . -23) (undo-tree-id159 . -23) (undo-tree-id160 . -23) (undo-tree-id161 . -23) (undo-tree-id162 . -23) (undo-tree-id163 . -23) (undo-tree-id164 . -23) (undo-tree-id165 . -23) (undo-tree-id166 . -23) (undo-tree-id167 . -23) (undo-tree-id168 . -23) (undo-tree-id169 . -29) (undo-tree-id170 . -38) (undo-tree-id171 . -44) (undo-tree-id172 . -62) (undo-tree-id173 . -66) (undo-tree-id174 . -91) (undo-tree-id175 . -91) (undo-tree-id176 . -91) (undo-tree-id177 . -91) (undo-tree-id178 . -91) (undo-tree-id179 . -97) (undo-tree-id180 . -110) (undo-tree-id181 . -110) (undo-tree-id182 . -110) (undo-tree-id183 . -114) (undo-tree-id184 . -231) (undo-tree-id185 . -231) (undo-tree-id186 . -231) (undo-tree-id187 . -237) (undo-tree-id188 . -256) (undo-tree-id189 . -262) (undo-tree-id190 . -556) (undo-tree-id191 . -559) (undo-tree-id192 . -1123) (undo-tree-id193 . -1124) (undo-tree-id194 . -1199) (undo-tree-id195 . -1200) (undo-tree-id196 . -1762) (undo-tree-id197 . -1768) (undo-tree-id198 . -2284) (undo-tree-id199 . -2287) (undo-tree-id200 . -2494) (undo-tree-id201 . -2495) (undo-tree-id202 . -2666) (undo-tree-id203 . -2675) (undo-tree-id204 . -3715) (undo-tree-id205 . -3719) (undo-tree-id206 . -3925) (undo-tree-id207 . -3945) (undo-tree-id208 . -6235) (undo-tree-id209 . -6236) (undo-tree-id210 . -6817) (undo-tree-id211 . -6823) (undo-tree-id212 . -6905) (undo-tree-id213 . -6906) (undo-tree-id214 . -7004) (undo-tree-id215 . -7027) (undo-tree-id216 . -7170) (undo-tree-id217 . -7180) (undo-tree-id218 . -7938) (undo-tree-id219 . -7944) (undo-tree-id220 . -8014) (undo-tree-id221 . -8015) (undo-tree-id222 . -8051) (undo-tree-id223 . -8052) (undo-tree-id224 . -9230) (undo-tree-id225 . -9234) (undo-tree-id226 . -10339) (undo-tree-id227 . -10342) (undo-tree-id228 . -10454) (undo-tree-id229 . -10459) (undo-tree-id230 . -10533) (undo-tree-id231 . -10540) (undo-tree-id232 . -11538) (undo-tree-id233 . -11542) (undo-tree-id234 . -12061) (undo-tree-id235 . -12064) (undo-tree-id236 . -12315) (undo-tree-id237 . -12318) (undo-tree-id238 . -13402) (undo-tree-id239 . -13405) (undo-tree-id240 . -13564) (undo-tree-id241 . -13565) (undo-tree-id242 . -13571) (undo-tree-id243 . -13572) (undo-tree-id244 . -13936) (undo-tree-id245 . -13942) (undo-tree-id246 . -16629) (undo-tree-id247 . -16630) (undo-tree-id248 . -17049) (undo-tree-id249 . -17050) (undo-tree-id250 . -17062) (undo-tree-id251 . -17063) (undo-tree-id252 . -18924) (undo-tree-id253 . -18929) (undo-tree-id254 . -19277) (undo-tree-id255 . -19280) (undo-tree-id256 . -19989) (undo-tree-id257 . -19990) (undo-tree-id258 . -20020) (undo-tree-id259 . -20021) (undo-tree-id260 . -20052) (undo-tree-id261 . -20053) (undo-tree-id262 . -20086) (undo-tree-id263 . -20087) (undo-tree-id264 . -20629) (undo-tree-id265 . -20630) (undo-tree-id266 . -20968) (undo-tree-id267 . -20969) (undo-tree-id268 . -21546) (undo-tree-id269 . -21548) (undo-tree-id270 . -21650) (undo-tree-id271 . -21653) (undo-tree-id272 . -22357) (undo-tree-id273 . -22365) (undo-tree-id274 . -22451) (undo-tree-id275 . -22452) (undo-tree-id276 . -22642) (undo-tree-id277 . -22643) (undo-tree-id278 . -24562) (undo-tree-id279 . -24563) (undo-tree-id280 . -24944) (undo-tree-id281 . -24947) (undo-tree-id282 . -25204) (undo-tree-id283 . -25211) (undo-tree-id284 . -25329) (undo-tree-id285 . -25332) (undo-tree-id286 . -25836) (undo-tree-id287 . -25842) (undo-tree-id288 . -25846) (undo-tree-id289 . -25863) (undo-tree-id290 . -27273) (undo-tree-id291 . -27274) (undo-tree-id292 . -27717) (undo-tree-id293 . -27722) (undo-tree-id294 . -28625) (undo-tree-id295 . -28626) (undo-tree-id296 . -28628) (undo-tree-id297 . -28629) (undo-tree-id298 . -28718) (undo-tree-id299 . -28730) (undo-tree-id300 . -29247) (undo-tree-id301 . -29253) (undo-tree-id302 . -29268) (undo-tree-id303 . -29271) (undo-tree-id304 . -29376) (undo-tree-id305 . -29390) (undo-tree-id306 . -29618) (undo-tree-id307 . -29621) (undo-tree-id308 . -30010) (undo-tree-id309 . -30020) (undo-tree-id310 . -30204) (undo-tree-id311 . -30208) (undo-tree-id312 . -30239) (undo-tree-id313 . -30242) (undo-tree-id314 . -30474) (undo-tree-id315 . -30477) (undo-tree-id316 . -30565) (undo-tree-id317 . -30566) (undo-tree-id318 . -31158) (undo-tree-id319 . -31161) (undo-tree-id320 . -31286) (undo-tree-id321 . -31287) (undo-tree-id322 . -31493) (undo-tree-id323 . -31494) (undo-tree-id324 . -31637) (undo-tree-id325 . -31640) (undo-tree-id326 . -31715) (undo-tree-id327 . -31719) (undo-tree-id328 . -31970) (undo-tree-id329 . -31977) (undo-tree-id330 . -32020) (undo-tree-id331 . -32027) (undo-tree-id332 . -32271) (undo-tree-id333 . -32274) (undo-tree-id334 . -33047) (undo-tree-id335 . -33048) (undo-tree-id336 . -33122) (undo-tree-id337 . -33132) (undo-tree-id338 . -33198) (undo-tree-id339 . -33199) (undo-tree-id340 . -33274) (undo-tree-id341 . -33275) (undo-tree-id342 . -33352) (undo-tree-id343 . -33357) (undo-tree-id344 . -33625) (undo-tree-id345 . -33626) (undo-tree-id346 . -33693) (undo-tree-id347 . -33696) (undo-tree-id348 . -33782) (undo-tree-id349 . -33783) (undo-tree-id350 . -33791) (undo-tree-id351 . -33797) (undo-tree-id352 . -33833) (undo-tree-id353 . -33834) (undo-tree-id354 . -33856) (undo-tree-id355 . -33859) (undo-tree-id356 . -34233) (undo-tree-id357 . -34237) (undo-tree-id358 . -34975) (undo-tree-id359 . -34976) (undo-tree-id360 . -35054) (undo-tree-id361 . -35059) (undo-tree-id362 . -35784) (undo-tree-id363 . -35792) (undo-tree-id364 . -36092) (undo-tree-id365 . -36096) (undo-tree-id366 . -36552) (undo-tree-id367 . -36553) (undo-tree-id368 . -36672) (undo-tree-id369 . -36673) (undo-tree-id370 . -36809) (undo-tree-id371 . -36810) (undo-tree-id372 . -36946) (undo-tree-id373 . -36947) (undo-tree-id374 . -37499) (undo-tree-id375 . -37504) (undo-tree-id376 . -37797) (undo-tree-id377 . -37798) (undo-tree-id378 . -38012) (undo-tree-id379 . -38013) (undo-tree-id380 . -38305) (undo-tree-id381 . -38306) (undo-tree-id382 . -38643) (undo-tree-id383 . -38645) (undo-tree-id384 . -38929) (undo-tree-id385 . -38930) (undo-tree-id386 . -39317) (undo-tree-id387 . -39318) (undo-tree-id388 . -39574) (undo-tree-id389 . -39582) (undo-tree-id390 . -39864) (undo-tree-id391 . -39869) (undo-tree-id392 . -40211) (undo-tree-id393 . -40212) (undo-tree-id394 . -40291) (undo-tree-id395 . -40298) (undo-tree-id396 . -41570) (undo-tree-id397 . -41573) (undo-tree-id398 . -41774) (undo-tree-id399 . -41775) (undo-tree-id400 . -41851) (undo-tree-id401 . -41864) (undo-tree-id402 . -41994) (undo-tree-id403 . -41995) (undo-tree-id404 . -42150) (undo-tree-id405 . -42151) (undo-tree-id406 . -42313) (undo-tree-id407 . -42314) (undo-tree-id408 . -42454) (undo-tree-id409 . -42462) (undo-tree-id410 . -42632) (undo-tree-id411 . -42633) (undo-tree-id412 . -23) (undo-tree-id413 . -23) (undo-tree-id414 . -23) (undo-tree-id415 . -23) (undo-tree-id416 . -23) (undo-tree-id417 . -23) (undo-tree-id418 . -23) (undo-tree-id419 . -23) (undo-tree-id420 . -23) (undo-tree-id421 . -23) (undo-tree-id422 . -23) (undo-tree-id423 . -23) (undo-tree-id424 . -23) (undo-tree-id425 . -23) (undo-tree-id426 . -23) (undo-tree-id427 . -23) (undo-tree-id428 . -38) (undo-tree-id429 . -38) (undo-tree-id430 . -91) (undo-tree-id431 . -91) (undo-tree-id432 . -91) (undo-tree-id433 . -91) (undo-tree-id434 . -91) (undo-tree-id435 . -91) (undo-tree-id436 . -91) (undo-tree-id437 . -91) (undo-tree-id438 . -91) (undo-tree-id439 . -91) (undo-tree-id440 . -231) (undo-tree-id441 . -231) (undo-tree-id442 . -231) (undo-tree-id443 . -231) (undo-tree-id444 . -288) (undo-tree-id445 . -288) (undo-tree-id446 . -317) (undo-tree-id447 . -317) (undo-tree-id448 . -347) (undo-tree-id449 . -347) (undo-tree-id450 . -23) (undo-tree-id451 . -23) (undo-tree-id452 . -23) (undo-tree-id453 . -23) (undo-tree-id454 . -23) (undo-tree-id455 . -23) (undo-tree-id456 . -23) (undo-tree-id457 . -23) (undo-tree-id458 . -23) (undo-tree-id459 . -23) (undo-tree-id460 . -23) (undo-tree-id461 . -23) (undo-tree-id462 . -23) (undo-tree-id463 . -23) (undo-tree-id464 . -23) (undo-tree-id465 . -23) (undo-tree-id466 . -23) (undo-tree-id467 . -23) (undo-tree-id468 . -23) (undo-tree-id469 . -23) (undo-tree-id470 . -23) (undo-tree-id471 . -23) (undo-tree-id472 . -23) (undo-tree-id473 . -23) (undo-tree-id474 . -23) (undo-tree-id475 . -23) (undo-tree-id476 . -23) (undo-tree-id477 . -23) (undo-tree-id478 . -23) (undo-tree-id479 . -23) (undo-tree-id480 . -23) (undo-tree-id481 . -23) (undo-tree-id482 . -23) (undo-tree-id483 . -23) (undo-tree-id484 . -23) (undo-tree-id485 . -23) (undo-tree-id486 . -23) (undo-tree-id487 . -23) (undo-tree-id488 . -23) (undo-tree-id489 . -23) (undo-tree-id490 . -23) (undo-tree-id491 . -23) (undo-tree-id492 . -23) (undo-tree-id493 . -23) (undo-tree-id494 . -23) (undo-tree-id495 . -23) (undo-tree-id496 . -23) (undo-tree-id497 . -23) (undo-tree-id498 . -23) (undo-tree-id499 . -23) (undo-tree-id500 . -23) (undo-tree-id501 . -23) (undo-tree-id502 . -23) (undo-tree-id503 . -23) (undo-tree-id504 . -23) (undo-tree-id505 . -23) (undo-tree-id506 . -23) (undo-tree-id507 . -23) (undo-tree-id508 . -23) (undo-tree-id509 . -23) (undo-tree-id510 . -23) (undo-tree-id511 . -23) (undo-tree-id512 . -23) (undo-tree-id513 . -23) (undo-tree-id514 . -23) (undo-tree-id515 . -23) (undo-tree-id516 . -23) (undo-tree-id517 . -23) (undo-tree-id518 . -23) (undo-tree-id519 . -23) (undo-tree-id520 . -23) (undo-tree-id521 . -23) (undo-tree-id522 . -23) (undo-tree-id523 . -23) (undo-tree-id524 . -23) (undo-tree-id525 . -23) (undo-tree-id526 . -23) (undo-tree-id527 . -23) (undo-tree-id528 . -23) (undo-tree-id529 . -23) (undo-tree-id530 . -23) (undo-tree-id531 . -23) (undo-tree-id532 . -23) (undo-tree-id533 . -23) (undo-tree-id534 . -23) (undo-tree-id535 . -23) (undo-tree-id536 . -23) (undo-tree-id537 . -23) (undo-tree-id538 . -23) (undo-tree-id539 . -23) (undo-tree-id540 . -23) (undo-tree-id541 . -23) (undo-tree-id542 . -23) (undo-tree-id543 . -23) (undo-tree-id544 . -23) (undo-tree-id545 . -23) (undo-tree-id546 . -23) (undo-tree-id547 . -23) (undo-tree-id548 . -23) (undo-tree-id549 . -23) (undo-tree-id550 . -23) (undo-tree-id551 . -23) (undo-tree-id552 . -23) (undo-tree-id553 . -23) (undo-tree-id554 . -23) (undo-tree-id555 . -23) (undo-tree-id556 . -23) (undo-tree-id557 . -23) (undo-tree-id558 . -23) (undo-tree-id559 . -23) (undo-tree-id560 . -23) (undo-tree-id561 . -23) (undo-tree-id562 . -23) (undo-tree-id563 . -23) (undo-tree-id564 . -23) (undo-tree-id565 . -23) (undo-tree-id566 . -23) (undo-tree-id567 . -23) (undo-tree-id568 . -23) (undo-tree-id569 . -23) (undo-tree-id570 . -23) (undo-tree-id571 . -38) (undo-tree-id572 . -38) (undo-tree-id573 . -91) (undo-tree-id574 . -91) (undo-tree-id575 . -91) (undo-tree-id576 . -91) (undo-tree-id577 . -91) (undo-tree-id578 . -91) (undo-tree-id579 . -91) (undo-tree-id580 . -91) (undo-tree-id581 . -91) (undo-tree-id582 . -91) (undo-tree-id583 . -231) (undo-tree-id584 . -231) (undo-tree-id585 . -231) (undo-tree-id586 . -231) (undo-tree-id587 . -288) (undo-tree-id588 . -288) (undo-tree-id589 . -317) (undo-tree-id590 . -317) (undo-tree-id591 . -347) (undo-tree-id592 . -347) (undo-tree-id593 . -406) (undo-tree-id594 . -406) (undo-tree-id595 . -425) (undo-tree-id596 . -429) (undo-tree-id597 . -429) (undo-tree-id598 . -442) (undo-tree-id599 . -448) (undo-tree-id600 . -448) (undo-tree-id601 . -462) (undo-tree-id602 . -23) (undo-tree-id603 . -23) (undo-tree-id604 . -23) (undo-tree-id605 . -23) (undo-tree-id606 . -23) (undo-tree-id607 . -23) (undo-tree-id608 . -23) (undo-tree-id609 . -23) (undo-tree-id610 . -23) (undo-tree-id611 . -23) (undo-tree-id612 . -23) (undo-tree-id613 . -37) (undo-tree-id614 . -23) (undo-tree-id615 . -23) (undo-tree-id616 . -23) (undo-tree-id617 . -23) (undo-tree-id618 . -23) (undo-tree-id619 . -23) (undo-tree-id620 . -23) (undo-tree-id621 . -23) (undo-tree-id622 . -23) (undo-tree-id623 . -23) (undo-tree-id624 . -23) (undo-tree-id625 . -23) (undo-tree-id626 . -23) (undo-tree-id627 . -23) (undo-tree-id628 . -23) (undo-tree-id629 . -23) (undo-tree-id630 . -23) (undo-tree-id631 . -23) (undo-tree-id632 . -23) (undo-tree-id633 . -23) (undo-tree-id634 . -23) (undo-tree-id635 . -23) (undo-tree-id636 . -23) (undo-tree-id637 . -23) (undo-tree-id638 . -23) (undo-tree-id639 . -23) (undo-tree-id640 . -23) (undo-tree-id641 . -23) (undo-tree-id642 . -23) (undo-tree-id643 . -23) (undo-tree-id644 . -23) (undo-tree-id645 . -23) (undo-tree-id646 . -23) (undo-tree-id647 . -23) (undo-tree-id648 . -23) (undo-tree-id649 . -23) (undo-tree-id650 . -23) (undo-tree-id651 . -23) (undo-tree-id652 . -23) (undo-tree-id653 . -23) (undo-tree-id654 . -23) (undo-tree-id655 . -23) (undo-tree-id656 . -23) (undo-tree-id657 . -23) (undo-tree-id658 . -38) (undo-tree-id659 . -38) (undo-tree-id660 . -38) (undo-tree-id661 . -38) (undo-tree-id662 . -38) (undo-tree-id663 . -38) (undo-tree-id664 . -38) (undo-tree-id665 . -38) (undo-tree-id666 . -38) (undo-tree-id667 . -38) (undo-tree-id668 . -38) (undo-tree-id669 . -38) (undo-tree-id670 . -38) (undo-tree-id671 . -38) (undo-tree-id672 . -38) (undo-tree-id673 . -38) (undo-tree-id674 . -38) (undo-tree-id675 . -38) (undo-tree-id676 . -38) (undo-tree-id677 . -38) (undo-tree-id678 . -38) (undo-tree-id679 . -38) (undo-tree-id680 . -38) (undo-tree-id681 . -38) (undo-tree-id682 . -38) (undo-tree-id683 . -38) (undo-tree-id684 . -91) (undo-tree-id685 . -91) (undo-tree-id686 . -91) (undo-tree-id687 . -91) (undo-tree-id688 . -91) (undo-tree-id689 . -91) (undo-tree-id690 . -91) (undo-tree-id691 . -91) (undo-tree-id692 . -91) (undo-tree-id693 . -91) (undo-tree-id694 . -231) (undo-tree-id695 . -231) (undo-tree-id696 . -231) (undo-tree-id697 . -231) (undo-tree-id698 . -288) (undo-tree-id699 . -288) (undo-tree-id700 . -317) (undo-tree-id701 . -317) (undo-tree-id702 . -347) (undo-tree-id703 . -347) (undo-tree-id704 . -406) (undo-tree-id705 . -406) (undo-tree-id706 . -425) (undo-tree-id707 . -429) (undo-tree-id708 . -429) (undo-tree-id709 . -442) (undo-tree-id710 . -448) (undo-tree-id711 . -448) (undo-tree-id712 . -462) (undo-tree-id713 . -38) (undo-tree-id714 . -38) (undo-tree-id715 . -38) (undo-tree-id716 . -38) (undo-tree-id717 . -38) (undo-tree-id718 . -38) (undo-tree-id719 . -38) (undo-tree-id720 . -38) (undo-tree-id721 . -38) (undo-tree-id722 . -38) (undo-tree-id723 . -38) (undo-tree-id724 . -38) (undo-tree-id725 . -38) (undo-tree-id726 . -38) (undo-tree-id727 . -38) (undo-tree-id728 . -38) (undo-tree-id729 . -38) (undo-tree-id730 . -38) (undo-tree-id731 . -38) (undo-tree-id732 . -38) (undo-tree-id733 . -38) (undo-tree-id734 . -38) (undo-tree-id735 . -38) (undo-tree-id736 . -38) (undo-tree-id737 . -38) (undo-tree-id738 . -38) (undo-tree-id739 . -38) (undo-tree-id740 . -38) (undo-tree-id741 . -38) (undo-tree-id742 . -38) (undo-tree-id743 . -61) (undo-tree-id744 . -38) (undo-tree-id745 . -38) (undo-tree-id746 . -38) (undo-tree-id747 . -38) (undo-tree-id748 . -38) (undo-tree-id749 . -38) (undo-tree-id750 . -38) (undo-tree-id751 . -38) (undo-tree-id752 . -38) (undo-tree-id753 . -38) (undo-tree-id754 . -38) (undo-tree-id755 . -38) (undo-tree-id756 . -38) (undo-tree-id757 . -38) (undo-tree-id758 . -38) (undo-tree-id759 . -38) (undo-tree-id760 . -38) (undo-tree-id761 . -38) (undo-tree-id762 . -38) (undo-tree-id763 . -38) (undo-tree-id764 . -38) (undo-tree-id765 . -38) (undo-tree-id766 . -38) (undo-tree-id767 . -38) (undo-tree-id768 . -38) (undo-tree-id769 . -91) (undo-tree-id770 . -91) (undo-tree-id771 . -91) (undo-tree-id772 . -91) (undo-tree-id773 . -91) (undo-tree-id774 . -91) (undo-tree-id775 . -91) (undo-tree-id776 . -91) (undo-tree-id777 . -91) (undo-tree-id778 . -91) (undo-tree-id779 . -231) (undo-tree-id780 . -231) (undo-tree-id781 . -231) (undo-tree-id782 . -231) (undo-tree-id783 . -288) (undo-tree-id784 . -288) (undo-tree-id785 . -317) (undo-tree-id786 . -317) (undo-tree-id787 . -347) (undo-tree-id788 . -347) (undo-tree-id789 . -406) (undo-tree-id790 . -406) (undo-tree-id791 . -425) (undo-tree-id792 . -429) (undo-tree-id793 . -429) (undo-tree-id794 . -442) (undo-tree-id795 . -448) (undo-tree-id796 . -448) (undo-tree-id797 . -462) (undo-tree-id798 . -556) (undo-tree-id799 . -556) (undo-tree-id800 . -38) (undo-tree-id801 . -38) (undo-tree-id802 . -38) (undo-tree-id803 . -38) (undo-tree-id804 . -38) (undo-tree-id805 . -38) (undo-tree-id806 . -38) (undo-tree-id807 . -38) (undo-tree-id808 . -38) (undo-tree-id809 . -38) (undo-tree-id810 . -38) (undo-tree-id811 . -61) (undo-tree-id812 . -38) (undo-tree-id813 . -38) (undo-tree-id814 . -38) (undo-tree-id815 . -38) (undo-tree-id816 . -38) (undo-tree-id817 . -38) (undo-tree-id818 . -38) (undo-tree-id819 . -38) (undo-tree-id820 . -38) (undo-tree-id821 . -38) (undo-tree-id822 . -38) (undo-tree-id823 . -38) (undo-tree-id824 . -38) (undo-tree-id825 . -38) (undo-tree-id826 . -38) (undo-tree-id827 . -38) (undo-tree-id828 . -38) (undo-tree-id829 . -38) (undo-tree-id830 . -38) (undo-tree-id831 . -91) (undo-tree-id832 . -91) (undo-tree-id833 . -91) (undo-tree-id834 . -91) (undo-tree-id835 . -91) (undo-tree-id836 . -91) (undo-tree-id837 . -91) (undo-tree-id838 . -91) (undo-tree-id839 . -91) (undo-tree-id840 . -91) (undo-tree-id841 . -231) (undo-tree-id842 . -231) (undo-tree-id843 . -231) (undo-tree-id844 . -231) (undo-tree-id845 . -288) (undo-tree-id846 . -288) (undo-tree-id847 . -317) (undo-tree-id848 . -317) (undo-tree-id849 . -347) (undo-tree-id850 . -347) (undo-tree-id851 . -406) (undo-tree-id852 . -406) (undo-tree-id853 . -425) (undo-tree-id854 . -429) (undo-tree-id855 . -429) (undo-tree-id856 . -442) (undo-tree-id857 . -448) (undo-tree-id858 . -448) (undo-tree-id859 . -462) (undo-tree-id860 . -556) (undo-tree-id861 . -556) (undo-tree-id862 . -38) (undo-tree-id863 . -38) (undo-tree-id864 . -38) (undo-tree-id865 . -38) (undo-tree-id866 . -38) (undo-tree-id867 . -38) (undo-tree-id868 . -38) (undo-tree-id869 . -38) (undo-tree-id870 . -38) (undo-tree-id871 . -38) (undo-tree-id872 . -38) (undo-tree-id873 . -38) (undo-tree-id874 . -38) (undo-tree-id875 . -38) (undo-tree-id876 . -38) (undo-tree-id877 . -38) (undo-tree-id878 . -38) (undo-tree-id879 . -38) (undo-tree-id880 . -38) (undo-tree-id881 . -38) (undo-tree-id882 . -38) (undo-tree-id883 . -38) (undo-tree-id884 . -38) (undo-tree-id885 . -38) (undo-tree-id886 . -38) (undo-tree-id887 . -38) (undo-tree-id888 . -38) (undo-tree-id889 . -38) (undo-tree-id890 . -38) (undo-tree-id891 . -38) (undo-tree-id892 . -38) (undo-tree-id893 . -38) (undo-tree-id894 . -38) (undo-tree-id895 . -38) (undo-tree-id896 . -38) (undo-tree-id897 . -38) (undo-tree-id898 . -38) (undo-tree-id899 . -38) (undo-tree-id900 . -38) (undo-tree-id901 . -38) (undo-tree-id902 . -38) (undo-tree-id903 . -38) (undo-tree-id904 . -38) (undo-tree-id905 . -38) (undo-tree-id906 . -38) (undo-tree-id907 . -38) (undo-tree-id908 . -38) (undo-tree-id909 . -38) (undo-tree-id910 . -38) (undo-tree-id911 . -38) (undo-tree-id912 . -38) (undo-tree-id913 . -38) (undo-tree-id914 . -38) (undo-tree-id915 . -38) (undo-tree-id916 . -38) (undo-tree-id917 . -38) (undo-tree-id918 . -38) (undo-tree-id919 . -38) (undo-tree-id920 . -38) (undo-tree-id921 . -38) (undo-tree-id922 . -38) (undo-tree-id923 . -38) (undo-tree-id924 . -38) (undo-tree-id925 . -38) (undo-tree-id926 . -38) (undo-tree-id927 . -38) (undo-tree-id928 . -38) (undo-tree-id929 . -38) (undo-tree-id930 . -38) (undo-tree-id931 . -38) (undo-tree-id932 . -38) (undo-tree-id933 . -38) (undo-tree-id934 . -61) (undo-tree-id935 . -38) (undo-tree-id936 . -38) (undo-tree-id937 . -38) (undo-tree-id938 . -38) (undo-tree-id939 . -38) (undo-tree-id940 . -38) (undo-tree-id941 . -38) (undo-tree-id942 . -38) (undo-tree-id943 . -38) (undo-tree-id944 . -38) (undo-tree-id945 . -38) (undo-tree-id946 . -38) (undo-tree-id947 . -38) (undo-tree-id948 . -38) (undo-tree-id949 . -38) (undo-tree-id950 . -38) (undo-tree-id951 . -38) (undo-tree-id952 . -62) (undo-tree-id953 . -62) (undo-tree-id954 . -62) (undo-tree-id955 . -62) (undo-tree-id956 . -62) (undo-tree-id957 . -62) (undo-tree-id958 . -62) (undo-tree-id959 . -62) (undo-tree-id960 . -62) (undo-tree-id961 . -62) (undo-tree-id962 . -62) (undo-tree-id963 . -62) (undo-tree-id964 . -62) (undo-tree-id965 . -62) (undo-tree-id966 . -62) (undo-tree-id967 . -91) (undo-tree-id968 . -91) (undo-tree-id969 . -91) (undo-tree-id970 . -91) (undo-tree-id971 . -91) (undo-tree-id972 . -91) (undo-tree-id973 . -91) (undo-tree-id974 . -91) (undo-tree-id975 . -91) (undo-tree-id976 . -91) (undo-tree-id977 . -231) (undo-tree-id978 . -231) (undo-tree-id979 . -231) (undo-tree-id980 . -231) (undo-tree-id981 . -288) (undo-tree-id982 . -288) (undo-tree-id983 . -317) (undo-tree-id984 . -317) (undo-tree-id985 . -347) (undo-tree-id986 . -347) (undo-tree-id987 . -406) (undo-tree-id988 . -406) (undo-tree-id989 . -425) (undo-tree-id990 . -429) (undo-tree-id991 . -429) (undo-tree-id992 . -442) (undo-tree-id993 . -448) (undo-tree-id994 . -448) (undo-tree-id995 . -462) (undo-tree-id996 . -556) (undo-tree-id997 . -556) (undo-tree-id998 . -62) (undo-tree-id999 . -62) (undo-tree-id1000 . -62) (undo-tree-id1001 . -62) (undo-tree-id1002 . -62) (undo-tree-id1003 . -62) (undo-tree-id1004 . -62) (undo-tree-id1005 . -62) (undo-tree-id1006 . -62) (undo-tree-id1007 . -62) (undo-tree-id1008 . -62) (undo-tree-id1009 . -62) (undo-tree-id1010 . -62) (undo-tree-id1011 . -62) (undo-tree-id1012 . -62) (undo-tree-id1013 . -62) (undo-tree-id1014 . -62) (undo-tree-id1015 . -62) (undo-tree-id1016 . -62) (undo-tree-id1017 . -62) (undo-tree-id1018 . -62) (undo-tree-id1019 . -62) (undo-tree-id1020 . -62) (undo-tree-id1021 . -62) (undo-tree-id1022 . -62) (undo-tree-id1023 . -62) (undo-tree-id1024 . -62) (undo-tree-id1025 . -62) (undo-tree-id1026 . -91) (undo-tree-id1027 . -91) (undo-tree-id1028 . -91) (undo-tree-id1029 . -91) (undo-tree-id1030 . -91) (undo-tree-id1031 . -91) (undo-tree-id1032 . -91) (undo-tree-id1033 . -91) (undo-tree-id1034 . -91) (undo-tree-id1035 . -91) (undo-tree-id1036 . -91) (undo-tree-id1037 . -91) (undo-tree-id1038 . -91) (undo-tree-id1039 . -91) (undo-tree-id1040 . -91) (undo-tree-id1041 . -91) (undo-tree-id1042 . -91) (undo-tree-id1043 . -91) (undo-tree-id1044 . -91) (undo-tree-id1045 . -91) (undo-tree-id1046 . -91) (undo-tree-id1047 . -91) (undo-tree-id1048 . -91) (undo-tree-id1049 . -91) (undo-tree-id1050 . -91) (undo-tree-id1051 . -91) (undo-tree-id1052 . -91) (undo-tree-id1053 . -91) (undo-tree-id1054 . -91) (undo-tree-id1055 . -91) (undo-tree-id1056 . -91) (undo-tree-id1057 . -91) (undo-tree-id1058 . -91) (undo-tree-id1059 . -91) (undo-tree-id1060 . -91) (undo-tree-id1061 . -91) (undo-tree-id1062 . -91) (undo-tree-id1063 . -91) (undo-tree-id1064 . -91) (undo-tree-id1065 . -91) (undo-tree-id1066 . -91) (undo-tree-id1067 . -91) (undo-tree-id1068 . -91) (undo-tree-id1069 . -91) (undo-tree-id1070 . -91) (undo-tree-id1071 . -91) (undo-tree-id1072 . -91) (undo-tree-id1073 . -91) (undo-tree-id1074 . -91) (undo-tree-id1075 . -91) (undo-tree-id1076 . -91) (undo-tree-id1077 . -91) (undo-tree-id1078 . -91) (undo-tree-id1079 . -91) (undo-tree-id1080 . -91) (undo-tree-id1081 . -91) (undo-tree-id1082 . -91) (undo-tree-id1083 . -91) (undo-tree-id1084 . -91) (undo-tree-id1085 . -91) (undo-tree-id1086 . -91) (undo-tree-id1087 . -91) (undo-tree-id1088 . -91) (undo-tree-id1089 . -91) (undo-tree-id1090 . -91) (undo-tree-id1091 . -91) (undo-tree-id1092 . -91) (undo-tree-id1093 . -91) (undo-tree-id1094 . -91) (undo-tree-id1095 . -91) (undo-tree-id1096 . -231) (undo-tree-id1097 . -231) (undo-tree-id1098 . -231) (undo-tree-id1099 . -231) (undo-tree-id1100 . -288) (undo-tree-id1101 . -288) (undo-tree-id1102 . -317) (undo-tree-id1103 . -317) (undo-tree-id1104 . -347) (undo-tree-id1105 . -347) (undo-tree-id1106 . -406) (undo-tree-id1107 . -406) (undo-tree-id1108 . -425) (undo-tree-id1109 . -429) (undo-tree-id1110 . -429) (undo-tree-id1111 . -442) (undo-tree-id1112 . -448) (undo-tree-id1113 . -448) (undo-tree-id1114 . -462) (undo-tree-id1115 . -556) (undo-tree-id1116 . -556) (undo-tree-id1117 . -638) (undo-tree-id1118 . -638) (undo-tree-id1119 . -645) (undo-tree-id1120 . -91) (undo-tree-id1121 . -91) (undo-tree-id1122 . -91) (undo-tree-id1123 . -91) (undo-tree-id1124 . -91) (undo-tree-id1125 . -91) (undo-tree-id1126 . -91) (undo-tree-id1127 . -91) (undo-tree-id1128 . -91) (undo-tree-id1129 . -91) (undo-tree-id1130 . -91) (undo-tree-id1131 . -91) (undo-tree-id1132 . -91) (undo-tree-id1133 . -91) (undo-tree-id1134 . -91) (undo-tree-id1135 . -91) (undo-tree-id1136 . -91) (undo-tree-id1137 . -91) (undo-tree-id1138 . -91) (undo-tree-id1139 . -91) (undo-tree-id1140 . -91) (undo-tree-id1141 . -91) (undo-tree-id1142 . -91) (undo-tree-id1143 . -91) (undo-tree-id1144 . -91) (undo-tree-id1145 . -91) (undo-tree-id1146 . -91) (undo-tree-id1147 . -91) (undo-tree-id1148 . -91) (undo-tree-id1149 . -91) (undo-tree-id1150 . -91) (undo-tree-id1151 . -91) (undo-tree-id1152 . -91) (undo-tree-id1153 . -91) (undo-tree-id1154 . -91) (undo-tree-id1155 . -91) (undo-tree-id1156 . -91) (undo-tree-id1157 . -91) (undo-tree-id1158 . -91) (undo-tree-id1159 . -91) (undo-tree-id1160 . -91) (undo-tree-id1161 . -91) (undo-tree-id1162 . -91) (undo-tree-id1163 . -91) (undo-tree-id1164 . -91) (undo-tree-id1165 . -91) (undo-tree-id1166 . -91) (undo-tree-id1167 . -91) (undo-tree-id1168 . -91) (undo-tree-id1169 . -91) (undo-tree-id1170 . -91) (undo-tree-id1171 . -91) (undo-tree-id1172 . -91) (undo-tree-id1173 . -91) (undo-tree-id1174 . -91) (undo-tree-id1175 . -91) (undo-tree-id1176 . -91) (undo-tree-id1177 . -91) (undo-tree-id1178 . -91) (undo-tree-id1179 . -91) (undo-tree-id1180 . -91) (undo-tree-id1181 . -91) (undo-tree-id1182 . -91) (undo-tree-id1183 . -91) (undo-tree-id1184 . -91) (undo-tree-id1185 . -91) (undo-tree-id1186 . -91) (undo-tree-id1187 . -91) (undo-tree-id1188 . -91) (undo-tree-id1189 . -91) (undo-tree-id1190 . -91) (undo-tree-id1191 . -91) (undo-tree-id1192 . -91) (undo-tree-id1193 . -91) (undo-tree-id1194 . -91) (undo-tree-id1195 . -91) (undo-tree-id1196 . -91) (undo-tree-id1197 . -91) (undo-tree-id1198 . -91) (undo-tree-id1199 . -91) (undo-tree-id1200 . -91) (undo-tree-id1201 . -91) (undo-tree-id1202 . -91) (undo-tree-id1203 . -91) (undo-tree-id1204 . -91) (undo-tree-id1205 . -91) (undo-tree-id1206 . -91) (undo-tree-id1207 . -91) (undo-tree-id1208 . -91) (undo-tree-id1209 . -91) (undo-tree-id1210 . -91) (undo-tree-id1211 . -91) (undo-tree-id1212 . -91) (undo-tree-id1213 . -91) (undo-tree-id1214 . -91) (undo-tree-id1215 . -91) (undo-tree-id1216 . -91) (undo-tree-id1217 . -91) (undo-tree-id1218 . -91) (undo-tree-id1219 . -91) (undo-tree-id1220 . -91) (undo-tree-id1221 . -91) (undo-tree-id1222 . -91) (undo-tree-id1223 . -91) (undo-tree-id1224 . -91) (undo-tree-id1225 . -91) (undo-tree-id1226 . -91) (undo-tree-id1227 . -91) (undo-tree-id1228 . -91) (undo-tree-id1229 . -91) (undo-tree-id1230 . -91) (undo-tree-id1231 . -91) (undo-tree-id1232 . -91) (undo-tree-id1233 . -91) (undo-tree-id1234 . -91) (undo-tree-id1235 . -91) (undo-tree-id1236 . -91) (undo-tree-id1237 . -91) (undo-tree-id1238 . -705) (undo-tree-id1239 . -705) (undo-tree-id1240 . -91) (undo-tree-id1241 . -91) (undo-tree-id1242 . -91) (undo-tree-id1243 . -91) (undo-tree-id1244 . -91) (undo-tree-id1245 . -91) (undo-tree-id1246 . -91) (undo-tree-id1247 . -91) (undo-tree-id1248 . -91) (undo-tree-id1249 . -91) (undo-tree-id1250 . -91) (undo-tree-id1251 . -91) (undo-tree-id1252 . -91) (undo-tree-id1253 . -91) (undo-tree-id1254 . -91) (undo-tree-id1255 . -91) (undo-tree-id1256 . -91) (undo-tree-id1257 . -91) (undo-tree-id1258 . -91) (undo-tree-id1259 . -91) (undo-tree-id1260 . -91) (undo-tree-id1261 . -91) (undo-tree-id1262 . -91) (undo-tree-id1263 . -91) (undo-tree-id1264 . -231) (undo-tree-id1265 . -231) (undo-tree-id1266 . -231) (undo-tree-id1267 . -231) (undo-tree-id1268 . -288) (undo-tree-id1269 . -288) (undo-tree-id1270 . -317) (undo-tree-id1271 . -317) (undo-tree-id1272 . -347) (undo-tree-id1273 . -347) (undo-tree-id1274 . -406) (undo-tree-id1275 . -406) (undo-tree-id1276 . -425) (undo-tree-id1277 . -429) (undo-tree-id1278 . -429) (undo-tree-id1279 . -442) (undo-tree-id1280 . -448) (undo-tree-id1281 . -448) (undo-tree-id1282 . -462) (undo-tree-id1283 . -556) (undo-tree-id1284 . -556) (undo-tree-id1285 . -638) (undo-tree-id1286 . -638) (undo-tree-id1287 . -645) (undo-tree-id1288 . -705) (undo-tree-id1289 . -705) (undo-tree-id1290 . -91) (undo-tree-id1291 . -91) (undo-tree-id1292 . -91) (undo-tree-id1293 . -91) (undo-tree-id1294 . -91) (undo-tree-id1295 . -91) (undo-tree-id1296 . -91) (undo-tree-id1297 . -91) (undo-tree-id1298 . -91) (undo-tree-id1299 . -91) (undo-tree-id1300 . -91) (undo-tree-id1301 . -91) (undo-tree-id1302 . -91) (undo-tree-id1303 . -91) (undo-tree-id1304 . -91) (undo-tree-id1305 . -91) (undo-tree-id1306 . -91) (undo-tree-id1307 . -91) (undo-tree-id1308 . -91) (undo-tree-id1309 . -91) (undo-tree-id1310 . -91) (undo-tree-id1311 . -91) (undo-tree-id1312 . -91) (undo-tree-id1313 . -91) (undo-tree-id1314 . -91) (undo-tree-id1315 . -91) (undo-tree-id1316 . -91) (undo-tree-id1317 . -91) (undo-tree-id1318 . -91) (undo-tree-id1319 . -91) (undo-tree-id1320 . -91) (undo-tree-id1321 . -91) (undo-tree-id1322 . -91) (undo-tree-id1323 . -91) (undo-tree-id1324 . -91) (undo-tree-id1325 . -91) (undo-tree-id1326 . -91) (undo-tree-id1327 . -91) (undo-tree-id1328 . -231) (undo-tree-id1329 . -231) (undo-tree-id1330 . -231) (undo-tree-id1331 . -231) (undo-tree-id1332 . -288) (undo-tree-id1333 . -288) (undo-tree-id1334 . -317) (undo-tree-id1335 . -317) (undo-tree-id1336 . -347) (undo-tree-id1337 . -347) (undo-tree-id1338 . -406) (undo-tree-id1339 . -406) (undo-tree-id1340 . -425) (undo-tree-id1341 . -429) (undo-tree-id1342 . -429) (undo-tree-id1343 . -442) (undo-tree-id1344 . -448) (undo-tree-id1345 . -448) (undo-tree-id1346 . -462) (undo-tree-id1347 . -556) (undo-tree-id1348 . -556) (undo-tree-id1349 . -638) (undo-tree-id1350 . -638) (undo-tree-id1351 . -645) (undo-tree-id1352 . -705) (undo-tree-id1353 . -705) (undo-tree-id1354 . -91) (undo-tree-id1355 . -91) (undo-tree-id1356 . -91) (undo-tree-id1357 . -91) (undo-tree-id1358 . -91) (undo-tree-id1359 . -91) (undo-tree-id1360 . -91) (undo-tree-id1361 . -91) (undo-tree-id1362 . -91) (undo-tree-id1363 . -91) (undo-tree-id1364 . -91) (undo-tree-id1365 . -91) (undo-tree-id1366 . -91) (undo-tree-id1367 . -91) (undo-tree-id1368 . -91) (undo-tree-id1369 . -91) (undo-tree-id1370 . -91) (undo-tree-id1371 . -91) (undo-tree-id1372 . -91) (undo-tree-id1373 . -91) (undo-tree-id1374 . -91) (undo-tree-id1375 . -91) (undo-tree-id1376 . -91) (undo-tree-id1377 . -91) (undo-tree-id1378 . -91) (undo-tree-id1379 . -91) (undo-tree-id1380 . -91) (undo-tree-id1381 . -91) (undo-tree-id1382 . -91) (undo-tree-id1383 . -91) (undo-tree-id1384 . -91) (undo-tree-id1385 . -91) (undo-tree-id1386 . -91) (undo-tree-id1387 . -91) (undo-tree-id1388 . -91) (undo-tree-id1389 . -91) (undo-tree-id1390 . -91) (undo-tree-id1391 . -91) (undo-tree-id1392 . -91) (undo-tree-id1393 . -91) (undo-tree-id1394 . -91) (undo-tree-id1395 . -91) (undo-tree-id1396 . -91) (undo-tree-id1397 . -91) (undo-tree-id1398 . -91) (undo-tree-id1399 . -91) (undo-tree-id1400 . -91) (undo-tree-id1401 . -91) (undo-tree-id1402 . -91) (undo-tree-id1403 . -231) (undo-tree-id1404 . -231) (undo-tree-id1405 . -231) (undo-tree-id1406 . -231) (undo-tree-id1407 . -288) (undo-tree-id1408 . -288) (undo-tree-id1409 . -317) (undo-tree-id1410 . -317) (undo-tree-id1411 . -347) (undo-tree-id1412 . -347) (undo-tree-id1413 . -406) (undo-tree-id1414 . -406) (undo-tree-id1415 . -425) (undo-tree-id1416 . -429) (undo-tree-id1417 . -429) (undo-tree-id1418 . -442) (undo-tree-id1419 . -448) (undo-tree-id1420 . -448) (undo-tree-id1421 . -462) (undo-tree-id1422 . -556) (undo-tree-id1423 . -556) (undo-tree-id1424 . -638) (undo-tree-id1425 . -638) (undo-tree-id1426 . -645) (undo-tree-id1427 . -705) (undo-tree-id1428 . -705) (undo-tree-id1429 . -91) (undo-tree-id1430 . -91) (undo-tree-id1431 . -91) (undo-tree-id1432 . -91) (undo-tree-id1433 . -91) (undo-tree-id1434 . -91) (undo-tree-id1435 . -91) (undo-tree-id1436 . -91) (undo-tree-id1437 . -91) (undo-tree-id1438 . -91) (undo-tree-id1439 . -91) (undo-tree-id1440 . -109) (undo-tree-id1441 . -91) (undo-tree-id1442 . -91) (undo-tree-id1443 . -91) (undo-tree-id1444 . -91) (undo-tree-id1445 . -91) (undo-tree-id1446 . -91) (undo-tree-id1447 . -91) (undo-tree-id1448 . -91) (undo-tree-id1449 . -91) (undo-tree-id1450 . -91) (undo-tree-id1451 . -91) (undo-tree-id1452 . -91) (undo-tree-id1453 . -91) (undo-tree-id1454 . -91) (undo-tree-id1455 . -91) (undo-tree-id1456 . -91) (undo-tree-id1457 . -91) (undo-tree-id1458 . -91) (undo-tree-id1459 . -91) (undo-tree-id1460 . -91) (undo-tree-id1461 . -91) (undo-tree-id1462 . -91) (undo-tree-id1463 . -91) (undo-tree-id1464 . -91) (undo-tree-id1465 . -91) (undo-tree-id1466 . -91) (undo-tree-id1467 . -91) (undo-tree-id1468 . -91) (undo-tree-id1469 . -91) (undo-tree-id1470 . -91) (undo-tree-id1471 . -91) (undo-tree-id1472 . -91) (undo-tree-id1473 . -91) (undo-tree-id1474 . -91) (undo-tree-id1475 . -91) (undo-tree-id1476 . -91) (undo-tree-id1477 . -91) (undo-tree-id1478 . -91) (undo-tree-id1479 . -91) (undo-tree-id1480 . -91) (undo-tree-id1481 . -91) (undo-tree-id1482 . -91) (undo-tree-id1483 . -91) (undo-tree-id1484 . -91) (undo-tree-id1485 . -91) (undo-tree-id1486 . -91) (undo-tree-id1487 . -91) (undo-tree-id1488 . -91) (undo-tree-id1489 . -91) (undo-tree-id1490 . -91) (undo-tree-id1491 . -91) (undo-tree-id1492 . -91) (undo-tree-id1493 . -91) (undo-tree-id1494 . -91) (undo-tree-id1495 . -91) (undo-tree-id1496 . -91) (undo-tree-id1497 . -91) (undo-tree-id1498 . -91) (undo-tree-id1499 . -91) (undo-tree-id1500 . -91) (undo-tree-id1501 . -91) (undo-tree-id1502 . -91) (undo-tree-id1503 . -91) (undo-tree-id1504 . -109) (undo-tree-id1505 . -91) (undo-tree-id1506 . -91) (undo-tree-id1507 . -91) (undo-tree-id1508 . -91) (undo-tree-id1509 . -91) (undo-tree-id1510 . -91) (undo-tree-id1511 . -91) (undo-tree-id1512 . -91) (undo-tree-id1513 . -91) (undo-tree-id1514 . -91) (undo-tree-id1515 . -91) (undo-tree-id1516 . -91) (undo-tree-id1517 . -91) (undo-tree-id1518 . -91) (undo-tree-id1519 . -91) (undo-tree-id1520 . -91) (undo-tree-id1521 . -91) (undo-tree-id1522 . -91) (undo-tree-id1523 . -91) (undo-tree-id1524 . -91) (undo-tree-id1525 . -91) (undo-tree-id1526 . -91) (undo-tree-id1527 . -91) (undo-tree-id1528 . -91) (undo-tree-id1529 . -91) (undo-tree-id1530 . -91) (undo-tree-id1531 . -91) (undo-tree-id1532 . -91) (undo-tree-id1533 . -91) (undo-tree-id1534 . -91) (undo-tree-id1535 . -91) (undo-tree-id1536 . -91) (undo-tree-id1537 . -91) (undo-tree-id1538 . -91) (undo-tree-id1539 . -91) (undo-tree-id1540 . -110) (undo-tree-id1541 . -110) (undo-tree-id1542 . -110) (undo-tree-id1543 . -110) (undo-tree-id1544 . -110) (undo-tree-id1545 . -110) (undo-tree-id1546 . -110) (undo-tree-id1547 . -110) (undo-tree-id1548 . -110) (undo-tree-id1549 . -110) (undo-tree-id1550 . -110) (undo-tree-id1551 . -110) (undo-tree-id1552 . -110) (undo-tree-id1553 . -110) (undo-tree-id1554 . -110) (undo-tree-id1555 . -231) (undo-tree-id1556 . -231) (undo-tree-id1557 . -231) (undo-tree-id1558 . -231) (undo-tree-id1559 . -288) (undo-tree-id1560 . -288) (undo-tree-id1561 . -317) (undo-tree-id1562 . -317) (undo-tree-id1563 . -347) (undo-tree-id1564 . -347) (undo-tree-id1565 . -406) (undo-tree-id1566 . -406) (undo-tree-id1567 . -425) (undo-tree-id1568 . -429) (undo-tree-id1569 . -429) (undo-tree-id1570 . -442) (undo-tree-id1571 . -448) (undo-tree-id1572 . -448) (undo-tree-id1573 . -462) (undo-tree-id1574 . -556) (undo-tree-id1575 . -556) (undo-tree-id1576 . -638) (undo-tree-id1577 . -638) (undo-tree-id1578 . -645) (undo-tree-id1579 . -705) (undo-tree-id1580 . -705) (undo-tree-id1581 . -110) (undo-tree-id1582 . -110) (undo-tree-id1583 . -110) (undo-tree-id1584 . -110) (undo-tree-id1585 . -110) (undo-tree-id1586 . -110) (undo-tree-id1587 . -110) (undo-tree-id1588 . -110) (undo-tree-id1589 . -110) (undo-tree-id1590 . -110) (undo-tree-id1591 . -110) (undo-tree-id1592 . -110) (undo-tree-id1593 . -110) (undo-tree-id1594 . -110) (undo-tree-id1595 . -110) (undo-tree-id1596 . -110) (undo-tree-id1597 . -110) (undo-tree-id1598 . -110) (undo-tree-id1599 . -110) (undo-tree-id1600 . -110) (undo-tree-id1601 . -110) (undo-tree-id1602 . -110) (undo-tree-id1603 . -110) (undo-tree-id1604 . -110) (undo-tree-id1605 . -110) (undo-tree-id1606 . -110) (undo-tree-id1607 . -110) (undo-tree-id1608 . -110) (undo-tree-id1609 . -110) (undo-tree-id1610 . -110) (undo-tree-id1611 . -134) (undo-tree-id1612 . -110) (undo-tree-id1613 . -110) (undo-tree-id1614 . -110) (undo-tree-id1615 . -110) (undo-tree-id1616 . -110) (undo-tree-id1617 . -110) (undo-tree-id1618 . -110) (undo-tree-id1619 . -110) (undo-tree-id1620 . -110) (undo-tree-id1621 . -110) (undo-tree-id1622 . -231) (undo-tree-id1623 . -231) (undo-tree-id1624 . -231) (undo-tree-id1625 . -231) (undo-tree-id1626 . -288) (undo-tree-id1627 . -288) (undo-tree-id1628 . -317) (undo-tree-id1629 . -317) (undo-tree-id1630 . -347) (undo-tree-id1631 . -347) (undo-tree-id1632 . -406) (undo-tree-id1633 . -406) (undo-tree-id1634 . -425) (undo-tree-id1635 . -429) (undo-tree-id1636 . -429) (undo-tree-id1637 . -442) (undo-tree-id1638 . -448) (undo-tree-id1639 . -448) (undo-tree-id1640 . -462) (undo-tree-id1641 . -556) (undo-tree-id1642 . -556) (undo-tree-id1643 . -638) (undo-tree-id1644 . -638) (undo-tree-id1645 . -645) (undo-tree-id1646 . -705) (undo-tree-id1647 . -705) (undo-tree-id1648 . -110) (undo-tree-id1649 . -110) (undo-tree-id1650 . -110) (undo-tree-id1651 . -110) (undo-tree-id1652 . -110) (undo-tree-id1653 . -110) (undo-tree-id1654 . -110) (undo-tree-id1655 . -110) (undo-tree-id1656 . -110) (undo-tree-id1657 . -110) (undo-tree-id1658 . -110) (undo-tree-id1659 . -110) (undo-tree-id1660 . -110) (undo-tree-id1661 . -110) (undo-tree-id1662 . -110) (undo-tree-id1663 . -110) (undo-tree-id1664 . -110) (undo-tree-id1665 . -110) (undo-tree-id1666 . -110) (undo-tree-id1667 . -110) (undo-tree-id1668 . -110) (undo-tree-id1669 . -110) (undo-tree-id1670 . -110) (undo-tree-id1671 . -110) (undo-tree-id1672 . -110) (undo-tree-id1673 . -110) (undo-tree-id1674 . -110) (undo-tree-id1675 . -110) (undo-tree-id1676 . -110) (undo-tree-id1677 . -110) (undo-tree-id1678 . -110) (undo-tree-id1679 . -110) (undo-tree-id1680 . -110) (undo-tree-id1681 . -110) (undo-tree-id1682 . -110) (undo-tree-id1683 . -135) (undo-tree-id1684 . -135) (undo-tree-id1685 . -135) (undo-tree-id1686 . -135) (undo-tree-id1687 . -135) (undo-tree-id1688 . -135) (undo-tree-id1689 . -135) (undo-tree-id1690 . -135) (undo-tree-id1691 . -135) (undo-tree-id1692 . -136) (undo-tree-id1693 . -136) (undo-tree-id1694 . -136) (undo-tree-id1695 . -136) (undo-tree-id1696 . -136) (undo-tree-id1697 . -136) (undo-tree-id1698 . -136) (undo-tree-id1699 . -136) (undo-tree-id1700 . -136) (undo-tree-id1701 . -136) (undo-tree-id1702 . -136) (undo-tree-id1703 . -136) (undo-tree-id1704 . -136) (undo-tree-id1705 . -136) (undo-tree-id1706 . -136) (undo-tree-id1707 . -136) (undo-tree-id1708 . -136) (undo-tree-id1709 . -136) (undo-tree-id1710 . -136) (undo-tree-id1711 . -136) (undo-tree-id1712 . -136) (undo-tree-id1713 . -136) (undo-tree-id1714 . -136) (undo-tree-id1715 . -136) (undo-tree-id1716 . -136) (undo-tree-id1717 . -136) (undo-tree-id1718 . -136) (undo-tree-id1719 . -188) (undo-tree-id1720 . -188) (undo-tree-id1721 . -188) (undo-tree-id1722 . -188) (undo-tree-id1723 . -188) (undo-tree-id1724 . -188) (undo-tree-id1725 . -188) (undo-tree-id1726 . -188) (undo-tree-id1727 . -207) (undo-tree-id1728 . -207) (undo-tree-id1729 . -207) (undo-tree-id1730 . -207) (undo-tree-id1731 . -207) (undo-tree-id1732 . -207) (undo-tree-id1733 . -207) (undo-tree-id1734 . -207) (undo-tree-id1735 . -230) (undo-tree-id1736 . -230) (undo-tree-id1737 . -230) (undo-tree-id1738 . -230) (undo-tree-id1739 . -230) (undo-tree-id1740 . -230) (undo-tree-id1741 . -230) (undo-tree-id1742 . -230) (undo-tree-id1743 . -231) (undo-tree-id1744 . -231) (undo-tree-id1745 . -231) (undo-tree-id1746 . -231) (undo-tree-id1747 . -231) (undo-tree-id1748 . -231) (undo-tree-id1749 . -231) (undo-tree-id1750 . -231) (undo-tree-id1751 . -231) (undo-tree-id1752 . -231) (undo-tree-id1753 . -231) (undo-tree-id1754 . -231) (undo-tree-id1755 . -231) (undo-tree-id1756 . -231) (undo-tree-id1757 . -231) (undo-tree-id1758 . -231) (undo-tree-id1759 . -231) (undo-tree-id1760 . -231) (undo-tree-id1761 . -231) (undo-tree-id1762 . -231) (undo-tree-id1763 . -231) (undo-tree-id1764 . -231) (undo-tree-id1765 . -231) (undo-tree-id1766 . -231) (undo-tree-id1767 . -231) (undo-tree-id1768 . -231) (undo-tree-id1769 . -231) (undo-tree-id1770 . -231) (undo-tree-id1771 . -231) (undo-tree-id1772 . -231) (undo-tree-id1773 . -231) (undo-tree-id1774 . -231) (undo-tree-id1775 . -231) (undo-tree-id1776 . -231) (undo-tree-id1777 . -231) (undo-tree-id1778 . -231) (undo-tree-id1779 . -231) (undo-tree-id1780 . -231) (undo-tree-id1781 . -231) (undo-tree-id1782 . -231) (undo-tree-id1783 . -231) (undo-tree-id1784 . -231) (undo-tree-id1785 . -231) (undo-tree-id1786 . -231) (undo-tree-id1787 . -231) (undo-tree-id1788 . -231) (undo-tree-id1789 . -231) (undo-tree-id1790 . -231) (undo-tree-id1791 . -231) (undo-tree-id1792 . -231) (undo-tree-id1793 . -231) (undo-tree-id1794 . -231) (undo-tree-id1795 . -288) (undo-tree-id1796 . -288) (undo-tree-id1797 . -317) (undo-tree-id1798 . -317) (undo-tree-id1799 . -347) (undo-tree-id1800 . -347) (undo-tree-id1801 . -406) (undo-tree-id1802 . -406) (undo-tree-id1803 . -425) (undo-tree-id1804 . -429) (undo-tree-id1805 . -429) (undo-tree-id1806 . -442) (undo-tree-id1807 . -448) (undo-tree-id1808 . -448) (undo-tree-id1809 . -462) (undo-tree-id1810 . -556) (undo-tree-id1811 . -556) (undo-tree-id1812 . -638) (undo-tree-id1813 . -638) (undo-tree-id1814 . -645) (undo-tree-id1815 . -705) (undo-tree-id1816 . -705) (undo-tree-id1817 . -231) (undo-tree-id1818 . -231) (undo-tree-id1819 . -231) (undo-tree-id1820 . -231) (undo-tree-id1821 . -231) (undo-tree-id1822 . -231) (undo-tree-id1823 . -231) (undo-tree-id1824 . -231) (undo-tree-id1825 . -231) (undo-tree-id1826 . -231) (undo-tree-id1827 . -231) (undo-tree-id1828 . -231) (undo-tree-id1829 . -231) (undo-tree-id1830 . -231) (undo-tree-id1831 . -231) (undo-tree-id1832 . -231) (undo-tree-id1833 . -231) (undo-tree-id1834 . -231) (undo-tree-id1835 . -231) (undo-tree-id1836 . -231) (undo-tree-id1837 . -231) (undo-tree-id1838 . -231) (undo-tree-id1839 . -231) (undo-tree-id1840 . -231) (undo-tree-id1841 . -231) (undo-tree-id1842 . -231) (undo-tree-id1843 . -231) (undo-tree-id1844 . -231) (undo-tree-id1845 . -231) (undo-tree-id1846 . -231) (undo-tree-id1847 . -231) (undo-tree-id1848 . -231) (undo-tree-id1849 . -231) (undo-tree-id1850 . -231) (undo-tree-id1851 . -231) (undo-tree-id1852 . -231) (undo-tree-id1853 . -231) (undo-tree-id1854 . -231) (undo-tree-id1855 . -231) (undo-tree-id1856 . -231) (undo-tree-id1857 . -231) (undo-tree-id1858 . -231) (undo-tree-id1859 . -231) (undo-tree-id1860 . -231) (undo-tree-id1861 . -231) (undo-tree-id1862 . -255) (undo-tree-id1863 . -231) (undo-tree-id1864 . -231) (undo-tree-id1865 . -231) (undo-tree-id1866 . -231) (undo-tree-id1867 . -231) (undo-tree-id1868 . -231) (undo-tree-id1869 . -231) (undo-tree-id1870 . -231) (undo-tree-id1871 . -231) (undo-tree-id1872 . -231) (undo-tree-id1873 . -231) (undo-tree-id1874 . -231) (undo-tree-id1875 . -231) (undo-tree-id1876 . -231) (undo-tree-id1877 . -231) (undo-tree-id1878 . -231) (undo-tree-id1879 . -231) (undo-tree-id1880 . -231) (undo-tree-id1881 . -231) (undo-tree-id1882 . -231) (undo-tree-id1883 . -231) (undo-tree-id1884 . -231) (undo-tree-id1885 . -231) (undo-tree-id1886 . -231) (undo-tree-id1887 . -231) (undo-tree-id1888 . -231) (undo-tree-id1889 . -231) (undo-tree-id1890 . -231) (undo-tree-id1891 . -231) (undo-tree-id1892 . -231) (undo-tree-id1893 . -231) (undo-tree-id1894 . -231) (undo-tree-id1895 . -231) (undo-tree-id1896 . -231) (undo-tree-id1897 . -231) (undo-tree-id1898 . -230) (undo-tree-id1899 . -230) (undo-tree-id1900 . -230) (undo-tree-id1901 . -230) (undo-tree-id1902 . -230) (undo-tree-id1903 . -230) (undo-tree-id1904 . -230) (undo-tree-id1905 . -230) (undo-tree-id1906 . -230) (undo-tree-id1907 . -288) (undo-tree-id1908 . -288) (undo-tree-id1909 . -317) (undo-tree-id1910 . -317) (undo-tree-id1911 . -347) (undo-tree-id1912 . -347) (undo-tree-id1913 . -406) (undo-tree-id1914 . -406) (undo-tree-id1915 . -425) (undo-tree-id1916 . -429) (undo-tree-id1917 . -429) (undo-tree-id1918 . -442) (undo-tree-id1919 . -448) (undo-tree-id1920 . -448) (undo-tree-id1921 . -462) (undo-tree-id1922 . -556) (undo-tree-id1923 . -556) (undo-tree-id1924 . -638) (undo-tree-id1925 . -638) (undo-tree-id1926 . -645) (undo-tree-id1927 . -705) (undo-tree-id1928 . -705) (undo-tree-id1929 . -230) (undo-tree-id1930 . -230) (undo-tree-id1931 . -230) (undo-tree-id1932 . -230) (undo-tree-id1933 . -230) (undo-tree-id1934 . -230) (undo-tree-id1935 . -230) (undo-tree-id1936 . -230) (undo-tree-id1937 . -230) (undo-tree-id1938 . -230) (undo-tree-id1939 . -230) (undo-tree-id1940 . -230) (undo-tree-id1941 . -230) (undo-tree-id1942 . -230) (undo-tree-id1943 . -230) (undo-tree-id1944 . -230) (undo-tree-id1945 . -230) (undo-tree-id1946 . -230) (undo-tree-id1947 . -230) (undo-tree-id1948 . -230) (undo-tree-id1949 . -230) (undo-tree-id1950 . -230) (undo-tree-id1951 . -230) (undo-tree-id1952 . -230) (undo-tree-id1953 . -230) (undo-tree-id1954 . -230) (undo-tree-id1955 . -230) (undo-tree-id1956 . -230) (undo-tree-id1957 . -230) (undo-tree-id1958 . -230) (undo-tree-id1959 . -230) (undo-tree-id1960 . -230) (undo-tree-id1961 . -230) (undo-tree-id1962 . -230)) nil (25760 29817 770064 781000) 0 nil])
([nil nil ((#("# Where to save the figures
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 28 (face font-lock-comment-face fontified t)) . 380) (undo-tree-id2758 . -27) (undo-tree-id2759 . -28) (t 25760 29817 812781 706000)) nil (25760 29832 837842 59000) 0 nil])
([nil nil ((#("PROJECT_ROOT_DIR = \".\"
" 0 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 22 (face font-lock-string-face fontified t) 22 23 (fontified t)) . 380) (undo-tree-id2754 . -22) (undo-tree-id2755 . -19) (undo-tree-id2756 . -22) (undo-tree-id2757 . -23)) nil (25760 29832 837838 122000) 0 nil])
([nil nil ((#("CHAPTER_ID = \"rnn\"
" 0 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 18 (face font-lock-string-face fontified t) 18 19 (fontified t)) . 380) (undo-tree-id2750 . -18) (undo-tree-id2751 . -13) (undo-tree-id2752 . -18) (undo-tree-id2753 . -19)) nil (25760 29832 837424 595000) 0 nil])
([nil nil ((#("IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)
" 0 11 (face font-lock-variable-name-face fontified t) 11 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 45 (fontified t) 45 51 (face font-lock-string-face fontified t) 51 53 (face font-lock-string-face fontified t) 53 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-1-face) fontified t) 66 67 (fontified t)) . 380) (undo-tree-id2743 . -66) (undo-tree-id2744 . -14) (undo-tree-id2745 . -16) (undo-tree-id2746 . -67) (undo-tree-id2747 . -14) (undo-tree-id2748 . -66) (undo-tree-id2749 . -67)) nil (25760 29832 837419 596000) 0 nil])
([nil nil ((#("os.makedirs(IMAGES_PATH, exist_ok=True)
" 0 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 34 (fontified t) 34 38 (face font-lock-constant-face fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 40 (fontified t)) . 380) (undo-tree-id2739 . -39) (undo-tree-id2740 . -2) (undo-tree-id2741 . -39) (undo-tree-id2742 . -40)) nil (25760 29832 837414 404000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2738 . -1)) nil (25760 29832 837411 332000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2737 . -1)) nil (25760 29832 837409 968000) 0 nil])
([nil nil ((#("def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-function-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 34 (fontified t) 34 38 (face font-lock-constant-face fontified t) 38 54 (fontified t) 54 59 (face font-lock-string-face fontified t) 59 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-1-face) fontified t) 76 77 (fontified t) 77 78 (fontified t)) . 380) (undo-tree-id2734 . -77) (undo-tree-id2735 . -77) (undo-tree-id2736 . -78)) nil (25760 29832 837408 296000) 0 nil])
([nil nil ((#("    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)
" 0 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 46 (fontified t) 46 49 (face font-lock-string-face fontified t) 49 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-1-face) fontified t) 66 67 (fontified t)) . 380) (undo-tree-id2726 . -66) (undo-tree-id2727 . -11) (undo-tree-id2728 . -13) (undo-tree-id2729 . -4) (undo-tree-id2730 . -4) (undo-tree-id2731 . -11) (undo-tree-id2732 . -66) (undo-tree-id2733 . -67)) nil (25760 29832 837405 209000) 0 nil])
([nil nil ((#("    print(\"Saving figure\", fig_id)
" 0 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 25 (face font-lock-string-face fontified t) 25 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t)) . 380) (undo-tree-id2721 . -34) (undo-tree-id2722 . -4) (undo-tree-id2723 . -4) (undo-tree-id2724 . -34) (undo-tree-id2725 . -35)) nil (25760 29832 837399 552000) 0 nil])
([nil nil ((#("    if tight_layout:
" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 20 (fontified t) 20 21 (fontified t)) . 380) (undo-tree-id2718 . -20) (undo-tree-id2719 . -20) (undo-tree-id2720 . -21)) nil (25760 29832 837396 1000) 0 nil])
([nil nil ((#("        plt.tight_layout()
" 0 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t)) . 380) (undo-tree-id2715 . -26) (undo-tree-id2716 . -26) (undo-tree-id2717 . -27)) nil (25760 29832 837393 295000) 0 nil])
([nil nil ((#("    plt.savefig(path, format=fig_extension, dpi=resolution)
" 0 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 22 (fontified t) 22 28 (face font-lock-builtin-face fontified t) 28 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 60 (fontified t)) . 380) (undo-tree-id2712 . -59) (undo-tree-id2713 . -59) (undo-tree-id2714 . -60)) nil (25760 29832 837390 817000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2711 . -1)) nil (25760 29832 837388 185000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2710 . -1)) nil (25760 29832 837386 574000) 0 nil])
([nil nil ((#("# # Basic RNNs
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 15 (face font-lock-comment-face fontified t)) . 380) (undo-tree-id2707 . -14) (undo-tree-id2708 . -14) (undo-tree-id2709 . -15)) nil (25760 29832 837385 9000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2706 . -1)) nil (25760 29832 837382 48000) 0 nil])
([nil nil ((#("# ## Generate the Dataset
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 25 (face font-lock-comment-face fontified t) 25 26 (face font-lock-comment-face fontified t)) . 380) (undo-tree-id2703 . -25) (undo-tree-id2704 . -25) (undo-tree-id2705 . -26)) nil (25760 29832 837380 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2702 . -1)) nil (25760 29832 837377 641000) 0 nil])
([nil nil ((#("# In[2]:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t)) . 380) (undo-tree-id2699 . -8) (undo-tree-id2700 . -8) (undo-tree-id2701 . -9)) nil (25760 29832 837375 56000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 380) (undo-tree-id2698 . -1)) nil (25760 29832 837368 271000) 0 nil])
([nil nil ((#("def generate_time_series(batch_size, n_steps):
    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
    time = np.linspace(0, 1, n_steps)
    series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10))  #   wave 1
    series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20))  # + wave 2
    series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5)  # + noise
    return series[..., np.newaxis].astype(np.float32)


# In[3]:
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 24 (face font-lock-function-name-face fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 51 (fontified t) 51 56 (face font-lock-variable-name-face fontified t) 56 58 (fontified t) 58 63 (face font-lock-variable-name-face fontified t) 63 65 (fontified t) 65 73 (face font-lock-variable-name-face fontified t) 73 75 (fontified t) 75 83 (face font-lock-variable-name-face fontified t) 83 100 (fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 114 (fontified t) 114 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-1-face) fontified t) 118 119 (fontified t) 119 123 (fontified t) 123 127 (face font-lock-variable-name-face fontified t) 127 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-1-face) fontified t) 142 153 (fontified t) 153 155 (fontified t) 155 156 (face (rainbow-delimiters-depth-1-face) fontified t) 156 157 (fontified t) 157 161 (fontified t) 161 167 (face font-lock-variable-name-face fontified t) 167 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-1-face) fontified t) 183 184 (face (rainbow-delimiters-depth-2-face) fontified t) 184 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-2-face) fontified t) 200 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-2-face) fontified t) 204 219 (fontified t) 219 220 (face (rainbow-delimiters-depth-2-face) fontified t) 220 221 (face (rainbow-delimiters-depth-1-face) fontified t) 221 223 (fontified t) 223 227 (face font-lock-comment-delimiter-face fontified t) 227 233 (face font-lock-comment-face fontified t) 233 234 (face font-lock-comment-face fontified t) 234 238 (fontified t) 238 244 (face font-lock-variable-name-face fontified t) 244 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-1-face) fontified t) 261 262 (face (rainbow-delimiters-depth-2-face) fontified t) 262 277 (fontified t) 277 278 (face (rainbow-delimiters-depth-2-face) fontified t) 278 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 297 (fontified t) 297 298 (face (rainbow-delimiters-depth-2-face) fontified t) 298 299 (face (rainbow-delimiters-depth-1-face) fontified t) 299 300 (fontified t) 300 301 (fontified t) 301 303 (face font-lock-comment-delimiter-face fontified t) 303 312 (face font-lock-comment-face fontified t) 312 316 (fontified t) 316 322 (face font-lock-variable-name-face fontified t) 322 332 (fontified t) 332 333 (face (rainbow-delimiters-depth-1-face) fontified t) 333 335 (fontified t) 335 347 (fontified t) 347 348 (face (rainbow-delimiters-depth-2-face) fontified t) 348 367 (fontified t) 367 368 (face (rainbow-delimiters-depth-2-face) fontified t) 368 374 (fontified t) 374 375 (face (rainbow-delimiters-depth-1-face) fontified t) 375 377 (fontified t) 377 379 (face font-lock-comment-delimiter-face fontified t) 379 387 (face font-lock-comment-face fontified t) 387 391 (fontified t) 391 397 (face font-lock-keyword-face fontified t) 397 404 (fontified t) 404 405 (face (rainbow-delimiters-depth-1-face) fontified t) 405 420 (fontified t) 420 421 (face (rainbow-delimiters-depth-1-face) fontified t) 421 428 (fontified t) 428 429 (face (rainbow-delimiters-depth-1-face) fontified t) 429 439 (fontified t) 439 440 (face (rainbow-delimiters-depth-1-face) fontified t) 440 443 (fontified t) 443 444 (face font-lock-comment-delimiter-face fontified t) 444 445 (face font-lock-comment-delimiter-face fontified t) 445 452 (face font-lock-comment-face fontified t)) . 381) (undo-tree-id3600 . -451) (undo-tree-id3601 . -223) (undo-tree-id3602 . -224) (undo-tree-id3603 . -4) (undo-tree-id3604 . -12) (undo-tree-id3605 . -13) (undo-tree-id3606 . -17) (undo-tree-id3607 . -18) (undo-tree-id3608 . -24) (undo-tree-id3609 . -24) (undo-tree-id3610 . -24) (undo-tree-id3611 . -24) (undo-tree-id3612 . -24) (undo-tree-id3613 . -24) (undo-tree-id3614 . -24) (undo-tree-id3615 . -24) (undo-tree-id3616 . -24) (undo-tree-id3617 . -24) (undo-tree-id3618 . -24) (undo-tree-id3619 . -24) (undo-tree-id3620 . -24) (undo-tree-id3621 . -24) (undo-tree-id3622 . -24) (undo-tree-id3623 . -24) (undo-tree-id3624 . -24) (undo-tree-id3625 . -24) (undo-tree-id3626 . -24) (undo-tree-id3627 . -24) (undo-tree-id3628 . -24) (undo-tree-id3629 . -24) (undo-tree-id3630 . -24) (undo-tree-id3631 . -24) (undo-tree-id3632 . -24) (undo-tree-id3633 . -24) (undo-tree-id3634 . -24) (undo-tree-id3635 . -24) (undo-tree-id3636 . -24) (undo-tree-id3637 . -24) (undo-tree-id3638 . -24) (undo-tree-id3639 . -24) (undo-tree-id3640 . -24) (undo-tree-id3641 . -24) (undo-tree-id3642 . -24) (undo-tree-id3643 . -24) (undo-tree-id3644 . -24) (undo-tree-id3645 . -24) (undo-tree-id3646 . -24) (undo-tree-id3647 . -24) (undo-tree-id3648 . -24) (undo-tree-id3649 . -24) (undo-tree-id3650 . -24) (undo-tree-id3651 . -24) (undo-tree-id3652 . -24) (undo-tree-id3653 . -24) (undo-tree-id3654 . -24) (undo-tree-id3655 . -24) (undo-tree-id3656 . -24) (undo-tree-id3657 . -24) (undo-tree-id3658 . -24) (undo-tree-id3659 . -24) (undo-tree-id3660 . -24) (undo-tree-id3661 . -24) (undo-tree-id3662 . -24) (undo-tree-id3663 . -24) (undo-tree-id3664 . -24) (undo-tree-id3665 . -24) (undo-tree-id3666 . -24) (undo-tree-id3667 . -24) (undo-tree-id3668 . -24) (undo-tree-id3669 . -24) (undo-tree-id3670 . -24) (undo-tree-id3671 . -443) (undo-tree-id3672 . -24) (undo-tree-id3673 . -24) (undo-tree-id3674 . -24) (undo-tree-id3675 . -24) (undo-tree-id3676 . -24) (undo-tree-id3677 . -24) (undo-tree-id3678 . -24) (undo-tree-id3679 . -24) (undo-tree-id3680 . -24) (undo-tree-id3681 . -24) (undo-tree-id3682 . -24) (undo-tree-id3683 . -24) (undo-tree-id3684 . -24) (undo-tree-id3685 . -24) (undo-tree-id3686 . -24) (undo-tree-id3687 . -24) (undo-tree-id3688 . -24) (undo-tree-id3689 . -24) (undo-tree-id3690 . -24) (undo-tree-id3691 . -24) (undo-tree-id3692 . -24) (undo-tree-id3693 . -24) (undo-tree-id3694 . -24) (undo-tree-id3695 . -24) (undo-tree-id3696 . -24) (undo-tree-id3697 . -443) (undo-tree-id3698 . -443) (undo-tree-id3699 . -452) (undo-tree-id3700 . -443) (undo-tree-id3701 . -47) (undo-tree-id3702 . -47) (undo-tree-id3703 . -47) (undo-tree-id3704 . -47) (undo-tree-id3705 . -47) (undo-tree-id3706 . -47) (undo-tree-id3707 . -47) (undo-tree-id3708 . -47) (undo-tree-id3709 . -47) (undo-tree-id3710 . -47) (undo-tree-id3711 . -47) (undo-tree-id3712 . -47) (undo-tree-id3713 . -47) (undo-tree-id3714 . -47) (undo-tree-id3715 . -47) (undo-tree-id3716 . -47) (undo-tree-id3717 . -47) (undo-tree-id3718 . -47) (undo-tree-id3719 . -47) (undo-tree-id3720 . -47) (undo-tree-id3721 . -47) (undo-tree-id3722 . -47) (undo-tree-id3723 . -47) (undo-tree-id3724 . -47) (undo-tree-id3725 . -47) (undo-tree-id3726 . -47) (undo-tree-id3727 . -47) (undo-tree-id3728 . -47) (undo-tree-id3729 . -47) (undo-tree-id3730 . -47) (undo-tree-id3731 . -47) (undo-tree-id3732 . -47) (undo-tree-id3733 . -47) (undo-tree-id3734 . -47) (undo-tree-id3735 . -47) (undo-tree-id3736 . -47) (undo-tree-id3737 . -47) (undo-tree-id3738 . -47) (undo-tree-id3739 . -47) (undo-tree-id3740 . -47) (undo-tree-id3741 . -47) (undo-tree-id3742 . -47) (undo-tree-id3743 . -47) (undo-tree-id3744 . -47) (undo-tree-id3745 . -47) (undo-tree-id3746 . -47) (undo-tree-id3747 . -47) (undo-tree-id3748 . -47) (undo-tree-id3749 . -47) (undo-tree-id3750 . -47) (undo-tree-id3751 . -47) (undo-tree-id3752 . -47) (undo-tree-id3753 . -47) (undo-tree-id3754 . -47) (undo-tree-id3755 . -115) (undo-tree-id3756 . -115) (undo-tree-id3757 . -115) (undo-tree-id3758 . -115) (undo-tree-id3759 . -115) (undo-tree-id3760 . -115) (undo-tree-id3761 . -115) (undo-tree-id3762 . -115) (undo-tree-id3763 . -115) (undo-tree-id3764 . -115) (undo-tree-id3765 . -115) (undo-tree-id3766 . -115) (undo-tree-id3767 . -115) (undo-tree-id3768 . -115) (undo-tree-id3769 . -115) (undo-tree-id3770 . -119) (undo-tree-id3771 . -119) (undo-tree-id3772 . -119) (undo-tree-id3773 . -119) (undo-tree-id3774 . -119) (undo-tree-id3775 . -119) (undo-tree-id3776 . -119) (undo-tree-id3777 . -119) (undo-tree-id3778 . -157) (undo-tree-id3779 . -157) (undo-tree-id3780 . -157) (undo-tree-id3781 . -157) (undo-tree-id3782 . -157) (undo-tree-id3783 . -157) (undo-tree-id3784 . -157) (undo-tree-id3785 . -157) (undo-tree-id3786 . -157) (undo-tree-id3787 . -157) (undo-tree-id3788 . -157) (undo-tree-id3789 . -157) (undo-tree-id3790 . -157) (undo-tree-id3791 . -157) (undo-tree-id3792 . -157) (undo-tree-id3793 . -225) (undo-tree-id3794 . -225) (undo-tree-id3795 . -225) (undo-tree-id3796 . -225) (undo-tree-id3797 . -225) (undo-tree-id3798 . -225) (undo-tree-id3799 . -225) (undo-tree-id3800 . -225) (undo-tree-id3801 . -225) (undo-tree-id3802 . -225) (undo-tree-id3803 . -225) (undo-tree-id3804 . -225) (undo-tree-id3805 . -225) (undo-tree-id3806 . -225) (undo-tree-id3807 . -225) (undo-tree-id3808 . -234) (undo-tree-id3809 . -234) (undo-tree-id3810 . -234) (undo-tree-id3811 . -234) (undo-tree-id3812 . -234) (undo-tree-id3813 . -234) (undo-tree-id3814 . -234) (undo-tree-id3815 . -234) (undo-tree-id3816 . -234) (undo-tree-id3817 . -234) (undo-tree-id3818 . -234) (undo-tree-id3819 . -234) (undo-tree-id3820 . -234) (undo-tree-id3821 . -234) (undo-tree-id3822 . -234) (undo-tree-id3823 . -234) (undo-tree-id3824 . -234) (undo-tree-id3825 . -234) (undo-tree-id3826 . -234) (undo-tree-id3827 . -234) (undo-tree-id3828 . -234) (undo-tree-id3829 . -234) (undo-tree-id3830 . -234) (undo-tree-id3831 . -234) (undo-tree-id3832 . -234) (undo-tree-id3833 . -234) (undo-tree-id3834 . -234) (undo-tree-id3835 . -234) (undo-tree-id3836 . -234) (undo-tree-id3837 . -302) (undo-tree-id3838 . -302) (undo-tree-id3839 . -302) (undo-tree-id3840 . -302) (undo-tree-id3841 . -302) (undo-tree-id3842 . -302) (undo-tree-id3843 . -302) (undo-tree-id3844 . -302) (undo-tree-id3845 . -302) (undo-tree-id3846 . -302) (undo-tree-id3847 . -302) (undo-tree-id3848 . -302) (undo-tree-id3849 . -302) (undo-tree-id3850 . -302) (undo-tree-id3851 . -302) (undo-tree-id3852 . -302) (undo-tree-id3853 . -302) (undo-tree-id3854 . -302) (undo-tree-id3855 . -302) (undo-tree-id3856 . -302) (undo-tree-id3857 . -302) (undo-tree-id3858 . -302) (undo-tree-id3859 . -302) (undo-tree-id3860 . -302) (undo-tree-id3861 . -302) (undo-tree-id3862 . -302) (undo-tree-id3863 . -302) (undo-tree-id3864 . -302) (undo-tree-id3865 . -302) (undo-tree-id3866 . -312) (undo-tree-id3867 . -312) (undo-tree-id3868 . -312) (undo-tree-id3869 . -312) (undo-tree-id3870 . -312) (undo-tree-id3871 . -312) (undo-tree-id3872 . -312) (undo-tree-id3873 . -312) (undo-tree-id3874 . -312) (undo-tree-id3875 . -312) (undo-tree-id3876 . -312) (undo-tree-id3877 . -312) (undo-tree-id3878 . -312) (undo-tree-id3879 . -312) (undo-tree-id3880 . -312) (undo-tree-id3881 . -312) (undo-tree-id3882 . -312) (undo-tree-id3883 . -312) (undo-tree-id3884 . -312) (undo-tree-id3885 . -312) (undo-tree-id3886 . -312) (undo-tree-id3887 . -312) (undo-tree-id3888 . -312) (undo-tree-id3889 . -312) (undo-tree-id3890 . -312) (undo-tree-id3891 . -312) (undo-tree-id3892 . -312) (undo-tree-id3893 . -312) (undo-tree-id3894 . -312) (undo-tree-id3895 . -380) (undo-tree-id3896 . -380) (undo-tree-id3897 . -380) (undo-tree-id3898 . -380) (undo-tree-id3899 . -380) (undo-tree-id3900 . -380) (undo-tree-id3901 . -380) (undo-tree-id3902 . -380) (undo-tree-id3903 . -380) (undo-tree-id3904 . -380) (undo-tree-id3905 . -380) (undo-tree-id3906 . -380) (undo-tree-id3907 . -380) (undo-tree-id3908 . -380) (undo-tree-id3909 . -380) (undo-tree-id3910 . -380) (undo-tree-id3911 . -380) (undo-tree-id3912 . -380) (undo-tree-id3913 . -380) (undo-tree-id3914 . -380) (undo-tree-id3915 . -380) (undo-tree-id3916 . -380) (undo-tree-id3917 . -380) (undo-tree-id3918 . -380) (undo-tree-id3919 . -380) (undo-tree-id3920 . -380) (undo-tree-id3921 . -380) (undo-tree-id3922 . -380) (undo-tree-id3923 . -380) (undo-tree-id3924 . -387) (undo-tree-id3925 . -387) (undo-tree-id3926 . -387) (undo-tree-id3927 . -387) (undo-tree-id3928 . -387) (undo-tree-id3929 . -387) (undo-tree-id3930 . -387) (undo-tree-id3931 . -387) (undo-tree-id3932 . -441) (undo-tree-id3933 . -441) (undo-tree-id3934 . -441) (undo-tree-id3935 . -441) (undo-tree-id3936 . -441) (undo-tree-id3937 . -441) (undo-tree-id3938 . -441) (undo-tree-id3939 . -441) (undo-tree-id3940 . -442) (undo-tree-id3941 . -442) (undo-tree-id3942 . -442) (undo-tree-id3943 . -442) (undo-tree-id3944 . -442) (undo-tree-id3945 . -442) (undo-tree-id3946 . -442) (undo-tree-id3947 . -442) (undo-tree-id3948 . -443) (undo-tree-id3949 . -443) (undo-tree-id3950 . -443) (undo-tree-id3951 . -443) (undo-tree-id3952 . -443) (undo-tree-id3953 . -443) (undo-tree-id3954 . -443) (undo-tree-id3955 . -443) (undo-tree-id3956 . -443) (undo-tree-id3957 . -443) (undo-tree-id3958 . -452) 824 (t 25760 29832 845555 840000)) nil (25760 29848 71923 886000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 381) (undo-tree-id3598 . 1) (undo-tree-id3599 . -1)) nil (25760 29848 71693 369000) 0 nil])
([nil nil ((1 . 41679) (#("#!/usr/bin/env python

import sklearn
import tensorflow as tf
from tensorflow import keras
import numpy as np
from pathlib import Path

# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rc(\"axes\", labelsize=14)
mpl.rc(\"xtick\", labelsize=12)
mpl.rc(\"ytick\", labelsize=12)



np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]


# In[4]:


X_train.shape, y_train.shape


# In[5]:


def plot_series(
    series, y=None, y_pred=None, x_label=\"$t$\", y_label=\"$x(t)$\", legend=True
):
    plt.plot(series, \".-\")
    if y is not None:
        plt.plot(n_steps, y, \"bo\", label=\"Target\")
    if y_pred is not None:
        plt.plot(n_steps, y_pred, \"rx\", markersize=10, label=\"Prediction\")
    plt.grid(True)
    if x_label:
        plt.xlabel(x_label, fontsize=16)
    if y_label:
        plt.ylabel(y_label, fontsize=16, rotation=0)
    plt.hlines(0, 0, 100, linewidth=1)
    plt.axis([0, n_steps + 1, -1, 1])
    if legend and (y or y_pred):
        plt.legend(fontsize=14, loc=\"upper left\")


fig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))
for col in range(3):
    plt.sca(axes[col])
    plot_series(
        X_valid[col, :, 0],
        y_valid[col, 0],
        y_label=(\"$x(t)$\" if col == 0 else None),
        legend=(col == 0),
    )
save_fig(\"time_series_plot\")
plt.show()


# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.

# ## Computing Some Baselines

# Naive predictions (just predict the last observed value):

# In[6]:


y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))


# In[7]:


plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Linear predictions:

# In[8]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(1)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[9]:


model.evaluate(X_valid, y_valid)


# In[10]:


def plot_learning_curves(loss, val_loss):
    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")
    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")
    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    plt.axis([1, 20, 0, 0.05])
    plt.legend(fontsize=14)
    plt.xlabel(\"Epochs\")
    plt.ylabel(\"Loss\")
    plt.grid(True)


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[11]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Using a Simple RNN

# In[12]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([keras.layers.SimpleRNN(1, input_shape=[None, 1])])

optimizer = keras.optimizers.Adam(learning_rate=0.005)
model.compile(loss=\"mse\", optimizer=optimizer)
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[13]:


model.evaluate(X_valid, y_valid)


# In[14]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[15]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Deep RNNs

# In[16]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[17]:


model.evaluate(X_valid, y_valid)


# In[18]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[19]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Make the second `SimpleRNN` layer return only the last output:

# In[20]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[21]:


model.evaluate(X_valid, y_valid)


# In[22]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[23]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Forecasting Several Steps Ahead

# In[24]:


np.random.seed(43)  # not 42, as it would give the first series in the train set

series = generate_time_series(1, n_steps + 10)
X_new, Y_new = series[:, :n_steps], series[:, n_steps:]
X = X_new
for step_ahead in range(10):
    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:]


# In[25]:


Y_pred.shape


# In[26]:


def plot_multiple_forecasts(X, Y, Y_pred):
    n_steps = X.shape[1]
    ahead = Y.shape[1]
    plot_series(X[0, :, 0])
    plt.plot(np.arange(n_steps, n_steps + ahead), Y[0, :, 0], \"bo-\", label=\"Actual\")
    plt.plot(
        np.arange(n_steps, n_steps + ahead),
        Y_pred[0, :, 0],
        \"rx-\",
        label=\"Forecast\",
        markersize=10,
    )
    plt.axis([0, n_steps + ahead, -1, 1])
    plt.legend(fontsize=14)


plot_multiple_forecasts(X_new, Y_new, Y_pred)
save_fig(\"forecast_ahead_plot\")
plt.show()


# Now let's use this model to predict the next 10 values. We first need to regenerate the sequences with 9 more time steps.

# In[27]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, Y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, Y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, Y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


# Now let's predict the next 10 values one by one:

# In[28]:


X = X_valid
for step_ahead in range(10):
    y_pred_one = model.predict(X)[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:, 0]


# In[29]:


Y_pred.shape


# In[30]:


np.mean(keras.metrics.mean_squared_error(Y_valid, Y_pred))


# Let's compare this performance with some baselines: naive predictions and a simple linear model:

# In[31]:


Y_naive_pred = np.tile(
    X_valid[:, -1], 10
)  # take the last time step value, and repeat it 10 times
np.mean(keras.metrics.mean_squared_error(Y_valid, Y_naive_pred))


# In[32]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(10)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Now let's create an RNN that predicts all 10 next values at once:

# In[33]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(10),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[34]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, -10:, :]
Y_pred = model.predict(X_new)[..., np.newaxis]


# In[35]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's create an RNN that predicts the next 10 steps at each time step. That is, instead of just forecasting time steps 50 to 59 based on time steps 0 to 49, it will forecast time steps 1 to 10 at time step 0, then time steps 2 to 11 at time step 1, and so on, and finally it will forecast time steps 50 to 59 at the last time step. Notice that the model is causal: when it makes predictions at any time step, it can only see past time steps.

# In[36]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]
Y = np.empty((10000, n_steps, 10))
for step_ahead in range(1, 10 + 1):
    Y[..., step_ahead - 1] = series[..., step_ahead : step_ahead + n_steps, 0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]


# In[37]:


X_train.shape, Y_train.shape


# In[38]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)


def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])


model.compile(
    loss=\"mse\",
    optimizer=keras.optimizers.Adam(learning_rate=0.01),
    metrics=[last_time_step_mse],
)
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[39]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[40]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # Deep RNN with Batch Norm

# In[41]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.BatchNormalization(),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.BatchNormalization(),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Deep RNNs with Layer Norm

# In[42]:


from tensorflow.keras.layers import LayerNormalization


# In[43]:


class LNSimpleRNNCell(keras.layers.Layer):
    def __init__(self, units, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.state_size = units
        self.output_size = units
        self.simple_rnn_cell = keras.layers.SimpleRNNCell(units, activation=None)
        self.layer_norm = LayerNormalization()
        self.activation = keras.activations.get(activation)

    def get_initial_state(self, inputs=None, batch_size=None, dtype=None):
        if inputs is not None:
            batch_size = tf.shape(inputs)[0]
            dtype = inputs.dtype
        return [tf.zeros([batch_size, self.state_size], dtype=dtype)]

    def call(self, inputs, states):
        outputs, new_states = self.simple_rnn_cell(inputs, states)
        norm_outputs = self.activation(self.layer_norm(outputs))
        return norm_outputs, [norm_outputs]


# In[44]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.RNN(
            LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]
        ),
        keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Creating a Custom RNN Class

# In[45]:


class MyRNN(keras.layers.Layer):
    def __init__(self, cell, return_sequences=False, **kwargs):
        super().__init__(**kwargs)
        self.cell = cell
        self.return_sequences = return_sequences
        self.get_initial_state = getattr(
            self.cell, \"get_initial_state\", self.fallback_initial_state
        )

    def fallback_initial_state(self, inputs):
        batch_size = tf.shape(inputs)[0]
        return [tf.zeros([batch_size, self.cell.state_size], dtype=inputs.dtype)]

    @tf.function
    def call(self, inputs):
        states = self.get_initial_state(inputs)
        shape = tf.shape(inputs)
        batch_size = shape[0]
        n_steps = shape[1]
        sequences = tf.TensorArray(
            inputs.dtype, size=(n_steps if self.return_sequences else 0)
        )
        outputs = tf.zeros(
            shape=[batch_size, self.cell.output_size], dtype=inputs.dtype
        )
        for step in tf.range(n_steps):
            outputs, states = self.cell(inputs[:, step], states)
            if self.return_sequences:
                sequences = sequences.write(step, outputs)
        if self.return_sequences:
            return tf.transpose(sequences.stack(), [1, 0, 2])
        else:
            return outputs


# In[46]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        MyRNN(LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]),
        MyRNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # LSTMs

# In[47]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.LSTM(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[48]:


model.evaluate(X_valid, Y_valid)


# In[49]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[50]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[51]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # GRUs

# In[52]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.GRU(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[53]:


model.evaluate(X_valid, Y_valid)


# In[54]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[55]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[56]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# ## Using One-Dimensional Convolutional Layers to Process Sequences

# ```
# 1D conv layer with kernel size 4, stride 2, VALID padding:
#
#               |-----2-----|     |-----5---...------|     |-----23----|
#         |-----1-----|     |-----4-----|   ...      |-----22----|
#   |-----0----|      |-----3-----|     |---...|-----21----|
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 42 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 43 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 52 53 54 55 56 57 58 59
#
# Output:
#
# X:     0/3   2/5   4/7   6/9   8/11 10/13 .../43 42/45 44/47 46/49
# Y:     4/13  6/15  8/17 10/19 12/21 14/23 .../53 46/55 48/57 50/59
# ```

# In[57]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.Conv1D(
            filters=20, kernel_size=4, strides=2, padding=\"valid\", input_shape=[None, 1]
        ),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(
    X_train, Y_train[:, 3::2], epochs=20, validation_data=(X_valid, Y_valid[:, 3::2])
)


# ## WaveNet

# ```
# C2  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\.../\\ /\\ /\\ /\\ /\\ /\\
#    \\  /  \\  /  \\  /  \\  /  \\  /  \\  /  \\       /  \\  /  \\  /  \\
#      /    \\      /    \\      /    \\                 /    \\
# C1  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\  /\\ /.../\\ /\\ /\\ /\\ /\\ /\\ /\\
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 53 54 55 56 57 58 59
# ```

# In[58]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape=[None, 1]))
for rate in (1, 2, 4, 8) * 2:
    model.add(
        keras.layers.Conv1D(
            filters=20,
            kernel_size=2,
            padding=\"causal\",
            activation=\"relu\",
            dilation_rate=rate,
        )
    )
model.add(keras.layers.Conv1D(filters=10, kernel_size=1))
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Here is the original WaveNet defined in the paper: it uses Gated Activation Units instead of ReLU and parametrized skip connections, plus it pads with zeros on the left to avoid getting shorter and shorter sequences:

# In[59]:


class GatedActivationUnit(keras.layers.Layer):
    def __init__(self, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.activation = keras.activations.get(activation)

    def call(self, inputs):
        n_filters = inputs.shape[-1] // 2
        linear_output = self.activation(inputs[..., :n_filters])
        gate = keras.activations.sigmoid(inputs[..., n_filters:])
        return self.activation(linear_output) * gate


# In[60]:


def wavenet_residual_block(inputs, n_filters, dilation_rate):
    z = keras.layers.Conv1D(
        2 * n_filters, kernel_size=2, padding=\"causal\", dilation_rate=dilation_rate
    )(inputs)
    z = GatedActivationUnit()(z)
    z = keras.layers.Conv1D(n_filters, kernel_size=1)(z)
    return keras.layers.Add()([z, inputs]), z


# In[61]:


keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

n_layers_per_block = 3  # 10 in the paper
n_blocks = 1  # 3 in the paper
n_filters = 32  # 128 in the paper
n_outputs = 10  # 256 in the paper

inputs = keras.layers.Input(shape=[None, 1])
z = keras.layers.Conv1D(n_filters, kernel_size=2, padding=\"causal\")(inputs)
skip_to_last = []
for dilation_rate in [2 ** i for i in range(n_layers_per_block)] * n_blocks:
    z, skip = wavenet_residual_block(z, n_filters, dilation_rate)
    skip_to_last.append(skip)
z = keras.activations.relu(keras.layers.Add()(skip_to_last))
z = keras.layers.Conv1D(n_filters, kernel_size=1, activation=\"relu\")(z)
Y_proba = keras.layers.Conv1D(n_outputs, kernel_size=1, activation=\"softmax\")(z)

model = keras.models.Model(inputs=[inputs], outputs=[Y_proba])


# In[62]:


model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=2, validation_data=(X_valid, Y_valid))


# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.

# # Exercise solutions

# ## 1. to 8.

# See Appendix A.

# ## 9. Tackling the SketchRNN Dataset

# _Exercise: Train a classification model for the SketchRNN dataset, available in TensorFlow Datasets._

# The dataset is not available in TFDS yet, the [pull request](https://github.com/tensorflow/datasets/pull/361) is still work in progress. Luckily, the data is conveniently available as TFRecords, so let's download it (it might take a while, as it's about 1 GB large, with 3,450,000 training sketches and 345,000 test sketches):

# In[63]:


DOWNLOAD_ROOT = \"http://download.tensorflow.org/data/\"
FILENAME = \"quickdraw_tutorial_dataset_v1.tar.gz\"
filepath = keras.utils.get_file(
    FILENAME, DOWNLOAD_ROOT + FILENAME, cache_subdir=\"datasets/quickdraw\", extract=True
)


# In[64]:


quickdraw_dir = Path(filepath).parent
train_files = sorted([str(path) for path in quickdraw_dir.glob(\"training.tfrecord-*\")])
eval_files = sorted([str(path) for path in quickdraw_dir.glob(\"eval.tfrecord-*\")])


# In[65]:


train_files


# In[66]:


eval_files


# In[67]:


with open(quickdraw_dir / \"eval.tfrecord.classes\") as test_classes_file:
    test_classes = test_classes_file.readlines()

with open(quickdraw_dir / \"training.tfrecord.classes\") as train_classes_file:
    train_classes = train_classes_file.readlines()


# In[68]:


assert train_classes == test_classes
class_names = [name.strip().lower() for name in train_classes]


# In[69]:


sorted(class_names)


# In[70]:


def parse(data_batch):
    feature_descriptions = {
        \"ink\": tf.io.VarLenFeature(dtype=tf.float32),
        \"shape\": tf.io.FixedLenFeature([2], dtype=tf.int64),
        \"class_index\": tf.io.FixedLenFeature([1], dtype=tf.int64),
    }
    examples = tf.io.parse_example(data_batch, feature_descriptions)
    flat_sketches = tf.sparse.to_dense(examples[\"ink\"])
    sketches = tf.reshape(flat_sketches, shape=[tf.size(data_batch), -1, 3])
    lengths = examples[\"shape\"][:, 0]
    labels = examples[\"class_index\"][:, 0]
    return sketches, lengths, labels


# In[71]:


def quickdraw_dataset(
    filepaths,
    batch_size=32,
    shuffle_buffer_size=None,
    n_parse_threads=5,
    n_read_threads=5,
    cache=False,
):
    dataset = tf.data.TFRecordDataset(filepaths, num_parallel_reads=n_read_threads)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(parse, num_parallel_calls=n_parse_threads)
    return dataset.prefetch(1)


# In[72]:


train_set = quickdraw_dataset(train_files, shuffle_buffer_size=10000)
valid_set = quickdraw_dataset(eval_files[:5])
test_set = quickdraw_dataset(eval_files[5:])


# In[73]:


for sketches, lengths, labels in train_set.take(1):
    print(\"sketches =\", sketches)
    print(\"lengths =\", lengths)
    print(\"labels =\", labels)


# In[74]:


def draw_sketch(sketch, label=None):
    origin = np.array([[0.0, 0.0, 0.0]])
    sketch = np.r_[origin, sketch]
    stroke_end_indices = np.argwhere(sketch[:, -1] == 1.0)[:, 0]
    coordinates = np.cumsum(sketch[:, :2], axis=0)
    strokes = np.split(coordinates, stroke_end_indices + 1)
    title = class_names[label.numpy()] if label is not None else \"Try to guess\"
    plt.title(title)
    plt.plot(coordinates[:, 0], -coordinates[:, 1], \"y:\")
    for stroke in strokes:
        plt.plot(stroke[:, 0], -stroke[:, 1], \".-\")
    plt.axis(\"off\")


def draw_sketches(sketches, lengths, labels):
    n_sketches = len(sketches)
    n_cols = 4
    n_rows = (n_sketches - 1) // n_cols + 1
    plt.figure(figsize=(n_cols * 3, n_rows * 3.5))
    for index, sketch, length, label in zip(
        range(n_sketches), sketches, lengths, labels
    ):
        plt.subplot(n_rows, n_cols, index + 1)
        draw_sketch(sketch[:length], label)
    plt.show()


for sketches, lengths, labels in train_set.take(1):
    draw_sketches(sketches, lengths, labels)


# Most sketches are composed of less than 100 points:

# In[75]:


lengths = np.concatenate([lengths for _, lengths, _ in train_set.take(1000)])
plt.hist(lengths, bins=150, density=True)
plt.axis([0, 200, 0, 0.03])
plt.xlabel(\"length\")
plt.ylabel(\"density\")
plt.show()


# In[76]:


def crop_long_sketches(dataset, max_length=100):
    return dataset.map(lambda inks, lengths, labels: (inks[:, :max_length], labels))


cropped_train_set = crop_long_sketches(train_set)
cropped_valid_set = crop_long_sketches(valid_set)
cropped_test_set = crop_long_sketches(test_set)


# In[77]:


model = keras.models.Sequential(
    [
        keras.layers.Conv1D(32, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(64, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(128, kernel_size=3, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(128, return_sequences=True),
        keras.layers.LSTM(128),
        keras.layers.Dense(len(class_names), activation=\"softmax\"),
    ]
)
optimizer = keras.optimizers.SGD(learning_rate=1e-2, clipnorm=1.0)
model.compile(
    loss=\"sparse_categorical_crossentropy\",
    optimizer=optimizer,
    metrics=[\"accuracy\", \"sparse_top_k_categorical_accuracy\"],
)
history = model.fit(cropped_train_set, epochs=2, validation_data=cropped_valid_set)


# In[78]:


y_test = np.concatenate([labels for _, _, labels in test_set])
y_probas = model.predict(test_set)


# In[79]:


np.mean(keras.metrics.sparse_top_k_categorical_accuracy(y_test, y_probas))


# In[80]:


n_new = 10
Y_probas = model.predict(sketches)
top_k = tf.nn.top_k(Y_probas, k=5)
for index in range(n_new):
    plt.figure(figsize=(3, 3.5))
    draw_sketch(sketches[index])
    plt.show()
    print(\"Top-5 predictions:\".format(index + 1))
    for k in range(5):
        class_name = class_names[top_k.indices[index, k]]
        proba = 100 * top_k.values[index, k]
        print(\"  {}. {} {:.3f}%\".format(k + 1, class_name, proba))
    print(\"Answer: {}\".format(class_names[labels[index].numpy()]))


# In[81]:


model.save(\"my_sketchrnn\")


# ## 10. Bach Chorales
# _Exercise: Download the [Bach chorales](https://homl.info/bach) dataset and unzip it. It is composed of 382 chorales composed by Johann Sebastian Bach. Each chorale is 100 to 640 time steps long, and each time step contains 4 integers, where each integer corresponds to a note's index on a piano (except for the value 0, which means that no note is played). Train a model—recurrent, convolutional, or both—that can predict the next time step (four notes), given a sequence of time steps from a chorale. Then use this model to generate Bach-like music, one note at a time: you can do this by giving the model the start of a chorale and asking it to predict the next time step, then appending these time steps to the input sequence and asking the model for the next note, and so on. Also make sure to check out [Google's Coconet model](https://homl.info/coconet), which was used for a nice [Google doodle about Bach](https://www.google.com/doodles/celebrating-johann-sebastian-bach)._
#
#

# In[82]:


DOWNLOAD_ROOT = (
    \"https://github.com/ageron/handson-ml2/raw/master/datasets/jsb_chorales/\"
)
FILENAME = \"jsb_chorales.tgz\"
filepath = keras.utils.get_file(
    FILENAME,
    DOWNLOAD_ROOT + FILENAME,
    cache_subdir=\"datasets/jsb_chorales\",
    extract=True,
)


# In[83]:


jsb_chorales_dir = Path(filepath).parent
train_files = sorted(jsb_chorales_dir.glob(\"train/chorale_*.csv\"))
valid_files = sorted(jsb_chorales_dir.glob(\"valid/chorale_*.csv\"))
test_files = sorted(jsb_chorales_dir.glob(\"test/chorale_*.csv\"))


# In[84]:


import pandas as pd


def load_chorales(filepaths):
    return [pd.read_csv(filepath).values.tolist() for filepath in filepaths]


train_chorales = load_chorales(train_files)
valid_chorales = load_chorales(valid_files)
test_chorales = load_chorales(test_files)


# In[85]:


train_chorales[0]


# Notes range from 36 (C1 = C on octave 1) to 81 (A5 = A on octave 5), plus 0 for silence:

# In[86]:


notes = set()
for chorales in (train_chorales, valid_chorales, test_chorales):
    for chorale in chorales:
        for chord in chorale:
            notes |= set(chord)

n_notes = len(notes)
min_note = min(notes - {0})
max_note = max(notes)

assert min_note == 36
assert max_note == 81


# Let's write a few functions to listen to these chorales (you don't need to understand the details here, and in fact there are certainly simpler ways to do this, for example using MIDI players, but I just wanted to have a bit of fun writing a synthesizer):

# In[87]:


from IPython.display import Audio


def notes_to_frequencies(notes):
    # Frequency doubles when you go up one octave; there are 12 semi-tones
    # per octave; Note A on octave 4 is 440 Hz, and it is note number 69.
    return 2 ** ((np.array(notes) - 69) / 12) * 440


def frequencies_to_samples(frequencies, tempo, sample_rate):
    note_duration = 60 / tempo  # the tempo is measured in beats per minutes
    # To reduce click sound at every beat, we round the frequencies to try to
    # get the samples close to zero at the end of each note.
    frequencies = np.round(note_duration * frequencies) / note_duration
    n_samples = int(note_duration * sample_rate)
    time = np.linspace(0, note_duration, n_samples)
    sine_waves = np.sin(2 * np.pi * frequencies.reshape(-1, 1) * time)
    # Removing all notes with frequencies ≤ 9 Hz (includes note 0 = silence)
    sine_waves *= (frequencies > 9.0).reshape(-1, 1)
    return sine_waves.reshape(-1)


def chords_to_samples(chords, tempo, sample_rate):
    freqs = notes_to_frequencies(chords)
    freqs = np.r_[freqs, freqs[-1:]]  # make last note a bit longer
    merged = np.mean(
        [frequencies_to_samples(melody, tempo, sample_rate) for melody in freqs.T],
        axis=0,
    )
    n_fade_out_samples = sample_rate * 60 // tempo  # fade out last note
    fade_out = np.linspace(1.0, 0.0, n_fade_out_samples) ** 2
    merged[-n_fade_out_samples:] *= fade_out
    return merged


def play_chords(chords, tempo=160, amplitude=0.1, sample_rate=44100, filepath=None):
    samples = amplitude * chords_to_samples(chords, tempo, sample_rate)
    if filepath:
        from scipy.io import wavfile

        samples = (2 ** 15 * samples).astype(np.int16)
        wavfile.write(filepath, sample_rate, samples)
        return display(Audio(filepath))
    else:
        return display(Audio(samples, rate=sample_rate))


# Now let's listen to a few chorales:

# In[88]:


for index in range(3):
    play_chords(train_chorales[index])


# Divine! :)

# In order to be able to generate new chorales, we want to train a model that can predict the next chord given all the previous chords. If we naively try to predict the next chord in one shot, predicting all 4 notes at once, we run the risk of getting notes that don't go very well together (believe me, I tried). It's much better and simpler to predict one note at a time. So we will need to preprocess every chorale, turning each chord into an arpegio (i.e., a sequence of notes rather than notes played simultaneuously). So each chorale will be a long sequence of notes (rather than chords), and we can just train a model that can predict the next note given all the previous notes. We will use a sequence-to-sequence approach, where we feed a window to the neural net, and it tries to predict that same window shifted one time step into the future.
#
# We will also shift the values so that they range from 0 to 46, where 0 represents silence, and values 1 to 46 represent notes 36 (C1) to 81 (A5).
#
# And we will train the model on windows of 128 notes (i.e., 32 chords).
#
# Since the dataset fits in memory, we could preprocess the chorales in RAM using any Python code we like, but I will demonstrate here how to do all the preprocessing using tf.data (there will be more details about creating windows using tf.data in the next chapter).

# In[89]:


def create_target(batch):
    X = batch[:, :-1]
    Y = batch[:, 1:]  # predict next note in each arpegio, at each step
    return X, Y


def preprocess(window):
    window = tf.where(window == 0, window, window - min_note + 1)  # shift values
    return tf.reshape(window, [-1])  # convert to arpegio


def bach_dataset(
    chorales,
    batch_size=32,
    shuffle_buffer_size=None,
    window_size=32,
    window_shift=16,
    cache=True,
):
    def batch_window(window):
        return window.batch(window_size + 1)

    def to_windows(chorale):
        dataset = tf.data.Dataset.from_tensor_slices(chorale)
        dataset = dataset.window(window_size + 1, window_shift, drop_remainder=True)
        return dataset.flat_map(batch_window)

    chorales = tf.ragged.constant(chorales, ragged_rank=1)
    dataset = tf.data.Dataset.from_tensor_slices(chorales)
    dataset = dataset.flat_map(to_windows).map(preprocess)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(create_target)
    return dataset.prefetch(1)


# Now let's create the training set, the validation set and the test set:

# In[90]:


train_set = bach_dataset(train_chorales, shuffle_buffer_size=1000)
valid_set = bach_dataset(valid_chorales)
test_set = bach_dataset(test_chorales)


# Now let's create the model:
#
# * We could feed the note values directly to the model, as floats, but this would probably not give good results. Indeed, the relationships between notes are not that simple: for example, if you replace a C3 with a C4, the melody will still sound fine, even though these notes are 12 semi-tones apart (i.e., one octave). Conversely, if you replace a C3 with a C\\#3, it's very likely that the chord will sound horrible, despite these notes being just next to each other. So we will use an `Embedding` layer to convert each note to a small vector representation (see Chapter 16 for more details on embeddings). We will use 5-dimensional embeddings, so the output of this first layer will have a shape of `[batch_size, window_size, 5]`.
# * We will then feed this data to a small WaveNet-like neural network, composed of a stack of 4 `Conv1D` layers with doubling dilation rates. We will intersperse these layers with `BatchNormalization` layers for faster better convergence.
# * Then one `LSTM` layer to try to capture long-term patterns.
# * And finally a `Dense` layer to produce the final note probabilities. It will predict one probability for each chorale in the batch, for each time step, and for each possible note (including silence). So the output shape will be `[batch_size, window_size, 47]`.

# In[91]:


n_embedding_dims = 5

model = keras.models.Sequential(
    [
        keras.layers.Embedding(
            input_dim=n_notes, output_dim=n_embedding_dims, input_shape=[None]
        ),
        keras.layers.Conv1D(32, kernel_size=2, padding=\"causal\", activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            48, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=2
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            64, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=4
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            96, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=8
        ),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(256, return_sequences=True),
        keras.layers.Dense(n_notes, activation=\"softmax\"),
    ]
)

model.summary()


# Now we're ready to compile and train the model!

# In[92]:


optimizer = keras.optimizers.Nadam(learning_rate=1e-3)
model.compile(
    loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"]
)
model.fit(train_set, epochs=20, validation_data=valid_set)


# I have not done much hyperparameter search, so feel free to iterate on this model now and try to optimize it. For example, you could try removing the `LSTM` layer and replacing it with `Conv1D` layers. You could also play with the number of layers, the learning rate, the optimizer, and so on.

# Once you're satisfied with the performance of the model on the validation set, you can save it and evaluate it one last time on the test set:

# In[93]:


model.save(\"my_bach_model.h5\")
model.evaluate(test_set)


# **Note:** There's no real need for a test set in this exercise, since we will perform the final evaluation by just listening to the music produced by the model. So if you want, you can add the test set to the train set, and train the model again, hopefully getting a slightly better model.

# Now let's write a function that will generate a new chorale. We will give it a few seed chords, it will convert them to arpegios (the format expected by the model), and use the model to predict the next note, then the next, and so on. In the end, it will group the notes 4 by 4 to create chords again, and return the resulting chorale.

# **Warning**: `model.predict_classes(X)` is deprecated. It is replaced with `np.argmax(model.predict(X), axis=-1)`.

# In[94]:


def generate_chorale(model, seed_chords, length):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            # next_note = model.predict_classes(arpegio)[:1, -1:]
            next_note = np.argmax(model.predict(arpegio), axis=-1)[:1, -1:]
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# To test this function, we need some seed chords. Let's use the first 8 chords of one of the test chorales (it's actually just 2 different chords, each played 4 times):

# In[95]:


seed_chords = test_chorales[2][:8]
play_chords(seed_chords, amplitude=0.2)


# Now we are ready to generate our first chorale! Let's ask the function to generate 56 more chords, for a total of 64 chords, i.e., 16 bars (assuming 4 chords per bar, i.e., a 4/4 signature):

# In[96]:


new_chorale = generate_chorale(model, seed_chords, 56)
play_chords(new_chorale)


# This approach has one major flaw: it is often too conservative. Indeed, the model will not take any risk, it will always choose the note with the highest score, and since repeating the previous note generally sounds good enough, it's the least risky option, so the algorithm will tend to make notes last longer and longer. Pretty boring. Plus, if you run the model multiple times, it will always generate the same melody.
#
# So let's spice things up a bit! Instead of always picking the note with the highest score, we will pick the next note randomly, according to the predicted probabilities. For example, if the model predicts a C3 with 75% probability, and a G3 with a 25% probability, then we will pick one of these two notes randomly, with these probabilities. We will also add a `temperature` parameter that will control how \"hot\" (i.e., daring) we want the system to feel. A high temperature will bring the predicted probabilities closer together, reducing the probability of the likely notes and increasing the probability of the unlikely ones.

# In[97]:


def generate_chorale_v2(model, seed_chords, length, temperature=1):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            next_note_probas = model.predict(arpegio)[0, -1:]
            rescaled_logits = tf.math.log(next_note_probas) / temperature
            next_note = tf.random.categorical(rescaled_logits, num_samples=1)
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# Let's generate 3 chorales using this new function: one cold, one medium, and one hot (feel free to experiment with other seeds, lengths and temperatures). The code saves each chorale to a separate file. You can run these cells over an over again until you generate a masterpiece!
#
# **Please share your most beautiful generated chorale with me on Twitter @aureliengeron, I would really appreciate it! :))**

# In[98]:


new_chorale_v2_cold = generate_chorale_v2(model, seed_chords, 56, temperature=0.8)
play_chords(new_chorale_v2_cold, filepath=\"bach_cold.wav\")


# In[99]:


new_chorale_v2_medium = generate_chorale_v2(model, seed_chords, 56, temperature=1.0)
play_chords(new_chorale_v2_medium, filepath=\"bach_medium.wav\")


# In[100]:


new_chorale_v2_hot = generate_chorale_v2(model, seed_chords, 56, temperature=1.5)
play_chords(new_chorale_v2_hot, filepath=\"bach_hot.wav\")


# Lastly, you can try a fun social experiment: send your friends a few of your favorite generated chorales, plus the real chorale, and ask them to guess which one is the real one!

# In[101]:


play_chords(test_chorales[2][:64], filepath=\"bach_test_4.wav\")
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 22 (face font-lock-comment-face fontified t) 22 23 (fontified t) 23 29 (face font-lock-keyword-face fontified t) 29 38 (fontified t) 38 44 (face font-lock-keyword-face fontified t) 44 56 (fontified t) 56 58 (face font-lock-keyword-face fontified t) 58 62 (fontified t) 62 66 (face font-lock-keyword-face fontified t) 66 78 (fontified t) 78 84 (face font-lock-keyword-face fontified t) 84 91 (fontified t) 91 97 (face font-lock-keyword-face fontified t) 97 104 (fontified t) 104 106 (face font-lock-keyword-face fontified t) 106 110 (fontified t) 110 114 (face font-lock-keyword-face fontified t) 114 123 (fontified t) 123 129 (face font-lock-keyword-face fontified t) 129 136 (fontified t) 136 138 (face font-lock-comment-delimiter-face fontified t) 138 188 (face font-lock-comment-face fontified t) 188 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-1-face) fontified t) 203 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-1-face) fontified t) 206 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-1-face) fontified t) 226 228 (fontified t) 228 229 (face (rainbow-delimiters-depth-1-face) fontified t) 229 231 (fontified t) 231 237 (face font-lock-keyword-face fontified t) 237 249 (fontified t) 249 251 (face font-lock-keyword-face fontified t) 251 256 (fontified t) 256 262 (face font-lock-keyword-face fontified t) 262 281 (fontified t) 281 283 (face font-lock-keyword-face fontified t) 283 295 (fontified t) 295 296 (face (rainbow-delimiters-depth-1-face) fontified t) 296 302 (face font-lock-string-face fontified t) 302 316 (fontified t) 316 317 (face (rainbow-delimiters-depth-1-face) fontified t) 317 324 (fontified t) 324 325 (face (rainbow-delimiters-depth-1-face) fontified t) 325 332 (face font-lock-string-face fontified t) 332 346 (fontified t) 346 347 (face (rainbow-delimiters-depth-1-face) fontified t) 347 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-1-face) fontified t) 355 362 (face font-lock-string-face fontified t) 362 376 (fontified t) 376 377 (face (rainbow-delimiters-depth-1-face) fontified t) 377 379 (fontified t) 379 380 (fontified t) 380 381 (fontified t) 381 387 (fontified t) 387 388 (fontified t) 388 395 (fontified t) 395 396 (face (rainbow-delimiters-depth-1-face) fontified t) 396 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-1-face) fontified t) 399 400 (fontified t) 400 401 (fontified t) 401 408 (face font-lock-variable-name-face fontified t) 408 414 (fontified t) 414 415 (face font-lock-variable-name-face fontified t) 415 416 (face font-lock-variable-name-face fontified t) 416 420 (face font-lock-variable-name-face fontified t) 420 426 (fontified t) 426 427 (fontified t) 427 443 (fontified t) 443 444 (face (rainbow-delimiters-depth-1-face) fontified t) 444 462 (fontified t) 462 463 (face (rainbow-delimiters-depth-1-face) fontified t) 463 464 (fontified t) 464 471 (face font-lock-variable-name-face fontified t) 471 473 (fontified t) 473 480 (face font-lock-variable-name-face fontified t) 480 489 (fontified t) 489 490 (face (rainbow-delimiters-depth-1-face) fontified t) 490 505 (fontified t) 505 506 (face (rainbow-delimiters-depth-1-face) fontified t) 506 514 (fontified t) 514 515 (face (rainbow-delimiters-depth-1-face) fontified t) 515 524 (fontified t) 524 525 (face (rainbow-delimiters-depth-1-face) fontified t) 525 526 (fontified t) 526 533 (face font-lock-variable-name-face fontified t) 533 535 (fontified t) 535 542 (face font-lock-variable-name-face fontified t) 542 551 (fontified t) 551 552 (face (rainbow-delimiters-depth-1-face) fontified t) 552 571 (fontified t) 571 572 (face (rainbow-delimiters-depth-1-face) fontified t) 572 580 (fontified t) 580 581 (face (rainbow-delimiters-depth-1-face) fontified t) 581 594 (fontified t) 594 595 (face (rainbow-delimiters-depth-1-face) fontified t) 595 596 (fontified t) 596 602 (face font-lock-variable-name-face fontified t) 602 604 (fontified t) 604 610 (face font-lock-variable-name-face fontified t) 610 619 (fontified t) 619 620 (face (rainbow-delimiters-depth-1-face) fontified t) 620 635 (fontified t) 635 636 (face (rainbow-delimiters-depth-1-face) fontified t) 636 644 (fontified t) 644 645 (face (rainbow-delimiters-depth-1-face) fontified t) 645 654 (fontified t) 654 655 (face (rainbow-delimiters-depth-1-face) fontified t) 655 658 (fontified t) 658 660 (face font-lock-comment-delimiter-face fontified t) 660 667 (face font-lock-comment-face fontified t) 667 700 (fontified t) 700 702 (face font-lock-comment-delimiter-face fontified t) 702 709 (face font-lock-comment-face fontified t) 709 711 (fontified t) 711 714 (face font-lock-keyword-face fontified t) 714 715 (fontified t) 715 726 (face font-lock-function-name-face fontified t) 726 727 (face (rainbow-delimiters-depth-1-face) fontified t) 727 742 (fontified t) 742 746 (face font-lock-constant-face fontified t) 746 755 (fontified t) 755 759 (face font-lock-constant-face fontified t) 759 769 (fontified t) 769 774 (face font-lock-string-face fontified t) 774 784 (fontified t) 784 792 (face font-lock-string-face fontified t) 792 801 (fontified t) 801 805 (face font-lock-constant-face fontified t) 805 806 (fontified t) 806 807 (face (rainbow-delimiters-depth-1-face) fontified t) 807 821 (fontified t) 821 822 (face (rainbow-delimiters-depth-1-face) fontified t) 822 830 (fontified t) 830 834 (face font-lock-string-face fontified t) 834 835 (face (rainbow-delimiters-depth-1-face) fontified t) 835 840 (fontified t) 840 842 (face font-lock-keyword-face fontified t) 842 845 (fontified t) 845 847 (face font-lock-keyword-face fontified t) 847 848 (fontified t) 848 851 (face font-lock-keyword-face fontified t) 851 852 (fontified t) 852 856 (face font-lock-constant-face fontified t) 856 874 (fontified t) 874 875 (face (rainbow-delimiters-depth-1-face) fontified t) 875 879 (fontified t) 879 880 (fontified t) 880 881 (fontified t) 881 887 (fontified t) 887 891 (fontified t face font-lock-string-face) 891 899 (fontified t) 899 907 (fontified t face font-lock-string-face) 907 908 (fontified t face (rainbow-delimiters-depth-1-face)) 908 909 (fontified t)) . 1) (undo-tree-id2760 . -380) (undo-tree-id2761 . -380) (undo-tree-id2762 . -379) (undo-tree-id2763 . -379) (undo-tree-id2764 . -379) (undo-tree-id2765 . -379) (undo-tree-id2766 . -379) (undo-tree-id2767 . -379) (undo-tree-id2768 . -379) (undo-tree-id2769 . -379) (undo-tree-id2770 . -379) (undo-tree-id2771 . -379) (undo-tree-id2772 . -379) (undo-tree-id2773 . -379) (undo-tree-id2774 . -379) (undo-tree-id2775 . -379) (undo-tree-id2776 . -379) (undo-tree-id2777 . -379) (undo-tree-id2778 . -379) (undo-tree-id2779 . -379) (undo-tree-id2780 . -379) (undo-tree-id2781 . -379) (undo-tree-id2782 . -379) (undo-tree-id2783 . -379) (undo-tree-id2784 . -379) (undo-tree-id2785 . -379) (undo-tree-id2786 . -379) (undo-tree-id2787 . -379) (undo-tree-id2788 . -379) (undo-tree-id2789 . -379) (undo-tree-id2790 . -379) (undo-tree-id2791 . -379) (undo-tree-id2792 . -379) (undo-tree-id2793 . -379) (undo-tree-id2794 . -380) (undo-tree-id2795 . -380) (undo-tree-id2796 . -380) (undo-tree-id2797 . -380) (undo-tree-id2798 . -380) (undo-tree-id2799 . -380) (undo-tree-id2800 . -380) (undo-tree-id2801 . -23) (undo-tree-id2802 . -29) (undo-tree-id2803 . -231) (undo-tree-id2804 . -237) (undo-tree-id2805 . -256) (undo-tree-id2806 . -262) (undo-tree-id2807 . -380) (undo-tree-id2808 . -380) (undo-tree-id2809 . -1588) (undo-tree-id2810 . -1596) (undo-tree-id2811 . -1709) (undo-tree-id2812 . -1718) (undo-tree-id2813 . -2467) (undo-tree-id2814 . -2474) (undo-tree-id2815 . -2734) (undo-tree-id2816 . -2738) (undo-tree-id2817 . -3308) (undo-tree-id2818 . -3309) (undo-tree-id2819 . -3491) (undo-tree-id2820 . -3498) (undo-tree-id2821 . -3955) (undo-tree-id2822 . -3956) (undo-tree-id2823 . -4180) (undo-tree-id2824 . -4187) (undo-tree-id2825 . -4694) (undo-tree-id2826 . -4695) (undo-tree-id2827 . -4892) (undo-tree-id2828 . -4899) (undo-tree-id2829 . -5294) (undo-tree-id2830 . -5297) (undo-tree-id2831 . -5818) (undo-tree-id2832 . -5824) (undo-tree-id2833 . -6099) (undo-tree-id2834 . -6107) (undo-tree-id2835 . -6219) (undo-tree-id2836 . -6229) (undo-tree-id2837 . -6987) (undo-tree-id2838 . -6993) (undo-tree-id2839 . -7476) (undo-tree-id2840 . -7483) (undo-tree-id2841 . -7730) (undo-tree-id2842 . -7731) (undo-tree-id2843 . -7929) (undo-tree-id2844 . -7936) (undo-tree-id2845 . -8265) (undo-tree-id2846 . -8269) (undo-tree-id2847 . -8960) (undo-tree-id2848 . -8961) (undo-tree-id2849 . -9266) (undo-tree-id2850 . -9267) (undo-tree-id2851 . -9715) (undo-tree-id2852 . -9722) (undo-tree-id2853 . -10183) (undo-tree-id2854 . -10184) (undo-tree-id2855 . -10551) (undo-tree-id2856 . -10558) (undo-tree-id2857 . -10606) (undo-tree-id2858 . -10610) (undo-tree-id2859 . -10954) (undo-tree-id2860 . -10958) (undo-tree-id2861 . -12036) (undo-tree-id2862 . -12043) (undo-tree-id2863 . -12590) (undo-tree-id2864 . -12591) (undo-tree-id2865 . -13521) (undo-tree-id2866 . -13522) (undo-tree-id2867 . -13803) (undo-tree-id2868 . -13810) (undo-tree-id2869 . -14271) (undo-tree-id2870 . -14278) (undo-tree-id2871 . -15136) (undo-tree-id2872 . -15143) (undo-tree-id2873 . -16465) (undo-tree-id2874 . -16466) (undo-tree-id2875 . -16837) (undo-tree-id2876 . -16838) (undo-tree-id2877 . -17930) (undo-tree-id2878 . -17937) (undo-tree-id2879 . -18020) (undo-tree-id2880 . -18025) (undo-tree-id2881 . -18799) (undo-tree-id2882 . -18812) (undo-tree-id2883 . -19718) (undo-tree-id2884 . -19719) (undo-tree-id2885 . -19946) (undo-tree-id2886 . -19953) (undo-tree-id2887 . -20037) (undo-tree-id2888 . -20038) (undo-tree-id2889 . -20615) (undo-tree-id2890 . -20617) (undo-tree-id2891 . -20719) (undo-tree-id2892 . -20722) (undo-tree-id2893 . -21196) (undo-tree-id2894 . -21203) (undo-tree-id2895 . -21336) (undo-tree-id2896 . -21344) (undo-tree-id2897 . -21430) (undo-tree-id2898 . -21431) (undo-tree-id2899 . -22707) (undo-tree-id2900 . -22721) (undo-tree-id2901 . -24801) (undo-tree-id2902 . -24807) (undo-tree-id2903 . -25821) (undo-tree-id2904 . -25838) (undo-tree-id2905 . -26254) (undo-tree-id2906 . -26255) (undo-tree-id2907 . -26698) (undo-tree-id2908 . -26703) (undo-tree-id2909 . -28157) (undo-tree-id2910 . -28163) (undo-tree-id2911 . -28530) (undo-tree-id2912 . -28533) (undo-tree-id2913 . -28922) (undo-tree-id2914 . -28932) (undo-tree-id2915 . -29116) (undo-tree-id2916 . -29120) (undo-tree-id2917 . -30336) (undo-tree-id2918 . -30337) (undo-tree-id2919 . -30641) (undo-tree-id2920 . -30645) (undo-tree-id2921 . -30899) (undo-tree-id2922 . -30906) (undo-tree-id2923 . -30949) (undo-tree-id2924 . -30956) (undo-tree-id2925 . -31200) (undo-tree-id2926 . -31203) (undo-tree-id2927 . -32050) (undo-tree-id2928 . -32060) (undo-tree-id2929 . -32278) (undo-tree-id2930 . -32283) (undo-tree-id2931 . -32720) (undo-tree-id2932 . -32726) (undo-tree-id2933 . -33174) (undo-tree-id2934 . -33178) (undo-tree-id2935 . -33994) (undo-tree-id2936 . -33999) (undo-tree-id2937 . -34724) (undo-tree-id2938 . -34732) (undo-tree-id2939 . -35032) (undo-tree-id2940 . -35036) (undo-tree-id2941 . -35494) (undo-tree-id2942 . -35498) (undo-tree-id2943 . -35642) (undo-tree-id2944 . -35655) (undo-tree-id2945 . -35809) (undo-tree-id2946 . -35822) (undo-tree-id2947 . -35976) (undo-tree-id2948 . -35989) (undo-tree-id2949 . -36395) (undo-tree-id2950 . -36403) (undo-tree-id2951 . -36547) (undo-tree-id2952 . -36552) (undo-tree-id2953 . -36845) (undo-tree-id2954 . -36846) (undo-tree-id2955 . -37060) (undo-tree-id2956 . -37061) (undo-tree-id2957 . -37353) (undo-tree-id2958 . -37354) (undo-tree-id2959 . -37691) (undo-tree-id2960 . -37693) (undo-tree-id2961 . -38366) (undo-tree-id2962 . -38367) (undo-tree-id2963 . -38623) (undo-tree-id2964 . -38631) (undo-tree-id2965 . -38913) (undo-tree-id2966 . -38918) (undo-tree-id2967 . -39339) (undo-tree-id2968 . -39346) (undo-tree-id2969 . -40618) (undo-tree-id2970 . -40621) (undo-tree-id2971 . -40898) (undo-tree-id2972 . -40911) (undo-tree-id2973 . -41041) (undo-tree-id2974 . -41042) (undo-tree-id2975 . -41197) (undo-tree-id2976 . -41198) (undo-tree-id2977 . -41360) (undo-tree-id2978 . -41361) (undo-tree-id2979 . -41501) (undo-tree-id2980 . -41509) (undo-tree-id2981 . -380) (undo-tree-id2982 . -380) (undo-tree-id2983 . -380) (undo-tree-id2984 . -380) (undo-tree-id2985 . -380) (undo-tree-id2986 . -380) (undo-tree-id2987 . -380) (undo-tree-id2988 . -380) (undo-tree-id2989 . -380) (undo-tree-id2990 . -380) (undo-tree-id2991 . -380) (undo-tree-id2992 . -380) (undo-tree-id2993 . -380) (undo-tree-id2994 . -380) (undo-tree-id2995 . -380) (undo-tree-id2996 . -380) (undo-tree-id2997 . -380) (undo-tree-id2998 . -380) (undo-tree-id2999 . -380) (undo-tree-id3000 . -380) (undo-tree-id3001 . -380) (undo-tree-id3002 . -380) (undo-tree-id3003 . -380) (undo-tree-id3004 . -380) (undo-tree-id3005 . -380) (undo-tree-id3006 . -380) (undo-tree-id3007 . -380) (undo-tree-id3008 . -380) (undo-tree-id3009 . -380) (undo-tree-id3010 . -380) (undo-tree-id3011 . -380) (undo-tree-id3012 . -380) (undo-tree-id3013 . -380) (undo-tree-id3014 . -380) (undo-tree-id3015 . -380) (undo-tree-id3016 . -380) (undo-tree-id3017 . -380) (undo-tree-id3018 . -380) (undo-tree-id3019 . -380) (undo-tree-id3020 . -380) (undo-tree-id3021 . -380) (undo-tree-id3022 . -380) (undo-tree-id3023 . -380) (undo-tree-id3024 . -380) (undo-tree-id3025 . -380) (undo-tree-id3026 . -380) (undo-tree-id3027 . -380) (undo-tree-id3028 . -380) (undo-tree-id3029 . -380) (undo-tree-id3030 . -380) (undo-tree-id3031 . -380) (undo-tree-id3032 . -380) (undo-tree-id3033 . -380) (undo-tree-id3034 . -380) (undo-tree-id3035 . -380) (undo-tree-id3036 . -380) (undo-tree-id3037 . -380) (undo-tree-id3038 . -380) (undo-tree-id3039 . -380) (undo-tree-id3040 . -380) (undo-tree-id3041 . -380) (undo-tree-id3042 . -380) (undo-tree-id3043 . -380) (undo-tree-id3044 . -380) (undo-tree-id3045 . -380) (undo-tree-id3046 . -380) (undo-tree-id3047 . -380) (undo-tree-id3048 . -380) (undo-tree-id3049 . -380) (undo-tree-id3050 . -380) (undo-tree-id3051 . -380) (undo-tree-id3052 . -380) (undo-tree-id3053 . -380) (undo-tree-id3054 . -380) (undo-tree-id3055 . -380) (undo-tree-id3056 . -380) (undo-tree-id3057 . -380) (undo-tree-id3058 . -380) (undo-tree-id3059 . -380) (undo-tree-id3060 . -380) (undo-tree-id3061 . -380) (undo-tree-id3062 . -380) (undo-tree-id3063 . -380) (undo-tree-id3064 . -380) (undo-tree-id3065 . -380) (undo-tree-id3066 . -380) (undo-tree-id3067 . -380) (undo-tree-id3068 . -380) (undo-tree-id3069 . -380) (undo-tree-id3070 . -380) (undo-tree-id3071 . -380) (undo-tree-id3072 . -380) (undo-tree-id3073 . -380) (undo-tree-id3074 . -380) (undo-tree-id3075 . -380) (undo-tree-id3076 . -380) (undo-tree-id3077 . -380) (undo-tree-id3078 . -380) (undo-tree-id3079 . -380) (undo-tree-id3080 . -380) (undo-tree-id3081 . -380) (undo-tree-id3082 . -380) (undo-tree-id3083 . -380) (undo-tree-id3084 . -380) (undo-tree-id3085 . -380) (undo-tree-id3086 . -380) (undo-tree-id3087 . -380) (undo-tree-id3088 . -380) (undo-tree-id3089 . -380) (undo-tree-id3090 . -380) (undo-tree-id3091 . -380) (undo-tree-id3092 . -380) (undo-tree-id3093 . -380) (undo-tree-id3094 . -380) (undo-tree-id3095 . -380) (undo-tree-id3096 . -380) (undo-tree-id3097 . -380) (undo-tree-id3098 . -380) (undo-tree-id3099 . -380) (undo-tree-id3100 . -380) (undo-tree-id3101 . -380) (undo-tree-id3102 . -380) (undo-tree-id3103 . -380) (undo-tree-id3104 . -380) (undo-tree-id3105 . -380) (undo-tree-id3106 . -380) (undo-tree-id3107 . -380) (undo-tree-id3108 . -380) (undo-tree-id3109 . -380) (undo-tree-id3110 . -380) (undo-tree-id3111 . -380) (undo-tree-id3112 . -380) (undo-tree-id3113 . -380) (undo-tree-id3114 . -380) (undo-tree-id3115 . -380) (undo-tree-id3116 . -380) (undo-tree-id3117 . -380) (undo-tree-id3118 . -380) (undo-tree-id3119 . -380) (undo-tree-id3120 . -380) (undo-tree-id3121 . -380) (undo-tree-id3122 . -380) (undo-tree-id3123 . -380) (undo-tree-id3124 . -380) (undo-tree-id3125 . -379) (undo-tree-id3126 . -379) (undo-tree-id3127 . -379) (undo-tree-id3128 . -379) (undo-tree-id3129 . -379) (undo-tree-id3130 . -379) (undo-tree-id3131 . -379) (undo-tree-id3132 . -379) (undo-tree-id3133 . -379) (undo-tree-id3134 . -379) (undo-tree-id3135 . -379) (undo-tree-id3136 . -379) (undo-tree-id3137 . -379) (undo-tree-id3138 . -379) (undo-tree-id3139 . -379) (undo-tree-id3140 . -380) (undo-tree-id3141 . -380) (undo-tree-id3142 . -380) (undo-tree-id3143 . -380) (undo-tree-id3144 . -380) (undo-tree-id3145 . -380) (undo-tree-id3146 . -380) (undo-tree-id3147 . -380) (undo-tree-id3148 . -380) (undo-tree-id3149 . -380) (undo-tree-id3150 . -380) (undo-tree-id3151 . -380) (undo-tree-id3152 . -380) (undo-tree-id3153 . -380) (undo-tree-id3154 . -380) (undo-tree-id3155 . -380) (undo-tree-id3156 . -380) (undo-tree-id3157 . -380) (undo-tree-id3158 . -380) (undo-tree-id3159 . -380) (undo-tree-id3160 . -380) (undo-tree-id3161 . -380) (undo-tree-id3162 . -380) (undo-tree-id3163 . -380) (undo-tree-id3164 . -380) (undo-tree-id3165 . -380) (undo-tree-id3166 . -380) (undo-tree-id3167 . -380) (undo-tree-id3168 . -380) (undo-tree-id3169 . -380) (undo-tree-id3170 . -380) (undo-tree-id3171 . -380) (undo-tree-id3172 . -380) (undo-tree-id3173 . -380) (undo-tree-id3174 . -380) (undo-tree-id3175 . -380) (undo-tree-id3176 . -380) (undo-tree-id3177 . -380) (undo-tree-id3178 . 41299) (undo-tree-id3179 . -380) (undo-tree-id3180 . -380) (undo-tree-id3181 . -380) (undo-tree-id3182 . -380) (undo-tree-id3183 . -380) (undo-tree-id3184 . -380) (undo-tree-id3185 . -380) (undo-tree-id3186 . -380) (undo-tree-id3187 . -380) (undo-tree-id3188 . -380) (undo-tree-id3189 . -380) (undo-tree-id3190 . -380) (undo-tree-id3191 . -380) (undo-tree-id3192 . -380) (undo-tree-id3193 . -380) (undo-tree-id3194 . -380) (undo-tree-id3195 . -380) (undo-tree-id3196 . -380) (undo-tree-id3197 . -380) (undo-tree-id3198 . -380) (undo-tree-id3199 . -380) (undo-tree-id3200 . -380) (undo-tree-id3201 . -380) (undo-tree-id3202 . -380) (undo-tree-id3203 . -380) (undo-tree-id3204 . -380) (undo-tree-id3205 . -380) (undo-tree-id3206 . -380) (undo-tree-id3207 . -380) (undo-tree-id3208 . -380) (undo-tree-id3209 . -380) (undo-tree-id3210 . -380) (undo-tree-id3211 . -380) (undo-tree-id3212 . -380) (undo-tree-id3213 . -380) (undo-tree-id3214 . -380) (undo-tree-id3215 . -380) (undo-tree-id3216 . -380) (undo-tree-id3217 . -380) (undo-tree-id3218 . -380) (undo-tree-id3219 . -380) (undo-tree-id3220 . -380) (undo-tree-id3221 . -380) (undo-tree-id3222 . -380) (undo-tree-id3223 . -380) (undo-tree-id3224 . -380) (undo-tree-id3225 . -380) (undo-tree-id3226 . -380) (undo-tree-id3227 . -380) (undo-tree-id3228 . -380) (undo-tree-id3229 . -380) (undo-tree-id3230 . -380) (undo-tree-id3231 . -380) (undo-tree-id3232 . -380) (undo-tree-id3233 . -380) (undo-tree-id3234 . -380) (undo-tree-id3235 . -380) (undo-tree-id3236 . -380) (undo-tree-id3237 . -380) (undo-tree-id3238 . -380) (undo-tree-id3239 . -380) (undo-tree-id3240 . -380) (undo-tree-id3241 . -380) (undo-tree-id3242 . -380) (undo-tree-id3243 . -380) (undo-tree-id3244 . -380) (undo-tree-id3245 . -380) (undo-tree-id3246 . -380) (undo-tree-id3247 . -380) (undo-tree-id3248 . -380) (undo-tree-id3249 . -380) (undo-tree-id3250 . -380) (undo-tree-id3251 . -380) (undo-tree-id3252 . -380) (undo-tree-id3253 . -380) (undo-tree-id3254 . -380) (undo-tree-id3255 . -380) (undo-tree-id3256 . -380) (undo-tree-id3257 . -380) (undo-tree-id3258 . -380) (undo-tree-id3259 . -380) (undo-tree-id3260 . -380) (undo-tree-id3261 . -380) (undo-tree-id3262 . -380) (undo-tree-id3263 . -380) (undo-tree-id3264 . -380) (undo-tree-id3265 . -380) (undo-tree-id3266 . -380) (undo-tree-id3267 . -380) (undo-tree-id3268 . -380) (undo-tree-id3269 . -380) (undo-tree-id3270 . -380) (undo-tree-id3271 . -380) (undo-tree-id3272 . -380) (undo-tree-id3273 . -380) (undo-tree-id3274 . -380) (undo-tree-id3275 . -380) (undo-tree-id3276 . -380) (undo-tree-id3277 . -380) (undo-tree-id3278 . -380) (undo-tree-id3279 . -380) (undo-tree-id3280 . -380) (undo-tree-id3281 . -380) (undo-tree-id3282 . -380) (undo-tree-id3283 . -380) (undo-tree-id3284 . -380) (undo-tree-id3285 . -380) (undo-tree-id3286 . -380) (undo-tree-id3287 . -380) (undo-tree-id3288 . -380) (undo-tree-id3289 . -380) (undo-tree-id3290 . -380) (undo-tree-id3291 . -380) (undo-tree-id3292 . -380) (undo-tree-id3293 . -380) (undo-tree-id3294 . -380) (undo-tree-id3295 . -380) (undo-tree-id3296 . -380) (undo-tree-id3297 . -380) (undo-tree-id3298 . -380) (undo-tree-id3299 . -380) (undo-tree-id3300 . -380) (undo-tree-id3301 . -380) (undo-tree-id3302 . -380) (undo-tree-id3303 . -380) (undo-tree-id3304 . -380) (undo-tree-id3305 . -380) (undo-tree-id3306 . -380) (undo-tree-id3307 . -380) (undo-tree-id3308 . -380) (undo-tree-id3309 . -380) (undo-tree-id3310 . -380) (undo-tree-id3311 . -380) (undo-tree-id3312 . -380) (undo-tree-id3313 . -380) (undo-tree-id3314 . -380) (undo-tree-id3315 . -380) (undo-tree-id3316 . -380) (undo-tree-id3317 . -380) (undo-tree-id3318 . -380) (undo-tree-id3319 . -380) (undo-tree-id3320 . -380) (undo-tree-id3321 . -380) (undo-tree-id3322 . -380) (undo-tree-id3323 . -380) (undo-tree-id3324 . -380) (undo-tree-id3325 . -380) (undo-tree-id3326 . -380) (undo-tree-id3327 . -380) (undo-tree-id3328 . -380) (undo-tree-id3329 . -380) (undo-tree-id3330 . -380) (undo-tree-id3331 . -380) (undo-tree-id3332 . -380) (undo-tree-id3333 . -380) (undo-tree-id3334 . -380) (undo-tree-id3335 . -380) (undo-tree-id3336 . -380) (undo-tree-id3337 . -380) (undo-tree-id3338 . -380) (undo-tree-id3339 . -380) (undo-tree-id3340 . -380) (undo-tree-id3341 . -380) (undo-tree-id3342 . -380) (undo-tree-id3343 . -380) (undo-tree-id3344 . -380) (undo-tree-id3345 . -380) (undo-tree-id3346 . -380) (undo-tree-id3347 . -380) (undo-tree-id3348 . -380) (undo-tree-id3349 . -380) (undo-tree-id3350 . -380) (undo-tree-id3351 . -380) (undo-tree-id3352 . -380) (undo-tree-id3353 . -380) (undo-tree-id3354 . -380) (undo-tree-id3355 . -380) (undo-tree-id3356 . -380) (undo-tree-id3357 . -380) (undo-tree-id3358 . -380) (undo-tree-id3359 . -380) (undo-tree-id3360 . -380) (undo-tree-id3361 . -380) (undo-tree-id3362 . -380) (undo-tree-id3363 . -380) (undo-tree-id3364 . -380) (undo-tree-id3365 . -380) (undo-tree-id3366 . -380) (undo-tree-id3367 . -380) (undo-tree-id3368 . -380) (undo-tree-id3369 . -380) (undo-tree-id3370 . -380) (undo-tree-id3371 . -380) (undo-tree-id3372 . -380) (undo-tree-id3373 . -380) (undo-tree-id3374 . -380) (undo-tree-id3375 . -380) (undo-tree-id3376 . -380) (undo-tree-id3377 . -380) (undo-tree-id3378 . -380) (undo-tree-id3379 . -380) (undo-tree-id3380 . -380) (undo-tree-id3381 . -380) (undo-tree-id3382 . -380) (undo-tree-id3383 . -380) (undo-tree-id3384 . -380) (undo-tree-id3385 . -380) (undo-tree-id3386 . -380) (undo-tree-id3387 . -380) (undo-tree-id3388 . -380) (undo-tree-id3389 . -380) (undo-tree-id3390 . -380) (undo-tree-id3391 . -380) (undo-tree-id3392 . -380) (undo-tree-id3393 . -380) (undo-tree-id3394 . -380) (undo-tree-id3395 . -380) (undo-tree-id3396 . -380) (undo-tree-id3397 . -380) (undo-tree-id3398 . -380) (undo-tree-id3399 . -380) (undo-tree-id3400 . -380) (undo-tree-id3401 . -380) (undo-tree-id3402 . -380) (undo-tree-id3403 . -380) (undo-tree-id3404 . -380) (undo-tree-id3405 . -380) (undo-tree-id3406 . -380) (undo-tree-id3407 . -380) (undo-tree-id3408 . -380) (undo-tree-id3409 . -380) (undo-tree-id3410 . -380) (undo-tree-id3411 . -380) (undo-tree-id3412 . -380) (undo-tree-id3413 . -380) (undo-tree-id3414 . -380) (undo-tree-id3415 . -380) (undo-tree-id3416 . -380) (undo-tree-id3417 . -380) (undo-tree-id3418 . -380) (undo-tree-id3419 . -380) (undo-tree-id3420 . -380) (undo-tree-id3421 . -380) (undo-tree-id3422 . -380) (undo-tree-id3423 . -380) (undo-tree-id3424 . -380) (undo-tree-id3425 . -380) (undo-tree-id3426 . -380) (undo-tree-id3427 . -380) (undo-tree-id3428 . -380) (undo-tree-id3429 . -380) (undo-tree-id3430 . -380) (undo-tree-id3431 . -380) (undo-tree-id3432 . -380) (undo-tree-id3433 . -380) (undo-tree-id3434 . -380) (undo-tree-id3435 . -380) (undo-tree-id3436 . -380) (undo-tree-id3437 . -380) (undo-tree-id3438 . -380) (undo-tree-id3439 . -380) (undo-tree-id3440 . -380) (undo-tree-id3441 . -380) (undo-tree-id3442 . -380) (undo-tree-id3443 . -380) (undo-tree-id3444 . -380) (undo-tree-id3445 . -380) (undo-tree-id3446 . -380) (undo-tree-id3447 . -380) (undo-tree-id3448 . -380) (undo-tree-id3449 . -380) (undo-tree-id3450 . -380) (undo-tree-id3451 . -380) (undo-tree-id3452 . -380) (undo-tree-id3453 . -380) (undo-tree-id3454 . -380) (undo-tree-id3455 . -380) (undo-tree-id3456 . -380) (undo-tree-id3457 . -380) (undo-tree-id3458 . -380) (undo-tree-id3459 . -380) (undo-tree-id3460 . -380) (undo-tree-id3461 . -380) (undo-tree-id3462 . -380) (undo-tree-id3463 . -380) (undo-tree-id3464 . -380) (undo-tree-id3465 . -380) (undo-tree-id3466 . -380) (undo-tree-id3467 . -380) (undo-tree-id3468 . -380) (undo-tree-id3469 . -380) (undo-tree-id3470 . -380) (undo-tree-id3471 . -711) (undo-tree-id3472 . -711) (undo-tree-id3473 . -711) (undo-tree-id3474 . -711) (undo-tree-id3475 . -711) (undo-tree-id3476 . -711) (undo-tree-id3477 . -813) (undo-tree-id3478 . -813) (undo-tree-id3479 . -866) (undo-tree-id3480 . -866) (undo-tree-id3481 . -866) (undo-tree-id3482 . -866) (undo-tree-id3483 . -380) (undo-tree-id3484 . -380) (undo-tree-id3485 . -380) (undo-tree-id3486 . -380) (undo-tree-id3487 . -380) (undo-tree-id3488 . -380) (undo-tree-id3489 . -380) (undo-tree-id3490 . -380) (undo-tree-id3491 . -380) (undo-tree-id3492 . -379) (undo-tree-id3493 . -379) (undo-tree-id3494 . -380) (undo-tree-id3495 . -380) (undo-tree-id3496 . -380) (undo-tree-id3497 . -380) (undo-tree-id3498 . -380) (undo-tree-id3499 . -380) (undo-tree-id3500 . -380) (undo-tree-id3501 . -380) (undo-tree-id3502 . -711) (undo-tree-id3503 . -711) (undo-tree-id3504 . -711) (undo-tree-id3505 . -711) (undo-tree-id3506 . -711) (undo-tree-id3507 . -711) (undo-tree-id3508 . -813) (undo-tree-id3509 . -813) (undo-tree-id3510 . -866) (undo-tree-id3511 . -866) (undo-tree-id3512 . -866) (undo-tree-id3513 . -866) (undo-tree-id3514 . -380) (undo-tree-id3515 . -380) (undo-tree-id3516 . -380) (undo-tree-id3517 . -380) (undo-tree-id3518 . -380) (undo-tree-id3519 . -380) (undo-tree-id3520 . -380) (undo-tree-id3521 . -380) (undo-tree-id3522 . -380) (undo-tree-id3523 . -380) (undo-tree-id3524 . -380) (undo-tree-id3525 . -380) (undo-tree-id3526 . -380) (undo-tree-id3527 . -380) (undo-tree-id3528 . -380) (undo-tree-id3529 . -380) (undo-tree-id3530 . -380) (undo-tree-id3531 . -380) (undo-tree-id3532 . -380) (undo-tree-id3533 . -380) (undo-tree-id3534 . -380) (undo-tree-id3535 . -380) (undo-tree-id3536 . -380) (undo-tree-id3537 . -380) (undo-tree-id3538 . -380) (undo-tree-id3539 . -380) (undo-tree-id3540 . -380) (undo-tree-id3541 . -380) (undo-tree-id3542 . -380) (undo-tree-id3543 . -380) (undo-tree-id3544 . -380) (undo-tree-id3545 . -380) (undo-tree-id3546 . -380) (undo-tree-id3547 . -380) (undo-tree-id3548 . -380) (undo-tree-id3549 . -380) (undo-tree-id3550 . -380) (undo-tree-id3551 . -380) (undo-tree-id3552 . -711) (undo-tree-id3553 . -711) (undo-tree-id3554 . -711) (undo-tree-id3555 . -711) (undo-tree-id3556 . -711) (undo-tree-id3557 . -711) (undo-tree-id3558 . -813) (undo-tree-id3559 . -813) (undo-tree-id3560 . -866) (undo-tree-id3561 . -866) (undo-tree-id3562 . -866) (undo-tree-id3563 . -866) (undo-tree-id3564 . -380) (undo-tree-id3565 . -380) (undo-tree-id3566 . -380) (undo-tree-id3567 . -380) (undo-tree-id3568 . -380) (undo-tree-id3569 . -380) (undo-tree-id3570 . -380) (undo-tree-id3571 . -380) (undo-tree-id3572 . -380) (undo-tree-id3573 . -380) (undo-tree-id3574 . -380) (undo-tree-id3575 . -380) (undo-tree-id3576 . -380) (undo-tree-id3577 . -380) (undo-tree-id3578 . -380) (undo-tree-id3579 . -380) (undo-tree-id3580 . -380) (undo-tree-id3581 . -380) (undo-tree-id3582 . -380) (undo-tree-id3583 . -380) (undo-tree-id3584 . -380) (undo-tree-id3585 . -380) (undo-tree-id3586 . -380) (undo-tree-id3587 . -380) (undo-tree-id3588 . -380) (undo-tree-id3589 . -380) (undo-tree-id3590 . -380) (undo-tree-id3591 . -380) (undo-tree-id3592 . -380) (undo-tree-id3593 . -380) (undo-tree-id3594 . -380) (undo-tree-id3595 . -380) (undo-tree-id3596 . -380) (undo-tree-id3597 . -380)) nil (25760 29848 71651 212000) 0 nil])
([nil nil ((#("np.random.seed(42)
" 0 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (fontified t)) . 381) (undo-tree-id4284 . -18) (undo-tree-id4285 . -2) (undo-tree-id4286 . -19) (t 25760 29848 130333 591000)) nil (25760 29853 200104 418000) 0 nil])
([nil nil ((1 . 41659) (#("#!/usr/bin/env python

import sklearn
import tensorflow as tf
from tensorflow import keras
import numpy as np
from pathlib import Path

# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rc(\"axes\", labelsize=14)
mpl.rc(\"xtick\", labelsize=12)
mpl.rc(\"ytick\", labelsize=12)



n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]


# In[4]:


X_train.shape, y_train.shape


# In[5]:


def plot_series(
    series, y=None, y_pred=None, x_label=\"$t$\", y_label=\"$x(t)$\", legend=True
):
    plt.plot(series, \".-\")
    if y is not None:
        plt.plot(n_steps, y, \"bo\", label=\"Target\")
    if y_pred is not None:
        plt.plot(n_steps, y_pred, \"rx\", markersize=10, label=\"Prediction\")
    plt.grid(True)
    if x_label:
        plt.xlabel(x_label, fontsize=16)
    if y_label:
        plt.ylabel(y_label, fontsize=16, rotation=0)
    plt.hlines(0, 0, 100, linewidth=1)
    plt.axis([0, n_steps + 1, -1, 1])
    if legend and (y or y_pred):
        plt.legend(fontsize=14, loc=\"upper left\")


fig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))
for col in range(3):
    plt.sca(axes[col])
    plot_series(
        X_valid[col, :, 0],
        y_valid[col, 0],
        y_label=(\"$x(t)$\" if col == 0 else None),
        legend=(col == 0),
    )
save_fig(\"time_series_plot\")
plt.show()


# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.

# ## Computing Some Baselines

# Naive predictions (just predict the last observed value):

# In[6]:


y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))


# In[7]:


plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Linear predictions:

# In[8]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(1)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[9]:


model.evaluate(X_valid, y_valid)


# In[10]:


def plot_learning_curves(loss, val_loss):
    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")
    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")
    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    plt.axis([1, 20, 0, 0.05])
    plt.legend(fontsize=14)
    plt.xlabel(\"Epochs\")
    plt.ylabel(\"Loss\")
    plt.grid(True)


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[11]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Using a Simple RNN

# In[12]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([keras.layers.SimpleRNN(1, input_shape=[None, 1])])

optimizer = keras.optimizers.Adam(learning_rate=0.005)
model.compile(loss=\"mse\", optimizer=optimizer)
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[13]:


model.evaluate(X_valid, y_valid)


# In[14]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[15]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Deep RNNs

# In[16]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[17]:


model.evaluate(X_valid, y_valid)


# In[18]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[19]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Make the second `SimpleRNN` layer return only the last output:

# In[20]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[21]:


model.evaluate(X_valid, y_valid)


# In[22]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[23]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Forecasting Several Steps Ahead

# In[24]:


np.random.seed(43)  # not 42, as it would give the first series in the train set

series = generate_time_series(1, n_steps + 10)
X_new, Y_new = series[:, :n_steps], series[:, n_steps:]
X = X_new
for step_ahead in range(10):
    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:]


# In[25]:


Y_pred.shape


# In[26]:


def plot_multiple_forecasts(X, Y, Y_pred):
    n_steps = X.shape[1]
    ahead = Y.shape[1]
    plot_series(X[0, :, 0])
    plt.plot(np.arange(n_steps, n_steps + ahead), Y[0, :, 0], \"bo-\", label=\"Actual\")
    plt.plot(
        np.arange(n_steps, n_steps + ahead),
        Y_pred[0, :, 0],
        \"rx-\",
        label=\"Forecast\",
        markersize=10,
    )
    plt.axis([0, n_steps + ahead, -1, 1])
    plt.legend(fontsize=14)


plot_multiple_forecasts(X_new, Y_new, Y_pred)
save_fig(\"forecast_ahead_plot\")
plt.show()


# Now let's use this model to predict the next 10 values. We first need to regenerate the sequences with 9 more time steps.

# In[27]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, Y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, Y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, Y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


# Now let's predict the next 10 values one by one:

# In[28]:


X = X_valid
for step_ahead in range(10):
    y_pred_one = model.predict(X)[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:, 0]


# In[29]:


Y_pred.shape


# In[30]:


np.mean(keras.metrics.mean_squared_error(Y_valid, Y_pred))


# Let's compare this performance with some baselines: naive predictions and a simple linear model:

# In[31]:


Y_naive_pred = np.tile(
    X_valid[:, -1], 10
)  # take the last time step value, and repeat it 10 times
np.mean(keras.metrics.mean_squared_error(Y_valid, Y_naive_pred))


# In[32]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(10)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Now let's create an RNN that predicts all 10 next values at once:

# In[33]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(10),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[34]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, -10:, :]
Y_pred = model.predict(X_new)[..., np.newaxis]


# In[35]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's create an RNN that predicts the next 10 steps at each time step. That is, instead of just forecasting time steps 50 to 59 based on time steps 0 to 49, it will forecast time steps 1 to 10 at time step 0, then time steps 2 to 11 at time step 1, and so on, and finally it will forecast time steps 50 to 59 at the last time step. Notice that the model is causal: when it makes predictions at any time step, it can only see past time steps.

# In[36]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]
Y = np.empty((10000, n_steps, 10))
for step_ahead in range(1, 10 + 1):
    Y[..., step_ahead - 1] = series[..., step_ahead : step_ahead + n_steps, 0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]


# In[37]:


X_train.shape, Y_train.shape


# In[38]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)


def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])


model.compile(
    loss=\"mse\",
    optimizer=keras.optimizers.Adam(learning_rate=0.01),
    metrics=[last_time_step_mse],
)
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[39]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[40]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # Deep RNN with Batch Norm

# In[41]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.BatchNormalization(),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.BatchNormalization(),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Deep RNNs with Layer Norm

# In[42]:


from tensorflow.keras.layers import LayerNormalization


# In[43]:


class LNSimpleRNNCell(keras.layers.Layer):
    def __init__(self, units, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.state_size = units
        self.output_size = units
        self.simple_rnn_cell = keras.layers.SimpleRNNCell(units, activation=None)
        self.layer_norm = LayerNormalization()
        self.activation = keras.activations.get(activation)

    def get_initial_state(self, inputs=None, batch_size=None, dtype=None):
        if inputs is not None:
            batch_size = tf.shape(inputs)[0]
            dtype = inputs.dtype
        return [tf.zeros([batch_size, self.state_size], dtype=dtype)]

    def call(self, inputs, states):
        outputs, new_states = self.simple_rnn_cell(inputs, states)
        norm_outputs = self.activation(self.layer_norm(outputs))
        return norm_outputs, [norm_outputs]


# In[44]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.RNN(
            LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]
        ),
        keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Creating a Custom RNN Class

# In[45]:


class MyRNN(keras.layers.Layer):
    def __init__(self, cell, return_sequences=False, **kwargs):
        super().__init__(**kwargs)
        self.cell = cell
        self.return_sequences = return_sequences
        self.get_initial_state = getattr(
            self.cell, \"get_initial_state\", self.fallback_initial_state
        )

    def fallback_initial_state(self, inputs):
        batch_size = tf.shape(inputs)[0]
        return [tf.zeros([batch_size, self.cell.state_size], dtype=inputs.dtype)]

    @tf.function
    def call(self, inputs):
        states = self.get_initial_state(inputs)
        shape = tf.shape(inputs)
        batch_size = shape[0]
        n_steps = shape[1]
        sequences = tf.TensorArray(
            inputs.dtype, size=(n_steps if self.return_sequences else 0)
        )
        outputs = tf.zeros(
            shape=[batch_size, self.cell.output_size], dtype=inputs.dtype
        )
        for step in tf.range(n_steps):
            outputs, states = self.cell(inputs[:, step], states)
            if self.return_sequences:
                sequences = sequences.write(step, outputs)
        if self.return_sequences:
            return tf.transpose(sequences.stack(), [1, 0, 2])
        else:
            return outputs


# In[46]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        MyRNN(LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]),
        MyRNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # LSTMs

# In[47]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.LSTM(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[48]:


model.evaluate(X_valid, Y_valid)


# In[49]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[50]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[51]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # GRUs

# In[52]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.GRU(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[53]:


model.evaluate(X_valid, Y_valid)


# In[54]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[55]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[56]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# ## Using One-Dimensional Convolutional Layers to Process Sequences

# ```
# 1D conv layer with kernel size 4, stride 2, VALID padding:
#
#               |-----2-----|     |-----5---...------|     |-----23----|
#         |-----1-----|     |-----4-----|   ...      |-----22----|
#   |-----0----|      |-----3-----|     |---...|-----21----|
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 42 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 43 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 52 53 54 55 56 57 58 59
#
# Output:
#
# X:     0/3   2/5   4/7   6/9   8/11 10/13 .../43 42/45 44/47 46/49
# Y:     4/13  6/15  8/17 10/19 12/21 14/23 .../53 46/55 48/57 50/59
# ```

# In[57]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.Conv1D(
            filters=20, kernel_size=4, strides=2, padding=\"valid\", input_shape=[None, 1]
        ),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(
    X_train, Y_train[:, 3::2], epochs=20, validation_data=(X_valid, Y_valid[:, 3::2])
)


# ## WaveNet

# ```
# C2  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\.../\\ /\\ /\\ /\\ /\\ /\\
#    \\  /  \\  /  \\  /  \\  /  \\  /  \\  /  \\       /  \\  /  \\  /  \\
#      /    \\      /    \\      /    \\                 /    \\
# C1  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\  /\\ /.../\\ /\\ /\\ /\\ /\\ /\\ /\\
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 53 54 55 56 57 58 59
# ```

# In[58]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape=[None, 1]))
for rate in (1, 2, 4, 8) * 2:
    model.add(
        keras.layers.Conv1D(
            filters=20,
            kernel_size=2,
            padding=\"causal\",
            activation=\"relu\",
            dilation_rate=rate,
        )
    )
model.add(keras.layers.Conv1D(filters=10, kernel_size=1))
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Here is the original WaveNet defined in the paper: it uses Gated Activation Units instead of ReLU and parametrized skip connections, plus it pads with zeros on the left to avoid getting shorter and shorter sequences:

# In[59]:


class GatedActivationUnit(keras.layers.Layer):
    def __init__(self, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.activation = keras.activations.get(activation)

    def call(self, inputs):
        n_filters = inputs.shape[-1] // 2
        linear_output = self.activation(inputs[..., :n_filters])
        gate = keras.activations.sigmoid(inputs[..., n_filters:])
        return self.activation(linear_output) * gate


# In[60]:


def wavenet_residual_block(inputs, n_filters, dilation_rate):
    z = keras.layers.Conv1D(
        2 * n_filters, kernel_size=2, padding=\"causal\", dilation_rate=dilation_rate
    )(inputs)
    z = GatedActivationUnit()(z)
    z = keras.layers.Conv1D(n_filters, kernel_size=1)(z)
    return keras.layers.Add()([z, inputs]), z


# In[61]:


keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

n_layers_per_block = 3  # 10 in the paper
n_blocks = 1  # 3 in the paper
n_filters = 32  # 128 in the paper
n_outputs = 10  # 256 in the paper

inputs = keras.layers.Input(shape=[None, 1])
z = keras.layers.Conv1D(n_filters, kernel_size=2, padding=\"causal\")(inputs)
skip_to_last = []
for dilation_rate in [2 ** i for i in range(n_layers_per_block)] * n_blocks:
    z, skip = wavenet_residual_block(z, n_filters, dilation_rate)
    skip_to_last.append(skip)
z = keras.activations.relu(keras.layers.Add()(skip_to_last))
z = keras.layers.Conv1D(n_filters, kernel_size=1, activation=\"relu\")(z)
Y_proba = keras.layers.Conv1D(n_outputs, kernel_size=1, activation=\"softmax\")(z)

model = keras.models.Model(inputs=[inputs], outputs=[Y_proba])


# In[62]:


model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=2, validation_data=(X_valid, Y_valid))


# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.

# # Exercise solutions

# ## 1. to 8.

# See Appendix A.

# ## 9. Tackling the SketchRNN Dataset

# _Exercise: Train a classification model for the SketchRNN dataset, available in TensorFlow Datasets._

# The dataset is not available in TFDS yet, the [pull request](https://github.com/tensorflow/datasets/pull/361) is still work in progress. Luckily, the data is conveniently available as TFRecords, so let's download it (it might take a while, as it's about 1 GB large, with 3,450,000 training sketches and 345,000 test sketches):

# In[63]:


DOWNLOAD_ROOT = \"http://download.tensorflow.org/data/\"
FILENAME = \"quickdraw_tutorial_dataset_v1.tar.gz\"
filepath = keras.utils.get_file(
    FILENAME, DOWNLOAD_ROOT + FILENAME, cache_subdir=\"datasets/quickdraw\", extract=True
)


# In[64]:


quickdraw_dir = Path(filepath).parent
train_files = sorted([str(path) for path in quickdraw_dir.glob(\"training.tfrecord-*\")])
eval_files = sorted([str(path) for path in quickdraw_dir.glob(\"eval.tfrecord-*\")])


# In[65]:


train_files


# In[66]:


eval_files


# In[67]:


with open(quickdraw_dir / \"eval.tfrecord.classes\") as test_classes_file:
    test_classes = test_classes_file.readlines()

with open(quickdraw_dir / \"training.tfrecord.classes\") as train_classes_file:
    train_classes = train_classes_file.readlines()


# In[68]:


assert train_classes == test_classes
class_names = [name.strip().lower() for name in train_classes]


# In[69]:


sorted(class_names)


# In[70]:


def parse(data_batch):
    feature_descriptions = {
        \"ink\": tf.io.VarLenFeature(dtype=tf.float32),
        \"shape\": tf.io.FixedLenFeature([2], dtype=tf.int64),
        \"class_index\": tf.io.FixedLenFeature([1], dtype=tf.int64),
    }
    examples = tf.io.parse_example(data_batch, feature_descriptions)
    flat_sketches = tf.sparse.to_dense(examples[\"ink\"])
    sketches = tf.reshape(flat_sketches, shape=[tf.size(data_batch), -1, 3])
    lengths = examples[\"shape\"][:, 0]
    labels = examples[\"class_index\"][:, 0]
    return sketches, lengths, labels


# In[71]:


def quickdraw_dataset(
    filepaths,
    batch_size=32,
    shuffle_buffer_size=None,
    n_parse_threads=5,
    n_read_threads=5,
    cache=False,
):
    dataset = tf.data.TFRecordDataset(filepaths, num_parallel_reads=n_read_threads)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(parse, num_parallel_calls=n_parse_threads)
    return dataset.prefetch(1)


# In[72]:


train_set = quickdraw_dataset(train_files, shuffle_buffer_size=10000)
valid_set = quickdraw_dataset(eval_files[:5])
test_set = quickdraw_dataset(eval_files[5:])


# In[73]:


for sketches, lengths, labels in train_set.take(1):
    print(\"sketches =\", sketches)
    print(\"lengths =\", lengths)
    print(\"labels =\", labels)


# In[74]:


def draw_sketch(sketch, label=None):
    origin = np.array([[0.0, 0.0, 0.0]])
    sketch = np.r_[origin, sketch]
    stroke_end_indices = np.argwhere(sketch[:, -1] == 1.0)[:, 0]
    coordinates = np.cumsum(sketch[:, :2], axis=0)
    strokes = np.split(coordinates, stroke_end_indices + 1)
    title = class_names[label.numpy()] if label is not None else \"Try to guess\"
    plt.title(title)
    plt.plot(coordinates[:, 0], -coordinates[:, 1], \"y:\")
    for stroke in strokes:
        plt.plot(stroke[:, 0], -stroke[:, 1], \".-\")
    plt.axis(\"off\")


def draw_sketches(sketches, lengths, labels):
    n_sketches = len(sketches)
    n_cols = 4
    n_rows = (n_sketches - 1) // n_cols + 1
    plt.figure(figsize=(n_cols * 3, n_rows * 3.5))
    for index, sketch, length, label in zip(
        range(n_sketches), sketches, lengths, labels
    ):
        plt.subplot(n_rows, n_cols, index + 1)
        draw_sketch(sketch[:length], label)
    plt.show()


for sketches, lengths, labels in train_set.take(1):
    draw_sketches(sketches, lengths, labels)


# Most sketches are composed of less than 100 points:

# In[75]:


lengths = np.concatenate([lengths for _, lengths, _ in train_set.take(1000)])
plt.hist(lengths, bins=150, density=True)
plt.axis([0, 200, 0, 0.03])
plt.xlabel(\"length\")
plt.ylabel(\"density\")
plt.show()


# In[76]:


def crop_long_sketches(dataset, max_length=100):
    return dataset.map(lambda inks, lengths, labels: (inks[:, :max_length], labels))


cropped_train_set = crop_long_sketches(train_set)
cropped_valid_set = crop_long_sketches(valid_set)
cropped_test_set = crop_long_sketches(test_set)


# In[77]:


model = keras.models.Sequential(
    [
        keras.layers.Conv1D(32, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(64, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(128, kernel_size=3, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(128, return_sequences=True),
        keras.layers.LSTM(128),
        keras.layers.Dense(len(class_names), activation=\"softmax\"),
    ]
)
optimizer = keras.optimizers.SGD(learning_rate=1e-2, clipnorm=1.0)
model.compile(
    loss=\"sparse_categorical_crossentropy\",
    optimizer=optimizer,
    metrics=[\"accuracy\", \"sparse_top_k_categorical_accuracy\"],
)
history = model.fit(cropped_train_set, epochs=2, validation_data=cropped_valid_set)


# In[78]:


y_test = np.concatenate([labels for _, _, labels in test_set])
y_probas = model.predict(test_set)


# In[79]:


np.mean(keras.metrics.sparse_top_k_categorical_accuracy(y_test, y_probas))


# In[80]:


n_new = 10
Y_probas = model.predict(sketches)
top_k = tf.nn.top_k(Y_probas, k=5)
for index in range(n_new):
    plt.figure(figsize=(3, 3.5))
    draw_sketch(sketches[index])
    plt.show()
    print(\"Top-5 predictions:\".format(index + 1))
    for k in range(5):
        class_name = class_names[top_k.indices[index, k]]
        proba = 100 * top_k.values[index, k]
        print(\"  {}. {} {:.3f}%\".format(k + 1, class_name, proba))
    print(\"Answer: {}\".format(class_names[labels[index].numpy()]))


# In[81]:


model.save(\"my_sketchrnn\")


# ## 10. Bach Chorales
# _Exercise: Download the [Bach chorales](https://homl.info/bach) dataset and unzip it. It is composed of 382 chorales composed by Johann Sebastian Bach. Each chorale is 100 to 640 time steps long, and each time step contains 4 integers, where each integer corresponds to a note's index on a piano (except for the value 0, which means that no note is played). Train a model—recurrent, convolutional, or both—that can predict the next time step (four notes), given a sequence of time steps from a chorale. Then use this model to generate Bach-like music, one note at a time: you can do this by giving the model the start of a chorale and asking it to predict the next time step, then appending these time steps to the input sequence and asking the model for the next note, and so on. Also make sure to check out [Google's Coconet model](https://homl.info/coconet), which was used for a nice [Google doodle about Bach](https://www.google.com/doodles/celebrating-johann-sebastian-bach)._
#
#

# In[82]:


DOWNLOAD_ROOT = (
    \"https://github.com/ageron/handson-ml2/raw/master/datasets/jsb_chorales/\"
)
FILENAME = \"jsb_chorales.tgz\"
filepath = keras.utils.get_file(
    FILENAME,
    DOWNLOAD_ROOT + FILENAME,
    cache_subdir=\"datasets/jsb_chorales\",
    extract=True,
)


# In[83]:


jsb_chorales_dir = Path(filepath).parent
train_files = sorted(jsb_chorales_dir.glob(\"train/chorale_*.csv\"))
valid_files = sorted(jsb_chorales_dir.glob(\"valid/chorale_*.csv\"))
test_files = sorted(jsb_chorales_dir.glob(\"test/chorale_*.csv\"))


# In[84]:


import pandas as pd


def load_chorales(filepaths):
    return [pd.read_csv(filepath).values.tolist() for filepath in filepaths]


train_chorales = load_chorales(train_files)
valid_chorales = load_chorales(valid_files)
test_chorales = load_chorales(test_files)


# In[85]:


train_chorales[0]


# Notes range from 36 (C1 = C on octave 1) to 81 (A5 = A on octave 5), plus 0 for silence:

# In[86]:


notes = set()
for chorales in (train_chorales, valid_chorales, test_chorales):
    for chorale in chorales:
        for chord in chorale:
            notes |= set(chord)

n_notes = len(notes)
min_note = min(notes - {0})
max_note = max(notes)

assert min_note == 36
assert max_note == 81


# Let's write a few functions to listen to these chorales (you don't need to understand the details here, and in fact there are certainly simpler ways to do this, for example using MIDI players, but I just wanted to have a bit of fun writing a synthesizer):

# In[87]:


from IPython.display import Audio


def notes_to_frequencies(notes):
    # Frequency doubles when you go up one octave; there are 12 semi-tones
    # per octave; Note A on octave 4 is 440 Hz, and it is note number 69.
    return 2 ** ((np.array(notes) - 69) / 12) * 440


def frequencies_to_samples(frequencies, tempo, sample_rate):
    note_duration = 60 / tempo  # the tempo is measured in beats per minutes
    # To reduce click sound at every beat, we round the frequencies to try to
    # get the samples close to zero at the end of each note.
    frequencies = np.round(note_duration * frequencies) / note_duration
    n_samples = int(note_duration * sample_rate)
    time = np.linspace(0, note_duration, n_samples)
    sine_waves = np.sin(2 * np.pi * frequencies.reshape(-1, 1) * time)
    # Removing all notes with frequencies ≤ 9 Hz (includes note 0 = silence)
    sine_waves *= (frequencies > 9.0).reshape(-1, 1)
    return sine_waves.reshape(-1)


def chords_to_samples(chords, tempo, sample_rate):
    freqs = notes_to_frequencies(chords)
    freqs = np.r_[freqs, freqs[-1:]]  # make last note a bit longer
    merged = np.mean(
        [frequencies_to_samples(melody, tempo, sample_rate) for melody in freqs.T],
        axis=0,
    )
    n_fade_out_samples = sample_rate * 60 // tempo  # fade out last note
    fade_out = np.linspace(1.0, 0.0, n_fade_out_samples) ** 2
    merged[-n_fade_out_samples:] *= fade_out
    return merged


def play_chords(chords, tempo=160, amplitude=0.1, sample_rate=44100, filepath=None):
    samples = amplitude * chords_to_samples(chords, tempo, sample_rate)
    if filepath:
        from scipy.io import wavfile

        samples = (2 ** 15 * samples).astype(np.int16)
        wavfile.write(filepath, sample_rate, samples)
        return display(Audio(filepath))
    else:
        return display(Audio(samples, rate=sample_rate))


# Now let's listen to a few chorales:

# In[88]:


for index in range(3):
    play_chords(train_chorales[index])


# Divine! :)

# In order to be able to generate new chorales, we want to train a model that can predict the next chord given all the previous chords. If we naively try to predict the next chord in one shot, predicting all 4 notes at once, we run the risk of getting notes that don't go very well together (believe me, I tried). It's much better and simpler to predict one note at a time. So we will need to preprocess every chorale, turning each chord into an arpegio (i.e., a sequence of notes rather than notes played simultaneuously). So each chorale will be a long sequence of notes (rather than chords), and we can just train a model that can predict the next note given all the previous notes. We will use a sequence-to-sequence approach, where we feed a window to the neural net, and it tries to predict that same window shifted one time step into the future.
#
# We will also shift the values so that they range from 0 to 46, where 0 represents silence, and values 1 to 46 represent notes 36 (C1) to 81 (A5).
#
# And we will train the model on windows of 128 notes (i.e., 32 chords).
#
# Since the dataset fits in memory, we could preprocess the chorales in RAM using any Python code we like, but I will demonstrate here how to do all the preprocessing using tf.data (there will be more details about creating windows using tf.data in the next chapter).

# In[89]:


def create_target(batch):
    X = batch[:, :-1]
    Y = batch[:, 1:]  # predict next note in each arpegio, at each step
    return X, Y


def preprocess(window):
    window = tf.where(window == 0, window, window - min_note + 1)  # shift values
    return tf.reshape(window, [-1])  # convert to arpegio


def bach_dataset(
    chorales,
    batch_size=32,
    shuffle_buffer_size=None,
    window_size=32,
    window_shift=16,
    cache=True,
):
    def batch_window(window):
        return window.batch(window_size + 1)

    def to_windows(chorale):
        dataset = tf.data.Dataset.from_tensor_slices(chorale)
        dataset = dataset.window(window_size + 1, window_shift, drop_remainder=True)
        return dataset.flat_map(batch_window)

    chorales = tf.ragged.constant(chorales, ragged_rank=1)
    dataset = tf.data.Dataset.from_tensor_slices(chorales)
    dataset = dataset.flat_map(to_windows).map(preprocess)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(create_target)
    return dataset.prefetch(1)


# Now let's create the training set, the validation set and the test set:

# In[90]:


train_set = bach_dataset(train_chorales, shuffle_buffer_size=1000)
valid_set = bach_dataset(valid_chorales)
test_set = bach_dataset(test_chorales)


# Now let's create the model:
#
# * We could feed the note values directly to the model, as floats, but this would probably not give good results. Indeed, the relationships between notes are not that simple: for example, if you replace a C3 with a C4, the melody will still sound fine, even though these notes are 12 semi-tones apart (i.e., one octave). Conversely, if you replace a C3 with a C\\#3, it's very likely that the chord will sound horrible, despite these notes being just next to each other. So we will use an `Embedding` layer to convert each note to a small vector representation (see Chapter 16 for more details on embeddings). We will use 5-dimensional embeddings, so the output of this first layer will have a shape of `[batch_size, window_size, 5]`.
# * We will then feed this data to a small WaveNet-like neural network, composed of a stack of 4 `Conv1D` layers with doubling dilation rates. We will intersperse these layers with `BatchNormalization` layers for faster better convergence.
# * Then one `LSTM` layer to try to capture long-term patterns.
# * And finally a `Dense` layer to produce the final note probabilities. It will predict one probability for each chorale in the batch, for each time step, and for each possible note (including silence). So the output shape will be `[batch_size, window_size, 47]`.

# In[91]:


n_embedding_dims = 5

model = keras.models.Sequential(
    [
        keras.layers.Embedding(
            input_dim=n_notes, output_dim=n_embedding_dims, input_shape=[None]
        ),
        keras.layers.Conv1D(32, kernel_size=2, padding=\"causal\", activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            48, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=2
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            64, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=4
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            96, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=8
        ),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(256, return_sequences=True),
        keras.layers.Dense(n_notes, activation=\"softmax\"),
    ]
)

model.summary()


# Now we're ready to compile and train the model!

# In[92]:


optimizer = keras.optimizers.Nadam(learning_rate=1e-3)
model.compile(
    loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"]
)
model.fit(train_set, epochs=20, validation_data=valid_set)


# I have not done much hyperparameter search, so feel free to iterate on this model now and try to optimize it. For example, you could try removing the `LSTM` layer and replacing it with `Conv1D` layers. You could also play with the number of layers, the learning rate, the optimizer, and so on.

# Once you're satisfied with the performance of the model on the validation set, you can save it and evaluate it one last time on the test set:

# In[93]:


model.save(\"my_bach_model.h5\")
model.evaluate(test_set)


# **Note:** There's no real need for a test set in this exercise, since we will perform the final evaluation by just listening to the music produced by the model. So if you want, you can add the test set to the train set, and train the model again, hopefully getting a slightly better model.

# Now let's write a function that will generate a new chorale. We will give it a few seed chords, it will convert them to arpegios (the format expected by the model), and use the model to predict the next note, then the next, and so on. In the end, it will group the notes 4 by 4 to create chords again, and return the resulting chorale.

# **Warning**: `model.predict_classes(X)` is deprecated. It is replaced with `np.argmax(model.predict(X), axis=-1)`.

# In[94]:


def generate_chorale(model, seed_chords, length):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            # next_note = model.predict_classes(arpegio)[:1, -1:]
            next_note = np.argmax(model.predict(arpegio), axis=-1)[:1, -1:]
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# To test this function, we need some seed chords. Let's use the first 8 chords of one of the test chorales (it's actually just 2 different chords, each played 4 times):

# In[95]:


seed_chords = test_chorales[2][:8]
play_chords(seed_chords, amplitude=0.2)


# Now we are ready to generate our first chorale! Let's ask the function to generate 56 more chords, for a total of 64 chords, i.e., 16 bars (assuming 4 chords per bar, i.e., a 4/4 signature):

# In[96]:


new_chorale = generate_chorale(model, seed_chords, 56)
play_chords(new_chorale)


# This approach has one major flaw: it is often too conservative. Indeed, the model will not take any risk, it will always choose the note with the highest score, and since repeating the previous note generally sounds good enough, it's the least risky option, so the algorithm will tend to make notes last longer and longer. Pretty boring. Plus, if you run the model multiple times, it will always generate the same melody.
#
# So let's spice things up a bit! Instead of always picking the note with the highest score, we will pick the next note randomly, according to the predicted probabilities. For example, if the model predicts a C3 with 75% probability, and a G3 with a 25% probability, then we will pick one of these two notes randomly, with these probabilities. We will also add a `temperature` parameter that will control how \"hot\" (i.e., daring) we want the system to feel. A high temperature will bring the predicted probabilities closer together, reducing the probability of the likely notes and increasing the probability of the unlikely ones.

# In[97]:


def generate_chorale_v2(model, seed_chords, length, temperature=1):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            next_note_probas = model.predict(arpegio)[0, -1:]
            rescaled_logits = tf.math.log(next_note_probas) / temperature
            next_note = tf.random.categorical(rescaled_logits, num_samples=1)
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# Let's generate 3 chorales using this new function: one cold, one medium, and one hot (feel free to experiment with other seeds, lengths and temperatures). The code saves each chorale to a separate file. You can run these cells over an over again until you generate a masterpiece!
#
# **Please share your most beautiful generated chorale with me on Twitter @aureliengeron, I would really appreciate it! :))**

# In[98]:


new_chorale_v2_cold = generate_chorale_v2(model, seed_chords, 56, temperature=0.8)
play_chords(new_chorale_v2_cold, filepath=\"bach_cold.wav\")


# In[99]:


new_chorale_v2_medium = generate_chorale_v2(model, seed_chords, 56, temperature=1.0)
play_chords(new_chorale_v2_medium, filepath=\"bach_medium.wav\")


# In[100]:


new_chorale_v2_hot = generate_chorale_v2(model, seed_chords, 56, temperature=1.5)
play_chords(new_chorale_v2_hot, filepath=\"bach_hot.wav\")


# Lastly, you can try a fun social experiment: send your friends a few of your favorite generated chorales, plus the real chorale, and ask them to guess which one is the real one!

# In[101]:


play_chords(test_chorales[2][:64], filepath=\"bach_test_4.wav\")
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 22 (face font-lock-comment-face fontified t) 22 23 (fontified t) 23 29 (face font-lock-keyword-face fontified t) 29 38 (fontified t) 38 44 (face font-lock-keyword-face fontified t) 44 56 (fontified t) 56 58 (face font-lock-keyword-face fontified t) 58 62 (fontified t) 62 66 (face font-lock-keyword-face fontified t) 66 78 (fontified t) 78 84 (face font-lock-keyword-face fontified t) 84 91 (fontified t) 91 97 (face font-lock-keyword-face fontified t) 97 104 (fontified t) 104 106 (face font-lock-keyword-face fontified t) 106 110 (fontified t) 110 114 (face font-lock-keyword-face fontified t) 114 123 (fontified t) 123 129 (face font-lock-keyword-face fontified t) 129 136 (fontified t) 136 138 (face font-lock-comment-delimiter-face fontified t) 138 188 (face font-lock-comment-face fontified t) 188 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-1-face) fontified t) 203 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-1-face) fontified t) 206 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-1-face) fontified t) 226 228 (fontified t) 228 229 (face (rainbow-delimiters-depth-1-face) fontified t) 229 231 (fontified t) 231 237 (face font-lock-keyword-face fontified t) 237 249 (fontified t) 249 251 (face font-lock-keyword-face fontified t) 251 256 (fontified t) 256 262 (face font-lock-keyword-face fontified t) 262 281 (fontified t) 281 283 (face font-lock-keyword-face fontified t) 283 295 (fontified t) 295 296 (face (rainbow-delimiters-depth-1-face) fontified t) 296 302 (face font-lock-string-face fontified t) 302 316 (fontified t) 316 317 (face (rainbow-delimiters-depth-1-face) fontified t) 317 324 (fontified t) 324 325 (face (rainbow-delimiters-depth-1-face) fontified t) 325 332 (face font-lock-string-face fontified t) 332 346 (fontified t) 346 347 (face (rainbow-delimiters-depth-1-face) fontified t) 347 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-1-face) fontified t) 355 362 (face font-lock-string-face fontified t) 362 376 (fontified t) 376 377 (face (rainbow-delimiters-depth-1-face) fontified t) 377 380 (fontified t) 380 381 (fontified t) 381 388 (face font-lock-variable-name-face fontified t) 388 394 (fontified t) 394 400 (face font-lock-variable-name-face fontified t) 400 423 (fontified t) 423 424 (face (rainbow-delimiters-depth-1-face) fontified t) 424 442 (fontified t) 442 443 (face (rainbow-delimiters-depth-1-face) fontified t) 443 444 (fontified t) 444 451 (face font-lock-variable-name-face fontified t) 451 453 (fontified t) 453 460 (face font-lock-variable-name-face fontified t) 460 469 (fontified t) 469 470 (face (rainbow-delimiters-depth-1-face) fontified t) 470 481 (fontified t) 481 485 (fontified t) 485 486 (face (rainbow-delimiters-depth-1-face) fontified t) 486 494 (fontified t) 494 495 (face (rainbow-delimiters-depth-1-face) fontified t) 495 504 (fontified t) 504 505 (face (rainbow-delimiters-depth-1-face) fontified t) 505 506 (fontified t) 506 513 (face font-lock-variable-name-face fontified t) 513 515 (fontified t) 515 522 (face font-lock-variable-name-face fontified t) 522 531 (fontified t) 531 532 (face (rainbow-delimiters-depth-1-face) fontified t) 532 551 (fontified t) 551 552 (face (rainbow-delimiters-depth-1-face) fontified t) 552 560 (fontified t) 560 561 (face (rainbow-delimiters-depth-1-face) fontified t) 561 574 (fontified t) 574 575 (face (rainbow-delimiters-depth-1-face) fontified t) 575 576 (fontified t) 576 582 (face font-lock-variable-name-face fontified t) 582 584 (fontified t) 584 590 (face font-lock-variable-name-face fontified t) 590 599 (fontified t) 599 600 (face (rainbow-delimiters-depth-1-face) fontified t) 600 615 (fontified t) 615 616 (face (rainbow-delimiters-depth-1-face) fontified t) 616 624 (fontified t) 624 625 (face (rainbow-delimiters-depth-1-face) fontified t) 625 634 (fontified t) 634 635 (face (rainbow-delimiters-depth-1-face) fontified t) 635 638 (fontified t) 638 640 (face font-lock-comment-delimiter-face fontified t) 640 647 (face font-lock-comment-face fontified t) 647 680 (fontified t) 680 682 (face font-lock-comment-delimiter-face fontified t) 682 689 (face font-lock-comment-face fontified t) 689 691 (fontified t) 691 694 (face font-lock-keyword-face fontified t) 694 695 (fontified t) 695 706 (face font-lock-function-name-face fontified t) 706 707 (face (rainbow-delimiters-depth-1-face) fontified t) 707 722 (fontified t) 722 726 (face font-lock-constant-face fontified t) 726 735 (fontified t) 735 739 (face font-lock-constant-face fontified t) 739 749 (fontified t) 749 754 (face font-lock-string-face fontified t) 754 764 (fontified t) 764 772 (face font-lock-string-face fontified t) 772 781 (fontified t) 781 785 (face font-lock-constant-face fontified t) 785 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-1-face) fontified t) 787 801 (fontified t) 801 802 (face (rainbow-delimiters-depth-1-face) fontified t) 802 810 (fontified t) 810 814 (face font-lock-string-face fontified t) 814 815 (face (rainbow-delimiters-depth-1-face) fontified t) 815 820 (fontified t) 820 822 (face font-lock-keyword-face fontified t) 822 825 (fontified t) 825 827 (face font-lock-keyword-face fontified t) 827 828 (fontified t) 828 831 (face font-lock-keyword-face fontified t) 831 832 (fontified t) 832 836 (face font-lock-constant-face fontified t) 836 854 (fontified t) 854 855 (face (rainbow-delimiters-depth-1-face) fontified t) 855 867 (fontified t) 867 871 (face font-lock-string-face fontified t) 871 879 (fontified t) 879 881 (face font-lock-string-face fontified t) 881 887 (fontified t face font-lock-string-face) 887 888 (fontified t face (rainbow-delimiters-depth-1-face)) 888 889 (fontified t) 893 895 (face font-lock-keyword-face) 903 905 (face font-lock-keyword-face) 906 909 (face font-lock-keyword-face) 910 914 (face font-lock-constant-face) 932 933 (face (rainbow-delimiters-depth-1-face)) 950 954 (face font-lock-string-face) 977 989 (face font-lock-string-face) 989 990 (face (rainbow-delimiters-depth-1-face)) 1003 1004 (face (rainbow-delimiters-depth-1-face)) 1004 1006 (face font-lock-constant-face) 1006 1008 (face font-lock-constant-face) 1008 1009 (face (rainbow-delimiters-depth-1-face))) . 1) (undo-tree-id3959 . -380) (undo-tree-id3960 . -380) (undo-tree-id3961 . -380) (undo-tree-id3962 . -380) (undo-tree-id3963 . -380) (undo-tree-id3964 . -380) (undo-tree-id3965 . -380) (undo-tree-id3966 . -380) (undo-tree-id3967 . -380) (undo-tree-id3968 . -380) (undo-tree-id3969 . -380) (undo-tree-id3970 . -380) (undo-tree-id3971 . -380) (undo-tree-id3972 . -380) (undo-tree-id3973 . -380) (undo-tree-id3974 . -380) (undo-tree-id3975 . -380) (undo-tree-id3976 . -380) (undo-tree-id3977 . -380) (undo-tree-id3978 . -380) (undo-tree-id3979 . -380) (undo-tree-id3980 . -380) (undo-tree-id3981 . -380) (undo-tree-id3982 . -380) (undo-tree-id3983 . -380) (undo-tree-id3984 . -380) (undo-tree-id3985 . -380) (undo-tree-id3986 . -380) (undo-tree-id3987 . -380) (undo-tree-id3988 . -23) (undo-tree-id3989 . -29) (undo-tree-id3990 . -231) (undo-tree-id3991 . -237) (undo-tree-id3992 . -256) (undo-tree-id3993 . -262) (undo-tree-id3994 . -403) (undo-tree-id3995 . -423) (undo-tree-id3996 . -1568) (undo-tree-id3997 . -1576) (undo-tree-id3998 . -1689) (undo-tree-id3999 . -1698) (undo-tree-id4000 . -2447) (undo-tree-id4001 . -2454) (undo-tree-id4002 . -2714) (undo-tree-id4003 . -2718) (undo-tree-id4004 . -3288) (undo-tree-id4005 . -3289) (undo-tree-id4006 . -3471) (undo-tree-id4007 . -3478) (undo-tree-id4008 . -3935) (undo-tree-id4009 . -3936) (undo-tree-id4010 . -4160) (undo-tree-id4011 . -4167) (undo-tree-id4012 . -4674) (undo-tree-id4013 . -4675) (undo-tree-id4014 . -4872) (undo-tree-id4015 . -4879) (undo-tree-id4016 . -5274) (undo-tree-id4017 . -5277) (undo-tree-id4018 . -5288) (undo-tree-id4019 . -5308) (undo-tree-id4020 . -5798) (undo-tree-id4021 . -5804) (undo-tree-id4022 . -6079) (undo-tree-id4023 . -6087) (undo-tree-id4024 . -6199) (undo-tree-id4025 . -6209) (undo-tree-id4026 . -6303) (undo-tree-id4027 . -6323) (undo-tree-id4028 . -6967) (undo-tree-id4029 . -6973) (undo-tree-id4030 . -7456) (undo-tree-id4031 . -7463) (undo-tree-id4032 . -7710) (undo-tree-id4033 . -7711) (undo-tree-id4034 . -7909) (undo-tree-id4035 . -7916) (undo-tree-id4036 . -7962) (undo-tree-id4037 . -7982) (undo-tree-id4038 . -8245) (undo-tree-id4039 . -8249) (undo-tree-id4040 . -8671) (undo-tree-id4041 . -8691) (undo-tree-id4042 . -8940) (undo-tree-id4043 . -8941) (undo-tree-id4044 . -9246) (undo-tree-id4045 . -9247) (undo-tree-id4046 . -9695) (undo-tree-id4047 . -9702) (undo-tree-id4048 . -9748) (undo-tree-id4049 . -9768) (undo-tree-id4050 . -10163) (undo-tree-id4051 . -10164) (undo-tree-id4052 . -10531) (undo-tree-id4053 . -10538) (undo-tree-id4054 . -10586) (undo-tree-id4055 . -10590) (undo-tree-id4056 . -10934) (undo-tree-id4057 . -10938) (undo-tree-id4058 . -12016) (undo-tree-id4059 . -12023) (undo-tree-id4060 . -12570) (undo-tree-id4061 . -12571) (undo-tree-id4062 . -13501) (undo-tree-id4063 . -13502) (undo-tree-id4064 . -13783) (undo-tree-id4065 . -13790) (undo-tree-id4066 . -14251) (undo-tree-id4067 . -14258) (undo-tree-id4068 . -14451) (undo-tree-id4069 . -14471) (undo-tree-id4070 . -15116) (undo-tree-id4071 . -15123) (undo-tree-id4072 . -15316) (undo-tree-id4073 . -15336) (undo-tree-id4074 . -16445) (undo-tree-id4075 . -16446) (undo-tree-id4076 . -16817) (undo-tree-id4077 . -16818) (undo-tree-id4078 . -17910) (undo-tree-id4079 . -17917) (undo-tree-id4080 . -18000) (undo-tree-id4081 . -18005) (undo-tree-id4082 . -18779) (undo-tree-id4083 . -18792) (undo-tree-id4084 . -19698) (undo-tree-id4085 . -19699) (undo-tree-id4086 . -19926) (undo-tree-id4087 . -19933) (undo-tree-id4088 . -20017) (undo-tree-id4089 . -20018) (undo-tree-id4090 . -20595) (undo-tree-id4091 . -20597) (undo-tree-id4092 . -20699) (undo-tree-id4093 . -20702) (undo-tree-id4094 . -21176) (undo-tree-id4095 . -21183) (undo-tree-id4096 . -21316) (undo-tree-id4097 . -21324) (undo-tree-id4098 . -21410) (undo-tree-id4099 . -21411) (undo-tree-id4100 . -22687) (undo-tree-id4101 . -22701) (undo-tree-id4102 . -24781) (undo-tree-id4103 . -24787) (undo-tree-id4104 . -25801) (undo-tree-id4105 . -25818) (undo-tree-id4106 . -26234) (undo-tree-id4107 . -26235) (undo-tree-id4108 . -26678) (undo-tree-id4109 . -26683) (undo-tree-id4110 . -28137) (undo-tree-id4111 . -28143) (undo-tree-id4112 . -28510) (undo-tree-id4113 . -28513) (undo-tree-id4114 . -28902) (undo-tree-id4115 . -28912) (undo-tree-id4116 . -29096) (undo-tree-id4117 . -29100) (undo-tree-id4118 . -30316) (undo-tree-id4119 . -30317) (undo-tree-id4120 . -30621) (undo-tree-id4121 . -30625) (undo-tree-id4122 . -30879) (undo-tree-id4123 . -30886) (undo-tree-id4124 . -30929) (undo-tree-id4125 . -30936) (undo-tree-id4126 . -31180) (undo-tree-id4127 . -31183) (undo-tree-id4128 . -32030) (undo-tree-id4129 . -32040) (undo-tree-id4130 . -32258) (undo-tree-id4131 . -32263) (undo-tree-id4132 . -32700) (undo-tree-id4133 . -32706) (undo-tree-id4134 . -33154) (undo-tree-id4135 . -33158) (undo-tree-id4136 . -33974) (undo-tree-id4137 . -33979) (undo-tree-id4138 . -34704) (undo-tree-id4139 . -34712) (undo-tree-id4140 . -35012) (undo-tree-id4141 . -35016) (undo-tree-id4142 . -35474) (undo-tree-id4143 . -35478) (undo-tree-id4144 . -35622) (undo-tree-id4145 . -35635) (undo-tree-id4146 . -35789) (undo-tree-id4147 . -35802) (undo-tree-id4148 . -35956) (undo-tree-id4149 . -35969) (undo-tree-id4150 . -36375) (undo-tree-id4151 . -36383) (undo-tree-id4152 . -36527) (undo-tree-id4153 . -36532) (undo-tree-id4154 . -36825) (undo-tree-id4155 . -36826) (undo-tree-id4156 . -37040) (undo-tree-id4157 . -37041) (undo-tree-id4158 . -37333) (undo-tree-id4159 . -37334) (undo-tree-id4160 . -37671) (undo-tree-id4161 . -37673) (undo-tree-id4162 . -38346) (undo-tree-id4163 . -38347) (undo-tree-id4164 . -38603) (undo-tree-id4165 . -38611) (undo-tree-id4166 . -38893) (undo-tree-id4167 . -38898) (undo-tree-id4168 . -39319) (undo-tree-id4169 . -39326) (undo-tree-id4170 . -40598) (undo-tree-id4171 . -40601) (undo-tree-id4172 . -40878) (undo-tree-id4173 . -40891) (undo-tree-id4174 . -41021) (undo-tree-id4175 . -41022) (undo-tree-id4176 . -41177) (undo-tree-id4177 . -41178) (undo-tree-id4178 . -41340) (undo-tree-id4179 . -41341) (undo-tree-id4180 . -41481) (undo-tree-id4181 . -41489) (undo-tree-id4182 . -380) (undo-tree-id4183 . -380) (undo-tree-id4184 . -380) (undo-tree-id4185 . -380) (undo-tree-id4186 . -380) (undo-tree-id4187 . -380) (undo-tree-id4188 . -380) (undo-tree-id4189 . -380) (undo-tree-id4190 . -380) (undo-tree-id4191 . -380) (undo-tree-id4192 . -380) (undo-tree-id4193 . -380) (undo-tree-id4194 . -380) (undo-tree-id4195 . -380) (undo-tree-id4196 . -380) (undo-tree-id4197 . -380) (undo-tree-id4198 . -380) (undo-tree-id4199 . -380) (undo-tree-id4200 . -380) (undo-tree-id4201 . -380) (undo-tree-id4202 . -380) (undo-tree-id4203 . -380) (undo-tree-id4204 . -380) (undo-tree-id4205 . -380) (undo-tree-id4206 . -380) (undo-tree-id4207 . -380) (undo-tree-id4208 . -380) (undo-tree-id4209 . -380) (undo-tree-id4210 . -380) (undo-tree-id4211 . -380) (undo-tree-id4212 . -380) (undo-tree-id4213 . -380) (undo-tree-id4214 . -380) (undo-tree-id4215 . -380) (undo-tree-id4216 . -380) (undo-tree-id4217 . -380) (undo-tree-id4218 . -380) (undo-tree-id4219 . -380) (undo-tree-id4220 . -380) (undo-tree-id4221 . -380) (undo-tree-id4222 . -380) (undo-tree-id4223 . -380) (undo-tree-id4224 . -380) (undo-tree-id4225 . -380) (undo-tree-id4226 . -380) (undo-tree-id4227 . -380) (undo-tree-id4228 . -380) (undo-tree-id4229 . -380) (undo-tree-id4230 . -380) (undo-tree-id4231 . -380) (undo-tree-id4232 . -380) (undo-tree-id4233 . -380) (undo-tree-id4234 . -380) (undo-tree-id4235 . -380) (undo-tree-id4236 . -380) (undo-tree-id4237 . -380) (undo-tree-id4238 . -691) (undo-tree-id4239 . -691) (undo-tree-id4240 . -691) (undo-tree-id4241 . -691) (undo-tree-id4242 . -691) (undo-tree-id4243 . -691) (undo-tree-id4244 . -793) (undo-tree-id4245 . -793) (undo-tree-id4246 . -846) (undo-tree-id4247 . -846) (undo-tree-id4248 . -846) (undo-tree-id4249 . -846) (undo-tree-id4250 . -380) (undo-tree-id4251 . -380) (undo-tree-id4252 . -380) (undo-tree-id4253 . -380) (undo-tree-id4254 . -380) (undo-tree-id4255 . -380) (undo-tree-id4256 . -380) (undo-tree-id4257 . -380) (undo-tree-id4258 . -380) (undo-tree-id4259 . -380) (undo-tree-id4260 . -380) (undo-tree-id4261 . -380) (undo-tree-id4262 . -380) (undo-tree-id4263 . -380) (undo-tree-id4264 . -380) (undo-tree-id4265 . -380) (undo-tree-id4266 . -380) (undo-tree-id4267 . -380) (undo-tree-id4268 . -380) (undo-tree-id4269 . -380) (undo-tree-id4270 . -380) (undo-tree-id4271 . -380) (undo-tree-id4272 . -380) (undo-tree-id4273 . -380) (undo-tree-id4274 . -380) (undo-tree-id4275 . -380) (undo-tree-id4276 . -380) (undo-tree-id4277 . -380) (undo-tree-id4278 . -380) (undo-tree-id4279 . -380) (undo-tree-id4280 . -380) (undo-tree-id4281 . -380) (undo-tree-id4282 . -380) (undo-tree-id4283 . -380)) nil (25760 29853 200060 956000) 0 nil])
([nil nil ((49 . 52) (43 . 49) (#("i" 0 1 (fontified nil)) . -43) (43 . 44) (#("import" 0 6 (fontified nil)) . -43) (43 . 49) (#("im" 0 2 (fontified t)) . -43) (undo-tree-id5179 . -2) (undo-tree-id5180 . -2) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -2) (undo-tree-id5230 . -2) (undo-tree-id5231 . -2) (undo-tree-id5232 . -2) (undo-tree-id5233 . -2) (undo-tree-id5234 . -2) (undo-tree-id5235 . -2) (undo-tree-id5236 . -2) (undo-tree-id5237 . -2) (undo-tree-id5238 . -2) (undo-tree-id5239 . -2) (undo-tree-id5240 . -2) (undo-tree-id5241 . -2) (undo-tree-id5242 . -2) (undo-tree-id5243 . -2) (undo-tree-id5244 . -2) (undo-tree-id5245 . -2) (undo-tree-id5246 . -2) (undo-tree-id5247 . -2) (undo-tree-id5248 . -2) (undo-tree-id5249 . -2) (undo-tree-id5250 . -2) (undo-tree-id5251 . -2) (undo-tree-id5252 . -2) (undo-tree-id5253 . -2) (undo-tree-id5254 . -2) (undo-tree-id5255 . -2) (undo-tree-id5256 . -2) 45 (42 . 45) (29 . 42) (#("cust" 0 4 (fontified nil)) . -29) (29 . 33) (#("custom_functs" 0 13 (fontified nil)) . -29) (29 . 42) (#("custom" 0 6 (fontified t)) . -29) (undo-tree-id5257 . -6) (undo-tree-id5258 . -6) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -2) (undo-tree-id5299 . -2) (undo-tree-id5300 . -2) (undo-tree-id5301 . -2) (undo-tree-id5302 . -2) (undo-tree-id5303 . -2) (undo-tree-id5304 . -2) (undo-tree-id5305 . -2) (undo-tree-id5306 . -2) (undo-tree-id5307 . -2) (undo-tree-id5308 . -2) (undo-tree-id5309 . -2) (undo-tree-id5310 . -2) (undo-tree-id5311 . -2) (undo-tree-id5312 . -2) (undo-tree-id5313 . -2) (undo-tree-id5314 . -3) (undo-tree-id5315 . -3) (undo-tree-id5316 . -3) (undo-tree-id5317 . -3) (undo-tree-id5318 . -3) (undo-tree-id5319 . -3) (undo-tree-id5320 . -3) (undo-tree-id5321 . -3) (undo-tree-id5322 . -3) (undo-tree-id5323 . -3) (undo-tree-id5324 . -3) (undo-tree-id5325 . -3) (undo-tree-id5326 . -3) (undo-tree-id5327 . -3) (undo-tree-id5328 . -3) (undo-tree-id5329 . -3) (undo-tree-id5330 . -3) (undo-tree-id5331 . -3) (undo-tree-id5332 . -4) (undo-tree-id5333 . -4) (undo-tree-id5334 . -4) (undo-tree-id5335 . -4) (undo-tree-id5336 . -4) (undo-tree-id5337 . -4) (undo-tree-id5338 . -4) (undo-tree-id5339 . -4) (undo-tree-id5340 . -4) (undo-tree-id5341 . -4) (undo-tree-id5342 . -4) (undo-tree-id5343 . -4) (undo-tree-id5344 . -4) (undo-tree-id5345 . -4) (undo-tree-id5346 . -4) (undo-tree-id5347 . -4) (undo-tree-id5348 . -4) (undo-tree-id5349 . -4) (undo-tree-id5350 . -4) (undo-tree-id5351 . -4) (undo-tree-id5352 . -4) (undo-tree-id5353 . -4) (undo-tree-id5354 . -4) (undo-tree-id5355 . -4) (undo-tree-id5356 . -4) (undo-tree-id5357 . -4) (undo-tree-id5358 . -5) (undo-tree-id5359 . -5) (undo-tree-id5360 . -5) (undo-tree-id5361 . -5) (undo-tree-id5362 . -5) (undo-tree-id5363 . -5) (undo-tree-id5364 . -5) (undo-tree-id5365 . -5) (undo-tree-id5366 . -5) (undo-tree-id5367 . -5) (undo-tree-id5368 . -5) (undo-tree-id5369 . -5) (undo-tree-id5370 . -5) (undo-tree-id5371 . -5) (undo-tree-id5372 . -5) (undo-tree-id5373 . -5) (undo-tree-id5374 . -5) (undo-tree-id5375 . -6) (undo-tree-id5376 . -6) (undo-tree-id5377 . -6) (undo-tree-id5378 . -6) (undo-tree-id5379 . -6) (undo-tree-id5380 . -6) (undo-tree-id5381 . -6) (undo-tree-id5382 . -6) (undo-tree-id5383 . -6) (undo-tree-id5384 . -6) (undo-tree-id5385 . -6) (undo-tree-id5386 . -6) (undo-tree-id5387 . -6) (undo-tree-id5388 . -6) (undo-tree-id5389 . -6) (undo-tree-id5390 . -6) (undo-tree-id5391 . -6) (undo-tree-id5392 . -6) 35 (29 . 35) (28 . 29) (24 . 28) (23 . 24) (t 25760 29853 206589 851000) 23) nil (25760 29866 872055 224000) 0 nil])
([nil nil ((1 . 41687) (#("#!/usr/bin/env python

from custom_functs import * 
import sklearn
import tensorflow as tf
from tensorflow import keras
import numpy as np
from pathlib import Path

# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rc(\"axes\", labelsize=14)
mpl.rc(\"xtick\", labelsize=12)
mpl.rc(\"ytick\", labelsize=12)


n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]


# In[4]:


X_train.shape, y_train.shape


# In[5]:


def plot_series(
    series, y=None, y_pred=None, x_label=\"$t$\", y_label=\"$x(t)$\", legend=True
):
    plt.plot(series, \".-\")
    if y is not None:
        plt.plot(n_steps, y, \"bo\", label=\"Target\")
    if y_pred is not None:
        plt.plot(n_steps, y_pred, \"rx\", markersize=10, label=\"Prediction\")
    plt.grid(True)
    if x_label:
        plt.xlabel(x_label, fontsize=16)
    if y_label:
        plt.ylabel(y_label, fontsize=16, rotation=0)
    plt.hlines(0, 0, 100, linewidth=1)
    plt.axis([0, n_steps + 1, -1, 1])
    if legend and (y or y_pred):
        plt.legend(fontsize=14, loc=\"upper left\")


fig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))
for col in range(3):
    plt.sca(axes[col])
    plot_series(
        X_valid[col, :, 0],
        y_valid[col, 0],
        y_label=(\"$x(t)$\" if col == 0 else None),
        legend=(col == 0),
    )
save_fig(\"time_series_plot\")
plt.show()


# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.

# ## Computing Some Baselines

# Naive predictions (just predict the last observed value):

# In[6]:


y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))


# In[7]:


plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Linear predictions:

# In[8]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(1)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[9]:


model.evaluate(X_valid, y_valid)


# In[10]:


def plot_learning_curves(loss, val_loss):
    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")
    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")
    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    plt.axis([1, 20, 0, 0.05])
    plt.legend(fontsize=14)
    plt.xlabel(\"Epochs\")
    plt.ylabel(\"Loss\")
    plt.grid(True)


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[11]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Using a Simple RNN

# In[12]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([keras.layers.SimpleRNN(1, input_shape=[None, 1])])

optimizer = keras.optimizers.Adam(learning_rate=0.005)
model.compile(loss=\"mse\", optimizer=optimizer)
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[13]:


model.evaluate(X_valid, y_valid)


# In[14]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[15]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Deep RNNs

# In[16]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[17]:


model.evaluate(X_valid, y_valid)


# In[18]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[19]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Make the second `SimpleRNN` layer return only the last output:

# In[20]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[21]:


model.evaluate(X_valid, y_valid)


# In[22]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[23]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Forecasting Several Steps Ahead

# In[24]:


np.random.seed(43)  # not 42, as it would give the first series in the train set

series = generate_time_series(1, n_steps + 10)
X_new, Y_new = series[:, :n_steps], series[:, n_steps:]
X = X_new
for step_ahead in range(10):
    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:]


# In[25]:


Y_pred.shape


# In[26]:


def plot_multiple_forecasts(X, Y, Y_pred):
    n_steps = X.shape[1]
    ahead = Y.shape[1]
    plot_series(X[0, :, 0])
    plt.plot(np.arange(n_steps, n_steps + ahead), Y[0, :, 0], \"bo-\", label=\"Actual\")
    plt.plot(
        np.arange(n_steps, n_steps + ahead),
        Y_pred[0, :, 0],
        \"rx-\",
        label=\"Forecast\",
        markersize=10,
    )
    plt.axis([0, n_steps + ahead, -1, 1])
    plt.legend(fontsize=14)


plot_multiple_forecasts(X_new, Y_new, Y_pred)
save_fig(\"forecast_ahead_plot\")
plt.show()


# Now let's use this model to predict the next 10 values. We first need to regenerate the sequences with 9 more time steps.

# In[27]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, Y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, Y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, Y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


# Now let's predict the next 10 values one by one:

# In[28]:


X = X_valid
for step_ahead in range(10):
    y_pred_one = model.predict(X)[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:, 0]


# In[29]:


Y_pred.shape


# In[30]:


np.mean(keras.metrics.mean_squared_error(Y_valid, Y_pred))


# Let's compare this performance with some baselines: naive predictions and a simple linear model:

# In[31]:


Y_naive_pred = np.tile(
    X_valid[:, -1], 10
)  # take the last time step value, and repeat it 10 times
np.mean(keras.metrics.mean_squared_error(Y_valid, Y_naive_pred))


# In[32]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(10)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Now let's create an RNN that predicts all 10 next values at once:

# In[33]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(10),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[34]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, -10:, :]
Y_pred = model.predict(X_new)[..., np.newaxis]


# In[35]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's create an RNN that predicts the next 10 steps at each time step. That is, instead of just forecasting time steps 50 to 59 based on time steps 0 to 49, it will forecast time steps 1 to 10 at time step 0, then time steps 2 to 11 at time step 1, and so on, and finally it will forecast time steps 50 to 59 at the last time step. Notice that the model is causal: when it makes predictions at any time step, it can only see past time steps.

# In[36]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]
Y = np.empty((10000, n_steps, 10))
for step_ahead in range(1, 10 + 1):
    Y[..., step_ahead - 1] = series[..., step_ahead : step_ahead + n_steps, 0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]


# In[37]:


X_train.shape, Y_train.shape


# In[38]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)


def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])


model.compile(
    loss=\"mse\",
    optimizer=keras.optimizers.Adam(learning_rate=0.01),
    metrics=[last_time_step_mse],
)
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[39]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[40]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # Deep RNN with Batch Norm

# In[41]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.BatchNormalization(),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.BatchNormalization(),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Deep RNNs with Layer Norm

# In[42]:


from tensorflow.keras.layers import LayerNormalization


# In[43]:


class LNSimpleRNNCell(keras.layers.Layer):
    def __init__(self, units, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.state_size = units
        self.output_size = units
        self.simple_rnn_cell = keras.layers.SimpleRNNCell(units, activation=None)
        self.layer_norm = LayerNormalization()
        self.activation = keras.activations.get(activation)

    def get_initial_state(self, inputs=None, batch_size=None, dtype=None):
        if inputs is not None:
            batch_size = tf.shape(inputs)[0]
            dtype = inputs.dtype
        return [tf.zeros([batch_size, self.state_size], dtype=dtype)]

    def call(self, inputs, states):
        outputs, new_states = self.simple_rnn_cell(inputs, states)
        norm_outputs = self.activation(self.layer_norm(outputs))
        return norm_outputs, [norm_outputs]


# In[44]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.RNN(
            LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]
        ),
        keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Creating a Custom RNN Class

# In[45]:


class MyRNN(keras.layers.Layer):
    def __init__(self, cell, return_sequences=False, **kwargs):
        super().__init__(**kwargs)
        self.cell = cell
        self.return_sequences = return_sequences
        self.get_initial_state = getattr(
            self.cell, \"get_initial_state\", self.fallback_initial_state
        )

    def fallback_initial_state(self, inputs):
        batch_size = tf.shape(inputs)[0]
        return [tf.zeros([batch_size, self.cell.state_size], dtype=inputs.dtype)]

    @tf.function
    def call(self, inputs):
        states = self.get_initial_state(inputs)
        shape = tf.shape(inputs)
        batch_size = shape[0]
        n_steps = shape[1]
        sequences = tf.TensorArray(
            inputs.dtype, size=(n_steps if self.return_sequences else 0)
        )
        outputs = tf.zeros(
            shape=[batch_size, self.cell.output_size], dtype=inputs.dtype
        )
        for step in tf.range(n_steps):
            outputs, states = self.cell(inputs[:, step], states)
            if self.return_sequences:
                sequences = sequences.write(step, outputs)
        if self.return_sequences:
            return tf.transpose(sequences.stack(), [1, 0, 2])
        else:
            return outputs


# In[46]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        MyRNN(LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]),
        MyRNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # LSTMs

# In[47]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.LSTM(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[48]:


model.evaluate(X_valid, Y_valid)


# In[49]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[50]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[51]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # GRUs

# In[52]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.GRU(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[53]:


model.evaluate(X_valid, Y_valid)


# In[54]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[55]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[56]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# ## Using One-Dimensional Convolutional Layers to Process Sequences

# ```
# 1D conv layer with kernel size 4, stride 2, VALID padding:
#
#               |-----2-----|     |-----5---...------|     |-----23----|
#         |-----1-----|     |-----4-----|   ...      |-----22----|
#   |-----0----|      |-----3-----|     |---...|-----21----|
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 42 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 43 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 52 53 54 55 56 57 58 59
#
# Output:
#
# X:     0/3   2/5   4/7   6/9   8/11 10/13 .../43 42/45 44/47 46/49
# Y:     4/13  6/15  8/17 10/19 12/21 14/23 .../53 46/55 48/57 50/59
# ```

# In[57]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.Conv1D(
            filters=20, kernel_size=4, strides=2, padding=\"valid\", input_shape=[None, 1]
        ),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(
    X_train, Y_train[:, 3::2], epochs=20, validation_data=(X_valid, Y_valid[:, 3::2])
)


# ## WaveNet

# ```
# C2  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\.../\\ /\\ /\\ /\\ /\\ /\\
#    \\  /  \\  /  \\  /  \\  /  \\  /  \\  /  \\       /  \\  /  \\  /  \\
#      /    \\      /    \\      /    \\                 /    \\
# C1  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\  /\\ /.../\\ /\\ /\\ /\\ /\\ /\\ /\\
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 53 54 55 56 57 58 59
# ```

# In[58]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape=[None, 1]))
for rate in (1, 2, 4, 8) * 2:
    model.add(
        keras.layers.Conv1D(
            filters=20,
            kernel_size=2,
            padding=\"causal\",
            activation=\"relu\",
            dilation_rate=rate,
        )
    )
model.add(keras.layers.Conv1D(filters=10, kernel_size=1))
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Here is the original WaveNet defined in the paper: it uses Gated Activation Units instead of ReLU and parametrized skip connections, plus it pads with zeros on the left to avoid getting shorter and shorter sequences:

# In[59]:


class GatedActivationUnit(keras.layers.Layer):
    def __init__(self, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.activation = keras.activations.get(activation)

    def call(self, inputs):
        n_filters = inputs.shape[-1] // 2
        linear_output = self.activation(inputs[..., :n_filters])
        gate = keras.activations.sigmoid(inputs[..., n_filters:])
        return self.activation(linear_output) * gate


# In[60]:


def wavenet_residual_block(inputs, n_filters, dilation_rate):
    z = keras.layers.Conv1D(
        2 * n_filters, kernel_size=2, padding=\"causal\", dilation_rate=dilation_rate
    )(inputs)
    z = GatedActivationUnit()(z)
    z = keras.layers.Conv1D(n_filters, kernel_size=1)(z)
    return keras.layers.Add()([z, inputs]), z


# In[61]:


keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

n_layers_per_block = 3  # 10 in the paper
n_blocks = 1  # 3 in the paper
n_filters = 32  # 128 in the paper
n_outputs = 10  # 256 in the paper

inputs = keras.layers.Input(shape=[None, 1])
z = keras.layers.Conv1D(n_filters, kernel_size=2, padding=\"causal\")(inputs)
skip_to_last = []
for dilation_rate in [2 ** i for i in range(n_layers_per_block)] * n_blocks:
    z, skip = wavenet_residual_block(z, n_filters, dilation_rate)
    skip_to_last.append(skip)
z = keras.activations.relu(keras.layers.Add()(skip_to_last))
z = keras.layers.Conv1D(n_filters, kernel_size=1, activation=\"relu\")(z)
Y_proba = keras.layers.Conv1D(n_outputs, kernel_size=1, activation=\"softmax\")(z)

model = keras.models.Model(inputs=[inputs], outputs=[Y_proba])


# In[62]:


model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=2, validation_data=(X_valid, Y_valid))


# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.

# # Exercise solutions

# ## 1. to 8.

# See Appendix A.

# ## 9. Tackling the SketchRNN Dataset

# _Exercise: Train a classification model for the SketchRNN dataset, available in TensorFlow Datasets._

# The dataset is not available in TFDS yet, the [pull request](https://github.com/tensorflow/datasets/pull/361) is still work in progress. Luckily, the data is conveniently available as TFRecords, so let's download it (it might take a while, as it's about 1 GB large, with 3,450,000 training sketches and 345,000 test sketches):

# In[63]:


DOWNLOAD_ROOT = \"http://download.tensorflow.org/data/\"
FILENAME = \"quickdraw_tutorial_dataset_v1.tar.gz\"
filepath = keras.utils.get_file(
    FILENAME, DOWNLOAD_ROOT + FILENAME, cache_subdir=\"datasets/quickdraw\", extract=True
)


# In[64]:


quickdraw_dir = Path(filepath).parent
train_files = sorted([str(path) for path in quickdraw_dir.glob(\"training.tfrecord-*\")])
eval_files = sorted([str(path) for path in quickdraw_dir.glob(\"eval.tfrecord-*\")])


# In[65]:


train_files


# In[66]:


eval_files


# In[67]:


with open(quickdraw_dir / \"eval.tfrecord.classes\") as test_classes_file:
    test_classes = test_classes_file.readlines()

with open(quickdraw_dir / \"training.tfrecord.classes\") as train_classes_file:
    train_classes = train_classes_file.readlines()


# In[68]:


assert train_classes == test_classes
class_names = [name.strip().lower() for name in train_classes]


# In[69]:


sorted(class_names)


# In[70]:


def parse(data_batch):
    feature_descriptions = {
        \"ink\": tf.io.VarLenFeature(dtype=tf.float32),
        \"shape\": tf.io.FixedLenFeature([2], dtype=tf.int64),
        \"class_index\": tf.io.FixedLenFeature([1], dtype=tf.int64),
    }
    examples = tf.io.parse_example(data_batch, feature_descriptions)
    flat_sketches = tf.sparse.to_dense(examples[\"ink\"])
    sketches = tf.reshape(flat_sketches, shape=[tf.size(data_batch), -1, 3])
    lengths = examples[\"shape\"][:, 0]
    labels = examples[\"class_index\"][:, 0]
    return sketches, lengths, labels


# In[71]:


def quickdraw_dataset(
    filepaths,
    batch_size=32,
    shuffle_buffer_size=None,
    n_parse_threads=5,
    n_read_threads=5,
    cache=False,
):
    dataset = tf.data.TFRecordDataset(filepaths, num_parallel_reads=n_read_threads)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(parse, num_parallel_calls=n_parse_threads)
    return dataset.prefetch(1)


# In[72]:


train_set = quickdraw_dataset(train_files, shuffle_buffer_size=10000)
valid_set = quickdraw_dataset(eval_files[:5])
test_set = quickdraw_dataset(eval_files[5:])


# In[73]:


for sketches, lengths, labels in train_set.take(1):
    print(\"sketches =\", sketches)
    print(\"lengths =\", lengths)
    print(\"labels =\", labels)


# In[74]:


def draw_sketch(sketch, label=None):
    origin = np.array([[0.0, 0.0, 0.0]])
    sketch = np.r_[origin, sketch]
    stroke_end_indices = np.argwhere(sketch[:, -1] == 1.0)[:, 0]
    coordinates = np.cumsum(sketch[:, :2], axis=0)
    strokes = np.split(coordinates, stroke_end_indices + 1)
    title = class_names[label.numpy()] if label is not None else \"Try to guess\"
    plt.title(title)
    plt.plot(coordinates[:, 0], -coordinates[:, 1], \"y:\")
    for stroke in strokes:
        plt.plot(stroke[:, 0], -stroke[:, 1], \".-\")
    plt.axis(\"off\")


def draw_sketches(sketches, lengths, labels):
    n_sketches = len(sketches)
    n_cols = 4
    n_rows = (n_sketches - 1) // n_cols + 1
    plt.figure(figsize=(n_cols * 3, n_rows * 3.5))
    for index, sketch, length, label in zip(
        range(n_sketches), sketches, lengths, labels
    ):
        plt.subplot(n_rows, n_cols, index + 1)
        draw_sketch(sketch[:length], label)
    plt.show()


for sketches, lengths, labels in train_set.take(1):
    draw_sketches(sketches, lengths, labels)


# Most sketches are composed of less than 100 points:

# In[75]:


lengths = np.concatenate([lengths for _, lengths, _ in train_set.take(1000)])
plt.hist(lengths, bins=150, density=True)
plt.axis([0, 200, 0, 0.03])
plt.xlabel(\"length\")
plt.ylabel(\"density\")
plt.show()


# In[76]:


def crop_long_sketches(dataset, max_length=100):
    return dataset.map(lambda inks, lengths, labels: (inks[:, :max_length], labels))


cropped_train_set = crop_long_sketches(train_set)
cropped_valid_set = crop_long_sketches(valid_set)
cropped_test_set = crop_long_sketches(test_set)


# In[77]:


model = keras.models.Sequential(
    [
        keras.layers.Conv1D(32, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(64, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(128, kernel_size=3, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(128, return_sequences=True),
        keras.layers.LSTM(128),
        keras.layers.Dense(len(class_names), activation=\"softmax\"),
    ]
)
optimizer = keras.optimizers.SGD(learning_rate=1e-2, clipnorm=1.0)
model.compile(
    loss=\"sparse_categorical_crossentropy\",
    optimizer=optimizer,
    metrics=[\"accuracy\", \"sparse_top_k_categorical_accuracy\"],
)
history = model.fit(cropped_train_set, epochs=2, validation_data=cropped_valid_set)


# In[78]:


y_test = np.concatenate([labels for _, _, labels in test_set])
y_probas = model.predict(test_set)


# In[79]:


np.mean(keras.metrics.sparse_top_k_categorical_accuracy(y_test, y_probas))


# In[80]:


n_new = 10
Y_probas = model.predict(sketches)
top_k = tf.nn.top_k(Y_probas, k=5)
for index in range(n_new):
    plt.figure(figsize=(3, 3.5))
    draw_sketch(sketches[index])
    plt.show()
    print(\"Top-5 predictions:\".format(index + 1))
    for k in range(5):
        class_name = class_names[top_k.indices[index, k]]
        proba = 100 * top_k.values[index, k]
        print(\"  {}. {} {:.3f}%\".format(k + 1, class_name, proba))
    print(\"Answer: {}\".format(class_names[labels[index].numpy()]))


# In[81]:


model.save(\"my_sketchrnn\")


# ## 10. Bach Chorales
# _Exercise: Download the [Bach chorales](https://homl.info/bach) dataset and unzip it. It is composed of 382 chorales composed by Johann Sebastian Bach. Each chorale is 100 to 640 time steps long, and each time step contains 4 integers, where each integer corresponds to a note's index on a piano (except for the value 0, which means that no note is played). Train a model—recurrent, convolutional, or both—that can predict the next time step (four notes), given a sequence of time steps from a chorale. Then use this model to generate Bach-like music, one note at a time: you can do this by giving the model the start of a chorale and asking it to predict the next time step, then appending these time steps to the input sequence and asking the model for the next note, and so on. Also make sure to check out [Google's Coconet model](https://homl.info/coconet), which was used for a nice [Google doodle about Bach](https://www.google.com/doodles/celebrating-johann-sebastian-bach)._
#
#

# In[82]:


DOWNLOAD_ROOT = (
    \"https://github.com/ageron/handson-ml2/raw/master/datasets/jsb_chorales/\"
)
FILENAME = \"jsb_chorales.tgz\"
filepath = keras.utils.get_file(
    FILENAME,
    DOWNLOAD_ROOT + FILENAME,
    cache_subdir=\"datasets/jsb_chorales\",
    extract=True,
)


# In[83]:


jsb_chorales_dir = Path(filepath).parent
train_files = sorted(jsb_chorales_dir.glob(\"train/chorale_*.csv\"))
valid_files = sorted(jsb_chorales_dir.glob(\"valid/chorale_*.csv\"))
test_files = sorted(jsb_chorales_dir.glob(\"test/chorale_*.csv\"))


# In[84]:


import pandas as pd


def load_chorales(filepaths):
    return [pd.read_csv(filepath).values.tolist() for filepath in filepaths]


train_chorales = load_chorales(train_files)
valid_chorales = load_chorales(valid_files)
test_chorales = load_chorales(test_files)


# In[85]:


train_chorales[0]


# Notes range from 36 (C1 = C on octave 1) to 81 (A5 = A on octave 5), plus 0 for silence:

# In[86]:


notes = set()
for chorales in (train_chorales, valid_chorales, test_chorales):
    for chorale in chorales:
        for chord in chorale:
            notes |= set(chord)

n_notes = len(notes)
min_note = min(notes - {0})
max_note = max(notes)

assert min_note == 36
assert max_note == 81


# Let's write a few functions to listen to these chorales (you don't need to understand the details here, and in fact there are certainly simpler ways to do this, for example using MIDI players, but I just wanted to have a bit of fun writing a synthesizer):

# In[87]:


from IPython.display import Audio


def notes_to_frequencies(notes):
    # Frequency doubles when you go up one octave; there are 12 semi-tones
    # per octave; Note A on octave 4 is 440 Hz, and it is note number 69.
    return 2 ** ((np.array(notes) - 69) / 12) * 440


def frequencies_to_samples(frequencies, tempo, sample_rate):
    note_duration = 60 / tempo  # the tempo is measured in beats per minutes
    # To reduce click sound at every beat, we round the frequencies to try to
    # get the samples close to zero at the end of each note.
    frequencies = np.round(note_duration * frequencies) / note_duration
    n_samples = int(note_duration * sample_rate)
    time = np.linspace(0, note_duration, n_samples)
    sine_waves = np.sin(2 * np.pi * frequencies.reshape(-1, 1) * time)
    # Removing all notes with frequencies ≤ 9 Hz (includes note 0 = silence)
    sine_waves *= (frequencies > 9.0).reshape(-1, 1)
    return sine_waves.reshape(-1)


def chords_to_samples(chords, tempo, sample_rate):
    freqs = notes_to_frequencies(chords)
    freqs = np.r_[freqs, freqs[-1:]]  # make last note a bit longer
    merged = np.mean(
        [frequencies_to_samples(melody, tempo, sample_rate) for melody in freqs.T],
        axis=0,
    )
    n_fade_out_samples = sample_rate * 60 // tempo  # fade out last note
    fade_out = np.linspace(1.0, 0.0, n_fade_out_samples) ** 2
    merged[-n_fade_out_samples:] *= fade_out
    return merged


def play_chords(chords, tempo=160, amplitude=0.1, sample_rate=44100, filepath=None):
    samples = amplitude * chords_to_samples(chords, tempo, sample_rate)
    if filepath:
        from scipy.io import wavfile

        samples = (2 ** 15 * samples).astype(np.int16)
        wavfile.write(filepath, sample_rate, samples)
        return display(Audio(filepath))
    else:
        return display(Audio(samples, rate=sample_rate))


# Now let's listen to a few chorales:

# In[88]:


for index in range(3):
    play_chords(train_chorales[index])


# Divine! :)

# In order to be able to generate new chorales, we want to train a model that can predict the next chord given all the previous chords. If we naively try to predict the next chord in one shot, predicting all 4 notes at once, we run the risk of getting notes that don't go very well together (believe me, I tried). It's much better and simpler to predict one note at a time. So we will need to preprocess every chorale, turning each chord into an arpegio (i.e., a sequence of notes rather than notes played simultaneuously). So each chorale will be a long sequence of notes (rather than chords), and we can just train a model that can predict the next note given all the previous notes. We will use a sequence-to-sequence approach, where we feed a window to the neural net, and it tries to predict that same window shifted one time step into the future.
#
# We will also shift the values so that they range from 0 to 46, where 0 represents silence, and values 1 to 46 represent notes 36 (C1) to 81 (A5).
#
# And we will train the model on windows of 128 notes (i.e., 32 chords).
#
# Since the dataset fits in memory, we could preprocess the chorales in RAM using any Python code we like, but I will demonstrate here how to do all the preprocessing using tf.data (there will be more details about creating windows using tf.data in the next chapter).

# In[89]:


def create_target(batch):
    X = batch[:, :-1]
    Y = batch[:, 1:]  # predict next note in each arpegio, at each step
    return X, Y


def preprocess(window):
    window = tf.where(window == 0, window, window - min_note + 1)  # shift values
    return tf.reshape(window, [-1])  # convert to arpegio


def bach_dataset(
    chorales,
    batch_size=32,
    shuffle_buffer_size=None,
    window_size=32,
    window_shift=16,
    cache=True,
):
    def batch_window(window):
        return window.batch(window_size + 1)

    def to_windows(chorale):
        dataset = tf.data.Dataset.from_tensor_slices(chorale)
        dataset = dataset.window(window_size + 1, window_shift, drop_remainder=True)
        return dataset.flat_map(batch_window)

    chorales = tf.ragged.constant(chorales, ragged_rank=1)
    dataset = tf.data.Dataset.from_tensor_slices(chorales)
    dataset = dataset.flat_map(to_windows).map(preprocess)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(create_target)
    return dataset.prefetch(1)


# Now let's create the training set, the validation set and the test set:

# In[90]:


train_set = bach_dataset(train_chorales, shuffle_buffer_size=1000)
valid_set = bach_dataset(valid_chorales)
test_set = bach_dataset(test_chorales)


# Now let's create the model:
#
# * We could feed the note values directly to the model, as floats, but this would probably not give good results. Indeed, the relationships between notes are not that simple: for example, if you replace a C3 with a C4, the melody will still sound fine, even though these notes are 12 semi-tones apart (i.e., one octave). Conversely, if you replace a C3 with a C\\#3, it's very likely that the chord will sound horrible, despite these notes being just next to each other. So we will use an `Embedding` layer to convert each note to a small vector representation (see Chapter 16 for more details on embeddings). We will use 5-dimensional embeddings, so the output of this first layer will have a shape of `[batch_size, window_size, 5]`.
# * We will then feed this data to a small WaveNet-like neural network, composed of a stack of 4 `Conv1D` layers with doubling dilation rates. We will intersperse these layers with `BatchNormalization` layers for faster better convergence.
# * Then one `LSTM` layer to try to capture long-term patterns.
# * And finally a `Dense` layer to produce the final note probabilities. It will predict one probability for each chorale in the batch, for each time step, and for each possible note (including silence). So the output shape will be `[batch_size, window_size, 47]`.

# In[91]:


n_embedding_dims = 5

model = keras.models.Sequential(
    [
        keras.layers.Embedding(
            input_dim=n_notes, output_dim=n_embedding_dims, input_shape=[None]
        ),
        keras.layers.Conv1D(32, kernel_size=2, padding=\"causal\", activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            48, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=2
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            64, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=4
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            96, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=8
        ),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(256, return_sequences=True),
        keras.layers.Dense(n_notes, activation=\"softmax\"),
    ]
)

model.summary()


# Now we're ready to compile and train the model!

# In[92]:


optimizer = keras.optimizers.Nadam(learning_rate=1e-3)
model.compile(
    loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"]
)
model.fit(train_set, epochs=20, validation_data=valid_set)


# I have not done much hyperparameter search, so feel free to iterate on this model now and try to optimize it. For example, you could try removing the `LSTM` layer and replacing it with `Conv1D` layers. You could also play with the number of layers, the learning rate, the optimizer, and so on.

# Once you're satisfied with the performance of the model on the validation set, you can save it and evaluate it one last time on the test set:

# In[93]:


model.save(\"my_bach_model.h5\")
model.evaluate(test_set)


# **Note:** There's no real need for a test set in this exercise, since we will perform the final evaluation by just listening to the music produced by the model. So if you want, you can add the test set to the train set, and train the model again, hopefully getting a slightly better model.

# Now let's write a function that will generate a new chorale. We will give it a few seed chords, it will convert them to arpegios (the format expected by the model), and use the model to predict the next note, then the next, and so on. In the end, it will group the notes 4 by 4 to create chords again, and return the resulting chorale.

# **Warning**: `model.predict_classes(X)` is deprecated. It is replaced with `np.argmax(model.predict(X), axis=-1)`.

# In[94]:


def generate_chorale(model, seed_chords, length):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            # next_note = model.predict_classes(arpegio)[:1, -1:]
            next_note = np.argmax(model.predict(arpegio), axis=-1)[:1, -1:]
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# To test this function, we need some seed chords. Let's use the first 8 chords of one of the test chorales (it's actually just 2 different chords, each played 4 times):

# In[95]:


seed_chords = test_chorales[2][:8]
play_chords(seed_chords, amplitude=0.2)


# Now we are ready to generate our first chorale! Let's ask the function to generate 56 more chords, for a total of 64 chords, i.e., 16 bars (assuming 4 chords per bar, i.e., a 4/4 signature):

# In[96]:


new_chorale = generate_chorale(model, seed_chords, 56)
play_chords(new_chorale)


# This approach has one major flaw: it is often too conservative. Indeed, the model will not take any risk, it will always choose the note with the highest score, and since repeating the previous note generally sounds good enough, it's the least risky option, so the algorithm will tend to make notes last longer and longer. Pretty boring. Plus, if you run the model multiple times, it will always generate the same melody.
#
# So let's spice things up a bit! Instead of always picking the note with the highest score, we will pick the next note randomly, according to the predicted probabilities. For example, if the model predicts a C3 with 75% probability, and a G3 with a 25% probability, then we will pick one of these two notes randomly, with these probabilities. We will also add a `temperature` parameter that will control how \"hot\" (i.e., daring) we want the system to feel. A high temperature will bring the predicted probabilities closer together, reducing the probability of the likely notes and increasing the probability of the unlikely ones.

# In[97]:


def generate_chorale_v2(model, seed_chords, length, temperature=1):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            next_note_probas = model.predict(arpegio)[0, -1:]
            rescaled_logits = tf.math.log(next_note_probas) / temperature
            next_note = tf.random.categorical(rescaled_logits, num_samples=1)
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# Let's generate 3 chorales using this new function: one cold, one medium, and one hot (feel free to experiment with other seeds, lengths and temperatures). The code saves each chorale to a separate file. You can run these cells over an over again until you generate a masterpiece!
#
# **Please share your most beautiful generated chorale with me on Twitter @aureliengeron, I would really appreciate it! :))**

# In[98]:


new_chorale_v2_cold = generate_chorale_v2(model, seed_chords, 56, temperature=0.8)
play_chords(new_chorale_v2_cold, filepath=\"bach_cold.wav\")


# In[99]:


new_chorale_v2_medium = generate_chorale_v2(model, seed_chords, 56, temperature=1.0)
play_chords(new_chorale_v2_medium, filepath=\"bach_medium.wav\")


# In[100]:


new_chorale_v2_hot = generate_chorale_v2(model, seed_chords, 56, temperature=1.5)
play_chords(new_chorale_v2_hot, filepath=\"bach_hot.wav\")


# Lastly, you can try a fun social experiment: send your friends a few of your favorite generated chorales, plus the real chorale, and ask them to guess which one is the real one!

# In[101]:


play_chords(test_chorales[2][:64], filepath=\"bach_test_4.wav\")
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 22 (face font-lock-comment-face fontified t) 22 23 (fontified t) 23 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 42 (fontified t) 42 48 (face font-lock-keyword-face fontified t) 48 51 (fontified t) 51 52 (fontified t) 52 58 (face font-lock-keyword-face fontified t) 58 67 (fontified t) 67 73 (face font-lock-keyword-face fontified t) 73 85 (fontified t) 85 87 (face font-lock-keyword-face fontified t) 87 91 (fontified t) 91 95 (face font-lock-keyword-face fontified t) 95 107 (fontified t) 107 113 (face font-lock-keyword-face fontified t) 113 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 133 (fontified t) 133 135 (face font-lock-keyword-face fontified t) 135 139 (fontified t) 139 143 (face font-lock-keyword-face fontified t) 143 152 (fontified t) 152 158 (face font-lock-keyword-face fontified t) 158 165 (fontified t) 165 167 (face font-lock-comment-delimiter-face fontified t) 167 217 (face font-lock-comment-face fontified t) 217 231 (fontified t) 231 232 (face (rainbow-delimiters-depth-1-face) fontified t) 232 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-1-face) fontified t) 235 254 (fontified t) 254 255 (face (rainbow-delimiters-depth-1-face) fontified t) 255 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-1-face) fontified t) 258 260 (fontified t) 260 266 (face font-lock-keyword-face fontified t) 266 278 (fontified t) 278 280 (face font-lock-keyword-face fontified t) 280 285 (fontified t) 285 291 (face font-lock-keyword-face fontified t) 291 310 (fontified t) 310 312 (face font-lock-keyword-face fontified t) 312 324 (fontified t) 324 325 (face (rainbow-delimiters-depth-1-face) fontified t) 325 331 (face font-lock-string-face fontified t) 331 345 (fontified t) 345 346 (face (rainbow-delimiters-depth-1-face) fontified t) 346 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-1-face) fontified t) 354 361 (face font-lock-string-face fontified t) 361 375 (fontified t) 375 376 (face (rainbow-delimiters-depth-1-face) fontified t) 376 383 (fontified t) 383 384 (face (rainbow-delimiters-depth-1-face) fontified t) 384 391 (face font-lock-string-face fontified t) 391 405 (fontified t) 405 406 (face (rainbow-delimiters-depth-1-face) fontified t) 406 409 (fontified t) 409 416 (face font-lock-variable-name-face fontified t) 416 422 (fontified t) 422 428 (face font-lock-variable-name-face fontified t) 428 451 (fontified t) 451 452 (face (rainbow-delimiters-depth-1-face) fontified t) 452 470 (fontified t) 470 471 (face (rainbow-delimiters-depth-1-face) fontified t) 471 472 (fontified t) 472 479 (face font-lock-variable-name-face fontified t) 479 481 (fontified t) 481 488 (face font-lock-variable-name-face fontified t) 488 497 (fontified t) 497 498 (face (rainbow-delimiters-depth-1-face) fontified t) 498 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-1-face) fontified t) 514 522 (fontified t) 522 523 (face (rainbow-delimiters-depth-1-face) fontified t) 523 529 (fontified t) 529 532 (fontified t) 532 533 (face (rainbow-delimiters-depth-1-face) fontified t) 533 534 (fontified t) 534 541 (face font-lock-variable-name-face fontified t) 541 543 (fontified t) 543 550 (face font-lock-variable-name-face fontified t) 550 552 (fontified t) 552 559 (fontified t) 559 560 (fontified t face (rainbow-delimiters-depth-1-face)) 560 579 (fontified t) 579 580 (fontified t face (rainbow-delimiters-depth-1-face)) 580 588 (fontified t) 588 589 (fontified t face (rainbow-delimiters-depth-1-face)) 589 602 (fontified t) 602 603 (fontified t face (rainbow-delimiters-depth-1-face)) 603 604 (fontified t) 604 610 (face font-lock-variable-name-face fontified t) 610 612 (fontified t) 612 618 (face font-lock-variable-name-face fontified t) 618 627 (fontified t) 627 628 (face (rainbow-delimiters-depth-1-face) fontified t) 628 643 (fontified t) 643 644 (face (rainbow-delimiters-depth-1-face) fontified t) 644 652 (fontified t) 652 653 (face (rainbow-delimiters-depth-1-face) fontified t) 653 662 (fontified t) 662 663 (face (rainbow-delimiters-depth-1-face) fontified t) 663 666 (fontified t) 666 668 (face font-lock-comment-delimiter-face fontified t) 668 675 (face font-lock-comment-face fontified t) 675 708 (fontified t) 708 710 (face font-lock-comment-delimiter-face fontified t) 710 717 (face font-lock-comment-face fontified t) 717 719 (fontified t) 719 722 (face font-lock-keyword-face fontified t) 722 723 (fontified t) 723 734 (face font-lock-function-name-face fontified t) 734 735 (face (rainbow-delimiters-depth-1-face) fontified t) 735 750 (fontified t) 750 754 (face font-lock-constant-face fontified t) 754 763 (fontified t) 763 767 (face font-lock-constant-face fontified t) 767 777 (fontified t) 777 782 (face font-lock-string-face fontified t) 782 792 (fontified t) 792 800 (face font-lock-string-face fontified t) 800 809 (fontified t) 809 813 (face font-lock-constant-face fontified t) 813 814 (fontified t) 814 815 (face (rainbow-delimiters-depth-1-face) fontified t) 815 829 (fontified t) 829 830 (face (rainbow-delimiters-depth-1-face) fontified t) 830 838 (fontified t) 838 842 (face font-lock-string-face fontified t) 842 843 (face (rainbow-delimiters-depth-1-face) fontified t) 843 848 (fontified t) 848 850 (face font-lock-keyword-face fontified t) 850 853 (fontified t) 853 855 (face font-lock-keyword-face fontified t) 855 856 (fontified t) 856 859 (face font-lock-keyword-face fontified t) 859 860 (fontified t) 860 864 (face font-lock-constant-face fontified t) 864 882 (fontified t) 882 883 (face (rainbow-delimiters-depth-1-face) fontified t) 883 895 (fontified t) 895 899 (face font-lock-string-face fontified t) 899 907 (fontified t) 907 915 (face font-lock-string-face fontified t) 915 916 (face (rainbow-delimiters-depth-1-face) fontified t) 916 921 (fontified t) 921 923 (face font-lock-keyword-face fontified t) 923 931 (fontified t) 931 933 (face font-lock-keyword-face fontified t) 933 934 (fontified t) 934 937 (face font-lock-keyword-face fontified t) 937 938 (fontified t) 938 942 (face font-lock-constant-face fontified t) 942 960 (fontified t) 960 961 (face (rainbow-delimiters-depth-1-face) fontified t) 961 978 (fontified t) 978 982 (face font-lock-string-face fontified t) 982 1005 (fontified t) 1005 1017 (face font-lock-string-face fontified t) 1017 1018 (face (rainbow-delimiters-depth-1-face) fontified t) 1018 1031 (fontified t) 1031 1032 (face (rainbow-delimiters-depth-1-face) fontified t) 1032 1034 (face font-lock-constant-face fontified t) 1034 1036 (face font-lock-constant-face fontified t) 1036 1037 (face (rainbow-delimiters-depth-1-face) fontified t) 1037 1038 (fontified t) 1038 1042 (fontified t) 1042 1044 (face font-lock-keyword-face fontified t) 1044 1072 (fontified t) 1072 1073 (face (rainbow-delimiters-depth-1-face) fontified t) 1073 1093 (fontified t) 1093 1094 (face (rainbow-delimiters-depth-1-face) fontified t) 1094 1099 (fontified t) 1099 1101 (face font-lock-keyword-face fontified t) 1101 1104 (fontified t) 1104 1111 (fontified t)) . 1) (undo-tree-id4287 . -41687) (undo-tree-id4288 . -41687) (undo-tree-id4289 . 41636) (undo-tree-id4290 . -409) (undo-tree-id4291 . -409) (undo-tree-id4292 . -409) (undo-tree-id4293 . -409) (undo-tree-id4294 . -409) (undo-tree-id4295 . -409) (undo-tree-id4296 . -409) (undo-tree-id4297 . -409) (undo-tree-id4298 . -409) (undo-tree-id4299 . -409) (undo-tree-id4300 . -409) (undo-tree-id4301 . -409) (undo-tree-id4302 . -409) (undo-tree-id4303 . -22) (undo-tree-id4304 . -22) (undo-tree-id4305 . -22) (undo-tree-id4306 . -22) (undo-tree-id4307 . -22) (undo-tree-id4308 . -22) (undo-tree-id4309 . -22) (undo-tree-id4310 . -22) (undo-tree-id4311 . -22) (undo-tree-id4312 . -22) (undo-tree-id4313 . -22) (undo-tree-id4314 . -22) (undo-tree-id4315 . -22) (undo-tree-id4316 . -22) (undo-tree-id4317 . -22) (undo-tree-id4318 . -22) (undo-tree-id4319 . -22) (undo-tree-id4320 . -22) (undo-tree-id4321 . -22) (undo-tree-id4322 . -22) (undo-tree-id4323 . -22) (undo-tree-id4324 . -22) (undo-tree-id4325 . -22) (undo-tree-id4326 . -22) (undo-tree-id4327 . -22) (undo-tree-id4328 . -22) (undo-tree-id4329 . -23) (undo-tree-id4330 . -23) (undo-tree-id4331 . -23) (undo-tree-id4332 . -23) (undo-tree-id4333 . -23) (undo-tree-id4334 . -23) (undo-tree-id4335 . -23) (undo-tree-id4336 . -23) (undo-tree-id4337 . -23) (undo-tree-id4338 . -23) (undo-tree-id4339 . -23) (undo-tree-id4340 . -52) (undo-tree-id4341 . -58) (undo-tree-id4342 . -260) (undo-tree-id4343 . -266) (undo-tree-id4344 . -285) (undo-tree-id4345 . -291) (undo-tree-id4346 . -431) (undo-tree-id4347 . -451) (undo-tree-id4348 . -1596) (undo-tree-id4349 . -1604) (undo-tree-id4350 . -1717) (undo-tree-id4351 . -1726) (undo-tree-id4352 . -2475) (undo-tree-id4353 . -2482) (undo-tree-id4354 . -2742) (undo-tree-id4355 . -2746) (undo-tree-id4356 . -3316) (undo-tree-id4357 . -3317) (undo-tree-id4358 . -3499) (undo-tree-id4359 . -3506) (undo-tree-id4360 . -3963) (undo-tree-id4361 . -3964) (undo-tree-id4362 . -4188) (undo-tree-id4363 . -4195) (undo-tree-id4364 . -4702) (undo-tree-id4365 . -4703) (undo-tree-id4366 . -4900) (undo-tree-id4367 . -4907) (undo-tree-id4368 . -5302) (undo-tree-id4369 . -5305) (undo-tree-id4370 . -5316) (undo-tree-id4371 . -5336) (undo-tree-id4372 . -5826) (undo-tree-id4373 . -5832) (undo-tree-id4374 . -6107) (undo-tree-id4375 . -6115) (undo-tree-id4376 . -6227) (undo-tree-id4377 . -6237) (undo-tree-id4378 . -6331) (undo-tree-id4379 . -6351) (undo-tree-id4380 . -6995) (undo-tree-id4381 . -7001) (undo-tree-id4382 . -7484) (undo-tree-id4383 . -7491) (undo-tree-id4384 . -7738) (undo-tree-id4385 . -7739) (undo-tree-id4386 . -7937) (undo-tree-id4387 . -7944) (undo-tree-id4388 . -7990) (undo-tree-id4389 . -8010) (undo-tree-id4390 . -8273) (undo-tree-id4391 . -8277) (undo-tree-id4392 . -8699) (undo-tree-id4393 . -8719) (undo-tree-id4394 . -8968) (undo-tree-id4395 . -8969) (undo-tree-id4396 . -9274) (undo-tree-id4397 . -9275) (undo-tree-id4398 . -9723) (undo-tree-id4399 . -9730) (undo-tree-id4400 . -9776) (undo-tree-id4401 . -9796) (undo-tree-id4402 . -10191) (undo-tree-id4403 . -10192) (undo-tree-id4404 . -10559) (undo-tree-id4405 . -10566) (undo-tree-id4406 . -10614) (undo-tree-id4407 . -10618) (undo-tree-id4408 . -10962) (undo-tree-id4409 . -10966) (undo-tree-id4410 . -12044) (undo-tree-id4411 . -12051) (undo-tree-id4412 . -12598) (undo-tree-id4413 . -12599) (undo-tree-id4414 . -13529) (undo-tree-id4415 . -13530) (undo-tree-id4416 . -13811) (undo-tree-id4417 . -13818) (undo-tree-id4418 . -14279) (undo-tree-id4419 . -14286) (undo-tree-id4420 . -14479) (undo-tree-id4421 . -14499) (undo-tree-id4422 . -15144) (undo-tree-id4423 . -15151) (undo-tree-id4424 . -15344) (undo-tree-id4425 . -15364) (undo-tree-id4426 . -16473) (undo-tree-id4427 . -16474) (undo-tree-id4428 . -16845) (undo-tree-id4429 . -16846) (undo-tree-id4430 . -17938) (undo-tree-id4431 . -17945) (undo-tree-id4432 . -18028) (undo-tree-id4433 . -18033) (undo-tree-id4434 . -18807) (undo-tree-id4435 . -18820) (undo-tree-id4436 . -19726) (undo-tree-id4437 . -19727) (undo-tree-id4438 . -19954) (undo-tree-id4439 . -19961) (undo-tree-id4440 . -20045) (undo-tree-id4441 . -20046) (undo-tree-id4442 . -20623) (undo-tree-id4443 . -20625) (undo-tree-id4444 . -20727) (undo-tree-id4445 . -20730) (undo-tree-id4446 . -21204) (undo-tree-id4447 . -21211) (undo-tree-id4448 . -21344) (undo-tree-id4449 . -21352) (undo-tree-id4450 . -21438) (undo-tree-id4451 . -21439) (undo-tree-id4452 . -22715) (undo-tree-id4453 . -22729) (undo-tree-id4454 . -24809) (undo-tree-id4455 . -24815) (undo-tree-id4456 . -25829) (undo-tree-id4457 . -25846) (undo-tree-id4458 . -26262) (undo-tree-id4459 . -26263) (undo-tree-id4460 . -26706) (undo-tree-id4461 . -26711) (undo-tree-id4462 . -28165) (undo-tree-id4463 . -28171) (undo-tree-id4464 . -28538) (undo-tree-id4465 . -28541) (undo-tree-id4466 . -28930) (undo-tree-id4467 . -28940) (undo-tree-id4468 . -29124) (undo-tree-id4469 . -29128) (undo-tree-id4470 . -30344) (undo-tree-id4471 . -30345) (undo-tree-id4472 . -30649) (undo-tree-id4473 . -30653) (undo-tree-id4474 . -30907) (undo-tree-id4475 . -30914) (undo-tree-id4476 . -30957) (undo-tree-id4477 . -30964) (undo-tree-id4478 . -31208) (undo-tree-id4479 . -31211) (undo-tree-id4480 . -32058) (undo-tree-id4481 . -32068) (undo-tree-id4482 . -32286) (undo-tree-id4483 . -32291) (undo-tree-id4484 . -32728) (undo-tree-id4485 . -32734) (undo-tree-id4486 . -33182) (undo-tree-id4487 . -33186) (undo-tree-id4488 . -34002) (undo-tree-id4489 . -34007) (undo-tree-id4490 . -34732) (undo-tree-id4491 . -34740) (undo-tree-id4492 . -35040) (undo-tree-id4493 . -35044) (undo-tree-id4494 . -35502) (undo-tree-id4495 . -35506) (undo-tree-id4496 . -35650) (undo-tree-id4497 . -35663) (undo-tree-id4498 . -35817) (undo-tree-id4499 . -35830) (undo-tree-id4500 . -35984) (undo-tree-id4501 . -35997) (undo-tree-id4502 . -36403) (undo-tree-id4503 . -36411) (undo-tree-id4504 . -36555) (undo-tree-id4505 . -36560) (undo-tree-id4506 . -36853) (undo-tree-id4507 . -36854) (undo-tree-id4508 . -37068) (undo-tree-id4509 . -37069) (undo-tree-id4510 . -37361) (undo-tree-id4511 . -37362) (undo-tree-id4512 . -37699) (undo-tree-id4513 . -37701) (undo-tree-id4514 . -38374) (undo-tree-id4515 . -38375) (undo-tree-id4516 . -38631) (undo-tree-id4517 . -38639) (undo-tree-id4518 . -38921) (undo-tree-id4519 . -38926) (undo-tree-id4520 . -39347) (undo-tree-id4521 . -39354) (undo-tree-id4522 . -40626) (undo-tree-id4523 . -40629) (undo-tree-id4524 . -40906) (undo-tree-id4525 . -40919) (undo-tree-id4526 . -41049) (undo-tree-id4527 . -41050) (undo-tree-id4528 . -41205) (undo-tree-id4529 . -41206) (undo-tree-id4530 . -41368) (undo-tree-id4531 . -41369) (undo-tree-id4532 . -41509) (undo-tree-id4533 . -41517) (undo-tree-id4534 . -23) (undo-tree-id4535 . -23) (undo-tree-id4536 . -23) (undo-tree-id4537 . -23) (undo-tree-id4538 . -23) (undo-tree-id4539 . -23) (undo-tree-id4540 . -23) (undo-tree-id4541 . -23) (undo-tree-id4542 . -23) (undo-tree-id4543 . -23) (undo-tree-id4544 . -318) (undo-tree-id4545 . -318) (undo-tree-id4546 . -347) (undo-tree-id4547 . -347) (undo-tree-id4548 . -377) (undo-tree-id4549 . -377) (undo-tree-id4550 . -719) (undo-tree-id4551 . -719) (undo-tree-id4552 . -719) (undo-tree-id4553 . -719) (undo-tree-id4554 . -719) (undo-tree-id4555 . -719) (undo-tree-id4556 . -821) (undo-tree-id4557 . -821) (undo-tree-id4558 . -874) (undo-tree-id4559 . -874) (undo-tree-id4560 . -874) (undo-tree-id4561 . -874) (undo-tree-id4562 . -952) (undo-tree-id4563 . -952) (undo-tree-id4564 . -952) (undo-tree-id4565 . -952) (undo-tree-id4566 . -23) (undo-tree-id4567 . -23) (undo-tree-id4568 . -23) (undo-tree-id4569 . -23) (undo-tree-id4570 . -23) (undo-tree-id4571 . -23) (undo-tree-id4572 . -23) (undo-tree-id4573 . -23) (undo-tree-id4574 . -23) (undo-tree-id4575 . -24) (undo-tree-id4576 . -24) (undo-tree-id4577 . -24) (undo-tree-id4578 . -24) (undo-tree-id4579 . -24) (undo-tree-id4580 . -24) (undo-tree-id4581 . -24) (undo-tree-id4582 . -24) (undo-tree-id4583 . -24) (undo-tree-id4584 . -24) (undo-tree-id4585 . -24) (undo-tree-id4586 . -24) (undo-tree-id4587 . -24) (undo-tree-id4588 . -24) (undo-tree-id4589 . -24) (undo-tree-id4590 . -24) (undo-tree-id4591 . -24) (undo-tree-id4592 . -24) (undo-tree-id4593 . -24) (undo-tree-id4594 . -24) (undo-tree-id4595 . -24) (undo-tree-id4596 . -24) (undo-tree-id4597 . -24) (undo-tree-id4598 . -24) (undo-tree-id4599 . -24) (undo-tree-id4600 . -24) (undo-tree-id4601 . -24) (undo-tree-id4602 . -24) (undo-tree-id4603 . -24) (undo-tree-id4604 . -24) (undo-tree-id4605 . -24) (undo-tree-id4606 . -24) (undo-tree-id4607 . -24) (undo-tree-id4608 . -24) (undo-tree-id4609 . -24) (undo-tree-id4610 . -24) (undo-tree-id4611 . -24) (undo-tree-id4612 . -24) (undo-tree-id4613 . -24) (undo-tree-id4614 . -24) (undo-tree-id4615 . -25) (undo-tree-id4616 . -25) (undo-tree-id4617 . -25) (undo-tree-id4618 . -25) (undo-tree-id4619 . -25) (undo-tree-id4620 . -25) (undo-tree-id4621 . -25) (undo-tree-id4622 . -25) (undo-tree-id4623 . -25) (undo-tree-id4624 . -25) (undo-tree-id4625 . -25) (undo-tree-id4626 . -25) (undo-tree-id4627 . -25) (undo-tree-id4628 . -25) (undo-tree-id4629 . -25) (undo-tree-id4630 . -25) (undo-tree-id4631 . -25) (undo-tree-id4632 . -25) (undo-tree-id4633 . -25) (undo-tree-id4634 . -318) (undo-tree-id4635 . -318) (undo-tree-id4636 . -347) (undo-tree-id4637 . -347) (undo-tree-id4638 . -377) (undo-tree-id4639 . -377) (undo-tree-id4640 . -719) (undo-tree-id4641 . -719) (undo-tree-id4642 . -719) (undo-tree-id4643 . -719) (undo-tree-id4644 . -719) (undo-tree-id4645 . -719) (undo-tree-id4646 . -821) (undo-tree-id4647 . -821) (undo-tree-id4648 . -874) (undo-tree-id4649 . -874) (undo-tree-id4650 . -874) (undo-tree-id4651 . -874) (undo-tree-id4652 . -952) (undo-tree-id4653 . -952) (undo-tree-id4654 . -952) (undo-tree-id4655 . -952) (undo-tree-id4656 . -25) (undo-tree-id4657 . -25) (undo-tree-id4658 . -25) (undo-tree-id4659 . -25) (undo-tree-id4660 . -25) (undo-tree-id4661 . -25) (undo-tree-id4662 . -25) (undo-tree-id4663 . -25) (undo-tree-id4664 . -25) (undo-tree-id4665 . -25) (undo-tree-id4666 . -25) (undo-tree-id4667 . -25) (undo-tree-id4668 . -25) (undo-tree-id4669 . -25) (undo-tree-id4670 . -25) (undo-tree-id4671 . -25) (undo-tree-id4672 . -26) (undo-tree-id4673 . -26) (undo-tree-id4674 . -26) (undo-tree-id4675 . -26) (undo-tree-id4676 . -26) (undo-tree-id4677 . -26) (undo-tree-id4678 . -26) (undo-tree-id4679 . -26) (undo-tree-id4680 . -26) (undo-tree-id4681 . -26) (undo-tree-id4682 . -26) (undo-tree-id4683 . -26) (undo-tree-id4684 . -26) (undo-tree-id4685 . -26) (undo-tree-id4686 . -26) (undo-tree-id4687 . -26) (undo-tree-id4688 . -26) (undo-tree-id4689 . -27) (undo-tree-id4690 . -27) (undo-tree-id4691 . -27) (undo-tree-id4692 . -27) (undo-tree-id4693 . -27) (undo-tree-id4694 . -27) (undo-tree-id4695 . -27) (undo-tree-id4696 . -27) (undo-tree-id4697 . -27) (undo-tree-id4698 . -27) (undo-tree-id4699 . -27) (undo-tree-id4700 . -27) (undo-tree-id4701 . -27) (undo-tree-id4702 . -27) (undo-tree-id4703 . -27) (undo-tree-id4704 . -27) (undo-tree-id4705 . -27) (undo-tree-id4706 . -27) (undo-tree-id4707 . -318) (undo-tree-id4708 . -318) (undo-tree-id4709 . -347) (undo-tree-id4710 . -347) (undo-tree-id4711 . -377) (undo-tree-id4712 . -377) (undo-tree-id4713 . -719) (undo-tree-id4714 . -719) (undo-tree-id4715 . -719) (undo-tree-id4716 . -719) (undo-tree-id4717 . -719) (undo-tree-id4718 . -719) (undo-tree-id4719 . -821) (undo-tree-id4720 . -821) (undo-tree-id4721 . -874) (undo-tree-id4722 . -874) (undo-tree-id4723 . -874) (undo-tree-id4724 . -874) (undo-tree-id4725 . -952) (undo-tree-id4726 . -952) (undo-tree-id4727 . -952) (undo-tree-id4728 . -952) (undo-tree-id4729 . -27) (undo-tree-id4730 . -27) (undo-tree-id4731 . -27) (undo-tree-id4732 . -27) (undo-tree-id4733 . -27) (undo-tree-id4734 . -27) (undo-tree-id4735 . -27) (undo-tree-id4736 . -27) (undo-tree-id4737 . -27) (undo-tree-id4738 . -27) (undo-tree-id4739 . -27) (undo-tree-id4740 . -27) (undo-tree-id4741 . -27) (undo-tree-id4742 . -27) (undo-tree-id4743 . -27) (undo-tree-id4744 . -27) (undo-tree-id4745 . -27) (undo-tree-id4746 . -27) (undo-tree-id4747 . -27) (undo-tree-id4748 . -28) (undo-tree-id4749 . -28) (undo-tree-id4750 . -28) (undo-tree-id4751 . -28) (undo-tree-id4752 . -28) (undo-tree-id4753 . -28) (undo-tree-id4754 . -28) (undo-tree-id4755 . -28) (undo-tree-id4756 . -28) (undo-tree-id4757 . -28) (undo-tree-id4758 . -28) (undo-tree-id4759 . -28) (undo-tree-id4760 . -28) (undo-tree-id4761 . -28) (undo-tree-id4762 . -28) (undo-tree-id4763 . -28) (undo-tree-id4764 . -28) (undo-tree-id4765 . -28) (undo-tree-id4766 . -28) (undo-tree-id4767 . -28) (undo-tree-id4768 . -28) (undo-tree-id4769 . -28) (undo-tree-id4770 . -28) (undo-tree-id4771 . -28) (undo-tree-id4772 . -28) (undo-tree-id4773 . -28) (undo-tree-id4774 . -28) (undo-tree-id4775 . -28) (undo-tree-id4776 . -28) (undo-tree-id4777 . -28) (undo-tree-id4778 . -28) (undo-tree-id4779 . -28) (undo-tree-id4780 . -28) (undo-tree-id4781 . -28) (undo-tree-id4782 . -28) (undo-tree-id4783 . -28) (undo-tree-id4784 . -28) (undo-tree-id4785 . -28) (undo-tree-id4786 . -28) (undo-tree-id4787 . -28) (undo-tree-id4788 . -28) (undo-tree-id4789 . -28) (undo-tree-id4790 . -28) (undo-tree-id4791 . -28) (undo-tree-id4792 . -28) (undo-tree-id4793 . -28) (undo-tree-id4794 . -28) (undo-tree-id4795 . -28) (undo-tree-id4796 . -28) (undo-tree-id4797 . -28) (undo-tree-id4798 . -28) (undo-tree-id4799 . -28) (undo-tree-id4800 . -28) (undo-tree-id4801 . -28) (undo-tree-id4802 . -28) (undo-tree-id4803 . -28) (undo-tree-id4804 . -28) (undo-tree-id4805 . -28) (undo-tree-id4806 . -28) (undo-tree-id4807 . -28) (undo-tree-id4808 . -28) (undo-tree-id4809 . -28) (undo-tree-id4810 . -28) (undo-tree-id4811 . -28) (undo-tree-id4812 . -28) (undo-tree-id4813 . -28) (undo-tree-id4814 . -28) (undo-tree-id4815 . -28) (undo-tree-id4816 . -28) (undo-tree-id4817 . -28) (undo-tree-id4818 . -28) (undo-tree-id4819 . -28) (undo-tree-id4820 . -28) (undo-tree-id4821 . -28) (undo-tree-id4822 . -28) (undo-tree-id4823 . -28) (undo-tree-id4824 . -28) (undo-tree-id4825 . -28) (undo-tree-id4826 . -28) (undo-tree-id4827 . -28) (undo-tree-id4828 . -28) (undo-tree-id4829 . -28) (undo-tree-id4830 . -28) (undo-tree-id4831 . -28) (undo-tree-id4832 . -28) (undo-tree-id4833 . -28) (undo-tree-id4834 . -28) (undo-tree-id4835 . -28) (undo-tree-id4836 . -28) (undo-tree-id4837 . -28) (undo-tree-id4838 . -28) (undo-tree-id4839 . -28) (undo-tree-id4840 . -28) (undo-tree-id4841 . -28) (undo-tree-id4842 . -28) (undo-tree-id4843 . -28) (undo-tree-id4844 . -28) (undo-tree-id4845 . -28) (undo-tree-id4846 . -28) (undo-tree-id4847 . -28) (undo-tree-id4848 . -28) (undo-tree-id4849 . -28) (undo-tree-id4850 . -28) (undo-tree-id4851 . -28) (undo-tree-id4852 . -28) (undo-tree-id4853 . -28) (undo-tree-id4854 . -28) (undo-tree-id4855 . -28) (undo-tree-id4856 . -28) (undo-tree-id4857 . -28) (undo-tree-id4858 . -28) (undo-tree-id4859 . -28) (undo-tree-id4860 . -28) (undo-tree-id4861 . -28) (undo-tree-id4862 . -28) (undo-tree-id4863 . -28) (undo-tree-id4864 . -28) (undo-tree-id4865 . -28) (undo-tree-id4866 . -28) (undo-tree-id4867 . -28) (undo-tree-id4868 . -28) (undo-tree-id4869 . -28) (undo-tree-id4870 . -28) (undo-tree-id4871 . -28) (undo-tree-id4872 . -28) (undo-tree-id4873 . -28) (undo-tree-id4874 . -28) (undo-tree-id4875 . -28) (undo-tree-id4876 . -28) (undo-tree-id4877 . -28) (undo-tree-id4878 . -28) (undo-tree-id4879 . -28) (undo-tree-id4880 . -28) (undo-tree-id4881 . -28) (undo-tree-id4882 . -28) (undo-tree-id4883 . -28) (undo-tree-id4884 . -28) (undo-tree-id4885 . -28) (undo-tree-id4886 . -28) (undo-tree-id4887 . -28) (undo-tree-id4888 . -28) (undo-tree-id4889 . -28) (undo-tree-id4890 . -28) (undo-tree-id4891 . -28) (undo-tree-id4892 . -41) (undo-tree-id4893 . -41) (undo-tree-id4894 . -41) (undo-tree-id4895 . -41) (undo-tree-id4896 . -41) (undo-tree-id4897 . -41) (undo-tree-id4898 . -41) (undo-tree-id4899 . -41) (undo-tree-id4900 . -41) (undo-tree-id4901 . -41) (undo-tree-id4902 . -42) (undo-tree-id4903 . -42) (undo-tree-id4904 . -42) (undo-tree-id4905 . -42) (undo-tree-id4906 . -42) (undo-tree-id4907 . -42) (undo-tree-id4908 . -42) (undo-tree-id4909 . -42) (undo-tree-id4910 . -42) (undo-tree-id4911 . -42) (undo-tree-id4912 . -42) (undo-tree-id4913 . -42) (undo-tree-id4914 . -42) (undo-tree-id4915 . -42) (undo-tree-id4916 . -42) (undo-tree-id4917 . -42) (undo-tree-id4918 . -42) (undo-tree-id4919 . -42) (undo-tree-id4920 . -42) (undo-tree-id4921 . -42) (undo-tree-id4922 . -42) (undo-tree-id4923 . -42) (undo-tree-id4924 . -42) (undo-tree-id4925 . -42) (undo-tree-id4926 . -42) (undo-tree-id4927 . -42) (undo-tree-id4928 . -42) (undo-tree-id4929 . -42) (undo-tree-id4930 . -42) (undo-tree-id4931 . -42) (undo-tree-id4932 . -42) (undo-tree-id4933 . -42) (undo-tree-id4934 . -42) (undo-tree-id4935 . -42) (undo-tree-id4936 . -42) (undo-tree-id4937 . -42) (undo-tree-id4938 . -42) (undo-tree-id4939 . -42) (undo-tree-id4940 . -42) (undo-tree-id4941 . -42) (undo-tree-id4942 . -42) (undo-tree-id4943 . -42) (undo-tree-id4944 . -42) (undo-tree-id4945 . -42) (undo-tree-id4946 . -42) (undo-tree-id4947 . -42) (undo-tree-id4948 . -42) (undo-tree-id4949 . -42) (undo-tree-id4950 . -42) (undo-tree-id4951 . -42) (undo-tree-id4952 . -42) (undo-tree-id4953 . -42) (undo-tree-id4954 . -42) (undo-tree-id4955 . -42) (undo-tree-id4956 . -42) (undo-tree-id4957 . -42) (undo-tree-id4958 . -42) (undo-tree-id4959 . -42) (undo-tree-id4960 . -42) (undo-tree-id4961 . -42) (undo-tree-id4962 . -42) (undo-tree-id4963 . -42) (undo-tree-id4964 . -42) (undo-tree-id4965 . -42) (undo-tree-id4966 . -42) (undo-tree-id4967 . -42) (undo-tree-id4968 . -42) (undo-tree-id4969 . -42) (undo-tree-id4970 . -42) (undo-tree-id4971 . -42) (undo-tree-id4972 . -42) (undo-tree-id4973 . -42) (undo-tree-id4974 . -42) (undo-tree-id4975 . -42) (undo-tree-id4976 . -42) (undo-tree-id4977 . -318) (undo-tree-id4978 . -318) (undo-tree-id4979 . -347) (undo-tree-id4980 . -347) (undo-tree-id4981 . -377) (undo-tree-id4982 . -377) (undo-tree-id4983 . -719) (undo-tree-id4984 . -719) (undo-tree-id4985 . -719) (undo-tree-id4986 . -719) (undo-tree-id4987 . -719) (undo-tree-id4988 . -719) (undo-tree-id4989 . -821) (undo-tree-id4990 . -821) (undo-tree-id4991 . -874) (undo-tree-id4992 . -874) (undo-tree-id4993 . -874) (undo-tree-id4994 . -874) (undo-tree-id4995 . -952) (undo-tree-id4996 . -952) (undo-tree-id4997 . -952) (undo-tree-id4998 . -952) (undo-tree-id4999 . -42) (undo-tree-id5000 . -42) (undo-tree-id5001 . -42) (undo-tree-id5002 . -42) (undo-tree-id5003 . -42) (undo-tree-id5004 . -42) (undo-tree-id5005 . -42) (undo-tree-id5006 . -42) (undo-tree-id5007 . -42) (undo-tree-id5008 . -48) (undo-tree-id5009 . -48) (undo-tree-id5010 . -48) (undo-tree-id5011 . -48) (undo-tree-id5012 . -48) (undo-tree-id5013 . -48) (undo-tree-id5014 . -48) (undo-tree-id5015 . -48) (undo-tree-id5016 . -48) (undo-tree-id5017 . -48) (undo-tree-id5018 . -48) (undo-tree-id5019 . -48) (undo-tree-id5020 . -48) (undo-tree-id5021 . -48) (undo-tree-id5022 . -48) (undo-tree-id5023 . -48) (undo-tree-id5024 . -48) (undo-tree-id5025 . -48) (undo-tree-id5026 . -48) (undo-tree-id5027 . -49) (undo-tree-id5028 . -49) (undo-tree-id5029 . -49) (undo-tree-id5030 . -49) (undo-tree-id5031 . -49) (undo-tree-id5032 . -49) (undo-tree-id5033 . -49) (undo-tree-id5034 . -49) (undo-tree-id5035 . -49) (undo-tree-id5036 . -318) (undo-tree-id5037 . -318) (undo-tree-id5038 . -347) (undo-tree-id5039 . -347) (undo-tree-id5040 . -377) (undo-tree-id5041 . -377) (undo-tree-id5042 . -719) (undo-tree-id5043 . -719) (undo-tree-id5044 . -719) (undo-tree-id5045 . -719) (undo-tree-id5046 . -719) (undo-tree-id5047 . -719) (undo-tree-id5048 . -821) (undo-tree-id5049 . -821) (undo-tree-id5050 . -874) (undo-tree-id5051 . -874) (undo-tree-id5052 . -874) (undo-tree-id5053 . -874) (undo-tree-id5054 . -952) (undo-tree-id5055 . -952) (undo-tree-id5056 . -952) (undo-tree-id5057 . -952) (undo-tree-id5058 . -49) (undo-tree-id5059 . -49) (undo-tree-id5060 . -49) (undo-tree-id5061 . -49) (undo-tree-id5062 . -49) (undo-tree-id5063 . -49) (undo-tree-id5064 . -49) (undo-tree-id5065 . -49) (undo-tree-id5066 . -49) (undo-tree-id5067 . -50) (undo-tree-id5068 . -50) (undo-tree-id5069 . -50) (undo-tree-id5070 . -50) (undo-tree-id5071 . -50) (undo-tree-id5072 . -50) (undo-tree-id5073 . -50) (undo-tree-id5074 . -50) (undo-tree-id5075 . -50) (undo-tree-id5076 . -50) (undo-tree-id5077 . -50) (undo-tree-id5078 . -50) (undo-tree-id5079 . -50) (undo-tree-id5080 . -50) (undo-tree-id5081 . -50) (undo-tree-id5082 . -50) (undo-tree-id5083 . -50) (undo-tree-id5084 . -50) (undo-tree-id5085 . -50) (undo-tree-id5086 . -50) (undo-tree-id5087 . -50) (undo-tree-id5088 . -50) (undo-tree-id5089 . -50) (undo-tree-id5090 . -50) (undo-tree-id5091 . -50) (undo-tree-id5092 . -50) (undo-tree-id5093 . -50) (undo-tree-id5094 . -51) (undo-tree-id5095 . -51) (undo-tree-id5096 . -51) (undo-tree-id5097 . -51) (undo-tree-id5098 . -51) (undo-tree-id5099 . -51) (undo-tree-id5100 . -51) (undo-tree-id5101 . -51) (undo-tree-id5102 . -51) (undo-tree-id5103 . -50) (undo-tree-id5104 . -50) (undo-tree-id5105 . -50) (undo-tree-id5106 . -50) (undo-tree-id5107 . -50) (undo-tree-id5108 . -50) (undo-tree-id5109 . -50) (undo-tree-id5110 . -50) (undo-tree-id5111 . -50) (undo-tree-id5112 . -23) (undo-tree-id5113 . -50) (undo-tree-id5114 . -50) (undo-tree-id5115 . -50) (undo-tree-id5116 . -50) (undo-tree-id5117 . -50) (undo-tree-id5118 . -50) (undo-tree-id5119 . -50) (undo-tree-id5120 . -50) (undo-tree-id5121 . -50) (undo-tree-id5122 . -50) (undo-tree-id5123 . -318) (undo-tree-id5124 . -318) (undo-tree-id5125 . -347) (undo-tree-id5126 . -347) (undo-tree-id5127 . -377) (undo-tree-id5128 . -377) (undo-tree-id5129 . -719) (undo-tree-id5130 . -719) (undo-tree-id5131 . -719) (undo-tree-id5132 . -719) (undo-tree-id5133 . -719) (undo-tree-id5134 . -719) (undo-tree-id5135 . -821) (undo-tree-id5136 . -821) (undo-tree-id5137 . -874) (undo-tree-id5138 . -874) (undo-tree-id5139 . -874) (undo-tree-id5140 . -874) (undo-tree-id5141 . -952) (undo-tree-id5142 . -952) (undo-tree-id5143 . -952) (undo-tree-id5144 . -952) (undo-tree-id5145 . -50) (undo-tree-id5146 . -50) (undo-tree-id5147 . -50) (undo-tree-id5148 . -50) (undo-tree-id5149 . -50) (undo-tree-id5150 . -50) (undo-tree-id5151 . -50) (undo-tree-id5152 . -50) (undo-tree-id5153 . -50) (undo-tree-id5154 . -50) (undo-tree-id5155 . -50) (undo-tree-id5156 . -50) (undo-tree-id5157 . -50) (undo-tree-id5158 . -50) (undo-tree-id5159 . -50) (undo-tree-id5160 . -50) (undo-tree-id5161 . -50) (undo-tree-id5162 . -50) (undo-tree-id5163 . -50) (undo-tree-id5164 . -50) (undo-tree-id5165 . -50) (undo-tree-id5166 . -50) (undo-tree-id5167 . -50) (undo-tree-id5168 . -50) (undo-tree-id5169 . -50) (undo-tree-id5170 . -50) (undo-tree-id5171 . -50) (undo-tree-id5172 . -50) (undo-tree-id5173 . -50) (undo-tree-id5174 . -50) (undo-tree-id5175 . -50) (undo-tree-id5176 . -50) (undo-tree-id5177 . -50) (undo-tree-id5178 . -50)) nil (25760 29866 871867 690000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 665) (undo-tree-id7361 . -1) (t 25760 29866 887275 529000)) nil (25760 29891 498424 246000) 0 nil])
([nil nil ((#("# In[4]:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t)) . 665) (undo-tree-id7358 . -8) (undo-tree-id7359 . -8) (undo-tree-id7360 . -9)) nil (25760 29891 498422 591000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 665) (undo-tree-id7357 . -1)) nil (25760 29891 498420 127000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 665) (undo-tree-id7356 . -1)) nil (25760 29891 498418 747000) 0 nil])
([nil nil ((#("# In[5]:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 9 (face font-lock-comment-face fontified t)) . 696) (undo-tree-id7354 . -8) (undo-tree-id7355 . -9)) nil (25760 29891 498417 303000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 696) (undo-tree-id7353 . -1)) nil (25760 29891 498415 370000) 0 nil])
([nil nil ((#("
def plot_series(
    series, y=None, y_pred=None, x_label=\"$t$\", y_label=\"$x(t)$\", legend=True
):
    plt.plot(series, \".-\")
    if y is not None:
        plt.plot(n_steps, y, \"bo\", label=\"Target\")
    if y_pred is not None:
        plt.plot(n_steps, y_pred, \"rx\", markersize=10, label=\"Prediction\")
    plt.grid(True)
    if x_label:
        plt.xlabel(x_label, fontsize=16)
    if y_label:
        plt.ylabel(y_label, fontsize=16, rotation=0)
    plt.hlines(0, 0, 100, linewidth=1)
    plt.axis([0, n_steps + 1, -1, 1])
    if legend and (y or y_pred):
        plt.legend(fontsize=14, loc=\"upper left\")
" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 16 (face font-lock-function-name-face fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 32 (fontified t) 32 36 (face font-lock-constant-face fontified t) 36 45 (fontified t) 45 49 (face font-lock-constant-face fontified t) 49 59 (fontified t) 59 64 (face font-lock-string-face fontified t) 64 74 (fontified t) 74 82 (face font-lock-string-face fontified t) 82 91 (fontified t) 91 95 (face font-lock-constant-face fontified t) 95 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-1-face) fontified t) 97 111 (fontified t) 111 112 (face (rainbow-delimiters-depth-1-face) fontified t) 112 120 (fontified t) 120 124 (face font-lock-string-face fontified t) 124 125 (face (rainbow-delimiters-depth-1-face) fontified t) 125 130 (fontified t) 130 132 (face font-lock-keyword-face fontified t) 132 135 (fontified t) 135 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t) 138 141 (face font-lock-keyword-face fontified t) 141 142 (fontified t) 142 146 (face font-lock-constant-face fontified t) 146 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-1-face) fontified t) 165 177 (fontified t) 177 181 (face font-lock-string-face fontified t) 181 189 (fontified t) 189 197 (face font-lock-string-face fontified t) 197 198 (face (rainbow-delimiters-depth-1-face) fontified t) 198 203 (fontified t) 203 205 (face font-lock-keyword-face fontified t) 205 213 (fontified t) 213 215 (face font-lock-keyword-face fontified t) 215 216 (fontified t) 216 219 (face font-lock-keyword-face fontified t) 219 220 (fontified t) 220 224 (face font-lock-constant-face fontified t) 224 242 (fontified t) 242 243 (face (rainbow-delimiters-depth-1-face) fontified t) 243 260 (fontified t) 260 264 (face font-lock-string-face fontified t) 264 287 (fontified t) 287 299 (face font-lock-string-face fontified t) 299 300 (face (rainbow-delimiters-depth-1-face) fontified t) 300 313 (fontified t) 313 314 (face (rainbow-delimiters-depth-1-face) fontified t) 314 316 (face font-lock-constant-face fontified t) 316 318 (face font-lock-constant-face fontified t) 318 319 (face (rainbow-delimiters-depth-1-face) fontified t) 319 320 (fontified t) 320 324 (fontified t) 324 326 (face font-lock-keyword-face fontified t) 326 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-1-face) fontified t) 355 375 (fontified t) 375 376 (face (rainbow-delimiters-depth-1-face) fontified t) 376 381 (fontified t) 381 383 (face font-lock-keyword-face fontified t) 383 411 (fontified t) 411 412 (face (rainbow-delimiters-depth-1-face) fontified t) 412 444 (fontified t) 444 445 (face (rainbow-delimiters-depth-1-face) fontified t) 445 458 (fontified t) 458 460 (fontified t) 460 461 (face (rainbow-delimiters-depth-1-face) fontified t) 461 483 (fontified t) 483 484 (face (rainbow-delimiters-depth-1-face) fontified t) 484 485 (fontified t) 485 488 (fontified t) 488 497 (fontified t) 497 498 (face (rainbow-delimiters-depth-1-face) fontified t) 498 499 (face (rainbow-delimiters-depth-2-face) fontified t) 499 501 (fontified t) 501 520 (fontified t) 520 521 (fontified t face (rainbow-delimiters-depth-2-face)) 521 522 (fontified t face (rainbow-delimiters-depth-1-face)) 522 523 (fontified t) 523 527 (fontified t) 527 529 (face font-lock-keyword-face fontified t) 529 537 (fontified t) 537 540 (face font-lock-keyword-face fontified t) 540 541 (fontified t) 541 542 (face (rainbow-delimiters-depth-1-face) fontified t) 542 544 (fontified t) 544 546 (face font-lock-keyword-face fontified t) 546 553 (fontified t) 553 554 (face (rainbow-delimiters-depth-1-face) fontified t) 554 574 (fontified t) 574 575 (face (rainbow-delimiters-depth-1-face) fontified t) 575 592 (fontified t) 592 604 (face font-lock-string-face fontified t) 604 605 (face (rainbow-delimiters-depth-1-face) fontified t) 605 606 (fontified t)) . 696) (undo-tree-id7089 . -605) (undo-tree-id7090 . -556) (undo-tree-id7091 . -556) (undo-tree-id7092 . -556) (undo-tree-id7093 . -564) (undo-tree-id7094 . -564) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -103) (undo-tree-id7102 . -103) (undo-tree-id7103 . -156) (undo-tree-id7104 . -156) (undo-tree-id7105 . -156) (undo-tree-id7106 . -156) (undo-tree-id7107 . -234) (undo-tree-id7108 . -234) (undo-tree-id7109 . -234) (undo-tree-id7110 . -234) (undo-tree-id7111 . -564) (undo-tree-id7112 . -564) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -103) (undo-tree-id7120 . -103) (undo-tree-id7121 . -156) (undo-tree-id7122 . -156) (undo-tree-id7123 . -156) (undo-tree-id7124 . -156) (undo-tree-id7125 . -234) (undo-tree-id7126 . -234) (undo-tree-id7127 . -234) (undo-tree-id7128 . -234) (undo-tree-id7129 . -564) (undo-tree-id7130 . -564) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -103) (undo-tree-id7138 . -103) (undo-tree-id7139 . -156) (undo-tree-id7140 . -156) (undo-tree-id7141 . -156) (undo-tree-id7142 . -156) (undo-tree-id7143 . -234) (undo-tree-id7144 . -234) (undo-tree-id7145 . -234) (undo-tree-id7146 . -234) (undo-tree-id7147 . -564) (undo-tree-id7148 . -564) (undo-tree-id7149 . -606) (undo-tree-id7150 . -556) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -18) (undo-tree-id7179 . -18) (undo-tree-id7180 . -18) (undo-tree-id7181 . -18) (undo-tree-id7182 . -18) (undo-tree-id7183 . -18) (undo-tree-id7184 . -18) (undo-tree-id7185 . -18) (undo-tree-id7186 . -18) (undo-tree-id7187 . -18) (undo-tree-id7188 . -18) (undo-tree-id7189 . -18) (undo-tree-id7190 . -18) (undo-tree-id7191 . -18) (undo-tree-id7192 . -18) (undo-tree-id7193 . -85) (undo-tree-id7194 . -85) (undo-tree-id7195 . -85) (undo-tree-id7196 . -85) (undo-tree-id7197 . -85) (undo-tree-id7198 . -85) (undo-tree-id7199 . -85) (undo-tree-id7200 . -85) (undo-tree-id7201 . -85) (undo-tree-id7202 . -85) (undo-tree-id7203 . -85) (undo-tree-id7204 . -85) (undo-tree-id7205 . -85) (undo-tree-id7206 . -85) (undo-tree-id7207 . -85) (undo-tree-id7208 . -96) (undo-tree-id7209 . -96) (undo-tree-id7210 . -96) (undo-tree-id7211 . -96) (undo-tree-id7212 . -96) (undo-tree-id7213 . -96) (undo-tree-id7214 . -96) (undo-tree-id7215 . -96) (undo-tree-id7216 . -99) (undo-tree-id7217 . -99) (undo-tree-id7218 . -99) (undo-tree-id7219 . -99) (undo-tree-id7220 . -99) (undo-tree-id7221 . -99) (undo-tree-id7222 . -99) (undo-tree-id7223 . -99) (undo-tree-id7224 . -126) (undo-tree-id7225 . -126) (undo-tree-id7226 . -126) (undo-tree-id7227 . -126) (undo-tree-id7228 . -126) (undo-tree-id7229 . -126) (undo-tree-id7230 . -126) (undo-tree-id7231 . -126) (undo-tree-id7232 . -148) (undo-tree-id7233 . -148) (undo-tree-id7234 . -148) (undo-tree-id7235 . -148) (undo-tree-id7236 . -148) (undo-tree-id7237 . -148) (undo-tree-id7238 . -148) (undo-tree-id7239 . -148) (undo-tree-id7240 . -199) (undo-tree-id7241 . -199) (undo-tree-id7242 . -199) (undo-tree-id7243 . -199) (undo-tree-id7244 . -199) (undo-tree-id7245 . -199) (undo-tree-id7246 . -199) (undo-tree-id7247 . -199) (undo-tree-id7248 . -226) (undo-tree-id7249 . -226) (undo-tree-id7250 . -226) (undo-tree-id7251 . -226) (undo-tree-id7252 . -226) (undo-tree-id7253 . -226) (undo-tree-id7254 . -226) (undo-tree-id7255 . -226) (undo-tree-id7256 . -226) (undo-tree-id7257 . -226) (undo-tree-id7258 . -226) (undo-tree-id7259 . -226) (undo-tree-id7260 . -226) (undo-tree-id7261 . -226) (undo-tree-id7262 . -226) (undo-tree-id7263 . -293) (undo-tree-id7264 . -293) (undo-tree-id7265 . -293) (undo-tree-id7266 . -293) (undo-tree-id7267 . -293) (undo-tree-id7268 . -293) (undo-tree-id7269 . -293) (undo-tree-id7270 . -293) (undo-tree-id7271 . -293) (undo-tree-id7272 . -293) (undo-tree-id7273 . -293) (undo-tree-id7274 . -293) (undo-tree-id7275 . -293) (undo-tree-id7276 . -293) (undo-tree-id7277 . -293) (undo-tree-id7278 . -301) (undo-tree-id7279 . -301) (undo-tree-id7280 . -301) (undo-tree-id7281 . -301) (undo-tree-id7282 . -301) (undo-tree-id7283 . -301) (undo-tree-id7284 . -301) (undo-tree-id7285 . -301) (undo-tree-id7286 . -320) (undo-tree-id7287 . -320) (undo-tree-id7288 . -320) (undo-tree-id7289 . -320) (undo-tree-id7290 . -320) (undo-tree-id7291 . -320) (undo-tree-id7292 . -320) (undo-tree-id7293 . -320) (undo-tree-id7294 . -336) (undo-tree-id7295 . -336) (undo-tree-id7296 . -336) (undo-tree-id7297 . -336) (undo-tree-id7298 . -336) (undo-tree-id7299 . -336) (undo-tree-id7300 . -336) (undo-tree-id7301 . -336) (undo-tree-id7302 . -377) (undo-tree-id7303 . -377) (undo-tree-id7304 . -377) (undo-tree-id7305 . -377) (undo-tree-id7306 . -377) (undo-tree-id7307 . -377) (undo-tree-id7308 . -377) (undo-tree-id7309 . -377) (undo-tree-id7310 . -393) (undo-tree-id7311 . -393) (undo-tree-id7312 . -393) (undo-tree-id7313 . -393) (undo-tree-id7314 . -393) (undo-tree-id7315 . -393) (undo-tree-id7316 . -393) (undo-tree-id7317 . -393) (undo-tree-id7318 . -446) (undo-tree-id7319 . -446) (undo-tree-id7320 . -446) (undo-tree-id7321 . -446) (undo-tree-id7322 . -446) (undo-tree-id7323 . -446) (undo-tree-id7324 . -446) (undo-tree-id7325 . -446) (undo-tree-id7326 . -485) (undo-tree-id7327 . -485) (undo-tree-id7328 . -485) (undo-tree-id7329 . -485) (undo-tree-id7330 . -485) (undo-tree-id7331 . -485) (undo-tree-id7332 . -485) (undo-tree-id7333 . -485) (undo-tree-id7334 . -523) (undo-tree-id7335 . -523) (undo-tree-id7336 . -523) (undo-tree-id7337 . -523) (undo-tree-id7338 . -523) (undo-tree-id7339 . -523) (undo-tree-id7340 . -523) (undo-tree-id7341 . -523) (undo-tree-id7342 . -556) (undo-tree-id7343 . -556) (undo-tree-id7344 . -556) (undo-tree-id7345 . -556) (undo-tree-id7346 . -556) (undo-tree-id7347 . -556) (undo-tree-id7348 . -556) (undo-tree-id7349 . -556) (undo-tree-id7350 . -556) (undo-tree-id7351 . -556) (undo-tree-id7352 . -606) 1252) nil (25760 29891 498406 194000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 696) (undo-tree-id7087 . 1) (undo-tree-id7088 . -1)) nil (25760 29891 498244 414000) 0 nil])
([nil nil ((1 . 41057) (#("#!/usr/bin/env python

from custom_functs import *
import sklearn
import tensorflow as tf
from tensorflow import keras
import numpy as np
from pathlib import Path

# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rc(\"axes\", labelsize=14)
mpl.rc(\"xtick\", labelsize=12)
mpl.rc(\"ytick\", labelsize=12)


n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]

X_train.shape, y_train.shape



fig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))
for col in range(3):
    plt.sca(axes[col])
    plot_series(
        X_valid[col, :, 0],
        y_valid[col, 0],
        y_label=(\"$x(t)$\" if col == 0 else None),
        legend=(col == 0),
    )
save_fig(\"time_series_plot\")
plt.show()


# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.

# ## Computing Some Baselines

# Naive predictions (just predict the last observed value):

# In[6]:


y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))


# In[7]:


plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Linear predictions:

# In[8]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(1)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[9]:


model.evaluate(X_valid, y_valid)


# In[10]:


def plot_learning_curves(loss, val_loss):
    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")
    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")
    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    plt.axis([1, 20, 0, 0.05])
    plt.legend(fontsize=14)
    plt.xlabel(\"Epochs\")
    plt.ylabel(\"Loss\")
    plt.grid(True)


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[11]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Using a Simple RNN

# In[12]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([keras.layers.SimpleRNN(1, input_shape=[None, 1])])

optimizer = keras.optimizers.Adam(learning_rate=0.005)
model.compile(loss=\"mse\", optimizer=optimizer)
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[13]:


model.evaluate(X_valid, y_valid)


# In[14]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[15]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Deep RNNs

# In[16]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[17]:


model.evaluate(X_valid, y_valid)


# In[18]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[19]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Make the second `SimpleRNN` layer return only the last output:

# In[20]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))


# In[21]:


model.evaluate(X_valid, y_valid)


# In[22]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[23]:


y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Forecasting Several Steps Ahead

# In[24]:


np.random.seed(43)  # not 42, as it would give the first series in the train set

series = generate_time_series(1, n_steps + 10)
X_new, Y_new = series[:, :n_steps], series[:, n_steps:]
X = X_new
for step_ahead in range(10):
    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:]


# In[25]:


Y_pred.shape


# In[26]:


def plot_multiple_forecasts(X, Y, Y_pred):
    n_steps = X.shape[1]
    ahead = Y.shape[1]
    plot_series(X[0, :, 0])
    plt.plot(np.arange(n_steps, n_steps + ahead), Y[0, :, 0], \"bo-\", label=\"Actual\")
    plt.plot(
        np.arange(n_steps, n_steps + ahead),
        Y_pred[0, :, 0],
        \"rx-\",
        label=\"Forecast\",
        markersize=10,
    )
    plt.axis([0, n_steps + ahead, -1, 1])
    plt.legend(fontsize=14)


plot_multiple_forecasts(X_new, Y_new, Y_pred)
save_fig(\"forecast_ahead_plot\")
plt.show()


# Now let's use this model to predict the next 10 values. We first need to regenerate the sequences with 9 more time steps.

# In[27]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, Y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, Y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, Y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


# Now let's predict the next 10 values one by one:

# In[28]:


X = X_valid
for step_ahead in range(10):
    y_pred_one = model.predict(X)[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:, 0]


# In[29]:


Y_pred.shape


# In[30]:


np.mean(keras.metrics.mean_squared_error(Y_valid, Y_pred))


# Let's compare this performance with some baselines: naive predictions and a simple linear model:

# In[31]:


Y_naive_pred = np.tile(
    X_valid[:, -1], 10
)  # take the last time step value, and repeat it 10 times
np.mean(keras.metrics.mean_squared_error(Y_valid, Y_naive_pred))


# In[32]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(10)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Now let's create an RNN that predicts all 10 next values at once:

# In[33]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(10),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[34]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, -10:, :]
Y_pred = model.predict(X_new)[..., np.newaxis]


# In[35]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's create an RNN that predicts the next 10 steps at each time step. That is, instead of just forecasting time steps 50 to 59 based on time steps 0 to 49, it will forecast time steps 1 to 10 at time step 0, then time steps 2 to 11 at time step 1, and so on, and finally it will forecast time steps 50 to 59 at the last time step. Notice that the model is causal: when it makes predictions at any time step, it can only see past time steps.

# In[36]:


np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]
Y = np.empty((10000, n_steps, 10))
for step_ahead in range(1, 10 + 1):
    Y[..., step_ahead - 1] = series[..., step_ahead : step_ahead + n_steps, 0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]


# In[37]:


X_train.shape, Y_train.shape


# In[38]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)


def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])


model.compile(
    loss=\"mse\",
    optimizer=keras.optimizers.Adam(learning_rate=0.01),
    metrics=[last_time_step_mse],
)
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[39]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[40]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # Deep RNN with Batch Norm

# In[41]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.BatchNormalization(),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.BatchNormalization(),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Deep RNNs with Layer Norm

# In[42]:


from tensorflow.keras.layers import LayerNormalization


# In[43]:


class LNSimpleRNNCell(keras.layers.Layer):
    def __init__(self, units, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.state_size = units
        self.output_size = units
        self.simple_rnn_cell = keras.layers.SimpleRNNCell(units, activation=None)
        self.layer_norm = LayerNormalization()
        self.activation = keras.activations.get(activation)

    def get_initial_state(self, inputs=None, batch_size=None, dtype=None):
        if inputs is not None:
            batch_size = tf.shape(inputs)[0]
            dtype = inputs.dtype
        return [tf.zeros([batch_size, self.state_size], dtype=dtype)]

    def call(self, inputs, states):
        outputs, new_states = self.simple_rnn_cell(inputs, states)
        norm_outputs = self.activation(self.layer_norm(outputs))
        return norm_outputs, [norm_outputs]


# In[44]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.RNN(
            LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]
        ),
        keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Creating a Custom RNN Class

# In[45]:


class MyRNN(keras.layers.Layer):
    def __init__(self, cell, return_sequences=False, **kwargs):
        super().__init__(**kwargs)
        self.cell = cell
        self.return_sequences = return_sequences
        self.get_initial_state = getattr(
            self.cell, \"get_initial_state\", self.fallback_initial_state
        )

    def fallback_initial_state(self, inputs):
        batch_size = tf.shape(inputs)[0]
        return [tf.zeros([batch_size, self.cell.state_size], dtype=inputs.dtype)]

    @tf.function
    def call(self, inputs):
        states = self.get_initial_state(inputs)
        shape = tf.shape(inputs)
        batch_size = shape[0]
        n_steps = shape[1]
        sequences = tf.TensorArray(
            inputs.dtype, size=(n_steps if self.return_sequences else 0)
        )
        outputs = tf.zeros(
            shape=[batch_size, self.cell.output_size], dtype=inputs.dtype
        )
        for step in tf.range(n_steps):
            outputs, states = self.cell(inputs[:, step], states)
            if self.return_sequences:
                sequences = sequences.write(step, outputs)
        if self.return_sequences:
            return tf.transpose(sequences.stack(), [1, 0, 2])
        else:
            return outputs


# In[46]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        MyRNN(LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]),
        MyRNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # LSTMs

# In[47]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.LSTM(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[48]:


model.evaluate(X_valid, Y_valid)


# In[49]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[50]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[51]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # GRUs

# In[52]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.GRU(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# In[53]:


model.evaluate(X_valid, Y_valid)


# In[54]:


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()


# In[55]:


np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]


# In[56]:


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# ## Using One-Dimensional Convolutional Layers to Process Sequences

# ```
# 1D conv layer with kernel size 4, stride 2, VALID padding:
#
#               |-----2-----|     |-----5---...------|     |-----23----|
#         |-----1-----|     |-----4-----|   ...      |-----22----|
#   |-----0----|      |-----3-----|     |---...|-----21----|
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 42 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 43 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 52 53 54 55 56 57 58 59
#
# Output:
#
# X:     0/3   2/5   4/7   6/9   8/11 10/13 .../43 42/45 44/47 46/49
# Y:     4/13  6/15  8/17 10/19 12/21 14/23 .../53 46/55 48/57 50/59
# ```

# In[57]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.Conv1D(
            filters=20, kernel_size=4, strides=2, padding=\"valid\", input_shape=[None, 1]
        ),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(
    X_train, Y_train[:, 3::2], epochs=20, validation_data=(X_valid, Y_valid[:, 3::2])
)


# ## WaveNet

# ```
# C2  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\.../\\ /\\ /\\ /\\ /\\ /\\
#    \\  /  \\  /  \\  /  \\  /  \\  /  \\  /  \\       /  \\  /  \\  /  \\
#      /    \\      /    \\      /    \\                 /    \\
# C1  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\  /\\ /.../\\ /\\ /\\ /\\ /\\ /\\ /\\
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 53 54 55 56 57 58 59
# ```

# In[58]:


np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape=[None, 1]))
for rate in (1, 2, 4, 8) * 2:
    model.add(
        keras.layers.Conv1D(
            filters=20,
            kernel_size=2,
            padding=\"causal\",
            activation=\"relu\",
            dilation_rate=rate,
        )
    )
model.add(keras.layers.Conv1D(filters=10, kernel_size=1))
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Here is the original WaveNet defined in the paper: it uses Gated Activation Units instead of ReLU and parametrized skip connections, plus it pads with zeros on the left to avoid getting shorter and shorter sequences:

# In[59]:


class GatedActivationUnit(keras.layers.Layer):
    def __init__(self, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.activation = keras.activations.get(activation)

    def call(self, inputs):
        n_filters = inputs.shape[-1] // 2
        linear_output = self.activation(inputs[..., :n_filters])
        gate = keras.activations.sigmoid(inputs[..., n_filters:])
        return self.activation(linear_output) * gate


# In[60]:


def wavenet_residual_block(inputs, n_filters, dilation_rate):
    z = keras.layers.Conv1D(
        2 * n_filters, kernel_size=2, padding=\"causal\", dilation_rate=dilation_rate
    )(inputs)
    z = GatedActivationUnit()(z)
    z = keras.layers.Conv1D(n_filters, kernel_size=1)(z)
    return keras.layers.Add()([z, inputs]), z


# In[61]:


keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

n_layers_per_block = 3  # 10 in the paper
n_blocks = 1  # 3 in the paper
n_filters = 32  # 128 in the paper
n_outputs = 10  # 256 in the paper

inputs = keras.layers.Input(shape=[None, 1])
z = keras.layers.Conv1D(n_filters, kernel_size=2, padding=\"causal\")(inputs)
skip_to_last = []
for dilation_rate in [2 ** i for i in range(n_layers_per_block)] * n_blocks:
    z, skip = wavenet_residual_block(z, n_filters, dilation_rate)
    skip_to_last.append(skip)
z = keras.activations.relu(keras.layers.Add()(skip_to_last))
z = keras.layers.Conv1D(n_filters, kernel_size=1, activation=\"relu\")(z)
Y_proba = keras.layers.Conv1D(n_outputs, kernel_size=1, activation=\"softmax\")(z)

model = keras.models.Model(inputs=[inputs], outputs=[Y_proba])


# In[62]:


model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=2, validation_data=(X_valid, Y_valid))


# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.

# # Exercise solutions

# ## 1. to 8.

# See Appendix A.

# ## 9. Tackling the SketchRNN Dataset

# _Exercise: Train a classification model for the SketchRNN dataset, available in TensorFlow Datasets._

# The dataset is not available in TFDS yet, the [pull request](https://github.com/tensorflow/datasets/pull/361) is still work in progress. Luckily, the data is conveniently available as TFRecords, so let's download it (it might take a while, as it's about 1 GB large, with 3,450,000 training sketches and 345,000 test sketches):

# In[63]:


DOWNLOAD_ROOT = \"http://download.tensorflow.org/data/\"
FILENAME = \"quickdraw_tutorial_dataset_v1.tar.gz\"
filepath = keras.utils.get_file(
    FILENAME, DOWNLOAD_ROOT + FILENAME, cache_subdir=\"datasets/quickdraw\", extract=True
)


# In[64]:


quickdraw_dir = Path(filepath).parent
train_files = sorted([str(path) for path in quickdraw_dir.glob(\"training.tfrecord-*\")])
eval_files = sorted([str(path) for path in quickdraw_dir.glob(\"eval.tfrecord-*\")])


# In[65]:


train_files


# In[66]:


eval_files


# In[67]:


with open(quickdraw_dir / \"eval.tfrecord.classes\") as test_classes_file:
    test_classes = test_classes_file.readlines()

with open(quickdraw_dir / \"training.tfrecord.classes\") as train_classes_file:
    train_classes = train_classes_file.readlines()


# In[68]:


assert train_classes == test_classes
class_names = [name.strip().lower() for name in train_classes]


# In[69]:


sorted(class_names)


# In[70]:


def parse(data_batch):
    feature_descriptions = {
        \"ink\": tf.io.VarLenFeature(dtype=tf.float32),
        \"shape\": tf.io.FixedLenFeature([2], dtype=tf.int64),
        \"class_index\": tf.io.FixedLenFeature([1], dtype=tf.int64),
    }
    examples = tf.io.parse_example(data_batch, feature_descriptions)
    flat_sketches = tf.sparse.to_dense(examples[\"ink\"])
    sketches = tf.reshape(flat_sketches, shape=[tf.size(data_batch), -1, 3])
    lengths = examples[\"shape\"][:, 0]
    labels = examples[\"class_index\"][:, 0]
    return sketches, lengths, labels


# In[71]:


def quickdraw_dataset(
    filepaths,
    batch_size=32,
    shuffle_buffer_size=None,
    n_parse_threads=5,
    n_read_threads=5,
    cache=False,
):
    dataset = tf.data.TFRecordDataset(filepaths, num_parallel_reads=n_read_threads)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(parse, num_parallel_calls=n_parse_threads)
    return dataset.prefetch(1)


# In[72]:


train_set = quickdraw_dataset(train_files, shuffle_buffer_size=10000)
valid_set = quickdraw_dataset(eval_files[:5])
test_set = quickdraw_dataset(eval_files[5:])


# In[73]:


for sketches, lengths, labels in train_set.take(1):
    print(\"sketches =\", sketches)
    print(\"lengths =\", lengths)
    print(\"labels =\", labels)


# In[74]:


def draw_sketch(sketch, label=None):
    origin = np.array([[0.0, 0.0, 0.0]])
    sketch = np.r_[origin, sketch]
    stroke_end_indices = np.argwhere(sketch[:, -1] == 1.0)[:, 0]
    coordinates = np.cumsum(sketch[:, :2], axis=0)
    strokes = np.split(coordinates, stroke_end_indices + 1)
    title = class_names[label.numpy()] if label is not None else \"Try to guess\"
    plt.title(title)
    plt.plot(coordinates[:, 0], -coordinates[:, 1], \"y:\")
    for stroke in strokes:
        plt.plot(stroke[:, 0], -stroke[:, 1], \".-\")
    plt.axis(\"off\")


def draw_sketches(sketches, lengths, labels):
    n_sketches = len(sketches)
    n_cols = 4
    n_rows = (n_sketches - 1) // n_cols + 1
    plt.figure(figsize=(n_cols * 3, n_rows * 3.5))
    for index, sketch, length, label in zip(
        range(n_sketches), sketches, lengths, labels
    ):
        plt.subplot(n_rows, n_cols, index + 1)
        draw_sketch(sketch[:length], label)
    plt.show()


for sketches, lengths, labels in train_set.take(1):
    draw_sketches(sketches, lengths, labels)


# Most sketches are composed of less than 100 points:

# In[75]:


lengths = np.concatenate([lengths for _, lengths, _ in train_set.take(1000)])
plt.hist(lengths, bins=150, density=True)
plt.axis([0, 200, 0, 0.03])
plt.xlabel(\"length\")
plt.ylabel(\"density\")
plt.show()


# In[76]:


def crop_long_sketches(dataset, max_length=100):
    return dataset.map(lambda inks, lengths, labels: (inks[:, :max_length], labels))


cropped_train_set = crop_long_sketches(train_set)
cropped_valid_set = crop_long_sketches(valid_set)
cropped_test_set = crop_long_sketches(test_set)


# In[77]:


model = keras.models.Sequential(
    [
        keras.layers.Conv1D(32, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(64, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(128, kernel_size=3, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(128, return_sequences=True),
        keras.layers.LSTM(128),
        keras.layers.Dense(len(class_names), activation=\"softmax\"),
    ]
)
optimizer = keras.optimizers.SGD(learning_rate=1e-2, clipnorm=1.0)
model.compile(
    loss=\"sparse_categorical_crossentropy\",
    optimizer=optimizer,
    metrics=[\"accuracy\", \"sparse_top_k_categorical_accuracy\"],
)
history = model.fit(cropped_train_set, epochs=2, validation_data=cropped_valid_set)


# In[78]:


y_test = np.concatenate([labels for _, _, labels in test_set])
y_probas = model.predict(test_set)


# In[79]:


np.mean(keras.metrics.sparse_top_k_categorical_accuracy(y_test, y_probas))


# In[80]:


n_new = 10
Y_probas = model.predict(sketches)
top_k = tf.nn.top_k(Y_probas, k=5)
for index in range(n_new):
    plt.figure(figsize=(3, 3.5))
    draw_sketch(sketches[index])
    plt.show()
    print(\"Top-5 predictions:\".format(index + 1))
    for k in range(5):
        class_name = class_names[top_k.indices[index, k]]
        proba = 100 * top_k.values[index, k]
        print(\"  {}. {} {:.3f}%\".format(k + 1, class_name, proba))
    print(\"Answer: {}\".format(class_names[labels[index].numpy()]))


# In[81]:


model.save(\"my_sketchrnn\")


# ## 10. Bach Chorales
# _Exercise: Download the [Bach chorales](https://homl.info/bach) dataset and unzip it. It is composed of 382 chorales composed by Johann Sebastian Bach. Each chorale is 100 to 640 time steps long, and each time step contains 4 integers, where each integer corresponds to a note's index on a piano (except for the value 0, which means that no note is played). Train a model—recurrent, convolutional, or both—that can predict the next time step (four notes), given a sequence of time steps from a chorale. Then use this model to generate Bach-like music, one note at a time: you can do this by giving the model the start of a chorale and asking it to predict the next time step, then appending these time steps to the input sequence and asking the model for the next note, and so on. Also make sure to check out [Google's Coconet model](https://homl.info/coconet), which was used for a nice [Google doodle about Bach](https://www.google.com/doodles/celebrating-johann-sebastian-bach)._
#
#

# In[82]:


DOWNLOAD_ROOT = (
    \"https://github.com/ageron/handson-ml2/raw/master/datasets/jsb_chorales/\"
)
FILENAME = \"jsb_chorales.tgz\"
filepath = keras.utils.get_file(
    FILENAME,
    DOWNLOAD_ROOT + FILENAME,
    cache_subdir=\"datasets/jsb_chorales\",
    extract=True,
)


# In[83]:


jsb_chorales_dir = Path(filepath).parent
train_files = sorted(jsb_chorales_dir.glob(\"train/chorale_*.csv\"))
valid_files = sorted(jsb_chorales_dir.glob(\"valid/chorale_*.csv\"))
test_files = sorted(jsb_chorales_dir.glob(\"test/chorale_*.csv\"))


# In[84]:


import pandas as pd


def load_chorales(filepaths):
    return [pd.read_csv(filepath).values.tolist() for filepath in filepaths]


train_chorales = load_chorales(train_files)
valid_chorales = load_chorales(valid_files)
test_chorales = load_chorales(test_files)


# In[85]:


train_chorales[0]


# Notes range from 36 (C1 = C on octave 1) to 81 (A5 = A on octave 5), plus 0 for silence:

# In[86]:


notes = set()
for chorales in (train_chorales, valid_chorales, test_chorales):
    for chorale in chorales:
        for chord in chorale:
            notes |= set(chord)

n_notes = len(notes)
min_note = min(notes - {0})
max_note = max(notes)

assert min_note == 36
assert max_note == 81


# Let's write a few functions to listen to these chorales (you don't need to understand the details here, and in fact there are certainly simpler ways to do this, for example using MIDI players, but I just wanted to have a bit of fun writing a synthesizer):

# In[87]:


from IPython.display import Audio


def notes_to_frequencies(notes):
    # Frequency doubles when you go up one octave; there are 12 semi-tones
    # per octave; Note A on octave 4 is 440 Hz, and it is note number 69.
    return 2 ** ((np.array(notes) - 69) / 12) * 440


def frequencies_to_samples(frequencies, tempo, sample_rate):
    note_duration = 60 / tempo  # the tempo is measured in beats per minutes
    # To reduce click sound at every beat, we round the frequencies to try to
    # get the samples close to zero at the end of each note.
    frequencies = np.round(note_duration * frequencies) / note_duration
    n_samples = int(note_duration * sample_rate)
    time = np.linspace(0, note_duration, n_samples)
    sine_waves = np.sin(2 * np.pi * frequencies.reshape(-1, 1) * time)
    # Removing all notes with frequencies ≤ 9 Hz (includes note 0 = silence)
    sine_waves *= (frequencies > 9.0).reshape(-1, 1)
    return sine_waves.reshape(-1)


def chords_to_samples(chords, tempo, sample_rate):
    freqs = notes_to_frequencies(chords)
    freqs = np.r_[freqs, freqs[-1:]]  # make last note a bit longer
    merged = np.mean(
        [frequencies_to_samples(melody, tempo, sample_rate) for melody in freqs.T],
        axis=0,
    )
    n_fade_out_samples = sample_rate * 60 // tempo  # fade out last note
    fade_out = np.linspace(1.0, 0.0, n_fade_out_samples) ** 2
    merged[-n_fade_out_samples:] *= fade_out
    return merged


def play_chords(chords, tempo=160, amplitude=0.1, sample_rate=44100, filepath=None):
    samples = amplitude * chords_to_samples(chords, tempo, sample_rate)
    if filepath:
        from scipy.io import wavfile

        samples = (2 ** 15 * samples).astype(np.int16)
        wavfile.write(filepath, sample_rate, samples)
        return display(Audio(filepath))
    else:
        return display(Audio(samples, rate=sample_rate))


# Now let's listen to a few chorales:

# In[88]:


for index in range(3):
    play_chords(train_chorales[index])


# Divine! :)

# In order to be able to generate new chorales, we want to train a model that can predict the next chord given all the previous chords. If we naively try to predict the next chord in one shot, predicting all 4 notes at once, we run the risk of getting notes that don't go very well together (believe me, I tried). It's much better and simpler to predict one note at a time. So we will need to preprocess every chorale, turning each chord into an arpegio (i.e., a sequence of notes rather than notes played simultaneuously). So each chorale will be a long sequence of notes (rather than chords), and we can just train a model that can predict the next note given all the previous notes. We will use a sequence-to-sequence approach, where we feed a window to the neural net, and it tries to predict that same window shifted one time step into the future.
#
# We will also shift the values so that they range from 0 to 46, where 0 represents silence, and values 1 to 46 represent notes 36 (C1) to 81 (A5).
#
# And we will train the model on windows of 128 notes (i.e., 32 chords).
#
# Since the dataset fits in memory, we could preprocess the chorales in RAM using any Python code we like, but I will demonstrate here how to do all the preprocessing using tf.data (there will be more details about creating windows using tf.data in the next chapter).

# In[89]:


def create_target(batch):
    X = batch[:, :-1]
    Y = batch[:, 1:]  # predict next note in each arpegio, at each step
    return X, Y


def preprocess(window):
    window = tf.where(window == 0, window, window - min_note + 1)  # shift values
    return tf.reshape(window, [-1])  # convert to arpegio


def bach_dataset(
    chorales,
    batch_size=32,
    shuffle_buffer_size=None,
    window_size=32,
    window_shift=16,
    cache=True,
):
    def batch_window(window):
        return window.batch(window_size + 1)

    def to_windows(chorale):
        dataset = tf.data.Dataset.from_tensor_slices(chorale)
        dataset = dataset.window(window_size + 1, window_shift, drop_remainder=True)
        return dataset.flat_map(batch_window)

    chorales = tf.ragged.constant(chorales, ragged_rank=1)
    dataset = tf.data.Dataset.from_tensor_slices(chorales)
    dataset = dataset.flat_map(to_windows).map(preprocess)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(create_target)
    return dataset.prefetch(1)


# Now let's create the training set, the validation set and the test set:

# In[90]:


train_set = bach_dataset(train_chorales, shuffle_buffer_size=1000)
valid_set = bach_dataset(valid_chorales)
test_set = bach_dataset(test_chorales)


# Now let's create the model:
#
# * We could feed the note values directly to the model, as floats, but this would probably not give good results. Indeed, the relationships between notes are not that simple: for example, if you replace a C3 with a C4, the melody will still sound fine, even though these notes are 12 semi-tones apart (i.e., one octave). Conversely, if you replace a C3 with a C\\#3, it's very likely that the chord will sound horrible, despite these notes being just next to each other. So we will use an `Embedding` layer to convert each note to a small vector representation (see Chapter 16 for more details on embeddings). We will use 5-dimensional embeddings, so the output of this first layer will have a shape of `[batch_size, window_size, 5]`.
# * We will then feed this data to a small WaveNet-like neural network, composed of a stack of 4 `Conv1D` layers with doubling dilation rates. We will intersperse these layers with `BatchNormalization` layers for faster better convergence.
# * Then one `LSTM` layer to try to capture long-term patterns.
# * And finally a `Dense` layer to produce the final note probabilities. It will predict one probability for each chorale in the batch, for each time step, and for each possible note (including silence). So the output shape will be `[batch_size, window_size, 47]`.

# In[91]:


n_embedding_dims = 5

model = keras.models.Sequential(
    [
        keras.layers.Embedding(
            input_dim=n_notes, output_dim=n_embedding_dims, input_shape=[None]
        ),
        keras.layers.Conv1D(32, kernel_size=2, padding=\"causal\", activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            48, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=2
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            64, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=4
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            96, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=8
        ),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(256, return_sequences=True),
        keras.layers.Dense(n_notes, activation=\"softmax\"),
    ]
)

model.summary()


# Now we're ready to compile and train the model!

# In[92]:


optimizer = keras.optimizers.Nadam(learning_rate=1e-3)
model.compile(
    loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"]
)
model.fit(train_set, epochs=20, validation_data=valid_set)


# I have not done much hyperparameter search, so feel free to iterate on this model now and try to optimize it. For example, you could try removing the `LSTM` layer and replacing it with `Conv1D` layers. You could also play with the number of layers, the learning rate, the optimizer, and so on.

# Once you're satisfied with the performance of the model on the validation set, you can save it and evaluate it one last time on the test set:

# In[93]:


model.save(\"my_bach_model.h5\")
model.evaluate(test_set)


# **Note:** There's no real need for a test set in this exercise, since we will perform the final evaluation by just listening to the music produced by the model. So if you want, you can add the test set to the train set, and train the model again, hopefully getting a slightly better model.

# Now let's write a function that will generate a new chorale. We will give it a few seed chords, it will convert them to arpegios (the format expected by the model), and use the model to predict the next note, then the next, and so on. In the end, it will group the notes 4 by 4 to create chords again, and return the resulting chorale.

# **Warning**: `model.predict_classes(X)` is deprecated. It is replaced with `np.argmax(model.predict(X), axis=-1)`.

# In[94]:


def generate_chorale(model, seed_chords, length):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            # next_note = model.predict_classes(arpegio)[:1, -1:]
            next_note = np.argmax(model.predict(arpegio), axis=-1)[:1, -1:]
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# To test this function, we need some seed chords. Let's use the first 8 chords of one of the test chorales (it's actually just 2 different chords, each played 4 times):

# In[95]:


seed_chords = test_chorales[2][:8]
play_chords(seed_chords, amplitude=0.2)


# Now we are ready to generate our first chorale! Let's ask the function to generate 56 more chords, for a total of 64 chords, i.e., 16 bars (assuming 4 chords per bar, i.e., a 4/4 signature):

# In[96]:


new_chorale = generate_chorale(model, seed_chords, 56)
play_chords(new_chorale)


# This approach has one major flaw: it is often too conservative. Indeed, the model will not take any risk, it will always choose the note with the highest score, and since repeating the previous note generally sounds good enough, it's the least risky option, so the algorithm will tend to make notes last longer and longer. Pretty boring. Plus, if you run the model multiple times, it will always generate the same melody.
#
# So let's spice things up a bit! Instead of always picking the note with the highest score, we will pick the next note randomly, according to the predicted probabilities. For example, if the model predicts a C3 with 75% probability, and a G3 with a 25% probability, then we will pick one of these two notes randomly, with these probabilities. We will also add a `temperature` parameter that will control how \"hot\" (i.e., daring) we want the system to feel. A high temperature will bring the predicted probabilities closer together, reducing the probability of the likely notes and increasing the probability of the unlikely ones.

# In[97]:


def generate_chorale_v2(model, seed_chords, length, temperature=1):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            next_note_probas = model.predict(arpegio)[0, -1:]
            rescaled_logits = tf.math.log(next_note_probas) / temperature
            next_note = tf.random.categorical(rescaled_logits, num_samples=1)
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# Let's generate 3 chorales using this new function: one cold, one medium, and one hot (feel free to experiment with other seeds, lengths and temperatures). The code saves each chorale to a separate file. You can run these cells over an over again until you generate a masterpiece!
#
# **Please share your most beautiful generated chorale with me on Twitter @aureliengeron, I would really appreciate it! :))**

# In[98]:


new_chorale_v2_cold = generate_chorale_v2(model, seed_chords, 56, temperature=0.8)
play_chords(new_chorale_v2_cold, filepath=\"bach_cold.wav\")


# In[99]:


new_chorale_v2_medium = generate_chorale_v2(model, seed_chords, 56, temperature=1.0)
play_chords(new_chorale_v2_medium, filepath=\"bach_medium.wav\")


# In[100]:


new_chorale_v2_hot = generate_chorale_v2(model, seed_chords, 56, temperature=1.5)
play_chords(new_chorale_v2_hot, filepath=\"bach_hot.wav\")


# Lastly, you can try a fun social experiment: send your friends a few of your favorite generated chorales, plus the real chorale, and ask them to guess which one is the real one!

# In[101]:


play_chords(test_chorales[2][:64], filepath=\"bach_test_4.wav\")
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 22 (face font-lock-comment-face fontified t) 22 23 (fontified t) 23 27 (face font-lock-keyword-face fontified t) 27 42 (fontified t) 42 48 (face font-lock-keyword-face fontified t) 48 51 (fontified t) 51 57 (face font-lock-keyword-face fontified t) 57 66 (fontified t) 66 72 (face font-lock-keyword-face fontified t) 72 84 (fontified t) 84 86 (face font-lock-keyword-face fontified t) 86 90 (fontified t) 90 94 (face font-lock-keyword-face fontified t) 94 106 (fontified t) 106 112 (face font-lock-keyword-face fontified t) 112 119 (fontified t) 119 125 (face font-lock-keyword-face fontified t) 125 132 (fontified t) 132 134 (face font-lock-keyword-face fontified t) 134 138 (fontified t) 138 142 (face font-lock-keyword-face fontified t) 142 151 (fontified t) 151 157 (face font-lock-keyword-face fontified t) 157 164 (fontified t) 164 166 (face font-lock-comment-delimiter-face fontified t) 166 216 (face font-lock-comment-face fontified t) 216 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-1-face) fontified t) 231 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-1-face) fontified t) 234 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-1-face) fontified t) 254 256 (fontified t) 256 257 (face (rainbow-delimiters-depth-1-face) fontified t) 257 259 (fontified t) 259 265 (face font-lock-keyword-face fontified t) 265 277 (fontified t) 277 279 (face font-lock-keyword-face fontified t) 279 284 (fontified t) 284 290 (face font-lock-keyword-face fontified t) 290 309 (fontified t) 309 311 (face font-lock-keyword-face fontified t) 311 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-1-face) fontified t) 324 330 (face font-lock-string-face fontified t) 330 344 (fontified t) 344 345 (face (rainbow-delimiters-depth-1-face) fontified t) 345 352 (fontified t) 352 353 (face (rainbow-delimiters-depth-1-face) fontified t) 353 360 (face font-lock-string-face fontified t) 360 374 (fontified t) 374 375 (face (rainbow-delimiters-depth-1-face) fontified t) 375 382 (fontified t) 382 383 (face (rainbow-delimiters-depth-1-face) fontified t) 383 390 (face font-lock-string-face fontified t) 390 404 (fontified t) 404 405 (face (rainbow-delimiters-depth-1-face) fontified t) 405 408 (fontified t) 408 415 (face font-lock-variable-name-face fontified t) 415 421 (fontified t) 421 427 (face font-lock-variable-name-face fontified t) 427 450 (fontified t) 450 451 (face (rainbow-delimiters-depth-1-face) fontified t) 451 469 (fontified t) 469 470 (face (rainbow-delimiters-depth-1-face) fontified t) 470 471 (fontified t) 471 478 (face font-lock-variable-name-face fontified t) 478 480 (fontified t) 480 487 (face font-lock-variable-name-face fontified t) 487 496 (fontified t) 496 497 (face (rainbow-delimiters-depth-1-face) fontified t) 497 500 (fontified t) 500 512 (fontified t) 512 513 (face (rainbow-delimiters-depth-1-face) fontified t) 513 521 (fontified t) 521 522 (face (rainbow-delimiters-depth-1-face) fontified t) 522 531 (fontified t) 531 532 (face (rainbow-delimiters-depth-1-face) fontified t) 532 533 (fontified t) 533 540 (face font-lock-variable-name-face fontified t) 540 542 (fontified t) 542 549 (face font-lock-variable-name-face fontified t) 549 558 (fontified t) 558 559 (face (rainbow-delimiters-depth-1-face) fontified t) 559 578 (fontified t) 578 579 (face (rainbow-delimiters-depth-1-face) fontified t) 579 587 (fontified t) 587 588 (face (rainbow-delimiters-depth-1-face) fontified t) 588 601 (fontified t) 601 602 (face (rainbow-delimiters-depth-1-face) fontified t) 602 603 (fontified t) 603 609 (face font-lock-variable-name-face fontified t) 609 611 (fontified t) 611 617 (face font-lock-variable-name-face fontified t) 617 626 (fontified t) 626 627 (face (rainbow-delimiters-depth-1-face) fontified t) 627 642 (fontified t) 642 643 (face (rainbow-delimiters-depth-1-face) fontified t) 643 651 (fontified t) 651 652 (face (rainbow-delimiters-depth-1-face) fontified t) 652 661 (fontified t) 661 662 (face (rainbow-delimiters-depth-1-face) fontified t) 662 664 (fontified t) 664 692 (fontified t) 692 693 (fontified t) 693 695 (fontified t) 695 696 (fontified t) 696 699 (face font-lock-variable-name-face fontified t) 699 701 (fontified t) 701 705 (face font-lock-variable-name-face fontified t) 705 720 (fontified t) 720 721 (face (rainbow-delimiters-depth-1-face) fontified t) 721 746 (fontified t) 746 750 (face font-lock-constant-face fontified t) 750 760 (fontified t) 760 761 (face (rainbow-delimiters-depth-2-face) fontified t) 761 766 (fontified t) 766 767 (face (rainbow-delimiters-depth-2-face) fontified t) 767 768 (face (rainbow-delimiters-depth-1-face) fontified t) 768 769 (fontified t) 769 772 (face font-lock-keyword-face fontified t) 772 777 (fontified t) 777 779 (face font-lock-keyword-face fontified t) 779 780 (fontified t) 780 785 (face font-lock-builtin-face fontified t) 785 786 (face (rainbow-delimiters-depth-1-face) fontified t) 786 787 (fontified t) 787 788 (face (rainbow-delimiters-depth-1-face) fontified t) 788 801 (fontified t) 801 802 (face (rainbow-delimiters-depth-1-face) fontified t) 802 806 (fontified t) 806 807 (face (rainbow-delimiters-depth-2-face) fontified t) 807 810 (fontified t) 810 811 (face (rainbow-delimiters-depth-2-face) fontified t) 811 812 (face (rainbow-delimiters-depth-1-face) fontified t) 812 828 (fontified t) 828 829 (face (rainbow-delimiters-depth-1-face) fontified t) 829 845 (fontified t) 845 846 (face (rainbow-delimiters-depth-2-face) fontified t) 846 855 (fontified t) 855 856 (face (rainbow-delimiters-depth-2-face) fontified t) 856 873 (fontified t) 873 874 (face (rainbow-delimiters-depth-2-face) fontified t) 874 880 (fontified t) 880 881 (face (rainbow-delimiters-depth-2-face) fontified t) 881 899 (fontified t) 899 900 (face (rainbow-delimiters-depth-2-face) fontified t) 900 908 (face font-lock-string-face fontified t) 908 909 (fontified t) 909 911 (face font-lock-keyword-face fontified t) 911 921 (fontified t) 921 925 (face font-lock-keyword-face fontified t) 925 926 (fontified t) 926 930 (face font-lock-constant-face fontified t) 930 931 (face (rainbow-delimiters-depth-2-face) fontified t) 931 933 (fontified t) 933 948 (fontified t) 948 949 (face (rainbow-delimiters-depth-2-face) fontified t) 949 957 (fontified t) 957 958 (face (rainbow-delimiters-depth-2-face) fontified t) 958 964 (fontified t) 964 965 (face (rainbow-delimiters-depth-1-face) fontified t) 965 974 (fontified t) 974 975 (face (rainbow-delimiters-depth-1-face) fontified t) 975 993 (face font-lock-string-face fontified t) 993 994 (face (rainbow-delimiters-depth-1-face) fontified t) 994 1003 (fontified t) 1003 1004 (face (rainbow-delimiters-depth-1-face) fontified t) 1004 1005 (face (rainbow-delimiters-depth-1-face) fontified t) 1005 1008 (fontified t) 1008 1010 (face font-lock-comment-delimiter-face fontified t) 1010 1073 (face font-lock-comment-face fontified t) 1073 1111 (face font-lock-comment-face fontified t) 1111 1195 (face font-lock-comment-face fontified t) 1195 1196 (face font-lock-comment-face fontified t) 1196 1271 (fontified t face font-lock-comment-face) 1271 1272 (fontified t) 1272 1274 (face font-lock-comment-delimiter-face fontified t) 1274 1302 (face font-lock-comment-face fontified t) 1302 1303 (fontified t) 1303 1305 (face font-lock-comment-delimiter-face fontified t) 1305 1363 (face font-lock-comment-face fontified t) 1363 1364 (fontified t) 1364 1366 (face font-lock-comment-delimiter-face fontified t) 1366 1373 (face font-lock-comment-face fontified t) 1373 1375 (fontified t) 1375 1381 (face font-lock-variable-name-face fontified t) 1381 1391 (fontified t) 1391 1392 (face (rainbow-delimiters-depth-1-face) fontified t) 1392 1397 (fontified t) 1397 1398 (face (rainbow-delimiters-depth-1-face) fontified t) 1398 1406 (fontified t) 1406 1407 (face (rainbow-delimiters-depth-1-face) fontified t) 1407 1438 (fontified t) 1438 1439 (face (rainbow-delimiters-depth-2-face) fontified t) 1439 1454 (fontified t) 1454 1455 (face (rainbow-delimiters-depth-2-face) fontified t) 1455 1456 (face (rainbow-delimiters-depth-1-face) fontified t) 1456 1459 (fontified t) 1459 1461 (face font-lock-comment-delimiter-face fontified t) 1461 1468 (face font-lock-comment-face fontified t) 1468 1481 (fontified t) 1481 1482 (face (rainbow-delimiters-depth-1-face) fontified t) 1482 1489 (fontified t) 1489 1490 (face (rainbow-delimiters-depth-2-face) fontified t) 1490 1497 (fontified t) 1497 1498 (face (rainbow-delimiters-depth-2-face) fontified t) 1498 1507 (fontified t) 1507 1508 (face (rainbow-delimiters-depth-2-face) fontified t) 1508 1512 (fontified t) 1512 1513 (face (rainbow-delimiters-depth-2-face) fontified t) 1513 1521 (fontified t) 1521 1522 (face (rainbow-delimiters-depth-2-face) fontified t) 1522 1526 (fontified t) 1526 1527 (face (rainbow-delimiters-depth-2-face) fontified t) 1527 1528 (face (rainbow-delimiters-depth-1-face) fontified t) 1528 1537 (fontified t) 1537 1538 (face (rainbow-delimiters-depth-1-face) fontified t) 1538 1539 (face (rainbow-delimiters-depth-1-face) fontified t) 1539 1542 (fontified t) 1542 1544 (face font-lock-comment-delimiter-face fontified t) 1544 1564 (face font-lock-comment-face fontified t) 1564 1565 (fontified t) 1565 1567 (face font-lock-comment-delimiter-face fontified t) 1567 1574 (face font-lock-comment-face fontified t) 1574 1590 (fontified t) 1590 1591 (face (rainbow-delimiters-depth-1-face) fontified t) 1591 1593 (fontified t) 1593 1594 (face (rainbow-delimiters-depth-1-face) fontified t) 1594 1613 (fontified t) 1613 1614 (face (rainbow-delimiters-depth-1-face) fontified t) 1614 1616 (fontified t) 1616 1617 (face (rainbow-delimiters-depth-1-face) fontified t) 1617 1619 (fontified t) 1619 1624 (face font-lock-variable-name-face fontified t) 1624 1650 (fontified t) 1650 1651 (face (rainbow-delimiters-depth-1-face) fontified t) 1651 1656 (fontified t) 1656 1657 (face (rainbow-delimiters-depth-2-face) fontified t) 1657 1677 (fontified t) 1677 1678 (face (rainbow-delimiters-depth-3-face) fontified t) 1678 1690 (fontified t) 1690 1691 (face (rainbow-delimiters-depth-4-face) fontified t) 1691 1696 (fontified t) 1696 1697 (face (rainbow-delimiters-depth-4-face) fontified t) 1697 1698 (face (rainbow-delimiters-depth-3-face) fontified t) 1698 1718 (fontified t) 1718 1719 (face (rainbow-delimiters-depth-3-face) fontified t) 1719 1720 (fontified t) 1720 1721 (face (rainbow-delimiters-depth-3-face) fontified t) 1721 1722 (face (rainbow-delimiters-depth-2-face) fontified t) 1722 1723 (fontified t) 1723 1724 (face (rainbow-delimiters-depth-1-face) fontified t) 1724 1732 (fontified t) 1732 1739 (face font-lock-builtin-face fontified t) 1739 1740 (face (rainbow-delimiters-depth-1-face) fontified t) 1740 1745 (fontified t) 1745 1750 (face font-lock-string-face fontified t) 1750 1762 (fontified t) 1762 1768 (face font-lock-string-face fontified t) 1768 1769 (face (rainbow-delimiters-depth-1-face) fontified t) 1769 1770 (fontified t) 1770 1771 (face font-lock-variable-name-face fontified t) 1771 1777 (fontified t face font-lock-variable-name-face) 1777 1789 (fontified t) 1789 1790 (fontified t face (rainbow-delimiters-depth-1-face)) 1790 1835 (fontified t) 1835 1836 (fontified t face (rainbow-delimiters-depth-2-face)) 1836 1852 (fontified t) 1852 1853 (fontified t face (rainbow-delimiters-depth-2-face)) 1853 1854 (fontified t face (rainbow-delimiters-depth-1-face)) 1854 1855 (fontified t)) . 1) (undo-tree-id5393 . -695) (undo-tree-id5394 . -695) (undo-tree-id5395 . -695) (undo-tree-id5396 . -695) (undo-tree-id5397 . 40362) (undo-tree-id5398 . -695) (undo-tree-id5399 . -695) (undo-tree-id5400 . -49) (undo-tree-id5401 . -49) (undo-tree-id5402 . -49) (undo-tree-id5403 . -49) (undo-tree-id5404 . -49) (undo-tree-id5405 . -49) (undo-tree-id5406 . -49) (undo-tree-id5407 . -49) (undo-tree-id5408 . -49) (undo-tree-id5409 . -49) (undo-tree-id5410 . -51) (undo-tree-id5411 . -51) (undo-tree-id5412 . -51) (undo-tree-id5413 . -51) (undo-tree-id5414 . -51) (undo-tree-id5415 . -51) (undo-tree-id5416 . -51) (undo-tree-id5417 . -23) (undo-tree-id5418 . -27) (undo-tree-id5419 . -51) (undo-tree-id5420 . -57) (undo-tree-id5421 . -259) (undo-tree-id5422 . -265) (undo-tree-id5423 . -284) (undo-tree-id5424 . -290) (undo-tree-id5425 . -430) (undo-tree-id5426 . -450) (undo-tree-id5427 . -966) (undo-tree-id5428 . -974) (undo-tree-id5429 . -1087) (undo-tree-id5430 . -1096) (undo-tree-id5431 . -1845) (undo-tree-id5432 . -1852) (undo-tree-id5433 . -2112) (undo-tree-id5434 . -2116) (undo-tree-id5435 . -2686) (undo-tree-id5436 . -2687) (undo-tree-id5437 . -2869) (undo-tree-id5438 . -2876) (undo-tree-id5439 . -3333) (undo-tree-id5440 . -3334) (undo-tree-id5441 . -3558) (undo-tree-id5442 . -3565) (undo-tree-id5443 . -4072) (undo-tree-id5444 . -4073) (undo-tree-id5445 . -4270) (undo-tree-id5446 . -4277) (undo-tree-id5447 . -4672) (undo-tree-id5448 . -4675) (undo-tree-id5449 . -4686) (undo-tree-id5450 . -4706) (undo-tree-id5451 . -5196) (undo-tree-id5452 . -5202) (undo-tree-id5453 . -5477) (undo-tree-id5454 . -5485) (undo-tree-id5455 . -5597) (undo-tree-id5456 . -5607) (undo-tree-id5457 . -5701) (undo-tree-id5458 . -5721) (undo-tree-id5459 . -6365) (undo-tree-id5460 . -6371) (undo-tree-id5461 . -6854) (undo-tree-id5462 . -6861) (undo-tree-id5463 . -7108) (undo-tree-id5464 . -7109) (undo-tree-id5465 . -7307) (undo-tree-id5466 . -7314) (undo-tree-id5467 . -7360) (undo-tree-id5468 . -7380) (undo-tree-id5469 . -7643) (undo-tree-id5470 . -7647) (undo-tree-id5471 . -8069) (undo-tree-id5472 . -8089) (undo-tree-id5473 . -8338) (undo-tree-id5474 . -8339) (undo-tree-id5475 . -8644) (undo-tree-id5476 . -8645) (undo-tree-id5477 . -9093) (undo-tree-id5478 . -9100) (undo-tree-id5479 . -9146) (undo-tree-id5480 . -9166) (undo-tree-id5481 . -9561) (undo-tree-id5482 . -9562) (undo-tree-id5483 . -9929) (undo-tree-id5484 . -9936) (undo-tree-id5485 . -9984) (undo-tree-id5486 . -9988) (undo-tree-id5487 . -10332) (undo-tree-id5488 . -10336) (undo-tree-id5489 . -11414) (undo-tree-id5490 . -11421) (undo-tree-id5491 . -11968) (undo-tree-id5492 . -11969) (undo-tree-id5493 . -12899) (undo-tree-id5494 . -12900) (undo-tree-id5495 . -13181) (undo-tree-id5496 . -13188) (undo-tree-id5497 . -13649) (undo-tree-id5498 . -13656) (undo-tree-id5499 . -13849) (undo-tree-id5500 . -13869) (undo-tree-id5501 . -14514) (undo-tree-id5502 . -14521) (undo-tree-id5503 . -14714) (undo-tree-id5504 . -14734) (undo-tree-id5505 . -15843) (undo-tree-id5506 . -15844) (undo-tree-id5507 . -16215) (undo-tree-id5508 . -16216) (undo-tree-id5509 . -17308) (undo-tree-id5510 . -17315) (undo-tree-id5511 . -17398) (undo-tree-id5512 . -17403) (undo-tree-id5513 . -18177) (undo-tree-id5514 . -18190) (undo-tree-id5515 . -19096) (undo-tree-id5516 . -19097) (undo-tree-id5517 . -19324) (undo-tree-id5518 . -19331) (undo-tree-id5519 . -19415) (undo-tree-id5520 . -19416) (undo-tree-id5521 . -19993) (undo-tree-id5522 . -19995) (undo-tree-id5523 . -20097) (undo-tree-id5524 . -20100) (undo-tree-id5525 . -20574) (undo-tree-id5526 . -20581) (undo-tree-id5527 . -20714) (undo-tree-id5528 . -20722) (undo-tree-id5529 . -20808) (undo-tree-id5530 . -20809) (undo-tree-id5531 . -22085) (undo-tree-id5532 . -22099) (undo-tree-id5533 . -24179) (undo-tree-id5534 . -24185) (undo-tree-id5535 . -25199) (undo-tree-id5536 . -25216) (undo-tree-id5537 . -25632) (undo-tree-id5538 . -25633) (undo-tree-id5539 . -26076) (undo-tree-id5540 . -26081) (undo-tree-id5541 . -27535) (undo-tree-id5542 . -27541) (undo-tree-id5543 . -27908) (undo-tree-id5544 . -27911) (undo-tree-id5545 . -28300) (undo-tree-id5546 . -28310) (undo-tree-id5547 . -28494) (undo-tree-id5548 . -28498) (undo-tree-id5549 . -29714) (undo-tree-id5550 . -29715) (undo-tree-id5551 . -30019) (undo-tree-id5552 . -30023) (undo-tree-id5553 . -30277) (undo-tree-id5554 . -30284) (undo-tree-id5555 . -30327) (undo-tree-id5556 . -30334) (undo-tree-id5557 . -30578) (undo-tree-id5558 . -30581) (undo-tree-id5559 . -31428) (undo-tree-id5560 . -31438) (undo-tree-id5561 . -31656) (undo-tree-id5562 . -31661) (undo-tree-id5563 . -32098) (undo-tree-id5564 . -32104) (undo-tree-id5565 . -32552) (undo-tree-id5566 . -32556) (undo-tree-id5567 . -33372) (undo-tree-id5568 . -33377) (undo-tree-id5569 . -34102) (undo-tree-id5570 . -34110) (undo-tree-id5571 . -34410) (undo-tree-id5572 . -34414) (undo-tree-id5573 . -34872) (undo-tree-id5574 . -34876) (undo-tree-id5575 . -35020) (undo-tree-id5576 . -35033) (undo-tree-id5577 . -35187) (undo-tree-id5578 . -35200) (undo-tree-id5579 . -35354) (undo-tree-id5580 . -35367) (undo-tree-id5581 . -35773) (undo-tree-id5582 . -35781) (undo-tree-id5583 . -35925) (undo-tree-id5584 . -35930) (undo-tree-id5585 . -36223) (undo-tree-id5586 . -36224) (undo-tree-id5587 . -36438) (undo-tree-id5588 . -36439) (undo-tree-id5589 . -36731) (undo-tree-id5590 . -36732) (undo-tree-id5591 . -37069) (undo-tree-id5592 . -37071) (undo-tree-id5593 . -37744) (undo-tree-id5594 . -37745) (undo-tree-id5595 . -38001) (undo-tree-id5596 . -38009) (undo-tree-id5597 . -38291) (undo-tree-id5598 . -38296) (undo-tree-id5599 . -38717) (undo-tree-id5600 . -38724) (undo-tree-id5601 . -39996) (undo-tree-id5602 . -39999) (undo-tree-id5603 . -40276) (undo-tree-id5604 . -40289) (undo-tree-id5605 . -40419) (undo-tree-id5606 . -40420) (undo-tree-id5607 . -40575) (undo-tree-id5608 . -40576) (undo-tree-id5609 . -40738) (undo-tree-id5610 . -40739) (undo-tree-id5611 . -40879) (undo-tree-id5612 . -40887) (undo-tree-id5613 . -51) (undo-tree-id5614 . -51) (undo-tree-id5615 . -51) (undo-tree-id5616 . -51) (undo-tree-id5617 . -51) (undo-tree-id5618 . -51) (undo-tree-id5619 . -51) (undo-tree-id5620 . -51) (undo-tree-id5621 . -51) (undo-tree-id5622 . -51) (undo-tree-id5623 . -51) (undo-tree-id5624 . -51) (undo-tree-id5625 . -51) (undo-tree-id5626 . -51) (undo-tree-id5627 . -51) (undo-tree-id5628 . -51) (undo-tree-id5629 . -51) (undo-tree-id5630 . -51) (undo-tree-id5631 . -51) (undo-tree-id5632 . -51) (undo-tree-id5633 . -51) (undo-tree-id5634 . -51) (undo-tree-id5635 . -51) (undo-tree-id5636 . -51) (undo-tree-id5637 . -51) (undo-tree-id5638 . -51) (undo-tree-id5639 . -51) (undo-tree-id5640 . -51) (undo-tree-id5641 . -51) (undo-tree-id5642 . -51) (undo-tree-id5643 . -51) (undo-tree-id5644 . -51) (undo-tree-id5645 . -51) (undo-tree-id5646 . -51) (undo-tree-id5647 . -51) (undo-tree-id5648 . -51) (undo-tree-id5649 . -51) (undo-tree-id5650 . -51) (undo-tree-id5651 . -51) (undo-tree-id5652 . -51) (undo-tree-id5653 . -51) (undo-tree-id5654 . -51) (undo-tree-id5655 . -51) (undo-tree-id5656 . -51) (undo-tree-id5657 . -51) (undo-tree-id5658 . -58) (undo-tree-id5659 . -66) (undo-tree-id5660 . -66) (undo-tree-id5661 . -66) (undo-tree-id5662 . -66) (undo-tree-id5663 . -66) (undo-tree-id5664 . -66) (undo-tree-id5665 . -66) (undo-tree-id5666 . -66) (undo-tree-id5667 . -66) (undo-tree-id5668 . -73) (undo-tree-id5669 . -84) (undo-tree-id5670 . -84) (undo-tree-id5671 . -84) (undo-tree-id5672 . -84) (undo-tree-id5673 . -84) (undo-tree-id5674 . -84) (undo-tree-id5675 . -84) (undo-tree-id5676 . -84) (undo-tree-id5677 . -84) (undo-tree-id5678 . -84) (undo-tree-id5679 . -84) (undo-tree-id5680 . -84) (undo-tree-id5681 . -84) (undo-tree-id5682 . -84) (undo-tree-id5683 . -84) (undo-tree-id5684 . -84) (undo-tree-id5685 . -84) (undo-tree-id5686 . -84) (undo-tree-id5687 . -84) (undo-tree-id5688 . -84) (undo-tree-id5689 . -84) (undo-tree-id5690 . -84) (undo-tree-id5691 . -84) (undo-tree-id5692 . -84) (undo-tree-id5693 . -84) (undo-tree-id5694 . -84) (undo-tree-id5695 . -84) (undo-tree-id5696 . -84) (undo-tree-id5697 . -84) (undo-tree-id5698 . -84) (undo-tree-id5699 . -84) (undo-tree-id5700 . -84) (undo-tree-id5701 . -84) (undo-tree-id5702 . -84) (undo-tree-id5703 . -84) (undo-tree-id5704 . -84) (undo-tree-id5705 . -84) (undo-tree-id5706 . -84) (undo-tree-id5707 . -84) (undo-tree-id5708 . -84) (undo-tree-id5709 . -84) (undo-tree-id5710 . -84) (undo-tree-id5711 . -84) (undo-tree-id5712 . -87) (undo-tree-id5713 . -88) (undo-tree-id5714 . -93) (undo-tree-id5715 . -93) (undo-tree-id5716 . -93) (undo-tree-id5717 . -93) (undo-tree-id5718 . -93) (undo-tree-id5719 . -93) (undo-tree-id5720 . -93) (undo-tree-id5721 . -93) (undo-tree-id5722 . -104) (undo-tree-id5723 . -111) (undo-tree-id5724 . -117) (undo-tree-id5725 . -124) (undo-tree-id5726 . -124) (undo-tree-id5727 . -124) (undo-tree-id5728 . -124) (undo-tree-id5729 . -124) (undo-tree-id5730 . -124) (undo-tree-id5731 . -124) (undo-tree-id5732 . -124) (undo-tree-id5733 . -130) (undo-tree-id5734 . -133) (undo-tree-id5735 . -136) (undo-tree-id5736 . -141) (undo-tree-id5737 . -141) (undo-tree-id5738 . -141) (undo-tree-id5739 . -141) (undo-tree-id5740 . -141) (undo-tree-id5741 . -141) (undo-tree-id5742 . -141) (undo-tree-id5743 . -141) (undo-tree-id5744 . -149) (undo-tree-id5745 . -156) (undo-tree-id5746 . -161) (undo-tree-id5747 . -163) (undo-tree-id5748 . -163) (undo-tree-id5749 . -163) (undo-tree-id5750 . -163) (undo-tree-id5751 . -163) (undo-tree-id5752 . -163) (undo-tree-id5753 . -163) (undo-tree-id5754 . -163) (undo-tree-id5755 . -164) (undo-tree-id5756 . -164) (undo-tree-id5757 . -164) (undo-tree-id5758 . -164) (undo-tree-id5759 . -164) (undo-tree-id5760 . -164) (undo-tree-id5761 . -164) (undo-tree-id5762 . -164) (undo-tree-id5763 . -164) (undo-tree-id5764 . -164) (undo-tree-id5765 . -164) (undo-tree-id5766 . -164) (undo-tree-id5767 . -164) (undo-tree-id5768 . -164) (undo-tree-id5769 . -164) (undo-tree-id5770 . -164) (undo-tree-id5771 . -164) (undo-tree-id5772 . -164) (undo-tree-id5773 . -164) (undo-tree-id5774 . -164) (undo-tree-id5775 . -164) (undo-tree-id5776 . -164) (undo-tree-id5777 . -164) (undo-tree-id5778 . -164) (undo-tree-id5779 . -164) (undo-tree-id5780 . -164) (undo-tree-id5781 . -164) (undo-tree-id5782 . -164) (undo-tree-id5783 . -164) (undo-tree-id5784 . -164) (undo-tree-id5785 . -164) (undo-tree-id5786 . -164) (undo-tree-id5787 . -164) (undo-tree-id5788 . -164) (undo-tree-id5789 . -164) (undo-tree-id5790 . -164) (undo-tree-id5791 . -164) (undo-tree-id5792 . -164) (undo-tree-id5793 . -164) (undo-tree-id5794 . -164) (undo-tree-id5795 . -164) (undo-tree-id5796 . -164) (undo-tree-id5797 . -164) (undo-tree-id5798 . -164) (undo-tree-id5799 . -164) (undo-tree-id5800 . -164) (undo-tree-id5801 . -164) (undo-tree-id5802 . -164) (undo-tree-id5803 . -164) (undo-tree-id5804 . -164) (undo-tree-id5805 . -164) (undo-tree-id5806 . -164) (undo-tree-id5807 . -164) (undo-tree-id5808 . -164) (undo-tree-id5809 . -164) (undo-tree-id5810 . -164) (undo-tree-id5811 . -164) (undo-tree-id5812 . -164) (undo-tree-id5813 . -164) (undo-tree-id5814 . -164) (undo-tree-id5815 . -164) (undo-tree-id5816 . -164) (undo-tree-id5817 . -164) (undo-tree-id5818 . -164) (undo-tree-id5819 . -164) (undo-tree-id5820 . -164) (undo-tree-id5821 . -164) (undo-tree-id5822 . -164) (undo-tree-id5823 . -164) (undo-tree-id5824 . -164) (undo-tree-id5825 . -164) (undo-tree-id5826 . -164) (undo-tree-id5827 . -164) (undo-tree-id5828 . -164) (undo-tree-id5829 . -164) (undo-tree-id5830 . -664) (undo-tree-id5831 . -664) (undo-tree-id5832 . -695) (undo-tree-id5833 . -695) (undo-tree-id5834 . -817) (undo-tree-id5835 . -817) (undo-tree-id5836 . -817) (undo-tree-id5837 . -664) (undo-tree-id5838 . -664) (undo-tree-id5839 . -664) (undo-tree-id5840 . -664) (undo-tree-id5841 . -664) (undo-tree-id5842 . -664) (undo-tree-id5843 . -664) (undo-tree-id5844 . -664) (undo-tree-id5845 . -664) (undo-tree-id5846 . -664) (undo-tree-id5847 . -664) (undo-tree-id5848 . -664) (undo-tree-id5849 . -664) (undo-tree-id5850 . -664) (undo-tree-id5851 . -664) (undo-tree-id5852 . -664) (undo-tree-id5853 . -664) (undo-tree-id5854 . -664) (undo-tree-id5855 . -664) (undo-tree-id5856 . -664) (undo-tree-id5857 . -664) (undo-tree-id5858 . -664) (undo-tree-id5859 . -664) (undo-tree-id5860 . -664) (undo-tree-id5861 . -664) (undo-tree-id5862 . -664) (undo-tree-id5863 . -664) (undo-tree-id5864 . -664) (undo-tree-id5865 . -664) (undo-tree-id5866 . -664) (undo-tree-id5867 . -664) (undo-tree-id5868 . -664) (undo-tree-id5869 . -664) (undo-tree-id5870 . -664) (undo-tree-id5871 . -664) (undo-tree-id5872 . -664) (undo-tree-id5873 . -664) (undo-tree-id5874 . -664) (undo-tree-id5875 . -664) (undo-tree-id5876 . -664) (undo-tree-id5877 . -664) (undo-tree-id5878 . -664) (undo-tree-id5879 . -664) (undo-tree-id5880 . -664) (undo-tree-id5881 . -664) (undo-tree-id5882 . -664) (undo-tree-id5883 . -664) (undo-tree-id5884 . -664) (undo-tree-id5885 . -664) (undo-tree-id5886 . -664) (undo-tree-id5887 . -664) (undo-tree-id5888 . -664) (undo-tree-id5889 . -664) (undo-tree-id5890 . -664) (undo-tree-id5891 . -664) (undo-tree-id5892 . -664) (undo-tree-id5893 . -664) (undo-tree-id5894 . -664) (undo-tree-id5895 . -664) (undo-tree-id5896 . -664) (undo-tree-id5897 . -664) (undo-tree-id5898 . -664) (undo-tree-id5899 . -664) (undo-tree-id5900 . -664) (undo-tree-id5901 . -664) (undo-tree-id5902 . -664) (undo-tree-id5903 . -664) (undo-tree-id5904 . -695) (undo-tree-id5905 . -695) (undo-tree-id5906 . -695) (undo-tree-id5907 . -695) (undo-tree-id5908 . -695) (undo-tree-id5909 . -695) (undo-tree-id5910 . -695) (undo-tree-id5911 . -695) (undo-tree-id5912 . -695) (undo-tree-id5913 . -695) (undo-tree-id5914 . -695) (undo-tree-id5915 . -695) (undo-tree-id5916 . -695) (undo-tree-id5917 . -695) (undo-tree-id5918 . -695) (undo-tree-id5919 . -695) (undo-tree-id5920 . -695) (undo-tree-id5921 . -695) (undo-tree-id5922 . -817) (undo-tree-id5923 . -817) (undo-tree-id5924 . -817) (undo-tree-id5925 . -966) (undo-tree-id5926 . -966) (undo-tree-id5927 . -664) (undo-tree-id5928 . -664) (undo-tree-id5929 . -664) (undo-tree-id5930 . -664) (undo-tree-id5931 . -664) (undo-tree-id5932 . -664) (undo-tree-id5933 . -664) (undo-tree-id5934 . -664) (undo-tree-id5935 . -664) (undo-tree-id5936 . -664) (undo-tree-id5937 . -664) (undo-tree-id5938 . -664) (undo-tree-id5939 . -664) (undo-tree-id5940 . -664) (undo-tree-id5941 . -664) (undo-tree-id5942 . -664) (undo-tree-id5943 . -664) (undo-tree-id5944 . -664) (undo-tree-id5945 . -664) (undo-tree-id5946 . -664) (undo-tree-id5947 . -664) (undo-tree-id5948 . -664) (undo-tree-id5949 . -664) (undo-tree-id5950 . -664) (undo-tree-id5951 . -664) (undo-tree-id5952 . -664) (undo-tree-id5953 . -664) (undo-tree-id5954 . -664) (undo-tree-id5955 . -664) (undo-tree-id5956 . -664) (undo-tree-id5957 . -664) (undo-tree-id5958 . -664) (undo-tree-id5959 . -664) (undo-tree-id5960 . -664) (undo-tree-id5961 . -664) (undo-tree-id5962 . -664) (undo-tree-id5963 . -664) (undo-tree-id5964 . -664) (undo-tree-id5965 . -664) (undo-tree-id5966 . -664) (undo-tree-id5967 . -664) (undo-tree-id5968 . -664) (undo-tree-id5969 . -664) (undo-tree-id5970 . -664) (undo-tree-id5971 . -664) (undo-tree-id5972 . -664) (undo-tree-id5973 . -664) (undo-tree-id5974 . -692) (undo-tree-id5975 . -664) (undo-tree-id5976 . -664) (undo-tree-id5977 . -664) (undo-tree-id5978 . -664) (undo-tree-id5979 . -664) (undo-tree-id5980 . -664) (undo-tree-id5981 . -664) (undo-tree-id5982 . -664) (undo-tree-id5983 . -664) (undo-tree-id5984 . -664) (undo-tree-id5985 . -695) (undo-tree-id5986 . -695) (undo-tree-id5987 . -695) (undo-tree-id5988 . -695) (undo-tree-id5989 . -695) (undo-tree-id5990 . -695) (undo-tree-id5991 . -695) (undo-tree-id5992 . -695) (undo-tree-id5993 . -695) (undo-tree-id5994 . -695) (undo-tree-id5995 . -695) (undo-tree-id5996 . -695) (undo-tree-id5997 . -695) (undo-tree-id5998 . -695) (undo-tree-id5999 . -695) (undo-tree-id6000 . -695) (undo-tree-id6001 . -695) (undo-tree-id6002 . -695) (undo-tree-id6003 . -817) (undo-tree-id6004 . -817) (undo-tree-id6005 . -817) (undo-tree-id6006 . -966) (undo-tree-id6007 . -966) (undo-tree-id6008 . -664) (undo-tree-id6009 . -664) (undo-tree-id6010 . -664) (undo-tree-id6011 . -664) (undo-tree-id6012 . -664) (undo-tree-id6013 . -664) (undo-tree-id6014 . -664) (undo-tree-id6015 . -664) (undo-tree-id6016 . -664) (undo-tree-id6017 . -664) (undo-tree-id6018 . -664) (undo-tree-id6019 . -664) (undo-tree-id6020 . -664) (undo-tree-id6021 . -664) (undo-tree-id6022 . -664) (undo-tree-id6023 . -664) (undo-tree-id6024 . -664) (undo-tree-id6025 . -664) (undo-tree-id6026 . -664) (undo-tree-id6027 . -664) (undo-tree-id6028 . -664) (undo-tree-id6029 . -664) (undo-tree-id6030 . -664) (undo-tree-id6031 . -664) (undo-tree-id6032 . -664) (undo-tree-id6033 . -664) (undo-tree-id6034 . -664) (undo-tree-id6035 . -664) (undo-tree-id6036 . -664) (undo-tree-id6037 . -664) (undo-tree-id6038 . -664) (undo-tree-id6039 . -664) (undo-tree-id6040 . -664) (undo-tree-id6041 . -664) (undo-tree-id6042 . -664) (undo-tree-id6043 . -664) (undo-tree-id6044 . -664) (undo-tree-id6045 . -664) (undo-tree-id6046 . -664) (undo-tree-id6047 . -664) (undo-tree-id6048 . -664) (undo-tree-id6049 . -664) (undo-tree-id6050 . -693) (undo-tree-id6051 . -693) (undo-tree-id6052 . -693) (undo-tree-id6053 . -693) (undo-tree-id6054 . -693) (undo-tree-id6055 . -693) (undo-tree-id6056 . -693) (undo-tree-id6057 . -693) (undo-tree-id6058 . -694) (undo-tree-id6059 . -694) (undo-tree-id6060 . -694) (undo-tree-id6061 . -694) (undo-tree-id6062 . -694) (undo-tree-id6063 . -694) (undo-tree-id6064 . -694) (undo-tree-id6065 . -694) (undo-tree-id6066 . -695) (undo-tree-id6067 . -695) (undo-tree-id6068 . -695) (undo-tree-id6069 . -695) (undo-tree-id6070 . -695) (undo-tree-id6071 . -695) (undo-tree-id6072 . -695) (undo-tree-id6073 . -695) (undo-tree-id6074 . -695) (undo-tree-id6075 . -695) (undo-tree-id6076 . -695) (undo-tree-id6077 . -695) (undo-tree-id6078 . -695) (undo-tree-id6079 . -695) (undo-tree-id6080 . -695) (undo-tree-id6081 . -695) (undo-tree-id6082 . -695) (undo-tree-id6083 . -695) (undo-tree-id6084 . -695) (undo-tree-id6085 . -695) (undo-tree-id6086 . -695) (undo-tree-id6087 . -695) (undo-tree-id6088 . -695) (undo-tree-id6089 . -695) (undo-tree-id6090 . -695) (undo-tree-id6091 . -695) (undo-tree-id6092 . -695) (undo-tree-id6093 . -695) (undo-tree-id6094 . -695) (undo-tree-id6095 . -695) (undo-tree-id6096 . -695) (undo-tree-id6097 . -695) (undo-tree-id6098 . -695) (undo-tree-id6099 . -695) (undo-tree-id6100 . -695) (undo-tree-id6101 . -695) (undo-tree-id6102 . -695) (undo-tree-id6103 . -695) (undo-tree-id6104 . -695) (undo-tree-id6105 . -695) (undo-tree-id6106 . -695) (undo-tree-id6107 . -695) (undo-tree-id6108 . -695) (undo-tree-id6109 . -695) (undo-tree-id6110 . -695) (undo-tree-id6111 . -695) (undo-tree-id6112 . -695) (undo-tree-id6113 . -695) (undo-tree-id6114 . -695) (undo-tree-id6115 . -695) (undo-tree-id6116 . -695) (undo-tree-id6117 . -695) (undo-tree-id6118 . -695) (undo-tree-id6119 . -695) (undo-tree-id6120 . -695) (undo-tree-id6121 . -695) (undo-tree-id6122 . -695) (undo-tree-id6123 . -695) (undo-tree-id6124 . -695) (undo-tree-id6125 . -695) (undo-tree-id6126 . -695) (undo-tree-id6127 . -695) (undo-tree-id6128 . -695) (undo-tree-id6129 . -695) (undo-tree-id6130 . -817) (undo-tree-id6131 . -817) (undo-tree-id6132 . -817) (undo-tree-id6133 . -966) (undo-tree-id6134 . -966) (undo-tree-id6135 . -695) (undo-tree-id6136 . -695) (undo-tree-id6137 . -695) (undo-tree-id6138 . -695) (undo-tree-id6139 . -695) (undo-tree-id6140 . -695) (undo-tree-id6141 . -695) (undo-tree-id6142 . -695) (undo-tree-id6143 . -695) (undo-tree-id6144 . -695) (undo-tree-id6145 . -695) (undo-tree-id6146 . -695) (undo-tree-id6147 . -695) (undo-tree-id6148 . -695) (undo-tree-id6149 . -695) (undo-tree-id6150 . -695) (undo-tree-id6151 . -695) (undo-tree-id6152 . -695) (undo-tree-id6153 . -695) (undo-tree-id6154 . -695) (undo-tree-id6155 . -695) (undo-tree-id6156 . -695) (undo-tree-id6157 . -695) (undo-tree-id6158 . -695) (undo-tree-id6159 . -695) (undo-tree-id6160 . -695) (undo-tree-id6161 . -695) (undo-tree-id6162 . -695) (undo-tree-id6163 . -695) (undo-tree-id6164 . -695) (undo-tree-id6165 . -695) (undo-tree-id6166 . -695) (undo-tree-id6167 . -695) (undo-tree-id6168 . -695) (undo-tree-id6169 . -695) (undo-tree-id6170 . -695) (undo-tree-id6171 . -695) (undo-tree-id6172 . -695) (undo-tree-id6173 . -695) (undo-tree-id6174 . -695) (undo-tree-id6175 . -695) (undo-tree-id6176 . -695) (undo-tree-id6177 . -695) (undo-tree-id6178 . -695) (undo-tree-id6179 . -695) (undo-tree-id6180 . -695) (undo-tree-id6181 . -695) (undo-tree-id6182 . -695) (undo-tree-id6183 . -695) (undo-tree-id6184 . -695) (undo-tree-id6185 . -695) (undo-tree-id6186 . -695) (undo-tree-id6187 . -695) (undo-tree-id6188 . -695) (undo-tree-id6189 . -695) (undo-tree-id6190 . -695) (undo-tree-id6191 . -695) (undo-tree-id6192 . -695) (undo-tree-id6193 . -695) (undo-tree-id6194 . -695) (undo-tree-id6195 . -695) (undo-tree-id6196 . -695) (undo-tree-id6197 . -695) (undo-tree-id6198 . -695) (undo-tree-id6199 . -695) (undo-tree-id6200 . -695) (undo-tree-id6201 . -695) (undo-tree-id6202 . -695) (undo-tree-id6203 . -695) (undo-tree-id6204 . -695) (undo-tree-id6205 . -695) (undo-tree-id6206 . -695) (undo-tree-id6207 . -695) (undo-tree-id6208 . -695) (undo-tree-id6209 . -695) (undo-tree-id6210 . -695) (undo-tree-id6211 . -695) (undo-tree-id6212 . -695) (undo-tree-id6213 . -695) (undo-tree-id6214 . -695) (undo-tree-id6215 . -695) (undo-tree-id6216 . -695) (undo-tree-id6217 . -695) (undo-tree-id6218 . -695) (undo-tree-id6219 . -695) (undo-tree-id6220 . -695) (undo-tree-id6221 . -695) (undo-tree-id6222 . -695) (undo-tree-id6223 . -695) (undo-tree-id6224 . -695) (undo-tree-id6225 . -695) (undo-tree-id6226 . -695) (undo-tree-id6227 . -695) (undo-tree-id6228 . -695) (undo-tree-id6229 . -695) (undo-tree-id6230 . -695) (undo-tree-id6231 . -695) (undo-tree-id6232 . -695) (undo-tree-id6233 . -695) (undo-tree-id6234 . -695) (undo-tree-id6235 . -695) (undo-tree-id6236 . -695) (undo-tree-id6237 . -695) (undo-tree-id6238 . -695) (undo-tree-id6239 . -695) (undo-tree-id6240 . -695) (undo-tree-id6241 . -695) (undo-tree-id6242 . -695) (undo-tree-id6243 . -695) (undo-tree-id6244 . -695) (undo-tree-id6245 . -695) (undo-tree-id6246 . -695) (undo-tree-id6247 . -695) (undo-tree-id6248 . -695) (undo-tree-id6249 . -695) (undo-tree-id6250 . -695) (undo-tree-id6251 . -695) (undo-tree-id6252 . -695) (undo-tree-id6253 . -695) (undo-tree-id6254 . -695) (undo-tree-id6255 . -695) (undo-tree-id6256 . -695) (undo-tree-id6257 . -695) (undo-tree-id6258 . -695) (undo-tree-id6259 . -695) (undo-tree-id6260 . -695) (undo-tree-id6261 . -695) (undo-tree-id6262 . -695) (undo-tree-id6263 . -695) (undo-tree-id6264 . -695) (undo-tree-id6265 . -695) (undo-tree-id6266 . -695) (undo-tree-id6267 . -695) (undo-tree-id6268 . -695) (undo-tree-id6269 . -695) (undo-tree-id6270 . -695) (undo-tree-id6271 . -695) (undo-tree-id6272 . -695) (undo-tree-id6273 . -695) (undo-tree-id6274 . -695) (undo-tree-id6275 . -695) (undo-tree-id6276 . -695) (undo-tree-id6277 . -695) (undo-tree-id6278 . -695) (undo-tree-id6279 . -695) (undo-tree-id6280 . -695) (undo-tree-id6281 . -695) (undo-tree-id6282 . -695) (undo-tree-id6283 . -695) (undo-tree-id6284 . -695) (undo-tree-id6285 . -695) (undo-tree-id6286 . -695) (undo-tree-id6287 . -695) (undo-tree-id6288 . -695) (undo-tree-id6289 . -695) (undo-tree-id6290 . -695) (undo-tree-id6291 . -695) (undo-tree-id6292 . -695) (undo-tree-id6293 . -695) (undo-tree-id6294 . -695) (undo-tree-id6295 . -695) (undo-tree-id6296 . -695) (undo-tree-id6297 . -695) (undo-tree-id6298 . -695) (undo-tree-id6299 . -695) (undo-tree-id6300 . -695) (undo-tree-id6301 . -695) (undo-tree-id6302 . -695) (undo-tree-id6303 . -695) (undo-tree-id6304 . -695) (undo-tree-id6305 . -695) (undo-tree-id6306 . -695) (undo-tree-id6307 . -695) (undo-tree-id6308 . -695) (undo-tree-id6309 . -695) (undo-tree-id6310 . -695) (undo-tree-id6311 . -695) (undo-tree-id6312 . -695) (undo-tree-id6313 . -695) (undo-tree-id6314 . -695) (undo-tree-id6315 . -695) (undo-tree-id6316 . -695) (undo-tree-id6317 . -695) (undo-tree-id6318 . -695) (undo-tree-id6319 . -695) (undo-tree-id6320 . -695) (undo-tree-id6321 . -695) (undo-tree-id6322 . -695) (undo-tree-id6323 . -695) (undo-tree-id6324 . -695) (undo-tree-id6325 . -695) (undo-tree-id6326 . -695) (undo-tree-id6327 . -695) (undo-tree-id6328 . -695) (undo-tree-id6329 . -695) (undo-tree-id6330 . -695) (undo-tree-id6331 . -695) (undo-tree-id6332 . -695) (undo-tree-id6333 . -695) (undo-tree-id6334 . -695) (undo-tree-id6335 . -695) (undo-tree-id6336 . -695) (undo-tree-id6337 . -695) (undo-tree-id6338 . -695) (undo-tree-id6339 . -695) (undo-tree-id6340 . -695) (undo-tree-id6341 . -695) (undo-tree-id6342 . -695) (undo-tree-id6343 . -695) (undo-tree-id6344 . -695) (undo-tree-id6345 . -695) (undo-tree-id6346 . -695) (undo-tree-id6347 . -695) (undo-tree-id6348 . -695) (undo-tree-id6349 . -695) (undo-tree-id6350 . -695) (undo-tree-id6351 . -695) (undo-tree-id6352 . -695) (undo-tree-id6353 . -695) (undo-tree-id6354 . -695) (undo-tree-id6355 . -695) (undo-tree-id6356 . -695) (undo-tree-id6357 . -695) (undo-tree-id6358 . -695) (undo-tree-id6359 . -695) (undo-tree-id6360 . -695) (undo-tree-id6361 . -695) (undo-tree-id6362 . -695) (undo-tree-id6363 . -695) (undo-tree-id6364 . -695) (undo-tree-id6365 . -695) (undo-tree-id6366 . -695) (undo-tree-id6367 . -695) (undo-tree-id6368 . -695) (undo-tree-id6369 . -695) (undo-tree-id6370 . -1726) (undo-tree-id6371 . -1726) (undo-tree-id6372 . -1726) (undo-tree-id6373 . -1726) (undo-tree-id6374 . -695) (undo-tree-id6375 . -695) (undo-tree-id6376 . -695) (undo-tree-id6377 . -695) (undo-tree-id6378 . -695) (undo-tree-id6379 . -695) (undo-tree-id6380 . -695) (undo-tree-id6381 . -695) (undo-tree-id6382 . -695) (undo-tree-id6383 . -817) (undo-tree-id6384 . -817) (undo-tree-id6385 . -817) (undo-tree-id6386 . -966) (undo-tree-id6387 . -966) (undo-tree-id6388 . -1726) (undo-tree-id6389 . -1726) (undo-tree-id6390 . -1726) (undo-tree-id6391 . -1726) (undo-tree-id6392 . -695) (undo-tree-id6393 . -695) (undo-tree-id6394 . -695) (undo-tree-id6395 . -695) (undo-tree-id6396 . -695) (undo-tree-id6397 . -695) (undo-tree-id6398 . -695) (undo-tree-id6399 . -695) (undo-tree-id6400 . -695) (undo-tree-id6401 . -695) (undo-tree-id6402 . -695) (undo-tree-id6403 . -695) (undo-tree-id6404 . -695) (undo-tree-id6405 . -695) (undo-tree-id6406 . -695) (undo-tree-id6407 . -695) (undo-tree-id6408 . -695) (undo-tree-id6409 . -695) (undo-tree-id6410 . -695) (undo-tree-id6411 . -695) (undo-tree-id6412 . -695) (undo-tree-id6413 . -695) (undo-tree-id6414 . -695) (undo-tree-id6415 . -695) (undo-tree-id6416 . -695) (undo-tree-id6417 . -695) (undo-tree-id6418 . -695) (undo-tree-id6419 . -695) (undo-tree-id6420 . -695) (undo-tree-id6421 . -695) (undo-tree-id6422 . -695) (undo-tree-id6423 . -695) (undo-tree-id6424 . -695) (undo-tree-id6425 . -695) (undo-tree-id6426 . -695) (undo-tree-id6427 . -695) (undo-tree-id6428 . -695) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -23) (undo-tree-id6432 . -27) (undo-tree-id6433 . -51) (undo-tree-id6434 . -57) (undo-tree-id6435 . -51) (undo-tree-id6436 . -57) (undo-tree-id6437 . -66) (undo-tree-id6438 . -72) (undo-tree-id6439 . -90) (undo-tree-id6440 . -94) (undo-tree-id6441 . -119) (undo-tree-id6442 . -125) (undo-tree-id6443 . -138) (undo-tree-id6444 . -142) (undo-tree-id6445 . -259) (undo-tree-id6446 . -265) (undo-tree-id6447 . -259) (undo-tree-id6448 . -265) (undo-tree-id6449 . -284) (undo-tree-id6450 . -290) (undo-tree-id6451 . -284) (undo-tree-id6452 . -290) (undo-tree-id6453 . -408) (undo-tree-id6454 . -415) (undo-tree-id6455 . -696) (undo-tree-id6456 . -699) (undo-tree-id6457 . -883) (undo-tree-id6458 . -884) (undo-tree-id6459 . -883) (undo-tree-id6460 . -884) (undo-tree-id6461 . -883) (undo-tree-id6462 . -884) (undo-tree-id6463 . -937) (undo-tree-id6464 . -938) (undo-tree-id6465 . -953) (undo-tree-id6466 . -954) (undo-tree-id6467 . -941) (undo-tree-id6468 . -947) (undo-tree-id6469 . -1564) (undo-tree-id6470 . -1565) (undo-tree-id6471 . -1576) (undo-tree-id6472 . -1578) (undo-tree-id6473 . -2409) (undo-tree-id6474 . -2410) (undo-tree-id6475 . -2552) (undo-tree-id6476 . -2553) (undo-tree-id6477 . -2552) (undo-tree-id6478 . -2553) (undo-tree-id6479 . -3159) (undo-tree-id6480 . -3160) (undo-tree-id6481 . -3898) (undo-tree-id6482 . -3899) (undo-tree-id6483 . -4582) (undo-tree-id6484 . -4583) (undo-tree-id6485 . -5520) (undo-tree-id6486 . -5521) (undo-tree-id6487 . -5658) (undo-tree-id6488 . -5659) (undo-tree-id6489 . -5658) (undo-tree-id6490 . -5659) (undo-tree-id6491 . -5658) (undo-tree-id6492 . -5659) (undo-tree-id6493 . -5658) (undo-tree-id6494 . -5659) (undo-tree-id6495 . -5658) (undo-tree-id6496 . -5659) (undo-tree-id6497 . -5658) (undo-tree-id6498 . -5659) (undo-tree-id6499 . -5658) (undo-tree-id6500 . -5659) (undo-tree-id6501 . -5662) (undo-tree-id6502 . -5668) (undo-tree-id6503 . -6057) (undo-tree-id6504 . -6058) (undo-tree-id6505 . -6185) (undo-tree-id6506 . -6186) (undo-tree-id6507 . -6213) (undo-tree-id6508 . -6214) (undo-tree-id6509 . -6626) (undo-tree-id6510 . -6627) (undo-tree-id6511 . -7330) (undo-tree-id6512 . -7331) (undo-tree-id6513 . -8027) (undo-tree-id6514 . -8029) (undo-tree-id6515 . -8470) (undo-tree-id6516 . -8471) (undo-tree-id6517 . -8526) (undo-tree-id6518 . -8531) (undo-tree-id6519 . -8982) (undo-tree-id6520 . -8983) (undo-tree-id6521 . -9330) (undo-tree-id6522 . -9335) (undo-tree-id6523 . -9322) (undo-tree-id6524 . -9323) (undo-tree-id6525 . -9330) (undo-tree-id6526 . -9335) (undo-tree-id6527 . -9299) (undo-tree-id6528 . -9322) (undo-tree-id6529 . -9400) (undo-tree-id6530 . -9402) (undo-tree-id6531 . -10552) (undo-tree-id6532 . -10553) (undo-tree-id6533 . -10913) (undo-tree-id6534 . -10914) (undo-tree-id6535 . -10913) (undo-tree-id6536 . -10914) (undo-tree-id6537 . -10913) (undo-tree-id6538 . -10914) (undo-tree-id6539 . -10913) (undo-tree-id6540 . -10914) (undo-tree-id6541 . -10946) (undo-tree-id6542 . -10948) (undo-tree-id6543 . -11261) (undo-tree-id6544 . -11262) (undo-tree-id6545 . -11260) (undo-tree-id6546 . -11261) (undo-tree-id6547 . -11425) (undo-tree-id6548 . -11426) (undo-tree-id6549 . -11425) (undo-tree-id6550 . -11426) (undo-tree-id6551 . -11425) (undo-tree-id6552 . -11426) (undo-tree-id6553 . -11441) (undo-tree-id6554 . -11447) (undo-tree-id6555 . -12098) (undo-tree-id6556 . -12099) (undo-tree-id6557 . -12386) (undo-tree-id6558 . -12387) (undo-tree-id6559 . -12725) (undo-tree-id6560 . -12726) (undo-tree-id6561 . -12725) (undo-tree-id6562 . -12726) (undo-tree-id6563 . -12776) (undo-tree-id6564 . -12778) (undo-tree-id6565 . -12760) (undo-tree-id6566 . -12766) (undo-tree-id6567 . -12828) (undo-tree-id6568 . -12833) (undo-tree-id6569 . -13203) (undo-tree-id6570 . -13204) (undo-tree-id6571 . -13672) (undo-tree-id6572 . -13673) (undo-tree-id6573 . -13989) (undo-tree-id6574 . -13990) (undo-tree-id6575 . -14854) (undo-tree-id6576 . -14855) (undo-tree-id6577 . -16867) (undo-tree-id6578 . -16870) (undo-tree-id6579 . -18107) (undo-tree-id6580 . -18108) (undo-tree-id6581 . -18238) (undo-tree-id6582 . -18239) (undo-tree-id6583 . -18353) (undo-tree-id6584 . -18354) (undo-tree-id6585 . -18427) (undo-tree-id6586 . -18428) (undo-tree-id6587 . -18427) (undo-tree-id6588 . -18428) (undo-tree-id6589 . -18428) (undo-tree-id6590 . -18446) (undo-tree-id6591 . -18802) (undo-tree-id6592 . -18824) (undo-tree-id6593 . -18802) (undo-tree-id6594 . -18824) (undo-tree-id6595 . -18828) (undo-tree-id6596 . -18837) (undo-tree-id6597 . -18788) (undo-tree-id6598 . -18789) (undo-tree-id6599 . -18858) (undo-tree-id6600 . -18870) (undo-tree-id6601 . -18858) (undo-tree-id6602 . -18870) (undo-tree-id6603 . -19017) (undo-tree-id6604 . -19024) (undo-tree-id6605 . -19098) (undo-tree-id6606 . -19099) (undo-tree-id6607 . -19336) (undo-tree-id6608 . -19337) (undo-tree-id6609 . -19815) (undo-tree-id6610 . -19816) (undo-tree-id6611 . -19816) (undo-tree-id6612 . -19817) (undo-tree-id6613 . -19839) (undo-tree-id6614 . -19840) (undo-tree-id6615 . -20589) (undo-tree-id6616 . -20590) (undo-tree-id6617 . -20601) (undo-tree-id6618 . -20602) (undo-tree-id6619 . -20826) (undo-tree-id6620 . -20837) (undo-tree-id6621 . -20839) (undo-tree-id6622 . -20840) (undo-tree-id6623 . -21244) (undo-tree-id6624 . -21245) (undo-tree-id6625 . -21278) (undo-tree-id6626 . -21279) (undo-tree-id6627 . -21348) (undo-tree-id6628 . -21349) (undo-tree-id6629 . -21530) (undo-tree-id6630 . -21531) (undo-tree-id6631 . -22017) (undo-tree-id6632 . -22018) (undo-tree-id6633 . -22286) (undo-tree-id6634 . -22293) (undo-tree-id6635 . -22286) (undo-tree-id6636 . -22293) (undo-tree-id6637 . -22286) (undo-tree-id6638 . -22293) (undo-tree-id6639 . -22286) (undo-tree-id6640 . -22293) (undo-tree-id6641 . -22286) (undo-tree-id6642 . -22293) (undo-tree-id6643 . -22286) (undo-tree-id6644 . -22293) (undo-tree-id6645 . -22286) (undo-tree-id6646 . -22293) (undo-tree-id6647 . -22286) (undo-tree-id6648 . -22293) (undo-tree-id6649 . -22286) (undo-tree-id6650 . -22293) (undo-tree-id6651 . -22372) (undo-tree-id6652 . -22373) (undo-tree-id6653 . -22373) (undo-tree-id6654 . -22374) (undo-tree-id6655 . -22378) (undo-tree-id6656 . -22379) (undo-tree-id6657 . -22548) (undo-tree-id6658 . -22549) (undo-tree-id6659 . -22548) (undo-tree-id6660 . -22549) (undo-tree-id6661 . -23670) (undo-tree-id6662 . -23671) (undo-tree-id6663 . -24004) (undo-tree-id6664 . -24005) (undo-tree-id6665 . -24006) (undo-tree-id6666 . -24007) (undo-tree-id6667 . -24006) (undo-tree-id6668 . -24007) (undo-tree-id6669 . -23986) (undo-tree-id6670 . -23989) (undo-tree-id6671 . -24050) (undo-tree-id6672 . -24051) (undo-tree-id6673 . -24918) (undo-tree-id6674 . -24927) (undo-tree-id6675 . -25607) (undo-tree-id6676 . -25608) (undo-tree-id6677 . -26987) (undo-tree-id6678 . -26988) (undo-tree-id6679 . -27108) (undo-tree-id6680 . -27109) (undo-tree-id6681 . -27108) (undo-tree-id6682 . -27109) (undo-tree-id6683 . -27209) (undo-tree-id6684 . -27221) (undo-tree-id6685 . -27251) (undo-tree-id6686 . -27258) (undo-tree-id6687 . -27456) (undo-tree-id6688 . -27466) (undo-tree-id6689 . -28013) (undo-tree-id6690 . -28014) (undo-tree-id6691 . -28013) (undo-tree-id6692 . -28014) (undo-tree-id6693 . -28104) (undo-tree-id6694 . -28105) (undo-tree-id6695 . -28492) (undo-tree-id6696 . -28493) (undo-tree-id6697 . -29451) (undo-tree-id6698 . -29452) (undo-tree-id6699 . -29613) (undo-tree-id6700 . -29614) (undo-tree-id6701 . -29613) (undo-tree-id6702 . -29614) (undo-tree-id6703 . -29740) (undo-tree-id6704 . -29741) (undo-tree-id6705 . -29735) (undo-tree-id6706 . -29736) (undo-tree-id6707 . -29940) (undo-tree-id6708 . -29941) (undo-tree-id6709 . -30371) (undo-tree-id6710 . -30372) (undo-tree-id6711 . -31420) (undo-tree-id6712 . -31425) (undo-tree-id6713 . -31355) (undo-tree-id6714 . -31356) (undo-tree-id6715 . -31507) (undo-tree-id6716 . -31510) (undo-tree-id6717 . -31579) (undo-tree-id6718 . -31580) (undo-tree-id6719 . -31859) (undo-tree-id6720 . -31860) (undo-tree-id6721 . -31865) (undo-tree-id6722 . -31878) (undo-tree-id6723 . -32216) (undo-tree-id6724 . -32217) (undo-tree-id6725 . -32266) (undo-tree-id6726 . -32267) (undo-tree-id6727 . -32336) (undo-tree-id6728 . -32337) (undo-tree-id6729 . -32558) (undo-tree-id6730 . -32559) (undo-tree-id6731 . -32604) (undo-tree-id6732 . -32605) (undo-tree-id6733 . -32604) (undo-tree-id6734 . -32605) (undo-tree-id6735 . -32609) (undo-tree-id6736 . -32617) (undo-tree-id6737 . -32609) (undo-tree-id6738 . -32617) (undo-tree-id6739 . -32796) (undo-tree-id6740 . -32797) (undo-tree-id6741 . -32994) (undo-tree-id6742 . -32995) (undo-tree-id6743 . -32994) (undo-tree-id6744 . -32995) (undo-tree-id6745 . -33025) (undo-tree-id6746 . -33026) (undo-tree-id6747 . -33261) (undo-tree-id6748 . -33262) (undo-tree-id6749 . -35257) (undo-tree-id6750 . -35258) (undo-tree-id6751 . -35286) (undo-tree-id6752 . -35287) (undo-tree-id6753 . -35381) (undo-tree-id6754 . -35382) (undo-tree-id6755 . -35546) (undo-tree-id6756 . -35547) (undo-tree-id6757 . -37343) (undo-tree-id6758 . -37344) (undo-tree-id6759 . -37485) (undo-tree-id6760 . -37486) (undo-tree-id6761 . -37847) (undo-tree-id6762 . -37848) (undo-tree-id6763 . -37883) (undo-tree-id6764 . -37894) (undo-tree-id6765 . -37924) (undo-tree-id6766 . -37925) (undo-tree-id6767 . -38130) (undo-tree-id6768 . -38131) (undo-tree-id6769 . -38130) (undo-tree-id6770 . -38131) (undo-tree-id6771 . -38130) (undo-tree-id6772 . -38131) (undo-tree-id6773 . -38211) (undo-tree-id6774 . -38212) (undo-tree-id6775 . -38211) (undo-tree-id6776 . -38212) (undo-tree-id6777 . -38212) (undo-tree-id6778 . -38213) (undo-tree-id6779 . -38656) (undo-tree-id6780 . -38662) (undo-tree-id6781 . -38656) (undo-tree-id6782 . -38662) (undo-tree-id6783 . -39283) (undo-tree-id6784 . -39286) (undo-tree-id6785 . -39799) (undo-tree-id6786 . -39800) (undo-tree-id6787 . -40338) (undo-tree-id6788 . -40339) (undo-tree-id6789 . -40340) (undo-tree-id6790 . -40359) (undo-tree-id6791 . -40494) (undo-tree-id6792 . -40495) (undo-tree-id6793 . -40494) (undo-tree-id6794 . -40495) (undo-tree-id6795 . -40494) (undo-tree-id6796 . -40495) (undo-tree-id6797 . -40581) (undo-tree-id6798 . -40592) (undo-tree-id6799 . -40581) (undo-tree-id6800 . -40592) (undo-tree-id6801 . -40644) (undo-tree-id6802 . -40645) (undo-tree-id6803 . -40658) (undo-tree-id6804 . -40659) (undo-tree-id6805 . -40658) (undo-tree-id6806 . -40659) (undo-tree-id6807 . -40800) (undo-tree-id6808 . -40801) (undo-tree-id6809 . -40981) (undo-tree-id6810 . -40982) (undo-tree-id6811 . -41056) (undo-tree-id6812 . -41057) (undo-tree-id6813 . -695) (undo-tree-id6814 . -695) (undo-tree-id6815 . -695) (undo-tree-id6816 . -695) (undo-tree-id6817 . -695) (undo-tree-id6818 . -695) (undo-tree-id6819 . -695) (undo-tree-id6820 . -695) (undo-tree-id6821 . -695) (undo-tree-id6822 . -695) (undo-tree-id6823 . -817) (undo-tree-id6824 . -817) (undo-tree-id6825 . -817) (undo-tree-id6826 . -966) (undo-tree-id6827 . -966) (undo-tree-id6828 . -1726) (undo-tree-id6829 . -1726) (undo-tree-id6830 . -1726) (undo-tree-id6831 . -1726) (undo-tree-id6832 . -695) (undo-tree-id6833 . -695) (undo-tree-id6834 . -695) (undo-tree-id6835 . -695) (undo-tree-id6836 . -695) (undo-tree-id6837 . -695) (undo-tree-id6838 . -695) (undo-tree-id6839 . -695) (undo-tree-id6840 . -23) (undo-tree-id6841 . -27) (undo-tree-id6842 . -51) (undo-tree-id6843 . -57) (undo-tree-id6844 . -259) (undo-tree-id6845 . -265) (undo-tree-id6846 . -284) (undo-tree-id6847 . -290) (undo-tree-id6848 . -430) (undo-tree-id6849 . -450) (undo-tree-id6850 . -696) (undo-tree-id6851 . -699) (undo-tree-id6852 . -817) (undo-tree-id6853 . -828) (undo-tree-id6854 . -966) (undo-tree-id6855 . -974) (undo-tree-id6856 . -1087) (undo-tree-id6857 . -1096) (undo-tree-id6858 . -1470) (undo-tree-id6859 . -1481) (undo-tree-id6860 . -1845) (undo-tree-id6861 . -1852) (undo-tree-id6862 . -2112) (undo-tree-id6863 . -2116) (undo-tree-id6864 . -2455) (undo-tree-id6865 . -2466) (undo-tree-id6866 . -2686) (undo-tree-id6867 . -2687) (undo-tree-id6868 . -2869) (undo-tree-id6869 . -2876) (undo-tree-id6870 . -3072) (undo-tree-id6871 . -3083) (undo-tree-id6872 . -3333) (undo-tree-id6873 . -3334) (undo-tree-id6874 . -3558) (undo-tree-id6875 . -3565) (undo-tree-id6876 . -3761) (undo-tree-id6877 . -3772) (undo-tree-id6878 . -4072) (undo-tree-id6879 . -4073) (undo-tree-id6880 . -4270) (undo-tree-id6881 . -4277) (undo-tree-id6882 . -4473) (undo-tree-id6883 . -4484) (undo-tree-id6884 . -4672) (undo-tree-id6885 . -4675) (undo-tree-id6886 . -4686) (undo-tree-id6887 . -4706) (undo-tree-id6888 . -5096) (undo-tree-id6889 . -5107) (undo-tree-id6890 . -5196) (undo-tree-id6891 . -5202) (undo-tree-id6892 . -5477) (undo-tree-id6893 . -5485) (undo-tree-id6894 . -5597) (undo-tree-id6895 . -5607) (undo-tree-id6896 . -5701) (undo-tree-id6897 . -5721) (undo-tree-id6898 . -6365) (undo-tree-id6899 . -6371) (undo-tree-id6900 . -6854) (undo-tree-id6901 . -6861) (undo-tree-id6902 . -7108) (undo-tree-id6903 . -7109) (undo-tree-id6904 . -7307) (undo-tree-id6905 . -7314) (undo-tree-id6906 . -7360) (undo-tree-id6907 . -7380) (undo-tree-id6908 . -7643) (undo-tree-id6909 . -7647) (undo-tree-id6910 . -8069) (undo-tree-id6911 . -8089) (undo-tree-id6912 . -8338) (undo-tree-id6913 . -8339) (undo-tree-id6914 . -8644) (undo-tree-id6915 . -8645) (undo-tree-id6916 . -9093) (undo-tree-id6917 . -9100) (undo-tree-id6918 . -9146) (undo-tree-id6919 . -9166) (undo-tree-id6920 . -9561) (undo-tree-id6921 . -9562) (undo-tree-id6922 . -9929) (undo-tree-id6923 . -9936) (undo-tree-id6924 . -9984) (undo-tree-id6925 . -9988) (undo-tree-id6926 . -10332) (undo-tree-id6927 . -10336) (undo-tree-id6928 . -11414) (undo-tree-id6929 . -11421) (undo-tree-id6930 . -11968) (undo-tree-id6931 . -11969) (undo-tree-id6932 . -12899) (undo-tree-id6933 . -12900) (undo-tree-id6934 . -13181) (undo-tree-id6935 . -13188) (undo-tree-id6936 . -13649) (undo-tree-id6937 . -13656) (undo-tree-id6938 . -13849) (undo-tree-id6939 . -13869) (undo-tree-id6940 . -14514) (undo-tree-id6941 . -14521) (undo-tree-id6942 . -14714) (undo-tree-id6943 . -14734) (undo-tree-id6944 . -15843) (undo-tree-id6945 . -15844) (undo-tree-id6946 . -16215) (undo-tree-id6947 . -16216) (undo-tree-id6948 . -17308) (undo-tree-id6949 . -17315) (undo-tree-id6950 . -17398) (undo-tree-id6951 . -17403) (undo-tree-id6952 . -18177) (undo-tree-id6953 . -18190) (undo-tree-id6954 . -19096) (undo-tree-id6955 . -19097) (undo-tree-id6956 . -19324) (undo-tree-id6957 . -19331) (undo-tree-id6958 . -19415) (undo-tree-id6959 . -19416) (undo-tree-id6960 . -19993) (undo-tree-id6961 . -19995) (undo-tree-id6962 . -20097) (undo-tree-id6963 . -20100) (undo-tree-id6964 . -20574) (undo-tree-id6965 . -20581) (undo-tree-id6966 . -20714) (undo-tree-id6967 . -20722) (undo-tree-id6968 . -20808) (undo-tree-id6969 . -20809) (undo-tree-id6970 . -22085) (undo-tree-id6971 . -22099) (undo-tree-id6972 . -24179) (undo-tree-id6973 . -24185) (undo-tree-id6974 . -25199) (undo-tree-id6975 . -25216) (undo-tree-id6976 . -25632) (undo-tree-id6977 . -25633) (undo-tree-id6978 . -26076) (undo-tree-id6979 . -26081) (undo-tree-id6980 . -27535) (undo-tree-id6981 . -27541) (undo-tree-id6982 . -27908) (undo-tree-id6983 . -27911) (undo-tree-id6984 . -28300) (undo-tree-id6985 . -28310) (undo-tree-id6986 . -28494) (undo-tree-id6987 . -28498) (undo-tree-id6988 . -29714) (undo-tree-id6989 . -29715) (undo-tree-id6990 . -30019) (undo-tree-id6991 . -30023) (undo-tree-id6992 . -30277) (undo-tree-id6993 . -30284) (undo-tree-id6994 . -30327) (undo-tree-id6995 . -30334) (undo-tree-id6996 . -30578) (undo-tree-id6997 . -30581) (undo-tree-id6998 . -31428) (undo-tree-id6999 . -31438) (undo-tree-id7000 . -31656) (undo-tree-id7001 . -31661) (undo-tree-id7002 . -32098) (undo-tree-id7003 . -32104) (undo-tree-id7004 . -32552) (undo-tree-id7005 . -32556) (undo-tree-id7006 . -33372) (undo-tree-id7007 . -33377) (undo-tree-id7008 . -34102) (undo-tree-id7009 . -34110) (undo-tree-id7010 . -34410) (undo-tree-id7011 . -34414) (undo-tree-id7012 . -34872) (undo-tree-id7013 . -34876) (undo-tree-id7014 . -35020) (undo-tree-id7015 . -35033) (undo-tree-id7016 . -35187) (undo-tree-id7017 . -35200) (undo-tree-id7018 . -35354) (undo-tree-id7019 . -35367) (undo-tree-id7020 . -35773) (undo-tree-id7021 . -35781) (undo-tree-id7022 . -35925) (undo-tree-id7023 . -35930) (undo-tree-id7024 . -36223) (undo-tree-id7025 . -36224) (undo-tree-id7026 . -36438) (undo-tree-id7027 . -36439) (undo-tree-id7028 . -36731) (undo-tree-id7029 . -36732) (undo-tree-id7030 . -37069) (undo-tree-id7031 . -37071) (undo-tree-id7032 . -37744) (undo-tree-id7033 . -37745) (undo-tree-id7034 . -38001) (undo-tree-id7035 . -38009) (undo-tree-id7036 . -38291) (undo-tree-id7037 . -38296) (undo-tree-id7038 . -38717) (undo-tree-id7039 . -38724) (undo-tree-id7040 . -39996) (undo-tree-id7041 . -39999) (undo-tree-id7042 . -40276) (undo-tree-id7043 . -40289) (undo-tree-id7044 . -40419) (undo-tree-id7045 . -40420) (undo-tree-id7046 . -40575) (undo-tree-id7047 . -40576) (undo-tree-id7048 . -40738) (undo-tree-id7049 . -40739) (undo-tree-id7050 . -40879) (undo-tree-id7051 . -40887) (undo-tree-id7052 . -695) (undo-tree-id7053 . -695) (undo-tree-id7054 . -695) (undo-tree-id7055 . -695) (undo-tree-id7056 . -695) (undo-tree-id7057 . -695) (undo-tree-id7058 . -695) (undo-tree-id7059 . -695) (undo-tree-id7060 . -695) (undo-tree-id7061 . -695) (undo-tree-id7062 . -695) (undo-tree-id7063 . -695) (undo-tree-id7064 . -695) (undo-tree-id7065 . -406) (undo-tree-id7066 . -695) (undo-tree-id7067 . -695) (undo-tree-id7068 . -695) (undo-tree-id7069 . -695) (undo-tree-id7070 . -695) (undo-tree-id7071 . -695) (undo-tree-id7072 . -695) (undo-tree-id7073 . -695) (undo-tree-id7074 . -695) (undo-tree-id7075 . -695) (undo-tree-id7076 . -695) (undo-tree-id7077 . -695) (undo-tree-id7078 . -695) (undo-tree-id7079 . -695) (undo-tree-id7080 . -695) (undo-tree-id7081 . -695) (undo-tree-id7082 . -406) (undo-tree-id7083 . -695) (undo-tree-id7084 . -695) (undo-tree-id7085 . -695) (undo-tree-id7086 . -695)) nil (25760 29907 548429 19000) 0 nil])
([nil nil ((#("# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 263 (face font-lock-comment-face fontified t)) . 1008) (undo-tree-id7615 . -262) (undo-tree-id7616 . -138) (undo-tree-id7617 . -2) (undo-tree-id7618 . -2) (undo-tree-id7619 . -2) (undo-tree-id7620 . -2) (undo-tree-id7621 . -2) (undo-tree-id7622 . -2) (undo-tree-id7623 . -2) (undo-tree-id7624 . -2) (undo-tree-id7625 . -2) (undo-tree-id7626 . -2) (undo-tree-id7627 . -2) (undo-tree-id7628 . -2) (undo-tree-id7629 . -2) (undo-tree-id7630 . -2) (undo-tree-id7631 . -2) (undo-tree-id7632 . -2) (undo-tree-id7633 . -2) (undo-tree-id7634 . -2) (undo-tree-id7635 . -2) (undo-tree-id7636 . -2) (undo-tree-id7637 . -2) (undo-tree-id7638 . -2) (undo-tree-id7639 . -2) (undo-tree-id7640 . -2) (undo-tree-id7641 . -2) (undo-tree-id7642 . -2) (undo-tree-id7643 . -2) (undo-tree-id7644 . -2) (undo-tree-id7645 . -2) (undo-tree-id7646 . -2) (undo-tree-id7647 . -2) (undo-tree-id7648 . -2) (undo-tree-id7649 . -2) (undo-tree-id7650 . -2) (undo-tree-id7651 . -2) (undo-tree-id7652 . -2) (undo-tree-id7653 . -2) (undo-tree-id7654 . -2) (undo-tree-id7655 . -2) (undo-tree-id7656 . -2) (undo-tree-id7657 . -2) (undo-tree-id7658 . -2) (undo-tree-id7659 . -2) (undo-tree-id7660 . -2) (undo-tree-id7661 . -2) (undo-tree-id7662 . -2) (undo-tree-id7663 . -2) (undo-tree-id7664 . -4) (undo-tree-id7665 . -4) (undo-tree-id7666 . -4) (undo-tree-id7667 . -4) (undo-tree-id7668 . -4) (undo-tree-id7669 . -4) (undo-tree-id7670 . -4) (undo-tree-id7671 . -4) (undo-tree-id7672 . -4) (undo-tree-id7673 . -4) (undo-tree-id7674 . -4) (undo-tree-id7675 . -4) (undo-tree-id7676 . -4) (undo-tree-id7677 . -4) (undo-tree-id7678 . -4) (undo-tree-id7679 . -4) (undo-tree-id7680 . -4) (undo-tree-id7681 . -4) (undo-tree-id7682 . -4) (undo-tree-id7683 . -4) (undo-tree-id7684 . -4) (undo-tree-id7685 . -4) (undo-tree-id7686 . -4) (undo-tree-id7687 . -4) (undo-tree-id7688 . -4) (undo-tree-id7689 . -4) (undo-tree-id7690 . -4) (undo-tree-id7691 . -4) (undo-tree-id7692 . -4) (undo-tree-id7693 . -4) (undo-tree-id7694 . -4) (undo-tree-id7695 . -4) (undo-tree-id7696 . -4) (undo-tree-id7697 . -4) (undo-tree-id7698 . -4) (undo-tree-id7699 . -4) (undo-tree-id7700 . -4) (undo-tree-id7701 . -4) (undo-tree-id7702 . -4) (undo-tree-id7703 . -4) (undo-tree-id7704 . -4) (undo-tree-id7705 . -4) (undo-tree-id7706 . -4) (undo-tree-id7707 . -4) (undo-tree-id7708 . -4) (undo-tree-id7709 . -4) (undo-tree-id7710 . -4) (undo-tree-id7711 . -4) (undo-tree-id7712 . -4) (undo-tree-id7713 . -4) (undo-tree-id7714 . -4) (undo-tree-id7715 . -4) (undo-tree-id7716 . -4) (undo-tree-id7717 . -4) (undo-tree-id7718 . -4) (undo-tree-id7719 . -4) (undo-tree-id7720 . -4) (undo-tree-id7721 . -4) (undo-tree-id7722 . -4) (undo-tree-id7723 . -4) (undo-tree-id7724 . -4) (undo-tree-id7725 . -4) (undo-tree-id7726 . -4) (undo-tree-id7727 . -4) (undo-tree-id7728 . -4) (undo-tree-id7729 . -4) (undo-tree-id7730 . -4) (undo-tree-id7731 . -4) (undo-tree-id7732 . -4) (undo-tree-id7733 . -4) (undo-tree-id7734 . -4) (undo-tree-id7735 . -4) (undo-tree-id7736 . -4) (undo-tree-id7737 . -4) (undo-tree-id7738 . -4) (undo-tree-id7739 . -4) (undo-tree-id7740 . -4) (undo-tree-id7741 . -4) (undo-tree-id7742 . -4) (undo-tree-id7743 . -4) (undo-tree-id7744 . -4) (undo-tree-id7745 . -4) (undo-tree-id7746 . -4) (undo-tree-id7747 . -4) (undo-tree-id7748 . -4) (undo-tree-id7749 . -4) (undo-tree-id7750 . -4) (undo-tree-id7751 . -4) (undo-tree-id7752 . -4) (undo-tree-id7753 . -4) (undo-tree-id7754 . -4) (undo-tree-id7755 . -4) (undo-tree-id7756 . -4) (undo-tree-id7757 . -4) (undo-tree-id7758 . -4) (undo-tree-id7759 . -4) (undo-tree-id7760 . -4) (undo-tree-id7761 . -4) (undo-tree-id7762 . -4) (undo-tree-id7763 . -4) (undo-tree-id7764 . -71) (undo-tree-id7765 . -71) (undo-tree-id7766 . -71) (undo-tree-id7767 . -71) (undo-tree-id7768 . -71) (undo-tree-id7769 . -71) (undo-tree-id7770 . -71) (undo-tree-id7771 . -71) (undo-tree-id7772 . -71) (undo-tree-id7773 . -71) (undo-tree-id7774 . -71) (undo-tree-id7775 . -71) (undo-tree-id7776 . -71) (undo-tree-id7777 . -71) (undo-tree-id7778 . -71) (undo-tree-id7779 . -71) (undo-tree-id7780 . -71) (undo-tree-id7781 . -71) (undo-tree-id7782 . -71) (undo-tree-id7783 . -71) (undo-tree-id7784 . -71) (undo-tree-id7785 . -71) (undo-tree-id7786 . -71) (undo-tree-id7787 . -71) (undo-tree-id7788 . -71) (undo-tree-id7789 . -71) (undo-tree-id7790 . -71) (undo-tree-id7791 . -71) (undo-tree-id7792 . -71) (undo-tree-id7793 . -138) (undo-tree-id7794 . -138) (undo-tree-id7795 . -138) (undo-tree-id7796 . -138) (undo-tree-id7797 . -138) (undo-tree-id7798 . -138) (undo-tree-id7799 . -138) (undo-tree-id7800 . -138) (undo-tree-id7801 . -138) (undo-tree-id7802 . -138) (undo-tree-id7803 . -138) (undo-tree-id7804 . -138) (undo-tree-id7805 . -138) (undo-tree-id7806 . -138) (undo-tree-id7807 . -138) (undo-tree-id7808 . -138) (undo-tree-id7809 . -138) (undo-tree-id7810 . -138) (undo-tree-id7811 . -138) (undo-tree-id7812 . -138) (undo-tree-id7813 . -138) (undo-tree-id7814 . -138) (undo-tree-id7815 . -138) (undo-tree-id7816 . -138) (undo-tree-id7817 . -138) (undo-tree-id7818 . -138) (undo-tree-id7819 . -138) (undo-tree-id7820 . -138) (undo-tree-id7821 . -138) (undo-tree-id7822 . -138) (undo-tree-id7823 . -138) (undo-tree-id7824 . -138) (undo-tree-id7825 . -138) (undo-tree-id7826 . -138) (undo-tree-id7827 . -138) (undo-tree-id7828 . -138) (undo-tree-id7829 . -138) (undo-tree-id7830 . -138) (undo-tree-id7831 . -138) (undo-tree-id7832 . -138) (undo-tree-id7833 . -138) (undo-tree-id7834 . -138) (undo-tree-id7835 . -138) (undo-tree-id7836 . -138) (undo-tree-id7837 . -138) (undo-tree-id7838 . -138) (undo-tree-id7839 . -138) (undo-tree-id7840 . -138) (undo-tree-id7841 . -138) (undo-tree-id7842 . -138) (undo-tree-id7843 . -138) (undo-tree-id7844 . -138) (undo-tree-id7845 . -138) (undo-tree-id7846 . -138) (undo-tree-id7847 . -138) (undo-tree-id7848 . -138) (undo-tree-id7849 . -138) (undo-tree-id7850 . -138) (undo-tree-id7851 . -138) (undo-tree-id7852 . -138) (undo-tree-id7853 . -138) (undo-tree-id7854 . -138) (undo-tree-id7855 . -138) (undo-tree-id7856 . -138) (undo-tree-id7857 . -138) (undo-tree-id7858 . -138) (undo-tree-id7859 . -138) (undo-tree-id7860 . -138) (undo-tree-id7861 . -138) (undo-tree-id7862 . -138) (undo-tree-id7863 . -138) (undo-tree-id7864 . -138) (undo-tree-id7865 . -138) (undo-tree-id7866 . -138) (undo-tree-id7867 . -138) (undo-tree-id7868 . -138) (undo-tree-id7869 . -138) (undo-tree-id7870 . -138) (undo-tree-id7871 . -138) (undo-tree-id7872 . -138) (undo-tree-id7873 . -138) (undo-tree-id7874 . -138) (undo-tree-id7875 . -138) (undo-tree-id7876 . -138) (undo-tree-id7877 . -138) (undo-tree-id7878 . -138) (undo-tree-id7879 . -138) (undo-tree-id7880 . -138) (undo-tree-id7881 . -138) (undo-tree-id7882 . -138) (undo-tree-id7883 . -138) (undo-tree-id7884 . -138) (undo-tree-id7885 . -138) (undo-tree-id7886 . -138) (undo-tree-id7887 . -138) (undo-tree-id7888 . -138) (undo-tree-id7889 . -138) (undo-tree-id7890 . -138) (undo-tree-id7891 . -138) (undo-tree-id7892 . -138) (undo-tree-id7893 . -138) (undo-tree-id7894 . -138) (undo-tree-id7895 . -138) (undo-tree-id7896 . -138) (undo-tree-id7897 . -138) (undo-tree-id7898 . -138) (undo-tree-id7899 . -138) (undo-tree-id7900 . -138) (undo-tree-id7901 . -138) (undo-tree-id7902 . -138) (undo-tree-id7903 . -138) (undo-tree-id7904 . -138) (undo-tree-id7905 . -138) (undo-tree-id7906 . -138) (undo-tree-id7907 . -138) (undo-tree-id7908 . -138) (undo-tree-id7909 . -138) (undo-tree-id7910 . -138) (undo-tree-id7911 . -138) (undo-tree-id7912 . -138) (undo-tree-id7913 . -138) (undo-tree-id7914 . -138) (undo-tree-id7915 . -138) (undo-tree-id7916 . -138) (undo-tree-id7917 . -138) (undo-tree-id7918 . -138) (undo-tree-id7919 . -138) (undo-tree-id7920 . -138) (undo-tree-id7921 . -138) (undo-tree-id7922 . -138) (undo-tree-id7923 . -138) (undo-tree-id7924 . -138) (undo-tree-id7925 . -138) (undo-tree-id7926 . -138) (undo-tree-id7927 . -138) (undo-tree-id7928 . -138) (undo-tree-id7929 . -138) (undo-tree-id7930 . -138) (undo-tree-id7931 . -138) (undo-tree-id7932 . -138) (undo-tree-id7933 . -138) (undo-tree-id7934 . -138) (undo-tree-id7935 . -138) (undo-tree-id7936 . -138) (undo-tree-id7937 . -138) (undo-tree-id7938 . -138) (undo-tree-id7939 . -138) (undo-tree-id7940 . -138) (undo-tree-id7941 . -138) (undo-tree-id7942 . -138) (undo-tree-id7943 . -138) (undo-tree-id7944 . -138) (undo-tree-id7945 . -138) (undo-tree-id7946 . -138) (undo-tree-id7947 . -138) (undo-tree-id7948 . -138) (undo-tree-id7949 . -138) (undo-tree-id7950 . -138) (undo-tree-id7951 . -138) (undo-tree-id7952 . -138) (undo-tree-id7953 . -138) (undo-tree-id7954 . -138) (undo-tree-id7955 . -138) (undo-tree-id7956 . -138) (undo-tree-id7957 . -138) (undo-tree-id7958 . -138) (undo-tree-id7959 . -138) (undo-tree-id7960 . -138) (undo-tree-id7961 . -138) (undo-tree-id7962 . -138) (undo-tree-id7963 . -138) (undo-tree-id7964 . -138) (undo-tree-id7965 . -138) (undo-tree-id7966 . -138) (undo-tree-id7967 . -138) (undo-tree-id7968 . -138) (undo-tree-id7969 . -138) (undo-tree-id7970 . -138) (undo-tree-id7971 . -138) (undo-tree-id7972 . -138) (undo-tree-id7973 . -138) (undo-tree-id7974 . -138) (undo-tree-id7975 . -138) (undo-tree-id7976 . -138) (undo-tree-id7977 . -138) (undo-tree-id7978 . -138) (undo-tree-id7979 . -138) (undo-tree-id7980 . -138) (undo-tree-id7981 . -138) (undo-tree-id7982 . -138) (undo-tree-id7983 . -138) (undo-tree-id7984 . -138) (undo-tree-id7985 . -138) (undo-tree-id7986 . -138) (undo-tree-id7987 . -138) (undo-tree-id7988 . -138) (undo-tree-id7989 . -138) (undo-tree-id7990 . -138) (undo-tree-id7991 . -138) (undo-tree-id7992 . -138) (undo-tree-id7993 . -138) (undo-tree-id7994 . -138) (undo-tree-id7995 . -138) (undo-tree-id7996 . -138) (undo-tree-id7997 . -138) (undo-tree-id7998 . -138) (undo-tree-id7999 . -138) (undo-tree-id8000 . -138) (undo-tree-id8001 . -138) (undo-tree-id8002 . -138) (undo-tree-id8003 . -138) (undo-tree-id8004 . -138) (undo-tree-id8005 . -138) (undo-tree-id8006 . -138) (undo-tree-id8007 . -138) (undo-tree-id8008 . -138) (undo-tree-id8009 . -138) (undo-tree-id8010 . -138) (undo-tree-id8011 . -138) (undo-tree-id8012 . -138) (undo-tree-id8013 . -138) (undo-tree-id8014 . -138) (undo-tree-id8015 . -138) (undo-tree-id8016 . -138) (undo-tree-id8017 . -138) (undo-tree-id8018 . -138) (undo-tree-id8019 . -138) (undo-tree-id8020 . -138) (undo-tree-id8021 . -138) (undo-tree-id8022 . -138) (undo-tree-id8023 . -138) (undo-tree-id8024 . -138) (undo-tree-id8025 . -138) (undo-tree-id8026 . -138) (undo-tree-id8027 . -138) (undo-tree-id8028 . -138) (undo-tree-id8029 . -138) (undo-tree-id8030 . -138) (undo-tree-id8031 . -138) (undo-tree-id8032 . -138) (undo-tree-id8033 . -138) (undo-tree-id8034 . -138) (undo-tree-id8035 . -138) (undo-tree-id8036 . -138) (undo-tree-id8037 . -138) (undo-tree-id8038 . -138) (undo-tree-id8039 . -138) (undo-tree-id8040 . -138) (undo-tree-id8041 . -138) (undo-tree-id8042 . -138) (undo-tree-id8043 . -138) (undo-tree-id8044 . -138) (undo-tree-id8045 . -138) (undo-tree-id8046 . -138) (undo-tree-id8047 . -138) (undo-tree-id8048 . -138) (undo-tree-id8049 . -138) (undo-tree-id8050 . -138) (undo-tree-id8051 . -138) (undo-tree-id8052 . -138) (undo-tree-id8053 . -138) (undo-tree-id8054 . -138) (undo-tree-id8055 . -138) (undo-tree-id8056 . -138) (undo-tree-id8057 . -138) (undo-tree-id8058 . -138) (undo-tree-id8059 . -138) (undo-tree-id8060 . -138) (undo-tree-id8061 . -138) (undo-tree-id8062 . -138) (undo-tree-id8063 . -138) (undo-tree-id8064 . -138) (undo-tree-id8065 . -138) (undo-tree-id8066 . -138) (undo-tree-id8067 . -138) (undo-tree-id8068 . -138) (undo-tree-id8069 . -138) (undo-tree-id8070 . -138) (undo-tree-id8071 . -138) (undo-tree-id8072 . -138) (undo-tree-id8073 . -138) (undo-tree-id8074 . -138) (undo-tree-id8075 . -138) (undo-tree-id8076 . -138) (undo-tree-id8077 . -138) (undo-tree-id8078 . -138) (undo-tree-id8079 . -138) (undo-tree-id8080 . -138) (undo-tree-id8081 . -138) (undo-tree-id8082 . -138) (undo-tree-id8083 . -138) (undo-tree-id8084 . -138) (undo-tree-id8085 . -138) (undo-tree-id8086 . -138) (undo-tree-id8087 . -138) (undo-tree-id8088 . -138) (undo-tree-id8089 . -138) (undo-tree-id8090 . -138) (undo-tree-id8091 . -138) (undo-tree-id8092 . -138) (undo-tree-id8093 . -138) (undo-tree-id8094 . -138) (undo-tree-id8095 . -138) (undo-tree-id8096 . -138) (undo-tree-id8097 . -138) (undo-tree-id8098 . -138) (undo-tree-id8099 . -138) (undo-tree-id8100 . -138) (undo-tree-id8101 . -138) (undo-tree-id8102 . -138) (undo-tree-id8103 . -138) (undo-tree-id8104 . -138) (undo-tree-id8105 . -138) (undo-tree-id8106 . -138) (undo-tree-id8107 . -138) (undo-tree-id8108 . -138) (undo-tree-id8109 . -138) (undo-tree-id8110 . -138) (undo-tree-id8111 . -138) (undo-tree-id8112 . -138) (undo-tree-id8113 . -138) (undo-tree-id8114 . -138) (undo-tree-id8115 . -138) (undo-tree-id8116 . -138) (undo-tree-id8117 . -138) (undo-tree-id8118 . -138) (undo-tree-id8119 . -138) (undo-tree-id8120 . -138) (undo-tree-id8121 . -138) (undo-tree-id8122 . -138) (undo-tree-id8123 . -138) (undo-tree-id8124 . -138) (undo-tree-id8125 . -138) (undo-tree-id8126 . -138) (undo-tree-id8127 . -138) (undo-tree-id8128 . -138) (undo-tree-id8129 . -138) (undo-tree-id8130 . -138) (undo-tree-id8131 . -138) (undo-tree-id8132 . -138) (undo-tree-id8133 . -138) (undo-tree-id8134 . -138) (undo-tree-id8135 . -138) (undo-tree-id8136 . -138) (undo-tree-id8137 . -138) (undo-tree-id8138 . -138) (undo-tree-id8139 . -138) (undo-tree-id8140 . -138) (undo-tree-id8141 . -138) (undo-tree-id8142 . -138) (undo-tree-id8143 . -138) (undo-tree-id8144 . -138) (undo-tree-id8145 . -138) (undo-tree-id8146 . -138) (undo-tree-id8147 . -138) (undo-tree-id8148 . -138) (undo-tree-id8149 . -138) (undo-tree-id8150 . -138) (undo-tree-id8151 . -138) (undo-tree-id8152 . -138) (undo-tree-id8153 . -138) (undo-tree-id8154 . -138) (undo-tree-id8155 . -138) (undo-tree-id8156 . -138) (undo-tree-id8157 . -138) (undo-tree-id8158 . -138) (undo-tree-id8159 . -138) (undo-tree-id8160 . -138) (undo-tree-id8161 . -138) (undo-tree-id8162 . -138) (undo-tree-id8163 . -138) (undo-tree-id8164 . -138) (undo-tree-id8165 . -138) (undo-tree-id8166 . -138) (undo-tree-id8167 . -138) (undo-tree-id8168 . -138) (undo-tree-id8169 . -138) (undo-tree-id8170 . -138) (undo-tree-id8171 . -138) (undo-tree-id8172 . -138) (undo-tree-id8173 . -138) (undo-tree-id8174 . -138) (undo-tree-id8175 . -138) (undo-tree-id8176 . -138) (undo-tree-id8177 . -138) (undo-tree-id8178 . -138) (undo-tree-id8179 . -138) (undo-tree-id8180 . -138) (undo-tree-id8181 . -138) (undo-tree-id8182 . -138) (undo-tree-id8183 . -138) (undo-tree-id8184 . -138) (undo-tree-id8185 . -138) (undo-tree-id8186 . -138) (undo-tree-id8187 . -138) (undo-tree-id8188 . -138) (undo-tree-id8189 . -138) (undo-tree-id8190 . -138) (undo-tree-id8191 . -138) (undo-tree-id8192 . -138) (undo-tree-id8193 . -138) (undo-tree-id8194 . -138) (undo-tree-id8195 . -138) (undo-tree-id8196 . -138) (undo-tree-id8197 . -138) (undo-tree-id8198 . -138) (undo-tree-id8199 . -138) (undo-tree-id8200 . -138) (undo-tree-id8201 . -138) (undo-tree-id8202 . -138) (undo-tree-id8203 . -138) (undo-tree-id8204 . -138) (undo-tree-id8205 . -138) (undo-tree-id8206 . -138) (undo-tree-id8207 . -138) (undo-tree-id8208 . -138) (undo-tree-id8209 . -138) (undo-tree-id8210 . -138) (undo-tree-id8211 . -138) (undo-tree-id8212 . -138) (undo-tree-id8213 . -138) (undo-tree-id8214 . -138) (undo-tree-id8215 . -138) (undo-tree-id8216 . -138) (undo-tree-id8217 . -138) (undo-tree-id8218 . -138) (undo-tree-id8219 . -138) (undo-tree-id8220 . -138) (undo-tree-id8221 . -138) (undo-tree-id8222 . -138) (undo-tree-id8223 . -138) (undo-tree-id8224 . -138) (undo-tree-id8225 . -138) (undo-tree-id8226 . -138) (undo-tree-id8227 . -138) (undo-tree-id8228 . -138) (undo-tree-id8229 . -138) (undo-tree-id8230 . -138) (undo-tree-id8231 . -138) (undo-tree-id8232 . -138) (undo-tree-id8233 . -138) (undo-tree-id8234 . -138) (undo-tree-id8235 . -138) (undo-tree-id8236 . -138) (undo-tree-id8237 . -138) (undo-tree-id8238 . -138) (undo-tree-id8239 . -138) (undo-tree-id8240 . -138) (undo-tree-id8241 . -138) (undo-tree-id8242 . -138) (undo-tree-id8243 . -138) (undo-tree-id8244 . -138) (undo-tree-id8245 . -138) (undo-tree-id8246 . -138) (undo-tree-id8247 . -138) (undo-tree-id8248 . -138) (undo-tree-id8249 . -138) (undo-tree-id8250 . -138) (undo-tree-id8251 . -138) (undo-tree-id8252 . -138) (undo-tree-id8253 . -138) (undo-tree-id8254 . -138) (undo-tree-id8255 . -138) (undo-tree-id8256 . -138) (undo-tree-id8257 . -138) (undo-tree-id8258 . -138) (undo-tree-id8259 . -138) (undo-tree-id8260 . -138) (undo-tree-id8261 . -138) (undo-tree-id8262 . -138) (undo-tree-id8263 . -138) (undo-tree-id8264 . -138) (undo-tree-id8265 . -138) (undo-tree-id8266 . -138) (undo-tree-id8267 . -138) (undo-tree-id8268 . -138) (undo-tree-id8269 . -138) (undo-tree-id8270 . -138) (undo-tree-id8271 . -138) (undo-tree-id8272 . -138) (undo-tree-id8273 . -138) (undo-tree-id8274 . -138) (undo-tree-id8275 . -138) (undo-tree-id8276 . -138) (undo-tree-id8277 . -138) (undo-tree-id8278 . -138) (undo-tree-id8279 . -138) (undo-tree-id8280 . -138) (undo-tree-id8281 . -138) (undo-tree-id8282 . -138) (undo-tree-id8283 . -138) (undo-tree-id8284 . -138) (undo-tree-id8285 . -138) (undo-tree-id8286 . -138) (undo-tree-id8287 . -138) (undo-tree-id8288 . -138) (undo-tree-id8289 . -138) (undo-tree-id8290 . -138) (undo-tree-id8291 . -138) (undo-tree-id8292 . -138) (undo-tree-id8293 . -138) (undo-tree-id8294 . -138) (undo-tree-id8295 . -138) (undo-tree-id8296 . -138) (undo-tree-id8297 . -138) (undo-tree-id8298 . -138) (undo-tree-id8299 . -138) (undo-tree-id8300 . -138) (undo-tree-id8301 . -138) (undo-tree-id8302 . -138) (undo-tree-id8303 . -138) (undo-tree-id8304 . -138) (undo-tree-id8305 . -138) (undo-tree-id8306 . -138) (undo-tree-id8307 . -138) (undo-tree-id8308 . -138) (undo-tree-id8309 . -138) (undo-tree-id8310 . -138) (undo-tree-id8311 . -138) (undo-tree-id8312 . -138) (undo-tree-id8313 . -138) (undo-tree-id8314 . -138) (undo-tree-id8315 . -138) (undo-tree-id8316 . -138) (undo-tree-id8317 . -138) (undo-tree-id8318 . -138) (undo-tree-id8319 . -138) (undo-tree-id8320 . -138) (undo-tree-id8321 . -138) (undo-tree-id8322 . -138) (undo-tree-id8323 . -138) (undo-tree-id8324 . -138) (undo-tree-id8325 . -138) (undo-tree-id8326 . -138) (undo-tree-id8327 . -138) (undo-tree-id8328 . -138) (undo-tree-id8329 . -138) (undo-tree-id8330 . -138) (undo-tree-id8331 . -138) (undo-tree-id8332 . -138) (undo-tree-id8333 . -138) (undo-tree-id8334 . -138) (undo-tree-id8335 . -138) (undo-tree-id8336 . -138) (undo-tree-id8337 . -138) (undo-tree-id8338 . -138) (undo-tree-id8339 . -138) (undo-tree-id8340 . -138) (undo-tree-id8341 . -138) (undo-tree-id8342 . -138) (undo-tree-id8343 . -138) (undo-tree-id8344 . -138) (undo-tree-id8345 . -138) (undo-tree-id8346 . -138) (undo-tree-id8347 . -138) (undo-tree-id8348 . -138) (undo-tree-id8349 . -138) (undo-tree-id8350 . -138) (undo-tree-id8351 . -138) (undo-tree-id8352 . -138) (undo-tree-id8353 . -138) (undo-tree-id8354 . -138) (undo-tree-id8355 . -138) (undo-tree-id8356 . -138) (undo-tree-id8357 . -138) (undo-tree-id8358 . -138) (undo-tree-id8359 . -138) (undo-tree-id8360 . -138) (undo-tree-id8361 . -138) (undo-tree-id8362 . -138) (undo-tree-id8363 . -138) (undo-tree-id8364 . -138) (undo-tree-id8365 . -138) (undo-tree-id8366 . -138) (undo-tree-id8367 . -138) (undo-tree-id8368 . -138) (undo-tree-id8369 . -138) (undo-tree-id8370 . -138) (undo-tree-id8371 . -138) (undo-tree-id8372 . -138) (undo-tree-id8373 . -138) (undo-tree-id8374 . -138) (undo-tree-id8375 . -138) (undo-tree-id8376 . -138) (undo-tree-id8377 . -138) (undo-tree-id8378 . -138) (undo-tree-id8379 . -138) (undo-tree-id8380 . -138) (undo-tree-id8381 . -138) (undo-tree-id8382 . -138) (undo-tree-id8383 . -138) (undo-tree-id8384 . -138) (undo-tree-id8385 . -138) (undo-tree-id8386 . -138) (undo-tree-id8387 . -138) (undo-tree-id8388 . -138) (undo-tree-id8389 . -138) (undo-tree-id8390 . -138) (undo-tree-id8391 . -138) (undo-tree-id8392 . -138) (undo-tree-id8393 . -138) (undo-tree-id8394 . -138) (undo-tree-id8395 . -138) (undo-tree-id8396 . -138) (undo-tree-id8397 . -138) (undo-tree-id8398 . -138) (undo-tree-id8399 . -138) (undo-tree-id8400 . -138) (undo-tree-id8401 . -138) (undo-tree-id8402 . -138) (undo-tree-id8403 . -138) (undo-tree-id8404 . -138) (undo-tree-id8405 . -138) (undo-tree-id8406 . -138) (undo-tree-id8407 . -138) (undo-tree-id8408 . -138) (undo-tree-id8409 . -138) (undo-tree-id8410 . -138) (undo-tree-id8411 . -138) (undo-tree-id8412 . -138) (undo-tree-id8413 . -138) (undo-tree-id8414 . -138) (undo-tree-id8415 . -138) (undo-tree-id8416 . -138) (undo-tree-id8417 . -138) (undo-tree-id8418 . -138) (undo-tree-id8419 . -138) (undo-tree-id8420 . -138) (undo-tree-id8421 . -138) (undo-tree-id8422 . -138) (undo-tree-id8423 . -138) (undo-tree-id8424 . -138) (undo-tree-id8425 . -138) (undo-tree-id8426 . -138) (undo-tree-id8427 . -138) (undo-tree-id8428 . -138) (undo-tree-id8429 . -138) (undo-tree-id8430 . -138) (undo-tree-id8431 . -138) (undo-tree-id8432 . -138) (undo-tree-id8433 . -138) (undo-tree-id8434 . -138) (undo-tree-id8435 . -138) (undo-tree-id8436 . -138) (undo-tree-id8437 . -138) (undo-tree-id8438 . -138) (undo-tree-id8439 . -138) (undo-tree-id8440 . -138) (undo-tree-id8441 . -138) (undo-tree-id8442 . -138) (undo-tree-id8443 . -138) (undo-tree-id8444 . -138) (undo-tree-id8445 . -138) (undo-tree-id8446 . -138) (undo-tree-id8447 . -138) (undo-tree-id8448 . -138) (undo-tree-id8449 . -138) (undo-tree-id8450 . -138) (undo-tree-id8451 . -138) (undo-tree-id8452 . -138) (undo-tree-id8453 . -138) (undo-tree-id8454 . -138) (undo-tree-id8455 . -138) (undo-tree-id8456 . -138) (undo-tree-id8457 . -138) (undo-tree-id8458 . -138) (undo-tree-id8459 . -138) (undo-tree-id8460 . -138) (undo-tree-id8461 . -138) (undo-tree-id8462 . -138) (undo-tree-id8463 . -138) (undo-tree-id8464 . -138) (undo-tree-id8465 . -138) (undo-tree-id8466 . -138) (undo-tree-id8467 . -138) (undo-tree-id8468 . -138) (undo-tree-id8469 . -138) (undo-tree-id8470 . -138) (undo-tree-id8471 . -138) (undo-tree-id8472 . -138) (undo-tree-id8473 . -138) (undo-tree-id8474 . -138) (undo-tree-id8475 . -138) (undo-tree-id8476 . -138) (undo-tree-id8477 . -138) (undo-tree-id8478 . -138) (undo-tree-id8479 . -138) (undo-tree-id8480 . -138) (undo-tree-id8481 . -138) (undo-tree-id8482 . -138) (undo-tree-id8483 . -138) (undo-tree-id8484 . -138) (undo-tree-id8485 . -138) (undo-tree-id8486 . -138) (undo-tree-id8487 . -138) (undo-tree-id8488 . -138) (undo-tree-id8489 . -138) (undo-tree-id8490 . -138) (undo-tree-id8491 . -138) (undo-tree-id8492 . -138) (undo-tree-id8493 . -138) (undo-tree-id8494 . -138) (undo-tree-id8495 . -138) (undo-tree-id8496 . -138) (undo-tree-id8497 . -138) (undo-tree-id8498 . -138) (undo-tree-id8499 . -138) (undo-tree-id8500 . -138) (undo-tree-id8501 . -138) (undo-tree-id8502 . -138) (undo-tree-id8503 . -138) (undo-tree-id8504 . -138) (undo-tree-id8505 . -138) (undo-tree-id8506 . -138) (undo-tree-id8507 . -138) (undo-tree-id8508 . -138) (undo-tree-id8509 . -138) (undo-tree-id8510 . -138) (undo-tree-id8511 . -138) (undo-tree-id8512 . -138) (undo-tree-id8513 . -138) (undo-tree-id8514 . -138) (undo-tree-id8515 . -138) (undo-tree-id8516 . -138) (undo-tree-id8517 . -138) (undo-tree-id8518 . -138) (undo-tree-id8519 . -138) (undo-tree-id8520 . -138) (undo-tree-id8521 . -138) (undo-tree-id8522 . -138) (undo-tree-id8523 . -138) (undo-tree-id8524 . -138) (undo-tree-id8525 . -138) (undo-tree-id8526 . -138) (undo-tree-id8527 . -138) (undo-tree-id8528 . -138) (undo-tree-id8529 . -138) (undo-tree-id8530 . -138) (undo-tree-id8531 . -138) (undo-tree-id8532 . -138) (undo-tree-id8533 . -138) (undo-tree-id8534 . -138) (undo-tree-id8535 . -138) (undo-tree-id8536 . -138) (undo-tree-id8537 . -138) (undo-tree-id8538 . -138) (undo-tree-id8539 . -138) (undo-tree-id8540 . -138) (undo-tree-id8541 . -138) (undo-tree-id8542 . -138) (undo-tree-id8543 . -138) (undo-tree-id8544 . -138) (undo-tree-id8545 . -138) (undo-tree-id8546 . -138) (undo-tree-id8547 . -138) (undo-tree-id8548 . -138) (undo-tree-id8549 . -138) (undo-tree-id8550 . -138) (undo-tree-id8551 . -138) (undo-tree-id8552 . -138) (undo-tree-id8553 . -138) (undo-tree-id8554 . -138) (undo-tree-id8555 . -138) (undo-tree-id8556 . -138) (undo-tree-id8557 . -138) (undo-tree-id8558 . -138) (undo-tree-id8559 . -138) (undo-tree-id8560 . -138) (undo-tree-id8561 . -138) (undo-tree-id8562 . -138) (undo-tree-id8563 . -138) (undo-tree-id8564 . -138) (undo-tree-id8565 . -138) (undo-tree-id8566 . -138) (undo-tree-id8567 . -138) (undo-tree-id8568 . -138) (undo-tree-id8569 . -138) (undo-tree-id8570 . -138) (undo-tree-id8571 . -138) (undo-tree-id8572 . -138) (undo-tree-id8573 . -138) (undo-tree-id8574 . -138) (undo-tree-id8575 . -138) (undo-tree-id8576 . -138) (undo-tree-id8577 . -138) (undo-tree-id8578 . -138) (undo-tree-id8579 . -138) (undo-tree-id8580 . -138) (undo-tree-id8581 . -138) (undo-tree-id8582 . -138) (undo-tree-id8583 . -138) (undo-tree-id8584 . -138) (undo-tree-id8585 . -138) (undo-tree-id8586 . -138) (undo-tree-id8587 . -138) (undo-tree-id8588 . -138) (undo-tree-id8589 . -138) (undo-tree-id8590 . -138) (undo-tree-id8591 . -138) (undo-tree-id8592 . -138) (undo-tree-id8593 . -138) (undo-tree-id8594 . -138) (undo-tree-id8595 . -138) (undo-tree-id8596 . -138) (undo-tree-id8597 . -138) (undo-tree-id8598 . -138) (undo-tree-id8599 . -138) (undo-tree-id8600 . -138) (undo-tree-id8601 . -138) (undo-tree-id8602 . -138) (undo-tree-id8603 . -138) (undo-tree-id8604 . -138) (undo-tree-id8605 . -138) (undo-tree-id8606 . -138) (undo-tree-id8607 . -138) (undo-tree-id8608 . -138) (undo-tree-id8609 . -138) (undo-tree-id8610 . -138) (undo-tree-id8611 . -138) (undo-tree-id8612 . -138) (undo-tree-id8613 . -138) (undo-tree-id8614 . -138) (undo-tree-id8615 . -138) (undo-tree-id8616 . -138) (undo-tree-id8617 . -138) (undo-tree-id8618 . -138) (undo-tree-id8619 . -138) (undo-tree-id8620 . -138) (undo-tree-id8621 . -138) (undo-tree-id8622 . -138) (undo-tree-id8623 . -138) (undo-tree-id8624 . -138) (undo-tree-id8625 . -138) (undo-tree-id8626 . -138) (undo-tree-id8627 . -138) (undo-tree-id8628 . -138) (undo-tree-id8629 . -263) (undo-tree-id8630 . -138) (undo-tree-id8631 . -138) (undo-tree-id8632 . -138) (undo-tree-id8633 . -138) (undo-tree-id8634 . -138) (undo-tree-id8635 . -138) (undo-tree-id8636 . -138) (undo-tree-id8637 . -138) (undo-tree-id8638 . -138) (undo-tree-id8639 . -138) (undo-tree-id8640 . -138) (undo-tree-id8641 . -138) (undo-tree-id8642 . -138) (undo-tree-id8643 . -138) (undo-tree-id8644 . -138) (undo-tree-id8645 . -138) (undo-tree-id8646 . -138) (undo-tree-id8647 . -138) (undo-tree-id8648 . -138) (undo-tree-id8649 . -138) (undo-tree-id8650 . -138) (undo-tree-id8651 . -138) (undo-tree-id8652 . -138) (undo-tree-id8653 . -138) (undo-tree-id8654 . -138) (undo-tree-id8655 . -138) (undo-tree-id8656 . -138) (undo-tree-id8657 . -138) (undo-tree-id8658 . -138) (undo-tree-id8659 . -138) (undo-tree-id8660 . -138) (undo-tree-id8661 . -138) (undo-tree-id8662 . -138) (undo-tree-id8663 . -138) (undo-tree-id8664 . -138) (undo-tree-id8665 . -138) (undo-tree-id8666 . -138) (undo-tree-id8667 . -138) (undo-tree-id8668 . -138) (undo-tree-id8669 . -138) (undo-tree-id8670 . -138) (undo-tree-id8671 . -138) (undo-tree-id8672 . -138) (undo-tree-id8673 . -138) (undo-tree-id8674 . -138) (undo-tree-id8675 . -138) (undo-tree-id8676 . -138) (undo-tree-id8677 . -138) (undo-tree-id8678 . -138) (undo-tree-id8679 . -138) (undo-tree-id8680 . -138) (undo-tree-id8681 . -138) (undo-tree-id8682 . -138) (undo-tree-id8683 . -138) (undo-tree-id8684 . -138) (undo-tree-id8685 . -138) (undo-tree-id8686 . -138) (undo-tree-id8687 . -138) (undo-tree-id8688 . -79) (undo-tree-id8689 . -88) (undo-tree-id8690 . -138) (undo-tree-id8691 . -138) (undo-tree-id8692 . -138) (undo-tree-id8693 . -138) (undo-tree-id8694 . -138) (undo-tree-id8695 . -138) (undo-tree-id8696 . -138) (undo-tree-id8697 . -138) (undo-tree-id8698 . -138) (undo-tree-id8699 . -138) (undo-tree-id8700 . -138) (undo-tree-id8701 . -138) (undo-tree-id8702 . -138) (undo-tree-id8703 . -138) (undo-tree-id8704 . -138) (undo-tree-id8705 . -138) (undo-tree-id8706 . -138) (undo-tree-id8707 . -138) (undo-tree-id8708 . -138) (undo-tree-id8709 . -138) (undo-tree-id8710 . -138) (undo-tree-id8711 . -138) (undo-tree-id8712 . -138) (undo-tree-id8713 . -138) (undo-tree-id8714 . -138) (undo-tree-id8715 . -138) (undo-tree-id8716 . -138) (undo-tree-id8717 . -138) (undo-tree-id8718 . -138) (undo-tree-id8719 . -138) (undo-tree-id8720 . -138) (undo-tree-id8721 . -138) (undo-tree-id8722 . -138) (undo-tree-id8723 . -138) (undo-tree-id8724 . -138) (undo-tree-id8725 . -138) (undo-tree-id8726 . -138) (undo-tree-id8727 . -138) (undo-tree-id8728 . -138) (undo-tree-id8729 . -138) (undo-tree-id8730 . -138) (undo-tree-id8731 . -138) (undo-tree-id8732 . -138) (undo-tree-id8733 . -138) (undo-tree-id8734 . -138) (undo-tree-id8735 . -138) (undo-tree-id8736 . -138) (undo-tree-id8737 . -138) (undo-tree-id8738 . -138) (undo-tree-id8739 . -138) (undo-tree-id8740 . -138) (undo-tree-id8741 . -138) (undo-tree-id8742 . -138) (undo-tree-id8743 . -138) (undo-tree-id8744 . -138) (undo-tree-id8745 . -263) 1146 (t 25760 29891 508491 846000)) nil (25760 29922 838640 528000) 0 nil] [nil nil ((#("# **Note**: in this notebook, the blue dots represent targets, and red crosses represent predictions. In the book, I first used blue crosses for targets and red dots for predictions, then I reversed this later in the chapter. Sorry if this caused some confusion.
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 263 (face font-lock-comment-face fontified t)) . 1008) (undo-tree-id7362 . -262) (undo-tree-id7363 . -138) (undo-tree-id7364 . -2) (undo-tree-id7365 . -2) (undo-tree-id7366 . -2) (undo-tree-id7367 . -2) (undo-tree-id7368 . -2) (undo-tree-id7369 . -2) (undo-tree-id7370 . -2) (undo-tree-id7371 . -2) (undo-tree-id7372 . -2) (undo-tree-id7373 . -2) (undo-tree-id7374 . -2) (undo-tree-id7375 . -2) (undo-tree-id7376 . -2) (undo-tree-id7377 . -2) (undo-tree-id7378 . -2) (undo-tree-id7379 . -2) (undo-tree-id7380 . -2) (undo-tree-id7381 . -2) (undo-tree-id7382 . -2) (undo-tree-id7383 . -2) (undo-tree-id7384 . -2) (undo-tree-id7385 . -2) (undo-tree-id7386 . -2) (undo-tree-id7387 . -2) (undo-tree-id7388 . -2) (undo-tree-id7389 . -2) (undo-tree-id7390 . -2) (undo-tree-id7391 . -2) (undo-tree-id7392 . -2) (undo-tree-id7393 . -2) (undo-tree-id7394 . -2) (undo-tree-id7395 . -2) (undo-tree-id7396 . -2) (undo-tree-id7397 . -2) (undo-tree-id7398 . -2) (undo-tree-id7399 . -2) (undo-tree-id7400 . -2) (undo-tree-id7401 . -2) (undo-tree-id7402 . -2) (undo-tree-id7403 . -2) (undo-tree-id7404 . -2) (undo-tree-id7405 . -2) (undo-tree-id7406 . -2) (undo-tree-id7407 . -2) (undo-tree-id7408 . -2) (undo-tree-id7409 . -2) (undo-tree-id7410 . -2) (undo-tree-id7411 . -4) (undo-tree-id7412 . -4) (undo-tree-id7413 . -4) (undo-tree-id7414 . -4) (undo-tree-id7415 . -4) (undo-tree-id7416 . -4) (undo-tree-id7417 . -4) (undo-tree-id7418 . -4) (undo-tree-id7419 . -4) (undo-tree-id7420 . -4) (undo-tree-id7421 . -4) (undo-tree-id7422 . -4) (undo-tree-id7423 . -4) (undo-tree-id7424 . -4) (undo-tree-id7425 . -4) (undo-tree-id7426 . -4) (undo-tree-id7427 . -4) (undo-tree-id7428 . -4) (undo-tree-id7429 . -4) (undo-tree-id7430 . -4) (undo-tree-id7431 . -4) (undo-tree-id7432 . -4) (undo-tree-id7433 . -4) (undo-tree-id7434 . -4) (undo-tree-id7435 . -4) (undo-tree-id7436 . -4) (undo-tree-id7437 . -4) (undo-tree-id7438 . -4) (undo-tree-id7439 . -4) (undo-tree-id7440 . -4) (undo-tree-id7441 . -4) (undo-tree-id7442 . -4) (undo-tree-id7443 . -4) (undo-tree-id7444 . -4) (undo-tree-id7445 . -4) (undo-tree-id7446 . -4) (undo-tree-id7447 . -4) (undo-tree-id7448 . -4) (undo-tree-id7449 . -4) (undo-tree-id7450 . -4) (undo-tree-id7451 . -4) (undo-tree-id7452 . -4) (undo-tree-id7453 . -4) (undo-tree-id7454 . -4) (undo-tree-id7455 . -4) (undo-tree-id7456 . -4) (undo-tree-id7457 . -4) (undo-tree-id7458 . -4) (undo-tree-id7459 . -4) (undo-tree-id7460 . -4) (undo-tree-id7461 . -4) (undo-tree-id7462 . -4) (undo-tree-id7463 . -4) (undo-tree-id7464 . -4) (undo-tree-id7465 . -4) (undo-tree-id7466 . -4) (undo-tree-id7467 . -4) (undo-tree-id7468 . -4) (undo-tree-id7469 . -4) (undo-tree-id7470 . -4) (undo-tree-id7471 . -4) (undo-tree-id7472 . -4) (undo-tree-id7473 . -4) (undo-tree-id7474 . -4) (undo-tree-id7475 . -4) (undo-tree-id7476 . -4) (undo-tree-id7477 . -4) (undo-tree-id7478 . -4) (undo-tree-id7479 . -4) (undo-tree-id7480 . -4) (undo-tree-id7481 . -4) (undo-tree-id7482 . -4) (undo-tree-id7483 . -4) (undo-tree-id7484 . -4) (undo-tree-id7485 . -4) (undo-tree-id7486 . -4) (undo-tree-id7487 . -4) (undo-tree-id7488 . -4) (undo-tree-id7489 . -4) (undo-tree-id7490 . -4) (undo-tree-id7491 . -4) (undo-tree-id7492 . -4) (undo-tree-id7493 . -4) (undo-tree-id7494 . -4) (undo-tree-id7495 . -4) (undo-tree-id7496 . -4) (undo-tree-id7497 . -4) (undo-tree-id7498 . -4) (undo-tree-id7499 . -4) (undo-tree-id7500 . -4) (undo-tree-id7501 . -4) (undo-tree-id7502 . -4) (undo-tree-id7503 . -4) (undo-tree-id7504 . -4) (undo-tree-id7505 . -4) (undo-tree-id7506 . -4) (undo-tree-id7507 . -4) (undo-tree-id7508 . -4) (undo-tree-id7509 . -4) (undo-tree-id7510 . -4) (undo-tree-id7511 . -71) (undo-tree-id7512 . -71) (undo-tree-id7513 . -71) (undo-tree-id7514 . -71) (undo-tree-id7515 . -71) (undo-tree-id7516 . -71) (undo-tree-id7517 . -71) (undo-tree-id7518 . -71) (undo-tree-id7519 . -71) (undo-tree-id7520 . -71) (undo-tree-id7521 . -71) (undo-tree-id7522 . -71) (undo-tree-id7523 . -71) (undo-tree-id7524 . -71) (undo-tree-id7525 . -71) (undo-tree-id7526 . -71) (undo-tree-id7527 . -71) (undo-tree-id7528 . -71) (undo-tree-id7529 . -71) (undo-tree-id7530 . -71) (undo-tree-id7531 . -71) (undo-tree-id7532 . -71) (undo-tree-id7533 . -71) (undo-tree-id7534 . -71) (undo-tree-id7535 . -71) (undo-tree-id7536 . -71) (undo-tree-id7537 . -71) (undo-tree-id7538 . -71) (undo-tree-id7539 . -71) (undo-tree-id7540 . -138) (undo-tree-id7541 . -138) (undo-tree-id7542 . -138) (undo-tree-id7543 . -138) (undo-tree-id7544 . -138) (undo-tree-id7545 . -138) (undo-tree-id7546 . -138) (undo-tree-id7547 . -138) (undo-tree-id7548 . -138) (undo-tree-id7549 . -138) (undo-tree-id7550 . -138) (undo-tree-id7551 . -138) (undo-tree-id7552 . -138) (undo-tree-id7553 . -138) (undo-tree-id7554 . -138) (undo-tree-id7555 . -138) (undo-tree-id7556 . -138) (undo-tree-id7557 . -138) (undo-tree-id7558 . -138) (undo-tree-id7559 . -138) (undo-tree-id7560 . -138) (undo-tree-id7561 . -138) (undo-tree-id7562 . -138) (undo-tree-id7563 . -138) (undo-tree-id7564 . -138) (undo-tree-id7565 . -138) (undo-tree-id7566 . -138) (undo-tree-id7567 . -138) (undo-tree-id7568 . -138) (undo-tree-id7569 . -138) (undo-tree-id7570 . -138) (undo-tree-id7571 . -138) (undo-tree-id7572 . -138) (undo-tree-id7573 . -138) (undo-tree-id7574 . -138) (undo-tree-id7575 . -138) (undo-tree-id7576 . -138) (undo-tree-id7577 . -138) (undo-tree-id7578 . -138) (undo-tree-id7579 . -138) (undo-tree-id7580 . -138) (undo-tree-id7581 . -138) (undo-tree-id7582 . -138) (undo-tree-id7583 . -138) (undo-tree-id7584 . -138) (undo-tree-id7585 . -138) (undo-tree-id7586 . -138) (undo-tree-id7587 . -138) (undo-tree-id7588 . -138) (undo-tree-id7589 . -138) (undo-tree-id7590 . -138) (undo-tree-id7591 . -138) (undo-tree-id7592 . -138) (undo-tree-id7593 . -138) (undo-tree-id7594 . -138) (undo-tree-id7595 . -138) (undo-tree-id7596 . -138) (undo-tree-id7597 . -138) (undo-tree-id7598 . -138) (undo-tree-id7599 . -138) (undo-tree-id7600 . -138) (undo-tree-id7601 . -138) (undo-tree-id7602 . -138) (undo-tree-id7603 . -138) (undo-tree-id7604 . -138) (undo-tree-id7605 . -138) (undo-tree-id7606 . -138) (undo-tree-id7607 . -138) (undo-tree-id7608 . -138) (undo-tree-id7609 . -138) (undo-tree-id7610 . -138) (undo-tree-id7611 . -138) (undo-tree-id7612 . -263) 1146 (t 25760 29891 508491 846000)) ((1008 . 1271)) (25760 29907 546939 480000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1008) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1)) nil (25760 29922 837032 88000) 0 nil])
nil
([nil nil ((#("# In[6]:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 9 (face font-lock-comment-face fontified t)) . 1100) (undo-tree-id8814 . -8) (undo-tree-id8815 . -9) (t 25760 29922 862009 277000)) nil (25760 29928 969252 467000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1100) (undo-tree-id8813 . -1)) nil (25760 29928 969249 735000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1099) (undo-tree-id8747 . -1) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1) (undo-tree-id8756 . -1) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) 1100) nil (25760 29928 969245 180000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1099) (undo-tree-id8746 . -1)) nil (25760 29928 969185 977000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1182) (undo-tree-id8823 . -1) (t 25760 29928 982301 534000)) nil (25760 29933 210172 164000) 0 nil])
([nil nil ((#("# In[7]:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t)) . 1182) (undo-tree-id8820 . -8) (undo-tree-id8821 . -8) (undo-tree-id8822 . -9)) nil (25760 29933 210167 834000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1182) (undo-tree-id8819 . -1)) nil (25760 29933 210160 868000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1182) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1)) nil (25760 29933 212607 164000) 0 nil])
([nil nil ((#("save_fig(\"forecast_ahead_plot\")
" 0 2 (fontified t) 2 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 30 (face font-lock-string-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t)) . 5189) (undo-tree-id8830 . -31) (undo-tree-id8831 . -8) (undo-tree-id8832 . -2) (undo-tree-id8833 . -2) (undo-tree-id8834 . -2) (undo-tree-id8835 . -2) (undo-tree-id8836 . -2) (undo-tree-id8837 . -2) (undo-tree-id8838 . -2) (undo-tree-id8839 . -2) (undo-tree-id8840 . -2) (undo-tree-id8841 . -2) (undo-tree-id8842 . -2) (undo-tree-id8843 . -2) (undo-tree-id8844 . -2) (undo-tree-id8845 . -2) (undo-tree-id8846 . -2) (undo-tree-id8847 . -2) (undo-tree-id8848 . -2) (undo-tree-id8849 . -2) (undo-tree-id8850 . -2) (undo-tree-id8851 . -2) (undo-tree-id8852 . -2) (undo-tree-id8853 . -2) (undo-tree-id8854 . -2) (undo-tree-id8855 . -2) (undo-tree-id8856 . -2) (undo-tree-id8857 . -2) (undo-tree-id8858 . -2) (undo-tree-id8859 . -2) (undo-tree-id8860 . -2) (undo-tree-id8861 . -2) (undo-tree-id8862 . -2) (undo-tree-id8863 . -2) (undo-tree-id8864 . -2) (undo-tree-id8865 . -2) (undo-tree-id8866 . -2) (undo-tree-id8867 . -2) (undo-tree-id8868 . -2) (undo-tree-id8869 . -3) (undo-tree-id8870 . -3) (undo-tree-id8871 . -3) (undo-tree-id8872 . -3) (undo-tree-id8873 . -3) (undo-tree-id8874 . -3) (undo-tree-id8875 . -3) (undo-tree-id8876 . -3) (undo-tree-id8877 . -3) (undo-tree-id8878 . -3) (undo-tree-id8879 . -3) (undo-tree-id8880 . -3) (undo-tree-id8881 . -3) (undo-tree-id8882 . -3) (undo-tree-id8883 . -3) (undo-tree-id8884 . -3) (undo-tree-id8885 . -3) (undo-tree-id8886 . -3) (undo-tree-id8887 . -3) (undo-tree-id8888 . -3) (undo-tree-id8889 . -3) (undo-tree-id8890 . -3) (undo-tree-id8891 . -3) (undo-tree-id8892 . -3) (undo-tree-id8893 . -3) (undo-tree-id8894 . -3) (undo-tree-id8895 . -4) (undo-tree-id8896 . -4) (undo-tree-id8897 . -4) (undo-tree-id8898 . -4) (undo-tree-id8899 . -4) (undo-tree-id8900 . -4) (undo-tree-id8901 . -4) (undo-tree-id8902 . -4) (undo-tree-id8903 . -4) (undo-tree-id8904 . -4) (undo-tree-id8905 . -4) (undo-tree-id8906 . -4) (undo-tree-id8907 . -4) (undo-tree-id8908 . -4) (undo-tree-id8909 . -4) (undo-tree-id8910 . -4) (undo-tree-id8911 . -4) (undo-tree-id8912 . -4) (undo-tree-id8913 . -4) (undo-tree-id8914 . -4) (undo-tree-id8915 . -4) (undo-tree-id8916 . -4) (undo-tree-id8917 . -4) (undo-tree-id8918 . -4) (undo-tree-id8919 . -4) (undo-tree-id8920 . -8) (undo-tree-id8921 . -4) (undo-tree-id8922 . -4) (undo-tree-id8923 . -4) (undo-tree-id8924 . -4) (undo-tree-id8925 . -4) (undo-tree-id8926 . -4) (undo-tree-id8927 . -4) (undo-tree-id8928 . -4) (undo-tree-id8929 . -4) (undo-tree-id8930 . -4) (undo-tree-id8931 . -4) (undo-tree-id8932 . -4) (undo-tree-id8933 . -4) (undo-tree-id8934 . -4) (undo-tree-id8935 . -4) (undo-tree-id8936 . -4) (undo-tree-id8937 . -4) (undo-tree-id8938 . -4) (undo-tree-id8939 . -4) (undo-tree-id8940 . -4) (undo-tree-id8941 . -4) (undo-tree-id8942 . -4) (undo-tree-id8943 . -4) (undo-tree-id8944 . -4) (undo-tree-id8945 . -4) (undo-tree-id8946 . -4) (undo-tree-id8947 . -4) (undo-tree-id8948 . -4) (undo-tree-id8949 . -4) (undo-tree-id8950 . -4) (undo-tree-id8951 . -4) (undo-tree-id8952 . -4) (undo-tree-id8953 . -4) (undo-tree-id8954 . -4) (undo-tree-id8955 . -8) (undo-tree-id8956 . -4) (undo-tree-id8957 . -4) (undo-tree-id8958 . -4) (undo-tree-id8959 . -4) (undo-tree-id8960 . -4) (undo-tree-id8961 . -4) (undo-tree-id8962 . -4) (undo-tree-id8963 . -4) (undo-tree-id8964 . -4) (undo-tree-id8965 . -4) (undo-tree-id8966 . -4) (undo-tree-id8967 . -4) (undo-tree-id8968 . -4) (undo-tree-id8969 . -4) (undo-tree-id8970 . -4) (undo-tree-id8971 . -4) (undo-tree-id8972 . -4) (undo-tree-id8973 . -4) (undo-tree-id8974 . -5) (undo-tree-id8975 . -5) (undo-tree-id8976 . -5) (undo-tree-id8977 . -5) (undo-tree-id8978 . -5) (undo-tree-id8979 . -5) (undo-tree-id8980 . -5) (undo-tree-id8981 . -5) (undo-tree-id8982 . -5) (undo-tree-id8983 . -5) (undo-tree-id8984 . -5) (undo-tree-id8985 . -5) (undo-tree-id8986 . -5) (undo-tree-id8987 . -5) (undo-tree-id8988 . -5) (undo-tree-id8989 . -5) (undo-tree-id8990 . -5) (undo-tree-id8991 . -5) (undo-tree-id8992 . -5) (undo-tree-id8993 . -5) (undo-tree-id8994 . -5) (undo-tree-id8995 . -5) (undo-tree-id8996 . -5) (undo-tree-id8997 . -5) (undo-tree-id8998 . -5) (undo-tree-id8999 . -5) (undo-tree-id9000 . -5) (undo-tree-id9001 . -5) (undo-tree-id9002 . -5) (undo-tree-id9003 . -5) (undo-tree-id9004 . -5) (undo-tree-id9005 . -5) (undo-tree-id9006 . -5) (undo-tree-id9007 . -5) (undo-tree-id9008 . -5) (undo-tree-id9009 . -5) (undo-tree-id9010 . -5) (undo-tree-id9011 . -5) (undo-tree-id9012 . -5) (undo-tree-id9013 . -5) (undo-tree-id9014 . -5) (undo-tree-id9015 . -5) (undo-tree-id9016 . -5) (undo-tree-id9017 . -5) (undo-tree-id9018 . -5) (undo-tree-id9019 . -5) (undo-tree-id9020 . -5) (undo-tree-id9021 . -5) (undo-tree-id9022 . -5) (undo-tree-id9023 . -5) (undo-tree-id9024 . -5) (undo-tree-id9025 . -5) (undo-tree-id9026 . -6) (undo-tree-id9027 . -6) (undo-tree-id9028 . -6) (undo-tree-id9029 . -6) (undo-tree-id9030 . -6) (undo-tree-id9031 . -6) (undo-tree-id9032 . -6) (undo-tree-id9033 . -6) (undo-tree-id9034 . -6) (undo-tree-id9035 . -6) (undo-tree-id9036 . -6) (undo-tree-id9037 . -6) (undo-tree-id9038 . -6) (undo-tree-id9039 . -6) (undo-tree-id9040 . -6) (undo-tree-id9041 . -6) (undo-tree-id9042 . -6) (undo-tree-id9043 . -6) (undo-tree-id9044 . -6) (undo-tree-id9045 . -6) (undo-tree-id9046 . -6) (undo-tree-id9047 . -6) (undo-tree-id9048 . -6) (undo-tree-id9049 . -6) (undo-tree-id9050 . -6) (undo-tree-id9051 . -6) (undo-tree-id9052 . -7) (undo-tree-id9053 . -7) (undo-tree-id9054 . -7) (undo-tree-id9055 . -7) (undo-tree-id9056 . -7) (undo-tree-id9057 . -7) (undo-tree-id9058 . -7) (undo-tree-id9059 . -7) (undo-tree-id9060 . -7) (undo-tree-id9061 . -7) (undo-tree-id9062 . -7) (undo-tree-id9063 . -7) (undo-tree-id9064 . -7) (undo-tree-id9065 . -7) (undo-tree-id9066 . -7) (undo-tree-id9067 . -7) (undo-tree-id9068 . -7) (undo-tree-id9069 . -7) (undo-tree-id9070 . -7) (undo-tree-id9071 . -7) (undo-tree-id9072 . -7) (undo-tree-id9073 . -7) (undo-tree-id9074 . -7) (undo-tree-id9075 . -7) (undo-tree-id9076 . -7) (undo-tree-id9077 . -7) (undo-tree-id9078 . -7) (undo-tree-id9079 . -7) (undo-tree-id9080 . -7) (undo-tree-id9081 . -7) (undo-tree-id9082 . -7) (undo-tree-id9083 . -7) (undo-tree-id9084 . -7) (undo-tree-id9085 . -32)) nil (25760 29944 659128 665000) 0 nil] [nil nil ((1182 . 1183) (#("p" 0 1 (fontified t)) . 1182) (undo-tree-id8816 . -1)) ((1182 . 1183) (#("w" 0 1 (fontified t)) . 1182)) (25760 29933 210147 19000) 0 nil])
([nil nil ((#("save_fig(\"time_series_plot\")
" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 27 (face font-lock-string-face fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (fontified t)) . 966) (undo-tree-id8824 . -28) (undo-tree-id8825 . -8) (undo-tree-id8826 . -8) (undo-tree-id8827 . -8) (undo-tree-id8828 . -8) (undo-tree-id8829 . -29)) nil (25760 29944 658424 787000) 0 nil])
nil
([nil nil ((#("p" 0 1 (fontified t)) . -665) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 666 (665 . 666) (t 25760 29944 679045 385000)) nil (25761 56364 933744 195000) 0 nil])
([nil nil ((nil rear-nonsticky nil 693 . 694) (#("
" 0 1 (fontified nil)) . -722) (693 . 723) 665) nil (25761 56364 933737 969000) 0 nil])
([nil nil ((#("y_train.shape" 0 13 (fontified t)) . 680) (undo-tree-id105 . -12) (undo-tree-id106 . -12) (undo-tree-id107 . -12) (undo-tree-id108 . -12) (undo-tree-id109 . -12) 692) nil (25761 56364 933733 588000) 0 nil])
([nil nil ((nil rear-nonsticky nil 722 . 723) (nil fontified nil 710 . 723) (710 . 723)) nil (25761 56364 933726 242000) 0 nil])
([nil nil ((679 . 680) (#(" " 0 1 (fontified nil)) . 679) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("
" 0 1 (fontified t rear-nonsticky t)) . -680) (undo-tree-id104 . 1) 677) nil (25761 56364 933723 288000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -694) (693 . 694) (#("," 0 1 (fontified t)) . 693)) nil (25761 56364 933714 642000) 0 nil])
([nil nil ((707 . 708) (#("
" 0 1 (fontified t)) . -707) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 694) nil (25761 56364 933711 300000) 0 nil])
([nil nil ((707 . 708)) nil (25761 56364 933699 822000) 0 nil])
([nil nil ((666 . 670) (#("s" 0 1 (fontified t)) . -666) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 667 (666 . 667) (665 . 666)) nil (25761 56364 933681 868000) 0 nil])
([nil nil ((672 . 673) (670 . 672)) nil (25761 56364 932321 863000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face font-lock-string-face)) . 672) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1)) nil (25761 56364 932313 225000) 0 nil])
([nil nil ((685 . 687)) nil (25761 56364 932119 776000) 0 nil])
([nil nil ((702 . 703) (t 25761 56364 964552 118000)) nil (25761 56386 599861 141000) 0 nil])
([nil nil ((706 . 711) (704 . 706)) nil (25761 56386 599857 155000) 0 nil])
([nil nil ((724 . 726)) nil (25761 56386 599852 846000) 0 nil])
([nil nil ((741 . 742)) nil (25761 56386 599843 43000) 0 nil])
([nil nil ((703 . 704) (t 25761 56386 637185 951000) 670) nil (25761 56412 644302 284000) 0 nil])
([nil nil ((#("import matplotlib as mpl
import matplotlib.pyplot as plt
" 0 6 (fontified t face font-lock-keyword-face) 6 18 (fontified t) 18 20 (fontified t face font-lock-keyword-face) 20 25 (fontified t) 25 31 (fontified t face font-lock-keyword-face) 31 50 (fontified t) 50 52 (fontified t face font-lock-keyword-face) 52 57 (fontified t)) . 260) (undo-tree-id112 . -56) (undo-tree-id113 . -25) (undo-tree-id114 . -25) (undo-tree-id115 . -6) (undo-tree-id116 . -25) (undo-tree-id117 . -31) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -25) (undo-tree-id121 . -31) (undo-tree-id122 . -25) (undo-tree-id123 . -31) (undo-tree-id124 . -25) (undo-tree-id125 . -25) (undo-tree-id126 . -25) (undo-tree-id127 . -25) (undo-tree-id128 . -25) (undo-tree-id129 . -25) (undo-tree-id130 . -25) (undo-tree-id131 . -25) (undo-tree-id132 . -25) (undo-tree-id133 . -25) (undo-tree-id134 . -25) (undo-tree-id135 . -25) (undo-tree-id136 . -25) (undo-tree-id137 . -25) (undo-tree-id138 . -25) (undo-tree-id139 . -25) (undo-tree-id140 . -25) (undo-tree-id141 . -25) (undo-tree-id142 . -25) (undo-tree-id143 . -25) (undo-tree-id144 . -25) (undo-tree-id145 . -25) (undo-tree-id146 . -25) (undo-tree-id147 . -25) (undo-tree-id148 . -25) (undo-tree-id149 . -25) (undo-tree-id150 . -25) (undo-tree-id151 . -25) (undo-tree-id152 . -25) (undo-tree-id153 . -25) (undo-tree-id154 . -25) (undo-tree-id155 . -25) (undo-tree-id156 . -25) (undo-tree-id157 . -25) (undo-tree-id158 . -25) (undo-tree-id159 . -25) (undo-tree-id160 . -25) (undo-tree-id161 . -25) (undo-tree-id162 . -25) (undo-tree-id163 . -25) (undo-tree-id164 . -25) (undo-tree-id165 . -25) (undo-tree-id166 . -25) (undo-tree-id167 . -25) (undo-tree-id168 . -57) (undo-tree-id169 . -25) (undo-tree-id170 . -25) (undo-tree-id171 . -25) (undo-tree-id172 . -25) (undo-tree-id173 . -25) (undo-tree-id174 . -25) (undo-tree-id175 . -25) (undo-tree-id176 . -25) (undo-tree-id177 . -25) (undo-tree-id178 . -25) (undo-tree-id179 . -25) (undo-tree-id180 . -25) (undo-tree-id181 . -25) (undo-tree-id182 . -57) 285 (t 25761 56412 693938 656000)) nil (25761 57312 577827 103000) 0 nil])
([nil nil ((nil rear-nonsticky nil 163 . 164) (#("
" 0 1 (fontified nil)) . -220) (163 . 221) 139) nil (25761 57312 577766 272000) 0 nil])
([nil nil ((#("# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 52 (fontified t face font-lock-comment-face) 52 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-1-face)) 67 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-1-face)) 90 92 (fontified t) 92 93 (fontified t face (rainbow-delimiters-depth-1-face)) 93 94 (fontified t)) . 222) (undo-tree-id301 . -93) (undo-tree-id302 . -71) (undo-tree-id303 . -71) (undo-tree-id304 . -71) (undo-tree-id305 . -52) (undo-tree-id306 . -52) (undo-tree-id307 . -52) (undo-tree-id308 . -52) (undo-tree-id309 . -52) (undo-tree-id310 . -52) (undo-tree-id311 . -52) (undo-tree-id312 . -52) (undo-tree-id313 . -52) (undo-tree-id314 . -52) (undo-tree-id315 . -52) (undo-tree-id316 . -52) (undo-tree-id317 . -52) (undo-tree-id318 . -52) (undo-tree-id319 . -52) (undo-tree-id320 . -52) (undo-tree-id321 . -52) (undo-tree-id322 . -52) (undo-tree-id323 . -52) (undo-tree-id324 . -52) (undo-tree-id325 . -52) (undo-tree-id326 . -52) (undo-tree-id327 . -52) (undo-tree-id328 . -52) (undo-tree-id329 . -52) (undo-tree-id330 . -52) (undo-tree-id331 . -52) (undo-tree-id332 . -52) (undo-tree-id333 . -52) (undo-tree-id334 . -52) (undo-tree-id335 . -52) (undo-tree-id336 . -52) (undo-tree-id337 . -52) (undo-tree-id338 . -52) (undo-tree-id339 . -52) (undo-tree-id340 . -52) (undo-tree-id341 . -52) (undo-tree-id342 . -52) (undo-tree-id343 . -52) (undo-tree-id344 . -52) (undo-tree-id345 . -52) (undo-tree-id346 . -52) (undo-tree-id347 . -52) (undo-tree-id348 . -52) (undo-tree-id349 . -52) (undo-tree-id350 . -52) (undo-tree-id351 . -52) (undo-tree-id352 . -52) (undo-tree-id353 . -52) (undo-tree-id354 . -52) (undo-tree-id355 . -52) (undo-tree-id356 . -52) (undo-tree-id357 . -52) (undo-tree-id358 . -94) (undo-tree-id359 . -71) (undo-tree-id360 . -52) (undo-tree-id361 . -52) (undo-tree-id362 . -52) (undo-tree-id363 . -52) (undo-tree-id364 . -52) (undo-tree-id365 . -52) (undo-tree-id366 . -52) (undo-tree-id367 . -52) (undo-tree-id368 . -52) (undo-tree-id369 . -52) (undo-tree-id370 . -71) (undo-tree-id371 . -71) (undo-tree-id372 . -71) (undo-tree-id373 . -71) (undo-tree-id374 . -71) (undo-tree-id375 . -71) (undo-tree-id376 . -71) (undo-tree-id377 . -71) (undo-tree-id378 . -71) (undo-tree-id379 . -71) (undo-tree-id380 . -71) (undo-tree-id381 . -71) (undo-tree-id382 . -94) 293 (t 25761 57312 592273 130000)) nil (25761 57321 147304 864000) 0 nil])
([nil nil ((nil rear-nonsticky nil 312 . 313) (#("
" 0 1 (fontified nil)) . -406) (312 . 407) 283) nil (25761 57321 147244 402000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 222) (undo-tree-id205 . 1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1)) nil (25761 57321 147237 326000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 222) (undo-tree-id183 . 1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1)) nil (25761 57321 146685 893000) 0 nil])
([nil nil ((#("# In[9]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 9 (fontified t face font-lock-comment-face)) . 1587) (undo-tree-id441 . -8) (t 25761 57321 212468 141000)) nil (25761 57410 386736 557000) 0 nil])
([nil nil ((#("# In[10]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 1624) (undo-tree-id440 . -9)) nil (25761 57410 386734 821000) 0 nil])
([nil nil ((#("# In[11]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 10 (face font-lock-comment-face fontified t)) . 2122) (undo-tree-id439 . -9)) nil (25761 57410 386733 536000) 0 nil])
([nil nil ((#("# In[12]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 2253) (undo-tree-id438 . -9)) nil (25761 57410 386732 310000) 0 nil])
([nil nil ((#("# In[13]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 2572) (undo-tree-id437 . -9)) nil (25761 57410 386731 7000) 0 nil])
([nil nil ((#("# In[14]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 2609) (undo-tree-id436 . -9)) nil (25761 57410 386729 708000) 0 nil])
([nil nil ((#("# In[15]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 2699) (undo-tree-id435 . -9)) nil (25761 57410 386728 241000) 0 nil])
([nil nil ((#("# In[16]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 2821) (undo-tree-id434 . -9)) nil (25761 57410 386694 45000) 0 nil])
([nil nil ((#("# In[17]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 3221) (undo-tree-id433 . -9)) nil (25761 57410 386692 186000) 0 nil])
([nil nil ((#("# In[18]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 3258) (undo-tree-id432 . -9)) nil (25761 57410 386690 723000) 0 nil])
([nil nil ((#("# In[19]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 3348) (undo-tree-id431 . -9)) nil (25761 57410 386689 94000) 0 nil])
([nil nil ((#("# In[20]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 3520) (undo-tree-id430 . -9)) nil (25761 57410 386687 780000) 0 nil])
([nil nil ((#("# In[21]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 3893) (undo-tree-id429 . -9)) nil (25761 57410 386686 473000) 0 nil])
([nil nil ((#("# In[22]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 3930) (undo-tree-id428 . -9)) nil (25761 57410 386684 840000) 0 nil])
([nil nil ((#("# In[23]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 4020) (undo-tree-id427 . -9)) nil (25761 57410 386683 561000) 0 nil])
([nil nil ((#("# In[24]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 4164) (undo-tree-id426 . -9)) nil (25761 57410 386682 303000) 0 nil])
([nil nil ((#("# In[25]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 4533) (undo-tree-id425 . -9)) nil (25761 57410 386680 783000) 0 nil])
([nil nil ((#("# In[26]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 4550) (undo-tree-id424 . -9)) nil (25761 57410 386679 293000) 0 nil])
([nil nil ((#("# In[27]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 5166) (undo-tree-id423 . -9)) nil (25761 57410 386677 861000) 0 nil])
([nil nil ((#("# In[28]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 5513) (undo-tree-id422 . -9)) nil (25761 57410 386676 180000) 0 nil])
([nil nil ((#("# In[29]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 5686) (undo-tree-id421 . -9)) nil (25761 57410 386674 241000) 0 nil])
([nil nil ((#("# In[30]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 5703) (undo-tree-id420 . -9)) nil (25761 57410 386672 884000) 0 nil])
([nil nil ((#("# In[31]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 5866) (undo-tree-id419 . -9)) nil (25761 57410 386671 583000) 0 nil])
([nil nil ((#("# In[32]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 6041) (undo-tree-id418 . -9)) nil (25761 57410 386670 265000) 0 nil])
([nil nil ((#("# In[33]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 6394) (undo-tree-id417 . -9)) nil (25761 57410 386668 914000) 0 nil])
([nil nil ((#("# In[34]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 6768) (undo-tree-id416 . -9)) nil (25761 57410 386667 456000) 0 nil])
([nil nil ((#("# In[35]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 6934) (undo-tree-id415 . -9)) nil (25761 57410 386666 59000) 0 nil])
([nil nil ((#("# In[36]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 7444) (undo-tree-id414 . -9)) nil (25761 57410 386664 689000) 0 nil])
([nil nil ((#("# In[37]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 7847) (undo-tree-id413 . -9)) nil (25761 57410 386663 302000) 0 nil])
([nil nil ((#("# In[38]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 7880) (undo-tree-id412 . -9)) nil (25761 57410 386661 679000) 0 nil])
([nil nil ((#("# In[39]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 8504) (undo-tree-id411 . -9)) nil (25761 57410 386659 848000) 0 nil])
([nil nil ((#("# In[40]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 8676) (undo-tree-id410 . -9)) nil (25761 57410 386658 419000) 0 nil])
([nil nil ((#("# In[41]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 8767) (undo-tree-id409 . -9)) nil (25761 57410 386657 8000) 0 nil])
([nil nil ((#("# In[42]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 9341) (undo-tree-id408 . -9)) nil (25761 57410 386654 994000) 0 nil])
([nil nil ((#("# In[43]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 9400) (undo-tree-id407 . -9)) nil (25761 57410 386543 924000) 0 nil])
([nil nil ((#("# In[44]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 10264) (undo-tree-id406 . -9)) nil (25761 57410 386542 650000) 0 nil])
([nil nil ((#("# In[45]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 10798) (undo-tree-id405 . -9)) nil (25761 57410 386541 359000) 0 nil])
([nil nil ((#("# In[46]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 12055) (undo-tree-id404 . -9)) nil (25761 57410 386539 674000) 0 nil])
([nil nil ((#("# In[47]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 12523) (undo-tree-id403 . -9)) nil (25761 57410 386538 117000) 0 nil])
([nil nil ((#("# In[48]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 12970) (undo-tree-id402 . -9)) nil (25761 57410 386536 778000) 0 nil])
([nil nil ((#("# In[49]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 6 (fontified t face font-lock-comment-face) 6 10 (fontified t face font-lock-comment-face)) . 13007) (undo-tree-id401 . -9)) nil (25761 57410 386535 469000) 0 nil])
([nil nil ((#("# In[50]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 13097) (undo-tree-id400 . -9)) nil (25761 57410 386534 101000) 0 nil])
([nil nil ((#("# In[51]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 13269) (undo-tree-id399 . -9)) nil (25761 57410 386532 323000) 0 nil])
([nil nil ((#("# In[52]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 13340) (undo-tree-id398 . -9)) nil (25761 57410 386531 35000) 0 nil])
([nil nil ((#("# In[53]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 13785) (undo-tree-id397 . -9)) nil (25761 57410 386529 743000) 0 nil])
([nil nil ((#("# In[54]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 13822) (undo-tree-id396 . -9)) nil (25761 57410 386528 400000) 0 nil])
([nil nil ((#("# In[55]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 13912) (undo-tree-id395 . -9)) nil (25761 57410 386526 938000) 0 nil])
([nil nil ((#("# In[56]:
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 14084) (undo-tree-id394 . -9)) nil (25761 57410 386525 158000) 0 nil])
([nil nil ((#("# In[57]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 14860) (undo-tree-id393 . -9)) nil (25761 57410 386523 655000) 0 nil])
([nil nil ((#("# In[58]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 15929) (undo-tree-id392 . -9)) nil (25761 57410 386522 73000) 0 nil])
([nil nil ((#("# In[59]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 16739) (undo-tree-id391 . -9)) nil (25761 57410 386520 528000) 0 nil])
([nil nil ((#("# In[60]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 17193) (undo-tree-id390 . -9)) nil (25761 57410 386518 727000) 0 nil])
([nil nil ((#("# In[61]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 17522) (undo-tree-id389 . -9)) nil (25761 57410 386516 939000) 0 nil])
([nil nil ((#("# In[62]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 18333) (undo-tree-id388 . -9)) nil (25761 57410 387349 424000) 0 nil])
([nil nil ((#("# In[63]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 19508) (undo-tree-id3079 . -9)) nil (25761 57463 428470 309000) 0 nil] [nil nil ((#("# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 18 (fontified t face font-lock-comment-face) 18 479 (face font-lock-comment-face fontified t)) . 18495) (undo-tree-id383 . -478) (undo-tree-id384 . -79) (undo-tree-id385 . -80) (undo-tree-id386 . -1) (undo-tree-id387 . -479)) ((18495 . 18974)) (25761 57410 386509 710000) 0 nil])
([nil nil ((#("# In[64]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 19740) (undo-tree-id3078 . -9)) nil (25761 57463 428468 162000) 0 nil])
nil
([nil nil ((#("# In[65]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 19953) (undo-tree-id3077 . -9)) nil (25761 57463 428465 436000) 0 nil])
([nil nil ((#("# In[66]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 8 (fontified t face font-lock-comment-face) 8 9 (fontified t face font-lock-comment-face) 9 10 (fontified t face font-lock-comment-face)) . 19969) (undo-tree-id3076 . -9)) nil (25761 57463 428463 486000) 0 nil])
([nil nil ((#("# In[67]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 19984) (undo-tree-id3075 . -9)) nil (25761 57463 428461 800000) 0 nil])
([nil nil ((#("# In[68]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 20240) (undo-tree-id3074 . -9)) nil (25761 57463 428460 97000) 0 nil])
([nil nil ((#("# In[69]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 20344) (undo-tree-id3073 . -9)) nil (25761 57463 428458 472000) 0 nil])
([nil nil ((#("# In[70]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 20368) (undo-tree-id3072 . -9)) nil (25761 57463 428456 795000) 0 nil])
([nil nil ((#("# In[71]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 20932) (undo-tree-id3071 . -9)) nil (25761 57463 428455 149000) 0 nil])
([nil nil ((#("# In[72]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 21443) (undo-tree-id3070 . -9)) nil (25761 57463 428452 934000) 0 nil])
([nil nil ((#("# In[73]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 21608) (undo-tree-id3069 . -9)) nil (25761 57463 428451 80000) 0 nil])
([nil nil ((#("# In[74]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 21760) (undo-tree-id3068 . -9)) nil (25761 57463 428449 180000) 0 nil])
([nil nil ((#("# In[75]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 22865) (undo-tree-id3067 . -9)) nil (25761 57463 428447 184000) 0 nil])
([nil nil ((#("# In[76]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 23071) (undo-tree-id3066 . -9)) nil (25761 57463 428444 899000) 0 nil])
([nil nil ((#("# In[77]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 23359) (undo-tree-id3065 . -9)) nil (25761 57463 428443 137000) 0 nil])
([nil nil ((#("# In[78]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 24229) (undo-tree-id3064 . -9)) nil (25761 57463 428441 54000) 0 nil])
([nil nil ((#("# In[79]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 24331) (undo-tree-id3063 . -9)) nil (25761 57463 428438 812000) 0 nil])
([nil nil ((#("# In[80]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 24410) (undo-tree-id3062 . -9)) nil (25761 57463 428436 931000) 0 nil])
([nil nil ((#("# In[81]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 24913) (undo-tree-id3061 . -9)) nil (25761 57463 428435 56000) 0 nil])
([nil nil ((#("# In[82]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 25957) (undo-tree-id3060 . -9)) nil (25761 57463 428433 55000) 0 nil])
([nil nil ((#("# In[83]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 26228) (undo-tree-id3059 . -9)) nil (25761 57463 428430 912000) 0 nil])
([nil nil ((#("# In[84]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 26472) (undo-tree-id3058 . -9)) nil (25761 57463 428428 930000) 0 nil])
([nil nil ((#("# In[85]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 26737) (undo-tree-id3057 . -9)) nil (25761 57463 428426 955000) 0 nil])
([nil nil ((#("# In[86]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 26851) (undo-tree-id3056 . -9)) nil (25761 57463 428423 572000) 0 nil])
([nil nil ((#("# In[87]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 27401) (undo-tree-id3055 . -9)) nil (25761 57463 428421 681000) 0 nil])
([nil nil ((#("# In[88]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 29319) (undo-tree-id3054 . -9)) nil (25761 57463 428420 150000) 0 nil])
([nil nil ((#("# In[89]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 4 (fontified t face font-lock-comment-face) 4 10 (face font-lock-comment-face fontified t)) . 30748) (undo-tree-id3053 . -9)) nil (25761 57463 428418 529000) 0 nil])
([nil nil ((#("# In[90]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 31991) (undo-tree-id3052 . -9)) nil (25761 57463 428416 849000) 0 nil])
([nil nil ((#("# In[91]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 33479) (undo-tree-id3051 . -9)) nil (25761 57463 428414 740000) 0 nil])
([nil nil ((#("# In[92]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 10 (fontified t face font-lock-comment-face)) . 34485) (undo-tree-id3050 . -9)) nil (25761 57463 428413 161000) 0 nil])
([nil nil ((#("# In[93]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 35148) (undo-tree-id3049 . -9)) nil (25761 57463 428411 450000) 0 nil])
([nil nil ((#("# In[94]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 35958) (undo-tree-id3048 . -9)) nil (25761 57463 428409 714000) 0 nil])
([nil nil ((#("# In[95]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 36675) (undo-tree-id3047 . -9)) nil (25761 57463 428407 824000) 0 nil])
([nil nil ((#("# In[96]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 36948) (undo-tree-id3046 . -9)) nil (25761 57463 428406 212000) 0 nil])
([nil nil ((#("# In[97]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 38090) (undo-tree-id3045 . -9)) nil (25761 57463 428404 573000) 0 nil])
([nil nil ((#("# In[98]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 39137) (undo-tree-id3044 . -9)) nil (25761 57463 428403 42000) 0 nil])
([nil nil ((#("# In[99]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face)) . 39283) (undo-tree-id3043 . -9)) nil (25761 57463 428400 905000) 0 nil])
([nil nil ((#("# In[100]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 11 (fontified t face font-lock-comment-face)) . 39435) (undo-tree-id3042 . -10)) nil (25761 57463 428398 932000) 0 nil])
([nil nil ((#("# In[101]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 11 (fontified t face font-lock-comment-face)) . 39759) (undo-tree-id3040 . -10) (undo-tree-id3041 . -11)) nil (25761 57463 428397 40000) 0 nil])
([nil nil ((#("# In[8]:
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 9 (fontified t face font-lock-comment-face)) . 1295) (undo-tree-id3039 . -8)) nil (25761 57463 428393 224000) 0 nil])
([nil nil ((1 . 39662) (#("#!/usr/bin/env python

from custom_functs import *
import sklearn
import tensorflow as tf
from tensorflow import keras
import numpy as np
from pathlib import Path
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rc(\"axes\", labelsize=14)
mpl.rc(\"xtick\", labelsize=12)
mpl.rc(\"ytick\", labelsize=12)
# to make this notebook's output stable across runs
np.random.seed(42)
tf.random.set_seed(42)


n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]

print(\"X_train.shape:\", X_train.shape)

print(\"y_train.shape:\", y_train.shape)

fig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))
for col in range(3):
    plt.sca(axes[col])
    plot_series(
        X_valid[col, :, 0],
        y_valid[col, 0],
        y_label=(\"$x(t)$\" if col == 0 else None),
        legend=(col == 0),
    )
plt.show()


# ## Computing Some Baselines

# Naive predictions (just predict the last observed value):
y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))

plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Linear predictions:



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(1)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))




model.evaluate(X_valid, y_valid)




def plot_learning_curves(loss, val_loss):
    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")
    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")
    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    plt.axis([1, 20, 0, 0.05])
    plt.legend(fontsize=14)
    plt.xlabel(\"Epochs\")
    plt.ylabel(\"Loss\")
    plt.grid(True)


plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()




y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Using a Simple RNN



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential([keras.layers.SimpleRNN(1, input_shape=[None, 1])])

optimizer = keras.optimizers.Adam(learning_rate=0.005)
model.compile(loss=\"mse\", optimizer=optimizer)
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))




model.evaluate(X_valid, y_valid)




plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()




y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Deep RNNs



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.SimpleRNN(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))




model.evaluate(X_valid, y_valid)




plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()




y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# Make the second `SimpleRNN` layer return only the last output:



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(1),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))




model.evaluate(X_valid, y_valid)




plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()




y_pred = model.predict(X_valid)
plot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])
plt.show()


# ## Forecasting Several Steps Ahead



np.random.seed(43)  # not 42, as it would give the first series in the train set

series = generate_time_series(1, n_steps + 10)
X_new, Y_new = series[:, :n_steps], series[:, n_steps:]
X = X_new
for step_ahead in range(10):
    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:]




Y_pred.shape




def plot_multiple_forecasts(X, Y, Y_pred):
    n_steps = X.shape[1]
    ahead = Y.shape[1]
    plot_series(X[0, :, 0])
    plt.plot(np.arange(n_steps, n_steps + ahead), Y[0, :, 0], \"bo-\", label=\"Actual\")
    plt.plot(
        np.arange(n_steps, n_steps + ahead),
        Y_pred[0, :, 0],
        \"rx-\",
        label=\"Forecast\",
        markersize=10,
    )
    plt.axis([0, n_steps + ahead, -1, 1])
    plt.legend(fontsize=14)


plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's use this model to predict the next 10 values. We first need to regenerate the sequences with 9 more time steps.



np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, Y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, Y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, Y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


# Now let's predict the next 10 values one by one:



X = X_valid
for step_ahead in range(10):
    y_pred_one = model.predict(X)[:, np.newaxis, :]
    X = np.concatenate([X, y_pred_one], axis=1)

Y_pred = X[:, n_steps:, 0]




Y_pred.shape




np.mean(keras.metrics.mean_squared_error(Y_valid, Y_pred))


# Let's compare this performance with some baselines: naive predictions and a simple linear model:



Y_naive_pred = np.tile(
    X_valid[:, -1], 10
)  # take the last time step value, and repeat it 10 times
np.mean(keras.metrics.mean_squared_error(Y_valid, Y_naive_pred))




np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [keras.layers.Flatten(input_shape=[50, 1]), keras.layers.Dense(10)]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Now let's create an RNN that predicts all 10 next values at once:



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20),
        keras.layers.Dense(10),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\")
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))




np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, -10:, :]
Y_pred = model.predict(X_new)[..., np.newaxis]




plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# Now let's create an RNN that predicts the next 10 steps at each time step. That is, instead of just forecasting time steps 50 to 59 based on time steps 0 to 49, it will forecast time steps 1 to 10 at time step 0, then time steps 2 to 11 at time step 1, and so on, and finally it will forecast time steps 50 to 59 at the last time step. Notice that the model is causal: when it makes predictions at any time step, it can only see past time steps.



np.random.seed(42)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]
Y = np.empty((10000, n_steps, 10))
for step_ahead in range(1, 10 + 1):
    Y[..., step_ahead - 1] = series[..., step_ahead : step_ahead + n_steps, 0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]




X_train.shape, Y_train.shape




np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)


def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])


model.compile(
    loss=\"mse\",
    optimizer=keras.optimizers.Adam(learning_rate=0.01),
    metrics=[last_time_step_mse],
)
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))




np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]




plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # Deep RNN with Batch Norm



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.BatchNormalization(),
        keras.layers.SimpleRNN(20, return_sequences=True),
        keras.layers.BatchNormalization(),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Deep RNNs with Layer Norm



from tensorflow.keras.layers import LayerNormalization




class LNSimpleRNNCell(keras.layers.Layer):
    def __init__(self, units, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.state_size = units
        self.output_size = units
        self.simple_rnn_cell = keras.layers.SimpleRNNCell(units, activation=None)
        self.layer_norm = LayerNormalization()
        self.activation = keras.activations.get(activation)

    def get_initial_state(self, inputs=None, batch_size=None, dtype=None):
        if inputs is not None:
            batch_size = tf.shape(inputs)[0]
            dtype = inputs.dtype
        return [tf.zeros([batch_size, self.state_size], dtype=dtype)]

    def call(self, inputs, states):
        outputs, new_states = self.simple_rnn_cell(inputs, states)
        norm_outputs = self.activation(self.layer_norm(outputs))
        return norm_outputs, [norm_outputs]




np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.RNN(
            LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]
        ),
        keras.layers.RNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # Creating a Custom RNN Class



class MyRNN(keras.layers.Layer):
    def __init__(self, cell, return_sequences=False, **kwargs):
        super().__init__(**kwargs)
        self.cell = cell
        self.return_sequences = return_sequences
        self.get_initial_state = getattr(
            self.cell, \"get_initial_state\", self.fallback_initial_state
        )

    def fallback_initial_state(self, inputs):
        batch_size = tf.shape(inputs)[0]
        return [tf.zeros([batch_size, self.cell.state_size], dtype=inputs.dtype)]

    @tf.function
    def call(self, inputs):
        states = self.get_initial_state(inputs)
        shape = tf.shape(inputs)
        batch_size = shape[0]
        n_steps = shape[1]
        sequences = tf.TensorArray(
            inputs.dtype, size=(n_steps if self.return_sequences else 0)
        )
        outputs = tf.zeros(
            shape=[batch_size, self.cell.output_size], dtype=inputs.dtype
        )
        for step in tf.range(n_steps):
            outputs, states = self.cell(inputs[:, step], states)
            if self.return_sequences:
                sequences = sequences.write(step, outputs)
        if self.return_sequences:
            return tf.transpose(sequences.stack(), [1, 0, 2])
        else:
            return outputs




np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        MyRNN(LNSimpleRNNCell(20), return_sequences=True, input_shape=[None, 1]),
        MyRNN(LNSimpleRNNCell(20), return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# # LSTMs



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.LSTM(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))




model.evaluate(X_valid, Y_valid)




plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()




np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]




plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# # GRUs



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.GRU(20, return_sequences=True, input_shape=[None, 1]),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))




model.evaluate(X_valid, Y_valid)




plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])
plt.show()




np.random.seed(43)

series = generate_time_series(1, 50 + 10)
X_new, Y_new = series[:, :50, :], series[:, 50:, :]
Y_pred = model.predict(X_new)[:, -1][..., np.newaxis]




plot_multiple_forecasts(X_new, Y_new, Y_pred)
plt.show()


# ## Using One-Dimensional Convolutional Layers to Process Sequences

# ```
# 1D conv layer with kernel size 4, stride 2, VALID padding:
#
#               |-----2-----|     |-----5---...------|     |-----23----|
#         |-----1-----|     |-----4-----|   ...      |-----22----|
#   |-----0----|      |-----3-----|     |---...|-----21----|
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 42 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 43 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 52 53 54 55 56 57 58 59
#
# Output:
#
# X:     0/3   2/5   4/7   6/9   8/11 10/13 .../43 42/45 44/47 46/49
# Y:     4/13  6/15  8/17 10/19 12/21 14/23 .../53 46/55 48/57 50/59
# ```



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential(
    [
        keras.layers.Conv1D(
            filters=20, kernel_size=4, strides=2, padding=\"valid\", input_shape=[None, 1]
        ),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.GRU(20, return_sequences=True),
        keras.layers.TimeDistributed(keras.layers.Dense(10)),
    ]
)

model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(
    X_train, Y_train[:, 3::2], epochs=20, validation_data=(X_valid, Y_valid[:, 3::2])
)


# ## WaveNet

# ```
# C2  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\.../\\ /\\ /\\ /\\ /\\ /\\
#    \\  /  \\  /  \\  /  \\  /  \\  /  \\  /  \\       /  \\  /  \\  /  \\
#      /    \\      /    \\      /    \\                 /    \\
# C1  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\  /\\ /.../\\ /\\ /\\ /\\ /\\ /\\ /\\
# X: 0  1  2  3  4  5  6  7  8  9  10 11 12 ... 43 44 45 46 47 48 49
# Y: 1  2  3  4  5  6  7  8  9  10 11 12 13 ... 44 45 46 47 48 49 50
#   /10 11 12 13 14 15 16 17 18 19 20 21 22 ... 53 54 55 56 57 58 59
# ```



np.random.seed(42)
tf.random.set_seed(42)

model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape=[None, 1]))
for rate in (1, 2, 4, 8) * 2:
    model.add(
        keras.layers.Conv1D(
            filters=20,
            kernel_size=2,
            padding=\"causal\",
            activation=\"relu\",
            dilation_rate=rate,
        )
    )
model.add(keras.layers.Conv1D(filters=10, kernel_size=1))
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=20, validation_data=(X_valid, Y_valid))


# Here is the original WaveNet defined in the paper: it uses Gated Activation Units instead of ReLU and parametrized skip connections, plus it pads with zeros on the left to avoid getting shorter and shorter sequences:



class GatedActivationUnit(keras.layers.Layer):
    def __init__(self, activation=\"tanh\", **kwargs):
        super().__init__(**kwargs)
        self.activation = keras.activations.get(activation)

    def call(self, inputs):
        n_filters = inputs.shape[-1] // 2
        linear_output = self.activation(inputs[..., :n_filters])
        gate = keras.activations.sigmoid(inputs[..., n_filters:])
        return self.activation(linear_output) * gate




def wavenet_residual_block(inputs, n_filters, dilation_rate):
    z = keras.layers.Conv1D(
        2 * n_filters, kernel_size=2, padding=\"causal\", dilation_rate=dilation_rate
    )(inputs)
    z = GatedActivationUnit()(z)
    z = keras.layers.Conv1D(n_filters, kernel_size=1)(z)
    return keras.layers.Add()([z, inputs]), z




keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

n_layers_per_block = 3  # 10 in the paper
n_blocks = 1  # 3 in the paper
n_filters = 32  # 128 in the paper
n_outputs = 10  # 256 in the paper

inputs = keras.layers.Input(shape=[None, 1])
z = keras.layers.Conv1D(n_filters, kernel_size=2, padding=\"causal\")(inputs)
skip_to_last = []
for dilation_rate in [2 ** i for i in range(n_layers_per_block)] * n_blocks:
    z, skip = wavenet_residual_block(z, n_filters, dilation_rate)
    skip_to_last.append(skip)
z = keras.activations.relu(keras.layers.Add()(skip_to_last))
z = keras.layers.Conv1D(n_filters, kernel_size=1, activation=\"relu\")(z)
Y_proba = keras.layers.Conv1D(n_outputs, kernel_size=1, activation=\"softmax\")(z)

model = keras.models.Model(inputs=[inputs], outputs=[Y_proba])




model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train, epochs=2, validation_data=(X_valid, Y_valid))


# In this chapter we explored the fundamentals of RNNs and used them to process sequences (namely, time series). In the process we also looked at other ways to process sequences, including CNNs. In the next chapter we will use RNNs for Natural Language Processing, and we will learn more about RNNs (bidirectional RNNs, stateful vs stateless RNNs, Encoder–Decoders, and Attention-augmented Encoder-Decoders). We will also look at the Transformer, an Attention-only architecture.

# # Exercise solutions

# ## 1. to 8.

# See Appendix A.

# ## 9. Tackling the SketchRNN Dataset

# _Exercise: Train a classification model for the SketchRNN dataset, available in TensorFlow Datasets._

# The dataset is not available in TFDS yet, the [pull request](https://github.com/tensorflow/datasets/pull/361) is still work in progress. Luckily, the data is conveniently available as TFRecords, so let's download it (it might take a while, as it's about 1 GB large, with 3,450,000 training sketches and 345,000 test sketches):



DOWNLOAD_ROOT = \"http://download.tensorflow.org/data/\"
FILENAME = \"quickdraw_tutorial_dataset_v1.tar.gz\"
filepath = keras.utils.get_file(
    FILENAME, DOWNLOAD_ROOT + FILENAME, cache_subdir=\"datasets/quickdraw\", extract=True
)




quickdraw_dir = Path(filepath).parent
train_files = sorted([str(path) for path in quickdraw_dir.glob(\"training.tfrecord-*\")])
eval_files = sorted([str(path) for path in quickdraw_dir.glob(\"eval.tfrecord-*\")])




train_files




eval_files




with open(quickdraw_dir / \"eval.tfrecord.classes\") as test_classes_file:
    test_classes = test_classes_file.readlines()

with open(quickdraw_dir / \"training.tfrecord.classes\") as train_classes_file:
    train_classes = train_classes_file.readlines()




assert train_classes == test_classes
class_names = [name.strip().lower() for name in train_classes]




sorted(class_names)




def parse(data_batch):
    feature_descriptions = {
        \"ink\": tf.io.VarLenFeature(dtype=tf.float32),
        \"shape\": tf.io.FixedLenFeature([2], dtype=tf.int64),
        \"class_index\": tf.io.FixedLenFeature([1], dtype=tf.int64),
    }
    examples = tf.io.parse_example(data_batch, feature_descriptions)
    flat_sketches = tf.sparse.to_dense(examples[\"ink\"])
    sketches = tf.reshape(flat_sketches, shape=[tf.size(data_batch), -1, 3])
    lengths = examples[\"shape\"][:, 0]
    labels = examples[\"class_index\"][:, 0]
    return sketches, lengths, labels




def quickdraw_dataset(
    filepaths,
    batch_size=32,
    shuffle_buffer_size=None,
    n_parse_threads=5,
    n_read_threads=5,
    cache=False,
):
    dataset = tf.data.TFRecordDataset(filepaths, num_parallel_reads=n_read_threads)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(parse, num_parallel_calls=n_parse_threads)
    return dataset.prefetch(1)




train_set = quickdraw_dataset(train_files, shuffle_buffer_size=10000)
valid_set = quickdraw_dataset(eval_files[:5])
test_set = quickdraw_dataset(eval_files[5:])




for sketches, lengths, labels in train_set.take(1):
    print(\"sketches =\", sketches)
    print(\"lengths =\", lengths)
    print(\"labels =\", labels)




def draw_sketch(sketch, label=None):
    origin = np.array([[0.0, 0.0, 0.0]])
    sketch = np.r_[origin, sketch]
    stroke_end_indices = np.argwhere(sketch[:, -1] == 1.0)[:, 0]
    coordinates = np.cumsum(sketch[:, :2], axis=0)
    strokes = np.split(coordinates, stroke_end_indices + 1)
    title = class_names[label.numpy()] if label is not None else \"Try to guess\"
    plt.title(title)
    plt.plot(coordinates[:, 0], -coordinates[:, 1], \"y:\")
    for stroke in strokes:
        plt.plot(stroke[:, 0], -stroke[:, 1], \".-\")
    plt.axis(\"off\")


def draw_sketches(sketches, lengths, labels):
    n_sketches = len(sketches)
    n_cols = 4
    n_rows = (n_sketches - 1) // n_cols + 1
    plt.figure(figsize=(n_cols * 3, n_rows * 3.5))
    for index, sketch, length, label in zip(
        range(n_sketches), sketches, lengths, labels
    ):
        plt.subplot(n_rows, n_cols, index + 1)
        draw_sketch(sketch[:length], label)
    plt.show()


for sketches, lengths, labels in train_set.take(1):
    draw_sketches(sketches, lengths, labels)


# Most sketches are composed of less than 100 points:



lengths = np.concatenate([lengths for _, lengths, _ in train_set.take(1000)])
plt.hist(lengths, bins=150, density=True)
plt.axis([0, 200, 0, 0.03])
plt.xlabel(\"length\")
plt.ylabel(\"density\")
plt.show()




def crop_long_sketches(dataset, max_length=100):
    return dataset.map(lambda inks, lengths, labels: (inks[:, :max_length], labels))


cropped_train_set = crop_long_sketches(train_set)
cropped_valid_set = crop_long_sketches(valid_set)
cropped_test_set = crop_long_sketches(test_set)




model = keras.models.Sequential(
    [
        keras.layers.Conv1D(32, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(64, kernel_size=5, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(128, kernel_size=3, strides=2, activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(128, return_sequences=True),
        keras.layers.LSTM(128),
        keras.layers.Dense(len(class_names), activation=\"softmax\"),
    ]
)
optimizer = keras.optimizers.SGD(learning_rate=1e-2, clipnorm=1.0)
model.compile(
    loss=\"sparse_categorical_crossentropy\",
    optimizer=optimizer,
    metrics=[\"accuracy\", \"sparse_top_k_categorical_accuracy\"],
)
history = model.fit(cropped_train_set, epochs=2, validation_data=cropped_valid_set)




y_test = np.concatenate([labels for _, _, labels in test_set])
y_probas = model.predict(test_set)




np.mean(keras.metrics.sparse_top_k_categorical_accuracy(y_test, y_probas))




n_new = 10
Y_probas = model.predict(sketches)
top_k = tf.nn.top_k(Y_probas, k=5)
for index in range(n_new):
    plt.figure(figsize=(3, 3.5))
    draw_sketch(sketches[index])
    plt.show()
    print(\"Top-5 predictions:\".format(index + 1))
    for k in range(5):
        class_name = class_names[top_k.indices[index, k]]
        proba = 100 * top_k.values[index, k]
        print(\"  {}. {} {:.3f}%\".format(k + 1, class_name, proba))
    print(\"Answer: {}\".format(class_names[labels[index].numpy()]))




model.save(\"my_sketchrnn\")


# ## 10. Bach Chorales
# _Exercise: Download the [Bach chorales](https://homl.info/bach) dataset and unzip it. It is composed of 382 chorales composed by Johann Sebastian Bach. Each chorale is 100 to 640 time steps long, and each time step contains 4 integers, where each integer corresponds to a note's index on a piano (except for the value 0, which means that no note is played). Train a model—recurrent, convolutional, or both—that can predict the next time step (four notes), given a sequence of time steps from a chorale. Then use this model to generate Bach-like music, one note at a time: you can do this by giving the model the start of a chorale and asking it to predict the next time step, then appending these time steps to the input sequence and asking the model for the next note, and so on. Also make sure to check out [Google's Coconet model](https://homl.info/coconet), which was used for a nice [Google doodle about Bach](https://www.google.com/doodles/celebrating-johann-sebastian-bach)._
#
#



DOWNLOAD_ROOT = (
    \"https://github.com/ageron/handson-ml2/raw/master/datasets/jsb_chorales/\"
)
FILENAME = \"jsb_chorales.tgz\"
filepath = keras.utils.get_file(
    FILENAME,
    DOWNLOAD_ROOT + FILENAME,
    cache_subdir=\"datasets/jsb_chorales\",
    extract=True,
)




jsb_chorales_dir = Path(filepath).parent
train_files = sorted(jsb_chorales_dir.glob(\"train/chorale_*.csv\"))
valid_files = sorted(jsb_chorales_dir.glob(\"valid/chorale_*.csv\"))
test_files = sorted(jsb_chorales_dir.glob(\"test/chorale_*.csv\"))




import pandas as pd


def load_chorales(filepaths):
    return [pd.read_csv(filepath).values.tolist() for filepath in filepaths]


train_chorales = load_chorales(train_files)
valid_chorales = load_chorales(valid_files)
test_chorales = load_chorales(test_files)




train_chorales[0]


# Notes range from 36 (C1 = C on octave 1) to 81 (A5 = A on octave 5), plus 0 for silence:



notes = set()
for chorales in (train_chorales, valid_chorales, test_chorales):
    for chorale in chorales:
        for chord in chorale:
            notes |= set(chord)

n_notes = len(notes)
min_note = min(notes - {0})
max_note = max(notes)

assert min_note == 36
assert max_note == 81


# Let's write a few functions to listen to these chorales (you don't need to understand the details here, and in fact there are certainly simpler ways to do this, for example using MIDI players, but I just wanted to have a bit of fun writing a synthesizer):



from IPython.display import Audio


def notes_to_frequencies(notes):
    # Frequency doubles when you go up one octave; there are 12 semi-tones
    # per octave; Note A on octave 4 is 440 Hz, and it is note number 69.
    return 2 ** ((np.array(notes) - 69) / 12) * 440


def frequencies_to_samples(frequencies, tempo, sample_rate):
    note_duration = 60 / tempo  # the tempo is measured in beats per minutes
    # To reduce click sound at every beat, we round the frequencies to try to
    # get the samples close to zero at the end of each note.
    frequencies = np.round(note_duration * frequencies) / note_duration
    n_samples = int(note_duration * sample_rate)
    time = np.linspace(0, note_duration, n_samples)
    sine_waves = np.sin(2 * np.pi * frequencies.reshape(-1, 1) * time)
    # Removing all notes with frequencies ≤ 9 Hz (includes note 0 = silence)
    sine_waves *= (frequencies > 9.0).reshape(-1, 1)
    return sine_waves.reshape(-1)


def chords_to_samples(chords, tempo, sample_rate):
    freqs = notes_to_frequencies(chords)
    freqs = np.r_[freqs, freqs[-1:]]  # make last note a bit longer
    merged = np.mean(
        [frequencies_to_samples(melody, tempo, sample_rate) for melody in freqs.T],
        axis=0,
    )
    n_fade_out_samples = sample_rate * 60 // tempo  # fade out last note
    fade_out = np.linspace(1.0, 0.0, n_fade_out_samples) ** 2
    merged[-n_fade_out_samples:] *= fade_out
    return merged


def play_chords(chords, tempo=160, amplitude=0.1, sample_rate=44100, filepath=None):
    samples = amplitude * chords_to_samples(chords, tempo, sample_rate)
    if filepath:
        from scipy.io import wavfile

        samples = (2 ** 15 * samples).astype(np.int16)
        wavfile.write(filepath, sample_rate, samples)
        return display(Audio(filepath))
    else:
        return display(Audio(samples, rate=sample_rate))


# Now let's listen to a few chorales:



for index in range(3):
    play_chords(train_chorales[index])


# Divine! :)

# In order to be able to generate new chorales, we want to train a model that can predict the next chord given all the previous chords. If we naively try to predict the next chord in one shot, predicting all 4 notes at once, we run the risk of getting notes that don't go very well together (believe me, I tried). It's much better and simpler to predict one note at a time. So we will need to preprocess every chorale, turning each chord into an arpegio (i.e., a sequence of notes rather than notes played simultaneuously). So each chorale will be a long sequence of notes (rather than chords), and we can just train a model that can predict the next note given all the previous notes. We will use a sequence-to-sequence approach, where we feed a window to the neural net, and it tries to predict that same window shifted one time step into the future.
#
# We will also shift the values so that they range from 0 to 46, where 0 represents silence, and values 1 to 46 represent notes 36 (C1) to 81 (A5).
#
# And we will train the model on windows of 128 notes (i.e., 32 chords).
#
# Since the dataset fits in memory, we could preprocess the chorales in RAM using any Python code we like, but I will demonstrate here how to do all the preprocessing using tf.data (there will be more details about creating windows using tf.data in the next chapter).



def create_target(batch):
    X = batch[:, :-1]
    Y = batch[:, 1:]  # predict next note in each arpegio, at each step
    return X, Y


def preprocess(window):
    window = tf.where(window == 0, window, window - min_note + 1)  # shift values
    return tf.reshape(window, [-1])  # convert to arpegio


def bach_dataset(
    chorales,
    batch_size=32,
    shuffle_buffer_size=None,
    window_size=32,
    window_shift=16,
    cache=True,
):
    def batch_window(window):
        return window.batch(window_size + 1)

    def to_windows(chorale):
        dataset = tf.data.Dataset.from_tensor_slices(chorale)
        dataset = dataset.window(window_size + 1, window_shift, drop_remainder=True)
        return dataset.flat_map(batch_window)

    chorales = tf.ragged.constant(chorales, ragged_rank=1)
    dataset = tf.data.Dataset.from_tensor_slices(chorales)
    dataset = dataset.flat_map(to_windows).map(preprocess)
    if cache:
        dataset = dataset.cache()
    if shuffle_buffer_size:
        dataset = dataset.shuffle(shuffle_buffer_size)
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(create_target)
    return dataset.prefetch(1)


# Now let's create the training set, the validation set and the test set:



train_set = bach_dataset(train_chorales, shuffle_buffer_size=1000)
valid_set = bach_dataset(valid_chorales)
test_set = bach_dataset(test_chorales)


# Now let's create the model:
#
# * We could feed the note values directly to the model, as floats, but this would probably not give good results. Indeed, the relationships between notes are not that simple: for example, if you replace a C3 with a C4, the melody will still sound fine, even though these notes are 12 semi-tones apart (i.e., one octave). Conversely, if you replace a C3 with a C\\#3, it's very likely that the chord will sound horrible, despite these notes being just next to each other. So we will use an `Embedding` layer to convert each note to a small vector representation (see Chapter 16 for more details on embeddings). We will use 5-dimensional embeddings, so the output of this first layer will have a shape of `[batch_size, window_size, 5]`.
# * We will then feed this data to a small WaveNet-like neural network, composed of a stack of 4 `Conv1D` layers with doubling dilation rates. We will intersperse these layers with `BatchNormalization` layers for faster better convergence.
# * Then one `LSTM` layer to try to capture long-term patterns.
# * And finally a `Dense` layer to produce the final note probabilities. It will predict one probability for each chorale in the batch, for each time step, and for each possible note (including silence). So the output shape will be `[batch_size, window_size, 47]`.



n_embedding_dims = 5

model = keras.models.Sequential(
    [
        keras.layers.Embedding(
            input_dim=n_notes, output_dim=n_embedding_dims, input_shape=[None]
        ),
        keras.layers.Conv1D(32, kernel_size=2, padding=\"causal\", activation=\"relu\"),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            48, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=2
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            64, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=4
        ),
        keras.layers.BatchNormalization(),
        keras.layers.Conv1D(
            96, kernel_size=2, padding=\"causal\", activation=\"relu\", dilation_rate=8
        ),
        keras.layers.BatchNormalization(),
        keras.layers.LSTM(256, return_sequences=True),
        keras.layers.Dense(n_notes, activation=\"softmax\"),
    ]
)

model.summary()


# Now we're ready to compile and train the model!



optimizer = keras.optimizers.Nadam(learning_rate=1e-3)
model.compile(
    loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"]
)
model.fit(train_set, epochs=20, validation_data=valid_set)


# I have not done much hyperparameter search, so feel free to iterate on this model now and try to optimize it. For example, you could try removing the `LSTM` layer and replacing it with `Conv1D` layers. You could also play with the number of layers, the learning rate, the optimizer, and so on.

# Once you're satisfied with the performance of the model on the validation set, you can save it and evaluate it one last time on the test set:



model.save(\"my_bach_model.h5\")
model.evaluate(test_set)


# **Note:** There's no real need for a test set in this exercise, since we will perform the final evaluation by just listening to the music produced by the model. So if you want, you can add the test set to the train set, and train the model again, hopefully getting a slightly better model.

# Now let's write a function that will generate a new chorale. We will give it a few seed chords, it will convert them to arpegios (the format expected by the model), and use the model to predict the next note, then the next, and so on. In the end, it will group the notes 4 by 4 to create chords again, and return the resulting chorale.

# **Warning**: `model.predict_classes(X)` is deprecated. It is replaced with `np.argmax(model.predict(X), axis=-1)`.



def generate_chorale(model, seed_chords, length):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            # next_note = model.predict_classes(arpegio)[:1, -1:]
            next_note = np.argmax(model.predict(arpegio), axis=-1)[:1, -1:]
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# To test this function, we need some seed chords. Let's use the first 8 chords of one of the test chorales (it's actually just 2 different chords, each played 4 times):



seed_chords = test_chorales[2][:8]
play_chords(seed_chords, amplitude=0.2)


# Now we are ready to generate our first chorale! Let's ask the function to generate 56 more chords, for a total of 64 chords, i.e., 16 bars (assuming 4 chords per bar, i.e., a 4/4 signature):



new_chorale = generate_chorale(model, seed_chords, 56)
play_chords(new_chorale)


# This approach has one major flaw: it is often too conservative. Indeed, the model will not take any risk, it will always choose the note with the highest score, and since repeating the previous note generally sounds good enough, it's the least risky option, so the algorithm will tend to make notes last longer and longer. Pretty boring. Plus, if you run the model multiple times, it will always generate the same melody.
#
# So let's spice things up a bit! Instead of always picking the note with the highest score, we will pick the next note randomly, according to the predicted probabilities. For example, if the model predicts a C3 with 75% probability, and a G3 with a 25% probability, then we will pick one of these two notes randomly, with these probabilities. We will also add a `temperature` parameter that will control how \"hot\" (i.e., daring) we want the system to feel. A high temperature will bring the predicted probabilities closer together, reducing the probability of the likely notes and increasing the probability of the unlikely ones.



def generate_chorale_v2(model, seed_chords, length, temperature=1):
    arpegio = preprocess(tf.constant(seed_chords, dtype=tf.int64))
    arpegio = tf.reshape(arpegio, [1, -1])
    for chord in range(length):
        for note in range(4):
            next_note_probas = model.predict(arpegio)[0, -1:]
            rescaled_logits = tf.math.log(next_note_probas) / temperature
            next_note = tf.random.categorical(rescaled_logits, num_samples=1)
            arpegio = tf.concat([arpegio, next_note], axis=1)
    arpegio = tf.where(arpegio == 0, arpegio, arpegio + min_note - 1)
    return tf.reshape(arpegio, shape=[-1, 4])


# Let's generate 3 chorales using this new function: one cold, one medium, and one hot (feel free to experiment with other seeds, lengths and temperatures). The code saves each chorale to a separate file. You can run these cells over an over again until you generate a masterpiece!
#
# **Please share your most beautiful generated chorale with me on Twitter @aureliengeron, I would really appreciate it! :))**



new_chorale_v2_cold = generate_chorale_v2(model, seed_chords, 56, temperature=0.8)
play_chords(new_chorale_v2_cold, filepath=\"bach_cold.wav\")




new_chorale_v2_medium = generate_chorale_v2(model, seed_chords, 56, temperature=1.0)
play_chords(new_chorale_v2_medium, filepath=\"bach_medium.wav\")




new_chorale_v2_hot = generate_chorale_v2(model, seed_chords, 56, temperature=1.5)
play_chords(new_chorale_v2_hot, filepath=\"bach_hot.wav\")


# Lastly, you can try a fun social experiment: send your friends a few of your favorite generated chorales, plus the real chorale, and ask them to guess which one is the real one!



play_chords(test_chorales[2][:64], filepath=\"bach_test_4.wav\")
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 22 (fontified t face font-lock-comment-face) 22 23 (fontified t) 23 27 (fontified t face font-lock-keyword-face) 27 42 (fontified t) 42 48 (fontified t face font-lock-keyword-face) 48 51 (fontified t) 51 57 (fontified t face font-lock-keyword-face) 57 66 (fontified t) 66 72 (fontified t face font-lock-keyword-face) 72 84 (fontified t) 84 86 (fontified t face font-lock-keyword-face) 86 90 (fontified t) 90 94 (fontified t face font-lock-keyword-face) 94 106 (fontified t) 106 112 (fontified t face font-lock-keyword-face) 112 119 (fontified t) 119 125 (fontified t face font-lock-keyword-face) 125 132 (fontified t) 132 134 (fontified t face font-lock-keyword-face) 134 138 (fontified t) 138 142 (fontified t face font-lock-keyword-face) 142 151 (fontified t) 151 157 (fontified t face font-lock-keyword-face) 157 162 (fontified t) 162 163 (fontified t rear-nonsticky t) 163 169 (fontified t face font-lock-keyword-face) 169 181 (fontified t) 181 183 (fontified t face font-lock-keyword-face) 183 188 (fontified t) 188 194 (fontified t face font-lock-keyword-face) 194 213 (fontified t) 213 215 (fontified t face font-lock-keyword-face) 215 219 (fontified t) 219 220 (fontified t) 220 221 (fontified t) 221 227 (fontified t) 227 228 (fontified t face (rainbow-delimiters-depth-1-face)) 228 234 (fontified t face font-lock-string-face) 234 248 (fontified t) 248 249 (fontified t face (rainbow-delimiters-depth-1-face)) 249 250 (fontified t) 250 256 (fontified t) 256 257 (fontified t face (rainbow-delimiters-depth-1-face)) 257 264 (fontified t face font-lock-string-face) 264 278 (fontified t) 278 279 (fontified t face (rainbow-delimiters-depth-1-face)) 279 280 (fontified t) 280 286 (fontified t) 286 287 (fontified t face (rainbow-delimiters-depth-1-face)) 287 294 (fontified t face font-lock-string-face) 294 308 (fontified t) 308 309 (fontified t face (rainbow-delimiters-depth-1-face)) 309 310 (rear-nonsticky t fontified t) 310 312 (fontified t face font-lock-comment-delimiter-face) 312 362 (fontified t face font-lock-comment-face) 362 376 (fontified t) 376 377 (fontified t face (rainbow-delimiters-depth-1-face)) 377 379 (fontified t) 379 380 (fontified t face (rainbow-delimiters-depth-1-face)) 380 399 (fontified t) 399 400 (fontified t face (rainbow-delimiters-depth-1-face)) 400 402 (fontified t) 402 403 (fontified t face (rainbow-delimiters-depth-1-face)) 403 404 (fontified t) 404 406 (fontified t) 406 413 (fontified t face font-lock-variable-name-face) 413 419 (fontified t) 419 425 (fontified t face font-lock-variable-name-face) 425 448 (fontified t) 448 449 (fontified t face (rainbow-delimiters-depth-1-face)) 449 467 (fontified t) 467 468 (fontified t face (rainbow-delimiters-depth-1-face)) 468 469 (fontified t) 469 476 (fontified t face font-lock-variable-name-face) 476 478 (fontified t) 478 485 (fontified t face font-lock-variable-name-face) 485 494 (fontified t) 494 495 (fontified t face (rainbow-delimiters-depth-1-face)) 495 498 (fontified t) 498 510 (fontified t) 510 511 (fontified t face (rainbow-delimiters-depth-1-face)) 511 519 (fontified t) 519 520 (fontified t face (rainbow-delimiters-depth-1-face)) 520 529 (fontified t) 529 530 (fontified t face (rainbow-delimiters-depth-1-face)) 530 531 (fontified t) 531 538 (fontified t face font-lock-variable-name-face) 538 540 (fontified t) 540 547 (fontified t face font-lock-variable-name-face) 547 556 (fontified t) 556 557 (fontified t face (rainbow-delimiters-depth-1-face)) 557 576 (fontified t) 576 577 (fontified t face (rainbow-delimiters-depth-1-face)) 577 585 (fontified t) 585 586 (fontified t face (rainbow-delimiters-depth-1-face)) 586 599 (fontified t) 599 600 (fontified t face (rainbow-delimiters-depth-1-face)) 600 601 (fontified t) 601 607 (fontified t face font-lock-variable-name-face) 607 609 (fontified t) 609 615 (fontified t face font-lock-variable-name-face) 615 624 (fontified t) 624 625 (fontified t face (rainbow-delimiters-depth-1-face)) 625 640 (fontified t) 640 641 (fontified t face (rainbow-delimiters-depth-1-face)) 641 649 (fontified t) 649 650 (fontified t face (rainbow-delimiters-depth-1-face)) 650 659 (fontified t) 659 660 (fontified t face (rainbow-delimiters-depth-1-face)) 660 662 (fontified t) 662 667 (fontified t face font-lock-keyword-face) 667 668 (fontified t face (rainbow-delimiters-depth-1-face)) 668 669 (fontified t face font-lock-string-face) 669 684 (fontified t face font-lock-string-face) 684 685 (fontified t) 685 686 (fontified t) 686 699 (fontified t) 699 700 (fontified t face (rainbow-delimiters-depth-1-face)) 700 701 (fontified t) 701 702 (fontified t) 702 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t face (rainbow-delimiters-depth-1-face)) 708 709 (fontified t face font-lock-string-face) 709 718 (fontified t face font-lock-string-face) 718 724 (fontified t face font-lock-string-face) 724 725 (fontified t) 725 726 (fontified t) 726 738 (fontified t) 738 739 (rear-nonsticky t fontified t) 739 740 (fontified t face (rainbow-delimiters-depth-1-face)) 740 741 (fontified t) 741 742 (fontified t) 742 745 (fontified t face font-lock-variable-name-face) 745 747 (fontified t) 747 750 (fontified t face font-lock-variable-name-face) 750 751 (face font-lock-variable-name-face fontified t) 751 766 (fontified t) 766 767 (face (rainbow-delimiters-depth-1-face) fontified t) 767 792 (fontified t) 792 796 (face font-lock-constant-face fontified t) 796 806 (fontified t) 806 807 (face (rainbow-delimiters-depth-2-face) fontified t) 807 812 (fontified t) 812 813 (face (rainbow-delimiters-depth-2-face) fontified t) 813 814 (face (rainbow-delimiters-depth-1-face) fontified t) 814 815 (fontified t) 815 818 (fontified t face font-lock-keyword-face) 818 823 (fontified t) 823 825 (fontified t face font-lock-keyword-face) 825 826 (fontified t) 826 831 (fontified t face font-lock-builtin-face) 831 832 (fontified t face (rainbow-delimiters-depth-1-face)) 832 833 (fontified t) 833 834 (fontified t face (rainbow-delimiters-depth-1-face)) 834 847 (fontified t) 847 848 (fontified t face (rainbow-delimiters-depth-1-face)) 848 852 (fontified t) 852 853 (fontified t face (rainbow-delimiters-depth-2-face)) 853 856 (fontified t) 856 857 (fontified t face (rainbow-delimiters-depth-2-face)) 857 858 (fontified t face (rainbow-delimiters-depth-1-face)) 858 874 (fontified t) 874 875 (fontified t face (rainbow-delimiters-depth-1-face)) 875 891 (fontified t) 891 892 (fontified t face (rainbow-delimiters-depth-2-face)) 892 901 (fontified t) 901 902 (fontified t face (rainbow-delimiters-depth-2-face)) 902 919 (fontified t) 919 920 (fontified t face (rainbow-delimiters-depth-2-face)) 920 926 (fontified t) 926 927 (fontified t face (rainbow-delimiters-depth-2-face)) 927 945 (fontified t) 945 946 (fontified t face (rainbow-delimiters-depth-2-face)) 946 947 (fontified t face font-lock-string-face) 947 949 (fontified t face font-lock-string-face) 949 950 (fontified t face font-lock-string-face) 950 951 (fontified t face font-lock-string-face) 951 952 (fontified t face font-lock-string-face) 952 953 (fontified t face font-lock-string-face) 953 954 (fontified t face font-lock-string-face) 954 955 (fontified t) 955 957 (fontified t face font-lock-keyword-face) 957 967 (fontified t) 967 971 (fontified t face font-lock-keyword-face) 971 972 (fontified t) 972 976 (fontified t face font-lock-constant-face) 976 977 (fontified t face (rainbow-delimiters-depth-2-face)) 977 994 (fontified t) 994 995 (fontified t face (rainbow-delimiters-depth-2-face)) 995 1003 (fontified t) 1003 1004 (fontified t face (rainbow-delimiters-depth-2-face)) 1004 1010 (fontified t) 1010 1011 (fontified t face (rainbow-delimiters-depth-1-face)) 1011 1020 (fontified t) 1020 1021 (fontified t face (rainbow-delimiters-depth-1-face)) 1021 1022 (fontified t face (rainbow-delimiters-depth-1-face)) 1022 1025 (fontified t) 1025 1027 (fontified t face font-lock-comment-delimiter-face) 1027 1055 (fontified t face font-lock-comment-face) 1055 1056 (fontified t) 1056 1058 (fontified t face font-lock-comment-delimiter-face) 1058 1080 (fontified t face font-lock-comment-face) 1080 1116 (fontified t face font-lock-comment-face) 1116 1122 (fontified t face font-lock-variable-name-face) 1122 1132 (fontified t) 1132 1133 (fontified t face (rainbow-delimiters-depth-1-face)) 1133 1138 (fontified t) 1138 1139 (fontified t face (rainbow-delimiters-depth-1-face)) 1139 1147 (fontified t) 1147 1148 (fontified t face (rainbow-delimiters-depth-1-face)) 1148 1179 (fontified t) 1179 1180 (fontified t face (rainbow-delimiters-depth-2-face)) 1180 1195 (fontified t) 1195 1196 (fontified t face (rainbow-delimiters-depth-2-face)) 1196 1197 (fontified t face (rainbow-delimiters-depth-1-face)) 1197 1198 (fontified t) 1198 1202 (fontified t) 1202 1210 (fontified t) 1210 1211 (fontified t face (rainbow-delimiters-depth-1-face)) 1211 1212 (fontified t) 1212 1218 (fontified t) 1218 1219 (fontified t face (rainbow-delimiters-depth-2-face)) 1219 1226 (fontified t) 1226 1227 (fontified t face (rainbow-delimiters-depth-2-face)) 1227 1236 (fontified t) 1236 1237 (fontified t face (rainbow-delimiters-depth-2-face)) 1237 1240 (fontified t) 1240 1241 (fontified t) 1241 1242 (fontified t face (rainbow-delimiters-depth-2-face)) 1242 1250 (fontified t) 1250 1251 (fontified t face (rainbow-delimiters-depth-2-face)) 1251 1255 (fontified t) 1255 1256 (fontified t face (rainbow-delimiters-depth-2-face)) 1256 1257 (fontified t face (rainbow-delimiters-depth-1-face)) 1257 1258 (fontified t) 1258 1266 (fontified t) 1266 1267 (fontified t face (rainbow-delimiters-depth-1-face)) 1267 1268 (fontified t face (rainbow-delimiters-depth-1-face)) 1268 1271 (fontified t) 1271 1273 (fontified t face font-lock-comment-delimiter-face) 1273 1293 (fontified t face font-lock-comment-face) 1293 1294 (fontified t) 1294 1295 (fontified t) 1295 1306 (fontified t) 1306 1310 (fontified t) 1310 1311 (fontified t face (rainbow-delimiters-depth-1-face)) 1311 1313 (fontified t) 1313 1314 (fontified t face (rainbow-delimiters-depth-1-face)) 1314 1315 (fontified t) 1315 1333 (fontified t) 1333 1334 (fontified t face (rainbow-delimiters-depth-1-face)) 1334 1336 (fontified t) 1336 1337 (fontified t face (rainbow-delimiters-depth-1-face)) 1337 1339 (fontified t) 1339 1344 (fontified t face font-lock-variable-name-face) 1344 1370 (fontified t) 1370 1371 (fontified t face (rainbow-delimiters-depth-1-face)) 1371 1376 (fontified t) 1376 1377 (fontified t face (rainbow-delimiters-depth-2-face)) 1377 1397 (fontified t) 1397 1398 (fontified t face (rainbow-delimiters-depth-3-face)) 1398 1410 (fontified t) 1410 1411 (fontified t face (rainbow-delimiters-depth-4-face)) 1411 1416 (fontified t) 1416 1417 (fontified t face (rainbow-delimiters-depth-4-face)) 1417 1418 (fontified t face (rainbow-delimiters-depth-3-face)) 1418 1438 (fontified t) 1438 1439 (fontified t face (rainbow-delimiters-depth-3-face)) 1439 1440 (fontified t) 1440 1441 (fontified t face (rainbow-delimiters-depth-3-face)) 1441 1442 (fontified t face (rainbow-delimiters-depth-2-face)) 1442 1443 (fontified t) 1443 1444 (fontified t face (rainbow-delimiters-depth-1-face)) 1444 1452 (fontified t) 1452 1459 (fontified t face font-lock-builtin-face) 1459 1460 (fontified t face (rainbow-delimiters-depth-1-face)) 1460 1465 (fontified t) 1465 1466 (fontified t face font-lock-string-face) 1466 1469 (fontified t face font-lock-string-face) 1469 1470 (fontified t face font-lock-string-face) 1470 1482 (fontified t) 1482 1483 (fontified t face font-lock-string-face) 1483 1487 (fontified t face font-lock-string-face) 1487 1488 (fontified t face font-lock-string-face) 1488 1489 (fontified t face (rainbow-delimiters-depth-1-face)) 1489 1490 (fontified t) 1490 1497 (fontified t face font-lock-variable-name-face) 1497 1509 (fontified t) 1509 1510 (fontified t face (rainbow-delimiters-depth-1-face)) 1510 1555 (fontified t) 1555 1556 (fontified t face (rainbow-delimiters-depth-2-face)) 1556 1572 (fontified t) 1572 1573 (fontified t face (rainbow-delimiters-depth-2-face)) 1573 1574 (fontified t face (rainbow-delimiters-depth-1-face)) 1574 1577 (fontified t) 1577 1578 (fontified t) 1578 1593 (fontified t) 1593 1594 (fontified t face (rainbow-delimiters-depth-1-face)) 1594 1598 (fontified t) 1598 1610 (fontified t) 1610 1611 (fontified t face (rainbow-delimiters-depth-1-face)) 1611 1612 (fontified t) 1612 1614 (fontified t) 1614 1615 (fontified t) 1615 1616 (fontified t) 1616 1619 (fontified t face font-lock-keyword-face) 1619 1620 (fontified t) 1620 1640 (fontified t face font-lock-function-name-face) 1640 1641 (fontified t face (rainbow-delimiters-depth-1-face)) 1641 1655 (fontified t) 1655 1656 (fontified t face (rainbow-delimiters-depth-1-face)) 1656 1670 (fontified t) 1670 1671 (fontified t face (rainbow-delimiters-depth-1-face)) 1671 1680 (fontified t) 1680 1681 (fontified t face (rainbow-delimiters-depth-2-face)) 1681 1684 (fontified t face font-lock-builtin-face) 1684 1685 (fontified t face (rainbow-delimiters-depth-3-face)) 1685 1689 (fontified t) 1689 1690 (fontified t face (rainbow-delimiters-depth-3-face)) 1690 1691 (fontified t face (rainbow-delimiters-depth-2-face)) 1691 1705 (fontified t) 1705 1706 (fontified t face font-lock-string-face) 1706 1709 (fontified t face font-lock-string-face) 1709 1710 (fontified t face font-lock-string-face) 1710 1718 (fontified t) 1718 1719 (fontified t face font-lock-string-face) 1719 1730 (fontified t face font-lock-string-face) 1730 1732 (fontified t face font-lock-string-face) 1732 1733 (fontified t face font-lock-string-face) 1733 1734 (fontified t face (rainbow-delimiters-depth-1-face)) 1734 1735 (fontified t) 1735 1747 (fontified t) 1747 1748 (fontified t face (rainbow-delimiters-depth-1-face)) 1748 1757 (fontified t) 1757 1758 (fontified t face (rainbow-delimiters-depth-2-face)) 1758 1761 (fontified t face font-lock-builtin-face) 1761 1762 (fontified t face (rainbow-delimiters-depth-3-face)) 1762 1770 (fontified t) 1770 1771 (fontified t face (rainbow-delimiters-depth-3-face)) 1771 1772 (fontified t face (rainbow-delimiters-depth-2-face)) 1772 1788 (fontified t) 1788 1793 (fontified t face font-lock-string-face) 1793 1795 (fontified t) 1795 1796 (fontified t) 1796 1801 (fontified t) 1801 1818 (face font-lock-string-face fontified t) 1818 1819 (face (rainbow-delimiters-depth-1-face) fontified t) 1819 1820 (fontified t) 1831 1832 (face (rainbow-delimiters-depth-1-face)) 1832 1833 (face (rainbow-delimiters-depth-1-face)) 1857 1858 (face (rainbow-delimiters-depth-1-face)) 1880 1881 (face (rainbow-delimiters-depth-2-face)) 1889 1893 (face font-lock-constant-face) 1893 1894 (face (rainbow-delimiters-depth-2-face)) 1894 1895 (face (rainbow-delimiters-depth-1-face)) 1908 1909 (face (rainbow-delimiters-depth-1-face)) 1909 1910 (face (rainbow-delimiters-depth-2-face)) 1924 1925 (face (rainbow-delimiters-depth-2-face)) 1925 1926 (face (rainbow-delimiters-depth-1-face)) 1941 1942 (face (rainbow-delimiters-depth-1-face)) 1953 1954 (face (rainbow-delimiters-depth-1-face)) 1969 1970 (face (rainbow-delimiters-depth-1-face)) 1970 1978 (face font-lock-string-face) 1978 1979 (face (rainbow-delimiters-depth-1-face)) 1994 1995 (face (rainbow-delimiters-depth-1-face)) 1995 2001 (face font-lock-string-face) 2001 2002 (face (rainbow-delimiters-depth-1-face)) 2015 2016 (face (rainbow-delimiters-depth-1-face)) 2016 2020 (face font-lock-constant-face) 2020 2021 (face (rainbow-delimiters-depth-1-face)) 2044 2045 (face (rainbow-delimiters-depth-1-face)) 2060 2061 (face (rainbow-delimiters-depth-2-face)) 2061 2067 (face font-lock-string-face) 2067 2068 (face (rainbow-delimiters-depth-2-face)) 2085 2086 (face (rainbow-delimiters-depth-2-face)) 2086 2096 (face font-lock-string-face) 2096 2097 (face (rainbow-delimiters-depth-2-face)) 2097 2098 (face (rainbow-delimiters-depth-1-face)) 2107 2108 (face (rainbow-delimiters-depth-1-face)) 2108 2109 (face (rainbow-delimiters-depth-1-face)) 2114 2120 (face font-lock-variable-name-face) 2136 2137 (face (rainbow-delimiters-depth-1-face)) 2144 2145 (face (rainbow-delimiters-depth-1-face)) 2157 2158 (face (rainbow-delimiters-depth-1-face)) 2165 2166 (face (rainbow-delimiters-depth-2-face)) 2173 2174 (face (rainbow-delimiters-depth-2-face)) 2183 2184 (face (rainbow-delimiters-depth-2-face)) 2188 2189 (face (rainbow-delimiters-depth-2-face)) 2197 2198 (face (rainbow-delimiters-depth-2-face)) 2202 2203 (face (rainbow-delimiters-depth-2-face)) 2203 2204 (face (rainbow-delimiters-depth-1-face)) 2213 2214 (face (rainbow-delimiters-depth-1-face)) 2214 2215 (face (rainbow-delimiters-depth-1-face)) 2218 2220 (face font-lock-comment-delimiter-face) 2220 2242 (face font-lock-comment-face) 2259 2260 (face (rainbow-delimiters-depth-1-face)) 2262 2263 (face (rainbow-delimiters-depth-1-face)) 2282 2283 (face (rainbow-delimiters-depth-1-face)) 2285 2286 (face (rainbow-delimiters-depth-1-face)) 2288 2293 (face font-lock-variable-name-face) 2319 2320 (face (rainbow-delimiters-depth-1-face)) 2320 2321 (face (rainbow-delimiters-depth-2-face)) 2343 2344 (face (rainbow-delimiters-depth-3-face)) 2359 2360 (face (rainbow-delimiters-depth-4-face)) 2360 2364 (face font-lock-constant-face) 2367 2368 (face (rainbow-delimiters-depth-4-face)) 2368 2369 (face (rainbow-delimiters-depth-3-face)) 2369 2370 (face (rainbow-delimiters-depth-2-face)) 2370 2371 (face (rainbow-delimiters-depth-1-face)) 2373 2382 (face font-lock-variable-name-face) 2406 2407 (face (rainbow-delimiters-depth-1-face)) 2426 2427 (face (rainbow-delimiters-depth-1-face)) 2434 2441 (face font-lock-builtin-face) 2441 2442 (face (rainbow-delimiters-depth-1-face)) 2447 2452 (face font-lock-string-face) 2473 2474 (face (rainbow-delimiters-depth-1-face)) 2475 2482 (face font-lock-variable-name-face) 2494 2495 (face (rainbow-delimiters-depth-1-face)) 2540 2541 (face (rainbow-delimiters-depth-2-face)) 2557 2558 (face (rainbow-delimiters-depth-2-face)) 2558 2559 (face (rainbow-delimiters-depth-1-face)) 2578 2579 (face (rainbow-delimiters-depth-1-face)) 2595 2596 (face (rainbow-delimiters-depth-1-face)) 2621 2622 (face (rainbow-delimiters-depth-1-face)) 2637 2638 (face (rainbow-delimiters-depth-2-face)) 2638 2644 (face font-lock-string-face) 2644 2645 (face (rainbow-delimiters-depth-2-face)) 2662 2663 (face (rainbow-delimiters-depth-2-face)) 2663 2673 (face font-lock-string-face) 2673 2674 (face (rainbow-delimiters-depth-2-face)) 2674 2675 (face (rainbow-delimiters-depth-1-face)) 2684 2685 (face (rainbow-delimiters-depth-1-face)) 2685 2686 (face (rainbow-delimiters-depth-1-face)) 2691 2697 (face font-lock-variable-name-face) 2713 2714 (face (rainbow-delimiters-depth-1-face)) 2721 2722 (face (rainbow-delimiters-depth-1-face)) 2734 2735 (face (rainbow-delimiters-depth-1-face)) 2742 2743 (face (rainbow-delimiters-depth-2-face)) 2750 2751 (face (rainbow-delimiters-depth-2-face)) 2760 2761 (face (rainbow-delimiters-depth-2-face)) 2765 2766 (face (rainbow-delimiters-depth-2-face)) 2774 2775 (face (rainbow-delimiters-depth-2-face)) 2779 2780 (face (rainbow-delimiters-depth-2-face)) 2780 2781 (face (rainbow-delimiters-depth-1-face)) 2790 2791 (face (rainbow-delimiters-depth-1-face)) 2791 2792 (face (rainbow-delimiters-depth-1-face)) 2795 2797 (face font-lock-comment-delimiter-face) 2797 2810 (face font-lock-comment-face) 2827 2828 (face (rainbow-delimiters-depth-1-face)) 2830 2831 (face (rainbow-delimiters-depth-1-face)) 2850 2851 (face (rainbow-delimiters-depth-1-face)) 2853 2854 (face (rainbow-delimiters-depth-1-face)) 2856 2861 (face font-lock-variable-name-face) 2887 2888 (face (rainbow-delimiters-depth-1-face)) 2893 2894 (face (rainbow-delimiters-depth-2-face)) 2925 2926 (face (rainbow-delimiters-depth-3-face)) 2947 2951 (face font-lock-constant-face) 2965 2966 (face (rainbow-delimiters-depth-4-face)) 2966 2970 (face font-lock-constant-face) 2973 2974 (face (rainbow-delimiters-depth-4-face)) 2974 2975 (face (rainbow-delimiters-depth-3-face)) 3007 3008 (face (rainbow-delimiters-depth-3-face)) 3029 3033 (face font-lock-constant-face) 3033 3034 (face (rainbow-delimiters-depth-3-face)) 3066 3067 (face (rainbow-delimiters-depth-3-face)) 3068 3069 (face (rainbow-delimiters-depth-3-face)) 3075 3076 (face (rainbow-delimiters-depth-2-face)) 3077 3078 (face (rainbow-delimiters-depth-1-face)) 3086 3093 (face font-lock-builtin-face) 3093 3094 (face (rainbow-delimiters-depth-1-face)) 3099 3104 (face font-lock-string-face) 3116 3122 (face font-lock-string-face) 3122 3123 (face (rainbow-delimiters-depth-1-face)) 3124 3131 (face font-lock-variable-name-face) 3143 3144 (face (rainbow-delimiters-depth-1-face)) 3189 3190 (face (rainbow-delimiters-depth-2-face)) 3206 3207 (face (rainbow-delimiters-depth-2-face)) 3207 3208 (face (rainbow-delimiters-depth-1-face)) 3227 3228 (face (rainbow-delimiters-depth-1-face)) 3244 3245 (face (rainbow-delimiters-depth-1-face)) 3270 3271 (face (rainbow-delimiters-depth-1-face)) 3286 3287 (face (rainbow-delimiters-depth-2-face)) 3287 3293 (face font-lock-string-face) 3293 3294 (face (rainbow-delimiters-depth-2-face)) 3311 3312 (face (rainbow-delimiters-depth-2-face)) 3312 3322 (face font-lock-string-face) 3322 3323 (face (rainbow-delimiters-depth-2-face)) 3323 3324 (face (rainbow-delimiters-depth-1-face)) 3333 3334 (face (rainbow-delimiters-depth-1-face)) 3334 3335 (face (rainbow-delimiters-depth-1-face)) 3340 3346 (face font-lock-variable-name-face) 3362 3363 (face (rainbow-delimiters-depth-1-face)) 3370 3371 (face (rainbow-delimiters-depth-1-face)) 3383 3384 (face (rainbow-delimiters-depth-1-face)) 3391 3392 (face (rainbow-delimiters-depth-2-face)) 3399 3400 (face (rainbow-delimiters-depth-2-face)) 3409 3410 (face (rainbow-delimiters-depth-2-face)) 3414 3415 (face (rainbow-delimiters-depth-2-face)) 3423 3424 (face (rainbow-delimiters-depth-2-face)) 3428 3429 (face (rainbow-delimiters-depth-2-face)) 3429 3430 (face (rainbow-delimiters-depth-1-face)) 3439 3440 (face (rainbow-delimiters-depth-1-face)) 3440 3441 (face (rainbow-delimiters-depth-1-face)) 3444 3446 (face font-lock-comment-delimiter-face) 3446 3509 (face font-lock-comment-face) 3526 3527 (face (rainbow-delimiters-depth-1-face)) 3529 3530 (face (rainbow-delimiters-depth-1-face)) 3549 3550 (face (rainbow-delimiters-depth-1-face)) 3552 3553 (face (rainbow-delimiters-depth-1-face)) 3555 3560 (face font-lock-variable-name-face) 3586 3587 (face (rainbow-delimiters-depth-1-face)) 3592 3593 (face (rainbow-delimiters-depth-2-face)) 3624 3625 (face (rainbow-delimiters-depth-3-face)) 3646 3650 (face font-lock-constant-face) 3664 3665 (face (rainbow-delimiters-depth-4-face)) 3665 3669 (face font-lock-constant-face) 3672 3673 (face (rainbow-delimiters-depth-4-face)) 3673 3674 (face (rainbow-delimiters-depth-3-face)) 3706 3707 (face (rainbow-delimiters-depth-3-face)) 3709 3710 (face (rainbow-delimiters-depth-3-face)) 3738 3739 (face (rainbow-delimiters-depth-3-face)) 3740 3741 (face (rainbow-delimiters-depth-3-face)) 3747 3748 (face (rainbow-delimiters-depth-2-face)) 3749 3750 (face (rainbow-delimiters-depth-1-face)) 3758 3765 (face font-lock-builtin-face) 3765 3766 (face (rainbow-delimiters-depth-1-face)) 3771 3776 (face font-lock-string-face) 3788 3794 (face font-lock-string-face) 3794 3795 (face (rainbow-delimiters-depth-1-face)) 3796 3803 (face font-lock-variable-name-face) 3815 3816 (face (rainbow-delimiters-depth-1-face)) 3861 3862 (face (rainbow-delimiters-depth-2-face)) 3878 3879 (face (rainbow-delimiters-depth-2-face)) 3879 3880 (face (rainbow-delimiters-depth-1-face)) 3899 3900 (face (rainbow-delimiters-depth-1-face)) 3916 3917 (face (rainbow-delimiters-depth-1-face)) 3942 3943 (face (rainbow-delimiters-depth-1-face)) 3958 3959 (face (rainbow-delimiters-depth-2-face)) 3959 3965 (face font-lock-string-face) 3965 3966 (face (rainbow-delimiters-depth-2-face)) 3983 3984 (face (rainbow-delimiters-depth-2-face)) 3984 3991 (face font-lock-string-face) 3991 3994 (face font-lock-string-face) 3994 3995 (face (rainbow-delimiters-depth-2-face)) 3995 3996 (face (rainbow-delimiters-depth-1-face)) 4005 4006 (face (rainbow-delimiters-depth-1-face)) 4006 4007 (face (rainbow-delimiters-depth-1-face)) 4012 4018 (face font-lock-variable-name-face) 4034 4035 (face (rainbow-delimiters-depth-1-face)) 4042 4043 (face (rainbow-delimiters-depth-1-face)) 4055 4056 (face (rainbow-delimiters-depth-1-face)) 4063 4064 (face (rainbow-delimiters-depth-2-face)) 4071 4072 (face (rainbow-delimiters-depth-2-face)) 4081 4082 (face (rainbow-delimiters-depth-2-face)) 4086 4087 (face (rainbow-delimiters-depth-2-face)) 4095 4096 (face (rainbow-delimiters-depth-2-face)) 4100 4101 (face (rainbow-delimiters-depth-2-face)) 4101 4102 (face (rainbow-delimiters-depth-1-face)) 4111 4112 (face (rainbow-delimiters-depth-1-face)) 4112 4113 (face (rainbow-delimiters-depth-1-face)) 4116 4118 (face font-lock-comment-delimiter-face) 4118 4153 (face font-lock-comment-face) 4170 4171 (face (rainbow-delimiters-depth-1-face)) 4173 4174 (face (rainbow-delimiters-depth-1-face)) 4176 4178 (face font-lock-comment-delimiter-face) 4178 4237 (face font-lock-comment-face) 4238 4244 (face font-lock-variable-name-face) 4267 4268 (face (rainbow-delimiters-depth-1-face)) 4283 4284 (face (rainbow-delimiters-depth-1-face)) 4285 4290 (face font-lock-variable-name-face) 4292 4297 (face font-lock-variable-name-face) 4306 4307 (face (rainbow-delimiters-depth-1-face)) 4318 4319 (face (rainbow-delimiters-depth-1-face)) 4327 4328 (face (rainbow-delimiters-depth-1-face)) 4339 4340 (face (rainbow-delimiters-depth-1-face)) 4341 4342 (face font-lock-variable-name-face) 4351 4353 (face font-lock-keyword-face) 4353 4354 (face font-lock-keyword-face) 4366 4368 (face font-lock-keyword-face) 4369 4374 (face font-lock-builtin-face) 4374 4375 (face (rainbow-delimiters-depth-1-face)) 4377 4378 (face (rainbow-delimiters-depth-1-face)) 4384 4394 (face font-lock-variable-name-face) 4410 4411 (face (rainbow-delimiters-depth-1-face)) 4412 4413 (face (rainbow-delimiters-depth-2-face)) 4427 4428 (face (rainbow-delimiters-depth-2-face)) 4428 4429 (face (rainbow-delimiters-depth-1-face)) 4429 4430 (face (rainbow-delimiters-depth-1-face)) 4446 4447 (face (rainbow-delimiters-depth-1-face)) 4452 4453 (face font-lock-variable-name-face) 4470 4471 (face (rainbow-delimiters-depth-1-face)) 4471 4472 (face (rainbow-delimiters-depth-2-face)) 4485 4486 (face (rainbow-delimiters-depth-2-face)) 4494 4495 (face (rainbow-delimiters-depth-1-face)) 4497 4503 (face font-lock-variable-name-face) 4507 4508 (face (rainbow-delimiters-depth-1-face)) 4519 4520 (face (rainbow-delimiters-depth-1-face)) 4542 4545 (face font-lock-keyword-face) 4546 4569 (face font-lock-function-name-face) 4569 4570 (face (rainbow-delimiters-depth-1-face)) 4582 4583 (face (rainbow-delimiters-depth-1-face)) 4589 4596 (face font-lock-variable-name-face) 4606 4607 (face (rainbow-delimiters-depth-1-face)) 4608 4609 (face (rainbow-delimiters-depth-1-face)) 4614 4619 (face font-lock-variable-name-face) 4629 4630 (face (rainbow-delimiters-depth-1-face)) 4631 4632 (face (rainbow-delimiters-depth-1-face)) 4648 4649 (face (rainbow-delimiters-depth-1-face)) 4650 4651 (face (rainbow-delimiters-depth-2-face)) 4658 4659 (face (rainbow-delimiters-depth-2-face)) 4659 4660 (face (rainbow-delimiters-depth-1-face)) 4673 4674 (face (rainbow-delimiters-depth-1-face)) 4683 4684 (face (rainbow-delimiters-depth-2-face)) 4708 4709 (face (rainbow-delimiters-depth-2-face)) 4712 4713 (face (rainbow-delimiters-depth-2-face)) 4720 4721 (face (rainbow-delimiters-depth-2-face)) 4723 4728 (face font-lock-string-face) 4736 4744 (face font-lock-string-face) 4744 4745 (face (rainbow-delimiters-depth-1-face)) 4758 4759 (face (rainbow-delimiters-depth-1-face)) 4777 4778 (face (rainbow-delimiters-depth-2-face)) 4802 4803 (face (rainbow-delimiters-depth-2-face)) 4819 4820 (face (rainbow-delimiters-depth-2-face)) 4827 4828 (face (rainbow-delimiters-depth-2-face)) 4838 4843 (face font-lock-string-face) 4859 4869 (face font-lock-string-face) 4898 4899 (face (rainbow-delimiters-depth-1-face)) 4912 4913 (face (rainbow-delimiters-depth-1-face)) 4913 4914 (face (rainbow-delimiters-depth-2-face)) 4939 4940 (face (rainbow-delimiters-depth-2-face)) 4940 4941 (face (rainbow-delimiters-depth-1-face)) 4956 4957 (face (rainbow-delimiters-depth-1-face)) 4968 4969 (face (rainbow-delimiters-depth-1-face)) 4995 4996 (face (rainbow-delimiters-depth-1-face)) 5016 5017 (face (rainbow-delimiters-depth-1-face)) 5026 5027 (face (rainbow-delimiters-depth-1-face)) 5027 5028 (face (rainbow-delimiters-depth-1-face)) 5031 5033 (face font-lock-comment-delimiter-face) 5033 5040 (face font-lock-comment-face) 5040 5155 (face font-lock-comment-face) 5172 5173 (face (rainbow-delimiters-depth-1-face)) 5175 5176 (face (rainbow-delimiters-depth-1-face)) 5178 5185 (face font-lock-variable-name-face) 5191 5197 (face font-lock-variable-name-face) 5220 5221 (face (rainbow-delimiters-depth-1-face)) 5240 5241 (face (rainbow-delimiters-depth-1-face)) 5242 5249 (face font-lock-variable-name-face) 5251 5258 (face font-lock-variable-name-face) 5267 5268 (face (rainbow-delimiters-depth-1-face)) 5283 5284 (face (rainbow-delimiters-depth-1-face)) 5292 5293 (face (rainbow-delimiters-depth-1-face)) 5307 5308 (face (rainbow-delimiters-depth-1-face)) 5309 5316 (face font-lock-variable-name-face) 5318 5325 (face font-lock-variable-name-face) 5334 5335 (face (rainbow-delimiters-depth-1-face)) 5354 5355 (face (rainbow-delimiters-depth-1-face)) 5363 5364 (face (rainbow-delimiters-depth-1-face)) 5382 5383 (face (rainbow-delimiters-depth-1-face)) 5384 5390 (face font-lock-variable-name-face) 5392 5398 (face font-lock-variable-name-face) 5407 5408 (face (rainbow-delimiters-depth-1-face)) 5423 5424 (face (rainbow-delimiters-depth-1-face)) 5432 5433 (face (rainbow-delimiters-depth-1-face)) 5447 5448 (face (rainbow-delimiters-depth-1-face)) 5451 5453 (face font-lock-comment-delimiter-face) 5453 5502 (face font-lock-comment-face) 5505 5506 (face font-lock-variable-name-face) 5517 5520 (face font-lock-keyword-face) 5532 5534 (face font-lock-keyword-face) 5535 5540 (face font-lock-builtin-face) 5540 5541 (face (rainbow-delimiters-depth-1-face)) 5543 5544 (face (rainbow-delimiters-depth-1-face)) 5550 5560 (face font-lock-variable-name-face) 5576 5577 (face (rainbow-delimiters-depth-1-face)) 5578 5579 (face (rainbow-delimiters-depth-1-face)) 5579 5580 (face (rainbow-delimiters-depth-1-face)) 5596 5597 (face (rainbow-delimiters-depth-1-face)) 5602 5603 (face font-lock-variable-name-face) 5620 5621 (face (rainbow-delimiters-depth-1-face)) 5621 5622 (face (rainbow-delimiters-depth-2-face)) 5635 5636 (face (rainbow-delimiters-depth-2-face)) 5644 5645 (face (rainbow-delimiters-depth-1-face)) 5647 5653 (face font-lock-variable-name-face) 5657 5658 (face (rainbow-delimiters-depth-1-face)) 5672 5673 (face (rainbow-delimiters-depth-1-face)) 5702 5703 (face (rainbow-delimiters-depth-1-face)) 5735 5736 (face (rainbow-delimiters-depth-2-face)) 5751 5752 (face (rainbow-delimiters-depth-2-face)) 5752 5753 (face (rainbow-delimiters-depth-1-face)) 5756 5758 (face font-lock-comment-delimiter-face) 5758 5855 (face font-lock-comment-face) 5858 5870 (face font-lock-variable-name-face) 5880 5881 (face (rainbow-delimiters-depth-1-face)) 5893 5894 (face (rainbow-delimiters-depth-2-face)) 5899 5900 (face (rainbow-delimiters-depth-2-face)) 5905 5906 (face (rainbow-delimiters-depth-1-face)) 5908 5910 (face font-lock-comment-delimiter-face) 5910 5964 (face font-lock-comment-face) 5971 5972 (face (rainbow-delimiters-depth-1-face)) 6004 6005 (face (rainbow-delimiters-depth-2-face)) 6026 6027 (face (rainbow-delimiters-depth-2-face)) 6027 6028 (face (rainbow-delimiters-depth-1-face)) 6047 6048 (face (rainbow-delimiters-depth-1-face)) 6050 6051 (face (rainbow-delimiters-depth-1-face)) 6070 6071 (face (rainbow-delimiters-depth-1-face)) 6073 6074 (face (rainbow-delimiters-depth-1-face)) 6076 6081 (face font-lock-variable-name-face) 6107 6108 (face (rainbow-delimiters-depth-1-face)) 6113 6114 (face (rainbow-delimiters-depth-2-face)) 6134 6135 (face (rainbow-delimiters-depth-3-face)) 6147 6148 (face (rainbow-delimiters-depth-4-face)) 6153 6154 (face (rainbow-delimiters-depth-4-face)) 6154 6155 (face (rainbow-delimiters-depth-3-face)) 6175 6176 (face (rainbow-delimiters-depth-3-face)) 6178 6179 (face (rainbow-delimiters-depth-3-face)) 6179 6180 (face (rainbow-delimiters-depth-2-face)) 6181 6182 (face (rainbow-delimiters-depth-1-face)) 6190 6197 (face font-lock-builtin-face) 6197 6198 (face (rainbow-delimiters-depth-1-face)) 6203 6208 (face font-lock-string-face) 6220 6226 (face font-lock-string-face) 6226 6227 (face (rainbow-delimiters-depth-1-face)) 6228 6235 (face font-lock-variable-name-face) 6247 6248 (face (rainbow-delimiters-depth-1-face)) 6293 6294 (face (rainbow-delimiters-depth-2-face)) 6310 6311 (face (rainbow-delimiters-depth-2-face)) 6311 6312 (face (rainbow-delimiters-depth-1-face)) 6315 6317 (face font-lock-comment-delimiter-face) 6317 6346 (face font-lock-comment-face) 6346 6383 (face font-lock-comment-face) 6400 6401 (face (rainbow-delimiters-depth-1-face)) 6403 6404 (face (rainbow-delimiters-depth-1-face)) 6423 6424 (face (rainbow-delimiters-depth-1-face)) 6426 6427 (face (rainbow-delimiters-depth-1-face)) 6429 6434 (face font-lock-variable-name-face) 6460 6461 (face (rainbow-delimiters-depth-1-face)) 6466 6467 (face (rainbow-delimiters-depth-2-face)) 6498 6499 (face (rainbow-delimiters-depth-3-face)) 6520 6524 (face font-lock-constant-face) 6538 6539 (face (rainbow-delimiters-depth-4-face)) 6539 6543 (face font-lock-constant-face) 6546 6547 (face (rainbow-delimiters-depth-4-face)) 6547 6548 (face (rainbow-delimiters-depth-3-face)) 6580 6581 (face (rainbow-delimiters-depth-3-face)) 6583 6584 (face (rainbow-delimiters-depth-3-face)) 6612 6613 (face (rainbow-delimiters-depth-3-face)) 6615 6616 (face (rainbow-delimiters-depth-3-face)) 6622 6623 (face (rainbow-delimiters-depth-2-face)) 6624 6625 (face (rainbow-delimiters-depth-1-face)) 6633 6640 (face font-lock-builtin-face) 6640 6641 (face (rainbow-delimiters-depth-1-face)) 6646 6651 (face font-lock-string-face) 6663 6669 (face font-lock-string-face) 6669 6670 (face (rainbow-delimiters-depth-1-face)) 6671 6678 (face font-lock-variable-name-face) 6690 6691 (face (rainbow-delimiters-depth-1-face)) 6736 6737 (face (rainbow-delimiters-depth-2-face)) 6753 6754 (face (rainbow-delimiters-depth-2-face)) 6754 6755 (face (rainbow-delimiters-depth-1-face)) 6774 6775 (face (rainbow-delimiters-depth-1-face)) 6777 6778 (face (rainbow-delimiters-depth-1-face)) 6780 6786 (face font-lock-variable-name-face) 6809 6810 (face (rainbow-delimiters-depth-1-face)) 6820 6821 (face (rainbow-delimiters-depth-1-face)) 6822 6827 (face font-lock-variable-name-face) 6829 6834 (face font-lock-variable-name-face) 6843 6844 (face (rainbow-delimiters-depth-1-face)) 6853 6854 (face (rainbow-delimiters-depth-1-face)) 6862 6863 (face (rainbow-delimiters-depth-1-face)) 6873 6874 (face (rainbow-delimiters-depth-1-face)) 6875 6881 (face font-lock-variable-name-face) 6897 6898 (face (rainbow-delimiters-depth-1-face)) 6903 6904 (face (rainbow-delimiters-depth-1-face)) 6904 6905 (face (rainbow-delimiters-depth-1-face)) 6920 6921 (face (rainbow-delimiters-depth-1-face)) 6949 6950 (face (rainbow-delimiters-depth-1-face)) 6970 6971 (face (rainbow-delimiters-depth-1-face)) 6980 6981 (face (rainbow-delimiters-depth-1-face)) 6981 6982 (face (rainbow-delimiters-depth-1-face)) 6985 6987 (face font-lock-comment-delimiter-face) 6987 7365 (face font-lock-comment-face) 7365 7433 (face font-lock-comment-face) 7450 7451 (face (rainbow-delimiters-depth-1-face)) 7453 7454 (face (rainbow-delimiters-depth-1-face)) 7456 7463 (face font-lock-variable-name-face) 7469 7475 (face font-lock-variable-name-face) 7498 7499 (face (rainbow-delimiters-depth-1-face)) 7518 7519 (face (rainbow-delimiters-depth-1-face)) 7520 7527 (face font-lock-variable-name-face) 7536 7537 (face (rainbow-delimiters-depth-1-face)) 7552 7553 (face (rainbow-delimiters-depth-1-face)) 7554 7561 (face font-lock-variable-name-face) 7570 7571 (face (rainbow-delimiters-depth-1-face)) 7590 7591 (face (rainbow-delimiters-depth-1-face)) 7592 7598 (face font-lock-variable-name-face) 7607 7608 (face (rainbow-delimiters-depth-1-face)) 7623 7624 (face (rainbow-delimiters-depth-1-face)) 7625 7626 (face font-lock-variable-name-face) 7637 7638 (face (rainbow-delimiters-depth-1-face)) 7638 7639 (face (rainbow-delimiters-depth-2-face)) 7657 7658 (face (rainbow-delimiters-depth-2-face)) 7658 7659 (face (rainbow-delimiters-depth-1-face)) 7660 7663 (face font-lock-keyword-face) 7675 7677 (face font-lock-keyword-face) 7678 7683 (face font-lock-builtin-face) 7683 7684 (face (rainbow-delimiters-depth-1-face)) 7693 7694 (face (rainbow-delimiters-depth-1-face)) 7700 7701 (face font-lock-variable-name-face) 7701 7702 (face (rainbow-delimiters-depth-1-face)) 7721 7722 (face (rainbow-delimiters-depth-1-face)) 7731 7732 (face (rainbow-delimiters-depth-1-face)) 7773 7774 (face (rainbow-delimiters-depth-1-face)) 7775 7782 (face font-lock-variable-name-face) 7786 7787 (face (rainbow-delimiters-depth-1-face)) 7792 7793 (face (rainbow-delimiters-depth-1-face)) 7794 7801 (face font-lock-variable-name-face) 7805 7806 (face (rainbow-delimiters-depth-1-face)) 7815 7816 (face (rainbow-delimiters-depth-1-face)) 7817 7823 (face font-lock-variable-name-face) 7827 7828 (face (rainbow-delimiters-depth-1-face)) 7833 7834 (face (rainbow-delimiters-depth-1-face)) 7886 7887 (face (rainbow-delimiters-depth-1-face)) 7889 7890 (face (rainbow-delimiters-depth-1-face)) 7909 7910 (face (rainbow-delimiters-depth-1-face)) 7912 7913 (face (rainbow-delimiters-depth-1-face)) 7915 7920 (face font-lock-variable-name-face) 7946 7947 (face (rainbow-delimiters-depth-1-face)) 7952 7953 (face (rainbow-delimiters-depth-2-face)) 7984 7985 (face (rainbow-delimiters-depth-3-face)) 8006 8010 (face font-lock-constant-face) 8024 8025 (face (rainbow-delimiters-depth-4-face)) 8025 8029 (face font-lock-constant-face) 8032 8033 (face (rainbow-delimiters-depth-4-face)) 8033 8034 (face (rainbow-delimiters-depth-3-face)) 8066 8067 (face (rainbow-delimiters-depth-3-face)) 8088 8092 (face font-lock-constant-face) 8092 8093 (face (rainbow-delimiters-depth-3-face)) 8131 8132 (face (rainbow-delimiters-depth-3-face)) 8150 8151 (face (rainbow-delimiters-depth-4-face)) 8153 8154 (face (rainbow-delimiters-depth-4-face)) 8154 8155 (face (rainbow-delimiters-depth-3-face)) 8161 8162 (face (rainbow-delimiters-depth-2-face)) 8163 8164 (face (rainbow-delimiters-depth-1-face)) 8167 8170 (face font-lock-keyword-face) 8171 8189 (face font-lock-function-name-face) 8189 8190 (face (rainbow-delimiters-depth-1-face)) 8204 8205 (face (rainbow-delimiters-depth-1-face)) 8211 8217 (face font-lock-keyword-face) 8250 8251 (face (rainbow-delimiters-depth-1-face)) 8257 8258 (face (rainbow-delimiters-depth-2-face)) 8263 8264 (face (rainbow-delimiters-depth-2-face)) 8272 8273 (face (rainbow-delimiters-depth-2-face)) 8278 8279 (face (rainbow-delimiters-depth-2-face)) 8279 8280 (face (rainbow-delimiters-depth-1-face)) 8289 8296 (face font-lock-builtin-face) 8296 8297 (face (rainbow-delimiters-depth-1-face)) 8307 8312 (face font-lock-string-face) 8349 8350 (face (rainbow-delimiters-depth-2-face)) 8368 8369 (face (rainbow-delimiters-depth-2-face)) 8383 8384 (face (rainbow-delimiters-depth-2-face)) 8402 8403 (face (rainbow-delimiters-depth-2-face)) 8405 8406 (face (rainbow-delimiters-depth-1-face)) 8407 8414 (face font-lock-variable-name-face) 8426 8427 (face (rainbow-delimiters-depth-1-face)) 8472 8473 (face (rainbow-delimiters-depth-2-face)) 8489 8490 (face (rainbow-delimiters-depth-2-face)) 8490 8491 (face (rainbow-delimiters-depth-1-face)) 8510 8511 (face (rainbow-delimiters-depth-1-face)) 8513 8514 (face (rainbow-delimiters-depth-1-face)) 8516 8522 (face font-lock-variable-name-face) 8545 8546 (face (rainbow-delimiters-depth-1-face)) 8556 8557 (face (rainbow-delimiters-depth-1-face)) 8558 8563 (face font-lock-variable-name-face) 8565 8570 (face font-lock-variable-name-face) 8579 8580 (face (rainbow-delimiters-depth-1-face)) 8589 8590 (face (rainbow-delimiters-depth-1-face)) 8598 8599 (face (rainbow-delimiters-depth-1-face)) 8608 8609 (face (rainbow-delimiters-depth-1-face)) 8610 8616 (face font-lock-variable-name-face) 8632 8633 (face (rainbow-delimiters-depth-1-face)) 8638 8639 (face (rainbow-delimiters-depth-1-face)) 8639 8640 (face (rainbow-delimiters-depth-1-face)) 8645 8646 (face (rainbow-delimiters-depth-1-face)) 8646 8647 (face (rainbow-delimiters-depth-1-face)) 8662 8663 (face (rainbow-delimiters-depth-1-face)) 8691 8692 (face (rainbow-delimiters-depth-1-face)) 8712 8713 (face (rainbow-delimiters-depth-1-face)) 8722 8723 (face (rainbow-delimiters-depth-1-face)) 8723 8724 (face (rainbow-delimiters-depth-1-face)) 8727 8729 (face font-lock-comment-delimiter-face) 8729 8756 (face font-lock-comment-face) 8773 8774 (face (rainbow-delimiters-depth-1-face)) 8776 8777 (face (rainbow-delimiters-depth-1-face)) 8796 8797 (face (rainbow-delimiters-depth-1-face)) 8799 8800 (face (rainbow-delimiters-depth-1-face)) 8802 8807 (face font-lock-variable-name-face) 8833 8834 (face (rainbow-delimiters-depth-1-face)) 8839 8840 (face (rainbow-delimiters-depth-2-face)) 8871 8872 (face (rainbow-delimiters-depth-3-face)) 8893 8897 (face font-lock-constant-face) 8911 8912 (face (rainbow-delimiters-depth-4-face)) 8912 8916 (face font-lock-constant-face) 8919 8920 (face (rainbow-delimiters-depth-4-face)) 8920 8921 (face (rainbow-delimiters-depth-3-face)) 8962 8963 (face (rainbow-delimiters-depth-3-face)) 8963 8964 (face (rainbow-delimiters-depth-3-face)) 8996 8997 (face (rainbow-delimiters-depth-3-face)) 9018 9022 (face font-lock-constant-face) 9022 9023 (face (rainbow-delimiters-depth-3-face)) 9064 9065 (face (rainbow-delimiters-depth-3-face)) 9065 9066 (face (rainbow-delimiters-depth-3-face)) 9104 9105 (face (rainbow-delimiters-depth-3-face)) 9123 9124 (face (rainbow-delimiters-depth-4-face)) 9126 9127 (face (rainbow-delimiters-depth-4-face)) 9127 9128 (face (rainbow-delimiters-depth-3-face)) 9134 9135 (face (rainbow-delimiters-depth-2-face)) 9136 9137 (face (rainbow-delimiters-depth-1-face)) 9145 9152 (face font-lock-builtin-face) 9152 9153 (face (rainbow-delimiters-depth-1-face)) 9158 9163 (face font-lock-string-face) 9175 9181 (face font-lock-string-face) 9191 9192 (face (rainbow-delimiters-depth-2-face)) 9210 9211 (face (rainbow-delimiters-depth-2-face)) 9211 9212 (face (rainbow-delimiters-depth-1-face)) 9213 9220 (face font-lock-variable-name-face) 9232 9233 (face (rainbow-delimiters-depth-1-face)) 9278 9279 (face (rainbow-delimiters-depth-2-face)) 9295 9296 (face (rainbow-delimiters-depth-2-face)) 9296 9297 (face (rainbow-delimiters-depth-1-face)) 9300 9302 (face font-lock-comment-delimiter-face) 9302 9330 (face font-lock-comment-face) 9333 9337 (face font-lock-keyword-face) 9362 9368 (face font-lock-keyword-face) 9392 9397 (face font-lock-keyword-face) 9398 9413 (face font-lock-type-face) 9413 9414 (face (rainbow-delimiters-depth-1-face)) 9432 9433 (face (rainbow-delimiters-depth-1-face)) 9439 9442 (face font-lock-keyword-face) 9443 9451 (face font-lock-function-name-face) 9451 9452 (face (rainbow-delimiters-depth-1-face)) 9452 9456 (face font-lock-keyword-face) 9476 9482 (face font-lock-string-face) 9492 9493 (face (rainbow-delimiters-depth-1-face)) 9503 9508 (face font-lock-builtin-face) 9508 9509 (face (rainbow-delimiters-depth-1-face)) 9509 9510 (face (rainbow-delimiters-depth-1-face)) 9519 9520 (face (rainbow-delimiters-depth-1-face)) 9528 9529 (face (rainbow-delimiters-depth-1-face)) 9538 9542 (face font-lock-keyword-face) 9570 9574 (face font-lock-keyword-face) 9603 9607 (face font-lock-keyword-face) 9652 9653 (face (rainbow-delimiters-depth-1-face)) 9671 9675 (face font-lock-constant-face) 9675 9676 (face (rainbow-delimiters-depth-1-face)) 9685 9689 (face font-lock-keyword-face) 9721 9722 (face (rainbow-delimiters-depth-1-face)) 9722 9723 (face (rainbow-delimiters-depth-1-face)) 9732 9736 (face font-lock-keyword-face) 9771 9772 (face (rainbow-delimiters-depth-1-face)) 9782 9783 (face (rainbow-delimiters-depth-1-face)) 9789 9792 (face font-lock-keyword-face) 9793 9810 (face font-lock-function-name-face) 9810 9811 (face (rainbow-delimiters-depth-1-face)) 9811 9815 (face font-lock-keyword-face) 9824 9828 (face font-lock-constant-face) 9841 9845 (face font-lock-constant-face) 9853 9857 (face font-lock-constant-face) 9857 9858 (face (rainbow-delimiters-depth-1-face)) 9868 9870 (face font-lock-keyword-face) 9878 9880 (face font-lock-keyword-face) 9881 9884 (face font-lock-keyword-face) 9885 9889 (face font-lock-constant-face) 9903 9913 (face font-lock-variable-name-face) 9924 9925 (face (rainbow-delimiters-depth-1-face)) 9931 9932 (face (rainbow-delimiters-depth-1-face)) 9932 9933 (face (rainbow-delimiters-depth-1-face)) 9934 9935 (face (rainbow-delimiters-depth-1-face)) 9948 9953 (face font-lock-variable-name-face) 9977 9983 (face font-lock-keyword-face) 9984 9985 (face (rainbow-delimiters-depth-1-face)) 9993 9994 (face (rainbow-delimiters-depth-2-face)) 9994 9995 (face (rainbow-delimiters-depth-3-face)) 10007 10011 (face font-lock-keyword-face) 10022 10023 (face (rainbow-delimiters-depth-3-face)) 10036 10037 (face (rainbow-delimiters-depth-2-face)) 10037 10038 (face (rainbow-delimiters-depth-1-face)) 10044 10047 (face font-lock-keyword-face) 10048 10052 (face font-lock-function-name-face) 10052 10053 (face (rainbow-delimiters-depth-1-face)) 10053 10057 (face font-lock-keyword-face) 10073 10074 (face (rainbow-delimiters-depth-1-face)) 10084 10091 (face font-lock-variable-name-face) 10093 10103 (face font-lock-variable-name-face) 10106 10110 (face font-lock-keyword-face) 10126 10127 (face (rainbow-delimiters-depth-1-face)) 10141 10142 (face (rainbow-delimiters-depth-1-face)) 10151 10163 (face font-lock-variable-name-face) 10166 10170 (face font-lock-keyword-face) 10181 10182 (face (rainbow-delimiters-depth-1-face)) 10182 10186 (face font-lock-keyword-face) 10197 10198 (face (rainbow-delimiters-depth-2-face)) 10205 10206 (face (rainbow-delimiters-depth-2-face)) 10206 10207 (face (rainbow-delimiters-depth-1-face)) 10216 10222 (face font-lock-keyword-face) 10237 10238 (face (rainbow-delimiters-depth-1-face)) 10250 10251 (face (rainbow-delimiters-depth-1-face)) 10270 10271 (face (rainbow-delimiters-depth-1-face)) 10273 10274 (face (rainbow-delimiters-depth-1-face)) 10293 10294 (face (rainbow-delimiters-depth-1-face)) 10296 10297 (face (rainbow-delimiters-depth-1-face)) 10299 10304 (face font-lock-variable-name-face) 10330 10331 (face (rainbow-delimiters-depth-1-face)) 10336 10337 (face (rainbow-delimiters-depth-2-face)) 10362 10363 (face (rainbow-delimiters-depth-3-face)) 10391 10392 (face (rainbow-delimiters-depth-4-face)) 10394 10395 (face (rainbow-delimiters-depth-4-face)) 10414 10418 (face font-lock-constant-face) 10432 10433 (face (rainbow-delimiters-depth-4-face)) 10433 10437 (face font-lock-constant-face) 10440 10441 (face (rainbow-delimiters-depth-4-face)) 10450 10451 (face (rainbow-delimiters-depth-3-face)) 10477 10478 (face (rainbow-delimiters-depth-3-face)) 10493 10494 (face (rainbow-delimiters-depth-4-face)) 10496 10497 (face (rainbow-delimiters-depth-4-face)) 10516 10520 (face font-lock-constant-face) 10520 10521 (face (rainbow-delimiters-depth-3-face)) 10559 10560 (face (rainbow-delimiters-depth-3-face)) 10578 10579 (face (rainbow-delimiters-depth-4-face)) 10581 10582 (face (rainbow-delimiters-depth-4-face)) 10582 10583 (face (rainbow-delimiters-depth-3-face)) 10589 10590 (face (rainbow-delimiters-depth-2-face)) 10591 10592 (face (rainbow-delimiters-depth-1-face)) 10600 10607 (face font-lock-builtin-face) 10607 10608 (face (rainbow-delimiters-depth-1-face)) 10613 10618 (face font-lock-string-face) 10630 10636 (face font-lock-string-face) 10646 10647 (face (rainbow-delimiters-depth-2-face)) 10665 10666 (face (rainbow-delimiters-depth-2-face)) 10666 10667 (face (rainbow-delimiters-depth-1-face)) 10668 10675 (face font-lock-variable-name-face) 10687 10688 (face (rainbow-delimiters-depth-1-face)) 10733 10734 (face (rainbow-delimiters-depth-2-face)) 10750 10751 (face (rainbow-delimiters-depth-2-face)) 10751 10752 (face (rainbow-delimiters-depth-1-face)) 10755 10757 (face font-lock-comment-delimiter-face) 10757 10775 (face font-lock-comment-face) 10775 10787 (face font-lock-comment-face) 10790 10795 (face font-lock-keyword-face) 10796 10801 (face font-lock-type-face) 10801 10802 (face (rainbow-delimiters-depth-1-face)) 10820 10821 (face (rainbow-delimiters-depth-1-face)) 10827 10830 (face font-lock-keyword-face) 10831 10839 (face font-lock-function-name-face) 10839 10840 (face (rainbow-delimiters-depth-1-face)) 10840 10844 (face font-lock-keyword-face) 10869 10874 (face font-lock-constant-face) 10884 10885 (face (rainbow-delimiters-depth-1-face)) 10895 10900 (face font-lock-builtin-face) 10900 10901 (face (rainbow-delimiters-depth-1-face)) 10901 10902 (face (rainbow-delimiters-depth-1-face)) 10911 10912 (face (rainbow-delimiters-depth-1-face)) 10920 10921 (face (rainbow-delimiters-depth-1-face)) 10930 10934 (face font-lock-keyword-face) 10955 10959 (face font-lock-keyword-face) 11004 11008 (face font-lock-keyword-face) 11029 11036 (face font-lock-builtin-face) 11036 11037 (face (rainbow-delimiters-depth-1-face)) 11050 11054 (face font-lock-keyword-face) 11061 11080 (face font-lock-string-face) 11082 11086 (face font-lock-keyword-face) 11118 11119 (face (rainbow-delimiters-depth-1-face)) 11125 11128 (face font-lock-keyword-face) 11129 11151 (face font-lock-function-name-face) 11151 11152 (face (rainbow-delimiters-depth-1-face)) 11152 11156 (face font-lock-keyword-face) 11164 11165 (face (rainbow-delimiters-depth-1-face)) 11175 11185 (face font-lock-variable-name-face) 11196 11197 (face (rainbow-delimiters-depth-1-face)) 11203 11204 (face (rainbow-delimiters-depth-1-face)) 11204 11205 (face (rainbow-delimiters-depth-1-face)) 11206 11207 (face (rainbow-delimiters-depth-1-face)) 11216 11222 (face font-lock-keyword-face) 11223 11224 (face (rainbow-delimiters-depth-1-face)) 11232 11233 (face (rainbow-delimiters-depth-2-face)) 11233 11234 (face (rainbow-delimiters-depth-3-face)) 11246 11250 (face font-lock-keyword-face) 11266 11267 (face (rainbow-delimiters-depth-3-face)) 11287 11288 (face (rainbow-delimiters-depth-2-face)) 11288 11289 (face (rainbow-delimiters-depth-1-face)) 11295 11307 (face font-lock-type-face) 11312 11315 (face font-lock-keyword-face) 11316 11320 (face font-lock-function-name-face) 11320 11321 (face (rainbow-delimiters-depth-1-face)) 11321 11325 (face font-lock-keyword-face) 11333 11334 (face (rainbow-delimiters-depth-1-face)) 11344 11350 (face font-lock-variable-name-face) 11353 11357 (face font-lock-keyword-face) 11375 11376 (face (rainbow-delimiters-depth-1-face)) 11382 11383 (face (rainbow-delimiters-depth-1-face)) 11392 11397 (face font-lock-variable-name-face) 11408 11409 (face (rainbow-delimiters-depth-1-face)) 11415 11416 (face (rainbow-delimiters-depth-1-face)) 11425 11435 (face font-lock-variable-name-face) 11443 11444 (face (rainbow-delimiters-depth-1-face)) 11445 11446 (face (rainbow-delimiters-depth-1-face)) 11455 11462 (face font-lock-variable-name-face) 11470 11471 (face (rainbow-delimiters-depth-1-face)) 11472 11473 (face (rainbow-delimiters-depth-1-face)) 11482 11491 (face font-lock-variable-name-face) 11508 11509 (face (rainbow-delimiters-depth-1-face)) 11541 11542 (face (rainbow-delimiters-depth-2-face)) 11550 11552 (face font-lock-keyword-face) 11553 11557 (face font-lock-keyword-face) 11575 11579 (face font-lock-keyword-face) 11581 11582 (face (rainbow-delimiters-depth-2-face)) 11591 11592 (face (rainbow-delimiters-depth-1-face)) 11601 11608 (face font-lock-variable-name-face) 11619 11620 (face (rainbow-delimiters-depth-1-face)) 11639 11640 (face (rainbow-delimiters-depth-2-face)) 11652 11656 (face font-lock-keyword-face) 11673 11674 (face (rainbow-delimiters-depth-2-face)) 11703 11704 (face (rainbow-delimiters-depth-1-face)) 11713 11716 (face font-lock-keyword-face) 11722 11724 (face font-lock-keyword-face) 11728 11733 (face font-lock-builtin-face) 11733 11734 (face (rainbow-delimiters-depth-1-face)) 11741 11742 (face (rainbow-delimiters-depth-1-face)) 11756 11763 (face font-lock-variable-name-face) 11765 11771 (face font-lock-variable-name-face) 11774 11778 (face font-lock-keyword-face) 11783 11784 (face (rainbow-delimiters-depth-1-face)) 11790 11791 (face (rainbow-delimiters-depth-2-face)) 11798 11799 (face (rainbow-delimiters-depth-2-face)) 11807 11808 (face (rainbow-delimiters-depth-1-face)) 11821 11823 (face font-lock-keyword-face) 11824 11828 (face font-lock-keyword-face) 11863 11872 (face font-lock-variable-name-face) 11890 11891 (face (rainbow-delimiters-depth-1-face)) 11904 11905 (face (rainbow-delimiters-depth-1-face)) 11914 11916 (face font-lock-keyword-face) 11917 11921 (face font-lock-keyword-face) 11952 11958 (face font-lock-keyword-face) 11971 11972 (face (rainbow-delimiters-depth-1-face)) 11987 11988 (face (rainbow-delimiters-depth-2-face)) 11988 11989 (face (rainbow-delimiters-depth-2-face)) 11991 11992 (face (rainbow-delimiters-depth-2-face)) 11999 12000 (face (rainbow-delimiters-depth-2-face)) 12000 12001 (face (rainbow-delimiters-depth-1-face)) 12010 12014 (face font-lock-keyword-face) 12028 12034 (face font-lock-keyword-face) 12061 12062 (face (rainbow-delimiters-depth-1-face)) 12064 12065 (face (rainbow-delimiters-depth-1-face)) 12084 12085 (face (rainbow-delimiters-depth-1-face)) 12087 12088 (face (rainbow-delimiters-depth-1-face)) 12090 12095 (face font-lock-variable-name-face) 12121 12122 (face (rainbow-delimiters-depth-1-face)) 12127 12128 (face (rainbow-delimiters-depth-2-face)) 12142 12143 (face (rainbow-delimiters-depth-3-face)) 12158 12159 (face (rainbow-delimiters-depth-4-face)) 12161 12162 (face (rainbow-delimiters-depth-4-face)) 12181 12185 (face font-lock-constant-face) 12199 12200 (face (rainbow-delimiters-depth-4-face)) 12200 12204 (face font-lock-constant-face) 12207 12208 (face (rainbow-delimiters-depth-4-face)) 12208 12209 (face (rainbow-delimiters-depth-3-face)) 12224 12225 (face (rainbow-delimiters-depth-3-face)) 12240 12241 (face (rainbow-delimiters-depth-4-face)) 12243 12244 (face (rainbow-delimiters-depth-4-face)) 12263 12267 (face font-lock-constant-face) 12267 12268 (face (rainbow-delimiters-depth-3-face)) 12306 12307 (face (rainbow-delimiters-depth-3-face)) 12325 12326 (face (rainbow-delimiters-depth-4-face)) 12328 12329 (face (rainbow-delimiters-depth-4-face)) 12329 12330 (face (rainbow-delimiters-depth-3-face)) 12336 12337 (face (rainbow-delimiters-depth-2-face)) 12338 12339 (face (rainbow-delimiters-depth-1-face)) 12347 12354 (face font-lock-builtin-face) 12354 12355 (face (rainbow-delimiters-depth-1-face)) 12360 12365 (face font-lock-string-face) 12377 12383 (face font-lock-string-face) 12393 12394 (face (rainbow-delimiters-depth-2-face)) 12412 12413 (face (rainbow-delimiters-depth-2-face)) 12413 12414 (face (rainbow-delimiters-depth-1-face)) 12415 12422 (face font-lock-variable-name-face) 12434 12435 (face (rainbow-delimiters-depth-1-face)) 12480 12481 (face (rainbow-delimiters-depth-2-face)) 12497 12498 (face (rainbow-delimiters-depth-2-face)) 12498 12499 (face (rainbow-delimiters-depth-1-face)) 12502 12504 (face font-lock-comment-delimiter-face) 12504 12512 (face font-lock-comment-face) 12529 12530 (face (rainbow-delimiters-depth-1-face)) 12532 12533 (face (rainbow-delimiters-depth-1-face)) 12552 12553 (face (rainbow-delimiters-depth-1-face)) 12555 12556 (face (rainbow-delimiters-depth-1-face)) 12558 12563 (face font-lock-variable-name-face) 12589 12590 (face (rainbow-delimiters-depth-1-face)) 12595 12596 (face (rainbow-delimiters-depth-2-face)) 12622 12623 (face (rainbow-delimiters-depth-3-face)) 12644 12648 (face font-lock-constant-face) 12662 12663 (face (rainbow-delimiters-depth-4-face)) 12663 12667 (face font-lock-constant-face) 12670 12671 (face (rainbow-delimiters-depth-4-face)) 12671 12672 (face (rainbow-delimiters-depth-3-face)) 12699 12700 (face (rainbow-delimiters-depth-3-face)) 12721 12725 (face font-lock-constant-face) 12725 12726 (face (rainbow-delimiters-depth-3-face)) 12764 12765 (face (rainbow-delimiters-depth-3-face)) 12783 12784 (face (rainbow-delimiters-depth-4-face)) 12786 12787 (face (rainbow-delimiters-depth-4-face)) 12787 12788 (face (rainbow-delimiters-depth-3-face)) 12794 12795 (face (rainbow-delimiters-depth-2-face)) 12796 12797 (face (rainbow-delimiters-depth-1-face)) 12805 12812 (face font-lock-builtin-face) 12812 12813 (face (rainbow-delimiters-depth-1-face)) 12818 12823 (face font-lock-string-face) 12835 12841 (face font-lock-string-face) 12851 12852 (face (rainbow-delimiters-depth-2-face)) 12870 12871 (face (rainbow-delimiters-depth-2-face)) 12871 12872 (face (rainbow-delimiters-depth-1-face)) 12873 12880 (face font-lock-variable-name-face) 12892 12893 (face (rainbow-delimiters-depth-1-face)) 12938 12939 (face (rainbow-delimiters-depth-2-face)) 12955 12956 (face (rainbow-delimiters-depth-2-face)) 12956 12957 (face (rainbow-delimiters-depth-1-face)) 12976 12977 (face (rainbow-delimiters-depth-1-face)) 12993 12994 (face (rainbow-delimiters-depth-1-face)) 13019 13020 (face (rainbow-delimiters-depth-1-face)) 13035 13036 (face (rainbow-delimiters-depth-2-face)) 13036 13037 (face font-lock-string-face) 13037 13042 (face font-lock-string-face) 13042 13043 (face (rainbow-delimiters-depth-2-face)) 13060 13061 (face (rainbow-delimiters-depth-2-face)) 13061 13071 (face font-lock-string-face) 13071 13072 (face (rainbow-delimiters-depth-2-face)) 13072 13073 (face (rainbow-delimiters-depth-1-face)) 13082 13083 (face (rainbow-delimiters-depth-1-face)) 13083 13084 (face (rainbow-delimiters-depth-1-face)) 13103 13104 (face (rainbow-delimiters-depth-1-face)) 13106 13107 (face (rainbow-delimiters-depth-1-face)) 13109 13115 (face font-lock-variable-name-face) 13138 13139 (face (rainbow-delimiters-depth-1-face)) 13149 13150 (face (rainbow-delimiters-depth-1-face)) 13151 13156 (face font-lock-variable-name-face) 13158 13163 (face font-lock-variable-name-face) 13172 13173 (face (rainbow-delimiters-depth-1-face)) 13182 13183 (face (rainbow-delimiters-depth-1-face)) 13191 13192 (face (rainbow-delimiters-depth-1-face)) 13201 13202 (face (rainbow-delimiters-depth-1-face)) 13203 13209 (face font-lock-variable-name-face) 13225 13226 (face (rainbow-delimiters-depth-1-face)) 13231 13232 (face (rainbow-delimiters-depth-1-face)) 13232 13233 (face (rainbow-delimiters-depth-1-face)) 13238 13239 (face (rainbow-delimiters-depth-1-face)) 13239 13240 (face (rainbow-delimiters-depth-1-face)) 13255 13256 (face (rainbow-delimiters-depth-1-face)) 13284 13285 (face (rainbow-delimiters-depth-1-face)) 13305 13306 (face (rainbow-delimiters-depth-1-face)) 13315 13316 (face (rainbow-delimiters-depth-1-face)) 13316 13317 (face (rainbow-delimiters-depth-1-face)) 13320 13322 (face font-lock-comment-delimiter-face) 13322 13329 (face font-lock-comment-face) 13346 13347 (face (rainbow-delimiters-depth-1-face)) 13349 13350 (face (rainbow-delimiters-depth-1-face)) 13369 13370 (face (rainbow-delimiters-depth-1-face)) 13372 13373 (face (rainbow-delimiters-depth-1-face)) 13375 13380 (face font-lock-variable-name-face) 13406 13407 (face (rainbow-delimiters-depth-1-face)) 13412 13413 (face (rainbow-delimiters-depth-2-face)) 13438 13439 (face (rainbow-delimiters-depth-3-face)) 13460 13464 (face font-lock-constant-face) 13478 13479 (face (rainbow-delimiters-depth-4-face)) 13479 13483 (face font-lock-constant-face) 13486 13487 (face (rainbow-delimiters-depth-4-face)) 13487 13488 (face (rainbow-delimiters-depth-3-face)) 13514 13515 (face (rainbow-delimiters-depth-3-face)) 13536 13540 (face font-lock-constant-face) 13540 13541 (face (rainbow-delimiters-depth-3-face)) 13579 13580 (face (rainbow-delimiters-depth-3-face)) 13598 13599 (face (rainbow-delimiters-depth-4-face)) 13601 13602 (face (rainbow-delimiters-depth-4-face)) 13602 13603 (face (rainbow-delimiters-depth-3-face)) 13609 13610 (face (rainbow-delimiters-depth-2-face)) 13611 13612 (face (rainbow-delimiters-depth-1-face)) 13620 13627 (face font-lock-builtin-face) 13627 13628 (face (rainbow-delimiters-depth-1-face)) 13633 13638 (face font-lock-string-face) 13650 13656 (face font-lock-string-face) 13666 13667 (face (rainbow-delimiters-depth-2-face)) 13685 13686 (face (rainbow-delimiters-depth-2-face)) 13686 13687 (face (rainbow-delimiters-depth-1-face)) 13688 13695 (face font-lock-variable-name-face) 13707 13708 (face (rainbow-delimiters-depth-1-face)) 13753 13754 (face (rainbow-delimiters-depth-2-face)) 13770 13771 (face (rainbow-delimiters-depth-2-face)) 13771 13772 (face (rainbow-delimiters-depth-1-face)) 13791 13792 (face (rainbow-delimiters-depth-1-face)) 13808 13809 (face (rainbow-delimiters-depth-1-face)) 13834 13835 (face (rainbow-delimiters-depth-1-face)) 13850 13851 (face (rainbow-delimiters-depth-2-face)) 13851 13857 (face font-lock-string-face) 13857 13858 (face (rainbow-delimiters-depth-2-face)) 13875 13876 (face (rainbow-delimiters-depth-2-face)) 13876 13886 (face font-lock-string-face) 13886 13887 (face (rainbow-delimiters-depth-2-face)) 13887 13888 (face (rainbow-delimiters-depth-1-face)) 13897 13898 (face (rainbow-delimiters-depth-1-face)) 13898 13899 (face (rainbow-delimiters-depth-1-face)) 13918 13919 (face (rainbow-delimiters-depth-1-face)) 13921 13922 (face (rainbow-delimiters-depth-1-face)) 13924 13930 (face font-lock-variable-name-face) 13953 13954 (face (rainbow-delimiters-depth-1-face)) 13964 13965 (face (rainbow-delimiters-depth-1-face)) 13966 13971 (face font-lock-variable-name-face) 13973 13978 (face font-lock-variable-name-face) 13987 13988 (face (rainbow-delimiters-depth-1-face)) 13997 13998 (face (rainbow-delimiters-depth-1-face)) 14006 14007 (face (rainbow-delimiters-depth-1-face)) 14016 14017 (face (rainbow-delimiters-depth-1-face)) 14018 14024 (face font-lock-variable-name-face) 14040 14041 (face (rainbow-delimiters-depth-1-face)) 14046 14047 (face (rainbow-delimiters-depth-1-face)) 14047 14048 (face (rainbow-delimiters-depth-1-face)) 14053 14054 (face (rainbow-delimiters-depth-1-face)) 14054 14055 (face (rainbow-delimiters-depth-1-face)) 14070 14071 (face (rainbow-delimiters-depth-1-face)) 14099 14100 (face (rainbow-delimiters-depth-1-face)) 14120 14121 (face (rainbow-delimiters-depth-1-face)) 14130 14131 (face (rainbow-delimiters-depth-1-face)) 14131 14132 (face (rainbow-delimiters-depth-1-face)) 14135 14137 (face font-lock-comment-delimiter-face) 14137 14204 (face font-lock-comment-face) 14205 14207 (face font-lock-comment-delimiter-face) 14207 14211 (face font-lock-comment-face) 14211 14213 (face font-lock-comment-delimiter-face) 14213 14245 (face font-lock-comment-face) 14245 14256 (face font-lock-comment-face) 14256 14272 (face font-lock-comment-face) 14272 14273 (face font-lock-comment-delimiter-face) 14273 14274 (face font-lock-comment-face) 14274 14290 (face font-lock-comment-delimiter-face) 14290 14292 (face font-lock-comment-face) 14292 14347 (face font-lock-comment-face) 14347 14357 (face font-lock-comment-delimiter-face) 14357 14392 (face font-lock-comment-face) 14392 14414 (face font-lock-comment-face) 14414 14418 (face font-lock-comment-delimiter-face) 14418 14475 (face font-lock-comment-face) 14475 14477 (face font-lock-comment-delimiter-face) 14477 14547 (face font-lock-comment-face) 14547 14549 (face font-lock-comment-delimiter-face) 14549 14619 (face font-lock-comment-face) 14619 14623 (face font-lock-comment-delimiter-face) 14623 14691 (face font-lock-comment-face) 14691 14692 (face font-lock-comment-delimiter-face) 14692 14693 (face font-lock-comment-face) 14693 14695 (face font-lock-comment-delimiter-face) 14695 14703 (face font-lock-comment-face) 14703 14704 (face font-lock-comment-delimiter-face) 14704 14705 (face font-lock-comment-face) 14705 14707 (face font-lock-comment-delimiter-face) 14707 14774 (face font-lock-comment-face) 14774 14776 (face font-lock-comment-delimiter-face) 14776 14843 (face font-lock-comment-face) 14843 14845 (face font-lock-comment-delimiter-face) 14845 14847 (face font-lock-comment-face) 14847 14849 (face font-lock-comment-face) 14866 14867 (face (rainbow-delimiters-depth-1-face)) 14869 14870 (face (rainbow-delimiters-depth-1-face)) 14889 14890 (face (rainbow-delimiters-depth-1-face)) 14892 14893 (face (rainbow-delimiters-depth-1-face)) 14895 14900 (face font-lock-variable-name-face) 14926 14927 (face (rainbow-delimiters-depth-1-face)) 14932 14933 (face (rainbow-delimiters-depth-2-face)) 14961 14962 (face (rainbow-delimiters-depth-3-face)) 15021 15028 (face font-lock-string-face) 15042 15043 (face (rainbow-delimiters-depth-4-face)) 15043 15047 (face font-lock-constant-face) 15050 15051 (face (rainbow-delimiters-depth-4-face)) 15060 15061 (face (rainbow-delimiters-depth-3-face)) 15087 15088 (face (rainbow-delimiters-depth-3-face)) 15109 15113 (face font-lock-constant-face) 15113 15114 (face (rainbow-delimiters-depth-3-face)) 15140 15141 (face (rainbow-delimiters-depth-3-face)) 15162 15166 (face font-lock-constant-face) 15166 15167 (face (rainbow-delimiters-depth-3-face)) 15205 15206 (face (rainbow-delimiters-depth-3-face)) 15224 15225 (face (rainbow-delimiters-depth-4-face)) 15227 15228 (face (rainbow-delimiters-depth-4-face)) 15228 15229 (face (rainbow-delimiters-depth-3-face)) 15235 15236 (face (rainbow-delimiters-depth-2-face)) 15237 15238 (face (rainbow-delimiters-depth-1-face)) 15246 15253 (face font-lock-builtin-face) 15253 15254 (face (rainbow-delimiters-depth-1-face)) 15259 15264 (face font-lock-string-face) 15276 15282 (face font-lock-string-face) 15292 15293 (face (rainbow-delimiters-depth-2-face)) 15311 15312 (face (rainbow-delimiters-depth-2-face)) 15312 15313 (face (rainbow-delimiters-depth-1-face)) 15314 15321 (face font-lock-variable-name-face) 15333 15334 (face (rainbow-delimiters-depth-1-face)) 15355 15356 (face (rainbow-delimiters-depth-2-face)) 15363 15364 (face (rainbow-delimiters-depth-2-face)) 15393 15394 (face (rainbow-delimiters-depth-2-face)) 15410 15411 (face (rainbow-delimiters-depth-3-face)) 15418 15419 (face (rainbow-delimiters-depth-3-face)) 15419 15420 (face (rainbow-delimiters-depth-2-face)) 15421 15422 (face (rainbow-delimiters-depth-1-face)) 15425 15427 (face font-lock-comment-delimiter-face) 15427 15428 (face font-lock-comment-face) 15428 15438 (face font-lock-comment-face) 15439 15441 (face font-lock-comment-delimiter-face) 15441 15445 (face font-lock-comment-face) 15445 15447 (face font-lock-comment-delimiter-face) 15447 15510 (face font-lock-comment-face) 15510 15515 (face font-lock-comment-delimiter-face) 15515 15576 (face font-lock-comment-face) 15576 15583 (face font-lock-comment-delimiter-face) 15583 15637 (face font-lock-comment-face) 15637 15639 (face font-lock-comment-delimiter-face) 15639 15705 (face font-lock-comment-face) 15705 15707 (face font-lock-comment-delimiter-face) 15707 15740 (face font-lock-comment-face) 15740 15774 (face font-lock-comment-face) 15774 15776 (face font-lock-comment-delimiter-face) 15776 15843 (face font-lock-comment-face) 15843 15847 (face font-lock-comment-delimiter-face) 15847 15912 (face font-lock-comment-face) 15912 15914 (face font-lock-comment-delimiter-face) 15914 15918 (face font-lock-comment-face) 15935 15936 (face (rainbow-delimiters-depth-1-face)) 15938 15939 (face (rainbow-delimiters-depth-1-face)) 15958 15959 (face (rainbow-delimiters-depth-1-face)) 15961 15962 (face (rainbow-delimiters-depth-1-face)) 15964 15969 (face font-lock-variable-name-face) 15995 15996 (face (rainbow-delimiters-depth-1-face)) 15996 15997 (face (rainbow-delimiters-depth-1-face)) 16007 16008 (face (rainbow-delimiters-depth-1-face)) 16031 16032 (face (rainbow-delimiters-depth-2-face)) 16044 16045 (face (rainbow-delimiters-depth-3-face)) 16045 16049 (face font-lock-constant-face) 16052 16053 (face (rainbow-delimiters-depth-3-face)) 16053 16054 (face (rainbow-delimiters-depth-2-face)) 16054 16055 (face (rainbow-delimiters-depth-1-face)) 16056 16059 (face font-lock-keyword-face) 16065 16067 (face font-lock-keyword-face) 16068 16069 (face (rainbow-delimiters-depth-1-face)) 16079 16080 (face (rainbow-delimiters-depth-1-face)) 16099 16100 (face (rainbow-delimiters-depth-1-face)) 16128 16129 (face (rainbow-delimiters-depth-2-face)) 16201 16209 (face font-lock-string-face) 16234 16240 (face font-lock-string-face) 16282 16283 (face (rainbow-delimiters-depth-2-face)) 16288 16289 (face (rainbow-delimiters-depth-1-face)) 16299 16300 (face (rainbow-delimiters-depth-1-face)) 16319 16320 (face (rainbow-delimiters-depth-2-face)) 16345 16346 (face (rainbow-delimiters-depth-2-face)) 16346 16347 (face (rainbow-delimiters-depth-1-face)) 16354 16361 (face font-lock-builtin-face) 16361 16362 (face (rainbow-delimiters-depth-1-face)) 16367 16372 (face font-lock-string-face) 16384 16390 (face font-lock-string-face) 16400 16401 (face (rainbow-delimiters-depth-2-face)) 16419 16420 (face (rainbow-delimiters-depth-2-face)) 16420 16421 (face (rainbow-delimiters-depth-1-face)) 16422 16429 (face font-lock-variable-name-face) 16441 16442 (face (rainbow-delimiters-depth-1-face)) 16487 16488 (face (rainbow-delimiters-depth-2-face)) 16504 16505 (face (rainbow-delimiters-depth-2-face)) 16505 16506 (face (rainbow-delimiters-depth-1-face)) 16509 16511 (face font-lock-comment-delimiter-face) 16511 16728 (face font-lock-comment-face) 16731 16736 (face font-lock-keyword-face) 16737 16756 (face font-lock-type-face) 16756 16757 (face (rainbow-delimiters-depth-1-face)) 16775 16776 (face (rainbow-delimiters-depth-1-face)) 16782 16785 (face font-lock-keyword-face) 16786 16794 (face font-lock-function-name-face) 16794 16795 (face (rainbow-delimiters-depth-1-face)) 16795 16799 (face font-lock-keyword-face) 16812 16818 (face font-lock-string-face) 16828 16829 (face (rainbow-delimiters-depth-1-face)) 16839 16844 (face font-lock-builtin-face) 16844 16845 (face (rainbow-delimiters-depth-1-face)) 16845 16846 (face (rainbow-delimiters-depth-1-face)) 16855 16856 (face (rainbow-delimiters-depth-1-face)) 16864 16865 (face (rainbow-delimiters-depth-1-face)) 16874 16878 (face font-lock-keyword-face) 16913 16914 (face (rainbow-delimiters-depth-1-face)) 16924 16925 (face (rainbow-delimiters-depth-1-face)) 16931 16934 (face font-lock-keyword-face) 16935 16939 (face font-lock-function-name-face) 16939 16940 (face (rainbow-delimiters-depth-1-face)) 16940 16944 (face font-lock-keyword-face) 16952 16953 (face (rainbow-delimiters-depth-1-face)) 16963 16972 (face font-lock-variable-name-face) 16987 16988 (face (rainbow-delimiters-depth-1-face)) 16990 16991 (face (rainbow-delimiters-depth-1-face)) 17005 17018 (face font-lock-variable-name-face) 17021 17025 (face font-lock-keyword-face) 17036 17037 (face (rainbow-delimiters-depth-1-face)) 17043 17044 (face (rainbow-delimiters-depth-2-face)) 17059 17060 (face (rainbow-delimiters-depth-2-face)) 17060 17061 (face (rainbow-delimiters-depth-1-face)) 17070 17074 (face font-lock-variable-name-face) 17102 17103 (face (rainbow-delimiters-depth-1-face)) 17109 17110 (face (rainbow-delimiters-depth-2-face)) 17125 17126 (face (rainbow-delimiters-depth-2-face)) 17126 17127 (face (rainbow-delimiters-depth-1-face)) 17136 17142 (face font-lock-keyword-face) 17143 17147 (face font-lock-keyword-face) 17158 17159 (face (rainbow-delimiters-depth-1-face)) 17172 17173 (face (rainbow-delimiters-depth-1-face)) 17185 17188 (face font-lock-keyword-face) 17189 17211 (face font-lock-function-name-face) 17211 17212 (face (rainbow-delimiters-depth-1-face)) 17244 17245 (face (rainbow-delimiters-depth-1-face)) 17251 17252 (face font-lock-variable-name-face) 17274 17275 (face (rainbow-delimiters-depth-1-face)) 17322 17330 (face font-lock-string-face) 17364 17365 (face (rainbow-delimiters-depth-1-face)) 17365 17366 (face (rainbow-delimiters-depth-1-face)) 17372 17373 (face (rainbow-delimiters-depth-1-face)) 17378 17379 (face font-lock-variable-name-face) 17401 17402 (face (rainbow-delimiters-depth-1-face)) 17402 17403 (face (rainbow-delimiters-depth-1-face)) 17403 17404 (face (rainbow-delimiters-depth-1-face)) 17405 17406 (face (rainbow-delimiters-depth-1-face)) 17411 17412 (face font-lock-variable-name-face) 17434 17435 (face (rainbow-delimiters-depth-1-face)) 17459 17460 (face (rainbow-delimiters-depth-1-face)) 17460 17461 (face (rainbow-delimiters-depth-1-face)) 17462 17463 (face (rainbow-delimiters-depth-1-face)) 17468 17474 (face font-lock-keyword-face) 17491 17492 (face (rainbow-delimiters-depth-1-face)) 17492 17493 (face (rainbow-delimiters-depth-1-face)) 17493 17494 (face (rainbow-delimiters-depth-1-face)) 17494 17495 (face (rainbow-delimiters-depth-2-face)) 17504 17505 (face (rainbow-delimiters-depth-2-face)) 17505 17506 (face (rainbow-delimiters-depth-1-face)) 17541 17542 (face (rainbow-delimiters-depth-1-face)) 17542 17543 (face (rainbow-delimiters-depth-1-face)) 17558 17559 (face (rainbow-delimiters-depth-1-face)) 17561 17562 (face (rainbow-delimiters-depth-1-face)) 17581 17582 (face (rainbow-delimiters-depth-1-face)) 17584 17585 (face (rainbow-delimiters-depth-1-face)) 17587 17605 (face font-lock-variable-name-face) 17611 17613 (face font-lock-comment-delimiter-face) 17613 17629 (face font-lock-comment-face) 17629 17637 (face font-lock-variable-name-face) 17643 17645 (face font-lock-comment-delimiter-face) 17645 17660 (face font-lock-comment-face) 17660 17669 (face font-lock-variable-name-face) 17676 17678 (face font-lock-comment-delimiter-face) 17678 17695 (face font-lock-comment-face) 17695 17704 (face font-lock-variable-name-face) 17711 17713 (face font-lock-comment-delimiter-face) 17713 17730 (face font-lock-comment-face) 17731 17737 (face font-lock-variable-name-face) 17758 17759 (face (rainbow-delimiters-depth-1-face)) 17765 17766 (face (rainbow-delimiters-depth-2-face)) 17766 17770 (face font-lock-constant-face) 17773 17774 (face (rainbow-delimiters-depth-2-face)) 17774 17775 (face (rainbow-delimiters-depth-1-face)) 17776 17777 (fontified t face font-lock-variable-name-face) 17777 17799 (fontified t) 17799 17800 (fontified t face (rainbow-delimiters-depth-1-face)) 17800 17834 (fontified t) 17834 17842 (fontified t face font-lock-string-face) 17842 17843 (fontified t face (rainbow-delimiters-depth-1-face)) 17843 17844 (fontified t face (rainbow-delimiters-depth-1-face)) 17844 17850 (fontified t) 17850 17851 (fontified t face (rainbow-delimiters-depth-1-face)) 17851 17852 (fontified t) 17852 17864 (fontified t face font-lock-variable-name-face) 17864 17867 (fontified t) 17867 17868 (fontified t face (rainbow-delimiters-depth-1-face)) 17868 17869 (fontified t face (rainbow-delimiters-depth-1-face)) 17869 17870 (fontified t) 17870 17873 (fontified t face font-lock-keyword-face) 17873 17888 (fontified t) 17888 17890 (fontified t face font-lock-keyword-face) 17890 17891 (fontified t) 17891 17892 (fontified t face (rainbow-delimiters-depth-1-face)) 17892 17899 (fontified t) 17899 17902 (fontified t face font-lock-keyword-face) 17902 17905 (fontified t) 17905 17907 (fontified t face font-lock-keyword-face) 17907 17908 (fontified t) 17908 17913 (fontified t face font-lock-builtin-face) 17913 17914 (fontified t face (rainbow-delimiters-depth-2-face)) 17914 17932 (fontified t) 17932 17933 (fontified t face (rainbow-delimiters-depth-2-face)) 17933 17934 (fontified t face (rainbow-delimiters-depth-1-face)) 17934 17951 (fontified t) 17951 17952 (fontified t face font-lock-variable-name-face) 17952 17954 (fontified t) 17954 17958 (fontified t face font-lock-variable-name-face) 17958 17983 (fontified t) 17983 17984 (fontified t face (rainbow-delimiters-depth-1-face)) 17984 18011 (fontified t) 18011 18012 (fontified t face (rainbow-delimiters-depth-1-face)) 18012 18013 (fontified t) 18013 18036 (fontified t) 18036 18037 (fontified t face (rainbow-delimiters-depth-1-face)) 18037 18041 (fontified t) 18041 18042 (fontified t face (rainbow-delimiters-depth-1-face)) 18042 18043 (fontified t) 18043 18044 (fontified t face font-lock-variable-name-face) 18044 18069 (fontified t) 18069 18070 (fontified t face (rainbow-delimiters-depth-1-face)) 18070 18086 (fontified t) 18086 18087 (fontified t face (rainbow-delimiters-depth-2-face)) 18087 18088 (fontified t face (rainbow-delimiters-depth-2-face)) 18088 18089 (fontified t face (rainbow-delimiters-depth-2-face)) 18089 18101 (fontified t) 18101 18102 (fontified t face (rainbow-delimiters-depth-2-face)) 18102 18103 (fontified t face (rainbow-delimiters-depth-1-face)) 18103 18104 (fontified t) 18104 18105 (fontified t face font-lock-variable-name-face) 18105 18127 (fontified t) 18127 18128 (fontified t face (rainbow-delimiters-depth-1-face)) 18128 18165 (fontified t) 18165 18171 (fontified t face font-lock-string-face) 18171 18172 (fontified t face (rainbow-delimiters-depth-1-face)) 18172 18173 (fontified t face (rainbow-delimiters-depth-1-face)) 18173 18174 (fontified t) 18174 18175 (fontified t face (rainbow-delimiters-depth-1-face)) 18175 18176 (fontified t) 18176 18183 (fontified t face font-lock-variable-name-face) 18183 18205 (fontified t) 18205 18206 (fontified t face (rainbow-delimiters-depth-1-face)) 18206 18243 (fontified t) 18243 18252 (fontified t face font-lock-string-face) 18252 18253 (fontified t face (rainbow-delimiters-depth-1-face)) 18253 18254 (fontified t face (rainbow-delimiters-depth-1-face)) 18254 18255 (fontified t) 18255 18256 (fontified t face (rainbow-delimiters-depth-1-face)) 18256 18258 (fontified t) 18258 18263 (fontified t face font-lock-variable-name-face) 18263 18276 (fontified t) 18276 18284 (fontified t) 18284 18285 (face (rainbow-delimiters-depth-1-face) fontified t) 18285 18292 (fontified t) 18292 18293 (face (rainbow-delimiters-depth-2-face) fontified t) 18293 18299 (fontified t) 18299 18300 (face (rainbow-delimiters-depth-2-face) fontified t) 18300 18310 (fontified t) 18310 18311 (face (rainbow-delimiters-depth-2-face) fontified t) 18311 18318 (fontified t) 18318 18319 (face (rainbow-delimiters-depth-2-face) fontified t) 18319 18320 (face (rainbow-delimiters-depth-1-face) fontified t) 18320 18321 (fontified t) 18321 18323 (fontified t) 18323 18324 (fontified t) 18324 18331 (fontified t) 18331 18338 (fontified t face font-lock-builtin-face) 18338 18339 (fontified t face (rainbow-delimiters-depth-1-face)) 18339 18344 (fontified t) 18344 18349 (fontified t face font-lock-string-face) 18349 18361 (fontified t) 18361 18367 (fontified t face font-lock-string-face) 18367 18377 (fontified t) 18377 18378 (fontified t face (rainbow-delimiters-depth-2-face)) 18378 18396 (fontified t) 18396 18397 (fontified t face (rainbow-delimiters-depth-2-face)) 18397 18398 (fontified t face (rainbow-delimiters-depth-1-face)) 18398 18399 (fontified t) 18399 18406 (fontified t face font-lock-variable-name-face) 18406 18418 (fontified t) 18418 18419 (fontified t face (rainbow-delimiters-depth-1-face)) 18419 18463 (fontified t) 18463 18464 (fontified t face (rainbow-delimiters-depth-2-face)) 18464 18480 (fontified t) 18480 18481 (fontified t face (rainbow-delimiters-depth-2-face)) 18481 18482 (fontified t face (rainbow-delimiters-depth-1-face)) 18482 18485 (fontified t) 18485 18487 (fontified t face font-lock-comment-delimiter-face) 18487 18503 (fontified t face font-lock-comment-face) 18503 18604 (fontified t face font-lock-comment-face) 18604 18964 (fontified t face font-lock-comment-face) 18964 18965 (fontified t) 18965 18967 (fontified t face font-lock-comment-delimiter-face) 18967 18985 (fontified t face font-lock-comment-face) 18985 18988 (face font-lock-comment-face fontified t) 18988 18989 (fontified t) 18989 18991 (fontified t face font-lock-comment-delimiter-face) 18991 19003 (fontified t face font-lock-comment-face) 19003 19004 (fontified t) 19004 19006 (fontified t face font-lock-comment-delimiter-face) 19006 19022 (fontified t face font-lock-comment-face) 19022 19023 (fontified t) 19023 19025 (fontified t face font-lock-comment-delimiter-face) 19025 19062 (fontified t face font-lock-comment-face) 19062 19063 (fontified t) 19063 19065 (fontified t face font-lock-comment-delimiter-face) 19065 19167 (fontified t face font-lock-comment-face) 19167 19168 (fontified t) 19168 19170 (fontified t face font-lock-comment-delimiter-face) 19170 19464 (fontified t face font-lock-comment-face) 19464 19488 (fontified t face font-lock-comment-face) 19488 19497 (face font-lock-comment-face fontified t) 19497 19498 (fontified t) 19498 19499 (fontified t) 19499 19500 (fontified t) 19500 19513 (fontified t face font-lock-variable-name-face) 19513 19516 (fontified t) 19516 19554 (fontified t face font-lock-string-face) 19554 19555 (fontified t) 19555 19563 (fontified t face font-lock-variable-name-face) 19563 19566 (fontified t) 19566 19604 (fontified t face font-lock-string-face) 19604 19605 (fontified t) 19605 19613 (fontified t face font-lock-variable-name-face) 19613 19636 (fontified t) 19636 19637 (fontified t face (rainbow-delimiters-depth-1-face)) 19637 19691 (fontified t) 19691 19711 (fontified t face font-lock-string-face) 19711 19721 (fontified t) 19721 19725 (fontified t face font-lock-constant-face) 19725 19726 (fontified t) 19726 19727 (fontified t face (rainbow-delimiters-depth-1-face)) 19727 19730 (fontified t) 19730 19731 (fontified t) 19731 19732 (fontified t) 19732 19745 (fontified t face font-lock-variable-name-face) 19745 19752 (fontified t) 19752 19753 (fontified t face (rainbow-delimiters-depth-1-face)) 19753 19761 (fontified t) 19761 19762 (fontified t face (rainbow-delimiters-depth-1-face)) 19762 19770 (fontified t) 19770 19781 (fontified t face font-lock-variable-name-face) 19781 19784 (fontified t) 19784 19790 (fontified t face font-lock-builtin-face) 19790 19791 (fontified t face (rainbow-delimiters-depth-1-face)) 19791 19792 (fontified t face (rainbow-delimiters-depth-2-face)) 19792 19795 (fontified t face font-lock-builtin-face) 19795 19796 (fontified t face (rainbow-delimiters-depth-3-face)) 19796 19800 (fontified t) 19800 19801 (fontified t face (rainbow-delimiters-depth-3-face)) 19801 19802 (fontified t) 19802 19805 (fontified t face font-lock-keyword-face) 19805 19811 (fontified t) 19811 19813 (fontified t face font-lock-keyword-face) 19813 19832 (fontified t) 19832 19833 (fontified t face (rainbow-delimiters-depth-3-face)) 19833 19854 (fontified t face font-lock-string-face) 19854 19855 (fontified t face (rainbow-delimiters-depth-3-face)) 19855 19856 (fontified t face (rainbow-delimiters-depth-2-face)) 19856 19857 (fontified t face (rainbow-delimiters-depth-1-face)) 19857 19858 (fontified t) 19858 19868 (fontified t face font-lock-variable-name-face) 19868 19871 (fontified t) 19871 19877 (fontified t face font-lock-builtin-face) 19877 19878 (fontified t face (rainbow-delimiters-depth-1-face)) 19878 19879 (fontified t face (rainbow-delimiters-depth-2-face)) 19879 19882 (fontified t face font-lock-builtin-face) 19882 19883 (fontified t face (rainbow-delimiters-depth-3-face)) 19883 19887 (fontified t) 19887 19888 (fontified t face (rainbow-delimiters-depth-3-face)) 19888 19889 (fontified t) 19889 19892 (fontified t face font-lock-keyword-face) 19892 19898 (fontified t) 19898 19900 (fontified t face font-lock-keyword-face) 19900 19919 (fontified t) 19919 19920 (fontified t face (rainbow-delimiters-depth-3-face)) 19920 19937 (fontified t face font-lock-string-face) 19937 19938 (fontified t face (rainbow-delimiters-depth-3-face)) 19938 19939 (fontified t face (rainbow-delimiters-depth-2-face)) 19939 19940 (fontified t face (rainbow-delimiters-depth-1-face)) 19940 19943 (fontified t) 19943 19944 (fontified t) 19944 19959 (fontified t) 19959 19960 (fontified t) 19960 19968 (fontified t) 19968 19969 (fontified t) 19969 19972 (fontified t) 19972 19974 (fontified t) 19974 19975 (fontified t) 19975 19976 (fontified t) 19976 19980 (fontified t face font-lock-keyword-face) 19980 19981 (fontified t) 19981 19985 (fontified t face font-lock-builtin-face) 19985 19986 (fontified t face (rainbow-delimiters-depth-1-face)) 19986 19997 (fontified t) 19997 20002 (fontified t) 20002 20025 (face font-lock-string-face fontified t) 20025 20026 (face (rainbow-delimiters-depth-1-face) fontified t) 20026 20027 (fontified t) 20027 20029 (face font-lock-keyword-face fontified t) 20029 20049 (fontified t) 20053 20065 (face font-lock-variable-name-face) 20095 20096 (face (rainbow-delimiters-depth-1-face)) 20096 20097 (face (rainbow-delimiters-depth-1-face)) 20099 20103 (face font-lock-keyword-face) 20104 20108 (face font-lock-builtin-face) 20108 20109 (face (rainbow-delimiters-depth-1-face)) 20125 20152 (face font-lock-string-face) 20152 20153 (face (rainbow-delimiters-depth-1-face)) 20154 20156 (face font-lock-keyword-face) 20181 20194 (face font-lock-variable-name-face) 20225 20226 (face (rainbow-delimiters-depth-1-face)) 20226 20227 (face (rainbow-delimiters-depth-1-face)) 20232 20238 (face font-lock-keyword-face) 20269 20280 (face font-lock-variable-name-face) 20283 20284 (face (rainbow-delimiters-depth-1-face)) 20294 20295 (face (rainbow-delimiters-depth-2-face)) 20295 20296 (face (rainbow-delimiters-depth-2-face)) 20302 20303 (face (rainbow-delimiters-depth-2-face)) 20303 20304 (face (rainbow-delimiters-depth-2-face)) 20305 20308 (face font-lock-keyword-face) 20314 20316 (face font-lock-keyword-face) 20330 20331 (face (rainbow-delimiters-depth-1-face)) 20336 20342 (face font-lock-builtin-face) 20342 20343 (face (rainbow-delimiters-depth-1-face)) 20354 20355 (face (rainbow-delimiters-depth-1-face)) 20360 20363 (face font-lock-keyword-face) 20364 20369 (face font-lock-function-name-face) 20369 20370 (face (rainbow-delimiters-depth-1-face)) 20380 20381 (face (rainbow-delimiters-depth-1-face)) 20387 20407 (face font-lock-variable-name-face) 20410 20411 (face (rainbow-delimiters-depth-1-face)) 20420 20425 (face font-lock-string-face) 20446 20447 (face (rainbow-delimiters-depth-2-face)) 20463 20464 (face (rainbow-delimiters-depth-2-face)) 20474 20481 (face font-lock-string-face) 20504 20505 (face (rainbow-delimiters-depth-2-face)) 20505 20506 (face (rainbow-delimiters-depth-3-face)) 20507 20508 (face (rainbow-delimiters-depth-3-face)) 20524 20525 (face (rainbow-delimiters-depth-2-face)) 20535 20548 (face font-lock-string-face) 20571 20572 (face (rainbow-delimiters-depth-2-face)) 20572 20573 (face (rainbow-delimiters-depth-3-face)) 20574 20575 (face (rainbow-delimiters-depth-3-face)) 20591 20592 (face (rainbow-delimiters-depth-2-face)) 20598 20599 (face (rainbow-delimiters-depth-1-face)) 20604 20612 (face font-lock-variable-name-face) 20634 20635 (face (rainbow-delimiters-depth-1-face)) 20667 20668 (face (rainbow-delimiters-depth-1-face)) 20673 20686 (face font-lock-variable-name-face) 20707 20708 (face (rainbow-delimiters-depth-1-face)) 20716 20717 (face (rainbow-delimiters-depth-2-face)) 20717 20722 (face font-lock-string-face) 20722 20723 (face (rainbow-delimiters-depth-2-face)) 20723 20724 (face (rainbow-delimiters-depth-1-face)) 20729 20737 (face font-lock-variable-name-face) 20750 20751 (face (rainbow-delimiters-depth-1-face)) 20772 20773 (face (rainbow-delimiters-depth-2-face)) 20780 20781 (face (rainbow-delimiters-depth-3-face)) 20791 20792 (face (rainbow-delimiters-depth-3-face)) 20799 20800 (face (rainbow-delimiters-depth-2-face)) 20800 20801 (face (rainbow-delimiters-depth-1-face)) 20806 20813 (face font-lock-variable-name-face) 20824 20825 (face (rainbow-delimiters-depth-1-face)) 20825 20832 (face font-lock-string-face) 20832 20833 (face (rainbow-delimiters-depth-1-face)) 20833 20834 (face (rainbow-delimiters-depth-1-face)) 20838 20839 (face (rainbow-delimiters-depth-1-face)) 20844 20850 (face font-lock-variable-name-face) 20861 20862 (face (rainbow-delimiters-depth-1-face)) 20862 20875 (face font-lock-string-face) 20875 20876 (face (rainbow-delimiters-depth-1-face)) 20876 20877 (face (rainbow-delimiters-depth-1-face)) 20881 20882 (face (rainbow-delimiters-depth-1-face)) 20887 20893 (face font-lock-keyword-face) 20924 20927 (face font-lock-keyword-face) 20928 20945 (face font-lock-function-name-face) 20945 20946 (face (rainbow-delimiters-depth-1-face)) 21005 21009 (face font-lock-constant-face) 21066 21071 (face font-lock-constant-face) 21073 21074 (face (rainbow-delimiters-depth-1-face)) 21080 21087 (face font-lock-variable-name-face) 21113 21114 (face (rainbow-delimiters-depth-1-face)) 21158 21159 (face (rainbow-delimiters-depth-1-face)) 21164 21166 (face font-lock-keyword-face) 21182 21189 (face font-lock-variable-name-face) 21205 21206 (face (rainbow-delimiters-depth-1-face)) 21206 21207 (face (rainbow-delimiters-depth-1-face)) 21212 21214 (face font-lock-keyword-face) 21244 21251 (face font-lock-variable-name-face) 21269 21270 (face (rainbow-delimiters-depth-1-face)) 21289 21290 (face (rainbow-delimiters-depth-1-face)) 21295 21302 (face font-lock-variable-name-face) 21318 21319 (face (rainbow-delimiters-depth-1-face)) 21329 21330 (face (rainbow-delimiters-depth-1-face)) 21335 21342 (face font-lock-variable-name-face) 21353 21356 (face font-lock-builtin-face) 21356 21357 (face (rainbow-delimiters-depth-1-face)) 21398 21399 (face (rainbow-delimiters-depth-1-face)) 21404 21410 (face font-lock-keyword-face) 21427 21428 (face (rainbow-delimiters-depth-1-face)) 21429 21430 (face (rainbow-delimiters-depth-1-face)) 21435 21444 (face font-lock-variable-name-face) 21464 21465 (face (rainbow-delimiters-depth-1-face)) 21503 21504 (face (rainbow-delimiters-depth-1-face)) 21505 21514 (face font-lock-variable-name-face) 21534 21535 (face (rainbow-delimiters-depth-1-face)) 21545 21546 (face (rainbow-delimiters-depth-2-face)) 21548 21549 (face (rainbow-delimiters-depth-2-face)) 21549 21550 (face (rainbow-delimiters-depth-1-face)) 21551 21559 (face font-lock-variable-name-face) 21579 21580 (face (rainbow-delimiters-depth-1-face)) 21590 21591 (face (rainbow-delimiters-depth-2-face)) 21593 21594 (face (rainbow-delimiters-depth-2-face)) 21594 21595 (face (rainbow-delimiters-depth-1-face)) 21600 21603 (face font-lock-keyword-face) 21630 21632 (face font-lock-keyword-face) 21647 21648 (face (rainbow-delimiters-depth-1-face)) 21649 21650 (face (rainbow-delimiters-depth-1-face)) 21656 21661 (face font-lock-keyword-face) 21661 21662 (face (rainbow-delimiters-depth-1-face)) 21662 21674 (face font-lock-string-face) 21684 21685 (face (rainbow-delimiters-depth-1-face)) 21690 21695 (face font-lock-keyword-face) 21695 21696 (face (rainbow-delimiters-depth-1-face)) 21696 21707 (face font-lock-string-face) 21716 21717 (face (rainbow-delimiters-depth-1-face)) 21722 21727 (face font-lock-keyword-face) 21727 21728 (face (rainbow-delimiters-depth-1-face)) 21728 21738 (face font-lock-string-face) 21746 21747 (face (rainbow-delimiters-depth-1-face)) 21752 21755 (face font-lock-keyword-face) 21756 21767 (face font-lock-function-name-face) 21767 21768 (face (rainbow-delimiters-depth-1-face)) 21782 21786 (face font-lock-constant-face) 21786 21787 (face (rainbow-delimiters-depth-1-face)) 21793 21799 (face font-lock-variable-name-face) 21810 21811 (face (rainbow-delimiters-depth-1-face)) 21811 21812 (face (rainbow-delimiters-depth-2-face)) 21812 21813 (face (rainbow-delimiters-depth-3-face)) 21826 21827 (face (rainbow-delimiters-depth-3-face)) 21827 21828 (face (rainbow-delimiters-depth-2-face)) 21828 21829 (face (rainbow-delimiters-depth-1-face)) 21834 21840 (face font-lock-variable-name-face) 21848 21849 (face (rainbow-delimiters-depth-1-face)) 21863 21864 (face (rainbow-delimiters-depth-1-face)) 21869 21870 (face font-lock-variable-name-face) 21870 21887 (face font-lock-variable-name-face) 21901 21902 (face (rainbow-delimiters-depth-1-face)) 21908 21909 (face (rainbow-delimiters-depth-2-face)) 21914 21915 (face (rainbow-delimiters-depth-2-face)) 21922 21923 (face (rainbow-delimiters-depth-1-face)) 21923 21924 (face (rainbow-delimiters-depth-1-face)) 21928 21929 (face (rainbow-delimiters-depth-1-face)) 21934 21945 (face font-lock-variable-name-face) 21957 21958 (face (rainbow-delimiters-depth-1-face)) 21964 21965 (face (rainbow-delimiters-depth-2-face)) 21970 21971 (face (rainbow-delimiters-depth-2-face)) 21979 21980 (face (rainbow-delimiters-depth-1-face)) 21985 21992 (face font-lock-variable-name-face) 22003 22004 (face (rainbow-delimiters-depth-1-face)) 22039 22040 (face (rainbow-delimiters-depth-1-face)) 22045 22050 (face font-lock-variable-name-face) 22064 22065 (face (rainbow-delimiters-depth-1-face)) 22076 22077 (face (rainbow-delimiters-depth-2-face)) 22077 22078 (face (rainbow-delimiters-depth-2-face)) 22078 22079 (face (rainbow-delimiters-depth-1-face)) 22080 22082 (face font-lock-keyword-face) 22089 22091 (face font-lock-keyword-face) 22092 22095 (face font-lock-keyword-face) 22096 22100 (face font-lock-constant-face) 22101 22105 (face font-lock-keyword-face) 22106 22120 (face font-lock-string-face) 22134 22135 (face (rainbow-delimiters-depth-1-face)) 22140 22141 (face (rainbow-delimiters-depth-1-face)) 22154 22155 (face (rainbow-delimiters-depth-1-face)) 22166 22167 (face (rainbow-delimiters-depth-2-face)) 22171 22172 (face (rainbow-delimiters-depth-2-face)) 22186 22187 (face (rainbow-delimiters-depth-2-face)) 22191 22192 (face (rainbow-delimiters-depth-2-face)) 22194 22198 (face font-lock-string-face) 22198 22199 (face (rainbow-delimiters-depth-1-face)) 22204 22207 (face font-lock-keyword-face) 22215 22217 (face font-lock-keyword-face) 22243 22244 (face (rainbow-delimiters-depth-1-face)) 22250 22251 (face (rainbow-delimiters-depth-2-face)) 22255 22256 (face (rainbow-delimiters-depth-2-face)) 22265 22266 (face (rainbow-delimiters-depth-2-face)) 22270 22271 (face (rainbow-delimiters-depth-2-face)) 22273 22277 (face font-lock-string-face) 22277 22278 (face (rainbow-delimiters-depth-1-face)) 22291 22292 (face (rainbow-delimiters-depth-1-face)) 22292 22297 (face font-lock-string-face) 22297 22298 (face (rainbow-delimiters-depth-1-face)) 22301 22304 (face font-lock-keyword-face) 22305 22318 (face font-lock-function-name-face) 22318 22319 (face (rainbow-delimiters-depth-1-face)) 22344 22345 (face (rainbow-delimiters-depth-1-face)) 22351 22361 (face font-lock-variable-name-face) 22364 22367 (face font-lock-builtin-face) 22367 22368 (face (rainbow-delimiters-depth-1-face)) 22376 22377 (face (rainbow-delimiters-depth-1-face)) 22382 22388 (face font-lock-variable-name-face) 22397 22403 (face font-lock-variable-name-face) 22406 22407 (face (rainbow-delimiters-depth-1-face)) 22421 22422 (face (rainbow-delimiters-depth-1-face)) 22451 22452 (face (rainbow-delimiters-depth-1-face)) 22460 22461 (face (rainbow-delimiters-depth-2-face)) 22485 22486 (face (rainbow-delimiters-depth-2-face)) 22486 22487 (face (rainbow-delimiters-depth-1-face)) 22492 22495 (face font-lock-keyword-face) 22525 22527 (face font-lock-keyword-face) 22528 22531 (face font-lock-builtin-face) 22531 22532 (face (rainbow-delimiters-depth-1-face)) 22541 22546 (face font-lock-builtin-face) 22546 22547 (face (rainbow-delimiters-depth-2-face)) 22557 22558 (face (rainbow-delimiters-depth-2-face)) 22590 22591 (face (rainbow-delimiters-depth-1-face)) 22612 22613 (face (rainbow-delimiters-depth-1-face)) 22638 22639 (face (rainbow-delimiters-depth-1-face)) 22659 22660 (face (rainbow-delimiters-depth-1-face)) 22666 22667 (face (rainbow-delimiters-depth-2-face)) 22674 22675 (face (rainbow-delimiters-depth-2-face)) 22682 22683 (face (rainbow-delimiters-depth-1-face)) 22696 22697 (face (rainbow-delimiters-depth-1-face)) 22697 22698 (face (rainbow-delimiters-depth-1-face)) 22701 22704 (face font-lock-keyword-face) 22731 22733 (face font-lock-keyword-face) 22748 22749 (face (rainbow-delimiters-depth-1-face)) 22750 22751 (face (rainbow-delimiters-depth-1-face)) 22770 22771 (face (rainbow-delimiters-depth-1-face)) 22796 22797 (face (rainbow-delimiters-depth-1-face)) 22800 22802 (face font-lock-comment-delimiter-face) 22802 22847 (face font-lock-comment-face) 22847 22854 (face font-lock-comment-face) 22857 22864 (face font-lock-variable-name-face) 22881 22882 (face (rainbow-delimiters-depth-1-face)) 22882 22883 (face (rainbow-delimiters-depth-2-face)) 22891 22894 (face font-lock-keyword-face) 22909 22911 (face font-lock-keyword-face) 22926 22927 (face (rainbow-delimiters-depth-3-face)) 22931 22932 (face (rainbow-delimiters-depth-3-face)) 22932 22933 (face (rainbow-delimiters-depth-2-face)) 22933 22934 (face (rainbow-delimiters-depth-1-face)) 22943 22944 (face (rainbow-delimiters-depth-1-face)) 22971 22975 (face font-lock-constant-face) 22975 22976 (face (rainbow-delimiters-depth-1-face)) 22985 22986 (face (rainbow-delimiters-depth-1-face)) 22986 22987 (face (rainbow-delimiters-depth-2-face)) 23002 23003 (face (rainbow-delimiters-depth-2-face)) 23003 23004 (face (rainbow-delimiters-depth-1-face)) 23015 23016 (face (rainbow-delimiters-depth-1-face)) 23016 23024 (face font-lock-string-face) 23024 23025 (face (rainbow-delimiters-depth-1-face)) 23036 23037 (face (rainbow-delimiters-depth-1-face)) 23037 23046 (face font-lock-string-face) 23046 23047 (face (rainbow-delimiters-depth-1-face)) 23056 23057 (face (rainbow-delimiters-depth-1-face)) 23057 23058 (face (rainbow-delimiters-depth-1-face)) 23063 23066 (face font-lock-keyword-face) 23067 23085 (face font-lock-function-name-face) 23085 23086 (face (rainbow-delimiters-depth-1-face)) 23109 23110 (face (rainbow-delimiters-depth-1-face)) 23116 23122 (face font-lock-keyword-face) 23131 23134 (face font-lock-builtin-face) 23134 23135 (face (rainbow-delimiters-depth-1-face)) 23135 23141 (face font-lock-keyword-face) 23165 23166 (face (rainbow-delimiters-depth-2-face)) 23170 23171 (face (rainbow-delimiters-depth-3-face)) 23185 23186 (face (rainbow-delimiters-depth-3-face)) 23194 23195 (face (rainbow-delimiters-depth-2-face)) 23195 23196 (face (rainbow-delimiters-depth-1-face)) 23199 23216 (face font-lock-variable-name-face) 23237 23238 (face (rainbow-delimiters-depth-1-face)) 23247 23248 (face (rainbow-delimiters-depth-1-face)) 23249 23266 (face font-lock-variable-name-face) 23287 23288 (face (rainbow-delimiters-depth-1-face)) 23297 23298 (face (rainbow-delimiters-depth-1-face)) 23299 23315 (face font-lock-variable-name-face) 23336 23337 (face (rainbow-delimiters-depth-1-face)) 23345 23346 (face (rainbow-delimiters-depth-1-face)) 23351 23356 (face font-lock-variable-name-face) 23382 23383 (face (rainbow-delimiters-depth-1-face)) 23388 23389 (face (rainbow-delimiters-depth-2-face)) 23417 23418 (face (rainbow-delimiters-depth-3-face)) 23459 23465 (face font-lock-string-face) 23465 23466 (face (rainbow-delimiters-depth-3-face)) 23507 23508 (face (rainbow-delimiters-depth-3-face)) 23508 23509 (face (rainbow-delimiters-depth-3-face)) 23538 23539 (face (rainbow-delimiters-depth-3-face)) 23580 23586 (face font-lock-string-face) 23586 23587 (face (rainbow-delimiters-depth-3-face)) 23628 23629 (face (rainbow-delimiters-depth-3-face)) 23629 23630 (face (rainbow-delimiters-depth-3-face)) 23659 23660 (face (rainbow-delimiters-depth-3-face)) 23702 23708 (face font-lock-string-face) 23708 23709 (face (rainbow-delimiters-depth-3-face)) 23750 23751 (face (rainbow-delimiters-depth-3-face)) 23751 23752 (face (rainbow-delimiters-depth-3-face)) 23779 23780 (face (rainbow-delimiters-depth-3-face)) 23802 23806 (face font-lock-constant-face) 23806 23807 (face (rainbow-delimiters-depth-3-face)) 23834 23835 (face (rainbow-delimiters-depth-3-face)) 23838 23839 (face (rainbow-delimiters-depth-3-face)) 23867 23868 (face (rainbow-delimiters-depth-3-face)) 23868 23871 (face font-lock-builtin-face) 23871 23872 (face (rainbow-delimiters-depth-4-face)) 23883 23884 (face (rainbow-delimiters-depth-4-face)) 23897 23906 (face font-lock-string-face) 23906 23907 (face (rainbow-delimiters-depth-3-face)) 23913 23914 (face (rainbow-delimiters-depth-2-face)) 23915 23916 (face (rainbow-delimiters-depth-1-face)) 23917 23926 (face font-lock-variable-name-face) 23949 23950 (face (rainbow-delimiters-depth-1-face)) 23982 23983 (face (rainbow-delimiters-depth-1-face)) 23990 23997 (face font-lock-builtin-face) 23997 23998 (face (rainbow-delimiters-depth-1-face)) 24008 24041 (face font-lock-string-face) 24080 24081 (face (rainbow-delimiters-depth-2-face)) 24081 24091 (face font-lock-string-face) 24093 24128 (face font-lock-string-face) 24128 24129 (face (rainbow-delimiters-depth-2-face)) 24131 24132 (face (rainbow-delimiters-depth-1-face)) 24133 24140 (face font-lock-variable-name-face) 24152 24153 (face (rainbow-delimiters-depth-1-face)) 24215 24216 (face (rainbow-delimiters-depth-1-face)) 24221 24227 (face font-lock-variable-name-face) 24244 24245 (face (rainbow-delimiters-depth-1-face)) 24245 24246 (face (rainbow-delimiters-depth-2-face)) 24253 24256 (face font-lock-keyword-face) 24270 24272 (face font-lock-keyword-face) 24281 24282 (face (rainbow-delimiters-depth-2-face)) 24282 24283 (face (rainbow-delimiters-depth-1-face)) 24284 24292 (face font-lock-variable-name-face) 24308 24309 (face (rainbow-delimiters-depth-1-face)) 24317 24318 (face (rainbow-delimiters-depth-1-face)) 24330 24331 (face (rainbow-delimiters-depth-1-face)) 24378 24379 (face (rainbow-delimiters-depth-2-face)) 24395 24396 (face (rainbow-delimiters-depth-2-face)) 24396 24397 (face (rainbow-delimiters-depth-1-face)) 24402 24407 (face font-lock-variable-name-face) 24413 24421 (face font-lock-variable-name-face) 24437 24438 (face (rainbow-delimiters-depth-1-face)) 24446 24447 (face (rainbow-delimiters-depth-1-face)) 24448 24453 (face font-lock-variable-name-face) 24467 24468 (face (rainbow-delimiters-depth-1-face)) 24481 24482 (face (rainbow-delimiters-depth-1-face)) 24483 24486 (face font-lock-keyword-face) 24493 24495 (face font-lock-keyword-face) 24496 24501 (face font-lock-builtin-face) 24501 24502 (face (rainbow-delimiters-depth-1-face)) 24507 24508 (face (rainbow-delimiters-depth-1-face)) 24524 24525 (face (rainbow-delimiters-depth-1-face)) 24533 24534 (face (rainbow-delimiters-depth-2-face)) 24540 24541 (face (rainbow-delimiters-depth-2-face)) 24541 24542 (face (rainbow-delimiters-depth-1-face)) 24558 24559 (face (rainbow-delimiters-depth-1-face)) 24567 24568 (face (rainbow-delimiters-depth-2-face)) 24573 24574 (face (rainbow-delimiters-depth-2-face)) 24574 24575 (face (rainbow-delimiters-depth-1-face)) 24588 24589 (face (rainbow-delimiters-depth-1-face)) 24589 24590 (face (rainbow-delimiters-depth-1-face)) 24595 24600 (face font-lock-keyword-face) 24600 24601 (face (rainbow-delimiters-depth-1-face)) 24601 24621 (face font-lock-string-face) 24622 24628 (face font-lock-builtin-face) 24628 24629 (face (rainbow-delimiters-depth-2-face)) 24638 24639 (face (rainbow-delimiters-depth-2-face)) 24639 24640 (face (rainbow-delimiters-depth-1-face)) 24645 24648 (face font-lock-keyword-face) 24651 24653 (face font-lock-keyword-face) 24654 24659 (face font-lock-builtin-face) 24659 24660 (face (rainbow-delimiters-depth-1-face)) 24661 24662 (face (rainbow-delimiters-depth-1-face)) 24672 24682 (face font-lock-variable-name-face) 24696 24697 (face (rainbow-delimiters-depth-1-face)) 24710 24711 (face (rainbow-delimiters-depth-2-face)) 24719 24720 (face (rainbow-delimiters-depth-2-face)) 24720 24721 (face (rainbow-delimiters-depth-1-face)) 24730 24735 (face font-lock-variable-name-face) 24756 24757 (face (rainbow-delimiters-depth-1-face)) 24765 24766 (face (rainbow-delimiters-depth-1-face)) 24775 24780 (face font-lock-keyword-face) 24780 24781 (face (rainbow-delimiters-depth-1-face)) 24781 24799 (face font-lock-string-face) 24800 24806 (face font-lock-builtin-face) 24806 24807 (face (rainbow-delimiters-depth-2-face)) 24831 24832 (face (rainbow-delimiters-depth-2-face)) 24832 24833 (face (rainbow-delimiters-depth-1-face)) 24838 24843 (face font-lock-keyword-face) 24843 24844 (face (rainbow-delimiters-depth-1-face)) 24844 24856 (face font-lock-string-face) 24857 24863 (face font-lock-builtin-face) 24863 24864 (face (rainbow-delimiters-depth-2-face)) 24875 24876 (face (rainbow-delimiters-depth-3-face)) 24882 24883 (face (rainbow-delimiters-depth-4-face)) 24888 24889 (face (rainbow-delimiters-depth-4-face)) 24895 24896 (face (rainbow-delimiters-depth-4-face)) 24896 24897 (face (rainbow-delimiters-depth-4-face)) 24897 24898 (face (rainbow-delimiters-depth-3-face)) 24898 24899 (face (rainbow-delimiters-depth-2-face)) 24899 24900 (face (rainbow-delimiters-depth-1-face)) 24915 24916 (face (rainbow-delimiters-depth-1-face)) 24916 24930 (face font-lock-string-face) 24930 24931 (face (rainbow-delimiters-depth-1-face)) 24934 24936 (face font-lock-comment-delimiter-face) 24936 24957 (face font-lock-comment-face) 24957 24959 (face font-lock-comment-delimiter-face) 24959 25212 (face font-lock-comment-face) 25212 25391 (face font-lock-comment-face) 25391 25672 (face font-lock-comment-face) 25672 25942 (face font-lock-comment-face) 25942 25943 (face font-lock-comment-delimiter-face) 25943 25944 (face font-lock-comment-face) 25944 25945 (face font-lock-comment-delimiter-face) 25945 25946 (face font-lock-comment-face) 25949 25962 (face font-lock-variable-name-face) 25965 25966 (face (rainbow-delimiters-depth-1-face)) 25971 26044 (face font-lock-string-face) 26045 26046 (face (rainbow-delimiters-depth-1-face)) 26047 26055 (face font-lock-variable-name-face) 26058 26076 (face font-lock-string-face) 26077 26085 (face font-lock-variable-name-face) 26108 26109 (face (rainbow-delimiters-depth-1-face)) 26171 26172 (face font-lock-string-face) 26172 26194 (face font-lock-string-face) 26208 26212 (face font-lock-constant-face) 26214 26215 (face (rainbow-delimiters-depth-1-face)) 26220 26236 (face font-lock-variable-name-face) 26243 26244 (face (rainbow-delimiters-depth-1-face)) 26252 26253 (face (rainbow-delimiters-depth-1-face)) 26261 26272 (face font-lock-variable-name-face) 26275 26281 (face font-lock-builtin-face) 26281 26282 (face (rainbow-delimiters-depth-1-face)) 26303 26304 (face (rainbow-delimiters-depth-2-face)) 26304 26325 (face font-lock-string-face) 26325 26326 (face (rainbow-delimiters-depth-2-face)) 26326 26327 (face (rainbow-delimiters-depth-1-face)) 26328 26339 (face font-lock-variable-name-face) 26342 26348 (face font-lock-builtin-face) 26348 26349 (face (rainbow-delimiters-depth-1-face)) 26370 26371 (face (rainbow-delimiters-depth-2-face)) 26371 26392 (face font-lock-string-face) 26392 26393 (face (rainbow-delimiters-depth-2-face)) 26393 26394 (face (rainbow-delimiters-depth-1-face)) 26395 26405 (face font-lock-variable-name-face) 26408 26414 (face font-lock-builtin-face) 26414 26415 (face (rainbow-delimiters-depth-1-face)) 26436 26437 (face (rainbow-delimiters-depth-2-face)) 26437 26457 (face font-lock-string-face) 26457 26458 (face (rainbow-delimiters-depth-2-face)) 26458 26459 (face (rainbow-delimiters-depth-1-face)) 26464 26470 (face font-lock-keyword-face) 26478 26480 (face font-lock-keyword-face) 26486 26489 (face font-lock-keyword-face) 26490 26503 (face font-lock-function-name-face) 26503 26504 (face (rainbow-delimiters-depth-1-face)) 26513 26514 (face (rainbow-delimiters-depth-1-face)) 26520 26526 (face font-lock-keyword-face) 26527 26528 (face (rainbow-delimiters-depth-1-face)) 26539 26540 (face (rainbow-delimiters-depth-2-face)) 26548 26549 (face (rainbow-delimiters-depth-2-face)) 26563 26564 (face (rainbow-delimiters-depth-2-face)) 26564 26565 (face (rainbow-delimiters-depth-2-face)) 26566 26569 (face font-lock-keyword-face) 26579 26581 (face font-lock-keyword-face) 26591 26592 (face (rainbow-delimiters-depth-1-face)) 26595 26609 (face font-lock-variable-name-face) 26625 26626 (face (rainbow-delimiters-depth-1-face)) 26637 26638 (face (rainbow-delimiters-depth-1-face)) 26639 26653 (face font-lock-variable-name-face) 26669 26670 (face (rainbow-delimiters-depth-1-face)) 26681 26682 (face (rainbow-delimiters-depth-1-face)) 26683 26696 (face font-lock-variable-name-face) 26712 26713 (face (rainbow-delimiters-depth-1-face)) 26723 26724 (face (rainbow-delimiters-depth-1-face)) 26743 26744 (face (rainbow-delimiters-depth-1-face)) 26745 26746 (face (rainbow-delimiters-depth-1-face)) 26749 26751 (face font-lock-comment-delimiter-face) 26751 26818 (face font-lock-comment-face) 26818 26840 (face font-lock-comment-face) 26843 26848 (face font-lock-variable-name-face) 26851 26854 (face font-lock-builtin-face) 26854 26855 (face (rainbow-delimiters-depth-1-face)) 26855 26856 (face (rainbow-delimiters-depth-1-face)) 26857 26860 (face font-lock-keyword-face) 26870 26872 (face font-lock-keyword-face) 26873 26874 (face (rainbow-delimiters-depth-1-face)) 26919 26920 (face (rainbow-delimiters-depth-1-face)) 26926 26929 (face font-lock-keyword-face) 26938 26940 (face font-lock-keyword-face) 26959 26962 (face font-lock-keyword-face) 26969 26971 (face font-lock-keyword-face) 26993 26998 (face font-lock-variable-name-face) 27002 27005 (face font-lock-builtin-face) 27005 27006 (face (rainbow-delimiters-depth-1-face)) 27011 27012 (face (rainbow-delimiters-depth-1-face)) 27014 27021 (face font-lock-variable-name-face) 27024 27027 (face font-lock-builtin-face) 27027 27028 (face (rainbow-delimiters-depth-1-face)) 27033 27034 (face (rainbow-delimiters-depth-1-face)) 27035 27043 (face font-lock-variable-name-face) 27046 27049 (face font-lock-builtin-face) 27049 27050 (face (rainbow-delimiters-depth-1-face)) 27058 27059 (face (rainbow-delimiters-depth-2-face)) 27060 27061 (face (rainbow-delimiters-depth-2-face)) 27061 27062 (face (rainbow-delimiters-depth-1-face)) 27063 27071 (face font-lock-variable-name-face) 27074 27077 (face font-lock-builtin-face) 27077 27078 (face (rainbow-delimiters-depth-1-face)) 27083 27084 (face (rainbow-delimiters-depth-1-face)) 27086 27092 (face font-lock-keyword-face) 27108 27114 (face font-lock-keyword-face) 27132 27134 (face font-lock-comment-delimiter-face) 27134 27205 (face font-lock-comment-face) 27205 27218 (face font-lock-comment-face) 27218 27330 (face font-lock-comment-face) 27330 27342 (face font-lock-comment-face) 27342 27390 (face font-lock-comment-face) 27393 27397 (face font-lock-keyword-face) 27414 27420 (face font-lock-keyword-face) 27429 27432 (face font-lock-keyword-face) 27433 27453 (face font-lock-function-name-face) 27453 27454 (face (rainbow-delimiters-depth-1-face)) 27459 27460 (face (rainbow-delimiters-depth-1-face)) 27466 27468 (face font-lock-comment-delimiter-face) 27468 27537 (face font-lock-comment-face) 27541 27543 (face font-lock-comment-delimiter-face) 27543 27611 (face font-lock-comment-face) 27615 27621 (face font-lock-keyword-face) 27627 27628 (face (rainbow-delimiters-depth-1-face)) 27628 27629 (face (rainbow-delimiters-depth-2-face)) 27637 27638 (face (rainbow-delimiters-depth-3-face)) 27643 27644 (face (rainbow-delimiters-depth-3-face)) 27649 27650 (face (rainbow-delimiters-depth-2-face)) 27655 27656 (face (rainbow-delimiters-depth-1-face)) 27665 27668 (face font-lock-keyword-face) 27669 27691 (face font-lock-function-name-face) 27691 27692 (face (rainbow-delimiters-depth-1-face)) 27723 27724 (face (rainbow-delimiters-depth-1-face)) 27730 27743 (face font-lock-variable-name-face) 27758 27760 (face font-lock-comment-delimiter-face) 27760 27803 (face font-lock-comment-face) 27807 27809 (face font-lock-comment-delimiter-face) 27809 27880 (face font-lock-comment-face) 27880 27881 (face font-lock-comment-face) 27885 27887 (face font-lock-comment-delimiter-face) 27887 27942 (face font-lock-comment-face) 27946 27957 (face font-lock-variable-name-face) 27963 27968 (face font-lock-builtin-face) 27968 27969 (face (rainbow-delimiters-depth-1-face)) 27996 27997 (face (rainbow-delimiters-depth-1-face)) 28018 28027 (face font-lock-variable-name-face) 28030 28033 (face font-lock-builtin-face) 28033 28034 (face (rainbow-delimiters-depth-1-face)) 28061 28062 (face (rainbow-delimiters-depth-1-face)) 28067 28071 (face font-lock-variable-name-face) 28085 28086 (face (rainbow-delimiters-depth-1-face)) 28113 28114 (face (rainbow-delimiters-depth-1-face)) 28119 28129 (face font-lock-variable-name-face) 28138 28139 (face (rainbow-delimiters-depth-1-face)) 28170 28171 (face (rainbow-delimiters-depth-2-face)) 28176 28177 (face (rainbow-delimiters-depth-2-face)) 28184 28185 (face (rainbow-delimiters-depth-1-face)) 28190 28192 (face font-lock-comment-delimiter-face) 28192 28263 (face font-lock-comment-face) 28267 28277 (face font-lock-variable-name-face) 28281 28282 (face (rainbow-delimiters-depth-1-face)) 28299 28300 (face (rainbow-delimiters-depth-1-face)) 28308 28309 (face (rainbow-delimiters-depth-1-face)) 28314 28315 (face (rainbow-delimiters-depth-1-face)) 28320 28326 (face font-lock-keyword-face) 28345 28346 (face (rainbow-delimiters-depth-1-face)) 28348 28349 (face (rainbow-delimiters-depth-1-face)) 28352 28355 (face font-lock-keyword-face) 28356 28373 (face font-lock-function-name-face) 28373 28374 (face (rainbow-delimiters-depth-1-face)) 28400 28401 (face (rainbow-delimiters-depth-1-face)) 28779 28785 (face font-lock-variable-name-face) 28785 28786 (face (rainbow-delimiters-depth-1-face)) 28806 28807 (face (rainbow-delimiters-depth-1-face)) 28824 28830 (face font-lock-keyword-face) 28840 28843 (face font-lock-keyword-face) 28844 28855 (face font-lock-function-name-face) 28855 28856 (face (rainbow-delimiters-depth-1-face)) 28918 28922 (face font-lock-constant-face) 28922 28923 (face (rainbow-delimiters-depth-1-face)) 28929 28936 (face font-lock-variable-name-face) 28968 28969 (face (rainbow-delimiters-depth-1-face)) 28995 28996 (face (rainbow-delimiters-depth-1-face)) 29001 29003 (face font-lock-keyword-face) 29022 29026 (face font-lock-keyword-face) 29036 29042 (face font-lock-keyword-face) 29051 29060 (fontified t) 29060 29067 (fontified t face font-lock-variable-name-face) 29067 29070 (fontified t) 29070 29071 (fontified t face (rainbow-delimiters-depth-1-face)) 29071 29088 (fontified t) 29088 29089 (fontified t face (rainbow-delimiters-depth-1-face)) 29089 29096 (fontified t) 29096 29097 (fontified t face (rainbow-delimiters-depth-1-face)) 29097 29105 (fontified t) 29105 29106 (fontified t face (rainbow-delimiters-depth-1-face)) 29106 29128 (fontified t) 29128 29129 (fontified t face (rainbow-delimiters-depth-1-face)) 29129 29159 (fontified t) 29159 29160 (fontified t face (rainbow-delimiters-depth-1-face)) 29160 29169 (fontified t) 29169 29175 (fontified t face font-lock-keyword-face) 29175 29183 (fontified t) 29183 29184 (fontified t face (rainbow-delimiters-depth-1-face)) 29184 29189 (fontified t) 29189 29190 (fontified t face (rainbow-delimiters-depth-2-face)) 29190 29198 (fontified t) 29198 29199 (fontified t face (rainbow-delimiters-depth-2-face)) 29199 29200 (fontified t face (rainbow-delimiters-depth-1-face)) 29200 29205 (fontified t) 29205 29209 (fontified t face font-lock-keyword-face) 29209 29219 (fontified t) 29219 29225 (fontified t face font-lock-keyword-face) 29225 29233 (fontified t) 29233 29234 (fontified t face (rainbow-delimiters-depth-1-face)) 29234 29239 (fontified t) 29239 29240 (fontified t face (rainbow-delimiters-depth-2-face)) 29240 29265 (fontified t) 29265 29266 (fontified t face (rainbow-delimiters-depth-2-face)) 29266 29267 (fontified t face (rainbow-delimiters-depth-1-face)) 29267 29270 (fontified t) 29270 29272 (fontified t face font-lock-comment-delimiter-face) 29272 29275 (fontified t face font-lock-comment-face) 29275 29308 (fontified t face font-lock-comment-face) 29308 29309 (fontified t) 29309 29310 (fontified t) 29310 29311 (fontified t) 29311 29314 (fontified t face font-lock-keyword-face) 29314 29321 (fontified t) 29321 29323 (fontified t face font-lock-keyword-face) 29323 29324 (fontified t) 29324 29329 (fontified t face font-lock-builtin-face) 29329 29330 (fontified t face (rainbow-delimiters-depth-1-face)) 29330 29331 (fontified t) 29331 29332 (fontified t face (rainbow-delimiters-depth-1-face)) 29332 29349 (fontified t) 29349 29350 (fontified t face (rainbow-delimiters-depth-1-face)) 29350 29364 (fontified t) 29364 29365 (fontified t face (rainbow-delimiters-depth-2-face)) 29365 29370 (fontified t) 29370 29371 (fontified t face (rainbow-delimiters-depth-2-face)) 29371 29372 (fontified t face (rainbow-delimiters-depth-1-face)) 29372 29375 (fontified t) 29375 29377 (fontified t face font-lock-comment-delimiter-face) 29377 29388 (fontified t face font-lock-comment-face) 29388 29389 (fontified t) 29389 29391 (fontified t face font-lock-comment-delimiter-face) 29391 29798 (fontified t face font-lock-comment-face) 29798 29799 (fontified t face font-lock-comment-face) 29799 29810 (fontified t face font-lock-comment-face) 29810 29889 (fontified t face font-lock-comment-face) 29889 30242 (face font-lock-comment-face fontified t) 30242 30243 (fontified t face font-lock-comment-delimiter-face) 30243 30244 (fontified t face font-lock-comment-face) 30244 30246 (fontified t face font-lock-comment-delimiter-face) 30246 30392 (fontified t face font-lock-comment-face) 30392 30393 (fontified t face font-lock-comment-delimiter-face) 30393 30394 (fontified t face font-lock-comment-face) 30394 30396 (fontified t face font-lock-comment-delimiter-face) 30396 30467 (fontified t face font-lock-comment-face) 30467 30468 (fontified t face font-lock-comment-delimiter-face) 30468 30469 (fontified t face font-lock-comment-face) 30469 30471 (fontified t face font-lock-comment-delimiter-face) 30471 30737 (fontified t face font-lock-comment-face) 30737 30738 (fontified t) 30738 30739 (fontified t) 30739 30740 (fontified t) 30740 30742 (fontified t face font-lock-keyword-face) 30742 30743 (face font-lock-keyword-face fontified t) 30743 30744 (fontified t) 30744 30757 (face font-lock-function-name-face fontified t) 30757 30758 (face (rainbow-delimiters-depth-1-face) fontified t) 30758 30763 (fontified t) 30763 30764 (face (rainbow-delimiters-depth-1-face) fontified t) 30764 30766 (fontified t) 30766 30770 (fontified t) 30770 30771 (fontified t face font-lock-variable-name-face) 30771 30779 (fontified t) 30779 30780 (fontified t face (rainbow-delimiters-depth-1-face)) 30780 30786 (fontified t) 30786 30787 (fontified t face (rainbow-delimiters-depth-1-face)) 30787 30792 (fontified t) 30792 30793 (fontified t face font-lock-variable-name-face) 30793 30801 (fontified t) 30801 30802 (fontified t face (rainbow-delimiters-depth-1-face)) 30802 30807 (fontified t) 30807 30808 (fontified t face (rainbow-delimiters-depth-1-face)) 30808 30810 (fontified t) 30810 30812 (fontified t face font-lock-comment-delimiter-face) 30812 30860 (fontified t face font-lock-comment-face) 30860 30864 (fontified t) 30864 30870 (fontified t face font-lock-keyword-face) 30870 30878 (fontified t) 30878 30881 (fontified t face font-lock-keyword-face) 30881 30882 (fontified t) 30882 30892 (fontified t face font-lock-function-name-face) 30892 30893 (fontified t face (rainbow-delimiters-depth-1-face)) 30893 30899 (fontified t) 30899 30900 (fontified t face (rainbow-delimiters-depth-1-face)) 30900 30906 (fontified t) 30906 30912 (fontified t face font-lock-variable-name-face) 30912 30923 (fontified t) 30923 30924 (fontified t face (rainbow-delimiters-depth-1-face)) 30924 30966 (fontified t) 30966 30967 (fontified t face (rainbow-delimiters-depth-1-face)) 30967 30969 (fontified t) 30969 30971 (fontified t face font-lock-comment-delimiter-face) 30971 30984 (fontified t face font-lock-comment-face) 30984 30988 (fontified t) 30988 30994 (fontified t face font-lock-keyword-face) 30994 31005 (fontified t) 31005 31006 (fontified t face (rainbow-delimiters-depth-1-face)) 31006 31014 (fontified t) 31014 31015 (fontified t face (rainbow-delimiters-depth-2-face)) 31015 31017 (fontified t) 31017 31018 (fontified t face (rainbow-delimiters-depth-2-face)) 31018 31019 (fontified t face (rainbow-delimiters-depth-1-face)) 31019 31021 (fontified t) 31021 31023 (fontified t face font-lock-comment-delimiter-face) 31023 31042 (fontified t face font-lock-comment-face) 31042 31044 (fontified t) 31044 31047 (fontified t face font-lock-keyword-face) 31047 31048 (fontified t) 31048 31060 (fontified t face font-lock-function-name-face) 31060 31061 (fontified t face (rainbow-delimiters-depth-1-face)) 31061 31119 (fontified t) 31119 31123 (fontified t face font-lock-constant-face) 31123 31176 (fontified t) 31176 31180 (fontified t face font-lock-constant-face) 31180 31182 (fontified t) 31182 31183 (fontified t face (rainbow-delimiters-depth-1-face)) 31183 31189 (fontified t) 31189 31192 (fontified t face font-lock-keyword-face) 31192 31193 (fontified t) 31193 31205 (fontified t face font-lock-function-name-face) 31205 31206 (fontified t face (rainbow-delimiters-depth-1-face)) 31206 31212 (fontified t) 31212 31213 (fontified t face (rainbow-delimiters-depth-1-face)) 31213 31223 (fontified t) 31223 31229 (fontified t face font-lock-keyword-face) 31229 31238 (fontified t) 31238 31242 (fontified t) 31242 31243 (fontified t face (rainbow-delimiters-depth-1-face)) 31243 31258 (fontified t) 31258 31259 (fontified t face (rainbow-delimiters-depth-1-face)) 31259 31260 (fontified t) 31260 31265 (fontified t) 31265 31266 (fontified t face font-lock-keyword-face) 31266 31268 (face font-lock-keyword-face fontified t) 31268 31269 (fontified t) 31269 31279 (face font-lock-function-name-face fontified t) 31279 31280 (face (rainbow-delimiters-depth-1-face) fontified t) 31280 31287 (fontified t) 31287 31288 (face (rainbow-delimiters-depth-1-face) fontified t) 31288 31290 (fontified t) 31298 31305 (face font-lock-variable-name-face) 31342 31343 (face (rainbow-delimiters-depth-1-face)) 31350 31351 (face (rainbow-delimiters-depth-1-face)) 31360 31367 (face font-lock-variable-name-face) 31384 31385 (face (rainbow-delimiters-depth-1-face)) 31431 31435 (face font-lock-constant-face) 31435 31436 (face (rainbow-delimiters-depth-1-face)) 31445 31451 (face font-lock-keyword-face) 31468 31469 (face (rainbow-delimiters-depth-1-face)) 31481 31482 (face (rainbow-delimiters-depth-1-face)) 31488 31496 (face font-lock-variable-name-face) 31517 31518 (face (rainbow-delimiters-depth-1-face)) 31541 31542 (face (rainbow-delimiters-depth-1-face)) 31547 31554 (face font-lock-variable-name-face) 31591 31592 (face (rainbow-delimiters-depth-1-face)) 31600 31601 (face (rainbow-delimiters-depth-1-face)) 31606 31613 (face font-lock-variable-name-face) 31632 31633 (face (rainbow-delimiters-depth-1-face)) 31643 31644 (face (rainbow-delimiters-depth-1-face)) 31645 31648 (face font-lock-builtin-face) 31648 31649 (face (rainbow-delimiters-depth-1-face)) 31659 31660 (face (rainbow-delimiters-depth-1-face)) 31665 31667 (face font-lock-keyword-face) 31683 31690 (face font-lock-variable-name-face) 31706 31707 (face (rainbow-delimiters-depth-1-face)) 31707 31708 (face (rainbow-delimiters-depth-1-face)) 31713 31715 (face font-lock-keyword-face) 31745 31752 (face font-lock-variable-name-face) 31770 31771 (face (rainbow-delimiters-depth-1-face)) 31790 31791 (face (rainbow-delimiters-depth-1-face)) 31796 31803 (face font-lock-variable-name-face) 31819 31820 (face (rainbow-delimiters-depth-1-face)) 31830 31831 (face (rainbow-delimiters-depth-1-face)) 31836 31843 (face font-lock-variable-name-face) 31854 31857 (face font-lock-builtin-face) 31857 31858 (face (rainbow-delimiters-depth-1-face)) 31871 31872 (face (rainbow-delimiters-depth-1-face)) 31877 31883 (face font-lock-keyword-face) 31900 31901 (face (rainbow-delimiters-depth-1-face)) 31902 31903 (face (rainbow-delimiters-depth-1-face)) 31906 31908 (face font-lock-comment-delimiter-face) 31908 31980 (face font-lock-comment-face) 31983 31992 (face font-lock-variable-name-face) 32007 32008 (face (rainbow-delimiters-depth-1-face)) 32048 32049 (face (rainbow-delimiters-depth-1-face)) 32050 32059 (face font-lock-variable-name-face) 32074 32075 (face (rainbow-delimiters-depth-1-face)) 32089 32090 (face (rainbow-delimiters-depth-1-face)) 32091 32099 (face font-lock-variable-name-face) 32114 32115 (face (rainbow-delimiters-depth-1-face)) 32128 32129 (face (rainbow-delimiters-depth-1-face)) 32132 32134 (face font-lock-comment-delimiter-face) 32134 32162 (face font-lock-comment-face) 32162 32163 (face font-lock-comment-delimiter-face) 32163 32164 (face font-lock-comment-face) 32164 32166 (face font-lock-comment-delimiter-face) 32166 32282 (face font-lock-comment-face) 32282 32471 (face font-lock-comment-face) 32471 32899 (face font-lock-comment-face) 32899 32901 (face font-lock-comment-delimiter-face) 32901 33139 (face font-lock-comment-face) 33139 33141 (face font-lock-comment-delimiter-face) 33141 33203 (face font-lock-comment-face) 33203 33205 (face font-lock-comment-delimiter-face) 33205 33399 (face font-lock-comment-face) 33399 33468 (face font-lock-comment-face) 33471 33487 (face font-lock-variable-name-face) 33493 33498 (face font-lock-variable-name-face) 33524 33525 (face (rainbow-delimiters-depth-1-face)) 33530 33531 (face (rainbow-delimiters-depth-2-face)) 33562 33563 (face (rainbow-delimiters-depth-3-face)) 33636 33637 (face (rainbow-delimiters-depth-4-face)) 33637 33641 (face font-lock-constant-face) 33641 33642 (face (rainbow-delimiters-depth-4-face)) 33651 33652 (face (rainbow-delimiters-depth-3-face)) 33681 33682 (face (rainbow-delimiters-depth-3-face)) 33709 33717 (face font-lock-string-face) 33730 33736 (face font-lock-string-face) 33736 33737 (face (rainbow-delimiters-depth-3-face)) 33778 33779 (face (rainbow-delimiters-depth-3-face)) 33779 33780 (face (rainbow-delimiters-depth-3-face)) 33809 33810 (face (rainbow-delimiters-depth-3-face)) 33850 33858 (face font-lock-string-face) 33871 33877 (face font-lock-string-face) 33903 33904 (face (rainbow-delimiters-depth-3-face)) 33945 33946 (face (rainbow-delimiters-depth-3-face)) 33946 33947 (face (rainbow-delimiters-depth-3-face)) 33976 33977 (face (rainbow-delimiters-depth-3-face)) 34017 34025 (face font-lock-string-face) 34038 34044 (face font-lock-string-face) 34070 34071 (face (rainbow-delimiters-depth-3-face)) 34112 34113 (face (rainbow-delimiters-depth-3-face)) 34113 34114 (face (rainbow-delimiters-depth-3-face)) 34143 34144 (face (rainbow-delimiters-depth-3-face)) 34184 34192 (face font-lock-string-face) 34205 34211 (face font-lock-string-face) 34237 34238 (face (rainbow-delimiters-depth-3-face)) 34279 34280 (face (rainbow-delimiters-depth-3-face)) 34280 34281 (face (rainbow-delimiters-depth-3-face)) 34308 34309 (face (rainbow-delimiters-depth-3-face)) 34331 34335 (face font-lock-constant-face) 34335 34336 (face (rainbow-delimiters-depth-3-face)) 34364 34365 (face (rainbow-delimiters-depth-3-face)) 34385 34394 (face font-lock-string-face) 34394 34395 (face (rainbow-delimiters-depth-3-face)) 34401 34402 (face (rainbow-delimiters-depth-2-face)) 34403 34404 (face (rainbow-delimiters-depth-1-face)) 34419 34420 (face (rainbow-delimiters-depth-1-face)) 34420 34421 (face (rainbow-delimiters-depth-1-face)) 34424 34426 (face font-lock-comment-delimiter-face) 34426 34449 (face font-lock-comment-face) 34449 34474 (face font-lock-comment-face) 34477 34486 (face font-lock-variable-name-face) 34511 34512 (face (rainbow-delimiters-depth-1-face)) 34530 34531 (face (rainbow-delimiters-depth-1-face)) 34538 34545 (face font-lock-builtin-face) 34545 34546 (face (rainbow-delimiters-depth-1-face)) 34556 34589 (face font-lock-string-face) 34620 34621 (face (rainbow-delimiters-depth-2-face)) 34621 34631 (face font-lock-string-face) 34631 34632 (face (rainbow-delimiters-depth-2-face)) 34633 34634 (face (rainbow-delimiters-depth-1-face)) 34644 34645 (face (rainbow-delimiters-depth-1-face)) 34692 34693 (face (rainbow-delimiters-depth-1-face)) 34696 34698 (face font-lock-comment-delimiter-face) 34698 34964 (face font-lock-comment-face) 34964 34975 (face font-lock-comment-face) 34975 34992 (face font-lock-comment-face) 34993 34995 (face font-lock-comment-delimiter-face) 34995 35137 (face font-lock-comment-face) 35150 35151 (face (rainbow-delimiters-depth-1-face)) 35151 35169 (face font-lock-string-face) 35169 35170 (face (rainbow-delimiters-depth-1-face)) 35185 35186 (face (rainbow-delimiters-depth-1-face)) 35194 35195 (face (rainbow-delimiters-depth-1-face)) 35198 35200 (face font-lock-comment-delimiter-face) 35200 35482 (face font-lock-comment-face) 35482 35490 (face font-lock-comment-face) 35491 35492 (face font-lock-comment-delimiter-face) 35492 35493 (face font-lock-comment-delimiter-face) 35493 35829 (face font-lock-comment-face) 35830 35832 (face font-lock-comment-delimiter-face) 35832 35947 (face font-lock-comment-face) 35950 35953 (face font-lock-keyword-face) 35954 35970 (face font-lock-function-name-face) 35970 35971 (face (rainbow-delimiters-depth-1-face)) 35997 35998 (face (rainbow-delimiters-depth-1-face)) 36004 36011 (face font-lock-variable-name-face) 36024 36025 (face (rainbow-delimiters-depth-1-face)) 36036 36037 (face (rainbow-delimiters-depth-2-face)) 36064 36065 (face (rainbow-delimiters-depth-2-face)) 36065 36066 (face (rainbow-delimiters-depth-1-face)) 36071 36078 (face font-lock-variable-name-face) 36091 36092 (face (rainbow-delimiters-depth-1-face)) 36101 36102 (face (rainbow-delimiters-depth-2-face)) 36107 36108 (face (rainbow-delimiters-depth-2-face)) 36108 36109 (face (rainbow-delimiters-depth-1-face)) 36114 36117 (face font-lock-keyword-face) 36124 36126 (face font-lock-keyword-face) 36127 36132 (face font-lock-builtin-face) 36132 36133 (face (rainbow-delimiters-depth-1-face)) 36139 36140 (face (rainbow-delimiters-depth-1-face)) 36150 36153 (face font-lock-keyword-face) 36159 36161 (face font-lock-keyword-face) 36162 36167 (face font-lock-builtin-face) 36167 36168 (face (rainbow-delimiters-depth-1-face)) 36169 36170 (face (rainbow-delimiters-depth-1-face)) 36184 36186 (face font-lock-comment-delimiter-face) 36186 36238 (face font-lock-comment-face) 36250 36259 (face font-lock-variable-name-face) 36271 36272 (face (rainbow-delimiters-depth-1-face)) 36285 36286 (face (rainbow-delimiters-depth-2-face)) 36293 36294 (face (rainbow-delimiters-depth-2-face)) 36303 36304 (face (rainbow-delimiters-depth-1-face)) 36304 36305 (face (rainbow-delimiters-depth-1-face)) 36312 36313 (face (rainbow-delimiters-depth-1-face)) 36326 36333 (face font-lock-variable-name-face) 36345 36346 (face (rainbow-delimiters-depth-1-face)) 36346 36347 (face (rainbow-delimiters-depth-2-face)) 36365 36366 (face (rainbow-delimiters-depth-2-face)) 36374 36375 (face (rainbow-delimiters-depth-1-face)) 36380 36387 (face font-lock-variable-name-face) 36398 36399 (face (rainbow-delimiters-depth-1-face)) 36444 36445 (face (rainbow-delimiters-depth-1-face)) 36450 36456 (face font-lock-keyword-face) 36467 36468 (face (rainbow-delimiters-depth-1-face)) 36483 36484 (face (rainbow-delimiters-depth-2-face)) 36489 36490 (face (rainbow-delimiters-depth-2-face)) 36490 36491 (face (rainbow-delimiters-depth-1-face)) 36494 36496 (face font-lock-comment-delimiter-face) 36496 36500 (face font-lock-comment-face) 36500 36664 (face font-lock-comment-face) 36667 36678 (face font-lock-variable-name-face) 36694 36695 (face (rainbow-delimiters-depth-1-face)) 36696 36697 (face (rainbow-delimiters-depth-1-face)) 36697 36698 (face (rainbow-delimiters-depth-1-face)) 36700 36701 (face (rainbow-delimiters-depth-1-face)) 36713 36714 (face (rainbow-delimiters-depth-1-face)) 36740 36741 (face (rainbow-delimiters-depth-1-face)) 36744 36746 (face font-lock-comment-delimiter-face) 36746 36866 (face font-lock-comment-face) 36866 36937 (face font-lock-comment-face) 36940 36951 (face font-lock-variable-name-face) 36970 36971 (face (rainbow-delimiters-depth-1-face)) 36993 36994 (face (rainbow-delimiters-depth-1-face)) 37006 37007 (face (rainbow-delimiters-depth-1-face)) 37018 37019 (face (rainbow-delimiters-depth-1-face)) 37022 37024 (face font-lock-comment-delimiter-face) 37024 37144 (face font-lock-comment-face) 37144 37156 (face font-lock-comment-face) 37156 37427 (face font-lock-comment-face) 37427 37439 (face font-lock-comment-face) 37439 37446 (face font-lock-comment-face) 37446 37447 (face font-lock-comment-delimiter-face) 37447 37448 (face font-lock-comment-face) 37448 37450 (face font-lock-comment-delimiter-face) 37450 37495 (face font-lock-comment-face) 37495 37946 (face font-lock-comment-face) 37946 38079 (face font-lock-comment-face) 38082 38085 (face font-lock-keyword-face) 38086 38105 (face font-lock-function-name-face) 38105 38106 (face (rainbow-delimiters-depth-1-face)) 38147 38148 (face (rainbow-delimiters-depth-1-face)) 38154 38161 (face font-lock-variable-name-face) 38174 38175 (face (rainbow-delimiters-depth-1-face)) 38186 38187 (face (rainbow-delimiters-depth-2-face)) 38214 38215 (face (rainbow-delimiters-depth-2-face)) 38215 38216 (face (rainbow-delimiters-depth-1-face)) 38221 38228 (face font-lock-variable-name-face) 38241 38242 (face (rainbow-delimiters-depth-1-face)) 38251 38252 (face (rainbow-delimiters-depth-2-face)) 38257 38258 (face (rainbow-delimiters-depth-2-face)) 38258 38259 (face (rainbow-delimiters-depth-1-face)) 38264 38267 (face font-lock-keyword-face) 38274 38276 (face font-lock-keyword-face) 38277 38282 (face font-lock-builtin-face) 38282 38283 (face (rainbow-delimiters-depth-1-face)) 38289 38290 (face (rainbow-delimiters-depth-1-face)) 38300 38303 (face font-lock-keyword-face) 38309 38311 (face font-lock-keyword-face) 38312 38317 (face font-lock-builtin-face) 38317 38318 (face (rainbow-delimiters-depth-1-face)) 38319 38320 (face (rainbow-delimiters-depth-1-face)) 38334 38350 (face font-lock-variable-name-face) 38366 38367 (face (rainbow-delimiters-depth-1-face)) 38374 38375 (face (rainbow-delimiters-depth-1-face)) 38375 38376 (face (rainbow-delimiters-depth-1-face)) 38382 38383 (face (rainbow-delimiters-depth-1-face)) 38396 38411 (face font-lock-variable-name-face) 38425 38426 (face (rainbow-delimiters-depth-1-face)) 38442 38443 (face (rainbow-delimiters-depth-1-face)) 38470 38479 (face font-lock-variable-name-face) 38503 38504 (face (rainbow-delimiters-depth-1-face)) 38534 38535 (face (rainbow-delimiters-depth-1-face)) 38548 38555 (face font-lock-variable-name-face) 38567 38568 (face (rainbow-delimiters-depth-1-face)) 38568 38569 (face (rainbow-delimiters-depth-2-face)) 38587 38588 (face (rainbow-delimiters-depth-2-face)) 38596 38597 (face (rainbow-delimiters-depth-1-face)) 38602 38609 (face font-lock-variable-name-face) 38620 38621 (face (rainbow-delimiters-depth-1-face)) 38666 38667 (face (rainbow-delimiters-depth-1-face)) 38672 38678 (face font-lock-keyword-face) 38689 38690 (face (rainbow-delimiters-depth-1-face)) 38705 38706 (face (rainbow-delimiters-depth-2-face)) 38711 38712 (face (rainbow-delimiters-depth-2-face)) 38712 38713 (face (rainbow-delimiters-depth-1-face)) 38716 38718 (face font-lock-comment-delimiter-face) 38718 38998 (face font-lock-comment-face) 38998 38999 (face font-lock-comment-delimiter-face) 38999 39000 (face font-lock-comment-face) 39000 39002 (face font-lock-comment-delimiter-face) 39002 39098 (face font-lock-comment-face) 39098 39126 (face font-lock-comment-face) 39129 39148 (face font-lock-variable-name-face) 39170 39171 (face (rainbow-delimiters-depth-1-face)) 39210 39211 (face (rainbow-delimiters-depth-1-face)) 39223 39224 (face (rainbow-delimiters-depth-1-face)) 39254 39269 (face font-lock-string-face) 39269 39270 (face (rainbow-delimiters-depth-1-face)) 39275 39296 (face font-lock-variable-name-face) 39318 39319 (face (rainbow-delimiters-depth-1-face)) 39358 39359 (face (rainbow-delimiters-depth-1-face)) 39371 39372 (face (rainbow-delimiters-depth-1-face)) 39404 39421 (face font-lock-string-face) 39421 39422 (face (rainbow-delimiters-depth-1-face)) 39427 39445 (face font-lock-variable-name-face) 39467 39468 (face (rainbow-delimiters-depth-1-face)) 39507 39508 (face (rainbow-delimiters-depth-1-face)) 39520 39521 (face (rainbow-delimiters-depth-1-face)) 39550 39564 (face font-lock-string-face) 39564 39565 (face (rainbow-delimiters-depth-1-face)) 39568 39570 (face font-lock-comment-delimiter-face) 39570 39595 (face font-lock-comment-face) 39595 39596 (face font-lock-comment-face) 39596 39617 (face font-lock-comment-face) 39617 39748 (face font-lock-comment-face) 39762 39763 (face (rainbow-delimiters-depth-1-face)) 39776 39777 (face (rainbow-delimiters-depth-2-face)) 39778 39779 (face (rainbow-delimiters-depth-2-face)) 39779 39780 (face (rainbow-delimiters-depth-2-face)) 39783 39784 (face (rainbow-delimiters-depth-2-face)) 39795 39812 (face font-lock-string-face) 39812 39813 (face (rainbow-delimiters-depth-1-face))) . 1) (undo-tree-id442 . -1294) (undo-tree-id443 . -1294) (undo-tree-id444 . -29389) (undo-tree-id445 . -39751) (undo-tree-id446 . 39113) (undo-tree-id447 . -221) (undo-tree-id448 . 39593) (undo-tree-id449 . -221) (undo-tree-id450 . -221) (undo-tree-id451 . -280) (undo-tree-id452 . -739) (undo-tree-id453 . 39105) (undo-tree-id454 . -1256) (undo-tree-id455 . -1294) (undo-tree-id456 . -1577) (undo-tree-id457 . -1614) (undo-tree-id458 . -2112) (undo-tree-id459 . -2243) (undo-tree-id460 . -2562) (undo-tree-id461 . -2599) (undo-tree-id462 . -2689) (undo-tree-id463 . -2811) (undo-tree-id464 . -3211) (undo-tree-id465 . -3248) (undo-tree-id466 . -3338) (undo-tree-id467 . -3510) (undo-tree-id468 . -3883) (undo-tree-id469 . -3920) (undo-tree-id470 . -4010) (undo-tree-id471 . -4154) (undo-tree-id472 . -4523) (undo-tree-id473 . -4540) (undo-tree-id474 . -5156) (undo-tree-id475 . -5503) (undo-tree-id476 . -5676) (undo-tree-id477 . -5693) (undo-tree-id478 . -5856) (undo-tree-id479 . -6031) (undo-tree-id480 . -6384) (undo-tree-id481 . -6758) (undo-tree-id482 . -6924) (undo-tree-id483 . -7434) (undo-tree-id484 . -7837) (undo-tree-id485 . -7870) (undo-tree-id486 . -8494) (undo-tree-id487 . -8666) (undo-tree-id488 . -8757) (undo-tree-id489 . -9331) (undo-tree-id490 . -9390) (undo-tree-id491 . -10254) (undo-tree-id492 . -10788) (undo-tree-id493 . -12045) (undo-tree-id494 . -12513) (undo-tree-id495 . -12960) (undo-tree-id496 . -12997) (undo-tree-id497 . -13087) (undo-tree-id498 . -13259) (undo-tree-id499 . -13330) (undo-tree-id500 . -13775) (undo-tree-id501 . -13812) (undo-tree-id502 . -13902) (undo-tree-id503 . -14074) (undo-tree-id504 . -14850) (undo-tree-id505 . -15919) (undo-tree-id506 . -16729) (undo-tree-id507 . -17183) (undo-tree-id508 . -17512) (undo-tree-id509 . -18323) (undo-tree-id510 . -23) (undo-tree-id511 . -27) (undo-tree-id512 . -51) (undo-tree-id513 . -57) (undo-tree-id514 . -428) (undo-tree-id515 . -448) (undo-tree-id516 . -863) (undo-tree-id517 . -874) (undo-tree-id518 . -1199) (undo-tree-id519 . -1210) (undo-tree-id520 . -1565) (undo-tree-id521 . -1572) (undo-tree-id522 . -1579) (undo-tree-id523 . -1584) (undo-tree-id524 . -1616) (undo-tree-id525 . -1619) (undo-tree-id526 . -1813) (undo-tree-id527 . -1817) (undo-tree-id528 . -2114) (undo-tree-id529 . -2120) (undo-tree-id530 . -2146) (undo-tree-id531 . -2157) (undo-tree-id532 . -2245) (undo-tree-id533 . -2247) (undo-tree-id534 . -2367) (undo-tree-id535 . -2368) (undo-tree-id536 . -2550) (undo-tree-id537 . -2557) (undo-tree-id538 . -2564) (undo-tree-id539 . -2569) (undo-tree-id540 . -2601) (undo-tree-id541 . -2621) (undo-tree-id542 . -2691) (undo-tree-id543 . -2697) (undo-tree-id544 . -2723) (undo-tree-id545 . -2734) (undo-tree-id546 . -2813) (undo-tree-id547 . -2815) (undo-tree-id548 . -2974) (undo-tree-id549 . -2975) (undo-tree-id550 . -3199) (undo-tree-id551 . -3206) (undo-tree-id552 . -3213) (undo-tree-id553 . -3218) (undo-tree-id554 . -3250) (undo-tree-id555 . -3270) (undo-tree-id556 . -3340) (undo-tree-id557 . -3346) (undo-tree-id558 . -3372) (undo-tree-id559 . -3383) (undo-tree-id560 . -3512) (undo-tree-id561 . -3514) (undo-tree-id562 . -3673) (undo-tree-id563 . -3674) (undo-tree-id564 . -3871) (undo-tree-id565 . -3878) (undo-tree-id566 . -3885) (undo-tree-id567 . -3890) (undo-tree-id568 . -3922) (undo-tree-id569 . -3942) (undo-tree-id570 . -4012) (undo-tree-id571 . -4018) (undo-tree-id572 . -4044) (undo-tree-id573 . -4055) (undo-tree-id574 . -4156) (undo-tree-id575 . -4158) (undo-tree-id576 . -4233) (undo-tree-id577 . -4236) (undo-tree-id578 . -4247) (undo-tree-id579 . -4267) (undo-tree-id580 . -4525) (undo-tree-id581 . -4531) (undo-tree-id582 . -4542) (undo-tree-id583 . -4545) (undo-tree-id584 . -4637) (undo-tree-id585 . -4648) (undo-tree-id586 . -4737) (undo-tree-id587 . -4743) (undo-tree-id588 . -5106) (undo-tree-id589 . -5116) (undo-tree-id590 . -5158) (undo-tree-id591 . -5160) (undo-tree-id592 . -5200) (undo-tree-id593 . -5220) (undo-tree-id594 . -5505) (undo-tree-id595 . -5506) (undo-tree-id596 . -5678) (undo-tree-id597 . -5684) (undo-tree-id598 . -5695) (undo-tree-id599 . -5697) (undo-tree-id600 . -5834) (undo-tree-id601 . -5840) (undo-tree-id602 . -5858) (undo-tree-id603 . -5870) (undo-tree-id604 . -6033) (undo-tree-id605 . -6035) (undo-tree-id606 . -6303) (undo-tree-id607 . -6310) (undo-tree-id608 . -6386) (undo-tree-id609 . -6388) (undo-tree-id610 . -6547) (undo-tree-id611 . -6548) (undo-tree-id612 . -6746) (undo-tree-id613 . -6753) (undo-tree-id614 . -6760) (undo-tree-id615 . -6762) (undo-tree-id616 . -6789) (undo-tree-id617 . -6809) (undo-tree-id618 . -6926) (undo-tree-id619 . -6949) (undo-tree-id620 . -7062) (undo-tree-id621 . -7066) (undo-tree-id622 . -7436) (undo-tree-id623 . -7438) (undo-tree-id624 . -7478) (undo-tree-id625 . -7498) (undo-tree-id626 . -7747) (undo-tree-id627 . -7748) (undo-tree-id628 . -7839) (undo-tree-id629 . -7846) (undo-tree-id630 . -7872) (undo-tree-id631 . -7874) (undo-tree-id632 . -8033) (undo-tree-id633 . -8034) (undo-tree-id634 . -8482) (undo-tree-id635 . -8489) (undo-tree-id636 . -8496) (undo-tree-id637 . -8498) (undo-tree-id638 . -8525) (undo-tree-id639 . -8545) (undo-tree-id640 . -8668) (undo-tree-id641 . -8691) (undo-tree-id642 . -8759) (undo-tree-id643 . -8761) (undo-tree-id644 . -8920) (undo-tree-id645 . -8921) (undo-tree-id646 . -9288) (undo-tree-id647 . -9295) (undo-tree-id648 . -9333) (undo-tree-id649 . -9337) (undo-tree-id650 . -9333) (undo-tree-id651 . -9337) (undo-tree-id652 . -9392) (undo-tree-id653 . -9397) (undo-tree-id654 . -9671) (undo-tree-id655 . -9675) (undo-tree-id656 . -10256) (undo-tree-id657 . -10258) (undo-tree-id658 . -10743) (undo-tree-id659 . -10750) (undo-tree-id660 . -10790) (undo-tree-id661 . -10795) (undo-tree-id662 . -11287) (undo-tree-id663 . -11288) (undo-tree-id664 . -12047) (undo-tree-id665 . -12049) (undo-tree-id666 . -12208) (undo-tree-id667 . -12209) (undo-tree-id668 . -12490) (undo-tree-id669 . -12497) (undo-tree-id670 . -12515) (undo-tree-id671 . -12517) (undo-tree-id672 . -12948) (undo-tree-id673 . -12955) (undo-tree-id674 . -12962) (undo-tree-id675 . -12967) (undo-tree-id676 . -12999) (undo-tree-id677 . -13019) (undo-tree-id678 . -13089) (undo-tree-id679 . -13091) (undo-tree-id680 . -13118) (undo-tree-id681 . -13138) (undo-tree-id682 . -13261) (undo-tree-id683 . -13284) (undo-tree-id684 . -13332) (undo-tree-id685 . -13334) (undo-tree-id686 . -13763) (undo-tree-id687 . -13770) (undo-tree-id688 . -13777) (undo-tree-id689 . -13782) (undo-tree-id690 . -13814) (undo-tree-id691 . -13834) (undo-tree-id692 . -13904) (undo-tree-id693 . -13906) (undo-tree-id694 . -13933) (undo-tree-id695 . -13953) (undo-tree-id696 . -14076) (undo-tree-id697 . -14099) (undo-tree-id698 . -14852) (undo-tree-id699 . -14854) (undo-tree-id700 . -15042) (undo-tree-id701 . -15043) (undo-tree-id702 . -15414) (undo-tree-id703 . -15415) (undo-tree-id704 . -15921) (undo-tree-id705 . -15923) (undo-tree-id706 . -16497) (undo-tree-id707 . -16504) (undo-tree-id708 . -16587) (undo-tree-id709 . -16592) (undo-tree-id710 . -16731) (undo-tree-id711 . -16736) (undo-tree-id712 . -17185) (undo-tree-id713 . -17188) (undo-tree-id714 . -17346) (undo-tree-id715 . -17359) (undo-tree-id716 . -17514) (undo-tree-id717 . -17519) (undo-tree-id718 . -18255) (undo-tree-id719 . -18256) (undo-tree-id720 . -18325) (undo-tree-id721 . -18330) (undo-tree-id722 . -18473) (undo-tree-id723 . -18480) (undo-tree-id724 . -18564) (undo-tree-id725 . -18565) (undo-tree-id726 . -19142) (undo-tree-id727 . -19144) (undo-tree-id728 . -19246) (undo-tree-id729 . -19249) (undo-tree-id730 . -19713) (undo-tree-id731 . -19720) (undo-tree-id732 . -19843) (undo-tree-id733 . -19851) (undo-tree-id734 . -19937) (undo-tree-id735 . -19938) (undo-tree-id736 . -21144) (undo-tree-id737 . -21158) (undo-tree-id738 . -23188) (undo-tree-id739 . -23194) (undo-tree-id740 . -24198) (undo-tree-id741 . -24215) (undo-tree-id742 . -24601) (undo-tree-id743 . -24602) (undo-tree-id744 . -25035) (undo-tree-id745 . -25040) (undo-tree-id746 . -26464) (undo-tree-id747 . -26470) (undo-tree-id748 . -26827) (undo-tree-id749 . -26830) (undo-tree-id750 . -27209) (undo-tree-id751 . -27219) (undo-tree-id752 . -27393) (undo-tree-id753 . -27397) (undo-tree-id754 . -28613) (undo-tree-id755 . -28614) (undo-tree-id756 . -28918) (undo-tree-id757 . -28922) (undo-tree-id758 . -29176) (undo-tree-id759 . -29183) (undo-tree-id760 . -29226) (undo-tree-id761 . -29233) (undo-tree-id762 . -29467) (undo-tree-id763 . -29470) (undo-tree-id764 . -30317) (undo-tree-id765 . -30327) (undo-tree-id766 . -30545) (undo-tree-id767 . -30550) (undo-tree-id768 . -30977) (undo-tree-id769 . -30983) (undo-tree-id770 . -31431) (undo-tree-id771 . -31435) (undo-tree-id772 . -32241) (undo-tree-id773 . -32246) (undo-tree-id774 . -32971) (undo-tree-id775 . -32979) (undo-tree-id776 . -33279) (undo-tree-id777 . -33283) (undo-tree-id778 . -33731) (undo-tree-id779 . -33735) (undo-tree-id780 . -33879) (undo-tree-id781 . -33892) (undo-tree-id782 . -34046) (undo-tree-id783 . -34059) (undo-tree-id784 . -34213) (undo-tree-id785 . -34226) (undo-tree-id786 . -34622) (undo-tree-id787 . -34630) (undo-tree-id788 . -34774) (undo-tree-id789 . -34779) (undo-tree-id790 . -35072) (undo-tree-id791 . -35073) (undo-tree-id792 . -35277) (undo-tree-id793 . -35278) (undo-tree-id794 . -35570) (undo-tree-id795 . -35571) (undo-tree-id796 . -35908) (undo-tree-id797 . -35910) (undo-tree-id798 . -36573) (undo-tree-id799 . -36574) (undo-tree-id800 . -36820) (undo-tree-id801 . -36828) (undo-tree-id802 . -37100) (undo-tree-id803 . -37105) (undo-tree-id804 . -37526) (undo-tree-id805 . -37533) (undo-tree-id806 . -38795) (undo-tree-id807 . -38798) (undo-tree-id808 . -39075) (undo-tree-id809 . -39088) (undo-tree-id810 . -39208) (undo-tree-id811 . -39209) (undo-tree-id812 . -39354) (undo-tree-id813 . -39355) (undo-tree-id814 . -39506) (undo-tree-id815 . -39507) (undo-tree-id816 . -39647) (undo-tree-id817 . -39655) (undo-tree-id818 . -18485) (undo-tree-id819 . -19498) (undo-tree-id820 . -19730) (undo-tree-id821 . -19943) (undo-tree-id822 . -19959) (undo-tree-id823 . -19974) (undo-tree-id824 . -20230) (undo-tree-id825 . -20334) (undo-tree-id826 . -20358) (undo-tree-id827 . -20922) (undo-tree-id828 . -21433) (undo-tree-id829 . -21598) (undo-tree-id830 . -21750) (undo-tree-id831 . -22855) (undo-tree-id832 . -23061) (undo-tree-id833 . -23349) (undo-tree-id834 . -24219) (undo-tree-id835 . -24321) (undo-tree-id836 . -24400) (undo-tree-id837 . -24903) (undo-tree-id838 . -25947) (undo-tree-id839 . -26218) (undo-tree-id840 . -26462) (undo-tree-id841 . -26727) (undo-tree-id842 . -26841) (undo-tree-id843 . -27391) (undo-tree-id844 . -29309) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -23) (undo-tree-id848 . -27) (undo-tree-id849 . -51) (undo-tree-id850 . -57) (undo-tree-id851 . -51) (undo-tree-id852 . -57) (undo-tree-id853 . -66) (undo-tree-id854 . -72) (undo-tree-id855 . -90) (undo-tree-id856 . -94) (undo-tree-id857 . -119) (undo-tree-id858 . -125) (undo-tree-id859 . -138) (undo-tree-id860 . -142) (undo-tree-id861 . -163) (undo-tree-id862 . -169) (undo-tree-id863 . -188) (undo-tree-id864 . -194) (undo-tree-id865 . -406) (undo-tree-id866 . -413) (undo-tree-id867 . -1490) (undo-tree-id868 . -1497) (undo-tree-id869 . -1616) (undo-tree-id870 . -1619) (undo-tree-id871 . -1616) (undo-tree-id872 . -1619) (undo-tree-id873 . -2475) (undo-tree-id874 . -2482) (undo-tree-id875 . -3124) (undo-tree-id876 . -3131) (undo-tree-id877 . -3796) (undo-tree-id878 . -3803) (undo-tree-id879 . -4525) (undo-tree-id880 . -4531) (undo-tree-id881 . -4570) (undo-tree-id882 . -4571) (undo-tree-id883 . -4573) (undo-tree-id884 . -4574) (undo-tree-id885 . -4576) (undo-tree-id886 . -4582) (undo-tree-id887 . -4570) (undo-tree-id888 . -4571) (undo-tree-id889 . -4573) (undo-tree-id890 . -4574) (undo-tree-id891 . -4576) (undo-tree-id892 . -4582) (undo-tree-id893 . -4542) (undo-tree-id894 . -4545) (undo-tree-id895 . -4589) (undo-tree-id896 . -4596) (undo-tree-id897 . -5031) (undo-tree-id898 . -5032) (undo-tree-id899 . -5178) (undo-tree-id900 . -5185) (undo-tree-id901 . -5678) (undo-tree-id902 . -5684) (undo-tree-id903 . -6228) (undo-tree-id904 . -6235) (undo-tree-id905 . -6671) (undo-tree-id906 . -6678) (undo-tree-id907 . -6985) (undo-tree-id908 . -6986) (undo-tree-id909 . -7456) (undo-tree-id910 . -7463) (undo-tree-id911 . -7839) (undo-tree-id912 . -7846) (undo-tree-id913 . -8198) (undo-tree-id914 . -8204) (undo-tree-id915 . -8190) (undo-tree-id916 . -8196) (undo-tree-id917 . -8198) (undo-tree-id918 . -8204) (undo-tree-id919 . -8167) (undo-tree-id920 . -8170) (undo-tree-id921 . -8407) (undo-tree-id922 . -8414) (undo-tree-id923 . -9213) (undo-tree-id924 . -9220) (undo-tree-id925 . -9333) (undo-tree-id926 . -9337) (undo-tree-id927 . -9333) (undo-tree-id928 . -9337) (undo-tree-id929 . -9333) (undo-tree-id930 . -9337) (undo-tree-id931 . -9333) (undo-tree-id932 . -9337) (undo-tree-id933 . -9392) (undo-tree-id934 . -9397) (undo-tree-id935 . -9817) (undo-tree-id936 . -9823) (undo-tree-id937 . -9789) (undo-tree-id938 . -9792) (undo-tree-id939 . -10059) (undo-tree-id940 . -10065) (undo-tree-id941 . -10044) (undo-tree-id942 . -10047) (undo-tree-id943 . -10044) (undo-tree-id944 . -10047) (undo-tree-id945 . -10093) (undo-tree-id946 . -10103) (undo-tree-id947 . -10668) (undo-tree-id948 . -10675) (undo-tree-id949 . -10790) (undo-tree-id950 . -10795) (undo-tree-id951 . -11158) (undo-tree-id952 . -11164) (undo-tree-id953 . -11125) (undo-tree-id954 . -11128) (undo-tree-id955 . -11327) (undo-tree-id956 . -11333) (undo-tree-id957 . -11312) (undo-tree-id958 . -11315) (undo-tree-id959 . -11455) (undo-tree-id960 . -11462) (undo-tree-id961 . -11914) (undo-tree-id962 . -11916) (undo-tree-id963 . -12415) (undo-tree-id964 . -12422) (undo-tree-id965 . -12873) (undo-tree-id966 . -12880) (undo-tree-id967 . -13688) (undo-tree-id968 . -13695) (undo-tree-id969 . -15314) (undo-tree-id970 . -15321) (undo-tree-id971 . -16422) (undo-tree-id972 . -16429) (undo-tree-id973 . -16509) (undo-tree-id974 . -16510) (undo-tree-id975 . -16731) (undo-tree-id976 . -16736) (undo-tree-id977 . -16946) (undo-tree-id978 . -16952) (undo-tree-id979 . -16931) (undo-tree-id980 . -16934) (undo-tree-id981 . -16963) (undo-tree-id982 . -16972) (undo-tree-id983 . -17212) (undo-tree-id984 . -17218) (undo-tree-id985 . -17220) (undo-tree-id986 . -17229) (undo-tree-id987 . -17231) (undo-tree-id988 . -17244) (undo-tree-id989 . -17185) (undo-tree-id990 . -17188) (undo-tree-id991 . -17251) (undo-tree-id992 . -17252) (undo-tree-id993 . -17251) (undo-tree-id994 . -17252) (undo-tree-id995 . -17378) (undo-tree-id996 . -17379) (undo-tree-id997 . -17411) (undo-tree-id998 . -17412) (undo-tree-id999 . -17587) (undo-tree-id1000 . -17605) (undo-tree-id1001 . -17629) (undo-tree-id1002 . -17637) (undo-tree-id1003 . -17660) (undo-tree-id1004 . -17669) (undo-tree-id1005 . -17695) (undo-tree-id1006 . -17704) (undo-tree-id1007 . -18399) (undo-tree-id1008 . -18406) (undo-tree-id1009 . -18485) (undo-tree-id1010 . -18486) (undo-tree-id1011 . -19063) (undo-tree-id1012 . -19064) (undo-tree-id1013 . -19168) (undo-tree-id1014 . -19169) (undo-tree-id1015 . -19959) (undo-tree-id1016 . -19960) (undo-tree-id1017 . -19975) (undo-tree-id1018 . -19976) (undo-tree-id1019 . -20228) (undo-tree-id1020 . -20229) (undo-tree-id1021 . -20231) (undo-tree-id1022 . -20232) (undo-tree-id1023 . -20725) (undo-tree-id1024 . -20726) (undo-tree-id1025 . -20922) (undo-tree-id1026 . -20923) (undo-tree-id1027 . -20922) (undo-tree-id1028 . -20923) (undo-tree-id1029 . -20922) (undo-tree-id1030 . -20923) (undo-tree-id1031 . -20922) (undo-tree-id1032 . -20923) (undo-tree-id1033 . -20922) (undo-tree-id1034 . -20923) (undo-tree-id1035 . -20922) (undo-tree-id1036 . -20923) (undo-tree-id1037 . -20922) (undo-tree-id1038 . -20923) (undo-tree-id1039 . -20922) (undo-tree-id1040 . -20923) (undo-tree-id1041 . -20922) (undo-tree-id1042 . -20923) (undo-tree-id1043 . -20928) (undo-tree-id1044 . -20945) (undo-tree-id1045 . -20951) (undo-tree-id1046 . -20960) (undo-tree-id1047 . -20966) (undo-tree-id1048 . -20976) (undo-tree-id1049 . -21160) (undo-tree-id1050 . -21161) (undo-tree-id1051 . -21160) (undo-tree-id1052 . -21161) (undo-tree-id1053 . -22299) (undo-tree-id1054 . -22300) (undo-tree-id1055 . -22700) (undo-tree-id1056 . -22701) (undo-tree-id1057 . -22700) (undo-tree-id1058 . -22701) (undo-tree-id1059 . -22700) (undo-tree-id1060 . -22701) (undo-tree-id1061 . -22700) (undo-tree-id1062 . -22701) (undo-tree-id1063 . -22807) (undo-tree-id1064 . -22815) (undo-tree-id1065 . -23468) (undo-tree-id1066 . -23469) (undo-tree-id1067 . -24401) (undo-tree-id1068 . -24402) (undo-tree-id1069 . -24932) (undo-tree-id1070 . -24933) (undo-tree-id1071 . -25947) (undo-tree-id1072 . -25948) (undo-tree-id1073 . -25947) (undo-tree-id1074 . -25948) (undo-tree-id1075 . -26046) (undo-tree-id1076 . -26047) (undo-tree-id1077 . -26057) (undo-tree-id1078 . -26058) (undo-tree-id1079 . -26219) (undo-tree-id1080 . -26220) (undo-tree-id1081 . -26857) (undo-tree-id1082 . -26860) (undo-tree-id1083 . -26857) (undo-tree-id1084 . -26860) (undo-tree-id1085 . -26981) (undo-tree-id1086 . -26982) (undo-tree-id1087 . -27391) (undo-tree-id1088 . -27392) (undo-tree-id1089 . -28350) (undo-tree-id1090 . -28351) (undo-tree-id1091 . -28512) (undo-tree-id1092 . -28513) (undo-tree-id1093 . -28512) (undo-tree-id1094 . -28513) (undo-tree-id1095 . -28639) (undo-tree-id1096 . -28640) (undo-tree-id1097 . -28634) (undo-tree-id1098 . -28635) (undo-tree-id1099 . -28839) (undo-tree-id1100 . -28840) (undo-tree-id1101 . -29270) (undo-tree-id1102 . -29271) (undo-tree-id1103 . -30393) (undo-tree-id1104 . -30394) (undo-tree-id1105 . -30392) (undo-tree-id1106 . -30393) (undo-tree-id1107 . -30468) (undo-tree-id1108 . -30469) (undo-tree-id1109 . -30477) (undo-tree-id1110 . -30480) (undo-tree-id1111 . -30739) (undo-tree-id1112 . -30740) (undo-tree-id1113 . -30781) (undo-tree-id1114 . -30782) (undo-tree-id1115 . -31125) (undo-tree-id1116 . -31126) (undo-tree-id1117 . -31166) (undo-tree-id1118 . -31167) (undo-tree-id1119 . -31260) (undo-tree-id1120 . -31261) (undo-tree-id1121 . -31483) (undo-tree-id1122 . -31484) (undo-tree-id1123 . -31488) (undo-tree-id1124 . -31496) (undo-tree-id1125 . -31488) (undo-tree-id1126 . -31496) (undo-tree-id1127 . -31547) (undo-tree-id1128 . -31554) (undo-tree-id1129 . -31547) (undo-tree-id1130 . -31554) (undo-tree-id1131 . -31709) (undo-tree-id1132 . -31710) (undo-tree-id1133 . -31904) (undo-tree-id1134 . -31905) (undo-tree-id1135 . -31904) (undo-tree-id1136 . -31905) (undo-tree-id1137 . -31905) (undo-tree-id1138 . -31906) (undo-tree-id1139 . -32131) (undo-tree-id1140 . -32132) (undo-tree-id1141 . -34145) (undo-tree-id1142 . -34146) (undo-tree-id1143 . -34229) (undo-tree-id1144 . -34230) (undo-tree-id1145 . -34283) (undo-tree-id1146 . -34284) (undo-tree-id1147 . -34406) (undo-tree-id1148 . -34411) (undo-tree-id1149 . -36238) (undo-tree-id1150 . -36239) (undo-tree-id1151 . -36376) (undo-tree-id1152 . -36377) (undo-tree-id1153 . -36667) (undo-tree-id1154 . -36678) (undo-tree-id1155 . -36742) (undo-tree-id1156 . -36743) (undo-tree-id1157 . -36744) (undo-tree-id1158 . -36745) (undo-tree-id1159 . -36954) (undo-tree-id1160 . -36970) (undo-tree-id1161 . -36954) (undo-tree-id1162 . -36970) (undo-tree-id1163 . -36940) (undo-tree-id1164 . -36951) (undo-tree-id1165 . -37021) (undo-tree-id1166 . -37022) (undo-tree-id1167 . -37021) (undo-tree-id1168 . -37022) (undo-tree-id1169 . -37029) (undo-tree-id1170 . -37037) (undo-tree-id1171 . -38079) (undo-tree-id1172 . -38080) (undo-tree-id1173 . -38079) (undo-tree-id1174 . -38080) (undo-tree-id1175 . -38150) (undo-tree-id1176 . -38151) (undo-tree-id1177 . -38668) (undo-tree-id1178 . -38669) (undo-tree-id1179 . -39128) (undo-tree-id1180 . -39129) (undo-tree-id1181 . -39212) (undo-tree-id1182 . -39223) (undo-tree-id1183 . -39274) (undo-tree-id1184 . -39275) (undo-tree-id1185 . -39274) (undo-tree-id1186 . -39275) (undo-tree-id1187 . -39274) (undo-tree-id1188 . -39275) (undo-tree-id1189 . -39423) (undo-tree-id1190 . -39424) (undo-tree-id1191 . -39423) (undo-tree-id1192 . -39424) (undo-tree-id1193 . -39424) (undo-tree-id1194 . -39425) (undo-tree-id1195 . -39448) (undo-tree-id1196 . -39467) (undo-tree-id1197 . -39448) (undo-tree-id1198 . -39467) (undo-tree-id1199 . -39748) (undo-tree-id1200 . -39749) (undo-tree-id1201 . -39749) (undo-tree-id1202 . -39750) (undo-tree-id1203 . -39813) (undo-tree-id1204 . -39814) (undo-tree-id1205 . -29309) (undo-tree-id1206 . -29389) (undo-tree-id1207 . -29389) (undo-tree-id1208 . -30738) (undo-tree-id1209 . -30738) (undo-tree-id1210 . -31981) (undo-tree-id1211 . -31981) (undo-tree-id1212 . -33469) (undo-tree-id1213 . -33469) (undo-tree-id1214 . -34475) (undo-tree-id1215 . -34475) (undo-tree-id1216 . -35138) (undo-tree-id1217 . -35138) (undo-tree-id1218 . -35948) (undo-tree-id1219 . -35948) (undo-tree-id1220 . -36665) (undo-tree-id1221 . -36665) (undo-tree-id1222 . -36938) (undo-tree-id1223 . -36938) (undo-tree-id1224 . -38080) (undo-tree-id1225 . -38080) (undo-tree-id1226 . -39127) (undo-tree-id1227 . -39127) (undo-tree-id1228 . -39273) (undo-tree-id1229 . -39273) (undo-tree-id1230 . -39425) (undo-tree-id1231 . -39425) (undo-tree-id1232 . -39749) (undo-tree-id1233 . -39749) (undo-tree-id1234 . -1294) (undo-tree-id1235 . -1294) (undo-tree-id1236 . -18485) (undo-tree-id1237 . -29389) (undo-tree-id1238 . -29389) (undo-tree-id1239 . -29389) (undo-tree-id1240 . -29389) (undo-tree-id1241 . -29389) (undo-tree-id1242 . -29389) (undo-tree-id1243 . -29389) (undo-tree-id1244 . -29389) (undo-tree-id1245 . -29389) (undo-tree-id1246 . -29389) (undo-tree-id1247 . -29389) (undo-tree-id1248 . -29389) (undo-tree-id1249 . -29389) (undo-tree-id1250 . -29389) (undo-tree-id1251 . -29389) (undo-tree-id1252 . -29389) (undo-tree-id1253 . -29389) (undo-tree-id1254 . -29389) (undo-tree-id1255 . -29389) (undo-tree-id1256 . -29389) (undo-tree-id1257 . -29389) (undo-tree-id1258 . -29389) (undo-tree-id1259 . -29389) (undo-tree-id1260 . -29389) (undo-tree-id1261 . -29389) (undo-tree-id1262 . -29389) (undo-tree-id1263 . -29389) (undo-tree-id1264 . -29389) (undo-tree-id1265 . -29389) (undo-tree-id1266 . -29389) (undo-tree-id1267 . -29389) (undo-tree-id1268 . -29389) (undo-tree-id1269 . -29389) (undo-tree-id1270 . -29389) (undo-tree-id1271 . -29389) (undo-tree-id1272 . -29389) (undo-tree-id1273 . -29389) (undo-tree-id1274 . -29389) (undo-tree-id1275 . -29389) (undo-tree-id1276 . -29389) (undo-tree-id1277 . -29389) (undo-tree-id1278 . -29389) (undo-tree-id1279 . -29389) (undo-tree-id1280 . -29389) (undo-tree-id1281 . -29389) (undo-tree-id1282 . -29389) (undo-tree-id1283 . -29389) (undo-tree-id1284 . -29389) (undo-tree-id1285 . -29389) (undo-tree-id1286 . -29389) (undo-tree-id1287 . -29389) (undo-tree-id1288 . -29389) (undo-tree-id1289 . -29389) (undo-tree-id1290 . -29389) (undo-tree-id1291 . -29389) (undo-tree-id1292 . -29389) (undo-tree-id1293 . -29389) (undo-tree-id1294 . -29389) (undo-tree-id1295 . -29389) (undo-tree-id1296 . -29389) (undo-tree-id1297 . -29389) (undo-tree-id1298 . -29389) (undo-tree-id1299 . -29389) (undo-tree-id1300 . -29389) (undo-tree-id1301 . -29389) (undo-tree-id1302 . -29389) (undo-tree-id1303 . -29389) (undo-tree-id1304 . -29389) (undo-tree-id1305 . -29389) (undo-tree-id1306 . -29389) (undo-tree-id1307 . -29389) (undo-tree-id1308 . -29389) (undo-tree-id1309 . -29389) (undo-tree-id1310 . -29389) (undo-tree-id1311 . -29389) (undo-tree-id1312 . -29389) (undo-tree-id1313 . -29389) (undo-tree-id1314 . -29389) (undo-tree-id1315 . -29389) (undo-tree-id1316 . -29389) (undo-tree-id1317 . -29389) (undo-tree-id1318 . -29389) (undo-tree-id1319 . -29389) (undo-tree-id1320 . -29389) (undo-tree-id1321 . -29389) (undo-tree-id1322 . -29389) (undo-tree-id1323 . -29389) (undo-tree-id1324 . -29389) (undo-tree-id1325 . -29389) (undo-tree-id1326 . -29389) (undo-tree-id1327 . -29389) (undo-tree-id1328 . -29389) (undo-tree-id1329 . -29389) (undo-tree-id1330 . -29389) (undo-tree-id1331 . -29389) (undo-tree-id1332 . -29389) (undo-tree-id1333 . -29389) (undo-tree-id1334 . -29389) (undo-tree-id1335 . -29389) (undo-tree-id1336 . -29389) (undo-tree-id1337 . -29389) (undo-tree-id1338 . -29389) (undo-tree-id1339 . -29389) (undo-tree-id1340 . -29389) (undo-tree-id1341 . -29389) (undo-tree-id1342 . -29389) (undo-tree-id1343 . -29389) (undo-tree-id1344 . -29389) (undo-tree-id1345 . -29389) (undo-tree-id1346 . -29389) (undo-tree-id1347 . -29389) (undo-tree-id1348 . -6651) (undo-tree-id1349 . -29389) (undo-tree-id1350 . -29389) (undo-tree-id1351 . -29389) (undo-tree-id1352 . -29389) (undo-tree-id1353 . -29389) (undo-tree-id1354 . -29389) (undo-tree-id1355 . -29389) (undo-tree-id1356 . -29389) (undo-tree-id1357 . -29389) (undo-tree-id1358 . -29389) (undo-tree-id1359 . -29389) (undo-tree-id1360 . -29389) (undo-tree-id1361 . -29389) (undo-tree-id1362 . -29389) (undo-tree-id1363 . -29389) (undo-tree-id1364 . -29389) (undo-tree-id1365 . -29389) (undo-tree-id1366 . -29389) (undo-tree-id1367 . -29389) (undo-tree-id1368 . -29389) (undo-tree-id1369 . -29389) (undo-tree-id1370 . -29389) (undo-tree-id1371 . -29389) (undo-tree-id1372 . -29389) (undo-tree-id1373 . -29389) (undo-tree-id1374 . -29389) (undo-tree-id1375 . -29389) (undo-tree-id1376 . -29389) (undo-tree-id1377 . -29389) (undo-tree-id1378 . -29389) (undo-tree-id1379 . -29389) (undo-tree-id1380 . -29389) (undo-tree-id1381 . -18485) (undo-tree-id1382 . -29389) (undo-tree-id1383 . -29389) (undo-tree-id1384 . -18485) (undo-tree-id1385 . -18485) (undo-tree-id1386 . -18485) (undo-tree-id1387 . -18485) (undo-tree-id1388 . -18485) (undo-tree-id1389 . -18485) (undo-tree-id1390 . -18485) (undo-tree-id1391 . -18485) (undo-tree-id1392 . -18485) (undo-tree-id1393 . -18485) (undo-tree-id1394 . -18485) (undo-tree-id1395 . -18485) (undo-tree-id1396 . -18485) (undo-tree-id1397 . -18485) (undo-tree-id1398 . -18485) (undo-tree-id1399 . -18485) (undo-tree-id1400 . -18485) (undo-tree-id1401 . -18485) (undo-tree-id1402 . -18485) (undo-tree-id1403 . -18485) (undo-tree-id1404 . -18485) (undo-tree-id1405 . -18485) (undo-tree-id1406 . -18485) (undo-tree-id1407 . -18485) (undo-tree-id1408 . -18485) (undo-tree-id1409 . -18485) (undo-tree-id1410 . -18485) (undo-tree-id1411 . -18485) (undo-tree-id1412 . -18485) (undo-tree-id1413 . -18485) (undo-tree-id1414 . -18485) (undo-tree-id1415 . -18485) (undo-tree-id1416 . -18485) (undo-tree-id1417 . -18485) (undo-tree-id1418 . -18485) (undo-tree-id1419 . -18485) (undo-tree-id1420 . -18485) (undo-tree-id1421 . -18485) (undo-tree-id1422 . -18485) (undo-tree-id1423 . -18485) (undo-tree-id1424 . -18485) (undo-tree-id1425 . -18485) (undo-tree-id1426 . -18485) (undo-tree-id1427 . -18485) (undo-tree-id1428 . -18485) (undo-tree-id1429 . -18485) (undo-tree-id1430 . -18485) (undo-tree-id1431 . -18485) (undo-tree-id1432 . -18485) (undo-tree-id1433 . -18485) (undo-tree-id1434 . -18485) (undo-tree-id1435 . -18485) (undo-tree-id1436 . -18485) (undo-tree-id1437 . -18485) (undo-tree-id1438 . -18485) (undo-tree-id1439 . -18485) (undo-tree-id1440 . -18485) (undo-tree-id1441 . -18485) (undo-tree-id1442 . -18485) (undo-tree-id1443 . -18485) (undo-tree-id1444 . -18485) (undo-tree-id1445 . -18485) (undo-tree-id1446 . -18485) (undo-tree-id1447 . -18485) (undo-tree-id1448 . -18485) (undo-tree-id1449 . -18485) (undo-tree-id1450 . -18485) (undo-tree-id1451 . -18485) (undo-tree-id1452 . -18485) (undo-tree-id1453 . -18485) (undo-tree-id1454 . -18485) (undo-tree-id1455 . -18485) (undo-tree-id1456 . -18485) (undo-tree-id1457 . -18485) (undo-tree-id1458 . -18485) (undo-tree-id1459 . -18485) (undo-tree-id1460 . -18485) (undo-tree-id1461 . -18485) (undo-tree-id1462 . -18485) (undo-tree-id1463 . -18485) (undo-tree-id1464 . -18485) (undo-tree-id1465 . -18485) (undo-tree-id1466 . -18485) (undo-tree-id1467 . -18485) (undo-tree-id1468 . -18485) (undo-tree-id1469 . -18485) (undo-tree-id1470 . -18485) (undo-tree-id1471 . -18485) (undo-tree-id1472 . -18485) (undo-tree-id1473 . -18485) (undo-tree-id1474 . -18485) (undo-tree-id1475 . -18485) (undo-tree-id1476 . -18485) (undo-tree-id1477 . -18485) (undo-tree-id1478 . -18485) (undo-tree-id1479 . -18485) (undo-tree-id1480 . -18485) (undo-tree-id1481 . -18485) (undo-tree-id1482 . -18485) (undo-tree-id1483 . -18485) (undo-tree-id1484 . -18485) (undo-tree-id1485 . -18485) (undo-tree-id1486 . -18485) (undo-tree-id1487 . -18485) (undo-tree-id1488 . -18485) (undo-tree-id1489 . -18485) (undo-tree-id1490 . -18485) (undo-tree-id1491 . -18485) (undo-tree-id1492 . -18485) (undo-tree-id1493 . -18485) (undo-tree-id1494 . -18485) (undo-tree-id1495 . -18485) (undo-tree-id1496 . -18485) (undo-tree-id1497 . -18485) (undo-tree-id1498 . -18485) (undo-tree-id1499 . -18485) (undo-tree-id1500 . -18485) (undo-tree-id1501 . -18485) (undo-tree-id1502 . -18485) (undo-tree-id1503 . -18485) (undo-tree-id1504 . -18485) (undo-tree-id1505 . -18485) (undo-tree-id1506 . -18485) (undo-tree-id1507 . -18485) (undo-tree-id1508 . -18485) (undo-tree-id1509 . -18485) (undo-tree-id1510 . -18485) (undo-tree-id1511 . -18485) (undo-tree-id1512 . -18485) (undo-tree-id1513 . -18485) (undo-tree-id1514 . -18485) (undo-tree-id1515 . -18485) (undo-tree-id1516 . -18485) (undo-tree-id1517 . -18485) (undo-tree-id1518 . -18485) (undo-tree-id1519 . -18485) (undo-tree-id1520 . -18485) (undo-tree-id1521 . -18485) (undo-tree-id1522 . -18485) (undo-tree-id1523 . -18485) (undo-tree-id1524 . -18485) (undo-tree-id1525 . -18485) (undo-tree-id1526 . -18485) (undo-tree-id1527 . -18485) (undo-tree-id1528 . -18485) (undo-tree-id1529 . -18485) (undo-tree-id1530 . -18485) (undo-tree-id1531 . -18485) (undo-tree-id1532 . -18485) (undo-tree-id1533 . -18485) (undo-tree-id1534 . -18485) (undo-tree-id1535 . -18485) (undo-tree-id1536 . -18485) (undo-tree-id1537 . -18485) (undo-tree-id1538 . -18485) (undo-tree-id1539 . -18485) (undo-tree-id1540 . -18485) (undo-tree-id1541 . -18485) (undo-tree-id1542 . -18485) (undo-tree-id1543 . -18485) (undo-tree-id1544 . -18485) (undo-tree-id1545 . -18485) (undo-tree-id1546 . -18485) (undo-tree-id1547 . -18485) (undo-tree-id1548 . -18485) (undo-tree-id1549 . -18485) (undo-tree-id1550 . -18485) (undo-tree-id1551 . -18485) (undo-tree-id1552 . -18485) (undo-tree-id1553 . -18485) (undo-tree-id1554 . -18485) (undo-tree-id1555 . -18485) (undo-tree-id1556 . -18485) (undo-tree-id1557 . -18485) (undo-tree-id1558 . -18485) (undo-tree-id1559 . -18485) (undo-tree-id1560 . -18485) (undo-tree-id1561 . -18485) (undo-tree-id1562 . -18485) (undo-tree-id1563 . -18485) (undo-tree-id1564 . -18485) (undo-tree-id1565 . -18485) (undo-tree-id1566 . -18485) (undo-tree-id1567 . -18485) (undo-tree-id1568 . -18485) (undo-tree-id1569 . -18485) (undo-tree-id1570 . -18485) (undo-tree-id1571 . -18485) (undo-tree-id1572 . -18485) (undo-tree-id1573 . -18485) (undo-tree-id1574 . -18485) (undo-tree-id1575 . -18485) (undo-tree-id1576 . -18485) (undo-tree-id1577 . -18485) (undo-tree-id1578 . -18485) (undo-tree-id1579 . -18485) (undo-tree-id1580 . -18485) (undo-tree-id1581 . -18485) (undo-tree-id1582 . -18485) (undo-tree-id1583 . -18485) (undo-tree-id1584 . -18485) (undo-tree-id1585 . -18485) (undo-tree-id1586 . -18485) (undo-tree-id1587 . -18485) (undo-tree-id1588 . -18485) (undo-tree-id1589 . -18485) (undo-tree-id1590 . -18485) (undo-tree-id1591 . -18485) (undo-tree-id1592 . -18485) (undo-tree-id1593 . -18485) (undo-tree-id1594 . -18485) (undo-tree-id1595 . -18485) (undo-tree-id1596 . -18485) (undo-tree-id1597 . -18485) (undo-tree-id1598 . -18485) (undo-tree-id1599 . -18485) (undo-tree-id1600 . -18485) (undo-tree-id1601 . -18485) (undo-tree-id1602 . -18485) (undo-tree-id1603 . -18485) (undo-tree-id1604 . -18485) (undo-tree-id1605 . -18485) (undo-tree-id1606 . -18485) (undo-tree-id1607 . -18485) (undo-tree-id1608 . -18485) (undo-tree-id1609 . -18485) (undo-tree-id1610 . -18485) (undo-tree-id1611 . -18485) (undo-tree-id1612 . -18485) (undo-tree-id1613 . -18485) (undo-tree-id1614 . -18485) (undo-tree-id1615 . -18485) (undo-tree-id1616 . -18485) (undo-tree-id1617 . -18485) (undo-tree-id1618 . -18485) (undo-tree-id1619 . -18485) (undo-tree-id1620 . -18485) (undo-tree-id1621 . -18485) (undo-tree-id1622 . -18485) (undo-tree-id1623 . -18485) (undo-tree-id1624 . -18485) (undo-tree-id1625 . -18485) (undo-tree-id1626 . -18485) (undo-tree-id1627 . -18485) (undo-tree-id1628 . -18485) (undo-tree-id1629 . -18485) (undo-tree-id1630 . -18485) (undo-tree-id1631 . -18485) (undo-tree-id1632 . -18485) (undo-tree-id1633 . -18485) (undo-tree-id1634 . -18485) (undo-tree-id1635 . -18485) (undo-tree-id1636 . -18485) (undo-tree-id1637 . -18485) (undo-tree-id1638 . -18485) (undo-tree-id1639 . -18485) (undo-tree-id1640 . -18485) (undo-tree-id1641 . -18485) (undo-tree-id1642 . -18485) (undo-tree-id1643 . -18485) (undo-tree-id1644 . -18485) (undo-tree-id1645 . -18485) (undo-tree-id1646 . -18485) (undo-tree-id1647 . -18485) (undo-tree-id1648 . -18485) (undo-tree-id1649 . -18485) (undo-tree-id1650 . -18485) (undo-tree-id1651 . -18485) (undo-tree-id1652 . -18485) (undo-tree-id1653 . -18485) (undo-tree-id1654 . -18485) (undo-tree-id1655 . -18485) (undo-tree-id1656 . -18485) (undo-tree-id1657 . -18485) (undo-tree-id1658 . -18485) (undo-tree-id1659 . -18485) (undo-tree-id1660 . -18485) (undo-tree-id1661 . -18485) (undo-tree-id1662 . -18485) (undo-tree-id1663 . -18485) (undo-tree-id1664 . -18485) (undo-tree-id1665 . -18485) (undo-tree-id1666 . -18485) (undo-tree-id1667 . -18485) (undo-tree-id1668 . -18485) (undo-tree-id1669 . -18485) (undo-tree-id1670 . -18485) (undo-tree-id1671 . -18485) (undo-tree-id1672 . -18485) (undo-tree-id1673 . -18485) (undo-tree-id1674 . -18485) (undo-tree-id1675 . -18485) (undo-tree-id1676 . -18485) (undo-tree-id1677 . -18485) (undo-tree-id1678 . -18485) (undo-tree-id1679 . -18485) (undo-tree-id1680 . -18485) (undo-tree-id1681 . -18485) (undo-tree-id1682 . -18485) (undo-tree-id1683 . -18485) (undo-tree-id1684 . -18485) (undo-tree-id1685 . -18485) (undo-tree-id1686 . -18485) (undo-tree-id1687 . -18485) (undo-tree-id1688 . -18485) (undo-tree-id1689 . -18485) (undo-tree-id1690 . -18485) (undo-tree-id1691 . -18485) (undo-tree-id1692 . -18485) (undo-tree-id1693 . -18485) (undo-tree-id1694 . -18485) (undo-tree-id1695 . -18485) (undo-tree-id1696 . -18485) (undo-tree-id1697 . -18485) (undo-tree-id1698 . -18485) (undo-tree-id1699 . -18485) (undo-tree-id1700 . -18485) (undo-tree-id1701 . -18485) (undo-tree-id1702 . -18485) (undo-tree-id1703 . -18485) (undo-tree-id1704 . -18485) (undo-tree-id1705 . -18485) (undo-tree-id1706 . -18485) (undo-tree-id1707 . -18485) (undo-tree-id1708 . -18485) (undo-tree-id1709 . -18485) (undo-tree-id1710 . -18485) (undo-tree-id1711 . -18485) (undo-tree-id1712 . -18485) (undo-tree-id1713 . -18485) (undo-tree-id1714 . -18485) (undo-tree-id1715 . -18485) (undo-tree-id1716 . -18485) (undo-tree-id1717 . -18485) (undo-tree-id1718 . -18485) (undo-tree-id1719 . -18485) (undo-tree-id1720 . -18485) (undo-tree-id1721 . -18485) (undo-tree-id1722 . -18485) (undo-tree-id1723 . -18485) (undo-tree-id1724 . -18485) (undo-tree-id1725 . -18485) (undo-tree-id1726 . -18485) (undo-tree-id1727 . -18485) (undo-tree-id1728 . -18485) (undo-tree-id1729 . -18485) (undo-tree-id1730 . -18485) (undo-tree-id1731 . -18485) (undo-tree-id1732 . -18485) (undo-tree-id1733 . -18485) (undo-tree-id1734 . -18485) (undo-tree-id1735 . -18485) (undo-tree-id1736 . -18485) (undo-tree-id1737 . -18485) (undo-tree-id1738 . -18485) (undo-tree-id1739 . -18485) (undo-tree-id1740 . -18485) (undo-tree-id1741 . -18485) (undo-tree-id1742 . -18485) (undo-tree-id1743 . -18485) (undo-tree-id1744 . -18485) (undo-tree-id1745 . -18485) (undo-tree-id1746 . -18485) (undo-tree-id1747 . -18485) (undo-tree-id1748 . -18485) (undo-tree-id1749 . -18485) (undo-tree-id1750 . -18485) (undo-tree-id1751 . -18485) (undo-tree-id1752 . -18485) (undo-tree-id1753 . -18485) (undo-tree-id1754 . -18485) (undo-tree-id1755 . -18485) (undo-tree-id1756 . -18485) (undo-tree-id1757 . -18485) (undo-tree-id1758 . -18485) (undo-tree-id1759 . -18485) (undo-tree-id1760 . -18485) (undo-tree-id1761 . -18485) (undo-tree-id1762 . -18485) (undo-tree-id1763 . -18485) (undo-tree-id1764 . -18485) (undo-tree-id1765 . -18485) (undo-tree-id1766 . -18485) (undo-tree-id1767 . -18485) (undo-tree-id1768 . -18485) (undo-tree-id1769 . -18485) (undo-tree-id1770 . -18485) (undo-tree-id1771 . -18485) (undo-tree-id1772 . -18485) (undo-tree-id1773 . -18485) (undo-tree-id1774 . -18485) (undo-tree-id1775 . -18485) (undo-tree-id1776 . -18485) (undo-tree-id1777 . -18485) (undo-tree-id1778 . -18485) (undo-tree-id1779 . -18485) (undo-tree-id1780 . -18485) (undo-tree-id1781 . -18485) (undo-tree-id1782 . -18485) (undo-tree-id1783 . -18485) (undo-tree-id1784 . -18485) (undo-tree-id1785 . -18485) (undo-tree-id1786 . -18485) (undo-tree-id1787 . -18485) (undo-tree-id1788 . -18485) (undo-tree-id1789 . -18485) (undo-tree-id1790 . -18485) (undo-tree-id1791 . -18485) (undo-tree-id1792 . -18485) (undo-tree-id1793 . -18485) (undo-tree-id1794 . -18485) (undo-tree-id1795 . -18485) (undo-tree-id1796 . -18485) (undo-tree-id1797 . -18485) (undo-tree-id1798 . -18485) (undo-tree-id1799 . -18485) (undo-tree-id1800 . -18485) (undo-tree-id1801 . -18485) (undo-tree-id1802 . -18485) (undo-tree-id1803 . -18485) (undo-tree-id1804 . -18485) (undo-tree-id1805 . -18485) (undo-tree-id1806 . -18485) (undo-tree-id1807 . -18485) (undo-tree-id1808 . -18485) (undo-tree-id1809 . -18485) (undo-tree-id1810 . -18485) (undo-tree-id1811 . -18485) (undo-tree-id1812 . -18485) (undo-tree-id1813 . -18485) (undo-tree-id1814 . -18485) (undo-tree-id1815 . -18485) (undo-tree-id1816 . -18485) (undo-tree-id1817 . -18485) (undo-tree-id1818 . -18485) (undo-tree-id1819 . -18485) (undo-tree-id1820 . -18485) (undo-tree-id1821 . -18485) (undo-tree-id1822 . -18485) (undo-tree-id1823 . -18485) (undo-tree-id1824 . -18485) (undo-tree-id1825 . -18485) (undo-tree-id1826 . -18485) (undo-tree-id1827 . -18485) (undo-tree-id1828 . -18485) (undo-tree-id1829 . -18485) (undo-tree-id1830 . -18485) (undo-tree-id1831 . -18485) (undo-tree-id1832 . -18485) (undo-tree-id1833 . -18485) (undo-tree-id1834 . -18485) (undo-tree-id1835 . -18485) (undo-tree-id1836 . -18485) (undo-tree-id1837 . -18485) (undo-tree-id1838 . -18485) (undo-tree-id1839 . -18485) (undo-tree-id1840 . -18485) (undo-tree-id1841 . -18485) (undo-tree-id1842 . -18485) (undo-tree-id1843 . -18485) (undo-tree-id1844 . -18485) (undo-tree-id1845 . -18485) (undo-tree-id1846 . -18485) (undo-tree-id1847 . -18485) (undo-tree-id1848 . -18485) (undo-tree-id1849 . -18485) (undo-tree-id1850 . -18485) (undo-tree-id1851 . -18485) (undo-tree-id1852 . -18485) (undo-tree-id1853 . -18485) (undo-tree-id1854 . -18485) (undo-tree-id1855 . -18485) (undo-tree-id1856 . -18485) (undo-tree-id1857 . -18485) (undo-tree-id1858 . -18485) (undo-tree-id1859 . -18485) (undo-tree-id1860 . -18485) (undo-tree-id1861 . -18485) (undo-tree-id1862 . -18485) (undo-tree-id1863 . -18485) (undo-tree-id1864 . -18485) (undo-tree-id1865 . -18485) (undo-tree-id1866 . -18485) (undo-tree-id1867 . -18485) (undo-tree-id1868 . -18485) (undo-tree-id1869 . -18485) (undo-tree-id1870 . -18485) (undo-tree-id1871 . -18485) (undo-tree-id1872 . -18485) (undo-tree-id1873 . -18485) (undo-tree-id1874 . -18485) (undo-tree-id1875 . -18485) (undo-tree-id1876 . -18485) (undo-tree-id1877 . -18485) (undo-tree-id1878 . -18485) (undo-tree-id1879 . -18485) (undo-tree-id1880 . -18485) (undo-tree-id1881 . -18485) (undo-tree-id1882 . -18485) (undo-tree-id1883 . -18485) (undo-tree-id1884 . -18485) (undo-tree-id1885 . -18485) (undo-tree-id1886 . -18485) (undo-tree-id1887 . -18485) (undo-tree-id1888 . -18485) (undo-tree-id1889 . -18485) (undo-tree-id1890 . -18485) (undo-tree-id1891 . -18485) (undo-tree-id1892 . -18485) (undo-tree-id1893 . -18485) (undo-tree-id1894 . -18485) (undo-tree-id1895 . -18485) (undo-tree-id1896 . -18485) (undo-tree-id1897 . -18485) (undo-tree-id1898 . -18485) (undo-tree-id1899 . -18485) (undo-tree-id1900 . -18485) (undo-tree-id1901 . -18485) (undo-tree-id1902 . -18485) (undo-tree-id1903 . -18485) (undo-tree-id1904 . -18485) (undo-tree-id1905 . -18485) (undo-tree-id1906 . -29389) (undo-tree-id1907 . -18485) (undo-tree-id1908 . -18485) (undo-tree-id1909 . -29389) (undo-tree-id1910 . -29389) (undo-tree-id1911 . -29389) (undo-tree-id1912 . -29389) (undo-tree-id1913 . -29389) (undo-tree-id1914 . -29389) (undo-tree-id1915 . -29389) (undo-tree-id1916 . -29389) (undo-tree-id1917 . -29389) (undo-tree-id1918 . -29389) (undo-tree-id1919 . -29389) (undo-tree-id1920 . -29389) (undo-tree-id1921 . -29389) (undo-tree-id1922 . -29389) (undo-tree-id1923 . -29389) (undo-tree-id1924 . -29389) (undo-tree-id1925 . -29389) (undo-tree-id1926 . -29389) (undo-tree-id1927 . -29389) (undo-tree-id1928 . -29389) (undo-tree-id1929 . -29389) (undo-tree-id1930 . -29389) (undo-tree-id1931 . -29389) (undo-tree-id1932 . -29389) (undo-tree-id1933 . -29389) (undo-tree-id1934 . -29389) (undo-tree-id1935 . -29389) (undo-tree-id1936 . -29389) (undo-tree-id1937 . -29389) (undo-tree-id1938 . -29389) (undo-tree-id1939 . -29389) (undo-tree-id1940 . -29389) (undo-tree-id1941 . -29389) (undo-tree-id1942 . -29389) (undo-tree-id1943 . -29389) (undo-tree-id1944 . -6651) (undo-tree-id1945 . -29389) (undo-tree-id1946 . -29389) (undo-tree-id1947 . -29389) (undo-tree-id1948 . -29389) (undo-tree-id1949 . -29389) (undo-tree-id1950 . -29389) (undo-tree-id1951 . -29389) (undo-tree-id1952 . -29389) (undo-tree-id1953 . -29389) (undo-tree-id1954 . -29389) (undo-tree-id1955 . -29389) (undo-tree-id1956 . -29389) (undo-tree-id1957 . -29389) (undo-tree-id1958 . -29389) (undo-tree-id1959 . -29389) (undo-tree-id1960 . -29389) (undo-tree-id1961 . -29389) (undo-tree-id1962 . -29389) (undo-tree-id1963 . -29389) (undo-tree-id1964 . -29389) (undo-tree-id1965 . -29389) (undo-tree-id1966 . -29389) (undo-tree-id1967 . -29389) (undo-tree-id1968 . -29389) (undo-tree-id1969 . -29389) (undo-tree-id1970 . -29389) (undo-tree-id1971 . -29389) (undo-tree-id1972 . -29389) (undo-tree-id1973 . -29389) (undo-tree-id1974 . -29389) (undo-tree-id1975 . -29389) (undo-tree-id1976 . -29389) (undo-tree-id1977 . -29389) (undo-tree-id1978 . -29389) (undo-tree-id1979 . -29389) (undo-tree-id1980 . -29389) (undo-tree-id1981 . -29389) (undo-tree-id1982 . -29389) (undo-tree-id1983 . -29389) (undo-tree-id1984 . -29389) (undo-tree-id1985 . -29389) (undo-tree-id1986 . -29389) (undo-tree-id1987 . -29389) (undo-tree-id1988 . -29389) (undo-tree-id1989 . -29389) (undo-tree-id1990 . -29389) (undo-tree-id1991 . -29389) (undo-tree-id1992 . -29389) (undo-tree-id1993 . -29389) (undo-tree-id1994 . -29389) (undo-tree-id1995 . -29389) (undo-tree-id1996 . -29389) (undo-tree-id1997 . -29389) (undo-tree-id1998 . -29389) (undo-tree-id1999 . -29389) (undo-tree-id2000 . -29389) (undo-tree-id2001 . -29389) (undo-tree-id2002 . -29389) (undo-tree-id2003 . -29389) (undo-tree-id2004 . -29389) (undo-tree-id2005 . -29389) (undo-tree-id2006 . -29389) (undo-tree-id2007 . -29389) (undo-tree-id2008 . -29389) (undo-tree-id2009 . -29389) (undo-tree-id2010 . -29389) (undo-tree-id2011 . -29389) (undo-tree-id2012 . -29389) (undo-tree-id2013 . -29389) (undo-tree-id2014 . -29389) (undo-tree-id2015 . -29389) (undo-tree-id2016 . -29389) (undo-tree-id2017 . -29389) (undo-tree-id2018 . -29389) (undo-tree-id2019 . -29389) (undo-tree-id2020 . -29389) (undo-tree-id2021 . -29389) (undo-tree-id2022 . -29389) (undo-tree-id2023 . -29389) (undo-tree-id2024 . -29389) (undo-tree-id2025 . -29389) (undo-tree-id2026 . -29389) (undo-tree-id2027 . -29389) (undo-tree-id2028 . -29389) (undo-tree-id2029 . -29389) (undo-tree-id2030 . -29389) (undo-tree-id2031 . -29389) (undo-tree-id2032 . -29389) (undo-tree-id2033 . -29389) (undo-tree-id2034 . -29389) (undo-tree-id2035 . -29389) (undo-tree-id2036 . -29389) (undo-tree-id2037 . -29389) (undo-tree-id2038 . -29389) (undo-tree-id2039 . -29389) (undo-tree-id2040 . -29389) (undo-tree-id2041 . -29389) (undo-tree-id2042 . -29389) (undo-tree-id2043 . -29389) (undo-tree-id2044 . -29389) (undo-tree-id2045 . -29389) (undo-tree-id2046 . -29389) (undo-tree-id2047 . -29389) (undo-tree-id2048 . -29389) (undo-tree-id2049 . -29389) (undo-tree-id2050 . -29389) (undo-tree-id2051 . -29389) (undo-tree-id2052 . -29389) (undo-tree-id2053 . -29389) (undo-tree-id2054 . -29389) (undo-tree-id2055 . -29389) (undo-tree-id2056 . -29389) (undo-tree-id2057 . -29389) (undo-tree-id2058 . -6651) (undo-tree-id2059 . -29389) (undo-tree-id2060 . -29389) (undo-tree-id2061 . -29389) (undo-tree-id2062 . -29389) (undo-tree-id2063 . -29389) (undo-tree-id2064 . -29389) (undo-tree-id2065 . -29389) (undo-tree-id2066 . -29389) (undo-tree-id2067 . -29389) (undo-tree-id2068 . -29389) (undo-tree-id2069 . -29389) (undo-tree-id2070 . -29389) (undo-tree-id2071 . -29389) (undo-tree-id2072 . -29389) (undo-tree-id2073 . -29389) (undo-tree-id2074 . -29389) (undo-tree-id2075 . -29389) (undo-tree-id2076 . -29389) (undo-tree-id2077 . -29389) (undo-tree-id2078 . -29389) (undo-tree-id2079 . -29389) (undo-tree-id2080 . -29389) (undo-tree-id2081 . -29389) (undo-tree-id2082 . -29389) (undo-tree-id2083 . -29389) (undo-tree-id2084 . -29389) (undo-tree-id2085 . -29389) (undo-tree-id2086 . -29389) (undo-tree-id2087 . -29389) (undo-tree-id2088 . -29389) (undo-tree-id2089 . -29389) (undo-tree-id2090 . -29389) (undo-tree-id2091 . -29389) (undo-tree-id2092 . -29389) (undo-tree-id2093 . -29389) (undo-tree-id2094 . -29389) (undo-tree-id2095 . -29389) (undo-tree-id2096 . -29389) (undo-tree-id2097 . -29389) (undo-tree-id2098 . -29389) (undo-tree-id2099 . -29389) (undo-tree-id2100 . -29389) (undo-tree-id2101 . -29389) (undo-tree-id2102 . -29389) (undo-tree-id2103 . -29389) (undo-tree-id2104 . -29389) (undo-tree-id2105 . -29389) (undo-tree-id2106 . -29389) (undo-tree-id2107 . -29389) (undo-tree-id2108 . -29389) (undo-tree-id2109 . -29389) (undo-tree-id2110 . -29389) (undo-tree-id2111 . -29389) (undo-tree-id2112 . -29389) (undo-tree-id2113 . -29389) (undo-tree-id2114 . -29389) (undo-tree-id2115 . -29389) (undo-tree-id2116 . -29389) (undo-tree-id2117 . -29389) (undo-tree-id2118 . -29389) (undo-tree-id2119 . -29389) (undo-tree-id2120 . -29389) (undo-tree-id2121 . -29389) (undo-tree-id2122 . -29389) (undo-tree-id2123 . -29389) (undo-tree-id2124 . -29389) (undo-tree-id2125 . -29389) (undo-tree-id2126 . -29389) (undo-tree-id2127 . -29389) (undo-tree-id2128 . -29389) (undo-tree-id2129 . -29389) (undo-tree-id2130 . -29389) (undo-tree-id2131 . -29389) (undo-tree-id2132 . -29389) (undo-tree-id2133 . -29389) (undo-tree-id2134 . -29389) (undo-tree-id2135 . -29389) (undo-tree-id2136 . -29389) (undo-tree-id2137 . -29389) (undo-tree-id2138 . -29389) (undo-tree-id2139 . -29389) (undo-tree-id2140 . -29389) (undo-tree-id2141 . -29389) (undo-tree-id2142 . -29389) (undo-tree-id2143 . -29389) (undo-tree-id2144 . -29389) (undo-tree-id2145 . -29389) (undo-tree-id2146 . -29389) (undo-tree-id2147 . -29389) (undo-tree-id2148 . -29389) (undo-tree-id2149 . -29389) (undo-tree-id2150 . -29389) (undo-tree-id2151 . -29389) (undo-tree-id2152 . -29389) (undo-tree-id2153 . -29389) (undo-tree-id2154 . -29389) (undo-tree-id2155 . -29389) (undo-tree-id2156 . -29389) (undo-tree-id2157 . -29389) (undo-tree-id2158 . -29389) (undo-tree-id2159 . -29389) (undo-tree-id2160 . -29389) (undo-tree-id2161 . -29389) (undo-tree-id2162 . -29389) (undo-tree-id2163 . -29389) (undo-tree-id2164 . -29389) (undo-tree-id2165 . -29389) (undo-tree-id2166 . -29389) (undo-tree-id2167 . -29389) (undo-tree-id2168 . -29389) (undo-tree-id2169 . -29389) (undo-tree-id2170 . -29389) (undo-tree-id2171 . -29389) (undo-tree-id2172 . -29389) (undo-tree-id2173 . -29389) (undo-tree-id2174 . -29389) (undo-tree-id2175 . -29389) (undo-tree-id2176 . -29389) (undo-tree-id2177 . -29389) (undo-tree-id2178 . -29389) (undo-tree-id2179 . -29389) (undo-tree-id2180 . -29389) (undo-tree-id2181 . -29389) (undo-tree-id2182 . -29389) (undo-tree-id2183 . -29389) (undo-tree-id2184 . -29389) (undo-tree-id2185 . -29389) (undo-tree-id2186 . -29389) (undo-tree-id2187 . -29389) (undo-tree-id2188 . -29389) (undo-tree-id2189 . -29389) (undo-tree-id2190 . -29389) (undo-tree-id2191 . -29389) (undo-tree-id2192 . -29389) (undo-tree-id2193 . -29389) (undo-tree-id2194 . -29389) (undo-tree-id2195 . -29389) (undo-tree-id2196 . -29389) (undo-tree-id2197 . -29389) (undo-tree-id2198 . -29389) (undo-tree-id2199 . -29389) (undo-tree-id2200 . -18485) (undo-tree-id2201 . -29389) (undo-tree-id2202 . -29389) (undo-tree-id2203 . -18485) (undo-tree-id2204 . -18485) (undo-tree-id2205 . -18485) (undo-tree-id2206 . -18485) (undo-tree-id2207 . -18485) (undo-tree-id2208 . -18485) (undo-tree-id2209 . -18485) (undo-tree-id2210 . -18485) (undo-tree-id2211 . -18485) (undo-tree-id2212 . -18485) (undo-tree-id2213 . -18485) (undo-tree-id2214 . -18485) (undo-tree-id2215 . -18485) (undo-tree-id2216 . -18485) (undo-tree-id2217 . -18485) (undo-tree-id2218 . -18485) (undo-tree-id2219 . -18485) (undo-tree-id2220 . -18485) (undo-tree-id2221 . -18485) (undo-tree-id2222 . -18485) (undo-tree-id2223 . -18485) (undo-tree-id2224 . -18485) (undo-tree-id2225 . -18485) (undo-tree-id2226 . -18485) (undo-tree-id2227 . -18485) (undo-tree-id2228 . -18485) (undo-tree-id2229 . -18485) (undo-tree-id2230 . -18485) (undo-tree-id2231 . -18485) (undo-tree-id2232 . -18485) (undo-tree-id2233 . -18485) (undo-tree-id2234 . -18485) (undo-tree-id2235 . -18485) (undo-tree-id2236 . -18485) (undo-tree-id2237 . -18485) (undo-tree-id2238 . -18485) (undo-tree-id2239 . -18485) (undo-tree-id2240 . -18485) (undo-tree-id2241 . -18485) (undo-tree-id2242 . -18485) (undo-tree-id2243 . -18485) (undo-tree-id2244 . -18485) (undo-tree-id2245 . -18485) (undo-tree-id2246 . -18485) (undo-tree-id2247 . -18485) (undo-tree-id2248 . -18485) (undo-tree-id2249 . -18485) (undo-tree-id2250 . -18485) (undo-tree-id2251 . -18485) (undo-tree-id2252 . -18485) (undo-tree-id2253 . -18485) (undo-tree-id2254 . -18485) (undo-tree-id2255 . -18485) (undo-tree-id2256 . -18485) (undo-tree-id2257 . -18485) (undo-tree-id2258 . -18485) (undo-tree-id2259 . -18485) (undo-tree-id2260 . -18485) (undo-tree-id2261 . -18485) (undo-tree-id2262 . -18485) (undo-tree-id2263 . -18485) (undo-tree-id2264 . -18485) (undo-tree-id2265 . -18485) (undo-tree-id2266 . -18485) (undo-tree-id2267 . -18485) (undo-tree-id2268 . -18485) (undo-tree-id2269 . -18485) (undo-tree-id2270 . -18485) (undo-tree-id2271 . -18485) (undo-tree-id2272 . -18485) (undo-tree-id2273 . -18485) (undo-tree-id2274 . -18485) (undo-tree-id2275 . -18485) (undo-tree-id2276 . -18485) (undo-tree-id2277 . -18485) (undo-tree-id2278 . -18485) (undo-tree-id2279 . -18485) (undo-tree-id2280 . -18485) (undo-tree-id2281 . -18485) (undo-tree-id2282 . -18485) (undo-tree-id2283 . -18485) (undo-tree-id2284 . -18485) (undo-tree-id2285 . -18485) (undo-tree-id2286 . -18485) (undo-tree-id2287 . -18485) (undo-tree-id2288 . -18485) (undo-tree-id2289 . -18485) (undo-tree-id2290 . -18485) (undo-tree-id2291 . -18485) (undo-tree-id2292 . -18485) (undo-tree-id2293 . -18485) (undo-tree-id2294 . -18485) (undo-tree-id2295 . -18485) (undo-tree-id2296 . -18485) (undo-tree-id2297 . -18485) (undo-tree-id2298 . -18485) (undo-tree-id2299 . -18485) (undo-tree-id2300 . -18485) (undo-tree-id2301 . -18485) (undo-tree-id2302 . -18485) (undo-tree-id2303 . -18485) (undo-tree-id2304 . -18485) (undo-tree-id2305 . -18485) (undo-tree-id2306 . -18485) (undo-tree-id2307 . -18485) (undo-tree-id2308 . -18485) (undo-tree-id2309 . -18485) (undo-tree-id2310 . -18485) (undo-tree-id2311 . -18485) (undo-tree-id2312 . -18485) (undo-tree-id2313 . -18485) (undo-tree-id2314 . -18485) (undo-tree-id2315 . -18485) (undo-tree-id2316 . -18485) (undo-tree-id2317 . -18485) (undo-tree-id2318 . -18485) (undo-tree-id2319 . -18485) (undo-tree-id2320 . -18485) (undo-tree-id2321 . -18485) (undo-tree-id2322 . -18485) (undo-tree-id2323 . -18485) (undo-tree-id2324 . -18485) (undo-tree-id2325 . -18485) (undo-tree-id2326 . -18485) (undo-tree-id2327 . -18485) (undo-tree-id2328 . -18485) (undo-tree-id2329 . -18485) (undo-tree-id2330 . -18485) (undo-tree-id2331 . -18485) (undo-tree-id2332 . -18485) (undo-tree-id2333 . -18485) (undo-tree-id2334 . -18485) (undo-tree-id2335 . -18485) (undo-tree-id2336 . -18485) (undo-tree-id2337 . -18485) (undo-tree-id2338 . -18485) (undo-tree-id2339 . -18485) (undo-tree-id2340 . -18485) (undo-tree-id2341 . -18485) (undo-tree-id2342 . -18485) (undo-tree-id2343 . -18485) (undo-tree-id2344 . -18485) (undo-tree-id2345 . -18485) (undo-tree-id2346 . -18485) (undo-tree-id2347 . -18485) (undo-tree-id2348 . -18485) (undo-tree-id2349 . -18485) (undo-tree-id2350 . -18485) (undo-tree-id2351 . -18485) (undo-tree-id2352 . -18485) (undo-tree-id2353 . -18485) (undo-tree-id2354 . -18485) (undo-tree-id2355 . -18485) (undo-tree-id2356 . -18485) (undo-tree-id2357 . -18485) (undo-tree-id2358 . -18485) (undo-tree-id2359 . -18485) (undo-tree-id2360 . -18485) (undo-tree-id2361 . -18485) (undo-tree-id2362 . -18485) (undo-tree-id2363 . -18485) (undo-tree-id2364 . -18485) (undo-tree-id2365 . -18485) (undo-tree-id2366 . -18485) (undo-tree-id2367 . -18485) (undo-tree-id2368 . -18485) (undo-tree-id2369 . -18485) (undo-tree-id2370 . -18485) (undo-tree-id2371 . -18485) (undo-tree-id2372 . -18485) (undo-tree-id2373 . -18485) (undo-tree-id2374 . -18485) (undo-tree-id2375 . -18485) (undo-tree-id2376 . -18485) (undo-tree-id2377 . -18485) (undo-tree-id2378 . -18485) (undo-tree-id2379 . -18485) (undo-tree-id2380 . -18485) (undo-tree-id2381 . -18485) (undo-tree-id2382 . -18485) (undo-tree-id2383 . -18485) (undo-tree-id2384 . -18485) (undo-tree-id2385 . -18485) (undo-tree-id2386 . -29389) (undo-tree-id2387 . -18485) (undo-tree-id2388 . -18485) (undo-tree-id2389 . -29389) (undo-tree-id2390 . -29389) (undo-tree-id2391 . -29389) (undo-tree-id2392 . -29389) (undo-tree-id2393 . -29389) (undo-tree-id2394 . -29389) (undo-tree-id2395 . -29389) (undo-tree-id2396 . -29389) (undo-tree-id2397 . -29389) (undo-tree-id2398 . -29389) (undo-tree-id2399 . -29389) (undo-tree-id2400 . -29389) (undo-tree-id2401 . -29389) (undo-tree-id2402 . -29389) (undo-tree-id2403 . -29389) (undo-tree-id2404 . -29389) (undo-tree-id2405 . -29389) (undo-tree-id2406 . -29389) (undo-tree-id2407 . -29389) (undo-tree-id2408 . -29389) (undo-tree-id2409 . -29389) (undo-tree-id2410 . -29389) (undo-tree-id2411 . -29389) (undo-tree-id2412 . -29389) (undo-tree-id2413 . -29389) (undo-tree-id2414 . -29389) (undo-tree-id2415 . -29389) (undo-tree-id2416 . -29389) (undo-tree-id2417 . -29389) (undo-tree-id2418 . -29389) (undo-tree-id2419 . -29389) (undo-tree-id2420 . -29389) (undo-tree-id2421 . -29389) (undo-tree-id2422 . -29389) (undo-tree-id2423 . -29389) (undo-tree-id2424 . -6651) (undo-tree-id2425 . -29389) (undo-tree-id2426 . -29389) (undo-tree-id2427 . -29389) (undo-tree-id2428 . -29389) (undo-tree-id2429 . -29389) (undo-tree-id2430 . -29389) (undo-tree-id2431 . -29389) (undo-tree-id2432 . -29389) (undo-tree-id2433 . -29389) (undo-tree-id2434 . -29389) (undo-tree-id2435 . -29389) (undo-tree-id2436 . -29389) (undo-tree-id2437 . -29389) (undo-tree-id2438 . -29389) (undo-tree-id2439 . -29389) (undo-tree-id2440 . -29389) (undo-tree-id2441 . -29389) (undo-tree-id2442 . -29389) (undo-tree-id2443 . -29389) (undo-tree-id2444 . -29389) (undo-tree-id2445 . -29389) (undo-tree-id2446 . -29389) (undo-tree-id2447 . -29389) (undo-tree-id2448 . -29389) (undo-tree-id2449 . -29389) (undo-tree-id2450 . -29389) (undo-tree-id2451 . -29389) (undo-tree-id2452 . -29389) (undo-tree-id2453 . -29389) (undo-tree-id2454 . -29389) (undo-tree-id2455 . -29389) (undo-tree-id2456 . -29389) (undo-tree-id2457 . -29389) (undo-tree-id2458 . -29389) (undo-tree-id2459 . -29389) (undo-tree-id2460 . -29389) (undo-tree-id2461 . -29389) (undo-tree-id2462 . -29389) (undo-tree-id2463 . -29389) (undo-tree-id2464 . -29389) (undo-tree-id2465 . -29389) (undo-tree-id2466 . -29389) (undo-tree-id2467 . -29389) (undo-tree-id2468 . -29389) (undo-tree-id2469 . -29389) (undo-tree-id2470 . -29389) (undo-tree-id2471 . -29389) (undo-tree-id2472 . -29389) (undo-tree-id2473 . -29389) (undo-tree-id2474 . -29389) (undo-tree-id2475 . -29389) (undo-tree-id2476 . -29389) (undo-tree-id2477 . -29389) (undo-tree-id2478 . -29389) (undo-tree-id2479 . -29389) (undo-tree-id2480 . -29389) (undo-tree-id2481 . -29389) (undo-tree-id2482 . -29389) (undo-tree-id2483 . -29389) (undo-tree-id2484 . -29389) (undo-tree-id2485 . -29389) (undo-tree-id2486 . -29389) (undo-tree-id2487 . -29389) (undo-tree-id2488 . -29389) (undo-tree-id2489 . -29389) (undo-tree-id2490 . -29389) (undo-tree-id2491 . -29389) (undo-tree-id2492 . -29389) (undo-tree-id2493 . -29389) (undo-tree-id2494 . -18485) (undo-tree-id2495 . -29389) (undo-tree-id2496 . -29389) (undo-tree-id2497 . -18485) (undo-tree-id2498 . -18485) (undo-tree-id2499 . -18485) (undo-tree-id2500 . -18485) (undo-tree-id2501 . -18485) (undo-tree-id2502 . -18485) (undo-tree-id2503 . -18485) (undo-tree-id2504 . -18485) (undo-tree-id2505 . -18485) (undo-tree-id2506 . -18485) (undo-tree-id2507 . -18485) (undo-tree-id2508 . -18485) (undo-tree-id2509 . -18485) (undo-tree-id2510 . -18485) (undo-tree-id2511 . -18485) (undo-tree-id2512 . -18485) (undo-tree-id2513 . -18485) (undo-tree-id2514 . -18485) (undo-tree-id2515 . -18485) (undo-tree-id2516 . -18485) (undo-tree-id2517 . -18485) (undo-tree-id2518 . -18485) (undo-tree-id2519 . -18485) (undo-tree-id2520 . -18485) (undo-tree-id2521 . -18485) (undo-tree-id2522 . -18485) (undo-tree-id2523 . -18485) (undo-tree-id2524 . -18485) (undo-tree-id2525 . -18485) (undo-tree-id2526 . -18485) (undo-tree-id2527 . -18485) (undo-tree-id2528 . -18485) (undo-tree-id2529 . -18485) (undo-tree-id2530 . -18485) (undo-tree-id2531 . -18485) (undo-tree-id2532 . -18485) (undo-tree-id2533 . -18485) (undo-tree-id2534 . -18485) (undo-tree-id2535 . -18485) (undo-tree-id2536 . -29389) (undo-tree-id2537 . -18485) (undo-tree-id2538 . -18485) (undo-tree-id2539 . -29389) (undo-tree-id2540 . -29389) (undo-tree-id2541 . -29389) (undo-tree-id2542 . -29389) (undo-tree-id2543 . -29389) (undo-tree-id2544 . -29389) (undo-tree-id2545 . -29389) (undo-tree-id2546 . -29389) (undo-tree-id2547 . -29389) (undo-tree-id2548 . -29389) (undo-tree-id2549 . -29389) (undo-tree-id2550 . -29389) (undo-tree-id2551 . -29389) (undo-tree-id2552 . -29389) (undo-tree-id2553 . -29389) (undo-tree-id2554 . -29389) (undo-tree-id2555 . -29389) (undo-tree-id2556 . -29389) (undo-tree-id2557 . -29389) (undo-tree-id2558 . -29389) (undo-tree-id2559 . -29389) (undo-tree-id2560 . -29389) (undo-tree-id2561 . -29389) (undo-tree-id2562 . -29389) (undo-tree-id2563 . -29389) (undo-tree-id2564 . -29389) (undo-tree-id2565 . -29389) (undo-tree-id2566 . -29389) (undo-tree-id2567 . -29389) (undo-tree-id2568 . -29389) (undo-tree-id2569 . -29389) (undo-tree-id2570 . -29389) (undo-tree-id2571 . -29389) (undo-tree-id2572 . -29389) (undo-tree-id2573 . -6651) (undo-tree-id2574 . -29389) (undo-tree-id2575 . -29389) (undo-tree-id2576 . -29389) (undo-tree-id2577 . -29389) (undo-tree-id2578 . -29389) (undo-tree-id2579 . -29389) (undo-tree-id2580 . -29389) (undo-tree-id2581 . -29389) (undo-tree-id2582 . -29389) (undo-tree-id2583 . -29389) (undo-tree-id2584 . -29389) (undo-tree-id2585 . -29389) (undo-tree-id2586 . -29389) (undo-tree-id2587 . -18485) (undo-tree-id2588 . -29389) (undo-tree-id2589 . -29389) (undo-tree-id2590 . -18485) (undo-tree-id2591 . -18485) (undo-tree-id2592 . -18485) (undo-tree-id2593 . -18485) (undo-tree-id2594 . -18485) (undo-tree-id2595 . -18485) (undo-tree-id2596 . -18485) (undo-tree-id2597 . -18485) (undo-tree-id2598 . -18485) (undo-tree-id2599 . -18485) (undo-tree-id2600 . -18485) (undo-tree-id2601 . -18485) (undo-tree-id2602 . -18485) (undo-tree-id2603 . -18485) (undo-tree-id2604 . -18485) (undo-tree-id2605 . -18485) (undo-tree-id2606 . -18485) (undo-tree-id2607 . -18485) (undo-tree-id2608 . -18485) (undo-tree-id2609 . -18485) (undo-tree-id2610 . -18485) (undo-tree-id2611 . -18485) (undo-tree-id2612 . -18485) (undo-tree-id2613 . -18485) (undo-tree-id2614 . -18485) (undo-tree-id2615 . -18485) (undo-tree-id2616 . -18485) (undo-tree-id2617 . -18485) (undo-tree-id2618 . -18485) (undo-tree-id2619 . -18485) (undo-tree-id2620 . -18485) (undo-tree-id2621 . -18485) (undo-tree-id2622 . -18485) (undo-tree-id2623 . -18485) (undo-tree-id2624 . -18485) (undo-tree-id2625 . -18485) (undo-tree-id2626 . -18485) (undo-tree-id2627 . -18485) (undo-tree-id2628 . -18485) (undo-tree-id2629 . -29389) (undo-tree-id2630 . -18485) (undo-tree-id2631 . -18485) (undo-tree-id2632 . -29389) (undo-tree-id2633 . -29389) (undo-tree-id2634 . -29389) (undo-tree-id2635 . -29389) (undo-tree-id2636 . -29389) (undo-tree-id2637 . -29389) (undo-tree-id2638 . -29389) (undo-tree-id2639 . -29389) (undo-tree-id2640 . -29389) (undo-tree-id2641 . -29389) (undo-tree-id2642 . -29389) (undo-tree-id2643 . -29389) (undo-tree-id2644 . -29389) (undo-tree-id2645 . -29389) (undo-tree-id2646 . -29389) (undo-tree-id2647 . -29389) (undo-tree-id2648 . -29389) (undo-tree-id2649 . -29389) (undo-tree-id2650 . -29389) (undo-tree-id2651 . -29389) (undo-tree-id2652 . -29389) (undo-tree-id2653 . -29389) (undo-tree-id2654 . -29389) (undo-tree-id2655 . -29389) (undo-tree-id2656 . -29389) (undo-tree-id2657 . -29389) (undo-tree-id2658 . -29389) (undo-tree-id2659 . -29389) (undo-tree-id2660 . -29389) (undo-tree-id2661 . -29389) (undo-tree-id2662 . -29389) (undo-tree-id2663 . -29389) (undo-tree-id2664 . -29389) (undo-tree-id2665 . -29389) (undo-tree-id2666 . -6651) (undo-tree-id2667 . -29389) (undo-tree-id2668 . -29389) (undo-tree-id2669 . -29389) (undo-tree-id2670 . -29389) (undo-tree-id2671 . -29389) (undo-tree-id2672 . -29389) (undo-tree-id2673 . -29389) (undo-tree-id2674 . -29389) (undo-tree-id2675 . -29389) (undo-tree-id2676 . -29389) (undo-tree-id2677 . -29389) (undo-tree-id2678 . -29389) (undo-tree-id2679 . -29389) (undo-tree-id2680 . -18485) (undo-tree-id2681 . -29389) (undo-tree-id2682 . -29389) (undo-tree-id2683 . -18485) (undo-tree-id2684 . -18485) (undo-tree-id2685 . -18485) (undo-tree-id2686 . -18485) (undo-tree-id2687 . -18485) (undo-tree-id2688 . -18485) (undo-tree-id2689 . -18485) (undo-tree-id2690 . -18485) (undo-tree-id2691 . -18485) (undo-tree-id2692 . -18485) (undo-tree-id2693 . -18485) (undo-tree-id2694 . -18485) (undo-tree-id2695 . -18485) (undo-tree-id2696 . -18485) (undo-tree-id2697 . -18485) (undo-tree-id2698 . -18485) (undo-tree-id2699 . -18485) (undo-tree-id2700 . -18485) (undo-tree-id2701 . -18485) (undo-tree-id2702 . -18485) (undo-tree-id2703 . -18485) (undo-tree-id2704 . -18485) (undo-tree-id2705 . -18485) (undo-tree-id2706 . -18485) (undo-tree-id2707 . -18485) (undo-tree-id2708 . -18485) (undo-tree-id2709 . -18485) (undo-tree-id2710 . -18485) (undo-tree-id2711 . -18485) (undo-tree-id2712 . -18485) (undo-tree-id2713 . -18485) (undo-tree-id2714 . -18485) (undo-tree-id2715 . -18485) (undo-tree-id2716 . -18485) (undo-tree-id2717 . -18485) (undo-tree-id2718 . -18485) (undo-tree-id2719 . -18485) (undo-tree-id2720 . -18485) (undo-tree-id2721 . -29389) (undo-tree-id2722 . -18485) (undo-tree-id2723 . -18485) (undo-tree-id2724 . -29389) (undo-tree-id2725 . -29389) (undo-tree-id2726 . -29389) (undo-tree-id2727 . -29389) (undo-tree-id2728 . -29389) (undo-tree-id2729 . -29389) (undo-tree-id2730 . -29389) (undo-tree-id2731 . -29389) (undo-tree-id2732 . -29389) (undo-tree-id2733 . -29389) (undo-tree-id2734 . -29389) (undo-tree-id2735 . -29389) (undo-tree-id2736 . -29389) (undo-tree-id2737 . -29389) (undo-tree-id2738 . -29389) (undo-tree-id2739 . -29389) (undo-tree-id2740 . -29389) (undo-tree-id2741 . -29389) (undo-tree-id2742 . -29389) (undo-tree-id2743 . -29389) (undo-tree-id2744 . -29389) (undo-tree-id2745 . -29389) (undo-tree-id2746 . -29389) (undo-tree-id2747 . -29389) (undo-tree-id2748 . -29389) (undo-tree-id2749 . -29389) (undo-tree-id2750 . -29389) (undo-tree-id2751 . -29389) (undo-tree-id2752 . -29389) (undo-tree-id2753 . -29389) (undo-tree-id2754 . -29389) (undo-tree-id2755 . -29389) (undo-tree-id2756 . -29389) (undo-tree-id2757 . -29389) (undo-tree-id2758 . -6651) (undo-tree-id2759 . -29389) (undo-tree-id2760 . -29389) (undo-tree-id2761 . -29389) (undo-tree-id2762 . -29389) (undo-tree-id2763 . -18485) (undo-tree-id2764 . -29389) (undo-tree-id2765 . -29389) (undo-tree-id2766 . -18485) (undo-tree-id2767 . -18485) (undo-tree-id2768 . -18485) (undo-tree-id2769 . -18485) (undo-tree-id2770 . -18485) (undo-tree-id2771 . -18485) (undo-tree-id2772 . -18485) (undo-tree-id2773 . -18485) (undo-tree-id2774 . -18485) (undo-tree-id2775 . -18485) (undo-tree-id2776 . -18485) (undo-tree-id2777 . -18485) (undo-tree-id2778 . -18485) (undo-tree-id2779 . -18485) (undo-tree-id2780 . -18485) (undo-tree-id2781 . -18485) (undo-tree-id2782 . -18485) (undo-tree-id2783 . -18485) (undo-tree-id2784 . -18485) (undo-tree-id2785 . -18485) (undo-tree-id2786 . -18485) (undo-tree-id2787 . -18485) (undo-tree-id2788 . -18485) (undo-tree-id2789 . -18485) (undo-tree-id2790 . -18485) (undo-tree-id2791 . -18485) (undo-tree-id2792 . -18485) (undo-tree-id2793 . -18485) (undo-tree-id2794 . -18485) (undo-tree-id2795 . -18485) (undo-tree-id2796 . -18485) (undo-tree-id2797 . -18485) (undo-tree-id2798 . -18485) (undo-tree-id2799 . -18485) (undo-tree-id2800 . -18485) (undo-tree-id2801 . -18485) (undo-tree-id2802 . -18485) (undo-tree-id2803 . -18485) (undo-tree-id2804 . -18485) (undo-tree-id2805 . -18485) (undo-tree-id2806 . -18485) (undo-tree-id2807 . -18485) (undo-tree-id2808 . -18485) (undo-tree-id2809 . -18485) (undo-tree-id2810 . -18485) (undo-tree-id2811 . -18485) (undo-tree-id2812 . -18485) (undo-tree-id2813 . -29389) (undo-tree-id2814 . -18485) (undo-tree-id2815 . -18485) (undo-tree-id2816 . -29389) (undo-tree-id2817 . -29389) (undo-tree-id2818 . -29389) (undo-tree-id2819 . -29389) (undo-tree-id2820 . -29389) (undo-tree-id2821 . -29389) (undo-tree-id2822 . -29389) (undo-tree-id2823 . -29389) (undo-tree-id2824 . -29389) (undo-tree-id2825 . -29389) (undo-tree-id2826 . -29389) (undo-tree-id2827 . -29389) (undo-tree-id2828 . -29389) (undo-tree-id2829 . -29389) (undo-tree-id2830 . -29389) (undo-tree-id2831 . -29389) (undo-tree-id2832 . -29389) (undo-tree-id2833 . -29389) (undo-tree-id2834 . -29389) (undo-tree-id2835 . -29389) (undo-tree-id2836 . -29389) (undo-tree-id2837 . -29389) (undo-tree-id2838 . -29389) (undo-tree-id2839 . -29389) (undo-tree-id2840 . -29389) (undo-tree-id2841 . -29389) (undo-tree-id2842 . -29389) (undo-tree-id2843 . -29389) (undo-tree-id2844 . -29389) (undo-tree-id2845 . -29389) (undo-tree-id2846 . -29389) (undo-tree-id2847 . -29389) (undo-tree-id2848 . -29389) (undo-tree-id2849 . -29389) (undo-tree-id2850 . -29389) (undo-tree-id2851 . -6651) (undo-tree-id2852 . -29389) (undo-tree-id2853 . -29389) (undo-tree-id2854 . -29389) (undo-tree-id2855 . -29389) (undo-tree-id2856 . -29389) (undo-tree-id2857 . -29389) (undo-tree-id2858 . -29389) (undo-tree-id2859 . -29389) (undo-tree-id2860 . -29389) (undo-tree-id2861 . -29389) (undo-tree-id2862 . -29389) (undo-tree-id2863 . -29389) (undo-tree-id2864 . -29389) (undo-tree-id2865 . -29389) (undo-tree-id2866 . -29389) (undo-tree-id2867 . -29389) (undo-tree-id2868 . -29389) (undo-tree-id2869 . -29389) (undo-tree-id2870 . -29389) (undo-tree-id2871 . -29389) (undo-tree-id2872 . -29389) (undo-tree-id2873 . -29389) (undo-tree-id2874 . -29389) (undo-tree-id2875 . -29389) (undo-tree-id2876 . -29389) (undo-tree-id2877 . -29389) (undo-tree-id2878 . -29389) (undo-tree-id2879 . -29389) (undo-tree-id2880 . -29389) (undo-tree-id2881 . -29389) (undo-tree-id2882 . -29389) (undo-tree-id2883 . -29389) (undo-tree-id2884 . -29389) (undo-tree-id2885 . -29389) (undo-tree-id2886 . -29389) (undo-tree-id2887 . -29389) (undo-tree-id2888 . -29389) (undo-tree-id2889 . -29389) (undo-tree-id2890 . -29389) (undo-tree-id2891 . -29389) (undo-tree-id2892 . -29389) (undo-tree-id2893 . -29389) (undo-tree-id2894 . -29389) (undo-tree-id2895 . -29389) (undo-tree-id2896 . -29389) (undo-tree-id2897 . -29389) (undo-tree-id2898 . -29389) (undo-tree-id2899 . -29389) (undo-tree-id2900 . -29389) (undo-tree-id2901 . -29389) (undo-tree-id2902 . -29389) (undo-tree-id2903 . -29389) (undo-tree-id2904 . -29389) (undo-tree-id2905 . -29389) (undo-tree-id2906 . -29389) (undo-tree-id2907 . -29389) (undo-tree-id2908 . -29389) (undo-tree-id2909 . -29389) (undo-tree-id2910 . -29389) (undo-tree-id2911 . -29389) (undo-tree-id2912 . -29389) (undo-tree-id2913 . -29389) (undo-tree-id2914 . -29389) (undo-tree-id2915 . -29389) (undo-tree-id2916 . -29389) (undo-tree-id2917 . -29389) (undo-tree-id2918 . -29389) (undo-tree-id2919 . -29389) (undo-tree-id2920 . -29389) (undo-tree-id2921 . -29389) (undo-tree-id2922 . -29389) (undo-tree-id2923 . -29389) (undo-tree-id2924 . -29389) (undo-tree-id2925 . -29389) (undo-tree-id2926 . -29389) (undo-tree-id2927 . -29389) (undo-tree-id2928 . -29389) (undo-tree-id2929 . -29389) (undo-tree-id2930 . -29389) (undo-tree-id2931 . -29389) (undo-tree-id2932 . -29389) (undo-tree-id2933 . -29389) (undo-tree-id2934 . -29389) (undo-tree-id2935 . -29389) (undo-tree-id2936 . -29389) (undo-tree-id2937 . -29389) (undo-tree-id2938 . -29389) (undo-tree-id2939 . -29389) (undo-tree-id2940 . -29389) (undo-tree-id2941 . -29389) (undo-tree-id2942 . -29389) (undo-tree-id2943 . -29389) (undo-tree-id2944 . -29389) (undo-tree-id2945 . -29389) (undo-tree-id2946 . -29389) (undo-tree-id2947 . -29389) (undo-tree-id2948 . -29389) (undo-tree-id2949 . -29389) (undo-tree-id2950 . -29389) (undo-tree-id2951 . -29389) (undo-tree-id2952 . -29389) (undo-tree-id2953 . -29389) (undo-tree-id2954 . -29389) (undo-tree-id2955 . -29389) (undo-tree-id2956 . -29389) (undo-tree-id2957 . -29389) (undo-tree-id2958 . -29389) (undo-tree-id2959 . -29389) (undo-tree-id2960 . -29389) (undo-tree-id2961 . -29389) (undo-tree-id2962 . -29389) (undo-tree-id2963 . -29389) (undo-tree-id2964 . -29389) (undo-tree-id2965 . -29389) (undo-tree-id2966 . -29389) (undo-tree-id2967 . -29389) (undo-tree-id2968 . -29389) (undo-tree-id2969 . -29389) (undo-tree-id2970 . -29389) (undo-tree-id2971 . -6651) (undo-tree-id2972 . -29389) (undo-tree-id2973 . -29389) (undo-tree-id2974 . -29389) (undo-tree-id2975 . -29389) (undo-tree-id2976 . -29389) (undo-tree-id2977 . -29389) (undo-tree-id2978 . -29389) (undo-tree-id2979 . -29389) (undo-tree-id2980 . -29389) (undo-tree-id2981 . -29389) (undo-tree-id2982 . -29389) (undo-tree-id2983 . -29389) (undo-tree-id2984 . -29389) (undo-tree-id2985 . -29389) (undo-tree-id2986 . -29389) (undo-tree-id2987 . -29389) (undo-tree-id2988 . -29389) (undo-tree-id2989 . -29389) (undo-tree-id2990 . -29389) (undo-tree-id2991 . -29389) (undo-tree-id2992 . -29389) (undo-tree-id2993 . -29389) (undo-tree-id2994 . -29389) (undo-tree-id2995 . -29389) (undo-tree-id2996 . -29389) (undo-tree-id2997 . -29389) (undo-tree-id2998 . -29389) (undo-tree-id2999 . -29389) (undo-tree-id3000 . -29389) (undo-tree-id3001 . -29389) (undo-tree-id3002 . -29389) (undo-tree-id3003 . -29389) (undo-tree-id3004 . -29389) (undo-tree-id3005 . -29389) (undo-tree-id3006 . -29389) (undo-tree-id3007 . -29389) (undo-tree-id3008 . -29389) (undo-tree-id3009 . -29389) (undo-tree-id3010 . -29389) (undo-tree-id3011 . -29389) (undo-tree-id3012 . -29389) (undo-tree-id3013 . -29389) (undo-tree-id3014 . -29389) (undo-tree-id3015 . -29389) (undo-tree-id3016 . -29389) (undo-tree-id3017 . -29389) (undo-tree-id3018 . -29389) (undo-tree-id3019 . -29389) (undo-tree-id3020 . -29389) (undo-tree-id3021 . -29389) (undo-tree-id3022 . -29389) (undo-tree-id3023 . -29389) (undo-tree-id3024 . -29389) (undo-tree-id3025 . -29389) (undo-tree-id3026 . -29389) (undo-tree-id3027 . -29389) (undo-tree-id3028 . -29389) (undo-tree-id3029 . -29389) (undo-tree-id3030 . -29389) (undo-tree-id3031 . -18485) (undo-tree-id3032 . -29389) (undo-tree-id3033 . -29389) (undo-tree-id3034 . -29389) (undo-tree-id3035 . -22) (undo-tree-id3036 . -22) (undo-tree-id3037 . -50) (undo-tree-id3038 . -50)) nil (25761 57463 428215 199000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 406) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (t 25761 57463 499663 123000)) nil (25761 57498 128259 128000) 0 nil])
nil
