(undo-tree-save-format-version . 1)
"a34b7c6658e33d07de7e2623d2f186edcd8ddb9f"
[nil nil nil nil (25758 14782 866621 358000) 0 nil]
([nil nil ((20 . 24) (16 . 20) (12 . 16) (10 . 12) (8 . 10) (7 . 8) (5 . 7) (4 . 5) (2 . 4) (1 . 2) (t 25758 14782 876149 11000) 1) nil (25758 14795 779619 557000) 0 nil])
([nil nil ((24 . 25)) nil (25758 14795 779612 166000) 0 nil])
([nil nil ((#(" 
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 7) (undo-tree-id79 . -1) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (t 25758 14795 784661 278000)) nil (25758 14803 995802 829000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7) (undo-tree-id78 . -1)) nil (25758 14803 995794 750000) 0 nil])
([nil nil ((#("* 
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 7) (undo-tree-id60 . -2) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -3)) nil (25758 14803 995792 376000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7) (undo-tree-id59 . -1)) nil (25758 14803 995778 463000) 0 nil])
([nil nil ((#("* 
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 7) (undo-tree-id41 . -2) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -3)) nil (25758 14803 995776 232000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7) (undo-tree-id40 . -1)) nil (25758 14803 995764 204000) 0 nil])
([nil nil ((#("* 
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 7) (undo-tree-id22 . -2) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -3)) nil (25758 14803 995761 921000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7) (undo-tree-id21 . -1)) nil (25758 14803 995749 347000) 0 nil])
([nil nil ((#("* 
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 7) (undo-tree-id0 . -2) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -3)) nil (25758 14803 995744 8000) 0 nil])
([nil nil ((3 . 5) (t 25758 14804 44986 402000)) nil (25758 14809 153452 475000) 0 nil])
([nil nil ((5 . 7) (t 25758 14809 157186 588000)) nil (25758 15032 496749 507000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 6) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1)) nil (25758 15032 496747 450000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 6) (undo-tree-id768 . 1) (undo-tree-id769 . -1) (undo-tree-id770 . -1)) nil (25758 15032 496725 925000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 6) (undo-tree-id765 . 1) (undo-tree-id766 . -1) (undo-tree-id767 . -1)) nil (25758 15032 496723 451000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 5) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1)) nil (25758 15032 496717 541000) 0 nil])
([nil nil ((10 . 12) (5 . 10)) nil (25758 15032 496640 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1724 . 1725) (nil fontified nil 1686 . 1725) (nil fontified nil 1617 . 1686) (nil fontified nil 1541 . 1617) (nil fontified nil 1465 . 1541) (nil fontified nil 1396 . 1465) (nil fontified nil 1323 . 1396) (nil fontified nil 1255 . 1323) (nil fontified nil 1182 . 1255) (nil fontified nil 1106 . 1182) (nil fontified nil 1034 . 1106) (nil fontified nil 964 . 1034) (nil fontified nil 894 . 964) (nil fontified nil 822 . 894) (nil fontified nil 750 . 822) (nil fontified nil 673 . 750) (nil fontified nil 599 . 673) (nil fontified nil 531 . 599) (nil fontified nil 456 . 531) (nil fontified nil 380 . 456) (nil fontified nil 305 . 380) (nil fontified nil 235 . 305) (nil fontified nil 159 . 235) (nil fontified nil 84 . 159) (nil fontified nil 12 . 84) (12 . 1725)) nil (25758 15032 496639 519000) 0 nil])
([nil nil ((#("So far we have used only datasets that fit in memory, but Deep Learning
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id641 . -71) (undo-tree-id642 . -38) (undo-tree-id643 . -38) (undo-tree-id644 . -38) (undo-tree-id645 . -38) (undo-tree-id646 . -38) (undo-tree-id647 . -38) (undo-tree-id648 . -72)) nil (25758 15032 496634 203000) 0 nil])
([nil nil ((#("systems are often trained on very large datasets that will not fit in RAM.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id633 . -74) (undo-tree-id634 . -38) (undo-tree-id635 . -38) (undo-tree-id636 . -38) (undo-tree-id637 . -38) (undo-tree-id638 . -38) (undo-tree-id639 . -38) (undo-tree-id640 . -75)) nil (25758 15032 496629 52000) 0 nil])
([nil nil ((#("Ingesting a large dataset and preprocessing it efficiently can be tricky to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id625 . -75) (undo-tree-id626 . -38) (undo-tree-id627 . -38) (undo-tree-id628 . -38) (undo-tree-id629 . -38) (undo-tree-id630 . -38) (undo-tree-id631 . -38) (undo-tree-id632 . -76)) nil (25758 15032 496623 194000) 0 nil])
([nil nil ((#("implement with other Deep Learning libraries, but TensorFlow makes it
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id617 . -69) (undo-tree-id618 . -38) (undo-tree-id619 . -38) (undo-tree-id620 . -38) (undo-tree-id621 . -38) (undo-tree-id622 . -38) (undo-tree-id623 . -38) (undo-tree-id624 . -70)) nil (25758 15032 496617 354000) 0 nil])
([nil nil ((#("easy thanks to the Data API: you just create a dataset object, and tell it
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id609 . -74) (undo-tree-id610 . -38) (undo-tree-id611 . -38) (undo-tree-id612 . -38) (undo-tree-id613 . -38) (undo-tree-id614 . -38) (undo-tree-id615 . -38) (undo-tree-id616 . -75)) nil (25758 15032 496611 539000) 0 nil])
([nil nil ((#("where to get the data and how to transform it. TensorFlow takes care of all
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id601 . -75) (undo-tree-id602 . -38) (undo-tree-id603 . -38) (undo-tree-id604 . -38) (undo-tree-id605 . -38) (undo-tree-id606 . -38) (undo-tree-id607 . -38) (undo-tree-id608 . -76)) nil (25758 15032 496606 56000) 0 nil])
([nil nil ((#("the implementation details, such as multithreading, queuing, batching, and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 56 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id593 . -74) (undo-tree-id594 . -38) (undo-tree-id595 . -38) (undo-tree-id596 . -38) (undo-tree-id597 . -38) (undo-tree-id598 . -38) (undo-tree-id599 . -38) (undo-tree-id600 . -75)) nil (25758 15032 496600 216000) 0 nil])
([nil nil ((#("prefetching. Moreover, the Data API works seamlessly with tf.keras!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id583 . -67) (undo-tree-id584 . -38) (undo-tree-id585 . -38) (undo-tree-id586 . -38) (undo-tree-id587 . -38) (undo-tree-id588 . -38) (undo-tree-id589 . -38) (undo-tree-id590 . 68) (undo-tree-id591 . -11) (undo-tree-id592 . -68)) nil (25758 15032 496594 230000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2182 . 2183) (nil fontified nil 2153 . 2183) (nil fontified nil 2085 . 2153) (nil fontified nil 2015 . 2085) (nil fontified nil 1946 . 2015) (nil fontified nil 1875 . 1946) (nil fontified nil 1803 . 1875) (nil fontified nil 1731 . 1803) (nil fontified nil 1664 . 1731) (nil fontified nil 1591 . 1664) (nil fontified nil 1506 . 1591) (nil fontified nil 1442 . 1506) (nil fontified nil 1408 . 1442) (nil fontified nil 1343 . 1408) (nil fontified nil 1284 . 1343) (nil fontified nil 1250 . 1284) (nil fontified nil 1176 . 1250) (nil fontified nil 1105 . 1176) (nil fontified nil 1031 . 1105) (nil fontified nil 1022 . 1031) (nil fontified nil 948 . 1022) (nil fontified nil 883 . 948) (nil fontified nil 812 . 883) (nil fontified nil 743 . 812) (nil fontified nil 670 . 743) (nil fontified nil 596 . 670) (nil fontified nil 525 . 596) (nil fontified nil 450 . 525) (nil fontified nil 378 . 450) (nil fontified nil 300 . 378) (nil fontified nil 232 . 300) (nil fontified nil 157 . 232) (nil fontified nil 81 . 157) (nil fontified nil 12 . 81) (12 . 2183) (#("Off the shelf, the Data API can read from text files (such as CSV files),
binary files with fixed-size records, and binary files that use TensorFlow’s
TFRecord format, which supports records of varying sizes. TFRecord is a
flexible and efficient binary format based on Protocol Buffers (an open
source binary format). The Data API also has support for reading from
SQL databases. Moreover, many open source extensions are available to
read from all sorts of data sources, such as Google’s BigQuery service.
Reading huge datasets efficiently is not the only difficulty: the data also
needs to be preprocessed, usually normalized. Moreover, it is not always
composed strictly of convenient numerical fields: there may be text
features, categorical features, and so on. These need to be encoded, for
example using one-hot encoding, bag-of-words encoding, or embeddings
(as we will see, an embedding is a trainable dense vector that represents a
category or token). One option to handle all this preprocessing is to write
your own custom preprocessing layers. Another is to use the standard
preprocessing layers provided by Keras.

" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 151 223 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 223 295 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 295 365 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 365 432 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 432 435 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 435 507 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 507 583 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 583 656 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 656 724 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 724 797 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 797 866 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 866 935 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 935 942 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 942 1018 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1018 1087 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1087 1125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1125 1126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 1126 1127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1127 1128 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 12) (undo-tree-id89 . -1127) (undo-tree-id90 . 2) (undo-tree-id91 . -1128) (undo-tree-id92 . -1128) (undo-tree-id93 . -1128) (undo-tree-id94 . -1128) (undo-tree-id95 . -1128) (undo-tree-id96 . -1128) (undo-tree-id97 . -1128) (undo-tree-id98 . -1128) (undo-tree-id99 . -1128) (undo-tree-id100 . -1128) (undo-tree-id101 . -1128) (undo-tree-id102 . -1128) (undo-tree-id103 . -1128) (undo-tree-id104 . -1128) (undo-tree-id105 . -1128) (undo-tree-id106 . -1128) (undo-tree-id107 . -1128) (undo-tree-id108 . -1128) (undo-tree-id109 . -1128) (undo-tree-id110 . -1128) (undo-tree-id111 . -1128) (undo-tree-id112 . -1128) (undo-tree-id113 . -1128) (undo-tree-id114 . -1128) (undo-tree-id115 . -1128) (undo-tree-id116 . -1128) (undo-tree-id117 . -1128) (undo-tree-id118 . -1128) (undo-tree-id119 . -1128) (undo-tree-id120 . -1128) (undo-tree-id121 . -1128) (undo-tree-id122 . -1128) (undo-tree-id123 . -1128) (undo-tree-id124 . -1128) (undo-tree-id125 . -1128) (undo-tree-id126 . -1128) (undo-tree-id127 . -1128) (undo-tree-id128 . -1128) (undo-tree-id129 . -1128) (undo-tree-id130 . -1128) (undo-tree-id131 . -1128) (undo-tree-id132 . -1128) (undo-tree-id133 . -1128) (undo-tree-id134 . -1128) (undo-tree-id135 . -1128) (undo-tree-id136 . -1128) (undo-tree-id137 . -1128) (undo-tree-id138 . -1128) (undo-tree-id139 . -1128) (undo-tree-id140 . -1128) (undo-tree-id141 . -1128) (undo-tree-id142 . -1128) (undo-tree-id143 . -1128) (undo-tree-id144 . -1128) (undo-tree-id145 . -1128) (undo-tree-id146 . -1128) (undo-tree-id147 . -1127) (undo-tree-id148 . -1128) (undo-tree-id149 . -1087) (undo-tree-id150 . -1126) (undo-tree-id151 . -1125) (undo-tree-id152 . -1125) (undo-tree-id153 . -1125) (undo-tree-id154 . -1125) (undo-tree-id155 . -1125) (undo-tree-id156 . -1125) (undo-tree-id157 . -1125) (undo-tree-id158 . -1125) (undo-tree-id159 . -1125) (undo-tree-id160 . -1125) (undo-tree-id161 . -1125) (undo-tree-id162 . -1125) (undo-tree-id163 . -1056) (undo-tree-id164 . -1056) (undo-tree-id165 . -1056) (undo-tree-id166 . -1056) (undo-tree-id167 . -1056) (undo-tree-id168 . -1056) (undo-tree-id169 . -980) (undo-tree-id170 . -980) (undo-tree-id171 . -980) (undo-tree-id172 . -980) (undo-tree-id173 . -980) (undo-tree-id174 . -980) (undo-tree-id175 . -904) (undo-tree-id176 . -904) (undo-tree-id177 . -904) (undo-tree-id178 . -904) (undo-tree-id179 . -904) (undo-tree-id180 . -904) (undo-tree-id181 . -835) (undo-tree-id182 . -835) (undo-tree-id183 . -835) (undo-tree-id184 . -835) (undo-tree-id185 . -835) (undo-tree-id186 . -835) (undo-tree-id187 . -762) (undo-tree-id188 . -762) (undo-tree-id189 . -762) (undo-tree-id190 . -762) (undo-tree-id191 . -762) (undo-tree-id192 . -762) (undo-tree-id193 . -694) (undo-tree-id194 . -694) (undo-tree-id195 . -694) (undo-tree-id196 . -694) (undo-tree-id197 . -694) (undo-tree-id198 . -694) (undo-tree-id199 . -621) (undo-tree-id200 . -621) (undo-tree-id201 . -621) (undo-tree-id202 . -621) (undo-tree-id203 . -621) (undo-tree-id204 . -621) (undo-tree-id205 . -545) (undo-tree-id206 . -545) (undo-tree-id207 . -545) (undo-tree-id208 . -545) (undo-tree-id209 . -545) (undo-tree-id210 . -545) (undo-tree-id211 . -473) (undo-tree-id212 . -473) (undo-tree-id213 . -473) (undo-tree-id214 . -473) (undo-tree-id215 . -473) (undo-tree-id216 . -473) (undo-tree-id217 . -403) (undo-tree-id218 . -403) (undo-tree-id219 . -403) (undo-tree-id220 . -403) (undo-tree-id221 . -403) (undo-tree-id222 . -403) (undo-tree-id223 . -333) (undo-tree-id224 . -333) (undo-tree-id225 . -333) (undo-tree-id226 . -333) (undo-tree-id227 . -333) (undo-tree-id228 . -333) (undo-tree-id229 . -261) (undo-tree-id230 . -261) (undo-tree-id231 . -261) (undo-tree-id232 . -261) (undo-tree-id233 . -261) (undo-tree-id234 . -261) (undo-tree-id235 . -189) (undo-tree-id236 . -189) (undo-tree-id237 . -189) (undo-tree-id238 . -189) (undo-tree-id239 . -189) (undo-tree-id240 . -189) (undo-tree-id241 . -112) (undo-tree-id242 . -112) (undo-tree-id243 . -112) (undo-tree-id244 . -112) (undo-tree-id245 . -112) (undo-tree-id246 . -112) (undo-tree-id247 . -38) (undo-tree-id248 . -38) (undo-tree-id249 . -38) (undo-tree-id250 . -38) (undo-tree-id251 . -38) (undo-tree-id252 . -38) (undo-tree-id253 . -450) (undo-tree-id254 . -450) (undo-tree-id255 . -450) (undo-tree-id256 . -450) (undo-tree-id257 . -450) (undo-tree-id258 . -450) (undo-tree-id259 . -450) (undo-tree-id260 . -450) (undo-tree-id261 . -450) (undo-tree-id262 . -450) (undo-tree-id263 . -450) (undo-tree-id264 . -450) (undo-tree-id265 . -450) (undo-tree-id266 . -450) (undo-tree-id267 . -450) (undo-tree-id268 . -450) (undo-tree-id269 . -450) (undo-tree-id270 . -450) (undo-tree-id271 . -450) (undo-tree-id272 . -450) (undo-tree-id273 . -450) (undo-tree-id274 . -450) (undo-tree-id275 . -450) (undo-tree-id276 . -450) (undo-tree-id277 . -450) (undo-tree-id278 . -450) (undo-tree-id279 . -450) (undo-tree-id280 . -450) (undo-tree-id281 . -450) (undo-tree-id282 . -450) (undo-tree-id283 . -450) (undo-tree-id284 . -450) (undo-tree-id285 . -450) (undo-tree-id286 . -450) (undo-tree-id287 . -450) (undo-tree-id288 . -450) (undo-tree-id289 . -450) (undo-tree-id290 . -450) (undo-tree-id291 . -450) (undo-tree-id292 . -450) (undo-tree-id293 . -450) (undo-tree-id294 . -450) (undo-tree-id295 . -450) (undo-tree-id296 . -450) (undo-tree-id297 . -450) (undo-tree-id298 . -450) (undo-tree-id299 . -450) (undo-tree-id300 . -450) (undo-tree-id301 . -450) (undo-tree-id302 . -450) (undo-tree-id303 . -450) (undo-tree-id304 . -450) (undo-tree-id305 . -450) (undo-tree-id306 . -450) (undo-tree-id307 . -450) (undo-tree-id308 . -450) (undo-tree-id309 . -450) (undo-tree-id310 . -450) (undo-tree-id311 . -450) (undo-tree-id312 . -450) (undo-tree-id313 . -450) (undo-tree-id314 . -450) (undo-tree-id315 . -450) (undo-tree-id316 . -450) (undo-tree-id317 . -450) (undo-tree-id318 . -450) (undo-tree-id319 . -450) (undo-tree-id320 . -450) (undo-tree-id321 . -450) (undo-tree-id322 . -450) (undo-tree-id323 . -450) (undo-tree-id324 . -450) (undo-tree-id325 . -450) (undo-tree-id326 . -450) (undo-tree-id327 . -450) (undo-tree-id328 . -450) (undo-tree-id329 . -450) (undo-tree-id330 . -450) (undo-tree-id331 . -450) (undo-tree-id332 . -450) (undo-tree-id333 . -450) (undo-tree-id334 . -450) (undo-tree-id335 . -450) (undo-tree-id336 . -450) (undo-tree-id337 . -450) (undo-tree-id338 . -450) (undo-tree-id339 . -450) (undo-tree-id340 . -450) (undo-tree-id341 . -450) (undo-tree-id342 . -450) (undo-tree-id343 . -450) (undo-tree-id344 . -450) (undo-tree-id345 . -450) (undo-tree-id346 . -450) (undo-tree-id347 . -450) (undo-tree-id348 . -450) (undo-tree-id349 . -450) (undo-tree-id350 . -450) (undo-tree-id351 . -450) (undo-tree-id352 . -450) (undo-tree-id353 . -1128) (undo-tree-id354 . -1128) (undo-tree-id355 . -1128) (undo-tree-id356 . -1128) (undo-tree-id357 . -1128) (undo-tree-id358 . -1128) (undo-tree-id359 . -1128) (undo-tree-id360 . -1127) (undo-tree-id361 . -1128) (undo-tree-id362 . -1128) (undo-tree-id363 . -1128) (undo-tree-id364 . -1128) (undo-tree-id365 . -1128) (undo-tree-id366 . -1128) (undo-tree-id367 . -1128) (undo-tree-id368 . -1128) (undo-tree-id369 . -1128) (undo-tree-id370 . -1128) (undo-tree-id371 . -1128) (undo-tree-id372 . -1128) (undo-tree-id373 . -1128) (undo-tree-id374 . -1128) (undo-tree-id375 . -1128) (undo-tree-id376 . -1128) (undo-tree-id377 . -1128) (undo-tree-id378 . -1128) (undo-tree-id379 . -1128) (undo-tree-id380 . -1128) (undo-tree-id381 . -1128) (undo-tree-id382 . -1128) (undo-tree-id383 . -1128) (undo-tree-id384 . -1128) (undo-tree-id385 . -1128) (undo-tree-id386 . -1128) (undo-tree-id387 . 8) (undo-tree-id388 . -1125) (undo-tree-id389 . -1128) (undo-tree-id390 . -1128) (undo-tree-id391 . -1128) (undo-tree-id392 . -1128) (undo-tree-id393 . -1128) (undo-tree-id394 . -1128) (undo-tree-id395 . -1128) (undo-tree-id396 . -1128) (undo-tree-id397 . -1128) (undo-tree-id398 . -1128) (undo-tree-id399 . -1128) (undo-tree-id400 . -1128) (undo-tree-id401 . -1128) (undo-tree-id402 . -1128) (undo-tree-id403 . -1128) (undo-tree-id404 . -1128) (undo-tree-id405 . -1128) (undo-tree-id406 . -1128) (undo-tree-id407 . -1128) (undo-tree-id408 . -1128) (undo-tree-id409 . -1128) (undo-tree-id410 . -1128) (undo-tree-id411 . -1128) (undo-tree-id412 . -1128) (undo-tree-id413 . -1128) (undo-tree-id414 . -1128) (undo-tree-id415 . -1128) (undo-tree-id416 . -1128) (undo-tree-id417 . -1128) (undo-tree-id418 . -1128) (undo-tree-id419 . -1128) (undo-tree-id420 . -1128) (undo-tree-id421 . -1128) (undo-tree-id422 . -1128) (undo-tree-id423 . -1128) (undo-tree-id424 . -1128) (undo-tree-id425 . -1128) (undo-tree-id426 . -1128) (undo-tree-id427 . -1128) (undo-tree-id428 . -1128) (undo-tree-id429 . -1128) (undo-tree-id430 . -1128) (undo-tree-id431 . -1128) (undo-tree-id432 . -1128) (undo-tree-id433 . -1128) (undo-tree-id434 . -1128) (undo-tree-id435 . -1128) (undo-tree-id436 . -1128) (undo-tree-id437 . -1128) (undo-tree-id438 . -1128) (undo-tree-id439 . -1128) (undo-tree-id440 . -1128) (undo-tree-id441 . -1128) (undo-tree-id442 . -1128) (undo-tree-id443 . -1128) (undo-tree-id444 . -1128) (undo-tree-id445 . -1128) (undo-tree-id446 . -1128) (undo-tree-id447 . -1128) (undo-tree-id448 . -1128) (undo-tree-id449 . -1128) (undo-tree-id450 . -1128) (undo-tree-id451 . -1128) (undo-tree-id452 . -1128) (undo-tree-id453 . -1128) (undo-tree-id454 . -1128) (undo-tree-id455 . -1128) (undo-tree-id456 . -1128) (undo-tree-id457 . -1128) (undo-tree-id458 . -1128) (undo-tree-id459 . -1128) (undo-tree-id460 . -1128) (undo-tree-id461 . -1128) (undo-tree-id462 . -1128) (undo-tree-id463 . -1128) (undo-tree-id464 . -1128) (undo-tree-id465 . -1128) (undo-tree-id466 . -1128) (undo-tree-id467 . -1128) (undo-tree-id468 . -1128) (undo-tree-id469 . -1128) (undo-tree-id470 . -1128) (undo-tree-id471 . -1128) (undo-tree-id472 . -1128) (undo-tree-id473 . -1128) (undo-tree-id474 . -1128) (undo-tree-id475 . -1128) (undo-tree-id476 . -1128) (undo-tree-id477 . -1128) (undo-tree-id478 . -1128) (undo-tree-id479 . -1128) (undo-tree-id480 . -1128) (undo-tree-id481 . -1128) (undo-tree-id482 . -1128) (undo-tree-id483 . -1128) (undo-tree-id484 . -1127) (undo-tree-id485 . -74) (undo-tree-id486 . -74) (undo-tree-id487 . -74) (undo-tree-id488 . -74) (undo-tree-id489 . -74) (undo-tree-id490 . -74) (undo-tree-id491 . -151) (undo-tree-id492 . -151) (undo-tree-id493 . -151) (undo-tree-id494 . -151) (undo-tree-id495 . -151) (undo-tree-id496 . -151) (undo-tree-id497 . -223) (undo-tree-id498 . -223) (undo-tree-id499 . -223) (undo-tree-id500 . -223) (undo-tree-id501 . -223) (undo-tree-id502 . -223) (undo-tree-id503 . -295) (undo-tree-id504 . -295) (undo-tree-id505 . -295) (undo-tree-id506 . -295) (undo-tree-id507 . -295) (undo-tree-id508 . -295) (undo-tree-id509 . -365) (undo-tree-id510 . -365) (undo-tree-id511 . -365) (undo-tree-id512 . -365) (undo-tree-id513 . -365) (undo-tree-id514 . -365) (undo-tree-id515 . -435) (undo-tree-id516 . -435) (undo-tree-id517 . -435) (undo-tree-id518 . -435) (undo-tree-id519 . -435) (undo-tree-id520 . -435) (undo-tree-id521 . -507) (undo-tree-id522 . -507) (undo-tree-id523 . -507) (undo-tree-id524 . -507) (undo-tree-id525 . -507) (undo-tree-id526 . -507) (undo-tree-id527 . -583) (undo-tree-id528 . -583) (undo-tree-id529 . -583) (undo-tree-id530 . -583) (undo-tree-id531 . -583) (undo-tree-id532 . -583) (undo-tree-id533 . -656) (undo-tree-id534 . -656) (undo-tree-id535 . -656) (undo-tree-id536 . -656) (undo-tree-id537 . -656) (undo-tree-id538 . -656) (undo-tree-id539 . -724) (undo-tree-id540 . -724) (undo-tree-id541 . -724) (undo-tree-id542 . -724) (undo-tree-id543 . -724) (undo-tree-id544 . -724) (undo-tree-id545 . -797) (undo-tree-id546 . -797) (undo-tree-id547 . -797) (undo-tree-id548 . -797) (undo-tree-id549 . -797) (undo-tree-id550 . -797) (undo-tree-id551 . -866) (undo-tree-id552 . -866) (undo-tree-id553 . -866) (undo-tree-id554 . -866) (undo-tree-id555 . -866) (undo-tree-id556 . -866) (undo-tree-id557 . -942) (undo-tree-id558 . -942) (undo-tree-id559 . -942) (undo-tree-id560 . -942) (undo-tree-id561 . -942) (undo-tree-id562 . -942) (undo-tree-id563 . -1018) (undo-tree-id564 . -1018) (undo-tree-id565 . -1018) (undo-tree-id566 . -1018) (undo-tree-id567 . -1018) (undo-tree-id568 . -1018) (undo-tree-id569 . -1087) (undo-tree-id570 . -1087) (undo-tree-id571 . -1087) (undo-tree-id572 . -1087) (undo-tree-id573 . -1087) (undo-tree-id574 . -1087) (undo-tree-id575 . -1127) (undo-tree-id576 . -1127) (undo-tree-id577 . -1127) (undo-tree-id578 . -1127) (undo-tree-id579 . -1127) (undo-tree-id580 . -1128) (undo-tree-id581 . -1128) (undo-tree-id582 . -1128) 1140) nil (25758 15032 496567 793000) 0 nil])
([nil nil ((2183 . 2184)) nil (25758 15032 495759 748000) 0 nil])
([nil nil ((#("The batter hits the ball. The outfielder immediately starts running,
" 0 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id821 . -68) (undo-tree-id822 . -69) (t 25758 15032 505268 672000)) nil (25758 15050 909689 532000) 0 nil])
([nil nil ((#("anticipating the ball’s trajectory. He tracks it, adapts his movements, and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id819 . -75) (undo-tree-id820 . -76)) nil (25758 15050 909686 906000) 0 nil])
([nil nil ((#("finally catches it (under a thunder of applause)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id817 . -47) (undo-tree-id818 . -48)) nil (25758 15050 909684 336000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id815 . -1) (undo-tree-id816 . -1)) nil (25758 15050 909681 791000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 12) (undo-tree-id813 . -1) (undo-tree-id814 . -1)) nil (25758 15050 909677 977000) 0 nil])
([nil nil ((36 . 37) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -36) (undo-tree-id812 . -1) 12) nil (25758 15050 909671 146000) 0 nil])
([nil nil ((#("Predicting the future is something you do all the time, whether you are finishing a friend’s
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 25 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id842 . -92) (undo-tree-id843 . -24) (undo-tree-id844 . -24) (undo-tree-id845 . -24) (undo-tree-id846 . -24) (undo-tree-id847 . -24) (undo-tree-id848 . -24) (undo-tree-id849 . -24) (undo-tree-id850 . -24) (undo-tree-id851 . -24) (undo-tree-id852 . -24) (undo-tree-id853 . -24) (undo-tree-id854 . -24) (undo-tree-id855 . -24) (undo-tree-id856 . -24) (undo-tree-id857 . -24) (undo-tree-id858 . -24) (undo-tree-id859 . -24) (undo-tree-id860 . -24) (undo-tree-id861 . -24) (undo-tree-id862 . -24) (undo-tree-id863 . -24) (undo-tree-id864 . -24) (undo-tree-id865 . -24) (undo-tree-id866 . -24) (undo-tree-id867 . -24) (undo-tree-id868 . -24) (undo-tree-id869 . -24) (undo-tree-id870 . -24) (undo-tree-id871 . -24) (undo-tree-id872 . -24) (undo-tree-id873 . -24) (undo-tree-id874 . -24) (undo-tree-id875 . -24) (undo-tree-id876 . -24) (undo-tree-id877 . -24) (undo-tree-id878 . -24) (undo-tree-id879 . -24) (undo-tree-id880 . -24) (undo-tree-id881 . -24) (undo-tree-id882 . -24) (undo-tree-id883 . -24) (undo-tree-id884 . -24) (undo-tree-id885 . -24) (undo-tree-id886 . -24) (undo-tree-id887 . -24) (undo-tree-id888 . -24) (undo-tree-id889 . -24) (undo-tree-id890 . -24) (undo-tree-id891 . -24) (undo-tree-id892 . -24) (undo-tree-id893 . -24) (undo-tree-id894 . -24) (undo-tree-id895 . -24) (undo-tree-id896 . -24) (undo-tree-id897 . -93) 36 (t 25758 15050 965887 232000)) nil (25758 15115 87409 826000) 0 nil])
([nil nil ((#("sentence or anticipating the smell of coffee at breakfast. In this chapter we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1150 . -77) (undo-tree-id1151 . -24) (undo-tree-id1152 . -24) (undo-tree-id1153 . -24) (undo-tree-id1154 . -24) (undo-tree-id1155 . -24) (undo-tree-id1156 . -24) (undo-tree-id1157 . -24) (undo-tree-id1158 . -24) (undo-tree-id1159 . -24) (undo-tree-id1160 . -24) (undo-tree-id1161 . -24) (undo-tree-id1162 . -24) (undo-tree-id1163 . -24) (undo-tree-id1164 . -24) (undo-tree-id1165 . -24) (undo-tree-id1166 . -24) (undo-tree-id1167 . -78) 36) nil (25758 15129 602343 592000) 0 nil] [nil nil ((#("sentence or anticipating the smell of coffee at breakfast. In this chapter we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id823 . -77) (undo-tree-id824 . -24) (undo-tree-id826 . -24) (undo-tree-id828 . -24) (undo-tree-id830 . -24) (undo-tree-id832 . -24) (undo-tree-id834 . -24) (undo-tree-id836 . -24) (undo-tree-id838 . -24) (undo-tree-id840 . -24) 36) ((12 . 90)) (25758 15114 78732 725000) 0 nil])
([nil nil ((#("will discuss recurrent neural networks (RNNs), a class of nets that can
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1130 . -71) (undo-tree-id1131 . -24) (undo-tree-id1132 . -24) (undo-tree-id1133 . -24) (undo-tree-id1134 . -24) (undo-tree-id1135 . -24) (undo-tree-id1136 . -24) (undo-tree-id1137 . -24) (undo-tree-id1138 . -24) (undo-tree-id1139 . -24) (undo-tree-id1140 . -24) (undo-tree-id1141 . -24) (undo-tree-id1142 . -24) (undo-tree-id1143 . -24) (undo-tree-id1144 . -24) (undo-tree-id1145 . -24) (undo-tree-id1146 . -24) (undo-tree-id1147 . -24) (undo-tree-id1148 . -24) (undo-tree-id1149 . -72) 36) nil (25758 15129 602331 575000) 0 nil])
([nil nil ((#("will discuss recurrent neural networks (RNNs), a class of nets that can
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id904 . -71) (undo-tree-id905 . -24) (undo-tree-id907 . -24) (undo-tree-id909 . -24) (undo-tree-id911 . -24) (undo-tree-id913 . -24) (undo-tree-id915 . -24) (undo-tree-id917 . -24) (undo-tree-id919 . -24) (t 25758 15060 662209 571000)) ((12 . 84)) (25758 15112 676926 824000) 0 nil])
([nil nil ((#("predict the future (well, up to a point, of course). They can analyze time
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 51 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 53 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 54 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 62 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1111 . -74) (undo-tree-id1112 . -24) (undo-tree-id1113 . -24) (undo-tree-id1114 . -24) (undo-tree-id1115 . -24) (undo-tree-id1116 . -24) (undo-tree-id1117 . -24) (undo-tree-id1118 . -24) (undo-tree-id1119 . -24) (undo-tree-id1120 . -24) (undo-tree-id1121 . -24) (undo-tree-id1122 . -24) (undo-tree-id1123 . -24) (undo-tree-id1124 . -24) (undo-tree-id1125 . -24) (undo-tree-id1126 . -24) (undo-tree-id1127 . -24) (undo-tree-id1128 . -24) (undo-tree-id1129 . -75) 36) nil (25758 15129 602318 310000) 0 nil])
([nil nil ((#("predict the future (well, up to a point, of course)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id902 . -50)) ((12 . 63)) (25758 15112 312474 794000) 0 nil])
([nil nil ((#("series data such as stock prices, and tell you when to buy or sell. In
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1092 . -70) (undo-tree-id1093 . -24) (undo-tree-id1094 . -24) (undo-tree-id1095 . -24) (undo-tree-id1096 . -24) (undo-tree-id1097 . -24) (undo-tree-id1098 . -24) (undo-tree-id1099 . -24) (undo-tree-id1100 . -24) (undo-tree-id1101 . -24) (undo-tree-id1102 . -24) (undo-tree-id1103 . -24) (undo-tree-id1104 . -24) (undo-tree-id1105 . -24) (undo-tree-id1106 . -24) (undo-tree-id1107 . -24) (undo-tree-id1108 . -24) (undo-tree-id1109 . -24) (undo-tree-id1110 . -71) 36) nil (25758 15129 602304 292000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id901 . -1)) ((12 . 13)) (25758 15111 934007 198000) 0 nil])
([nil nil ((#("autonomous driving systems, they can anticipate car trajectories and help
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1073 . -73) (undo-tree-id1074 . -24) (undo-tree-id1075 . -24) (undo-tree-id1076 . -24) (undo-tree-id1077 . -24) (undo-tree-id1078 . -24) (undo-tree-id1079 . -24) (undo-tree-id1080 . -24) (undo-tree-id1081 . -24) (undo-tree-id1082 . -24) (undo-tree-id1083 . -24) (undo-tree-id1084 . -24) (undo-tree-id1085 . -24) (undo-tree-id1086 . -24) (undo-tree-id1087 . -24) (undo-tree-id1088 . -24) (undo-tree-id1089 . -24) (undo-tree-id1090 . -24) (undo-tree-id1091 . -74) 36) nil (25758 15129 602291 512000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 12) (undo-tree-id899 . -1)) ((12 . 13)) (25758 15106 195595 532000) 0 nil])
([nil nil ((#("avoid accidents. More generally, they can work on sequences of arbitrary
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1054 . -72) (undo-tree-id1055 . -24) (undo-tree-id1056 . -24) (undo-tree-id1057 . -24) (undo-tree-id1058 . -24) (undo-tree-id1059 . -24) (undo-tree-id1060 . -24) (undo-tree-id1061 . -24) (undo-tree-id1062 . -24) (undo-tree-id1063 . -24) (undo-tree-id1064 . -24) (undo-tree-id1065 . -24) (undo-tree-id1066 . -24) (undo-tree-id1067 . -24) (undo-tree-id1068 . -24) (undo-tree-id1069 . -24) (undo-tree-id1070 . -24) (undo-tree-id1071 . -24) (undo-tree-id1072 . -73) 36) nil (25758 15129 602277 517000) 0 nil])
([nil nil ((#("They can analyze time
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id921 . -21) (t 25758 15073 606637 224000)) ((12 . 34) (t 25758 15076 274724 998000)) (25758 15105 703932 846000) 0 nil])
([nil nil ((#("lengths, rather than on fixed-sized inputs like all the nets we have
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1035 . -68) (undo-tree-id1036 . -24) (undo-tree-id1037 . -24) (undo-tree-id1038 . -24) (undo-tree-id1039 . -24) (undo-tree-id1040 . -24) (undo-tree-id1041 . -24) (undo-tree-id1042 . -24) (undo-tree-id1043 . -24) (undo-tree-id1044 . -24) (undo-tree-id1045 . -24) (undo-tree-id1046 . -24) (undo-tree-id1047 . -24) (undo-tree-id1048 . -24) (undo-tree-id1049 . -24) (undo-tree-id1050 . -24) (undo-tree-id1051 . -24) (undo-tree-id1052 . -24) (undo-tree-id1053 . -69) 36) nil (25758 15129 602265 927000) 0 nil])
([nil nil ((#("series data such as stock prices, and tell you when to buy or sell. In
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id925 . -70) (undo-tree-id926 . -71) (t 25758 15076 274724 998000)) ((12 . 83)) (25758 15105 486768 340000) 0 nil])
([nil nil ((#("considered so far. For example, they can take sentences, documents, or
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1016 . -70) (undo-tree-id1017 . -24) (undo-tree-id1018 . -24) (undo-tree-id1019 . -24) (undo-tree-id1020 . -24) (undo-tree-id1021 . -24) (undo-tree-id1022 . -24) (undo-tree-id1023 . -24) (undo-tree-id1024 . -24) (undo-tree-id1025 . -24) (undo-tree-id1026 . -24) (undo-tree-id1027 . -24) (undo-tree-id1028 . -24) (undo-tree-id1029 . -24) (undo-tree-id1030 . -24) (undo-tree-id1031 . -24) (undo-tree-id1032 . -24) (undo-tree-id1033 . -24) (undo-tree-id1034 . -71) 36) nil (25758 15129 602254 115000) 0 nil])
([nil nil ((#("autonomous driving systems, they can anticipate car trajectories and help
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id923 . -73) (undo-tree-id924 . -74)) ((12 . 86)) (25758 15105 486546 58000) 0 nil])
([nil nil ((#("audio samples as input, making them extremely useful for natural
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id997 . -64) (undo-tree-id998 . -24) (undo-tree-id999 . -24) (undo-tree-id1000 . -24) (undo-tree-id1001 . -24) (undo-tree-id1002 . -24) (undo-tree-id1003 . -24) (undo-tree-id1004 . -24) (undo-tree-id1005 . -24) (undo-tree-id1006 . -24) (undo-tree-id1007 . -24) (undo-tree-id1008 . -24) (undo-tree-id1009 . -24) (undo-tree-id1010 . -24) (undo-tree-id1011 . -24) (undo-tree-id1012 . -24) (undo-tree-id1013 . -24) (undo-tree-id1014 . -24) (undo-tree-id1015 . -65) 36) nil (25758 15129 602241 869000) 0 nil])
nil
([nil nil ((#("language processing applications such as automatic translation or speech-
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id978 . -73) (undo-tree-id979 . -24) (undo-tree-id980 . -24) (undo-tree-id981 . -24) (undo-tree-id982 . -24) (undo-tree-id983 . -24) (undo-tree-id984 . -24) (undo-tree-id985 . -24) (undo-tree-id986 . -24) (undo-tree-id987 . -24) (undo-tree-id988 . -24) (undo-tree-id989 . -24) (undo-tree-id990 . -24) (undo-tree-id991 . -24) (undo-tree-id992 . -24) (undo-tree-id993 . -24) (undo-tree-id994 . -24) (undo-tree-id995 . -24) (undo-tree-id996 . -74) 36) nil (25758 15129 602229 917000) 0 nil])
([nil nil ((#("to-text.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id959 . -8) (undo-tree-id960 . -7) (undo-tree-id961 . -7) (undo-tree-id962 . -7) (undo-tree-id963 . -7) (undo-tree-id964 . -7) (undo-tree-id965 . -7) (undo-tree-id966 . -7) (undo-tree-id967 . -7) (undo-tree-id968 . -7) (undo-tree-id969 . -7) (undo-tree-id970 . -7) (undo-tree-id971 . -7) (undo-tree-id972 . -7) (undo-tree-id973 . -7) (undo-tree-id974 . -7) (undo-tree-id975 . -7) (undo-tree-id976 . -7) (undo-tree-id977 . -9) 19) nil (25758 15129 602217 272000) 0 nil])
([nil nil ((12 . 13) (#("In this chapter w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id927 . -16) (undo-tree-id928 . -16) (undo-tree-id929 . -16) (undo-tree-id930 . -7) (undo-tree-id931 . -7) (undo-tree-id932 . -7) (undo-tree-id933 . -7) (undo-tree-id934 . -7) (undo-tree-id935 . -7) (undo-tree-id936 . -7) (undo-tree-id937 . -7) (undo-tree-id938 . -7) (undo-tree-id939 . -7) (undo-tree-id940 . -7) (undo-tree-id941 . -7) (undo-tree-id942 . -7) (undo-tree-id943 . -17) (undo-tree-id944 . -16) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -6) (undo-tree-id952 . -14) (undo-tree-id953 . -17) (undo-tree-id954 . -16) (undo-tree-id955 . -16) (undo-tree-id956 . -17) (undo-tree-id957 . -17) (undo-tree-id958 . -17) 28) nil (25758 15129 602200 185000) 0 nil])
([nil nil ((146 . 147) (#("use them to forec" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 146) (undo-tree-id1176 . -16) (undo-tree-id1177 . -16) (undo-tree-id1178 . -17) (undo-tree-id1179 . -16) (undo-tree-id1180 . -16) (undo-tree-id1181 . -17) (undo-tree-id1182 . -17) (undo-tree-id1183 . -17) 162 (t 25758 15129 612454 103000)) nil (25758 15149 855455 20000) 0 nil])
([nil nil ((#("We will first look at the fundamental concepts underlying
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1248 . -57) (undo-tree-id1249 . -31) (undo-tree-id1250 . -31) (undo-tree-id1251 . -31) (undo-tree-id1252 . -31) (undo-tree-id1253 . -31) (undo-tree-id1254 . -31) (undo-tree-id1255 . -58) (undo-tree-id1256 . -58) (undo-tree-id1257 . -58) (undo-tree-id1258 . -58) (undo-tree-id1259 . -58) (undo-tree-id1260 . -58) (undo-tree-id1261 . -58) (undo-tree-id1262 . -58) (undo-tree-id1263 . -58) (undo-tree-id1264 . -58) (undo-tree-id1265 . -58) (undo-tree-id1266 . -58) (undo-tree-id1267 . -58) (undo-tree-id1268 . -58) (undo-tree-id1269 . -58) (undo-tree-id1270 . -58) (undo-tree-id1271 . -58) (undo-tree-id1272 . -58) (undo-tree-id1273 . -58) (undo-tree-id1274 . -58) (undo-tree-id1275 . -58) (undo-tree-id1276 . -58) (undo-tree-id1277 . -58) (undo-tree-id1278 . -58) (undo-tree-id1279 . -58) (undo-tree-id1280 . -58) (undo-tree-id1281 . -58) (undo-tree-id1282 . -58) (undo-tree-id1283 . -58) (undo-tree-id1284 . -58) (undo-tree-id1285 . -58) (undo-tree-id1286 . -58) (t 25758 15152 921195 201000)) nil (25758 15193 204476 452000) 0 nil] [nil nil ((151 . 152) (#("a time series. Af" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 151) (undo-tree-id1168 . -16) (undo-tree-id1169 . -16) (undo-tree-id1170 . -17) (undo-tree-id1171 . -16) (undo-tree-id1172 . -16) (undo-tree-id1173 . -17) (undo-tree-id1174 . -17) (undo-tree-id1175 . -17) 167) ((151 . 168) (#("W" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 151) (undo-tree-id1184 . -1) (undo-tree-id1185 . 1)) (25758 15149 855106 650000) 0 nil])
([nil nil ((#("RNNs and how to train them using backpropagation through time, then we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1235 . -70) (undo-tree-id1236 . 38) (undo-tree-id1237 . -48) (undo-tree-id1238 . -71) (undo-tree-id1239 . -31) (undo-tree-id1240 . -31) (undo-tree-id1241 . -31) (undo-tree-id1242 . -31) (undo-tree-id1243 . -31) (undo-tree-id1244 . -31) (undo-tree-id1245 . 71) (undo-tree-id1246 . -4) (undo-tree-id1247 . -71)) nil (25758 15193 204451 712000) 0 nil])
nil
([nil nil ((#("will Wast a time series. After that we’ll explore the two
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 27 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1212 . -57) (undo-tree-id1213 . 31) (undo-tree-id1214 . -26) (undo-tree-id1215 . -10) (undo-tree-id1216 . 31) (undo-tree-id1217 . -5) (undo-tree-id1218 . -26) (undo-tree-id1219 . -10) (undo-tree-id1220 . -10) (undo-tree-id1221 . -26) (undo-tree-id1222 . -26) (undo-tree-id1223 . -26) (undo-tree-id1224 . -26) (undo-tree-id1225 . -26) (undo-tree-id1226 . -26) (undo-tree-id1227 . -26) (undo-tree-id1228 . -31) (undo-tree-id1229 . -31) (undo-tree-id1230 . -31) (undo-tree-id1231 . -31) (undo-tree-id1232 . -31) (undo-tree-id1233 . -31) (undo-tree-id1234 . -58)) nil (25758 15193 204441 739000) 0 nil])
([nil nil ((#("main difficulties that RNNs face:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1208 . -33) (undo-tree-id1209 . 34) (undo-tree-id1210 . 34) (undo-tree-id1211 . -34)) nil (25758 15193 204426 780000) 0 nil])
([nil nil ((#("Unstable gradients (discussed in Chapter 11), which can be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1204 . -58) (undo-tree-id1205 . 59) (undo-tree-id1206 . 59) (undo-tree-id1207 . -59)) nil (25758 15193 204423 577000) 0 nil])
([nil nil ((#("alleviated using various techniques, including recurrent dropout
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1200 . -64) (undo-tree-id1201 . 65) (undo-tree-id1202 . 65) (undo-tree-id1203 . -65)) nil (25758 15193 204420 316000) 0 nil])
([nil nil ((#("and recurrent layer normalization
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1196 . -33) (undo-tree-id1197 . 34) (undo-tree-id1198 . 34) (undo-tree-id1199 . -34)) nil (25758 15193 204415 106000) 0 nil])
([nil nil ((#("A (very) limited short-term memory, which can be extended using
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1192 . -63) (undo-tree-id1193 . 64) (undo-tree-id1194 . 64) (undo-tree-id1195 . -64)) nil (25758 15193 204411 273000) 0 nil])
([nil nil ((#("LSTM and GRU cellsRNNs are not the only types of neural networks capable of handling
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1186 . -84) (undo-tree-id1187 . 85) (undo-tree-id1188 . 85) (undo-tree-id1189 . 85) (undo-tree-id1190 . -4) (undo-tree-id1191 . -85)) nil (25758 15193 204404 414000) 0 nil])
([nil nil ((12 . 13) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (t 25758 15193 262458 495000)) nil (25758 15195 701442 617000) 0 nil])
([nil nil ((#("Sequential data: for small sequences, a regular dense network can do the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1313 . -72) (undo-tree-id1314 . 73) (undo-tree-id1315 . 72) (undo-tree-id1316 . -73) (t 25758 15195 702534 154000)) nil (25758 15224 630126 73000) 0 nil])
([nil nil ((#("trick; and for very long sequences, such as audio samples or text,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1309 . -66) (undo-tree-id1310 . 67) (undo-tree-id1311 . 67) (undo-tree-id1312 . -67)) nil (25758 15224 630122 660000) 0 nil])
([nil nil ((#("convolutional neural networks can actually work quite well too. We will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1303 . -71) (undo-tree-id1304 . 72) (undo-tree-id1305 . 72) (undo-tree-id1306 . 72) (undo-tree-id1307 . -13) (undo-tree-id1308 . -72)) nil (25758 15224 630119 626000) 0 nil])
([nil nil ((#("discuss both of these possibilities, and we will finish this chapter by
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1299 . -71) (undo-tree-id1300 . 72) (undo-tree-id1301 . 72) (undo-tree-id1302 . -72)) nil (25758 15224 630113 323000) 0 nil])
([nil nil ((#("implementing a WaveNet" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1295 . -21) (undo-tree-id1296 . 22) (undo-tree-id1297 . 22) (undo-tree-id1298 . -22)) nil (25758 15224 630109 930000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-code)) . 12) (undo-tree-id1291 . 1) (undo-tree-id1292 . 1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1)) nil (25758 15224 630105 400000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 12) (undo-tree-id1287 . 1) (undo-tree-id1288 . 1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1)) nil (25758 15224 630098 255000) 0 nil])
([nil nil ((#("this is a CNN architecture capable of handling
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1329 . -46) (undo-tree-id1330 . 47) (undo-tree-id1331 . 47) (undo-tree-id1332 . -47) (t 25758 15224 687426 602000)) nil (25758 15230 365055 210000) 0 nil])
([nil nil ((#("sequences of tens of thousands of time steps" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1325 . -43) (undo-tree-id1326 . 44) (undo-tree-id1327 . 44) (undo-tree-id1328 . -44)) nil (25758 15230 365051 473000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1321 . 1) (undo-tree-id1322 . 1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1)) nil (25758 15230 365045 760000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 12) (undo-tree-id1317 . 1) (undo-tree-id1318 . 1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1)) nil (25758 15230 365039 251000) 0 nil])
([nil nil ((#("In Chapter 16" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1359 . -12) (undo-tree-id1360 . 13) (undo-tree-id1361 . 13) (undo-tree-id1362 . -13) (t 25758 15230 367600 171000)) nil (25758 15238 688845 312000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1355 . 1) (undo-tree-id1356 . 1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1)) nil (25758 15238 688841 554000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 12) (undo-tree-id1351 . 1) (undo-tree-id1352 . 1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1)) nil (25758 15238 688837 423000) 0 nil])
([nil nil ((#("we will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1347 . -7) (undo-tree-id1348 . 8) (undo-tree-id1349 . 8) (undo-tree-id1350 . -8)) nil (25758 15238 688834 278000) 0 nil])
([nil nil ((#("continue to explore RNNs and see how to use them for natural language
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1343 . -69) (undo-tree-id1344 . 70) (undo-tree-id1345 . 70) (undo-tree-id1346 . -70)) nil (25758 15238 688828 954000) 0 nil])
([nil nil ((#("processing, along with more recent architectures based on attention
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12) (undo-tree-id1339 . -67) (undo-tree-id1340 . 68) (undo-tree-id1341 . 68) (undo-tree-id1342 . -68)) nil (25758 15238 688825 63000) 0 nil])
([nil nil ((#("mechanisms. Let’s get started!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 30 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 12) (undo-tree-id1333 . -30) (undo-tree-id1334 . 31) (undo-tree-id1335 . 31) (undo-tree-id1336 . -29) (undo-tree-id1337 . -29) (undo-tree-id1338 . -31)) nil (25758 15238 688818 860000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -11) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) 12 (t 25758 15238 699854 18000)) nil (25758 15261 642663 495000) 0 nil])
([nil nil ((#("*  Intro
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 8 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 8 9 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 2) (undo-tree-id1363 . -8) (undo-tree-id1364 . -9) (undo-tree-id1365 . -9) (undo-tree-id1366 . -9) (undo-tree-id1367 . -9) (undo-tree-id1368 . -9) (undo-tree-id1369 . -9) (undo-tree-id1370 . -9) (undo-tree-id1371 . -9) (undo-tree-id1372 . -9) (undo-tree-id1373 . -9) (undo-tree-id1374 . -9) (undo-tree-id1375 . -9) (undo-tree-id1376 . -9) (undo-tree-id1377 . -9) (undo-tree-id1378 . -9) (undo-tree-id1379 . -9) (undo-tree-id1380 . -9) (undo-tree-id1381 . -9) (undo-tree-id1382 . -9) (undo-tree-id1383 . -9) (undo-tree-id1384 . -9) (undo-tree-id1385 . -9) (undo-tree-id1386 . -9) (undo-tree-id1387 . -9) (undo-tree-id1388 . -9) (undo-tree-id1389 . -9) (undo-tree-id1390 . -9) (undo-tree-id1391 . -9) (undo-tree-id1392 . -9) (undo-tree-id1393 . -9) (undo-tree-id1394 . -9) (undo-tree-id1395 . -9) (undo-tree-id1396 . -9) (undo-tree-id1397 . -9) (undo-tree-id1398 . -9) (undo-tree-id1399 . -9) (undo-tree-id1400 . -9) (undo-tree-id1401 . -9) (undo-tree-id1402 . -9) (undo-tree-id1403 . -9) (undo-tree-id1404 . -9) (undo-tree-id1405 . -9) (undo-tree-id1406 . -9) (undo-tree-id1407 . -9) (undo-tree-id1408 . -9) (undo-tree-id1409 . -9) (undo-tree-id1410 . -9) (undo-tree-id1411 . -9) (undo-tree-id1412 . -9) (undo-tree-id1413 . -9) (undo-tree-id1414 . -9) (undo-tree-id1415 . -9) (undo-tree-id1416 . -9) (undo-tree-id1417 . -9) (undo-tree-id1418 . -9) (undo-tree-id1419 . -9) (undo-tree-id1420 . -9) (undo-tree-id1421 . -9) (undo-tree-id1422 . -9) (undo-tree-id1423 . -9) (undo-tree-id1424 . -9) (undo-tree-id1425 . -9) (undo-tree-id1426 . -9) (undo-tree-id1427 . -9) (undo-tree-id1428 . -9) (undo-tree-id1429 . -9) (undo-tree-id1430 . -9) (undo-tree-id1431 . -9) (undo-tree-id1432 . -9) (undo-tree-id1433 . -9) (undo-tree-id1434 . -9) (undo-tree-id1435 . -9) (undo-tree-id1436 . -9) (undo-tree-id1437 . -9) (undo-tree-id1438 . -9) (undo-tree-id1439 . -9) (undo-tree-id1440 . -9) (undo-tree-id1441 . -9) (undo-tree-id1442 . -9) (undo-tree-id1443 . -9) (undo-tree-id1444 . -9) (undo-tree-id1445 . -9) (undo-tree-id1446 . -9) (undo-tree-id1447 . -9) (undo-tree-id1448 . -9) (undo-tree-id1449 . -9) (undo-tree-id1450 . -9) (undo-tree-id1451 . -9) (undo-tree-id1452 . -9) (undo-tree-id1453 . -9) (undo-tree-id1454 . -9) (undo-tree-id1455 . -9) (undo-tree-id1456 . -9) (undo-tree-id1457 . -9) (undo-tree-id1458 . -9) (undo-tree-id1459 . -9) (undo-tree-id1460 . -9) (undo-tree-id1461 . -9) (undo-tree-id1462 . -9) (undo-tree-id1463 . -9) (undo-tree-id1464 . -9) (undo-tree-id1465 . -9) (undo-tree-id1466 . -9) (undo-tree-id1467 . -9) (undo-tree-id1468 . -9) (undo-tree-id1469 . -9) (undo-tree-id1470 . -9) (undo-tree-id1471 . -9) (undo-tree-id1472 . -9) (undo-tree-id1473 . -9) (undo-tree-id1474 . -9) (undo-tree-id1475 . -9) (undo-tree-id1476 . -9) (undo-tree-id1477 . -9) (undo-tree-id1478 . -9) (undo-tree-id1479 . -9) (undo-tree-id1480 . -9) (undo-tree-id1481 . -9) (undo-tree-id1482 . -9) (undo-tree-id1483 . -9) (undo-tree-id1484 . -9) (undo-tree-id1485 . -9) (undo-tree-id1486 . -9) (undo-tree-id1487 . -9) (undo-tree-id1488 . -9) (undo-tree-id1489 . -9) (undo-tree-id1490 . -9) (undo-tree-id1491 . -9) (undo-tree-id1492 . -9) (undo-tree-id1493 . -9) (undo-tree-id1494 . -9) (undo-tree-id1495 . -9) (undo-tree-id1496 . -9) (undo-tree-id1497 . -9) (undo-tree-id1498 . -9) (undo-tree-id1499 . -9) (undo-tree-id1500 . -9) (undo-tree-id1501 . -9) (undo-tree-id1502 . -9) (undo-tree-id1503 . -9) (undo-tree-id1504 . -9) (undo-tree-id1505 . -9) (undo-tree-id1506 . -9) (undo-tree-id1507 . -9) (undo-tree-id1508 . -9) (undo-tree-id1509 . -9) (undo-tree-id1510 . -9) (undo-tree-id1511 . -9) (undo-tree-id1512 . -9) (undo-tree-id1513 . -9) (undo-tree-id1514 . -9) (undo-tree-id1515 . -9) (undo-tree-id1516 . -9) (undo-tree-id1517 . -9) (undo-tree-id1518 . -9) (undo-tree-id1519 . -9) (undo-tree-id1520 . -9) (undo-tree-id1521 . -9) (undo-tree-id1522 . -9) (undo-tree-id1523 . -9) (undo-tree-id1524 . -9) (undo-tree-id1525 . -9) (undo-tree-id1526 . -9) (undo-tree-id1527 . -9) (undo-tree-id1528 . -9) (undo-tree-id1529 . -9) (undo-tree-id1530 . -9) (undo-tree-id1531 . -9) (undo-tree-id1532 . -9) (undo-tree-id1533 . -9) (undo-tree-id1534 . -9) (undo-tree-id1535 . -9) (undo-tree-id1536 . -9) (undo-tree-id1537 . -9) (undo-tree-id1538 . -9) (undo-tree-id1539 . -9) (undo-tree-id1540 . -9) (undo-tree-id1541 . -9) (undo-tree-id1542 . -9) (undo-tree-id1543 . -9) (undo-tree-id1544 . -9) (undo-tree-id1545 . -9) (undo-tree-id1546 . -9) (undo-tree-id1547 . -9) (undo-tree-id1548 . -9) (undo-tree-id1549 . -9) (undo-tree-id1550 . -9) (undo-tree-id1551 . -9) (undo-tree-id1552 . -9) (undo-tree-id1553 . -9) (undo-tree-id1554 . -9) (undo-tree-id1555 . -9) (undo-tree-id1556 . -9) (undo-tree-id1557 . -9) (undo-tree-id1558 . -9) (undo-tree-id1559 . -9) (undo-tree-id1560 . -9) (undo-tree-id1561 . -9) (undo-tree-id1562 . -9) (undo-tree-id1563 . -9) (undo-tree-id1564 . -9) (undo-tree-id1565 . -9) (undo-tree-id1566 . -9) (undo-tree-id1567 . -9) (undo-tree-id1568 . -9) (undo-tree-id1569 . -9) (undo-tree-id1570 . -9) (undo-tree-id1571 . -9) (undo-tree-id1572 . -9) (undo-tree-id1573 . -9) (undo-tree-id1574 . -9) (undo-tree-id1575 . -9) (undo-tree-id1576 . -9) (undo-tree-id1577 . -9) (undo-tree-id1578 . -9) (undo-tree-id1579 . -9) (undo-tree-id1580 . -9) (undo-tree-id1581 . -9) (undo-tree-id1582 . -9) (undo-tree-id1583 . -9) (undo-tree-id1584 . -9) (undo-tree-id1585 . -9) (undo-tree-id1586 . -9) (undo-tree-id1587 . -9) (undo-tree-id1588 . -9) (undo-tree-id1589 . -9) (undo-tree-id1590 . -9) (undo-tree-id1591 . -9) (undo-tree-id1592 . -9) (undo-tree-id1593 . -9) (undo-tree-id1594 . -9) (undo-tree-id1595 . -9) (undo-tree-id1596 . -9) (undo-tree-id1597 . -9) (undo-tree-id1598 . -9) (undo-tree-id1599 . -9) (undo-tree-id1600 . -9) (undo-tree-id1601 . -9) (undo-tree-id1602 . -9) (undo-tree-id1603 . -9) (undo-tree-id1604 . -9) (undo-tree-id1605 . -9) (undo-tree-id1606 . -9) (undo-tree-id1607 . -9) (undo-tree-id1608 . -9) (undo-tree-id1609 . -9) (undo-tree-id1610 . -9) (undo-tree-id1611 . -9) (undo-tree-id1612 . -9) (undo-tree-id1613 . -9) (undo-tree-id1614 . -9) (undo-tree-id1615 . -9) (undo-tree-id1616 . -9) (undo-tree-id1617 . -9) (undo-tree-id1618 . -9) (undo-tree-id1619 . -9) (undo-tree-id1620 . -9) (undo-tree-id1621 . -9) (undo-tree-id1622 . -9) (undo-tree-id1623 . -9) (undo-tree-id1624 . -9) (undo-tree-id1625 . -9) (undo-tree-id1626 . -9) (undo-tree-id1627 . -9) (undo-tree-id1628 . -9) (undo-tree-id1629 . -9) (undo-tree-id1630 . -9) (undo-tree-id1631 . -9) (undo-tree-id1632 . -9) (undo-tree-id1633 . -9) (undo-tree-id1634 . -9) (undo-tree-id1635 . -9) (undo-tree-id1636 . -9) (undo-tree-id1637 . -9) (undo-tree-id1638 . -9) (undo-tree-id1639 . -9) (undo-tree-id1640 . -9) (undo-tree-id1641 . -9) (undo-tree-id1642 . -9) (undo-tree-id1643 . -9) (undo-tree-id1644 . -9) (undo-tree-id1645 . -9) (undo-tree-id1646 . -9) (undo-tree-id1647 . -9) (undo-tree-id1648 . -9) (undo-tree-id1649 . -9) (undo-tree-id1650 . -9) (undo-tree-id1651 . -9) (undo-tree-id1652 . -9) (undo-tree-id1653 . -9) (undo-tree-id1654 . -9) (undo-tree-id1655 . -9) (undo-tree-id1656 . -9) (undo-tree-id1657 . -9) (undo-tree-id1658 . -9) (undo-tree-id1659 . -9) (undo-tree-id1660 . -9) (undo-tree-id1661 . -9) (undo-tree-id1662 . -9) (undo-tree-id1663 . -9) (undo-tree-id1664 . -9) (undo-tree-id1665 . -9) (undo-tree-id1666 . -9) (undo-tree-id1667 . -9)) nil (25758 15261 642487 43000) 0 nil])
([nil nil ((nil rear-nonsticky nil 972 . 973) (nil fontified nil 924 . 973) (nil fontified nil 850 . 924) (nil fontified nil 775 . 850) (nil fontified nil 696 . 775) (nil fontified nil 616 . 696) (nil fontified nil 539 . 616) (nil fontified nil 463 . 539) (nil fontified nil 392 . 463) (nil fontified nil 321 . 392) (nil fontified nil 247 . 321) (nil fontified nil 174 . 247) (nil fontified nil 99 . 174) (nil fontified nil 31 . 99) (nil fontified nil 2 . 31) (2 . 973)) nil (25758 15261 642032 793000) 0 nil])
([nil nil ((2 . 4)) nil (25758 15261 642029 559000) 0 nil])
([nil nil ((975 . 976)) nil (25758 15261 642024 803000) 0 nil])
([nil nil ((#("Up to now we have focused on feedforward neural networks, where the
" 0 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33) (undo-tree-id1973 . -67) (undo-tree-id1974 . -3) (undo-tree-id1975 . -68) (t 25758 15261 696550 23000)) nil (25758 15302 196960 42000) 0 nil])
([nil nil ((#("activations flow only in one direction, from the input layer to the output
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33) (undo-tree-id1969 . -74) (undo-tree-id1970 . 75) (undo-tree-id1971 . -11) (undo-tree-id1972 . -75)) nil (25758 15302 196957 301000) 0 nil])
([nil nil ((#("layer (a few exceptions are discussed in Appendix E)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33) (undo-tree-id1967 . -51) (undo-tree-id1968 . -52)) nil (25758 15302 196953 559000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1)) nil (25758 15302 196951 289000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 33) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1)) nil (25758 15302 196948 300000) 0 nil])
([nil nil ((164 . 165) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 164) (undo-tree-id1962 . -1)) nil (25758 15302 196942 0) 0 nil])
([nil nil ((#(", as shown in Figure 15-1 (left)" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 302) (undo-tree-id1976 . -31) (undo-tree-id1977 . -32) (t 25758 15302 253761 814000)) nil (25758 15355 344980 657000) 0 nil])
([nil nil ((161 . 163) (t 25758 15322 438357 832000)) nil (25758 15393 789141 920000) 0 nil] [nil nil ((#("Let's look at the simplest possible" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 161) (undo-tree-id1984 . -34) (undo-tree-id1985 . -35) (undo-tree-id1986 . -35) (t 25758 15322 438357 832000)) ((161 . 196)) (25758 15354 931991 325000) 0 nil])
([nil nil ((#("Le" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 163) (undo-tree-id2025 . -1) (undo-tree-id2026 . 2) (undo-tree-id2027 . -2)) nil (25758 15393 789140 859000) 0 nil])
([nil nil ((#("RNN" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 162) (undo-tree-id1980 . -2) (undo-tree-id1981 . 3) (undo-tree-id1982 . -3) (undo-tree-id1983 . -3)) ((162 . 165)) (25758 15354 574009 803000) 0 nil])
([nil nil ((#("t's look at the" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 163) (undo-tree-id2020 . -14) (undo-tree-id2021 . 15) (undo-tree-id2022 . 15) (undo-tree-id2023 . -3) (undo-tree-id2024 . -15)) nil (25758 15393 789138 124000) 0 nil])
([nil nil ((#(", " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 162) (undo-tree-id1978 . -1) (undo-tree-id1979 . -2)) ((162 . 164)) (25758 15354 573808 13000) 0 nil])
([nil nil ((164 . 168) (163 . 164)) nil (25758 15393 789132 344000) 0 nil])
nil
([nil nil ((292 . 293) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 292) (undo-tree-id2019 . -1)) nil (25758 15393 789131 162000) 0 nil])
([nil nil ((294 . 295) (#("A" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 294) (undo-tree-id2018 . -1)) nil (25758 15393 789128 811000) 0 nil])
([nil nil ((#("also called a " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 315) (undo-tree-id1987 . -13) (undo-tree-id1988 . -13) (undo-tree-id1989 . -13) (undo-tree-id1990 . -14) (undo-tree-id1991 . -13) (undo-tree-id1992 . -3) (undo-tree-id1993 . -3) (undo-tree-id1994 . -3) (undo-tree-id1995 . -3) (undo-tree-id1996 . -3) (undo-tree-id1997 . -3) (undo-tree-id1998 . -10) (undo-tree-id1999 . -10) (undo-tree-id2000 . -10) (undo-tree-id2001 . -10) (undo-tree-id2002 . -10) (undo-tree-id2003 . -10) (undo-tree-id2004 . -12) (undo-tree-id2005 . -12) (undo-tree-id2006 . -12) (undo-tree-id2007 . -12) (undo-tree-id2008 . -12) (undo-tree-id2009 . -12) (undo-tree-id2010 . -13) (undo-tree-id2011 . -13) (undo-tree-id2012 . -13) (undo-tree-id2013 . -13) (undo-tree-id2014 . -13) (undo-tree-id2015 . -13) (undo-tree-id2016 . -13) (undo-tree-id2017 . -14) 328) nil (25758 15393 789123 96000) 0 nil])
([nil nil ((428 . 429) (#("–" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 428) (undo-tree-id2028 . -1) (t 25758 15393 848431 844000)) nil (25758 15406 685138 35000) 0 nil])
([nil nil ((433 . 435) (t 25758 15406 688799 427000)) nil (25758 15409 890176 564000) 0 nil])
([nil nil ((519 . 520) (t 25758 15409 892890 911000)) nil (25758 15431 194680 957000) 0 nil])
([nil nil ((#("We can
" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2039 . -6) (undo-tree-id2040 . 7) (undo-tree-id2041 . -7)) nil (25758 15432 112805 74000) 0 nil])
([nil nil ((#("represent this tiny network against the time axis, as shown in Figure 15-1
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2052 . -74) (undo-tree-id2053 . 75) (undo-tree-id2054 . -75)) nil (25758 15448 108353 790000) 0 nil] [nil nil ((#("represent this tiny network against the time axis, as shown in Figure 15-1
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2036 . -74) (undo-tree-id2037 . 75) (undo-tree-id2038 . -75)) ((520 . 595)) (25758 15431 194944 363000) 0 nil])
([nil nil ((#("(right)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2045 . -6) (undo-tree-id2046 . 7) (undo-tree-id2047 . 7) (undo-tree-id2048 . -1) (undo-tree-id2049 . 1) (undo-tree-id2050 . -7) (undo-tree-id2051 . -7)) nil (25758 15448 108350 212000) 0 nil])
([nil nil ((#("(right). This is called " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2029 . -23) (undo-tree-id2030 . 24) (undo-tree-id2031 . 24) (undo-tree-id2032 . -1) (undo-tree-id2033 . 18) (undo-tree-id2034 . -7) (undo-tree-id2035 . -24)) ((520 . 544)) (25758 15431 194669 951000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2042 . -1) (undo-tree-id2043 . 2) (undo-tree-id2044 . -2)) nil (25758 15448 108341 741000) 0 nil])
nil
([nil nil ((#("(it’s the same
recurrent neuron represented once per time step)" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 570) (undo-tree-id2055 . -62) (undo-tree-id2056 . -63) (undo-tree-id2057 . -63) (undo-tree-id2058 . -63) 520 (t 25758 15448 165976 539000)) nil (25758 15477 213643 759000) 0 nil])
([nil nil ((#("This is called " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2114 . -14) (undo-tree-id2115 . 15) (undo-tree-id2116 . -15) (t 25758 15467 214512 128000)) nil (25758 15497 349512 179000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 569) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) 570 (t 25758 15467 214512 128000)) ((569 . 570)) (25758 15474 930412 122000) 0 nil])
([nil nil ((520 . 521)) nil (25758 15497 349509 375000) 0 nil])
([nil nil ((#("This is called u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 520) (undo-tree-id2059 . -15) (undo-tree-id2060 . 16) (undo-tree-id2061 . -16)) ((520 . 536)) (25758 15474 930140 947000) 0 nil])
([nil nil ((521 . 522) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 521)) nil (25758 15497 349507 960000) 0 nil])
nil
([nil nil ((555 . 556) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -555) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) 556 (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t)) . 556) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1)) nil (25758 15497 349502 547000) 0 nil])
([nil nil ((531 . 532) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 531) (t 25758 15497 359353 653000)) nil (25758 15503 935509 737000) 0 nil])
([nil nil ((535 . 536) (#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 535)) nil (25758 15503 935508 287000) 0 nil])
([nil nil ((543 . 544) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 543)) nil (25758 15503 935506 426000) 0 nil])
([nil nil ((551 . 552) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 551)) nil (25758 15503 935501 134000) 0 nil])
([nil nil ((557 . 558) (556 . 557) (t 25758 15503 943536 503000) 555) nil (25758 15507 330366 622000) 0 nil])
([nil nil ((nil rear-nonsticky nil 880 . 881) (nil fontified nil 856 . 881) (nil fontified nil 783 . 856) (nil fontified nil 708 . 783) (nil fontified nil 632 . 708) (nil fontified nil 559 . 632) (559 . 881) (t 25758 15507 339630 684000)) nil (25758 15536 607609 516000) 0 nil])
([nil nil ((881 . 882)) nil (25758 15536 607603 502000) 0 nil])
([nil nil ((#("You can easily create a layer of recurrent neurons" 0 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 559) (undo-tree-id2165 . -49) (undo-tree-id2166 . -24) (undo-tree-id2167 . -24) (undo-tree-id2168 . -24) (undo-tree-id2169 . -24) (undo-tree-id2170 . -24) (undo-tree-id2171 . -24) (undo-tree-id2172 . -50) (t 25758 15536 620439 129000)) nil (25758 15564 870373 952000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 559) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1)) nil (25758 15564 870366 162000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 559) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1)) nil (25758 15564 870363 993000) 0 nil])
([nil nil ((682 . 683) (#("–" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 682) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1)) nil (25758 15564 870361 35000) 0 nil])
([nil nil ((687 . 688)) nil (25758 15564 870355 151000) 0 nil])
([nil nil ((#("as shown in Figure 15-2" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 688) (undo-tree-id2151 . -22) (undo-tree-id2152 . 23) (undo-tree-id2153 . -23)) nil (25758 15564 870354 151000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 688) (undo-tree-id2148 . 1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1)) nil (25758 15564 870350 845000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 688) (undo-tree-id2145 . 1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1)) nil (25758 15564 870347 854000) 0 nil])
([nil nil ((#("Note that " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 688) (undo-tree-id2129 . -9) (undo-tree-id2130 . 10) (undo-tree-id2131 . -9) (undo-tree-id2132 . -9) (undo-tree-id2133 . -10) (undo-tree-id2134 . -9) (undo-tree-id2135 . -3) (undo-tree-id2136 . -3) (undo-tree-id2137 . -3) (undo-tree-id2138 . -3) (undo-tree-id2139 . -3) (undo-tree-id2140 . -3) (undo-tree-id2141 . -8) (undo-tree-id2142 . -9) (undo-tree-id2143 . -9) (undo-tree-id2144 . -10) 697) nil (25758 15564 870341 980000) 0 nil])
([nil nil ((696 . 697) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -696) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) 688) nil (25758 15564 870326 220000) 0 nil])
([nil nil ((#("w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 744) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (t 25758 15564 921214 649000)) nil (25758 15593 684443 117000) 0 nil])
([nil nil ((744 . 746) (#("as" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 744) (undo-tree-id2565 . -1) (undo-tree-id2566 . 2) (undo-tree-id2567 . -2) (undo-tree-id2568 . -2)) nil (25758 15593 684440 215000) 0 nil])
([nil nil ((#("both the inputs and outputs are vectors now (when there is just a single neuron,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 688) (undo-tree-id2177 . -80) (undo-tree-id2178 . 23) (undo-tree-id2179 . 81) (undo-tree-id2180 . -58) (undo-tree-id2181 . -8) (undo-tree-id2182 . -8) (undo-tree-id2183 . -8) (undo-tree-id2184 . -8) (undo-tree-id2185 . -8) (undo-tree-id2186 . -8) (undo-tree-id2187 . -8) (undo-tree-id2188 . -8) (undo-tree-id2189 . -8) (undo-tree-id2190 . -8) (undo-tree-id2191 . -8) (undo-tree-id2192 . -8) (undo-tree-id2193 . -8) (undo-tree-id2194 . -8) (undo-tree-id2195 . -8) (undo-tree-id2196 . -8) (undo-tree-id2197 . -8) (undo-tree-id2198 . -8) (undo-tree-id2199 . -8) (undo-tree-id2200 . -8) (undo-tree-id2201 . -8) (undo-tree-id2202 . -8) (undo-tree-id2203 . -8) (undo-tree-id2204 . -8) (undo-tree-id2205 . -8) (undo-tree-id2206 . -8) (undo-tree-id2207 . -8) (undo-tree-id2208 . -8) (undo-tree-id2209 . -8) (undo-tree-id2210 . -8) (undo-tree-id2211 . -8) (undo-tree-id2212 . -8) (undo-tree-id2213 . -8) (undo-tree-id2214 . -8) (undo-tree-id2215 . -8) (undo-tree-id2216 . -8) (undo-tree-id2217 . -8) (undo-tree-id2218 . -8) (undo-tree-id2219 . -8) (undo-tree-id2220 . -8) (undo-tree-id2221 . -8) (undo-tree-id2222 . -8) (undo-tree-id2223 . -8) (undo-tree-id2224 . -8) (undo-tree-id2225 . -8) (undo-tree-id2226 . -8) (undo-tree-id2227 . -8) (undo-tree-id2228 . -8) (undo-tree-id2229 . -8) (undo-tree-id2230 . -8) (undo-tree-id2231 . -8) (undo-tree-id2232 . -8) (undo-tree-id2233 . -8) (undo-tree-id2234 . -8) (undo-tree-id2235 . -8) (undo-tree-id2236 . -8) (undo-tree-id2237 . -8) (undo-tree-id2238 . -8) (undo-tree-id2239 . -8) (undo-tree-id2240 . -8) (undo-tree-id2241 . -57) (undo-tree-id2242 . -8) (undo-tree-id2243 . -8) (undo-tree-id2244 . -8) (undo-tree-id2245 . -8) (undo-tree-id2246 . -8) (undo-tree-id2247 . -8) (undo-tree-id2248 . -8) (undo-tree-id2249 . -8) (undo-tree-id2250 . -8) (undo-tree-id2251 . -8) (undo-tree-id2252 . -8) (undo-tree-id2253 . -8) (undo-tree-id2254 . -8) (undo-tree-id2255 . -8) (undo-tree-id2256 . -8) (undo-tree-id2257 . -8) (undo-tree-id2258 . -8) (undo-tree-id2259 . -8) (undo-tree-id2260 . -8) (undo-tree-id2261 . -8) (undo-tree-id2262 . -8) (undo-tree-id2263 . -8) (undo-tree-id2264 . -8) (undo-tree-id2265 . -8) (undo-tree-id2266 . -8) (undo-tree-id2267 . -8) (undo-tree-id2268 . -8) (undo-tree-id2269 . -8) (undo-tree-id2270 . -8) (undo-tree-id2271 . -8) (undo-tree-id2272 . -8) (undo-tree-id2273 . -8) (undo-tree-id2274 . -8) (undo-tree-id2275 . -8) (undo-tree-id2276 . -8) (undo-tree-id2277 . -8) (undo-tree-id2278 . -8) (undo-tree-id2279 . -8) (undo-tree-id2280 . -8) (undo-tree-id2281 . -9) (undo-tree-id2282 . -9) (undo-tree-id2283 . -9) (undo-tree-id2284 . -9) (undo-tree-id2285 . -9) (undo-tree-id2286 . -9) (undo-tree-id2287 . -9) (undo-tree-id2288 . -9) (undo-tree-id2289 . -9) (undo-tree-id2290 . -9) (undo-tree-id2291 . -9) (undo-tree-id2292 . -16) (undo-tree-id2293 . -16) (undo-tree-id2294 . -16) (undo-tree-id2295 . -16) (undo-tree-id2296 . -16) (undo-tree-id2297 . -16) (undo-tree-id2298 . -16) (undo-tree-id2299 . -16) (undo-tree-id2300 . -16) (undo-tree-id2301 . -16) (undo-tree-id2302 . -16) (undo-tree-id2303 . -20) (undo-tree-id2304 . -20) (undo-tree-id2305 . -20) (undo-tree-id2306 . -20) (undo-tree-id2307 . -20) (undo-tree-id2308 . -20) (undo-tree-id2309 . -20) (undo-tree-id2310 . -20) (undo-tree-id2311 . -20) (undo-tree-id2312 . -20) (undo-tree-id2313 . -20) (undo-tree-id2314 . -28) (undo-tree-id2315 . -28) (undo-tree-id2316 . -28) (undo-tree-id2317 . -28) (undo-tree-id2318 . -28) (undo-tree-id2319 . -28) (undo-tree-id2320 . -28) (undo-tree-id2321 . -28) (undo-tree-id2322 . -28) (undo-tree-id2323 . -28) (undo-tree-id2324 . -28) (undo-tree-id2325 . -32) (undo-tree-id2326 . -32) (undo-tree-id2327 . -32) (undo-tree-id2328 . -32) (undo-tree-id2329 . -32) (undo-tree-id2330 . -32) (undo-tree-id2331 . -32) (undo-tree-id2332 . -32) (undo-tree-id2333 . -32) (undo-tree-id2334 . -32) (undo-tree-id2335 . -32) (undo-tree-id2336 . -40) (undo-tree-id2337 . -40) (undo-tree-id2338 . -40) (undo-tree-id2339 . -40) (undo-tree-id2340 . -40) (undo-tree-id2341 . -40) (undo-tree-id2342 . -40) (undo-tree-id2343 . -40) (undo-tree-id2344 . -40) (undo-tree-id2345 . -40) (undo-tree-id2346 . -40) (undo-tree-id2347 . -40) (undo-tree-id2348 . -40) (undo-tree-id2349 . -40) (undo-tree-id2350 . -40) (undo-tree-id2351 . -40) (undo-tree-id2352 . -40) (undo-tree-id2353 . -40) (undo-tree-id2354 . -40) (undo-tree-id2355 . -40) (undo-tree-id2356 . -40) (undo-tree-id2357 . -44) (undo-tree-id2358 . -44) (undo-tree-id2359 . -44) (undo-tree-id2360 . -44) (undo-tree-id2361 . -44) (undo-tree-id2362 . -44) (undo-tree-id2363 . -44) (undo-tree-id2364 . -44) (undo-tree-id2365 . -44) (undo-tree-id2366 . -44) (undo-tree-id2367 . -44) (undo-tree-id2368 . -44) (undo-tree-id2369 . -44) (undo-tree-id2370 . -44) (undo-tree-id2371 . -44) (undo-tree-id2372 . -44) (undo-tree-id2373 . -45) (undo-tree-id2374 . -45) (undo-tree-id2375 . -45) (undo-tree-id2376 . -45) (undo-tree-id2377 . -45) (undo-tree-id2378 . -45) (undo-tree-id2379 . -45) (undo-tree-id2380 . -45) (undo-tree-id2381 . -45) (undo-tree-id2382 . -45) (undo-tree-id2383 . -45) (undo-tree-id2384 . -50) (undo-tree-id2385 . -50) (undo-tree-id2386 . -50) (undo-tree-id2387 . -50) (undo-tree-id2388 . -50) (undo-tree-id2389 . -50) (undo-tree-id2390 . -50) (undo-tree-id2391 . -50) (undo-tree-id2392 . -50) (undo-tree-id2393 . -50) (undo-tree-id2394 . -50) (undo-tree-id2395 . -56) (undo-tree-id2396 . -56) (undo-tree-id2397 . -56) (undo-tree-id2398 . -56) (undo-tree-id2399 . -56) (undo-tree-id2400 . -56) (undo-tree-id2401 . -56) (undo-tree-id2402 . -56) (undo-tree-id2403 . -56) (undo-tree-id2404 . -56) (undo-tree-id2405 . -56) (undo-tree-id2406 . -56) (undo-tree-id2407 . -56) (undo-tree-id2408 . -56) (undo-tree-id2409 . -56) (undo-tree-id2410 . -56) (undo-tree-id2411 . -56) (undo-tree-id2412 . -56) (undo-tree-id2413 . -56) (undo-tree-id2414 . -56) (undo-tree-id2415 . -56) (undo-tree-id2416 . -56) (undo-tree-id2417 . -56) (undo-tree-id2418 . -56) (undo-tree-id2419 . -56) (undo-tree-id2420 . -56) (undo-tree-id2421 . -56) (undo-tree-id2422 . -56) (undo-tree-id2423 . -56) (undo-tree-id2424 . -56) (undo-tree-id2425 . -56) (undo-tree-id2426 . -56) (undo-tree-id2427 . -56) (undo-tree-id2428 . -56) (undo-tree-id2429 . -56) (undo-tree-id2430 . -56) (undo-tree-id2431 . -56) (undo-tree-id2432 . -56) (undo-tree-id2433 . -56) (undo-tree-id2434 . -55) (undo-tree-id2435 . -55) (undo-tree-id2436 . -55) (undo-tree-id2437 . -55) (undo-tree-id2438 . -55) (undo-tree-id2439 . -55) (undo-tree-id2440 . -55) (undo-tree-id2441 . -55) (undo-tree-id2442 . -55) (undo-tree-id2443 . -55) (undo-tree-id2444 . -55) (undo-tree-id2445 . -55) (undo-tree-id2446 . -55) (undo-tree-id2447 . -55) (undo-tree-id2448 . -55) (undo-tree-id2449 . -55) (undo-tree-id2450 . -55) (undo-tree-id2451 . -55) (undo-tree-id2452 . -55) (undo-tree-id2453 . -55) (undo-tree-id2454 . -56) (undo-tree-id2455 . -56) (undo-tree-id2456 . -56) (undo-tree-id2457 . -56) (undo-tree-id2458 . -56) (undo-tree-id2459 . -56) (undo-tree-id2460 . -56) (undo-tree-id2461 . -56) (undo-tree-id2462 . -56) (undo-tree-id2463 . -56) (undo-tree-id2464 . -56) (undo-tree-id2465 . -56) (undo-tree-id2466 . -56) (undo-tree-id2467 . -56) (undo-tree-id2468 . -56) (undo-tree-id2469 . -56) (undo-tree-id2470 . -56) (undo-tree-id2471 . -56) (undo-tree-id2472 . -56) (undo-tree-id2473 . -56) (undo-tree-id2474 . -56) (undo-tree-id2475 . -56) (undo-tree-id2476 . -56) (undo-tree-id2477 . -56) (undo-tree-id2478 . -56) (undo-tree-id2479 . -56) (undo-tree-id2480 . -56) (undo-tree-id2481 . -56) (undo-tree-id2482 . -56) (undo-tree-id2483 . -56) (undo-tree-id2484 . -56) (undo-tree-id2485 . -56) (undo-tree-id2486 . -56) (undo-tree-id2487 . -56) (undo-tree-id2488 . -56) (undo-tree-id2489 . -56) (undo-tree-id2490 . -57) (undo-tree-id2491 . -57) (undo-tree-id2492 . -57) (undo-tree-id2493 . -57) (undo-tree-id2494 . -57) (undo-tree-id2495 . -57) (undo-tree-id2496 . -57) (undo-tree-id2497 . -57) (undo-tree-id2498 . -57) (undo-tree-id2499 . -57) (undo-tree-id2500 . -57) (undo-tree-id2501 . -57) (undo-tree-id2502 . -57) (undo-tree-id2503 . -57) (undo-tree-id2504 . -57) (undo-tree-id2505 . -57) (undo-tree-id2506 . -57) (undo-tree-id2507 . -57) (undo-tree-id2508 . -57) (undo-tree-id2509 . -57) (undo-tree-id2510 . -57) (undo-tree-id2511 . -57) (undo-tree-id2512 . -57) (undo-tree-id2513 . -57) (undo-tree-id2514 . -57) (undo-tree-id2515 . -57) (undo-tree-id2516 . -58) (undo-tree-id2517 . -58) (undo-tree-id2518 . -58) (undo-tree-id2519 . -58) (undo-tree-id2520 . -58) (undo-tree-id2521 . -58) (undo-tree-id2522 . -58) (undo-tree-id2523 . -58) (undo-tree-id2524 . -58) (undo-tree-id2525 . -58) (undo-tree-id2526 . -58) (undo-tree-id2527 . -58) (undo-tree-id2528 . -58) (undo-tree-id2529 . -58) (undo-tree-id2530 . -58) (undo-tree-id2531 . -58) (undo-tree-id2532 . -58) (undo-tree-id2533 . -58) (undo-tree-id2534 . -57) (undo-tree-id2535 . -57) (undo-tree-id2536 . -57) (undo-tree-id2537 . -57) (undo-tree-id2538 . -57) (undo-tree-id2539 . -57) (undo-tree-id2540 . -57) (undo-tree-id2541 . -57) (undo-tree-id2542 . -57) (undo-tree-id2543 . -57) (undo-tree-id2544 . -57) (undo-tree-id2545 . -57) (undo-tree-id2546 . -57) (undo-tree-id2547 . -57) (undo-tree-id2548 . -57) (undo-tree-id2549 . -57) (undo-tree-id2550 . -57) (undo-tree-id2551 . -57) (undo-tree-id2552 . -57) (undo-tree-id2553 . -57) (undo-tree-id2554 . -57) (undo-tree-id2555 . -57) (undo-tree-id2556 . -57) (undo-tree-id2557 . -57) (undo-tree-id2558 . -57) (undo-tree-id2559 . -57) (undo-tree-id2560 . -57) (undo-tree-id2561 . -57) (undo-tree-id2562 . -57) (undo-tree-id2563 . -57) (undo-tree-id2564 . -81)) nil (25758 15593 684423 589000) 0 nil])
([nil nil ((#("the output was a scalar).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 25 26 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 688) (undo-tree-id2173 . -25) (undo-tree-id2174 . 26) (undo-tree-id2175 . 26) (undo-tree-id2176 . -26)) nil (25758 15593 684065 185000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1128 . 1129) (nil fontified nil 1058 . 1129) (nil fontified nil 989 . 1058) (nil fontified nil 916 . 989) (nil fontified nil 841 . 916) (nil fontified nil 763 . 841) (nil fontified nil 688 . 763) (688 . 1129) (t 25758 15593 737998 710000)) nil (25758 15638 641395 814000) 0 nil])
([nil nil ((819 . 820) (#("–" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 819) (undo-tree-id2572 . -1)) nil (25758 15638 641393 472000) 0 nil])
([nil nil ((824 . 826)) nil (25758 15638 641383 594000) 0 nil])
([nil nil ((1131 . 1132)) nil (25758 15638 641378 455000) 0 nil])
([nil nil ((#("Let’s call these
" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 826) (undo-tree-id2573 . -16) (undo-tree-id2574 . 17) (undo-tree-id2575 . -17) (t 25758 15638 655210 290000)) nil (25758 15641 380486 14000) 0 nil])
([nil nil ((685 . 686) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 685) (undo-tree-id2678 . -1) (t 25758 15641 391283 696000)) nil (25758 15695 656504 445000) 0 nil])
([nil nil ((738 . 740) (#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7)))) . -738) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) 739 (736 . 739) (735 . 736)) nil (25758 15695 656502 202000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -739) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) 740 (#("one" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display nil)) . 740) (undo-tree-id2655 . -2) (undo-tree-id2656 . 3) (undo-tree-id2657 . 2) (undo-tree-id2658 . -2) (undo-tree-id2659 . -2) (undo-tree-id2660 . -2) (undo-tree-id2661 . -2) (undo-tree-id2662 . -2) (undo-tree-id2663 . -2) (undo-tree-id2664 . -2) (undo-tree-id2665 . -2) (undo-tree-id2666 . -2) (undo-tree-id2667 . -2) (undo-tree-id2668 . -3) (undo-tree-id2669 . -3) 742) nil (25758 15695 656493 560000) 0 nil])
([nil nil ((#("and" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 760) (undo-tree-id2616 . -2) (undo-tree-id2617 . -3) (undo-tree-id2618 . -3)) nil (25758 15695 656456 377000) 0 nil])
([nil nil ((#("the other " 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 761) (undo-tree-id2585 . -9) (undo-tree-id2586 . -9) (undo-tree-id2587 . -9) (undo-tree-id2588 . -10) (undo-tree-id2589 . -9) (undo-tree-id2590 . -2) (undo-tree-id2591 . -2) (undo-tree-id2592 . -2) (undo-tree-id2593 . -2) (undo-tree-id2594 . -2) (undo-tree-id2595 . -2) (undo-tree-id2596 . -8) (undo-tree-id2597 . -8) (undo-tree-id2598 . -8) (undo-tree-id2599 . -8) (undo-tree-id2600 . -8) (undo-tree-id2601 . -8) (undo-tree-id2602 . -10) (undo-tree-id2603 . -10) (undo-tree-id2604 . -10) (undo-tree-id2605 . -10) (undo-tree-id2606 . -10) (undo-tree-id2607 . -10) (undo-tree-id2608 . -9) (undo-tree-id2609 . -9) (undo-tree-id2610 . -9) (undo-tree-id2611 . -9) (undo-tree-id2612 . -9) (undo-tree-id2613 . -9) (undo-tree-id2614 . -9) (undo-tree-id2615 . -10) 770) nil (25758 15695 656452 57000) 0 nil])
([nil nil ((762 . 765) (761 . 762) (#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -761) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) 762 (761 . 762)) nil (25758 15695 656420 860000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 806) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (t 25758 15695 664731 38000)) nil (25758 15724 683327 49000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 813) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1)) nil (25758 15724 683324 627000) 0 nil])
([nil nil ((#("weight vectors wx and wy" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2687 . -23) (undo-tree-id2688 . -24)) nil (25758 15724 683322 374000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2685 . -1) (undo-tree-id2686 . -2)) nil (25758 15729 74856 855000) 0 nil])
([nil nil ((#("If we consider the whole recurrent layer instead
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id3029 . -48) (undo-tree-id3030 . -49)) nil (25758 15832 26940 474000) 0 nil] [nil nil ((#("If we consider the whole recurrent layer instead
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2683 . -48) (undo-tree-id2684 . -49)) ((816 . 865)) (25758 15727 245802 902000) 0 nil])
([nil nil ((#("of just one recurrent neuron, we can place all the weight vectors in two
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 31 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id3027 . -72) (undo-tree-id3028 . -73)) nil (25758 15832 26768 247000) 0 nil])
([nil nil ((#("of just one recurrent neuron" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2681 . -27) (undo-tree-id2682 . -28)) ((816 . 844)) (25758 15724 683522 975000) 0 nil])
([nil nil ((#("weight matrices, Wx and Wy. The output vector of the whole recurrent
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id3025 . -68) (undo-tree-id3026 . -69)) nil (25758 15832 26766 36000) 0 nil])
([nil nil ((#(", " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2679 . -1) (undo-tree-id2680 . -2)) ((816 . 818)) (25758 15724 683308 10000) 0 nil])
([nil nil ((#("layer can then be computed pretty much as you might expect, as shown in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 70 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 816) (undo-tree-id3023 . -71) (undo-tree-id3024 . -72)) nil (25758 15832 26763 613000) 0 nil])
nil
([nil nil ((816 . 819)) nil (25758 15832 26761 535000) 0 nil])
([nil nil ((817 . 818) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -817) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) 818) nil (25758 15832 26759 654000) 0 nil])
([nil nil ((#("
$ $" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 815) (undo-tree-id2815 . -1) (undo-tree-id2816 . -3) (undo-tree-id2817 . 1) (undo-tree-id2818 . -2) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -2) (undo-tree-id2910 . -2) (undo-tree-id2911 . -2) (undo-tree-id2912 . -2) (undo-tree-id2913 . -2) (undo-tree-id2914 . -2) (undo-tree-id2915 . -2) (undo-tree-id2916 . -2) (undo-tree-id2917 . -2) (undo-tree-id2918 . -2) (undo-tree-id2919 . -2) (undo-tree-id2920 . -2) (undo-tree-id2921 . -2) (undo-tree-id2922 . -2) (undo-tree-id2923 . -4) (undo-tree-id2924 . -4) (undo-tree-id2925 . -4) (undo-tree-id2926 . -4) (undo-tree-id2927 . -4) (undo-tree-id2928 . -4) (undo-tree-id2929 . -4) (undo-tree-id2930 . -2) (undo-tree-id2931 . -2) (undo-tree-id2932 . -2) (undo-tree-id2933 . -2) (undo-tree-id2934 . -2) (undo-tree-id2935 . -2) (undo-tree-id2936 . -2) (undo-tree-id2937 . -2) (undo-tree-id2938 . -2) (undo-tree-id2939 . -2) (undo-tree-id2940 . -2) (undo-tree-id2941 . -2) (undo-tree-id2942 . -2) (undo-tree-id2943 . -2) (undo-tree-id2944 . -2) (undo-tree-id2945 . -2) (undo-tree-id2946 . -2) (undo-tree-id2947 . -2) (undo-tree-id2948 . -2) (undo-tree-id2949 . -2) (undo-tree-id2950 . -2) (undo-tree-id2951 . -2) (undo-tree-id2952 . -2) (undo-tree-id2953 . -2) (undo-tree-id2954 . -2) (undo-tree-id2955 . -2) (undo-tree-id2956 . -2) (undo-tree-id2957 . -2) (undo-tree-id2958 . -2) (undo-tree-id2959 . -2) (undo-tree-id2960 . -3) (undo-tree-id2961 . -3) (undo-tree-id2962 . -3) (undo-tree-id2963 . -3) (undo-tree-id2964 . -3) (undo-tree-id2965 . -3) (undo-tree-id2966 . -3) (undo-tree-id2967 . -2) (undo-tree-id2968 . -2) (undo-tree-id2969 . -2) (undo-tree-id2970 . -2) (undo-tree-id2971 . -2) (undo-tree-id2972 . -2) (undo-tree-id2973 . -2) (undo-tree-id2974 . -2) (undo-tree-id2975 . -2) (undo-tree-id2976 . -2) (undo-tree-id2977 . -2) (undo-tree-id2978 . -2) (undo-tree-id2979 . -2) (undo-tree-id2980 . -2) (undo-tree-id2981 . -2) (undo-tree-id2982 . -2) (undo-tree-id2983 . -2) (undo-tree-id2984 . -2) (undo-tree-id2985 . -2) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) (undo-tree-id2990 . -4) 817) nil (25758 15832 26733 459000) 0 nil])
([nil nil ((#("y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -816) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) 817 (816 . 817) (815 . 816)) nil (25758 15832 26526 46000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1004 . 1005) (nil fontified nil 972 . 1005) (nil fontified nil 970 . 972) (nil fontified nil 968 . 970) (nil fontified nil 903 . 968) (nil fontified nil 895 . 903) (nil fontified nil 816 . 895) (816 . 1005)) nil (25758 15832 26372 265000) 0 nil])
([nil nil ((#("Equation 15-1 (b is the bias vector and ϕ(·) is the activation function (e.g.,
" 0 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2772 . -78) (undo-tree-id2773 . -77) (undo-tree-id2774 . -77) (undo-tree-id2775 . -77) (undo-tree-id2776 . -77) (undo-tree-id2777 . -77) (undo-tree-id2778 . -77) (undo-tree-id2779 . -32) (undo-tree-id2780 . -32) (undo-tree-id2781 . -32) (undo-tree-id2782 . -32) (undo-tree-id2783 . -32) (undo-tree-id2784 . -32) (undo-tree-id2785 . -79)) nil (25758 15832 26367 596000) 0 nil])
([nil nil ((#("ReLU1).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2762 . -7) (undo-tree-id2763 . -6) (undo-tree-id2764 . -6) (undo-tree-id2765 . -6) (undo-tree-id2766 . -6) (undo-tree-id2767 . -6) (undo-tree-id2768 . -6) (undo-tree-id2769 . 8) (undo-tree-id2770 . -4) (undo-tree-id2771 . -8)) nil (25758 15832 26353 786000) 0 nil])
([nil nil ((#("Equation 15-1. Output of a recurrent layer for a single instance
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2748 . -64) (undo-tree-id2749 . -65) (undo-tree-id2750 . -65) (undo-tree-id2751 . -65) (undo-tree-id2752 . -65) (undo-tree-id2753 . -65) (undo-tree-id2754 . -65) (undo-tree-id2755 . -32) (undo-tree-id2756 . -32) (undo-tree-id2757 . -32) (undo-tree-id2758 . -32) (undo-tree-id2759 . -32) (undo-tree-id2760 . -32) (undo-tree-id2761 . -65)) nil (25758 15832 26345 752000) 0 nil])
([nil nil ((#("⊺
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2735 . -1) (undo-tree-id2736 . -2) (undo-tree-id2737 . -2) (undo-tree-id2738 . -2) (undo-tree-id2739 . -2) (undo-tree-id2740 . -2) (undo-tree-id2741 . -2) (undo-tree-id2742 . -2) (undo-tree-id2743 . -2) (undo-tree-id2744 . -2) (undo-tree-id2745 . -2) (undo-tree-id2746 . -2) (undo-tree-id2747 . -2)) nil (25758 15832 26296 683000) 0 nil])
([nil nil ((#("⊺
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 816) (undo-tree-id2733 . -1) (undo-tree-id2734 . -2)) nil (25758 15832 26225 387000) 0 nil])
([nil nil ((817 . 818)) nil (25758 15832 26222 334000) 0 nil])
([nil nil ((827 . 828)) nil (25758 15832 26221 255000) 0 nil])
([nil nil ((#("T" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -827) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) 828 (827 . 828) (#("P" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise 0.3) (height 0.7)))) . -828) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) 829 (827 . 829)) nil (25758 15832 26215 627000) 0 nil])
([nil nil ((828 . 829)) nil (25758 15832 25684 351000) 0 nil])
([nil nil ((840 . 841)) nil (25758 15832 25683 466000) 0 nil])
([nil nil ((842 . 844)) nil (25758 15832 25682 672000) 0 nil])
([nil nil ((848 . 849) (#("−" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 848) (undo-tree-id2693 . -1)) nil (25758 15832 25680 510000) 0 nil])
([nil nil ((856 . 857)) nil (25758 15832 25666 579000) 0 nil])
([nil nil ((856 . 857) (t 25758 15832 48302 893000)) nil (25758 15888 634934 194000) 0 nil])
([nil nil ((nil rear-nonsticky nil 929 . 930) (nil fontified nil 928 . 930) (nil fontified nil 926 . 928) (nil fontified nil 923 . 926) (nil fontified nil 897 . 923) (nil fontified nil 886 . 897) (nil fontified nil 857 . 886) (857 . 930)) nil (25758 15888 634932 970000) 0 nil])
([nil nil ((857 . 860)) nil (25758 15888 634930 798000) 0 nil])
([nil nil ((857 . 861)) nil (25758 15888 634925 791000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . 863) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (t 25758 15888 645761 864000)) nil (25758 15909 217990 600000) 0 nil])
([nil nil ((869 . 870) (868 . 869) (#("B" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display ((raise -0.3) (height 0.7)))) . -868) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) 869 (866 . 869)) nil (25758 15948 107491 974000) 0 nil])
([nil nil ((#("    = ϕ(X_x^T (t) Wx + Y (t−1) Wy + b)
" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 4 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 6 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t invisible t) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil invisible t) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display ((raise 0.3) (height 0.7))) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 14 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil) 17 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 18 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil) 19 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil) 20 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 25 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil) 30 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil) 38 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 857) (undo-tree-id3288 . -38) (undo-tree-id3289 . 30) (undo-tree-id3290 . -11) (undo-tree-id3291 . -9) (undo-tree-id3292 . -9) (undo-tree-id3293 . -9) (undo-tree-id3294 . -9) (undo-tree-id3295 . -9) (undo-tree-id3296 . -9) (undo-tree-id3297 . -9) (undo-tree-id3298 . -9) (undo-tree-id3299 . -9) (undo-tree-id3300 . -9) (undo-tree-id3301 . -9) (undo-tree-id3302 . -9) (undo-tree-id3303 . -9) (undo-tree-id3304 . -9) (undo-tree-id3305 . -9) (undo-tree-id3306 . -9) (undo-tree-id3307 . -9) (undo-tree-id3308 . -9) (undo-tree-id3309 . -9) (undo-tree-id3310 . -9) (undo-tree-id3311 . -9) (undo-tree-id3312 . -9) (undo-tree-id3313 . -9) (undo-tree-id3314 . -9) (undo-tree-id3315 . -9) (undo-tree-id3316 . -9) (undo-tree-id3317 . -9) (undo-tree-id3318 . -9) (undo-tree-id3319 . -24) (undo-tree-id3320 . -24) (undo-tree-id3321 . -24) (undo-tree-id3322 . -24) (undo-tree-id3323 . -24) (undo-tree-id3324 . -24) (undo-tree-id3325 . -24) (undo-tree-id3326 . -24) (undo-tree-id3327 . -24) (undo-tree-id3328 . -24) (undo-tree-id3329 . -24) (undo-tree-id3330 . -24) (undo-tree-id3331 . -24) (undo-tree-id3332 . -24) (undo-tree-id3333 . 21) (undo-tree-id3334 . -20) (undo-tree-id3335 . -19) (undo-tree-id3336 . -19) (undo-tree-id3337 . -19) (undo-tree-id3338 . -19) (undo-tree-id3339 . -19) (undo-tree-id3340 . -19) (undo-tree-id3341 . -19) (undo-tree-id3342 . -17) (undo-tree-id3343 . -17) (undo-tree-id3344 . -17) (undo-tree-id3345 . -17) (undo-tree-id3346 . -17) (undo-tree-id3347 . -17) (undo-tree-id3348 . -17) (undo-tree-id3349 . -13) (undo-tree-id3350 . -13) (undo-tree-id3351 . -13) (undo-tree-id3352 . -13) (undo-tree-id3353 . -13) (undo-tree-id3354 . -13) (undo-tree-id3355 . -13) (undo-tree-id3356 . -13) (undo-tree-id3357 . -13) (undo-tree-id3358 . -13) (undo-tree-id3359 . -13) (undo-tree-id3360 . -13) (undo-tree-id3361 . -13) (undo-tree-id3362 . -13) (undo-tree-id3363 . -13) (undo-tree-id3364 . -13) (undo-tree-id3365 . -13) (undo-tree-id3366 . -13) (undo-tree-id3367 . -11) (undo-tree-id3368 . -13) (undo-tree-id3369 . -13) (undo-tree-id3370 . -13) (undo-tree-id3371 . -13) (undo-tree-id3372 . -13) (undo-tree-id3373 . -13) (undo-tree-id3374 . -13) (undo-tree-id3375 . -13) (undo-tree-id3376 . -13) (undo-tree-id3377 . -13) (undo-tree-id3378 . -13) (undo-tree-id3379 . -13) (undo-tree-id3380 . -13) (undo-tree-id3381 . -13) (undo-tree-id3382 . -13) (undo-tree-id3383 . -13) (undo-tree-id3384 . -13) (undo-tree-id3385 . -13) (undo-tree-id3386 . -13) (undo-tree-id3387 . -13) (undo-tree-id3388 . -14) (undo-tree-id3389 . -14) (undo-tree-id3390 . -14) (undo-tree-id3391 . -14) (undo-tree-id3392 . -14) (undo-tree-id3393 . -14) (undo-tree-id3394 . -13) (undo-tree-id3395 . -13) (undo-tree-id3396 . -13) (undo-tree-id3397 . -13) (undo-tree-id3398 . -13) (undo-tree-id3399 . -13) (undo-tree-id3400 . -11) (undo-tree-id3401 . -11) (undo-tree-id3402 . -11) (undo-tree-id3403 . -11) (undo-tree-id3404 . -11) (undo-tree-id3405 . -11) (undo-tree-id3406 . -11) (undo-tree-id3407 . -11) (undo-tree-id3408 . -11) (undo-tree-id3409 . -39) 868 (t 25758 15949 123302 186000)) nil (25758 16007 419473 171000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 870) (undo-tree-id3031 . 1) (undo-tree-id3033 . -1)) ((870 . 871)) (25758 15947 374380 0) 0 nil])
([nil nil ((#("= ϕ([X (t)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 857) (undo-tree-id3264 . -10) (undo-tree-id3265 . 11) (undo-tree-id3266 . -9) (undo-tree-id3267 . -9) (undo-tree-id3268 . -9) (undo-tree-id3269 . -9) (undo-tree-id3270 . -9) (undo-tree-id3271 . -9) (undo-tree-id3272 . -9) (undo-tree-id3273 . -9) (undo-tree-id3274 . 2) (undo-tree-id3275 . -10) (undo-tree-id3276 . 4) (undo-tree-id3277 . -8) (undo-tree-id3278 . -9) (undo-tree-id3279 . -9) (undo-tree-id3280 . -9) (undo-tree-id3281 . -9) (undo-tree-id3282 . -9) (undo-tree-id3283 . -9) (undo-tree-id3284 . -9) (undo-tree-id3285 . -9) (undo-tree-id3286 . -9) (undo-tree-id3287 . -11) 866) nil (25758 16007 419112 976000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 873) (undo-tree-id3053 . -1) (undo-tree-id3055 . -1) (undo-tree-id3057 . -1) (undo-tree-id3059 . -1) (undo-tree-id3061 . -1) (undo-tree-id3063 . -1) (t 25758 15909 274290 680000)) ((873 . 874)) (25758 15947 5329 451000) 0 nil])
([nil nil ((#("Y (t−1) ]W + b) with W =[
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 857) (undo-tree-id3244 . -25) (undo-tree-id3245 . 26) (undo-tree-id3246 . -9) (undo-tree-id3247 . -9) (undo-tree-id3248 . -9) (undo-tree-id3249 . -9) (undo-tree-id3250 . -9) (undo-tree-id3251 . -9) (undo-tree-id3252 . -9) (undo-tree-id3253 . -9) (undo-tree-id3254 . -9) (undo-tree-id3255 . -9) (undo-tree-id3256 . -9) (undo-tree-id3257 . -9) (undo-tree-id3258 . -9) (undo-tree-id3259 . -9) (undo-tree-id3260 . -9) (undo-tree-id3261 . -9) (undo-tree-id3262 . -9) (undo-tree-id3263 . -26) 866) nil (25758 16007 419092 914000) 0 nil])
([nil nil ((874 . 875)) ((#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil invisible t)) . 874)) (25758 15946 676660 293000) 0 nil])
([nil nil ((#("Wx
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 857) (undo-tree-id3222 . -2) (undo-tree-id3223 . 3) (undo-tree-id3224 . -1) (undo-tree-id3225 . 3) (undo-tree-id3226 . -2) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -3) 858) nil (25758 16007 419072 679000) 0 nil])
([nil nil ((880 . 881)) ((#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil)) . 880) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1)) (25758 15946 359368 330000) 0 nil])
([nil nil ((#("]
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 857) (undo-tree-id3217 . -1) (undo-tree-id3218 . 2) (undo-tree-id3219 . 2) (undo-tree-id3220 . -1) (undo-tree-id3221 . -2)) nil (25758 16007 419050 660000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 881) (undo-tree-id3050 . 1) (undo-tree-id3052 . -1)) ((881 . 882) (t 25758 15945 291205 223000)) (25758 15941 662599 566000) 0 nil])
([nil nil ((#("Wy
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 857) (undo-tree-id3212 . -2) (undo-tree-id3213 . 3) (undo-tree-id3214 . 3) (undo-tree-id3215 . -2) (undo-tree-id3216 . -3)) nil (25758 16007 419043 192000) 0 nil])
([nil nil ((866 . 870) (#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t invisible t)) . 866) (undo-tree-id3069 . 1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1)) ((866 . 867) (#("_(t)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t invisible t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display ((raise -0.3) (height 0.7)))) . 866) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (undo-tree-id3085 . -4) (undo-tree-id3086 . -4) (undo-tree-id3087 . -4) (undo-tree-id3088 . -4) (undo-tree-id3089 . -4) (undo-tree-id3090 . -4) (undo-tree-id3091 . -4)) (25758 15940 866402 277000) 0 nil] [nil nil ((866 . 867) (#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t invisible t)) . 866) (undo-tree-id3048 . 1) (undo-tree-id3049 . -1)) ((866 . 867) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . 866)) (25758 15929 634366 893000) 0 nil])
([nil nil ((857 . 858)) nil (25758 16007 418393 589000) 0 nil])
([nil nil ((#("x" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t display nil)) . 870) (undo-tree-id3065 . 1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1)) ((870 . 871) (t 25758 15937 619010 978000)) (25758 15937 561302 642000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 930 . 931) (nil fontified nil 929 . 931) (nil fontified nil 927 . 929) (nil fontified nil 924 . 927) (nil fontified nil 898 . 924) (nil fontified nil 887 . 898) (nil fontified nil 858 . 887) (858 . 931)) nil (25758 16007 418392 575000) 0 nil])
nil
([nil nil ((861 . 862)) nil (25758 16007 418390 644000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 862) (undo-tree-id3209 . 1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1)) nil (25758 16007 418389 214000) 0 nil])
([nil nil ((nil rear-nonsticky nil 863 . 864) (nil fontified nil 857 . 864) (857 . 864)) nil (25758 16007 418386 228000) 0 nil])
([nil nil ((864 . 865) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -864) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) 863) nil (25758 16007 418381 203000) 0 nil])
([nil nil ((856 . 857) 823) nil (25758 16007 418211 174000) 0 nil])
([nil nil ((939 . 940)) nil (25758 16007 418123 610000) 0 nil])
([nil nil ((858 . 859) (#("y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 858) (t 25758 16007 428773 34000)) nil (25758 16016 720207 498000) 0 nil])
([nil nil ((875 . 877) (#("x" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -875) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) 876 (t 25758 16016 729006 908000)) nil (25758 16025 793308 4000) 0 nil])
([nil nil ((881 . 882) (t 25758 16025 805234 964000)) nil (25758 16030 187093 426000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 882) (undo-tree-id3421 . 1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1)) nil (25758 16030 187089 128000) 0 nil])
([nil nil ((889 . 890) (t 25758 16030 189345 59000)) nil (25758 16042 669586 785000) 0 nil])
([nil nil ((907 . 908) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -907) (undo-tree-id3428 . -1) 897) nil (25758 16042 669585 154000) 0 nil])
([nil nil ((903 . 904)) nil (25758 16042 669582 165000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 904) (undo-tree-id3424 . 1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1)) nil (25758 16042 669578 264000) 0 nil])
([nil nil ((909 . 910) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 909) (undo-tree-id3438 . 1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (t 25758 16042 677658 441000)) nil (25758 16059 113881 468000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 915) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1)) nil (25758 16059 113827 310000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 917) (undo-tree-id3431 . 1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1)) nil (25758 16059 113821 565000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 918) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1)) nil (25758 16059 113814 593000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -936) (undo-tree-id3463 . -1) (933 . 934) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -933) (undo-tree-id3464 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -932) (undo-tree-id3465 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -930) (undo-tree-id3466 . -1) 926 (t 25758 16059 126070 689000)) nil (25758 16085 624800 490000) 0 nil])
([nil nil ((#("]" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 932) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . 1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1)) nil (25758 16085 624662 902000) 0 nil])
([nil nil ((nil rear-nonsticky nil 935 . 936) (nil fontified nil 935 . 936) (935 . 936) 934) nil (25758 16085 624613 60000) 0 nil])
([nil nil ((931 . 932)) nil (25758 16085 624611 400000) 0 nil])
([nil nil ((935 . 936)) nil (25758 16085 624610 191000) 0 nil])
([nil nil ((938 . 940)) nil (25758 16085 624608 711000) 0 nil])
([nil nil ((nil fontified t 940 . 941) (nil line-prefix #("  " 0 2 (face org-indent)) 940 . 941) (nil wrap-prefix #("  " 0 2 (face org-indent)) 940 . 941) (940 . 941)) nil (25758 16085 624603 781000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1736 . 1737) (nil fontified nil 1689 . 1737) (nil fontified nil 1627 . 1689) (nil fontified nil 1563 . 1627) (nil fontified nil 1496 . 1563) (nil fontified nil 1445 . 1496) (nil fontified nil 1383 . 1445) (nil fontified nil 1334 . 1383) (nil fontified nil 1273 . 1334) (nil fontified nil 1230 . 1273) (nil fontified nil 1160 . 1230) (nil fontified nil 1092 . 1160) (nil fontified nil 1029 . 1092) (nil fontified nil 959 . 1029) (nil fontified nil 941 . 959) (941 . 1737) (t 25758 16085 634733 917000)) nil (25758 16200 104740 606000) 0 nil])
([nil nil ((#("In this equation:" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 941) (undo-tree-id3515 . -16) (undo-tree-id3516 . -16) (undo-tree-id3517 . -16) (undo-tree-id3518 . -16) (undo-tree-id3519 . -16) (undo-tree-id3520 . -16) (undo-tree-id3521 . -16) (undo-tree-id3522 . -17) (undo-tree-id3523 . -17)) nil (25758 16200 104736 677000) 0 nil])
([nil nil ((942 . 944) (941 . 942)) nil (25758 16200 104729 567000) 0 nil])
([nil nil ((943 . 944) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 943) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -944) (undo-tree-id3513 . 1) (undo-tree-id3514 . -1) 943) nil (25758 16200 104727 762000) 0 nil])
([nil nil ((945 . 946)) nil (25758 16200 104719 534000) 0 nil])
([nil nil ((961 . 962)) nil (25758 16200 104718 528000) 0 nil])
([nil nil ((997 . 998) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 997) (undo-tree-id3503 . -1)) nil (25758 16200 104717 49000) 0 nil])
([nil nil ((1148 . 1150) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1148) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . -1149) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) 1150 (1147 . 1148) (1147 . 1149) (1146 . 1147) 1084) nil (25758 16200 104713 950000) 0 nil])
([nil nil ((1149 . 1150) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1149) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1150) (undo-tree-id3476 . 1) (undo-tree-id3477 . -1) 1149) nil (25758 16200 104691 863000) 0 nil])
([nil nil ((1727 . 1728)) nil (25758 16200 104671 284000) 0 nil])
([nil nil ((1112 . 1113) (t 25758 16200 113583 229000)) nil (25758 16208 601849 982000) 0 nil])
([nil nil ((1152 . 1153) (t 25758 16208 609793 819000)) nil (25758 16240 991091 684000) 0 nil])
([nil nil ((1168 . 1169)) nil (25758 16240 991090 39000) 0 nil])
([nil nil ((1225 . 1226)) nil (25758 16240 991089 44000) 0 nil])
([nil nil ((1016 . 1018)) nil (25758 16240 991087 379000) 0 nil])
([nil nil ((1081 . 1083)) nil (25758 16240 991082 392000) 0 nil])
([nil nil ((1227 . 1229) (t 25758 16241 46596 822000)) nil (25758 16270 18867 270000) 0 nil])
([nil nil ((1274 . 1276) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1274) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . -1275) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) 1276 (1273 . 1274) (1273 . 1275)) nil (25758 16270 18864 591000) 0 nil])
([nil nil ((1277 . 1278)) nil (25758 16270 18835 534000) 0 nil])
([nil nil ((1297 . 1298)) nil (25758 16270 18834 16000) 0 nil])
([nil nil ((1287 . 1288)) nil (25758 16270 18828 504000) 0 nil])
([nil nil ((1389 . 1391) (1388 . 1389) (t 25758 16270 75314 155000)) nil (25758 16288 727944 410000) 0 nil])
([nil nil ((1340 . 1341)) nil (25758 16288 727943 86000) 0 nil])
([nil nil ((1341 . 1342)) nil (25758 16288 727942 110000) 0 nil])
([nil nil ((1392 . 1393) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1392) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1393) (undo-tree-id3558 . -1) 1392) nil (25758 16288 727939 991000) 0 nil])
([nil nil ((1394 . 1395)) nil (25758 16288 727924 443000) 0 nil])
([nil nil ((1404 . 1405)) nil (25758 16288 727922 855000) 0 nil])
([nil nil ((1416 . 1417)) nil (25758 16288 727918 193000) 0 nil])
([nil nil ((1458 . 1460) (t 25758 16288 787775 958000)) nil (25758 16295 904003 774000) 0 nil])
([nil nil ((1510 . 1511) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1510) (undo-tree-id3559 . -1) 1459 (t 25758 16295 907951 552000)) nil (25758 16305 859034 80000) 0 nil])
([nil nil ((1513 . 1515) (1511 . 1513)) nil (25758 16305 859020 35000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1391) (undo-tree-id3560 . -2) (undo-tree-id3561 . -2) (undo-tree-id3562 . -2) (undo-tree-id3563 . -2) (undo-tree-id3564 . -2) (undo-tree-id3565 . -2) (undo-tree-id3566 . -2) (undo-tree-id3567 . -2) (undo-tree-id3568 . -2) (undo-tree-id3569 . -2) 1393 (1390 . 1393) (t 25758 16305 876197 275000) 1341) nil (25758 16309 124464 48000) 0 nil])
([nil nil ((1539 . 1540) (t 25758 16309 128277 413000)) nil (25758 16355 990276 695000) 0 nil])
([nil nil ((1570 . 1571) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1570) (undo-tree-id3570 . -1)) nil (25758 16355 990274 664000) 0 nil])
([nil nil ((1583 . 1584)) nil (25758 16355 990260 605000) 0 nil])
([nil nil ((1584 . 1586) (t 25758 16356 45432 119000)) nil (25758 16405 345824 565000) 0 nil])
([nil nil ((1585 . 1586) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1585) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1586) (undo-tree-id3601 . 1) (undo-tree-id3602 . -1) 1585) nil (25758 16405 345822 567000) 0 nil])
([nil nil ((1607 . 1608)) nil (25758 16405 345814 973000) 0 nil])
([nil nil ((1615 . 1616)) nil (25758 16405 345814 149000) 0 nil])
([nil nil ((1652 . 1654)) nil (25758 16405 345813 522000) 0 nil])
([nil nil ((1695 . 1696)) nil (25758 16405 345812 676000) 0 nil])
([nil nil ((1706 . 1707)) nil (25758 16405 345811 989000) 0 nil])
([nil nil ((1719 . 1720)) nil (25758 16405 345811 369000) 0 nil])
([nil nil ((1695 . 1697) (1694 . 1695) (1693 . 1694)) nil (25758 16405 345810 467000) 0 nil])
([nil nil ((1721 . 1722) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . -1721) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) 1696) nil (25758 16405 345808 278000) 0 nil])
([nil nil ((#("(see the second line of Equation 15-2)" 0 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 1732) (undo-tree-id3571 . -37) (undo-tree-id3572 . 38) (undo-tree-id3573 . -1) (undo-tree-id3574 . 1) (undo-tree-id3575 . -38) (undo-tree-id3576 . -38)) nil (25758 16405 345793 846000) 0 nil])
([nil nil ((1737 . 1738) (1733 . 1737) (t 25758 16405 358643 67000) 1732) nil (25758 16432 768913 119000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2186 . 2187) (nil fontified nil 2153 . 2187) (nil fontified nil 2079 . 2153) (nil fontified nil 1996 . 2079) (nil fontified nil 1920 . 1996) (nil fontified nil 1839 . 1920) (nil fontified nil 1806 . 1839) (nil fontified nil 1739 . 1806) (1739 . 2187)) nil (25758 16432 768911 2000) 0 nil])
([nil nil ((1735 . 1736) (1734 . 1735) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226]))) . -1734) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) 1735 (1734 . 1735)) nil (25758 16432 768907 91000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1734) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1)) nil (25758 16432 768896 988000) 0 nil])
([nil nil ((1735 . 1736) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1735) (undo-tree-id3603 . 1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1735) (undo-tree-id3645 . 3) (undo-tree-id3646 . -3) (undo-tree-id3647 . -3) (undo-tree-id3648 . -3) (undo-tree-id3649 . -3) (undo-tree-id3650 . -3) (undo-tree-id3651 . -3) (undo-tree-id3652 . -3) (undo-tree-id3653 . -3) (undo-tree-id3654 . -3) (undo-tree-id3655 . -3) (undo-tree-id3656 . -3) (undo-tree-id3657 . -3) (undo-tree-id3658 . -3) (undo-tree-id3659 . -3) (undo-tree-id3660 . -3) (undo-tree-id3661 . -3) (undo-tree-id3662 . -3) (undo-tree-id3663 . -3) (undo-tree-id3664 . -3) (undo-tree-id3665 . -3) (undo-tree-id3666 . -3) (undo-tree-id3667 . -3) (undo-tree-id3668 . -3) (undo-tree-id3669 . -3) (undo-tree-id3670 . -3) (undo-tree-id3671 . -3) (undo-tree-id3672 . -3) (undo-tree-id3673 . -3) (undo-tree-id3674 . -3) (undo-tree-id3675 . -3) (undo-tree-id3676 . -3) (undo-tree-id3677 . -3) (undo-tree-id3678 . -3) (undo-tree-id3679 . -3) (undo-tree-id3680 . -3) (undo-tree-id3681 . -3) (undo-tree-id3682 . -3) (undo-tree-id3683 . -3) (undo-tree-id3684 . -3) (undo-tree-id3685 . -3) (undo-tree-id3686 . -3) (undo-tree-id3687 . -3) (undo-tree-id3688 . -3) (undo-tree-id3689 . -3) (undo-tree-id3690 . -3) (undo-tree-id3691 . -3) (undo-tree-id3692 . -3) (undo-tree-id3693 . -3) (undo-tree-id3694 . -3) (undo-tree-id3695 . -3) (undo-tree-id3696 . -3) (undo-tree-id3697 . -3) (undo-tree-id3698 . -3) (undo-tree-id3699 . -3) (undo-tree-id3700 . -3) (undo-tree-id3701 . -3) (undo-tree-id3702 . -3) (undo-tree-id3703 . -3) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -3) (undo-tree-id3708 . -3) (undo-tree-id3709 . -3) (undo-tree-id3710 . -3) (undo-tree-id3711 . -3) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -3) (undo-tree-id3718 . -3) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) (undo-tree-id3724 . -3) (undo-tree-id3725 . -3) (undo-tree-id3726 . -3) (undo-tree-id3727 . -3) (undo-tree-id3728 . -3) (undo-tree-id3729 . -3) (undo-tree-id3730 . -3) (undo-tree-id3731 . -3) (undo-tree-id3732 . -3) (undo-tree-id3733 . -3) (undo-tree-id3734 . -3) (undo-tree-id3735 . -3) (undo-tree-id3736 . -3) (undo-tree-id3737 . -3) (undo-tree-id3738 . -3) (undo-tree-id3739 . -3) (undo-tree-id3740 . -3) (undo-tree-id3741 . -3) (undo-tree-id3742 . -3) (undo-tree-id3743 . -3) (undo-tree-id3744 . -3) (undo-tree-id3745 . -3) (undo-tree-id3746 . -3) (undo-tree-id3747 . -3) (undo-tree-id3748 . -3) (undo-tree-id3749 . -3) (undo-tree-id3750 . -3) (undo-tree-id3751 . -2) (undo-tree-id3752 . -2) (undo-tree-id3753 . -2) (undo-tree-id3754 . -2) (undo-tree-id3755 . -2) (undo-tree-id3756 . -2) (undo-tree-id3757 . -3) (undo-tree-id3758 . -3) (undo-tree-id3759 . -3) (undo-tree-id3760 . -3) (undo-tree-id3761 . -3) (undo-tree-id3762 . -3) (undo-tree-id3763 . -3) (undo-tree-id3764 . -3) (undo-tree-id3765 . -3) (undo-tree-id3766 . -3) (undo-tree-id3767 . -3) (undo-tree-id3768 . -3) (undo-tree-id3769 . -3) (undo-tree-id3770 . -3) (undo-tree-id3771 . -3) (undo-tree-id3772 . -3) (undo-tree-id3773 . -3) (undo-tree-id3774 . -3) (undo-tree-id3775 . -3) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1738) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) 1734) nil (25758 16432 768861 239000) 0 nil])
([nil nil ((2184 . 2185)) nil (25758 16432 768336 145000) 0 nil])
([nil nil ((#("The notation " 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1736) (undo-tree-id3927 . -12) (undo-tree-id3928 . 13) (undo-tree-id3929 . -12) (undo-tree-id3930 . -12) (undo-tree-id3931 . -13) (undo-tree-id3932 . -12) (undo-tree-id3933 . -2) (undo-tree-id3934 . -2) (undo-tree-id3935 . -2) (undo-tree-id3936 . -2) (undo-tree-id3937 . -2) (undo-tree-id3938 . -2) (undo-tree-id3939 . -11) (undo-tree-id3940 . -11) (undo-tree-id3941 . -11) (undo-tree-id3942 . -11) (undo-tree-id3943 . -11) (undo-tree-id3944 . -11) (undo-tree-id3945 . -12) (undo-tree-id3946 . -12) (undo-tree-id3947 . -12) (undo-tree-id3948 . -12) (undo-tree-id3949 . -12) (undo-tree-id3950 . -12) (undo-tree-id3951 . -12) (undo-tree-id3952 . -13) 1748 (t 25758 16432 779315 302000)) nil (25758 16437 373830 998000) 0 nil])
([nil nil ((1738 . 1739) (t 25758 16437 387428 199000)) nil (25758 16462 681848 466000) 0 nil])
([nil nil ((1744 . 1745)) nil (25758 16462 681847 403000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . -1734) (undo-tree-id3955 . -3) (undo-tree-id3956 . -3) (undo-tree-id3957 . -3) (undo-tree-id3958 . -3) (undo-tree-id3959 . -3) (undo-tree-id3960 . -3) (undo-tree-id3961 . -3) (undo-tree-id3962 . -3) (undo-tree-id3963 . -3) (undo-tree-id3964 . -3) (undo-tree-id3965 . -3) (undo-tree-id3966 . -3) (undo-tree-id3967 . -3) (undo-tree-id3968 . -3) (undo-tree-id3969 . -3) 1737 (1733 . 1737) 1697) nil (25758 16462 681845 216000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1734) (undo-tree-id3953 . 1) (undo-tree-id3954 . -1)) nil (25758 16462 681825 535000) 0 nil])
([nil nil ((1792 . 1795)) nil (25758 16462 681777 566000) 0 nil])
([nil nil ((1812 . 1813)) nil (25758 16462 682074 888000) 0 nil])
([nil nil ((1822 . 1823)) nil (25758 16469 282176 225000) 0 nil] [nil nil ((1821 . 1822)) ((#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 1821) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1)) (25758 16462 681770 348000) 0 nil])
([nil nil ((nil line-prefix #("  " 0 2 (face org-indent)) 1825 . 1826) (nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) 1825 . 1826) (nil fontified nil 1825 . 1826) (1825 . 1826) (#("–" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t display ((raise -0.3) (height 0.7)))) . 1825) (undo-tree-id3973 . -1)) nil (25758 16469 282173 708000) 0 nil])
nil
([nil nil ((1830 . 1831)) nil (25758 16469 282139 488000) 0 nil])
([nil nil ((1831 . 1833) (t 25758 16469 344210 569000)) nil (25758 16497 18426 336000) 0 nil])
([nil nil ((1846 . 1847)) nil (25758 16497 18425 294000) 0 nil])
([nil nil ((1869 . 1870)) nil (25758 16497 18424 197000) 0 nil])
([nil nil ((1879 . 1880)) nil (25758 16497 18423 72000) 0 nil])
([nil nil ((nil line-prefix #("  " 0 2 (face org-indent)) 1882 . 1883) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 1882 . 1883) (nil fontified nil 1882 . 1883) (1882 . 1883) (#("–" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7)))) . 1882) (undo-tree-id3975 . -1)) nil (25758 16497 18830 639000) 0 nil])
([nil nil ((1911 . 1912)) nil (25758 16512 219200 399000) 0 nil] [nil nil ((1910 . 1911) (#("X" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1910) (undo-tree-id3974 . -1)) ((1910 . 1911) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1910)) (25758 16497 18412 503000) 0 nil])
([nil nil ((1923 . 1924)) nil (25758 16512 219198 925000) 0 nil])
nil
([nil nil ((1955 . 1956)) nil (25758 16512 219197 355000) 0 nil])
([nil nil ((1967 . 1968)) nil (25758 16512 219191 659000) 0 nil])
([nil nil ((#("Notice that " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1833) (undo-tree-id3976 . -11) (undo-tree-id3977 . -11) (undo-tree-id3978 . -11) (undo-tree-id3979 . -12) (undo-tree-id3980 . -11) (undo-tree-id3981 . -5) (undo-tree-id3982 . -5) (undo-tree-id3983 . -5) (undo-tree-id3984 . -5) (undo-tree-id3985 . -5) (undo-tree-id3986 . -5) (undo-tree-id3987 . -5) (undo-tree-id3988 . -5) (undo-tree-id3989 . -5) (undo-tree-id3990 . -5) (undo-tree-id3991 . -5) (undo-tree-id3992 . -5) (undo-tree-id3993 . -5) (undo-tree-id3994 . -5) (undo-tree-id3995 . -5) (undo-tree-id3996 . -5) (undo-tree-id3997 . -10) (undo-tree-id3998 . -10) (undo-tree-id3999 . -10) (undo-tree-id4000 . -10) (undo-tree-id4001 . -10) (undo-tree-id4002 . -10) (undo-tree-id4003 . -10) (undo-tree-id4004 . -10) (undo-tree-id4005 . -10) (undo-tree-id4006 . -10) (undo-tree-id4007 . -10) (undo-tree-id4008 . -10) (undo-tree-id4009 . -10) (undo-tree-id4010 . -10) (undo-tree-id4011 . -10) (undo-tree-id4012 . -10) (undo-tree-id4013 . -11) (undo-tree-id4014 . -11) (undo-tree-id4015 . -11) (undo-tree-id4016 . -11) (undo-tree-id4017 . -11) (undo-tree-id4018 . -11) (undo-tree-id4019 . -11) (undo-tree-id4020 . -11) (undo-tree-id4021 . -11) (undo-tree-id4022 . -11) (undo-tree-id4023 . -11) (undo-tree-id4024 . -11) (undo-tree-id4025 . -11) (undo-tree-id4026 . -11) (undo-tree-id4027 . -11) (undo-tree-id4028 . -11) (undo-tree-id4029 . -11) (undo-tree-id4030 . -12) 1844 (t 25758 16512 229259 7000)) nil (25758 16536 216715 163000) 0 nil])
([nil nil ((#("which is a function of X_(t–2) and Y_(t–3)" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 25 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 37 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7)))) . 1919) (undo-tree-id4430 . -41) (undo-tree-id4431 . 5) (undo-tree-id4432 . -42) (t 25758 16526 837615 784000)) nil (25758 16590 520447 430000) 0 nil] [nil nil ((#("which is a function of X_(t–2) and Y_(t–3), and so on" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 25 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 37 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 42 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1919) (undo-tree-id4031 . -52) (undo-tree-id4032 . 16) (undo-tree-id4033 . -53) (t 25758 16526 837615 784000)) ((1919 . 1972)) (25758 16536 216340 530000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1917) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1)) nil (25758 16590 520443 353000) 0 nil])
nil
([nil nil ((1933 . 1935) (1931 . 1933)) nil (25758 16590 520440 206000) 0 nil])
([nil nil ((1945 . 1946) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1945) (undo-tree-id4426 . -1) 1934) nil (25758 16590 520438 700000) 0 nil])
([nil nil ((1947 . 1948)) nil (25758 16590 520435 921000) 0 nil])
([nil nil ((2031 . 2033) (#("=" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2031) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (#("=" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2032) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) 2033 (2031 . 2033) (2029 . 2031) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2029) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2030) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2031) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2032) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2033) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2034) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) 2035 (2030 . 2035) (2029 . 2030)) nil (25758 16590 520419 989000) 0 nil])
([nil nil ((2032 . 2033) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 2032) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2033) (undo-tree-id4049 . 1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) 2031) nil (25758 16590 519979 795000) 0 nil])
([nil nil ((2107 . 2109)) nil (25758 16590 519638 644000) 0 nil])
([nil nil ((1906 . 1908) (t 25758 16590 579170 558000)) nil (25758 16594 222466 337000) 0 nil])
([nil nil ((#("(that is, X(0), X(1), …, X(t))" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2000) (undo-tree-id4443 . -29) (undo-tree-id4444 . -30) 1954 (t 25758 16594 231259 546000)) nil (25758 16611 770524 147000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1999) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1)) nil (25758 16611 770516 463000) 0 nil])
([nil nil ((2116 . 2118) (#("-" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2116) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2117) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) 2118 (2002 . 2118) (#("- 

- At the first time step, t = 0, there are no previous outputs, so they are
  typically assumed to be all zeros." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 80 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 82 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 115 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky t)) . 2002) (undo-tree-id4469 . -116) (undo-tree-id4470 . -116) (undo-tree-id4471 . -116) (undo-tree-id4472 . -116) (undo-tree-id4473 . -5) (undo-tree-id4474 . -6) (undo-tree-id4475 . -6) (undo-tree-id4476 . -6) (undo-tree-id4477 . -6) (undo-tree-id4478 . -6) (undo-tree-id4479 . -6) (undo-tree-id4480 . -6) (undo-tree-id4481 . -6) (undo-tree-id4482 . -6) (undo-tree-id4483 . -6) (undo-tree-id4484 . -6) (undo-tree-id4485 . -6) (undo-tree-id4486 . -6) (undo-tree-id4487 . -6) (undo-tree-id4488 . -6) (undo-tree-id4489 . -6) (undo-tree-id4490 . -6) (undo-tree-id4491 . -6) (undo-tree-id4492 . -6) (undo-tree-id4493 . -6) (undo-tree-id4494 . -6) (undo-tree-id4495 . -6) (undo-tree-id4496 . -6) (undo-tree-id4497 . -6) (undo-tree-id4498 . -6) (undo-tree-id4499 . -116) (undo-tree-id4500 . -116) (undo-tree-id4501 . -116) (undo-tree-id4502 . -116) (undo-tree-id4503 . -116) (undo-tree-id4504 . -116) (undo-tree-id4505 . -116) (undo-tree-id4506 . -116) (undo-tree-id4507 . -116) (undo-tree-id4508 . -116) (undo-tree-id4509 . -116) (undo-tree-id4510 . -116) (undo-tree-id4511 . -116) (undo-tree-id4512 . -116) (undo-tree-id4513 . -116) (undo-tree-id4514 . -116) (undo-tree-id4515 . -116) (undo-tree-id4516 . -116) (undo-tree-id4517 . -116) (undo-tree-id4518 . -116) (undo-tree-id4519 . -116) (undo-tree-id4520 . -116) (undo-tree-id4521 . -116) (undo-tree-id4522 . -116) (undo-tree-id4523 . -116) (undo-tree-id4524 . -116) (undo-tree-id4525 . -116) (undo-tree-id4526 . -116) (undo-tree-id4527 . -116) (undo-tree-id4528 . -116) (undo-tree-id4529 . -116) (undo-tree-id4530 . -116) (undo-tree-id4531 . -116) (undo-tree-id4532 . -116) (undo-tree-id4533 . -116) (undo-tree-id4534 . -116) (undo-tree-id4535 . -116) (undo-tree-id4536 . -116) (undo-tree-id4537 . -116) (undo-tree-id4538 . -116) (undo-tree-id4539 . -116) (undo-tree-id4540 . -116) (undo-tree-id4541 . -116) (undo-tree-id4542 . -116) (undo-tree-id4543 . -116) (undo-tree-id4544 . -116) (undo-tree-id4545 . -116) (undo-tree-id4546 . -116) (undo-tree-id4547 . -116) (undo-tree-id4548 . -116) (undo-tree-id4549 . -116) (undo-tree-id4550 . -116) (undo-tree-id4551 . -116) (undo-tree-id4552 . -116) (undo-tree-id4553 . -116) (undo-tree-id4554 . -116) (undo-tree-id4555 . -116) (undo-tree-id4556 . -116) (undo-tree-id4557 . -116) (undo-tree-id4558 . -116) (undo-tree-id4559 . -116) (undo-tree-id4560 . -116) (undo-tree-id4561 . -116) (undo-tree-id4562 . -116) (undo-tree-id4563 . -116) (undo-tree-id4564 . -116) (undo-tree-id4565 . -116) (undo-tree-id4566 . -116) (undo-tree-id4567 . -116) (undo-tree-id4568 . -116) (undo-tree-id4569 . -116) (undo-tree-id4570 . -116) (undo-tree-id4571 . -116) (undo-tree-id4572 . -116) (undo-tree-id4573 . -116) (undo-tree-id4574 . -116) (undo-tree-id4575 . -116) (undo-tree-id4576 . -116) (undo-tree-id4577 . -116) (undo-tree-id4578 . -116) (undo-tree-id4579 . -116) (undo-tree-id4580 . -116) (undo-tree-id4581 . -116) (undo-tree-id4582 . -116) (undo-tree-id4583 . -116) (undo-tree-id4584 . -116) (undo-tree-id4585 . -116) (undo-tree-id4586 . -116) (undo-tree-id4587 . -116) (undo-tree-id4588 . -116) (undo-tree-id4589 . -116) (undo-tree-id4590 . -116) (undo-tree-id4591 . -116) (undo-tree-id4592 . -116) (undo-tree-id4593 . -116) (undo-tree-id4594 . -116) (undo-tree-id4595 . -116) (undo-tree-id4596 . -116) (undo-tree-id4597 . -116) (undo-tree-id4598 . -116) (undo-tree-id4599 . -116) (undo-tree-id4600 . -116) (undo-tree-id4601 . -116) (undo-tree-id4602 . -116) (undo-tree-id4603 . -116) (undo-tree-id4604 . -116) (undo-tree-id4605 . -116) (undo-tree-id4606 . -116) (undo-tree-id4607 . -116) (undo-tree-id4608 . -116) (undo-tree-id4609 . -116) (undo-tree-id4610 . -116) (undo-tree-id4611 . -116) (undo-tree-id4612 . -116) (undo-tree-id4613 . -116) (undo-tree-id4614 . -116) (undo-tree-id4615 . -116) (undo-tree-id4616 . -116) (undo-tree-id4617 . -116) (undo-tree-id4618 . -116) (undo-tree-id4619 . -116) (undo-tree-id4620 . -116) (undo-tree-id4621 . -80) (undo-tree-id4622 . -80) (undo-tree-id4623 . -80) (undo-tree-id4624 . -80) (undo-tree-id4625 . -80) (undo-tree-id4626 . -80) (undo-tree-id4627 . -80) (undo-tree-id4628 . -80) (undo-tree-id4629 . -80) (undo-tree-id4630 . -80) (undo-tree-id4631 . -80) (undo-tree-id4632 . -80) (undo-tree-id4633 . -116) (undo-tree-id4634 . -116) (undo-tree-id4635 . -116) (undo-tree-id4636 . -116) (undo-tree-id4637 . -116) (undo-tree-id4638 . -116) (undo-tree-id4639 . -116) (undo-tree-id4640 . -116) (undo-tree-id4641 . -116) (undo-tree-id4642 . -116) (undo-tree-id4643 . -116) (undo-tree-id4644 . -116) (undo-tree-id4645 . -116) (undo-tree-id4646 . -116) (undo-tree-id4647 . -116) (undo-tree-id4648 . -116) (undo-tree-id4649 . -116) (undo-tree-id4650 . -116) (undo-tree-id4651 . -116) (undo-tree-id4652 . -116) (undo-tree-id4653 . -116) (undo-tree-id4654 . -116) (undo-tree-id4655 . -116) (undo-tree-id4656 . -116) (undo-tree-id4657 . -116) (undo-tree-id4658 . -116) (undo-tree-id4659 . -116) (undo-tree-id4660 . -116) (undo-tree-id4661 . -116) (undo-tree-id4662 . -116) (undo-tree-id4663 . -116) (undo-tree-id4664 . -116) (undo-tree-id4665 . -116) (undo-tree-id4666 . -116) (undo-tree-id4667 . -116) (undo-tree-id4668 . -116) (undo-tree-id4669 . -116) (undo-tree-id4670 . -116) (undo-tree-id4671 . -116) (undo-tree-id4672 . -116) (undo-tree-id4673 . -116) (undo-tree-id4674 . -116) (undo-tree-id4675 . -116) (undo-tree-id4676 . -116) (undo-tree-id4677 . -116) (undo-tree-id4678 . -116) (undo-tree-id4679 . -116) (undo-tree-id4680 . -116) (undo-tree-id4681 . -116) (undo-tree-id4682 . -116) (undo-tree-id4683 . -116) (undo-tree-id4684 . -116) (undo-tree-id4685 . -116) (undo-tree-id4686 . -116) (undo-tree-id4687 . -116) (undo-tree-id4688 . -116) (undo-tree-id4689 . -116) (undo-tree-id4690 . -116) (undo-tree-id4691 . -4) (2002 . 2006) (#("

  " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2114) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -4) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -4) (undo-tree-id4868 . -4) (undo-tree-id4869 . -4) (undo-tree-id4870 . -4) (undo-tree-id4871 . -4) (undo-tree-id4872 . -4) (undo-tree-id4873 . -4) (undo-tree-id4874 . -4) (undo-tree-id4875 . -4) 2118 (2115 . 2118) (t 25758 16611 783687 94000) 2115) nil (25758 16714 138898 278000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3243 . 3244) (nil fontified nil 3171 . 3244) (nil fontified nil 3095 . 3171) (nil fontified nil 3015 . 3095) (nil fontified nil 2930 . 3015) (nil fontified nil 2851 . 2930) (nil fontified nil 2776 . 2851) (nil fontified nil 2724 . 2776) (nil fontified nil 2652 . 2724) (nil fontified nil 2580 . 2652) (nil fontified nil 2504 . 2580) (nil fontified nil 2429 . 2504) (nil fontified nil 2356 . 2429) (nil fontified nil 2284 . 2356) (nil fontified nil 2210 . 2284) (nil fontified nil 2131 . 2210) (nil fontified nil 2118 . 2131) (2118 . 3244) 2117) nil (25758 16714 138130 35000) 0 nil])
([nil nil ((2209 . 2210) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2209) (undo-tree-id4445 . -1) 2206) nil (25758 16714 138124 711000) 0 nil])
([nil nil ((3244 . 3245)) nil (25758 16714 138003 816000) 0 nil])
([nil nil ((2131 . 2132) (#("Since t" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2131) (undo-tree-id4968 . -6) (undo-tree-id4969 . -6) (undo-tree-id4970 . -6) (undo-tree-id4971 . -4) (undo-tree-id4972 . -4) (undo-tree-id4973 . -4) (undo-tree-id4974 . -4) (undo-tree-id4975 . -4) (undo-tree-id4976 . -4) (undo-tree-id4977 . -4) (undo-tree-id4978 . -4) (undo-tree-id4979 . -4) (undo-tree-id4980 . -4) (undo-tree-id4981 . -4) (undo-tree-id4982 . -4) (undo-tree-id4983 . -4) (undo-tree-id4984 . -4) (undo-tree-id4985 . -4) (undo-tree-id4986 . -4) (undo-tree-id4987 . -4) (undo-tree-id4988 . -4) (undo-tree-id4989 . -4) (undo-tree-id4990 . -4) (undo-tree-id4991 . -4) (undo-tree-id4992 . -6) (undo-tree-id4993 . -6) (undo-tree-id4994 . -6) (undo-tree-id4995 . -6) (undo-tree-id4996 . -6) (undo-tree-id4997 . -6) (undo-tree-id4998 . -6) (undo-tree-id4999 . -6) (undo-tree-id5000 . -6) (undo-tree-id5001 . -6) (undo-tree-id5002 . -6) (undo-tree-id5003 . -7) (undo-tree-id5004 . -6) (undo-tree-id5005 . -4) (undo-tree-id5006 . -4) (undo-tree-id5007 . -4) (undo-tree-id5008 . -4) (undo-tree-id5009 . -4) (undo-tree-id5010 . -4) (undo-tree-id5011 . -4) (undo-tree-id5012 . -4) (undo-tree-id5013 . -4) (undo-tree-id5014 . -4) (undo-tree-id5015 . -4) (undo-tree-id5016 . -4) (undo-tree-id5017 . -4) (undo-tree-id5018 . -4) (undo-tree-id5019 . -4) (undo-tree-id5020 . -4) (undo-tree-id5021 . -6) (undo-tree-id5022 . -6) (undo-tree-id5023 . -6) (undo-tree-id5024 . -6) (undo-tree-id5025 . -6) (undo-tree-id5026 . -6) (undo-tree-id5027 . -6) (undo-tree-id5028 . -6) (undo-tree-id5029 . -6) (undo-tree-id5030 . -6) (undo-tree-id5031 . -6) (undo-tree-id5032 . -6) (undo-tree-id5033 . -6) (undo-tree-id5034 . -6) (undo-tree-id5035 . -6) (undo-tree-id5036 . -6) (undo-tree-id5037 . -6) (undo-tree-id5038 . -7) (undo-tree-id5039 . -7) (undo-tree-id5040 . -7) 2137 (t 25758 16714 198177 732000)) nil (25758 16733 24279 490000) 0 nil])
([nil nil ((#("you could say " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2237) (undo-tree-id4876 . -13) (undo-tree-id4877 . -13) (undo-tree-id4878 . -13) (undo-tree-id4879 . -14) (undo-tree-id4880 . -13) (undo-tree-id4881 . -2) (undo-tree-id4882 . -2) (undo-tree-id4883 . -2) (undo-tree-id4884 . -2) (undo-tree-id4885 . -2) (undo-tree-id4886 . -2) (undo-tree-id4887 . -2) (undo-tree-id4888 . -2) (undo-tree-id4889 . -2) (undo-tree-id4890 . -2) (undo-tree-id4891 . -2) (undo-tree-id4892 . -2) (undo-tree-id4893 . -2) (undo-tree-id4894 . -2) (undo-tree-id4895 . -2) (undo-tree-id4896 . -2) (undo-tree-id4897 . -8) (undo-tree-id4898 . -8) (undo-tree-id4899 . -8) (undo-tree-id4900 . -8) (undo-tree-id4901 . -8) (undo-tree-id4902 . -8) (undo-tree-id4903 . -8) (undo-tree-id4904 . -8) (undo-tree-id4905 . -8) (undo-tree-id4906 . -8) (undo-tree-id4907 . -8) (undo-tree-id4908 . -8) (undo-tree-id4909 . -8) (undo-tree-id4910 . -8) (undo-tree-id4911 . -8) (undo-tree-id4912 . -8) (undo-tree-id4913 . -12) (undo-tree-id4914 . -12) (undo-tree-id4915 . -12) (undo-tree-id4916 . -12) (undo-tree-id4917 . -12) (undo-tree-id4918 . -12) (undo-tree-id4919 . -12) (undo-tree-id4920 . -12) (undo-tree-id4921 . -12) (undo-tree-id4922 . -12) (undo-tree-id4923 . -12) (undo-tree-id4924 . -12) (undo-tree-id4925 . -12) (undo-tree-id4926 . -12) (undo-tree-id4927 . -12) (undo-tree-id4928 . -12) (undo-tree-id4929 . -12) (undo-tree-id4930 . -12) (undo-tree-id4931 . -12) (undo-tree-id4932 . -12) (undo-tree-id4933 . -12) (undo-tree-id4934 . -14) (undo-tree-id4935 . -14) (undo-tree-id4936 . -14) (undo-tree-id4937 . -14) (undo-tree-id4938 . -14) (undo-tree-id4939 . -14) (undo-tree-id4940 . -14) (undo-tree-id4941 . -14) (undo-tree-id4942 . -14) (undo-tree-id4943 . -14) (undo-tree-id4944 . -14) (undo-tree-id4945 . -14) (undo-tree-id4946 . -14) (undo-tree-id4947 . -14) (undo-tree-id4948 . -14) (undo-tree-id4949 . -14) (undo-tree-id4950 . -13) (undo-tree-id4951 . -13) (undo-tree-id4952 . -13) (undo-tree-id4953 . -13) (undo-tree-id4954 . -13) (undo-tree-id4955 . -13) (undo-tree-id4956 . -13) (undo-tree-id4957 . -13) (undo-tree-id4958 . -13) (undo-tree-id4959 . -13) (undo-tree-id4960 . -13) (undo-tree-id4961 . -13) (undo-tree-id4962 . -13) (undo-tree-id4963 . -13) (undo-tree-id4964 . -13) (undo-tree-id4965 . -13) (undo-tree-id4966 . -13) (undo-tree-id4967 . -14) 2250) nil (25758 16733 24053 798000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2211) (nil fontified nil 2210 . 2211) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2210 . 2211) (2210 . 2211) 2204 (t 25758 16733 38635 220000)) nil (25758 16738 659244 396000) 0 nil])
([nil nil ((2210 . 2211) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2210) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) 2204 (t 25758 16738 662771 750000)) nil (25758 16740 266531 290000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2211) (nil fontified nil 2210 . 2211) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2210 . 2211) (2210 . 2211) (t 25758 16740 278810 978000)) nil (25758 16745 123127 573000) 0 nil])
([nil nil ((#("(or simply a cell)" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2357) (undo-tree-id5069 . -17) (undo-tree-id5070 . -18) 2336 (t 25758 16745 130928 749000)) nil (25758 16789 738111 968000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2356) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1)) nil (25758 16789 738103 610000) 0 nil])
([nil nil ((2358 . 2360) (t 25758 16789 752011 235000)) nil (25758 16796 440750 691000) 0 nil])
([nil nil ((2466 . 2467) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2466) (undo-tree-id5080 . -1) (2391 . 2392) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2391) (undo-tree-id5081 . -1) 2360 (t 25758 16796 448173 593000)) nil (25758 16804 243217 482000) 0 nil])
([nil nil ((3133 . 3134) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3133) (undo-tree-id5071 . -1) (3057 . 3058) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3057) (undo-tree-id5072 . -1) (2977 . 2978) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2977) (undo-tree-id5073 . -1) (2892 . 2893) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2892) (undo-tree-id5074 . -1) (2813 . 2814) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2813) (undo-tree-id5075 . -1) (2738 . 2739) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2738) (undo-tree-id5076 . -1) (2686 . 2687) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2686) (undo-tree-id5077 . -1) (2614 . 2615) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2614) (undo-tree-id5078 . -1) (2542 . 2543) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2542) (undo-tree-id5079 . -1) 2466) nil (25758 16804 243212 645000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3130) (nil fontified nil 3129 . 3130) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3129 . 3130) (3129 . 3130) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3050) (nil fontified nil 3049 . 3050) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3049 . 3050) (3049 . 3050) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2972) (nil fontified nil 2971 . 2972) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2971 . 2972) (2971 . 2972) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2893) (nil fontified nil 2892 . 2893) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2892 . 2893) (2892 . 2893) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2814) (nil fontified nil 2813 . 2814) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2813 . 2814) (2813 . 2814) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2742) (nil fontified nil 2741 . 2742) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2741 . 2742) (2741 . 2742) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2666) (nil fontified nil 2665 . 2666) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2665 . 2666) (2665 . 2666) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2593) (nil fontified nil 2592 . 2593) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2592 . 2593) (2592 . 2593) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2514) (nil fontified nil 2513 . 2514) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2513 . 2514) (2513 . 2514) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2436) (nil fontified nil 2435 . 2436) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2435 . 2436) (2435 . 2436) 3133) nil (25758 16804 243188 385000) 0 nil])
([nil nil ((#("Later in this chapter" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2554) (undo-tree-id5167 . -20) (undo-tree-id5168 . -21) (t 25758 16804 256362 884000)) nil (25758 16899 280345 682000) 0 nil])
([nil nil ((#(", we will look at" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2554) (undo-tree-id5164 . -16) (undo-tree-id5165 . -17) (undo-tree-id5166 . -17)) nil (25758 16899 280343 295000) 0 nil])
([nil nil ((#("some more complex and powerful types of cells capable of learning longer
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 22 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 72 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2555) (undo-tree-id5162 . -72) (undo-tree-id5163 . -73)) nil (25758 16899 280340 206000) 0 nil])
([nil nil ((#("patterns " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2555) (undo-tree-id5160 . -8) (undo-tree-id5161 . -9)) nil (25758 16899 280337 840000) 0 nil])
([nil nil ((#("(roughly 10 times longer, but again, this depends on the task)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 12 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2555) (undo-tree-id5154 . -61) (undo-tree-id5155 . 62) (undo-tree-id5156 . -1) (undo-tree-id5157 . 1) (undo-tree-id5158 . -62) (undo-tree-id5159 . -62)) nil (25758 16899 280335 564000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2555) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1)) nil (25758 16899 280329 706000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 2555) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1)) nil (25758 16899 280327 182000) 0 nil])
([nil nil ((#("In
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2555) (undo-tree-id5148 . -2) (undo-tree-id5149 . -3)) nil (25758 16899 280324 388000) 0 nil])
([nil nil ((2555 . 2558)) nil (25758 16899 280322 256000) 0 nil])
([nil nil ((2572 . 2573) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2572) (undo-tree-id5147 . -1)) nil (25758 16899 280321 190000) 0 nil])
([nil nil ((2606 . 2607)) nil (25758 16899 280319 334000) 0 nil])
([nil nil ((#("(the “h” stands for
“hidden”)" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 20 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2611) (undo-tree-id5126 . -28) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -29) 2612) nil (25758 16899 280317 352000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2610) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1)) nil (25758 16899 280300 308000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2634) (nil fontified nil 2633 . 2634) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2633 . 2634) (2633 . 2634) 2612) nil (25758 16899 280255 256000) 0 nil])
([nil nil ((2701 . 2702) (t 25758 16899 294664 634000)) nil (25758 16921 162346 507000) 0 nil])
([nil nil ((2711 . 2712)) nil (25758 16921 162344 701000) 0 nil])
([nil nil ((2720 . 2721)) nil (25758 16921 162338 712000) 0 nil])
([nil nil ((2727 . 2729) (t 25758 16921 219195 102000)) nil (25758 16930 657443 177000) 0 nil])
([nil nil ((#("(typically about 10 steps long,
but this varies depending on the task)" 0 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 31 32 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 61 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2482) (undo-tree-id5473 . -69) (undo-tree-id5474 . -32) (undo-tree-id5475 . -32) (undo-tree-id5476 . -32) (undo-tree-id5477 . -32) (undo-tree-id5478 . -32) (undo-tree-id5479 . -32) (undo-tree-id5480 . -32) (undo-tree-id5481 . -32) (undo-tree-id5482 . -70) 2436 (t 25758 16930 671423 744000)) nil (25758 17019 807072 528000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2481) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1)) nil (25758 17019 807064 52000) 0 nil])
([nil nil ((#("In general " 0 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2484) (undo-tree-id5421 . -10) (undo-tree-id5422 . -10) (undo-tree-id5423 . -10) (undo-tree-id5424 . -3) (undo-tree-id5425 . -11) (undo-tree-id5426 . -10) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -9) (undo-tree-id5436 . -9) (undo-tree-id5437 . -9) (undo-tree-id5438 . -9) (undo-tree-id5439 . -9) (undo-tree-id5440 . -9) (undo-tree-id5441 . -9) (undo-tree-id5442 . -9) (undo-tree-id5443 . -10) (undo-tree-id5444 . -10) (undo-tree-id5445 . -10) (undo-tree-id5446 . -10) (undo-tree-id5447 . -10) (undo-tree-id5448 . -10) (undo-tree-id5449 . -10) (undo-tree-id5450 . -10) (undo-tree-id5451 . -10) (undo-tree-id5452 . -11) 2494) nil (25758 17019 807047 739000) 0 nil])
([nil nil ((2484 . 2485) (#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2484)) nil (25758 17019 807022 348000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2917) (undo-tree-id5417 . -1) (2839 . 2840) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2839) (undo-tree-id5418 . -1) (2759 . 2760) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2759) (undo-tree-id5419 . -1) (2681 . 2682) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2681) (undo-tree-id5420 . -1) 2647) nil (25758 17019 807020 266000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2882) (nil fontified nil 2881 . 2882) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2881 . 2882) (2881 . 2882) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2802) (nil fontified nil 2801 . 2802) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2801 . 2802) (2801 . 2802) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2723) (nil fontified nil 2722 . 2723) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2722 . 2723) (2722 . 2723) 2916) nil (25758 17019 807013 189000) 0 nil])
([nil nil ((2683 . 2684)) nil (25758 17019 807009 292000) 0 nil])
([nil nil ((2754 . 2755)) nil (25758 17019 807008 257000) 0 nil])
([nil nil ((#("In the case of the basic cells we have discussed
" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 15 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 48 49 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2755) (undo-tree-id5390 . -48) (undo-tree-id5391 . 49) (undo-tree-id5392 . -6) (undo-tree-id5393 . -6) (undo-tree-id5394 . -6) (undo-tree-id5395 . -6) (undo-tree-id5396 . -6) (undo-tree-id5397 . -6) (undo-tree-id5398 . -6) (undo-tree-id5399 . -6) (undo-tree-id5400 . -6) (undo-tree-id5401 . -6) (undo-tree-id5402 . -6) (undo-tree-id5403 . -6) (undo-tree-id5404 . -6) (undo-tree-id5405 . -6) (undo-tree-id5406 . -6) (undo-tree-id5407 . -6) (undo-tree-id5408 . -49) (undo-tree-id5409 . -49) (undo-tree-id5410 . -49) (undo-tree-id5411 . -49) (undo-tree-id5412 . -49) (undo-tree-id5413 . -49) (undo-tree-id5414 . -49) (undo-tree-id5415 . -49) (undo-tree-id5416 . -49)) nil (25758 17019 807006 161000) 0 nil])
([nil nil ((#("so far, the output is simply equal to the state, but in more complex cells this
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 38 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 39 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 42 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 79 80 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2755) (undo-tree-id5354 . -79) (undo-tree-id5355 . 80) (undo-tree-id5356 . -37) (undo-tree-id5357 . -37) (undo-tree-id5358 . -37) (undo-tree-id5359 . -37) (undo-tree-id5360 . -37) (undo-tree-id5361 . -37) (undo-tree-id5362 . -37) (undo-tree-id5363 . -37) (undo-tree-id5364 . -37) (undo-tree-id5365 . -37) (undo-tree-id5366 . -37) (undo-tree-id5367 . -37) (undo-tree-id5368 . -37) (undo-tree-id5369 . -37) (undo-tree-id5370 . -37) (undo-tree-id5371 . -37) (undo-tree-id5372 . -80) (undo-tree-id5373 . -80) (undo-tree-id5374 . -80) (undo-tree-id5375 . -80) (undo-tree-id5376 . -80) (undo-tree-id5377 . -80) (undo-tree-id5378 . -80) (undo-tree-id5379 . -80) (undo-tree-id5380 . -80) (undo-tree-id5381 . -80) (undo-tree-id5382 . -80) (undo-tree-id5383 . -80) (undo-tree-id5384 . -80) (undo-tree-id5385 . -80) (undo-tree-id5386 . -80) (undo-tree-id5387 . -80) (undo-tree-id5388 . -80) (undo-tree-id5389 . -80)) nil (25758 17019 806984 324000) 0 nil])
([nil nil ((#("
is not always the case, as shown in" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t)) . 2754) (undo-tree-id5169 . -1) (undo-tree-id5170 . -35) (undo-tree-id5171 . 35) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -35) (undo-tree-id5206 . -35) (undo-tree-id5207 . -35) (undo-tree-id5208 . -35) (undo-tree-id5209 . -35) (undo-tree-id5210 . -35) (undo-tree-id5211 . -35) (undo-tree-id5212 . -35) (undo-tree-id5213 . -35) (undo-tree-id5214 . -35) (undo-tree-id5215 . -35) (undo-tree-id5216 . -35) (undo-tree-id5217 . -35) (undo-tree-id5218 . -35) (undo-tree-id5219 . -35) (undo-tree-id5220 . -35) (undo-tree-id5221 . -35) (undo-tree-id5222 . -35) (undo-tree-id5223 . -35) (undo-tree-id5224 . -35) (undo-tree-id5225 . -35) (undo-tree-id5226 . -35) (undo-tree-id5227 . -35) (undo-tree-id5228 . -35) (undo-tree-id5229 . -35) (undo-tree-id5230 . -35) (undo-tree-id5231 . -35) (undo-tree-id5232 . -35) (undo-tree-id5233 . -35) (undo-tree-id5234 . -35) (undo-tree-id5235 . -35) (undo-tree-id5236 . -35) (undo-tree-id5237 . -35) (undo-tree-id5238 . -35) (undo-tree-id5239 . -35) (undo-tree-id5240 . -35) (undo-tree-id5241 . -35) (undo-tree-id5242 . -35) (undo-tree-id5243 . -35) (undo-tree-id5244 . -35) (undo-tree-id5245 . -35) (undo-tree-id5246 . -35) (undo-tree-id5247 . -35) (undo-tree-id5248 . -35) (undo-tree-id5249 . -35) (undo-tree-id5250 . -35) (undo-tree-id5251 . -35) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -36) 2755) nil (25758 17019 806946 542000) 0 nil])
([nil nil ((2754 . 2755)) nil (25758 17019 806582 733000) 0 nil])
([nil nil ((2596 . 2597) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2596) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (2550 . 2551) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2550) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (2482 . 2483) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 2482) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2483) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) 2436 (t 25758 17019 817578 545000)) nil (25758 17027 290124 548000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2593) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2592 . 2593) (2592 . 2593) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2514) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2513 . 2514) (2513 . 2514) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2643) (undo-tree-id5483 . -1) 2596) nil (25758 17027 289968 292000) 0 nil])
([nil nil ((2754 . 2756) (2753 . 2754) (2752 . 2753) (t 25758 17027 301759 327000) 2722) nil (25758 17032 759086 76000) 0 nil])
([nil nil ((2755 . 2756) (t 25758 17032 769891 401000)) nil (25758 17040 300958 406000) 0 nil])
([nil nil ((2757 . 2758) 2756) nil (25758 17110 730221 969000) 0 nil])
([nil nil ((2757 . 2758) 2755 (t 25758 17040 314073 599000)) nil (25758 17120 954523 956000) 0 nil] [nil nil ((nil rear-nonsticky nil 3876 . 3877) (nil fontified nil 3836 . 3877) (nil fontified nil 3765 . 3836) (nil fontified nil 3693 . 3765) (nil fontified nil 3618 . 3693) (nil fontified nil 3548 . 3618) (nil fontified nil 3526 . 3548) (nil fontified nil 3456 . 3526) (nil fontified nil 3388 . 3456) (nil fontified nil 3313 . 3388) (nil fontified nil 3236 . 3313) (nil fontified nil 3162 . 3236) (nil fontified nil 3151 . 3162) (nil fontified nil 3075 . 3151) (nil fontified nil 2997 . 3075) (nil fontified nil 2923 . 2997) (nil fontified nil 2847 . 2923) (nil fontified nil 2781 . 2847) (nil fontified nil 2755 . 2781) (2755 . 3877) 2754 (t 25758 17040 314073 599000)) ((#("nput and Output Sequences
An RNN can simultaneously take a sequence of inputs and produce a
sequence of outputs (see the top-left network in Figure 15-4). This type of
sequence-to-sequence network is useful for predicting time series such as
stock prices: you feed it the prices over the last N days, and it must output
the prices shifted by one day into the future (i.e., from N – 1 days ago to
tomorrow).
Alternatively, you could feed the network a sequence of inputs and ignore
all outputs except for the last one (see the top-right network in Figure 15-
4). In other words, this is a sequence-to-vector network. For example, you
could feed the network a sequence of words corresponding to a movie
review, and the network would output a sentiment score (e.g., from –1
[hate] to +1 [love]).
Conversely, you could feed the network the same input vector over and
over again at each time step and let it output a sequence (see the bottom-
left network of Figure 15-4). This is a vector-to-sequence network. For
example, the input could be an image (or the output of a CNN), and the
output could be a caption for that image." 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 26 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 92 168 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 168 242 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 242 320 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 320 396 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 396 407 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 407 481 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 481 499 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 499 558 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 558 633 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 633 701 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 701 771 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 771 793 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 793 863 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 863 938 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 938 1010 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1010 1058 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1058 1081 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1081 1121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1121 1122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 2755) (undo-tree-id5606 . -1121) (undo-tree-id5607 . -1121) (undo-tree-id5608 . -1081) (undo-tree-id5609 . -1122) (undo-tree-id5610 . -1121) (undo-tree-id5611 . -1121) (nil fontified t 2755 . 2781) (nil fontified t 2781 . 2847) (nil fontified t 2847 . 2923) (nil fontified t 2923 . 2997) (nil fontified t 2997 . 3075) (nil fontified t 3075 . 3151) (nil fontified t 3151 . 3162) (nil fontified t 3162 . 3236) (nil fontified t 3254 . 3313) (nil fontified t 3236 . 3254) (nil fontified t 3313 . 3388) (nil fontified t 3388 . 3456) (nil fontified t 3456 . 3526) (nil fontified t 3526 . 3548) (nil fontified t 3548 . 3618) (nil fontified t 3618 . 3693) (nil fontified t 3693 . 3765) (nil fontified t 3813 . 3836) (nil fontified t 3765 . 3813) (nil rear-nonsticky t 3876 . 3877)) (25758 17110 728785 672000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3879 . 3880) (nil fontified nil 3839 . 3880) (nil fontified nil 3768 . 3839) (nil fontified nil 3696 . 3768) (nil fontified nil 3621 . 3696) (nil fontified nil 3551 . 3621) (nil fontified nil 3529 . 3551) (nil fontified nil 3459 . 3529) (nil fontified nil 3391 . 3459) (nil fontified nil 3316 . 3391) (nil fontified nil 3239 . 3316) (nil fontified nil 3165 . 3239) (nil fontified nil 3154 . 3165) (nil fontified nil 3078 . 3154) (nil fontified nil 3000 . 3078) (nil fontified nil 2926 . 3000) (nil fontified nil 2850 . 2926) (nil fontified nil 2784 . 2850) (nil fontified nil 2758 . 2784) (2758 . 3880)) nil (25758 17120 954522 254000) 0 nil])
nil
([nil nil ((nil keymap (keymap) 2755 . 2756) (nil face org-level-1 2755 . 2756) (nil line-prefix #("  " 0 2 (face org-indent)) 2755 . 2756) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2755 . 2756) (nil fontified nil 2755 . 2756) (2755 . 2756) (#("  " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 1 2 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 2755) (undo-tree-id5612 . -2) (undo-tree-id5613 . -2) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -2) (undo-tree-id5617 . -2) (undo-tree-id5618 . -2) (undo-tree-id5619 . -2) (undo-tree-id5620 . -2) (undo-tree-id5621 . -2) (undo-tree-id5622 . -2) (undo-tree-id5623 . -2) (undo-tree-id5624 . -2) (undo-tree-id5625 . -2) (undo-tree-id5626 . -2) (undo-tree-id5627 . -2) (undo-tree-id5628 . -2) (undo-tree-id5629 . -2) (undo-tree-id5630 . -2) (undo-tree-id5631 . -2) (undo-tree-id5632 . -2) (undo-tree-id5633 . -2) (undo-tree-id5634 . -2) (undo-tree-id5635 . -2) (undo-tree-id5636 . -2) (undo-tree-id5637 . -2) (undo-tree-id5638 . -2) (undo-tree-id5639 . -2) (undo-tree-id5640 . -2) (undo-tree-id5641 . -2) (undo-tree-id5642 . -2) (undo-tree-id5643 . -2) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -2) (undo-tree-id5654 . -2) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -2757) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) 2756) nil (25758 17120 954515 649000) 0 nil])
([nil nil ((2756 . 2758)) nil (25758 17120 954453 510000) 0 nil])
([nil nil ((3882 . 3883) (t 25758 17120 968020 478000) 3882) nil (25758 17150 33371 791000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4842 . 4843) (nil fontified nil 4821 . 4843) (nil fontified nil 4749 . 4821) (nil fontified nil 4676 . 4749) (nil fontified nil 4600 . 4676) (nil fontified nil 4520 . 4600) (nil fontified nil 4446 . 4520) (nil fontified nil 4379 . 4446) (nil fontified nil 4309 . 4379) (nil fontified nil 4236 . 4309) (nil fontified nil 4169 . 4236) (nil fontified nil 4097 . 4169) (nil fontified nil 4023 . 4097) (nil fontified nil 3955 . 4023) (nil fontified nil 3883 . 3955) (3883 . 4843)) nil (25758 17150 33370 123000) 0 nil])
([nil nil ((#("(see the top-left network in Figure 15-4)" 0 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2870) (undo-tree-id5698 . -40) (undo-tree-id5699 . -41) 2850) nil (25758 17150 33367 293000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2869) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1)) nil (25758 17150 33363 732000) 0 nil])
([nil nil ((4801 . 4802)) nil (25758 17150 33343 178000) 0 nil])
([nil nil ((2949 . 2950) (t 25758 17150 92723 99000)) nil (25758 17183 996495 426000) 0 nil])
([nil nil ((#("such as" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2951) (undo-tree-id5710 . -6) (undo-tree-id5711 . -5) (undo-tree-id5712 . -3) (undo-tree-id5713 . -7) (undo-tree-id5714 . -7)) nil (25758 17183 996494 330000) 0 nil])
([nil nil ((#("stock prices" 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2952) (undo-tree-id5708 . -11) (undo-tree-id5709 . -12)) nil (25758 17183 996490 431000) 0 nil])
([nil nil ((#(": " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-code) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-code)) . 2952) (undo-tree-id5706 . -1) (undo-tree-id5707 . -2)) nil (25758 17183 996488 326000) 0 nil])
([nil nil ((#("you feed it the prices over the last N days, and it must output
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2952) (undo-tree-id5704 . -63) (undo-tree-id5705 . -64)) nil (25758 17183 996486 145000) 0 nil])
([nil nil ((#("the prices shifted by one day into the future (i.e., from N – 1 days ago to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2952) (undo-tree-id5702 . -75) (undo-tree-id5703 . -76)) nil (25758 17183 996482 944000) 0 nil])
([nil nil ((#("tomorrow).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2952) (undo-tree-id5700 . -10) (undo-tree-id5701 . -11)) nil (25758 17183 996476 894000) 0 nil])
([nil nil ((#("(see the top-right network in Figure 15-
4)" 0 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 41 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3062) (undo-tree-id5818 . -42) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -43) 3063 (t 25758 17184 53542 125000)) nil (25758 17219 193410 487000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3061) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1)) nil (25758 17219 193393 885000) 0 nil])
([nil nil ((3025 . 3026) 2952) nil (25758 17219 193216 298000) 0 nil])
([nil nil ((3025 . 3026) 2952) nil (25758 17219 193215 179000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3026) (undo-tree-id5715 . 1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1)) nil (25758 17219 193211 880000) 0 nil])
([nil nil ((2952 . 2953)) nil (25758 17219 193172 636000) 0 nil])
([nil nil ((2785 . 2786) (2784 . 2785) (2783 . 2784) (t 25758 17219 206389 630000) 2757) nil (25758 17256 485 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2805 . 2806) (nil fontified nil 2786 . 2806) (2786 . 2806) 2785) nil (25758 17256 483 836000) 0 nil])
([nil nil ((2806 . 2807) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2806) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) 2807 (2806 . 2807)) nil (25758 17256 481 888000) 0 nil])
([nil nil ((2785 . 2786) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 2785)) nil (25758 17256 473 398000) 0 nil])
([nil nil ((2785 . 2786) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 2785)) nil (25758 17256 472 456000) 0 nil])
([nil nil ((2785 . 2786) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 2785)) nil (25758 17256 471 560000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 2785) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1)) nil (25758 17256 470 69000) 0 nil])
([nil nil ((2785 . 2786) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2785)) nil (25758 17256 452 165000) 0 nil])
([nil nil ((2785 . 2786)) nil (25758 17256 450 924000) 0 nil])
([nil nil ((2798 . 2799) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 2798)) nil (25758 17256 449 313000) 0 nil])
([nil nil ((2798 . 2799) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 2798)) nil (25758 17256 443 11000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2812 . 2813) (nil fontified nil 2806 . 2813) (2806 . 2813) 2805 (t 25758 17256 15276 769000)) nil (25758 17278 321412 155000) 0 nil])
([nil nil ((2806 . 2807)) nil (25758 17278 321407 786000) 0 nil])
([nil nil ((2807 . 2808) (#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 2807)) nil (25758 17278 321401 493000) 0 nil])
([nil nil ((2984 . 2985) (t 25758 17278 331814 490000)) nil (25758 17301 300394 547000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3011 . 3012) (nil fontified nil 2985 . 3012) (2985 . 3012)) nil (25758 17305 999811 43000) 0 nil])
([nil nil ((3004 . 3005) (#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3004)) nil (25758 17319 149824 462000) 0 nil] [nil nil ((2997 . 2998) (#("v" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2997)) ((2997 . 2998) (#("V" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2997)) (25758 17305 999553 342000) 0 nil] [nil nil ((2985 . 2986) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2985)) ((2985 . 2986) (#("S" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2985)) (25758 17301 300387 456000) 0 nil])
([nil nil ((2985 . 2986) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2985)) nil (25758 17319 149823 304000) 0 nil])
nil
nil
([nil nil ((2985 . 2986)) nil (25758 17319 150033 161000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3013 . 3014) (nil fontified nil 3013 . 3014) (3013 . 3014) 3012) nil (25758 17324 372587 527000) 0 nil] [nil nil ((#("*" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2985) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1)) ((2985 . 2986)) (25758 17319 149817 485000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t face (bold) font-lock-multiline t org-emphasis t)) . 3012) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1)) nil (25758 17324 372582 669000) 0 nil])
nil
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3088) (undo-tree-id5947 . -1) (t 25758 17324 428924 910000)) nil (25758 17353 504572 125000) 0 nil])
([nil nil ((2998 . 2999) (#("v" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 2998)) nil (25758 17366 379437 732000) 0 nil] [nil nil ((#("For example, you" 0 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3179) (undo-tree-id5948 . -15) (undo-tree-id5949 . -16) (undo-tree-id5950 . -16)) ((3179 . 3195)) (25758 17352 476542 874000) 0 nil] [nil nil ((#("all outputs except for the last one. In other words, this is a sequence-to-vector network. For example, you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3088) (undo-tree-id5883 . -107) (undo-tree-id5884 . -89) (undo-tree-id5885 . -63) (undo-tree-id5886 . -63) (undo-tree-id5887 . -63) (undo-tree-id5888 . -63) (undo-tree-id5889 . -63) (undo-tree-id5890 . -63) (undo-tree-id5891 . -63) (undo-tree-id5892 . -63) (undo-tree-id5893 . -63) (undo-tree-id5894 . -63) (undo-tree-id5895 . -63) (undo-tree-id5896 . -63) (undo-tree-id5897 . -63) (undo-tree-id5898 . -63) (undo-tree-id5899 . -63) (undo-tree-id5900 . -63) (undo-tree-id5901 . -63) (undo-tree-id5902 . -63) (undo-tree-id5903 . -63) (undo-tree-id5904 . -63) (undo-tree-id5905 . -63) (undo-tree-id5906 . -63) (undo-tree-id5907 . -63) (undo-tree-id5908 . -63) (undo-tree-id5909 . -63) (undo-tree-id5910 . -63) (undo-tree-id5911 . -63) (undo-tree-id5912 . -63) (undo-tree-id5913 . -63) (undo-tree-id5914 . -63) (undo-tree-id5915 . -63) (undo-tree-id5916 . -63) (undo-tree-id5917 . -63) (undo-tree-id5918 . -63) (undo-tree-id5919 . -63) (undo-tree-id5920 . -63) (undo-tree-id5921 . -63) (undo-tree-id5922 . -63) (undo-tree-id5923 . -63) (undo-tree-id5924 . -63) (undo-tree-id5925 . -63) (undo-tree-id5926 . -63) (undo-tree-id5927 . -63) (undo-tree-id5928 . -63) (undo-tree-id5929 . -63) (undo-tree-id5930 . -63) (undo-tree-id5931 . -63) (undo-tree-id5932 . -63) (undo-tree-id5933 . -63) (undo-tree-id5934 . -63) (undo-tree-id5935 . -63) (undo-tree-id5936 . -63) (undo-tree-id5937 . -63) (undo-tree-id5938 . -63) (undo-tree-id5939 . -63) (undo-tree-id5940 . -63) (undo-tree-id5941 . -63) (undo-tree-id5942 . -63) (undo-tree-id5943 . -63) (undo-tree-id5944 . -63) (undo-tree-id5945 . -63) (undo-tree-id5946 . -108) 3151) ((3088 . 3196)) (25758 17339 281637 399000) 0 nil])
([nil nil ((#("(e.g., from –1
[hate] to +1 [love])" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3319) (undo-tree-id5963 . -34) (undo-tree-id5964 . -35) 3264) nil (25758 17366 379435 701000) 0 nil])
([nil nil ((2998 . 2999) (#("v" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 2998)) ((2998 . 2999) (#("V" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 2998)) (25758 17352 476199 698000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3318) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1)) nil (25758 17366 379429 840000) 0 nil])
nil
([nil nil ((3319 . 3320) (t 25758 17366 385935 272000)) nil (25758 17370 653224 990000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3151) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (nil fontified nil 3150 . 3151) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3150 . 3151) (3150 . 3151) 3151 (t 25758 17370 666038 324000)) nil (25758 17457 7173 284000) 0 nil])
([nil nil ((3014 . 3015) (#("Alternatively, y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3014) (undo-tree-id6467 . -15) (undo-tree-id6468 . -15) (undo-tree-id6469 . -15) (undo-tree-id6470 . -16) (undo-tree-id6471 . -15) (undo-tree-id6472 . -12) (undo-tree-id6473 . -12) (undo-tree-id6474 . -12) (undo-tree-id6475 . -12) (undo-tree-id6476 . -12) (undo-tree-id6477 . -12) (undo-tree-id6478 . -12) (undo-tree-id6479 . -12) (undo-tree-id6480 . -13) (undo-tree-id6481 . -13) (undo-tree-id6482 . -13) (undo-tree-id6483 . -13) (undo-tree-id6484 . -13) (undo-tree-id6485 . -13) (undo-tree-id6486 . -13) (undo-tree-id6487 . -13) (undo-tree-id6488 . -16) (undo-tree-id6489 . -16) (undo-tree-id6490 . -16) (undo-tree-id6491 . -16) (undo-tree-id6492 . -16) (undo-tree-id6493 . -16) (undo-tree-id6494 . -16) (undo-tree-id6495 . -16) (undo-tree-id6496 . -15) (undo-tree-id6497 . -15) (undo-tree-id6498 . -15) (undo-tree-id6499 . -15) (undo-tree-id6500 . -15) (undo-tree-id6501 . -15) (undo-tree-id6502 . -15) (undo-tree-id6503 . -15) (undo-tree-id6504 . -15) (undo-tree-id6505 . -16) (undo-tree-id6506 . -16) (undo-tree-id6507 . -16) 3029) nil (25758 17457 7141 672000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3017) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) 3018 (#("could" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3018) (undo-tree-id6457 . -4) (undo-tree-id6458 . -4) (undo-tree-id6459 . -4) (undo-tree-id6460 . -5) (undo-tree-id6461 . -4) (undo-tree-id6462 . -4) (undo-tree-id6463 . -4) (undo-tree-id6464 . -5) (undo-tree-id6465 . -5) (undo-tree-id6466 . -5) 3022) nil (25758 17457 7115 911000) 0 nil])
([nil nil ((3242 . 3243) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3242) (undo-tree-id6339 . -1) (3174 . 3175) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3174) (undo-tree-id6340 . 1) (undo-tree-id6341 . -1) (3129 . 3130) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3129) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (3066 . 3067) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3066) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) 3049) nil (25758 17457 7089 835000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3255) (nil fontified nil 3254 . 3255) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3254 . 3255) (3254 . 3255) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -3175) (nil fontified nil 3174 . 3175) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3174 . 3175) (3174 . 3175) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3094) (nil fontified nil 3093 . 3094) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3093 . 3094) (3093 . 3094) 3242) nil (25758 17457 7032 815000) 0 nil])
([nil nil ((#("In other words, this is a sequence-to-vector network. " 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 26 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 26 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 27 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3104) (undo-tree-id6125 . -53) (undo-tree-id6126 . -53) (undo-tree-id6127 . -52) (undo-tree-id6128 . -53) (undo-tree-id6129 . -25) (undo-tree-id6130 . -25) (undo-tree-id6131 . -25) (undo-tree-id6132 . -25) (undo-tree-id6133 . -25) (undo-tree-id6134 . -25) (undo-tree-id6135 . -25) (undo-tree-id6136 . -25) (undo-tree-id6137 . -25) (undo-tree-id6138 . -25) (undo-tree-id6139 . -25) (undo-tree-id6140 . -25) (undo-tree-id6141 . -25) (undo-tree-id6142 . -25) (undo-tree-id6143 . -25) (undo-tree-id6144 . -25) (undo-tree-id6145 . -25) (undo-tree-id6146 . -25) (undo-tree-id6147 . -25) (undo-tree-id6148 . -25) (undo-tree-id6149 . -25) (undo-tree-id6150 . -25) (undo-tree-id6151 . -25) (undo-tree-id6152 . -25) (undo-tree-id6153 . -25) (undo-tree-id6154 . -25) (undo-tree-id6155 . -25) (undo-tree-id6156 . -25) (undo-tree-id6157 . -25) (undo-tree-id6158 . -25) (undo-tree-id6159 . -25) (undo-tree-id6160 . -25) (undo-tree-id6161 . -25) (undo-tree-id6162 . -25) (undo-tree-id6163 . -25) (undo-tree-id6164 . -25) (undo-tree-id6165 . -25) (undo-tree-id6166 . -25) (undo-tree-id6167 . -25) (undo-tree-id6168 . -25) (undo-tree-id6169 . -25) (undo-tree-id6170 . -25) (undo-tree-id6171 . -25) (undo-tree-id6172 . -25) (undo-tree-id6173 . -25) (undo-tree-id6174 . -25) (undo-tree-id6175 . -25) (undo-tree-id6176 . -25) (undo-tree-id6177 . -25) (undo-tree-id6178 . -25) (undo-tree-id6179 . -25) (undo-tree-id6180 . -25) (undo-tree-id6181 . -25) (undo-tree-id6182 . -25) (undo-tree-id6183 . -25) (undo-tree-id6184 . -25) (undo-tree-id6185 . -25) (undo-tree-id6186 . -25) (undo-tree-id6187 . -25) (undo-tree-id6188 . -25) (undo-tree-id6189 . -25) (undo-tree-id6190 . -25) (undo-tree-id6191 . -25) (undo-tree-id6192 . -25) (undo-tree-id6193 . -25) (undo-tree-id6194 . -25) (undo-tree-id6195 . -25) (undo-tree-id6196 . -25) (undo-tree-id6197 . -25) (undo-tree-id6198 . -25) (undo-tree-id6199 . -25) (undo-tree-id6200 . -25) (undo-tree-id6201 . -25) (undo-tree-id6202 . -25) (undo-tree-id6203 . -25) (undo-tree-id6204 . -25) (undo-tree-id6205 . -25) (undo-tree-id6206 . -25) (undo-tree-id6207 . -54) (undo-tree-id6208 . -53) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -7) (undo-tree-id6218 . -7) (undo-tree-id6219 . -7) (undo-tree-id6220 . -7) (undo-tree-id6221 . -7) (undo-tree-id6222 . -7) (undo-tree-id6223 . -7) (undo-tree-id6224 . -7) (undo-tree-id6225 . -13) (undo-tree-id6226 . -13) (undo-tree-id6227 . -13) (undo-tree-id6228 . -13) (undo-tree-id6229 . -13) (undo-tree-id6230 . -13) (undo-tree-id6231 . -13) (undo-tree-id6232 . -13) (undo-tree-id6233 . -14) (undo-tree-id6234 . -14) (undo-tree-id6235 . -14) (undo-tree-id6236 . -14) (undo-tree-id6237 . -14) (undo-tree-id6238 . -14) (undo-tree-id6239 . -14) (undo-tree-id6240 . -14) (undo-tree-id6241 . -19) (undo-tree-id6242 . -19) (undo-tree-id6243 . -19) (undo-tree-id6244 . -19) (undo-tree-id6245 . -19) (undo-tree-id6246 . -19) (undo-tree-id6247 . -19) (undo-tree-id6248 . -19) (undo-tree-id6249 . -22) (undo-tree-id6250 . -22) (undo-tree-id6251 . -22) (undo-tree-id6252 . -22) (undo-tree-id6253 . -22) (undo-tree-id6254 . -22) (undo-tree-id6255 . -22) (undo-tree-id6256 . -22) (undo-tree-id6257 . -24) (undo-tree-id6258 . -24) (undo-tree-id6259 . -24) (undo-tree-id6260 . -24) (undo-tree-id6261 . -24) (undo-tree-id6262 . -24) (undo-tree-id6263 . -24) (undo-tree-id6264 . -24) (undo-tree-id6265 . -33) (undo-tree-id6266 . -33) (undo-tree-id6267 . -33) (undo-tree-id6268 . -33) (undo-tree-id6269 . -33) (undo-tree-id6270 . -33) (undo-tree-id6271 . -33) (undo-tree-id6272 . -33) (undo-tree-id6273 . -34) (undo-tree-id6274 . -34) (undo-tree-id6275 . -34) (undo-tree-id6276 . -34) (undo-tree-id6277 . -34) (undo-tree-id6278 . -34) (undo-tree-id6279 . -34) (undo-tree-id6280 . -34) (undo-tree-id6281 . -36) (undo-tree-id6282 . -36) (undo-tree-id6283 . -36) (undo-tree-id6284 . -36) (undo-tree-id6285 . -36) (undo-tree-id6286 . -36) (undo-tree-id6287 . -36) (undo-tree-id6288 . -36) (undo-tree-id6289 . -37) (undo-tree-id6290 . -37) (undo-tree-id6291 . -37) (undo-tree-id6292 . -37) (undo-tree-id6293 . -37) (undo-tree-id6294 . -37) (undo-tree-id6295 . -37) (undo-tree-id6296 . -37) (undo-tree-id6297 . -43) (undo-tree-id6298 . -43) (undo-tree-id6299 . -43) (undo-tree-id6300 . -43) (undo-tree-id6301 . -43) (undo-tree-id6302 . -43) (undo-tree-id6303 . -43) (undo-tree-id6304 . -43) (undo-tree-id6305 . -51) (undo-tree-id6306 . -51) (undo-tree-id6307 . -51) (undo-tree-id6308 . -51) (undo-tree-id6309 . -51) (undo-tree-id6310 . -51) (undo-tree-id6311 . -51) (undo-tree-id6312 . -51) (undo-tree-id6313 . -52) (undo-tree-id6314 . -52) (undo-tree-id6315 . -52) (undo-tree-id6316 . -52) (undo-tree-id6317 . -52) (undo-tree-id6318 . -52) (undo-tree-id6319 . -52) (undo-tree-id6320 . -52) (undo-tree-id6321 . -54) (undo-tree-id6322 . -54) (undo-tree-id6323 . -54) (undo-tree-id6324 . -54) (undo-tree-id6325 . -54) (undo-tree-id6326 . -54) (undo-tree-id6327 . -54) (undo-tree-id6328 . -54) (undo-tree-id6329 . -53) (undo-tree-id6330 . -53) (undo-tree-id6331 . -53) (undo-tree-id6332 . -53) (undo-tree-id6333 . -53) (undo-tree-id6334 . -53) (undo-tree-id6335 . -53) (undo-tree-id6336 . -53) (undo-tree-id6337 . -53) (undo-tree-id6338 . -54) 3157) nil (25758 17457 7023 683000) 0 nil])
([nil nil ((#("For example, you" 0 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3104) (undo-tree-id6088 . -15) (undo-tree-id6089 . 16) (undo-tree-id6090 . -16) (undo-tree-id6091 . -16) (undo-tree-id6092 . -16) (undo-tree-id6093 . -16) (undo-tree-id6094 . -16) (undo-tree-id6095 . -16) (undo-tree-id6096 . -16) (undo-tree-id6097 . -16) (undo-tree-id6098 . -16) (undo-tree-id6099 . -16) (undo-tree-id6100 . -16) (undo-tree-id6101 . -16) (undo-tree-id6102 . -16) (undo-tree-id6103 . -16) (undo-tree-id6104 . -16) (undo-tree-id6105 . -16) (undo-tree-id6106 . -16) (undo-tree-id6107 . -2) (undo-tree-id6108 . -2) (undo-tree-id6109 . -2) (undo-tree-id6110 . -2) (undo-tree-id6111 . -2) (undo-tree-id6112 . -2) (undo-tree-id6113 . -2) (undo-tree-id6114 . -2) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -16) (undo-tree-id6124 . -16)) nil (25758 17457 6788 964000) 0 nil])
([nil nil ((#("could feed the network a sequence of words corresponding to a movie review, and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 68 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 79 80 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3105) (undo-tree-id6015 . -79) (undo-tree-id6016 . 80) (undo-tree-id6017 . 80) (undo-tree-id6018 . -67) (undo-tree-id6019 . -67) (undo-tree-id6020 . -67) (undo-tree-id6021 . -67) (undo-tree-id6022 . -67) (undo-tree-id6023 . -67) (undo-tree-id6024 . -67) (undo-tree-id6025 . -67) (undo-tree-id6026 . -67) (undo-tree-id6027 . -67) (undo-tree-id6028 . -67) (undo-tree-id6029 . -67) (undo-tree-id6030 . -67) (undo-tree-id6031 . -67) (undo-tree-id6032 . -67) (undo-tree-id6033 . -67) (undo-tree-id6034 . -67) (undo-tree-id6035 . -67) (undo-tree-id6036 . -67) (undo-tree-id6037 . -67) (undo-tree-id6038 . -67) (undo-tree-id6039 . -67) (undo-tree-id6040 . -67) (undo-tree-id6041 . -67) (undo-tree-id6042 . -67) (undo-tree-id6043 . -67) (undo-tree-id6044 . -67) (undo-tree-id6045 . -67) (undo-tree-id6046 . -67) (undo-tree-id6047 . -67) (undo-tree-id6048 . -67) (undo-tree-id6049 . -67) (undo-tree-id6050 . -67) (undo-tree-id6051 . -67) (undo-tree-id6052 . -67) (undo-tree-id6053 . -67) (undo-tree-id6054 . -67) (undo-tree-id6055 . -67) (undo-tree-id6056 . -67) (undo-tree-id6057 . -67) (undo-tree-id6058 . -67) (undo-tree-id6059 . -67) (undo-tree-id6060 . -67) (undo-tree-id6061 . -67) (undo-tree-id6062 . -67) (undo-tree-id6063 . -67) (undo-tree-id6064 . -67) (undo-tree-id6065 . -67) (undo-tree-id6066 . -67) (undo-tree-id6067 . -67) (undo-tree-id6068 . -67) (undo-tree-id6069 . -67) (undo-tree-id6070 . -80) (undo-tree-id6071 . -80) (undo-tree-id6072 . -80) (undo-tree-id6073 . -80) (undo-tree-id6074 . -80) (undo-tree-id6075 . -80) (undo-tree-id6076 . -80) (undo-tree-id6077 . -80) (undo-tree-id6078 . -80) (undo-tree-id6079 . -80) (undo-tree-id6080 . -80) (undo-tree-id6081 . -80) (undo-tree-id6082 . -80) (undo-tree-id6083 . -80) (undo-tree-id6084 . -80) (undo-tree-id6085 . -80) (undo-tree-id6086 . -80) (undo-tree-id6087 . -80)) nil (25758 17457 6685 188000) 0 nil])
([nil nil ((#("the network would output a sentiment score.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3105) (undo-tree-id6009 . -43) (undo-tree-id6010 . 44) (undo-tree-id6011 . 44) (undo-tree-id6012 . -43) (undo-tree-id6013 . 1) (undo-tree-id6014 . -44)) nil (25758 17457 6637 832000) 0 nil])
([nil nil ((3030 . 3032) (3015 . 3030) (#("N" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3015) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) 3016 (3014 . 3016)) nil (25758 17457 6631 868000) 0 nil])
([nil nil ((3032 . 3033) (#("Y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3032)) nil (25758 17457 6210 553000) 0 nil])
([nil nil ((3111 . 3112) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3111) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) 3097) nil (25758 17457 6205 579000) 0 nil])
([nil nil ((#("Conversely, " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3124) (undo-tree-id6764 . -11) (undo-tree-id6765 . -11) (undo-tree-id6766 . -11) (undo-tree-id6767 . -12) (undo-tree-id6768 . -11) (undo-tree-id6769 . -9) (undo-tree-id6770 . -9) (undo-tree-id6771 . -9) (undo-tree-id6772 . -9) (undo-tree-id6773 . -9) (undo-tree-id6774 . -9) (undo-tree-id6775 . -9) (undo-tree-id6776 . -9) (undo-tree-id6777 . -10) (undo-tree-id6778 . -10) (undo-tree-id6779 . -10) (undo-tree-id6780 . -10) (undo-tree-id6781 . -10) (undo-tree-id6782 . -10) (undo-tree-id6783 . -10) (undo-tree-id6784 . -10) (undo-tree-id6785 . -11) (undo-tree-id6786 . -11) (undo-tree-id6787 . -11) (undo-tree-id6788 . -11) (undo-tree-id6789 . -11) (undo-tree-id6790 . -11) (undo-tree-id6791 . -11) (undo-tree-id6792 . -11) (undo-tree-id6793 . -11) (undo-tree-id6794 . -12) 3135 (t 25758 17457 24116 978000)) nil (25758 17510 983462 459000) 0 nil])
([nil nil ((#("(see the bottom-
left network of Figure 15-4)" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3240) (undo-tree-id6762 . -44) (undo-tree-id6763 . -45) 3182) nil (25758 17510 983440 880000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3239) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1)) nil (25758 17510 983437 398000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3149 . 3150) (nil fontified nil 3123 . 3150) (3123 . 3150)) nil (25758 17510 983253 564000) 0 nil])
([nil nil ((3122 . 3123) 3115) nil (25758 17510 983252 449000) 0 nil])
([nil nil ((3124 . 3125) (#("v" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3124)) nil (25758 17510 983251 280000) 0 nil])
([nil nil ((3134 . 3135) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3134)) nil (25758 17510 983250 184000) 0 nil])
([nil nil ((3143 . 3144) (#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3143)) nil (25758 17510 983249 184000) 0 nil])
([nil nil ((3124 . 3125)) nil (25758 17510 983248 163000) 0 nil])
([nil nil ((3151 . 3152) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t)) . 3151) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1)) nil (25758 17510 983247 127000) 0 nil])
([nil nil ((3153 . 3170)) nil (25758 17510 983243 884000) 0 nil])
([nil nil ((3170 . 3172) (#("y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3170) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . 1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3171) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3172) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3173) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) 3174 (#("could" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3174) (undo-tree-id6736 . -4) (undo-tree-id6737 . -5) (undo-tree-id6738 . -5)) nil (25758 17510 983234 489000) 0 nil])
([nil nil ((3032 . 3034) (#("you" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3032) (undo-tree-id6556 . -2) (undo-tree-id6557 . -3) (undo-tree-id6558 . -3) (undo-tree-id6559 . -3) (undo-tree-id6560 . -3) (undo-tree-id6561 . -3) (undo-tree-id6562 . -3) (undo-tree-id6563 . -3) (undo-tree-id6564 . -3) (undo-tree-id6565 . -3) (undo-tree-id6566 . -3) (undo-tree-id6567 . -3) (undo-tree-id6568 . -3) (undo-tree-id6569 . -3) (undo-tree-id6570 . -3) (undo-tree-id6571 . -3) (undo-tree-id6572 . -3) (undo-tree-id6573 . -3) (undo-tree-id6574 . -3) (undo-tree-id6575 . -3) (undo-tree-id6576 . -3) (undo-tree-id6577 . -3) (undo-tree-id6578 . -3) (undo-tree-id6579 . -3) (undo-tree-id6580 . -3)) nil (25758 17510 982986 108000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3289) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (nil fontified nil 3288 . 3289) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3288 . 3289) (3288 . 3289) (t 25758 17510 989415 430000)) nil (25758 17535 571994 187000) 0 nil])
([nil nil ((3391 . 3392) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3391) (undo-tree-id6795 . -1) (3320 . 3321) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3320) (undo-tree-id6796 . 1) (undo-tree-id6797 . -1) 3289) nil (25758 17535 571943 947000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3366) (nil fontified nil 3365 . 3366) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3365 . 3366) (3365 . 3366) 3391) nil (25758 17535 571924 129000) 0 nil])
([nil nil ((#("(or the
output of a CNN)" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 7 8 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3358) (undo-tree-id7075 . -23) (undo-tree-id7076 . -8) (undo-tree-id7077 . -8) (undo-tree-id7078 . -8) (undo-tree-id7079 . -8) (undo-tree-id7080 . -8) (undo-tree-id7081 . -8) (undo-tree-id7082 . -8) (undo-tree-id7083 . -8) (undo-tree-id7084 . -8) (undo-tree-id7085 . -8) (undo-tree-id7086 . -8) (undo-tree-id7087 . -8) (undo-tree-id7088 . -8) (undo-tree-id7089 . -8) (undo-tree-id7090 . -8) (undo-tree-id7091 . -8) (undo-tree-id7092 . -8) (undo-tree-id7093 . -8) (undo-tree-id7094 . -24) 3317 (t 25758 17535 586007 129000)) nil (25758 17582 936599 381000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3357) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1)) nil (25758 17582 936585 342000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -3367) (nil fontified nil 3366 . 3367) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3366 . 3367) (3366 . 3367) 3357) nil (25758 17582 936556 564000) 0 nil])
([nil nil ((#("For example, the input could be an image, and the" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 40 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3317) (undo-tree-id6889 . -48) (undo-tree-id6890 . 45) (undo-tree-id6891 . -40) (undo-tree-id6892 . -40) (undo-tree-id6893 . -40) (undo-tree-id6894 . -40) (undo-tree-id6895 . -40) (undo-tree-id6896 . -40) (undo-tree-id6897 . -40) (undo-tree-id6898 . -40) (undo-tree-id6899 . -40) (undo-tree-id6900 . -40) (undo-tree-id6901 . -40) (undo-tree-id6902 . -40) (undo-tree-id6903 . -40) (undo-tree-id6904 . -40) (undo-tree-id6905 . -40) (undo-tree-id6906 . -40) (undo-tree-id6907 . -40) (undo-tree-id6908 . -40) (undo-tree-id6909 . -31) (undo-tree-id6910 . -31) (undo-tree-id6911 . -31) (undo-tree-id6912 . -31) (undo-tree-id6913 . -31) (undo-tree-id6914 . -31) (undo-tree-id6915 . -31) (undo-tree-id6916 . -31) (undo-tree-id6917 . -29) (undo-tree-id6918 . -23) (undo-tree-id6919 . -17) (undo-tree-id6920 . -13) (undo-tree-id6921 . -11) (undo-tree-id6922 . -4) (undo-tree-id6923 . -40) (undo-tree-id6924 . -40) (undo-tree-id6925 . -40) (undo-tree-id6926 . -40) (undo-tree-id6927 . -40) (undo-tree-id6928 . -40) (undo-tree-id6929 . -40) (undo-tree-id6930 . -40) (undo-tree-id6931 . -40) (undo-tree-id6932 . -40) (undo-tree-id6933 . -40) (undo-tree-id6934 . -40) (undo-tree-id6935 . -40) (undo-tree-id6936 . -40) (undo-tree-id6937 . -40) (undo-tree-id6938 . -40) (undo-tree-id6939 . -40) (undo-tree-id6940 . -40) (undo-tree-id6941 . -40) (undo-tree-id6942 . -40) (undo-tree-id6943 . -40) (undo-tree-id6944 . -40) (undo-tree-id6945 . -40) (undo-tree-id6946 . -40) (undo-tree-id6947 . -40) (undo-tree-id6948 . -40) (undo-tree-id6949 . -40) (undo-tree-id6950 . -40) (undo-tree-id6951 . -40) (undo-tree-id6952 . -40) (undo-tree-id6953 . -40) (undo-tree-id6954 . -40) (undo-tree-id6955 . -40) (undo-tree-id6956 . -40) (undo-tree-id6957 . -40) (undo-tree-id6958 . -40) (undo-tree-id6959 . -40) (undo-tree-id6960 . -40) (undo-tree-id6961 . -40) (undo-tree-id6962 . -40) (undo-tree-id6963 . -40) (undo-tree-id6964 . -40) (undo-tree-id6965 . -40) (undo-tree-id6966 . -40) (undo-tree-id6967 . -40) (undo-tree-id6968 . -40) (undo-tree-id6969 . -40) (undo-tree-id6970 . -40) (undo-tree-id6971 . -40) (undo-tree-id6972 . -40) (undo-tree-id6973 . -40) (undo-tree-id6974 . -40) (undo-tree-id6975 . -40) (undo-tree-id6976 . -40) (undo-tree-id6977 . -40) (undo-tree-id6978 . -40) (undo-tree-id6979 . -40) (undo-tree-id6980 . -40) (undo-tree-id6981 . -40) (undo-tree-id6982 . -40) (undo-tree-id6983 . -40) (undo-tree-id6984 . -40) (undo-tree-id6985 . -40) (undo-tree-id6986 . -40) (undo-tree-id6987 . -40) (undo-tree-id6988 . -40) (undo-tree-id6989 . -40) (undo-tree-id6990 . -40) (undo-tree-id6991 . -40) (undo-tree-id6992 . -40) (undo-tree-id6993 . -40) (undo-tree-id6994 . -40) (undo-tree-id6995 . -40) (undo-tree-id6996 . -40) (undo-tree-id6997 . -40) (undo-tree-id6998 . -40) (undo-tree-id6999 . -40) (undo-tree-id7000 . -40) (undo-tree-id7001 . -40) (undo-tree-id7002 . -40) (undo-tree-id7003 . -40) (undo-tree-id7004 . -40) (undo-tree-id7005 . -40) (undo-tree-id7006 . -40) (undo-tree-id7007 . -40) (undo-tree-id7008 . -40) (undo-tree-id7009 . -40) (undo-tree-id7010 . -40) (undo-tree-id7011 . -40) (undo-tree-id7012 . -40) (undo-tree-id7013 . -40) (undo-tree-id7014 . -40) (undo-tree-id7015 . -40) (undo-tree-id7016 . -40) (undo-tree-id7017 . -40) (undo-tree-id7018 . -40) (undo-tree-id7019 . -40) (undo-tree-id7020 . -40) (undo-tree-id7021 . -40) (undo-tree-id7022 . -49) (undo-tree-id7023 . -49)) nil (25758 17582 936550 197000) 0 nil])
([nil nil ((#("output could be a caption for that image.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 40 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3318) (undo-tree-id6866 . -41) (undo-tree-id6867 . -27) (undo-tree-id6868 . -41) (undo-tree-id6869 . 1) (undo-tree-id6870 . -27) (undo-tree-id6871 . -27) (undo-tree-id6872 . -27) (undo-tree-id6873 . -27) (undo-tree-id6874 . -27) (undo-tree-id6875 . -27) (undo-tree-id6876 . -27) (undo-tree-id6877 . -27) (undo-tree-id6878 . -27) (undo-tree-id6879 . -27) (undo-tree-id6880 . -27) (undo-tree-id6881 . -27) (undo-tree-id6882 . -27) (undo-tree-id6883 . -27) (undo-tree-id6884 . -27) (undo-tree-id6885 . -27) (undo-tree-id6886 . -27) (undo-tree-id6887 . -27) (undo-tree-id6888 . -42) 3345) nil (25758 17582 936291 227000) 0 nil])
([nil nil ((#("(see the
bottom-right network of Figure 15-4)" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3451) (undo-tree-id7230 . -44) (undo-tree-id7231 . 45) (undo-tree-id7232 . -1) (undo-tree-id7233 . 1) (undo-tree-id7234 . -45) (undo-tree-id7235 . -45) (t 25758 17582 999147 529000)) nil (25758 17664 228638 517000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3450) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1)) nil (25758 17664 228630 488000) 0 nil])
([nil nil ((#("f" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3484) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1)) nil (25758 17664 228420 222000) 0 nil])
([nil nil ((#("For " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7162 . -3) (undo-tree-id7163 . -4)) nil (25758 17664 228418 158000) 0 nil])
([nil nil ((#("example" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7160 . -6) (undo-tree-id7161 . -7)) nil (25758 17664 228416 225000) 0 nil])
([nil nil ((#(", " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7158 . -1) (undo-tree-id7159 . -2)) nil (25758 17664 228414 481000) 0 nil])
([nil nil ((#("this " 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7156 . -4) (undo-tree-id7157 . -5)) nil (25758 17664 228412 254000) 0 nil])
([nil nil ((#("could " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7154 . -5) (undo-tree-id7155 . -6)) nil (25758 17664 228410 356000) 0 nil])
([nil nil ((#("be " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7152 . -2) (undo-tree-id7153 . -3)) nil (25758 17664 228408 463000) 0 nil])
([nil nil ((#("used " 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7103 . -4) (undo-tree-id7104 . -5) (undo-tree-id7105 . -5) (undo-tree-id7106 . -5) (undo-tree-id7107 . -5) (undo-tree-id7108 . -5) (undo-tree-id7109 . -5) (undo-tree-id7110 . -5) (undo-tree-id7111 . -5) (undo-tree-id7112 . -5) (undo-tree-id7113 . -5) (undo-tree-id7114 . -5) (undo-tree-id7115 . -5) (undo-tree-id7116 . -5) (undo-tree-id7117 . -5) (undo-tree-id7118 . -5) (undo-tree-id7119 . -5) (undo-tree-id7120 . -5) (undo-tree-id7121 . -5) (undo-tree-id7122 . -5) (undo-tree-id7123 . -5) (undo-tree-id7124 . -5) (undo-tree-id7125 . -5) (undo-tree-id7126 . -5) (undo-tree-id7127 . -5) (undo-tree-id7128 . -5) (undo-tree-id7129 . -5) (undo-tree-id7130 . -5) (undo-tree-id7131 . -5) (undo-tree-id7132 . -5) (undo-tree-id7133 . -5) (undo-tree-id7134 . -5) (undo-tree-id7135 . -5) (undo-tree-id7136 . -5) (undo-tree-id7137 . -5) (undo-tree-id7138 . -5) (undo-tree-id7139 . -5) (undo-tree-id7140 . -5) (undo-tree-id7141 . -5) (undo-tree-id7142 . -5) (undo-tree-id7143 . -5) (undo-tree-id7144 . -5) (undo-tree-id7145 . -5) (undo-tree-id7146 . -5) (undo-tree-id7147 . -5) (undo-tree-id7148 . -5) (undo-tree-id7149 . -5) (undo-tree-id7150 . -5) (undo-tree-id7151 . -5)) nil (25758 17664 228405 87000) 0 nil])
([nil nil ((#("or" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3452) (undo-tree-id7101 . -1) (undo-tree-id7102 . -2)) nil (25758 17664 228372 10000) 0 nil])
([nil nil ((#("translating a sentence from one language to another" 0 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7099 . -50) (undo-tree-id7100 . -51)) nil (25758 17664 228369 692000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7097 . -1) (undo-tree-id7098 . -2)) nil (25758 17664 228853 656000) 0 nil])
([nil nil ((#("You would feed the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7255 . -18) (undo-tree-id7256 . -19)) nil (25758 17696 828949 259000) 0 nil] [nil nil ((#("You would feed the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7095 . -18) (undo-tree-id7096 . -19)) ((3453 . 3472)) (25758 17664 228361 233000) 0 nil])
([nil nil ((#("network a sentence in one language, the encoder would convert this
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7253 . -66) (undo-tree-id7254 . -67)) nil (25758 17696 828947 91000) 0 nil])
nil
([nil nil ((#("sentence into a single vector representation, and then the decoder would
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7251 . -72) (undo-tree-id7252 . -73)) nil (25758 17696 828943 737000) 0 nil])
([nil nil ((#("decode this vector into a sentence in another language" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7249 . -53) (undo-tree-id7250 . -54)) nil (25758 17696 828941 241000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3453) (undo-tree-id7247 . -1) (undo-tree-id7248 . -2)) nil (25758 17696 828938 504000) 0 nil])
([nil nil ((3319 . 3320) 3319) nil (25758 17696 828935 787000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3334 . 3335) (nil fontified nil 3320 . 3335) (3320 . 3335)) nil (25758 17696 828933 947000) 0 nil])
([nil nil ((3320 . 3321)) nil (25758 17696 829160 524000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3336 . 3337) (nil fontified nil 3336 . 3337) (3336 . 3337) 3335) nil (25758 17761 414749 542000) 0 nil] [nil nil ((#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3320) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1)) ((3320 . 3321)) (25758 17696 828927 148000) 0 nil])
([nil nil ((#("Lastly" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3338) (undo-tree-id7454 . -5) (undo-tree-id7455 . -6)) nil (25758 17761 414748 147000) 0 nil])
nil
([nil nil ((#(", " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3338) (undo-tree-id7452 . -1) (undo-tree-id7453 . -2)) nil (25758 17761 414745 831000) 0 nil])
([nil nil ((3338 . 3343) (#("_" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3338) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3339) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) (undo-tree-id7407 . -1) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) 3340 (3338 . 3340) (#("you could" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3338) (undo-tree-id7434 . -8) (undo-tree-id7435 . -8) (undo-tree-id7436 . -8) (undo-tree-id7437 . -9) (undo-tree-id7438 . -8) (undo-tree-id7439 . -4) (undo-tree-id7440 . -4) (undo-tree-id7441 . -4) (undo-tree-id7442 . -4) (undo-tree-id7443 . -4) (undo-tree-id7444 . -4) (undo-tree-id7445 . -4) (undo-tree-id7446 . -4) (undo-tree-id7447 . -8) (undo-tree-id7448 . -8) (undo-tree-id7449 . -9) (undo-tree-id7450 . -9) (undo-tree-id7451 . -9) 3346) nil (25758 17761 414735 890000) 0 nil])
([nil nil ((3338 . 3339) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3338)) nil (25758 17761 414256 403000) 0 nil])
([nil nil ((3457 . 3458) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 3457) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3458) (undo-tree-id7332 . -1) 3412) nil (25758 17761 414253 59000) 0 nil])
([nil nil ((3504 . 3505) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3504) (undo-tree-id7282 . -1)) nil (25758 17761 414214 360000) 0 nil])
([nil nil ((#("works much better than trying to" 0 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3506) (undo-tree-id7279 . -31) (undo-tree-id7280 . -32) (undo-tree-id7281 . -32)) nil (25758 17761 414212 129000) 0 nil])
([nil nil ((#("translate on the fly with a single sequence-to-sequence RNN (like the one
" 0 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7277 . -73) (undo-tree-id7278 . -74)) nil (25758 17761 414208 568000) 0 nil])
([nil nil ((#("represented at the top left)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7275 . -27) (undo-tree-id7276 . -28)) nil (25758 17761 414205 891000) 0 nil])
([nil nil ((#(": " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-code) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-code)) . 3507) (undo-tree-id7273 . -1) (undo-tree-id7274 . -2)) nil (25758 17761 414200 829000) 0 nil])
([nil nil ((#("the last words of a sentence can affect the first
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7271 . -49) (undo-tree-id7272 . -50)) nil (25758 17761 414198 653000) 0 nil])
([nil nil ((#("words of the translation, so you need to wait until you have seen the whole
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7269 . -75) (undo-tree-id7270 . -76)) nil (25758 17761 414196 148000) 0 nil])
([nil nil ((#("sentence before translating it" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7267 . -29) (undo-tree-id7268 . -30)) nil (25758 17761 414193 917000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7265 . -1) (undo-tree-id7266 . -2)) nil (25758 17761 414191 497000) 0 nil])
([nil nil ((#("We will see how to implement an Encoder–
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7263 . -40) (undo-tree-id7264 . -41)) nil (25758 17761 414188 833000) 0 nil])
([nil nil ((#("Decoder in Chapter 16 (as we will see, it is a bit more complex than in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3507) (undo-tree-id7261 . -71) (undo-tree-id7262 . -72)) nil (25758 17761 414185 960000) 0 nil])
([nil nil ((#("Figure 15-4 suggests).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3507) (undo-tree-id7257 . -22) (undo-tree-id7258 . -21) (undo-tree-id7259 . -21) (undo-tree-id7260 . -23)) nil (25758 17761 414182 665000) 0 nil])
([nil nil ((3507 . 3508)) nil (25758 17761 414167 825000) 0 nil])
([nil nil ((3508 . 3509)) nil (25758 17761 414162 300000) 0 nil])
([nil nil ((3509 . 3511) (t 25758 17761 867447 772000)) nil (25758 17799 689894 156000) 0 nil])
([nil nil ((3511 . 3512) 3509) nil (25758 17805 911579 681000) 0 nil] [nil nil ((nil rear-nonsticky nil 4824 . 4825) (nil fontified nil 4814 . 4825) (nil fontified nil 4741 . 4814) (nil fontified nil 4669 . 4741) (nil fontified nil 4596 . 4669) (nil fontified nil 4518 . 4596) (nil fontified nil 4446 . 4518) (nil fontified nil 4371 . 4446) (nil fontified nil 4303 . 4371) (nil fontified nil 4231 . 4303) (nil fontified nil 4162 . 4231) (nil fontified nil 4085 . 4162) (nil fontified nil 4014 . 4085) (nil fontified nil 3946 . 4014) (nil fontified nil 3872 . 3946) (nil fontified nil 3799 . 3872) (nil fontified nil 3723 . 3799) (nil fontified nil 3676 . 3723) (nil fontified nil 3603 . 3676) (nil fontified nil 3524 . 3603) (nil fontified nil 3510 . 3524) (3510 . 4825) 3509) ((#("Training RNNs
To train an RNN, the trick is to unroll it through time (like we just did) and
then simply use regular backpropagation (see Figure 15-5). This strategy
is called backpropagation through time (BPTT).
Just like in regular backpropagation, there is a first forward pass through
the unrolled network (represented by the dashed arrows). Then the output
sequence is evaluated using a cost function C(Y(0), Y(1), …Y(T)) (where T
is the max time step). Note that this cost function may ignore some
outputs, as shown in Figure 15-5 (for example, in a sequence-to-vector
RNN, all outputs are ignored except for the very last one). The gradients of
that cost function are then propagated backward through the unrolled
network (represented by the solid arrows). Finally the model parameters
are updated using the gradients computed during BPTT. Note that the
gradients flow backward through all the outputs used by the cost function,
not just through the final output (for example, in Figure 15-5 the cost
function is computed using the last three outputs of the network, Y(2), Y(3),
and Y(4), so gradients flow through these three outputs, but not through
Y(0) and Y(1)). Moreover, since the same parameters W and b are used at
each time step, backpropagation will do the right thing and sum over all
time steps." 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 14 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 93 166 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 166 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 213 289 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 289 362 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 362 436 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 436 499 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 499 504 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 504 575 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 575 652 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 652 721 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 721 793 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 793 861 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 861 936 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 936 1004 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1004 1008 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1008 1086 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1086 1159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1159 1231 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1231 1304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1304 1314 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1314 1315 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 3510) (undo-tree-id7456 . -1314) (undo-tree-id7457 . -1314) (undo-tree-id7458 . -1304) (undo-tree-id7459 . -1315) (undo-tree-id7460 . -1314) (undo-tree-id7461 . -1314) (nil fontified t 3510 . 3524) (nil fontified t 3524 . 3603) (nil fontified t 3603 . 3676) (nil fontified t 3676 . 3723) (nil fontified t 3723 . 3799) (nil fontified t 3799 . 3872) (nil fontified t 3872 . 3946) (nil fontified t 4009 . 4014) (nil fontified t 3946 . 4009) (nil fontified t 4014 . 4085) (nil fontified t 4085 . 4162) (nil fontified t 4162 . 4231) (nil fontified t 4231 . 4303) (nil fontified t 4303 . 4371) (nil fontified t 4371 . 4446) (nil fontified t 4514 . 4518) (nil fontified t 4446 . 4514) (nil fontified t 4518 . 4596) (nil fontified t 4596 . 4669) (nil fontified t 4669 . 4741) (nil fontified t 4741 . 4814) (nil rear-nonsticky t 4824 . 4825)) (25758 17799 688377 647000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4826 . 4827) (nil fontified nil 4816 . 4827) (nil fontified nil 4743 . 4816) (nil fontified nil 4671 . 4743) (nil fontified nil 4598 . 4671) (nil fontified nil 4520 . 4598) (nil fontified nil 4448 . 4520) (nil fontified nil 4373 . 4448) (nil fontified nil 4305 . 4373) (nil fontified nil 4233 . 4305) (nil fontified nil 4164 . 4233) (nil fontified nil 4087 . 4164) (nil fontified nil 4016 . 4087) (nil fontified nil 3948 . 4016) (nil fontified nil 3874 . 3948) (nil fontified nil 3801 . 3874) (nil fontified nil 3725 . 3801) (nil fontified nil 3678 . 3725) (nil fontified nil 3605 . 3678) (nil fontified nil 3526 . 3605) (nil fontified nil 3512 . 3526) (3512 . 4827)) nil (25758 17805 911577 691000) 0 nil])
nil
([nil nil ((nil keymap (keymap) 3510 . 3511) (nil face org-level-1 3510 . 3511) (nil line-prefix #("  " 0 2 (face org-indent)) 3510 . 3511) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3510 . 3511) (nil fontified nil 3510 . 3511) (3510 . 3511) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 3510) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -3511) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) 3510) nil (25758 17805 911569 206000) 0 nil])
([nil nil ((4826 . 4827)) nil (25758 17805 911510 310000) 0 nil])
([nil nil ((#("(like we just did)" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3581) (undo-tree-id7567 . -17) (undo-tree-id7568 . -18) 3525 (t 25758 17805 928506 659000)) nil (25758 17854 205504 406000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3580) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1)) nil (25758 17854 205501 451000) 0 nil])
([nil nil ((#("(see Figure 15-5)" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3625) (undo-tree-id7553 . -16) (undo-tree-id7554 . -17) 3585) nil (25758 17854 205492 400000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3624) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1)) nil (25758 17854 205489 463000) 0 nil])
([nil nil ((#("(represented by the dashed arrows)" 0 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3784) (undo-tree-id7539 . -33) (undo-tree-id7540 . -34) 3766) nil (25758 17854 205479 211000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3783) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1)) nil (25758 17854 205475 593000) 0 nil])
([nil nil ((3848 . 3849)) nil (25758 17854 205762 844000) 0 nil])
([nil nil ((3855 . 3856)) nil (25758 17867 549183 315000) 0 nil] [nil nil ((nil rear-nonsticky nil 3855 . 3856) (nil fontified nil 3855 . 3856) (3855 . 3856) 3854) ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 3855) (nil rear-nonsticky t 3855 . 3856)) (25758 17854 205450 137000) 0 nil])
([nil nil ((3863 . 3864)) nil (25758 17867 549182 305000) 0 nil])
nil
([nil nil ((#("(where T
is the max time step)" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3869) (undo-tree-id7613 . -29) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -30) 3870) nil (25758 17867 549180 446000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3868) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1)) nil (25758 17867 549164 252000) 0 nil])
([nil nil ((3870 . 3872)) nil (25758 17867 549115 195000) 0 nil])
([nil nil ((3686 . 3687) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3686) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (3639 . 3640) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3639) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (3584 . 3585) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3584) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) 3525 (t 25758 17867 561987 642000)) nil (25758 17876 755518 1000) 0 nil])
([nil nil ((3800 . 3801) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3800) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (3762 . 3763) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3762) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) 3686) nil (25758 17876 755493 235000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -3836) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3835 . 3836) (3835 . 3836) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -3755) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3754 . 3755) (3754 . 3755) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -3679) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3678 . 3679) (3678 . 3679) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -3601) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3600 . 3601) (3600 . 3601) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3869) (undo-tree-id7634 . -1) 3800) nil (25758 17876 755474 358000) 0 nil])
([nil nil ((#("Note that this cost function may ignore some
" 0 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 41 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3871) (undo-tree-id7954 . -44) (undo-tree-id7955 . 45) (undo-tree-id7956 . -45) (t 25758 17876 770208 884000)) nil (25758 17985 683620 579000) 0 nil])
([nil nil ((#("outputs, as shown in Figure 15-5 (for example, in a sequence-to-vector
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3871) (undo-tree-id7951 . -70) (undo-tree-id7952 . 71) (undo-tree-id7953 . -71)) nil (25758 17985 683618 122000) 0 nil])
([nil nil ((#("RNN, all outputs are ignored except for the very last one)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3871) (undo-tree-id7946 . -57) (undo-tree-id7947 . 58) (undo-tree-id7948 . 58) (undo-tree-id7949 . -3) (undo-tree-id7950 . -58)) nil (25758 17985 683615 298000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3871) (undo-tree-id7943 . -1) (undo-tree-id7944 . 2) (undo-tree-id7945 . -2)) nil (25758 17985 683610 560000) 0 nil])
([nil nil ((4539 . 4540) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4539) (undo-tree-id7933 . -1) (4466 . 4467) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4466) (undo-tree-id7934 . -1) (4394 . 4395) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4394) (undo-tree-id7935 . -1) (4321 . 4322) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4321) (undo-tree-id7936 . -1) (4243 . 4244) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4243) (undo-tree-id7937 . -1) (4171 . 4172) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4171) (undo-tree-id7938 . -1) (4096 . 4097) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4096) (undo-tree-id7939 . -1) (4028 . 4029) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4028) (undo-tree-id7940 . -1) (3956 . 3957) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3956) (undo-tree-id7941 . -1) (3887 . 3888) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3887) (undo-tree-id7942 . -1) 3871) nil (25758 17985 683605 970000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4483) (nil fontified nil 4482 . 4483) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4482 . 4483) (4482 . 4483) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4404) (nil fontified nil 4403 . 4404) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4403 . 4404) (4403 . 4404) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4335) (nil fontified nil 4334 . 4335) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4334 . 4335) (4334 . 4335) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4256) (nil fontified nil 4255 . 4256) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4255 . 4256) (4255 . 4256) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4181) (nil fontified nil 4180 . 4181) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4180 . 4181) (4180 . 4181) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4107) (nil fontified nil 4106 . 4107) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4106 . 4107) (4106 . 4107) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -4029) (nil fontified nil 4028 . 4029) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4028 . 4029) (4028 . 4029) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3948) (nil fontified nil 3947 . 3948) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3947 . 3948) (3947 . 3948) 4539) nil (25758 17985 683593 177000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3870) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1) (undo-tree-id7823 . -1) (undo-tree-id7824 . -1) (undo-tree-id7825 . -1) (undo-tree-id7826 . -1) (undo-tree-id7827 . -1) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (undo-tree-id7867 . -1) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (undo-tree-id7870 . -1) (undo-tree-id7871 . -1) (undo-tree-id7872 . -1) (undo-tree-id7873 . -1) (undo-tree-id7874 . -1) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -1) (undo-tree-id7879 . -1) (undo-tree-id7880 . -1) (undo-tree-id7881 . -1) (undo-tree-id7882 . -1) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) (undo-tree-id7889 . -1) (undo-tree-id7890 . -1) (undo-tree-id7891 . -1) (undo-tree-id7892 . -1) (undo-tree-id7893 . -1) (undo-tree-id7894 . -1) (undo-tree-id7895 . -1) (undo-tree-id7896 . -1) (undo-tree-id7897 . -1) (undo-tree-id7898 . -1) (undo-tree-id7899 . -1) (undo-tree-id7900 . -1) (undo-tree-id7901 . -1) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (undo-tree-id7914 . -1) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1)) nil (25758 17985 683579 943000) 0 nil])
([nil nil ((#("(represented by the solid arrows)" 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3964) (undo-tree-id7805 . -32) (undo-tree-id7806 . -33) 3947) nil (25758 17985 682970 498000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3963) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1)) nil (25758 17985 682968 208000) 0 nil])
([nil nil ((3965 . 3966)) nil (25758 17985 682960 109000) 0 nil])
([nil nil ((4049 . 4051)) nil (25758 17985 682959 555000) 0 nil])
([nil nil ((3525 . 3527)) nil (25758 17985 682958 727000) 0 nil])
([nil nil ((#("trick is to " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3548) (undo-tree-id7781 . -11) (undo-tree-id7782 . -11) (undo-tree-id7783 . -11) (undo-tree-id7784 . -4) (undo-tree-id7785 . -12) (undo-tree-id7786 . -11) (undo-tree-id7787 . -4) (undo-tree-id7788 . -7) (undo-tree-id7789 . -10) (undo-tree-id7790 . -11) (undo-tree-id7791 . -11) (undo-tree-id7792 . -12) 3559) nil (25758 17985 682957 552000) 0 nil])
([nil nil ((3679 . 3681) (3677 . 3679)) nil (25758 17985 682949 570000) 0 nil])
([nil nil ((3591 . 3593)) nil (25758 17985 682948 803000) 0 nil])
([nil nil ((3671 . 3673)) nil (25758 17985 682948 124000) 0 nil])
([nil nil ((3667 . 3669) (3666 . 3667)) nil (25758 17985 682946 822000) 0 nil])
([nil nil ((3673 . 3674) (#("  " 0 2 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3673) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -2) (undo-tree-id7691 . -2) (undo-tree-id7692 . -2) (undo-tree-id7693 . -2) (undo-tree-id7694 . -2) (undo-tree-id7695 . -2) (undo-tree-id7696 . -2) (undo-tree-id7697 . -2) (undo-tree-id7698 . -2) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3673) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) 3668) nil (25758 17995 11966 296000) 0 nil])
([nil nil ((#("Just like in regular backpropagation" 0 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3686) (undo-tree-id7965 . -35) (undo-tree-id7966 . -36) (t 25758 17985 744808 757000)) nil (25758 17999 213227 685000) 0 nil] [nil nil ((#("Just like in regular backpropagation, there is a first forwar" 0 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3686) (undo-tree-id7957 . -60) (undo-tree-id7958 . 40) (undo-tree-id7959 . -36) (undo-tree-id7960 . -61) (t 25758 17985 744808 757000)) ((3686 . 3747)) (25758 17995 11545 507000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3686) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1)) nil (25758 17999 213224 779000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3686) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1)) nil (25758 17999 213220 980000) 0 nil])
([nil nil ((3686 . 3687) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3686)) nil (25758 17999 213205 606000) 0 nil])
([nil nil ((3796 . 3797) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3796) (undo-tree-id7967 . -1) (3715 . 3716) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3715) (undo-tree-id7968 . -1) 3686 (t 25758 17999 229121 307000)) nil (25758 18002 128458 185000) 0 nil])
([nil nil ((3748 . 3750) (3746 . 3748) (t 25758 18002 141188 836000)) nil (25758 18009 633042 609000) 0 nil])
([nil nil ((3811 . 3813) (3810 . 3811) (t 25758 18009 649362 997000)) nil (25758 18015 630714 514000) 0 nil])
([nil nil ((3841 . 3843) (3840 . 3841) (3837 . 3840) (t 25758 18015 645502 136000) 3812) nil (25758 18024 722854 849000) 0 nil])
([nil nil ((3842 . 3843) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3842) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3843) (undo-tree-id7980 . 1) (undo-tree-id7981 . -1) 3842) nil (25758 18024 722849 931000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3922) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) 3923 (3920 . 3923) (t 25758 18024 737713 204000)) nil (25758 18033 996691 590000) 0 nil])
([nil nil ((3942 . 3944) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3942) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) 3943 (3940 . 3943) (t 25758 18034 9928 558000) 3921) nil (25758 18042 613498 968000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 3941) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1)) nil (25758 18042 613487 622000) 0 nil])
([nil nil ((3942 . 3943) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3942) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3943) (undo-tree-id8005 . 1) (undo-tree-id8006 . -1) 3941) nil (25758 18042 613469 44000) 0 nil])
([nil nil ((3971 . 3972) (#("
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3971) (undo-tree-id7993 . -1) 3942) nil (25758 18042 613455 269000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3941) (undo-tree-id8080 . -2) (undo-tree-id8081 . -2) (undo-tree-id8082 . -2) (undo-tree-id8083 . -2) (undo-tree-id8084 . -2) (undo-tree-id8085 . -2) (undo-tree-id8086 . -2) (undo-tree-id8087 . -2) (undo-tree-id8088 . -2) (undo-tree-id8089 . -2) (undo-tree-id8090 . -2) (undo-tree-id8091 . -2) 3943 (3940 . 3943) (t 25758 18042 630128 863000) 3922) nil (25758 18048 307049 743000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3942) (undo-tree-id8078 . -2) (undo-tree-id8079 . -2) 3944 (3941 . 3944) 3941) nil (25758 18048 307040 225000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3942) (undo-tree-id8041 . 1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1)) nil (25758 18048 307032 693000) 0 nil])
([nil nil ((#("Note that the gradients
" 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 14 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4029) (undo-tree-id8226 . -23) (undo-tree-id8227 . -2) (undo-tree-id8228 . -2) (undo-tree-id8229 . -2) (undo-tree-id8230 . -2) (undo-tree-id8231 . -2) (undo-tree-id8232 . -2) (undo-tree-id8233 . -2) (undo-tree-id8234 . -2) (undo-tree-id8235 . -2) (undo-tree-id8236 . -2) (undo-tree-id8237 . -2) (undo-tree-id8238 . -2) (undo-tree-id8239 . -2) (undo-tree-id8240 . -2) (undo-tree-id8241 . -2) (undo-tree-id8242 . -2) (undo-tree-id8243 . -2) (undo-tree-id8244 . -2) (undo-tree-id8245 . -2) (undo-tree-id8246 . -24) 4031 (t 25758 18048 322261 181000)) nil (25758 18079 943769 596000) 0 nil])
([nil nil ((#("flow backward through all the outputs used by the cost function, not just
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 65 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4029) (undo-tree-id8203 . -73) (undo-tree-id8204 . -2) (undo-tree-id8205 . -2) (undo-tree-id8206 . -2) (undo-tree-id8207 . -2) (undo-tree-id8208 . -2) (undo-tree-id8209 . -2) (undo-tree-id8210 . -2) (undo-tree-id8211 . -2) (undo-tree-id8212 . -2) (undo-tree-id8213 . -2) (undo-tree-id8214 . -2) (undo-tree-id8215 . -2) (undo-tree-id8216 . -2) (undo-tree-id8217 . -2) (undo-tree-id8218 . -2) (undo-tree-id8219 . -2) (undo-tree-id8220 . -2) (undo-tree-id8221 . -2) (undo-tree-id8222 . -2) (undo-tree-id8223 . -2) (undo-tree-id8224 . -2) (undo-tree-id8225 . -74) 4031) nil (25758 18079 943745 518000) 0 nil])
([nil nil ((#("through the final output (for example, in Figure 15-5 the cost function is
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 62 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 63 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4029) (undo-tree-id8180 . -74) (undo-tree-id8181 . -2) (undo-tree-id8182 . -2) (undo-tree-id8183 . -2) (undo-tree-id8184 . -2) (undo-tree-id8185 . -2) (undo-tree-id8186 . -2) (undo-tree-id8187 . -2) (undo-tree-id8188 . -2) (undo-tree-id8189 . -2) (undo-tree-id8190 . -2) (undo-tree-id8191 . -2) (undo-tree-id8192 . -2) (undo-tree-id8193 . -2) (undo-tree-id8194 . -2) (undo-tree-id8195 . -2) (undo-tree-id8196 . -2) (undo-tree-id8197 . -2) (undo-tree-id8198 . -2) (undo-tree-id8199 . -2) (undo-tree-id8200 . -2) (undo-tree-id8201 . -2) (undo-tree-id8202 . -75) 4031) nil (25758 18079 943731 27000) 0 nil])
([nil nil ((#("computed using the last three outputs of the network, Y(2), Y(3), and Y(4), so
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 66 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4029) (undo-tree-id8157 . -78) (undo-tree-id8158 . -2) (undo-tree-id8159 . -2) (undo-tree-id8160 . -2) (undo-tree-id8161 . -2) (undo-tree-id8162 . -2) (undo-tree-id8163 . -2) (undo-tree-id8164 . -2) (undo-tree-id8165 . -2) (undo-tree-id8166 . -2) (undo-tree-id8167 . -2) (undo-tree-id8168 . -2) (undo-tree-id8169 . -2) (undo-tree-id8170 . -2) (undo-tree-id8171 . -2) (undo-tree-id8172 . -2) (undo-tree-id8173 . -2) (undo-tree-id8174 . -2) (undo-tree-id8175 . -2) (undo-tree-id8176 . -2) (undo-tree-id8177 . -2) (undo-tree-id8178 . -2) (undo-tree-id8179 . -79) 4031) nil (25758 18079 943716 615000) 0 nil])
([nil nil ((#("gradients flow through these three outputs, but not through Y(0) and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 60 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 68 69 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4029) (undo-tree-id8134 . -68) (undo-tree-id8135 . -2) (undo-tree-id8136 . -2) (undo-tree-id8137 . -2) (undo-tree-id8138 . -2) (undo-tree-id8139 . -2) (undo-tree-id8140 . -2) (undo-tree-id8141 . -2) (undo-tree-id8142 . -2) (undo-tree-id8143 . -2) (undo-tree-id8144 . -2) (undo-tree-id8145 . -2) (undo-tree-id8146 . -2) (undo-tree-id8147 . -2) (undo-tree-id8148 . -2) (undo-tree-id8149 . -2) (undo-tree-id8150 . -2) (undo-tree-id8151 . -2) (undo-tree-id8152 . -2) (undo-tree-id8153 . -2) (undo-tree-id8154 . -2) (undo-tree-id8155 . -2) (undo-tree-id8156 . -69) 4031) nil (25758 18079 943698 806000) 0 nil])
([nil nil ((#("1))" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4031) (undo-tree-id8132 . -2) (undo-tree-id8133 . -3)) nil (25758 18079 943684 946000) 0 nil])
([nil nil ((#("Y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4029) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1)) nil (25758 18079 943682 668000) 0 nil])
([nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4029) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . 1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1)) nil (25758 18079 943678 93000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4029) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1)) nil (25758 18079 943545 920000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4029) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1)) nil (25758 18079 943539 74000) 0 nil])
([nil nil ((4029 . 4031) (t 25758 18079 958997 302000)) nil (25758 18102 711996 841000) 0 nil])
([nil nil ((#("Moreover" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4031) (undo-tree-id8267 . -7) (undo-tree-id8268 . 8) (undo-tree-id8269 . -8)) nil (25758 18102 711995 889000) 0 nil])
([nil nil ((#(", " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4031) (undo-tree-id8264 . -1) (undo-tree-id8265 . 2) (undo-tree-id8266 . -2)) nil (25758 18102 711993 10000) 0 nil])
([nil nil ((4093 . 4095)) nil (25758 18102 711990 653000) 0 nil])
([nil nil ((4094 . 4096)) nil (25758 18102 711990 5000) 0 nil])
([nil nil ((4095 . 4096) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4095) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1)) nil (25758 18102 711988 366000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4095) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1)) nil (25758 18102 711981 956000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4095) (undo-tree-id8247 . 1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1)) nil (25758 18102 711975 975000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5075 . 5076) (nil fontified nil 5002 . 5076) (nil fontified nil 4936 . 5002) (nil fontified nil 4863 . 4936) (nil fontified nil 4788 . 4863) (nil fontified nil 4710 . 4788) (nil fontified nil 4634 . 4710) (nil fontified nil 4560 . 4634) (nil fontified nil 4486 . 4560) (nil fontified nil 4410 . 4486) (nil fontified nil 4335 . 4410) (nil fontified nil 4259 . 4335) (nil fontified nil 4190 . 4259) (nil fontified nil 4164 . 4190) (4164 . 5076) (t 25758 18102 731527 860000)) nil (25758 18139 330693 109000) 0 nil])
([nil nil ((4166 . 4167) (4165 . 4166) (4164 . 4165) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4164) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (#("-" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4165) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4166) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) 4167 (4029 . 4167) (#("- 

- since the same parameters W and b are used at each time step,
  backpropagation will do the right thing and sum over all time steps." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) composition (1 1 [8226])) 5 6 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 6 51 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 51 52 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 52 67 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 67 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 68 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 70 71 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 71 126 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 126 127 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 127 137 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 137 138 (rear-nonsticky t fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4029) (undo-tree-id8484 . 68) (undo-tree-id8485 . -85) (undo-tree-id8486 . -4) (4029 . 4033) 4164 (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4164) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (#("-" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4165) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4166) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) 4167 (4029 . 4167) (#("- 

- since the same parameters W and b are used at each time step,
  backpropagation will do the right thing and sum over all time steps." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 6 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 51 52 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 52 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 67 68 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 68 70 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 70 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 71 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 126 127 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 127 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 137 138 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky t)) . 4029) (undo-tree-id8547 . 68) (undo-tree-id8548 . -70) (undo-tree-id8549 . -70) (undo-tree-id8550 . -70) (undo-tree-id8551 . -70) (undo-tree-id8552 . -70) (undo-tree-id8553 . -70) (undo-tree-id8554 . -70) (undo-tree-id8555 . -70) (undo-tree-id8556 . -70) (undo-tree-id8557 . -70) (undo-tree-id8558 . -70) (undo-tree-id8559 . 68) (undo-tree-id8560 . -85) (undo-tree-id8561 . -70) (undo-tree-id8562 . -138) (undo-tree-id8563 . -70) (undo-tree-id8564 . -70) (undo-tree-id8565 . -70) (undo-tree-id8566 . -70) (undo-tree-id8567 . -70) (undo-tree-id8568 . -70) (undo-tree-id8569 . -70) (undo-tree-id8570 . -70) (undo-tree-id8571 . -70) (undo-tree-id8572 . -70) (undo-tree-id8573 . -70) (undo-tree-id8574 . -86) (undo-tree-id8575 . -86) (undo-tree-id8576 . -86) (undo-tree-id8577 . -86) (undo-tree-id8578 . -86) (undo-tree-id8579 . -86) (undo-tree-id8580 . -86) (undo-tree-id8581 . -86) (undo-tree-id8582 . -22) (undo-tree-id8583 . -22) (undo-tree-id8584 . -22) (undo-tree-id8585 . -22) (undo-tree-id8586 . -22) (undo-tree-id8587 . -22) (undo-tree-id8588 . -22) (undo-tree-id8589 . -22) (undo-tree-id8590 . -137) (undo-tree-id8591 . -137) (undo-tree-id8592 . -137) (undo-tree-id8593 . -137) (undo-tree-id8594 . -137) (undo-tree-id8595 . -137) (undo-tree-id8596 . -137) (undo-tree-id8597 . -137) (undo-tree-id8598 . -138) (undo-tree-id8599 . -138) (undo-tree-id8600 . -138) (undo-tree-id8601 . -138) (undo-tree-id8602 . -138) (undo-tree-id8603 . -138) (undo-tree-id8604 . -138) (undo-tree-id8605 . -138) (undo-tree-id8606 . -138) (undo-tree-id8607 . -138) (undo-tree-id8608 . -138) (undo-tree-id8609 . -4) (4029 . 4033) (#("
  " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4163) (undo-tree-id8610 . -3) (undo-tree-id8611 . -3) (undo-tree-id8612 . -3) (undo-tree-id8613 . -3) (undo-tree-id8614 . -3) (undo-tree-id8615 . -3) (undo-tree-id8616 . -3) (undo-tree-id8617 . -3) (undo-tree-id8618 . -3) (undo-tree-id8619 . -3) (undo-tree-id8620 . -3) (undo-tree-id8621 . -3) 4166 (4163 . 4166) 4162) nil (25758 18139 330682 90000) 0 nil])
([nil nil ((4166 . 4167) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4166) (undo-tree-id8270 . 1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (#(" " 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil keymap (keymap) face org-level-1)) . 4166) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (#("
" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -4167) (undo-tree-id8386 . 1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) 4166) nil (25758 18139 330468 433000) 0 nil])
([nil nil ((5079 . 5080)) nil (25758 18139 330213 93000) 0 nil])
([nil nil ((#("Suppose you are studying the number of active users per hour on your
" 0 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8691 . -68) (undo-tree-id8692 . -8) (undo-tree-id8693 . -10) (undo-tree-id8694 . -14) (undo-tree-id8695 . -23) (undo-tree-id8696 . -27) (undo-tree-id8697 . -27) (undo-tree-id8698 . -27) (undo-tree-id8699 . -27) (undo-tree-id8700 . -27) (undo-tree-id8701 . -27) (undo-tree-id8702 . -27) (undo-tree-id8703 . -27) (undo-tree-id8704 . -8) (undo-tree-id8705 . -69) (undo-tree-id8706 . -69) (undo-tree-id8707 . -69) (undo-tree-id8708 . -69) (undo-tree-id8709 . -69) (undo-tree-id8710 . -69) (undo-tree-id8711 . -69) (undo-tree-id8712 . -69) (undo-tree-id8713 . -7) (undo-tree-id8714 . -7) (undo-tree-id8715 . -7) (undo-tree-id8716 . -7) (undo-tree-id8717 . -7) (undo-tree-id8718 . -7) (undo-tree-id8719 . -7) (undo-tree-id8720 . -7) (undo-tree-id8721 . -8) (undo-tree-id8722 . -8) (undo-tree-id8723 . -8) (undo-tree-id8724 . -8) (undo-tree-id8725 . -8) (undo-tree-id8726 . -8) (undo-tree-id8727 . -8) (undo-tree-id8728 . -8) (undo-tree-id8729 . -8) (undo-tree-id8730 . -8) (undo-tree-id8731 . -8) (undo-tree-id8732 . -69) 4201 (t 25758 18139 348382 136000)) nil (25758 18194 842995 858000) 0 nil])
([nil nil ((#("website, or the daily temperature in your city, or your company’s financial
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8660 . -75) (undo-tree-id8661 . -8) (undo-tree-id8662 . -7) (undo-tree-id8663 . -7) (undo-tree-id8664 . -7) (undo-tree-id8665 . -7) (undo-tree-id8666 . -7) (undo-tree-id8667 . -7) (undo-tree-id8668 . -7) (undo-tree-id8669 . -7) (undo-tree-id8670 . -8) (undo-tree-id8671 . -8) (undo-tree-id8672 . -8) (undo-tree-id8673 . -8) (undo-tree-id8674 . -8) (undo-tree-id8675 . -8) (undo-tree-id8676 . -8) (undo-tree-id8677 . -8) (undo-tree-id8678 . -8) (undo-tree-id8679 . -8) (undo-tree-id8680 . -8) (undo-tree-id8681 . -8) (undo-tree-id8682 . -8) (undo-tree-id8683 . -8) (undo-tree-id8684 . -8) (undo-tree-id8685 . -8) (undo-tree-id8686 . -8) (undo-tree-id8687 . -8) (undo-tree-id8688 . -8) (undo-tree-id8689 . -8) (undo-tree-id8690 . -76) 4201) nil (25758 18195 381236 469000) 0 nil])
([nil nil ((#("health, measured quarterly using multiple metrics. In all these cases, the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8812 . -74) (undo-tree-id8813 . -8) (undo-tree-id8814 . -8) (undo-tree-id8815 . -8) (undo-tree-id8816 . -8) (undo-tree-id8817 . -8) (undo-tree-id8818 . -8) (undo-tree-id8819 . -8) (undo-tree-id8820 . -8) (undo-tree-id8821 . -8) (undo-tree-id8822 . -8) (undo-tree-id8823 . -8) (undo-tree-id8824 . -8) (undo-tree-id8825 . -8) (undo-tree-id8826 . -8) (undo-tree-id8827 . -8) (undo-tree-id8828 . -8) (undo-tree-id8829 . -8) (undo-tree-id8830 . -8) (undo-tree-id8831 . -8) (undo-tree-id8832 . -8) (undo-tree-id8833 . -8) (undo-tree-id8834 . -8) (undo-tree-id8835 . -8) (undo-tree-id8836 . -8) (undo-tree-id8837 . -8) (undo-tree-id8838 . -8) (undo-tree-id8839 . -8) (undo-tree-id8840 . -8) (undo-tree-id8841 . -8) (undo-tree-id8842 . -8) (undo-tree-id8843 . -8) (undo-tree-id8844 . -8) (undo-tree-id8845 . -8) (undo-tree-id8846 . -8) (undo-tree-id8847 . -8) (undo-tree-id8848 . -8) (undo-tree-id8849 . -8) (undo-tree-id8850 . -8) (undo-tree-id8851 . -8) (undo-tree-id8852 . -75) 4201) nil (25758 18242 348313 493000) 0 nil] [nil nil ((#("health, measured quarterly using multiple metrics. In all these cases, the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8637 . -74) (undo-tree-id8638 . -8) (undo-tree-id8639 . -8) (undo-tree-id8640 . -8) (undo-tree-id8641 . -8) (undo-tree-id8642 . -8) (undo-tree-id8643 . -8) (undo-tree-id8644 . -8) (undo-tree-id8645 . -8) (undo-tree-id8646 . -8) (undo-tree-id8647 . -8) (undo-tree-id8648 . -8) (undo-tree-id8649 . -8) (undo-tree-id8650 . -8) (undo-tree-id8651 . -8) (undo-tree-id8652 . -8) (undo-tree-id8653 . -8) (undo-tree-id8654 . -8) (undo-tree-id8655 . -8) (undo-tree-id8656 . -8) (undo-tree-id8657 . -8) (undo-tree-id8658 . -8) (undo-tree-id8659 . -75) 4201) ((4193 . 4268)) (25758 18195 4675 381000) 0 nil])
([nil nil ((#("data will be a sequence of one or more values per time step. This is called
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8778 . -75) (undo-tree-id8779 . -8) (undo-tree-id8780 . -8) (undo-tree-id8781 . -8) (undo-tree-id8782 . -8) (undo-tree-id8783 . -8) (undo-tree-id8784 . -8) (undo-tree-id8785 . -8) (undo-tree-id8786 . -8) (undo-tree-id8787 . -8) (undo-tree-id8788 . -8) (undo-tree-id8789 . -8) (undo-tree-id8790 . -5) (undo-tree-id8791 . -8) (undo-tree-id8792 . -8) (undo-tree-id8793 . -8) (undo-tree-id8794 . -8) (undo-tree-id8795 . -8) (undo-tree-id8796 . -8) (undo-tree-id8797 . -8) (undo-tree-id8798 . -8) (undo-tree-id8799 . -8) (undo-tree-id8800 . -8) (undo-tree-id8801 . -8) (undo-tree-id8802 . -8) (undo-tree-id8803 . -8) (undo-tree-id8804 . -8) (undo-tree-id8805 . -8) (undo-tree-id8806 . -8) (undo-tree-id8807 . -8) (undo-tree-id8808 . -8) (undo-tree-id8809 . -8) (undo-tree-id8810 . -8) (undo-tree-id8811 . -76) 4201) nil (25758 18242 348282 268000) 0 nil])
([nil nil ((#("data will be a sequence of one or more values per time step. This is called
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8624 . -75) (undo-tree-id8625 . -8) (undo-tree-id8626 . -8) (undo-tree-id8627 . -8) (undo-tree-id8628 . -8) (undo-tree-id8629 . -8) (undo-tree-id8630 . -8) (undo-tree-id8631 . -8) (undo-tree-id8632 . -8) (undo-tree-id8633 . -8) (undo-tree-id8634 . -8) (undo-tree-id8635 . -5) (undo-tree-id8636 . -76)) ((4193 . 4269)) (25758 18194 843206 546000) 0 nil])
([nil nil ((#("a " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8775 . -1) (undo-tree-id8776 . -2) (undo-tree-id8777 . -2)) nil (25758 18242 348060 452000) 0 nil])
([nil nil ((#("a time series. In the first two examples there is a single value per time
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4193) (undo-tree-id8622 . -73) (undo-tree-id8623 . -74)) ((4193 . 4267)) (25758 18194 842916 194000) 0 nil])
([nil nil ((4193 . 4196) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4193) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) 4194) nil (25758 18242 348057 384000) 0 nil])
nil
([nil nil ((4195 . 4196) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4195)) nil (25758 18242 348048 54000) 0 nil])
([nil nil ((4206 . 4207) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4206) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1)) nil (25758 18242 348046 978000) 0 nil])
([nil nil ((#("In the first two examples there is a single value per time" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4208) (undo-tree-id8757 . -57) (undo-tree-id8758 . -58) (undo-tree-id8759 . -58)) nil (25758 18242 348044 233000) 0 nil])
([nil nil ((4209 . 4212)) nil (25758 18242 348041 752000) 0 nil])
([nil nil ((#("step, so these are " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4212) (undo-tree-id8743 . -18) (undo-tree-id8744 . 19) (undo-tree-id8745 . -18) (undo-tree-id8746 . -18) (undo-tree-id8747 . -19) (undo-tree-id8748 . -18) (undo-tree-id8749 . -3) (undo-tree-id8750 . -4) (undo-tree-id8751 . -7) (undo-tree-id8752 . -13) (undo-tree-id8753 . -17) (undo-tree-id8754 . -18) (undo-tree-id8755 . -18) (undo-tree-id8756 . -19) 4230) nil (25758 18242 348040 26000) 0 nil])
([nil nil ((#(", while in the financial example" 0 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4234) (undo-tree-id8740 . -31) (undo-tree-id8741 . -32) (undo-tree-id8742 . -32)) nil (25758 18242 348026 708000) 0 nil])
([nil nil ((#("there are multiple values per time step (e.g., the company’s revenue, debt,
" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4235) (undo-tree-id8738 . -75) (undo-tree-id8739 . -76)) nil (25758 18242 348023 453000) 0 nil])
([nil nil ((#("and so on), so it is a " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4235) (undo-tree-id8736 . -22) (undo-tree-id8737 . -23)) nil (25758 18242 348021 106000) 0 nil])
([nil nil ((4235 . 4238)) nil (25758 18242 348018 901000) 0 nil])
([nil nil ((4212 . 4213) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4212)) nil (25758 18242 348017 798000) 0 nil])
([nil nil ((4238 . 4239) (#("m" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4238)) nil (25758 18242 348511 107000) 0 nil])
([nil nil ((4264 . 4266)) nil (25758 18253 892225 101000) 0 nil] [nil nil ((#(". A typical task is to predict" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4262) (undo-tree-id8733 . -29) (undo-tree-id8734 . -30) (undo-tree-id8735 . -30)) ((4262 . 4292)) (25758 18242 348011 743000) 0 nil])
([nil nil ((4508 . 4509) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4508) (undo-tree-id8854 . -1) (4442 . 4443) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4442) (undo-tree-id8855 . -1) (4369 . 4370) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4369) (undo-tree-id8856 . -1) (4294 . 4295) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4294) (undo-tree-id8857 . -1) 4266) nil (25758 18253 892222 581000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4507) (undo-tree-id8853 . -1) (nil fontified nil 4506 . 4507) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4506 . 4507) (4506 . 4507) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4427) (nil fontified nil 4426 . 4427) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4426 . 4427) (4426 . 4427) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4347) (nil fontified nil 4346 . 4347) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4346 . 4347) (4346 . 4347) 4508) nil (25758 18253 892213 317000) 0 nil])
([nil nil ((4339 . 4340) (t 25758 18253 907063 38000)) nil (25758 18263 783413 599000) 0 nil])
([nil nil ((4347 . 4348) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -4347) (undo-tree-id8858 . -1) 4340) nil (25758 18263 783408 741000) 0 nil])
([nil nil ((#("(or rather “postdict”)" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4397) (undo-tree-id8876 . -21) (undo-tree-id8877 . -22) 4347 (t 25758 18263 799295 67000)) nil (25758 18279 519790 30000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4396) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1)) nil (25758 18279 519786 933000) 0 nil])
([nil nil ((#("For example, Figure 15-6 shows" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4454) (undo-tree-id8861 . -29) (undo-tree-id8862 . -30) (undo-tree-id8863 . -30)) nil (25758 18279 519776 219000) 0 nil])
([nil nil ((#("3 univariate time series, each of them 50 time steps long, and the goal here
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 76 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4455) (undo-tree-id8859 . -76) (undo-tree-id8860 . -77)) nil (25758 18279 519769 704000) 0 nil])
([nil nil ((4266 . 4278) (#("*" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4266) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . -1) (undo-tree-id9361 . -1) (undo-tree-id9362 . -1) (undo-tree-id9363 . -1) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1) (undo-tree-id9377 . -1) (undo-tree-id9378 . -1) (undo-tree-id9379 . -1) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1) (undo-tree-id9383 . -1) (undo-tree-id9384 . -1) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) (undo-tree-id9387 . -1) (undo-tree-id9388 . -1) (undo-tree-id9389 . -1) (undo-tree-id9390 . -1) (undo-tree-id9391 . -1) (undo-tree-id9392 . -1) (undo-tree-id9393 . -1) (undo-tree-id9394 . -1) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) (undo-tree-id9400 . -1) (undo-tree-id9401 . -1) (undo-tree-id9402 . -1) (#(" " 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t keymap (keymap) face org-level-1)) . -4267) (undo-tree-id9403 . -1) (undo-tree-id9404 . -1) (undo-tree-id9405 . -1) (undo-tree-id9406 . -1) (undo-tree-id9407 . -1) (undo-tree-id9408 . -1) (undo-tree-id9409 . -1) (undo-tree-id9410 . -1) (undo-tree-id9411 . -1) (undo-tree-id9412 . -1) (undo-tree-id9413 . -1) (undo-tree-id9414 . -1) (undo-tree-id9415 . -1) (undo-tree-id9416 . -1) (undo-tree-id9417 . -1) (undo-tree-id9418 . -1) (undo-tree-id9419 . -1) (undo-tree-id9420 . -1) (undo-tree-id9421 . -1) (undo-tree-id9422 . -1) (undo-tree-id9423 . -1) (undo-tree-id9424 . -1) (undo-tree-id9425 . -1) (undo-tree-id9426 . -1) (undo-tree-id9427 . -1) (undo-tree-id9428 . -1) (undo-tree-id9429 . -1) (#("F" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t face org-level-1)) . -4268) (undo-tree-id9430 . -1) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -1) (undo-tree-id9436 . -1) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -1) 4269 (4266 . 4269) (t 25758 18279 583665 462000)) nil (25758 18344 74181 419000) 0 nil])
([nil nil ((4267 . 4268) (#("f" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4267)) nil (25758 18344 74135 793000) 0 nil])
([nil nil ((4278 . 4279)) nil (25758 18344 74134 944000) 0 nil])
([nil nil ((4277 . 4280) (#("*" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4277) (undo-tree-id9143 . -1) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) (undo-tree-id9148 . -1) (undo-tree-id9149 . -1) (undo-tree-id9150 . -1) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -1) (undo-tree-id9160 . -1) (undo-tree-id9161 . -1) (undo-tree-id9162 . -1) (undo-tree-id9163 . -1) (undo-tree-id9164 . -1) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (undo-tree-id9175 . -1) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . -1) (undo-tree-id9192 . -1) (undo-tree-id9193 . -1) (undo-tree-id9194 . -1) (undo-tree-id9195 . -1) (undo-tree-id9196 . -1) (undo-tree-id9197 . -1) (undo-tree-id9198 . -1) (undo-tree-id9199 . -1) (undo-tree-id9200 . -1) (undo-tree-id9201 . -1) (undo-tree-id9202 . -1) (undo-tree-id9203 . -1) (undo-tree-id9204 . -1) (undo-tree-id9205 . -1) (undo-tree-id9206 . -1) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) (undo-tree-id9209 . -1) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -1) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) (undo-tree-id9219 . -1) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) (undo-tree-id9222 . -1) (undo-tree-id9223 . -1) (undo-tree-id9224 . -1) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) (undo-tree-id9239 . -1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (undo-tree-id9242 . -1) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (undo-tree-id9246 . -1) (undo-tree-id9247 . -1) (undo-tree-id9248 . -1) (undo-tree-id9249 . -1) (undo-tree-id9250 . -1) (undo-tree-id9251 . -1) (undo-tree-id9252 . -1) (undo-tree-id9253 . -1) (undo-tree-id9254 . -1) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4278) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) (undo-tree-id9299 . -1) (undo-tree-id9300 . -1) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (undo-tree-id9303 . -1) (undo-tree-id9304 . -1) (undo-tree-id9305 . -1) (undo-tree-id9306 . -1) (undo-tree-id9307 . -1) (undo-tree-id9308 . -1) (undo-tree-id9309 . -1) (undo-tree-id9310 . -1) (undo-tree-id9311 . -1) (undo-tree-id9312 . -1) (undo-tree-id9313 . -1) (undo-tree-id9314 . -1) (undo-tree-id9315 . -1) (undo-tree-id9316 . -1) (undo-tree-id9317 . -1) 4279 (4278 . 4279) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4278) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (undo-tree-id9323 . -1) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (undo-tree-id9328 . -1) (undo-tree-id9329 . -1) (undo-tree-id9330 . -1) (undo-tree-id9331 . -1) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) 4279) nil (25758 18344 74127 421000) 0 nil])
([nil nil ((#("A typical task is to" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4280) (undo-tree-id9040 . -19) (undo-tree-id9041 . 20) (undo-tree-id9042 . -19) (undo-tree-id9043 . -19) (undo-tree-id9044 . -20) (undo-tree-id9045 . -19) (undo-tree-id9046 . -8) (undo-tree-id9047 . -8) (undo-tree-id9048 . -8) (undo-tree-id9049 . -8) (undo-tree-id9050 . -8) (undo-tree-id9051 . -8) (undo-tree-id9052 . -8) (undo-tree-id9053 . -8) (undo-tree-id9054 . -8) (undo-tree-id9055 . -8) (undo-tree-id9056 . -8) (undo-tree-id9057 . -8) (undo-tree-id9058 . -8) (undo-tree-id9059 . -8) (undo-tree-id9060 . -8) (undo-tree-id9061 . -8) (undo-tree-id9062 . -8) (undo-tree-id9063 . -8) (undo-tree-id9064 . -8) (undo-tree-id9065 . -8) (undo-tree-id9066 . -8) (undo-tree-id9067 . -8) (undo-tree-id9068 . -13) (undo-tree-id9069 . -13) (undo-tree-id9070 . -13) (undo-tree-id9071 . -13) (undo-tree-id9072 . -13) (undo-tree-id9073 . -13) (undo-tree-id9074 . -13) (undo-tree-id9075 . -13) (undo-tree-id9076 . -13) (undo-tree-id9077 . -13) (undo-tree-id9078 . -13) (undo-tree-id9079 . -13) (undo-tree-id9080 . -13) (undo-tree-id9081 . -13) (undo-tree-id9082 . -13) (undo-tree-id9083 . -13) (undo-tree-id9084 . -13) (undo-tree-id9085 . -13) (undo-tree-id9086 . -13) (undo-tree-id9087 . -13) (undo-tree-id9088 . -13) (undo-tree-id9089 . -13) (undo-tree-id9090 . -16) (undo-tree-id9091 . -16) (undo-tree-id9092 . -16) (undo-tree-id9093 . -16) (undo-tree-id9094 . -16) (undo-tree-id9095 . -16) (undo-tree-id9096 . -16) (undo-tree-id9097 . -16) (undo-tree-id9098 . -16) (undo-tree-id9099 . -16) (undo-tree-id9100 . -16) (undo-tree-id9101 . -16) (undo-tree-id9102 . -16) (undo-tree-id9103 . -16) (undo-tree-id9104 . -16) (undo-tree-id9105 . -16) (undo-tree-id9106 . -16) (undo-tree-id9107 . -16) (undo-tree-id9108 . -16) (undo-tree-id9109 . -16) (undo-tree-id9110 . -16) (undo-tree-id9111 . -16) (undo-tree-id9112 . -19) (undo-tree-id9113 . -19) (undo-tree-id9114 . -19) (undo-tree-id9115 . -19) (undo-tree-id9116 . -19) (undo-tree-id9117 . -19) (undo-tree-id9118 . -19) (undo-tree-id9119 . -19) (undo-tree-id9120 . -19) (undo-tree-id9121 . -19) (undo-tree-id9122 . -19) (undo-tree-id9123 . -19) (undo-tree-id9124 . -19) (undo-tree-id9125 . -19) (undo-tree-id9126 . -19) (undo-tree-id9127 . -19) (undo-tree-id9128 . -19) (undo-tree-id9129 . -19) (undo-tree-id9130 . -19) (undo-tree-id9131 . -19) (undo-tree-id9132 . -19) (undo-tree-id9133 . -19) (undo-tree-id9134 . -19) (undo-tree-id9135 . -19) (undo-tree-id9136 . -19) (undo-tree-id9137 . -19) (undo-tree-id9138 . -19) (undo-tree-id9139 . -19) (undo-tree-id9140 . -19) (undo-tree-id9141 . -19) (undo-tree-id9142 . -20) 4299) nil (25758 18344 73903 628000) 0 nil])
([nil nil ((4265 . 4266)) nil (25758 18344 73842 62000) 0 nil])
([nil nil ((#("t
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4265) (undo-tree-id8913 . -1) (undo-tree-id8914 . 1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -2) (undo-tree-id8917 . -2) (undo-tree-id8918 . -2) (undo-tree-id8919 . -2) (undo-tree-id8920 . -2) (undo-tree-id8921 . -2) (undo-tree-id8922 . -2) (undo-tree-id8923 . -2) (undo-tree-id8924 . -2) (undo-tree-id8925 . -2) (undo-tree-id8926 . -2) (undo-tree-id8927 . -2) (undo-tree-id8928 . -2) (undo-tree-id8929 . -2) (undo-tree-id8930 . -2) (undo-tree-id8931 . -2) (undo-tree-id8932 . -2) (undo-tree-id8933 . -2) (undo-tree-id8934 . -2) (undo-tree-id8935 . -2) (undo-tree-id8936 . -2) (undo-tree-id8937 . -2) (undo-tree-id8938 . -2) (undo-tree-id8939 . -2) (undo-tree-id8940 . -2) (undo-tree-id8941 . -2) (undo-tree-id8942 . -2) (undo-tree-id8943 . -2) (undo-tree-id8944 . -2) (undo-tree-id8945 . -2) (undo-tree-id8946 . -2) (undo-tree-id8947 . -2) (undo-tree-id8948 . -2) (undo-tree-id8949 . -2) (undo-tree-id8950 . -2) (undo-tree-id8951 . -2) (undo-tree-id8952 . -2) (undo-tree-id8953 . -2) (undo-tree-id8954 . -2) (undo-tree-id8955 . -2) (undo-tree-id8956 . -2) (undo-tree-id8957 . -2) (undo-tree-id8958 . -2) (undo-tree-id8959 . -2) (undo-tree-id8960 . -2) (undo-tree-id8961 . -2) (undo-tree-id8962 . -2) (undo-tree-id8963 . -2) (undo-tree-id8964 . -2) (undo-tree-id8965 . -2) (undo-tree-id8966 . -2) (undo-tree-id8967 . -2) (undo-tree-id8968 . -2) (undo-tree-id8969 . -2) (undo-tree-id8970 . -2) (undo-tree-id8971 . -2) (undo-tree-id8972 . -2) (undo-tree-id8973 . -2) (undo-tree-id8974 . -2) (undo-tree-id8975 . -2) (undo-tree-id8976 . -2) (undo-tree-id8977 . -2) (undo-tree-id8978 . -2) (undo-tree-id8979 . -2) (undo-tree-id8980 . -2) (undo-tree-id8981 . -2) (undo-tree-id8982 . -2) (undo-tree-id8983 . -2) (undo-tree-id8984 . -2) (undo-tree-id8985 . -2) (undo-tree-id8986 . -2) (undo-tree-id8987 . -2) (undo-tree-id8988 . -2) (undo-tree-id8989 . -2) (undo-tree-id8990 . -2) (undo-tree-id8991 . -2) (undo-tree-id8992 . -2) (undo-tree-id8993 . -2) (undo-tree-id8994 . -2) (undo-tree-id8995 . -2) (undo-tree-id8996 . -2) (undo-tree-id8997 . -2) (undo-tree-id8998 . -2) (undo-tree-id8999 . -2) (undo-tree-id9000 . -2) (undo-tree-id9001 . -1) (undo-tree-id9002 . -1) (undo-tree-id9003 . -1) (undo-tree-id9004 . -1) (undo-tree-id9005 . -1) (undo-tree-id9006 . -1) (undo-tree-id9007 . -1) (undo-tree-id9008 . -1) (undo-tree-id9009 . -1) (undo-tree-id9010 . -1) (undo-tree-id9011 . -1) (undo-tree-id9012 . -1) (undo-tree-id9013 . -1) (undo-tree-id9014 . -1) (undo-tree-id9015 . -1) (undo-tree-id9016 . -1) (undo-tree-id9017 . -1) (undo-tree-id9018 . -1) (undo-tree-id9019 . -1) (undo-tree-id9020 . -1) (undo-tree-id9021 . -1) (undo-tree-id9022 . -1) (undo-tree-id9023 . -1) (undo-tree-id9024 . -1) (undo-tree-id9025 . -1) (undo-tree-id9026 . -1) (undo-tree-id9027 . -1) (undo-tree-id9028 . -1) (undo-tree-id9029 . -1) (undo-tree-id9030 . -1) (undo-tree-id9031 . -1) (undo-tree-id9032 . -1) (undo-tree-id9033 . -1) (undo-tree-id9034 . -1) (undo-tree-id9035 . -1) (undo-tree-id9036 . -1) (undo-tree-id9037 . -1) (undo-tree-id9038 . -1) (undo-tree-id9039 . -2)) nil (25758 18344 73836 10000) 0 nil])
([nil nil ((4264 . 4265) 4235) nil (25758 18344 73382 683000) 0 nil])
([nil nil ((4280 . 4282)) nil (25758 18344 73381 864000) 0 nil])
([nil nil ((#(", which is called forecasting. " 0 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4304) (undo-tree-id8909 . -30) (undo-tree-id8910 . -31) (undo-tree-id8911 . -31) (undo-tree-id8912 . -31)) nil (25758 18344 73380 813000) 0 nil])
([nil nil ((4304 . 4305)) nil (25758 18344 73376 904000) 0 nil])
([nil nil ((4309 . 4319) (4306 . 4309)) nil (25758 18344 73376 208000) 0 nil])
([nil nil ((#("*" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 4317) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1)) nil (25758 18344 73374 548000) 0 nil])
([nil nil ((4317 . 4318) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4317) (undo-tree-id8878 . -1) (4317 . 4318) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4317) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1)) nil (25758 18344 73359 704000) 0 nil])
([nil nil ((4318 . 4320)) nil (25758 18344 73339 240000) 0 nil])
([nil nil ((4320 . 4321) (#("Another common task is t" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4320) (undo-tree-id9450 . -23) (undo-tree-id9451 . 24) (undo-tree-id9452 . -23) (undo-tree-id9453 . -23) (undo-tree-id9454 . -24) (undo-tree-id9455 . -23) (undo-tree-id9456 . -6) (undo-tree-id9457 . -6) (undo-tree-id9458 . -6) (undo-tree-id9459 . -6) (undo-tree-id9460 . -6) (undo-tree-id9461 . -6) (undo-tree-id9462 . -6) (undo-tree-id9463 . -6) (undo-tree-id9464 . -13) (undo-tree-id9465 . -13) (undo-tree-id9466 . -13) (undo-tree-id9467 . -13) (undo-tree-id9468 . -13) (undo-tree-id9469 . -13) (undo-tree-id9470 . -13) (undo-tree-id9471 . -13) (undo-tree-id9472 . -18) (undo-tree-id9473 . -18) (undo-tree-id9474 . -18) (undo-tree-id9475 . -18) (undo-tree-id9476 . -18) (undo-tree-id9477 . -18) (undo-tree-id9478 . -18) (undo-tree-id9479 . -18) (undo-tree-id9480 . -21) (undo-tree-id9481 . -21) (undo-tree-id9482 . -21) (undo-tree-id9483 . -21) (undo-tree-id9484 . -21) (undo-tree-id9485 . -21) (undo-tree-id9486 . -21) (undo-tree-id9487 . -21) (undo-tree-id9488 . -24) (undo-tree-id9489 . -24) (undo-tree-id9490 . -24) (undo-tree-id9491 . -24) (undo-tree-id9492 . -24) (undo-tree-id9493 . -24) (undo-tree-id9494 . -24) (undo-tree-id9495 . -24) (undo-tree-id9496 . -23) (undo-tree-id9497 . -23) (undo-tree-id9498 . -23) (undo-tree-id9499 . -23) (undo-tree-id9500 . -23) (undo-tree-id9501 . -23) (undo-tree-id9502 . -23) (undo-tree-id9503 . -23) (undo-tree-id9504 . -23) (undo-tree-id9505 . -24) (undo-tree-id9506 . -24) (undo-tree-id9507 . -24) 4343 (t 25758 18344 89181 24000)) nil (25758 18370 315671 135000) 0 nil])
([nil nil ((4341 . 4344) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4341) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1)) nil (25758 18370 315491 38000) 0 nil])
([nil nil ((4363 . 4364) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -4363) (undo-tree-id9446 . -1) 4345) nil (25758 18370 315487 712000) 0 nil])
([nil nil ((4380 . 4381) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -4380) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4379 . 4380) (4379 . 4380) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4412) (undo-tree-id9445 . -1) 4363) nil (25758 18370 315484 898000) 0 nil])
([nil nil ((#(". This is called imputation." 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4385) (undo-tree-id9440 . -27) (undo-tree-id9441 . -28) (undo-tree-id9442 . -28) (undo-tree-id9443 . -28) (undo-tree-id9444 . -28)) nil (25758 18370 315479 524000) 0 nil])
([nil nil ((4388 . 4391) (4386 . 4388) (t 25758 18370 377799 505000) 4386) nil (25758 18470 525713 710000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6269 . 6270) (nil fontified nil 6236 . 6270) (nil fontified nil 6157 . 6236) (nil fontified nil 6083 . 6157) (nil fontified nil 6010 . 6083) (nil fontified nil 5933 . 6010) (nil fontified nil 5873 . 5933) (nil fontified nil 5803 . 5873) (nil fontified nil 5741 . 5803) (nil fontified nil 5691 . 5741) (nil fontified nil 5678 . 5691) (nil fontified nil 5668 . 5678) (nil fontified nil 5591 . 5668) (nil fontified nil 5565 . 5591) (nil fontified nil 5482 . 5565) (nil fontified nil 5394 . 5482) (nil fontified nil 5310 . 5394) (nil fontified nil 5261 . 5310) (nil fontified nil 5189 . 5261) (nil fontified nil 5114 . 5189) (nil fontified nil 5040 . 5114) (nil fontified nil 4972 . 5040) (nil fontified nil 4908 . 4972) (nil fontified nil 4858 . 4908) (nil fontified nil 4852 . 4858) (nil fontified nil 4848 . 4852) (nil fontified nil 4788 . 4848) (nil fontified nil 4781 . 4788) (nil fontified nil 4715 . 4781) (nil fontified nil 4708 . 4715) (nil fontified nil 4645 . 4708) (nil fontified nil 4611 . 4645) (nil fontified nil 4543 . 4611) (nil fontified nil 4496 . 4543) (nil fontified nil 4451 . 4496) (nil fontified nil 4391 . 4451) (4391 . 6270)) nil (25758 18470 525711 637000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4389) (undo-tree-id9821 . -1) (undo-tree-id9822 . -1) (undo-tree-id9823 . -1) (undo-tree-id9824 . -1) (undo-tree-id9825 . -1) (undo-tree-id9826 . -1) (undo-tree-id9827 . -1) (undo-tree-id9828 . -1) (undo-tree-id9829 . -1) (undo-tree-id9830 . -1)) nil (25758 18470 525705 595000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4389) (undo-tree-id9791 . -1) (undo-tree-id9792 . -1) (undo-tree-id9793 . -1) (undo-tree-id9794 . -1) (undo-tree-id9795 . -1) (undo-tree-id9796 . -1) (undo-tree-id9797 . -1) (undo-tree-id9798 . -1) (undo-tree-id9799 . -1) (undo-tree-id9800 . -1) (undo-tree-id9801 . -1) (undo-tree-id9802 . -1) (undo-tree-id9803 . -1) (undo-tree-id9804 . -1) (undo-tree-id9805 . -1) (undo-tree-id9806 . -1) (undo-tree-id9807 . -1) (undo-tree-id9808 . -1) (undo-tree-id9809 . -1) (undo-tree-id9810 . -1) (undo-tree-id9811 . -1) (undo-tree-id9812 . -1) (undo-tree-id9813 . -1) (undo-tree-id9814 . -1) (undo-tree-id9815 . -1) (undo-tree-id9816 . -1) (undo-tree-id9817 . -1) (undo-tree-id9818 . -1) (undo-tree-id9819 . -1) (undo-tree-id9820 . -1)) nil (25758 18470 525697 354000) 0 nil])
([nil nil ((4464 . 4466) (4461 . 4464) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4461 4466 nil nil nil t #s(yas--exit 4484 nil))) #s(yas--exit 4484 nil) 0 nil #s(yas--field 1 4461 4466 nil nil nil t #s(yas--exit 4484 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4479) (undo-tree-id9739 . -2) (4449 . 4492) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4449) (undo-tree-id9740 . -1) (undo-tree-id9741 . -2) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -1) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (undo-tree-id9759 . -1) (undo-tree-id9760 . -1) (undo-tree-id9761 . -1) (undo-tree-id9762 . -1) (undo-tree-id9763 . -1) (undo-tree-id9764 . -1) (undo-tree-id9765 . -1) (undo-tree-id9766 . -1) (undo-tree-id9767 . -1) (undo-tree-id9768 . -1) (undo-tree-id9769 . -1) (undo-tree-id9770 . -1) (undo-tree-id9771 . -1) (undo-tree-id9772 . -1) (undo-tree-id9773 . -1) (undo-tree-id9774 . -1) (undo-tree-id9775 . -1) (undo-tree-id9776 . -1) (undo-tree-id9777 . -1) (undo-tree-id9778 . -1) (undo-tree-id9779 . -1) (undo-tree-id9780 . -2) (undo-tree-id9781 . -2) (undo-tree-id9782 . -2) (undo-tree-id9783 . -2) (undo-tree-id9784 . -2) (undo-tree-id9785 . -2) (undo-tree-id9786 . -2) (undo-tree-id9787 . -2) (undo-tree-id9788 . -2) (undo-tree-id9789 . -2) (undo-tree-id9790 . -2) 4451 (4449 . 4451) (4448 . 4449) 4389) nil (25758 18470 525676 703000) 0 nil])
([nil nil ((apply yas--snippet-revive 4449 4495 #s(yas--snippet nil (#s(yas--field 1 4461 4466 nil nil nil t #s(yas--exit 4484 nil))) #s(yas--exit 4484 nil) 0 nil #s(yas--field 1 4461 4466 nil nil nil t #s(yas--exit 4484 nil)) nil nil))) nil (25758 18470 525643 800000) 0 nil])
([nil nil ((4464 . 4465)) nil (25758 18470 525642 979000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4485) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1)) nil (25758 18470 525641 540000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4485) (undo-tree-id9721 . -1)) nil (25758 18470 525631 260000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 4485) (undo-tree-id9701 . -9) (undo-tree-id9702 . -9) (undo-tree-id9703 . -9) (undo-tree-id9704 . -9) (undo-tree-id9705 . -9) (undo-tree-id9706 . -9) (undo-tree-id9707 . -9) (undo-tree-id9708 . -9) (undo-tree-id9709 . -9) (undo-tree-id9710 . -9) (undo-tree-id9711 . -8) (undo-tree-id9712 . -8) (undo-tree-id9713 . -8) (undo-tree-id9714 . -8) (undo-tree-id9715 . -8) (undo-tree-id9716 . -8) (undo-tree-id9717 . -8) (undo-tree-id9718 . -8) (undo-tree-id9719 . -9) (undo-tree-id9720 . -10)) nil (25758 18470 525629 243000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4891 . 4892) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4901) (4891 . 4902) 4886) nil (25758 18470 525605 95000) 0 nil])
([nil nil ((#("generate_time_series() function, shown here:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 9 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 14 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 22 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 4485) (undo-tree-id9683 . -44) (undo-tree-id9684 . -45) (undo-tree-id9685 . -45) (undo-tree-id9686 . -45) (undo-tree-id9687 . -45) (undo-tree-id9688 . -45) (undo-tree-id9689 . -45) (undo-tree-id9690 . -45) (undo-tree-id9691 . -45) (undo-tree-id9692 . -45) (undo-tree-id9693 . -45) (undo-tree-id9694 . -45) (undo-tree-id9695 . -45) (undo-tree-id9696 . -45) (undo-tree-id9697 . -45) (undo-tree-id9698 . -45) (undo-tree-id9699 . -45) (undo-tree-id9700 . -45)) nil (25758 18470 525603 67000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4484) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) (undo-tree-id9518 . -1) (undo-tree-id9519 . -1) (undo-tree-id9520 . -1) (undo-tree-id9521 . -1) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) (undo-tree-id9530 . -1) (undo-tree-id9531 . -1) (undo-tree-id9532 . -1) (undo-tree-id9533 . -1) (undo-tree-id9534 . -1) (undo-tree-id9535 . -1) (undo-tree-id9536 . -1) (undo-tree-id9537 . -1) (undo-tree-id9538 . -1) (undo-tree-id9539 . -1) (undo-tree-id9540 . -1) (undo-tree-id9541 . -1) (undo-tree-id9542 . -1) (undo-tree-id9543 . -1) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) (undo-tree-id9549 . -1) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (undo-tree-id9561 . -1) (undo-tree-id9562 . -1) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -1) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (undo-tree-id9590 . -1) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (undo-tree-id9605 . -1) (undo-tree-id9606 . -1) (undo-tree-id9607 . -1) (undo-tree-id9608 . -1) (undo-tree-id9609 . -1) (undo-tree-id9610 . -1) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) (undo-tree-id9614 . -1) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -1) (undo-tree-id9618 . -1) (undo-tree-id9619 . -1) (undo-tree-id9620 . -1) (undo-tree-id9621 . -1) (undo-tree-id9622 . -1) (undo-tree-id9623 . -1) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) (undo-tree-id9640 . -1) (undo-tree-id9641 . -1) (undo-tree-id9642 . -1) (undo-tree-id9643 . -1) (undo-tree-id9644 . -1) (undo-tree-id9645 . -1) (undo-tree-id9646 . -1) (undo-tree-id9647 . -1) (undo-tree-id9648 . -1) (undo-tree-id9649 . -1) (undo-tree-id9650 . -1) (undo-tree-id9651 . -1) (undo-tree-id9652 . -1) (undo-tree-id9653 . -1) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (undo-tree-id9661 . -1) (undo-tree-id9662 . -1) (undo-tree-id9663 . -1) (undo-tree-id9664 . -1) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) (undo-tree-id9671 . -1) (undo-tree-id9672 . -1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1) (undo-tree-id9675 . -1) (undo-tree-id9676 . -1) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1) (undo-tree-id9679 . -1) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) (undo-tree-id9682 . -1)) nil (25758 18470 525585 365000) 0 nil])
([nil nil ((4875 . 4876) (4874 . 4875) (4873 . 4874) (4872 . 4873) (4867 . 4868) (4866 . 4867) (4865 . 4866) (4864 . 4865) (4803 . 4804) (4802 . 4803) (4801 . 4802) (4800 . 4801) (4792 . 4793) (4791 . 4792) (4790 . 4791) (4789 . 4790) (4722 . 4723) (4721 . 4722) (4720 . 4721) (4719 . 4720) (4711 . 4712) (4710 . 4711) (4709 . 4710) (4708 . 4709) (4644 . 4645) (4643 . 4644) (4642 . 4643) (4641 . 4642) (4606 . 4607) (4605 . 4606) (4604 . 4605) (4603 . 4604) (4531 . 4535)) nil (25758 18470 525248 232000) 0 nil])
([nil nil ((6304 . 6305)) nil (25758 18470 525240 260000) 0 nil])
([nil nil ((#("    wave 1
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 4 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4708) (undo-tree-id9908 . -10) (undo-tree-id9909 . -9) (undo-tree-id9910 . -9) (undo-tree-id9911 . -9) (undo-tree-id9912 . -9) (undo-tree-id9913 . -9) (undo-tree-id9914 . -9) (undo-tree-id9915 . -9) (undo-tree-id9916 . -9) (undo-tree-id9917 . -9) (undo-tree-id9918 . -9) (undo-tree-id9919 . -9) (undo-tree-id9920 . -9) (undo-tree-id9921 . -9) (undo-tree-id9922 . -9) (undo-tree-id9923 . -9) (undo-tree-id9924 . -9) (undo-tree-id9925 . -9) (undo-tree-id9926 . -9) (undo-tree-id9927 . -9) (undo-tree-id9928 . -11) 4717 (t 25758 18470 544159 912000)) nil (25758 18485 33396 951000) 0 nil])
([nil nil ((#("    wave 2
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 4 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4778) (undo-tree-id9887 . -10) (undo-tree-id9888 . -9) (undo-tree-id9889 . -9) (undo-tree-id9890 . -9) (undo-tree-id9891 . -9) (undo-tree-id9892 . -9) (undo-tree-id9893 . -9) (undo-tree-id9894 . -9) (undo-tree-id9895 . -9) (undo-tree-id9896 . -9) (undo-tree-id9897 . -9) (undo-tree-id9898 . -9) (undo-tree-id9899 . -9) (undo-tree-id9900 . -9) (undo-tree-id9901 . -9) (undo-tree-id9902 . -9) (undo-tree-id9903 . -9) (undo-tree-id9904 . -9) (undo-tree-id9905 . -9) (undo-tree-id9906 . -9) (undo-tree-id9907 . -11) 4787) nil (25758 18485 33325 570000) 0 nil])
([nil nil ((#("#" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) . 4706) (undo-tree-id9885 . -1) (undo-tree-id9886 . -1)) nil (25758 18485 33194 95000) 0 nil])
([nil nil ((#("#" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) . 4773) (undo-tree-id9883 . -1) (undo-tree-id9884 . -1)) nil (25758 18485 33191 139000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4773) (undo-tree-id9881 . -1) (undo-tree-id9882 . -1)) nil (25758 18485 33187 230000) 0 nil])
([nil nil ((#("+" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4773) (undo-tree-id9878 . -1) (undo-tree-id9879 . -1) (undo-tree-id9880 . -1)) nil (25758 18485 33149 413000) 0 nil])
([nil nil ((#("    # +
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 4 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 7 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 4838) (undo-tree-id9857 . -7) (undo-tree-id9858 . -4) (undo-tree-id9859 . -4) (undo-tree-id9860 . -4) (undo-tree-id9861 . -4) (undo-tree-id9862 . -4) (undo-tree-id9863 . -4) (undo-tree-id9864 . -4) (undo-tree-id9865 . -4) (undo-tree-id9866 . -4) (undo-tree-id9867 . -4) (undo-tree-id9868 . -4) (undo-tree-id9869 . -4) (undo-tree-id9870 . -4) (undo-tree-id9871 . -4) (undo-tree-id9872 . -4) (undo-tree-id9873 . -4) (undo-tree-id9874 . -4) (undo-tree-id9875 . -4) (undo-tree-id9876 . -4) (undo-tree-id9877 . -8) 4842) nil (25758 18485 33143 345000) 0 nil])
([nil nil ((#("    noise
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 4 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4838) (undo-tree-id9831 . -9) (undo-tree-id9832 . -5) (undo-tree-id9833 . 5) (undo-tree-id9834 . -4) (undo-tree-id9835 . -9) (undo-tree-id9836 . -4) (undo-tree-id9837 . -4) (undo-tree-id9838 . -4) (undo-tree-id9839 . -4) (undo-tree-id9840 . -4) (undo-tree-id9841 . -4) (undo-tree-id9842 . -4) (undo-tree-id9843 . -4) (undo-tree-id9844 . -4) (undo-tree-id9845 . -4) (undo-tree-id9846 . -4) (undo-tree-id9847 . -4) (undo-tree-id9848 . -4) (undo-tree-id9849 . -4) (undo-tree-id9850 . -4) (undo-tree-id9851 . -4) (undo-tree-id9852 . -4) (undo-tree-id9853 . -4) (undo-tree-id9854 . -4) (undo-tree-id9855 . -4) (undo-tree-id9856 . -10) 4842) nil (25758 18485 33118 754000) 0 nil])
([nil nil ((#("return series[..., np.newaxis].astype(np.float32)
" 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4848) (undo-tree-id9929 . -49) (undo-tree-id9930 . -50) (t 25758 18485 100503 395000)) nil (25758 18519 45805 450000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4837 . 4838) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4887) (4837 . 4888) 4774) nil (25758 18519 45794 96000) 0 nil])
([nil nil ((4838 . 4842)) nil (25758 18519 45788 420000) 0 nil])
([nil nil ((#("as requested (via the" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4944) (undo-tree-id10342 . -20) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (undo-tree-id10347 . -1) (undo-tree-id10348 . -1) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) (undo-tree-id10351 . -21) (undo-tree-id10352 . -21) (t 25758 18519 109306 312000)) nil (25758 18562 697999 99000) 0 nil])
([nil nil ((#("batch_size argument)" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 6 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 10 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4945) (undo-tree-id10340 . -19) (undo-tree-id10341 . -20)) nil (25758 18562 697991 667000) 0 nil])
([nil nil ((#(", " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4945) (undo-tree-id10338 . -1) (undo-tree-id10339 . -2)) nil (25758 18562 697989 889000) 0 nil])
([nil nil ((#("each of length n_steps, and there is just one
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 17 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 22 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4945) (undo-tree-id10336 . -45) (undo-tree-id10337 . -46)) nil (25758 18562 697987 937000) 0 nil])
([nil nil ((#("value per time step in each series (i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4945) (undo-tree-id10334 . -36) (undo-tree-id10335 . -37)) nil (25758 18562 697985 979000) 0 nil])
([nil nil ((#(".e., all series are univariate). The
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4945) (undo-tree-id10332 . -36) (undo-tree-id10333 . -37)) nil (25758 18562 697983 724000) 0 nil])
([nil nil ((#("function" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4945) (undo-tree-id10315 . -7) (undo-tree-id10316 . -7) (undo-tree-id10317 . -7) (undo-tree-id10318 . -8) (undo-tree-id10319 . -7) (undo-tree-id10320 . -7) (undo-tree-id10321 . -7) (undo-tree-id10322 . -7) (undo-tree-id10323 . -7) (undo-tree-id10324 . -7) (undo-tree-id10325 . -7) (undo-tree-id10326 . -7) (undo-tree-id10327 . -7) (undo-tree-id10328 . -7) (undo-tree-id10329 . -8) (undo-tree-id10330 . -8) (undo-tree-id10331 . -8) 4952) nil (25758 18562 697980 982000) 0 nil])
([nil nil ((4952 . 4955) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4952) (undo-tree-id10312 . -1) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1)) nil (25758 18562 697968 272000) 0 nil])
([nil nil ((4943 . 4944) (#("  " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4943) (undo-tree-id9933 . -1) (undo-tree-id9934 . -1) (undo-tree-id9935 . 1) (undo-tree-id9936 . -1) (undo-tree-id9937 . -1) (undo-tree-id9938 . -1) (undo-tree-id9939 . -1) (undo-tree-id9940 . -1) (undo-tree-id9941 . -1) (undo-tree-id9942 . -1) (undo-tree-id9943 . -1) (undo-tree-id9944 . -1) (undo-tree-id9945 . -1) (undo-tree-id9946 . -1) (undo-tree-id9947 . -1) (undo-tree-id9948 . -1) (undo-tree-id9949 . -1) (undo-tree-id9950 . -1) (undo-tree-id9951 . -1) (undo-tree-id9952 . -1) (undo-tree-id9953 . -1) (undo-tree-id9954 . -1) (undo-tree-id9955 . -1) (undo-tree-id9956 . -1) (undo-tree-id9957 . -1) (undo-tree-id9958 . -1) (undo-tree-id9959 . -1) (undo-tree-id9960 . -1) (undo-tree-id9961 . -1) (undo-tree-id9962 . -1) (undo-tree-id9963 . -1) (undo-tree-id9964 . -1) (undo-tree-id9965 . -1) (undo-tree-id9966 . -1) (undo-tree-id9967 . -1) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) (undo-tree-id9970 . -1) (undo-tree-id9971 . -1) (undo-tree-id9972 . -1) (undo-tree-id9973 . -1) (undo-tree-id9974 . -1) (undo-tree-id9975 . -1) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1) (undo-tree-id9978 . -1) (undo-tree-id9979 . -1) (undo-tree-id9980 . -1) (undo-tree-id9981 . -1) (undo-tree-id9982 . -1) (undo-tree-id9983 . -1) (undo-tree-id9984 . -1) (undo-tree-id9985 . -1) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) (undo-tree-id9990 . -1) (undo-tree-id9991 . -1) (undo-tree-id9992 . -1) (undo-tree-id9993 . -1) (undo-tree-id9994 . -1) (undo-tree-id9995 . -1) (undo-tree-id9996 . -1) (undo-tree-id9997 . -1) (undo-tree-id9998 . -1) (undo-tree-id9999 . -1) (undo-tree-id10000 . -1) (undo-tree-id10001 . -1) (undo-tree-id10002 . -1) (undo-tree-id10003 . -1) (undo-tree-id10004 . -1) (undo-tree-id10005 . -1) (undo-tree-id10006 . -1) (undo-tree-id10007 . -1) (undo-tree-id10008 . -1) (undo-tree-id10009 . -1) (undo-tree-id10010 . -1) (undo-tree-id10011 . -1) (undo-tree-id10012 . -1) (undo-tree-id10013 . -1) (undo-tree-id10014 . -1) (undo-tree-id10015 . -1) (undo-tree-id10016 . -1) (undo-tree-id10017 . -1) (undo-tree-id10018 . -1) (undo-tree-id10019 . -1) (undo-tree-id10020 . -1) (undo-tree-id10021 . -1) (undo-tree-id10022 . -1) (undo-tree-id10023 . -1) (undo-tree-id10024 . -1) (undo-tree-id10025 . -1) (undo-tree-id10026 . -1) (undo-tree-id10027 . -1) (undo-tree-id10028 . -1) (undo-tree-id10029 . -1) (undo-tree-id10030 . -1) (undo-tree-id10031 . -1) (undo-tree-id10032 . -1) (undo-tree-id10033 . -1) (undo-tree-id10034 . -1) (undo-tree-id10035 . -1) (undo-tree-id10036 . -1) (undo-tree-id10037 . -1) (undo-tree-id10038 . -1) (undo-tree-id10039 . -1) (undo-tree-id10040 . -1) (undo-tree-id10041 . -1) (undo-tree-id10042 . -1) (undo-tree-id10043 . -1) (undo-tree-id10044 . -1) (undo-tree-id10045 . -1) (undo-tree-id10046 . -1) (undo-tree-id10047 . -1) (undo-tree-id10048 . -1) (undo-tree-id10049 . -1) (undo-tree-id10050 . -1) (undo-tree-id10051 . -1) (undo-tree-id10052 . -1) (undo-tree-id10053 . -1) (undo-tree-id10054 . -1) (undo-tree-id10055 . -1) (undo-tree-id10056 . -1) (undo-tree-id10057 . -1) (undo-tree-id10058 . -1) (undo-tree-id10059 . -1) (undo-tree-id10060 . -1) (undo-tree-id10061 . -1) (undo-tree-id10062 . -1) (undo-tree-id10063 . -1) (undo-tree-id10064 . -1) (undo-tree-id10065 . -1) (undo-tree-id10066 . -1) (undo-tree-id10067 . -1) (undo-tree-id10068 . -1) (undo-tree-id10069 . -1) (undo-tree-id10070 . -1) (undo-tree-id10071 . -1) (undo-tree-id10072 . -1) (undo-tree-id10073 . -1) (undo-tree-id10074 . -1) (undo-tree-id10075 . -1) (undo-tree-id10076 . -1) (undo-tree-id10077 . -1) (undo-tree-id10078 . -1) (undo-tree-id10079 . -1) (undo-tree-id10080 . -1) (undo-tree-id10081 . -1) (undo-tree-id10082 . -1) (undo-tree-id10083 . -1) (undo-tree-id10084 . -1) (undo-tree-id10085 . -1) (undo-tree-id10086 . -1) (undo-tree-id10087 . -1) (undo-tree-id10088 . -1) (undo-tree-id10089 . -1) (undo-tree-id10090 . -1) (undo-tree-id10091 . -1) (undo-tree-id10092 . -1) (undo-tree-id10093 . -1) (undo-tree-id10094 . -1) (undo-tree-id10095 . -1) (undo-tree-id10096 . -1) (undo-tree-id10097 . -1) (undo-tree-id10098 . -1) (undo-tree-id10099 . -1) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (undo-tree-id10103 . -1) (undo-tree-id10104 . -1) (undo-tree-id10105 . -1) (undo-tree-id10106 . -1) (undo-tree-id10107 . -1) (undo-tree-id10108 . -1) (undo-tree-id10109 . -1) (undo-tree-id10110 . -1) (undo-tree-id10111 . -1) (undo-tree-id10112 . -1) (undo-tree-id10113 . -1) (undo-tree-id10114 . -1) (undo-tree-id10115 . -1) (undo-tree-id10116 . -1) (undo-tree-id10117 . -1) (undo-tree-id10118 . -1) (undo-tree-id10119 . -1) (undo-tree-id10120 . -1) (undo-tree-id10121 . -1) (undo-tree-id10122 . -1) (undo-tree-id10123 . -1) (undo-tree-id10124 . -1) (undo-tree-id10125 . -1) (undo-tree-id10126 . -2) (undo-tree-id10127 . -1) (undo-tree-id10128 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4944) (undo-tree-id10129 . -1) (undo-tree-id10130 . -1) (undo-tree-id10131 . -1) (undo-tree-id10132 . -1) (undo-tree-id10133 . -1) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1) (undo-tree-id10148 . -1) (undo-tree-id10149 . -1) (undo-tree-id10150 . -1) (undo-tree-id10151 . -1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1) (undo-tree-id10157 . -1) (undo-tree-id10158 . -1) (undo-tree-id10159 . -1) (undo-tree-id10160 . -1) (undo-tree-id10161 . -1) (undo-tree-id10162 . -1) (undo-tree-id10163 . -1) (undo-tree-id10164 . -1) (undo-tree-id10165 . -1) (undo-tree-id10166 . -1) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) (undo-tree-id10185 . -1) (undo-tree-id10186 . -1) (undo-tree-id10187 . -1) (undo-tree-id10188 . -1) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) (undo-tree-id10198 . -1) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) (undo-tree-id10240 . -1) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -1) (undo-tree-id10244 . -1) (undo-tree-id10245 . -1) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) 4911) nil (25758 18562 697951 253000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -4977) (nil fontified nil 4976 . 4977) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4976 . 4977) (4976 . 4977) 4943) nil (25758 18564 254442 4000) 0 nil])
([nil nil ((#(".NOTE" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5127) (undo-tree-id10544 . -4) (undo-tree-id10545 . -5) (undo-tree-id10546 . -5)) nil (25758 18603 662394 495000) 0 nil] [nil nil ((5012 . 5013) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5012) (undo-tree-id9931 . 1) (undo-tree-id9932 . -1)) ((5012 . 5013) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5012) (undo-tree-id10353 . 1) (t 25758 18562 714336 599000)) (25758 18562 697426 345000) 0 nil])
([nil nil ((5127 . 5128)) nil (25758 18603 662392 77000) 0 nil])
nil
([nil nil ((#("When dealing with time series (and other types of sequences such as sentences), the
" 0 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10488 . -83) (undo-tree-id10489 . -5) (undo-tree-id10490 . -5) (undo-tree-id10491 . -5) (undo-tree-id10492 . -5) (undo-tree-id10493 . -5) (undo-tree-id10494 . -5) (undo-tree-id10495 . -5) (undo-tree-id10496 . -5) (undo-tree-id10497 . -5) (undo-tree-id10498 . -5) (undo-tree-id10499 . -5) (undo-tree-id10500 . -5) (undo-tree-id10501 . -5) (undo-tree-id10502 . -5) (undo-tree-id10503 . -5) (undo-tree-id10504 . -5) (undo-tree-id10505 . -5) (undo-tree-id10506 . -5) (undo-tree-id10507 . -5) (undo-tree-id10508 . -5) (undo-tree-id10509 . -5) (undo-tree-id10510 . -5) (undo-tree-id10511 . -5) (undo-tree-id10512 . -5) (undo-tree-id10513 . -5) (undo-tree-id10514 . -5) (undo-tree-id10515 . -5) (undo-tree-id10516 . -5) (undo-tree-id10517 . -5) (undo-tree-id10518 . -5) (undo-tree-id10519 . -5) (undo-tree-id10520 . -5) (undo-tree-id10521 . -5) (undo-tree-id10522 . -5) (undo-tree-id10523 . -5) (undo-tree-id10524 . -5) (undo-tree-id10525 . -5) (undo-tree-id10526 . -5) (undo-tree-id10527 . -5) (undo-tree-id10528 . -5) (undo-tree-id10529 . -5) (undo-tree-id10530 . -5) (undo-tree-id10531 . -5) (undo-tree-id10532 . -5) (undo-tree-id10533 . -5) (undo-tree-id10534 . -5) (undo-tree-id10535 . -5) (undo-tree-id10536 . -5) (undo-tree-id10537 . -5) (undo-tree-id10538 . -5) (undo-tree-id10539 . -5) (undo-tree-id10540 . -5) (undo-tree-id10541 . -5) (undo-tree-id10542 . -5) (undo-tree-id10543 . -84) 5134) nil (25758 18603 662389 594000) 0 nil])
([nil nil ((#("input features are generally represented as 3D arrays of shape [batch size, time steps,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10423 . -87) (undo-tree-id10424 . -5) (undo-tree-id10425 . -5) (undo-tree-id10426 . -5) (undo-tree-id10427 . -5) (undo-tree-id10428 . -5) (undo-tree-id10429 . -5) (undo-tree-id10430 . -5) (undo-tree-id10431 . -5) (undo-tree-id10432 . -5) (undo-tree-id10433 . -5) (undo-tree-id10434 . -5) (undo-tree-id10435 . -5) (undo-tree-id10436 . -5) (undo-tree-id10437 . -5) (undo-tree-id10438 . -5) (undo-tree-id10439 . -5) (undo-tree-id10440 . -5) (undo-tree-id10441 . -5) (undo-tree-id10442 . -5) (undo-tree-id10443 . -5) (undo-tree-id10444 . -5) (undo-tree-id10445 . -5) (undo-tree-id10446 . -5) (undo-tree-id10447 . -5) (undo-tree-id10448 . -5) (undo-tree-id10449 . -5) (undo-tree-id10450 . -5) (undo-tree-id10451 . -5) (undo-tree-id10452 . -5) (undo-tree-id10453 . -5) (undo-tree-id10454 . -5) (undo-tree-id10455 . -5) (undo-tree-id10456 . -5) (undo-tree-id10457 . -5) (undo-tree-id10458 . -5) (undo-tree-id10459 . -5) (undo-tree-id10460 . -5) (undo-tree-id10461 . -5) (undo-tree-id10462 . -5) (undo-tree-id10463 . -5) (undo-tree-id10464 . -5) (undo-tree-id10465 . -5) (undo-tree-id10466 . -5) (undo-tree-id10467 . -5) (undo-tree-id10468 . -5) (undo-tree-id10469 . -5) (undo-tree-id10470 . -5) (undo-tree-id10471 . -5) (undo-tree-id10472 . -5) (undo-tree-id10473 . -5) (undo-tree-id10474 . -5) (undo-tree-id10475 . -5) (undo-tree-id10476 . -5) (undo-tree-id10477 . -5) (undo-tree-id10478 . -5) (undo-tree-id10479 . -5) (undo-tree-id10480 . -5) (undo-tree-id10481 . -5) (undo-tree-id10482 . -5) (undo-tree-id10483 . -5) (undo-tree-id10484 . -5) (undo-tree-id10485 . -5) (undo-tree-id10486 . -5) (undo-tree-id10487 . -88) 5134) nil (25758 18603 662281 609000) 0 nil])
([nil nil ((#("dimensionality], where dimensionality is 1 for univariate time series and more for
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10377 . -82) (undo-tree-id10378 . -5) (undo-tree-id10379 . 83) (undo-tree-id10380 . -14) (undo-tree-id10381 . -5) (undo-tree-id10382 . -5) (undo-tree-id10383 . -5) (undo-tree-id10384 . -5) (undo-tree-id10385 . -5) (undo-tree-id10386 . -5) (undo-tree-id10387 . -5) (undo-tree-id10388 . -5) (undo-tree-id10389 . -5) (undo-tree-id10390 . -5) (undo-tree-id10391 . -5) (undo-tree-id10392 . -5) (undo-tree-id10393 . -5) (undo-tree-id10394 . -5) (undo-tree-id10395 . -5) (undo-tree-id10396 . -5) (undo-tree-id10397 . -5) (undo-tree-id10398 . -5) (undo-tree-id10399 . -5) (undo-tree-id10400 . -5) (undo-tree-id10401 . -5) (undo-tree-id10402 . -5) (undo-tree-id10403 . -5) (undo-tree-id10404 . -5) (undo-tree-id10405 . -5) (undo-tree-id10406 . -5) (undo-tree-id10407 . -5) (undo-tree-id10408 . -5) (undo-tree-id10409 . -5) (undo-tree-id10410 . -5) (undo-tree-id10411 . -5) (undo-tree-id10412 . -5) (undo-tree-id10413 . -5) (undo-tree-id10414 . -5) (undo-tree-id10415 . -5) (undo-tree-id10416 . -5) (undo-tree-id10417 . -5) (undo-tree-id10418 . -5) (undo-tree-id10419 . -5) (undo-tree-id10420 . -5) (undo-tree-id10421 . -5) (undo-tree-id10422 . -83) 5134) nil (25758 18603 662235 14000) 0 nil])
([nil nil ((#("multivariate time series.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10354 . -25) (undo-tree-id10355 . -5) (undo-tree-id10356 . -5) (undo-tree-id10357 . -5) (undo-tree-id10358 . -5) (undo-tree-id10359 . -5) (undo-tree-id10360 . -5) (undo-tree-id10361 . -5) (undo-tree-id10362 . -5) (undo-tree-id10363 . -5) (undo-tree-id10364 . -5) (undo-tree-id10365 . -5) (undo-tree-id10366 . -5) (undo-tree-id10367 . -5) (undo-tree-id10368 . -5) (undo-tree-id10369 . -5) (undo-tree-id10370 . -5) (undo-tree-id10371 . -5) (undo-tree-id10372 . -5) (undo-tree-id10373 . -5) (undo-tree-id10374 . -5) (undo-tree-id10375 . -5) (undo-tree-id10376 . -26) 5134) nil (25758 18603 662200 93000) 0 nil])
([nil nil ((#("Now let’s create a training set, a validation set, and a test set using this
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10644 . -76) (undo-tree-id10645 . -5) (undo-tree-id10646 . -7) (undo-tree-id10647 . -5) (undo-tree-id10648 . -5) (undo-tree-id10649 . -5) (undo-tree-id10650 . -5) (undo-tree-id10651 . -5) (undo-tree-id10652 . -5) (undo-tree-id10653 . -5) (undo-tree-id10654 . -5) (undo-tree-id10655 . -5) (undo-tree-id10656 . -5) (undo-tree-id10657 . -5) (undo-tree-id10658 . -7) (undo-tree-id10659 . -7) (undo-tree-id10660 . -7) (undo-tree-id10661 . -7) (undo-tree-id10662 . -7) (undo-tree-id10663 . -7) (undo-tree-id10664 . -7) (undo-tree-id10665 . -7) (undo-tree-id10666 . -7) (undo-tree-id10667 . -7) (undo-tree-id10668 . -7) (undo-tree-id10669 . -77) 5136 (t 25758 18603 727306 379000)) nil (25758 18632 208913 353000) 0 nil])
([nil nil ((#("function:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10621 . -9) (undo-tree-id10622 . -7) (undo-tree-id10623 . -7) (undo-tree-id10624 . -7) (undo-tree-id10625 . -7) (undo-tree-id10626 . -7) (undo-tree-id10627 . -7) (undo-tree-id10628 . -7) (undo-tree-id10629 . -7) (undo-tree-id10630 . -7) (undo-tree-id10631 . -7) (undo-tree-id10632 . -7) (undo-tree-id10633 . -7) (undo-tree-id10634 . -7) (undo-tree-id10635 . -7) (undo-tree-id10636 . -7) (undo-tree-id10637 . -7) (undo-tree-id10638 . -7) (undo-tree-id10639 . -7) (undo-tree-id10640 . -7) (undo-tree-id10641 . -7) (undo-tree-id10642 . -7) (undo-tree-id10643 . -10) 5136) nil (25758 18632 208894 327000) 0 nil])
([nil nil ((#("n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 13 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 31 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 36 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 42 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 51 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 52 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 57 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 65 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 70 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 74 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 79 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 98 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 99 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 104 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 125 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 126 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 127 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 132 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 135 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 136 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 141 164 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 164 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 165 170 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 170 195 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 195 196 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 196 197 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 197 201 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 201 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 204 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 205 209 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 209 228 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 228 229 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 229 234 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 234 255 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5129) (undo-tree-id10547 . -254) (undo-tree-id10548 . -195) (undo-tree-id10549 . -195) (undo-tree-id10550 . -8) (undo-tree-id10551 . -8) (undo-tree-id10552 . -8) (undo-tree-id10553 . -8) (undo-tree-id10554 . -8) (undo-tree-id10555 . -8) (undo-tree-id10556 . -8) (undo-tree-id10557 . -8) (undo-tree-id10558 . -8) (undo-tree-id10559 . -8) (undo-tree-id10560 . -1) (undo-tree-id10561 . -255) (undo-tree-id10562 . -195) (undo-tree-id10563 . -13) (undo-tree-id10564 . -13) (undo-tree-id10565 . -13) (undo-tree-id10566 . -13) (undo-tree-id10567 . -13) (undo-tree-id10568 . -13) (undo-tree-id10569 . -13) (undo-tree-id10570 . -13) (undo-tree-id10571 . -63) (undo-tree-id10572 . -63) (undo-tree-id10573 . -63) (undo-tree-id10574 . -63) (undo-tree-id10575 . -63) (undo-tree-id10576 . -63) (undo-tree-id10577 . -63) (undo-tree-id10578 . -63) (undo-tree-id10579 . -125) (undo-tree-id10580 . -125) (undo-tree-id10581 . -125) (undo-tree-id10582 . -125) (undo-tree-id10583 . -125) (undo-tree-id10584 . -125) (undo-tree-id10585 . -125) (undo-tree-id10586 . -125) (undo-tree-id10587 . -195) (undo-tree-id10588 . -195) (undo-tree-id10589 . -195) (undo-tree-id10590 . -195) (undo-tree-id10591 . -195) (undo-tree-id10592 . -195) (undo-tree-id10593 . -195) (undo-tree-id10594 . -195) (undo-tree-id10595 . -255) (undo-tree-id10596 . -255) (undo-tree-id10597 . -255) (undo-tree-id10598 . -255) (undo-tree-id10599 . -255) (undo-tree-id10600 . -255) (undo-tree-id10601 . -255) (undo-tree-id10602 . -255) (undo-tree-id10603 . -255) (undo-tree-id10604 . -255) (undo-tree-id10605 . -255) (undo-tree-id10606 . -255) (undo-tree-id10607 . -255) (undo-tree-id10608 . -255) (undo-tree-id10609 . -255) (undo-tree-id10610 . -255) (undo-tree-id10611 . -195) (undo-tree-id10612 . -195) (undo-tree-id10613 . -195) (undo-tree-id10614 . -195) (undo-tree-id10615 . -195) (undo-tree-id10616 . -195) (undo-tree-id10617 . -195) (undo-tree-id10618 . -195) (undo-tree-id10619 . -195) (undo-tree-id10620 . -255) 5324) nil (25758 18632 208874 398000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4891 . 4892) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -5146) (4891 . 5147) 4838) nil (25758 18632 208652 416000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -4892) (undo-tree-id10670 . -4) (undo-tree-id10671 . -4) (undo-tree-id10672 . -4) (undo-tree-id10673 . -4) (undo-tree-id10674 . -4) (undo-tree-id10675 . -4) (undo-tree-id10676 . -4) (undo-tree-id10677 . -4) (undo-tree-id10678 . -4) (undo-tree-id10679 . -4) (undo-tree-id10680 . -4) (undo-tree-id10681 . -4) 4896 (4891 . 4896) (t 25758 18632 227980 709000) 4838) nil (25758 18634 916609 854000) 0 nil])
([nil nil ((5147 . 5148) (t 25758 18634 936044 798000) 5088) nil (25758 18638 244299 337000) 0 nil])
([nil nil ((5159 . 5162) (#("This" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5159) (undo-tree-id10700 . -3) (undo-tree-id10701 . -3) (undo-tree-id10702 . -3) (undo-tree-id10703 . -4) (undo-tree-id10704 . -3) (undo-tree-id10705 . -3) (undo-tree-id10706 . -3) (undo-tree-id10707 . -3) (undo-tree-id10708 . -3) (undo-tree-id10709 . -3) (undo-tree-id10710 . -3) (undo-tree-id10711 . -3) (undo-tree-id10712 . -3) (undo-tree-id10713 . -3) (undo-tree-id10714 . -4) (undo-tree-id10715 . -4) (undo-tree-id10716 . -4) 5162 (t 25758 18638 260123 471000)) nil (25758 18674 260936 323000) 0 nil])
([nil nil ((5267 . 5268) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -5267) (undo-tree-id10699 . -1) 5235) nil (25758 18674 260923 837000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -5312) (nil fontified nil 5311 . 5312) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5311 . 5312) (5311 . 5312) 5267) nil (25758 18674 260921 599000) 0 nil])
([nil nil ((5339 . 5340) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -5339) (undo-tree-id10697 . 1) (undo-tree-id10698 . -1) 5312) nil (25758 18674 260920 246000) 0 nil])
([nil nil ((5384 . 5385) 5312) nil (25758 18674 260917 808000) 0 nil])
([nil nil ((#("X_train contains 7,000 time series (i.e., its shape is [7000, 50, 1]), while
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 49 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5386) (undo-tree-id10694 . -76) (undo-tree-id10695 . 77) (undo-tree-id10696 . -77)) nil (25758 18674 260916 572000) 0 nil])
([nil nil ((#("X_valid contains 2,000 (from the 7,000th time series to the 8,999th) and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5386) (undo-tree-id10691 . -72) (undo-tree-id10692 . 73) (undo-tree-id10693 . -73)) nil (25758 18674 260913 389000) 0 nil])
([nil nil ((#("X_test contains 1,000 (from the 9,000th to the 9,999th). Since we want to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 6 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5386) (undo-tree-id10688 . -73) (undo-tree-id10689 . 74) (undo-tree-id10690 . -74)) nil (25758 18674 260910 793000) 0 nil])
([nil nil ((#("forecast a single value for each series, the targets are column vectors (e.g.,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5386) (undo-tree-id10685 . -78) (undo-tree-id10686 . 79) (undo-tree-id10687 . -79)) nil (25758 18674 260907 138000) 0 nil])
([nil nil ((#("y_train has a shape of [7000, 1]).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5386) (undo-tree-id10682 . -34) (undo-tree-id10683 . 35) (undo-tree-id10684 . -35)) nil (25758 18674 260901 551000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3508) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1) (undo-tree-id11142 . -1) (undo-tree-id11143 . -1) (undo-tree-id11144 . -1) (undo-tree-id11145 . -1) (undo-tree-id11146 . -1) (undo-tree-id11147 . -1) (undo-tree-id11148 . -1) (undo-tree-id11149 . -1) (undo-tree-id11150 . -1) (undo-tree-id11151 . -1) (undo-tree-id11152 . -1) (undo-tree-id11153 . -1) (undo-tree-id11154 . -1) (undo-tree-id11155 . -1) (undo-tree-id11156 . -1) (undo-tree-id11157 . -1) (undo-tree-id11158 . -1) (undo-tree-id11159 . -1) (undo-tree-id11160 . -1) (undo-tree-id11161 . -1) (undo-tree-id11162 . -1) (undo-tree-id11163 . -1) (undo-tree-id11164 . -1) (undo-tree-id11165 . -1) (undo-tree-id11166 . -1) (undo-tree-id11167 . -1) (undo-tree-id11168 . -1) (undo-tree-id11169 . -1) (undo-tree-id11170 . -1) (undo-tree-id11171 . -1) (undo-tree-id11172 . -1) (undo-tree-id11173 . -1) (undo-tree-id11174 . -1) (undo-tree-id11175 . -1) (undo-tree-id11176 . -1) (undo-tree-id11177 . -1) (undo-tree-id11178 . -1) (undo-tree-id11179 . -1) (undo-tree-id11180 . -1) (undo-tree-id11181 . -1) (undo-tree-id11182 . -1) (undo-tree-id11183 . -1) (undo-tree-id11184 . -1) (undo-tree-id11185 . -1) (undo-tree-id11186 . -1) (undo-tree-id11187 . -1) (undo-tree-id11188 . -1) (undo-tree-id11189 . -1) (undo-tree-id11190 . -1) (undo-tree-id11191 . -1) (undo-tree-id11192 . -1) (undo-tree-id11193 . -1) (undo-tree-id11194 . -1) (undo-tree-id11195 . -1) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) (undo-tree-id11198 . -1) (undo-tree-id11199 . -1) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (undo-tree-id11231 . -1) (undo-tree-id11232 . -1) (undo-tree-id11233 . -1) (undo-tree-id11234 . -1) (undo-tree-id11235 . -1) (undo-tree-id11236 . -1) (undo-tree-id11237 . -1) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) (undo-tree-id11282 . -1) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (undo-tree-id11292 . -1) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) (undo-tree-id11300 . -1) (undo-tree-id11301 . -1) (undo-tree-id11302 . -1) (undo-tree-id11303 . -1) (undo-tree-id11304 . -1) (undo-tree-id11305 . -1) (t 25758 18674 324977 296000)) nil (25758 18720 112667 705000) 0 nil])
([nil nil ((5385 . 5387) (5384 . 5385) 4164) nil (25758 18720 112541 631000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6548 . 6549) (nil fontified nil 6530 . 6549) (nil fontified nil 6456 . 6530) (nil fontified nil 6380 . 6456) (nil fontified nil 6315 . 6380) (nil fontified nil 6312 . 6315) (nil fontified nil 6290 . 6312) (nil fontified nil 6247 . 6290) (nil fontified nil 6213 . 6247) (nil fontified nil 6139 . 6213) (nil fontified nil 6071 . 6139) (nil fontified nil 5998 . 6071) (nil fontified nil 5917 . 5998) (nil fontified nil 5855 . 5917) (nil fontified nil 5827 . 5855) (nil fontified nil 5767 . 5827) (nil fontified nil 5693 . 5767) (nil fontified nil 5618 . 5693) (nil fontified nil 5550 . 5618) (nil fontified nil 5480 . 5550) (nil fontified nil 5405 . 5480) (nil fontified nil 5388 . 5405) (5388 . 6549)) nil (25758 18720 112540 114000) 0 nil])
([nil nil ((nil keymap (keymap) 5386 . 5387) (nil face org-level-1 5386 . 5387) (nil line-prefix #("  " 0 2 (face org-indent)) 5386 . 5387) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5386 . 5387) (nil fontified nil 5386 . 5387) (5386 . 5387) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 5386) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1) (undo-tree-id10732 . -1) (undo-tree-id10733 . -1) (undo-tree-id10734 . -1) (undo-tree-id10735 . -1) (undo-tree-id10736 . -1) (undo-tree-id10737 . -1) (undo-tree-id10738 . -1) (undo-tree-id10739 . -1) (undo-tree-id10740 . -1) (undo-tree-id10741 . -1) (undo-tree-id10742 . -1) (undo-tree-id10743 . -1) (undo-tree-id10744 . -1) (undo-tree-id10745 . -1) (undo-tree-id10746 . -1) (undo-tree-id10747 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) (undo-tree-id10750 . -1) (undo-tree-id10751 . -1) (undo-tree-id10752 . -1) (undo-tree-id10753 . -1) (undo-tree-id10754 . -1) (undo-tree-id10755 . -1) (undo-tree-id10756 . -1) (undo-tree-id10757 . -1) (undo-tree-id10758 . -1) (undo-tree-id10759 . -1) (undo-tree-id10760 . -1) (undo-tree-id10761 . -1) (undo-tree-id10762 . -1) (undo-tree-id10763 . -1) (undo-tree-id10764 . -1) (undo-tree-id10765 . -1) (undo-tree-id10766 . -1) (undo-tree-id10767 . -1) (undo-tree-id10768 . -1) (undo-tree-id10769 . -1) (undo-tree-id10770 . -1) (undo-tree-id10771 . -1) (undo-tree-id10772 . -1) (undo-tree-id10773 . -1) (undo-tree-id10774 . -1) (undo-tree-id10775 . -1) (undo-tree-id10776 . -1) (undo-tree-id10777 . -1) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) (undo-tree-id10782 . -1) (undo-tree-id10783 . -1) (undo-tree-id10784 . -1) (undo-tree-id10785 . -1) (undo-tree-id10786 . -1) (undo-tree-id10787 . -1) (undo-tree-id10788 . -1) (undo-tree-id10789 . -1) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (undo-tree-id10809 . -1) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) (undo-tree-id10814 . -1) (undo-tree-id10815 . -1) (undo-tree-id10816 . -1) (undo-tree-id10817 . -1) (undo-tree-id10818 . -1) (undo-tree-id10819 . -1) (undo-tree-id10820 . -1) (undo-tree-id10821 . -1) (undo-tree-id10822 . -1) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1) (undo-tree-id10826 . -1) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) (undo-tree-id10836 . -1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) (undo-tree-id10849 . -1) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1) (undo-tree-id10854 . -1) (undo-tree-id10855 . -1) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1) (undo-tree-id10858 . -1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) (undo-tree-id10861 . -1) (undo-tree-id10862 . -1) (undo-tree-id10863 . -1) (undo-tree-id10864 . -1) (undo-tree-id10865 . -1) (undo-tree-id10866 . -1) (undo-tree-id10867 . -1) (undo-tree-id10868 . -1) (undo-tree-id10869 . -1) (undo-tree-id10870 . -1) (undo-tree-id10871 . -1) (undo-tree-id10872 . -1) (undo-tree-id10873 . -1) (undo-tree-id10874 . -1) (undo-tree-id10875 . -1) (undo-tree-id10876 . -1) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (undo-tree-id10899 . -1) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (undo-tree-id10908 . -1) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1) (undo-tree-id10935 . -1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (#("
" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t)) . -5387) (undo-tree-id10938 . -1) (undo-tree-id10939 . 1) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) (undo-tree-id10975 . -1) (undo-tree-id10976 . -1) (undo-tree-id10977 . -1) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (undo-tree-id10998 . -1) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (undo-tree-id11016 . -1) (undo-tree-id11017 . -1) (undo-tree-id11018 . -1) (undo-tree-id11019 . -1) (undo-tree-id11020 . -1) (undo-tree-id11021 . -1) (undo-tree-id11022 . -1) (undo-tree-id11023 . -1) (undo-tree-id11024 . -1) (undo-tree-id11025 . -1) (undo-tree-id11026 . -1) (undo-tree-id11027 . -1) (undo-tree-id11028 . -1) (undo-tree-id11029 . -1) (undo-tree-id11030 . -1) (undo-tree-id11031 . -1) (undo-tree-id11032 . -1) (undo-tree-id11033 . -1) (undo-tree-id11034 . -1) (undo-tree-id11035 . -1) (undo-tree-id11036 . -1) (undo-tree-id11037 . -1) (undo-tree-id11038 . -1) (undo-tree-id11039 . -1) (undo-tree-id11040 . -1) (undo-tree-id11041 . -1) (undo-tree-id11042 . -1) (undo-tree-id11043 . -1) (undo-tree-id11044 . -1) (undo-tree-id11045 . -1) (undo-tree-id11046 . -1) (undo-tree-id11047 . -1) (undo-tree-id11048 . -1) (undo-tree-id11049 . -1) (undo-tree-id11050 . -1) (undo-tree-id11051 . -1) (undo-tree-id11052 . -1) (undo-tree-id11053 . -1) (undo-tree-id11054 . -1) (undo-tree-id11055 . -1) (undo-tree-id11056 . -1) (undo-tree-id11057 . -1) (undo-tree-id11058 . -1) (undo-tree-id11059 . -1) (undo-tree-id11060 . -1) (undo-tree-id11061 . -1) (undo-tree-id11062 . -1) (undo-tree-id11063 . -1) (undo-tree-id11064 . -1) (undo-tree-id11065 . -1) (undo-tree-id11066 . -1) (undo-tree-id11067 . -1) (undo-tree-id11068 . -1) (undo-tree-id11069 . -1) (undo-tree-id11070 . -1) (undo-tree-id11071 . -1) (undo-tree-id11072 . -1) (undo-tree-id11073 . -1) (undo-tree-id11074 . -1) (undo-tree-id11075 . -1) (undo-tree-id11076 . -1) (undo-tree-id11077 . -1) (undo-tree-id11078 . -1) (undo-tree-id11079 . -1) (undo-tree-id11080 . -1) (undo-tree-id11081 . -1) (undo-tree-id11082 . -1) (undo-tree-id11083 . -1) (undo-tree-id11084 . -1) (undo-tree-id11085 . -1) (undo-tree-id11086 . -1) (undo-tree-id11087 . -1) (undo-tree-id11088 . -1) (undo-tree-id11089 . -1) (undo-tree-id11090 . -1) (undo-tree-id11091 . -1) (undo-tree-id11092 . -1) (undo-tree-id11093 . -1) (undo-tree-id11094 . -1) (undo-tree-id11095 . -1) (undo-tree-id11096 . -1) (undo-tree-id11097 . -1) (undo-tree-id11098 . -1) (undo-tree-id11099 . -1) (undo-tree-id11100 . -1) (undo-tree-id11101 . -1) (undo-tree-id11102 . -1) (undo-tree-id11103 . -1) (undo-tree-id11104 . -1) (undo-tree-id11105 . -1) (undo-tree-id11106 . -1) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . -1) (undo-tree-id11117 . -1) (undo-tree-id11118 . -1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (undo-tree-id11127 . -1) (undo-tree-id11128 . -1) (undo-tree-id11129 . -1) (undo-tree-id11130 . -1) (undo-tree-id11131 . -1) (undo-tree-id11132 . -1) (undo-tree-id11133 . -1) (undo-tree-id11134 . -1) (undo-tree-id11135 . -1) (undo-tree-id11136 . -1) (undo-tree-id11137 . -1) 5386) nil (25758 18720 112516 539000) 0 nil])
([nil nil ((#("Before we start using RNNs, it is often a good idea to have a few baseline
" 0 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5404) (undo-tree-id10727 . -74) (undo-tree-id10728 . -75)) nil (25758 18720 112034 706000) 0 nil])
([nil nil ((#("metrics, or else we may end up thinking our model works great when in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5404) (undo-tree-id10723 . -69) (undo-tree-id10724 . 70) (undo-tree-id10725 . -7) (undo-tree-id10726 . -70)) nil (25758 18720 112032 619000) 0 nil])
([nil nil ((#("fact it is doing worse than basic models. For example" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5404) (undo-tree-id10721 . -52) (undo-tree-id10722 . -53)) nil (25758 18720 112028 393000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5404) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1)) nil (25758 18720 112025 956000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 5404) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1)) nil (25758 18720 112022 256000) 0 nil])
([nil nil ((6348 . 6349)) nil (25758 18720 112006 983000) 0 nil])
([nil nil ((5638 . 5644) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5638 5644 nil nil nil t #s(yas--exit 5662 nil))) #s(yas--exit 5662 nil) 1 nil #s(yas--field 1 5638 5644 nil nil nil t #s(yas--exit 5662 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5656) (undo-tree-id11336 . -2) (5626 . 5669) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5626) (undo-tree-id11337 . -1) (undo-tree-id11338 . -2) (undo-tree-id11339 . -1) (undo-tree-id11340 . -1) (undo-tree-id11341 . -1) (undo-tree-id11342 . -1) (undo-tree-id11343 . -1) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1) (undo-tree-id11358 . -1) (undo-tree-id11359 . -1) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (undo-tree-id11364 . -1) (undo-tree-id11365 . -1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -1) (undo-tree-id11369 . -1) (undo-tree-id11370 . -1) (undo-tree-id11371 . -1) (undo-tree-id11372 . -1) (undo-tree-id11373 . -1) (undo-tree-id11374 . -1) (undo-tree-id11375 . -1) (undo-tree-id11376 . -1) (undo-tree-id11377 . -2) (undo-tree-id11378 . -2) (undo-tree-id11379 . -2) (undo-tree-id11380 . -2) (undo-tree-id11381 . -2) (undo-tree-id11382 . -2) (undo-tree-id11383 . -2) (undo-tree-id11384 . -2) (undo-tree-id11385 . -2) (undo-tree-id11386 . -2) (undo-tree-id11387 . 2) (undo-tree-id11388 . -2) (undo-tree-id11389 . -2) (undo-tree-id11390 . -2) (undo-tree-id11391 . -2) (undo-tree-id11392 . -2) (undo-tree-id11393 . -2) (undo-tree-id11394 . -2) (undo-tree-id11395 . -2) (undo-tree-id11396 . -2) (undo-tree-id11397 . -2) (undo-tree-id11398 . -2) (undo-tree-id11399 . -2) (undo-tree-id11400 . -2) (undo-tree-id11401 . -2) (undo-tree-id11402 . -2) (undo-tree-id11403 . -2) (undo-tree-id11404 . -2) (undo-tree-id11405 . -2) (undo-tree-id11406 . -2) (undo-tree-id11407 . -2) (undo-tree-id11408 . -2) 5628 (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -5628) (undo-tree-id11409 . -1) (undo-tree-id11410 . -1) (undo-tree-id11411 . -1) (undo-tree-id11412 . -1) (undo-tree-id11413 . -1) (undo-tree-id11414 . -1) (undo-tree-id11415 . -1) (undo-tree-id11416 . -1) (undo-tree-id11417 . -1) (undo-tree-id11418 . -1) (undo-tree-id11419 . -1) (undo-tree-id11420 . -1) 5629 (5628 . 5629) (5626 . 5628) (5625 . 5626) (t 25758 18720 178063 519000) 5566) nil (25758 18739 977390 636000) 0 nil])
([nil nil ((apply yas--snippet-revive 5626 5673 #s(yas--snippet nil (#s(yas--field 1 5638 5644 nil nil nil t #s(yas--exit 5662 nil))) #s(yas--exit 5662 nil) 1 nil #s(yas--field 1 5638 5644 nil nil nil t #s(yas--exit 5662 nil)) nil nil))) nil (25758 18739 977331 53000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5661) (undo-tree-id11335 . -1)) nil (25758 18739 977330 308000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5661) (undo-tree-id11334 . -1)) nil (25758 18739 977328 786000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5661) (undo-tree-id11333 . -1)) nil (25758 18739 977327 223000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 5661) (undo-tree-id11306 . -9) (undo-tree-id11307 . -10) (undo-tree-id11308 . -10) (undo-tree-id11309 . -10) (undo-tree-id11310 . -10) (undo-tree-id11311 . -10) (undo-tree-id11312 . -10) (undo-tree-id11313 . -10) (undo-tree-id11314 . -10) (undo-tree-id11315 . -10) (undo-tree-id11316 . -10) (undo-tree-id11317 . -10) (undo-tree-id11318 . -10) (undo-tree-id11319 . -10) (undo-tree-id11320 . -10) (undo-tree-id11321 . -10) (undo-tree-id11322 . -9) (undo-tree-id11323 . -9) (undo-tree-id11324 . -9) (undo-tree-id11325 . -9) (undo-tree-id11326 . -9) (undo-tree-id11327 . -9) (undo-tree-id11328 . -9) (undo-tree-id11329 . -9) (undo-tree-id11330 . -9) (undo-tree-id11331 . -9) (undo-tree-id11332 . -10)) nil (25758 18739 977321 989000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5831 . 5832) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -5841) (5831 . 5842) 5751) nil (25758 18739 977149 275000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 5661) (undo-tree-id11425 . -3) (undo-tree-id11426 . 4) (undo-tree-id11427 . -1) (undo-tree-id11428 . -4) (t 25758 18739 998533 260000)) nil (25758 18743 382456 957000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5685) (undo-tree-id11421 . -3) (undo-tree-id11422 . 4) (undo-tree-id11423 . -1) (undo-tree-id11424 . -4)) nil (25758 18743 382450 401000) 0 nil])
([nil nil ((5404 . 5405) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5404) (t 25758 18743 394613 759000)) nil (25758 18754 101588 435000) 0 nil])
([nil nil ((5565 . 5566) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -5565) (undo-tree-id11429 . -1) (5491 . 5492) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -5491) (undo-tree-id11430 . -1) (5416 . 5417) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -5416) (undo-tree-id11431 . -1) 5404 (t 25758 18754 114867 887000)) nil (25758 18769 288737 894000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -5551) (nil fontified nil 5550 . 5551) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5550 . 5551) (5550 . 5551) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -5479) (nil fontified nil 5478 . 5479) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5478 . 5479) (5478 . 5479) 5565) nil (25758 18769 288720 477000) 0 nil])
([nil nil ((#("Another simple approach is to use a fully connected network. Since it" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 24 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 26 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5754) (undo-tree-id11432 . -68) (undo-tree-id11433 . -1) (undo-tree-id11434 . -1) (undo-tree-id11435 . -1) (undo-tree-id11436 . -1) (undo-tree-id11437 . -1) (undo-tree-id11438 . -1) (undo-tree-id11439 . -1) (undo-tree-id11440 . -1) (undo-tree-id11441 . -69) (undo-tree-id11442 . -69) (t 25758 18769 307228 87000)) nil (25758 18784 926265 325000) 0 nil])
([nil nil ((5764 . 5765) 5763) nil (25758 18788 379509 779000) 0 nil] [nil nil ((nil rear-nonsticky nil 5832 . 5833) (nil fontified nil 5764 . 5833) (5764 . 5833) 5763) ((#("Another simple approach is to use a fully connected network. Since it" 0 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 68 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 5764) (undo-tree-id11443 . -68) (undo-tree-id11444 . -68) (undo-tree-id11445 . -68) (undo-tree-id11446 . -68) (undo-tree-id11447 . -68) (undo-tree-id11448 . -68) (undo-tree-id11449 . -68) (undo-tree-id11450 . -68) (undo-tree-id11451 . -68) (undo-tree-id11452 . -68) (undo-tree-id11453 . -68) (undo-tree-id11454 . -68) (undo-tree-id11455 . -68) (undo-tree-id11456 . -68) (nil rear-nonsticky t 5832 . 5833) (t 25758 18784 751594 328000)) (25758 18784 729021 552000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5833 . 5834) (nil fontified nil 5765 . 5834) (5765 . 5834)) nil (25758 18788 379504 842000) 0 nil])
nil
([nil nil ((5918 . 5919) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5918) (undo-tree-id11522 . -1) (5918 . 5919) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5918) (undo-tree-id11523 . -1) (t 25758 18788 399680 850000)) nil (25758 18821 138753 87000) 0 nil])
([nil nil ((6063 . 6069) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6063 6069 nil nil nil t #s(yas--exit 6087 nil))) #s(yas--exit 6087 nil) 2 nil #s(yas--field 1 6063 6069 nil nil nil t #s(yas--exit 6087 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6081) (undo-tree-id11472 . -2) (6051 . 6094) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6051) (undo-tree-id11473 . -1) (undo-tree-id11474 . -2) (undo-tree-id11475 . -1) (undo-tree-id11476 . -1) (undo-tree-id11477 . -1) (undo-tree-id11478 . -1) (undo-tree-id11479 . -1) (undo-tree-id11480 . -1) (undo-tree-id11481 . -1) (undo-tree-id11482 . -1) (undo-tree-id11483 . -1) (undo-tree-id11484 . -1) (undo-tree-id11485 . -1) (undo-tree-id11486 . -1) (undo-tree-id11487 . -1) (undo-tree-id11488 . -1) (undo-tree-id11489 . -1) (undo-tree-id11490 . -1) (undo-tree-id11491 . -1) (undo-tree-id11492 . -1) (undo-tree-id11493 . -1) (undo-tree-id11494 . -1) (undo-tree-id11495 . -1) (undo-tree-id11496 . -1) (undo-tree-id11497 . -1) (undo-tree-id11498 . -1) (undo-tree-id11499 . -1) (undo-tree-id11500 . -1) (undo-tree-id11501 . -1) (undo-tree-id11502 . -1) (undo-tree-id11503 . -1) (undo-tree-id11504 . -1) (undo-tree-id11505 . -1) (undo-tree-id11506 . -1) (undo-tree-id11507 . -1) (undo-tree-id11508 . -1) (undo-tree-id11509 . -1) (undo-tree-id11510 . -1) (undo-tree-id11511 . -2) (undo-tree-id11512 . -2) (undo-tree-id11513 . -2) (undo-tree-id11514 . -2) (undo-tree-id11515 . -2) (undo-tree-id11516 . -2) (undo-tree-id11517 . -2) (undo-tree-id11518 . -2) (undo-tree-id11519 . -2) (undo-tree-id11520 . -2) (undo-tree-id11521 . -2) 6053 (6051 . 6053) (6050 . 6051) (6049 . 6050) 5976) nil (25758 18821 138748 224000) 0 nil])
([nil nil ((apply yas--snippet-revive 6051 6098 #s(yas--snippet nil (#s(yas--field 1 6063 6069 nil nil nil t #s(yas--exit 6087 nil))) #s(yas--exit 6087 nil) 2 nil #s(yas--field 1 6063 6069 nil nil nil t #s(yas--exit 6087 nil)) nil nil))) nil (25758 18821 138713 988000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6086) (undo-tree-id11471 . -1)) nil (25758 18821 138712 914000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6086) (undo-tree-id11470 . -1)) nil (25758 18821 138711 400000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6086) (undo-tree-id11469 . -1)) nil (25758 18821 138709 823000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 6086) (undo-tree-id11457 . -9) (undo-tree-id11458 . -9) (undo-tree-id11459 . -9) (undo-tree-id11460 . -9) (undo-tree-id11461 . -9) (undo-tree-id11462 . -9) (undo-tree-id11463 . -9) (undo-tree-id11464 . -9) (undo-tree-id11465 . -9) (undo-tree-id11466 . -9) (undo-tree-id11467 . -9) (undo-tree-id11468 . -10)) nil (25758 18821 138707 308000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6187 . 6188) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6197) (6187 . 6198) 6185) nil (25758 18821 138685 134000) 0 nil])
([nil nil ((6170 . 6171) (6169 . 6170) (6168 . 6169) (6167 . 6168) (6120 . 6124) (t 25758 18821 160457 989000)) nil (25758 18833 65009 367000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -6192) (undo-tree-id11524 . -1) 6171 (t 25758 18833 84740 919000)) nil (25758 18843 768656 546000) 0 nil])
([nil nil ((6400 . 6401) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id11525 . -1) (t 25758 18843 784994 842000)) nil (25758 18894 674679 921000) 0 nil])
([nil nil ((6441 . 6443) (6440 . 6441) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6440) (undo-tree-id11526 . -1) (undo-tree-id11527 . -1) (undo-tree-id11528 . -1) (undo-tree-id11529 . -1) (undo-tree-id11530 . -1) (undo-tree-id11531 . -1) (undo-tree-id11532 . -1) (undo-tree-id11533 . -1) (undo-tree-id11534 . -1) (undo-tree-id11535 . -1) (undo-tree-id11536 . -1) (undo-tree-id11537 . -1) (undo-tree-id11538 . -1) (undo-tree-id11539 . -1) (undo-tree-id11540 . -1) (undo-tree-id11541 . -1) (undo-tree-id11542 . -1) (undo-tree-id11543 . -1) (undo-tree-id11544 . -1) (undo-tree-id11545 . -1) (undo-tree-id11546 . -1) (undo-tree-id11547 . -1) (undo-tree-id11548 . -1) (undo-tree-id11549 . -1) (undo-tree-id11550 . -1) (undo-tree-id11551 . -1) (undo-tree-id11552 . -1) (undo-tree-id11553 . -1) (undo-tree-id11554 . -1) (undo-tree-id11555 . -1) (undo-tree-id11556 . -1) (undo-tree-id11557 . -1) (undo-tree-id11558 . -1) (undo-tree-id11559 . -1) (undo-tree-id11560 . -1) (undo-tree-id11561 . -1) (undo-tree-id11562 . -1) (undo-tree-id11563 . -1) (undo-tree-id11564 . -1) (undo-tree-id11565 . -1) 6441 (6440 . 6441) (t 25758 18894 694203 332000)) nil (25758 18945 449391 316000) 0 nil])
([nil nil ((6443 . 6444) 6442) nil (25758 18945 448985 613000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9923 . 9924) (nil fontified nil 9885 . 9924) (nil fontified nil 9816 . 9885) (nil fontified nil 9772 . 9816) (nil fontified nil 9708 . 9772) (nil fontified nil 9638 . 9708) (nil fontified nil 9578 . 9638) (nil fontified nil 9510 . 9578) (nil fontified nil 9439 . 9510) (nil fontified nil 9370 . 9439) (nil fontified nil 9309 . 9370) (nil fontified nil 9244 . 9309) (nil fontified nil 9173 . 9244) (nil fontified nil 9107 . 9173) (nil fontified nil 9034 . 9107) (nil fontified nil 8966 . 9034) (nil fontified nil 8897 . 8966) (nil fontified nil 8832 . 8897) (nil fontified nil 8761 . 8832) (nil fontified nil 8694 . 8761) (nil fontified nil 8628 . 8694) (nil fontified nil 8558 . 8628) (nil fontified nil 8525 . 8558) (nil fontified nil 8446 . 8525) (nil fontified nil 8371 . 8446) (nil fontified nil 8295 . 8371) (nil fontified nil 8216 . 8295) (nil fontified nil 8143 . 8216) (nil fontified nil 8072 . 8143) (nil fontified nil 7998 . 8072) (nil fontified nil 7925 . 7998) (nil fontified nil 7847 . 7925) (nil fontified nil 7842 . 7847) (nil fontified nil 7761 . 7842) (nil fontified nil 7680 . 7761) (nil fontified nil 7675 . 7680) (nil fontified nil 7637 . 7675) (nil fontified nil 7497 . 7637) (nil fontified nil 7426 . 7497) (nil fontified nil 7350 . 7426) (nil fontified nil 7271 . 7350) (nil fontified nil 7198 . 7271) (nil fontified nil 7123 . 7198) (nil fontified nil 7040 . 7123) (nil fontified nil 6966 . 7040) (nil fontified nil 6894 . 6966) (nil fontified nil 6824 . 6894) (nil fontified nil 6750 . 6824) (nil fontified nil 6677 . 6750) (nil fontified nil 6605 . 6677) (nil fontified nil 6602 . 6605) (nil fontified nil 6553 . 6602) (nil fontified nil 6519 . 6553) (nil fontified nil 6470 . 6519) (nil fontified nil 6444 . 6470) (6444 . 9924)) nil (25758 18945 448982 652000) 0 nil])
([nil nil ((9924 . 9925)) nil (25758 18945 448971 360000) 0 nil])
([nil nil ((nil keymap (keymap) 6442 . 6443) (nil face org-level-1 6442 . 6443) (nil line-prefix #("  " 0 2 (face org-indent)) 6442 . 6443) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6442 . 6443) (nil fontified nil 6442 . 6443) (6442 . 6443) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 6442) (undo-tree-id11566 . -1) (undo-tree-id11567 . -1) (undo-tree-id11568 . -1) (undo-tree-id11569 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -6443) (undo-tree-id11570 . -1) (undo-tree-id11571 . -1) (undo-tree-id11572 . -1) 6442 (t 25758 18945 471409 282000)) nil (25758 18951 440064 865000) 0 nil])
([nil nil ((6472 . 6473) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6472) (undo-tree-id11573 . -1) (t 25758 18951 455551 441000)) nil (25758 18954 211063 881000) 0 nil])
([nil nil ((6530 . 6536) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6530 6536 nil nil nil t #s(yas--exit 6554 nil))) #s(yas--exit 6554 nil) 3 nil #s(yas--field 1 6530 6536 nil nil nil t #s(yas--exit 6554 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6548) (undo-tree-id11597 . -2) (6518 . 6561) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6518) (undo-tree-id11598 . -1) (undo-tree-id11599 . -2) (undo-tree-id11600 . -1) (undo-tree-id11601 . -1) (undo-tree-id11602 . -1) (undo-tree-id11603 . -1) (undo-tree-id11604 . -1) (undo-tree-id11605 . -1) (undo-tree-id11606 . -1) (undo-tree-id11607 . -1) (undo-tree-id11608 . -1) (undo-tree-id11609 . -1) (undo-tree-id11610 . -1) (undo-tree-id11611 . -1) (undo-tree-id11612 . -1) (undo-tree-id11613 . -1) (undo-tree-id11614 . -1) (undo-tree-id11615 . -1) (undo-tree-id11616 . -1) (undo-tree-id11617 . -1) (undo-tree-id11618 . -1) (undo-tree-id11619 . -1) (undo-tree-id11620 . -1) (undo-tree-id11621 . -1) (undo-tree-id11622 . -1) (undo-tree-id11623 . -1) (undo-tree-id11624 . -1) (undo-tree-id11625 . -1) (undo-tree-id11626 . -1) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) (undo-tree-id11631 . -1) (undo-tree-id11632 . -1) (undo-tree-id11633 . -1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -2) (undo-tree-id11637 . -2) (undo-tree-id11638 . -2) (undo-tree-id11639 . -2) (undo-tree-id11640 . -2) (undo-tree-id11641 . -2) (undo-tree-id11642 . -2) (undo-tree-id11643 . -2) (undo-tree-id11644 . -2) (undo-tree-id11645 . -2) (undo-tree-id11646 . -2) 6520 (6518 . 6520) (6517 . 6518) (t 25758 18954 223617 202000) 6475) nil (25758 18965 546677 370000) 0 nil])
([nil nil ((apply yas--snippet-revive 6518 6565 #s(yas--snippet nil (#s(yas--field 1 6530 6536 nil nil nil t #s(yas--exit 6554 nil))) #s(yas--exit 6554 nil) 3 nil #s(yas--field 1 6530 6536 nil nil nil t #s(yas--exit 6554 nil)) nil nil))) nil (25758 18965 546642 416000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6553) (undo-tree-id11596 . -1)) nil (25758 18965 546641 607000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6553) (undo-tree-id11587 . -1) (undo-tree-id11588 . -1) (undo-tree-id11589 . -1) (undo-tree-id11590 . -1) (undo-tree-id11591 . -1) (undo-tree-id11592 . -1) (undo-tree-id11593 . -1) (undo-tree-id11594 . -1) (undo-tree-id11595 . -1)) nil (25758 18965 546639 789000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6553) (undo-tree-id11586 . -1)) nil (25758 18965 546632 378000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 6553) (undo-tree-id11574 . -9) (undo-tree-id11575 . -9) (undo-tree-id11576 . -9) (undo-tree-id11577 . -9) (undo-tree-id11578 . -9) (undo-tree-id11579 . -9) (undo-tree-id11580 . -9) (undo-tree-id11581 . -9) (undo-tree-id11582 . -9) (undo-tree-id11583 . -9) (undo-tree-id11584 . -9) (undo-tree-id11585 . -10)) nil (25758 18965 546629 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6638 . 6639) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6648) (6638 . 6649) 6636) nil (25758 18965 546571 566000) 0 nil])
([nil nil ((6653 . 6654) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6653) (undo-tree-id11647 . -1) (t 25758 18965 567886 723000)) nil (25758 18976 966600 476000) 0 nil])
([nil nil ((#("That's really the simplest RNN you can build" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6649) (undo-tree-id11650 . -43) (undo-tree-id11651 . -4) (undo-tree-id11652 . -4) (undo-tree-id11653 . -4) (undo-tree-id11654 . -4) (undo-tree-id11655 . -4) (undo-tree-id11656 . -4) (undo-tree-id11657 . -4) (undo-tree-id11658 . -4) (undo-tree-id11659 . -4) (undo-tree-id11660 . -4) (undo-tree-id11661 . -4) (undo-tree-id11662 . -4) (undo-tree-id11663 . -44) (t 25758 18976 988158 70000)) nil (25758 18982 259456 755000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6649) (undo-tree-id11648 . -1) (undo-tree-id11649 . -2)) nil (25758 18982 259435 873000) 0 nil])
([nil nil ((6674 . 6675) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6674) (undo-tree-id11686 . -1) 6649 (t 25758 18982 280283 824000)) nil (25758 19002 226968 966000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6724) (nil fontified nil 6723 . 6724) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6723 . 6724) (6723 . 6724) 6674) nil (25758 19002 226967 86000) 0 nil])
([nil nil ((6702 . 6703) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6702) (undo-tree-id11685 . -1)) nil (25758 19002 226965 662000) 0 nil])
([nil nil ((6702 . 6703) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6702) (undo-tree-id11682 . -1) (undo-tree-id11683 . -1) (undo-tree-id11684 . -1)) nil (25758 19002 226963 963000) 0 nil])
([nil nil ((#("as we saw in Figure" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6704) (undo-tree-id11679 . -18) (undo-tree-id11680 . -19) (undo-tree-id11681 . -19)) nil (25758 19002 226959 409000) 0 nil])
([nil nil ((#("15" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6705) (undo-tree-id11677 . -1) (undo-tree-id11678 . -2)) nil (25758 19002 226956 415000) 0 nil])
([nil nil ((#("-" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6705) (undo-tree-id11676 . -1)) nil (25758 19002 226954 193000) 0 nil])
([nil nil ((#("1" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 6705) (undo-tree-id11666 . -1) (undo-tree-id11667 . -1) (undo-tree-id11668 . -1) (undo-tree-id11669 . -1) (undo-tree-id11670 . -1) (undo-tree-id11671 . -1) (undo-tree-id11672 . -1) (undo-tree-id11673 . -1) (undo-tree-id11674 . -1) (undo-tree-id11675 . -1)) nil (25758 19002 226951 964000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6705) (undo-tree-id11664 . -1) (undo-tree-id11665 . -2)) nil (25758 19002 226941 472000) 0 nil])
([nil nil ((#("(unlike in the previous model)" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6765) (undo-tree-id11699 . -29) (undo-tree-id11700 . -30) 6723 (t 25758 19002 244758 276000)) nil (25758 19008 169229 606000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6764) (undo-tree-id11687 . -1) (undo-tree-id11688 . -1) (undo-tree-id11689 . -1) (undo-tree-id11690 . -1) (undo-tree-id11691 . -1) (undo-tree-id11692 . -1) (undo-tree-id11693 . -1) (undo-tree-id11694 . -1) (undo-tree-id11695 . -1) (undo-tree-id11696 . -1) (undo-tree-id11697 . -1) (undo-tree-id11698 . -1)) nil (25758 19008 169220 686000) 0 nil])
([nil nil ((#("(this is why we set the first input dimension to None)" 0 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 50 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6836) (undo-tree-id11762 . -53) (undo-tree-id11763 . 54) (undo-tree-id11764 . -1) (undo-tree-id11765 . 1) (undo-tree-id11766 . -54) (undo-tree-id11767 . -54) (t 25758 19008 188899 549000)) nil (25758 19024 372333 666000) 0 nil])
([nil nil ((6835 . 6836) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6835) (undo-tree-id11703 . -1) (undo-tree-id11704 . -1) (undo-tree-id11705 . -1) (undo-tree-id11706 . -1) (undo-tree-id11707 . -1) (undo-tree-id11708 . -1) (undo-tree-id11709 . -1) (undo-tree-id11710 . -1) (undo-tree-id11711 . -1) (undo-tree-id11712 . -1) (undo-tree-id11713 . -1) (undo-tree-id11714 . -1) (undo-tree-id11715 . -1) (undo-tree-id11716 . -1) (undo-tree-id11717 . -1) (undo-tree-id11718 . -1) (undo-tree-id11719 . -1) (undo-tree-id11720 . -1) (undo-tree-id11721 . -1) (undo-tree-id11722 . -1) (undo-tree-id11723 . -1) (undo-tree-id11724 . -1) (undo-tree-id11725 . -1) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -1) (undo-tree-id11730 . -1) (undo-tree-id11731 . -1) (undo-tree-id11732 . -1) (undo-tree-id11733 . -1) (undo-tree-id11734 . -1) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) (undo-tree-id11744 . -1) (undo-tree-id11745 . -1) (undo-tree-id11746 . -1) (undo-tree-id11747 . -1) (undo-tree-id11748 . -1) (undo-tree-id11749 . -1) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (undo-tree-id11759 . -1) (undo-tree-id11760 . -1) (undo-tree-id11761 . -1) 6766) nil (25758 19024 372325 863000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6835) (undo-tree-id11701 . -1) (undo-tree-id11702 . -1)) nil (25758 19024 372105 987000) 0 nil])
([nil nil ((6837 . 6838)) nil (25758 19024 372081 707000) 0 nil])
([nil nil ((6927 . 6928) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6927) (undo-tree-id11768 . -1) (6853 . 6854) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6853) (undo-tree-id11769 . -1) 6838 (t 25758 19024 393284 714000)) nil (25758 19036 109320 869000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6988) (nil fontified nil 6987 . 6988) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6987 . 6988) (6987 . 6988) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6909) (nil fontified nil 6908 . 6909) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6908 . 6909) (6908 . 6909) 6927) nil (25758 19036 109308 235000) 0 nil])
([nil nil ((6919 . 6920)) nil (25758 19036 109302 39000) 0 nil])
([nil nil ((7086 . 7087) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7086) (undo-tree-id11770 . -1) (7011 . 7012) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7011) (undo-tree-id11771 . -1) 6989 (t 25758 19036 173564 749000)) nil (25758 19063 829304 505000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -7148) (nil fontified nil 7147 . 7148) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7147 . 7148) (7147 . 7148) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -7070) (nil fontified nil 7069 . 7070) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7069 . 7070) (7069 . 7070) 7086) nil (25758 19063 829288 709000) 0 nil])
([nil nil ((7563 . 7564) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7563) (undo-tree-id11772 . -1) (7525 . 7526) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7525) (undo-tree-id11773 . -1) (7385 . 7386) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7385) (undo-tree-id11774 . -1) (7314 . 7315) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7314) (undo-tree-id11775 . -1) (7238 . 7239) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7238) (undo-tree-id11776 . -1) (7159 . 7160) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7159) (undo-tree-id11777 . -1) (7147 . 7148) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -7147) (undo-tree-id11778 . -1) (7069 . 7070) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -7069) (undo-tree-id11779 . -1) 7068 (t 25758 19063 850222 754000)) nil (25758 19079 661924 15000) 0 nil])
([nil nil ((7564 . 7566)) nil (25758 19079 661847 850000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -7526) (undo-tree-id11780 . -1) (undo-tree-id11781 . -1) (undo-tree-id11782 . -1) (undo-tree-id11783 . -1) (undo-tree-id11784 . -1) (undo-tree-id11785 . -1) (undo-tree-id11786 . -1) (undo-tree-id11787 . -1) (undo-tree-id11788 . -1) (undo-tree-id11789 . -1) (undo-tree-id11790 . -1) (undo-tree-id11791 . -1) (undo-tree-id11792 . -1) (undo-tree-id11793 . -1) (undo-tree-id11794 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7525 . 7526) (7525 . 7526) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -7458) (undo-tree-id11795 . -1) (undo-tree-id11796 . -1) (undo-tree-id11797 . -1) (undo-tree-id11798 . -1) (undo-tree-id11799 . -1) (undo-tree-id11800 . -1) (undo-tree-id11801 . -1) (undo-tree-id11802 . -1) (undo-tree-id11803 . -1) (undo-tree-id11804 . -1) (undo-tree-id11805 . -1) (undo-tree-id11806 . -1) (undo-tree-id11807 . -1) (undo-tree-id11808 . -1) (undo-tree-id11809 . -1) (undo-tree-id11810 . -1) (undo-tree-id11811 . -1) (undo-tree-id11812 . -1) (undo-tree-id11813 . -1) (undo-tree-id11814 . -1) (undo-tree-id11815 . -1) (undo-tree-id11816 . -1) (undo-tree-id11817 . -1) (undo-tree-id11818 . -1) (undo-tree-id11819 . -1) (undo-tree-id11820 . -1) (undo-tree-id11821 . -1) (undo-tree-id11822 . -1) (undo-tree-id11823 . -1) (undo-tree-id11824 . -1) (undo-tree-id11825 . -1) (undo-tree-id11826 . -1) (undo-tree-id11827 . -1) (undo-tree-id11828 . -1) (undo-tree-id11829 . -1) (undo-tree-id11830 . -1) (undo-tree-id11831 . -1) (undo-tree-id11832 . -1) (undo-tree-id11833 . -1) (undo-tree-id11834 . -1) (undo-tree-id11835 . -1) (undo-tree-id11836 . -1) (undo-tree-id11837 . -1) (undo-tree-id11838 . -1) (undo-tree-id11839 . -1) (undo-tree-id11840 . -1) (undo-tree-id11841 . -1) (undo-tree-id11842 . -1) (undo-tree-id11843 . -1) (undo-tree-id11844 . -1) (undo-tree-id11845 . -1) (undo-tree-id11846 . -1) (undo-tree-id11847 . -1) (undo-tree-id11848 . -1) (undo-tree-id11849 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7457 . 7458) (7457 . 7458) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -7380) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7379 . 7380) (7379 . 7380) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -7302) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7301 . 7302) (7301 . 7302) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -7229) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7228 . 7229) (7228 . 7229) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -7148) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7147 . 7148) (7147 . 7148) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -7070) (nil wrap-prefix #("  " 0 2 (face org-indent)) 7069 . 7070) (7069 . 7070) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7563) (undo-tree-id11850 . -1) 7458 (t 25758 19079 682599 220000)) nil (25758 19084 694095 780000) 0 nil])
([nil nil ((6919 . 6920) (t 25758 19084 714718 881000) 6909) nil (25758 19087 972138 710000) 0 nil])
([nil nil ((6648 . 6649) (t 25758 19087 990796 788000) 6639) nil (25758 19096 443872 544000) 0 nil])
([nil nil ((6907 . 6908) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -6907) (undo-tree-id11852 . -1) (6836 . 6837) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 6836) (undo-tree-id11853 . -1) (undo-tree-id11854 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6837) (undo-tree-id11855 . -1) (6765 . 6766) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6765) (undo-tree-id11856 . -1) (6722 . 6723) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6722) (undo-tree-id11857 . -1) (6704 . 6705) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 6704) (undo-tree-id11858 . -1) (undo-tree-id11859 . -1) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -6705) (undo-tree-id11860 . -1) 6650 (t 25758 19096 462998 270000)) nil (25758 19104 928975 562000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -6889) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6888 . 6889) (6888 . 6889) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -6811) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6810 . 6811) (6810 . 6811) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -6731) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6730 . 6731) (6730 . 6731) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6917) (undo-tree-id11851 . -1) 6907) nil (25758 19104 928961 511000) 0 nil])
([nil nil ((#("It works exactly as we saw earlier:" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6919) (undo-tree-id11862 . -34) (undo-tree-id11863 . -1) (undo-tree-id11864 . -1) (undo-tree-id11865 . -1) (undo-tree-id11866 . -1) (undo-tree-id11867 . -1) (undo-tree-id11868 . -1) (undo-tree-id11869 . -1) (undo-tree-id11870 . -1) (undo-tree-id11871 . -1) (undo-tree-id11872 . -1) (undo-tree-id11873 . -1) (undo-tree-id11874 . -1) (undo-tree-id11875 . -1) (undo-tree-id11876 . -1) (undo-tree-id11877 . -1) (undo-tree-id11878 . -1) (undo-tree-id11879 . -1) (undo-tree-id11880 . -1) (undo-tree-id11881 . -1) (undo-tree-id11882 . -1) (undo-tree-id11883 . -1) (undo-tree-id11884 . -35) (t 25758 19104 951200 141000)) nil (25758 19147 429302 25000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 6919) (undo-tree-id11861 . -1)) nil (25758 19149 207004 891000) 0 nil])
([nil nil ((7005 . 7006)) nil (25758 19155 819528 77000) 0 nil] [nil nil ((7005 . 7006)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7005)) (25758 19147 429501 448000) 0 nil])
([nil nil ((7033 . 7034) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7033) (undo-tree-id11888 . -1) 7006) nil (25758 19155 819525 816000) 0 nil])
([nil nil ((7093 . 7094)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7093) (undo-tree-id11885 . -1) (undo-tree-id11886 . -1) (undo-tree-id11887 . -1)) (25758 19147 429269 952000) 0 nil])
([nil nil ((7057 . 7058)) nil (25758 19155 819511 623000) 0 nil])
nil
([nil nil ((7213 . 7214) (t 25758 19155 840410 644000)) nil (25758 19164 945857 761000) 0 nil])
([nil nil ((7217 . 7218)) nil (25758 19164 945852 566000) 0 nil])
([nil nil ((7268 . 7269) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -7268) (undo-tree-id11889 . -1) 7218 (t 25758 19165 12628 866000)) nil (25758 19171 547548 917000) 0 nil])
([nil nil ((7273 . 7274)) nil (25758 19171 547535 554000) 0 nil])
([nil nil ((7421 . 7423) (t 25758 19171 568784 850000)) nil (25758 19186 739162 506000) 0 nil])
([nil nil ((7427 . 7428) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -7427) (undo-tree-id11890 . -1) 7423 (t 25758 19186 761146 333000)) nil (25758 19188 305035 157000) 0 nil])
([nil nil ((7467 . 7468) (t 25758 19188 321183 455000)) nil (25758 19224 626317 812000) 0 nil])
([nil nil ((7431 . 7432) (t 25758 19224 694049 35000)) nil (25758 19234 138012 901000) 0 nil])
([nil nil ((#("NOTE
" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7537) (undo-tree-id11891 . -4) (undo-tree-id11892 . -5) (t 25758 19234 158274 285000)) nil (25758 19241 920039 540000) 0 nil])
([nil nil ((#("By default, recurrent layers in Keras only return the final output. To make them
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7537) (undo-tree-id11897 . -80) (undo-tree-id11898 . -81) (t 25758 19241 942459 560000)) nil (25758 19252 343702 906000) 0 nil])
([nil nil ((#("return one output per time step, you must set return_sequences=True , as we will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 53 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 62 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7537) (undo-tree-id11895 . -80) (undo-tree-id11896 . -81)) nil (25758 19252 343699 83000) 0 nil])
([nil nil ((#("see.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7537) (undo-tree-id11893 . -4) (undo-tree-id11894 . -5)) nil (25758 19252 343691 489000) 0 nil])
([nil nil ((#("(just like earlier, we train for
20 epochs using Adam)" 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7582) (undo-tree-id11932 . -53) (undo-tree-id11933 . -54) 7537 (t 25758 19252 366707 681000)) nil (25758 19274 957751 430000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7581) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) (undo-tree-id11907 . -1) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1) (undo-tree-id11913 . -1) (undo-tree-id11914 . -1) (undo-tree-id11915 . -1) (undo-tree-id11916 . -1) (undo-tree-id11917 . -1) (undo-tree-id11918 . -1) (undo-tree-id11919 . -1) (undo-tree-id11920 . -1) (undo-tree-id11921 . -1) (undo-tree-id11922 . -1) (undo-tree-id11923 . -1) (undo-tree-id11924 . -1) (undo-tree-id11925 . -1) (undo-tree-id11926 . -1) (undo-tree-id11927 . -1) (undo-tree-id11928 . -1) (undo-tree-id11929 . -1) (undo-tree-id11930 . -1) (undo-tree-id11931 . -1)) nil (25758 19274 957746 806000) 0 nil])
([nil nil ((7714 . 7715)) nil (25758 19274 957715 692000) 0 nil])
([nil nil ((#("(in the simple linear model we
used, that’s a total of 51 parameters)" 0 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 31 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7821) (undo-tree-id11981 . -68) (undo-tree-id11982 . -69) 7779 (t 25758 19275 27247 99000)) nil (25758 19303 200399 644000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7820) (undo-tree-id11948 . -1) (undo-tree-id11949 . -1) (undo-tree-id11950 . -1) (undo-tree-id11951 . -1) (undo-tree-id11952 . -1) (undo-tree-id11953 . -1) (undo-tree-id11954 . -1) (undo-tree-id11955 . -1) (undo-tree-id11956 . -1) (undo-tree-id11957 . -1) (undo-tree-id11958 . -1) (undo-tree-id11959 . -1) (undo-tree-id11960 . -1) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (undo-tree-id11963 . -1) (undo-tree-id11964 . -1) (undo-tree-id11965 . -1) (undo-tree-id11966 . -1) (undo-tree-id11967 . -1) (undo-tree-id11968 . -1) (undo-tree-id11969 . -1) (undo-tree-id11970 . -1) (undo-tree-id11971 . -1) (undo-tree-id11972 . -1) (undo-tree-id11973 . -1) (undo-tree-id11974 . -1) (undo-tree-id11975 . -1) (undo-tree-id11976 . -1) (undo-tree-id11977 . -1) (undo-tree-id11978 . -1) (undo-tree-id11979 . -1) (undo-tree-id11980 . -1)) nil (25758 19303 200355 622000) 0 nil])
([nil nil ((#("(in a simple RNN, that’s just the number of recurrent neurons in
the layer)" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 65 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7947) (undo-tree-id11946 . -74) (undo-tree-id11947 . -75) 7937) nil (25758 19303 200326 468000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7946) (undo-tree-id11934 . -1) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (undo-tree-id11940 . -1) (undo-tree-id11941 . -1) (undo-tree-id11942 . -1) (undo-tree-id11943 . -1) (undo-tree-id11944 . -1) (undo-tree-id11945 . -1)) nil (25758 19303 200320 993000) 0 nil])
([nil nil ((7966 . 7968) (t 25758 19303 271919 524000)) nil (25758 19306 873922 878000) 0 nil])
([nil nil ((7992 . 7993) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7992) (undo-tree-id11983 . -1) (t 25758 19306 896005 808000)) nil (25758 19318 208205 34000) 0 nil])
([nil nil ((8028 . 8030)) nil (25758 19318 208190 825000) 0 nil])
([nil nil ((#("TREND AND SEASONALITY
" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12051 . -21) (undo-tree-id12052 . 22) (undo-tree-id12053 . -22) (t 25758 19318 232275 719000)) nil (25758 19400 505470 990000) 0 nil])
([nil nil ((#("There are many other models to forecast time series, such as weighted
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12048 . -69) (undo-tree-id12049 . 70) (undo-tree-id12050 . -70)) nil (25758 19400 505468 230000) 0 nil])
([nil nil ((#("moving average models or autoregressive integrated moving average
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12045 . -65) (undo-tree-id12046 . 66) (undo-tree-id12047 . -66)) nil (25758 19400 505465 947000) 0 nil])
([nil nil ((#("(ARIMA) models. Some of them require you to first remove the trend
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12038 . -66) (undo-tree-id12039 . 67) (undo-tree-id12040 . 67) (undo-tree-id12041 . -1) (undo-tree-id12042 . 61) (undo-tree-id12043 . -7) (undo-tree-id12044 . -67)) nil (25758 19400 505463 588000) 0 nil])
([nil nil ((#("and seasonality. For example, if you are studying the number of active
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12035 . -70) (undo-tree-id12036 . 71) (undo-tree-id12037 . -71)) nil (25758 19400 505457 160000) 0 nil])
([nil nil ((#("users on your website, and it is growing by 10% every month, you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12032 . -64) (undo-tree-id12033 . 65) (undo-tree-id12034 . -65)) nil (25758 19400 505454 900000) 0 nil])
([nil nil ((#("would have to remove this trend from the time series. Once the model
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12029 . -68) (undo-tree-id12030 . 69) (undo-tree-id12031 . -69)) nil (25758 19400 505452 258000) 0 nil])
([nil nil ((#("is trained and starts making predictions, you would have to add the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12026 . -67) (undo-tree-id12027 . 68) (undo-tree-id12028 . -68)) nil (25758 19400 505449 914000) 0 nil])
([nil nil ((#("trend back to get the final predictions. Similarly, if you are trying to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12023 . -72) (undo-tree-id12024 . 73) (undo-tree-id12025 . -73)) nil (25758 19400 505447 583000) 0 nil])
([nil nil ((#("predict the amount of sunscreen lotion sold every month, you will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12020 . -65) (undo-tree-id12021 . 66) (undo-tree-id12022 . -66)) nil (25758 19400 505444 825000) 0 nil])
([nil nil ((#("probably observe strong seasonality: since it sells well every summer,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12017 . -70) (undo-tree-id12018 . 71) (undo-tree-id12019 . -71)) nil (25758 19400 505442 451000) 0 nil])
([nil nil ((#("a similar pattern will be repeated every year. You would have to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12014 . -64) (undo-tree-id12015 . 65) (undo-tree-id12016 . -65)) nil (25758 19400 505440 106000) 0 nil])
([nil nil ((#("remove this seasonality from the time series, for example by
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12011 . -60) (undo-tree-id12012 . 61) (undo-tree-id12013 . -61)) nil (25758 19400 505437 471000) 0 nil])
([nil nil ((#("computing the difference between the value at each time step and the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 27 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12008 . -68) (undo-tree-id12009 . 69) (undo-tree-id12010 . -69)) nil (25758 19400 505435 113000) 0 nil])
([nil nil ((#("value one year earlier (this technique is called differencing). Again,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12005 . -70) (undo-tree-id12006 . 71) (undo-tree-id12007 . -71)) nil (25758 19400 505432 540000) 0 nil])
([nil nil ((#("after the model is trained and makes predictions, you would have to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12002 . -67) (undo-tree-id12003 . 68) (undo-tree-id12004 . -68)) nil (25758 19400 505429 876000) 0 nil])
([nil nil ((#("add the seasonal pattern back to get the final predictions.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id11999 . -59) (undo-tree-id12000 . 60) (undo-tree-id12001 . -60)) nil (25758 19400 505427 255000) 0 nil])
([nil nil ((#("When using RNNs, it is generally not necessary to do all this, but it
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id11996 . -69) (undo-tree-id11997 . 70) (undo-tree-id11998 . -70)) nil (25758 19400 505424 544000) 0 nil])
([nil nil ((#("may improve performance in some cases, since the model will not
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id11993 . -63) (undo-tree-id11994 . 64) (undo-tree-id11995 . -64)) nil (25758 19400 505421 189000) 0 nil])
([nil nil ((#("have to learn the trend or the seasonality.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id11990 . -43) (undo-tree-id11991 . 44) (undo-tree-id11992 . -44)) nil (25758 19400 505418 352000) 0 nil])
([nil nil ((#("Apparently our simple RNN was too simple to get good performance. So
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id11987 . -68) (undo-tree-id11988 . 69) (undo-tree-id11989 . -69)) nil (25758 19400 505415 55000) 0 nil])
([nil nil ((#("let’s try to add more recurrent layers!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 38 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8030) (undo-tree-id11984 . -39) (undo-tree-id11985 . 40) (undo-tree-id11986 . -40)) nil (25758 19400 505409 364000) 0 nil])
([nil nil ((8029 . 8030) (t 25758 19400 526235 473000) 6443) nil (25758 19410 933699 959000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8146 . 8147) (nil fontified nil 8118 . 8147) (nil fontified nil 8041 . 8118) (nil fontified nil 8031 . 8041) (8031 . 8147) (t 25758 19410 958483 950000)) nil (25758 19444 241787 218000) 0 nil])
([nil nil ((8147 . 8148)) nil (25758 19444 241785 146000) 0 nil])
([nil nil ((8031 . 8033)) nil (25758 19444 241780 268000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10537 . 10538) (nil fontified nil 10531 . 10538) (nil fontified nil 10456 . 10531) (nil fontified nil 10380 . 10456) (nil fontified nil 10377 . 10380) (nil fontified nil 10355 . 10377) (nil fontified nil 10327 . 10355) (nil fontified nil 10322 . 10327) (nil fontified nil 10253 . 10322) (nil fontified nil 10219 . 10253) (nil fontified nil 10153 . 10219) (nil fontified nil 10094 . 10153) (nil fontified nil 10021 . 10094) (nil fontified nil 9948 . 10021) (nil fontified nil 9870 . 9948) (nil fontified nil 9794 . 9870) (nil fontified nil 9721 . 9794) (nil fontified nil 9649 . 9721) (nil fontified nil 9573 . 9649) (nil fontified nil 9495 . 9573) (nil fontified nil 9424 . 9495) (nil fontified nil 9349 . 9424) (nil fontified nil 9278 . 9349) (nil fontified nil 9205 . 9278) (nil fontified nil 9128 . 9205) (nil fontified nil 9069 . 9128) (nil fontified nil 8943 . 9069) (nil fontified nil 8854 . 8943) (nil fontified nil 8769 . 8854) (nil fontified nil 8681 . 8769) (nil fontified nil 8600 . 8681) (nil fontified nil 8592 . 8600) (nil fontified nil 8589 . 8592) (nil fontified nil 8563 . 8589) (nil fontified nil 8512 . 8563) (nil fontified nil 8507 . 8512) (nil fontified nil 8438 . 8507) (nil fontified nil 8404 . 8438) (nil fontified nil 8365 . 8404) (nil fontified nil 8289 . 8365) (nil fontified nil 8216 . 8289) (nil fontified nil 8150 . 8216) (8150 . 10538) (t 25758 19444 311278 409000)) nil (25758 19457 476174 679000) 0 nil])
([nil nil ((10538 . 10539)) nil (25758 19457 476164 967000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8030) (undo-tree-id12223 . -1) (undo-tree-id12224 . -1) (t 25758 19457 499592 578000)) nil (25758 19541 636947 327000) 0 nil])
([nil nil ((#("It is quite common to stack multiple layers of cells, as shown in Figure 15-
" 0 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8042) (undo-tree-id12209 . -76) (undo-tree-id12210 . -3) (undo-tree-id12211 . -3) (undo-tree-id12212 . -3) (undo-tree-id12213 . -3) (undo-tree-id12214 . -3) (undo-tree-id12215 . -3) (undo-tree-id12216 . -3) (undo-tree-id12217 . -3) (undo-tree-id12218 . -3) (undo-tree-id12219 . -3) (undo-tree-id12220 . -3) (undo-tree-id12221 . -3) (undo-tree-id12222 . -77) 8045) nil (25758 19541 636944 727000) 0 nil])
([nil nil ((#("7. This gives you a deep RNN.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t rear-nonsticky t) 29 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 8042) (undo-tree-id12183 . -29) (undo-tree-id12184 . 5) (undo-tree-id12185 . -28) (undo-tree-id12186 . -30) (undo-tree-id12187 . -3) (undo-tree-id12188 . -3) (undo-tree-id12189 . -3) (undo-tree-id12190 . -3) (undo-tree-id12191 . -3) (undo-tree-id12192 . -3) (undo-tree-id12193 . -3) (undo-tree-id12194 . -3) (undo-tree-id12195 . -3) (undo-tree-id12196 . -3) (undo-tree-id12197 . -3) (undo-tree-id12198 . -3) (undo-tree-id12199 . -3) (undo-tree-id12200 . -3) (undo-tree-id12201 . -3) (undo-tree-id12202 . -3) (undo-tree-id12203 . -3) (undo-tree-id12204 . -3) (undo-tree-id12205 . -3) (undo-tree-id12206 . -3) (undo-tree-id12207 . -3) (undo-tree-id12208 . -30) 8045) nil (25758 19541 636936 51000) 0 nil])
([nil nil ((#("(but we
could add any other type of recurrent layer, such as an LSTM layer or a GRU
layer, which we will discuss shortly)" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 84 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8173) (undo-tree-id12181 . -120) (undo-tree-id12182 . -121) 8126) nil (25758 19541 636918 978000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8172) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1)) nil (25758 19541 636916 415000) 0 nil])
([nil nil ((apply yas--snippet-revive 8174 8221 #s(yas--snippet nil (#s(yas--field 1 8186 8192 nil nil nil t #s(yas--exit 8210 nil))) #s(yas--exit 8210 nil) 4 nil #s(yas--field 1 8186 8192 nil nil nil t #s(yas--exit 8210 nil)) nil nil)) (8186 . 8192) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8186 8192 nil nil nil t #s(yas--exit 8210 nil))) #s(yas--exit 8210 nil) 4 nil #s(yas--field 1 8186 8192 nil nil nil t #s(yas--exit 8210 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -8204) (undo-tree-id12119 . -2) (8174 . 8217) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8174) (undo-tree-id12120 . -1) (undo-tree-id12121 . -2) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) (undo-tree-id12129 . -1) (undo-tree-id12130 . -1) (undo-tree-id12131 . -1) (undo-tree-id12132 . -1) (undo-tree-id12133 . -1) (undo-tree-id12134 . -1) (undo-tree-id12135 . -1) (undo-tree-id12136 . -1) (undo-tree-id12137 . -1) (undo-tree-id12138 . -1) (undo-tree-id12139 . -1) (undo-tree-id12140 . -1) (undo-tree-id12141 . -1) (undo-tree-id12142 . -1) (undo-tree-id12143 . -1) (undo-tree-id12144 . -1) (undo-tree-id12145 . -1) (undo-tree-id12146 . -1) (undo-tree-id12147 . -1) (undo-tree-id12148 . -1) (undo-tree-id12149 . -1) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -2) (undo-tree-id12159 . -2) (undo-tree-id12160 . -2) (undo-tree-id12161 . -2) (undo-tree-id12162 . -2) (undo-tree-id12163 . -2) (undo-tree-id12164 . -2) (undo-tree-id12165 . -2) (undo-tree-id12166 . -2) (undo-tree-id12167 . -2) (undo-tree-id12168 . -2) 8176 (8174 . 8176) (8173 . 8174) 8108) nil (25758 19541 636907 523000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 8209) (undo-tree-id12082 . -2) (undo-tree-id12083 . 2) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -1) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1) (undo-tree-id12100 . -1) (undo-tree-id12101 . -1) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) (undo-tree-id12106 . -1) (undo-tree-id12107 . -1) (undo-tree-id12108 . -1) (undo-tree-id12109 . -1) (undo-tree-id12110 . -1) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1) (undo-tree-id12118 . -3)) nil (25758 19541 636873 920000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 8209) (undo-tree-id12054 . -9) (undo-tree-id12055 . 10) (undo-tree-id12056 . -10) (undo-tree-id12057 . -10) (undo-tree-id12058 . -10) (undo-tree-id12059 . -10) (undo-tree-id12060 . -10) (undo-tree-id12061 . -10) (undo-tree-id12062 . -10) (undo-tree-id12063 . -10) (undo-tree-id12064 . -10) (undo-tree-id12065 . -10) (undo-tree-id12066 . -10) (undo-tree-id12067 . -10) (undo-tree-id12068 . -10) (undo-tree-id12069 . -10) (undo-tree-id12070 . -10) (undo-tree-id12071 . -9) (undo-tree-id12072 . -9) (undo-tree-id12073 . -9) (undo-tree-id12074 . -9) (undo-tree-id12075 . -9) (undo-tree-id12076 . -9) (undo-tree-id12077 . -9) (undo-tree-id12078 . -9) (undo-tree-id12079 . -9) (undo-tree-id12080 . -9) (undo-tree-id12081 . -10)) nil (25758 19541 636848 530000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8396 . 8397) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -8406) (8396 . 8407) 8394) nil (25758 19552 756873 938000) 0 nil])
([nil nil ((8266 . 8267)) nil (25758 19571 672434 344000) 0 nil] [nil nil ((8311 . 8312) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -8311) (undo-tree-id12225 . -1) (undo-tree-id12226 . -1) (undo-tree-id12227 . -1) (undo-tree-id12228 . -1) (undo-tree-id12229 . -1) (undo-tree-id12230 . -1) (undo-tree-id12231 . -1) (undo-tree-id12232 . -1) (undo-tree-id12233 . -1) 8243 (t 25758 19541 653597 587000)) ((8311 . 8312) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 8311) (undo-tree-id12234 . -1) (t 25758 19546 889722 357000)) (25758 19546 865586 121000) 0 nil])
([nil nil ((8312 . 8313) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -8312) (undo-tree-id12235 . -1) (undo-tree-id12236 . -1) (undo-tree-id12237 . -1) (undo-tree-id12238 . -1) (undo-tree-id12239 . -1) (undo-tree-id12240 . -1) (undo-tree-id12241 . -1) (undo-tree-id12242 . -1) (undo-tree-id12243 . -1) 8267) nil (25758 19571 672432 538000) 0 nil])
nil
([nil nil ((8271 . 8272)) nil (25758 19571 672417 547000) 0 nil])
([nil nil (8267) nil (25758 19571 672416 275000) 0 nil])
([nil nil ((8409 . 8410) (8408 . 8409) (8407 . 8408) (8406 . 8407) (8405 . 8406) (8404 . 8405) (8403 . 8404) (8402 . 8403) (8401 . 8402) (8400 . 8401) (8348 . 8349) (8347 . 8348) (8346 . 8347) (8345 . 8346) (8344 . 8345) (8343 . 8344) (8342 . 8343) (8341 . 8342) (8340 . 8341) (8339 . 8340) (8291 . 8292) (8290 . 8291) (8289 . 8290) (8288 . 8289) (8287 . 8288) (8286 . 8287) (8285 . 8286) (8284 . 8285) (8283 . 8284) (8282 . 8283) (8267 . 8277)) nil (25758 19571 672410 631000) 0 nil])
([nil nil ((#("WARNING
" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12244 . -7) (undo-tree-id12245 . -8) (undo-tree-id12246 . -8) (undo-tree-id12247 . -8) (undo-tree-id12248 . -8) (undo-tree-id12249 . -8) (undo-tree-id12250 . -8) (undo-tree-id12251 . -8) (undo-tree-id12252 . -8) (undo-tree-id12253 . -6) (undo-tree-id12254 . -6) (undo-tree-id12255 . -6) (undo-tree-id12256 . -6) (undo-tree-id12257 . -6) (undo-tree-id12258 . -6) (undo-tree-id12259 . -6) (undo-tree-id12260 . -6) (undo-tree-id12261 . -8) (t 25758 19571 694313 438000)) nil (25758 19582 737177 310000) 0 nil])
([nil nil ((#("Make sure to set return_sequences=True for all recurrent layers (except the last
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 24 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 33 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 50 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12284 . -80) (undo-tree-id12285 . -81) (t 25758 19582 762577 198000)) nil (25758 19671 330351 953000) 0 nil])
([nil nil ((#("one, if you only care about the last output). If you don’t, they will output a 2D array
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12282 . -87) (undo-tree-id12283 . -88)) nil (25758 19671 330349 915000) 0 nil])
([nil nil ((#("(containing only the output of the last time step) instead of a 3D array (containing
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12276 . -84) (undo-tree-id12277 . 85) (undo-tree-id12278 . -1) (undo-tree-id12279 . 36) (undo-tree-id12280 . -50) (undo-tree-id12281 . -85)) nil (25758 19671 330347 809000) 0 nil])
([nil nil ((#("outputs for all time steps), and the next recurrent layer will complain that you are not
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12274 . -88) (undo-tree-id12275 . -89)) nil (25758 19671 330343 9000) 0 nil])
([nil nil ((#("feeding it sequences in the expected 3D format" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12272 . -45) (undo-tree-id12273 . -46)) nil (25758 19671 330340 997000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12271 . -1)) nil (25758 19671 330339 100000) 0 nil])
([nil nil ((#("If you compile, fit, and evaluate this model, you will find that it reaches an
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12269 . -78) (undo-tree-id12270 . -79)) nil (25758 19671 330337 530000) 0 nil])
([nil nil ((#("MSE of 0.003. We finally managed to beat the linear model!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8449) (undo-tree-id12265 . -58) (undo-tree-id12266 . 59) (undo-tree-id12267 . -3) (undo-tree-id12268 . -59)) nil (25758 19671 330335 405000) 0 nil])
([nil nil ((8721 . 8722) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8721) (undo-tree-id12264 . -1)) nil (25758 19671 330331 762000) 0 nil])
([nil nil ((8747 . 8748) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8747) (undo-tree-id12263 . -1)) nil (25758 19671 330329 882000) 0 nil])
([nil nil ((8967 . 8968) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8967) (undo-tree-id12262 . -1)) nil (25758 19671 330326 290000) 0 nil])
([nil nil ((8994 . 8996)) nil (25758 19671 330313 20000) 0 nil])
([nil nil ((9416 . 9417) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9416) (undo-tree-id12286 . -1) (9343 . 9344) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9343) (undo-tree-id12287 . -1) (9270 . 9271) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9270) (undo-tree-id12288 . -1) (9192 . 9193) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9192) (undo-tree-id12289 . -1) (9116 . 9117) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9116) (undo-tree-id12290 . -1) (9043 . 9044) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9043) (undo-tree-id12291 . -1) (undo-tree-id12292 . -1) (undo-tree-id12293 . -1) (undo-tree-id12294 . -1) (undo-tree-id12295 . -1) (undo-tree-id12296 . -1) (undo-tree-id12297 . -1) (undo-tree-id12298 . -1) (undo-tree-id12299 . -1) 8996 (t 25758 19671 396689 662000)) nil (25758 19679 385861 953000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -9469) (nil fontified nil 9468 . 9469) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9468 . 9469) (9468 . 9469) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -9390) (nil fontified nil 9389 . 9390) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9389 . 9390) (9389 . 9390) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -9314) (nil fontified nil 9313 . 9314) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9313 . 9314) (9313 . 9314) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -9236) (nil fontified nil 9235 . 9236) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9235 . 9236) (9235 . 9236) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -9156) (nil fontified nil 9155 . 9156) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9155 . 9156) (9155 . 9156) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -9076) (nil fontified nil 9075 . 9076) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9075 . 9076) (9075 . 9076) 9416) nil (25758 19679 385835 858000) 0 nil])
([nil nil ((8488 . 8489) (t 25758 19679 408880 640000)) nil (25758 19780 772644 293000) 0 nil])
([nil nil ((8526 . 8527) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -8526) (undo-tree-id12300 . -1) 8489 (t 25758 19780 799297 641000)) nil (25758 19788 773790 757000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -8570) (nil fontified nil 8569 . 8570) (nil wrap-prefix #("  " 0 2 (face org-indent)) 8569 . 8570) (8569 . 8570) 8526) nil (25758 19788 773779 575000) 0 nil])
([nil nil ((8599 . 8600) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -8599) (undo-tree-id12301 . -1) 8570 (t 25758 19788 799488 373000)) nil (25758 19796 876248 489000) 0 nil])
([nil nil ((8635 . 8636)) nil (25758 19796 876234 781000) 0 nil])
([nil nil ((8720 . 8721) (8719 . 8720) (t 25758 19796 899681 489000)) nil (25758 19804 949170 945000) 0 nil])
([nil nil ((apply yas--snippet-revive 9481 9528 #s(yas--snippet nil (#s(yas--field 1 9493 9499 nil nil nil t #s(yas--exit 9517 nil))) #s(yas--exit 9517 nil) 5 nil #s(yas--field 1 9493 9499 nil nil nil t #s(yas--exit 9517 nil)) nil nil)) (9493 . 9499) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9493 9499 nil nil nil t #s(yas--exit 9517 nil))) #s(yas--exit 9517 nil) 5 nil #s(yas--field 1 9493 9499 nil nil nil t #s(yas--exit 9517 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9511) (undo-tree-id12352 . -2) (9481 . 9524) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9481) (undo-tree-id12353 . -2) (undo-tree-id12354 . -1) (undo-tree-id12355 . -1) (undo-tree-id12356 . -1) (undo-tree-id12357 . -1) (undo-tree-id12358 . -1) (undo-tree-id12359 . -1) (undo-tree-id12360 . -1) (undo-tree-id12361 . -1) (undo-tree-id12362 . -2) (undo-tree-id12363 . -2) (undo-tree-id12364 . -2) (undo-tree-id12365 . -2) (undo-tree-id12366 . -2) (undo-tree-id12367 . -2) (undo-tree-id12368 . -2) (undo-tree-id12369 . 2) (undo-tree-id12370 . -2) (undo-tree-id12371 . -2) (undo-tree-id12372 . -2) (undo-tree-id12373 . -2) (undo-tree-id12374 . -2) (undo-tree-id12375 . -2) (undo-tree-id12376 . -2) (undo-tree-id12377 . -2) (undo-tree-id12378 . -2) (undo-tree-id12379 . -2) 9483 (9481 . 9483) (9480 . 9481) (9479 . 9480) (t 25758 19804 971873 941000) 9473) nil (25758 19894 600516 845000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 9516) (undo-tree-id12315 . -2) (undo-tree-id12316 . 2) (undo-tree-id12317 . -1) (undo-tree-id12318 . -1) (undo-tree-id12319 . -1) (undo-tree-id12320 . -1) (undo-tree-id12321 . -1) (undo-tree-id12322 . -1) (undo-tree-id12323 . -1) (undo-tree-id12324 . -1) (undo-tree-id12325 . -1) (undo-tree-id12326 . -1) (undo-tree-id12327 . -1) (undo-tree-id12328 . -1) (undo-tree-id12329 . -1) (undo-tree-id12330 . -1) (undo-tree-id12331 . -1) (undo-tree-id12332 . -1) (undo-tree-id12333 . -1) (undo-tree-id12334 . -1) (undo-tree-id12335 . -1) (undo-tree-id12336 . -1) (undo-tree-id12337 . -1) (undo-tree-id12338 . -1) (undo-tree-id12339 . -1) (undo-tree-id12340 . -1) (undo-tree-id12341 . -1) (undo-tree-id12342 . -1) (undo-tree-id12343 . -1) (undo-tree-id12344 . -1) (undo-tree-id12345 . -1) (undo-tree-id12346 . -1) (undo-tree-id12347 . -1) (undo-tree-id12348 . -1) (undo-tree-id12349 . -1) (undo-tree-id12350 . -1) (undo-tree-id12351 . -3)) nil (25758 19894 600498 891000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 9516) (undo-tree-id12302 . -9) (undo-tree-id12303 . 10) (undo-tree-id12304 . -9) (undo-tree-id12305 . -9) (undo-tree-id12306 . -9) (undo-tree-id12307 . -9) (undo-tree-id12308 . -9) (undo-tree-id12309 . -9) (undo-tree-id12310 . -9) (undo-tree-id12311 . -9) (undo-tree-id12312 . -9) (undo-tree-id12313 . -9) (undo-tree-id12314 . -10)) nil (25758 19894 600475 720000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9742 . 9743) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -9752) (9742 . 9753) 9740) nil (25758 19900 116782 778000) 0 nil])
([nil nil ((9684 . 9685) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t)) . -9684) (undo-tree-id12389 . -1) (undo-tree-id12390 . -1) (undo-tree-id12391 . -1) (undo-tree-id12392 . -1) (undo-tree-id12393 . -1) (undo-tree-id12394 . -1) (undo-tree-id12395 . -1) (undo-tree-id12396 . -1) (undo-tree-id12397 . -1) 9616) nil (25758 19909 965756 271000) 0 nil] [nil nil ((9684 . 9685) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t src-block t)) . -9684) (undo-tree-id12380 . -1) (undo-tree-id12381 . -1) (undo-tree-id12382 . -1) (undo-tree-id12383 . -1) (undo-tree-id12384 . -1) (undo-tree-id12385 . -1) (undo-tree-id12386 . -1) (undo-tree-id12387 . -1) (undo-tree-id12388 . -1) 9616 (t 25758 19894 622011 497000)) ((9684 . 9685) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t src-block t)) . 9684) (t 25758 19898 782110 692000)) (25758 19898 756642 818000) 0 nil])
([nil nil ((#("If you train " 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9753) (undo-tree-id12417 . -12) (undo-tree-id12418 . -12) (undo-tree-id12419 . -12) (undo-tree-id12420 . -13) (undo-tree-id12421 . -12) (undo-tree-id12422 . -1) (undo-tree-id12423 . -1) (undo-tree-id12424 . -1) (undo-tree-id12425 . -1) (undo-tree-id12426 . -1) (undo-tree-id12427 . -1) (undo-tree-id12428 . -1) (undo-tree-id12429 . -1) (undo-tree-id12430 . -5) (undo-tree-id12431 . -5) (undo-tree-id12432 . -5) (undo-tree-id12433 . -5) (undo-tree-id12434 . -5) (undo-tree-id12435 . -5) (undo-tree-id12436 . -5) (undo-tree-id12437 . -5) (undo-tree-id12438 . -11) (undo-tree-id12439 . -11) (undo-tree-id12440 . -11) (undo-tree-id12441 . -11) (undo-tree-id12442 . -11) (undo-tree-id12443 . -11) (undo-tree-id12444 . -11) (undo-tree-id12445 . -11) (undo-tree-id12446 . -12) (undo-tree-id12447 . -12) (undo-tree-id12448 . -12) (undo-tree-id12449 . -12) (undo-tree-id12450 . -12) (undo-tree-id12451 . -12) (undo-tree-id12452 . -12) (undo-tree-id12453 . -12) (undo-tree-id12454 . -12) (undo-tree-id12455 . -13) 9765 (t 25758 19910 34379 3000)) nil (25758 19935 216345 230000) 0 nil])
nil
([nil nil ((9753 . 9754) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9753)) nil (25758 19935 216204 587000) 0 nil])
([nil nil ((#(", you will see that it" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9763) (undo-tree-id12405 . -21) (undo-tree-id12406 . -21) (undo-tree-id12407 . -21) (undo-tree-id12408 . -22) (undo-tree-id12409 . -21) (undo-tree-id12410 . -4) (undo-tree-id12411 . -9) (undo-tree-id12412 . -13) (undo-tree-id12413 . -18) (undo-tree-id12414 . -21) (undo-tree-id12415 . -21) (undo-tree-id12416 . -22) 9784) nil (25758 19935 216203 247000) 0 nil])
([nil nil ((9793 . 9794) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9793) (undo-tree-id12404 . -1) 9763) nil (25758 19935 216193 93000) 0 nil])
([nil nil ((9808 . 9809)) nil (25758 19936 441056 808000) 0 nil])
([nil nil ((9812 . 9820) (9809 . 9812) (#("Plus, you could" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9809) (undo-tree-id12457 . -14) (undo-tree-id12458 . 15) (undo-tree-id12459 . -14) (undo-tree-id12460 . -14) (undo-tree-id12461 . -15) (undo-tree-id12462 . -14) (undo-tree-id12463 . -3) (undo-tree-id12464 . -3) (undo-tree-id12465 . -3) (undo-tree-id12466 . -3) (undo-tree-id12467 . -3) (undo-tree-id12468 . -3) (undo-tree-id12469 . -3) (undo-tree-id12470 . -3) (undo-tree-id12471 . -4) (undo-tree-id12472 . -8) (undo-tree-id12473 . -14) (undo-tree-id12474 . -14) (undo-tree-id12475 . -15) (undo-tree-id12476 . -15) (undo-tree-id12477 . -15) 9823) nil (25758 19944 258264 500000) 0 nil] [nil nil ((#("Plus, you could change the output activation function if you
" 0 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9809) (undo-tree-id12401 . -60) (undo-tree-id12402 . 61) (undo-tree-id12403 . -61)) ((9809 . 9870)) (25758 19936 12017 296000) 0 nil])
([nil nil ((9865 . 9866) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9865) (undo-tree-id12456 . -1) 9819) nil (25758 19944 258240 971000) 0 nil])
([nil nil ((#("wanted.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9809) (undo-tree-id12398 . -7) (undo-tree-id12399 . 8) (undo-tree-id12400 . -8)) ((9809 . 9817) (t 25758 19935 286981 169000)) (25758 19935 216183 654000) 0 nil])
([nil nil ((9874 . 9876) (t 25758 19944 283195 690000)) nil (25758 19977 431595 439000) 0 nil])
nil
([nil nil ((9876 . 9877)) nil (25758 19977 431594 719000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11734 . 11735) (nil fontified nil 11677 . 11735) (nil fontified nil 11599 . 11677) (nil fontified nil 11528 . 11599) (nil fontified nil 11455 . 11528) (nil fontified nil 11383 . 11455) (nil fontified nil 11312 . 11383) (nil fontified nil 11240 . 11312) (nil fontified nil 11173 . 11240) (nil fontified nil 11099 . 11173) (nil fontified nil 11026 . 11099) (nil fontified nil 10952 . 11026) (nil fontified nil 10877 . 10952) (nil fontified nil 10802 . 10877) (nil fontified nil 10778 . 10802) (nil fontified nil 10734 . 10778) (nil fontified nil 10670 . 10734) (nil fontified nil 10641 . 10670) (nil fontified nil 10631 . 10641) (nil fontified nil 10575 . 10631) (nil fontified nil 10528 . 10575) (nil fontified nil 10474 . 10528) (nil fontified nil 10405 . 10474) (nil fontified nil 10330 . 10405) (nil fontified nil 10253 . 10330) (nil fontified nil 10214 . 10253) (nil fontified nil 10066 . 10214) (nil fontified nil 9990 . 10066) (nil fontified nil 9914 . 9990) (nil fontified nil 9877 . 9914) (9877 . 11735)) nil (25758 19977 431592 994000) 0 nil])
([nil nil ((nil keymap (keymap) 9875 . 9876) (nil face org-level-1 9875 . 9876) (nil line-prefix #("  " 0 2 (face org-indent)) 9875 . 9876) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9875 . 9876) (nil fontified nil 9875 . 9876) (9875 . 9876) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 9875) (undo-tree-id12478 . -1) (undo-tree-id12479 . -1) (undo-tree-id12480 . -1) (undo-tree-id12481 . -1) (undo-tree-id12482 . -1) (undo-tree-id12483 . -1) (undo-tree-id12484 . -1) (undo-tree-id12485 . -1) (undo-tree-id12486 . -1) (undo-tree-id12487 . -1) (undo-tree-id12488 . -1) (undo-tree-id12489 . -1) (undo-tree-id12490 . -1) (undo-tree-id12491 . -1) (undo-tree-id12492 . -1) (undo-tree-id12493 . -1) (undo-tree-id12494 . -1) (undo-tree-id12495 . -1) (undo-tree-id12496 . -1) (undo-tree-id12497 . -1) (undo-tree-id12498 . -1) (undo-tree-id12499 . -1) (undo-tree-id12500 . -1) (undo-tree-id12501 . -1) (undo-tree-id12502 . -1) (undo-tree-id12503 . -1) (undo-tree-id12504 . -1) (undo-tree-id12505 . -1) (undo-tree-id12506 . -1) (undo-tree-id12507 . -1) (undo-tree-id12508 . -1) (undo-tree-id12509 . -1) (undo-tree-id12510 . -1) (undo-tree-id12511 . -1) (undo-tree-id12512 . -1) (undo-tree-id12513 . -1) (undo-tree-id12514 . -1) (undo-tree-id12515 . -1) (undo-tree-id12516 . -1) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -9876) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) (undo-tree-id12548 . -1) (undo-tree-id12549 . -1) (undo-tree-id12550 . -1) (undo-tree-id12551 . -1) (undo-tree-id12552 . -1) (undo-tree-id12553 . -1) (undo-tree-id12554 . -1) (undo-tree-id12555 . -1) (undo-tree-id12556 . -1) (undo-tree-id12557 . -1) (undo-tree-id12558 . -1) (undo-tree-id12559 . -1) 9874) nil (25758 19977 431584 541000) 0 nil])
([nil nil ((11734 . 11735)) nil (25758 19977 431178 682000) 0 nil])
([nil nil ((#("(e.g., to predict 10 steps ahead, just change thetargets to be the value 10 steps ahead instead of 1 step ahead)" 0 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10087) (undo-tree-id12677 . -111) (undo-tree-id12678 . -3) (undo-tree-id12679 . -1) (undo-tree-id12680 . -1) (undo-tree-id12681 . -1) (undo-tree-id12682 . -1) (undo-tree-id12683 . -1) (undo-tree-id12684 . -1) (undo-tree-id12685 . -1) (undo-tree-id12686 . -1) (undo-tree-id12687 . -1) (undo-tree-id12688 . -1) (undo-tree-id12689 . -1) (undo-tree-id12690 . -1) (undo-tree-id12691 . -1) (undo-tree-id12692 . -1) (undo-tree-id12693 . -1) (undo-tree-id12694 . -2) (undo-tree-id12695 . -2) (undo-tree-id12696 . -2) (undo-tree-id12697 . -2) (undo-tree-id12698 . -2) (undo-tree-id12699 . -2) (undo-tree-id12700 . -2) (undo-tree-id12701 . -2) (undo-tree-id12702 . -2) (undo-tree-id12703 . -2) (undo-tree-id12704 . -2) (undo-tree-id12705 . -2) (undo-tree-id12706 . -2) (undo-tree-id12707 . -2) (undo-tree-id12708 . -2) (undo-tree-id12709 . -2) (undo-tree-id12710 . -2) (undo-tree-id12711 . -2) (undo-tree-id12712 . -2) (undo-tree-id12713 . -2) (undo-tree-id12714 . -2) (undo-tree-id12715 . -2) (undo-tree-id12716 . -3) (undo-tree-id12717 . -3) (undo-tree-id12718 . -3) (undo-tree-id12719 . -3) (undo-tree-id12720 . -3) (undo-tree-id12721 . -3) (undo-tree-id12722 . -3) (undo-tree-id12723 . -3) (undo-tree-id12724 . -3) (undo-tree-id12725 . -3) (undo-tree-id12726 . -3) (undo-tree-id12727 . -3) (undo-tree-id12728 . -3) (undo-tree-id12729 . -3) (undo-tree-id12730 . -3) (undo-tree-id12731 . -3) (undo-tree-id12732 . -3) (undo-tree-id12733 . -3) (undo-tree-id12734 . -3) (undo-tree-id12735 . -3) (undo-tree-id12736 . -3) (undo-tree-id12737 . -3) (undo-tree-id12738 . -3) (undo-tree-id12739 . -3) (undo-tree-id12740 . -3) (undo-tree-id12741 . -3) (undo-tree-id12742 . -3) (undo-tree-id12743 . -3) (undo-tree-id12744 . -3) (undo-tree-id12745 . -3) (undo-tree-id12746 . -3) (undo-tree-id12747 . -3) (undo-tree-id12748 . -3) (undo-tree-id12749 . -3) (undo-tree-id12750 . -3) (undo-tree-id12751 . -3) (undo-tree-id12752 . -3) (undo-tree-id12753 . -3) (undo-tree-id12754 . -3) (undo-tree-id12755 . -3) (undo-tree-id12756 . -3) (undo-tree-id12757 . -3) (undo-tree-id12758 . -3) (undo-tree-id12759 . -3) (undo-tree-id12760 . -3) (undo-tree-id12761 . -3) (undo-tree-id12762 . -3) (undo-tree-id12763 . -3) (undo-tree-id12764 . -3) (undo-tree-id12765 . -3) (undo-tree-id12766 . -3) (undo-tree-id12767 . -3) (undo-tree-id12768 . -3) (undo-tree-id12769 . -112) 10090 (t 25758 19977 455986 746000)) nil (25758 20067 154359 206000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10086) (undo-tree-id12561 . -1) (undo-tree-id12562 . -1) (undo-tree-id12563 . -1) (undo-tree-id12564 . -1) (undo-tree-id12565 . -1) (undo-tree-id12566 . -1) (undo-tree-id12567 . -1) (undo-tree-id12568 . -1) (undo-tree-id12569 . -1) (undo-tree-id12570 . -1) (undo-tree-id12571 . -1) (undo-tree-id12572 . -1) (undo-tree-id12573 . -1) (undo-tree-id12574 . -1) (undo-tree-id12575 . -1) (undo-tree-id12576 . -1) (undo-tree-id12577 . -1) (undo-tree-id12578 . -1) (undo-tree-id12579 . -1) (undo-tree-id12580 . -1) (undo-tree-id12581 . -1) (undo-tree-id12582 . -1) (undo-tree-id12583 . -1) (undo-tree-id12584 . -1) (undo-tree-id12585 . -1) (undo-tree-id12586 . -1) (undo-tree-id12587 . -1) (undo-tree-id12588 . -1) (undo-tree-id12589 . -1) (undo-tree-id12590 . -1) (undo-tree-id12591 . -1) (undo-tree-id12592 . -1) (undo-tree-id12593 . -1) (undo-tree-id12594 . -1) (undo-tree-id12595 . -1) (undo-tree-id12596 . -1) (undo-tree-id12597 . -1) (undo-tree-id12598 . -1) (undo-tree-id12599 . -1) (undo-tree-id12600 . -1) (undo-tree-id12601 . -1) (undo-tree-id12602 . -1) (undo-tree-id12603 . -1) (undo-tree-id12604 . -1) (undo-tree-id12605 . -1) (undo-tree-id12606 . -1) (undo-tree-id12607 . -1) (undo-tree-id12608 . -1) (undo-tree-id12609 . -1) (undo-tree-id12610 . -1) (undo-tree-id12611 . -1) (undo-tree-id12612 . -1) (undo-tree-id12613 . -1) (undo-tree-id12614 . -1) (undo-tree-id12615 . -1) (undo-tree-id12616 . -1) (undo-tree-id12617 . -1) (undo-tree-id12618 . -1) (undo-tree-id12619 . -1) (undo-tree-id12620 . -1) (undo-tree-id12621 . -1) (undo-tree-id12622 . -1) (undo-tree-id12623 . -1) (undo-tree-id12624 . -1) (undo-tree-id12625 . -1) (undo-tree-id12626 . -1) (undo-tree-id12627 . -1) (undo-tree-id12628 . -1) (undo-tree-id12629 . -1) (undo-tree-id12630 . -1) (undo-tree-id12631 . -1) (undo-tree-id12632 . -1) (undo-tree-id12633 . -1) (undo-tree-id12634 . -1) (undo-tree-id12635 . -1) (undo-tree-id12636 . -1) (undo-tree-id12637 . -1) (undo-tree-id12638 . -1) (undo-tree-id12639 . -1) (undo-tree-id12640 . -1) (undo-tree-id12641 . -1) (undo-tree-id12642 . -1) (undo-tree-id12643 . -1) (undo-tree-id12644 . -1) (undo-tree-id12645 . -1) (undo-tree-id12646 . -1) (undo-tree-id12647 . -1) (undo-tree-id12648 . -1) (undo-tree-id12649 . -1) (undo-tree-id12650 . -1) (undo-tree-id12651 . -1) (undo-tree-id12652 . -1) (undo-tree-id12653 . -1) (undo-tree-id12654 . -1) (undo-tree-id12655 . -1) (undo-tree-id12656 . -1) (undo-tree-id12657 . -1) (undo-tree-id12658 . -1) (undo-tree-id12659 . -1) (undo-tree-id12660 . -1) (undo-tree-id12661 . -1) (undo-tree-id12662 . -1) (undo-tree-id12663 . -1) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (undo-tree-id12666 . -1) (undo-tree-id12667 . -1) (undo-tree-id12668 . -1) (undo-tree-id12669 . -1) (undo-tree-id12670 . -1) (undo-tree-id12671 . -1) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1) (undo-tree-id12674 . -1) (undo-tree-id12675 . -1) (undo-tree-id12676 . -1)) nil (25758 20067 153938 663000) 0 nil])
([nil nil ((10099 . 10100) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10099) (undo-tree-id12560 . -1) 10088) nil (25758 20071 587799 774000) 0 nil])
([nil nil ((#("(acting as if this predicted
value had actually occurred)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10262) (undo-tree-id12852 . -56) (undo-tree-id12853 . -1) (undo-tree-id12854 . -1) (undo-tree-id12855 . -1) (undo-tree-id12856 . -1) (undo-tree-id12857 . -1) (undo-tree-id12858 . -1) (undo-tree-id12859 . -1) (undo-tree-id12860 . -1) (undo-tree-id12861 . -1) (undo-tree-id12862 . -1) (undo-tree-id12863 . -1) (undo-tree-id12864 . -1) (undo-tree-id12865 . -1) (undo-tree-id12866 . -1) (undo-tree-id12867 . -1) (undo-tree-id12868 . -1) (undo-tree-id12869 . -1) (undo-tree-id12870 . -1) (undo-tree-id12871 . -1) (undo-tree-id12872 . -57) 10263 (t 25758 20067 178341 107000)) nil (25758 20099 882449 942000) 0 nil] [nil nil ((#("But what if we want to predict the next 10 values?" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 12 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10088) (undo-tree-id12770 . -49) (undo-tree-id12771 . -11) (undo-tree-id12772 . -11) (undo-tree-id12773 . -11) (undo-tree-id12774 . -11) (undo-tree-id12775 . -11) (undo-tree-id12776 . -11) (undo-tree-id12777 . -11) (undo-tree-id12778 . -11) (undo-tree-id12779 . -11) (undo-tree-id12780 . -11) (undo-tree-id12781 . -11) (undo-tree-id12782 . -11) (undo-tree-id12783 . -9) (undo-tree-id12784 . -4) (undo-tree-id12785 . -50) (undo-tree-id12786 . -50) (t 25758 20067 178341 107000)) ((10088 . 10138)) (25758 20071 587429 11000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10261) (undo-tree-id12787 . -1) (undo-tree-id12788 . -1) (undo-tree-id12789 . -1) (undo-tree-id12790 . -1) (undo-tree-id12791 . -1) (undo-tree-id12792 . -1) (undo-tree-id12793 . -1) (undo-tree-id12794 . -1) (undo-tree-id12795 . -1) (undo-tree-id12796 . -1) (undo-tree-id12797 . -1) (undo-tree-id12798 . -1) (undo-tree-id12799 . -1) (undo-tree-id12800 . -1) (undo-tree-id12801 . -1) (undo-tree-id12802 . -1) (undo-tree-id12803 . -1) (undo-tree-id12804 . -1) (undo-tree-id12805 . -1) (undo-tree-id12806 . -1) (undo-tree-id12807 . -1) (undo-tree-id12808 . -1) (undo-tree-id12809 . -1) (undo-tree-id12810 . -1) (undo-tree-id12811 . -1) (undo-tree-id12812 . -1) (undo-tree-id12813 . -1) (undo-tree-id12814 . -1) (undo-tree-id12815 . -1) (undo-tree-id12816 . -1) (undo-tree-id12817 . -1) (undo-tree-id12818 . -1) (undo-tree-id12819 . -1) (undo-tree-id12820 . -1) (undo-tree-id12821 . -1) (undo-tree-id12822 . -1) (undo-tree-id12823 . -1) (undo-tree-id12824 . -1) (undo-tree-id12825 . -1) (undo-tree-id12826 . -1) (undo-tree-id12827 . -1) (undo-tree-id12828 . -1) (undo-tree-id12829 . -1) (undo-tree-id12830 . -1) (undo-tree-id12831 . -1) (undo-tree-id12832 . -1) (undo-tree-id12833 . -1) (undo-tree-id12834 . -1) (undo-tree-id12835 . -1) (undo-tree-id12836 . -1) (undo-tree-id12837 . -1) (undo-tree-id12838 . -1) (undo-tree-id12839 . -1) (undo-tree-id12840 . -1) (undo-tree-id12841 . -1) (undo-tree-id12842 . -1) (undo-tree-id12843 . -1) (undo-tree-id12844 . -1) (undo-tree-id12845 . -1) (undo-tree-id12846 . -1) (undo-tree-id12847 . -1) (undo-tree-id12848 . -1) (undo-tree-id12849 . -1) (undo-tree-id12850 . -1) (undo-tree-id12851 . -1)) nil (25758 20099 882433 897000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -10290) (nil fontified nil 10289 . 10290) (nil wrap-prefix #("  " 0 2 (face org-indent)) 10289 . 10290) (10289 . 10290) 10261) nil (25758 20099 882375 102000) 0 nil])
([nil nil ((10301 . 10302) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10301) (undo-tree-id12873 . -1) 10290 (t 25758 20099 949486 793000)) nil (25758 20101 980364 56000) 0 nil])
([nil nil ((10355 . 10356) (t 25758 20101 997679 56000) 10301) nil (25758 20104 748012 170000) 0 nil])
([nil nil ((10369 . 10375) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 10369 10375 nil nil nil t #s(yas--exit 10393 nil))) #s(yas--exit 10393 nil) 6 nil #s(yas--field 1 10369 10375 nil nil nil t #s(yas--exit 10393 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10387) (undo-tree-id12899 . -2) (10357 . 10400) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10357) (undo-tree-id12900 . -1) (undo-tree-id12901 . -2) (undo-tree-id12902 . -1) (undo-tree-id12903 . -1) (undo-tree-id12904 . -1) (undo-tree-id12905 . -1) (undo-tree-id12906 . -1) (undo-tree-id12907 . -1) (undo-tree-id12908 . -1) (undo-tree-id12909 . -1) (undo-tree-id12910 . -1) (undo-tree-id12911 . -1) (undo-tree-id12912 . -1) (undo-tree-id12913 . -1) (undo-tree-id12914 . -1) (undo-tree-id12915 . -1) (undo-tree-id12916 . -1) (undo-tree-id12917 . -1) (undo-tree-id12918 . -1) (undo-tree-id12919 . -1) (undo-tree-id12920 . -1) (undo-tree-id12921 . -1) (undo-tree-id12922 . -1) (undo-tree-id12923 . -1) (undo-tree-id12924 . -1) (undo-tree-id12925 . -1) (undo-tree-id12926 . -1) (undo-tree-id12927 . -1) (undo-tree-id12928 . -1) (undo-tree-id12929 . -1) (undo-tree-id12930 . -1) (undo-tree-id12931 . -1) (undo-tree-id12932 . -1) (undo-tree-id12933 . -1) (undo-tree-id12934 . -1) (undo-tree-id12935 . -1) (undo-tree-id12936 . -1) (undo-tree-id12937 . -1) (undo-tree-id12938 . -1) (undo-tree-id12939 . -1) (undo-tree-id12940 . -1) (undo-tree-id12941 . -2) (undo-tree-id12942 . -2) (undo-tree-id12943 . -2) (undo-tree-id12944 . -2) (undo-tree-id12945 . -2) (undo-tree-id12946 . -2) (undo-tree-id12947 . -2) (undo-tree-id12948 . -2) (undo-tree-id12949 . -2) (undo-tree-id12950 . -2) (undo-tree-id12951 . -2) 10359 (10357 . 10359) (10356 . 10357) (t 25758 20104 769938 479000)) nil (25758 20135 410963 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 10357 10404 #s(yas--snippet nil (#s(yas--field 1 10369 10375 nil nil nil t #s(yas--exit 10393 nil))) #s(yas--exit 10393 nil) 6 nil #s(yas--field 1 10369 10375 nil nil nil t #s(yas--exit 10393 nil)) nil nil))) nil (25758 20135 410930 525000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 10392) (undo-tree-id12898 . -1)) nil (25758 20135 410929 845000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 10371) (undo-tree-id12888 . -1) (undo-tree-id12889 . -1) (undo-tree-id12890 . -1) (undo-tree-id12891 . -1) (undo-tree-id12892 . -1) (undo-tree-id12893 . -1) (undo-tree-id12894 . -1) (undo-tree-id12895 . -1) (undo-tree-id12896 . -1) (undo-tree-id12897 . -1)) nil (25758 20135 410927 789000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10372 . 10373) (nil fontified nil 10372 . 10373) (10372 . 10373) 10371) nil (25758 20135 410920 708000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 10392) (undo-tree-id12887 . -1)) nil (25758 20135 410919 33000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 10392) (undo-tree-id12886 . -1)) nil (25758 20135 410917 194000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 10392) (undo-tree-id12874 . -9) (undo-tree-id12875 . -9) (undo-tree-id12876 . -9) (undo-tree-id12877 . -9) (undo-tree-id12878 . -9) (undo-tree-id12879 . -9) (undo-tree-id12880 . -9) (undo-tree-id12881 . -9) (undo-tree-id12882 . -9) (undo-tree-id12883 . -9) (undo-tree-id12884 . -9) (undo-tree-id12885 . -10)) nil (25758 20135 410914 109000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10665 . 10666) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -10675) (10665 . 10676) 10642) nil (25758 20135 410676 469000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10836) (undo-tree-id12952 . -1) (undo-tree-id12953 . -1) (undo-tree-id12954 . -1) (undo-tree-id12955 . -1) (undo-tree-id12956 . -1) (undo-tree-id12957 . -1) (undo-tree-id12958 . -1) (undo-tree-id12959 . -1) (undo-tree-id12960 . -1) (undo-tree-id12961 . -1) (undo-tree-id12962 . -1) (undo-tree-id12963 . -1) (undo-tree-id12964 . -1) (undo-tree-id12965 . -1) (undo-tree-id12966 . -1) (undo-tree-id12967 . -1) (undo-tree-id12968 . -1) (undo-tree-id12969 . -1) (undo-tree-id12970 . -1) (undo-tree-id12971 . -1) (undo-tree-id12972 . -1) (undo-tree-id12973 . -1) (undo-tree-id12974 . -1) (undo-tree-id12975 . -1) (undo-tree-id12976 . -1) (undo-tree-id12977 . -1) (undo-tree-id12978 . -1) (undo-tree-id12979 . -1) (undo-tree-id12980 . -1) (undo-tree-id12981 . -1) (undo-tree-id12982 . -1) (undo-tree-id12983 . -1) (undo-tree-id12984 . -1) (undo-tree-id12985 . -1) (undo-tree-id12986 . -1) (undo-tree-id12987 . -1) (undo-tree-id12988 . -1) (undo-tree-id12989 . -1) (undo-tree-id12990 . -1) (undo-tree-id12991 . -1) (undo-tree-id12992 . -1) (undo-tree-id12993 . -1) (undo-tree-id12994 . -1) (undo-tree-id12995 . -1) (undo-tree-id12996 . -1) (undo-tree-id12997 . -1) (undo-tree-id12998 . -1) (undo-tree-id12999 . -1) (undo-tree-id13000 . -1) (undo-tree-id13001 . -1) (undo-tree-id13002 . -1) (undo-tree-id13003 . -1) (undo-tree-id13004 . -1) (undo-tree-id13005 . -1) (undo-tree-id13006 . -1) (undo-tree-id13007 . -1) (undo-tree-id13008 . -1) (undo-tree-id13009 . -1) (undo-tree-id13010 . -1) (undo-tree-id13011 . -1) (undo-tree-id13012 . -1) (undo-tree-id13013 . -1) (undo-tree-id13014 . -1) (undo-tree-id13015 . -1) (undo-tree-id13016 . -1) (undo-tree-id13017 . -1) (undo-tree-id13018 . -1) (undo-tree-id13019 . -1) (undo-tree-id13020 . -1) (undo-tree-id13021 . -1) (undo-tree-id13022 . -1) (undo-tree-id13023 . -1) (undo-tree-id13024 . -1) (undo-tree-id13025 . -1) (undo-tree-id13026 . -1) (undo-tree-id13027 . -1) (undo-tree-id13028 . -1) (undo-tree-id13029 . -1) (undo-tree-id13030 . -1) (undo-tree-id13031 . -1) (undo-tree-id13032 . -1) (undo-tree-id13033 . -1) (undo-tree-id13034 . -1) (undo-tree-id13035 . -1) (undo-tree-id13036 . -1) (undo-tree-id13037 . -1) (#("h" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10837) (undo-tree-id13038 . -1) (undo-tree-id13039 . -1) (undo-tree-id13040 . -1) (undo-tree-id13041 . -1) (undo-tree-id13042 . -1) (undo-tree-id13043 . -1) (undo-tree-id13044 . -1) (undo-tree-id13045 . -1) (undo-tree-id13046 . -1) (undo-tree-id13047 . -1) (undo-tree-id13048 . -1) (undo-tree-id13049 . -1) (undo-tree-id13050 . -1) (undo-tree-id13051 . -1) (undo-tree-id13052 . -1) (undo-tree-id13053 . -1) (undo-tree-id13054 . -1) (undo-tree-id13055 . -1) (undo-tree-id13056 . -1) (undo-tree-id13057 . -1) (undo-tree-id13058 . -1) (undo-tree-id13059 . -1) (undo-tree-id13060 . -1) (undo-tree-id13061 . -1) (undo-tree-id13062 . -1) (undo-tree-id13063 . -1) (undo-tree-id13064 . -1) (undo-tree-id13065 . -1) (undo-tree-id13066 . -1) (undo-tree-id13067 . -1) (undo-tree-id13068 . -1) (undo-tree-id13069 . -1) (undo-tree-id13070 . -1) (undo-tree-id13071 . -1) (undo-tree-id13072 . -1) (undo-tree-id13073 . -1) (undo-tree-id13074 . -1) (undo-tree-id13075 . -1) (undo-tree-id13076 . -1) 10838 (10837 . 10838) (#("(as you can see in Figure 15-8)" 0 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10837) (undo-tree-id13077 . -30) (undo-tree-id13078 . -1) (undo-tree-id13079 . -1) (undo-tree-id13080 . -1) (undo-tree-id13081 . -1) (undo-tree-id13082 . -1) (undo-tree-id13083 . -1) (undo-tree-id13084 . -1) (undo-tree-id13085 . -1) (undo-tree-id13086 . -1) (undo-tree-id13087 . -1) (undo-tree-id13088 . -1) (undo-tree-id13089 . -1) (undo-tree-id13090 . -1) (undo-tree-id13091 . -1) (undo-tree-id13092 . -1) (undo-tree-id13093 . -1) (undo-tree-id13094 . -1) (undo-tree-id13095 . -1) (undo-tree-id13096 . -1) (undo-tree-id13097 . -31) (undo-tree-id13098 . -31) 10838 (t 25758 20135 480752 715000)) nil (25758 20155 508472 543000) 0 nil])
([nil nil ((10838 . 10840)) nil (25758 20155 508371 981000) 0 nil])
([nil nil ((11047 . 11049) (t 25758 20155 574536 770000)) nil (25758 20171 829802 590000) 0 nil])
([nil nil ((11236 . 11238) (t 25758 20171 851950 200000)) nil (25758 20190 902190 216000) 0 nil])
([nil nil ((11472 . 11474) (t 25758 20190 921571 165000)) nil (25758 20207 962993 675000) 0 nil])
([nil nil ((11586 . 11587) (t 25758 20207 986990 911000) 11586) nil (25758 20268 942571 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17671 . 17672) (nil fontified nil 17601 . 17672) (nil fontified nil 17530 . 17601) (nil fontified nil 17461 . 17530) (nil fontified nil 17450 . 17461) (nil fontified nil 17368 . 17450) (nil fontified nil 17281 . 17368) (nil fontified nil 17199 . 17281) (nil fontified nil 17119 . 17199) (nil fontified nil 17035 . 17119) (nil fontified nil 17031 . 17035) (nil fontified nil 16977 . 17031) (nil fontified nil 16902 . 16977) (nil fontified nil 16829 . 16902) (nil fontified nil 16757 . 16829) (nil fontified nil 16680 . 16757) (nil fontified nil 16604 . 16680) (nil fontified nil 16533 . 16604) (nil fontified nil 16464 . 16533) (nil fontified nil 16442 . 16464) (nil fontified nil 16386 . 16442) (nil fontified nil 16343 . 16386) (nil fontified nil 16273 . 16343) (nil fontified nil 16233 . 16273) (nil fontified nil 16227 . 16233) (nil fontified nil 16154 . 16227) (nil fontified nil 16080 . 16154) (nil fontified nil 16004 . 16080) (nil fontified nil 15927 . 16004) (nil fontified nil 15853 . 15927) (nil fontified nil 15714 . 15853) (nil fontified nil 15645 . 15714) (nil fontified nil 15576 . 15645) (nil fontified nil 15509 . 15576) (nil fontified nil 15462 . 15509) (nil fontified nil 15390 . 15462) (nil fontified nil 15387 . 15390) (nil fontified nil 15334 . 15387) (nil fontified nil 15283 . 15334) (nil fontified nil 15278 . 15283) (nil fontified nil 15209 . 15278) (nil fontified nil 15175 . 15209) (nil fontified nil 15106 . 15175) (nil fontified nil 15035 . 15106) (nil fontified nil 14962 . 15035) (nil fontified nil 14887 . 14962) (nil fontified nil 14811 . 14887) (nil fontified nil 14744 . 14811) (nil fontified nil 14670 . 14744) (nil fontified nil 14590 . 14670) (nil fontified nil 14511 . 14590) (nil fontified nil 14433 . 14511) (nil fontified nil 14360 . 14433) (nil fontified nil 14288 . 14360) (nil fontified nil 14217 . 14288) (nil fontified nil 14152 . 14217) (nil fontified nil 14094 . 14152) (nil fontified nil 14006 . 14094) (nil fontified nil 13927 . 14006) (nil fontified nil 13843 . 13927) (nil fontified nil 13821 . 13843) (nil fontified nil 13798 . 13821) (nil fontified nil 13779 . 13798) (nil fontified nil 13776 . 13779) (nil fontified nil 13707 . 13776) (nil fontified nil 13671 . 13707) (nil fontified nil 13663 . 13671) (nil fontified nil 13593 . 13663) (nil fontified nil 13544 . 13593) (nil fontified nil 13471 . 13544) (nil fontified nil 13399 . 13471) (nil fontified nil 13321 . 13399) (nil fontified nil 13247 . 13321) (nil fontified nil 13169 . 13247) (nil fontified nil 13097 . 13169) (nil fontified nil 13024 . 13097) (nil fontified nil 12950 . 13024) (nil fontified nil 12874 . 12950) (nil fontified nil 12808 . 12874) (nil fontified nil 12736 . 12808) (nil fontified nil 12661 . 12736) (nil fontified nil 12584 . 12661) (nil fontified nil 12507 . 12584) (nil fontified nil 12438 . 12507) (nil fontified nil 12408 . 12438) (nil fontified nil 12400 . 12408) (nil fontified nil 12323 . 12400) (nil fontified nil 12300 . 12323) (nil fontified nil 12272 . 12300) (nil fontified nil 12267 . 12272) (nil fontified nil 12198 . 12267) (nil fontified nil 12164 . 12198) (nil fontified nil 12099 . 12164) (nil fontified nil 12034 . 12099) (nil fontified nil 12031 . 12034) (nil fontified nil 11959 . 12031) (nil fontified nil 11892 . 11959) (nil fontified nil 11841 . 11892) (nil fontified nil 11810 . 11841) (nil fontified nil 11737 . 11810) (nil fontified nil 11663 . 11737) (nil fontified nil 11587 . 11663) (11587 . 17672)) nil (25758 20307 911853 930000) 0 nil] [nil nil ((nil rear-nonsticky nil 16823 . 16824) (nil fontified nil 16753 . 16824) (nil fontified nil 16682 . 16753) (nil fontified nil 16613 . 16682) (nil fontified nil 16602 . 16613) (nil fontified nil 16520 . 16602) (nil fontified nil 16433 . 16520) (nil fontified nil 16351 . 16433) (nil fontified nil 16271 . 16351) (nil fontified nil 16187 . 16271) (nil fontified nil 16183 . 16187) (nil fontified nil 16129 . 16183) (nil fontified nil 16054 . 16129) (nil fontified nil 15981 . 16054) (nil fontified nil 15909 . 15981) (nil fontified nil 15832 . 15909) (nil fontified nil 15756 . 15832) (nil fontified nil 15685 . 15756) (nil fontified nil 15616 . 15685) (nil fontified nil 15594 . 15616) (nil fontified nil 15538 . 15594) (nil fontified nil 15495 . 15538) (nil fontified nil 15425 . 15495) (nil fontified nil 15385 . 15425) (nil fontified nil 15379 . 15385) (nil fontified nil 15306 . 15379) (nil fontified nil 15232 . 15306) (nil fontified nil 15156 . 15232) (nil fontified nil 15079 . 15156) (nil fontified nil 15005 . 15079) (nil fontified nil 14866 . 15005) (nil fontified nil 14797 . 14866) (nil fontified nil 14728 . 14797) (nil fontified nil 14661 . 14728) (nil fontified nil 14614 . 14661) (nil fontified nil 14542 . 14614) (nil fontified nil 14539 . 14542) (nil fontified nil 14486 . 14539) (nil fontified nil 14435 . 14486) (nil fontified nil 14430 . 14435) (nil fontified nil 14361 . 14430) (nil fontified nil 14327 . 14361) (nil fontified nil 14258 . 14327) (nil fontified nil 14187 . 14258) (nil fontified nil 14114 . 14187) (nil fontified nil 14039 . 14114) (nil fontified nil 13963 . 14039) (nil fontified nil 13896 . 13963) (nil fontified nil 13822 . 13896) (nil fontified nil 13742 . 13822) (nil fontified nil 13663 . 13742) (nil fontified nil 13585 . 13663) (nil fontified nil 13512 . 13585) (nil fontified nil 13440 . 13512) (nil fontified nil 13369 . 13440) (nil fontified nil 13304 . 13369) (nil fontified nil 13246 . 13304) (nil fontified nil 13158 . 13246) (nil fontified nil 13079 . 13158) (nil fontified nil 12995 . 13079) (nil fontified nil 12973 . 12995) (nil fontified nil 12950 . 12973) (nil fontified nil 12931 . 12950) (nil fontified nil 12928 . 12931) (nil fontified nil 12859 . 12928) (nil fontified nil 12823 . 12859) (nil fontified nil 12815 . 12823) (nil fontified nil 12745 . 12815) (nil fontified nil 12696 . 12745) (nil fontified nil 12623 . 12696) (nil fontified nil 12551 . 12623) (nil fontified nil 12473 . 12551) (nil fontified nil 12399 . 12473) (nil fontified nil 12321 . 12399) (nil fontified nil 12249 . 12321) (nil fontified nil 12176 . 12249) (nil fontified nil 12102 . 12176) (nil fontified nil 12026 . 12102) (nil fontified nil 11960 . 12026) (nil fontified nil 11888 . 11960) (nil fontified nil 11813 . 11888) (nil fontified nil 11736 . 11813) (nil fontified nil 11659 . 11736) (nil fontified nil 11590 . 11659) (nil fontified nil 11587 . 11590) (11587 . 16824) (t 25758 20211 723297 952000)) ((#("w)
This model works nicely: the MSE for the next 10 time steps is about
0.008. That’s much better than the linear model. But we can still do better:
indeed, instead of training the model to forecast the next 10 values only at
the very last time step, we can train it to forecast the next 10 values at
each and every time step. In other words, we can turn this sequence-to-
vector RNN into a sequence-to-sequence RNN. The advantage of this
technique is that the loss will contain a term for the output of the RNN at
each and every time step, not just the output at the last time step. This
means there will be many more error gradients flowing through the model,
and they won’t have to flow only through time; they will also flow from
the output of each time step. This will both stabilize and speed up training.
To be clear, at time step 0 the model will output a vector containing the
forecasts for time steps 1 to 10, then at time step 1 the model will forecast
time steps 2 to 11, and so on. So each target must be a sequence of the
same length as the input sequence, containing a 10-dimensional vector at
each step. Let’s prepare these target sequences:
Y = np.empty((10000, n_steps, 10)) # each target is a sequence of 10D
vectors
for step_ahead in range(1, 10 + 1):
Y[:, :, step_ahead - 1] = series[:, step_ahead:step_ahead + n_steps,
0]
Y_train = Y[:7000]
Y_valid = Y[7000:9000]
Y_test = Y[9000:]NOTE
It may be surprising that the targets will contain values that appear in the inputs
(there is a lot of overlap between X_train and Y_train ). Isn’t that cheating?
Fortunately, not at all: at each time step, the model only knows about past time steps,
so it cannot look ahead. It is said to be a causal model.
To turn the model into a sequence-to-sequence model, we must set
return_sequences=True in all recurrent layers (even the last one), and
we must apply the output Dense layer at every time step. Keras offers a
TimeDistributed layer for this very purpose: it wraps any layer (e.g., a
Dense layer) and applies it at every time step of its input sequence. It does
this efficiently, by reshaping the inputs so that each time step is treated as
a separate instance (i.e., it reshapes the inputs from [batch size, time steps,
input dimensions] to [batch size × time steps, input dimensions]; in this
example, the number of input dimensions is 20 because the previous
SimpleRNN layer has 20 units), then it runs the Dense layer, and finally it
reshapes the outputs back to sequences (i.e., it reshapes the outputs from
[batch size × time steps, output dimensions] to [batch size, time steps,
output dimensions]; in this example the number of output dimensions is
10, since the Dense layer has 10 units).2 Here is the updated model:
model = keras.models.Sequential([
keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None,
1]),
keras.layers.SimpleRNN(20, return_sequences=True),
keras.layers.TimeDistributed(keras.layers.Dense(10))
])
The Dense layer actually supports sequences as inputs (and even higher-
dimensional inputs): it handles them just like
TimeDistributed(Dense(…)), meaning it is applied to the last input
dimension only (independently across all time steps). Thus, we could
replace the last layer with just Dense(10). For the sake of clarity,
however, we will keep using TimeDistributed(Dense(10)) because itmakes it clear that the Dense layer is applied independently at each time
step and that the model will output a sequence, not just a single vector.
All outputs are needed during training, but only the output at the last time
step is useful for predictions and for evaluation. So although we will rely
on the MSE over all the outputs for training, we will use a custom metric
for evaluation, to only compute the MSE over the output at the last time
step:
def last_time_step_mse(Y_true, Y_pred):
return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])
optimizer = keras.optimizers.Adam(lr=0.01)
model.compile(loss=\"mse\", optimizer=optimizer, metrics=
[last_time_step_mse])
We get a validation MSE of about 0.006, which is 25% better than the
previous model. You can combine this approach with the first one: just
predict the next 10 values using this RNN, then concatenate these values to
the input time series and use the model again to predict the next 10 values,
and repeat the process as many times as needed. With this approach, you
can generate arbitrarily long sequences. It may not be very accurate for
long-term predictions, but it may be just fine if your goal is to generate
original music or text, as we will see in Chapter 16.
TIP
When forecasting time series, it is often useful to have some error bars along with
your predictions. For this, an efficient technique is MC Dropout, introduced in
Chapter 11: add an MC Dropout layer within each memory cell, dropping part of the
inputs and hidden states. After training, to forecast a new time series, use the model
many times and compute the mean and standard deviation of the predictions at each
time step.
Simple RNNs can be quite good at forecasting time series or handling
other kinds of sequences, but they do not perform as well on long time
series or sequences. Let’s discuss why and see what we can do about it." 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 72 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 149 226 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 226 301 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 301 373 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 373 439 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 439 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 500 515 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 515 589 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 589 662 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 662 734 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 734 812 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 812 886 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 886 964 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 964 1015 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1015 1036 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1036 1109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1109 1158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1158 1180 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1180 1181 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1181 1186 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1186 1228 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1228 1236 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1236 1244 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1244 1245 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1245 1250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1250 1272 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1272 1284 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1284 1285 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1285 1290 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1290 1312 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1312 1313 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1313 1318 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1318 1323 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1323 1324 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1324 1329 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1329 1333 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1333 1334 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1334 1339 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1339 1341 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1341 1344 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1344 1345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1345 1346 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1346 1351 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1351 1363 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1363 1364 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1364 1365 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1365 1370 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1370 1386 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1386 1387 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1387 1388 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1388 1392 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1392 1408 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1408 1492 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1492 1528 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1528 1529 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1529 1534 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1534 1536 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1536 1540 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1540 1541 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1541 1546 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1546 1571 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1571 1659 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1659 1717 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1717 1782 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1782 1788 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1788 1789 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 1789 1798 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1798 1853 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1853 1925 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1925 1998 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1998 2071 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2071 2076 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2076 2155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2155 2235 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2235 2309 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2309 2376 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2376 2452 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2452 2527 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2527 2600 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2600 2671 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2671 2740 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2740 2774 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2774 2807 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2807 2808 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 2808 2809 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 2809 2817 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 2817 2829 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2829 2830 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 2830 2835 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 2835 2843 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2843 2848 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2848 2881 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2881 2882 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 2882 2891 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 2891 2899 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2899 2952 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2952 2955 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 2955 3027 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3027 3074 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3074 3141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3141 3210 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3210 3279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3279 3418 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3418 3492 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3492 3569 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3569 3645 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3645 3710 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3710 3719 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3719 3792 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3792 3798 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3798 3806 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3806 3807 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3807 3811 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3811 3812 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3812 3816 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3816 3817 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3817 3820 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3820 3822 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3822 3823 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3823 3827 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3827 3830 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3830 3831 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3831 3835 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3835 3838 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3838 3863 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3863 3864 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3864 3871 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3871 3872 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3872 3877 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3877 3879 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3879 3880 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3880 3884 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3884 3894 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3894 3895 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 3895 3899 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 3899 3908 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3908 3951 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 3951 4007 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4007 4012 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4012 4013 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 4013 4017 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 4017 4018 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 4018 4022 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 4022 4023 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 4023 4026 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 4026 4029 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4029 4098 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4098 4169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4169 4245 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4245 4322 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4322 4394 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4394 4467 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4467 4542 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4542 4596 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4596 4600 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4600 4669 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4669 4684 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4684 4764 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4764 4846 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4846 4933 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 4933 5015 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 5015 5026 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 5026 5095 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 5095 5166 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 5166 5236 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 5236 5237 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 11587) (undo-tree-id13101 . -5237) (undo-tree-id13102 . -5237) (undo-tree-id13103 . -1) (undo-tree-id13104 . -2) (undo-tree-id13105 . 5234) (undo-tree-id13106 . -4322) (undo-tree-id13107 . -5236) (undo-tree-id13108 . -2) (undo-tree-id13109 . -2) (undo-tree-id13110 . -2) (undo-tree-id13111 . -2) (undo-tree-id13112 . -2) (undo-tree-id13113 . -2) (undo-tree-id13114 . -2) (undo-tree-id13115 . -2) (undo-tree-id13116 . -2) (undo-tree-id13117 . -1) (undo-tree-id13118 . -1) (undo-tree-id13119 . -1) (undo-tree-id13120 . -1) (undo-tree-id13121 . -1) (undo-tree-id13122 . -1) (undo-tree-id13123 . -1) (undo-tree-id13124 . -1) (undo-tree-id13125 . -1) (undo-tree-id13126 . -1) (undo-tree-id13127 . -1) (undo-tree-id13128 . -1) (undo-tree-id13129 . -1) (undo-tree-id13130 . -1) (undo-tree-id13131 . -1) (undo-tree-id13132 . -1) (undo-tree-id13133 . -1) (undo-tree-id13134 . -1) (undo-tree-id13135 . -1) (undo-tree-id13136 . -1) (undo-tree-id13137 . -1) (undo-tree-id13138 . -1) (undo-tree-id13139 . -1) (undo-tree-id13140 . -1) (undo-tree-id13141 . -1) (undo-tree-id13142 . -1) (undo-tree-id13143 . -1) (undo-tree-id13144 . -1) (undo-tree-id13145 . -1) (undo-tree-id13146 . -1) (undo-tree-id13147 . -1) (undo-tree-id13148 . -1) (undo-tree-id13149 . -1) (undo-tree-id13150 . -1) (undo-tree-id13151 . -1) (undo-tree-id13152 . -1) (undo-tree-id13153 . -1) (undo-tree-id13154 . -1) (undo-tree-id13155 . -1) (undo-tree-id13156 . -1) (undo-tree-id13157 . -1) (undo-tree-id13158 . -1) (undo-tree-id13159 . -1) (undo-tree-id13160 . -1) (undo-tree-id13161 . -1) (undo-tree-id13162 . -1) (undo-tree-id13163 . -1) (undo-tree-id13164 . -1) (undo-tree-id13165 . -1) (undo-tree-id13166 . -1) (undo-tree-id13167 . -1) (undo-tree-id13168 . -1) (undo-tree-id13169 . -1) (undo-tree-id13170 . -1) (undo-tree-id13171 . -1) (undo-tree-id13172 . -1) (undo-tree-id13173 . -1) (undo-tree-id13174 . -1) (undo-tree-id13175 . -1) (undo-tree-id13176 . -1) (undo-tree-id13177 . -1) (undo-tree-id13178 . -1) (undo-tree-id13179 . -1) (undo-tree-id13180 . -1) (undo-tree-id13181 . -1) (undo-tree-id13182 . -1) (undo-tree-id13183 . -1) (undo-tree-id13184 . -1) (undo-tree-id13185 . -1) (undo-tree-id13186 . -1) (undo-tree-id13187 . -1) (undo-tree-id13188 . -1) (undo-tree-id13189 . -1) (undo-tree-id13190 . -1) (undo-tree-id13191 . -1) (undo-tree-id13192 . -1) (undo-tree-id13193 . -1) (undo-tree-id13194 . -1) (undo-tree-id13195 . -1) (undo-tree-id13196 . -1) (undo-tree-id13197 . -1) (undo-tree-id13198 . -1) (undo-tree-id13199 . -1) (undo-tree-id13200 . -1) (undo-tree-id13201 . -1) (undo-tree-id13202 . -1) (undo-tree-id13203 . -1) (undo-tree-id13204 . -1) (undo-tree-id13205 . -1) (undo-tree-id13206 . -1) (undo-tree-id13207 . -1) (undo-tree-id13208 . -1) (undo-tree-id13209 . -1) (undo-tree-id13210 . -1) (undo-tree-id13211 . -1) (undo-tree-id13212 . -1) (undo-tree-id13213 . -1) (undo-tree-id13214 . -1) (undo-tree-id13215 . -1) (undo-tree-id13216 . -1) (undo-tree-id13217 . -1) (undo-tree-id13218 . -1) (undo-tree-id13219 . -1) (undo-tree-id13220 . -1) (undo-tree-id13221 . -1) (undo-tree-id13222 . -1) (undo-tree-id13223 . -1) (undo-tree-id13224 . -1) (undo-tree-id13225 . -1) (undo-tree-id13226 . -1) (undo-tree-id13227 . -1) (undo-tree-id13228 . -1) (undo-tree-id13229 . -1) (undo-tree-id13230 . -1) (undo-tree-id13231 . -1) (undo-tree-id13232 . -1) (undo-tree-id13233 . -1) (undo-tree-id13234 . -1) (undo-tree-id13235 . -1) (undo-tree-id13236 . -1) (undo-tree-id13237 . -1) (undo-tree-id13238 . -1) (undo-tree-id13239 . -1) (undo-tree-id13240 . -1) (undo-tree-id13241 . -1) (undo-tree-id13242 . -1) (undo-tree-id13243 . -1) (undo-tree-id13244 . -1) (undo-tree-id13245 . -1) (undo-tree-id13246 . -1) (undo-tree-id13247 . -1) (undo-tree-id13248 . -1) (undo-tree-id13249 . -1) (undo-tree-id13250 . -2) (undo-tree-id13251 . -5236) (undo-tree-id13252 . -5236) (undo-tree-id13253 . -5236) (undo-tree-id13254 . -5236) (undo-tree-id13255 . -5236) (undo-tree-id13256 . -5236) (undo-tree-id13257 . -5236) (undo-tree-id13258 . -5236) (undo-tree-id13259 . -5236) (undo-tree-id13260 . -5236) (undo-tree-id13261 . -5236) (undo-tree-id13262 . -5236) (undo-tree-id13263 . -5236) (undo-tree-id13264 . -5236) (undo-tree-id13265 . -5236) (undo-tree-id13266 . -5236) (undo-tree-id13267 . -5236) (undo-tree-id13268 . -5236) (undo-tree-id13269 . -5236) (undo-tree-id13270 . -5236) (undo-tree-id13271 . -5236) (undo-tree-id13272 . -5236) (undo-tree-id13273 . -5236) (undo-tree-id13274 . -5236) (undo-tree-id13275 . -5236) (undo-tree-id13276 . -5236) (undo-tree-id13277 . -5236) (undo-tree-id13278 . -5236) (undo-tree-id13279 . -5236) (undo-tree-id13280 . -5236) (undo-tree-id13281 . -5236) (undo-tree-id13282 . -5236) (undo-tree-id13283 . -5236) (undo-tree-id13284 . -5236) (undo-tree-id13285 . -5236) (undo-tree-id13286 . -5236) (undo-tree-id13287 . -5236) (undo-tree-id13288 . -5236) (undo-tree-id13289 . -5236) (undo-tree-id13290 . -5236) (undo-tree-id13291 . -5236) (undo-tree-id13292 . -5236) (undo-tree-id13293 . -5236) (undo-tree-id13294 . -5236) (undo-tree-id13295 . -5236) (undo-tree-id13296 . -5236) (undo-tree-id13297 . -5236) (undo-tree-id13298 . -5236) (undo-tree-id13299 . -5236) (undo-tree-id13300 . -5236) (undo-tree-id13301 . -5236) (undo-tree-id13302 . -5236) (undo-tree-id13303 . -5236) (undo-tree-id13304 . -5236) (undo-tree-id13305 . -5236) (undo-tree-id13306 . -5236) (undo-tree-id13307 . -5236) (undo-tree-id13308 . -5236) (undo-tree-id13309 . -5236) (undo-tree-id13310 . -5236) (undo-tree-id13311 . -5236) (undo-tree-id13312 . -5236) (undo-tree-id13313 . -5236) (undo-tree-id13314 . -5236) (undo-tree-id13315 . -5236) (undo-tree-id13316 . -5236) (undo-tree-id13317 . -5236) (undo-tree-id13318 . -5236) (undo-tree-id13319 . -5236) (undo-tree-id13320 . -5236) (undo-tree-id13321 . -5236) (undo-tree-id13322 . -5236) (undo-tree-id13323 . -5236) (undo-tree-id13324 . -5236) (undo-tree-id13325 . -5236) (undo-tree-id13326 . -5236) (undo-tree-id13327 . -5236) (undo-tree-id13328 . -5236) (undo-tree-id13329 . -5236) (undo-tree-id13330 . -5236) (undo-tree-id13331 . -5236) (undo-tree-id13332 . -5236) (undo-tree-id13333 . -5236) (undo-tree-id13334 . -5236) (undo-tree-id13335 . -5236) (undo-tree-id13336 . -5236) (undo-tree-id13337 . -5236) (undo-tree-id13338 . -5236) (undo-tree-id13339 . -5236) (undo-tree-id13340 . -5236) (undo-tree-id13341 . -5236) (undo-tree-id13342 . -5236) (undo-tree-id13343 . -5236) (undo-tree-id13344 . -5236) (undo-tree-id13345 . -5236) (undo-tree-id13346 . -5236) (undo-tree-id13347 . -5236) (undo-tree-id13348 . -5236) (undo-tree-id13349 . -5236) (undo-tree-id13350 . -5236) (undo-tree-id13351 . -5236) (undo-tree-id13352 . -5236) (undo-tree-id13353 . -5236) (undo-tree-id13354 . -5236) (undo-tree-id13355 . -5236) (undo-tree-id13356 . -5236) (undo-tree-id13357 . -5236) (undo-tree-id13358 . -5236) (undo-tree-id13359 . -5236) (undo-tree-id13360 . -5236) (undo-tree-id13361 . -5236) (undo-tree-id13362 . -5236) (undo-tree-id13363 . -5236) (undo-tree-id13364 . -5236) (undo-tree-id13365 . -5236) (undo-tree-id13366 . -5236) (undo-tree-id13367 . -5236) (undo-tree-id13368 . -5236) (undo-tree-id13369 . -5236) (undo-tree-id13370 . -5236) (undo-tree-id13371 . -5236) (undo-tree-id13372 . -5236) (undo-tree-id13373 . -5236) (undo-tree-id13374 . -5236) (undo-tree-id13375 . -5236) (undo-tree-id13376 . -5236) (undo-tree-id13377 . -5236) (undo-tree-id13378 . -5236) (undo-tree-id13379 . -5236) (undo-tree-id13380 . -5236) (undo-tree-id13381 . -5237) (undo-tree-id13382 . -5237) (undo-tree-id13383 . -5237) (undo-tree-id13384 . -5237) (undo-tree-id13385 . -5237) (undo-tree-id13386 . -5237) (undo-tree-id13387 . -5237) (undo-tree-id13388 . -5237) (undo-tree-id13389 . -5237) (undo-tree-id13390 . -5237) (undo-tree-id13391 . -5236) (undo-tree-id13392 . -5236) (undo-tree-id13393 . -5236) (undo-tree-id13394 . -5236) (undo-tree-id13395 . -5236) (undo-tree-id13396 . -5236) (undo-tree-id13397 . -5236) (undo-tree-id13398 . -5236) (undo-tree-id13399 . -5236) (undo-tree-id13400 . -5236) (undo-tree-id13401 . -5236) (undo-tree-id13402 . -5236) (undo-tree-id13403 . -5236) (undo-tree-id13404 . -5236) (undo-tree-id13405 . -5236) (undo-tree-id13406 . -5236) (undo-tree-id13407 . -5236) (undo-tree-id13408 . -5236) (undo-tree-id13409 . -5236) (undo-tree-id13410 . -5236) (nil fontified t 11587 . 11590) (nil fontified t 11590 . 11659) (nil fontified t 11659 . 11736) (nil fontified t 11736 . 11813) (nil fontified t 11813 . 11888) (nil fontified t 11888 . 11960) (nil fontified t 11960 . 12026) (nil fontified t 12087 . 12102) (nil fontified t 12026 . 12087) (nil fontified t 12102 . 12176) (nil fontified t 12176 . 12249) (nil fontified t 12249 . 12321) (nil fontified t 12321 . 12399) (nil fontified t 12399 . 12473) (nil fontified t 12473 . 12551) (nil fontified t 12602 . 12623) (nil fontified t 12551 . 12602) (nil fontified t 12623 . 12696) (nil fontified t 12696 . 12745) (nil fontified t 12773 . 12815) (nil fontified t 12768 . 12773) (nil fontified t 12767 . 12768) (nil fontified t 12745 . 12767) (nil fontified t 12815 . 12823) (nil fontified t 12837 . 12859) (nil fontified t 12832 . 12837) (nil fontified t 12831 . 12832) (nil fontified t 12823 . 12831) (nil fontified t 12926 . 12928) (nil fontified t 12921 . 12926) (nil fontified t 12920 . 12921) (nil fontified t 12916 . 12920) (nil fontified t 12911 . 12916) (nil fontified t 12910 . 12911) (nil fontified t 12905 . 12910) (nil fontified t 12900 . 12905) (nil fontified t 12899 . 12900) (nil fontified t 12877 . 12899) (nil fontified t 12872 . 12877) (nil fontified t 12871 . 12872) (nil fontified t 12859 . 12871) (nil fontified t 12928 . 12931) (nil fontified t 12938 . 12950) (nil fontified t 12933 . 12938) (nil fontified t 12932 . 12933) (nil fontified t 12931 . 12932) (nil fontified t 12957 . 12973) (nil fontified t 12952 . 12957) (nil fontified t 12951 . 12952) (nil fontified t 12950 . 12951) (nil fontified t 12979 . 12995) (nil fontified t 12975 . 12979) (nil fontified t 12974 . 12975) (nil fontified t 12973 . 12974) (nil fontified t 12995 . 13079) (nil fontified t 13133 . 13158) (nil fontified t 13128 . 13133) (nil fontified t 13127 . 13128) (nil fontified t 13123 . 13127) (nil fontified t 13121 . 13123) (nil fontified t 13116 . 13121) (nil fontified t 13115 . 13116) (nil fontified t 13079 . 13115) (nil fontified t 13158 . 13246) (nil fontified t 13246 . 13304) (nil fontified t 13304 . 13369) (nil fontified t 13385 . 13440) (nil fontified t 13376 . 13385) (nil fontified t 13375 . 13376) (nil fontified t 13369 . 13375) (nil fontified t 13440 . 13512) (nil fontified t 13512 . 13585) (nil fontified t 13658 . 13663) (nil fontified t 13585 . 13658) (nil fontified t 13663 . 13742) (nil fontified t 13742 . 13822) (nil fontified t 13822 . 13896) (nil fontified t 13896 . 13963) (nil fontified t 13963 . 14039) (nil fontified t 14039 . 14114) (nil fontified t 14114 . 14187) (nil fontified t 14187 . 14258) (nil fontified t 14258 . 14327) (nil fontified t 14327 . 14361) (nil fontified t 14422 . 14430) (nil fontified t 14417 . 14422) (nil fontified t 14416 . 14417) (nil fontified t 14404 . 14416) (nil fontified t 14396 . 14404) (nil fontified t 14395 . 14396) (nil fontified t 14394 . 14395) (nil fontified t 14361 . 14394) (nil fontified t 14430 . 14435) (nil fontified t 14478 . 14486) (nil fontified t 14469 . 14478) (nil fontified t 14468 . 14469) (nil fontified t 14435 . 14468) (nil fontified t 14486 . 14539) (nil fontified t 14539 . 14542) (nil fontified t 14542 . 14614) (nil fontified t 14614 . 14661) (nil fontified t 14661 . 14728) (nil fontified t 14728 . 14797) (nil fontified t 14797 . 14866) (nil fontified t 14866 . 15005) (nil fontified t 15005 . 15079) (nil fontified t 15079 . 15156) (nil fontified t 15156 . 15232) (nil fontified t 15297 . 15306) (nil fontified t 15232 . 15297) (nil fontified t 15306 . 15379) (nil fontified t 15379 . 15385) (nil fontified t 15422 . 15425) (nil fontified t 15418 . 15422) (nil fontified t 15417 . 15418) (nil fontified t 15414 . 15417) (nil fontified t 15410 . 15414) (nil fontified t 15409 . 15410) (nil fontified t 15407 . 15409) (nil fontified t 15404 . 15407) (nil fontified t 15403 . 15404) (nil fontified t 15399 . 15403) (nil fontified t 15398 . 15399) (nil fontified t 15394 . 15398) (nil fontified t 15393 . 15394) (nil fontified t 15385 . 15393) (nil fontified t 15486 . 15495) (nil fontified t 15482 . 15486) (nil fontified t 15481 . 15482) (nil fontified t 15471 . 15481) (nil fontified t 15467 . 15471) (nil fontified t 15466 . 15467) (nil fontified t 15464 . 15466) (nil fontified t 15459 . 15464) (nil fontified t 15458 . 15459) (nil fontified t 15451 . 15458) (nil fontified t 15450 . 15451) (nil fontified t 15425 . 15450) (nil fontified t 15495 . 15538) (nil fontified t 15538 . 15594) (nil fontified t 15613 . 15616) (nil fontified t 15610 . 15613) (nil fontified t 15609 . 15610) (nil fontified t 15605 . 15609) (nil fontified t 15604 . 15605) (nil fontified t 15600 . 15604) (nil fontified t 15599 . 15600) (nil fontified t 15594 . 15599) (nil fontified t 15616 . 15685) (nil fontified t 15685 . 15756) (nil fontified t 15756 . 15832) (nil fontified t 15832 . 15909) (nil fontified t 15909 . 15981) (nil fontified t 15981 . 16054) (nil fontified t 16054 . 16129) (nil fontified t 16129 . 16183) (nil fontified t 16183 . 16187) (nil fontified t 16256 . 16271) (nil fontified t 16187 . 16256) (nil fontified t 16271 . 16351) (nil fontified t 16351 . 16433) (nil fontified t 16433 . 16520) (nil fontified t 16520 . 16602) (nil fontified t 16602 . 16613) (nil fontified t 16613 . 16682) (nil fontified t 16682 . 16753) (nil rear-nonsticky t 16823 . 16824)) (25758 20262 681353 550000) 0 nil])
([nil nil ((17672 . 17673)) nil (25758 20307 911834 624000) 0 nil])
([nil nil ((16824 . 16825)) ((#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 16824) (undo-tree-id13099 . -1) (undo-tree-id13100 . -1) (t 25758 20240 677632 721000)) (25758 20240 657447 269000) 0 nil])
([nil nil ((11662 . 11663) (t 25758 20307 930769 361000) 11587) nil (25758 20315 485689 900000) 0 nil])
nil
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11663) (undo-tree-id13411 . 1) (undo-tree-id13412 . -1) (t 25758 20315 511324 875000)) nil (25758 20317 70579 991000) 0 nil])
([nil nil ((11751 . 11753) (t 25758 20317 87439 814000)) nil (25758 20341 52390 140000) 0 nil])
([nil nil ((11811 . 11812) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11811) (undo-tree-id13740 . -1) 11753 (t 25758 20341 77165 586000)) nil (25758 20370 245036 343000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -11832) (nil fontified nil 11831 . 11832) (nil wrap-prefix #("  " 0 2 (face org-indent)) 11831 . 11832) (11831 . 11832) 11811) nil (25758 20370 245033 856000) 0 nil])
([nil nil ((#("However, we first need to change the targets to be vectors containing the next
" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 58 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 59 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 11753) (undo-tree-id13660 . -78) (undo-tree-id13661 . 79) (undo-tree-id13662 . -58) (undo-tree-id13663 . -58) (undo-tree-id13664 . -58) (undo-tree-id13665 . -58) (undo-tree-id13666 . -58) (undo-tree-id13667 . -58) (undo-tree-id13668 . -58) (undo-tree-id13669 . -58) (undo-tree-id13670 . -58) (undo-tree-id13671 . -58) (undo-tree-id13672 . -58) (undo-tree-id13673 . -58) (undo-tree-id13674 . -58) (undo-tree-id13675 . -58) (undo-tree-id13676 . -58) (undo-tree-id13677 . -58) (undo-tree-id13678 . -58) (undo-tree-id13679 . -58) (undo-tree-id13680 . -58) (undo-tree-id13681 . -58) (undo-tree-id13682 . -58) (undo-tree-id13683 . -58) (undo-tree-id13684 . -58) (undo-tree-id13685 . -58) (undo-tree-id13686 . -58) (undo-tree-id13687 . -58) (undo-tree-id13688 . -58) (undo-tree-id13689 . -58) (undo-tree-id13690 . -58) (undo-tree-id13691 . -58) (undo-tree-id13692 . -58) (undo-tree-id13693 . -58) (undo-tree-id13694 . -58) (undo-tree-id13695 . -58) (undo-tree-id13696 . -58) (undo-tree-id13697 . -58) (undo-tree-id13698 . -58) (undo-tree-id13699 . -58) (undo-tree-id13700 . -58) (undo-tree-id13701 . -58) (undo-tree-id13702 . -58) (undo-tree-id13703 . -58) (undo-tree-id13704 . -58) (undo-tree-id13705 . -58) (undo-tree-id13706 . -58) (undo-tree-id13707 . -58) (undo-tree-id13708 . -58) (undo-tree-id13709 . -58) (undo-tree-id13710 . -58) (undo-tree-id13711 . -58) (undo-tree-id13712 . -58) (undo-tree-id13713 . -58) (undo-tree-id13714 . -58) (undo-tree-id13715 . -58) (undo-tree-id13716 . -58) (undo-tree-id13717 . -58) (undo-tree-id13718 . -58) (undo-tree-id13719 . -58) (undo-tree-id13720 . -58) (undo-tree-id13721 . -58) (undo-tree-id13722 . -79) (undo-tree-id13723 . -79) (undo-tree-id13724 . -79) (undo-tree-id13725 . -79) (undo-tree-id13726 . -79) (undo-tree-id13727 . -79) (undo-tree-id13728 . -79) (undo-tree-id13729 . -79) (undo-tree-id13730 . -79) (undo-tree-id13731 . -79) (undo-tree-id13732 . -79) (undo-tree-id13733 . -79) (undo-tree-id13734 . -79) (undo-tree-id13735 . -79) (undo-tree-id13736 . -79) (undo-tree-id13737 . -79) (undo-tree-id13738 . -79) (undo-tree-id13739 . -79)) nil (25758 20370 245029 167000) 0 nil])
([nil nil ((#("10 values:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11753) (undo-tree-id13655 . -10) (undo-tree-id13656 . 11) (undo-tree-id13657 . -10) (undo-tree-id13658 . 1) (undo-tree-id13659 . -11)) nil (25758 20370 244962 746000) 0 nil])
([nil nil ((apply yas--snippet-revive 11753 11800 #s(yas--snippet nil (#s(yas--field 1 11765 11771 nil nil nil t #s(yas--exit 11789 nil))) #s(yas--exit 11789 nil) 7 nil #s(yas--field 1 11765 11771 nil nil nil t #s(yas--exit 11789 nil)) nil nil)) (11765 . 11771) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11765 11771 nil nil nil t #s(yas--exit 11789 nil))) #s(yas--exit 11789 nil) 7 nil #s(yas--field 1 11765 11771 nil nil nil t #s(yas--exit 11789 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -11783) (undo-tree-id13605 . -2) (11753 . 11796) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11753) (undo-tree-id13606 . -1) (undo-tree-id13607 . -2) (undo-tree-id13608 . -1) (undo-tree-id13609 . -1) (undo-tree-id13610 . -1) (undo-tree-id13611 . -1) (undo-tree-id13612 . -1) (undo-tree-id13613 . -1) (undo-tree-id13614 . -1) (undo-tree-id13615 . -1) (undo-tree-id13616 . -1) (undo-tree-id13617 . -1) (undo-tree-id13618 . -1) (undo-tree-id13619 . -1) (undo-tree-id13620 . -1) (undo-tree-id13621 . -1) (undo-tree-id13622 . -1) (undo-tree-id13623 . -1) (undo-tree-id13624 . -1) (undo-tree-id13625 . -1) (undo-tree-id13626 . -1) (undo-tree-id13627 . -1) (undo-tree-id13628 . -1) (undo-tree-id13629 . -1) (undo-tree-id13630 . -1) (undo-tree-id13631 . -1) (undo-tree-id13632 . -1) (undo-tree-id13633 . -1) (undo-tree-id13634 . -1) (undo-tree-id13635 . -1) (undo-tree-id13636 . -1) (undo-tree-id13637 . -1) (undo-tree-id13638 . -1) (undo-tree-id13639 . -1) (undo-tree-id13640 . -1) (undo-tree-id13641 . -1) (undo-tree-id13642 . -1) (undo-tree-id13643 . -1) (undo-tree-id13644 . -2) (undo-tree-id13645 . -2) (undo-tree-id13646 . -2) (undo-tree-id13647 . -2) (undo-tree-id13648 . -2) (undo-tree-id13649 . -2) (undo-tree-id13650 . -2) (undo-tree-id13651 . -2) (undo-tree-id13652 . -2) (undo-tree-id13653 . -2) (undo-tree-id13654 . -2) 11755 (11753 . 11755) (11752 . 11753)) nil (25758 20370 244956 359000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 11788) (undo-tree-id13568 . -2) (undo-tree-id13569 . 2) (undo-tree-id13570 . -1) (undo-tree-id13571 . -1) (undo-tree-id13572 . -1) (undo-tree-id13573 . -1) (undo-tree-id13574 . -1) (undo-tree-id13575 . -1) (undo-tree-id13576 . -1) (undo-tree-id13577 . -1) (undo-tree-id13578 . -1) (undo-tree-id13579 . -1) (undo-tree-id13580 . -1) (undo-tree-id13581 . -1) (undo-tree-id13582 . -1) (undo-tree-id13583 . -1) (undo-tree-id13584 . -1) (undo-tree-id13585 . -1) (undo-tree-id13586 . -1) (undo-tree-id13587 . -1) (undo-tree-id13588 . -1) (undo-tree-id13589 . -1) (undo-tree-id13590 . -1) (undo-tree-id13591 . -1) (undo-tree-id13592 . -1) (undo-tree-id13593 . -1) (undo-tree-id13594 . -1) (undo-tree-id13595 . -1) (undo-tree-id13596 . -1) (undo-tree-id13597 . -1) (undo-tree-id13598 . -1) (undo-tree-id13599 . -1) (undo-tree-id13600 . -1) (undo-tree-id13601 . -1) (undo-tree-id13602 . -1) (undo-tree-id13603 . -1) (undo-tree-id13604 . -3)) nil (25758 20370 244914 426000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 11788) (undo-tree-id13413 . -9) (undo-tree-id13414 . 10) (undo-tree-id13415 . -10) (undo-tree-id13416 . -10) (undo-tree-id13417 . -10) (undo-tree-id13418 . -10) (undo-tree-id13419 . -10) (undo-tree-id13420 . -10) (undo-tree-id13421 . -10) (undo-tree-id13422 . -10) (undo-tree-id13423 . -10) (undo-tree-id13424 . -10) (undo-tree-id13425 . -10) (undo-tree-id13426 . -10) (undo-tree-id13427 . -10) (undo-tree-id13428 . -10) (undo-tree-id13429 . -10) (undo-tree-id13430 . -10) (undo-tree-id13431 . -10) (undo-tree-id13432 . -10) (undo-tree-id13433 . -10) (undo-tree-id13434 . -10) (undo-tree-id13435 . -10) (undo-tree-id13436 . -10) (undo-tree-id13437 . -10) (undo-tree-id13438 . -10) (undo-tree-id13439 . -10) (undo-tree-id13440 . -10) (undo-tree-id13441 . -10) (undo-tree-id13442 . -10) (undo-tree-id13443 . -10) (undo-tree-id13444 . -10) (undo-tree-id13445 . -10) (undo-tree-id13446 . -10) (undo-tree-id13447 . -10) (undo-tree-id13448 . -10) (undo-tree-id13449 . -10) (undo-tree-id13450 . -10) (undo-tree-id13451 . -10) (undo-tree-id13452 . -10) (undo-tree-id13453 . -10) (undo-tree-id13454 . -10) (undo-tree-id13455 . -10) (undo-tree-id13456 . -10) (undo-tree-id13457 . -10) (undo-tree-id13458 . -10) (undo-tree-id13459 . -10) (undo-tree-id13460 . -10) (undo-tree-id13461 . -10) (undo-tree-id13462 . -10) (undo-tree-id13463 . -10) (undo-tree-id13464 . -10) (undo-tree-id13465 . -10) (undo-tree-id13466 . -10) (undo-tree-id13467 . -10) (undo-tree-id13468 . -10) (undo-tree-id13469 . -10) (undo-tree-id13470 . -10) (undo-tree-id13471 . -10) (undo-tree-id13472 . -10) (undo-tree-id13473 . -10) (undo-tree-id13474 . -10) (undo-tree-id13475 . -10) (undo-tree-id13476 . -10) (undo-tree-id13477 . -10) (undo-tree-id13478 . -10) (undo-tree-id13479 . -10) (undo-tree-id13480 . -10) (undo-tree-id13481 . -10) (undo-tree-id13482 . -10) (undo-tree-id13483 . -10) (undo-tree-id13484 . -10) (undo-tree-id13485 . -10) (undo-tree-id13486 . -10) (undo-tree-id13487 . -10) (undo-tree-id13488 . -10) (undo-tree-id13489 . -10) (undo-tree-id13490 . -10) (undo-tree-id13491 . -10) (undo-tree-id13492 . -10) (undo-tree-id13493 . -10) (undo-tree-id13494 . -10) (undo-tree-id13495 . -10) (undo-tree-id13496 . -10) (undo-tree-id13497 . -10) (undo-tree-id13498 . -10) (undo-tree-id13499 . -10) (undo-tree-id13500 . -10) (undo-tree-id13501 . -10) (undo-tree-id13502 . -10) (undo-tree-id13503 . -10) (undo-tree-id13504 . -10) (undo-tree-id13505 . -10) (undo-tree-id13506 . -10) (undo-tree-id13507 . -10) (undo-tree-id13508 . -10) (undo-tree-id13509 . -10) (undo-tree-id13510 . -10) (undo-tree-id13511 . -10) (undo-tree-id13512 . -10) (undo-tree-id13513 . -10) (undo-tree-id13514 . -10) (undo-tree-id13515 . -10) (undo-tree-id13516 . -10) (undo-tree-id13517 . -10) (undo-tree-id13518 . -10) (undo-tree-id13519 . -10) (undo-tree-id13520 . -10) (undo-tree-id13521 . -10) (undo-tree-id13522 . -10) (undo-tree-id13523 . -10) (undo-tree-id13524 . -10) (undo-tree-id13525 . -10) (undo-tree-id13526 . -10) (undo-tree-id13527 . -10) (undo-tree-id13528 . -10) (undo-tree-id13529 . -10) (undo-tree-id13530 . -10) (undo-tree-id13531 . -10) (undo-tree-id13532 . -10) (undo-tree-id13533 . -10) (undo-tree-id13534 . -10) (undo-tree-id13535 . -10) (undo-tree-id13536 . -10) (undo-tree-id13537 . -10) (undo-tree-id13538 . -10) (undo-tree-id13539 . -10) (undo-tree-id13540 . -10) (undo-tree-id13541 . -10) (undo-tree-id13542 . -10) (undo-tree-id13543 . -10) (undo-tree-id13544 . -10) (undo-tree-id13545 . -10) (undo-tree-id13546 . -10) (undo-tree-id13547 . -10) (undo-tree-id13548 . -10) (undo-tree-id13549 . -10) (undo-tree-id13550 . -10) (undo-tree-id13551 . -10) (undo-tree-id13552 . -10) (undo-tree-id13553 . -10) (undo-tree-id13554 . -10) (undo-tree-id13555 . -10) (undo-tree-id13556 . -10) (undo-tree-id13557 . -9) (undo-tree-id13558 . -9) (undo-tree-id13559 . -9) (undo-tree-id13560 . -9) (undo-tree-id13561 . -9) (undo-tree-id13562 . -9) (undo-tree-id13563 . -9) (undo-tree-id13564 . -9) (undo-tree-id13565 . -9) (undo-tree-id13566 . -9) (undo-tree-id13567 . -10)) nil (25758 20370 244358 199000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12384 . 12385) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -12394) (12384 . 12395) 12355) nil (25758 20370 244133 489000) 0 nil])
([nil nil ((11977 . 11978) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -11977) (undo-tree-id13741 . -1) (undo-tree-id13742 . -1) (undo-tree-id13743 . -1) (undo-tree-id13744 . -1) (undo-tree-id13745 . -1) (undo-tree-id13746 . -1) (undo-tree-id13747 . -1) (undo-tree-id13748 . -1) (undo-tree-id13749 . -1) 11906 (t 25758 20370 315211 91000)) nil (25758 20378 688392 79000) 0 nil])
([nil nil ((12046 . 12047) (t 25758 20378 715787 516000)) nil (25758 20386 201845 355000) 0 nil])
([nil nil ((12274 . 12275) (12273 . 12274) (t 25758 20386 228298 868000)) nil (25758 20402 729092 860000) 0 nil])
([nil nil ((#("this model" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 12290) (undo-tree-id13751 . -9) (undo-tree-id13752 . -9) (undo-tree-id13753 . -9) (undo-tree-id13754 . -10) (undo-tree-id13755 . -9) (undo-tree-id13756 . -3) (undo-tree-id13757 . -9) (undo-tree-id13758 . -9) (undo-tree-id13759 . -10) 12299) nil (25758 20402 729090 771000) 0 nil])
([nil nil ((12339 . 12340) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -12339) (undo-tree-id13750 . -1) 12290) nil (25758 20402 729076 381000) 0 nil])
([nil nil ((12468 . 12469) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12468) (undo-tree-id13760 . -1) (t 25758 20402 753410 201000)) nil (25758 20412 743463 491000) 0 nil])
([nil nil ((12802 . 12804) (t 25758 20412 770075 15000)) nil (25758 20446 465222 651000) 0 nil])
([nil nil ((13061 . 13062) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13061) (undo-tree-id13761 . -1) (t 25758 20446 492266 114000)) nil (25758 20476 847659 919000) 0 nil])
([nil nil ((13151 . 13153)) nil (25758 20476 847622 703000) 0 nil])
([nil nil ((13512 . 13513) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13512) (undo-tree-id13841 . -1) (t 25758 20476 870180 723000)) nil (25758 20518 243845 385000) 0 nil])
([nil nil ((13560 . 13566) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13560 13566 nil nil nil t #s(yas--exit 13584 nil))) #s(yas--exit 13584 nil) 8 nil #s(yas--field 1 13560 13566 nil nil nil t #s(yas--exit 13584 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -13578) (undo-tree-id13791 . -2) (13548 . 13591) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 13548) (undo-tree-id13792 . -1) (undo-tree-id13793 . -2) (undo-tree-id13794 . -1) (undo-tree-id13795 . -1) (undo-tree-id13796 . -1) (undo-tree-id13797 . -1) (undo-tree-id13798 . -1) (undo-tree-id13799 . -1) (undo-tree-id13800 . -1) (undo-tree-id13801 . -1) (undo-tree-id13802 . -1) (undo-tree-id13803 . -1) (undo-tree-id13804 . -1) (undo-tree-id13805 . -1) (undo-tree-id13806 . -1) (undo-tree-id13807 . -1) (undo-tree-id13808 . -1) (undo-tree-id13809 . -1) (undo-tree-id13810 . -1) (undo-tree-id13811 . -1) (undo-tree-id13812 . -1) (undo-tree-id13813 . -1) (undo-tree-id13814 . -1) (undo-tree-id13815 . -1) (undo-tree-id13816 . -1) (undo-tree-id13817 . -1) (undo-tree-id13818 . -1) (undo-tree-id13819 . -1) (undo-tree-id13820 . -1) (undo-tree-id13821 . -1) (undo-tree-id13822 . -1) (undo-tree-id13823 . -1) (undo-tree-id13824 . -1) (undo-tree-id13825 . -1) (undo-tree-id13826 . -1) (undo-tree-id13827 . -1) (undo-tree-id13828 . -1) (undo-tree-id13829 . -1) (undo-tree-id13830 . -2) (undo-tree-id13831 . -2) (undo-tree-id13832 . -2) (undo-tree-id13833 . -2) (undo-tree-id13834 . -2) (undo-tree-id13835 . -2) (undo-tree-id13836 . -2) (undo-tree-id13837 . -2) (undo-tree-id13838 . -2) (undo-tree-id13839 . -2) (undo-tree-id13840 . -2) 13550 (13548 . 13550) (13547 . 13548) (13546 . 13547) 13545) nil (25758 20518 243840 10000) 0 nil])
([nil nil ((apply yas--snippet-revive 13548 13595 #s(yas--snippet nil (#s(yas--field 1 13560 13566 nil nil nil t #s(yas--exit 13584 nil))) #s(yas--exit 13584 nil) 8 nil #s(yas--field 1 13560 13566 nil nil nil t #s(yas--exit 13584 nil)) nil nil))) nil (25758 20518 243268 839000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 13583) (undo-tree-id13774 . -2) (undo-tree-id13775 . -1) (undo-tree-id13776 . -1) (undo-tree-id13777 . -1) (undo-tree-id13778 . -1) (undo-tree-id13779 . -1) (undo-tree-id13780 . -1) (undo-tree-id13781 . -1) (undo-tree-id13782 . -1) (undo-tree-id13783 . -1) (undo-tree-id13784 . -1) (undo-tree-id13785 . -1) (undo-tree-id13786 . -1) (undo-tree-id13787 . -1) (undo-tree-id13788 . -1) (undo-tree-id13789 . -1) (undo-tree-id13790 . -3)) nil (25758 20518 243267 261000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 13583) (undo-tree-id13762 . -9) (undo-tree-id13763 . -9) (undo-tree-id13764 . -9) (undo-tree-id13765 . -9) (undo-tree-id13766 . -9) (undo-tree-id13767 . -9) (undo-tree-id13768 . -9) (undo-tree-id13769 . -9) (undo-tree-id13770 . -9) (undo-tree-id13771 . -9) (undo-tree-id13772 . -9) (undo-tree-id13773 . -10)) nil (25758 20518 243254 790000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13832 . 13833) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -13842) (13832 . 13843) 13811) nil (25758 49413 305803 660000) 0 nil])
([nil nil ((#("So far we have only predicted the value at the next time step" 0 61 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id112 . -60) (undo-tree-id113 . -61)) nil (25758 49457 182995 860000) 0 nil] [nil nil ((#("So far we have only predicted the value at the next time step, but we could
" 0 61 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 61 62 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 62 76 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id6 . -75) (undo-tree-id7 . -76) (t 25758 20518 268705 564000)) ((9913 . 9989) (t 25758 49408 900830 890000)) (25758 49408 874942 10000) 0 nil] [nil nil ((#("So far we have only predicted the value at the next time step, but we could
" 0 61 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 61 62 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 62 76 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id4 . -75) (undo-tree-id5 . -76) (t 25758 20518 268705 564000)) ((9913 . 9989)) (25758 49397 189457 2000) 0 nil] [nil nil ((#("So far we have only predicted the value at the next time step" 0 61 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id2 . -60) (undo-tree-id3 . -61) (t 25758 20518 268705 564000)) ((9913 . 9974)) (25758 49388 834115 616000) 0 nil])
([nil nil ((#("," 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id110 . -1) (undo-tree-id111 . -1)) nil (25758 49457 182993 102000) 0 nil])
nil
nil
([nil nil ((#(", but we could
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id0 . -14) (undo-tree-id1 . -15)) ((9913 . 9928)) (25758 49388 833907 745000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id108 . -1) (undo-tree-id109 . -1)) nil (25758 49457 182990 838000) 0 nil])
nil
([nil nil ((#("but we could
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 13 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id73 . -12) (undo-tree-id74 . -4) (undo-tree-id75 . -7) (undo-tree-id76 . -13) (undo-tree-id77 . -13) (undo-tree-id78 . -13) (undo-tree-id79 . -13) (undo-tree-id80 . -13) (undo-tree-id81 . -13) (undo-tree-id82 . -13) (undo-tree-id83 . -13) (undo-tree-id84 . -11) (undo-tree-id85 . -11) (undo-tree-id86 . -11) (undo-tree-id87 . -11) (undo-tree-id88 . -11) (undo-tree-id89 . -11) (undo-tree-id90 . -11) (undo-tree-id91 . -11) (undo-tree-id92 . -13) (undo-tree-id93 . -13) (undo-tree-id94 . -13) (undo-tree-id95 . -13) (undo-tree-id96 . -13) (undo-tree-id97 . -13) (undo-tree-id98 . -13) (undo-tree-id99 . -13) (undo-tree-id100 . -13) (undo-tree-id101 . -13) (undo-tree-id102 . -13) (undo-tree-id103 . -13) (undo-tree-id104 . -13) (undo-tree-id105 . -13) (undo-tree-id106 . -13) (undo-tree-id107 . -13)) nil (25758 49457 182986 482000) 0 nil])
([nil nil ((#("just as easily have predicted the value several steps ahead by changing the
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id61 . -75) (undo-tree-id62 . -5) (undo-tree-id63 . -8) (undo-tree-id64 . -15) (undo-tree-id65 . -15) (undo-tree-id66 . -15) (undo-tree-id67 . -15) (undo-tree-id68 . -15) (undo-tree-id69 . -15) (undo-tree-id70 . -15) (undo-tree-id71 . -15) (undo-tree-id72 . -76)) nil (25758 49457 182557 396000) 0 nil])
([nil nil ((#("targets appropriately" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 21 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id59 . -20) (undo-tree-id60 . -21)) nil (25758 49457 182549 334000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id57 . -1) (undo-tree-id58 . -2)) nil (25758 49457 182547 507000) 0 nil])
([nil nil ((#("But what if we want " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 20 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913) (undo-tree-id36 . -19) (undo-tree-id37 . -19) (undo-tree-id38 . -19) (undo-tree-id39 . -19) (undo-tree-id40 . -20) (undo-tree-id41 . -19) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -7) (undo-tree-id51 . -10) (undo-tree-id52 . -13) (undo-tree-id53 . -18) (undo-tree-id54 . -19) (undo-tree-id55 . -19) (undo-tree-id56 . -20) 9932) nil (25758 49457 182544 530000) 0 nil])
([nil nil ((9913 . 9914) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913)) nil (25758 49457 182532 403000) 0 nil])
([nil nil ((9913 . 9914) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9913)) nil (25758 49457 182530 902000) 0 nil])
([nil nil ((#("?" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9942) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1)) nil (25758 49457 182529 801000) 0 nil])
([nil nil ((9942 . 9943) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9942) (undo-tree-id31 . 1) (undo-tree-id32 . -1) 9941) nil (25758 49457 182527 403000) 0 nil])
([nil nil ((9942 . 9944) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9942) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 9943) nil (25758 49457 182524 470000) 0 nil])
([nil nil ((9944 . 9945) (#("T" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9944) (undo-tree-id10 . 1) (undo-tree-id11 . -1)) nil (25758 49457 182512 428000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -9992) (nil fontified nil 9991 . 9992) (nil wrap-prefix #("  " 0 2 (face org-indent)) 9991 . 9992) (9991 . 9992) 9961) nil (25758 49457 182508 890000) 0 nil])
([nil nil ((10020 . 10021) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10020) (undo-tree-id8 . 1) (undo-tree-id9 . -1) 9992) nil (25758 49457 182504 175000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10072) (nil fontified nil 10071 . 10072) (nil wrap-prefix #("  " 0 2 (face org-indent)) 10071 . 10072) (10071 . 10072) 10068 (t 25758 49457 207884 595000)) nil (25758 49494 602878 972000) 0 nil])
([nil nil ((10094 . 10095) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10094) (undo-tree-id287 . 1) (undo-tree-id288 . -1) 10072) nil (25758 49494 602877 69000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10145) (nil fontified nil 10144 . 10145) (nil wrap-prefix #("  " 0 2 (face org-indent)) 10144 . 10145) (10144 . 10145) 10094) nil (25758 49494 602874 100000) 0 nil])
([nil nil ((10067 . 10068)) nil (25758 49494 602872 62000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10068) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . 1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1)) nil (25758 49494 602863 728000) 0 nil])
([nil nil ((10071 . 10072) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -10071) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 10068) nil (25758 49494 602544 192000) 0 nil])
([nil nil ((#(", as in the" 0 11 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10133) (undo-tree-id308 . -10) (undo-tree-id309 . -11) (undo-tree-id310 . -11) (t 25758 49494 627244 633000)) nil (25758 49503 69566 789000) 0 nil])
([nil nil ((#("following code:
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10134) (undo-tree-id289 . -15) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -10) (undo-tree-id299 . -14) (undo-tree-id300 . -14) (undo-tree-id301 . -14) (undo-tree-id302 . -14) (undo-tree-id303 . -14) (undo-tree-id304 . -14) (undo-tree-id305 . -14) (undo-tree-id306 . -14) (undo-tree-id307 . -16)) nil (25758 49503 69560 140000) 0 nil])
([nil nil ((10431 . 10432) (10430 . 10431) (10429 . 10430) (10428 . 10429) (10383 . 10384) (10382 . 10383) (10381 . 10382) (10380 . 10381) (10312 . 10316) (t 25758 49503 95110 404000)) nil (25758 49526 787587 467000) 0 nil])
([nil nil ((#("As you might expect" 0 19 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10466) (undo-tree-id314 . -18) (undo-tree-id315 . 18) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -6) (undo-tree-id325 . -6) (undo-tree-id326 . -6) (undo-tree-id327 . -6) (undo-tree-id328 . -6) (undo-tree-id329 . -6) (undo-tree-id330 . -6) (undo-tree-id331 . -6) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -19) (t 25758 49526 810754 376000)) nil (25758 49551 164463 957000) 0 nil])
([nil nil ((#(", " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10466) (undo-tree-id311 . -1) (undo-tree-id312 . 2) (undo-tree-id313 . -2)) nil (25758 49551 164447 805000) 0 nil])
([nil nil ((10572 . 10573)) nil (25758 49551 164433 447000) 0 nil])
([nil nil ((#("If you evaluate this approach
" 0 30 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10610) (undo-tree-id343 . -29) (undo-tree-id344 . -30) (t 25758 49551 182417 935000)) nil (25758 49576 134263 761000) 0 nil])
([nil nil ((#("on the validation set, you will find an MSE of about 0" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10610) (undo-tree-id341 . -53) (undo-tree-id342 . -54)) nil (25758 49576 134261 48000) 0 nil])
([nil nil ((#("." 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10610) (undo-tree-id340 . -1)) nil (25758 49576 134258 551000) 0 nil])
([nil nil ((#("029" 0 1 (wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10610) (undo-tree-id338 . -2) (undo-tree-id339 . -3)) nil (25758 49576 134257 108000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10610) (undo-tree-id336 . -1) (undo-tree-id337 . -2)) nil (25758 49576 134254 641000) 0 nil])
([nil nil ((10622 . 10623) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10622) (undo-tree-id335 . -1) 10610) nil (25758 49576 134250 854000) 0 nil])
([nil nil ((10656 . 10657)) nil (25758 49576 134240 980000) 0 nil])
([nil nil ((#("It’s much more meaningful to compare
" 0 37 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10730) (undo-tree-id352 . -36) (undo-tree-id353 . -37) (t 25758 49576 206102 98000)) nil (25758 49605 593177 199000) 0 nil])
([nil nil ((#("this performance with naive predictions (just forecasting that the time
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10730) (undo-tree-id350 . -71) (undo-tree-id351 . -72)) nil (25758 49605 593174 205000) 0 nil])
([nil nil ((#("series will remain constant for 10 time steps) or with a simple linear
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 8 71 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10730) (undo-tree-id348 . -70) (undo-tree-id349 . -71)) nil (25758 49605 593171 926000) 0 nil])
([nil nil ((#("model. 
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10730) (undo-tree-id346 . -7) (undo-tree-id347 . -8)) nil (25758 49605 593169 4000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10730) (undo-tree-id345 . -1)) nil (25758 49605 593162 212000) 0 nil])
([nil nil ((#("(it gives an MSE of about 0.223)" 0 32 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10761) (undo-tree-id467 . -31) (undo-tree-id468 . -32) 10730 (t 25758 49605 617767 309000)) nil (25758 49627 611683 726000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10760) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1)) nil (25758 49627 611680 598000) 0 nil])
([nil nil ((10783 . 10784) (#("gives an MSE of about 0.0188: it’" 0 33 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10783) (undo-tree-id354 . -32) (undo-tree-id355 . -32) (undo-tree-id356 . -32) (undo-tree-id357 . -32) (undo-tree-id358 . -6) (undo-tree-id359 . -33) (undo-tree-id360 . -32) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -7) (undo-tree-id376 . -7) (undo-tree-id377 . 24) (undo-tree-id378 . -12) (undo-tree-id379 . -11) (undo-tree-id380 . -11) (undo-tree-id381 . -11) (undo-tree-id382 . -11) (undo-tree-id383 . -11) (undo-tree-id384 . -11) (undo-tree-id385 . -11) (undo-tree-id386 . -11) (undo-tree-id387 . -14) (undo-tree-id388 . -14) (undo-tree-id389 . -14) (undo-tree-id390 . -14) (undo-tree-id391 . -14) (undo-tree-id392 . -14) (undo-tree-id393 . -14) (undo-tree-id394 . -14) (undo-tree-id395 . -20) (undo-tree-id396 . -20) (undo-tree-id397 . -20) (undo-tree-id398 . -20) (undo-tree-id399 . -20) (undo-tree-id400 . -20) (undo-tree-id401 . -20) (undo-tree-id402 . -20) (undo-tree-id403 . -22) (undo-tree-id404 . -22) (undo-tree-id405 . -22) (undo-tree-id406 . -22) (undo-tree-id407 . -22) (undo-tree-id408 . -22) (undo-tree-id409 . -22) (undo-tree-id410 . -22) (undo-tree-id411 . -23) (undo-tree-id412 . -23) (undo-tree-id413 . -23) (undo-tree-id414 . -23) (undo-tree-id415 . -23) (undo-tree-id416 . -23) (undo-tree-id417 . -23) (undo-tree-id418 . -23) (undo-tree-id419 . -27) (undo-tree-id420 . -27) (undo-tree-id421 . -27) (undo-tree-id422 . -27) (undo-tree-id423 . -27) (undo-tree-id424 . -27) (undo-tree-id425 . -27) (undo-tree-id426 . -27) (undo-tree-id427 . -28) (undo-tree-id428 . -28) (undo-tree-id429 . -28) (undo-tree-id430 . -28) (undo-tree-id431 . -28) (undo-tree-id432 . -28) (undo-tree-id433 . -28) (undo-tree-id434 . -28) (undo-tree-id435 . -31) (undo-tree-id436 . -31) (undo-tree-id437 . -31) (undo-tree-id438 . -31) (undo-tree-id439 . -31) (undo-tree-id440 . -31) (undo-tree-id441 . -31) (undo-tree-id442 . -31) (undo-tree-id443 . -32) (undo-tree-id444 . -32) (undo-tree-id445 . -32) (undo-tree-id446 . -32) (undo-tree-id447 . -32) (undo-tree-id448 . -32) (undo-tree-id449 . -32) (undo-tree-id450 . -32) (undo-tree-id451 . -32) (undo-tree-id452 . -33) (undo-tree-id453 . -33) (undo-tree-id454 . -33) 10815) nil (25758 49627 611666 880000) 0 nil])
([nil nil ((11814 . 11815) (t 25758 49627 677540 781000) 11805) nil (25758 49659 282838 665000) 0 nil])
([nil nil ((#(": the MSE for the next 10 time steps is about" 0 45 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11839) (undo-tree-id519 . -44) (undo-tree-id520 . -45) (undo-tree-id521 . -45) (t 25758 49659 305250 811000)) nil (25758 49675 156612 22000) 0 nil])
([nil nil ((11839 . 11840) (#("i" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11839) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) 11840 (11839 . 11840)) nil (25758 49675 156608 513000) 0 nil])
([nil nil ((#("0.008. " 0 7 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11841) (undo-tree-id469 . -6) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -7) (undo-tree-id474 . -6) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -5) (undo-tree-id492 . -5) (undo-tree-id493 . -5) (undo-tree-id494 . -5) (undo-tree-id495 . -5) (undo-tree-id496 . -5) (undo-tree-id497 . -5) (undo-tree-id498 . -5) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -7) 11847) nil (25758 49675 156597 131000) 0 nil])
([nil nil ((11840 . 11841) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11840) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . 1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) 11816 (t 25758 49675 197119 911000)) nil (25758 49698 317563 90000) 0 nil])
([nil nil ((11839 . 11846) (#("." 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11839) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11840) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("i" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11841) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) 11842 (11841 . 11842) (#("That's" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11841) (undo-tree-id914 . -5) (undo-tree-id915 . -5) (undo-tree-id916 . -5) (undo-tree-id917 . 6) (undo-tree-id918 . -5) (undo-tree-id919 . -6) (undo-tree-id920 . -5) (undo-tree-id921 . -5) (undo-tree-id922 . -5) (undo-tree-id923 . -5) (undo-tree-id924 . -5) (undo-tree-id925 . -5) (undo-tree-id926 . -5) (undo-tree-id927 . -5) (undo-tree-id928 . -5) (undo-tree-id929 . -5) (undo-tree-id930 . -5) (undo-tree-id931 . -5) (undo-tree-id932 . -5) (undo-tree-id933 . -5) (undo-tree-id934 . -5) (undo-tree-id935 . -5) (undo-tree-id936 . -5) (undo-tree-id937 . -5) (undo-tree-id938 . -5) (undo-tree-id939 . -5) (undo-tree-id940 . -5) (undo-tree-id941 . -5) (undo-tree-id942 . -5) (undo-tree-id943 . -5) (undo-tree-id944 . -6) (undo-tree-id945 . -6) (undo-tree-id946 . -6) 11846) nil (25758 49698 317782 927000) 0 nil])
([nil nil ((11882 . 11883)) nil (25758 49718 2349 649000) 0 nil] [nil nil ((#("But we can still do better:" 0 27 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11882) (undo-tree-id522 . -26) (undo-tree-id523 . -27) (undo-tree-id524 . -27)) ((11882 . 11909)) (25758 49698 317039 497000) 0 nil])
([nil nil ((11883 . 11885) (#("But we can still" 0 16 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11883) (undo-tree-id1097 . -15) (undo-tree-id1098 . -15) (undo-tree-id1099 . -15) (undo-tree-id1100 . 16) (undo-tree-id1101 . -15) (undo-tree-id1102 . -16) (undo-tree-id1103 . -15) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -5) (undo-tree-id1113 . -9) (undo-tree-id1114 . -15) (undo-tree-id1115 . -15) (undo-tree-id1116 . -16) (undo-tree-id1117 . -16) 11898) nil (25758 49718 2347 863000) 0 nil])
nil
([nil nil ((11883 . 11884) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11883)) nil (25758 49718 2330 541000) 0 nil])
([nil nil ((11896 . 11897) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11896) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) 11883) nil (25758 49718 2328 861000) 0 nil])
([nil nil ((11895 . 11896) (#(":" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11895) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1)) nil (25758 49718 2325 31000) 0 nil])
([nil nil ((#("indeed, instead of training the model to forecast the next 10 values only at
the very last time step, " 0 77 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 77 102 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11897) (undo-tree-id1004 . -101) (undo-tree-id1005 . -101) (undo-tree-id1006 . -101) (undo-tree-id1007 . -101) (undo-tree-id1008 . -102) (undo-tree-id1009 . -101) (undo-tree-id1010 . -5) (undo-tree-id1011 . -6) (undo-tree-id1012 . -14) (undo-tree-id1013 . -17) (undo-tree-id1014 . -26) (undo-tree-id1015 . -30) (undo-tree-id1016 . -36) (undo-tree-id1017 . -39) (undo-tree-id1018 . -48) (undo-tree-id1019 . -52) (undo-tree-id1020 . -57) (undo-tree-id1021 . -60) (undo-tree-id1022 . -67) (undo-tree-id1023 . -72) (undo-tree-id1024 . -75) (undo-tree-id1025 . -79) (undo-tree-id1026 . -79) (undo-tree-id1027 . -79) (undo-tree-id1028 . -79) (undo-tree-id1029 . -79) (undo-tree-id1030 . -79) (undo-tree-id1031 . -79) (undo-tree-id1032 . -79) (undo-tree-id1033 . -84) (undo-tree-id1034 . -84) (undo-tree-id1035 . -84) (undo-tree-id1036 . -84) (undo-tree-id1037 . -84) (undo-tree-id1038 . -84) (undo-tree-id1039 . -84) (undo-tree-id1040 . -84) (undo-tree-id1041 . -89) (undo-tree-id1042 . -89) (undo-tree-id1043 . -89) (undo-tree-id1044 . -89) (undo-tree-id1045 . -89) (undo-tree-id1046 . -89) (undo-tree-id1047 . -89) (undo-tree-id1048 . -89) (undo-tree-id1049 . -94) (undo-tree-id1050 . -94) (undo-tree-id1051 . -94) (undo-tree-id1052 . -94) (undo-tree-id1053 . -94) (undo-tree-id1054 . -94) (undo-tree-id1055 . -94) (undo-tree-id1056 . -94) (undo-tree-id1057 . -99) (undo-tree-id1058 . -99) (undo-tree-id1059 . -99) (undo-tree-id1060 . -99) (undo-tree-id1061 . -99) (undo-tree-id1062 . -99) (undo-tree-id1063 . -99) (undo-tree-id1064 . -99) (undo-tree-id1065 . -100) (undo-tree-id1066 . -100) (undo-tree-id1067 . -100) (undo-tree-id1068 . -100) (undo-tree-id1069 . -100) (undo-tree-id1070 . -100) (undo-tree-id1071 . -100) (undo-tree-id1072 . -100) (undo-tree-id1073 . -101) (undo-tree-id1074 . -101) (undo-tree-id1075 . -101) (undo-tree-id1076 . -101) (undo-tree-id1077 . -101) (undo-tree-id1078 . -101) (undo-tree-id1079 . -101) (undo-tree-id1080 . -101) (undo-tree-id1081 . -101) (undo-tree-id1082 . -102) 11998) nil (25758 49718 2309 824000) 0 nil])
([nil nil ((#("In other words, we can turn this sequence-to-" 0 45 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11973) (undo-tree-id1120 . -44) (undo-tree-id1121 . -45) (undo-tree-id1122 . -45) (t 25758 49718 28813 573000)) nil (25758 49745 474490 96000) 0 nil])
([nil nil ((#("vector RNN into a sequence-to-sequence RNN. 
" 0 45 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11974) (undo-tree-id1118 . -44) (undo-tree-id1119 . -45)) nil (25758 49745 474483 747000) 0 nil])
([nil nil ((12291 . 12292) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12291) (undo-tree-id1124 . -1) (12219 . 12220) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12219) (undo-tree-id1125 . -1) (12146 . 12147) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12146) (undo-tree-id1126 . -1) (12072 . 12073) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12072) (undo-tree-id1127 . -1) (11996 . 11997) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11996) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) 11975 (t 25758 49745 500650 838000)) nil (25758 49759 712845 301000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -12287) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12286 . 12287) (12286 . 12287) (#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -12209) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12208 . 12209) (12208 . 12209) (#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -12131) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12130 . 12131) (12130 . 12131) (#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -12052) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12051 . 12052) (12051 . 12052) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12321) (undo-tree-id1123 . -1) 12291) nil (25758 49759 712806 983000) 0 nil])
([nil nil ((#(", not just the output at the last" 0 33 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12097) (undo-tree-id1224 . -32) (undo-tree-id1225 . -2) (undo-tree-id1226 . -2) (undo-tree-id1227 . -2) (undo-tree-id1228 . -2) (undo-tree-id1229 . -2) (undo-tree-id1230 . -2) (undo-tree-id1231 . -2) (undo-tree-id1232 . -2) (undo-tree-id1233 . -2) (undo-tree-id1234 . -2) (undo-tree-id1235 . -2) (undo-tree-id1236 . -2) (undo-tree-id1237 . -2) (undo-tree-id1238 . -2) (undo-tree-id1239 . -2) (undo-tree-id1240 . -2) (undo-tree-id1241 . -2) (undo-tree-id1242 . -2) (undo-tree-id1243 . -2) (undo-tree-id1244 . -2) (undo-tree-id1245 . -2) (undo-tree-id1246 . -2) (undo-tree-id1247 . -2) (undo-tree-id1248 . -2) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -2) (undo-tree-id1252 . -2) (undo-tree-id1253 . -2) (undo-tree-id1254 . -2) (undo-tree-id1255 . -2) (undo-tree-id1256 . -33) (undo-tree-id1257 . -33) (t 25758 49759 736576 322000)) nil (25758 49830 844270 397000) 0 nil])
([nil nil ((12097 . 12098) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -12097) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) 12096) nil (25758 49830 844247 182000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12097) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1)) nil (25758 49830 844228 174000) 0 nil])
([nil nil ((#("time " 0 5 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12097) (undo-tree-id1172 . -4) (undo-tree-id1173 . -5) (undo-tree-id1174 . -4) (undo-tree-id1175 . -5)) nil (25758 49830 844209 77000) 0 nil])
([nil nil ((#("step" 0 4 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12097) (undo-tree-id1168 . -3) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4)) nil (25758 49830 844202 191000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12129) (nil fontified nil 12128 . 12129) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12128 . 12129) (12128 . 12129) 12099 (t 25758 49830 872297 264000)) nil (25758 49842 182370 861000) 0 nil])
([nil nil ((12243 . 12244) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -12243) (undo-tree-id1258 . -1) (12165 . 12166) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -12165) (undo-tree-id1259 . 1) (undo-tree-id1260 . -1) 12129) nil (25758 49842 182367 910000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12210) (nil fontified nil 12209 . 12210) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12209 . 12210) (12209 . 12210) 12243) nil (25758 49842 182349 974000) 0 nil])
([nil nil ((12328 . 12329) (t 25758 49842 252266 170000)) nil (25758 49856 600365 661000) 0 nil])
([nil nil ((12329 . 12330) (#("\"" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12329) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) 12330 (12329 . 12330) (#("To be clear, a" 0 14 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12329) (undo-tree-id1272 . -13) (undo-tree-id1273 . -13) (undo-tree-id1274 . -13) (undo-tree-id1275 . 14) (undo-tree-id1276 . -13) (undo-tree-id1277 . -14) (undo-tree-id1278 . -13) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) (undo-tree-id1293 . -4) (undo-tree-id1294 . -4) (undo-tree-id1295 . -10) (undo-tree-id1296 . -10) (undo-tree-id1297 . -10) (undo-tree-id1298 . -10) (undo-tree-id1299 . -10) (undo-tree-id1300 . -10) (undo-tree-id1301 . -10) (undo-tree-id1302 . -10) (undo-tree-id1303 . -11) (undo-tree-id1304 . -11) (undo-tree-id1305 . -11) (undo-tree-id1306 . -11) (undo-tree-id1307 . -11) (undo-tree-id1308 . -11) (undo-tree-id1309 . -11) (undo-tree-id1310 . -11) (undo-tree-id1311 . -14) (undo-tree-id1312 . -14) (undo-tree-id1313 . -14) (undo-tree-id1314 . -14) (undo-tree-id1315 . -14) (undo-tree-id1316 . -14) (undo-tree-id1317 . -14) (undo-tree-id1318 . -14) (undo-tree-id1319 . -13) (undo-tree-id1320 . -13) (undo-tree-id1321 . -13) (undo-tree-id1322 . -13) (undo-tree-id1323 . -13) (undo-tree-id1324 . -13) (undo-tree-id1325 . -13) (undo-tree-id1326 . -13) (undo-tree-id1327 . -13) (undo-tree-id1328 . -14) (undo-tree-id1329 . -14) (undo-tree-id1330 . -14) 12342 (t 25758 49856 628231 898000)) nil (25758 49865 902913 268000) 0 nil])
([nil nil ((12424 . 12426) (t 25758 49865 936212 623000)) nil (25758 49883 946895 253000) 0 nil])
([nil nil ((12426 . 12427) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12426)) nil (25758 49883 946890 107000) 0 nil])
([nil nil ((12469 . 12470) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12469) (undo-tree-id1331 . -1) 12431 (t 25758 49883 976181 620000)) nil (25758 49892 263736 719000) 0 nil])
([nil nil ((12501 . 12503)) nil (25758 49892 263721 997000) 0 nil])
([nil nil ((#("So each target must be a sequence of the
" 0 18 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 18 41 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12503) (undo-tree-id1348 . -40) (undo-tree-id1349 . 41) (undo-tree-id1350 . -41) (undo-tree-id1351 . -41) (undo-tree-id1352 . -41) (undo-tree-id1353 . -41) (undo-tree-id1354 . -41) (undo-tree-id1355 . -41) (undo-tree-id1356 . -41) (undo-tree-id1357 . -41) (undo-tree-id1358 . -41) (undo-tree-id1359 . -41) (undo-tree-id1360 . -41) (undo-tree-id1361 . -41) (undo-tree-id1362 . -41) (undo-tree-id1363 . -41) (undo-tree-id1364 . -41) (undo-tree-id1365 . -41) (undo-tree-id1366 . -41) (t 25758 49892 292170 87000)) nil (25758 49907 319613 895000) 0 nil])
([nil nil ((#("same length as the input sequence, containing a 10-dimensional vector at
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12503) (undo-tree-id1337 . -72) (undo-tree-id1338 . 73) (undo-tree-id1339 . -73) (undo-tree-id1340 . -73) (undo-tree-id1341 . -73) (undo-tree-id1342 . -73) (undo-tree-id1343 . -73) (undo-tree-id1344 . -73) (undo-tree-id1345 . -73) (undo-tree-id1346 . -73) (undo-tree-id1347 . -73)) nil (25758 49907 319598 65000) 0 nil])
([nil nil ((#("each step. Let's prepare these target sequences:
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12503) (undo-tree-id1334 . -48) (undo-tree-id1335 . 49) (undo-tree-id1336 . -49)) nil (25758 49907 319588 319000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12503) (undo-tree-id1332 . 1) (undo-tree-id1333 . -1)) nil (25758 49907 319582 53000) 0 nil])
([nil nil ((12720 . 12721) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12720) (undo-tree-id1367 . -1) 12652 (t 25758 49907 348153 509000)) nil (25758 49911 667243 504000) 0 nil])
([nil nil ((12607 . 12608) (#("
" 0 1 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12607) (undo-tree-id1368 . -1) 12606 (t 25758 49911 688149 743000)) nil (25758 49915 209509 971000) 0 nil])
([nil nil ((12781 . 12782) (12780 . 12781) (12779 . 12780) (12778 . 12779) (12754 . 12755) (12753 . 12754) (12752 . 12753) (12751 . 12752) (12731 . 12732) (12730 . 12731) (12729 . 12730) (12728 . 12729) (12652 . 12656) (t 25758 49915 236146 996000)) nil (25758 49923 605980 21000) 0 nil])
([nil nil ((12813 . 12814) (t 25758 49923 640141 667000) 12808) nil (25758 49928 289392 620000) 0 nil])
([nil nil ((#("(there is a lot of overlap between X_train and Y_train )" 0 36 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (invisible t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 37 42 (display ((raise -0.3) (height 0.7)) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 42 48 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 48 49 (invisible t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 49 54 (display ((raise -0.3) (height 0.7)) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 54 56 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12899) (undo-tree-id1456 . -55) (undo-tree-id1457 . 56) (undo-tree-id1458 . -1) (undo-tree-id1459 . 1) (undo-tree-id1460 . -56) (undo-tree-id1461 . -56) (t 25758 49928 312139 413000)) nil (25758 49947 525603 343000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12892) (nil fontified nil 12891 . 12892) (nil wrap-prefix #("  " 0 2 (face org-indent)) 12891 . 12892) (12891 . 12892) 12815) nil (25758 49947 525595 760000) 0 nil])
([nil nil ((12898 . 12899) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12898) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . 1) (undo-tree-id1455 . -1) 12892) nil (25758 49947 525586 84000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12898) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (t 25758 49947 556135 349000)) nil (25758 49965 666797 196000) 0 nil])
([nil nil ((#("Isn’t that cheating?" 0 20 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12900) (undo-tree-id1647 . -19) (undo-tree-id1648 . 20) (undo-tree-id1649 . -3) (undo-tree-id1650 . -20) (undo-tree-id1651 . -20)) nil (25758 49965 666794 885000) 0 nil])
([nil nil ((12899 . 12900) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 12899) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -12900) (undo-tree-id1646 . -1) 12899) nil (25758 49965 666790 174000) 0 nil])
([nil nil ((12900 . 12902) (#("Fortunately, not at all: at" 0 27 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12900) (undo-tree-id1462 . -26) (undo-tree-id1463 . -26) (undo-tree-id1464 . -26) (undo-tree-id1465 . -26) (undo-tree-id1466 . -27) (undo-tree-id1467 . -26) (undo-tree-id1468 . -10) (undo-tree-id1469 . -10) (undo-tree-id1470 . -10) (undo-tree-id1471 . -10) (undo-tree-id1472 . -10) (undo-tree-id1473 . -10) (undo-tree-id1474 . -10) (undo-tree-id1475 . -10) (undo-tree-id1476 . -10) (undo-tree-id1477 . -10) (undo-tree-id1478 . -10) (undo-tree-id1479 . -10) (undo-tree-id1480 . -10) (undo-tree-id1481 . -10) (undo-tree-id1482 . -10) (undo-tree-id1483 . -10) (undo-tree-id1484 . -10) (undo-tree-id1485 . -10) (undo-tree-id1486 . -10) (undo-tree-id1487 . -10) (undo-tree-id1488 . -10) (undo-tree-id1489 . -10) (undo-tree-id1490 . -11) (undo-tree-id1491 . -11) (undo-tree-id1492 . -11) (undo-tree-id1493 . -11) (undo-tree-id1494 . -11) (undo-tree-id1495 . -11) (undo-tree-id1496 . -11) (undo-tree-id1497 . -11) (undo-tree-id1498 . -11) (undo-tree-id1499 . -11) (undo-tree-id1500 . -11) (undo-tree-id1501 . -11) (undo-tree-id1502 . -11) (undo-tree-id1503 . -11) (undo-tree-id1504 . -11) (undo-tree-id1505 . -11) (undo-tree-id1506 . -11) (undo-tree-id1507 . -11) (undo-tree-id1508 . -11) (undo-tree-id1509 . -11) (undo-tree-id1510 . -11) (undo-tree-id1511 . -11) (undo-tree-id1512 . -15) (undo-tree-id1513 . -15) (undo-tree-id1514 . -15) (undo-tree-id1515 . -15) (undo-tree-id1516 . -15) (undo-tree-id1517 . -15) (undo-tree-id1518 . -15) (undo-tree-id1519 . -15) (undo-tree-id1520 . -15) (undo-tree-id1521 . -15) (undo-tree-id1522 . -15) (undo-tree-id1523 . -15) (undo-tree-id1524 . -15) (undo-tree-id1525 . -15) (undo-tree-id1526 . -15) (undo-tree-id1527 . -15) (undo-tree-id1528 . -15) (undo-tree-id1529 . -15) (undo-tree-id1530 . -15) (undo-tree-id1531 . -15) (undo-tree-id1532 . -15) (undo-tree-id1533 . -15) (undo-tree-id1534 . -18) (undo-tree-id1535 . -18) (undo-tree-id1536 . -18) (undo-tree-id1537 . -18) (undo-tree-id1538 . -18) (undo-tree-id1539 . -18) (undo-tree-id1540 . -18) (undo-tree-id1541 . -18) (undo-tree-id1542 . -18) (undo-tree-id1543 . -18) (undo-tree-id1544 . -18) (undo-tree-id1545 . -18) (undo-tree-id1546 . -18) (undo-tree-id1547 . -18) (undo-tree-id1548 . -18) (undo-tree-id1549 . -18) (undo-tree-id1550 . -18) (undo-tree-id1551 . -18) (undo-tree-id1552 . -18) (undo-tree-id1553 . -18) (undo-tree-id1554 . -18) (undo-tree-id1555 . -18) (undo-tree-id1556 . -22) (undo-tree-id1557 . -22) (undo-tree-id1558 . -22) (undo-tree-id1559 . -22) (undo-tree-id1560 . -22) (undo-tree-id1561 . -22) (undo-tree-id1562 . -22) (undo-tree-id1563 . -22) (undo-tree-id1564 . -22) (undo-tree-id1565 . -22) (undo-tree-id1566 . -22) (undo-tree-id1567 . -22) (undo-tree-id1568 . -22) (undo-tree-id1569 . -22) (undo-tree-id1570 . -22) (undo-tree-id1571 . -22) (undo-tree-id1572 . -22) (undo-tree-id1573 . -22) (undo-tree-id1574 . -22) (undo-tree-id1575 . -22) (undo-tree-id1576 . -22) (undo-tree-id1577 . -22) (undo-tree-id1578 . -23) (undo-tree-id1579 . -23) (undo-tree-id1580 . -23) (undo-tree-id1581 . -23) (undo-tree-id1582 . -23) (undo-tree-id1583 . -23) (undo-tree-id1584 . -23) (undo-tree-id1585 . -23) (undo-tree-id1586 . -23) (undo-tree-id1587 . -23) (undo-tree-id1588 . -23) (undo-tree-id1589 . -23) (undo-tree-id1590 . -23) (undo-tree-id1591 . -23) (undo-tree-id1592 . -23) (undo-tree-id1593 . -23) (undo-tree-id1594 . -23) (undo-tree-id1595 . -23) (undo-tree-id1596 . -23) (undo-tree-id1597 . -23) (undo-tree-id1598 . -23) (undo-tree-id1599 . -23) (undo-tree-id1600 . -26) (undo-tree-id1601 . -26) (undo-tree-id1602 . -26) (undo-tree-id1603 . -26) (undo-tree-id1604 . -26) (undo-tree-id1605 . -26) (undo-tree-id1606 . -26) (undo-tree-id1607 . -26) (undo-tree-id1608 . -26) (undo-tree-id1609 . -26) (undo-tree-id1610 . -26) (undo-tree-id1611 . -26) (undo-tree-id1612 . -26) (undo-tree-id1613 . -26) (undo-tree-id1614 . -26) (undo-tree-id1615 . -26) (undo-tree-id1616 . -26) (undo-tree-id1617 . -26) (undo-tree-id1618 . -26) (undo-tree-id1619 . -26) (undo-tree-id1620 . -26) (undo-tree-id1621 . -26) (undo-tree-id1622 . -26) (undo-tree-id1623 . -26) (undo-tree-id1624 . -26) (undo-tree-id1625 . -26) (undo-tree-id1626 . -26) (undo-tree-id1627 . -26) (undo-tree-id1628 . -26) (undo-tree-id1629 . -26) (undo-tree-id1630 . -26) (undo-tree-id1631 . -26) (undo-tree-id1632 . -26) (undo-tree-id1633 . -26) (undo-tree-id1634 . -26) (undo-tree-id1635 . -26) (undo-tree-id1636 . -26) (undo-tree-id1637 . -27) (undo-tree-id1638 . -27) (undo-tree-id1639 . -27) 12926) nil (25758 49965 666774 674000) 0 nil])
([nil nil ((13020 . 13021) (t 25758 49965 692139 12000) 12963) nil (25758 49993 443644 665000) 0 nil])
([nil nil ((#("(even the last one)" 0 19 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13133) (undo-tree-id1666 . -18) (undo-tree-id1667 . -19) 13112 (t 25758 49993 472158 125000)) nil (25758 50006 238074 434000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13132) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1)) nil (25758 50006 238068 472000) 0 nil])
([nil nil ((13196 . 13197) (13195 . 13196) (t 25758 50006 264172 212000)) nil (25758 50046 158184 910000) 0 nil])
([nil nil ((#("Keras offers a
" 0 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1724 . -14) (undo-tree-id1725 . 15) (undo-tree-id1726 . 15) (undo-tree-id1727 . -5) (undo-tree-id1728 . -15)) nil (25758 50046 158183 424000) 0 nil])
([nil nil ((#("TimeDistributed layer for this very purpose: it wraps any layer (e.g., a
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 67 73 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1719 . -72) (undo-tree-id1720 . 73) (undo-tree-id1721 . 73) (undo-tree-id1722 . -15) (undo-tree-id1723 . -73)) nil (25758 50046 158179 155000) 0 nil])
([nil nil ((#("Dense layer) and applies it at every time step of its input sequence" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1716 . -67) (undo-tree-id1717 . 68) (undo-tree-id1718 . -68)) nil (25758 50046 158173 38000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1713 . -1) (undo-tree-id1714 . 2) (undo-tree-id1715 . -2)) nil (25758 50046 158169 622000) 0 nil])
([nil nil ((#("It does
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1710 . -7) (undo-tree-id1711 . 8) (undo-tree-id1712 . -8)) nil (25758 50046 158166 498000) 0 nil])
([nil nil ((#("this efficiently, by reshaping the inputs so that each time step is treated as
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1707 . -78) (undo-tree-id1708 . 79) (undo-tree-id1709 . -79)) nil (25758 50046 158121 249000) 0 nil])
([nil nil ((#("a separate instance (i.e., it reshapes the inputs from [batch size, time steps,
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 80 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1704 . -79) (undo-tree-id1705 . 80) (undo-tree-id1706 . -80)) nil (25758 50046 158118 28000) 0 nil])
([nil nil ((#("input dimensions] to [batch size × time steps, input dimensions]" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1701 . -63) (undo-tree-id1702 . 64) (undo-tree-id1703 . -64)) nil (25758 50046 158114 549000) 0 nil])
([nil nil ((#("; in this
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1698 . -9) (undo-tree-id1699 . 10) (undo-tree-id1700 . -10)) nil (25758 50046 158110 613000) 0 nil])
([nil nil ((#("example, the number of input dimensions is 20 because the previous
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1695 . -66) (undo-tree-id1696 . 67) (undo-tree-id1697 . -67)) nil (25758 50046 158107 123000) 0 nil])
([nil nil ((#("SimpleRNN layer has 20 units)" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1690 . -28) (undo-tree-id1691 . 29) (undo-tree-id1692 . 29) (undo-tree-id1693 . -9) (undo-tree-id1694 . -29)) nil (25758 50046 157682 643000) 0 nil])
([nil nil ((#(", " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1687 . -1) (undo-tree-id1688 . 2) (undo-tree-id1689 . -2)) nil (25758 50046 157678 598000) 0 nil])
([nil nil ((#("then it runs the Dense layer, and finally it
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 45 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1684 . -44) (undo-tree-id1685 . 45) (undo-tree-id1686 . -45)) nil (25758 50046 157675 423000) 0 nil])
([nil nil ((#("reshapes the outputs back to sequences (i.e., it reshapes the outputs from
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 46 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 46 75 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1681 . -74) (undo-tree-id1682 . 75) (undo-tree-id1683 . -75)) nil (25758 50046 157672 244000) 0 nil])
([nil nil ((#("[batch size × time steps, output dimensions] to [batch size, time steps,
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1674 . -72) (undo-tree-id1675 . 73) (undo-tree-id1676 . 73) (undo-tree-id1677 . -1) (undo-tree-id1678 . 30) (undo-tree-id1679 . -44) (undo-tree-id1680 . -73)) nil (25758 50046 438843 116000) 0 nil])
([nil nil ((#("output dimensions]; in this example the number of output dimensions is
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1860 . -70) (undo-tree-id1861 . 71) (undo-tree-id1862 . -71)) nil (25758 50060 202289 42000) 0 nil] [nil nil ((#("output dimensions]; in this example the number of output dimensions is
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1671 . -70) (undo-tree-id1672 . 71) (undo-tree-id1673 . -71)) ((13197 . 13268)) (25758 50046 158672 108000) 0 nil])
([nil nil ((#("10, since the Dense layer has 10 units).2 Here is the updated model:
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1857 . -68) (undo-tree-id1858 . 69) (undo-tree-id1859 . -69)) nil (25758 50060 202286 385000) 0 nil])
([nil nil ((#("10, since the Dense layer has 10 units).2 Here is the updated model:
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1668 . -68) (undo-tree-id1669 . 69) (undo-tree-id1670 . -69)) ((13197 . 13266)) (25758 50046 157655 812000) 0 nil])
([nil nil ((13209 . 13215) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13209 13215 nil nil nil t #s(yas--exit 13233 nil))) #s(yas--exit 13233 nil) 0 nil #s(yas--field 1 13209 13215 nil nil nil t #s(yas--exit 13233 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -13227) (undo-tree-id1807 . -2) (13197 . 13240) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13197) (undo-tree-id1808 . -1) (undo-tree-id1809 . -2) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -2) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -2) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) 13199 (13197 . 13199) (13196 . 13197) 13196) nil (25758 50060 202281 777000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 13197 13244 #s(yas--snippet nil (#s(yas--field 1 13209 13215 nil nil nil t #s(yas--exit 13233 nil))) #s(yas--exit 13233 nil) 0 nil #s(yas--field 1 13209 13215 nil nil nil t #s(yas--exit 13233 nil)) nil nil))) nil (25758 50060 202249 108000) 0 nil])
([nil nil ((#("


" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13232) (undo-tree-id1805 . -2) (undo-tree-id1806 . -3)) nil (25758 50060 202248 53000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13232) (undo-tree-id1729 . -9) (undo-tree-id1730 . -10) (undo-tree-id1731 . -10) (undo-tree-id1732 . -10) (undo-tree-id1733 . -10) (undo-tree-id1734 . -10) (undo-tree-id1735 . -10) (undo-tree-id1736 . -10) (undo-tree-id1737 . -10) (undo-tree-id1738 . -10) (undo-tree-id1739 . -10) (undo-tree-id1740 . -10) (undo-tree-id1741 . -10) (undo-tree-id1742 . -10) (undo-tree-id1743 . -10) (undo-tree-id1744 . -10) (undo-tree-id1745 . -10) (undo-tree-id1746 . -10) (undo-tree-id1747 . -10) (undo-tree-id1748 . -10) (undo-tree-id1749 . -10) (undo-tree-id1750 . -10) (undo-tree-id1751 . -10) (undo-tree-id1752 . -10) (undo-tree-id1753 . -10) (undo-tree-id1754 . -10) (undo-tree-id1755 . -10) (undo-tree-id1756 . -10) (undo-tree-id1757 . -10) (undo-tree-id1758 . -10) (undo-tree-id1759 . -10) (undo-tree-id1760 . -10) (undo-tree-id1761 . -10) (undo-tree-id1762 . -10) (undo-tree-id1763 . -10) (undo-tree-id1764 . -10) (undo-tree-id1765 . -10) (undo-tree-id1766 . -10) (undo-tree-id1767 . -10) (undo-tree-id1768 . -10) (undo-tree-id1769 . -10) (undo-tree-id1770 . -10) (undo-tree-id1771 . -10) (undo-tree-id1772 . -10) (undo-tree-id1773 . -10) (undo-tree-id1774 . -10) (undo-tree-id1775 . -10) (undo-tree-id1776 . -10) (undo-tree-id1777 . -10) (undo-tree-id1778 . -10) (undo-tree-id1779 . -10) (undo-tree-id1780 . -10) (undo-tree-id1781 . -10) (undo-tree-id1782 . -10) (undo-tree-id1783 . -10) (undo-tree-id1784 . -10) (undo-tree-id1785 . -10) (undo-tree-id1786 . -10) (undo-tree-id1787 . -10) (undo-tree-id1788 . -10) (undo-tree-id1789 . -10) (undo-tree-id1790 . -10) (undo-tree-id1791 . -10) (undo-tree-id1792 . -10) (undo-tree-id1793 . -10) (undo-tree-id1794 . -9) (undo-tree-id1795 . -9) (undo-tree-id1796 . -9) (undo-tree-id1797 . -9) (undo-tree-id1798 . -9) (undo-tree-id1799 . -9) (undo-tree-id1800 . -9) (undo-tree-id1801 . -9) (undo-tree-id1802 . -9) (undo-tree-id1803 . -9) (undo-tree-id1804 . -10)) nil (25758 50060 202242 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13446 . 13447) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -13456) (13446 . 13457) 13444) nil (25758 50060 202179 897000) 0 nil])
([nil nil ((13289 . 13290) (t 25758 50060 276266 272000)) nil (25758 50085 650504 600000) 0 nil])
([nil nil ((13294 . 13295)) nil (25758 50085 650503 435000) 0 nil])
([nil nil ((13318 . 13319)) nil (25758 50085 650502 122000) 0 nil])
([nil nil ((13387 . 13388) (13386 . 13387) (13385 . 13386) (13384 . 13385) (13383 . 13384) (13382 . 13383) (13381 . 13382) (13380 . 13381) (13379 . 13380) (13378 . 13379) (13358 . 13359) (13357 . 13358) (13356 . 13357) (13355 . 13356) (13354 . 13355) (13353 . 13354) (13352 . 13353) (13351 . 13352) (13350 . 13351) (13349 . 13350) (13324 . 13325) (13323 . 13324) (13322 . 13323) (13321 . 13322) (13320 . 13321) (13319 . 13320) (13318 . 13319) (13317 . 13318) (13316 . 13317) (13315 . 13316) (13309 . 13310) (13308 . 13309) (13307 . 13308) (13306 . 13307) (13305 . 13306) (13304 . 13305) (13303 . 13304) (13302 . 13303) (13301 . 13302) (13300 . 13301) (13266 . 13276)) nil (25758 50085 650496 512000) 0 nil])
([nil nil ((13377 . 13378) (#("          " 0 10 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 13377) (undo-tree-id1863 . -9) (undo-tree-id1864 . -9) (undo-tree-id1865 . -9) (undo-tree-id1866 . -9) (undo-tree-id1867 . -9) (undo-tree-id1868 . -9) (undo-tree-id1869 . -9) (undo-tree-id1870 . -9) (undo-tree-id1871 . -10) (undo-tree-id1872 . -1) (undo-tree-id1873 . -2) (undo-tree-id1874 . -3) (undo-tree-id1875 . -4) (undo-tree-id1876 . -5) (undo-tree-id1877 . -6) (undo-tree-id1878 . -7) (undo-tree-id1879 . -8) (undo-tree-id1880 . -9) (undo-tree-id1881 . -10) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -13377) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) 13361 (t 25758 50085 684328 738000)) nil (25758 50108 608101 982000) 0 nil])
([nil nil ((13453 . 13454) (13452 . 13453) (13451 . 13452) (13450 . 13451) (13449 . 13450) (13448 . 13449) (13447 . 13448) (13446 . 13447) (13445 . 13446) (13444 . 13445) (13390 . 13393) (13383 . 13390)) nil (25758 50108 608068 779000) 0 nil])
([nil nil ((13519 . 13520) (t 25758 50108 636394 526000) 13518) nil (25758 50118 811805 92000) 0 nil])
([nil nil ((#("(and even higher-
dimensional inputs)" 0 18 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 18 37 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13575) (undo-tree-id1904 . -36) (undo-tree-id1905 . -37) 13521 (t 25758 50118 840426 524000)) nil (25758 50135 985375 314000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13574) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1)) nil (25758 50135 985367 206000) 0 nil])
([nil nil ((13574 . 13576) (#(":" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -13574) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -13575) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) 13576 (#("it handles them just like
TimeDistributed(Dense(…)), meaning it is applied to the last input
dimension only (independently across all time steps). " 0 26 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 26 93 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 93 147 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13576) (undo-tree-id2530 . -146) (undo-tree-id2531 . -146) (undo-tree-id2532 . -146) (undo-tree-id2533 . -146) (undo-tree-id2534 . -147) (undo-tree-id2535 . -146) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -9) (undo-tree-id2545 . -9) (undo-tree-id2546 . -9) (undo-tree-id2547 . -9) (undo-tree-id2548 . -9) (undo-tree-id2549 . -9) (undo-tree-id2550 . -9) (undo-tree-id2551 . -9) (undo-tree-id2552 . -14) (undo-tree-id2553 . -14) (undo-tree-id2554 . -14) (undo-tree-id2555 . -14) (undo-tree-id2556 . -14) (undo-tree-id2557 . -14) (undo-tree-id2558 . -14) (undo-tree-id2559 . -14) (undo-tree-id2560 . -19) (undo-tree-id2561 . -19) (undo-tree-id2562 . -19) (undo-tree-id2563 . -19) (undo-tree-id2564 . -19) (undo-tree-id2565 . -19) (undo-tree-id2566 . -19) (undo-tree-id2567 . -19) (undo-tree-id2568 . -24) (undo-tree-id2569 . -24) (undo-tree-id2570 . -24) (undo-tree-id2571 . -24) (undo-tree-id2572 . -24) (undo-tree-id2573 . -24) (undo-tree-id2574 . -24) (undo-tree-id2575 . -24) (undo-tree-id2576 . 121) (undo-tree-id2577 . -41) (undo-tree-id2578 . -40) (undo-tree-id2579 . -40) (undo-tree-id2580 . -40) (undo-tree-id2581 . -40) (undo-tree-id2582 . -40) (undo-tree-id2583 . -40) (undo-tree-id2584 . -40) (undo-tree-id2585 . -40) (undo-tree-id2586 . -41) (undo-tree-id2587 . -41) (undo-tree-id2588 . -41) (undo-tree-id2589 . -41) (undo-tree-id2590 . -41) (undo-tree-id2591 . -41) (undo-tree-id2592 . -41) (undo-tree-id2593 . -41) (undo-tree-id2594 . -41) (undo-tree-id2595 . -41) (undo-tree-id2596 . -41) (undo-tree-id2597 . -41) (undo-tree-id2598 . -41) (undo-tree-id2599 . -41) (undo-tree-id2600 . -41) (undo-tree-id2601 . -46) (undo-tree-id2602 . -46) (undo-tree-id2603 . -46) (undo-tree-id2604 . -46) (undo-tree-id2605 . -46) (undo-tree-id2606 . -46) (undo-tree-id2607 . -46) (undo-tree-id2608 . -46) (undo-tree-id2609 . -46) (undo-tree-id2610 . -46) (undo-tree-id2611 . -46) (undo-tree-id2612 . -46) (undo-tree-id2613 . -46) (undo-tree-id2614 . -46) (undo-tree-id2615 . -46) (undo-tree-id2616 . -51) (undo-tree-id2617 . -51) (undo-tree-id2618 . -51) (undo-tree-id2619 . -51) (undo-tree-id2620 . -51) (undo-tree-id2621 . -51) (undo-tree-id2622 . -51) (undo-tree-id2623 . -51) (undo-tree-id2624 . -59) (undo-tree-id2625 . -59) (undo-tree-id2626 . -59) (undo-tree-id2627 . -59) (undo-tree-id2628 . -59) (undo-tree-id2629 . -59) (undo-tree-id2630 . -59) (undo-tree-id2631 . -59) (undo-tree-id2632 . -62) (undo-tree-id2633 . -62) (undo-tree-id2634 . -62) (undo-tree-id2635 . -62) (undo-tree-id2636 . -62) (undo-tree-id2637 . -62) (undo-tree-id2638 . -62) (undo-tree-id2639 . -62) (undo-tree-id2640 . -65) (undo-tree-id2641 . -65) (undo-tree-id2642 . -65) (undo-tree-id2643 . -65) (undo-tree-id2644 . -65) (undo-tree-id2645 . -65) (undo-tree-id2646 . -65) (undo-tree-id2647 . -65) (undo-tree-id2648 . -73) (undo-tree-id2649 . -73) (undo-tree-id2650 . -73) (undo-tree-id2651 . -73) (undo-tree-id2652 . -73) (undo-tree-id2653 . -73) (undo-tree-id2654 . -73) (undo-tree-id2655 . -73) (undo-tree-id2656 . -76) (undo-tree-id2657 . -76) (undo-tree-id2658 . -76) (undo-tree-id2659 . -76) (undo-tree-id2660 . -76) (undo-tree-id2661 . -76) (undo-tree-id2662 . -76) (undo-tree-id2663 . -76) (undo-tree-id2664 . -80) (undo-tree-id2665 . -80) (undo-tree-id2666 . -80) (undo-tree-id2667 . -80) (undo-tree-id2668 . -80) (undo-tree-id2669 . -80) (undo-tree-id2670 . -80) (undo-tree-id2671 . -80) (undo-tree-id2672 . -85) (undo-tree-id2673 . -85) (undo-tree-id2674 . -85) (undo-tree-id2675 . -85) (undo-tree-id2676 . -85) (undo-tree-id2677 . -85) (undo-tree-id2678 . -85) (undo-tree-id2679 . -85) (undo-tree-id2680 . -91) (undo-tree-id2681 . -91) (undo-tree-id2682 . -91) (undo-tree-id2683 . -91) (undo-tree-id2684 . -91) (undo-tree-id2685 . -91) (undo-tree-id2686 . -91) (undo-tree-id2687 . -91) (undo-tree-id2688 . -101) (undo-tree-id2689 . -101) (undo-tree-id2690 . -101) (undo-tree-id2691 . -101) (undo-tree-id2692 . -101) (undo-tree-id2693 . -101) (undo-tree-id2694 . -101) (undo-tree-id2695 . -101) (undo-tree-id2696 . -106) (undo-tree-id2697 . -106) (undo-tree-id2698 . -106) (undo-tree-id2699 . -106) (undo-tree-id2700 . -106) (undo-tree-id2701 . -106) (undo-tree-id2702 . -106) (undo-tree-id2703 . -106) (undo-tree-id2704 . -108) (undo-tree-id2705 . -108) (undo-tree-id2706 . -108) (undo-tree-id2707 . -108) (undo-tree-id2708 . -108) (undo-tree-id2709 . -108) (undo-tree-id2710 . -108) (undo-tree-id2711 . -108) (undo-tree-id2712 . -108) (undo-tree-id2713 . -108) (undo-tree-id2714 . -108) (undo-tree-id2715 . -108) (undo-tree-id2716 . -108) (undo-tree-id2717 . -108) (undo-tree-id2718 . -108) (undo-tree-id2719 . -121) (undo-tree-id2720 . -121) (undo-tree-id2721 . -121) (undo-tree-id2722 . -121) (undo-tree-id2723 . -121) (undo-tree-id2724 . -121) (undo-tree-id2725 . -121) (undo-tree-id2726 . -121) (undo-tree-id2727 . -121) (undo-tree-id2728 . -121) (undo-tree-id2729 . -121) (undo-tree-id2730 . -121) (undo-tree-id2731 . -121) (undo-tree-id2732 . -121) (undo-tree-id2733 . -121) (undo-tree-id2734 . -128) (undo-tree-id2735 . -128) (undo-tree-id2736 . -128) (undo-tree-id2737 . -128) (undo-tree-id2738 . -128) (undo-tree-id2739 . -128) (undo-tree-id2740 . -128) (undo-tree-id2741 . -128) (undo-tree-id2742 . -132) (undo-tree-id2743 . -132) (undo-tree-id2744 . -132) (undo-tree-id2745 . -132) (undo-tree-id2746 . -132) (undo-tree-id2747 . -132) (undo-tree-id2748 . -132) (undo-tree-id2749 . -132) (undo-tree-id2750 . -137) (undo-tree-id2751 . -137) (undo-tree-id2752 . -137) (undo-tree-id2753 . -137) (undo-tree-id2754 . -137) (undo-tree-id2755 . -137) (undo-tree-id2756 . -137) (undo-tree-id2757 . -137) (undo-tree-id2758 . -143) (undo-tree-id2759 . -143) (undo-tree-id2760 . -143) (undo-tree-id2761 . -143) (undo-tree-id2762 . -143) (undo-tree-id2763 . -143) (undo-tree-id2764 . -143) (undo-tree-id2765 . -143) (undo-tree-id2766 . -145) (undo-tree-id2767 . -145) (undo-tree-id2768 . -145) (undo-tree-id2769 . -145) (undo-tree-id2770 . -145) (undo-tree-id2771 . -145) (undo-tree-id2772 . -145) (undo-tree-id2773 . -145) (undo-tree-id2774 . -147) (undo-tree-id2775 . -147) (undo-tree-id2776 . -147) (undo-tree-id2777 . -147) (undo-tree-id2778 . -147) (undo-tree-id2779 . -147) (undo-tree-id2780 . -147) (undo-tree-id2781 . -147) (undo-tree-id2782 . -146) (undo-tree-id2783 . -146) (undo-tree-id2784 . -146) (undo-tree-id2785 . -146) (undo-tree-id2786 . -146) (undo-tree-id2787 . -146) (undo-tree-id2788 . -146) (undo-tree-id2789 . -146) (undo-tree-id2790 . -146) (undo-tree-id2791 . -147) (undo-tree-id2792 . -147) (undo-tree-id2793 . -147) 13722 (t 25758 50136 8484 52000)) nil (25758 50185 260106 698000) 0 nil])
([nil nil ((13576 . 13577) (#("Thus, w" 0 7 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13576) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6) (undo-tree-id1922 . -6) (undo-tree-id1923 . 7) (undo-tree-id1924 . -6) (undo-tree-id1925 . -3) (undo-tree-id1926 . -3) (undo-tree-id1927 . -3) (undo-tree-id1928 . -3) (undo-tree-id1929 . -3) (undo-tree-id1930 . -3) (undo-tree-id1931 . -3) (undo-tree-id1932 . -3) (undo-tree-id1933 . -2) (undo-tree-id1934 . -2) (undo-tree-id1935 . -2) (undo-tree-id1936 . -2) (undo-tree-id1937 . -2) (undo-tree-id1938 . -2) (undo-tree-id1939 . -2) (undo-tree-id1940 . -2) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -7) (undo-tree-id1950 . -6) (undo-tree-id1951 . -3) (undo-tree-id1952 . -4) (undo-tree-id1953 . -7) (undo-tree-id1954 . -6) (undo-tree-id1955 . -6) (undo-tree-id1956 . -7) (undo-tree-id1957 . -7) (undo-tree-id1958 . -7) 13582) nil (25758 50185 259210 561000) 0 nil])
([nil nil ((13629 . 13630)) nil (25758 50185 259185 687000) 0 nil])
([nil nil ((#("For the sake of clarity,
" 0 25 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id1917 . -24) (undo-tree-id1918 . 25) (undo-tree-id1919 . -25)) nil (25758 50185 259184 783000) 0 nil])
([nil nil ((#("however" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id1914 . -6) (undo-tree-id1915 . 7) (undo-tree-id1916 . -7)) nil (25758 50185 259181 961000) 0 nil])
([nil nil ((#(", " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id1911 . -1) (undo-tree-id1912 . 2) (undo-tree-id1913 . -2)) nil (25758 50185 260383 242000) 0 nil])
([nil nil ((#("we will keep using TimeDistributed(Dense(10)) because itmakes it clear that the Dense layer is applied independently at each time
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 130 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2797 . -129) (undo-tree-id2798 . 130) (undo-tree-id2799 . -130)) nil (25758 50192 4699 6000) 0 nil] [nil nil ((#("we will keep using TimeDistributed(Dense(10)) because itmakes it clear that the Dense layer is applied independently at each time
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 130 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id1906 . -129) (undo-tree-id1907 . 130) (undo-tree-id1908 . 111) (undo-tree-id1909 . -34) (undo-tree-id1910 . -130)) ((13630 . 13760)) (25758 50185 259173 115000) 0 nil])
([nil nil ((#("step and that the model will output a sequence, not just a single vector.
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2794 . -73) (undo-tree-id2795 . 74) (undo-tree-id2796 . -74)) nil (25758 50192 4692 795000) 0 nil])
nil
([nil nil ((#("All outputs are needed during training, but only the output at the last time
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 35 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 35 77 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2800 . -76) (undo-tree-id2801 . 77) (undo-tree-id2802 . -77) (t 25758 50192 28702 308000)) nil (25758 50207 410539 250000) 0 nil])
([nil nil ((#("step is useful for predictions and for evaluation" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2812 . -48) (undo-tree-id2813 . 49) (undo-tree-id2814 . -49) (t 25758 50207 436770 77000)) nil (25758 50224 81871 378000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2809 . -1) (undo-tree-id2810 . 2) (undo-tree-id2811 . -2)) nil (25758 50224 81867 970000) 0 nil])
([nil nil ((#("So although we will rely
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2806 . -24) (undo-tree-id2807 . 25) (undo-tree-id2808 . -25)) nil (25758 50224 82093 147000) 0 nil])
([nil nil ((#("on the MSE over all the outputs for training, we will use a custom metric
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2924 . -73) (undo-tree-id2925 . 74) (undo-tree-id2926 . -74)) nil (25758 50248 413872 547000) 0 nil] [nil nil ((#("on the MSE over all the outputs for training, we will use a custom metric
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2803 . -73) (undo-tree-id2804 . 74) (undo-tree-id2805 . -74)) ((13630 . 13704)) (25758 50224 81856 573000) 0 nil])
([nil nil ((#("for evaluation, to only compute the MSE over the output at the last time
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2921 . -72) (undo-tree-id2922 . 73) (undo-tree-id2923 . -73)) nil (25758 50248 413869 491000) 0 nil])
nil
([nil nil ((#("step:" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13630) (undo-tree-id2917 . -4) (undo-tree-id2918 . 5) (undo-tree-id2919 . -5) (undo-tree-id2920 . -5)) nil (25758 50248 413866 150000) 0 nil])
([nil nil ((apply yas--snippet-revive 13631 13678 #s(yas--snippet nil (#s(yas--field 1 13643 13649 nil nil nil t #s(yas--exit 13667 nil))) #s(yas--exit 13667 nil) 1 nil #s(yas--field 1 13643 13649 nil nil nil t #s(yas--exit 13667 nil)) nil nil)) (13643 . 13649) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13643 13649 nil nil nil t #s(yas--exit 13667 nil))) #s(yas--exit 13667 nil) 1 nil #s(yas--field 1 13643 13649 nil nil nil t #s(yas--exit 13667 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -13661) (undo-tree-id2867 . -2) (13631 . 13674) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13631) (undo-tree-id2868 . -1) (undo-tree-id2869 . -2) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -2) (undo-tree-id2907 . -2) (undo-tree-id2908 . -2) (undo-tree-id2909 . -2) (undo-tree-id2910 . -2) (undo-tree-id2911 . -2) (undo-tree-id2912 . -2) (undo-tree-id2913 . -2) (undo-tree-id2914 . -2) (undo-tree-id2915 . -2) (undo-tree-id2916 . -2) 13633 (13631 . 13633) (13630 . 13631) 13630) nil (25758 50248 413860 336000) 0 nil])
([nil nil ((#("
" 0 1 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13666) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1)) nil (25758 50248 413821 233000) 0 nil])
([nil nil ((#("
" 0 1 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13666) (undo-tree-id2830 . 1) (undo-tree-id2831 . -1)) nil (25758 50248 413695 152000) 0 nil])
([nil nil ((#("
" 0 1 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13666) (undo-tree-id2828 . 1) (undo-tree-id2829 . -1)) nil (25758 50248 413692 865000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13666) (undo-tree-id2815 . -9) (undo-tree-id2816 . 10) (undo-tree-id2817 . -9) (undo-tree-id2818 . -9) (undo-tree-id2819 . -9) (undo-tree-id2820 . -9) (undo-tree-id2821 . -9) (undo-tree-id2822 . -9) (undo-tree-id2823 . -9) (undo-tree-id2824 . -9) (undo-tree-id2825 . -9) (undo-tree-id2826 . -9) (undo-tree-id2827 . -10)) nil (25758 50248 413689 917000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13896 . 13897) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -13906) (13896 . 13907) 13875) nil (25758 50248 413666 431000) 0 nil])
([nil nil ((13706 . 13710) (t 25758 50248 436965 511000)) nil (25758 50255 37022 727000) 0 nil])
([nil nil ((13878 . 13879) (#("
" 0 1 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -13878) (undo-tree-id2927 . -1) 13823 (t 25758 50255 64999 80000)) nil (25758 50264 874705 271000) 0 nil])
([nil nil ((#("h" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13645) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (t 25758 50264 901049 881000)) nil (25758 50269 2457 894000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13646 . 13647) (nil fontified nil 13646 . 13647) (13646 . 13647) 13645) nil (25758 50269 2445 203000) 0 nil])
([nil nil ((13910 . 13911) (t 25758 50269 21071 501000) 13905) nil (25758 50278 670444 325000) 0 nil])
([nil nil ((#("We get a validation MSE of about 0.006, which is 25% better than the
" 0 40 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 40 69 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3016 . -68) (undo-tree-id3017 . -69) (undo-tree-id3018 . -69) (undo-tree-id3019 . -69) (undo-tree-id3020 . -69) (undo-tree-id3021 . -69) (undo-tree-id3022 . -69) (undo-tree-id3023 . -69) (undo-tree-id3024 . -69) (undo-tree-id3025 . -69) (t 25758 50278 693123 41000)) nil (25758 50320 512740 37000) 0 nil])
([nil nil ((#("previous " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3014 . -8) (undo-tree-id3015 . -9)) nil (25758 50320 512732 431000) 0 nil])
([nil nil ((#("model" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3012 . -4) (undo-tree-id3013 . -5)) nil (25758 50320 512730 39000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3010 . -1) (undo-tree-id3011 . -2)) nil (25758 50320 512727 656000) 0 nil])
([nil nil ((#("You can combine this approach with the first one: just
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 55 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3000 . -54) (undo-tree-id3001 . -55) (undo-tree-id3002 . -55) (undo-tree-id3003 . -55) (undo-tree-id3004 . -55) (undo-tree-id3005 . -55) (undo-tree-id3006 . -55) (undo-tree-id3007 . -55) (undo-tree-id3008 . -55) (undo-tree-id3009 . -55)) nil (25758 50320 512725 341000) 0 nil])
([nil nil ((#("predict the next 10 values using this RNN, then concatenate these values to
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2990 . -75) (undo-tree-id2991 . -76) (undo-tree-id2992 . -76) (undo-tree-id2993 . -76) (undo-tree-id2994 . -76) (undo-tree-id2995 . -76) (undo-tree-id2996 . -76) (undo-tree-id2997 . -76) (undo-tree-id2998 . -76) (undo-tree-id2999 . -76)) nil (25758 50320 512718 598000) 0 nil])
([nil nil ((#("the input time series and use the model again to predict the next 10 values,
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2980 . -76) (undo-tree-id2981 . -77) (undo-tree-id2982 . -77) (undo-tree-id2983 . -77) (undo-tree-id2984 . -77) (undo-tree-id2985 . -77) (undo-tree-id2986 . -77) (undo-tree-id2987 . -77) (undo-tree-id2988 . -77) (undo-tree-id2989 . -77)) nil (25758 50320 512710 52000) 0 nil])
([nil nil ((#("and repeat the process as many times as needed. With this approach, you
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2970 . -71) (undo-tree-id2971 . -72) (undo-tree-id2972 . -72) (undo-tree-id2973 . -72) (undo-tree-id2974 . -72) (undo-tree-id2975 . -72) (undo-tree-id2976 . -72) (undo-tree-id2977 . -72) (undo-tree-id2978 . -72) (undo-tree-id2979 . -72)) nil (25758 50320 512702 433000) 0 nil])
([nil nil ((#("can generate arbitrarily long sequences. It may not be very accurate for
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2960 . -72) (undo-tree-id2961 . -73) (undo-tree-id2962 . -73) (undo-tree-id2963 . -73) (undo-tree-id2964 . -73) (undo-tree-id2965 . -73) (undo-tree-id2966 . -73) (undo-tree-id2967 . -73) (undo-tree-id2968 . -73) (undo-tree-id2969 . -73)) nil (25758 50320 512694 974000) 0 nil])
([nil nil ((#("long-term predictions, but it may be just fine if your goal is to generate
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2950 . -74) (undo-tree-id2951 . -75) (undo-tree-id2952 . -75) (undo-tree-id2953 . -75) (undo-tree-id2954 . -75) (undo-tree-id2955 . -75) (undo-tree-id2956 . -75) (undo-tree-id2957 . -75) (undo-tree-id2958 . -75) (undo-tree-id2959 . -75)) nil (25758 50320 512687 297000) 0 nil])
([nil nil ((#("original music or text, as we will see in Chapter 16.
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2940 . -53) (undo-tree-id2941 . -54) (undo-tree-id2942 . -54) (undo-tree-id2943 . -54) (undo-tree-id2944 . -54) (undo-tree-id2945 . -54) (undo-tree-id2946 . -54) (undo-tree-id2947 . -54) (undo-tree-id2948 . -54) (undo-tree-id2949 . -54)) nil (25758 50320 512678 28000) 0 nil])
([nil nil ((#("TIP
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 4 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id2930 . -3) (undo-tree-id2931 . -4) (undo-tree-id2932 . -4) (undo-tree-id2933 . -4) (undo-tree-id2934 . -4) (undo-tree-id2935 . -4) (undo-tree-id2936 . -4) (undo-tree-id2937 . -4) (undo-tree-id2938 . -4) (undo-tree-id2939 . -4)) nil (25758 50320 512667 708000) 0 nil])
([nil nil ((#("When forecasting time series, it is often useful to have some error bars along with
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 84 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3030 . -83) (undo-tree-id3031 . -84) (t 25758 50320 541358 234000)) nil (25758 50333 849668 420000) 0 nil])
([nil nil ((#("your predictions" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3028 . -15) (undo-tree-id3029 . -16)) nil (25758 50333 849664 764000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3026 . -1) (undo-tree-id3027 . -2)) nil (25758 50333 849658 840000) 0 nil])
([nil nil ((13922 . 13923) (t 25758 50333 877437 177000)) nil (25758 50339 72645 944000) 0 nil])
([nil nil ((#("For this, 
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3062 . -10) (undo-tree-id3063 . -11) (undo-tree-id3064 . -11) (undo-tree-id3065 . -11) (undo-tree-id3066 . -11) (undo-tree-id3067 . -11) (undo-tree-id3068 . -11) (undo-tree-id3069 . -11) (undo-tree-id3070 . -11) (undo-tree-id3071 . -11) (undo-tree-id3072 . -11) (undo-tree-id3073 . -11) (undo-tree-id3074 . -11) (undo-tree-id3075 . -11) (undo-tree-id3076 . -11) (undo-tree-id3077 . -11) (undo-tree-id3078 . -11) (undo-tree-id3079 . -11) (undo-tree-id3080 . -11) (undo-tree-id3081 . -11) (undo-tree-id3082 . -11) (t 25758 50339 101468 606000)) nil (25758 50372 525652 16000) 0 nil])
([nil nil ((#("an efficient technique is MC Dropout, introduced in
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3059 . -51) (undo-tree-id3060 . 52) (undo-tree-id3061 . -52)) nil (25758 50372 525637 962000) 0 nil])
([nil nil ((#("Chapter 11: add an MC Dropout layer within each memory cell, dropping part of the
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 82 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3056 . -81) (undo-tree-id3057 . 82) (undo-tree-id3058 . -82)) nil (25758 50372 525635 582000) 0 nil])
([nil nil ((#("inputs and hidden states" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3053 . -23) (undo-tree-id3054 . 24) (undo-tree-id3055 . -24)) nil (25758 50372 525631 974000) 0 nil])
([nil nil ((#(". " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3050 . -1) (undo-tree-id3051 . 2) (undo-tree-id3052 . -2)) nil (25758 50372 525627 818000) 0 nil])
([nil nil ((#("After training, to forecast a new time series, use the model
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3047 . -60) (undo-tree-id3048 . 61) (undo-tree-id3049 . -61)) nil (25758 50372 525513 670000) 0 nil])
([nil nil ((#("many times and compute the mean and standard deviation of the predictions at each
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 82 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3044 . -81) (undo-tree-id3045 . 82) (undo-tree-id3046 . -82)) nil (25758 50372 525510 951000) 0 nil])
([nil nil ((#("time step.
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3041 . -10) (undo-tree-id3042 . 11) (undo-tree-id3043 . -11)) nil (25758 50372 525507 958000) 0 nil])
([nil nil ((#("Simple RNNs can be quite good at forecasting time series or handling
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3038 . -68) (undo-tree-id3039 . 69) (undo-tree-id3040 . -69)) nil (25758 50372 525505 13000) 0 nil])
([nil nil ((#("other kinds of sequences, but they do not perform as well on long time
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 5 71 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3035 . -70) (undo-tree-id3036 . 71) (undo-tree-id3037 . -71)) nil (25758 50372 525501 973000) 0 nil])
([nil nil ((#("series or sequences. Let’s discuss why and see what we can do about it.
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 71 72 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13912) (undo-tree-id3032 . -71) (undo-tree-id3033 . 72) (undo-tree-id3034 . -72)) nil (25758 50372 525497 505000) 0 nil])
([nil nil ((13913 . 13914) (13912 . 13913) 13912) nil (25758 50372 525480 604000) 0 nil])
([nil nil ((13913 . 13914) (#("


" 0 1 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13910) (undo-tree-id3083 . -2) (undo-tree-id3084 . -2) (undo-tree-id3085 . -2) (undo-tree-id3086 . -2) (undo-tree-id3087 . -2) (undo-tree-id3088 . -2) (undo-tree-id3089 . -2) (undo-tree-id3090 . -2) (undo-tree-id3091 . -2) (undo-tree-id3092 . -2) (undo-tree-id3093 . -2) (undo-tree-id3094 . -2) (undo-tree-id3095 . -2) (undo-tree-id3096 . -2) (undo-tree-id3097 . -2) (undo-tree-id3098 . -2) (undo-tree-id3099 . -2) (undo-tree-id3100 . -2) (undo-tree-id3101 . -3) (13914 . 13916) (13913 . 13914) (t 25758 50372 553676 391000) 9876) nil (25758 50423 14573 299000) 0 nil])
([nil nil ((nil rear-nonsticky nil 21105 . 21106) (nil fontified nil 21071 . 21106) (nil fontified nil 21001 . 21071) (nil fontified nil 20929 . 21001) (nil fontified nil 20924 . 20929) (nil fontified nil 20851 . 20924) (nil fontified nil 20771 . 20851) (nil fontified nil 20694 . 20771) (nil fontified nil 20628 . 20694) (nil fontified nil 20563 . 20628) (nil fontified nil 20492 . 20563) (nil fontified nil 20420 . 20492) (nil fontified nil 20417 . 20420) (nil fontified nil 20364 . 20417) (nil fontified nil 20302 . 20364) (nil fontified nil 20278 . 20302) (nil fontified nil 20217 . 20278) (nil fontified nil 20109 . 20217) (nil fontified nil 20032 . 20109) (nil fontified nil 19953 . 20032) (nil fontified nil 19882 . 19953) (nil fontified nil 19812 . 19882) (nil fontified nil 19742 . 19812) (nil fontified nil 19667 . 19742) (nil fontified nil 19594 . 19667) (nil fontified nil 19530 . 19594) (nil fontified nil 19456 . 19530) (nil fontified nil 19386 . 19456) (nil fontified nil 19313 . 19386) (nil fontified nil 19243 . 19313) (nil fontified nil 19173 . 19243) (nil fontified nil 19098 . 19173) (nil fontified nil 19031 . 19098) (nil fontified nil 18960 . 19031) (nil fontified nil 18924 . 18960) (nil fontified nil 18867 . 18924) (nil fontified nil 18808 . 18867) (nil fontified nil 18776 . 18808) (nil fontified nil 18724 . 18776) (nil fontified nil 18672 . 18724) (nil fontified nil 18655 . 18672) (nil fontified nil 18598 . 18655) (nil fontified nil 18573 . 18598) (nil fontified nil 18549 . 18573) (nil fontified nil 18522 . 18549) (nil fontified nil 18466 . 18522) (nil fontified nil 18423 . 18466) (nil fontified nil 18384 . 18423) (nil fontified nil 18313 . 18384) (nil fontified nil 18175 . 18313) (nil fontified nil 18098 . 18175) (nil fontified nil 18026 . 18098) (nil fontified nil 17950 . 18026) (nil fontified nil 17874 . 17950) (nil fontified nil 17800 . 17874) (nil fontified nil 17728 . 17800) (nil fontified nil 17656 . 17728) (nil fontified nil 17582 . 17656) (nil fontified nil 17514 . 17582) (nil fontified nil 17491 . 17514) (nil fontified nil 17416 . 17491) (nil fontified nil 17341 . 17416) (nil fontified nil 17261 . 17341) (nil fontified nil 17188 . 17261) (nil fontified nil 17116 . 17188) (nil fontified nil 17039 . 17116) (nil fontified nil 16964 . 17039) (nil fontified nil 16890 . 16964) (nil fontified nil 16824 . 16890) (nil fontified nil 16751 . 16824) (nil fontified nil 16685 . 16751) (nil fontified nil 16667 . 16685) (nil fontified nil 16596 . 16667) (nil fontified nil 16536 . 16596) (nil fontified nil 16462 . 16536) (nil fontified nil 16388 . 16462) (nil fontified nil 16311 . 16388) (nil fontified nil 16234 . 16311) (nil fontified nil 16160 . 16234) (nil fontified nil 16084 . 16160) (nil fontified nil 15940 . 16084) (nil fontified nil 15864 . 15940) (nil fontified nil 15787 . 15864) (nil fontified nil 15711 . 15787) (nil fontified nil 15640 . 15711) (nil fontified nil 15570 . 15640) (nil fontified nil 15539 . 15570) (nil fontified nil 15467 . 15539) (nil fontified nil 15394 . 15467) (nil fontified nil 15319 . 15394) (nil fontified nil 15242 . 15319) (nil fontified nil 15165 . 15242) (nil fontified nil 15092 . 15165) (nil fontified nil 15016 . 15092) (nil fontified nil 14943 . 15016) (nil fontified nil 14871 . 14943) (nil fontified nil 14806 . 14871) (nil fontified nil 14737 . 14806) (nil fontified nil 14669 . 14737) (nil fontified nil 14603 . 14669) (nil fontified nil 14530 . 14603) (nil fontified nil 14454 . 14530) (nil fontified nil 14414 . 14454) (nil fontified nil 14368 . 14414) (nil fontified nil 14292 . 14368) (nil fontified nil 14225 . 14292) (nil fontified nil 14154 . 14225) (nil fontified nil 14082 . 14154) (nil fontified nil 14011 . 14082) (nil fontified nil 13939 . 14011) (nil fontified nil 13915 . 13939) (13915 . 21106) (t 25758 50423 42010 147000)) nil (25758 50453 647714 364000) 0 nil])
([nil nil ((13912 . 13913) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -13912) (undo-tree-id3102 . 1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (#(" " 0 1 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . 13912) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (#("
" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -13913) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) 13912) nil (25758 50453 647665 447000) 0 nil])
([nil nil ((21104 . 21105)) nil (25758 50453 646981 70000) 0 nil])
([nil nil ((#(", discussed in" 0 14 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14137) (undo-tree-id3798 . -13) (undo-tree-id3799 . -14) (undo-tree-id3800 . -14) (t 25758 50453 718223 932000)) nil (25758 50502 825319 785000) 0 nil])
([nil nil ((#("Chapter " 0 8 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14138) (undo-tree-id3796 . -7) (undo-tree-id3797 . -8)) nil (25758 50502 825315 534000) 0 nil])
([nil nil ((#("11" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14138) (undo-tree-id3794 . -1) (undo-tree-id3795 . -2)) nil (25758 50502 825312 840000) 0 nil])
([nil nil ((#(": " 0 1 (face org-code fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (face org-code fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14138) (undo-tree-id3792 . -1) (undo-tree-id3793 . -2)) nil (25758 50502 825309 159000) 0 nil])
([nil nil ((14054 . 14056)) nil (25758 50502 825297 869000) 0 nil])
([nil nil ((14081 . 14082) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14081) (undo-tree-id3803 . -1) 14056 (t 25758 50502 854582 266000)) nil (25758 50508 819060 923000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14132) (nil fontified nil 14131 . 14132) (nil wrap-prefix #("  " 0 2 (face org-indent)) 14131 . 14132) (14131 . 14132) 14081) nil (25758 50508 819058 355000) 0 nil])
([nil nil ((14139 . 14140) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14139) (undo-tree-id3801 . 1) (undo-tree-id3802 . -1) 14132) nil (25758 50508 819055 935000) 0 nil])
([nil nil ((14198 . 14199) 14132) nil (25758 50508 819041 323000) 0 nil])
([nil nil ((14308 . 14310) (t 25758 50508 846627 231000)) nil (25758 50527 754117 767000) 0 nil])
([nil nil ((#("Let’s look at both these problems,
" 0 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14310) (undo-tree-id3807 . -34) (undo-tree-id3808 . 35) (undo-tree-id3809 . -35) (t 25758 50527 782771 53000)) nil (25758 50534 762661 418000) 0 nil])
([nil nil ((#("starting with the unstable gradients problem.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 46 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14310) (undo-tree-id3804 . -45) (undo-tree-id3805 . 46) (undo-tree-id3806 . -46)) nil (25758 50593 278582 164000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14308) (14310 . 14312)) ((#("* " 0 1 (face org-level-1 keymap (keymap) composition (0 1 [9673]) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 1 2 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 14310) (14308 . 14309) (t 25758 50550 130944 62000)) (25758 50605 776240 184000) 0 nil])
([nil nil ((14351 . 14352) (#("D" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14351) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) 14352 (14351 . 14352) (#("Many of the t" 0 13 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id3942 . -12) (undo-tree-id3943 . -12) (undo-tree-id3944 . -12) (undo-tree-id3945 . -12) (undo-tree-id3946 . -5) (undo-tree-id3947 . -13) (undo-tree-id3948 . -12) (undo-tree-id3949 . -3) (undo-tree-id3950 . -3) (undo-tree-id3951 . -3) (undo-tree-id3952 . -3) (undo-tree-id3953 . -3) (undo-tree-id3954 . -3) (undo-tree-id3955 . -3) (undo-tree-id3956 . -3) (undo-tree-id3957 . -6) (undo-tree-id3958 . -10) (undo-tree-id3959 . -13) (undo-tree-id3960 . -12) (undo-tree-id3961 . -12) (undo-tree-id3962 . -13) (undo-tree-id3963 . -13) (undo-tree-id3964 . -13) 14363 (t 25758 50550 130944 62000)) nil (25758 50623 194721 274000) 0 nil] [nil nil ((#("Many of the tricks we used in deep nets to alleviate the unstable gradients
" 0 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 75 76 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id3849 . -75) (undo-tree-id3850 . -75) (undo-tree-id3851 . -75) (undo-tree-id3852 . -76) (undo-tree-id3853 . -76) (undo-tree-id3854 . -76) (undo-tree-id3855 . -76) (undo-tree-id3856 . -76) (undo-tree-id3857 . -76) (undo-tree-id3858 . -76) (undo-tree-id3859 . -76) (undo-tree-id3860 . -76) (undo-tree-id3861 . -76) (undo-tree-id3862 . -76) (undo-tree-id3863 . -76) (undo-tree-id3864 . -76) (undo-tree-id3865 . -76) (undo-tree-id3866 . -76) (undo-tree-id3867 . -76) (undo-tree-id3868 . -22) (undo-tree-id3869 . -75) (undo-tree-id3870 . -75) (undo-tree-id3871 . -75) (undo-tree-id3872 . -75) (undo-tree-id3873 . -75) (undo-tree-id3874 . -75) (undo-tree-id3875 . -75) (undo-tree-id3876 . -75) (undo-tree-id3877 . -19) (undo-tree-id3878 . -19) (undo-tree-id3879 . -19) (undo-tree-id3880 . -19) (undo-tree-id3881 . -19) (undo-tree-id3882 . -19) (undo-tree-id3883 . -19) (undo-tree-id3884 . -19) (undo-tree-id3885 . -19) (undo-tree-id3886 . -19) (undo-tree-id3887 . -19) (undo-tree-id3888 . -19) (undo-tree-id3889 . -19) (undo-tree-id3890 . -19) (undo-tree-id3891 . -19) (undo-tree-id3892 . -19) (undo-tree-id3893 . -19) (undo-tree-id3894 . -19) (undo-tree-id3895 . -19) (undo-tree-id3896 . -19) (undo-tree-id3897 . -19) (undo-tree-id3898 . -19) (undo-tree-id3899 . -19) (undo-tree-id3900 . -19) (undo-tree-id3901 . -19) (undo-tree-id3902 . -19) (undo-tree-id3903 . -19) (undo-tree-id3904 . -19) (undo-tree-id3905 . -19) (undo-tree-id3906 . -19) (undo-tree-id3907 . -19) (undo-tree-id3908 . -19) (undo-tree-id3909 . -19) (undo-tree-id3910 . -75) (undo-tree-id3911 . -74) (undo-tree-id3912 . -74) (undo-tree-id3913 . -74) (undo-tree-id3914 . -74) (undo-tree-id3915 . -74) (undo-tree-id3916 . -74) (undo-tree-id3917 . -74) (undo-tree-id3918 . -74) (undo-tree-id3919 . -74) (undo-tree-id3920 . -74) (undo-tree-id3921 . -75) (undo-tree-id3922 . -75) (undo-tree-id3923 . -75) (undo-tree-id3924 . -75) (undo-tree-id3925 . -75) (undo-tree-id3926 . -75) (undo-tree-id3927 . -75) (undo-tree-id3928 . -75) (undo-tree-id3929 . -75) (undo-tree-id3930 . -75) (undo-tree-id3931 . -76) (t 25758 50550 130944 62000)) ((14351 . 14427)) (25758 50605 775806 313000) 0 nil] [nil nil ((#("we used in deep nets to alleviate the unstable gradients
" 0 57 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14370) (undo-tree-id3816 . -56) (undo-tree-id3817 . -56) (undo-tree-id3818 . -56) (undo-tree-id3819 . -56) (undo-tree-id3820 . -57) (undo-tree-id3821 . -57) (undo-tree-id3822 . -57) (undo-tree-id3823 . -57) (undo-tree-id3824 . -57) (undo-tree-id3825 . -57) (undo-tree-id3826 . -57) (undo-tree-id3827 . -57) (undo-tree-id3828 . -57) (undo-tree-id3829 . -57) (undo-tree-id3830 . -57) (undo-tree-id3831 . -57) (undo-tree-id3832 . -57) (undo-tree-id3833 . -57) (undo-tree-id3834 . -57) (undo-tree-id3835 . -57) (undo-tree-id3836 . -3) (undo-tree-id3837 . -57) (undo-tree-id3838 . -56) (undo-tree-id3839 . -56) (undo-tree-id3840 . -56) (undo-tree-id3841 . -56) (undo-tree-id3842 . -56) (undo-tree-id3843 . -56) (undo-tree-id3844 . -56) (undo-tree-id3845 . -56) (undo-tree-id3846 . -56) (undo-tree-id3847 . -56) (undo-tree-id3848 . -57) 14426 (t 25758 50550 130944 62000)) ((14370 . 14427)) (25758 50590 733511 726000) 0 nil])
([nil nil ((14450 . 14452)) nil (25758 50623 194684 41000) 0 nil])
nil
([nil nil ((#("problem " 0 8 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14370) (undo-tree-id3813 . -7) (undo-tree-id3814 . 8) (undo-tree-id3815 . -8)) ((14370 . 14378)) (25758 50590 167829 86000) 0 nil])
([nil nil ((14522 . 14524) (t 25758 50623 223532 851000)) nil (25758 50631 20510 129000) 0 nil])
([nil nil ((#("can " 0 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14370) (undo-tree-id3810 . -3) (undo-tree-id3811 . 4) (undo-tree-id3812 . -4)) ((14370 . 14374)) (25758 50590 167581 845000) 0 nil])
([nil nil ((#("(e.g., ReLU)" 0 12 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14568) (undo-tree-id3977 . -11) (undo-tree-id3978 . -12) 14558 (t 25758 50631 43597 792000)) nil (25758 50636 843028 647000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14567) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1)) nil (25758 50636 843021 918000) 0 nil])
([nil nil ((#("Tricks we used in deep nets to alleviate the unstable gradients
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 7 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 7 63 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 64 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4110 . -63) (undo-tree-id4111 . 63) (undo-tree-id4112 . -23) (undo-tree-id4113 . -23) (undo-tree-id4114 . -23) (undo-tree-id4115 . -23) (undo-tree-id4116 . -23) (undo-tree-id4117 . -23) (undo-tree-id4118 . -23) (undo-tree-id4119 . -23) (undo-tree-id4120 . -23) (undo-tree-id4121 . -23) (undo-tree-id4122 . -23) (undo-tree-id4123 . -23) (undo-tree-id4124 . -23) (undo-tree-id4125 . -23) (undo-tree-id4126 . -23) (undo-tree-id4127 . -23) (undo-tree-id4128 . -23) (undo-tree-id4129 . -23) (undo-tree-id4130 . -23) (undo-tree-id4131 . -64) 14374 (t 25758 50636 867646 387000)) nil (25758 50651 362982 666000) 0 nil])
([nil nil ((#("problem can also be used for RNNs: 
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 8 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 8 12 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 12 36 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4068 . -35) (undo-tree-id4069 . 36) (undo-tree-id4070 . -23) (undo-tree-id4071 . -36) (undo-tree-id4072 . -36) (undo-tree-id4073 . -36) (undo-tree-id4074 . -36) (undo-tree-id4075 . -36) (undo-tree-id4076 . -36) (undo-tree-id4077 . -36) (undo-tree-id4078 . -36) (undo-tree-id4079 . 7) (undo-tree-id4080 . -33) (undo-tree-id4081 . -23) (undo-tree-id4082 . -23) (undo-tree-id4083 . -23) (undo-tree-id4084 . -23) (undo-tree-id4085 . -23) (undo-tree-id4086 . -23) (undo-tree-id4087 . -23) (undo-tree-id4088 . -23) (undo-tree-id4089 . -23) (undo-tree-id4090 . -23) (undo-tree-id4091 . -23) (undo-tree-id4092 . -23) (undo-tree-id4093 . -23) (undo-tree-id4094 . -23) (undo-tree-id4095 . -23) (undo-tree-id4096 . -23) (undo-tree-id4097 . -23) (undo-tree-id4098 . -23) (undo-tree-id4099 . -23) (undo-tree-id4100 . -23) (undo-tree-id4101 . -23) (undo-tree-id4102 . -23) (undo-tree-id4103 . -23) (undo-tree-id4104 . -23) (undo-tree-id4105 . -23) (undo-tree-id4106 . -23) (undo-tree-id4107 . -23) (undo-tree-id4108 . -23) (undo-tree-id4109 . -36) 14374) nil (25758 50651 362963 624000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4066 . 1) (undo-tree-id4067 . -1)) nil (25758 50651 362930 384000) 0 nil])
([nil nil ((#("good parameter initialization, faster
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 38 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4055 . -37) (undo-tree-id4056 . 38) (undo-tree-id4057 . -23) (undo-tree-id4058 . -23) (undo-tree-id4059 . -23) (undo-tree-id4060 . -23) (undo-tree-id4061 . -23) (undo-tree-id4062 . -23) (undo-tree-id4063 . -23) (undo-tree-id4064 . -23) (undo-tree-id4065 . -38)) nil (25758 50651 362927 969000) 0 nil])
([nil nil ((#("optimizers, dropout, and so on. 
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 33 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4034 . -32) (undo-tree-id4035 . 33) (undo-tree-id4036 . -33) (undo-tree-id4037 . -33) (undo-tree-id4038 . -33) (undo-tree-id4039 . -33) (undo-tree-id4040 . -33) (undo-tree-id4041 . -33) (undo-tree-id4042 . -33) (undo-tree-id4043 . -33) (undo-tree-id4044 . -23) (undo-tree-id4045 . -23) (undo-tree-id4046 . -23) (undo-tree-id4047 . -23) (undo-tree-id4048 . -23) (undo-tree-id4049 . -23) (undo-tree-id4050 . -23) (undo-tree-id4051 . -23) (undo-tree-id4052 . 33) (undo-tree-id4053 . -10) (undo-tree-id4054 . -33)) nil (25758 50651 362919 315000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4032 . 1) (undo-tree-id4033 . -1)) nil (25758 50651 815008 200000) 0 nil])
([nil nil ((#("However, " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 9 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4640 . -8) (undo-tree-id4641 . -8) (undo-tree-id4642 . -8) (undo-tree-id4643 . 9) (undo-tree-id4644 . -8) (undo-tree-id4645 . -9) (undo-tree-id4646 . -8) (undo-tree-id4647 . -6) (undo-tree-id4648 . -6) (undo-tree-id4649 . -6) (undo-tree-id4650 . -6) (undo-tree-id4651 . -6) (undo-tree-id4652 . -6) (undo-tree-id4653 . -6) (undo-tree-id4654 . -6) (undo-tree-id4655 . -7) (undo-tree-id4656 . -8) (undo-tree-id4657 . -8) (undo-tree-id4658 . -9) 14359) nil (25758 50723 130359 981000) 0 nil] [nil nil ((#("However, nonsaturating activation
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 34 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id4020 . -33) (undo-tree-id4021 . 34) (undo-tree-id4022 . 34) (undo-tree-id4023 . -23) (undo-tree-id4024 . -23) (undo-tree-id4025 . -23) (undo-tree-id4026 . -23) (undo-tree-id4027 . -23) (undo-tree-id4028 . -23) (undo-tree-id4029 . -23) (undo-tree-id4030 . -23) (undo-tree-id4031 . -34)) ((14351 . 14385)) (25758 50651 520141 782000) 0 nil])
([nil nil ((14351 . 14352) (#("n" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351)) nil (25758 50723 130347 505000) 0 nil])
([nil nil ((#("functions may not help as much here" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id3983 . -34) (undo-tree-id3984 . 35) (undo-tree-id3985 . 35) (undo-tree-id3986 . -9) (undo-tree-id3987 . -9) (undo-tree-id3988 . -9) (undo-tree-id3989 . -9) (undo-tree-id3990 . -9) (undo-tree-id3991 . -9) (undo-tree-id3992 . -9) (undo-tree-id3993 . -9) (undo-tree-id3994 . -9) (undo-tree-id3995 . -9) (undo-tree-id3996 . -9) (undo-tree-id3997 . -9) (undo-tree-id3998 . -9) (undo-tree-id3999 . -9) (undo-tree-id4000 . -9) (undo-tree-id4001 . -9) (undo-tree-id4002 . -9) (undo-tree-id4003 . -9) (undo-tree-id4004 . -9) (undo-tree-id4005 . -9) (undo-tree-id4006 . -9) (undo-tree-id4007 . -9) (undo-tree-id4008 . -10) (undo-tree-id4009 . -14) (undo-tree-id4010 . -18) (undo-tree-id4011 . -23) (undo-tree-id4012 . -23) (undo-tree-id4013 . -23) (undo-tree-id4014 . -23) (undo-tree-id4015 . -23) (undo-tree-id4016 . -23) (undo-tree-id4017 . -23) (undo-tree-id4018 . -23) (undo-tree-id4019 . -35)) ((14351 . 14386)) (25758 50651 363355 381000) 0 nil])
([nil nil ((#("may not help as much here; in fact," 0 25 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 25 26 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 26 27 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 27 28 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 28 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14386) (undo-tree-id4541 . -34) (undo-tree-id4542 . -34) (undo-tree-id4543 . -34) (undo-tree-id4544 . -34) (undo-tree-id4545 . -4) (undo-tree-id4546 . -8) (undo-tree-id4547 . -13) (undo-tree-id4548 . -13) (undo-tree-id4549 . -13) (undo-tree-id4550 . -13) (undo-tree-id4551 . -13) (undo-tree-id4552 . -13) (undo-tree-id4553 . -13) (undo-tree-id4554 . -13) (undo-tree-id4555 . -4) (undo-tree-id4556 . -35) (undo-tree-id4557 . -34) (undo-tree-id4558 . -2) (undo-tree-id4559 . -2) (undo-tree-id4560 . -2) (undo-tree-id4561 . -2) (undo-tree-id4562 . -2) (undo-tree-id4563 . -2) (undo-tree-id4564 . -2) (undo-tree-id4565 . -2) (undo-tree-id4566 . -6) (undo-tree-id4567 . -6) (undo-tree-id4568 . -6) (undo-tree-id4569 . -6) (undo-tree-id4570 . -6) (undo-tree-id4571 . -6) (undo-tree-id4572 . -6) (undo-tree-id4573 . -6) (undo-tree-id4574 . -11) (undo-tree-id4575 . -11) (undo-tree-id4576 . -11) (undo-tree-id4577 . -11) (undo-tree-id4578 . -11) (undo-tree-id4579 . -11) (undo-tree-id4580 . -11) (undo-tree-id4581 . -11) (undo-tree-id4582 . -14) (undo-tree-id4583 . -14) (undo-tree-id4584 . -14) (undo-tree-id4585 . -14) (undo-tree-id4586 . -14) (undo-tree-id4587 . -14) (undo-tree-id4588 . -14) (undo-tree-id4589 . -14) (undo-tree-id4590 . -19) (undo-tree-id4591 . -19) (undo-tree-id4592 . -19) (undo-tree-id4593 . -19) (undo-tree-id4594 . -19) (undo-tree-id4595 . -19) (undo-tree-id4596 . -19) (undo-tree-id4597 . -19) (undo-tree-id4598 . -24) (undo-tree-id4599 . -24) (undo-tree-id4600 . -24) (undo-tree-id4601 . -24) (undo-tree-id4602 . -24) (undo-tree-id4603 . -24) (undo-tree-id4604 . -24) (undo-tree-id4605 . -24) (undo-tree-id4606 . -25) (undo-tree-id4607 . -25) (undo-tree-id4608 . -25) (undo-tree-id4609 . -25) (undo-tree-id4610 . -25) (undo-tree-id4611 . -25) (undo-tree-id4612 . -25) (undo-tree-id4613 . -25) (undo-tree-id4614 . -28) (undo-tree-id4615 . -28) (undo-tree-id4616 . -28) (undo-tree-id4617 . -28) (undo-tree-id4618 . -28) (undo-tree-id4619 . -28) (undo-tree-id4620 . -28) (undo-tree-id4621 . -28) (undo-tree-id4622 . -33) (undo-tree-id4623 . -33) (undo-tree-id4624 . -33) (undo-tree-id4625 . -33) (undo-tree-id4626 . -33) (undo-tree-id4627 . -33) (undo-tree-id4628 . -33) (undo-tree-id4629 . -33) (undo-tree-id4630 . -34) (undo-tree-id4631 . -34) (undo-tree-id4632 . -34) (undo-tree-id4633 . -34) (undo-tree-id4634 . -34) (undo-tree-id4635 . -34) (undo-tree-id4636 . -34) (undo-tree-id4637 . -34) (undo-tree-id4638 . -34) (undo-tree-id4639 . -35) 14420) nil (25758 50723 130343 390000) 0 nil])
([nil nil ((#("; " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14351) (undo-tree-id3979 . -1) (undo-tree-id3980 . 2) (undo-tree-id3981 . 2) (undo-tree-id3982 . -2)) ((14351 . 14353)) (25758 50651 362851 524000) 0 nil])
([nil nil ((#("Why?" 0 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14460) (undo-tree-id4538 . -3) (undo-tree-id4539 . -4) (undo-tree-id4540 . -4)) nil (25758 50723 130275 473000) 0 nil])
nil
([nil nil ((14461 . 14462) (#("Well, s" 0 7 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14461) (undo-tree-id4496 . -6) (undo-tree-id4497 . -6) (undo-tree-id4498 . -6) (undo-tree-id4499 . -6) (undo-tree-id4500 . -7) (undo-tree-id4501 . -6) (undo-tree-id4502 . -3) (undo-tree-id4503 . -3) (undo-tree-id4504 . -3) (undo-tree-id4505 . -3) (undo-tree-id4506 . -3) (undo-tree-id4507 . -3) (undo-tree-id4508 . -3) (undo-tree-id4509 . -3) (undo-tree-id4510 . -4) (undo-tree-id4511 . -4) (undo-tree-id4512 . -4) (undo-tree-id4513 . -4) (undo-tree-id4514 . -4) (undo-tree-id4515 . -4) (undo-tree-id4516 . -4) (undo-tree-id4517 . -4) (undo-tree-id4518 . -5) (undo-tree-id4519 . -5) (undo-tree-id4520 . -5) (undo-tree-id4521 . -5) (undo-tree-id4522 . -5) (undo-tree-id4523 . -5) (undo-tree-id4524 . -5) (undo-tree-id4525 . -5) (undo-tree-id4526 . -6) (undo-tree-id4527 . -6) (undo-tree-id4528 . -6) (undo-tree-id4529 . -6) (undo-tree-id4530 . -6) (undo-tree-id4531 . -6) (undo-tree-id4532 . -6) (undo-tree-id4533 . -6) (undo-tree-id4534 . -6) (undo-tree-id4535 . -7) (undo-tree-id4536 . -7) (undo-tree-id4537 . -7) 14467) nil (25758 50723 130271 270000) 0 nil])
([nil nil ((14820 . 14822)) nil (25758 50723 130246 773000) 0 nil])
([nil nil ((14812 . 14813) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14812) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (14739 . 14740) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14739) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (14663 . 14664) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14663) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (14590 . 14591) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14590) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (14518 . 14519) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14518) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (14459 . 14460) (#(" " 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14459) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14460) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (14395 . 14396) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14395) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (14375 . 14376) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14375) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) 14814) nil (25758 50723 130229 952000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14747) (nil wrap-prefix #("  " 0 2 (face org-indent)) 14746 . 14747) (14746 . 14747) (#(" " 0 1 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14667) (undo-tree-id4132 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 14666 . 14667) (14666 . 14667) (#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -14590) (nil wrap-prefix #("  " 0 2 (face org-indent)) 14589 . 14590) (14589 . 14590) (#(" " 0 1 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14509) (undo-tree-id4133 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 14508 . 14509) (14508 . 14509) (#(" " 0 1 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14428) (undo-tree-id4134 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 14427 . 14428) (14427 . 14428) (#(" " 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14817) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14386) (undo-tree-id4148 . -1) 14493) nil (25758 50723 129475 147000) 0 nil])
([nil nil ((#("(this explains why it is the default)" 0 37 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14967) (undo-tree-id4727 . -36) (undo-tree-id4728 . 37) (undo-tree-id4729 . -1) (undo-tree-id4730 . 1) (undo-tree-id4731 . -37) (undo-tree-id4732 . -37) (t 25758 50723 160388 55000)) nil (25758 50782 237831 3000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14890) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1)) nil (25758 50782 237826 455000) 0 nil])
([nil nil ((14965 . 14966) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -14965) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) 14890) nil (25758 50782 237822 149000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14965) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1)) nil (25758 50782 237779 441000) 0 nil])
([nil nil ((14967 . 14968)) nil (25758 50782 237764 697000) 0 nil])
([nil nil ((#("In much the same way, the gradients" 0 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4741 . -34) (undo-tree-id4742 . 35) (undo-tree-id4743 . -35) (undo-tree-id4744 . -35) (t 25758 50782 312917 706000)) nil (25758 50791 413164 558000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4739 . 1) (undo-tree-id4740 . -1)) nil (25758 50791 413158 964000) 0 nil])
([nil nil ((#("themselves can explode" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 22 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4736 . -21) (undo-tree-id4737 . 22) (undo-tree-id4738 . -22)) nil (25758 50791 413155 546000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4733 . -1) (undo-tree-id4734 . 2) (undo-tree-id4735 . -2)) nil (25758 50807 169160 850000) 0 nil])
([nil nil ((#("(e.g., using TensorBoard)" 0 7 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 7 25 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15059) (undo-tree-id4884 . -24) (undo-tree-id4885 . -25) 15017 (t 25758 50791 441000 829000)) nil (25758 50818 616301 386000) 0 nil] [nil nil ((#("If you notice that training is unstable, you may
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 49 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4745 . -48) (undo-tree-id4746 . 49) (undo-tree-id4747 . -49) (undo-tree-id4748 . -49) (undo-tree-id4749 . -49) (undo-tree-id4750 . -49) (undo-tree-id4751 . -49) (undo-tree-id4752 . -49) (undo-tree-id4753 . -49) (undo-tree-id4754 . -49) (undo-tree-id4755 . -49) (undo-tree-id4756 . -49) (undo-tree-id4757 . -49) (undo-tree-id4758 . -49) (undo-tree-id4759 . -49) (undo-tree-id4760 . -49) (undo-tree-id4761 . -49) (undo-tree-id4762 . -49) (undo-tree-id4763 . -49) (t 25758 50791 441000 829000)) ((14968 . 15017)) (25758 50807 168756 257000) 0 nil])
([nil nil ((#("If you notice that training is unstable, you may
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 49 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4829 . -48) (undo-tree-id4830 . 49) (undo-tree-id4831 . -42) (undo-tree-id4832 . -49) (undo-tree-id4833 . -49) (undo-tree-id4834 . -49) (undo-tree-id4835 . -49) (undo-tree-id4836 . -49) (undo-tree-id4837 . -49) (undo-tree-id4838 . -49) (undo-tree-id4839 . -49) (undo-tree-id4840 . -49) (undo-tree-id4841 . -49) (undo-tree-id4842 . -49) (undo-tree-id4843 . -49) (undo-tree-id4844 . -49) (undo-tree-id4845 . -49) (undo-tree-id4846 . -49) (undo-tree-id4847 . -49) (undo-tree-id4848 . -49) (undo-tree-id4849 . -49) (undo-tree-id4850 . -49) (undo-tree-id4851 . -49) (undo-tree-id4852 . -49) (undo-tree-id4853 . -49) (undo-tree-id4854 . -49) (undo-tree-id4855 . -49) (undo-tree-id4856 . -49) (undo-tree-id4857 . -49) (undo-tree-id4858 . -49) (undo-tree-id4859 . -49) (undo-tree-id4860 . -49) (undo-tree-id4861 . -49) (undo-tree-id4862 . -49) (undo-tree-id4863 . -49) (undo-tree-id4864 . -49) (undo-tree-id4865 . -42) (undo-tree-id4866 . -42) (undo-tree-id4867 . -42) (undo-tree-id4868 . -42) (undo-tree-id4869 . -42) (undo-tree-id4870 . -42) (undo-tree-id4871 . -42) (undo-tree-id4872 . -42) (undo-tree-id4873 . -42) (undo-tree-id4874 . -42) (undo-tree-id4875 . -42) (undo-tree-id4876 . -42) (undo-tree-id4877 . -42) (undo-tree-id4878 . -42) (undo-tree-id4879 . -42) (undo-tree-id4880 . -42) (undo-tree-id4881 . -42) (undo-tree-id4882 . -42) (undo-tree-id4883 . -49) 15010) nil (25758 50818 616297 378000) 0 nil])
nil
([nil nil ((#("want to monitor the size of the gradients  and
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 42 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 47 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4788 . -46) (undo-tree-id4789 . 47) (undo-tree-id4790 . -42) (undo-tree-id4791 . -42) (undo-tree-id4792 . -42) (undo-tree-id4793 . -42) (undo-tree-id4794 . -42) (undo-tree-id4795 . -42) (undo-tree-id4796 . -42) (undo-tree-id4797 . -42) (undo-tree-id4798 . -42) (undo-tree-id4799 . -42) (undo-tree-id4800 . -42) (undo-tree-id4801 . -42) (undo-tree-id4802 . -42) (undo-tree-id4803 . -42) (undo-tree-id4804 . -42) (undo-tree-id4805 . -42) (undo-tree-id4806 . -42) (undo-tree-id4807 . -42) (undo-tree-id4808 . -42) (undo-tree-id4809 . -42) (undo-tree-id4810 . -42) (undo-tree-id4811 . -42) (undo-tree-id4812 . -42) (undo-tree-id4813 . -42) (undo-tree-id4814 . -42) (undo-tree-id4815 . -42) (undo-tree-id4816 . -42) (undo-tree-id4817 . -42) (undo-tree-id4818 . -42) (undo-tree-id4819 . -42) (undo-tree-id4820 . -42) (undo-tree-id4821 . -42) (undo-tree-id4822 . -42) (undo-tree-id4823 . -42) (undo-tree-id4824 . -42) (undo-tree-id4825 . -42) (undo-tree-id4826 . -42) (undo-tree-id4827 . -42) (undo-tree-id4828 . -47) 15010) nil (25758 50818 616212 767000) 0 nil])
([nil nil ((#("perhaps use Gradient Clipping.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 31 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 14968) (undo-tree-id4764 . -30) (undo-tree-id4765 . 31) (undo-tree-id4766 . -29) (undo-tree-id4767 . -29) (undo-tree-id4768 . -29) (undo-tree-id4769 . -29) (undo-tree-id4770 . -29) (undo-tree-id4771 . -29) (undo-tree-id4772 . -29) (undo-tree-id4773 . -29) (undo-tree-id4774 . -29) (undo-tree-id4775 . -29) (undo-tree-id4776 . -29) (undo-tree-id4777 . -29) (undo-tree-id4778 . -29) (undo-tree-id4779 . -29) (undo-tree-id4780 . -29) (undo-tree-id4781 . -29) (undo-tree-id4782 . -29) (undo-tree-id4783 . -29) (undo-tree-id4784 . -29) (undo-tree-id4785 . -29) (undo-tree-id4786 . -29) (undo-tree-id4787 . -31) 14997) nil (25758 50818 616180 596000) 0 nil])
([nil nil ((14968 . 14969) (t 25758 50818 645250 641000)) nil (25758 50850 231749 923000) 0 nil])
([nil nil ((15148 . 15150) (t 25758 50822 633287 514000)) nil (25758 50855 320617 488000) 0 nil] [nil nil ((#("In fact," 0 8 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15070) (undo-tree-id4889 . -7) (undo-tree-id4890 . -7) (undo-tree-id4891 . -7) (undo-tree-id4892 . -7) (undo-tree-id4893 . -8) (undo-tree-id4894 . -7) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -6) (undo-tree-id4904 . -6) (undo-tree-id4905 . -6) (undo-tree-id4906 . -6) (undo-tree-id4907 . -6) (undo-tree-id4908 . -6) (undo-tree-id4909 . -6) (undo-tree-id4910 . -6) (undo-tree-id4911 . -7) (undo-tree-id4912 . -7) (undo-tree-id4913 . -7) (undo-tree-id4914 . -7) (undo-tree-id4915 . -7) (undo-tree-id4916 . -7) (undo-tree-id4917 . -7) (undo-tree-id4918 . -7) (undo-tree-id4919 . -7) (undo-tree-id4920 . -8) 15077 (t 25758 50822 633287 514000)) ((15070 . 15078)) (25758 50849 658041 912000) 0 nil])
([nil nil ((#("(as we will see shortly)" 0 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15232) (undo-tree-id5018 . -23) (undo-tree-id5019 . -24) 15230 (t 25758 50855 349592 358000)) nil (25758 50884 581337 197000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15070) (undo-tree-id4886 . 1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1)) ((15070 . 15071)) (25758 50849 657785 5000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15231) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1)) nil (25758 50884 581333 860000) 0 nil])
nil
([nil nil ((#("(both on the inputs for that time step
and on the hidden state from the previous step)" 0 39 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 39 86 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15277) (undo-tree-id4975 . -85) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -86) 15278) nil (25758 50884 581323 614000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15276) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1)) nil (25758 50884 581300 971000) 0 nil])
([nil nil ((15436 . 15438) (t 25758 50884 609868 405000)) nil (25758 50899 298278 917000) 0 nil])
([nil nil ((#(", as was demonstrated by César Laurent et" 0 41 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15483) (undo-tree-id5071 . -40) (undo-tree-id5072 . -41) (undo-tree-id5073 . -41) (t 25758 50899 330008 433000)) nil (25758 50957 719526 670000) 0 nil])
([nil nil ((#("al" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5067 . -1) (undo-tree-id5068 . 2) (undo-tree-id5069 . -2) (undo-tree-id5070 . -2)) nil (25758 50957 719523 780000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5064 . -1) (undo-tree-id5065 . -2) (undo-tree-id5066 . -2)) nil (25758 50957 719520 392000) 0 nil])
([nil nil ((#("in " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5060 . -2) (undo-tree-id5061 . -1) (undo-tree-id5062 . -3) (undo-tree-id5063 . -3)) nil (25758 50957 719517 442000) 0 nil])
([nil nil ((#("a " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5058 . -1) (undo-tree-id5059 . -2)) nil (25758 50957 719514 281000) 0 nil])
([nil nil ((#("2015 " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 5 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5056 . -4) (undo-tree-id5057 . -5)) nil (25758 50957 719511 989000) 0 nil])
([nil nil ((#("paper" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 5 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5054 . -4) (undo-tree-id5055 . -5)) nil (25758 50957 719507 998000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5053 . -1)) nil (25758 50957 719506 179000) 0 nil])
([nil nil ((#("3 " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5051 . -1) (undo-tree-id5052 . -2)) nil (25758 50957 719504 234000) 0 nil])
([nil nil ((#("the " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5049 . -3) (undo-tree-id5050 . -4)) nil (25758 50957 719501 862000) 0 nil])
([nil nil ((#("authors " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 8 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15484) (undo-tree-id5047 . -7) (undo-tree-id5048 . -8)) nil (25758 50957 719499 536000) 0 nil])
([nil nil ((15484 . 15489)) nil (25758 50957 719497 286000) 0 nil])
([nil nil ((15489 . 15490)) nil (25758 50957 719496 635000) 0 nil])
([nil nil ((15594 . 15596)) nil (25758 50957 719496 3000) 0 nil])
([nil nil ((#("In other words,
" 0 16 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15596) (undo-tree-id5036 . -15) (undo-tree-id5037 . 16) (undo-tree-id5038 . -16) (undo-tree-id5039 . -16) (undo-tree-id5040 . -16) (undo-tree-id5041 . -16) (undo-tree-id5042 . -16) (undo-tree-id5043 . -16) (undo-tree-id5044 . -16) (undo-tree-id5045 . -16) (undo-tree-id5046 . -16)) nil (25758 50957 719494 795000) 0 nil])
([nil nil ((#("it was slightly better than nothing when applied between recurrent layers
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15596) (undo-tree-id5033 . -73) (undo-tree-id5034 . 74) (undo-tree-id5035 . -74)) nil (25758 50957 719487 687000) 0 nil])
([nil nil ((#("(i.e., vertically in Figure 15-7), but not within recurrent layers (i.e.,
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15596) (undo-tree-id5026 . -73) (undo-tree-id5027 . 74) (undo-tree-id5028 . 74) (undo-tree-id5029 . -1) (undo-tree-id5030 . 42) (undo-tree-id5031 . -33) (undo-tree-id5032 . -74)) nil (25758 50957 719483 514000) 0 nil])
([nil nil ((#("horizontally)." 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 14 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15596) (undo-tree-id5023 . -13) (undo-tree-id5024 . 14) (undo-tree-id5025 . -14)) nil (25758 50957 719477 795000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15596) (undo-tree-id5020 . 1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1)) nil (25758 50957 719471 968000) 0 nil])
([nil nil ((15729 . 15730) (t 25758 50957 746571 266000) 15712) nil (25758 50962 379828 387000) 0 nil])
([nil nil ((15709 . 15710) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15709) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (15638 . 15639) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15638) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (15593 . 15594) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15593) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (#(" " 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15593) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15594) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (15532 . 15533) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15532) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (15483 . 15484) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15483) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (15450 . 15451) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15450) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) 15438 (t 25758 50962 414616 708000)) nil (25758 50980 550678 836000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15676) (nil fontified nil 15675 . 15676) (nil wrap-prefix #("  " 0 2 (face org-indent)) 15675 . 15676) (15675 . 15676) (#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15597) (nil fontified nil 15596 . 15597) (nil wrap-prefix #("  " 0 2 (face org-indent)) 15596 . 15597) (15596 . 15597) (#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15517) (nil fontified nil 15516 . 15517) (nil wrap-prefix #("  " 0 2 (face org-indent)) 15516 . 15517) (15516 . 15517) 15709) nil (25758 50980 550525 948000) 0 nil])
([nil nil ((#("Layer
Normalization" 0 6 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 6 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15789) (undo-tree-id5331 . -18) (undo-tree-id5332 . -18) (undo-tree-id5333 . -18) (undo-tree-id5334 . -18) (undo-tree-id5335 . -6) (undo-tree-id5336 . -6) (undo-tree-id5337 . -6) (undo-tree-id5338 . -6) (undo-tree-id5339 . -6) (undo-tree-id5340 . -6) (undo-tree-id5341 . -6) (undo-tree-id5342 . -6) (undo-tree-id5343 . -6) (undo-tree-id5344 . -6) (undo-tree-id5345 . -6) (undo-tree-id5346 . -6) (undo-tree-id5347 . -6) (undo-tree-id5348 . -6) (undo-tree-id5349 . -6) (undo-tree-id5350 . -6) (undo-tree-id5351 . -19) (undo-tree-id5352 . -18) (undo-tree-id5353 . -4) (undo-tree-id5354 . -4) (undo-tree-id5355 . -4) (undo-tree-id5356 . -4) (undo-tree-id5357 . -4) (undo-tree-id5358 . -4) (undo-tree-id5359 . -4) (undo-tree-id5360 . -4) (undo-tree-id5361 . -18) (undo-tree-id5362 . -18) (undo-tree-id5363 . -18) (undo-tree-id5364 . -18) (undo-tree-id5365 . -18) (undo-tree-id5366 . -18) (undo-tree-id5367 . -18) (undo-tree-id5368 . -18) (undo-tree-id5369 . -18) (undo-tree-id5370 . -19) 15807 (t 25758 50980 630794 667000)) nil (25758 51056 942079 166000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15747 . 15748) (nil fontified nil 15735 . 15748) (nil fontified nil 15729 . 15735) (15729 . 15748) (#("Another form of normalization" 0 29 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15729) (undo-tree-id5207 . -28) (undo-tree-id5208 . -29) (undo-tree-id5209 . -28) (undo-tree-id5210 . -22) (undo-tree-id5211 . -22) (undo-tree-id5212 . -22) (undo-tree-id5213 . -22) (undo-tree-id5214 . -22) (undo-tree-id5215 . -22) (undo-tree-id5216 . -22) (undo-tree-id5217 . -22) (undo-tree-id5218 . -22) (undo-tree-id5219 . -22) (undo-tree-id5220 . -22) (undo-tree-id5221 . -22) (undo-tree-id5222 . -22) (undo-tree-id5223 . -22) (undo-tree-id5224 . -22) (undo-tree-id5225 . -22) (undo-tree-id5226 . -22) (undo-tree-id5227 . -22) (undo-tree-id5228 . -22) (undo-tree-id5229 . -22) (undo-tree-id5230 . -28) (undo-tree-id5231 . -6) (undo-tree-id5232 . -6) (undo-tree-id5233 . -6) (undo-tree-id5234 . -6) (undo-tree-id5235 . -6) (undo-tree-id5236 . -6) (undo-tree-id5237 . -6) (undo-tree-id5238 . -6) (undo-tree-id5239 . -29) (undo-tree-id5240 . -28) (undo-tree-id5241 . -6) (undo-tree-id5242 . -6) (undo-tree-id5243 . -6) (undo-tree-id5244 . -6) (undo-tree-id5245 . -6) (undo-tree-id5246 . -6) (undo-tree-id5247 . -6) (undo-tree-id5248 . -6) (undo-tree-id5249 . -6) (undo-tree-id5250 . -6) (undo-tree-id5251 . -6) (undo-tree-id5252 . -6) (undo-tree-id5253 . -6) (undo-tree-id5254 . -6) (undo-tree-id5255 . -6) (undo-tree-id5256 . -6) (undo-tree-id5257 . -6) (undo-tree-id5258 . -6) (undo-tree-id5259 . -6) (undo-tree-id5260 . -6) (undo-tree-id5261 . -6) (undo-tree-id5262 . -6) (undo-tree-id5263 . -11) (undo-tree-id5264 . -11) (undo-tree-id5265 . -11) (undo-tree-id5266 . -11) (undo-tree-id5267 . -11) (undo-tree-id5268 . -11) (undo-tree-id5269 . -11) (undo-tree-id5270 . -11) (undo-tree-id5271 . -11) (undo-tree-id5272 . -11) (undo-tree-id5273 . -11) (undo-tree-id5274 . -11) (undo-tree-id5275 . -11) (undo-tree-id5276 . -11) (undo-tree-id5277 . -11) (undo-tree-id5278 . -11) (undo-tree-id5279 . -11) (undo-tree-id5280 . -11) (undo-tree-id5281 . -11) (undo-tree-id5282 . -11) (undo-tree-id5283 . -11) (undo-tree-id5284 . -11) (undo-tree-id5285 . -14) (undo-tree-id5286 . -14) (undo-tree-id5287 . -14) (undo-tree-id5288 . -14) (undo-tree-id5289 . -14) (undo-tree-id5290 . -14) (undo-tree-id5291 . -14) (undo-tree-id5292 . -14) (undo-tree-id5293 . -14) (undo-tree-id5294 . -14) (undo-tree-id5295 . -14) (undo-tree-id5296 . -14) (undo-tree-id5297 . -14) (undo-tree-id5298 . -14) (undo-tree-id5299 . -14) (undo-tree-id5300 . -14) (undo-tree-id5301 . -14) (undo-tree-id5302 . -14) (undo-tree-id5303 . -14) (undo-tree-id5304 . -14) (undo-tree-id5305 . -14) (undo-tree-id5306 . -14) (undo-tree-id5307 . -28) (undo-tree-id5308 . -28) (undo-tree-id5309 . -28) (undo-tree-id5310 . -28) (undo-tree-id5311 . -28) (undo-tree-id5312 . -28) (undo-tree-id5313 . -28) (undo-tree-id5314 . -28) (undo-tree-id5315 . -28) (undo-tree-id5316 . -28) (undo-tree-id5317 . -28) (undo-tree-id5318 . -28) (undo-tree-id5319 . -28) (undo-tree-id5320 . -28) (undo-tree-id5321 . -28) (undo-tree-id5322 . -28) (undo-tree-id5323 . -28) (undo-tree-id5324 . -28) (undo-tree-id5325 . -28) (undo-tree-id5326 . -28) (undo-tree-id5327 . -28) (undo-tree-id5328 . -29) (undo-tree-id5329 . -29) (undo-tree-id5330 . -29) 15758) nil (25758 51056 942002 649000) 0 nil])
([nil nil ((15734 . 15735) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15734) (undo-tree-id5206 . -1) 15733) nil (25758 51056 941427 864000) 0 nil])
([nil nil ((#(". This idea was introduced by Jimmy Lei Ba et al. in a 2016" 0 59 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15779) (undo-tree-id5181 . -58) (undo-tree-id5182 . -2) (undo-tree-id5183 . -2) (undo-tree-id5184 . -2) (undo-tree-id5185 . -2) (undo-tree-id5186 . -2) (undo-tree-id5187 . -2) (undo-tree-id5188 . -2) (undo-tree-id5189 . -2) (undo-tree-id5190 . -2) (undo-tree-id5191 . -2) (undo-tree-id5192 . -2) (undo-tree-id5193 . -2) (undo-tree-id5194 . -2) (undo-tree-id5195 . -2) (undo-tree-id5196 . -2) (undo-tree-id5197 . -2) (undo-tree-id5198 . -2) (undo-tree-id5199 . -2) (undo-tree-id5200 . -2) (undo-tree-id5201 . -2) (undo-tree-id5202 . -2) (undo-tree-id5203 . -2) (undo-tree-id5204 . -59) (undo-tree-id5205 . -59)) nil (25758 51056 941424 869000) 0 nil])
([nil nil ((#("paper:4" 0 7 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15780) (undo-tree-id5150 . -6) (undo-tree-id5151 . -6) (undo-tree-id5152 . -6) (undo-tree-id5153 . -7) (undo-tree-id5154 . -6) (undo-tree-id5155 . -4) (undo-tree-id5156 . -4) (undo-tree-id5157 . -4) (undo-tree-id5158 . -4) (undo-tree-id5159 . -4) (undo-tree-id5160 . -4) (undo-tree-id5161 . -4) (undo-tree-id5162 . -4) (undo-tree-id5163 . -5) (undo-tree-id5164 . -5) (undo-tree-id5165 . -5) (undo-tree-id5166 . -5) (undo-tree-id5167 . -5) (undo-tree-id5168 . -5) (undo-tree-id5169 . -5) (undo-tree-id5170 . -5) (undo-tree-id5171 . -6) (undo-tree-id5172 . -6) (undo-tree-id5173 . -6) (undo-tree-id5174 . -6) (undo-tree-id5175 . -6) (undo-tree-id5176 . -6) (undo-tree-id5177 . -6) (undo-tree-id5178 . -6) (undo-tree-id5179 . -6) (undo-tree-id5180 . -7) 15786) nil (25758 51056 941405 366000) 0 nil])
([nil nil ((15924 . 15926) (t 25758 51056 971550 646000)) nil (25758 51076 568390 929000) 0 nil])
([nil nil ((15778 . 15779) (#("  " 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15778) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . 1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15779) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) 15729) nil (25758 51076 568382 579000) 0 nil])
([nil nil ((15836 . 15837) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15836) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) 15778) nil (25758 51076 568139 193000) 0 nil])
([nil nil ((15910 . 15911) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15910) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) 15836) nil (25758 51076 568123 447000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15880) (nil wrap-prefix #("  " 0 2 (face org-indent)) 15879 . 15880) (15879 . 15880) (#(" " 0 1 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -15807) (nil wrap-prefix #("  " 0 2 (face org-indent)) 15806 . 15807) (15806 . 15807) (#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 15921) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) 15837) nil (25758 51076 568102 513000) 0 nil])
([nil nil ((16048 . 16050) (t 25758 51076 599747 487000)) nil (25758 51096 816176 893000) 0 nil])
([nil nil ((16065 . 16066) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16065) (undo-tree-id5640 . -1) 16050 (t 25758 51096 847951 524000)) nil (25758 51112 454557 196000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16127) (nil fontified nil 16126 . 16127) (nil wrap-prefix #("  " 0 2 (face org-indent)) 16126 . 16127) (16126 . 16127) 16065) nil (25758 51112 454555 124000) 0 nil])
([nil nil ((#("(as
opposed to
BN)" 0 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 5 15 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 15 18 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16123) (undo-tree-id5618 . -17) (undo-tree-id5619 . -14) (undo-tree-id5620 . 3) (undo-tree-id5621 . 4) (undo-tree-id5622 . -4) (undo-tree-id5623 . -4) (undo-tree-id5624 . -4) (undo-tree-id5625 . -4) (undo-tree-id5626 . -4) (undo-tree-id5627 . -4) (undo-tree-id5628 . -4) (undo-tree-id5629 . -4) (undo-tree-id5630 . -4) (undo-tree-id5631 . -4) (undo-tree-id5632 . -4) (undo-tree-id5633 . -4) (undo-tree-id5634 . -4) (undo-tree-id5635 . -4) (undo-tree-id5636 . -4) (undo-tree-id5637 . -4) (undo-tree-id5638 . -4) (undo-tree-id5639 . -18) 16050) nil (25758 51112 454552 564000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16122) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1)) nil (25758 51112 454533 931000) 0 nil])
([nil nil ((16257 . 16259) (t 25758 51112 532110 233000)) nil (25758 51123 500652 351000) 0 nil])
([nil nil ((16423 . 16424) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16423) (undo-tree-id5642 . -1) (16348 . 16349) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16348) (undo-tree-id5643 . -1) (16273 . 16274) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16273) (undo-tree-id5644 . -1) 16259 (t 25758 51123 532221 874000)) nil (25758 51138 621947 9000) 0 nil])
([nil nil ((16446 . 16447) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16446) (undo-tree-id5641 . -1) 16423) nil (25758 51138 621940 806000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16485) (nil fontified nil 16484 . 16485) (nil wrap-prefix #("  " 0 2 (face org-indent)) 16484 . 16485) (16484 . 16485) (#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16417) (nil fontified nil 16416 . 16417) (nil wrap-prefix #("  " 0 2 (face org-indent)) 16416 . 16417) (16416 . 16417) (#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16336) (nil fontified nil 16335 . 16336) (nil wrap-prefix #("  " 0 2 (face org-indent)) 16335 . 16336) (16335 . 16336) 16446) nil (25758 51138 621926 428000) 0 nil])
([nil nil ((16450 . 16451) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16450) (undo-tree-id5645 . -1) (t 25758 51138 700376 258000)) nil (25758 51157 399570 324000) 0 nil])
([nil nil ((16447 . 16449) (t 25758 51157 428567 563000)) nil (25758 51191 612409 796000) 0 nil])
([nil nil ((16486 . 16487) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -16486) (undo-tree-id5690 . -1) 16449) nil (25758 51201 329095 792000) 0 nil] [nil nil ((#("Let's use tf.keras to implement Layer
" 0 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 4 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 4 25 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 25 37 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 37 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16449) (undo-tree-id5655 . -37) (undo-tree-id5656 . 38) (undo-tree-id5657 . -3) (undo-tree-id5658 . -3) (undo-tree-id5659 . -3) (undo-tree-id5660 . -3) (undo-tree-id5661 . -3) (undo-tree-id5662 . -3) (undo-tree-id5663 . -3) (undo-tree-id5664 . -3) (undo-tree-id5665 . -3) (undo-tree-id5666 . -3) (undo-tree-id5667 . -3) (undo-tree-id5668 . -3) (undo-tree-id5669 . -3) (undo-tree-id5670 . -3) (undo-tree-id5671 . -3) (undo-tree-id5672 . -3) (undo-tree-id5673 . -3) (undo-tree-id5674 . -3) (undo-tree-id5675 . -4) (undo-tree-id5676 . -8) (undo-tree-id5677 . 28) (undo-tree-id5678 . -12) (undo-tree-id5679 . -11) (undo-tree-id5680 . -11) (undo-tree-id5681 . -11) (undo-tree-id5682 . -11) (undo-tree-id5683 . -11) (undo-tree-id5684 . -11) (undo-tree-id5685 . -11) (undo-tree-id5686 . -11) (undo-tree-id5687 . -10) (undo-tree-id5688 . -6) (undo-tree-id5689 . -38)) ((16449 . 16487)) (25758 51190 877055 968000) 0 nil])
([nil nil ((16530 . 16532)) nil (25758 51201 329082 683000) 0 nil])
([nil nil ((#("Normalization within a simple
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 30 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16449) (undo-tree-id5652 . -29) (undo-tree-id5653 . 30) (undo-tree-id5654 . -30)) ((16449 . 16479)) (25758 51190 293972 845000) 0 nil])
([nil nil ((#("It is just
like a regular layer, except its call() method takes two arguments: the
inputs at the current time step and the hidden states from the previous
time step. Note that the states argument is a list containing one or more
tensors. In the case of a simple RNN cell it contains a single tensor equal
to the outputs of the previous time step, but other cells may have multiple
state tensors (e.g., an LSTMCell has a long-term state and a short-term
state, as we will see shortly)" 0 11 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 11 83 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 155 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 155 229 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 229 305 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 305 381 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 381 437 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 437 453 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 453 483 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16582) (undo-tree-id6668 . -482) (undo-tree-id6669 . -482) (undo-tree-id6670 . -482) (undo-tree-id6671 . -483) (undo-tree-id6672 . -482) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -4) (undo-tree-id6682 . -4) (undo-tree-id6683 . -4) (undo-tree-id6684 . -4) (undo-tree-id6685 . -4) (undo-tree-id6686 . -4) (undo-tree-id6687 . -4) (undo-tree-id6688 . -4) (undo-tree-id6689 . -9) (undo-tree-id6690 . -9) (undo-tree-id6691 . -9) (undo-tree-id6692 . -9) (undo-tree-id6693 . -9) (undo-tree-id6694 . -9) (undo-tree-id6695 . -9) (undo-tree-id6696 . -9) (undo-tree-id6697 . -14) (undo-tree-id6698 . -14) (undo-tree-id6699 . -14) (undo-tree-id6700 . -14) (undo-tree-id6701 . -14) (undo-tree-id6702 . -14) (undo-tree-id6703 . -14) (undo-tree-id6704 . -14) (undo-tree-id6705 . -16) (undo-tree-id6706 . -16) (undo-tree-id6707 . -16) (undo-tree-id6708 . -16) (undo-tree-id6709 . -16) (undo-tree-id6710 . -16) (undo-tree-id6711 . -16) (undo-tree-id6712 . -16) (undo-tree-id6713 . -24) (undo-tree-id6714 . -24) (undo-tree-id6715 . -24) (undo-tree-id6716 . -24) (undo-tree-id6717 . -24) (undo-tree-id6718 . -24) (undo-tree-id6719 . -24) (undo-tree-id6720 . -24) (undo-tree-id6721 . -30) (undo-tree-id6722 . -30) (undo-tree-id6723 . -30) (undo-tree-id6724 . -30) (undo-tree-id6725 . -30) (undo-tree-id6726 . -30) (undo-tree-id6727 . -30) (undo-tree-id6728 . -30) (undo-tree-id6729 . -31) (undo-tree-id6730 . -31) (undo-tree-id6731 . -31) (undo-tree-id6732 . -31) (undo-tree-id6733 . -31) (undo-tree-id6734 . -31) (undo-tree-id6735 . -31) (undo-tree-id6736 . -31) (undo-tree-id6737 . -38) (undo-tree-id6738 . -38) (undo-tree-id6739 . -38) (undo-tree-id6740 . -38) (undo-tree-id6741 . -38) (undo-tree-id6742 . -38) (undo-tree-id6743 . -38) (undo-tree-id6744 . -38) (undo-tree-id6745 . -42) (undo-tree-id6746 . -42) (undo-tree-id6747 . -42) (undo-tree-id6748 . -42) (undo-tree-id6749 . -42) (undo-tree-id6750 . -42) (undo-tree-id6751 . -42) (undo-tree-id6752 . -42) (undo-tree-id6753 . -47) (undo-tree-id6754 . -47) (undo-tree-id6755 . -47) (undo-tree-id6756 . -47) (undo-tree-id6757 . -47) (undo-tree-id6758 . -47) (undo-tree-id6759 . -47) (undo-tree-id6760 . -47) (undo-tree-id6761 . -49) (undo-tree-id6762 . -49) (undo-tree-id6763 . -49) (undo-tree-id6764 . -49) (undo-tree-id6765 . -49) (undo-tree-id6766 . -49) (undo-tree-id6767 . -49) (undo-tree-id6768 . -49) (undo-tree-id6769 . -56) (undo-tree-id6770 . -56) (undo-tree-id6771 . -56) (undo-tree-id6772 . -56) (undo-tree-id6773 . -56) (undo-tree-id6774 . -56) (undo-tree-id6775 . -56) (undo-tree-id6776 . -56) (undo-tree-id6777 . -62) (undo-tree-id6778 . -62) (undo-tree-id6779 . -62) (undo-tree-id6780 . -62) (undo-tree-id6781 . -62) (undo-tree-id6782 . -62) (undo-tree-id6783 . -62) (undo-tree-id6784 . -62) (undo-tree-id6785 . -66) (undo-tree-id6786 . -66) (undo-tree-id6787 . -66) (undo-tree-id6788 . -66) (undo-tree-id6789 . -66) (undo-tree-id6790 . -66) (undo-tree-id6791 . -66) (undo-tree-id6792 . -66) (undo-tree-id6793 . -76) (undo-tree-id6794 . -76) (undo-tree-id6795 . -76) (undo-tree-id6796 . -76) (undo-tree-id6797 . -76) (undo-tree-id6798 . -76) (undo-tree-id6799 . -76) (undo-tree-id6800 . -76) (undo-tree-id6801 . -77) (undo-tree-id6802 . -77) (undo-tree-id6803 . -77) (undo-tree-id6804 . -77) (undo-tree-id6805 . -77) (undo-tree-id6806 . -77) (undo-tree-id6807 . -77) (undo-tree-id6808 . -77) (undo-tree-id6809 . -81) (undo-tree-id6810 . -81) (undo-tree-id6811 . -81) (undo-tree-id6812 . -81) (undo-tree-id6813 . -81) (undo-tree-id6814 . -81) (undo-tree-id6815 . -81) (undo-tree-id6816 . -81) (undo-tree-id6817 . -88) (undo-tree-id6818 . -88) (undo-tree-id6819 . -88) (undo-tree-id6820 . -88) (undo-tree-id6821 . -88) (undo-tree-id6822 . -88) (undo-tree-id6823 . -88) (undo-tree-id6824 . -88) (undo-tree-id6825 . -91) (undo-tree-id6826 . -91) (undo-tree-id6827 . -91) (undo-tree-id6828 . -91) (undo-tree-id6829 . -91) (undo-tree-id6830 . -91) (undo-tree-id6831 . -91) (undo-tree-id6832 . -91) (undo-tree-id6833 . -95) (undo-tree-id6834 . -95) (undo-tree-id6835 . -95) (undo-tree-id6836 . -95) (undo-tree-id6837 . -95) (undo-tree-id6838 . -95) (undo-tree-id6839 . -95) (undo-tree-id6840 . -95) (undo-tree-id6841 . -103) (undo-tree-id6842 . -103) (undo-tree-id6843 . -103) (undo-tree-id6844 . -103) (undo-tree-id6845 . -103) (undo-tree-id6846 . -103) (undo-tree-id6847 . -103) (undo-tree-id6848 . -103) (undo-tree-id6849 . -108) (undo-tree-id6850 . -108) (undo-tree-id6851 . -108) (undo-tree-id6852 . -108) (undo-tree-id6853 . -108) (undo-tree-id6854 . -108) (undo-tree-id6855 . -108) (undo-tree-id6856 . -108) (undo-tree-id6857 . -113) (undo-tree-id6858 . -113) (undo-tree-id6859 . -113) (undo-tree-id6860 . -113) (undo-tree-id6861 . -113) (undo-tree-id6862 . -113) (undo-tree-id6863 . -113) (undo-tree-id6864 . -113) (undo-tree-id6865 . -117) (undo-tree-id6866 . -117) (undo-tree-id6867 . -117) (undo-tree-id6868 . -117) (undo-tree-id6869 . -117) (undo-tree-id6870 . -117) (undo-tree-id6871 . -117) (undo-tree-id6872 . -117) (undo-tree-id6873 . -121) (undo-tree-id6874 . -121) (undo-tree-id6875 . -121) (undo-tree-id6876 . -121) (undo-tree-id6877 . -121) (undo-tree-id6878 . -121) (undo-tree-id6879 . -121) (undo-tree-id6880 . -121) (undo-tree-id6881 . -128) (undo-tree-id6882 . -128) (undo-tree-id6883 . -128) (undo-tree-id6884 . -128) (undo-tree-id6885 . -128) (undo-tree-id6886 . -128) (undo-tree-id6887 . -128) (undo-tree-id6888 . -128) (undo-tree-id6889 . -135) (undo-tree-id6890 . -135) (undo-tree-id6891 . -135) (undo-tree-id6892 . -135) (undo-tree-id6893 . -135) (undo-tree-id6894 . -135) (undo-tree-id6895 . -135) (undo-tree-id6896 . -135) (undo-tree-id6897 . -140) (undo-tree-id6898 . -140) (undo-tree-id6899 . -140) (undo-tree-id6900 . -140) (undo-tree-id6901 . -140) (undo-tree-id6902 . -140) (undo-tree-id6903 . -140) (undo-tree-id6904 . -140) (undo-tree-id6905 . -144) (undo-tree-id6906 . -144) (undo-tree-id6907 . -144) (undo-tree-id6908 . -144) (undo-tree-id6909 . -144) (undo-tree-id6910 . -144) (undo-tree-id6911 . -144) (undo-tree-id6912 . -144) (undo-tree-id6913 . -153) (undo-tree-id6914 . -153) (undo-tree-id6915 . -153) (undo-tree-id6916 . -153) (undo-tree-id6917 . -153) (undo-tree-id6918 . -153) (undo-tree-id6919 . -153) (undo-tree-id6920 . -153) (undo-tree-id6921 . -158) (undo-tree-id6922 . -158) (undo-tree-id6923 . -158) (undo-tree-id6924 . -158) (undo-tree-id6925 . -158) (undo-tree-id6926 . -158) (undo-tree-id6927 . -158) (undo-tree-id6928 . -158) (undo-tree-id6929 . -163) (undo-tree-id6930 . -163) (undo-tree-id6931 . -163) (undo-tree-id6932 . -163) (undo-tree-id6933 . -163) (undo-tree-id6934 . -163) (undo-tree-id6935 . -163) (undo-tree-id6936 . -163) (undo-tree-id6937 . -164) (undo-tree-id6938 . -164) (undo-tree-id6939 . -164) (undo-tree-id6940 . -164) (undo-tree-id6941 . -164) (undo-tree-id6942 . -164) (undo-tree-id6943 . -164) (undo-tree-id6944 . -164) (undo-tree-id6945 . -169) (undo-tree-id6946 . -169) (undo-tree-id6947 . -169) (undo-tree-id6948 . -169) (undo-tree-id6949 . -169) (undo-tree-id6950 . -169) (undo-tree-id6951 . -169) (undo-tree-id6952 . -169) (undo-tree-id6953 . -174) (undo-tree-id6954 . -174) (undo-tree-id6955 . -174) (undo-tree-id6956 . -174) (undo-tree-id6957 . -174) (undo-tree-id6958 . -174) (undo-tree-id6959 . -174) (undo-tree-id6960 . -174) (undo-tree-id6961 . -178) (undo-tree-id6962 . -178) (undo-tree-id6963 . -178) (undo-tree-id6964 . -178) (undo-tree-id6965 . -178) (undo-tree-id6966 . -178) (undo-tree-id6967 . -178) (undo-tree-id6968 . -178) (undo-tree-id6969 . -185) (undo-tree-id6970 . -185) (undo-tree-id6971 . -185) (undo-tree-id6972 . -185) (undo-tree-id6973 . -185) (undo-tree-id6974 . -185) (undo-tree-id6975 . -185) (undo-tree-id6976 . -185) (undo-tree-id6977 . -194) (undo-tree-id6978 . -194) (undo-tree-id6979 . -194) (undo-tree-id6980 . -194) (undo-tree-id6981 . -194) (undo-tree-id6982 . -194) (undo-tree-id6983 . -194) (undo-tree-id6984 . -194) (undo-tree-id6985 . -197) (undo-tree-id6986 . -197) (undo-tree-id6987 . -197) (undo-tree-id6988 . -197) (undo-tree-id6989 . -197) (undo-tree-id6990 . -197) (undo-tree-id6991 . -197) (undo-tree-id6992 . -197) (undo-tree-id6993 . -199) (undo-tree-id6994 . -199) (undo-tree-id6995 . -199) (undo-tree-id6996 . -199) (undo-tree-id6997 . -199) (undo-tree-id6998 . -199) (undo-tree-id6999 . -199) (undo-tree-id7000 . -199) (undo-tree-id7001 . -204) (undo-tree-id7002 . -204) (undo-tree-id7003 . -204) (undo-tree-id7004 . -204) (undo-tree-id7005 . -204) (undo-tree-id7006 . -204) (undo-tree-id7007 . -204) (undo-tree-id7008 . -204) (undo-tree-id7009 . -215) (undo-tree-id7010 . -215) (undo-tree-id7011 . -215) (undo-tree-id7012 . -215) (undo-tree-id7013 . -215) (undo-tree-id7014 . -215) (undo-tree-id7015 . -215) (undo-tree-id7016 . -215) (undo-tree-id7017 . -219) (undo-tree-id7018 . -219) (undo-tree-id7019 . -219) (undo-tree-id7020 . -219) (undo-tree-id7021 . -219) (undo-tree-id7022 . -219) (undo-tree-id7023 . -219) (undo-tree-id7024 . -219) (undo-tree-id7025 . -222) (undo-tree-id7026 . -222) (undo-tree-id7027 . -222) (undo-tree-id7028 . -222) (undo-tree-id7029 . -222) (undo-tree-id7030 . -222) (undo-tree-id7031 . -222) (undo-tree-id7032 . -222) (undo-tree-id7033 . -227) (undo-tree-id7034 . -227) (undo-tree-id7035 . -227) (undo-tree-id7036 . -227) (undo-tree-id7037 . -227) (undo-tree-id7038 . -227) (undo-tree-id7039 . -227) (undo-tree-id7040 . -227) (undo-tree-id7041 . -235) (undo-tree-id7042 . -235) (undo-tree-id7043 . -235) (undo-tree-id7044 . -235) (undo-tree-id7045 . -235) (undo-tree-id7046 . -235) (undo-tree-id7047 . -235) (undo-tree-id7048 . -235) (undo-tree-id7049 . -236) (undo-tree-id7050 . -236) (undo-tree-id7051 . -236) (undo-tree-id7052 . -236) (undo-tree-id7053 . -236) (undo-tree-id7054 . -236) (undo-tree-id7055 . -236) (undo-tree-id7056 . -236) (undo-tree-id7057 . -239) (undo-tree-id7058 . -239) (undo-tree-id7059 . -239) (undo-tree-id7060 . -239) (undo-tree-id7061 . -239) (undo-tree-id7062 . -239) (undo-tree-id7063 . -239) (undo-tree-id7064 . -239) (undo-tree-id7065 . -243) (undo-tree-id7066 . -243) (undo-tree-id7067 . -243) (undo-tree-id7068 . -243) (undo-tree-id7069 . -243) (undo-tree-id7070 . -243) (undo-tree-id7071 . -243) (undo-tree-id7072 . -243) (undo-tree-id7073 . -248) (undo-tree-id7074 . -248) (undo-tree-id7075 . -248) (undo-tree-id7076 . -248) (undo-tree-id7077 . -248) (undo-tree-id7078 . -248) (undo-tree-id7079 . -248) (undo-tree-id7080 . -248) (undo-tree-id7081 . -251) (undo-tree-id7082 . -251) (undo-tree-id7083 . -251) (undo-tree-id7084 . -251) (undo-tree-id7085 . -251) (undo-tree-id7086 . -251) (undo-tree-id7087 . -251) (undo-tree-id7088 . -251) (undo-tree-id7089 . -253) (undo-tree-id7090 . -253) (undo-tree-id7091 . -253) (undo-tree-id7092 . -253) (undo-tree-id7093 . -253) (undo-tree-id7094 . -253) (undo-tree-id7095 . -253) (undo-tree-id7096 . -253) (undo-tree-id7097 . -260) (undo-tree-id7098 . -260) (undo-tree-id7099 . -260) (undo-tree-id7100 . -260) (undo-tree-id7101 . -260) (undo-tree-id7102 . -260) (undo-tree-id7103 . -260) (undo-tree-id7104 . -260) (undo-tree-id7105 . 221) (undo-tree-id7106 . -265) (undo-tree-id7107 . -264) (undo-tree-id7108 . -264) (undo-tree-id7109 . -264) (undo-tree-id7110 . -264) (undo-tree-id7111 . -264) (undo-tree-id7112 . -264) (undo-tree-id7113 . -264) (undo-tree-id7114 . -264) (undo-tree-id7115 . -269) (undo-tree-id7116 . -269) (undo-tree-id7117 . -269) (undo-tree-id7118 . -269) (undo-tree-id7119 . -269) (undo-tree-id7120 . -269) (undo-tree-id7121 . -269) (undo-tree-id7122 . -269) (undo-tree-id7123 . -272) (undo-tree-id7124 . -272) (undo-tree-id7125 . -272) (undo-tree-id7126 . -272) (undo-tree-id7127 . -272) (undo-tree-id7128 . -272) (undo-tree-id7129 . -272) (undo-tree-id7130 . -272) (undo-tree-id7131 . -281) (undo-tree-id7132 . -281) (undo-tree-id7133 . -281) (undo-tree-id7134 . -281) (undo-tree-id7135 . -281) (undo-tree-id7136 . -281) (undo-tree-id7137 . -281) (undo-tree-id7138 . -281) (undo-tree-id7139 . -283) (undo-tree-id7140 . -283) (undo-tree-id7141 . -283) (undo-tree-id7142 . -283) (undo-tree-id7143 . -283) (undo-tree-id7144 . -283) (undo-tree-id7145 . -283) (undo-tree-id7146 . -283) (undo-tree-id7147 . -290) (undo-tree-id7148 . -290) (undo-tree-id7149 . -290) (undo-tree-id7150 . -290) (undo-tree-id7151 . -290) (undo-tree-id7152 . -290) (undo-tree-id7153 . -290) (undo-tree-id7154 . -290) (undo-tree-id7155 . -297) (undo-tree-id7156 . -297) (undo-tree-id7157 . -297) (undo-tree-id7158 . -297) (undo-tree-id7159 . -297) (undo-tree-id7160 . -297) (undo-tree-id7161 . -297) (undo-tree-id7162 . -297) (undo-tree-id7163 . -303) (undo-tree-id7164 . -303) (undo-tree-id7165 . -303) (undo-tree-id7166 . -303) (undo-tree-id7167 . -303) (undo-tree-id7168 . -303) (undo-tree-id7169 . -303) (undo-tree-id7170 . -303) (undo-tree-id7171 . -306) (undo-tree-id7172 . -306) (undo-tree-id7173 . -306) (undo-tree-id7174 . -306) (undo-tree-id7175 . -306) (undo-tree-id7176 . -306) (undo-tree-id7177 . -306) (undo-tree-id7178 . -306) (undo-tree-id7179 . -310) (undo-tree-id7180 . -310) (undo-tree-id7181 . -310) (undo-tree-id7182 . -310) (undo-tree-id7183 . -310) (undo-tree-id7184 . -310) (undo-tree-id7185 . -310) (undo-tree-id7186 . -310) (undo-tree-id7187 . -318) (undo-tree-id7188 . -318) (undo-tree-id7189 . -318) (undo-tree-id7190 . -318) (undo-tree-id7191 . -318) (undo-tree-id7192 . -318) (undo-tree-id7193 . -318) (undo-tree-id7194 . -318) (undo-tree-id7195 . -321) (undo-tree-id7196 . -321) (undo-tree-id7197 . -321) (undo-tree-id7198 . -321) (undo-tree-id7199 . -321) (undo-tree-id7200 . -321) (undo-tree-id7201 . -321) (undo-tree-id7202 . -321) (undo-tree-id7203 . -325) (undo-tree-id7204 . -325) (undo-tree-id7205 . -325) (undo-tree-id7206 . -325) (undo-tree-id7207 . -325) (undo-tree-id7208 . -325) (undo-tree-id7209 . -325) (undo-tree-id7210 . -325) (undo-tree-id7211 . -334) (undo-tree-id7212 . -334) (undo-tree-id7213 . -334) (undo-tree-id7214 . -334) (undo-tree-id7215 . -334) (undo-tree-id7216 . -334) (undo-tree-id7217 . -334) (undo-tree-id7218 . -334) (undo-tree-id7219 . -339) (undo-tree-id7220 . -339) (undo-tree-id7221 . -339) (undo-tree-id7222 . -339) (undo-tree-id7223 . -339) (undo-tree-id7224 . -339) (undo-tree-id7225 . -339) (undo-tree-id7226 . -339) (undo-tree-id7227 . -344) (undo-tree-id7228 . -344) (undo-tree-id7229 . -344) (undo-tree-id7230 . -344) (undo-tree-id7231 . -344) (undo-tree-id7232 . -344) (undo-tree-id7233 . -344) (undo-tree-id7234 . -344) (undo-tree-id7235 . -345) (undo-tree-id7236 . -345) (undo-tree-id7237 . -345) (undo-tree-id7238 . -345) (undo-tree-id7239 . -345) (undo-tree-id7240 . -345) (undo-tree-id7241 . -345) (undo-tree-id7242 . -345) (undo-tree-id7243 . -349) (undo-tree-id7244 . -349) (undo-tree-id7245 . -349) (undo-tree-id7246 . -349) (undo-tree-id7247 . -349) (undo-tree-id7248 . -349) (undo-tree-id7249 . -349) (undo-tree-id7250 . -349) (undo-tree-id7251 . -355) (undo-tree-id7252 . -355) (undo-tree-id7253 . -355) (undo-tree-id7254 . -355) (undo-tree-id7255 . -355) (undo-tree-id7256 . -355) (undo-tree-id7257 . -355) (undo-tree-id7258 . -355) (undo-tree-id7259 . -361) (undo-tree-id7260 . -361) (undo-tree-id7261 . -361) (undo-tree-id7262 . -361) (undo-tree-id7263 . -361) (undo-tree-id7264 . -361) (undo-tree-id7265 . -361) (undo-tree-id7266 . -361) (undo-tree-id7267 . -365) (undo-tree-id7268 . -365) (undo-tree-id7269 . -365) (undo-tree-id7270 . -365) (undo-tree-id7271 . -365) (undo-tree-id7272 . -365) (undo-tree-id7273 . -365) (undo-tree-id7274 . -365) (undo-tree-id7275 . -370) (undo-tree-id7276 . -370) (undo-tree-id7277 . -370) (undo-tree-id7278 . -370) (undo-tree-id7279 . -370) (undo-tree-id7280 . -370) (undo-tree-id7281 . -370) (undo-tree-id7282 . -370) (undo-tree-id7283 . -379) (undo-tree-id7284 . -379) (undo-tree-id7285 . -379) (undo-tree-id7286 . -379) (undo-tree-id7287 . -379) (undo-tree-id7288 . -379) (undo-tree-id7289 . -379) (undo-tree-id7290 . -379) (undo-tree-id7291 . -385) (undo-tree-id7292 . -385) (undo-tree-id7293 . -385) (undo-tree-id7294 . -385) (undo-tree-id7295 . -385) (undo-tree-id7296 . -385) (undo-tree-id7297 . -385) (undo-tree-id7298 . -385) (undo-tree-id7299 . -393) (undo-tree-id7300 . -393) (undo-tree-id7301 . -393) (undo-tree-id7302 . -393) (undo-tree-id7303 . -393) (undo-tree-id7304 . -393) (undo-tree-id7305 . -393) (undo-tree-id7306 . -393) (undo-tree-id7307 . -395) (undo-tree-id7308 . -395) (undo-tree-id7309 . -395) (undo-tree-id7310 . -395) (undo-tree-id7311 . -395) (undo-tree-id7312 . -395) (undo-tree-id7313 . -395) (undo-tree-id7314 . -395) (undo-tree-id7315 . -395) (undo-tree-id7316 . -395) (undo-tree-id7317 . -395) (undo-tree-id7318 . -395) (undo-tree-id7319 . -395) (undo-tree-id7320 . -395) (undo-tree-id7321 . -395) (undo-tree-id7322 . -396) (undo-tree-id7323 . -396) (undo-tree-id7324 . -396) (undo-tree-id7325 . -396) (undo-tree-id7326 . -396) (undo-tree-id7327 . -396) (undo-tree-id7328 . -396) (undo-tree-id7329 . -396) (undo-tree-id7330 . -396) (undo-tree-id7331 . -396) (undo-tree-id7332 . -396) (undo-tree-id7333 . -396) (undo-tree-id7334 . -396) (undo-tree-id7335 . -396) (undo-tree-id7336 . -396) (undo-tree-id7337 . -397) (undo-tree-id7338 . -397) (undo-tree-id7339 . -397) (undo-tree-id7340 . -397) (undo-tree-id7341 . -397) (undo-tree-id7342 . -397) (undo-tree-id7343 . -397) (undo-tree-id7344 . -397) (undo-tree-id7345 . -398) (undo-tree-id7346 . -398) (undo-tree-id7347 . -398) (undo-tree-id7348 . -398) (undo-tree-id7349 . -398) (undo-tree-id7350 . -398) (undo-tree-id7351 . -398) (undo-tree-id7352 . -398) (undo-tree-id7353 . -400) (undo-tree-id7354 . -400) (undo-tree-id7355 . -400) (undo-tree-id7356 . -400) (undo-tree-id7357 . -400) (undo-tree-id7358 . -400) (undo-tree-id7359 . -400) (undo-tree-id7360 . -400) (undo-tree-id7361 . -403) (undo-tree-id7362 . -403) (undo-tree-id7363 . -403) (undo-tree-id7364 . -403) (undo-tree-id7365 . -403) (undo-tree-id7366 . -403) (undo-tree-id7367 . -403) (undo-tree-id7368 . -403) (undo-tree-id7369 . 78) (undo-tree-id7370 . -413) (undo-tree-id7371 . -412) (undo-tree-id7372 . -412) (undo-tree-id7373 . -412) (undo-tree-id7374 . -412) (undo-tree-id7375 . -412) (undo-tree-id7376 . -412) (undo-tree-id7377 . -412) (undo-tree-id7378 . -412) (undo-tree-id7379 . -416) (undo-tree-id7380 . -416) (undo-tree-id7381 . -416) (undo-tree-id7382 . -416) (undo-tree-id7383 . -416) (undo-tree-id7384 . -416) (undo-tree-id7385 . -416) (undo-tree-id7386 . -416) (undo-tree-id7387 . -418) (undo-tree-id7388 . -418) (undo-tree-id7389 . -418) (undo-tree-id7390 . -418) (undo-tree-id7391 . -418) (undo-tree-id7392 . -418) (undo-tree-id7393 . -418) (undo-tree-id7394 . -418) (undo-tree-id7395 . -423) (undo-tree-id7396 . -423) (undo-tree-id7397 . -423) (undo-tree-id7398 . -423) (undo-tree-id7399 . -423) (undo-tree-id7400 . -423) (undo-tree-id7401 . -423) (undo-tree-id7402 . -423) (undo-tree-id7403 . -424) (undo-tree-id7404 . -424) (undo-tree-id7405 . -424) (undo-tree-id7406 . -424) (undo-tree-id7407 . -424) (undo-tree-id7408 . -424) (undo-tree-id7409 . -424) (undo-tree-id7410 . -424) (undo-tree-id7411 . -428) (undo-tree-id7412 . -428) (undo-tree-id7413 . -428) (undo-tree-id7414 . -428) (undo-tree-id7415 . -428) (undo-tree-id7416 . -428) (undo-tree-id7417 . -428) (undo-tree-id7418 . -428) (undo-tree-id7419 . -434) (undo-tree-id7420 . -434) (undo-tree-id7421 . -434) (undo-tree-id7422 . -434) (undo-tree-id7423 . -434) (undo-tree-id7424 . -434) (undo-tree-id7425 . -434) (undo-tree-id7426 . -434) (undo-tree-id7427 . -438) (undo-tree-id7428 . -438) (undo-tree-id7429 . -438) (undo-tree-id7430 . -438) (undo-tree-id7431 . -438) (undo-tree-id7432 . -438) (undo-tree-id7433 . -438) (undo-tree-id7434 . -438) (undo-tree-id7435 . -440) (undo-tree-id7436 . -440) (undo-tree-id7437 . -440) (undo-tree-id7438 . -440) (undo-tree-id7439 . -440) (undo-tree-id7440 . -440) (undo-tree-id7441 . -440) (undo-tree-id7442 . -440) (undo-tree-id7443 . -446) (undo-tree-id7444 . -446) (undo-tree-id7445 . -446) (undo-tree-id7446 . -446) (undo-tree-id7447 . -446) (undo-tree-id7448 . -446) (undo-tree-id7449 . -446) (undo-tree-id7450 . -446) (undo-tree-id7451 . -447) (undo-tree-id7452 . -447) (undo-tree-id7453 . -447) (undo-tree-id7454 . -447) (undo-tree-id7455 . -447) (undo-tree-id7456 . -447) (undo-tree-id7457 . -447) (undo-tree-id7458 . -447) (undo-tree-id7459 . -451) (undo-tree-id7460 . -451) (undo-tree-id7461 . -451) (undo-tree-id7462 . -451) (undo-tree-id7463 . -451) (undo-tree-id7464 . -451) (undo-tree-id7465 . -451) (undo-tree-id7466 . -451) (undo-tree-id7467 . -457) (undo-tree-id7468 . -457) (undo-tree-id7469 . -457) (undo-tree-id7470 . -457) (undo-tree-id7471 . -457) (undo-tree-id7472 . -457) (undo-tree-id7473 . -457) (undo-tree-id7474 . -457) (undo-tree-id7475 . -458) (undo-tree-id7476 . -458) (undo-tree-id7477 . -458) (undo-tree-id7478 . -458) (undo-tree-id7479 . -458) (undo-tree-id7480 . -458) (undo-tree-id7481 . -458) (undo-tree-id7482 . -458) (undo-tree-id7483 . -461) (undo-tree-id7484 . -461) (undo-tree-id7485 . -461) (undo-tree-id7486 . -461) (undo-tree-id7487 . -461) (undo-tree-id7488 . -461) (undo-tree-id7489 . -461) (undo-tree-id7490 . -461) (undo-tree-id7491 . -464) (undo-tree-id7492 . -464) (undo-tree-id7493 . -464) (undo-tree-id7494 . -464) (undo-tree-id7495 . -464) (undo-tree-id7496 . -464) (undo-tree-id7497 . -464) (undo-tree-id7498 . -464) (undo-tree-id7499 . -469) (undo-tree-id7500 . -469) (undo-tree-id7501 . -469) (undo-tree-id7502 . -469) (undo-tree-id7503 . -469) (undo-tree-id7504 . -469) (undo-tree-id7505 . -469) (undo-tree-id7506 . -469) (undo-tree-id7507 . -473) (undo-tree-id7508 . -473) (undo-tree-id7509 . -473) (undo-tree-id7510 . -473) (undo-tree-id7511 . -473) (undo-tree-id7512 . -473) (undo-tree-id7513 . -473) (undo-tree-id7514 . -473) (undo-tree-id7515 . -481) (undo-tree-id7516 . -481) (undo-tree-id7517 . -481) (undo-tree-id7518 . -481) (undo-tree-id7519 . -481) (undo-tree-id7520 . -481) (undo-tree-id7521 . -481) (undo-tree-id7522 . -481) (undo-tree-id7523 . -483) (undo-tree-id7524 . -483) (undo-tree-id7525 . -483) (undo-tree-id7526 . -483) (undo-tree-id7527 . -483) (undo-tree-id7528 . -483) (undo-tree-id7529 . -483) (undo-tree-id7530 . -483) (undo-tree-id7531 . -482) (undo-tree-id7532 . -482) (undo-tree-id7533 . -482) (undo-tree-id7534 . -482) (undo-tree-id7535 . -482) (undo-tree-id7536 . -482) (undo-tree-id7537 . -482) (undo-tree-id7538 . 1) (undo-tree-id7539 . -483) (undo-tree-id7540 . 88) (undo-tree-id7541 . -396) (undo-tree-id7542 . -482) (undo-tree-id7543 . -482) (undo-tree-id7544 . -482) (undo-tree-id7545 . -482) (undo-tree-id7546 . -482) (undo-tree-id7547 . -482) (undo-tree-id7548 . -482) (undo-tree-id7549 . -482) (undo-tree-id7550 . -482) (undo-tree-id7551 . -483) 17064 (t 25758 51201 401019 522000)) nil (25758 51248 929007 804000) 0 nil])
([nil nil ((#("memory " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 7 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16449) (undo-tree-id5649 . -6) (undo-tree-id5650 . 7) (undo-tree-id5651 . -7)) ((16449 . 16456)) (25758 51190 62381 585000) 0 nil])
([nil nil ((#("." 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16582) (undo-tree-id6665 . 1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1)) nil (25758 51248 928438 483000) 0 nil])
([nil nil ((#("cell" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16449) (undo-tree-id5646 . -3) (undo-tree-id5647 . 4) (undo-tree-id5648 . -4)) ((16449 . 16453)) (25758 51190 62110 536000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16582) (undo-tree-id6662 . 1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1)) nil (25758 51248 928435 215000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16581) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1)) nil (25758 51248 928398 73000) 0 nil])
([nil nil ((16581 . 16582)) nil (25758 51248 929407 981000) 0 nil])
([nil nil ((16582 . 16584) (t 25758 51250 181525 206000)) nil (25758 51253 109359 807000) 0 nil] [nil nil ((16581 . 16582) (#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16581) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1)) ((16581 . 16582) (#(":" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16581)) (25758 51248 927222 764000) 0 nil])
([nil nil ((#("A cell must also have a state_size attribute
" 0 29 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 29 30 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 30 34 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 45 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7559 . -44) (undo-tree-id7560 . 45) (undo-tree-id7561 . 45) (undo-tree-id7562 . -2) (undo-tree-id7563 . -7) (undo-tree-id7564 . -12) (undo-tree-id7565 . -17) (undo-tree-id7566 . -22) (undo-tree-id7567 . -24) (undo-tree-id7568 . -29) (undo-tree-id7569 . -29) (undo-tree-id7570 . -29) (undo-tree-id7571 . -29) (undo-tree-id7572 . -29) (undo-tree-id7573 . -29) (undo-tree-id7574 . -29) (undo-tree-id7575 . -29) (undo-tree-id7576 . -45) (t 25758 51253 145556 70000)) nil (25758 51261 743538 245000) 0 nil])
nil
([nil nil ((#("and an output_size attribute." 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 13 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 14 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 14 18 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 18 29 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7555 . -28) (undo-tree-id7556 . 29) (undo-tree-id7557 . 29) (undo-tree-id7558 . -29)) nil (25758 51261 743764 288000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7693 . 1) (undo-tree-id7694 . 1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1)) nil (25758 51297 398330 888000) 0 nil] [nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7552 . 1) (undo-tree-id7553 . 1) (undo-tree-id7554 . -1)) ((16584 . 16585)) (25758 51261 743513 448000) 0 nil])
([nil nil ((#("In a simple RNN, both are simply equal tothe number of units. The following code implements a custom memory
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 108 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7689 . -107) (undo-tree-id7690 . 108) (undo-tree-id7691 . 108) (undo-tree-id7692 . -108)) nil (25758 51297 398326 675000) 0 nil])
nil
([nil nil ((#("cell which will behave like a SimpleRNNCell, except it will also apply
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 71 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7685 . -70) (undo-tree-id7686 . 71) (undo-tree-id7687 . 71) (undo-tree-id7688 . -71)) nil (25758 51297 398323 58000) 0 nil])
([nil nil ((apply yas--snippet-revive 16584 16631 #s(yas--snippet nil (#s(yas--field 1 16596 16602 nil nil nil t #s(yas--exit 16620 nil))) #s(yas--exit 16620 nil) 2 nil #s(yas--field 1 16596 16602 nil nil nil t #s(yas--exit 16620 nil)) nil nil)) (16596 . 16602) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 16596 16602 nil nil nil t #s(yas--exit 16620 nil))) #s(yas--exit 16620 nil) 2 nil #s(yas--field 1 16596 16602 nil nil nil t #s(yas--exit 16620 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -16614) (undo-tree-id7628 . -2) (16584 . 16627) (#("sr" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7629 . -1) (undo-tree-id7630 . -2) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -2) (undo-tree-id7668 . -2) (undo-tree-id7669 . -2) (undo-tree-id7670 . -2) (undo-tree-id7671 . -2) (undo-tree-id7672 . -2) (undo-tree-id7673 . -2) (undo-tree-id7674 . -2) (undo-tree-id7675 . -2) (undo-tree-id7676 . -2) (undo-tree-id7677 . -2) 16586 (16584 . 16586) (#("Layer Normalization at each time step:" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 38 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16584) (undo-tree-id7678 . -37) (undo-tree-id7679 . 38) (undo-tree-id7680 . 38) (undo-tree-id7681 . -38) (undo-tree-id7682 . -38) (undo-tree-id7683 . -38) (undo-tree-id7684 . -38)) nil (25758 51297 398316 647000) 0 nil])
([nil nil ((#("


" 0 1 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16619) (undo-tree-id7591 . -2) (undo-tree-id7592 . 2) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -3)) nil (25758 51297 398239 40000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16619) (undo-tree-id7577 . -9) (undo-tree-id7578 . 1) (undo-tree-id7579 . 10) (undo-tree-id7580 . -9) (undo-tree-id7581 . -9) (undo-tree-id7582 . -9) (undo-tree-id7583 . -9) (undo-tree-id7584 . -9) (undo-tree-id7585 . -9) (undo-tree-id7586 . -9) (undo-tree-id7587 . -9) (undo-tree-id7588 . -9) (undo-tree-id7589 . -9) (undo-tree-id7590 . -10)) nil (25758 51297 398208 710000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17155 . 17156) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -17165) (17155 . 17166) 17120) nil (25758 51297 398181 468000) 0 nil])
([nil nil ((#("h" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16598) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (t 25758 51297 426018 900000)) nil (25758 51301 537126 535000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16599 . 16600) (nil fontified nil 16599 . 16600) (16599 . 16600) 16598) nil (25758 51301 537114 554000) 0 nil])
([nil nil ((17167 . 17168) (17166 . 17167) (17165 . 17166) (17164 . 17165) (17106 . 17107) (17105 . 17106) (17104 . 17105) (17103 . 17104) (17043 . 17044) (17042 . 17043) (17041 . 17042) (17040 . 17041) (17007 . 17008) (17006 . 17007) (17005 . 17006) (17004 . 17005) (16951 . 16952) (16950 . 16951) (16949 . 16950) (16948 . 16949) (16895 . 16896) (16894 . 16895) (16893 . 16894) (16892 . 16893) (16874 . 16875) (16873 . 16874) (16872 . 16873) (16871 . 16872) (16813 . 16814) (16812 . 16813) (16811 . 16812) (16810 . 16811) (16784 . 16785) (16783 . 16784) (16782 . 16783) (16781 . 16782) (16756 . 16757) (16755 . 16756) (16754 . 16755) (16753 . 16754) (16725 . 16726) (16724 . 16725) (16723 . 16724) (16722 . 16723) (16662 . 16666) (t 25758 51301 570062 378000)) nil (25758 51311 627006 813000) 0 nil])
([nil nil ((16979 . 16980) (16978 . 16979) (16977 . 16978) (16976 . 16977) (16919 . 16920) (16918 . 16919) (16917 . 16918) (16916 . 16917) (16894 . 16895) (16893 . 16894) (16892 . 16893) (16891 . 16892) (16829 . 16830) (16828 . 16829) (16827 . 16828) (16826 . 16827) (16796 . 16797) (16795 . 16796) (16794 . 16795) (16793 . 16794) (16764 . 16765) (16763 . 16764) (16762 . 16763) (16761 . 16762) (16726 . 16730) (t 25758 51311 658168 327000)) nil (25758 51329 460264 426000) 0 nil])
([nil nil ((17207 . 17208) (17206 . 17207) (17205 . 17206) (17204 . 17205) (17142 . 17143) (17141 . 17142) (17140 . 17141) (17139 . 17140) (17072 . 17076) (t 25758 51324 814306 732000)) nil (25758 51342 675550 111000) 0 nil] [nil nil ((16886 . 16887) (#("        " 0 8 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 16886) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -16886) (undo-tree-id7699 . -1) 16829 (t 25758 51324 814306 732000)) ((16886 . 16887) (16886 . 16894) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16886)) (25758 51329 458130 944000) 0 nil])
([nil nil ((#("        " 0 8 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -17032) (undo-tree-id7700 . -8) (undo-tree-id7701 . -8) (undo-tree-id7702 . -8) (undo-tree-id7703 . -8) (undo-tree-id7704 . -8) (undo-tree-id7705 . -8) (undo-tree-id7706 . -8) (undo-tree-id7707 . -8) (undo-tree-id7708 . -8) (undo-tree-id7709 . -8) (undo-tree-id7710 . -8) (undo-tree-id7711 . -8) (undo-tree-id7712 . -8) (undo-tree-id7713 . -8) (undo-tree-id7714 . -8) (undo-tree-id7715 . -8) (undo-tree-id7716 . -8) (undo-tree-id7717 . -8) (undo-tree-id7718 . -8) 17040 (17031 . 17040) (t 25758 51342 706495 376000) 17030) nil (25758 51352 281261 836000) 0 nil])
nil
([nil nil ((16661 . 16662) (t 25758 51352 306596 785000) 16619) nil (25758 51356 98982 559000) 0 nil])
([nil nil ((17255 . 17256) (t 25758 51356 122637 130000) 17246) nil (25758 51450 32712 22000) 0 nil])
([nil nil ((#("The code is quite straightforward.5 " 0 36 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17257) (undo-tree-id7720 . -35) (undo-tree-id7721 . -35) (undo-tree-id7722 . -35) (undo-tree-id7723 . -36) (undo-tree-id7724 . -35) (undo-tree-id7725 . -2) (undo-tree-id7726 . -2) (undo-tree-id7727 . -2) (undo-tree-id7728 . -2) (undo-tree-id7729 . -2) (undo-tree-id7730 . -2) (undo-tree-id7731 . -2) (undo-tree-id7732 . -2) (undo-tree-id7733 . -7) (undo-tree-id7734 . -7) (undo-tree-id7735 . -7) (undo-tree-id7736 . -7) (undo-tree-id7737 . -7) (undo-tree-id7738 . -7) (undo-tree-id7739 . -7) (undo-tree-id7740 . -7) (undo-tree-id7741 . -10) (undo-tree-id7742 . -10) (undo-tree-id7743 . -10) (undo-tree-id7744 . -10) (undo-tree-id7745 . -10) (undo-tree-id7746 . -10) (undo-tree-id7747 . -10) (undo-tree-id7748 . -10) (undo-tree-id7749 . -16) (undo-tree-id7750 . -16) (undo-tree-id7751 . -16) (undo-tree-id7752 . -16) (undo-tree-id7753 . -16) (undo-tree-id7754 . -16) (undo-tree-id7755 . -16) (undo-tree-id7756 . -16) (undo-tree-id7757 . -32) (undo-tree-id7758 . -32) (undo-tree-id7759 . -32) (undo-tree-id7760 . -32) (undo-tree-id7761 . -32) (undo-tree-id7762 . -32) (undo-tree-id7763 . -32) (undo-tree-id7764 . -32) (undo-tree-id7765 . -33) (undo-tree-id7766 . -33) (undo-tree-id7767 . -33) (undo-tree-id7768 . -33) (undo-tree-id7769 . -33) (undo-tree-id7770 . -33) (undo-tree-id7771 . -33) (undo-tree-id7772 . -33) (undo-tree-id7773 . -34) (undo-tree-id7774 . -34) (undo-tree-id7775 . -34) (undo-tree-id7776 . -34) (undo-tree-id7777 . -34) (undo-tree-id7778 . -34) (undo-tree-id7779 . -34) (undo-tree-id7780 . -34) (undo-tree-id7781 . -36) (undo-tree-id7782 . -36) (undo-tree-id7783 . -36) (undo-tree-id7784 . -36) (undo-tree-id7785 . -36) (undo-tree-id7786 . -36) (undo-tree-id7787 . -36) (undo-tree-id7788 . -36) (undo-tree-id7789 . -35) (undo-tree-id7790 . -35) (undo-tree-id7791 . -35) (undo-tree-id7792 . -35) (undo-tree-id7793 . -35) (undo-tree-id7794 . -35) (undo-tree-id7795 . -35) (undo-tree-id7796 . -35) (undo-tree-id7797 . -35) (undo-tree-id7798 . -36) 17292 (t 25758 51450 68460 752000)) nil (25758 51467 788919 501000) 0 nil])
([nil nil ((17291 . 17292) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -17291) (undo-tree-id7719 . -1) 17257) nil (25758 51467 788470 384000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -17337) (nil fontified nil 17336 . 17337) (nil wrap-prefix #("  " 0 2 (face org-indent)) 17336 . 17337) (17336 . 17337) 17313) nil (25758 51467 788460 302000) 0 nil])
([nil nil ((17355 . 17357)) nil (25758 51467 788454 933000) 0 nil])
([nil nil ((17360 . 17361) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -17360) (undo-tree-id7799 . -1) 17357 (t 25758 51467 822450 74000)) nil (25758 51469 803375 551000) 0 nil])
([nil nil ((#("The constructor takes the number of units and the desired activation function,
" 0 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 4 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 4 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7872 . -78) (undo-tree-id7873 . 79) (undo-tree-id7874 . -3) (undo-tree-id7875 . -3) (undo-tree-id7876 . -3) (undo-tree-id7877 . -3) (undo-tree-id7878 . -3) (undo-tree-id7879 . -3) (undo-tree-id7880 . -3) (undo-tree-id7881 . -3) (undo-tree-id7882 . -3) (undo-tree-id7883 . -3) (undo-tree-id7884 . -3) (undo-tree-id7885 . -3) (undo-tree-id7886 . -3) (undo-tree-id7887 . -3) (undo-tree-id7888 . -3) (undo-tree-id7889 . -3) (undo-tree-id7890 . -3) (undo-tree-id7891 . -3) (undo-tree-id7892 . -3) (undo-tree-id7893 . -3) (undo-tree-id7894 . -3) (undo-tree-id7895 . -78) (undo-tree-id7896 . 1) (undo-tree-id7897 . -4) (undo-tree-id7898 . -16) (undo-tree-id7899 . -16) (undo-tree-id7900 . -16) (undo-tree-id7901 . -16) (undo-tree-id7902 . -16) (undo-tree-id7903 . -16) (undo-tree-id7904 . -16) (undo-tree-id7905 . -16) (undo-tree-id7906 . -79) (t 25758 51469 834672 128000)) nil (25758 51490 82818 438000) 0 nil])
([nil nil ((#("and it sets the state_size and output_size attributes, then creates a
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 21 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 22 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 22 26 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 26 37 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 37 38 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 38 42 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7867 . -69) (undo-tree-id7868 . 70) (undo-tree-id7869 . 70) (undo-tree-id7870 . 70) (undo-tree-id7871 . -70)) nil (25758 51490 82795 863000) 0 nil])
([nil nil ((#("SimpleRNNCell with no activation function (because we want to perform
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7860 . -69) (undo-tree-id7861 . 70) (undo-tree-id7862 . 70) (undo-tree-id7863 . 70) (undo-tree-id7864 . 70) (undo-tree-id7865 . -13) (undo-tree-id7866 . -70)) nil (25758 51490 82791 144000) 0 nil])
([nil nil ((#("Layer Normalization after the linear operation but before the activation
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7855 . -72) (undo-tree-id7856 . 73) (undo-tree-id7857 . 73) (undo-tree-id7858 . 73) (undo-tree-id7859 . -73)) nil (25758 51490 82785 910000) 0 nil])
([nil nil ((#("function). Then the constructor creates the LayerNormalization layer,
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7850 . -69) (undo-tree-id7851 . 70) (undo-tree-id7852 . 70) (undo-tree-id7853 . 70) (undo-tree-id7854 . -70)) nil (25758 51490 82782 173000) 0 nil])
([nil nil ((#("and finally it fetches the desired activation function. The call() method
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 4 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7845 . -73) (undo-tree-id7846 . 74) (undo-tree-id7847 . 74) (undo-tree-id7848 . 74) (undo-tree-id7849 . -74)) nil (25758 51490 82778 740000) 0 nil])
([nil nil ((#("starts by applying the simple RNN cell, which computes a linear
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 64 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7840 . -63) (undo-tree-id7841 . 64) (undo-tree-id7842 . 64) (undo-tree-id7843 . 64) (undo-tree-id7844 . -64)) nil (25758 51490 82774 243000) 0 nil])
([nil nil ((#("combination of the current inputs and the previous hidden states, and it
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7835 . -72) (undo-tree-id7836 . 73) (undo-tree-id7837 . 73) (undo-tree-id7838 . 73) (undo-tree-id7839 . -73)) nil (25758 51490 82770 109000) 0 nil])
([nil nil ((#("returns the result twice (indeed, in a SimpleRNNCell, the outputs are just
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7830 . -74) (undo-tree-id7831 . 75) (undo-tree-id7832 . 75) (undo-tree-id7833 . 75) (undo-tree-id7834 . -75)) nil (25758 51490 82765 996000) 0 nil])
([nil nil ((#("equal to the hidden states: in other words, new_states[0] is equal to
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 47 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 48 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 48 54 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 54 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7825 . -69) (undo-tree-id7826 . 70) (undo-tree-id7827 . 70) (undo-tree-id7828 . 70) (undo-tree-id7829 . -70)) nil (25758 51490 82762 358000) 0 nil])
([nil nil ((#("outputs, so we can safely ignore new_states in the rest of the call()
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 36 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 36 37 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 37 43 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 43 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7820 . -69) (undo-tree-id7821 . 70) (undo-tree-id7822 . 70) (undo-tree-id7823 . 70) (undo-tree-id7824 . -70)) nil (25758 51490 82757 520000) 0 nil])
([nil nil ((#("method). Next, the call() method applies Layer Normalization, followed
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 71 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7815 . -70) (undo-tree-id7816 . 71) (undo-tree-id7817 . 71) (undo-tree-id7818 . 71) (undo-tree-id7819 . -71)) nil (25758 51490 82753 350000) 0 nil])
([nil nil ((#("by the activation function. Finally, it returns the outputs twice (once as the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 77 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 77 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7810 . -78) (undo-tree-id7811 . 79) (undo-tree-id7812 . 79) (undo-tree-id7813 . 79) (undo-tree-id7814 . -79)) nil (25758 51490 82749 131000) 0 nil])
([nil nil ((#("outputs, and once as the new hidden states). To use this custom cell, all we
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 77 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7805 . -76) (undo-tree-id7806 . 77) (undo-tree-id7807 . 77) (undo-tree-id7808 . 77) (undo-tree-id7809 . -77)) nil (25758 51490 83049 408000) 0 nil])
([nil nil ((#("Our LNSimpleRNNCell class inherits from the keras.layers.Layer class, just like
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 34 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 35 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 79 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17257) (undo-tree-id8507 . -79) (undo-tree-id8508 . 80) (undo-tree-id8509 . 36) (undo-tree-id8510 . -49) (undo-tree-id8511 . -80) (undo-tree-id8512 . -80) (undo-tree-id8513 . -80) (undo-tree-id8514 . -80) (undo-tree-id8515 . -80) (undo-tree-id8516 . -80) (undo-tree-id8517 . -80) (undo-tree-id8518 . -80) (undo-tree-id8519 . -80)) nil (25758 51512 741499 921000) 0 nil] [nil nil ((#("need to do is create a keras.layers.RNN layer, passing it a cell instance:model = keras.models.Sequential([
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 108 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17357) (undo-tree-id7800 . -107) (undo-tree-id7801 . 108) (undo-tree-id7802 . 108) (undo-tree-id7803 . 108) (undo-tree-id7804 . -108)) ((17357 . 17465)) (25758 51490 82734 638000) 0 nil])
([nil nil ((#("any custom layer. 
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17257) (undo-tree-id8496 . -18) (undo-tree-id8497 . 19) (undo-tree-id8498 . -19) (undo-tree-id8499 . -19) (undo-tree-id8500 . -19) (undo-tree-id8501 . -19) (undo-tree-id8502 . -19) (undo-tree-id8503 . -19) (undo-tree-id8504 . -19) (undo-tree-id8505 . -19) (undo-tree-id8506 . -19)) nil (25758 51512 741491 370000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17257) (undo-tree-id8425 . 1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1)) nil (25758 51512 741482 315000) 0 nil])
([nil nil ((#("need to do is create a keras.layers.RNN layer, passing it a cell instance" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17257) (undo-tree-id8419 . -72) (undo-tree-id8420 . 73) (undo-tree-id8421 . 73) (undo-tree-id8422 . 73) (undo-tree-id8423 . 73) (undo-tree-id8424 . -73)) nil (25758 51512 741443 746000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17257) (undo-tree-id8413 . 1) (undo-tree-id8414 . 1) (undo-tree-id8415 . 1) (undo-tree-id8416 . 1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1)) nil (25758 51512 741439 319000) 0 nil])
([nil nil ((#("
" 0 1 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17256) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1)) nil (25758 51512 741427 361000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 9 10 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17246) (undo-tree-id7907 . -9) (undo-tree-id7908 . -10) (undo-tree-id7909 . -10) (undo-tree-id7910 . -9) (undo-tree-id7911 . -10) (undo-tree-id7912 . -10) (undo-tree-id7913 . -10) (undo-tree-id7914 . -10) (undo-tree-id7915 . -10) (undo-tree-id7916 . -10) (undo-tree-id7917 . -10) (undo-tree-id7918 . -10) (undo-tree-id7919 . -10) (undo-tree-id7920 . -10) (undo-tree-id7921 . -10) (undo-tree-id7922 . -10) (undo-tree-id7923 . -10) (undo-tree-id7924 . -10) (undo-tree-id7925 . -10) (undo-tree-id7926 . -10) (undo-tree-id7927 . -10) (undo-tree-id7928 . -10) (undo-tree-id7929 . -10) (undo-tree-id7930 . -10) (undo-tree-id7931 . -10) (undo-tree-id7932 . -10) (undo-tree-id7933 . -10) (undo-tree-id7934 . -10) (undo-tree-id7935 . -10) (undo-tree-id7936 . -10) (undo-tree-id7937 . -10) (undo-tree-id7938 . -10) (undo-tree-id7939 . -10) (undo-tree-id7940 . -10) (undo-tree-id7941 . -10) (undo-tree-id7942 . -10) (undo-tree-id7943 . -10) (undo-tree-id7944 . -10) (undo-tree-id7945 . -10) (undo-tree-id7946 . -10) (undo-tree-id7947 . -10) (undo-tree-id7948 . -10) (undo-tree-id7949 . -10) (undo-tree-id7950 . -10) (undo-tree-id7951 . -10) (undo-tree-id7952 . -10) (undo-tree-id7953 . -10) (undo-tree-id7954 . -10) (undo-tree-id7955 . -10) (undo-tree-id7956 . -10) (undo-tree-id7957 . -10) (undo-tree-id7958 . -10) (undo-tree-id7959 . -10) (undo-tree-id7960 . -10) (undo-tree-id7961 . -10) (undo-tree-id7962 . -10) (undo-tree-id7963 . -10) (undo-tree-id7964 . -10) (undo-tree-id7965 . -10) (undo-tree-id7966 . -10) (undo-tree-id7967 . -10) (undo-tree-id7968 . -10) (undo-tree-id7969 . -10) (undo-tree-id7970 . -10) (undo-tree-id7971 . -10) (undo-tree-id7972 . -10) (undo-tree-id7973 . -10) (undo-tree-id7974 . -10) (undo-tree-id7975 . -10) (undo-tree-id7976 . -10) (undo-tree-id7977 . -10) (undo-tree-id7978 . -10) (undo-tree-id7979 . -10) (undo-tree-id7980 . -10) (undo-tree-id7981 . -10) (undo-tree-id7982 . -10) (undo-tree-id7983 . -10) (undo-tree-id7984 . -10) (undo-tree-id7985 . -10) (undo-tree-id7986 . -10) (undo-tree-id7987 . -10) (undo-tree-id7988 . -10) (undo-tree-id7989 . -10) (undo-tree-id7990 . -10) (undo-tree-id7991 . -10) (undo-tree-id7992 . -10) (undo-tree-id7993 . -10) (undo-tree-id7994 . -10) (undo-tree-id7995 . -10) (undo-tree-id7996 . -10) (undo-tree-id7997 . -10) (undo-tree-id7998 . -10) (undo-tree-id7999 . -10) (undo-tree-id8000 . -10) (undo-tree-id8001 . -10) (undo-tree-id8002 . -10) (undo-tree-id8003 . -10) (undo-tree-id8004 . -10) (undo-tree-id8005 . -10) (undo-tree-id8006 . -10) (undo-tree-id8007 . -10) (undo-tree-id8008 . -10) (undo-tree-id8009 . -10) (undo-tree-id8010 . -10) (undo-tree-id8011 . -10) (undo-tree-id8012 . -10) (undo-tree-id8013 . -10) (undo-tree-id8014 . -10) (undo-tree-id8015 . -10) (undo-tree-id8016 . -10) (undo-tree-id8017 . -10) (undo-tree-id8018 . -10) (undo-tree-id8019 . -10) (undo-tree-id8020 . -10) (undo-tree-id8021 . -10) (undo-tree-id8022 . -10) (undo-tree-id8023 . -10) (undo-tree-id8024 . -10) (undo-tree-id8025 . -10) (undo-tree-id8026 . -10) (undo-tree-id8027 . -10) (undo-tree-id8028 . -10) (undo-tree-id8029 . -10) (undo-tree-id8030 . -10) (undo-tree-id8031 . -10) (undo-tree-id8032 . -10) (undo-tree-id8033 . -10) (undo-tree-id8034 . -10) (undo-tree-id8035 . -10) (undo-tree-id8036 . -10) (undo-tree-id8037 . -10) (undo-tree-id8038 . -10) (undo-tree-id8039 . -10) (undo-tree-id8040 . -10) (undo-tree-id8041 . -10) (undo-tree-id8042 . -10) (undo-tree-id8043 . -10) (undo-tree-id8044 . -10) (undo-tree-id8045 . -10) (undo-tree-id8046 . -10) (undo-tree-id8047 . -10) (undo-tree-id8048 . -10) (undo-tree-id8049 . -10) (undo-tree-id8050 . -10) (undo-tree-id8051 . -10) (undo-tree-id8052 . -10) (undo-tree-id8053 . -10) (undo-tree-id8054 . -10) (undo-tree-id8055 . -10) (undo-tree-id8056 . -10) (undo-tree-id8057 . -10) (undo-tree-id8058 . -10) (undo-tree-id8059 . -10) (undo-tree-id8060 . -10) (undo-tree-id8061 . -10) (undo-tree-id8062 . -10) (undo-tree-id8063 . -10) (undo-tree-id8064 . -10) (undo-tree-id8065 . -10) (undo-tree-id8066 . -10) (undo-tree-id8067 . -10) (undo-tree-id8068 . -10) (undo-tree-id8069 . -10) (undo-tree-id8070 . -10) (undo-tree-id8071 . -10) (undo-tree-id8072 . -10) (undo-tree-id8073 . -10) (undo-tree-id8074 . -10) (undo-tree-id8075 . -10) (undo-tree-id8076 . -10) (undo-tree-id8077 . -10) (undo-tree-id8078 . -10) (undo-tree-id8079 . -10) (undo-tree-id8080 . -10) (undo-tree-id8081 . -10) (undo-tree-id8082 . -10) (undo-tree-id8083 . -10) (undo-tree-id8084 . -10) (undo-tree-id8085 . -10) (undo-tree-id8086 . -10) (undo-tree-id8087 . -10) (undo-tree-id8088 . -10) (undo-tree-id8089 . -10) (undo-tree-id8090 . -10) (undo-tree-id8091 . -10) (undo-tree-id8092 . -10) (undo-tree-id8093 . -10) (undo-tree-id8094 . -10) (undo-tree-id8095 . -10) (undo-tree-id8096 . -10) (undo-tree-id8097 . -10) (undo-tree-id8098 . -10) (undo-tree-id8099 . -10) (undo-tree-id8100 . -10) (undo-tree-id8101 . -10) (undo-tree-id8102 . -10) (undo-tree-id8103 . -10) (undo-tree-id8104 . -10) (undo-tree-id8105 . -10) (undo-tree-id8106 . -10) (undo-tree-id8107 . -10) (undo-tree-id8108 . -10) (undo-tree-id8109 . -10) (undo-tree-id8110 . -10) (undo-tree-id8111 . -10) (undo-tree-id8112 . -10) (undo-tree-id8113 . -10) (undo-tree-id8114 . -10) (undo-tree-id8115 . -10) (undo-tree-id8116 . -10) (undo-tree-id8117 . -10) (undo-tree-id8118 . -10) (undo-tree-id8119 . -10) (undo-tree-id8120 . -10) (undo-tree-id8121 . -10) (undo-tree-id8122 . -10) (undo-tree-id8123 . -10) (undo-tree-id8124 . -10) (undo-tree-id8125 . -10) (undo-tree-id8126 . -10) (undo-tree-id8127 . -10) (undo-tree-id8128 . -10) (undo-tree-id8129 . -10) (undo-tree-id8130 . -10) (undo-tree-id8131 . -10) (undo-tree-id8132 . -10) (undo-tree-id8133 . -10) (undo-tree-id8134 . -10) (undo-tree-id8135 . -10) (undo-tree-id8136 . -10) (undo-tree-id8137 . -10) (undo-tree-id8138 . -10) (undo-tree-id8139 . -10) (undo-tree-id8140 . -10) (undo-tree-id8141 . -10) (undo-tree-id8142 . -10) (undo-tree-id8143 . -10) (undo-tree-id8144 . -10) (undo-tree-id8145 . -10) (undo-tree-id8146 . -10) (undo-tree-id8147 . -10) (undo-tree-id8148 . -10) (undo-tree-id8149 . -10) (undo-tree-id8150 . -10) (undo-tree-id8151 . -10) (undo-tree-id8152 . -10) (undo-tree-id8153 . -10) (undo-tree-id8154 . -10) (undo-tree-id8155 . -10) (undo-tree-id8156 . -10) (undo-tree-id8157 . -10) (undo-tree-id8158 . -10) (undo-tree-id8159 . -10) (undo-tree-id8160 . -10) (undo-tree-id8161 . -10) (undo-tree-id8162 . -10) (undo-tree-id8163 . -10) (undo-tree-id8164 . -10) (undo-tree-id8165 . -10) (undo-tree-id8166 . -10) (undo-tree-id8167 . -10) (undo-tree-id8168 . -10) (undo-tree-id8169 . -10) (undo-tree-id8170 . -10) (undo-tree-id8171 . -10) (undo-tree-id8172 . -10) (undo-tree-id8173 . -10) (undo-tree-id8174 . -10) (undo-tree-id8175 . -10) (undo-tree-id8176 . -10) (undo-tree-id8177 . -10) (undo-tree-id8178 . -10) (undo-tree-id8179 . -10) (undo-tree-id8180 . -10) (undo-tree-id8181 . -10)) nil (25758 51512 741287 741000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17482 . 17483) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -17492) (17482 . 17493) 17480) nil (25758 51512 740975 839000) 0 nil])
([nil nil ((#("Similarly, you could create a custom cell to apply dropout between each
" 0 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8589 . -71) (undo-tree-id8590 . -9) (undo-tree-id8591 . -11) (undo-tree-id8592 . -15) (undo-tree-id8593 . -21) (undo-tree-id8594 . -28) (undo-tree-id8595 . -30) (undo-tree-id8596 . -37) (undo-tree-id8597 . -42) (undo-tree-id8598 . -45) (undo-tree-id8599 . -51) (undo-tree-id8600 . -59) (undo-tree-id8601 . -67) (undo-tree-id8602 . -72) (undo-tree-id8603 . -72) (undo-tree-id8604 . -72) (undo-tree-id8605 . -72) (undo-tree-id8606 . -72) (undo-tree-id8607 . -72) (undo-tree-id8608 . -72) (undo-tree-id8609 . -72) (undo-tree-id8610 . -9) (undo-tree-id8611 . -9) (undo-tree-id8612 . -9) (undo-tree-id8613 . -9) (undo-tree-id8614 . -9) (undo-tree-id8615 . -9) (undo-tree-id8616 . -9) (undo-tree-id8617 . -9) (undo-tree-id8618 . -72) (t 25758 51512 771251 166000)) nil (25758 51578 137540 270000) 0 nil])
([nil nil ((#("time step. But there’s a simpler way:" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 37 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8578 . -36) (undo-tree-id8579 . -5) (undo-tree-id8580 . -9) (undo-tree-id8581 . -9) (undo-tree-id8582 . -9) (undo-tree-id8583 . -9) (undo-tree-id8584 . -9) (undo-tree-id8585 . -9) (undo-tree-id8586 . -9) (undo-tree-id8587 . -9) (undo-tree-id8588 . -37)) nil (25758 51578 137521 416000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1)) nil (25758 51578 137513 846000) 0 nil])
([nil nil ((#("(except for
keras.layers.RNN)" 0 12 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 12 29 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17514) (undo-tree-id8574 . -28) (undo-tree-id8575 . -29) 17493) nil (25758 51578 137511 841000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17514) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1)) nil (25758 51578 137509 547000) 0 nil])
([nil nil ((#("all recurrent layers and all cells provided by Keras have a dropout
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 21 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8540 . -67) (undo-tree-id8541 . -21) (undo-tree-id8542 . -21) (undo-tree-id8543 . -21) (undo-tree-id8544 . -21) (undo-tree-id8545 . -21) (undo-tree-id8546 . -21) (undo-tree-id8547 . -21) (undo-tree-id8548 . -21) (undo-tree-id8549 . -21) (undo-tree-id8550 . -21) (undo-tree-id8551 . -21) (undo-tree-id8552 . -21) (undo-tree-id8553 . -21) (undo-tree-id8554 . -21) (undo-tree-id8555 . -21) (undo-tree-id8556 . -21) (undo-tree-id8557 . -21) (undo-tree-id8558 . -21) (undo-tree-id8559 . -21) (undo-tree-id8560 . -25) (undo-tree-id8561 . -29) (undo-tree-id8562 . -35) (undo-tree-id8563 . -44) (undo-tree-id8564 . -44) (undo-tree-id8565 . -44) (undo-tree-id8566 . -44) (undo-tree-id8567 . -44) (undo-tree-id8568 . -44) (undo-tree-id8569 . -44) (undo-tree-id8570 . -44) (undo-tree-id8571 . -68)) nil (25758 51578 137506 800000) 0 nil])
([nil nil ((#("hyperparameter and a recurrent_dropout hyperparameter: the former
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 30 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 30 31 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 31 38 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 38 66 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8536 . -65) (undo-tree-id8537 . 66) (undo-tree-id8538 . -14) (undo-tree-id8539 . -66)) nil (25758 51578 137486 198000) 0 nil])
([nil nil ((#("defines the dropout rate to apply to the inputs (at each time step), and the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 23 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 23 77 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8534 . -76) (undo-tree-id8535 . -77)) nil (25758 51578 137483 82000) 0 nil])
([nil nil ((#("latter defines the dropout rate for the hidden states (also at each time step).
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 80 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8532 . -79) (undo-tree-id8533 . -80)) nil (25758 51578 137481 1000) 0 nil])
([nil nil ((#("No need to create a custom cell to apply dropout at each time step in an
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8530 . -72) (undo-tree-id8531 . -73)) nil (25758 51578 137479 159000) 0 nil])
([nil nil ((#("RNN.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 5 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8526 . -4) (undo-tree-id8527 . 5) (undo-tree-id8528 . -3) (undo-tree-id8529 . -5)) nil (25758 51578 137476 949000) 0 nil])
([nil nil ((#("With these techniques, you can alleviate the unstable gradients problem
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8524 . -71) (undo-tree-id8525 . -72)) nil (25758 51578 137472 912000) 0 nil])
([nil nil ((#("and train an RNN much more efficiently. Now let’s look at how to deal
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17493) (undo-tree-id8522 . -69) (undo-tree-id8523 . -70)) nil (25758 51578 137470 115000) 0 nil])
([nil nil ((#("with the short-term memory problem.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 34 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (rear-nonsticky t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 36 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17493) (undo-tree-id8520 . -35) (undo-tree-id8521 . -36)) nil (25758 51578 137464 542000) 0 nil])
([nil nil ((#("
" 0 1 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17492) (undo-tree-id8681 . -1) (undo-tree-id8682 . -1) (undo-tree-id8683 . -1) (undo-tree-id8684 . -1) (undo-tree-id8685 . -1) (undo-tree-id8686 . -1) (undo-tree-id8687 . -1) (undo-tree-id8688 . -1) (undo-tree-id8689 . -1) (undo-tree-id8690 . -1) (undo-tree-id8691 . -1) (undo-tree-id8692 . -1) (undo-tree-id8693 . -1) (undo-tree-id8694 . -1) (undo-tree-id8695 . -1) (undo-tree-id8696 . -1) (undo-tree-id8697 . -1) (undo-tree-id8698 . -1) (undo-tree-id8699 . -1) (undo-tree-id8700 . -1) (undo-tree-id8701 . -1) (undo-tree-id8702 . -1) (undo-tree-id8703 . -1) (undo-tree-id8704 . -1) (undo-tree-id8705 . -1) (undo-tree-id8706 . -1) (undo-tree-id8707 . -1) (undo-tree-id8708 . -1) (undo-tree-id8709 . -1) (undo-tree-id8710 . -1) (undo-tree-id8711 . -1) (undo-tree-id8712 . -1) (undo-tree-id8713 . -1) (undo-tree-id8714 . -1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) (undo-tree-id8718 . -1) (undo-tree-id8719 . -1) (undo-tree-id8720 . -1) (undo-tree-id8721 . -1) (undo-tree-id8722 . -1) (undo-tree-id8723 . -1) (undo-tree-id8724 . -1) (undo-tree-id8725 . -1) (undo-tree-id8726 . -1) (undo-tree-id8727 . -1) (undo-tree-id8728 . -1) (undo-tree-id8729 . -1) (undo-tree-id8730 . -1) (undo-tree-id8731 . -1) (undo-tree-id8732 . -1) (undo-tree-id8733 . -1) (undo-tree-id8734 . -1) (undo-tree-id8735 . -1) (undo-tree-id8736 . -1) (undo-tree-id8737 . -1) (undo-tree-id8738 . -1) (undo-tree-id8739 . -1) (undo-tree-id8740 . -1) (undo-tree-id8741 . -1) (undo-tree-id8742 . -1) (undo-tree-id8743 . -1) (undo-tree-id8744 . -1) (undo-tree-id8745 . -1) (undo-tree-id8746 . -1) (undo-tree-id8747 . -1) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1) (undo-tree-id8756 . -1) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (17494 . 17496) (17493 . 17494) (t 25758 51578 213685 830000) 17493) nil (25758 51657 341085 340000) 0 nil])
([nil nil ((17496 . 17497) (17495 . 17496) 17493) nil (25758 51657 340682 871000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19786 . 19787) (nil fontified nil 19764 . 19787) (nil fontified nil 19684 . 19764) (nil fontified nil 19600 . 19684) (nil fontified nil 19528 . 19600) (nil fontified nil 19455 . 19528) (nil fontified nil 19382 . 19455) (nil fontified nil 19305 . 19382) (nil fontified nil 19235 . 19305) (nil fontified nil 19232 . 19235) (nil fontified nil 19179 . 19232) (nil fontified nil 19111 . 19179) (nil fontified nil 19087 . 19111) (nil fontified nil 19020 . 19087) (nil fontified nil 18986 . 19020) (nil fontified nil 18948 . 18986) (nil fontified nil 18875 . 18948) (nil fontified nil 18872 . 18875) (nil fontified nil 18819 . 18872) (nil fontified nil 18773 . 18819) (nil fontified nil 18704 . 18773) (nil fontified nil 18670 . 18704) (nil fontified nil 18653 . 18670) (nil fontified nil 18584 . 18653) (nil fontified nil 18508 . 18584) (nil fontified nil 18435 . 18508) (nil fontified nil 18297 . 18435) (nil fontified nil 18226 . 18297) (nil fontified nil 18162 . 18226) (nil fontified nil 18151 . 18162) (nil fontified nil 18122 . 18151) (nil fontified nil 18047 . 18122) (nil fontified nil 17975 . 18047) (nil fontified nil 17906 . 17975) (nil fontified nil 17828 . 17906) (nil fontified nil 17752 . 17828) (nil fontified nil 17683 . 17752) (nil fontified nil 17609 . 17683) (nil fontified nil 17536 . 17609) (nil fontified nil 17497 . 17536) (17497 . 19787)) nil (25758 51657 340680 549000) 0 nil])
([nil nil ((17494 . 17495) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -17494) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) (undo-tree-id8623 . -1) (undo-tree-id8624 . -1) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) (undo-tree-id8633 . -1) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (undo-tree-id8637 . -1) (undo-tree-id8638 . -1) (undo-tree-id8639 . -1) (undo-tree-id8640 . -1) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) (#(" " 0 1 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . 17494) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (#("
" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -17495) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) 17493) nil (25758 51657 340671 231000) 0 nil])
([nil nil ((19785 . 19786)) nil (25758 51657 340538 982000) 0 nil])
([nil nil ((17678 . 17679) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17678) (undo-tree-id9739 . -1) (t 25758 51657 372690 839000)) nil (25758 51772 445826 318000) 0 nil])
([nil nil ((#("This can be a
showstopper. Imagine Dory the fish6 trying to translate a long sentence; by
the time she’s finished reading it, she has no clue how it started. " 0 14 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 14 90 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 90 158 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17736) (undo-tree-id9416 . -157) (undo-tree-id9417 . -157) (undo-tree-id9418 . -157) (undo-tree-id9419 . -5) (undo-tree-id9420 . -9) (undo-tree-id9421 . -12) (undo-tree-id9422 . -14) (undo-tree-id9423 . -14) (undo-tree-id9424 . -14) (undo-tree-id9425 . -14) (undo-tree-id9426 . -14) (undo-tree-id9427 . -14) (undo-tree-id9428 . -14) (undo-tree-id9429 . -14) (undo-tree-id9430 . -25) (undo-tree-id9431 . -27) (undo-tree-id9432 . -27) (undo-tree-id9433 . -27) (undo-tree-id9434 . -27) (undo-tree-id9435 . -27) (undo-tree-id9436 . -27) (undo-tree-id9437 . -27) (undo-tree-id9438 . -27) (undo-tree-id9439 . -158) (undo-tree-id9440 . -157) (undo-tree-id9441 . -3) (undo-tree-id9442 . -3) (undo-tree-id9443 . -3) (undo-tree-id9444 . -3) (undo-tree-id9445 . -3) (undo-tree-id9446 . -3) (undo-tree-id9447 . -3) (undo-tree-id9448 . -3) (undo-tree-id9449 . -7) (undo-tree-id9450 . -7) (undo-tree-id9451 . -7) (undo-tree-id9452 . -7) (undo-tree-id9453 . -7) (undo-tree-id9454 . -7) (undo-tree-id9455 . -7) (undo-tree-id9456 . -7) (undo-tree-id9457 . -10) (undo-tree-id9458 . -10) (undo-tree-id9459 . -10) (undo-tree-id9460 . -10) (undo-tree-id9461 . -10) (undo-tree-id9462 . -10) (undo-tree-id9463 . -10) (undo-tree-id9464 . -10) (undo-tree-id9465 . -12) (undo-tree-id9466 . -12) (undo-tree-id9467 . -12) (undo-tree-id9468 . -12) (undo-tree-id9469 . -12) (undo-tree-id9470 . -12) (undo-tree-id9471 . -12) (undo-tree-id9472 . -12) (undo-tree-id9473 . -24) (undo-tree-id9474 . -24) (undo-tree-id9475 . -24) (undo-tree-id9476 . -24) (undo-tree-id9477 . -24) (undo-tree-id9478 . -24) (undo-tree-id9479 . -24) (undo-tree-id9480 . -24) (undo-tree-id9481 . -25) (undo-tree-id9482 . -25) (undo-tree-id9483 . -25) (undo-tree-id9484 . -25) (undo-tree-id9485 . -25) (undo-tree-id9486 . -25) (undo-tree-id9487 . -25) (undo-tree-id9488 . -25) (undo-tree-id9489 . -33) (undo-tree-id9490 . -33) (undo-tree-id9491 . -33) (undo-tree-id9492 . -33) (undo-tree-id9493 . -33) (undo-tree-id9494 . -33) (undo-tree-id9495 . -33) (undo-tree-id9496 . -33) (undo-tree-id9497 . -38) (undo-tree-id9498 . -38) (undo-tree-id9499 . -38) (undo-tree-id9500 . -38) (undo-tree-id9501 . -38) (undo-tree-id9502 . -38) (undo-tree-id9503 . -38) (undo-tree-id9504 . -38) (undo-tree-id9505 . -42) (undo-tree-id9506 . -42) (undo-tree-id9507 . -42) (undo-tree-id9508 . -42) (undo-tree-id9509 . -42) (undo-tree-id9510 . -42) (undo-tree-id9511 . -42) (undo-tree-id9512 . -42) (undo-tree-id9513 . -48) (undo-tree-id9514 . -48) (undo-tree-id9515 . -48) (undo-tree-id9516 . -48) (undo-tree-id9517 . -48) (undo-tree-id9518 . -48) (undo-tree-id9519 . -48) (undo-tree-id9520 . -48) (undo-tree-id9521 . -55) (undo-tree-id9522 . -55) (undo-tree-id9523 . -55) (undo-tree-id9524 . -55) (undo-tree-id9525 . -55) (undo-tree-id9526 . -55) (undo-tree-id9527 . -55) (undo-tree-id9528 . -55) (undo-tree-id9529 . -58) (undo-tree-id9530 . -58) (undo-tree-id9531 . -58) (undo-tree-id9532 . -58) (undo-tree-id9533 . -58) (undo-tree-id9534 . -58) (undo-tree-id9535 . -58) (undo-tree-id9536 . -58) (undo-tree-id9537 . -68) (undo-tree-id9538 . -68) (undo-tree-id9539 . -68) (undo-tree-id9540 . -68) (undo-tree-id9541 . -68) (undo-tree-id9542 . -68) (undo-tree-id9543 . -68) (undo-tree-id9544 . -68) (undo-tree-id9545 . -70) (undo-tree-id9546 . -70) (undo-tree-id9547 . -70) (undo-tree-id9548 . -70) (undo-tree-id9549 . -70) (undo-tree-id9550 . -70) (undo-tree-id9551 . -70) (undo-tree-id9552 . -70) (undo-tree-id9553 . -75) (undo-tree-id9554 . -75) (undo-tree-id9555 . -75) (undo-tree-id9556 . -75) (undo-tree-id9557 . -75) (undo-tree-id9558 . -75) (undo-tree-id9559 . -75) (undo-tree-id9560 . -75) (undo-tree-id9561 . -84) (undo-tree-id9562 . -84) (undo-tree-id9563 . -84) (undo-tree-id9564 . -84) (undo-tree-id9565 . -84) (undo-tree-id9566 . -84) (undo-tree-id9567 . -84) (undo-tree-id9568 . -84) (undo-tree-id9569 . -85) (undo-tree-id9570 . -85) (undo-tree-id9571 . -85) (undo-tree-id9572 . -85) (undo-tree-id9573 . -85) (undo-tree-id9574 . -85) (undo-tree-id9575 . -85) (undo-tree-id9576 . -85) (undo-tree-id9577 . -88) (undo-tree-id9578 . -88) (undo-tree-id9579 . -88) (undo-tree-id9580 . -88) (undo-tree-id9581 . -88) (undo-tree-id9582 . -88) (undo-tree-id9583 . -88) (undo-tree-id9584 . -88) (undo-tree-id9585 . -92) (undo-tree-id9586 . -92) (undo-tree-id9587 . -92) (undo-tree-id9588 . -92) (undo-tree-id9589 . -92) (undo-tree-id9590 . -92) (undo-tree-id9591 . -92) (undo-tree-id9592 . -92) (undo-tree-id9593 . -97) (undo-tree-id9594 . -97) (undo-tree-id9595 . -97) (undo-tree-id9596 . -97) (undo-tree-id9597 . -97) (undo-tree-id9598 . -97) (undo-tree-id9599 . -97) (undo-tree-id9600 . -97) (undo-tree-id9601 . -101) (undo-tree-id9602 . -101) (undo-tree-id9603 . -101) (undo-tree-id9604 . -101) (undo-tree-id9605 . -101) (undo-tree-id9606 . -101) (undo-tree-id9607 . -101) (undo-tree-id9608 . -101) (undo-tree-id9609 . -102) (undo-tree-id9610 . -102) (undo-tree-id9611 . -102) (undo-tree-id9612 . -102) (undo-tree-id9613 . -102) (undo-tree-id9614 . -102) (undo-tree-id9615 . -102) (undo-tree-id9616 . -102) (undo-tree-id9617 . -103) (undo-tree-id9618 . -103) (undo-tree-id9619 . -103) (undo-tree-id9620 . -103) (undo-tree-id9621 . -103) (undo-tree-id9622 . -103) (undo-tree-id9623 . -103) (undo-tree-id9624 . -103) (undo-tree-id9625 . -112) (undo-tree-id9626 . -112) (undo-tree-id9627 . -112) (undo-tree-id9628 . -112) (undo-tree-id9629 . -112) (undo-tree-id9630 . -112) (undo-tree-id9631 . -112) (undo-tree-id9632 . -112) (undo-tree-id9633 . -120) (undo-tree-id9634 . -120) (undo-tree-id9635 . -120) (undo-tree-id9636 . -120) (undo-tree-id9637 . -120) (undo-tree-id9638 . -120) (undo-tree-id9639 . -120) (undo-tree-id9640 . -120) (undo-tree-id9641 . -123) (undo-tree-id9642 . -123) (undo-tree-id9643 . -123) (undo-tree-id9644 . -123) (undo-tree-id9645 . -123) (undo-tree-id9646 . -123) (undo-tree-id9647 . -123) (undo-tree-id9648 . -123) (undo-tree-id9649 . -124) (undo-tree-id9650 . -124) (undo-tree-id9651 . -124) (undo-tree-id9652 . -124) (undo-tree-id9653 . -124) (undo-tree-id9654 . -124) (undo-tree-id9655 . -124) (undo-tree-id9656 . -124) (undo-tree-id9657 . -128) (undo-tree-id9658 . -128) (undo-tree-id9659 . -128) (undo-tree-id9660 . -128) (undo-tree-id9661 . -128) (undo-tree-id9662 . -128) (undo-tree-id9663 . -128) (undo-tree-id9664 . -128) (undo-tree-id9665 . -132) (undo-tree-id9666 . -132) (undo-tree-id9667 . -132) (undo-tree-id9668 . -132) (undo-tree-id9669 . -132) (undo-tree-id9670 . -132) (undo-tree-id9671 . -132) (undo-tree-id9672 . -132) (undo-tree-id9673 . -135) (undo-tree-id9674 . -135) (undo-tree-id9675 . -135) (undo-tree-id9676 . -135) (undo-tree-id9677 . -135) (undo-tree-id9678 . -135) (undo-tree-id9679 . -135) (undo-tree-id9680 . -135) (undo-tree-id9681 . -140) (undo-tree-id9682 . -140) (undo-tree-id9683 . -140) (undo-tree-id9684 . -140) (undo-tree-id9685 . -140) (undo-tree-id9686 . -140) (undo-tree-id9687 . -140) (undo-tree-id9688 . -140) (undo-tree-id9689 . -144) (undo-tree-id9690 . -144) (undo-tree-id9691 . -144) (undo-tree-id9692 . -144) (undo-tree-id9693 . -144) (undo-tree-id9694 . -144) (undo-tree-id9695 . -144) (undo-tree-id9696 . -144) (undo-tree-id9697 . -147) (undo-tree-id9698 . -147) (undo-tree-id9699 . -147) (undo-tree-id9700 . -147) (undo-tree-id9701 . -147) (undo-tree-id9702 . -147) (undo-tree-id9703 . -147) (undo-tree-id9704 . -147) (undo-tree-id9705 . -155) (undo-tree-id9706 . -155) (undo-tree-id9707 . -155) (undo-tree-id9708 . -155) (undo-tree-id9709 . -155) (undo-tree-id9710 . -155) (undo-tree-id9711 . -155) (undo-tree-id9712 . -155) (undo-tree-id9713 . -156) (undo-tree-id9714 . -156) (undo-tree-id9715 . -156) (undo-tree-id9716 . -156) (undo-tree-id9717 . -156) (undo-tree-id9718 . -156) (undo-tree-id9719 . -156) (undo-tree-id9720 . -156) (undo-tree-id9721 . -158) (undo-tree-id9722 . -158) (undo-tree-id9723 . -158) (undo-tree-id9724 . -158) (undo-tree-id9725 . -158) (undo-tree-id9726 . -158) (undo-tree-id9727 . -158) (undo-tree-id9728 . -158) (undo-tree-id9729 . -157) (undo-tree-id9730 . -157) (undo-tree-id9731 . -157) (undo-tree-id9732 . -157) (undo-tree-id9733 . -157) (undo-tree-id9734 . -157) (undo-tree-id9735 . -157) (undo-tree-id9736 . -157) (undo-tree-id9737 . -157) (undo-tree-id9738 . -158) 17893) nil (25758 51772 445813 946000) 0 nil])
([nil nil ((17737 . 17740) (#("0" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -17737) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -1) (undo-tree-id8917 . -1) (undo-tree-id8918 . -1) (undo-tree-id8919 . -1) (undo-tree-id8920 . -1) (undo-tree-id8921 . -1) (undo-tree-id8922 . -1) (undo-tree-id8923 . -1) (undo-tree-id8924 . -1) (undo-tree-id8925 . -1) (undo-tree-id8926 . -1) (undo-tree-id8927 . -1) (undo-tree-id8928 . -1) (undo-tree-id8929 . -1) (undo-tree-id8930 . -1) (undo-tree-id8931 . -1) (undo-tree-id8932 . -1) (undo-tree-id8933 . -1) (undo-tree-id8934 . -1) (undo-tree-id8935 . -1) (undo-tree-id8936 . -1) (undo-tree-id8937 . -1) (undo-tree-id8938 . -1) (undo-tree-id8939 . -1) (undo-tree-id8940 . -1) (undo-tree-id8941 . -1) (undo-tree-id8942 . -1) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) (undo-tree-id8948 . -1) (undo-tree-id8949 . -1) (undo-tree-id8950 . -1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) (undo-tree-id8963 . -1) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (undo-tree-id8966 . -1) (#("0" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -17738) (undo-tree-id8967 . -1) (undo-tree-id8968 . -1) (undo-tree-id8969 . -1) (undo-tree-id8970 . -1) (undo-tree-id8971 . -1) (undo-tree-id8972 . -1) (undo-tree-id8973 . -1) (undo-tree-id8974 . -1) (undo-tree-id8975 . -1) (undo-tree-id8976 . -1) (undo-tree-id8977 . -1) (undo-tree-id8978 . -1) 17739 (17737 . 17739) (17736 . 17737) (#("To tackle
this problem, various types of cells with long-term memory have been
introduced. They have proven so successful that the basic cells are not
used much anymore. Let’s first look at the most popular of these long-term
memory cells: the LSTM cell." 0 10 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 10 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 79 101 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 101 151 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 151 226 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 226 254 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 17736) (undo-tree-id8979 . -253) (undo-tree-id8980 . -253) (undo-tree-id8981 . -253) (undo-tree-id8982 . -1) (undo-tree-id8983 . -1) (undo-tree-id8984 . -1) (undo-tree-id8985 . -1) (undo-tree-id8986 . -1) (undo-tree-id8987 . -1) (undo-tree-id8988 . -1) (undo-tree-id8989 . -1) (undo-tree-id8990 . -254) (undo-tree-id8991 . -253) (undo-tree-id8992 . -1) (undo-tree-id8993 . -8) (undo-tree-id8994 . -13) (undo-tree-id8995 . -13) (undo-tree-id8996 . -13) (undo-tree-id8997 . -13) (undo-tree-id8998 . -13) (undo-tree-id8999 . -13) (undo-tree-id9000 . -13) (undo-tree-id9001 . -13) (undo-tree-id9002 . -21) (undo-tree-id9003 . -21) (undo-tree-id9004 . -21) (undo-tree-id9005 . -21) (undo-tree-id9006 . -21) (undo-tree-id9007 . -21) (undo-tree-id9008 . -21) (undo-tree-id9009 . -21) (undo-tree-id9010 . -22) (undo-tree-id9011 . -22) (undo-tree-id9012 . -22) (undo-tree-id9013 . -22) (undo-tree-id9014 . -22) (undo-tree-id9015 . -22) (undo-tree-id9016 . -22) (undo-tree-id9017 . -22) (undo-tree-id9018 . -30) (undo-tree-id9019 . -30) (undo-tree-id9020 . -30) (undo-tree-id9021 . -30) (undo-tree-id9022 . -30) (undo-tree-id9023 . -30) (undo-tree-id9024 . -30) (undo-tree-id9025 . -30) (undo-tree-id9026 . -36) (undo-tree-id9027 . -36) (undo-tree-id9028 . -36) (undo-tree-id9029 . -36) (undo-tree-id9030 . -36) (undo-tree-id9031 . -36) (undo-tree-id9032 . -36) (undo-tree-id9033 . -36) (undo-tree-id9034 . -39) (undo-tree-id9035 . -39) (undo-tree-id9036 . -39) (undo-tree-id9037 . -39) (undo-tree-id9038 . -39) (undo-tree-id9039 . -39) (undo-tree-id9040 . -39) (undo-tree-id9041 . -39) (undo-tree-id9042 . -45) (undo-tree-id9043 . -45) (undo-tree-id9044 . -45) (undo-tree-id9045 . -45) (undo-tree-id9046 . -45) (undo-tree-id9047 . -45) (undo-tree-id9048 . -45) (undo-tree-id9049 . -45) (undo-tree-id9050 . -50) (undo-tree-id9051 . -50) (undo-tree-id9052 . -50) (undo-tree-id9053 . -50) (undo-tree-id9054 . -50) (undo-tree-id9055 . -50) (undo-tree-id9056 . -50) (undo-tree-id9057 . -50) (undo-tree-id9058 . -55) (undo-tree-id9059 . -55) (undo-tree-id9060 . -55) (undo-tree-id9061 . -55) (undo-tree-id9062 . -55) (undo-tree-id9063 . -55) (undo-tree-id9064 . -55) (undo-tree-id9065 . -55) (undo-tree-id9066 . -56) (undo-tree-id9067 . -56) (undo-tree-id9068 . -56) (undo-tree-id9069 . -56) (undo-tree-id9070 . -56) (undo-tree-id9071 . -56) (undo-tree-id9072 . -56) (undo-tree-id9073 . -56) (undo-tree-id9074 . -60) (undo-tree-id9075 . -60) (undo-tree-id9076 . -60) (undo-tree-id9077 . -60) (undo-tree-id9078 . -60) (undo-tree-id9079 . -60) (undo-tree-id9080 . -60) (undo-tree-id9081 . -60) (undo-tree-id9082 . -67) (undo-tree-id9083 . -67) (undo-tree-id9084 . -67) (undo-tree-id9085 . -67) (undo-tree-id9086 . -67) (undo-tree-id9087 . -67) (undo-tree-id9088 . -67) (undo-tree-id9089 . -67) (undo-tree-id9090 . -72) (undo-tree-id9091 . -72) (undo-tree-id9092 . -72) (undo-tree-id9093 . -72) (undo-tree-id9094 . -72) (undo-tree-id9095 . -72) (undo-tree-id9096 . -72) (undo-tree-id9097 . -72) (undo-tree-id9098 . -77) (undo-tree-id9099 . -77) (undo-tree-id9100 . -77) (undo-tree-id9101 . -77) (undo-tree-id9102 . -77) (undo-tree-id9103 . -77) (undo-tree-id9104 . -77) (undo-tree-id9105 . -77) (undo-tree-id9106 . -88) (undo-tree-id9107 . -88) (undo-tree-id9108 . -88) (undo-tree-id9109 . -88) (undo-tree-id9110 . -88) (undo-tree-id9111 . -88) (undo-tree-id9112 . -88) (undo-tree-id9113 . -88) (undo-tree-id9114 . -89) (undo-tree-id9115 . -89) (undo-tree-id9116 . -89) (undo-tree-id9117 . -89) (undo-tree-id9118 . -89) (undo-tree-id9119 . -89) (undo-tree-id9120 . -89) (undo-tree-id9121 . -89) (undo-tree-id9122 . -94) (undo-tree-id9123 . -94) (undo-tree-id9124 . -94) (undo-tree-id9125 . -94) (undo-tree-id9126 . -94) (undo-tree-id9127 . -94) (undo-tree-id9128 . -94) (undo-tree-id9129 . -94) (undo-tree-id9130 . -99) (undo-tree-id9131 . -99) (undo-tree-id9132 . -99) (undo-tree-id9133 . -99) (undo-tree-id9134 . -99) (undo-tree-id9135 . -99) (undo-tree-id9136 . -99) (undo-tree-id9137 . -99) (undo-tree-id9138 . -106) (undo-tree-id9139 . -106) (undo-tree-id9140 . -106) (undo-tree-id9141 . -106) (undo-tree-id9142 . -106) (undo-tree-id9143 . -106) (undo-tree-id9144 . -106) (undo-tree-id9145 . -106) (undo-tree-id9146 . -109) (undo-tree-id9147 . -109) (undo-tree-id9148 . -109) (undo-tree-id9149 . -109) (undo-tree-id9150 . -109) (undo-tree-id9151 . -109) (undo-tree-id9152 . -109) (undo-tree-id9153 . -109) (undo-tree-id9154 . -120) (undo-tree-id9155 . -120) (undo-tree-id9156 . -120) (undo-tree-id9157 . -120) (undo-tree-id9158 . -120) (undo-tree-id9159 . -120) (undo-tree-id9160 . -120) (undo-tree-id9161 . -120) (undo-tree-id9162 . -125) (undo-tree-id9163 . -125) (undo-tree-id9164 . -125) (undo-tree-id9165 . -125) (undo-tree-id9166 . -125) (undo-tree-id9167 . -125) (undo-tree-id9168 . -125) (undo-tree-id9169 . -125) (undo-tree-id9170 . -129) (undo-tree-id9171 . -129) (undo-tree-id9172 . -129) (undo-tree-id9173 . -129) (undo-tree-id9174 . -129) (undo-tree-id9175 . -129) (undo-tree-id9176 . -129) (undo-tree-id9177 . -129) (undo-tree-id9178 . -135) (undo-tree-id9179 . -135) (undo-tree-id9180 . -135) (undo-tree-id9181 . -135) (undo-tree-id9182 . -135) (undo-tree-id9183 . -135) (undo-tree-id9184 . -135) (undo-tree-id9185 . -135) (undo-tree-id9186 . -141) (undo-tree-id9187 . -141) (undo-tree-id9188 . -141) (undo-tree-id9189 . -141) (undo-tree-id9190 . -141) (undo-tree-id9191 . -141) (undo-tree-id9192 . -141) (undo-tree-id9193 . -141) (undo-tree-id9194 . -145) (undo-tree-id9195 . -145) (undo-tree-id9196 . -145) (undo-tree-id9197 . -145) (undo-tree-id9198 . -145) (undo-tree-id9199 . -145) (undo-tree-id9200 . -145) (undo-tree-id9201 . -145) (undo-tree-id9202 . -149) (undo-tree-id9203 . -149) (undo-tree-id9204 . -149) (undo-tree-id9205 . -149) (undo-tree-id9206 . -149) (undo-tree-id9207 . -149) (undo-tree-id9208 . -149) (undo-tree-id9209 . -149) (undo-tree-id9210 . -154) (undo-tree-id9211 . -154) (undo-tree-id9212 . -154) (undo-tree-id9213 . -154) (undo-tree-id9214 . -154) (undo-tree-id9215 . -154) (undo-tree-id9216 . -154) (undo-tree-id9217 . -154) (undo-tree-id9218 . -159) (undo-tree-id9219 . -159) (undo-tree-id9220 . -159) (undo-tree-id9221 . -159) (undo-tree-id9222 . -159) (undo-tree-id9223 . -159) (undo-tree-id9224 . -159) (undo-tree-id9225 . -159) (undo-tree-id9226 . -167) (undo-tree-id9227 . -167) (undo-tree-id9228 . -167) (undo-tree-id9229 . -167) (undo-tree-id9230 . -167) (undo-tree-id9231 . -167) (undo-tree-id9232 . -167) (undo-tree-id9233 . -167) (undo-tree-id9234 . -168) (undo-tree-id9235 . -168) (undo-tree-id9236 . -168) (undo-tree-id9237 . -168) (undo-tree-id9238 . -168) (undo-tree-id9239 . -168) (undo-tree-id9240 . -168) (undo-tree-id9241 . -168) (undo-tree-id9242 . -172) (undo-tree-id9243 . -172) (undo-tree-id9244 . -172) (undo-tree-id9245 . -172) (undo-tree-id9246 . -172) (undo-tree-id9247 . -172) (undo-tree-id9248 . -172) (undo-tree-id9249 . -172) (undo-tree-id9250 . -173) (undo-tree-id9251 . -173) (undo-tree-id9252 . -173) (undo-tree-id9253 . -173) (undo-tree-id9254 . -173) (undo-tree-id9255 . -173) (undo-tree-id9256 . -173) (undo-tree-id9257 . -173) (undo-tree-id9258 . -174) (undo-tree-id9259 . -174) (undo-tree-id9260 . -174) (undo-tree-id9261 . -174) (undo-tree-id9262 . -174) (undo-tree-id9263 . -174) (undo-tree-id9264 . -174) (undo-tree-id9265 . -174) (undo-tree-id9266 . -180) (undo-tree-id9267 . -180) (undo-tree-id9268 . -180) (undo-tree-id9269 . -180) (undo-tree-id9270 . -180) (undo-tree-id9271 . -180) (undo-tree-id9272 . -180) (undo-tree-id9273 . -180) (undo-tree-id9274 . -185) (undo-tree-id9275 . -185) (undo-tree-id9276 . -185) (undo-tree-id9277 . -185) (undo-tree-id9278 . -185) (undo-tree-id9279 . -185) (undo-tree-id9280 . -185) (undo-tree-id9281 . -185) (undo-tree-id9282 . -188) (undo-tree-id9283 . -188) (undo-tree-id9284 . -188) (undo-tree-id9285 . -188) (undo-tree-id9286 . -188) (undo-tree-id9287 . -188) (undo-tree-id9288 . -188) (undo-tree-id9289 . -188) (undo-tree-id9290 . -192) (undo-tree-id9291 . -192) (undo-tree-id9292 . -192) (undo-tree-id9293 . -192) (undo-tree-id9294 . -192) (undo-tree-id9295 . -192) (undo-tree-id9296 . -192) (undo-tree-id9297 . -192) (undo-tree-id9298 . -197) (undo-tree-id9299 . -197) (undo-tree-id9300 . -197) (undo-tree-id9301 . -197) (undo-tree-id9302 . -197) (undo-tree-id9303 . -197) (undo-tree-id9304 . -197) (undo-tree-id9305 . -197) (undo-tree-id9306 . -205) (undo-tree-id9307 . -205) (undo-tree-id9308 . -205) (undo-tree-id9309 . -205) (undo-tree-id9310 . -205) (undo-tree-id9311 . -205) (undo-tree-id9312 . -205) (undo-tree-id9313 . -205) (undo-tree-id9314 . -208) (undo-tree-id9315 . -208) (undo-tree-id9316 . -208) (undo-tree-id9317 . -208) (undo-tree-id9318 . -208) (undo-tree-id9319 . -208) (undo-tree-id9320 . -208) (undo-tree-id9321 . -208) (undo-tree-id9322 . -214) (undo-tree-id9323 . -214) (undo-tree-id9324 . -214) (undo-tree-id9325 . -214) (undo-tree-id9326 . -214) (undo-tree-id9327 . -214) (undo-tree-id9328 . -214) (undo-tree-id9329 . -214) (undo-tree-id9330 . -219) (undo-tree-id9331 . -219) (undo-tree-id9332 . -219) (undo-tree-id9333 . -219) (undo-tree-id9334 . -219) (undo-tree-id9335 . -219) (undo-tree-id9336 . -219) (undo-tree-id9337 . -219) (undo-tree-id9338 . -220) (undo-tree-id9339 . -220) (undo-tree-id9340 . -220) (undo-tree-id9341 . -220) (undo-tree-id9342 . -220) (undo-tree-id9343 . -220) (undo-tree-id9344 . -220) (undo-tree-id9345 . -220) (undo-tree-id9346 . -224) (undo-tree-id9347 . -224) (undo-tree-id9348 . -224) (undo-tree-id9349 . -224) (undo-tree-id9350 . -224) (undo-tree-id9351 . -224) (undo-tree-id9352 . -224) (undo-tree-id9353 . -224) (undo-tree-id9354 . -231) (undo-tree-id9355 . -231) (undo-tree-id9356 . -231) (undo-tree-id9357 . -231) (undo-tree-id9358 . -231) (undo-tree-id9359 . -231) (undo-tree-id9360 . -231) (undo-tree-id9361 . -231) (undo-tree-id9362 . -237) (undo-tree-id9363 . -237) (undo-tree-id9364 . -237) (undo-tree-id9365 . -237) (undo-tree-id9366 . -237) (undo-tree-id9367 . -237) (undo-tree-id9368 . -237) (undo-tree-id9369 . -237) (undo-tree-id9370 . -238) (undo-tree-id9371 . -238) (undo-tree-id9372 . -238) (undo-tree-id9373 . -238) (undo-tree-id9374 . -238) (undo-tree-id9375 . -238) (undo-tree-id9376 . -238) (undo-tree-id9377 . -238) (undo-tree-id9378 . -242) (undo-tree-id9379 . -242) (undo-tree-id9380 . -242) (undo-tree-id9381 . -242) (undo-tree-id9382 . -242) (undo-tree-id9383 . -242) (undo-tree-id9384 . -242) (undo-tree-id9385 . -242) (undo-tree-id9386 . 10) (undo-tree-id9387 . -248) (undo-tree-id9388 . -247) (undo-tree-id9389 . -247) (undo-tree-id9390 . -247) (undo-tree-id9391 . -247) (undo-tree-id9392 . -247) (undo-tree-id9393 . -247) (undo-tree-id9394 . -247) (undo-tree-id9395 . -247) (undo-tree-id9396 . -252) (undo-tree-id9397 . -252) (undo-tree-id9398 . -252) (undo-tree-id9399 . -252) (undo-tree-id9400 . -252) (undo-tree-id9401 . -252) (undo-tree-id9402 . -252) (undo-tree-id9403 . -252) (undo-tree-id9404 . -253) (undo-tree-id9405 . -253) (undo-tree-id9406 . -253) (undo-tree-id9407 . -253) (undo-tree-id9408 . -253) (undo-tree-id9409 . -253) (undo-tree-id9410 . -253) (undo-tree-id9411 . -253) (undo-tree-id9412 . -253) (undo-tree-id9413 . -254) (undo-tree-id9414 . -254) (undo-tree-id9415 . -254) 17989) nil (25758 51772 445590 871000) 0 nil])
([nil nil ((nil keymap (keymap) 17739 . 17740) (nil face org-level-2 17739 . 17740) (nil line-prefix #("  " 0 2 (face org-indent)) 17739 . 17740) (nil wrap-prefix #("  " 0 2 (face org-indent)) 17739 . 17740) (nil fontified nil 17739 . 17740) (17739 . 17740) (#(" " 0 1 (face org-level-2 keymap (keymap) fontified nil wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)))) . 17739) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (#("
" 0 1 (fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)))) . -17740) (undo-tree-id8902 . 1) (undo-tree-id8903 . 1) (undo-tree-id8904 . -1) 17739) nil (25758 51772 445012 369000) 0 nil])
([nil nil ((#("The Long Short-Term Memory (LSTM) cell was proposed in 19977 by
" 0 64 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 17751) (undo-tree-id9746 . -63) (undo-tree-id9747 . -4) (undo-tree-id9748 . -9) (undo-tree-id9749 . -14) (undo-tree-id9750 . -15) (undo-tree-id9751 . -20) (undo-tree-id9752 . -27) (undo-tree-id9753 . -27) (undo-tree-id9754 . -27) (undo-tree-id9755 . -27) (undo-tree-id9756 . -27) (undo-tree-id9757 . -27) (undo-tree-id9758 . -27) (undo-tree-id9759 . -27) (undo-tree-id9760 . 36) (undo-tree-id9761 . -32) (undo-tree-id9762 . -28) (undo-tree-id9763 . -28) (undo-tree-id9764 . -28) (undo-tree-id9765 . -28) (undo-tree-id9766 . -28) (undo-tree-id9767 . -28) (undo-tree-id9768 . -28) (undo-tree-id9769 . -28) (undo-tree-id9770 . -28) (undo-tree-id9771 . -28) (undo-tree-id9772 . -28) (undo-tree-id9773 . -28) (undo-tree-id9774 . -28) (undo-tree-id9775 . -28) (undo-tree-id9776 . -28) (undo-tree-id9777 . -32) (undo-tree-id9778 . -32) (undo-tree-id9779 . -32) (undo-tree-id9780 . -32) (undo-tree-id9781 . -32) (undo-tree-id9782 . -32) (undo-tree-id9783 . -32) (undo-tree-id9784 . -32) (undo-tree-id9785 . -34) (undo-tree-id9786 . -34) (undo-tree-id9787 . -34) (undo-tree-id9788 . -34) (undo-tree-id9789 . -34) (undo-tree-id9790 . -34) (undo-tree-id9791 . -34) (undo-tree-id9792 . -34) (undo-tree-id9793 . -34) (undo-tree-id9794 . -34) (undo-tree-id9795 . -34) (undo-tree-id9796 . -34) (undo-tree-id9797 . -34) (undo-tree-id9798 . -34) (undo-tree-id9799 . -34) (undo-tree-id9800 . -64) (t 25758 51772 521594 484000)) nil (25758 51787 341176 688000) 0 nil])
([nil nil ((#("Sepp Hochreiter and Jürgen Schmidhuber and gradually improved over the
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 71 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 17751) (undo-tree-id9742 . -70) (undo-tree-id9743 . 71) (undo-tree-id9744 . -4) (undo-tree-id9745 . -71)) nil (25758 51787 341392 532000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -17826) (nil fontified nil 17825 . 17826) (nil wrap-prefix #("    " 0 4 (face org-indent)) 17825 . 17826) (17825 . 17826) 17751) nil (25758 51795 585911 74000) 0 nil] [nil nil ((#("years by several researchers, such as Alex Graves, Haşim Sak,8 andWojciech Zaremba.9 If you consider the LSTM cell as a black box, it can
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 138 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 17751) (undo-tree-id9740 . -137) (undo-tree-id9741 . -138)) ((17751 . 17889)) (25758 51787 341132 531000) 0 nil])
([nil nil ((#("years by several researchers, such as Alex Graves, Haşim Sak,8 andWojciech
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 74 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 74 75 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 17751) (undo-tree-id9809 . -74) (undo-tree-id9810 . 12) (undo-tree-id9811 . -74) (undo-tree-id9812 . -75) (undo-tree-id9813 . -75) (undo-tree-id9814 . -75) (undo-tree-id9815 . -75) (undo-tree-id9816 . -75) (undo-tree-id9817 . -75) (undo-tree-id9818 . -75) (undo-tree-id9819 . -75) (undo-tree-id9820 . -75) (undo-tree-id9821 . -75) (undo-tree-id9822 . -75) (undo-tree-id9823 . -75) (undo-tree-id9824 . -75) (undo-tree-id9825 . -75) (undo-tree-id9826 . -75) (undo-tree-id9827 . -75) (undo-tree-id9828 . -75) (undo-tree-id9829 . -75)) nil (25758 51795 585908 622000) 0 nil])
nil
([nil nil ((#("Zaremba." 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 8 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 17751) (undo-tree-id9805 . -7) (undo-tree-id9806 . 8) (undo-tree-id9807 . -7) (undo-tree-id9808 . -8)) nil (25758 51795 585893 443000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 17751) (undo-tree-id9803 . -1) (undo-tree-id9804 . -1)) nil (25758 51795 585889 32000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 17751) (undo-tree-id9801 . -1) (undo-tree-id9802 . -1)) nil (25758 51795 585882 657000) 0 nil])
([nil nil ((18051 . 18057) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 18051 18057 nil nil nil t #s(yas--exit 18075 nil))) #s(yas--exit 18075 nil) 3 nil #s(yas--field 1 18051 18057 nil nil nil t #s(yas--exit 18075 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . -18069) (undo-tree-id9844 . -2) (18039 . 18082) (#("sr" 0 2 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 18039) (undo-tree-id9845 . -1) (undo-tree-id9846 . -2) (undo-tree-id9847 . -1) (undo-tree-id9848 . -1) (undo-tree-id9849 . -1) (undo-tree-id9850 . -1) (undo-tree-id9851 . -1) (undo-tree-id9852 . -1) (undo-tree-id9853 . -1) (undo-tree-id9854 . -1) (undo-tree-id9855 . -1) (undo-tree-id9856 . -1) (undo-tree-id9857 . -1) (undo-tree-id9858 . -1) (undo-tree-id9859 . -1) (undo-tree-id9860 . -1) (undo-tree-id9861 . -1) (undo-tree-id9862 . -1) (undo-tree-id9863 . -1) (undo-tree-id9864 . -1) (undo-tree-id9865 . -1) (undo-tree-id9866 . -1) (undo-tree-id9867 . -1) (undo-tree-id9868 . -1) (undo-tree-id9869 . -1) (undo-tree-id9870 . -1) (undo-tree-id9871 . -1) (undo-tree-id9872 . -1) (undo-tree-id9873 . -1) (undo-tree-id9874 . -1) (undo-tree-id9875 . -1) (undo-tree-id9876 . -1) (undo-tree-id9877 . -1) (undo-tree-id9878 . -1) (undo-tree-id9879 . -1) (undo-tree-id9880 . -1) (undo-tree-id9881 . -1) (undo-tree-id9882 . -1) (undo-tree-id9883 . -1) (undo-tree-id9884 . -1) (undo-tree-id9885 . -1) (undo-tree-id9886 . -2) (undo-tree-id9887 . -2) (undo-tree-id9888 . -2) (undo-tree-id9889 . -2) (undo-tree-id9890 . -2) (undo-tree-id9891 . -2) (undo-tree-id9892 . -2) (undo-tree-id9893 . -2) (undo-tree-id9894 . -2) (undo-tree-id9895 . -2) (undo-tree-id9896 . -2) 18041 (18039 . 18041) (18038 . 18039) (t 25758 51795 663224 397000) 18022) nil (25758 51816 249970 931000) 0 nil])
([nil nil ((apply yas--snippet-revive 18039 18086 #s(yas--snippet nil (#s(yas--field 1 18051 18057 nil nil nil t #s(yas--exit 18075 nil))) #s(yas--exit 18075 nil) 3 nil #s(yas--field 1 18051 18057 nil nil nil t #s(yas--exit 18075 nil)) nil nil))) nil (25758 51816 249896 698000) 0 nil])
([nil nil ((#("


" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 18074) (undo-tree-id9842 . -2) (undo-tree-id9843 . -3)) nil (25758 51816 249895 464000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18074) (undo-tree-id9830 . -9) (undo-tree-id9831 . -9) (undo-tree-id9832 . -9) (undo-tree-id9833 . -9) (undo-tree-id9834 . -9) (undo-tree-id9835 . -9) (undo-tree-id9836 . -9) (undo-tree-id9837 . -9) (undo-tree-id9838 . -9) (undo-tree-id9839 . -9) (undo-tree-id9840 . -9) (undo-tree-id9841 . -10)) nil (25758 51816 249892 192000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18278 . 18279) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil face org-block-end-line)) . -18288) (18278 . 18289) 18276) nil (25758 51816 249870 244000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18279) (undo-tree-id10272 . -9) (undo-tree-id10273 . -9) (undo-tree-id10274 . -8) (undo-tree-id10275 . -10) (undo-tree-id10276 . -10) (undo-tree-id10277 . -10) (undo-tree-id10278 . -10) (undo-tree-id10279 . -10) (undo-tree-id10280 . -10) (undo-tree-id10281 . -10) (undo-tree-id10282 . -10) (undo-tree-id10283 . -10) (undo-tree-id10284 . -10) (undo-tree-id10285 . -10) (undo-tree-id10286 . -10) (undo-tree-id10287 . -10) (undo-tree-id10288 . -10) (undo-tree-id10289 . -10) (undo-tree-id10290 . -10) (undo-tree-id10291 . -10) (undo-tree-id10292 . -10) (undo-tree-id10293 . -10) (undo-tree-id10294 . -10) (undo-tree-id10295 . -10) (undo-tree-id10296 . -10) (undo-tree-id10297 . -10) (undo-tree-id10298 . -10) (undo-tree-id10299 . -8) (undo-tree-id10300 . -8) (undo-tree-id10301 . -8) (undo-tree-id10302 . -8) (undo-tree-id10303 . -8) (undo-tree-id10304 . -8) (undo-tree-id10305 . -8) (undo-tree-id10306 . -8) (undo-tree-id10307 . -8) (undo-tree-id10308 . -8) (undo-tree-id10309 . -8) (undo-tree-id10310 . -8) (undo-tree-id10311 . -8) (undo-tree-id10312 . -8) (undo-tree-id10313 . -8) (undo-tree-id10314 . -8) (undo-tree-id10315 . -8) (undo-tree-id10316 . -8) (undo-tree-id10317 . -10) 18287 (t 25758 51816 324639 22000)) nil (25758 51840 811296 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18638 . 18639) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil face org-block-end-line)) . -18648) (18638 . 18649) 18637) nil (25758 51840 811267 610000) 0 nil])
([nil nil ((18074 . 18643) (#("model = keras.models.Sequential([
keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
keras.layers.LSTM(20, return_sequences=True),
keras.layers.TimeDistributed(keras.layers.Dense(10))
])
Alternatively, you could use the general-purpose keras.layers.RNN layer,
giving it an LSTMCell as an argument:
model = keras.models.Sequential([
keras.layers.RNN(keras.layers.LSTMCell(20), return_sequences=True,
input_shape=[None, 1]),
keras.layers.RNN(keras.layers.LSTMCell(20), return_sequences=True),
keras.layers.TimeDistributed(keras.layers.Dense(10))
])
" 0 1 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 5 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 5 31 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 31 32 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 32 33 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 33 34 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 34 51 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 51 52 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 52 62 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 62 63 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 63 72 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 72 73 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 73 77 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 77 84 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 84 85 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 85 90 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 90 91 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 91 92 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 92 96 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 96 99 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 99 100 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 100 101 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 101 103 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 103 120 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 120 121 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 121 131 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 131 132 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 132 141 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 141 142 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 142 146 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 146 147 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 147 149 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 149 177 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 177 178 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 178 196 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 196 197 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 197 199 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 199 200 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 200 201 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 201 202 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 202 203 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 203 204 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 204 205 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 205 206 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 206 278 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 278 300 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 300 302 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 302 316 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 316 321 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 321 347 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 347 348 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 348 349 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 349 350 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 350 366 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 366 367 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 367 388 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 388 389 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 389 391 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 391 392 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 392 400 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 400 401 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 401 410 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 410 411 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 411 414 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 414 415 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 415 417 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 417 422 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 422 423 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 423 428 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 428 429 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 429 430 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 430 434 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 434 437 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 437 438 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 438 439 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 439 441 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 441 457 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 457 458 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 458 465 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 465 479 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 479 480 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 480 482 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 482 483 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 483 491 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 491 492 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 492 501 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 501 502 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 502 506 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 506 507 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 507 509 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 509 537 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 537 538 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 538 556 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 556 557 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 557 559 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 559 560 (face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 560 561 (face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 561 562 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 562 563 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 563 564 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 564 565 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 18074) (undo-tree-id9897 . -565) (undo-tree-id9898 . -205) (undo-tree-id9899 . -205) (undo-tree-id9900 . -205) (undo-tree-id9901 . -205) (undo-tree-id9902 . -205) (undo-tree-id9903 . -205) (undo-tree-id9904 . -205) (undo-tree-id9905 . -205) (undo-tree-id9906 . -205) (undo-tree-id9907 . -205) (undo-tree-id9908 . -205) (undo-tree-id9909 . -205) (undo-tree-id9910 . -205) (undo-tree-id9911 . -205) (undo-tree-id9912 . -205) (undo-tree-id9913 . -205) (undo-tree-id9914 . -205) (undo-tree-id9915 . -205) (undo-tree-id9916 . -202) (undo-tree-id9917 . -202) (undo-tree-id9918 . -202) (undo-tree-id9919 . -202) (undo-tree-id9920 . -202) (undo-tree-id9921 . -202) (undo-tree-id9922 . -202) (undo-tree-id9923 . -202) (undo-tree-id9924 . -202) (undo-tree-id9925 . -202) (undo-tree-id9926 . -202) (undo-tree-id9927 . -202) (undo-tree-id9928 . -202) (undo-tree-id9929 . -202) (undo-tree-id9930 . -202) (undo-tree-id9931 . -149) (undo-tree-id9932 . -149) (undo-tree-id9933 . -149) (undo-tree-id9934 . -149) (undo-tree-id9935 . -149) (undo-tree-id9936 . -149) (undo-tree-id9937 . -149) (undo-tree-id9938 . -149) (undo-tree-id9939 . -149) (undo-tree-id9940 . -149) (undo-tree-id9941 . -149) (undo-tree-id9942 . -149) (undo-tree-id9943 . -149) (undo-tree-id9944 . -149) (undo-tree-id9945 . -149) (undo-tree-id9946 . -103) (undo-tree-id9947 . -103) (undo-tree-id9948 . -103) (undo-tree-id9949 . -103) (undo-tree-id9950 . -103) (undo-tree-id9951 . -103) (undo-tree-id9952 . -103) (undo-tree-id9953 . -103) (undo-tree-id9954 . -34) (undo-tree-id9955 . -34) (undo-tree-id9956 . -34) (undo-tree-id9957 . -34) (undo-tree-id9958 . -34) (undo-tree-id9959 . -34) (undo-tree-id9960 . -34) (undo-tree-id9961 . -34) (undo-tree-id9962 . -205) (undo-tree-id9963 . -34) (undo-tree-id9964 . -34) (undo-tree-id9965 . -34) (undo-tree-id9966 . -34) (undo-tree-id9967 . -34) (undo-tree-id9968 . -34) (undo-tree-id9969 . -34) (undo-tree-id9970 . -34) (undo-tree-id9971 . -103) (undo-tree-id9972 . -103) (undo-tree-id9973 . -103) (undo-tree-id9974 . -103) (undo-tree-id9975 . -103) (undo-tree-id9976 . -103) (undo-tree-id9977 . -103) (undo-tree-id9978 . -103) (undo-tree-id9979 . -149) (undo-tree-id9980 . -149) (undo-tree-id9981 . -149) (undo-tree-id9982 . -149) (undo-tree-id9983 . -149) (undo-tree-id9984 . -149) (undo-tree-id9985 . -149) (undo-tree-id9986 . -149) (undo-tree-id9987 . -202) (undo-tree-id9988 . -202) (undo-tree-id9989 . -202) (undo-tree-id9990 . -202) (undo-tree-id9991 . -202) (undo-tree-id9992 . -202) (undo-tree-id9993 . -202) (undo-tree-id9994 . -202) (undo-tree-id9995 . -202) (undo-tree-id9996 . -202) (undo-tree-id9997 . -202) (undo-tree-id9998 . -202) (undo-tree-id9999 . -202) (undo-tree-id10000 . -202) (undo-tree-id10001 . -202) (undo-tree-id10002 . -205) (undo-tree-id10003 . -205) (undo-tree-id10004 . -205) (undo-tree-id10005 . -205) (undo-tree-id10006 . -205) (undo-tree-id10007 . -205) (undo-tree-id10008 . -205) (undo-tree-id10009 . -205) (undo-tree-id10010 . -205) (undo-tree-id10011 . -205) (undo-tree-id10012 . -205) (undo-tree-id10013 . -205) (undo-tree-id10014 . -205) (undo-tree-id10015 . -205) (undo-tree-id10016 . -205) (undo-tree-id10017 . -205) (undo-tree-id10018 . -205) (undo-tree-id10019 . -205) (undo-tree-id10020 . -205) (undo-tree-id10021 . -205) (undo-tree-id10022 . -205) (undo-tree-id10023 . -205) (undo-tree-id10024 . -205) (undo-tree-id10025 . -278) (undo-tree-id10026 . -278) (undo-tree-id10027 . -278) (undo-tree-id10028 . -278) (undo-tree-id10029 . -278) (undo-tree-id10030 . -278) (undo-tree-id10031 . -278) (undo-tree-id10032 . -278) (undo-tree-id10033 . -278) (undo-tree-id10034 . -278) (undo-tree-id10035 . -205) (undo-tree-id10036 . -205) (undo-tree-id10037 . -205) (undo-tree-id10038 . -205) (undo-tree-id10039 . -205) (undo-tree-id10040 . -205) (undo-tree-id10041 . -205) (undo-tree-id10042 . -205) (undo-tree-id10043 . -205) (undo-tree-id10044 . -205) (undo-tree-id10045 . -205) (undo-tree-id10046 . -205) (undo-tree-id10047 . -205) (undo-tree-id10048 . -205) (undo-tree-id10049 . -205) (undo-tree-id10050 . -205) (undo-tree-id10051 . -205) (undo-tree-id10052 . -205) (undo-tree-id10053 . -205) (undo-tree-id10054 . -205) (undo-tree-id10055 . -205) (undo-tree-id10056 . -205) (undo-tree-id10057 . -205) (undo-tree-id10058 . -205) (undo-tree-id10059 . -218) (undo-tree-id10060 . -220) (undo-tree-id10061 . -220) (undo-tree-id10062 . -220) (undo-tree-id10063 . -220) (undo-tree-id10064 . -220) (undo-tree-id10065 . -220) (undo-tree-id10066 . -220) (undo-tree-id10067 . -220) (undo-tree-id10068 . -205) (undo-tree-id10069 . -205) (undo-tree-id10070 . -205) (undo-tree-id10071 . -205) (undo-tree-id10072 . -205) (undo-tree-id10073 . -205) (undo-tree-id10074 . -205) (undo-tree-id10075 . -205) (undo-tree-id10076 . -205) (undo-tree-id10077 . -205) (undo-tree-id10078 . -205) (undo-tree-id10079 . -205) (undo-tree-id10080 . -205) (undo-tree-id10081 . -205) (undo-tree-id10082 . -205) (undo-tree-id10083 . -205) (undo-tree-id10084 . -205) (undo-tree-id10085 . -205) (undo-tree-id10086 . -213) (undo-tree-id10087 . -213) (undo-tree-id10088 . -213) (undo-tree-id10089 . -213) (undo-tree-id10090 . -213) (undo-tree-id10091 . -213) (undo-tree-id10092 . -213) (undo-tree-id10093 . -213) (undo-tree-id10094 . -213) (undo-tree-id10095 . -213) (undo-tree-id10096 . -213) (undo-tree-id10097 . -213) (undo-tree-id10098 . -213) (undo-tree-id10099 . -213) (undo-tree-id10100 . -213) (undo-tree-id10101 . -213) (undo-tree-id10102 . -213) (undo-tree-id10103 . -286) (undo-tree-id10104 . -286) (undo-tree-id10105 . -286) (undo-tree-id10106 . -286) (undo-tree-id10107 . -286) (undo-tree-id10108 . -286) (undo-tree-id10109 . -286) (undo-tree-id10110 . -286) (undo-tree-id10111 . -324) (undo-tree-id10112 . -324) (undo-tree-id10113 . -324) (undo-tree-id10114 . -324) (undo-tree-id10115 . -324) (undo-tree-id10116 . -324) (undo-tree-id10117 . -324) (undo-tree-id10118 . -324) (undo-tree-id10119 . -358) (undo-tree-id10120 . -358) (undo-tree-id10121 . -358) (undo-tree-id10122 . -358) (undo-tree-id10123 . -358) (undo-tree-id10124 . -358) (undo-tree-id10125 . -358) (undo-tree-id10126 . -358) (undo-tree-id10127 . -427) (undo-tree-id10128 . -427) (undo-tree-id10129 . -427) (undo-tree-id10130 . -427) (undo-tree-id10131 . -427) (undo-tree-id10132 . -427) (undo-tree-id10133 . -427) (undo-tree-id10134 . -427) (undo-tree-id10135 . -449) (undo-tree-id10136 . -449) (undo-tree-id10137 . -449) (undo-tree-id10138 . -449) (undo-tree-id10139 . -449) (undo-tree-id10140 . -449) (undo-tree-id10141 . -449) (undo-tree-id10142 . -449) (undo-tree-id10143 . -517) (undo-tree-id10144 . -517) (undo-tree-id10145 . -517) (undo-tree-id10146 . -517) (undo-tree-id10147 . -517) (undo-tree-id10148 . -517) (undo-tree-id10149 . -517) (undo-tree-id10150 . -517) (undo-tree-id10151 . -563) (undo-tree-id10152 . -563) (undo-tree-id10153 . -563) (undo-tree-id10154 . -563) (undo-tree-id10155 . -563) (undo-tree-id10156 . -563) (undo-tree-id10157 . -563) (undo-tree-id10158 . -563) (undo-tree-id10159 . -563) (undo-tree-id10160 . -563) (undo-tree-id10161 . -563) (undo-tree-id10162 . -563) (undo-tree-id10163 . -563) (undo-tree-id10164 . -563) (undo-tree-id10165 . -563) (undo-tree-id10166 . -565) (undo-tree-id10167 . -565) (undo-tree-id10168 . -565) (undo-tree-id10169 . -565) (undo-tree-id10170 . -565) (undo-tree-id10171 . -565) (undo-tree-id10172 . -565) (undo-tree-id10173 . -565) (undo-tree-id10174 . -565) (undo-tree-id10175 . -565) (undo-tree-id10176 . -565) (undo-tree-id10177 . -565) (undo-tree-id10178 . -565) (undo-tree-id10179 . -565) (undo-tree-id10180 . -565) (undo-tree-id10181 . -565) (undo-tree-id10182 . -565) (undo-tree-id10183 . -565) (undo-tree-id10184 . -565) (undo-tree-id10185 . -565) (undo-tree-id10186 . -565) (undo-tree-id10187 . -565) (undo-tree-id10188 . -565) (undo-tree-id10189 . -565) (undo-tree-id10190 . -562) (undo-tree-id10191 . -562) (undo-tree-id10192 . -562) (undo-tree-id10193 . -562) (undo-tree-id10194 . -562) (undo-tree-id10195 . -562) (undo-tree-id10196 . -562) (undo-tree-id10197 . -562) (undo-tree-id10198 . -562) (undo-tree-id10199 . -562) (undo-tree-id10200 . -562) (undo-tree-id10201 . -562) (undo-tree-id10202 . -562) (undo-tree-id10203 . -562) (undo-tree-id10204 . -562) (undo-tree-id10205 . -509) (undo-tree-id10206 . -509) (undo-tree-id10207 . -509) (undo-tree-id10208 . -509) (undo-tree-id10209 . -509) (undo-tree-id10210 . -509) (undo-tree-id10211 . -509) (undo-tree-id10212 . -509) (undo-tree-id10213 . -441) (undo-tree-id10214 . -441) (undo-tree-id10215 . -441) (undo-tree-id10216 . -441) (undo-tree-id10217 . -441) (undo-tree-id10218 . -441) (undo-tree-id10219 . -441) (undo-tree-id10220 . -441) (undo-tree-id10221 . -417) (undo-tree-id10222 . -417) (undo-tree-id10223 . -417) (undo-tree-id10224 . -417) (undo-tree-id10225 . -417) (undo-tree-id10226 . -417) (undo-tree-id10227 . -417) (undo-tree-id10228 . -417) (undo-tree-id10229 . -350) (undo-tree-id10230 . -350) (undo-tree-id10231 . -350) (undo-tree-id10232 . -350) (undo-tree-id10233 . -350) (undo-tree-id10234 . -350) (undo-tree-id10235 . -350) (undo-tree-id10236 . -350) (undo-tree-id10237 . -350) (undo-tree-id10238 . -350) (undo-tree-id10239 . -350) (undo-tree-id10240 . -350) (undo-tree-id10241 . -350) (undo-tree-id10242 . -350) (undo-tree-id10243 . -350) (undo-tree-id10244 . -316) (undo-tree-id10245 . -316) (undo-tree-id10246 . -316) (undo-tree-id10247 . -316) (undo-tree-id10248 . -316) (undo-tree-id10249 . -316) (undo-tree-id10250 . -316) (undo-tree-id10251 . -316) (undo-tree-id10252 . -278) (undo-tree-id10253 . -278) (undo-tree-id10254 . -278) (undo-tree-id10255 . -278) (undo-tree-id10256 . -278) (undo-tree-id10257 . -278) (undo-tree-id10258 . -278) (undo-tree-id10259 . -278) (undo-tree-id10260 . -205) (undo-tree-id10261 . -205) (undo-tree-id10262 . -205) (undo-tree-id10263 . -205) (undo-tree-id10264 . -205) (undo-tree-id10265 . -205) (undo-tree-id10266 . -205) (undo-tree-id10267 . -205) (undo-tree-id10268 . -205) (undo-tree-id10269 . -205) (undo-tree-id10270 . -205) (undo-tree-id10271 . -205) 18279) nil (25758 51840 811249 366000) 0 nil])
([nil nil ((18653 . 18654) (#("However, t" 0 10 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18653) (undo-tree-id10472 . -9) (undo-tree-id10473 . -9) (undo-tree-id10474 . -9) (undo-tree-id10475 . -10) (undo-tree-id10476 . -9) (undo-tree-id10477 . -6) (undo-tree-id10478 . -6) (undo-tree-id10479 . -6) (undo-tree-id10480 . -6) (undo-tree-id10481 . -6) (undo-tree-id10482 . -6) (undo-tree-id10483 . -6) (undo-tree-id10484 . -6) (undo-tree-id10485 . -7) (undo-tree-id10486 . -7) (undo-tree-id10487 . -7) (undo-tree-id10488 . -7) (undo-tree-id10489 . -7) (undo-tree-id10490 . -7) (undo-tree-id10491 . -7) (undo-tree-id10492 . -7) (undo-tree-id10493 . -10) (undo-tree-id10494 . -10) (undo-tree-id10495 . -10) (undo-tree-id10496 . -10) (undo-tree-id10497 . -10) (undo-tree-id10498 . -10) (undo-tree-id10499 . -10) (undo-tree-id10500 . -10) (undo-tree-id10501 . -9) (undo-tree-id10502 . -9) (undo-tree-id10503 . -9) (undo-tree-id10504 . -9) (undo-tree-id10505 . -9) (undo-tree-id10506 . -9) (undo-tree-id10507 . -9) (undo-tree-id10508 . -9) (undo-tree-id10509 . -9) (undo-tree-id10510 . -10) (undo-tree-id10511 . -10) (undo-tree-id10512 . -10) 18662 (t 25758 51840 842270 156000)) nil (25758 51892 808858 373000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18722) (undo-tree-id10332 . -1) (undo-tree-id10333 . -1) (undo-tree-id10334 . -1) (undo-tree-id10335 . -1) (undo-tree-id10336 . -1) (undo-tree-id10337 . -1) (undo-tree-id10338 . -1) (undo-tree-id10339 . -1) (undo-tree-id10340 . -1) (undo-tree-id10341 . -1) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (undo-tree-id10347 . -1) (undo-tree-id10348 . -1) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) (undo-tree-id10351 . -1) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) (undo-tree-id10358 . -1) (undo-tree-id10359 . -1) (undo-tree-id10360 . -1) (undo-tree-id10361 . -1) (undo-tree-id10362 . -1) (undo-tree-id10363 . -1) (undo-tree-id10364 . -1) (undo-tree-id10365 . -1) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) (undo-tree-id10394 . -1) (undo-tree-id10395 . -1) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1) (undo-tree-id10398 . -1) (undo-tree-id10399 . -1) (undo-tree-id10400 . -1) (undo-tree-id10401 . -1) (undo-tree-id10402 . -1) (undo-tree-id10403 . -1) (undo-tree-id10404 . -1) (undo-tree-id10405 . -1) (undo-tree-id10406 . -1) (undo-tree-id10407 . -1) (undo-tree-id10408 . -1) (undo-tree-id10409 . -1) (undo-tree-id10410 . -1) (undo-tree-id10411 . -1) (undo-tree-id10412 . -1) (undo-tree-id10413 . -1) (undo-tree-id10414 . -1) (undo-tree-id10415 . -1) (undo-tree-id10416 . -1) (undo-tree-id10417 . -1) (undo-tree-id10418 . -1) (undo-tree-id10419 . -1) (undo-tree-id10420 . -1) (undo-tree-id10421 . -1) (undo-tree-id10422 . -1) (undo-tree-id10423 . -1) (undo-tree-id10424 . -1) (#("h" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18723) (undo-tree-id10425 . -1) (undo-tree-id10426 . -1) (undo-tree-id10427 . -1) (undo-tree-id10428 . -1) (undo-tree-id10429 . -1) (undo-tree-id10430 . -1) (undo-tree-id10431 . -1) (undo-tree-id10432 . -1) (undo-tree-id10433 . -1) (undo-tree-id10434 . -1) (undo-tree-id10435 . -1) (undo-tree-id10436 . -1) (undo-tree-id10437 . -1) (undo-tree-id10438 . -1) (undo-tree-id10439 . -1) (undo-tree-id10440 . -1) (undo-tree-id10441 . -1) (undo-tree-id10442 . -1) (undo-tree-id10443 . -1) (undo-tree-id10444 . -1) (undo-tree-id10445 . -1) (undo-tree-id10446 . -1) (undo-tree-id10447 . -1) (undo-tree-id10448 . -1) (undo-tree-id10449 . -1) (undo-tree-id10450 . -1) (undo-tree-id10451 . -1) (undo-tree-id10452 . -1) (undo-tree-id10453 . -1) (undo-tree-id10454 . -1) (undo-tree-id10455 . -1) (undo-tree-id10456 . -1) (undo-tree-id10457 . -1) (undo-tree-id10458 . -1) (undo-tree-id10459 . -1) (undo-tree-id10460 . -1) (undo-tree-id10461 . -1) (undo-tree-id10462 . -1) (undo-tree-id10463 . -1) (undo-tree-id10464 . -1) 18724 (18723 . 18724) (#("(see Chapter 19)" 0 16 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18723) (undo-tree-id10465 . -15) (undo-tree-id10466 . 16) (undo-tree-id10467 . -1) (undo-tree-id10468 . 1) (undo-tree-id10469 . -16) (undo-tree-id10470 . -16) (undo-tree-id10471 . -16)) nil (25758 51893 548138 499000) 0 nil])
([nil nil ((#("(the RNN
layer is mostly useful when you define custom cells, as we did earlier)" 0 9 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 9 80 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18765) (undo-tree-id10535 . -79) (undo-tree-id10536 . -80) 18727) nil (25758 51899 478674 663000) 0 nil] [nil nil ((#("(the RNN
layer is mostly useful when you define custom cells, as we did earlier)" 0 9 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 9 80 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18765) (undo-tree-id10330 . -79) (undo-tree-id10331 . -80) 18727) ((18765 . 18845)) (25758 51892 809078 647000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18764) (undo-tree-id10513 . -1) (undo-tree-id10514 . -1) (undo-tree-id10515 . -1) (undo-tree-id10516 . -1) (undo-tree-id10517 . -1) (undo-tree-id10518 . -1) (undo-tree-id10519 . -1) (undo-tree-id10520 . -1) (undo-tree-id10521 . -1) (undo-tree-id10522 . -1) (undo-tree-id10523 . -1) (undo-tree-id10524 . -1) (undo-tree-id10525 . -1) (undo-tree-id10526 . -1) (undo-tree-id10527 . -1) (undo-tree-id10528 . -1) (undo-tree-id10529 . -1) (undo-tree-id10530 . -1) (undo-tree-id10531 . -1) (undo-tree-id10532 . -1) (undo-tree-id10533 . -1) (undo-tree-id10534 . -1)) nil (25758 51899 478668 235000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18764) (undo-tree-id10318 . -1) (undo-tree-id10319 . -1) (undo-tree-id10320 . -1) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -1) (undo-tree-id10324 . -1) (undo-tree-id10325 . -1) (undo-tree-id10326 . -1) (undo-tree-id10327 . -1) (undo-tree-id10328 . -1) (undo-tree-id10329 . -1)) ((18764 . 18765)) (25758 51892 808617 430000) 0 nil])
([nil nil ((18766 . 18767) (#("So how does an LSTM cell work? " 0 31 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18766) (undo-tree-id10537 . -30) (undo-tree-id10538 . -30) (undo-tree-id10539 . -30) (undo-tree-id10540 . -1) (undo-tree-id10541 . -5) (undo-tree-id10542 . -10) (undo-tree-id10543 . -13) (undo-tree-id10544 . -18) (undo-tree-id10545 . -18) (undo-tree-id10546 . -18) (undo-tree-id10547 . -18) (undo-tree-id10548 . -18) (undo-tree-id10549 . -18) (undo-tree-id10550 . -18) (undo-tree-id10551 . -18) (undo-tree-id10552 . -15) (undo-tree-id10553 . -12) (undo-tree-id10554 . -7) (undo-tree-id10555 . -3) (undo-tree-id10556 . -31) (undo-tree-id10557 . -30) (undo-tree-id10558 . -1) (undo-tree-id10559 . -1) (undo-tree-id10560 . -1) (undo-tree-id10561 . -1) (undo-tree-id10562 . -1) (undo-tree-id10563 . -1) (undo-tree-id10564 . -1) (undo-tree-id10565 . -1) (undo-tree-id10566 . -5) (undo-tree-id10567 . -5) (undo-tree-id10568 . -5) (undo-tree-id10569 . -5) (undo-tree-id10570 . -5) (undo-tree-id10571 . -5) (undo-tree-id10572 . -5) (undo-tree-id10573 . -5) (undo-tree-id10574 . -10) (undo-tree-id10575 . -10) (undo-tree-id10576 . -10) (undo-tree-id10577 . -10) (undo-tree-id10578 . -10) (undo-tree-id10579 . -10) (undo-tree-id10580 . -10) (undo-tree-id10581 . -10) (undo-tree-id10582 . -13) (undo-tree-id10583 . -13) (undo-tree-id10584 . -13) (undo-tree-id10585 . -13) (undo-tree-id10586 . -13) (undo-tree-id10587 . -13) (undo-tree-id10588 . -13) (undo-tree-id10589 . -13) (undo-tree-id10590 . 16) (undo-tree-id10591 . -19) (undo-tree-id10592 . -18) (undo-tree-id10593 . -18) (undo-tree-id10594 . -18) (undo-tree-id10595 . -18) (undo-tree-id10596 . -18) (undo-tree-id10597 . -18) (undo-tree-id10598 . -18) (undo-tree-id10599 . -18) (undo-tree-id10600 . -23) (undo-tree-id10601 . -23) (undo-tree-id10602 . -23) (undo-tree-id10603 . -23) (undo-tree-id10604 . -23) (undo-tree-id10605 . -23) (undo-tree-id10606 . -23) (undo-tree-id10607 . -23) (undo-tree-id10608 . -28) (undo-tree-id10609 . -28) (undo-tree-id10610 . -28) (undo-tree-id10611 . -28) (undo-tree-id10612 . -28) (undo-tree-id10613 . -28) (undo-tree-id10614 . -28) (undo-tree-id10615 . -28) (undo-tree-id10616 . -29) (undo-tree-id10617 . -29) (undo-tree-id10618 . -29) (undo-tree-id10619 . -29) (undo-tree-id10620 . -29) (undo-tree-id10621 . -29) (undo-tree-id10622 . -29) (undo-tree-id10623 . -29) (undo-tree-id10624 . -30) (undo-tree-id10625 . -30) (undo-tree-id10626 . -30) (undo-tree-id10627 . -30) (undo-tree-id10628 . -30) (undo-tree-id10629 . -30) (undo-tree-id10630 . -30) (undo-tree-id10631 . -30) (undo-tree-id10632 . -30) (undo-tree-id10633 . -31) (undo-tree-id10634 . -31) (undo-tree-id10635 . -31) 18796 (t 25758 51899 509977 486000)) nil (25758 51922 275804 128000) 0 nil])
nil
([nil nil ((#("Its architecture is shown in Figure 15-9.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 42 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18767) (undo-tree-id10636 . -41) (undo-tree-id10637 . 42) (undo-tree-id10638 . 42) (undo-tree-id10639 . -42) (t 25758 51922 311348 817000)) nil (25758 51925 516939 259000) 0 nil])
([nil nil ((#("If you don’t look at what’s inside the box" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 42 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18767) (undo-tree-id10644 . -41) (undo-tree-id10645 . 42) (undo-tree-id10646 . 42) (undo-tree-id10647 . -42) (t 25758 51925 551540 702000)) nil (25758 51932 425475 727000) 0 nil])
([nil nil ((#(", " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18767) (undo-tree-id10640 . -1) (undo-tree-id10641 . 2) (undo-tree-id10642 . 2) (undo-tree-id10643 . -2)) nil (25758 51932 425468 659000) 0 nil])
([nil nil ((18794 . 18795) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18794) (undo-tree-id10648 . -1) (undo-tree-id10649 . -1) (undo-tree-id10650 . -1) (undo-tree-id10651 . -1) (undo-tree-id10652 . -1) (undo-tree-id10653 . -1) (undo-tree-id10654 . -1) (undo-tree-id10655 . -1) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1) (undo-tree-id10658 . -1) (undo-tree-id10659 . -1) (undo-tree-id10660 . -1) (undo-tree-id10661 . -1) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1) 18786 (t 25758 51932 455947 158000)) nil (25758 51956 179718 673000) 0 nil])
([nil nil ((18866 . 18867)) nil (25758 51956 179920 282000) 0 nil])
([nil nil ((18877 . 18878)) nil (25758 51961 168745 423000) 0 nil] [nil nil ((18877 . 18878)) ((#("_" 0 1 (invisible t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18877) (undo-tree-id10664 . -1)) (25758 51956 179464 731000) 0 nil])
([nil nil ((18876 . 18877)) nil (25758 51961 168744 49000) 0 nil])
nil
([nil nil ((#("_" 0 1 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18878) (undo-tree-id10665 . -1) (undo-tree-id10666 . -1) (undo-tree-id10667 . -1) (undo-tree-id10668 . -1)) nil (25758 51961 168739 778000) 0 nil])
([nil nil ((18767 . 18768) (#("t" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18767) (t 25758 51961 245607 255000)) nil (25758 51981 167563 496000) 0 nil])
([nil nil ((18882 . 18883) (#("“" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18882) (undo-tree-id10670 . -1) (undo-tree-id10671 . -1) (undo-tree-id10672 . -1) (undo-tree-id10673 . -1) (undo-tree-id10674 . -1) (undo-tree-id10675 . -1) (undo-tree-id10676 . -1) (undo-tree-id10677 . -1) (undo-tree-id10678 . -1) (undo-tree-id10679 . -1) (undo-tree-id10680 . -1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1) (undo-tree-id10683 . -1) (undo-tree-id10684 . -1) (undo-tree-id10685 . -1) (undo-tree-id10686 . -1) (undo-tree-id10687 . -1) (undo-tree-id10688 . -1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1) (undo-tree-id10691 . -1) (undo-tree-id10692 . -1)) nil (25758 51981 167561 257000) 0 nil])
([nil nil ((18884 . 18885) (#("”" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18884) (undo-tree-id10669 . -1)) nil (25758 51981 167539 639000) 0 nil])
([nil nil ((#("(\"c\" stands for “cell”)" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 2 3 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 3 4 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 4 23 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18881) (undo-tree-id10697 . -22) (undo-tree-id10698 . -22) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) (undo-tree-id10721 . -3) (undo-tree-id10722 . -22) (undo-tree-id10723 . -3) (undo-tree-id10724 . -3) (undo-tree-id10725 . -3) (undo-tree-id10726 . -3) (undo-tree-id10727 . -3) (undo-tree-id10728 . -3) (undo-tree-id10729 . -3) (undo-tree-id10730 . -3) (undo-tree-id10731 . -3) (undo-tree-id10732 . -3) (undo-tree-id10733 . -3) (undo-tree-id10734 . -3) (undo-tree-id10735 . -3) (undo-tree-id10736 . -3) (undo-tree-id10737 . -3) (undo-tree-id10738 . -3) (undo-tree-id10739 . -3) (undo-tree-id10740 . -3) (undo-tree-id10741 . -3) (undo-tree-id10742 . -3) (undo-tree-id10743 . -3) (undo-tree-id10744 . -3) (undo-tree-id10745 . -3) (undo-tree-id10746 . -3) (undo-tree-id10747 . -3) (undo-tree-id10748 . -3) (undo-tree-id10749 . -3) (undo-tree-id10750 . -3) (undo-tree-id10751 . -3) (undo-tree-id10752 . -3) (undo-tree-id10753 . -3) (undo-tree-id10754 . -3) (undo-tree-id10755 . -5) (undo-tree-id10756 . -5) (undo-tree-id10757 . -5) (undo-tree-id10758 . -5) (undo-tree-id10759 . -5) (undo-tree-id10760 . -5) (undo-tree-id10761 . -5) (undo-tree-id10762 . -5) (undo-tree-id10763 . -5) (undo-tree-id10764 . -5) (undo-tree-id10765 . -5) (undo-tree-id10766 . -5) (undo-tree-id10767 . -5) (undo-tree-id10768 . -5) (undo-tree-id10769 . -5) (undo-tree-id10770 . -5) (undo-tree-id10771 . -5) (undo-tree-id10772 . -5) (undo-tree-id10773 . -5) (undo-tree-id10774 . -5) (undo-tree-id10775 . -5) (undo-tree-id10776 . -5) (undo-tree-id10777 . -12) (undo-tree-id10778 . -12) (undo-tree-id10779 . -12) (undo-tree-id10780 . -12) (undo-tree-id10781 . -12) (undo-tree-id10782 . -12) (undo-tree-id10783 . -12) (undo-tree-id10784 . -12) (undo-tree-id10785 . -12) (undo-tree-id10786 . -12) (undo-tree-id10787 . -12) (undo-tree-id10788 . -12) (undo-tree-id10789 . -12) (undo-tree-id10790 . -12) (undo-tree-id10791 . -12) (undo-tree-id10792 . -16) (undo-tree-id10793 . -16) (undo-tree-id10794 . -16) (undo-tree-id10795 . -16) (undo-tree-id10796 . -16) (undo-tree-id10797 . -16) (undo-tree-id10798 . -16) (undo-tree-id10799 . -16) (undo-tree-id10800 . -16) (undo-tree-id10801 . -16) (undo-tree-id10802 . -16) (undo-tree-id10803 . -16) (undo-tree-id10804 . -16) (undo-tree-id10805 . -16) (undo-tree-id10806 . -16) (undo-tree-id10807 . -12) (undo-tree-id10808 . -12) (undo-tree-id10809 . -12) (undo-tree-id10810 . -12) (undo-tree-id10811 . -12) (undo-tree-id10812 . -12) (undo-tree-id10813 . -12) (undo-tree-id10814 . -12) (undo-tree-id10815 . -12) (undo-tree-id10816 . -12) (undo-tree-id10817 . -12) (undo-tree-id10818 . -12) (undo-tree-id10819 . -12) (undo-tree-id10820 . -12) (undo-tree-id10821 . -12) (undo-tree-id10822 . -5) (undo-tree-id10823 . -5) (undo-tree-id10824 . -5) (undo-tree-id10825 . -5) (undo-tree-id10826 . -5) (undo-tree-id10827 . -5) (undo-tree-id10828 . -5) (undo-tree-id10829 . -5) (undo-tree-id10830 . -5) (undo-tree-id10831 . -5) (undo-tree-id10832 . -5) (undo-tree-id10833 . -5) (undo-tree-id10834 . -5) (undo-tree-id10835 . -5) (undo-tree-id10836 . -5) (undo-tree-id10837 . -3) (undo-tree-id10838 . -3) (undo-tree-id10839 . -3) (undo-tree-id10840 . -3) (undo-tree-id10841 . -3) (undo-tree-id10842 . -3) (undo-tree-id10843 . -3) (undo-tree-id10844 . -3) (undo-tree-id10845 . -3) (undo-tree-id10846 . -3) (undo-tree-id10847 . -3) (undo-tree-id10848 . -3) (undo-tree-id10849 . -3) (undo-tree-id10850 . -3) (undo-tree-id10851 . -3) (undo-tree-id10852 . -2) (undo-tree-id10853 . -2) (undo-tree-id10854 . -2) (undo-tree-id10855 . -2) (undo-tree-id10856 . -2) (undo-tree-id10857 . -2) (undo-tree-id10858 . -2) (undo-tree-id10859 . -2) (undo-tree-id10860 . -2) (undo-tree-id10861 . -2) (undo-tree-id10862 . -2) (undo-tree-id10863 . -2) (undo-tree-id10864 . -2) (undo-tree-id10865 . -2) (undo-tree-id10866 . -2) (undo-tree-id10867 . -2) (undo-tree-id10868 . -2) (undo-tree-id10869 . -2) (undo-tree-id10870 . -2) (undo-tree-id10871 . -2) (undo-tree-id10872 . -2) (undo-tree-id10873 . -2) (undo-tree-id10874 . -23) (undo-tree-id10875 . -22) (undo-tree-id10876 . -1) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -2) (undo-tree-id10899 . -2) (undo-tree-id10900 . -2) (undo-tree-id10901 . -2) (undo-tree-id10902 . -2) (undo-tree-id10903 . -2) (undo-tree-id10904 . -2) (undo-tree-id10905 . -2) (undo-tree-id10906 . -2) (undo-tree-id10907 . -2) (undo-tree-id10908 . -2) (undo-tree-id10909 . -2) (undo-tree-id10910 . -2) (undo-tree-id10911 . -2) (undo-tree-id10912 . -2) (undo-tree-id10913 . -2) (undo-tree-id10914 . -2) (undo-tree-id10915 . -2) (undo-tree-id10916 . -2) (undo-tree-id10917 . -2) (undo-tree-id10918 . -2) (undo-tree-id10919 . -2) (undo-tree-id10920 . -3) (undo-tree-id10921 . -3) (undo-tree-id10922 . -3) (undo-tree-id10923 . -3) (undo-tree-id10924 . -3) (undo-tree-id10925 . -3) (undo-tree-id10926 . -3) (undo-tree-id10927 . -3) (undo-tree-id10928 . -3) (undo-tree-id10929 . -3) (undo-tree-id10930 . -3) (undo-tree-id10931 . -3) (undo-tree-id10932 . -3) (undo-tree-id10933 . -3) (undo-tree-id10934 . -3) (undo-tree-id10935 . -3) (undo-tree-id10936 . -3) (undo-tree-id10937 . -3) (undo-tree-id10938 . -3) (undo-tree-id10939 . -3) (undo-tree-id10940 . -3) (undo-tree-id10941 . -3) (undo-tree-id10942 . -10) (undo-tree-id10943 . -10) (undo-tree-id10944 . -10) (undo-tree-id10945 . -10) (undo-tree-id10946 . -10) (undo-tree-id10947 . -10) (undo-tree-id10948 . -10) (undo-tree-id10949 . -10) (undo-tree-id10950 . -10) (undo-tree-id10951 . -10) (undo-tree-id10952 . -10) (undo-tree-id10953 . -10) (undo-tree-id10954 . -10) (undo-tree-id10955 . -10) (undo-tree-id10956 . -10) (undo-tree-id10957 . -10) (undo-tree-id10958 . -10) (undo-tree-id10959 . -10) (undo-tree-id10960 . -10) (undo-tree-id10961 . -10) (undo-tree-id10962 . -10) (undo-tree-id10963 . -10) (undo-tree-id10964 . -10) (undo-tree-id10965 . -10) (undo-tree-id10966 . -10) (undo-tree-id10967 . -10) (undo-tree-id10968 . -10) (undo-tree-id10969 . -10) (undo-tree-id10970 . -10) (undo-tree-id10971 . -14) (undo-tree-id10972 . -14) (undo-tree-id10973 . -14) (undo-tree-id10974 . -14) (undo-tree-id10975 . -14) (undo-tree-id10976 . -14) (undo-tree-id10977 . -14) (undo-tree-id10978 . -14) (undo-tree-id10979 . -14) (undo-tree-id10980 . -14) (undo-tree-id10981 . -14) (undo-tree-id10982 . -14) (undo-tree-id10983 . -14) (undo-tree-id10984 . -14) (undo-tree-id10985 . -14) (undo-tree-id10986 . -14) (undo-tree-id10987 . -14) (undo-tree-id10988 . -14) (undo-tree-id10989 . -14) (undo-tree-id10990 . -14) (undo-tree-id10991 . -14) (undo-tree-id10992 . -14) (undo-tree-id10993 . -16) (undo-tree-id10994 . -16) (undo-tree-id10995 . -16) (undo-tree-id10996 . -16) (undo-tree-id10997 . -16) (undo-tree-id10998 . -16) (undo-tree-id10999 . -16) (undo-tree-id11000 . -16) (undo-tree-id11001 . -16) (undo-tree-id11002 . -16) (undo-tree-id11003 . -16) (undo-tree-id11004 . -16) (undo-tree-id11005 . -16) (undo-tree-id11006 . -16) (undo-tree-id11007 . -16) (undo-tree-id11008 . -16) (undo-tree-id11009 . -16) (undo-tree-id11010 . -16) (undo-tree-id11011 . -16) (undo-tree-id11012 . -16) (undo-tree-id11013 . -16) (undo-tree-id11014 . -16) (undo-tree-id11015 . -16) (undo-tree-id11016 . -16) (undo-tree-id11017 . -16) (undo-tree-id11018 . -16) (undo-tree-id11019 . -16) (undo-tree-id11020 . -16) (undo-tree-id11021 . -16) (undo-tree-id11022 . -20) (undo-tree-id11023 . -20) (undo-tree-id11024 . -20) (undo-tree-id11025 . -20) (undo-tree-id11026 . -20) (undo-tree-id11027 . -20) (undo-tree-id11028 . -20) (undo-tree-id11029 . -20) (undo-tree-id11030 . -20) (undo-tree-id11031 . -20) (undo-tree-id11032 . -20) (undo-tree-id11033 . -20) (undo-tree-id11034 . -20) (undo-tree-id11035 . -20) (undo-tree-id11036 . -20) (undo-tree-id11037 . -20) (undo-tree-id11038 . -20) (undo-tree-id11039 . -20) (undo-tree-id11040 . -20) (undo-tree-id11041 . -20) (undo-tree-id11042 . -20) (undo-tree-id11043 . -20) (undo-tree-id11044 . -20) (undo-tree-id11045 . -20) (undo-tree-id11046 . -20) (undo-tree-id11047 . -20) (undo-tree-id11048 . -20) (undo-tree-id11049 . -20) (undo-tree-id11050 . -20) (undo-tree-id11051 . -23) (undo-tree-id11052 . -23) (undo-tree-id11053 . -23) (undo-tree-id11054 . -23) (undo-tree-id11055 . -23) (undo-tree-id11056 . -23) (undo-tree-id11057 . -23) (undo-tree-id11058 . -23) (undo-tree-id11059 . -23) (undo-tree-id11060 . -23) (undo-tree-id11061 . -23) (undo-tree-id11062 . -23) (undo-tree-id11063 . -23) (undo-tree-id11064 . -23) (undo-tree-id11065 . -23) (undo-tree-id11066 . -23) (undo-tree-id11067 . -23) (undo-tree-id11068 . -23) (undo-tree-id11069 . -23) (undo-tree-id11070 . -23) (undo-tree-id11071 . -23) (undo-tree-id11072 . -23) (undo-tree-id11073 . -23) (undo-tree-id11074 . -23) (undo-tree-id11075 . -23) (undo-tree-id11076 . -23) (undo-tree-id11077 . -23) (undo-tree-id11078 . -23) (undo-tree-id11079 . -23) (undo-tree-id11080 . -22) (undo-tree-id11081 . -22) (undo-tree-id11082 . -22) (undo-tree-id11083 . -22) (undo-tree-id11084 . -22) (undo-tree-id11085 . -22) (undo-tree-id11086 . -22) (undo-tree-id11087 . -22) (undo-tree-id11088 . -22) (undo-tree-id11089 . -22) (undo-tree-id11090 . -22) (undo-tree-id11091 . -22) (undo-tree-id11092 . -22) (undo-tree-id11093 . -22) (undo-tree-id11094 . 1) (undo-tree-id11095 . -23) (undo-tree-id11096 . 23) (undo-tree-id11097 . -1) (undo-tree-id11098 . -22) (undo-tree-id11099 . -22) (undo-tree-id11100 . -22) (undo-tree-id11101 . -22) (undo-tree-id11102 . -22) (undo-tree-id11103 . -22) (undo-tree-id11104 . -22) (undo-tree-id11105 . -22) (undo-tree-id11106 . -22) (undo-tree-id11107 . -23) 18903 (t 25758 51981 246728 775000)) nil (25758 51999 200431 37000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18881) (undo-tree-id10694 . -1) (undo-tree-id10695 . 2) (undo-tree-id10696 . -2)) nil (25758 51999 199885 565000) 0 nil])
([nil nil ((18935 . 18936) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18935) (undo-tree-id10693 . -1) 18881) nil (25758 51999 199878 239000) 0 nil])
([nil nil ((18880 . 18881) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18880) (undo-tree-id11137 . -1) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1) (undo-tree-id11142 . -1) (undo-tree-id11143 . -1) (undo-tree-id11144 . -1) (undo-tree-id11145 . -1) (undo-tree-id11146 . -1) (undo-tree-id11147 . -1) (undo-tree-id11148 . -1) (undo-tree-id11149 . -1) (undo-tree-id11150 . -1) (undo-tree-id11151 . -1) (undo-tree-id11152 . -1) (undo-tree-id11153 . -1) (undo-tree-id11154 . -1) (undo-tree-id11155 . -1) (undo-tree-id11156 . -1) (undo-tree-id11157 . -1) (undo-tree-id11158 . -1) (undo-tree-id11159 . -1) (undo-tree-id11160 . -1) (undo-tree-id11161 . -1) (undo-tree-id11162 . -1) (undo-tree-id11163 . -1) (undo-tree-id11164 . -1) (undo-tree-id11165 . -1) (undo-tree-id11166 . -1) (undo-tree-id11167 . -1) (undo-tree-id11168 . -1) (undo-tree-id11169 . -1) (undo-tree-id11170 . -1) (undo-tree-id11171 . -1) (undo-tree-id11172 . -1) (undo-tree-id11173 . -1) (undo-tree-id11174 . -1) (undo-tree-id11175 . -1) (undo-tree-id11176 . -1) (undo-tree-id11177 . -1) (undo-tree-id11178 . -1) (undo-tree-id11179 . -1) (undo-tree-id11180 . -1) (undo-tree-id11181 . -1) (undo-tree-id11182 . -1) (undo-tree-id11183 . -1) (undo-tree-id11184 . -1) (undo-tree-id11185 . -1) (undo-tree-id11186 . -1) (undo-tree-id11187 . -1) (undo-tree-id11188 . -1) (undo-tree-id11189 . -1) (undo-tree-id11190 . -1) (undo-tree-id11191 . -1) (undo-tree-id11192 . -1) (undo-tree-id11193 . -1) (undo-tree-id11194 . -1) (undo-tree-id11195 . -1) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) (undo-tree-id11198 . -1) (undo-tree-id11199 . -1) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (undo-tree-id11231 . -1) (undo-tree-id11232 . -1) (undo-tree-id11233 . -1) (undo-tree-id11234 . -1) (undo-tree-id11235 . -1) (undo-tree-id11236 . -1) (undo-tree-id11237 . -1) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) (undo-tree-id11282 . -1) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (undo-tree-id11292 . -1) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) (undo-tree-id11300 . -1) (undo-tree-id11301 . -1) (undo-tree-id11302 . -1) (undo-tree-id11303 . -1) (undo-tree-id11304 . -1) (undo-tree-id11305 . -1) (undo-tree-id11306 . -1) (undo-tree-id11307 . -1) (undo-tree-id11308 . -1) (undo-tree-id11309 . -1) (undo-tree-id11310 . -1) (undo-tree-id11311 . -1) (undo-tree-id11312 . -1) (undo-tree-id11313 . -1) (undo-tree-id11314 . -1) (undo-tree-id11315 . -1) (undo-tree-id11316 . -1) (undo-tree-id11317 . -1) (undo-tree-id11318 . -1) (undo-tree-id11319 . -1) (undo-tree-id11320 . -1) (undo-tree-id11321 . -1) (undo-tree-id11322 . -1) (undo-tree-id11323 . -1) (undo-tree-id11324 . -1) (undo-tree-id11325 . -1) (undo-tree-id11326 . -1) (undo-tree-id11327 . -1) (undo-tree-id11328 . -1) (undo-tree-id11329 . -1) (undo-tree-id11330 . -1) (undo-tree-id11331 . -1) (undo-tree-id11332 . -1) (undo-tree-id11333 . -1) (undo-tree-id11334 . -1) (undo-tree-id11335 . -1) (undo-tree-id11336 . -1) (undo-tree-id11337 . -1) (undo-tree-id11338 . -1) (undo-tree-id11339 . -1) (undo-tree-id11340 . -1) (undo-tree-id11341 . -1) (undo-tree-id11342 . -1) (undo-tree-id11343 . -1) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1) (undo-tree-id11358 . -1) (undo-tree-id11359 . -1) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (undo-tree-id11364 . -1) (undo-tree-id11365 . -1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -1) (undo-tree-id11369 . -1) (undo-tree-id11370 . -1) (undo-tree-id11371 . -1) (undo-tree-id11372 . -1) (undo-tree-id11373 . -1) (undo-tree-id11374 . -1) (undo-tree-id11375 . -1) (undo-tree-id11376 . -1) (undo-tree-id11377 . -1) (undo-tree-id11378 . -1) (undo-tree-id11379 . -1) (undo-tree-id11380 . -1) (undo-tree-id11381 . -1) (undo-tree-id11382 . -1) (undo-tree-id11383 . -1) (undo-tree-id11384 . -1) (undo-tree-id11385 . -1) (undo-tree-id11386 . -1) (undo-tree-id11387 . -1) (undo-tree-id11388 . -1) (undo-tree-id11389 . -1) (undo-tree-id11390 . -1) (undo-tree-id11391 . -1) (undo-tree-id11392 . -1) (undo-tree-id11393 . -1) (undo-tree-id11394 . -1) (undo-tree-id11395 . -1) (undo-tree-id11396 . -1) (undo-tree-id11397 . -1) (undo-tree-id11398 . -1) (undo-tree-id11399 . -1) (undo-tree-id11400 . -1) (undo-tree-id11401 . -1) (undo-tree-id11402 . -1) (undo-tree-id11403 . -1) (undo-tree-id11404 . -1) (undo-tree-id11405 . -1) (undo-tree-id11406 . -1) (undo-tree-id11407 . -1) (undo-tree-id11408 . -1) (undo-tree-id11409 . -1) (undo-tree-id11410 . -1) (undo-tree-id11411 . -1) (undo-tree-id11412 . -1) (undo-tree-id11413 . -1) (undo-tree-id11414 . -1) (undo-tree-id11415 . -1) (undo-tree-id11416 . -1) (undo-tree-id11417 . -1) (undo-tree-id11418 . -1) (undo-tree-id11419 . -1) (undo-tree-id11420 . -1) (undo-tree-id11421 . -1) (undo-tree-id11422 . -1) (undo-tree-id11423 . -1) (undo-tree-id11424 . -1) (undo-tree-id11425 . -1) (undo-tree-id11426 . -1) (undo-tree-id11427 . -1) (undo-tree-id11428 . -1) (undo-tree-id11429 . -1) (undo-tree-id11430 . -1) (undo-tree-id11431 . -1) (undo-tree-id11432 . -1) (undo-tree-id11433 . -1) (undo-tree-id11434 . -1) (undo-tree-id11435 . -1) (undo-tree-id11436 . -1) (undo-tree-id11437 . -1) (undo-tree-id11438 . -1) (undo-tree-id11439 . -1) (undo-tree-id11440 . -1) (undo-tree-id11441 . -1) (undo-tree-id11442 . -1) (undo-tree-id11443 . -1) (undo-tree-id11444 . -1) (undo-tree-id11445 . -1) (undo-tree-id11446 . -1) (undo-tree-id11447 . -1) (undo-tree-id11448 . -1) (undo-tree-id11449 . -1) (undo-tree-id11450 . -1) (undo-tree-id11451 . -1) (undo-tree-id11452 . -1) (undo-tree-id11453 . -1) (undo-tree-id11454 . -1) (undo-tree-id11455 . -1) (undo-tree-id11456 . -1) (undo-tree-id11457 . -1) (undo-tree-id11458 . -1) (undo-tree-id11459 . -1) (undo-tree-id11460 . -1) (undo-tree-id11461 . -1) (undo-tree-id11462 . -1) (undo-tree-id11463 . -1) (undo-tree-id11464 . -1) (undo-tree-id11465 . -1) (undo-tree-id11466 . -1) (undo-tree-id11467 . -1) (undo-tree-id11468 . -1) (undo-tree-id11469 . -1) (undo-tree-id11470 . -1) (undo-tree-id11471 . -1) (undo-tree-id11472 . -1) (undo-tree-id11473 . -1) (undo-tree-id11474 . -1) (undo-tree-id11475 . -1) (undo-tree-id11476 . -1) (undo-tree-id11477 . -1) (undo-tree-id11478 . -1) (undo-tree-id11479 . -1) (undo-tree-id11480 . -1) (undo-tree-id11481 . -1) (undo-tree-id11482 . -1) (undo-tree-id11483 . -1) (undo-tree-id11484 . -1) (undo-tree-id11485 . -1) (undo-tree-id11486 . -1) (undo-tree-id11487 . -1) (undo-tree-id11488 . -1) (undo-tree-id11489 . -1) (undo-tree-id11490 . -1) (undo-tree-id11491 . -1) (undo-tree-id11492 . -1) (undo-tree-id11493 . -1) (undo-tree-id11494 . -1) (undo-tree-id11495 . -1) (undo-tree-id11496 . -1) (undo-tree-id11497 . -1) (undo-tree-id11498 . -1) (undo-tree-id11499 . -1) (undo-tree-id11500 . -1) (undo-tree-id11501 . -1) (undo-tree-id11502 . -1) (undo-tree-id11503 . -1) (undo-tree-id11504 . -1) (undo-tree-id11505 . -1) (undo-tree-id11506 . -1) (undo-tree-id11507 . -1) (undo-tree-id11508 . -1) (undo-tree-id11509 . -1) (undo-tree-id11510 . -1) (undo-tree-id11511 . -1) (undo-tree-id11512 . -1) (undo-tree-id11513 . -1) (undo-tree-id11514 . -1) (undo-tree-id11515 . -1) (undo-tree-id11516 . -1) (undo-tree-id11517 . -1) (undo-tree-id11518 . -1) (undo-tree-id11519 . -1) (undo-tree-id11520 . -1) (undo-tree-id11521 . -1) (undo-tree-id11522 . -1) (undo-tree-id11523 . -1) (undo-tree-id11524 . -1) (undo-tree-id11525 . -1) (undo-tree-id11526 . -1) (undo-tree-id11527 . -1) (undo-tree-id11528 . -1) (undo-tree-id11529 . -1) (undo-tree-id11530 . -1) (undo-tree-id11531 . -1) (undo-tree-id11532 . -1) (undo-tree-id11533 . -1) (undo-tree-id11534 . -1) (undo-tree-id11535 . -1) (undo-tree-id11536 . -1) (undo-tree-id11537 . -1) (undo-tree-id11538 . -1) 18821 (t 25758 51999 235716 151000)) nil (25758 52011 510749 40000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18927) (nil fontified nil 18926 . 18927) (nil wrap-prefix #("    " 0 4 (face org-indent)) 18926 . 18927) (18926 . 18927) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18847) (nil fontified nil 18846 . 18847) (nil wrap-prefix #("    " 0 4 (face org-indent)) 18846 . 18847) (18846 . 18847) 18880) nil (25758 52011 509879 358000) 0 nil])
([nil nil ((18959 . 18960) 18927) nil (25758 52011 509877 403000) 0 nil])
([nil nil ((18841 . 18842)) nil (25758 52011 509876 224000) 0 nil])
([nil nil ((18927 . 18928) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -18927) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . -1) (undo-tree-id11117 . -1) (undo-tree-id11118 . -1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (18847 . 18848) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -18847) (undo-tree-id11127 . -1) (undo-tree-id11128 . -1) (undo-tree-id11129 . -1) (undo-tree-id11130 . -1) (undo-tree-id11131 . -1) (undo-tree-id11132 . -1) (undo-tree-id11133 . -1) (undo-tree-id11134 . -1) (undo-tree-id11135 . -1) (undo-tree-id11136 . -1) 18842) nil (25758 52011 509873 147000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -18922) (nil fontified nil 18921 . 18922) (nil wrap-prefix #("    " 0 4 (face org-indent)) 18921 . 18922) (18921 . 18922) 18927) nil (25758 52011 509797 147000) 0 nil])
([nil nil ((18961 . 18962) (18960 . 18961) (t 25758 52011 548380 700000) 18922) nil (25758 52014 221314 332000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20763 . 20764) (nil fontified nil 20729 . 20764) (nil fontified nil 20663 . 20729) (nil fontified nil 20597 . 20663) (nil fontified nil 20531 . 20597) (nil fontified nil 20467 . 20531) (nil fontified nil 20449 . 20467) (nil fontified nil 20381 . 20449) (nil fontified nil 20313 . 20381) (nil fontified nil 20243 . 20313) (nil fontified nil 20172 . 20243) (nil fontified nil 20108 . 20172) (nil fontified nil 20030 . 20108) (nil fontified nil 19953 . 20030) (nil fontified nil 19875 . 19953) (nil fontified nil 19851 . 19875) (nil fontified nil 19777 . 19851) (nil fontified nil 19700 . 19777) (nil fontified nil 19621 . 19700) (nil fontified nil 19550 . 19621) (nil fontified nil 19485 . 19550) (nil fontified nil 19407 . 19485) (nil fontified nil 19332 . 19407) (nil fontified nil 19263 . 19332) (nil fontified nil 19189 . 19263) (nil fontified nil 19113 . 19189) (nil fontified nil 19037 . 19113) (nil fontified nil 18962 . 19037) (18962 . 20764) (t 25758 52014 252525 452000)) nil (25758 52031 361011 723000) 0 nil])
([nil nil ((18969 . 18970) (#("’" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18969) (undo-tree-id11539 . -1) (t 25758 52031 393433 148000)) nil (25758 52040 764081 277000) 0 nil])
([nil nil ((#("Now let's open the box! " 0 7 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 7 8 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 8 24 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 18962) (undo-tree-id11540 . -23) (undo-tree-id11541 . -23) (undo-tree-id11542 . -7) (undo-tree-id11543 . -23) (undo-tree-id11544 . -7) (undo-tree-id11545 . -7) (undo-tree-id11546 . -7) (undo-tree-id11547 . -7) (undo-tree-id11548 . -7) (undo-tree-id11549 . -7) (undo-tree-id11550 . -7) (undo-tree-id11551 . -7) (undo-tree-id11552 . -7) (undo-tree-id11553 . -7) (undo-tree-id11554 . -7) (undo-tree-id11555 . -7) (undo-tree-id11556 . -7) (undo-tree-id11557 . -7) (undo-tree-id11558 . -7) (undo-tree-id11559 . -7) (undo-tree-id11560 . -7) (undo-tree-id11561 . -7) (undo-tree-id11562 . -24) (undo-tree-id11563 . -23) (undo-tree-id11564 . -2) (undo-tree-id11565 . -2) (undo-tree-id11566 . -2) (undo-tree-id11567 . -2) (undo-tree-id11568 . -2) (undo-tree-id11569 . -2) (undo-tree-id11570 . -2) (undo-tree-id11571 . -2) (undo-tree-id11572 . -8) (undo-tree-id11573 . -8) (undo-tree-id11574 . -8) (undo-tree-id11575 . -8) (undo-tree-id11576 . -8) (undo-tree-id11577 . -8) (undo-tree-id11578 . -8) (undo-tree-id11579 . -8) (undo-tree-id11580 . -13) (undo-tree-id11581 . -13) (undo-tree-id11582 . -13) (undo-tree-id11583 . -13) (undo-tree-id11584 . -13) (undo-tree-id11585 . -13) (undo-tree-id11586 . -13) (undo-tree-id11587 . -13) (undo-tree-id11588 . -17) (undo-tree-id11589 . -17) (undo-tree-id11590 . -17) (undo-tree-id11591 . -17) (undo-tree-id11592 . -17) (undo-tree-id11593 . -17) (undo-tree-id11594 . -17) (undo-tree-id11595 . -17) (undo-tree-id11596 . -21) (undo-tree-id11597 . -21) (undo-tree-id11598 . -21) (undo-tree-id11599 . -21) (undo-tree-id11600 . -21) (undo-tree-id11601 . -21) (undo-tree-id11602 . -21) (undo-tree-id11603 . -21) (undo-tree-id11604 . -22) (undo-tree-id11605 . -22) (undo-tree-id11606 . -22) (undo-tree-id11607 . -22) (undo-tree-id11608 . -22) (undo-tree-id11609 . -22) (undo-tree-id11610 . -22) (undo-tree-id11611 . -22) (undo-tree-id11612 . -23) (undo-tree-id11613 . -23) (undo-tree-id11614 . -23) (undo-tree-id11615 . -23) (undo-tree-id11616 . -23) (undo-tree-id11617 . -23) (undo-tree-id11618 . -23) (undo-tree-id11619 . -23) (undo-tree-id11620 . -23) (undo-tree-id11621 . -24) 18985 (t 25758 52040 797924 77000)) nil (25758 52046 734120 996000) 0 nil])
([nil nil ((19088 . 19089) (t 25758 52046 770233 291000) 19055) nil (25758 52085 134601 484000) 0 nil])
([nil nil ((18652 . 18653) (t 25758 52085 176175 991000) 18643) nil (25758 52099 868948 971000) 0 nil])
([nil nil ((19115 . 19116) (t 25758 52099 900900 613000)) nil (25758 52155 518027 714000) 0 nil])
([nil nil ((nil line-prefix #("    " 0 4 (face org-indent)) 19118 . 19119) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19118 . 19119) (nil fontified nil 19118 . 19119) (19118 . 19119) (#("–" 0 1 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19118) (undo-tree-id11694 . -1)) nil (25758 52155 518026 60000) 0 nil])
([nil nil ((#("(which
adds the memories that were selected by an input gate)" 0 7 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 7 61 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19304) (undo-tree-id11673 . -60) (undo-tree-id11674 . -1) (undo-tree-id11675 . -1) (undo-tree-id11676 . -1) (undo-tree-id11677 . -1) (undo-tree-id11678 . -1) (undo-tree-id11679 . -1) (undo-tree-id11680 . -1) (undo-tree-id11681 . -1) (undo-tree-id11682 . -1) (undo-tree-id11683 . -1) (undo-tree-id11684 . -1) (undo-tree-id11685 . -1) (undo-tree-id11686 . -1) (undo-tree-id11687 . -1) (undo-tree-id11688 . -1) (undo-tree-id11689 . -1) (undo-tree-id11690 . -1) (undo-tree-id11691 . -1) (undo-tree-id11692 . -1) (undo-tree-id11693 . -61) 19305) nil (25758 52155 518022 919000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19303) (undo-tree-id11622 . -1) (undo-tree-id11623 . -1) (undo-tree-id11624 . -1) (undo-tree-id11625 . -1) (undo-tree-id11626 . -1) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) (undo-tree-id11631 . -1) (undo-tree-id11632 . -1) (undo-tree-id11633 . -1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -1) (undo-tree-id11637 . -1) (undo-tree-id11638 . -1) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) (undo-tree-id11645 . -1) (undo-tree-id11646 . -1) (undo-tree-id11647 . -1) (undo-tree-id11648 . -1) (undo-tree-id11649 . -1) (undo-tree-id11650 . -1) (undo-tree-id11651 . -1) (undo-tree-id11652 . -1) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) (undo-tree-id11656 . -1) (undo-tree-id11657 . -1) (undo-tree-id11658 . -1) (undo-tree-id11659 . -1) (undo-tree-id11660 . -1) (undo-tree-id11661 . -1) (undo-tree-id11662 . -1) (undo-tree-id11663 . -1) (undo-tree-id11664 . -1) (undo-tree-id11665 . -1) (undo-tree-id11666 . -1) (undo-tree-id11667 . -1) (undo-tree-id11668 . -1) (undo-tree-id11669 . -1) (undo-tree-id11670 . -1) (undo-tree-id11671 . -1) (undo-tree-id11672 . -1)) nil (25758 52155 518005 877000) 0 nil])
([nil nil ((19305 . 19307)) nil (25758 52155 517960 54000) 0 nil])
([nil nil ((19319 . 19320) (t 25758 52155 599547 229000)) nil (25758 52165 579299 194000) 0 nil])
([nil nil ((19540 . 19541) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19540) (undo-tree-id11698 . -1) (19469 . 19470) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19469) (undo-tree-id11699 . -1) (19404 . 19405) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19404) (undo-tree-id11700 . -1) (19326 . 19327) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19326) (undo-tree-id11701 . -1) 19319) nil (25758 52165 579297 407000) 0 nil])
([nil nil ((19770 . 19771) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19770) (undo-tree-id11695 . -1) (19696 . 19697) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19696) (undo-tree-id11696 . -1) (19619 . 19620) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19619) (undo-tree-id11697 . -1) 19540) nil (25758 52165 579287 465000) 0 nil])
([nil nil ((19794 . 19795) 19770) nil (25758 52165 579271 291000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19783) (nil fontified nil 19782 . 19783) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19782 . 19783) (19782 . 19783) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19706) (nil fontified nil 19705 . 19706) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19705 . 19706) (19705 . 19706) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19625) (nil fontified nil 19624 . 19625) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19624 . 19625) (19624 . 19625) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19549) (nil fontified nil 19548 . 19549) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19548 . 19549) (19548 . 19549) (#(" " 0 1 (wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -19470) (nil fontified nil 19469 . 19470) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19469 . 19470) (19469 . 19470) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19389) (nil fontified nil 19388 . 19389) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19388 . 19389) (19388 . 19389) 19607 (t 25758 52165 660010 166000)) nil (25758 52170 574377 203000) 0 nil])
([nil nil ((19382 . 19383) (t 25758 52170 612236 423000)) nil (25758 52245 591101 623000) 0 nil])
([nil nil ((19389 . 19390) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -19389) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) 19383) nil (25758 52245 591100 71000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19454) (nil fontified nil 19453 . 19454) (nil wrap-prefix #("    " 0 4 (face org-indent)) 19453 . 19454) (19453 . 19454) 19389) nil (25758 52245 591091 626000) 0 nil])
([nil nil ((#("Moreover," 0 9 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19461) (undo-tree-id11702 . -8) (undo-tree-id11703 . -6) (undo-tree-id11704 . -6) (undo-tree-id11705 . -6) (undo-tree-id11706 . -6) (undo-tree-id11707 . -6) (undo-tree-id11708 . -6) (undo-tree-id11709 . -6) (undo-tree-id11710 . -6) (undo-tree-id11711 . -6) (undo-tree-id11712 . -6) (undo-tree-id11713 . -6) (undo-tree-id11714 . -6) (undo-tree-id11715 . -6) (undo-tree-id11716 . -6) (undo-tree-id11717 . -6) (undo-tree-id11718 . -6) (undo-tree-id11719 . -6) (undo-tree-id11720 . -6) (undo-tree-id11721 . -6) (undo-tree-id11722 . -6) (undo-tree-id11723 . -6) (undo-tree-id11724 . -6) (undo-tree-id11725 . -6) (undo-tree-id11726 . -6) (undo-tree-id11727 . -6) (undo-tree-id11728 . -6) (undo-tree-id11729 . -6) (undo-tree-id11730 . -6) (undo-tree-id11731 . -6) (undo-tree-id11732 . -9) (undo-tree-id11733 . -9) (undo-tree-id11734 . -9)) nil (25758 52245 591089 100000) 0 nil])
([nil nil ((19462 . 19463) (#("a" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19462)) nil (25758 52245 591057 571000) 0 nil])
([nil nil ((19462 . 19463)) nil (25758 52245 591052 784000) 0 nil])
([nil nil ((19649 . 19650) (t 25758 52245 623540 181000)) nil (25758 52276 830401 676000) 0 nil])
([nil nil ((#("(which is equal to the cell’s output for this
time step, y(t))" 0 36 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 36 37 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 37 45 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 45 46 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 46 47 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 47 62 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19654) (undo-tree-id11800 . -61) (undo-tree-id11801 . 62) (undo-tree-id11802 . -1) (undo-tree-id11803 . 1) (undo-tree-id11804 . -62) (undo-tree-id11805 . -62)) nil (25758 52276 830400 609000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19653) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (undo-tree-id11759 . -1) (undo-tree-id11760 . -1) (undo-tree-id11761 . -1) (undo-tree-id11762 . -1) (undo-tree-id11763 . -1) (undo-tree-id11764 . -1) (undo-tree-id11765 . -1) (undo-tree-id11766 . -1) (undo-tree-id11767 . -1) (undo-tree-id11768 . -1) (undo-tree-id11769 . -1) (undo-tree-id11770 . -1) (undo-tree-id11771 . -1) (undo-tree-id11772 . -1) (undo-tree-id11773 . -1) (undo-tree-id11774 . -1) (undo-tree-id11775 . -1) (undo-tree-id11776 . -1) (undo-tree-id11777 . -1) (undo-tree-id11778 . -1) (undo-tree-id11779 . -1) (undo-tree-id11780 . -1) (undo-tree-id11781 . -1) (undo-tree-id11782 . -1) (undo-tree-id11783 . -1) (undo-tree-id11784 . -1) (undo-tree-id11785 . -1) (undo-tree-id11786 . -1) (undo-tree-id11787 . -1) (undo-tree-id11788 . -1) (undo-tree-id11789 . -1) (undo-tree-id11790 . -1) (undo-tree-id11791 . -1) (undo-tree-id11792 . -1) (undo-tree-id11793 . -1) (undo-tree-id11794 . -1) (undo-tree-id11795 . -1) (undo-tree-id11796 . -1) (undo-tree-id11797 . -1) (undo-tree-id11798 . -1) (undo-tree-id11799 . -1)) nil (25758 52276 830394 464000) 0 nil])
([nil nil ((#("Now let’s look at where new memories come from and how the" 0 46 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 46 47 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 47 58 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19655) (undo-tree-id11747 . -57) (undo-tree-id11748 . -58) (undo-tree-id11749 . -58)) nil (25758 52276 830360 68000) 0 nil])
([nil nil ((#("gates work.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 11 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 11 12 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 19656) (undo-tree-id11744 . -11) (undo-tree-id11745 . 12) (undo-tree-id11746 . -12)) nil (25758 52276 830353 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22405 . 22406) (nil fontified nil 22355 . 22406) (nil fontified nil 22277 . 22355) (nil fontified nil 22205 . 22277) (nil fontified nil 22183 . 22205) (nil fontified nil 22106 . 22183) (nil fontified nil 22033 . 22106) (nil fontified nil 21959 . 22033) (nil fontified nil 21878 . 21959) (nil fontified nil 21805 . 21878) (nil fontified nil 21763 . 21805) (nil fontified nil 21705 . 21763) (nil fontified nil 21644 . 21705) (nil fontified nil 21599 . 21644) (nil fontified nil 21539 . 21599) (nil fontified nil 21501 . 21539) (nil fontified nil 21440 . 21501) (nil fontified nil 21402 . 21440) (nil fontified nil 21336 . 21402) (nil fontified nil 21270 . 21336) (nil fontified nil 21204 . 21270) (nil fontified nil 21140 . 21204) (nil fontified nil 21122 . 21140) (nil fontified nil 21054 . 21122) (nil fontified nil 20986 . 21054) (nil fontified nil 20916 . 20986) (nil fontified nil 20845 . 20916) (nil fontified nil 20781 . 20845) (nil fontified nil 20703 . 20781) (nil fontified nil 20626 . 20703) (nil fontified nil 20548 . 20626) (20548 . 22406) (t 25758 52276 868852 809000)) nil (25758 52346 952813 678000) 0 nil])
([nil nil ((#("First, " 0 7 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19657) (undo-tree-id11807 . -6) (undo-tree-id11808 . -6) (undo-tree-id11809 . -6) (undo-tree-id11810 . -7) (undo-tree-id11811 . -6) (undo-tree-id11812 . -4) (undo-tree-id11813 . -4) (undo-tree-id11814 . -4) (undo-tree-id11815 . -4) (undo-tree-id11816 . -4) (undo-tree-id11817 . -4) (undo-tree-id11818 . -4) (undo-tree-id11819 . -4) (undo-tree-id11820 . -5) (undo-tree-id11821 . -5) (undo-tree-id11822 . -5) (undo-tree-id11823 . -5) (undo-tree-id11824 . -5) (undo-tree-id11825 . -5) (undo-tree-id11826 . -5) (undo-tree-id11827 . -5) (undo-tree-id11828 . -7) (undo-tree-id11829 . -7) (undo-tree-id11830 . -7) (undo-tree-id11831 . -7) (undo-tree-id11832 . -7) (undo-tree-id11833 . -7) (undo-tree-id11834 . -7) (undo-tree-id11835 . -7) (undo-tree-id11836 . -6) (undo-tree-id11837 . -6) (undo-tree-id11838 . -6) (undo-tree-id11839 . -6) (undo-tree-id11840 . -6) (undo-tree-id11841 . -6) (undo-tree-id11842 . -6) (undo-tree-id11843 . -6) (undo-tree-id11844 . -6) (undo-tree-id11845 . -7) 19663) nil (25758 52346 952806 876000) 0 nil])
([nil nil ((19724 . 19725) (#("–" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19724) (undo-tree-id11806 . -1)) nil (25758 52346 952780 438000) 0 nil])
([nil nil ((19778 . 19780)) nil (25758 52346 952771 252000) 0 nil])
([nil nil ((22401 . 22402)) nil (25758 52346 952766 361000) 0 nil])
([nil nil ((#("They all serve a different
" 0 27 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19780) (undo-tree-id11852 . -26) (undo-tree-id11853 . 27) (undo-tree-id11854 . -27) (t 25758 52347 35679 183000)) nil (25758 52352 219334 881000) 0 nil])
([nil nil ((#("purpose" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 7 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19780) (undo-tree-id11849 . -6) (undo-tree-id11850 . 7) (undo-tree-id11851 . -7)) nil (25758 52352 219330 174000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19780) (undo-tree-id11846 . 1) (undo-tree-id11847 . -1) (undo-tree-id11848 . -1)) nil (25758 52352 219322 811000) 0 nil])
([nil nil ((19780 . 19782) (t 25758 52352 251883 39000)) nil (25758 52412 872278 684000) 0 nil])
([nil nil ((19925 . 19926) (#("–" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19925) (undo-tree-id11928 . -1)) nil (25758 52412 872277 663000) 0 nil])
([nil nil ((#("In a basic cell, there is nothing other than this layer,
and " 0 57 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 57 61 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19930) (undo-tree-id11876 . -60) (undo-tree-id11877 . -60) (undo-tree-id11878 . -60) (undo-tree-id11879 . -61) (undo-tree-id11880 . -60) (undo-tree-id11881 . -1) (undo-tree-id11882 . -3) (undo-tree-id11883 . -9) (undo-tree-id11884 . -14) (undo-tree-id11885 . -15) (undo-tree-id11886 . -21) (undo-tree-id11887 . -24) (undo-tree-id11888 . -32) (undo-tree-id11889 . -38) (undo-tree-id11890 . -43) (undo-tree-id11891 . -48) (undo-tree-id11892 . -54) (undo-tree-id11893 . -55) (undo-tree-id11894 . -59) (undo-tree-id11895 . -59) (undo-tree-id11896 . -59) (undo-tree-id11897 . -59) (undo-tree-id11898 . -59) (undo-tree-id11899 . -59) (undo-tree-id11900 . -59) (undo-tree-id11901 . -59) (undo-tree-id11902 . -61) (undo-tree-id11903 . -61) (undo-tree-id11904 . -61) (undo-tree-id11905 . -61) (undo-tree-id11906 . -61) (undo-tree-id11907 . -61) (undo-tree-id11908 . -61) (undo-tree-id11909 . -61) (undo-tree-id11910 . -61) (undo-tree-id11911 . -61) (undo-tree-id11912 . -61) (undo-tree-id11913 . -61) (undo-tree-id11914 . -61) (undo-tree-id11915 . -61) (undo-tree-id11916 . -61) (undo-tree-id11917 . -61) (undo-tree-id11918 . -60) (undo-tree-id11919 . -60) (undo-tree-id11920 . -60) (undo-tree-id11921 . -60) (undo-tree-id11922 . -60) (undo-tree-id11923 . -60) (undo-tree-id11924 . -60) (undo-tree-id11925 . -60) (undo-tree-id11926 . -60) (undo-tree-id11927 . -61) 19990) nil (25758 52412 872274 580000) 0 nil])
([nil nil ((19930 . 19931) (#("i" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19930)) nil (25758 52412 872240 853000) 0 nil])
([nil nil ((19977 . 19978)) nil (25758 52412 872239 930000) 0 nil])
([nil nil ((#("In contrast, " 0 13 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19978) (undo-tree-id11856 . -12) (undo-tree-id11857 . -12) (undo-tree-id11858 . 13) (undo-tree-id11859 . -12) (undo-tree-id11860 . -1) (undo-tree-id11861 . -13) (undo-tree-id11862 . -12) (undo-tree-id11863 . -1) (undo-tree-id11864 . -1) (undo-tree-id11865 . -1) (undo-tree-id11866 . -1) (undo-tree-id11867 . -1) (undo-tree-id11868 . -1) (undo-tree-id11869 . -1) (undo-tree-id11870 . -1) (undo-tree-id11871 . -10) (undo-tree-id11872 . -11) (undo-tree-id11873 . -12) (undo-tree-id11874 . -12) (undo-tree-id11875 . -13) 19990) nil (25758 52412 872237 566000) 0 nil])
([nil nil ((19983 . 19984) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -19983) (undo-tree-id11855 . -1) 19978) nil (25758 52412 871918 596000) 0 nil])
([nil nil ((19978 . 19979) (#("i" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 19978) (t 25758 52412 906195 379000)) nil (25758 52417 480775 593000) 0 nil])
([nil nil ((20004 . 20005) (#("’" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20004) (undo-tree-id11959 . -1) (t 25758 52417 534367 619000)) nil (25758 52447 829698 851000) 0 nil])
([nil nil ((#("(and the
rest is dropped)" 0 9 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 9 25 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20111) (undo-tree-id11949 . -24) (undo-tree-id11950 . -9) (undo-tree-id11951 . -9) (undo-tree-id11952 . -9) (undo-tree-id11953 . -9) (undo-tree-id11954 . -9) (undo-tree-id11955 . -9) (undo-tree-id11956 . -9) (undo-tree-id11957 . -9) (undo-tree-id11958 . -25) 20052) nil (25758 52447 829696 503000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20110) (undo-tree-id11929 . -1) (undo-tree-id11930 . -1) (undo-tree-id11931 . -1) (undo-tree-id11932 . -1) (undo-tree-id11933 . -1) (undo-tree-id11934 . -1) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (undo-tree-id11940 . -1) (undo-tree-id11941 . -1) (undo-tree-id11942 . -1) (undo-tree-id11943 . -1) (undo-tree-id11944 . -1) (undo-tree-id11945 . -1) (undo-tree-id11946 . -1) (undo-tree-id11947 . -1) (undo-tree-id11948 . -1)) nil (25758 52447 829686 570000) 0 nil])
([nil nil ((20111 . 20112)) nil (25758 52447 829658 736000) 0 nil])
([nil nil ((20113 . 20115) (t 25758 52447 867482 643000)) nil (25758 52451 555339 379000) 0 nil])
([nil nil ((20160 . 20161) (t 25758 52451 591617 924000)) nil (25758 52464 924484 675000) 0 nil])
([nil nil ((#("Since they use the
" 0 18 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 18 19 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20161) (undo-tree-id11992 . -18) (undo-tree-id11993 . 19) (undo-tree-id11994 . -19) (t 25758 52464 960100 723000)) nil (25758 52506 402779 85000) 0 nil])
([nil nil ((#("logistic activation function, their outputs range from 0 to 1. As
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20161) (undo-tree-id11989 . -65) (undo-tree-id11990 . 66) (undo-tree-id11991 . -66)) nil (25758 52506 402776 149000) 0 nil])
([nil nil ((#("you can see," 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 12 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20161) (undo-tree-id11986 . -11) (undo-tree-id11987 . 12) (undo-tree-id11988 . -12)) nil (25758 52506 402773 629000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20161) (undo-tree-id11983 . 1) (undo-tree-id11984 . -1) (undo-tree-id11985 . -1)) nil (25758 52506 402771 139000) 0 nil])
([nil nil ((#("their outputs are fed to element-wise multiplication
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 53 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20161) (undo-tree-id11972 . -52) (undo-tree-id11973 . 53) (undo-tree-id11974 . -53) (undo-tree-id11975 . -53) (undo-tree-id11976 . -53) (undo-tree-id11977 . -53) (undo-tree-id11978 . -53) (undo-tree-id11979 . -53) (undo-tree-id11980 . -53) (undo-tree-id11981 . -53) (undo-tree-id11982 . -53)) nil (25758 52506 402768 189000) 0 nil])
([nil nil ((#("operations, so if they output 0s they close the gate, and if they
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20161) (undo-tree-id11969 . -65) (undo-tree-id11970 . 66) (undo-tree-id11971 . -66)) nil (25758 52506 402758 967000) 0 nil])
([nil nil ((#("output 1s they open it. Specificall
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 34 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 34 35 (rear-nonsticky t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 35 36 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 20161) (undo-tree-id11964 . -35) (undo-tree-id11965 . 36) (undo-tree-id11966 . 12) (undo-tree-id11967 . -35) (undo-tree-id11968 . -36)) nil (25758 52506 402755 106000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 20161) (undo-tree-id11960 . 1) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (undo-tree-id11963 . -1)) nil (25758 52506 402747 751000) 0 nil])
([nil nil ((20160 . 20161) (t 25758 52506 437571 630000)) nil (25758 52579 660526 99000) 0 nil])
([nil nil ((#("First, the current input vector x(t) and the previous short-term state h(t–1)
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12066 . -77) (undo-tree-id12067 . -78) (t 25758 52579 700077 762000)) nil (25758 52612 8364 735000) 0 nil])
([nil nil ((#("are fed to four different fully connected layers. They all serve a different
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 77 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12064 . -76) (undo-tree-id12065 . -77)) nil (25758 52612 8362 316000) 0 nil])
([nil nil ((#("purpose:The main layer is the one that outputs g(t). It has the usual role of
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12062 . -77) (undo-tree-id12063 . -78)) nil (25758 52612 8360 178000) 0 nil])
([nil nil ((#("analyzing the current inputs x(t) and the previous (short-term)
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 64 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12060 . -63) (undo-tree-id12061 . -64)) nil (25758 52612 8357 920000) 0 nil])
([nil nil ((#("state h(t–1). In a basic cell, there is nothing other than this layer,
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 71 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12058 . -70) (undo-tree-id12059 . -71)) nil (25758 52612 8355 641000) 0 nil])
([nil nil ((#("and its output goes straight out to y(t) and h(t). In contrast, in an
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 70 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12056 . -69) (undo-tree-id12057 . -70)) nil (25758 52612 8352 778000) 0 nil])
([nil nil ((#("LSTM cell this layer’s output does not go straight out, but instead
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 62 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 62 68 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12052 . -67) (undo-tree-id12053 . 68) (undo-tree-id12054 . -4) (undo-tree-id12055 . -68)) nil (25758 52612 8350 556000) 0 nil])
([nil nil ((#("its most important parts are stored in the long-term state (and the
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 68 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12050 . -67) (undo-tree-id12051 . -68)) nil (25758 52612 8346 756000) 0 nil])
([nil nil ((#("rest is dropped).
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 18 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12048 . -17) (undo-tree-id12049 . -18)) nil (25758 52612 8342 104000) 0 nil])
([nil nil ((#("The three other layers are gate controllers. Since they use the
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 64 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12046 . -63) (undo-tree-id12047 . -64)) nil (25758 52612 8340 115000) 0 nil])
([nil nil ((#("logistic activation function, their outputs range from 0 to 1. As
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12044 . -65) (undo-tree-id12045 . -66)) nil (25758 52612 8337 955000) 0 nil])
([nil nil ((#("you can see, their outputs are fed to element-wise multiplication
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12042 . -65) (undo-tree-id12043 . -66)) nil (25758 52612 8335 627000) 0 nil])
([nil nil ((#("operations, so if they output 0s they close the gate, and if they
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12040 . -65) (undo-tree-id12041 . -66)) nil (25758 52612 8333 54000) 0 nil])
([nil nil ((#("output 1s they open it. Specifically:
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 38 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12038 . -37) (undo-tree-id12039 . -38)) nil (25758 52612 8330 331000) 0 nil])
([nil nil ((#("The forget gate (controlled by f(t)) controls which parts of
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 61 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12036 . -60) (undo-tree-id12037 . -61)) nil (25758 52612 8327 519000) 0 nil])
([nil nil ((#("the long-term state should be erased.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 38 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12034 . -37) (undo-tree-id12035 . -38)) nil (25758 52612 8324 898000) 0 nil])
([nil nil ((#("The input gate (controlled by i(t)) controls which parts of
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 15 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 15 60 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12032 . -59) (undo-tree-id12033 . -60)) nil (25758 52612 8322 603000) 0 nil])
([nil nil ((#("g(t) should be added to the long-term state.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 45 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12030 . -44) (undo-tree-id12031 . -45)) nil (25758 52612 8320 281000) 0 nil])
([nil nil ((#("Finally, the output gate (controlled by o(t)) controls which
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 61 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12028 . -60) (undo-tree-id12029 . -61)) nil (25758 52612 8317 276000) 0 nil])
([nil nil ((#("parts of the long-term state should be read and output at
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 58 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12026 . -57) (undo-tree-id12027 . -58)) nil (25758 52612 8314 868000) 0 nil])
([nil nil ((#("this time step, both to h(t) and to y(t).
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 42 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12024 . -41) (undo-tree-id12025 . -42)) nil (25758 52612 8311 979000) 0 nil])
([nil nil ((#("In short, an LSTM cell can learn to recognize an important input (that’s
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 73 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12022 . -72) (undo-tree-id12023 . -73)) nil (25758 52612 8309 421000) 0 nil])
([nil nil ((#("the role of the input gate), store it in the long-term state, preserve it for as
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 81 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12020 . -80) (undo-tree-id12021 . -81)) nil (25758 52612 8306 432000) 0 nil])
([nil nil ((#("long as it is needed (that’s the role of the forget gate), and extract it
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 74 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12018 . -73) (undo-tree-id12019 . -74)) nil (25758 52612 8303 859000) 0 nil])
([nil nil ((#("whenever it is needed. This explains why these cells have been amazingly
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 66 73 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12016 . -72) (undo-tree-id12017 . -73)) nil (25758 52612 8301 160000) 0 nil])
([nil nil ((#("successful at capturing long-term patterns in time series, long texts, audio
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 77 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12014 . -76) (undo-tree-id12015 . -77)) nil (25758 52612 8298 476000) 0 nil])
([nil nil ((#("recordings, and more.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 22 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12012 . -21) (undo-tree-id12013 . -22)) nil (25758 52612 8295 598000) 0 nil])
([nil nil ((#("Equation 15-3 summarizes how to compute the cell’s long-term state, its
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 72 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12010 . -71) (undo-tree-id12011 . -72)) nil (25758 52612 8292 529000) 0 nil])
([nil nil ((#("short-term state, and its output at each time step for a single instance (the
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id12008 . -77) (undo-tree-id12009 . -78)) nil (25758 52612 8288 554000) 0 nil])
([nil nil ((#("equations for a whole mini-batch are very similar).
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 50 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 50 51 (rear-nonsticky t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 51 52 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 20162) (undo-tree-id12006 . -51) (undo-tree-id12007 . -52)) nil (25758 52612 8285 874000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20925 . 20926) (nil fontified nil 20905 . 20926) (nil fontified nil 20828 . 20905) (nil fontified nil 20755 . 20828) (nil fontified nil 20681 . 20755) (nil fontified nil 20600 . 20681) (nil fontified nil 20527 . 20600) (nil fontified nil 20485 . 20527) (nil fontified nil 20427 . 20485) (nil fontified nil 20366 . 20427) (nil fontified nil 20321 . 20366) (nil fontified nil 20261 . 20321) (nil fontified nil 20223 . 20261) (nil fontified nil 20162 . 20223) (20162 . 20926)) nil (25758 52612 8282 527000) 0 nil])
([nil nil ((20162 . 20163)) nil (25758 52612 8943 159000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20178 . 20179) (nil fontified nil 20178 . 20179) (20178 . 20179) 20177) nil (25758 52638 576136 71000) 0 nil] [nil nil ((#("*" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20162) (undo-tree-id11995 . -1) (undo-tree-id11996 . -1) (undo-tree-id11997 . -1) (undo-tree-id11998 . -1) (undo-tree-id11999 . -1) (undo-tree-id12000 . -1) (undo-tree-id12001 . -1) (undo-tree-id12002 . -1) (undo-tree-id12003 . -1) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1)) ((20162 . 20163)) (25758 52612 8272 573000) 0 nil])
([nil nil ((20262 . 20263) 20253) nil (25758 52646 521243 880000) 0 nil] [nil nil ((#("(controlled by f(t))" 0 20 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20180) (undo-tree-id12072 . -19) (undo-tree-id12073 . 20) (undo-tree-id12074 . -1) (undo-tree-id12075 . 1) (undo-tree-id12076 . -20) (undo-tree-id12077 . -20)) ((20180 . 20200)) (25758 52638 40979 360000) 0 nil])
nil
([nil nil ((20264 . 20265)) nil (25758 52646 521465 86000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20180) (undo-tree-id12070 . -1) (undo-tree-id12071 . -1)) ((20180 . 20181)) (25758 52637 696848 170000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20279 . 20280) (nil fontified nil 20279 . 20280) (20279 . 20280) 20278) nil (25758 52651 342627 386000) 0 nil] [nil nil ((#("*" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20264) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -1) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1)) ((20264 . 20265)) (25758 52646 521237 515000) 0 nil])
([nil nil ((20242 . 20243)) ((#("*" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20242)) (25758 52637 387371 697000) 0 nil] [nil nil ((#("T" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20242) (undo-tree-id12068 . -1) (undo-tree-id12069 . -1)) ((20242 . 20243)) (25758 52626 923855 341000) 0 nil])
([nil nil ((20931 . 20932)) nil (25758 52651 342621 525000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 20257 . 20258) (nil fontified nil 20257 . 20258) (20257 . 20258) 20256) ((#("*" 0 1 (invisible org-link org-emphasis t font-lock-multiline t face (bold) rear-nonsticky nil fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20257) (nil rear-nonsticky t 20257 . 20258)) (25758 52637 387070 913000) 0 nil] [nil nil ((#("*" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20242) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1)) ((20242 . 20243)) (25758 52630 414424 675000) 0 nil])
nil
([nil nil ((20370 . 20371) (t 25758 52651 378428 987000) 20356) nil (25758 52666 603398 811000) 0 nil])
nil
nil
([nil nil ((20372 . 20373) (#("Finally, t" 0 10 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20372) (undo-tree-id12100 . -9) (undo-tree-id12101 . -9) (undo-tree-id12102 . -9) (undo-tree-id12103 . -10) (undo-tree-id12104 . -9) (undo-tree-id12105 . -6) (undo-tree-id12106 . -6) (undo-tree-id12107 . -6) (undo-tree-id12108 . -6) (undo-tree-id12109 . -6) (undo-tree-id12110 . -6) (undo-tree-id12111 . -6) (undo-tree-id12112 . -6) (undo-tree-id12113 . -7) (undo-tree-id12114 . -7) (undo-tree-id12115 . -7) (undo-tree-id12116 . -7) (undo-tree-id12117 . -7) (undo-tree-id12118 . -7) (undo-tree-id12119 . -7) (undo-tree-id12120 . -7) (undo-tree-id12121 . -8) (undo-tree-id12122 . -8) (undo-tree-id12123 . -8) (undo-tree-id12124 . -8) (undo-tree-id12125 . -8) (undo-tree-id12126 . -8) (undo-tree-id12127 . -8) (undo-tree-id12128 . -8) (undo-tree-id12129 . -9) (undo-tree-id12130 . -9) (undo-tree-id12131 . -9) (undo-tree-id12132 . -9) (undo-tree-id12133 . -9) (undo-tree-id12134 . -9) (undo-tree-id12135 . -9) (undo-tree-id12136 . -9) (undo-tree-id12137 . -9) (undo-tree-id12138 . -10) (undo-tree-id12139 . -10) (undo-tree-id12140 . -10) 20381) nil (25758 52666 603395 2000) 0 nil])
([nil nil ((20372 . 20373)) nil (25758 52666 603340 192000) 0 nil])
([nil nil ((20388 . 20389)) nil (25758 52666 603334 634000) 0 nil])
([nil nil ((20525 . 20526) (t 25758 52666 634917 864000) 20507) nil (25758 52675 607885 945000) 0 nil])
([nil nil ((20527 . 20528) (#("In short, a" 0 11 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20527) (undo-tree-id12178 . -10) (undo-tree-id12179 . -10) (undo-tree-id12180 . -10) (undo-tree-id12181 . -11) (undo-tree-id12182 . -10) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -7) (undo-tree-id12192 . -7) (undo-tree-id12193 . -7) (undo-tree-id12194 . -7) (undo-tree-id12195 . -7) (undo-tree-id12196 . -7) (undo-tree-id12197 . -7) (undo-tree-id12198 . -7) (undo-tree-id12199 . -8) (undo-tree-id12200 . -8) (undo-tree-id12201 . -8) (undo-tree-id12202 . -8) (undo-tree-id12203 . -8) (undo-tree-id12204 . -8) (undo-tree-id12205 . -8) (undo-tree-id12206 . -8) (undo-tree-id12207 . -11) (undo-tree-id12208 . -11) (undo-tree-id12209 . -11) (undo-tree-id12210 . -11) (undo-tree-id12211 . -11) (undo-tree-id12212 . -11) (undo-tree-id12213 . -11) (undo-tree-id12214 . -11) (undo-tree-id12215 . -10) (undo-tree-id12216 . -10) (undo-tree-id12217 . -10) (undo-tree-id12218 . -10) (undo-tree-id12219 . -10) (undo-tree-id12220 . -10) (undo-tree-id12221 . -10) (undo-tree-id12222 . -10) (undo-tree-id12223 . -10) (undo-tree-id12224 . -11) (undo-tree-id12225 . -11) (undo-tree-id12226 . -11) 20537 (t 25758 52675 651204 988000)) nil (25758 52702 602285 690000) 0 nil])
([nil nil ((#("(that’s
the role of the input gate)" 0 8 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 8 35 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20582) (undo-tree-id12168 . -34) (undo-tree-id12169 . -8) (undo-tree-id12170 . -8) (undo-tree-id12171 . -8) (undo-tree-id12172 . -8) (undo-tree-id12173 . -8) (undo-tree-id12174 . -8) (undo-tree-id12175 . -8) (undo-tree-id12176 . -8) (undo-tree-id12177 . -35) 20527) nil (25758 52702 602135 757000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20581) (undo-tree-id12141 . -1) (undo-tree-id12142 . -1) (undo-tree-id12143 . -1) (undo-tree-id12144 . -1) (undo-tree-id12145 . -1) (undo-tree-id12146 . -1) (undo-tree-id12147 . -1) (undo-tree-id12148 . -1) (undo-tree-id12149 . -1) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -1) (undo-tree-id12162 . -1) (undo-tree-id12163 . -1) (undo-tree-id12164 . -1) (undo-tree-id12165 . -1) (undo-tree-id12166 . -1) (undo-tree-id12167 . -1)) nil (25758 52702 602123 336000) 0 nil])
([nil nil ((20858 . 20859) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20858) (undo-tree-id12293 . -1) (20781 . 20782) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20781) (undo-tree-id12294 . -1) (20708 . 20709) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20708) (undo-tree-id12295 . -1) (20634 . 20635) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20634) (undo-tree-id12296 . -1) 20604 (t 25758 52702 636056 623000)) nil (25758 52727 870436 20000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20833) (nil fontified nil 20832 . 20833) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20832 . 20833) (20832 . 20833) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20756) (nil fontified nil 20755 . 20756) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20755 . 20756) (20755 . 20756) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20680) (nil fontified nil 20679 . 20680) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20679 . 20680) (20679 . 20680) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -20599) (undo-tree-id12271 . -1) (undo-tree-id12272 . -1) (undo-tree-id12273 . -1) (undo-tree-id12274 . -1) (undo-tree-id12275 . -1) (undo-tree-id12276 . -1) (undo-tree-id12277 . -1) (undo-tree-id12278 . -1) (undo-tree-id12279 . -1) (undo-tree-id12280 . -1) (undo-tree-id12281 . -1) (undo-tree-id12282 . -1) (undo-tree-id12283 . -1) (undo-tree-id12284 . -1) (undo-tree-id12285 . -1) (undo-tree-id12286 . -1) (undo-tree-id12287 . -1) (undo-tree-id12288 . -1) (undo-tree-id12289 . -1) (undo-tree-id12290 . -1) (undo-tree-id12291 . -1) (undo-tree-id12292 . -1) (nil fontified nil 20598 . 20599) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20598 . 20599) (20598 . 20599) 20858) nil (25758 52727 870429 914000) 0 nil])
([nil nil ((#("(that’s the role of the
forget gate)" 0 23 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 23 24 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 24 25 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 25 36 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20656) (undo-tree-id12261 . -35) (undo-tree-id12262 . -24) (undo-tree-id12263 . -24) (undo-tree-id12264 . -24) (undo-tree-id12265 . -24) (undo-tree-id12266 . -24) (undo-tree-id12267 . -24) (undo-tree-id12268 . -24) (undo-tree-id12269 . -24) (undo-tree-id12270 . -36) 20602) nil (25758 52727 870414 368000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20655) (undo-tree-id12227 . -1) (undo-tree-id12228 . -1) (undo-tree-id12229 . -1) (undo-tree-id12230 . -1) (undo-tree-id12231 . -1) (undo-tree-id12232 . -1) (undo-tree-id12233 . -1) (undo-tree-id12234 . -1) (undo-tree-id12235 . -1) (undo-tree-id12236 . -1) (undo-tree-id12237 . -1) (undo-tree-id12238 . -1) (undo-tree-id12239 . -1) (undo-tree-id12240 . -1) (undo-tree-id12241 . -1) (undo-tree-id12242 . -1) (undo-tree-id12243 . -1) (undo-tree-id12244 . -1) (undo-tree-id12245 . -1) (undo-tree-id12246 . -1) (undo-tree-id12247 . -1) (undo-tree-id12248 . -1) (undo-tree-id12249 . -1) (undo-tree-id12250 . -1) (undo-tree-id12251 . -1) (undo-tree-id12252 . -1) (undo-tree-id12253 . -1) (undo-tree-id12254 . -1) (undo-tree-id12255 . -1) (undo-tree-id12256 . -1) (undo-tree-id12257 . -1) (undo-tree-id12258 . -1) (undo-tree-id12259 . -1) (undo-tree-id12260 . -1)) nil (25758 52727 870402 830000) 0 nil])
([nil nil ((20795 . 20796) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20795) (undo-tree-id12337 . -1) (20718 . 20719) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20718) (undo-tree-id12338 . -1) (undo-tree-id12339 . -1) (undo-tree-id12340 . -1) (undo-tree-id12341 . -1) (undo-tree-id12342 . -1) (undo-tree-id12343 . -1) (undo-tree-id12344 . -1) (undo-tree-id12345 . -1) (undo-tree-id12346 . -1) (undo-tree-id12347 . -1) (undo-tree-id12348 . -1) (undo-tree-id12349 . -1) (undo-tree-id12350 . -1) (undo-tree-id12351 . -1) (undo-tree-id12352 . -1) (undo-tree-id12353 . -1) (undo-tree-id12354 . -1) (undo-tree-id12355 . -1) (undo-tree-id12356 . -1) (undo-tree-id12357 . -1) (undo-tree-id12358 . -1) (undo-tree-id12359 . -1) (undo-tree-id12360 . -1) (undo-tree-id12361 . -1) (undo-tree-id12362 . -1) (undo-tree-id12363 . -1) (undo-tree-id12364 . -1) (undo-tree-id12365 . -1) (undo-tree-id12366 . -1) (undo-tree-id12367 . -1) (undo-tree-id12368 . -1) (undo-tree-id12369 . -1) (undo-tree-id12370 . -1) (20598 . 20599) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20598) (undo-tree-id12371 . -1) (undo-tree-id12372 . -1) (undo-tree-id12373 . -1) (undo-tree-id12374 . -1) (undo-tree-id12375 . -1) (undo-tree-id12376 . -1) (undo-tree-id12377 . -1) (undo-tree-id12378 . -1) (undo-tree-id12379 . -1) (undo-tree-id12380 . -1) (undo-tree-id12381 . -1) (undo-tree-id12382 . -1) (undo-tree-id12383 . -1) (undo-tree-id12384 . -1) (undo-tree-id12385 . -1) (undo-tree-id12386 . -1) (undo-tree-id12387 . -1) (undo-tree-id12388 . -1) (undo-tree-id12389 . -1) (undo-tree-id12390 . -1) (undo-tree-id12391 . -1) (undo-tree-id12392 . -1) (undo-tree-id12393 . -1) 20597 (t 25758 52727 948845 411000)) nil (25758 52743 392613 149000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20822) (nil fontified nil 20821 . 20822) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20821 . 20822) (20821 . 20822) (#(" " 0 1 (wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20745) (undo-tree-id12297 . -1) (nil fontified nil 20744 . 20745) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20744 . 20745) (20744 . 20745) (#(" " 0 1 (wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20672) (undo-tree-id12298 . -1) (undo-tree-id12299 . -1) (undo-tree-id12300 . -1) (undo-tree-id12301 . -1) (undo-tree-id12302 . -1) (undo-tree-id12303 . -1) (undo-tree-id12304 . -1) (undo-tree-id12305 . -1) (undo-tree-id12306 . -1) (undo-tree-id12307 . -1) (undo-tree-id12308 . -1) (undo-tree-id12309 . -1) (undo-tree-id12310 . -1) (undo-tree-id12311 . -1) (undo-tree-id12312 . -1) (undo-tree-id12313 . -1) (undo-tree-id12314 . -1) (undo-tree-id12315 . -1) (undo-tree-id12316 . -1) (undo-tree-id12317 . -1) (undo-tree-id12318 . -1) (undo-tree-id12319 . -1) (undo-tree-id12320 . -1) (undo-tree-id12321 . -1) (undo-tree-id12322 . -1) (undo-tree-id12323 . -1) (undo-tree-id12324 . -1) (undo-tree-id12325 . -1) (undo-tree-id12326 . -1) (undo-tree-id12327 . -1) (undo-tree-id12328 . -1) (undo-tree-id12329 . -1) (undo-tree-id12330 . -1) (undo-tree-id12331 . -1) (undo-tree-id12332 . -1) (undo-tree-id12333 . -1) (undo-tree-id12334 . -1) (undo-tree-id12335 . -1) (undo-tree-id12336 . -1) (nil fontified nil 20671 . 20672) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20671 . 20672) (20671 . 20672) (#(" " 0 1 (wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -20599) (nil fontified nil 20598 . 20599) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20598 . 20599) (20598 . 20599) 20795) nil (25758 52743 392570 325000) 0 nil])
([nil nil ((20844 . 20845) (20843 . 20844) (t 25758 52743 425323 84000) 20822) nil (25758 52746 264627 390000) 0 nil])
([nil nil ((20845 . 20847) (t 25758 52746 297411 356000)) nil (25758 52838 258477 58000) 0 nil])
([nil nil ((20844 . 20847) (20843 . 20844) 20822) nil (25758 52838 258475 945000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22033 . 22034) (nil fontified nil 21983 . 22034) (nil fontified nil 21910 . 21983) (nil fontified nil 21897 . 21910) (nil fontified nil 21830 . 21897) (nil fontified nil 21765 . 21830) (nil fontified nil 21714 . 21765) (nil fontified nil 21615 . 21714) (nil fontified nil 21539 . 21615) (nil fontified nil 21467 . 21539) (nil fontified nil 21389 . 21467) (nil fontified nil 21312 . 21389) (nil fontified nil 21235 . 21312) (nil fontified nil 21171 . 21235) (nil fontified nil 21100 . 21171) (nil fontified nil 21023 . 21100) (nil fontified nil 20946 . 21023) (nil fontified nil 20869 . 20946) (nil fontified nil 20848 . 20869) (20848 . 22034)) nil (25758 52838 258473 699000) 0 nil])
([nil nil ((22034 . 22035)) nil (25758 52838 258466 462000) 0 nil])
([nil nil ((nil keymap (keymap) 20846 . 20847) (nil face org-level-2 20846 . 20847) (nil line-prefix #("    " 0 4 (face org-indent)) 20846 . 20847) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20846 . 20847) (nil fontified nil 20846 . 20847) (20846 . 20847) (#(" " 0 1 (face org-level-2 keymap (keymap) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified nil)) . 20846) (undo-tree-id12394 . -1) (undo-tree-id12395 . -1) (undo-tree-id12396 . -1) (#("
" 0 1 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -20847) (undo-tree-id12397 . -1) (undo-tree-id12398 . -1) 20844 (t 25758 52838 300181 472000)) nil (25758 52840 291136 527000) 0 nil])
([nil nil ((#("This
idea was proposed by Felix Gers and Jürgen Schmidhuber in 2000.10 They
" 0 5 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 5 76 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21094) (undo-tree-id12399 . -75) (undo-tree-id12400 . -75) (undo-tree-id12401 . -75) (undo-tree-id12402 . -76) (undo-tree-id12403 . -75) (undo-tree-id12404 . -3) (undo-tree-id12405 . -3) (undo-tree-id12406 . -3) (undo-tree-id12407 . -3) (undo-tree-id12408 . -3) (undo-tree-id12409 . -3) (undo-tree-id12410 . -3) (undo-tree-id12411 . -3) (undo-tree-id12412 . -8) (undo-tree-id12413 . -8) (undo-tree-id12414 . -8) (undo-tree-id12415 . -8) (undo-tree-id12416 . -8) (undo-tree-id12417 . -8) (undo-tree-id12418 . -8) (undo-tree-id12419 . -8) (undo-tree-id12420 . -12) (undo-tree-id12421 . -12) (undo-tree-id12422 . -12) (undo-tree-id12423 . -12) (undo-tree-id12424 . -12) (undo-tree-id12425 . -12) (undo-tree-id12426 . -12) (undo-tree-id12427 . -12) (undo-tree-id12428 . -21) (undo-tree-id12429 . -21) (undo-tree-id12430 . -21) (undo-tree-id12431 . -21) (undo-tree-id12432 . -21) (undo-tree-id12433 . -21) (undo-tree-id12434 . -21) (undo-tree-id12435 . -21) (undo-tree-id12436 . -24) (undo-tree-id12437 . -24) (undo-tree-id12438 . -24) (undo-tree-id12439 . -24) (undo-tree-id12440 . -24) (undo-tree-id12441 . -24) (undo-tree-id12442 . -24) (undo-tree-id12443 . -24) (undo-tree-id12444 . -30) (undo-tree-id12445 . -30) (undo-tree-id12446 . -30) (undo-tree-id12447 . -30) (undo-tree-id12448 . -30) (undo-tree-id12449 . -30) (undo-tree-id12450 . -30) (undo-tree-id12451 . -30) (undo-tree-id12452 . 44) (undo-tree-id12453 . -36) (undo-tree-id12454 . -35) (undo-tree-id12455 . -35) (undo-tree-id12456 . -35) (undo-tree-id12457 . -35) (undo-tree-id12458 . -35) (undo-tree-id12459 . -35) (undo-tree-id12460 . -35) (undo-tree-id12461 . -35) (undo-tree-id12462 . -39) (undo-tree-id12463 . -39) (undo-tree-id12464 . -39) (undo-tree-id12465 . -39) (undo-tree-id12466 . -39) (undo-tree-id12467 . -39) (undo-tree-id12468 . -39) (undo-tree-id12469 . -39) (undo-tree-id12470 . 35) (undo-tree-id12471 . -47) (undo-tree-id12472 . -46) (undo-tree-id12473 . -46) (undo-tree-id12474 . -46) (undo-tree-id12475 . -46) (undo-tree-id12476 . -46) (undo-tree-id12477 . -46) (undo-tree-id12478 . -46) (undo-tree-id12479 . -46) (undo-tree-id12480 . 28) (undo-tree-id12481 . -59) (undo-tree-id12482 . -58) (undo-tree-id12483 . -58) (undo-tree-id12484 . -58) (undo-tree-id12485 . -58) (undo-tree-id12486 . -58) (undo-tree-id12487 . -58) (undo-tree-id12488 . -58) (undo-tree-id12489 . -58) (undo-tree-id12490 . -61) (undo-tree-id12491 . -61) (undo-tree-id12492 . -61) (undo-tree-id12493 . -61) (undo-tree-id12494 . -61) (undo-tree-id12495 . -61) (undo-tree-id12496 . -61) (undo-tree-id12497 . -61) (undo-tree-id12498 . -66) (undo-tree-id12499 . -66) (undo-tree-id12500 . -66) (undo-tree-id12501 . -66) (undo-tree-id12502 . -66) (undo-tree-id12503 . -66) (undo-tree-id12504 . -66) (undo-tree-id12505 . -66) (undo-tree-id12506 . -67) (undo-tree-id12507 . -67) (undo-tree-id12508 . -67) (undo-tree-id12509 . -67) (undo-tree-id12510 . -67) (undo-tree-id12511 . -67) (undo-tree-id12512 . -67) (undo-tree-id12513 . -67) (undo-tree-id12514 . -69) (undo-tree-id12515 . -69) (undo-tree-id12516 . -69) (undo-tree-id12517 . -69) (undo-tree-id12518 . -69) (undo-tree-id12519 . -69) (undo-tree-id12520 . -69) (undo-tree-id12521 . -69) (undo-tree-id12522 . -74) (undo-tree-id12523 . -74) (undo-tree-id12524 . -74) (undo-tree-id12525 . -74) (undo-tree-id12526 . -74) (undo-tree-id12527 . -74) (undo-tree-id12528 . -74) (undo-tree-id12529 . -74) (undo-tree-id12530 . -12) (undo-tree-id12531 . -12) (undo-tree-id12532 . -12) (undo-tree-id12533 . -12) (undo-tree-id12534 . -12) (undo-tree-id12535 . -12) (undo-tree-id12536 . -12) (undo-tree-id12537 . -12) (undo-tree-id12538 . -75) (undo-tree-id12539 . -75) (undo-tree-id12540 . -75) (undo-tree-id12541 . -75) (undo-tree-id12542 . -75) (undo-tree-id12543 . -75) (undo-tree-id12544 . -75) (undo-tree-id12545 . -75) (undo-tree-id12546 . -75) (undo-tree-id12547 . -76) 21169 (t 25758 52840 320241 119000)) nil (25758 52887 596658 593000) 0 nil])
([nil nil ((20941 . 20942) (t 25758 52887 633624 979000)) nil (25758 52981 255921 440000) 0 nil])
([nil nil ((20981 . 20982)) nil (25758 52981 255920 281000) 0 nil])
([nil nil ((nil line-prefix #("    " 0 4 (face org-indent)) 20984 . 20985) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20984 . 20985) (nil fontified nil 20984 . 20985) (20984 . 20985) (#("–" 0 1 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20984) (undo-tree-id12762 . -1)) nil (25758 52981 255918 823000) 0 nil])
([nil nil ((#("In a regular LSTM cell, the gate controllers can look only at the input x_(t)
" 0 73 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 73 74 (invisible t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 74 77 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 77 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20868) (undo-tree-id12660 . -77) (undo-tree-id12661 . 65) (undo-tree-id12662 . -17) (undo-tree-id12663 . -11) (undo-tree-id12664 . -75) (undo-tree-id12665 . -75) (undo-tree-id12666 . -75) (undo-tree-id12667 . -75) (undo-tree-id12668 . -75) (undo-tree-id12669 . -75) (undo-tree-id12670 . -75) (undo-tree-id12671 . -75) (undo-tree-id12672 . -73) (undo-tree-id12673 . -73) (undo-tree-id12674 . -73) (undo-tree-id12675 . -73) (undo-tree-id12676 . -73) (undo-tree-id12677 . -73) (undo-tree-id12678 . -73) (undo-tree-id12679 . -73) (undo-tree-id12680 . -73) (undo-tree-id12681 . -73) (undo-tree-id12682 . -73) (undo-tree-id12683 . -73) (undo-tree-id12684 . -73) (undo-tree-id12685 . -73) (undo-tree-id12686 . -73) (undo-tree-id12687 . -73) (undo-tree-id12688 . -73) (undo-tree-id12689 . -73) (undo-tree-id12690 . -73) (undo-tree-id12691 . -73) (undo-tree-id12692 . -73) (undo-tree-id12693 . -73) (undo-tree-id12694 . -73) (undo-tree-id12695 . -73) (undo-tree-id12696 . -73) (undo-tree-id12697 . -74) (undo-tree-id12698 . -74) (undo-tree-id12699 . -74) (undo-tree-id12700 . -74) (undo-tree-id12701 . -74) (undo-tree-id12702 . -74) (undo-tree-id12703 . -74) (undo-tree-id12704 . -74) (undo-tree-id12705 . -74) (undo-tree-id12706 . -73) (undo-tree-id12707 . -73) (undo-tree-id12708 . -73) (undo-tree-id12709 . -73) (undo-tree-id12710 . -73) (undo-tree-id12711 . -73) (undo-tree-id12712 . -73) (undo-tree-id12713 . -73) (undo-tree-id12714 . -73) (undo-tree-id12715 . -72) (undo-tree-id12716 . -72) (undo-tree-id12717 . -72) (undo-tree-id12718 . -72) (undo-tree-id12719 . -72) (undo-tree-id12720 . -72) (undo-tree-id12721 . -72) (undo-tree-id12722 . -72) (undo-tree-id12723 . -72) (undo-tree-id12724 . -72) (undo-tree-id12725 . -73) (undo-tree-id12726 . -75) (undo-tree-id12727 . -76) (undo-tree-id12728 . -78) (undo-tree-id12729 . -78) (undo-tree-id12730 . -78) (undo-tree-id12731 . -78) (undo-tree-id12732 . -78) (undo-tree-id12733 . -78) (undo-tree-id12734 . -78) (undo-tree-id12735 . -78) (undo-tree-id12736 . -78) (undo-tree-id12737 . -78) (undo-tree-id12738 . -78) (undo-tree-id12739 . -78) (undo-tree-id12740 . -78) (undo-tree-id12741 . -78) (undo-tree-id12742 . -78) (undo-tree-id12743 . -11) (undo-tree-id12744 . -11) (undo-tree-id12745 . -11) (undo-tree-id12746 . -11) (undo-tree-id12747 . -11) (undo-tree-id12748 . -11) (undo-tree-id12749 . -11) (undo-tree-id12750 . -11) (undo-tree-id12751 . -11) (undo-tree-id12752 . -11) (undo-tree-id12753 . -11) (undo-tree-id12754 . -11) (undo-tree-id12755 . -11) (undo-tree-id12756 . -11) (undo-tree-id12757 . -11) (undo-tree-id12758 . -11) (undo-tree-id12759 . -11) (undo-tree-id12760 . -11) (undo-tree-id12761 . -78) 20879) nil (25758 52981 256229 48000) 0 nil])
([nil nil ((#("and the previous short-term state h_(t-1). It may be a good idea to give them
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 11 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 11 35 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 35 36 (invisible t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 36 38 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 38 39 (display ((raise -0.3) (height 0.7)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 39 41 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 41 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20868) (undo-tree-id12860 . -77) (undo-tree-id12861 . 42) (undo-tree-id12862 . -11) (undo-tree-id12863 . -75) (undo-tree-id12864 . -75) (undo-tree-id12865 . -75) (undo-tree-id12866 . -75) (undo-tree-id12867 . -75) (undo-tree-id12868 . -75) (undo-tree-id12869 . -75) (undo-tree-id12870 . -75) (undo-tree-id12871 . -4) (undo-tree-id12872 . -8) (undo-tree-id12873 . -15) (undo-tree-id12874 . -21) (undo-tree-id12875 . -22) (undo-tree-id12876 . -34) (undo-tree-id12877 . -35) (undo-tree-id12878 . -35) (undo-tree-id12879 . -35) (undo-tree-id12880 . -35) (undo-tree-id12881 . -35) (undo-tree-id12882 . -35) (undo-tree-id12883 . -35) (undo-tree-id12884 . -35) (undo-tree-id12885 . -35) (undo-tree-id12886 . -35) (undo-tree-id12887 . -35) (undo-tree-id12888 . -35) (undo-tree-id12889 . -35) (undo-tree-id12890 . -35) (undo-tree-id12891 . -35) (undo-tree-id12892 . -35) (undo-tree-id12893 . -35) (undo-tree-id12894 . -36) (undo-tree-id12895 . -36) (undo-tree-id12896 . -36) (undo-tree-id12897 . -36) (undo-tree-id12898 . -36) (undo-tree-id12899 . -36) (undo-tree-id12900 . -36) (undo-tree-id12901 . -36) (undo-tree-id12902 . -36) (undo-tree-id12903 . -35) (undo-tree-id12904 . -35) (undo-tree-id12905 . -35) (undo-tree-id12906 . -35) (undo-tree-id12907 . -35) (undo-tree-id12908 . -35) (undo-tree-id12909 . -35) (undo-tree-id12910 . -35) (undo-tree-id12911 . -35) (undo-tree-id12912 . -34) (undo-tree-id12913 . -34) (undo-tree-id12914 . -34) (undo-tree-id12915 . -34) (undo-tree-id12916 . -34) (undo-tree-id12917 . -34) (undo-tree-id12918 . -34) (undo-tree-id12919 . -34) (undo-tree-id12920 . -34) (undo-tree-id12921 . -34) (undo-tree-id12922 . -35) (undo-tree-id12923 . -37) (undo-tree-id12924 . -38) (undo-tree-id12925 . -38) (undo-tree-id12926 . -38) (undo-tree-id12927 . -38) (undo-tree-id12928 . -38) (undo-tree-id12929 . -38) (undo-tree-id12930 . -38) (undo-tree-id12931 . -38) (undo-tree-id12932 . -38) (undo-tree-id12933 . -39) (undo-tree-id12934 . -40) (undo-tree-id12935 . -43) (undo-tree-id12936 . -43) (undo-tree-id12937 . -43) (undo-tree-id12938 . -43) (undo-tree-id12939 . -43) (undo-tree-id12940 . -43) (undo-tree-id12941 . -43) (undo-tree-id12942 . -43) (undo-tree-id12943 . -11) (undo-tree-id12944 . -11) (undo-tree-id12945 . -11) (undo-tree-id12946 . -11) (undo-tree-id12947 . -11) (undo-tree-id12948 . -11) (undo-tree-id12949 . -11) (undo-tree-id12950 . -11) (undo-tree-id12951 . -11) (undo-tree-id12952 . -11) (undo-tree-id12953 . -11) (undo-tree-id12954 . -11) (undo-tree-id12955 . -11) (undo-tree-id12956 . -11) (undo-tree-id12957 . -11) (undo-tree-id12958 . -11) (undo-tree-id12959 . -11) (undo-tree-id12960 . -11) (undo-tree-id12961 . -11) (undo-tree-id12962 . -11) (undo-tree-id12963 . -11) (undo-tree-id12964 . -11) (undo-tree-id12965 . -11) (undo-tree-id12966 . -11) (undo-tree-id12967 . -11) (undo-tree-id12968 . -11) (undo-tree-id12969 . -11) (undo-tree-id12970 . -11) (undo-tree-id12971 . -11) (undo-tree-id12972 . -11) (undo-tree-id12973 . -11) (undo-tree-id12974 . -11) (undo-tree-id12975 . -11) (undo-tree-id12976 . -11) (undo-tree-id12977 . -11) (undo-tree-id12978 . -11) (undo-tree-id12979 . -11) (undo-tree-id12980 . -11) (undo-tree-id12981 . -11) (undo-tree-id12982 . -11) (undo-tree-id12983 . -11) (undo-tree-id12984 . -11) (undo-tree-id12985 . -11) (undo-tree-id12986 . -11) (undo-tree-id12987 . -11) (undo-tree-id12988 . -11) (undo-tree-id12989 . -11) (undo-tree-id12990 . -78) 20879) nil (25758 52992 491898 928000) 0 nil] [nil nil ((#("and the previous short-term state h_(t-1). It may be a good idea to give them
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 35 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 35 36 (invisible t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 36 38 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 38 39 (display ((raise -0.3) (height 0.7)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 39 41 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 41 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20868) (undo-tree-id12548 . -77) (undo-tree-id12549 . 42) (undo-tree-id12550 . -11) (undo-tree-id12551 . -75) (undo-tree-id12552 . -75) (undo-tree-id12553 . -75) (undo-tree-id12554 . -75) (undo-tree-id12555 . -75) (undo-tree-id12556 . -75) (undo-tree-id12557 . -75) (undo-tree-id12558 . -75) (undo-tree-id12559 . -4) (undo-tree-id12560 . -8) (undo-tree-id12561 . -15) (undo-tree-id12562 . -21) (undo-tree-id12563 . -22) (undo-tree-id12564 . -34) (undo-tree-id12565 . -35) (undo-tree-id12566 . -35) (undo-tree-id12567 . -35) (undo-tree-id12568 . -35) (undo-tree-id12569 . -35) (undo-tree-id12570 . -35) (undo-tree-id12571 . -35) (undo-tree-id12572 . -35) (undo-tree-id12573 . -35) (undo-tree-id12574 . -35) (undo-tree-id12575 . -35) (undo-tree-id12576 . -35) (undo-tree-id12577 . -35) (undo-tree-id12578 . -35) (undo-tree-id12579 . -35) (undo-tree-id12580 . -35) (undo-tree-id12581 . -35) (undo-tree-id12582 . -36) (undo-tree-id12583 . -36) (undo-tree-id12584 . -36) (undo-tree-id12585 . -36) (undo-tree-id12586 . -36) (undo-tree-id12587 . -36) (undo-tree-id12588 . -36) (undo-tree-id12589 . -36) (undo-tree-id12590 . -36) (undo-tree-id12591 . -35) (undo-tree-id12592 . -35) (undo-tree-id12593 . -35) (undo-tree-id12594 . -35) (undo-tree-id12595 . -35) (undo-tree-id12596 . -35) (undo-tree-id12597 . -35) (undo-tree-id12598 . -35) (undo-tree-id12599 . -35) (undo-tree-id12600 . -34) (undo-tree-id12601 . -34) (undo-tree-id12602 . -34) (undo-tree-id12603 . -34) (undo-tree-id12604 . -34) (undo-tree-id12605 . -34) (undo-tree-id12606 . -34) (undo-tree-id12607 . -34) (undo-tree-id12608 . -34) (undo-tree-id12609 . -34) (undo-tree-id12610 . -35) (undo-tree-id12611 . -37) (undo-tree-id12612 . -38) (undo-tree-id12613 . -38) (undo-tree-id12614 . -38) (undo-tree-id12615 . -38) (undo-tree-id12616 . -38) (undo-tree-id12617 . -38) (undo-tree-id12618 . -38) (undo-tree-id12619 . -38) (undo-tree-id12620 . -38) (undo-tree-id12621 . -39) (undo-tree-id12622 . -40) (undo-tree-id12623 . -43) (undo-tree-id12624 . -43) (undo-tree-id12625 . -43) (undo-tree-id12626 . -43) (undo-tree-id12627 . -43) (undo-tree-id12628 . -43) (undo-tree-id12629 . -43) (undo-tree-id12630 . -43) (undo-tree-id12631 . -11) (undo-tree-id12632 . -11) (undo-tree-id12633 . -11) (undo-tree-id12634 . -11) (undo-tree-id12635 . -11) (undo-tree-id12636 . -11) (undo-tree-id12637 . -11) (undo-tree-id12638 . -11) (undo-tree-id12639 . -11) (undo-tree-id12640 . -11) (undo-tree-id12641 . -11) (undo-tree-id12642 . -11) (undo-tree-id12643 . -11) (undo-tree-id12644 . -11) (undo-tree-id12645 . -11) (undo-tree-id12646 . -11) (undo-tree-id12647 . -11) (undo-tree-id12648 . -11) (undo-tree-id12649 . -11) (undo-tree-id12650 . -11) (undo-tree-id12651 . -11) (undo-tree-id12652 . -11) (undo-tree-id12653 . -11) (undo-tree-id12654 . -11) (undo-tree-id12655 . -11) (undo-tree-id12656 . -11) (undo-tree-id12657 . -11) (undo-tree-id12658 . -11) (undo-tree-id12659 . -78) 20879) ((20868 . 20946)) (25758 52981 255785 819000) 0 nil])
([nil nil ((#("a bit more context by letting them peek at the long-term state as well. proposed an LSTM variant with extra connections called peephole
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 72 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 72 136 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20868) (undo-tree-id12810 . -135) (undo-tree-id12811 . -72) (undo-tree-id12812 . -72) (undo-tree-id12813 . 64) (undo-tree-id12814 . 136) (undo-tree-id12815 . -72) (undo-tree-id12816 . -11) (undo-tree-id12817 . -11) (undo-tree-id12818 . -11) (undo-tree-id12819 . -11) (undo-tree-id12820 . -11) (undo-tree-id12821 . -11) (undo-tree-id12822 . -11) (undo-tree-id12823 . -11) (undo-tree-id12824 . -11) (undo-tree-id12825 . -11) (undo-tree-id12826 . -11) (undo-tree-id12827 . -11) (undo-tree-id12828 . -11) (undo-tree-id12829 . -11) (undo-tree-id12830 . -11) (undo-tree-id12831 . -11) (undo-tree-id12832 . -11) (undo-tree-id12833 . -11) (undo-tree-id12834 . -11) (undo-tree-id12835 . -11) (undo-tree-id12836 . -11) (undo-tree-id12837 . -11) (undo-tree-id12838 . -11) (undo-tree-id12839 . -11) (undo-tree-id12840 . -11) (undo-tree-id12841 . -11) (undo-tree-id12842 . -11) (undo-tree-id12843 . -11) (undo-tree-id12844 . -11) (undo-tree-id12845 . -11) (undo-tree-id12846 . -11) (undo-tree-id12847 . -11) (undo-tree-id12848 . -11) (undo-tree-id12849 . -11) (undo-tree-id12850 . -11) (undo-tree-id12851 . -11) (undo-tree-id12852 . -11) (undo-tree-id12853 . -11) (undo-tree-id12854 . -11) (undo-tree-id12855 . -11) (undo-tree-id12856 . -11) (undo-tree-id12857 . -11) (undo-tree-id12858 . -11) (undo-tree-id12859 . -136) 20879) nil (25758 52992 491672 269000) 0 nil])
nil
([nil nil ((20868 . 20869) (#("connections: t" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 14 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20868) (undo-tree-id12763 . -13) (undo-tree-id12764 . -13) (undo-tree-id12765 . 14) (undo-tree-id12766 . -13) (undo-tree-id12767 . -11) (undo-tree-id12768 . -11) (undo-tree-id12769 . -11) (undo-tree-id12770 . -11) (undo-tree-id12771 . -11) (undo-tree-id12772 . -11) (undo-tree-id12773 . -11) (undo-tree-id12774 . -11) (undo-tree-id12775 . -11) (undo-tree-id12776 . -11) (undo-tree-id12777 . -14) (undo-tree-id12778 . -13) (undo-tree-id12779 . -10) (undo-tree-id12780 . -10) (undo-tree-id12781 . -10) (undo-tree-id12782 . -10) (undo-tree-id12783 . -10) (undo-tree-id12784 . -10) (undo-tree-id12785 . -10) (undo-tree-id12786 . -10) (undo-tree-id12787 . -11) (undo-tree-id12788 . -11) (undo-tree-id12789 . -11) (undo-tree-id12790 . -11) (undo-tree-id12791 . -11) (undo-tree-id12792 . -11) (undo-tree-id12793 . -11) (undo-tree-id12794 . -11) (undo-tree-id12795 . 14) (undo-tree-id12796 . -11) (undo-tree-id12797 . -12) (undo-tree-id12798 . -12) (undo-tree-id12799 . -12) (undo-tree-id12800 . -12) (undo-tree-id12801 . -12) (undo-tree-id12802 . -12) (undo-tree-id12803 . -12) (undo-tree-id12804 . -12) (undo-tree-id12805 . -13) (undo-tree-id12806 . -13) (undo-tree-id12807 . -14) (undo-tree-id12808 . -14) (undo-tree-id12809 . -14) 20881) nil (25758 52992 491629 847000) 0 nil])
([nil nil ((20898 . 20899) (t 25758 52992 520611 214000)) nil (25758 53051 526874 724000) 0 nil])
([nil nil ((nil line-prefix #("    " 0 4 (face org-indent)) 20901 . 20902) (nil wrap-prefix #("    " 0 4 (face org-indent)) 20901 . 20902) (nil fontified nil 20901 . 20902) (20901 . 20902) (#("–" 0 1 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 20901) (undo-tree-id13014 . -1)) nil (25758 53051 526873 458000) 0 nil])
([nil nil ((21017 . 21018)) nil (25758 53051 526871 401000) 0 nil])
([nil nil ((21267 . 21269)) nil (25758 53051 526870 642000) 0 nil])
([nil nil ((#("In Keras, the LSTM layer is based on the keras.layers.LSTMCell cell,
" 0 69 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21269) (undo-tree-id13011 . -68) (undo-tree-id13012 . 69) (undo-tree-id13013 . -69)) nil (25758 53051 526869 703000) 0 nil])
([nil nil ((#("which does not support peepholes. The experimental
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 51 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21269) (undo-tree-id13008 . -50) (undo-tree-id13009 . 51) (undo-tree-id13010 . -51)) nil (25758 53051 526867 22000) 0 nil])
([nil nil ((#("tf.keras.experimental.PeepholeLSTMCell does, however, so you can
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 65 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21269) (undo-tree-id13003 . -64) (undo-tree-id13004 . 65) (undo-tree-id13005 . 65) (undo-tree-id13006 . -2) (undo-tree-id13007 . -65)) nil (25758 53051 526864 270000) 0 nil])
([nil nil ((#("create a keras.layers.RNN layer and pass a PeepholeLSTMCell to its
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 59 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 59 67 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21269) (undo-tree-id13000 . -66) (undo-tree-id13001 . 67) (undo-tree-id13002 . -67)) nil (25758 53051 526860 266000) 0 nil])
([nil nil ((#("constructor.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 13 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21269) (undo-tree-id12997 . -12) (undo-tree-id12998 . 13) (undo-tree-id12999 . -13)) nil (25758 53051 526857 292000) 0 nil])
([nil nil ((#("There are many other variants of the LSTM cell. One particularly popular
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 73 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21269) (undo-tree-id12994 . -72) (undo-tree-id12995 . 73) (undo-tree-id12996 . -73)) nil (25758 53051 526853 126000) 0 nil])
([nil nil ((#("variant is the GRU cell, which we will look at now.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 50 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 50 51 (rear-nonsticky t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 51 52 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 21269) (undo-tree-id12991 . -51) (undo-tree-id12992 . 52) (undo-tree-id12993 . -52)) nil (25758 53051 526845 643000) 0 nil])
([nil nil ((21271 . 21272) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21267) (21269 . 21272) (t 25758 53051 606250 277000)) nil (25758 53089 61575 732000) 0 nil])
([nil nil ((nil rear-nonsticky nil 21462 . 21463) (nil fontified nil 21426 . 21463) (nil fontified nil 21353 . 21426) (nil fontified nil 21282 . 21353) (nil fontified nil 21272 . 21282) (21272 . 21463)) nil (25758 53089 61574 348000) 0 nil])
([nil nil ((21463 . 21464)) nil (25758 53089 61572 331000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22132 . 22133) (nil fontified nil 22126 . 22133) (nil fontified nil 22061 . 22126) (nil fontified nil 21991 . 22061) (nil fontified nil 21925 . 21991) (nil fontified nil 21859 . 21925) (nil fontified nil 21789 . 21859) (nil fontified nil 21728 . 21789) (nil fontified nil 21656 . 21728) (nil fontified nil 21589 . 21656) (nil fontified nil 21521 . 21589) (nil fontified nil 21464 . 21521) (21464 . 22133)) nil (25758 53089 61567 20000) 0 nil])
([nil nil ((22133 . 22134) (t 25758 53089 99276 231000)) nil (25758 53100 943726 170000) 0 nil])
([nil nil ((#("* 
" 0 1 (face org-level-1 keymap (keymap) composition (0 1 [9673]) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 1 2 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 2 3 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 22135) (undo-tree-id13015 . -2) (undo-tree-id13016 . -1) (undo-tree-id13017 . -3) (undo-tree-id13018 . -3) (undo-tree-id13019 . -3) (undo-tree-id13020 . -3) (undo-tree-id13021 . -3) (undo-tree-id13022 . -3) (undo-tree-id13023 . -3) (undo-tree-id13024 . -3) (undo-tree-id13025 . -3) (undo-tree-id13026 . -3) (undo-tree-id13027 . -3) (undo-tree-id13028 . -3) (undo-tree-id13029 . -3) (undo-tree-id13030 . -3) (undo-tree-id13031 . -3) (undo-tree-id13032 . -3) (undo-tree-id13033 . -3) (undo-tree-id13034 . -3) (t 25758 53100 979599 192000)) nil (25758 53117 242690 593000) 0 nil])
([nil nil ((nil keymap (keymap) 21270 . 21271) (nil face org-level-2 21270 . 21271) (nil line-prefix #("    " 0 4 (face org-indent)) 21270 . 21271) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21270 . 21271) (nil fontified nil 21270 . 21271) (21270 . 21271) (#(" " 0 1 (face org-level-2 keymap (keymap) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified nil)) . 21270) (undo-tree-id13500 . -1) (undo-tree-id13501 . -1) (undo-tree-id13502 . -1) (undo-tree-id13503 . -1) (undo-tree-id13504 . -1) (undo-tree-id13505 . -1) (undo-tree-id13506 . -1) (undo-tree-id13507 . -1) (undo-tree-id13508 . -1) (undo-tree-id13509 . -1) (undo-tree-id13510 . -1) (undo-tree-id13511 . -1) (undo-tree-id13512 . -1) (undo-tree-id13513 . -1) (undo-tree-id13514 . -1) (undo-tree-id13515 . -1) (undo-tree-id13516 . -1) (undo-tree-id13517 . -1) (undo-tree-id13518 . -1) (undo-tree-id13519 . -1) (undo-tree-id13520 . -1) (undo-tree-id13521 . -1) (undo-tree-id13522 . -1) (undo-tree-id13523 . -1) (undo-tree-id13524 . -1) (undo-tree-id13525 . -1) (undo-tree-id13526 . -1) (undo-tree-id13527 . -1) (undo-tree-id13528 . -1) (undo-tree-id13529 . -1) (undo-tree-id13530 . -1) (undo-tree-id13531 . -1) (undo-tree-id13532 . -1) (undo-tree-id13533 . -1) (undo-tree-id13534 . -1) (undo-tree-id13535 . -1) (undo-tree-id13536 . -1) (undo-tree-id13537 . -1) (undo-tree-id13538 . -1) (undo-tree-id13539 . -1) (undo-tree-id13540 . -1) (undo-tree-id13541 . -1) (undo-tree-id13542 . -1) (undo-tree-id13543 . -1) (undo-tree-id13544 . -1) (undo-tree-id13545 . -1) (undo-tree-id13546 . -1) (undo-tree-id13547 . -1) (undo-tree-id13548 . -1) (#("
" 0 1 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -21271) (undo-tree-id13549 . -1) (undo-tree-id13550 . -1) (undo-tree-id13551 . -1) (t 25758 53117 276040 605000)) nil (25758 54824 871469 342000) 0 nil])
([nil nil ((#("(see Figure 15-10)" 0 18 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21317) (undo-tree-id13498 . -17) (undo-tree-id13499 . -18) 21312) nil (25758 54824 871436 566000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21317) (undo-tree-id13496 . -1) (undo-tree-id13497 . -1)) nil (25758 54824 871433 131000) 0 nil])
([nil nil ((#("cell was proposed by" 0 20 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21312) (undo-tree-id13472 . -19) (undo-tree-id13473 . -5) (undo-tree-id13474 . -5) (undo-tree-id13475 . -5) (undo-tree-id13476 . -5) (undo-tree-id13477 . -5) (undo-tree-id13478 . -5) (undo-tree-id13479 . -5) (undo-tree-id13480 . -5) (undo-tree-id13481 . -5) (undo-tree-id13482 . -5) (undo-tree-id13483 . -5) (undo-tree-id13484 . -5) (undo-tree-id13485 . -5) (undo-tree-id13486 . -5) (undo-tree-id13487 . -5) (undo-tree-id13488 . -5) (undo-tree-id13489 . -5) (undo-tree-id13490 . -5) (undo-tree-id13491 . -5) (undo-tree-id13492 . -9) (undo-tree-id13493 . -18) (undo-tree-id13494 . -20) (undo-tree-id13495 . -20)) nil (25758 54824 871430 99000) 0 nil])
([nil nil ((#("Kyunghyun" 0 9 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21313) (undo-tree-id13468 . -8) (undo-tree-id13469 . 9) (undo-tree-id13470 . -9) (undo-tree-id13471 . -9)) nil (25758 54824 871414 418000) 0 nil])
([nil nil ((#(" Cho et al. in a 2014 paper11 that also introduced the Encoder–
Decoder network we discussed earlier." 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 64 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 64 100 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 100 101 (rear-nonsticky t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21313) (undo-tree-id13342 . -100) (undo-tree-id13343 . -100) (undo-tree-id13344 . -100) (undo-tree-id13345 . -64) (undo-tree-id13346 . -64) (undo-tree-id13347 . -64) (undo-tree-id13348 . -64) (undo-tree-id13349 . -64) (undo-tree-id13350 . -64) (undo-tree-id13351 . -64) (undo-tree-id13352 . -64) (undo-tree-id13353 . -64) (undo-tree-id13354 . -64) (undo-tree-id13355 . -64) (undo-tree-id13356 . -64) (undo-tree-id13357 . -64) (undo-tree-id13358 . -64) (undo-tree-id13359 . -64) (undo-tree-id13360 . -64) (undo-tree-id13361 . -64) (undo-tree-id13362 . -64) (undo-tree-id13363 . -64) (undo-tree-id13364 . -64) (undo-tree-id13365 . -64) (undo-tree-id13366 . -64) (undo-tree-id13367 . -64) (undo-tree-id13368 . -64) (undo-tree-id13369 . -64) (undo-tree-id13370 . -64) (undo-tree-id13371 . -64) (undo-tree-id13372 . -64) (undo-tree-id13373 . -64) (undo-tree-id13374 . -64) (undo-tree-id13375 . -64) (undo-tree-id13376 . -64) (undo-tree-id13377 . -64) (undo-tree-id13378 . -64) (undo-tree-id13379 . -64) (undo-tree-id13380 . -101) (undo-tree-id13381 . -100) (undo-tree-id13382 . 100) (undo-tree-id13383 . -4) (undo-tree-id13384 . -3) (undo-tree-id13385 . -3) (undo-tree-id13386 . -3) (undo-tree-id13387 . -3) (undo-tree-id13388 . -3) (undo-tree-id13389 . -3) (undo-tree-id13390 . -3) (undo-tree-id13391 . -3) (undo-tree-id13392 . 96) (undo-tree-id13393 . -7) (undo-tree-id13394 . -6) (undo-tree-id13395 . 93) (undo-tree-id13396 . -10) (undo-tree-id13397 . -9) (undo-tree-id13398 . -10) (undo-tree-id13399 . -13) (undo-tree-id13400 . -15) (undo-tree-id13401 . -20) (undo-tree-id13402 . -28) (undo-tree-id13403 . -33) (undo-tree-id13404 . -38) (undo-tree-id13405 . -49) (undo-tree-id13406 . -53) (undo-tree-id13407 . -61) (undo-tree-id13408 . -62) (undo-tree-id13409 . -70) (undo-tree-id13410 . -70) (undo-tree-id13411 . -70) (undo-tree-id13412 . -70) (undo-tree-id13413 . -70) (undo-tree-id13414 . -70) (undo-tree-id13415 . -70) (undo-tree-id13416 . -70) (undo-tree-id13417 . -78) (undo-tree-id13418 . -78) (undo-tree-id13419 . -78) (undo-tree-id13420 . -78) (undo-tree-id13421 . -78) (undo-tree-id13422 . -78) (undo-tree-id13423 . -78) (undo-tree-id13424 . -78) (undo-tree-id13425 . -78) (undo-tree-id13426 . -78) (undo-tree-id13427 . -78) (undo-tree-id13428 . -78) (undo-tree-id13429 . -78) (undo-tree-id13430 . -78) (undo-tree-id13431 . -78) (undo-tree-id13432 . -78) (undo-tree-id13433 . -78) (undo-tree-id13434 . -81) (undo-tree-id13435 . -81) (undo-tree-id13436 . -81) (undo-tree-id13437 . -81) (undo-tree-id13438 . -81) (undo-tree-id13439 . -81) (undo-tree-id13440 . -81) (undo-tree-id13441 . -81) (undo-tree-id13442 . -91) (undo-tree-id13443 . -91) (undo-tree-id13444 . -91) (undo-tree-id13445 . -91) (undo-tree-id13446 . -91) (undo-tree-id13447 . -91) (undo-tree-id13448 . -91) (undo-tree-id13449 . -91) (undo-tree-id13450 . -99) (undo-tree-id13451 . -99) (undo-tree-id13452 . -99) (undo-tree-id13453 . -99) (undo-tree-id13454 . -99) (undo-tree-id13455 . -99) (undo-tree-id13456 . -99) (undo-tree-id13457 . -99) (undo-tree-id13458 . -100) (undo-tree-id13459 . -100) (undo-tree-id13460 . -100) (undo-tree-id13461 . -100) (undo-tree-id13462 . -100) (undo-tree-id13463 . -100) (undo-tree-id13464 . -100) (undo-tree-id13465 . -100) (undo-tree-id13466 . -100) (undo-tree-id13467 . -101) 21413) nil (25758 54824 871407 289000) 0 nil])
([nil nil ((#("The Gated Recurrent Unit (GRU) 
" 0 31 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 31 32 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21281) (undo-tree-id13046 . -31) (undo-tree-id13047 . -32) (undo-tree-id13048 . -32) (undo-tree-id13049 . -32) (undo-tree-id13050 . -32) (undo-tree-id13051 . -32) (undo-tree-id13052 . -32) (undo-tree-id13053 . -32) (undo-tree-id13054 . -32) (undo-tree-id13055 . -32) (undo-tree-id13056 . -32) (undo-tree-id13057 . -32) (undo-tree-id13058 . -32) (undo-tree-id13059 . -32) (undo-tree-id13060 . -32) (undo-tree-id13061 . -32) (undo-tree-id13062 . -32) (undo-tree-id13063 . -32) (undo-tree-id13064 . -32) (undo-tree-id13065 . -32) (undo-tree-id13066 . -32) (undo-tree-id13067 . -32) (undo-tree-id13068 . -32) (undo-tree-id13069 . -32) (undo-tree-id13070 . -32) (undo-tree-id13071 . -32) (undo-tree-id13072 . -32) (undo-tree-id13073 . -32) (undo-tree-id13074 . -32) (undo-tree-id13075 . -32) (undo-tree-id13076 . -32) (undo-tree-id13077 . -32) (undo-tree-id13078 . -32) (undo-tree-id13079 . -32) (undo-tree-id13080 . -32) (undo-tree-id13081 . -32) (undo-tree-id13082 . -32) (undo-tree-id13083 . -32) (undo-tree-id13084 . -4) (undo-tree-id13085 . -10) (undo-tree-id13086 . -20) (undo-tree-id13087 . -20) (undo-tree-id13088 . -20) (undo-tree-id13089 . -20) (undo-tree-id13090 . -20) (undo-tree-id13091 . -20) (undo-tree-id13092 . -20) (undo-tree-id13093 . -20) (undo-tree-id13094 . -20) (undo-tree-id13095 . -20) (undo-tree-id13096 . -20) (undo-tree-id13097 . -20) (undo-tree-id13098 . -20) (undo-tree-id13099 . -20) (undo-tree-id13100 . -20) (undo-tree-id13101 . -20) (undo-tree-id13102 . -20) (undo-tree-id13103 . -20) (undo-tree-id13104 . -20) (undo-tree-id13105 . -20) (undo-tree-id13106 . -25) (undo-tree-id13107 . -25) (undo-tree-id13108 . -25) (undo-tree-id13109 . -25) (undo-tree-id13110 . -25) (undo-tree-id13111 . -25) (undo-tree-id13112 . -25) (undo-tree-id13113 . -25) (undo-tree-id13114 . -26) (undo-tree-id13115 . -26) (undo-tree-id13116 . -26) (undo-tree-id13117 . -26) (undo-tree-id13118 . -26) (undo-tree-id13119 . -26) (undo-tree-id13120 . -26) (undo-tree-id13121 . -26) (undo-tree-id13122 . -26) (undo-tree-id13123 . -26) (undo-tree-id13124 . -26) (undo-tree-id13125 . -26) (undo-tree-id13126 . -26) (undo-tree-id13127 . -26) (undo-tree-id13128 . -26) (undo-tree-id13129 . -29) (undo-tree-id13130 . -29) (undo-tree-id13131 . -29) (undo-tree-id13132 . -29) (undo-tree-id13133 . -29) (undo-tree-id13134 . -29) (undo-tree-id13135 . -29) (undo-tree-id13136 . -29) (undo-tree-id13137 . -31) (undo-tree-id13138 . -31) (undo-tree-id13139 . -31) (undo-tree-id13140 . -31) (undo-tree-id13141 . -31) (undo-tree-id13142 . -31) (undo-tree-id13143 . -31) (undo-tree-id13144 . -31) (undo-tree-id13145 . -31) (undo-tree-id13146 . -31) (undo-tree-id13147 . -31) (undo-tree-id13148 . -31) (undo-tree-id13149 . -31) (undo-tree-id13150 . -31) (undo-tree-id13151 . -31) (undo-tree-id13152 . -31) (undo-tree-id13153 . -31) (undo-tree-id13154 . -31) (undo-tree-id13155 . -31) (undo-tree-id13156 . -31) (undo-tree-id13157 . -31) (undo-tree-id13158 . -31) (undo-tree-id13159 . -31) (undo-tree-id13160 . -31) (undo-tree-id13161 . -31) (undo-tree-id13162 . -31) (undo-tree-id13163 . -31) (undo-tree-id13164 . -31) (undo-tree-id13165 . -31) (undo-tree-id13166 . -31) (undo-tree-id13167 . -31) (undo-tree-id13168 . -31) (undo-tree-id13169 . -31) (undo-tree-id13170 . -31) (undo-tree-id13171 . -31) (undo-tree-id13172 . -31) (undo-tree-id13173 . -31) (undo-tree-id13174 . -31) (undo-tree-id13175 . -32) (undo-tree-id13176 . -32) (undo-tree-id13177 . -32) (undo-tree-id13178 . -32) (undo-tree-id13179 . -32) (undo-tree-id13180 . -32) (undo-tree-id13181 . -32) (undo-tree-id13182 . -32) (undo-tree-id13183 . -32) (undo-tree-id13184 . -32) (undo-tree-id13185 . -32) (undo-tree-id13186 . -32) (undo-tree-id13187 . -32) (undo-tree-id13188 . -32) (undo-tree-id13189 . -32) (undo-tree-id13190 . -4) (undo-tree-id13191 . -10) (undo-tree-id13192 . -20) (undo-tree-id13193 . -25) (undo-tree-id13194 . -26) (undo-tree-id13195 . -29) (undo-tree-id13196 . -31) (undo-tree-id13197 . -31) (undo-tree-id13198 . -30) (undo-tree-id13199 . -30) (undo-tree-id13200 . -30) (undo-tree-id13201 . -30) (undo-tree-id13202 . -30) (undo-tree-id13203 . -30) (undo-tree-id13204 . -30) (undo-tree-id13205 . -30) (undo-tree-id13206 . -30) (undo-tree-id13207 . -32) (undo-tree-id13208 . -32) (undo-tree-id13209 . -32) (undo-tree-id13210 . -32) (undo-tree-id13211 . -32) (undo-tree-id13212 . -32) (undo-tree-id13213 . -32) (undo-tree-id13214 . -32) (undo-tree-id13215 . -32) (undo-tree-id13216 . -32) (undo-tree-id13217 . -32) (undo-tree-id13218 . -32) (undo-tree-id13219 . -32) (undo-tree-id13220 . -32) (undo-tree-id13221 . -32) (undo-tree-id13222 . -32) (undo-tree-id13223 . -32) (undo-tree-id13224 . -32) (undo-tree-id13225 . -32) (undo-tree-id13226 . -32) (undo-tree-id13227 . -32) (undo-tree-id13228 . -32) (undo-tree-id13229 . -32) (undo-tree-id13230 . -32) (undo-tree-id13231 . -32) (undo-tree-id13232 . -32) (undo-tree-id13233 . -32) (undo-tree-id13234 . -32) (undo-tree-id13235 . -32) (undo-tree-id13236 . -32) (undo-tree-id13237 . -32) (undo-tree-id13238 . -32) (undo-tree-id13239 . -32) (undo-tree-id13240 . -32) (undo-tree-id13241 . -32) (undo-tree-id13242 . -32) (undo-tree-id13243 . -32) (undo-tree-id13244 . -32) (undo-tree-id13245 . -32) (undo-tree-id13246 . -32) (undo-tree-id13247 . -32) (undo-tree-id13248 . -32) (undo-tree-id13249 . -32) (undo-tree-id13250 . -32) (undo-tree-id13251 . -32) (undo-tree-id13252 . -32) (undo-tree-id13253 . -32) (undo-tree-id13254 . -32) (undo-tree-id13255 . -32) (undo-tree-id13256 . -32) (undo-tree-id13257 . -32) (undo-tree-id13258 . -32) (undo-tree-id13259 . -32) (undo-tree-id13260 . -32) (undo-tree-id13261 . -32) (undo-tree-id13262 . -32) (undo-tree-id13263 . -32) (undo-tree-id13264 . -32) (undo-tree-id13265 . -32) (undo-tree-id13266 . -32) (undo-tree-id13267 . -32) (undo-tree-id13268 . -32) (undo-tree-id13269 . -32) (undo-tree-id13270 . -32) (undo-tree-id13271 . -32) (undo-tree-id13272 . -32) (undo-tree-id13273 . -32) (undo-tree-id13274 . -32) (undo-tree-id13275 . -32) (undo-tree-id13276 . -32) (undo-tree-id13277 . -32) (undo-tree-id13278 . -32) (undo-tree-id13279 . -32) (undo-tree-id13280 . -32) (undo-tree-id13281 . -32) (undo-tree-id13282 . -32) (undo-tree-id13283 . -32) (undo-tree-id13284 . -32) (undo-tree-id13285 . -32) (undo-tree-id13286 . -32) (undo-tree-id13287 . -32) (undo-tree-id13288 . -32) (undo-tree-id13289 . -32) (undo-tree-id13290 . -32) (undo-tree-id13291 . -32) (undo-tree-id13292 . -32) (undo-tree-id13293 . -32) (undo-tree-id13294 . -32) (undo-tree-id13295 . -32) (undo-tree-id13296 . -32) (undo-tree-id13297 . -32) (undo-tree-id13298 . -32) (undo-tree-id13299 . -32) (undo-tree-id13300 . -32) (undo-tree-id13301 . -32) (undo-tree-id13302 . -32) (undo-tree-id13303 . -32) (undo-tree-id13304 . -32) (undo-tree-id13305 . -32) (undo-tree-id13306 . -32) (undo-tree-id13307 . -32) (undo-tree-id13308 . -32) (undo-tree-id13309 . -32) (undo-tree-id13310 . -32) (undo-tree-id13311 . -32) (undo-tree-id13312 . -32) (undo-tree-id13313 . -32) (undo-tree-id13314 . -32) (undo-tree-id13315 . -32) (undo-tree-id13316 . -32) (undo-tree-id13317 . -32) (undo-tree-id13318 . -32) (undo-tree-id13319 . -32) (undo-tree-id13320 . -32) (undo-tree-id13321 . -32) (undo-tree-id13322 . 6) (undo-tree-id13323 . -29) (undo-tree-id13324 . -32) (undo-tree-id13325 . -32) (undo-tree-id13326 . -32) (undo-tree-id13327 . -32) (undo-tree-id13328 . -32) (undo-tree-id13329 . -32) (undo-tree-id13330 . -32) (undo-tree-id13331 . -32) (undo-tree-id13332 . -32) (undo-tree-id13333 . -32) (undo-tree-id13334 . -32) (undo-tree-id13335 . -32) (undo-tree-id13336 . -32) (undo-tree-id13337 . -32) (undo-tree-id13338 . -32) (undo-tree-id13339 . -32) (undo-tree-id13340 . -32) (undo-tree-id13341 . -32)) nil (25758 54824 871171 446000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 21281) (undo-tree-id13035 . 1) (undo-tree-id13036 . -1) (undo-tree-id13037 . -1) (undo-tree-id13038 . -1) (undo-tree-id13039 . -1) (undo-tree-id13040 . -1) (undo-tree-id13041 . -1) (undo-tree-id13042 . -1) (undo-tree-id13043 . -1) (undo-tree-id13044 . -1) (undo-tree-id13045 . -1)) nil (25758 54824 870509 714000) 0 nil])
([nil nil ((21516 . 21517) (#("–" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21516) (undo-tree-id13552 . -1) (t 25758 54824 955726 418000)) nil (25758 54854 149538 514000) 0 nil])
([nil nil ((21526 . 21528)) nil (25758 54854 149476 514000) 0 nil])
([nil nil ((21546 . 21547) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21546) (undo-tree-id13579 . -1) 21528 (t 25758 54854 187793 864000)) nil (25758 54906 807233 47000) 0 nil])
([nil nil ((21569 . 21570)) nil (25758 54906 807230 788000) 0 nil])
([nil nil ((21674 . 21675)) nil (25758 54906 807229 955000) 0 nil])
([nil nil ((#("This
" 0 5 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13568 . -4) (undo-tree-id13569 . 5) (undo-tree-id13570 . -5) (undo-tree-id13571 . -5) (undo-tree-id13572 . -5) (undo-tree-id13573 . -5) (undo-tree-id13574 . -5) (undo-tree-id13575 . -5) (undo-tree-id13576 . -5) (undo-tree-id13577 . -5) (undo-tree-id13578 . -5)) nil (25758 54906 807228 475000) 0 nil])
([nil nil ((#("is actually a frequent variant to the LSTM cell in and of itself.
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13565 . -65) (undo-tree-id13566 . 66) (undo-tree-id13567 . -66)) nil (25758 54906 807218 234000) 0 nil])
([nil nil ((#("There is no output gate; the full state vector is output at every
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 39 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 39 66 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13562 . -65) (undo-tree-id13563 . 66) (undo-tree-id13564 . -66)) nil (25758 54906 807215 254000) 0 nil])
([nil nil ((#("time " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 5 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13559 . -4) (undo-tree-id13560 . 5) (undo-tree-id13561 . -5)) nil (25758 54906 807211 474000) 0 nil])
([nil nil ((#("step" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 4 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13556 . -3) (undo-tree-id13557 . 4) (undo-tree-id13558 . -4)) nil (25758 54906 807208 9000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13553 . -1) (undo-tree-id13554 . 2) (undo-tree-id13555 . -2)) nil (25758 54906 807202 168000) 0 nil])
([nil nil ((#("However, " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 9 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675) (undo-tree-id13580 . -8) (undo-tree-id13581 . -8) (undo-tree-id13582 . 9) (undo-tree-id13583 . -8) (undo-tree-id13584 . -9) (undo-tree-id13585 . -8) (undo-tree-id13586 . -6) (undo-tree-id13587 . -6) (undo-tree-id13588 . -6) (undo-tree-id13589 . -6) (undo-tree-id13590 . -6) (undo-tree-id13591 . -6) (undo-tree-id13592 . -6) (undo-tree-id13593 . -6) (undo-tree-id13594 . -7) (undo-tree-id13595 . -7) (undo-tree-id13596 . -7) (undo-tree-id13597 . -7) (undo-tree-id13598 . -7) (undo-tree-id13599 . -7) (undo-tree-id13600 . -7) (undo-tree-id13601 . -7) (undo-tree-id13602 . -8) (undo-tree-id13603 . -8) (undo-tree-id13604 . -8) (undo-tree-id13605 . -8) (undo-tree-id13606 . -8) (undo-tree-id13607 . -8) (undo-tree-id13608 . -8) (undo-tree-id13609 . -8) (undo-tree-id13610 . -8) (undo-tree-id13611 . -9) (undo-tree-id13612 . -9) (undo-tree-id13613 . -9) 21683 (t 25758 54906 891938 19000)) nil (25758 54911 939579 200000) 0 nil])
([nil nil ((21675 . 21676) (#("t" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21675)) nil (25758 54911 939538 801000) 0 nil])
([nil nil ((21798 . 21799) (21797 . 21798) (t 25758 54911 975953 375000) 21796) nil (25758 54920 920216 457000) 0 nil])
([nil nil ((21472 . 21473) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21472) (undo-tree-id13700 . -1) (undo-tree-id13701 . -1) (undo-tree-id13702 . -1) (undo-tree-id13703 . -1) (undo-tree-id13704 . -1) (undo-tree-id13705 . -1) (undo-tree-id13706 . -1) (undo-tree-id13707 . -1) (undo-tree-id13708 . -1) (21405 . 21406) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21405) (undo-tree-id13709 . -1) (undo-tree-id13710 . -1) (undo-tree-id13711 . -1) (undo-tree-id13712 . -1) (undo-tree-id13713 . -1) (undo-tree-id13714 . -1) (undo-tree-id13715 . -1) (undo-tree-id13716 . -1) (undo-tree-id13717 . -1) (21337 . 21338) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21337) (undo-tree-id13718 . -1) (undo-tree-id13719 . -1) (undo-tree-id13720 . -1) (undo-tree-id13721 . -1) (undo-tree-id13722 . -1) (undo-tree-id13723 . -1) (undo-tree-id13724 . -1) (undo-tree-id13725 . -1) (undo-tree-id13726 . -1) 21281 (t 25758 54920 959981 106000)) nil (25758 54930 992228 812000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21506) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21505 . 21506) (21505 . 21506) (#(" " 0 1 (fontified nil wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21430) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21429 . 21430) (21429 . 21430) (#(" " 0 1 (fontified nil wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21352) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21351 . 21352) (21351 . 21352) (#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21525) (undo-tree-id13699 . -1) 21472) nil (25758 54930 992210 600000) 0 nil])
([nil nil ((21721 . 21722) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21721) (undo-tree-id13623 . -1) (undo-tree-id13624 . -1) (undo-tree-id13625 . -1) (undo-tree-id13626 . -1) (undo-tree-id13627 . -1) (undo-tree-id13628 . -1) (undo-tree-id13629 . -1) (undo-tree-id13630 . -1) (undo-tree-id13631 . -1) (21671 . 21672) (#(" " 0 1 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21671) (undo-tree-id13632 . -1) (undo-tree-id13633 . -1) (undo-tree-id13634 . -1) (undo-tree-id13635 . -1) (undo-tree-id13636 . -1) (undo-tree-id13637 . -1) (undo-tree-id13638 . -1) (undo-tree-id13639 . -1) (undo-tree-id13640 . -1) (undo-tree-id13641 . -1) (undo-tree-id13642 . -1) (undo-tree-id13643 . -1) (undo-tree-id13644 . -1) (undo-tree-id13645 . -1) (undo-tree-id13646 . -1) (undo-tree-id13647 . -1) (undo-tree-id13648 . -1) (undo-tree-id13649 . -1) (undo-tree-id13650 . -1) (undo-tree-id13651 . -1) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21672) (undo-tree-id13652 . -1) (undo-tree-id13653 . -1) (undo-tree-id13654 . -1) (undo-tree-id13655 . -1) (undo-tree-id13656 . -1) (undo-tree-id13657 . -1) (undo-tree-id13658 . -1) (undo-tree-id13659 . -1) (undo-tree-id13660 . -1) (undo-tree-id13661 . -1) (undo-tree-id13662 . -1) (undo-tree-id13663 . -1) (undo-tree-id13664 . -1) (undo-tree-id13665 . -1) (undo-tree-id13666 . -1) (undo-tree-id13667 . -1) (undo-tree-id13668 . -1) (undo-tree-id13669 . -1) (undo-tree-id13670 . -1) (21606 . 21607) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21606) (undo-tree-id13671 . -1) (undo-tree-id13672 . -1) (undo-tree-id13673 . -1) (undo-tree-id13674 . -1) (undo-tree-id13675 . -1) (undo-tree-id13676 . -1) (undo-tree-id13677 . -1) (undo-tree-id13678 . -1) (undo-tree-id13679 . -1) (21567 . 21568) (#(" " 0 1 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 21567) (undo-tree-id13680 . -1) (undo-tree-id13681 . -1) (undo-tree-id13682 . -1) (undo-tree-id13683 . -1) (undo-tree-id13684 . -1) (undo-tree-id13685 . -1) (undo-tree-id13686 . -1) (undo-tree-id13687 . -1) (undo-tree-id13688 . -1) (undo-tree-id13689 . -1) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21568) (undo-tree-id13690 . -1) (undo-tree-id13691 . -1) (undo-tree-id13692 . -1) (undo-tree-id13693 . -1) (undo-tree-id13694 . -1) (undo-tree-id13695 . -1) (undo-tree-id13696 . -1) (undo-tree-id13697 . -1) (undo-tree-id13698 . -1) 21527) nil (25758 54930 992204 375000) 0 nil])
([nil nil ((21786 . 21787) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21786) (undo-tree-id13614 . -1) (undo-tree-id13615 . -1) (undo-tree-id13616 . -1) (undo-tree-id13617 . -1) (undo-tree-id13618 . -1) (undo-tree-id13619 . -1) (undo-tree-id13620 . -1) (undo-tree-id13621 . -1) (undo-tree-id13622 . -1) 21721) nil (25758 54930 992151 792000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21763) (nil fontified nil 21762 . 21763) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21762 . 21763) (21762 . 21763) (#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -21687) (nil fontified nil 21686 . 21687) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21686 . 21687) (21686 . 21687) (#(" " 0 1 (wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -21607) (nil fontified nil 21606 . 21607) (nil wrap-prefix #("    " 0 4 (face org-indent)) 21606 . 21607) (21606 . 21607) 21786) nil (25758 54930 992132 200000) 0 nil])
([nil nil ((21795 . 21796) (21794 . 21795) (t 25758 54931 28013 73000) 21763) nil (25758 54933 737212 279000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24781 . 24782) (nil fontified nil 24707 . 24782) (nil fontified nil 24628 . 24707) (nil fontified nil 24550 . 24628) (nil fontified nil 24505 . 24550) (nil fontified nil 24447 . 24505) (nil fontified nil 24371 . 24447) (nil fontified nil 24318 . 24371) (nil fontified nil 24273 . 24318) (nil fontified nil 24228 . 24273) (nil fontified nil 24204 . 24228) (nil fontified nil 24187 . 24204) (nil fontified nil 24129 . 24187) (nil fontified nil 24095 . 24129) (nil fontified nil 24054 . 24095) (nil fontified nil 23976 . 24054) (nil fontified nil 23896 . 23976) (nil fontified nil 23819 . 23896) (nil fontified nil 23744 . 23819) (nil fontified nil 23672 . 23744) (nil fontified nil 23600 . 23672) (nil fontified nil 23522 . 23600) (nil fontified nil 23448 . 23522) (nil fontified nil 23377 . 23448) (nil fontified nil 23305 . 23377) (nil fontified nil 23233 . 23305) (nil fontified nil 23160 . 23233) (nil fontified nil 23091 . 23160) (nil fontified nil 23016 . 23091) (nil fontified nil 22946 . 23016) (nil fontified nil 22877 . 22946) (nil fontified nil 22806 . 22877) (nil fontified nil 22732 . 22806) (nil fontified nil 22658 . 22732) (nil fontified nil 22582 . 22658) (nil fontified nil 22507 . 22582) (nil fontified nil 22434 . 22507) (nil fontified nil 22365 . 22434) (nil fontified nil 22296 . 22365) (nil fontified nil 22224 . 22296) (nil fontified nil 22154 . 22224) (nil fontified nil 22080 . 22154) (nil fontified nil 22008 . 22080) (nil fontified nil 21934 . 22008) (nil fontified nil 21868 . 21934) (nil fontified nil 21799 . 21868) (21799 . 24782) (t 25758 54933 768021 935000)) nil (25758 55037 694472 716000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22245) (undo-tree-id13735 . -1) (undo-tree-id13736 . -1) (undo-tree-id13737 . -1) (undo-tree-id13738 . -1) (undo-tree-id13739 . -1) (undo-tree-id13740 . -1) (undo-tree-id13741 . -1) (undo-tree-id13742 . -1) (undo-tree-id13743 . -1) (22247 . 22250) (22245 . 22247)) nil (25758 55037 694465 529000) 0 nil])
([nil nil ((#("In Chapter 14, we saw that a 2D convolutional layer works by sliding
" 0 3 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 3 69 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22300) (undo-tree-id13733 . -68) (undo-tree-id13734 . -69)) nil (25758 55037 694457 949000) 0 nil])
([nil nil ((#("several fairly small kernels (or filters) across an image, producing
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 69 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22300) (undo-tree-id13731 . -68) (undo-tree-id13732 . -69)) nil (25758 55037 694455 560000) 0 nil])
([nil nil ((#("multiple 2D feature maps (one per kernel)." 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 42 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22300) (undo-tree-id13729 . -41) (undo-tree-id13730 . -42)) nil (25758 55037 694452 298000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22300) (undo-tree-id13727 . -1) (undo-tree-id13728 . -1)) nil (25758 55037 694446 291000) 0 nil])
([nil nil ((#("(no longer than the kernel size)" 0 32 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22489) (undo-tree-id13780 . -31) (undo-tree-id13781 . 32) (undo-tree-id13782 . -1) (undo-tree-id13783 . 1) (undo-tree-id13784 . -32) (undo-tree-id13785 . -32) (t 25758 55037 728405 305000)) nil (25758 55053 833903 115000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22488) (undo-tree-id13744 . -1) (undo-tree-id13745 . -1) (undo-tree-id13746 . -1) (undo-tree-id13747 . -1) (undo-tree-id13748 . -1) (undo-tree-id13749 . -1) (undo-tree-id13750 . -1) (undo-tree-id13751 . -1) (undo-tree-id13752 . -1) (undo-tree-id13753 . -1) (undo-tree-id13754 . -1) (undo-tree-id13755 . -1) (undo-tree-id13756 . -1) (undo-tree-id13757 . -1) (undo-tree-id13758 . -1) (undo-tree-id13759 . -1) (undo-tree-id13760 . -1) (undo-tree-id13761 . -1) (undo-tree-id13762 . -1) (undo-tree-id13763 . -1) (undo-tree-id13764 . -1) (undo-tree-id13765 . -1) (undo-tree-id13766 . -1) (undo-tree-id13767 . -1) (undo-tree-id13768 . -1) (undo-tree-id13769 . -1) (undo-tree-id13770 . -1) (undo-tree-id13771 . -1) (undo-tree-id13772 . -1) (undo-tree-id13773 . -1) (undo-tree-id13774 . -1) (undo-tree-id13775 . -1) (undo-tree-id13776 . -1) (undo-tree-id13777 . -1) (undo-tree-id13778 . -1) (undo-tree-id13779 . -1)) nil (25758 55053 833893 773000) 0 nil])
([nil nil ((#("(all of the
same length)" 0 12 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 12 24 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22584) (undo-tree-id13812 . -23) (undo-tree-id13813 . -24) 22540 (t 25758 55053 872472 446000)) nil (25758 55062 309194 295000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22583) (undo-tree-id13786 . -1) (undo-tree-id13787 . -1) (undo-tree-id13788 . -1) (undo-tree-id13789 . -1) (undo-tree-id13790 . -1) (undo-tree-id13791 . -1) (undo-tree-id13792 . -1) (undo-tree-id13793 . -1) (undo-tree-id13794 . -1) (undo-tree-id13795 . -1) (undo-tree-id13796 . -1) (undo-tree-id13797 . -1) (undo-tree-id13798 . -1) (undo-tree-id13799 . -1) (undo-tree-id13800 . -1) (undo-tree-id13801 . -1) (undo-tree-id13802 . -1) (undo-tree-id13803 . -1) (undo-tree-id13804 . -1) (undo-tree-id13805 . -1) (undo-tree-id13806 . -1) (undo-tree-id13807 . -1) (undo-tree-id13808 . -1) (undo-tree-id13809 . -1) (undo-tree-id13810 . -1) (undo-tree-id13811 . -1)) nil (25758 55062 309187 428000) 0 nil])
([nil nil ((22664 . 22666) (t 25758 55062 348508 451000)) nil (25758 55093 300290 265000) 0 nil])
([nil nil ((#("This means that you can build a neural network
" 0 47 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22666) (undo-tree-id13825 . -46) (undo-tree-id13826 . 47) (undo-tree-id13827 . -42) (undo-tree-id13828 . -42) (undo-tree-id13829 . -42) (undo-tree-id13830 . -42) (undo-tree-id13831 . -42) (undo-tree-id13832 . -42) (undo-tree-id13833 . -42) (undo-tree-id13834 . -42) (undo-tree-id13835 . -47)) nil (25758 55093 300288 949000) 0 nil])
([nil nil ((#("composed of a mix of recurrent layers and 1D convolutional layers (or
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 70 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22666) (undo-tree-id13822 . -69) (undo-tree-id13823 . 70) (undo-tree-id13824 . -70)) nil (25758 55093 300280 939000) 0 nil])
([nil nil ((#("even 1D pooling layers)" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 23 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22666) (undo-tree-id13819 . -22) (undo-tree-id13820 . 23) (undo-tree-id13821 . -23)) nil (25758 55093 300278 298000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22666) (undo-tree-id13816 . -1) (undo-tree-id13817 . 2) (undo-tree-id13818 . -2)) nil (25758 55093 300502 261000) 0 nil])
([nil nil ((22815 . 22817)) nil (25758 55096 921137 106000) 0 nil] [nil nil ((#("But " 0 4 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22815) (undo-tree-id13814 . -3) (undo-tree-id13815 . -4)) ((22815 . 22819)) (25758 55093 300267 641000) 0 nil])
([nil nil ((22991 . 22993) (t 25758 55096 956660 632000)) nil (25758 55108 561891 445000) 0 nil])
nil
([nil nil ((#("For example,
" 0 13 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13860 . -12) (undo-tree-id13861 . 13) (undo-tree-id13862 . -13) (t 25758 55108 596713 622000)) nil (25758 55165 745796 886000) 0 nil])
([nil nil ((#("the following model is the same as earlier, except it starts with a 1D
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 71 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13857 . -70) (undo-tree-id13858 . 71) (undo-tree-id13859 . -71)) nil (25758 55165 745793 934000) 0 nil])
([nil nil ((#("convolutional layer that downsamples the input sequence by a factor of 2,
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 74 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13852 . -73) (undo-tree-id13853 . 74) (undo-tree-id13854 . 74) (undo-tree-id13855 . -13) (undo-tree-id13856 . -74)) nil (25758 55165 745790 707000) 0 nil])
([nil nil ((#("using a stride of 2. The kernel size is larger than the stride, so all inputs
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13848 . -77) (undo-tree-id13849 . 77) (undo-tree-id13850 . 78) (undo-tree-id13851 . -78)) nil (25758 55165 745787 175000) 0 nil])
([nil nil ((#("will be used to compute the layer’s output, and therefore the model can
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 72 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13844 . -71) (undo-tree-id13845 . 72) (undo-tree-id13846 . 72) (undo-tree-id13847 . -72)) nil (25758 55165 745784 24000) 0 nil])
([nil nil ((#("learn to preserve the useful information, dropping only the unimportant
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 72 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13840 . -71) (undo-tree-id13841 . 72) (undo-tree-id13842 . 72) (undo-tree-id13843 . -72)) nil (25758 55165 746010 579000) 0 nil])
([nil nil ((#("details. By shortening the sequences, the convolutional layer may help the
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 75 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id14034 . -74) (undo-tree-id14035 . 75) (undo-tree-id14036 . 75) (undo-tree-id14037 . -75)) nil (25758 55215 241562 331000) 0 nil] [nil nil ((#("details. By shortening the sequences, the convolutional layer may help the
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 75 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13836 . -74) (undo-tree-id13837 . 75) (undo-tree-id13838 . 75) (undo-tree-id13839 . -75)) ((22993 . 23068)) (25758 55165 745773 948000) 0 nil])
([nil nil ((#("GRU layers detect longer patterns. Note that we must also crop off the first
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 58 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 58 77 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id14028 . -76) (undo-tree-id14029 . 77) (undo-tree-id14030 . 77) (undo-tree-id14031 . 77) (undo-tree-id14032 . -3) (undo-tree-id14033 . -77)) nil (25758 55215 241558 699000) 0 nil])
nil
([nil nil ((#("three time steps in the targets (since the kernel’s size is 4, the first output
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 80 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id14024 . -79) (undo-tree-id14025 . 80) (undo-tree-id14026 . 80) (undo-tree-id14027 . -80)) nil (25758 55215 241553 770000) 0 nil])
([nil nil ((#("of the convolutional layer will be based on the input time steps 0 to 3), and
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id14020 . -77) (undo-tree-id14021 . 78) (undo-tree-id14022 . 78) (undo-tree-id14023 . -78)) nil (25758 55215 241548 866000) 0 nil])
([nil nil ((#("downsample the targets by a factor of 2:
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 41 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id14014 . -40) (undo-tree-id14015 . 41) (undo-tree-id14016 . 41) (undo-tree-id14017 . 41) (undo-tree-id14018 . -10) (undo-tree-id14019 . -41)) nil (25758 55215 241545 8000) 0 nil])
([nil nil ((23005 . 23011) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 23005 23011 nil nil nil t #s(yas--exit 23029 nil))) #s(yas--exit 23029 nil) 4 nil #s(yas--field 1 23005 23011 nil nil nil t #s(yas--exit 23029 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . -23023) (undo-tree-id13995 . -2) (22993 . 23036) (#("sr" 0 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 22993) (undo-tree-id13996 . -2) (undo-tree-id13997 . -1) (undo-tree-id13998 . -1) (undo-tree-id13999 . -1) (undo-tree-id14000 . -1) (undo-tree-id14001 . -1) (undo-tree-id14002 . -1) (undo-tree-id14003 . -1) (undo-tree-id14004 . -1) (undo-tree-id14005 . -2) (undo-tree-id14006 . -2) (undo-tree-id14007 . -2) (undo-tree-id14008 . -2) (undo-tree-id14009 . -2) (undo-tree-id14010 . -2) (undo-tree-id14011 . -2) (undo-tree-id14012 . -2) (undo-tree-id14013 . -2) 22995 (22993 . 22995)) nil (25758 55215 241539 690000) 0 nil])
([nil nil ((apply yas--snippet-revive 22993 23040 #s(yas--snippet nil (#s(yas--field 1 23005 23011 nil nil nil t #s(yas--exit 23029 nil))) #s(yas--exit 23029 nil) 4 nil #s(yas--field 1 23005 23011 nil nil nil t #s(yas--exit 23029 nil)) nil nil))) nil (25758 55215 241525 53000) 0 nil])
([nil nil ((#("


" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 2 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 2 3 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23028) (undo-tree-id13993 . -2) (undo-tree-id13994 . -3)) nil (25758 55215 241523 824000) 0 nil])
([nil nil ((23028 . 23029) (#("p" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -23028) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1) (undo-tree-id13919 . -1) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -1) (undo-tree-id13926 . -1) (undo-tree-id13927 . -1) (undo-tree-id13928 . -1) (undo-tree-id13929 . -1) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1) (undo-tree-id13936 . -1) (undo-tree-id13937 . -1) (undo-tree-id13938 . -1) (undo-tree-id13939 . -1) (undo-tree-id13940 . -1) (undo-tree-id13941 . -1) (undo-tree-id13942 . -1) (undo-tree-id13943 . -1) (undo-tree-id13944 . -1) (undo-tree-id13945 . -1) (undo-tree-id13946 . -1) (undo-tree-id13947 . -1) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) (undo-tree-id13952 . -1) (undo-tree-id13953 . -1) (undo-tree-id13954 . -1) (undo-tree-id13955 . -1) (undo-tree-id13956 . -1) (undo-tree-id13957 . -1) (undo-tree-id13958 . -1) (undo-tree-id13959 . -1) (undo-tree-id13960 . -1) (undo-tree-id13961 . -1) (undo-tree-id13962 . -1) (undo-tree-id13963 . -1) (undo-tree-id13964 . -1) (undo-tree-id13965 . -1) (undo-tree-id13966 . -1) (undo-tree-id13967 . -1) (undo-tree-id13968 . -1) (undo-tree-id13969 . -1) (undo-tree-id13970 . -1) (undo-tree-id13971 . -1) (#("y" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -23029) (undo-tree-id13972 . -1) (undo-tree-id13973 . -1) (undo-tree-id13974 . -1) (undo-tree-id13975 . -1) (undo-tree-id13976 . -1) (undo-tree-id13977 . -1) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1) (undo-tree-id13982 . -1) (undo-tree-id13983 . -1) (undo-tree-id13984 . -1) (undo-tree-id13985 . -1) (undo-tree-id13986 . -1) (undo-tree-id13987 . -1) (undo-tree-id13988 . -1) (undo-tree-id13989 . -1) (undo-tree-id13990 . -1) (undo-tree-id13991 . -1) (undo-tree-id13992 . -1) 23030 (23028 . 23030)) nil (25758 55215 241517 708000) 0 nil])
([nil nil ((#("#+end_srcmodel = keras.models.Sequential([
" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 5 (face org-meta-line font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 5 6 (face org-meta-line font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 6 9 (face org-meta-line font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 9 10 (face org-meta-line font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 10 14 (face org-meta-line font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 14 42 (face org-meta-line font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 42 43 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23029) (undo-tree-id13883 . -42) (undo-tree-id13884 . 34) (undo-tree-id13885 . 43) (undo-tree-id13886 . -9) (undo-tree-id13887 . -9) (undo-tree-id13888 . -9) (undo-tree-id13889 . -9) (undo-tree-id13890 . -9) (undo-tree-id13891 . -9) (undo-tree-id13892 . -9) (undo-tree-id13893 . -9) (undo-tree-id13894 . -9) (undo-tree-id13895 . -43)) nil (25758 55231 353077 52000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23449 . 23450) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t)) . -23484) (23449 . 23485) 23405) nil (25758 55244 382463 130000) 0 nil] [nil nil ((nil rear-nonsticky nil 23449 . 23450) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . -23492) (23449 . 23493) 23405) ((#("
#+end_srcmodel = keras.models.Sequential([
" 0 1 (src-block t font-lock-fontified t rear-nonsticky nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil) 1 2 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 2 6 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 6 7 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 7 10 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 10 11 (face org-meta-line src-block t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 11 15 (face org-meta-line src-block t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 15 41 (face org-meta-line src-block t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 41 42 (face org-meta-line src-block t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 42 43 (face org-meta-line src-block t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t) 43 44 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 23449) (undo-tree-id14092 . -43) (undo-tree-id14093 . -1) (undo-tree-id14094 . 34) (undo-tree-id14095 . -2) (undo-tree-id14096 . -2) (undo-tree-id14097 . -2) (undo-tree-id14098 . -2) (undo-tree-id14099 . -2) (undo-tree-id14100 . -2) (undo-tree-id14101 . -2) (undo-tree-id14102 . -2) (undo-tree-id14103 . -5) (undo-tree-id14104 . -6) (undo-tree-id14105 . -10) (undo-tree-id14106 . -9) (undo-tree-id14107 . -1) (undo-tree-id14108 . -43) (undo-tree-id14109 . -43) (undo-tree-id14110 . -43) (undo-tree-id14111 . -9) (undo-tree-id14112 . -43) (undo-tree-id14113 . -43) (undo-tree-id14114 . -43) (undo-tree-id14115 . -43) (undo-tree-id14116 . -43) (undo-tree-id14117 . -43) (undo-tree-id14118 . -43) (undo-tree-id14119 . -43) (undo-tree-id14120 . -43) (undo-tree-id14121 . -43) (undo-tree-id14122 . -43) (undo-tree-id14123 . -43) (undo-tree-id14124 . -43) (undo-tree-id14125 . -43) (undo-tree-id14126 . -43) (undo-tree-id14127 . -43) (undo-tree-id14128 . -43) (undo-tree-id14129 . -43) (undo-tree-id14130 . -18) (undo-tree-id14131 . -18) (undo-tree-id14132 . -18) (undo-tree-id14133 . -18) (undo-tree-id14134 . -18) (undo-tree-id14135 . -18) (undo-tree-id14136 . -18) (undo-tree-id14137 . -18) (undo-tree-id14138 . -18) (undo-tree-id14139 . -18) (undo-tree-id14140 . -18) (undo-tree-id14141 . -18) (undo-tree-id14142 . -18) (undo-tree-id14143 . -18) (undo-tree-id14144 . -18) (undo-tree-id14145 . -18) (undo-tree-id14146 . -43) (undo-tree-id14147 . -43) (undo-tree-id14148 . -43) (undo-tree-id14149 . -43) (undo-tree-id14150 . -43) (undo-tree-id14151 . -43) (undo-tree-id14152 . -43) (undo-tree-id14153 . -43) (undo-tree-id14154 . -43) (undo-tree-id14155 . -43) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (undo-tree-id14159 . -1) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) (undo-tree-id14162 . -1) (undo-tree-id14163 . -1) (undo-tree-id14164 . -1) (undo-tree-id14165 . -9) (undo-tree-id14166 . -9) (undo-tree-id14167 . -9) (undo-tree-id14168 . -9) (undo-tree-id14169 . -9) (undo-tree-id14170 . -9) (undo-tree-id14171 . -9) (undo-tree-id14172 . -9) (undo-tree-id14173 . -9) (undo-tree-id14174 . -9) (23492 . 23493) (nil rear-nonsticky t 23449 . 23450)) (25758 55230 416030 213000) 0 nil])
([nil nil ((23452 . 23455) (#("begin" 0 5 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t)) . 23452) (undo-tree-id14175 . -4) (undo-tree-id14176 . -4) (undo-tree-id14177 . -4) (undo-tree-id14178 . -5) (undo-tree-id14179 . -4) (undo-tree-id14180 . -4) (undo-tree-id14181 . -4) (undo-tree-id14182 . -5) (undo-tree-id14183 . -5) (undo-tree-id14184 . -5) 23456) nil (25758 55244 382458 443000) 0 nil])
([nil nil ((#("#+end_src" 0 1 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t) 1 5 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t) 5 6 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t) 6 9 (face org-meta-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t)) . 23450) (undo-tree-id13863 . -8) (undo-tree-id13864 . -8) (undo-tree-id13865 . -8) (undo-tree-id13866 . -9) (undo-tree-id13867 . -8) (undo-tree-id13868 . -1) (undo-tree-id13869 . -1) (undo-tree-id13870 . -1) (undo-tree-id13871 . -1) (undo-tree-id13872 . -1) (undo-tree-id13873 . -1) (undo-tree-id13874 . -1) (undo-tree-id13875 . -1) (undo-tree-id13876 . -4) (undo-tree-id13877 . -5) (undo-tree-id13878 . 3) (undo-tree-id13879 . -9) (undo-tree-id13880 . -8) (undo-tree-id13881 . -8) (undo-tree-id13882 . -9) 23458) ((23450 . 23459)) (25758 55225 788075 908000) 0 nil])
([nil nil ((23273 . 23274) (t 25758 55244 465391 807000)) nil (25758 55248 692325 898000) 0 nil])
([nil nil ((23483 . 23484) 23450) ((#("
" 0 1 (src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23483) (undo-tree-id14058 . -1) (undo-tree-id14059 . -1) (undo-tree-id14060 . -1) (undo-tree-id14061 . -1) (undo-tree-id14062 . -1) (undo-tree-id14063 . -1) (undo-tree-id14064 . -1) (undo-tree-id14065 . -1) (undo-tree-id14066 . -1) (undo-tree-id14067 . -1) (undo-tree-id14068 . -1) (undo-tree-id14069 . -1) (undo-tree-id14070 . -1) (undo-tree-id14071 . -1) (undo-tree-id14072 . -1) (undo-tree-id14073 . -1) (undo-tree-id14074 . -1) (undo-tree-id14075 . -1) (undo-tree-id14076 . -1) (undo-tree-id14077 . -1) (undo-tree-id14078 . -1) (undo-tree-id14079 . -1) (undo-tree-id14080 . -1) (undo-tree-id14081 . -1) (undo-tree-id14082 . -1) (undo-tree-id14083 . -1) (undo-tree-id14084 . -1) (undo-tree-id14085 . -1) (undo-tree-id14086 . -1) (undo-tree-id14087 . -1) (undo-tree-id14088 . -1) (undo-tree-id14089 . -1) (undo-tree-id14090 . -1) (undo-tree-id14091 . -1)) (25758 55225 198597 211000) 0 nil])
([nil nil ((#("keras.layers.Conv1D(filters=20, kernel_size=4, strides=2,
padding=\"valid\",
input_shape=[None, 1]),
keras.layers.GRU(20, return_sequences=True),
keras.layers.GRU(20, return_sequences=True),
keras.layers.TimeDistributed(keras.layers.Dense(10))
])
model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train[:, 3::2], epochs=20,
validation_data=(X_valid, Y_valid[:, 3::2]))
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 19 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 19 20 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 20 38 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 38 39 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 39 43 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 43 58 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 58 66 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 66 73 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 73 75 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 75 80 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 80 81 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 81 86 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 86 87 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 87 88 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 88 92 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 92 95 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 95 96 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 96 97 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 97 99 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 99 115 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 115 116 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 116 126 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 126 127 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 127 136 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 136 137 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 137 141 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 141 142 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 142 144 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 144 160 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 160 161 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 161 171 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 171 172 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 172 181 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 181 182 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 182 186 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 186 187 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 187 189 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 189 217 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 217 218 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 218 236 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 236 237 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 237 239 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 239 240 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 240 241 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 241 242 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 242 243 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 243 244 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 244 245 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 245 251 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 251 258 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 258 259 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 259 264 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 264 268 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 268 269 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 269 281 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 281 287 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 287 297 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 297 298 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 298 302 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 302 303 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 303 307 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 307 308 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 308 312 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 312 313 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 313 316 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 316 317 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 317 318 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 318 319 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 319 326 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 326 338 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 338 339 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 339 340 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 340 341 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 341 346 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 346 349 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 349 350 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 350 355 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 355 356 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 356 363 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 363 364 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 364 377 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 377 387 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 387 388 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 388 392 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 392 393 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 393 394 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 394 395 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 395 396 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 396 401 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 401 404 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 404 405 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 405 410 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 410 411 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 411 418 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 418 419 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 419 420 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 420 421 (face (rainbow-delimiters-unmatched-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 421 422 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23029) (undo-tree-id14189 . -421) (undo-tree-id14190 . -377) (undo-tree-id14191 . 177) (undo-tree-id14192 . -421) (undo-tree-id14193 . -245) (undo-tree-id14194 . -377) (undo-tree-id14195 . -245) (undo-tree-id14196 . -245) (undo-tree-id14197 . -245) (undo-tree-id14198 . -245) (undo-tree-id14199 . -245) (undo-tree-id14200 . -245) (undo-tree-id14201 . -245) (undo-tree-id14202 . -245) (undo-tree-id14203 . -245) (undo-tree-id14204 . -245) (undo-tree-id14205 . -245) (undo-tree-id14206 . -245) (undo-tree-id14207 . -245) (undo-tree-id14208 . -245) (undo-tree-id14209 . -245) (undo-tree-id14210 . -245) (undo-tree-id14211 . -245) (undo-tree-id14212 . -245) (undo-tree-id14213 . -242) (undo-tree-id14214 . -242) (undo-tree-id14215 . -242) (undo-tree-id14216 . -242) (undo-tree-id14217 . -242) (undo-tree-id14218 . -242) (undo-tree-id14219 . -242) (undo-tree-id14220 . -242) (undo-tree-id14221 . -242) (undo-tree-id14222 . -242) (undo-tree-id14223 . -242) (undo-tree-id14224 . -242) (undo-tree-id14225 . -242) (undo-tree-id14226 . -242) (undo-tree-id14227 . -242) (undo-tree-id14228 . -245) (undo-tree-id14229 . -245) (undo-tree-id14230 . -245) (undo-tree-id14231 . -245) (undo-tree-id14232 . -245) (undo-tree-id14233 . -245) (undo-tree-id14234 . -245) (undo-tree-id14235 . -245) (undo-tree-id14236 . -245) (undo-tree-id14237 . -245) (undo-tree-id14238 . -245) (undo-tree-id14239 . -245) (undo-tree-id14240 . -245) (undo-tree-id14241 . -245) (undo-tree-id14242 . -245) (undo-tree-id14243 . -319) (undo-tree-id14244 . -319) (undo-tree-id14245 . -319) (undo-tree-id14246 . -319) (undo-tree-id14247 . -319) (undo-tree-id14248 . -319) (undo-tree-id14249 . -319) (undo-tree-id14250 . -319) (undo-tree-id14251 . -377) (undo-tree-id14252 . -377) (undo-tree-id14253 . -377) (undo-tree-id14254 . -377) (undo-tree-id14255 . -377) (undo-tree-id14256 . -377) (undo-tree-id14257 . -377) (undo-tree-id14258 . -377) (undo-tree-id14259 . -319) (undo-tree-id14260 . -319) (undo-tree-id14261 . -319) (undo-tree-id14262 . -319) (undo-tree-id14263 . -319) (undo-tree-id14264 . -319) (undo-tree-id14265 . -319) (undo-tree-id14266 . -319) (undo-tree-id14267 . -245) (undo-tree-id14268 . -245) (undo-tree-id14269 . -245) (undo-tree-id14270 . -245) (undo-tree-id14271 . -245) (undo-tree-id14272 . -245) (undo-tree-id14273 . -245) (undo-tree-id14274 . -245) (undo-tree-id14275 . -242) (undo-tree-id14276 . -242) (undo-tree-id14277 . -242) (undo-tree-id14278 . -242) (undo-tree-id14279 . -242) (undo-tree-id14280 . -242) (undo-tree-id14281 . -242) (undo-tree-id14282 . -242) (undo-tree-id14283 . -242) (undo-tree-id14284 . -242) (undo-tree-id14285 . -242) (undo-tree-id14286 . -242) (undo-tree-id14287 . -242) (undo-tree-id14288 . -242) (undo-tree-id14289 . -242) (undo-tree-id14290 . -189) (undo-tree-id14291 . -189) (undo-tree-id14292 . -189) (undo-tree-id14293 . -189) (undo-tree-id14294 . -189) (undo-tree-id14295 . -189) (undo-tree-id14296 . -189) (undo-tree-id14297 . -189) (undo-tree-id14298 . -189) (undo-tree-id14299 . -189) (undo-tree-id14300 . -189) (undo-tree-id14301 . -189) (undo-tree-id14302 . -189) (undo-tree-id14303 . -189) (undo-tree-id14304 . -189) (undo-tree-id14305 . -144) (undo-tree-id14306 . -144) (undo-tree-id14307 . -144) (undo-tree-id14308 . -144) (undo-tree-id14309 . -144) (undo-tree-id14310 . -144) (undo-tree-id14311 . -144) (undo-tree-id14312 . -144) (undo-tree-id14313 . -99) (undo-tree-id14314 . -99) (undo-tree-id14315 . -99) (undo-tree-id14316 . -99) (undo-tree-id14317 . -99) (undo-tree-id14318 . -99) (undo-tree-id14319 . -99) (undo-tree-id14320 . -99) (undo-tree-id14321 . -75) (undo-tree-id14322 . -75) (undo-tree-id14323 . -75) (undo-tree-id14324 . -75) (undo-tree-id14325 . -75) (undo-tree-id14326 . -75) (undo-tree-id14327 . -75) (undo-tree-id14328 . -75) (undo-tree-id14329 . 323) (undo-tree-id14330 . -104) (undo-tree-id14331 . -99) (undo-tree-id14332 . -99) (undo-tree-id14333 . -99) (undo-tree-id14334 . -99) (undo-tree-id14335 . -99) (undo-tree-id14336 . -99) (undo-tree-id14337 . -99) (undo-tree-id14338 . -99) (undo-tree-id14339 . -144) (undo-tree-id14340 . -144) (undo-tree-id14341 . -144) (undo-tree-id14342 . -144) (undo-tree-id14343 . -144) (undo-tree-id14344 . -144) (undo-tree-id14345 . -144) (undo-tree-id14346 . -144) (undo-tree-id14347 . -189) (undo-tree-id14348 . -189) (undo-tree-id14349 . -189) (undo-tree-id14350 . -189) (undo-tree-id14351 . -189) (undo-tree-id14352 . -189) (undo-tree-id14353 . -189) (undo-tree-id14354 . -189) (undo-tree-id14355 . -242) (undo-tree-id14356 . -242) (undo-tree-id14357 . -242) (undo-tree-id14358 . -242) (undo-tree-id14359 . -242) (undo-tree-id14360 . -242) (undo-tree-id14361 . -242) (undo-tree-id14362 . -242) (undo-tree-id14363 . -242) (undo-tree-id14364 . -242) (undo-tree-id14365 . -242) (undo-tree-id14366 . -242) (undo-tree-id14367 . -242) (undo-tree-id14368 . -242) (undo-tree-id14369 . -242) (undo-tree-id14370 . -245) (undo-tree-id14371 . -245) (undo-tree-id14372 . -245) (undo-tree-id14373 . -245) (undo-tree-id14374 . -245) (undo-tree-id14375 . -245) (undo-tree-id14376 . -245) (undo-tree-id14377 . -245) (undo-tree-id14378 . -245) (undo-tree-id14379 . -245) (undo-tree-id14380 . -245) (undo-tree-id14381 . -245) (undo-tree-id14382 . -245) (undo-tree-id14383 . -245) (undo-tree-id14384 . -245) (undo-tree-id14385 . -242) (undo-tree-id14386 . -242) (undo-tree-id14387 . -242) (undo-tree-id14388 . -242) (undo-tree-id14389 . -242) (undo-tree-id14390 . -242) (undo-tree-id14391 . -242) (undo-tree-id14392 . -242) (undo-tree-id14393 . -242) (undo-tree-id14394 . -242) (undo-tree-id14395 . -242) (undo-tree-id14396 . -242) (undo-tree-id14397 . -242) (undo-tree-id14398 . -242) (undo-tree-id14399 . -242) (undo-tree-id14400 . -189) (undo-tree-id14401 . -189) (undo-tree-id14402 . -189) (undo-tree-id14403 . -189) (undo-tree-id14404 . -189) (undo-tree-id14405 . -189) (undo-tree-id14406 . -189) (undo-tree-id14407 . -189) (undo-tree-id14408 . -189) (undo-tree-id14409 . -189) (undo-tree-id14410 . -189) (undo-tree-id14411 . -189) (undo-tree-id14412 . -189) (undo-tree-id14413 . -189) (undo-tree-id14414 . -189) (undo-tree-id14415 . -144) (undo-tree-id14416 . -144) (undo-tree-id14417 . -144) (undo-tree-id14418 . -144) (undo-tree-id14419 . -144) (undo-tree-id14420 . -144) (undo-tree-id14421 . -144) (undo-tree-id14422 . -144) (undo-tree-id14423 . -99) (undo-tree-id14424 . -99) (undo-tree-id14425 . -99) (undo-tree-id14426 . -99) (undo-tree-id14427 . -99) (undo-tree-id14428 . -99) (undo-tree-id14429 . -99) (undo-tree-id14430 . -99) (undo-tree-id14431 . -75) (undo-tree-id14432 . -75) (undo-tree-id14433 . -75) (undo-tree-id14434 . -75) (undo-tree-id14435 . -75) (undo-tree-id14436 . -75) (undo-tree-id14437 . -75) (undo-tree-id14438 . -75) (undo-tree-id14439 . -58) (undo-tree-id14440 . -58) (undo-tree-id14441 . -58) (undo-tree-id14442 . -58) (undo-tree-id14443 . -58) (undo-tree-id14444 . -58) (undo-tree-id14445 . -58) (undo-tree-id14446 . -58) (undo-tree-id14447 . -422) (undo-tree-id14448 . 422) (undo-tree-id14449 . -5) (undo-tree-id14450 . -377) (undo-tree-id14451 . -58) (undo-tree-id14452 . -58) (undo-tree-id14453 . -58) (undo-tree-id14454 . -58) (undo-tree-id14455 . -58) (undo-tree-id14456 . -58) (undo-tree-id14457 . -58) (undo-tree-id14458 . -58) (undo-tree-id14459 . -75) (undo-tree-id14460 . -75) (undo-tree-id14461 . -75) (undo-tree-id14462 . -75) (undo-tree-id14463 . -75) (undo-tree-id14464 . -75) (undo-tree-id14465 . -75) (undo-tree-id14466 . -75) (undo-tree-id14467 . -99) (undo-tree-id14468 . -99) (undo-tree-id14469 . -99) (undo-tree-id14470 . -99) (undo-tree-id14471 . -99) (undo-tree-id14472 . -99) (undo-tree-id14473 . -99) (undo-tree-id14474 . -99) (undo-tree-id14475 . -144) (undo-tree-id14476 . -144) (undo-tree-id14477 . -144) (undo-tree-id14478 . -144) (undo-tree-id14479 . -144) (undo-tree-id14480 . -144) (undo-tree-id14481 . -144) (undo-tree-id14482 . -144) (undo-tree-id14483 . -189) (undo-tree-id14484 . -189) (undo-tree-id14485 . -189) (undo-tree-id14486 . -189) (undo-tree-id14487 . -189) (undo-tree-id14488 . -189) (undo-tree-id14489 . -189) (undo-tree-id14490 . -189) (undo-tree-id14491 . -242) (undo-tree-id14492 . -242) (undo-tree-id14493 . -242) (undo-tree-id14494 . -242) (undo-tree-id14495 . -242) (undo-tree-id14496 . -242) (undo-tree-id14497 . -242) (undo-tree-id14498 . -242) (undo-tree-id14499 . -242) (undo-tree-id14500 . -242) (undo-tree-id14501 . -242) (undo-tree-id14502 . -242) (undo-tree-id14503 . -242) (undo-tree-id14504 . -242) (undo-tree-id14505 . -242) (undo-tree-id14506 . -245) (undo-tree-id14507 . -245) (undo-tree-id14508 . -245) (undo-tree-id14509 . -245) (undo-tree-id14510 . -245) (undo-tree-id14511 . -245) (undo-tree-id14512 . -245) (undo-tree-id14513 . -245) (undo-tree-id14514 . -245) (undo-tree-id14515 . -245) (undo-tree-id14516 . -245) (undo-tree-id14517 . -245) (undo-tree-id14518 . -245) (undo-tree-id14519 . -245) (undo-tree-id14520 . -245) (undo-tree-id14521 . -319) (undo-tree-id14522 . -319) (undo-tree-id14523 . -319) (undo-tree-id14524 . -319) (undo-tree-id14525 . -319) (undo-tree-id14526 . -319) (undo-tree-id14527 . -319) (undo-tree-id14528 . -319) (undo-tree-id14529 . -377) (undo-tree-id14530 . -377) (undo-tree-id14531 . -377) (undo-tree-id14532 . -377) (undo-tree-id14533 . -377) (undo-tree-id14534 . -377) (undo-tree-id14535 . -377) (undo-tree-id14536 . -377) (undo-tree-id14537 . -377) (undo-tree-id14538 . -422) 23406 (t 25758 55248 729414 705000)) nil (25758 55273 711704 482000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23492 . 23493) (nil fontified nil 23484 . 23493) (23484 . 23493)) ((#("#+end_src" 0 8 (font-lock-multiline t face org-block-end-line font-lock-fontified t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 8 9 (font-lock-multiline t face org-block-end-line font-lock-fontified t rear-nonsticky nil fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23484) (undo-tree-id14038 . -9) (undo-tree-id14039 . -8) (undo-tree-id14040 . -8) (undo-tree-id14041 . -8) (undo-tree-id14042 . -8) (undo-tree-id14043 . -8) (undo-tree-id14044 . -8) (undo-tree-id14045 . -8) (undo-tree-id14046 . -8) (undo-tree-id14047 . -8) (undo-tree-id14048 . -8) (undo-tree-id14049 . -8) (undo-tree-id14050 . -8) (undo-tree-id14051 . -8) (undo-tree-id14052 . -8) (undo-tree-id14053 . -8) (undo-tree-id14054 . -8) (undo-tree-id14055 . -8) (undo-tree-id14056 . -8) (undo-tree-id14057 . -8) (nil rear-nonsticky t 23492 . 23493) (t 25758 55215 281237 551000)) (25758 55215 240844 527000) 0 nil])
([nil nil ((#("python :result outputs" 0 22 (face org-block-end-line font-lock-multiline t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t)) . 23039) (undo-tree-id14185 . -21) (undo-tree-id14186 . -22) (undo-tree-id14187 . -22) (undo-tree-id14188 . -22)) nil (25758 55295 685114 585000) 0 nil])
nil
([nil nil ((23040 . 23041) (23039 . 23040) (t 25758 55273 749550 825000) 23038) nil (25758 55313 817867 644000) 0 nil] [nil nil ((nil rear-nonsticky nil 23481 . 23482) (nil fontified nil 23438 . 23482) (nil fontified nil 23380 . 23438) (nil fontified nil 23304 . 23380) (nil fontified nil 23251 . 23304) (nil fontified nil 23206 . 23251) (nil fontified nil 23161 . 23206) (nil fontified nil 23137 . 23161) (nil fontified nil 23120 . 23137) (nil fontified nil 23062 . 23120) (nil fontified nil 23028 . 23062) (23028 . 23482) (#("
#+end_src 
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 11 (face org-block-end-line font-lock-multiline t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t) 11 12 (face org-block-end-line fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23028) (undo-tree-id14539 . -11) (undo-tree-id14540 . -12) (undo-tree-id14541 . 11) (undo-tree-id14542 . -5) (undo-tree-id14543 . -1) (undo-tree-id14544 . -1) (undo-tree-id14545 . -1) (undo-tree-id14546 . -1) (undo-tree-id14547 . -1) (undo-tree-id14548 . -1) (undo-tree-id14549 . -1) (undo-tree-id14550 . -1) (undo-tree-id14551 . -1) (undo-tree-id14552 . -1) (undo-tree-id14553 . -1) (undo-tree-id14554 . -1) (undo-tree-id14555 . -1) (undo-tree-id14556 . -1) (undo-tree-id14557 . -1) (undo-tree-id14558 . -1) (undo-tree-id14559 . -1) (undo-tree-id14560 . -1) (undo-tree-id14561 . -1) (undo-tree-id14562 . -1) (undo-tree-id14563 . -1) (undo-tree-id14564 . -1) (undo-tree-id14565 . -1) (undo-tree-id14566 . -1) (undo-tree-id14567 . -1) (undo-tree-id14568 . -1) (undo-tree-id14569 . -1) (undo-tree-id14570 . -1) (undo-tree-id14571 . -1) (undo-tree-id14572 . -1) (undo-tree-id14573 . -1) (undo-tree-id14574 . -1) (undo-tree-id14575 . -1) (undo-tree-id14576 . -1) (undo-tree-id14577 . -1) (undo-tree-id14578 . -1) (undo-tree-id14579 . -1) (undo-tree-id14580 . -1) (undo-tree-id14581 . -1) (undo-tree-id14582 . -1) (undo-tree-id14583 . -1) (undo-tree-id14584 . -1) (undo-tree-id14585 . -1) (undo-tree-id14586 . -1) (undo-tree-id14587 . -1) (undo-tree-id14588 . -1) (undo-tree-id14589 . -1) (undo-tree-id14590 . -1) (undo-tree-id14591 . -1) (undo-tree-id14592 . -1) (undo-tree-id14593 . -1) (undo-tree-id14594 . -1) (undo-tree-id14595 . -1) (undo-tree-id14596 . -1) (undo-tree-id14597 . -1) (undo-tree-id14598 . -1) (undo-tree-id14599 . -1) (undo-tree-id14600 . -1) (undo-tree-id14601 . -1) (undo-tree-id14602 . -1) (undo-tree-id14603 . -1) (undo-tree-id14604 . -1) (undo-tree-id14605 . -1) (undo-tree-id14606 . -1) (undo-tree-id14607 . -1) (undo-tree-id14608 . -1) (undo-tree-id14609 . -1) (undo-tree-id14610 . -1) (undo-tree-id14611 . -1) (undo-tree-id14612 . -1) (undo-tree-id14613 . -1) (undo-tree-id14614 . -1) (undo-tree-id14615 . -1) (undo-tree-id14616 . -1) (undo-tree-id14617 . -1) (undo-tree-id14618 . -1) (undo-tree-id14619 . -1) (undo-tree-id14620 . -1) (undo-tree-id14621 . -1) (undo-tree-id14622 . -1) (undo-tree-id14623 . -1) (undo-tree-id14624 . -1) (undo-tree-id14625 . -1) (undo-tree-id14626 . -1) (undo-tree-id14627 . -1) (undo-tree-id14628 . -1) (undo-tree-id14629 . -1) (undo-tree-id14630 . -1) (undo-tree-id14631 . -1) (undo-tree-id14632 . -1) (undo-tree-id14633 . -1) (undo-tree-id14634 . -1) (undo-tree-id14635 . -1) (undo-tree-id14636 . -1) (undo-tree-id14637 . -1) (undo-tree-id14638 . -1) (undo-tree-id14639 . -1) (undo-tree-id14640 . -1) (undo-tree-id14641 . -1) (undo-tree-id14642 . -1) (undo-tree-id14643 . -1) (undo-tree-id14644 . -1) (undo-tree-id14645 . -1) (undo-tree-id14646 . -1) (undo-tree-id14647 . -1) (undo-tree-id14648 . -1) (undo-tree-id14649 . -1) (undo-tree-id14650 . -1) (undo-tree-id14651 . -1) (undo-tree-id14652 . -1) (undo-tree-id14653 . -1) (undo-tree-id14654 . -1) (undo-tree-id14655 . -1) (undo-tree-id14656 . -1) (undo-tree-id14657 . -1) (undo-tree-id14658 . -1) (undo-tree-id14659 . -1) (undo-tree-id14660 . -1) (undo-tree-id14661 . -1) (undo-tree-id14662 . -1) (undo-tree-id14663 . -1) (undo-tree-id14664 . -1) (undo-tree-id14665 . -1) (undo-tree-id14666 . -1) (undo-tree-id14667 . -1) (undo-tree-id14668 . -1) (undo-tree-id14669 . -1) (undo-tree-id14670 . -1) (undo-tree-id14671 . -1) (undo-tree-id14672 . -1) (undo-tree-id14673 . -1) (undo-tree-id14674 . -1) (undo-tree-id14675 . -1) (undo-tree-id14676 . -1) (undo-tree-id14677 . -1) (undo-tree-id14678 . -1) (undo-tree-id14679 . -1) (undo-tree-id14680 . -1) (undo-tree-id14681 . -1) (undo-tree-id14682 . -1) (undo-tree-id14683 . -1) (undo-tree-id14684 . -1) (undo-tree-id14685 . -1) (undo-tree-id14686 . -1) (undo-tree-id14687 . -1) (undo-tree-id14688 . -1) (undo-tree-id14689 . -1) (undo-tree-id14690 . -1) (undo-tree-id14691 . -1) (undo-tree-id14692 . -1) (undo-tree-id14693 . -1) (undo-tree-id14694 . -1) (undo-tree-id14695 . -1) (undo-tree-id14696 . -1) (undo-tree-id14697 . -1) (undo-tree-id14698 . -1) (undo-tree-id14699 . -1) (undo-tree-id14700 . -1) (undo-tree-id14701 . -1) (undo-tree-id14702 . -1) (undo-tree-id14703 . -1) (undo-tree-id14704 . -1) (undo-tree-id14705 . -1) (undo-tree-id14706 . -1) (undo-tree-id14707 . -1) (undo-tree-id14708 . -1) (undo-tree-id14709 . -1) (undo-tree-id14710 . -1) (undo-tree-id14711 . -1) (undo-tree-id14712 . -1) (undo-tree-id14713 . -1) (undo-tree-id14714 . -1) (undo-tree-id14715 . -1) (undo-tree-id14716 . -1) (undo-tree-id14717 . -1) (undo-tree-id14718 . -1) (undo-tree-id14719 . -1) (undo-tree-id14720 . -1) (undo-tree-id14721 . -1) (undo-tree-id14722 . -1) (undo-tree-id14723 . -1) (undo-tree-id14724 . -1) (undo-tree-id14725 . -1) (undo-tree-id14726 . -1) (undo-tree-id14727 . -1) (undo-tree-id14728 . -1) (undo-tree-id14729 . -1) (undo-tree-id14730 . -1) (undo-tree-id14731 . -1) (undo-tree-id14732 . -1) (undo-tree-id14733 . -1) (undo-tree-id14734 . -1) (undo-tree-id14735 . -1) (undo-tree-id14736 . -1) (undo-tree-id14737 . -1) (undo-tree-id14738 . -1) (undo-tree-id14739 . -1) (undo-tree-id14740 . -1) (undo-tree-id14741 . -1) (undo-tree-id14742 . -1) (undo-tree-id14743 . -1) (undo-tree-id14744 . -1) (undo-tree-id14745 . -1) (undo-tree-id14746 . -1) (undo-tree-id14747 . -1) (undo-tree-id14748 . -1) (undo-tree-id14749 . -1) (undo-tree-id14750 . -1) (undo-tree-id14751 . -1) (undo-tree-id14752 . -1) (undo-tree-id14753 . -1) (undo-tree-id14754 . -1) (undo-tree-id14755 . -1) (undo-tree-id14756 . -1) (undo-tree-id14757 . -1) (undo-tree-id14758 . -1) (undo-tree-id14759 . -1) (undo-tree-id14760 . -1) (undo-tree-id14761 . -1) (undo-tree-id14762 . -1) (undo-tree-id14763 . -1) (undo-tree-id14764 . -1) (undo-tree-id14765 . -1) (undo-tree-id14766 . -1) (undo-tree-id14767 . -1) (undo-tree-id14768 . -1) (undo-tree-id14769 . -1) (undo-tree-id14770 . -1) (undo-tree-id14771 . -1) (undo-tree-id14772 . -1) (undo-tree-id14773 . -1) (undo-tree-id14774 . -1) (undo-tree-id14775 . -1) (undo-tree-id14776 . -1) (undo-tree-id14777 . -1) (undo-tree-id14778 . -1) (undo-tree-id14779 . -1) (undo-tree-id14780 . -1) (undo-tree-id14781 . -1) (undo-tree-id14782 . -1) (undo-tree-id14783 . -1) (undo-tree-id14784 . -1) (undo-tree-id14785 . -1) (undo-tree-id14786 . -1) (undo-tree-id14787 . -1) (undo-tree-id14788 . -1) (undo-tree-id14789 . -1) (undo-tree-id14790 . -1) (undo-tree-id14791 . -1) (undo-tree-id14792 . -1) (undo-tree-id14793 . -1) (undo-tree-id14794 . -1) (undo-tree-id14795 . -1) (undo-tree-id14796 . -1) (undo-tree-id14797 . -1) (undo-tree-id14798 . -1) (undo-tree-id14799 . -1) (undo-tree-id14800 . -1) (undo-tree-id14801 . -1) (undo-tree-id14802 . -1) (undo-tree-id14803 . -1) (undo-tree-id14804 . -1) (undo-tree-id14805 . -1) (undo-tree-id14806 . -1) (undo-tree-id14807 . -1) (undo-tree-id14808 . -1) (undo-tree-id14809 . -1) (undo-tree-id14810 . -1) (undo-tree-id14811 . -1) (undo-tree-id14812 . -1) (undo-tree-id14813 . -1) (undo-tree-id14814 . -1) (undo-tree-id14815 . -1) (undo-tree-id14816 . -1) (undo-tree-id14817 . -1) (undo-tree-id14818 . -1) (undo-tree-id14819 . -1) (undo-tree-id14820 . -1) (undo-tree-id14821 . -1) (undo-tree-id14822 . -1) (undo-tree-id14823 . -1) (undo-tree-id14824 . -1) (undo-tree-id14825 . -1) (undo-tree-id14826 . -1) (undo-tree-id14827 . -1) (undo-tree-id14828 . -1) (undo-tree-id14829 . -1) (undo-tree-id14830 . -1) (undo-tree-id14831 . -1) (undo-tree-id14832 . -1) (undo-tree-id14833 . -1) (undo-tree-id14834 . -1) (undo-tree-id14835 . -1) (undo-tree-id14836 . -1) (undo-tree-id14837 . -1) (undo-tree-id14838 . -1) (undo-tree-id14839 . -1) (undo-tree-id14840 . -1) (undo-tree-id14841 . -1) (undo-tree-id14842 . -1) (undo-tree-id14843 . -1) (undo-tree-id14844 . -1) (undo-tree-id14845 . -1) (undo-tree-id14846 . -1) (undo-tree-id14847 . -1) (undo-tree-id14848 . -1) (undo-tree-id14849 . -1) (undo-tree-id14850 . -1) (undo-tree-id14851 . -1) (undo-tree-id14852 . -1) (undo-tree-id14853 . -1) (undo-tree-id14854 . -1) (undo-tree-id14855 . -1) (undo-tree-id14856 . -1) (undo-tree-id14857 . -1) (undo-tree-id14858 . -1) (undo-tree-id14859 . -1) (undo-tree-id14860 . -1) (undo-tree-id14861 . -1) (undo-tree-id14862 . -1) (undo-tree-id14863 . -1) (undo-tree-id14864 . -1) (undo-tree-id14865 . -1) (undo-tree-id14866 . -1) (undo-tree-id14867 . -1) (undo-tree-id14868 . -1) (undo-tree-id14869 . -1) (undo-tree-id14870 . -1) (undo-tree-id14871 . -1) (undo-tree-id14872 . -1) (undo-tree-id14873 . -1) (undo-tree-id14874 . -1) (undo-tree-id14875 . -1) (undo-tree-id14876 . -1) (undo-tree-id14877 . -1) (undo-tree-id14878 . -1) (undo-tree-id14879 . -1) (undo-tree-id14880 . -11) (undo-tree-id14881 . -10) (undo-tree-id14882 . -10) (undo-tree-id14883 . -10) (undo-tree-id14884 . -10) (undo-tree-id14885 . -10) (undo-tree-id14886 . -10) (undo-tree-id14887 . -10) (undo-tree-id14888 . -10) (undo-tree-id14889 . -10) (undo-tree-id14890 . -10) (undo-tree-id14891 . -10) (undo-tree-id14892 . -10) (undo-tree-id14893 . -10) (undo-tree-id14894 . -10) (undo-tree-id14895 . -10) (undo-tree-id14896 . -10) (undo-tree-id14897 . -10) (undo-tree-id14898 . -10) (undo-tree-id14899 . -10) (undo-tree-id14900 . -11) (undo-tree-id14901 . -11) (undo-tree-id14902 . -11) (undo-tree-id14903 . -11) (undo-tree-id14904 . -11) (undo-tree-id14905 . -11) (undo-tree-id14906 . -11) (undo-tree-id14907 . -11) (undo-tree-id14908 . -11) (undo-tree-id14909 . -11) (undo-tree-id14910 . -12) (undo-tree-id14911 . -11) (undo-tree-id14912 . -11) (undo-tree-id14913 . -11) (undo-tree-id14914 . -11) (undo-tree-id14915 . -11) (undo-tree-id14916 . -11) (undo-tree-id14917 . -11) (undo-tree-id14918 . -11) (undo-tree-id14919 . -11) (undo-tree-id14920 . -11) (undo-tree-id14921 . -11) (undo-tree-id14922 . -11) (undo-tree-id14923 . -11) (undo-tree-id14924 . -11) (undo-tree-id14925 . -11) (undo-tree-id14926 . -11) (undo-tree-id14927 . -12) (t 25758 55273 749550 825000)) ((23028 . 23040) (#("model = keras.models.Sequential([
keras.layers.Conv1D(filters=20, kernel_size=4, strides=2,
padding=\"valid\",
input_shape=[None, 1]),
keras.layers.GRU(20, return_sequences=True),
keras.layers.GRU(20, return_sequences=True),
keras.layers.TimeDistributed(keras.layers.Dense(10))
])model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[last_time_step_mse])
history = model.fit(X_train, Y_train[:, 3::2], epochs=20,
validation_data=(X_valid, Y_valid[:, 3::2]))" 0 34 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 34 72 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 72 73 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 73 77 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 77 92 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 92 109 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 109 114 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 114 115 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 115 120 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 120 133 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 133 160 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 160 161 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 161 170 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 170 178 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 178 205 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 205 206 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 206 215 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 215 223 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 223 276 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 276 335 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 335 336 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 336 340 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 340 341 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 341 345 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 345 346 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 346 349 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 349 352 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 352 373 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 373 374 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 374 379 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 379 382 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 382 383 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 383 388 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 388 410 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 410 420 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 420 421 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 421 425 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 425 428 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 428 429 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 429 434 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 434 437 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 437 438 (invisible t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 438 443 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 443 453 (fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 453 454 (rear-nonsticky nil fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23028) (undo-tree-id14931 . -453) (undo-tree-id14932 . -454) (undo-tree-id14933 . -454) (undo-tree-id14934 . -454) (undo-tree-id14935 . -454) (undo-tree-id14936 . -454) (undo-tree-id14937 . -454) (undo-tree-id14938 . -454) (undo-tree-id14939 . -454) (undo-tree-id14940 . -454) (undo-tree-id14941 . -454) (undo-tree-id14942 . -454) (undo-tree-id14943 . -454) (undo-tree-id14944 . -454) (undo-tree-id14945 . -454) (undo-tree-id14946 . -454) (undo-tree-id14947 . -454) (undo-tree-id14948 . -454) (undo-tree-id14949 . -454) (undo-tree-id14950 . -454) (nil fontified t 23028 . 23062) (nil fontified t 23105 . 23120) (nil fontified t 23101 . 23105) (nil fontified t 23100 . 23101) (nil fontified t 23062 . 23100) (nil fontified t 23120 . 23137) (nil fontified t 23148 . 23161) (nil fontified t 23143 . 23148) (nil fontified t 23142 . 23143) (nil fontified t 23137 . 23142) (nil fontified t 23198 . 23206) (nil fontified t 23189 . 23198) (nil fontified t 23188 . 23189) (nil fontified t 23161 . 23188) (nil fontified t 23243 . 23251) (nil fontified t 23234 . 23243) (nil fontified t 23233 . 23234) (nil fontified t 23206 . 23233) (nil fontified t 23251 . 23304) (nil fontified t 23377 . 23380) (nil fontified t 23374 . 23377) (nil fontified t 23373 . 23374) (nil fontified t 23369 . 23373) (nil fontified t 23368 . 23369) (nil fontified t 23364 . 23368) (nil fontified t 23363 . 23364) (nil fontified t 23304 . 23363) (nil fontified t 23416 . 23438) (nil fontified t 23411 . 23416) (nil fontified t 23410 . 23411) (nil fontified t 23407 . 23410) (nil fontified t 23402 . 23407) (nil fontified t 23401 . 23402) (nil fontified t 23380 . 23401) (nil rear-nonsticky t 23481 . 23482)) (25758 55294 746315 630000) 0 nil])
([nil nil ((23028 . 23030)) nil (25758 55325 309242 70000) 0 nil] [nil nil ((nil rear-nonsticky nil 23039 . 23040) (nil fontified nil 23029 . 23040) (nil fontified nil 23028 . 23029) (23028 . 23040)) ((#("
#+end_src 
" 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 11 (font-lock-multiline t face org-block-end-line font-lock-fontified t fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 11 12 (face org-block-end-line rear-nonsticky nil fontified nil wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23028) (nil rear-nonsticky t 23039 . 23040)) (25758 55313 817582 990000) 0 nil])
([nil nil ((23482 . 23483)) ((#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23482) (undo-tree-id14928 . -1) (undo-tree-id14929 . -1) (undo-tree-id14930 . -1)) (25758 55294 745691 615000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23481 . 23482) (nil fontified nil 23438 . 23482) (nil fontified nil 23380 . 23438) (nil fontified nil 23304 . 23380) (nil fontified nil 23251 . 23304) (nil fontified nil 23206 . 23251) (nil fontified nil 23161 . 23206) (nil fontified nil 23137 . 23161) (nil fontified nil 23120 . 23137) (nil fontified nil 23062 . 23120) (nil fontified nil 23028 . 23062) (23028 . 23482)) nil (25758 55330 102772 450000) 0 nil])
nil
nil
([nil nil ((23120 . 23121) (t 25758 55325 345840 602000)) nil (25758 55339 340140 875000) 0 nil] [nil nil ((#("
" 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -23061) (undo-tree-id14951 . -1) 23060 (t 25758 55325 345840 602000)) ((23061 . 23062)) (25758 55330 102372 539000) 0 nil])
([nil nil ((#("If you train and evaluate this model, you will find that it is the best model
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 46 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 46 78 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23499) (undo-tree-id14959 . -77) (undo-tree-id14960 . -78) (t 25758 55339 377921 403000)) nil (25758 55350 97164 96000) 0 nil])
nil
([nil nil ((#("so far. The convolutional layer really helps. In fact, it is actually possible
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 79 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23499) (undo-tree-id14957 . -78) (undo-tree-id14958 . -79)) nil (25758 55350 97161 296000) 0 nil])
([nil nil ((#("to use only 1D convolutional layers and drop the recurrent layers entirely!
" 0 1 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 74 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 74 75 (rear-nonsticky t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 75 76 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23499) (undo-tree-id14952 . -75) (undo-tree-id14953 . -76) (undo-tree-id14954 . -74) (undo-tree-id14955 . -76) (undo-tree-id14956 . -76)) nil (25758 55350 97155 541000) 0 nil])
([nil nil ((23307 . 23308) (t 25758 55350 137983 912000)) nil (25758 55356 245029 742000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 23120) (undo-tree-id14961 . -1) (undo-tree-id14962 . -1) (undo-tree-id14963 . -1) (undo-tree-id14964 . -1) (undo-tree-id14965 . -1) (undo-tree-id14966 . -1) (undo-tree-id14967 . -1) (undo-tree-id14968 . -1) (undo-tree-id14969 . -1) (t 25758 55356 278019 789000)) nil (25758 55370 45941 99000) 0 nil])
([nil nil ((23306 . 23307) (t 25758 55370 82100 993000)) nil (25758 55378 574873 709000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23485) (undo-tree-id14970 . -1) (t 25758 55378 614151 556000)) nil (25758 55381 292681 821000) 0 nil])
([nil nil ((23439 . 23440) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -23439) (undo-tree-id14971 . -1) (undo-tree-id14972 . -1) (undo-tree-id14973 . -1) (undo-tree-id14974 . -1) (undo-tree-id14975 . -1) (undo-tree-id14976 . -1) (undo-tree-id14977 . -1) (undo-tree-id14978 . -1) (undo-tree-id14979 . -1) 23401 (t 25758 55381 330167 708000)) nil (25758 55392 222680 312000) 0 nil])
([nil nil ((#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . -23440) (nil src-block nil 23439 . 23440) (nil face nil 23439 . 23440) (nil font-lock-multiline nil 23439 . 23440) (nil font-lock-fontified nil 23439 . 23440) (nil wrap-prefix #("    " 0 4 (face org-indent)) 23439 . 23440) (23439 . 23440) (t 25758 55392 262233 5000)) nil (25758 55394 943891 84000) 0 nil])
([nil nil ((23498 . 23499) (#("*" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -23498) (undo-tree-id15046 . -1) (undo-tree-id15047 . -1) (undo-tree-id15048 . -1) (undo-tree-id15049 . -1) (undo-tree-id15050 . -1) (undo-tree-id15051 . -1) (undo-tree-id15052 . -1) (undo-tree-id15053 . -1) (undo-tree-id15054 . -1) (undo-tree-id15055 . -1) (undo-tree-id15056 . -1) (undo-tree-id15057 . -1) (undo-tree-id15058 . -1) (undo-tree-id15059 . -1) (undo-tree-id15060 . -1) (undo-tree-id15061 . -1) (#(" " 0 1 (face org-level-2 keymap (keymap) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -23499) (undo-tree-id15062 . -1) (undo-tree-id15063 . -1) (undo-tree-id15064 . -1) (undo-tree-id15065 . -1) (undo-tree-id15066 . -1) (undo-tree-id15067 . -1) (undo-tree-id15068 . -1) (undo-tree-id15069 . -1) (undo-tree-id15070 . -1) 23500 (#("

" 0 1 (face org-block-end-line wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 2 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 23496) (23499 . 23502) (t 25758 55394 986249 345000)) nil (25758 55429 455522 59000) 0 nil])
([nil nil ((23499 . 23500)) nil (25758 55429 455505 835000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24185 . 24186) (nil fontified nil 24174 . 24186) (nil fontified nil 24104 . 24174) (nil fontified nil 24031 . 24104) (nil fontified nil 23957 . 24031) (nil fontified nil 23879 . 23957) (nil fontified nil 23802 . 23879) (nil fontified nil 23724 . 23802) (nil fontified nil 23650 . 23724) (nil fontified nil 23577 . 23650) (nil fontified nil 23508 . 23577) (nil fontified nil 23500 . 23508) (23500 . 24186)) nil (25758 55429 455504 788000) 0 nil])
([nil nil ((nil keymap (keymap) 23498 . 23499) (nil face org-level-1 23498 . 23499) (nil line-prefix #("    " 0 4 (face org-indent)) 23498 . 23499) (nil wrap-prefix #("    " 0 4 (face org-indent)) 23498 . 23499) (nil fontified nil 23498 . 23499) (23498 . 23499) (#(" " 0 1 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . 23498) (undo-tree-id14980 . -1) (undo-tree-id14981 . -1) (undo-tree-id14982 . -1) (undo-tree-id14983 . -1) (undo-tree-id14984 . -1) (undo-tree-id14985 . -1) (undo-tree-id14986 . -1) (undo-tree-id14987 . -1) (undo-tree-id14988 . -1) (undo-tree-id14989 . -1) (undo-tree-id14990 . -1) (undo-tree-id14991 . -1) (undo-tree-id14992 . -1) (undo-tree-id14993 . -1) (undo-tree-id14994 . -1) (undo-tree-id14995 . -1) (undo-tree-id14996 . -1) (undo-tree-id14997 . -1) (undo-tree-id14998 . -1) (undo-tree-id14999 . -1) (undo-tree-id15000 . -1) (undo-tree-id15001 . -1) (undo-tree-id15002 . -1) (undo-tree-id15003 . -1) (undo-tree-id15004 . -1) (undo-tree-id15005 . -1) (undo-tree-id15006 . -1) (undo-tree-id15007 . -1) (undo-tree-id15008 . -1) (undo-tree-id15009 . -1) (undo-tree-id15010 . -1) (undo-tree-id15011 . -1) (undo-tree-id15012 . -1) (undo-tree-id15013 . -1) (undo-tree-id15014 . -1) (undo-tree-id15015 . -1) (undo-tree-id15016 . -1) (undo-tree-id15017 . -1) (undo-tree-id15018 . -1) (undo-tree-id15019 . -1) (undo-tree-id15020 . -1) (#("
" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -23499) (undo-tree-id15021 . -1) (undo-tree-id15022 . -1) (undo-tree-id15023 . -1) (undo-tree-id15024 . -1) (undo-tree-id15025 . -1) (undo-tree-id15026 . -1) (undo-tree-id15027 . -1) (undo-tree-id15028 . -1) (undo-tree-id15029 . -1) (undo-tree-id15030 . -1) (undo-tree-id15031 . -1) (undo-tree-id15032 . -1) (undo-tree-id15033 . -1) (undo-tree-id15034 . -1) (undo-tree-id15035 . -1) (undo-tree-id15036 . -1) (undo-tree-id15037 . -1) (undo-tree-id15038 . -1) (undo-tree-id15039 . -1) (undo-tree-id15040 . -1) (undo-tree-id15041 . -1) (undo-tree-id15042 . -1) (undo-tree-id15043 . -1) (undo-tree-id15044 . -1) (undo-tree-id15045 . -1) 23498) nil (25758 55429 455499 536000) 0 nil])
([nil nil ((23496 . 23497) 23486) nil (25758 55429 455447 753000) 0 nil])
([nil nil ((24186 . 24187)) nil (25758 55429 455442 775000) 0 nil])
([nil nil ((#("In a 2016 paper,13 Aaron van den Oord and other DeepMind researchers
" 0 69 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23508) (undo-tree-id15092 . -68) (undo-tree-id15093 . -2) (undo-tree-id15094 . -2) (undo-tree-id15095 . -2) (undo-tree-id15096 . -2) (undo-tree-id15097 . -2) (undo-tree-id15098 . -2) (undo-tree-id15099 . -69) (t 25758 55429 542458 952000)) nil (25758 55441 748981 339000) 0 nil])
([nil nil ((#("introduced an architecture called WaveNet. " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 43 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23508) (undo-tree-id15071 . -42) (undo-tree-id15072 . -42) (undo-tree-id15073 . -42) (undo-tree-id15074 . -43) (undo-tree-id15075 . -42) (undo-tree-id15076 . -9) (undo-tree-id15077 . -9) (undo-tree-id15078 . -9) (undo-tree-id15079 . -9) (undo-tree-id15080 . -9) (undo-tree-id15081 . -9) (undo-tree-id15082 . -12) (undo-tree-id15083 . -25) (undo-tree-id15084 . -32) (undo-tree-id15085 . 9) (undo-tree-id15086 . -41) (undo-tree-id15087 . -40) (undo-tree-id15088 . -41) (undo-tree-id15089 . -42) (undo-tree-id15090 . -42) (undo-tree-id15091 . -43) 23550) nil (25758 55441 748962 895000) 0 nil])
([nil nil ((#("(how spread apart each neuron’s inputs
are)" 0 39 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 39 43 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23573) (undo-tree-id15138 . -42) (undo-tree-id15139 . 43) (undo-tree-id15140 . -1) (undo-tree-id15141 . 1) (undo-tree-id15142 . -43) (undo-tree-id15143 . -43) (t 25758 55441 782534 198000)) nil (25758 55447 260069 816000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23572) (undo-tree-id15100 . -1) (undo-tree-id15101 . -1) (undo-tree-id15102 . -1) (undo-tree-id15103 . -1) (undo-tree-id15104 . -1) (undo-tree-id15105 . -1) (undo-tree-id15106 . -1) (undo-tree-id15107 . -1) (undo-tree-id15108 . -1) (undo-tree-id15109 . -1) (undo-tree-id15110 . -1) (undo-tree-id15111 . -1) (undo-tree-id15112 . -1) (undo-tree-id15113 . -1) (undo-tree-id15114 . -1) (undo-tree-id15115 . -1) (undo-tree-id15116 . -1) (undo-tree-id15117 . -1) (undo-tree-id15118 . -1) (undo-tree-id15119 . -1) (undo-tree-id15120 . -1) (undo-tree-id15121 . -1) (undo-tree-id15122 . -1) (undo-tree-id15123 . -1) (undo-tree-id15124 . -1) (undo-tree-id15125 . -1) (undo-tree-id15126 . -1) (undo-tree-id15127 . -1) (undo-tree-id15128 . -1) (undo-tree-id15129 . -1) (undo-tree-id15130 . -1) (undo-tree-id15131 . -1) (undo-tree-id15132 . -1) (undo-tree-id15133 . -1) (undo-tree-id15134 . -1) (undo-tree-id15135 . -1) (undo-tree-id15136 . -1) (undo-tree-id15137 . -1)) nil (25758 55447 260058 463000) 0 nil])
([nil nil ((#("(its receptive
field is four time steps long)" 0 15 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 15 45 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23708) (undo-tree-id15238 . -44) (undo-tree-id15239 . 45) (undo-tree-id15240 . -1) (undo-tree-id15241 . 1) (undo-tree-id15242 . -45) (undo-tree-id15243 . -45) (t 25758 55447 298568 272000)) nil (25758 55472 369701 16000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23707) (undo-tree-id15144 . -1) (undo-tree-id15145 . -1) (undo-tree-id15146 . -1) (undo-tree-id15147 . -1) (undo-tree-id15148 . -1) (undo-tree-id15149 . -1) (undo-tree-id15150 . -1) (undo-tree-id15151 . -1) (undo-tree-id15152 . -1) (undo-tree-id15153 . -1) (undo-tree-id15154 . -1) (undo-tree-id15155 . -1) (undo-tree-id15156 . -1) (undo-tree-id15157 . -1) (undo-tree-id15158 . -1) (undo-tree-id15159 . -1) (undo-tree-id15160 . -1) (undo-tree-id15161 . -1) (undo-tree-id15162 . -1) (undo-tree-id15163 . -1) (undo-tree-id15164 . -1) (undo-tree-id15165 . -1) (undo-tree-id15166 . -1) (undo-tree-id15167 . -1) (undo-tree-id15168 . -1) (undo-tree-id15169 . -1) (undo-tree-id15170 . -1) (undo-tree-id15171 . -1) (undo-tree-id15172 . -1) (undo-tree-id15173 . -1) (undo-tree-id15174 . -1) (undo-tree-id15175 . -1) (undo-tree-id15176 . -1) (undo-tree-id15177 . -1) (undo-tree-id15178 . -1) (undo-tree-id15179 . -1) (undo-tree-id15180 . -1) (undo-tree-id15181 . -1) (undo-tree-id15182 . -1) (undo-tree-id15183 . -1) (undo-tree-id15184 . -1) (undo-tree-id15185 . -1) (undo-tree-id15186 . -1) (undo-tree-id15187 . -1) (undo-tree-id15188 . -1) (undo-tree-id15189 . -1) (undo-tree-id15190 . -1) (undo-tree-id15191 . -1) (undo-tree-id15192 . -1) (undo-tree-id15193 . -1) (undo-tree-id15194 . -1) (undo-tree-id15195 . -1) (undo-tree-id15196 . -1) (undo-tree-id15197 . -1) (undo-tree-id15198 . -1) (undo-tree-id15199 . -1) (undo-tree-id15200 . -1) (undo-tree-id15201 . -1) (undo-tree-id15202 . -1) (undo-tree-id15203 . -1) (undo-tree-id15204 . -1) (undo-tree-id15205 . -1) (undo-tree-id15206 . -1) (undo-tree-id15207 . -1) (undo-tree-id15208 . -1) (undo-tree-id15209 . -1) (undo-tree-id15210 . -1) (undo-tree-id15211 . -1) (undo-tree-id15212 . -1) (undo-tree-id15213 . -1) (undo-tree-id15214 . -1) (undo-tree-id15215 . -1) (undo-tree-id15216 . -1) (undo-tree-id15217 . -1) (undo-tree-id15218 . -1) (undo-tree-id15219 . -1) (undo-tree-id15220 . -1) (undo-tree-id15221 . -1) (undo-tree-id15222 . -1) (undo-tree-id15223 . -1) (undo-tree-id15224 . -1) (undo-tree-id15225 . -1) (undo-tree-id15226 . -1) (undo-tree-id15227 . -1) (undo-tree-id15228 . -1) (undo-tree-id15229 . -1) (undo-tree-id15230 . -1) (undo-tree-id15231 . -1) (undo-tree-id15232 . -1) (undo-tree-id15233 . -1) (undo-tree-id15234 . -1) (undo-tree-id15235 . -1) (undo-tree-id15236 . -1) (undo-tree-id15237 . -1)) nil (25758 55472 369690 811000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23727) (nil fontified nil 23726 . 23727) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23726 . 23727) (23726 . 23727) 23707 (t 25758 55472 406724 640000)) nil (25758 55488 452764 739000) 0 nil])
([nil nil ((23726 . 23727) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23726) (undo-tree-id15307 . -1) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) (undo-tree-id15317 . -1) (undo-tree-id15318 . -1) (undo-tree-id15319 . -1) (undo-tree-id15320 . -1) 23722) nil (25758 55488 452762 562000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23727) (nil fontified nil 23726 . 23727) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23726 . 23727) (23726 . 23727)) nil (25758 55488 452753 77000) 0 nil])
([nil nil ((#("(see Figure 15-11)" 0 18 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23755) (undo-tree-id15299 . -17) (undo-tree-id15300 . 18) (undo-tree-id15301 . 18) (undo-tree-id15302 . 18) (undo-tree-id15303 . -1) (undo-tree-id15304 . 1) (undo-tree-id15305 . -18) (undo-tree-id15306 . -18)) nil (25758 55488 452751 574000) 0 nil])
([nil nil ((23754 . 23755) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23754) (undo-tree-id15246 . -1) (undo-tree-id15247 . -1) (undo-tree-id15248 . 1) (undo-tree-id15249 . 1) (undo-tree-id15250 . -1) (undo-tree-id15251 . -1) (undo-tree-id15252 . -1) (undo-tree-id15253 . -1) (undo-tree-id15254 . -1) (undo-tree-id15255 . -1) (undo-tree-id15256 . -1) (undo-tree-id15257 . -1) (undo-tree-id15258 . -1) (undo-tree-id15259 . -1) (undo-tree-id15260 . -1) (undo-tree-id15261 . -1) (undo-tree-id15262 . -1) (undo-tree-id15263 . -1) (undo-tree-id15264 . -1) (undo-tree-id15265 . -1) (undo-tree-id15266 . -1) (undo-tree-id15267 . -1) (undo-tree-id15268 . -1) (undo-tree-id15269 . -1) (undo-tree-id15270 . -1) (undo-tree-id15271 . -1) (undo-tree-id15272 . -1) (undo-tree-id15273 . -1) (undo-tree-id15274 . -1) (undo-tree-id15275 . -1) (undo-tree-id15276 . -1) (undo-tree-id15277 . -1) (undo-tree-id15278 . -1) (undo-tree-id15279 . -1) (undo-tree-id15280 . -1) (undo-tree-id15281 . -1) (undo-tree-id15282 . -1) (undo-tree-id15283 . -1) (undo-tree-id15284 . -1) (undo-tree-id15285 . -1) (undo-tree-id15286 . -1) (undo-tree-id15287 . -1) (undo-tree-id15288 . -1) (undo-tree-id15289 . -1) (undo-tree-id15290 . -1) (undo-tree-id15291 . -1) (undo-tree-id15292 . -1) (undo-tree-id15293 . -1) (undo-tree-id15294 . -1) (undo-tree-id15295 . -1) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) 23727) nil (25758 55488 452743 124000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23754) (undo-tree-id15244 . -1) (undo-tree-id15245 . -1)) nil (25758 55488 452701 72000) 0 nil])
([nil nil ((23756 . 23758)) nil (25758 55488 452685 487000) 0 nil])
([nil nil ((23862 . 23863) (#(")" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23862) (undo-tree-id15321 . -1) (undo-tree-id15322 . -1) (undo-tree-id15323 . -1) (undo-tree-id15324 . -1) (undo-tree-id15325 . -1) (undo-tree-id15326 . -1) (undo-tree-id15327 . -1) (undo-tree-id15328 . -1) (undo-tree-id15329 . -1) (undo-tree-id15330 . -1) (undo-tree-id15331 . -1) (undo-tree-id15332 . -1) (undo-tree-id15333 . -1) (undo-tree-id15334 . -1) (undo-tree-id15335 . -1) (undo-tree-id15336 . -1) (undo-tree-id15337 . 1) (undo-tree-id15338 . -1) (undo-tree-id15339 . -1) (undo-tree-id15340 . -1) (undo-tree-id15341 . -1) (undo-tree-id15342 . -1) (undo-tree-id15343 . -1) (undo-tree-id15344 . -1) (undo-tree-id15345 . -1) (undo-tree-id15346 . -1) (undo-tree-id15347 . -1) 23863 (23862 . 23863) (#("Thanks to the doubling
dilation rate, t" 0 23 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 23 39 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23862) (undo-tree-id15348 . -38) (undo-tree-id15349 . -38) (undo-tree-id15350 . -38) (undo-tree-id15351 . -23) (undo-tree-id15352 . -23) (undo-tree-id15353 . -23) (undo-tree-id15354 . -23) (undo-tree-id15355 . -23) (undo-tree-id15356 . -23) (undo-tree-id15357 . -23) (undo-tree-id15358 . -23) (undo-tree-id15359 . -23) (undo-tree-id15360 . -32) (undo-tree-id15361 . -32) (undo-tree-id15362 . -32) (undo-tree-id15363 . -32) (undo-tree-id15364 . -32) (undo-tree-id15365 . -32) (undo-tree-id15366 . -32) (undo-tree-id15367 . -32) (undo-tree-id15368 . -39) (undo-tree-id15369 . -38) (undo-tree-id15370 . -5) (undo-tree-id15371 . -5) (undo-tree-id15372 . -5) (undo-tree-id15373 . -5) (undo-tree-id15374 . -5) (undo-tree-id15375 . -5) (undo-tree-id15376 . -5) (undo-tree-id15377 . -5) (undo-tree-id15378 . -8) (undo-tree-id15379 . -8) (undo-tree-id15380 . -8) (undo-tree-id15381 . -8) (undo-tree-id15382 . -8) (undo-tree-id15383 . -8) (undo-tree-id15384 . -8) (undo-tree-id15385 . -8) (undo-tree-id15386 . -12) (undo-tree-id15387 . -12) (undo-tree-id15388 . -12) (undo-tree-id15389 . -12) (undo-tree-id15390 . -12) (undo-tree-id15391 . -12) (undo-tree-id15392 . -12) (undo-tree-id15393 . -12) (undo-tree-id15394 . -21) (undo-tree-id15395 . -21) (undo-tree-id15396 . -21) (undo-tree-id15397 . -21) (undo-tree-id15398 . -21) (undo-tree-id15399 . -21) (undo-tree-id15400 . -21) (undo-tree-id15401 . -21) (undo-tree-id15402 . -30) (undo-tree-id15403 . -30) (undo-tree-id15404 . -30) (undo-tree-id15405 . -30) (undo-tree-id15406 . -30) (undo-tree-id15407 . -30) (undo-tree-id15408 . -30) (undo-tree-id15409 . -30) (undo-tree-id15410 . -35) (undo-tree-id15411 . -35) (undo-tree-id15412 . -35) (undo-tree-id15413 . -35) (undo-tree-id15414 . -35) (undo-tree-id15415 . -35) (undo-tree-id15416 . -35) (undo-tree-id15417 . -35) (undo-tree-id15418 . -36) (undo-tree-id15419 . -36) (undo-tree-id15420 . -36) (undo-tree-id15421 . -36) (undo-tree-id15422 . -36) (undo-tree-id15423 . -36) (undo-tree-id15424 . -36) (undo-tree-id15425 . -36) (undo-tree-id15426 . -39) (undo-tree-id15427 . -39) (undo-tree-id15428 . -39) (undo-tree-id15429 . -39) (undo-tree-id15430 . -39) (undo-tree-id15431 . -39) (undo-tree-id15432 . -39) (undo-tree-id15433 . -39) (undo-tree-id15434 . -38) (undo-tree-id15435 . -38) (undo-tree-id15436 . -38) (undo-tree-id15437 . -38) (undo-tree-id15438 . -38) (undo-tree-id15439 . -38) (undo-tree-id15440 . -38) (undo-tree-id15441 . -38) (undo-tree-id15442 . -38) (undo-tree-id15443 . -39) (undo-tree-id15444 . -39) (undo-tree-id15445 . -39) 23900 (t 25758 55488 490825 863000)) nil (25758 55513 553821 297000) 0 nil])
([nil nil ((23862 . 23864)) nil (25758 55513 553579 40000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26770 . 26771) (nil fontified nil 26737 . 26771) (nil fontified nil 26668 . 26737) (nil fontified nil 26613 . 26668) (nil fontified nil 26538 . 26613) (nil fontified nil 26466 . 26538) (nil fontified nil 26317 . 26466) (nil fontified nil 26244 . 26317) (nil fontified nil 26171 . 26244) (nil fontified nil 26098 . 26171) (nil fontified nil 26073 . 26098) (nil fontified nil 25999 . 26073) (nil fontified nil 25924 . 25999) (nil fontified nil 25853 . 25924) (nil fontified nil 25775 . 25853) (nil fontified nil 25697 . 25775) (nil fontified nil 25622 . 25697) (nil fontified nil 25544 . 25622) (nil fontified nil 25470 . 25544) (nil fontified nil 25399 . 25470) (nil fontified nil 25322 . 25399) (nil fontified nil 25247 . 25322) (nil fontified nil 25211 . 25247) (nil fontified nil 25162 . 25211) (nil fontified nil 25088 . 25162) (nil fontified nil 25030 . 25088) (nil fontified nil 24990 . 25030) (nil fontified nil 24972 . 24990) (nil fontified nil 24915 . 24972) (nil fontified nil 24885 . 24915) (nil fontified nil 24827 . 24885) (nil fontified nil 24793 . 24827) (nil fontified nil 24750 . 24793) (nil fontified nil 24680 . 24750) (nil fontified nil 24605 . 24680) (nil fontified nil 24531 . 24605) (nil fontified nil 24457 . 24531) (nil fontified nil 24384 . 24457) (nil fontified nil 24306 . 24384) (nil fontified nil 24156 . 24306) (nil fontified nil 24081 . 24156) (nil fontified nil 24007 . 24081) (nil fontified nil 23932 . 24007) (23932 . 26771) (t 25758 55513 590947 690000)) nil (25758 55534 970972 494000) 0 nil])
([nil nil ((26771 . 26772)) nil (25758 55534 970961 249000) 0 nil])
([nil nil ((23918 . 23919) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23918) (undo-tree-id15446 . -1) 23902 (t 25758 55535 11017 977000)) nil (25758 55541 71046 320000) 0 nil])
([nil nil ((23932 . 23933) (t 25758 55541 103038 629000)) nil (25758 55566 190528 29000) 0 nil])
([nil nil ((#("In the WaveNet paper, the authors actually stacked 10 convolutional layers
" 0 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23933) (undo-tree-id15461 . -74) (undo-tree-id15462 . 75) (undo-tree-id15463 . -1) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (undo-tree-id15468 . -1) (undo-tree-id15469 . -1) (undo-tree-id15470 . -1) (undo-tree-id15471 . -75)) nil (25758 55566 190526 710000) 0 nil])
([nil nil ((#("with dilation rates of 1, 2, 4, 8, …, 256, 512, then they stacked another
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23933) (undo-tree-id15458 . -73) (undo-tree-id15459 . 74) (undo-tree-id15460 . -74)) nil (25758 55566 190517 815000) 0 nil])
([nil nil ((#("group of 10 identical layers (also with dilation rates 1, 2, 4, 8, …, 256,
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23933) (undo-tree-id15455 . -74) (undo-tree-id15456 . 75) (undo-tree-id15457 . -75)) nil (25758 55566 190514 270000) 0 nil])
([nil nil ((#("512" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23933) (undo-tree-id15452 . -2) (undo-tree-id15453 . 3) (undo-tree-id15454 . -3)) nil (25758 55566 190509 972000) 0 nil])
([nil nil ((#("), " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23933) (undo-tree-id15447 . -2) (undo-tree-id15448 . 3) (undo-tree-id15449 . 3) (undo-tree-id15450 . -1) (undo-tree-id15451 . -3)) nil (25758 55566 190503 305000) 0 nil])
([nil nil ((#("then again another identical group of 10 layers. They justified thisarchitecture by pointing out that a single stack of 10 convolutional layers
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 144 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23933) (undo-tree-id15472 . -143) (undo-tree-id15473 . 144) (undo-tree-id15474 . -144) (t 25758 55566 275126 953000)) nil (25758 55570 323669 540000) 0 nil])
([nil nil ((24377 . 24378) (t 25758 55570 363141 743000)) nil (25758 55578 525013 122000) 0 nil])
([nil nil ((#("to tackle the same sequences as earlier:14" 0 42 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24378) (undo-tree-id15635 . -41) (undo-tree-id15636 . 42) (undo-tree-id15637 . -42) (undo-tree-id15638 . -42) (t 25758 55578 563171 774000)) nil (25758 55595 162869 460000) 0 nil])
([nil nil ((24394 . 24396) (24392 . 24394) (#("h" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24392) (undo-tree-id15488 . -1) (undo-tree-id15489 . -1) (undo-tree-id15490 . -1) (undo-tree-id15491 . -1) (undo-tree-id15492 . -1) (undo-tree-id15493 . -1) (undo-tree-id15494 . -1) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (undo-tree-id15497 . -1) (undo-tree-id15498 . -1) (undo-tree-id15499 . -1) (undo-tree-id15500 . -1) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -1) (undo-tree-id15504 . -1) (undo-tree-id15505 . -1) (undo-tree-id15506 . -1) (undo-tree-id15507 . -1) (undo-tree-id15508 . -1) (undo-tree-id15509 . -1) (undo-tree-id15510 . -1) (undo-tree-id15511 . -1) (undo-tree-id15512 . -1) (undo-tree-id15513 . -1) (undo-tree-id15514 . -1) (undo-tree-id15515 . -1) (#("t" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24393) (undo-tree-id15516 . -1) (undo-tree-id15517 . -1) (undo-tree-id15518 . -1) (undo-tree-id15519 . -1) (undo-tree-id15520 . -1) (undo-tree-id15521 . -1) (undo-tree-id15522 . -1) (undo-tree-id15523 . -1) (undo-tree-id15524 . -1) (undo-tree-id15525 . -1) (undo-tree-id15526 . -1) 24394 (24390 . 24394) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 24390 24396 nil nil nil t #s(yas--exit 24414 nil))) #s(yas--exit 24414 nil) 5 nil #s(yas--field 1 24390 24396 nil nil nil t #s(yas--exit 24414 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -24408) (undo-tree-id15527 . -2) (24378 . 24421) (#("sr" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24378) (undo-tree-id15528 . -1) (undo-tree-id15529 . -1) (undo-tree-id15530 . -2) (undo-tree-id15531 . -1) (undo-tree-id15532 . -1) (undo-tree-id15533 . -1) (undo-tree-id15534 . -1) (undo-tree-id15535 . -1) (undo-tree-id15536 . -1) (undo-tree-id15537 . -1) (undo-tree-id15538 . -1) (undo-tree-id15539 . -1) (undo-tree-id15540 . -1) (undo-tree-id15541 . -1) (undo-tree-id15542 . -1) (undo-tree-id15543 . -1) (undo-tree-id15544 . -1) (undo-tree-id15545 . -1) (undo-tree-id15546 . -1) (undo-tree-id15547 . -1) (undo-tree-id15548 . -1) (undo-tree-id15549 . -1) (undo-tree-id15550 . -1) (undo-tree-id15551 . -1) (undo-tree-id15552 . -1) (undo-tree-id15553 . -1) (undo-tree-id15554 . -1) (undo-tree-id15555 . -1) (undo-tree-id15556 . -1) (undo-tree-id15557 . -1) (undo-tree-id15558 . -1) (undo-tree-id15559 . -1) (undo-tree-id15560 . -1) (undo-tree-id15561 . -1) (undo-tree-id15562 . -1) (undo-tree-id15563 . -1) (undo-tree-id15564 . -1) (undo-tree-id15565 . -1) (undo-tree-id15566 . -1) (undo-tree-id15567 . -1) (undo-tree-id15568 . -1) (undo-tree-id15569 . -1) (undo-tree-id15570 . -1) (undo-tree-id15571 . -1) (undo-tree-id15572 . -1) (undo-tree-id15573 . -1) (undo-tree-id15574 . -1) (undo-tree-id15575 . -1) (undo-tree-id15576 . -1) (undo-tree-id15577 . -1) (undo-tree-id15578 . -1) (undo-tree-id15579 . -1) (undo-tree-id15580 . -1) (undo-tree-id15581 . -1) (undo-tree-id15582 . -1) (undo-tree-id15583 . -1) (undo-tree-id15584 . -1) (undo-tree-id15585 . -1) (undo-tree-id15586 . -1) (undo-tree-id15587 . -1) (undo-tree-id15588 . -1) (undo-tree-id15589 . -1) (undo-tree-id15590 . -1) (undo-tree-id15591 . -1) (undo-tree-id15592 . -1) (undo-tree-id15593 . -1) (undo-tree-id15594 . -1) (undo-tree-id15595 . -1) (undo-tree-id15596 . -1) (undo-tree-id15597 . -1) (undo-tree-id15598 . -1) (undo-tree-id15599 . -1) (undo-tree-id15600 . -1) (undo-tree-id15601 . -1) (undo-tree-id15602 . -1) (undo-tree-id15603 . -2) (undo-tree-id15604 . -2) (undo-tree-id15605 . -2) (undo-tree-id15606 . -2) (undo-tree-id15607 . -2) (undo-tree-id15608 . -2) (undo-tree-id15609 . -2) (undo-tree-id15610 . -2) (undo-tree-id15611 . -2) (undo-tree-id15612 . -2) (undo-tree-id15613 . -2) 24380 (24379 . 24380) (#("c" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -24379) (undo-tree-id15614 . -1) (undo-tree-id15615 . -1) (undo-tree-id15616 . -1) (undo-tree-id15617 . -1) (undo-tree-id15618 . -1) (undo-tree-id15619 . -1) (undo-tree-id15620 . -1) (undo-tree-id15621 . -1) (undo-tree-id15622 . -1) (undo-tree-id15623 . -1) (undo-tree-id15624 . -1) (undo-tree-id15625 . -1) (undo-tree-id15626 . -1) (undo-tree-id15627 . -1) (undo-tree-id15628 . -1) (undo-tree-id15629 . -1) (undo-tree-id15630 . -1) (undo-tree-id15631 . -1) (undo-tree-id15632 . -1) (undo-tree-id15633 . -1) (undo-tree-id15634 . -1) 24380 (24378 . 24380)) nil (25758 55595 162860 831000) 0 nil])
([nil nil ((apply yas--snippet-revive 24378 24425 #s(yas--snippet nil (#s(yas--field 1 24390 24396 nil nil nil t #s(yas--exit 24414 nil))) #s(yas--exit 24414 nil) 5 nil #s(yas--field 1 24390 24396 nil nil nil t #s(yas--exit 24414 nil)) nil nil))) nil (25758 55595 162765 335000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24413) (undo-tree-id15487 . -1)) nil (25758 55595 162764 203000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24413) (undo-tree-id15486 . -1)) nil (25758 55595 162762 477000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24414) (undo-tree-id15475 . -9) (undo-tree-id15476 . -9) (undo-tree-id15477 . -9) (undo-tree-id15478 . -9) (undo-tree-id15479 . -9) (undo-tree-id15480 . -9) (undo-tree-id15481 . -9) (undo-tree-id15482 . -9) (undo-tree-id15483 . -9) (undo-tree-id15484 . -9) (undo-tree-id15485 . -10)) nil (25758 55595 162759 918000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24867 . 24868) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -24877) (24867 . 24878) 24832) nil (25758 55595 162637 684000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24413) (undo-tree-id15639 . -1) (undo-tree-id15640 . -1) (undo-tree-id15641 . -1) (undo-tree-id15642 . -1) (undo-tree-id15643 . -1) (undo-tree-id15644 . -1) (undo-tree-id15645 . -1) (undo-tree-id15646 . -1) (undo-tree-id15647 . -1) (undo-tree-id15648 . -1) (undo-tree-id15649 . -1) (undo-tree-id15650 . -1) (undo-tree-id15651 . -1) (undo-tree-id15652 . -1) (undo-tree-id15653 . -1) (undo-tree-id15654 . -1) (undo-tree-id15655 . -1) (undo-tree-id15656 . -1) (t 25758 55595 247234 351000)) nil (25758 55598 446886 564000) 0 nil])
([nil nil ((24858 . 24859) (24857 . 24858) (24856 . 24857) (24855 . 24856) (24805 . 24806) (24804 . 24805) (24803 . 24804) (24802 . 24803) (24727 . 24728) (24726 . 24727) (24725 . 24726) (24724 . 24725) (24665 . 24666) (24664 . 24665) (24663 . 24664) (24662 . 24663) (24621 . 24622) (24620 . 24621) (24619 . 24620) (24618 . 24619) (24599 . 24600) (24598 . 24599) (24597 . 24598) (24596 . 24597) (24535 . 24539) (t 25758 55598 487246 730000)) nil (25758 55608 986869 766000) 0 nil])
([nil nil ((#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -24596) (undo-tree-id15665 . -1) (undo-tree-id15666 . -1) (undo-tree-id15667 . -1) (undo-tree-id15668 . -1) (undo-tree-id15669 . -1) (undo-tree-id15670 . -1) (undo-tree-id15671 . -1) (undo-tree-id15672 . -1) (undo-tree-id15673 . -1) (undo-tree-id15674 . -1) (undo-tree-id15675 . -1) (undo-tree-id15676 . -1) (undo-tree-id15677 . -1) (undo-tree-id15678 . -1) (undo-tree-id15679 . -1) (undo-tree-id15680 . -1) (undo-tree-id15681 . -1) (undo-tree-id15682 . -1) (undo-tree-id15683 . -1) (undo-tree-id15684 . -1) (undo-tree-id15685 . -1) (undo-tree-id15686 . -1) (undo-tree-id15687 . -1) (undo-tree-id15688 . -1) (undo-tree-id15689 . -1) (undo-tree-id15690 . -1) (undo-tree-id15691 . -1) (undo-tree-id15692 . -1) (undo-tree-id15693 . -1) (undo-tree-id15694 . -1) (undo-tree-id15695 . -1) (undo-tree-id15696 . -1) (undo-tree-id15697 . -1) (undo-tree-id15698 . -1) (undo-tree-id15699 . -1) (undo-tree-id15700 . -1) (undo-tree-id15701 . -1) (undo-tree-id15702 . -1) (undo-tree-id15703 . -1) (undo-tree-id15704 . -1) (undo-tree-id15705 . -1) (undo-tree-id15706 . -1) (undo-tree-id15707 . -1) (undo-tree-id15708 . -1) (undo-tree-id15709 . -1) (undo-tree-id15710 . -1) (undo-tree-id15711 . -1) (undo-tree-id15712 . -1) (undo-tree-id15713 . -1) (undo-tree-id15714 . -1) (undo-tree-id15715 . -1) (undo-tree-id15716 . -1) (undo-tree-id15717 . -1) (undo-tree-id15718 . -1) (undo-tree-id15719 . -1) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -24597) (undo-tree-id15720 . -1) (undo-tree-id15721 . -1) (undo-tree-id15722 . -1) (undo-tree-id15723 . -1) (undo-tree-id15724 . -1) (undo-tree-id15725 . -1) (undo-tree-id15726 . -1) (undo-tree-id15727 . -1) (undo-tree-id15728 . -1) (undo-tree-id15729 . -1) (undo-tree-id15730 . -1) (undo-tree-id15731 . -1) (undo-tree-id15732 . -1) (undo-tree-id15733 . -1) (undo-tree-id15734 . -1) (undo-tree-id15735 . -1) (undo-tree-id15736 . -1) (undo-tree-id15737 . -1) (undo-tree-id15738 . -1) (undo-tree-id15739 . -1) (undo-tree-id15740 . -1) (undo-tree-id15741 . -1) (undo-tree-id15742 . -1) (undo-tree-id15743 . -1) (undo-tree-id15744 . -1) (undo-tree-id15745 . -1) (undo-tree-id15746 . -1) (undo-tree-id15747 . -1) (undo-tree-id15748 . -1) (undo-tree-id15749 . -1) (undo-tree-id15750 . -1) (undo-tree-id15751 . -1) (undo-tree-id15752 . -1) (undo-tree-id15753 . -1) (undo-tree-id15754 . -1) (undo-tree-id15755 . -1) (undo-tree-id15756 . -1) (undo-tree-id15757 . -1) (undo-tree-id15758 . -1) (undo-tree-id15759 . -1) (undo-tree-id15760 . -1) (undo-tree-id15761 . -1) (undo-tree-id15762 . -1) (undo-tree-id15763 . -1) (undo-tree-id15764 . -1) (undo-tree-id15765 . -1) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -24598) (undo-tree-id15766 . -1) (undo-tree-id15767 . -1) (undo-tree-id15768 . -1) (undo-tree-id15769 . -1) (undo-tree-id15770 . -1) (undo-tree-id15771 . -1) (undo-tree-id15772 . -1) (undo-tree-id15773 . -1) (undo-tree-id15774 . -1) (undo-tree-id15775 . -1) (undo-tree-id15776 . -1) (undo-tree-id15777 . -1) (undo-tree-id15778 . -1) (undo-tree-id15779 . -1) (undo-tree-id15780 . -1) (undo-tree-id15781 . -1) (undo-tree-id15782 . -1) (undo-tree-id15783 . -1) (undo-tree-id15784 . -1) (undo-tree-id15785 . -1) (undo-tree-id15786 . -1) (undo-tree-id15787 . -1) (undo-tree-id15788 . -1) (undo-tree-id15789 . -1) (undo-tree-id15790 . -1) (undo-tree-id15791 . -1) (undo-tree-id15792 . -1) (undo-tree-id15793 . -1) (undo-tree-id15794 . -1) (undo-tree-id15795 . -1) (undo-tree-id15796 . -1) (undo-tree-id15797 . -1) (undo-tree-id15798 . -1) (undo-tree-id15799 . -1) (undo-tree-id15800 . -1) (undo-tree-id15801 . -1) (undo-tree-id15802 . -1) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -24599) (undo-tree-id15803 . -1) (undo-tree-id15804 . -1) (undo-tree-id15805 . -1) (undo-tree-id15806 . -1) (undo-tree-id15807 . -1) (undo-tree-id15808 . -1) (undo-tree-id15809 . -1) (undo-tree-id15810 . -1) (undo-tree-id15811 . -1) (undo-tree-id15812 . -1) (undo-tree-id15813 . -1) (undo-tree-id15814 . -1) (undo-tree-id15815 . -1) (undo-tree-id15816 . -1) (undo-tree-id15817 . -1) (undo-tree-id15818 . -1) (undo-tree-id15819 . -1) (undo-tree-id15820 . -1) (undo-tree-id15821 . -1) (undo-tree-id15822 . -1) 24600 (t 25758 55609 27287 495000)) nil (25758 55633 509535 515000) 0 nil])
([nil nil ((#("    " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24614) (undo-tree-id15663 . -3) (undo-tree-id15664 . -4)) nil (25758 55633 509219 521000) 0 nil])
([nil nil ((#("    " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24654) (undo-tree-id15661 . -3) (undo-tree-id15662 . -4)) nil (25758 55633 509217 301000) 0 nil])
([nil nil ((#("    " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24712) (undo-tree-id15659 . -3) (undo-tree-id15660 . -4)) nil (25758 55633 509214 781000) 0 nil])
([nil nil ((#("    " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24786) (undo-tree-id15657 . -3) (undo-tree-id15658 . -4)) nil (25758 55633 509209 697000) 0 nil])
([nil nil ((24884 . 24885) (t 25758 55633 551385 220000) 24883) nil (25758 55647 996131 928000) 0 nil])
([nil nil ((#("(this is simpler
than trying to set input_shape only on the first layer)" 0 17 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 17 41 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 41 42 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 47 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24944) (undo-tree-id15835 . -71) (undo-tree-id15836 . -72) 24886 (t 25758 55648 31444 753000)) nil (25758 55658 64399 456000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24943) (undo-tree-id15823 . -1) (undo-tree-id15824 . -1) (undo-tree-id15825 . -1) (undo-tree-id15826 . -1) (undo-tree-id15827 . -1) (undo-tree-id15828 . -1) (undo-tree-id15829 . -1) (undo-tree-id15830 . -1) (undo-tree-id15831 . -1) (undo-tree-id15832 . -1) (undo-tree-id15833 . -1) (undo-tree-id15834 . -1)) nil (25758 55658 64393 878000) 0 nil])
([nil nil ((#("(it is equivalent to padding the inputs with the right amount of zeros on the
left and using \"valid\" padding)" 0 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 78 109 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25110) (undo-tree-id15838 . -108) (undo-tree-id15839 . -33) (undo-tree-id15840 . -1) (undo-tree-id15841 . -4) (undo-tree-id15842 . -7) (undo-tree-id15843 . -18) (undo-tree-id15844 . -21) (undo-tree-id15845 . -29) (undo-tree-id15846 . -33) (undo-tree-id15847 . -40) (undo-tree-id15848 . -33) (undo-tree-id15849 . -33) (undo-tree-id15850 . -33) (undo-tree-id15851 . -33) (undo-tree-id15852 . -33) (undo-tree-id15853 . -33) (undo-tree-id15854 . -33) (undo-tree-id15855 . -33) (undo-tree-id15856 . -33) (undo-tree-id15857 . -33) (undo-tree-id15858 . -33) (undo-tree-id15859 . -109) 25143 (t 25758 55658 103486 939000)) nil (25758 55679 698640 177000) 0 nil])
([nil nil ((25109 . 25110) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -25109) (undo-tree-id15862 . -1) (undo-tree-id15863 . -1) (undo-tree-id15864 . -1) (undo-tree-id15865 . -1) (undo-tree-id15866 . -1) (undo-tree-id15867 . -1) (undo-tree-id15868 . -1) (undo-tree-id15869 . -1) (undo-tree-id15870 . -1) (undo-tree-id15871 . -1) (undo-tree-id15872 . -1) (undo-tree-id15873 . -1) (undo-tree-id15874 . -1) (undo-tree-id15875 . -1) (undo-tree-id15876 . -1) (undo-tree-id15877 . -1) (undo-tree-id15878 . -1) (undo-tree-id15879 . -1) (undo-tree-id15880 . -1) (undo-tree-id15881 . -1) (undo-tree-id15882 . -1) (undo-tree-id15883 . -1) (undo-tree-id15884 . -1) (undo-tree-id15885 . -1) (undo-tree-id15886 . -1) (undo-tree-id15887 . -1) (undo-tree-id15888 . -1) (undo-tree-id15889 . -1) (undo-tree-id15890 . -1) (undo-tree-id15891 . -1) (undo-tree-id15892 . -1) (undo-tree-id15893 . -1) (undo-tree-id15894 . -1) (undo-tree-id15895 . -1) (undo-tree-id15896 . -1) 25036) nil (25758 55685 492281 191000) 0 nil] [nil nil ((25153 . 25154) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -25153) (undo-tree-id15837 . -1) 25110) ((25153 . 25154) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25153)) (25758 55679 698335 456000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25109) (undo-tree-id15860 . -1) (undo-tree-id15861 . -1)) nil (25758 55685 492253 625000) 0 nil])
nil
([nil nil ((25111 . 25113)) nil (25758 55685 492238 669000) 0 nil])
([nil nil ((25213 . 25215) (t 25758 55685 531604 943000)) nil (25758 55709 381275 877000) 0 nil])
([nil nil ((#("We then add similar pairs of layers using
" 0 41 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 41 42 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16081 . -41) (undo-tree-id16082 . -42) (undo-tree-id16083 . -42) (undo-tree-id16084 . -42) (undo-tree-id16085 . -42) (undo-tree-id16086 . -42) (undo-tree-id16087 . -42) (undo-tree-id16088 . -42) (undo-tree-id16089 . -42) (undo-tree-id16090 . -42) (undo-tree-id16091 . -42) (undo-tree-id16092 . -42) (undo-tree-id16093 . -42) (undo-tree-id16094 . -42) (undo-tree-id16095 . -42) (undo-tree-id16096 . -42) (undo-tree-id16097 . -42) (undo-tree-id16098 . -42) (undo-tree-id16099 . -42) (undo-tree-id16100 . -42) (undo-tree-id16101 . -42) (undo-tree-id16102 . -42) (undo-tree-id16103 . -42) (undo-tree-id16104 . -42) (undo-tree-id16105 . -42) (undo-tree-id16106 . -42) (t 25758 55709 419711 282000)) nil (25758 55753 157708 284000) 0 nil])
([nil nil ((#("growing dilation rates: 1, 2, 4, 8, and again 1, 2, 4, 8. 
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 59 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16055 . -58) (undo-tree-id16056 . -59) (undo-tree-id16057 . -59) (undo-tree-id16058 . -59) (undo-tree-id16059 . -59) (undo-tree-id16060 . -59) (undo-tree-id16061 . -59) (undo-tree-id16062 . -59) (undo-tree-id16063 . -59) (undo-tree-id16064 . -59) (undo-tree-id16065 . -59) (undo-tree-id16066 . -59) (undo-tree-id16067 . -59) (undo-tree-id16068 . -59) (undo-tree-id16069 . -59) (undo-tree-id16070 . -59) (undo-tree-id16071 . -59) (undo-tree-id16072 . -59) (undo-tree-id16073 . -59) (undo-tree-id16074 . -59) (undo-tree-id16075 . -59) (undo-tree-id16076 . -59) (undo-tree-id16077 . -59) (undo-tree-id16078 . -59) (undo-tree-id16079 . -59) (undo-tree-id16080 . -59)) nil (25758 55753 157629 621000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16027 . -1) (undo-tree-id16028 . -1) (undo-tree-id16029 . -1) (undo-tree-id16030 . -1) (undo-tree-id16031 . -1) (undo-tree-id16032 . -1) (undo-tree-id16033 . -1) (undo-tree-id16034 . -1) (undo-tree-id16035 . -1) (undo-tree-id16036 . -1) (undo-tree-id16037 . -1) (undo-tree-id16038 . -1) (undo-tree-id16039 . -1) (undo-tree-id16040 . -1) (undo-tree-id16041 . -1) (undo-tree-id16042 . -1) (undo-tree-id16043 . -1) (undo-tree-id16044 . -1) (undo-tree-id16045 . -1) (undo-tree-id16046 . -1) (undo-tree-id16047 . -1) (undo-tree-id16048 . -1) (undo-tree-id16049 . -1) (undo-tree-id16050 . -1) (undo-tree-id16051 . -1) (undo-tree-id16052 . -1) (undo-tree-id16053 . -1) (undo-tree-id16054 . -1)) nil (25758 55753 157594 405000) 0 nil])
([nil nil ((#("Finally, we add the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 20 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16024 . -19) (undo-tree-id16025 . 20) (undo-tree-id16026 . -20)) nil (25758 55753 157575 570000) 0 nil])
([nil nil ((#("output layer: a convolutional layer with 10 filters of size 1 and without any
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16021 . -77) (undo-tree-id16022 . 78) (undo-tree-id16023 . -78)) nil (25758 55753 157572 942000) 0 nil])
([nil nil ((#("activation function. Thanks to the padding layers, every convolutional
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 71 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16018 . -70) (undo-tree-id16019 . 71) (undo-tree-id16020 . -71)) nil (25758 55753 157569 882000) 0 nil])
([nil nil ((#("layer outputs a sequence of the same length as the input sequences, so the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16015 . -74) (undo-tree-id16016 . 75) (undo-tree-id16017 . -75)) nil (25758 55753 157566 699000) 0 nil])
([nil nil ((#("targets we use during training can be the full sequences: no need to crop
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 45 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 45 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16012 . -73) (undo-tree-id16013 . 74) (undo-tree-id16014 . -74)) nil (25758 55753 157564 266000) 0 nil])
([nil nil ((#("them or downsample them.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 25 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16009 . -24) (undo-tree-id16010 . 25) (undo-tree-id16011 . -25)) nil (25758 55753 157561 919000) 0 nil])
([nil nil ((#("The last two models offer the best performance so far in forecasting our
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16006 . -72) (undo-tree-id16007 . 73) (undo-tree-id16008 . -73)) nil (25758 55753 157559 235000) 0 nil])
([nil nil ((#("time series! In the WaveNet paper, the authors achieved state-of-the-art
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16003 . -72) (undo-tree-id16004 . 73) (undo-tree-id16005 . -73)) nil (25758 55753 157556 834000) 0 nil])
([nil nil ((#("performance on various audio tasks (hence the name of the architecture),
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 25113) (undo-tree-id16000 . -72) (undo-tree-id16001 . 73) (undo-tree-id16002 . -73)) nil (25758 55753 157554 570000) 0 nil])
([nil nil ((#("This Sequential model starts with an explicit input layer, then continues with
" 0 57 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24886) (undo-tree-id15973 . -78) (undo-tree-id15974 . 58) (undo-tree-id15975 . -79) (undo-tree-id15976 . -79) (undo-tree-id15977 . -79) (undo-tree-id15978 . -79) (undo-tree-id15979 . -79) (undo-tree-id15980 . -79) (undo-tree-id15981 . -79) (undo-tree-id15982 . -79) (undo-tree-id15983 . -79) (undo-tree-id15984 . -79) (undo-tree-id15985 . -79) (undo-tree-id15986 . -79) (undo-tree-id15987 . -79) (undo-tree-id15988 . -79) (undo-tree-id15989 . -79) (undo-tree-id15990 . -79) (undo-tree-id15991 . -79) (undo-tree-id15992 . -79) (undo-tree-id15993 . -79) (undo-tree-id15994 . -79) (undo-tree-id15995 . -79) (undo-tree-id15996 . -79) (undo-tree-id15997 . -79) (undo-tree-id15998 . -79) (undo-tree-id15999 . -79)) nil (25758 55753 157550 858000) 0 nil])
([nil nil ((#("a 1D convolutional layer using \"causal\" padding: this ensures that the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 71 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24886) (undo-tree-id15944 . -70) (undo-tree-id15945 . 71) (undo-tree-id15946 . 66) (undo-tree-id15947 . -18) (undo-tree-id15948 . -71) (undo-tree-id15949 . -71) (undo-tree-id15950 . -71) (undo-tree-id15951 . -71) (undo-tree-id15952 . -71) (undo-tree-id15953 . -71) (undo-tree-id15954 . -71) (undo-tree-id15955 . -71) (undo-tree-id15956 . -71) (undo-tree-id15957 . -71) (undo-tree-id15958 . -71) (undo-tree-id15959 . -71) (undo-tree-id15960 . -71) (undo-tree-id15961 . -71) (undo-tree-id15962 . -71) (undo-tree-id15963 . -71) (undo-tree-id15964 . -71) (undo-tree-id15965 . -71) (undo-tree-id15966 . -71) (undo-tree-id15967 . -71) (undo-tree-id15968 . -71) (undo-tree-id15969 . -71) (undo-tree-id15970 . -71) (undo-tree-id15971 . -71) (undo-tree-id15972 . -71)) nil (25758 55753 157533 611000) 0 nil])
([nil nil ((#("convolutional layer does not peek into the future when making predictions. 
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 74 76 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24886) (undo-tree-id15915 . -75) (undo-tree-id15916 . 76) (undo-tree-id15917 . -76) (undo-tree-id15918 . -76) (undo-tree-id15919 . -76) (undo-tree-id15920 . -76) (undo-tree-id15921 . -76) (undo-tree-id15922 . -76) (undo-tree-id15923 . -76) (undo-tree-id15924 . -76) (undo-tree-id15925 . -76) (undo-tree-id15926 . -76) (undo-tree-id15927 . -76) (undo-tree-id15928 . -76) (undo-tree-id15929 . -76) (undo-tree-id15930 . -76) (undo-tree-id15931 . -76) (undo-tree-id15932 . -76) (undo-tree-id15933 . -76) (undo-tree-id15934 . -76) (undo-tree-id15935 . -76) (undo-tree-id15936 . -76) (undo-tree-id15937 . -76) (undo-tree-id15938 . -76) (undo-tree-id15939 . -76) (undo-tree-id15940 . -76) (undo-tree-id15941 . 76) (undo-tree-id15942 . -13) (undo-tree-id15943 . -76)) nil (25758 55753 157514 215000) 0 nil])
([nil nil ((#("including text-to-speech tasks, producing incredibly realistic voices acrossseveral languages. They also used the model to generate music, one audio
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 149 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24887) (undo-tree-id15912 . -148) (undo-tree-id15913 . 149) (undo-tree-id15914 . -149)) nil (25758 55753 157233 82000) 0 nil])
([nil nil ((#("sample at a time. This feat is all the more impressive when you realize
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24887) (undo-tree-id15909 . -71) (undo-tree-id15910 . 72) (undo-tree-id15911 . -72)) nil (25758 55753 157230 351000) 0 nil])
([nil nil ((#("that a single second of audio can contain tens of thousands of time steps—
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24887) (undo-tree-id15906 . -74) (undo-tree-id15907 . 75) (undo-tree-id15908 . -75)) nil (25758 55753 157227 457000) 0 nil])
([nil nil ((#("even LSTMs and GRUs cannot handle such long sequences.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 55 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24887) (undo-tree-id15903 . -54) (undo-tree-id15904 . 55) (undo-tree-id15905 . -55)) nil (25758 55753 157224 573000) 0 nil])
([nil nil ((#("In Chapter 16, we will continue to explore RNNs, and we will see how
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 69 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24887) (undo-tree-id15900 . -68) (undo-tree-id15901 . 69) (undo-tree-id15902 . -69)) nil (25758 55753 157221 261000) 0 nil])
([nil nil ((#("they can tackle various NLP tasks.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 33 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 33 34 (rear-nonsticky t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24887) (undo-tree-id15897 . -34) (undo-tree-id15898 . 35) (undo-tree-id15899 . -35)) nil (25758 55753 157215 750000) 0 nil])
([nil nil ((23082 . 23083) (t 25758 55753 199914 280000)) nil (25758 55917 816419 560000) 0 nil])
([nil nil ((23095 . 23096)) nil (25758 55917 816417 962000) 0 nil])
([nil nil ((23111 . 23112)) nil (25758 55917 816413 166000) 0 nil])
([nil nil ((23384 . 23385) (t 25758 55917 900759 63000)) nil (25758 55956 518494 38000) 0 nil])
([nil nil ((23433 . 23434)) nil (25758 55956 518493 15000) 0 nil])
([nil nil ((23406 . 23407)) nil (25758 55956 518491 701000) 0 nil])
([nil nil ((23489 . 23490)) nil (25758 55956 518486 852000) 0 nil])
([nil nil ((23416 . 23417) (t 25758 55956 600973 392000)) nil (25758 55963 491726 732000) 0 nil])
([nil nil ((24895 . 24897) (24894 . 24895) (t 25758 55963 529012 310000) 23508) nil (25758 57717 969843 708000) 0 nil])
([nil nil ((24911 . 24916) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 24911 24916 nil nil nil t #s(yas--exit 24934 nil))) #s(yas--exit 24934 nil) 6 nil #s(yas--field 1 24911 24916 nil nil nil t #s(yas--exit 24934 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -24929) (undo-tree-id16243 . -2) (24899 . 24942) (#("sr" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24899) (undo-tree-id16244 . -1) (undo-tree-id16245 . -2) (undo-tree-id16246 . -1) (undo-tree-id16247 . -1) (undo-tree-id16248 . -1) (undo-tree-id16249 . -1) (undo-tree-id16250 . -1) (undo-tree-id16251 . -1) (undo-tree-id16252 . -1) (undo-tree-id16253 . -1) (undo-tree-id16254 . -1) (undo-tree-id16255 . -1) (undo-tree-id16256 . -1) (undo-tree-id16257 . -1) (undo-tree-id16258 . -1) (undo-tree-id16259 . -1) (undo-tree-id16260 . -1) (undo-tree-id16261 . -1) (undo-tree-id16262 . -1) (undo-tree-id16263 . -1) (undo-tree-id16264 . -1) (undo-tree-id16265 . -1) (undo-tree-id16266 . -1) (undo-tree-id16267 . -1) (undo-tree-id16268 . -1) (undo-tree-id16269 . -1) (undo-tree-id16270 . -1) (undo-tree-id16271 . -1) (undo-tree-id16272 . -1) (undo-tree-id16273 . -1) (undo-tree-id16274 . -1) (undo-tree-id16275 . -1) (undo-tree-id16276 . -1) (undo-tree-id16277 . -1) (undo-tree-id16278 . -1) (undo-tree-id16279 . -1) (undo-tree-id16280 . -1) (undo-tree-id16281 . -1) (undo-tree-id16282 . -2) (undo-tree-id16283 . -2) (undo-tree-id16284 . -2) (undo-tree-id16285 . -2) (undo-tree-id16286 . -2) (undo-tree-id16287 . -2) (undo-tree-id16288 . -2) (undo-tree-id16289 . -2) (undo-tree-id16290 . -2) (undo-tree-id16291 . -2) (undo-tree-id16292 . -2) 24901 (24899 . 24901) (24898 . 24899) (t 25758 57718 14996 580000)) nil (25758 57923 817345 219000) 0 nil])
([nil nil ((apply yas--snippet-revive 24899 24945 #s(yas--snippet nil (#s(yas--field 1 24911 24916 nil nil nil t #s(yas--exit 24934 nil))) #s(yas--exit 24934 nil) 6 nil #s(yas--field 1 24911 24916 nil nil nil t #s(yas--exit 24934 nil)) nil nil))) nil (25758 57923 817284 632000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24968 . 24969) (nil fontified nil 24933 . 24969) (24933 . 24969)) nil (25758 57923 817283 744000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24969) (undo-tree-id16242 . -1)) nil (25758 57923 817282 272000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24969) (undo-tree-id16241 . -1)) nil (25758 57923 817280 619000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24969) (undo-tree-id16240 . -1)) nil (25758 57923 818045 901000) 0 nil])
([nil nil ((24978 . 24979)) nil (25758 57933 567652 567000) 0 nil] [nil nil ((#("(setq-default mode-line-format nil)
" 0 1 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 13 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 34 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 36 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24933) (undo-tree-id16107 . -35) (undo-tree-id16108 . -36) (undo-tree-id16109 . -36) (undo-tree-id16110 . -36) (undo-tree-id16111 . -36) (undo-tree-id16112 . -36) (undo-tree-id16113 . -36) (undo-tree-id16114 . -36) (undo-tree-id16115 . -36) (undo-tree-id16116 . -36) (undo-tree-id16117 . -36) (undo-tree-id16118 . -36) (undo-tree-id16119 . -36) (undo-tree-id16120 . -36) (undo-tree-id16121 . -36) (undo-tree-id16122 . -36) (undo-tree-id16123 . -36) (undo-tree-id16124 . -36) (undo-tree-id16125 . -36) (undo-tree-id16126 . -36) (undo-tree-id16127 . -36) (undo-tree-id16128 . -36) (undo-tree-id16129 . -36) (undo-tree-id16130 . -36) (undo-tree-id16131 . -36) (undo-tree-id16132 . -36) (undo-tree-id16133 . -36) (undo-tree-id16134 . -36) (undo-tree-id16135 . -36) (undo-tree-id16136 . -36) (undo-tree-id16137 . -36) (undo-tree-id16138 . -36) (undo-tree-id16139 . -36) (undo-tree-id16140 . -36) (undo-tree-id16141 . -36) (undo-tree-id16142 . -36) (undo-tree-id16143 . -36) (undo-tree-id16144 . -36) (undo-tree-id16145 . -36) (undo-tree-id16146 . -36) (undo-tree-id16147 . -36) (undo-tree-id16148 . -36) (undo-tree-id16149 . -36) (undo-tree-id16150 . -36) (undo-tree-id16151 . -36) (undo-tree-id16152 . -36) (undo-tree-id16153 . -36) (undo-tree-id16154 . -36) (undo-tree-id16155 . -36) (undo-tree-id16156 . -36) (undo-tree-id16157 . -36) (undo-tree-id16158 . -36) (undo-tree-id16159 . -36) (undo-tree-id16160 . -36) (undo-tree-id16161 . -36) (undo-tree-id16162 . -36) (undo-tree-id16163 . -36) (undo-tree-id16164 . -36) (undo-tree-id16165 . -36) (undo-tree-id16166 . -36) (undo-tree-id16167 . -36) (undo-tree-id16168 . -36) (undo-tree-id16169 . -36) (undo-tree-id16170 . -36) (undo-tree-id16171 . -36) (undo-tree-id16172 . -36) (undo-tree-id16173 . -36) (undo-tree-id16174 . -36) (undo-tree-id16175 . -36) (undo-tree-id16176 . -36) (undo-tree-id16177 . -36) (undo-tree-id16178 . -36) (undo-tree-id16179 . -36) (undo-tree-id16180 . -36) (undo-tree-id16181 . -36) (undo-tree-id16182 . -36) (undo-tree-id16183 . -36) (undo-tree-id16184 . -36) (undo-tree-id16185 . -36) (undo-tree-id16186 . -36) (undo-tree-id16187 . -36) (undo-tree-id16188 . -36) (undo-tree-id16189 . -36) (undo-tree-id16190 . -36) (undo-tree-id16191 . -36) (undo-tree-id16192 . -36) (undo-tree-id16193 . -36) (undo-tree-id16194 . -36) (undo-tree-id16195 . -36) (undo-tree-id16196 . -36) (undo-tree-id16197 . -36) (undo-tree-id16198 . -36) (undo-tree-id16199 . -36) (undo-tree-id16200 . -36) (undo-tree-id16201 . -36) (undo-tree-id16202 . -36) (undo-tree-id16203 . -36) (undo-tree-id16204 . -36) (undo-tree-id16205 . -36) (undo-tree-id16206 . -36) (undo-tree-id16207 . -36) (undo-tree-id16208 . -36) (undo-tree-id16209 . -36) (undo-tree-id16210 . -36) (undo-tree-id16211 . -36) (undo-tree-id16212 . -36) (undo-tree-id16213 . -36) (undo-tree-id16214 . -36) (undo-tree-id16215 . -36) (undo-tree-id16216 . -36) (undo-tree-id16217 . -36) (undo-tree-id16218 . -36) (undo-tree-id16219 . -36) (undo-tree-id16220 . -36) (undo-tree-id16221 . -36) (undo-tree-id16222 . -36) (undo-tree-id16223 . -36) (undo-tree-id16224 . -36) (undo-tree-id16225 . -36) (undo-tree-id16226 . -36) (undo-tree-id16227 . -36) (undo-tree-id16228 . -36) (undo-tree-id16229 . -36) (undo-tree-id16230 . -36) (undo-tree-id16231 . -36) (undo-tree-id16232 . -36) (undo-tree-id16233 . -36) (undo-tree-id16234 . -36) (undo-tree-id16235 . -36) (undo-tree-id16236 . -36) (undo-tree-id16237 . -36) (undo-tree-id16238 . -36) (undo-tree-id16239 . -36) 24969) ((24933 . 24969)) (25758 57923 817270 785000) 0 nil])
([nil nil ((24964 . 24965) (#("nil" 0 3 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24964) (undo-tree-id16293 . -2) (undo-tree-id16294 . -3) (undo-tree-id16295 . -3) (undo-tree-id16296 . -3) (undo-tree-id16297 . -3) (undo-tree-id16298 . -3) (undo-tree-id16299 . -3) (undo-tree-id16300 . -3) (undo-tree-id16301 . -3) (undo-tree-id16302 . -3) (undo-tree-id16303 . -3) (undo-tree-id16304 . -3) (undo-tree-id16305 . -3) (undo-tree-id16306 . -3) (undo-tree-id16307 . -3) (undo-tree-id16308 . -3) (undo-tree-id16309 . -3) (undo-tree-id16310 . -3) (undo-tree-id16311 . -3) (undo-tree-id16312 . -3) (undo-tree-id16313 . -3) (undo-tree-id16314 . -3) (undo-tree-id16315 . -3) (undo-tree-id16316 . -3) (undo-tree-id16317 . -3) (undo-tree-id16318 . -3) (undo-tree-id16319 . -3) (undo-tree-id16320 . -2) (undo-tree-id16321 . -3) (undo-tree-id16322 . -3) (undo-tree-id16323 . -3) (undo-tree-id16324 . -3) (undo-tree-id16325 . -3) (undo-tree-id16326 . -3) (undo-tree-id16327 . -3) (undo-tree-id16328 . -3) (undo-tree-id16329 . -3) (undo-tree-id16330 . -3) (t 25758 57933 609346 349000)) nil (25758 57943 556577 525000) 0 nil])
nil
([nil nil ((24964 . 24965) (#("0" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24964) (undo-tree-id16331 . -1) (undo-tree-id16332 . -1) (undo-tree-id16333 . -1) (undo-tree-id16334 . -1) (undo-tree-id16335 . -1) (undo-tree-id16336 . -1) (undo-tree-id16337 . -1) (undo-tree-id16338 . -1) (undo-tree-id16339 . -1) (undo-tree-id16340 . -1) (undo-tree-id16341 . -1) (undo-tree-id16342 . -1) (undo-tree-id16343 . -1) (undo-tree-id16344 . -1) (undo-tree-id16345 . -1) (undo-tree-id16346 . -1) (undo-tree-id16347 . -1) (undo-tree-id16348 . -1) (undo-tree-id16349 . -1) (undo-tree-id16350 . -1) (undo-tree-id16351 . -1) (undo-tree-id16352 . -1) (undo-tree-id16353 . -1) (undo-tree-id16354 . -1) (undo-tree-id16355 . -1) (undo-tree-id16356 . -1) (undo-tree-id16357 . -1) (undo-tree-id16358 . -1) (undo-tree-id16359 . -1) (undo-tree-id16360 . -1) (undo-tree-id16361 . -1) (undo-tree-id16362 . -1) (undo-tree-id16363 . -1) (undo-tree-id16364 . -1) (undo-tree-id16365 . -1) (undo-tree-id16366 . -1) (undo-tree-id16367 . -1) (undo-tree-id16368 . -1) (undo-tree-id16369 . -1) (undo-tree-id16370 . -1) (undo-tree-id16371 . -1) (undo-tree-id16372 . -1) (undo-tree-id16373 . -1) (undo-tree-id16374 . -1) (undo-tree-id16375 . -1) (t 25758 57943 646069 429000)) nil (25758 57956 724017 892000) 0 nil])
([nil nil ((24964 . 24967) (#("1" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24964) (undo-tree-id16376 . -1) (undo-tree-id16377 . -1) (undo-tree-id16378 . -1) (undo-tree-id16379 . -1) (undo-tree-id16380 . -1) (undo-tree-id16381 . -1) (undo-tree-id16382 . -1) (undo-tree-id16383 . -1) (undo-tree-id16384 . -1) (undo-tree-id16385 . -1) (undo-tree-id16386 . -1) (undo-tree-id16387 . -1) (undo-tree-id16388 . -1) (undo-tree-id16389 . -1) (undo-tree-id16390 . -1) (undo-tree-id16391 . -1) (undo-tree-id16392 . -1) (undo-tree-id16393 . -1) (undo-tree-id16394 . -1) (undo-tree-id16395 . -1) (undo-tree-id16396 . -1) (undo-tree-id16397 . -1) (undo-tree-id16398 . -1) (undo-tree-id16399 . -1) (undo-tree-id16400 . -1) (undo-tree-id16401 . -1) (undo-tree-id16402 . -1) (undo-tree-id16403 . -1) (undo-tree-id16404 . -1) (undo-tree-id16405 . -1) (undo-tree-id16406 . -1) (undo-tree-id16407 . -1) (undo-tree-id16408 . -1) (undo-tree-id16409 . -1) (undo-tree-id16410 . -1) (undo-tree-id16411 . -1) (undo-tree-id16412 . -1) (undo-tree-id16413 . -1) (undo-tree-id16414 . -1) (undo-tree-id16415 . -1) (undo-tree-id16416 . -1) (undo-tree-id16417 . -1) (undo-tree-id16418 . -1) (undo-tree-id16419 . -1) (undo-tree-id16420 . -1) (undo-tree-id16421 . -1) (undo-tree-id16422 . -1) (undo-tree-id16423 . -1) (undo-tree-id16424 . -1) (undo-tree-id16425 . -1) (undo-tree-id16426 . -1) (undo-tree-id16427 . -1) (undo-tree-id16428 . -1) (undo-tree-id16429 . -1) (undo-tree-id16430 . -1) (undo-tree-id16431 . -1) (undo-tree-id16432 . -1) (undo-tree-id16433 . -1) (undo-tree-id16434 . -1) (undo-tree-id16435 . -1) (undo-tree-id16436 . -1) (undo-tree-id16437 . -1) (undo-tree-id16438 . -1) (undo-tree-id16439 . -1) (undo-tree-id16440 . -1) (undo-tree-id16441 . -1) (undo-tree-id16442 . -1) (undo-tree-id16443 . -1) (undo-tree-id16444 . -1) (undo-tree-id16445 . -1) (undo-tree-id16446 . -1) (undo-tree-id16447 . -1) (undo-tree-id16448 . -1) (undo-tree-id16449 . -1) (undo-tree-id16450 . -1) (undo-tree-id16451 . -1) (undo-tree-id16452 . -1) (undo-tree-id16453 . -1) (undo-tree-id16454 . -1) (undo-tree-id16455 . -1) (undo-tree-id16456 . -1) (undo-tree-id16457 . -1) (undo-tree-id16458 . -1) (undo-tree-id16459 . -1) (undo-tree-id16460 . -1) (undo-tree-id16461 . -1) (undo-tree-id16462 . -1) (undo-tree-id16463 . -1) (undo-tree-id16464 . -1) (undo-tree-id16465 . -1) (undo-tree-id16466 . -1) (undo-tree-id16467 . -1) (undo-tree-id16468 . -1) (undo-tree-id16469 . -1) (undo-tree-id16470 . -1) (undo-tree-id16471 . -1) (undo-tree-id16472 . -1) (undo-tree-id16473 . -1) (undo-tree-id16474 . -1) (undo-tree-id16475 . -1) (undo-tree-id16476 . -1) (undo-tree-id16477 . -1) (undo-tree-id16478 . -1) (undo-tree-id16479 . -1) (undo-tree-id16480 . -1) (undo-tree-id16481 . -1) (undo-tree-id16482 . -1) (undo-tree-id16483 . -1) (undo-tree-id16484 . -1) (undo-tree-id16485 . -1) (undo-tree-id16486 . -1) (undo-tree-id16487 . -1) (undo-tree-id16488 . -1) (undo-tree-id16489 . -1) (undo-tree-id16490 . -1) (undo-tree-id16491 . -1) (undo-tree-id16492 . -1) (undo-tree-id16493 . -1) (undo-tree-id16494 . -1) (undo-tree-id16495 . -1) (undo-tree-id16496 . -1) (undo-tree-id16497 . -1) (undo-tree-id16498 . -1) (undo-tree-id16499 . -1) (undo-tree-id16500 . -1) (undo-tree-id16501 . -1) (undo-tree-id16502 . -1) (undo-tree-id16503 . -1) (undo-tree-id16504 . -1) (undo-tree-id16505 . -1) (undo-tree-id16506 . -1) (undo-tree-id16507 . -1) (undo-tree-id16508 . -1) (undo-tree-id16509 . -1) (undo-tree-id16510 . -1) (undo-tree-id16511 . -1) (undo-tree-id16512 . -1) (undo-tree-id16513 . -1) (undo-tree-id16514 . -1) (undo-tree-id16515 . -1) (undo-tree-id16516 . -1) (undo-tree-id16517 . -1) (undo-tree-id16518 . -1) (undo-tree-id16519 . -1) (undo-tree-id16520 . -1) (undo-tree-id16521 . -1) (undo-tree-id16522 . -1) (undo-tree-id16523 . -1) (undo-tree-id16524 . -1) (undo-tree-id16525 . -1) (undo-tree-id16526 . -1) (undo-tree-id16527 . -1) (undo-tree-id16528 . -1) (undo-tree-id16529 . -1) (undo-tree-id16530 . -1) (undo-tree-id16531 . -1) (undo-tree-id16532 . -1) (undo-tree-id16533 . -1) (undo-tree-id16534 . -1) (undo-tree-id16535 . -1) (undo-tree-id16536 . -1) (undo-tree-id16537 . -1) (undo-tree-id16538 . -1) (undo-tree-id16539 . -1) (undo-tree-id16540 . -1) (undo-tree-id16541 . -1) (undo-tree-id16542 . -1) (undo-tree-id16543 . -1) (undo-tree-id16544 . -1) (undo-tree-id16545 . -1) (undo-tree-id16546 . -1) (undo-tree-id16547 . -1) (undo-tree-id16548 . -1) (undo-tree-id16549 . -1) (undo-tree-id16550 . -1) (undo-tree-id16551 . -1) (undo-tree-id16552 . -1) (undo-tree-id16553 . -1) (undo-tree-id16554 . -1) (undo-tree-id16555 . -1) (undo-tree-id16556 . -1) (undo-tree-id16557 . -1) (undo-tree-id16558 . -1) (undo-tree-id16559 . -1) (undo-tree-id16560 . -1) (undo-tree-id16561 . -1) (undo-tree-id16562 . -1) (undo-tree-id16563 . -1) (undo-tree-id16564 . -1) (undo-tree-id16565 . -1) (undo-tree-id16566 . -1) (undo-tree-id16567 . -1) (undo-tree-id16568 . -1) (undo-tree-id16569 . -1) (undo-tree-id16570 . -1) (undo-tree-id16571 . -1) (undo-tree-id16572 . -1) (undo-tree-id16573 . -1) (undo-tree-id16574 . -1) (undo-tree-id16575 . -1) (undo-tree-id16576 . -1) (undo-tree-id16577 . -1) (undo-tree-id16578 . -1) (undo-tree-id16579 . -1) (undo-tree-id16580 . -1) (undo-tree-id16581 . -1) (undo-tree-id16582 . -1) (undo-tree-id16583 . -1) (undo-tree-id16584 . -1) (undo-tree-id16585 . -1) (undo-tree-id16586 . -1) (undo-tree-id16587 . -1) (undo-tree-id16588 . -1) (undo-tree-id16589 . -1) (undo-tree-id16590 . -1) (undo-tree-id16591 . -1) (undo-tree-id16592 . -1) (undo-tree-id16593 . -1) (undo-tree-id16594 . -1) (undo-tree-id16595 . -1) (undo-tree-id16596 . -1) (undo-tree-id16597 . -1) (undo-tree-id16598 . -1) (undo-tree-id16599 . -1) (undo-tree-id16600 . -1) (undo-tree-id16601 . -1) (undo-tree-id16602 . -1) (undo-tree-id16603 . -1) (undo-tree-id16604 . -1) (undo-tree-id16605 . -1) (undo-tree-id16606 . -1) (undo-tree-id16607 . -1) (undo-tree-id16608 . -1) (undo-tree-id16609 . -1) (undo-tree-id16610 . -1) (undo-tree-id16611 . -1) (undo-tree-id16612 . -1) (undo-tree-id16613 . -1) (undo-tree-id16614 . -1) (undo-tree-id16615 . -1) (undo-tree-id16616 . -1) (undo-tree-id16617 . -1) (undo-tree-id16618 . -1) (undo-tree-id16619 . -1) (undo-tree-id16620 . -1) (undo-tree-id16621 . -1) (undo-tree-id16622 . -1) (undo-tree-id16623 . -1) (undo-tree-id16624 . -1) (undo-tree-id16625 . -1) (undo-tree-id16626 . -1) (undo-tree-id16627 . -1) (undo-tree-id16628 . -1) (undo-tree-id16629 . -1) (undo-tree-id16630 . -1) (undo-tree-id16631 . -1) (undo-tree-id16632 . -1) (undo-tree-id16633 . -1) (undo-tree-id16634 . -1) (undo-tree-id16635 . -1) (undo-tree-id16636 . -1) (undo-tree-id16637 . -1) (undo-tree-id16638 . -1) (undo-tree-id16639 . -1) (undo-tree-id16640 . -1) (undo-tree-id16641 . -1) (undo-tree-id16642 . -1) (undo-tree-id16643 . -1) (undo-tree-id16644 . -1) (undo-tree-id16645 . -1) (undo-tree-id16646 . -1) (undo-tree-id16647 . -1) (undo-tree-id16648 . -1) (undo-tree-id16649 . -1) (undo-tree-id16650 . -1) (t 25758 57956 770999 998000)) nil (25758 57966 280169 419000) 0 nil])
([nil nil ((#("#+begin_src elisp :result outputs
" 0 33 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 33 34 (face org-block-begin-line font-lock-multiline t help-echo nil font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24899) (undo-tree-id17412 . -33) (undo-tree-id17413 . -34) (undo-tree-id17414 . -34) (undo-tree-id17415 . -34) (undo-tree-id17416 . -34) (undo-tree-id17417 . -34) (undo-tree-id17418 . -34) (undo-tree-id17419 . -34) (undo-tree-id17420 . -34) (undo-tree-id17421 . -34) (undo-tree-id17422 . -34) (undo-tree-id17423 . -34) (undo-tree-id17424 . -34) (undo-tree-id17425 . -34) (undo-tree-id17426 . -34) (undo-tree-id17427 . -34) (undo-tree-id17428 . -34) (undo-tree-id17429 . -34) (t 25758 57966 367669 877000)) nil (25758 60441 32268 970000) 0 nil])
([nil nil ((#("(setq-default mode-line-format nil)
" 0 1 (src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 13 (src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 34 (src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (src-block t help-echo nil font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 36 (src-block t font-lock-fontified t rear-nonsticky t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 24899) (undo-tree-id16654 . -35) (undo-tree-id16655 . 2) (undo-tree-id16656 . -33) (undo-tree-id16657 . -31) (undo-tree-id16658 . -31) (undo-tree-id16659 . -31) (undo-tree-id16660 . -31) (undo-tree-id16661 . -31) (undo-tree-id16662 . -31) (undo-tree-id16663 . -31) (undo-tree-id16664 . -31) (undo-tree-id16665 . -31) (undo-tree-id16666 . -31) (undo-tree-id16667 . -31) (undo-tree-id16668 . -31) (undo-tree-id16669 . -31) (undo-tree-id16670 . -31) (undo-tree-id16671 . -31) (undo-tree-id16672 . -31) (undo-tree-id16673 . -31) (undo-tree-id16674 . -31) (undo-tree-id16675 . -31) (undo-tree-id16676 . -31) (undo-tree-id16677 . -31) (undo-tree-id16678 . -31) (undo-tree-id16679 . -31) (undo-tree-id16680 . -31) (undo-tree-id16681 . -31) (undo-tree-id16682 . -31) (undo-tree-id16683 . -31) (undo-tree-id16684 . -31) (undo-tree-id16685 . -31) (undo-tree-id16686 . -31) (undo-tree-id16687 . -31) (undo-tree-id16688 . -31) (undo-tree-id16689 . -31) (undo-tree-id16690 . -31) (undo-tree-id16691 . -31) (undo-tree-id16692 . -31) (undo-tree-id16693 . -31) (undo-tree-id16694 . -31) (undo-tree-id16695 . -31) (undo-tree-id16696 . -31) (undo-tree-id16697 . -31) (undo-tree-id16698 . -31) (undo-tree-id16699 . -31) (undo-tree-id16700 . -31) (undo-tree-id16701 . -31) (undo-tree-id16702 . -31) (undo-tree-id16703 . -31) (undo-tree-id16704 . -31) (undo-tree-id16705 . -31) (undo-tree-id16706 . -31) (undo-tree-id16707 . -31) (undo-tree-id16708 . -31) (undo-tree-id16709 . -31) (undo-tree-id16710 . -31) (undo-tree-id16711 . -31) (undo-tree-id16712 . -31) (undo-tree-id16713 . -31) (undo-tree-id16714 . -31) (undo-tree-id16715 . -31) (undo-tree-id16716 . -31) (undo-tree-id16717 . -31) (undo-tree-id16718 . -31) (undo-tree-id16719 . -31) (undo-tree-id16720 . -31) (undo-tree-id16721 . -31) (undo-tree-id16722 . -31) (undo-tree-id16723 . -31) (undo-tree-id16724 . -31) (undo-tree-id16725 . -31) (undo-tree-id16726 . -31) (undo-tree-id16727 . -31) (undo-tree-id16728 . -31) (undo-tree-id16729 . -31) (undo-tree-id16730 . -31) (undo-tree-id16731 . -31) (undo-tree-id16732 . -31) (undo-tree-id16733 . -31) (undo-tree-id16734 . -31) (undo-tree-id16735 . -31) (undo-tree-id16736 . -31) (undo-tree-id16737 . -31) (undo-tree-id16738 . -31) (undo-tree-id16739 . -31) (undo-tree-id16740 . -31) (undo-tree-id16741 . -31) (undo-tree-id16742 . -31) (undo-tree-id16743 . -31) (undo-tree-id16744 . -31) (undo-tree-id16745 . -31) (undo-tree-id16746 . -31) (undo-tree-id16747 . -31) (undo-tree-id16748 . -31) (undo-tree-id16749 . -31) (undo-tree-id16750 . -31) (undo-tree-id16751 . -31) (undo-tree-id16752 . -31) (undo-tree-id16753 . -31) (undo-tree-id16754 . -31) (undo-tree-id16755 . -31) (undo-tree-id16756 . -31) (undo-tree-id16757 . -31) (undo-tree-id16758 . -31) (undo-tree-id16759 . -31) (undo-tree-id16760 . -31) (undo-tree-id16761 . -31) (undo-tree-id16762 . -31) (undo-tree-id16763 . -31) (undo-tree-id16764 . -31) (undo-tree-id16765 . -31) (undo-tree-id16766 . -31) (undo-tree-id16767 . -31) (undo-tree-id16768 . -31) (undo-tree-id16769 . -31) (undo-tree-id16770 . -31) (undo-tree-id16771 . -31) (undo-tree-id16772 . -31) (undo-tree-id16773 . -31) (undo-tree-id16774 . -31) (undo-tree-id16775 . -31) (undo-tree-id16776 . -31) (undo-tree-id16777 . -31) (undo-tree-id16778 . -31) (undo-tree-id16779 . -31) (undo-tree-id16780 . -31) (undo-tree-id16781 . -31) (undo-tree-id16782 . -31) (undo-tree-id16783 . -31) (undo-tree-id16784 . -31) (undo-tree-id16785 . -31) (undo-tree-id16786 . -31) (undo-tree-id16787 . -31) (undo-tree-id16788 . -31) (undo-tree-id16789 . -31) (undo-tree-id16790 . -31) (undo-tree-id16791 . -31) (undo-tree-id16792 . -31) (undo-tree-id16793 . -31) (undo-tree-id16794 . -31) (undo-tree-id16795 . -31) (undo-tree-id16796 . -31) (undo-tree-id16797 . -31) (undo-tree-id16798 . -31) (undo-tree-id16799 . -31) (undo-tree-id16800 . -31) (undo-tree-id16801 . -31) (undo-tree-id16802 . -31) (undo-tree-id16803 . -31) (undo-tree-id16804 . -31) (undo-tree-id16805 . -31) (undo-tree-id16806 . -31) (undo-tree-id16807 . -31) (undo-tree-id16808 . -31) (undo-tree-id16809 . -31) (undo-tree-id16810 . -31) (undo-tree-id16811 . -31) (undo-tree-id16812 . -31) (undo-tree-id16813 . -31) (undo-tree-id16814 . -31) (undo-tree-id16815 . -31) (undo-tree-id16816 . -31) (undo-tree-id16817 . -31) (undo-tree-id16818 . -31) (undo-tree-id16819 . -31) (undo-tree-id16820 . -31) (undo-tree-id16821 . -31) (undo-tree-id16822 . -31) (undo-tree-id16823 . -31) (undo-tree-id16824 . -31) (undo-tree-id16825 . -31) (undo-tree-id16826 . -31) (undo-tree-id16827 . -31) (undo-tree-id16828 . -31) (undo-tree-id16829 . -31) (undo-tree-id16830 . -31) (undo-tree-id16831 . -31) (undo-tree-id16832 . -31) (undo-tree-id16833 . -31) (undo-tree-id16834 . -31) (undo-tree-id16835 . -31) (undo-tree-id16836 . -31) (undo-tree-id16837 . -31) (undo-tree-id16838 . -31) (undo-tree-id16839 . -31) (undo-tree-id16840 . -31) (undo-tree-id16841 . -31) (undo-tree-id16842 . -31) (undo-tree-id16843 . -31) (undo-tree-id16844 . -31) (undo-tree-id16845 . -31) (undo-tree-id16846 . -31) (undo-tree-id16847 . -31) (undo-tree-id16848 . -31) (undo-tree-id16849 . -31) (undo-tree-id16850 . -31) (undo-tree-id16851 . -31) (undo-tree-id16852 . -31) (undo-tree-id16853 . -31) (undo-tree-id16854 . -31) (undo-tree-id16855 . -31) (undo-tree-id16856 . -31) (undo-tree-id16857 . -31) (undo-tree-id16858 . -31) (undo-tree-id16859 . -31) (undo-tree-id16860 . -31) (undo-tree-id16861 . -31) (undo-tree-id16862 . -31) (undo-tree-id16863 . -31) (undo-tree-id16864 . -31) (undo-tree-id16865 . -31) (undo-tree-id16866 . -31) (undo-tree-id16867 . -31) (undo-tree-id16868 . -31) (undo-tree-id16869 . -31) (undo-tree-id16870 . -31) (undo-tree-id16871 . -31) (undo-tree-id16872 . -31) (undo-tree-id16873 . -31) (undo-tree-id16874 . -31) (undo-tree-id16875 . -31) (undo-tree-id16876 . -31) (undo-tree-id16877 . -31) (undo-tree-id16878 . -31) (undo-tree-id16879 . -31) (undo-tree-id16880 . -31) (undo-tree-id16881 . -31) (undo-tree-id16882 . -31) (undo-tree-id16883 . -31) (undo-tree-id16884 . -31) (undo-tree-id16885 . -31) (undo-tree-id16886 . -31) (undo-tree-id16887 . -31) (undo-tree-id16888 . -31) (undo-tree-id16889 . -31) (undo-tree-id16890 . -31) (undo-tree-id16891 . -31) (undo-tree-id16892 . -31) (undo-tree-id16893 . -31) (undo-tree-id16894 . -31) (undo-tree-id16895 . -31) (undo-tree-id16896 . -31) (undo-tree-id16897 . -31) (undo-tree-id16898 . -31) (undo-tree-id16899 . -31) (undo-tree-id16900 . -31) (undo-tree-id16901 . -31) (undo-tree-id16902 . -31) (undo-tree-id16903 . -31) (undo-tree-id16904 . -31) (undo-tree-id16905 . -31) (undo-tree-id16906 . -31) (undo-tree-id16907 . -31) (undo-tree-id16908 . -31) (undo-tree-id16909 . -31) (undo-tree-id16910 . -31) (undo-tree-id16911 . -31) (undo-tree-id16912 . -31) (undo-tree-id16913 . -31) (undo-tree-id16914 . -31) (undo-tree-id16915 . -31) (undo-tree-id16916 . -31) (undo-tree-id16917 . -31) (undo-tree-id16918 . -31) (undo-tree-id16919 . -31) (undo-tree-id16920 . -31) (undo-tree-id16921 . -31) (undo-tree-id16922 . -31) (undo-tree-id16923 . -31) (undo-tree-id16924 . -31) (undo-tree-id16925 . -31) (undo-tree-id16926 . -31) (undo-tree-id16927 . -31) (undo-tree-id16928 . -31) (undo-tree-id16929 . -34) (undo-tree-id16930 . -34) (undo-tree-id16931 . -34) (undo-tree-id16932 . -34) (undo-tree-id16933 . -34) (undo-tree-id16934 . -34) (undo-tree-id16935 . -34) (undo-tree-id16936 . -34) (undo-tree-id16937 . -34) (undo-tree-id16938 . -34) (undo-tree-id16939 . -34) (undo-tree-id16940 . -34) (undo-tree-id16941 . -34) (undo-tree-id16942 . -34) (undo-tree-id16943 . -34) (undo-tree-id16944 . -34) (undo-tree-id16945 . -34) (undo-tree-id16946 . -34) (undo-tree-id16947 . -34) (undo-tree-id16948 . -36) (undo-tree-id16949 . -36) (undo-tree-id16950 . -36) (undo-tree-id16951 . -36) (undo-tree-id16952 . -36) (undo-tree-id16953 . -36) (undo-tree-id16954 . -36) (undo-tree-id16955 . -36) (undo-tree-id16956 . -36) (undo-tree-id16957 . -36) (undo-tree-id16958 . -36) (undo-tree-id16959 . -36) (undo-tree-id16960 . -36) (undo-tree-id16961 . -36) (undo-tree-id16962 . -36) (undo-tree-id16963 . -36) (undo-tree-id16964 . -36) (undo-tree-id16965 . -36) (undo-tree-id16966 . -36) (undo-tree-id16967 . -36) (undo-tree-id16968 . -36) (undo-tree-id16969 . -36) (undo-tree-id16970 . -36) (undo-tree-id16971 . -36) (undo-tree-id16972 . -36) (undo-tree-id16973 . -36) (undo-tree-id16974 . -36) (undo-tree-id16975 . -36) (undo-tree-id16976 . -36) (undo-tree-id16977 . -36) (undo-tree-id16978 . -36) (undo-tree-id16979 . -36) (undo-tree-id16980 . -36) (undo-tree-id16981 . -36) (undo-tree-id16982 . -36) (undo-tree-id16983 . -36) (undo-tree-id16984 . -36) (undo-tree-id16985 . -36) (undo-tree-id16986 . -36) (undo-tree-id16987 . -36) (undo-tree-id16988 . -36) (undo-tree-id16989 . -36) (undo-tree-id16990 . -36) (undo-tree-id16991 . -36) (undo-tree-id16992 . -36) (undo-tree-id16993 . -36) (undo-tree-id16994 . -36) (undo-tree-id16995 . -36) (undo-tree-id16996 . -36) (undo-tree-id16997 . -36) (undo-tree-id16998 . -36) (undo-tree-id16999 . -36) (undo-tree-id17000 . -36) (undo-tree-id17001 . -36) (undo-tree-id17002 . -36) (undo-tree-id17003 . -36) (undo-tree-id17004 . -36) (undo-tree-id17005 . -36) (undo-tree-id17006 . -36) (undo-tree-id17007 . -36) (undo-tree-id17008 . -36) (undo-tree-id17009 . -36) (undo-tree-id17010 . -36) (undo-tree-id17011 . -36) (undo-tree-id17012 . -36) (undo-tree-id17013 . -36) (undo-tree-id17014 . -36) (undo-tree-id17015 . -36) (undo-tree-id17016 . -36) (undo-tree-id17017 . -36) (undo-tree-id17018 . -36) (undo-tree-id17019 . -36) (undo-tree-id17020 . -36) (undo-tree-id17021 . -36) (undo-tree-id17022 . -36) (undo-tree-id17023 . -36) (undo-tree-id17024 . -36) (undo-tree-id17025 . -36) (undo-tree-id17026 . -36) (undo-tree-id17027 . -36) (undo-tree-id17028 . -36) (undo-tree-id17029 . -36) (undo-tree-id17030 . -36) (undo-tree-id17031 . -36) (undo-tree-id17032 . -36) (undo-tree-id17033 . -36) (undo-tree-id17034 . -36) (undo-tree-id17035 . -36) (undo-tree-id17036 . -36) (undo-tree-id17037 . -36) (undo-tree-id17038 . -36) (undo-tree-id17039 . -36) (undo-tree-id17040 . -36) (undo-tree-id17041 . -36) (undo-tree-id17042 . -36) (undo-tree-id17043 . -36) (undo-tree-id17044 . -36) (undo-tree-id17045 . -36) (undo-tree-id17046 . -36) (undo-tree-id17047 . -36) (undo-tree-id17048 . -36) (undo-tree-id17049 . -36) (undo-tree-id17050 . -36) (undo-tree-id17051 . -36) (undo-tree-id17052 . -36) (undo-tree-id17053 . -36) (undo-tree-id17054 . -36) (undo-tree-id17055 . -36) (undo-tree-id17056 . -36) (undo-tree-id17057 . -36) (undo-tree-id17058 . -36) (undo-tree-id17059 . -36) (undo-tree-id17060 . -36) (undo-tree-id17061 . -36) (undo-tree-id17062 . -36) (undo-tree-id17063 . -36) (undo-tree-id17064 . -36) (undo-tree-id17065 . -36) (undo-tree-id17066 . -36) (undo-tree-id17067 . -36) (undo-tree-id17068 . -36) (undo-tree-id17069 . -36) (undo-tree-id17070 . -36) (undo-tree-id17071 . -36) (undo-tree-id17072 . -36) (undo-tree-id17073 . -36) (undo-tree-id17074 . -36) (undo-tree-id17075 . -36) (undo-tree-id17076 . -36) (undo-tree-id17077 . -36) (undo-tree-id17078 . -36) (undo-tree-id17079 . -36) (undo-tree-id17080 . -36) (undo-tree-id17081 . -36) (undo-tree-id17082 . -36) (undo-tree-id17083 . -36) (undo-tree-id17084 . -36) (undo-tree-id17085 . -36) (undo-tree-id17086 . -36) (undo-tree-id17087 . -36) (undo-tree-id17088 . -36) (undo-tree-id17089 . -36) (undo-tree-id17090 . -36) (undo-tree-id17091 . -36) (undo-tree-id17092 . -36) (undo-tree-id17093 . -36) (undo-tree-id17094 . -36) (undo-tree-id17095 . -36) (undo-tree-id17096 . -36) (undo-tree-id17097 . -36) (undo-tree-id17098 . -36) (undo-tree-id17099 . -36) (undo-tree-id17100 . -36) (undo-tree-id17101 . -36) (undo-tree-id17102 . -36) (undo-tree-id17103 . -36) (undo-tree-id17104 . -36) (undo-tree-id17105 . -36) (undo-tree-id17106 . -36) (undo-tree-id17107 . -36) (undo-tree-id17108 . -36) (undo-tree-id17109 . -36) (undo-tree-id17110 . -36) (undo-tree-id17111 . -36) (undo-tree-id17112 . -36) (undo-tree-id17113 . -36) (undo-tree-id17114 . -36) (undo-tree-id17115 . -36) (undo-tree-id17116 . -36) (undo-tree-id17117 . -36) (undo-tree-id17118 . -36) (undo-tree-id17119 . -36) (undo-tree-id17120 . -36) (undo-tree-id17121 . -36) (undo-tree-id17122 . -36) (undo-tree-id17123 . -36) (undo-tree-id17124 . -36) (undo-tree-id17125 . -36) (undo-tree-id17126 . -36) (undo-tree-id17127 . -36) (undo-tree-id17128 . -36) (undo-tree-id17129 . -36) (undo-tree-id17130 . -36) (undo-tree-id17131 . -36) (undo-tree-id17132 . -36) (undo-tree-id17133 . -36) (undo-tree-id17134 . -36) (undo-tree-id17135 . -36) (undo-tree-id17136 . -36) (undo-tree-id17137 . -36) (undo-tree-id17138 . -36) (undo-tree-id17139 . -36) (undo-tree-id17140 . -36) (undo-tree-id17141 . -36) (undo-tree-id17142 . -36) (undo-tree-id17143 . -36) (undo-tree-id17144 . -36) (undo-tree-id17145 . -36) (undo-tree-id17146 . -36) (undo-tree-id17147 . -36) (undo-tree-id17148 . -36) (undo-tree-id17149 . -36) (undo-tree-id17150 . -36) (undo-tree-id17151 . -36) (undo-tree-id17152 . -36) (undo-tree-id17153 . -36) (undo-tree-id17154 . -36) (undo-tree-id17155 . -36) (undo-tree-id17156 . -36) (undo-tree-id17157 . -36) (undo-tree-id17158 . -36) (undo-tree-id17159 . -36) (undo-tree-id17160 . -36) (undo-tree-id17161 . -36) (undo-tree-id17162 . -36) (undo-tree-id17163 . -36) (undo-tree-id17164 . -36) (undo-tree-id17165 . -36) (undo-tree-id17166 . -36) (undo-tree-id17167 . -36) (undo-tree-id17168 . -36) (undo-tree-id17169 . -36) (undo-tree-id17170 . -36) (undo-tree-id17171 . -36) (undo-tree-id17172 . -36) (undo-tree-id17173 . -36) (undo-tree-id17174 . -36) (undo-tree-id17175 . -36) (undo-tree-id17176 . -36) (undo-tree-id17177 . -36) (undo-tree-id17178 . -36) (undo-tree-id17179 . -36) (undo-tree-id17180 . -36) (undo-tree-id17181 . -36) (undo-tree-id17182 . -36) (undo-tree-id17183 . -36) (undo-tree-id17184 . -36) (undo-tree-id17185 . -36) (undo-tree-id17186 . -36) (undo-tree-id17187 . -36) (undo-tree-id17188 . -36) (undo-tree-id17189 . -36) (undo-tree-id17190 . -36) (undo-tree-id17191 . -36) (undo-tree-id17192 . -36) (undo-tree-id17193 . -36) (undo-tree-id17194 . -36) (undo-tree-id17195 . -36) (undo-tree-id17196 . -36) (undo-tree-id17197 . -36) (undo-tree-id17198 . -36) (undo-tree-id17199 . -36) (undo-tree-id17200 . -36) (undo-tree-id17201 . -36) (undo-tree-id17202 . -36) (undo-tree-id17203 . -36) (undo-tree-id17204 . -36) (undo-tree-id17205 . -36) (undo-tree-id17206 . -36) (undo-tree-id17207 . -36) (undo-tree-id17208 . -36) (undo-tree-id17209 . -36) (undo-tree-id17210 . -36) (undo-tree-id17211 . -36) (undo-tree-id17212 . -36) (undo-tree-id17213 . -36) (undo-tree-id17214 . -36) (undo-tree-id17215 . -36) (undo-tree-id17216 . -36) (undo-tree-id17217 . -36) (undo-tree-id17218 . -36) (undo-tree-id17219 . -36) (undo-tree-id17220 . -36) (undo-tree-id17221 . -36) (undo-tree-id17222 . -36) (undo-tree-id17223 . -36) (undo-tree-id17224 . -36) (undo-tree-id17225 . -36) (undo-tree-id17226 . -36) (undo-tree-id17227 . -36) (undo-tree-id17228 . -36) (undo-tree-id17229 . -36) (undo-tree-id17230 . -36) (undo-tree-id17231 . -36) (undo-tree-id17232 . -36) (undo-tree-id17233 . -36) (undo-tree-id17234 . -36) (undo-tree-id17235 . -36) (undo-tree-id17236 . -36) (undo-tree-id17237 . -36) (undo-tree-id17238 . -36) (undo-tree-id17239 . -36) (undo-tree-id17240 . -36) (undo-tree-id17241 . -36) (undo-tree-id17242 . -36) (undo-tree-id17243 . -36) (undo-tree-id17244 . -36) (undo-tree-id17245 . -36) (undo-tree-id17246 . -36) (undo-tree-id17247 . -36) (undo-tree-id17248 . -36) (undo-tree-id17249 . -36) (undo-tree-id17250 . -36) (undo-tree-id17251 . -36) (undo-tree-id17252 . -36) (undo-tree-id17253 . -36) (undo-tree-id17254 . -36) (undo-tree-id17255 . -36) (undo-tree-id17256 . -36) (undo-tree-id17257 . -36) (undo-tree-id17258 . -36) (undo-tree-id17259 . -36) (undo-tree-id17260 . -36) (undo-tree-id17261 . -36) (undo-tree-id17262 . -36) (undo-tree-id17263 . -36) (undo-tree-id17264 . -36) (undo-tree-id17265 . -36) (undo-tree-id17266 . -36) (undo-tree-id17267 . -36) (undo-tree-id17268 . -36) (undo-tree-id17269 . -36) (undo-tree-id17270 . -36) (undo-tree-id17271 . -36) (undo-tree-id17272 . -36) (undo-tree-id17273 . -36) (undo-tree-id17274 . -36) (undo-tree-id17275 . -36) (undo-tree-id17276 . -36) (undo-tree-id17277 . -36) (undo-tree-id17278 . -36) (undo-tree-id17279 . -36) (undo-tree-id17280 . -36) (undo-tree-id17281 . -36) (undo-tree-id17282 . -36) (undo-tree-id17283 . -36) (undo-tree-id17284 . -36) (undo-tree-id17285 . -36) (undo-tree-id17286 . -36) (undo-tree-id17287 . -36) (undo-tree-id17288 . -36) (undo-tree-id17289 . -36) (undo-tree-id17290 . -36) (undo-tree-id17291 . -36) (undo-tree-id17292 . -36) (undo-tree-id17293 . -36) (undo-tree-id17294 . -36) (undo-tree-id17295 . -36) (undo-tree-id17296 . -36) (undo-tree-id17297 . -36) (undo-tree-id17298 . -36) (undo-tree-id17299 . -36) (undo-tree-id17300 . -36) (undo-tree-id17301 . -36) (undo-tree-id17302 . -36) (undo-tree-id17303 . -36) (undo-tree-id17304 . -36) (undo-tree-id17305 . -36) (undo-tree-id17306 . -36) (undo-tree-id17307 . -36) (undo-tree-id17308 . -36) (undo-tree-id17309 . -36) (undo-tree-id17310 . -36) (undo-tree-id17311 . -36) (undo-tree-id17312 . -36) (undo-tree-id17313 . -36) (undo-tree-id17314 . -36) (undo-tree-id17315 . -36) (undo-tree-id17316 . -36) (undo-tree-id17317 . -36) (undo-tree-id17318 . -36) (undo-tree-id17319 . -36) (undo-tree-id17320 . -36) (undo-tree-id17321 . -36) (undo-tree-id17322 . -36) (undo-tree-id17323 . -36) (undo-tree-id17324 . -36) (undo-tree-id17325 . -36) (undo-tree-id17326 . -36) (undo-tree-id17327 . -36) (undo-tree-id17328 . -36) (undo-tree-id17329 . -36) (undo-tree-id17330 . -36) (undo-tree-id17331 . -36) (undo-tree-id17332 . -36) (undo-tree-id17333 . -36) (undo-tree-id17334 . -36) (undo-tree-id17335 . -36) (undo-tree-id17336 . -36) (undo-tree-id17337 . -36) (undo-tree-id17338 . -36) (undo-tree-id17339 . -36) (undo-tree-id17340 . -36) (undo-tree-id17341 . -36) (undo-tree-id17342 . -36) (undo-tree-id17343 . -36) (undo-tree-id17344 . -36) (undo-tree-id17345 . -36) (undo-tree-id17346 . -36) (undo-tree-id17347 . -36) (undo-tree-id17348 . -36) (undo-tree-id17349 . -36) (undo-tree-id17350 . -36) (undo-tree-id17351 . -36) (undo-tree-id17352 . -36) (undo-tree-id17353 . -36) (undo-tree-id17354 . -36) (undo-tree-id17355 . -36) (undo-tree-id17356 . -36) (undo-tree-id17357 . -36) (undo-tree-id17358 . -36) (undo-tree-id17359 . -36) (undo-tree-id17360 . -36) (undo-tree-id17361 . -36) (undo-tree-id17362 . -36) (undo-tree-id17363 . -36) (undo-tree-id17364 . -36) (undo-tree-id17365 . -36) (undo-tree-id17366 . -36) (undo-tree-id17367 . -36) (undo-tree-id17368 . -36) (undo-tree-id17369 . -36) (undo-tree-id17370 . -36) (undo-tree-id17371 . -36) (undo-tree-id17372 . -36) (undo-tree-id17373 . -36) (undo-tree-id17374 . -36) (undo-tree-id17375 . -36) (undo-tree-id17376 . -36) (undo-tree-id17377 . -36) (undo-tree-id17378 . -36) (undo-tree-id17379 . -36) (undo-tree-id17380 . -36) (undo-tree-id17381 . -36) (undo-tree-id17382 . -36) (undo-tree-id17383 . -36) (undo-tree-id17384 . -36) (undo-tree-id17385 . -36) (undo-tree-id17386 . -36) (undo-tree-id17387 . -36) (undo-tree-id17388 . -36) (undo-tree-id17389 . -36) (undo-tree-id17390 . -36) (undo-tree-id17391 . -36) (undo-tree-id17392 . -36) (undo-tree-id17393 . -36) (undo-tree-id17394 . -36) (undo-tree-id17395 . -36) (undo-tree-id17396 . -36) (undo-tree-id17397 . -36) (undo-tree-id17398 . -36) (undo-tree-id17399 . -36) (undo-tree-id17400 . -36) (undo-tree-id17401 . -36) (undo-tree-id17402 . -36) (undo-tree-id17403 . -36) (undo-tree-id17404 . -36) (undo-tree-id17405 . -36) (undo-tree-id17406 . -35) (undo-tree-id17407 . 36) (undo-tree-id17408 . -1) (undo-tree-id17409 . 2) (undo-tree-id17410 . -35) (undo-tree-id17411 . -36)) nil (25758 60441 32229 307000) 0 nil])
([nil nil ((#("#+end_src
" 0 1 (face org-meta-line font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (face org-meta-line font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24899) (undo-tree-id16651 . -9) (undo-tree-id16652 . 10) (undo-tree-id16653 . -10)) nil (25758 60441 31149 417000) 0 nil])
([nil nil ((#("* 
" 0 1 (face org-level-1 keymap (keymap) composition (0 1 [9673]) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 1 2 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 2 3 (fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . 24895) (undo-tree-id17430 . -2) (undo-tree-id17431 . 1) (undo-tree-id17432 . -3) (undo-tree-id17433 . -3) (undo-tree-id17434 . -3) (undo-tree-id17435 . -3) (undo-tree-id17436 . -3) (undo-tree-id17437 . -3) (undo-tree-id17438 . -3) (undo-tree-id17439 . -3) (undo-tree-id17440 . -3) (undo-tree-id17441 . -3) (undo-tree-id17442 . -3) (undo-tree-id17443 . -3) (undo-tree-id17444 . -3) (undo-tree-id17445 . -3) (undo-tree-id17446 . -3) (undo-tree-id17447 . -3) (undo-tree-id17448 . -3) (undo-tree-id17449 . -3) (undo-tree-id17450 . -3) (undo-tree-id17451 . -3) (undo-tree-id17452 . -3) (undo-tree-id17453 . -3) (undo-tree-id17454 . -3) (undo-tree-id17455 . -3) (undo-tree-id17456 . -3) (undo-tree-id17457 . -3) (undo-tree-id17458 . -3) (undo-tree-id17459 . -3) (undo-tree-id17460 . -3) (undo-tree-id17461 . -3) (undo-tree-id17462 . -3) (undo-tree-id17463 . -3) (undo-tree-id17464 . -3) (undo-tree-id17465 . -3) (undo-tree-id17466 . -3) (undo-tree-id17467 . -3) (undo-tree-id17468 . -3) (undo-tree-id17469 . -3) (undo-tree-id17470 . -3) (undo-tree-id17471 . -3) (undo-tree-id17472 . -3) (undo-tree-id17473 . -3) (undo-tree-id17474 . -3) (undo-tree-id17475 . -3) (undo-tree-id17476 . -3) (undo-tree-id17477 . -3) (undo-tree-id17478 . -3) (undo-tree-id17479 . -3) (undo-tree-id17480 . -3) (undo-tree-id17481 . -3) (undo-tree-id17482 . -3) (undo-tree-id17483 . -3) (undo-tree-id17484 . -3) (undo-tree-id17485 . -3) (undo-tree-id17486 . -3) (undo-tree-id17487 . -3) (undo-tree-id17488 . -3) (undo-tree-id17489 . -3) (undo-tree-id17490 . -3) (undo-tree-id17491 . -3) (undo-tree-id17492 . -3) (undo-tree-id17493 . -3) (undo-tree-id17494 . -3) (undo-tree-id17495 . -3) (undo-tree-id17496 . -3) (undo-tree-id17497 . -3) (undo-tree-id17498 . -3) (undo-tree-id17499 . -3) (undo-tree-id17500 . -3) (undo-tree-id17501 . -3) (undo-tree-id17502 . -3) (undo-tree-id17503 . -3) (undo-tree-id17504 . -3) (undo-tree-id17505 . -3) (undo-tree-id17506 . -1) (undo-tree-id17507 . -1) (undo-tree-id17508 . -3) (undo-tree-id17509 . -3) (undo-tree-id17510 . -3) (undo-tree-id17511 . -3) (undo-tree-id17512 . -3) (undo-tree-id17513 . -3) (undo-tree-id17514 . -3) (undo-tree-id17515 . -3) (undo-tree-id17516 . -3) (t 25758 60441 68381 757000)) nil (25758 60445 811907 750000) 0 nil])
([nil nil ((51 . 52) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -51) (undo-tree-id60 . -1) 33 (t 25758 60445 848320 315000)) nil (25772 49024 361504 903000) 0 nil])
([nil nil ((#("very much like a feedforward neural network" 0 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 66) (undo-tree-id57 . -42) (undo-tree-id58 . -5) (undo-tree-id59 . -43)) nil (25772 49024 361501 944000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 66) (undo-tree-id55 . -1) (undo-tree-id56 . -1)) nil (25772 49024 361498 902000) 0 nil])
([nil nil ((81 . 82) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -81) (undo-tree-id54 . -1) 66) nil (25772 49024 361496 767000) 0 nil])
([nil nil ((#("looks  " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 60) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) (undo-tree-id33 . -6) (undo-tree-id34 . -6) (undo-tree-id35 . -6) (undo-tree-id36 . -6) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (undo-tree-id46 . -6) (undo-tree-id47 . -6) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -7)) nil (25772 49024 361493 458000) 0 nil])
([nil nil ((#("except " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 60) (undo-tree-id19 . -6) (undo-tree-id20 . -7)) nil (25772 49024 361379 670000) 0 nil])
([nil nil ((#("it " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 60) (undo-tree-id17 . -2) (undo-tree-id18 . -3)) nil (25772 49024 361376 848000) 0 nil])
([nil nil ((#("also " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 60) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -5)) nil (25772 49024 361371 199000) 0 nil])
([nil nil ((#("For a simplest possible
" 0 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id81 . -23) (undo-tree-id82 . -24) (t 25772 49024 408289 506000)) nil (25772 49050 779522 941000) 0 nil])
([nil nil ((#("RNN" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id77 . -2) (undo-tree-id78 . 3) (undo-tree-id79 . -3) (undo-tree-id80 . -3)) nil (25772 49050 779518 820000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id75 . -1) (undo-tree-id76 . -1)) nil (25772 49050 779515 636000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 97) (undo-tree-id73 . -1) (undo-tree-id74 . -1)) nil (25772 49050 779513 593000) 0 nil])
([nil nil ((#("composed of one neuron receiving inputs" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id71 . -38) (undo-tree-id72 . -39)) nil (25772 49050 779511 545000) 0 nil])
([nil nil ((#(", producing an output" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id69 . -20) (undo-tree-id70 . -21)) nil (25772 49050 779509 524000) 0 nil])
([nil nil ((#(", and
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id67 . -5) (undo-tree-id68 . -6)) nil (25772 49050 779507 182000) 0 nil])
([nil nil ((#("sending that output back to itself, at each
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 44 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id65 . -43) (undo-tree-id66 . -44)) nil (25772 49050 779505 135000) 0 nil])
([nil nil ((#("time step t (frame), this recurrent neuron receives the inputs
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id63 . -62) (undo-tree-id64 . -63)) nil (25772 49050 779502 572000) 0 nil])
([nil nil ((#("x(t) as well as its own output from the previous time step, y(t-1). 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id61 . -68) (undo-tree-id62 . -69)) nil (25772 49050 779497 104000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id87 . -1) (t 25772 49050 819195 710000)) nil (25772 49055 987767 750000) 0 nil])
([nil nil ((#("Since there
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id85 . -11) (undo-tree-id86 . -12)) nil (25772 49055 987764 958000) 0 nil])
([nil nil ((#("is no previous output at the first time step, it is generally set to 0. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 54 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 97) (undo-tree-id83 . -72) (undo-tree-id84 . -73)) nil (25772 49055 987759 252000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -134) (undo-tree-id88 . -1) (t 25772 49056 26981 240000)) nil (25772 49058 212222 154000) 0 nil])
([nil nil ((33 . 35) (t 25772 49058 254889 609000)) nil (25772 49103 961502 775000) 0 nil])
([nil nil ((33 . 99) (#("- 
- A recurrent neural network has connections pointing backward." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 23 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 24 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 24 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 66 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 33) (undo-tree-id1412 . -32) (undo-tree-id1413 . -32) (undo-tree-id1414 . -32) (undo-tree-id1415 . -32) (undo-tree-id1416 . -32) (undo-tree-id1417 . -32) (undo-tree-id1418 . -32) (undo-tree-id1419 . -32) (undo-tree-id1420 . -32) (undo-tree-id1421 . -32) (undo-tree-id1422 . -32) (undo-tree-id1423 . -32) (undo-tree-id1424 . -32) (undo-tree-id1425 . -32) (undo-tree-id1426 . -32) (undo-tree-id1427 . -32) (undo-tree-id1428 . -32) (undo-tree-id1429 . -32) (undo-tree-id1430 . -32) (undo-tree-id1431 . -32) (undo-tree-id1432 . -32) (undo-tree-id1433 . -32) (undo-tree-id1434 . -32) (undo-tree-id1435 . -32) (undo-tree-id1436 . -32) (undo-tree-id1437 . -32) (undo-tree-id1438 . -32) (undo-tree-id1439 . -32) (undo-tree-id1440 . -32) (undo-tree-id1441 . -32) (undo-tree-id1442 . -32) (undo-tree-id1443 . -4) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -4) (undo-tree-id1450 . -4) (undo-tree-id1451 . -4) (undo-tree-id1452 . -5) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (undo-tree-id1455 . -5) (undo-tree-id1456 . -5) (undo-tree-id1457 . -5) (undo-tree-id1458 . -5) (undo-tree-id1459 . -5) (undo-tree-id1460 . -5) (undo-tree-id1461 . 61) (undo-tree-id1462 . -4) (undo-tree-id1463 . -4) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4) (undo-tree-id1476 . -4) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4) (undo-tree-id1481 . -4) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4) (undo-tree-id1484 . -4) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) (undo-tree-id1488 . -3) (33 . 36) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 96) 98) nil (25772 49103 961499 131000) 0 nil])
([nil nil ((98 . 99) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -98) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . 1) (undo-tree-id1346 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 98) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -99) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . 1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) 98) nil (25772 49103 961441 522000) 0 nil])
([nil nil ((97 . 138) (#("- 
- *Unrolling The Network Through Time*" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 6 40 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 40 41 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 97) (undo-tree-id1256 . -4) (undo-tree-id1257 . -4) (undo-tree-id1258 . -4) (undo-tree-id1259 . -4) (undo-tree-id1260 . -4) (undo-tree-id1261 . -4) (undo-tree-id1262 . -4) (undo-tree-id1263 . -4) (undo-tree-id1264 . -4) (undo-tree-id1265 . -4) (undo-tree-id1266 . -4) (undo-tree-id1267 . -4) (undo-tree-id1268 . -4) (undo-tree-id1269 . -4) (undo-tree-id1270 . -4) (undo-tree-id1271 . -4) (undo-tree-id1272 . 36) (undo-tree-id1273 . -4) (undo-tree-id1274 . -4) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -4) (undo-tree-id1282 . -4) (undo-tree-id1283 . -4) (undo-tree-id1284 . -4) (undo-tree-id1285 . -4) (undo-tree-id1286 . -4) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) (undo-tree-id1293 . -4) (undo-tree-id1294 . -4) (undo-tree-id1295 . -4) (undo-tree-id1296 . -4) (undo-tree-id1297 . -4) (undo-tree-id1298 . -4) (undo-tree-id1299 . -4) (undo-tree-id1300 . -4) (undo-tree-id1301 . -4) (undo-tree-id1302 . -4) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) (undo-tree-id1305 . -4) (undo-tree-id1306 . -4) (undo-tree-id1307 . -4) (undo-tree-id1308 . -4) (undo-tree-id1309 . -4) (undo-tree-id1310 . -4) (undo-tree-id1311 . -4) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4) (undo-tree-id1315 . -4) (undo-tree-id1316 . -4) (undo-tree-id1317 . -4) (undo-tree-id1318 . -4) (undo-tree-id1319 . -4) (undo-tree-id1320 . -4) (undo-tree-id1321 . -4) (undo-tree-id1322 . -4) (undo-tree-id1323 . -4) (undo-tree-id1324 . -4) (undo-tree-id1325 . -4) (undo-tree-id1326 . -4) (undo-tree-id1327 . -4) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -3) (97 . 100) 136) nil (25772 49103 961385 787000) 0 nil])
([nil nil ((137 . 138) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -137) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . 1) (undo-tree-id1166 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 137) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -138) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . 1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) 137) nil (25772 49103 961325 327000) 0 nil])
([nil nil ((265 . 266) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 265) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -266) (undo-tree-id1116 . -1) (234 . 235) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -234) (undo-tree-id1117 . -1) (158 . 159) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -158) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) 136) nil (25772 49103 961246 715000) 0 nil])
([nil nil ((312 . 313) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 312) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -313) (undo-tree-id1113 . -1) 157) nil (25772 49103 961208 152000) 0 nil])
([nil nil ((312 . 313)) nil (25772 49103 961201 346000) 0 nil])
([nil nil ((136 . 340) (#("- Each recurrent neuron has two sets of weights:
 w_x for the inputs x(t) 
- At each time step t, every neuron receives both the input vector x(t) and the output vector from the previous time step y(t-1)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 49 50 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 50 51 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 51 52 (invisible t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 52 53 (display ((raise -0.3) (height 0.7)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 53 74 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 74 75 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 75 76 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 76 77 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 96 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 97 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 98 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 173 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 173 174 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 174 204 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 136) (undo-tree-id89 . -204) (undo-tree-id90 . -76) (undo-tree-id91 . -204) (undo-tree-id92 . -76) (undo-tree-id93 . -76) (undo-tree-id94 . -76) (undo-tree-id95 . -76) (undo-tree-id96 . -76) (undo-tree-id97 . -76) (undo-tree-id98 . -76) (undo-tree-id99 . -76) (undo-tree-id100 . -76) (undo-tree-id101 . -76) (undo-tree-id102 . -76) (undo-tree-id103 . -76) (undo-tree-id104 . -76) (undo-tree-id105 . -76) (undo-tree-id106 . -76) (undo-tree-id107 . -76) (undo-tree-id108 . -76) (undo-tree-id109 . -76) (undo-tree-id110 . -76) (undo-tree-id111 . -76) (undo-tree-id112 . -76) (undo-tree-id113 . -76) (undo-tree-id114 . -76) (undo-tree-id115 . -76) (undo-tree-id116 . -76) (undo-tree-id117 . -76) (undo-tree-id118 . -76) (undo-tree-id119 . -76) (undo-tree-id120 . -76) (undo-tree-id121 . -76) (undo-tree-id122 . -76) (undo-tree-id123 . -76) (undo-tree-id124 . -76) (undo-tree-id125 . -76) (undo-tree-id126 . -76) (undo-tree-id127 . -76) (undo-tree-id128 . -76) (undo-tree-id129 . -76) (undo-tree-id130 . -76) (undo-tree-id131 . -76) (undo-tree-id132 . -76) (undo-tree-id133 . -76) (undo-tree-id134 . -76) (undo-tree-id135 . -76) (undo-tree-id136 . -76) (undo-tree-id137 . -76) (undo-tree-id138 . -76) (undo-tree-id139 . -76) (undo-tree-id140 . -76) (undo-tree-id141 . -76) (undo-tree-id142 . -76) (undo-tree-id143 . -76) (undo-tree-id144 . -76) (undo-tree-id145 . -76) (undo-tree-id146 . -76) (undo-tree-id147 . -76) (undo-tree-id148 . -76) (undo-tree-id149 . -76) (undo-tree-id150 . -76) (undo-tree-id151 . -76) (undo-tree-id152 . -76) (undo-tree-id153 . -76) (undo-tree-id154 . -76) (undo-tree-id155 . -76) (undo-tree-id156 . -76) (undo-tree-id157 . -76) (undo-tree-id158 . -76) (undo-tree-id159 . -76) (undo-tree-id160 . -76) (undo-tree-id161 . -76) (undo-tree-id162 . -76) (undo-tree-id163 . -76) (undo-tree-id164 . -76) (undo-tree-id165 . -76) (undo-tree-id166 . -76) (undo-tree-id167 . -76) (undo-tree-id168 . -76) (undo-tree-id169 . -76) (undo-tree-id170 . -76) (undo-tree-id171 . -76) (undo-tree-id172 . -76) (undo-tree-id173 . -76) (undo-tree-id174 . -76) (undo-tree-id175 . -76) (undo-tree-id176 . -76) (undo-tree-id177 . -76) (undo-tree-id178 . -76) (undo-tree-id179 . -76) (undo-tree-id180 . -76) (undo-tree-id181 . -97) (undo-tree-id182 . -97) (undo-tree-id183 . -97) (undo-tree-id184 . -97) (undo-tree-id185 . -97) (undo-tree-id186 . -97) (undo-tree-id187 . -97) (undo-tree-id188 . -97) (undo-tree-id189 . -104) (undo-tree-id190 . -97) (undo-tree-id191 . -97) (undo-tree-id192 . -97) (undo-tree-id193 . -97) (undo-tree-id194 . -97) (undo-tree-id195 . -97) (undo-tree-id196 . -97) (undo-tree-id197 . -97) (undo-tree-id198 . -77) (undo-tree-id199 . -77) (undo-tree-id200 . -77) (undo-tree-id201 . 80) (undo-tree-id202 . -77) (undo-tree-id203 . -123) (undo-tree-id204 . -77) (undo-tree-id205 . -77) (undo-tree-id206 . -77) (undo-tree-id207 . -77) (undo-tree-id208 . -77) (undo-tree-id209 . -77) (undo-tree-id210 . -77) (undo-tree-id211 . -77) (undo-tree-id212 . -77) (undo-tree-id213 . -77) (undo-tree-id214 . -78) (undo-tree-id215 . -83) (undo-tree-id216 . -88) (undo-tree-id217 . -93) (undo-tree-id218 . -95) (undo-tree-id219 . -96) (undo-tree-id220 . -102) (undo-tree-id221 . -102) (undo-tree-id222 . -102) (undo-tree-id223 . -102) (undo-tree-id224 . -102) (undo-tree-id225 . -102) (undo-tree-id226 . -102) (undo-tree-id227 . -102) (undo-tree-id228 . -109) (undo-tree-id229 . -109) (undo-tree-id230 . -109) (undo-tree-id231 . -109) (undo-tree-id232 . -109) (undo-tree-id233 . -109) (undo-tree-id234 . -109) (undo-tree-id235 . -109) (undo-tree-id236 . -118) (undo-tree-id237 . -118) (undo-tree-id238 . -118) (undo-tree-id239 . -118) (undo-tree-id240 . -118) (undo-tree-id241 . -118) (undo-tree-id242 . -118) (undo-tree-id243 . -118) (undo-tree-id244 . -123) (undo-tree-id245 . -123) (undo-tree-id246 . -123) (undo-tree-id247 . -123) (undo-tree-id248 . -123) (undo-tree-id249 . -123) (undo-tree-id250 . -123) (undo-tree-id251 . -123) (undo-tree-id252 . -123) (undo-tree-id253 . -123) (undo-tree-id254 . -123) (undo-tree-id255 . -123) (undo-tree-id256 . -123) (undo-tree-id257 . -123) (undo-tree-id258 . -123) (undo-tree-id259 . -123) (undo-tree-id260 . -123) (undo-tree-id261 . -123) (undo-tree-id262 . -123) (undo-tree-id263 . -123) (undo-tree-id264 . -123) (undo-tree-id265 . -123) (undo-tree-id266 . -123) (undo-tree-id267 . -123) (undo-tree-id268 . -123) (undo-tree-id269 . -96) (undo-tree-id270 . -96) (undo-tree-id271 . -96) (undo-tree-id272 . -96) (undo-tree-id273 . -96) (undo-tree-id274 . -96) (undo-tree-id275 . -96) (undo-tree-id276 . -96) (undo-tree-id277 . -97) (undo-tree-id278 . -97) (undo-tree-id279 . -97) (undo-tree-id280 . -97) (undo-tree-id281 . -97) (undo-tree-id282 . -97) (undo-tree-id283 . -97) (undo-tree-id284 . -97) (undo-tree-id285 . -97) (undo-tree-id286 . -97) (undo-tree-id287 . -97) (undo-tree-id288 . -97) (undo-tree-id289 . -97) (undo-tree-id290 . -97) (undo-tree-id291 . -97) (undo-tree-id292 . -97) (undo-tree-id293 . -97) (undo-tree-id294 . -97) (undo-tree-id295 . -97) (undo-tree-id296 . -97) (undo-tree-id297 . -97) (undo-tree-id298 . -97) (undo-tree-id299 . -97) (undo-tree-id300 . -97) (undo-tree-id301 . -97) (undo-tree-id302 . -97) (undo-tree-id303 . -97) (undo-tree-id304 . -97) (undo-tree-id305 . -97) (undo-tree-id306 . -97) (undo-tree-id307 . -97) (undo-tree-id308 . -173) (undo-tree-id309 . -173) (undo-tree-id310 . -173) (undo-tree-id311 . -173) (undo-tree-id312 . -173) (undo-tree-id313 . -173) (undo-tree-id314 . -173) (undo-tree-id315 . -173) (undo-tree-id316 . -173) (undo-tree-id317 . -173) (undo-tree-id318 . -173) (undo-tree-id319 . -173) (undo-tree-id320 . -173) (undo-tree-id321 . -173) (undo-tree-id322 . -173) (undo-tree-id323 . -204) (undo-tree-id324 . -204) (undo-tree-id325 . -204) (undo-tree-id326 . -204) (undo-tree-id327 . -204) (undo-tree-id328 . -204) (undo-tree-id329 . -204) (undo-tree-id330 . -204) (undo-tree-id331 . -204) (undo-tree-id332 . -204) (undo-tree-id333 . -204) (undo-tree-id334 . -204) (undo-tree-id335 . -204) (undo-tree-id336 . -204) (undo-tree-id337 . -204) (undo-tree-id338 . -204) (undo-tree-id339 . -204) (undo-tree-id340 . -204) (undo-tree-id341 . -204) (undo-tree-id342 . -204) (undo-tree-id343 . -204) (undo-tree-id344 . -204) (undo-tree-id345 . -204) (undo-tree-id346 . -112) (undo-tree-id347 . -112) (undo-tree-id348 . -112) (undo-tree-id349 . -112) (undo-tree-id350 . -112) (undo-tree-id351 . -112) (undo-tree-id352 . -112) (undo-tree-id353 . -112) (undo-tree-id354 . -112) (undo-tree-id355 . -112) (undo-tree-id356 . -112) (undo-tree-id357 . -112) (undo-tree-id358 . -112) (undo-tree-id359 . -112) (undo-tree-id360 . -112) (undo-tree-id361 . -112) (undo-tree-id362 . -112) (undo-tree-id363 . -112) (undo-tree-id364 . -112) (undo-tree-id365 . -112) (undo-tree-id366 . -112) (undo-tree-id367 . -112) (undo-tree-id368 . -112) (undo-tree-id369 . -112) (undo-tree-id370 . -112) (undo-tree-id371 . -112) (undo-tree-id372 . -112) (undo-tree-id373 . -112) (undo-tree-id374 . -112) (undo-tree-id375 . -112) (undo-tree-id376 . -112) (undo-tree-id377 . -112) (undo-tree-id378 . -112) (undo-tree-id379 . -112) (undo-tree-id380 . -112) (undo-tree-id381 . -112) (undo-tree-id382 . -112) (undo-tree-id383 . -112) (undo-tree-id384 . -112) (undo-tree-id385 . -112) (undo-tree-id386 . -112) (undo-tree-id387 . -112) (undo-tree-id388 . -112) (undo-tree-id389 . -112) (undo-tree-id390 . -112) (undo-tree-id391 . -204) (undo-tree-id392 . -77) (undo-tree-id393 . -77) (undo-tree-id394 . -77) (undo-tree-id395 . -77) (undo-tree-id396 . -77) (undo-tree-id397 . -77) (undo-tree-id398 . -77) (undo-tree-id399 . -77) (undo-tree-id400 . -77) (undo-tree-id401 . -77) (undo-tree-id402 . -77) (undo-tree-id403 . -77) (undo-tree-id404 . -77) (undo-tree-id405 . -77) (undo-tree-id406 . -77) (undo-tree-id407 . -80) (undo-tree-id408 . -80) (undo-tree-id409 . -80) (undo-tree-id410 . -80) (undo-tree-id411 . -80) (undo-tree-id412 . -80) (undo-tree-id413 . -80) (undo-tree-id414 . -80) (undo-tree-id415 . -80) (undo-tree-id416 . -80) (undo-tree-id417 . -80) (undo-tree-id418 . -80) (undo-tree-id419 . -80) (undo-tree-id420 . -80) (undo-tree-id421 . -80) (undo-tree-id422 . -85) (undo-tree-id423 . -85) (undo-tree-id424 . -85) (undo-tree-id425 . -85) (undo-tree-id426 . -85) (undo-tree-id427 . -85) (undo-tree-id428 . -85) (undo-tree-id429 . -85) (undo-tree-id430 . -85) (undo-tree-id431 . -85) (undo-tree-id432 . -85) (undo-tree-id433 . -85) (undo-tree-id434 . -85) (undo-tree-id435 . -85) (undo-tree-id436 . -85) (undo-tree-id437 . -90) (undo-tree-id438 . -90) (undo-tree-id439 . -90) (undo-tree-id440 . -90) (undo-tree-id441 . -90) (undo-tree-id442 . -90) (undo-tree-id443 . -90) (undo-tree-id444 . -90) (undo-tree-id445 . -90) (undo-tree-id446 . -90) (undo-tree-id447 . -90) (undo-tree-id448 . -90) (undo-tree-id449 . -90) (undo-tree-id450 . -90) (undo-tree-id451 . -90) (undo-tree-id452 . -95) (undo-tree-id453 . -95) (undo-tree-id454 . -95) (undo-tree-id455 . -95) (undo-tree-id456 . -95) (undo-tree-id457 . -95) (undo-tree-id458 . -95) (undo-tree-id459 . -95) (undo-tree-id460 . -95) (undo-tree-id461 . -95) (undo-tree-id462 . -95) (undo-tree-id463 . -95) (undo-tree-id464 . -95) (undo-tree-id465 . -95) (undo-tree-id466 . -95) (undo-tree-id467 . -95) (undo-tree-id468 . -95) (undo-tree-id469 . -95) (undo-tree-id470 . -95) (undo-tree-id471 . -95) (undo-tree-id472 . -95) (undo-tree-id473 . -95) (undo-tree-id474 . -96) (undo-tree-id475 . -96) (undo-tree-id476 . -96) (undo-tree-id477 . -96) (undo-tree-id478 . -96) (undo-tree-id479 . -96) (undo-tree-id480 . -96) (undo-tree-id481 . -96) (undo-tree-id482 . -96) (undo-tree-id483 . -96) (undo-tree-id484 . -96) (undo-tree-id485 . -96) (undo-tree-id486 . -96) (undo-tree-id487 . -96) (undo-tree-id488 . -96) (undo-tree-id489 . -96) (undo-tree-id490 . -96) (undo-tree-id491 . -96) (undo-tree-id492 . -96) (undo-tree-id493 . -96) (undo-tree-id494 . -96) (undo-tree-id495 . -96) (undo-tree-id496 . -96) (undo-tree-id497 . -204) (undo-tree-id498 . -204) (undo-tree-id499 . -204) (undo-tree-id500 . -204) (undo-tree-id501 . -204) (undo-tree-id502 . -204) (undo-tree-id503 . -204) (undo-tree-id504 . -204) (undo-tree-id505 . -204) (undo-tree-id506 . -204) (undo-tree-id507 . -204) (undo-tree-id508 . -204) (undo-tree-id509 . -204) (undo-tree-id510 . -204) (undo-tree-id511 . -204) (undo-tree-id512 . -204) (undo-tree-id513 . -204) (undo-tree-id514 . -204) (undo-tree-id515 . -204) (undo-tree-id516 . -204) (undo-tree-id517 . -204) (undo-tree-id518 . -204) (undo-tree-id519 . -204) (undo-tree-id520 . -204) (undo-tree-id521 . -204) (undo-tree-id522 . -204) (undo-tree-id523 . -204) (undo-tree-id524 . -204) (undo-tree-id525 . -204) (undo-tree-id526 . -204) (undo-tree-id527 . -204) (undo-tree-id528 . -204) (undo-tree-id529 . -204) (undo-tree-id530 . -204) (undo-tree-id531 . -204) (undo-tree-id532 . -204) (undo-tree-id533 . -204) (undo-tree-id534 . -204) (undo-tree-id535 . -204) (undo-tree-id536 . -204) (undo-tree-id537 . -204) (undo-tree-id538 . -204) (undo-tree-id539 . -204) (undo-tree-id540 . -204) (undo-tree-id541 . -204) (undo-tree-id542 . -204) (undo-tree-id543 . -204) (undo-tree-id544 . -204) (undo-tree-id545 . -204) (undo-tree-id546 . -204) (undo-tree-id547 . -204) (undo-tree-id548 . -204) (undo-tree-id549 . -204) (undo-tree-id550 . -204) (undo-tree-id551 . -204) (undo-tree-id552 . -204) (undo-tree-id553 . -204) (undo-tree-id554 . -204) (undo-tree-id555 . -204) (undo-tree-id556 . -204) (undo-tree-id557 . -204) (undo-tree-id558 . -204) (undo-tree-id559 . -204) (undo-tree-id560 . -204) (undo-tree-id561 . -204) (undo-tree-id562 . -204) (undo-tree-id563 . -204) (undo-tree-id564 . -204) (undo-tree-id565 . -169) (undo-tree-id566 . -169) (undo-tree-id567 . -169) (undo-tree-id568 . -169) (undo-tree-id569 . -169) (undo-tree-id570 . -169) (undo-tree-id571 . -169) (undo-tree-id572 . -169) (undo-tree-id573 . -169) (undo-tree-id574 . -169) (undo-tree-id575 . -169) (undo-tree-id576 . -169) (undo-tree-id577 . -169) (undo-tree-id578 . -169) (undo-tree-id579 . -169) (undo-tree-id580 . -169) (undo-tree-id581 . -169) (undo-tree-id582 . -169) (undo-tree-id583 . -169) (undo-tree-id584 . -169) (undo-tree-id585 . -169) (undo-tree-id586 . -169) (undo-tree-id587 . -77) (undo-tree-id588 . -77) (undo-tree-id589 . -77) (undo-tree-id590 . -77) (undo-tree-id591 . -77) (undo-tree-id592 . -77) (undo-tree-id593 . -77) (undo-tree-id594 . -77) (undo-tree-id595 . -77) (undo-tree-id596 . -77) (undo-tree-id597 . -77) (undo-tree-id598 . -77) (undo-tree-id599 . -77) (undo-tree-id600 . -77) (undo-tree-id601 . -77) (undo-tree-id602 . -80) (undo-tree-id603 . -80) (undo-tree-id604 . -80) (undo-tree-id605 . -80) (undo-tree-id606 . -80) (undo-tree-id607 . -80) (undo-tree-id608 . -80) (undo-tree-id609 . -80) (undo-tree-id610 . -80) (undo-tree-id611 . -80) (undo-tree-id612 . -80) (undo-tree-id613 . -80) (undo-tree-id614 . -80) (undo-tree-id615 . -80) (undo-tree-id616 . -80) (undo-tree-id617 . -85) (undo-tree-id618 . -85) (undo-tree-id619 . -85) (undo-tree-id620 . -85) (undo-tree-id621 . -85) (undo-tree-id622 . -85) (undo-tree-id623 . -85) (undo-tree-id624 . -85) (undo-tree-id625 . -85) (undo-tree-id626 . -85) (undo-tree-id627 . -85) (undo-tree-id628 . -85) (undo-tree-id629 . -85) (undo-tree-id630 . -85) (undo-tree-id631 . -85) (undo-tree-id632 . -90) (undo-tree-id633 . -90) (undo-tree-id634 . -90) (undo-tree-id635 . -90) (undo-tree-id636 . -90) (undo-tree-id637 . -90) (undo-tree-id638 . -90) (undo-tree-id639 . -90) (undo-tree-id640 . -90) (undo-tree-id641 . -90) (undo-tree-id642 . -90) (undo-tree-id643 . -90) (undo-tree-id644 . -90) (undo-tree-id645 . -90) (undo-tree-id646 . -90) (undo-tree-id647 . -90) (undo-tree-id648 . -90) (undo-tree-id649 . -90) (undo-tree-id650 . -90) (undo-tree-id651 . -90) (undo-tree-id652 . -90) (undo-tree-id653 . -90) (undo-tree-id654 . -95) (undo-tree-id655 . -95) (undo-tree-id656 . -95) (undo-tree-id657 . -95) (undo-tree-id658 . -95) (undo-tree-id659 . -95) (undo-tree-id660 . -95) (undo-tree-id661 . -95) (undo-tree-id662 . -95) (undo-tree-id663 . -95) (undo-tree-id664 . -95) (undo-tree-id665 . -95) (undo-tree-id666 . -95) (undo-tree-id667 . -95) (undo-tree-id668 . -95) (undo-tree-id669 . -96) (undo-tree-id670 . -96) (undo-tree-id671 . -96) (undo-tree-id672 . -96) (undo-tree-id673 . -96) (undo-tree-id674 . -96) (undo-tree-id675 . -96) (undo-tree-id676 . -96) (undo-tree-id677 . -96) (undo-tree-id678 . -96) (undo-tree-id679 . -96) (undo-tree-id680 . -96) (undo-tree-id681 . -96) (undo-tree-id682 . -96) (undo-tree-id683 . -96) (undo-tree-id684 . -98) (undo-tree-id685 . -98) (undo-tree-id686 . -98) (undo-tree-id687 . -98) (undo-tree-id688 . -98) (undo-tree-id689 . -98) (undo-tree-id690 . -98) (undo-tree-id691 . -98) (undo-tree-id692 . -98) (undo-tree-id693 . -98) (undo-tree-id694 . -98) (undo-tree-id695 . -98) (undo-tree-id696 . -98) (undo-tree-id697 . -98) (undo-tree-id698 . -98) (undo-tree-id699 . -104) (undo-tree-id700 . -104) (undo-tree-id701 . -104) (undo-tree-id702 . -104) (undo-tree-id703 . -104) (undo-tree-id704 . -104) (undo-tree-id705 . -104) (undo-tree-id706 . -104) (undo-tree-id707 . -104) (undo-tree-id708 . -104) (undo-tree-id709 . -104) (undo-tree-id710 . -104) (undo-tree-id711 . -104) (undo-tree-id712 . -104) (undo-tree-id713 . -104) (undo-tree-id714 . -111) (undo-tree-id715 . -111) (undo-tree-id716 . -111) (undo-tree-id717 . -111) (undo-tree-id718 . -111) (undo-tree-id719 . -111) (undo-tree-id720 . -111) (undo-tree-id721 . -111) (undo-tree-id722 . -111) (undo-tree-id723 . -111) (undo-tree-id724 . -111) (undo-tree-id725 . -111) (undo-tree-id726 . -111) (undo-tree-id727 . -111) (undo-tree-id728 . -111) (undo-tree-id729 . -120) (undo-tree-id730 . -120) (undo-tree-id731 . -120) (undo-tree-id732 . -120) (undo-tree-id733 . -120) (undo-tree-id734 . -120) (undo-tree-id735 . -120) (undo-tree-id736 . -120) (undo-tree-id737 . -125) (undo-tree-id738 . -125) (undo-tree-id739 . -125) (undo-tree-id740 . -125) (undo-tree-id741 . -125) (undo-tree-id742 . -125) (undo-tree-id743 . -125) (undo-tree-id744 . -125) (undo-tree-id745 . -129) (undo-tree-id746 . -129) (undo-tree-id747 . -129) (undo-tree-id748 . -129) (undo-tree-id749 . -129) (undo-tree-id750 . -129) (undo-tree-id751 . -129) (undo-tree-id752 . -129) (undo-tree-id753 . -135) (undo-tree-id754 . -135) (undo-tree-id755 . -135) (undo-tree-id756 . -135) (undo-tree-id757 . -135) (undo-tree-id758 . -135) (undo-tree-id759 . -135) (undo-tree-id760 . -135) (undo-tree-id761 . -142) (undo-tree-id762 . -142) (undo-tree-id763 . -142) (undo-tree-id764 . -142) (undo-tree-id765 . -142) (undo-tree-id766 . -142) (undo-tree-id767 . -142) (undo-tree-id768 . -142) (undo-tree-id769 . -143) (undo-tree-id770 . -143) (undo-tree-id771 . -143) (undo-tree-id772 . -143) (undo-tree-id773 . -143) (undo-tree-id774 . -143) (undo-tree-id775 . -143) (undo-tree-id776 . -143) (undo-tree-id777 . -144) (undo-tree-id778 . -144) (undo-tree-id779 . -144) (undo-tree-id780 . -144) (undo-tree-id781 . -144) (undo-tree-id782 . -144) (undo-tree-id783 . -144) (undo-tree-id784 . -144) (undo-tree-id785 . -145) (undo-tree-id786 . -145) (undo-tree-id787 . -145) (undo-tree-id788 . -145) (undo-tree-id789 . -145) (undo-tree-id790 . -145) (undo-tree-id791 . -145) (undo-tree-id792 . -145) (undo-tree-id793 . -147) (undo-tree-id794 . -147) (undo-tree-id795 . -147) (undo-tree-id796 . -147) (undo-tree-id797 . -147) (undo-tree-id798 . -147) (undo-tree-id799 . -147) (undo-tree-id800 . -147) (undo-tree-id801 . -151) (undo-tree-id802 . -151) (undo-tree-id803 . -151) (undo-tree-id804 . -151) (undo-tree-id805 . -151) (undo-tree-id806 . -151) (undo-tree-id807 . -151) (undo-tree-id808 . -151) (undo-tree-id809 . -155) (undo-tree-id810 . -155) (undo-tree-id811 . -155) (undo-tree-id812 . -155) (undo-tree-id813 . -155) (undo-tree-id814 . -155) (undo-tree-id815 . -155) (undo-tree-id816 . -155) (undo-tree-id817 . -162) (undo-tree-id818 . -162) (undo-tree-id819 . -162) (undo-tree-id820 . -162) (undo-tree-id821 . -162) (undo-tree-id822 . -162) (undo-tree-id823 . -162) (undo-tree-id824 . -162) (undo-tree-id825 . -162) (undo-tree-id826 . -162) (undo-tree-id827 . -162) (undo-tree-id828 . -162) (undo-tree-id829 . -162) (undo-tree-id830 . -162) (undo-tree-id831 . -162) (undo-tree-id832 . -169) (undo-tree-id833 . -169) (undo-tree-id834 . -169) (undo-tree-id835 . -169) (undo-tree-id836 . -169) (undo-tree-id837 . -169) (undo-tree-id838 . -169) (undo-tree-id839 . -169) (undo-tree-id840 . -169) (undo-tree-id841 . -169) (undo-tree-id842 . -169) (undo-tree-id843 . -169) (undo-tree-id844 . -169) (undo-tree-id845 . -169) (undo-tree-id846 . -169) (undo-tree-id847 . -174) (undo-tree-id848 . -174) (undo-tree-id849 . -174) (undo-tree-id850 . -174) (undo-tree-id851 . -174) (undo-tree-id852 . -174) (undo-tree-id853 . -174) (undo-tree-id854 . -174) (undo-tree-id855 . -178) (undo-tree-id856 . -178) (undo-tree-id857 . -178) (undo-tree-id858 . -178) (undo-tree-id859 . -178) (undo-tree-id860 . -178) (undo-tree-id861 . -178) (undo-tree-id862 . -178) (undo-tree-id863 . -187) (undo-tree-id864 . -187) (undo-tree-id865 . -187) (undo-tree-id866 . -187) (undo-tree-id867 . -187) (undo-tree-id868 . -187) (undo-tree-id869 . -187) (undo-tree-id870 . -187) (undo-tree-id871 . -192) (undo-tree-id872 . -192) (undo-tree-id873 . -192) (undo-tree-id874 . -192) (undo-tree-id875 . -192) (undo-tree-id876 . -192) (undo-tree-id877 . -192) (undo-tree-id878 . -192) (undo-tree-id879 . -197) (undo-tree-id880 . -197) (undo-tree-id881 . -197) (undo-tree-id882 . -197) (undo-tree-id883 . -197) (undo-tree-id884 . -197) (undo-tree-id885 . -197) (undo-tree-id886 . -197) (undo-tree-id887 . -198) (undo-tree-id888 . -198) (undo-tree-id889 . -198) (undo-tree-id890 . -198) (undo-tree-id891 . -198) (undo-tree-id892 . -198) (undo-tree-id893 . -198) (undo-tree-id894 . -198) (undo-tree-id895 . -198) (undo-tree-id896 . -198) (undo-tree-id897 . -198) (undo-tree-id898 . -198) (undo-tree-id899 . -198) (undo-tree-id900 . -198) (undo-tree-id901 . -198) (undo-tree-id902 . -199) (undo-tree-id903 . -199) (undo-tree-id904 . -199) (undo-tree-id905 . -199) (undo-tree-id906 . -199) (undo-tree-id907 . -199) (undo-tree-id908 . -199) (undo-tree-id909 . -199) (undo-tree-id910 . -199) (undo-tree-id911 . -199) (undo-tree-id912 . -199) (undo-tree-id913 . -199) (undo-tree-id914 . -199) (undo-tree-id915 . -199) (undo-tree-id916 . -199) (undo-tree-id917 . -200) (undo-tree-id918 . -200) (undo-tree-id919 . -200) (undo-tree-id920 . -200) (undo-tree-id921 . -200) (undo-tree-id922 . -200) (undo-tree-id923 . -200) (undo-tree-id924 . -200) (undo-tree-id925 . -200) (undo-tree-id926 . -200) (undo-tree-id927 . -200) (undo-tree-id928 . -200) (undo-tree-id929 . -200) (undo-tree-id930 . -200) (undo-tree-id931 . -200) (undo-tree-id932 . -201) (undo-tree-id933 . -201) (undo-tree-id934 . -201) (undo-tree-id935 . -201) (undo-tree-id936 . -201) (undo-tree-id937 . -201) (undo-tree-id938 . -201) (undo-tree-id939 . -201) (undo-tree-id940 . -201) (undo-tree-id941 . -201) (undo-tree-id942 . -201) (undo-tree-id943 . -201) (undo-tree-id944 . -201) (undo-tree-id945 . -201) (undo-tree-id946 . -201) (undo-tree-id947 . -202) (undo-tree-id948 . -202) (undo-tree-id949 . -202) (undo-tree-id950 . -202) (undo-tree-id951 . -202) (undo-tree-id952 . -202) (undo-tree-id953 . -202) (undo-tree-id954 . -202) (undo-tree-id955 . -202) (undo-tree-id956 . -202) (undo-tree-id957 . -202) (undo-tree-id958 . -202) (undo-tree-id959 . -202) (undo-tree-id960 . -202) (undo-tree-id961 . -202) (undo-tree-id962 . -202) (undo-tree-id963 . -202) (undo-tree-id964 . -202) (undo-tree-id965 . -202) (undo-tree-id966 . -202) (undo-tree-id967 . -202) (undo-tree-id968 . -202) (undo-tree-id969 . -204) (undo-tree-id970 . -204) (undo-tree-id971 . -204) (undo-tree-id972 . -204) (undo-tree-id973 . -204) (undo-tree-id974 . -204) (undo-tree-id975 . -204) (undo-tree-id976 . -204) (undo-tree-id977 . -204) (undo-tree-id978 . -204) (undo-tree-id979 . -204) (undo-tree-id980 . -204) (undo-tree-id981 . -204) (undo-tree-id982 . -204) (undo-tree-id983 . -204) (undo-tree-id984 . -204) (undo-tree-id985 . -204) (undo-tree-id986 . -204) (undo-tree-id987 . -204) (undo-tree-id988 . -204) (undo-tree-id989 . -204) (undo-tree-id990 . -204) (undo-tree-id991 . -204) (undo-tree-id992 . -204) (undo-tree-id993 . -204) (undo-tree-id994 . -204) (undo-tree-id995 . -204) (undo-tree-id996 . -204) (undo-tree-id997 . -204) (undo-tree-id998 . -204) (undo-tree-id999 . -204) (undo-tree-id1000 . -204) (undo-tree-id1001 . -204) (undo-tree-id1002 . -75) (136 . 211) (#(" Each recurrent neuron has two sets of weights:
 w_x for the inputs x(t) " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 49 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 50 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) invisible t) 51 52 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) display ((raise -0.3) (height 0.7))) 52 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 265) (undo-tree-id1003 . -46) (undo-tree-id1004 . -1) (undo-tree-id1005 . 25) (undo-tree-id1006 . -47) (undo-tree-id1007 . 24) (undo-tree-id1008 . -47) (undo-tree-id1009 . -47) (undo-tree-id1010 . -47) (undo-tree-id1011 . -47) (undo-tree-id1012 . -47) (undo-tree-id1013 . -47) (undo-tree-id1014 . -47) (undo-tree-id1015 . -47) (undo-tree-id1016 . -47) (undo-tree-id1017 . -47) (undo-tree-id1018 . -47) (undo-tree-id1019 . -47) (undo-tree-id1020 . -47) (undo-tree-id1021 . -47) (undo-tree-id1022 . -47) (undo-tree-id1023 . -47) (undo-tree-id1024 . -47) (undo-tree-id1025 . -47) (undo-tree-id1026 . -47) (undo-tree-id1027 . -47) (undo-tree-id1028 . -47) (undo-tree-id1029 . -47) (undo-tree-id1030 . -47) (undo-tree-id1031 . -47) (undo-tree-id1032 . -47) (undo-tree-id1033 . -47) (undo-tree-id1034 . -47) (undo-tree-id1035 . -47) (undo-tree-id1036 . -47) (undo-tree-id1037 . -47) (undo-tree-id1038 . -47) (undo-tree-id1039 . -47) (undo-tree-id1040 . -47) (undo-tree-id1041 . -48) (undo-tree-id1042 . -48) (undo-tree-id1043 . -48) (undo-tree-id1044 . -48) (undo-tree-id1045 . -48) (undo-tree-id1046 . -48) (undo-tree-id1047 . -48) (undo-tree-id1048 . -48) (undo-tree-id1049 . -48) (undo-tree-id1050 . -48) (undo-tree-id1051 . -48) (undo-tree-id1052 . -48) (undo-tree-id1053 . -48) (undo-tree-id1054 . -48) (undo-tree-id1055 . -48) (undo-tree-id1056 . -48) (undo-tree-id1057 . -48) (undo-tree-id1058 . -48) (undo-tree-id1059 . -48) (undo-tree-id1060 . -48) (undo-tree-id1061 . -48) (undo-tree-id1062 . -48) (undo-tree-id1063 . -48) (undo-tree-id1064 . -48) (undo-tree-id1065 . -48) (undo-tree-id1066 . -48) (undo-tree-id1067 . -48) (undo-tree-id1068 . -48) (undo-tree-id1069 . -48) (undo-tree-id1070 . -48) (undo-tree-id1071 . -48) (undo-tree-id1072 . -48) (undo-tree-id1073 . -48) (undo-tree-id1074 . -48) (undo-tree-id1075 . -48) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) 266) nil (25772 49103 961159 178000) 0 nil])
([nil nil ((314 . 315) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 314) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -314) (undo-tree-id1489 . -1) 268 (t 25772 49104 45021 521000)) nil (25772 49109 566008 378000) 0 nil])
([nil nil ((266 . 341) (#("- w_x for the inputs x(t) 
- Each recurrent neuron has two sets of weights:" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 4 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (display ((raise -0.3) (height 0.7)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 5 26 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 26 27 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 28 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 28 29 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 29 75 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 266) (undo-tree-id1490 . 46) (undo-tree-id1491 . -75) (undo-tree-id1492 . -75) (undo-tree-id1493 . -75) (undo-tree-id1494 . -75) (undo-tree-id1495 . -75) (undo-tree-id1496 . -75) (undo-tree-id1497 . -75) (undo-tree-id1498 . -75) (undo-tree-id1499 . -75) (undo-tree-id1500 . -75) (undo-tree-id1501 . -75) (undo-tree-id1502 . -75) (undo-tree-id1503 . -75) (undo-tree-id1504 . -75) (undo-tree-id1505 . -75) (undo-tree-id1506 . -75) (undo-tree-id1507 . -75) (undo-tree-id1508 . -75) (undo-tree-id1509 . -75) (undo-tree-id1510 . -75) (undo-tree-id1511 . -75) (undo-tree-id1512 . -75) (undo-tree-id1513 . -75) (undo-tree-id1514 . -75) (undo-tree-id1515 . -27) (266 . 293) (#(" w_x for the inputs x(t) " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 4 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 314) (t 25772 49109 604796 614000)) nil (25772 49116 261272 627000) 0 nil])
([nil nil ((342 . 344) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -342) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -343) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . -344) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) 345 (342 . 343) (342 . 344)) nil (25772 49121 962653 567000) 0 nil] [nil nil ((342 . 343) (342 . 344)) ((#("* " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 342) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 342)) (25772 49116 260403 933000) 0 nil])
([nil nil ((337 . 338) (t 25772 49122 4296 442000)) nil (25772 49129 681380 805000) 0 nil])
nil
([nil nil ((392 . 393)) nil (25772 49129 681375 603000) 0 nil])
([nil nil ((204 . 205) (t 25772 49129 715986 347000)) nil (25772 49137 229551 724000) 0 nil])
([nil nil ((260 . 261)) nil (25772 49137 229546 532000) 0 nil])
([nil nil ((420 . 421) (t 25772 49137 267683 402000)) nil (25772 49159 215233 740000) 0 nil])
([nil nil ((434 . 435)) nil (25772 49159 215228 242000) 0 nil])
([nil nil ((445 . 446) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -445) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -445) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) 403 (t 25772 49159 306803 218000)) nil (25772 49190 706535 195000) 0 nil])
([nil nil ((#("Y_(t) = ϕ(X_(t) W_x + Y_(t−1) W_y + b)" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 2 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 5 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 12 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 15 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 17 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 19 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 23 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 24 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 29 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 32 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 33 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 446) (undo-tree-id1627 . -37) (undo-tree-id1628 . -37) (undo-tree-id1629 . -37) (undo-tree-id1630 . -37) (undo-tree-id1631 . -38) (undo-tree-id1632 . -37) (undo-tree-id1633 . -2) (undo-tree-id1634 . -3) (undo-tree-id1635 . -4) (undo-tree-id1636 . -6) (undo-tree-id1637 . -8) (undo-tree-id1638 . -9) (undo-tree-id1639 . -10) (undo-tree-id1640 . -12) (undo-tree-id1641 . -13) (undo-tree-id1642 . -14) (undo-tree-id1643 . -16) (undo-tree-id1644 . -17) (undo-tree-id1645 . -19) (undo-tree-id1646 . -20) (undo-tree-id1647 . -22) (undo-tree-id1648 . -24) (undo-tree-id1649 . -25) (undo-tree-id1650 . -26) (undo-tree-id1651 . -27) (undo-tree-id1652 . -28) (undo-tree-id1653 . -30) (undo-tree-id1654 . -31) (undo-tree-id1655 . -33) (undo-tree-id1656 . -34) (undo-tree-id1657 . -36) (undo-tree-id1658 . 1) (undo-tree-id1659 . -38) (undo-tree-id1660 . 29) (undo-tree-id1661 . -10) (undo-tree-id1662 . -37) (undo-tree-id1663 . -37) (undo-tree-id1664 . -38) 483) nil (25772 49190 706432 66000) 0 nil])
([nil nil ((445 . 446) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 445) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -446) (undo-tree-id1625 . 1) (undo-tree-id1626 . -1) 445) nil (25772 49190 706355 852000) 0 nil])
([nil nil ((478 . 479) (t 25772 49190 749557 255000)) nil (25772 49195 458482 855000) 0 nil])
([nil nil ((403 . 405) (t 25772 49195 497370 76000)) nil (25772 49203 549959 136000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 402) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1)) nil (25772 49203 549952 286000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 492) (undo-tree-id1710 . -1) (t 25772 49203 597051 320000)) nil (25772 49205 781386 649000) 0 nil])
([nil nil ((#("matrix containing the layer's outputs at time
  step t for each instance in the mini-batch " 0 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 46 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 50 91 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 520) (undo-tree-id1712 . -90) (undo-tree-id1713 . -90) (undo-tree-id1714 . -90) (undo-tree-id1715 . -90) (undo-tree-id1716 . -91) (undo-tree-id1717 . -90) (undo-tree-id1718 . -5) (undo-tree-id1719 . -5) (undo-tree-id1720 . -5) (undo-tree-id1721 . -5) (undo-tree-id1722 . -5) (undo-tree-id1723 . -5) (undo-tree-id1724 . -5) (undo-tree-id1725 . -5) (undo-tree-id1726 . -16) (undo-tree-id1727 . -16) (undo-tree-id1728 . -16) (undo-tree-id1729 . -16) (undo-tree-id1730 . -16) (undo-tree-id1731 . -16) (undo-tree-id1732 . -16) (undo-tree-id1733 . -16) (undo-tree-id1734 . -20) (undo-tree-id1735 . -20) (undo-tree-id1736 . -20) (undo-tree-id1737 . -20) (undo-tree-id1738 . -20) (undo-tree-id1739 . -20) (undo-tree-id1740 . -20) (undo-tree-id1741 . -20) (undo-tree-id1742 . -28) (undo-tree-id1743 . -28) (undo-tree-id1744 . -28) (undo-tree-id1745 . -28) (undo-tree-id1746 . -28) (undo-tree-id1747 . -28) (undo-tree-id1748 . -28) (undo-tree-id1749 . -28) (undo-tree-id1750 . -36) (undo-tree-id1751 . -36) (undo-tree-id1752 . -36) (undo-tree-id1753 . -36) (undo-tree-id1754 . -36) (undo-tree-id1755 . -36) (undo-tree-id1756 . -36) (undo-tree-id1757 . -36) (undo-tree-id1758 . -39) (undo-tree-id1759 . -39) (undo-tree-id1760 . -39) (undo-tree-id1761 . -39) (undo-tree-id1762 . -39) (undo-tree-id1763 . -39) (undo-tree-id1764 . -39) (undo-tree-id1765 . -39) (undo-tree-id1766 . -44) (undo-tree-id1767 . -44) (undo-tree-id1768 . -44) (undo-tree-id1769 . -44) (undo-tree-id1770 . -44) (undo-tree-id1771 . -44) (undo-tree-id1772 . -44) (undo-tree-id1773 . -44) (undo-tree-id1774 . -51) (undo-tree-id1775 . -51) (undo-tree-id1776 . -51) (undo-tree-id1777 . -51) (undo-tree-id1778 . -51) (undo-tree-id1779 . -51) (undo-tree-id1780 . -51) (undo-tree-id1781 . -51) (undo-tree-id1782 . -53) (undo-tree-id1783 . -53) (undo-tree-id1784 . -53) (undo-tree-id1785 . -53) (undo-tree-id1786 . -53) (undo-tree-id1787 . -53) (undo-tree-id1788 . -53) (undo-tree-id1789 . -53) (undo-tree-id1790 . -57) (undo-tree-id1791 . -57) (undo-tree-id1792 . -57) (undo-tree-id1793 . -57) (undo-tree-id1794 . -57) (undo-tree-id1795 . -57) (undo-tree-id1796 . -57) (undo-tree-id1797 . -57) (undo-tree-id1798 . -62) (undo-tree-id1799 . -62) (undo-tree-id1800 . -62) (undo-tree-id1801 . -62) (undo-tree-id1802 . -62) (undo-tree-id1803 . -62) (undo-tree-id1804 . -62) (undo-tree-id1805 . -62) (undo-tree-id1806 . -71) (undo-tree-id1807 . -71) (undo-tree-id1808 . -71) (undo-tree-id1809 . -71) (undo-tree-id1810 . -71) (undo-tree-id1811 . -71) (undo-tree-id1812 . -71) (undo-tree-id1813 . -71) (undo-tree-id1814 . -74) (undo-tree-id1815 . -74) (undo-tree-id1816 . -74) (undo-tree-id1817 . -74) (undo-tree-id1818 . -74) (undo-tree-id1819 . -74) (undo-tree-id1820 . -74) (undo-tree-id1821 . -74) (undo-tree-id1822 . -78) (undo-tree-id1823 . -78) (undo-tree-id1824 . -78) (undo-tree-id1825 . -78) (undo-tree-id1826 . -78) (undo-tree-id1827 . -78) (undo-tree-id1828 . -78) (undo-tree-id1829 . -78) (undo-tree-id1830 . -83) (undo-tree-id1831 . -83) (undo-tree-id1832 . -83) (undo-tree-id1833 . -83) (undo-tree-id1834 . -83) (undo-tree-id1835 . -83) (undo-tree-id1836 . -83) (undo-tree-id1837 . -83) (undo-tree-id1838 . -84) (undo-tree-id1839 . -84) (undo-tree-id1840 . -84) (undo-tree-id1841 . -84) (undo-tree-id1842 . -84) (undo-tree-id1843 . -84) (undo-tree-id1844 . -84) (undo-tree-id1845 . -84) (undo-tree-id1846 . -89) (undo-tree-id1847 . -89) (undo-tree-id1848 . -89) (undo-tree-id1849 . -89) (undo-tree-id1850 . -89) (undo-tree-id1851 . -89) (undo-tree-id1852 . -89) (undo-tree-id1853 . -89) (undo-tree-id1854 . -90) (undo-tree-id1855 . -90) (undo-tree-id1856 . -90) (undo-tree-id1857 . -90) (undo-tree-id1858 . -90) (undo-tree-id1859 . -90) (undo-tree-id1860 . -90) (undo-tree-id1861 . -90) (undo-tree-id1862 . -90) (undo-tree-id1863 . -91) 610 (t 25772 49205 820963 922000)) nil (25772 49227 768918 343000) 0 nil])
([nil nil ((539 . 540) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 539) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -539) (undo-tree-id1711 . -1) 520) nil (25772 49227 768413 449000) 0 nil])
([nil nil ((567 . 568) (t 25772 49227 808102 670000)) nil (25772 49270 512648 756000) 0 nil])
([nil nil ((#("and n_neurons is the number of neurons)." 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 6 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 13 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 569) (undo-tree-id2480 . -39) (undo-tree-id2481 . -40) (undo-tree-id2482 . -40)) nil (25772 49270 512647 739000) 0 nil])
([nil nil ((492 . 572) (#("- 

- Y_(t) is an m × n_neurons (m is the number of instances in the mini-batch)" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 5 7 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 8 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 8 11 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 11 23 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 24 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 24 31 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 31 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 51 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 51 52 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 52 80 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 492) (undo-tree-id2068 . -80) (undo-tree-id2069 . -80) (undo-tree-id2070 . -32) (undo-tree-id2071 . -32) (undo-tree-id2072 . 48) (undo-tree-id2073 . -32) (undo-tree-id2074 . -32) (undo-tree-id2075 . -32) (undo-tree-id2076 . -32) (undo-tree-id2077 . -32) (undo-tree-id2078 . -32) (undo-tree-id2079 . -32) (undo-tree-id2080 . -32) (undo-tree-id2081 . -32) (undo-tree-id2082 . -32) (undo-tree-id2083 . -32) (undo-tree-id2084 . -32) (undo-tree-id2085 . -32) (undo-tree-id2086 . -32) (undo-tree-id2087 . -32) (undo-tree-id2088 . -32) (undo-tree-id2089 . -32) (undo-tree-id2090 . -32) (undo-tree-id2091 . -32) (undo-tree-id2092 . -32) (undo-tree-id2093 . -32) (undo-tree-id2094 . -32) (undo-tree-id2095 . -32) (undo-tree-id2096 . -32) (undo-tree-id2097 . -32) (undo-tree-id2098 . -32) (undo-tree-id2099 . -32) (undo-tree-id2100 . -32) (undo-tree-id2101 . -32) (undo-tree-id2102 . -32) (undo-tree-id2103 . -32) (undo-tree-id2104 . -32) (undo-tree-id2105 . -32) (undo-tree-id2106 . -32) (undo-tree-id2107 . -32) (undo-tree-id2108 . -32) (undo-tree-id2109 . -32) (undo-tree-id2110 . -32) (undo-tree-id2111 . -32) (undo-tree-id2112 . -32) (undo-tree-id2113 . -32) (undo-tree-id2114 . -32) (undo-tree-id2115 . -32) (undo-tree-id2116 . -32) (undo-tree-id2117 . -32) (undo-tree-id2118 . -32) (undo-tree-id2119 . -32) (undo-tree-id2120 . -32) (undo-tree-id2121 . -32) (undo-tree-id2122 . -32) (undo-tree-id2123 . -32) (undo-tree-id2124 . -32) (undo-tree-id2125 . -32) (undo-tree-id2126 . -32) (undo-tree-id2127 . -32) (undo-tree-id2128 . -32) (undo-tree-id2129 . -32) (undo-tree-id2130 . -32) (undo-tree-id2131 . -32) (undo-tree-id2132 . -32) (undo-tree-id2133 . -32) (undo-tree-id2134 . -32) (undo-tree-id2135 . -32) (undo-tree-id2136 . -32) (undo-tree-id2137 . -32) (undo-tree-id2138 . -32) (undo-tree-id2139 . -32) (undo-tree-id2140 . -32) (undo-tree-id2141 . -32) (undo-tree-id2142 . -32) (undo-tree-id2143 . -32) (undo-tree-id2144 . -32) (undo-tree-id2145 . -32) (undo-tree-id2146 . -32) (undo-tree-id2147 . -32) (undo-tree-id2148 . -32) (undo-tree-id2149 . -32) (undo-tree-id2150 . -32) (undo-tree-id2151 . -32) (undo-tree-id2152 . -32) (undo-tree-id2153 . -32) (undo-tree-id2154 . -32) (undo-tree-id2155 . -32) (undo-tree-id2156 . -32) (undo-tree-id2157 . -32) (undo-tree-id2158 . -32) (undo-tree-id2159 . -32) (undo-tree-id2160 . -32) (undo-tree-id2161 . -32) (undo-tree-id2162 . -32) (undo-tree-id2163 . -32) (undo-tree-id2164 . -32) (undo-tree-id2165 . -32) (undo-tree-id2166 . -32) (undo-tree-id2167 . -32) (undo-tree-id2168 . -32) (undo-tree-id2169 . -32) (undo-tree-id2170 . -32) (undo-tree-id2171 . -32) (undo-tree-id2172 . -32) (undo-tree-id2173 . -32) (undo-tree-id2174 . -32) (undo-tree-id2175 . -32) (undo-tree-id2176 . -32) (undo-tree-id2177 . -32) (undo-tree-id2178 . -32) (undo-tree-id2179 . -32) (undo-tree-id2180 . -32) (undo-tree-id2181 . -32) (undo-tree-id2182 . -32) (undo-tree-id2183 . -32) (undo-tree-id2184 . -32) (undo-tree-id2185 . -32) (undo-tree-id2186 . -32) (undo-tree-id2187 . -32) (undo-tree-id2188 . -32) (undo-tree-id2189 . -32) (undo-tree-id2190 . -32) (undo-tree-id2191 . -32) (undo-tree-id2192 . -32) (undo-tree-id2193 . -32) (undo-tree-id2194 . -32) (undo-tree-id2195 . -32) (undo-tree-id2196 . -32) (undo-tree-id2197 . -32) (undo-tree-id2198 . -32) (undo-tree-id2199 . -32) (undo-tree-id2200 . -32) (undo-tree-id2201 . -32) (undo-tree-id2202 . -32) (undo-tree-id2203 . -32) (undo-tree-id2204 . -32) (undo-tree-id2205 . -32) (undo-tree-id2206 . -32) (undo-tree-id2207 . -32) (undo-tree-id2208 . -32) (undo-tree-id2209 . -32) (undo-tree-id2210 . -32) (undo-tree-id2211 . -32) (undo-tree-id2212 . -32) (undo-tree-id2213 . -32) (undo-tree-id2214 . -32) (undo-tree-id2215 . -32) (undo-tree-id2216 . -32) (undo-tree-id2217 . -32) (undo-tree-id2218 . -32) (undo-tree-id2219 . -51) (undo-tree-id2220 . -80) (undo-tree-id2221 . -51) (undo-tree-id2222 . -51) (undo-tree-id2223 . -51) (undo-tree-id2224 . -51) (undo-tree-id2225 . -51) (undo-tree-id2226 . -51) (undo-tree-id2227 . -51) (undo-tree-id2228 . -51) (undo-tree-id2229 . -51) (undo-tree-id2230 . -51) (undo-tree-id2231 . -51) (undo-tree-id2232 . -51) (undo-tree-id2233 . -51) (undo-tree-id2234 . -51) (undo-tree-id2235 . -51) (undo-tree-id2236 . -51) (undo-tree-id2237 . -51) (undo-tree-id2238 . -51) (undo-tree-id2239 . -51) (undo-tree-id2240 . -51) (undo-tree-id2241 . -51) (undo-tree-id2242 . -51) (undo-tree-id2243 . -51) (undo-tree-id2244 . -51) (undo-tree-id2245 . -51) (undo-tree-id2246 . -51) (undo-tree-id2247 . -51) (undo-tree-id2248 . -51) (undo-tree-id2249 . -51) (undo-tree-id2250 . -51) (undo-tree-id2251 . -51) (undo-tree-id2252 . -51) (undo-tree-id2253 . -51) (undo-tree-id2254 . -51) (undo-tree-id2255 . -51) (undo-tree-id2256 . -51) (undo-tree-id2257 . -51) (undo-tree-id2258 . -51) (undo-tree-id2259 . -51) (undo-tree-id2260 . -51) (undo-tree-id2261 . -51) (undo-tree-id2262 . -51) (undo-tree-id2263 . -51) (undo-tree-id2264 . -51) (undo-tree-id2265 . -51) (undo-tree-id2266 . -51) (undo-tree-id2267 . -51) (undo-tree-id2268 . -51) (undo-tree-id2269 . -51) (undo-tree-id2270 . -51) (undo-tree-id2271 . -51) (undo-tree-id2272 . -51) (undo-tree-id2273 . -51) (undo-tree-id2274 . -51) (undo-tree-id2275 . -51) (undo-tree-id2276 . -51) (undo-tree-id2277 . -51) (undo-tree-id2278 . -51) (undo-tree-id2279 . -51) (undo-tree-id2280 . -51) (undo-tree-id2281 . -66) (undo-tree-id2282 . -66) (undo-tree-id2283 . -66) (undo-tree-id2284 . -66) (undo-tree-id2285 . -66) (undo-tree-id2286 . -66) (undo-tree-id2287 . -66) (undo-tree-id2288 . -66) (undo-tree-id2289 . -66) (undo-tree-id2290 . -66) (undo-tree-id2291 . -66) (undo-tree-id2292 . -66) (undo-tree-id2293 . -66) (undo-tree-id2294 . -66) (undo-tree-id2295 . -66) (undo-tree-id2296 . -66) (undo-tree-id2297 . -66) (undo-tree-id2298 . -66) (undo-tree-id2299 . -66) (undo-tree-id2300 . -66) (undo-tree-id2301 . -66) (undo-tree-id2302 . -66) (undo-tree-id2303 . -78) (undo-tree-id2304 . -78) (undo-tree-id2305 . -78) (undo-tree-id2306 . -78) (undo-tree-id2307 . -78) (undo-tree-id2308 . -78) (undo-tree-id2309 . -78) (undo-tree-id2310 . -78) (undo-tree-id2311 . -78) (undo-tree-id2312 . -78) (undo-tree-id2313 . -78) (undo-tree-id2314 . -78) (undo-tree-id2315 . -78) (undo-tree-id2316 . -78) (undo-tree-id2317 . -78) (undo-tree-id2318 . -79) (undo-tree-id2319 . -79) (undo-tree-id2320 . -79) (undo-tree-id2321 . -79) (undo-tree-id2322 . -79) (undo-tree-id2323 . -79) (undo-tree-id2324 . -79) (undo-tree-id2325 . -79) (undo-tree-id2326 . -79) (undo-tree-id2327 . -79) (undo-tree-id2328 . -79) (undo-tree-id2329 . -79) (undo-tree-id2330 . -79) (undo-tree-id2331 . -79) (undo-tree-id2332 . -79) (undo-tree-id2333 . -79) (undo-tree-id2334 . -79) (undo-tree-id2335 . -79) (undo-tree-id2336 . -79) (undo-tree-id2337 . -79) (undo-tree-id2338 . -79) (undo-tree-id2339 . -79) (undo-tree-id2340 . -79) (undo-tree-id2341 . -79) (undo-tree-id2342 . -80) (undo-tree-id2343 . -80) (undo-tree-id2344 . -80) (undo-tree-id2345 . -80) (undo-tree-id2346 . -80) (undo-tree-id2347 . -80) (undo-tree-id2348 . -80) (undo-tree-id2349 . -80) (undo-tree-id2350 . -80) (undo-tree-id2351 . -80) (undo-tree-id2352 . -80) (undo-tree-id2353 . -80) (undo-tree-id2354 . -80) (undo-tree-id2355 . -80) (undo-tree-id2356 . -80) (undo-tree-id2357 . -80) (undo-tree-id2358 . -80) (undo-tree-id2359 . -80) (undo-tree-id2360 . -80) (undo-tree-id2361 . -80) (undo-tree-id2362 . -80) (undo-tree-id2363 . -80) (undo-tree-id2364 . -80) (undo-tree-id2365 . -80) (undo-tree-id2366 . -80) (undo-tree-id2367 . -80) (undo-tree-id2368 . -80) (undo-tree-id2369 . -80) (undo-tree-id2370 . -80) (undo-tree-id2371 . -80) (undo-tree-id2372 . -80) (undo-tree-id2373 . -80) (undo-tree-id2374 . -80) (undo-tree-id2375 . -80) (undo-tree-id2376 . -80) (undo-tree-id2377 . -80) (undo-tree-id2378 . -80) (undo-tree-id2379 . -79) (undo-tree-id2380 . -79) (undo-tree-id2381 . -79) (undo-tree-id2382 . -79) (undo-tree-id2383 . -79) (undo-tree-id2384 . -79) (undo-tree-id2385 . -79) (undo-tree-id2386 . -79) (undo-tree-id2387 . -79) (undo-tree-id2388 . -79) (undo-tree-id2389 . -79) (undo-tree-id2390 . -79) (undo-tree-id2391 . -79) (undo-tree-id2392 . -79) (undo-tree-id2393 . -79) (undo-tree-id2394 . -79) (undo-tree-id2395 . -79) (undo-tree-id2396 . -79) (undo-tree-id2397 . -79) (undo-tree-id2398 . -80) (undo-tree-id2399 . -80) (undo-tree-id2400 . -80) (undo-tree-id2401 . -80) (undo-tree-id2402 . -80) (undo-tree-id2403 . -80) (undo-tree-id2404 . -80) (undo-tree-id2405 . -80) (undo-tree-id2406 . -80) (undo-tree-id2407 . -80) (undo-tree-id2408 . -80) (undo-tree-id2409 . -80) (undo-tree-id2410 . -80) (undo-tree-id2411 . -80) (undo-tree-id2412 . -80) (undo-tree-id2413 . -80) (undo-tree-id2414 . -80) (undo-tree-id2415 . -80) (undo-tree-id2416 . -80) (undo-tree-id2417 . -80) (undo-tree-id2418 . -80) (undo-tree-id2419 . -80) (undo-tree-id2420 . -80) (undo-tree-id2421 . -80) (undo-tree-id2422 . -80) (undo-tree-id2423 . -80) (undo-tree-id2424 . -80) (undo-tree-id2425 . -80) (undo-tree-id2426 . -80) (undo-tree-id2427 . -80) (undo-tree-id2428 . -80) (undo-tree-id2429 . -80) (undo-tree-id2430 . -80) (undo-tree-id2431 . -80) (undo-tree-id2432 . -80) (undo-tree-id2433 . -80) (undo-tree-id2434 . -80) (undo-tree-id2435 . -80) (undo-tree-id2436 . -80) (undo-tree-id2437 . -80) (undo-tree-id2438 . -80) (undo-tree-id2439 . -80) (undo-tree-id2440 . -80) (undo-tree-id2441 . -4) (492 . 496) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 568) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . 1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) 569) nil (25772 49270 512632 533000) 0 nil])
([nil nil ((#("- 
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 570) (undo-tree-id2025 . -2) (undo-tree-id2026 . 1) (undo-tree-id2027 . 1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -2) (undo-tree-id2030 . -2) (undo-tree-id2031 . -2) (undo-tree-id2032 . -2) (undo-tree-id2033 . -2) (undo-tree-id2034 . -2) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) (undo-tree-id2037 . -2) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -3) 571) nil (25772 49270 512316 920000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 570) (undo-tree-id2022 . 1) (undo-tree-id2023 . 1) (undo-tree-id2024 . -1)) nil (25772 49270 512199 751000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 569) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1)) nil (25772 49270 512194 541000) 0 nil])
([nil nil ((#("matrix containing the inputs for all instances" 0 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 596) (undo-tree-id1945 . -45) (undo-tree-id1946 . -46) (undo-tree-id1947 . -46)) nil (25772 49270 512141 630000) 0 nil])
([nil nil ((#("  (n_inputs is the number of input features).
" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 5 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 11 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 597) (undo-tree-id1924 . -45) (undo-tree-id1925 . -24) (undo-tree-id1926 . -24) (undo-tree-id1927 . -24) (undo-tree-id1928 . -24) (undo-tree-id1929 . -24) (undo-tree-id1930 . -24) (undo-tree-id1931 . -24) (undo-tree-id1932 . -24) (undo-tree-id1933 . -24) (undo-tree-id1934 . -24) (undo-tree-id1935 . -24) (undo-tree-id1936 . -24) (undo-tree-id1937 . -24) (undo-tree-id1938 . -24) (undo-tree-id1939 . -24) (undo-tree-id1940 . -24) (undo-tree-id1941 . -24) (undo-tree-id1942 . -24) (undo-tree-id1943 . -24) (undo-tree-id1944 . -46) 621) nil (25772 49270 512137 778000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 597) (undo-tree-id1923 . -1)) nil (25772 49270 512122 486000) 0 nil])
([nil nil ((#("matrix containing the connection" 0 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 630) (undo-tree-id1920 . -31) (undo-tree-id1921 . -32) (undo-tree-id1922 . -32)) nil (25772 49270 512120 848000) 0 nil])
([nil nil ((#("  weights for the inputs of the current time step.
" 0 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 631) (undo-tree-id1899 . -50) (undo-tree-id1900 . -24) (undo-tree-id1901 . -24) (undo-tree-id1902 . -24) (undo-tree-id1903 . -24) (undo-tree-id1904 . -24) (undo-tree-id1905 . -24) (undo-tree-id1906 . -24) (undo-tree-id1907 . -24) (undo-tree-id1908 . -24) (undo-tree-id1909 . -24) (undo-tree-id1910 . -24) (undo-tree-id1911 . -24) (undo-tree-id1912 . -24) (undo-tree-id1913 . -24) (undo-tree-id1914 . -24) (undo-tree-id1915 . -24) (undo-tree-id1916 . -24) (undo-tree-id1917 . -24) (undo-tree-id1918 . -24) (undo-tree-id1919 . -51) 655) nil (25772 49270 512117 99000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 631) (undo-tree-id1898 . -1)) nil (25772 49270 512101 319000) 0 nil])
([nil nil ((#("matrix containing the connection" 0 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 665) (undo-tree-id1895 . -31) (undo-tree-id1896 . -32) (undo-tree-id1897 . -32)) nil (25772 49270 512099 545000) 0 nil])
([nil nil ((#("  weights for the outputs of the previous time step. 
" 0 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 666) (undo-tree-id1874 . -53) (undo-tree-id1875 . -2) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) (undo-tree-id1878 . -2) (undo-tree-id1879 . -2) (undo-tree-id1880 . -2) (undo-tree-id1881 . -2) (undo-tree-id1882 . -2) (undo-tree-id1883 . -2) (undo-tree-id1884 . -2) (undo-tree-id1885 . -2) (undo-tree-id1886 . -2) (undo-tree-id1887 . -2) (undo-tree-id1888 . -2) (undo-tree-id1889 . -2) (undo-tree-id1890 . -2) (undo-tree-id1891 . -2) (undo-tree-id1892 . -2) (undo-tree-id1893 . -2) (undo-tree-id1894 . -54) 668) nil (25772 49270 512095 660000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 666) (undo-tree-id1873 . -1)) nil (25772 49270 512079 513000) 0 nil])
([nil nil ((#("containing each neuron's bias term." 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 700) (undo-tree-id1870 . -34) (undo-tree-id1871 . -35) (undo-tree-id1872 . -35)) nil (25772 49270 512077 598000) 0 nil])
([nil nil ((#("- The weight matrices W_x and W_y are often concatenated vertically
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 24 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 25 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 32 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 33 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 701) (undo-tree-id1868 . -67) (undo-tree-id1869 . -68)) nil (25772 49270 512073 794000) 0 nil])
([nil nil ((#("  into a single weight matrix W of shape 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 701) (undo-tree-id1866 . -41) (undo-tree-id1867 . -42)) nil (25772 49270 512068 826000) 0 nil])
([nil nil ((#("   (n_inputs + n_neurons) × n_neurons .
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) invisible t) 6 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) display ((raise -0.3) (height 0.7))) 12 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) invisible t) 17 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) display ((raise -0.3) (height 0.7))) 24 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 29 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) invisible t) 30 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) display ((raise -0.3) (height 0.7))) 37 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 701) (undo-tree-id1864 . -39) (undo-tree-id1865 . -40)) nil (25772 49276 199586 562000) 0 nil])
([nil nil ((#("- [X_(t) Y_(t–1)] represents the horizontal concatenation
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 5 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 8 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 11 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 16 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 701) (undo-tree-id2488 . -57) (undo-tree-id2489 . -58) (t 25772 49270 554442 233000)) nil (25772 49279 753417 818000) 0 nil] [nil nil ((#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226]))) . 701) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (t 25772 49270 554442 233000)) ((701 . 702)) (25772 49276 199159 584000) 0 nil])
([nil nil ((#("   of the matrices X_(t) and Y_(t-1).
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 20 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) invisible t) 21 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) display ((raise -0.3) (height 0.7))) 24 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 30 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) invisible t) 31 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) display ((raise -0.3) (height 0.7))) 36 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 701) (undo-tree-id2486 . -37) (undo-tree-id2487 . -38)) nil (25772 49279 753413 739000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 701) (undo-tree-id2485 . -1)) nil (25772 49279 753367 52000) 0 nil])
([nil nil ((736 . 738) (#("=" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -736) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) 737 (731 . 737) (#("@" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -731) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (#("_" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t)) . -732) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) 733 (725 . 733) (723 . 725) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -723) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) 724 (720 . 724) (#("@" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -720) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) 721 (719 . 721) (716 . 719) (#("0" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -716) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) 717 (716 . 717) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -716) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . 1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -717) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) 718 (715 . 718) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7)))) . -715) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . 1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -716) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) 717 (712 . 717) (#("{" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -712) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) 713 (709 . 713) (t 25772 49279 794085 638000)) nil (25772 49344 732920 529000) 0 nil])
([nil nil ((#("= is a function of X_(t) and Y_(t-1), which is a function of X_(t–1)" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display nil) 4 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 21 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 24 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 30 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 31 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 36 62 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 62 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 63 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7)))) . 736) (undo-tree-id2512 . -67) (undo-tree-id2513 . 66) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -2) (undo-tree-id2524 . -2) (undo-tree-id2525 . -2) (undo-tree-id2526 . -2) (undo-tree-id2527 . -2) (undo-tree-id2528 . -2) (undo-tree-id2529 . -2) (undo-tree-id2530 . -2) (undo-tree-id2531 . -2) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -68) (undo-tree-id2567 . -68)) nil (25772 49344 732335 8000) 0 nil])
([nil nil ((#("  and Y_(t–2) , and so on. 
" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 8 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 13 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 737) (undo-tree-id2491 . -27) (undo-tree-id2492 . -2) (undo-tree-id2493 . -2) (undo-tree-id2494 . -2) (undo-tree-id2495 . -2) (undo-tree-id2496 . -2) (undo-tree-id2497 . -2) (undo-tree-id2498 . -2) (undo-tree-id2499 . -2) (undo-tree-id2500 . -2) (undo-tree-id2501 . -2) (undo-tree-id2502 . -2) (undo-tree-id2503 . -2) (undo-tree-id2504 . -2) (undo-tree-id2505 . -2) (undo-tree-id2506 . -2) (undo-tree-id2507 . -2) (undo-tree-id2508 . -2) (undo-tree-id2509 . -2) (undo-tree-id2510 . -2) (undo-tree-id2511 . -28) 739) nil (25772 49344 732299 635000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 737) (undo-tree-id2490 . -1)) nil (25772 49344 732280 837000) 0 nil])
([nil nil ((#("- This makes Y_(t) a function of all the inputs since time t = 0.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 15 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 18 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 737) (undo-tree-id2748 . -65) (undo-tree-id2749 . -2) (undo-tree-id2750 . -2) (undo-tree-id2751 . -2) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) (undo-tree-id2755 . -2) (undo-tree-id2756 . -2) (undo-tree-id2757 . -2) (undo-tree-id2758 . -2) (undo-tree-id2759 . -2) (undo-tree-id2760 . -2) (undo-tree-id2761 . -66) 739 (t 25772 49344 775599 255000)) nil (25772 49360 418569 649000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 737) (undo-tree-id2747 . -1)) nil (25772 49360 418559 864000) 0 nil])
([nil nil ((#("- At the first time step, t = 0, there are no previous outputs, so they are
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 737) (undo-tree-id2745 . -75) (undo-tree-id2746 . -76)) nil (25772 49360 418557 10000) 0 nil])
([nil nil ((#("  typically assumed to be all zeros.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 737) (undo-tree-id2743 . -36) (undo-tree-id2744 . -37)) nil (25772 49360 418549 929000) 0 nil])
([nil nil ((#("A single recurrent neuron, or a layer of recurrent neurons, is a very basic
cell, capable of learning only short patterns. A cell's state at time step t,
denoted h_(t), is a function of some inputs at that time step and its state at
the previous time step: " 0 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 76 154 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 154 163 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 163 164 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 164 167 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 167 233 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 233 255 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 255 257 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 982) (undo-tree-id4175 . -256) (undo-tree-id4176 . -256) (undo-tree-id4177 . -256) (undo-tree-id4178 . -256) (undo-tree-id4179 . -257) (undo-tree-id4180 . -256) (undo-tree-id4181 . -7) (undo-tree-id4182 . -7) (undo-tree-id4183 . -7) (undo-tree-id4184 . -7) (undo-tree-id4185 . -7) (undo-tree-id4186 . -7) (undo-tree-id4187 . -7) (undo-tree-id4188 . -7) (undo-tree-id4189 . -17) (undo-tree-id4190 . -17) (undo-tree-id4191 . -17) (undo-tree-id4192 . -17) (undo-tree-id4193 . -17) (undo-tree-id4194 . -17) (undo-tree-id4195 . -17) (undo-tree-id4196 . -17) (undo-tree-id4197 . -24) (undo-tree-id4198 . -24) (undo-tree-id4199 . -24) (undo-tree-id4200 . -24) (undo-tree-id4201 . -24) (undo-tree-id4202 . -24) (undo-tree-id4203 . -24) (undo-tree-id4204 . -24) (undo-tree-id4205 . -25) (undo-tree-id4206 . -25) (undo-tree-id4207 . -25) (undo-tree-id4208 . -25) (undo-tree-id4209 . -25) (undo-tree-id4210 . -25) (undo-tree-id4211 . -25) (undo-tree-id4212 . -25) (undo-tree-id4213 . -28) (undo-tree-id4214 . -28) (undo-tree-id4215 . -28) (undo-tree-id4216 . -28) (undo-tree-id4217 . -28) (undo-tree-id4218 . -28) (undo-tree-id4219 . -28) (undo-tree-id4220 . -28) (undo-tree-id4221 . -30) (undo-tree-id4222 . -30) (undo-tree-id4223 . -30) (undo-tree-id4224 . -30) (undo-tree-id4225 . -30) (undo-tree-id4226 . -30) (undo-tree-id4227 . -30) (undo-tree-id4228 . -30) (undo-tree-id4229 . -36) (undo-tree-id4230 . -36) (undo-tree-id4231 . -36) (undo-tree-id4232 . -36) (undo-tree-id4233 . -36) (undo-tree-id4234 . -36) (undo-tree-id4235 . -36) (undo-tree-id4236 . -36) (undo-tree-id4237 . -39) (undo-tree-id4238 . -39) (undo-tree-id4239 . -39) (undo-tree-id4240 . -39) (undo-tree-id4241 . -39) (undo-tree-id4242 . -39) (undo-tree-id4243 . -39) (undo-tree-id4244 . -39) (undo-tree-id4245 . -49) (undo-tree-id4246 . -49) (undo-tree-id4247 . -49) (undo-tree-id4248 . -49) (undo-tree-id4249 . -49) (undo-tree-id4250 . -49) (undo-tree-id4251 . -49) (undo-tree-id4252 . -49) (undo-tree-id4253 . -57) (undo-tree-id4254 . -57) (undo-tree-id4255 . -57) (undo-tree-id4256 . -57) (undo-tree-id4257 . -57) (undo-tree-id4258 . -57) (undo-tree-id4259 . -57) (undo-tree-id4260 . -57) (undo-tree-id4261 . -58) (undo-tree-id4262 . -58) (undo-tree-id4263 . -58) (undo-tree-id4264 . -58) (undo-tree-id4265 . -58) (undo-tree-id4266 . -58) (undo-tree-id4267 . -58) (undo-tree-id4268 . -58) (undo-tree-id4269 . -61) (undo-tree-id4270 . -61) (undo-tree-id4271 . -61) (undo-tree-id4272 . -61) (undo-tree-id4273 . -61) (undo-tree-id4274 . -61) (undo-tree-id4275 . -61) (undo-tree-id4276 . -61) (undo-tree-id4277 . -63) (undo-tree-id4278 . -63) (undo-tree-id4279 . -63) (undo-tree-id4280 . -63) (undo-tree-id4281 . -63) (undo-tree-id4282 . -63) (undo-tree-id4283 . -63) (undo-tree-id4284 . -63) (undo-tree-id4285 . -68) (undo-tree-id4286 . -68) (undo-tree-id4287 . -68) (undo-tree-id4288 . -68) (undo-tree-id4289 . -68) (undo-tree-id4290 . -68) (undo-tree-id4291 . -68) (undo-tree-id4292 . -68) (undo-tree-id4293 . -74) (undo-tree-id4294 . -74) (undo-tree-id4295 . -74) (undo-tree-id4296 . -74) (undo-tree-id4297 . -74) (undo-tree-id4298 . -74) (undo-tree-id4299 . -74) (undo-tree-id4300 . -74) (undo-tree-id4301 . -79) (undo-tree-id4302 . -79) (undo-tree-id4303 . -79) (undo-tree-id4304 . -79) (undo-tree-id4305 . -79) (undo-tree-id4306 . -79) (undo-tree-id4307 . -79) (undo-tree-id4308 . -79) (undo-tree-id4309 . -80) (undo-tree-id4310 . -80) (undo-tree-id4311 . -80) (undo-tree-id4312 . -80) (undo-tree-id4313 . -80) (undo-tree-id4314 . -80) (undo-tree-id4315 . -80) (undo-tree-id4316 . -80) (undo-tree-id4317 . -88) (undo-tree-id4318 . -88) (undo-tree-id4319 . -88) (undo-tree-id4320 . -88) (undo-tree-id4321 . -88) (undo-tree-id4322 . -88) (undo-tree-id4323 . -88) (undo-tree-id4324 . -88) (undo-tree-id4325 . -91) (undo-tree-id4326 . -91) (undo-tree-id4327 . -91) (undo-tree-id4328 . -91) (undo-tree-id4329 . -91) (undo-tree-id4330 . -91) (undo-tree-id4331 . -91) (undo-tree-id4332 . -91) (undo-tree-id4333 . -100) (undo-tree-id4334 . -100) (undo-tree-id4335 . -100) (undo-tree-id4336 . -100) (undo-tree-id4337 . -100) (undo-tree-id4338 . -100) (undo-tree-id4339 . -100) (undo-tree-id4340 . -100) (undo-tree-id4341 . -105) (undo-tree-id4342 . -105) (undo-tree-id4343 . -105) (undo-tree-id4344 . -105) (undo-tree-id4345 . -105) (undo-tree-id4346 . -105) (undo-tree-id4347 . -105) (undo-tree-id4348 . -105) (undo-tree-id4349 . -111) (undo-tree-id4350 . -111) (undo-tree-id4351 . -111) (undo-tree-id4352 . -111) (undo-tree-id4353 . -111) (undo-tree-id4354 . -111) (undo-tree-id4355 . -111) (undo-tree-id4356 . -111) (undo-tree-id4357 . -120) (undo-tree-id4358 . -120) (undo-tree-id4359 . -120) (undo-tree-id4360 . -120) (undo-tree-id4361 . -120) (undo-tree-id4362 . -120) (undo-tree-id4363 . -120) (undo-tree-id4364 . -120) (undo-tree-id4365 . -121) (undo-tree-id4366 . -121) (undo-tree-id4367 . -121) (undo-tree-id4368 . -121) (undo-tree-id4369 . -121) (undo-tree-id4370 . -121) (undo-tree-id4371 . -121) (undo-tree-id4372 . -121) (undo-tree-id4373 . -123) (undo-tree-id4374 . -123) (undo-tree-id4375 . -123) (undo-tree-id4376 . -123) (undo-tree-id4377 . -123) (undo-tree-id4378 . -123) (undo-tree-id4379 . -123) (undo-tree-id4380 . -123) (undo-tree-id4381 . -130) (undo-tree-id4382 . -130) (undo-tree-id4383 . -130) (undo-tree-id4384 . -130) (undo-tree-id4385 . -130) (undo-tree-id4386 . -130) (undo-tree-id4387 . -130) (undo-tree-id4388 . -130) (undo-tree-id4389 . -136) (undo-tree-id4390 . -136) (undo-tree-id4391 . -136) (undo-tree-id4392 . -136) (undo-tree-id4393 . -136) (undo-tree-id4394 . -136) (undo-tree-id4395 . -136) (undo-tree-id4396 . -136) (undo-tree-id4397 . -139) (undo-tree-id4398 . -139) (undo-tree-id4399 . -139) (undo-tree-id4400 . -139) (undo-tree-id4401 . -139) (undo-tree-id4402 . -139) (undo-tree-id4403 . -139) (undo-tree-id4404 . -139) (undo-tree-id4405 . -144) (undo-tree-id4406 . -144) (undo-tree-id4407 . -144) (undo-tree-id4408 . -144) (undo-tree-id4409 . -144) (undo-tree-id4410 . -144) (undo-tree-id4411 . -144) (undo-tree-id4412 . -144) (undo-tree-id4413 . -149) (undo-tree-id4414 . -149) (undo-tree-id4415 . -149) (undo-tree-id4416 . -149) (undo-tree-id4417 . -149) (undo-tree-id4418 . -149) (undo-tree-id4419 . -149) (undo-tree-id4420 . -149) (undo-tree-id4421 . -151) (undo-tree-id4422 . -151) (undo-tree-id4423 . -151) (undo-tree-id4424 . -151) (undo-tree-id4425 . -151) (undo-tree-id4426 . -151) (undo-tree-id4427 . -151) (undo-tree-id4428 . -151) (undo-tree-id4429 . -152) (undo-tree-id4430 . -152) (undo-tree-id4431 . -152) (undo-tree-id4432 . -152) (undo-tree-id4433 . -152) (undo-tree-id4434 . -152) (undo-tree-id4435 . -152) (undo-tree-id4436 . -152) (undo-tree-id4437 . -160) (undo-tree-id4438 . -160) (undo-tree-id4439 . -160) (undo-tree-id4440 . -160) (undo-tree-id4441 . -160) (undo-tree-id4442 . -160) (undo-tree-id4443 . -160) (undo-tree-id4444 . -160) (undo-tree-id4445 . -162) (undo-tree-id4446 . -162) (undo-tree-id4447 . -162) (undo-tree-id4448 . -162) (undo-tree-id4449 . -162) (undo-tree-id4450 . -162) (undo-tree-id4451 . -162) (undo-tree-id4452 . -162) (undo-tree-id4453 . -164) (undo-tree-id4454 . -164) (undo-tree-id4455 . -164) (undo-tree-id4456 . -164) (undo-tree-id4457 . -164) (undo-tree-id4458 . -164) (undo-tree-id4459 . -164) (undo-tree-id4460 . -164) (undo-tree-id4461 . -164) (undo-tree-id4462 . -164) (undo-tree-id4463 . -164) (undo-tree-id4464 . -164) (undo-tree-id4465 . -164) (undo-tree-id4466 . -164) (undo-tree-id4467 . -164) (undo-tree-id4468 . -165) (undo-tree-id4469 . -165) (undo-tree-id4470 . -165) (undo-tree-id4471 . -165) (undo-tree-id4472 . -165) (undo-tree-id4473 . -165) (undo-tree-id4474 . -165) (undo-tree-id4475 . -165) (undo-tree-id4476 . -165) (undo-tree-id4477 . -165) (undo-tree-id4478 . -165) (undo-tree-id4479 . -165) (undo-tree-id4480 . -165) (undo-tree-id4481 . -165) (undo-tree-id4482 . -165) (undo-tree-id4483 . -165) (undo-tree-id4484 . -165) (undo-tree-id4485 . -165) (undo-tree-id4486 . -165) (undo-tree-id4487 . -165) (undo-tree-id4488 . -165) (undo-tree-id4489 . -165) (undo-tree-id4490 . -242) (undo-tree-id4491 . -242) (undo-tree-id4492 . -242) (undo-tree-id4493 . -242) (undo-tree-id4494 . -242) (undo-tree-id4495 . -242) (undo-tree-id4496 . -242) (undo-tree-id4497 . -242) (undo-tree-id4498 . -244) (undo-tree-id4499 . -244) (undo-tree-id4500 . -244) (undo-tree-id4501 . -244) (undo-tree-id4502 . -244) (undo-tree-id4503 . -244) (undo-tree-id4504 . -244) (undo-tree-id4505 . -244) (undo-tree-id4506 . -249) (undo-tree-id4507 . -249) (undo-tree-id4508 . -249) (undo-tree-id4509 . -249) (undo-tree-id4510 . -249) (undo-tree-id4511 . -249) (undo-tree-id4512 . -249) (undo-tree-id4513 . -249) (undo-tree-id4514 . -254) (undo-tree-id4515 . -254) (undo-tree-id4516 . -254) (undo-tree-id4517 . -254) (undo-tree-id4518 . -254) (undo-tree-id4519 . -254) (undo-tree-id4520 . -254) (undo-tree-id4521 . -254) (undo-tree-id4522 . -255) (undo-tree-id4523 . -255) (undo-tree-id4524 . -255) (undo-tree-id4525 . -255) (undo-tree-id4526 . -255) (undo-tree-id4527 . -255) (undo-tree-id4528 . -255) (undo-tree-id4529 . -255) (undo-tree-id4530 . -256) (undo-tree-id4531 . -256) (undo-tree-id4532 . -256) (undo-tree-id4533 . -256) (undo-tree-id4534 . -256) (undo-tree-id4535 . -256) (undo-tree-id4536 . -256) (undo-tree-id4537 . -256) (undo-tree-id4538 . -256) (undo-tree-id4539 . -257) 1238 (t 25772 49360 455004 630000)) nil (25772 49393 585438 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 981) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1)) nil (25772 49393 585197 633000) 0 nil])
([nil nil ((753 . 755)) nil (25772 49393 584962 17000) 0 nil])
([nil nil ((981 . 982) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 981) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -982) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (959 . 960) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -959) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (887 . 888) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -887) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (834 . 835) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -834) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) 755) nil (25772 49393 584920 985000) 0 nil])
([nil nil ((753 . 1010) (#("- it has a form of memory. A part of a neural network that preserves some state across time steps is called a memory cell. h_(t) = f(h_(t–1), x_(t)).
- The output of a recurrent neuron at time step t is a function of all the inputs from previous time steps," 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 28 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 28 29 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 29 100 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 100 101 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 101 122 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 122 123 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 123 124 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 124 125 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 125 128 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 128 134 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 134 135 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 135 140 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 140 143 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 143 144 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 144 147 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 147 149 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 149 150 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 150 151 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 151 152 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 152 231 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 231 232 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 232 257 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 753) (undo-tree-id4542 . 105) (undo-tree-id4543 . -257) (undo-tree-id4544 . -257) (undo-tree-id4545 . -257) (undo-tree-id4546 . -257) (undo-tree-id4547 . -231) (undo-tree-id4548 . -231) (undo-tree-id4549 . -231) (undo-tree-id4550 . -231) (undo-tree-id4551 . -231) (undo-tree-id4552 . -231) (undo-tree-id4553 . -231) (undo-tree-id4554 . -231) (undo-tree-id4555 . -257) (undo-tree-id4556 . -257) (undo-tree-id4557 . -257) (undo-tree-id4558 . -257) (undo-tree-id4559 . -257) (undo-tree-id4560 . -257) (undo-tree-id4561 . -257) (undo-tree-id4562 . -257) (undo-tree-id4563 . -257) (undo-tree-id4564 . -257) (undo-tree-id4565 . -257) (undo-tree-id4566 . -257) (undo-tree-id4567 . -257) (undo-tree-id4568 . -257) (undo-tree-id4569 . -257) (undo-tree-id4570 . -257) (undo-tree-id4571 . -257) (undo-tree-id4572 . -257) (undo-tree-id4573 . -257) (undo-tree-id4574 . -257) (undo-tree-id4575 . -257) (undo-tree-id4576 . -257) (undo-tree-id4577 . -257) (undo-tree-id4578 . -257) (undo-tree-id4579 . -257) (undo-tree-id4580 . -257) (undo-tree-id4581 . -257) (undo-tree-id4582 . -257) (undo-tree-id4583 . -257) (undo-tree-id4584 . -257) (undo-tree-id4585 . -257) (undo-tree-id4586 . -257) (undo-tree-id4587 . -257) (undo-tree-id4588 . -257) (undo-tree-id4589 . -257) (undo-tree-id4590 . -257) (undo-tree-id4591 . -257) (undo-tree-id4592 . -257) (undo-tree-id4593 . -257) (undo-tree-id4594 . -231) (undo-tree-id4595 . -231) (undo-tree-id4596 . -231) (undo-tree-id4597 . -231) (undo-tree-id4598 . -231) (undo-tree-id4599 . -231) (undo-tree-id4600 . -231) (undo-tree-id4601 . -231) (undo-tree-id4602 . -231) (undo-tree-id4603 . -231) (undo-tree-id4604 . -231) (undo-tree-id4605 . -231) (undo-tree-id4606 . -231) (undo-tree-id4607 . -231) (undo-tree-id4608 . -231) (undo-tree-id4609 . -231) (undo-tree-id4610 . -257) (undo-tree-id4611 . -257) (undo-tree-id4612 . -257) (undo-tree-id4613 . -257) (undo-tree-id4614 . -257) (undo-tree-id4615 . -257) (undo-tree-id4616 . -257) (undo-tree-id4617 . -257) (undo-tree-id4618 . -257) (undo-tree-id4619 . -257) (undo-tree-id4620 . -257) (undo-tree-id4621 . -257) (undo-tree-id4622 . -257) (undo-tree-id4623 . -257) (undo-tree-id4624 . -257) (undo-tree-id4625 . -257) (undo-tree-id4626 . -257) (undo-tree-id4627 . -257) (undo-tree-id4628 . -257) (undo-tree-id4629 . -257) (undo-tree-id4630 . -257) (undo-tree-id4631 . -257) (undo-tree-id4632 . -257) (undo-tree-id4633 . -257) (undo-tree-id4634 . -257) (undo-tree-id4635 . -257) (undo-tree-id4636 . -257) (undo-tree-id4637 . -257) (undo-tree-id4638 . -257) (undo-tree-id4639 . -257) (undo-tree-id4640 . -257) (undo-tree-id4641 . -257) (undo-tree-id4642 . -257) (undo-tree-id4643 . -257) (undo-tree-id4644 . -257) (undo-tree-id4645 . -257) (undo-tree-id4646 . -257) (undo-tree-id4647 . -257) (undo-tree-id4648 . -257) (undo-tree-id4649 . -257) (undo-tree-id4650 . -257) (undo-tree-id4651 . -257) (undo-tree-id4652 . -257) (undo-tree-id4653 . -257) (undo-tree-id4654 . -257) (undo-tree-id4655 . -257) (undo-tree-id4656 . -257) (undo-tree-id4657 . -257) (undo-tree-id4658 . -257) (undo-tree-id4659 . -257) (undo-tree-id4660 . -257) (undo-tree-id4661 . -257) (undo-tree-id4662 . -257) (undo-tree-id4663 . -257) (undo-tree-id4664 . -257) (undo-tree-id4665 . -257) (undo-tree-id4666 . -257) (undo-tree-id4667 . -257) (undo-tree-id4668 . -257) (undo-tree-id4669 . -257) (undo-tree-id4670 . -257) (undo-tree-id4671 . -257) (undo-tree-id4672 . -257) (undo-tree-id4673 . -257) (undo-tree-id4674 . -257) (undo-tree-id4675 . -257) (undo-tree-id4676 . -257) (undo-tree-id4677 . -257) (undo-tree-id4678 . -257) (undo-tree-id4679 . -257) (undo-tree-id4680 . -257) (undo-tree-id4681 . -257) (undo-tree-id4682 . -257) (undo-tree-id4683 . -257) (undo-tree-id4684 . -257) (undo-tree-id4685 . -257) (undo-tree-id4686 . -257) (undo-tree-id4687 . -257) (undo-tree-id4688 . -257) (undo-tree-id4689 . -257) (undo-tree-id4690 . -257) (undo-tree-id4691 . -257) (undo-tree-id4692 . -257) (undo-tree-id4693 . -257) (undo-tree-id4694 . -257) (undo-tree-id4695 . -257) (undo-tree-id4696 . -257) (undo-tree-id4697 . -257) (undo-tree-id4698 . -257) (undo-tree-id4699 . -257) (undo-tree-id4700 . -257) (undo-tree-id4701 . -257) (undo-tree-id4702 . -257) (undo-tree-id4703 . -257) (undo-tree-id4704 . -257) (undo-tree-id4705 . -257) (undo-tree-id4706 . -257) (undo-tree-id4707 . -257) (undo-tree-id4708 . -257) (undo-tree-id4709 . -257) (undo-tree-id4710 . -257) (undo-tree-id4711 . -257) (undo-tree-id4712 . -257) (undo-tree-id4713 . -257) (undo-tree-id4714 . -257) (undo-tree-id4715 . -257) (undo-tree-id4716 . -257) (undo-tree-id4717 . -257) (undo-tree-id4718 . -257) (undo-tree-id4719 . -257) (undo-tree-id4720 . -257) (undo-tree-id4721 . -257) (undo-tree-id4722 . -257) (undo-tree-id4723 . -257) (undo-tree-id4724 . -257) (undo-tree-id4725 . -257) (undo-tree-id4726 . -257) (undo-tree-id4727 . -257) (undo-tree-id4728 . -257) (undo-tree-id4729 . -257) (undo-tree-id4730 . -257) (undo-tree-id4731 . -257) (undo-tree-id4732 . -257) (undo-tree-id4733 . -257) (undo-tree-id4734 . -257) (undo-tree-id4735 . -257) (undo-tree-id4736 . -257) (undo-tree-id4737 . -257) (undo-tree-id4738 . -257) (undo-tree-id4739 . -257) (undo-tree-id4740 . -257) (undo-tree-id4741 . -257) (undo-tree-id4742 . -257) (undo-tree-id4743 . -257) (undo-tree-id4744 . -257) (undo-tree-id4745 . -257) (undo-tree-id4746 . -257) (undo-tree-id4747 . -257) (undo-tree-id4748 . -257) (undo-tree-id4749 . -257) (undo-tree-id4750 . -257) (undo-tree-id4751 . -257) (undo-tree-id4752 . -257) (undo-tree-id4753 . -257) (undo-tree-id4754 . -257) (undo-tree-id4755 . -257) (undo-tree-id4756 . -257) (undo-tree-id4757 . -257) (undo-tree-id4758 . -257) (undo-tree-id4759 . -257) (undo-tree-id4760 . -257) (undo-tree-id4761 . -257) (undo-tree-id4762 . -257) (undo-tree-id4763 . -257) (undo-tree-id4764 . -257) (undo-tree-id4765 . -257) (undo-tree-id4766 . -257) (undo-tree-id4767 . -257) (undo-tree-id4768 . -257) (undo-tree-id4769 . -257) (undo-tree-id4770 . -257) (undo-tree-id4771 . -257) (undo-tree-id4772 . -257) (undo-tree-id4773 . -257) (undo-tree-id4774 . -257) (undo-tree-id4775 . -257) (undo-tree-id4776 . -257) (undo-tree-id4777 . -257) (undo-tree-id4778 . -257) (undo-tree-id4779 . -257) (undo-tree-id4780 . -257) (undo-tree-id4781 . -257) (undo-tree-id4782 . -257) (undo-tree-id4783 . -257) (undo-tree-id4784 . -257) (undo-tree-id4785 . -257) (undo-tree-id4786 . -257) (undo-tree-id4787 . -257) (undo-tree-id4788 . -257) (undo-tree-id4789 . -257) (undo-tree-id4790 . -257) (undo-tree-id4791 . -257) (undo-tree-id4792 . -257) (undo-tree-id4793 . -257) (undo-tree-id4794 . -257) (undo-tree-id4795 . -257) (undo-tree-id4796 . -257) (undo-tree-id4797 . -257) (undo-tree-id4798 . -257) (undo-tree-id4799 . -257) (undo-tree-id4800 . -257) (undo-tree-id4801 . -257) (undo-tree-id4802 . -257) (undo-tree-id4803 . -257) (undo-tree-id4804 . -257) (undo-tree-id4805 . -257) (undo-tree-id4806 . -257) (undo-tree-id4807 . -257) (undo-tree-id4808 . -257) (undo-tree-id4809 . -257) (undo-tree-id4810 . -257) (undo-tree-id4811 . -257) (undo-tree-id4812 . -257) (undo-tree-id4813 . -257) (undo-tree-id4814 . -257) (undo-tree-id4815 . -257) (undo-tree-id4816 . -257) (undo-tree-id4817 . -257) (undo-tree-id4818 . -257) (undo-tree-id4819 . -257) (undo-tree-id4820 . -257) (undo-tree-id4821 . -257) (undo-tree-id4822 . -257) (undo-tree-id4823 . -257) (undo-tree-id4824 . -257) (undo-tree-id4825 . -257) (undo-tree-id4826 . -257) (undo-tree-id4827 . -257) (undo-tree-id4828 . -257) (undo-tree-id4829 . -257) (undo-tree-id4830 . -257) (undo-tree-id4831 . -257) (undo-tree-id4832 . -257) (undo-tree-id4833 . -257) (undo-tree-id4834 . -257) (undo-tree-id4835 . -257) (undo-tree-id4836 . -257) (undo-tree-id4837 . -257) (undo-tree-id4838 . -257) (undo-tree-id4839 . -257) (undo-tree-id4840 . -257) (undo-tree-id4841 . -257) (undo-tree-id4842 . -257) (undo-tree-id4843 . -257) (undo-tree-id4844 . -257) (undo-tree-id4845 . -257) (undo-tree-id4846 . -257) (undo-tree-id4847 . -257) (undo-tree-id4848 . -257) (undo-tree-id4849 . -257) (undo-tree-id4850 . -257) (undo-tree-id4851 . -257) (undo-tree-id4852 . -257) (undo-tree-id4853 . -257) (undo-tree-id4854 . -257) (undo-tree-id4855 . -257) (undo-tree-id4856 . -257) (undo-tree-id4857 . -257) (undo-tree-id4858 . -257) (undo-tree-id4859 . -257) (undo-tree-id4860 . -257) (undo-tree-id4861 . -257) (undo-tree-id4862 . -257) (undo-tree-id4863 . -257) (undo-tree-id4864 . -257) (undo-tree-id4865 . -257) (undo-tree-id4866 . -257) (undo-tree-id4867 . -257) (undo-tree-id4868 . -257) (undo-tree-id4869 . -257) (undo-tree-id4870 . -257) (undo-tree-id4871 . -257) (undo-tree-id4872 . -257) (undo-tree-id4873 . -257) (undo-tree-id4874 . -257) (undo-tree-id4875 . -257) (undo-tree-id4876 . -257) (undo-tree-id4877 . -257) (undo-tree-id4878 . -257) (undo-tree-id4879 . -257) (undo-tree-id4880 . -257) (undo-tree-id4881 . -257) (undo-tree-id4882 . -257) (undo-tree-id4883 . -257) (undo-tree-id4884 . -257) (undo-tree-id4885 . -257) (undo-tree-id4886 . -257) (undo-tree-id4887 . -257) (undo-tree-id4888 . -257) (undo-tree-id4889 . -257) (undo-tree-id4890 . -257) (undo-tree-id4891 . -257) (undo-tree-id4892 . -257) (undo-tree-id4893 . -257) (undo-tree-id4894 . -257) (undo-tree-id4895 . -257) (undo-tree-id4896 . -257) (undo-tree-id4897 . -257) (undo-tree-id4898 . -257) (undo-tree-id4899 . -257) (undo-tree-id4900 . -257) (undo-tree-id4901 . -257) (undo-tree-id4902 . -257) (undo-tree-id4903 . -257) (undo-tree-id4904 . -257) (undo-tree-id4905 . -257) (undo-tree-id4906 . -257) (undo-tree-id4907 . -257) (undo-tree-id4908 . -257) (undo-tree-id4909 . -257) (undo-tree-id4910 . -257) (undo-tree-id4911 . -257) (undo-tree-id4912 . -257) (undo-tree-id4913 . -257) (undo-tree-id4914 . -257) (undo-tree-id4915 . -257) (undo-tree-id4916 . -257) (undo-tree-id4917 . -257) (undo-tree-id4918 . -257) (undo-tree-id4919 . -257) (undo-tree-id4920 . -257) (undo-tree-id4921 . -257) (undo-tree-id4922 . -257) (undo-tree-id4923 . -257) (undo-tree-id4924 . -257) (undo-tree-id4925 . -257) (undo-tree-id4926 . -257) (undo-tree-id4927 . -257) (undo-tree-id4928 . -257) (undo-tree-id4929 . -257) (undo-tree-id4930 . -257) (undo-tree-id4931 . -257) (undo-tree-id4932 . -257) (undo-tree-id4933 . -257) (undo-tree-id4934 . -257) (undo-tree-id4935 . -257) (undo-tree-id4936 . -257) (undo-tree-id4937 . -257) (undo-tree-id4938 . -257) (undo-tree-id4939 . -257) (undo-tree-id4940 . -257) (undo-tree-id4941 . -257) (undo-tree-id4942 . -257) (undo-tree-id4943 . -257) (undo-tree-id4944 . -257) (undo-tree-id4945 . -257) (undo-tree-id4946 . -257) (undo-tree-id4947 . -257) (undo-tree-id4948 . -257) (undo-tree-id4949 . -257) (undo-tree-id4950 . -257) (undo-tree-id4951 . -257) (undo-tree-id4952 . -257) (undo-tree-id4953 . -257) (undo-tree-id4954 . -257) (undo-tree-id4955 . -257) (undo-tree-id4956 . -257) (undo-tree-id4957 . -257) (undo-tree-id4958 . -257) (undo-tree-id4959 . -257) (undo-tree-id4960 . -257) (undo-tree-id4961 . -257) (undo-tree-id4962 . -257) (undo-tree-id4963 . -257) (undo-tree-id4964 . -257) (undo-tree-id4965 . -257) (undo-tree-id4966 . -257) (undo-tree-id4967 . -257) (undo-tree-id4968 . -257) (undo-tree-id4969 . -257) (undo-tree-id4970 . -257) (undo-tree-id4971 . -257) (undo-tree-id4972 . -257) (undo-tree-id4973 . -257) (undo-tree-id4974 . -257) (undo-tree-id4975 . -257) (undo-tree-id4976 . -257) (undo-tree-id4977 . -257) (undo-tree-id4978 . -257) (undo-tree-id4979 . -257) (undo-tree-id4980 . -257) (undo-tree-id4981 . -257) (undo-tree-id4982 . -257) (undo-tree-id4983 . -257) (undo-tree-id4984 . -257) (undo-tree-id4985 . -257) (undo-tree-id4986 . -257) (undo-tree-id4987 . -257) (undo-tree-id4988 . -257) (undo-tree-id4989 . -257) (undo-tree-id4990 . -257) (undo-tree-id4991 . -257) (undo-tree-id4992 . -257) (undo-tree-id4993 . -257) (undo-tree-id4994 . -257) (undo-tree-id4995 . -257) (undo-tree-id4996 . -257) (undo-tree-id4997 . -257) (undo-tree-id4998 . -257) (undo-tree-id4999 . -257) (undo-tree-id5000 . -257) (undo-tree-id5001 . -257) (undo-tree-id5002 . -257) (undo-tree-id5003 . -257) (undo-tree-id5004 . -257) (undo-tree-id5005 . -257) (undo-tree-id5006 . -257) (undo-tree-id5007 . -257) (undo-tree-id5008 . -257) (undo-tree-id5009 . -257) (undo-tree-id5010 . -257) (undo-tree-id5011 . -257) (undo-tree-id5012 . -257) (undo-tree-id5013 . -257) (undo-tree-id5014 . -257) (undo-tree-id5015 . -257) (undo-tree-id5016 . -257) (undo-tree-id5017 . -257) (undo-tree-id5018 . -257) (undo-tree-id5019 . -257) (undo-tree-id5020 . -257) (undo-tree-id5021 . -257) (undo-tree-id5022 . -257) (undo-tree-id5023 . -257) (undo-tree-id5024 . -257) (undo-tree-id5025 . -257) (undo-tree-id5026 . -257) (undo-tree-id5027 . -257) (undo-tree-id5028 . -257) (undo-tree-id5029 . -257) (undo-tree-id5030 . -257) (undo-tree-id5031 . -257) (undo-tree-id5032 . -257) (undo-tree-id5033 . -257) (undo-tree-id5034 . -257) (undo-tree-id5035 . -257) (undo-tree-id5036 . -257) (undo-tree-id5037 . -257) (undo-tree-id5038 . -257) (undo-tree-id5039 . -257) (undo-tree-id5040 . -257) (undo-tree-id5041 . -257) (undo-tree-id5042 . -257) (undo-tree-id5043 . -257) (undo-tree-id5044 . -257) (undo-tree-id5045 . -257) (undo-tree-id5046 . -257) (undo-tree-id5047 . -257) (undo-tree-id5048 . -257) (undo-tree-id5049 . -257) (undo-tree-id5050 . -257) (undo-tree-id5051 . -257) (undo-tree-id5052 . -257) (undo-tree-id5053 . -257) (undo-tree-id5054 . -257) (undo-tree-id5055 . -257) (undo-tree-id5056 . -257) (undo-tree-id5057 . -257) (undo-tree-id5058 . -257) (undo-tree-id5059 . -257) (undo-tree-id5060 . -257) (undo-tree-id5061 . -257) (undo-tree-id5062 . -257) (undo-tree-id5063 . -257) (undo-tree-id5064 . -257) (undo-tree-id5065 . -257) (undo-tree-id5066 . -257) (undo-tree-id5067 . -257) (undo-tree-id5068 . -257) (undo-tree-id5069 . -257) (undo-tree-id5070 . -257) (undo-tree-id5071 . -257) (undo-tree-id5072 . -257) (undo-tree-id5073 . -257) (undo-tree-id5074 . -257) (undo-tree-id5075 . -257) (undo-tree-id5076 . -257) (undo-tree-id5077 . -257) (undo-tree-id5078 . -257) (undo-tree-id5079 . -257) (undo-tree-id5080 . -257) (undo-tree-id5081 . -257) (undo-tree-id5082 . -257) (undo-tree-id5083 . -257) (undo-tree-id5084 . -231) (undo-tree-id5085 . -231) (undo-tree-id5086 . -231) (undo-tree-id5087 . -231) (undo-tree-id5088 . -231) (undo-tree-id5089 . -231) (undo-tree-id5090 . -231) (undo-tree-id5091 . -231) (undo-tree-id5092 . -257) (undo-tree-id5093 . -257) (undo-tree-id5094 . -257) (undo-tree-id5095 . -257) (undo-tree-id5096 . -257) (undo-tree-id5097 . -257) (undo-tree-id5098 . -257) (undo-tree-id5099 . -257) (undo-tree-id5100 . -257) (undo-tree-id5101 . -257) (undo-tree-id5102 . -257) (undo-tree-id5103 . -257) (undo-tree-id5104 . -257) (undo-tree-id5105 . -257) (undo-tree-id5106 . -257) (undo-tree-id5107 . -257) (undo-tree-id5108 . -257) (undo-tree-id5109 . -257) (undo-tree-id5110 . -257) (undo-tree-id5111 . -257) (undo-tree-id5112 . -257) (undo-tree-id5113 . -257) (undo-tree-id5114 . -257) (undo-tree-id5115 . -257) (undo-tree-id5116 . -257) (undo-tree-id5117 . -257) (undo-tree-id5118 . -257) (undo-tree-id5119 . -257) (undo-tree-id5120 . -257) (undo-tree-id5121 . -257) (undo-tree-id5122 . -257) (undo-tree-id5123 . -257) (undo-tree-id5124 . -257) (undo-tree-id5125 . -257) (undo-tree-id5126 . -257) (undo-tree-id5127 . -257) (undo-tree-id5128 . -257) (undo-tree-id5129 . -257) (undo-tree-id5130 . -257) (undo-tree-id5131 . -257) (undo-tree-id5132 . -257) (undo-tree-id5133 . -257) (undo-tree-id5134 . -257) (undo-tree-id5135 . -257) (undo-tree-id5136 . -257) (undo-tree-id5137 . -257) (undo-tree-id5138 . -257) (undo-tree-id5139 . -257) (undo-tree-id5140 . -257) (undo-tree-id5141 . -205) (undo-tree-id5142 . -205) (undo-tree-id5143 . -205) (undo-tree-id5144 . -205) (undo-tree-id5145 . -205) (undo-tree-id5146 . -205) (undo-tree-id5147 . -205) (undo-tree-id5148 . -205) (undo-tree-id5149 . -205) (undo-tree-id5150 . -205) (undo-tree-id5151 . -205) (undo-tree-id5152 . -205) (undo-tree-id5153 . -205) (undo-tree-id5154 . -205) (undo-tree-id5155 . -205) (undo-tree-id5156 . -152) (undo-tree-id5157 . -152) (undo-tree-id5158 . -152) (undo-tree-id5159 . -152) (undo-tree-id5160 . -152) (undo-tree-id5161 . -152) (undo-tree-id5162 . -152) (undo-tree-id5163 . -152) (undo-tree-id5164 . -152) (undo-tree-id5165 . -152) (undo-tree-id5166 . -152) (undo-tree-id5167 . -152) (undo-tree-id5168 . -152) (undo-tree-id5169 . -152) (undo-tree-id5170 . -152) (undo-tree-id5171 . -152) (undo-tree-id5172 . -152) (undo-tree-id5173 . -152) (undo-tree-id5174 . -152) (undo-tree-id5175 . -152) (undo-tree-id5176 . -152) (undo-tree-id5177 . -152) (undo-tree-id5178 . -152) (undo-tree-id5179 . -152) (undo-tree-id5180 . -152) (undo-tree-id5181 . -152) (undo-tree-id5182 . -152) (undo-tree-id5183 . -152) (undo-tree-id5184 . -152) (undo-tree-id5185 . -152) (undo-tree-id5186 . -152) (undo-tree-id5187 . -152) (undo-tree-id5188 . -152) (undo-tree-id5189 . -152) (undo-tree-id5190 . -152) (undo-tree-id5191 . -152) (undo-tree-id5192 . -152) (undo-tree-id5193 . -152) (undo-tree-id5194 . -152) (undo-tree-id5195 . -152) (undo-tree-id5196 . -152) (undo-tree-id5197 . -152) (undo-tree-id5198 . -152) (undo-tree-id5199 . -152) (undo-tree-id5200 . -152) (undo-tree-id5201 . -152) (undo-tree-id5202 . -152) (undo-tree-id5203 . -152) (undo-tree-id5204 . -152) (undo-tree-id5205 . -152) (undo-tree-id5206 . -152) (undo-tree-id5207 . -152) (undo-tree-id5208 . -152) (undo-tree-id5209 . -152) (undo-tree-id5210 . -152) (undo-tree-id5211 . -152) (undo-tree-id5212 . -152) (undo-tree-id5213 . -256) (undo-tree-id5214 . -256) (undo-tree-id5215 . -256) (undo-tree-id5216 . -256) (undo-tree-id5217 . -256) (undo-tree-id5218 . -256) (undo-tree-id5219 . -256) (undo-tree-id5220 . -256) (undo-tree-id5221 . -256) (undo-tree-id5222 . -256) (undo-tree-id5223 . -256) (undo-tree-id5224 . -256) (undo-tree-id5225 . -256) (undo-tree-id5226 . -256) (undo-tree-id5227 . -256) (undo-tree-id5228 . -256) (undo-tree-id5229 . -256) (undo-tree-id5230 . -256) (undo-tree-id5231 . -256) (undo-tree-id5232 . -256) (undo-tree-id5233 . -256) (undo-tree-id5234 . -256) (undo-tree-id5235 . -257) (undo-tree-id5236 . -257) (undo-tree-id5237 . -257) (undo-tree-id5238 . -257) (undo-tree-id5239 . -257) (undo-tree-id5240 . -257) (undo-tree-id5241 . -257) (undo-tree-id5242 . -257) (undo-tree-id5243 . -257) (undo-tree-id5244 . -257) (undo-tree-id5245 . -257) (undo-tree-id5246 . -257) (undo-tree-id5247 . -257) (undo-tree-id5248 . -257) (undo-tree-id5249 . -257) (undo-tree-id5250 . -257) (undo-tree-id5251 . -257) (undo-tree-id5252 . -257) (undo-tree-id5253 . -257) (undo-tree-id5254 . -257) (undo-tree-id5255 . -257) (undo-tree-id5256 . -257) (undo-tree-id5257 . -257) (undo-tree-id5258 . -257) (undo-tree-id5259 . -257) (undo-tree-id5260 . -257) (undo-tree-id5261 . -257) (undo-tree-id5262 . -257) (undo-tree-id5263 . -257) (undo-tree-id5264 . -257) (undo-tree-id5265 . -257) (undo-tree-id5266 . -257) (undo-tree-id5267 . -257) (undo-tree-id5268 . -150) (753 . 903) (#(" it has a form of memory. A part of a neural network that preserves some state across time steps is called a memory cell. h_(t) = f(h_(t–1), x_(t))." 0 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 99 100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 100 121 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 121 122 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 122 123 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 123 124 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 124 127 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 127 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 133 134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 134 139 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 139 142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 142 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 143 146 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 146 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 860) (undo-tree-id5269 . -121) (undo-tree-id5270 . -121) (undo-tree-id5271 . 26) (undo-tree-id5272 . -121) (undo-tree-id5273 . -121) (undo-tree-id5274 . -121) (undo-tree-id5275 . -121) (undo-tree-id5276 . -121) (undo-tree-id5277 . -121) (undo-tree-id5278 . -121) (undo-tree-id5279 . -121) (undo-tree-id5280 . -121) (undo-tree-id5281 . -121) (undo-tree-id5282 . -121) (undo-tree-id5283 . -121) (undo-tree-id5284 . -121) (undo-tree-id5285 . -121) (undo-tree-id5286 . -121) (undo-tree-id5287 . -121) (undo-tree-id5288 . -121) (undo-tree-id5289 . -121) (undo-tree-id5290 . -121) (undo-tree-id5291 . -121) (undo-tree-id5292 . -121) (undo-tree-id5293 . -121) (undo-tree-id5294 . -121) (undo-tree-id5295 . -121) (undo-tree-id5296 . -121) (undo-tree-id5297 . -99) (undo-tree-id5298 . -99) (undo-tree-id5299 . -99) (undo-tree-id5300 . -99) (undo-tree-id5301 . -99) (undo-tree-id5302 . -99) (undo-tree-id5303 . -99) (undo-tree-id5304 . -99) (undo-tree-id5305 . -27) (undo-tree-id5306 . -27) (undo-tree-id5307 . -27) (undo-tree-id5308 . -27) (undo-tree-id5309 . -27) (undo-tree-id5310 . -27) (undo-tree-id5311 . -27) (undo-tree-id5312 . -27) (undo-tree-id5313 . -27) (undo-tree-id5314 . -27) (undo-tree-id5315 . -27) (undo-tree-id5316 . -27) (undo-tree-id5317 . -27) (undo-tree-id5318 . -27) (undo-tree-id5319 . -27) (undo-tree-id5320 . -27) (undo-tree-id5321 . -99) (undo-tree-id5322 . -99) (undo-tree-id5323 . -99) (undo-tree-id5324 . -99) (undo-tree-id5325 . -99) (undo-tree-id5326 . -99) (undo-tree-id5327 . -99) (undo-tree-id5328 . -99) (undo-tree-id5329 . -121) (undo-tree-id5330 . -121) (undo-tree-id5331 . -121) (undo-tree-id5332 . -121) (undo-tree-id5333 . -121) (undo-tree-id5334 . -121) (undo-tree-id5335 . -121) (undo-tree-id5336 . -121) (undo-tree-id5337 . -121) (undo-tree-id5338 . -121) (undo-tree-id5339 . -121) (undo-tree-id5340 . -121) (undo-tree-id5341 . -121) (undo-tree-id5342 . -121) (undo-tree-id5343 . -121) (undo-tree-id5344 . -121) (undo-tree-id5345 . -121) (undo-tree-id5346 . -121) (undo-tree-id5347 . -121) (undo-tree-id5348 . -121) (undo-tree-id5349 . -121) (undo-tree-id5350 . -121) (undo-tree-id5351 . -121) (undo-tree-id5352 . -121) (undo-tree-id5353 . -121) (undo-tree-id5354 . -121) (undo-tree-id5355 . -121) (undo-tree-id5356 . -121) (undo-tree-id5357 . -121) (undo-tree-id5358 . -121) (undo-tree-id5359 . -121) (undo-tree-id5360 . -121) (undo-tree-id5361 . -121) (undo-tree-id5362 . -121) (undo-tree-id5363 . -121) (undo-tree-id5364 . -121) (undo-tree-id5365 . -121) (undo-tree-id5366 . -121) (undo-tree-id5367 . -121) (undo-tree-id5368 . -121) (undo-tree-id5369 . -121) (undo-tree-id5370 . -121) (undo-tree-id5371 . -121) (undo-tree-id5372 . -121) (undo-tree-id5373 . -121) (undo-tree-id5374 . -121) (undo-tree-id5375 . -121) (undo-tree-id5376 . -121) (undo-tree-id5377 . -121) (undo-tree-id5378 . -121) (undo-tree-id5379 . -121) (undo-tree-id5380 . -121) (undo-tree-id5381 . -121) (undo-tree-id5382 . -121) (undo-tree-id5383 . -121) (undo-tree-id5384 . -121) (undo-tree-id5385 . -121) (undo-tree-id5386 . -121) (undo-tree-id5387 . -121) (undo-tree-id5388 . -121) (undo-tree-id5389 . -121) (undo-tree-id5390 . -121) (undo-tree-id5391 . -121) (undo-tree-id5392 . -121) (undo-tree-id5393 . -121) (undo-tree-id5394 . -121) (undo-tree-id5395 . -121) (undo-tree-id5396 . -121) (undo-tree-id5397 . -121) (undo-tree-id5398 . -121) (undo-tree-id5399 . -121) (undo-tree-id5400 . -121) (undo-tree-id5401 . -121) (undo-tree-id5402 . -121) (undo-tree-id5403 . -121) (undo-tree-id5404 . -121) (undo-tree-id5405 . -121) (undo-tree-id5406 . -121) (undo-tree-id5407 . -121) (undo-tree-id5408 . -121) (undo-tree-id5409 . -121) (undo-tree-id5410 . -121) (undo-tree-id5411 . -121) (undo-tree-id5412 . -121) (undo-tree-id5413 . -121) (undo-tree-id5414 . -121) (undo-tree-id5415 . -121) (undo-tree-id5416 . -121) (undo-tree-id5417 . -121) (undo-tree-id5418 . -121) (undo-tree-id5419 . -121) (undo-tree-id5420 . -121) (undo-tree-id5421 . -121) (undo-tree-id5422 . -121) (undo-tree-id5423 . -121) (undo-tree-id5424 . -121) (undo-tree-id5425 . -121) (undo-tree-id5426 . -121) (undo-tree-id5427 . -121) (undo-tree-id5428 . -121) (undo-tree-id5429 . -121) (undo-tree-id5430 . -121) (undo-tree-id5431 . -121) (undo-tree-id5432 . -121) (undo-tree-id5433 . -121) (undo-tree-id5434 . -121) (undo-tree-id5435 . -121) (undo-tree-id5436 . -121) (undo-tree-id5437 . -121) (undo-tree-id5438 . -121) (undo-tree-id5439 . -121) (undo-tree-id5440 . -121) (undo-tree-id5441 . -121) (undo-tree-id5442 . -121) (undo-tree-id5443 . -121) (undo-tree-id5444 . -121) (undo-tree-id5445 . -121) (undo-tree-id5446 . -121) (undo-tree-id5447 . -121) (undo-tree-id5448 . -121) (undo-tree-id5449 . -121) (undo-tree-id5450 . -121) (undo-tree-id5451 . -121) (undo-tree-id5452 . -121) (undo-tree-id5453 . -121) (undo-tree-id5454 . -121) (undo-tree-id5455 . -121) (undo-tree-id5456 . -121) (undo-tree-id5457 . -121) (undo-tree-id5458 . -121) (undo-tree-id5459 . -121) (undo-tree-id5460 . -121) (undo-tree-id5461 . -121) (undo-tree-id5462 . -121) (undo-tree-id5463 . -121) (undo-tree-id5464 . -121) (undo-tree-id5465 . -121) (undo-tree-id5466 . -121) (undo-tree-id5467 . -121) (undo-tree-id5468 . -121) (undo-tree-id5469 . -121) (undo-tree-id5470 . -121) (undo-tree-id5471 . -121) (undo-tree-id5472 . -121) (undo-tree-id5473 . -121) (undo-tree-id5474 . -121) (undo-tree-id5475 . -121) (undo-tree-id5476 . -121) (undo-tree-id5477 . -121) (undo-tree-id5478 . -121) (undo-tree-id5479 . -121) (undo-tree-id5480 . -121) (undo-tree-id5481 . -121) (undo-tree-id5482 . -121) (undo-tree-id5483 . -121) (undo-tree-id5484 . -121) (undo-tree-id5485 . -121) (undo-tree-id5486 . -121) (undo-tree-id5487 . -121) (undo-tree-id5488 . -121) (undo-tree-id5489 . -121) (undo-tree-id5490 . -121) (undo-tree-id5491 . -121) (undo-tree-id5492 . -121) (undo-tree-id5493 . -121) (undo-tree-id5494 . -121) (undo-tree-id5495 . -121) (undo-tree-id5496 . -121) (undo-tree-id5497 . -121) (undo-tree-id5498 . -121) (undo-tree-id5499 . -121) (undo-tree-id5500 . -121) (undo-tree-id5501 . -121) (undo-tree-id5502 . -121) (undo-tree-id5503 . -121) (undo-tree-id5504 . -121) (undo-tree-id5505 . -121) (undo-tree-id5506 . -121) (undo-tree-id5507 . -121) (undo-tree-id5508 . -121) (undo-tree-id5509 . -121) (undo-tree-id5510 . -121) (undo-tree-id5511 . -121) (undo-tree-id5512 . -121) (undo-tree-id5513 . -121) (undo-tree-id5514 . -121) (undo-tree-id5515 . -121) (undo-tree-id5516 . -121) (undo-tree-id5517 . -121) (undo-tree-id5518 . -121) (undo-tree-id5519 . -121) (undo-tree-id5520 . -121) (undo-tree-id5521 . -121) (undo-tree-id5522 . -121) (undo-tree-id5523 . -121) (undo-tree-id5524 . -121) (undo-tree-id5525 . -121) (undo-tree-id5526 . -121) (undo-tree-id5527 . -121) (undo-tree-id5528 . -121) (undo-tree-id5529 . -121) (undo-tree-id5530 . -121) (undo-tree-id5531 . -121) (undo-tree-id5532 . -121) (undo-tree-id5533 . -121) (undo-tree-id5534 . -121) (undo-tree-id5535 . -121) (undo-tree-id5536 . -121) (undo-tree-id5537 . -121) (undo-tree-id5538 . -121) (undo-tree-id5539 . -121) (undo-tree-id5540 . -121) (undo-tree-id5541 . -121) (undo-tree-id5542 . -121) (undo-tree-id5543 . -121) (undo-tree-id5544 . -121) (undo-tree-id5545 . -121) (undo-tree-id5546 . -121) (undo-tree-id5547 . -121) (undo-tree-id5548 . -121) (undo-tree-id5549 . -121) (undo-tree-id5550 . -121) (undo-tree-id5551 . -121) (undo-tree-id5552 . -121) (undo-tree-id5553 . -121) (undo-tree-id5554 . -121) (undo-tree-id5555 . -121) (undo-tree-id5556 . -121) (undo-tree-id5557 . -121) (undo-tree-id5558 . -121) (undo-tree-id5559 . -121) (undo-tree-id5560 . -121) (undo-tree-id5561 . -121) (undo-tree-id5562 . -121) (undo-tree-id5563 . -121) (undo-tree-id5564 . -121) (undo-tree-id5565 . -121) (undo-tree-id5566 . -121) (undo-tree-id5567 . -121) (undo-tree-id5568 . -121) (undo-tree-id5569 . -121) (undo-tree-id5570 . -121) (undo-tree-id5571 . -121) (undo-tree-id5572 . -121) (undo-tree-id5573 . -121) (undo-tree-id5574 . -121) (undo-tree-id5575 . -121) (undo-tree-id5576 . -121) (undo-tree-id5577 . -121) (undo-tree-id5578 . -121) (undo-tree-id5579 . -121) (undo-tree-id5580 . -121) (undo-tree-id5581 . -121) (undo-tree-id5582 . -121) (undo-tree-id5583 . -121) (undo-tree-id5584 . -121) (undo-tree-id5585 . -121) (undo-tree-id5586 . -121) (undo-tree-id5587 . -121) (undo-tree-id5588 . -121) (undo-tree-id5589 . -121) (undo-tree-id5590 . -121) (undo-tree-id5591 . -121) (undo-tree-id5592 . -121) (undo-tree-id5593 . -121) (undo-tree-id5594 . -121) (undo-tree-id5595 . -121) (undo-tree-id5596 . -121) (undo-tree-id5597 . -121) (undo-tree-id5598 . -121) (undo-tree-id5599 . -121) (undo-tree-id5600 . -121) (undo-tree-id5601 . -121) (undo-tree-id5602 . -121) (undo-tree-id5603 . -121) (undo-tree-id5604 . -121) (undo-tree-id5605 . -121) (undo-tree-id5606 . -121) (undo-tree-id5607 . -121) (undo-tree-id5608 . -121) (undo-tree-id5609 . -121) (undo-tree-id5610 . -121) (undo-tree-id5611 . -121) (undo-tree-id5612 . -121) (undo-tree-id5613 . -121) (undo-tree-id5614 . -121) (undo-tree-id5615 . -121) (undo-tree-id5616 . -121) (undo-tree-id5617 . -121) (undo-tree-id5618 . -121) (undo-tree-id5619 . -121) (undo-tree-id5620 . -121) (undo-tree-id5621 . -121) (undo-tree-id5622 . -121) (undo-tree-id5623 . -121) (undo-tree-id5624 . -121) (undo-tree-id5625 . -121) (undo-tree-id5626 . -121) (undo-tree-id5627 . -121) (undo-tree-id5628 . -121) (undo-tree-id5629 . -121) (undo-tree-id5630 . -121) (undo-tree-id5631 . -121) (undo-tree-id5632 . -121) (undo-tree-id5633 . -121) (undo-tree-id5634 . -121) (undo-tree-id5635 . -121) (undo-tree-id5636 . -121) (undo-tree-id5637 . -121) (undo-tree-id5638 . -121) (undo-tree-id5639 . -121) (undo-tree-id5640 . -121) (undo-tree-id5641 . -121) (undo-tree-id5642 . -121) (undo-tree-id5643 . -121) (undo-tree-id5644 . -121) (undo-tree-id5645 . -121) (undo-tree-id5646 . -121) (undo-tree-id5647 . -121) (undo-tree-id5648 . -121) (undo-tree-id5649 . -121) (undo-tree-id5650 . -121) (undo-tree-id5651 . -121) (undo-tree-id5652 . -121) (undo-tree-id5653 . -121) (undo-tree-id5654 . -121) (undo-tree-id5655 . -121) (undo-tree-id5656 . -121) (undo-tree-id5657 . -121) (undo-tree-id5658 . -121) (undo-tree-id5659 . -121) (undo-tree-id5660 . -121) (undo-tree-id5661 . -121) (undo-tree-id5662 . -121) (undo-tree-id5663 . -121) (undo-tree-id5664 . -121) (undo-tree-id5665 . -121) (undo-tree-id5666 . -121) (undo-tree-id5667 . -121) (undo-tree-id5668 . -121) (undo-tree-id5669 . -121) (undo-tree-id5670 . -121) (undo-tree-id5671 . -121) (undo-tree-id5672 . -121) (undo-tree-id5673 . -121) (undo-tree-id5674 . -121) (undo-tree-id5675 . -121) (undo-tree-id5676 . -121) (undo-tree-id5677 . -121) (undo-tree-id5678 . -121) (undo-tree-id5679 . -121) (undo-tree-id5680 . -121) (undo-tree-id5681 . -121) (undo-tree-id5682 . -121) (undo-tree-id5683 . -121) (undo-tree-id5684 . -121) (undo-tree-id5685 . -121) (undo-tree-id5686 . -121) (undo-tree-id5687 . -121) (undo-tree-id5688 . -121) (undo-tree-id5689 . -121) (undo-tree-id5690 . -121) (undo-tree-id5691 . -121) (undo-tree-id5692 . -121) (undo-tree-id5693 . -121) (undo-tree-id5694 . -121) (undo-tree-id5695 . -121) (undo-tree-id5696 . -121) (undo-tree-id5697 . -121) (undo-tree-id5698 . -121) (undo-tree-id5699 . -121) (undo-tree-id5700 . -121) (undo-tree-id5701 . -121) (undo-tree-id5702 . -121) (undo-tree-id5703 . -121) (undo-tree-id5704 . -121) (undo-tree-id5705 . -121) (undo-tree-id5706 . -121) (undo-tree-id5707 . -121) (undo-tree-id5708 . -121) (undo-tree-id5709 . -121) (undo-tree-id5710 . -121) (undo-tree-id5711 . -121) (undo-tree-id5712 . -121) (undo-tree-id5713 . -121) (undo-tree-id5714 . -121) (undo-tree-id5715 . -121) (undo-tree-id5716 . -121) (undo-tree-id5717 . -121) (undo-tree-id5718 . -121) (undo-tree-id5719 . -121) (undo-tree-id5720 . -121) (undo-tree-id5721 . -121) (undo-tree-id5722 . -121) (undo-tree-id5723 . -121) (undo-tree-id5724 . -121) (undo-tree-id5725 . -121) (undo-tree-id5726 . -121) (undo-tree-id5727 . -121) (undo-tree-id5728 . -121) (undo-tree-id5729 . -121) (undo-tree-id5730 . -121) (undo-tree-id5731 . -121) (undo-tree-id5732 . -121) (undo-tree-id5733 . -121) (undo-tree-id5734 . -121) (undo-tree-id5735 . -121) (undo-tree-id5736 . -121) (undo-tree-id5737 . -121) (undo-tree-id5738 . -121) (undo-tree-id5739 . -121) (undo-tree-id5740 . -121) (undo-tree-id5741 . -121) (undo-tree-id5742 . -121) (undo-tree-id5743 . -121) (undo-tree-id5744 . -121) (undo-tree-id5745 . -121) (undo-tree-id5746 . -121) (undo-tree-id5747 . -121) (undo-tree-id5748 . -121) (undo-tree-id5749 . -121) (undo-tree-id5750 . -121) (undo-tree-id5751 . -121) (undo-tree-id5752 . -121) (undo-tree-id5753 . -121) (undo-tree-id5754 . -121) (undo-tree-id5755 . -121) (undo-tree-id5756 . -121) (undo-tree-id5757 . -121) (undo-tree-id5758 . -121) (undo-tree-id5759 . -121) (undo-tree-id5760 . -121) (undo-tree-id5761 . -121) (undo-tree-id5762 . -121) (undo-tree-id5763 . -121) (undo-tree-id5764 . -121) (undo-tree-id5765 . -121) (undo-tree-id5766 . -121) (undo-tree-id5767 . -121) (undo-tree-id5768 . -121) (undo-tree-id5769 . -121) (undo-tree-id5770 . -121) (undo-tree-id5771 . -99) (undo-tree-id5772 . -99) (undo-tree-id5773 . -99) (undo-tree-id5774 . -99) (undo-tree-id5775 . -99) (undo-tree-id5776 . -99) (undo-tree-id5777 . -99) (undo-tree-id5778 . -99) (undo-tree-id5779 . -27) (undo-tree-id5780 . -27) (undo-tree-id5781 . -27) (undo-tree-id5782 . -27) (undo-tree-id5783 . -27) (undo-tree-id5784 . -27) (undo-tree-id5785 . -27) (undo-tree-id5786 . -27) (undo-tree-id5787 . -121) (undo-tree-id5788 . -1) (undo-tree-id5789 . -121) (undo-tree-id5790 . -121) (undo-tree-id5791 . -121) (undo-tree-id5792 . -121) (undo-tree-id5793 . -121) (undo-tree-id5794 . -121) (undo-tree-id5795 . -121) (undo-tree-id5796 . -121) (undo-tree-id5797 . -121) (undo-tree-id5798 . -121) (undo-tree-id5799 . -121) (undo-tree-id5800 . -121) (undo-tree-id5801 . -121) (undo-tree-id5802 . -121) (undo-tree-id5803 . -121) (undo-tree-id5804 . -121) (undo-tree-id5805 . -121) (undo-tree-id5806 . -121) (undo-tree-id5807 . -121) (undo-tree-id5808 . -121) (undo-tree-id5809 . -121) (undo-tree-id5810 . -121) (undo-tree-id5811 . -121) (undo-tree-id5812 . -121) (undo-tree-id5813 . -121) (undo-tree-id5814 . -121) (undo-tree-id5815 . -121) (undo-tree-id5816 . -121) (undo-tree-id5817 . -121) (undo-tree-id5818 . -121) (undo-tree-id5819 . -121) (undo-tree-id5820 . -121) (undo-tree-id5821 . -33) (undo-tree-id5822 . -33) (undo-tree-id5823 . -33) (undo-tree-id5824 . -33) (undo-tree-id5825 . -33) (undo-tree-id5826 . -33) (undo-tree-id5827 . -33) (undo-tree-id5828 . -33) (undo-tree-id5829 . -33) (undo-tree-id5830 . -33) (undo-tree-id5831 . -33) (undo-tree-id5832 . -33) (undo-tree-id5833 . -33) (undo-tree-id5834 . -33) (undo-tree-id5835 . -33) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) 861 (t 25772 49393 625752 993000)) nil (25772 49411 757117 641000) 0 nil])
([nil nil ((#("," 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 859) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1)) nil (25772 49411 755957 341000) 0 nil])
([nil nil ((862 . 863) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 862)) nil (25772 49411 755942 625000) 0 nil])
([nil nil ((860 . 1011) (#("- A part of a neural network that preserves some state across time steps is called a memory cell. h_(t) = f(h_(t–1), x_(t)).
- It has a form of memory." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 75 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 75 76 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 76 97 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 97 98 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 98 99 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 99 100 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 100 103 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 103 109 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 109 110 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 110 115 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 115 118 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 118 119 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 119 122 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 122 124 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 124 125 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 125 126 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 126 127 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 127 151 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 860) (undo-tree-id5869 . 24) (undo-tree-id5870 . -127) (undo-tree-id5871 . -127) (undo-tree-id5872 . 23) (undo-tree-id5873 . -127) (undo-tree-id5874 . -127) (undo-tree-id5875 . -127) (undo-tree-id5876 . -151) (undo-tree-id5877 . -127) (undo-tree-id5878 . -127) (undo-tree-id5879 . -127) (undo-tree-id5880 . -127) (undo-tree-id5881 . -127) (undo-tree-id5882 . -127) (undo-tree-id5883 . -127) (undo-tree-id5884 . -127) (undo-tree-id5885 . -127) (undo-tree-id5886 . -127) (undo-tree-id5887 . -127) (undo-tree-id5888 . -127) (undo-tree-id5889 . -127) (undo-tree-id5890 . -127) (undo-tree-id5891 . -127) (undo-tree-id5892 . -127) (undo-tree-id5893 . -127) (undo-tree-id5894 . -127) (undo-tree-id5895 . -127) (undo-tree-id5896 . -127) (undo-tree-id5897 . -127) (undo-tree-id5898 . -127) (undo-tree-id5899 . -127) (undo-tree-id5900 . -127) (undo-tree-id5901 . -127) (undo-tree-id5902 . -127) (undo-tree-id5903 . -127) (undo-tree-id5904 . -127) (undo-tree-id5905 . -127) (undo-tree-id5906 . -127) (undo-tree-id5907 . -127) (undo-tree-id5908 . -127) (undo-tree-id5909 . -127) (undo-tree-id5910 . -127) (undo-tree-id5911 . -127) (undo-tree-id5912 . -127) (undo-tree-id5913 . -127) (undo-tree-id5914 . -127) (undo-tree-id5915 . -127) (undo-tree-id5916 . -127) (undo-tree-id5917 . -127) (undo-tree-id5918 . -127) (undo-tree-id5919 . -127) (undo-tree-id5920 . -127) (undo-tree-id5921 . -127) (undo-tree-id5922 . -127) (undo-tree-id5923 . -130) (undo-tree-id5924 . -130) (undo-tree-id5925 . -130) (undo-tree-id5926 . -130) (undo-tree-id5927 . -130) (undo-tree-id5928 . -130) (undo-tree-id5929 . -130) (undo-tree-id5930 . -130) (undo-tree-id5931 . -130) (undo-tree-id5932 . -130) (undo-tree-id5933 . -130) (undo-tree-id5934 . -130) (undo-tree-id5935 . -130) (undo-tree-id5936 . -130) (undo-tree-id5937 . -130) (undo-tree-id5938 . -134) (undo-tree-id5939 . -134) (undo-tree-id5940 . -134) (undo-tree-id5941 . -134) (undo-tree-id5942 . -134) (undo-tree-id5943 . -134) (undo-tree-id5944 . -134) (undo-tree-id5945 . -134) (undo-tree-id5946 . -134) (undo-tree-id5947 . -134) (undo-tree-id5948 . -134) (undo-tree-id5949 . -134) (undo-tree-id5950 . -134) (undo-tree-id5951 . -134) (undo-tree-id5952 . -134) (undo-tree-id5953 . -136) (undo-tree-id5954 . -136) (undo-tree-id5955 . -136) (undo-tree-id5956 . -136) (undo-tree-id5957 . -136) (undo-tree-id5958 . -136) (undo-tree-id5959 . -136) (undo-tree-id5960 . -136) (undo-tree-id5961 . -136) (undo-tree-id5962 . -136) (undo-tree-id5963 . -136) (undo-tree-id5964 . -136) (undo-tree-id5965 . -136) (undo-tree-id5966 . -136) (undo-tree-id5967 . -136) (undo-tree-id5968 . -141) (undo-tree-id5969 . -141) (undo-tree-id5970 . -141) (undo-tree-id5971 . -141) (undo-tree-id5972 . -141) (undo-tree-id5973 . -141) (undo-tree-id5974 . -141) (undo-tree-id5975 . -141) (undo-tree-id5976 . -141) (undo-tree-id5977 . -141) (undo-tree-id5978 . -141) (undo-tree-id5979 . -141) (undo-tree-id5980 . -141) (undo-tree-id5981 . -141) (undo-tree-id5982 . -141) (undo-tree-id5983 . -144) (undo-tree-id5984 . -144) (undo-tree-id5985 . -144) (undo-tree-id5986 . -144) (undo-tree-id5987 . -144) (undo-tree-id5988 . -144) (undo-tree-id5989 . -144) (undo-tree-id5990 . -144) (undo-tree-id5991 . -144) (undo-tree-id5992 . -144) (undo-tree-id5993 . -144) (undo-tree-id5994 . -144) (undo-tree-id5995 . -144) (undo-tree-id5996 . -144) (undo-tree-id5997 . -144) (undo-tree-id5998 . -144) (undo-tree-id5999 . -144) (undo-tree-id6000 . -144) (undo-tree-id6001 . -144) (undo-tree-id6002 . -144) (undo-tree-id6003 . -144) (undo-tree-id6004 . -144) (undo-tree-id6005 . -150) (undo-tree-id6006 . -150) (undo-tree-id6007 . -150) (undo-tree-id6008 . -150) (undo-tree-id6009 . -150) (undo-tree-id6010 . -150) (undo-tree-id6011 . -150) (undo-tree-id6012 . -150) (undo-tree-id6013 . -150) (undo-tree-id6014 . -150) (undo-tree-id6015 . -150) (undo-tree-id6016 . -150) (undo-tree-id6017 . -150) (undo-tree-id6018 . -150) (undo-tree-id6019 . -150) (undo-tree-id6020 . -151) (undo-tree-id6021 . -151) (undo-tree-id6022 . -151) (undo-tree-id6023 . -151) (undo-tree-id6024 . -151) (undo-tree-id6025 . -151) (undo-tree-id6026 . -151) (undo-tree-id6027 . -151) (undo-tree-id6028 . -151) (undo-tree-id6029 . -151) (undo-tree-id6030 . -151) (undo-tree-id6031 . -151) (undo-tree-id6032 . -151) (undo-tree-id6033 . -151) (undo-tree-id6034 . -151) (undo-tree-id6035 . -151) (undo-tree-id6036 . -151) (undo-tree-id6037 . -151) (undo-tree-id6038 . -151) (undo-tree-id6039 . -151) (undo-tree-id6040 . -151) (undo-tree-id6041 . -151) (undo-tree-id6042 . -151) (undo-tree-id6043 . -151) (undo-tree-id6044 . -151) (undo-tree-id6045 . -151) (undo-tree-id6046 . -151) (undo-tree-id6047 . -151) (undo-tree-id6048 . -151) (undo-tree-id6049 . -151) (undo-tree-id6050 . -151) (undo-tree-id6051 . -151) (undo-tree-id6052 . -151) (undo-tree-id6053 . -151) (undo-tree-id6054 . -151) (undo-tree-id6055 . -151) (undo-tree-id6056 . -151) (undo-tree-id6057 . -151) (undo-tree-id6058 . -151) (undo-tree-id6059 . -151) (undo-tree-id6060 . -125) (860 . 985) (#(" A part of a neural network that preserves some state across time steps is called a memory cell. h_(t) = f(h_(t–1), x_(t))." 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 75 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 99 102 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 108 109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 109 114 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 114 117 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 118 121 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 121 123 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 886) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) 887 (t 25772 49411 801070 664000)) nil (25772 49418 673164 713000) 0 nil])
([nil nil ((887 . 1013) (#("- h_(t) = f(h_(t–1), x_(t)).
- A part of a neural network that preserves some state across time steps is called a memory cell." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 4 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 7 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 7 13 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 13 14 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 14 19 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 19 22 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 22 23 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 23 26 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7)) fontified nil) 26 28 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 28 29 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 29 30 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 30 31 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 31 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 33 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 104 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 104 105 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 105 126 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 887) (undo-tree-id6102 . 95) (undo-tree-id6103 . -30) (undo-tree-id6104 . -126) (undo-tree-id6105 . -30) (undo-tree-id6106 . -30) (undo-tree-id6107 . -30) (undo-tree-id6108 . -30) (undo-tree-id6109 . -30) (undo-tree-id6110 . -30) (undo-tree-id6111 . -30) (undo-tree-id6112 . -30) (undo-tree-id6113 . -30) (undo-tree-id6114 . -30) (undo-tree-id6115 . -30) (undo-tree-id6116 . -30) (undo-tree-id6117 . -30) (undo-tree-id6118 . -30) (undo-tree-id6119 . -30) (undo-tree-id6120 . -30) (undo-tree-id6121 . -30) (undo-tree-id6122 . -30) (undo-tree-id6123 . -30) (undo-tree-id6124 . -30) (undo-tree-id6125 . -30) (undo-tree-id6126 . -30) (undo-tree-id6127 . -30) (undo-tree-id6128 . -30) (undo-tree-id6129 . -30) (undo-tree-id6130 . -30) (undo-tree-id6131 . -30) (undo-tree-id6132 . -30) (undo-tree-id6133 . -30) (undo-tree-id6134 . -30) (undo-tree-id6135 . -30) (undo-tree-id6136 . -30) (undo-tree-id6137 . -30) (undo-tree-id6138 . -30) (undo-tree-id6139 . -30) (undo-tree-id6140 . -30) (undo-tree-id6141 . -30) (undo-tree-id6142 . -30) (undo-tree-id6143 . -30) (undo-tree-id6144 . -30) (undo-tree-id6145 . -30) (undo-tree-id6146 . -30) (undo-tree-id6147 . -30) (undo-tree-id6148 . -30) (undo-tree-id6149 . -30) (undo-tree-id6150 . -30) (undo-tree-id6151 . -30) (undo-tree-id6152 . -30) (undo-tree-id6153 . -30) (undo-tree-id6154 . -30) (undo-tree-id6155 . -30) (undo-tree-id6156 . -30) (undo-tree-id6157 . -30) (undo-tree-id6158 . -30) (undo-tree-id6159 . -30) (undo-tree-id6160 . -30) (undo-tree-id6161 . -30) (undo-tree-id6162 . -30) (undo-tree-id6163 . -30) (undo-tree-id6164 . -30) (undo-tree-id6165 . -121) (undo-tree-id6166 . -121) (undo-tree-id6167 . -121) (undo-tree-id6168 . -121) (undo-tree-id6169 . -121) (undo-tree-id6170 . -121) (undo-tree-id6171 . -121) (undo-tree-id6172 . -121) (undo-tree-id6173 . -121) (undo-tree-id6174 . -121) (undo-tree-id6175 . -121) (undo-tree-id6176 . -121) (undo-tree-id6177 . -121) (undo-tree-id6178 . -121) (undo-tree-id6179 . -121) (undo-tree-id6180 . -125) (undo-tree-id6181 . -125) (undo-tree-id6182 . -125) (undo-tree-id6183 . -125) (undo-tree-id6184 . -125) (undo-tree-id6185 . -125) (undo-tree-id6186 . -125) (undo-tree-id6187 . -125) (undo-tree-id6188 . -125) (undo-tree-id6189 . -125) (undo-tree-id6190 . -125) (undo-tree-id6191 . -125) (undo-tree-id6192 . -125) (undo-tree-id6193 . -125) (undo-tree-id6194 . -125) (undo-tree-id6195 . -126) (undo-tree-id6196 . -126) (undo-tree-id6197 . -126) (undo-tree-id6198 . -126) (undo-tree-id6199 . -126) (undo-tree-id6200 . -126) (undo-tree-id6201 . -126) (undo-tree-id6202 . -126) (undo-tree-id6203 . -126) (undo-tree-id6204 . -126) (undo-tree-id6205 . -126) (undo-tree-id6206 . -126) (undo-tree-id6207 . -126) (undo-tree-id6208 . -126) (undo-tree-id6209 . -126) (undo-tree-id6210 . -126) (undo-tree-id6211 . -126) (undo-tree-id6212 . -126) (undo-tree-id6213 . -126) (undo-tree-id6214 . -126) (undo-tree-id6215 . -126) (undo-tree-id6216 . -126) (undo-tree-id6217 . -126) (undo-tree-id6218 . -126) (undo-tree-id6219 . -126) (undo-tree-id6220 . -126) (undo-tree-id6221 . -126) (undo-tree-id6222 . -126) (undo-tree-id6223 . -126) (undo-tree-id6224 . -126) (undo-tree-id6225 . -126) (undo-tree-id6226 . -126) (undo-tree-id6227 . -126) (undo-tree-id6228 . -29) (887 . 916) (#(" h_(t) = f(h_(t–1), x_(t))." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 3 6 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 13 18 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 18 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 22 25 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 25 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 984) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) 985 (t 25772 49418 724811 360000)) nil (25772 49424 472910 49000) 0 nil])
([nil nil ((#("Its output at time step t, denoted y_(t), is also a function of the previous
" 0 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 37 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 40 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1015) (undo-tree-id6287 . -76) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -77) 1016 (t 25772 49424 524594 413000)) nil (25772 49434 386136 423000) 0 nil])
([nil nil ((#("state and the current inputs. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1015) (undo-tree-id6264 . -30) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -31) 1016) nil (25772 49434 386120 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1015) (undo-tree-id6263 . -1)) nil (25772 49434 386098 189000) 0 nil])
([nil nil ((1077 . 1079) (t 25772 49434 480222 554000)) nil (25772 49446 295804 726000) 0 nil])
([nil nil ((1144 . 1145) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1144) (undo-tree-id6464 . -1) 1079) nil (25772 49470 98018 392000) 0 nil] [nil nil ((1144 . 1145) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1144) (undo-tree-id6308 . -1) 1079) ((1144 . 1145) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1144)) (25772 49446 295389 689000) 0 nil])
([nil nil ((1178 . 1179) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1178) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) 1171) nil (25772 49470 98015 132000) 0 nil])
nil
([nil nil ((#("This type of sequence-to-sequence network is useful for predicting time series. " 0 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1166) (undo-tree-id6327 . -79) (undo-tree-id6328 . -11) (undo-tree-id6329 . -11) (undo-tree-id6330 . -11) (undo-tree-id6331 . -11) (undo-tree-id6332 . -11) (undo-tree-id6333 . -11) (undo-tree-id6334 . -11) (undo-tree-id6335 . -11) (undo-tree-id6336 . -11) (undo-tree-id6337 . -11) (undo-tree-id6338 . -11) (undo-tree-id6339 . -11) (undo-tree-id6340 . -11) (undo-tree-id6341 . -11) (undo-tree-id6342 . -11) (undo-tree-id6343 . -12) (undo-tree-id6344 . -12) (undo-tree-id6345 . -12) (undo-tree-id6346 . -12) (undo-tree-id6347 . -12) (undo-tree-id6348 . -12) (undo-tree-id6349 . -12) (undo-tree-id6350 . -12) (undo-tree-id6351 . -12) (undo-tree-id6352 . -12) (undo-tree-id6353 . -12) (undo-tree-id6354 . -12) (undo-tree-id6355 . -12) (undo-tree-id6356 . -12) (undo-tree-id6357 . -12) (undo-tree-id6358 . -5) (undo-tree-id6359 . -5) (undo-tree-id6360 . -5) (undo-tree-id6361 . -5) (undo-tree-id6362 . -5) (undo-tree-id6363 . -5) (undo-tree-id6364 . -5) (undo-tree-id6365 . -5) (undo-tree-id6366 . -5) (undo-tree-id6367 . -5) (undo-tree-id6368 . -5) (undo-tree-id6369 . -5) (undo-tree-id6370 . -5) (undo-tree-id6371 . -5) (undo-tree-id6372 . -5) (undo-tree-id6373 . -5) (undo-tree-id6374 . -5) (undo-tree-id6375 . -5) (undo-tree-id6376 . -5) (undo-tree-id6377 . -5) (undo-tree-id6378 . -5) (undo-tree-id6379 . -5) (undo-tree-id6380 . -12) (undo-tree-id6381 . -12) (undo-tree-id6382 . -12) (undo-tree-id6383 . -12) (undo-tree-id6384 . -12) (undo-tree-id6385 . -12) (undo-tree-id6386 . -12) (undo-tree-id6387 . -12) (undo-tree-id6388 . -12) (undo-tree-id6389 . -12) (undo-tree-id6390 . -12) (undo-tree-id6391 . -12) (undo-tree-id6392 . -12) (undo-tree-id6393 . -12) (undo-tree-id6394 . -12) (undo-tree-id6395 . -12) (undo-tree-id6396 . -12) (undo-tree-id6397 . -12) (undo-tree-id6398 . -12) (undo-tree-id6399 . -12) (undo-tree-id6400 . -12) (undo-tree-id6401 . -12) (undo-tree-id6402 . -12) (undo-tree-id6403 . -12) (undo-tree-id6404 . -12) (undo-tree-id6405 . -12) (undo-tree-id6406 . -12) (undo-tree-id6407 . -12) (undo-tree-id6408 . -12) (undo-tree-id6409 . -12) (undo-tree-id6410 . -12) (undo-tree-id6411 . -12) (undo-tree-id6412 . -12) (undo-tree-id6413 . -12) (undo-tree-id6414 . -12) (undo-tree-id6415 . -12) (undo-tree-id6416 . -29) (undo-tree-id6417 . -29) (undo-tree-id6418 . -29) (undo-tree-id6419 . -29) (undo-tree-id6420 . -29) (undo-tree-id6421 . -29) (undo-tree-id6422 . -29) (undo-tree-id6423 . -29) (undo-tree-id6424 . -29) (undo-tree-id6425 . -29) (undo-tree-id6426 . -29) (undo-tree-id6427 . -29) (undo-tree-id6428 . -29) (undo-tree-id6429 . -29) (undo-tree-id6430 . -29) (undo-tree-id6431 . -2) (undo-tree-id6432 . -2) (undo-tree-id6433 . -2) (undo-tree-id6434 . -2) (undo-tree-id6435 . -2) (undo-tree-id6436 . -2) (undo-tree-id6437 . -2) (undo-tree-id6438 . -2) (undo-tree-id6439 . -2) (undo-tree-id6440 . -2) (undo-tree-id6441 . -2) (undo-tree-id6442 . -2) (undo-tree-id6443 . -2) (undo-tree-id6444 . -2) (undo-tree-id6445 . -2) (undo-tree-id6446 . -80) (undo-tree-id6447 . -80)) nil (25772 49471 24898 294000) 0 nil])
([nil nil ((1197 . 1199)) nil (25772 49480 403730 450000) 0 nil] [nil nil ((#("Sequence-to-Vector Network*" 0 26 (fontified t face (bold) font-lock-multiline t org-emphasis t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 26 27 (fontified t face (bold) font-lock-multiline t org-emphasis t invisible org-link line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1169) (undo-tree-id6309 . -26) (undo-tree-id6310 . -26) (undo-tree-id6311 . -26) (undo-tree-id6312 . -26) (undo-tree-id6313 . -26) (undo-tree-id6314 . -26) (undo-tree-id6315 . -26) (undo-tree-id6316 . -26) (undo-tree-id6317 . -26) (undo-tree-id6318 . -26) (undo-tree-id6319 . -26) (undo-tree-id6320 . -26) (undo-tree-id6321 . -26) (undo-tree-id6322 . -26) (undo-tree-id6323 . -26) (undo-tree-id6324 . -26) (undo-tree-id6325 . -27) (undo-tree-id6326 . -27)) ((1169 . 1196) (t 25772 49470 142895 958000)) (25772 49470 97848 758000) 0 nil])
([nil nil ((#("In such networks, " 0 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1199) (undo-tree-id6465 . -17) (undo-tree-id6466 . 18) (undo-tree-id6467 . -17) (undo-tree-id6468 . -17) (undo-tree-id6469 . -17) (undo-tree-id6470 . -18) (undo-tree-id6471 . -17) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -6) (undo-tree-id6502 . -6) (undo-tree-id6503 . -6) (undo-tree-id6504 . -6) (undo-tree-id6505 . -6) (undo-tree-id6506 . -6) (undo-tree-id6507 . -6) (undo-tree-id6508 . -6) (undo-tree-id6509 . -6) (undo-tree-id6510 . -6) (undo-tree-id6511 . -6) (undo-tree-id6512 . -6) (undo-tree-id6513 . -6) (undo-tree-id6514 . -6) (undo-tree-id6515 . -6) (undo-tree-id6516 . -6) (undo-tree-id6517 . -6) (undo-tree-id6518 . -6) (undo-tree-id6519 . -6) (undo-tree-id6520 . -6) (undo-tree-id6521 . -6) (undo-tree-id6522 . -6) (undo-tree-id6523 . -15) (undo-tree-id6524 . -15) (undo-tree-id6525 . -15) (undo-tree-id6526 . -15) (undo-tree-id6527 . -15) (undo-tree-id6528 . -15) (undo-tree-id6529 . -15) (undo-tree-id6530 . -15) (undo-tree-id6531 . -15) (undo-tree-id6532 . -15) (undo-tree-id6533 . -15) (undo-tree-id6534 . -15) (undo-tree-id6535 . -15) (undo-tree-id6536 . -15) (undo-tree-id6537 . -15) (undo-tree-id6538 . -15) (undo-tree-id6539 . -15) (undo-tree-id6540 . -15) (undo-tree-id6541 . -15) (undo-tree-id6542 . -15) (undo-tree-id6543 . -15) (undo-tree-id6544 . -15) (undo-tree-id6545 . -16) (undo-tree-id6546 . -16) (undo-tree-id6547 . -16) (undo-tree-id6548 . -16) (undo-tree-id6549 . -16) (undo-tree-id6550 . -16) (undo-tree-id6551 . -16) (undo-tree-id6552 . -16) (undo-tree-id6553 . -16) (undo-tree-id6554 . -16) (undo-tree-id6555 . -16) (undo-tree-id6556 . -16) (undo-tree-id6557 . -16) (undo-tree-id6558 . -16) (undo-tree-id6559 . -16) (undo-tree-id6560 . -16) (undo-tree-id6561 . -16) (undo-tree-id6562 . -16) (undo-tree-id6563 . -16) (undo-tree-id6564 . -16) (undo-tree-id6565 . -16) (undo-tree-id6566 . -16) (undo-tree-id6567 . -18) (undo-tree-id6568 . -18) (undo-tree-id6569 . -18) (undo-tree-id6570 . -18) (undo-tree-id6571 . -18) (undo-tree-id6572 . -18) (undo-tree-id6573 . -18) (undo-tree-id6574 . -18) (undo-tree-id6575 . -18) (undo-tree-id6576 . -18) (undo-tree-id6577 . -18) (undo-tree-id6578 . -18) (undo-tree-id6579 . -18) (undo-tree-id6580 . -18) (undo-tree-id6581 . -18) (undo-tree-id6582 . -18) (undo-tree-id6583 . -18) (undo-tree-id6584 . -18) (undo-tree-id6585 . -18) (undo-tree-id6586 . -18) (undo-tree-id6587 . -18) (undo-tree-id6588 . -18) (undo-tree-id6589 . -17) (undo-tree-id6590 . -17) (undo-tree-id6591 . -17) (undo-tree-id6592 . -17) (undo-tree-id6593 . -17) (undo-tree-id6594 . -17) (undo-tree-id6595 . -17) (undo-tree-id6596 . -17) (undo-tree-id6597 . -17) (undo-tree-id6598 . -17) (undo-tree-id6599 . -17) (undo-tree-id6600 . -17) (undo-tree-id6601 . -17) (undo-tree-id6602 . -17) (undo-tree-id6603 . -17) (undo-tree-id6604 . -17) (undo-tree-id6605 . -17) (undo-tree-id6606 . -17) (undo-tree-id6607 . -17) (undo-tree-id6608 . -17) (undo-tree-id6609 . -17) (undo-tree-id6610 . -17) (undo-tree-id6611 . -17) (undo-tree-id6612 . -18) 1216) nil (25772 49480 403717 75000) 0 nil])
nil
([nil nil ((1199 . 1200) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1199)) nil (25772 49480 403119 516000) 0 nil])
([nil nil ((#("In such networks we " 0 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1319) (undo-tree-id6631 . -19) (undo-tree-id6632 . -19) (undo-tree-id6633 . -19) (undo-tree-id6634 . -19) (undo-tree-id6635 . -2) (undo-tree-id6636 . -2) (undo-tree-id6637 . -2) (undo-tree-id6638 . -2) (undo-tree-id6639 . -2) (undo-tree-id6640 . -2) (undo-tree-id6641 . -2) (undo-tree-id6642 . -2) (undo-tree-id6643 . -20) (undo-tree-id6644 . -19) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -6) (undo-tree-id6654 . -6) (undo-tree-id6655 . -6) (undo-tree-id6656 . -6) (undo-tree-id6657 . -6) (undo-tree-id6658 . -6) (undo-tree-id6659 . -6) (undo-tree-id6660 . -6) (undo-tree-id6661 . -15) (undo-tree-id6662 . -15) (undo-tree-id6663 . -15) (undo-tree-id6664 . -15) (undo-tree-id6665 . -15) (undo-tree-id6666 . -15) (undo-tree-id6667 . -15) (undo-tree-id6668 . -15) (undo-tree-id6669 . -18) (undo-tree-id6670 . -18) (undo-tree-id6671 . -18) (undo-tree-id6672 . -18) (undo-tree-id6673 . -18) (undo-tree-id6674 . -18) (undo-tree-id6675 . -18) (undo-tree-id6676 . -18) (undo-tree-id6677 . -19) (undo-tree-id6678 . -19) (undo-tree-id6679 . -19) (undo-tree-id6680 . -19) (undo-tree-id6681 . -19) (undo-tree-id6682 . -19) (undo-tree-id6683 . -19) (undo-tree-id6684 . -19) (undo-tree-id6685 . -19) (undo-tree-id6686 . -20) 1338 (t 25772 49480 446514 215000)) nil (25772 49500 681384 204000) 0 nil])
([nil nil ((1319 . 1320) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1319)) nil (25772 49500 681298 89000) 0 nil])
([nil nil ((1319 . 1320) (#("F" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1319)) nil (25772 49500 681297 239000) 0 nil])
([nil nil ((1319 . 1320) (#("F" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1319) (undo-tree-id6630 . -1)) nil (25772 49500 681296 240000) 0 nil])
([nil nil ((1435 . 1436) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1435) (undo-tree-id6613 . -1) (1366 . 1367) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1366) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) 1319) nil (25772 49500 681291 303000) 0 nil])
([nil nil ((1319 . 1321)) nil (25772 49500 681268 625000) 0 nil])
([nil nil ((#(". This is a vector-to-sequence network. " 0 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 12 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1426) (undo-tree-id6687 . -39) (undo-tree-id6688 . -40) (undo-tree-id6689 . -40) (t 25772 49500 725764 806000)) nil (25772 49525 157549 615000) 0 nil])
([nil nil ((1426 . 1427) (t 25772 49525 200863 613000)) nil (25772 49548 624520 625000) 0 nil])
([nil nil ((1321 . 1322) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1321) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1)) nil (25772 49548 624518 626000) 0 nil])
([nil nil ((#("We " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1199) (undo-tree-id6690 . -2) (undo-tree-id6691 . -3) (undo-tree-id6692 . -3)) nil (25772 49548 624511 269000) 0 nil])
([nil nil ((1199 . 1200) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1199) (t 25772 49548 672002 615000)) nil (25772 49560 170649 361000) 0 nil])
([nil nil ((1318 . 1319) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1318)) nil (25772 49560 170648 278000) 0 nil])
([nil nil ((1318 . 1319) (#("F" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1318)) nil (25772 49560 170647 276000) 0 nil])
([nil nil ((1318 . 1319) (#("F" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1318) (undo-tree-id6697 . -1)) nil (25772 49560 170645 967000) 0 nil])
([nil nil ((1445 . 1447)) nil (25772 49560 170643 516000) 0 nil])
([nil nil ((1580 . 1581) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1580) (undo-tree-id6695 . -1) (1506 . 1507) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1506) (undo-tree-id6696 . -1) 1446) nil (25772 49560 170639 685000) 0 nil])
([nil nil ((#("If we have " 0 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1447) (undo-tree-id6749 . -10) (undo-tree-id6750 . 11) (undo-tree-id6751 . -10) (undo-tree-id6752 . -10) (undo-tree-id6753 . -10) (undo-tree-id6754 . -11) (undo-tree-id6755 . -10) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -4) (undo-tree-id6779 . -4) (undo-tree-id6780 . -4) (undo-tree-id6781 . -4) (undo-tree-id6782 . -4) (undo-tree-id6783 . -4) (undo-tree-id6784 . -4) (undo-tree-id6785 . -4) (undo-tree-id6786 . -4) (undo-tree-id6787 . -4) (undo-tree-id6788 . -4) (undo-tree-id6789 . -4) (undo-tree-id6790 . -4) (undo-tree-id6791 . -4) (undo-tree-id6792 . -4) (undo-tree-id6793 . -4) (undo-tree-id6794 . -4) (undo-tree-id6795 . -4) (undo-tree-id6796 . -4) (undo-tree-id6797 . -4) (undo-tree-id6798 . -4) (undo-tree-id6799 . -4) (undo-tree-id6800 . -4) (undo-tree-id6801 . -4) (undo-tree-id6802 . -4) (undo-tree-id6803 . -4) (undo-tree-id6804 . -4) (undo-tree-id6805 . -4) (undo-tree-id6806 . -4) (undo-tree-id6807 . -9) (undo-tree-id6808 . -9) (undo-tree-id6809 . -9) (undo-tree-id6810 . -9) (undo-tree-id6811 . -9) (undo-tree-id6812 . -9) (undo-tree-id6813 . -9) (undo-tree-id6814 . -9) (undo-tree-id6815 . -9) (undo-tree-id6816 . -9) (undo-tree-id6817 . -9) (undo-tree-id6818 . -9) (undo-tree-id6819 . -9) (undo-tree-id6820 . -9) (undo-tree-id6821 . -9) (undo-tree-id6822 . -9) (undo-tree-id6823 . -9) (undo-tree-id6824 . -9) (undo-tree-id6825 . -9) (undo-tree-id6826 . -9) (undo-tree-id6827 . -9) (undo-tree-id6828 . -9) (undo-tree-id6829 . -11) (undo-tree-id6830 . -11) (undo-tree-id6831 . -11) (undo-tree-id6832 . -11) (undo-tree-id6833 . -11) (undo-tree-id6834 . -11) (undo-tree-id6835 . -11) (undo-tree-id6836 . -11) (undo-tree-id6837 . -11) (undo-tree-id6838 . -11) (undo-tree-id6839 . -11) (undo-tree-id6840 . -11) (undo-tree-id6841 . -11) (undo-tree-id6842 . -11) (undo-tree-id6843 . -11) (undo-tree-id6844 . -11) (undo-tree-id6845 . -11) (undo-tree-id6846 . -11) (undo-tree-id6847 . -11) (undo-tree-id6848 . -11) (undo-tree-id6849 . -11) (undo-tree-id6850 . -11) (undo-tree-id6851 . -10) (undo-tree-id6852 . -10) (undo-tree-id6853 . -10) (undo-tree-id6854 . -10) (undo-tree-id6855 . -10) (undo-tree-id6856 . -10) (undo-tree-id6857 . -10) (undo-tree-id6858 . -10) (undo-tree-id6859 . -10) (undo-tree-id6860 . -10) (undo-tree-id6861 . -10) (undo-tree-id6862 . -10) (undo-tree-id6863 . -10) (undo-tree-id6864 . -10) (undo-tree-id6865 . -10) (undo-tree-id6866 . -10) (undo-tree-id6867 . -10) (undo-tree-id6868 . -10) (undo-tree-id6869 . -10) (undo-tree-id6870 . -10) (undo-tree-id6871 . -10) (undo-tree-id6872 . -10) (undo-tree-id6873 . -10) (undo-tree-id6874 . -11) 1457 (t 25772 49560 215580 269000)) nil (25772 49577 452150 33000) 0 nil])
([nil nil ((1447 . 1448) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1447)) nil (25772 49577 451813 111000) 0 nil])
([nil nil ((#("This two-step model, called an Encoder–Decoder. " 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1556) (undo-tree-id6698 . -47) (undo-tree-id6699 . -13) (undo-tree-id6700 . -13) (undo-tree-id6701 . -13) (undo-tree-id6702 . -13) (undo-tree-id6703 . -13) (undo-tree-id6704 . -13) (undo-tree-id6705 . -13) (undo-tree-id6706 . -13) (undo-tree-id6707 . -13) (undo-tree-id6708 . -13) (undo-tree-id6709 . -13) (undo-tree-id6710 . -13) (undo-tree-id6711 . -13) (undo-tree-id6712 . -13) (undo-tree-id6713 . -13) (undo-tree-id6714 . -13) (undo-tree-id6715 . -13) (undo-tree-id6716 . -13) (undo-tree-id6717 . -13) (undo-tree-id6718 . -13) (undo-tree-id6719 . -13) (undo-tree-id6720 . -13) (undo-tree-id6721 . -13) (undo-tree-id6722 . -13) (undo-tree-id6723 . -13) (undo-tree-id6724 . -13) (undo-tree-id6725 . -13) (undo-tree-id6726 . -13) (undo-tree-id6727 . -13) (undo-tree-id6728 . -13) (undo-tree-id6729 . -13) (undo-tree-id6730 . -13) (undo-tree-id6731 . -13) (undo-tree-id6732 . -3) (undo-tree-id6733 . -3) (undo-tree-id6734 . -3) (undo-tree-id6735 . -3) (undo-tree-id6736 . -3) (undo-tree-id6737 . -3) (undo-tree-id6738 . -3) (undo-tree-id6739 . -3) (undo-tree-id6740 . -3) (undo-tree-id6741 . -3) (undo-tree-id6742 . -3) (undo-tree-id6743 . -3) (undo-tree-id6744 . -3) (undo-tree-id6745 . -3) (undo-tree-id6746 . -3) (undo-tree-id6747 . -48) (undo-tree-id6748 . -48)) nil (25772 49577 451807 61000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1426) (undo-tree-id6875 . -1) (t 25772 49577 494949 395000)) nil (25772 49580 861309 620000) 0 nil])
([nil nil ((1573 . 1733) (#("- and then simply use
  regular backpropagation. This strategy is called backpropagation through 
  time (BPTT). 

- To train an RNN, the unroll it through time" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 22 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 22 98 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 98 113 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 113 114 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 114 115 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 115 116 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 116 160 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1573) (undo-tree-id6983 . -117) (undo-tree-id6984 . -117) (undo-tree-id6985 . -117) (undo-tree-id6986 . -117) (undo-tree-id6987 . -117) (undo-tree-id6988 . -117) (undo-tree-id6989 . -117) (undo-tree-id6990 . -117) (undo-tree-id6991 . -117) (undo-tree-id6992 . -117) (undo-tree-id6993 . -117) (undo-tree-id6994 . -117) (undo-tree-id6995 . -117) (undo-tree-id6996 . -117) (undo-tree-id6997 . -160) (undo-tree-id6998 . -117) (undo-tree-id6999 . -117) (undo-tree-id7000 . -117) (undo-tree-id7001 . -117) (undo-tree-id7002 . -117) (undo-tree-id7003 . -117) (undo-tree-id7004 . -117) (undo-tree-id7005 . -117) (undo-tree-id7006 . -117) (undo-tree-id7007 . -117) (undo-tree-id7008 . -117) (undo-tree-id7009 . -160) (undo-tree-id7010 . -160) (undo-tree-id7011 . -160) (undo-tree-id7012 . -160) (undo-tree-id7013 . -160) (undo-tree-id7014 . -160) (undo-tree-id7015 . -160) (undo-tree-id7016 . -160) (undo-tree-id7017 . -160) (undo-tree-id7018 . -160) (undo-tree-id7019 . -160) (undo-tree-id7020 . -160) (undo-tree-id7021 . -160) (undo-tree-id7022 . -160) (undo-tree-id7023 . -160) (undo-tree-id7024 . -160) (undo-tree-id7025 . -160) (undo-tree-id7026 . -160) (undo-tree-id7027 . -160) (undo-tree-id7028 . -160) (undo-tree-id7029 . -160) (undo-tree-id7030 . -160) (undo-tree-id7031 . -115) (1573 . 1688) (#("  and then simply use
  regular backpropagation. This strategy is called backpropagation through 
  time (BPTT). " 0 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 22 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1618) (undo-tree-id7032 . -2) (undo-tree-id7033 . -4) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -2) (undo-tree-id7046 . -2) (undo-tree-id7047 . -2) (undo-tree-id7048 . -2) (undo-tree-id7049 . -2) (undo-tree-id7050 . -2) (undo-tree-id7051 . -2) (undo-tree-id7052 . -2) (undo-tree-id7053 . -2) (undo-tree-id7054 . -2) 1620 (1619 . 1620) (t 25772 49580 906825 9000)) nil (25772 49651 817994 265000) 0 nil])
([nil nil ((1714 . 1715) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1714) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1715) (undo-tree-id6981 . -1) (1641 . 1642) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1641) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1641) (undo-tree-id6982 . -1) 1622) nil (25772 49651 816905 516000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1727) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1728) (undo-tree-id6978 . -1) 1714) nil (25772 49651 816898 706000) 0 nil])
([nil nil ((1726 . 1727) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1726) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1)) nil (25772 49651 816892 805000) 0 nil])
([nil nil ((1622 . 1623) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1622)) nil (25772 49651 816888 531000) 0 nil])
([nil nil ((1665 . 1667) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1665) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1)) nil (25772 49651 816886 397000) 0 nil])
([nil nil ((#("This " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1668) (undo-tree-id6954 . -4) (undo-tree-id6955 . -5)) nil (25772 49651 816871 703000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1667) (undo-tree-id6888 . 1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1)) nil (25772 49651 816821 795000) 0 nil])
([nil nil ((#("strategy " 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1667) (undo-tree-id6885 . -8) (undo-tree-id6886 . 9) (undo-tree-id6887 . -9)) nil (25772 49651 816691 878000) 0 nil])
([nil nil ((#("is " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1667) (undo-tree-id6882 . -2) (undo-tree-id6883 . 3) (undo-tree-id6884 . -3)) nil (25772 49651 816688 871000) 0 nil])
([nil nil ((#("called " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1667) (undo-tree-id6879 . -6) (undo-tree-id6880 . 7) (undo-tree-id6881 . -7)) nil (25772 49651 816684 363000) 0 nil])
([nil nil ((1702 . 1703)) nil (25772 49651 816680 585000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1703) (undo-tree-id6876 . 1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1)) nil (25772 49651 816676 641000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1704) (undo-tree-id7055 . -2) (undo-tree-id7056 . -2) (undo-tree-id7057 . -2) (undo-tree-id7058 . -2) (undo-tree-id7059 . -2) (undo-tree-id7060 . -2) (undo-tree-id7061 . -2) (undo-tree-id7062 . -2) (undo-tree-id7063 . -2) (undo-tree-id7064 . -2) (undo-tree-id7065 . -2) (undo-tree-id7066 . -2) 1706 (1703 . 1706) (t 25772 49651 912249 389000) 1622) nil (25772 49684 593760 582000) 0 nil])
([nil nil ((2052 . 2053) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2052) (t 25772 49661 875889 847000)) nil (25772 49692 949699 348000) 0 nil] [nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2052) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (t 25772 49661 875889 847000)) ((2052 . 2053)) (25772 49684 593384 43000) 0 nil])
([nil nil ((2052 . 2053) (#("S" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2052)) nil (25772 49692 949697 878000) 0 nil])
nil
([nil nil ((2052 . 2053) (#("S" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2052) (undo-tree-id7089 . -1)) nil (25772 49692 949696 838000) 0 nil])
([nil nil ((2113 . 2114) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2113) (undo-tree-id7073 . -2) (undo-tree-id7074 . -2) (undo-tree-id7075 . -2) (undo-tree-id7076 . -2) (undo-tree-id7077 . -2) (undo-tree-id7078 . -2) (undo-tree-id7079 . -2) (undo-tree-id7080 . -2) (undo-tree-id7081 . -2) (undo-tree-id7082 . -2) (undo-tree-id7083 . -2) (undo-tree-id7084 . -2) (undo-tree-id7085 . -2) (undo-tree-id7086 . -2) (undo-tree-id7087 . -2) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2113) (undo-tree-id7088 . -1) 2052) nil (25772 49692 949694 431000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2182) (undo-tree-id7072 . -1) 2113) nil (25772 49692 950023 804000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2183) (undo-tree-id7091 . -2) (undo-tree-id7092 . -2) (undo-tree-id7093 . -2) (undo-tree-id7094 . -2) (undo-tree-id7095 . -2) (undo-tree-id7096 . -2) (undo-tree-id7097 . -2) (undo-tree-id7098 . -2) (undo-tree-id7099 . -2) (undo-tree-id7100 . -2) (undo-tree-id7101 . -2) (undo-tree-id7102 . -2) 2185 (2182 . 2185) 2181) nil (25772 49695 230037 14000) 0 nil] [nil nil ((2181 . 2182) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2181) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1)) ((2181 . 2182) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2181) (undo-tree-id7090 . -1)) (25772 49692 949675 838000) 0 nil])
([nil nil ((2253 . 2254) (t 25772 49695 274687 753000)) nil (25772 49714 289036 44000) 0 nil])
nil
([nil nil ((#("- Time series  
" 0 1 (fontified t composition (1 1 [8226]) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2212) (undo-tree-id7555 . -15) (undo-tree-id7556 . -16) (undo-tree-id7557 . -16) (undo-tree-id7558 . -16) (undo-tree-id7559 . -16) (undo-tree-id7560 . -16) (undo-tree-id7561 . -16) (undo-tree-id7562 . -16) (undo-tree-id7563 . -16) (undo-tree-id7564 . -16) (t 25772 49714 378002 261000)) nil (25772 49835 614490 548000) 0 nil])
([nil nil ((#("-- Univariate time series 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2212) (undo-tree-id7542 . -26) (undo-tree-id7543 . 1) (undo-tree-id7544 . 24) (undo-tree-id7545 . -13) (undo-tree-id7546 . -27) (undo-tree-id7547 . -27) (undo-tree-id7548 . -27) (undo-tree-id7549 . -27) (undo-tree-id7550 . -27) (undo-tree-id7551 . -27) (undo-tree-id7552 . -27) (undo-tree-id7553 . -27) (undo-tree-id7554 . -27)) nil (25772 49835 614482 716000) 0 nil])
([nil nil ((#("-- Multivariate time series. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2212) (undo-tree-id7531 . -29) (undo-tree-id7532 . 30) (undo-tree-id7533 . -30) (undo-tree-id7534 . -30) (undo-tree-id7535 . -30) (undo-tree-id7536 . -30) (undo-tree-id7537 . -30) (undo-tree-id7538 . -30) (undo-tree-id7539 . -30) (undo-tree-id7540 . -30) (undo-tree-id7541 . -30)) nil (25772 49835 614471 829000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2212) (undo-tree-id7521 . 1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1)) nil (25772 49835 614461 122000) 0 nil])
([nil nil ((#("*Forcasting:* To predict future values.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 1 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 13 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2212) (undo-tree-id7486 . -39) (undo-tree-id7487 . 40) (undo-tree-id7488 . -40) (undo-tree-id7489 . -40) (undo-tree-id7490 . -40) (undo-tree-id7491 . -40) (undo-tree-id7492 . -40) (undo-tree-id7493 . -40) (undo-tree-id7494 . -40) (undo-tree-id7495 . -40) (undo-tree-id7496 . -1) (undo-tree-id7497 . -39) (undo-tree-id7498 . 39) (undo-tree-id7499 . -11) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -40) 2213) nil (25772 49835 614450 133000) 0 nil])
([nil nil ((#("*Imputation:* To fill in the blanks or to predict missing values from the
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 1 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 13 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2212) (undo-tree-id7443 . -73) (undo-tree-id7444 . 74) (undo-tree-id7445 . -74) (undo-tree-id7446 . -74) (undo-tree-id7447 . -74) (undo-tree-id7448 . -74) (undo-tree-id7449 . -74) (undo-tree-id7450 . -74) (undo-tree-id7451 . -74) (undo-tree-id7452 . -74) (undo-tree-id7453 . -74) (undo-tree-id7454 . -74) (undo-tree-id7455 . -74) (undo-tree-id7456 . -74) (undo-tree-id7457 . -74) (undo-tree-id7458 . -74) (undo-tree-id7459 . -74) (undo-tree-id7460 . -74) (undo-tree-id7461 . -74) (undo-tree-id7462 . -74) (undo-tree-id7463 . -1) (undo-tree-id7464 . -73) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -74) 2213) nil (25772 49835 614029 233000) 0 nil])
([nil nil ((#(" past
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 1 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 2212) (undo-tree-id7440 . -5) (undo-tree-id7441 . 6) (undo-tree-id7442 . -6)) nil (25772 49835 613943 228000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2212) (undo-tree-id7438 . 1) (undo-tree-id7439 . -1)) nil (25772 49835 613940 87000) 0 nil])
([nil nil ((2214 . 2216)) nil (25772 49835 613937 829000) 0 nil])
([nil nil ((2216 . 2217) (#("For simplicity, we are u" 0 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2216) (undo-tree-id7420 . -23) (undo-tree-id7421 . 24) (undo-tree-id7422 . -23) (undo-tree-id7423 . -23) (undo-tree-id7424 . -23) (undo-tree-id7425 . -24) (undo-tree-id7426 . -23) (undo-tree-id7427 . -2) (undo-tree-id7428 . -13) (undo-tree-id7429 . -14) (undo-tree-id7430 . -17) (undo-tree-id7431 . -21) (undo-tree-id7432 . -24) (undo-tree-id7433 . -23) (undo-tree-id7434 . -23) (undo-tree-id7435 . -24) (undo-tree-id7436 . -24) (undo-tree-id7437 . -24) 2239) nil (25772 49835 613936 102000) 0 nil])
([nil nil ((2963 . 2965)) nil (25772 49835 613922 574000) 0 nil])
([nil nil ((2962 . 2963) 2954) nil (25772 49835 613921 136000) 0 nil])
([nil nil ((#("returning a NumPy array" 0 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3007) (undo-tree-id7351 . -22) (undo-tree-id7352 . -22) (undo-tree-id7353 . -22) (undo-tree-id7354 . -22) (undo-tree-id7355 . -8) (undo-tree-id7356 . -10) (undo-tree-id7357 . -16) (undo-tree-id7358 . -16) (undo-tree-id7359 . -16) (undo-tree-id7360 . -16) (undo-tree-id7361 . -16) (undo-tree-id7362 . -16) (undo-tree-id7363 . -16) (undo-tree-id7364 . -16) (undo-tree-id7365 . -22) (undo-tree-id7366 . -23) (undo-tree-id7367 . -22) (undo-tree-id7368 . -8) (undo-tree-id7369 . -8) (undo-tree-id7370 . -8) (undo-tree-id7371 . -8) (undo-tree-id7372 . -8) (undo-tree-id7373 . -8) (undo-tree-id7374 . -8) (undo-tree-id7375 . -8) (undo-tree-id7376 . -10) (undo-tree-id7377 . -10) (undo-tree-id7378 . -10) (undo-tree-id7379 . -10) (undo-tree-id7380 . -10) (undo-tree-id7381 . -10) (undo-tree-id7382 . -10) (undo-tree-id7383 . -10) (undo-tree-id7384 . 11) (undo-tree-id7385 . -17) (undo-tree-id7386 . -16) (undo-tree-id7387 . -16) (undo-tree-id7388 . -16) (undo-tree-id7389 . -16) (undo-tree-id7390 . -16) (undo-tree-id7391 . -16) (undo-tree-id7392 . -16) (undo-tree-id7393 . -16) (undo-tree-id7394 . -22) (undo-tree-id7395 . -22) (undo-tree-id7396 . -22) (undo-tree-id7397 . -22) (undo-tree-id7398 . -22) (undo-tree-id7399 . -22) (undo-tree-id7400 . -22) (undo-tree-id7401 . -22) (undo-tree-id7402 . -23) (undo-tree-id7403 . -23) (undo-tree-id7404 . -23) (undo-tree-id7405 . -23) (undo-tree-id7406 . -23) (undo-tree-id7407 . -23) (undo-tree-id7408 . -23) (undo-tree-id7409 . -23) (undo-tree-id7410 . -22) (undo-tree-id7411 . -22) (undo-tree-id7412 . -22) (undo-tree-id7413 . -22) (undo-tree-id7414 . -22) (undo-tree-id7415 . -22) (undo-tree-id7416 . -22) (undo-tree-id7417 . -22) (undo-tree-id7418 . -22) (undo-tree-id7419 . -23) 3029) nil (25772 49835 613917 712000) 0 nil])
([nil nil ((3016 . 3017) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3016) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) 3007) nil (25772 49835 613820 416000) 0 nil])
([nil nil ((3045 . 3047) (3044 . 3045)) nil (25772 49835 613808 990000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7339 . 1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1)) nil (25772 49835 613807 320000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7321 . 1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1)) nil (25772 49835 613801 424000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7318 . 1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1)) nil (25772 49835 613682 691000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7315 . 1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1)) nil (25772 49835 613679 477000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7312 . 1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1)) nil (25772 49835 613676 233000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7309 . 1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1)) nil (25772 49835 613672 935000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7306 . 1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1)) nil (25772 49835 613669 443000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047) (undo-tree-id7303 . 1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1)) nil (25772 49835 613665 712000) 0 nil])
([nil nil ((3047 . 3048) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3047)) nil (25772 49835 613661 998000) 0 nil])
([nil nil ((3090 . 3091) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3090) (undo-tree-id7302 . -1) 3057) nil (25772 49835 613659 951000) 0 nil])
([nil nil ((3143 . 3145) (3142 . 3143) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3142) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) (undo-tree-id7127 . -1) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3143) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3144) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) 3145 (3143 . 3145)) nil (25772 49835 613644 282000) 0 nil])
([nil nil ((3145 . 3146) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3145) (t 25772 49835 705680 182000)) nil (25772 49837 705194 110000) 0 nil])
([nil nil ((3186 . 3188) (t 25772 49837 745607 937000)) nil (25772 49848 745121 941000) 0 nil])
([nil nil ((3334 . 3335) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3334) (undo-tree-id7565 . -1) (3262 . 3263) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3262) (undo-tree-id7566 . -1) 3187) nil (25772 49848 745117 969000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3253) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) (undo-tree-id9715 . -1) (undo-tree-id9716 . -1) (undo-tree-id9717 . -1) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) (undo-tree-id9720 . -1) (undo-tree-id9721 . -1) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) 3254 (3253 . 3254) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3253) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -1) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (t 25772 49848 789217 44000)) nil (25772 49906 722255 974000) 0 nil])
([nil nil ((3254 . 3255)) nil (25772 49906 722224 647000) 0 nil])
([nil nil ((#("The simplest approach is to " 0 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3188) (undo-tree-id9566 . -27) (undo-tree-id9567 . -27) (undo-tree-id9568 . -27) (undo-tree-id9569 . -27) (undo-tree-id9570 . -28) (undo-tree-id9571 . -27) (undo-tree-id9572 . -2) (undo-tree-id9573 . -2) (undo-tree-id9574 . -2) (undo-tree-id9575 . -2) (undo-tree-id9576 . -2) (undo-tree-id9577 . -2) (undo-tree-id9578 . -2) (undo-tree-id9579 . -2) (undo-tree-id9580 . -2) (undo-tree-id9581 . -2) (undo-tree-id9582 . -2) (undo-tree-id9583 . -2) (undo-tree-id9584 . -2) (undo-tree-id9585 . -2) (undo-tree-id9586 . -2) (undo-tree-id9587 . -2) (undo-tree-id9588 . -2) (undo-tree-id9589 . -2) (undo-tree-id9590 . -2) (undo-tree-id9591 . -2) (undo-tree-id9592 . -2) (undo-tree-id9593 . -2) (undo-tree-id9594 . -2) (undo-tree-id9595 . -2) (undo-tree-id9596 . -2) (undo-tree-id9597 . -2) (undo-tree-id9598 . -2) (undo-tree-id9599 . -2) (undo-tree-id9600 . -2) (undo-tree-id9601 . -11) (undo-tree-id9602 . -11) (undo-tree-id9603 . -11) (undo-tree-id9604 . -11) (undo-tree-id9605 . -11) (undo-tree-id9606 . -11) (undo-tree-id9607 . -11) (undo-tree-id9608 . -11) (undo-tree-id9609 . -11) (undo-tree-id9610 . -11) (undo-tree-id9611 . -11) (undo-tree-id9612 . -11) (undo-tree-id9613 . -11) (undo-tree-id9614 . -11) (undo-tree-id9615 . -11) (undo-tree-id9616 . -11) (undo-tree-id9617 . -11) (undo-tree-id9618 . -11) (undo-tree-id9619 . -11) (undo-tree-id9620 . -11) (undo-tree-id9621 . -11) (undo-tree-id9622 . -11) (undo-tree-id9623 . -20) (undo-tree-id9624 . -20) (undo-tree-id9625 . -20) (undo-tree-id9626 . -20) (undo-tree-id9627 . -20) (undo-tree-id9628 . -20) (undo-tree-id9629 . -20) (undo-tree-id9630 . -20) (undo-tree-id9631 . -20) (undo-tree-id9632 . -20) (undo-tree-id9633 . -20) (undo-tree-id9634 . -20) (undo-tree-id9635 . -20) (undo-tree-id9636 . -20) (undo-tree-id9637 . -20) (undo-tree-id9638 . -20) (undo-tree-id9639 . -20) (undo-tree-id9640 . -20) (undo-tree-id9641 . -20) (undo-tree-id9642 . -20) (undo-tree-id9643 . -20) (undo-tree-id9644 . -20) (undo-tree-id9645 . -23) (undo-tree-id9646 . -23) (undo-tree-id9647 . -23) (undo-tree-id9648 . -23) (undo-tree-id9649 . -23) (undo-tree-id9650 . -23) (undo-tree-id9651 . -23) (undo-tree-id9652 . -23) (undo-tree-id9653 . -23) (undo-tree-id9654 . -23) (undo-tree-id9655 . -23) (undo-tree-id9656 . -23) (undo-tree-id9657 . -23) (undo-tree-id9658 . -23) (undo-tree-id9659 . -23) (undo-tree-id9660 . -23) (undo-tree-id9661 . -23) (undo-tree-id9662 . -23) (undo-tree-id9663 . -23) (undo-tree-id9664 . -23) (undo-tree-id9665 . -23) (undo-tree-id9666 . -23) (undo-tree-id9667 . -26) (undo-tree-id9668 . -26) (undo-tree-id9669 . -26) (undo-tree-id9670 . -26) (undo-tree-id9671 . -26) (undo-tree-id9672 . -26) (undo-tree-id9673 . -26) (undo-tree-id9674 . -26) (undo-tree-id9675 . -26) (undo-tree-id9676 . -26) (undo-tree-id9677 . -26) (undo-tree-id9678 . -26) (undo-tree-id9679 . -26) (undo-tree-id9680 . -26) (undo-tree-id9681 . -26) (undo-tree-id9682 . -26) (undo-tree-id9683 . -26) (undo-tree-id9684 . -26) (undo-tree-id9685 . -26) (undo-tree-id9686 . -26) (undo-tree-id9687 . -26) (undo-tree-id9688 . -26) (undo-tree-id9689 . -27) (undo-tree-id9690 . -27) (undo-tree-id9691 . -27) (undo-tree-id9692 . -27) (undo-tree-id9693 . -27) (undo-tree-id9694 . -27) (undo-tree-id9695 . -27) (undo-tree-id9696 . -27) (undo-tree-id9697 . -27) (undo-tree-id9698 . -27) (undo-tree-id9699 . -27) (undo-tree-id9700 . -27) (undo-tree-id9701 . -27) (undo-tree-id9702 . -27) (undo-tree-id9703 . -27) (undo-tree-id9704 . -27) (undo-tree-id9705 . -27) (undo-tree-id9706 . -27) (undo-tree-id9707 . -27) (undo-tree-id9708 . -27) (undo-tree-id9709 . -27) (undo-tree-id9710 . -27) (undo-tree-id9711 . -27) (undo-tree-id9712 . -28) 3215) nil (25772 49906 722219 425000) 0 nil])
([nil nil ((3188 . 3189) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3188)) nil (25772 49906 722134 208000) 0 nil])
([nil nil ((#("This " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3227) (undo-tree-id9511 . -4) (undo-tree-id9512 . 5) (undo-tree-id9513 . -3) (undo-tree-id9514 . -3) (undo-tree-id9515 . -3) (undo-tree-id9516 . -3) (undo-tree-id9517 . -3) (undo-tree-id9518 . -3) (undo-tree-id9519 . -3) (undo-tree-id9520 . -3) (undo-tree-id9521 . -3) (undo-tree-id9522 . -3) (undo-tree-id9523 . -3) (undo-tree-id9524 . -3) (undo-tree-id9525 . -3) (undo-tree-id9526 . -3) (undo-tree-id9527 . -3) (undo-tree-id9528 . -2) (undo-tree-id9529 . -2) (undo-tree-id9530 . -2) (undo-tree-id9531 . -2) (undo-tree-id9532 . -2) (undo-tree-id9533 . -2) (undo-tree-id9534 . -2) (undo-tree-id9535 . -2) (undo-tree-id9536 . -2) (undo-tree-id9537 . -2) (undo-tree-id9538 . -2) (undo-tree-id9539 . -2) (undo-tree-id9540 . -2) (undo-tree-id9541 . -2) (undo-tree-id9542 . -2) (undo-tree-id9543 . -1) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) (undo-tree-id9549 . -1) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (undo-tree-id9561 . -1) (undo-tree-id9562 . -1) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -5)) nil (25772 49906 722131 659000) 0 nil])
([nil nil ((#("is " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3227) (undo-tree-id9508 . -2) (undo-tree-id9509 . 3) (undo-tree-id9510 . -3)) nil (25772 49906 722095 790000) 0 nil])
([nil nil ((#("called " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3227) (undo-tree-id9505 . -6) (undo-tree-id9506 . 7) (undo-tree-id9507 . -7)) nil (25772 49906 722092 740000) 0 nil])
([nil nil ((3244 . 3245)) nil (25772 49906 722089 726000) 0 nil])
([nil nil ((3186 . 3370) (#("- , and it is sometimes surprisingly difficult to outperform. In this case, it gives us a mean squared error of about 0.020:
- Predict the last value in each series (naive forecasting)" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 49 50 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 50 124 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 124 125 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 125 126 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 126 127 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 127 166 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 166 184 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3186) (undo-tree-id8283 . -166) (undo-tree-id8284 . -166) (undo-tree-id8285 . -127) (undo-tree-id8286 . -127) (undo-tree-id8287 . 56) (undo-tree-id8288 . -127) (undo-tree-id8289 . -127) (undo-tree-id8290 . -184) (undo-tree-id8291 . -184) (undo-tree-id8292 . -184) (undo-tree-id8293 . -184) (undo-tree-id8294 . -184) (undo-tree-id8295 . -184) (undo-tree-id8296 . -184) (undo-tree-id8297 . -184) (undo-tree-id8298 . -184) (undo-tree-id8299 . -184) (undo-tree-id8300 . -184) (undo-tree-id8301 . -184) (undo-tree-id8302 . -184) (undo-tree-id8303 . -184) (undo-tree-id8304 . -184) (undo-tree-id8305 . -184) (undo-tree-id8306 . -184) (undo-tree-id8307 . -184) (undo-tree-id8308 . -184) (undo-tree-id8309 . -184) (undo-tree-id8310 . -184) (undo-tree-id8311 . -184) (undo-tree-id8312 . -184) (undo-tree-id8313 . -184) (undo-tree-id8314 . -184) (undo-tree-id8315 . -184) (undo-tree-id8316 . -184) (undo-tree-id8317 . -184) (undo-tree-id8318 . -184) (undo-tree-id8319 . -184) (undo-tree-id8320 . -184) (undo-tree-id8321 . -184) (undo-tree-id8322 . -184) (undo-tree-id8323 . -184) (undo-tree-id8324 . -184) (undo-tree-id8325 . -184) (undo-tree-id8326 . -184) (undo-tree-id8327 . -184) (undo-tree-id8328 . -184) (undo-tree-id8329 . -184) (undo-tree-id8330 . -184) (undo-tree-id8331 . -157) (undo-tree-id8332 . -157) (undo-tree-id8333 . -157) (undo-tree-id8334 . -157) (undo-tree-id8335 . -157) (undo-tree-id8336 . -157) (undo-tree-id8337 . -157) (undo-tree-id8338 . -157) (undo-tree-id8339 . -157) (undo-tree-id8340 . -157) (undo-tree-id8341 . -157) (undo-tree-id8342 . -157) (undo-tree-id8343 . -157) (undo-tree-id8344 . -157) (undo-tree-id8345 . -157) (undo-tree-id8346 . -127) (undo-tree-id8347 . -127) (undo-tree-id8348 . -127) (undo-tree-id8349 . -127) (undo-tree-id8350 . -127) (undo-tree-id8351 . -127) (undo-tree-id8352 . -127) (undo-tree-id8353 . -127) (undo-tree-id8354 . -127) (undo-tree-id8355 . -127) (undo-tree-id8356 . -127) (undo-tree-id8357 . -127) (undo-tree-id8358 . -127) (undo-tree-id8359 . -127) (undo-tree-id8360 . -127) (undo-tree-id8361 . -127) (undo-tree-id8362 . -127) (undo-tree-id8363 . -127) (undo-tree-id8364 . -127) (undo-tree-id8365 . -127) (undo-tree-id8366 . -127) (undo-tree-id8367 . -127) (undo-tree-id8368 . -127) (undo-tree-id8369 . -127) (undo-tree-id8370 . -127) (undo-tree-id8371 . -127) (undo-tree-id8372 . -127) (undo-tree-id8373 . -127) (undo-tree-id8374 . -127) (undo-tree-id8375 . -127) (undo-tree-id8376 . -127) (undo-tree-id8377 . -127) (undo-tree-id8378 . -127) (undo-tree-id8379 . -127) (undo-tree-id8380 . -127) (undo-tree-id8381 . -127) (undo-tree-id8382 . -127) (undo-tree-id8383 . -127) (undo-tree-id8384 . -127) (undo-tree-id8385 . -127) (undo-tree-id8386 . -127) (undo-tree-id8387 . -127) (undo-tree-id8388 . -127) (undo-tree-id8389 . -127) (undo-tree-id8390 . -127) (undo-tree-id8391 . -127) (undo-tree-id8392 . -127) (undo-tree-id8393 . -127) (undo-tree-id8394 . -127) (undo-tree-id8395 . -127) (undo-tree-id8396 . -127) (undo-tree-id8397 . -127) (undo-tree-id8398 . -127) (undo-tree-id8399 . -127) (undo-tree-id8400 . -127) (undo-tree-id8401 . -127) (undo-tree-id8402 . -127) (undo-tree-id8403 . -164) (undo-tree-id8404 . -164) (undo-tree-id8405 . -164) (undo-tree-id8406 . -164) (undo-tree-id8407 . -164) (undo-tree-id8408 . -164) (undo-tree-id8409 . -164) (undo-tree-id8410 . -164) (undo-tree-id8411 . -164) (undo-tree-id8412 . -164) (undo-tree-id8413 . -164) (undo-tree-id8414 . -164) (undo-tree-id8415 . -164) (undo-tree-id8416 . -164) (undo-tree-id8417 . -164) (undo-tree-id8418 . -165) (undo-tree-id8419 . -165) (undo-tree-id8420 . -165) (undo-tree-id8421 . -165) (undo-tree-id8422 . -165) (undo-tree-id8423 . -165) (undo-tree-id8424 . -165) (undo-tree-id8425 . -165) (undo-tree-id8426 . -165) (undo-tree-id8427 . -165) (undo-tree-id8428 . -165) (undo-tree-id8429 . -165) (undo-tree-id8430 . -165) (undo-tree-id8431 . -165) (undo-tree-id8432 . -165) (undo-tree-id8433 . -165) (undo-tree-id8434 . -165) (undo-tree-id8435 . -165) (undo-tree-id8436 . -165) (undo-tree-id8437 . -165) (undo-tree-id8438 . -165) (undo-tree-id8439 . -165) (undo-tree-id8440 . -165) (undo-tree-id8441 . -165) (undo-tree-id8442 . -165) (undo-tree-id8443 . -165) (undo-tree-id8444 . -165) (undo-tree-id8445 . -165) (undo-tree-id8446 . -165) (undo-tree-id8447 . -165) (undo-tree-id8448 . -165) (undo-tree-id8449 . -165) (undo-tree-id8450 . -165) (undo-tree-id8451 . -165) (undo-tree-id8452 . -165) (undo-tree-id8453 . -165) (undo-tree-id8454 . -165) (undo-tree-id8455 . -165) (undo-tree-id8456 . -165) (undo-tree-id8457 . -165) (undo-tree-id8458 . -165) (undo-tree-id8459 . -165) (undo-tree-id8460 . -165) (undo-tree-id8461 . -165) (undo-tree-id8462 . -165) (undo-tree-id8463 . -165) (undo-tree-id8464 . -164) (undo-tree-id8465 . -164) (undo-tree-id8466 . -164) (undo-tree-id8467 . -164) (undo-tree-id8468 . -164) (undo-tree-id8469 . -164) (undo-tree-id8470 . -164) (undo-tree-id8471 . -164) (undo-tree-id8472 . -164) (undo-tree-id8473 . -164) (undo-tree-id8474 . -164) (undo-tree-id8475 . -164) (undo-tree-id8476 . -164) (undo-tree-id8477 . -164) (undo-tree-id8478 . -164) (undo-tree-id8479 . -164) (undo-tree-id8480 . -164) (undo-tree-id8481 . -164) (undo-tree-id8482 . -164) (undo-tree-id8483 . -164) (undo-tree-id8484 . -164) (undo-tree-id8485 . -164) (undo-tree-id8486 . -164) (undo-tree-id8487 . -164) (undo-tree-id8488 . -164) (undo-tree-id8489 . -164) (undo-tree-id8490 . -164) (undo-tree-id8491 . -164) (undo-tree-id8492 . -164) (undo-tree-id8493 . -164) (undo-tree-id8494 . -164) (undo-tree-id8495 . -164) (undo-tree-id8496 . -164) (undo-tree-id8497 . -164) (undo-tree-id8498 . -164) (undo-tree-id8499 . -164) (undo-tree-id8500 . -164) (undo-tree-id8501 . -164) (undo-tree-id8502 . -164) (undo-tree-id8503 . -164) (undo-tree-id8504 . -164) (undo-tree-id8505 . -164) (undo-tree-id8506 . -164) (undo-tree-id8507 . -164) (undo-tree-id8508 . -164) (undo-tree-id8509 . -164) (undo-tree-id8510 . -164) (undo-tree-id8511 . -164) (undo-tree-id8512 . -164) (undo-tree-id8513 . -164) (undo-tree-id8514 . -164) (undo-tree-id8515 . -164) (undo-tree-id8516 . -164) (undo-tree-id8517 . -164) (undo-tree-id8518 . -164) (undo-tree-id8519 . -164) (undo-tree-id8520 . -164) (undo-tree-id8521 . -164) (undo-tree-id8522 . -164) (undo-tree-id8523 . -164) (undo-tree-id8524 . -164) (undo-tree-id8525 . -164) (undo-tree-id8526 . -164) (undo-tree-id8527 . -164) (undo-tree-id8528 . -164) (undo-tree-id8529 . -164) (undo-tree-id8530 . -164) (undo-tree-id8531 . -164) (undo-tree-id8532 . -164) (undo-tree-id8533 . -164) (undo-tree-id8534 . -164) (undo-tree-id8535 . -164) (undo-tree-id8536 . -164) (undo-tree-id8537 . -164) (undo-tree-id8538 . -164) (undo-tree-id8539 . -164) (undo-tree-id8540 . -164) (undo-tree-id8541 . -164) (undo-tree-id8542 . -164) (undo-tree-id8543 . -164) (undo-tree-id8544 . -164) (undo-tree-id8545 . -164) (undo-tree-id8546 . -164) (undo-tree-id8547 . -164) (undo-tree-id8548 . -164) (undo-tree-id8549 . -164) (undo-tree-id8550 . -164) (undo-tree-id8551 . -164) (undo-tree-id8552 . -164) (undo-tree-id8553 . -164) (undo-tree-id8554 . -164) (undo-tree-id8555 . -164) (undo-tree-id8556 . -164) (undo-tree-id8557 . -164) (undo-tree-id8558 . -164) (undo-tree-id8559 . -164) (undo-tree-id8560 . -164) (undo-tree-id8561 . -164) (undo-tree-id8562 . -164) (undo-tree-id8563 . -164) (undo-tree-id8564 . -164) (undo-tree-id8565 . -164) (undo-tree-id8566 . -164) (undo-tree-id8567 . -163) (undo-tree-id8568 . -163) (undo-tree-id8569 . -163) (undo-tree-id8570 . -163) (undo-tree-id8571 . -163) (undo-tree-id8572 . -163) (undo-tree-id8573 . -163) (undo-tree-id8574 . -163) (undo-tree-id8575 . -163) (undo-tree-id8576 . -163) (undo-tree-id8577 . -163) (undo-tree-id8578 . -163) (undo-tree-id8579 . -163) (undo-tree-id8580 . -163) (undo-tree-id8581 . -163) (undo-tree-id8582 . -163) (undo-tree-id8583 . -163) (undo-tree-id8584 . -163) (undo-tree-id8585 . -163) (undo-tree-id8586 . -163) (undo-tree-id8587 . -163) (undo-tree-id8588 . -163) (undo-tree-id8589 . -163) (undo-tree-id8590 . -163) (undo-tree-id8591 . -163) (undo-tree-id8592 . -163) (undo-tree-id8593 . -165) (undo-tree-id8594 . -165) (undo-tree-id8595 . -165) (undo-tree-id8596 . -165) (undo-tree-id8597 . -165) (undo-tree-id8598 . -165) (undo-tree-id8599 . -165) (undo-tree-id8600 . -165) (undo-tree-id8601 . -165) (undo-tree-id8602 . -165) (undo-tree-id8603 . -165) (undo-tree-id8604 . -165) (undo-tree-id8605 . -165) (undo-tree-id8606 . -165) (undo-tree-id8607 . -165) (undo-tree-id8608 . -165) (undo-tree-id8609 . -165) (undo-tree-id8610 . -165) (undo-tree-id8611 . -165) (undo-tree-id8612 . -165) (undo-tree-id8613 . -165) (undo-tree-id8614 . -165) (undo-tree-id8615 . -165) (undo-tree-id8616 . -165) (undo-tree-id8617 . -165) (undo-tree-id8618 . -165) (undo-tree-id8619 . -165) (undo-tree-id8620 . -165) (undo-tree-id8621 . -165) (undo-tree-id8622 . -165) (undo-tree-id8623 . -165) (undo-tree-id8624 . -165) (undo-tree-id8625 . -166) (undo-tree-id8626 . -166) (undo-tree-id8627 . -166) (undo-tree-id8628 . -166) (undo-tree-id8629 . -166) (undo-tree-id8630 . -166) (undo-tree-id8631 . -166) (undo-tree-id8632 . -166) (undo-tree-id8633 . -166) (undo-tree-id8634 . -166) (undo-tree-id8635 . -166) (undo-tree-id8636 . -166) (undo-tree-id8637 . -166) (undo-tree-id8638 . -166) (undo-tree-id8639 . -166) (undo-tree-id8640 . -166) (undo-tree-id8641 . -166) (undo-tree-id8642 . -166) (undo-tree-id8643 . -166) (undo-tree-id8644 . -166) (undo-tree-id8645 . -166) (undo-tree-id8646 . -166) (undo-tree-id8647 . -166) (undo-tree-id8648 . -165) (undo-tree-id8649 . -165) (undo-tree-id8650 . -165) (undo-tree-id8651 . -165) (undo-tree-id8652 . -165) (undo-tree-id8653 . -165) (undo-tree-id8654 . -165) (undo-tree-id8655 . -165) (undo-tree-id8656 . -165) (undo-tree-id8657 . -165) (undo-tree-id8658 . -165) (undo-tree-id8659 . -165) (undo-tree-id8660 . -165) (undo-tree-id8661 . -165) (undo-tree-id8662 . -165) (undo-tree-id8663 . -165) (undo-tree-id8664 . -165) (undo-tree-id8665 . -165) (undo-tree-id8666 . -165) (undo-tree-id8667 . -165) (undo-tree-id8668 . -165) (undo-tree-id8669 . -165) (undo-tree-id8670 . -165) (undo-tree-id8671 . -165) (undo-tree-id8672 . -165) (undo-tree-id8673 . -165) (undo-tree-id8674 . -165) (undo-tree-id8675 . -165) (undo-tree-id8676 . -165) (undo-tree-id8677 . -165) (undo-tree-id8678 . -165) (undo-tree-id8679 . -165) (undo-tree-id8680 . -165) (undo-tree-id8681 . -127) (undo-tree-id8682 . -127) (undo-tree-id8683 . -127) (undo-tree-id8684 . -127) (undo-tree-id8685 . -127) (undo-tree-id8686 . -127) (undo-tree-id8687 . -127) (undo-tree-id8688 . -127) (undo-tree-id8689 . -127) (undo-tree-id8690 . -127) (undo-tree-id8691 . -127) (undo-tree-id8692 . -127) (undo-tree-id8693 . -127) (undo-tree-id8694 . -127) (undo-tree-id8695 . -127) (undo-tree-id8696 . -127) (undo-tree-id8697 . -127) (undo-tree-id8698 . -127) (undo-tree-id8699 . -127) (undo-tree-id8700 . -127) (undo-tree-id8701 . -127) (undo-tree-id8702 . -127) (undo-tree-id8703 . -127) (undo-tree-id8704 . -127) (undo-tree-id8705 . -127) (undo-tree-id8706 . -127) (undo-tree-id8707 . -127) (undo-tree-id8708 . -127) (undo-tree-id8709 . -127) (undo-tree-id8710 . -127) (undo-tree-id8711 . -127) (undo-tree-id8712 . -127) (undo-tree-id8713 . -127) (undo-tree-id8714 . -127) (undo-tree-id8715 . -127) (undo-tree-id8716 . -127) (undo-tree-id8717 . -127) (undo-tree-id8718 . -127) (undo-tree-id8719 . -127) (undo-tree-id8720 . -127) (undo-tree-id8721 . -127) (undo-tree-id8722 . -127) (undo-tree-id8723 . -127) (undo-tree-id8724 . -127) (undo-tree-id8725 . -127) (undo-tree-id8726 . -127) (undo-tree-id8727 . -127) (undo-tree-id8728 . -127) (undo-tree-id8729 . -127) (undo-tree-id8730 . -127) (undo-tree-id8731 . -127) (undo-tree-id8732 . -127) (undo-tree-id8733 . -127) (undo-tree-id8734 . -127) (undo-tree-id8735 . -127) (undo-tree-id8736 . -127) (undo-tree-id8737 . -127) (undo-tree-id8738 . -127) (undo-tree-id8739 . -127) (undo-tree-id8740 . -127) (undo-tree-id8741 . -127) (undo-tree-id8742 . -127) (undo-tree-id8743 . -127) (undo-tree-id8744 . -127) (undo-tree-id8745 . -127) (undo-tree-id8746 . -127) (undo-tree-id8747 . -127) (undo-tree-id8748 . -127) (undo-tree-id8749 . -127) (undo-tree-id8750 . -127) (undo-tree-id8751 . -127) (undo-tree-id8752 . -127) (undo-tree-id8753 . -127) (undo-tree-id8754 . -127) (undo-tree-id8755 . -127) (undo-tree-id8756 . -127) (undo-tree-id8757 . -127) (undo-tree-id8758 . -127) (undo-tree-id8759 . -127) (undo-tree-id8760 . -127) (undo-tree-id8761 . -127) (undo-tree-id8762 . -127) (undo-tree-id8763 . -127) (undo-tree-id8764 . -127) (undo-tree-id8765 . -127) (undo-tree-id8766 . -127) (undo-tree-id8767 . -127) (undo-tree-id8768 . -127) (undo-tree-id8769 . -127) (undo-tree-id8770 . -127) (undo-tree-id8771 . -127) (undo-tree-id8772 . -127) (undo-tree-id8773 . -127) (undo-tree-id8774 . -127) (undo-tree-id8775 . -127) (undo-tree-id8776 . -127) (undo-tree-id8777 . -127) (undo-tree-id8778 . -127) (undo-tree-id8779 . -127) (undo-tree-id8780 . -127) (undo-tree-id8781 . -127) (undo-tree-id8782 . -127) (undo-tree-id8783 . -127) (undo-tree-id8784 . -127) (undo-tree-id8785 . -127) (undo-tree-id8786 . -127) (undo-tree-id8787 . -127) (undo-tree-id8788 . -127) (undo-tree-id8789 . -127) (undo-tree-id8790 . -127) (undo-tree-id8791 . -127) (undo-tree-id8792 . -127) (undo-tree-id8793 . -127) (undo-tree-id8794 . -127) (undo-tree-id8795 . -127) (undo-tree-id8796 . -127) (undo-tree-id8797 . -127) (undo-tree-id8798 . -127) (undo-tree-id8799 . -127) (undo-tree-id8800 . -127) (undo-tree-id8801 . -127) (undo-tree-id8802 . -127) (undo-tree-id8803 . -127) (undo-tree-id8804 . -127) (undo-tree-id8805 . -127) (undo-tree-id8806 . -127) (undo-tree-id8807 . -127) (undo-tree-id8808 . -127) (undo-tree-id8809 . -127) (undo-tree-id8810 . -127) (undo-tree-id8811 . -127) (undo-tree-id8812 . -127) (undo-tree-id8813 . -127) (undo-tree-id8814 . -127) (undo-tree-id8815 . -127) (undo-tree-id8816 . -127) (undo-tree-id8817 . -127) (undo-tree-id8818 . -127) (undo-tree-id8819 . -127) (undo-tree-id8820 . -127) (undo-tree-id8821 . -127) (undo-tree-id8822 . -127) (undo-tree-id8823 . -127) (undo-tree-id8824 . -127) (undo-tree-id8825 . -127) (undo-tree-id8826 . -127) (undo-tree-id8827 . -127) (undo-tree-id8828 . -127) (undo-tree-id8829 . -127) (undo-tree-id8830 . -127) (undo-tree-id8831 . -127) (undo-tree-id8832 . -127) (undo-tree-id8833 . -127) (undo-tree-id8834 . -127) (undo-tree-id8835 . -127) (undo-tree-id8836 . -127) (undo-tree-id8837 . -127) (undo-tree-id8838 . -127) (undo-tree-id8839 . -127) (undo-tree-id8840 . -127) (undo-tree-id8841 . -127) (undo-tree-id8842 . -127) (undo-tree-id8843 . -127) (undo-tree-id8844 . -127) (undo-tree-id8845 . -127) (undo-tree-id8846 . -127) (undo-tree-id8847 . -127) (undo-tree-id8848 . -127) (undo-tree-id8849 . -127) (undo-tree-id8850 . -127) (undo-tree-id8851 . -127) (undo-tree-id8852 . -127) (undo-tree-id8853 . -127) (undo-tree-id8854 . -127) (undo-tree-id8855 . -127) (undo-tree-id8856 . -127) (undo-tree-id8857 . -127) (undo-tree-id8858 . -127) (undo-tree-id8859 . -127) (undo-tree-id8860 . -127) (undo-tree-id8861 . -127) (undo-tree-id8862 . -127) (undo-tree-id8863 . -127) (undo-tree-id8864 . -127) (undo-tree-id8865 . -127) (undo-tree-id8866 . -127) (undo-tree-id8867 . -127) (undo-tree-id8868 . -127) (undo-tree-id8869 . -127) (undo-tree-id8870 . -127) (undo-tree-id8871 . -127) (undo-tree-id8872 . -127) (undo-tree-id8873 . -127) (undo-tree-id8874 . -127) (undo-tree-id8875 . -127) (undo-tree-id8876 . -127) (undo-tree-id8877 . -127) (undo-tree-id8878 . -127) (undo-tree-id8879 . -127) (undo-tree-id8880 . -127) (undo-tree-id8881 . -127) (undo-tree-id8882 . -127) (undo-tree-id8883 . -127) (undo-tree-id8884 . -127) (undo-tree-id8885 . -127) (undo-tree-id8886 . -127) (undo-tree-id8887 . -127) (undo-tree-id8888 . -127) (undo-tree-id8889 . -127) (undo-tree-id8890 . -127) (undo-tree-id8891 . -127) (undo-tree-id8892 . -127) (undo-tree-id8893 . -127) (undo-tree-id8894 . -127) (undo-tree-id8895 . -127) (undo-tree-id8896 . -127) (undo-tree-id8897 . -127) (undo-tree-id8898 . -127) (undo-tree-id8899 . -127) (undo-tree-id8900 . -127) (undo-tree-id8901 . -127) (undo-tree-id8902 . -127) (undo-tree-id8903 . -127) (undo-tree-id8904 . -127) (undo-tree-id8905 . -127) (undo-tree-id8906 . -127) (undo-tree-id8907 . -127) (undo-tree-id8908 . -127) (undo-tree-id8909 . -127) (undo-tree-id8910 . -127) (undo-tree-id8911 . -127) (undo-tree-id8912 . -127) (undo-tree-id8913 . -127) (undo-tree-id8914 . -127) (undo-tree-id8915 . -127) (undo-tree-id8916 . -127) (undo-tree-id8917 . -127) (undo-tree-id8918 . -127) (undo-tree-id8919 . -127) (undo-tree-id8920 . -127) (undo-tree-id8921 . -127) (undo-tree-id8922 . -127) (undo-tree-id8923 . -127) (undo-tree-id8924 . -133) (undo-tree-id8925 . -133) (undo-tree-id8926 . -133) (undo-tree-id8927 . -133) (undo-tree-id8928 . -133) (undo-tree-id8929 . -133) (undo-tree-id8930 . -133) (undo-tree-id8931 . -133) (undo-tree-id8932 . -133) (undo-tree-id8933 . -133) (undo-tree-id8934 . -133) (undo-tree-id8935 . -133) (undo-tree-id8936 . -133) (undo-tree-id8937 . -133) (undo-tree-id8938 . -133) (undo-tree-id8939 . -133) (undo-tree-id8940 . -133) (undo-tree-id8941 . -133) (undo-tree-id8942 . -133) (undo-tree-id8943 . -133) (undo-tree-id8944 . -133) (undo-tree-id8945 . -133) (undo-tree-id8946 . -137) (undo-tree-id8947 . -137) (undo-tree-id8948 . -137) (undo-tree-id8949 . -137) (undo-tree-id8950 . -137) (undo-tree-id8951 . -137) (undo-tree-id8952 . -137) (undo-tree-id8953 . -137) (undo-tree-id8954 . -142) (undo-tree-id8955 . -142) (undo-tree-id8956 . -142) (undo-tree-id8957 . -142) (undo-tree-id8958 . -142) (undo-tree-id8959 . -142) (undo-tree-id8960 . -142) (undo-tree-id8961 . -142) (undo-tree-id8962 . -148) (undo-tree-id8963 . -148) (undo-tree-id8964 . -148) (undo-tree-id8965 . -148) (undo-tree-id8966 . -148) (undo-tree-id8967 . -148) (undo-tree-id8968 . -148) (undo-tree-id8969 . -148) (undo-tree-id8970 . -151) (undo-tree-id8971 . -151) (undo-tree-id8972 . -151) (undo-tree-id8973 . -151) (undo-tree-id8974 . -151) (undo-tree-id8975 . -151) (undo-tree-id8976 . -151) (undo-tree-id8977 . -151) (undo-tree-id8978 . -156) (undo-tree-id8979 . -156) (undo-tree-id8980 . -156) (undo-tree-id8981 . -156) (undo-tree-id8982 . -156) (undo-tree-id8983 . -156) (undo-tree-id8984 . -156) (undo-tree-id8985 . -156) (undo-tree-id8986 . -163) (undo-tree-id8987 . -163) (undo-tree-id8988 . -163) (undo-tree-id8989 . -163) (undo-tree-id8990 . -163) (undo-tree-id8991 . -163) (undo-tree-id8992 . -163) (undo-tree-id8993 . -163) (undo-tree-id8994 . -165) (undo-tree-id8995 . -165) (undo-tree-id8996 . -165) (undo-tree-id8997 . -165) (undo-tree-id8998 . -165) (undo-tree-id8999 . -165) (undo-tree-id9000 . -165) (undo-tree-id9001 . -165) (undo-tree-id9002 . -165) (undo-tree-id9003 . -165) (undo-tree-id9004 . -165) (undo-tree-id9005 . -165) (undo-tree-id9006 . -165) (undo-tree-id9007 . -165) (undo-tree-id9008 . -165) (undo-tree-id9009 . -166) (undo-tree-id9010 . -166) (undo-tree-id9011 . -166) (undo-tree-id9012 . -166) (undo-tree-id9013 . -166) (undo-tree-id9014 . -166) (undo-tree-id9015 . -166) (undo-tree-id9016 . -166) (undo-tree-id9017 . -166) (undo-tree-id9018 . -166) (undo-tree-id9019 . -166) (undo-tree-id9020 . -166) (undo-tree-id9021 . -166) (undo-tree-id9022 . -166) (undo-tree-id9023 . -166) (undo-tree-id9024 . -166) (undo-tree-id9025 . -166) (undo-tree-id9026 . -166) (undo-tree-id9027 . -166) (undo-tree-id9028 . -166) (undo-tree-id9029 . -166) (undo-tree-id9030 . -166) (undo-tree-id9031 . -166) (undo-tree-id9032 . -166) (undo-tree-id9033 . -166) (undo-tree-id9034 . -166) (undo-tree-id9035 . -166) (undo-tree-id9036 . -166) (undo-tree-id9037 . -166) (undo-tree-id9038 . -166) (undo-tree-id9039 . -166) (undo-tree-id9040 . -166) (undo-tree-id9041 . -166) (undo-tree-id9042 . -166) (undo-tree-id9043 . -166) (undo-tree-id9044 . -166) (undo-tree-id9045 . -166) (undo-tree-id9046 . -166) (undo-tree-id9047 . -166) (undo-tree-id9048 . -166) (undo-tree-id9049 . -166) (undo-tree-id9050 . -166) (undo-tree-id9051 . -166) (undo-tree-id9052 . -166) (undo-tree-id9053 . -166) (undo-tree-id9054 . -166) (undo-tree-id9055 . -166) (undo-tree-id9056 . -166) (undo-tree-id9057 . -166) (undo-tree-id9058 . -166) (undo-tree-id9059 . -166) (undo-tree-id9060 . -166) (undo-tree-id9061 . -166) (undo-tree-id9062 . -166) (undo-tree-id9063 . -166) (undo-tree-id9064 . -166) (undo-tree-id9065 . -166) (undo-tree-id9066 . -166) (undo-tree-id9067 . -166) (undo-tree-id9068 . -166) (undo-tree-id9069 . -166) (undo-tree-id9070 . -166) (undo-tree-id9071 . -166) (undo-tree-id9072 . -166) (undo-tree-id9073 . -166) (undo-tree-id9074 . -166) (undo-tree-id9075 . -166) (undo-tree-id9076 . -166) (undo-tree-id9077 . -166) (undo-tree-id9078 . -166) (undo-tree-id9079 . -166) (undo-tree-id9080 . -166) (undo-tree-id9081 . -166) (undo-tree-id9082 . -166) (undo-tree-id9083 . -166) (undo-tree-id9084 . -166) (undo-tree-id9085 . -166) (undo-tree-id9086 . -166) (undo-tree-id9087 . -166) (undo-tree-id9088 . -166) (undo-tree-id9089 . -166) (undo-tree-id9090 . -166) (undo-tree-id9091 . -166) (undo-tree-id9092 . -166) (undo-tree-id9093 . -166) (undo-tree-id9094 . -166) (undo-tree-id9095 . -166) (undo-tree-id9096 . -166) (undo-tree-id9097 . -166) (undo-tree-id9098 . -166) (undo-tree-id9099 . -166) (undo-tree-id9100 . -166) (undo-tree-id9101 . -166) (undo-tree-id9102 . -166) (undo-tree-id9103 . -166) (undo-tree-id9104 . -166) (undo-tree-id9105 . -166) (undo-tree-id9106 . -166) (undo-tree-id9107 . -166) (undo-tree-id9108 . -166) (undo-tree-id9109 . -166) (undo-tree-id9110 . -166) (undo-tree-id9111 . -166) (undo-tree-id9112 . -166) (undo-tree-id9113 . -166) (undo-tree-id9114 . -166) (undo-tree-id9115 . -166) (undo-tree-id9116 . -166) (undo-tree-id9117 . -166) (undo-tree-id9118 . -166) (undo-tree-id9119 . -166) (undo-tree-id9120 . -166) (undo-tree-id9121 . -166) (undo-tree-id9122 . -166) (undo-tree-id9123 . -166) (undo-tree-id9124 . -166) (undo-tree-id9125 . -166) (undo-tree-id9126 . -166) (undo-tree-id9127 . -166) (undo-tree-id9128 . -166) (undo-tree-id9129 . -166) (undo-tree-id9130 . -166) (undo-tree-id9131 . -166) (undo-tree-id9132 . -166) (undo-tree-id9133 . -166) (undo-tree-id9134 . -166) (undo-tree-id9135 . -166) (undo-tree-id9136 . -166) (undo-tree-id9137 . -166) (undo-tree-id9138 . -166) (undo-tree-id9139 . -166) (undo-tree-id9140 . -166) (undo-tree-id9141 . -166) (undo-tree-id9142 . -166) (undo-tree-id9143 . -166) (undo-tree-id9144 . -166) (undo-tree-id9145 . -166) (undo-tree-id9146 . -166) (undo-tree-id9147 . -166) (undo-tree-id9148 . -166) (undo-tree-id9149 . -166) (undo-tree-id9150 . -166) (undo-tree-id9151 . -166) (undo-tree-id9152 . -166) (undo-tree-id9153 . -166) (undo-tree-id9154 . -166) (undo-tree-id9155 . -166) (undo-tree-id9156 . -166) (undo-tree-id9157 . -166) (undo-tree-id9158 . -166) (undo-tree-id9159 . -166) (undo-tree-id9160 . -166) (undo-tree-id9161 . -166) (undo-tree-id9162 . -166) (undo-tree-id9163 . -166) (undo-tree-id9164 . -166) (undo-tree-id9165 . -166) (undo-tree-id9166 . -166) (undo-tree-id9167 . -166) (undo-tree-id9168 . -166) (undo-tree-id9169 . -166) (undo-tree-id9170 . -166) (undo-tree-id9171 . -166) (undo-tree-id9172 . -166) (undo-tree-id9173 . -166) (undo-tree-id9174 . -166) (undo-tree-id9175 . -170) (undo-tree-id9176 . -170) (undo-tree-id9177 . -170) (undo-tree-id9178 . -170) (undo-tree-id9179 . -170) (undo-tree-id9180 . -170) (undo-tree-id9181 . -170) (undo-tree-id9182 . -170) (undo-tree-id9183 . -170) (undo-tree-id9184 . -170) (undo-tree-id9185 . -170) (undo-tree-id9186 . -170) (undo-tree-id9187 . -170) (undo-tree-id9188 . -170) (undo-tree-id9189 . -170) (undo-tree-id9190 . -182) (undo-tree-id9191 . -182) (undo-tree-id9192 . -182) (undo-tree-id9193 . -182) (undo-tree-id9194 . -182) (undo-tree-id9195 . -182) (undo-tree-id9196 . -182) (undo-tree-id9197 . -182) (undo-tree-id9198 . -182) (undo-tree-id9199 . -182) (undo-tree-id9200 . -182) (undo-tree-id9201 . -182) (undo-tree-id9202 . -182) (undo-tree-id9203 . -182) (undo-tree-id9204 . -182) (undo-tree-id9205 . -183) (undo-tree-id9206 . -183) (undo-tree-id9207 . -183) (undo-tree-id9208 . -183) (undo-tree-id9209 . -183) (undo-tree-id9210 . -183) (undo-tree-id9211 . -183) (undo-tree-id9212 . -183) (undo-tree-id9213 . -183) (undo-tree-id9214 . -183) (undo-tree-id9215 . -183) (undo-tree-id9216 . -183) (undo-tree-id9217 . -183) (undo-tree-id9218 . -183) (undo-tree-id9219 . -183) (undo-tree-id9220 . -183) (undo-tree-id9221 . -183) (undo-tree-id9222 . -184) (undo-tree-id9223 . -184) (undo-tree-id9224 . -184) (undo-tree-id9225 . -184) (undo-tree-id9226 . -184) (undo-tree-id9227 . -184) (undo-tree-id9228 . -184) (undo-tree-id9229 . -184) (undo-tree-id9230 . -184) (undo-tree-id9231 . -184) (undo-tree-id9232 . -184) (undo-tree-id9233 . -184) (undo-tree-id9234 . -184) (undo-tree-id9235 . -184) (undo-tree-id9236 . -184) (undo-tree-id9237 . -184) (undo-tree-id9238 . -184) (undo-tree-id9239 . -184) (undo-tree-id9240 . -184) (undo-tree-id9241 . -184) (undo-tree-id9242 . -184) (undo-tree-id9243 . -184) (undo-tree-id9244 . -184) (undo-tree-id9245 . -184) (undo-tree-id9246 . -184) (undo-tree-id9247 . -184) (undo-tree-id9248 . -184) (undo-tree-id9249 . -184) (undo-tree-id9250 . -184) (undo-tree-id9251 . -184) (undo-tree-id9252 . -184) (undo-tree-id9253 . -183) (undo-tree-id9254 . -183) (undo-tree-id9255 . -183) (undo-tree-id9256 . -183) (undo-tree-id9257 . -183) (undo-tree-id9258 . -183) (undo-tree-id9259 . -183) (undo-tree-id9260 . -183) (undo-tree-id9261 . -183) (undo-tree-id9262 . -183) (undo-tree-id9263 . -183) (undo-tree-id9264 . -183) (undo-tree-id9265 . -183) (undo-tree-id9266 . -183) (undo-tree-id9267 . -183) (undo-tree-id9268 . -183) (undo-tree-id9269 . -183) (undo-tree-id9270 . -183) (undo-tree-id9271 . -183) (undo-tree-id9272 . -184) (undo-tree-id9273 . -184) (undo-tree-id9274 . -184) (undo-tree-id9275 . -184) (undo-tree-id9276 . -184) (undo-tree-id9277 . -184) (undo-tree-id9278 . -184) (undo-tree-id9279 . -184) (undo-tree-id9280 . -184) (undo-tree-id9281 . -184) (undo-tree-id9282 . -184) (undo-tree-id9283 . -184) (undo-tree-id9284 . -184) (undo-tree-id9285 . -184) (undo-tree-id9286 . -184) (undo-tree-id9287 . -184) (undo-tree-id9288 . -184) (undo-tree-id9289 . -184) (undo-tree-id9290 . -184) (undo-tree-id9291 . -184) (undo-tree-id9292 . -184) (undo-tree-id9293 . -184) (undo-tree-id9294 . -183) (undo-tree-id9295 . -183) (undo-tree-id9296 . -183) (undo-tree-id9297 . -183) (undo-tree-id9298 . -183) (undo-tree-id9299 . -183) (undo-tree-id9300 . -183) (undo-tree-id9301 . -183) (undo-tree-id9302 . -183) (undo-tree-id9303 . -183) (undo-tree-id9304 . -183) (undo-tree-id9305 . -183) (undo-tree-id9306 . -183) (undo-tree-id9307 . -183) (undo-tree-id9308 . -183) (undo-tree-id9309 . -183) (undo-tree-id9310 . -183) (undo-tree-id9311 . -183) (undo-tree-id9312 . -183) (undo-tree-id9313 . -183) (undo-tree-id9314 . -183) (undo-tree-id9315 . -183) (undo-tree-id9316 . -184) (undo-tree-id9317 . -184) (undo-tree-id9318 . -184) (undo-tree-id9319 . -184) (undo-tree-id9320 . -184) (undo-tree-id9321 . -184) (undo-tree-id9322 . -184) (undo-tree-id9323 . -184) (undo-tree-id9324 . -184) (undo-tree-id9325 . -184) (undo-tree-id9326 . -184) (undo-tree-id9327 . -184) (undo-tree-id9328 . -184) (undo-tree-id9329 . -184) (undo-tree-id9330 . -184) (undo-tree-id9331 . -184) (undo-tree-id9332 . -184) (undo-tree-id9333 . -184) (undo-tree-id9334 . -184) (undo-tree-id9335 . -184) (undo-tree-id9336 . -184) (undo-tree-id9337 . -184) (undo-tree-id9338 . -184) (undo-tree-id9339 . -184) (undo-tree-id9340 . -184) (undo-tree-id9341 . -184) (undo-tree-id9342 . -184) (undo-tree-id9343 . -184) (undo-tree-id9344 . -184) (undo-tree-id9345 . -184) (undo-tree-id9346 . -184) (undo-tree-id9347 . -184) (undo-tree-id9348 . -184) (undo-tree-id9349 . -184) (undo-tree-id9350 . -184) (undo-tree-id9351 . -184) (undo-tree-id9352 . -184) (undo-tree-id9353 . -184) (undo-tree-id9354 . -184) (undo-tree-id9355 . -184) (undo-tree-id9356 . -184) (undo-tree-id9357 . -184) (undo-tree-id9358 . -184) (undo-tree-id9359 . -184) (undo-tree-id9360 . -184) (undo-tree-id9361 . -184) (undo-tree-id9362 . -184) (undo-tree-id9363 . -184) (undo-tree-id9364 . -184) (undo-tree-id9365 . -184) (undo-tree-id9366 . -184) (undo-tree-id9367 . -184) (undo-tree-id9368 . -184) (undo-tree-id9369 . -184) (undo-tree-id9370 . -184) (undo-tree-id9371 . -184) (undo-tree-id9372 . -184) (undo-tree-id9373 . -184) (undo-tree-id9374 . -184) (undo-tree-id9375 . -184) (undo-tree-id9376 . -184) (undo-tree-id9377 . 1) (undo-tree-id9378 . -184) (undo-tree-id9379 . 19) (undo-tree-id9380 . -166) (undo-tree-id9381 . -184) (undo-tree-id9382 . -184) (undo-tree-id9383 . -184) (undo-tree-id9384 . -184) (undo-tree-id9385 . -184) (undo-tree-id9386 . -184) (undo-tree-id9387 . -184) (undo-tree-id9388 . -184) (undo-tree-id9389 . -184) (undo-tree-id9390 . -184) (undo-tree-id9391 . -184) (undo-tree-id9392 . -184) (undo-tree-id9393 . -184) (undo-tree-id9394 . -184) (undo-tree-id9395 . -184) (undo-tree-id9396 . -184) (undo-tree-id9397 . -184) (undo-tree-id9398 . -184) (undo-tree-id9399 . -184) (undo-tree-id9400 . -184) (undo-tree-id9401 . -184) (undo-tree-id9402 . -184) (undo-tree-id9403 . -184) (undo-tree-id9404 . -184) (undo-tree-id9405 . -184) (undo-tree-id9406 . -184) (undo-tree-id9407 . -184) (undo-tree-id9408 . -184) (undo-tree-id9409 . -184) (undo-tree-id9410 . -184) (undo-tree-id9411 . -125) (3186 . 3311) (#(", and it is sometimes surprisingly difficult to outperform. In this case, it gives us a mean squared error of about 0.020:" 0 47 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 122 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3245) (undo-tree-id9412 . 122) (undo-tree-id9413 . -47) (undo-tree-id9414 . -47) (undo-tree-id9415 . -47) (undo-tree-id9416 . -47) (undo-tree-id9417 . -47) (undo-tree-id9418 . -47) (undo-tree-id9419 . -47) (undo-tree-id9420 . -47) (undo-tree-id9421 . -47) (undo-tree-id9422 . -47) (undo-tree-id9423 . -47) (undo-tree-id9424 . -47) (undo-tree-id9425 . -47) (undo-tree-id9426 . -47) (undo-tree-id9427 . -47) (undo-tree-id9428 . -47) (undo-tree-id9429 . -47) (undo-tree-id9430 . -47) (undo-tree-id9431 . -47) (undo-tree-id9432 . -47) (undo-tree-id9433 . -47) (undo-tree-id9434 . -47) (undo-tree-id9435 . -47) (undo-tree-id9436 . -47) (undo-tree-id9437 . -47) (undo-tree-id9438 . -47) (undo-tree-id9439 . -47) (undo-tree-id9440 . -47) (undo-tree-id9441 . -47) (undo-tree-id9442 . -47) (undo-tree-id9443 . -47) (undo-tree-id9444 . -47) (undo-tree-id9445 . -47) (undo-tree-id9446 . -47) (undo-tree-id9447 . -47) (undo-tree-id9448 . -47) (undo-tree-id9449 . -47) (undo-tree-id9450 . -47) (undo-tree-id9451 . -47) (undo-tree-id9452 . -47) (undo-tree-id9453 . -2) (undo-tree-id9454 . -2) (undo-tree-id9455 . -2) (undo-tree-id9456 . -2) (undo-tree-id9457 . -2) (undo-tree-id9458 . -2) (undo-tree-id9459 . -2) (undo-tree-id9460 . -2) (undo-tree-id9461 . -2) (undo-tree-id9462 . -2) (undo-tree-id9463 . -2) (undo-tree-id9464 . -2) (undo-tree-id9465 . -2) (undo-tree-id9466 . -2) (undo-tree-id9467 . -2) (undo-tree-id9468 . -2) (undo-tree-id9469 . -2) (undo-tree-id9470 . -2) (undo-tree-id9471 . -2) (undo-tree-id9472 . -2) (undo-tree-id9473 . -2) (undo-tree-id9474 . -2) (undo-tree-id9475 . -2) (undo-tree-id9476 . -2) (undo-tree-id9477 . -2) (undo-tree-id9478 . -2) (undo-tree-id9479 . -2) (undo-tree-id9480 . -2) (undo-tree-id9481 . -2) (undo-tree-id9482 . -2) (undo-tree-id9483 . -2) (undo-tree-id9484 . -2) (undo-tree-id9485 . -2) (undo-tree-id9486 . -2) (undo-tree-id9487 . -2) (undo-tree-id9488 . -2) (undo-tree-id9489 . -2) (undo-tree-id9490 . -1) (undo-tree-id9491 . -1) (undo-tree-id9492 . -1) (undo-tree-id9493 . -1) (undo-tree-id9494 . -1) (undo-tree-id9495 . -1) (undo-tree-id9496 . -1) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1)) nil (25772 49906 722051 533000) 0 nil])
([nil nil ((3248 . 3249) (#(", and it is s" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3248) (undo-tree-id8162 . -12) (undo-tree-id8163 . 13) (undo-tree-id8164 . -12) (undo-tree-id8165 . -12) (undo-tree-id8166 . -12) (undo-tree-id8167 . -13) (undo-tree-id8168 . -12) (undo-tree-id8169 . -4) (undo-tree-id8170 . -4) (undo-tree-id8171 . -4) (undo-tree-id8172 . -4) (undo-tree-id8173 . -4) (undo-tree-id8174 . -4) (undo-tree-id8175 . -4) (undo-tree-id8176 . -4) (undo-tree-id8177 . -4) (undo-tree-id8178 . -4) (undo-tree-id8179 . -4) (undo-tree-id8180 . -4) (undo-tree-id8181 . -4) (undo-tree-id8182 . -4) (undo-tree-id8183 . -4) (undo-tree-id8184 . -4) (undo-tree-id8185 . -4) (undo-tree-id8186 . -4) (undo-tree-id8187 . -4) (undo-tree-id8188 . -4) (undo-tree-id8189 . -4) (undo-tree-id8190 . -4) (undo-tree-id8191 . -7) (undo-tree-id8192 . -7) (undo-tree-id8193 . -7) (undo-tree-id8194 . -7) (undo-tree-id8195 . -7) (undo-tree-id8196 . -7) (undo-tree-id8197 . -7) (undo-tree-id8198 . -7) (undo-tree-id8199 . -7) (undo-tree-id8200 . -7) (undo-tree-id8201 . -7) (undo-tree-id8202 . -7) (undo-tree-id8203 . -7) (undo-tree-id8204 . -7) (undo-tree-id8205 . -7) (undo-tree-id8206 . -7) (undo-tree-id8207 . -7) (undo-tree-id8208 . -7) (undo-tree-id8209 . -7) (undo-tree-id8210 . -7) (undo-tree-id8211 . -7) (undo-tree-id8212 . -7) (undo-tree-id8213 . -10) (undo-tree-id8214 . -10) (undo-tree-id8215 . -10) (undo-tree-id8216 . -10) (undo-tree-id8217 . -10) (undo-tree-id8218 . -10) (undo-tree-id8219 . -10) (undo-tree-id8220 . -10) (undo-tree-id8221 . -10) (undo-tree-id8222 . -10) (undo-tree-id8223 . -10) (undo-tree-id8224 . -10) (undo-tree-id8225 . -10) (undo-tree-id8226 . -10) (undo-tree-id8227 . -10) (undo-tree-id8228 . -10) (undo-tree-id8229 . -10) (undo-tree-id8230 . -10) (undo-tree-id8231 . -10) (undo-tree-id8232 . -10) (undo-tree-id8233 . -10) (undo-tree-id8234 . -10) (undo-tree-id8235 . -13) (undo-tree-id8236 . -13) (undo-tree-id8237 . -13) (undo-tree-id8238 . -13) (undo-tree-id8239 . -13) (undo-tree-id8240 . -13) (undo-tree-id8241 . -13) (undo-tree-id8242 . -13) (undo-tree-id8243 . -13) (undo-tree-id8244 . -13) (undo-tree-id8245 . -13) (undo-tree-id8246 . -13) (undo-tree-id8247 . -13) (undo-tree-id8248 . -13) (undo-tree-id8249 . -13) (undo-tree-id8250 . -13) (undo-tree-id8251 . -13) (undo-tree-id8252 . -13) (undo-tree-id8253 . -13) (undo-tree-id8254 . -13) (undo-tree-id8255 . -13) (undo-tree-id8256 . -13) (undo-tree-id8257 . -12) (undo-tree-id8258 . -12) (undo-tree-id8259 . -12) (undo-tree-id8260 . -12) (undo-tree-id8261 . -12) (undo-tree-id8262 . -12) (undo-tree-id8263 . -12) (undo-tree-id8264 . -12) (undo-tree-id8265 . -12) (undo-tree-id8266 . -12) (undo-tree-id8267 . -12) (undo-tree-id8268 . -12) (undo-tree-id8269 . -12) (undo-tree-id8270 . -12) (undo-tree-id8271 . -12) (undo-tree-id8272 . -12) (undo-tree-id8273 . -12) (undo-tree-id8274 . -12) (undo-tree-id8275 . -12) (undo-tree-id8276 . -12) (undo-tree-id8277 . -12) (undo-tree-id8278 . -12) (undo-tree-id8279 . -12) (undo-tree-id8280 . -13) (undo-tree-id8281 . -13) (undo-tree-id8282 . -13) 3260) nil (25772 49906 721301 117000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3294) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1)) nil (25772 49906 721233 788000) 0 nil])
([nil nil ((3246 . 3359) (#("- In this case, it gives us a mean squared error of about 0.020:
- Sometimes surprisingly difficult to outperform" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 64 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 64 65 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 66 68 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 68 102 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 103 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 103 113 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3246) (undo-tree-id7594 . -113) (undo-tree-id7595 . -113) (undo-tree-id7596 . 45) (undo-tree-id7597 . -67) (undo-tree-id7598 . -67) (undo-tree-id7599 . 45) (undo-tree-id7600 . -67) (undo-tree-id7601 . -67) (undo-tree-id7602 . -113) (undo-tree-id7603 . -67) (undo-tree-id7604 . -67) (undo-tree-id7605 . -67) (undo-tree-id7606 . -67) (undo-tree-id7607 . -67) (undo-tree-id7608 . -67) (undo-tree-id7609 . -67) (undo-tree-id7610 . -67) (undo-tree-id7611 . -67) (undo-tree-id7612 . -67) (undo-tree-id7613 . -67) (undo-tree-id7614 . -67) (undo-tree-id7615 . -67) (undo-tree-id7616 . -67) (undo-tree-id7617 . -67) (undo-tree-id7618 . -67) (undo-tree-id7619 . -67) (undo-tree-id7620 . -66) (undo-tree-id7621 . -66) (undo-tree-id7622 . -66) (undo-tree-id7623 . -66) (undo-tree-id7624 . -66) (undo-tree-id7625 . -66) (undo-tree-id7626 . -66) (undo-tree-id7627 . -66) (undo-tree-id7628 . -66) (undo-tree-id7629 . -66) (undo-tree-id7630 . -66) (undo-tree-id7631 . -66) (undo-tree-id7632 . -66) (undo-tree-id7633 . -66) (undo-tree-id7634 . -66) (undo-tree-id7635 . -66) (undo-tree-id7636 . -66) (undo-tree-id7637 . -66) (undo-tree-id7638 . -66) (undo-tree-id7639 . -66) (undo-tree-id7640 . -66) (undo-tree-id7641 . -66) (undo-tree-id7642 . -66) (undo-tree-id7643 . -66) (undo-tree-id7644 . -66) (undo-tree-id7645 . -66) (undo-tree-id7646 . -67) (undo-tree-id7647 . -67) (undo-tree-id7648 . -67) (undo-tree-id7649 . -67) (undo-tree-id7650 . -67) (undo-tree-id7651 . -67) (undo-tree-id7652 . -67) (undo-tree-id7653 . -67) (undo-tree-id7654 . -67) (undo-tree-id7655 . -67) (undo-tree-id7656 . -67) (undo-tree-id7657 . -67) (undo-tree-id7658 . -67) (undo-tree-id7659 . -67) (undo-tree-id7660 . -67) (undo-tree-id7661 . -67) (undo-tree-id7662 . -67) (undo-tree-id7663 . -67) (undo-tree-id7664 . -67) (undo-tree-id7665 . -67) (undo-tree-id7666 . -67) (undo-tree-id7667 . -67) (undo-tree-id7668 . -67) (undo-tree-id7669 . -67) (undo-tree-id7670 . -67) (undo-tree-id7671 . -67) (undo-tree-id7672 . -67) (undo-tree-id7673 . -67) (undo-tree-id7674 . -67) (undo-tree-id7675 . -67) (undo-tree-id7676 . -67) (undo-tree-id7677 . -67) (undo-tree-id7678 . -67) (undo-tree-id7679 . -67) (undo-tree-id7680 . -67) (undo-tree-id7681 . -67) (undo-tree-id7682 . -67) (undo-tree-id7683 . -67) (undo-tree-id7684 . -67) (undo-tree-id7685 . -67) (undo-tree-id7686 . -67) (undo-tree-id7687 . -67) (undo-tree-id7688 . -67) (undo-tree-id7689 . -67) (undo-tree-id7690 . -67) (undo-tree-id7691 . -67) (undo-tree-id7692 . -67) (undo-tree-id7693 . -67) (undo-tree-id7694 . -67) (undo-tree-id7695 . -67) (undo-tree-id7696 . -67) (undo-tree-id7697 . -67) (undo-tree-id7698 . -67) (undo-tree-id7699 . -67) (undo-tree-id7700 . -67) (undo-tree-id7701 . -67) (undo-tree-id7702 . -67) (undo-tree-id7703 . -67) (undo-tree-id7704 . -67) (undo-tree-id7705 . -67) (undo-tree-id7706 . -67) (undo-tree-id7707 . -67) (undo-tree-id7708 . -67) (undo-tree-id7709 . -67) (undo-tree-id7710 . -67) (undo-tree-id7711 . -67) (undo-tree-id7712 . -67) (undo-tree-id7713 . -67) (undo-tree-id7714 . -67) (undo-tree-id7715 . -67) (undo-tree-id7716 . -67) (undo-tree-id7717 . -67) (undo-tree-id7718 . -67) (undo-tree-id7719 . -67) (undo-tree-id7720 . -67) (undo-tree-id7721 . -67) (undo-tree-id7722 . -67) (undo-tree-id7723 . -67) (undo-tree-id7724 . -67) (undo-tree-id7725 . -67) (undo-tree-id7726 . -67) (undo-tree-id7727 . -67) (undo-tree-id7728 . -67) (undo-tree-id7729 . -67) (undo-tree-id7730 . -67) (undo-tree-id7731 . -67) (undo-tree-id7732 . -67) (undo-tree-id7733 . -67) (undo-tree-id7734 . -67) (undo-tree-id7735 . -67) (undo-tree-id7736 . -67) (undo-tree-id7737 . -67) (undo-tree-id7738 . -67) (undo-tree-id7739 . -67) (undo-tree-id7740 . -67) (undo-tree-id7741 . -67) (undo-tree-id7742 . -67) (undo-tree-id7743 . -67) (undo-tree-id7744 . -67) (undo-tree-id7745 . -67) (undo-tree-id7746 . -67) (undo-tree-id7747 . -67) (undo-tree-id7748 . -67) (undo-tree-id7749 . -67) (undo-tree-id7750 . -67) (undo-tree-id7751 . -75) (undo-tree-id7752 . -75) (undo-tree-id7753 . -75) (undo-tree-id7754 . -75) (undo-tree-id7755 . -75) (undo-tree-id7756 . -75) (undo-tree-id7757 . -75) (undo-tree-id7758 . -75) (undo-tree-id7759 . -75) (undo-tree-id7760 . -75) (undo-tree-id7761 . -75) (undo-tree-id7762 . -75) (undo-tree-id7763 . -75) (undo-tree-id7764 . -75) (undo-tree-id7765 . -75) (undo-tree-id7766 . -75) (undo-tree-id7767 . -75) (undo-tree-id7768 . -75) (undo-tree-id7769 . -75) (undo-tree-id7770 . -75) (undo-tree-id7771 . -75) (undo-tree-id7772 . -75) (undo-tree-id7773 . -74) (undo-tree-id7774 . -74) (undo-tree-id7775 . -74) (undo-tree-id7776 . -74) (undo-tree-id7777 . -74) (undo-tree-id7778 . -74) (undo-tree-id7779 . -74) (undo-tree-id7780 . -74) (undo-tree-id7781 . -74) (undo-tree-id7782 . -74) (undo-tree-id7783 . -74) (undo-tree-id7784 . -74) (undo-tree-id7785 . -74) (undo-tree-id7786 . -74) (undo-tree-id7787 . -74) (undo-tree-id7788 . -74) (undo-tree-id7789 . -74) (undo-tree-id7790 . -74) (undo-tree-id7791 . -74) (undo-tree-id7792 . -74) (undo-tree-id7793 . -74) (undo-tree-id7794 . -74) (undo-tree-id7795 . -73) (undo-tree-id7796 . -73) (undo-tree-id7797 . -73) (undo-tree-id7798 . -73) (undo-tree-id7799 . -73) (undo-tree-id7800 . -73) (undo-tree-id7801 . -73) (undo-tree-id7802 . -73) (undo-tree-id7803 . -73) (undo-tree-id7804 . -73) (undo-tree-id7805 . -73) (undo-tree-id7806 . -73) (undo-tree-id7807 . -73) (undo-tree-id7808 . -73) (undo-tree-id7809 . -73) (undo-tree-id7810 . -73) (undo-tree-id7811 . -73) (undo-tree-id7812 . -73) (undo-tree-id7813 . -73) (undo-tree-id7814 . -73) (undo-tree-id7815 . -73) (undo-tree-id7816 . -73) (undo-tree-id7817 . -72) (undo-tree-id7818 . -72) (undo-tree-id7819 . -72) (undo-tree-id7820 . -72) (undo-tree-id7821 . -72) (undo-tree-id7822 . -72) (undo-tree-id7823 . -72) (undo-tree-id7824 . -72) (undo-tree-id7825 . -72) (undo-tree-id7826 . -72) (undo-tree-id7827 . -72) (undo-tree-id7828 . -72) (undo-tree-id7829 . -72) (undo-tree-id7830 . -72) (undo-tree-id7831 . -72) (undo-tree-id7832 . -72) (undo-tree-id7833 . -72) (undo-tree-id7834 . -72) (undo-tree-id7835 . -72) (undo-tree-id7836 . -72) (undo-tree-id7837 . -72) (undo-tree-id7838 . -72) (undo-tree-id7839 . -71) (undo-tree-id7840 . -71) (undo-tree-id7841 . -71) (undo-tree-id7842 . -71) (undo-tree-id7843 . -71) (undo-tree-id7844 . -71) (undo-tree-id7845 . -71) (undo-tree-id7846 . -71) (undo-tree-id7847 . -71) (undo-tree-id7848 . -71) (undo-tree-id7849 . -71) (undo-tree-id7850 . -71) (undo-tree-id7851 . -71) (undo-tree-id7852 . -71) (undo-tree-id7853 . -71) (undo-tree-id7854 . -71) (undo-tree-id7855 . -71) (undo-tree-id7856 . -71) (undo-tree-id7857 . -71) (undo-tree-id7858 . -71) (undo-tree-id7859 . -71) (undo-tree-id7860 . -71) (undo-tree-id7861 . -70) (undo-tree-id7862 . -70) (undo-tree-id7863 . -70) (undo-tree-id7864 . -70) (undo-tree-id7865 . -70) (undo-tree-id7866 . -70) (undo-tree-id7867 . -70) (undo-tree-id7868 . -70) (undo-tree-id7869 . -70) (undo-tree-id7870 . -70) (undo-tree-id7871 . -70) (undo-tree-id7872 . -70) (undo-tree-id7873 . -70) (undo-tree-id7874 . -70) (undo-tree-id7875 . -70) (undo-tree-id7876 . -70) (undo-tree-id7877 . -70) (undo-tree-id7878 . -70) (undo-tree-id7879 . -70) (undo-tree-id7880 . -70) (undo-tree-id7881 . -70) (undo-tree-id7882 . -70) (undo-tree-id7883 . -69) (undo-tree-id7884 . -69) (undo-tree-id7885 . -69) (undo-tree-id7886 . -69) (undo-tree-id7887 . -69) (undo-tree-id7888 . -69) (undo-tree-id7889 . -69) (undo-tree-id7890 . -69) (undo-tree-id7891 . -69) (undo-tree-id7892 . -69) (undo-tree-id7893 . -69) (undo-tree-id7894 . -69) (undo-tree-id7895 . -69) (undo-tree-id7896 . -69) (undo-tree-id7897 . -69) (undo-tree-id7898 . -69) (undo-tree-id7899 . -69) (undo-tree-id7900 . -69) (undo-tree-id7901 . -69) (undo-tree-id7902 . -69) (undo-tree-id7903 . -69) (undo-tree-id7904 . -69) (undo-tree-id7905 . -69) (undo-tree-id7906 . -69) (undo-tree-id7907 . -69) (undo-tree-id7908 . -69) (undo-tree-id7909 . -69) (undo-tree-id7910 . -69) (undo-tree-id7911 . -69) (undo-tree-id7912 . -67) (undo-tree-id7913 . -67) (undo-tree-id7914 . -67) (undo-tree-id7915 . -67) (undo-tree-id7916 . -67) (undo-tree-id7917 . -67) (undo-tree-id7918 . -67) (undo-tree-id7919 . -67) (undo-tree-id7920 . -67) (undo-tree-id7921 . -67) (undo-tree-id7922 . -67) (undo-tree-id7923 . -67) (undo-tree-id7924 . -67) (undo-tree-id7925 . -67) (undo-tree-id7926 . -67) (undo-tree-id7927 . -67) (undo-tree-id7928 . -67) (undo-tree-id7929 . -67) (undo-tree-id7930 . -67) (undo-tree-id7931 . -67) (undo-tree-id7932 . -67) (undo-tree-id7933 . -67) (undo-tree-id7934 . -67) (undo-tree-id7935 . -67) (undo-tree-id7936 . -67) (undo-tree-id7937 . -67) (undo-tree-id7938 . -67) (undo-tree-id7939 . -67) (undo-tree-id7940 . -67) (undo-tree-id7941 . -67) (undo-tree-id7942 . -67) (undo-tree-id7943 . -67) (undo-tree-id7944 . -67) (undo-tree-id7945 . -67) (undo-tree-id7946 . -67) (undo-tree-id7947 . -67) (undo-tree-id7948 . -67) (undo-tree-id7949 . -67) (undo-tree-id7950 . -67) (undo-tree-id7951 . -67) (undo-tree-id7952 . -67) (undo-tree-id7953 . -67) (undo-tree-id7954 . -67) (undo-tree-id7955 . -67) (undo-tree-id7956 . -67) (undo-tree-id7957 . -67) (undo-tree-id7958 . -67) (undo-tree-id7959 . -67) (undo-tree-id7960 . -67) (undo-tree-id7961 . -67) (undo-tree-id7962 . -67) (undo-tree-id7963 . -67) (undo-tree-id7964 . -67) (undo-tree-id7965 . -67) (undo-tree-id7966 . -67) (undo-tree-id7967 . -67) (undo-tree-id7968 . -67) (undo-tree-id7969 . -67) (undo-tree-id7970 . -67) (undo-tree-id7971 . -67) (undo-tree-id7972 . -67) (undo-tree-id7973 . -67) (undo-tree-id7974 . -67) (undo-tree-id7975 . -67) (undo-tree-id7976 . -67) (undo-tree-id7977 . -67) (undo-tree-id7978 . -67) (undo-tree-id7979 . -67) (undo-tree-id7980 . -68) (undo-tree-id7981 . -68) (undo-tree-id7982 . -68) (undo-tree-id7983 . -68) (undo-tree-id7984 . -68) (undo-tree-id7985 . -68) (undo-tree-id7986 . -68) (undo-tree-id7987 . -68) (undo-tree-id7988 . -68) (undo-tree-id7989 . -68) (undo-tree-id7990 . -68) (undo-tree-id7991 . -68) (undo-tree-id7992 . -68) (undo-tree-id7993 . -68) (undo-tree-id7994 . -68) (undo-tree-id7995 . -67) (undo-tree-id7996 . -67) (undo-tree-id7997 . -67) (undo-tree-id7998 . -67) (undo-tree-id7999 . -67) (undo-tree-id8000 . -67) (undo-tree-id8001 . -67) (undo-tree-id8002 . -67) (undo-tree-id8003 . -67) (undo-tree-id8004 . -67) (undo-tree-id8005 . -67) (undo-tree-id8006 . -67) (undo-tree-id8007 . -67) (undo-tree-id8008 . -67) (undo-tree-id8009 . -67) (undo-tree-id8010 . -67) (undo-tree-id8011 . -67) (undo-tree-id8012 . -67) (undo-tree-id8013 . -67) (undo-tree-id8014 . -67) (undo-tree-id8015 . -67) (undo-tree-id8016 . -67) (undo-tree-id8017 . -67) (undo-tree-id8018 . -67) (undo-tree-id8019 . -67) (undo-tree-id8020 . -67) (undo-tree-id8021 . -75) (undo-tree-id8022 . -75) (undo-tree-id8023 . -75) (undo-tree-id8024 . -75) (undo-tree-id8025 . -75) (undo-tree-id8026 . -75) (undo-tree-id8027 . -75) (undo-tree-id8028 . -75) (undo-tree-id8029 . -75) (undo-tree-id8030 . -75) (undo-tree-id8031 . -75) (undo-tree-id8032 . -75) (undo-tree-id8033 . -75) (undo-tree-id8034 . -75) (undo-tree-id8035 . -75) (undo-tree-id8036 . -88) (undo-tree-id8037 . -88) (undo-tree-id8038 . -88) (undo-tree-id8039 . -88) (undo-tree-id8040 . -88) (undo-tree-id8041 . -88) (undo-tree-id8042 . -88) (undo-tree-id8043 . -88) (undo-tree-id8044 . -88) (undo-tree-id8045 . -88) (undo-tree-id8046 . -88) (undo-tree-id8047 . -88) (undo-tree-id8048 . -88) (undo-tree-id8049 . -88) (undo-tree-id8050 . -88) (undo-tree-id8051 . -98) (undo-tree-id8052 . -98) (undo-tree-id8053 . -98) (undo-tree-id8054 . -98) (undo-tree-id8055 . -98) (undo-tree-id8056 . -98) (undo-tree-id8057 . -98) (undo-tree-id8058 . -98) (undo-tree-id8059 . -98) (undo-tree-id8060 . -98) (undo-tree-id8061 . -98) (undo-tree-id8062 . -98) (undo-tree-id8063 . -98) (undo-tree-id8064 . -98) (undo-tree-id8065 . -98) (undo-tree-id8066 . -101) (undo-tree-id8067 . -101) (undo-tree-id8068 . -101) (undo-tree-id8069 . -101) (undo-tree-id8070 . -101) (undo-tree-id8071 . -101) (undo-tree-id8072 . -101) (undo-tree-id8073 . -101) (undo-tree-id8074 . -101) (undo-tree-id8075 . -101) (undo-tree-id8076 . -101) (undo-tree-id8077 . -101) (undo-tree-id8078 . -101) (undo-tree-id8079 . -101) (undo-tree-id8080 . -101) (undo-tree-id8081 . -112) (undo-tree-id8082 . -112) (undo-tree-id8083 . -112) (undo-tree-id8084 . -112) (undo-tree-id8085 . -112) (undo-tree-id8086 . -112) (undo-tree-id8087 . -112) (undo-tree-id8088 . -112) (undo-tree-id8089 . -112) (undo-tree-id8090 . -112) (undo-tree-id8091 . -112) (undo-tree-id8092 . -112) (undo-tree-id8093 . -112) (undo-tree-id8094 . -112) (undo-tree-id8095 . -112) (undo-tree-id8096 . -113) (undo-tree-id8097 . -113) (undo-tree-id8098 . -113) (undo-tree-id8099 . -113) (undo-tree-id8100 . -113) (undo-tree-id8101 . -113) (undo-tree-id8102 . -113) (undo-tree-id8103 . -113) (undo-tree-id8104 . -113) (undo-tree-id8105 . -113) (undo-tree-id8106 . -113) (undo-tree-id8107 . -113) (undo-tree-id8108 . -113) (undo-tree-id8109 . -113) (undo-tree-id8110 . -113) (undo-tree-id8111 . -113) (undo-tree-id8112 . -113) (undo-tree-id8113 . -113) (undo-tree-id8114 . -113) (undo-tree-id8115 . -113) (undo-tree-id8116 . -113) (undo-tree-id8117 . -113) (undo-tree-id8118 . -113) (undo-tree-id8119 . -113) (undo-tree-id8120 . -113) (undo-tree-id8121 . -113) (undo-tree-id8122 . -113) (undo-tree-id8123 . -113) (undo-tree-id8124 . -113) (undo-tree-id8125 . -113) (undo-tree-id8126 . -113) (undo-tree-id8127 . -113) (undo-tree-id8128 . -113) (undo-tree-id8129 . -113) (undo-tree-id8130 . -113) (undo-tree-id8131 . -113) (undo-tree-id8132 . -113) (undo-tree-id8133 . -113) (undo-tree-id8134 . -113) (undo-tree-id8135 . -113) (undo-tree-id8136 . -113) (undo-tree-id8137 . -113) (undo-tree-id8138 . -113) (undo-tree-id8139 . -113) (undo-tree-id8140 . -113) (undo-tree-id8141 . -113) (undo-tree-id8142 . -113) (undo-tree-id8143 . -113) (undo-tree-id8144 . -113) (undo-tree-id8145 . -113) (undo-tree-id8146 . -113) (undo-tree-id8147 . -113) (undo-tree-id8148 . -113) (undo-tree-id8149 . -113) (undo-tree-id8150 . -113) (undo-tree-id8151 . -113) (undo-tree-id8152 . -113) (undo-tree-id8153 . -113) (undo-tree-id8154 . -113) (undo-tree-id8155 . -113) (undo-tree-id8156 . -113) (undo-tree-id8157 . -113) (undo-tree-id8158 . -113) (undo-tree-id8159 . -65) (3246 . 3311) (#(" In this case, it gives us a mean squared error of about 0.020:" 0 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3294)) nil (25772 49906 721213 295000) 0 nil])
([nil nil ((3297 . 3300) (#("In this case, it gives us a mean squared error" 0 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3297) (undo-tree-id7572 . -45) (undo-tree-id7573 . 46) (undo-tree-id7574 . -45) (undo-tree-id7575 . -45) (undo-tree-id7576 . -45) (undo-tree-id7577 . -46) (undo-tree-id7578 . -45) (undo-tree-id7579 . -1) (undo-tree-id7580 . -6) (undo-tree-id7581 . -11) (undo-tree-id7582 . -12) (undo-tree-id7583 . -15) (undo-tree-id7584 . -21) (undo-tree-id7585 . -24) (undo-tree-id7586 . -26) (undo-tree-id7587 . -31) (undo-tree-id7588 . -39) (undo-tree-id7589 . -45) (undo-tree-id7590 . -45) (undo-tree-id7591 . -46) (undo-tree-id7592 . -46) (undo-tree-id7593 . -46) 3342) nil (25772 49906 720688 525000) 0 nil])
([nil nil ((#("of " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3301) (undo-tree-id7570 . -2) (undo-tree-id7571 . -3)) nil (25772 49906 720672 608000) 0 nil])
([nil nil ((#("about " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3301) (undo-tree-id7568 . -5) (undo-tree-id7569 . -6)) nil (25772 49906 722655 505000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3306) (undo-tree-id9759 . -1) (undo-tree-id9760 . -1)) nil (25772 49911 379740 529000) 0 nil] [nil nil ((3301 . 3302) (#("0" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3301) (undo-tree-id7567 . -1)) ((3301 . 3302) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3301)) (25772 49906 720660 593000) 0 nil])
([nil nil ((#("y_pred = X_valid[:, -1]
np.mean(keras.losses.mean_squared_error(y_valid, y_pred))
0.020211367
" 0 1 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 1 2 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 2 6 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 6 10 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 10 11 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 11 16 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 16 17 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 17 22 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 22 23 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 23 24 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 24 31 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 31 32 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 32 49 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 49 50 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 50 57 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 57 58 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 58 63 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 63 64 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 64 65 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 65 66 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 66 71 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 71 74 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 74 75 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 75 79 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 79 80 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 80 81 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 81 82 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 82 94 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block))) . 3342) (undo-tree-id10642 . -93) (undo-tree-id10643 . -82) (undo-tree-id10644 . -82) (undo-tree-id10645 . -82) (undo-tree-id10646 . -82) 3424 (t 25772 49911 431006 630000)) nil (25772 50078 583884 9000) 0 nil])
nil
([nil nil ((3673 . 3674) (3672 . 3673) 3638) nil (25772 50078 583880 44000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3674 . 3675) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3768) (3674 . 3769) 3673) nil (25772 50078 583878 685000) 0 nil])
([nil nil ((#("p
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 3673) (undo-tree-id10641 . -1)) nil (25772 50078 583877 82000) 0 nil])
([nil nil ((3755 . 3756)) nil (25772 50078 583875 826000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 34 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 34 35 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line)) . 3307) (undo-tree-id10637 . -34) (undo-tree-id10638 . -35) (undo-tree-id10639 . -35) (undo-tree-id10640 . -35)) nil (25772 50078 583874 961000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3307) (undo-tree-id10635 . -9) (undo-tree-id10636 . 10)) nil (25772 50078 583871 595000) 0 nil])
([nil nil ((3307 . 3309)) nil (25772 50078 583869 833000) 0 nil])
([nil nil ((3519 . 3520) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3519) (3451 . 3452) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3451) (3378 . 3379) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3378) 3308) nil (25772 50078 583868 757000) 0 nil])
([nil nil ((#("Another " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3309) (undo-tree-id10632 . -7) (undo-tree-id10633 . 8) (undo-tree-id10634 . 8)) nil (25772 50078 583866 528000) 0 nil])
([nil nil ((3322 . 3324) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3322) (undo-tree-id10626 . -1) 3323 (3319 . 3323) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3319) (undo-tree-id10627 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3320) (undo-tree-id10628 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3321) (undo-tree-id10629 . -1) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3322) (undo-tree-id10630 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3323) (undo-tree-id10631 . -1) 3324 (3309 . 3324)) nil (25772 50078 583862 325000) 0 nil])
([nil nil ((#("simple approach is to" 0 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3324) (undo-tree-id10620 . -20) (undo-tree-id10621 . 21) (undo-tree-id10622 . -20) (undo-tree-id10623 . -20) (undo-tree-id10624 . -20) (undo-tree-id10625 . -20) 3344) nil (25772 50078 583856 681000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3324) (undo-tree-id10618 . 1) (undo-tree-id10619 . 1)) nil (25772 50078 583852 156000) 0 nil])
([nil nil ((3307 . 3581) (#("- . Since it expects a flat list of features for each input, we need to add a Flatten layer. Let's just use a simple Linear Regression model so that each prediction will be a linear combination of the values in the time series:
- Alternatively, use a fully connected network" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 12 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 12 13 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 13 62 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 62 85 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 85 86 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 86 153 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 153 154 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 154 227 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 227 228 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 228 229 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 229 245 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 245 274 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3307) (undo-tree-id10609 . -245) (undo-tree-id10610 . -245) (undo-tree-id10611 . 29) (undo-tree-id10612 . -245) (undo-tree-id10613 . -245) (undo-tree-id10614 . 29) (undo-tree-id10615 . -245) (undo-tree-id10616 . -245) (undo-tree-id10617 . -274) (3307 . 3535) (#(". Since it expects a flat list of features for each input, we need to add a Flatten layer. Let's just use a simple Linear Regression model so that each prediction will be a linear combination of the values in the time series:" 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 11 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 60 83 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 83 84 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 84 151 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 151 152 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 152 225 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3353)) nil (25772 50078 583849 643000) 0 nil])
([nil nil ((#(". Since it expects a flat list of features for each input, we need to " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 11 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 60 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3356) (undo-tree-id10603 . -69) (undo-tree-id10604 . 70) (undo-tree-id10605 . -69) (undo-tree-id10606 . -69) (undo-tree-id10607 . -69) (undo-tree-id10608 . -69) 3425) nil (25772 50078 583841 900000) 0 nil])
([nil nil ((3356 . 3357) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3356)) nil (25772 50078 583837 653000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3375)) nil (25772 50078 583836 812000) 0 nil])
([nil nil ((3354 . 3512) (#("- Let's just use a simple Linear Regression model so that each prediction will be a linear combination of the values in the time series:
- Add a Flatten layer" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 62 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 62 63 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 63 136 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 136 137 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 137 138 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 138 139 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 139 152 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 152 153 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 153 158 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3354) (undo-tree-id10594 . -158) (undo-tree-id10595 . -158) (undo-tree-id10596 . 19) (undo-tree-id10597 . -139) (undo-tree-id10598 . -139) (undo-tree-id10599 . 18) (undo-tree-id10600 . -139) (undo-tree-id10601 . -139) (undo-tree-id10602 . -158) (3354 . 3491) (#(" Let's just use a simple Linear Regression model so that each prediction will be a linear combination of the values in the time series:" 0 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 61 62 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 62 135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3375)) nil (25772 50078 583835 173000) 0 nil])
([nil nil ((#("Let's just " 0 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3378) (undo-tree-id10588 . -10) (undo-tree-id10589 . 11) (undo-tree-id10590 . -10) (undo-tree-id10591 . -10) (undo-tree-id10592 . -10) (undo-tree-id10593 . -10) 3388) nil (25772 50078 583827 966000) 0 nil])
([nil nil ((3378 . 3379) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3378)) nil (25772 50078 583822 319000) 0 nil])
([nil nil ((3376 . 3503) (#("- so that each prediction will be a linear combination of the values in the time series:
- Use a simple Linear Regression model" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 14 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 14 15 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 15 88 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 88 89 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 89 90 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 90 91 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 91 127 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3376) (undo-tree-id10579 . -91) (undo-tree-id10580 . -91) (undo-tree-id10581 . 36) (undo-tree-id10582 . -91) (undo-tree-id10583 . -91) (undo-tree-id10584 . 35) (undo-tree-id10585 . -91) (undo-tree-id10586 . -91) (undo-tree-id10587 . -127) (3376 . 3465) (#(" so that each prediction will be a linear combination of the values in the time series:" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 87 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3414)) nil (25772 50078 583820 913000) 0 nil])
([nil nil ((3417 . 3418) (#("so that e" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3417) (undo-tree-id10573 . -8) (undo-tree-id10574 . 9) (undo-tree-id10575 . -8) (undo-tree-id10576 . -8) (undo-tree-id10577 . -8) (undo-tree-id10578 . -8) 3425) nil (25772 50078 583814 361000) 0 nil])
([nil nil ((#("be " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3438) (undo-tree-id10572 . -2)) nil (25772 50078 583809 94000) 0 nil])
([nil nil ((3438 . 3441)) nil (25772 50078 583807 716000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3494)) nil (25772 50078 583807 16000) 0 nil])
([nil nil ((#("If we compile this model using the MSE loss and the default Adam
optimizer, then fit it on the training set for 20 epochs and evaluate it on
the validation set, we get an MSE of about 0.004. That's much better than
the naive approach!
" 0 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 65 141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 141 203 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 203 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 215 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3745) (undo-tree-id10567 . -234) (undo-tree-id10568 . -215) (undo-tree-id10569 . -215) (undo-tree-id10570 . -215) (undo-tree-id10571 . -215) 3960) nil (25772 50078 583806 126000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3495 . 3496) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3730) (3495 . 3731)) nil (25772 50078 583801 405000) 0 nil])
([nil nil ((3496 . 3498)) nil (25772 50078 583800 410000) 0 nil])
([nil nil ((3712 . 3713) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3712) (3638 . 3639) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3638) (3562 . 3563) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3562) 3497) nil (25772 50078 583799 202000) 0 nil])
([nil nil ((3735 . 3736) (3732 . 3735) 3712) nil (25772 50078 583797 70000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t)) . 3495)) nil (25772 50078 583795 723000) 0 nil])
([nil nil ((#("If we " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3497) (undo-tree-id10562 . -5) (undo-tree-id10563 . -5) (undo-tree-id10564 . -5) (undo-tree-id10565 . -5) (undo-tree-id10566 . -5) 3502) nil (25772 50078 583794 942000) 0 nil])
([nil nil ((3497 . 3498) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3497)) nil (25772 50078 583791 334000) 0 nil])
([nil nil ((#("this " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3505) (undo-tree-id10561 . -4)) nil (25772 50078 583790 237000) 0 nil])
([nil nil ((3505 . 3509)) nil (25772 50078 583788 997000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3538) (undo-tree-id10558 . -3) (undo-tree-id10559 . -1) (undo-tree-id10560 . -4)) nil (25772 50078 583788 127000) 0 nil])
([nil nil ((#("default " 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3538) (undo-tree-id10556 . -7) (undo-tree-id10557 . -8)) nil (25772 50078 583785 291000) 0 nil])
([nil nil ((3495 . 3713) (#("- then fit it on the training set for 20 epochs and evaluate it on the validation set, we get an MSE of about 0.004. That's much better than the naive approach!
- Compile the model using the MSE loss and Adam optimizer" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 66 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 129 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 129 140 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 140 141 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 141 160 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 160 161 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 161 162 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 162 163 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 163 208 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 208 209 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 209 218 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3495) (undo-tree-id10398 . -218) (undo-tree-id10399 . -218) (undo-tree-id10400 . 43) (undo-tree-id10401 . -163) (undo-tree-id10402 . -163) (undo-tree-id10403 . 54) (undo-tree-id10404 . -163) (undo-tree-id10405 . -163) (undo-tree-id10406 . -218) (undo-tree-id10407 . 27) (undo-tree-id10408 . -194) (undo-tree-id10409 . -204) (undo-tree-id10410 . -204) (undo-tree-id10411 . -204) (undo-tree-id10412 . -204) (undo-tree-id10413 . -204) (undo-tree-id10414 . -204) (undo-tree-id10415 . -204) (undo-tree-id10416 . -204) (undo-tree-id10417 . -204) (undo-tree-id10418 . -204) (undo-tree-id10419 . -204) (undo-tree-id10420 . -204) (undo-tree-id10421 . -204) (undo-tree-id10422 . -204) (undo-tree-id10423 . -204) (undo-tree-id10424 . -204) (undo-tree-id10425 . -204) (undo-tree-id10426 . -204) (undo-tree-id10427 . -204) (undo-tree-id10428 . -204) (undo-tree-id10429 . -204) (undo-tree-id10430 . -204) (undo-tree-id10431 . -204) (undo-tree-id10432 . -204) (undo-tree-id10433 . -204) (undo-tree-id10434 . -204) (undo-tree-id10435 . -204) (undo-tree-id10436 . -204) (undo-tree-id10437 . -204) (undo-tree-id10438 . -204) (undo-tree-id10439 . -204) (undo-tree-id10440 . -204) (undo-tree-id10441 . -204) (undo-tree-id10442 . -204) (undo-tree-id10443 . -204) (undo-tree-id10444 . -204) (undo-tree-id10445 . -204) (undo-tree-id10446 . -204) (undo-tree-id10447 . -204) (undo-tree-id10448 . -204) (undo-tree-id10449 . -204) (undo-tree-id10450 . -204) (undo-tree-id10451 . -204) (undo-tree-id10452 . -204) (undo-tree-id10453 . -204) (undo-tree-id10454 . -204) (undo-tree-id10455 . -204) (undo-tree-id10456 . -204) (undo-tree-id10457 . -204) (undo-tree-id10458 . -204) (undo-tree-id10459 . -204) (undo-tree-id10460 . -204) (undo-tree-id10461 . -204) (undo-tree-id10462 . -204) (undo-tree-id10463 . -204) (undo-tree-id10464 . -204) (undo-tree-id10465 . -204) (undo-tree-id10466 . -204) (undo-tree-id10467 . -204) (undo-tree-id10468 . -204) (undo-tree-id10469 . -204) (undo-tree-id10470 . -204) (undo-tree-id10471 . -204) (undo-tree-id10472 . -204) (undo-tree-id10473 . -204) (undo-tree-id10474 . -204) (undo-tree-id10475 . -204) (undo-tree-id10476 . -204) (undo-tree-id10477 . -204) (undo-tree-id10478 . -204) (undo-tree-id10479 . -204) (undo-tree-id10480 . -204) (undo-tree-id10481 . -204) (undo-tree-id10482 . -204) (undo-tree-id10483 . -204) (undo-tree-id10484 . -204) (undo-tree-id10485 . -204) (undo-tree-id10486 . -204) (undo-tree-id10487 . -204) (undo-tree-id10488 . -204) (undo-tree-id10489 . -207) (undo-tree-id10490 . -207) (undo-tree-id10491 . -207) (undo-tree-id10492 . -207) (undo-tree-id10493 . -207) (undo-tree-id10494 . -207) (undo-tree-id10495 . -207) (undo-tree-id10496 . -207) (undo-tree-id10497 . -207) (undo-tree-id10498 . -207) (undo-tree-id10499 . -207) (undo-tree-id10500 . -207) (undo-tree-id10501 . -207) (undo-tree-id10502 . -207) (undo-tree-id10503 . -207) (undo-tree-id10504 . -217) (undo-tree-id10505 . -217) (undo-tree-id10506 . -217) (undo-tree-id10507 . -217) (undo-tree-id10508 . -217) (undo-tree-id10509 . -217) (undo-tree-id10510 . -217) (undo-tree-id10511 . -217) (undo-tree-id10512 . -217) (undo-tree-id10513 . -217) (undo-tree-id10514 . -217) (undo-tree-id10515 . -217) (undo-tree-id10516 . -217) (undo-tree-id10517 . -217) (undo-tree-id10518 . -217) (undo-tree-id10519 . -218) (undo-tree-id10520 . -218) (undo-tree-id10521 . -218) (undo-tree-id10522 . -218) (undo-tree-id10523 . -218) (undo-tree-id10524 . -218) (undo-tree-id10525 . -218) (undo-tree-id10526 . -218) (undo-tree-id10527 . -218) (undo-tree-id10528 . -218) (undo-tree-id10529 . -218) (undo-tree-id10530 . -218) (undo-tree-id10531 . -218) (undo-tree-id10532 . -218) (undo-tree-id10533 . -218) (undo-tree-id10534 . -218) (undo-tree-id10535 . -218) (undo-tree-id10536 . -218) (undo-tree-id10537 . -218) (undo-tree-id10538 . -218) (undo-tree-id10539 . -218) (undo-tree-id10540 . -218) (undo-tree-id10541 . -218) (undo-tree-id10542 . -218) (undo-tree-id10543 . -218) (undo-tree-id10544 . -218) (undo-tree-id10545 . -218) (undo-tree-id10546 . -218) (undo-tree-id10547 . -218) (undo-tree-id10548 . -218) (undo-tree-id10549 . -218) (undo-tree-id10550 . -218) (undo-tree-id10551 . -218) (undo-tree-id10552 . -161) (3495 . 3656) (#(" then fit it on the training set for 20 epochs and evaluate it on the validation set, we get an MSE of about 0.004. That's much better than the naive approach!" 0 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 128 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 128 139 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 139 140 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 140 159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3552) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3552) (undo-tree-id10553 . -1) (undo-tree-id10554 . -1) (undo-tree-id10555 . -1)) nil (25772 50078 583778 300000) 0 nil])
([nil nil ((3555 . 3556) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3555)) nil (25772 50078 583668 175000) 0 nil])
([nil nil ((3553 . 3714) (#("- we get an MSE of about 0.004. That's much better than the naive approach!
- Then fit it on the training set for 20 epochs and evaluate it on the validation set" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 44 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 44 55 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 55 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 56 75 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 75 76 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 77 78 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 78 142 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 142 143 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 143 161 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3553) (undo-tree-id9992 . -161) (undo-tree-id9993 . -161) (undo-tree-id9994 . 83) (undo-tree-id9995 . -78) (undo-tree-id9996 . -78) (undo-tree-id9997 . 82) (undo-tree-id9998 . -78) (undo-tree-id9999 . -78) (undo-tree-id10000 . -161) (undo-tree-id10001 . -78) (undo-tree-id10002 . -78) (undo-tree-id10003 . -78) (undo-tree-id10004 . -78) (undo-tree-id10005 . -78) (undo-tree-id10006 . -78) (undo-tree-id10007 . -78) (undo-tree-id10008 . -78) (undo-tree-id10009 . -78) (undo-tree-id10010 . -78) (undo-tree-id10011 . -78) (undo-tree-id10012 . -78) (undo-tree-id10013 . -78) (undo-tree-id10014 . -78) (undo-tree-id10015 . -78) (undo-tree-id10016 . -78) (undo-tree-id10017 . -77) (undo-tree-id10018 . -77) (undo-tree-id10019 . -77) (undo-tree-id10020 . -77) (undo-tree-id10021 . -77) (undo-tree-id10022 . -77) (undo-tree-id10023 . -77) (undo-tree-id10024 . -77) (undo-tree-id10025 . -77) (undo-tree-id10026 . -77) (undo-tree-id10027 . -77) (undo-tree-id10028 . -77) (undo-tree-id10029 . -77) (undo-tree-id10030 . -77) (undo-tree-id10031 . -77) (undo-tree-id10032 . -77) (undo-tree-id10033 . -77) (undo-tree-id10034 . -77) (undo-tree-id10035 . -77) (undo-tree-id10036 . -77) (undo-tree-id10037 . -77) (undo-tree-id10038 . -77) (undo-tree-id10039 . -77) (undo-tree-id10040 . -77) (undo-tree-id10041 . -77) (undo-tree-id10042 . -77) (undo-tree-id10043 . -77) (undo-tree-id10044 . -77) (undo-tree-id10045 . -77) (undo-tree-id10046 . -77) (undo-tree-id10047 . -77) (undo-tree-id10048 . -77) (undo-tree-id10049 . -77) (undo-tree-id10050 . -78) (undo-tree-id10051 . -78) (undo-tree-id10052 . -78) (undo-tree-id10053 . -78) (undo-tree-id10054 . -78) (undo-tree-id10055 . -78) (undo-tree-id10056 . -78) (undo-tree-id10057 . -78) (undo-tree-id10058 . -78) (undo-tree-id10059 . -78) (undo-tree-id10060 . -78) (undo-tree-id10061 . -78) (undo-tree-id10062 . -78) (undo-tree-id10063 . -78) (undo-tree-id10064 . -78) (undo-tree-id10065 . -78) (undo-tree-id10066 . -78) (undo-tree-id10067 . -78) (undo-tree-id10068 . -78) (undo-tree-id10069 . -78) (undo-tree-id10070 . -78) (undo-tree-id10071 . -78) (undo-tree-id10072 . -78) (undo-tree-id10073 . -78) (undo-tree-id10074 . -78) (undo-tree-id10075 . -78) (undo-tree-id10076 . -78) (undo-tree-id10077 . -78) (undo-tree-id10078 . -78) (undo-tree-id10079 . -78) (undo-tree-id10080 . -78) (undo-tree-id10081 . -78) (undo-tree-id10082 . -78) (undo-tree-id10083 . -78) (undo-tree-id10084 . -78) (undo-tree-id10085 . -78) (undo-tree-id10086 . -78) (undo-tree-id10087 . -78) (undo-tree-id10088 . -78) (undo-tree-id10089 . -78) (undo-tree-id10090 . -78) (undo-tree-id10091 . -78) (undo-tree-id10092 . -78) (undo-tree-id10093 . -78) (undo-tree-id10094 . -78) (undo-tree-id10095 . -78) (undo-tree-id10096 . -78) (undo-tree-id10097 . -78) (undo-tree-id10098 . -78) (undo-tree-id10099 . -78) (undo-tree-id10100 . -78) (undo-tree-id10101 . -78) (undo-tree-id10102 . -78) (undo-tree-id10103 . -78) (undo-tree-id10104 . -78) (undo-tree-id10105 . -78) (undo-tree-id10106 . -78) (undo-tree-id10107 . -78) (undo-tree-id10108 . -78) (undo-tree-id10109 . -78) (undo-tree-id10110 . -78) (undo-tree-id10111 . -78) (undo-tree-id10112 . -78) (undo-tree-id10113 . -78) (undo-tree-id10114 . -78) (undo-tree-id10115 . -78) (undo-tree-id10116 . -78) (undo-tree-id10117 . -78) (undo-tree-id10118 . -78) (undo-tree-id10119 . -78) (undo-tree-id10120 . -78) (undo-tree-id10121 . -78) (undo-tree-id10122 . -78) (undo-tree-id10123 . -78) (undo-tree-id10124 . -78) (undo-tree-id10125 . -78) (undo-tree-id10126 . -78) (undo-tree-id10127 . -78) (undo-tree-id10128 . -78) (undo-tree-id10129 . -78) (undo-tree-id10130 . -78) (undo-tree-id10131 . -78) (undo-tree-id10132 . -78) (undo-tree-id10133 . -78) (undo-tree-id10134 . -81) (undo-tree-id10135 . -81) (undo-tree-id10136 . -81) (undo-tree-id10137 . -81) (undo-tree-id10138 . -81) (undo-tree-id10139 . -81) (undo-tree-id10140 . -81) (undo-tree-id10141 . -81) (undo-tree-id10142 . -81) (undo-tree-id10143 . -81) (undo-tree-id10144 . -81) (undo-tree-id10145 . -81) (undo-tree-id10146 . -81) (undo-tree-id10147 . -81) (undo-tree-id10148 . -81) (undo-tree-id10149 . -85) (undo-tree-id10150 . -85) (undo-tree-id10151 . -85) (undo-tree-id10152 . -85) (undo-tree-id10153 . -85) (undo-tree-id10154 . -85) (undo-tree-id10155 . -85) (undo-tree-id10156 . -85) (undo-tree-id10157 . -85) (undo-tree-id10158 . -85) (undo-tree-id10159 . -85) (undo-tree-id10160 . -85) (undo-tree-id10161 . -85) (undo-tree-id10162 . -85) (undo-tree-id10163 . -85) (undo-tree-id10164 . -88) (undo-tree-id10165 . -88) (undo-tree-id10166 . -88) (undo-tree-id10167 . -88) (undo-tree-id10168 . -88) (undo-tree-id10169 . -88) (undo-tree-id10170 . -88) (undo-tree-id10171 . -88) (undo-tree-id10172 . -88) (undo-tree-id10173 . -88) (undo-tree-id10174 . -88) (undo-tree-id10175 . -88) (undo-tree-id10176 . -88) (undo-tree-id10177 . -88) (undo-tree-id10178 . -88) (undo-tree-id10179 . -91) (undo-tree-id10180 . -91) (undo-tree-id10181 . -91) (undo-tree-id10182 . -91) (undo-tree-id10183 . -91) (undo-tree-id10184 . -91) (undo-tree-id10185 . -91) (undo-tree-id10186 . -91) (undo-tree-id10187 . -91) (undo-tree-id10188 . -91) (undo-tree-id10189 . -91) (undo-tree-id10190 . -91) (undo-tree-id10191 . -91) (undo-tree-id10192 . -91) (undo-tree-id10193 . -91) (undo-tree-id10194 . -95) (undo-tree-id10195 . -95) (undo-tree-id10196 . -95) (undo-tree-id10197 . -95) (undo-tree-id10198 . -95) (undo-tree-id10199 . -95) (undo-tree-id10200 . -95) (undo-tree-id10201 . -95) (undo-tree-id10202 . -95) (undo-tree-id10203 . -95) (undo-tree-id10204 . -95) (undo-tree-id10205 . -95) (undo-tree-id10206 . -95) (undo-tree-id10207 . -95) (undo-tree-id10208 . -95) (undo-tree-id10209 . -104) (undo-tree-id10210 . -104) (undo-tree-id10211 . -104) (undo-tree-id10212 . -104) (undo-tree-id10213 . -104) (undo-tree-id10214 . -104) (undo-tree-id10215 . -104) (undo-tree-id10216 . -104) (undo-tree-id10217 . -108) (undo-tree-id10218 . -108) (undo-tree-id10219 . -108) (undo-tree-id10220 . -108) (undo-tree-id10221 . -108) (undo-tree-id10222 . -108) (undo-tree-id10223 . -108) (undo-tree-id10224 . -108) (undo-tree-id10225 . -112) (undo-tree-id10226 . -112) (undo-tree-id10227 . -112) (undo-tree-id10228 . -112) (undo-tree-id10229 . -112) (undo-tree-id10230 . -112) (undo-tree-id10231 . -112) (undo-tree-id10232 . -112) (undo-tree-id10233 . -115) (undo-tree-id10234 . -115) (undo-tree-id10235 . -115) (undo-tree-id10236 . -115) (undo-tree-id10237 . -115) (undo-tree-id10238 . -115) (undo-tree-id10239 . -115) (undo-tree-id10240 . -115) (undo-tree-id10241 . -122) (undo-tree-id10242 . -122) (undo-tree-id10243 . -122) (undo-tree-id10244 . -122) (undo-tree-id10245 . -122) (undo-tree-id10246 . -122) (undo-tree-id10247 . -122) (undo-tree-id10248 . -122) (undo-tree-id10249 . -126) (undo-tree-id10250 . -126) (undo-tree-id10251 . -126) (undo-tree-id10252 . -126) (undo-tree-id10253 . -126) (undo-tree-id10254 . -126) (undo-tree-id10255 . -126) (undo-tree-id10256 . -126) (undo-tree-id10257 . -126) (undo-tree-id10258 . -126) (undo-tree-id10259 . -126) (undo-tree-id10260 . -126) (undo-tree-id10261 . -126) (undo-tree-id10262 . -126) (undo-tree-id10263 . -126) (undo-tree-id10264 . -135) (undo-tree-id10265 . -135) (undo-tree-id10266 . -135) (undo-tree-id10267 . -135) (undo-tree-id10268 . -135) (undo-tree-id10269 . -135) (undo-tree-id10270 . -135) (undo-tree-id10271 . -135) (undo-tree-id10272 . -135) (undo-tree-id10273 . -135) (undo-tree-id10274 . -135) (undo-tree-id10275 . -135) (undo-tree-id10276 . -135) (undo-tree-id10277 . -135) (undo-tree-id10278 . -135) (undo-tree-id10279 . -138) (undo-tree-id10280 . -138) (undo-tree-id10281 . -138) (undo-tree-id10282 . -138) (undo-tree-id10283 . -138) (undo-tree-id10284 . -138) (undo-tree-id10285 . -138) (undo-tree-id10286 . -138) (undo-tree-id10287 . -138) (undo-tree-id10288 . -138) (undo-tree-id10289 . -138) (undo-tree-id10290 . -138) (undo-tree-id10291 . -138) (undo-tree-id10292 . -138) (undo-tree-id10293 . -138) (undo-tree-id10294 . -138) (undo-tree-id10295 . -138) (undo-tree-id10296 . -138) (undo-tree-id10297 . -138) (undo-tree-id10298 . -138) (undo-tree-id10299 . -138) (undo-tree-id10300 . -138) (undo-tree-id10301 . -141) (undo-tree-id10302 . -141) (undo-tree-id10303 . -141) (undo-tree-id10304 . -141) (undo-tree-id10305 . -141) (undo-tree-id10306 . -141) (undo-tree-id10307 . -141) (undo-tree-id10308 . -141) (undo-tree-id10309 . -141) (undo-tree-id10310 . -141) (undo-tree-id10311 . -141) (undo-tree-id10312 . -141) (undo-tree-id10313 . -141) (undo-tree-id10314 . -141) (undo-tree-id10315 . -141) (undo-tree-id10316 . -145) (undo-tree-id10317 . -145) (undo-tree-id10318 . -145) (undo-tree-id10319 . -145) (undo-tree-id10320 . -145) (undo-tree-id10321 . -145) (undo-tree-id10322 . -145) (undo-tree-id10323 . -145) (undo-tree-id10324 . -145) (undo-tree-id10325 . -145) (undo-tree-id10326 . -145) (undo-tree-id10327 . -145) (undo-tree-id10328 . -145) (undo-tree-id10329 . -145) (undo-tree-id10330 . -145) (undo-tree-id10331 . -156) (undo-tree-id10332 . -156) (undo-tree-id10333 . -156) (undo-tree-id10334 . -156) (undo-tree-id10335 . -156) (undo-tree-id10336 . -156) (undo-tree-id10337 . -156) (undo-tree-id10338 . -156) (undo-tree-id10339 . -156) (undo-tree-id10340 . -156) (undo-tree-id10341 . -156) (undo-tree-id10342 . -156) (undo-tree-id10343 . -156) (undo-tree-id10344 . -156) (undo-tree-id10345 . -156) (undo-tree-id10346 . -160) (undo-tree-id10347 . -160) (undo-tree-id10348 . -160) (undo-tree-id10349 . -160) (undo-tree-id10350 . -160) (undo-tree-id10351 . -160) (undo-tree-id10352 . -160) (undo-tree-id10353 . -160) (undo-tree-id10354 . -160) (undo-tree-id10355 . -160) (undo-tree-id10356 . -160) (undo-tree-id10357 . -160) (undo-tree-id10358 . -160) (undo-tree-id10359 . -160) (undo-tree-id10360 . -160) (undo-tree-id10361 . -161) (undo-tree-id10362 . -161) (undo-tree-id10363 . -161) (undo-tree-id10364 . -161) (undo-tree-id10365 . -161) (undo-tree-id10366 . -161) (undo-tree-id10367 . -161) (undo-tree-id10368 . -161) (undo-tree-id10369 . -161) (undo-tree-id10370 . -161) (undo-tree-id10371 . -161) (undo-tree-id10372 . -161) (undo-tree-id10373 . -161) (undo-tree-id10374 . -161) (undo-tree-id10375 . -161) (undo-tree-id10376 . -161) (undo-tree-id10377 . -161) (undo-tree-id10378 . -161) (undo-tree-id10379 . -161) (undo-tree-id10380 . -161) (undo-tree-id10381 . -161) (undo-tree-id10382 . -161) (undo-tree-id10383 . -161) (undo-tree-id10384 . -161) (undo-tree-id10385 . -161) (undo-tree-id10386 . -161) (undo-tree-id10387 . -161) (undo-tree-id10388 . -161) (undo-tree-id10389 . -161) (undo-tree-id10390 . -161) (undo-tree-id10391 . -161) (undo-tree-id10392 . -161) (undo-tree-id10393 . -161) (undo-tree-id10394 . -76) (3553 . 3629) (#(" we get an MSE of about 0.004. That's much better than the naive approach!" 0 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 54 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 55 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3638) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3638) (undo-tree-id10395 . -1) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1)) nil (25772 50078 583654 230000) 0 nil])
([nil nil ((#("we get an " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3641) (undo-tree-id9978 . -9) (undo-tree-id9979 . 10) (undo-tree-id9980 . -9) (undo-tree-id9981 . -9) (undo-tree-id9982 . -9) (undo-tree-id9983 . -10) (undo-tree-id9984 . -9) (undo-tree-id9985 . -1) (undo-tree-id9986 . -5) (undo-tree-id9987 . -8) (undo-tree-id9988 . -10) (undo-tree-id9989 . -9) (undo-tree-id9990 . -9) (undo-tree-id9991 . -10) 3650) nil (25772 50078 583299 122000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3645) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1)) nil (25772 50078 583288 239000) 0 nil])
([nil nil ((#("f " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3645) (undo-tree-id9974 . -1) (undo-tree-id9975 . -2)) nil (25772 50078 583286 134000) 0 nil])
([nil nil ((#("about " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3645) (undo-tree-id9972 . -5) (undo-tree-id9973 . -6)) nil (25772 50078 583283 950000) 0 nil])
([nil nil ((3645 . 3647)) nil (25772 50078 583281 927000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3652) (undo-tree-id9970 . -1) (undo-tree-id9971 . -1)) nil (25772 50078 583280 612000) 0 nil])
([nil nil ((3639 . 3698) (#("- That's much better than the naive approach!
- MSE = 0.004" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 14 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 14 25 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 25 26 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 26 45 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 45 46 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 46 47 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 47 48 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 48 59 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3639) (undo-tree-id9767 . -59) (undo-tree-id9768 . -59) (undo-tree-id9769 . 5) (undo-tree-id9770 . -48) (undo-tree-id9771 . -48) (undo-tree-id9772 . 11) (undo-tree-id9773 . -48) (undo-tree-id9774 . -48) (undo-tree-id9775 . -59) (undo-tree-id9776 . -48) (undo-tree-id9777 . -48) (undo-tree-id9778 . -48) (undo-tree-id9779 . -48) (undo-tree-id9780 . -48) (undo-tree-id9781 . -48) (undo-tree-id9782 . -48) (undo-tree-id9783 . -48) (undo-tree-id9784 . -48) (undo-tree-id9785 . -47) (undo-tree-id9786 . -47) (undo-tree-id9787 . -47) (undo-tree-id9788 . -47) (undo-tree-id9789 . -47) (undo-tree-id9790 . -47) (undo-tree-id9791 . -47) (undo-tree-id9792 . -47) (undo-tree-id9793 . -47) (undo-tree-id9794 . -47) (undo-tree-id9795 . -47) (undo-tree-id9796 . -47) (undo-tree-id9797 . -47) (undo-tree-id9798 . -47) (undo-tree-id9799 . -47) (undo-tree-id9800 . -47) (undo-tree-id9801 . -47) (undo-tree-id9802 . -47) (undo-tree-id9803 . -47) (undo-tree-id9804 . -48) (undo-tree-id9805 . -48) (undo-tree-id9806 . -48) (undo-tree-id9807 . -48) (undo-tree-id9808 . -48) (undo-tree-id9809 . -48) (undo-tree-id9810 . -48) (undo-tree-id9811 . -48) (undo-tree-id9812 . -48) (undo-tree-id9813 . -48) (undo-tree-id9814 . -48) (undo-tree-id9815 . -48) (undo-tree-id9816 . -48) (undo-tree-id9817 . -48) (undo-tree-id9818 . -50) (undo-tree-id9819 . -49) (undo-tree-id9820 . -48) (undo-tree-id9821 . -48) (undo-tree-id9822 . -48) (undo-tree-id9823 . -48) (undo-tree-id9824 . -48) (undo-tree-id9825 . -48) (undo-tree-id9826 . -48) (undo-tree-id9827 . -48) (undo-tree-id9828 . -48) (undo-tree-id9829 . -48) (undo-tree-id9830 . -48) (undo-tree-id9831 . -48) (undo-tree-id9832 . -52) (undo-tree-id9833 . -52) (undo-tree-id9834 . -52) (undo-tree-id9835 . -52) (undo-tree-id9836 . -52) (undo-tree-id9837 . -52) (undo-tree-id9838 . -52) (undo-tree-id9839 . -52) (undo-tree-id9840 . -52) (undo-tree-id9841 . -52) (undo-tree-id9842 . -52) (undo-tree-id9843 . -52) (undo-tree-id9844 . -52) (undo-tree-id9845 . -52) (undo-tree-id9846 . -52) (undo-tree-id9847 . -52) (undo-tree-id9848 . -52) (undo-tree-id9849 . -52) (undo-tree-id9850 . -52) (undo-tree-id9851 . -52) (undo-tree-id9852 . -52) (undo-tree-id9853 . -52) (undo-tree-id9854 . -52) (undo-tree-id9855 . -52) (undo-tree-id9856 . -52) (undo-tree-id9857 . -52) (undo-tree-id9858 . -52) (undo-tree-id9859 . -52) (undo-tree-id9860 . -52) (undo-tree-id9861 . -52) (undo-tree-id9862 . -52) (undo-tree-id9863 . -52) (undo-tree-id9864 . -52) (undo-tree-id9865 . -52) (undo-tree-id9866 . -52) (undo-tree-id9867 . -52) (undo-tree-id9868 . -52) (undo-tree-id9869 . -52) (undo-tree-id9870 . 11) (undo-tree-id9871 . -51) (undo-tree-id9872 . -52) (undo-tree-id9873 . -52) (undo-tree-id9874 . -52) (undo-tree-id9875 . -52) (undo-tree-id9876 . -52) (undo-tree-id9877 . -52) (undo-tree-id9878 . -52) (undo-tree-id9879 . -52) (undo-tree-id9880 . -52) (undo-tree-id9881 . -52) (undo-tree-id9882 . -52) (undo-tree-id9883 . -52) (undo-tree-id9884 . -52) (undo-tree-id9885 . -52) (undo-tree-id9886 . -52) (undo-tree-id9887 . -52) (undo-tree-id9888 . -52) (undo-tree-id9889 . -52) (undo-tree-id9890 . -52) (undo-tree-id9891 . -52) (undo-tree-id9892 . -53) (undo-tree-id9893 . -53) (undo-tree-id9894 . -53) (undo-tree-id9895 . -53) (undo-tree-id9896 . -53) (undo-tree-id9897 . -53) (undo-tree-id9898 . -53) (undo-tree-id9899 . -53) (undo-tree-id9900 . -53) (undo-tree-id9901 . -54) (undo-tree-id9902 . -54) (undo-tree-id9903 . -54) (undo-tree-id9904 . -54) (undo-tree-id9905 . -54) (undo-tree-id9906 . -54) (undo-tree-id9907 . -54) (undo-tree-id9908 . -54) (undo-tree-id9909 . -54) (undo-tree-id9910 . -53) (undo-tree-id9911 . -53) (undo-tree-id9912 . -53) (undo-tree-id9913 . -53) (undo-tree-id9914 . -53) (undo-tree-id9915 . -53) (undo-tree-id9916 . -53) (undo-tree-id9917 . -53) (undo-tree-id9918 . -53) (undo-tree-id9919 . -53) (undo-tree-id9920 . -53) (undo-tree-id9921 . -53) (undo-tree-id9922 . -53) (undo-tree-id9923 . -53) (undo-tree-id9924 . -53) (undo-tree-id9925 . -53) (undo-tree-id9926 . -53) (undo-tree-id9927 . -53) (undo-tree-id9928 . -53) (undo-tree-id9929 . -54) (undo-tree-id9930 . -55) (undo-tree-id9931 . -56) (undo-tree-id9932 . -57) (undo-tree-id9933 . -58) (undo-tree-id9934 . -59) (undo-tree-id9935 . -59) (undo-tree-id9936 . -59) (undo-tree-id9937 . -59) (undo-tree-id9938 . -59) (undo-tree-id9939 . -59) (undo-tree-id9940 . -59) (undo-tree-id9941 . -59) (undo-tree-id9942 . -59) (undo-tree-id9943 . -59) (undo-tree-id9944 . -59) (undo-tree-id9945 . -59) (undo-tree-id9946 . -59) (undo-tree-id9947 . -59) (undo-tree-id9948 . -59) (undo-tree-id9949 . -59) (undo-tree-id9950 . -59) (undo-tree-id9951 . -59) (undo-tree-id9952 . -59) (undo-tree-id9953 . -59) (undo-tree-id9954 . -59) (undo-tree-id9955 . -59) (undo-tree-id9956 . -46) (3639 . 3685) (#(" That's much better than the naive approach!" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 24 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 25 44 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3652) (undo-tree-id9957 . -1) (undo-tree-id9958 . -1) (undo-tree-id9959 . -1) (undo-tree-id9960 . -1) (undo-tree-id9961 . -1) (undo-tree-id9962 . -1) (undo-tree-id9963 . -1) (undo-tree-id9964 . -1) (undo-tree-id9965 . -1) (undo-tree-id9966 . -1) (undo-tree-id9967 . -1) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) 3653) nil (25772 50078 583267 571000) 0 nil])
([nil nil ((#("That's " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3655) (undo-tree-id9764 . -6) (undo-tree-id9765 . 7) (undo-tree-id9766 . -7)) nil (25772 50078 584224 923000) 0 nil])
([nil nil ((3655 . 3656) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3655)) nil (25772 50090 893466 316000) 0 nil] [nil nil ((#("much " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3655) (undo-tree-id9761 . -4) (undo-tree-id9762 . 5) (undo-tree-id9763 . -5)) ((3655 . 3660)) (25772 50078 582873 925000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3690) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1)) nil (25772 50090 893465 35000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3694) (undo-tree-id10692 . -1)) nil (25772 50090 893462 89000) 0 nil])
([nil nil ((#("  
" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3691) (undo-tree-id10647 . -2) (undo-tree-id10648 . -3) (undo-tree-id10649 . -3) (undo-tree-id10650 . -3) (undo-tree-id10651 . -3) (undo-tree-id10652 . -3) (undo-tree-id10653 . -3) (undo-tree-id10654 . -3) (undo-tree-id10655 . -3) (undo-tree-id10656 . -3) (undo-tree-id10657 . -3) (undo-tree-id10658 . -3) (undo-tree-id10659 . -3) (undo-tree-id10660 . -3) (undo-tree-id10661 . -3) (undo-tree-id10662 . -3) (undo-tree-id10663 . -3) (undo-tree-id10664 . -3) (undo-tree-id10665 . -3) (undo-tree-id10666 . -3) (undo-tree-id10667 . -3) (undo-tree-id10668 . -3) (undo-tree-id10669 . -3) (undo-tree-id10670 . -3) (undo-tree-id10671 . -3) (undo-tree-id10672 . -3) (undo-tree-id10673 . -3) (undo-tree-id10674 . -3) (undo-tree-id10675 . -3) (undo-tree-id10676 . -3) (undo-tree-id10677 . -3) (undo-tree-id10678 . -3) (undo-tree-id10679 . -3) (undo-tree-id10680 . -3) (undo-tree-id10681 . -3) (undo-tree-id10682 . -3) (undo-tree-id10683 . -3) (undo-tree-id10684 . -3) (undo-tree-id10685 . -3) (undo-tree-id10686 . -3) (undo-tree-id10687 . -3) (undo-tree-id10688 . -3) (undo-tree-id10689 . -3) (undo-tree-id10690 . -3) (undo-tree-id10691 . -3)) nil (25772 50090 893455 429000) 0 nil])
([nil nil ((3969 . 3971) (t 25772 50090 944726 616000)) nil (25772 50145 476346 443000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
model = keras.models.Sequential([
keras.layers.SimpleRNN(1, input_shape=[None, 1])
])
#+end_src
" 0 34 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 34 35 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 35 40 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 40 66 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 66 67 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 68 69 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 69 91 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 91 92 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 92 100 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 100 101 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 101 106 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 106 107 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 107 108 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 108 112 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-constant-face org-block)) 112 115 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 115 116 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 116 117 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 117 118 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 118 119 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 119 120 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 120 121 (fontified t font-lock-fontified t src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 121 130 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 130 131 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 4020) (undo-tree-id11117 . -130) (undo-tree-id11118 . -121) (undo-tree-id11119 . -121) (undo-tree-id11120 . -121) (undo-tree-id11121 . -2) (undo-tree-id11122 . -2) (undo-tree-id11123 . -2) (undo-tree-id11124 . -2) (undo-tree-id11125 . -2) (undo-tree-id11126 . -2) (undo-tree-id11127 . -2) (undo-tree-id11128 . -2) (undo-tree-id11129 . -7) (undo-tree-id11130 . -2) (undo-tree-id11131 . -131) (undo-tree-id11132 . -121) (undo-tree-id11133 . -35) (undo-tree-id11134 . -35) (undo-tree-id11135 . -35) (undo-tree-id11136 . -35) (undo-tree-id11137 . -35) (undo-tree-id11138 . -35) (undo-tree-id11139 . -35) (undo-tree-id11140 . -35) (undo-tree-id11141 . -69) (undo-tree-id11142 . -69) (undo-tree-id11143 . -69) (undo-tree-id11144 . -69) (undo-tree-id11145 . -69) (undo-tree-id11146 . -69) (undo-tree-id11147 . -69) (undo-tree-id11148 . -69) (undo-tree-id11149 . -118) (undo-tree-id11150 . -118) (undo-tree-id11151 . -118) (undo-tree-id11152 . -118) (undo-tree-id11153 . -118) (undo-tree-id11154 . -118) (undo-tree-id11155 . -118) (undo-tree-id11156 . -118) (undo-tree-id11157 . -118) (undo-tree-id11158 . -118) (undo-tree-id11159 . -118) (undo-tree-id11160 . -118) (undo-tree-id11161 . -118) (undo-tree-id11162 . -118) (undo-tree-id11163 . -118) (undo-tree-id11164 . -121) (undo-tree-id11165 . -121) (undo-tree-id11166 . -121) (undo-tree-id11167 . -121) (undo-tree-id11168 . -121) (undo-tree-id11169 . -121) (undo-tree-id11170 . -121) (undo-tree-id11171 . -121) (undo-tree-id11172 . -121) (undo-tree-id11173 . -121) (undo-tree-id11174 . -121) (undo-tree-id11175 . -121) (undo-tree-id11176 . -121) (undo-tree-id11177 . -121) (undo-tree-id11178 . -121) (undo-tree-id11179 . -121) (undo-tree-id11180 . -131) 4141) nil (25772 50145 476343 626000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5400 . 5401) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -5531) (5400 . 5532)) nil (25772 50149 76442 404000) 0 nil])
([nil nil ((#("Let's see if we can beat that with a simple " 0 44 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3971) (undo-tree-id12349 . -43) (undo-tree-id12350 . 44) (undo-tree-id12351 . -6) (undo-tree-id12352 . -44)) nil (25772 50266 639455 110000) 0 nil] [nil nil ((#("- Let's see if we can beat that with a simple RNN:
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3969) (undo-tree-id10953 . -50) (undo-tree-id10954 . 49) (undo-tree-id10955 . -51) (undo-tree-id10956 . -51) (undo-tree-id10957 . -51) (undo-tree-id10958 . -2) (undo-tree-id10959 . -8) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1) (undo-tree-id10969 . -2) (undo-tree-id10970 . -2) (undo-tree-id10971 . -2) (undo-tree-id10972 . -2) (undo-tree-id10973 . -2) (undo-tree-id10974 . -2) (undo-tree-id10975 . -2) (undo-tree-id10976 . -2) (undo-tree-id10977 . -2) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -2) (undo-tree-id10998 . -2) (undo-tree-id10999 . -2) (undo-tree-id11000 . -2) (undo-tree-id11001 . -2) (undo-tree-id11002 . -2) (undo-tree-id11003 . -2) (undo-tree-id11004 . -2) (undo-tree-id11005 . -51) (undo-tree-id11006 . -51) (undo-tree-id11007 . -51) (undo-tree-id11008 . -51) (undo-tree-id11009 . -51) (undo-tree-id11010 . -51) (undo-tree-id11011 . -51) (undo-tree-id11012 . -51) (undo-tree-id11013 . -51) (undo-tree-id11014 . -51) (undo-tree-id11015 . -51) (undo-tree-id11016 . -51) (undo-tree-id11017 . -51) (undo-tree-id11018 . -51) (undo-tree-id11019 . -51) (undo-tree-id11020 . -51) (undo-tree-id11021 . -51) (undo-tree-id11022 . -51) (undo-tree-id11023 . -51) (undo-tree-id11024 . -51) (undo-tree-id11025 . -51) (undo-tree-id11026 . -51) (undo-tree-id11027 . -51) (undo-tree-id11028 . -51) (undo-tree-id11029 . -51) (undo-tree-id11030 . -51) (undo-tree-id11031 . -51) (undo-tree-id11032 . -51) (undo-tree-id11033 . -51) (undo-tree-id11034 . -51) (undo-tree-id11035 . -51) (undo-tree-id11036 . -51) (undo-tree-id11037 . -51) (undo-tree-id11038 . -51) (undo-tree-id11039 . -51) (undo-tree-id11040 . -51) (undo-tree-id11041 . -51) (undo-tree-id11042 . -51) (undo-tree-id11043 . -51) (undo-tree-id11044 . -51) (undo-tree-id11045 . -51) (undo-tree-id11046 . -51) (undo-tree-id11047 . -51) (undo-tree-id11048 . -51) (undo-tree-id11049 . -51) (undo-tree-id11050 . -51) (undo-tree-id11051 . -51) (undo-tree-id11052 . -51) (undo-tree-id11053 . -51) (undo-tree-id11054 . -51) (undo-tree-id11055 . -51) (undo-tree-id11056 . -51) (undo-tree-id11057 . -51) (undo-tree-id11058 . -51) (undo-tree-id11059 . -51) (undo-tree-id11060 . -51) (undo-tree-id11061 . -51) (undo-tree-id11062 . -51) (undo-tree-id11063 . -51) (undo-tree-id11064 . -51) (undo-tree-id11065 . -51) (undo-tree-id11066 . -51) (undo-tree-id11067 . -51) (undo-tree-id11068 . -51) (undo-tree-id11069 . -51) (undo-tree-id11070 . -51) (undo-tree-id11071 . -51) (undo-tree-id11072 . -51) (undo-tree-id11073 . -51) (undo-tree-id11074 . -51) (undo-tree-id11075 . -51) (undo-tree-id11076 . -51) (undo-tree-id11077 . -51) (undo-tree-id11078 . -51) (undo-tree-id11079 . -51) (undo-tree-id11080 . -51) (undo-tree-id11081 . -51) (undo-tree-id11082 . -51) (undo-tree-id11083 . -51) (undo-tree-id11084 . -51) (undo-tree-id11085 . -51) (undo-tree-id11086 . 5) (undo-tree-id11087 . -49) (undo-tree-id11088 . -51) (undo-tree-id11089 . -51) (undo-tree-id11090 . -51) (undo-tree-id11091 . -51) (undo-tree-id11092 . -51) (undo-tree-id11093 . -51) (undo-tree-id11094 . -51) (undo-tree-id11095 . -51) (undo-tree-id11096 . -51) (undo-tree-id11097 . -51) (undo-tree-id11098 . -51) (undo-tree-id11099 . -51) (undo-tree-id11100 . -51) (undo-tree-id11101 . -51) (undo-tree-id11102 . -51) (undo-tree-id11103 . -51) (undo-tree-id11104 . -51) (undo-tree-id11105 . -2) (undo-tree-id11106 . -2) (undo-tree-id11107 . -2) (undo-tree-id11108 . -2) (undo-tree-id11109 . -2) (undo-tree-id11110 . -2) (undo-tree-id11111 . -2) (undo-tree-id11112 . -2) (undo-tree-id11113 . -2) (undo-tree-id11114 . -2) (undo-tree-id11115 . -2) (undo-tree-id11116 . -51) 3971) ((3969 . 4020)) (25772 50148 497837 898000) 0 nil])
([nil nil ((3975 . 3976) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3975) (undo-tree-id12229 . 1) (undo-tree-id12230 . -1) (undo-tree-id12231 . -1) (undo-tree-id12232 . -1) (undo-tree-id12233 . -1) (undo-tree-id12234 . -1) (undo-tree-id12235 . -1) (undo-tree-id12236 . -1) (undo-tree-id12237 . -1) (undo-tree-id12238 . -1) (undo-tree-id12239 . -1) (undo-tree-id12240 . -1) (undo-tree-id12241 . -1) (undo-tree-id12242 . -1) (undo-tree-id12243 . -1) (undo-tree-id12244 . -1) (undo-tree-id12245 . -1) (undo-tree-id12246 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3975) (undo-tree-id12247 . -1) (undo-tree-id12248 . -1) (undo-tree-id12249 . -1) (undo-tree-id12250 . -1) (undo-tree-id12251 . -1) (undo-tree-id12252 . -1) (undo-tree-id12253 . -1) (undo-tree-id12254 . -1) (undo-tree-id12255 . -1) (undo-tree-id12256 . -1) (undo-tree-id12257 . -1) (undo-tree-id12258 . -1) (undo-tree-id12259 . -1) (undo-tree-id12260 . -1) (undo-tree-id12261 . -1) (undo-tree-id12262 . -1) (undo-tree-id12263 . -1) (undo-tree-id12264 . -1) (undo-tree-id12265 . -1) (undo-tree-id12266 . -1) (undo-tree-id12267 . -1) (undo-tree-id12268 . -1) (undo-tree-id12269 . -1) (undo-tree-id12270 . -1) (undo-tree-id12271 . -1) (undo-tree-id12272 . -1) (undo-tree-id12273 . -1) (undo-tree-id12274 . -1) (undo-tree-id12275 . -1) (undo-tree-id12276 . -1) (undo-tree-id12277 . -1) (undo-tree-id12278 . -1) (undo-tree-id12279 . -1) (undo-tree-id12280 . -1) (undo-tree-id12281 . -1) (undo-tree-id12282 . -1) (undo-tree-id12283 . -1) (undo-tree-id12284 . -1) (undo-tree-id12285 . -1) (undo-tree-id12286 . -1) (undo-tree-id12287 . -1) (undo-tree-id12288 . -1) (undo-tree-id12289 . -1) (undo-tree-id12290 . -1) (undo-tree-id12291 . -1) (undo-tree-id12292 . -1) (undo-tree-id12293 . -1) (undo-tree-id12294 . -1) (undo-tree-id12295 . -1) (undo-tree-id12296 . -1) (undo-tree-id12297 . -1) (undo-tree-id12298 . -1) (undo-tree-id12299 . -1) (undo-tree-id12300 . -1) (undo-tree-id12301 . -1) (undo-tree-id12302 . -1) (undo-tree-id12303 . -1) (undo-tree-id12304 . -1) (undo-tree-id12305 . -1) (undo-tree-id12306 . -1) (undo-tree-id12307 . -1) (undo-tree-id12308 . -1) (undo-tree-id12309 . -1) (undo-tree-id12310 . -1) (undo-tree-id12311 . -1) (undo-tree-id12312 . -1) (undo-tree-id12313 . -1) (undo-tree-id12314 . -1) (undo-tree-id12315 . -1) (undo-tree-id12316 . -1) (undo-tree-id12317 . -1) (undo-tree-id12318 . -1) (undo-tree-id12319 . -1) (undo-tree-id12320 . -1) (undo-tree-id12321 . -1) (undo-tree-id12322 . -1) (undo-tree-id12323 . -1) (undo-tree-id12324 . -1) (undo-tree-id12325 . -1) (undo-tree-id12326 . -1) (undo-tree-id12327 . -1) (undo-tree-id12328 . -1) (undo-tree-id12329 . -1) (undo-tree-id12330 . -1) (undo-tree-id12331 . -1) (undo-tree-id12332 . -1) (undo-tree-id12333 . -1) (undo-tree-id12334 . -1) (undo-tree-id12335 . -1) (undo-tree-id12336 . -1) (undo-tree-id12337 . -1) (undo-tree-id12338 . -1) (undo-tree-id12339 . -1) (undo-tree-id12340 . -1) (undo-tree-id12341 . -1) (undo-tree-id12342 . -1) (undo-tree-id12343 . -1) (undo-tree-id12344 . -1) (undo-tree-id12345 . -1) (undo-tree-id12346 . -1) (undo-tree-id12347 . -1) (undo-tree-id12348 . -1) 3971) nil (25772 50266 639447 888000) 0 nil])
([nil nil ((3969 . 3971)) ((#("- " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3969) (undo-tree-id11184 . -1) (undo-tree-id11185 . -2) (undo-tree-id11186 . -2) (undo-tree-id11187 . -2) (undo-tree-id11188 . -2) (undo-tree-id11189 . -2) (undo-tree-id11190 . -2) (undo-tree-id11191 . -2) (undo-tree-id11192 . -2) (undo-tree-id11193 . -1) (undo-tree-id11194 . -1) (undo-tree-id11195 . -1) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) (undo-tree-id11198 . -1) (undo-tree-id11199 . -1) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1)) (25772 50145 480422 70000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3974) (undo-tree-id12101 . -1) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) (undo-tree-id12106 . -1) (undo-tree-id12107 . -1) (undo-tree-id12108 . -1) (undo-tree-id12109 . -1) (undo-tree-id12110 . -1) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1) (undo-tree-id12118 . -1) (undo-tree-id12119 . -1) (undo-tree-id12120 . -1) (undo-tree-id12121 . -1) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) (undo-tree-id12129 . -1) (undo-tree-id12130 . -1) (undo-tree-id12131 . -1) (undo-tree-id12132 . -1) (undo-tree-id12133 . -1) (undo-tree-id12134 . -1) (undo-tree-id12135 . -1) (undo-tree-id12136 . -1) (undo-tree-id12137 . -1) (undo-tree-id12138 . -1) (undo-tree-id12139 . -1) (undo-tree-id12140 . -1) (undo-tree-id12141 . -1) (undo-tree-id12142 . -1) (undo-tree-id12143 . -1) (undo-tree-id12144 . -1) (undo-tree-id12145 . -1) (undo-tree-id12146 . -1) (undo-tree-id12147 . -1) (undo-tree-id12148 . -1) (undo-tree-id12149 . -1) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -1) (undo-tree-id12162 . -1) (undo-tree-id12163 . -1) (undo-tree-id12164 . -1) (undo-tree-id12165 . -1) (undo-tree-id12166 . -1) (undo-tree-id12167 . -1) (undo-tree-id12168 . -1) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1) (undo-tree-id12181 . -1) (undo-tree-id12182 . -1) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -1) (undo-tree-id12192 . -1) (undo-tree-id12193 . -1) (undo-tree-id12194 . -1) (undo-tree-id12195 . -1) (undo-tree-id12196 . -1) (undo-tree-id12197 . -1) (undo-tree-id12198 . -1) (undo-tree-id12199 . -1) (undo-tree-id12200 . -1) (undo-tree-id12201 . -1) (undo-tree-id12202 . -1) (undo-tree-id12203 . -1) (undo-tree-id12204 . -1) (undo-tree-id12205 . -1) (undo-tree-id12206 . -1) (undo-tree-id12207 . -1) (undo-tree-id12208 . -1) (undo-tree-id12209 . -1) (undo-tree-id12210 . -1) (undo-tree-id12211 . -1) (undo-tree-id12212 . -1) (undo-tree-id12213 . -1) (undo-tree-id12214 . -1) (undo-tree-id12215 . -1) (undo-tree-id12216 . -1) (undo-tree-id12217 . -1) (undo-tree-id12218 . -1) (undo-tree-id12219 . -1) (undo-tree-id12220 . -1) (undo-tree-id12221 . -1) (undo-tree-id12222 . -1) (undo-tree-id12223 . -1) (undo-tree-id12224 . -1) (undo-tree-id12225 . -1) (undo-tree-id12226 . -1) (undo-tree-id12227 . -1) (undo-tree-id12228 . -1)) nil (25772 50266 639373 237000) 0 nil])
([nil nil ((4663 . 4664) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4663) (undo-tree-id10695 . -1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (4589 . 4590) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4589) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) (undo-tree-id10721 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4590) (undo-tree-id10722 . -1) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) (undo-tree-id10725 . -1) (undo-tree-id10726 . -1) (undo-tree-id10727 . -1) (undo-tree-id10728 . -1) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1) (undo-tree-id10732 . -1) (undo-tree-id10733 . -1) (undo-tree-id10734 . -1) (undo-tree-id10735 . -1) (undo-tree-id10736 . -1) (undo-tree-id10737 . -1) (undo-tree-id10738 . -1) (4534 . 4535) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4534) (undo-tree-id10739 . -1) (undo-tree-id10740 . -1) (undo-tree-id10741 . -1) (undo-tree-id10742 . -1) (undo-tree-id10743 . -1) (undo-tree-id10744 . -1) (undo-tree-id10745 . -1) (undo-tree-id10746 . -1) (undo-tree-id10747 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) (undo-tree-id10750 . -1) (undo-tree-id10751 . -1) (undo-tree-id10752 . -1) (undo-tree-id10753 . -1) (undo-tree-id10754 . -1) (undo-tree-id10755 . -1) (undo-tree-id10756 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4535) (undo-tree-id10757 . -1) (undo-tree-id10758 . -1) (undo-tree-id10759 . -1) (undo-tree-id10760 . -1) (undo-tree-id10761 . -1) (undo-tree-id10762 . -1) (undo-tree-id10763 . -1) (undo-tree-id10764 . -1) (undo-tree-id10765 . -1) (undo-tree-id10766 . -1) (undo-tree-id10767 . -1) (undo-tree-id10768 . -1) (undo-tree-id10769 . -1) (undo-tree-id10770 . -1) (undo-tree-id10771 . -1) (undo-tree-id10772 . -1) (undo-tree-id10773 . -1) (4511 . 4512) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4511) (undo-tree-id10774 . -1) (undo-tree-id10775 . -1) (undo-tree-id10776 . -1) (undo-tree-id10777 . -1) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) (undo-tree-id10782 . -1) (4430 . 4431) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4430) (undo-tree-id10783 . -1) (undo-tree-id10784 . -1) (undo-tree-id10785 . -1) (undo-tree-id10786 . -1) (undo-tree-id10787 . -1) (undo-tree-id10788 . -1) (undo-tree-id10789 . -1) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (4375 . 4376) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4375) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (undo-tree-id10809 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4376) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) (undo-tree-id10814 . -1) (undo-tree-id10815 . -1) (undo-tree-id10816 . -1) (undo-tree-id10817 . -1) (undo-tree-id10818 . -1) (undo-tree-id10819 . -1) (undo-tree-id10820 . -1) (undo-tree-id10821 . -1) (undo-tree-id10822 . -1) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1) (undo-tree-id10826 . -1) (4324 . 4325) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4324) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) (undo-tree-id10836 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4325) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (4271 . 4272) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4271) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) (undo-tree-id10849 . -1) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1) (undo-tree-id10854 . -1) (4238 . 4239) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4238) (undo-tree-id10855 . -1) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1) (undo-tree-id10858 . -1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) (undo-tree-id10861 . -1) (undo-tree-id10862 . -1) (undo-tree-id10863 . -1) (undo-tree-id10864 . -1) (undo-tree-id10865 . -1) (undo-tree-id10866 . -1) (undo-tree-id10867 . -1) (undo-tree-id10868 . -1) (undo-tree-id10869 . -1) (undo-tree-id10870 . -1) (undo-tree-id10871 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4238) (undo-tree-id10872 . -1) (undo-tree-id10873 . -1) (undo-tree-id10874 . -1) (undo-tree-id10875 . -1) (undo-tree-id10876 . -1) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (4209 . 4210) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4209) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (4131 . 4132) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4131) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (4051 . 4052) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4051) (undo-tree-id10899 . -1) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (3970 . 3971) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3970) (undo-tree-id10908 . -1) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3971) (undo-tree-id10934 . 1) (undo-tree-id10935 . 1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (undo-tree-id10938 . -1) (undo-tree-id10939 . -1) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) 3970) ((3970 . 3972) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3970) (undo-tree-id11181 . -1) (undo-tree-id11182 . -1) (undo-tree-id11183 . -1) (4051 . 4052) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4051) (4131 . 4132) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4131) (4209 . 4210) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4209) (4238 . 4239) (4238 . 4239) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4238) (4271 . 4272) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4271) (4324 . 4326) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4324) (4375 . 4377) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4375) (4430 . 4431) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4430) (4511 . 4512) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4511) (4534 . 4536) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4534) (4589 . 4591) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4589) (4663 . 4664) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4663)) (25772 50145 476164 672000) 0 nil])
([nil nil ((3975 . 3979) (#("It just contains" 0 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3975) (undo-tree-id12088 . -15) (undo-tree-id12089 . -15) (undo-tree-id12090 . -15) (undo-tree-id12091 . -15) (undo-tree-id12092 . -16) (undo-tree-id12093 . -15) (undo-tree-id12094 . -1) (undo-tree-id12095 . -6) (undo-tree-id12096 . -15) (undo-tree-id12097 . -15) (undo-tree-id12098 . -16) (undo-tree-id12099 . -16) (undo-tree-id12100 . -16) 3990) nil (25772 50266 639295 711000) 0 nil])
nil
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3994) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1)) nil (25772 50266 639286 739000) 0 nil])
([nil nil ((3994 . 3996) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3994) (undo-tree-id12046 . -1) (undo-tree-id12047 . -1) (undo-tree-id12048 . -1) (undo-tree-id12049 . -1) (undo-tree-id12050 . -1) (undo-tree-id12051 . -1) (undo-tree-id12052 . -1) (undo-tree-id12053 . -1) (undo-tree-id12054 . -1) (undo-tree-id12055 . -1) (undo-tree-id12056 . -1) (undo-tree-id12057 . -1) (undo-tree-id12058 . -1) (undo-tree-id12059 . -1) (undo-tree-id12060 . -1) (undo-tree-id12061 . -1) (undo-tree-id12062 . -1) (undo-tree-id12063 . -1) (undo-tree-id12064 . -1) (undo-tree-id12065 . -1) (undo-tree-id12066 . -1) (undo-tree-id12067 . -1) (undo-tree-id12068 . -1) (undo-tree-id12069 . -1) (undo-tree-id12070 . -1) (undo-tree-id12071 . -1) (undo-tree-id12072 . -1) (undo-tree-id12073 . -1) (undo-tree-id12074 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3995) (undo-tree-id12075 . -1) (undo-tree-id12076 . -1) (undo-tree-id12077 . -1) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) 3996 (3994 . 3996)) nil (25772 50266 639282 632000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3996) (undo-tree-id12042 . 1) (undo-tree-id12043 . -1) (undo-tree-id12044 . -1) (undo-tree-id12045 . -1)) nil (25772 50266 639256 353000) 0 nil])
([nil nil ((#("with " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3996) (undo-tree-id12039 . -4) (undo-tree-id12040 . 5) (undo-tree-id12041 . -5)) nil (25772 50266 639252 542000) 0 nil])
([nil nil ((#("a " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3996) (undo-tree-id12036 . -1) (undo-tree-id12037 . 2) (undo-tree-id12038 . -2)) nil (25772 50266 639249 220000) 0 nil])
([nil nil ((4009 . 4010)) nil (25772 50266 639246 570000) 0 nil])
([nil nil ((4014 . 4016) (4013 . 4014) (4012 . 4013)) nil (25772 50266 639245 688000) 0 nil])
([nil nil ((4199 . 4200) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4199) (undo-tree-id12009 . -1) (undo-tree-id12010 . -1) (undo-tree-id12011 . -1) (undo-tree-id12012 . -1) (undo-tree-id12013 . -1) (undo-tree-id12014 . -1) (undo-tree-id12015 . -1) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (4121 . 4122) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4121) (undo-tree-id12018 . -1) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) (4041 . 4042) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4041) (undo-tree-id12027 . -1) (undo-tree-id12028 . -1) (undo-tree-id12029 . -1) (undo-tree-id12030 . -1) (undo-tree-id12031 . -1) (undo-tree-id12032 . -1) (undo-tree-id12033 . -1) (undo-tree-id12034 . -1) (undo-tree-id12035 . -1) 4015) nil (25772 50266 639243 391000) 0 nil])
([nil nil ((4016 . 4018) (#("We do not" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4016) (undo-tree-id11925 . -8) (undo-tree-id11926 . 9) (undo-tree-id11927 . -8) (undo-tree-id11928 . -8) (undo-tree-id11929 . -8) (undo-tree-id11930 . -9) (undo-tree-id11931 . -8) (undo-tree-id11932 . -1) (undo-tree-id11933 . -1) (undo-tree-id11934 . -1) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (undo-tree-id11940 . -1) (undo-tree-id11941 . -1) (undo-tree-id11942 . -1) (undo-tree-id11943 . -1) (undo-tree-id11944 . -1) (undo-tree-id11945 . -1) (undo-tree-id11946 . -1) (undo-tree-id11947 . -1) (undo-tree-id11948 . -1) (undo-tree-id11949 . -1) (undo-tree-id11950 . -1) (undo-tree-id11951 . -1) (undo-tree-id11952 . -1) (undo-tree-id11953 . -1) (undo-tree-id11954 . -4) (undo-tree-id11955 . -4) (undo-tree-id11956 . -4) (undo-tree-id11957 . -4) (undo-tree-id11958 . -4) (undo-tree-id11959 . -4) (undo-tree-id11960 . -4) (undo-tree-id11961 . -4) (undo-tree-id11962 . -4) (undo-tree-id11963 . -4) (undo-tree-id11964 . -4) (undo-tree-id11965 . -4) (undo-tree-id11966 . -4) (undo-tree-id11967 . -4) (undo-tree-id11968 . -4) (undo-tree-id11969 . -4) (undo-tree-id11970 . -4) (undo-tree-id11971 . -4) (undo-tree-id11972 . -4) (undo-tree-id11973 . -4) (undo-tree-id11974 . -4) (undo-tree-id11975 . -4) (undo-tree-id11976 . -8) (undo-tree-id11977 . -8) (undo-tree-id11978 . -8) (undo-tree-id11979 . -8) (undo-tree-id11980 . -8) (undo-tree-id11981 . -8) (undo-tree-id11982 . -8) (undo-tree-id11983 . -8) (undo-tree-id11984 . -8) (undo-tree-id11985 . -8) (undo-tree-id11986 . -8) (undo-tree-id11987 . -8) (undo-tree-id11988 . -8) (undo-tree-id11989 . -8) (undo-tree-id11990 . -8) (undo-tree-id11991 . -8) (undo-tree-id11992 . -8) (undo-tree-id11993 . -8) (undo-tree-id11994 . -8) (undo-tree-id11995 . -8) (undo-tree-id11996 . -8) (undo-tree-id11997 . -8) (undo-tree-id11998 . -8) (undo-tree-id11999 . -8) (undo-tree-id12000 . -8) (undo-tree-id12001 . -8) (undo-tree-id12002 . -8) (undo-tree-id12003 . -8) (undo-tree-id12004 . -8) (undo-tree-id12005 . -8) (undo-tree-id12006 . -9) (undo-tree-id12007 . -9) (undo-tree-id12008 . -9) 4024) nil (25772 50266 639222 818000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4068) (undo-tree-id11923 . -1) (undo-tree-id11924 . -2)) nil (25772 50266 639144 775000) 0 nil])
([nil nil ((#("since " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4068) (undo-tree-id11920 . -5) (undo-tree-id11921 . -5) (undo-tree-id11922 . -6)) nil (25772 50266 639142 324000) 0 nil])
([nil nil ((#("a " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4068) (undo-tree-id11917 . -1) (undo-tree-id11918 . -1) (undo-tree-id11919 . -2)) nil (25772 50266 639138 994000) 0 nil])
([nil nil ((4068 . 4070)) nil (25772 50266 639136 461000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4069) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) (undo-tree-id11907 . -1) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1) (undo-tree-id11913 . -1) (undo-tree-id11914 . 1) (undo-tree-id11915 . -1) (undo-tree-id11916 . -1)) nil (25772 50266 639134 968000) 0 nil])
([nil nil ((4069 . 4070)) nil (25772 50266 639118 871000) 0 nil])
([nil nil ((#("recurrent " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4070) (undo-tree-id11888 . -9) (undo-tree-id11889 . 10) (undo-tree-id11890 . -10)) nil (25772 50266 639117 951000) 0 nil])
([nil nil ((#("neural " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4070) (undo-tree-id11885 . -6) (undo-tree-id11886 . 7) (undo-tree-id11887 . -7)) nil (25772 50266 639114 816000) 0 nil])
([nil nil ((#("network " 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4070) (undo-tree-id11860 . -7) (undo-tree-id11861 . 8) (undo-tree-id11862 . -3) (undo-tree-id11863 . -3) (undo-tree-id11864 . -3) (undo-tree-id11865 . -3) (undo-tree-id11866 . -3) (undo-tree-id11867 . -3) (undo-tree-id11868 . -3) (undo-tree-id11869 . -3) (undo-tree-id11870 . -3) (undo-tree-id11871 . -3) (undo-tree-id11872 . -3) (undo-tree-id11873 . -3) (undo-tree-id11874 . -3) (undo-tree-id11875 . -3) (undo-tree-id11876 . -3) (undo-tree-id11877 . -3) (undo-tree-id11878 . -3) (undo-tree-id11879 . -3) (undo-tree-id11880 . -3) (undo-tree-id11881 . -3) (undo-tree-id11882 . -3) (undo-tree-id11883 . -3) (undo-tree-id11884 . -8)) nil (25772 50266 639111 327000) 0 nil])
([nil nil ((4070 . 4074)) nil (25772 50266 639095 991000) 0 nil])
([nil nil ((4110 . 4111) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4110) (undo-tree-id11857 . -1) (undo-tree-id11858 . -1) (4110 . 4111) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4110) (undo-tree-id11859 . -1)) nil (25772 50266 639094 695000) 0 nil])
([nil nil ((4111 . 4112) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4111) (undo-tree-id11714 . -1) (undo-tree-id11715 . -1) (undo-tree-id11716 . -1) (undo-tree-id11717 . -1) (undo-tree-id11718 . -1) (undo-tree-id11719 . -1) (undo-tree-id11720 . -1) (undo-tree-id11721 . -1) (undo-tree-id11722 . -1) (undo-tree-id11723 . -1) (undo-tree-id11724 . -1) (undo-tree-id11725 . -1) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -1) (undo-tree-id11730 . -1) (undo-tree-id11731 . -1) (undo-tree-id11732 . -1) (undo-tree-id11733 . -1) (undo-tree-id11734 . -1) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) (undo-tree-id11744 . -1) (undo-tree-id11745 . -1) (undo-tree-id11746 . -1) (undo-tree-id11747 . -1) (undo-tree-id11748 . -1) (undo-tree-id11749 . -1) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (undo-tree-id11759 . -1) (undo-tree-id11760 . -1) (undo-tree-id11761 . -1) (undo-tree-id11762 . -1) (undo-tree-id11763 . -1) (undo-tree-id11764 . -1) (undo-tree-id11765 . -1) (undo-tree-id11766 . -1) (undo-tree-id11767 . -1) (undo-tree-id11768 . -1) (undo-tree-id11769 . -1) (undo-tree-id11770 . -1) (undo-tree-id11771 . -1) (undo-tree-id11772 . -1) (undo-tree-id11773 . -1) (undo-tree-id11774 . -1) (undo-tree-id11775 . -1) (undo-tree-id11776 . -1) (undo-tree-id11777 . -1) (undo-tree-id11778 . -1) (undo-tree-id11779 . -1) (undo-tree-id11780 . -1) (undo-tree-id11781 . -1) (undo-tree-id11782 . -1) (undo-tree-id11783 . -1) (undo-tree-id11784 . -1) (undo-tree-id11785 . -1) (undo-tree-id11786 . -1) (undo-tree-id11787 . -1) (undo-tree-id11788 . -1) (undo-tree-id11789 . -1) (undo-tree-id11790 . -1) (undo-tree-id11791 . -1) (undo-tree-id11792 . -1) (undo-tree-id11793 . -1) (undo-tree-id11794 . -1) (undo-tree-id11795 . -1) (undo-tree-id11796 . -1) (undo-tree-id11797 . -1) (undo-tree-id11798 . -1) (undo-tree-id11799 . -1) (undo-tree-id11800 . -1) (undo-tree-id11801 . -1) (undo-tree-id11802 . -1) (undo-tree-id11803 . -1) (undo-tree-id11804 . -1) (undo-tree-id11805 . -1) (undo-tree-id11806 . -1) (undo-tree-id11807 . -1) (undo-tree-id11808 . -1) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4112) (undo-tree-id11809 . -1) (undo-tree-id11810 . -1) (undo-tree-id11811 . -1) (undo-tree-id11812 . -1) (undo-tree-id11813 . -1) (undo-tree-id11814 . -1) (undo-tree-id11815 . -1) (undo-tree-id11816 . -1) (undo-tree-id11817 . -1) (undo-tree-id11818 . -1) (undo-tree-id11819 . -1) (undo-tree-id11820 . -1) (undo-tree-id11821 . -1) (undo-tree-id11822 . -1) (undo-tree-id11823 . -1) (undo-tree-id11824 . -1) (undo-tree-id11825 . -1) (undo-tree-id11826 . -1) (undo-tree-id11827 . -1) (undo-tree-id11828 . -1) (undo-tree-id11829 . -1) (undo-tree-id11830 . -1) (undo-tree-id11831 . -1) (undo-tree-id11832 . -1) (undo-tree-id11833 . -1) (undo-tree-id11834 . -1) (undo-tree-id11835 . -1) (undo-tree-id11836 . -1) (undo-tree-id11837 . -1) (undo-tree-id11838 . -1) (undo-tree-id11839 . -1) (undo-tree-id11840 . -1) (undo-tree-id11841 . -1) (undo-tree-id11842 . -1) (undo-tree-id11843 . -1) (undo-tree-id11844 . -1) (undo-tree-id11845 . -1) (undo-tree-id11846 . -1) (undo-tree-id11847 . -1) (undo-tree-id11848 . -1) (undo-tree-id11849 . -1) (undo-tree-id11850 . -1) (undo-tree-id11851 . -1) (undo-tree-id11852 . -1) (undo-tree-id11853 . -1) (undo-tree-id11854 . -1) (undo-tree-id11855 . -1) (undo-tree-id11856 . -1) 4113 (4111 . 4113)) nil (25772 50266 639087 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4111) (undo-tree-id11689 . -1) (undo-tree-id11690 . -1) (undo-tree-id11691 . -1) (undo-tree-id11692 . -1) (undo-tree-id11693 . -1) (undo-tree-id11694 . -1) (undo-tree-id11695 . -1) (undo-tree-id11696 . -1) (undo-tree-id11697 . -1) (undo-tree-id11698 . -1) (undo-tree-id11699 . -1) (undo-tree-id11700 . -1) (undo-tree-id11701 . -1) (undo-tree-id11702 . -1) (undo-tree-id11703 . -1) (undo-tree-id11704 . -1) (undo-tree-id11705 . -1) (undo-tree-id11706 . -1) (undo-tree-id11707 . -1) (undo-tree-id11708 . -1) (undo-tree-id11709 . -1) (undo-tree-id11710 . -1) (undo-tree-id11711 . -1) (undo-tree-id11712 . -1) (undo-tree-id11713 . -1)) nil (25772 50266 638999 674000) 0 nil])
([nil nil ((4112 . 4114) (4111 . 4112) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4111) (undo-tree-id11633 . 1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -1) (undo-tree-id11637 . -1) (undo-tree-id11638 . -1) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) (undo-tree-id11645 . -1) (undo-tree-id11646 . -1) (undo-tree-id11647 . -1) (undo-tree-id11648 . -1) (undo-tree-id11649 . -1) (undo-tree-id11650 . -1) (undo-tree-id11651 . -1) (undo-tree-id11652 . -1) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) (undo-tree-id11656 . -1) (undo-tree-id11657 . -1) (undo-tree-id11658 . -1) (undo-tree-id11659 . -1) (undo-tree-id11660 . -1) (undo-tree-id11661 . -1) (undo-tree-id11662 . -1) (undo-tree-id11663 . -1) (undo-tree-id11664 . -1) (undo-tree-id11665 . -1) (undo-tree-id11666 . -1) (undo-tree-id11667 . -1) (undo-tree-id11668 . -1) (undo-tree-id11669 . -1) (undo-tree-id11670 . -1) (undo-tree-id11671 . -1) (undo-tree-id11672 . -1) (undo-tree-id11673 . -1) (undo-tree-id11674 . -1) (undo-tree-id11675 . -1) (undo-tree-id11676 . -1) (undo-tree-id11677 . -1) (undo-tree-id11678 . -1) (undo-tree-id11679 . -1) (undo-tree-id11680 . -1) (undo-tree-id11681 . -1) (undo-tree-id11682 . -1) (undo-tree-id11683 . -1) (undo-tree-id11684 . -1) (undo-tree-id11685 . -1) (undo-tree-id11686 . -1) (undo-tree-id11687 . -1) (undo-tree-id11688 . -1) 4112) nil (25772 50266 638844 911000) 0 nil])
([nil nil ((#("By default, the " 0 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4114) (undo-tree-id11587 . -15) (undo-tree-id11588 . 16) (undo-tree-id11589 . -15) (undo-tree-id11590 . -15) (undo-tree-id11591 . -15) (undo-tree-id11592 . -2) (undo-tree-id11593 . -2) (undo-tree-id11594 . -2) (undo-tree-id11595 . -2) (undo-tree-id11596 . -2) (undo-tree-id11597 . -2) (undo-tree-id11598 . -2) (undo-tree-id11599 . -2) (undo-tree-id11600 . -2) (undo-tree-id11601 . -2) (undo-tree-id11602 . -2) (undo-tree-id11603 . -2) (undo-tree-id11604 . -2) (undo-tree-id11605 . -2) (undo-tree-id11606 . -2) (undo-tree-id11607 . -2) (undo-tree-id11608 . -2) (undo-tree-id11609 . -2) (undo-tree-id11610 . -2) (undo-tree-id11611 . -2) (undo-tree-id11612 . -2) (undo-tree-id11613 . -2) (undo-tree-id11614 . -2) (undo-tree-id11615 . -2) (undo-tree-id11616 . -2) (undo-tree-id11617 . -2) (undo-tree-id11618 . -2) (undo-tree-id11619 . -2) (undo-tree-id11620 . -2) (undo-tree-id11621 . -16) (undo-tree-id11622 . -15) (undo-tree-id11623 . -1) (undo-tree-id11624 . -9) (undo-tree-id11625 . -10) (undo-tree-id11626 . -11) (undo-tree-id11627 . -12) (undo-tree-id11628 . -13) (undo-tree-id11629 . -14) (undo-tree-id11630 . -15) (undo-tree-id11631 . -15) (undo-tree-id11632 . -16) 4129) nil (25772 50266 638806 906000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4177) (undo-tree-id11585 . -1) (undo-tree-id11586 . -1)) nil (25772 50266 638778 512000) 0 nil])
([nil nil ((4112 . 4180) (#("- 
- SimpleRNN layer uses the hyperbolic tangent activation function" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 40 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 40 41 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 41 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4112) (undo-tree-id11413 . -68) (undo-tree-id11414 . -68) (undo-tree-id11415 . 63) (undo-tree-id11416 . -5) (undo-tree-id11417 . -5) (undo-tree-id11418 . 63) (undo-tree-id11419 . -5) (undo-tree-id11420 . -5) (undo-tree-id11421 . -68) (undo-tree-id11422 . -40) (undo-tree-id11423 . -40) (undo-tree-id11424 . -40) (undo-tree-id11425 . -40) (undo-tree-id11426 . -40) (undo-tree-id11427 . -40) (undo-tree-id11428 . -40) (undo-tree-id11429 . -40) (undo-tree-id11430 . -40) (undo-tree-id11431 . -40) (undo-tree-id11432 . -40) (undo-tree-id11433 . -40) (undo-tree-id11434 . -40) (undo-tree-id11435 . -40) (undo-tree-id11436 . -40) (undo-tree-id11437 . -40) (undo-tree-id11438 . -40) (undo-tree-id11439 . -40) (undo-tree-id11440 . -40) (undo-tree-id11441 . -40) (undo-tree-id11442 . -40) (undo-tree-id11443 . -40) (undo-tree-id11444 . -40) (undo-tree-id11445 . -40) (undo-tree-id11446 . -40) (undo-tree-id11447 . -40) (undo-tree-id11448 . -40) (undo-tree-id11449 . -40) (undo-tree-id11450 . -40) (undo-tree-id11451 . -40) (undo-tree-id11452 . -5) (undo-tree-id11453 . -5) (undo-tree-id11454 . -5) (undo-tree-id11455 . -5) (undo-tree-id11456 . -5) (undo-tree-id11457 . -5) (undo-tree-id11458 . -5) (undo-tree-id11459 . -5) (undo-tree-id11460 . -5) (undo-tree-id11461 . -5) (undo-tree-id11462 . -5) (undo-tree-id11463 . -5) (undo-tree-id11464 . -5) (undo-tree-id11465 . -5) (undo-tree-id11466 . -5) (undo-tree-id11467 . -5) (undo-tree-id11468 . -5) (undo-tree-id11469 . -5) (undo-tree-id11470 . -5) (undo-tree-id11471 . -5) (undo-tree-id11472 . -5) (undo-tree-id11473 . -5) (undo-tree-id11474 . -5) (undo-tree-id11475 . -5) (undo-tree-id11476 . -5) (undo-tree-id11477 . -5) (undo-tree-id11478 . -5) (undo-tree-id11479 . -5) (undo-tree-id11480 . -5) (undo-tree-id11481 . -4) (undo-tree-id11482 . -4) (undo-tree-id11483 . -4) (undo-tree-id11484 . -4) (undo-tree-id11485 . -4) (undo-tree-id11486 . -4) (undo-tree-id11487 . -4) (undo-tree-id11488 . -4) (undo-tree-id11489 . -5) (undo-tree-id11490 . -5) (undo-tree-id11491 . -5) (undo-tree-id11492 . -5) (undo-tree-id11493 . -5) (undo-tree-id11494 . -5) (undo-tree-id11495 . -5) (undo-tree-id11496 . -5) (undo-tree-id11497 . -5) (undo-tree-id11498 . -4) (undo-tree-id11499 . -4) (undo-tree-id11500 . -4) (undo-tree-id11501 . -4) (undo-tree-id11502 . -4) (undo-tree-id11503 . -4) (undo-tree-id11504 . -4) (undo-tree-id11505 . -4) (undo-tree-id11506 . -4) (undo-tree-id11507 . -4) (undo-tree-id11508 . -4) (undo-tree-id11509 . -4) (undo-tree-id11510 . -4) (undo-tree-id11511 . -4) (undo-tree-id11512 . -4) (undo-tree-id11513 . -4) (undo-tree-id11514 . -4) (undo-tree-id11515 . -4) (undo-tree-id11516 . -4) (undo-tree-id11517 . -5) (undo-tree-id11518 . -5) (undo-tree-id11519 . -5) (undo-tree-id11520 . -5) (undo-tree-id11521 . -5) (undo-tree-id11522 . -5) (undo-tree-id11523 . -5) (undo-tree-id11524 . -5) (undo-tree-id11525 . -5) (undo-tree-id11526 . -5) (undo-tree-id11527 . -5) (undo-tree-id11528 . -5) (undo-tree-id11529 . -5) (undo-tree-id11530 . -5) (undo-tree-id11531 . -5) (undo-tree-id11532 . -5) (undo-tree-id11533 . -5) (undo-tree-id11534 . -5) (undo-tree-id11535 . -5) (undo-tree-id11536 . 63) (undo-tree-id11537 . -14) (undo-tree-id11538 . -5) (undo-tree-id11539 . -5) (undo-tree-id11540 . -5) (undo-tree-id11541 . -5) (undo-tree-id11542 . -5) (undo-tree-id11543 . -5) (undo-tree-id11544 . -5) (undo-tree-id11545 . -5) (undo-tree-id11546 . -5) (undo-tree-id11547 . -5) (undo-tree-id11548 . -13) (undo-tree-id11549 . -19) (undo-tree-id11550 . -15) (undo-tree-id11551 . -21) (undo-tree-id11552 . -26) (undo-tree-id11553 . -21) (undo-tree-id11554 . -15) (undo-tree-id11555 . -19) (undo-tree-id11556 . -24) (undo-tree-id11557 . -28) (undo-tree-id11558 . -39) (undo-tree-id11559 . -47) (undo-tree-id11560 . -58) (undo-tree-id11561 . -67) (undo-tree-id11562 . -68) (undo-tree-id11563 . -68) (undo-tree-id11564 . -67) (undo-tree-id11565 . -67) (undo-tree-id11566 . -67) (undo-tree-id11567 . -67) (undo-tree-id11568 . -67) (undo-tree-id11569 . -67) (undo-tree-id11570 . -67) (undo-tree-id11571 . -67) (undo-tree-id11572 . -67) (undo-tree-id11573 . -68) (undo-tree-id11574 . -68) (undo-tree-id11575 . -68) (undo-tree-id11576 . -68) (undo-tree-id11577 . -68) (undo-tree-id11578 . -68) (undo-tree-id11579 . -68) (undo-tree-id11580 . -68) (undo-tree-id11581 . -68) (undo-tree-id11582 . -68) (undo-tree-id11583 . -68) (undo-tree-id11584 . -3) (4112 . 4115) 4177) nil (25772 50266 638770 279000) 0 nil])
([nil nil ((4604 . 4605) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4604) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (4530 . 4531) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4530) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4531) (undo-tree-id11231 . -1) (undo-tree-id11232 . -1) (undo-tree-id11233 . -1) (undo-tree-id11234 . -1) (undo-tree-id11235 . -1) (undo-tree-id11236 . -1) (undo-tree-id11237 . -1) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (4475 . 4476) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4475) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4476) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) (undo-tree-id11282 . -1) (4452 . 4453) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4452) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (4371 . 4372) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4371) (undo-tree-id11292 . -1) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) (undo-tree-id11300 . -1) (4316 . 4317) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4316) (undo-tree-id11301 . -1) (undo-tree-id11302 . -1) (undo-tree-id11303 . -1) (undo-tree-id11304 . -1) (undo-tree-id11305 . -1) (undo-tree-id11306 . -1) (undo-tree-id11307 . -1) (undo-tree-id11308 . -1) (undo-tree-id11309 . -1) (undo-tree-id11310 . -1) (undo-tree-id11311 . -1) (undo-tree-id11312 . -1) (undo-tree-id11313 . -1) (undo-tree-id11314 . -1) (undo-tree-id11315 . -1) (undo-tree-id11316 . -1) (undo-tree-id11317 . -1) (undo-tree-id11318 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4317) (undo-tree-id11319 . -1) (undo-tree-id11320 . -1) (undo-tree-id11321 . -1) (undo-tree-id11322 . -1) (undo-tree-id11323 . -1) (undo-tree-id11324 . -1) (undo-tree-id11325 . -1) (undo-tree-id11326 . -1) (undo-tree-id11327 . -1) (undo-tree-id11328 . -1) (undo-tree-id11329 . -1) (undo-tree-id11330 . -1) (undo-tree-id11331 . -1) (undo-tree-id11332 . -1) (undo-tree-id11333 . -1) (undo-tree-id11334 . -1) (undo-tree-id11335 . -1) (4265 . 4266) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4265) (undo-tree-id11336 . -1) (undo-tree-id11337 . -1) (undo-tree-id11338 . -1) (undo-tree-id11339 . -1) (undo-tree-id11340 . -1) (undo-tree-id11341 . -1) (undo-tree-id11342 . -1) (undo-tree-id11343 . -1) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4266) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (4212 . 4213) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4212) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1) (undo-tree-id11358 . -1) (undo-tree-id11359 . -1) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (4179 . 4180) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4179) (undo-tree-id11364 . 1) (undo-tree-id11365 . 1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -1) (undo-tree-id11369 . -1) (undo-tree-id11370 . -1) (undo-tree-id11371 . -1) (undo-tree-id11372 . -1) (undo-tree-id11373 . -1) (undo-tree-id11374 . -1) (undo-tree-id11375 . -1) (undo-tree-id11376 . -1) (undo-tree-id11377 . -1) (undo-tree-id11378 . -1) (undo-tree-id11379 . -1) (undo-tree-id11380 . -1) (undo-tree-id11381 . -1) (undo-tree-id11382 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4179) (undo-tree-id11383 . -1) (undo-tree-id11384 . -1) (undo-tree-id11385 . -1) (undo-tree-id11386 . -1) (undo-tree-id11387 . -1) (undo-tree-id11388 . -1) (undo-tree-id11389 . -1) (undo-tree-id11390 . -1) (undo-tree-id11391 . -1) (undo-tree-id11392 . -1) (undo-tree-id11393 . -1) (undo-tree-id11394 . -1) (undo-tree-id11395 . -1) (undo-tree-id11396 . -1) (undo-tree-id11397 . -1) (undo-tree-id11398 . -1) (undo-tree-id11399 . -1) (undo-tree-id11400 . -1) (undo-tree-id11401 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4180) (undo-tree-id11402 . 1) (undo-tree-id11403 . 1) (undo-tree-id11404 . -1) (undo-tree-id11405 . -1) (undo-tree-id11406 . -1) (undo-tree-id11407 . -1) (undo-tree-id11408 . -1) (undo-tree-id11409 . -1) (undo-tree-id11410 . -1) (undo-tree-id11411 . -1) (undo-tree-id11412 . -1) 4179) nil (25772 50266 638576 139000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4180) (undo-tree-id13296 . -3) (undo-tree-id13297 . 4) (undo-tree-id13298 . 4) (undo-tree-id13299 . -4) (t 25772 50266 682638 517000)) nil (25772 50297 720616 328000) 0 nil])
([nil nil ((4180 . 4181) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4180)) nil (25772 50297 720612 96000) 0 nil])
([nil nil ((4195 . 4196)) nil (25772 50297 720610 884000) 0 nil])
([nil nil ((4309 . 4310)) nil (25772 50297 720609 537000) 0 nil])
([nil nil ((4178 . 4678) (#("- The neuron computes a weighted sum of these values and applies the hyperbolic tangent activation function to the result, and this gives the first output, y_0. In a simple RNN, this output is also the new state h0. This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. 
- Initial state h_(init) is set to 0, and it is passed to a single recurrent neuron, along with the value of the first time step, x_(0)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 56 57 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 57 91 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 91 95 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 95 137 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 137 138 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 138 157 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 157 158 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 158 159 (display ((raise -0.3) (height 0.7)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 159 160 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 160 161 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 161 215 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 215 216 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 216 289 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 289 290 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 290 363 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 363 364 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 364 365 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 365 366 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 366 381 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 381 382 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 382 384 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 384 388 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 388 395 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 395 396 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 396 448 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 448 449 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 449 495 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 495 496 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 496 499 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 499 500 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4178) (undo-tree-id12353 . -366) (undo-tree-id12354 . -366) (undo-tree-id12355 . 4) (undo-tree-id12356 . -366) (undo-tree-id12357 . -366) (undo-tree-id12358 . 133) (undo-tree-id12359 . -366) (undo-tree-id12360 . -366) (undo-tree-id12361 . -365) (undo-tree-id12362 . -365) (undo-tree-id12363 . -365) (undo-tree-id12364 . -365) (undo-tree-id12365 . -365) (undo-tree-id12366 . -365) (undo-tree-id12367 . -365) (undo-tree-id12368 . -365) (undo-tree-id12369 . -365) (undo-tree-id12370 . -365) (undo-tree-id12371 . -365) (undo-tree-id12372 . -365) (undo-tree-id12373 . -365) (undo-tree-id12374 . -365) (undo-tree-id12375 . -365) (undo-tree-id12376 . -365) (undo-tree-id12377 . -395) (undo-tree-id12378 . -395) (undo-tree-id12379 . -395) (undo-tree-id12380 . -395) (undo-tree-id12381 . -395) (undo-tree-id12382 . -395) (undo-tree-id12383 . -395) (undo-tree-id12384 . -395) (undo-tree-id12385 . -448) (undo-tree-id12386 . -448) (undo-tree-id12387 . -448) (undo-tree-id12388 . -448) (undo-tree-id12389 . -448) (undo-tree-id12390 . -448) (undo-tree-id12391 . -448) (undo-tree-id12392 . -448) (undo-tree-id12393 . -500) (undo-tree-id12394 . -500) (undo-tree-id12395 . -500) (undo-tree-id12396 . -500) (undo-tree-id12397 . -500) (undo-tree-id12398 . -500) (undo-tree-id12399 . -500) (undo-tree-id12400 . -500) (undo-tree-id12401 . -500) (undo-tree-id12402 . -500) (undo-tree-id12403 . -500) (undo-tree-id12404 . -500) (undo-tree-id12405 . -500) (undo-tree-id12406 . -500) (undo-tree-id12407 . -500) (undo-tree-id12408 . -500) (undo-tree-id12409 . -500) (undo-tree-id12410 . -500) (undo-tree-id12411 . -500) (undo-tree-id12412 . -500) (undo-tree-id12413 . -500) (undo-tree-id12414 . -500) (undo-tree-id12415 . -500) (undo-tree-id12416 . -500) (undo-tree-id12417 . -500) (undo-tree-id12418 . -500) (undo-tree-id12419 . -500) (undo-tree-id12420 . -500) (undo-tree-id12421 . -500) (undo-tree-id12422 . -500) (undo-tree-id12423 . -500) (undo-tree-id12424 . -500) (undo-tree-id12425 . -500) (undo-tree-id12426 . -500) (undo-tree-id12427 . -500) (undo-tree-id12428 . -500) (undo-tree-id12429 . -500) (undo-tree-id12430 . -500) (undo-tree-id12431 . -500) (undo-tree-id12432 . -500) (undo-tree-id12433 . -500) (undo-tree-id12434 . -500) (undo-tree-id12435 . -500) (undo-tree-id12436 . -500) (undo-tree-id12437 . -500) (undo-tree-id12438 . -500) (undo-tree-id12439 . -500) (undo-tree-id12440 . -500) (undo-tree-id12441 . -500) (undo-tree-id12442 . -500) (undo-tree-id12443 . -500) (undo-tree-id12444 . -500) (undo-tree-id12445 . -500) (undo-tree-id12446 . -500) (undo-tree-id12447 . -500) (undo-tree-id12448 . -500) (undo-tree-id12449 . -500) (undo-tree-id12450 . -500) (undo-tree-id12451 . -500) (undo-tree-id12452 . -500) (undo-tree-id12453 . -500) (undo-tree-id12454 . -500) (undo-tree-id12455 . -500) (undo-tree-id12456 . -500) (undo-tree-id12457 . -500) (undo-tree-id12458 . -500) (undo-tree-id12459 . -500) (undo-tree-id12460 . -500) (undo-tree-id12461 . -500) (undo-tree-id12462 . -500) (undo-tree-id12463 . -500) (undo-tree-id12464 . -500) (undo-tree-id12465 . -365) (undo-tree-id12466 . -365) (undo-tree-id12467 . -365) (undo-tree-id12468 . -365) (undo-tree-id12469 . -365) (undo-tree-id12470 . -365) (undo-tree-id12471 . -365) (undo-tree-id12472 . -365) (undo-tree-id12473 . -365) (undo-tree-id12474 . -365) (undo-tree-id12475 . -365) (undo-tree-id12476 . -365) (undo-tree-id12477 . -365) (undo-tree-id12478 . -365) (undo-tree-id12479 . -365) (undo-tree-id12480 . -365) (undo-tree-id12481 . -365) (undo-tree-id12482 . -366) (undo-tree-id12483 . -500) (undo-tree-id12484 . -366) (undo-tree-id12485 . -366) (undo-tree-id12486 . -366) (undo-tree-id12487 . -366) (undo-tree-id12488 . -366) (undo-tree-id12489 . -366) (undo-tree-id12490 . -366) (undo-tree-id12491 . -366) (undo-tree-id12492 . -366) (undo-tree-id12493 . -366) (undo-tree-id12494 . -366) (undo-tree-id12495 . -366) (undo-tree-id12496 . -366) (undo-tree-id12497 . -366) (undo-tree-id12498 . -366) (undo-tree-id12499 . -366) (undo-tree-id12500 . -366) (undo-tree-id12501 . -366) (undo-tree-id12502 . -366) (undo-tree-id12503 . -366) (undo-tree-id12504 . -366) (undo-tree-id12505 . -366) (undo-tree-id12506 . -366) (undo-tree-id12507 . -366) (undo-tree-id12508 . -366) (undo-tree-id12509 . -366) (undo-tree-id12510 . -366) (undo-tree-id12511 . -366) (undo-tree-id12512 . -366) (undo-tree-id12513 . -366) (undo-tree-id12514 . -366) (undo-tree-id12515 . -366) (undo-tree-id12516 . -366) (undo-tree-id12517 . -366) (undo-tree-id12518 . -366) (undo-tree-id12519 . -366) (undo-tree-id12520 . -366) (undo-tree-id12521 . -366) (undo-tree-id12522 . -366) (undo-tree-id12523 . -366) (undo-tree-id12524 . -366) (undo-tree-id12525 . -366) (undo-tree-id12526 . -366) (undo-tree-id12527 . -366) (undo-tree-id12528 . -366) (undo-tree-id12529 . -366) (undo-tree-id12530 . -366) (undo-tree-id12531 . -366) (undo-tree-id12532 . -366) (undo-tree-id12533 . -366) (undo-tree-id12534 . -366) (undo-tree-id12535 . -366) (undo-tree-id12536 . -366) (undo-tree-id12537 . -366) (undo-tree-id12538 . -366) (undo-tree-id12539 . -366) (undo-tree-id12540 . -366) (undo-tree-id12541 . -366) (undo-tree-id12542 . -366) (undo-tree-id12543 . -366) (undo-tree-id12544 . -366) (undo-tree-id12545 . -366) (undo-tree-id12546 . -366) (undo-tree-id12547 . -366) (undo-tree-id12548 . -366) (undo-tree-id12549 . -366) (undo-tree-id12550 . -366) (undo-tree-id12551 . -366) (undo-tree-id12552 . -366) (undo-tree-id12553 . -366) (undo-tree-id12554 . -366) (undo-tree-id12555 . -366) (undo-tree-id12556 . -366) (undo-tree-id12557 . -366) (undo-tree-id12558 . -366) (undo-tree-id12559 . -366) (undo-tree-id12560 . -366) (undo-tree-id12561 . -366) (undo-tree-id12562 . -366) (undo-tree-id12563 . -366) (undo-tree-id12564 . -366) (undo-tree-id12565 . -366) (undo-tree-id12566 . -366) (undo-tree-id12567 . -366) (undo-tree-id12568 . -366) (undo-tree-id12569 . -366) (undo-tree-id12570 . -366) (undo-tree-id12571 . -366) (undo-tree-id12572 . -366) (undo-tree-id12573 . -366) (undo-tree-id12574 . -366) (undo-tree-id12575 . -366) (undo-tree-id12576 . -366) (undo-tree-id12577 . -366) (undo-tree-id12578 . -366) (undo-tree-id12579 . -366) (undo-tree-id12580 . -366) (undo-tree-id12581 . -366) (undo-tree-id12582 . -366) (undo-tree-id12583 . -366) (undo-tree-id12584 . -366) (undo-tree-id12585 . -366) (undo-tree-id12586 . -366) (undo-tree-id12587 . -366) (undo-tree-id12588 . -366) (undo-tree-id12589 . -366) (undo-tree-id12590 . -366) (undo-tree-id12591 . -366) (undo-tree-id12592 . -366) (undo-tree-id12593 . -366) (undo-tree-id12594 . -366) (undo-tree-id12595 . -366) (undo-tree-id12596 . -366) (undo-tree-id12597 . -366) (undo-tree-id12598 . -366) (undo-tree-id12599 . -366) (undo-tree-id12600 . -366) (undo-tree-id12601 . -366) (undo-tree-id12602 . -366) (undo-tree-id12603 . -366) (undo-tree-id12604 . -366) (undo-tree-id12605 . -366) (undo-tree-id12606 . -366) (undo-tree-id12607 . -366) (undo-tree-id12608 . -366) (undo-tree-id12609 . -366) (undo-tree-id12610 . -366) (undo-tree-id12611 . -366) (undo-tree-id12612 . -366) (undo-tree-id12613 . -366) (undo-tree-id12614 . -366) (undo-tree-id12615 . -366) (undo-tree-id12616 . -366) (undo-tree-id12617 . -366) (undo-tree-id12618 . -366) (undo-tree-id12619 . -366) (undo-tree-id12620 . -366) (undo-tree-id12621 . -366) (undo-tree-id12622 . -366) (undo-tree-id12623 . -366) (undo-tree-id12624 . -366) (undo-tree-id12625 . -366) (undo-tree-id12626 . -366) (undo-tree-id12627 . -366) (undo-tree-id12628 . -366) (undo-tree-id12629 . -366) (undo-tree-id12630 . -366) (undo-tree-id12631 . -366) (undo-tree-id12632 . -366) (undo-tree-id12633 . -366) (undo-tree-id12634 . -366) (undo-tree-id12635 . -366) (undo-tree-id12636 . -366) (undo-tree-id12637 . -366) (undo-tree-id12638 . -366) (undo-tree-id12639 . -372) (undo-tree-id12640 . -372) (undo-tree-id12641 . -372) (undo-tree-id12642 . -372) (undo-tree-id12643 . -372) (undo-tree-id12644 . -372) (undo-tree-id12645 . -372) (undo-tree-id12646 . -372) (undo-tree-id12647 . -372) (undo-tree-id12648 . -372) (undo-tree-id12649 . -372) (undo-tree-id12650 . -372) (undo-tree-id12651 . -372) (undo-tree-id12652 . -372) (undo-tree-id12653 . -372) (undo-tree-id12654 . -372) (undo-tree-id12655 . -372) (undo-tree-id12656 . -372) (undo-tree-id12657 . -372) (undo-tree-id12658 . -372) (undo-tree-id12659 . -372) (undo-tree-id12660 . -372) (undo-tree-id12661 . -378) (undo-tree-id12662 . -378) (undo-tree-id12663 . -378) (undo-tree-id12664 . -378) (undo-tree-id12665 . -378) (undo-tree-id12666 . -378) (undo-tree-id12667 . -378) (undo-tree-id12668 . -378) (undo-tree-id12669 . -378) (undo-tree-id12670 . -378) (undo-tree-id12671 . -378) (undo-tree-id12672 . -378) (undo-tree-id12673 . -378) (undo-tree-id12674 . -378) (undo-tree-id12675 . -378) (undo-tree-id12676 . -378) (undo-tree-id12677 . -378) (undo-tree-id12678 . -378) (undo-tree-id12679 . -378) (undo-tree-id12680 . -378) (undo-tree-id12681 . -378) (undo-tree-id12682 . -378) (undo-tree-id12683 . -380) (undo-tree-id12684 . -380) (undo-tree-id12685 . -380) (undo-tree-id12686 . -380) (undo-tree-id12687 . -380) (undo-tree-id12688 . -380) (undo-tree-id12689 . -380) (undo-tree-id12690 . -380) (undo-tree-id12691 . -380) (undo-tree-id12692 . -380) (undo-tree-id12693 . -380) (undo-tree-id12694 . -380) (undo-tree-id12695 . -380) (undo-tree-id12696 . -380) (undo-tree-id12697 . -380) (undo-tree-id12698 . -381) (undo-tree-id12699 . -381) (undo-tree-id12700 . -381) (undo-tree-id12701 . -381) (undo-tree-id12702 . -381) (undo-tree-id12703 . -381) (undo-tree-id12704 . -381) (undo-tree-id12705 . -381) (undo-tree-id12706 . -381) (undo-tree-id12707 . -381) (undo-tree-id12708 . -381) (undo-tree-id12709 . -381) (undo-tree-id12710 . -381) (undo-tree-id12711 . -381) (undo-tree-id12712 . -381) (undo-tree-id12713 . -381) (undo-tree-id12714 . -381) (undo-tree-id12715 . -382) (undo-tree-id12716 . -382) (undo-tree-id12717 . -382) (undo-tree-id12718 . -382) (undo-tree-id12719 . -382) (undo-tree-id12720 . -382) (undo-tree-id12721 . -382) (undo-tree-id12722 . -382) (undo-tree-id12723 . -382) (undo-tree-id12724 . -382) (undo-tree-id12725 . -382) (undo-tree-id12726 . -382) (undo-tree-id12727 . -382) (undo-tree-id12728 . -382) (undo-tree-id12729 . -382) (undo-tree-id12730 . -382) (undo-tree-id12731 . -382) (undo-tree-id12732 . -382) (undo-tree-id12733 . -382) (undo-tree-id12734 . -382) (undo-tree-id12735 . -382) (undo-tree-id12736 . -382) (undo-tree-id12737 . -382) (undo-tree-id12738 . -381) (undo-tree-id12739 . -381) (undo-tree-id12740 . -381) (undo-tree-id12741 . -381) (undo-tree-id12742 . -381) (undo-tree-id12743 . -381) (undo-tree-id12744 . -381) (undo-tree-id12745 . -381) (undo-tree-id12746 . -381) (undo-tree-id12747 . -380) (undo-tree-id12748 . -380) (undo-tree-id12749 . -380) (undo-tree-id12750 . -380) (undo-tree-id12751 . -380) (undo-tree-id12752 . -380) (undo-tree-id12753 . -380) (undo-tree-id12754 . -380) (undo-tree-id12755 . -380) (undo-tree-id12756 . -380) (undo-tree-id12757 . -380) (undo-tree-id12758 . -380) (undo-tree-id12759 . -380) (undo-tree-id12760 . -380) (undo-tree-id12761 . -380) (undo-tree-id12762 . -380) (undo-tree-id12763 . -380) (undo-tree-id12764 . -381) (undo-tree-id12765 . -381) (undo-tree-id12766 . -381) (undo-tree-id12767 . -381) (undo-tree-id12768 . -381) (undo-tree-id12769 . -381) (undo-tree-id12770 . -381) (undo-tree-id12771 . -381) (undo-tree-id12772 . -381) (undo-tree-id12773 . -381) (undo-tree-id12774 . -381) (undo-tree-id12775 . -381) (undo-tree-id12776 . -381) (undo-tree-id12777 . -381) (undo-tree-id12778 . -381) (undo-tree-id12779 . 117) (undo-tree-id12780 . -387) (undo-tree-id12781 . -383) (undo-tree-id12782 . -383) (undo-tree-id12783 . -383) (undo-tree-id12784 . -383) (undo-tree-id12785 . -383) (undo-tree-id12786 . -383) (undo-tree-id12787 . -383) (undo-tree-id12788 . -383) (undo-tree-id12789 . -383) (undo-tree-id12790 . -383) (undo-tree-id12791 . -383) (undo-tree-id12792 . -383) (undo-tree-id12793 . -383) (undo-tree-id12794 . -383) (undo-tree-id12795 . -383) (undo-tree-id12796 . -387) (undo-tree-id12797 . -387) (undo-tree-id12798 . -387) (undo-tree-id12799 . -387) (undo-tree-id12800 . -387) (undo-tree-id12801 . -387) (undo-tree-id12802 . -387) (undo-tree-id12803 . -387) (undo-tree-id12804 . -387) (undo-tree-id12805 . -387) (undo-tree-id12806 . -387) (undo-tree-id12807 . -387) (undo-tree-id12808 . -387) (undo-tree-id12809 . -387) (undo-tree-id12810 . -387) (undo-tree-id12811 . -389) (undo-tree-id12812 . -389) (undo-tree-id12813 . -389) (undo-tree-id12814 . -389) (undo-tree-id12815 . -389) (undo-tree-id12816 . -389) (undo-tree-id12817 . -389) (undo-tree-id12818 . -389) (undo-tree-id12819 . -389) (undo-tree-id12820 . -389) (undo-tree-id12821 . -389) (undo-tree-id12822 . -389) (undo-tree-id12823 . -389) (undo-tree-id12824 . -389) (undo-tree-id12825 . -389) (undo-tree-id12826 . -392) (undo-tree-id12827 . -392) (undo-tree-id12828 . -392) (undo-tree-id12829 . -392) (undo-tree-id12830 . -392) (undo-tree-id12831 . -392) (undo-tree-id12832 . -392) (undo-tree-id12833 . -392) (undo-tree-id12834 . -392) (undo-tree-id12835 . -392) (undo-tree-id12836 . -392) (undo-tree-id12837 . -392) (undo-tree-id12838 . -392) (undo-tree-id12839 . -392) (undo-tree-id12840 . -392) (undo-tree-id12841 . -396) (undo-tree-id12842 . -396) (undo-tree-id12843 . -396) (undo-tree-id12844 . -396) (undo-tree-id12845 . -396) (undo-tree-id12846 . -396) (undo-tree-id12847 . -396) (undo-tree-id12848 . -396) (undo-tree-id12849 . -396) (undo-tree-id12850 . -396) (undo-tree-id12851 . -396) (undo-tree-id12852 . -396) (undo-tree-id12853 . -396) (undo-tree-id12854 . -396) (undo-tree-id12855 . -396) (undo-tree-id12856 . -399) (undo-tree-id12857 . -399) (undo-tree-id12858 . -399) (undo-tree-id12859 . -399) (undo-tree-id12860 . -399) (undo-tree-id12861 . -399) (undo-tree-id12862 . -399) (undo-tree-id12863 . -399) (undo-tree-id12864 . -399) (undo-tree-id12865 . -399) (undo-tree-id12866 . -399) (undo-tree-id12867 . -399) (undo-tree-id12868 . -399) (undo-tree-id12869 . -399) (undo-tree-id12870 . -399) (undo-tree-id12871 . -399) (undo-tree-id12872 . -399) (undo-tree-id12873 . -399) (undo-tree-id12874 . -399) (undo-tree-id12875 . -399) (undo-tree-id12876 . -399) (undo-tree-id12877 . -399) (undo-tree-id12878 . -399) (undo-tree-id12879 . -399) (undo-tree-id12880 . -399) (undo-tree-id12881 . -399) (undo-tree-id12882 . -399) (undo-tree-id12883 . -399) (undo-tree-id12884 . -399) (undo-tree-id12885 . -399) (undo-tree-id12886 . -399) (undo-tree-id12887 . -399) (undo-tree-id12888 . -399) (undo-tree-id12889 . -399) (undo-tree-id12890 . -399) (undo-tree-id12891 . -399) (undo-tree-id12892 . -399) (undo-tree-id12893 . -399) (undo-tree-id12894 . -399) (undo-tree-id12895 . -399) (undo-tree-id12896 . -399) (undo-tree-id12897 . -399) (undo-tree-id12898 . -399) (undo-tree-id12899 . -400) (undo-tree-id12900 . -400) (undo-tree-id12901 . -400) (undo-tree-id12902 . -400) (undo-tree-id12903 . -400) (undo-tree-id12904 . -400) (undo-tree-id12905 . -400) (undo-tree-id12906 . -400) (undo-tree-id12907 . -400) (undo-tree-id12908 . -400) (undo-tree-id12909 . -400) (undo-tree-id12910 . -400) (undo-tree-id12911 . -400) (undo-tree-id12912 . -400) (undo-tree-id12913 . -400) (undo-tree-id12914 . -400) (undo-tree-id12915 . -400) (undo-tree-id12916 . -400) (undo-tree-id12917 . -400) (undo-tree-id12918 . -400) (undo-tree-id12919 . -400) (undo-tree-id12920 . -400) (undo-tree-id12921 . -400) (undo-tree-id12922 . -400) (undo-tree-id12923 . -400) (undo-tree-id12924 . -400) (undo-tree-id12925 . -400) (undo-tree-id12926 . -400) (undo-tree-id12927 . -400) (undo-tree-id12928 . -400) (undo-tree-id12929 . -400) (undo-tree-id12930 . -400) (undo-tree-id12931 . -400) (undo-tree-id12932 . -400) (undo-tree-id12933 . -400) (undo-tree-id12934 . -400) (undo-tree-id12935 . -400) (undo-tree-id12936 . -400) (undo-tree-id12937 . -400) (undo-tree-id12938 . -400) (undo-tree-id12939 . -400) (undo-tree-id12940 . -400) (undo-tree-id12941 . -400) (undo-tree-id12942 . -495) (undo-tree-id12943 . -495) (undo-tree-id12944 . -495) (undo-tree-id12945 . -495) (undo-tree-id12946 . -495) (undo-tree-id12947 . -495) (undo-tree-id12948 . -495) (undo-tree-id12949 . -495) (undo-tree-id12950 . -495) (undo-tree-id12951 . -495) (undo-tree-id12952 . -495) (undo-tree-id12953 . -495) (undo-tree-id12954 . -495) (undo-tree-id12955 . -495) (undo-tree-id12956 . -495) (undo-tree-id12957 . -400) (undo-tree-id12958 . -400) (undo-tree-id12959 . -400) (undo-tree-id12960 . -400) (undo-tree-id12961 . -400) (undo-tree-id12962 . -400) (undo-tree-id12963 . -400) (undo-tree-id12964 . -400) (undo-tree-id12965 . -400) (undo-tree-id12966 . -400) (undo-tree-id12967 . -400) (undo-tree-id12968 . -400) (undo-tree-id12969 . -400) (undo-tree-id12970 . -400) (undo-tree-id12971 . -400) (undo-tree-id12972 . -400) (undo-tree-id12973 . -400) (undo-tree-id12974 . -400) (undo-tree-id12975 . -400) (undo-tree-id12976 . -400) (undo-tree-id12977 . -400) (undo-tree-id12978 . -400) (undo-tree-id12979 . -400) (undo-tree-id12980 . -400) (undo-tree-id12981 . -400) (undo-tree-id12982 . -400) (undo-tree-id12983 . -400) (undo-tree-id12984 . -400) (undo-tree-id12985 . -400) (undo-tree-id12986 . -495) (undo-tree-id12987 . -495) (undo-tree-id12988 . -495) (undo-tree-id12989 . -495) (undo-tree-id12990 . -495) (undo-tree-id12991 . -495) (undo-tree-id12992 . -495) (undo-tree-id12993 . -495) (undo-tree-id12994 . -495) (undo-tree-id12995 . -495) (undo-tree-id12996 . -495) (undo-tree-id12997 . -495) (undo-tree-id12998 . -495) (undo-tree-id12999 . -495) (undo-tree-id13000 . -495) (undo-tree-id13001 . -495) (undo-tree-id13002 . -495) (undo-tree-id13003 . -495) (undo-tree-id13004 . -495) (undo-tree-id13005 . -495) (undo-tree-id13006 . -495) (undo-tree-id13007 . -495) (undo-tree-id13008 . -495) (undo-tree-id13009 . -495) (undo-tree-id13010 . -495) (undo-tree-id13011 . -495) (undo-tree-id13012 . -495) (undo-tree-id13013 . -495) (undo-tree-id13014 . -495) (undo-tree-id13015 . -495) (undo-tree-id13016 . -495) (undo-tree-id13017 . -495) (undo-tree-id13018 . -495) (undo-tree-id13019 . -495) (undo-tree-id13020 . -495) (undo-tree-id13021 . -495) (undo-tree-id13022 . -495) (undo-tree-id13023 . -495) (undo-tree-id13024 . -495) (undo-tree-id13025 . -496) (undo-tree-id13026 . -496) (undo-tree-id13027 . -496) (undo-tree-id13028 . -496) (undo-tree-id13029 . -496) (undo-tree-id13030 . -496) (undo-tree-id13031 . -496) (undo-tree-id13032 . -496) (undo-tree-id13033 . -496) (undo-tree-id13034 . -496) (undo-tree-id13035 . -496) (undo-tree-id13036 . -496) (undo-tree-id13037 . -496) (undo-tree-id13038 . -496) (undo-tree-id13039 . -496) (undo-tree-id13040 . -496) (undo-tree-id13041 . -496) (undo-tree-id13042 . -496) (undo-tree-id13043 . -496) (undo-tree-id13044 . -496) (undo-tree-id13045 . -496) (undo-tree-id13046 . -496) (undo-tree-id13047 . -496) (undo-tree-id13048 . -495) (undo-tree-id13049 . -495) (undo-tree-id13050 . -495) (undo-tree-id13051 . -495) (undo-tree-id13052 . -495) (undo-tree-id13053 . -495) (undo-tree-id13054 . -495) (undo-tree-id13055 . -495) (undo-tree-id13056 . -495) (undo-tree-id13057 . -494) (undo-tree-id13058 . -494) (undo-tree-id13059 . -494) (undo-tree-id13060 . -494) (undo-tree-id13061 . -494) (undo-tree-id13062 . -494) (undo-tree-id13063 . -494) (undo-tree-id13064 . -494) (undo-tree-id13065 . -494) (undo-tree-id13066 . -494) (undo-tree-id13067 . -495) (undo-tree-id13068 . -495) (undo-tree-id13069 . -495) (undo-tree-id13070 . -495) (undo-tree-id13071 . -495) (undo-tree-id13072 . -495) (undo-tree-id13073 . -495) (undo-tree-id13074 . -495) (undo-tree-id13075 . -495) (undo-tree-id13076 . -495) (undo-tree-id13077 . -495) (undo-tree-id13078 . -495) (undo-tree-id13079 . -495) (undo-tree-id13080 . -495) (undo-tree-id13081 . -495) (undo-tree-id13082 . -497) (undo-tree-id13083 . -497) (undo-tree-id13084 . -497) (undo-tree-id13085 . -497) (undo-tree-id13086 . -497) (undo-tree-id13087 . -497) (undo-tree-id13088 . -497) (undo-tree-id13089 . -497) (undo-tree-id13090 . -497) (undo-tree-id13091 . -497) (undo-tree-id13092 . -497) (undo-tree-id13093 . -497) (undo-tree-id13094 . -497) (undo-tree-id13095 . -497) (undo-tree-id13096 . -497) (undo-tree-id13097 . -498) (undo-tree-id13098 . -498) (undo-tree-id13099 . -498) (undo-tree-id13100 . -498) (undo-tree-id13101 . -498) (undo-tree-id13102 . -498) (undo-tree-id13103 . -498) (undo-tree-id13104 . -498) (undo-tree-id13105 . -498) (undo-tree-id13106 . -498) (undo-tree-id13107 . -498) (undo-tree-id13108 . -498) (undo-tree-id13109 . -498) (undo-tree-id13110 . -498) (undo-tree-id13111 . -498) (undo-tree-id13112 . -500) (undo-tree-id13113 . -500) (undo-tree-id13114 . -500) (undo-tree-id13115 . -500) (undo-tree-id13116 . -500) (undo-tree-id13117 . -500) (undo-tree-id13118 . -500) (undo-tree-id13119 . -500) (undo-tree-id13120 . -500) (undo-tree-id13121 . -500) (undo-tree-id13122 . -500) (undo-tree-id13123 . -500) (undo-tree-id13124 . -500) (undo-tree-id13125 . -500) (undo-tree-id13126 . -500) (undo-tree-id13127 . -500) (undo-tree-id13128 . -500) (undo-tree-id13129 . -500) (undo-tree-id13130 . -500) (undo-tree-id13131 . -500) (undo-tree-id13132 . -500) (undo-tree-id13133 . -500) (undo-tree-id13134 . -500) (undo-tree-id13135 . -500) (undo-tree-id13136 . -500) (undo-tree-id13137 . -500) (undo-tree-id13138 . -500) (undo-tree-id13139 . -500) (undo-tree-id13140 . -500) (undo-tree-id13141 . -500) (undo-tree-id13142 . -500) (undo-tree-id13143 . -500) (undo-tree-id13144 . -500) (undo-tree-id13145 . -500) (undo-tree-id13146 . -500) (undo-tree-id13147 . -500) (undo-tree-id13148 . -500) (undo-tree-id13149 . -500) (undo-tree-id13150 . -500) (undo-tree-id13151 . -500) (undo-tree-id13152 . -500) (undo-tree-id13153 . -500) (undo-tree-id13154 . -500) (undo-tree-id13155 . -500) (undo-tree-id13156 . -500) (undo-tree-id13157 . -500) (undo-tree-id13158 . -500) (undo-tree-id13159 . -500) (undo-tree-id13160 . -500) (undo-tree-id13161 . -500) (undo-tree-id13162 . -500) (undo-tree-id13163 . -500) (undo-tree-id13164 . -500) (undo-tree-id13165 . -500) (undo-tree-id13166 . -500) (undo-tree-id13167 . -500) (undo-tree-id13168 . -500) (undo-tree-id13169 . -500) (undo-tree-id13170 . -500) (undo-tree-id13171 . -500) (undo-tree-id13172 . -500) (undo-tree-id13173 . -500) (undo-tree-id13174 . -500) (undo-tree-id13175 . -364) (4178 . 4542) (#("  The neuron computes a weighted sum of these values and applies the hyperbolic tangent activation function to the result, and this gives the first output, y_0. In a simple RNN, this output is also the new state h0. This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 56 57 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 57 91 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 91 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 95 137 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 137 138 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 138 157 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 157 158 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 158 159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 159 160 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 160 161 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 161 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 216 289 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 289 290 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 290 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4314) (undo-tree-id13176 . -56) (undo-tree-id13177 . -56) (undo-tree-id13178 . -56) (undo-tree-id13179 . -56) (undo-tree-id13180 . -56) (undo-tree-id13181 . -56) (undo-tree-id13182 . -56) (undo-tree-id13183 . -56) (undo-tree-id13184 . -137) (undo-tree-id13185 . -137) (undo-tree-id13186 . -137) (undo-tree-id13187 . -137) (undo-tree-id13188 . -137) (undo-tree-id13189 . -137) (undo-tree-id13190 . -137) (undo-tree-id13191 . -137) (undo-tree-id13192 . -160) (undo-tree-id13193 . -160) (undo-tree-id13194 . -160) (undo-tree-id13195 . -160) (undo-tree-id13196 . -160) (undo-tree-id13197 . -160) (undo-tree-id13198 . -160) (undo-tree-id13199 . -160) (undo-tree-id13200 . -215) (undo-tree-id13201 . -215) (undo-tree-id13202 . -215) (undo-tree-id13203 . -215) (undo-tree-id13204 . -215) (undo-tree-id13205 . -215) (undo-tree-id13206 . -215) (undo-tree-id13207 . -215) (undo-tree-id13208 . -289) (undo-tree-id13209 . -289) (undo-tree-id13210 . -289) (undo-tree-id13211 . -289) (undo-tree-id13212 . -289) (undo-tree-id13213 . -289) (undo-tree-id13214 . -289) (undo-tree-id13215 . -289) (undo-tree-id13216 . -215) (undo-tree-id13217 . -215) (undo-tree-id13218 . -215) (undo-tree-id13219 . -215) (undo-tree-id13220 . -215) (undo-tree-id13221 . -215) (undo-tree-id13222 . -215) (undo-tree-id13223 . -215) (undo-tree-id13224 . -160) (undo-tree-id13225 . -160) (undo-tree-id13226 . -160) (undo-tree-id13227 . -160) (undo-tree-id13228 . -160) (undo-tree-id13229 . -160) (undo-tree-id13230 . -160) (undo-tree-id13231 . -160) (undo-tree-id13232 . -2) (undo-tree-id13233 . -1) (undo-tree-id13234 . -1) (undo-tree-id13235 . -1) (undo-tree-id13236 . -1) (undo-tree-id13237 . -1) (undo-tree-id13238 . -1) (undo-tree-id13239 . -1) (undo-tree-id13240 . -1) (undo-tree-id13241 . -1) (undo-tree-id13242 . -1) (undo-tree-id13243 . -1) (undo-tree-id13244 . -1) (undo-tree-id13245 . -1) (undo-tree-id13246 . -1) (undo-tree-id13247 . -1) (undo-tree-id13248 . -1) (undo-tree-id13249 . -1) (undo-tree-id13250 . -1) (undo-tree-id13251 . -1) (undo-tree-id13252 . -1) (undo-tree-id13253 . -1) (undo-tree-id13254 . -1) (undo-tree-id13255 . -1) (undo-tree-id13256 . -1) (undo-tree-id13257 . -1) (undo-tree-id13258 . -1) (undo-tree-id13259 . -1) (undo-tree-id13260 . -1) (undo-tree-id13261 . -1) (undo-tree-id13262 . -1) (undo-tree-id13263 . -1) (undo-tree-id13264 . -1) (undo-tree-id13265 . -2) (undo-tree-id13266 . -2) (undo-tree-id13267 . -2) (undo-tree-id13268 . -2) (undo-tree-id13269 . -2) (undo-tree-id13270 . -2) (undo-tree-id13271 . -2) (undo-tree-id13272 . -2) (undo-tree-id13273 . -2) (undo-tree-id13274 . -2) (undo-tree-id13275 . -2) (undo-tree-id13276 . -2) (undo-tree-id13277 . -2) (undo-tree-id13278 . -2) (undo-tree-id13279 . -2) (undo-tree-id13280 . -2) (undo-tree-id13281 . -2) (undo-tree-id13282 . -2) (undo-tree-id13283 . -2) (undo-tree-id13284 . -2) (undo-tree-id13285 . -2) (undo-tree-id13286 . -2) (undo-tree-id13287 . -2) (undo-tree-id13288 . -2) (undo-tree-id13289 . -2) (undo-tree-id13290 . -2) (undo-tree-id13291 . -2) (undo-tree-id13292 . -2) (undo-tree-id13293 . -2) (undo-tree-id13294 . -2) (undo-tree-id13295 . -2) 4316 (4315 . 4316)) nil (25772 50297 720559 464000) 0 nil])
([nil nil ((4315 . 4679) (#("- and this gives the first output, y_0. In a simple RNN, this output is also the new state h0. This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. 
- The neuron computes a weighted sum of these values and applies the hyperbolic tangent activation function to the result" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 16 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 16 17 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 17 36 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 36 37 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 37 38 (display ((raise -0.3) (height 0.7)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 38 39 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 39 40 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 40 94 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 94 95 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 95 168 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 168 169 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 169 242 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 242 243 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 243 244 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 244 245 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 245 299 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 299 300 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 300 334 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 334 338 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 338 364 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4315) (undo-tree-id13300 . -364) (undo-tree-id13301 . -364) (undo-tree-id13302 . 119) (undo-tree-id13303 . -244) (undo-tree-id13304 . -364) (undo-tree-id13305 . -244) (undo-tree-id13306 . -244) (undo-tree-id13307 . -244) (undo-tree-id13308 . -244) (undo-tree-id13309 . -244) (undo-tree-id13310 . -244) (undo-tree-id13311 . -244) (undo-tree-id13312 . -244) (undo-tree-id13313 . -244) (undo-tree-id13314 . -244) (undo-tree-id13315 . -244) (undo-tree-id13316 . -244) (undo-tree-id13317 . -244) (undo-tree-id13318 . -244) (undo-tree-id13319 . -244) (undo-tree-id13320 . -244) (undo-tree-id13321 . -244) (undo-tree-id13322 . -244) (undo-tree-id13323 . -244) (undo-tree-id13324 . -244) (undo-tree-id13325 . -244) (undo-tree-id13326 . -244) (undo-tree-id13327 . -244) (undo-tree-id13328 . -244) (undo-tree-id13329 . -244) (undo-tree-id13330 . -244) (undo-tree-id13331 . -244) (undo-tree-id13332 . -244) (undo-tree-id13333 . -244) (undo-tree-id13334 . -244) (undo-tree-id13335 . -244) (undo-tree-id13336 . -244) (undo-tree-id13337 . -245) (undo-tree-id13338 . -245) (undo-tree-id13339 . -245) (undo-tree-id13340 . -245) (undo-tree-id13341 . -245) (undo-tree-id13342 . -245) (undo-tree-id13343 . -245) (undo-tree-id13344 . -245) (undo-tree-id13345 . -245) (undo-tree-id13346 . -245) (undo-tree-id13347 . -245) (undo-tree-id13348 . -245) (undo-tree-id13349 . -245) (undo-tree-id13350 . -245) (undo-tree-id13351 . -245) (undo-tree-id13352 . -245) (undo-tree-id13353 . -245) (undo-tree-id13354 . -245) (undo-tree-id13355 . -245) (undo-tree-id13356 . -245) (undo-tree-id13357 . -245) (undo-tree-id13358 . -245) (undo-tree-id13359 . -245) (undo-tree-id13360 . -245) (undo-tree-id13361 . -245) (undo-tree-id13362 . -245) (undo-tree-id13363 . -245) (undo-tree-id13364 . -245) (undo-tree-id13365 . -245) (undo-tree-id13366 . -245) (undo-tree-id13367 . -245) (undo-tree-id13368 . -245) (undo-tree-id13369 . -245) (undo-tree-id13370 . -245) (undo-tree-id13371 . -245) (undo-tree-id13372 . -245) (undo-tree-id13373 . -245) (undo-tree-id13374 . -245) (undo-tree-id13375 . -245) (undo-tree-id13376 . -245) (undo-tree-id13377 . -245) (undo-tree-id13378 . -245) (undo-tree-id13379 . -245) (undo-tree-id13380 . -245) (undo-tree-id13381 . -245) (undo-tree-id13382 . -245) (undo-tree-id13383 . -245) (undo-tree-id13384 . -245) (undo-tree-id13385 . -245) (undo-tree-id13386 . -245) (undo-tree-id13387 . -331) (undo-tree-id13388 . -331) (undo-tree-id13389 . -331) (undo-tree-id13390 . -331) (undo-tree-id13391 . -331) (undo-tree-id13392 . -331) (undo-tree-id13393 . -331) (undo-tree-id13394 . -331) (undo-tree-id13395 . -331) (undo-tree-id13396 . -331) (undo-tree-id13397 . -331) (undo-tree-id13398 . -331) (undo-tree-id13399 . -331) (undo-tree-id13400 . -331) (undo-tree-id13401 . -331) (undo-tree-id13402 . -331) (undo-tree-id13403 . -331) (undo-tree-id13404 . -331) (undo-tree-id13405 . -331) (undo-tree-id13406 . -331) (undo-tree-id13407 . -331) (undo-tree-id13408 . -331) (undo-tree-id13409 . -331) (undo-tree-id13410 . -331) (undo-tree-id13411 . -331) (undo-tree-id13412 . -331) (undo-tree-id13413 . -331) (undo-tree-id13414 . -331) (undo-tree-id13415 . -331) (undo-tree-id13416 . -331) (undo-tree-id13417 . -331) (undo-tree-id13418 . -331) (undo-tree-id13419 . -331) (undo-tree-id13420 . -331) (undo-tree-id13421 . -331) (undo-tree-id13422 . -331) (undo-tree-id13423 . -331) (undo-tree-id13424 . -331) (undo-tree-id13425 . -331) (undo-tree-id13426 . -331) (undo-tree-id13427 . -331) (undo-tree-id13428 . -331) (undo-tree-id13429 . -331) (undo-tree-id13430 . -364) (undo-tree-id13431 . -364) (undo-tree-id13432 . -364) (undo-tree-id13433 . -364) (undo-tree-id13434 . -364) (undo-tree-id13435 . -364) (undo-tree-id13436 . -364) (undo-tree-id13437 . -364) (undo-tree-id13438 . -364) (undo-tree-id13439 . -364) (undo-tree-id13440 . -364) (undo-tree-id13441 . -364) (undo-tree-id13442 . -364) (undo-tree-id13443 . -364) (undo-tree-id13444 . -364) (undo-tree-id13445 . -364) (undo-tree-id13446 . -364) (undo-tree-id13447 . -364) (undo-tree-id13448 . -364) (undo-tree-id13449 . -364) (undo-tree-id13450 . -364) (undo-tree-id13451 . -364) (undo-tree-id13452 . -364) (undo-tree-id13453 . -364) (undo-tree-id13454 . -364) (undo-tree-id13455 . -364) (undo-tree-id13456 . -364) (undo-tree-id13457 . -364) (undo-tree-id13458 . -364) (undo-tree-id13459 . -364) (undo-tree-id13460 . -364) (undo-tree-id13461 . -364) (undo-tree-id13462 . -364) (undo-tree-id13463 . -364) (undo-tree-id13464 . -364) (undo-tree-id13465 . -364) (undo-tree-id13466 . -364) (undo-tree-id13467 . -364) (undo-tree-id13468 . -364) (undo-tree-id13469 . -364) (undo-tree-id13470 . -364) (undo-tree-id13471 . -364) (undo-tree-id13472 . -364) (undo-tree-id13473 . -364) (undo-tree-id13474 . -364) (undo-tree-id13475 . -364) (undo-tree-id13476 . -364) (undo-tree-id13477 . -243) (4315 . 4558) (#(" and this gives the first output, y_0. In a simple RNN, this output is also the new state h0. This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. " 0 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 15 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 16 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 35 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 37 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 38 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 39 93 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 93 94 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 94 167 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 167 168 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 168 241 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4436) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4436) (undo-tree-id13478 . -1) (undo-tree-id13479 . -1) (undo-tree-id13480 . -1) (t 25772 50297 773566 199000)) nil (25772 50311 524098 95000) 0 nil])
([nil nil ((#("and " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4439) (undo-tree-id14680 . -3) (undo-tree-id14681 . 4) (undo-tree-id14682 . -4) (t 25772 50311 576782 77000)) nil (25772 50358 674873 938000) 0 nil])
([nil nil ((4439 . 4440) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4439)) nil (25772 50358 674871 15000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4466) (undo-tree-id14678 . -1) (undo-tree-id14679 . -1)) nil (25772 50358 674870 73000) 0 nil])
([nil nil ((4471 . 4472) (4470 . 4471) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4470) (undo-tree-id14675 . -1) (undo-tree-id14676 . -1) (undo-tree-id14677 . -1)) nil (25772 50358 674867 801000) 0 nil])
([nil nil ((nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 4474 . 4476) (nil line-prefix #("  " 0 2 (face org-indent)) 4474 . 4476) (nil fontified nil 4474 . 4476) (#("-  " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 1 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4474) (4477 . 4479) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4479) (4471 . 4474) 4474 (4473 . 4474) (4437 . 4678) (#("- 
  In a simple RNN, this output is also the new state h0. This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. 
- This gives the first output y_0" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 5 59 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 59 60 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 60 133 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 133 134 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 134 207 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 207 208 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 208 209 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 209 210 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 210 220 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 220 221 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 221 239 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 239 240 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 240 241 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7)))) . 4437) (undo-tree-id14051 . -241) (undo-tree-id14052 . -241) (undo-tree-id14053 . -210) (undo-tree-id14054 . -210) (undo-tree-id14055 . 30) (undo-tree-id14056 . -210) (undo-tree-id14057 . -210) (undo-tree-id14058 . -209) (undo-tree-id14059 . -209) (undo-tree-id14060 . -209) (undo-tree-id14061 . -209) (undo-tree-id14062 . -209) (undo-tree-id14063 . -209) (undo-tree-id14064 . -209) (undo-tree-id14065 . -209) (undo-tree-id14066 . -209) (undo-tree-id14067 . -209) (undo-tree-id14068 . -209) (undo-tree-id14069 . -209) (undo-tree-id14070 . -209) (undo-tree-id14071 . -209) (undo-tree-id14072 . -209) (undo-tree-id14073 . -209) (undo-tree-id14074 . -209) (undo-tree-id14075 . -209) (undo-tree-id14076 . -209) (undo-tree-id14077 . -209) (undo-tree-id14078 . -209) (undo-tree-id14079 . -209) (undo-tree-id14080 . -209) (undo-tree-id14081 . -209) (undo-tree-id14082 . -209) (undo-tree-id14083 . -209) (undo-tree-id14084 . -209) (undo-tree-id14085 . -209) (undo-tree-id14086 . -209) (undo-tree-id14087 . -209) (undo-tree-id14088 . -209) (undo-tree-id14089 . -209) (undo-tree-id14090 . -209) (undo-tree-id14091 . -209) (undo-tree-id14092 . -209) (undo-tree-id14093 . -209) (undo-tree-id14094 . -209) (undo-tree-id14095 . -209) (undo-tree-id14096 . -209) (undo-tree-id14097 . -209) (undo-tree-id14098 . -209) (undo-tree-id14099 . -209) (undo-tree-id14100 . -209) (undo-tree-id14101 . -209) (undo-tree-id14102 . -209) (undo-tree-id14103 . -209) (undo-tree-id14104 . -209) (undo-tree-id14105 . -209) (undo-tree-id14106 . -209) (undo-tree-id14107 . -209) (undo-tree-id14108 . -209) (undo-tree-id14109 . -209) (undo-tree-id14110 . -209) (undo-tree-id14111 . -209) (undo-tree-id14112 . -209) (undo-tree-id14113 . -209) (undo-tree-id14114 . -209) (undo-tree-id14115 . -209) (undo-tree-id14116 . -209) (undo-tree-id14117 . -209) (undo-tree-id14118 . -209) (undo-tree-id14119 . -209) (undo-tree-id14120 . -209) (undo-tree-id14121 . -209) (undo-tree-id14122 . -209) (undo-tree-id14123 . -209) (undo-tree-id14124 . -209) (undo-tree-id14125 . -209) (undo-tree-id14126 . -209) (undo-tree-id14127 . -209) (undo-tree-id14128 . -209) (undo-tree-id14129 . -209) (undo-tree-id14130 . -209) (undo-tree-id14131 . -209) (undo-tree-id14132 . -209) (undo-tree-id14133 . -209) (undo-tree-id14134 . -209) (undo-tree-id14135 . -209) (undo-tree-id14136 . -209) (undo-tree-id14137 . -209) (undo-tree-id14138 . -241) (undo-tree-id14139 . -209) (undo-tree-id14140 . -209) (undo-tree-id14141 . -209) (undo-tree-id14142 . -209) (undo-tree-id14143 . -209) (undo-tree-id14144 . -209) (undo-tree-id14145 . -209) (undo-tree-id14146 . -209) (undo-tree-id14147 . -209) (undo-tree-id14148 . -209) (undo-tree-id14149 . -209) (undo-tree-id14150 . -209) (undo-tree-id14151 . -209) (undo-tree-id14152 . -209) (undo-tree-id14153 . -209) (undo-tree-id14154 . -209) (undo-tree-id14155 . -209) (undo-tree-id14156 . -209) (undo-tree-id14157 . -210) (undo-tree-id14158 . -210) (undo-tree-id14159 . -210) (undo-tree-id14160 . -210) (undo-tree-id14161 . -210) (undo-tree-id14162 . -210) (undo-tree-id14163 . -210) (undo-tree-id14164 . -210) (undo-tree-id14165 . -210) (undo-tree-id14166 . -210) (undo-tree-id14167 . -210) (undo-tree-id14168 . -210) (undo-tree-id14169 . -210) (undo-tree-id14170 . -210) (undo-tree-id14171 . -210) (undo-tree-id14172 . -210) (undo-tree-id14173 . -210) (undo-tree-id14174 . -210) (undo-tree-id14175 . -210) (undo-tree-id14176 . -210) (undo-tree-id14177 . -210) (undo-tree-id14178 . -210) (undo-tree-id14179 . -210) (undo-tree-id14180 . -210) (undo-tree-id14181 . -210) (undo-tree-id14182 . -210) (undo-tree-id14183 . -210) (undo-tree-id14184 . -210) (undo-tree-id14185 . -210) (undo-tree-id14186 . -210) (undo-tree-id14187 . -210) (undo-tree-id14188 . -210) (undo-tree-id14189 . -210) (undo-tree-id14190 . -210) (undo-tree-id14191 . -210) (undo-tree-id14192 . -210) (undo-tree-id14193 . -210) (undo-tree-id14194 . -210) (undo-tree-id14195 . -210) (undo-tree-id14196 . -210) (undo-tree-id14197 . -210) (undo-tree-id14198 . -210) (undo-tree-id14199 . -210) (undo-tree-id14200 . -210) (undo-tree-id14201 . -210) (undo-tree-id14202 . -210) (undo-tree-id14203 . -210) (undo-tree-id14204 . -210) (undo-tree-id14205 . -210) (undo-tree-id14206 . -210) (undo-tree-id14207 . -210) (undo-tree-id14208 . -210) (undo-tree-id14209 . -210) (undo-tree-id14210 . -210) (undo-tree-id14211 . -210) (undo-tree-id14212 . -210) (undo-tree-id14213 . -210) (undo-tree-id14214 . -210) (undo-tree-id14215 . -210) (undo-tree-id14216 . -210) (undo-tree-id14217 . -210) (undo-tree-id14218 . -210) (undo-tree-id14219 . -210) (undo-tree-id14220 . -210) (undo-tree-id14221 . -210) (undo-tree-id14222 . -210) (undo-tree-id14223 . -210) (undo-tree-id14224 . -210) (undo-tree-id14225 . -210) (undo-tree-id14226 . -210) (undo-tree-id14227 . -210) (undo-tree-id14228 . -210) (undo-tree-id14229 . -210) (undo-tree-id14230 . -210) (undo-tree-id14231 . -210) (undo-tree-id14232 . -210) (undo-tree-id14233 . -210) (undo-tree-id14234 . -210) (undo-tree-id14235 . -210) (undo-tree-id14236 . -210) (undo-tree-id14237 . -210) (undo-tree-id14238 . -210) (undo-tree-id14239 . -210) (undo-tree-id14240 . -210) (undo-tree-id14241 . -210) (undo-tree-id14242 . -210) (undo-tree-id14243 . -210) (undo-tree-id14244 . -210) (undo-tree-id14245 . -210) (undo-tree-id14246 . -210) (undo-tree-id14247 . -210) (undo-tree-id14248 . -210) (undo-tree-id14249 . -210) (undo-tree-id14250 . -210) (undo-tree-id14251 . -210) (undo-tree-id14252 . -210) (undo-tree-id14253 . -210) (undo-tree-id14254 . -210) (undo-tree-id14255 . -210) (undo-tree-id14256 . -210) (undo-tree-id14257 . -210) (undo-tree-id14258 . -210) (undo-tree-id14259 . -210) (undo-tree-id14260 . -210) (undo-tree-id14261 . -210) (undo-tree-id14262 . -210) (undo-tree-id14263 . -210) (undo-tree-id14264 . -210) (undo-tree-id14265 . -210) (undo-tree-id14266 . -210) (undo-tree-id14267 . -210) (undo-tree-id14268 . -210) (undo-tree-id14269 . -210) (undo-tree-id14270 . -210) (undo-tree-id14271 . -210) (undo-tree-id14272 . -210) (undo-tree-id14273 . -210) (undo-tree-id14274 . -210) (undo-tree-id14275 . -210) (undo-tree-id14276 . -210) (undo-tree-id14277 . -210) (undo-tree-id14278 . -210) (undo-tree-id14279 . -210) (undo-tree-id14280 . -210) (undo-tree-id14281 . -210) (undo-tree-id14282 . -210) (undo-tree-id14283 . -210) (undo-tree-id14284 . -210) (undo-tree-id14285 . -210) (undo-tree-id14286 . -210) (undo-tree-id14287 . -210) (undo-tree-id14288 . -210) (undo-tree-id14289 . -210) (undo-tree-id14290 . -210) (undo-tree-id14291 . -210) (undo-tree-id14292 . -210) (undo-tree-id14293 . -210) (undo-tree-id14294 . -210) (undo-tree-id14295 . -210) (undo-tree-id14296 . -210) (undo-tree-id14297 . -210) (undo-tree-id14298 . -210) (undo-tree-id14299 . -210) (undo-tree-id14300 . -210) (undo-tree-id14301 . -210) (undo-tree-id14302 . -237) (undo-tree-id14303 . -237) (undo-tree-id14304 . -237) (undo-tree-id14305 . -237) (undo-tree-id14306 . -237) (undo-tree-id14307 . -237) (undo-tree-id14308 . -237) (undo-tree-id14309 . -237) (undo-tree-id14310 . -237) (undo-tree-id14311 . -237) (undo-tree-id14312 . -237) (undo-tree-id14313 . -237) (undo-tree-id14314 . -237) (undo-tree-id14315 . -237) (undo-tree-id14316 . -237) (undo-tree-id14317 . -237) (undo-tree-id14318 . -237) (undo-tree-id14319 . -237) (undo-tree-id14320 . -237) (undo-tree-id14321 . -237) (undo-tree-id14322 . -237) (undo-tree-id14323 . -237) (undo-tree-id14324 . -237) (undo-tree-id14325 . -237) (undo-tree-id14326 . -237) (undo-tree-id14327 . -237) (undo-tree-id14328 . -237) (undo-tree-id14329 . -237) (undo-tree-id14330 . -237) (undo-tree-id14331 . -237) (undo-tree-id14332 . -237) (undo-tree-id14333 . -238) (undo-tree-id14334 . -238) (undo-tree-id14335 . -238) (undo-tree-id14336 . -238) (undo-tree-id14337 . -238) (undo-tree-id14338 . -238) (undo-tree-id14339 . -238) (undo-tree-id14340 . -238) (undo-tree-id14341 . -238) (undo-tree-id14342 . -238) (undo-tree-id14343 . -238) (undo-tree-id14344 . -238) (undo-tree-id14345 . -238) (undo-tree-id14346 . -238) (undo-tree-id14347 . -238) (undo-tree-id14348 . -239) (undo-tree-id14349 . -239) (undo-tree-id14350 . -239) (undo-tree-id14351 . -239) (undo-tree-id14352 . -239) (undo-tree-id14353 . -239) (undo-tree-id14354 . -239) (undo-tree-id14355 . -239) (undo-tree-id14356 . -239) (undo-tree-id14357 . -239) (undo-tree-id14358 . -239) (undo-tree-id14359 . -239) (undo-tree-id14360 . -239) (undo-tree-id14361 . -239) (undo-tree-id14362 . -239) (undo-tree-id14363 . -239) (undo-tree-id14364 . -239) (undo-tree-id14365 . -239) (undo-tree-id14366 . -239) (undo-tree-id14367 . -239) (undo-tree-id14368 . -239) (undo-tree-id14369 . -239) (undo-tree-id14370 . -241) (undo-tree-id14371 . -241) (undo-tree-id14372 . -241) (undo-tree-id14373 . -241) (undo-tree-id14374 . -241) (undo-tree-id14375 . -241) (undo-tree-id14376 . -241) (undo-tree-id14377 . -241) (undo-tree-id14378 . -241) (undo-tree-id14379 . -241) (undo-tree-id14380 . -241) (undo-tree-id14381 . -241) (undo-tree-id14382 . -241) (undo-tree-id14383 . -241) (undo-tree-id14384 . -241) (undo-tree-id14385 . -241) (undo-tree-id14386 . -241) (undo-tree-id14387 . -241) (undo-tree-id14388 . -241) (undo-tree-id14389 . -241) (undo-tree-id14390 . -241) (undo-tree-id14391 . -241) (undo-tree-id14392 . -241) (undo-tree-id14393 . -241) (undo-tree-id14394 . -241) (undo-tree-id14395 . -241) (undo-tree-id14396 . -241) (undo-tree-id14397 . -241) (undo-tree-id14398 . -241) (undo-tree-id14399 . -241) (undo-tree-id14400 . -241) (undo-tree-id14401 . -241) (undo-tree-id14402 . -241) (undo-tree-id14403 . -241) (undo-tree-id14404 . -241) (undo-tree-id14405 . -241) (undo-tree-id14406 . -241) (undo-tree-id14407 . -241) (undo-tree-id14408 . -241) (undo-tree-id14409 . -241) (undo-tree-id14410 . -241) (undo-tree-id14411 . -241) (undo-tree-id14412 . -241) (undo-tree-id14413 . -241) (undo-tree-id14414 . -241) (undo-tree-id14415 . -241) (undo-tree-id14416 . -241) (undo-tree-id14417 . -241) (undo-tree-id14418 . -241) (undo-tree-id14419 . -241) (undo-tree-id14420 . -241) (undo-tree-id14421 . -241) (undo-tree-id14422 . -241) (undo-tree-id14423 . -241) (undo-tree-id14424 . -241) (undo-tree-id14425 . -241) (undo-tree-id14426 . -241) (undo-tree-id14427 . -241) (undo-tree-id14428 . -241) (undo-tree-id14429 . -241) (undo-tree-id14430 . -241) (undo-tree-id14431 . -241) (undo-tree-id14432 . -241) (undo-tree-id14433 . -241) (undo-tree-id14434 . -241) (undo-tree-id14435 . -241) (undo-tree-id14436 . -241) (undo-tree-id14437 . -241) (undo-tree-id14438 . -241) (undo-tree-id14439 . -241) (undo-tree-id14440 . -241) (undo-tree-id14441 . -241) (undo-tree-id14442 . -241) (undo-tree-id14443 . -241) (undo-tree-id14444 . -241) (undo-tree-id14445 . -241) (undo-tree-id14446 . -241) (undo-tree-id14447 . -241) (undo-tree-id14448 . -241) (undo-tree-id14449 . -241) (undo-tree-id14450 . -241) (undo-tree-id14451 . -241) (undo-tree-id14452 . -241) (undo-tree-id14453 . -241) (undo-tree-id14454 . -241) (undo-tree-id14455 . -241) (undo-tree-id14456 . -241) (undo-tree-id14457 . -241) (undo-tree-id14458 . -241) (undo-tree-id14459 . -241) (undo-tree-id14460 . -241) (undo-tree-id14461 . -241) (undo-tree-id14462 . -241) (undo-tree-id14463 . -241) (undo-tree-id14464 . -241) (undo-tree-id14465 . -241) (undo-tree-id14466 . -241) (undo-tree-id14467 . -241) (undo-tree-id14468 . -241) (undo-tree-id14469 . -241) (undo-tree-id14470 . -241) (undo-tree-id14471 . -241) (undo-tree-id14472 . -241) (undo-tree-id14473 . -241) (undo-tree-id14474 . -241) (undo-tree-id14475 . -241) (undo-tree-id14476 . -241) (undo-tree-id14477 . -241) (undo-tree-id14478 . -241) (undo-tree-id14479 . -241) (undo-tree-id14480 . -241) (undo-tree-id14481 . -241) (undo-tree-id14482 . -241) (undo-tree-id14483 . -241) (undo-tree-id14484 . -241) (undo-tree-id14485 . -241) (undo-tree-id14486 . -241) (undo-tree-id14487 . -241) (undo-tree-id14488 . -241) (undo-tree-id14489 . -241) (undo-tree-id14490 . -241) (undo-tree-id14491 . -241) (undo-tree-id14492 . -241) (undo-tree-id14493 . -241) (undo-tree-id14494 . -241) (undo-tree-id14495 . -241) (undo-tree-id14496 . -241) (undo-tree-id14497 . -241) (undo-tree-id14498 . -241) (undo-tree-id14499 . -241) (undo-tree-id14500 . -241) (undo-tree-id14501 . -241) (undo-tree-id14502 . -241) (undo-tree-id14503 . -241) (undo-tree-id14504 . -241) (undo-tree-id14505 . -241) (undo-tree-id14506 . -241) (undo-tree-id14507 . -241) (undo-tree-id14508 . -241) (undo-tree-id14509 . -241) (undo-tree-id14510 . -241) (undo-tree-id14511 . -241) (undo-tree-id14512 . -241) (undo-tree-id14513 . -241) (undo-tree-id14514 . -241) (undo-tree-id14515 . -241) (undo-tree-id14516 . -241) (undo-tree-id14517 . -241) (undo-tree-id14518 . -241) (undo-tree-id14519 . -241) (undo-tree-id14520 . -241) (undo-tree-id14521 . -241) (undo-tree-id14522 . -241) (undo-tree-id14523 . -241) (undo-tree-id14524 . -241) (undo-tree-id14525 . -241) (undo-tree-id14526 . -241) (undo-tree-id14527 . -241) (undo-tree-id14528 . -241) (undo-tree-id14529 . -241) (undo-tree-id14530 . -241) (undo-tree-id14531 . -241) (undo-tree-id14532 . -241) (undo-tree-id14533 . -241) (undo-tree-id14534 . -241) (undo-tree-id14535 . -241) (undo-tree-id14536 . -241) (undo-tree-id14537 . -208) (4437 . 4645) (#(" 
  In a simple RNN, this output is also the new state h0. This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 58 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 59 132 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 132 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 133 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4470) (undo-tree-id14538 . 203) (undo-tree-id14539 . -3) (undo-tree-id14540 . -1) (undo-tree-id14541 . -1) (undo-tree-id14542 . -1) (undo-tree-id14543 . -1) (undo-tree-id14544 . -1) (undo-tree-id14545 . -1) (undo-tree-id14546 . -1) (undo-tree-id14547 . -1) (undo-tree-id14548 . -1) (undo-tree-id14549 . -1) (undo-tree-id14550 . -1) (undo-tree-id14551 . -1) (undo-tree-id14552 . -1) (undo-tree-id14553 . -1) (undo-tree-id14554 . -1) (undo-tree-id14555 . -1) (undo-tree-id14556 . -1) (undo-tree-id14557 . -1) (undo-tree-id14558 . -1) (undo-tree-id14559 . -1) (undo-tree-id14560 . -1) (undo-tree-id14561 . -1) (undo-tree-id14562 . -1) (undo-tree-id14563 . -1) (undo-tree-id14564 . -1) (undo-tree-id14565 . -1) (undo-tree-id14566 . -1) (undo-tree-id14567 . -1) (undo-tree-id14568 . -1) (undo-tree-id14569 . -1) (undo-tree-id14570 . -2) (undo-tree-id14571 . -2) (undo-tree-id14572 . -2) (undo-tree-id14573 . -2) (undo-tree-id14574 . -2) (undo-tree-id14575 . -2) (undo-tree-id14576 . -2) (undo-tree-id14577 . -2) (undo-tree-id14578 . -2) (undo-tree-id14579 . -2) (undo-tree-id14580 . -2) (undo-tree-id14581 . -2) (undo-tree-id14582 . -2) (undo-tree-id14583 . -2) (undo-tree-id14584 . -2) (undo-tree-id14585 . -2) (undo-tree-id14586 . -2) (undo-tree-id14587 . -2) (undo-tree-id14588 . -2) (undo-tree-id14589 . -2) (undo-tree-id14590 . -2) (undo-tree-id14591 . -2) (undo-tree-id14592 . -2) (undo-tree-id14593 . -2) (undo-tree-id14594 . -2) (undo-tree-id14595 . -2) (undo-tree-id14596 . -2) (undo-tree-id14597 . -2) (undo-tree-id14598 . -2) (undo-tree-id14599 . -2) (undo-tree-id14600 . -2) (undo-tree-id14601 . -2) (undo-tree-id14602 . -2) (undo-tree-id14603 . -2) (undo-tree-id14604 . -2) (undo-tree-id14605 . -2) (undo-tree-id14606 . -2) (undo-tree-id14607 . -2) (undo-tree-id14608 . -2) (undo-tree-id14609 . -2) (undo-tree-id14610 . -2) (undo-tree-id14611 . -2) (undo-tree-id14612 . -2) (undo-tree-id14613 . -2) (undo-tree-id14614 . -2) (undo-tree-id14615 . -2) (undo-tree-id14616 . -2) (undo-tree-id14617 . -2) (undo-tree-id14618 . -2) (undo-tree-id14619 . -2) (undo-tree-id14620 . -2) (undo-tree-id14621 . -2) (undo-tree-id14622 . -2) (undo-tree-id14623 . -2) (undo-tree-id14624 . -2) (undo-tree-id14625 . -2) (undo-tree-id14626 . -2) (undo-tree-id14627 . -2) (undo-tree-id14628 . -2) (undo-tree-id14629 . -2) (undo-tree-id14630 . -2) (undo-tree-id14631 . -2) (undo-tree-id14632 . -2) (undo-tree-id14633 . -2) (undo-tree-id14634 . -2) (undo-tree-id14635 . -2) (undo-tree-id14636 . -2) (undo-tree-id14637 . -2) (undo-tree-id14638 . -2) (undo-tree-id14639 . -2) (undo-tree-id14640 . -2) (undo-tree-id14641 . -2) (undo-tree-id14642 . -2) (undo-tree-id14643 . -2) (undo-tree-id14644 . -3) (undo-tree-id14645 . -3) (undo-tree-id14646 . -3) (undo-tree-id14647 . -3) (undo-tree-id14648 . -3) (undo-tree-id14649 . -3) (undo-tree-id14650 . -3) (undo-tree-id14651 . -3) (undo-tree-id14652 . -3) (undo-tree-id14653 . -3) (undo-tree-id14654 . -3) (undo-tree-id14655 . -3) (undo-tree-id14656 . -3) (undo-tree-id14657 . -3) (undo-tree-id14658 . -3) (undo-tree-id14659 . -3) (undo-tree-id14660 . -3) (undo-tree-id14661 . -3) (undo-tree-id14662 . -3) (undo-tree-id14663 . -3) (undo-tree-id14664 . -3) (undo-tree-id14665 . -3) (undo-tree-id14666 . -3) (undo-tree-id14667 . -3) (undo-tree-id14668 . -3) (undo-tree-id14669 . -3) (undo-tree-id14670 . -3) (undo-tree-id14671 . -3) (undo-tree-id14672 . -3) (undo-tree-id14673 . -3) (undo-tree-id14674 . -3) 4473 (4472 . 4473)) nil (25772 50358 674764 504000) 0 nil])
([nil nil ((4474 . 4475) (#("  " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4474) (undo-tree-id14022 . -1) (undo-tree-id14023 . -1) (undo-tree-id14024 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4475) (undo-tree-id14025 . -1) (nil fontified nil 4472 . 4473) (nil line-prefix #("  " 0 2 (face org-indent)) 4472 . 4473) (nil wrap-prefix #("  " 0 2 (face org-indent)) 4472 . 4473) (4472 . 4473) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4472) (undo-tree-id14026 . -1) (undo-tree-id14027 . -1) (undo-tree-id14028 . -1) (undo-tree-id14029 . -1) (undo-tree-id14030 . -1) (undo-tree-id14031 . -1) (undo-tree-id14032 . -1) (undo-tree-id14033 . -1) (undo-tree-id14034 . -1) (undo-tree-id14035 . -1) (undo-tree-id14036 . -1) (undo-tree-id14037 . -1) (undo-tree-id14038 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4473) (undo-tree-id14039 . 1) (undo-tree-id14040 . -1) (undo-tree-id14041 . -1) (undo-tree-id14042 . -1) (undo-tree-id14043 . -1) (undo-tree-id14044 . -1) (undo-tree-id14045 . -1) (undo-tree-id14046 . -1) (undo-tree-id14047 . -1) (undo-tree-id14048 . -1) (undo-tree-id14049 . -1) (undo-tree-id14050 . -1) 4472) nil (25772 50358 673379 178000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4473) (undo-tree-id13995 . 1) (undo-tree-id13996 . -1) (undo-tree-id13997 . -1) (undo-tree-id13998 . -1) (undo-tree-id13999 . -1) (undo-tree-id14000 . -1) (undo-tree-id14001 . -1) (undo-tree-id14002 . -1) (undo-tree-id14003 . -1) (undo-tree-id14004 . -1) (undo-tree-id14005 . -1) (undo-tree-id14006 . -1) (undo-tree-id14007 . -1) (undo-tree-id14008 . -1) (undo-tree-id14009 . -1) (undo-tree-id14010 . -1) (undo-tree-id14011 . -1) (undo-tree-id14012 . -1) (undo-tree-id14013 . -1) (undo-tree-id14014 . -1) (undo-tree-id14015 . -1) (undo-tree-id14016 . -1) (undo-tree-id14017 . -1) (undo-tree-id14018 . -1) (undo-tree-id14019 . -1) (undo-tree-id14020 . -1) (undo-tree-id14021 . -1)) nil (25772 50358 673285 198000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4473) (undo-tree-id13992 . 1) (undo-tree-id13993 . -1) (undo-tree-id13994 . -1)) nil (25772 50358 673267 510000) 0 nil])
([nil nil ((4525 . 4526)) nil (25772 50358 673262 895000) 0 nil])
([nil nil ((4471 . 4678) (#("- This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. 
- In a simple RNN, this output is also the new state h_0." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 75 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 75 76 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 76 149 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 149 150 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 150 151 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 151 152 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 152 204 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 204 205 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 205 206 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 206 207 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4471) (undo-tree-id13481 . -152) (undo-tree-id13482 . -152) (undo-tree-id13483 . 2) (undo-tree-id13484 . -207) (undo-tree-id13485 . -151) (undo-tree-id13486 . -151) (undo-tree-id13487 . -151) (undo-tree-id13488 . -151) (undo-tree-id13489 . -151) (undo-tree-id13490 . -151) (undo-tree-id13491 . -151) (undo-tree-id13492 . -151) (undo-tree-id13493 . -151) (undo-tree-id13494 . -151) (undo-tree-id13495 . -152) (undo-tree-id13496 . -151) (undo-tree-id13497 . -151) (undo-tree-id13498 . -151) (undo-tree-id13499 . -151) (undo-tree-id13500 . -151) (undo-tree-id13501 . -151) (undo-tree-id13502 . -151) (undo-tree-id13503 . -151) (undo-tree-id13504 . -151) (undo-tree-id13505 . -151) (undo-tree-id13506 . -151) (undo-tree-id13507 . -151) (undo-tree-id13508 . -151) (undo-tree-id13509 . -151) (undo-tree-id13510 . -151) (undo-tree-id13511 . -151) (undo-tree-id13512 . -151) (undo-tree-id13513 . -151) (undo-tree-id13514 . -151) (undo-tree-id13515 . -151) (undo-tree-id13516 . -151) (undo-tree-id13517 . -151) (undo-tree-id13518 . -151) (undo-tree-id13519 . -151) (undo-tree-id13520 . -151) (undo-tree-id13521 . -151) (undo-tree-id13522 . -151) (undo-tree-id13523 . -151) (undo-tree-id13524 . -151) (undo-tree-id13525 . -152) (undo-tree-id13526 . -152) (undo-tree-id13527 . -152) (undo-tree-id13528 . -152) (undo-tree-id13529 . -152) (undo-tree-id13530 . -152) (undo-tree-id13531 . -152) (undo-tree-id13532 . -152) (undo-tree-id13533 . -152) (undo-tree-id13534 . -152) (undo-tree-id13535 . -152) (undo-tree-id13536 . -152) (undo-tree-id13537 . -152) (undo-tree-id13538 . -152) (undo-tree-id13539 . -152) (undo-tree-id13540 . -152) (undo-tree-id13541 . -152) (undo-tree-id13542 . -152) (undo-tree-id13543 . -152) (undo-tree-id13544 . -152) (undo-tree-id13545 . -152) (undo-tree-id13546 . -152) (undo-tree-id13547 . -152) (undo-tree-id13548 . -152) (undo-tree-id13549 . -152) (undo-tree-id13550 . -152) (undo-tree-id13551 . -152) (undo-tree-id13552 . -152) (undo-tree-id13553 . -152) (undo-tree-id13554 . -152) (undo-tree-id13555 . -152) (undo-tree-id13556 . -152) (undo-tree-id13557 . -152) (undo-tree-id13558 . -152) (undo-tree-id13559 . -152) (undo-tree-id13560 . -152) (undo-tree-id13561 . -152) (undo-tree-id13562 . -152) (undo-tree-id13563 . -152) (undo-tree-id13564 . -152) (undo-tree-id13565 . -152) (undo-tree-id13566 . -152) (undo-tree-id13567 . -152) (undo-tree-id13568 . -152) (undo-tree-id13569 . -152) (undo-tree-id13570 . -152) (undo-tree-id13571 . -152) (undo-tree-id13572 . -152) (undo-tree-id13573 . -152) (undo-tree-id13574 . -152) (undo-tree-id13575 . -152) (undo-tree-id13576 . -152) (undo-tree-id13577 . -152) (undo-tree-id13578 . -152) (undo-tree-id13579 . -152) (undo-tree-id13580 . -152) (undo-tree-id13581 . -152) (undo-tree-id13582 . -152) (undo-tree-id13583 . -152) (undo-tree-id13584 . -152) (undo-tree-id13585 . -152) (undo-tree-id13586 . -152) (undo-tree-id13587 . -152) (undo-tree-id13588 . -152) (undo-tree-id13589 . -152) (undo-tree-id13590 . -152) (undo-tree-id13591 . -152) (undo-tree-id13592 . -152) (undo-tree-id13593 . -152) (undo-tree-id13594 . -152) (undo-tree-id13595 . -152) (undo-tree-id13596 . -152) (undo-tree-id13597 . -152) (undo-tree-id13598 . -152) (undo-tree-id13599 . -152) (undo-tree-id13600 . -152) (undo-tree-id13601 . -152) (undo-tree-id13602 . -152) (undo-tree-id13603 . -152) (undo-tree-id13604 . -152) (undo-tree-id13605 . -152) (undo-tree-id13606 . -152) (undo-tree-id13607 . -152) (undo-tree-id13608 . -152) (undo-tree-id13609 . -152) (undo-tree-id13610 . -152) (undo-tree-id13611 . -152) (undo-tree-id13612 . -152) (undo-tree-id13613 . -152) (undo-tree-id13614 . -152) (undo-tree-id13615 . -152) (undo-tree-id13616 . -153) (undo-tree-id13617 . -153) (undo-tree-id13618 . -153) (undo-tree-id13619 . -153) (undo-tree-id13620 . -153) (undo-tree-id13621 . -153) (undo-tree-id13622 . -153) (undo-tree-id13623 . -153) (undo-tree-id13624 . -153) (undo-tree-id13625 . -153) (undo-tree-id13626 . -153) (undo-tree-id13627 . -153) (undo-tree-id13628 . -153) (undo-tree-id13629 . -153) (undo-tree-id13630 . -153) (undo-tree-id13631 . -153) (undo-tree-id13632 . -153) (undo-tree-id13633 . -153) (undo-tree-id13634 . -153) (undo-tree-id13635 . -153) (undo-tree-id13636 . -153) (undo-tree-id13637 . -153) (undo-tree-id13638 . -154) (undo-tree-id13639 . -154) (undo-tree-id13640 . -154) (undo-tree-id13641 . -154) (undo-tree-id13642 . -154) (undo-tree-id13643 . -154) (undo-tree-id13644 . -154) (undo-tree-id13645 . -154) (undo-tree-id13646 . -154) (undo-tree-id13647 . -154) (undo-tree-id13648 . -154) (undo-tree-id13649 . -154) (undo-tree-id13650 . -154) (undo-tree-id13651 . -154) (undo-tree-id13652 . -154) (undo-tree-id13653 . -155) (undo-tree-id13654 . -155) (undo-tree-id13655 . -155) (undo-tree-id13656 . -155) (undo-tree-id13657 . -155) (undo-tree-id13658 . -155) (undo-tree-id13659 . -155) (undo-tree-id13660 . -155) (undo-tree-id13661 . -155) (undo-tree-id13662 . -155) (undo-tree-id13663 . -155) (undo-tree-id13664 . -155) (undo-tree-id13665 . -155) (undo-tree-id13666 . -155) (undo-tree-id13667 . -155) (undo-tree-id13668 . -155) (undo-tree-id13669 . -155) (undo-tree-id13670 . -155) (undo-tree-id13671 . -155) (undo-tree-id13672 . -155) (undo-tree-id13673 . -155) (undo-tree-id13674 . -155) (undo-tree-id13675 . -162) (undo-tree-id13676 . -162) (undo-tree-id13677 . -162) (undo-tree-id13678 . -162) (undo-tree-id13679 . -162) (undo-tree-id13680 . -162) (undo-tree-id13681 . -162) (undo-tree-id13682 . -162) (undo-tree-id13683 . -162) (undo-tree-id13684 . -162) (undo-tree-id13685 . -162) (undo-tree-id13686 . -162) (undo-tree-id13687 . -162) (undo-tree-id13688 . -162) (undo-tree-id13689 . -162) (undo-tree-id13690 . -162) (undo-tree-id13691 . -162) (undo-tree-id13692 . -162) (undo-tree-id13693 . -162) (undo-tree-id13694 . -162) (undo-tree-id13695 . -162) (undo-tree-id13696 . -162) (undo-tree-id13697 . 43) (undo-tree-id13698 . -167) (undo-tree-id13699 . -166) (undo-tree-id13700 . -166) (undo-tree-id13701 . -166) (undo-tree-id13702 . -166) (undo-tree-id13703 . -166) (undo-tree-id13704 . -166) (undo-tree-id13705 . -166) (undo-tree-id13706 . -166) (undo-tree-id13707 . -167) (undo-tree-id13708 . -167) (undo-tree-id13709 . -167) (undo-tree-id13710 . -167) (undo-tree-id13711 . -167) (undo-tree-id13712 . -167) (undo-tree-id13713 . -167) (undo-tree-id13714 . -167) (undo-tree-id13715 . -172) (undo-tree-id13716 . -172) (undo-tree-id13717 . -172) (undo-tree-id13718 . -172) (undo-tree-id13719 . -172) (undo-tree-id13720 . -172) (undo-tree-id13721 . -172) (undo-tree-id13722 . -172) (undo-tree-id13723 . -179) (undo-tree-id13724 . -179) (undo-tree-id13725 . -179) (undo-tree-id13726 . -179) (undo-tree-id13727 . -179) (undo-tree-id13728 . -179) (undo-tree-id13729 . -179) (undo-tree-id13730 . -179) (undo-tree-id13731 . -182) (undo-tree-id13732 . -182) (undo-tree-id13733 . -182) (undo-tree-id13734 . -182) (undo-tree-id13735 . -182) (undo-tree-id13736 . -182) (undo-tree-id13737 . -182) (undo-tree-id13738 . -182) (undo-tree-id13739 . -187) (undo-tree-id13740 . -187) (undo-tree-id13741 . -187) (undo-tree-id13742 . -187) (undo-tree-id13743 . -187) (undo-tree-id13744 . -187) (undo-tree-id13745 . -187) (undo-tree-id13746 . -187) (undo-tree-id13747 . -191) (undo-tree-id13748 . -191) (undo-tree-id13749 . -191) (undo-tree-id13750 . -191) (undo-tree-id13751 . -191) (undo-tree-id13752 . -191) (undo-tree-id13753 . -191) (undo-tree-id13754 . -191) (undo-tree-id13755 . -195) (undo-tree-id13756 . -195) (undo-tree-id13757 . -195) (undo-tree-id13758 . -195) (undo-tree-id13759 . -195) (undo-tree-id13760 . -195) (undo-tree-id13761 . -195) (undo-tree-id13762 . -195) (undo-tree-id13763 . -201) (undo-tree-id13764 . -201) (undo-tree-id13765 . -201) (undo-tree-id13766 . -201) (undo-tree-id13767 . -201) (undo-tree-id13768 . -201) (undo-tree-id13769 . -201) (undo-tree-id13770 . -201) (undo-tree-id13771 . -201) (undo-tree-id13772 . -201) (undo-tree-id13773 . -201) (undo-tree-id13774 . -201) (undo-tree-id13775 . -201) (undo-tree-id13776 . -201) (undo-tree-id13777 . -201) (undo-tree-id13778 . -204) (undo-tree-id13779 . -204) (undo-tree-id13780 . -204) (undo-tree-id13781 . -204) (undo-tree-id13782 . -204) (undo-tree-id13783 . -204) (undo-tree-id13784 . -204) (undo-tree-id13785 . -204) (undo-tree-id13786 . -204) (undo-tree-id13787 . -204) (undo-tree-id13788 . -204) (undo-tree-id13789 . -204) (undo-tree-id13790 . -204) (undo-tree-id13791 . -204) (undo-tree-id13792 . -204) (undo-tree-id13793 . -204) (undo-tree-id13794 . -204) (undo-tree-id13795 . -204) (undo-tree-id13796 . -204) (undo-tree-id13797 . -204) (undo-tree-id13798 . -204) (undo-tree-id13799 . -204) (undo-tree-id13800 . -204) (undo-tree-id13801 . -204) (undo-tree-id13802 . -204) (undo-tree-id13803 . -204) (undo-tree-id13804 . -204) (undo-tree-id13805 . -204) (undo-tree-id13806 . -204) (undo-tree-id13807 . -204) (undo-tree-id13808 . -204) (undo-tree-id13809 . -204) (undo-tree-id13810 . -205) (undo-tree-id13811 . -205) (undo-tree-id13812 . -205) (undo-tree-id13813 . -205) (undo-tree-id13814 . -205) (undo-tree-id13815 . -205) (undo-tree-id13816 . -205) (undo-tree-id13817 . -205) (undo-tree-id13818 . -205) (undo-tree-id13819 . -205) (undo-tree-id13820 . -205) (undo-tree-id13821 . -205) (undo-tree-id13822 . -205) (undo-tree-id13823 . -205) (undo-tree-id13824 . -205) (undo-tree-id13825 . -205) (undo-tree-id13826 . -205) (undo-tree-id13827 . -205) (undo-tree-id13828 . -205) (undo-tree-id13829 . -205) (undo-tree-id13830 . -205) (undo-tree-id13831 . -205) (undo-tree-id13832 . -205) (undo-tree-id13833 . -204) (undo-tree-id13834 . -204) (undo-tree-id13835 . -204) (undo-tree-id13836 . -204) (undo-tree-id13837 . -204) (undo-tree-id13838 . -204) (undo-tree-id13839 . -204) (undo-tree-id13840 . -204) (undo-tree-id13841 . -204) (undo-tree-id13842 . -203) (undo-tree-id13843 . -203) (undo-tree-id13844 . -203) (undo-tree-id13845 . -203) (undo-tree-id13846 . -203) (undo-tree-id13847 . -203) (undo-tree-id13848 . -203) (undo-tree-id13849 . -203) (undo-tree-id13850 . -203) (undo-tree-id13851 . -203) (undo-tree-id13852 . -203) (undo-tree-id13853 . -203) (undo-tree-id13854 . -203) (undo-tree-id13855 . -203) (undo-tree-id13856 . -203) (undo-tree-id13857 . -203) (undo-tree-id13858 . -203) (undo-tree-id13859 . -204) (undo-tree-id13860 . -204) (undo-tree-id13861 . -204) (undo-tree-id13862 . -204) (undo-tree-id13863 . -204) (undo-tree-id13864 . -204) (undo-tree-id13865 . -204) (undo-tree-id13866 . -204) (undo-tree-id13867 . -204) (undo-tree-id13868 . -204) (undo-tree-id13869 . -204) (undo-tree-id13870 . -204) (undo-tree-id13871 . -204) (undo-tree-id13872 . -204) (undo-tree-id13873 . -204) (undo-tree-id13874 . -206) (undo-tree-id13875 . -206) (undo-tree-id13876 . -206) (undo-tree-id13877 . -206) (undo-tree-id13878 . -206) (undo-tree-id13879 . -206) (undo-tree-id13880 . -206) (undo-tree-id13881 . -206) (undo-tree-id13882 . -206) (undo-tree-id13883 . -206) (undo-tree-id13884 . -206) (undo-tree-id13885 . -206) (undo-tree-id13886 . -206) (undo-tree-id13887 . -206) (undo-tree-id13888 . -206) (undo-tree-id13889 . -206) (undo-tree-id13890 . -206) (undo-tree-id13891 . -206) (undo-tree-id13892 . -206) (undo-tree-id13893 . -206) (undo-tree-id13894 . -206) (undo-tree-id13895 . -206) (undo-tree-id13896 . -207) (undo-tree-id13897 . -207) (undo-tree-id13898 . -207) (undo-tree-id13899 . -207) (undo-tree-id13900 . -207) (undo-tree-id13901 . -207) (undo-tree-id13902 . -207) (undo-tree-id13903 . -207) (undo-tree-id13904 . -207) (undo-tree-id13905 . -207) (undo-tree-id13906 . -207) (undo-tree-id13907 . -207) (undo-tree-id13908 . -207) (undo-tree-id13909 . -207) (undo-tree-id13910 . -207) (undo-tree-id13911 . -207) (undo-tree-id13912 . -207) (undo-tree-id13913 . -207) (undo-tree-id13914 . -207) (undo-tree-id13915 . -207) (undo-tree-id13916 . -207) (undo-tree-id13917 . -207) (undo-tree-id13918 . -207) (undo-tree-id13919 . -207) (undo-tree-id13920 . -207) (undo-tree-id13921 . -207) (undo-tree-id13922 . -207) (undo-tree-id13923 . -207) (undo-tree-id13924 . -207) (undo-tree-id13925 . -207) (undo-tree-id13926 . -207) (undo-tree-id13927 . -207) (undo-tree-id13928 . -207) (undo-tree-id13929 . -207) (undo-tree-id13930 . -207) (undo-tree-id13931 . -207) (undo-tree-id13932 . -207) (undo-tree-id13933 . -207) (undo-tree-id13934 . -207) (undo-tree-id13935 . -207) (undo-tree-id13936 . -207) (undo-tree-id13937 . -207) (undo-tree-id13938 . -207) (undo-tree-id13939 . -207) (undo-tree-id13940 . -207) (undo-tree-id13941 . -207) (undo-tree-id13942 . -207) (undo-tree-id13943 . -150) (4471 . 4621) (#(" This new state is passed to the same recurrent neuron along with the next input value, x(1), and the process is repeated until the last time step. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 75 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4528) (undo-tree-id13944 . -1) (undo-tree-id13945 . -1) (undo-tree-id13946 . -1) (undo-tree-id13947 . -1) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) (undo-tree-id13952 . -1) (undo-tree-id13953 . -1) (undo-tree-id13954 . -1) (undo-tree-id13955 . -1) (undo-tree-id13956 . -1) (undo-tree-id13957 . -1) (undo-tree-id13958 . -1) (undo-tree-id13959 . -1) (undo-tree-id13960 . -1) (undo-tree-id13961 . -1) (undo-tree-id13962 . -1) (undo-tree-id13963 . -1) (undo-tree-id13964 . -1) (undo-tree-id13965 . -1) (undo-tree-id13966 . -1) (undo-tree-id13967 . -1) (undo-tree-id13968 . -1) (undo-tree-id13969 . -1) (undo-tree-id13970 . -1) (undo-tree-id13971 . -1) (undo-tree-id13972 . -1) (undo-tree-id13973 . -1) (undo-tree-id13974 . -1) (undo-tree-id13975 . -1) (undo-tree-id13976 . -1) (undo-tree-id13977 . -1) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1) (undo-tree-id13982 . -1) (undo-tree-id13983 . -1) (undo-tree-id13984 . -1) (undo-tree-id13985 . -1) (undo-tree-id13986 . -1) (undo-tree-id13987 . -1) (undo-tree-id13988 . -1) (undo-tree-id13989 . -1) (undo-tree-id13990 . -1) (undo-tree-id13991 . -1) 4529) nil (25772 50358 673205 67000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4533 . 4534) (nil fontified nil 4531 . 4534) (4531 . 4534) (#("This new state" 0 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4531) (undo-tree-id15881 . -13) (undo-tree-id15882 . 14) (undo-tree-id15883 . -14) (undo-tree-id15884 . -13) (undo-tree-id15885 . -13) (undo-tree-id15886 . -5) (undo-tree-id15887 . -5) (undo-tree-id15888 . -5) (undo-tree-id15889 . -5) (undo-tree-id15890 . -5) (undo-tree-id15891 . -5) (undo-tree-id15892 . -5) (undo-tree-id15893 . -5) (undo-tree-id15894 . -5) (undo-tree-id15895 . -5) (undo-tree-id15896 . -5) (undo-tree-id15897 . -5) (undo-tree-id15898 . -5) (undo-tree-id15899 . -5) (undo-tree-id15900 . -5) (undo-tree-id15901 . -5) (undo-tree-id15902 . -5) (undo-tree-id15903 . -5) (undo-tree-id15904 . -5) (undo-tree-id15905 . -5) (undo-tree-id15906 . -5) (undo-tree-id15907 . -5) (undo-tree-id15908 . -14) (undo-tree-id15909 . -13) (undo-tree-id15910 . -3) (undo-tree-id15911 . -3) (undo-tree-id15912 . -3) (undo-tree-id15913 . -3) (undo-tree-id15914 . -3) (undo-tree-id15915 . -3) (undo-tree-id15916 . -3) (undo-tree-id15917 . -3) (undo-tree-id15918 . -3) (undo-tree-id15919 . -3) (undo-tree-id15920 . -3) (undo-tree-id15921 . -3) (undo-tree-id15922 . -3) (undo-tree-id15923 . -3) (undo-tree-id15924 . -3) (undo-tree-id15925 . -3) (undo-tree-id15926 . -3) (undo-tree-id15927 . -3) (undo-tree-id15928 . -3) (undo-tree-id15929 . -3) (undo-tree-id15930 . -3) (undo-tree-id15931 . -3) (undo-tree-id15932 . -7) (undo-tree-id15933 . -7) (undo-tree-id15934 . -7) (undo-tree-id15935 . -7) (undo-tree-id15936 . -7) (undo-tree-id15937 . -7) (undo-tree-id15938 . -7) (undo-tree-id15939 . -7) (undo-tree-id15940 . -7) (undo-tree-id15941 . -7) (undo-tree-id15942 . -7) (undo-tree-id15943 . -7) (undo-tree-id15944 . -7) (undo-tree-id15945 . -7) (undo-tree-id15946 . -7) (undo-tree-id15947 . -7) (undo-tree-id15948 . -7) (undo-tree-id15949 . -7) (undo-tree-id15950 . -7) (undo-tree-id15951 . -7) (undo-tree-id15952 . -7) (undo-tree-id15953 . -7) (undo-tree-id15954 . -13) (undo-tree-id15955 . -13) (undo-tree-id15956 . -13) (undo-tree-id15957 . -13) (undo-tree-id15958 . -13) (undo-tree-id15959 . -13) (undo-tree-id15960 . -13) (undo-tree-id15961 . -13) (undo-tree-id15962 . -13) (undo-tree-id15963 . -13) (undo-tree-id15964 . -13) (undo-tree-id15965 . -13) (undo-tree-id15966 . -13) (undo-tree-id15967 . -13) (undo-tree-id15968 . -13) (undo-tree-id15969 . -13) (undo-tree-id15970 . -13) (undo-tree-id15971 . -13) (undo-tree-id15972 . -13) (undo-tree-id15973 . -13) (undo-tree-id15974 . -13) (undo-tree-id15975 . -13) (undo-tree-id15976 . -13) (undo-tree-id15977 . -13) (undo-tree-id15978 . -13) (undo-tree-id15979 . -13) (undo-tree-id15980 . -13) (undo-tree-id15981 . -13) (undo-tree-id15982 . -14) (undo-tree-id15983 . -14) (undo-tree-id15984 . -14) 4545 (t 25772 50358 727395 937000)) nil (25772 50407 472092 629000) 0 nil])
([nil nil ((#("recurrent " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4557) (undo-tree-id15835 . -9) (undo-tree-id15836 . -10) (undo-tree-id15837 . -10) (undo-tree-id15838 . -10) (undo-tree-id15839 . -10) (undo-tree-id15840 . -10) (undo-tree-id15841 . -10) (undo-tree-id15842 . -10) (undo-tree-id15843 . -10) (undo-tree-id15844 . -10) (undo-tree-id15845 . -10) (undo-tree-id15846 . -10) (undo-tree-id15847 . -10) (undo-tree-id15848 . -10) (undo-tree-id15849 . -10) (undo-tree-id15850 . -10) (undo-tree-id15851 . -10) (undo-tree-id15852 . -10) (undo-tree-id15853 . -10) (undo-tree-id15854 . -10) (undo-tree-id15855 . -10) (undo-tree-id15856 . -10) (undo-tree-id15857 . -10) (undo-tree-id15858 . -10) (undo-tree-id15859 . -10) (undo-tree-id15860 . -10) (undo-tree-id15861 . -10) (undo-tree-id15862 . -10) (undo-tree-id15863 . -10) (undo-tree-id15864 . -10) (undo-tree-id15865 . -10) (undo-tree-id15866 . -10) (undo-tree-id15867 . -10) (undo-tree-id15868 . -10) (undo-tree-id15869 . -10) (undo-tree-id15870 . -10) (undo-tree-id15871 . -10) (undo-tree-id15872 . -10) (undo-tree-id15873 . -10) (undo-tree-id15874 . -10) (undo-tree-id15875 . -10) (undo-tree-id15876 . -10) (undo-tree-id15877 . -10) (undo-tree-id15878 . -10) (undo-tree-id15879 . -10) (undo-tree-id15880 . -10)) nil (25772 50407 472025 561000) 0 nil])
([nil nil ((#("the next input value," 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 9 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4575) (undo-tree-id15704 . -20) (undo-tree-id15705 . -20) (undo-tree-id15706 . -20) (undo-tree-id15707 . -21) (undo-tree-id15708 . -20) (undo-tree-id15709 . -2) (undo-tree-id15710 . -2) (undo-tree-id15711 . -2) (undo-tree-id15712 . -2) (undo-tree-id15713 . -2) (undo-tree-id15714 . -2) (undo-tree-id15715 . -2) (undo-tree-id15716 . -2) (undo-tree-id15717 . -2) (undo-tree-id15718 . -2) (undo-tree-id15719 . -2) (undo-tree-id15720 . -2) (undo-tree-id15721 . -2) (undo-tree-id15722 . -2) (undo-tree-id15723 . -2) (undo-tree-id15724 . -2) (undo-tree-id15725 . -2) (undo-tree-id15726 . -2) (undo-tree-id15727 . -2) (undo-tree-id15728 . -2) (undo-tree-id15729 . -2) (undo-tree-id15730 . -2) (undo-tree-id15731 . -7) (undo-tree-id15732 . -7) (undo-tree-id15733 . -7) (undo-tree-id15734 . -7) (undo-tree-id15735 . -7) (undo-tree-id15736 . -7) (undo-tree-id15737 . -7) (undo-tree-id15738 . -7) (undo-tree-id15739 . -7) (undo-tree-id15740 . -7) (undo-tree-id15741 . -7) (undo-tree-id15742 . -7) (undo-tree-id15743 . -7) (undo-tree-id15744 . -7) (undo-tree-id15745 . -7) (undo-tree-id15746 . -7) (undo-tree-id15747 . -7) (undo-tree-id15748 . -7) (undo-tree-id15749 . -7) (undo-tree-id15750 . -7) (undo-tree-id15751 . -7) (undo-tree-id15752 . -7) (undo-tree-id15753 . -13) (undo-tree-id15754 . -13) (undo-tree-id15755 . -13) (undo-tree-id15756 . -13) (undo-tree-id15757 . -13) (undo-tree-id15758 . -13) (undo-tree-id15759 . -13) (undo-tree-id15760 . -13) (undo-tree-id15761 . -13) (undo-tree-id15762 . -13) (undo-tree-id15763 . -13) (undo-tree-id15764 . -13) (undo-tree-id15765 . -13) (undo-tree-id15766 . -13) (undo-tree-id15767 . -13) (undo-tree-id15768 . -13) (undo-tree-id15769 . -13) (undo-tree-id15770 . -13) (undo-tree-id15771 . -13) (undo-tree-id15772 . -13) (undo-tree-id15773 . -13) (undo-tree-id15774 . -13) (undo-tree-id15775 . -19) (undo-tree-id15776 . -19) (undo-tree-id15777 . -19) (undo-tree-id15778 . -19) (undo-tree-id15779 . -19) (undo-tree-id15780 . -19) (undo-tree-id15781 . -19) (undo-tree-id15782 . -19) (undo-tree-id15783 . -19) (undo-tree-id15784 . -19) (undo-tree-id15785 . -19) (undo-tree-id15786 . -19) (undo-tree-id15787 . -19) (undo-tree-id15788 . -19) (undo-tree-id15789 . -19) (undo-tree-id15790 . -19) (undo-tree-id15791 . -19) (undo-tree-id15792 . -19) (undo-tree-id15793 . -19) (undo-tree-id15794 . -19) (undo-tree-id15795 . -19) (undo-tree-id15796 . -19) (undo-tree-id15797 . -19) (undo-tree-id15798 . -19) (undo-tree-id15799 . -19) (undo-tree-id15800 . -19) (undo-tree-id15801 . -19) (undo-tree-id15802 . -19) (undo-tree-id15803 . -19) (undo-tree-id15804 . -19) (undo-tree-id15805 . -19) (undo-tree-id15806 . -19) (undo-tree-id15807 . -19) (undo-tree-id15808 . -19) (undo-tree-id15809 . -19) (undo-tree-id15810 . -19) (undo-tree-id15811 . -20) (undo-tree-id15812 . -20) (undo-tree-id15813 . -20) (undo-tree-id15814 . -20) (undo-tree-id15815 . -20) (undo-tree-id15816 . -20) (undo-tree-id15817 . -20) (undo-tree-id15818 . -20) (undo-tree-id15819 . -20) (undo-tree-id15820 . -20) (undo-tree-id15821 . -20) (undo-tree-id15822 . -20) (undo-tree-id15823 . -20) (undo-tree-id15824 . -20) (undo-tree-id15825 . -20) (undo-tree-id15826 . -20) (undo-tree-id15827 . -20) (undo-tree-id15828 . -20) (undo-tree-id15829 . -20) (undo-tree-id15830 . -20) (undo-tree-id15831 . -20) (undo-tree-id15832 . -20) (undo-tree-id15833 . -20) (undo-tree-id15834 . -21) 4595) nil (25772 50407 471995 862000) 0 nil])
([nil nil ((4577 . 4578)) nil (25772 50407 471916 446000) 0 nil])
([nil nil ((4529 . 4638) (#("- and the process is repeated until the last time step. 
- h_0 is passed to the same neuron along with  x_(1)" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 56 57 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 57 58 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 58 59 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 61 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky t display ((raise -0.3) (height 0.7))) 62 103 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 103 105 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 105 106 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 106 109 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7)))) . 4529) (undo-tree-id14767 . -109) (undo-tree-id14768 . -109) (undo-tree-id14769 . 3) (undo-tree-id14770 . -103) (undo-tree-id14771 . -103) (undo-tree-id14772 . 6) (undo-tree-id14773 . -59) (undo-tree-id14774 . -59) (undo-tree-id14775 . -58) (undo-tree-id14776 . -109) (undo-tree-id14777 . -58) (undo-tree-id14778 . -58) (undo-tree-id14779 . -58) (undo-tree-id14780 . -58) (undo-tree-id14781 . -58) (undo-tree-id14782 . -58) (undo-tree-id14783 . -58) (undo-tree-id14784 . -58) (undo-tree-id14785 . -58) (undo-tree-id14786 . -58) (undo-tree-id14787 . -58) (undo-tree-id14788 . -58) (undo-tree-id14789 . -58) (undo-tree-id14790 . -58) (undo-tree-id14791 . -58) (undo-tree-id14792 . -58) (undo-tree-id14793 . -58) (undo-tree-id14794 . -58) (undo-tree-id14795 . -58) (undo-tree-id14796 . -58) (undo-tree-id14797 . -58) (undo-tree-id14798 . -58) (undo-tree-id14799 . -58) (undo-tree-id14800 . -58) (undo-tree-id14801 . -58) (undo-tree-id14802 . -58) (undo-tree-id14803 . -58) (undo-tree-id14804 . -58) (undo-tree-id14805 . -58) (undo-tree-id14806 . -58) (undo-tree-id14807 . -58) (undo-tree-id14808 . -58) (undo-tree-id14809 . -58) (undo-tree-id14810 . -58) (undo-tree-id14811 . -58) (undo-tree-id14812 . -58) (undo-tree-id14813 . -58) (undo-tree-id14814 . -58) (undo-tree-id14815 . -58) (undo-tree-id14816 . -58) (undo-tree-id14817 . -58) (undo-tree-id14818 . -58) (undo-tree-id14819 . -58) (undo-tree-id14820 . -58) (undo-tree-id14821 . -58) (undo-tree-id14822 . -58) (undo-tree-id14823 . -58) (undo-tree-id14824 . -58) (undo-tree-id14825 . -58) (undo-tree-id14826 . -58) (undo-tree-id14827 . -58) (undo-tree-id14828 . -58) (undo-tree-id14829 . -58) (undo-tree-id14830 . -59) (undo-tree-id14831 . -59) (undo-tree-id14832 . -59) (undo-tree-id14833 . -59) (undo-tree-id14834 . -59) (undo-tree-id14835 . -59) (undo-tree-id14836 . -59) (undo-tree-id14837 . -59) (undo-tree-id14838 . -59) (undo-tree-id14839 . -59) (undo-tree-id14840 . -59) (undo-tree-id14841 . -59) (undo-tree-id14842 . -59) (undo-tree-id14843 . -59) (undo-tree-id14844 . -59) (undo-tree-id14845 . -59) (undo-tree-id14846 . -59) (undo-tree-id14847 . -59) (undo-tree-id14848 . -59) (undo-tree-id14849 . -59) (undo-tree-id14850 . -59) (undo-tree-id14851 . -59) (undo-tree-id14852 . -59) (undo-tree-id14853 . -59) (undo-tree-id14854 . -59) (undo-tree-id14855 . -59) (undo-tree-id14856 . -59) (undo-tree-id14857 . -59) (undo-tree-id14858 . -59) (undo-tree-id14859 . -59) (undo-tree-id14860 . -59) (undo-tree-id14861 . -59) (undo-tree-id14862 . -59) (undo-tree-id14863 . -59) (undo-tree-id14864 . -59) (undo-tree-id14865 . -59) (undo-tree-id14866 . -59) (undo-tree-id14867 . -59) (undo-tree-id14868 . -59) (undo-tree-id14869 . -59) (undo-tree-id14870 . -59) (undo-tree-id14871 . -59) (undo-tree-id14872 . -59) (undo-tree-id14873 . -59) (undo-tree-id14874 . -59) (undo-tree-id14875 . -59) (undo-tree-id14876 . -59) (undo-tree-id14877 . -59) (undo-tree-id14878 . -59) (undo-tree-id14879 . -59) (undo-tree-id14880 . -59) (undo-tree-id14881 . -59) (undo-tree-id14882 . -59) (undo-tree-id14883 . -59) (undo-tree-id14884 . -59) (undo-tree-id14885 . -59) (undo-tree-id14886 . -59) (undo-tree-id14887 . -59) (undo-tree-id14888 . -59) (undo-tree-id14889 . -59) (undo-tree-id14890 . -59) (undo-tree-id14891 . -59) (undo-tree-id14892 . -59) (undo-tree-id14893 . -59) (undo-tree-id14894 . -59) (undo-tree-id14895 . -59) (undo-tree-id14896 . -59) (undo-tree-id14897 . -59) (undo-tree-id14898 . -59) (undo-tree-id14899 . -59) (undo-tree-id14900 . -59) (undo-tree-id14901 . -59) (undo-tree-id14902 . -59) (undo-tree-id14903 . -59) (undo-tree-id14904 . -59) (undo-tree-id14905 . -59) (undo-tree-id14906 . -59) (undo-tree-id14907 . -59) (undo-tree-id14908 . -59) (undo-tree-id14909 . -59) (undo-tree-id14910 . -59) (undo-tree-id14911 . -59) (undo-tree-id14912 . -59) (undo-tree-id14913 . -59) (undo-tree-id14914 . -59) (undo-tree-id14915 . -59) (undo-tree-id14916 . -59) (undo-tree-id14917 . -59) (undo-tree-id14918 . -59) (undo-tree-id14919 . -59) (undo-tree-id14920 . -59) (undo-tree-id14921 . -59) (undo-tree-id14922 . -59) (undo-tree-id14923 . -59) (undo-tree-id14924 . -59) (undo-tree-id14925 . -59) (undo-tree-id14926 . -59) (undo-tree-id14927 . -59) (undo-tree-id14928 . -59) (undo-tree-id14929 . -59) (undo-tree-id14930 . -59) (undo-tree-id14931 . -59) (undo-tree-id14932 . -59) (undo-tree-id14933 . -59) (undo-tree-id14934 . -59) (undo-tree-id14935 . -59) (undo-tree-id14936 . -59) (undo-tree-id14937 . -59) (undo-tree-id14938 . -59) (undo-tree-id14939 . -59) (undo-tree-id14940 . -59) (undo-tree-id14941 . -59) (undo-tree-id14942 . -59) (undo-tree-id14943 . -59) (undo-tree-id14944 . -59) (undo-tree-id14945 . -59) (undo-tree-id14946 . -59) (undo-tree-id14947 . -59) (undo-tree-id14948 . -59) (undo-tree-id14949 . -59) (undo-tree-id14950 . -59) (undo-tree-id14951 . -59) (undo-tree-id14952 . -59) (undo-tree-id14953 . -59) (undo-tree-id14954 . -59) (undo-tree-id14955 . -59) (undo-tree-id14956 . -59) (undo-tree-id14957 . -59) (undo-tree-id14958 . -59) (undo-tree-id14959 . -59) (undo-tree-id14960 . -59) (undo-tree-id14961 . -59) (undo-tree-id14962 . -59) (undo-tree-id14963 . -59) (undo-tree-id14964 . -59) (undo-tree-id14965 . -59) (undo-tree-id14966 . -59) (undo-tree-id14967 . -59) (undo-tree-id14968 . -59) (undo-tree-id14969 . -59) (undo-tree-id14970 . -59) (undo-tree-id14971 . -59) (undo-tree-id14972 . -59) (undo-tree-id14973 . -59) (undo-tree-id14974 . -59) (undo-tree-id14975 . -59) (undo-tree-id14976 . -59) (undo-tree-id14977 . -59) (undo-tree-id14978 . -59) (undo-tree-id14979 . -59) (undo-tree-id14980 . -59) (undo-tree-id14981 . -59) (undo-tree-id14982 . -59) (undo-tree-id14983 . -59) (undo-tree-id14984 . -59) (undo-tree-id14985 . -59) (undo-tree-id14986 . -59) (undo-tree-id14987 . -59) (undo-tree-id14988 . -59) (undo-tree-id14989 . -59) (undo-tree-id14990 . -59) (undo-tree-id14991 . -59) (undo-tree-id14992 . -59) (undo-tree-id14993 . -59) (undo-tree-id14994 . -59) (undo-tree-id14995 . -59) (undo-tree-id14996 . -59) (undo-tree-id14997 . -59) (undo-tree-id14998 . -59) (undo-tree-id14999 . -59) (undo-tree-id15000 . -59) (undo-tree-id15001 . -59) (undo-tree-id15002 . -59) (undo-tree-id15003 . -59) (undo-tree-id15004 . -59) (undo-tree-id15005 . -59) (undo-tree-id15006 . -59) (undo-tree-id15007 . -59) (undo-tree-id15008 . -59) (undo-tree-id15009 . -59) (undo-tree-id15010 . -59) (undo-tree-id15011 . -59) (undo-tree-id15012 . -59) (undo-tree-id15013 . -59) (undo-tree-id15014 . -59) (undo-tree-id15015 . -59) (undo-tree-id15016 . -59) (undo-tree-id15017 . -61) (undo-tree-id15018 . -61) (undo-tree-id15019 . -61) (undo-tree-id15020 . -61) (undo-tree-id15021 . -61) (undo-tree-id15022 . -61) (undo-tree-id15023 . -61) (undo-tree-id15024 . -61) (undo-tree-id15025 . -61) (undo-tree-id15026 . -61) (undo-tree-id15027 . -61) (undo-tree-id15028 . -61) (undo-tree-id15029 . -61) (undo-tree-id15030 . -61) (undo-tree-id15031 . -61) (undo-tree-id15032 . -61) (undo-tree-id15033 . -61) (undo-tree-id15034 . -61) (undo-tree-id15035 . -61) (undo-tree-id15036 . -61) (undo-tree-id15037 . -61) (undo-tree-id15038 . -61) (undo-tree-id15039 . -61) (undo-tree-id15040 . -61) (undo-tree-id15041 . -63) (undo-tree-id15042 . -63) (undo-tree-id15043 . -63) (undo-tree-id15044 . -63) (undo-tree-id15045 . -63) (undo-tree-id15046 . -63) (undo-tree-id15047 . -63) (undo-tree-id15048 . -63) (undo-tree-id15049 . -63) (undo-tree-id15050 . -63) (undo-tree-id15051 . -63) (undo-tree-id15052 . -63) (undo-tree-id15053 . -63) (undo-tree-id15054 . -63) (undo-tree-id15055 . -63) (undo-tree-id15056 . -66) (undo-tree-id15057 . -66) (undo-tree-id15058 . -66) (undo-tree-id15059 . -66) (undo-tree-id15060 . -66) (undo-tree-id15061 . -66) (undo-tree-id15062 . -66) (undo-tree-id15063 . -66) (undo-tree-id15064 . -66) (undo-tree-id15065 . -66) (undo-tree-id15066 . -66) (undo-tree-id15067 . -66) (undo-tree-id15068 . -66) (undo-tree-id15069 . -66) (undo-tree-id15070 . -66) (undo-tree-id15071 . -73) (undo-tree-id15072 . -73) (undo-tree-id15073 . -73) (undo-tree-id15074 . -73) (undo-tree-id15075 . -73) (undo-tree-id15076 . -73) (undo-tree-id15077 . -73) (undo-tree-id15078 . -73) (undo-tree-id15079 . -73) (undo-tree-id15080 . -73) (undo-tree-id15081 . -73) (undo-tree-id15082 . -73) (undo-tree-id15083 . -73) (undo-tree-id15084 . -73) (undo-tree-id15085 . -73) (undo-tree-id15086 . -76) (undo-tree-id15087 . -76) (undo-tree-id15088 . -76) (undo-tree-id15089 . -76) (undo-tree-id15090 . -76) (undo-tree-id15091 . -76) (undo-tree-id15092 . -76) (undo-tree-id15093 . -76) (undo-tree-id15094 . -76) (undo-tree-id15095 . -76) (undo-tree-id15096 . -76) (undo-tree-id15097 . -76) (undo-tree-id15098 . -76) (undo-tree-id15099 . -76) (undo-tree-id15100 . -76) (undo-tree-id15101 . -80) (undo-tree-id15102 . -80) (undo-tree-id15103 . -80) (undo-tree-id15104 . -80) (undo-tree-id15105 . -80) (undo-tree-id15106 . -80) (undo-tree-id15107 . -80) (undo-tree-id15108 . -80) (undo-tree-id15109 . -80) (undo-tree-id15110 . -80) (undo-tree-id15111 . -80) (undo-tree-id15112 . -80) (undo-tree-id15113 . -80) (undo-tree-id15114 . -80) (undo-tree-id15115 . -80) (undo-tree-id15116 . -85) (undo-tree-id15117 . -85) (undo-tree-id15118 . -85) (undo-tree-id15119 . -85) (undo-tree-id15120 . -85) (undo-tree-id15121 . -85) (undo-tree-id15122 . -85) (undo-tree-id15123 . -85) (undo-tree-id15124 . -85) (undo-tree-id15125 . -85) (undo-tree-id15126 . -85) (undo-tree-id15127 . -85) (undo-tree-id15128 . -85) (undo-tree-id15129 . -85) (undo-tree-id15130 . -85) (undo-tree-id15131 . -85) (undo-tree-id15132 . -85) (undo-tree-id15133 . -85) (undo-tree-id15134 . -85) (undo-tree-id15135 . -85) (undo-tree-id15136 . -85) (undo-tree-id15137 . -85) (undo-tree-id15138 . -85) (undo-tree-id15139 . -85) (undo-tree-id15140 . -85) (undo-tree-id15141 . -85) (undo-tree-id15142 . -85) (undo-tree-id15143 . -85) (undo-tree-id15144 . -85) (undo-tree-id15145 . -85) (undo-tree-id15146 . -85) (undo-tree-id15147 . -85) (undo-tree-id15148 . -85) (undo-tree-id15149 . -85) (undo-tree-id15150 . -85) (undo-tree-id15151 . -85) (undo-tree-id15152 . -85) (undo-tree-id15153 . -85) (undo-tree-id15154 . -85) (undo-tree-id15155 . -85) (undo-tree-id15156 . -85) (undo-tree-id15157 . -85) (undo-tree-id15158 . -85) (undo-tree-id15159 . -85) (undo-tree-id15160 . -85) (undo-tree-id15161 . -85) (undo-tree-id15162 . -85) (undo-tree-id15163 . -85) (undo-tree-id15164 . -85) (undo-tree-id15165 . -85) (undo-tree-id15166 . -85) (undo-tree-id15167 . -85) (undo-tree-id15168 . -85) (undo-tree-id15169 . -85) (undo-tree-id15170 . -85) (undo-tree-id15171 . -85) (undo-tree-id15172 . -85) (undo-tree-id15173 . -85) (undo-tree-id15174 . -85) (undo-tree-id15175 . -85) (undo-tree-id15176 . -85) (undo-tree-id15177 . -85) (undo-tree-id15178 . -85) (undo-tree-id15179 . -85) (undo-tree-id15180 . -85) (undo-tree-id15181 . -85) (undo-tree-id15182 . -85) (undo-tree-id15183 . -85) (undo-tree-id15184 . -85) (undo-tree-id15185 . -85) (undo-tree-id15186 . -85) (undo-tree-id15187 . -85) (undo-tree-id15188 . -85) (undo-tree-id15189 . -85) (undo-tree-id15190 . -85) (undo-tree-id15191 . -85) (undo-tree-id15192 . -85) (undo-tree-id15193 . -85) (undo-tree-id15194 . -85) (undo-tree-id15195 . -85) (undo-tree-id15196 . -85) (undo-tree-id15197 . -85) (undo-tree-id15198 . -85) (undo-tree-id15199 . -85) (undo-tree-id15200 . -85) (undo-tree-id15201 . -85) (undo-tree-id15202 . -85) (undo-tree-id15203 . -85) (undo-tree-id15204 . -85) (undo-tree-id15205 . -85) (undo-tree-id15206 . -85) (undo-tree-id15207 . -85) (undo-tree-id15208 . -85) (undo-tree-id15209 . -85) (undo-tree-id15210 . -85) (undo-tree-id15211 . -85) (undo-tree-id15212 . -85) (undo-tree-id15213 . -85) (undo-tree-id15214 . -85) (undo-tree-id15215 . -85) (undo-tree-id15216 . -85) (undo-tree-id15217 . -85) (undo-tree-id15218 . -85) (undo-tree-id15219 . -85) (undo-tree-id15220 . -85) (undo-tree-id15221 . -85) (undo-tree-id15222 . -85) (undo-tree-id15223 . -85) (undo-tree-id15224 . -85) (undo-tree-id15225 . -85) (undo-tree-id15226 . -85) (undo-tree-id15227 . -85) (undo-tree-id15228 . -85) (undo-tree-id15229 . -85) (undo-tree-id15230 . -85) (undo-tree-id15231 . -85) (undo-tree-id15232 . -85) (undo-tree-id15233 . -85) (undo-tree-id15234 . -85) (undo-tree-id15235 . -85) (undo-tree-id15236 . -85) (undo-tree-id15237 . -85) (undo-tree-id15238 . -90) (undo-tree-id15239 . -90) (undo-tree-id15240 . -90) (undo-tree-id15241 . -90) (undo-tree-id15242 . -90) (undo-tree-id15243 . -90) (undo-tree-id15244 . -90) (undo-tree-id15245 . -90) (undo-tree-id15246 . -90) (undo-tree-id15247 . -90) (undo-tree-id15248 . -90) (undo-tree-id15249 . -90) (undo-tree-id15250 . -90) (undo-tree-id15251 . -90) (undo-tree-id15252 . -90) (undo-tree-id15253 . -96) (undo-tree-id15254 . -96) (undo-tree-id15255 . -96) (undo-tree-id15256 . -96) (undo-tree-id15257 . -96) (undo-tree-id15258 . -96) (undo-tree-id15259 . -96) (undo-tree-id15260 . -96) (undo-tree-id15261 . -96) (undo-tree-id15262 . -96) (undo-tree-id15263 . -96) (undo-tree-id15264 . -96) (undo-tree-id15265 . -96) (undo-tree-id15266 . -96) (undo-tree-id15267 . -96) (undo-tree-id15268 . -98) (undo-tree-id15269 . -98) (undo-tree-id15270 . -98) (undo-tree-id15271 . -98) (undo-tree-id15272 . -98) (undo-tree-id15273 . -98) (undo-tree-id15274 . -98) (undo-tree-id15275 . -98) (undo-tree-id15276 . -98) (undo-tree-id15277 . -98) (undo-tree-id15278 . -98) (undo-tree-id15279 . -98) (undo-tree-id15280 . -98) (undo-tree-id15281 . -98) (undo-tree-id15282 . -98) (undo-tree-id15283 . -103) (undo-tree-id15284 . -103) (undo-tree-id15285 . -103) (undo-tree-id15286 . -103) (undo-tree-id15287 . -103) (undo-tree-id15288 . -103) (undo-tree-id15289 . -103) (undo-tree-id15290 . -103) (undo-tree-id15291 . -103) (undo-tree-id15292 . -103) (undo-tree-id15293 . -103) (undo-tree-id15294 . -103) (undo-tree-id15295 . -103) (undo-tree-id15296 . -103) (undo-tree-id15297 . -103) (undo-tree-id15298 . -103) (undo-tree-id15299 . -103) (undo-tree-id15300 . -103) (undo-tree-id15301 . -103) (undo-tree-id15302 . -103) (undo-tree-id15303 . -103) (undo-tree-id15304 . -103) (undo-tree-id15305 . -103) (undo-tree-id15306 . -103) (undo-tree-id15307 . -103) (undo-tree-id15308 . -103) (undo-tree-id15309 . -103) (undo-tree-id15310 . -103) (undo-tree-id15311 . -103) (undo-tree-id15312 . -103) (undo-tree-id15313 . -103) (undo-tree-id15314 . -103) (undo-tree-id15315 . -103) (undo-tree-id15316 . -103) (undo-tree-id15317 . -103) (undo-tree-id15318 . -103) (undo-tree-id15319 . -103) (undo-tree-id15320 . -103) (undo-tree-id15321 . -103) (undo-tree-id15322 . -103) (undo-tree-id15323 . -103) (undo-tree-id15324 . -103) (undo-tree-id15325 . -103) (undo-tree-id15326 . -103) (undo-tree-id15327 . -103) (undo-tree-id15328 . -103) (undo-tree-id15329 . -103) (undo-tree-id15330 . -103) (undo-tree-id15331 . -103) (undo-tree-id15332 . -103) (undo-tree-id15333 . -103) (undo-tree-id15334 . -103) (undo-tree-id15335 . -103) (undo-tree-id15336 . -103) (undo-tree-id15337 . -103) (undo-tree-id15338 . -103) (undo-tree-id15339 . -103) (undo-tree-id15340 . -103) (undo-tree-id15341 . -103) (undo-tree-id15342 . -103) (undo-tree-id15343 . -103) (undo-tree-id15344 . -103) (undo-tree-id15345 . -103) (undo-tree-id15346 . -103) (undo-tree-id15347 . -103) (undo-tree-id15348 . -103) (undo-tree-id15349 . -103) (undo-tree-id15350 . -103) (undo-tree-id15351 . -103) (undo-tree-id15352 . -103) (undo-tree-id15353 . -103) (undo-tree-id15354 . -103) (undo-tree-id15355 . -103) (undo-tree-id15356 . -103) (undo-tree-id15357 . -103) (undo-tree-id15358 . -103) (undo-tree-id15359 . -103) (undo-tree-id15360 . -103) (undo-tree-id15361 . -103) (undo-tree-id15362 . -103) (undo-tree-id15363 . -103) (undo-tree-id15364 . -103) (undo-tree-id15365 . -103) (undo-tree-id15366 . -103) (undo-tree-id15367 . -103) (undo-tree-id15368 . -103) (undo-tree-id15369 . -103) (undo-tree-id15370 . -103) (undo-tree-id15371 . -103) (undo-tree-id15372 . -103) (undo-tree-id15373 . -103) (undo-tree-id15374 . -103) (undo-tree-id15375 . -103) (undo-tree-id15376 . -103) (undo-tree-id15377 . -103) (undo-tree-id15378 . -103) (undo-tree-id15379 . -103) (undo-tree-id15380 . -103) (undo-tree-id15381 . -103) (undo-tree-id15382 . -103) (undo-tree-id15383 . -103) (undo-tree-id15384 . -103) (undo-tree-id15385 . -103) (undo-tree-id15386 . -103) (undo-tree-id15387 . -103) (undo-tree-id15388 . -103) (undo-tree-id15389 . -103) (undo-tree-id15390 . -103) (undo-tree-id15391 . -103) (undo-tree-id15392 . -103) (undo-tree-id15393 . -103) (undo-tree-id15394 . -103) (undo-tree-id15395 . -103) (undo-tree-id15396 . -103) (undo-tree-id15397 . -103) (undo-tree-id15398 . -103) (undo-tree-id15399 . -103) (undo-tree-id15400 . -103) (undo-tree-id15401 . -103) (undo-tree-id15402 . -103) (undo-tree-id15403 . -103) (undo-tree-id15404 . -103) (undo-tree-id15405 . -103) (undo-tree-id15406 . -103) (undo-tree-id15407 . -103) (undo-tree-id15408 . -103) (undo-tree-id15409 . -103) (undo-tree-id15410 . -103) (undo-tree-id15411 . -103) (undo-tree-id15412 . -103) (undo-tree-id15413 . -103) (undo-tree-id15414 . -103) (undo-tree-id15415 . -103) (undo-tree-id15416 . -103) (undo-tree-id15417 . -103) (undo-tree-id15418 . -103) (undo-tree-id15419 . -103) (undo-tree-id15420 . -103) (undo-tree-id15421 . -103) (undo-tree-id15422 . -103) (undo-tree-id15423 . -103) (undo-tree-id15424 . -103) (undo-tree-id15425 . -103) (undo-tree-id15426 . -103) (undo-tree-id15427 . -103) (undo-tree-id15428 . -103) (undo-tree-id15429 . -103) (undo-tree-id15430 . -103) (undo-tree-id15431 . -103) (undo-tree-id15432 . -103) (undo-tree-id15433 . -103) (undo-tree-id15434 . -103) (undo-tree-id15435 . -103) (undo-tree-id15436 . -103) (undo-tree-id15437 . -103) (undo-tree-id15438 . -103) (undo-tree-id15439 . -103) (undo-tree-id15440 . -103) (undo-tree-id15441 . -103) (undo-tree-id15442 . -103) (undo-tree-id15443 . -103) (undo-tree-id15444 . -103) (undo-tree-id15445 . -103) (undo-tree-id15446 . -103) (undo-tree-id15447 . -103) (undo-tree-id15448 . -103) (undo-tree-id15449 . -103) (undo-tree-id15450 . -103) (undo-tree-id15451 . -103) (undo-tree-id15452 . -103) (undo-tree-id15453 . -103) (undo-tree-id15454 . -103) (undo-tree-id15455 . -103) (undo-tree-id15456 . -103) (undo-tree-id15457 . -103) (undo-tree-id15458 . -103) (undo-tree-id15459 . -103) (undo-tree-id15460 . -103) (undo-tree-id15461 . -103) (undo-tree-id15462 . -103) (undo-tree-id15463 . -104) (undo-tree-id15464 . -104) (undo-tree-id15465 . -104) (undo-tree-id15466 . -104) (undo-tree-id15467 . -104) (undo-tree-id15468 . -104) (undo-tree-id15469 . -104) (undo-tree-id15470 . -104) (undo-tree-id15471 . -104) (undo-tree-id15472 . -104) (undo-tree-id15473 . -104) (undo-tree-id15474 . -104) (undo-tree-id15475 . -104) (undo-tree-id15476 . -104) (undo-tree-id15477 . -104) (undo-tree-id15478 . -105) (undo-tree-id15479 . -105) (undo-tree-id15480 . -105) (undo-tree-id15481 . -105) (undo-tree-id15482 . -105) (undo-tree-id15483 . -105) (undo-tree-id15484 . -105) (undo-tree-id15485 . -105) (undo-tree-id15486 . -105) (undo-tree-id15487 . -105) (undo-tree-id15488 . -105) (undo-tree-id15489 . -105) (undo-tree-id15490 . -105) (undo-tree-id15491 . -105) (undo-tree-id15492 . -105) (undo-tree-id15493 . -105) (undo-tree-id15494 . -105) (undo-tree-id15495 . -106) (undo-tree-id15496 . -106) (undo-tree-id15497 . -106) (undo-tree-id15498 . -106) (undo-tree-id15499 . -106) (undo-tree-id15500 . -106) (undo-tree-id15501 . -106) (undo-tree-id15502 . -106) (undo-tree-id15503 . -106) (undo-tree-id15504 . -106) (undo-tree-id15505 . -106) (undo-tree-id15506 . -106) (undo-tree-id15507 . -106) (undo-tree-id15508 . -106) (undo-tree-id15509 . -106) (undo-tree-id15510 . -106) (undo-tree-id15511 . -106) (undo-tree-id15512 . -106) (undo-tree-id15513 . -106) (undo-tree-id15514 . -106) (undo-tree-id15515 . -106) (undo-tree-id15516 . -106) (undo-tree-id15517 . -106) (undo-tree-id15518 . -105) (undo-tree-id15519 . -105) (undo-tree-id15520 . -105) (undo-tree-id15521 . -105) (undo-tree-id15522 . -105) (undo-tree-id15523 . -105) (undo-tree-id15524 . -105) (undo-tree-id15525 . -105) (undo-tree-id15526 . -105) (undo-tree-id15527 . -104) (undo-tree-id15528 . -104) (undo-tree-id15529 . -104) (undo-tree-id15530 . -104) (undo-tree-id15531 . -104) (undo-tree-id15532 . -104) (undo-tree-id15533 . -104) (undo-tree-id15534 . -104) (undo-tree-id15535 . -104) (undo-tree-id15536 . -104) (undo-tree-id15537 . -104) (undo-tree-id15538 . -104) (undo-tree-id15539 . -104) (undo-tree-id15540 . -104) (undo-tree-id15541 . -104) (undo-tree-id15542 . -104) (undo-tree-id15543 . -104) (undo-tree-id15544 . -105) (undo-tree-id15545 . -105) (undo-tree-id15546 . -105) (undo-tree-id15547 . -105) (undo-tree-id15548 . -105) (undo-tree-id15549 . -105) (undo-tree-id15550 . -105) (undo-tree-id15551 . -105) (undo-tree-id15552 . -105) (undo-tree-id15553 . -105) (undo-tree-id15554 . -105) (undo-tree-id15555 . -105) (undo-tree-id15556 . -105) (undo-tree-id15557 . -105) (undo-tree-id15558 . -105) (undo-tree-id15559 . -107) (undo-tree-id15560 . -107) (undo-tree-id15561 . -107) (undo-tree-id15562 . -107) (undo-tree-id15563 . -107) (undo-tree-id15564 . -107) (undo-tree-id15565 . -107) (undo-tree-id15566 . -107) (undo-tree-id15567 . -107) (undo-tree-id15568 . -107) (undo-tree-id15569 . -107) (undo-tree-id15570 . -107) (undo-tree-id15571 . -107) (undo-tree-id15572 . -107) (undo-tree-id15573 . -107) (undo-tree-id15574 . -107) (undo-tree-id15575 . -107) (undo-tree-id15576 . -107) (undo-tree-id15577 . -107) (undo-tree-id15578 . -107) (undo-tree-id15579 . -107) (undo-tree-id15580 . -107) (undo-tree-id15581 . -107) (undo-tree-id15582 . -107) (undo-tree-id15583 . -107) (undo-tree-id15584 . -107) (undo-tree-id15585 . -107) (undo-tree-id15586 . -107) (undo-tree-id15587 . -107) (undo-tree-id15588 . -108) (undo-tree-id15589 . -108) (undo-tree-id15590 . -108) (undo-tree-id15591 . -108) (undo-tree-id15592 . -108) (undo-tree-id15593 . -108) (undo-tree-id15594 . -108) (undo-tree-id15595 . -108) (undo-tree-id15596 . -108) (undo-tree-id15597 . -108) (undo-tree-id15598 . -108) (undo-tree-id15599 . -108) (undo-tree-id15600 . -108) (undo-tree-id15601 . -108) (undo-tree-id15602 . -108) (undo-tree-id15603 . -109) (undo-tree-id15604 . -109) (undo-tree-id15605 . -109) (undo-tree-id15606 . -109) (undo-tree-id15607 . -109) (undo-tree-id15608 . -109) (undo-tree-id15609 . -109) (undo-tree-id15610 . -109) (undo-tree-id15611 . -109) (undo-tree-id15612 . -109) (undo-tree-id15613 . -109) (undo-tree-id15614 . -109) (undo-tree-id15615 . -109) (undo-tree-id15616 . -109) (undo-tree-id15617 . -109) (undo-tree-id15618 . -109) (undo-tree-id15619 . -109) (undo-tree-id15620 . -109) (undo-tree-id15621 . -109) (undo-tree-id15622 . -109) (undo-tree-id15623 . -109) (undo-tree-id15624 . -109) (undo-tree-id15625 . -109) (undo-tree-id15626 . -109) (undo-tree-id15627 . -109) (undo-tree-id15628 . -109) (undo-tree-id15629 . -109) (undo-tree-id15630 . -109) (undo-tree-id15631 . -109) (undo-tree-id15632 . -109) (undo-tree-id15633 . -109) (undo-tree-id15634 . -109) (undo-tree-id15635 . -109) (undo-tree-id15636 . -109) (undo-tree-id15637 . -109) (undo-tree-id15638 . -109) (undo-tree-id15639 . -109) (undo-tree-id15640 . -109) (undo-tree-id15641 . -109) (undo-tree-id15642 . -109) (undo-tree-id15643 . -109) (undo-tree-id15644 . -109) (undo-tree-id15645 . -109) (undo-tree-id15646 . -109) (undo-tree-id15647 . -109) (undo-tree-id15648 . -109) (undo-tree-id15649 . -109) (undo-tree-id15650 . -109) (undo-tree-id15651 . -109) (undo-tree-id15652 . -109) (undo-tree-id15653 . -109) (undo-tree-id15654 . -109) (undo-tree-id15655 . -109) (undo-tree-id15656 . -109) (undo-tree-id15657 . 1) (undo-tree-id15658 . -109) (undo-tree-id15659 . 3) (undo-tree-id15660 . -107) (undo-tree-id15661 . -109) (undo-tree-id15662 . -109) (undo-tree-id15663 . -109) (undo-tree-id15664 . -109) (undo-tree-id15665 . -109) (undo-tree-id15666 . -109) (undo-tree-id15667 . -109) (undo-tree-id15668 . -109) (undo-tree-id15669 . -109) (undo-tree-id15670 . -57) (4529 . 4586) (#(" and the process is repeated until the last time step. " 0 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4581) (undo-tree-id15671 . -1) (undo-tree-id15672 . -1) (undo-tree-id15673 . -1) (undo-tree-id15674 . -1) (undo-tree-id15675 . -1) (undo-tree-id15676 . -1) (undo-tree-id15677 . -1) (undo-tree-id15678 . -1) (undo-tree-id15679 . -1) (undo-tree-id15680 . -1) (undo-tree-id15681 . -1) (undo-tree-id15682 . -1) (undo-tree-id15683 . -1) (undo-tree-id15684 . -1) (undo-tree-id15685 . -1) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4581) (undo-tree-id15686 . -1) (undo-tree-id15687 . -1) (undo-tree-id15688 . -1) (undo-tree-id15689 . -1) (undo-tree-id15690 . -1) (undo-tree-id15691 . -1) (undo-tree-id15692 . -1) (undo-tree-id15693 . -1) (undo-tree-id15694 . -1) (undo-tree-id15695 . -1) (undo-tree-id15696 . -1) (undo-tree-id15697 . -1) (undo-tree-id15698 . -1) (undo-tree-id15699 . -1) (undo-tree-id15700 . -1) (undo-tree-id15701 . -1) (undo-tree-id15702 . -1) (undo-tree-id15703 . -1)) nil (25772 50407 471878 426000) 0 nil])
([nil nil ((#("and " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4584) (undo-tree-id14764 . -3) (undo-tree-id14765 . 4) (undo-tree-id14766 . -4)) nil (25772 50407 470005 119000) 0 nil])
([nil nil ((#("s " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4597) (undo-tree-id14762 . -1) (undo-tree-id14763 . -2)) nil (25772 50407 470000 304000) 0 nil])
([nil nil ((#("irepeated" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4596) (undo-tree-id14727 . -8) (undo-tree-id14728 . -1) (undo-tree-id14729 . -1) (undo-tree-id14730 . -1) (undo-tree-id14731 . -1) (undo-tree-id14732 . -1) (undo-tree-id14733 . -1) (undo-tree-id14734 . -1) (undo-tree-id14735 . -1) (undo-tree-id14736 . -1) (undo-tree-id14737 . -1) (undo-tree-id14738 . -1) (undo-tree-id14739 . 9) (undo-tree-id14740 . -9) (undo-tree-id14741 . -1) (undo-tree-id14742 . -1) (undo-tree-id14743 . -1) (undo-tree-id14744 . -1) (undo-tree-id14745 . -1) (undo-tree-id14746 . -1) (undo-tree-id14747 . -1) (undo-tree-id14748 . -1) (undo-tree-id14749 . -1) (undo-tree-id14750 . -1) (undo-tree-id14751 . -1) (undo-tree-id14752 . -1) (undo-tree-id14753 . -1) (undo-tree-id14754 . -1) (undo-tree-id14755 . -1) (undo-tree-id14756 . -1) (undo-tree-id14757 . -1) (undo-tree-id14758 . -1) (undo-tree-id14759 . -1) (undo-tree-id14760 . -1) (undo-tree-id14761 . -9) 4597) nil (25772 50407 469994 961000) 0 nil])
([nil nil ((4600 . 4606) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4600) (undo-tree-id14694 . -1) (undo-tree-id14695 . -1) (undo-tree-id14696 . -1) (undo-tree-id14697 . -1) (undo-tree-id14698 . -1) (undo-tree-id14699 . -1) (undo-tree-id14700 . -1) (undo-tree-id14701 . -1) (undo-tree-id14702 . -1) (undo-tree-id14703 . -1) (undo-tree-id14704 . -1) (undo-tree-id14705 . -1) 4601 (4599 . 4601) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4599) (undo-tree-id14706 . -1) (undo-tree-id14707 . -1) (undo-tree-id14708 . -1) (undo-tree-id14709 . -1) (undo-tree-id14710 . -1) (undo-tree-id14711 . -1) (undo-tree-id14712 . -1) (undo-tree-id14713 . -1) (undo-tree-id14714 . -1) (undo-tree-id14715 . -1) (undo-tree-id14716 . -1) (undo-tree-id14717 . -1) (undo-tree-id14718 . -1) (undo-tree-id14719 . -1) (undo-tree-id14720 . -1) (undo-tree-id14721 . -1) (undo-tree-id14722 . -1) (undo-tree-id14723 . -1) (undo-tree-id14724 . -1) (undo-tree-id14725 . -1) (undo-tree-id14726 . -1) 4600 (4596 . 4600)) nil (25772 50407 469959 781000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4600) (undo-tree-id14683 . -1) (undo-tree-id14684 . -1) (undo-tree-id14685 . -1) (undo-tree-id14686 . -1) (undo-tree-id14687 . -1) (undo-tree-id14688 . -1) (undo-tree-id14689 . -1) (undo-tree-id14690 . -1) (undo-tree-id14691 . -1) (undo-tree-id14692 . -1) (undo-tree-id14693 . -1)) nil (25772 50407 469931 424000) 0 nil])
([nil nil ((4584 . 4585) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4584) (t 25772 50407 522644 902000)) nil (25772 50431 953677 667000) 0 nil])
([nil nil ((4633 . 4635) (t 25772 50432 4905 471000)) nil (25772 50437 499043 588000) 0 nil])
([nil nil ((4709 . 4710) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4709) (undo-tree-id15985 . -1) (4634 . 4635) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4634) (undo-tree-id15986 . -1) (undo-tree-id15987 . -1) (undo-tree-id15988 . -1) (undo-tree-id15989 . -1) (undo-tree-id15990 . -1) (undo-tree-id15991 . -1) (undo-tree-id15992 . -1) (undo-tree-id15993 . -1) (undo-tree-id15994 . -1) (undo-tree-id15995 . -1) (undo-tree-id15996 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4635) (undo-tree-id15997 . 1) (undo-tree-id15998 . -1) 4634) nil (25772 50437 499038 21000) 0 nil])
([nil nil ((#("- Then the layer just outputs the last value, y_49. All of this is performed simultaneously for every time series.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 47 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 48 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 50 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 115 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4633) (undo-tree-id16822 . -114) (undo-tree-id16823 . 113) (undo-tree-id16824 . -1) (undo-tree-id16825 . -1) (undo-tree-id16826 . -1) (undo-tree-id16827 . -1) (undo-tree-id16828 . -1) (undo-tree-id16829 . -1) (undo-tree-id16830 . -1) (undo-tree-id16831 . -1) (undo-tree-id16832 . -1) (undo-tree-id16833 . -76) (undo-tree-id16834 . -2) (undo-tree-id16835 . -76) (undo-tree-id16836 . -76) (undo-tree-id16837 . -76) (undo-tree-id16838 . -76) (undo-tree-id16839 . -76) (undo-tree-id16840 . -76) (undo-tree-id16841 . -76) (undo-tree-id16842 . -76) (undo-tree-id16843 . -76) (undo-tree-id16844 . -76) (undo-tree-id16845 . -76) (undo-tree-id16846 . -76) (undo-tree-id16847 . -76) (undo-tree-id16848 . -76) (undo-tree-id16849 . -76) (undo-tree-id16850 . -76) (undo-tree-id16851 . -76) (undo-tree-id16852 . -76) (undo-tree-id16853 . -76) (undo-tree-id16854 . -76) (undo-tree-id16855 . -76) (undo-tree-id16856 . -76) (undo-tree-id16857 . -76) (undo-tree-id16858 . -76) (undo-tree-id16859 . -76) (undo-tree-id16860 . -76) (undo-tree-id16861 . -76) (undo-tree-id16862 . -76) (undo-tree-id16863 . -76) (undo-tree-id16864 . -76) (undo-tree-id16865 . -76) (undo-tree-id16866 . -76) (undo-tree-id16867 . -2) (undo-tree-id16868 . -2) (undo-tree-id16869 . -2) (undo-tree-id16870 . -2) (undo-tree-id16871 . -2) (undo-tree-id16872 . -2) (undo-tree-id16873 . -2) (undo-tree-id16874 . -2) (undo-tree-id16875 . -2) (undo-tree-id16876 . -2) (undo-tree-id16877 . -2) (undo-tree-id16878 . -2) (undo-tree-id16879 . -2) (undo-tree-id16880 . -2) (undo-tree-id16881 . -2) (undo-tree-id16882 . -2) (undo-tree-id16883 . -2) (undo-tree-id16884 . -2) (undo-tree-id16885 . -2) (undo-tree-id16886 . -2) (undo-tree-id16887 . -2) (undo-tree-id16888 . -2) (undo-tree-id16889 . -2) (undo-tree-id16890 . -2) (undo-tree-id16891 . -2) (undo-tree-id16892 . -2) (undo-tree-id16893 . -2) (undo-tree-id16894 . -2) (undo-tree-id16895 . -2) (undo-tree-id16896 . -2) (undo-tree-id16897 . -2) (undo-tree-id16898 . -2) (undo-tree-id16899 . -2) (undo-tree-id16900 . -2) (undo-tree-id16901 . -2) (undo-tree-id16902 . -2) (undo-tree-id16903 . -2) (undo-tree-id16904 . -2) (undo-tree-id16905 . -2) (undo-tree-id16906 . -2) (undo-tree-id16907 . -2) (undo-tree-id16908 . -2) (undo-tree-id16909 . -2) (undo-tree-id16910 . -2) (undo-tree-id16911 . -2) (undo-tree-id16912 . -2) (undo-tree-id16913 . -2) (undo-tree-id16914 . -2) (undo-tree-id16915 . -2) (undo-tree-id16916 . -2) (undo-tree-id16917 . -2) (undo-tree-id16918 . -2) (undo-tree-id16919 . -2) (undo-tree-id16920 . -2) (undo-tree-id16921 . -2) (undo-tree-id16922 . -2) (undo-tree-id16923 . -2) (undo-tree-id16924 . -2) (undo-tree-id16925 . -2) (undo-tree-id16926 . -2) (undo-tree-id16927 . -2) (undo-tree-id16928 . -2) (undo-tree-id16929 . -2) (undo-tree-id16930 . -2) (undo-tree-id16931 . -2) (undo-tree-id16932 . -2) (undo-tree-id16933 . -2) (undo-tree-id16934 . -2) (undo-tree-id16935 . -2) (undo-tree-id16936 . -2) (undo-tree-id16937 . -2) (undo-tree-id16938 . -2) (undo-tree-id16939 . -2) (undo-tree-id16940 . -2) (undo-tree-id16941 . -115) 4635 (t 25772 50437 551112 199000)) nil (25772 50502 382273 517000) 0 nil])
([nil nil ((4633 . 4635)) nil (25772 50502 382191 230000) 0 nil])
([nil nil ((4634 . 4635) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4634) (undo-tree-id16809 . -1) (undo-tree-id16810 . -1) (undo-tree-id16811 . -1) (undo-tree-id16812 . -1) (undo-tree-id16813 . -1) (undo-tree-id16814 . -1) (undo-tree-id16815 . -1) (undo-tree-id16816 . -1) (undo-tree-id16817 . -1) (undo-tree-id16818 . -1) (undo-tree-id16819 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4635) (undo-tree-id16820 . 1) (undo-tree-id16821 . -1) 4634) nil (25772 50502 382189 698000) 0 nil])
([nil nil ((#("If you compile, fit, and evaluate this model, you will find that its" 0 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4635) (undo-tree-id16673 . -67) (undo-tree-id16674 . 68) (undo-tree-id16675 . -67) (undo-tree-id16676 . -67) (undo-tree-id16677 . -68) (undo-tree-id16678 . -67) (undo-tree-id16679 . -1) (undo-tree-id16680 . -1) (undo-tree-id16681 . -1) (undo-tree-id16682 . -1) (undo-tree-id16683 . -1) (undo-tree-id16684 . -1) (undo-tree-id16685 . -1) (undo-tree-id16686 . -1) (undo-tree-id16687 . -5) (undo-tree-id16688 . -5) (undo-tree-id16689 . -5) (undo-tree-id16690 . -5) (undo-tree-id16691 . -5) (undo-tree-id16692 . -5) (undo-tree-id16693 . -5) (undo-tree-id16694 . -5) (undo-tree-id16695 . -13) (undo-tree-id16696 . -13) (undo-tree-id16697 . -13) (undo-tree-id16698 . -13) (undo-tree-id16699 . -13) (undo-tree-id16700 . -13) (undo-tree-id16701 . -13) (undo-tree-id16702 . -13) (undo-tree-id16703 . -14) (undo-tree-id16704 . -14) (undo-tree-id16705 . -14) (undo-tree-id16706 . -14) (undo-tree-id16707 . -14) (undo-tree-id16708 . -14) (undo-tree-id16709 . -14) (undo-tree-id16710 . -14) (undo-tree-id16711 . -18) (undo-tree-id16712 . -18) (undo-tree-id16713 . -18) (undo-tree-id16714 . -18) (undo-tree-id16715 . -18) (undo-tree-id16716 . -18) (undo-tree-id16717 . -18) (undo-tree-id16718 . -18) (undo-tree-id16719 . -19) (undo-tree-id16720 . -19) (undo-tree-id16721 . -19) (undo-tree-id16722 . -19) (undo-tree-id16723 . -19) (undo-tree-id16724 . -19) (undo-tree-id16725 . -19) (undo-tree-id16726 . -19) (undo-tree-id16727 . -23) (undo-tree-id16728 . -23) (undo-tree-id16729 . -23) (undo-tree-id16730 . -23) (undo-tree-id16731 . -23) (undo-tree-id16732 . -23) (undo-tree-id16733 . -23) (undo-tree-id16734 . -23) (undo-tree-id16735 . -32) (undo-tree-id16736 . -32) (undo-tree-id16737 . -32) (undo-tree-id16738 . -32) (undo-tree-id16739 . -32) (undo-tree-id16740 . -32) (undo-tree-id16741 . -32) (undo-tree-id16742 . -32) (undo-tree-id16743 . -37) (undo-tree-id16744 . -37) (undo-tree-id16745 . -37) (undo-tree-id16746 . -37) (undo-tree-id16747 . -37) (undo-tree-id16748 . -37) (undo-tree-id16749 . -37) (undo-tree-id16750 . -37) (undo-tree-id16751 . -43) (undo-tree-id16752 . -43) (undo-tree-id16753 . -43) (undo-tree-id16754 . -43) (undo-tree-id16755 . -43) (undo-tree-id16756 . -43) (undo-tree-id16757 . -43) (undo-tree-id16758 . -43) (undo-tree-id16759 . -44) (undo-tree-id16760 . -44) (undo-tree-id16761 . -44) (undo-tree-id16762 . -44) (undo-tree-id16763 . -44) (undo-tree-id16764 . -44) (undo-tree-id16765 . -44) (undo-tree-id16766 . -44) (undo-tree-id16767 . -48) (undo-tree-id16768 . -48) (undo-tree-id16769 . -48) (undo-tree-id16770 . -48) (undo-tree-id16771 . -48) (undo-tree-id16772 . -48) (undo-tree-id16773 . -48) (undo-tree-id16774 . -48) (undo-tree-id16775 . -53) (undo-tree-id16776 . -53) (undo-tree-id16777 . -53) (undo-tree-id16778 . -53) (undo-tree-id16779 . -53) (undo-tree-id16780 . -53) (undo-tree-id16781 . -53) (undo-tree-id16782 . -53) (undo-tree-id16783 . -58) (undo-tree-id16784 . -58) (undo-tree-id16785 . -58) (undo-tree-id16786 . -58) (undo-tree-id16787 . -58) (undo-tree-id16788 . -58) (undo-tree-id16789 . -58) (undo-tree-id16790 . -58) (undo-tree-id16791 . -63) (undo-tree-id16792 . -63) (undo-tree-id16793 . -63) (undo-tree-id16794 . -63) (undo-tree-id16795 . -63) (undo-tree-id16796 . -63) (undo-tree-id16797 . -63) (undo-tree-id16798 . -63) (undo-tree-id16799 . -67) (undo-tree-id16800 . -67) (undo-tree-id16801 . -67) (undo-tree-id16802 . -67) (undo-tree-id16803 . -67) (undo-tree-id16804 . -67) (undo-tree-id16805 . -67) (undo-tree-id16806 . -67) (undo-tree-id16807 . -67) (undo-tree-id16808 . -68) 4702) nil (25772 50502 382175 6000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4635) (undo-tree-id16669 . 1) (undo-tree-id16670 . 1) (undo-tree-id16671 . -1) (undo-tree-id16672 . -1)) nil (25772 50502 381868 914000) 0 nil])
([nil nil ((#("reaches " 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4639) (undo-tree-id16667 . -7) (undo-tree-id16668 . -8)) nil (25772 50502 381865 850000) 0 nil])
([nil nil ((#("only " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4639) (undo-tree-id16665 . -4) (undo-tree-id16666 . -5)) nil (25772 50502 381863 729000) 0 nil])
([nil nil ((4639 . 4641)) nil (25772 50502 381861 754000) 0 nil])
([nil nil ((4633 . 4651) (#("- so
- MSE = 0.014" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 6 7 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 18 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4633) (undo-tree-id16345 . -18) (undo-tree-id16346 . -18) (undo-tree-id16347 . 5) (undo-tree-id16348 . -7) (undo-tree-id16349 . -7) (undo-tree-id16350 . 11) (undo-tree-id16351 . -18) (undo-tree-id16352 . -6) (undo-tree-id16353 . -6) (undo-tree-id16354 . -6) (undo-tree-id16355 . -6) (undo-tree-id16356 . -6) (undo-tree-id16357 . -6) (undo-tree-id16358 . -6) (undo-tree-id16359 . -6) (undo-tree-id16360 . -6) (undo-tree-id16361 . -6) (undo-tree-id16362 . -6) (undo-tree-id16363 . -6) (undo-tree-id16364 . -6) (undo-tree-id16365 . -6) (undo-tree-id16366 . -6) (undo-tree-id16367 . -6) (undo-tree-id16368 . -6) (undo-tree-id16369 . -6) (undo-tree-id16370 . -6) (undo-tree-id16371 . -6) (undo-tree-id16372 . -6) (undo-tree-id16373 . -6) (undo-tree-id16374 . -6) (undo-tree-id16375 . -6) (undo-tree-id16376 . -6) (undo-tree-id16377 . -6) (undo-tree-id16378 . -6) (undo-tree-id16379 . -6) (undo-tree-id16380 . -6) (undo-tree-id16381 . -6) (undo-tree-id16382 . -6) (undo-tree-id16383 . -6) (undo-tree-id16384 . -6) (undo-tree-id16385 . -6) (undo-tree-id16386 . -6) (undo-tree-id16387 . -6) (undo-tree-id16388 . -6) (undo-tree-id16389 . -6) (undo-tree-id16390 . -6) (undo-tree-id16391 . -6) (undo-tree-id16392 . -6) (undo-tree-id16393 . -6) (undo-tree-id16394 . -6) (undo-tree-id16395 . -6) (undo-tree-id16396 . -6) (undo-tree-id16397 . -7) (undo-tree-id16398 . -7) (undo-tree-id16399 . -7) (undo-tree-id16400 . -7) (undo-tree-id16401 . -7) (undo-tree-id16402 . -7) (undo-tree-id16403 . -7) (undo-tree-id16404 . -7) (undo-tree-id16405 . -7) (undo-tree-id16406 . -7) (undo-tree-id16407 . -7) (undo-tree-id16408 . -7) (undo-tree-id16409 . -7) (undo-tree-id16410 . -7) (undo-tree-id16411 . -7) (undo-tree-id16412 . -7) (undo-tree-id16413 . -7) (undo-tree-id16414 . -7) (undo-tree-id16415 . -7) (undo-tree-id16416 . -7) (undo-tree-id16417 . -7) (undo-tree-id16418 . -7) (undo-tree-id16419 . -7) (undo-tree-id16420 . -7) (undo-tree-id16421 . -7) (undo-tree-id16422 . -7) (undo-tree-id16423 . -7) (undo-tree-id16424 . -7) (undo-tree-id16425 . -7) (undo-tree-id16426 . -7) (undo-tree-id16427 . -7) (undo-tree-id16428 . -7) (undo-tree-id16429 . -7) (undo-tree-id16430 . -7) (undo-tree-id16431 . -7) (undo-tree-id16432 . -7) (undo-tree-id16433 . -7) (undo-tree-id16434 . -7) (undo-tree-id16435 . -7) (undo-tree-id16436 . -7) (undo-tree-id16437 . -7) (undo-tree-id16438 . -7) (undo-tree-id16439 . -7) (undo-tree-id16440 . -7) (undo-tree-id16441 . -7) (undo-tree-id16442 . -7) (undo-tree-id16443 . -7) (undo-tree-id16444 . -7) (undo-tree-id16445 . -7) (undo-tree-id16446 . -7) (undo-tree-id16447 . -7) (undo-tree-id16448 . -7) (undo-tree-id16449 . -7) (undo-tree-id16450 . -7) (undo-tree-id16451 . -7) (undo-tree-id16452 . -7) (undo-tree-id16453 . -7) (undo-tree-id16454 . -7) (undo-tree-id16455 . -7) (undo-tree-id16456 . -7) (undo-tree-id16457 . -7) (undo-tree-id16458 . -7) (undo-tree-id16459 . -7) (undo-tree-id16460 . -7) (undo-tree-id16461 . -7) (undo-tree-id16462 . -7) (undo-tree-id16463 . -7) (undo-tree-id16464 . -7) (undo-tree-id16465 . -7) (undo-tree-id16466 . -7) (undo-tree-id16467 . -7) (undo-tree-id16468 . -7) (undo-tree-id16469 . -7) (undo-tree-id16470 . -7) (undo-tree-id16471 . -7) (undo-tree-id16472 . -7) (undo-tree-id16473 . -7) (undo-tree-id16474 . -7) (undo-tree-id16475 . -7) (undo-tree-id16476 . -7) (undo-tree-id16477 . -7) (undo-tree-id16478 . -7) (undo-tree-id16479 . -7) (undo-tree-id16480 . -7) (undo-tree-id16481 . -7) (undo-tree-id16482 . -7) (undo-tree-id16483 . -7) (undo-tree-id16484 . -7) (undo-tree-id16485 . -7) (undo-tree-id16486 . -7) (undo-tree-id16487 . -7) (undo-tree-id16488 . -7) (undo-tree-id16489 . -7) (undo-tree-id16490 . -7) (undo-tree-id16491 . -7) (undo-tree-id16492 . -7) (undo-tree-id16493 . -7) (undo-tree-id16494 . -7) (undo-tree-id16495 . -7) (undo-tree-id16496 . -7) (undo-tree-id16497 . -7) (undo-tree-id16498 . -7) (undo-tree-id16499 . -7) (undo-tree-id16500 . -7) (undo-tree-id16501 . -7) (undo-tree-id16502 . -7) (undo-tree-id16503 . -7) (undo-tree-id16504 . -7) (undo-tree-id16505 . -7) (undo-tree-id16506 . -7) (undo-tree-id16507 . -7) (undo-tree-id16508 . -7) (undo-tree-id16509 . -7) (undo-tree-id16510 . -7) (undo-tree-id16511 . -7) (undo-tree-id16512 . -7) (undo-tree-id16513 . -7) (undo-tree-id16514 . -7) (undo-tree-id16515 . -7) (undo-tree-id16516 . -7) (undo-tree-id16517 . -7) (undo-tree-id16518 . -7) (undo-tree-id16519 . -7) (undo-tree-id16520 . -7) (undo-tree-id16521 . -7) (undo-tree-id16522 . -7) (undo-tree-id16523 . -7) (undo-tree-id16524 . -7) (undo-tree-id16525 . -7) (undo-tree-id16526 . -7) (undo-tree-id16527 . -7) (undo-tree-id16528 . -7) (undo-tree-id16529 . -7) (undo-tree-id16530 . -7) (undo-tree-id16531 . -7) (undo-tree-id16532 . -7) (undo-tree-id16533 . -7) (undo-tree-id16534 . -7) (undo-tree-id16535 . -7) (undo-tree-id16536 . -7) (undo-tree-id16537 . -7) (undo-tree-id16538 . -7) (undo-tree-id16539 . -7) (undo-tree-id16540 . -7) (undo-tree-id16541 . -7) (undo-tree-id16542 . -7) (undo-tree-id16543 . -7) (undo-tree-id16544 . -7) (undo-tree-id16545 . -7) (undo-tree-id16546 . -7) (undo-tree-id16547 . -7) (undo-tree-id16548 . -7) (undo-tree-id16549 . -7) (undo-tree-id16550 . -7) (undo-tree-id16551 . -7) (undo-tree-id16552 . -7) (undo-tree-id16553 . -7) (undo-tree-id16554 . -7) (undo-tree-id16555 . -11) (undo-tree-id16556 . -11) (undo-tree-id16557 . -11) (undo-tree-id16558 . -11) (undo-tree-id16559 . -11) (undo-tree-id16560 . -11) (undo-tree-id16561 . -11) (undo-tree-id16562 . -11) (undo-tree-id16563 . -11) (undo-tree-id16564 . -11) (undo-tree-id16565 . -11) (undo-tree-id16566 . -11) (undo-tree-id16567 . -11) (undo-tree-id16568 . -11) (undo-tree-id16569 . -11) (undo-tree-id16570 . -11) (undo-tree-id16571 . -11) (undo-tree-id16572 . -11) (undo-tree-id16573 . -11) (undo-tree-id16574 . -11) (undo-tree-id16575 . -11) (undo-tree-id16576 . -11) (undo-tree-id16577 . -11) (undo-tree-id16578 . -11) (undo-tree-id16579 . -11) (undo-tree-id16580 . -11) (undo-tree-id16581 . -11) (undo-tree-id16582 . -11) (undo-tree-id16583 . -11) (undo-tree-id16584 . 11) (undo-tree-id16585 . -10) (undo-tree-id16586 . -11) (undo-tree-id16587 . -11) (undo-tree-id16588 . -11) (undo-tree-id16589 . -11) (undo-tree-id16590 . -11) (undo-tree-id16591 . -11) (undo-tree-id16592 . -11) (undo-tree-id16593 . -11) (undo-tree-id16594 . -11) (undo-tree-id16595 . -11) (undo-tree-id16596 . -11) (undo-tree-id16597 . -11) (undo-tree-id16598 . -11) (undo-tree-id16599 . -11) (undo-tree-id16600 . -11) (undo-tree-id16601 . -11) (undo-tree-id16602 . -11) (undo-tree-id16603 . -11) (undo-tree-id16604 . -11) (undo-tree-id16605 . -11) (undo-tree-id16606 . -12) (undo-tree-id16607 . -12) (undo-tree-id16608 . -12) (undo-tree-id16609 . -12) (undo-tree-id16610 . -12) (undo-tree-id16611 . -12) (undo-tree-id16612 . -12) (undo-tree-id16613 . -12) (undo-tree-id16614 . -12) (undo-tree-id16615 . -13) (undo-tree-id16616 . -13) (undo-tree-id16617 . -13) (undo-tree-id16618 . -13) (undo-tree-id16619 . -13) (undo-tree-id16620 . -13) (undo-tree-id16621 . -13) (undo-tree-id16622 . -13) (undo-tree-id16623 . -13) (undo-tree-id16624 . -12) (undo-tree-id16625 . -12) (undo-tree-id16626 . -12) (undo-tree-id16627 . -12) (undo-tree-id16628 . -12) (undo-tree-id16629 . -12) (undo-tree-id16630 . -12) (undo-tree-id16631 . -12) (undo-tree-id16632 . -12) (undo-tree-id16633 . -12) (undo-tree-id16634 . -12) (undo-tree-id16635 . -12) (undo-tree-id16636 . -12) (undo-tree-id16637 . -12) (undo-tree-id16638 . -12) (undo-tree-id16639 . -12) (undo-tree-id16640 . -12) (undo-tree-id16641 . -12) (undo-tree-id16642 . -12) (undo-tree-id16643 . -13) (undo-tree-id16644 . -14) (undo-tree-id16645 . -15) (undo-tree-id16646 . -18) (undo-tree-id16647 . -18) (undo-tree-id16648 . -18) (undo-tree-id16649 . -18) (undo-tree-id16650 . -18) (undo-tree-id16651 . -18) (undo-tree-id16652 . -18) (undo-tree-id16653 . -18) (undo-tree-id16654 . -18) (undo-tree-id16655 . -18) (undo-tree-id16656 . -18) (undo-tree-id16657 . -18) (undo-tree-id16658 . -18) (undo-tree-id16659 . -18) (undo-tree-id16660 . -5) (4633 . 4638) (#(" so" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4646) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4646) (undo-tree-id16661 . -1) (undo-tree-id16662 . -1) (undo-tree-id16663 . -1) (undo-tree-id16664 . -1)) nil (25772 50502 381848 526000) 0 nil])
([nil nil ((4651 . 4652) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4651) (undo-tree-id16343 . 1) (undo-tree-id16344 . -1) 4649) nil (25772 50502 381525 847000) 0 nil])
([nil nil ((#("so it is b" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4649) (undo-tree-id16322 . -9) (undo-tree-id16323 . 10) (undo-tree-id16324 . -9) (undo-tree-id16325 . -9) (undo-tree-id16326 . -2) (undo-tree-id16327 . -2) (undo-tree-id16328 . -2) (undo-tree-id16329 . -2) (undo-tree-id16330 . -2) (undo-tree-id16331 . -2) (undo-tree-id16332 . -2) (undo-tree-id16333 . -2) (undo-tree-id16334 . -10) (undo-tree-id16335 . -9) (undo-tree-id16336 . -3) (undo-tree-id16337 . -4) (undo-tree-id16338 . -7) (undo-tree-id16339 . -10) (undo-tree-id16340 . -9) (undo-tree-id16341 . -9) (undo-tree-id16342 . -10) 4658) nil (25772 50502 381522 389000) 0 nil])
([nil nil ((4649 . 4650)) nil (25772 50502 381506 451000) 0 nil])
([nil nil ((4649 . 4650) (#("V" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4649) (undo-tree-id16312 . -1) (undo-tree-id16313 . -1) (undo-tree-id16314 . -1) (undo-tree-id16315 . -1) (undo-tree-id16316 . -1) (undo-tree-id16317 . -1) (undo-tree-id16318 . -1) (undo-tree-id16319 . -1) (undo-tree-id16320 . 1) (undo-tree-id16321 . -1)) nil (25772 50502 381505 253000) 0 nil])
([nil nil ((4649 . 4650) (#("V" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4649) (undo-tree-id16311 . -1)) nil (25772 50502 381497 326000) 0 nil])
([nil nil ((4647 . 4718) (#("- but it does not beat a simple linear
- Better than the naive approach" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 38 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 38 39 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 39 40 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 40 41 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 42 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 71 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4647) (undo-tree-id16163 . -41) (undo-tree-id16164 . -41) (undo-tree-id16165 . 29) (undo-tree-id16166 . -41) (undo-tree-id16167 . -41) (undo-tree-id16168 . 29) (undo-tree-id16169 . -71) (undo-tree-id16170 . -41) (undo-tree-id16171 . -41) (undo-tree-id16172 . -41) (undo-tree-id16173 . -41) (undo-tree-id16174 . -41) (undo-tree-id16175 . -41) (undo-tree-id16176 . -41) (undo-tree-id16177 . -41) (undo-tree-id16178 . -41) (undo-tree-id16179 . -40) (undo-tree-id16180 . -40) (undo-tree-id16181 . -40) (undo-tree-id16182 . -40) (undo-tree-id16183 . -40) (undo-tree-id16184 . -40) (undo-tree-id16185 . -40) (undo-tree-id16186 . -40) (undo-tree-id16187 . -40) (undo-tree-id16188 . -40) (undo-tree-id16189 . -40) (undo-tree-id16190 . -40) (undo-tree-id16191 . -40) (undo-tree-id16192 . -40) (undo-tree-id16193 . -40) (undo-tree-id16194 . -40) (undo-tree-id16195 . -40) (undo-tree-id16196 . -40) (undo-tree-id16197 . -40) (undo-tree-id16198 . -41) (undo-tree-id16199 . -41) (undo-tree-id16200 . -41) (undo-tree-id16201 . -41) (undo-tree-id16202 . -41) (undo-tree-id16203 . -41) (undo-tree-id16204 . -41) (undo-tree-id16205 . -41) (undo-tree-id16206 . -41) (undo-tree-id16207 . -41) (undo-tree-id16208 . -41) (undo-tree-id16209 . -41) (undo-tree-id16210 . -41) (undo-tree-id16211 . -41) (undo-tree-id16212 . -41) (undo-tree-id16213 . -41) (undo-tree-id16214 . -41) (undo-tree-id16215 . -41) (undo-tree-id16216 . -41) (undo-tree-id16217 . -41) (undo-tree-id16218 . -41) (undo-tree-id16219 . -41) (undo-tree-id16220 . -41) (undo-tree-id16221 . -46) (undo-tree-id16222 . -45) (undo-tree-id16223 . -44) (undo-tree-id16224 . -43) (undo-tree-id16225 . -41) (undo-tree-id16226 . -41) (undo-tree-id16227 . -41) (undo-tree-id16228 . -41) (undo-tree-id16229 . -41) (undo-tree-id16230 . -41) (undo-tree-id16231 . -41) (undo-tree-id16232 . -41) (undo-tree-id16233 . -41) (undo-tree-id16234 . -41) (undo-tree-id16235 . -41) (undo-tree-id16236 . -41) (undo-tree-id16237 . -41) (undo-tree-id16238 . -41) (undo-tree-id16239 . -41) (undo-tree-id16240 . -41) (undo-tree-id16241 . -41) (undo-tree-id16242 . -41) (undo-tree-id16243 . -41) (undo-tree-id16244 . -41) (undo-tree-id16245 . -41) (undo-tree-id16246 . -41) (undo-tree-id16247 . -41) (undo-tree-id16248 . -41) (undo-tree-id16249 . -41) (undo-tree-id16250 . -41) (undo-tree-id16251 . -41) (undo-tree-id16252 . -41) (undo-tree-id16253 . -41) (undo-tree-id16254 . -41) (undo-tree-id16255 . -41) (undo-tree-id16256 . -41) (undo-tree-id16257 . -41) (undo-tree-id16258 . -41) (undo-tree-id16259 . -41) (undo-tree-id16260 . -41) (undo-tree-id16261 . -41) (undo-tree-id16262 . -41) (undo-tree-id16263 . -41) (undo-tree-id16264 . -41) (undo-tree-id16265 . -41) (undo-tree-id16266 . -41) (undo-tree-id16267 . -41) (undo-tree-id16268 . -41) (undo-tree-id16269 . -41) (undo-tree-id16270 . -41) (undo-tree-id16271 . -41) (undo-tree-id16272 . -41) (undo-tree-id16273 . -41) (undo-tree-id16274 . -41) (undo-tree-id16275 . -41) (undo-tree-id16276 . -41) (undo-tree-id16277 . -41) (undo-tree-id16278 . -41) (undo-tree-id16279 . -41) (undo-tree-id16280 . -41) (undo-tree-id16281 . -41) (undo-tree-id16282 . -46) (undo-tree-id16283 . -41) (undo-tree-id16284 . -41) (undo-tree-id16285 . -41) (undo-tree-id16286 . -41) (undo-tree-id16287 . -41) (undo-tree-id16288 . -41) (undo-tree-id16289 . -41) (undo-tree-id16290 . -41) (undo-tree-id16291 . -41) (undo-tree-id16292 . -46) (undo-tree-id16293 . -51) (undo-tree-id16294 . -55) (undo-tree-id16295 . -61) (undo-tree-id16296 . -70) (undo-tree-id16297 . -63) (undo-tree-id16298 . -70) (undo-tree-id16299 . -71) (undo-tree-id16300 . -71) (undo-tree-id16301 . -71) (undo-tree-id16302 . -71) (undo-tree-id16303 . -71) (undo-tree-id16304 . -71) (undo-tree-id16305 . -71) (undo-tree-id16306 . -71) (undo-tree-id16307 . -71) (undo-tree-id16308 . -71) (undo-tree-id16309 . -71) (undo-tree-id16310 . -39) (4647 . 4686) (#(" but it does not beat a simple linear" 0 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4679)) nil (25772 50502 381488 952000) 0 nil])
([nil nil ((#("but " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4682) (undo-tree-id16160 . -3) (undo-tree-id16161 . 4) (undo-tree-id16162 . -4)) nil (25772 50502 381108 625000) 0 nil])
([nil nil ((#("it " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4682) (undo-tree-id16157 . -2) (undo-tree-id16158 . 3) (undo-tree-id16159 . -3)) nil (25772 50502 381104 779000) 0 nil])
([nil nil ((4682 . 4683) (#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4682)) nil (25772 50502 381099 403000) 0 nil])
([nil nil ((4711 . 4712) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4711) (undo-tree-id16156 . -1) 4682) nil (25772 50502 381096 884000) 0 nil])
([nil nil ((4680 . 4722) (#("- . 
- Does not beat a simple linear model" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 6 7 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 7 36 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 36 37 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 37 42 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4680) (undo-tree-id16021 . -35) (undo-tree-id16022 . 35) (undo-tree-id16023 . -7) (undo-tree-id16024 . -7) (undo-tree-id16025 . 34) (undo-tree-id16026 . -42) (undo-tree-id16027 . -7) (undo-tree-id16028 . -7) (undo-tree-id16029 . -7) (undo-tree-id16030 . -7) (undo-tree-id16031 . -7) (undo-tree-id16032 . -7) (undo-tree-id16033 . -7) (undo-tree-id16034 . -7) (undo-tree-id16035 . -7) (undo-tree-id16036 . -6) (undo-tree-id16037 . -6) (undo-tree-id16038 . -6) (undo-tree-id16039 . -6) (undo-tree-id16040 . -6) (undo-tree-id16041 . -6) (undo-tree-id16042 . -6) (undo-tree-id16043 . -6) (undo-tree-id16044 . -6) (undo-tree-id16045 . -6) (undo-tree-id16046 . -6) (undo-tree-id16047 . -6) (undo-tree-id16048 . -6) (undo-tree-id16049 . -6) (undo-tree-id16050 . -6) (undo-tree-id16051 . -6) (undo-tree-id16052 . -6) (undo-tree-id16053 . -6) (undo-tree-id16054 . -6) (undo-tree-id16055 . -7) (undo-tree-id16056 . -7) (undo-tree-id16057 . -7) (undo-tree-id16058 . -7) (undo-tree-id16059 . -7) (undo-tree-id16060 . -7) (undo-tree-id16061 . -7) (undo-tree-id16062 . -7) (undo-tree-id16063 . -7) (undo-tree-id16064 . -7) (undo-tree-id16065 . -7) (undo-tree-id16066 . -7) (undo-tree-id16067 . -7) (undo-tree-id16068 . -7) (undo-tree-id16069 . -7) (undo-tree-id16070 . -7) (undo-tree-id16071 . -7) (undo-tree-id16072 . -7) (undo-tree-id16073 . -7) (undo-tree-id16074 . -7) (undo-tree-id16075 . -7) (undo-tree-id16076 . -7) (undo-tree-id16077 . -7) (undo-tree-id16078 . -7) (undo-tree-id16079 . -7) (undo-tree-id16080 . -7) (undo-tree-id16081 . -7) (undo-tree-id16082 . -7) (undo-tree-id16083 . -7) (undo-tree-id16084 . -7) (undo-tree-id16085 . -7) (undo-tree-id16086 . -7) (undo-tree-id16087 . -7) (undo-tree-id16088 . -7) (undo-tree-id16089 . -7) (undo-tree-id16090 . -7) (undo-tree-id16091 . -7) (undo-tree-id16092 . -7) (undo-tree-id16093 . -7) (undo-tree-id16094 . -7) (undo-tree-id16095 . -7) (undo-tree-id16096 . -7) (undo-tree-id16097 . -7) (undo-tree-id16098 . -7) (undo-tree-id16099 . -7) (undo-tree-id16100 . -7) (undo-tree-id16101 . -7) (undo-tree-id16102 . -7) (undo-tree-id16103 . -7) (undo-tree-id16104 . -7) (undo-tree-id16105 . -7) (undo-tree-id16106 . -7) (undo-tree-id16107 . -7) (undo-tree-id16108 . -7) (undo-tree-id16109 . -7) (undo-tree-id16110 . -7) (undo-tree-id16111 . -7) (undo-tree-id16112 . -7) (undo-tree-id16113 . -7) (undo-tree-id16114 . -36) (undo-tree-id16115 . -36) (undo-tree-id16116 . -36) (undo-tree-id16117 . -36) (undo-tree-id16118 . -36) (undo-tree-id16119 . -36) (undo-tree-id16120 . -36) (undo-tree-id16121 . -36) (undo-tree-id16122 . -41) (undo-tree-id16123 . -42) (undo-tree-id16124 . -42) (undo-tree-id16125 . -42) (undo-tree-id16126 . -42) (undo-tree-id16127 . -42) (undo-tree-id16128 . -42) (undo-tree-id16129 . -42) (undo-tree-id16130 . -42) (undo-tree-id16131 . -42) (undo-tree-id16132 . -42) (undo-tree-id16133 . -42) (undo-tree-id16134 . -42) (undo-tree-id16135 . -42) (undo-tree-id16136 . -42) (undo-tree-id16137 . -42) (undo-tree-id16138 . -42) (undo-tree-id16139 . -42) (undo-tree-id16140 . -42) (undo-tree-id16141 . -42) (undo-tree-id16142 . -42) (undo-tree-id16143 . -42) (undo-tree-id16144 . -5) (4680 . 4685) (#(" . " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4717) (undo-tree-id16145 . -1) (undo-tree-id16146 . -1) (undo-tree-id16147 . -1) (undo-tree-id16148 . -1) (undo-tree-id16149 . -1) (undo-tree-id16150 . -1) (undo-tree-id16151 . -1) (undo-tree-id16152 . -1) (undo-tree-id16153 . -1) (undo-tree-id16154 . -1) (undo-tree-id16155 . -1) 4718 (4717 . 4718)) nil (25772 50502 380971 107000) 0 nil])
([nil nil ((4721 . 4722) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4721) (undo-tree-id16017 . -1) (undo-tree-id16018 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4722) (undo-tree-id16019 . 1) (undo-tree-id16020 . -1) 4720) nil (25772 50502 380864 371000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4720) (undo-tree-id16005 . 1) (undo-tree-id16006 . -1) (undo-tree-id16007 . -1) (undo-tree-id16008 . -1) (undo-tree-id16009 . -1) (undo-tree-id16010 . -1) (undo-tree-id16011 . -1) (undo-tree-id16012 . -1) (undo-tree-id16013 . -1) (undo-tree-id16014 . -1) (undo-tree-id16015 . -1) (undo-tree-id16016 . -1)) nil (25772 50502 380540 984000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4720) (undo-tree-id16002 . 1) (undo-tree-id16003 . -1) (undo-tree-id16004 . -1)) nil (25772 50502 380528 652000) 0 nil])
([nil nil ((4941 . 4942) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4941) (undo-tree-id15999 . -1) (4865 . 4866) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4865) (undo-tree-id16000 . -1) (4783 . 4784) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4783) (undo-tree-id16001 . -1) 4720) nil (25772 50502 380521 225000) 0 nil])
([nil nil ((#("Note that " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4720) (undo-tree-id18072 . -9) (undo-tree-id18073 . 10) (undo-tree-id18074 . -9) (undo-tree-id18075 . -9) (undo-tree-id18076 . -10) (undo-tree-id18077 . -9) (undo-tree-id18078 . -3) (undo-tree-id18079 . -3) (undo-tree-id18080 . -3) (undo-tree-id18081 . -3) (undo-tree-id18082 . -3) (undo-tree-id18083 . -3) (undo-tree-id18084 . -3) (undo-tree-id18085 . -3) (undo-tree-id18086 . -3) (undo-tree-id18087 . -3) (undo-tree-id18088 . -3) (undo-tree-id18089 . -3) (undo-tree-id18090 . -3) (undo-tree-id18091 . -3) (undo-tree-id18092 . -3) (undo-tree-id18093 . -3) (undo-tree-id18094 . -3) (undo-tree-id18095 . -3) (undo-tree-id18096 . -3) (undo-tree-id18097 . -3) (undo-tree-id18098 . -3) (undo-tree-id18099 . -3) (undo-tree-id18100 . -8) (undo-tree-id18101 . -8) (undo-tree-id18102 . -8) (undo-tree-id18103 . -8) (undo-tree-id18104 . -8) (undo-tree-id18105 . -8) (undo-tree-id18106 . -8) (undo-tree-id18107 . -8) (undo-tree-id18108 . -8) (undo-tree-id18109 . -8) (undo-tree-id18110 . -8) (undo-tree-id18111 . -8) (undo-tree-id18112 . -8) (undo-tree-id18113 . -8) (undo-tree-id18114 . -8) (undo-tree-id18115 . -8) (undo-tree-id18116 . -8) (undo-tree-id18117 . -8) (undo-tree-id18118 . -8) (undo-tree-id18119 . -8) (undo-tree-id18120 . -8) (undo-tree-id18121 . -8) (undo-tree-id18122 . -9) (undo-tree-id18123 . -9) (undo-tree-id18124 . -9) (undo-tree-id18125 . -9) (undo-tree-id18126 . -9) (undo-tree-id18127 . -9) (undo-tree-id18128 . -9) (undo-tree-id18129 . -9) (undo-tree-id18130 . -9) (undo-tree-id18131 . -9) (undo-tree-id18132 . -9) (undo-tree-id18133 . -9) (undo-tree-id18134 . -9) (undo-tree-id18135 . -9) (undo-tree-id18136 . -9) (undo-tree-id18137 . -9) (undo-tree-id18138 . -9) (undo-tree-id18139 . -9) (undo-tree-id18140 . -9) (undo-tree-id18141 . -9) (undo-tree-id18142 . -9) (undo-tree-id18143 . -9) (undo-tree-id18144 . -9) (undo-tree-id18145 . -10) 4729 (t 25772 50502 482092 338000)) nil (25772 50561 346074 636000) 0 nil])
([nil nil ((4720 . 4721) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4720)) nil (25772 50561 346028 842000) 0 nil])
([nil nil ((4720 . 4721) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4720)) nil (25772 50561 346027 892000) 0 nil])
([nil nil ((#("a " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4737) (undo-tree-id18070 . -1) (undo-tree-id18071 . -2)) nil (25772 50561 346026 591000) 0 nil])
([nil nil ((4718 . 4961) (#("- In contrast, for each recurrent neuron in a simple RNN, there is just one parameter per input and per hidden state dimension, plus a bias term. 
- For each neuron, linear model has one parameter per input and per time step, plus a bias term." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 40 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 40 41 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 116 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 116 117 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 117 146 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 146 147 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 147 148 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 148 149 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 149 200 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 200 201 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 201 243 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4718) (undo-tree-id17047 . -166) (undo-tree-id17048 . -166) (undo-tree-id17049 . 94) (undo-tree-id17050 . -149) (undo-tree-id17051 . -149) (undo-tree-id17052 . 93) (undo-tree-id17053 . -149) (undo-tree-id17054 . -149) (undo-tree-id17055 . -149) (undo-tree-id17056 . -149) (undo-tree-id17057 . -149) (undo-tree-id17058 . -149) (undo-tree-id17059 . -149) (undo-tree-id17060 . -149) (undo-tree-id17061 . -149) (undo-tree-id17062 . -243) (undo-tree-id17063 . -243) (undo-tree-id17064 . -243) (undo-tree-id17065 . -243) (undo-tree-id17066 . -243) (undo-tree-id17067 . -243) (undo-tree-id17068 . -243) (undo-tree-id17069 . -243) (undo-tree-id17070 . -243) (undo-tree-id17071 . -243) (undo-tree-id17072 . -243) (undo-tree-id17073 . -243) (undo-tree-id17074 . -243) (undo-tree-id17075 . -243) (undo-tree-id17076 . -243) (undo-tree-id17077 . -243) (undo-tree-id17078 . -243) (undo-tree-id17079 . -243) (undo-tree-id17080 . -243) (undo-tree-id17081 . -243) (undo-tree-id17082 . -243) (undo-tree-id17083 . -243) (undo-tree-id17084 . -243) (undo-tree-id17085 . -243) (undo-tree-id17086 . -243) (undo-tree-id17087 . -243) (undo-tree-id17088 . -243) (undo-tree-id17089 . -243) (undo-tree-id17090 . -243) (undo-tree-id17091 . -243) (undo-tree-id17092 . -243) (undo-tree-id17093 . -243) (undo-tree-id17094 . -243) (undo-tree-id17095 . -243) (undo-tree-id17096 . -243) (undo-tree-id17097 . -243) (undo-tree-id17098 . -243) (undo-tree-id17099 . -243) (undo-tree-id17100 . -243) (undo-tree-id17101 . -243) (undo-tree-id17102 . -243) (undo-tree-id17103 . -243) (undo-tree-id17104 . -243) (undo-tree-id17105 . -243) (undo-tree-id17106 . -243) (undo-tree-id17107 . -243) (undo-tree-id17108 . -243) (undo-tree-id17109 . -243) (undo-tree-id17110 . -243) (undo-tree-id17111 . -167) (undo-tree-id17112 . -167) (undo-tree-id17113 . -167) (undo-tree-id17114 . -167) (undo-tree-id17115 . -167) (undo-tree-id17116 . -167) (undo-tree-id17117 . -167) (undo-tree-id17118 . -167) (undo-tree-id17119 . -167) (undo-tree-id17120 . -167) (undo-tree-id17121 . -167) (undo-tree-id17122 . -167) (undo-tree-id17123 . -167) (undo-tree-id17124 . -167) (undo-tree-id17125 . -167) (undo-tree-id17126 . -149) (undo-tree-id17127 . -149) (undo-tree-id17128 . -149) (undo-tree-id17129 . -149) (undo-tree-id17130 . -149) (undo-tree-id17131 . -149) (undo-tree-id17132 . -149) (undo-tree-id17133 . -149) (undo-tree-id17134 . -149) (undo-tree-id17135 . -149) (undo-tree-id17136 . -149) (undo-tree-id17137 . -149) (undo-tree-id17138 . -149) (undo-tree-id17139 . -149) (undo-tree-id17140 . -149) (undo-tree-id17141 . -149) (undo-tree-id17142 . -149) (undo-tree-id17143 . -149) (undo-tree-id17144 . -149) (undo-tree-id17145 . -149) (undo-tree-id17146 . -149) (undo-tree-id17147 . -149) (undo-tree-id17148 . -149) (undo-tree-id17149 . -149) (undo-tree-id17150 . -149) (undo-tree-id17151 . -149) (undo-tree-id17152 . -149) (undo-tree-id17153 . -149) (undo-tree-id17154 . -149) (undo-tree-id17155 . -149) (undo-tree-id17156 . -149) (undo-tree-id17157 . -149) (undo-tree-id17158 . -149) (undo-tree-id17159 . -149) (undo-tree-id17160 . -149) (undo-tree-id17161 . -149) (undo-tree-id17162 . -149) (undo-tree-id17163 . -149) (undo-tree-id17164 . -149) (undo-tree-id17165 . -149) (undo-tree-id17166 . -149) (undo-tree-id17167 . -149) (undo-tree-id17168 . -149) (undo-tree-id17169 . -149) (undo-tree-id17170 . -149) (undo-tree-id17171 . -149) (undo-tree-id17172 . -149) (undo-tree-id17173 . -149) (undo-tree-id17174 . -149) (undo-tree-id17175 . -149) (undo-tree-id17176 . -149) (undo-tree-id17177 . -149) (undo-tree-id17178 . -149) (undo-tree-id17179 . -149) (undo-tree-id17180 . -149) (undo-tree-id17181 . -149) (undo-tree-id17182 . -149) (undo-tree-id17183 . -149) (undo-tree-id17184 . -149) (undo-tree-id17185 . -149) (undo-tree-id17186 . -149) (undo-tree-id17187 . -149) (undo-tree-id17188 . -149) (undo-tree-id17189 . -149) (undo-tree-id17190 . -149) (undo-tree-id17191 . -149) (undo-tree-id17192 . -149) (undo-tree-id17193 . -149) (undo-tree-id17194 . -149) (undo-tree-id17195 . -149) (undo-tree-id17196 . -149) (undo-tree-id17197 . -149) (undo-tree-id17198 . -149) (undo-tree-id17199 . -149) (undo-tree-id17200 . -149) (undo-tree-id17201 . -149) (undo-tree-id17202 . -149) (undo-tree-id17203 . -149) (undo-tree-id17204 . -149) (undo-tree-id17205 . -149) (undo-tree-id17206 . -149) (undo-tree-id17207 . -149) (undo-tree-id17208 . -149) (undo-tree-id17209 . -149) (undo-tree-id17210 . -149) (undo-tree-id17211 . -149) (undo-tree-id17212 . -149) (undo-tree-id17213 . -149) (undo-tree-id17214 . -149) (undo-tree-id17215 . -149) (undo-tree-id17216 . -149) (undo-tree-id17217 . -149) (undo-tree-id17218 . -149) (undo-tree-id17219 . -149) (undo-tree-id17220 . -149) (undo-tree-id17221 . -149) (undo-tree-id17222 . -149) (undo-tree-id17223 . -149) (undo-tree-id17224 . -149) (undo-tree-id17225 . -149) (undo-tree-id17226 . -149) (undo-tree-id17227 . -149) (undo-tree-id17228 . -149) (undo-tree-id17229 . -149) (undo-tree-id17230 . -149) (undo-tree-id17231 . -149) (undo-tree-id17232 . -149) (undo-tree-id17233 . -149) (undo-tree-id17234 . -149) (undo-tree-id17235 . -149) (undo-tree-id17236 . -149) (undo-tree-id17237 . -149) (undo-tree-id17238 . -149) (undo-tree-id17239 . -149) (undo-tree-id17240 . -149) (undo-tree-id17241 . -149) (undo-tree-id17242 . -149) (undo-tree-id17243 . -149) (undo-tree-id17244 . -149) (undo-tree-id17245 . -149) (undo-tree-id17246 . -149) (undo-tree-id17247 . -149) (undo-tree-id17248 . -149) (undo-tree-id17249 . -149) (undo-tree-id17250 . -149) (undo-tree-id17251 . -149) (undo-tree-id17252 . -149) (undo-tree-id17253 . -149) (undo-tree-id17254 . -149) (undo-tree-id17255 . -149) (undo-tree-id17256 . -149) (undo-tree-id17257 . -149) (undo-tree-id17258 . -149) (undo-tree-id17259 . -149) (undo-tree-id17260 . -149) (undo-tree-id17261 . -149) (undo-tree-id17262 . -149) (undo-tree-id17263 . -149) (undo-tree-id17264 . -149) (undo-tree-id17265 . -149) (undo-tree-id17266 . -149) (undo-tree-id17267 . -149) (undo-tree-id17268 . -149) (undo-tree-id17269 . -149) (undo-tree-id17270 . -149) (undo-tree-id17271 . -149) (undo-tree-id17272 . -149) (undo-tree-id17273 . -149) (undo-tree-id17274 . -149) (undo-tree-id17275 . -149) (undo-tree-id17276 . -149) (undo-tree-id17277 . -149) (undo-tree-id17278 . -149) (undo-tree-id17279 . -149) (undo-tree-id17280 . -149) (undo-tree-id17281 . -149) (undo-tree-id17282 . -149) (undo-tree-id17283 . -149) (undo-tree-id17284 . -149) (undo-tree-id17285 . -149) (undo-tree-id17286 . -149) (undo-tree-id17287 . -149) (undo-tree-id17288 . -149) (undo-tree-id17289 . -149) (undo-tree-id17290 . -149) (undo-tree-id17291 . -149) (undo-tree-id17292 . -149) (undo-tree-id17293 . -149) (undo-tree-id17294 . -149) (undo-tree-id17295 . -149) (undo-tree-id17296 . -149) (undo-tree-id17297 . -149) (undo-tree-id17298 . -149) (undo-tree-id17299 . -149) (undo-tree-id17300 . -149) (undo-tree-id17301 . -149) (undo-tree-id17302 . -149) (undo-tree-id17303 . -149) (undo-tree-id17304 . -149) (undo-tree-id17305 . -149) (undo-tree-id17306 . -149) (undo-tree-id17307 . -149) (undo-tree-id17308 . -149) (undo-tree-id17309 . -149) (undo-tree-id17310 . -149) (undo-tree-id17311 . -149) (undo-tree-id17312 . -149) (undo-tree-id17313 . -149) (undo-tree-id17314 . -149) (undo-tree-id17315 . -149) (undo-tree-id17316 . -149) (undo-tree-id17317 . -149) (undo-tree-id17318 . -149) (undo-tree-id17319 . -149) (undo-tree-id17320 . -149) (undo-tree-id17321 . -149) (undo-tree-id17322 . -149) (undo-tree-id17323 . -149) (undo-tree-id17324 . -149) (undo-tree-id17325 . -149) (undo-tree-id17326 . -149) (undo-tree-id17327 . -149) (undo-tree-id17328 . -149) (undo-tree-id17329 . -149) (undo-tree-id17330 . -149) (undo-tree-id17331 . -149) (undo-tree-id17332 . -149) (undo-tree-id17333 . -149) (undo-tree-id17334 . -149) (undo-tree-id17335 . -149) (undo-tree-id17336 . -149) (undo-tree-id17337 . -149) (undo-tree-id17338 . -149) (undo-tree-id17339 . -149) (undo-tree-id17340 . -149) (undo-tree-id17341 . -149) (undo-tree-id17342 . -149) (undo-tree-id17343 . -149) (undo-tree-id17344 . -149) (undo-tree-id17345 . -149) (undo-tree-id17346 . -149) (undo-tree-id17347 . -149) (undo-tree-id17348 . -149) (undo-tree-id17349 . -149) (undo-tree-id17350 . -149) (undo-tree-id17351 . -149) (undo-tree-id17352 . -149) (undo-tree-id17353 . -149) (undo-tree-id17354 . -149) (undo-tree-id17355 . -149) (undo-tree-id17356 . -149) (undo-tree-id17357 . -149) (undo-tree-id17358 . -149) (undo-tree-id17359 . -149) (undo-tree-id17360 . -149) (undo-tree-id17361 . -149) (undo-tree-id17362 . -149) (undo-tree-id17363 . -149) (undo-tree-id17364 . -149) (undo-tree-id17365 . -149) (undo-tree-id17366 . -149) (undo-tree-id17367 . -149) (undo-tree-id17368 . -149) (undo-tree-id17369 . -149) (undo-tree-id17370 . -149) (undo-tree-id17371 . -149) (undo-tree-id17372 . -149) (undo-tree-id17373 . -149) (undo-tree-id17374 . -149) (undo-tree-id17375 . -149) (undo-tree-id17376 . -149) (undo-tree-id17377 . -149) (undo-tree-id17378 . -149) (undo-tree-id17379 . -151) (undo-tree-id17380 . -151) (undo-tree-id17381 . -151) (undo-tree-id17382 . -151) (undo-tree-id17383 . -151) (undo-tree-id17384 . -151) (undo-tree-id17385 . -151) (undo-tree-id17386 . -151) (undo-tree-id17387 . -151) (undo-tree-id17388 . -151) (undo-tree-id17389 . -151) (undo-tree-id17390 . -151) (undo-tree-id17391 . -151) (undo-tree-id17392 . -151) (undo-tree-id17393 . -151) (undo-tree-id17394 . -156) (undo-tree-id17395 . -156) (undo-tree-id17396 . -156) (undo-tree-id17397 . -156) (undo-tree-id17398 . -156) (undo-tree-id17399 . -156) (undo-tree-id17400 . -156) (undo-tree-id17401 . -156) (undo-tree-id17402 . -156) (undo-tree-id17403 . -156) (undo-tree-id17404 . -156) (undo-tree-id17405 . -156) (undo-tree-id17406 . -156) (undo-tree-id17407 . -156) (undo-tree-id17408 . -156) (undo-tree-id17409 . -163) (undo-tree-id17410 . -163) (undo-tree-id17411 . -163) (undo-tree-id17412 . -163) (undo-tree-id17413 . -163) (undo-tree-id17414 . -163) (undo-tree-id17415 . -163) (undo-tree-id17416 . -163) (undo-tree-id17417 . -163) (undo-tree-id17418 . -163) (undo-tree-id17419 . -163) (undo-tree-id17420 . -163) (undo-tree-id17421 . -163) (undo-tree-id17422 . -163) (undo-tree-id17423 . -163) (undo-tree-id17424 . -164) (undo-tree-id17425 . -164) (undo-tree-id17426 . -164) (undo-tree-id17427 . -164) (undo-tree-id17428 . -164) (undo-tree-id17429 . -164) (undo-tree-id17430 . -164) (undo-tree-id17431 . -164) (undo-tree-id17432 . -164) (undo-tree-id17433 . -164) (undo-tree-id17434 . -164) (undo-tree-id17435 . -164) (undo-tree-id17436 . -164) (undo-tree-id17437 . -164) (undo-tree-id17438 . -164) (undo-tree-id17439 . -164) (undo-tree-id17440 . -164) (undo-tree-id17441 . -164) (undo-tree-id17442 . -164) (undo-tree-id17443 . -164) (undo-tree-id17444 . -164) (undo-tree-id17445 . -164) (undo-tree-id17446 . -164) (undo-tree-id17447 . -164) (undo-tree-id17448 . -164) (undo-tree-id17449 . -164) (undo-tree-id17450 . -164) (undo-tree-id17451 . -164) (undo-tree-id17452 . -164) (undo-tree-id17453 . -166) (undo-tree-id17454 . -166) (undo-tree-id17455 . -166) (undo-tree-id17456 . -166) (undo-tree-id17457 . -166) (undo-tree-id17458 . -166) (undo-tree-id17459 . -166) (undo-tree-id17460 . -166) (undo-tree-id17461 . -166) (undo-tree-id17462 . -166) (undo-tree-id17463 . -166) (undo-tree-id17464 . -166) (undo-tree-id17465 . -166) (undo-tree-id17466 . -166) (undo-tree-id17467 . -166) (undo-tree-id17468 . -171) (undo-tree-id17469 . -171) (undo-tree-id17470 . -171) (undo-tree-id17471 . -171) (undo-tree-id17472 . -171) (undo-tree-id17473 . -171) (undo-tree-id17474 . -171) (undo-tree-id17475 . -171) (undo-tree-id17476 . -177) (undo-tree-id17477 . -177) (undo-tree-id17478 . -177) (undo-tree-id17479 . -177) (undo-tree-id17480 . -177) (undo-tree-id17481 . -177) (undo-tree-id17482 . -177) (undo-tree-id17483 . -177) (undo-tree-id17484 . -181) (undo-tree-id17485 . -181) (undo-tree-id17486 . -181) (undo-tree-id17487 . -181) (undo-tree-id17488 . -181) (undo-tree-id17489 . -181) (undo-tree-id17490 . -181) (undo-tree-id17491 . -181) (undo-tree-id17492 . -185) (undo-tree-id17493 . -185) (undo-tree-id17494 . -185) (undo-tree-id17495 . -185) (undo-tree-id17496 . -185) (undo-tree-id17497 . -185) (undo-tree-id17498 . -185) (undo-tree-id17499 . -185) (undo-tree-id17500 . -195) (undo-tree-id17501 . -195) (undo-tree-id17502 . -195) (undo-tree-id17503 . -195) (undo-tree-id17504 . -195) (undo-tree-id17505 . -195) (undo-tree-id17506 . -195) (undo-tree-id17507 . -195) (undo-tree-id17508 . -199) (undo-tree-id17509 . -199) (undo-tree-id17510 . -199) (undo-tree-id17511 . -199) (undo-tree-id17512 . -199) (undo-tree-id17513 . -199) (undo-tree-id17514 . -199) (undo-tree-id17515 . -199) (undo-tree-id17516 . -205) (undo-tree-id17517 . -205) (undo-tree-id17518 . -205) (undo-tree-id17519 . -205) (undo-tree-id17520 . -205) (undo-tree-id17521 . -205) (undo-tree-id17522 . -205) (undo-tree-id17523 . -205) (undo-tree-id17524 . -209) (undo-tree-id17525 . -209) (undo-tree-id17526 . -209) (undo-tree-id17527 . -209) (undo-tree-id17528 . -209) (undo-tree-id17529 . -209) (undo-tree-id17530 . -209) (undo-tree-id17531 . -209) (undo-tree-id17532 . -213) (undo-tree-id17533 . -213) (undo-tree-id17534 . -213) (undo-tree-id17535 . -213) (undo-tree-id17536 . -213) (undo-tree-id17537 . -213) (undo-tree-id17538 . -213) (undo-tree-id17539 . -213) (undo-tree-id17540 . -218) (undo-tree-id17541 . -218) (undo-tree-id17542 . -218) (undo-tree-id17543 . -218) (undo-tree-id17544 . -218) (undo-tree-id17545 . -218) (undo-tree-id17546 . -218) (undo-tree-id17547 . -218) (undo-tree-id17548 . -223) (undo-tree-id17549 . -223) (undo-tree-id17550 . -223) (undo-tree-id17551 . -223) (undo-tree-id17552 . -223) (undo-tree-id17553 . -223) (undo-tree-id17554 . -223) (undo-tree-id17555 . -223) (undo-tree-id17556 . -223) (undo-tree-id17557 . -223) (undo-tree-id17558 . -223) (undo-tree-id17559 . -223) (undo-tree-id17560 . -223) (undo-tree-id17561 . -223) (undo-tree-id17562 . -223) (undo-tree-id17563 . -223) (undo-tree-id17564 . -223) (undo-tree-id17565 . -223) (undo-tree-id17566 . -223) (undo-tree-id17567 . -223) (undo-tree-id17568 . -223) (undo-tree-id17569 . -223) (undo-tree-id17570 . -223) (undo-tree-id17571 . -223) (undo-tree-id17572 . -223) (undo-tree-id17573 . -223) (undo-tree-id17574 . -223) (undo-tree-id17575 . -223) (undo-tree-id17576 . -223) (undo-tree-id17577 . -223) (undo-tree-id17578 . -223) (undo-tree-id17579 . -223) (undo-tree-id17580 . -223) (undo-tree-id17581 . -223) (undo-tree-id17582 . -223) (undo-tree-id17583 . -223) (undo-tree-id17584 . -149) (undo-tree-id17585 . -149) (undo-tree-id17586 . -149) (undo-tree-id17587 . -149) (undo-tree-id17588 . -149) (undo-tree-id17589 . -149) (undo-tree-id17590 . -149) (undo-tree-id17591 . -149) (undo-tree-id17592 . -149) (undo-tree-id17593 . -149) (undo-tree-id17594 . -149) (undo-tree-id17595 . -149) (undo-tree-id17596 . -149) (undo-tree-id17597 . -149) (undo-tree-id17598 . -149) (undo-tree-id17599 . -153) (undo-tree-id17600 . -153) (undo-tree-id17601 . -153) (undo-tree-id17602 . -153) (undo-tree-id17603 . -153) (undo-tree-id17604 . -153) (undo-tree-id17605 . -153) (undo-tree-id17606 . -153) (undo-tree-id17607 . -153) (undo-tree-id17608 . -153) (undo-tree-id17609 . -153) (undo-tree-id17610 . -153) (undo-tree-id17611 . -153) (undo-tree-id17612 . -153) (undo-tree-id17613 . -153) (undo-tree-id17614 . -153) (undo-tree-id17615 . -153) (undo-tree-id17616 . -153) (undo-tree-id17617 . -153) (undo-tree-id17618 . -153) (undo-tree-id17619 . -153) (undo-tree-id17620 . -153) (undo-tree-id17621 . -158) (undo-tree-id17622 . -158) (undo-tree-id17623 . -158) (undo-tree-id17624 . -158) (undo-tree-id17625 . -158) (undo-tree-id17626 . -158) (undo-tree-id17627 . -158) (undo-tree-id17628 . -158) (undo-tree-id17629 . -158) (undo-tree-id17630 . -158) (undo-tree-id17631 . -158) (undo-tree-id17632 . -158) (undo-tree-id17633 . -158) (undo-tree-id17634 . -158) (undo-tree-id17635 . -158) (undo-tree-id17636 . -164) (undo-tree-id17637 . -164) (undo-tree-id17638 . -164) (undo-tree-id17639 . -164) (undo-tree-id17640 . -164) (undo-tree-id17641 . -164) (undo-tree-id17642 . -164) (undo-tree-id17643 . -164) (undo-tree-id17644 . -164) (undo-tree-id17645 . -164) (undo-tree-id17646 . -164) (undo-tree-id17647 . -164) (undo-tree-id17648 . -164) (undo-tree-id17649 . -164) (undo-tree-id17650 . -164) (undo-tree-id17651 . -166) (undo-tree-id17652 . -166) (undo-tree-id17653 . -166) (undo-tree-id17654 . -166) (undo-tree-id17655 . -166) (undo-tree-id17656 . -166) (undo-tree-id17657 . -166) (undo-tree-id17658 . -166) (undo-tree-id17659 . -166) (undo-tree-id17660 . -166) (undo-tree-id17661 . -166) (undo-tree-id17662 . -166) (undo-tree-id17663 . -166) (undo-tree-id17664 . -166) (undo-tree-id17665 . -166) (undo-tree-id17666 . -166) (undo-tree-id17667 . -166) (undo-tree-id17668 . -166) (undo-tree-id17669 . -166) (undo-tree-id17670 . -166) (undo-tree-id17671 . -166) (undo-tree-id17672 . -166) (undo-tree-id17673 . -166) (undo-tree-id17674 . -166) (undo-tree-id17675 . -166) (undo-tree-id17676 . -166) (undo-tree-id17677 . -166) (undo-tree-id17678 . -166) (undo-tree-id17679 . -166) (undo-tree-id17680 . -166) (undo-tree-id17681 . -166) (undo-tree-id17682 . -166) (undo-tree-id17683 . -166) (undo-tree-id17684 . -166) (undo-tree-id17685 . -166) (undo-tree-id17686 . -166) (undo-tree-id17687 . -166) (undo-tree-id17688 . -166) (undo-tree-id17689 . -166) (undo-tree-id17690 . -166) (undo-tree-id17691 . -166) (undo-tree-id17692 . -166) (undo-tree-id17693 . -166) (undo-tree-id17694 . -166) (undo-tree-id17695 . -166) (undo-tree-id17696 . -166) (undo-tree-id17697 . -166) (undo-tree-id17698 . -166) (undo-tree-id17699 . -166) (undo-tree-id17700 . -166) (undo-tree-id17701 . -166) (undo-tree-id17702 . -166) (undo-tree-id17703 . -166) (undo-tree-id17704 . -166) (undo-tree-id17705 . -166) (undo-tree-id17706 . -166) (undo-tree-id17707 . -166) (undo-tree-id17708 . -166) (undo-tree-id17709 . -166) (undo-tree-id17710 . -166) (undo-tree-id17711 . -166) (undo-tree-id17712 . -166) (undo-tree-id17713 . -173) (undo-tree-id17714 . -173) (undo-tree-id17715 . -173) (undo-tree-id17716 . -173) (undo-tree-id17717 . -173) (undo-tree-id17718 . -173) (undo-tree-id17719 . -173) (undo-tree-id17720 . -173) (undo-tree-id17721 . -173) (undo-tree-id17722 . -173) (undo-tree-id17723 . -173) (undo-tree-id17724 . -173) (undo-tree-id17725 . -173) (undo-tree-id17726 . -173) (undo-tree-id17727 . -173) (undo-tree-id17728 . -179) (undo-tree-id17729 . -179) (undo-tree-id17730 . -179) (undo-tree-id17731 . -179) (undo-tree-id17732 . -179) (undo-tree-id17733 . -179) (undo-tree-id17734 . -179) (undo-tree-id17735 . -179) (undo-tree-id17736 . -179) (undo-tree-id17737 . -179) (undo-tree-id17738 . -179) (undo-tree-id17739 . -179) (undo-tree-id17740 . -179) (undo-tree-id17741 . -179) (undo-tree-id17742 . -179) (undo-tree-id17743 . -183) (undo-tree-id17744 . -183) (undo-tree-id17745 . -183) (undo-tree-id17746 . -183) (undo-tree-id17747 . -183) (undo-tree-id17748 . -183) (undo-tree-id17749 . -183) (undo-tree-id17750 . -183) (undo-tree-id17751 . -183) (undo-tree-id17752 . -183) (undo-tree-id17753 . -183) (undo-tree-id17754 . -183) (undo-tree-id17755 . -183) (undo-tree-id17756 . -183) (undo-tree-id17757 . -183) (undo-tree-id17758 . -187) (undo-tree-id17759 . -187) (undo-tree-id17760 . -187) (undo-tree-id17761 . -187) (undo-tree-id17762 . -187) (undo-tree-id17763 . -187) (undo-tree-id17764 . -187) (undo-tree-id17765 . -187) (undo-tree-id17766 . -187) (undo-tree-id17767 . -187) (undo-tree-id17768 . -187) (undo-tree-id17769 . -187) (undo-tree-id17770 . -187) (undo-tree-id17771 . -187) (undo-tree-id17772 . -187) (undo-tree-id17773 . -197) (undo-tree-id17774 . -197) (undo-tree-id17775 . -197) (undo-tree-id17776 . -197) (undo-tree-id17777 . -197) (undo-tree-id17778 . -197) (undo-tree-id17779 . -197) (undo-tree-id17780 . -197) (undo-tree-id17781 . -197) (undo-tree-id17782 . -197) (undo-tree-id17783 . -197) (undo-tree-id17784 . -197) (undo-tree-id17785 . -197) (undo-tree-id17786 . -197) (undo-tree-id17787 . -197) (undo-tree-id17788 . -201) (undo-tree-id17789 . -201) (undo-tree-id17790 . -201) (undo-tree-id17791 . -201) (undo-tree-id17792 . -201) (undo-tree-id17793 . -201) (undo-tree-id17794 . -201) (undo-tree-id17795 . -201) (undo-tree-id17796 . -201) (undo-tree-id17797 . -201) (undo-tree-id17798 . -201) (undo-tree-id17799 . -201) (undo-tree-id17800 . -201) (undo-tree-id17801 . -201) (undo-tree-id17802 . -201) (undo-tree-id17803 . -201) (undo-tree-id17804 . -201) (undo-tree-id17805 . -201) (undo-tree-id17806 . -201) (undo-tree-id17807 . -201) (undo-tree-id17808 . -201) (undo-tree-id17809 . -201) (undo-tree-id17810 . -201) (undo-tree-id17811 . -201) (undo-tree-id17812 . -201) (undo-tree-id17813 . -201) (undo-tree-id17814 . -201) (undo-tree-id17815 . -201) (undo-tree-id17816 . -201) (undo-tree-id17817 . -207) (undo-tree-id17818 . -207) (undo-tree-id17819 . -207) (undo-tree-id17820 . -207) (undo-tree-id17821 . -207) (undo-tree-id17822 . -207) (undo-tree-id17823 . -207) (undo-tree-id17824 . -207) (undo-tree-id17825 . -207) (undo-tree-id17826 . -207) (undo-tree-id17827 . -207) (undo-tree-id17828 . -207) (undo-tree-id17829 . -207) (undo-tree-id17830 . -207) (undo-tree-id17831 . -207) (undo-tree-id17832 . -211) (undo-tree-id17833 . -211) (undo-tree-id17834 . -211) (undo-tree-id17835 . -211) (undo-tree-id17836 . -211) (undo-tree-id17837 . -211) (undo-tree-id17838 . -211) (undo-tree-id17839 . -211) (undo-tree-id17840 . -211) (undo-tree-id17841 . -211) (undo-tree-id17842 . -211) (undo-tree-id17843 . -211) (undo-tree-id17844 . -211) (undo-tree-id17845 . -211) (undo-tree-id17846 . -211) (undo-tree-id17847 . -215) (undo-tree-id17848 . -215) (undo-tree-id17849 . -215) (undo-tree-id17850 . -215) (undo-tree-id17851 . -215) (undo-tree-id17852 . -215) (undo-tree-id17853 . -215) (undo-tree-id17854 . -215) (undo-tree-id17855 . -215) (undo-tree-id17856 . -215) (undo-tree-id17857 . -215) (undo-tree-id17858 . -215) (undo-tree-id17859 . -215) (undo-tree-id17860 . -215) (undo-tree-id17861 . -215) (undo-tree-id17862 . -220) (undo-tree-id17863 . -220) (undo-tree-id17864 . -220) (undo-tree-id17865 . -220) (undo-tree-id17866 . -220) (undo-tree-id17867 . -220) (undo-tree-id17868 . -220) (undo-tree-id17869 . -220) (undo-tree-id17870 . -220) (undo-tree-id17871 . -220) (undo-tree-id17872 . -220) (undo-tree-id17873 . -220) (undo-tree-id17874 . -220) (undo-tree-id17875 . -220) (undo-tree-id17876 . -220) (undo-tree-id17877 . -224) (undo-tree-id17878 . -224) (undo-tree-id17879 . -224) (undo-tree-id17880 . -224) (undo-tree-id17881 . -224) (undo-tree-id17882 . -224) (undo-tree-id17883 . -224) (undo-tree-id17884 . -224) (undo-tree-id17885 . -224) (undo-tree-id17886 . -224) (undo-tree-id17887 . -224) (undo-tree-id17888 . -224) (undo-tree-id17889 . -224) (undo-tree-id17890 . -224) (undo-tree-id17891 . -224) (undo-tree-id17892 . -226) (undo-tree-id17893 . -226) (undo-tree-id17894 . -226) (undo-tree-id17895 . -226) (undo-tree-id17896 . -226) (undo-tree-id17897 . -226) (undo-tree-id17898 . -226) (undo-tree-id17899 . -226) (undo-tree-id17900 . -226) (undo-tree-id17901 . -226) (undo-tree-id17902 . -226) (undo-tree-id17903 . -226) (undo-tree-id17904 . -226) (undo-tree-id17905 . -226) (undo-tree-id17906 . -226) (undo-tree-id17907 . -231) (undo-tree-id17908 . -231) (undo-tree-id17909 . -231) (undo-tree-id17910 . -231) (undo-tree-id17911 . -231) (undo-tree-id17912 . -231) (undo-tree-id17913 . -231) (undo-tree-id17914 . -231) (undo-tree-id17915 . -231) (undo-tree-id17916 . -231) (undo-tree-id17917 . -231) (undo-tree-id17918 . -231) (undo-tree-id17919 . -231) (undo-tree-id17920 . -231) (undo-tree-id17921 . -231) (undo-tree-id17922 . -231) (undo-tree-id17923 . -231) (undo-tree-id17924 . -231) (undo-tree-id17925 . -231) (undo-tree-id17926 . -231) (undo-tree-id17927 . -231) (undo-tree-id17928 . -231) (undo-tree-id17929 . -233) (undo-tree-id17930 . -233) (undo-tree-id17931 . -233) (undo-tree-id17932 . -233) (undo-tree-id17933 . -233) (undo-tree-id17934 . -233) (undo-tree-id17935 . -233) (undo-tree-id17936 . -233) (undo-tree-id17937 . -233) (undo-tree-id17938 . -233) (undo-tree-id17939 . -233) (undo-tree-id17940 . -233) (undo-tree-id17941 . -233) (undo-tree-id17942 . -233) (undo-tree-id17943 . -233) (undo-tree-id17944 . -236) (undo-tree-id17945 . -236) (undo-tree-id17946 . -236) (undo-tree-id17947 . -236) (undo-tree-id17948 . -236) (undo-tree-id17949 . -236) (undo-tree-id17950 . -236) (undo-tree-id17951 . -236) (undo-tree-id17952 . -236) (undo-tree-id17953 . -236) (undo-tree-id17954 . -236) (undo-tree-id17955 . -236) (undo-tree-id17956 . -236) (undo-tree-id17957 . -236) (undo-tree-id17958 . -236) (undo-tree-id17959 . -241) (undo-tree-id17960 . -241) (undo-tree-id17961 . -241) (undo-tree-id17962 . -241) (undo-tree-id17963 . -241) (undo-tree-id17964 . -241) (undo-tree-id17965 . -241) (undo-tree-id17966 . -241) (undo-tree-id17967 . -241) (undo-tree-id17968 . -241) (undo-tree-id17969 . -241) (undo-tree-id17970 . -241) (undo-tree-id17971 . -241) (undo-tree-id17972 . -241) (undo-tree-id17973 . -241) (undo-tree-id17974 . -241) (undo-tree-id17975 . -241) (undo-tree-id17976 . -241) (undo-tree-id17977 . -241) (undo-tree-id17978 . -241) (undo-tree-id17979 . -241) (undo-tree-id17980 . -241) (undo-tree-id17981 . -242) (undo-tree-id17982 . -242) (undo-tree-id17983 . -242) (undo-tree-id17984 . -242) (undo-tree-id17985 . -242) (undo-tree-id17986 . -242) (undo-tree-id17987 . -242) (undo-tree-id17988 . -242) (undo-tree-id17989 . -242) (undo-tree-id17990 . -242) (undo-tree-id17991 . -242) (undo-tree-id17992 . -242) (undo-tree-id17993 . -242) (undo-tree-id17994 . -242) (undo-tree-id17995 . -242) (undo-tree-id17996 . -243) (undo-tree-id17997 . -243) (undo-tree-id17998 . -243) (undo-tree-id17999 . -243) (undo-tree-id18000 . -243) (undo-tree-id18001 . -243) (undo-tree-id18002 . -243) (undo-tree-id18003 . -243) (undo-tree-id18004 . -243) (undo-tree-id18005 . -243) (undo-tree-id18006 . -243) (undo-tree-id18007 . -243) (undo-tree-id18008 . -243) (undo-tree-id18009 . -243) (undo-tree-id18010 . -243) (undo-tree-id18011 . -243) (undo-tree-id18012 . -243) (undo-tree-id18013 . -243) (undo-tree-id18014 . -243) (undo-tree-id18015 . -243) (undo-tree-id18016 . -243) (undo-tree-id18017 . -243) (undo-tree-id18018 . -243) (undo-tree-id18019 . -243) (undo-tree-id18020 . -243) (undo-tree-id18021 . -147) (4718 . 4865) (#(" In contrast, for each recurrent neuron in a simple RNN, there is just one parameter per input and per hidden state dimension, plus a bias term. " 0 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 40 115 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 115 116 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 116 145 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4814) (undo-tree-id18022 . -115) (undo-tree-id18023 . -115) (undo-tree-id18024 . -115) (undo-tree-id18025 . -115) (undo-tree-id18026 . -115) (undo-tree-id18027 . -115) (undo-tree-id18028 . -115) (undo-tree-id18029 . -115) (undo-tree-id18030 . -115) (undo-tree-id18031 . -115) (undo-tree-id18032 . -115) (undo-tree-id18033 . -115) (undo-tree-id18034 . -115) (undo-tree-id18035 . -115) (undo-tree-id18036 . -115) (undo-tree-id18037 . -115) (undo-tree-id18038 . -115) (undo-tree-id18039 . -115) (undo-tree-id18040 . -115) (undo-tree-id18041 . -115) (undo-tree-id18042 . -115) (undo-tree-id18043 . -115) (undo-tree-id18044 . -115) (undo-tree-id18045 . -115) (undo-tree-id18046 . -115) (undo-tree-id18047 . -115) (undo-tree-id18048 . -115) (undo-tree-id18049 . -115) (undo-tree-id18050 . -115) (undo-tree-id18051 . -115) (undo-tree-id18052 . -115) (undo-tree-id18053 . -115) (undo-tree-id18054 . -115) (undo-tree-id18055 . -20) (undo-tree-id18056 . -20) (undo-tree-id18057 . -20) (undo-tree-id18058 . -20) (undo-tree-id18059 . -20) (undo-tree-id18060 . -20) (undo-tree-id18061 . -20) (undo-tree-id18062 . -20) (undo-tree-id18063 . -20) (undo-tree-id18064 . -20) (undo-tree-id18065 . -20) (undo-tree-id18066 . -20) (undo-tree-id18067 . -20) (undo-tree-id18068 . -20) (undo-tree-id18069 . -20)) nil (25772 50561 345986 567000) 0 nil])
([nil nil ((#("In contrast, " 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4817) (undo-tree-id16944 . -12) (undo-tree-id16945 . 13) (undo-tree-id16946 . -12) (undo-tree-id16947 . -12) (undo-tree-id16948 . -13) (undo-tree-id16949 . -12) (undo-tree-id16950 . -1) (undo-tree-id16951 . -1) (undo-tree-id16952 . -1) (undo-tree-id16953 . -1) (undo-tree-id16954 . -1) (undo-tree-id16955 . -1) (undo-tree-id16956 . -1) (undo-tree-id16957 . -1) (undo-tree-id16958 . -1) (undo-tree-id16959 . -1) (undo-tree-id16960 . -1) (undo-tree-id16961 . -1) (undo-tree-id16962 . -1) (undo-tree-id16963 . -1) (undo-tree-id16964 . -1) (undo-tree-id16965 . -1) (undo-tree-id16966 . -1) (undo-tree-id16967 . -1) (undo-tree-id16968 . -1) (undo-tree-id16969 . -1) (undo-tree-id16970 . -1) (undo-tree-id16971 . -1) (undo-tree-id16972 . -10) (undo-tree-id16973 . -10) (undo-tree-id16974 . -10) (undo-tree-id16975 . -10) (undo-tree-id16976 . -10) (undo-tree-id16977 . -10) (undo-tree-id16978 . -10) (undo-tree-id16979 . -10) (undo-tree-id16980 . -10) (undo-tree-id16981 . -10) (undo-tree-id16982 . -10) (undo-tree-id16983 . -10) (undo-tree-id16984 . -10) (undo-tree-id16985 . -10) (undo-tree-id16986 . -10) (undo-tree-id16987 . -10) (undo-tree-id16988 . -10) (undo-tree-id16989 . -10) (undo-tree-id16990 . -10) (undo-tree-id16991 . -10) (undo-tree-id16992 . -10) (undo-tree-id16993 . -10) (undo-tree-id16994 . -11) (undo-tree-id16995 . -11) (undo-tree-id16996 . -11) (undo-tree-id16997 . -11) (undo-tree-id16998 . -11) (undo-tree-id16999 . -11) (undo-tree-id17000 . -11) (undo-tree-id17001 . -11) (undo-tree-id17002 . -11) (undo-tree-id17003 . -11) (undo-tree-id17004 . -11) (undo-tree-id17005 . -11) (undo-tree-id17006 . -11) (undo-tree-id17007 . -11) (undo-tree-id17008 . -11) (undo-tree-id17009 . -11) (undo-tree-id17010 . -11) (undo-tree-id17011 . -11) (undo-tree-id17012 . -11) (undo-tree-id17013 . -11) (undo-tree-id17014 . -11) (undo-tree-id17015 . -11) (undo-tree-id17016 . -11) (undo-tree-id17017 . -11) (undo-tree-id17018 . -11) (undo-tree-id17019 . -11) (undo-tree-id17020 . -11) (undo-tree-id17021 . -11) (undo-tree-id17022 . -11) (undo-tree-id17023 . -12) (undo-tree-id17024 . -12) (undo-tree-id17025 . -12) (undo-tree-id17026 . -12) (undo-tree-id17027 . -12) (undo-tree-id17028 . -12) (undo-tree-id17029 . -12) (undo-tree-id17030 . -12) (undo-tree-id17031 . -12) (undo-tree-id17032 . -12) (undo-tree-id17033 . -12) (undo-tree-id17034 . -12) (undo-tree-id17035 . -12) (undo-tree-id17036 . -12) (undo-tree-id17037 . -12) (undo-tree-id17038 . -12) (undo-tree-id17039 . -12) (undo-tree-id17040 . -12) (undo-tree-id17041 . -12) (undo-tree-id17042 . -12) (undo-tree-id17043 . -12) (undo-tree-id17044 . -12) (undo-tree-id17045 . -12) (undo-tree-id17046 . -13) 4829) nil (25772 50561 344711 643000) 0 nil])
([nil nil ((4817 . 4818) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4817)) nil (25772 50561 344340 278000) 0 nil])
([nil nil ((#("just " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4869) (undo-tree-id16942 . -4) (undo-tree-id16943 . -5)) nil (25772 50592 508855 254000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4946) (undo-tree-id18322 . -1) (undo-tree-id18323 . -1) (undo-tree-id18324 . -1) (undo-tree-id18325 . -1) (undo-tree-id18326 . -1) (undo-tree-id18327 . -1) (undo-tree-id18328 . -1) (undo-tree-id18329 . -1) (undo-tree-id18330 . -1) (undo-tree-id18331 . -1) (undo-tree-id18332 . -1) (undo-tree-id18333 . -1) (undo-tree-id18334 . -1) (undo-tree-id18335 . -1) (undo-tree-id18336 . -1) (undo-tree-id18337 . -1) (undo-tree-id18338 . -1) (undo-tree-id18339 . -1) (undo-tree-id18340 . -1) (undo-tree-id18341 . -1) (undo-tree-id18342 . -1) (undo-tree-id18343 . -1) (undo-tree-id18344 . -1) (undo-tree-id18345 . -1) (undo-tree-id18346 . -1) (undo-tree-id18347 . -1) (undo-tree-id18348 . -1) (undo-tree-id18349 . -1) (undo-tree-id18350 . -1) (undo-tree-id18351 . -1) (undo-tree-id18352 . -1) (undo-tree-id18353 . -1) (undo-tree-id18354 . -1) (undo-tree-id18355 . -1) (undo-tree-id18356 . -1) (undo-tree-id18357 . -1) (undo-tree-id18358 . -1) (undo-tree-id18359 . -1) (undo-tree-id18360 . -1) (undo-tree-id18361 . -1) (undo-tree-id18362 . -1) 4947 (4944 . 4947) (t 25772 50561 455099 395000)) nil (25772 50616 315022 26000) 0 nil] [nil nil ((#("each neuron, linear model has one parameter per input and per time step, plus a bias term.
- For " 0 47 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 47 48 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 48 90 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 90 91 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 91 92 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 92 93 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 93 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4724) (undo-tree-id18146 . -96) (undo-tree-id18147 . 4) (undo-tree-id18148 . -93) (undo-tree-id18149 . -93) (undo-tree-id18150 . 3) (undo-tree-id18151 . -93) (undo-tree-id18152 . -93) (undo-tree-id18153 . -93) (undo-tree-id18154 . -93) (undo-tree-id18155 . -93) (undo-tree-id18156 . -93) (undo-tree-id18157 . -93) (undo-tree-id18158 . -93) (undo-tree-id18159 . -93) (undo-tree-id18160 . -93) (undo-tree-id18161 . -93) (undo-tree-id18162 . -93) (undo-tree-id18163 . -93) (undo-tree-id18164 . -93) (undo-tree-id18165 . -93) (undo-tree-id18166 . -93) (undo-tree-id18167 . -93) (undo-tree-id18168 . -93) (undo-tree-id18169 . -93) (undo-tree-id18170 . -93) (undo-tree-id18171 . -93) (undo-tree-id18172 . -93) (undo-tree-id18173 . -93) (undo-tree-id18174 . -93) (undo-tree-id18175 . -93) (undo-tree-id18176 . -93) (undo-tree-id18177 . -93) (undo-tree-id18178 . -93) (undo-tree-id18179 . -93) (undo-tree-id18180 . -93) (undo-tree-id18181 . -93) (undo-tree-id18182 . -93) (undo-tree-id18183 . -93) (undo-tree-id18184 . -93) (undo-tree-id18185 . -93) (undo-tree-id18186 . -93) (undo-tree-id18187 . -93) (undo-tree-id18188 . -93) (undo-tree-id18189 . -93) (undo-tree-id18190 . -93) (undo-tree-id18191 . -93) (undo-tree-id18192 . -93) (undo-tree-id18193 . -93) (undo-tree-id18194 . -93) (undo-tree-id18195 . -93) (undo-tree-id18196 . -93) (undo-tree-id18197 . -93) (undo-tree-id18198 . -93) (undo-tree-id18199 . -93) (undo-tree-id18200 . -93) (undo-tree-id18201 . -93) (undo-tree-id18202 . -93) (undo-tree-id18203 . -93) (undo-tree-id18204 . -93) (undo-tree-id18205 . -93) (undo-tree-id18206 . -93) (undo-tree-id18207 . -93) (undo-tree-id18208 . -93) (undo-tree-id18209 . -93) (undo-tree-id18210 . -93) (undo-tree-id18211 . -93) (undo-tree-id18212 . -93) (undo-tree-id18213 . -93) (undo-tree-id18214 . -93) (undo-tree-id18215 . -93) (undo-tree-id18216 . -93) (undo-tree-id18217 . -93) (undo-tree-id18218 . -93) (undo-tree-id18219 . -93) (undo-tree-id18220 . -93) (undo-tree-id18221 . -93) (undo-tree-id18222 . -93) (undo-tree-id18223 . -93) (undo-tree-id18224 . -93) (undo-tree-id18225 . -93) (undo-tree-id18226 . -93) (undo-tree-id18227 . -93) (undo-tree-id18228 . -93) (undo-tree-id18229 . -93) (undo-tree-id18230 . -93) (undo-tree-id18231 . -93) (undo-tree-id18232 . -93) (undo-tree-id18233 . -93) (undo-tree-id18234 . -93) (undo-tree-id18235 . -93) (undo-tree-id18236 . -93) (undo-tree-id18237 . -93) (undo-tree-id18238 . -93) (undo-tree-id18239 . -93) (undo-tree-id18240 . -93) (undo-tree-id18241 . -93) (undo-tree-id18242 . -93) (undo-tree-id18243 . -93) (undo-tree-id18244 . -93) (undo-tree-id18245 . -93) (undo-tree-id18246 . -13) (undo-tree-id18247 . -13) (undo-tree-id18248 . -13) (undo-tree-id18249 . -13) (undo-tree-id18250 . -13) (undo-tree-id18251 . -13) (undo-tree-id18252 . -13) (undo-tree-id18253 . -13) (undo-tree-id18254 . -11) (undo-tree-id18255 . -5) (undo-tree-id18256 . -97) (t 25772 50561 455099 395000)) ((4724 . 4821)) (25772 50592 508176 645000) 0 nil])
([nil nil ((4945 . 4946) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4945) (undo-tree-id18260 . -1) (undo-tree-id18261 . -1) (undo-tree-id18262 . -1) (undo-tree-id18263 . -1) (undo-tree-id18264 . -1) (undo-tree-id18265 . -1) (undo-tree-id18266 . -1) (undo-tree-id18267 . -1) (undo-tree-id18268 . -1) (undo-tree-id18269 . -1) (undo-tree-id18270 . -1) (undo-tree-id18271 . -1) (undo-tree-id18272 . -1) (undo-tree-id18273 . -1) (undo-tree-id18274 . -1) (undo-tree-id18275 . -1) (undo-tree-id18276 . -1) (undo-tree-id18277 . -1) (undo-tree-id18278 . -1) (undo-tree-id18279 . -1) (undo-tree-id18280 . -1) (undo-tree-id18281 . -1) (undo-tree-id18282 . -1) (undo-tree-id18283 . -1) (undo-tree-id18284 . -1) (undo-tree-id18285 . -1) (undo-tree-id18286 . -1) (undo-tree-id18287 . -1) (undo-tree-id18288 . -1) (undo-tree-id18289 . -1) (undo-tree-id18290 . -1) (undo-tree-id18291 . -1) (undo-tree-id18292 . -1) (undo-tree-id18293 . -1) (undo-tree-id18294 . -1) (undo-tree-id18295 . -1) (undo-tree-id18296 . -1) (undo-tree-id18297 . -1) (undo-tree-id18298 . -1) (undo-tree-id18299 . -1) (undo-tree-id18300 . -1) (undo-tree-id18301 . -1) (undo-tree-id18302 . -1) (undo-tree-id18303 . -1) (undo-tree-id18304 . -1) (undo-tree-id18305 . -1) (undo-tree-id18306 . -1) (undo-tree-id18307 . -1) (undo-tree-id18308 . -1) (undo-tree-id18309 . -1) (undo-tree-id18310 . -1) (undo-tree-id18311 . -1) (undo-tree-id18312 . -1) (undo-tree-id18313 . -1) (undo-tree-id18314 . -1) (undo-tree-id18315 . -1) (undo-tree-id18316 . -1) (undo-tree-id18317 . -1) (undo-tree-id18318 . -1) (undo-tree-id18319 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4946) (undo-tree-id18320 . 1) (undo-tree-id18321 . -1) 4945) nil (25772 50616 314900 267000) 0 nil])
nil
([nil nil ((4994 . 4995) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4994) (undo-tree-id18259 . -1) 4946) nil (25772 50616 314472 60000) 0 nil])
([nil nil ((#("this " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4949) (undo-tree-id18257 . -4) (undo-tree-id18258 . -5)) nil (25772 50616 314468 438000) 0 nil])
([nil nil ((4949 . 4951)) nil (25772 50616 314416 639000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
model = keras.models.Sequential([
keras.layers.SimpleRNN(
          20, 
          return_sequences=True, input_shape=[None, 1]),
          keras.layers.SimpleRNN(20, return_sequences=True),
          keras.layers.SimpleRNN(1)
])
#+end_src
" 0 34 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 34 35 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 35 40 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 40 66 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 66 67 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 67 68 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 68 69 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 69 91 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 91 92 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 92 93 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 93 108 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 108 124 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 124 125 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 125 134 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 134 135 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 135 139 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 139 146 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 146 147 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 147 152 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 152 153 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 153 154 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 154 158 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 158 161 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 161 162 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 162 163 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 163 165 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 165 197 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 197 198 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 198 208 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 208 209 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 209 218 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 218 219 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 219 223 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 223 224 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 224 226 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 226 258 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 258 259 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 259 260 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 260 261 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 261 262 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent))) 262 263 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 263 264 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 264 265 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 265 274 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 274 275 (fontified t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5280) (undo-tree-id18365 . -274) (undo-tree-id18366 . -265) (undo-tree-id18367 . -265) (undo-tree-id18368 . -275) (undo-tree-id18369 . -265) (undo-tree-id18370 . -35) (undo-tree-id18371 . -35) (undo-tree-id18372 . -35) (undo-tree-id18373 . -35) (undo-tree-id18374 . -35) (undo-tree-id18375 . -35) (undo-tree-id18376 . -35) (undo-tree-id18377 . -35) (undo-tree-id18378 . -69) (undo-tree-id18379 . -69) (undo-tree-id18380 . -69) (undo-tree-id18381 . -69) (undo-tree-id18382 . -69) (undo-tree-id18383 . -69) (undo-tree-id18384 . -69) (undo-tree-id18385 . -69) (undo-tree-id18386 . -93) (undo-tree-id18387 . -93) (undo-tree-id18388 . -93) (undo-tree-id18389 . -93) (undo-tree-id18390 . -93) (undo-tree-id18391 . -93) (undo-tree-id18392 . -93) (undo-tree-id18393 . -93) (undo-tree-id18394 . -108) (undo-tree-id18395 . -108) (undo-tree-id18396 . -108) (undo-tree-id18397 . -108) (undo-tree-id18398 . -108) (undo-tree-id18399 . -108) (undo-tree-id18400 . -108) (undo-tree-id18401 . -108) (undo-tree-id18402 . -165) (undo-tree-id18403 . -165) (undo-tree-id18404 . -165) (undo-tree-id18405 . -165) (undo-tree-id18406 . -165) (undo-tree-id18407 . -165) (undo-tree-id18408 . -165) (undo-tree-id18409 . -165) (undo-tree-id18410 . -226) (undo-tree-id18411 . -226) (undo-tree-id18412 . -226) (undo-tree-id18413 . -226) (undo-tree-id18414 . -226) (undo-tree-id18415 . -226) (undo-tree-id18416 . -226) (undo-tree-id18417 . -226) (undo-tree-id18418 . -262) (undo-tree-id18419 . -262) (undo-tree-id18420 . -262) (undo-tree-id18421 . -262) (undo-tree-id18422 . -262) (undo-tree-id18423 . -262) (undo-tree-id18424 . -262) (undo-tree-id18425 . -262) (undo-tree-id18426 . -262) (undo-tree-id18427 . -262) (undo-tree-id18428 . -262) (undo-tree-id18429 . -262) (undo-tree-id18430 . -262) (undo-tree-id18431 . -262) (undo-tree-id18432 . -262) (undo-tree-id18433 . -265) (undo-tree-id18434 . -265) (undo-tree-id18435 . -265) (undo-tree-id18436 . -265) (undo-tree-id18437 . -265) (undo-tree-id18438 . -265) (undo-tree-id18439 . -265) (undo-tree-id18440 . -265) (undo-tree-id18441 . -265) (undo-tree-id18442 . -265) (undo-tree-id18443 . -265) (undo-tree-id18444 . -265) (undo-tree-id18445 . -265) (undo-tree-id18446 . -265) (undo-tree-id18447 . -265) (undo-tree-id18448 . -265) (undo-tree-id18449 . -275) 5545 (t 25772 50616 592367 504000)) nil (25772 50662 643958 720000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6311 . 6312) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6586) (6311 . 6587)) nil (25772 50662 643862 510000) 0 nil])
([nil nil ((6848 . 6849)) nil (25772 50662 643861 412000) 0 nil])
([nil nil ((6586 . 6587) 6577) nil (25772 50662 643860 301000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 6602) (undo-tree-id18363 . -1) (undo-tree-id18364 . -1)) nil (25772 50662 643858 40000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6603 . 6604) (nil fontified nil 6603 . 6604) (6603 . 6604) 6602) nil (25772 50662 643845 451000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 6577) (undo-tree-id18478 . -9) (undo-tree-id18479 . -9) (undo-tree-id18480 . -8) (undo-tree-id18481 . -10) (undo-tree-id18482 . -10) (undo-tree-id18483 . -10) (undo-tree-id18484 . -10) (undo-tree-id18485 . -10) (undo-tree-id18486 . -10) (undo-tree-id18487 . -10) (undo-tree-id18488 . -10) (undo-tree-id18489 . -8) (undo-tree-id18490 . -8) (undo-tree-id18491 . -8) (undo-tree-id18492 . -8) (undo-tree-id18493 . -8) (undo-tree-id18494 . -8) (undo-tree-id18495 . -8) (undo-tree-id18496 . -8) (undo-tree-id18497 . -8) (undo-tree-id18498 . -8) (undo-tree-id18499 . -8) (undo-tree-id18500 . -8) (undo-tree-id18501 . -8) (undo-tree-id18502 . -8) (undo-tree-id18503 . -8) (undo-tree-id18504 . -8) (undo-tree-id18505 . -8) (undo-tree-id18506 . -8) (undo-tree-id18507 . -10) 6585 (t 25772 50662 693877 952000)) nil (25772 50667 498535 338000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 6577) (undo-tree-id18475 . 1) (undo-tree-id18476 . -1) (undo-tree-id18477 . -1)) nil (25772 50667 498460 614000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 16 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 6577) (undo-tree-id18450 . -34) (undo-tree-id18451 . 35) (undo-tree-id18452 . -15) (undo-tree-id18453 . -16) (undo-tree-id18454 . -15) (undo-tree-id18455 . -15) (undo-tree-id18456 . -15) (undo-tree-id18457 . -15) (undo-tree-id18458 . -15) (undo-tree-id18459 . -15) (undo-tree-id18460 . -15) (undo-tree-id18461 . -15) (undo-tree-id18462 . -15) (undo-tree-id18463 . -15) (undo-tree-id18464 . -15) (undo-tree-id18465 . -15) (undo-tree-id18466 . -15) (undo-tree-id18467 . -15) (undo-tree-id18468 . -15) (undo-tree-id18469 . -15) (undo-tree-id18470 . -15) (undo-tree-id18471 . -15) (undo-tree-id18472 . -15) (undo-tree-id18473 . -34) (undo-tree-id18474 . -35)) nil (25772 50667 498452 970000) 0 nil])
([nil nil ((6576 . 6577) (t 25772 50667 562809 233000) 6574) nil (25772 50669 619033 485000) 0 nil])
([nil nil ((5148 . 5150) (t 25772 50669 671208 477000)) nil (25772 50730 721496 282000) 0 nil])
([nil nil ((5320 . 5321) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5320) (undo-tree-id20670 . -1) (undo-tree-id20671 . -1) (undo-tree-id20672 . -1) (undo-tree-id20673 . -1) (undo-tree-id20674 . -1) (undo-tree-id20675 . -1) (undo-tree-id20676 . -1) (undo-tree-id20677 . -1) (undo-tree-id20678 . -1) (undo-tree-id20679 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5321) (undo-tree-id20680 . -1) (undo-tree-id20681 . -1) (undo-tree-id20682 . -1) (undo-tree-id20683 . -1) (undo-tree-id20684 . -1) (undo-tree-id20685 . -1) (undo-tree-id20686 . -1) (undo-tree-id20687 . -1) (undo-tree-id20688 . -1) (5281 . 5282) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5281) (undo-tree-id20689 . -1) (undo-tree-id20690 . -1) (undo-tree-id20691 . -1) (undo-tree-id20692 . -1) (undo-tree-id20693 . -1) (undo-tree-id20694 . -1) (undo-tree-id20695 . -1) (undo-tree-id20696 . -1) (undo-tree-id20697 . -1) (undo-tree-id20698 . -1) (5215 . 5216) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5215) (undo-tree-id20699 . -1) (undo-tree-id20700 . -1) (undo-tree-id20701 . -1) (undo-tree-id20702 . -1) (undo-tree-id20703 . -1) (undo-tree-id20704 . -1) (undo-tree-id20705 . -1) (undo-tree-id20706 . -1) (undo-tree-id20707 . -1) 5149) nil (25772 50730 721493 679000) 0 nil])
([nil nil ((5502 . 5503) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5502) (undo-tree-id20633 . -1) (undo-tree-id20634 . -1) (undo-tree-id20635 . -1) (undo-tree-id20636 . -1) (undo-tree-id20637 . -1) (undo-tree-id20638 . -1) (undo-tree-id20639 . -1) (undo-tree-id20640 . -1) (undo-tree-id20641 . -1) (5466 . 5467) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5466) (undo-tree-id20642 . -1) (undo-tree-id20643 . -1) (undo-tree-id20644 . -1) (undo-tree-id20645 . -1) (undo-tree-id20646 . -1) (undo-tree-id20647 . -1) (undo-tree-id20648 . -1) (undo-tree-id20649 . -1) (undo-tree-id20650 . -1) (undo-tree-id20651 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5467) (undo-tree-id20652 . -1) (undo-tree-id20653 . -1) (undo-tree-id20654 . -1) (undo-tree-id20655 . -1) (undo-tree-id20656 . -1) (undo-tree-id20657 . -1) (undo-tree-id20658 . -1) (undo-tree-id20659 . -1) (undo-tree-id20660 . -1) (5401 . 5402) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5401) (undo-tree-id20661 . -1) (undo-tree-id20662 . -1) (undo-tree-id20663 . -1) (undo-tree-id20664 . -1) (undo-tree-id20665 . -1) (undo-tree-id20666 . -1) (undo-tree-id20667 . -1) (undo-tree-id20668 . -1) (undo-tree-id20669 . -1) 5320) nil (25772 50730 721469 910000) 0 nil])
([nil nil ((#("Implementing a deep RNN with tf" 0 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20630 . -30) (undo-tree-id20631 . 31) (undo-tree-id20632 . -31)) nil (25772 50730 721448 880000) 0 nil])
([nil nil ((#(".keras is qui" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20627 . -12) (undo-tree-id20628 . 13) (undo-tree-id20629 . -13)) nil (25772 50730 721446 491000) 0 nil])
([nil nil ((#("te simple: jus" 0 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20622 . -13) (undo-tree-id20623 . 14) (undo-tree-id20624 . 14) (undo-tree-id20625 . -2) (undo-tree-id20626 . -14)) nil (25772 50730 721443 223000) 0 nil])
([nil nil ((#("t stack recurrent layers" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20580 . -23) (undo-tree-id20581 . 24) (undo-tree-id20582 . -7) (undo-tree-id20583 . -7) (undo-tree-id20584 . -7) (undo-tree-id20585 . -7) (undo-tree-id20586 . -7) (undo-tree-id20587 . -7) (undo-tree-id20588 . -7) (undo-tree-id20589 . -7) (undo-tree-id20590 . -7) (undo-tree-id20591 . -7) (undo-tree-id20592 . -7) (undo-tree-id20593 . -7) (undo-tree-id20594 . -7) (undo-tree-id20595 . -7) (undo-tree-id20596 . -7) (undo-tree-id20597 . -7) (undo-tree-id20598 . -7) (undo-tree-id20599 . -7) (undo-tree-id20600 . -7) (undo-tree-id20601 . -7) (undo-tree-id20602 . -7) (undo-tree-id20603 . -7) (undo-tree-id20604 . -7) (undo-tree-id20605 . -7) (undo-tree-id20606 . -12) (undo-tree-id20607 . -12) (undo-tree-id20608 . -12) (undo-tree-id20609 . -12) (undo-tree-id20610 . -12) (undo-tree-id20611 . -12) (undo-tree-id20612 . -12) (undo-tree-id20613 . -12) (undo-tree-id20614 . -12) (undo-tree-id20615 . -12) (undo-tree-id20616 . -12) (undo-tree-id20617 . -12) (undo-tree-id20618 . -12) (undo-tree-id20619 . -12) (undo-tree-id20620 . -12) (undo-tree-id20621 . -24)) nil (25772 50730 721437 627000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20577 . 1) (undo-tree-id20578 . -1) (undo-tree-id20579 . -1)) nil (25772 50730 721413 282000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20574 . 1) (undo-tree-id20575 . -1) (undo-tree-id20576 . -1)) nil (25772 50730 721410 727000) 0 nil])
([nil nil ((#("In " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20571 . -2) (undo-tree-id20572 . 3) (undo-tree-id20573 . -3)) nil (25772 50730 721407 404000) 0 nil])
([nil nil ((#("this " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20568 . -4) (undo-tree-id20569 . 5) (undo-tree-id20570 . -5)) nil (25772 50730 721405 52000) 0 nil])
([nil nil ((#("example" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20565 . -6) (undo-tree-id20566 . 7) (undo-tree-id20567 . -7)) nil (25772 50730 721402 677000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20562 . -1) (undo-tree-id20563 . 2) (undo-tree-id20564 . -2)) nil (25772 50730 721398 855000) 0 nil])
([nil nil ((#("we " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150) (undo-tree-id20559 . -2) (undo-tree-id20560 . 3) (undo-tree-id20561 . -3)) nil (25772 50730 721396 155000) 0 nil])
([nil nil ((5150 . 5151) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5150)) nil (25772 50730 721393 705000) 0 nil])
([nil nil ((5148 . 5447) (#("- Note that the last layer is not ideal: it must have a single unit because we want to forecast a univariate time series, and this means we must have a single output value per time step. However, having a single unit means that the hidden state is just a single number. 
- Use three SimpleRNN layers" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 40 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 40 41 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 81 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 81 121 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 121 122 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 122 186 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 186 187 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 187 222 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 222 223 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 223 270 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 270 271 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 271 272 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 272 273 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 273 299 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5148) (undo-tree-id19543 . -299) (undo-tree-id19544 . -299) (undo-tree-id19545 . 26) (undo-tree-id19546 . -273) (undo-tree-id19547 . -273) (undo-tree-id19548 . 25) (undo-tree-id19549 . -299) (undo-tree-id19550 . -299) (undo-tree-id19551 . -299) (undo-tree-id19552 . -299) (undo-tree-id19553 . -299) (undo-tree-id19554 . -299) (undo-tree-id19555 . -299) (undo-tree-id19556 . -299) (undo-tree-id19557 . -299) (undo-tree-id19558 . -299) (undo-tree-id19559 . -299) (undo-tree-id19560 . -299) (undo-tree-id19561 . -299) (undo-tree-id19562 . -299) (undo-tree-id19563 . -299) (undo-tree-id19564 . -299) (undo-tree-id19565 . -299) (undo-tree-id19566 . -299) (undo-tree-id19567 . -299) (undo-tree-id19568 . -299) (undo-tree-id19569 . -299) (undo-tree-id19570 . -299) (undo-tree-id19571 . -299) (undo-tree-id19572 . -299) (undo-tree-id19573 . -299) (undo-tree-id19574 . -299) (undo-tree-id19575 . -299) (undo-tree-id19576 . -299) (undo-tree-id19577 . -299) (undo-tree-id19578 . -299) (undo-tree-id19579 . -299) (undo-tree-id19580 . -299) (undo-tree-id19581 . -299) (undo-tree-id19582 . -299) (undo-tree-id19583 . -299) (undo-tree-id19584 . -299) (undo-tree-id19585 . -299) (undo-tree-id19586 . -299) (undo-tree-id19587 . -299) (undo-tree-id19588 . -299) (undo-tree-id19589 . -299) (undo-tree-id19590 . -273) (undo-tree-id19591 . -273) (undo-tree-id19592 . -273) (undo-tree-id19593 . -273) (undo-tree-id19594 . -273) (undo-tree-id19595 . -273) (undo-tree-id19596 . -273) (undo-tree-id19597 . -273) (undo-tree-id19598 . -272) (undo-tree-id19599 . -272) (undo-tree-id19600 . -272) (undo-tree-id19601 . -272) (undo-tree-id19602 . -272) (undo-tree-id19603 . -272) (undo-tree-id19604 . -272) (undo-tree-id19605 . -272) (undo-tree-id19606 . -272) (undo-tree-id19607 . -273) (undo-tree-id19608 . -273) (undo-tree-id19609 . -273) (undo-tree-id19610 . -273) (undo-tree-id19611 . -273) (undo-tree-id19612 . -273) (undo-tree-id19613 . -273) (undo-tree-id19614 . -273) (undo-tree-id19615 . -273) (undo-tree-id19616 . -272) (undo-tree-id19617 . -272) (undo-tree-id19618 . -272) (undo-tree-id19619 . -272) (undo-tree-id19620 . -272) (undo-tree-id19621 . -272) (undo-tree-id19622 . -272) (undo-tree-id19623 . -272) (undo-tree-id19624 . -272) (undo-tree-id19625 . -272) (undo-tree-id19626 . -272) (undo-tree-id19627 . -272) (undo-tree-id19628 . -272) (undo-tree-id19629 . -272) (undo-tree-id19630 . -272) (undo-tree-id19631 . -272) (undo-tree-id19632 . -272) (undo-tree-id19633 . -272) (undo-tree-id19634 . -272) (undo-tree-id19635 . -272) (undo-tree-id19636 . -273) (undo-tree-id19637 . -273) (undo-tree-id19638 . -273) (undo-tree-id19639 . -273) (undo-tree-id19640 . -273) (undo-tree-id19641 . -273) (undo-tree-id19642 . -273) (undo-tree-id19643 . -273) (undo-tree-id19644 . -273) (undo-tree-id19645 . -273) (undo-tree-id19646 . -273) (undo-tree-id19647 . -273) (undo-tree-id19648 . -273) (undo-tree-id19649 . -273) (undo-tree-id19650 . -273) (undo-tree-id19651 . -273) (undo-tree-id19652 . -299) (undo-tree-id19653 . -299) (undo-tree-id19654 . -299) (undo-tree-id19655 . -299) (undo-tree-id19656 . -299) (undo-tree-id19657 . -299) (undo-tree-id19658 . -299) (undo-tree-id19659 . -299) (undo-tree-id19660 . -299) (undo-tree-id19661 . -299) (undo-tree-id19662 . -299) (undo-tree-id19663 . -299) (undo-tree-id19664 . -299) (undo-tree-id19665 . -299) (undo-tree-id19666 . -299) (undo-tree-id19667 . -299) (undo-tree-id19668 . -299) (undo-tree-id19669 . -299) (undo-tree-id19670 . -299) (undo-tree-id19671 . -299) (undo-tree-id19672 . -299) (undo-tree-id19673 . -299) (undo-tree-id19674 . -299) (undo-tree-id19675 . -299) (undo-tree-id19676 . -299) (undo-tree-id19677 . -299) (undo-tree-id19678 . -299) (undo-tree-id19679 . -299) (undo-tree-id19680 . -299) (undo-tree-id19681 . -299) (undo-tree-id19682 . -299) (undo-tree-id19683 . -299) (undo-tree-id19684 . -299) (undo-tree-id19685 . -299) (undo-tree-id19686 . -299) (undo-tree-id19687 . -299) (undo-tree-id19688 . -299) (undo-tree-id19689 . -299) (undo-tree-id19690 . -299) (undo-tree-id19691 . -299) (undo-tree-id19692 . -299) (undo-tree-id19693 . -299) (undo-tree-id19694 . -299) (undo-tree-id19695 . -299) (undo-tree-id19696 . -299) (undo-tree-id19697 . -299) (undo-tree-id19698 . -299) (undo-tree-id19699 . -299) (undo-tree-id19700 . -299) (undo-tree-id19701 . -299) (undo-tree-id19702 . -299) (undo-tree-id19703 . -299) (undo-tree-id19704 . -299) (undo-tree-id19705 . -299) (undo-tree-id19706 . -299) (undo-tree-id19707 . -299) (undo-tree-id19708 . -299) (undo-tree-id19709 . -299) (undo-tree-id19710 . -299) (undo-tree-id19711 . -299) (undo-tree-id19712 . -299) (undo-tree-id19713 . -299) (undo-tree-id19714 . -299) (undo-tree-id19715 . -299) (undo-tree-id19716 . -299) (undo-tree-id19717 . -299) (undo-tree-id19718 . -299) (undo-tree-id19719 . -299) (undo-tree-id19720 . -299) (undo-tree-id19721 . -299) (undo-tree-id19722 . -299) (undo-tree-id19723 . -299) (undo-tree-id19724 . -299) (undo-tree-id19725 . -299) (undo-tree-id19726 . -299) (undo-tree-id19727 . -299) (undo-tree-id19728 . -299) (undo-tree-id19729 . -299) (undo-tree-id19730 . -299) (undo-tree-id19731 . -299) (undo-tree-id19732 . -299) (undo-tree-id19733 . -299) (undo-tree-id19734 . -299) (undo-tree-id19735 . -299) (undo-tree-id19736 . -299) (undo-tree-id19737 . -299) (undo-tree-id19738 . -299) (undo-tree-id19739 . -299) (undo-tree-id19740 . -299) (undo-tree-id19741 . -299) (undo-tree-id19742 . -299) (undo-tree-id19743 . -299) (undo-tree-id19744 . -299) (undo-tree-id19745 . -299) (undo-tree-id19746 . -299) (undo-tree-id19747 . -299) (undo-tree-id19748 . -299) (undo-tree-id19749 . -299) (undo-tree-id19750 . -299) (undo-tree-id19751 . -299) (undo-tree-id19752 . -299) (undo-tree-id19753 . -299) (undo-tree-id19754 . -299) (undo-tree-id19755 . -299) (undo-tree-id19756 . -299) (undo-tree-id19757 . -299) (undo-tree-id19758 . -299) (undo-tree-id19759 . -299) (undo-tree-id19760 . -299) (undo-tree-id19761 . -299) (undo-tree-id19762 . -299) (undo-tree-id19763 . -299) (undo-tree-id19764 . -299) (undo-tree-id19765 . -299) (undo-tree-id19766 . -299) (undo-tree-id19767 . -299) (undo-tree-id19768 . -299) (undo-tree-id19769 . -299) (undo-tree-id19770 . -299) (undo-tree-id19771 . -299) (undo-tree-id19772 . -299) (undo-tree-id19773 . -299) (undo-tree-id19774 . -299) (undo-tree-id19775 . -299) (undo-tree-id19776 . -299) (undo-tree-id19777 . -273) (undo-tree-id19778 . -273) (undo-tree-id19779 . -273) (undo-tree-id19780 . -273) (undo-tree-id19781 . -273) (undo-tree-id19782 . -273) (undo-tree-id19783 . -273) (undo-tree-id19784 . -273) (undo-tree-id19785 . -273) (undo-tree-id19786 . -273) (undo-tree-id19787 . -273) (undo-tree-id19788 . -273) (undo-tree-id19789 . -273) (undo-tree-id19790 . -273) (undo-tree-id19791 . -273) (undo-tree-id19792 . -273) (undo-tree-id19793 . -273) (undo-tree-id19794 . -273) (undo-tree-id19795 . -273) (undo-tree-id19796 . -273) (undo-tree-id19797 . -273) (undo-tree-id19798 . -273) (undo-tree-id19799 . -273) (undo-tree-id19800 . -273) (undo-tree-id19801 . -273) (undo-tree-id19802 . -273) (undo-tree-id19803 . -273) (undo-tree-id19804 . -273) (undo-tree-id19805 . -273) (undo-tree-id19806 . -273) (undo-tree-id19807 . -273) (undo-tree-id19808 . -273) (undo-tree-id19809 . -273) (undo-tree-id19810 . -273) (undo-tree-id19811 . -273) (undo-tree-id19812 . -273) (undo-tree-id19813 . -273) (undo-tree-id19814 . -273) (undo-tree-id19815 . -273) (undo-tree-id19816 . -273) (undo-tree-id19817 . -273) (undo-tree-id19818 . -273) (undo-tree-id19819 . -273) (undo-tree-id19820 . -273) (undo-tree-id19821 . -273) (undo-tree-id19822 . -273) (undo-tree-id19823 . -273) (undo-tree-id19824 . -273) (undo-tree-id19825 . -273) (undo-tree-id19826 . -273) (undo-tree-id19827 . -273) (undo-tree-id19828 . -273) (undo-tree-id19829 . -273) (undo-tree-id19830 . -273) (undo-tree-id19831 . -273) (undo-tree-id19832 . -273) (undo-tree-id19833 . -273) (undo-tree-id19834 . -273) (undo-tree-id19835 . -273) (undo-tree-id19836 . -273) (undo-tree-id19837 . -273) (undo-tree-id19838 . -273) (undo-tree-id19839 . -273) (undo-tree-id19840 . -273) (undo-tree-id19841 . -273) (undo-tree-id19842 . -273) (undo-tree-id19843 . -273) (undo-tree-id19844 . -273) (undo-tree-id19845 . -273) (undo-tree-id19846 . -273) (undo-tree-id19847 . -273) (undo-tree-id19848 . -273) (undo-tree-id19849 . -273) (undo-tree-id19850 . -273) (undo-tree-id19851 . -273) (undo-tree-id19852 . -273) (undo-tree-id19853 . -273) (undo-tree-id19854 . -273) (undo-tree-id19855 . -273) (undo-tree-id19856 . -273) (undo-tree-id19857 . -273) (undo-tree-id19858 . -273) (undo-tree-id19859 . -273) (undo-tree-id19860 . -273) (undo-tree-id19861 . -273) (undo-tree-id19862 . -273) (undo-tree-id19863 . -273) (undo-tree-id19864 . -273) (undo-tree-id19865 . -273) (undo-tree-id19866 . -273) (undo-tree-id19867 . -273) (undo-tree-id19868 . -273) (undo-tree-id19869 . -273) (undo-tree-id19870 . -273) (undo-tree-id19871 . -273) (undo-tree-id19872 . -273) (undo-tree-id19873 . -273) (undo-tree-id19874 . -273) (undo-tree-id19875 . -273) (undo-tree-id19876 . -273) (undo-tree-id19877 . -273) (undo-tree-id19878 . -273) (undo-tree-id19879 . -273) (undo-tree-id19880 . -273) (undo-tree-id19881 . -273) (undo-tree-id19882 . -273) (undo-tree-id19883 . -273) (undo-tree-id19884 . -273) (undo-tree-id19885 . -273) (undo-tree-id19886 . -273) (undo-tree-id19887 . -273) (undo-tree-id19888 . -273) (undo-tree-id19889 . -273) (undo-tree-id19890 . -273) (undo-tree-id19891 . -273) (undo-tree-id19892 . -273) (undo-tree-id19893 . -273) (undo-tree-id19894 . -273) (undo-tree-id19895 . -273) (undo-tree-id19896 . -273) (undo-tree-id19897 . -273) (undo-tree-id19898 . -273) (undo-tree-id19899 . -273) (undo-tree-id19900 . -273) (undo-tree-id19901 . -273) (undo-tree-id19902 . -273) (undo-tree-id19903 . -273) (undo-tree-id19904 . -273) (undo-tree-id19905 . -273) (undo-tree-id19906 . -273) (undo-tree-id19907 . -273) (undo-tree-id19908 . -273) (undo-tree-id19909 . -273) (undo-tree-id19910 . -273) (undo-tree-id19911 . -273) (undo-tree-id19912 . -273) (undo-tree-id19913 . -273) (undo-tree-id19914 . -273) (undo-tree-id19915 . -273) (undo-tree-id19916 . -273) (undo-tree-id19917 . -273) (undo-tree-id19918 . -273) (undo-tree-id19919 . -273) (undo-tree-id19920 . -273) (undo-tree-id19921 . -273) (undo-tree-id19922 . -273) (undo-tree-id19923 . -273) (undo-tree-id19924 . -273) (undo-tree-id19925 . -273) (undo-tree-id19926 . -273) (undo-tree-id19927 . -273) (undo-tree-id19928 . -273) (undo-tree-id19929 . -273) (undo-tree-id19930 . -273) (undo-tree-id19931 . -273) (undo-tree-id19932 . -273) (undo-tree-id19933 . -273) (undo-tree-id19934 . -273) (undo-tree-id19935 . -273) (undo-tree-id19936 . -273) (undo-tree-id19937 . -273) (undo-tree-id19938 . -273) (undo-tree-id19939 . -273) (undo-tree-id19940 . -273) (undo-tree-id19941 . -273) (undo-tree-id19942 . -273) (undo-tree-id19943 . -273) (undo-tree-id19944 . -273) (undo-tree-id19945 . -273) (undo-tree-id19946 . -273) (undo-tree-id19947 . -273) (undo-tree-id19948 . -273) (undo-tree-id19949 . -273) (undo-tree-id19950 . -273) (undo-tree-id19951 . -273) (undo-tree-id19952 . -273) (undo-tree-id19953 . -273) (undo-tree-id19954 . -273) (undo-tree-id19955 . -273) (undo-tree-id19956 . -273) (undo-tree-id19957 . -273) (undo-tree-id19958 . -273) (undo-tree-id19959 . -273) (undo-tree-id19960 . -273) (undo-tree-id19961 . -273) (undo-tree-id19962 . -273) (undo-tree-id19963 . -273) (undo-tree-id19964 . -273) (undo-tree-id19965 . -273) (undo-tree-id19966 . -273) (undo-tree-id19967 . -273) (undo-tree-id19968 . -273) (undo-tree-id19969 . -273) (undo-tree-id19970 . -273) (undo-tree-id19971 . -273) (undo-tree-id19972 . -273) (undo-tree-id19973 . -273) (undo-tree-id19974 . -273) (undo-tree-id19975 . -273) (undo-tree-id19976 . -273) (undo-tree-id19977 . -273) (undo-tree-id19978 . -273) (undo-tree-id19979 . -273) (undo-tree-id19980 . -273) (undo-tree-id19981 . -273) (undo-tree-id19982 . -273) (undo-tree-id19983 . -273) (undo-tree-id19984 . -273) (undo-tree-id19985 . -273) (undo-tree-id19986 . -273) (undo-tree-id19987 . -273) (undo-tree-id19988 . -273) (undo-tree-id19989 . -273) (undo-tree-id19990 . -273) (undo-tree-id19991 . -273) (undo-tree-id19992 . -273) (undo-tree-id19993 . -273) (undo-tree-id19994 . -273) (undo-tree-id19995 . -273) (undo-tree-id19996 . -273) (undo-tree-id19997 . -273) (undo-tree-id19998 . -273) (undo-tree-id19999 . -273) (undo-tree-id20000 . -273) (undo-tree-id20001 . -273) (undo-tree-id20002 . -273) (undo-tree-id20003 . -273) (undo-tree-id20004 . -273) (undo-tree-id20005 . -273) (undo-tree-id20006 . -273) (undo-tree-id20007 . -273) (undo-tree-id20008 . -273) (undo-tree-id20009 . -273) (undo-tree-id20010 . -273) (undo-tree-id20011 . -273) (undo-tree-id20012 . -273) (undo-tree-id20013 . -273) (undo-tree-id20014 . -273) (undo-tree-id20015 . -273) (undo-tree-id20016 . -273) (undo-tree-id20017 . -273) (undo-tree-id20018 . -273) (undo-tree-id20019 . -273) (undo-tree-id20020 . -273) (undo-tree-id20021 . -273) (undo-tree-id20022 . -273) (undo-tree-id20023 . -273) (undo-tree-id20024 . -273) (undo-tree-id20025 . -273) (undo-tree-id20026 . -273) (undo-tree-id20027 . -273) (undo-tree-id20028 . -273) (undo-tree-id20029 . -273) (undo-tree-id20030 . -273) (undo-tree-id20031 . -273) (undo-tree-id20032 . -273) (undo-tree-id20033 . -273) (undo-tree-id20034 . -273) (undo-tree-id20035 . -273) (undo-tree-id20036 . -273) (undo-tree-id20037 . -273) (undo-tree-id20038 . -273) (undo-tree-id20039 . -273) (undo-tree-id20040 . -273) (undo-tree-id20041 . -273) (undo-tree-id20042 . -273) (undo-tree-id20043 . -273) (undo-tree-id20044 . -273) (undo-tree-id20045 . -273) (undo-tree-id20046 . -273) (undo-tree-id20047 . -273) (undo-tree-id20048 . -273) (undo-tree-id20049 . -273) (undo-tree-id20050 . -273) (undo-tree-id20051 . -273) (undo-tree-id20052 . -273) (undo-tree-id20053 . -273) (undo-tree-id20054 . -273) (undo-tree-id20055 . -273) (undo-tree-id20056 . -273) (undo-tree-id20057 . -273) (undo-tree-id20058 . -273) (undo-tree-id20059 . -273) (undo-tree-id20060 . -273) (undo-tree-id20061 . -273) (undo-tree-id20062 . -273) (undo-tree-id20063 . -273) (undo-tree-id20064 . -273) (undo-tree-id20065 . -273) (undo-tree-id20066 . -273) (undo-tree-id20067 . -273) (undo-tree-id20068 . -273) (undo-tree-id20069 . -273) (undo-tree-id20070 . -273) (undo-tree-id20071 . -273) (undo-tree-id20072 . -273) (undo-tree-id20073 . -273) (undo-tree-id20074 . -273) (undo-tree-id20075 . -273) (undo-tree-id20076 . -273) (undo-tree-id20077 . -273) (undo-tree-id20078 . -273) (undo-tree-id20079 . -273) (undo-tree-id20080 . -273) (undo-tree-id20081 . -273) (undo-tree-id20082 . -273) (undo-tree-id20083 . -273) (undo-tree-id20084 . -273) (undo-tree-id20085 . -273) (undo-tree-id20086 . -273) (undo-tree-id20087 . -273) (undo-tree-id20088 . -273) (undo-tree-id20089 . -273) (undo-tree-id20090 . -273) (undo-tree-id20091 . -273) (undo-tree-id20092 . -273) (undo-tree-id20093 . -273) (undo-tree-id20094 . -273) (undo-tree-id20095 . -273) (undo-tree-id20096 . -273) (undo-tree-id20097 . -273) (undo-tree-id20098 . -273) (undo-tree-id20099 . -273) (undo-tree-id20100 . -273) (undo-tree-id20101 . -273) (undo-tree-id20102 . -273) (undo-tree-id20103 . -273) (undo-tree-id20104 . -273) (undo-tree-id20105 . -273) (undo-tree-id20106 . -273) (undo-tree-id20107 . -273) (undo-tree-id20108 . -273) (undo-tree-id20109 . -273) (undo-tree-id20110 . -273) (undo-tree-id20111 . -273) (undo-tree-id20112 . -273) (undo-tree-id20113 . -273) (undo-tree-id20114 . -273) (undo-tree-id20115 . -273) (undo-tree-id20116 . -273) (undo-tree-id20117 . -273) (undo-tree-id20118 . -273) (undo-tree-id20119 . -273) (undo-tree-id20120 . -273) (undo-tree-id20121 . -273) (undo-tree-id20122 . -273) (undo-tree-id20123 . -273) (undo-tree-id20124 . -273) (undo-tree-id20125 . -273) (undo-tree-id20126 . -273) (undo-tree-id20127 . -273) (undo-tree-id20128 . -273) (undo-tree-id20129 . -273) (undo-tree-id20130 . -273) (undo-tree-id20131 . -273) (undo-tree-id20132 . -273) (undo-tree-id20133 . -273) (undo-tree-id20134 . -273) (undo-tree-id20135 . -273) (undo-tree-id20136 . -273) (undo-tree-id20137 . -273) (undo-tree-id20138 . -273) (undo-tree-id20139 . -273) (undo-tree-id20140 . -273) (undo-tree-id20141 . -273) (undo-tree-id20142 . -273) (undo-tree-id20143 . -273) (undo-tree-id20144 . -273) (undo-tree-id20145 . -273) (undo-tree-id20146 . -273) (undo-tree-id20147 . -273) (undo-tree-id20148 . -273) (undo-tree-id20149 . -273) (undo-tree-id20150 . -273) (undo-tree-id20151 . -273) (undo-tree-id20152 . -273) (undo-tree-id20153 . -273) (undo-tree-id20154 . -273) (undo-tree-id20155 . -273) (undo-tree-id20156 . -273) (undo-tree-id20157 . -273) (undo-tree-id20158 . -273) (undo-tree-id20159 . -273) (undo-tree-id20160 . -273) (undo-tree-id20161 . -273) (undo-tree-id20162 . -273) (undo-tree-id20163 . -273) (undo-tree-id20164 . -273) (undo-tree-id20165 . -273) (undo-tree-id20166 . -273) (undo-tree-id20167 . -273) (undo-tree-id20168 . -273) (undo-tree-id20169 . -273) (undo-tree-id20170 . -273) (undo-tree-id20171 . -273) (undo-tree-id20172 . -273) (undo-tree-id20173 . -273) (undo-tree-id20174 . -273) (undo-tree-id20175 . -273) (undo-tree-id20176 . -273) (undo-tree-id20177 . -273) (undo-tree-id20178 . -273) (undo-tree-id20179 . -273) (undo-tree-id20180 . -273) (undo-tree-id20181 . -273) (undo-tree-id20182 . -273) (undo-tree-id20183 . -273) (undo-tree-id20184 . -273) (undo-tree-id20185 . -273) (undo-tree-id20186 . -273) (undo-tree-id20187 . -273) (undo-tree-id20188 . -273) (undo-tree-id20189 . -273) (undo-tree-id20190 . -273) (undo-tree-id20191 . -273) (undo-tree-id20192 . -273) (undo-tree-id20193 . -273) (undo-tree-id20194 . -273) (undo-tree-id20195 . -273) (undo-tree-id20196 . -273) (undo-tree-id20197 . -273) (undo-tree-id20198 . -273) (undo-tree-id20199 . -273) (undo-tree-id20200 . -273) (undo-tree-id20201 . -273) (undo-tree-id20202 . -273) (undo-tree-id20203 . -273) (undo-tree-id20204 . -273) (undo-tree-id20205 . -273) (undo-tree-id20206 . -273) (undo-tree-id20207 . -273) (undo-tree-id20208 . -273) (undo-tree-id20209 . -273) (undo-tree-id20210 . -273) (undo-tree-id20211 . -273) (undo-tree-id20212 . -273) (undo-tree-id20213 . -273) (undo-tree-id20214 . -273) (undo-tree-id20215 . -273) (undo-tree-id20216 . -273) (undo-tree-id20217 . -273) (undo-tree-id20218 . -273) (undo-tree-id20219 . -273) (undo-tree-id20220 . -273) (undo-tree-id20221 . -273) (undo-tree-id20222 . -273) (undo-tree-id20223 . -273) (undo-tree-id20224 . -273) (undo-tree-id20225 . -273) (undo-tree-id20226 . -273) (undo-tree-id20227 . -273) (undo-tree-id20228 . -273) (undo-tree-id20229 . -273) (undo-tree-id20230 . -273) (undo-tree-id20231 . -273) (undo-tree-id20232 . -273) (undo-tree-id20233 . -273) (undo-tree-id20234 . -273) (undo-tree-id20235 . -273) (undo-tree-id20236 . -273) (undo-tree-id20237 . -273) (undo-tree-id20238 . -273) (undo-tree-id20239 . -273) (undo-tree-id20240 . -273) (undo-tree-id20241 . -273) (undo-tree-id20242 . -273) (undo-tree-id20243 . -273) (undo-tree-id20244 . -273) (undo-tree-id20245 . -273) (undo-tree-id20246 . -273) (undo-tree-id20247 . -273) (undo-tree-id20248 . -273) (undo-tree-id20249 . -273) (undo-tree-id20250 . -273) (undo-tree-id20251 . -273) (undo-tree-id20252 . -273) (undo-tree-id20253 . -273) (undo-tree-id20254 . -273) (undo-tree-id20255 . -273) (undo-tree-id20256 . -273) (undo-tree-id20257 . -273) (undo-tree-id20258 . -273) (undo-tree-id20259 . -273) (undo-tree-id20260 . -273) (undo-tree-id20261 . -273) (undo-tree-id20262 . -273) (undo-tree-id20263 . -273) (undo-tree-id20264 . -273) (undo-tree-id20265 . -273) (undo-tree-id20266 . -273) (undo-tree-id20267 . -273) (undo-tree-id20268 . -273) (undo-tree-id20269 . -273) (undo-tree-id20270 . -273) (undo-tree-id20271 . -273) (undo-tree-id20272 . -273) (undo-tree-id20273 . -273) (undo-tree-id20274 . -273) (undo-tree-id20275 . -273) (undo-tree-id20276 . -273) (undo-tree-id20277 . -273) (undo-tree-id20278 . -273) (undo-tree-id20279 . -273) (undo-tree-id20280 . -273) (undo-tree-id20281 . -275) (undo-tree-id20282 . -275) (undo-tree-id20283 . -275) (undo-tree-id20284 . -275) (undo-tree-id20285 . -275) (undo-tree-id20286 . -275) (undo-tree-id20287 . -275) (undo-tree-id20288 . -275) (undo-tree-id20289 . -275) (undo-tree-id20290 . -275) (undo-tree-id20291 . -275) (undo-tree-id20292 . -275) (undo-tree-id20293 . -275) (undo-tree-id20294 . -275) (undo-tree-id20295 . -275) (undo-tree-id20296 . -281) (undo-tree-id20297 . -281) (undo-tree-id20298 . -281) (undo-tree-id20299 . -281) (undo-tree-id20300 . -281) (undo-tree-id20301 . -281) (undo-tree-id20302 . -281) (undo-tree-id20303 . -281) (undo-tree-id20304 . -281) (undo-tree-id20305 . -281) (undo-tree-id20306 . -281) (undo-tree-id20307 . -281) (undo-tree-id20308 . -281) (undo-tree-id20309 . -281) (undo-tree-id20310 . -281) (undo-tree-id20311 . 16) (undo-tree-id20312 . -292) (undo-tree-id20313 . -291) (undo-tree-id20314 . -291) (undo-tree-id20315 . -291) (undo-tree-id20316 . -291) (undo-tree-id20317 . -291) (undo-tree-id20318 . -291) (undo-tree-id20319 . -291) (undo-tree-id20320 . -291) (undo-tree-id20321 . -291) (undo-tree-id20322 . -291) (undo-tree-id20323 . -291) (undo-tree-id20324 . -291) (undo-tree-id20325 . -291) (undo-tree-id20326 . -291) (undo-tree-id20327 . -291) (undo-tree-id20328 . -298) (undo-tree-id20329 . -298) (undo-tree-id20330 . -298) (undo-tree-id20331 . -298) (undo-tree-id20332 . -298) (undo-tree-id20333 . -298) (undo-tree-id20334 . -298) (undo-tree-id20335 . -298) (undo-tree-id20336 . -298) (undo-tree-id20337 . -298) (undo-tree-id20338 . -298) (undo-tree-id20339 . -298) (undo-tree-id20340 . -298) (undo-tree-id20341 . -298) (undo-tree-id20342 . -298) (undo-tree-id20343 . -299) (undo-tree-id20344 . -299) (undo-tree-id20345 . -299) (undo-tree-id20346 . -299) (undo-tree-id20347 . -299) (undo-tree-id20348 . -299) (undo-tree-id20349 . -299) (undo-tree-id20350 . -299) (undo-tree-id20351 . -299) (undo-tree-id20352 . -299) (undo-tree-id20353 . -299) (undo-tree-id20354 . -299) (undo-tree-id20355 . -299) (undo-tree-id20356 . -299) (undo-tree-id20357 . -299) (undo-tree-id20358 . -299) (undo-tree-id20359 . -299) (undo-tree-id20360 . -299) (undo-tree-id20361 . -299) (undo-tree-id20362 . -299) (undo-tree-id20363 . -299) (undo-tree-id20364 . -299) (undo-tree-id20365 . -299) (undo-tree-id20366 . -299) (undo-tree-id20367 . -299) (undo-tree-id20368 . -299) (undo-tree-id20369 . -299) (undo-tree-id20370 . -299) (undo-tree-id20371 . -299) (undo-tree-id20372 . -299) (undo-tree-id20373 . -299) (undo-tree-id20374 . -299) (undo-tree-id20375 . -299) (undo-tree-id20376 . -299) (undo-tree-id20377 . -299) (undo-tree-id20378 . -299) (undo-tree-id20379 . -299) (undo-tree-id20380 . -299) (undo-tree-id20381 . -299) (undo-tree-id20382 . -299) (undo-tree-id20383 . -299) (undo-tree-id20384 . -299) (undo-tree-id20385 . -299) (undo-tree-id20386 . -299) (undo-tree-id20387 . -299) (undo-tree-id20388 . -299) (undo-tree-id20389 . -299) (undo-tree-id20390 . -271) (5148 . 5419) (#(" Note that the last layer is not ideal: it must have a single unit because we want to forecast a univariate time series, and this means we must have a single output value per time step. However, having a single unit means that the hidden state is just a single number. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 40 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 80 120 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 120 121 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 121 185 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 185 186 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 186 221 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 221 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 222 269 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5176) (undo-tree-id20391 . -221) (undo-tree-id20392 . -221) (undo-tree-id20393 . -221) (undo-tree-id20394 . -221) (undo-tree-id20395 . -221) (undo-tree-id20396 . -221) (undo-tree-id20397 . -221) (undo-tree-id20398 . -221) (undo-tree-id20399 . -185) (undo-tree-id20400 . -185) (undo-tree-id20401 . -185) (undo-tree-id20402 . -185) (undo-tree-id20403 . -185) (undo-tree-id20404 . -185) (undo-tree-id20405 . -185) (undo-tree-id20406 . -185) (undo-tree-id20407 . -120) (undo-tree-id20408 . -120) (undo-tree-id20409 . -120) (undo-tree-id20410 . -120) (undo-tree-id20411 . -120) (undo-tree-id20412 . -120) (undo-tree-id20413 . -120) (undo-tree-id20414 . -120) (undo-tree-id20415 . -39) (undo-tree-id20416 . -39) (undo-tree-id20417 . -39) (undo-tree-id20418 . -39) (undo-tree-id20419 . -39) (undo-tree-id20420 . -39) (undo-tree-id20421 . -39) (undo-tree-id20422 . -39) (undo-tree-id20423 . -39) (undo-tree-id20424 . -39) (undo-tree-id20425 . -39) (undo-tree-id20426 . -39) (undo-tree-id20427 . -39) (undo-tree-id20428 . -39) (undo-tree-id20429 . -39) (undo-tree-id20430 . -39) (undo-tree-id20431 . -39) (undo-tree-id20432 . -39) (undo-tree-id20433 . -39) (undo-tree-id20434 . -39) (undo-tree-id20435 . -39) (undo-tree-id20436 . -39) (undo-tree-id20437 . -39) (undo-tree-id20438 . -39) (undo-tree-id20439 . -39) (undo-tree-id20440 . -39) (undo-tree-id20441 . -39) (undo-tree-id20442 . -39) (undo-tree-id20443 . -39) (undo-tree-id20444 . -39) (undo-tree-id20445 . -39) (undo-tree-id20446 . -39) (undo-tree-id20447 . -120) (undo-tree-id20448 . -120) (undo-tree-id20449 . -120) (undo-tree-id20450 . -120) (undo-tree-id20451 . -120) (undo-tree-id20452 . -120) (undo-tree-id20453 . -120) (undo-tree-id20454 . -120) (undo-tree-id20455 . -120) (undo-tree-id20456 . -120) (undo-tree-id20457 . -120) (undo-tree-id20458 . -120) (undo-tree-id20459 . -120) (undo-tree-id20460 . -120) (undo-tree-id20461 . -120) (undo-tree-id20462 . -120) (undo-tree-id20463 . -185) (undo-tree-id20464 . -185) (undo-tree-id20465 . -185) (undo-tree-id20466 . -185) (undo-tree-id20467 . -185) (undo-tree-id20468 . -185) (undo-tree-id20469 . -185) (undo-tree-id20470 . -185) (undo-tree-id20471 . -185) (undo-tree-id20472 . -185) (undo-tree-id20473 . -185) (undo-tree-id20474 . -185) (undo-tree-id20475 . -185) (undo-tree-id20476 . -185) (undo-tree-id20477 . -185) (undo-tree-id20478 . -185) (undo-tree-id20479 . -185) (undo-tree-id20480 . -221) (undo-tree-id20481 . -221) (undo-tree-id20482 . -221) (undo-tree-id20483 . -221) (undo-tree-id20484 . -221) (undo-tree-id20485 . -221) (undo-tree-id20486 . -221) (undo-tree-id20487 . -221) (undo-tree-id20488 . -221) (undo-tree-id20489 . -221) (undo-tree-id20490 . -221) (undo-tree-id20491 . -221) (undo-tree-id20492 . -221) (undo-tree-id20493 . -221) (undo-tree-id20494 . -221) (undo-tree-id20495 . -221) (undo-tree-id20496 . -221) (undo-tree-id20497 . -221) (undo-tree-id20498 . -221) (undo-tree-id20499 . -221) (undo-tree-id20500 . -221) (undo-tree-id20501 . -221) (undo-tree-id20502 . -125) (undo-tree-id20503 . -125) (undo-tree-id20504 . -125) (undo-tree-id20505 . -125) (undo-tree-id20506 . -125) (undo-tree-id20507 . -125) (undo-tree-id20508 . -125) (undo-tree-id20509 . -125) (undo-tree-id20510 . -125) (undo-tree-id20511 . -125) (undo-tree-id20512 . -125) (undo-tree-id20513 . -125) (undo-tree-id20514 . -125) (undo-tree-id20515 . -125) (undo-tree-id20516 . -125) (undo-tree-id20517 . -31) (undo-tree-id20518 . -31) (undo-tree-id20519 . -31) (undo-tree-id20520 . -31) (undo-tree-id20521 . -31) (undo-tree-id20522 . -31) (undo-tree-id20523 . -31) (undo-tree-id20524 . -31) (undo-tree-id20525 . -31) (undo-tree-id20526 . -31) (undo-tree-id20527 . -31) (undo-tree-id20528 . -31) (undo-tree-id20529 . -31) (undo-tree-id20530 . -31) (undo-tree-id20531 . -31) (#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5176) (undo-tree-id20532 . -1) (undo-tree-id20533 . -1) (undo-tree-id20534 . -1) (undo-tree-id20535 . -1) (undo-tree-id20536 . -1) (undo-tree-id20537 . -1) (undo-tree-id20538 . -1) (undo-tree-id20539 . -1) (undo-tree-id20540 . -1) (undo-tree-id20541 . -1) (undo-tree-id20542 . -1) (undo-tree-id20543 . -1) (undo-tree-id20544 . -1) (undo-tree-id20545 . -1) (undo-tree-id20546 . -1) (undo-tree-id20547 . -1) (undo-tree-id20548 . -1) (undo-tree-id20549 . -1) (undo-tree-id20550 . -1) (undo-tree-id20551 . -1) (undo-tree-id20552 . -1) (undo-tree-id20553 . -1) (undo-tree-id20554 . -1) (undo-tree-id20555 . -1) (undo-tree-id20556 . -1) (undo-tree-id20557 . -1) (undo-tree-id20558 . -1)) nil (25772 50730 721362 367000) 0 nil])
([nil nil ((#("Note " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5179) (undo-tree-id19540 . -4) (undo-tree-id19541 . 5) (undo-tree-id19542 . -5)) nil (25772 50730 720681 341000) 0 nil])
([nil nil ((#("that " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5179) (undo-tree-id19537 . -4) (undo-tree-id19538 . 5) (undo-tree-id19539 . -5)) nil (25772 50730 720678 326000) 0 nil])
([nil nil ((5206 . 5208) (#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5206) (undo-tree-id19534 . -1) (undo-tree-id19535 . -1) (undo-tree-id19536 . -1)) nil (25772 50730 720675 490000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5208) (undo-tree-id19516 . 1) (undo-tree-id19517 . -1) (undo-tree-id19518 . -1) (undo-tree-id19519 . -1) (undo-tree-id19520 . -1) (undo-tree-id19521 . -1) (undo-tree-id19522 . -1) (undo-tree-id19523 . -1) (undo-tree-id19524 . -1) (undo-tree-id19525 . -1) (undo-tree-id19526 . -1) (undo-tree-id19527 . -1) (undo-tree-id19528 . -1) (undo-tree-id19529 . -1) (undo-tree-id19530 . -1) (undo-tree-id19531 . -1) (undo-tree-id19532 . -1) (undo-tree-id19533 . -1)) nil (25772 50730 720671 114000) 0 nil])
([nil nil ((5177 . 5439) (#("- (it must have a single unit because we want to forecast a univariate time series, and this means we must have a single output value per time step. However, having a single unit means that the hidden state is just a single number. 
- the last layer is not ideal" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 43 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 43 83 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 83 84 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 84 148 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 148 149 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 149 184 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 184 185 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 185 232 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 232 233 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 233 234 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 234 235 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 235 262 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5177) (undo-tree-id18513 . -262) (undo-tree-id18514 . -262) (undo-tree-id18515 . -262) (undo-tree-id18516 . -235) (undo-tree-id18517 . -235) (undo-tree-id18518 . -235) (undo-tree-id18519 . -235) (undo-tree-id18520 . -235) (undo-tree-id18521 . -235) (undo-tree-id18522 . -235) (undo-tree-id18523 . -235) (undo-tree-id18524 . -235) (undo-tree-id18525 . -235) (undo-tree-id18526 . -235) (undo-tree-id18527 . -235) (undo-tree-id18528 . -235) (undo-tree-id18529 . -235) (undo-tree-id18530 . -235) (undo-tree-id18531 . -235) (undo-tree-id18532 . -234) (undo-tree-id18533 . -234) (undo-tree-id18534 . -234) (undo-tree-id18535 . -234) (undo-tree-id18536 . -234) (undo-tree-id18537 . -234) (undo-tree-id18538 . -234) (undo-tree-id18539 . -234) (undo-tree-id18540 . -234) (undo-tree-id18541 . -234) (undo-tree-id18542 . -234) (undo-tree-id18543 . -234) (undo-tree-id18544 . -234) (undo-tree-id18545 . -234) (undo-tree-id18546 . -234) (undo-tree-id18547 . -234) (undo-tree-id18548 . -234) (undo-tree-id18549 . -234) (undo-tree-id18550 . -234) (undo-tree-id18551 . -234) (undo-tree-id18552 . -234) (undo-tree-id18553 . -234) (undo-tree-id18554 . -234) (undo-tree-id18555 . -234) (undo-tree-id18556 . -234) (undo-tree-id18557 . -234) (undo-tree-id18558 . -235) (undo-tree-id18559 . -235) (undo-tree-id18560 . -235) (undo-tree-id18561 . -235) (undo-tree-id18562 . -235) (undo-tree-id18563 . -235) (undo-tree-id18564 . -235) (undo-tree-id18565 . -235) (undo-tree-id18566 . -235) (undo-tree-id18567 . -235) (undo-tree-id18568 . -235) (undo-tree-id18569 . -235) (undo-tree-id18570 . -235) (undo-tree-id18571 . -235) (undo-tree-id18572 . -235) (undo-tree-id18573 . -235) (undo-tree-id18574 . -235) (undo-tree-id18575 . -235) (undo-tree-id18576 . -235) (undo-tree-id18577 . -235) (undo-tree-id18578 . -235) (undo-tree-id18579 . -235) (undo-tree-id18580 . -235) (undo-tree-id18581 . -235) (undo-tree-id18582 . -235) (undo-tree-id18583 . -235) (undo-tree-id18584 . -235) (undo-tree-id18585 . -235) (undo-tree-id18586 . -235) (undo-tree-id18587 . -235) (undo-tree-id18588 . -235) (undo-tree-id18589 . -235) (undo-tree-id18590 . -235) (undo-tree-id18591 . -235) (undo-tree-id18592 . -235) (undo-tree-id18593 . -235) (undo-tree-id18594 . -235) (undo-tree-id18595 . -235) (undo-tree-id18596 . -235) (undo-tree-id18597 . -235) (undo-tree-id18598 . -235) (undo-tree-id18599 . -235) (undo-tree-id18600 . -235) (undo-tree-id18601 . -235) (undo-tree-id18602 . -235) (undo-tree-id18603 . -235) (undo-tree-id18604 . -235) (undo-tree-id18605 . -235) (undo-tree-id18606 . -235) (undo-tree-id18607 . -235) (undo-tree-id18608 . -235) (undo-tree-id18609 . -235) (undo-tree-id18610 . -235) (undo-tree-id18611 . -235) (undo-tree-id18612 . -235) (undo-tree-id18613 . -235) (undo-tree-id18614 . -235) (undo-tree-id18615 . -235) (undo-tree-id18616 . -235) (undo-tree-id18617 . -235) (undo-tree-id18618 . -235) (undo-tree-id18619 . -235) (undo-tree-id18620 . -235) (undo-tree-id18621 . -235) (undo-tree-id18622 . -235) (undo-tree-id18623 . -235) (undo-tree-id18624 . -235) (undo-tree-id18625 . -235) (undo-tree-id18626 . -235) (undo-tree-id18627 . -235) (undo-tree-id18628 . -235) (undo-tree-id18629 . -235) (undo-tree-id18630 . -235) (undo-tree-id18631 . -235) (undo-tree-id18632 . -235) (undo-tree-id18633 . -235) (undo-tree-id18634 . -235) (undo-tree-id18635 . -235) (undo-tree-id18636 . -235) (undo-tree-id18637 . -235) (undo-tree-id18638 . -235) (undo-tree-id18639 . -235) (undo-tree-id18640 . -235) (undo-tree-id18641 . -235) (undo-tree-id18642 . -235) (undo-tree-id18643 . -235) (undo-tree-id18644 . -235) (undo-tree-id18645 . -235) (undo-tree-id18646 . -235) (undo-tree-id18647 . -235) (undo-tree-id18648 . -235) (undo-tree-id18649 . -235) (undo-tree-id18650 . -235) (undo-tree-id18651 . -235) (undo-tree-id18652 . -235) (undo-tree-id18653 . -235) (undo-tree-id18654 . -235) (undo-tree-id18655 . -235) (undo-tree-id18656 . -235) (undo-tree-id18657 . -235) (undo-tree-id18658 . -235) (undo-tree-id18659 . -235) (undo-tree-id18660 . -235) (undo-tree-id18661 . -235) (undo-tree-id18662 . -235) (undo-tree-id18663 . -235) (undo-tree-id18664 . -235) (undo-tree-id18665 . -235) (undo-tree-id18666 . -235) (undo-tree-id18667 . -235) (undo-tree-id18668 . -235) (undo-tree-id18669 . -235) (undo-tree-id18670 . -235) (undo-tree-id18671 . -235) (undo-tree-id18672 . -235) (undo-tree-id18673 . -235) (undo-tree-id18674 . -237) (undo-tree-id18675 . -237) (undo-tree-id18676 . -237) (undo-tree-id18677 . -237) (undo-tree-id18678 . -237) (undo-tree-id18679 . -237) (undo-tree-id18680 . -237) (undo-tree-id18681 . -237) (undo-tree-id18682 . -237) (undo-tree-id18683 . -237) (undo-tree-id18684 . -237) (undo-tree-id18685 . -237) (undo-tree-id18686 . -237) (undo-tree-id18687 . -237) (undo-tree-id18688 . -237) (undo-tree-id18689 . -237) (undo-tree-id18690 . -237) (undo-tree-id18691 . -237) (undo-tree-id18692 . -237) (undo-tree-id18693 . -237) (undo-tree-id18694 . -237) (undo-tree-id18695 . -237) (undo-tree-id18696 . -242) (undo-tree-id18697 . -242) (undo-tree-id18698 . -242) (undo-tree-id18699 . -242) (undo-tree-id18700 . -242) (undo-tree-id18701 . -242) (undo-tree-id18702 . -242) (undo-tree-id18703 . -242) (undo-tree-id18704 . -248) (undo-tree-id18705 . -248) (undo-tree-id18706 . -248) (undo-tree-id18707 . -248) (undo-tree-id18708 . -248) (undo-tree-id18709 . -248) (undo-tree-id18710 . -248) (undo-tree-id18711 . -248) (undo-tree-id18712 . -251) (undo-tree-id18713 . -251) (undo-tree-id18714 . -251) (undo-tree-id18715 . -251) (undo-tree-id18716 . -251) (undo-tree-id18717 . -251) (undo-tree-id18718 . -251) (undo-tree-id18719 . -251) (undo-tree-id18720 . -255) (undo-tree-id18721 . -255) (undo-tree-id18722 . -255) (undo-tree-id18723 . -255) (undo-tree-id18724 . -255) (undo-tree-id18725 . -255) (undo-tree-id18726 . -255) (undo-tree-id18727 . -255) (undo-tree-id18728 . -261) (undo-tree-id18729 . -261) (undo-tree-id18730 . -261) (undo-tree-id18731 . -261) (undo-tree-id18732 . -261) (undo-tree-id18733 . -261) (undo-tree-id18734 . -261) (undo-tree-id18735 . -261) (undo-tree-id18736 . -261) (undo-tree-id18737 . -261) (undo-tree-id18738 . -261) (undo-tree-id18739 . -261) (undo-tree-id18740 . -261) (undo-tree-id18741 . -261) (undo-tree-id18742 . -261) (undo-tree-id18743 . -262) (undo-tree-id18744 . -262) (undo-tree-id18745 . -262) (undo-tree-id18746 . -262) (undo-tree-id18747 . -262) (undo-tree-id18748 . -262) (undo-tree-id18749 . -262) (undo-tree-id18750 . -262) (undo-tree-id18751 . -262) (undo-tree-id18752 . -262) (undo-tree-id18753 . -262) (undo-tree-id18754 . -262) (undo-tree-id18755 . -262) (undo-tree-id18756 . -262) (undo-tree-id18757 . -262) (undo-tree-id18758 . -262) (undo-tree-id18759 . -262) (undo-tree-id18760 . -262) (undo-tree-id18761 . -262) (undo-tree-id18762 . -262) (undo-tree-id18763 . -262) (undo-tree-id18764 . -262) (undo-tree-id18765 . -262) (undo-tree-id18766 . -262) (undo-tree-id18767 . -262) (undo-tree-id18768 . -262) (undo-tree-id18769 . -262) (undo-tree-id18770 . -262) (undo-tree-id18771 . -262) (undo-tree-id18772 . -235) (undo-tree-id18773 . -235) (undo-tree-id18774 . -235) (undo-tree-id18775 . -235) (undo-tree-id18776 . -235) (undo-tree-id18777 . -235) (undo-tree-id18778 . -235) (undo-tree-id18779 . -235) (undo-tree-id18780 . -235) (undo-tree-id18781 . -235) (undo-tree-id18782 . -235) (undo-tree-id18783 . -235) (undo-tree-id18784 . -235) (undo-tree-id18785 . -235) (undo-tree-id18786 . -235) (undo-tree-id18787 . -239) (undo-tree-id18788 . -239) (undo-tree-id18789 . -239) (undo-tree-id18790 . -239) (undo-tree-id18791 . -239) (undo-tree-id18792 . -239) (undo-tree-id18793 . -239) (undo-tree-id18794 . -239) (undo-tree-id18795 . -239) (undo-tree-id18796 . -239) (undo-tree-id18797 . -239) (undo-tree-id18798 . -239) (undo-tree-id18799 . -239) (undo-tree-id18800 . -239) (undo-tree-id18801 . -239) (undo-tree-id18802 . -244) (undo-tree-id18803 . -244) (undo-tree-id18804 . -244) (undo-tree-id18805 . -244) (undo-tree-id18806 . -244) (undo-tree-id18807 . -244) (undo-tree-id18808 . -244) (undo-tree-id18809 . -244) (undo-tree-id18810 . -244) (undo-tree-id18811 . -244) (undo-tree-id18812 . -244) (undo-tree-id18813 . -244) (undo-tree-id18814 . -244) (undo-tree-id18815 . -244) (undo-tree-id18816 . -244) (undo-tree-id18817 . -250) (undo-tree-id18818 . -250) (undo-tree-id18819 . -250) (undo-tree-id18820 . -250) (undo-tree-id18821 . -250) (undo-tree-id18822 . -250) (undo-tree-id18823 . -250) (undo-tree-id18824 . -250) (undo-tree-id18825 . -250) (undo-tree-id18826 . -250) (undo-tree-id18827 . -250) (undo-tree-id18828 . -250) (undo-tree-id18829 . -250) (undo-tree-id18830 . -250) (undo-tree-id18831 . -250) (undo-tree-id18832 . -250) (undo-tree-id18833 . -250) (undo-tree-id18834 . -253) (undo-tree-id18835 . -253) (undo-tree-id18836 . -253) (undo-tree-id18837 . -253) (undo-tree-id18838 . -253) (undo-tree-id18839 . -253) (undo-tree-id18840 . -253) (undo-tree-id18841 . -253) (undo-tree-id18842 . -253) (undo-tree-id18843 . -253) (undo-tree-id18844 . -253) (undo-tree-id18845 . -253) (undo-tree-id18846 . -253) (undo-tree-id18847 . -253) (undo-tree-id18848 . -253) (undo-tree-id18849 . -257) (undo-tree-id18850 . -257) (undo-tree-id18851 . -257) (undo-tree-id18852 . -257) (undo-tree-id18853 . -257) (undo-tree-id18854 . -257) (undo-tree-id18855 . -257) (undo-tree-id18856 . -257) (undo-tree-id18857 . -257) (undo-tree-id18858 . -257) (undo-tree-id18859 . -257) (undo-tree-id18860 . -257) (undo-tree-id18861 . -257) (undo-tree-id18862 . -257) (undo-tree-id18863 . -257) (undo-tree-id18864 . -262) (undo-tree-id18865 . -262) (undo-tree-id18866 . -262) (undo-tree-id18867 . -262) (undo-tree-id18868 . -262) (undo-tree-id18869 . -262) (undo-tree-id18870 . -262) (undo-tree-id18871 . -262) (undo-tree-id18872 . -262) (undo-tree-id18873 . -262) (undo-tree-id18874 . -262) (undo-tree-id18875 . -262) (undo-tree-id18876 . -262) (undo-tree-id18877 . -262) (undo-tree-id18878 . -262) (undo-tree-id18879 . -262) (undo-tree-id18880 . -262) (undo-tree-id18881 . -262) (undo-tree-id18882 . -262) (undo-tree-id18883 . -262) (undo-tree-id18884 . -262) (undo-tree-id18885 . -262) (undo-tree-id18886 . -262) (undo-tree-id18887 . -262) (undo-tree-id18888 . -262) (undo-tree-id18889 . -262) (undo-tree-id18890 . -262) (undo-tree-id18891 . -262) (undo-tree-id18892 . -262) (undo-tree-id18893 . -262) (undo-tree-id18894 . -262) (undo-tree-id18895 . -262) (undo-tree-id18896 . -262) (undo-tree-id18897 . -262) (undo-tree-id18898 . -262) (undo-tree-id18899 . -262) (undo-tree-id18900 . -262) (undo-tree-id18901 . -262) (undo-tree-id18902 . -262) (undo-tree-id18903 . -262) (undo-tree-id18904 . -262) (undo-tree-id18905 . -262) (undo-tree-id18906 . -262) (undo-tree-id18907 . -262) (undo-tree-id18908 . -262) (undo-tree-id18909 . -262) (undo-tree-id18910 . -262) (undo-tree-id18911 . -262) (undo-tree-id18912 . -262) (undo-tree-id18913 . -262) (undo-tree-id18914 . -262) (undo-tree-id18915 . -262) (undo-tree-id18916 . -262) (undo-tree-id18917 . -262) (undo-tree-id18918 . -262) (undo-tree-id18919 . -262) (undo-tree-id18920 . -262) (undo-tree-id18921 . -262) (undo-tree-id18922 . -262) (undo-tree-id18923 . -262) (undo-tree-id18924 . -262) (undo-tree-id18925 . -262) (undo-tree-id18926 . -262) (undo-tree-id18927 . -262) (undo-tree-id18928 . -262) (undo-tree-id18929 . -262) (undo-tree-id18930 . -262) (undo-tree-id18931 . -262) (undo-tree-id18932 . -262) (undo-tree-id18933 . -262) (undo-tree-id18934 . -262) (undo-tree-id18935 . -262) (undo-tree-id18936 . -262) (undo-tree-id18937 . -262) (undo-tree-id18938 . -262) (undo-tree-id18939 . -262) (undo-tree-id18940 . -262) (undo-tree-id18941 . -262) (undo-tree-id18942 . -262) (undo-tree-id18943 . -262) (undo-tree-id18944 . -262) (undo-tree-id18945 . -262) (undo-tree-id18946 . -262) (undo-tree-id18947 . -262) (undo-tree-id18948 . -262) (undo-tree-id18949 . -262) (undo-tree-id18950 . -262) (undo-tree-id18951 . -262) (undo-tree-id18952 . -262) (undo-tree-id18953 . -262) (undo-tree-id18954 . -262) (undo-tree-id18955 . -262) (undo-tree-id18956 . -262) (undo-tree-id18957 . -262) (undo-tree-id18958 . -262) (undo-tree-id18959 . -262) (undo-tree-id18960 . -262) (undo-tree-id18961 . -262) (undo-tree-id18962 . -262) (undo-tree-id18963 . -262) (undo-tree-id18964 . -262) (undo-tree-id18965 . -262) (undo-tree-id18966 . -262) (undo-tree-id18967 . -262) (undo-tree-id18968 . -262) (undo-tree-id18969 . -262) (undo-tree-id18970 . -262) (undo-tree-id18971 . -262) (undo-tree-id18972 . -262) (undo-tree-id18973 . -262) (undo-tree-id18974 . -262) (undo-tree-id18975 . -262) (undo-tree-id18976 . -262) (undo-tree-id18977 . -262) (undo-tree-id18978 . -262) (undo-tree-id18979 . -262) (undo-tree-id18980 . -262) (undo-tree-id18981 . -262) (undo-tree-id18982 . -262) (undo-tree-id18983 . -262) (undo-tree-id18984 . -262) (undo-tree-id18985 . -262) (undo-tree-id18986 . -262) (undo-tree-id18987 . -262) (undo-tree-id18988 . -262) (undo-tree-id18989 . -262) (undo-tree-id18990 . -262) (undo-tree-id18991 . -262) (undo-tree-id18992 . -262) (undo-tree-id18993 . -262) (undo-tree-id18994 . -262) (undo-tree-id18995 . -262) (undo-tree-id18996 . -262) (undo-tree-id18997 . -262) (undo-tree-id18998 . -262) (undo-tree-id18999 . -262) (undo-tree-id19000 . -262) (undo-tree-id19001 . -262) (undo-tree-id19002 . -262) (undo-tree-id19003 . -262) (undo-tree-id19004 . -262) (undo-tree-id19005 . -262) (undo-tree-id19006 . -262) (undo-tree-id19007 . -262) (undo-tree-id19008 . -262) (undo-tree-id19009 . -262) (undo-tree-id19010 . -262) (undo-tree-id19011 . -262) (undo-tree-id19012 . -262) (undo-tree-id19013 . -262) (undo-tree-id19014 . -262) (undo-tree-id19015 . -262) (undo-tree-id19016 . -262) (undo-tree-id19017 . -262) (undo-tree-id19018 . -262) (undo-tree-id19019 . -262) (undo-tree-id19020 . -262) (undo-tree-id19021 . -262) (undo-tree-id19022 . -262) (undo-tree-id19023 . -262) (undo-tree-id19024 . -262) (undo-tree-id19025 . -262) (undo-tree-id19026 . -262) (undo-tree-id19027 . -262) (undo-tree-id19028 . -262) (undo-tree-id19029 . -262) (undo-tree-id19030 . -262) (undo-tree-id19031 . -262) (undo-tree-id19032 . -262) (undo-tree-id19033 . -262) (undo-tree-id19034 . -262) (undo-tree-id19035 . -262) (undo-tree-id19036 . -262) (undo-tree-id19037 . -262) (undo-tree-id19038 . -262) (undo-tree-id19039 . -262) (undo-tree-id19040 . -262) (undo-tree-id19041 . -262) (undo-tree-id19042 . -262) (undo-tree-id19043 . -262) (undo-tree-id19044 . -262) (undo-tree-id19045 . -262) (undo-tree-id19046 . -262) (undo-tree-id19047 . -262) (undo-tree-id19048 . -262) (undo-tree-id19049 . -262) (undo-tree-id19050 . -262) (undo-tree-id19051 . -262) (undo-tree-id19052 . -262) (undo-tree-id19053 . -262) (undo-tree-id19054 . -262) (undo-tree-id19055 . -262) (undo-tree-id19056 . -262) (undo-tree-id19057 . -262) (undo-tree-id19058 . -262) (undo-tree-id19059 . -262) (undo-tree-id19060 . -262) (undo-tree-id19061 . -262) (undo-tree-id19062 . -262) (undo-tree-id19063 . -262) (undo-tree-id19064 . -262) (undo-tree-id19065 . -262) (undo-tree-id19066 . -262) (undo-tree-id19067 . -262) (undo-tree-id19068 . -262) (undo-tree-id19069 . -262) (undo-tree-id19070 . -262) (undo-tree-id19071 . -262) (undo-tree-id19072 . -262) (undo-tree-id19073 . -262) (undo-tree-id19074 . -262) (undo-tree-id19075 . -262) (undo-tree-id19076 . -262) (undo-tree-id19077 . -262) (undo-tree-id19078 . -262) (undo-tree-id19079 . -262) (undo-tree-id19080 . -262) (undo-tree-id19081 . -262) (undo-tree-id19082 . -262) (undo-tree-id19083 . -262) (undo-tree-id19084 . -262) (undo-tree-id19085 . -262) (undo-tree-id19086 . -262) (undo-tree-id19087 . -262) (undo-tree-id19088 . -262) (undo-tree-id19089 . -262) (undo-tree-id19090 . -262) (undo-tree-id19091 . -262) (undo-tree-id19092 . -262) (undo-tree-id19093 . -262) (undo-tree-id19094 . -262) (undo-tree-id19095 . -262) (undo-tree-id19096 . -262) (undo-tree-id19097 . -262) (undo-tree-id19098 . -262) (undo-tree-id19099 . -262) (undo-tree-id19100 . -262) (undo-tree-id19101 . -262) (undo-tree-id19102 . -262) (undo-tree-id19103 . -262) (undo-tree-id19104 . -262) (undo-tree-id19105 . -262) (undo-tree-id19106 . -262) (undo-tree-id19107 . -262) (undo-tree-id19108 . -262) (undo-tree-id19109 . -262) (undo-tree-id19110 . -262) (undo-tree-id19111 . -262) (undo-tree-id19112 . -262) (undo-tree-id19113 . -262) (undo-tree-id19114 . -262) (undo-tree-id19115 . -262) (undo-tree-id19116 . -262) (undo-tree-id19117 . -262) (undo-tree-id19118 . -262) (undo-tree-id19119 . -262) (undo-tree-id19120 . -262) (undo-tree-id19121 . -262) (undo-tree-id19122 . -262) (undo-tree-id19123 . -262) (undo-tree-id19124 . -262) (undo-tree-id19125 . -262) (undo-tree-id19126 . -262) (undo-tree-id19127 . -262) (undo-tree-id19128 . -262) (undo-tree-id19129 . -262) (undo-tree-id19130 . -262) (undo-tree-id19131 . -262) (undo-tree-id19132 . -262) (undo-tree-id19133 . -262) (undo-tree-id19134 . -262) (undo-tree-id19135 . -262) (undo-tree-id19136 . -262) (undo-tree-id19137 . -262) (undo-tree-id19138 . -262) (undo-tree-id19139 . -262) (undo-tree-id19140 . -235) (undo-tree-id19141 . -235) (undo-tree-id19142 . -235) (undo-tree-id19143 . -235) (undo-tree-id19144 . -235) (undo-tree-id19145 . -235) (undo-tree-id19146 . -235) (undo-tree-id19147 . -235) (undo-tree-id19148 . -235) (undo-tree-id19149 . -235) (undo-tree-id19150 . -235) (undo-tree-id19151 . -235) (undo-tree-id19152 . -235) (undo-tree-id19153 . -235) (undo-tree-id19154 . -235) (undo-tree-id19155 . -239) (undo-tree-id19156 . -239) (undo-tree-id19157 . -239) (undo-tree-id19158 . -239) (undo-tree-id19159 . -239) (undo-tree-id19160 . -239) (undo-tree-id19161 . -239) (undo-tree-id19162 . -239) (undo-tree-id19163 . -239) (undo-tree-id19164 . -239) (undo-tree-id19165 . -239) (undo-tree-id19166 . -239) (undo-tree-id19167 . -239) (undo-tree-id19168 . -239) (undo-tree-id19169 . -239) (undo-tree-id19170 . -239) (undo-tree-id19171 . -239) (undo-tree-id19172 . -239) (undo-tree-id19173 . -239) (undo-tree-id19174 . -239) (undo-tree-id19175 . -239) (undo-tree-id19176 . -239) (undo-tree-id19177 . -239) (undo-tree-id19178 . -239) (undo-tree-id19179 . -239) (undo-tree-id19180 . -239) (undo-tree-id19181 . -239) (undo-tree-id19182 . -239) (undo-tree-id19183 . -239) (undo-tree-id19184 . -262) (undo-tree-id19185 . -262) (undo-tree-id19186 . -262) (undo-tree-id19187 . -262) (undo-tree-id19188 . -262) (undo-tree-id19189 . -262) (undo-tree-id19190 . -262) (undo-tree-id19191 . -262) (undo-tree-id19192 . -262) (undo-tree-id19193 . -262) (undo-tree-id19194 . -262) (undo-tree-id19195 . -262) (undo-tree-id19196 . -262) (undo-tree-id19197 . -262) (undo-tree-id19198 . -262) (undo-tree-id19199 . -262) (undo-tree-id19200 . -262) (undo-tree-id19201 . -262) (undo-tree-id19202 . -262) (undo-tree-id19203 . -262) (undo-tree-id19204 . -262) (undo-tree-id19205 . -262) (undo-tree-id19206 . -262) (undo-tree-id19207 . -262) (undo-tree-id19208 . -262) (undo-tree-id19209 . -262) (undo-tree-id19210 . -262) (undo-tree-id19211 . -262) (undo-tree-id19212 . -262) (undo-tree-id19213 . -262) (undo-tree-id19214 . -262) (undo-tree-id19215 . -262) (undo-tree-id19216 . -262) (undo-tree-id19217 . -262) (undo-tree-id19218 . -262) (undo-tree-id19219 . -262) (undo-tree-id19220 . -262) (undo-tree-id19221 . -262) (undo-tree-id19222 . -262) (undo-tree-id19223 . -262) (undo-tree-id19224 . -262) (undo-tree-id19225 . -262) (undo-tree-id19226 . -262) (undo-tree-id19227 . -262) (undo-tree-id19228 . -262) (undo-tree-id19229 . -262) (undo-tree-id19230 . -262) (undo-tree-id19231 . -262) (undo-tree-id19232 . -233) (5177 . 5410) (#(" (it must have a single unit because we want to forecast a univariate time series, and this means we must have a single output value per time step. However, having a single unit means that the hidden state is just a single number. " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 83 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 83 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 148 183 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 183 184 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 184 231 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5206) (undo-tree-id19233 . -2) (undo-tree-id19234 . -2) (undo-tree-id19235 . 229) (undo-tree-id19236 . -1) (undo-tree-id19237 . -1) (undo-tree-id19238 . -1) (undo-tree-id19239 . -1) (undo-tree-id19240 . -1) (undo-tree-id19241 . -1) (undo-tree-id19242 . -1) (undo-tree-id19243 . -1) (undo-tree-id19244 . -1) (undo-tree-id19245 . -1) (undo-tree-id19246 . -1) (undo-tree-id19247 . -1) (undo-tree-id19248 . -1) (undo-tree-id19249 . -1) (undo-tree-id19250 . -1) (undo-tree-id19251 . -1) (undo-tree-id19252 . -1) (undo-tree-id19253 . -1) (undo-tree-id19254 . -1) (undo-tree-id19255 . -1) (undo-tree-id19256 . -1) (undo-tree-id19257 . -1) (undo-tree-id19258 . -1) (undo-tree-id19259 . -1) (undo-tree-id19260 . -2) (undo-tree-id19261 . -2) (undo-tree-id19262 . -2) (undo-tree-id19263 . -2) (undo-tree-id19264 . -2) (undo-tree-id19265 . -2) (undo-tree-id19266 . -2) (undo-tree-id19267 . -2) (undo-tree-id19268 . -2) (undo-tree-id19269 . -2) (undo-tree-id19270 . -2) (undo-tree-id19271 . -2) (undo-tree-id19272 . -2) (undo-tree-id19273 . -2) (undo-tree-id19274 . -2) (undo-tree-id19275 . -2) (undo-tree-id19276 . -2) (undo-tree-id19277 . -2) (undo-tree-id19278 . -2) (undo-tree-id19279 . -2) (undo-tree-id19280 . -2) (undo-tree-id19281 . -2) (undo-tree-id19282 . -2) (undo-tree-id19283 . -1) (undo-tree-id19284 . -1) (undo-tree-id19285 . -1) (undo-tree-id19286 . -1) (undo-tree-id19287 . -1) (undo-tree-id19288 . -1) (undo-tree-id19289 . -1) (undo-tree-id19290 . -1) (undo-tree-id19291 . -1) (undo-tree-id19292 . -1) (undo-tree-id19293 . -1) (undo-tree-id19294 . -1) (undo-tree-id19295 . -1) (undo-tree-id19296 . -1) (undo-tree-id19297 . -1) (undo-tree-id19298 . -1) (undo-tree-id19299 . -1) (undo-tree-id19300 . -1) (undo-tree-id19301 . -1) (undo-tree-id19302 . -1) (undo-tree-id19303 . -1) (undo-tree-id19304 . -1) (undo-tree-id19305 . -1) (undo-tree-id19306 . -1) (undo-tree-id19307 . -1) (undo-tree-id19308 . -1) (undo-tree-id19309 . -2) (undo-tree-id19310 . -2) (undo-tree-id19311 . -2) (undo-tree-id19312 . -2) (undo-tree-id19313 . -2) (undo-tree-id19314 . -2) (undo-tree-id19315 . -2) (undo-tree-id19316 . -2) (undo-tree-id19317 . -2) (undo-tree-id19318 . -2) (undo-tree-id19319 . -2) (undo-tree-id19320 . -2) (undo-tree-id19321 . -2) (undo-tree-id19322 . -2) (undo-tree-id19323 . -2) (undo-tree-id19324 . -2) (undo-tree-id19325 . -2) (undo-tree-id19326 . -2) (undo-tree-id19327 . -2) (undo-tree-id19328 . -2) (undo-tree-id19329 . -2) (undo-tree-id19330 . -2) (undo-tree-id19331 . -2) (undo-tree-id19332 . -2) (undo-tree-id19333 . -2) (undo-tree-id19334 . -2) (undo-tree-id19335 . -2) (undo-tree-id19336 . -2) (undo-tree-id19337 . -2) (undo-tree-id19338 . -2) (undo-tree-id19339 . -2) (undo-tree-id19340 . -2) (undo-tree-id19341 . -2) (undo-tree-id19342 . -2) (undo-tree-id19343 . -2) (undo-tree-id19344 . -2) (undo-tree-id19345 . -2) (undo-tree-id19346 . -2) (undo-tree-id19347 . -2) (undo-tree-id19348 . -2) (undo-tree-id19349 . -2) (undo-tree-id19350 . -2) (undo-tree-id19351 . -2) (undo-tree-id19352 . -2) (undo-tree-id19353 . -2) (undo-tree-id19354 . -2) (undo-tree-id19355 . -2) (undo-tree-id19356 . -2) (undo-tree-id19357 . -2) (undo-tree-id19358 . -2) (undo-tree-id19359 . -2) (undo-tree-id19360 . -2) (undo-tree-id19361 . -2) (undo-tree-id19362 . -3) (undo-tree-id19363 . -3) (undo-tree-id19364 . -3) (undo-tree-id19365 . -3) (undo-tree-id19366 . -3) (undo-tree-id19367 . -3) (undo-tree-id19368 . -3) (undo-tree-id19369 . -3) (undo-tree-id19370 . -3) (undo-tree-id19371 . -3) (undo-tree-id19372 . -3) (undo-tree-id19373 . -3) (undo-tree-id19374 . -3) (undo-tree-id19375 . -3) (undo-tree-id19376 . -3) (undo-tree-id19377 . -8) (undo-tree-id19378 . -8) (undo-tree-id19379 . -8) (undo-tree-id19380 . -8) (undo-tree-id19381 . -8) (undo-tree-id19382 . -8) (undo-tree-id19383 . -8) (undo-tree-id19384 . -8) (undo-tree-id19385 . -13) (undo-tree-id19386 . -13) (undo-tree-id19387 . -13) (undo-tree-id19388 . -13) (undo-tree-id19389 . -13) (undo-tree-id19390 . -13) (undo-tree-id19391 . -13) (undo-tree-id19392 . -13) (undo-tree-id19393 . -15) (undo-tree-id19394 . -15) (undo-tree-id19395 . -15) (undo-tree-id19396 . -15) (undo-tree-id19397 . -15) (undo-tree-id19398 . -15) (undo-tree-id19399 . -15) (undo-tree-id19400 . -15) (undo-tree-id19401 . -22) (undo-tree-id19402 . -22) (undo-tree-id19403 . -22) (undo-tree-id19404 . -22) (undo-tree-id19405 . -22) (undo-tree-id19406 . -22) (undo-tree-id19407 . -22) (undo-tree-id19408 . -22) (undo-tree-id19409 . -22) (undo-tree-id19410 . -22) (undo-tree-id19411 . -22) (undo-tree-id19412 . -22) (undo-tree-id19413 . -22) (undo-tree-id19414 . -22) (undo-tree-id19415 . -22) (undo-tree-id19416 . -27) (undo-tree-id19417 . -27) (undo-tree-id19418 . -27) (undo-tree-id19419 . -27) (undo-tree-id19420 . -27) (undo-tree-id19421 . -27) (undo-tree-id19422 . -27) (undo-tree-id19423 . -27) (undo-tree-id19424 . -27) (undo-tree-id19425 . -27) (undo-tree-id19426 . -27) (undo-tree-id19427 . -27) (undo-tree-id19428 . -27) (undo-tree-id19429 . -27) (undo-tree-id19430 . -27) (undo-tree-id19431 . -35) (undo-tree-id19432 . -35) (undo-tree-id19433 . -35) (undo-tree-id19434 . -35) (undo-tree-id19435 . -35) (undo-tree-id19436 . -35) (undo-tree-id19437 . -35) (undo-tree-id19438 . -35) (undo-tree-id19439 . -35) (undo-tree-id19440 . -35) (undo-tree-id19441 . -35) (undo-tree-id19442 . -35) (undo-tree-id19443 . -35) (undo-tree-id19444 . -35) (undo-tree-id19445 . -35) (undo-tree-id19446 . -35) (undo-tree-id19447 . -35) (undo-tree-id19448 . -35) (undo-tree-id19449 . -35) (undo-tree-id19450 . -35) (undo-tree-id19451 . -35) (undo-tree-id19452 . -35) (undo-tree-id19453 . -35) (undo-tree-id19454 . -35) (undo-tree-id19455 . -35) (undo-tree-id19456 . -35) (undo-tree-id19457 . -35) (undo-tree-id19458 . -35) (undo-tree-id19459 . -35) (undo-tree-id19460 . -35) (undo-tree-id19461 . -35) (undo-tree-id19462 . -35) (undo-tree-id19463 . -35) (undo-tree-id19464 . -35) (undo-tree-id19465 . -35) (undo-tree-id19466 . -35) (undo-tree-id19467 . -1) (undo-tree-id19468 . -1) (undo-tree-id19469 . -1) (undo-tree-id19470 . -1) (undo-tree-id19471 . -1) (undo-tree-id19472 . -1) (undo-tree-id19473 . -1) (undo-tree-id19474 . 230) (undo-tree-id19475 . -2) (undo-tree-id19476 . -1) (undo-tree-id19477 . -1) (undo-tree-id19478 . -1) (undo-tree-id19479 . -1) (undo-tree-id19480 . -1) (undo-tree-id19481 . -1) (undo-tree-id19482 . -1) (undo-tree-id19483 . -1) (undo-tree-id19484 . -1) (undo-tree-id19485 . -1) (undo-tree-id19486 . -1) (undo-tree-id19487 . -1) (undo-tree-id19488 . -1) (undo-tree-id19489 . -1) (undo-tree-id19490 . -1) (undo-tree-id19491 . -1) (undo-tree-id19492 . -1) (undo-tree-id19493 . -1) (undo-tree-id19494 . -1) (undo-tree-id19495 . -1) (undo-tree-id19496 . -1) (undo-tree-id19497 . -1) (undo-tree-id19498 . -1) (undo-tree-id19499 . -1) (undo-tree-id19500 . -1) (undo-tree-id19501 . -1) (undo-tree-id19502 . -1) (undo-tree-id19503 . -1) (undo-tree-id19504 . -1) (undo-tree-id19505 . -1) (undo-tree-id19506 . -1) (undo-tree-id19507 . -1) (undo-tree-id19508 . -1) (undo-tree-id19509 . -1) (undo-tree-id19510 . -1) (undo-tree-id19511 . -1) (undo-tree-id19512 . -1) (undo-tree-id19513 . -1) (undo-tree-id19514 . -1) (undo-tree-id19515 . -1) 5207) nil (25772 50730 720620 948000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5209) (undo-tree-id18508 . 1) (undo-tree-id18509 . 1) (undo-tree-id18510 . -1) (undo-tree-id18511 . -1) (undo-tree-id18512 . -1)) nil (25772 50730 718382 26000) 0 nil])
([nil nil ((5209 . 5210) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5209) (t 25772 50730 777806 620000)) nil (25772 50732 763793 773000) 0 nil])
([nil nil ((5236 . 5239) (#("because we want to" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5236) (undo-tree-id22049 . -17) (undo-tree-id22050 . -17) (undo-tree-id22051 . -17) (undo-tree-id22052 . -6) (undo-tree-id22053 . -6) (undo-tree-id22054 . -6) (undo-tree-id22055 . -6) (undo-tree-id22056 . -6) (undo-tree-id22057 . -6) (undo-tree-id22058 . -6) (undo-tree-id22059 . -6) (undo-tree-id22060 . -6) (undo-tree-id22061 . -6) (undo-tree-id22062 . -6) (undo-tree-id22063 . -6) (undo-tree-id22064 . -6) (undo-tree-id22065 . -6) (undo-tree-id22066 . -6) (undo-tree-id22067 . -6) (undo-tree-id22068 . -6) (undo-tree-id22069 . -6) (undo-tree-id22070 . -6) (undo-tree-id22071 . -6) (undo-tree-id22072 . -6) (undo-tree-id22073 . -6) (undo-tree-id22074 . -9) (undo-tree-id22075 . -9) (undo-tree-id22076 . -9) (undo-tree-id22077 . -9) (undo-tree-id22078 . -9) (undo-tree-id22079 . -9) (undo-tree-id22080 . -9) (undo-tree-id22081 . -9) (undo-tree-id22082 . -9) (undo-tree-id22083 . -9) (undo-tree-id22084 . -9) (undo-tree-id22085 . -9) (undo-tree-id22086 . -9) (undo-tree-id22087 . -9) (undo-tree-id22088 . -9) (undo-tree-id22089 . -9) (undo-tree-id22090 . -9) (undo-tree-id22091 . -9) (undo-tree-id22092 . -9) (undo-tree-id22093 . -9) (undo-tree-id22094 . -9) (undo-tree-id22095 . -9) (undo-tree-id22096 . -14) (undo-tree-id22097 . -14) (undo-tree-id22098 . -14) (undo-tree-id22099 . -14) (undo-tree-id22100 . -14) (undo-tree-id22101 . -14) (undo-tree-id22102 . -14) (undo-tree-id22103 . -14) (undo-tree-id22104 . -14) (undo-tree-id22105 . -14) (undo-tree-id22106 . -14) (undo-tree-id22107 . -14) (undo-tree-id22108 . -14) (undo-tree-id22109 . -14) (undo-tree-id22110 . -14) (undo-tree-id22111 . -17) (undo-tree-id22112 . -17) (undo-tree-id22113 . -17) (undo-tree-id22114 . -17) (undo-tree-id22115 . -17) (undo-tree-id22116 . -17) (undo-tree-id22117 . -17) (undo-tree-id22118 . -17) (undo-tree-id22119 . -17) (undo-tree-id22120 . -17) (undo-tree-id22121 . -17) (undo-tree-id22122 . -17) (undo-tree-id22123 . -17) (undo-tree-id22124 . -17) (undo-tree-id22125 . -17) (undo-tree-id22126 . -18) (undo-tree-id22127 . -17) (undo-tree-id22128 . -6) (undo-tree-id22129 . -6) (undo-tree-id22130 . -6) (undo-tree-id22131 . -6) (undo-tree-id22132 . -6) (undo-tree-id22133 . -6) (undo-tree-id22134 . -6) (undo-tree-id22135 . -6) (undo-tree-id22136 . -6) (undo-tree-id22137 . -6) (undo-tree-id22138 . -6) (undo-tree-id22139 . -6) (undo-tree-id22140 . -6) (undo-tree-id22141 . -6) (undo-tree-id22142 . -6) (undo-tree-id22143 . -6) (undo-tree-id22144 . -6) (undo-tree-id22145 . -6) (undo-tree-id22146 . -6) (undo-tree-id22147 . -6) (undo-tree-id22148 . -6) (undo-tree-id22149 . -6) (undo-tree-id22150 . -9) (undo-tree-id22151 . -9) (undo-tree-id22152 . -9) (undo-tree-id22153 . -9) (undo-tree-id22154 . -9) (undo-tree-id22155 . -9) (undo-tree-id22156 . -9) (undo-tree-id22157 . -9) (undo-tree-id22158 . -9) (undo-tree-id22159 . -9) (undo-tree-id22160 . -9) (undo-tree-id22161 . -9) (undo-tree-id22162 . -9) (undo-tree-id22163 . -9) (undo-tree-id22164 . -9) (undo-tree-id22165 . -9) (undo-tree-id22166 . -9) (undo-tree-id22167 . -9) (undo-tree-id22168 . -9) (undo-tree-id22169 . -9) (undo-tree-id22170 . -9) (undo-tree-id22171 . -9) (undo-tree-id22172 . -14) (undo-tree-id22173 . -14) (undo-tree-id22174 . -14) (undo-tree-id22175 . -14) (undo-tree-id22176 . -14) (undo-tree-id22177 . -14) (undo-tree-id22178 . -14) (undo-tree-id22179 . -14) (undo-tree-id22180 . -14) (undo-tree-id22181 . -14) (undo-tree-id22182 . -14) (undo-tree-id22183 . -14) (undo-tree-id22184 . -14) (undo-tree-id22185 . -14) (undo-tree-id22186 . -14) (undo-tree-id22187 . -14) (undo-tree-id22188 . -14) (undo-tree-id22189 . -14) (undo-tree-id22190 . -14) (undo-tree-id22191 . -14) (undo-tree-id22192 . -14) (undo-tree-id22193 . -14) (undo-tree-id22194 . -17) (undo-tree-id22195 . -17) (undo-tree-id22196 . -17) (undo-tree-id22197 . -17) (undo-tree-id22198 . -17) (undo-tree-id22199 . -17) (undo-tree-id22200 . -17) (undo-tree-id22201 . -17) (undo-tree-id22202 . -17) (undo-tree-id22203 . -17) (undo-tree-id22204 . -17) (undo-tree-id22205 . -17) (undo-tree-id22206 . -17) (undo-tree-id22207 . -17) (undo-tree-id22208 . -17) (undo-tree-id22209 . -17) (undo-tree-id22210 . -17) (undo-tree-id22211 . -17) (undo-tree-id22212 . -17) (undo-tree-id22213 . -17) (undo-tree-id22214 . -17) (undo-tree-id22215 . -17) (undo-tree-id22216 . -17) (undo-tree-id22217 . -18) (undo-tree-id22218 . -18) (undo-tree-id22219 . -18) 5253 (t 25772 50732 818130 694000)) nil (25772 50774 335047 628000) 0 nil])
([nil nil ((5248 . 5251)) nil (25772 50774 334947 608000) 0 nil])
([nil nil ((5207 . 5429) (#("- , and this means we must have a single output value per time step. However, having a single unit means that the hidden state is just a single number. 
- It must have a single unit for forecasting a univariate time series" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 68 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 68 69 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 69 104 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 104 105 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 105 152 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 152 153 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 153 154 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 154 155 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 155 185 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 185 222 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5207) (undo-tree-id20986 . -182) (undo-tree-id20987 . -182) (undo-tree-id20988 . 25) (undo-tree-id20989 . -182) (undo-tree-id20990 . -182) (undo-tree-id20991 . 37) (undo-tree-id20992 . -185) (undo-tree-id20993 . -196) (undo-tree-id20994 . -222) (undo-tree-id20995 . -155) (undo-tree-id20996 . -155) (undo-tree-id20997 . -155) (undo-tree-id20998 . -155) (undo-tree-id20999 . -155) (undo-tree-id21000 . -155) (undo-tree-id21001 . -155) (undo-tree-id21002 . -155) (undo-tree-id21003 . -155) (undo-tree-id21004 . -155) (undo-tree-id21005 . -155) (undo-tree-id21006 . -155) (undo-tree-id21007 . -155) (undo-tree-id21008 . -155) (undo-tree-id21009 . -155) (undo-tree-id21010 . -155) (undo-tree-id21011 . -155) (undo-tree-id21012 . -155) (undo-tree-id21013 . -155) (undo-tree-id21014 . -155) (undo-tree-id21015 . -155) (undo-tree-id21016 . -155) (undo-tree-id21017 . -155) (undo-tree-id21018 . -155) (undo-tree-id21019 . -155) (undo-tree-id21020 . -155) (undo-tree-id21021 . -155) (undo-tree-id21022 . -155) (undo-tree-id21023 . -155) (undo-tree-id21024 . -155) (undo-tree-id21025 . -155) (undo-tree-id21026 . -155) (undo-tree-id21027 . -155) (undo-tree-id21028 . -155) (undo-tree-id21029 . -155) (undo-tree-id21030 . -155) (undo-tree-id21031 . -155) (undo-tree-id21032 . -155) (undo-tree-id21033 . -155) (undo-tree-id21034 . -155) (undo-tree-id21035 . -155) (undo-tree-id21036 . -155) (undo-tree-id21037 . -155) (undo-tree-id21038 . -155) (undo-tree-id21039 . -155) (undo-tree-id21040 . -155) (undo-tree-id21041 . -156) (undo-tree-id21042 . -156) (undo-tree-id21043 . -156) (undo-tree-id21044 . -156) (undo-tree-id21045 . -156) (undo-tree-id21046 . -156) (undo-tree-id21047 . -156) (undo-tree-id21048 . -156) (undo-tree-id21049 . -156) (undo-tree-id21050 . -156) (undo-tree-id21051 . -156) (undo-tree-id21052 . -156) (undo-tree-id21053 . -156) (undo-tree-id21054 . -156) (undo-tree-id21055 . -156) (undo-tree-id21056 . -161) (undo-tree-id21057 . -161) (undo-tree-id21058 . -161) (undo-tree-id21059 . -161) (undo-tree-id21060 . -161) (undo-tree-id21061 . -161) (undo-tree-id21062 . -161) (undo-tree-id21063 . -161) (undo-tree-id21064 . -161) (undo-tree-id21065 . -161) (undo-tree-id21066 . -161) (undo-tree-id21067 . -161) (undo-tree-id21068 . -161) (undo-tree-id21069 . -161) (undo-tree-id21070 . -161) (undo-tree-id21071 . -166) (undo-tree-id21072 . -166) (undo-tree-id21073 . -166) (undo-tree-id21074 . -166) (undo-tree-id21075 . -166) (undo-tree-id21076 . -166) (undo-tree-id21077 . -166) (undo-tree-id21078 . -166) (undo-tree-id21079 . -166) (undo-tree-id21080 . -166) (undo-tree-id21081 . -166) (undo-tree-id21082 . -166) (undo-tree-id21083 . -166) (undo-tree-id21084 . -166) (undo-tree-id21085 . -166) (undo-tree-id21086 . -168) (undo-tree-id21087 . -168) (undo-tree-id21088 . -168) (undo-tree-id21089 . -168) (undo-tree-id21090 . -168) (undo-tree-id21091 . -168) (undo-tree-id21092 . -168) (undo-tree-id21093 . -168) (undo-tree-id21094 . -168) (undo-tree-id21095 . -168) (undo-tree-id21096 . -168) (undo-tree-id21097 . -168) (undo-tree-id21098 . -168) (undo-tree-id21099 . -168) (undo-tree-id21100 . -168) (undo-tree-id21101 . -175) (undo-tree-id21102 . -175) (undo-tree-id21103 . -175) (undo-tree-id21104 . -175) (undo-tree-id21105 . -175) (undo-tree-id21106 . -175) (undo-tree-id21107 . -175) (undo-tree-id21108 . -175) (undo-tree-id21109 . -175) (undo-tree-id21110 . -175) (undo-tree-id21111 . -175) (undo-tree-id21112 . -175) (undo-tree-id21113 . -175) (undo-tree-id21114 . -175) (undo-tree-id21115 . -175) (undo-tree-id21116 . -180) (undo-tree-id21117 . -180) (undo-tree-id21118 . -180) (undo-tree-id21119 . -180) (undo-tree-id21120 . -180) (undo-tree-id21121 . -180) (undo-tree-id21122 . -180) (undo-tree-id21123 . -180) (undo-tree-id21124 . -180) (undo-tree-id21125 . -180) (undo-tree-id21126 . -180) (undo-tree-id21127 . -180) (undo-tree-id21128 . -180) (undo-tree-id21129 . -180) (undo-tree-id21130 . -180) (undo-tree-id21131 . -182) (undo-tree-id21132 . -182) (undo-tree-id21133 . -182) (undo-tree-id21134 . -182) (undo-tree-id21135 . -182) (undo-tree-id21136 . -182) (undo-tree-id21137 . -182) (undo-tree-id21138 . -182) (undo-tree-id21139 . -182) (undo-tree-id21140 . -182) (undo-tree-id21141 . -182) (undo-tree-id21142 . -182) (undo-tree-id21143 . -182) (undo-tree-id21144 . -182) (undo-tree-id21145 . -182) (undo-tree-id21146 . -182) (undo-tree-id21147 . -182) (undo-tree-id21148 . -182) (undo-tree-id21149 . -182) (undo-tree-id21150 . -182) (undo-tree-id21151 . -182) (undo-tree-id21152 . -182) (undo-tree-id21153 . -182) (undo-tree-id21154 . -182) (undo-tree-id21155 . -182) (undo-tree-id21156 . -182) (undo-tree-id21157 . -182) (undo-tree-id21158 . -182) (undo-tree-id21159 . -182) (undo-tree-id21160 . -182) (undo-tree-id21161 . -182) (undo-tree-id21162 . -182) (undo-tree-id21163 . -182) (undo-tree-id21164 . -182) (undo-tree-id21165 . -182) (undo-tree-id21166 . -182) (undo-tree-id21167 . -182) (undo-tree-id21168 . -182) (undo-tree-id21169 . -182) (undo-tree-id21170 . -182) (undo-tree-id21171 . -182) (undo-tree-id21172 . -182) (undo-tree-id21173 . -182) (undo-tree-id21174 . -182) (undo-tree-id21175 . -182) (undo-tree-id21176 . -182) (undo-tree-id21177 . -182) (undo-tree-id21178 . -182) (undo-tree-id21179 . -182) (undo-tree-id21180 . -182) (undo-tree-id21181 . -182) (undo-tree-id21182 . -182) (undo-tree-id21183 . -182) (undo-tree-id21184 . -182) (undo-tree-id21185 . -182) (undo-tree-id21186 . -182) (undo-tree-id21187 . -182) (undo-tree-id21188 . -182) (undo-tree-id21189 . -182) (undo-tree-id21190 . -182) (undo-tree-id21191 . -182) (undo-tree-id21192 . -182) (undo-tree-id21193 . -182) (undo-tree-id21194 . -182) (undo-tree-id21195 . -182) (undo-tree-id21196 . -182) (undo-tree-id21197 . -182) (undo-tree-id21198 . -182) (undo-tree-id21199 . -182) (undo-tree-id21200 . -182) (undo-tree-id21201 . -182) (undo-tree-id21202 . -182) (undo-tree-id21203 . -182) (undo-tree-id21204 . -182) (undo-tree-id21205 . -193) (undo-tree-id21206 . -193) (undo-tree-id21207 . -193) (undo-tree-id21208 . -193) (undo-tree-id21209 . -193) (undo-tree-id21210 . -193) (undo-tree-id21211 . -193) (undo-tree-id21212 . -193) (undo-tree-id21213 . -193) (undo-tree-id21214 . -193) (undo-tree-id21215 . -193) (undo-tree-id21216 . -193) (undo-tree-id21217 . -193) (undo-tree-id21218 . -193) (undo-tree-id21219 . -193) (undo-tree-id21220 . -198) (undo-tree-id21221 . -198) (undo-tree-id21222 . -198) (undo-tree-id21223 . -198) (undo-tree-id21224 . -198) (undo-tree-id21225 . -198) (undo-tree-id21226 . -198) (undo-tree-id21227 . -198) (undo-tree-id21228 . -198) (undo-tree-id21229 . -198) (undo-tree-id21230 . -198) (undo-tree-id21231 . -198) (undo-tree-id21232 . -198) (undo-tree-id21233 . -198) (undo-tree-id21234 . -198) (undo-tree-id21235 . -209) (undo-tree-id21236 . -209) (undo-tree-id21237 . -209) (undo-tree-id21238 . -209) (undo-tree-id21239 . -209) (undo-tree-id21240 . -209) (undo-tree-id21241 . -209) (undo-tree-id21242 . -209) (undo-tree-id21243 . -209) (undo-tree-id21244 . -209) (undo-tree-id21245 . -209) (undo-tree-id21246 . -209) (undo-tree-id21247 . -209) (undo-tree-id21248 . -209) (undo-tree-id21249 . -209) (undo-tree-id21250 . -214) (undo-tree-id21251 . -214) (undo-tree-id21252 . -214) (undo-tree-id21253 . -214) (undo-tree-id21254 . -214) (undo-tree-id21255 . -214) (undo-tree-id21256 . -214) (undo-tree-id21257 . -214) (undo-tree-id21258 . -214) (undo-tree-id21259 . -214) (undo-tree-id21260 . -214) (undo-tree-id21261 . -214) (undo-tree-id21262 . -214) (undo-tree-id21263 . -214) (undo-tree-id21264 . -214) (undo-tree-id21265 . -221) (undo-tree-id21266 . -221) (undo-tree-id21267 . -221) (undo-tree-id21268 . -221) (undo-tree-id21269 . -221) (undo-tree-id21270 . -221) (undo-tree-id21271 . -221) (undo-tree-id21272 . -221) (undo-tree-id21273 . -221) (undo-tree-id21274 . -221) (undo-tree-id21275 . -221) (undo-tree-id21276 . -221) (undo-tree-id21277 . -221) (undo-tree-id21278 . -221) (undo-tree-id21279 . -221) (undo-tree-id21280 . -221) (undo-tree-id21281 . -221) (undo-tree-id21282 . -221) (undo-tree-id21283 . -221) (undo-tree-id21284 . -221) (undo-tree-id21285 . -221) (undo-tree-id21286 . -221) (undo-tree-id21287 . -221) (undo-tree-id21288 . -221) (undo-tree-id21289 . -221) (undo-tree-id21290 . -221) (undo-tree-id21291 . -221) (undo-tree-id21292 . -221) (undo-tree-id21293 . -221) (undo-tree-id21294 . -155) (undo-tree-id21295 . -155) (undo-tree-id21296 . -155) (undo-tree-id21297 . -155) (undo-tree-id21298 . -155) (undo-tree-id21299 . -155) (undo-tree-id21300 . -155) (undo-tree-id21301 . -155) (undo-tree-id21302 . -155) (undo-tree-id21303 . -155) (undo-tree-id21304 . -155) (undo-tree-id21305 . -155) (undo-tree-id21306 . -155) (undo-tree-id21307 . -155) (undo-tree-id21308 . -155) (undo-tree-id21309 . -158) (undo-tree-id21310 . -158) (undo-tree-id21311 . -158) (undo-tree-id21312 . -158) (undo-tree-id21313 . -158) (undo-tree-id21314 . -158) (undo-tree-id21315 . -158) (undo-tree-id21316 . -158) (undo-tree-id21317 . -158) (undo-tree-id21318 . -158) (undo-tree-id21319 . -158) (undo-tree-id21320 . -158) (undo-tree-id21321 . -158) (undo-tree-id21322 . -158) (undo-tree-id21323 . -158) (undo-tree-id21324 . -163) (undo-tree-id21325 . -163) (undo-tree-id21326 . -163) (undo-tree-id21327 . -163) (undo-tree-id21328 . -163) (undo-tree-id21329 . -163) (undo-tree-id21330 . -163) (undo-tree-id21331 . -163) (undo-tree-id21332 . -163) (undo-tree-id21333 . -163) (undo-tree-id21334 . -163) (undo-tree-id21335 . -163) (undo-tree-id21336 . -163) (undo-tree-id21337 . -163) (undo-tree-id21338 . -163) (undo-tree-id21339 . -168) (undo-tree-id21340 . -168) (undo-tree-id21341 . -168) (undo-tree-id21342 . -168) (undo-tree-id21343 . -168) (undo-tree-id21344 . -168) (undo-tree-id21345 . -168) (undo-tree-id21346 . -168) (undo-tree-id21347 . -168) (undo-tree-id21348 . -168) (undo-tree-id21349 . -168) (undo-tree-id21350 . -168) (undo-tree-id21351 . -168) (undo-tree-id21352 . -168) (undo-tree-id21353 . -168) (undo-tree-id21354 . -170) (undo-tree-id21355 . -170) (undo-tree-id21356 . -170) (undo-tree-id21357 . -170) (undo-tree-id21358 . -170) (undo-tree-id21359 . -170) (undo-tree-id21360 . -170) (undo-tree-id21361 . -170) (undo-tree-id21362 . -170) (undo-tree-id21363 . -170) (undo-tree-id21364 . -170) (undo-tree-id21365 . -170) (undo-tree-id21366 . -170) (undo-tree-id21367 . -170) (undo-tree-id21368 . -170) (undo-tree-id21369 . -177) (undo-tree-id21370 . -177) (undo-tree-id21371 . -177) (undo-tree-id21372 . -177) (undo-tree-id21373 . -177) (undo-tree-id21374 . -177) (undo-tree-id21375 . -177) (undo-tree-id21376 . -177) (undo-tree-id21377 . -177) (undo-tree-id21378 . -177) (undo-tree-id21379 . -177) (undo-tree-id21380 . -177) (undo-tree-id21381 . -177) (undo-tree-id21382 . -177) (undo-tree-id21383 . -177) (undo-tree-id21384 . -177) (undo-tree-id21385 . -177) (undo-tree-id21386 . -177) (undo-tree-id21387 . -177) (undo-tree-id21388 . -177) (undo-tree-id21389 . -177) (undo-tree-id21390 . -177) (undo-tree-id21391 . -182) (undo-tree-id21392 . -182) (undo-tree-id21393 . -182) (undo-tree-id21394 . -182) (undo-tree-id21395 . -182) (undo-tree-id21396 . -182) (undo-tree-id21397 . -182) (undo-tree-id21398 . -182) (undo-tree-id21399 . -182) (undo-tree-id21400 . -182) (undo-tree-id21401 . -182) (undo-tree-id21402 . -182) (undo-tree-id21403 . -182) (undo-tree-id21404 . -182) (undo-tree-id21405 . -182) (undo-tree-id21406 . -182) (undo-tree-id21407 . -182) (undo-tree-id21408 . -182) (undo-tree-id21409 . -182) (undo-tree-id21410 . -182) (undo-tree-id21411 . -182) (undo-tree-id21412 . -182) (undo-tree-id21413 . -182) (undo-tree-id21414 . -182) (undo-tree-id21415 . -182) (undo-tree-id21416 . -182) (undo-tree-id21417 . -182) (undo-tree-id21418 . -182) (undo-tree-id21419 . -182) (undo-tree-id21420 . -182) (undo-tree-id21421 . -182) (undo-tree-id21422 . -182) (undo-tree-id21423 . -182) (undo-tree-id21424 . -182) (undo-tree-id21425 . -182) (undo-tree-id21426 . -182) (undo-tree-id21427 . -182) (undo-tree-id21428 . -182) (undo-tree-id21429 . -182) (undo-tree-id21430 . -182) (undo-tree-id21431 . -182) (undo-tree-id21432 . -182) (undo-tree-id21433 . -182) (undo-tree-id21434 . -182) (undo-tree-id21435 . -182) (undo-tree-id21436 . -182) (undo-tree-id21437 . -182) (undo-tree-id21438 . -182) (undo-tree-id21439 . -182) (undo-tree-id21440 . -182) (undo-tree-id21441 . -182) (undo-tree-id21442 . -182) (undo-tree-id21443 . -182) (undo-tree-id21444 . -182) (undo-tree-id21445 . -182) (undo-tree-id21446 . -182) (undo-tree-id21447 . -182) (undo-tree-id21448 . -182) (undo-tree-id21449 . -182) (undo-tree-id21450 . -182) (undo-tree-id21451 . -182) (undo-tree-id21452 . -182) (undo-tree-id21453 . -182) (undo-tree-id21454 . -182) (undo-tree-id21455 . -182) (undo-tree-id21456 . -182) (undo-tree-id21457 . -182) (undo-tree-id21458 . -182) (undo-tree-id21459 . -182) (undo-tree-id21460 . -182) (undo-tree-id21461 . -182) (undo-tree-id21462 . -182) (undo-tree-id21463 . -182) (undo-tree-id21464 . -182) (undo-tree-id21465 . -182) (undo-tree-id21466 . -182) (undo-tree-id21467 . -182) (undo-tree-id21468 . -182) (undo-tree-id21469 . -182) (undo-tree-id21470 . -182) (undo-tree-id21471 . -182) (undo-tree-id21472 . -182) (undo-tree-id21473 . -182) (undo-tree-id21474 . -182) (undo-tree-id21475 . -182) (undo-tree-id21476 . -182) (undo-tree-id21477 . -182) (undo-tree-id21478 . -182) (undo-tree-id21479 . -182) (undo-tree-id21480 . -182) (undo-tree-id21481 . -182) (undo-tree-id21482 . -182) (undo-tree-id21483 . -182) (undo-tree-id21484 . -182) (undo-tree-id21485 . -182) (undo-tree-id21486 . -182) (undo-tree-id21487 . -182) (undo-tree-id21488 . -182) (undo-tree-id21489 . -182) (undo-tree-id21490 . -182) (undo-tree-id21491 . -182) (undo-tree-id21492 . -182) (undo-tree-id21493 . -182) (undo-tree-id21494 . -182) (undo-tree-id21495 . -182) (undo-tree-id21496 . -182) (undo-tree-id21497 . -182) (undo-tree-id21498 . -182) (undo-tree-id21499 . -182) (undo-tree-id21500 . -182) (undo-tree-id21501 . -182) (undo-tree-id21502 . -182) (undo-tree-id21503 . -182) (undo-tree-id21504 . -182) (undo-tree-id21505 . -182) (undo-tree-id21506 . -182) (undo-tree-id21507 . -182) (undo-tree-id21508 . -182) (undo-tree-id21509 . -182) (undo-tree-id21510 . -182) (undo-tree-id21511 . -182) (undo-tree-id21512 . -182) (undo-tree-id21513 . -182) (undo-tree-id21514 . -182) (undo-tree-id21515 . -182) (undo-tree-id21516 . -182) (undo-tree-id21517 . -182) (undo-tree-id21518 . -182) (undo-tree-id21519 . -182) (undo-tree-id21520 . -182) (undo-tree-id21521 . -182) (undo-tree-id21522 . -182) (undo-tree-id21523 . -182) (undo-tree-id21524 . -182) (undo-tree-id21525 . -182) (undo-tree-id21526 . -182) (undo-tree-id21527 . -182) (undo-tree-id21528 . -182) (undo-tree-id21529 . -182) (undo-tree-id21530 . -182) (undo-tree-id21531 . -182) (undo-tree-id21532 . -182) (undo-tree-id21533 . -182) (undo-tree-id21534 . -182) (undo-tree-id21535 . -182) (undo-tree-id21536 . -182) (undo-tree-id21537 . -182) (undo-tree-id21538 . -182) (undo-tree-id21539 . -182) (undo-tree-id21540 . -182) (undo-tree-id21541 . -182) (undo-tree-id21542 . -183) (undo-tree-id21543 . -183) (undo-tree-id21544 . -183) (undo-tree-id21545 . -183) (undo-tree-id21546 . -183) (undo-tree-id21547 . -183) (undo-tree-id21548 . -183) (undo-tree-id21549 . -183) (undo-tree-id21550 . -183) (undo-tree-id21551 . -183) (undo-tree-id21552 . -183) (undo-tree-id21553 . -183) (undo-tree-id21554 . -183) (undo-tree-id21555 . -183) (undo-tree-id21556 . -183) (undo-tree-id21557 . -183) (undo-tree-id21558 . -183) (undo-tree-id21559 . -183) (undo-tree-id21560 . -183) (undo-tree-id21561 . -183) (undo-tree-id21562 . -183) (undo-tree-id21563 . -183) (undo-tree-id21564 . -183) (undo-tree-id21565 . -183) (undo-tree-id21566 . -183) (undo-tree-id21567 . -183) (undo-tree-id21568 . -183) (undo-tree-id21569 . -183) (undo-tree-id21570 . -183) (undo-tree-id21571 . -183) (undo-tree-id21572 . -183) (undo-tree-id21573 . -183) (undo-tree-id21574 . -183) (undo-tree-id21575 . -183) (undo-tree-id21576 . -183) (undo-tree-id21577 . -183) (undo-tree-id21578 . -183) (undo-tree-id21579 . -183) (undo-tree-id21580 . -184) (undo-tree-id21581 . -184) (undo-tree-id21582 . -184) (undo-tree-id21583 . -184) (undo-tree-id21584 . -184) (undo-tree-id21585 . -184) (undo-tree-id21586 . -184) (undo-tree-id21587 . -184) (undo-tree-id21588 . -184) (undo-tree-id21589 . -184) (undo-tree-id21590 . -184) (undo-tree-id21591 . -184) (undo-tree-id21592 . -184) (undo-tree-id21593 . -184) (undo-tree-id21594 . -184) (undo-tree-id21595 . -184) (undo-tree-id21596 . -184) (undo-tree-id21597 . -184) (undo-tree-id21598 . -184) (undo-tree-id21599 . -184) (undo-tree-id21600 . -184) (undo-tree-id21601 . -184) (undo-tree-id21602 . -184) (undo-tree-id21603 . -184) (undo-tree-id21604 . -185) (undo-tree-id21605 . -185) (undo-tree-id21606 . -185) (undo-tree-id21607 . -185) (undo-tree-id21608 . -185) (undo-tree-id21609 . -185) (undo-tree-id21610 . -185) (undo-tree-id21611 . -185) (undo-tree-id21612 . -185) (undo-tree-id21613 . -185) (undo-tree-id21614 . -185) (undo-tree-id21615 . -185) (undo-tree-id21616 . -185) (undo-tree-id21617 . -185) (undo-tree-id21618 . -185) (undo-tree-id21619 . -185) (undo-tree-id21620 . -185) (undo-tree-id21621 . -185) (undo-tree-id21622 . -185) (undo-tree-id21623 . -185) (undo-tree-id21624 . -185) (undo-tree-id21625 . -185) (undo-tree-id21626 . -185) (undo-tree-id21627 . -185) (undo-tree-id21628 . -184) (undo-tree-id21629 . -184) (undo-tree-id21630 . -184) (undo-tree-id21631 . -184) (undo-tree-id21632 . -184) (undo-tree-id21633 . -184) (undo-tree-id21634 . -184) (undo-tree-id21635 . -184) (undo-tree-id21636 . -184) (undo-tree-id21637 . -184) (undo-tree-id21638 . -184) (undo-tree-id21639 . -184) (undo-tree-id21640 . -184) (undo-tree-id21641 . -184) (undo-tree-id21642 . -184) (undo-tree-id21643 . -184) (undo-tree-id21644 . -184) (undo-tree-id21645 . -184) (undo-tree-id21646 . -184) (undo-tree-id21647 . -184) (undo-tree-id21648 . -184) (undo-tree-id21649 . -184) (undo-tree-id21650 . -184) (undo-tree-id21651 . -184) (undo-tree-id21652 . -184) (undo-tree-id21653 . -184) (undo-tree-id21654 . -186) (undo-tree-id21655 . -186) (undo-tree-id21656 . -186) (undo-tree-id21657 . -186) (undo-tree-id21658 . -186) (undo-tree-id21659 . -186) (undo-tree-id21660 . -186) (undo-tree-id21661 . -186) (undo-tree-id21662 . -186) (undo-tree-id21663 . -186) (undo-tree-id21664 . -186) (undo-tree-id21665 . -186) (undo-tree-id21666 . -186) (undo-tree-id21667 . -186) (undo-tree-id21668 . -186) (undo-tree-id21669 . -186) (undo-tree-id21670 . -186) (undo-tree-id21671 . -186) (undo-tree-id21672 . -186) (undo-tree-id21673 . -186) (undo-tree-id21674 . -186) (undo-tree-id21675 . -186) (undo-tree-id21676 . -186) (undo-tree-id21677 . -186) (undo-tree-id21678 . -186) (undo-tree-id21679 . -186) (undo-tree-id21680 . -186) (undo-tree-id21681 . -186) (undo-tree-id21682 . -186) (undo-tree-id21683 . -186) (undo-tree-id21684 . -186) (undo-tree-id21685 . -186) (undo-tree-id21686 . -186) (undo-tree-id21687 . -186) (undo-tree-id21688 . -186) (undo-tree-id21689 . -186) (undo-tree-id21690 . -201) (undo-tree-id21691 . -201) (undo-tree-id21692 . -201) (undo-tree-id21693 . -201) (undo-tree-id21694 . -201) (undo-tree-id21695 . -201) (undo-tree-id21696 . -201) (undo-tree-id21697 . -201) (undo-tree-id21698 . -201) (undo-tree-id21699 . -201) (undo-tree-id21700 . -201) (undo-tree-id21701 . -201) (undo-tree-id21702 . -201) (undo-tree-id21703 . -201) (undo-tree-id21704 . -201) (undo-tree-id21705 . -200) (undo-tree-id21706 . -200) (undo-tree-id21707 . -200) (undo-tree-id21708 . -200) (undo-tree-id21709 . -200) (undo-tree-id21710 . -200) (undo-tree-id21711 . -200) (undo-tree-id21712 . -200) (undo-tree-id21713 . -200) (undo-tree-id21714 . -200) (undo-tree-id21715 . -200) (undo-tree-id21716 . -200) (undo-tree-id21717 . -200) (undo-tree-id21718 . -200) (undo-tree-id21719 . -200) (undo-tree-id21720 . -198) (undo-tree-id21721 . -198) (undo-tree-id21722 . -198) (undo-tree-id21723 . -198) (undo-tree-id21724 . -198) (undo-tree-id21725 . -198) (undo-tree-id21726 . -198) (undo-tree-id21727 . -198) (undo-tree-id21728 . -198) (undo-tree-id21729 . -198) (undo-tree-id21730 . -198) (undo-tree-id21731 . -198) (undo-tree-id21732 . -198) (undo-tree-id21733 . -198) (undo-tree-id21734 . -198) (undo-tree-id21735 . -198) (undo-tree-id21736 . -198) (undo-tree-id21737 . -198) (undo-tree-id21738 . -198) (undo-tree-id21739 . -198) (undo-tree-id21740 . -198) (undo-tree-id21741 . -198) (undo-tree-id21742 . -186) (undo-tree-id21743 . -186) (undo-tree-id21744 . -186) (undo-tree-id21745 . -186) (undo-tree-id21746 . -186) (undo-tree-id21747 . -186) (undo-tree-id21748 . -186) (undo-tree-id21749 . -186) (undo-tree-id21750 . -186) (undo-tree-id21751 . -186) (undo-tree-id21752 . -186) (undo-tree-id21753 . -186) (undo-tree-id21754 . -186) (undo-tree-id21755 . -186) (undo-tree-id21756 . -186) (undo-tree-id21757 . -193) (undo-tree-id21758 . -193) (undo-tree-id21759 . -193) (undo-tree-id21760 . -193) (undo-tree-id21761 . -193) (undo-tree-id21762 . -193) (undo-tree-id21763 . -193) (undo-tree-id21764 . -193) (undo-tree-id21765 . -193) (undo-tree-id21766 . -193) (undo-tree-id21767 . -193) (undo-tree-id21768 . -193) (undo-tree-id21769 . -193) (undo-tree-id21770 . -193) (undo-tree-id21771 . -193) (undo-tree-id21772 . -193) (undo-tree-id21773 . -193) (undo-tree-id21774 . -193) (undo-tree-id21775 . -193) (undo-tree-id21776 . -193) (undo-tree-id21777 . -193) (undo-tree-id21778 . -193) (undo-tree-id21779 . -193) (undo-tree-id21780 . -193) (undo-tree-id21781 . -193) (undo-tree-id21782 . -193) (undo-tree-id21783 . -193) (undo-tree-id21784 . -193) (undo-tree-id21785 . -193) (undo-tree-id21786 . -193) (undo-tree-id21787 . -193) (undo-tree-id21788 . -193) (undo-tree-id21789 . -193) (undo-tree-id21790 . -193) (undo-tree-id21791 . -193) (undo-tree-id21792 . -193) (undo-tree-id21793 . -193) (undo-tree-id21794 . -193) (undo-tree-id21795 . -193) (undo-tree-id21796 . -193) (undo-tree-id21797 . -193) (undo-tree-id21798 . -193) (undo-tree-id21799 . -193) (undo-tree-id21800 . -193) (undo-tree-id21801 . -194) (undo-tree-id21802 . -194) (undo-tree-id21803 . -194) (undo-tree-id21804 . -194) (undo-tree-id21805 . -194) (undo-tree-id21806 . -194) (undo-tree-id21807 . -194) (undo-tree-id21808 . -194) (undo-tree-id21809 . -194) (undo-tree-id21810 . -194) (undo-tree-id21811 . -194) (undo-tree-id21812 . -194) (undo-tree-id21813 . -194) (undo-tree-id21814 . -194) (undo-tree-id21815 . -194) (undo-tree-id21816 . -194) (undo-tree-id21817 . -194) (undo-tree-id21818 . -195) (undo-tree-id21819 . -195) (undo-tree-id21820 . -195) (undo-tree-id21821 . -195) (undo-tree-id21822 . -195) (undo-tree-id21823 . -195) (undo-tree-id21824 . -195) (undo-tree-id21825 . -195) (undo-tree-id21826 . -195) (undo-tree-id21827 . -195) (undo-tree-id21828 . -195) (undo-tree-id21829 . -195) (undo-tree-id21830 . -195) (undo-tree-id21831 . -195) (undo-tree-id21832 . -195) (undo-tree-id21833 . -195) (undo-tree-id21834 . -195) (undo-tree-id21835 . -195) (undo-tree-id21836 . -195) (undo-tree-id21837 . -195) (undo-tree-id21838 . -195) (undo-tree-id21839 . -195) (undo-tree-id21840 . -195) (undo-tree-id21841 . -195) (undo-tree-id21842 . -195) (undo-tree-id21843 . -195) (undo-tree-id21844 . -195) (undo-tree-id21845 . -195) (undo-tree-id21846 . -195) (undo-tree-id21847 . -195) (undo-tree-id21848 . -195) (undo-tree-id21849 . -195) (undo-tree-id21850 . -195) (undo-tree-id21851 . -195) (undo-tree-id21852 . -195) (undo-tree-id21853 . -195) (undo-tree-id21854 . -195) (undo-tree-id21855 . -195) (undo-tree-id21856 . -196) (undo-tree-id21857 . -196) (undo-tree-id21858 . -196) (undo-tree-id21859 . -196) (undo-tree-id21860 . -196) (undo-tree-id21861 . -196) (undo-tree-id21862 . -196) (undo-tree-id21863 . -196) (undo-tree-id21864 . -196) (undo-tree-id21865 . -196) (undo-tree-id21866 . -196) (undo-tree-id21867 . -196) (undo-tree-id21868 . -196) (undo-tree-id21869 . -196) (undo-tree-id21870 . -196) (undo-tree-id21871 . -196) (undo-tree-id21872 . -196) (undo-tree-id21873 . -196) (undo-tree-id21874 . -196) (undo-tree-id21875 . -196) (undo-tree-id21876 . -196) (undo-tree-id21877 . -196) (undo-tree-id21878 . -196) (undo-tree-id21879 . -196) (undo-tree-id21880 . -197) (undo-tree-id21881 . -197) (undo-tree-id21882 . -197) (undo-tree-id21883 . -197) (undo-tree-id21884 . -197) (undo-tree-id21885 . -197) (undo-tree-id21886 . -197) (undo-tree-id21887 . -197) (undo-tree-id21888 . -197) (undo-tree-id21889 . -197) (undo-tree-id21890 . -197) (undo-tree-id21891 . -197) (undo-tree-id21892 . -197) (undo-tree-id21893 . -197) (undo-tree-id21894 . -197) (undo-tree-id21895 . -197) (undo-tree-id21896 . -197) (undo-tree-id21897 . -197) (undo-tree-id21898 . -197) (undo-tree-id21899 . -196) (undo-tree-id21900 . -196) (undo-tree-id21901 . -196) (undo-tree-id21902 . -196) (undo-tree-id21903 . -196) (undo-tree-id21904 . -196) (undo-tree-id21905 . -196) (undo-tree-id21906 . -196) (undo-tree-id21907 . -196) (undo-tree-id21908 . -196) (undo-tree-id21909 . -196) (undo-tree-id21910 . -196) (undo-tree-id21911 . -196) (undo-tree-id21912 . -196) (undo-tree-id21913 . -196) (undo-tree-id21914 . -196) (undo-tree-id21915 . -196) (undo-tree-id21916 . -196) (undo-tree-id21917 . -196) (undo-tree-id21918 . -196) (undo-tree-id21919 . -196) (undo-tree-id21920 . -196) (undo-tree-id21921 . -196) (undo-tree-id21922 . -196) (undo-tree-id21923 . -196) (undo-tree-id21924 . -196) (undo-tree-id21925 . -196) (undo-tree-id21926 . -196) (undo-tree-id21927 . -196) (undo-tree-id21928 . -196) (undo-tree-id21929 . -196) (undo-tree-id21930 . -196) (undo-tree-id21931 . -196) (undo-tree-id21932 . -198) (undo-tree-id21933 . -198) (undo-tree-id21934 . -198) (undo-tree-id21935 . -198) (undo-tree-id21936 . -198) (undo-tree-id21937 . -198) (undo-tree-id21938 . -198) (undo-tree-id21939 . -198) (undo-tree-id21940 . -198) (undo-tree-id21941 . -198) (undo-tree-id21942 . -198) (undo-tree-id21943 . -198) (undo-tree-id21944 . -198) (undo-tree-id21945 . -198) (undo-tree-id21946 . -198) (undo-tree-id21947 . 22) (undo-tree-id21948 . -210) (undo-tree-id21949 . -200) (undo-tree-id21950 . -200) (undo-tree-id21951 . -200) (undo-tree-id21952 . -200) (undo-tree-id21953 . -200) (undo-tree-id21954 . -200) (undo-tree-id21955 . -200) (undo-tree-id21956 . -200) (undo-tree-id21957 . -200) (undo-tree-id21958 . -200) (undo-tree-id21959 . -200) (undo-tree-id21960 . -200) (undo-tree-id21961 . -200) (undo-tree-id21962 . -200) (undo-tree-id21963 . -200) (undo-tree-id21964 . -211) (undo-tree-id21965 . -211) (undo-tree-id21966 . -211) (undo-tree-id21967 . -211) (undo-tree-id21968 . -211) (undo-tree-id21969 . -211) (undo-tree-id21970 . -211) (undo-tree-id21971 . -211) (undo-tree-id21972 . -211) (undo-tree-id21973 . -211) (undo-tree-id21974 . -211) (undo-tree-id21975 . -211) (undo-tree-id21976 . -211) (undo-tree-id21977 . -211) (undo-tree-id21978 . -211) (undo-tree-id21979 . -216) (undo-tree-id21980 . -216) (undo-tree-id21981 . -216) (undo-tree-id21982 . -216) (undo-tree-id21983 . -216) (undo-tree-id21984 . -216) (undo-tree-id21985 . -216) (undo-tree-id21986 . -216) (undo-tree-id21987 . -216) (undo-tree-id21988 . -216) (undo-tree-id21989 . -216) (undo-tree-id21990 . -216) (undo-tree-id21991 . -216) (undo-tree-id21992 . -216) (undo-tree-id21993 . -216) (undo-tree-id21994 . -222) (undo-tree-id21995 . -222) (undo-tree-id21996 . -222) (undo-tree-id21997 . -222) (undo-tree-id21998 . -222) (undo-tree-id21999 . -222) (undo-tree-id22000 . -222) (undo-tree-id22001 . -222) (undo-tree-id22002 . -222) (undo-tree-id22003 . -222) (undo-tree-id22004 . -222) (undo-tree-id22005 . -222) (undo-tree-id22006 . -222) (undo-tree-id22007 . -222) (undo-tree-id22008 . -222) (undo-tree-id22009 . -222) (undo-tree-id22010 . -222) (undo-tree-id22011 . -222) (undo-tree-id22012 . -222) (undo-tree-id22013 . -222) (undo-tree-id22014 . -222) (undo-tree-id22015 . -222) (undo-tree-id22016 . -222) (undo-tree-id22017 . -222) (undo-tree-id22018 . -222) (undo-tree-id22019 . -222) (undo-tree-id22020 . -222) (undo-tree-id22021 . -222) (undo-tree-id22022 . -222) (undo-tree-id22023 . -222) (undo-tree-id22024 . -222) (undo-tree-id22025 . -222) (undo-tree-id22026 . -222) (undo-tree-id22027 . -222) (undo-tree-id22028 . -222) (undo-tree-id22029 . -222) (undo-tree-id22030 . -222) (undo-tree-id22031 . -222) (undo-tree-id22032 . -222) (undo-tree-id22033 . -222) (undo-tree-id22034 . -222) (undo-tree-id22035 . -222) (undo-tree-id22036 . -222) (undo-tree-id22037 . -222) (undo-tree-id22038 . -222) (undo-tree-id22039 . -222) (undo-tree-id22040 . -222) (undo-tree-id22041 . -222) (undo-tree-id22042 . -222) (undo-tree-id22043 . -222) (undo-tree-id22044 . -222) (undo-tree-id22045 . -222) (undo-tree-id22046 . -222) (undo-tree-id22047 . -222) (undo-tree-id22048 . -153) (5207 . 5360) (#(", and this means we must have a single output value per time step. However, having a single unit means that the hidden state is just a single number. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 67 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 103 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5276)) nil (25772 50774 334915 509000) 0 nil])
([nil nil ((#(", and this means we must have" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5279) (undo-tree-id20825 . -28) (undo-tree-id20826 . 29) (undo-tree-id20827 . -28) (undo-tree-id20828 . -28) (undo-tree-id20829 . -29) (undo-tree-id20830 . -28) (undo-tree-id20831 . -4) (undo-tree-id20832 . -4) (undo-tree-id20833 . -4) (undo-tree-id20834 . -4) (undo-tree-id20835 . -4) (undo-tree-id20836 . -4) (undo-tree-id20837 . -4) (undo-tree-id20838 . -4) (undo-tree-id20839 . -4) (undo-tree-id20840 . -4) (undo-tree-id20841 . -4) (undo-tree-id20842 . -4) (undo-tree-id20843 . -4) (undo-tree-id20844 . -4) (undo-tree-id20845 . -4) (undo-tree-id20846 . -4) (undo-tree-id20847 . -4) (undo-tree-id20848 . -4) (undo-tree-id20849 . -4) (undo-tree-id20850 . -4) (undo-tree-id20851 . -4) (undo-tree-id20852 . -4) (undo-tree-id20853 . -9) (undo-tree-id20854 . -9) (undo-tree-id20855 . -9) (undo-tree-id20856 . -9) (undo-tree-id20857 . -9) (undo-tree-id20858 . -9) (undo-tree-id20859 . -9) (undo-tree-id20860 . -9) (undo-tree-id20861 . -9) (undo-tree-id20862 . -9) (undo-tree-id20863 . -9) (undo-tree-id20864 . -9) (undo-tree-id20865 . -9) (undo-tree-id20866 . -9) (undo-tree-id20867 . -9) (undo-tree-id20868 . -9) (undo-tree-id20869 . -9) (undo-tree-id20870 . -9) (undo-tree-id20871 . -9) (undo-tree-id20872 . -9) (undo-tree-id20873 . -9) (undo-tree-id20874 . -9) (undo-tree-id20875 . -15) (undo-tree-id20876 . -15) (undo-tree-id20877 . -15) (undo-tree-id20878 . -15) (undo-tree-id20879 . -15) (undo-tree-id20880 . -15) (undo-tree-id20881 . -15) (undo-tree-id20882 . -15) (undo-tree-id20883 . -15) (undo-tree-id20884 . -15) (undo-tree-id20885 . -15) (undo-tree-id20886 . -15) (undo-tree-id20887 . -15) (undo-tree-id20888 . -15) (undo-tree-id20889 . -15) (undo-tree-id20890 . -15) (undo-tree-id20891 . -15) (undo-tree-id20892 . -15) (undo-tree-id20893 . -15) (undo-tree-id20894 . -15) (undo-tree-id20895 . -15) (undo-tree-id20896 . -15) (undo-tree-id20897 . -18) (undo-tree-id20898 . -18) (undo-tree-id20899 . -18) (undo-tree-id20900 . -18) (undo-tree-id20901 . -18) (undo-tree-id20902 . -18) (undo-tree-id20903 . -18) (undo-tree-id20904 . -18) (undo-tree-id20905 . -18) (undo-tree-id20906 . -18) (undo-tree-id20907 . -18) (undo-tree-id20908 . -18) (undo-tree-id20909 . -18) (undo-tree-id20910 . -18) (undo-tree-id20911 . -18) (undo-tree-id20912 . -18) (undo-tree-id20913 . -18) (undo-tree-id20914 . -18) (undo-tree-id20915 . -18) (undo-tree-id20916 . -18) (undo-tree-id20917 . -18) (undo-tree-id20918 . -18) (undo-tree-id20919 . -23) (undo-tree-id20920 . -23) (undo-tree-id20921 . -23) (undo-tree-id20922 . -23) (undo-tree-id20923 . -23) (undo-tree-id20924 . -23) (undo-tree-id20925 . -23) (undo-tree-id20926 . -23) (undo-tree-id20927 . -23) (undo-tree-id20928 . -23) (undo-tree-id20929 . -23) (undo-tree-id20930 . -23) (undo-tree-id20931 . -23) (undo-tree-id20932 . -23) (undo-tree-id20933 . -23) (undo-tree-id20934 . -23) (undo-tree-id20935 . -23) (undo-tree-id20936 . -23) (undo-tree-id20937 . -23) (undo-tree-id20938 . -23) (undo-tree-id20939 . -23) (undo-tree-id20940 . -23) (undo-tree-id20941 . -23) (undo-tree-id20942 . -23) (undo-tree-id20943 . -23) (undo-tree-id20944 . -23) (undo-tree-id20945 . -23) (undo-tree-id20946 . -23) (undo-tree-id20947 . -23) (undo-tree-id20948 . -23) (undo-tree-id20949 . -23) (undo-tree-id20950 . -23) (undo-tree-id20951 . -23) (undo-tree-id20952 . -23) (undo-tree-id20953 . -23) (undo-tree-id20954 . -23) (undo-tree-id20955 . -28) (undo-tree-id20956 . -28) (undo-tree-id20957 . -28) (undo-tree-id20958 . -28) (undo-tree-id20959 . -28) (undo-tree-id20960 . -28) (undo-tree-id20961 . -28) (undo-tree-id20962 . -28) (undo-tree-id20963 . -28) (undo-tree-id20964 . -28) (undo-tree-id20965 . -28) (undo-tree-id20966 . -28) (undo-tree-id20967 . -28) (undo-tree-id20968 . -28) (undo-tree-id20969 . -28) (undo-tree-id20970 . -28) (undo-tree-id20971 . -28) (undo-tree-id20972 . -28) (undo-tree-id20973 . -28) (undo-tree-id20974 . -28) (undo-tree-id20975 . -28) (undo-tree-id20976 . -28) (undo-tree-id20977 . -28) (undo-tree-id20978 . -28) (undo-tree-id20979 . -28) (undo-tree-id20980 . -28) (undo-tree-id20981 . -28) (undo-tree-id20982 . -28) (undo-tree-id20983 . -28) (undo-tree-id20984 . -28) (undo-tree-id20985 . -29) 5307) nil (25772 50774 334160 268000) 0 nil])
([nil nil ((5280 . 5281) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5280)) nil (25772 50774 333631 609000) 0 nil])
([nil nil ((5280 . 5281) (#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5280)) nil (25772 50774 333630 746000) 0 nil])
([nil nil ((5280 . 5281) (#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5280) (undo-tree-id20824 . -1)) nil (25772 50774 333629 744000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5279) (undo-tree-id20737 . 1) (undo-tree-id20738 . -1) (undo-tree-id20739 . -1) (undo-tree-id20740 . -1) (undo-tree-id20741 . -1) (undo-tree-id20742 . -1) (undo-tree-id20743 . -1) (undo-tree-id20744 . -1) (undo-tree-id20745 . -1) (undo-tree-id20746 . -1) (undo-tree-id20747 . -1) (undo-tree-id20748 . -1) (undo-tree-id20749 . -1) (undo-tree-id20750 . -1) (undo-tree-id20751 . -1) (undo-tree-id20752 . -1) (undo-tree-id20753 . -1) (undo-tree-id20754 . -1) (undo-tree-id20755 . -1) (undo-tree-id20756 . -1) (undo-tree-id20757 . -1) (undo-tree-id20758 . -1) (undo-tree-id20759 . -1) (undo-tree-id20760 . -1) (undo-tree-id20761 . -1) (undo-tree-id20762 . -1) (undo-tree-id20763 . -1) (undo-tree-id20764 . -1) (undo-tree-id20765 . -1) (undo-tree-id20766 . -1) (undo-tree-id20767 . -1) (undo-tree-id20768 . -1) (undo-tree-id20769 . -1) (undo-tree-id20770 . -1) (undo-tree-id20771 . -1) (undo-tree-id20772 . -1) (undo-tree-id20773 . -1) (undo-tree-id20774 . -1) (undo-tree-id20775 . -1) (undo-tree-id20776 . -1) (undo-tree-id20777 . -1) (undo-tree-id20778 . -1) (undo-tree-id20779 . -1) (undo-tree-id20780 . -1) (undo-tree-id20781 . -1) (undo-tree-id20782 . -1) (undo-tree-id20783 . -1) (undo-tree-id20784 . -1) (undo-tree-id20785 . -1) (undo-tree-id20786 . -1) (undo-tree-id20787 . -1) (undo-tree-id20788 . -1) (undo-tree-id20789 . -1) (undo-tree-id20790 . -1) (undo-tree-id20791 . -1) (undo-tree-id20792 . -1) (undo-tree-id20793 . -1) (undo-tree-id20794 . -1) (undo-tree-id20795 . -1) (undo-tree-id20796 . -1) (undo-tree-id20797 . -1) (undo-tree-id20798 . -1) (undo-tree-id20799 . -1) (undo-tree-id20800 . -1) (undo-tree-id20801 . -1) (undo-tree-id20802 . -1) (undo-tree-id20803 . -1) (undo-tree-id20804 . -1) (undo-tree-id20805 . -1) (undo-tree-id20806 . -1) (undo-tree-id20807 . -1) (undo-tree-id20808 . -1) (undo-tree-id20809 . -1) (undo-tree-id20810 . -1) (undo-tree-id20811 . -1) (undo-tree-id20812 . -1) (undo-tree-id20813 . -1) (undo-tree-id20814 . -1) (undo-tree-id20815 . -1) (undo-tree-id20816 . -1) (undo-tree-id20817 . -1) (undo-tree-id20818 . -1) (undo-tree-id20819 . -1) (undo-tree-id20820 . -1) (undo-tree-id20821 . -1) (undo-tree-id20822 . -1) (undo-tree-id20823 . -1)) nil (25772 50774 333625 592000) 0 nil])
([nil nil ((5279 . 5280) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5279)) nil (25772 50774 333571 406000) 0 nil])
([nil nil ((5279 . 5280) (#("W" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5279)) nil (25772 50774 333569 772000) 0 nil])
([nil nil ((5279 . 5280) (#("W" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5279) (undo-tree-id20708 . 1) (undo-tree-id20709 . -1) (undo-tree-id20710 . -1) (undo-tree-id20711 . -1) (undo-tree-id20712 . -1) (undo-tree-id20713 . -1) (undo-tree-id20714 . -1) (undo-tree-id20715 . -1) (undo-tree-id20716 . -1) (undo-tree-id20717 . -1) (undo-tree-id20718 . -1) (undo-tree-id20719 . -1) (undo-tree-id20720 . -1) (undo-tree-id20721 . -1) (undo-tree-id20722 . -1) (undo-tree-id20723 . -1) (undo-tree-id20724 . -1) (undo-tree-id20725 . -1) (undo-tree-id20726 . -1) (undo-tree-id20727 . -1) (undo-tree-id20728 . -1) (undo-tree-id20729 . -1) (undo-tree-id20730 . -1) (undo-tree-id20731 . -1) (undo-tree-id20732 . -1) (undo-tree-id20733 . -1) (undo-tree-id20734 . -1) (undo-tree-id20735 . -1) (undo-tree-id20736 . -1) 5280) nil (25772 50774 333564 912000) 0 nil])
([nil nil ((5277 . 5400) (#("- However, having a single unit means that the hidden state is just a single number. 
- A single output value per time step" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 37 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 37 38 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 38 85 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 85 86 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 86 87 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 87 89 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 89 123 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5277) (undo-tree-id22220 . -123) (undo-tree-id22221 . -123) (undo-tree-id22222 . 34) (undo-tree-id22223 . -88) (undo-tree-id22224 . -88) (undo-tree-id22225 . 34) (undo-tree-id22226 . -88) (undo-tree-id22227 . -88) (undo-tree-id22228 . -88) (undo-tree-id22229 . -88) (undo-tree-id22230 . -88) (undo-tree-id22231 . -88) (undo-tree-id22232 . -88) (undo-tree-id22233 . -88) (undo-tree-id22234 . -88) (undo-tree-id22235 . -88) (undo-tree-id22236 . -88) (undo-tree-id22237 . -88) (undo-tree-id22238 . -88) (undo-tree-id22239 . -88) (undo-tree-id22240 . -88) (undo-tree-id22241 . -88) (undo-tree-id22242 . -88) (undo-tree-id22243 . -88) (undo-tree-id22244 . -88) (undo-tree-id22245 . -88) (undo-tree-id22246 . -88) (undo-tree-id22247 . -88) (undo-tree-id22248 . -88) (undo-tree-id22249 . -88) (undo-tree-id22250 . -88) (undo-tree-id22251 . -88) (undo-tree-id22252 . -88) (undo-tree-id22253 . -88) (undo-tree-id22254 . -88) (undo-tree-id22255 . -88) (undo-tree-id22256 . -88) (undo-tree-id22257 . -88) (undo-tree-id22258 . -88) (undo-tree-id22259 . -88) (undo-tree-id22260 . -88) (undo-tree-id22261 . -88) (undo-tree-id22262 . -88) (undo-tree-id22263 . -88) (undo-tree-id22264 . -88) (undo-tree-id22265 . -88) (undo-tree-id22266 . -88) (undo-tree-id22267 . -88) (undo-tree-id22268 . -88) (undo-tree-id22269 . -88) (undo-tree-id22270 . -88) (undo-tree-id22271 . -88) (undo-tree-id22272 . -88) (undo-tree-id22273 . -88) (undo-tree-id22274 . -88) (undo-tree-id22275 . -88) (undo-tree-id22276 . -88) (undo-tree-id22277 . -88) (undo-tree-id22278 . -88) (undo-tree-id22279 . -88) (undo-tree-id22280 . -88) (undo-tree-id22281 . -88) (undo-tree-id22282 . -88) (undo-tree-id22283 . -88) (undo-tree-id22284 . -88) (undo-tree-id22285 . -88) (undo-tree-id22286 . -88) (undo-tree-id22287 . -88) (undo-tree-id22288 . -88) (undo-tree-id22289 . -88) (undo-tree-id22290 . -88) (undo-tree-id22291 . -88) (undo-tree-id22292 . -88) (undo-tree-id22293 . -88) (undo-tree-id22294 . -88) (undo-tree-id22295 . -88) (undo-tree-id22296 . -88) (undo-tree-id22297 . -88) (undo-tree-id22298 . -88) (undo-tree-id22299 . -88) (undo-tree-id22300 . -88) (undo-tree-id22301 . -88) (undo-tree-id22302 . -88) (undo-tree-id22303 . -88) (undo-tree-id22304 . -88) (undo-tree-id22305 . -88) (undo-tree-id22306 . -88) (undo-tree-id22307 . -88) (undo-tree-id22308 . -88) (undo-tree-id22309 . -88) (undo-tree-id22310 . -88) (undo-tree-id22311 . -88) (undo-tree-id22312 . -88) (undo-tree-id22313 . -88) (undo-tree-id22314 . -88) (undo-tree-id22315 . -88) (undo-tree-id22316 . -88) (undo-tree-id22317 . -88) (undo-tree-id22318 . -88) (undo-tree-id22319 . -88) (undo-tree-id22320 . -88) (undo-tree-id22321 . -88) (undo-tree-id22322 . -88) (undo-tree-id22323 . -88) (undo-tree-id22324 . -88) (undo-tree-id22325 . -88) (undo-tree-id22326 . -88) (undo-tree-id22327 . -88) (undo-tree-id22328 . -88) (undo-tree-id22329 . -88) (undo-tree-id22330 . -88) (undo-tree-id22331 . -88) (undo-tree-id22332 . -88) (undo-tree-id22333 . -88) (undo-tree-id22334 . -88) (undo-tree-id22335 . -88) (undo-tree-id22336 . -88) (undo-tree-id22337 . -88) (undo-tree-id22338 . -88) (undo-tree-id22339 . -88) (undo-tree-id22340 . -88) (undo-tree-id22341 . -88) (undo-tree-id22342 . -88) (undo-tree-id22343 . -88) (undo-tree-id22344 . -88) (undo-tree-id22345 . -88) (undo-tree-id22346 . -88) (undo-tree-id22347 . -88) (undo-tree-id22348 . -88) (undo-tree-id22349 . -88) (undo-tree-id22350 . -88) (undo-tree-id22351 . -88) (undo-tree-id22352 . -88) (undo-tree-id22353 . -88) (undo-tree-id22354 . -88) (undo-tree-id22355 . -88) (undo-tree-id22356 . -88) (undo-tree-id22357 . -88) (undo-tree-id22358 . -88) (undo-tree-id22359 . -88) (undo-tree-id22360 . -88) (undo-tree-id22361 . -88) (undo-tree-id22362 . -88) (undo-tree-id22363 . -88) (undo-tree-id22364 . -88) (undo-tree-id22365 . -88) (undo-tree-id22366 . -88) (undo-tree-id22367 . -88) (undo-tree-id22368 . -88) (undo-tree-id22369 . -88) (undo-tree-id22370 . -88) (undo-tree-id22371 . -88) (undo-tree-id22372 . -88) (undo-tree-id22373 . -88) (undo-tree-id22374 . -88) (undo-tree-id22375 . -88) (undo-tree-id22376 . -88) (undo-tree-id22377 . -88) (undo-tree-id22378 . -88) (undo-tree-id22379 . -88) (undo-tree-id22380 . -88) (undo-tree-id22381 . -88) (undo-tree-id22382 . -88) (undo-tree-id22383 . -88) (undo-tree-id22384 . -88) (undo-tree-id22385 . -88) (undo-tree-id22386 . -88) (undo-tree-id22387 . -88) (undo-tree-id22388 . -88) (undo-tree-id22389 . -88) (undo-tree-id22390 . -88) (undo-tree-id22391 . -88) (undo-tree-id22392 . -88) (undo-tree-id22393 . -88) (undo-tree-id22394 . -88) (undo-tree-id22395 . -88) (undo-tree-id22396 . -88) (undo-tree-id22397 . -88) (undo-tree-id22398 . -88) (undo-tree-id22399 . -88) (undo-tree-id22400 . -88) (undo-tree-id22401 . -88) (undo-tree-id22402 . -88) (undo-tree-id22403 . -88) (undo-tree-id22404 . -88) (undo-tree-id22405 . -88) (undo-tree-id22406 . -88) (undo-tree-id22407 . -88) (undo-tree-id22408 . -88) (undo-tree-id22409 . -88) (undo-tree-id22410 . -88) (undo-tree-id22411 . -88) (undo-tree-id22412 . -88) (undo-tree-id22413 . -88) (undo-tree-id22414 . -88) (undo-tree-id22415 . -88) (undo-tree-id22416 . -88) (undo-tree-id22417 . -88) (undo-tree-id22418 . -88) (undo-tree-id22419 . -88) (undo-tree-id22420 . -88) (undo-tree-id22421 . -88) (undo-tree-id22422 . -88) (undo-tree-id22423 . -88) (undo-tree-id22424 . -88) (undo-tree-id22425 . -88) (undo-tree-id22426 . -88) (undo-tree-id22427 . -88) (undo-tree-id22428 . -88) (undo-tree-id22429 . -88) (undo-tree-id22430 . -88) (undo-tree-id22431 . -88) (undo-tree-id22432 . -88) (undo-tree-id22433 . -88) (undo-tree-id22434 . -88) (undo-tree-id22435 . -88) (undo-tree-id22436 . -88) (undo-tree-id22437 . -88) (undo-tree-id22438 . -88) (undo-tree-id22439 . -88) (undo-tree-id22440 . -88) (undo-tree-id22441 . -88) (undo-tree-id22442 . -88) (undo-tree-id22443 . -88) (undo-tree-id22444 . -88) (undo-tree-id22445 . -88) (undo-tree-id22446 . -88) (undo-tree-id22447 . -88) (undo-tree-id22448 . -88) (undo-tree-id22449 . -88) (undo-tree-id22450 . -88) (undo-tree-id22451 . -88) (undo-tree-id22452 . -88) (undo-tree-id22453 . -88) (undo-tree-id22454 . -88) (undo-tree-id22455 . -88) (undo-tree-id22456 . -88) (undo-tree-id22457 . -88) (undo-tree-id22458 . -88) (undo-tree-id22459 . -88) (undo-tree-id22460 . -88) (undo-tree-id22461 . -88) (undo-tree-id22462 . -88) (undo-tree-id22463 . -88) (undo-tree-id22464 . -88) (undo-tree-id22465 . -88) (undo-tree-id22466 . -88) (undo-tree-id22467 . -88) (undo-tree-id22468 . -88) (undo-tree-id22469 . -88) (undo-tree-id22470 . -88) (undo-tree-id22471 . -88) (undo-tree-id22472 . -88) (undo-tree-id22473 . -88) (undo-tree-id22474 . -88) (undo-tree-id22475 . -88) (undo-tree-id22476 . -88) (undo-tree-id22477 . -88) (undo-tree-id22478 . -88) (undo-tree-id22479 . -88) (undo-tree-id22480 . -88) (undo-tree-id22481 . -88) (undo-tree-id22482 . -88) (undo-tree-id22483 . -88) (undo-tree-id22484 . -88) (undo-tree-id22485 . -88) (undo-tree-id22486 . -90) (undo-tree-id22487 . -123) (undo-tree-id22488 . -90) (undo-tree-id22489 . -90) (undo-tree-id22490 . -90) (undo-tree-id22491 . -90) (undo-tree-id22492 . -90) (undo-tree-id22493 . -90) (undo-tree-id22494 . -90) (undo-tree-id22495 . -90) (undo-tree-id22496 . -90) (undo-tree-id22497 . -90) (undo-tree-id22498 . -90) (undo-tree-id22499 . -90) (undo-tree-id22500 . -90) (undo-tree-id22501 . -90) (undo-tree-id22502 . -90) (undo-tree-id22503 . -90) (undo-tree-id22504 . -90) (undo-tree-id22505 . -90) (undo-tree-id22506 . -90) (undo-tree-id22507 . -90) (undo-tree-id22508 . -90) (undo-tree-id22509 . -90) (undo-tree-id22510 . -90) (undo-tree-id22511 . -90) (undo-tree-id22512 . -90) (undo-tree-id22513 . -90) (undo-tree-id22514 . -90) (undo-tree-id22515 . -90) (undo-tree-id22516 . -90) (undo-tree-id22517 . -90) (undo-tree-id22518 . -90) (undo-tree-id22519 . -90) (undo-tree-id22520 . -90) (undo-tree-id22521 . -90) (undo-tree-id22522 . -90) (undo-tree-id22523 . -90) (undo-tree-id22524 . -90) (undo-tree-id22525 . -90) (undo-tree-id22526 . -90) (undo-tree-id22527 . -95) (undo-tree-id22528 . -95) (undo-tree-id22529 . -95) (undo-tree-id22530 . -95) (undo-tree-id22531 . -95) (undo-tree-id22532 . -95) (undo-tree-id22533 . -95) (undo-tree-id22534 . -95) (undo-tree-id22535 . -95) (undo-tree-id22536 . -95) (undo-tree-id22537 . -95) (undo-tree-id22538 . -95) (undo-tree-id22539 . -95) (undo-tree-id22540 . -95) (undo-tree-id22541 . -95) (undo-tree-id22542 . -95) (undo-tree-id22543 . -95) (undo-tree-id22544 . -95) (undo-tree-id22545 . -95) (undo-tree-id22546 . -95) (undo-tree-id22547 . -95) (undo-tree-id22548 . -95) (undo-tree-id22549 . -95) (undo-tree-id22550 . -95) (undo-tree-id22551 . -95) (undo-tree-id22552 . -95) (undo-tree-id22553 . -95) (undo-tree-id22554 . -95) (undo-tree-id22555 . -95) (undo-tree-id22556 . -102) (undo-tree-id22557 . -102) (undo-tree-id22558 . -102) (undo-tree-id22559 . -102) (undo-tree-id22560 . -102) (undo-tree-id22561 . -102) (undo-tree-id22562 . -102) (undo-tree-id22563 . -102) (undo-tree-id22564 . -102) (undo-tree-id22565 . -102) (undo-tree-id22566 . -102) (undo-tree-id22567 . -102) (undo-tree-id22568 . -102) (undo-tree-id22569 . -102) (undo-tree-id22570 . -102) (undo-tree-id22571 . -108) (undo-tree-id22572 . -108) (undo-tree-id22573 . -108) (undo-tree-id22574 . -108) (undo-tree-id22575 . -108) (undo-tree-id22576 . -108) (undo-tree-id22577 . -108) (undo-tree-id22578 . -108) (undo-tree-id22579 . -108) (undo-tree-id22580 . -108) (undo-tree-id22581 . -108) (undo-tree-id22582 . -108) (undo-tree-id22583 . -108) (undo-tree-id22584 . -108) (undo-tree-id22585 . -108) (undo-tree-id22586 . -108) (undo-tree-id22587 . -108) (undo-tree-id22588 . -108) (undo-tree-id22589 . -108) (undo-tree-id22590 . -108) (undo-tree-id22591 . -108) (undo-tree-id22592 . -108) (undo-tree-id22593 . -112) (undo-tree-id22594 . -112) (undo-tree-id22595 . -112) (undo-tree-id22596 . -112) (undo-tree-id22597 . -112) (undo-tree-id22598 . -112) (undo-tree-id22599 . -112) (undo-tree-id22600 . -112) (undo-tree-id22601 . -112) (undo-tree-id22602 . -112) (undo-tree-id22603 . -112) (undo-tree-id22604 . -112) (undo-tree-id22605 . -112) (undo-tree-id22606 . -112) (undo-tree-id22607 . -112) (undo-tree-id22608 . -117) (undo-tree-id22609 . -117) (undo-tree-id22610 . -117) (undo-tree-id22611 . -117) (undo-tree-id22612 . -117) (undo-tree-id22613 . -117) (undo-tree-id22614 . -117) (undo-tree-id22615 . -117) (undo-tree-id22616 . -117) (undo-tree-id22617 . -117) (undo-tree-id22618 . -117) (undo-tree-id22619 . -117) (undo-tree-id22620 . -117) (undo-tree-id22621 . -117) (undo-tree-id22622 . -117) (undo-tree-id22623 . -122) (undo-tree-id22624 . -122) (undo-tree-id22625 . -122) (undo-tree-id22626 . -122) (undo-tree-id22627 . -122) (undo-tree-id22628 . -122) (undo-tree-id22629 . -122) (undo-tree-id22630 . -122) (undo-tree-id22631 . -122) (undo-tree-id22632 . -122) (undo-tree-id22633 . -122) (undo-tree-id22634 . -122) (undo-tree-id22635 . -122) (undo-tree-id22636 . -122) (undo-tree-id22637 . -122) (undo-tree-id22638 . -123) (undo-tree-id22639 . -123) (undo-tree-id22640 . -123) (undo-tree-id22641 . -123) (undo-tree-id22642 . -123) (undo-tree-id22643 . -123) (undo-tree-id22644 . -123) (undo-tree-id22645 . -123) (undo-tree-id22646 . -123) (undo-tree-id22647 . -123) (undo-tree-id22648 . -123) (undo-tree-id22649 . -123) (undo-tree-id22650 . -123) (undo-tree-id22651 . -123) (undo-tree-id22652 . -123) (undo-tree-id22653 . -123) (undo-tree-id22654 . -123) (undo-tree-id22655 . -123) (undo-tree-id22656 . -123) (undo-tree-id22657 . -123) (undo-tree-id22658 . -123) (undo-tree-id22659 . -123) (undo-tree-id22660 . -123) (undo-tree-id22661 . -123) (undo-tree-id22662 . -123) (undo-tree-id22663 . -123) (undo-tree-id22664 . -123) (undo-tree-id22665 . -123) (undo-tree-id22666 . -123) (undo-tree-id22667 . -123) (undo-tree-id22668 . -123) (undo-tree-id22669 . -123) (undo-tree-id22670 . -123) (undo-tree-id22671 . -123) (undo-tree-id22672 . -123) (undo-tree-id22673 . -123) (undo-tree-id22674 . -123) (undo-tree-id22675 . -123) (undo-tree-id22676 . -123) (undo-tree-id22677 . -123) (undo-tree-id22678 . -86) (5277 . 5363) (#(" However, having a single unit means that the hidden state is just a single number. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 37 84 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5314) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5314) (undo-tree-id22679 . -1) (undo-tree-id22680 . -1) (undo-tree-id22681 . -1) (t 25772 50774 392368 583000)) nil (25772 50781 169931 118000) 0 nil])
([nil nil ((#("However" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25928 . -6) (undo-tree-id25929 . 7) (undo-tree-id25930 . -7) (t 25772 50781 229331 954000)) nil (25772 50879 759256 342000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25925 . -1) (undo-tree-id25926 . 2) (undo-tree-id25927 . -2)) nil (25772 50879 759253 814000) 0 nil])
([nil nil ((#("having " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25922 . -6) (undo-tree-id25923 . 7) (undo-tree-id25924 . -7)) nil (25772 50879 759251 406000) 0 nil])
([nil nil ((#("a " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25919 . -1) (undo-tree-id25920 . 2) (undo-tree-id25921 . -2)) nil (25772 50879 759248 799000) 0 nil])
([nil nil ((#("single " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25916 . -6) (undo-tree-id25917 . 7) (undo-tree-id25918 . -7)) nil (25772 50879 759245 582000) 0 nil])
([nil nil ((#("unit " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25913 . -4) (undo-tree-id25914 . 5) (undo-tree-id25915 . -5)) nil (25772 50879 759243 79000) 0 nil])
([nil nil ((#("means " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25910 . -5) (undo-tree-id25911 . 6) (undo-tree-id25912 . -6)) nil (25772 50879 759240 641000) 0 nil])
([nil nil ((#("that " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25907 . -4) (undo-tree-id25908 . 5) (undo-tree-id25909 . -5)) nil (25772 50879 759238 97000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317) (undo-tree-id25904 . -3) (undo-tree-id25905 . 4) (undo-tree-id25906 . -4)) nil (25772 50879 759235 241000) 0 nil])
([nil nil ((5317 . 5318) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5317)) nil (25772 50879 759232 843000) 0 nil])
([nil nil ((5356 . 5358)) nil (25772 50879 759232 15000) 0 nil])
([nil nil ((5610 . 5611) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5610) (undo-tree-id25887 . -1) (5534 . 5535) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5534) (undo-tree-id25888 . -1) (5456 . 5457) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5456) (undo-tree-id25889 . -1) (5385 . 5386) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5385) (undo-tree-id25890 . -1) (5357 . 5358) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5357) (undo-tree-id25891 . -1) (undo-tree-id25892 . -1) (undo-tree-id25893 . -1) (undo-tree-id25894 . -1) (undo-tree-id25895 . -1) (undo-tree-id25896 . -1) (undo-tree-id25897 . -1) (undo-tree-id25898 . -1) (undo-tree-id25899 . -1) (undo-tree-id25900 . -1) (undo-tree-id25901 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5358) (undo-tree-id25902 . 1) (undo-tree-id25903 . -1) 5357) nil (25772 50879 759230 263000) 0 nil])
([nil nil ((#("That's really not much, and it's probably" 0 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5358) (undo-tree-id25687 . -40) (undo-tree-id25688 . 41) (undo-tree-id25689 . -40) (undo-tree-id25690 . -40) (undo-tree-id25691 . -27) (undo-tree-id25692 . -27) (undo-tree-id25693 . -27) (undo-tree-id25694 . -27) (undo-tree-id25695 . -27) (undo-tree-id25696 . -27) (undo-tree-id25697 . -27) (undo-tree-id25698 . -27) (undo-tree-id25699 . -27) (undo-tree-id25700 . -27) (undo-tree-id25701 . -27) (undo-tree-id25702 . -27) (undo-tree-id25703 . -27) (undo-tree-id25704 . -27) (undo-tree-id25705 . -27) (undo-tree-id25706 . -27) (undo-tree-id25707 . -41) (undo-tree-id25708 . -40) (undo-tree-id25709 . -5) (undo-tree-id25710 . -5) (undo-tree-id25711 . -5) (undo-tree-id25712 . -5) (undo-tree-id25713 . -5) (undo-tree-id25714 . -5) (undo-tree-id25715 . -5) (undo-tree-id25716 . -5) (undo-tree-id25717 . -5) (undo-tree-id25718 . -5) (undo-tree-id25719 . -5) (undo-tree-id25720 . -5) (undo-tree-id25721 . -5) (undo-tree-id25722 . -5) (undo-tree-id25723 . -5) (undo-tree-id25724 . -5) (undo-tree-id25725 . -5) (undo-tree-id25726 . -5) (undo-tree-id25727 . -5) (undo-tree-id25728 . -5) (undo-tree-id25729 . -5) (undo-tree-id25730 . -5) (undo-tree-id25731 . -12) (undo-tree-id25732 . -12) (undo-tree-id25733 . -12) (undo-tree-id25734 . -12) (undo-tree-id25735 . -12) (undo-tree-id25736 . -12) (undo-tree-id25737 . -12) (undo-tree-id25738 . -12) (undo-tree-id25739 . -12) (undo-tree-id25740 . -12) (undo-tree-id25741 . -12) (undo-tree-id25742 . -12) (undo-tree-id25743 . -12) (undo-tree-id25744 . -12) (undo-tree-id25745 . -12) (undo-tree-id25746 . -12) (undo-tree-id25747 . -12) (undo-tree-id25748 . -12) (undo-tree-id25749 . -12) (undo-tree-id25750 . -12) (undo-tree-id25751 . -12) (undo-tree-id25752 . -12) (undo-tree-id25753 . -16) (undo-tree-id25754 . -16) (undo-tree-id25755 . -16) (undo-tree-id25756 . -16) (undo-tree-id25757 . -16) (undo-tree-id25758 . -16) (undo-tree-id25759 . -16) (undo-tree-id25760 . -16) (undo-tree-id25761 . -16) (undo-tree-id25762 . -16) (undo-tree-id25763 . -16) (undo-tree-id25764 . -16) (undo-tree-id25765 . -16) (undo-tree-id25766 . -16) (undo-tree-id25767 . -16) (undo-tree-id25768 . -16) (undo-tree-id25769 . -16) (undo-tree-id25770 . -16) (undo-tree-id25771 . -16) (undo-tree-id25772 . -16) (undo-tree-id25773 . -16) (undo-tree-id25774 . -16) (undo-tree-id25775 . -21) (undo-tree-id25776 . -21) (undo-tree-id25777 . -21) (undo-tree-id25778 . -21) (undo-tree-id25779 . -21) (undo-tree-id25780 . -21) (undo-tree-id25781 . -21) (undo-tree-id25782 . -21) (undo-tree-id25783 . -21) (undo-tree-id25784 . -21) (undo-tree-id25785 . -21) (undo-tree-id25786 . -21) (undo-tree-id25787 . -21) (undo-tree-id25788 . -21) (undo-tree-id25789 . -21) (undo-tree-id25790 . -21) (undo-tree-id25791 . -21) (undo-tree-id25792 . -21) (undo-tree-id25793 . -21) (undo-tree-id25794 . -21) (undo-tree-id25795 . -21) (undo-tree-id25796 . -21) (undo-tree-id25797 . -22) (undo-tree-id25798 . -22) (undo-tree-id25799 . -22) (undo-tree-id25800 . -22) (undo-tree-id25801 . -22) (undo-tree-id25802 . -22) (undo-tree-id25803 . -22) (undo-tree-id25804 . -22) (undo-tree-id25805 . -22) (undo-tree-id25806 . -22) (undo-tree-id25807 . -22) (undo-tree-id25808 . -22) (undo-tree-id25809 . -22) (undo-tree-id25810 . -22) (undo-tree-id25811 . -22) (undo-tree-id25812 . -22) (undo-tree-id25813 . -22) (undo-tree-id25814 . -22) (undo-tree-id25815 . -22) (undo-tree-id25816 . -22) (undo-tree-id25817 . -22) (undo-tree-id25818 . -22) (undo-tree-id25819 . -26) (undo-tree-id25820 . -26) (undo-tree-id25821 . -26) (undo-tree-id25822 . -26) (undo-tree-id25823 . -26) (undo-tree-id25824 . -26) (undo-tree-id25825 . -26) (undo-tree-id25826 . -26) (undo-tree-id25827 . -26) (undo-tree-id25828 . -26) (undo-tree-id25829 . -26) (undo-tree-id25830 . -26) (undo-tree-id25831 . -26) (undo-tree-id25832 . -26) (undo-tree-id25833 . -26) (undo-tree-id25834 . -26) (undo-tree-id25835 . -26) (undo-tree-id25836 . -26) (undo-tree-id25837 . -26) (undo-tree-id25838 . -26) (undo-tree-id25839 . -26) (undo-tree-id25840 . -26) (undo-tree-id25841 . -31) (undo-tree-id25842 . -31) (undo-tree-id25843 . -31) (undo-tree-id25844 . -31) (undo-tree-id25845 . -31) (undo-tree-id25846 . -31) (undo-tree-id25847 . -31) (undo-tree-id25848 . -31) (undo-tree-id25849 . -31) (undo-tree-id25850 . -31) (undo-tree-id25851 . -31) (undo-tree-id25852 . -31) (undo-tree-id25853 . -31) (undo-tree-id25854 . -31) (undo-tree-id25855 . -31) (undo-tree-id25856 . -31) (undo-tree-id25857 . -31) (undo-tree-id25858 . -31) (undo-tree-id25859 . -31) (undo-tree-id25860 . -31) (undo-tree-id25861 . -31) (undo-tree-id25862 . -31) (undo-tree-id25863 . -40) (undo-tree-id25864 . -40) (undo-tree-id25865 . -40) (undo-tree-id25866 . -40) (undo-tree-id25867 . -40) (undo-tree-id25868 . -40) (undo-tree-id25869 . -40) (undo-tree-id25870 . -40) (undo-tree-id25871 . -40) (undo-tree-id25872 . -40) (undo-tree-id25873 . -40) (undo-tree-id25874 . -40) (undo-tree-id25875 . -40) (undo-tree-id25876 . -40) (undo-tree-id25877 . -40) (undo-tree-id25878 . -40) (undo-tree-id25879 . -40) (undo-tree-id25880 . -40) (undo-tree-id25881 . -40) (undo-tree-id25882 . -40) (undo-tree-id25883 . -40) (undo-tree-id25884 . -40) (undo-tree-id25885 . -40) (undo-tree-id25886 . -41) 5398) nil (25772 50879 759211 571000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5358) (undo-tree-id25683 . 1) (undo-tree-id25684 . 1) (undo-tree-id25685 . -1) (undo-tree-id25686 . -1)) nil (25772 50879 759102 329000) 0 nil])
([nil nil ((5358 . 5359) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5358)) nil (25772 50879 759099 382000) 0 nil])
([nil nil ((5356 . 5594) (#("- presumably, the RNN will mostly use the hidden states of the other recurrent layers to carry over all the information it needs from time step to time step, and it will not use the final layer's hidden state very much. 
- Not that useful" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 41 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 42 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 42 119 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 119 120 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 120 195 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 195 196 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 196 220 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 220 221 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 221 222 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 222 223 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 223 238 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5356) (undo-tree-id25027 . -238) (undo-tree-id25028 . -238) (undo-tree-id25029 . 15) (undo-tree-id25030 . -223) (undo-tree-id25031 . -223) (undo-tree-id25032 . 14) (undo-tree-id25033 . -238) (undo-tree-id25034 . -222) (undo-tree-id25035 . -222) (undo-tree-id25036 . -222) (undo-tree-id25037 . -222) (undo-tree-id25038 . -222) (undo-tree-id25039 . -222) (undo-tree-id25040 . -222) (undo-tree-id25041 . -222) (undo-tree-id25042 . -222) (undo-tree-id25043 . -222) (undo-tree-id25044 . -222) (undo-tree-id25045 . -222) (undo-tree-id25046 . -222) (undo-tree-id25047 . -222) (undo-tree-id25048 . -222) (undo-tree-id25049 . -222) (undo-tree-id25050 . -222) (undo-tree-id25051 . -222) (undo-tree-id25052 . -222) (undo-tree-id25053 . -222) (undo-tree-id25054 . -222) (undo-tree-id25055 . -222) (undo-tree-id25056 . -222) (undo-tree-id25057 . -222) (undo-tree-id25058 . -222) (undo-tree-id25059 . -222) (undo-tree-id25060 . -222) (undo-tree-id25061 . -222) (undo-tree-id25062 . -222) (undo-tree-id25063 . -222) (undo-tree-id25064 . -222) (undo-tree-id25065 . -222) (undo-tree-id25066 . -222) (undo-tree-id25067 . -222) (undo-tree-id25068 . -222) (undo-tree-id25069 . -222) (undo-tree-id25070 . -222) (undo-tree-id25071 . -222) (undo-tree-id25072 . -222) (undo-tree-id25073 . -222) (undo-tree-id25074 . -222) (undo-tree-id25075 . -222) (undo-tree-id25076 . -222) (undo-tree-id25077 . -222) (undo-tree-id25078 . -222) (undo-tree-id25079 . -223) (undo-tree-id25080 . -223) (undo-tree-id25081 . -223) (undo-tree-id25082 . -223) (undo-tree-id25083 . -223) (undo-tree-id25084 . -223) (undo-tree-id25085 . -223) (undo-tree-id25086 . -223) (undo-tree-id25087 . -223) (undo-tree-id25088 . -223) (undo-tree-id25089 . -223) (undo-tree-id25090 . -223) (undo-tree-id25091 . -223) (undo-tree-id25092 . -223) (undo-tree-id25093 . -223) (undo-tree-id25094 . -223) (undo-tree-id25095 . -238) (undo-tree-id25096 . -238) (undo-tree-id25097 . -238) (undo-tree-id25098 . -238) (undo-tree-id25099 . -238) (undo-tree-id25100 . -238) (undo-tree-id25101 . -238) (undo-tree-id25102 . -238) (undo-tree-id25103 . -238) (undo-tree-id25104 . -238) (undo-tree-id25105 . -238) (undo-tree-id25106 . -238) (undo-tree-id25107 . -238) (undo-tree-id25108 . -238) (undo-tree-id25109 . -238) (undo-tree-id25110 . -238) (undo-tree-id25111 . -238) (undo-tree-id25112 . -238) (undo-tree-id25113 . -238) (undo-tree-id25114 . -238) (undo-tree-id25115 . -238) (undo-tree-id25116 . -238) (undo-tree-id25117 . -238) (undo-tree-id25118 . -238) (undo-tree-id25119 . -238) (undo-tree-id25120 . -238) (undo-tree-id25121 . -238) (undo-tree-id25122 . -238) (undo-tree-id25123 . -238) (undo-tree-id25124 . -238) (undo-tree-id25125 . -238) (undo-tree-id25126 . -238) (undo-tree-id25127 . -238) (undo-tree-id25128 . -238) (undo-tree-id25129 . -238) (undo-tree-id25130 . -238) (undo-tree-id25131 . -238) (undo-tree-id25132 . -238) (undo-tree-id25133 . -238) (undo-tree-id25134 . -238) (undo-tree-id25135 . -238) (undo-tree-id25136 . -238) (undo-tree-id25137 . -238) (undo-tree-id25138 . -238) (undo-tree-id25139 . -238) (undo-tree-id25140 . -238) (undo-tree-id25141 . -238) (undo-tree-id25142 . -238) (undo-tree-id25143 . -238) (undo-tree-id25144 . -238) (undo-tree-id25145 . -238) (undo-tree-id25146 . -238) (undo-tree-id25147 . -238) (undo-tree-id25148 . -238) (undo-tree-id25149 . -238) (undo-tree-id25150 . -238) (undo-tree-id25151 . -238) (undo-tree-id25152 . -238) (undo-tree-id25153 . -238) (undo-tree-id25154 . -238) (undo-tree-id25155 . -238) (undo-tree-id25156 . -238) (undo-tree-id25157 . -238) (undo-tree-id25158 . -238) (undo-tree-id25159 . -238) (undo-tree-id25160 . -238) (undo-tree-id25161 . -238) (undo-tree-id25162 . -238) (undo-tree-id25163 . -238) (undo-tree-id25164 . -238) (undo-tree-id25165 . -238) (undo-tree-id25166 . -238) (undo-tree-id25167 . -238) (undo-tree-id25168 . -238) (undo-tree-id25169 . -238) (undo-tree-id25170 . -238) (undo-tree-id25171 . -238) (undo-tree-id25172 . -238) (undo-tree-id25173 . -238) (undo-tree-id25174 . -238) (undo-tree-id25175 . -238) (undo-tree-id25176 . -238) (undo-tree-id25177 . -238) (undo-tree-id25178 . -238) (undo-tree-id25179 . -223) (undo-tree-id25180 . -223) (undo-tree-id25181 . -223) (undo-tree-id25182 . -223) (undo-tree-id25183 . -223) (undo-tree-id25184 . -223) (undo-tree-id25185 . -223) (undo-tree-id25186 . -223) (undo-tree-id25187 . -223) (undo-tree-id25188 . -223) (undo-tree-id25189 . -223) (undo-tree-id25190 . -223) (undo-tree-id25191 . -223) (undo-tree-id25192 . -223) (undo-tree-id25193 . -223) (undo-tree-id25194 . -223) (undo-tree-id25195 . -223) (undo-tree-id25196 . -223) (undo-tree-id25197 . -223) (undo-tree-id25198 . -223) (undo-tree-id25199 . -223) (undo-tree-id25200 . -223) (undo-tree-id25201 . -223) (undo-tree-id25202 . -223) (undo-tree-id25203 . -223) (undo-tree-id25204 . -223) (undo-tree-id25205 . -223) (undo-tree-id25206 . -223) (undo-tree-id25207 . -223) (undo-tree-id25208 . -223) (undo-tree-id25209 . -223) (undo-tree-id25210 . -223) (undo-tree-id25211 . -223) (undo-tree-id25212 . -223) (undo-tree-id25213 . -223) (undo-tree-id25214 . -223) (undo-tree-id25215 . -223) (undo-tree-id25216 . -223) (undo-tree-id25217 . -223) (undo-tree-id25218 . -223) (undo-tree-id25219 . -223) (undo-tree-id25220 . -223) (undo-tree-id25221 . -223) (undo-tree-id25222 . -223) (undo-tree-id25223 . -223) (undo-tree-id25224 . -223) (undo-tree-id25225 . -223) (undo-tree-id25226 . -223) (undo-tree-id25227 . -223) (undo-tree-id25228 . -223) (undo-tree-id25229 . -223) (undo-tree-id25230 . -223) (undo-tree-id25231 . -223) (undo-tree-id25232 . -223) (undo-tree-id25233 . -223) (undo-tree-id25234 . -223) (undo-tree-id25235 . -223) (undo-tree-id25236 . -223) (undo-tree-id25237 . -223) (undo-tree-id25238 . -223) (undo-tree-id25239 . -223) (undo-tree-id25240 . -223) (undo-tree-id25241 . -223) (undo-tree-id25242 . -223) (undo-tree-id25243 . -223) (undo-tree-id25244 . -223) (undo-tree-id25245 . -223) (undo-tree-id25246 . -223) (undo-tree-id25247 . -223) (undo-tree-id25248 . -223) (undo-tree-id25249 . -223) (undo-tree-id25250 . -223) (undo-tree-id25251 . -223) (undo-tree-id25252 . -223) (undo-tree-id25253 . -223) (undo-tree-id25254 . -223) (undo-tree-id25255 . -223) (undo-tree-id25256 . -223) (undo-tree-id25257 . -223) (undo-tree-id25258 . -223) (undo-tree-id25259 . -223) (undo-tree-id25260 . -223) (undo-tree-id25261 . -223) (undo-tree-id25262 . -223) (undo-tree-id25263 . -223) (undo-tree-id25264 . -223) (undo-tree-id25265 . -223) (undo-tree-id25266 . -223) (undo-tree-id25267 . -223) (undo-tree-id25268 . -223) (undo-tree-id25269 . -223) (undo-tree-id25270 . -223) (undo-tree-id25271 . -223) (undo-tree-id25272 . -223) (undo-tree-id25273 . -223) (undo-tree-id25274 . -223) (undo-tree-id25275 . -223) (undo-tree-id25276 . -223) (undo-tree-id25277 . -223) (undo-tree-id25278 . -223) (undo-tree-id25279 . -223) (undo-tree-id25280 . -223) (undo-tree-id25281 . -223) (undo-tree-id25282 . -223) (undo-tree-id25283 . -223) (undo-tree-id25284 . -223) (undo-tree-id25285 . -223) (undo-tree-id25286 . -223) (undo-tree-id25287 . -223) (undo-tree-id25288 . -223) (undo-tree-id25289 . -223) (undo-tree-id25290 . -223) (undo-tree-id25291 . -223) (undo-tree-id25292 . -223) (undo-tree-id25293 . -223) (undo-tree-id25294 . -223) (undo-tree-id25295 . -223) (undo-tree-id25296 . -223) (undo-tree-id25297 . -223) (undo-tree-id25298 . -223) (undo-tree-id25299 . -223) (undo-tree-id25300 . -223) (undo-tree-id25301 . -223) (undo-tree-id25302 . -223) (undo-tree-id25303 . -223) (undo-tree-id25304 . -223) (undo-tree-id25305 . -223) (undo-tree-id25306 . -223) (undo-tree-id25307 . -223) (undo-tree-id25308 . -223) (undo-tree-id25309 . -223) (undo-tree-id25310 . -223) (undo-tree-id25311 . -223) (undo-tree-id25312 . -223) (undo-tree-id25313 . -223) (undo-tree-id25314 . -223) (undo-tree-id25315 . -223) (undo-tree-id25316 . -223) (undo-tree-id25317 . -223) (undo-tree-id25318 . -223) (undo-tree-id25319 . -223) (undo-tree-id25320 . -223) (undo-tree-id25321 . -223) (undo-tree-id25322 . -223) (undo-tree-id25323 . -223) (undo-tree-id25324 . -223) (undo-tree-id25325 . -223) (undo-tree-id25326 . -223) (undo-tree-id25327 . -223) (undo-tree-id25328 . -223) (undo-tree-id25329 . -223) (undo-tree-id25330 . -223) (undo-tree-id25331 . -223) (undo-tree-id25332 . -223) (undo-tree-id25333 . -223) (undo-tree-id25334 . -223) (undo-tree-id25335 . -223) (undo-tree-id25336 . -223) (undo-tree-id25337 . -223) (undo-tree-id25338 . -223) (undo-tree-id25339 . -223) (undo-tree-id25340 . -223) (undo-tree-id25341 . -223) (undo-tree-id25342 . -223) (undo-tree-id25343 . -223) (undo-tree-id25344 . -223) (undo-tree-id25345 . -223) (undo-tree-id25346 . -223) (undo-tree-id25347 . -223) (undo-tree-id25348 . -223) (undo-tree-id25349 . -223) (undo-tree-id25350 . -223) (undo-tree-id25351 . -223) (undo-tree-id25352 . -223) (undo-tree-id25353 . -223) (undo-tree-id25354 . -223) (undo-tree-id25355 . -223) (undo-tree-id25356 . -223) (undo-tree-id25357 . -223) (undo-tree-id25358 . -223) (undo-tree-id25359 . -223) (undo-tree-id25360 . -223) (undo-tree-id25361 . -223) (undo-tree-id25362 . -223) (undo-tree-id25363 . -223) (undo-tree-id25364 . -223) (undo-tree-id25365 . -223) (undo-tree-id25366 . -223) (undo-tree-id25367 . -223) (undo-tree-id25368 . -223) (undo-tree-id25369 . -223) (undo-tree-id25370 . -223) (undo-tree-id25371 . -223) (undo-tree-id25372 . -223) (undo-tree-id25373 . -223) (undo-tree-id25374 . -223) (undo-tree-id25375 . -223) (undo-tree-id25376 . -223) (undo-tree-id25377 . -223) (undo-tree-id25378 . -223) (undo-tree-id25379 . -223) (undo-tree-id25380 . -223) (undo-tree-id25381 . -223) (undo-tree-id25382 . -223) (undo-tree-id25383 . -223) (undo-tree-id25384 . -223) (undo-tree-id25385 . -223) (undo-tree-id25386 . -223) (undo-tree-id25387 . -223) (undo-tree-id25388 . -223) (undo-tree-id25389 . -223) (undo-tree-id25390 . -223) (undo-tree-id25391 . -223) (undo-tree-id25392 . -223) (undo-tree-id25393 . -223) (undo-tree-id25394 . -223) (undo-tree-id25395 . -223) (undo-tree-id25396 . -223) (undo-tree-id25397 . -223) (undo-tree-id25398 . -223) (undo-tree-id25399 . -223) (undo-tree-id25400 . -223) (undo-tree-id25401 . -223) (undo-tree-id25402 . -223) (undo-tree-id25403 . -223) (undo-tree-id25404 . -223) (undo-tree-id25405 . -223) (undo-tree-id25406 . -223) (undo-tree-id25407 . -223) (undo-tree-id25408 . -223) (undo-tree-id25409 . -223) (undo-tree-id25410 . -223) (undo-tree-id25411 . -223) (undo-tree-id25412 . -223) (undo-tree-id25413 . -223) (undo-tree-id25414 . -223) (undo-tree-id25415 . -223) (undo-tree-id25416 . -223) (undo-tree-id25417 . -223) (undo-tree-id25418 . -223) (undo-tree-id25419 . -223) (undo-tree-id25420 . -223) (undo-tree-id25421 . -223) (undo-tree-id25422 . -223) (undo-tree-id25423 . -223) (undo-tree-id25424 . -223) (undo-tree-id25425 . -223) (undo-tree-id25426 . -223) (undo-tree-id25427 . -223) (undo-tree-id25428 . -223) (undo-tree-id25429 . -223) (undo-tree-id25430 . -223) (undo-tree-id25431 . -223) (undo-tree-id25432 . -223) (undo-tree-id25433 . -223) (undo-tree-id25434 . -223) (undo-tree-id25435 . -223) (undo-tree-id25436 . -223) (undo-tree-id25437 . -223) (undo-tree-id25438 . -223) (undo-tree-id25439 . -223) (undo-tree-id25440 . -223) (undo-tree-id25441 . -223) (undo-tree-id25442 . -223) (undo-tree-id25443 . -223) (undo-tree-id25444 . -223) (undo-tree-id25445 . -223) (undo-tree-id25446 . -223) (undo-tree-id25447 . -223) (undo-tree-id25448 . -223) (undo-tree-id25449 . -223) (undo-tree-id25450 . -223) (undo-tree-id25451 . -223) (undo-tree-id25452 . -223) (undo-tree-id25453 . -223) (undo-tree-id25454 . -223) (undo-tree-id25455 . -223) (undo-tree-id25456 . -223) (undo-tree-id25457 . -223) (undo-tree-id25458 . -223) (undo-tree-id25459 . -223) (undo-tree-id25460 . -223) (undo-tree-id25461 . -223) (undo-tree-id25462 . -223) (undo-tree-id25463 . -223) (undo-tree-id25464 . -223) (undo-tree-id25465 . -223) (undo-tree-id25466 . -223) (undo-tree-id25467 . -223) (undo-tree-id25468 . -223) (undo-tree-id25469 . -223) (undo-tree-id25470 . -223) (undo-tree-id25471 . -223) (undo-tree-id25472 . -223) (undo-tree-id25473 . -223) (undo-tree-id25474 . -223) (undo-tree-id25475 . -223) (undo-tree-id25476 . -223) (undo-tree-id25477 . -223) (undo-tree-id25478 . -223) (undo-tree-id25479 . -223) (undo-tree-id25480 . -223) (undo-tree-id25481 . -223) (undo-tree-id25482 . -223) (undo-tree-id25483 . -223) (undo-tree-id25484 . -223) (undo-tree-id25485 . -223) (undo-tree-id25486 . -223) (undo-tree-id25487 . -223) (undo-tree-id25488 . -223) (undo-tree-id25489 . -223) (undo-tree-id25490 . -223) (undo-tree-id25491 . -223) (undo-tree-id25492 . -223) (undo-tree-id25493 . -223) (undo-tree-id25494 . -223) (undo-tree-id25495 . -223) (undo-tree-id25496 . -223) (undo-tree-id25497 . -223) (undo-tree-id25498 . -223) (undo-tree-id25499 . -223) (undo-tree-id25500 . -223) (undo-tree-id25501 . -223) (undo-tree-id25502 . -223) (undo-tree-id25503 . -225) (undo-tree-id25504 . -225) (undo-tree-id25505 . -225) (undo-tree-id25506 . -225) (undo-tree-id25507 . -225) (undo-tree-id25508 . -225) (undo-tree-id25509 . -225) (undo-tree-id25510 . -225) (undo-tree-id25511 . -225) (undo-tree-id25512 . -225) (undo-tree-id25513 . -225) (undo-tree-id25514 . -225) (undo-tree-id25515 . -225) (undo-tree-id25516 . -225) (undo-tree-id25517 . -225) (undo-tree-id25518 . -230) (undo-tree-id25519 . -230) (undo-tree-id25520 . -230) (undo-tree-id25521 . -230) (undo-tree-id25522 . -230) (undo-tree-id25523 . -230) (undo-tree-id25524 . -230) (undo-tree-id25525 . -230) (undo-tree-id25526 . -230) (undo-tree-id25527 . -230) (undo-tree-id25528 . -230) (undo-tree-id25529 . -230) (undo-tree-id25530 . -230) (undo-tree-id25531 . -230) (undo-tree-id25532 . -230) (undo-tree-id25533 . -237) (undo-tree-id25534 . -237) (undo-tree-id25535 . -237) (undo-tree-id25536 . -237) (undo-tree-id25537 . -237) (undo-tree-id25538 . -237) (undo-tree-id25539 . -237) (undo-tree-id25540 . -237) (undo-tree-id25541 . -237) (undo-tree-id25542 . -237) (undo-tree-id25543 . -237) (undo-tree-id25544 . -237) (undo-tree-id25545 . -237) (undo-tree-id25546 . -237) (undo-tree-id25547 . -237) (undo-tree-id25548 . -238) (undo-tree-id25549 . -238) (undo-tree-id25550 . -238) (undo-tree-id25551 . -238) (undo-tree-id25552 . -238) (undo-tree-id25553 . -238) (undo-tree-id25554 . -238) (undo-tree-id25555 . -238) (undo-tree-id25556 . -238) (undo-tree-id25557 . -238) (undo-tree-id25558 . -238) (undo-tree-id25559 . -238) (undo-tree-id25560 . -238) (undo-tree-id25561 . -238) (undo-tree-id25562 . -238) (undo-tree-id25563 . -238) (undo-tree-id25564 . -238) (undo-tree-id25565 . -238) (undo-tree-id25566 . -238) (undo-tree-id25567 . -238) (undo-tree-id25568 . -238) (undo-tree-id25569 . -238) (undo-tree-id25570 . -238) (undo-tree-id25571 . -238) (undo-tree-id25572 . -238) (undo-tree-id25573 . -238) (undo-tree-id25574 . -238) (undo-tree-id25575 . -238) (undo-tree-id25576 . -238) (undo-tree-id25577 . -238) (undo-tree-id25578 . -238) (undo-tree-id25579 . -238) (undo-tree-id25580 . -238) (undo-tree-id25581 . -238) (undo-tree-id25582 . -238) (undo-tree-id25583 . -238) (undo-tree-id25584 . -238) (undo-tree-id25585 . -238) (undo-tree-id25586 . -238) (undo-tree-id25587 . -238) (undo-tree-id25588 . -238) (undo-tree-id25589 . -238) (undo-tree-id25590 . -238) (undo-tree-id25591 . -238) (undo-tree-id25592 . -238) (undo-tree-id25593 . -238) (undo-tree-id25594 . -238) (undo-tree-id25595 . -221) (5356 . 5577) (#(" presumably, the RNN will mostly use the hidden states of the other recurrent layers to carry over all the information it needs from time step to time step, and it will not use the final layer's hidden state very much. " 0 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 40 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 41 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 118 119 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 119 194 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 194 195 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 195 219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5373) (undo-tree-id25596 . -40) (undo-tree-id25597 . -40) (undo-tree-id25598 . -40) (undo-tree-id25599 . -40) (undo-tree-id25600 . -40) (undo-tree-id25601 . -40) (undo-tree-id25602 . -40) (undo-tree-id25603 . -40) (undo-tree-id25604 . -40) (undo-tree-id25605 . -40) (undo-tree-id25606 . -40) (undo-tree-id25607 . -40) (undo-tree-id25608 . -40) (undo-tree-id25609 . -40) (undo-tree-id25610 . -40) (undo-tree-id25611 . -40) (undo-tree-id25612 . -118) (undo-tree-id25613 . -118) (undo-tree-id25614 . -118) (undo-tree-id25615 . -118) (undo-tree-id25616 . -118) (undo-tree-id25617 . -118) (undo-tree-id25618 . -118) (undo-tree-id25619 . -118) (undo-tree-id25620 . -118) (undo-tree-id25621 . -118) (undo-tree-id25622 . -118) (undo-tree-id25623 . -118) (undo-tree-id25624 . -118) (undo-tree-id25625 . -118) (undo-tree-id25626 . -118) (undo-tree-id25627 . -118) (undo-tree-id25628 . -194) (undo-tree-id25629 . -194) (undo-tree-id25630 . -194) (undo-tree-id25631 . -194) (undo-tree-id25632 . -194) (undo-tree-id25633 . -194) (undo-tree-id25634 . -194) (undo-tree-id25635 . -194) (undo-tree-id25636 . -194) (undo-tree-id25637 . -194) (undo-tree-id25638 . -194) (undo-tree-id25639 . -194) (undo-tree-id25640 . -194) (undo-tree-id25641 . -194) (undo-tree-id25642 . -194) (undo-tree-id25643 . -194) (undo-tree-id25644 . -194) (undo-tree-id25645 . -194) (undo-tree-id25646 . -194) (undo-tree-id25647 . -194) (undo-tree-id25648 . -194) (undo-tree-id25649 . -194) (undo-tree-id25650 . -98) (undo-tree-id25651 . -98) (undo-tree-id25652 . -98) (undo-tree-id25653 . -98) (undo-tree-id25654 . -98) (undo-tree-id25655 . -98) (undo-tree-id25656 . -98) (undo-tree-id25657 . -98) (undo-tree-id25658 . -98) (undo-tree-id25659 . -98) (undo-tree-id25660 . -98) (undo-tree-id25661 . -98) (undo-tree-id25662 . -98) (undo-tree-id25663 . -98) (undo-tree-id25664 . -98) (undo-tree-id25665 . -3) (undo-tree-id25666 . -3) (undo-tree-id25667 . -3) (undo-tree-id25668 . -3) (undo-tree-id25669 . -3) (undo-tree-id25670 . -3) (undo-tree-id25671 . -3) (undo-tree-id25672 . -3) (undo-tree-id25673 . -3) (undo-tree-id25674 . -3) (undo-tree-id25675 . -3) (undo-tree-id25676 . -3) (undo-tree-id25677 . -3) (undo-tree-id25678 . -3) (undo-tree-id25679 . -3) (#(";" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5373) (undo-tree-id25680 . -1) (undo-tree-id25681 . -1) (undo-tree-id25682 . -1)) nil (25772 50879 759079 475000) 0 nil])
([nil nil ((#("presumably, " 0 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5376) (undo-tree-id24882 . -11) (undo-tree-id24883 . 12) (undo-tree-id24884 . -11) (undo-tree-id24885 . -11) (undo-tree-id24886 . -12) (undo-tree-id24887 . -11) (undo-tree-id24888 . -9) (undo-tree-id24889 . -9) (undo-tree-id24890 . -9) (undo-tree-id24891 . -9) (undo-tree-id24892 . -9) (undo-tree-id24893 . -9) (undo-tree-id24894 . -9) (undo-tree-id24895 . -9) (undo-tree-id24896 . -9) (undo-tree-id24897 . -9) (undo-tree-id24898 . -9) (undo-tree-id24899 . -9) (undo-tree-id24900 . -9) (undo-tree-id24901 . -9) (undo-tree-id24902 . -9) (undo-tree-id24903 . -9) (undo-tree-id24904 . -9) (undo-tree-id24905 . -9) (undo-tree-id24906 . -9) (undo-tree-id24907 . -9) (undo-tree-id24908 . -9) (undo-tree-id24909 . -9) (undo-tree-id24910 . -9) (undo-tree-id24911 . -9) (undo-tree-id24912 . -9) (undo-tree-id24913 . -9) (undo-tree-id24914 . -9) (undo-tree-id24915 . -9) (undo-tree-id24916 . -9) (undo-tree-id24917 . -9) (undo-tree-id24918 . -9) (undo-tree-id24919 . -9) (undo-tree-id24920 . -9) (undo-tree-id24921 . -9) (undo-tree-id24922 . -9) (undo-tree-id24923 . -9) (undo-tree-id24924 . -9) (undo-tree-id24925 . -9) (undo-tree-id24926 . -9) (undo-tree-id24927 . -9) (undo-tree-id24928 . -9) (undo-tree-id24929 . -9) (undo-tree-id24930 . -9) (undo-tree-id24931 . -9) (undo-tree-id24932 . -9) (undo-tree-id24933 . -9) (undo-tree-id24934 . -9) (undo-tree-id24935 . -9) (undo-tree-id24936 . -9) (undo-tree-id24937 . -9) (undo-tree-id24938 . -9) (undo-tree-id24939 . -9) (undo-tree-id24940 . -9) (undo-tree-id24941 . -9) (undo-tree-id24942 . -9) (undo-tree-id24943 . -9) (undo-tree-id24944 . -9) (undo-tree-id24945 . -9) (undo-tree-id24946 . -9) (undo-tree-id24947 . -9) (undo-tree-id24948 . -9) (undo-tree-id24949 . -9) (undo-tree-id24950 . -9) (undo-tree-id24951 . -9) (undo-tree-id24952 . -9) (undo-tree-id24953 . -9) (undo-tree-id24954 . -9) (undo-tree-id24955 . -9) (undo-tree-id24956 . -9) (undo-tree-id24957 . -9) (undo-tree-id24958 . -9) (undo-tree-id24959 . -10) (undo-tree-id24960 . -10) (undo-tree-id24961 . -10) (undo-tree-id24962 . -10) (undo-tree-id24963 . -10) (undo-tree-id24964 . -10) (undo-tree-id24965 . -10) (undo-tree-id24966 . -10) (undo-tree-id24967 . -10) (undo-tree-id24968 . -10) (undo-tree-id24969 . -10) (undo-tree-id24970 . -10) (undo-tree-id24971 . -10) (undo-tree-id24972 . -10) (undo-tree-id24973 . -10) (undo-tree-id24974 . -10) (undo-tree-id24975 . -10) (undo-tree-id24976 . -10) (undo-tree-id24977 . -10) (undo-tree-id24978 . -10) (undo-tree-id24979 . -10) (undo-tree-id24980 . -10) (undo-tree-id24981 . -12) (undo-tree-id24982 . -12) (undo-tree-id24983 . -12) (undo-tree-id24984 . -12) (undo-tree-id24985 . -12) (undo-tree-id24986 . -12) (undo-tree-id24987 . -12) (undo-tree-id24988 . -12) (undo-tree-id24989 . -12) (undo-tree-id24990 . -12) (undo-tree-id24991 . -12) (undo-tree-id24992 . -12) (undo-tree-id24993 . -12) (undo-tree-id24994 . -12) (undo-tree-id24995 . -12) (undo-tree-id24996 . -12) (undo-tree-id24997 . -12) (undo-tree-id24998 . -12) (undo-tree-id24999 . -12) (undo-tree-id25000 . -12) (undo-tree-id25001 . -12) (undo-tree-id25002 . -12) (undo-tree-id25003 . -11) (undo-tree-id25004 . -11) (undo-tree-id25005 . -11) (undo-tree-id25006 . -11) (undo-tree-id25007 . -11) (undo-tree-id25008 . -11) (undo-tree-id25009 . -11) (undo-tree-id25010 . -11) (undo-tree-id25011 . -11) (undo-tree-id25012 . -11) (undo-tree-id25013 . -11) (undo-tree-id25014 . -11) (undo-tree-id25015 . -11) (undo-tree-id25016 . -11) (undo-tree-id25017 . -11) (undo-tree-id25018 . -11) (undo-tree-id25019 . -11) (undo-tree-id25020 . -11) (undo-tree-id25021 . -11) (undo-tree-id25022 . -11) (undo-tree-id25023 . -11) (undo-tree-id25024 . -11) (undo-tree-id25025 . -11) (undo-tree-id25026 . -12) 5387) nil (25772 50879 758707 666000) 0 nil])
([nil nil ((#("will " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5384) (undo-tree-id24880 . -4) (undo-tree-id24881 . -5)) nil (25772 50879 758628 99000) 0 nil])
([nil nil ((#("mostly " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5384) (undo-tree-id24878 . -6) (undo-tree-id24879 . -7)) nil (25772 50879 758626 248000) 0 nil])
([nil nil ((5387 . 5388)) nil (25772 50879 758624 325000) 0 nil])
([nil nil ((#("all " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5451) (undo-tree-id24876 . -3) (undo-tree-id24877 . -4)) nil (25772 50879 758623 607000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5451) (undo-tree-id24874 . -3) (undo-tree-id24875 . -4)) nil (25772 50879 758621 586000) 0 nil])
([nil nil ((5462 . 5463)) nil (25772 50879 758619 690000) 0 nil])
([nil nil ((#("it needs from time step to time step, and it " 0 45 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5464) (undo-tree-id24545 . -44) (undo-tree-id24546 . -44) (undo-tree-id24547 . -44) (undo-tree-id24548 . -1) (undo-tree-id24549 . -1) (undo-tree-id24550 . -1) (undo-tree-id24551 . -1) (undo-tree-id24552 . -1) (undo-tree-id24553 . -1) (undo-tree-id24554 . -1) (undo-tree-id24555 . -1) (undo-tree-id24556 . -1) (undo-tree-id24557 . -1) (undo-tree-id24558 . -1) (undo-tree-id24559 . -1) (undo-tree-id24560 . -1) (undo-tree-id24561 . -1) (undo-tree-id24562 . -1) (undo-tree-id24563 . -45) (undo-tree-id24564 . -44) (undo-tree-id24565 . -1) (undo-tree-id24566 . -1) (undo-tree-id24567 . -1) (undo-tree-id24568 . -1) (undo-tree-id24569 . -1) (undo-tree-id24570 . -1) (undo-tree-id24571 . -1) (undo-tree-id24572 . -1) (undo-tree-id24573 . -1) (undo-tree-id24574 . -1) (undo-tree-id24575 . -1) (undo-tree-id24576 . -1) (undo-tree-id24577 . -1) (undo-tree-id24578 . -1) (undo-tree-id24579 . -1) (undo-tree-id24580 . -1) (undo-tree-id24581 . -1) (undo-tree-id24582 . -1) (undo-tree-id24583 . -1) (undo-tree-id24584 . -1) (undo-tree-id24585 . -1) (undo-tree-id24586 . -1) (undo-tree-id24587 . -7) (undo-tree-id24588 . -7) (undo-tree-id24589 . -7) (undo-tree-id24590 . -7) (undo-tree-id24591 . -7) (undo-tree-id24592 . -7) (undo-tree-id24593 . -7) (undo-tree-id24594 . -7) (undo-tree-id24595 . -7) (undo-tree-id24596 . -7) (undo-tree-id24597 . -7) (undo-tree-id24598 . -7) (undo-tree-id24599 . -7) (undo-tree-id24600 . -7) (undo-tree-id24601 . -7) (undo-tree-id24602 . -7) (undo-tree-id24603 . -7) (undo-tree-id24604 . -7) (undo-tree-id24605 . -7) (undo-tree-id24606 . -7) (undo-tree-id24607 . -7) (undo-tree-id24608 . -7) (undo-tree-id24609 . -12) (undo-tree-id24610 . -12) (undo-tree-id24611 . -12) (undo-tree-id24612 . -12) (undo-tree-id24613 . -12) (undo-tree-id24614 . -12) (undo-tree-id24615 . -12) (undo-tree-id24616 . -12) (undo-tree-id24617 . -12) (undo-tree-id24618 . -12) (undo-tree-id24619 . -12) (undo-tree-id24620 . -12) (undo-tree-id24621 . -12) (undo-tree-id24622 . -12) (undo-tree-id24623 . -12) (undo-tree-id24624 . -12) (undo-tree-id24625 . -12) (undo-tree-id24626 . -12) (undo-tree-id24627 . -12) (undo-tree-id24628 . -12) (undo-tree-id24629 . -12) (undo-tree-id24630 . -12) (undo-tree-id24631 . -17) (undo-tree-id24632 . -17) (undo-tree-id24633 . -17) (undo-tree-id24634 . -17) (undo-tree-id24635 . -17) (undo-tree-id24636 . -17) (undo-tree-id24637 . -17) (undo-tree-id24638 . -17) (undo-tree-id24639 . -17) (undo-tree-id24640 . -17) (undo-tree-id24641 . -17) (undo-tree-id24642 . -17) (undo-tree-id24643 . -17) (undo-tree-id24644 . -17) (undo-tree-id24645 . -17) (undo-tree-id24646 . -17) (undo-tree-id24647 . -17) (undo-tree-id24648 . -17) (undo-tree-id24649 . -17) (undo-tree-id24650 . -17) (undo-tree-id24651 . -17) (undo-tree-id24652 . -17) (undo-tree-id24653 . -22) (undo-tree-id24654 . -22) (undo-tree-id24655 . -22) (undo-tree-id24656 . -22) (undo-tree-id24657 . -22) (undo-tree-id24658 . -22) (undo-tree-id24659 . -22) (undo-tree-id24660 . -22) (undo-tree-id24661 . -22) (undo-tree-id24662 . -22) (undo-tree-id24663 . -22) (undo-tree-id24664 . -22) (undo-tree-id24665 . -22) (undo-tree-id24666 . -22) (undo-tree-id24667 . -22) (undo-tree-id24668 . -22) (undo-tree-id24669 . -22) (undo-tree-id24670 . -22) (undo-tree-id24671 . -22) (undo-tree-id24672 . -22) (undo-tree-id24673 . -22) (undo-tree-id24674 . -22) (undo-tree-id24675 . -25) (undo-tree-id24676 . -25) (undo-tree-id24677 . -25) (undo-tree-id24678 . -25) (undo-tree-id24679 . -25) (undo-tree-id24680 . -25) (undo-tree-id24681 . -25) (undo-tree-id24682 . -25) (undo-tree-id24683 . -25) (undo-tree-id24684 . -25) (undo-tree-id24685 . -25) (undo-tree-id24686 . -25) (undo-tree-id24687 . -25) (undo-tree-id24688 . -25) (undo-tree-id24689 . -25) (undo-tree-id24690 . -25) (undo-tree-id24691 . -25) (undo-tree-id24692 . -25) (undo-tree-id24693 . -25) (undo-tree-id24694 . -25) (undo-tree-id24695 . -25) (undo-tree-id24696 . -25) (undo-tree-id24697 . -30) (undo-tree-id24698 . -30) (undo-tree-id24699 . -30) (undo-tree-id24700 . -30) (undo-tree-id24701 . -30) (undo-tree-id24702 . -30) (undo-tree-id24703 . -30) (undo-tree-id24704 . -30) (undo-tree-id24705 . -30) (undo-tree-id24706 . -30) (undo-tree-id24707 . -30) (undo-tree-id24708 . -30) (undo-tree-id24709 . -30) (undo-tree-id24710 . -30) (undo-tree-id24711 . -30) (undo-tree-id24712 . -30) (undo-tree-id24713 . -30) (undo-tree-id24714 . -30) (undo-tree-id24715 . -30) (undo-tree-id24716 . -30) (undo-tree-id24717 . -30) (undo-tree-id24718 . -30) (undo-tree-id24719 . -35) (undo-tree-id24720 . -35) (undo-tree-id24721 . -35) (undo-tree-id24722 . -35) (undo-tree-id24723 . -35) (undo-tree-id24724 . -35) (undo-tree-id24725 . -35) (undo-tree-id24726 . -35) (undo-tree-id24727 . -35) (undo-tree-id24728 . -35) (undo-tree-id24729 . -35) (undo-tree-id24730 . -35) (undo-tree-id24731 . -35) (undo-tree-id24732 . -35) (undo-tree-id24733 . -35) (undo-tree-id24734 . -35) (undo-tree-id24735 . -35) (undo-tree-id24736 . -35) (undo-tree-id24737 . -35) (undo-tree-id24738 . -35) (undo-tree-id24739 . -35) (undo-tree-id24740 . -35) (undo-tree-id24741 . -36) (undo-tree-id24742 . -36) (undo-tree-id24743 . -36) (undo-tree-id24744 . -36) (undo-tree-id24745 . -36) (undo-tree-id24746 . -36) (undo-tree-id24747 . -36) (undo-tree-id24748 . -36) (undo-tree-id24749 . -36) (undo-tree-id24750 . -36) (undo-tree-id24751 . -36) (undo-tree-id24752 . -36) (undo-tree-id24753 . -36) (undo-tree-id24754 . -36) (undo-tree-id24755 . -36) (undo-tree-id24756 . -36) (undo-tree-id24757 . -36) (undo-tree-id24758 . -36) (undo-tree-id24759 . -36) (undo-tree-id24760 . -36) (undo-tree-id24761 . -36) (undo-tree-id24762 . -36) (undo-tree-id24763 . -36) (undo-tree-id24764 . -36) (undo-tree-id24765 . -36) (undo-tree-id24766 . -36) (undo-tree-id24767 . -36) (undo-tree-id24768 . -36) (undo-tree-id24769 . -36) (undo-tree-id24770 . -36) (undo-tree-id24771 . -36) (undo-tree-id24772 . -36) (undo-tree-id24773 . -36) (undo-tree-id24774 . -36) (undo-tree-id24775 . -36) (undo-tree-id24776 . -36) (undo-tree-id24777 . -40) (undo-tree-id24778 . -40) (undo-tree-id24779 . -40) (undo-tree-id24780 . -40) (undo-tree-id24781 . -40) (undo-tree-id24782 . -40) (undo-tree-id24783 . -40) (undo-tree-id24784 . -40) (undo-tree-id24785 . -40) (undo-tree-id24786 . -40) (undo-tree-id24787 . -40) (undo-tree-id24788 . -40) (undo-tree-id24789 . -40) (undo-tree-id24790 . -40) (undo-tree-id24791 . -40) (undo-tree-id24792 . -40) (undo-tree-id24793 . -40) (undo-tree-id24794 . -40) (undo-tree-id24795 . -40) (undo-tree-id24796 . -40) (undo-tree-id24797 . -40) (undo-tree-id24798 . -40) (undo-tree-id24799 . -40) (undo-tree-id24800 . -40) (undo-tree-id24801 . -40) (undo-tree-id24802 . -40) (undo-tree-id24803 . -40) (undo-tree-id24804 . -40) (undo-tree-id24805 . -40) (undo-tree-id24806 . -43) (undo-tree-id24807 . -43) (undo-tree-id24808 . -43) (undo-tree-id24809 . -43) (undo-tree-id24810 . -43) (undo-tree-id24811 . -43) (undo-tree-id24812 . -43) (undo-tree-id24813 . -43) (undo-tree-id24814 . -43) (undo-tree-id24815 . -43) (undo-tree-id24816 . -43) (undo-tree-id24817 . -43) (undo-tree-id24818 . -43) (undo-tree-id24819 . -43) (undo-tree-id24820 . -43) (undo-tree-id24821 . -43) (undo-tree-id24822 . -43) (undo-tree-id24823 . -43) (undo-tree-id24824 . -43) (undo-tree-id24825 . -43) (undo-tree-id24826 . -43) (undo-tree-id24827 . -43) (undo-tree-id24828 . -45) (undo-tree-id24829 . -45) (undo-tree-id24830 . -45) (undo-tree-id24831 . -45) (undo-tree-id24832 . -45) (undo-tree-id24833 . -45) (undo-tree-id24834 . -45) (undo-tree-id24835 . -45) (undo-tree-id24836 . -45) (undo-tree-id24837 . -45) (undo-tree-id24838 . -45) (undo-tree-id24839 . -45) (undo-tree-id24840 . -45) (undo-tree-id24841 . -45) (undo-tree-id24842 . -45) (undo-tree-id24843 . -45) (undo-tree-id24844 . -45) (undo-tree-id24845 . -45) (undo-tree-id24846 . -45) (undo-tree-id24847 . -45) (undo-tree-id24848 . -45) (undo-tree-id24849 . -45) (undo-tree-id24850 . -44) (undo-tree-id24851 . -44) (undo-tree-id24852 . -44) (undo-tree-id24853 . -44) (undo-tree-id24854 . -44) (undo-tree-id24855 . -44) (undo-tree-id24856 . -44) (undo-tree-id24857 . -44) (undo-tree-id24858 . -44) (undo-tree-id24859 . -44) (undo-tree-id24860 . -44) (undo-tree-id24861 . -44) (undo-tree-id24862 . -44) (undo-tree-id24863 . -44) (undo-tree-id24864 . -44) (undo-tree-id24865 . -44) (undo-tree-id24866 . -44) (undo-tree-id24867 . -44) (undo-tree-id24868 . -44) (undo-tree-id24869 . -44) (undo-tree-id24870 . -44) (undo-tree-id24871 . -44) (undo-tree-id24872 . -44) (undo-tree-id24873 . -45) 5508) nil (25772 50879 758609 373000) 0 nil])
([nil nil ((5374 . 5521) (#("- will not use the final layer's hidden state very much. 
- the RNN uses the hidden states of the other recurrent layers to carry over information." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 32 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 32 33 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 33 57 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 57 58 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 58 59 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 59 60 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 60 76 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 77 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 147 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5374) (undo-tree-id22682 . -147) (undo-tree-id22683 . -147) (undo-tree-id22684 . -147) (undo-tree-id22685 . -147) (undo-tree-id22686 . -147) (undo-tree-id22687 . -60) (undo-tree-id22688 . -60) (undo-tree-id22689 . -60) (undo-tree-id22690 . -60) (undo-tree-id22691 . -60) (undo-tree-id22692 . -60) (undo-tree-id22693 . -60) (undo-tree-id22694 . -60) (undo-tree-id22695 . -60) (undo-tree-id22696 . -60) (undo-tree-id22697 . -60) (undo-tree-id22698 . -60) (undo-tree-id22699 . -60) (undo-tree-id22700 . -60) (undo-tree-id22701 . -60) (undo-tree-id22702 . -60) (undo-tree-id22703 . -59) (undo-tree-id22704 . -59) (undo-tree-id22705 . -59) (undo-tree-id22706 . -59) (undo-tree-id22707 . -59) (undo-tree-id22708 . -59) (undo-tree-id22709 . -59) (undo-tree-id22710 . -59) (undo-tree-id22711 . -59) (undo-tree-id22712 . -59) (undo-tree-id22713 . -59) (undo-tree-id22714 . -59) (undo-tree-id22715 . -59) (undo-tree-id22716 . -59) (undo-tree-id22717 . -59) (undo-tree-id22718 . -59) (undo-tree-id22719 . -59) (undo-tree-id22720 . -59) (undo-tree-id22721 . -59) (undo-tree-id22722 . -59) (undo-tree-id22723 . -59) (undo-tree-id22724 . -59) (undo-tree-id22725 . -59) (undo-tree-id22726 . -59) (undo-tree-id22727 . -59) (undo-tree-id22728 . -59) (undo-tree-id22729 . -60) (undo-tree-id22730 . -60) (undo-tree-id22731 . -60) (undo-tree-id22732 . -60) (undo-tree-id22733 . -60) (undo-tree-id22734 . -60) (undo-tree-id22735 . -60) (undo-tree-id22736 . -60) (undo-tree-id22737 . -60) (undo-tree-id22738 . -60) (undo-tree-id22739 . -60) (undo-tree-id22740 . -60) (undo-tree-id22741 . -60) (undo-tree-id22742 . -60) (undo-tree-id22743 . -60) (undo-tree-id22744 . -60) (undo-tree-id22745 . -60) (undo-tree-id22746 . -60) (undo-tree-id22747 . -60) (undo-tree-id22748 . -60) (undo-tree-id22749 . -60) (undo-tree-id22750 . -60) (undo-tree-id22751 . -60) (undo-tree-id22752 . -60) (undo-tree-id22753 . -60) (undo-tree-id22754 . -60) (undo-tree-id22755 . -60) (undo-tree-id22756 . -60) (undo-tree-id22757 . -60) (undo-tree-id22758 . -60) (undo-tree-id22759 . -60) (undo-tree-id22760 . -60) (undo-tree-id22761 . -60) (undo-tree-id22762 . -60) (undo-tree-id22763 . -60) (undo-tree-id22764 . -60) (undo-tree-id22765 . -60) (undo-tree-id22766 . -60) (undo-tree-id22767 . -60) (undo-tree-id22768 . -60) (undo-tree-id22769 . -60) (undo-tree-id22770 . -60) (undo-tree-id22771 . -60) (undo-tree-id22772 . -60) (undo-tree-id22773 . -60) (undo-tree-id22774 . -60) (undo-tree-id22775 . -60) (undo-tree-id22776 . -60) (undo-tree-id22777 . -60) (undo-tree-id22778 . -60) (undo-tree-id22779 . -60) (undo-tree-id22780 . -60) (undo-tree-id22781 . -60) (undo-tree-id22782 . -60) (undo-tree-id22783 . -60) (undo-tree-id22784 . -60) (undo-tree-id22785 . -60) (undo-tree-id22786 . -60) (undo-tree-id22787 . -60) (undo-tree-id22788 . -60) (undo-tree-id22789 . -60) (undo-tree-id22790 . -60) (undo-tree-id22791 . -60) (undo-tree-id22792 . -60) (undo-tree-id22793 . -60) (undo-tree-id22794 . -60) (undo-tree-id22795 . -60) (undo-tree-id22796 . -60) (undo-tree-id22797 . -60) (undo-tree-id22798 . -60) (undo-tree-id22799 . -60) (undo-tree-id22800 . -60) (undo-tree-id22801 . -60) (undo-tree-id22802 . -60) (undo-tree-id22803 . -60) (undo-tree-id22804 . -60) (undo-tree-id22805 . -60) (undo-tree-id22806 . -60) (undo-tree-id22807 . -60) (undo-tree-id22808 . -60) (undo-tree-id22809 . -60) (undo-tree-id22810 . -60) (undo-tree-id22811 . -60) (undo-tree-id22812 . -60) (undo-tree-id22813 . -60) (undo-tree-id22814 . -60) (undo-tree-id22815 . -60) (undo-tree-id22816 . -60) (undo-tree-id22817 . -60) (undo-tree-id22818 . -60) (undo-tree-id22819 . -60) (undo-tree-id22820 . -60) (undo-tree-id22821 . -60) (undo-tree-id22822 . -60) (undo-tree-id22823 . -60) (undo-tree-id22824 . -60) (undo-tree-id22825 . -60) (undo-tree-id22826 . -60) (undo-tree-id22827 . -60) (undo-tree-id22828 . -60) (undo-tree-id22829 . -60) (undo-tree-id22830 . -60) (undo-tree-id22831 . -60) (undo-tree-id22832 . -60) (undo-tree-id22833 . -60) (undo-tree-id22834 . -60) (undo-tree-id22835 . -60) (undo-tree-id22836 . -60) (undo-tree-id22837 . -60) (undo-tree-id22838 . -60) (undo-tree-id22839 . -60) (undo-tree-id22840 . -60) (undo-tree-id22841 . -60) (undo-tree-id22842 . -60) (undo-tree-id22843 . -60) (undo-tree-id22844 . -60) (undo-tree-id22845 . -60) (undo-tree-id22846 . -60) (undo-tree-id22847 . -60) (undo-tree-id22848 . -60) (undo-tree-id22849 . -60) (undo-tree-id22850 . -60) (undo-tree-id22851 . -60) (undo-tree-id22852 . -60) (undo-tree-id22853 . -60) (undo-tree-id22854 . -62) (undo-tree-id22855 . -62) (undo-tree-id22856 . -62) (undo-tree-id22857 . -62) (undo-tree-id22858 . -62) (undo-tree-id22859 . -62) (undo-tree-id22860 . -62) (undo-tree-id22861 . -62) (undo-tree-id22862 . -62) (undo-tree-id22863 . -62) (undo-tree-id22864 . -62) (undo-tree-id22865 . -62) (undo-tree-id22866 . -62) (undo-tree-id22867 . -62) (undo-tree-id22868 . -62) (undo-tree-id22869 . -62) (undo-tree-id22870 . -62) (undo-tree-id22871 . -62) (undo-tree-id22872 . -62) (undo-tree-id22873 . -62) (undo-tree-id22874 . -62) (undo-tree-id22875 . -62) (undo-tree-id22876 . -61) (undo-tree-id22877 . -61) (undo-tree-id22878 . -61) (undo-tree-id22879 . -61) (undo-tree-id22880 . -61) (undo-tree-id22881 . -61) (undo-tree-id22882 . -61) (undo-tree-id22883 . -61) (undo-tree-id22884 . -61) (undo-tree-id22885 . -61) (undo-tree-id22886 . -61) (undo-tree-id22887 . -61) (undo-tree-id22888 . -61) (undo-tree-id22889 . -61) (undo-tree-id22890 . -61) (undo-tree-id22891 . -61) (undo-tree-id22892 . -61) (undo-tree-id22893 . -61) (undo-tree-id22894 . -61) (undo-tree-id22895 . -61) (undo-tree-id22896 . -61) (undo-tree-id22897 . -61) (undo-tree-id22898 . -60) (undo-tree-id22899 . -60) (undo-tree-id22900 . -60) (undo-tree-id22901 . -60) (undo-tree-id22902 . -60) (undo-tree-id22903 . -60) (undo-tree-id22904 . -60) (undo-tree-id22905 . -60) (undo-tree-id22906 . -60) (undo-tree-id22907 . -60) (undo-tree-id22908 . -60) (undo-tree-id22909 . -60) (undo-tree-id22910 . -60) (undo-tree-id22911 . -60) (undo-tree-id22912 . -60) (undo-tree-id22913 . -60) (undo-tree-id22914 . -60) (undo-tree-id22915 . -60) (undo-tree-id22916 . -60) (undo-tree-id22917 . -60) (undo-tree-id22918 . -60) (undo-tree-id22919 . -60) (undo-tree-id22920 . -60) (undo-tree-id22921 . -60) (undo-tree-id22922 . -60) (undo-tree-id22923 . -60) (undo-tree-id22924 . -60) (undo-tree-id22925 . -60) (undo-tree-id22926 . -60) (undo-tree-id22927 . -60) (undo-tree-id22928 . -60) (undo-tree-id22929 . -60) (undo-tree-id22930 . -60) (undo-tree-id22931 . -60) (undo-tree-id22932 . -60) (undo-tree-id22933 . -60) (undo-tree-id22934 . -60) (undo-tree-id22935 . -60) (undo-tree-id22936 . -60) (undo-tree-id22937 . -60) (undo-tree-id22938 . -60) (undo-tree-id22939 . -60) (undo-tree-id22940 . -60) (undo-tree-id22941 . -60) (undo-tree-id22942 . -60) (undo-tree-id22943 . -60) (undo-tree-id22944 . -60) (undo-tree-id22945 . -60) (undo-tree-id22946 . -60) (undo-tree-id22947 . -60) (undo-tree-id22948 . -60) (undo-tree-id22949 . -60) (undo-tree-id22950 . -60) (undo-tree-id22951 . -60) (undo-tree-id22952 . -60) (undo-tree-id22953 . -60) (undo-tree-id22954 . -60) (undo-tree-id22955 . -60) (undo-tree-id22956 . -60) (undo-tree-id22957 . -60) (undo-tree-id22958 . -60) (undo-tree-id22959 . -60) (undo-tree-id22960 . -60) (undo-tree-id22961 . -60) (undo-tree-id22962 . -60) (undo-tree-id22963 . -60) (undo-tree-id22964 . -60) (undo-tree-id22965 . -60) (undo-tree-id22966 . -60) (undo-tree-id22967 . -60) (undo-tree-id22968 . -60) (undo-tree-id22969 . -60) (undo-tree-id22970 . -60) (undo-tree-id22971 . -60) (undo-tree-id22972 . -60) (undo-tree-id22973 . -60) (undo-tree-id22974 . -60) (undo-tree-id22975 . -60) (undo-tree-id22976 . -60) (undo-tree-id22977 . -60) (undo-tree-id22978 . -60) (undo-tree-id22979 . -60) (undo-tree-id22980 . -60) (undo-tree-id22981 . -60) (undo-tree-id22982 . -60) (undo-tree-id22983 . 83) (undo-tree-id22984 . -67) (undo-tree-id22985 . -64) (undo-tree-id22986 . -64) (undo-tree-id22987 . -64) (undo-tree-id22988 . -64) (undo-tree-id22989 . -64) (undo-tree-id22990 . -64) (undo-tree-id22991 . -64) (undo-tree-id22992 . -64) (undo-tree-id22993 . -64) (undo-tree-id22994 . -64) (undo-tree-id22995 . -64) (undo-tree-id22996 . -64) (undo-tree-id22997 . -64) (undo-tree-id22998 . -64) (undo-tree-id22999 . -64) (undo-tree-id23000 . -68) (undo-tree-id23001 . -68) (undo-tree-id23002 . -68) (undo-tree-id23003 . -68) (undo-tree-id23004 . -68) (undo-tree-id23005 . -68) (undo-tree-id23006 . -68) (undo-tree-id23007 . -68) (undo-tree-id23008 . -68) (undo-tree-id23009 . -68) (undo-tree-id23010 . -68) (undo-tree-id23011 . -68) (undo-tree-id23012 . -68) (undo-tree-id23013 . -68) (undo-tree-id23014 . -68) (undo-tree-id23015 . -68) (undo-tree-id23016 . -68) (undo-tree-id23017 . -68) (undo-tree-id23018 . -68) (undo-tree-id23019 . -68) (undo-tree-id23020 . -68) (undo-tree-id23021 . -68) (undo-tree-id23022 . -68) (undo-tree-id23023 . -68) (undo-tree-id23024 . -68) (undo-tree-id23025 . -68) (undo-tree-id23026 . -68) (undo-tree-id23027 . -68) (undo-tree-id23028 . -68) (undo-tree-id23029 . -68) (undo-tree-id23030 . -68) (undo-tree-id23031 . -68) (undo-tree-id23032 . -68) (undo-tree-id23033 . -68) (undo-tree-id23034 . -68) (undo-tree-id23035 . -68) (undo-tree-id23036 . -68) (undo-tree-id23037 . -68) (undo-tree-id23038 . -68) (undo-tree-id23039 . -68) (undo-tree-id23040 . -68) (undo-tree-id23041 . -68) (undo-tree-id23042 . -68) (undo-tree-id23043 . -68) (undo-tree-id23044 . -68) (undo-tree-id23045 . -68) (undo-tree-id23046 . -68) (undo-tree-id23047 . -68) (undo-tree-id23048 . -68) (undo-tree-id23049 . -68) (undo-tree-id23050 . -68) (undo-tree-id23051 . -68) (undo-tree-id23052 . -68) (undo-tree-id23053 . -68) (undo-tree-id23054 . -68) (undo-tree-id23055 . -68) (undo-tree-id23056 . -68) (undo-tree-id23057 . -68) (undo-tree-id23058 . -68) (undo-tree-id23059 . -68) (undo-tree-id23060 . -68) (undo-tree-id23061 . -68) (undo-tree-id23062 . -68) (undo-tree-id23063 . -68) (undo-tree-id23064 . -68) (undo-tree-id23065 . -68) (undo-tree-id23066 . -68) (undo-tree-id23067 . -68) (undo-tree-id23068 . -68) (undo-tree-id23069 . -68) (undo-tree-id23070 . -68) (undo-tree-id23071 . -68) (undo-tree-id23072 . -68) (undo-tree-id23073 . -68) (undo-tree-id23074 . -68) (undo-tree-id23075 . -68) (undo-tree-id23076 . -68) (undo-tree-id23077 . -68) (undo-tree-id23078 . -68) (undo-tree-id23079 . -68) (undo-tree-id23080 . -68) (undo-tree-id23081 . -70) (undo-tree-id23082 . -70) (undo-tree-id23083 . -70) (undo-tree-id23084 . -70) (undo-tree-id23085 . -70) (undo-tree-id23086 . -70) (undo-tree-id23087 . -70) (undo-tree-id23088 . -70) (undo-tree-id23089 . -70) (undo-tree-id23090 . -70) (undo-tree-id23091 . -70) (undo-tree-id23092 . -70) (undo-tree-id23093 . -70) (undo-tree-id23094 . -70) (undo-tree-id23095 . -70) (undo-tree-id23096 . -71) (undo-tree-id23097 . -71) (undo-tree-id23098 . -71) (undo-tree-id23099 . -71) (undo-tree-id23100 . -71) (undo-tree-id23101 . -71) (undo-tree-id23102 . -71) (undo-tree-id23103 . -71) (undo-tree-id23104 . -71) (undo-tree-id23105 . -71) (undo-tree-id23106 . -71) (undo-tree-id23107 . -71) (undo-tree-id23108 . -71) (undo-tree-id23109 . -71) (undo-tree-id23110 . -71) (undo-tree-id23111 . -71) (undo-tree-id23112 . -71) (undo-tree-id23113 . -72) (undo-tree-id23114 . -72) (undo-tree-id23115 . -72) (undo-tree-id23116 . -72) (undo-tree-id23117 . -72) (undo-tree-id23118 . -72) (undo-tree-id23119 . -72) (undo-tree-id23120 . -72) (undo-tree-id23121 . -72) (undo-tree-id23122 . -72) (undo-tree-id23123 . -72) (undo-tree-id23124 . -72) (undo-tree-id23125 . -72) (undo-tree-id23126 . -72) (undo-tree-id23127 . -72) (undo-tree-id23128 . -72) (undo-tree-id23129 . -72) (undo-tree-id23130 . -71) (undo-tree-id23131 . -71) (undo-tree-id23132 . -71) (undo-tree-id23133 . -71) (undo-tree-id23134 . -71) (undo-tree-id23135 . -71) (undo-tree-id23136 . -71) (undo-tree-id23137 . -71) (undo-tree-id23138 . -71) (undo-tree-id23139 . -71) (undo-tree-id23140 . -71) (undo-tree-id23141 . -71) (undo-tree-id23142 . -71) (undo-tree-id23143 . -71) (undo-tree-id23144 . -71) (undo-tree-id23145 . -71) (undo-tree-id23146 . -71) (undo-tree-id23147 . -71) (undo-tree-id23148 . -71) (undo-tree-id23149 . -71) (undo-tree-id23150 . -71) (undo-tree-id23151 . -71) (undo-tree-id23152 . -71) (undo-tree-id23153 . -71) (undo-tree-id23154 . -71) (undo-tree-id23155 . -71) (undo-tree-id23156 . -73) (undo-tree-id23157 . -73) (undo-tree-id23158 . -73) (undo-tree-id23159 . -73) (undo-tree-id23160 . -73) (undo-tree-id23161 . -73) (undo-tree-id23162 . -73) (undo-tree-id23163 . -73) (undo-tree-id23164 . -73) (undo-tree-id23165 . -73) (undo-tree-id23166 . -73) (undo-tree-id23167 . -73) (undo-tree-id23168 . -73) (undo-tree-id23169 . -73) (undo-tree-id23170 . -73) (undo-tree-id23171 . -75) (undo-tree-id23172 . -75) (undo-tree-id23173 . -75) (undo-tree-id23174 . -75) (undo-tree-id23175 . -75) (undo-tree-id23176 . -75) (undo-tree-id23177 . -75) (undo-tree-id23178 . -75) (undo-tree-id23179 . -75) (undo-tree-id23180 . -75) (undo-tree-id23181 . -75) (undo-tree-id23182 . -75) (undo-tree-id23183 . -75) (undo-tree-id23184 . -75) (undo-tree-id23185 . -75) (undo-tree-id23186 . -75) (undo-tree-id23187 . -75) (undo-tree-id23188 . -75) (undo-tree-id23189 . -75) (undo-tree-id23190 . -75) (undo-tree-id23191 . -75) (undo-tree-id23192 . -75) (undo-tree-id23193 . -82) (undo-tree-id23194 . -82) (undo-tree-id23195 . -82) (undo-tree-id23196 . -82) (undo-tree-id23197 . -82) (undo-tree-id23198 . -82) (undo-tree-id23199 . -82) (undo-tree-id23200 . -82) (undo-tree-id23201 . -82) (undo-tree-id23202 . -82) (undo-tree-id23203 . -82) (undo-tree-id23204 . -82) (undo-tree-id23205 . -82) (undo-tree-id23206 . -82) (undo-tree-id23207 . -82) (undo-tree-id23208 . -89) (undo-tree-id23209 . -89) (undo-tree-id23210 . -89) (undo-tree-id23211 . -89) (undo-tree-id23212 . -89) (undo-tree-id23213 . -89) (undo-tree-id23214 . -89) (undo-tree-id23215 . -89) (undo-tree-id23216 . -92) (undo-tree-id23217 . -92) (undo-tree-id23218 . -92) (undo-tree-id23219 . -92) (undo-tree-id23220 . -92) (undo-tree-id23221 . -92) (undo-tree-id23222 . -92) (undo-tree-id23223 . -92) (undo-tree-id23224 . -96) (undo-tree-id23225 . -96) (undo-tree-id23226 . -96) (undo-tree-id23227 . -96) (undo-tree-id23228 . -96) (undo-tree-id23229 . -96) (undo-tree-id23230 . -96) (undo-tree-id23231 . -96) (undo-tree-id23232 . -102) (undo-tree-id23233 . -102) (undo-tree-id23234 . -102) (undo-tree-id23235 . -102) (undo-tree-id23236 . -102) (undo-tree-id23237 . -102) (undo-tree-id23238 . -102) (undo-tree-id23239 . -102) (undo-tree-id23240 . -112) (undo-tree-id23241 . -112) (undo-tree-id23242 . -112) (undo-tree-id23243 . -112) (undo-tree-id23244 . -112) (undo-tree-id23245 . -112) (undo-tree-id23246 . -112) (undo-tree-id23247 . -112) (undo-tree-id23248 . -112) (undo-tree-id23249 . -112) (undo-tree-id23250 . -112) (undo-tree-id23251 . -112) (undo-tree-id23252 . -112) (undo-tree-id23253 . -112) (undo-tree-id23254 . -112) (undo-tree-id23255 . -112) (undo-tree-id23256 . -112) (undo-tree-id23257 . -112) (undo-tree-id23258 . -112) (undo-tree-id23259 . -112) (undo-tree-id23260 . -112) (undo-tree-id23261 . -112) (undo-tree-id23262 . -119) (undo-tree-id23263 . -119) (undo-tree-id23264 . -119) (undo-tree-id23265 . -119) (undo-tree-id23266 . -119) (undo-tree-id23267 . -119) (undo-tree-id23268 . -119) (undo-tree-id23269 . -119) (undo-tree-id23270 . -119) (undo-tree-id23271 . -119) (undo-tree-id23272 . -119) (undo-tree-id23273 . -119) (undo-tree-id23274 . -119) (undo-tree-id23275 . -119) (undo-tree-id23276 . -119) (undo-tree-id23277 . -119) (undo-tree-id23278 . -119) (undo-tree-id23279 . -119) (undo-tree-id23280 . -119) (undo-tree-id23281 . -119) (undo-tree-id23282 . -119) (undo-tree-id23283 . -119) (undo-tree-id23284 . -119) (undo-tree-id23285 . -119) (undo-tree-id23286 . -119) (undo-tree-id23287 . -119) (undo-tree-id23288 . -119) (undo-tree-id23289 . -119) (undo-tree-id23290 . -119) (undo-tree-id23291 . -119) (undo-tree-id23292 . -119) (undo-tree-id23293 . -119) (undo-tree-id23294 . -119) (undo-tree-id23295 . -119) (undo-tree-id23296 . -119) (undo-tree-id23297 . -119) (undo-tree-id23298 . -121) (undo-tree-id23299 . -121) (undo-tree-id23300 . -121) (undo-tree-id23301 . -121) (undo-tree-id23302 . -121) (undo-tree-id23303 . -121) (undo-tree-id23304 . -121) (undo-tree-id23305 . -121) (undo-tree-id23306 . -121) (undo-tree-id23307 . -121) (undo-tree-id23308 . -121) (undo-tree-id23309 . -121) (undo-tree-id23310 . -121) (undo-tree-id23311 . -121) (undo-tree-id23312 . -121) (undo-tree-id23313 . -124) (undo-tree-id23314 . -124) (undo-tree-id23315 . -124) (undo-tree-id23316 . -124) (undo-tree-id23317 . -124) (undo-tree-id23318 . -124) (undo-tree-id23319 . -124) (undo-tree-id23320 . -124) (undo-tree-id23321 . -124) (undo-tree-id23322 . -124) (undo-tree-id23323 . -124) (undo-tree-id23324 . -124) (undo-tree-id23325 . -124) (undo-tree-id23326 . -124) (undo-tree-id23327 . -124) (undo-tree-id23328 . -130) (undo-tree-id23329 . -130) (undo-tree-id23330 . -130) (undo-tree-id23331 . -130) (undo-tree-id23332 . -130) (undo-tree-id23333 . -130) (undo-tree-id23334 . -130) (undo-tree-id23335 . -130) (undo-tree-id23336 . -130) (undo-tree-id23337 . -130) (undo-tree-id23338 . -130) (undo-tree-id23339 . -130) (undo-tree-id23340 . -130) (undo-tree-id23341 . -130) (undo-tree-id23342 . -130) (undo-tree-id23343 . -135) (undo-tree-id23344 . -135) (undo-tree-id23345 . -135) (undo-tree-id23346 . -135) (undo-tree-id23347 . -135) (undo-tree-id23348 . -135) (undo-tree-id23349 . -135) (undo-tree-id23350 . -135) (undo-tree-id23351 . -135) (undo-tree-id23352 . -135) (undo-tree-id23353 . -135) (undo-tree-id23354 . -135) (undo-tree-id23355 . -135) (undo-tree-id23356 . -135) (undo-tree-id23357 . -135) (undo-tree-id23358 . -135) (undo-tree-id23359 . -135) (undo-tree-id23360 . -135) (undo-tree-id23361 . -135) (undo-tree-id23362 . -135) (undo-tree-id23363 . -135) (undo-tree-id23364 . -135) (undo-tree-id23365 . -135) (undo-tree-id23366 . -135) (undo-tree-id23367 . -135) (undo-tree-id23368 . -135) (undo-tree-id23369 . -135) (undo-tree-id23370 . -135) (undo-tree-id23371 . -135) (undo-tree-id23372 . -135) (undo-tree-id23373 . -135) (undo-tree-id23374 . -135) (undo-tree-id23375 . -135) (undo-tree-id23376 . -135) (undo-tree-id23377 . -135) (undo-tree-id23378 . -135) (undo-tree-id23379 . -135) (undo-tree-id23380 . -135) (undo-tree-id23381 . -135) (undo-tree-id23382 . -135) (undo-tree-id23383 . -135) (undo-tree-id23384 . -135) (undo-tree-id23385 . -135) (undo-tree-id23386 . -135) (undo-tree-id23387 . -135) (undo-tree-id23388 . -135) (undo-tree-id23389 . -135) (undo-tree-id23390 . -135) (undo-tree-id23391 . -135) (undo-tree-id23392 . -135) (undo-tree-id23393 . -135) (undo-tree-id23394 . -135) (undo-tree-id23395 . -135) (undo-tree-id23396 . -135) (undo-tree-id23397 . -135) (undo-tree-id23398 . -135) (undo-tree-id23399 . -135) (undo-tree-id23400 . -135) (undo-tree-id23401 . -135) (undo-tree-id23402 . -135) (undo-tree-id23403 . -135) (undo-tree-id23404 . -135) (undo-tree-id23405 . -135) (undo-tree-id23406 . -135) (undo-tree-id23407 . -135) (undo-tree-id23408 . -135) (undo-tree-id23409 . -135) (undo-tree-id23410 . -135) (undo-tree-id23411 . -135) (undo-tree-id23412 . -135) (undo-tree-id23413 . -135) (undo-tree-id23414 . -135) (undo-tree-id23415 . -135) (undo-tree-id23416 . -135) (undo-tree-id23417 . -135) (undo-tree-id23418 . -135) (undo-tree-id23419 . -135) (undo-tree-id23420 . -135) (undo-tree-id23421 . -135) (undo-tree-id23422 . -135) (undo-tree-id23423 . -135) (undo-tree-id23424 . -135) (undo-tree-id23425 . -135) (undo-tree-id23426 . -135) (undo-tree-id23427 . -135) (undo-tree-id23428 . -135) (undo-tree-id23429 . -135) (undo-tree-id23430 . -135) (undo-tree-id23431 . -135) (undo-tree-id23432 . -135) (undo-tree-id23433 . -135) (undo-tree-id23434 . -135) (undo-tree-id23435 . -135) (undo-tree-id23436 . -135) (undo-tree-id23437 . -135) (undo-tree-id23438 . -145) (undo-tree-id23439 . -145) (undo-tree-id23440 . -145) (undo-tree-id23441 . -145) (undo-tree-id23442 . -145) (undo-tree-id23443 . -145) (undo-tree-id23444 . -145) (undo-tree-id23445 . -145) (undo-tree-id23446 . -145) (undo-tree-id23447 . -145) (undo-tree-id23448 . -145) (undo-tree-id23449 . -145) (undo-tree-id23450 . -145) (undo-tree-id23451 . -145) (undo-tree-id23452 . -145) (undo-tree-id23453 . -147) (undo-tree-id23454 . -147) (undo-tree-id23455 . -147) (undo-tree-id23456 . -147) (undo-tree-id23457 . -147) (undo-tree-id23458 . -147) (undo-tree-id23459 . -147) (undo-tree-id23460 . -147) (undo-tree-id23461 . -147) (undo-tree-id23462 . -147) (undo-tree-id23463 . -147) (undo-tree-id23464 . -147) (undo-tree-id23465 . -147) (undo-tree-id23466 . -147) (undo-tree-id23467 . -147) (undo-tree-id23468 . -147) (undo-tree-id23469 . -147) (undo-tree-id23470 . -147) (undo-tree-id23471 . -147) (undo-tree-id23472 . -147) (undo-tree-id23473 . -147) (undo-tree-id23474 . -147) (undo-tree-id23475 . -147) (undo-tree-id23476 . -147) (undo-tree-id23477 . -147) (undo-tree-id23478 . -147) (undo-tree-id23479 . -147) (undo-tree-id23480 . -147) (undo-tree-id23481 . -147) (undo-tree-id23482 . -147) (undo-tree-id23483 . -147) (undo-tree-id23484 . -147) (undo-tree-id23485 . -147) (undo-tree-id23486 . -147) (undo-tree-id23487 . -147) (undo-tree-id23488 . -147) (undo-tree-id23489 . -147) (undo-tree-id23490 . -146) (undo-tree-id23491 . -146) (undo-tree-id23492 . -146) (undo-tree-id23493 . -146) (undo-tree-id23494 . -146) (undo-tree-id23495 . -146) (undo-tree-id23496 . -146) (undo-tree-id23497 . -146) (undo-tree-id23498 . -146) (undo-tree-id23499 . -146) (undo-tree-id23500 . -146) (undo-tree-id23501 . -146) (undo-tree-id23502 . -146) (undo-tree-id23503 . -146) (undo-tree-id23504 . -146) (undo-tree-id23505 . -146) (undo-tree-id23506 . -146) (undo-tree-id23507 . -146) (undo-tree-id23508 . -146) (undo-tree-id23509 . -146) (undo-tree-id23510 . -146) (undo-tree-id23511 . -146) (undo-tree-id23512 . -146) (undo-tree-id23513 . -146) (undo-tree-id23514 . -146) (undo-tree-id23515 . -146) (undo-tree-id23516 . -146) (undo-tree-id23517 . -146) (undo-tree-id23518 . -146) (undo-tree-id23519 . -146) (undo-tree-id23520 . -146) (undo-tree-id23521 . -146) (undo-tree-id23522 . -146) (undo-tree-id23523 . -146) (undo-tree-id23524 . -146) (undo-tree-id23525 . -146) (undo-tree-id23526 . -146) (undo-tree-id23527 . -146) (undo-tree-id23528 . -146) (undo-tree-id23529 . -147) (undo-tree-id23530 . -147) (undo-tree-id23531 . -147) (undo-tree-id23532 . -147) (undo-tree-id23533 . -147) (undo-tree-id23534 . -147) (undo-tree-id23535 . -147) (undo-tree-id23536 . -147) (undo-tree-id23537 . -147) (undo-tree-id23538 . -147) (undo-tree-id23539 . -147) (undo-tree-id23540 . -147) (undo-tree-id23541 . -147) (undo-tree-id23542 . -147) (undo-tree-id23543 . -147) (undo-tree-id23544 . -147) (undo-tree-id23545 . -147) (undo-tree-id23546 . -147) (undo-tree-id23547 . -147) (undo-tree-id23548 . -147) (undo-tree-id23549 . -147) (undo-tree-id23550 . -147) (undo-tree-id23551 . -147) (undo-tree-id23552 . -146) (undo-tree-id23553 . -146) (undo-tree-id23554 . -146) (undo-tree-id23555 . -146) (undo-tree-id23556 . -146) (undo-tree-id23557 . -146) (undo-tree-id23558 . -146) (undo-tree-id23559 . -146) (undo-tree-id23560 . -146) (undo-tree-id23561 . -146) (undo-tree-id23562 . -146) (undo-tree-id23563 . -146) (undo-tree-id23564 . -146) (undo-tree-id23565 . -146) (undo-tree-id23566 . -146) (undo-tree-id23567 . -146) (undo-tree-id23568 . -146) (undo-tree-id23569 . -146) (undo-tree-id23570 . -146) (undo-tree-id23571 . -146) (undo-tree-id23572 . -146) (undo-tree-id23573 . -146) (undo-tree-id23574 . -146) (undo-tree-id23575 . -146) (undo-tree-id23576 . -146) (undo-tree-id23577 . -146) (undo-tree-id23578 . -147) (undo-tree-id23579 . -147) (undo-tree-id23580 . -147) (undo-tree-id23581 . -147) (undo-tree-id23582 . -147) (undo-tree-id23583 . -147) (undo-tree-id23584 . -147) (undo-tree-id23585 . -147) (undo-tree-id23586 . -147) (undo-tree-id23587 . -147) (undo-tree-id23588 . -147) (undo-tree-id23589 . -147) (undo-tree-id23590 . -147) (undo-tree-id23591 . -147) (undo-tree-id23592 . -147) (undo-tree-id23593 . -147) (undo-tree-id23594 . -147) (undo-tree-id23595 . -147) (undo-tree-id23596 . -147) (undo-tree-id23597 . -147) (undo-tree-id23598 . -147) (undo-tree-id23599 . -147) (undo-tree-id23600 . -147) (undo-tree-id23601 . -147) (undo-tree-id23602 . -147) (undo-tree-id23603 . -147) (undo-tree-id23604 . -147) (undo-tree-id23605 . -147) (undo-tree-id23606 . -147) (undo-tree-id23607 . -147) (undo-tree-id23608 . -147) (undo-tree-id23609 . -147) (undo-tree-id23610 . -147) (undo-tree-id23611 . -147) (undo-tree-id23612 . -147) (undo-tree-id23613 . -147) (undo-tree-id23614 . -147) (undo-tree-id23615 . -147) (undo-tree-id23616 . -147) (undo-tree-id23617 . -147) (undo-tree-id23618 . -147) (undo-tree-id23619 . -147) (undo-tree-id23620 . -147) (undo-tree-id23621 . -147) (undo-tree-id23622 . -147) (undo-tree-id23623 . -147) (undo-tree-id23624 . -147) (undo-tree-id23625 . -147) (undo-tree-id23626 . -147) (undo-tree-id23627 . -147) (undo-tree-id23628 . -147) (undo-tree-id23629 . -147) (undo-tree-id23630 . -147) (undo-tree-id23631 . -147) (undo-tree-id23632 . -147) (undo-tree-id23633 . -147) (undo-tree-id23634 . -147) (undo-tree-id23635 . -147) (undo-tree-id23636 . -147) (undo-tree-id23637 . -147) (undo-tree-id23638 . -147) (undo-tree-id23639 . -147) (undo-tree-id23640 . -147) (undo-tree-id23641 . -147) (undo-tree-id23642 . -147) (undo-tree-id23643 . -147) (undo-tree-id23644 . -147) (undo-tree-id23645 . -147) (undo-tree-id23646 . -147) (undo-tree-id23647 . -147) (undo-tree-id23648 . -147) (undo-tree-id23649 . -147) (undo-tree-id23650 . -147) (undo-tree-id23651 . -147) (undo-tree-id23652 . -147) (undo-tree-id23653 . -147) (undo-tree-id23654 . -147) (undo-tree-id23655 . -147) (undo-tree-id23656 . -147) (undo-tree-id23657 . -147) (undo-tree-id23658 . -147) (undo-tree-id23659 . -147) (undo-tree-id23660 . -147) (undo-tree-id23661 . -147) (undo-tree-id23662 . -147) (undo-tree-id23663 . -147) (undo-tree-id23664 . -147) (undo-tree-id23665 . -147) (undo-tree-id23666 . -147) (undo-tree-id23667 . -147) (undo-tree-id23668 . -147) (undo-tree-id23669 . -147) (undo-tree-id23670 . -147) (undo-tree-id23671 . -147) (undo-tree-id23672 . -147) (undo-tree-id23673 . -147) (undo-tree-id23674 . -147) (undo-tree-id23675 . -147) (undo-tree-id23676 . -147) (undo-tree-id23677 . -147) (undo-tree-id23678 . -147) (undo-tree-id23679 . -147) (undo-tree-id23680 . -147) (undo-tree-id23681 . -147) (undo-tree-id23682 . -147) (undo-tree-id23683 . -147) (undo-tree-id23684 . -147) (undo-tree-id23685 . -147) (undo-tree-id23686 . -147) (undo-tree-id23687 . -147) (undo-tree-id23688 . -147) (undo-tree-id23689 . -147) (undo-tree-id23690 . -147) (undo-tree-id23691 . -147) (undo-tree-id23692 . -147) (undo-tree-id23693 . -147) (undo-tree-id23694 . -147) (undo-tree-id23695 . -147) (undo-tree-id23696 . -147) (undo-tree-id23697 . -147) (undo-tree-id23698 . -147) (undo-tree-id23699 . -147) (undo-tree-id23700 . -147) (undo-tree-id23701 . -147) (undo-tree-id23702 . -147) (undo-tree-id23703 . -147) (undo-tree-id23704 . -147) (undo-tree-id23705 . -147) (undo-tree-id23706 . -147) (undo-tree-id23707 . -147) (undo-tree-id23708 . -147) (undo-tree-id23709 . -147) (undo-tree-id23710 . -147) (undo-tree-id23711 . -147) (undo-tree-id23712 . -147) (undo-tree-id23713 . -147) (undo-tree-id23714 . -147) (undo-tree-id23715 . -147) (undo-tree-id23716 . -147) (undo-tree-id23717 . -147) (undo-tree-id23718 . -147) (undo-tree-id23719 . -147) (undo-tree-id23720 . -147) (undo-tree-id23721 . -147) (undo-tree-id23722 . -147) (undo-tree-id23723 . -147) (undo-tree-id23724 . -147) (undo-tree-id23725 . -147) (undo-tree-id23726 . -147) (undo-tree-id23727 . -147) (undo-tree-id23728 . -147) (undo-tree-id23729 . -147) (undo-tree-id23730 . -147) (undo-tree-id23731 . -147) (undo-tree-id23732 . -147) (undo-tree-id23733 . -147) (undo-tree-id23734 . -147) (undo-tree-id23735 . -147) (undo-tree-id23736 . -147) (undo-tree-id23737 . -147) (undo-tree-id23738 . -147) (undo-tree-id23739 . -147) (undo-tree-id23740 . -147) (undo-tree-id23741 . -147) (undo-tree-id23742 . -147) (undo-tree-id23743 . -147) (undo-tree-id23744 . -147) (undo-tree-id23745 . -147) (undo-tree-id23746 . -147) (undo-tree-id23747 . -147) (undo-tree-id23748 . -147) (undo-tree-id23749 . -147) (undo-tree-id23750 . -147) (undo-tree-id23751 . -147) (undo-tree-id23752 . -147) (undo-tree-id23753 . -147) (undo-tree-id23754 . -147) (undo-tree-id23755 . -147) (undo-tree-id23756 . -147) (undo-tree-id23757 . -147) (undo-tree-id23758 . -147) (undo-tree-id23759 . -147) (undo-tree-id23760 . -147) (undo-tree-id23761 . -147) (undo-tree-id23762 . -147) (undo-tree-id23763 . -147) (undo-tree-id23764 . -147) (undo-tree-id23765 . -147) (undo-tree-id23766 . -147) (undo-tree-id23767 . -147) (undo-tree-id23768 . -147) (undo-tree-id23769 . -147) (undo-tree-id23770 . -147) (undo-tree-id23771 . -147) (undo-tree-id23772 . -147) (undo-tree-id23773 . -147) (undo-tree-id23774 . -147) (undo-tree-id23775 . -147) (undo-tree-id23776 . -147) (undo-tree-id23777 . -147) (undo-tree-id23778 . -147) (undo-tree-id23779 . -147) (undo-tree-id23780 . -147) (undo-tree-id23781 . -147) (undo-tree-id23782 . -147) (undo-tree-id23783 . -147) (undo-tree-id23784 . -147) (undo-tree-id23785 . -147) (undo-tree-id23786 . -147) (undo-tree-id23787 . -147) (undo-tree-id23788 . -147) (undo-tree-id23789 . -147) (undo-tree-id23790 . -147) (undo-tree-id23791 . -147) (undo-tree-id23792 . -147) (undo-tree-id23793 . -147) (undo-tree-id23794 . -147) (undo-tree-id23795 . -147) (undo-tree-id23796 . -147) (undo-tree-id23797 . -147) (undo-tree-id23798 . -147) (undo-tree-id23799 . -147) (undo-tree-id23800 . -147) (undo-tree-id23801 . -147) (undo-tree-id23802 . -147) (undo-tree-id23803 . -147) (undo-tree-id23804 . -147) (undo-tree-id23805 . -147) (undo-tree-id23806 . -147) (undo-tree-id23807 . -147) (undo-tree-id23808 . -147) (undo-tree-id23809 . -147) (undo-tree-id23810 . -147) (undo-tree-id23811 . -147) (undo-tree-id23812 . -147) (undo-tree-id23813 . -147) (undo-tree-id23814 . -147) (undo-tree-id23815 . -147) (undo-tree-id23816 . -147) (undo-tree-id23817 . -147) (undo-tree-id23818 . -147) (undo-tree-id23819 . -147) (undo-tree-id23820 . -147) (undo-tree-id23821 . -147) (undo-tree-id23822 . -147) (undo-tree-id23823 . -147) (undo-tree-id23824 . -147) (undo-tree-id23825 . -147) (undo-tree-id23826 . -147) (undo-tree-id23827 . -147) (undo-tree-id23828 . -147) (undo-tree-id23829 . -147) (undo-tree-id23830 . -147) (undo-tree-id23831 . -147) (undo-tree-id23832 . -147) (undo-tree-id23833 . -147) (undo-tree-id23834 . -147) (undo-tree-id23835 . -147) (undo-tree-id23836 . -147) (undo-tree-id23837 . -147) (undo-tree-id23838 . -147) (undo-tree-id23839 . -147) (undo-tree-id23840 . -147) (undo-tree-id23841 . -147) (undo-tree-id23842 . -147) (undo-tree-id23843 . -147) (undo-tree-id23844 . -147) (undo-tree-id23845 . -147) (undo-tree-id23846 . -147) (undo-tree-id23847 . -147) (undo-tree-id23848 . -147) (undo-tree-id23849 . -147) (undo-tree-id23850 . -147) (undo-tree-id23851 . -147) (undo-tree-id23852 . -147) (undo-tree-id23853 . -147) (undo-tree-id23854 . -147) (undo-tree-id23855 . -147) (undo-tree-id23856 . -147) (undo-tree-id23857 . -147) (undo-tree-id23858 . -147) (undo-tree-id23859 . -147) (undo-tree-id23860 . -147) (undo-tree-id23861 . -147) (undo-tree-id23862 . -147) (undo-tree-id23863 . -147) (undo-tree-id23864 . -147) (undo-tree-id23865 . -147) (undo-tree-id23866 . -147) (undo-tree-id23867 . -147) (undo-tree-id23868 . -147) (undo-tree-id23869 . -147) (undo-tree-id23870 . -147) (undo-tree-id23871 . -147) (undo-tree-id23872 . -147) (undo-tree-id23873 . -147) (undo-tree-id23874 . -147) (undo-tree-id23875 . -147) (undo-tree-id23876 . -147) (undo-tree-id23877 . -147) (undo-tree-id23878 . -147) (undo-tree-id23879 . -147) (undo-tree-id23880 . -147) (undo-tree-id23881 . -147) (undo-tree-id23882 . -147) (undo-tree-id23883 . -147) (undo-tree-id23884 . -147) (undo-tree-id23885 . -147) (undo-tree-id23886 . -147) (undo-tree-id23887 . -147) (undo-tree-id23888 . -147) (undo-tree-id23889 . -147) (undo-tree-id23890 . -147) (undo-tree-id23891 . -147) (undo-tree-id23892 . -147) (undo-tree-id23893 . -147) (undo-tree-id23894 . -147) (undo-tree-id23895 . -147) (undo-tree-id23896 . -147) (undo-tree-id23897 . -147) (undo-tree-id23898 . -147) (undo-tree-id23899 . -147) (undo-tree-id23900 . -147) (undo-tree-id23901 . -147) (undo-tree-id23902 . -147) (undo-tree-id23903 . -147) (undo-tree-id23904 . -147) (undo-tree-id23905 . -147) (undo-tree-id23906 . -147) (undo-tree-id23907 . -147) (undo-tree-id23908 . -147) (undo-tree-id23909 . -147) (undo-tree-id23910 . -147) (undo-tree-id23911 . -147) (undo-tree-id23912 . -147) (undo-tree-id23913 . -147) (undo-tree-id23914 . -147) (undo-tree-id23915 . -147) (undo-tree-id23916 . -147) (undo-tree-id23917 . -147) (undo-tree-id23918 . -147) (undo-tree-id23919 . -147) (undo-tree-id23920 . -147) (undo-tree-id23921 . -147) (undo-tree-id23922 . -147) (undo-tree-id23923 . -147) (undo-tree-id23924 . -147) (undo-tree-id23925 . -147) (undo-tree-id23926 . -147) (undo-tree-id23927 . -147) (undo-tree-id23928 . -147) (undo-tree-id23929 . -147) (undo-tree-id23930 . -147) (undo-tree-id23931 . -147) (undo-tree-id23932 . -147) (undo-tree-id23933 . -147) (undo-tree-id23934 . -147) (undo-tree-id23935 . -147) (undo-tree-id23936 . -147) (undo-tree-id23937 . -147) (undo-tree-id23938 . -147) (undo-tree-id23939 . -147) (undo-tree-id23940 . -147) (undo-tree-id23941 . -147) (undo-tree-id23942 . -147) (undo-tree-id23943 . -147) (undo-tree-id23944 . -147) (undo-tree-id23945 . -147) (undo-tree-id23946 . -147) (undo-tree-id23947 . -147) (undo-tree-id23948 . -147) (undo-tree-id23949 . -147) (undo-tree-id23950 . -147) (undo-tree-id23951 . -147) (undo-tree-id23952 . -147) (undo-tree-id23953 . -147) (undo-tree-id23954 . -147) (undo-tree-id23955 . -147) (undo-tree-id23956 . -147) (undo-tree-id23957 . -147) (undo-tree-id23958 . -147) (undo-tree-id23959 . -147) (undo-tree-id23960 . -147) (undo-tree-id23961 . -147) (undo-tree-id23962 . -147) (undo-tree-id23963 . -147) (undo-tree-id23964 . -147) (undo-tree-id23965 . -147) (undo-tree-id23966 . -147) (undo-tree-id23967 . -147) (undo-tree-id23968 . -147) (undo-tree-id23969 . -147) (undo-tree-id23970 . -147) (undo-tree-id23971 . -147) (undo-tree-id23972 . -147) (undo-tree-id23973 . -147) (undo-tree-id23974 . -147) (undo-tree-id23975 . -147) (undo-tree-id23976 . -147) (undo-tree-id23977 . -147) (undo-tree-id23978 . -147) (undo-tree-id23979 . -147) (undo-tree-id23980 . -147) (undo-tree-id23981 . -147) (undo-tree-id23982 . -147) (undo-tree-id23983 . -147) (undo-tree-id23984 . -147) (undo-tree-id23985 . -147) (undo-tree-id23986 . -147) (undo-tree-id23987 . -147) (undo-tree-id23988 . -147) (undo-tree-id23989 . -147) (undo-tree-id23990 . -147) (undo-tree-id23991 . -147) (undo-tree-id23992 . -147) (undo-tree-id23993 . -147) (undo-tree-id23994 . -147) (undo-tree-id23995 . -147) (undo-tree-id23996 . -147) (undo-tree-id23997 . -147) (undo-tree-id23998 . -147) (undo-tree-id23999 . -147) (undo-tree-id24000 . -147) (undo-tree-id24001 . -147) (undo-tree-id24002 . -147) (undo-tree-id24003 . -147) (undo-tree-id24004 . -147) (undo-tree-id24005 . -147) (undo-tree-id24006 . -147) (undo-tree-id24007 . -147) (undo-tree-id24008 . -147) (undo-tree-id24009 . -147) (undo-tree-id24010 . -147) (undo-tree-id24011 . -147) (undo-tree-id24012 . -147) (undo-tree-id24013 . -147) (undo-tree-id24014 . -147) (undo-tree-id24015 . -147) (undo-tree-id24016 . -147) (undo-tree-id24017 . -147) (undo-tree-id24018 . -147) (undo-tree-id24019 . -147) (undo-tree-id24020 . -147) (undo-tree-id24021 . -147) (undo-tree-id24022 . -147) (undo-tree-id24023 . -147) (undo-tree-id24024 . -147) (undo-tree-id24025 . -147) (undo-tree-id24026 . -147) (undo-tree-id24027 . -147) (undo-tree-id24028 . -147) (undo-tree-id24029 . -147) (undo-tree-id24030 . -147) (undo-tree-id24031 . -147) (undo-tree-id24032 . -147) (undo-tree-id24033 . -147) (undo-tree-id24034 . -147) (undo-tree-id24035 . -147) (undo-tree-id24036 . -147) (undo-tree-id24037 . -147) (undo-tree-id24038 . -147) (undo-tree-id24039 . -58) (5374 . 5432) (#(" will not use the final layer's hidden state very much. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5463) (undo-tree-id24040 . -1) (undo-tree-id24041 . -1) (undo-tree-id24042 . 56) (undo-tree-id24043 . -1) (undo-tree-id24044 . -1) (undo-tree-id24045 . 55) (undo-tree-id24046 . -1) (undo-tree-id24047 . -1) (undo-tree-id24048 . -1) (undo-tree-id24049 . -1) (undo-tree-id24050 . -1) (undo-tree-id24051 . -1) (undo-tree-id24052 . -1) (undo-tree-id24053 . -1) (undo-tree-id24054 . -1) (undo-tree-id24055 . -1) (undo-tree-id24056 . -1) (undo-tree-id24057 . -1) (undo-tree-id24058 . -1) (undo-tree-id24059 . -1) (undo-tree-id24060 . -1) (undo-tree-id24061 . -1) (undo-tree-id24062 . -1) (undo-tree-id24063 . -1) (undo-tree-id24064 . -1) (undo-tree-id24065 . -1) (undo-tree-id24066 . -1) (undo-tree-id24067 . -1) (undo-tree-id24068 . -1) (undo-tree-id24069 . -1) (undo-tree-id24070 . -1) (undo-tree-id24071 . -1) (undo-tree-id24072 . -1) (undo-tree-id24073 . -1) (undo-tree-id24074 . -1) (undo-tree-id24075 . -1) (undo-tree-id24076 . -1) (undo-tree-id24077 . -1) (undo-tree-id24078 . -1) (undo-tree-id24079 . -1) (undo-tree-id24080 . -1) (undo-tree-id24081 . -1) (undo-tree-id24082 . -1) (undo-tree-id24083 . -1) (undo-tree-id24084 . -1) (undo-tree-id24085 . -1) (undo-tree-id24086 . -1) (undo-tree-id24087 . -1) (undo-tree-id24088 . -1) (undo-tree-id24089 . -1) (undo-tree-id24090 . -1) (undo-tree-id24091 . -1) (undo-tree-id24092 . -1) (undo-tree-id24093 . -1) (undo-tree-id24094 . -1) (undo-tree-id24095 . -1) (undo-tree-id24096 . -1) (undo-tree-id24097 . -1) (undo-tree-id24098 . -1) (undo-tree-id24099 . -1) (undo-tree-id24100 . -1) (undo-tree-id24101 . -1) (undo-tree-id24102 . -1) (undo-tree-id24103 . -1) (undo-tree-id24104 . -1) (undo-tree-id24105 . -1) (undo-tree-id24106 . -1) (undo-tree-id24107 . -1) (undo-tree-id24108 . -1) (undo-tree-id24109 . -1) (undo-tree-id24110 . -1) (undo-tree-id24111 . -1) (undo-tree-id24112 . -1) (undo-tree-id24113 . -1) (undo-tree-id24114 . -1) (undo-tree-id24115 . -1) (undo-tree-id24116 . -1) (undo-tree-id24117 . -1) (undo-tree-id24118 . -1) (undo-tree-id24119 . -1) (undo-tree-id24120 . -1) (undo-tree-id24121 . -1) (undo-tree-id24122 . -1) (undo-tree-id24123 . -1) (undo-tree-id24124 . -1) (undo-tree-id24125 . -1) (undo-tree-id24126 . -1) (undo-tree-id24127 . -1) (undo-tree-id24128 . -1) (undo-tree-id24129 . -1) (undo-tree-id24130 . -1) (undo-tree-id24131 . -1) (undo-tree-id24132 . -1) (undo-tree-id24133 . -1) (undo-tree-id24134 . -1) (undo-tree-id24135 . -1) (undo-tree-id24136 . -1) (undo-tree-id24137 . -1) (undo-tree-id24138 . -1) (undo-tree-id24139 . -1) (undo-tree-id24140 . -1) (undo-tree-id24141 . -1) (undo-tree-id24142 . -1) (undo-tree-id24143 . -1) (undo-tree-id24144 . -1) (undo-tree-id24145 . -1) (undo-tree-id24146 . -1) (undo-tree-id24147 . -1) (undo-tree-id24148 . -1) (undo-tree-id24149 . -1) (undo-tree-id24150 . -1) (undo-tree-id24151 . -1) (undo-tree-id24152 . -1) (undo-tree-id24153 . -1) (undo-tree-id24154 . -1) (undo-tree-id24155 . -1) (undo-tree-id24156 . -1) (undo-tree-id24157 . -1) (undo-tree-id24158 . -1) (undo-tree-id24159 . -1) (undo-tree-id24160 . -1) (undo-tree-id24161 . -1) (undo-tree-id24162 . -1) (undo-tree-id24163 . -1) (undo-tree-id24164 . -1) (undo-tree-id24165 . -1) (undo-tree-id24166 . -1) (undo-tree-id24167 . -1) (undo-tree-id24168 . -1) (undo-tree-id24169 . -1) (undo-tree-id24170 . -1) (undo-tree-id24171 . -1) (undo-tree-id24172 . -1) (undo-tree-id24173 . -1) (undo-tree-id24174 . -1) (undo-tree-id24175 . -1) (undo-tree-id24176 . -1) (undo-tree-id24177 . -1) (undo-tree-id24178 . -1) (undo-tree-id24179 . -1) (undo-tree-id24180 . -1) (undo-tree-id24181 . -1) (undo-tree-id24182 . -1) (undo-tree-id24183 . -1) (undo-tree-id24184 . -1) (undo-tree-id24185 . -1) (undo-tree-id24186 . -1) (undo-tree-id24187 . -1) (undo-tree-id24188 . -1) (undo-tree-id24189 . -1) (undo-tree-id24190 . -1) (undo-tree-id24191 . -1) (undo-tree-id24192 . -1) (undo-tree-id24193 . -1) (undo-tree-id24194 . -1) (undo-tree-id24195 . -1) (undo-tree-id24196 . -1) (undo-tree-id24197 . -1) (undo-tree-id24198 . -1) (undo-tree-id24199 . -1) (undo-tree-id24200 . -1) (undo-tree-id24201 . -1) (undo-tree-id24202 . -1) (undo-tree-id24203 . -1) (undo-tree-id24204 . -1) (undo-tree-id24205 . -1) (undo-tree-id24206 . -1) (undo-tree-id24207 . -1) (undo-tree-id24208 . -1) (undo-tree-id24209 . -1) (undo-tree-id24210 . -1) (undo-tree-id24211 . -1) (undo-tree-id24212 . -1) (undo-tree-id24213 . -1) (undo-tree-id24214 . -1) (undo-tree-id24215 . -1) (undo-tree-id24216 . -1) (undo-tree-id24217 . -1) (undo-tree-id24218 . -1) (undo-tree-id24219 . -1) (undo-tree-id24220 . -1) (undo-tree-id24221 . -1) (undo-tree-id24222 . -1) (undo-tree-id24223 . -1) (undo-tree-id24224 . -1) (undo-tree-id24225 . -1) (undo-tree-id24226 . -1) (undo-tree-id24227 . -1) (undo-tree-id24228 . -1) (undo-tree-id24229 . -1) (undo-tree-id24230 . -1) (undo-tree-id24231 . -1) (undo-tree-id24232 . -1) (undo-tree-id24233 . -1) (undo-tree-id24234 . -1) (undo-tree-id24235 . -1) (undo-tree-id24236 . -1) (undo-tree-id24237 . -1) (undo-tree-id24238 . -1) (undo-tree-id24239 . -1) (undo-tree-id24240 . -1) (undo-tree-id24241 . -1) (undo-tree-id24242 . -1) (undo-tree-id24243 . -1) (undo-tree-id24244 . -1) (undo-tree-id24245 . -1) (undo-tree-id24246 . -1) (undo-tree-id24247 . -1) (undo-tree-id24248 . -1) (undo-tree-id24249 . -1) (undo-tree-id24250 . -1) (undo-tree-id24251 . -1) (undo-tree-id24252 . -1) (undo-tree-id24253 . -1) (undo-tree-id24254 . -1) (undo-tree-id24255 . -1) (undo-tree-id24256 . -1) (undo-tree-id24257 . -1) (undo-tree-id24258 . -1) (undo-tree-id24259 . -1) (undo-tree-id24260 . -1) (undo-tree-id24261 . -1) (undo-tree-id24262 . -1) (undo-tree-id24263 . -1) (undo-tree-id24264 . -1) (undo-tree-id24265 . -1) (undo-tree-id24266 . -1) (undo-tree-id24267 . -1) (undo-tree-id24268 . -1) (undo-tree-id24269 . -1) (undo-tree-id24270 . -1) (undo-tree-id24271 . -1) (undo-tree-id24272 . -1) (undo-tree-id24273 . -1) (undo-tree-id24274 . -1) (undo-tree-id24275 . -1) (undo-tree-id24276 . -1) (undo-tree-id24277 . -1) (undo-tree-id24278 . -1) (undo-tree-id24279 . -1) (undo-tree-id24280 . -1) (undo-tree-id24281 . -1) (undo-tree-id24282 . -1) (undo-tree-id24283 . -1) (undo-tree-id24284 . -1) (undo-tree-id24285 . -1) (undo-tree-id24286 . -1) (undo-tree-id24287 . -1) (undo-tree-id24288 . -1) (undo-tree-id24289 . -1) (undo-tree-id24290 . -1) (undo-tree-id24291 . -1) (undo-tree-id24292 . -1) (undo-tree-id24293 . -1) (undo-tree-id24294 . -1) (undo-tree-id24295 . -1) (undo-tree-id24296 . -1) (undo-tree-id24297 . -1) (undo-tree-id24298 . -1) (undo-tree-id24299 . -1) (undo-tree-id24300 . -1) (undo-tree-id24301 . -1) (undo-tree-id24302 . -1) (undo-tree-id24303 . -1) (undo-tree-id24304 . -1) (undo-tree-id24305 . -1) (undo-tree-id24306 . -1) (undo-tree-id24307 . -1) (undo-tree-id24308 . -1) (undo-tree-id24309 . -1) (undo-tree-id24310 . -1) (undo-tree-id24311 . -1) (undo-tree-id24312 . -1) (undo-tree-id24313 . -1) (undo-tree-id24314 . -1) (undo-tree-id24315 . -1) (undo-tree-id24316 . -1) (undo-tree-id24317 . -1) (undo-tree-id24318 . -1) (undo-tree-id24319 . -1) (undo-tree-id24320 . -1) (undo-tree-id24321 . -1) (undo-tree-id24322 . -1) (undo-tree-id24323 . -1) (undo-tree-id24324 . -1) (undo-tree-id24325 . -1) (undo-tree-id24326 . -1) (undo-tree-id24327 . -1) (undo-tree-id24328 . -1) (undo-tree-id24329 . -1) (undo-tree-id24330 . -1) (undo-tree-id24331 . -1) (undo-tree-id24332 . -1) (undo-tree-id24333 . -1) (undo-tree-id24334 . -1) (undo-tree-id24335 . -1) (undo-tree-id24336 . -1) (undo-tree-id24337 . -1) (undo-tree-id24338 . -1) (undo-tree-id24339 . -1) (undo-tree-id24340 . -1) (undo-tree-id24341 . -1) (undo-tree-id24342 . -1) (undo-tree-id24343 . -1) (undo-tree-id24344 . -1) (undo-tree-id24345 . -1) (undo-tree-id24346 . -1) (undo-tree-id24347 . -1) (undo-tree-id24348 . -1) (undo-tree-id24349 . -1) (undo-tree-id24350 . -1) (undo-tree-id24351 . -1) (undo-tree-id24352 . -1) (undo-tree-id24353 . -1) (undo-tree-id24354 . -1) (undo-tree-id24355 . -1) (undo-tree-id24356 . -1) (undo-tree-id24357 . -1) (undo-tree-id24358 . -1) (undo-tree-id24359 . -1) (undo-tree-id24360 . -1) (undo-tree-id24361 . -1) (undo-tree-id24362 . -1) (undo-tree-id24363 . -1) (undo-tree-id24364 . -1) (undo-tree-id24365 . -1) (undo-tree-id24366 . -1) (undo-tree-id24367 . -1) (undo-tree-id24368 . -1) (undo-tree-id24369 . -1) (undo-tree-id24370 . -1) (undo-tree-id24371 . -1) (undo-tree-id24372 . -1) (undo-tree-id24373 . -1) (undo-tree-id24374 . -1) (undo-tree-id24375 . -1) (undo-tree-id24376 . -1) (undo-tree-id24377 . -1) (undo-tree-id24378 . -1) (undo-tree-id24379 . -1) (undo-tree-id24380 . -1) (undo-tree-id24381 . -1) (undo-tree-id24382 . -1) (undo-tree-id24383 . -1) (undo-tree-id24384 . -1) (undo-tree-id24385 . -1) (undo-tree-id24386 . -4) (undo-tree-id24387 . -4) (undo-tree-id24388 . -4) (undo-tree-id24389 . -4) (undo-tree-id24390 . -4) (undo-tree-id24391 . -4) (undo-tree-id24392 . -4) (undo-tree-id24393 . -4) (undo-tree-id24394 . -4) (undo-tree-id24395 . -4) (undo-tree-id24396 . -4) (undo-tree-id24397 . -4) (undo-tree-id24398 . -4) (undo-tree-id24399 . -4) (undo-tree-id24400 . -4) (undo-tree-id24401 . -4) (undo-tree-id24402 . -4) (undo-tree-id24403 . -4) (undo-tree-id24404 . -4) (undo-tree-id24405 . -4) (undo-tree-id24406 . -4) (undo-tree-id24407 . -4) (undo-tree-id24408 . -4) (undo-tree-id24409 . -4) (undo-tree-id24410 . -4) (undo-tree-id24411 . -4) (undo-tree-id24412 . -4) (undo-tree-id24413 . -4) (undo-tree-id24414 . -4) (undo-tree-id24415 . -3) (undo-tree-id24416 . -3) (undo-tree-id24417 . -3) (undo-tree-id24418 . -3) (undo-tree-id24419 . -3) (undo-tree-id24420 . -3) (undo-tree-id24421 . -3) (undo-tree-id24422 . -3) (undo-tree-id24423 . -3) (undo-tree-id24424 . -3) (undo-tree-id24425 . -3) (undo-tree-id24426 . -3) (undo-tree-id24427 . -3) (undo-tree-id24428 . -3) (undo-tree-id24429 . -3) (undo-tree-id24430 . -3) (undo-tree-id24431 . -3) (undo-tree-id24432 . -3) (undo-tree-id24433 . -3) (undo-tree-id24434 . -3) (undo-tree-id24435 . -3) (undo-tree-id24436 . -3) (undo-tree-id24437 . -2) (undo-tree-id24438 . -2) (undo-tree-id24439 . -2) (undo-tree-id24440 . -2) (undo-tree-id24441 . -2) (undo-tree-id24442 . -2) (undo-tree-id24443 . -2) (undo-tree-id24444 . -2) (undo-tree-id24445 . -2) (undo-tree-id24446 . -2) (undo-tree-id24447 . -2) (undo-tree-id24448 . -2) (undo-tree-id24449 . -2) (undo-tree-id24450 . -2) (undo-tree-id24451 . -2) (undo-tree-id24452 . -2) (undo-tree-id24453 . -2) (undo-tree-id24454 . -2) (undo-tree-id24455 . -2) (undo-tree-id24456 . -2) (undo-tree-id24457 . -2) (undo-tree-id24458 . -2) (undo-tree-id24459 . -1) (undo-tree-id24460 . -1) (undo-tree-id24461 . -1) (undo-tree-id24462 . -1) (undo-tree-id24463 . -1) (undo-tree-id24464 . -1) (undo-tree-id24465 . -1) (undo-tree-id24466 . -1) (undo-tree-id24467 . -1) (undo-tree-id24468 . -1) (undo-tree-id24469 . -1) (undo-tree-id24470 . -1) (undo-tree-id24471 . -1) (undo-tree-id24472 . -1) (undo-tree-id24473 . -1) (undo-tree-id24474 . -1) (undo-tree-id24475 . -1) (undo-tree-id24476 . -1) (undo-tree-id24477 . -1) (undo-tree-id24478 . -1) (undo-tree-id24479 . -1) (undo-tree-id24480 . -1) (undo-tree-id24481 . -1) (undo-tree-id24482 . -1) (undo-tree-id24483 . -1) (undo-tree-id24484 . -1) (undo-tree-id24485 . -1) (undo-tree-id24486 . -1) (undo-tree-id24487 . -1) (undo-tree-id24488 . -1) (undo-tree-id24489 . -1) (undo-tree-id24490 . -1) (undo-tree-id24491 . -1) (undo-tree-id24492 . -1) (undo-tree-id24493 . -1) (undo-tree-id24494 . -1) (undo-tree-id24495 . -1) (undo-tree-id24496 . -1) (undo-tree-id24497 . -1) (undo-tree-id24498 . -1) (undo-tree-id24499 . -1) (undo-tree-id24500 . -1) (undo-tree-id24501 . -1) (undo-tree-id24502 . -1) (undo-tree-id24503 . -1) (undo-tree-id24504 . -1) (undo-tree-id24505 . -1) (undo-tree-id24506 . -1) (undo-tree-id24507 . -1) (undo-tree-id24508 . -1) (undo-tree-id24509 . -1) (undo-tree-id24510 . -1) (undo-tree-id24511 . -1) (undo-tree-id24512 . -1) (undo-tree-id24513 . -1) (undo-tree-id24514 . -1) (undo-tree-id24515 . -1) (undo-tree-id24516 . -1) (undo-tree-id24517 . -1) (undo-tree-id24518 . -1) (undo-tree-id24519 . -1) (undo-tree-id24520 . -1) (undo-tree-id24521 . -1) (undo-tree-id24522 . -1) (undo-tree-id24523 . -1) (undo-tree-id24524 . -1) (undo-tree-id24525 . -1) (undo-tree-id24526 . -1) (undo-tree-id24527 . -1) (undo-tree-id24528 . -1) (undo-tree-id24529 . -1) (undo-tree-id24530 . -1) (undo-tree-id24531 . -1) (undo-tree-id24532 . -1) (undo-tree-id24533 . -1) (undo-tree-id24534 . -1) (undo-tree-id24535 . -1) (undo-tree-id24536 . -1) (undo-tree-id24537 . -1) (undo-tree-id24538 . -1) (undo-tree-id24539 . -1) (undo-tree-id24540 . -1) (undo-tree-id24541 . -1) (undo-tree-id24542 . -1) (undo-tree-id24543 . -1) (undo-tree-id24544 . -1) 5464) nil (25772 50879 758367 308000) 0 nil])
([nil nil ((5466 . 5467) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5466)) nil (25772 50879 756163 819000) 0 nil])
([nil nil ((5522 . 5524) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -5522) (undo-tree-id25950 . -1) (undo-tree-id25951 . -1) (undo-tree-id25952 . -1) (undo-tree-id25953 . -1) (undo-tree-id25954 . -1) (undo-tree-id25955 . -1) (undo-tree-id25956 . -1) (undo-tree-id25957 . -1) (undo-tree-id25958 . -1) (undo-tree-id25959 . -1) (undo-tree-id25960 . -1) 5523 (5522 . 5523) (t 25772 50879 861603 342000)) nil (25772 50895 414521 282000) 0 nil])
([nil nil ((5996 . 5997) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5996) (undo-tree-id25931 . -1) (5917 . 5918) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5917) (undo-tree-id25932 . -1) (5841 . 5842) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5841) (undo-tree-id25933 . -1) (5763 . 5764) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5763) (undo-tree-id25934 . -1) (5683 . 5684) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5683) (undo-tree-id25935 . -1) (5603 . 5604) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5603) (undo-tree-id25936 . -1) (5523 . 5524) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5523) (undo-tree-id25937 . -1) (undo-tree-id25938 . -1) (undo-tree-id25939 . -1) (undo-tree-id25940 . -1) (undo-tree-id25941 . -1) (undo-tree-id25942 . -1) (undo-tree-id25943 . -1) (undo-tree-id25944 . -1) (undo-tree-id25945 . -1) (undo-tree-id25946 . -1) (undo-tree-id25947 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5524) (undo-tree-id25948 . 1) (undo-tree-id25949 . -1) 5523) nil (25772 50895 414385 773000) 0 nil])
([nil nil ((#("Moreover" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524) (undo-tree-id25967 . -7) (undo-tree-id25968 . 8) (undo-tree-id25969 . -8) (t 25772 50895 527313 208000)) nil (25772 50898 784379 838000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524) (undo-tree-id25964 . 1) (undo-tree-id25965 . -1) (undo-tree-id25966 . -1)) nil (25772 50898 784375 568000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524) (undo-tree-id25961 . 1) (undo-tree-id25962 . -1) (undo-tree-id25963 . -1)) nil (25772 50898 784369 526000) 0 nil])
([nil nil ((5524 . 5525) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524) (t 25772 50898 843668 16000)) nil (25772 50901 127688 277000) 0 nil])
([nil nil ((#("Since a SimpleRNN layer uses the tanh activation function by default, the predicted values must lie within the range –1 to 1. But what " 0 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 60 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 69 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 70 135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524) (undo-tree-id27029 . -134) (undo-tree-id27030 . 135) (undo-tree-id27031 . -134) (undo-tree-id27032 . -134) (undo-tree-id27033 . -135) (undo-tree-id27034 . -134) (undo-tree-id27035 . -96) (undo-tree-id27036 . -96) (undo-tree-id27037 . -96) (undo-tree-id27038 . -96) (undo-tree-id27039 . -96) (undo-tree-id27040 . -96) (undo-tree-id27041 . -96) (undo-tree-id27042 . -96) (undo-tree-id27043 . -96) (undo-tree-id27044 . -96) (undo-tree-id27045 . -96) (undo-tree-id27046 . -96) (undo-tree-id27047 . -96) (undo-tree-id27048 . -96) (undo-tree-id27049 . -96) (undo-tree-id27050 . -96) (undo-tree-id27051 . -96) (undo-tree-id27052 . -96) (undo-tree-id27053 . -96) (undo-tree-id27054 . -96) (undo-tree-id27055 . -96) (undo-tree-id27056 . -96) (undo-tree-id27057 . -96) (undo-tree-id27058 . -96) (undo-tree-id27059 . -96) (undo-tree-id27060 . -96) (undo-tree-id27061 . -96) (undo-tree-id27062 . -96) (undo-tree-id27063 . -96) (undo-tree-id27064 . -98) (undo-tree-id27065 . -98) (undo-tree-id27066 . -98) (undo-tree-id27067 . -98) (undo-tree-id27068 . -98) (undo-tree-id27069 . -98) (undo-tree-id27070 . -98) (undo-tree-id27071 . -98) (undo-tree-id27072 . -98) (undo-tree-id27073 . -98) (undo-tree-id27074 . -98) (undo-tree-id27075 . -98) (undo-tree-id27076 . -98) (undo-tree-id27077 . -98) (undo-tree-id27078 . -98) (undo-tree-id27079 . -98) (undo-tree-id27080 . -98) (undo-tree-id27081 . -98) (undo-tree-id27082 . -98) (undo-tree-id27083 . -98) (undo-tree-id27084 . -98) (undo-tree-id27085 . -98) (undo-tree-id27086 . -105) (undo-tree-id27087 . -105) (undo-tree-id27088 . -105) (undo-tree-id27089 . -105) (undo-tree-id27090 . -105) (undo-tree-id27091 . -105) (undo-tree-id27092 . -105) (undo-tree-id27093 . -105) (undo-tree-id27094 . -109) (undo-tree-id27095 . -109) (undo-tree-id27096 . -109) (undo-tree-id27097 . -109) (undo-tree-id27098 . -109) (undo-tree-id27099 . -109) (undo-tree-id27100 . -109) (undo-tree-id27101 . -109) (undo-tree-id27102 . -115) (undo-tree-id27103 . -115) (undo-tree-id27104 . -115) (undo-tree-id27105 . -115) (undo-tree-id27106 . -115) (undo-tree-id27107 . -115) (undo-tree-id27108 . -115) (undo-tree-id27109 . -115) (undo-tree-id27110 . -117) (undo-tree-id27111 . -117) (undo-tree-id27112 . -117) (undo-tree-id27113 . -117) (undo-tree-id27114 . -117) (undo-tree-id27115 . -117) (undo-tree-id27116 . -117) (undo-tree-id27117 . -117) (undo-tree-id27118 . -118) (undo-tree-id27119 . -118) (undo-tree-id27120 . -118) (undo-tree-id27121 . -118) (undo-tree-id27122 . -118) (undo-tree-id27123 . -118) (undo-tree-id27124 . -118) (undo-tree-id27125 . -118) (undo-tree-id27126 . -121) (undo-tree-id27127 . -121) (undo-tree-id27128 . -121) (undo-tree-id27129 . -121) (undo-tree-id27130 . -121) (undo-tree-id27131 . -121) (undo-tree-id27132 . -121) (undo-tree-id27133 . -121) (undo-tree-id27134 . -123) (undo-tree-id27135 . -123) (undo-tree-id27136 . -123) (undo-tree-id27137 . -123) (undo-tree-id27138 . -123) (undo-tree-id27139 . -123) (undo-tree-id27140 . -123) (undo-tree-id27141 . -123) (undo-tree-id27142 . -124) (undo-tree-id27143 . -124) (undo-tree-id27144 . -124) (undo-tree-id27145 . -124) (undo-tree-id27146 . -124) (undo-tree-id27147 . -124) (undo-tree-id27148 . -124) (undo-tree-id27149 . -124) (undo-tree-id27150 . -128) (undo-tree-id27151 . -128) (undo-tree-id27152 . -128) (undo-tree-id27153 . -128) (undo-tree-id27154 . -128) (undo-tree-id27155 . -128) (undo-tree-id27156 . -128) (undo-tree-id27157 . -128) (undo-tree-id27158 . -133) (undo-tree-id27159 . -133) (undo-tree-id27160 . -133) (undo-tree-id27161 . -133) (undo-tree-id27162 . -133) (undo-tree-id27163 . -133) (undo-tree-id27164 . -133) (undo-tree-id27165 . -133) (undo-tree-id27166 . -133) (undo-tree-id27167 . -133) (undo-tree-id27168 . -133) (undo-tree-id27169 . -133) (undo-tree-id27170 . -133) (undo-tree-id27171 . -133) (undo-tree-id27172 . -133) (undo-tree-id27173 . -133) (undo-tree-id27174 . -133) (undo-tree-id27175 . -133) (undo-tree-id27176 . -133) (undo-tree-id27177 . -133) (undo-tree-id27178 . -133) (undo-tree-id27179 . -133) (undo-tree-id27180 . -135) (undo-tree-id27181 . -135) (undo-tree-id27182 . -135) (undo-tree-id27183 . -135) (undo-tree-id27184 . -135) (undo-tree-id27185 . -135) (undo-tree-id27186 . -135) (undo-tree-id27187 . -135) (undo-tree-id27188 . -135) (undo-tree-id27189 . -135) (undo-tree-id27190 . -135) (undo-tree-id27191 . -135) (undo-tree-id27192 . -135) (undo-tree-id27193 . -135) (undo-tree-id27194 . -135) (undo-tree-id27195 . -135) (undo-tree-id27196 . -135) (undo-tree-id27197 . -135) (undo-tree-id27198 . -135) (undo-tree-id27199 . -135) (undo-tree-id27200 . -135) (undo-tree-id27201 . -135) (undo-tree-id27202 . -134) (undo-tree-id27203 . -134) (undo-tree-id27204 . -134) (undo-tree-id27205 . -134) (undo-tree-id27206 . -134) (undo-tree-id27207 . -134) (undo-tree-id27208 . -134) (undo-tree-id27209 . -134) (undo-tree-id27210 . -134) (undo-tree-id27211 . -134) (undo-tree-id27212 . -134) (undo-tree-id27213 . -134) (undo-tree-id27214 . -134) (undo-tree-id27215 . -134) (undo-tree-id27216 . -134) (undo-tree-id27217 . -134) (undo-tree-id27218 . -134) (undo-tree-id27219 . -134) (undo-tree-id27220 . -134) (undo-tree-id27221 . -134) (undo-tree-id27222 . -134) (undo-tree-id27223 . -134) (undo-tree-id27224 . -134) (undo-tree-id27225 . -135) 5658 (t 25772 50901 187917 340000)) nil (25772 50943 597451 25000) 0 nil])
([nil nil ((5524 . 5525) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524)) nil (25772 50943 597335 880000) 0 nil])
([nil nil ((5525 . 5530) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5525) (undo-tree-id26971 . -1) (undo-tree-id26972 . -1) (undo-tree-id26973 . -1) (undo-tree-id26974 . -1) (undo-tree-id26975 . -1) (undo-tree-id26976 . -1) (undo-tree-id26977 . -1) (undo-tree-id26978 . -1) (undo-tree-id26979 . -1) (undo-tree-id26980 . -1) (undo-tree-id26981 . -1) (undo-tree-id26982 . -1) (undo-tree-id26983 . -1) (undo-tree-id26984 . -1) (undo-tree-id26985 . -1) (undo-tree-id26986 . -1) (undo-tree-id26987 . -1) 5526 (5524 . 5526) (#("I" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5524) (undo-tree-id26988 . 1) (undo-tree-id26989 . -1) (undo-tree-id26990 . -1) (undo-tree-id26991 . -1) (undo-tree-id26992 . -1) (undo-tree-id26993 . -1) (undo-tree-id26994 . -1) (undo-tree-id26995 . -1) (undo-tree-id26996 . -1) (undo-tree-id26997 . -1) (undo-tree-id26998 . -1) (undo-tree-id26999 . -1) (undo-tree-id27000 . -1) (undo-tree-id27001 . -1) (undo-tree-id27002 . -1) (undo-tree-id27003 . -1) (undo-tree-id27004 . -1) (undo-tree-id27005 . -1) (undo-tree-id27006 . -1) (undo-tree-id27007 . -1) (undo-tree-id27008 . -1) (undo-tree-id27009 . -1) (undo-tree-id27010 . -1) (undo-tree-id27011 . -1) (undo-tree-id27012 . -1) (undo-tree-id27013 . -1) (undo-tree-id27014 . -1) (undo-tree-id27015 . -1) (undo-tree-id27016 . -1) (undo-tree-id27017 . -1) (undo-tree-id27018 . -1) (undo-tree-id27019 . -1) (undo-tree-id27020 . -1) (undo-tree-id27021 . -1) (undo-tree-id27022 . -1) (undo-tree-id27023 . -1) (undo-tree-id27024 . -1) (undo-tree-id27025 . -1) (undo-tree-id27026 . -1) (undo-tree-id27027 . -1) (undo-tree-id27028 . -1)) nil (25772 50943 597332 535000) 0 nil])
([nil nil ((5522 . 5865) (#("- For both these reasons, it might be preferable to replace the output layer with a Dense layer: it would run slightly faster, the accuracy would be roughly the same, and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove
- What if you want to use another activation function?" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 48 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 48 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 49 126 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 126 127 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 127 202 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 202 203 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 203 281 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 281 282 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 282 288 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 288 289 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 289 290 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 290 297 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 297 310 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 310 311 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 311 343 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5522) (undo-tree-id25970 . -291) (undo-tree-id25971 . -291) (undo-tree-id25972 . 46) (undo-tree-id25973 . -291) (undo-tree-id25974 . -291) (undo-tree-id25975 . 46) (undo-tree-id25976 . -291) (undo-tree-id25977 . -343) (undo-tree-id25978 . -291) (undo-tree-id25979 . -291) (undo-tree-id25980 . -291) (undo-tree-id25981 . -291) (undo-tree-id25982 . -291) (undo-tree-id25983 . -291) (undo-tree-id25984 . -291) (undo-tree-id25985 . -291) (undo-tree-id25986 . -291) (undo-tree-id25987 . -291) (undo-tree-id25988 . -291) (undo-tree-id25989 . -291) (undo-tree-id25990 . -291) (undo-tree-id25991 . -291) (undo-tree-id25992 . -291) (undo-tree-id25993 . -291) (undo-tree-id25994 . -291) (undo-tree-id25995 . -291) (undo-tree-id25996 . -291) (undo-tree-id25997 . -291) (undo-tree-id25998 . -291) (undo-tree-id25999 . -291) (undo-tree-id26000 . -291) (undo-tree-id26001 . -291) (undo-tree-id26002 . -291) (undo-tree-id26003 . -291) (undo-tree-id26004 . -291) (undo-tree-id26005 . -291) (undo-tree-id26006 . -291) (undo-tree-id26007 . -291) (undo-tree-id26008 . -291) (undo-tree-id26009 . -291) (undo-tree-id26010 . -291) (undo-tree-id26011 . -291) (undo-tree-id26012 . -291) (undo-tree-id26013 . -291) (undo-tree-id26014 . -291) (undo-tree-id26015 . -291) (undo-tree-id26016 . -291) (undo-tree-id26017 . -291) (undo-tree-id26018 . -291) (undo-tree-id26019 . -291) (undo-tree-id26020 . -291) (undo-tree-id26021 . -291) (undo-tree-id26022 . -291) (undo-tree-id26023 . -291) (undo-tree-id26024 . -291) (undo-tree-id26025 . -291) (undo-tree-id26026 . -291) (undo-tree-id26027 . -291) (undo-tree-id26028 . -291) (undo-tree-id26029 . -291) (undo-tree-id26030 . -291) (undo-tree-id26031 . -291) (undo-tree-id26032 . -291) (undo-tree-id26033 . -291) (undo-tree-id26034 . -291) (undo-tree-id26035 . -291) (undo-tree-id26036 . -291) (undo-tree-id26037 . -291) (undo-tree-id26038 . -291) (undo-tree-id26039 . -291) (undo-tree-id26040 . -291) (undo-tree-id26041 . -291) (undo-tree-id26042 . -291) (undo-tree-id26043 . -291) (undo-tree-id26044 . -291) (undo-tree-id26045 . -291) (undo-tree-id26046 . -291) (undo-tree-id26047 . -291) (undo-tree-id26048 . -291) (undo-tree-id26049 . -291) (undo-tree-id26050 . -291) (undo-tree-id26051 . -291) (undo-tree-id26052 . -291) (undo-tree-id26053 . -291) (undo-tree-id26054 . -291) (undo-tree-id26055 . -291) (undo-tree-id26056 . -291) (undo-tree-id26057 . -291) (undo-tree-id26058 . -291) (undo-tree-id26059 . -291) (undo-tree-id26060 . -291) (undo-tree-id26061 . -291) (undo-tree-id26062 . -291) (undo-tree-id26063 . -291) (undo-tree-id26064 . -291) (undo-tree-id26065 . -291) (undo-tree-id26066 . -291) (undo-tree-id26067 . -291) (undo-tree-id26068 . -291) (undo-tree-id26069 . -291) (undo-tree-id26070 . -291) (undo-tree-id26071 . -291) (undo-tree-id26072 . -291) (undo-tree-id26073 . -291) (undo-tree-id26074 . -291) (undo-tree-id26075 . -291) (undo-tree-id26076 . -291) (undo-tree-id26077 . -291) (undo-tree-id26078 . -291) (undo-tree-id26079 . -291) (undo-tree-id26080 . -291) (undo-tree-id26081 . -291) (undo-tree-id26082 . -291) (undo-tree-id26083 . -291) (undo-tree-id26084 . -291) (undo-tree-id26085 . -291) (undo-tree-id26086 . -291) (undo-tree-id26087 . -291) (undo-tree-id26088 . -291) (undo-tree-id26089 . -291) (undo-tree-id26090 . -291) (undo-tree-id26091 . -291) (undo-tree-id26092 . -291) (undo-tree-id26093 . -291) (undo-tree-id26094 . -291) (undo-tree-id26095 . -291) (undo-tree-id26096 . -291) (undo-tree-id26097 . -291) (undo-tree-id26098 . -291) (undo-tree-id26099 . -291) (undo-tree-id26100 . -291) (undo-tree-id26101 . -291) (undo-tree-id26102 . -291) (undo-tree-id26103 . -291) (undo-tree-id26104 . -291) (undo-tree-id26105 . -291) (undo-tree-id26106 . -291) (undo-tree-id26107 . -291) (undo-tree-id26108 . -291) (undo-tree-id26109 . -291) (undo-tree-id26110 . -291) (undo-tree-id26111 . -291) (undo-tree-id26112 . -291) (undo-tree-id26113 . -291) (undo-tree-id26114 . -291) (undo-tree-id26115 . -291) (undo-tree-id26116 . -291) (undo-tree-id26117 . -291) (undo-tree-id26118 . -291) (undo-tree-id26119 . -291) (undo-tree-id26120 . -291) (undo-tree-id26121 . -291) (undo-tree-id26122 . -291) (undo-tree-id26123 . -291) (undo-tree-id26124 . -291) (undo-tree-id26125 . -291) (undo-tree-id26126 . -291) (undo-tree-id26127 . -291) (undo-tree-id26128 . -291) (undo-tree-id26129 . -291) (undo-tree-id26130 . -291) (undo-tree-id26131 . -291) (undo-tree-id26132 . -291) (undo-tree-id26133 . -291) (undo-tree-id26134 . -291) (undo-tree-id26135 . -291) (undo-tree-id26136 . -291) (undo-tree-id26137 . -291) (undo-tree-id26138 . -291) (undo-tree-id26139 . -291) (undo-tree-id26140 . -291) (undo-tree-id26141 . -291) (undo-tree-id26142 . -291) (undo-tree-id26143 . -291) (undo-tree-id26144 . -291) (undo-tree-id26145 . -291) (undo-tree-id26146 . -291) (undo-tree-id26147 . -291) (undo-tree-id26148 . -291) (undo-tree-id26149 . -291) (undo-tree-id26150 . -291) (undo-tree-id26151 . -291) (undo-tree-id26152 . -291) (undo-tree-id26153 . -291) (undo-tree-id26154 . -291) (undo-tree-id26155 . -291) (undo-tree-id26156 . -291) (undo-tree-id26157 . -291) (undo-tree-id26158 . -291) (undo-tree-id26159 . -291) (undo-tree-id26160 . -291) (undo-tree-id26161 . -291) (undo-tree-id26162 . -291) (undo-tree-id26163 . -291) (undo-tree-id26164 . -291) (undo-tree-id26165 . -291) (undo-tree-id26166 . -291) (undo-tree-id26167 . -291) (undo-tree-id26168 . -291) (undo-tree-id26169 . -291) (undo-tree-id26170 . -291) (undo-tree-id26171 . -291) (undo-tree-id26172 . -291) (undo-tree-id26173 . -291) (undo-tree-id26174 . -291) (undo-tree-id26175 . -291) (undo-tree-id26176 . -291) (undo-tree-id26177 . -291) (undo-tree-id26178 . -291) (undo-tree-id26179 . -291) (undo-tree-id26180 . -291) (undo-tree-id26181 . -291) (undo-tree-id26182 . -291) (undo-tree-id26183 . -291) (undo-tree-id26184 . -291) (undo-tree-id26185 . -291) (undo-tree-id26186 . -291) (undo-tree-id26187 . -291) (undo-tree-id26188 . -291) (undo-tree-id26189 . -291) (undo-tree-id26190 . -291) (undo-tree-id26191 . -291) (undo-tree-id26192 . -291) (undo-tree-id26193 . -291) (undo-tree-id26194 . -291) (undo-tree-id26195 . -291) (undo-tree-id26196 . -291) (undo-tree-id26197 . -291) (undo-tree-id26198 . -291) (undo-tree-id26199 . -291) (undo-tree-id26200 . -291) (undo-tree-id26201 . -291) (undo-tree-id26202 . -291) (undo-tree-id26203 . -291) (undo-tree-id26204 . -291) (undo-tree-id26205 . -291) (undo-tree-id26206 . -291) (undo-tree-id26207 . -291) (undo-tree-id26208 . -291) (undo-tree-id26209 . -291) (undo-tree-id26210 . -291) (undo-tree-id26211 . -291) (undo-tree-id26212 . -291) (undo-tree-id26213 . -291) (undo-tree-id26214 . -291) (undo-tree-id26215 . -291) (undo-tree-id26216 . -291) (undo-tree-id26217 . -291) (undo-tree-id26218 . -291) (undo-tree-id26219 . -291) (undo-tree-id26220 . -291) (undo-tree-id26221 . -291) (undo-tree-id26222 . -291) (undo-tree-id26223 . -291) (undo-tree-id26224 . -291) (undo-tree-id26225 . -291) (undo-tree-id26226 . -291) (undo-tree-id26227 . -291) (undo-tree-id26228 . -291) (undo-tree-id26229 . -291) (undo-tree-id26230 . -291) (undo-tree-id26231 . -291) (undo-tree-id26232 . -291) (undo-tree-id26233 . -291) (undo-tree-id26234 . -291) (undo-tree-id26235 . -291) (undo-tree-id26236 . -291) (undo-tree-id26237 . -291) (undo-tree-id26238 . -291) (undo-tree-id26239 . -291) (undo-tree-id26240 . -291) (undo-tree-id26241 . -291) (undo-tree-id26242 . -291) (undo-tree-id26243 . -291) (undo-tree-id26244 . -291) (undo-tree-id26245 . -291) (undo-tree-id26246 . -291) (undo-tree-id26247 . -291) (undo-tree-id26248 . -291) (undo-tree-id26249 . -291) (undo-tree-id26250 . -291) (undo-tree-id26251 . -291) (undo-tree-id26252 . -291) (undo-tree-id26253 . -291) (undo-tree-id26254 . -291) (undo-tree-id26255 . -291) (undo-tree-id26256 . -291) (undo-tree-id26257 . -291) (undo-tree-id26258 . -291) (undo-tree-id26259 . -291) (undo-tree-id26260 . -291) (undo-tree-id26261 . -291) (undo-tree-id26262 . -291) (undo-tree-id26263 . -291) (undo-tree-id26264 . -291) (undo-tree-id26265 . -291) (undo-tree-id26266 . -291) (undo-tree-id26267 . -291) (undo-tree-id26268 . -291) (undo-tree-id26269 . -291) (undo-tree-id26270 . -291) (undo-tree-id26271 . -291) (undo-tree-id26272 . -291) (undo-tree-id26273 . -291) (undo-tree-id26274 . -291) (undo-tree-id26275 . -291) (undo-tree-id26276 . -291) (undo-tree-id26277 . -291) (undo-tree-id26278 . -291) (undo-tree-id26279 . -291) (undo-tree-id26280 . -291) (undo-tree-id26281 . -291) (undo-tree-id26282 . -291) (undo-tree-id26283 . -291) (undo-tree-id26284 . -291) (undo-tree-id26285 . -291) (undo-tree-id26286 . -291) (undo-tree-id26287 . -291) (undo-tree-id26288 . -291) (undo-tree-id26289 . -291) (undo-tree-id26290 . -291) (undo-tree-id26291 . -291) (undo-tree-id26292 . -291) (undo-tree-id26293 . -291) (undo-tree-id26294 . -291) (undo-tree-id26295 . -291) (undo-tree-id26296 . -291) (undo-tree-id26297 . -291) (undo-tree-id26298 . -291) (undo-tree-id26299 . -291) (undo-tree-id26300 . -291) (undo-tree-id26301 . -291) (undo-tree-id26302 . -291) (undo-tree-id26303 . -291) (undo-tree-id26304 . -291) (undo-tree-id26305 . -291) (undo-tree-id26306 . -291) (undo-tree-id26307 . -291) (undo-tree-id26308 . -291) (undo-tree-id26309 . -291) (undo-tree-id26310 . -291) (undo-tree-id26311 . -291) (undo-tree-id26312 . -291) (undo-tree-id26313 . -291) (undo-tree-id26314 . -291) (undo-tree-id26315 . -291) (undo-tree-id26316 . -291) (undo-tree-id26317 . -291) (undo-tree-id26318 . -291) (undo-tree-id26319 . -291) (undo-tree-id26320 . -291) (undo-tree-id26321 . -291) (undo-tree-id26322 . -291) (undo-tree-id26323 . -291) (undo-tree-id26324 . -291) (undo-tree-id26325 . -291) (undo-tree-id26326 . -291) (undo-tree-id26327 . -291) (undo-tree-id26328 . -291) (undo-tree-id26329 . -291) (undo-tree-id26330 . -291) (undo-tree-id26331 . -291) (undo-tree-id26332 . -291) (undo-tree-id26333 . -291) (undo-tree-id26334 . -291) (undo-tree-id26335 . -291) (undo-tree-id26336 . -291) (undo-tree-id26337 . -291) (undo-tree-id26338 . -291) (undo-tree-id26339 . -291) (undo-tree-id26340 . -291) (undo-tree-id26341 . -291) (undo-tree-id26342 . -291) (undo-tree-id26343 . -291) (undo-tree-id26344 . -291) (undo-tree-id26345 . -291) (undo-tree-id26346 . -291) (undo-tree-id26347 . -291) (undo-tree-id26348 . -291) (undo-tree-id26349 . -291) (undo-tree-id26350 . -291) (undo-tree-id26351 . -291) (undo-tree-id26352 . -291) (undo-tree-id26353 . -291) (undo-tree-id26354 . -291) (undo-tree-id26355 . -291) (undo-tree-id26356 . -291) (undo-tree-id26357 . -291) (undo-tree-id26358 . -291) (undo-tree-id26359 . -291) (undo-tree-id26360 . -291) (undo-tree-id26361 . -291) (undo-tree-id26362 . -291) (undo-tree-id26363 . -291) (undo-tree-id26364 . -291) (undo-tree-id26365 . -291) (undo-tree-id26366 . -291) (undo-tree-id26367 . -291) (undo-tree-id26368 . -291) (undo-tree-id26369 . -291) (undo-tree-id26370 . -291) (undo-tree-id26371 . -291) (undo-tree-id26372 . -291) (undo-tree-id26373 . -291) (undo-tree-id26374 . -291) (undo-tree-id26375 . -291) (undo-tree-id26376 . -291) (undo-tree-id26377 . -291) (undo-tree-id26378 . -291) (undo-tree-id26379 . -291) (undo-tree-id26380 . -291) (undo-tree-id26381 . -301) (undo-tree-id26382 . -301) (undo-tree-id26383 . -301) (undo-tree-id26384 . -301) (undo-tree-id26385 . -301) (undo-tree-id26386 . -301) (undo-tree-id26387 . -301) (undo-tree-id26388 . -301) (undo-tree-id26389 . -301) (undo-tree-id26390 . -301) (undo-tree-id26391 . -301) (undo-tree-id26392 . -301) (undo-tree-id26393 . -301) (undo-tree-id26394 . -301) (undo-tree-id26395 . -301) (undo-tree-id26396 . -306) (undo-tree-id26397 . -306) (undo-tree-id26398 . -306) (undo-tree-id26399 . -306) (undo-tree-id26400 . -306) (undo-tree-id26401 . -306) (undo-tree-id26402 . -306) (undo-tree-id26403 . -306) (undo-tree-id26404 . -306) (undo-tree-id26405 . -306) (undo-tree-id26406 . -306) (undo-tree-id26407 . -306) (undo-tree-id26408 . -306) (undo-tree-id26409 . -306) (undo-tree-id26410 . -306) (undo-tree-id26411 . -306) (undo-tree-id26412 . -306) (undo-tree-id26413 . -306) (undo-tree-id26414 . -306) (undo-tree-id26415 . -306) (undo-tree-id26416 . -306) (undo-tree-id26417 . -306) (undo-tree-id26418 . -309) (undo-tree-id26419 . -309) (undo-tree-id26420 . -309) (undo-tree-id26421 . -309) (undo-tree-id26422 . -309) (undo-tree-id26423 . -309) (undo-tree-id26424 . -309) (undo-tree-id26425 . -309) (undo-tree-id26426 . -309) (undo-tree-id26427 . -309) (undo-tree-id26428 . -309) (undo-tree-id26429 . -309) (undo-tree-id26430 . -309) (undo-tree-id26431 . -309) (undo-tree-id26432 . -309) (undo-tree-id26433 . -313) (undo-tree-id26434 . -313) (undo-tree-id26435 . -313) (undo-tree-id26436 . -313) (undo-tree-id26437 . -313) (undo-tree-id26438 . -313) (undo-tree-id26439 . -313) (undo-tree-id26440 . -313) (undo-tree-id26441 . -313) (undo-tree-id26442 . -313) (undo-tree-id26443 . -313) (undo-tree-id26444 . -313) (undo-tree-id26445 . -313) (undo-tree-id26446 . -313) (undo-tree-id26447 . -313) (undo-tree-id26448 . -311) (undo-tree-id26449 . -311) (undo-tree-id26450 . -311) (undo-tree-id26451 . -311) (undo-tree-id26452 . -311) (undo-tree-id26453 . -311) (undo-tree-id26454 . -311) (undo-tree-id26455 . -311) (undo-tree-id26456 . -311) (undo-tree-id26457 . -311) (undo-tree-id26458 . -311) (undo-tree-id26459 . -311) (undo-tree-id26460 . -311) (undo-tree-id26461 . -311) (undo-tree-id26462 . -311) (undo-tree-id26463 . -308) (undo-tree-id26464 . -308) (undo-tree-id26465 . -308) (undo-tree-id26466 . -308) (undo-tree-id26467 . -308) (undo-tree-id26468 . -308) (undo-tree-id26469 . -308) (undo-tree-id26470 . -308) (undo-tree-id26471 . -308) (undo-tree-id26472 . -308) (undo-tree-id26473 . -308) (undo-tree-id26474 . -308) (undo-tree-id26475 . -308) (undo-tree-id26476 . -308) (undo-tree-id26477 . -308) (undo-tree-id26478 . -303) (undo-tree-id26479 . -303) (undo-tree-id26480 . -303) (undo-tree-id26481 . -303) (undo-tree-id26482 . -303) (undo-tree-id26483 . -303) (undo-tree-id26484 . -303) (undo-tree-id26485 . -303) (undo-tree-id26486 . -303) (undo-tree-id26487 . -303) (undo-tree-id26488 . -303) (undo-tree-id26489 . -303) (undo-tree-id26490 . -303) (undo-tree-id26491 . -303) (undo-tree-id26492 . -303) (undo-tree-id26493 . -299) (undo-tree-id26494 . -299) (undo-tree-id26495 . -299) (undo-tree-id26496 . -299) (undo-tree-id26497 . -299) (undo-tree-id26498 . -299) (undo-tree-id26499 . -299) (undo-tree-id26500 . -299) (undo-tree-id26501 . -299) (undo-tree-id26502 . -299) (undo-tree-id26503 . -299) (undo-tree-id26504 . -299) (undo-tree-id26505 . -299) (undo-tree-id26506 . -299) (undo-tree-id26507 . -299) (undo-tree-id26508 . -291) (undo-tree-id26509 . -291) (undo-tree-id26510 . -291) (undo-tree-id26511 . -291) (undo-tree-id26512 . -291) (undo-tree-id26513 . -291) (undo-tree-id26514 . -291) (undo-tree-id26515 . -291) (undo-tree-id26516 . -291) (undo-tree-id26517 . -291) (undo-tree-id26518 . -291) (undo-tree-id26519 . -291) (undo-tree-id26520 . -291) (undo-tree-id26521 . -291) (undo-tree-id26522 . -291) (undo-tree-id26523 . -291) (undo-tree-id26524 . -291) (undo-tree-id26525 . -291) (undo-tree-id26526 . -291) (undo-tree-id26527 . -291) (undo-tree-id26528 . -291) (undo-tree-id26529 . -291) (undo-tree-id26530 . -291) (undo-tree-id26531 . -291) (undo-tree-id26532 . -291) (undo-tree-id26533 . -291) (undo-tree-id26534 . -291) (undo-tree-id26535 . -291) (undo-tree-id26536 . -291) (undo-tree-id26537 . -291) (undo-tree-id26538 . -291) (undo-tree-id26539 . -291) (undo-tree-id26540 . -292) (undo-tree-id26541 . -292) (undo-tree-id26542 . -292) (undo-tree-id26543 . -292) (undo-tree-id26544 . -292) (undo-tree-id26545 . -292) (undo-tree-id26546 . -292) (undo-tree-id26547 . -292) (undo-tree-id26548 . -292) (undo-tree-id26549 . -292) (undo-tree-id26550 . -292) (undo-tree-id26551 . -292) (undo-tree-id26552 . -292) (undo-tree-id26553 . -292) (undo-tree-id26554 . -292) (undo-tree-id26555 . -292) (undo-tree-id26556 . -292) (undo-tree-id26557 . -292) (undo-tree-id26558 . -292) (undo-tree-id26559 . -292) (undo-tree-id26560 . -292) (undo-tree-id26561 . -292) (undo-tree-id26562 . -292) (undo-tree-id26563 . -292) (undo-tree-id26564 . -292) (undo-tree-id26565 . -292) (undo-tree-id26566 . -292) (undo-tree-id26567 . -292) (undo-tree-id26568 . -292) (undo-tree-id26569 . -292) (undo-tree-id26570 . -292) (undo-tree-id26571 . -292) (undo-tree-id26572 . -292) (undo-tree-id26573 . -292) (undo-tree-id26574 . -292) (undo-tree-id26575 . -292) (undo-tree-id26576 . -292) (undo-tree-id26577 . -292) (undo-tree-id26578 . -292) (undo-tree-id26579 . -292) (undo-tree-id26580 . -292) (undo-tree-id26581 . -292) (undo-tree-id26582 . -292) (undo-tree-id26583 . -292) (undo-tree-id26584 . -292) (undo-tree-id26585 . -292) (undo-tree-id26586 . -293) (undo-tree-id26587 . -293) (undo-tree-id26588 . -293) (undo-tree-id26589 . -293) (undo-tree-id26590 . -293) (undo-tree-id26591 . -293) (undo-tree-id26592 . -293) (undo-tree-id26593 . -293) (undo-tree-id26594 . -293) (undo-tree-id26595 . -293) (undo-tree-id26596 . -293) (undo-tree-id26597 . -293) (undo-tree-id26598 . -293) (undo-tree-id26599 . -293) (undo-tree-id26600 . -293) (undo-tree-id26601 . -294) (undo-tree-id26602 . -294) (undo-tree-id26603 . -294) (undo-tree-id26604 . -294) (undo-tree-id26605 . -294) (undo-tree-id26606 . -294) (undo-tree-id26607 . -294) (undo-tree-id26608 . -294) (undo-tree-id26609 . -294) (undo-tree-id26610 . -294) (undo-tree-id26611 . -294) (undo-tree-id26612 . -294) (undo-tree-id26613 . -294) (undo-tree-id26614 . -294) (undo-tree-id26615 . -294) (undo-tree-id26616 . -295) (undo-tree-id26617 . -295) (undo-tree-id26618 . -295) (undo-tree-id26619 . -295) (undo-tree-id26620 . -295) (undo-tree-id26621 . -295) (undo-tree-id26622 . -295) (undo-tree-id26623 . -295) (undo-tree-id26624 . -295) (undo-tree-id26625 . -295) (undo-tree-id26626 . -295) (undo-tree-id26627 . -295) (undo-tree-id26628 . -295) (undo-tree-id26629 . -295) (undo-tree-id26630 . -295) (undo-tree-id26631 . -296) (undo-tree-id26632 . -296) (undo-tree-id26633 . -296) (undo-tree-id26634 . -296) (undo-tree-id26635 . -296) (undo-tree-id26636 . -296) (undo-tree-id26637 . -296) (undo-tree-id26638 . -296) (undo-tree-id26639 . -296) (undo-tree-id26640 . -296) (undo-tree-id26641 . -296) (undo-tree-id26642 . -296) (undo-tree-id26643 . -296) (undo-tree-id26644 . -296) (undo-tree-id26645 . -296) (undo-tree-id26646 . -296) (undo-tree-id26647 . -297) (undo-tree-id26648 . -297) (undo-tree-id26649 . -297) (undo-tree-id26650 . -297) (undo-tree-id26651 . -297) (undo-tree-id26652 . -297) (undo-tree-id26653 . -297) (undo-tree-id26654 . -297) (undo-tree-id26655 . -297) (undo-tree-id26656 . -297) (undo-tree-id26657 . -297) (undo-tree-id26658 . -297) (undo-tree-id26659 . -297) (undo-tree-id26660 . -297) (undo-tree-id26661 . -297) (undo-tree-id26662 . -296) (undo-tree-id26663 . -296) (undo-tree-id26664 . -296) (undo-tree-id26665 . -296) (undo-tree-id26666 . -296) (undo-tree-id26667 . -296) (undo-tree-id26668 . -296) (undo-tree-id26669 . -296) (undo-tree-id26670 . -296) (undo-tree-id26671 . -296) (undo-tree-id26672 . -296) (undo-tree-id26673 . -296) (undo-tree-id26674 . -296) (undo-tree-id26675 . -296) (undo-tree-id26676 . -296) (undo-tree-id26677 . -296) (undo-tree-id26678 . -296) (undo-tree-id26679 . -296) (undo-tree-id26680 . -296) (undo-tree-id26681 . -296) (undo-tree-id26682 . -296) (undo-tree-id26683 . -296) (undo-tree-id26684 . -296) (undo-tree-id26685 . -296) (undo-tree-id26686 . -296) (undo-tree-id26687 . -296) (undo-tree-id26688 . -297) (undo-tree-id26689 . -297) (undo-tree-id26690 . -297) (undo-tree-id26691 . -297) (undo-tree-id26692 . -297) (undo-tree-id26693 . -297) (undo-tree-id26694 . -297) (undo-tree-id26695 . -297) (undo-tree-id26696 . -297) (undo-tree-id26697 . -297) (undo-tree-id26698 . -297) (undo-tree-id26699 . -297) (undo-tree-id26700 . -297) (undo-tree-id26701 . -297) (undo-tree-id26702 . -297) (undo-tree-id26703 . -301) (undo-tree-id26704 . -301) (undo-tree-id26705 . -301) (undo-tree-id26706 . -301) (undo-tree-id26707 . -301) (undo-tree-id26708 . -301) (undo-tree-id26709 . -301) (undo-tree-id26710 . -301) (undo-tree-id26711 . -306) (undo-tree-id26712 . -306) (undo-tree-id26713 . -306) (undo-tree-id26714 . -306) (undo-tree-id26715 . -306) (undo-tree-id26716 . -306) (undo-tree-id26717 . -306) (undo-tree-id26718 . -306) (undo-tree-id26719 . -309) (undo-tree-id26720 . -309) (undo-tree-id26721 . -309) (undo-tree-id26722 . -309) (undo-tree-id26723 . -309) (undo-tree-id26724 . -309) (undo-tree-id26725 . -309) (undo-tree-id26726 . -309) (undo-tree-id26727 . -313) (undo-tree-id26728 . -313) (undo-tree-id26729 . -313) (undo-tree-id26730 . -313) (undo-tree-id26731 . -313) (undo-tree-id26732 . -313) (undo-tree-id26733 . -313) (undo-tree-id26734 . -313) (undo-tree-id26735 . -321) (undo-tree-id26736 . -321) (undo-tree-id26737 . -321) (undo-tree-id26738 . -321) (undo-tree-id26739 . -321) (undo-tree-id26740 . -321) (undo-tree-id26741 . -321) (undo-tree-id26742 . -321) (undo-tree-id26743 . -332) (undo-tree-id26744 . -332) (undo-tree-id26745 . -332) (undo-tree-id26746 . -332) (undo-tree-id26747 . -332) (undo-tree-id26748 . -332) (undo-tree-id26749 . -332) (undo-tree-id26750 . -332) (undo-tree-id26751 . -341) (undo-tree-id26752 . -341) (undo-tree-id26753 . -341) (undo-tree-id26754 . -341) (undo-tree-id26755 . -341) (undo-tree-id26756 . -341) (undo-tree-id26757 . -341) (undo-tree-id26758 . -341) (undo-tree-id26759 . -342) (undo-tree-id26760 . -342) (undo-tree-id26761 . -342) (undo-tree-id26762 . -342) (undo-tree-id26763 . -342) (undo-tree-id26764 . -342) (undo-tree-id26765 . -342) (undo-tree-id26766 . -342) (undo-tree-id26767 . -343) (undo-tree-id26768 . -343) (undo-tree-id26769 . -343) (undo-tree-id26770 . -343) (undo-tree-id26771 . -343) (undo-tree-id26772 . -343) (undo-tree-id26773 . -343) (undo-tree-id26774 . -343) (undo-tree-id26775 . -343) (undo-tree-id26776 . -343) (undo-tree-id26777 . -343) (undo-tree-id26778 . -343) (undo-tree-id26779 . -343) (undo-tree-id26780 . -343) (undo-tree-id26781 . -343) (undo-tree-id26782 . -343) (undo-tree-id26783 . -343) (undo-tree-id26784 . -343) (undo-tree-id26785 . -343) (undo-tree-id26786 . -343) (undo-tree-id26787 . -343) (undo-tree-id26788 . -343) (undo-tree-id26789 . -343) (undo-tree-id26790 . -343) (undo-tree-id26791 . -343) (undo-tree-id26792 . -343) (undo-tree-id26793 . -343) (undo-tree-id26794 . -343) (undo-tree-id26795 . -343) (undo-tree-id26796 . -343) (undo-tree-id26797 . -343) (undo-tree-id26798 . -343) (undo-tree-id26799 . -343) (undo-tree-id26800 . -343) (undo-tree-id26801 . -343) (undo-tree-id26802 . -343) (undo-tree-id26803 . -343) (undo-tree-id26804 . -343) (undo-tree-id26805 . -343) (undo-tree-id26806 . -343) (undo-tree-id26807 . -343) (undo-tree-id26808 . -343) (undo-tree-id26809 . -343) (undo-tree-id26810 . -343) (undo-tree-id26811 . -343) (undo-tree-id26812 . -343) (undo-tree-id26813 . -343) (undo-tree-id26814 . -343) (undo-tree-id26815 . -343) (undo-tree-id26816 . -343) (undo-tree-id26817 . -343) (undo-tree-id26818 . -343) (undo-tree-id26819 . -343) (undo-tree-id26820 . -343) (undo-tree-id26821 . -343) (undo-tree-id26822 . -343) (undo-tree-id26823 . -343) (undo-tree-id26824 . -343) (undo-tree-id26825 . -343) (undo-tree-id26826 . -343) (undo-tree-id26827 . -343) (undo-tree-id26828 . -343) (undo-tree-id26829 . -343) (undo-tree-id26830 . -343) (undo-tree-id26831 . -343) (undo-tree-id26832 . -343) (undo-tree-id26833 . -343) (undo-tree-id26834 . -343) (undo-tree-id26835 . -343) (undo-tree-id26836 . -343) (undo-tree-id26837 . -343) (undo-tree-id26838 . -343) (undo-tree-id26839 . -343) (undo-tree-id26840 . -343) (undo-tree-id26841 . -343) (undo-tree-id26842 . -343) (undo-tree-id26843 . -343) (undo-tree-id26844 . -343) (undo-tree-id26845 . -343) (undo-tree-id26846 . -343) (undo-tree-id26847 . -343) (undo-tree-id26848 . -343) (undo-tree-id26849 . -343) (undo-tree-id26850 . -343) (undo-tree-id26851 . -343) (undo-tree-id26852 . -343) (undo-tree-id26853 . -343) (undo-tree-id26854 . -343) (undo-tree-id26855 . -343) (undo-tree-id26856 . -343) (undo-tree-id26857 . -343) (undo-tree-id26858 . -343) (undo-tree-id26859 . -343) (undo-tree-id26860 . -343) (undo-tree-id26861 . -343) (undo-tree-id26862 . -343) (undo-tree-id26863 . -343) (undo-tree-id26864 . -343) (undo-tree-id26865 . -343) (undo-tree-id26866 . -343) (undo-tree-id26867 . -343) (undo-tree-id26868 . -289) (5522 . 5811) (#(" For both these reasons, it might be preferable to replace the output layer with a Dense layer: it would run slightly faster, the accuracy would be roughly the same, and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove" 0 47 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 125 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 125 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 126 201 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 201 202 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 202 280 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 280 281 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 281 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5576) (undo-tree-id26869 . -1) (undo-tree-id26870 . -3) (undo-tree-id26871 . -3) (undo-tree-id26872 . -3) (undo-tree-id26873 . -3) (undo-tree-id26874 . -3) (undo-tree-id26875 . -3) (undo-tree-id26876 . -3) (undo-tree-id26877 . -3) (undo-tree-id26878 . -8) (undo-tree-id26879 . -8) (undo-tree-id26880 . -8) (undo-tree-id26881 . -8) (undo-tree-id26882 . -8) (undo-tree-id26883 . -8) (undo-tree-id26884 . -8) (undo-tree-id26885 . -8) (undo-tree-id26886 . -14) (undo-tree-id26887 . -14) (undo-tree-id26888 . -14) (undo-tree-id26889 . -14) (undo-tree-id26890 . -14) (undo-tree-id26891 . -14) (undo-tree-id26892 . -14) (undo-tree-id26893 . -14) (undo-tree-id26894 . -14) (undo-tree-id26895 . -14) (undo-tree-id26896 . -14) (undo-tree-id26897 . -14) (undo-tree-id26898 . -14) (undo-tree-id26899 . -14) (undo-tree-id26900 . -14) (undo-tree-id26901 . -10) (undo-tree-id26902 . -10) (undo-tree-id26903 . -10) (undo-tree-id26904 . -10) (undo-tree-id26905 . -10) (undo-tree-id26906 . -10) (undo-tree-id26907 . -10) (undo-tree-id26908 . -10) (undo-tree-id26909 . -10) (undo-tree-id26910 . -10) (undo-tree-id26911 . -10) (undo-tree-id26912 . -10) (undo-tree-id26913 . -10) (undo-tree-id26914 . -10) (undo-tree-id26915 . -10) (undo-tree-id26916 . -10) (undo-tree-id26917 . -10) (undo-tree-id26918 . -10) (undo-tree-id26919 . -10) (undo-tree-id26920 . -10) (undo-tree-id26921 . -10) (undo-tree-id26922 . -10) (undo-tree-id26923 . -5) (undo-tree-id26924 . -5) (undo-tree-id26925 . -5) (undo-tree-id26926 . -5) (undo-tree-id26927 . -5) (undo-tree-id26928 . -5) (undo-tree-id26929 . -5) (undo-tree-id26930 . -5) (undo-tree-id26931 . -5) (undo-tree-id26932 . -5) (undo-tree-id26933 . -5) (undo-tree-id26934 . -5) (undo-tree-id26935 . -5) (undo-tree-id26936 . -5) (undo-tree-id26937 . -5) (undo-tree-id26938 . -1) (undo-tree-id26939 . -1) (undo-tree-id26940 . -1) (undo-tree-id26941 . -1) (undo-tree-id26942 . -1) (undo-tree-id26943 . -1) (undo-tree-id26944 . -1) (undo-tree-id26945 . -1) (undo-tree-id26946 . -1) (undo-tree-id26947 . -1) (undo-tree-id26948 . -1) (undo-tree-id26949 . -1) (undo-tree-id26950 . -1) (undo-tree-id26951 . -1) (undo-tree-id26952 . -1) (undo-tree-id26953 . -1) (undo-tree-id26954 . -1) (undo-tree-id26955 . -1) (undo-tree-id26956 . -1) (undo-tree-id26957 . -1) (undo-tree-id26958 . -1) (undo-tree-id26959 . -1) (undo-tree-id26960 . -1) (undo-tree-id26961 . -1) (undo-tree-id26962 . -1) (undo-tree-id26963 . -1) (undo-tree-id26964 . -1) (undo-tree-id26965 . -1) (undo-tree-id26966 . -1) (undo-tree-id26967 . -1) (undo-tree-id26968 . -1) (undo-tree-id26969 . -1) (undo-tree-id26970 . -1) 5577) nil (25772 50943 597261 583000) 0 nil])
([nil nil ((#("For both these reasons, it might be preferable to" 0 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 46 47 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5579) (undo-tree-id28507 . -48) (undo-tree-id28508 . 49) (undo-tree-id28509 . -48) (undo-tree-id28510 . -48) (undo-tree-id28511 . -49) (undo-tree-id28512 . -48) (undo-tree-id28513 . -2) (undo-tree-id28514 . -2) (undo-tree-id28515 . -2) (undo-tree-id28516 . -2) (undo-tree-id28517 . -2) (undo-tree-id28518 . -2) (undo-tree-id28519 . -2) (undo-tree-id28520 . -2) (undo-tree-id28521 . -2) (undo-tree-id28522 . -2) (undo-tree-id28523 . -2) (undo-tree-id28524 . -2) (undo-tree-id28525 . -2) (undo-tree-id28526 . -2) (undo-tree-id28527 . -2) (undo-tree-id28528 . -2) (undo-tree-id28529 . -2) (undo-tree-id28530 . -2) (undo-tree-id28531 . -2) (undo-tree-id28532 . -2) (undo-tree-id28533 . -2) (undo-tree-id28534 . -2) (undo-tree-id28535 . -7) (undo-tree-id28536 . -7) (undo-tree-id28537 . -7) (undo-tree-id28538 . -7) (undo-tree-id28539 . -7) (undo-tree-id28540 . -7) (undo-tree-id28541 . -7) (undo-tree-id28542 . -7) (undo-tree-id28543 . -7) (undo-tree-id28544 . -7) (undo-tree-id28545 . -7) (undo-tree-id28546 . -7) (undo-tree-id28547 . -7) (undo-tree-id28548 . -7) (undo-tree-id28549 . -7) (undo-tree-id28550 . -7) (undo-tree-id28551 . -7) (undo-tree-id28552 . -7) (undo-tree-id28553 . -7) (undo-tree-id28554 . -7) (undo-tree-id28555 . -7) (undo-tree-id28556 . -7) (undo-tree-id28557 . -13) (undo-tree-id28558 . -13) (undo-tree-id28559 . -13) (undo-tree-id28560 . -13) (undo-tree-id28561 . -13) (undo-tree-id28562 . -13) (undo-tree-id28563 . -13) (undo-tree-id28564 . -13) (undo-tree-id28565 . -13) (undo-tree-id28566 . -13) (undo-tree-id28567 . -13) (undo-tree-id28568 . -13) (undo-tree-id28569 . -13) (undo-tree-id28570 . -13) (undo-tree-id28571 . -13) (undo-tree-id28572 . -13) (undo-tree-id28573 . -13) (undo-tree-id28574 . -13) (undo-tree-id28575 . -13) (undo-tree-id28576 . -13) (undo-tree-id28577 . -13) (undo-tree-id28578 . -13) (undo-tree-id28579 . -21) (undo-tree-id28580 . -21) (undo-tree-id28581 . -21) (undo-tree-id28582 . -21) (undo-tree-id28583 . -21) (undo-tree-id28584 . -21) (undo-tree-id28585 . -21) (undo-tree-id28586 . -21) (undo-tree-id28587 . -21) (undo-tree-id28588 . -21) (undo-tree-id28589 . -21) (undo-tree-id28590 . -21) (undo-tree-id28591 . -21) (undo-tree-id28592 . -21) (undo-tree-id28593 . -21) (undo-tree-id28594 . -21) (undo-tree-id28595 . -21) (undo-tree-id28596 . -21) (undo-tree-id28597 . -21) (undo-tree-id28598 . -21) (undo-tree-id28599 . -21) (undo-tree-id28600 . -21) (undo-tree-id28601 . -22) (undo-tree-id28602 . -22) (undo-tree-id28603 . -22) (undo-tree-id28604 . -22) (undo-tree-id28605 . -22) (undo-tree-id28606 . -22) (undo-tree-id28607 . -22) (undo-tree-id28608 . -22) (undo-tree-id28609 . -22) (undo-tree-id28610 . -22) (undo-tree-id28611 . -22) (undo-tree-id28612 . -22) (undo-tree-id28613 . -22) (undo-tree-id28614 . -22) (undo-tree-id28615 . -22) (undo-tree-id28616 . -22) (undo-tree-id28617 . -22) (undo-tree-id28618 . -22) (undo-tree-id28619 . -22) (undo-tree-id28620 . -22) (undo-tree-id28621 . -22) (undo-tree-id28622 . -22) (undo-tree-id28623 . -25) (undo-tree-id28624 . -25) (undo-tree-id28625 . -25) (undo-tree-id28626 . -25) (undo-tree-id28627 . -25) (undo-tree-id28628 . -25) (undo-tree-id28629 . -25) (undo-tree-id28630 . -25) (undo-tree-id28631 . -25) (undo-tree-id28632 . -25) (undo-tree-id28633 . -25) (undo-tree-id28634 . -25) (undo-tree-id28635 . -25) (undo-tree-id28636 . -25) (undo-tree-id28637 . -25) (undo-tree-id28638 . -25) (undo-tree-id28639 . -25) (undo-tree-id28640 . -25) (undo-tree-id28641 . -25) (undo-tree-id28642 . -25) (undo-tree-id28643 . -25) (undo-tree-id28644 . -25) (undo-tree-id28645 . -31) (undo-tree-id28646 . -31) (undo-tree-id28647 . -31) (undo-tree-id28648 . -31) (undo-tree-id28649 . -31) (undo-tree-id28650 . -31) (undo-tree-id28651 . -31) (undo-tree-id28652 . -31) (undo-tree-id28653 . -31) (undo-tree-id28654 . -31) (undo-tree-id28655 . -31) (undo-tree-id28656 . -31) (undo-tree-id28657 . -31) (undo-tree-id28658 . -31) (undo-tree-id28659 . -31) (undo-tree-id28660 . -31) (undo-tree-id28661 . -31) (undo-tree-id28662 . -31) (undo-tree-id28663 . -31) (undo-tree-id28664 . -31) (undo-tree-id28665 . -31) (undo-tree-id28666 . -31) (undo-tree-id28667 . -31) (undo-tree-id28668 . -31) (undo-tree-id28669 . -31) (undo-tree-id28670 . -31) (undo-tree-id28671 . -31) (undo-tree-id28672 . -31) (undo-tree-id28673 . -31) (undo-tree-id28674 . -34) (undo-tree-id28675 . -34) (undo-tree-id28676 . -34) (undo-tree-id28677 . -34) (undo-tree-id28678 . -34) (undo-tree-id28679 . -34) (undo-tree-id28680 . -34) (undo-tree-id28681 . -34) (undo-tree-id28682 . -34) (undo-tree-id28683 . -34) (undo-tree-id28684 . -34) (undo-tree-id28685 . -34) (undo-tree-id28686 . -34) (undo-tree-id28687 . -34) (undo-tree-id28688 . -34) (undo-tree-id28689 . -34) (undo-tree-id28690 . -34) (undo-tree-id28691 . -34) (undo-tree-id28692 . -34) (undo-tree-id28693 . -34) (undo-tree-id28694 . -34) (undo-tree-id28695 . -34) (undo-tree-id28696 . -45) (undo-tree-id28697 . -45) (undo-tree-id28698 . -45) (undo-tree-id28699 . -45) (undo-tree-id28700 . -45) (undo-tree-id28701 . -45) (undo-tree-id28702 . -45) (undo-tree-id28703 . -45) (undo-tree-id28704 . -45) (undo-tree-id28705 . -45) (undo-tree-id28706 . -45) (undo-tree-id28707 . -45) (undo-tree-id28708 . -45) (undo-tree-id28709 . -45) (undo-tree-id28710 . -45) (undo-tree-id28711 . -45) (undo-tree-id28712 . -45) (undo-tree-id28713 . -45) (undo-tree-id28714 . -45) (undo-tree-id28715 . -45) (undo-tree-id28716 . -45) (undo-tree-id28717 . -45) (undo-tree-id28718 . -48) (undo-tree-id28719 . -48) (undo-tree-id28720 . -48) (undo-tree-id28721 . -48) (undo-tree-id28722 . -48) (undo-tree-id28723 . -48) (undo-tree-id28724 . -48) (undo-tree-id28725 . -48) (undo-tree-id28726 . -48) (undo-tree-id28727 . -48) (undo-tree-id28728 . -48) (undo-tree-id28729 . -48) (undo-tree-id28730 . -48) (undo-tree-id28731 . -48) (undo-tree-id28732 . -48) (undo-tree-id28733 . -48) (undo-tree-id28734 . -48) (undo-tree-id28735 . -48) (undo-tree-id28736 . -48) (undo-tree-id28737 . -48) (undo-tree-id28738 . -48) (undo-tree-id28739 . -48) (undo-tree-id28740 . -48) (undo-tree-id28741 . -48) (undo-tree-id28742 . -48) (undo-tree-id28743 . -48) (undo-tree-id28744 . -48) (undo-tree-id28745 . -48) (undo-tree-id28746 . -48) (undo-tree-id28747 . -48) (undo-tree-id28748 . -48) (undo-tree-id28749 . -48) (undo-tree-id28750 . -48) (undo-tree-id28751 . -48) (undo-tree-id28752 . -48) (undo-tree-id28753 . -48) (undo-tree-id28754 . -48) (undo-tree-id28755 . -49) 5627 (t 25772 50943 660236 139000)) nil (25772 50970 755047 451000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5579) (undo-tree-id28503 . 1) (undo-tree-id28504 . 1) (undo-tree-id28505 . -1) (undo-tree-id28506 . -1)) nil (25772 50970 754913 690000) 0 nil])
([nil nil ((5579 . 5580) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5579)) nil (25772 50970 754909 886000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5622) (undo-tree-id28501 . -1) (undo-tree-id28502 . -1)) nil (25772 50970 754909 28000) 0 nil])
([nil nil ((5577 . 5816) (#("- it would run slightly faster, the accuracy would be roughly the same, and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove
- Replace the output layer with a Dense layer" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 31 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 31 32 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 32 107 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 107 108 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 108 186 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 186 187 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 187 193 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 193 194 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 194 195 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 195 196 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 196 239 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5577) (undo-tree-id27642 . -239) (undo-tree-id27643 . -239) (undo-tree-id27644 . 43) (undo-tree-id27645 . -196) (undo-tree-id27646 . -196) (undo-tree-id27647 . 42) (undo-tree-id27648 . -196) (undo-tree-id27649 . -239) (undo-tree-id27650 . -196) (undo-tree-id27651 . -196) (undo-tree-id27652 . -196) (undo-tree-id27653 . -196) (undo-tree-id27654 . -196) (undo-tree-id27655 . -196) (undo-tree-id27656 . -196) (undo-tree-id27657 . -196) (undo-tree-id27658 . -196) (undo-tree-id27659 . -196) (undo-tree-id27660 . -196) (undo-tree-id27661 . -196) (undo-tree-id27662 . -196) (undo-tree-id27663 . -196) (undo-tree-id27664 . -196) (undo-tree-id27665 . -196) (undo-tree-id27666 . -196) (undo-tree-id27667 . -196) (undo-tree-id27668 . -196) (undo-tree-id27669 . -196) (undo-tree-id27670 . -196) (undo-tree-id27671 . -196) (undo-tree-id27672 . -196) (undo-tree-id27673 . -196) (undo-tree-id27674 . -196) (undo-tree-id27675 . -196) (undo-tree-id27676 . -196) (undo-tree-id27677 . -196) (undo-tree-id27678 . -196) (undo-tree-id27679 . -196) (undo-tree-id27680 . -196) (undo-tree-id27681 . -196) (undo-tree-id27682 . -196) (undo-tree-id27683 . -196) (undo-tree-id27684 . -196) (undo-tree-id27685 . -196) (undo-tree-id27686 . -196) (undo-tree-id27687 . -196) (undo-tree-id27688 . -196) (undo-tree-id27689 . -196) (undo-tree-id27690 . -196) (undo-tree-id27691 . -196) (undo-tree-id27692 . -196) (undo-tree-id27693 . -196) (undo-tree-id27694 . -196) (undo-tree-id27695 . -196) (undo-tree-id27696 . -196) (undo-tree-id27697 . -196) (undo-tree-id27698 . -196) (undo-tree-id27699 . -196) (undo-tree-id27700 . -196) (undo-tree-id27701 . -196) (undo-tree-id27702 . -196) (undo-tree-id27703 . -196) (undo-tree-id27704 . -196) (undo-tree-id27705 . -196) (undo-tree-id27706 . -196) (undo-tree-id27707 . -196) (undo-tree-id27708 . -196) (undo-tree-id27709 . -196) (undo-tree-id27710 . -196) (undo-tree-id27711 . -196) (undo-tree-id27712 . -196) (undo-tree-id27713 . -196) (undo-tree-id27714 . -196) (undo-tree-id27715 . -196) (undo-tree-id27716 . -196) (undo-tree-id27717 . -196) (undo-tree-id27718 . -196) (undo-tree-id27719 . -196) (undo-tree-id27720 . -196) (undo-tree-id27721 . -196) (undo-tree-id27722 . -196) (undo-tree-id27723 . -196) (undo-tree-id27724 . -196) (undo-tree-id27725 . -196) (undo-tree-id27726 . -196) (undo-tree-id27727 . -196) (undo-tree-id27728 . -196) (undo-tree-id27729 . -196) (undo-tree-id27730 . -196) (undo-tree-id27731 . -196) (undo-tree-id27732 . -196) (undo-tree-id27733 . -196) (undo-tree-id27734 . -196) (undo-tree-id27735 . -196) (undo-tree-id27736 . -196) (undo-tree-id27737 . -196) (undo-tree-id27738 . -196) (undo-tree-id27739 . -196) (undo-tree-id27740 . -196) (undo-tree-id27741 . -196) (undo-tree-id27742 . -196) (undo-tree-id27743 . -196) (undo-tree-id27744 . -196) (undo-tree-id27745 . -196) (undo-tree-id27746 . -196) (undo-tree-id27747 . -196) (undo-tree-id27748 . -196) (undo-tree-id27749 . -196) (undo-tree-id27750 . -196) (undo-tree-id27751 . -196) (undo-tree-id27752 . -196) (undo-tree-id27753 . -196) (undo-tree-id27754 . -196) (undo-tree-id27755 . -196) (undo-tree-id27756 . -196) (undo-tree-id27757 . -196) (undo-tree-id27758 . -196) (undo-tree-id27759 . -196) (undo-tree-id27760 . -196) (undo-tree-id27761 . -196) (undo-tree-id27762 . -196) (undo-tree-id27763 . -196) (undo-tree-id27764 . -196) (undo-tree-id27765 . -196) (undo-tree-id27766 . -196) (undo-tree-id27767 . -196) (undo-tree-id27768 . -196) (undo-tree-id27769 . -196) (undo-tree-id27770 . -196) (undo-tree-id27771 . -196) (undo-tree-id27772 . -196) (undo-tree-id27773 . -196) (undo-tree-id27774 . -196) (undo-tree-id27775 . -196) (undo-tree-id27776 . -196) (undo-tree-id27777 . -196) (undo-tree-id27778 . -196) (undo-tree-id27779 . -196) (undo-tree-id27780 . -196) (undo-tree-id27781 . -196) (undo-tree-id27782 . -196) (undo-tree-id27783 . -196) (undo-tree-id27784 . -196) (undo-tree-id27785 . -196) (undo-tree-id27786 . -196) (undo-tree-id27787 . -196) (undo-tree-id27788 . -196) (undo-tree-id27789 . -196) (undo-tree-id27790 . -196) (undo-tree-id27791 . -196) (undo-tree-id27792 . -196) (undo-tree-id27793 . -196) (undo-tree-id27794 . -196) (undo-tree-id27795 . -196) (undo-tree-id27796 . -196) (undo-tree-id27797 . -196) (undo-tree-id27798 . -196) (undo-tree-id27799 . -196) (undo-tree-id27800 . -196) (undo-tree-id27801 . -196) (undo-tree-id27802 . -196) (undo-tree-id27803 . -196) (undo-tree-id27804 . -196) (undo-tree-id27805 . -196) (undo-tree-id27806 . -196) (undo-tree-id27807 . -196) (undo-tree-id27808 . -196) (undo-tree-id27809 . -196) (undo-tree-id27810 . -196) (undo-tree-id27811 . -196) (undo-tree-id27812 . -196) (undo-tree-id27813 . -196) (undo-tree-id27814 . -196) (undo-tree-id27815 . -196) (undo-tree-id27816 . -196) (undo-tree-id27817 . -196) (undo-tree-id27818 . -196) (undo-tree-id27819 . -196) (undo-tree-id27820 . -196) (undo-tree-id27821 . -196) (undo-tree-id27822 . -196) (undo-tree-id27823 . -196) (undo-tree-id27824 . -196) (undo-tree-id27825 . -196) (undo-tree-id27826 . -196) (undo-tree-id27827 . -196) (undo-tree-id27828 . -196) (undo-tree-id27829 . -196) (undo-tree-id27830 . -196) (undo-tree-id27831 . -196) (undo-tree-id27832 . -196) (undo-tree-id27833 . -196) (undo-tree-id27834 . -196) (undo-tree-id27835 . -196) (undo-tree-id27836 . -196) (undo-tree-id27837 . -196) (undo-tree-id27838 . -196) (undo-tree-id27839 . -196) (undo-tree-id27840 . -196) (undo-tree-id27841 . -196) (undo-tree-id27842 . -196) (undo-tree-id27843 . -196) (undo-tree-id27844 . -196) (undo-tree-id27845 . -196) (undo-tree-id27846 . -196) (undo-tree-id27847 . -196) (undo-tree-id27848 . -196) (undo-tree-id27849 . -196) (undo-tree-id27850 . -196) (undo-tree-id27851 . -196) (undo-tree-id27852 . -196) (undo-tree-id27853 . -196) (undo-tree-id27854 . -196) (undo-tree-id27855 . -196) (undo-tree-id27856 . -196) (undo-tree-id27857 . -196) (undo-tree-id27858 . -196) (undo-tree-id27859 . -196) (undo-tree-id27860 . -196) (undo-tree-id27861 . -196) (undo-tree-id27862 . -196) (undo-tree-id27863 . -196) (undo-tree-id27864 . -196) (undo-tree-id27865 . -196) (undo-tree-id27866 . -196) (undo-tree-id27867 . -196) (undo-tree-id27868 . -196) (undo-tree-id27869 . -196) (undo-tree-id27870 . -196) (undo-tree-id27871 . -196) (undo-tree-id27872 . -196) (undo-tree-id27873 . -196) (undo-tree-id27874 . -196) (undo-tree-id27875 . -196) (undo-tree-id27876 . -196) (undo-tree-id27877 . -196) (undo-tree-id27878 . -196) (undo-tree-id27879 . -196) (undo-tree-id27880 . -196) (undo-tree-id27881 . -196) (undo-tree-id27882 . -196) (undo-tree-id27883 . -196) (undo-tree-id27884 . -196) (undo-tree-id27885 . -196) (undo-tree-id27886 . -196) (undo-tree-id27887 . -196) (undo-tree-id27888 . -196) (undo-tree-id27889 . -196) (undo-tree-id27890 . -196) (undo-tree-id27891 . -196) (undo-tree-id27892 . -196) (undo-tree-id27893 . -196) (undo-tree-id27894 . -196) (undo-tree-id27895 . -196) (undo-tree-id27896 . -196) (undo-tree-id27897 . -196) (undo-tree-id27898 . -196) (undo-tree-id27899 . -196) (undo-tree-id27900 . -196) (undo-tree-id27901 . -196) (undo-tree-id27902 . -196) (undo-tree-id27903 . -196) (undo-tree-id27904 . -196) (undo-tree-id27905 . -196) (undo-tree-id27906 . -196) (undo-tree-id27907 . -196) (undo-tree-id27908 . -196) (undo-tree-id27909 . -196) (undo-tree-id27910 . -196) (undo-tree-id27911 . -196) (undo-tree-id27912 . -196) (undo-tree-id27913 . -196) (undo-tree-id27914 . -196) (undo-tree-id27915 . -196) (undo-tree-id27916 . -196) (undo-tree-id27917 . -196) (undo-tree-id27918 . -196) (undo-tree-id27919 . -196) (undo-tree-id27920 . -196) (undo-tree-id27921 . -196) (undo-tree-id27922 . -196) (undo-tree-id27923 . -196) (undo-tree-id27924 . -196) (undo-tree-id27925 . -196) (undo-tree-id27926 . -196) (undo-tree-id27927 . -196) (undo-tree-id27928 . -196) (undo-tree-id27929 . -196) (undo-tree-id27930 . -196) (undo-tree-id27931 . -196) (undo-tree-id27932 . -196) (undo-tree-id27933 . -196) (undo-tree-id27934 . -196) (undo-tree-id27935 . -196) (undo-tree-id27936 . -196) (undo-tree-id27937 . -196) (undo-tree-id27938 . -196) (undo-tree-id27939 . -196) (undo-tree-id27940 . -196) (undo-tree-id27941 . -196) (undo-tree-id27942 . -196) (undo-tree-id27943 . -196) (undo-tree-id27944 . -196) (undo-tree-id27945 . -196) (undo-tree-id27946 . -196) (undo-tree-id27947 . -196) (undo-tree-id27948 . -196) (undo-tree-id27949 . -196) (undo-tree-id27950 . -196) (undo-tree-id27951 . -196) (undo-tree-id27952 . -196) (undo-tree-id27953 . -196) (undo-tree-id27954 . -196) (undo-tree-id27955 . -196) (undo-tree-id27956 . -196) (undo-tree-id27957 . -196) (undo-tree-id27958 . -196) (undo-tree-id27959 . -196) (undo-tree-id27960 . -196) (undo-tree-id27961 . -196) (undo-tree-id27962 . -196) (undo-tree-id27963 . -196) (undo-tree-id27964 . -196) (undo-tree-id27965 . -196) (undo-tree-id27966 . -196) (undo-tree-id27967 . -196) (undo-tree-id27968 . -196) (undo-tree-id27969 . -196) (undo-tree-id27970 . -196) (undo-tree-id27971 . -196) (undo-tree-id27972 . -196) (undo-tree-id27973 . -196) (undo-tree-id27974 . -196) (undo-tree-id27975 . -196) (undo-tree-id27976 . -196) (undo-tree-id27977 . -196) (undo-tree-id27978 . -196) (undo-tree-id27979 . -196) (undo-tree-id27980 . -196) (undo-tree-id27981 . -196) (undo-tree-id27982 . -196) (undo-tree-id27983 . -196) (undo-tree-id27984 . -196) (undo-tree-id27985 . -196) (undo-tree-id27986 . -196) (undo-tree-id27987 . -196) (undo-tree-id27988 . -196) (undo-tree-id27989 . -196) (undo-tree-id27990 . -196) (undo-tree-id27991 . -196) (undo-tree-id27992 . -196) (undo-tree-id27993 . -196) (undo-tree-id27994 . -196) (undo-tree-id27995 . -196) (undo-tree-id27996 . -196) (undo-tree-id27997 . -196) (undo-tree-id27998 . -196) (undo-tree-id27999 . -196) (undo-tree-id28000 . -196) (undo-tree-id28001 . -196) (undo-tree-id28002 . -196) (undo-tree-id28003 . -196) (undo-tree-id28004 . -196) (undo-tree-id28005 . -196) (undo-tree-id28006 . -196) (undo-tree-id28007 . -196) (undo-tree-id28008 . -196) (undo-tree-id28009 . -196) (undo-tree-id28010 . -196) (undo-tree-id28011 . -196) (undo-tree-id28012 . -196) (undo-tree-id28013 . -196) (undo-tree-id28014 . -196) (undo-tree-id28015 . -196) (undo-tree-id28016 . -196) (undo-tree-id28017 . -196) (undo-tree-id28018 . -196) (undo-tree-id28019 . -196) (undo-tree-id28020 . -196) (undo-tree-id28021 . -196) (undo-tree-id28022 . -196) (undo-tree-id28023 . -196) (undo-tree-id28024 . -196) (undo-tree-id28025 . -196) (undo-tree-id28026 . -196) (undo-tree-id28027 . -196) (undo-tree-id28028 . -196) (undo-tree-id28029 . -196) (undo-tree-id28030 . -196) (undo-tree-id28031 . -196) (undo-tree-id28032 . -196) (undo-tree-id28033 . -196) (undo-tree-id28034 . -196) (undo-tree-id28035 . -196) (undo-tree-id28036 . -196) (undo-tree-id28037 . -196) (undo-tree-id28038 . -196) (undo-tree-id28039 . -196) (undo-tree-id28040 . -196) (undo-tree-id28041 . -196) (undo-tree-id28042 . -196) (undo-tree-id28043 . -196) (undo-tree-id28044 . -196) (undo-tree-id28045 . -196) (undo-tree-id28046 . -196) (undo-tree-id28047 . -196) (undo-tree-id28048 . -196) (undo-tree-id28049 . -196) (undo-tree-id28050 . -196) (undo-tree-id28051 . -196) (undo-tree-id28052 . -196) (undo-tree-id28053 . -196) (undo-tree-id28054 . -196) (undo-tree-id28055 . -196) (undo-tree-id28056 . -202) (undo-tree-id28057 . -202) (undo-tree-id28058 . -202) (undo-tree-id28059 . -202) (undo-tree-id28060 . -202) (undo-tree-id28061 . -202) (undo-tree-id28062 . -202) (undo-tree-id28063 . -202) (undo-tree-id28064 . -202) (undo-tree-id28065 . -202) (undo-tree-id28066 . -202) (undo-tree-id28067 . -202) (undo-tree-id28068 . -202) (undo-tree-id28069 . -202) (undo-tree-id28070 . -202) (undo-tree-id28071 . -206) (undo-tree-id28072 . -206) (undo-tree-id28073 . -206) (undo-tree-id28074 . -206) (undo-tree-id28075 . -206) (undo-tree-id28076 . -206) (undo-tree-id28077 . -206) (undo-tree-id28078 . -206) (undo-tree-id28079 . -213) (undo-tree-id28080 . -213) (undo-tree-id28081 . -213) (undo-tree-id28082 . -213) (undo-tree-id28083 . -213) (undo-tree-id28084 . -213) (undo-tree-id28085 . -213) (undo-tree-id28086 . -213) (undo-tree-id28087 . -219) (undo-tree-id28088 . -219) (undo-tree-id28089 . -219) (undo-tree-id28090 . -219) (undo-tree-id28091 . -219) (undo-tree-id28092 . -219) (undo-tree-id28093 . -219) (undo-tree-id28094 . -219) (undo-tree-id28095 . -224) (undo-tree-id28096 . -224) (undo-tree-id28097 . -224) (undo-tree-id28098 . -224) (undo-tree-id28099 . -224) (undo-tree-id28100 . -224) (undo-tree-id28101 . -224) (undo-tree-id28102 . -224) (undo-tree-id28103 . -226) (undo-tree-id28104 . -226) (undo-tree-id28105 . -226) (undo-tree-id28106 . -226) (undo-tree-id28107 . -226) (undo-tree-id28108 . -226) (undo-tree-id28109 . -226) (undo-tree-id28110 . -226) (undo-tree-id28111 . -232) (undo-tree-id28112 . -232) (undo-tree-id28113 . -232) (undo-tree-id28114 . -232) (undo-tree-id28115 . -232) (undo-tree-id28116 . -232) (undo-tree-id28117 . -232) (undo-tree-id28118 . -232) (undo-tree-id28119 . -238) (undo-tree-id28120 . -238) (undo-tree-id28121 . -238) (undo-tree-id28122 . -238) (undo-tree-id28123 . -238) (undo-tree-id28124 . -238) (undo-tree-id28125 . -238) (undo-tree-id28126 . -238) (undo-tree-id28127 . -239) (undo-tree-id28128 . -239) (undo-tree-id28129 . -239) (undo-tree-id28130 . -239) (undo-tree-id28131 . -239) (undo-tree-id28132 . -239) (undo-tree-id28133 . -239) (undo-tree-id28134 . -239) (undo-tree-id28135 . -239) (undo-tree-id28136 . -239) (undo-tree-id28137 . -239) (undo-tree-id28138 . -239) (undo-tree-id28139 . -239) (undo-tree-id28140 . -239) (undo-tree-id28141 . -239) (undo-tree-id28142 . -239) (undo-tree-id28143 . -239) (undo-tree-id28144 . -239) (undo-tree-id28145 . -239) (undo-tree-id28146 . -239) (undo-tree-id28147 . -239) (undo-tree-id28148 . -239) (undo-tree-id28149 . -239) (undo-tree-id28150 . -239) (undo-tree-id28151 . -239) (undo-tree-id28152 . -239) (undo-tree-id28153 . -239) (undo-tree-id28154 . -239) (undo-tree-id28155 . -239) (undo-tree-id28156 . -239) (undo-tree-id28157 . -239) (undo-tree-id28158 . -239) (undo-tree-id28159 . -239) (undo-tree-id28160 . -239) (undo-tree-id28161 . -239) (undo-tree-id28162 . -239) (undo-tree-id28163 . -239) (undo-tree-id28164 . -239) (undo-tree-id28165 . -239) (undo-tree-id28166 . -239) (undo-tree-id28167 . -239) (undo-tree-id28168 . -239) (undo-tree-id28169 . -239) (undo-tree-id28170 . -239) (undo-tree-id28171 . -239) (undo-tree-id28172 . -239) (undo-tree-id28173 . -239) (undo-tree-id28174 . -239) (undo-tree-id28175 . -239) (undo-tree-id28176 . -239) (undo-tree-id28177 . -239) (undo-tree-id28178 . -239) (undo-tree-id28179 . -239) (undo-tree-id28180 . -239) (undo-tree-id28181 . -239) (undo-tree-id28182 . -239) (undo-tree-id28183 . -239) (undo-tree-id28184 . -239) (undo-tree-id28185 . -239) (undo-tree-id28186 . -239) (undo-tree-id28187 . -239) (undo-tree-id28188 . -239) (undo-tree-id28189 . -239) (undo-tree-id28190 . -239) (undo-tree-id28191 . -239) (undo-tree-id28192 . -239) (undo-tree-id28193 . -239) (undo-tree-id28194 . -239) (undo-tree-id28195 . -239) (undo-tree-id28196 . -239) (undo-tree-id28197 . -239) (undo-tree-id28198 . -239) (undo-tree-id28199 . -239) (undo-tree-id28200 . -239) (undo-tree-id28201 . -239) (undo-tree-id28202 . -239) (undo-tree-id28203 . -239) (undo-tree-id28204 . -239) (undo-tree-id28205 . -239) (undo-tree-id28206 . -239) (undo-tree-id28207 . -239) (undo-tree-id28208 . -239) (undo-tree-id28209 . -239) (undo-tree-id28210 . -239) (undo-tree-id28211 . -239) (undo-tree-id28212 . -239) (undo-tree-id28213 . -239) (undo-tree-id28214 . -239) (undo-tree-id28215 . -239) (undo-tree-id28216 . -239) (undo-tree-id28217 . -239) (undo-tree-id28218 . -239) (undo-tree-id28219 . -239) (undo-tree-id28220 . -239) (undo-tree-id28221 . -239) (undo-tree-id28222 . -239) (undo-tree-id28223 . -239) (undo-tree-id28224 . -239) (undo-tree-id28225 . -239) (undo-tree-id28226 . -239) (undo-tree-id28227 . -239) (undo-tree-id28228 . -239) (undo-tree-id28229 . -239) (undo-tree-id28230 . -239) (undo-tree-id28231 . -239) (undo-tree-id28232 . -239) (undo-tree-id28233 . -239) (undo-tree-id28234 . -239) (undo-tree-id28235 . -239) (undo-tree-id28236 . -239) (undo-tree-id28237 . -239) (undo-tree-id28238 . -239) (undo-tree-id28239 . -239) (undo-tree-id28240 . -239) (undo-tree-id28241 . -239) (undo-tree-id28242 . -239) (undo-tree-id28243 . -239) (undo-tree-id28244 . -239) (undo-tree-id28245 . -239) (undo-tree-id28246 . -239) (undo-tree-id28247 . -239) (undo-tree-id28248 . -239) (undo-tree-id28249 . -239) (undo-tree-id28250 . -239) (undo-tree-id28251 . -239) (undo-tree-id28252 . -239) (undo-tree-id28253 . -239) (undo-tree-id28254 . -239) (undo-tree-id28255 . -239) (undo-tree-id28256 . -239) (undo-tree-id28257 . -239) (undo-tree-id28258 . -239) (undo-tree-id28259 . -239) (undo-tree-id28260 . -239) (undo-tree-id28261 . -239) (undo-tree-id28262 . -239) (undo-tree-id28263 . -239) (undo-tree-id28264 . -239) (undo-tree-id28265 . -239) (undo-tree-id28266 . -239) (undo-tree-id28267 . -239) (undo-tree-id28268 . -239) (undo-tree-id28269 . -239) (undo-tree-id28270 . -239) (undo-tree-id28271 . -239) (undo-tree-id28272 . -239) (undo-tree-id28273 . -239) (undo-tree-id28274 . -239) (undo-tree-id28275 . -239) (undo-tree-id28276 . -239) (undo-tree-id28277 . -239) (undo-tree-id28278 . -239) (undo-tree-id28279 . -239) (undo-tree-id28280 . -239) (undo-tree-id28281 . -239) (undo-tree-id28282 . -239) (undo-tree-id28283 . -239) (undo-tree-id28284 . -239) (undo-tree-id28285 . -239) (undo-tree-id28286 . -239) (undo-tree-id28287 . -239) (undo-tree-id28288 . -239) (undo-tree-id28289 . -239) (undo-tree-id28290 . -239) (undo-tree-id28291 . -239) (undo-tree-id28292 . -239) (undo-tree-id28293 . -239) (undo-tree-id28294 . -239) (undo-tree-id28295 . -239) (undo-tree-id28296 . -239) (undo-tree-id28297 . -239) (undo-tree-id28298 . -239) (undo-tree-id28299 . -239) (undo-tree-id28300 . -239) (undo-tree-id28301 . -239) (undo-tree-id28302 . -239) (undo-tree-id28303 . -239) (undo-tree-id28304 . -239) (undo-tree-id28305 . -239) (undo-tree-id28306 . -239) (undo-tree-id28307 . -239) (undo-tree-id28308 . -239) (undo-tree-id28309 . -239) (undo-tree-id28310 . -239) (undo-tree-id28311 . -239) (undo-tree-id28312 . -239) (undo-tree-id28313 . -239) (undo-tree-id28314 . -239) (undo-tree-id28315 . -239) (undo-tree-id28316 . -239) (undo-tree-id28317 . -239) (undo-tree-id28318 . -239) (undo-tree-id28319 . -239) (undo-tree-id28320 . -239) (undo-tree-id28321 . -239) (undo-tree-id28322 . -239) (undo-tree-id28323 . -239) (undo-tree-id28324 . -239) (undo-tree-id28325 . -239) (undo-tree-id28326 . -239) (undo-tree-id28327 . -239) (undo-tree-id28328 . -239) (undo-tree-id28329 . -239) (undo-tree-id28330 . -239) (undo-tree-id28331 . -239) (undo-tree-id28332 . -239) (undo-tree-id28333 . -239) (undo-tree-id28334 . -239) (undo-tree-id28335 . -239) (undo-tree-id28336 . -239) (undo-tree-id28337 . -239) (undo-tree-id28338 . -239) (undo-tree-id28339 . -239) (undo-tree-id28340 . -239) (undo-tree-id28341 . -239) (undo-tree-id28342 . -194) (5577 . 5771) (#(" it would run slightly faster, the accuracy would be roughly the same, and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove" 0 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 30 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 106 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 106 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 107 185 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 185 186 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 186 192 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5622) (undo-tree-id28343 . -2) (undo-tree-id28344 . -2) (undo-tree-id28345 . -2) (undo-tree-id28346 . -2) (undo-tree-id28347 . -2) (undo-tree-id28348 . -2) (undo-tree-id28349 . -2) (undo-tree-id28350 . -2) (undo-tree-id28351 . -8) (undo-tree-id28352 . -8) (undo-tree-id28353 . -8) (undo-tree-id28354 . -8) (undo-tree-id28355 . -8) (undo-tree-id28356 . -8) (undo-tree-id28357 . -8) (undo-tree-id28358 . -8) (undo-tree-id28359 . -12) (undo-tree-id28360 . -12) (undo-tree-id28361 . -12) (undo-tree-id28362 . -12) (undo-tree-id28363 . -12) (undo-tree-id28364 . -12) (undo-tree-id28365 . -12) (undo-tree-id28366 . -12) (undo-tree-id28367 . -21) (undo-tree-id28368 . -21) (undo-tree-id28369 . -21) (undo-tree-id28370 . -21) (undo-tree-id28371 . -21) (undo-tree-id28372 . -21) (undo-tree-id28373 . -21) (undo-tree-id28374 . -21) (undo-tree-id28375 . -21) (undo-tree-id28376 . -21) (undo-tree-id28377 . -21) (undo-tree-id28378 . -21) (undo-tree-id28379 . -21) (undo-tree-id28380 . -21) (undo-tree-id28381 . -21) (undo-tree-id28382 . -28) (undo-tree-id28383 . -28) (undo-tree-id28384 . -28) (undo-tree-id28385 . -28) (undo-tree-id28386 . -28) (undo-tree-id28387 . -28) (undo-tree-id28388 . -28) (undo-tree-id28389 . -28) (undo-tree-id28390 . -28) (undo-tree-id28391 . -28) (undo-tree-id28392 . -28) (undo-tree-id28393 . -28) (undo-tree-id28394 . -28) (undo-tree-id28395 . -28) (undo-tree-id28396 . -28) (undo-tree-id28397 . -29) (undo-tree-id28398 . -29) (undo-tree-id28399 . -29) (undo-tree-id28400 . -29) (undo-tree-id28401 . -29) (undo-tree-id28402 . -29) (undo-tree-id28403 . -29) (undo-tree-id28404 . -29) (undo-tree-id28405 . -29) (undo-tree-id28406 . -29) (undo-tree-id28407 . -29) (undo-tree-id28408 . -29) (undo-tree-id28409 . -29) (undo-tree-id28410 . -29) (undo-tree-id28411 . -29) (undo-tree-id28412 . -29) (undo-tree-id28413 . -29) (undo-tree-id28414 . -29) (undo-tree-id28415 . -29) (undo-tree-id28416 . -29) (undo-tree-id28417 . -29) (undo-tree-id28418 . -29) (undo-tree-id28419 . -29) (undo-tree-id28420 . -29) (undo-tree-id28421 . -29) (undo-tree-id28422 . -29) (undo-tree-id28423 . -29) (undo-tree-id28424 . -29) (undo-tree-id28425 . -29) (undo-tree-id28426 . -23) (undo-tree-id28427 . -23) (undo-tree-id28428 . -23) (undo-tree-id28429 . -23) (undo-tree-id28430 . -23) (undo-tree-id28431 . -23) (undo-tree-id28432 . -23) (undo-tree-id28433 . -23) (undo-tree-id28434 . -23) (undo-tree-id28435 . -23) (undo-tree-id28436 . -23) (undo-tree-id28437 . -23) (undo-tree-id28438 . -23) (undo-tree-id28439 . -23) (undo-tree-id28440 . -23) (undo-tree-id28441 . -14) (undo-tree-id28442 . -14) (undo-tree-id28443 . -14) (undo-tree-id28444 . -14) (undo-tree-id28445 . -14) (undo-tree-id28446 . -14) (undo-tree-id28447 . -14) (undo-tree-id28448 . -14) (undo-tree-id28449 . -14) (undo-tree-id28450 . -14) (undo-tree-id28451 . -14) (undo-tree-id28452 . -14) (undo-tree-id28453 . -14) (undo-tree-id28454 . -14) (undo-tree-id28455 . -14) (undo-tree-id28456 . -10) (undo-tree-id28457 . -10) (undo-tree-id28458 . -10) (undo-tree-id28459 . -10) (undo-tree-id28460 . -10) (undo-tree-id28461 . -10) (undo-tree-id28462 . -10) (undo-tree-id28463 . -10) (undo-tree-id28464 . -10) (undo-tree-id28465 . -10) (undo-tree-id28466 . -10) (undo-tree-id28467 . -10) (undo-tree-id28468 . -10) (undo-tree-id28469 . -10) (undo-tree-id28470 . -10) (undo-tree-id28471 . -4) (undo-tree-id28472 . -4) (undo-tree-id28473 . -4) (undo-tree-id28474 . -4) (undo-tree-id28475 . -4) (undo-tree-id28476 . -4) (undo-tree-id28477 . -4) (undo-tree-id28478 . -4) (undo-tree-id28479 . -4) (undo-tree-id28480 . -4) (undo-tree-id28481 . -4) (undo-tree-id28482 . -4) (undo-tree-id28483 . -4) (undo-tree-id28484 . -4) (undo-tree-id28485 . -4) (undo-tree-id28486 . -1) (undo-tree-id28487 . -1) (undo-tree-id28488 . -1) (undo-tree-id28489 . -1) (undo-tree-id28490 . -1) (undo-tree-id28491 . -1) (undo-tree-id28492 . -1) (undo-tree-id28493 . -1) (undo-tree-id28494 . -1) (undo-tree-id28495 . -1) (undo-tree-id28496 . -1) (undo-tree-id28497 . -1) (undo-tree-id28498 . -1) (undo-tree-id28499 . -1) (undo-tree-id28500 . -1)) nil (25772 50970 754882 497000) 0 nil])
([nil nil ((5625 . 5626) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5625)) nil (25772 50970 754385 680000) 0 nil])
([nil nil ((#("It " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5625) (undo-tree-id27638 . -2) (undo-tree-id27639 . 3) (undo-tree-id27640 . 2) (undo-tree-id27641 . -3)) nil (25772 50970 754384 357000) 0 nil])
([nil nil ((#("would " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5625) (undo-tree-id27634 . -5) (undo-tree-id27635 . 6) (undo-tree-id27636 . 6) (undo-tree-id27637 . -6)) nil (25772 50970 754381 169000) 0 nil])
([nil nil ((5625 . 5626) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5625)) nil (25772 50970 754377 80000) 0 nil])
([nil nil ((5628 . 5629)) nil (25772 50970 754375 385000) 0 nil])
([nil nil ((5623 . 5809) (#("- the accuracy would be roughly the same, and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove
- Runs slightly faster" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 77 78 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 78 156 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 156 157 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 157 163 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 163 164 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 164 165 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 165 166 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 166 186 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5623) (undo-tree-id27226 . -186) (undo-tree-id27227 . -186) (undo-tree-id27228 . 16) (undo-tree-id27229 . -166) (undo-tree-id27230 . -166) (undo-tree-id27231 . 19) (undo-tree-id27232 . -186) (undo-tree-id27233 . -166) (undo-tree-id27234 . -166) (undo-tree-id27235 . -166) (undo-tree-id27236 . -166) (undo-tree-id27237 . -166) (undo-tree-id27238 . -166) (undo-tree-id27239 . -166) (undo-tree-id27240 . -166) (undo-tree-id27241 . -166) (undo-tree-id27242 . -166) (undo-tree-id27243 . -166) (undo-tree-id27244 . -166) (undo-tree-id27245 . -166) (undo-tree-id27246 . -166) (undo-tree-id27247 . -166) (undo-tree-id27248 . -166) (undo-tree-id27249 . -165) (undo-tree-id27250 . -165) (undo-tree-id27251 . -165) (undo-tree-id27252 . -165) (undo-tree-id27253 . -165) (undo-tree-id27254 . -165) (undo-tree-id27255 . -165) (undo-tree-id27256 . -165) (undo-tree-id27257 . -165) (undo-tree-id27258 . -165) (undo-tree-id27259 . -165) (undo-tree-id27260 . -165) (undo-tree-id27261 . -165) (undo-tree-id27262 . -165) (undo-tree-id27263 . -165) (undo-tree-id27264 . -165) (undo-tree-id27265 . -165) (undo-tree-id27266 . -165) (undo-tree-id27267 . -165) (undo-tree-id27268 . -165) (undo-tree-id27269 . -165) (undo-tree-id27270 . -165) (undo-tree-id27271 . -165) (undo-tree-id27272 . -165) (undo-tree-id27273 . -165) (undo-tree-id27274 . -165) (undo-tree-id27275 . -166) (undo-tree-id27276 . -166) (undo-tree-id27277 . -166) (undo-tree-id27278 . -166) (undo-tree-id27279 . -166) (undo-tree-id27280 . -166) (undo-tree-id27281 . -166) (undo-tree-id27282 . -166) (undo-tree-id27283 . -166) (undo-tree-id27284 . -166) (undo-tree-id27285 . -166) (undo-tree-id27286 . -166) (undo-tree-id27287 . -166) (undo-tree-id27288 . -166) (undo-tree-id27289 . -166) (undo-tree-id27290 . -166) (undo-tree-id27291 . -166) (undo-tree-id27292 . -166) (undo-tree-id27293 . -166) (undo-tree-id27294 . -166) (undo-tree-id27295 . -166) (undo-tree-id27296 . -166) (undo-tree-id27297 . -166) (undo-tree-id27298 . -166) (undo-tree-id27299 . -166) (undo-tree-id27300 . -166) (undo-tree-id27301 . -166) (undo-tree-id27302 . -166) (undo-tree-id27303 . -166) (undo-tree-id27304 . -166) (undo-tree-id27305 . -166) (undo-tree-id27306 . -166) (undo-tree-id27307 . -166) (undo-tree-id27308 . -166) (undo-tree-id27309 . -166) (undo-tree-id27310 . -166) (undo-tree-id27311 . -166) (undo-tree-id27312 . -166) (undo-tree-id27313 . -166) (undo-tree-id27314 . -166) (undo-tree-id27315 . -166) (undo-tree-id27316 . -166) (undo-tree-id27317 . -166) (undo-tree-id27318 . -166) (undo-tree-id27319 . -166) (undo-tree-id27320 . -166) (undo-tree-id27321 . -166) (undo-tree-id27322 . -166) (undo-tree-id27323 . -166) (undo-tree-id27324 . -166) (undo-tree-id27325 . -166) (undo-tree-id27326 . -166) (undo-tree-id27327 . -166) (undo-tree-id27328 . -166) (undo-tree-id27329 . -166) (undo-tree-id27330 . -166) (undo-tree-id27331 . -166) (undo-tree-id27332 . -166) (undo-tree-id27333 . -166) (undo-tree-id27334 . -166) (undo-tree-id27335 . -166) (undo-tree-id27336 . -166) (undo-tree-id27337 . -166) (undo-tree-id27338 . -166) (undo-tree-id27339 . -166) (undo-tree-id27340 . -166) (undo-tree-id27341 . -166) (undo-tree-id27342 . -166) (undo-tree-id27343 . -166) (undo-tree-id27344 . -166) (undo-tree-id27345 . -166) (undo-tree-id27346 . -166) (undo-tree-id27347 . -166) (undo-tree-id27348 . -166) (undo-tree-id27349 . -166) (undo-tree-id27350 . -166) (undo-tree-id27351 . -166) (undo-tree-id27352 . -166) (undo-tree-id27353 . -166) (undo-tree-id27354 . -166) (undo-tree-id27355 . -166) (undo-tree-id27356 . -166) (undo-tree-id27357 . -166) (undo-tree-id27358 . -166) (undo-tree-id27359 . -166) (undo-tree-id27360 . -166) (undo-tree-id27361 . -166) (undo-tree-id27362 . -166) (undo-tree-id27363 . -166) (undo-tree-id27364 . -166) (undo-tree-id27365 . -166) (undo-tree-id27366 . -166) (undo-tree-id27367 . -166) (undo-tree-id27368 . -166) (undo-tree-id27369 . -166) (undo-tree-id27370 . -166) (undo-tree-id27371 . -166) (undo-tree-id27372 . -166) (undo-tree-id27373 . -166) (undo-tree-id27374 . -166) (undo-tree-id27375 . -166) (undo-tree-id27376 . -166) (undo-tree-id27377 . -166) (undo-tree-id27378 . -166) (undo-tree-id27379 . -166) (undo-tree-id27380 . -166) (undo-tree-id27381 . -166) (undo-tree-id27382 . -166) (undo-tree-id27383 . -166) (undo-tree-id27384 . -166) (undo-tree-id27385 . -166) (undo-tree-id27386 . -166) (undo-tree-id27387 . -166) (undo-tree-id27388 . -166) (undo-tree-id27389 . -166) (undo-tree-id27390 . -166) (undo-tree-id27391 . -166) (undo-tree-id27392 . -166) (undo-tree-id27393 . -166) (undo-tree-id27394 . -166) (undo-tree-id27395 . -166) (undo-tree-id27396 . -166) (undo-tree-id27397 . -166) (undo-tree-id27398 . -166) (undo-tree-id27399 . -166) (undo-tree-id27400 . -166) (undo-tree-id27401 . -166) (undo-tree-id27402 . -166) (undo-tree-id27403 . -166) (undo-tree-id27404 . -166) (undo-tree-id27405 . -166) (undo-tree-id27406 . -166) (undo-tree-id27407 . -166) (undo-tree-id27408 . -166) (undo-tree-id27409 . -166) (undo-tree-id27410 . -166) (undo-tree-id27411 . -166) (undo-tree-id27412 . -166) (undo-tree-id27413 . -166) (undo-tree-id27414 . -166) (undo-tree-id27415 . -166) (undo-tree-id27416 . -166) (undo-tree-id27417 . -166) (undo-tree-id27418 . -166) (undo-tree-id27419 . -166) (undo-tree-id27420 . -166) (undo-tree-id27421 . -166) (undo-tree-id27422 . -166) (undo-tree-id27423 . -166) (undo-tree-id27424 . -166) (undo-tree-id27425 . -166) (undo-tree-id27426 . -166) (undo-tree-id27427 . -166) (undo-tree-id27428 . -166) (undo-tree-id27429 . -166) (undo-tree-id27430 . -166) (undo-tree-id27431 . -166) (undo-tree-id27432 . -166) (undo-tree-id27433 . -166) (undo-tree-id27434 . -166) (undo-tree-id27435 . -166) (undo-tree-id27436 . -166) (undo-tree-id27437 . -166) (undo-tree-id27438 . -166) (undo-tree-id27439 . -166) (undo-tree-id27440 . -166) (undo-tree-id27441 . -166) (undo-tree-id27442 . -166) (undo-tree-id27443 . -166) (undo-tree-id27444 . -166) (undo-tree-id27445 . -166) (undo-tree-id27446 . -166) (undo-tree-id27447 . -166) (undo-tree-id27448 . -166) (undo-tree-id27449 . -166) (undo-tree-id27450 . -166) (undo-tree-id27451 . -166) (undo-tree-id27452 . -166) (undo-tree-id27453 . -166) (undo-tree-id27454 . -166) (undo-tree-id27455 . -166) (undo-tree-id27456 . -166) (undo-tree-id27457 . -166) (undo-tree-id27458 . -166) (undo-tree-id27459 . -168) (undo-tree-id27460 . -168) (undo-tree-id27461 . -168) (undo-tree-id27462 . -168) (undo-tree-id27463 . -168) (undo-tree-id27464 . -168) (undo-tree-id27465 . -168) (undo-tree-id27466 . -168) (undo-tree-id27467 . -168) (undo-tree-id27468 . -168) (undo-tree-id27469 . -168) (undo-tree-id27470 . -168) (undo-tree-id27471 . -168) (undo-tree-id27472 . -168) (undo-tree-id27473 . -168) (undo-tree-id27474 . -169) (undo-tree-id27475 . -169) (undo-tree-id27476 . -169) (undo-tree-id27477 . -169) (undo-tree-id27478 . -169) (undo-tree-id27479 . -169) (undo-tree-id27480 . -169) (undo-tree-id27481 . -169) (undo-tree-id27482 . -169) (undo-tree-id27483 . -169) (undo-tree-id27484 . -169) (undo-tree-id27485 . -169) (undo-tree-id27486 . -169) (undo-tree-id27487 . -169) (undo-tree-id27488 . -169) (undo-tree-id27489 . -169) (undo-tree-id27490 . -169) (undo-tree-id27491 . -170) (undo-tree-id27492 . -170) (undo-tree-id27493 . -170) (undo-tree-id27494 . -170) (undo-tree-id27495 . -170) (undo-tree-id27496 . -170) (undo-tree-id27497 . -170) (undo-tree-id27498 . -170) (undo-tree-id27499 . -170) (undo-tree-id27500 . -170) (undo-tree-id27501 . -170) (undo-tree-id27502 . -170) (undo-tree-id27503 . -170) (undo-tree-id27504 . -170) (undo-tree-id27505 . -170) (undo-tree-id27506 . -170) (undo-tree-id27507 . -170) (undo-tree-id27508 . -170) (undo-tree-id27509 . -170) (undo-tree-id27510 . -170) (undo-tree-id27511 . -170) (undo-tree-id27512 . -170) (undo-tree-id27513 . -169) (undo-tree-id27514 . -169) (undo-tree-id27515 . -169) (undo-tree-id27516 . -169) (undo-tree-id27517 . -169) (undo-tree-id27518 . -169) (undo-tree-id27519 . -169) (undo-tree-id27520 . -169) (undo-tree-id27521 . -169) (undo-tree-id27522 . -169) (undo-tree-id27523 . -169) (undo-tree-id27524 . -169) (undo-tree-id27525 . -169) (undo-tree-id27526 . -169) (undo-tree-id27527 . -169) (undo-tree-id27528 . -169) (undo-tree-id27529 . -169) (undo-tree-id27530 . -169) (undo-tree-id27531 . -169) (undo-tree-id27532 . -169) (undo-tree-id27533 . -169) (undo-tree-id27534 . -169) (undo-tree-id27535 . -169) (undo-tree-id27536 . -169) (undo-tree-id27537 . -169) (undo-tree-id27538 . -169) (undo-tree-id27539 . -169) (undo-tree-id27540 . -169) (undo-tree-id27541 . -169) (undo-tree-id27542 . -169) (undo-tree-id27543 . -169) (undo-tree-id27544 . -169) (undo-tree-id27545 . -169) (undo-tree-id27546 . -169) (undo-tree-id27547 . -169) (undo-tree-id27548 . -169) (undo-tree-id27549 . -169) (undo-tree-id27550 . -169) (undo-tree-id27551 . -169) (undo-tree-id27552 . -169) (undo-tree-id27553 . -169) (undo-tree-id27554 . -169) (undo-tree-id27555 . -169) (undo-tree-id27556 . -169) (undo-tree-id27557 . -169) (undo-tree-id27558 . -169) (undo-tree-id27559 . -169) (undo-tree-id27560 . -171) (undo-tree-id27561 . -171) (undo-tree-id27562 . -171) (undo-tree-id27563 . -171) (undo-tree-id27564 . -171) (undo-tree-id27565 . -171) (undo-tree-id27566 . -171) (undo-tree-id27567 . -171) (undo-tree-id27568 . -171) (undo-tree-id27569 . -171) (undo-tree-id27570 . -171) (undo-tree-id27571 . -171) (undo-tree-id27572 . -171) (undo-tree-id27573 . -171) (undo-tree-id27574 . -171) (undo-tree-id27575 . -180) (undo-tree-id27576 . -180) (undo-tree-id27577 . -180) (undo-tree-id27578 . -180) (undo-tree-id27579 . -180) (undo-tree-id27580 . -180) (undo-tree-id27581 . -180) (undo-tree-id27582 . -180) (undo-tree-id27583 . -180) (undo-tree-id27584 . -180) (undo-tree-id27585 . -180) (undo-tree-id27586 . -180) (undo-tree-id27587 . -180) (undo-tree-id27588 . -180) (undo-tree-id27589 . -180) (undo-tree-id27590 . -186) (undo-tree-id27591 . -186) (undo-tree-id27592 . -186) (undo-tree-id27593 . -186) (undo-tree-id27594 . -186) (undo-tree-id27595 . -186) (undo-tree-id27596 . -186) (undo-tree-id27597 . -186) (undo-tree-id27598 . -186) (undo-tree-id27599 . -186) (undo-tree-id27600 . -186) (undo-tree-id27601 . -186) (undo-tree-id27602 . -186) (undo-tree-id27603 . -186) (undo-tree-id27604 . -186) (undo-tree-id27605 . -186) (undo-tree-id27606 . -186) (undo-tree-id27607 . -186) (undo-tree-id27608 . -186) (undo-tree-id27609 . -186) (undo-tree-id27610 . -186) (undo-tree-id27611 . -186) (undo-tree-id27612 . -186) (undo-tree-id27613 . -186) (undo-tree-id27614 . -186) (undo-tree-id27615 . -186) (undo-tree-id27616 . -186) (undo-tree-id27617 . -186) (undo-tree-id27618 . -186) (undo-tree-id27619 . -186) (undo-tree-id27620 . -186) (undo-tree-id27621 . -186) (undo-tree-id27622 . -186) (undo-tree-id27623 . -186) (undo-tree-id27624 . -186) (undo-tree-id27625 . -186) (undo-tree-id27626 . -186) (undo-tree-id27627 . -186) (undo-tree-id27628 . -186) (undo-tree-id27629 . -186) (undo-tree-id27630 . -164) (5623 . 5787) (#(" the accuracy would be roughly the same, and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 156 162 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5645) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5645) (undo-tree-id27631 . -1) (undo-tree-id27632 . -1) (undo-tree-id27633 . -1)) nil (25772 50970 754352 814000) 0 nil])
([nil nil ((5648 . 5649) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5648) (t 25772 50970 814817 842000)) nil (25772 50977 982555 59000) 0 nil])
([nil nil ((5646 . 5810) (#("- and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove
- The accuracy would be roughly the same" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 37 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 37 38 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 38 116 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 116 117 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 117 123 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 123 124 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 124 125 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 125 126 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 126 164 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5646) (undo-tree-id28756 . -164) (undo-tree-id28757 . -164) (undo-tree-id28758 . 38) (undo-tree-id28759 . -126) (undo-tree-id28760 . -126) (undo-tree-id28761 . 37) (undo-tree-id28762 . -126) (undo-tree-id28763 . -164) (undo-tree-id28764 . -126) (undo-tree-id28765 . -126) (undo-tree-id28766 . -126) (undo-tree-id28767 . -126) (undo-tree-id28768 . -126) (undo-tree-id28769 . -126) (undo-tree-id28770 . -126) (undo-tree-id28771 . -126) (undo-tree-id28772 . -126) (undo-tree-id28773 . -126) (undo-tree-id28774 . -126) (undo-tree-id28775 . -126) (undo-tree-id28776 . -126) (undo-tree-id28777 . -126) (undo-tree-id28778 . -126) (undo-tree-id28779 . -126) (undo-tree-id28780 . -126) (undo-tree-id28781 . -126) (undo-tree-id28782 . -126) (undo-tree-id28783 . -126) (undo-tree-id28784 . -126) (undo-tree-id28785 . -126) (undo-tree-id28786 . -126) (undo-tree-id28787 . -126) (undo-tree-id28788 . -126) (undo-tree-id28789 . -126) (undo-tree-id28790 . -126) (undo-tree-id28791 . -126) (undo-tree-id28792 . -126) (undo-tree-id28793 . -126) (undo-tree-id28794 . -126) (undo-tree-id28795 . -126) (undo-tree-id28796 . -128) (undo-tree-id28797 . -128) (undo-tree-id28798 . -128) (undo-tree-id28799 . -128) (undo-tree-id28800 . -128) (undo-tree-id28801 . -128) (undo-tree-id28802 . -128) (undo-tree-id28803 . -128) (undo-tree-id28804 . -128) (undo-tree-id28805 . -128) (undo-tree-id28806 . -128) (undo-tree-id28807 . -128) (undo-tree-id28808 . -128) (undo-tree-id28809 . -128) (undo-tree-id28810 . -128) (undo-tree-id28811 . -137) (undo-tree-id28812 . -137) (undo-tree-id28813 . -137) (undo-tree-id28814 . -137) (undo-tree-id28815 . -137) (undo-tree-id28816 . -137) (undo-tree-id28817 . -137) (undo-tree-id28818 . -137) (undo-tree-id28819 . -137) (undo-tree-id28820 . -137) (undo-tree-id28821 . -137) (undo-tree-id28822 . -137) (undo-tree-id28823 . -137) (undo-tree-id28824 . -137) (undo-tree-id28825 . -137) (undo-tree-id28826 . -143) (undo-tree-id28827 . -143) (undo-tree-id28828 . -143) (undo-tree-id28829 . -143) (undo-tree-id28830 . -143) (undo-tree-id28831 . -143) (undo-tree-id28832 . -143) (undo-tree-id28833 . -143) (undo-tree-id28834 . -146) (undo-tree-id28835 . -146) (undo-tree-id28836 . -146) (undo-tree-id28837 . -146) (undo-tree-id28838 . -146) (undo-tree-id28839 . -146) (undo-tree-id28840 . -146) (undo-tree-id28841 . -146) (undo-tree-id28842 . -154) (undo-tree-id28843 . -154) (undo-tree-id28844 . -154) (undo-tree-id28845 . -154) (undo-tree-id28846 . -154) (undo-tree-id28847 . -154) (undo-tree-id28848 . -154) (undo-tree-id28849 . -154) (undo-tree-id28850 . -158) (undo-tree-id28851 . -158) (undo-tree-id28852 . -158) (undo-tree-id28853 . -158) (undo-tree-id28854 . -158) (undo-tree-id28855 . -158) (undo-tree-id28856 . -158) (undo-tree-id28857 . -158) (undo-tree-id28858 . -163) (undo-tree-id28859 . -163) (undo-tree-id28860 . -163) (undo-tree-id28861 . -163) (undo-tree-id28862 . -163) (undo-tree-id28863 . -163) (undo-tree-id28864 . -163) (undo-tree-id28865 . -163) (undo-tree-id28866 . -163) (undo-tree-id28867 . -163) (undo-tree-id28868 . -163) (undo-tree-id28869 . -163) (undo-tree-id28870 . -163) (undo-tree-id28871 . -163) (undo-tree-id28872 . -163) (undo-tree-id28873 . -164) (undo-tree-id28874 . -164) (undo-tree-id28875 . -164) (undo-tree-id28876 . -164) (undo-tree-id28877 . -164) (undo-tree-id28878 . -164) (undo-tree-id28879 . -164) (undo-tree-id28880 . -164) (undo-tree-id28881 . -164) (undo-tree-id28882 . -164) (undo-tree-id28883 . -164) (undo-tree-id28884 . -164) (undo-tree-id28885 . -164) (undo-tree-id28886 . -164) (undo-tree-id28887 . -164) (undo-tree-id28888 . -164) (undo-tree-id28889 . -164) (undo-tree-id28890 . -164) (undo-tree-id28891 . -164) (undo-tree-id28892 . -164) (undo-tree-id28893 . -164) (undo-tree-id28894 . -164) (undo-tree-id28895 . -164) (undo-tree-id28896 . -164) (undo-tree-id28897 . -164) (undo-tree-id28898 . -164) (undo-tree-id28899 . -164) (undo-tree-id28900 . -164) (undo-tree-id28901 . -164) (undo-tree-id28902 . -164) (undo-tree-id28903 . -164) (undo-tree-id28904 . -164) (undo-tree-id28905 . -164) (undo-tree-id28906 . -164) (undo-tree-id28907 . -164) (undo-tree-id28908 . -164) (undo-tree-id28909 . -164) (undo-tree-id28910 . -164) (undo-tree-id28911 . -164) (undo-tree-id28912 . -164) (undo-tree-id28913 . -164) (undo-tree-id28914 . -164) (undo-tree-id28915 . -164) (undo-tree-id28916 . -164) (undo-tree-id28917 . -164) (undo-tree-id28918 . -164) (undo-tree-id28919 . -164) (undo-tree-id28920 . -164) (undo-tree-id28921 . -164) (undo-tree-id28922 . -164) (undo-tree-id28923 . -164) (undo-tree-id28924 . -164) (undo-tree-id28925 . -164) (undo-tree-id28926 . -164) (undo-tree-id28927 . -124) (5646 . 5770) (#(" and it would allow us to choose any output activation function we want. If you make this change, also make sure to remove" 0 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 37 115 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 115 116 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 116 122 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5686) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5686) (undo-tree-id28928 . -1) (undo-tree-id28929 . -1) (undo-tree-id28930 . -1) (t 25772 50978 43483 791000)) nil (25772 50982 984715 4000) 0 nil])
([nil nil ((#("and " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5689) (undo-tree-id29049 . -3) (undo-tree-id29050 . 4) (undo-tree-id29051 . -4) (t 25772 50983 43939 472000)) nil (25772 51006 696117 697000) 0 nil])
([nil nil ((#("it " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5689) (undo-tree-id29046 . -2) (undo-tree-id29047 . 3) (undo-tree-id29048 . -3)) nil (25772 51006 696113 866000) 0 nil])
([nil nil ((#("would " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5689) (undo-tree-id29043 . -5) (undo-tree-id29044 . 6) (undo-tree-id29045 . -6)) nil (25772 51006 696111 68000) 0 nil])
([nil nil ((5689 . 5690) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5689)) nil (25772 51006 696108 502000) 0 nil])
([nil nil ((5694 . 5695)) nil (25772 51006 696107 467000) 0 nil])
([nil nil ((#("output " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5713) (undo-tree-id29041 . -6) (undo-tree-id29042 . -7)) nil (25772 51007 621430 359000) 0 nil])
([nil nil ((5732 . 5733)) nil (25772 51019 627821 973000) 0 nil] [nil nil ((#("n " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5731) (undo-tree-id28987 . -1) (undo-tree-id28988 . -2) (undo-tree-id28989 . -2) (undo-tree-id28990 . -2) (undo-tree-id28991 . -2) (undo-tree-id28992 . -2) (undo-tree-id28993 . -2) (undo-tree-id28994 . -2) (undo-tree-id28995 . -2) (undo-tree-id28996 . -2) (undo-tree-id28997 . -2) (undo-tree-id28998 . -2) (undo-tree-id28999 . -2) (undo-tree-id29000 . -2) (undo-tree-id29001 . -2) (undo-tree-id29002 . -2) (undo-tree-id29003 . -1) (undo-tree-id29004 . -1) (undo-tree-id29005 . -1) (undo-tree-id29006 . -1) (undo-tree-id29007 . -1) (undo-tree-id29008 . -1) (undo-tree-id29009 . -1) (undo-tree-id29010 . -1) (undo-tree-id29011 . -1) (undo-tree-id29012 . -1) (undo-tree-id29013 . -1) (undo-tree-id29014 . -1) (undo-tree-id29015 . -1) (undo-tree-id29016 . -1) (undo-tree-id29017 . -1) (undo-tree-id29018 . -1) (undo-tree-id29019 . -1) (undo-tree-id29020 . -1) (undo-tree-id29021 . -1) (undo-tree-id29022 . -1) (undo-tree-id29023 . -1) (undo-tree-id29024 . -1) (undo-tree-id29025 . -2) (undo-tree-id29026 . -2) (undo-tree-id29027 . -2) (undo-tree-id29028 . -2) (undo-tree-id29029 . -2) (undo-tree-id29030 . -2) (undo-tree-id29031 . -2) (undo-tree-id29032 . -2) (undo-tree-id29033 . -2) (undo-tree-id29034 . -2) (undo-tree-id29035 . -2) (undo-tree-id29036 . -2) (undo-tree-id29037 . -2) (undo-tree-id29038 . -2) (undo-tree-id29039 . -2) (undo-tree-id29040 . -2)) ((5731 . 5733)) (25772 51006 696409 91000) 0 nil])
([nil nil ((#("we want. If you make this change, also make sure to remove
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 51 52 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 52 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 58 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5734) (undo-tree-id29137 . -58) (undo-tree-id29138 . -58) (undo-tree-id29139 . -58) (undo-tree-id29140 . -1) (undo-tree-id29141 . -1) (undo-tree-id29142 . -1) (undo-tree-id29143 . -1) (undo-tree-id29144 . -1) (undo-tree-id29145 . -1) (undo-tree-id29146 . -1) (undo-tree-id29147 . -1) (undo-tree-id29148 . -1) (undo-tree-id29149 . -1) (undo-tree-id29150 . -1) (undo-tree-id29151 . -1) (undo-tree-id29152 . -1) (undo-tree-id29153 . -1) (undo-tree-id29154 . -1) (undo-tree-id29155 . -1) (undo-tree-id29156 . -1) (undo-tree-id29157 . -1) (undo-tree-id29158 . -1) (undo-tree-id29159 . -1) (undo-tree-id29160 . -1) (undo-tree-id29161 . -1) (undo-tree-id29162 . -1) (undo-tree-id29163 . -1) (undo-tree-id29164 . -1) (undo-tree-id29165 . -1) (undo-tree-id29166 . -1) (undo-tree-id29167 . -1) (undo-tree-id29168 . -1) (undo-tree-id29169 . -1) (undo-tree-id29170 . -1) (undo-tree-id29171 . -1) (undo-tree-id29172 . -1) (undo-tree-id29173 . -1) (undo-tree-id29174 . -1) (undo-tree-id29175 . -1) (undo-tree-id29176 . -1) (undo-tree-id29177 . -1) (undo-tree-id29178 . -1) (undo-tree-id29179 . -1) (undo-tree-id29180 . -1) (undo-tree-id29181 . -1) (undo-tree-id29182 . -1) (undo-tree-id29183 . -1) (undo-tree-id29184 . -1) (undo-tree-id29185 . -1) (undo-tree-id29186 . -1) (undo-tree-id29187 . -1) (undo-tree-id29188 . -1) (undo-tree-id29189 . -1) (undo-tree-id29190 . -1) (undo-tree-id29191 . -1) (undo-tree-id29192 . -1) (undo-tree-id29193 . -1) (undo-tree-id29194 . -1) (undo-tree-id29195 . -1) (undo-tree-id29196 . -1) (undo-tree-id29197 . -1) (undo-tree-id29198 . -1) (undo-tree-id29199 . -1) (undo-tree-id29200 . -1) (undo-tree-id29201 . -1) (undo-tree-id29202 . -1) (undo-tree-id29203 . -1) (undo-tree-id29204 . -1) (undo-tree-id29205 . -1) (undo-tree-id29206 . -1) (undo-tree-id29207 . -1) (undo-tree-id29208 . -1) (undo-tree-id29209 . -1) (undo-tree-id29210 . -59) (undo-tree-id29211 . -58) (undo-tree-id29212 . -1) (undo-tree-id29213 . -1) (undo-tree-id29214 . -1) (undo-tree-id29215 . -1) (undo-tree-id29216 . -1) (undo-tree-id29217 . -1) (undo-tree-id29218 . -1) (undo-tree-id29219 . -1) (undo-tree-id29220 . -1) (undo-tree-id29221 . -1) (undo-tree-id29222 . -1) (undo-tree-id29223 . -1) (undo-tree-id29224 . -1) (undo-tree-id29225 . -1) (undo-tree-id29226 . -1) (undo-tree-id29227 . -1) (undo-tree-id29228 . -1) (undo-tree-id29229 . -1) (undo-tree-id29230 . -1) (undo-tree-id29231 . -1) (undo-tree-id29232 . -1) (undo-tree-id29233 . -1) (undo-tree-id29234 . -6) (undo-tree-id29235 . -6) (undo-tree-id29236 . -6) (undo-tree-id29237 . -6) (undo-tree-id29238 . -6) (undo-tree-id29239 . -6) (undo-tree-id29240 . -6) (undo-tree-id29241 . -6) (undo-tree-id29242 . -6) (undo-tree-id29243 . -6) (undo-tree-id29244 . -6) (undo-tree-id29245 . -6) (undo-tree-id29246 . -6) (undo-tree-id29247 . -6) (undo-tree-id29248 . -6) (undo-tree-id29249 . -6) (undo-tree-id29250 . -6) (undo-tree-id29251 . -6) (undo-tree-id29252 . -6) (undo-tree-id29253 . -6) (undo-tree-id29254 . -6) (undo-tree-id29255 . -6) (undo-tree-id29256 . -7) (undo-tree-id29257 . -7) (undo-tree-id29258 . -7) (undo-tree-id29259 . -7) (undo-tree-id29260 . -7) (undo-tree-id29261 . -7) (undo-tree-id29262 . -7) (undo-tree-id29263 . -7) (undo-tree-id29264 . -7) (undo-tree-id29265 . -7) (undo-tree-id29266 . -7) (undo-tree-id29267 . -7) (undo-tree-id29268 . -7) (undo-tree-id29269 . -7) (undo-tree-id29270 . -7) (undo-tree-id29271 . -7) (undo-tree-id29272 . -7) (undo-tree-id29273 . -7) (undo-tree-id29274 . -7) (undo-tree-id29275 . -7) (undo-tree-id29276 . -7) (undo-tree-id29277 . -7) (undo-tree-id29278 . -7) (undo-tree-id29279 . -7) (undo-tree-id29280 . -7) (undo-tree-id29281 . -7) (undo-tree-id29282 . -7) (undo-tree-id29283 . -7) (undo-tree-id29284 . -7) (undo-tree-id29285 . -7) (undo-tree-id29286 . -7) (undo-tree-id29287 . -7) (undo-tree-id29288 . -7) (undo-tree-id29289 . -7) (undo-tree-id29290 . -7) (undo-tree-id29291 . -7) (undo-tree-id29292 . -58) (undo-tree-id29293 . -58) (undo-tree-id29294 . -58) (undo-tree-id29295 . -58) (undo-tree-id29296 . -58) (undo-tree-id29297 . -58) (undo-tree-id29298 . -58) (undo-tree-id29299 . -58) (undo-tree-id29300 . -58) (undo-tree-id29301 . -58) (undo-tree-id29302 . -58) (undo-tree-id29303 . -58) (undo-tree-id29304 . -58) (undo-tree-id29305 . -58) (undo-tree-id29306 . -58) (undo-tree-id29307 . -58) (undo-tree-id29308 . -58) (undo-tree-id29309 . -58) (undo-tree-id29310 . -58) (undo-tree-id29311 . -58) (undo-tree-id29312 . -58) (undo-tree-id29313 . -58) (undo-tree-id29314 . -58) (undo-tree-id29315 . -58) (undo-tree-id29316 . -58) (undo-tree-id29317 . -58) (undo-tree-id29318 . -58) (undo-tree-id29319 . -58) (undo-tree-id29320 . -58) (undo-tree-id29321 . -58) (undo-tree-id29322 . -59) 5792) nil (25772 51019 627815 234000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5731) (undo-tree-id28931 . -1) (undo-tree-id28932 . -1) (undo-tree-id28933 . -1) (undo-tree-id28934 . -1) (undo-tree-id28935 . -1) (undo-tree-id28936 . -1) (undo-tree-id28937 . -1) (undo-tree-id28938 . -1) (undo-tree-id28939 . -1) (undo-tree-id28940 . -1) (undo-tree-id28941 . -1) (undo-tree-id28942 . -1) (undo-tree-id28943 . -1) (undo-tree-id28944 . -1) (undo-tree-id28945 . -1) (undo-tree-id28946 . -1) (undo-tree-id28947 . -1) (undo-tree-id28948 . -1) (undo-tree-id28949 . -1) (undo-tree-id28950 . -1) (undo-tree-id28951 . -1) (undo-tree-id28952 . -1) (undo-tree-id28953 . -1) (undo-tree-id28954 . -1) (undo-tree-id28955 . -1) (undo-tree-id28956 . -1) (undo-tree-id28957 . -1) (undo-tree-id28958 . -1) (undo-tree-id28959 . -1) (undo-tree-id28960 . -1) (undo-tree-id28961 . -1) (undo-tree-id28962 . -1) (undo-tree-id28963 . -1) (undo-tree-id28964 . -1) (undo-tree-id28965 . -1) (undo-tree-id28966 . -1) (undo-tree-id28967 . -1) (undo-tree-id28968 . -1) (undo-tree-id28969 . -1) (undo-tree-id28970 . -1) (undo-tree-id28971 . -1) (undo-tree-id28972 . -1) (undo-tree-id28973 . -1) (undo-tree-id28974 . -1) (undo-tree-id28975 . -1) (undo-tree-id28976 . -1) (undo-tree-id28977 . -1) (undo-tree-id28978 . -1) (undo-tree-id28979 . -1) (undo-tree-id28980 . -1) (undo-tree-id28981 . -1) (undo-tree-id28982 . -1) (undo-tree-id28983 . -1) (undo-tree-id28984 . -1) (undo-tree-id28985 . -1) (undo-tree-id28986 . -1) 5732) ((5731 . 5732)) (25772 51006 696065 696000) 0 nil])
([nil nil ((5734 . 5735)) nil (25772 51019 627268 107000) 0 nil])
nil
([nil nil ((5735 . 5736)) nil (25772 51019 627267 441000) 0 nil])
([nil nil ((5736 . 5737)) nil (25772 51019 627266 571000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5736) (undo-tree-id29118 . -1) (undo-tree-id29119 . -1) (undo-tree-id29120 . -1) (undo-tree-id29121 . -1) (undo-tree-id29122 . -1) (undo-tree-id29123 . -1) (undo-tree-id29124 . -1) (undo-tree-id29125 . -1) (undo-tree-id29126 . -1) (undo-tree-id29127 . -1) (undo-tree-id29128 . -1) (undo-tree-id29129 . -1) (undo-tree-id29130 . -1) (undo-tree-id29131 . -1) (undo-tree-id29132 . -1) (undo-tree-id29133 . -1) (undo-tree-id29134 . -1) (undo-tree-id29135 . -1) (undo-tree-id29136 . -1)) nil (25772 51019 627264 258000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5735) (undo-tree-id29052 . -1) (undo-tree-id29053 . -1) (undo-tree-id29054 . -1) (undo-tree-id29055 . -1) (undo-tree-id29056 . -1) (undo-tree-id29057 . -1) (undo-tree-id29058 . -1) (undo-tree-id29059 . -1) (undo-tree-id29060 . -1) (undo-tree-id29061 . -1) (undo-tree-id29062 . -1) (undo-tree-id29063 . -1) (undo-tree-id29064 . -1) (undo-tree-id29065 . -1) (undo-tree-id29066 . -1) (undo-tree-id29067 . -1) (undo-tree-id29068 . -1) (undo-tree-id29069 . -1) (undo-tree-id29070 . -1) (undo-tree-id29071 . -1) (undo-tree-id29072 . -1) (undo-tree-id29073 . -1) (undo-tree-id29074 . -1) (undo-tree-id29075 . -1) (undo-tree-id29076 . -1) (undo-tree-id29077 . -1) (undo-tree-id29078 . -1) (undo-tree-id29079 . -1) (undo-tree-id29080 . -1) (undo-tree-id29081 . -1) (undo-tree-id29082 . -1) (undo-tree-id29083 . -1) (undo-tree-id29084 . -1) (undo-tree-id29085 . -1) (undo-tree-id29086 . -1) (undo-tree-id29087 . -1) (undo-tree-id29088 . -1) (undo-tree-id29089 . -1) (undo-tree-id29090 . -1) (undo-tree-id29091 . -1) (undo-tree-id29092 . -1) (undo-tree-id29093 . -1) (undo-tree-id29094 . -1) (undo-tree-id29095 . -1) (undo-tree-id29096 . -1) (undo-tree-id29097 . -1) (undo-tree-id29098 . -1) (undo-tree-id29099 . -1) (undo-tree-id29100 . -1) (undo-tree-id29101 . -1) (undo-tree-id29102 . -1) (undo-tree-id29103 . -1) (undo-tree-id29104 . -1) (undo-tree-id29105 . -1) (undo-tree-id29106 . -1) (undo-tree-id29107 . -1) (undo-tree-id29108 . -1) (undo-tree-id29109 . -1) (undo-tree-id29110 . -1) (undo-tree-id29111 . -1) (undo-tree-id29112 . -1) (undo-tree-id29113 . -1) (undo-tree-id29114 . -1) (undo-tree-id29115 . -1) (undo-tree-id29116 . -1) (undo-tree-id29117 . -1)) nil (25772 51019 627209 73000) 0 nil])
([nil nil ((5770 . 5771) (t 25772 51019 739166 410000) 5736) nil (25772 51032 124170 133000) 0 nil])
([nil nil ((6003 . 6005) (t 25772 51032 180216 901000)) nil (25772 51047 319455 896000) 0 nil])
([nil nil ((#("# return_sequences=True from the second (now last) recurrent layer:
" 0 2 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 9 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 19 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 23 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 24 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 28 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 40 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 41 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 49 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 50 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 6003) (undo-tree-id29323 . -67) (undo-tree-id29324 . 66) (undo-tree-id29325 . -1) (undo-tree-id29326 . -1) (undo-tree-id29327 . -1) (undo-tree-id29328 . -1) (undo-tree-id29329 . -1) (undo-tree-id29330 . -1) (undo-tree-id29331 . -1) (undo-tree-id29332 . -1) (undo-tree-id29333 . -1) (undo-tree-id29334 . -1) (undo-tree-id29335 . -1) (undo-tree-id29336 . -1) (undo-tree-id29337 . -1) (undo-tree-id29338 . -1) (undo-tree-id29339 . -1) (undo-tree-id29340 . -1) (undo-tree-id29341 . -1) (undo-tree-id29342 . -1) (undo-tree-id29343 . -1) (undo-tree-id29344 . -1) (undo-tree-id29345 . -1) (undo-tree-id29346 . -1) (undo-tree-id29347 . -1) (undo-tree-id29348 . -1) (undo-tree-id29349 . -2) (undo-tree-id29350 . -1) (undo-tree-id29351 . -1) (undo-tree-id29352 . -1) (undo-tree-id29353 . -1) (undo-tree-id29354 . -1) (undo-tree-id29355 . -1) (undo-tree-id29356 . -1) (undo-tree-id29357 . -1) (undo-tree-id29358 . -1) (undo-tree-id29359 . -1) (undo-tree-id29360 . -1) (undo-tree-id29361 . -2) (undo-tree-id29362 . -2) (undo-tree-id29363 . -2) (undo-tree-id29364 . -2) (undo-tree-id29365 . -2) (undo-tree-id29366 . -2) (undo-tree-id29367 . -2) (undo-tree-id29368 . -2) (undo-tree-id29369 . -2) (undo-tree-id29370 . -2) (undo-tree-id29371 . -2) (undo-tree-id29372 . -68) 6005 (t 25772 51047 381472 923000)) nil (25772 51060 145154 614000) 0 nil])
([nil nil ((6229 . 6230) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6229) (undo-tree-id29463 . -1) (undo-tree-id29464 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6230) (undo-tree-id29465 . -1) 6175 (t 25772 51060 206510 286000)) nil (25772 51079 879395 902000) 0 nil])
([nil nil ((6174 . 6175) 6173) nil (25772 51096 323051 996000) 0 nil] [nil nil ((#("This model converges faster and performs just as well. and you can change the output activation function if you wanted.
" 0 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 54 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 55 119 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 119 120 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6175) (undo-tree-id29387 . -119) (undo-tree-id29388 . 120) (undo-tree-id29389 . -54) (undo-tree-id29390 . -1) (undo-tree-id29391 . -1) (undo-tree-id29392 . -1) (undo-tree-id29393 . -1) (undo-tree-id29394 . -1) (undo-tree-id29395 . -1) (undo-tree-id29396 . -1) (undo-tree-id29397 . -1) (undo-tree-id29398 . -56) (undo-tree-id29399 . -56) (undo-tree-id29400 . -56) (undo-tree-id29401 . -56) (undo-tree-id29402 . -56) (undo-tree-id29403 . -56) (undo-tree-id29404 . -56) (undo-tree-id29405 . -56) (undo-tree-id29406 . -56) (undo-tree-id29407 . -56) (undo-tree-id29408 . -56) (undo-tree-id29409 . -56) (undo-tree-id29410 . -56) (undo-tree-id29411 . -56) (undo-tree-id29412 . -56) (undo-tree-id29413 . -56) (undo-tree-id29414 . -1) (undo-tree-id29415 . -1) (undo-tree-id29416 . -1) (undo-tree-id29417 . -1) (undo-tree-id29418 . -1) (undo-tree-id29419 . -1) (undo-tree-id29420 . -1) (undo-tree-id29421 . -1) (undo-tree-id29422 . -54) (undo-tree-id29423 . -54) (undo-tree-id29424 . -54) (undo-tree-id29425 . -54) (undo-tree-id29426 . -54) (undo-tree-id29427 . -54) (undo-tree-id29428 . -54) (undo-tree-id29429 . -54) (undo-tree-id29430 . -54) (undo-tree-id29431 . -54) (undo-tree-id29432 . -54) (undo-tree-id29433 . -54) (undo-tree-id29434 . -54) (undo-tree-id29435 . -54) (undo-tree-id29436 . -54) (undo-tree-id29437 . -54) (undo-tree-id29438 . -54) (undo-tree-id29439 . -54) (undo-tree-id29440 . -54) (undo-tree-id29441 . -54) (undo-tree-id29442 . -54) (undo-tree-id29443 . -54) (undo-tree-id29444 . -54) (undo-tree-id29445 . -54) (undo-tree-id29446 . -54) (undo-tree-id29447 . -54) (undo-tree-id29448 . -54) (undo-tree-id29449 . -54) (undo-tree-id29450 . -54) (undo-tree-id29451 . -54) (undo-tree-id29452 . -54) (undo-tree-id29453 . -54) (undo-tree-id29454 . -54) (undo-tree-id29455 . -54) (undo-tree-id29456 . -54) (undo-tree-id29457 . -54) (undo-tree-id29458 . -54) (undo-tree-id29459 . -54) (undo-tree-id29460 . -54) (undo-tree-id29461 . -54) (undo-tree-id29462 . -120) 6229) ((6175 . 6295)) (25772 51079 190657 235000) 0 nil])
([nil nil ((6176 . 6177)) nil (25772 51096 323051 162000) 0 nil])
([nil nil ((5735 . 5737)) ((#("- " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5735) (undo-tree-id29466 . -2) (undo-tree-id29467 . -2) (undo-tree-id29468 . -2) (undo-tree-id29469 . -2) (undo-tree-id29470 . -2) (undo-tree-id29471 . -2) (undo-tree-id29472 . -2) (undo-tree-id29473 . -2) (undo-tree-id29474 . -2) (undo-tree-id29475 . -1) (undo-tree-id29476 . -1) (undo-tree-id29477 . -1) (undo-tree-id29478 . -1) (undo-tree-id29479 . -1) (undo-tree-id29480 . -1) (undo-tree-id29481 . -1) (undo-tree-id29482 . -1) (undo-tree-id29483 . -1) (undo-tree-id29484 . -1) (undo-tree-id29485 . -1) (undo-tree-id29486 . -1) (undo-tree-id29487 . -1) (undo-tree-id29488 . -1) (undo-tree-id29489 . -1) (undo-tree-id29490 . -1) (undo-tree-id29491 . -1)) (25772 51076 649273 40000) 0 nil])
([nil nil ((#("This model converges faster and performs just as well. and you can change the output activation function if you wanted." 0 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 54 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 55 119 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6177) (undo-tree-id29521 . -118) (undo-tree-id29522 . 119) (undo-tree-id29523 . -118) (undo-tree-id29524 . -118) (undo-tree-id29525 . -1) (undo-tree-id29526 . -1) (undo-tree-id29527 . -1) (undo-tree-id29528 . -1) (undo-tree-id29529 . -1) (undo-tree-id29530 . -1) (undo-tree-id29531 . -1) (undo-tree-id29532 . -1) (undo-tree-id29533 . -56) (undo-tree-id29534 . -56) (undo-tree-id29535 . -56) (undo-tree-id29536 . -56) (undo-tree-id29537 . -56) (undo-tree-id29538 . -56) (undo-tree-id29539 . -56) (undo-tree-id29540 . -56) (undo-tree-id29541 . -56) (undo-tree-id29542 . -56) (undo-tree-id29543 . -56) (undo-tree-id29544 . -56) (undo-tree-id29545 . -56) (undo-tree-id29546 . -56) (undo-tree-id29547 . -56) (undo-tree-id29548 . -56) (undo-tree-id29549 . -1) (undo-tree-id29550 . -1) (undo-tree-id29551 . -1) (undo-tree-id29552 . -1) (undo-tree-id29553 . -1) (undo-tree-id29554 . -1) (undo-tree-id29555 . -1) (undo-tree-id29556 . -1) (undo-tree-id29557 . -54) (undo-tree-id29558 . -54) (undo-tree-id29559 . -54) (undo-tree-id29560 . -54) (undo-tree-id29561 . -54) (undo-tree-id29562 . -54) (undo-tree-id29563 . -54) (undo-tree-id29564 . -54) (undo-tree-id29565 . -54) (undo-tree-id29566 . -54) (undo-tree-id29567 . -54) (undo-tree-id29568 . -54) (undo-tree-id29569 . -54) (undo-tree-id29570 . -54) (undo-tree-id29571 . -54) (undo-tree-id29572 . -54) (undo-tree-id29573 . -54) (undo-tree-id29574 . -54) (undo-tree-id29575 . -54) (undo-tree-id29576 . -54) (undo-tree-id29577 . -54) (undo-tree-id29578 . -54) (undo-tree-id29579 . -54) (undo-tree-id29580 . -54) (undo-tree-id29581 . -54) (undo-tree-id29582 . -54) (undo-tree-id29583 . -54) (undo-tree-id29584 . -54) (undo-tree-id29585 . -54) (undo-tree-id29586 . -54) (undo-tree-id29587 . -54) (undo-tree-id29588 . -54) (undo-tree-id29589 . -54) (undo-tree-id29590 . -54) (undo-tree-id29591 . -54) (undo-tree-id29592 . -54) (undo-tree-id29593 . -54) (undo-tree-id29594 . -54) (undo-tree-id29595 . -54) (undo-tree-id29596 . -54) (undo-tree-id29597 . -54) (undo-tree-id29598 . -54) (undo-tree-id29599 . -54) (undo-tree-id29600 . -54) (undo-tree-id29601 . -54) (undo-tree-id29602 . -54) (undo-tree-id29603 . -54) (undo-tree-id29604 . -54) (undo-tree-id29605 . -54) (undo-tree-id29606 . -54) (undo-tree-id29607 . -54) (undo-tree-id29608 . -54) (undo-tree-id29609 . -54) (undo-tree-id29610 . -54) (undo-tree-id29611 . -54) (undo-tree-id29612 . -54) (undo-tree-id29613 . -54) (undo-tree-id29614 . -54) (undo-tree-id29615 . -54) (undo-tree-id29616 . -54) (undo-tree-id29617 . -54) (undo-tree-id29618 . -54) (undo-tree-id29619 . -54) (undo-tree-id29620 . -54) (undo-tree-id29621 . -54) (undo-tree-id29622 . -54) (undo-tree-id29623 . -54) (undo-tree-id29624 . -54) (undo-tree-id29625 . -54) (undo-tree-id29626 . -119) (undo-tree-id29627 . -118) (undo-tree-id29628 . -96) (undo-tree-id29629 . -96) (undo-tree-id29630 . -96) (undo-tree-id29631 . -96) (undo-tree-id29632 . -96) (undo-tree-id29633 . -96) (undo-tree-id29634 . -96) (undo-tree-id29635 . -96) (undo-tree-id29636 . -96) (undo-tree-id29637 . -96) (undo-tree-id29638 . -96) (undo-tree-id29639 . -96) (undo-tree-id29640 . -96) (undo-tree-id29641 . -96) (undo-tree-id29642 . -96) (undo-tree-id29643 . -96) (undo-tree-id29644 . -96) (undo-tree-id29645 . -96) (undo-tree-id29646 . -96) (undo-tree-id29647 . -96) (undo-tree-id29648 . -96) (undo-tree-id29649 . -96) (undo-tree-id29650 . -103) (undo-tree-id29651 . -103) (undo-tree-id29652 . -103) (undo-tree-id29653 . -103) (undo-tree-id29654 . -103) (undo-tree-id29655 . -103) (undo-tree-id29656 . -103) (undo-tree-id29657 . -103) (undo-tree-id29658 . -103) (undo-tree-id29659 . -103) (undo-tree-id29660 . -103) (undo-tree-id29661 . -103) (undo-tree-id29662 . -103) (undo-tree-id29663 . -103) (undo-tree-id29664 . -103) (undo-tree-id29665 . -103) (undo-tree-id29666 . -103) (undo-tree-id29667 . -103) (undo-tree-id29668 . -103) (undo-tree-id29669 . -103) (undo-tree-id29670 . -103) (undo-tree-id29671 . -103) (undo-tree-id29672 . -106) (undo-tree-id29673 . -106) (undo-tree-id29674 . -106) (undo-tree-id29675 . -106) (undo-tree-id29676 . -106) (undo-tree-id29677 . -106) (undo-tree-id29678 . -106) (undo-tree-id29679 . -106) (undo-tree-id29680 . -106) (undo-tree-id29681 . -106) (undo-tree-id29682 . -106) (undo-tree-id29683 . -106) (undo-tree-id29684 . -106) (undo-tree-id29685 . -106) (undo-tree-id29686 . -106) (undo-tree-id29687 . -106) (undo-tree-id29688 . -106) (undo-tree-id29689 . -106) (undo-tree-id29690 . -106) (undo-tree-id29691 . -106) (undo-tree-id29692 . -106) (undo-tree-id29693 . -106) (undo-tree-id29694 . -110) (undo-tree-id29695 . -110) (undo-tree-id29696 . -110) (undo-tree-id29697 . -110) (undo-tree-id29698 . -110) (undo-tree-id29699 . -110) (undo-tree-id29700 . -110) (undo-tree-id29701 . -110) (undo-tree-id29702 . -110) (undo-tree-id29703 . -110) (undo-tree-id29704 . -110) (undo-tree-id29705 . -110) (undo-tree-id29706 . -110) (undo-tree-id29707 . -110) (undo-tree-id29708 . -110) (undo-tree-id29709 . -110) (undo-tree-id29710 . -110) (undo-tree-id29711 . -110) (undo-tree-id29712 . -110) (undo-tree-id29713 . -110) (undo-tree-id29714 . -110) (undo-tree-id29715 . -110) (undo-tree-id29716 . -117) (undo-tree-id29717 . -117) (undo-tree-id29718 . -117) (undo-tree-id29719 . -117) (undo-tree-id29720 . -117) (undo-tree-id29721 . -117) (undo-tree-id29722 . -117) (undo-tree-id29723 . -117) (undo-tree-id29724 . -117) (undo-tree-id29725 . -117) (undo-tree-id29726 . -117) (undo-tree-id29727 . -117) (undo-tree-id29728 . -117) (undo-tree-id29729 . -117) (undo-tree-id29730 . -117) (undo-tree-id29731 . -117) (undo-tree-id29732 . -117) (undo-tree-id29733 . -117) (undo-tree-id29734 . -117) (undo-tree-id29735 . -117) (undo-tree-id29736 . -117) (undo-tree-id29737 . -117) (undo-tree-id29738 . -118) (undo-tree-id29739 . -118) (undo-tree-id29740 . -118) (undo-tree-id29741 . -118) (undo-tree-id29742 . -118) (undo-tree-id29743 . -118) (undo-tree-id29744 . -118) (undo-tree-id29745 . -118) (undo-tree-id29746 . -118) (undo-tree-id29747 . -118) (undo-tree-id29748 . -118) (undo-tree-id29749 . -118) (undo-tree-id29750 . -118) (undo-tree-id29751 . -118) (undo-tree-id29752 . -118) (undo-tree-id29753 . -118) (undo-tree-id29754 . -118) (undo-tree-id29755 . -118) (undo-tree-id29756 . -118) (undo-tree-id29757 . -118) (undo-tree-id29758 . -118) (undo-tree-id29759 . -118) (undo-tree-id29760 . -118) (undo-tree-id29761 . -118) (undo-tree-id29762 . -118) (undo-tree-id29763 . -118) (undo-tree-id29764 . -118) (undo-tree-id29765 . -118) (undo-tree-id29766 . -118) (undo-tree-id29767 . -118) (undo-tree-id29768 . -119) 6295) nil (25772 51096 323041 368000) 0 nil])
([nil nil ((nil fontified nil 5736 . 5737) (nil line-prefix #("  " 0 2 (face org-indent)) 5736 . 5737) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5736 . 5737) (5736 . 5737) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5736) (undo-tree-id29373 . -1) (undo-tree-id29374 . -1) (undo-tree-id29375 . -1) (undo-tree-id29376 . -1) (undo-tree-id29377 . -1) (undo-tree-id29378 . -1) (undo-tree-id29379 . -1) (undo-tree-id29380 . -1) (undo-tree-id29381 . -1) (undo-tree-id29382 . -1) (undo-tree-id29383 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -5737) (undo-tree-id29384 . 1) (undo-tree-id29385 . 1) (undo-tree-id29386 . -1) 5736) ((5736 . 5738) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5736) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 5736 . 5737) (nil fontified t 5736 . 5737)) (25772 51076 648507 671000) 0 nil])
([nil nil ((5735 . 5737)) nil (25772 51096 323658 673000) 0 nil])
nil
([nil nil ((5737 . 5738)) nil (25772 51100 575406 559000) 0 nil] [nil nil ((nil fontified nil 5736 . 5737) (nil line-prefix #("  " 0 2 (face org-indent)) 5736 . 5737) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5736 . 5737) (5736 . 5737) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5736) (undo-tree-id29492 . -1) (undo-tree-id29493 . -1) (undo-tree-id29494 . -1) (undo-tree-id29495 . -1) (undo-tree-id29496 . -1) (undo-tree-id29497 . -1) (undo-tree-id29498 . -1) (undo-tree-id29499 . -1) (undo-tree-id29500 . -1) (undo-tree-id29501 . -1) (undo-tree-id29502 . -1) (undo-tree-id29503 . -1) (undo-tree-id29504 . -1) (undo-tree-id29505 . -1) (undo-tree-id29506 . -1) (undo-tree-id29507 . -1) (undo-tree-id29508 . -1) (undo-tree-id29509 . -1) (undo-tree-id29510 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -5737) (undo-tree-id29511 . 1) (undo-tree-id29512 . -1) (undo-tree-id29513 . -1) (undo-tree-id29514 . -1) (undo-tree-id29515 . -1) (undo-tree-id29516 . -1) (undo-tree-id29517 . -1) (undo-tree-id29518 . -1) (undo-tree-id29519 . -1) (undo-tree-id29520 . -1) 5736) ((5736 . 5738) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5736) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 5736 . 5737) (nil fontified t 5736 . 5737)) (25772 51096 322583 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5856 . 5857) (nil fontified nil 5738 . 5857) (5738 . 5857) 5737) nil (25772 51100 575401 397000) 0 nil])
nil
([nil nil ((5857 . 5858) (t 25772 51100 685661 776000)) nil (25772 51121 732551 15000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5737) (undo-tree-id30026 . -1) (undo-tree-id30027 . -1) (undo-tree-id30028 . -1) (undo-tree-id30029 . -1) (undo-tree-id30030 . -1) (undo-tree-id30031 . -1) (undo-tree-id30032 . -1) (undo-tree-id30033 . -1) (undo-tree-id30034 . -1) (undo-tree-id30035 . -1) (undo-tree-id30036 . -1) (undo-tree-id30037 . -1) (undo-tree-id30038 . -1) (undo-tree-id30039 . -1) (undo-tree-id30040 . -1) (undo-tree-id30041 . -1) (undo-tree-id30042 . -1) (undo-tree-id30043 . -1)) nil (25772 51121 732549 224000) 0 nil])
([nil nil ((#("This model " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5737) (undo-tree-id29880 . -10) (undo-tree-id29881 . -10) (undo-tree-id29882 . -10) (undo-tree-id29883 . -11) (undo-tree-id29884 . -10) (undo-tree-id29885 . -3) (undo-tree-id29886 . -3) (undo-tree-id29887 . -3) (undo-tree-id29888 . -3) (undo-tree-id29889 . -3) (undo-tree-id29890 . -3) (undo-tree-id29891 . -3) (undo-tree-id29892 . -3) (undo-tree-id29893 . -3) (undo-tree-id29894 . -3) (undo-tree-id29895 . -3) (undo-tree-id29896 . -3) (undo-tree-id29897 . -3) (undo-tree-id29898 . -3) (undo-tree-id29899 . -3) (undo-tree-id29900 . -3) (undo-tree-id29901 . -3) (undo-tree-id29902 . -3) (undo-tree-id29903 . -3) (undo-tree-id29904 . -3) (undo-tree-id29905 . -3) (undo-tree-id29906 . -3) (undo-tree-id29907 . -9) (undo-tree-id29908 . -9) (undo-tree-id29909 . -9) (undo-tree-id29910 . -9) (undo-tree-id29911 . -9) (undo-tree-id29912 . -9) (undo-tree-id29913 . -9) (undo-tree-id29914 . -9) (undo-tree-id29915 . -9) (undo-tree-id29916 . -9) (undo-tree-id29917 . -9) (undo-tree-id29918 . -9) (undo-tree-id29919 . -9) (undo-tree-id29920 . -9) (undo-tree-id29921 . -9) (undo-tree-id29922 . -9) (undo-tree-id29923 . -9) (undo-tree-id29924 . -9) (undo-tree-id29925 . -9) (undo-tree-id29926 . -9) (undo-tree-id29927 . -9) (undo-tree-id29928 . -9) (undo-tree-id29929 . -9) (undo-tree-id29930 . -9) (undo-tree-id29931 . -9) (undo-tree-id29932 . -9) (undo-tree-id29933 . -9) (undo-tree-id29934 . -9) (undo-tree-id29935 . -9) (undo-tree-id29936 . -11) (undo-tree-id29937 . -11) (undo-tree-id29938 . -11) (undo-tree-id29939 . -11) (undo-tree-id29940 . -11) (undo-tree-id29941 . -11) (undo-tree-id29942 . -11) (undo-tree-id29943 . -11) (undo-tree-id29944 . -11) (undo-tree-id29945 . -11) (undo-tree-id29946 . -11) (undo-tree-id29947 . -11) (undo-tree-id29948 . -11) (undo-tree-id29949 . -11) (undo-tree-id29950 . -11) (undo-tree-id29951 . -11) (undo-tree-id29952 . -11) (undo-tree-id29953 . -11) (undo-tree-id29954 . -11) (undo-tree-id29955 . -11) (undo-tree-id29956 . -11) (undo-tree-id29957 . -11) (undo-tree-id29958 . -10) (undo-tree-id29959 . -10) (undo-tree-id29960 . -10) (undo-tree-id29961 . -10) (undo-tree-id29962 . -10) (undo-tree-id29963 . -10) (undo-tree-id29964 . -10) (undo-tree-id29965 . -10) (undo-tree-id29966 . -10) (undo-tree-id29967 . -10) (undo-tree-id29968 . -10) (undo-tree-id29969 . -10) (undo-tree-id29970 . -10) (undo-tree-id29971 . -10) (undo-tree-id29972 . -10) (undo-tree-id29973 . -10) (undo-tree-id29974 . -10) (undo-tree-id29975 . -10) (undo-tree-id29976 . -10) (undo-tree-id29977 . -10) (undo-tree-id29978 . -10) (undo-tree-id29979 . -10) (undo-tree-id29980 . -9) (undo-tree-id29981 . -9) (undo-tree-id29982 . -9) (undo-tree-id29983 . -9) (undo-tree-id29984 . -9) (undo-tree-id29985 . -9) (undo-tree-id29986 . -9) (undo-tree-id29987 . -9) (undo-tree-id29988 . -9) (undo-tree-id29989 . -9) (undo-tree-id29990 . -9) (undo-tree-id29991 . -9) (undo-tree-id29992 . -9) (undo-tree-id29993 . -9) (undo-tree-id29994 . -9) (undo-tree-id29995 . -9) (undo-tree-id29996 . -9) (undo-tree-id29997 . -9) (undo-tree-id29998 . -9) (undo-tree-id29999 . -9) (undo-tree-id30000 . -9) (undo-tree-id30001 . -9) (undo-tree-id30002 . -10) (undo-tree-id30003 . -10) (undo-tree-id30004 . -10) (undo-tree-id30005 . -10) (undo-tree-id30006 . -10) (undo-tree-id30007 . -10) (undo-tree-id30008 . -10) (undo-tree-id30009 . -10) (undo-tree-id30010 . -10) (undo-tree-id30011 . -10) (undo-tree-id30012 . -10) (undo-tree-id30013 . -10) (undo-tree-id30014 . -10) (undo-tree-id30015 . -10) (undo-tree-id30016 . -10) (undo-tree-id30017 . -10) (undo-tree-id30018 . -10) (undo-tree-id30019 . -10) (undo-tree-id30020 . -10) (undo-tree-id30021 . -10) (undo-tree-id30022 . -10) (undo-tree-id30023 . -10) (undo-tree-id30024 . -10) (undo-tree-id30025 . -11) 5747) nil (25772 51121 732529 66000) 0 nil])
([nil nil ((5737 . 5738) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5737)) nil (25772 51121 731182 538000) 0 nil])
([nil nil ((5779 . 5780)) nil (25772 51121 731181 17000) 0 nil])
([nil nil ((#(". and you can change the output activation function if you wanted.
" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 65 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5780) (undo-tree-id29769 . -66) (undo-tree-id29770 . 67) (undo-tree-id29771 . -66) (undo-tree-id29772 . -65) (undo-tree-id29773 . -65) (undo-tree-id29774 . -65) (undo-tree-id29775 . -65) (undo-tree-id29776 . -65) (undo-tree-id29777 . -65) (undo-tree-id29778 . -65) (undo-tree-id29779 . -65) (undo-tree-id29780 . -65) (undo-tree-id29781 . -65) (undo-tree-id29782 . -65) (undo-tree-id29783 . -65) (undo-tree-id29784 . -65) (undo-tree-id29785 . -65) (undo-tree-id29786 . -65) (undo-tree-id29787 . -65) (undo-tree-id29788 . -65) (undo-tree-id29789 . -65) (undo-tree-id29790 . -65) (undo-tree-id29791 . -65) (undo-tree-id29792 . -65) (undo-tree-id29793 . -65) (undo-tree-id29794 . -65) (undo-tree-id29795 . -65) (undo-tree-id29796 . -65) (undo-tree-id29797 . -65) (undo-tree-id29798 . -65) (undo-tree-id29799 . -65) (undo-tree-id29800 . -65) (undo-tree-id29801 . -65) (undo-tree-id29802 . -65) (undo-tree-id29803 . -65) (undo-tree-id29804 . -65) (undo-tree-id29805 . -66) (undo-tree-id29806 . -66) (undo-tree-id29807 . -66) (undo-tree-id29808 . -66) (undo-tree-id29809 . -66) (undo-tree-id29810 . -66) (undo-tree-id29811 . -66) (undo-tree-id29812 . -66) (undo-tree-id29813 . -66) (undo-tree-id29814 . -66) (undo-tree-id29815 . -66) (undo-tree-id29816 . -66) (undo-tree-id29817 . -66) (undo-tree-id29818 . -66) (undo-tree-id29819 . -66) (undo-tree-id29820 . -66) (undo-tree-id29821 . -66) (undo-tree-id29822 . -66) (undo-tree-id29823 . -66) (undo-tree-id29824 . -66) (undo-tree-id29825 . -66) (undo-tree-id29826 . -66) (undo-tree-id29827 . -66) (undo-tree-id29828 . -66) (undo-tree-id29829 . -67) (undo-tree-id29830 . -67) (undo-tree-id29831 . -67) (undo-tree-id29832 . -67) (undo-tree-id29833 . -67) (undo-tree-id29834 . -67) (undo-tree-id29835 . -67) (undo-tree-id29836 . -67) (undo-tree-id29837 . -67) (undo-tree-id29838 . -67) (undo-tree-id29839 . -67) (undo-tree-id29840 . -67) (undo-tree-id29841 . -67) (undo-tree-id29842 . -67) (undo-tree-id29843 . -67) (undo-tree-id29844 . -67) (undo-tree-id29845 . -67) (undo-tree-id29846 . -67) (undo-tree-id29847 . -67) (undo-tree-id29848 . -67) (undo-tree-id29849 . -67) (undo-tree-id29850 . -67) (undo-tree-id29851 . -67) (undo-tree-id29852 . -67) (undo-tree-id29853 . -67) (undo-tree-id29854 . -67) (undo-tree-id29855 . -67) (undo-tree-id29856 . -67) (undo-tree-id29857 . -67) (undo-tree-id29858 . -67) (undo-tree-id29859 . -67) (undo-tree-id29860 . -67) (undo-tree-id29861 . -67) (undo-tree-id29862 . -67) (undo-tree-id29863 . -67) (undo-tree-id29864 . -32) (undo-tree-id29865 . -32) (undo-tree-id29866 . -32) (undo-tree-id29867 . -32) (undo-tree-id29868 . -32) (undo-tree-id29869 . -32) (undo-tree-id29870 . -32) (undo-tree-id29871 . -32) (undo-tree-id29872 . -32) (undo-tree-id29873 . -32) (undo-tree-id29874 . -32) (undo-tree-id29875 . -32) (undo-tree-id29876 . -32) (undo-tree-id29877 . -32) (undo-tree-id29878 . -32) (undo-tree-id29879 . -67)) nil (25772 51121 731174 13000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6222) (undo-tree-id30044 . -1) (t 25772 51121 843241 697000)) nil (25772 51129 833621 825000) 0 nil])
([nil nil ((6261 . 6263) (t 25772 51129 895831 942000)) nil (25772 51139 597518 40000) 0 nil])
([nil nil ((6417 . 6418) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6417) (undo-tree-id30045 . -1) (6341 . 6342) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6341) (undo-tree-id30046 . -1) 6262) nil (25772 51139 597513 797000) 0 nil])
([nil nil ((6263 . 6265) (t 25772 51139 664540 178000)) nil (25772 51201 593866 816000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6263) (undo-tree-id32478 . -1) (undo-tree-id32479 . -1) (undo-tree-id32480 . -1) (undo-tree-id32481 . -1) (undo-tree-id32482 . -1) (undo-tree-id32483 . -1) (undo-tree-id32484 . -1) (undo-tree-id32485 . -1) (undo-tree-id32486 . -1) (undo-tree-id32487 . -1) (undo-tree-id32488 . -1) (undo-tree-id32489 . -1) (undo-tree-id32490 . -1) (undo-tree-id32491 . -1) (undo-tree-id32492 . -1) (undo-tree-id32493 . -1) (undo-tree-id32494 . -1) (undo-tree-id32495 . -1) (undo-tree-id32496 . -1) (undo-tree-id32497 . -1) (undo-tree-id32498 . -1) (undo-tree-id32499 . -1) (undo-tree-id32500 . -1) (undo-tree-id32501 . -1) (undo-tree-id32502 . -1) (undo-tree-id32503 . -1) (undo-tree-id32504 . -1) (undo-tree-id32505 . -1) (undo-tree-id32506 . -1) (undo-tree-id32507 . -1) (undo-tree-id32508 . -1) (undo-tree-id32509 . -1) (undo-tree-id32510 . -1) (undo-tree-id32511 . -1) (undo-tree-id32512 . -1) (undo-tree-id32513 . -1) (undo-tree-id32514 . -1) (undo-tree-id32515 . -1) (undo-tree-id32516 . -1) (undo-tree-id32517 . -1) (undo-tree-id32518 . -1) (undo-tree-id32519 . -1) (undo-tree-id32520 . -1) (undo-tree-id32521 . -1) (undo-tree-id32522 . -1) (undo-tree-id32523 . -1) (undo-tree-id32524 . -1) (undo-tree-id32525 . -1) (undo-tree-id32526 . -1) (undo-tree-id32527 . -1) (undo-tree-id32528 . -1)) nil (25772 51201 593864 230000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6263) (undo-tree-id32453 . -1) (undo-tree-id32454 . -1) (undo-tree-id32455 . -1) (undo-tree-id32456 . -1) (undo-tree-id32457 . -1) (undo-tree-id32458 . -1) (undo-tree-id32459 . -1) (undo-tree-id32460 . -1) (undo-tree-id32461 . -1) (undo-tree-id32462 . -1) (undo-tree-id32463 . -1) (undo-tree-id32464 . -1) (undo-tree-id32465 . -1) (undo-tree-id32466 . -1) (undo-tree-id32467 . -1) (undo-tree-id32468 . -1) (undo-tree-id32469 . -1) (undo-tree-id32470 . -1) (undo-tree-id32471 . -1) (undo-tree-id32472 . -1) (undo-tree-id32473 . -1) (undo-tree-id32474 . -1) (undo-tree-id32475 . -1) (undo-tree-id32476 . -1) (undo-tree-id32477 . -1)) nil (25772 51201 593835 526000) 0 nil])
([nil nil ((#("To predict the next 10 values, " 0 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6263) (undo-tree-id32269 . -30) (undo-tree-id32270 . 31) (undo-tree-id32271 . -30) (undo-tree-id32272 . -30) (undo-tree-id32273 . -31) (undo-tree-id32274 . -30) (undo-tree-id32275 . -1) (undo-tree-id32276 . -1) (undo-tree-id32277 . -1) (undo-tree-id32278 . -1) (undo-tree-id32279 . -1) (undo-tree-id32280 . -1) (undo-tree-id32281 . -1) (undo-tree-id32282 . -1) (undo-tree-id32283 . -1) (undo-tree-id32284 . -1) (undo-tree-id32285 . -1) (undo-tree-id32286 . -1) (undo-tree-id32287 . -1) (undo-tree-id32288 . -1) (undo-tree-id32289 . -1) (undo-tree-id32290 . -1) (undo-tree-id32291 . -1) (undo-tree-id32292 . -1) (undo-tree-id32293 . -1) (undo-tree-id32294 . -1) (undo-tree-id32295 . -1) (undo-tree-id32296 . -1) (undo-tree-id32297 . -9) (undo-tree-id32298 . -9) (undo-tree-id32299 . -9) (undo-tree-id32300 . -9) (undo-tree-id32301 . -9) (undo-tree-id32302 . -9) (undo-tree-id32303 . -9) (undo-tree-id32304 . -9) (undo-tree-id32305 . -9) (undo-tree-id32306 . -9) (undo-tree-id32307 . -9) (undo-tree-id32308 . -9) (undo-tree-id32309 . -9) (undo-tree-id32310 . -9) (undo-tree-id32311 . -9) (undo-tree-id32312 . -9) (undo-tree-id32313 . -9) (undo-tree-id32314 . -9) (undo-tree-id32315 . -9) (undo-tree-id32316 . -9) (undo-tree-id32317 . -9) (undo-tree-id32318 . -9) (undo-tree-id32319 . -13) (undo-tree-id32320 . -13) (undo-tree-id32321 . -13) (undo-tree-id32322 . -13) (undo-tree-id32323 . -13) (undo-tree-id32324 . -13) (undo-tree-id32325 . -13) (undo-tree-id32326 . -13) (undo-tree-id32327 . -13) (undo-tree-id32328 . -13) (undo-tree-id32329 . -13) (undo-tree-id32330 . -13) (undo-tree-id32331 . -13) (undo-tree-id32332 . -13) (undo-tree-id32333 . -13) (undo-tree-id32334 . -13) (undo-tree-id32335 . -13) (undo-tree-id32336 . -13) (undo-tree-id32337 . -13) (undo-tree-id32338 . -13) (undo-tree-id32339 . -13) (undo-tree-id32340 . -13) (undo-tree-id32341 . -18) (undo-tree-id32342 . -18) (undo-tree-id32343 . -18) (undo-tree-id32344 . -18) (undo-tree-id32345 . -18) (undo-tree-id32346 . -18) (undo-tree-id32347 . -18) (undo-tree-id32348 . -18) (undo-tree-id32349 . -18) (undo-tree-id32350 . -18) (undo-tree-id32351 . -18) (undo-tree-id32352 . -18) (undo-tree-id32353 . -18) (undo-tree-id32354 . -18) (undo-tree-id32355 . -18) (undo-tree-id32356 . -18) (undo-tree-id32357 . -18) (undo-tree-id32358 . -18) (undo-tree-id32359 . -18) (undo-tree-id32360 . -18) (undo-tree-id32361 . -18) (undo-tree-id32362 . -18) (undo-tree-id32363 . -21) (undo-tree-id32364 . -21) (undo-tree-id32365 . -21) (undo-tree-id32366 . -21) (undo-tree-id32367 . -21) (undo-tree-id32368 . -21) (undo-tree-id32369 . -21) (undo-tree-id32370 . -21) (undo-tree-id32371 . -21) (undo-tree-id32372 . -21) (undo-tree-id32373 . -21) (undo-tree-id32374 . -21) (undo-tree-id32375 . -21) (undo-tree-id32376 . -21) (undo-tree-id32377 . -21) (undo-tree-id32378 . -21) (undo-tree-id32379 . -21) (undo-tree-id32380 . -21) (undo-tree-id32381 . -21) (undo-tree-id32382 . -21) (undo-tree-id32383 . -21) (undo-tree-id32384 . -21) (undo-tree-id32385 . -28) (undo-tree-id32386 . -28) (undo-tree-id32387 . -28) (undo-tree-id32388 . -28) (undo-tree-id32389 . -28) (undo-tree-id32390 . -28) (undo-tree-id32391 . -28) (undo-tree-id32392 . -28) (undo-tree-id32393 . -28) (undo-tree-id32394 . -28) (undo-tree-id32395 . -28) (undo-tree-id32396 . -28) (undo-tree-id32397 . -28) (undo-tree-id32398 . -28) (undo-tree-id32399 . -28) (undo-tree-id32400 . -28) (undo-tree-id32401 . -28) (undo-tree-id32402 . -28) (undo-tree-id32403 . -28) (undo-tree-id32404 . -28) (undo-tree-id32405 . -28) (undo-tree-id32406 . -28) (undo-tree-id32407 . -29) (undo-tree-id32408 . -29) (undo-tree-id32409 . -29) (undo-tree-id32410 . -29) (undo-tree-id32411 . -29) (undo-tree-id32412 . -29) (undo-tree-id32413 . -29) (undo-tree-id32414 . -29) (undo-tree-id32415 . -29) (undo-tree-id32416 . -29) (undo-tree-id32417 . -29) (undo-tree-id32418 . -29) (undo-tree-id32419 . -29) (undo-tree-id32420 . -29) (undo-tree-id32421 . -29) (undo-tree-id32422 . -29) (undo-tree-id32423 . -29) (undo-tree-id32424 . -29) (undo-tree-id32425 . -29) (undo-tree-id32426 . -29) (undo-tree-id32427 . -29) (undo-tree-id32428 . -29) (undo-tree-id32429 . -30) (undo-tree-id32430 . -30) (undo-tree-id32431 . -30) (undo-tree-id32432 . -30) (undo-tree-id32433 . -30) (undo-tree-id32434 . -30) (undo-tree-id32435 . -30) (undo-tree-id32436 . -30) (undo-tree-id32437 . -30) (undo-tree-id32438 . -30) (undo-tree-id32439 . -30) (undo-tree-id32440 . -30) (undo-tree-id32441 . -30) (undo-tree-id32442 . -30) (undo-tree-id32443 . -30) (undo-tree-id32444 . -30) (undo-tree-id32445 . -30) (undo-tree-id32446 . -30) (undo-tree-id32447 . -30) (undo-tree-id32448 . -30) (undo-tree-id32449 . -30) (undo-tree-id32450 . -30) (undo-tree-id32451 . -30) (undo-tree-id32452 . -31) 6293) nil (25772 51201 593815 559000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6263) (undo-tree-id32266 . 1) (undo-tree-id32267 . -1) (undo-tree-id32268 . -1)) nil (25772 51201 593712 681000) 0 nil])
([nil nil ((#("he " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6263) (undo-tree-id32240 . -2) (undo-tree-id32241 . 3) (undo-tree-id32242 . 3) (undo-tree-id32243 . -3) (undo-tree-id32244 . -3) (undo-tree-id32245 . -3) (undo-tree-id32246 . -3) (undo-tree-id32247 . -3) (undo-tree-id32248 . -3) (undo-tree-id32249 . -3) (undo-tree-id32250 . -3) (undo-tree-id32251 . -3) (undo-tree-id32252 . -3) (undo-tree-id32253 . -3) (undo-tree-id32254 . -3) (undo-tree-id32255 . -3) (undo-tree-id32256 . -3) (undo-tree-id32257 . -3) (undo-tree-id32258 . -3) (undo-tree-id32259 . -3) (undo-tree-id32260 . -3) (undo-tree-id32261 . -3) (undo-tree-id32262 . -3) (undo-tree-id32263 . -3) (undo-tree-id32264 . -3) (undo-tree-id32265 . -3)) nil (25772 51201 593709 589000) 0 nil])
([nil nil ((6263 . 6264) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6263)) nil (25772 51201 593694 737000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6286) (undo-tree-id32238 . -3) (undo-tree-id32239 . -4)) nil (25772 51201 593693 806000) 0 nil])
([nil nil ((#("model " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6286) (undo-tree-id32236 . -5) (undo-tree-id32237 . -6)) nil (25772 51201 593691 853000) 0 nil])
([nil nil ((#("we " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6286) (undo-tree-id32234 . -2) (undo-tree-id32235 . -3)) nil (25772 51201 593689 885000) 0 nil])
([nil nil ((6323 . 6327) (6322 . 6323) (6301 . 6322)) nil (25772 51201 593687 686000) 0 nil])
([nil nil ((6261 . 6464) (#("- , make it predict the next value, then add that value to the inputs, and use the model again to predict the following value, and so on
- First option is to use already trained model for a single output" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 70 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 70 71 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 71 136 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 136 137 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 137 138 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 138 139 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 139 169 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 169 170 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 170 199 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 199 203 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6261) (undo-tree-id30496 . -162) (undo-tree-id30497 . -162) (undo-tree-id30498 . -139) (undo-tree-id30499 . -139) (undo-tree-id30500 . 63) (undo-tree-id30501 . -199) (undo-tree-id30502 . -169) (undo-tree-id30503 . -199) (undo-tree-id30504 . -203) (undo-tree-id30505 . -203) (undo-tree-id30506 . -203) (undo-tree-id30507 . -203) (undo-tree-id30508 . -203) (undo-tree-id30509 . -203) (undo-tree-id30510 . -203) (undo-tree-id30511 . -203) (undo-tree-id30512 . -203) (undo-tree-id30513 . -203) (undo-tree-id30514 . -203) (undo-tree-id30515 . -203) (undo-tree-id30516 . -203) (undo-tree-id30517 . -203) (undo-tree-id30518 . -203) (undo-tree-id30519 . -203) (undo-tree-id30520 . -203) (undo-tree-id30521 . -203) (undo-tree-id30522 . -203) (undo-tree-id30523 . -203) (undo-tree-id30524 . -203) (undo-tree-id30525 . -203) (undo-tree-id30526 . -203) (undo-tree-id30527 . -203) (undo-tree-id30528 . -203) (undo-tree-id30529 . -203) (undo-tree-id30530 . -203) (undo-tree-id30531 . -203) (undo-tree-id30532 . -203) (undo-tree-id30533 . -203) (undo-tree-id30534 . -203) (undo-tree-id30535 . -203) (undo-tree-id30536 . -203) (undo-tree-id30537 . -203) (undo-tree-id30538 . -203) (undo-tree-id30539 . -203) (undo-tree-id30540 . -203) (undo-tree-id30541 . -203) (undo-tree-id30542 . -203) (undo-tree-id30543 . -203) (undo-tree-id30544 . -162) (undo-tree-id30545 . -162) (undo-tree-id30546 . -162) (undo-tree-id30547 . -162) (undo-tree-id30548 . -162) (undo-tree-id30549 . -162) (undo-tree-id30550 . -162) (undo-tree-id30551 . -162) (undo-tree-id30552 . -162) (undo-tree-id30553 . -162) (undo-tree-id30554 . -162) (undo-tree-id30555 . -162) (undo-tree-id30556 . -162) (undo-tree-id30557 . -162) (undo-tree-id30558 . -162) (undo-tree-id30559 . -139) (undo-tree-id30560 . -139) (undo-tree-id30561 . -139) (undo-tree-id30562 . -139) (undo-tree-id30563 . -139) (undo-tree-id30564 . -139) (undo-tree-id30565 . -139) (undo-tree-id30566 . -139) (undo-tree-id30567 . -139) (undo-tree-id30568 . -139) (undo-tree-id30569 . -139) (undo-tree-id30570 . -139) (undo-tree-id30571 . -139) (undo-tree-id30572 . -139) (undo-tree-id30573 . -139) (undo-tree-id30574 . -139) (undo-tree-id30575 . -139) (undo-tree-id30576 . -139) (undo-tree-id30577 . -139) (undo-tree-id30578 . -139) (undo-tree-id30579 . -139) (undo-tree-id30580 . -139) (undo-tree-id30581 . -139) (undo-tree-id30582 . -139) (undo-tree-id30583 . -139) (undo-tree-id30584 . -139) (undo-tree-id30585 . -139) (undo-tree-id30586 . -139) (undo-tree-id30587 . -139) (undo-tree-id30588 . -139) (undo-tree-id30589 . -139) (undo-tree-id30590 . -139) (undo-tree-id30591 . -139) (undo-tree-id30592 . -139) (undo-tree-id30593 . -139) (undo-tree-id30594 . -139) (undo-tree-id30595 . -139) (undo-tree-id30596 . -139) (undo-tree-id30597 . -139) (undo-tree-id30598 . -139) (undo-tree-id30599 . -139) (undo-tree-id30600 . -139) (undo-tree-id30601 . -139) (undo-tree-id30602 . -139) (undo-tree-id30603 . -139) (undo-tree-id30604 . -139) (undo-tree-id30605 . -139) (undo-tree-id30606 . -139) (undo-tree-id30607 . -139) (undo-tree-id30608 . -139) (undo-tree-id30609 . -139) (undo-tree-id30610 . -139) (undo-tree-id30611 . -139) (undo-tree-id30612 . -139) (undo-tree-id30613 . -139) (undo-tree-id30614 . -139) (undo-tree-id30615 . -139) (undo-tree-id30616 . -139) (undo-tree-id30617 . -139) (undo-tree-id30618 . -139) (undo-tree-id30619 . -139) (undo-tree-id30620 . -139) (undo-tree-id30621 . -139) (undo-tree-id30622 . -139) (undo-tree-id30623 . -139) (undo-tree-id30624 . -139) (undo-tree-id30625 . -139) (undo-tree-id30626 . -139) (undo-tree-id30627 . -139) (undo-tree-id30628 . -139) (undo-tree-id30629 . -139) (undo-tree-id30630 . -139) (undo-tree-id30631 . -139) (undo-tree-id30632 . -139) (undo-tree-id30633 . -139) (undo-tree-id30634 . -139) (undo-tree-id30635 . -139) (undo-tree-id30636 . -139) (undo-tree-id30637 . -139) (undo-tree-id30638 . -139) (undo-tree-id30639 . -139) (undo-tree-id30640 . -139) (undo-tree-id30641 . -139) (undo-tree-id30642 . -139) (undo-tree-id30643 . -139) (undo-tree-id30644 . -139) (undo-tree-id30645 . -139) (undo-tree-id30646 . -139) (undo-tree-id30647 . -139) (undo-tree-id30648 . -139) (undo-tree-id30649 . -139) (undo-tree-id30650 . -139) (undo-tree-id30651 . -139) (undo-tree-id30652 . -139) (undo-tree-id30653 . -139) (undo-tree-id30654 . -139) (undo-tree-id30655 . -139) (undo-tree-id30656 . -139) (undo-tree-id30657 . -139) (undo-tree-id30658 . -139) (undo-tree-id30659 . -139) (undo-tree-id30660 . -139) (undo-tree-id30661 . -139) (undo-tree-id30662 . -139) (undo-tree-id30663 . -139) (undo-tree-id30664 . -139) (undo-tree-id30665 . -139) (undo-tree-id30666 . -139) (undo-tree-id30667 . -139) (undo-tree-id30668 . -139) (undo-tree-id30669 . -139) (undo-tree-id30670 . -139) (undo-tree-id30671 . -139) (undo-tree-id30672 . -139) (undo-tree-id30673 . -139) (undo-tree-id30674 . -139) (undo-tree-id30675 . -139) (undo-tree-id30676 . -139) (undo-tree-id30677 . -139) (undo-tree-id30678 . -139) (undo-tree-id30679 . -139) (undo-tree-id30680 . -139) (undo-tree-id30681 . -139) (undo-tree-id30682 . -139) (undo-tree-id30683 . -139) (undo-tree-id30684 . -139) (undo-tree-id30685 . -139) (undo-tree-id30686 . -139) (undo-tree-id30687 . -139) (undo-tree-id30688 . -139) (undo-tree-id30689 . -139) (undo-tree-id30690 . -139) (undo-tree-id30691 . -139) (undo-tree-id30692 . -139) (undo-tree-id30693 . -139) (undo-tree-id30694 . -139) (undo-tree-id30695 . -139) (undo-tree-id30696 . -139) (undo-tree-id30697 . -139) (undo-tree-id30698 . -139) (undo-tree-id30699 . -139) (undo-tree-id30700 . -139) (undo-tree-id30701 . -139) (undo-tree-id30702 . -139) (undo-tree-id30703 . -139) (undo-tree-id30704 . -139) (undo-tree-id30705 . -139) (undo-tree-id30706 . -139) (undo-tree-id30707 . -139) (undo-tree-id30708 . -139) (undo-tree-id30709 . -139) (undo-tree-id30710 . -139) (undo-tree-id30711 . -139) (undo-tree-id30712 . -139) (undo-tree-id30713 . -139) (undo-tree-id30714 . -139) (undo-tree-id30715 . -139) (undo-tree-id30716 . -139) (undo-tree-id30717 . -139) (undo-tree-id30718 . -139) (undo-tree-id30719 . -139) (undo-tree-id30720 . -139) (undo-tree-id30721 . -139) (undo-tree-id30722 . -139) (undo-tree-id30723 . -139) (undo-tree-id30724 . -139) (undo-tree-id30725 . -139) (undo-tree-id30726 . -139) (undo-tree-id30727 . -139) (undo-tree-id30728 . -139) (undo-tree-id30729 . -139) (undo-tree-id30730 . -139) (undo-tree-id30731 . -139) (undo-tree-id30732 . -139) (undo-tree-id30733 . -139) (undo-tree-id30734 . -139) (undo-tree-id30735 . -139) (undo-tree-id30736 . -139) (undo-tree-id30737 . -139) (undo-tree-id30738 . -139) (undo-tree-id30739 . -139) (undo-tree-id30740 . -139) (undo-tree-id30741 . -139) (undo-tree-id30742 . -139) (undo-tree-id30743 . -139) (undo-tree-id30744 . -139) (undo-tree-id30745 . -139) (undo-tree-id30746 . -139) (undo-tree-id30747 . -139) (undo-tree-id30748 . -139) (undo-tree-id30749 . -139) (undo-tree-id30750 . -139) (undo-tree-id30751 . -139) (undo-tree-id30752 . -139) (undo-tree-id30753 . -139) (undo-tree-id30754 . -139) (undo-tree-id30755 . -139) (undo-tree-id30756 . -139) (undo-tree-id30757 . -139) (undo-tree-id30758 . -139) (undo-tree-id30759 . -139) (undo-tree-id30760 . -139) (undo-tree-id30761 . -139) (undo-tree-id30762 . -139) (undo-tree-id30763 . -139) (undo-tree-id30764 . -139) (undo-tree-id30765 . -139) (undo-tree-id30766 . -139) (undo-tree-id30767 . -139) (undo-tree-id30768 . -139) (undo-tree-id30769 . -139) (undo-tree-id30770 . -139) (undo-tree-id30771 . -139) (undo-tree-id30772 . -139) (undo-tree-id30773 . -139) (undo-tree-id30774 . -139) (undo-tree-id30775 . -139) (undo-tree-id30776 . -139) (undo-tree-id30777 . -139) (undo-tree-id30778 . -139) (undo-tree-id30779 . -139) (undo-tree-id30780 . -139) (undo-tree-id30781 . -139) (undo-tree-id30782 . -139) (undo-tree-id30783 . -139) (undo-tree-id30784 . -139) (undo-tree-id30785 . -139) (undo-tree-id30786 . -139) (undo-tree-id30787 . -139) (undo-tree-id30788 . -139) (undo-tree-id30789 . -139) (undo-tree-id30790 . -139) (undo-tree-id30791 . -139) (undo-tree-id30792 . -139) (undo-tree-id30793 . -139) (undo-tree-id30794 . -139) (undo-tree-id30795 . -139) (undo-tree-id30796 . -139) (undo-tree-id30797 . -139) (undo-tree-id30798 . -139) (undo-tree-id30799 . -139) (undo-tree-id30800 . -139) (undo-tree-id30801 . -139) (undo-tree-id30802 . -139) (undo-tree-id30803 . -139) (undo-tree-id30804 . -139) (undo-tree-id30805 . -139) (undo-tree-id30806 . -139) (undo-tree-id30807 . -139) (undo-tree-id30808 . -139) (undo-tree-id30809 . -139) (undo-tree-id30810 . -139) (undo-tree-id30811 . -139) (undo-tree-id30812 . -139) (undo-tree-id30813 . -139) (undo-tree-id30814 . -139) (undo-tree-id30815 . -139) (undo-tree-id30816 . -139) (undo-tree-id30817 . -139) (undo-tree-id30818 . -139) (undo-tree-id30819 . -139) (undo-tree-id30820 . -139) (undo-tree-id30821 . -139) (undo-tree-id30822 . -139) (undo-tree-id30823 . -139) (undo-tree-id30824 . -139) (undo-tree-id30825 . -139) (undo-tree-id30826 . -139) (undo-tree-id30827 . -139) (undo-tree-id30828 . -139) (undo-tree-id30829 . -139) (undo-tree-id30830 . -139) (undo-tree-id30831 . -139) (undo-tree-id30832 . -139) (undo-tree-id30833 . -139) (undo-tree-id30834 . -139) (undo-tree-id30835 . -139) (undo-tree-id30836 . -139) (undo-tree-id30837 . -139) (undo-tree-id30838 . -139) (undo-tree-id30839 . -139) (undo-tree-id30840 . -139) (undo-tree-id30841 . -139) (undo-tree-id30842 . -139) (undo-tree-id30843 . -139) (undo-tree-id30844 . -139) (undo-tree-id30845 . -139) (undo-tree-id30846 . -139) (undo-tree-id30847 . -139) (undo-tree-id30848 . -139) (undo-tree-id30849 . -139) (undo-tree-id30850 . -139) (undo-tree-id30851 . -139) (undo-tree-id30852 . -139) (undo-tree-id30853 . -139) (undo-tree-id30854 . -139) (undo-tree-id30855 . -139) (undo-tree-id30856 . -139) (undo-tree-id30857 . -139) (undo-tree-id30858 . -139) (undo-tree-id30859 . -139) (undo-tree-id30860 . -139) (undo-tree-id30861 . -139) (undo-tree-id30862 . -139) (undo-tree-id30863 . -139) (undo-tree-id30864 . -139) (undo-tree-id30865 . -139) (undo-tree-id30866 . -139) (undo-tree-id30867 . -139) (undo-tree-id30868 . -139) (undo-tree-id30869 . -139) (undo-tree-id30870 . -139) (undo-tree-id30871 . -139) (undo-tree-id30872 . -139) (undo-tree-id30873 . -139) (undo-tree-id30874 . -139) (undo-tree-id30875 . -139) (undo-tree-id30876 . -139) (undo-tree-id30877 . -139) (undo-tree-id30878 . -139) (undo-tree-id30879 . -139) (undo-tree-id30880 . -139) (undo-tree-id30881 . -139) (undo-tree-id30882 . -139) (undo-tree-id30883 . -139) (undo-tree-id30884 . -139) (undo-tree-id30885 . -139) (undo-tree-id30886 . -139) (undo-tree-id30887 . -139) (undo-tree-id30888 . -139) (undo-tree-id30889 . -139) (undo-tree-id30890 . -139) (undo-tree-id30891 . -139) (undo-tree-id30892 . -139) (undo-tree-id30893 . -139) (undo-tree-id30894 . -139) (undo-tree-id30895 . -139) (undo-tree-id30896 . -139) (undo-tree-id30897 . -139) (undo-tree-id30898 . -139) (undo-tree-id30899 . -139) (undo-tree-id30900 . -139) (undo-tree-id30901 . -139) (undo-tree-id30902 . -139) (undo-tree-id30903 . -139) (undo-tree-id30904 . -139) (undo-tree-id30905 . -139) (undo-tree-id30906 . -139) (undo-tree-id30907 . -139) (undo-tree-id30908 . -139) (undo-tree-id30909 . -139) (undo-tree-id30910 . -139) (undo-tree-id30911 . -139) (undo-tree-id30912 . -139) (undo-tree-id30913 . -139) (undo-tree-id30914 . -139) (undo-tree-id30915 . -139) (undo-tree-id30916 . -139) (undo-tree-id30917 . -139) (undo-tree-id30918 . -139) (undo-tree-id30919 . -139) (undo-tree-id30920 . -139) (undo-tree-id30921 . -139) (undo-tree-id30922 . -139) (undo-tree-id30923 . -139) (undo-tree-id30924 . -139) (undo-tree-id30925 . -139) (undo-tree-id30926 . -139) (undo-tree-id30927 . -139) (undo-tree-id30928 . -139) (undo-tree-id30929 . -139) (undo-tree-id30930 . -139) (undo-tree-id30931 . -139) (undo-tree-id30932 . -139) (undo-tree-id30933 . -139) (undo-tree-id30934 . -139) (undo-tree-id30935 . -139) (undo-tree-id30936 . -139) (undo-tree-id30937 . -139) (undo-tree-id30938 . -139) (undo-tree-id30939 . -139) (undo-tree-id30940 . -139) (undo-tree-id30941 . -139) (undo-tree-id30942 . -139) (undo-tree-id30943 . -139) (undo-tree-id30944 . -139) (undo-tree-id30945 . -139) (undo-tree-id30946 . -139) (undo-tree-id30947 . -139) (undo-tree-id30948 . -139) (undo-tree-id30949 . -139) (undo-tree-id30950 . -139) (undo-tree-id30951 . -139) (undo-tree-id30952 . -139) (undo-tree-id30953 . -139) (undo-tree-id30954 . -139) (undo-tree-id30955 . -139) (undo-tree-id30956 . -139) (undo-tree-id30957 . -139) (undo-tree-id30958 . -139) (undo-tree-id30959 . -139) (undo-tree-id30960 . -139) (undo-tree-id30961 . -139) (undo-tree-id30962 . -139) (undo-tree-id30963 . -139) (undo-tree-id30964 . -139) (undo-tree-id30965 . -139) (undo-tree-id30966 . -139) (undo-tree-id30967 . -139) (undo-tree-id30968 . -139) (undo-tree-id30969 . -139) (undo-tree-id30970 . -139) (undo-tree-id30971 . -139) (undo-tree-id30972 . -139) (undo-tree-id30973 . -139) (undo-tree-id30974 . -139) (undo-tree-id30975 . -139) (undo-tree-id30976 . -139) (undo-tree-id30977 . -139) (undo-tree-id30978 . -139) (undo-tree-id30979 . -139) (undo-tree-id30980 . -139) (undo-tree-id30981 . -139) (undo-tree-id30982 . -139) (undo-tree-id30983 . -139) (undo-tree-id30984 . -139) (undo-tree-id30985 . -139) (undo-tree-id30986 . -139) (undo-tree-id30987 . -139) (undo-tree-id30988 . -139) (undo-tree-id30989 . -139) (undo-tree-id30990 . -139) (undo-tree-id30991 . -139) (undo-tree-id30992 . -139) (undo-tree-id30993 . -139) (undo-tree-id30994 . -139) (undo-tree-id30995 . -139) (undo-tree-id30996 . -139) (undo-tree-id30997 . -139) (undo-tree-id30998 . -139) (undo-tree-id30999 . -139) (undo-tree-id31000 . -139) (undo-tree-id31001 . -139) (undo-tree-id31002 . -139) (undo-tree-id31003 . -139) (undo-tree-id31004 . -139) (undo-tree-id31005 . -139) (undo-tree-id31006 . -139) (undo-tree-id31007 . -139) (undo-tree-id31008 . -139) (undo-tree-id31009 . -139) (undo-tree-id31010 . -139) (undo-tree-id31011 . -139) (undo-tree-id31012 . -139) (undo-tree-id31013 . -139) (undo-tree-id31014 . -139) (undo-tree-id31015 . -139) (undo-tree-id31016 . -139) (undo-tree-id31017 . -139) (undo-tree-id31018 . -139) (undo-tree-id31019 . -139) (undo-tree-id31020 . -139) (undo-tree-id31021 . -139) (undo-tree-id31022 . -139) (undo-tree-id31023 . -139) (undo-tree-id31024 . -139) (undo-tree-id31025 . -139) (undo-tree-id31026 . -139) (undo-tree-id31027 . -139) (undo-tree-id31028 . -139) (undo-tree-id31029 . -139) (undo-tree-id31030 . -139) (undo-tree-id31031 . -139) (undo-tree-id31032 . -139) (undo-tree-id31033 . -139) (undo-tree-id31034 . -139) (undo-tree-id31035 . -139) (undo-tree-id31036 . -139) (undo-tree-id31037 . -139) (undo-tree-id31038 . -139) (undo-tree-id31039 . -139) (undo-tree-id31040 . -139) (undo-tree-id31041 . -139) (undo-tree-id31042 . -139) (undo-tree-id31043 . -139) (undo-tree-id31044 . -139) (undo-tree-id31045 . -139) (undo-tree-id31046 . -139) (undo-tree-id31047 . -139) (undo-tree-id31048 . -139) (undo-tree-id31049 . -139) (undo-tree-id31050 . -139) (undo-tree-id31051 . -139) (undo-tree-id31052 . -139) (undo-tree-id31053 . -139) (undo-tree-id31054 . -139) (undo-tree-id31055 . -139) (undo-tree-id31056 . -139) (undo-tree-id31057 . -139) (undo-tree-id31058 . -139) (undo-tree-id31059 . -139) (undo-tree-id31060 . -139) (undo-tree-id31061 . -139) (undo-tree-id31062 . -139) (undo-tree-id31063 . -139) (undo-tree-id31064 . -139) (undo-tree-id31065 . -139) (undo-tree-id31066 . -139) (undo-tree-id31067 . -139) (undo-tree-id31068 . -139) (undo-tree-id31069 . -139) (undo-tree-id31070 . -139) (undo-tree-id31071 . -139) (undo-tree-id31072 . -139) (undo-tree-id31073 . -139) (undo-tree-id31074 . -139) (undo-tree-id31075 . -139) (undo-tree-id31076 . -139) (undo-tree-id31077 . -139) (undo-tree-id31078 . -139) (undo-tree-id31079 . -139) (undo-tree-id31080 . -139) (undo-tree-id31081 . -139) (undo-tree-id31082 . -139) (undo-tree-id31083 . -139) (undo-tree-id31084 . -139) (undo-tree-id31085 . -139) (undo-tree-id31086 . -139) (undo-tree-id31087 . -139) (undo-tree-id31088 . -139) (undo-tree-id31089 . -139) (undo-tree-id31090 . -139) (undo-tree-id31091 . -139) (undo-tree-id31092 . -139) (undo-tree-id31093 . -139) (undo-tree-id31094 . -139) (undo-tree-id31095 . -139) (undo-tree-id31096 . -139) (undo-tree-id31097 . -139) (undo-tree-id31098 . -139) (undo-tree-id31099 . -139) (undo-tree-id31100 . -139) (undo-tree-id31101 . -139) (undo-tree-id31102 . -139) (undo-tree-id31103 . -139) (undo-tree-id31104 . -139) (undo-tree-id31105 . -139) (undo-tree-id31106 . -139) (undo-tree-id31107 . -139) (undo-tree-id31108 . -139) (undo-tree-id31109 . -139) (undo-tree-id31110 . -139) (undo-tree-id31111 . -139) (undo-tree-id31112 . -139) (undo-tree-id31113 . -139) (undo-tree-id31114 . -143) (undo-tree-id31115 . -143) (undo-tree-id31116 . -143) (undo-tree-id31117 . -143) (undo-tree-id31118 . -143) (undo-tree-id31119 . -143) (undo-tree-id31120 . -143) (undo-tree-id31121 . -143) (undo-tree-id31122 . -143) (undo-tree-id31123 . -143) (undo-tree-id31124 . -143) (undo-tree-id31125 . -143) (undo-tree-id31126 . -143) (undo-tree-id31127 . -143) (undo-tree-id31128 . -143) (undo-tree-id31129 . -150) (undo-tree-id31130 . -150) (undo-tree-id31131 . -150) (undo-tree-id31132 . -150) (undo-tree-id31133 . -150) (undo-tree-id31134 . -150) (undo-tree-id31135 . -150) (undo-tree-id31136 . -150) (undo-tree-id31137 . -150) (undo-tree-id31138 . -150) (undo-tree-id31139 . -150) (undo-tree-id31140 . -150) (undo-tree-id31141 . -150) (undo-tree-id31142 . -150) (undo-tree-id31143 . -150) (undo-tree-id31144 . -150) (undo-tree-id31145 . -150) (undo-tree-id31146 . -150) (undo-tree-id31147 . -150) (undo-tree-id31148 . -150) (undo-tree-id31149 . -150) (undo-tree-id31150 . -150) (undo-tree-id31151 . -153) (undo-tree-id31152 . -153) (undo-tree-id31153 . -153) (undo-tree-id31154 . -153) (undo-tree-id31155 . -153) (undo-tree-id31156 . -153) (undo-tree-id31157 . -153) (undo-tree-id31158 . -153) (undo-tree-id31159 . -153) (undo-tree-id31160 . -153) (undo-tree-id31161 . -153) (undo-tree-id31162 . -153) (undo-tree-id31163 . -153) (undo-tree-id31164 . -153) (undo-tree-id31165 . -153) (undo-tree-id31166 . -156) (undo-tree-id31167 . -156) (undo-tree-id31168 . -156) (undo-tree-id31169 . -156) (undo-tree-id31170 . -156) (undo-tree-id31171 . -156) (undo-tree-id31172 . -156) (undo-tree-id31173 . -156) (undo-tree-id31174 . -156) (undo-tree-id31175 . -156) (undo-tree-id31176 . -156) (undo-tree-id31177 . -156) (undo-tree-id31178 . -156) (undo-tree-id31179 . -156) (undo-tree-id31180 . -156) (undo-tree-id31181 . -156) (undo-tree-id31182 . -156) (undo-tree-id31183 . -156) (undo-tree-id31184 . -156) (undo-tree-id31185 . -156) (undo-tree-id31186 . -156) (undo-tree-id31187 . -156) (undo-tree-id31188 . -156) (undo-tree-id31189 . -156) (undo-tree-id31190 . -156) (undo-tree-id31191 . -156) (undo-tree-id31192 . -156) (undo-tree-id31193 . -156) (undo-tree-id31194 . -156) (undo-tree-id31195 . -158) (undo-tree-id31196 . -158) (undo-tree-id31197 . -158) (undo-tree-id31198 . -158) (undo-tree-id31199 . -158) (undo-tree-id31200 . -158) (undo-tree-id31201 . -158) (undo-tree-id31202 . -158) (undo-tree-id31203 . -158) (undo-tree-id31204 . -158) (undo-tree-id31205 . -158) (undo-tree-id31206 . -158) (undo-tree-id31207 . -158) (undo-tree-id31208 . -158) (undo-tree-id31209 . -158) (undo-tree-id31210 . -162) (undo-tree-id31211 . -162) (undo-tree-id31212 . -162) (undo-tree-id31213 . -162) (undo-tree-id31214 . -162) (undo-tree-id31215 . -162) (undo-tree-id31216 . -162) (undo-tree-id31217 . -162) (undo-tree-id31218 . -162) (undo-tree-id31219 . -162) (undo-tree-id31220 . -162) (undo-tree-id31221 . -162) (undo-tree-id31222 . -162) (undo-tree-id31223 . -162) (undo-tree-id31224 . -162) (undo-tree-id31225 . -162) (undo-tree-id31226 . -162) (undo-tree-id31227 . -162) (undo-tree-id31228 . -162) (undo-tree-id31229 . -162) (undo-tree-id31230 . -162) (undo-tree-id31231 . -162) (undo-tree-id31232 . -158) (undo-tree-id31233 . -158) (undo-tree-id31234 . -158) (undo-tree-id31235 . -158) (undo-tree-id31236 . -158) (undo-tree-id31237 . -158) (undo-tree-id31238 . -158) (undo-tree-id31239 . -158) (undo-tree-id31240 . -158) (undo-tree-id31241 . -158) (undo-tree-id31242 . -158) (undo-tree-id31243 . -158) (undo-tree-id31244 . -158) (undo-tree-id31245 . -158) (undo-tree-id31246 . -158) (undo-tree-id31247 . -155) (undo-tree-id31248 . -155) (undo-tree-id31249 . -155) (undo-tree-id31250 . -155) (undo-tree-id31251 . -155) (undo-tree-id31252 . -155) (undo-tree-id31253 . -155) (undo-tree-id31254 . -155) (undo-tree-id31255 . -155) (undo-tree-id31256 . -155) (undo-tree-id31257 . -155) (undo-tree-id31258 . -155) (undo-tree-id31259 . -155) (undo-tree-id31260 . -155) (undo-tree-id31261 . -155) (undo-tree-id31262 . -155) (undo-tree-id31263 . -155) (undo-tree-id31264 . -155) (undo-tree-id31265 . -155) (undo-tree-id31266 . -155) (undo-tree-id31267 . -155) (undo-tree-id31268 . -155) (undo-tree-id31269 . -158) (undo-tree-id31270 . -158) (undo-tree-id31271 . -158) (undo-tree-id31272 . -158) (undo-tree-id31273 . -158) (undo-tree-id31274 . -158) (undo-tree-id31275 . -158) (undo-tree-id31276 . -158) (undo-tree-id31277 . -158) (undo-tree-id31278 . -158) (undo-tree-id31279 . -158) (undo-tree-id31280 . -158) (undo-tree-id31281 . -158) (undo-tree-id31282 . -158) (undo-tree-id31283 . -158) (undo-tree-id31284 . -162) (undo-tree-id31285 . -162) (undo-tree-id31286 . -162) (undo-tree-id31287 . -162) (undo-tree-id31288 . -162) (undo-tree-id31289 . -162) (undo-tree-id31290 . -162) (undo-tree-id31291 . -162) (undo-tree-id31292 . -162) (undo-tree-id31293 . -162) (undo-tree-id31294 . -162) (undo-tree-id31295 . -162) (undo-tree-id31296 . -162) (undo-tree-id31297 . -162) (undo-tree-id31298 . -162) (undo-tree-id31299 . -162) (undo-tree-id31300 . -162) (undo-tree-id31301 . -162) (undo-tree-id31302 . -162) (undo-tree-id31303 . -162) (undo-tree-id31304 . -162) (undo-tree-id31305 . -162) (undo-tree-id31306 . -162) (undo-tree-id31307 . -162) (undo-tree-id31308 . -162) (undo-tree-id31309 . -162) (undo-tree-id31310 . -162) (undo-tree-id31311 . -162) (undo-tree-id31312 . -162) (undo-tree-id31313 . -162) (undo-tree-id31314 . -162) (undo-tree-id31315 . -162) (undo-tree-id31316 . -162) (undo-tree-id31317 . -162) (undo-tree-id31318 . -162) (undo-tree-id31319 . -162) (undo-tree-id31320 . -162) (undo-tree-id31321 . -162) (undo-tree-id31322 . -162) (undo-tree-id31323 . -162) (undo-tree-id31324 . -162) (undo-tree-id31325 . -162) (undo-tree-id31326 . -162) (undo-tree-id31327 . -162) (undo-tree-id31328 . -162) (undo-tree-id31329 . -162) (undo-tree-id31330 . -162) (undo-tree-id31331 . -162) (undo-tree-id31332 . -162) (undo-tree-id31333 . -162) (undo-tree-id31334 . -162) (undo-tree-id31335 . -162) (undo-tree-id31336 . -162) (undo-tree-id31337 . -162) (undo-tree-id31338 . -162) (undo-tree-id31339 . -162) (undo-tree-id31340 . -162) (undo-tree-id31341 . -162) (undo-tree-id31342 . -162) (undo-tree-id31343 . -162) (undo-tree-id31344 . -162) (undo-tree-id31345 . -162) (undo-tree-id31346 . -162) (undo-tree-id31347 . -162) (undo-tree-id31348 . -162) (undo-tree-id31349 . -162) (undo-tree-id31350 . -162) (undo-tree-id31351 . -162) (undo-tree-id31352 . -162) (undo-tree-id31353 . -162) (undo-tree-id31354 . -162) (undo-tree-id31355 . -162) (undo-tree-id31356 . -162) (undo-tree-id31357 . -162) (undo-tree-id31358 . -162) (undo-tree-id31359 . -162) (undo-tree-id31360 . -162) (undo-tree-id31361 . -162) (undo-tree-id31362 . -162) (undo-tree-id31363 . -162) (undo-tree-id31364 . -162) (undo-tree-id31365 . -162) (undo-tree-id31366 . -162) (undo-tree-id31367 . -162) (undo-tree-id31368 . -162) (undo-tree-id31369 . -162) (undo-tree-id31370 . -162) (undo-tree-id31371 . -162) (undo-tree-id31372 . -162) (undo-tree-id31373 . -162) (undo-tree-id31374 . -162) (undo-tree-id31375 . -162) (undo-tree-id31376 . -162) (undo-tree-id31377 . -162) (undo-tree-id31378 . -162) (undo-tree-id31379 . -162) (undo-tree-id31380 . -162) (undo-tree-id31381 . -162) (undo-tree-id31382 . -162) (undo-tree-id31383 . -162) (undo-tree-id31384 . -162) (undo-tree-id31385 . -162) (undo-tree-id31386 . -162) (undo-tree-id31387 . -162) (undo-tree-id31388 . -162) (undo-tree-id31389 . -162) (undo-tree-id31390 . -162) (undo-tree-id31391 . -162) (undo-tree-id31392 . -162) (undo-tree-id31393 . -162) (undo-tree-id31394 . -162) (undo-tree-id31395 . -162) (undo-tree-id31396 . -162) (undo-tree-id31397 . -162) (undo-tree-id31398 . -162) (undo-tree-id31399 . -162) (undo-tree-id31400 . -162) (undo-tree-id31401 . -162) (undo-tree-id31402 . -162) (undo-tree-id31403 . -162) (undo-tree-id31404 . -162) (undo-tree-id31405 . -162) (undo-tree-id31406 . -162) (undo-tree-id31407 . -162) (undo-tree-id31408 . -162) (undo-tree-id31409 . -162) (undo-tree-id31410 . -162) (undo-tree-id31411 . -162) (undo-tree-id31412 . -168) (undo-tree-id31413 . -168) (undo-tree-id31414 . -168) (undo-tree-id31415 . -168) (undo-tree-id31416 . -168) (undo-tree-id31417 . -168) (undo-tree-id31418 . -168) (undo-tree-id31419 . -168) (undo-tree-id31420 . -168) (undo-tree-id31421 . -168) (undo-tree-id31422 . -168) (undo-tree-id31423 . -168) (undo-tree-id31424 . -168) (undo-tree-id31425 . -168) (undo-tree-id31426 . -168) (undo-tree-id31427 . -176) (undo-tree-id31428 . -176) (undo-tree-id31429 . -176) (undo-tree-id31430 . -176) (undo-tree-id31431 . -176) (undo-tree-id31432 . -176) (undo-tree-id31433 . -176) (undo-tree-id31434 . -176) (undo-tree-id31435 . -176) (undo-tree-id31436 . -176) (undo-tree-id31437 . -176) (undo-tree-id31438 . -176) (undo-tree-id31439 . -176) (undo-tree-id31440 . -176) (undo-tree-id31441 . -176) (undo-tree-id31442 . -177) (undo-tree-id31443 . -177) (undo-tree-id31444 . -177) (undo-tree-id31445 . -177) (undo-tree-id31446 . -177) (undo-tree-id31447 . -177) (undo-tree-id31448 . -177) (undo-tree-id31449 . -177) (undo-tree-id31450 . -177) (undo-tree-id31451 . -177) (undo-tree-id31452 . -177) (undo-tree-id31453 . -177) (undo-tree-id31454 . -177) (undo-tree-id31455 . -177) (undo-tree-id31456 . -177) (undo-tree-id31457 . -177) (undo-tree-id31458 . -177) (undo-tree-id31459 . -178) (undo-tree-id31460 . -178) (undo-tree-id31461 . -178) (undo-tree-id31462 . -178) (undo-tree-id31463 . -178) (undo-tree-id31464 . -178) (undo-tree-id31465 . -178) (undo-tree-id31466 . -178) (undo-tree-id31467 . -178) (undo-tree-id31468 . -178) (undo-tree-id31469 . -178) (undo-tree-id31470 . -178) (undo-tree-id31471 . -178) (undo-tree-id31472 . -178) (undo-tree-id31473 . -178) (undo-tree-id31474 . -178) (undo-tree-id31475 . -178) (undo-tree-id31476 . -178) (undo-tree-id31477 . -178) (undo-tree-id31478 . -178) (undo-tree-id31479 . -178) (undo-tree-id31480 . -178) (undo-tree-id31481 . -178) (undo-tree-id31482 . -179) (undo-tree-id31483 . -179) (undo-tree-id31484 . -179) (undo-tree-id31485 . -179) (undo-tree-id31486 . -179) (undo-tree-id31487 . -179) (undo-tree-id31488 . -179) (undo-tree-id31489 . -179) (undo-tree-id31490 . -179) (undo-tree-id31491 . -179) (undo-tree-id31492 . -179) (undo-tree-id31493 . -179) (undo-tree-id31494 . -179) (undo-tree-id31495 . -179) (undo-tree-id31496 . -179) (undo-tree-id31497 . -179) (undo-tree-id31498 . -179) (undo-tree-id31499 . -179) (undo-tree-id31500 . -179) (undo-tree-id31501 . -179) (undo-tree-id31502 . -179) (undo-tree-id31503 . -179) (undo-tree-id31504 . -179) (undo-tree-id31505 . -179) (undo-tree-id31506 . -179) (undo-tree-id31507 . -179) (undo-tree-id31508 . -179) (undo-tree-id31509 . -179) (undo-tree-id31510 . -179) (undo-tree-id31511 . -179) (undo-tree-id31512 . -179) (undo-tree-id31513 . -179) (undo-tree-id31514 . -179) (undo-tree-id31515 . -179) (undo-tree-id31516 . -179) (undo-tree-id31517 . -179) (undo-tree-id31518 . -180) (undo-tree-id31519 . -180) (undo-tree-id31520 . -180) (undo-tree-id31521 . -180) (undo-tree-id31522 . -180) (undo-tree-id31523 . -180) (undo-tree-id31524 . -180) (undo-tree-id31525 . -180) (undo-tree-id31526 . -180) (undo-tree-id31527 . -180) (undo-tree-id31528 . -180) (undo-tree-id31529 . -180) (undo-tree-id31530 . -180) (undo-tree-id31531 . -180) (undo-tree-id31532 . -180) (undo-tree-id31533 . -180) (undo-tree-id31534 . -180) (undo-tree-id31535 . -180) (undo-tree-id31536 . -180) (undo-tree-id31537 . -180) (undo-tree-id31538 . -180) (undo-tree-id31539 . -180) (undo-tree-id31540 . -180) (undo-tree-id31541 . -180) (undo-tree-id31542 . -181) (undo-tree-id31543 . -181) (undo-tree-id31544 . -181) (undo-tree-id31545 . -181) (undo-tree-id31546 . -181) (undo-tree-id31547 . -181) (undo-tree-id31548 . -181) (undo-tree-id31549 . -181) (undo-tree-id31550 . -181) (undo-tree-id31551 . -181) (undo-tree-id31552 . -181) (undo-tree-id31553 . -181) (undo-tree-id31554 . -181) (undo-tree-id31555 . -181) (undo-tree-id31556 . -181) (undo-tree-id31557 . -181) (undo-tree-id31558 . -181) (undo-tree-id31559 . -181) (undo-tree-id31560 . -181) (undo-tree-id31561 . -181) (undo-tree-id31562 . -181) (undo-tree-id31563 . -181) (undo-tree-id31564 . -181) (undo-tree-id31565 . -181) (undo-tree-id31566 . -182) (undo-tree-id31567 . -182) (undo-tree-id31568 . -182) (undo-tree-id31569 . -182) (undo-tree-id31570 . -182) (undo-tree-id31571 . -182) (undo-tree-id31572 . -182) (undo-tree-id31573 . -182) (undo-tree-id31574 . -182) (undo-tree-id31575 . -182) (undo-tree-id31576 . -182) (undo-tree-id31577 . -182) (undo-tree-id31578 . -182) (undo-tree-id31579 . -182) (undo-tree-id31580 . -182) (undo-tree-id31581 . -182) (undo-tree-id31582 . -182) (undo-tree-id31583 . -182) (undo-tree-id31584 . -182) (undo-tree-id31585 . -182) (undo-tree-id31586 . -182) (undo-tree-id31587 . -182) (undo-tree-id31588 . -182) (undo-tree-id31589 . -182) (undo-tree-id31590 . -183) (undo-tree-id31591 . -183) (undo-tree-id31592 . -183) (undo-tree-id31593 . -183) (undo-tree-id31594 . -183) (undo-tree-id31595 . -183) (undo-tree-id31596 . -183) (undo-tree-id31597 . -183) (undo-tree-id31598 . -183) (undo-tree-id31599 . -183) (undo-tree-id31600 . -183) (undo-tree-id31601 . -183) (undo-tree-id31602 . -183) (undo-tree-id31603 . -183) (undo-tree-id31604 . -183) (undo-tree-id31605 . -183) (undo-tree-id31606 . -183) (undo-tree-id31607 . -183) (undo-tree-id31608 . -183) (undo-tree-id31609 . -183) (undo-tree-id31610 . -183) (undo-tree-id31611 . -183) (undo-tree-id31612 . -183) (undo-tree-id31613 . -183) (undo-tree-id31614 . -184) (undo-tree-id31615 . -184) (undo-tree-id31616 . -184) (undo-tree-id31617 . -184) (undo-tree-id31618 . -184) (undo-tree-id31619 . -184) (undo-tree-id31620 . -184) (undo-tree-id31621 . -184) (undo-tree-id31622 . -184) (undo-tree-id31623 . -184) (undo-tree-id31624 . -184) (undo-tree-id31625 . -184) (undo-tree-id31626 . -184) (undo-tree-id31627 . -184) (undo-tree-id31628 . -184) (undo-tree-id31629 . -184) (undo-tree-id31630 . -184) (undo-tree-id31631 . -184) (undo-tree-id31632 . -184) (undo-tree-id31633 . -184) (undo-tree-id31634 . -184) (undo-tree-id31635 . -184) (undo-tree-id31636 . -184) (undo-tree-id31637 . -184) (undo-tree-id31638 . -184) (undo-tree-id31639 . -184) (undo-tree-id31640 . -184) (undo-tree-id31641 . -184) (undo-tree-id31642 . -184) (undo-tree-id31643 . -184) (undo-tree-id31644 . -184) (undo-tree-id31645 . -185) (undo-tree-id31646 . -185) (undo-tree-id31647 . -185) (undo-tree-id31648 . -185) (undo-tree-id31649 . -185) (undo-tree-id31650 . -185) (undo-tree-id31651 . -185) (undo-tree-id31652 . -185) (undo-tree-id31653 . -185) (undo-tree-id31654 . -185) (undo-tree-id31655 . -185) (undo-tree-id31656 . -185) (undo-tree-id31657 . -185) (undo-tree-id31658 . -185) (undo-tree-id31659 . -185) (undo-tree-id31660 . -185) (undo-tree-id31661 . -185) (undo-tree-id31662 . -185) (undo-tree-id31663 . -185) (undo-tree-id31664 . -185) (undo-tree-id31665 . -185) (undo-tree-id31666 . -185) (undo-tree-id31667 . -185) (undo-tree-id31668 . -185) (undo-tree-id31669 . -185) (undo-tree-id31670 . -185) (undo-tree-id31671 . -185) (undo-tree-id31672 . -185) (undo-tree-id31673 . -185) (undo-tree-id31674 . -185) (undo-tree-id31675 . -185) (undo-tree-id31676 . -185) (undo-tree-id31677 . -185) (undo-tree-id31678 . -185) (undo-tree-id31679 . -185) (undo-tree-id31680 . -185) (undo-tree-id31681 . -185) (undo-tree-id31682 . -185) (undo-tree-id31683 . -186) (undo-tree-id31684 . -186) (undo-tree-id31685 . -186) (undo-tree-id31686 . -186) (undo-tree-id31687 . -186) (undo-tree-id31688 . -186) (undo-tree-id31689 . -186) (undo-tree-id31690 . -186) (undo-tree-id31691 . -186) (undo-tree-id31692 . -186) (undo-tree-id31693 . -186) (undo-tree-id31694 . -186) (undo-tree-id31695 . -186) (undo-tree-id31696 . -186) (undo-tree-id31697 . -186) (undo-tree-id31698 . -186) (undo-tree-id31699 . -186) (undo-tree-id31700 . -186) (undo-tree-id31701 . -186) (undo-tree-id31702 . -186) (undo-tree-id31703 . -186) (undo-tree-id31704 . -186) (undo-tree-id31705 . -186) (undo-tree-id31706 . -186) (undo-tree-id31707 . -187) (undo-tree-id31708 . -187) (undo-tree-id31709 . -187) (undo-tree-id31710 . -187) (undo-tree-id31711 . -187) (undo-tree-id31712 . -187) (undo-tree-id31713 . -187) (undo-tree-id31714 . -187) (undo-tree-id31715 . -187) (undo-tree-id31716 . -187) (undo-tree-id31717 . -187) (undo-tree-id31718 . -187) (undo-tree-id31719 . -187) (undo-tree-id31720 . -187) (undo-tree-id31721 . -187) (undo-tree-id31722 . -187) (undo-tree-id31723 . -187) (undo-tree-id31724 . -187) (undo-tree-id31725 . -187) (undo-tree-id31726 . -187) (undo-tree-id31727 . -187) (undo-tree-id31728 . -187) (undo-tree-id31729 . -187) (undo-tree-id31730 . -187) (undo-tree-id31731 . -188) (undo-tree-id31732 . -188) (undo-tree-id31733 . -188) (undo-tree-id31734 . -188) (undo-tree-id31735 . -188) (undo-tree-id31736 . -188) (undo-tree-id31737 . -188) (undo-tree-id31738 . -188) (undo-tree-id31739 . -188) (undo-tree-id31740 . -188) (undo-tree-id31741 . -188) (undo-tree-id31742 . -188) (undo-tree-id31743 . -188) (undo-tree-id31744 . -188) (undo-tree-id31745 . -188) (undo-tree-id31746 . -188) (undo-tree-id31747 . -188) (undo-tree-id31748 . -188) (undo-tree-id31749 . -188) (undo-tree-id31750 . -188) (undo-tree-id31751 . -188) (undo-tree-id31752 . -188) (undo-tree-id31753 . -188) (undo-tree-id31754 . -188) (undo-tree-id31755 . -189) (undo-tree-id31756 . -189) (undo-tree-id31757 . -189) (undo-tree-id31758 . -189) (undo-tree-id31759 . -189) (undo-tree-id31760 . -189) (undo-tree-id31761 . -189) (undo-tree-id31762 . -189) (undo-tree-id31763 . -189) (undo-tree-id31764 . -189) (undo-tree-id31765 . -189) (undo-tree-id31766 . -189) (undo-tree-id31767 . -189) (undo-tree-id31768 . -189) (undo-tree-id31769 . -189) (undo-tree-id31770 . -189) (undo-tree-id31771 . -189) (undo-tree-id31772 . -189) (undo-tree-id31773 . -189) (undo-tree-id31774 . -189) (undo-tree-id31775 . -189) (undo-tree-id31776 . -189) (undo-tree-id31777 . -189) (undo-tree-id31778 . -189) (undo-tree-id31779 . -189) (undo-tree-id31780 . -189) (undo-tree-id31781 . -189) (undo-tree-id31782 . -189) (undo-tree-id31783 . -189) (undo-tree-id31784 . -189) (undo-tree-id31785 . -189) (undo-tree-id31786 . -189) (undo-tree-id31787 . -189) (undo-tree-id31788 . -189) (undo-tree-id31789 . -189) (undo-tree-id31790 . -189) (undo-tree-id31791 . -189) (undo-tree-id31792 . -189) (undo-tree-id31793 . -190) (undo-tree-id31794 . -190) (undo-tree-id31795 . -190) (undo-tree-id31796 . -190) (undo-tree-id31797 . -190) (undo-tree-id31798 . -190) (undo-tree-id31799 . -190) (undo-tree-id31800 . -190) (undo-tree-id31801 . -190) (undo-tree-id31802 . -190) (undo-tree-id31803 . -190) (undo-tree-id31804 . -190) (undo-tree-id31805 . -190) (undo-tree-id31806 . -190) (undo-tree-id31807 . -190) (undo-tree-id31808 . -190) (undo-tree-id31809 . -190) (undo-tree-id31810 . -190) (undo-tree-id31811 . -190) (undo-tree-id31812 . -190) (undo-tree-id31813 . -190) (undo-tree-id31814 . -190) (undo-tree-id31815 . -190) (undo-tree-id31816 . -190) (undo-tree-id31817 . -190) (undo-tree-id31818 . -190) (undo-tree-id31819 . -190) (undo-tree-id31820 . -190) (undo-tree-id31821 . -190) (undo-tree-id31822 . -190) (undo-tree-id31823 . -190) (undo-tree-id31824 . -191) (undo-tree-id31825 . -191) (undo-tree-id31826 . -191) (undo-tree-id31827 . -191) (undo-tree-id31828 . -191) (undo-tree-id31829 . -191) (undo-tree-id31830 . -191) (undo-tree-id31831 . -191) (undo-tree-id31832 . -191) (undo-tree-id31833 . -191) (undo-tree-id31834 . -191) (undo-tree-id31835 . -191) (undo-tree-id31836 . -191) (undo-tree-id31837 . -191) (undo-tree-id31838 . -191) (undo-tree-id31839 . -191) (undo-tree-id31840 . -191) (undo-tree-id31841 . -191) (undo-tree-id31842 . -191) (undo-tree-id31843 . -191) (undo-tree-id31844 . -191) (undo-tree-id31845 . -191) (undo-tree-id31846 . -191) (undo-tree-id31847 . -191) (undo-tree-id31848 . -191) (undo-tree-id31849 . -191) (undo-tree-id31850 . -191) (undo-tree-id31851 . -191) (undo-tree-id31852 . -191) (undo-tree-id31853 . -191) (undo-tree-id31854 . -191) (undo-tree-id31855 . -191) (undo-tree-id31856 . -191) (undo-tree-id31857 . -191) (undo-tree-id31858 . -191) (undo-tree-id31859 . -191) (undo-tree-id31860 . -192) (undo-tree-id31861 . -192) (undo-tree-id31862 . -192) (undo-tree-id31863 . -192) (undo-tree-id31864 . -192) (undo-tree-id31865 . -192) (undo-tree-id31866 . -192) (undo-tree-id31867 . -192) (undo-tree-id31868 . -192) (undo-tree-id31869 . -192) (undo-tree-id31870 . -192) (undo-tree-id31871 . -192) (undo-tree-id31872 . -192) (undo-tree-id31873 . -192) (undo-tree-id31874 . -192) (undo-tree-id31875 . -192) (undo-tree-id31876 . -192) (undo-tree-id31877 . -192) (undo-tree-id31878 . -192) (undo-tree-id31879 . -192) (undo-tree-id31880 . -192) (undo-tree-id31881 . -192) (undo-tree-id31882 . -192) (undo-tree-id31883 . -192) (undo-tree-id31884 . -192) (undo-tree-id31885 . -192) (undo-tree-id31886 . -192) (undo-tree-id31887 . -192) (undo-tree-id31888 . -192) (undo-tree-id31889 . -192) (undo-tree-id31890 . -192) (undo-tree-id31891 . -193) (undo-tree-id31892 . -193) (undo-tree-id31893 . -193) (undo-tree-id31894 . -193) (undo-tree-id31895 . -193) (undo-tree-id31896 . -193) (undo-tree-id31897 . -193) (undo-tree-id31898 . -193) (undo-tree-id31899 . -193) (undo-tree-id31900 . -193) (undo-tree-id31901 . -193) (undo-tree-id31902 . -193) (undo-tree-id31903 . -193) (undo-tree-id31904 . -193) (undo-tree-id31905 . -193) (undo-tree-id31906 . -193) (undo-tree-id31907 . -193) (undo-tree-id31908 . -193) (undo-tree-id31909 . -193) (undo-tree-id31910 . -193) (undo-tree-id31911 . -193) (undo-tree-id31912 . -193) (undo-tree-id31913 . -193) (undo-tree-id31914 . -193) (undo-tree-id31915 . -194) (undo-tree-id31916 . -194) (undo-tree-id31917 . -194) (undo-tree-id31918 . -194) (undo-tree-id31919 . -194) (undo-tree-id31920 . -194) (undo-tree-id31921 . -194) (undo-tree-id31922 . -194) (undo-tree-id31923 . -194) (undo-tree-id31924 . -194) (undo-tree-id31925 . -194) (undo-tree-id31926 . -194) (undo-tree-id31927 . -194) (undo-tree-id31928 . -194) (undo-tree-id31929 . -194) (undo-tree-id31930 . -194) (undo-tree-id31931 . -194) (undo-tree-id31932 . -194) (undo-tree-id31933 . -194) (undo-tree-id31934 . -194) (undo-tree-id31935 . -194) (undo-tree-id31936 . -194) (undo-tree-id31937 . -194) (undo-tree-id31938 . -194) (undo-tree-id31939 . -195) (undo-tree-id31940 . -195) (undo-tree-id31941 . -195) (undo-tree-id31942 . -195) (undo-tree-id31943 . -195) (undo-tree-id31944 . -195) (undo-tree-id31945 . -195) (undo-tree-id31946 . -195) (undo-tree-id31947 . -195) (undo-tree-id31948 . -195) (undo-tree-id31949 . -195) (undo-tree-id31950 . -195) (undo-tree-id31951 . -195) (undo-tree-id31952 . -195) (undo-tree-id31953 . -195) (undo-tree-id31954 . -195) (undo-tree-id31955 . -195) (undo-tree-id31956 . -195) (undo-tree-id31957 . -195) (undo-tree-id31958 . -195) (undo-tree-id31959 . -195) (undo-tree-id31960 . -195) (undo-tree-id31961 . -195) (undo-tree-id31962 . -195) (undo-tree-id31963 . -196) (undo-tree-id31964 . -196) (undo-tree-id31965 . -196) (undo-tree-id31966 . -196) (undo-tree-id31967 . -196) (undo-tree-id31968 . -196) (undo-tree-id31969 . -196) (undo-tree-id31970 . -196) (undo-tree-id31971 . -196) (undo-tree-id31972 . -196) (undo-tree-id31973 . -196) (undo-tree-id31974 . -196) (undo-tree-id31975 . -196) (undo-tree-id31976 . -196) (undo-tree-id31977 . -196) (undo-tree-id31978 . -196) (undo-tree-id31979 . -196) (undo-tree-id31980 . -196) (undo-tree-id31981 . -196) (undo-tree-id31982 . -197) (undo-tree-id31983 . -197) (undo-tree-id31984 . -197) (undo-tree-id31985 . -197) (undo-tree-id31986 . -197) (undo-tree-id31987 . -197) (undo-tree-id31988 . -197) (undo-tree-id31989 . -197) (undo-tree-id31990 . -197) (undo-tree-id31991 . -197) (undo-tree-id31992 . -197) (undo-tree-id31993 . -197) (undo-tree-id31994 . -197) (undo-tree-id31995 . -197) (undo-tree-id31996 . -197) (undo-tree-id31997 . -197) (undo-tree-id31998 . -197) (undo-tree-id31999 . -197) (undo-tree-id32000 . -197) (undo-tree-id32001 . -197) (undo-tree-id32002 . -197) (undo-tree-id32003 . -197) (undo-tree-id32004 . -197) (undo-tree-id32005 . -197) (undo-tree-id32006 . -197) (undo-tree-id32007 . -197) (undo-tree-id32008 . -197) (undo-tree-id32009 . -197) (undo-tree-id32010 . -197) (undo-tree-id32011 . -197) (undo-tree-id32012 . -198) (undo-tree-id32013 . -198) (undo-tree-id32014 . -198) (undo-tree-id32015 . -198) (undo-tree-id32016 . -198) (undo-tree-id32017 . -198) (undo-tree-id32018 . -198) (undo-tree-id32019 . -198) (undo-tree-id32020 . -198) (undo-tree-id32021 . -198) (undo-tree-id32022 . -198) (undo-tree-id32023 . -198) (undo-tree-id32024 . -198) (undo-tree-id32025 . -198) (undo-tree-id32026 . -198) (undo-tree-id32027 . -198) (undo-tree-id32028 . -198) (undo-tree-id32029 . -198) (undo-tree-id32030 . -198) (undo-tree-id32031 . -198) (undo-tree-id32032 . -198) (undo-tree-id32033 . -198) (undo-tree-id32034 . -198) (undo-tree-id32035 . -198) (undo-tree-id32036 . -198) (undo-tree-id32037 . -198) (undo-tree-id32038 . -198) (undo-tree-id32039 . -198) (undo-tree-id32040 . -198) (undo-tree-id32041 . -198) (undo-tree-id32042 . -198) (undo-tree-id32043 . -198) (undo-tree-id32044 . -198) (undo-tree-id32045 . -198) (undo-tree-id32046 . -198) (undo-tree-id32047 . -198) (undo-tree-id32048 . -198) (undo-tree-id32049 . -198) (undo-tree-id32050 . -198) (undo-tree-id32051 . -198) (undo-tree-id32052 . -198) (undo-tree-id32053 . -198) (undo-tree-id32054 . -198) (undo-tree-id32055 . -198) (undo-tree-id32056 . -198) (undo-tree-id32057 . -198) (undo-tree-id32058 . -198) (undo-tree-id32059 . -198) (undo-tree-id32060 . -198) (undo-tree-id32061 . -198) (undo-tree-id32062 . -198) (undo-tree-id32063 . -198) (undo-tree-id32064 . -198) (undo-tree-id32065 . -198) (undo-tree-id32066 . -198) (undo-tree-id32067 . -198) (undo-tree-id32068 . -198) (undo-tree-id32069 . -198) (undo-tree-id32070 . -198) (undo-tree-id32071 . -198) (undo-tree-id32072 . -199) (undo-tree-id32073 . -199) (undo-tree-id32074 . -199) (undo-tree-id32075 . -199) (undo-tree-id32076 . -199) (undo-tree-id32077 . -199) (undo-tree-id32078 . -199) (undo-tree-id32079 . -199) (undo-tree-id32080 . -199) (undo-tree-id32081 . -199) (undo-tree-id32082 . -199) (undo-tree-id32083 . -199) (undo-tree-id32084 . -199) (undo-tree-id32085 . -199) (undo-tree-id32086 . -199) (undo-tree-id32087 . -199) (undo-tree-id32088 . -199) (undo-tree-id32089 . -199) (undo-tree-id32090 . -199) (undo-tree-id32091 . -199) (undo-tree-id32092 . -199) (undo-tree-id32093 . -199) (undo-tree-id32094 . -199) (undo-tree-id32095 . -199) (undo-tree-id32096 . -199) (undo-tree-id32097 . -199) (undo-tree-id32098 . -199) (undo-tree-id32099 . -199) (undo-tree-id32100 . -199) (undo-tree-id32101 . -199) (undo-tree-id32102 . -199) (undo-tree-id32103 . -203) (undo-tree-id32104 . -203) (undo-tree-id32105 . -203) (undo-tree-id32106 . -203) (undo-tree-id32107 . -203) (undo-tree-id32108 . -203) (undo-tree-id32109 . -203) (undo-tree-id32110 . -203) (undo-tree-id32111 . -203) (undo-tree-id32112 . -203) (undo-tree-id32113 . -203) (undo-tree-id32114 . -203) (undo-tree-id32115 . -203) (undo-tree-id32116 . -203) (undo-tree-id32117 . -203) (undo-tree-id32118 . -203) (undo-tree-id32119 . -203) (undo-tree-id32120 . -203) (undo-tree-id32121 . -203) (undo-tree-id32122 . -203) (undo-tree-id32123 . -203) (undo-tree-id32124 . -203) (undo-tree-id32125 . -203) (undo-tree-id32126 . -203) (undo-tree-id32127 . -202) (undo-tree-id32128 . -202) (undo-tree-id32129 . -202) (undo-tree-id32130 . -202) (undo-tree-id32131 . -202) (undo-tree-id32132 . -202) (undo-tree-id32133 . -202) (undo-tree-id32134 . -202) (undo-tree-id32135 . -202) (undo-tree-id32136 . -202) (undo-tree-id32137 . -202) (undo-tree-id32138 . -202) (undo-tree-id32139 . -202) (undo-tree-id32140 . -202) (undo-tree-id32141 . -202) (undo-tree-id32142 . -202) (undo-tree-id32143 . -202) (undo-tree-id32144 . -202) (undo-tree-id32145 . -202) (undo-tree-id32146 . -202) (undo-tree-id32147 . -202) (undo-tree-id32148 . -202) (undo-tree-id32149 . -202) (undo-tree-id32150 . -202) (undo-tree-id32151 . -202) (undo-tree-id32152 . -202) (undo-tree-id32153 . -203) (undo-tree-id32154 . -203) (undo-tree-id32155 . -203) (undo-tree-id32156 . -203) (undo-tree-id32157 . -203) (undo-tree-id32158 . -203) (undo-tree-id32159 . -203) (undo-tree-id32160 . -203) (undo-tree-id32161 . -203) (undo-tree-id32162 . -203) (undo-tree-id32163 . -203) (undo-tree-id32164 . -203) (undo-tree-id32165 . -203) (undo-tree-id32166 . -203) (undo-tree-id32167 . -203) (undo-tree-id32168 . -203) (undo-tree-id32169 . -203) (undo-tree-id32170 . -203) (undo-tree-id32171 . -203) (undo-tree-id32172 . -203) (undo-tree-id32173 . -203) (undo-tree-id32174 . -203) (undo-tree-id32175 . -203) (undo-tree-id32176 . -203) (undo-tree-id32177 . -203) (undo-tree-id32178 . -203) (undo-tree-id32179 . -203) (undo-tree-id32180 . -203) (undo-tree-id32181 . -203) (undo-tree-id32182 . -203) (undo-tree-id32183 . -203) (undo-tree-id32184 . -203) (undo-tree-id32185 . -203) (undo-tree-id32186 . -203) (undo-tree-id32187 . -203) (undo-tree-id32188 . -203) (undo-tree-id32189 . -203) (undo-tree-id32190 . -203) (undo-tree-id32191 . -203) (undo-tree-id32192 . -203) (undo-tree-id32193 . -137) (6261 . 6398) (#(", make it predict the next value, then add that value to the inputs, and use the model again to predict the following value, and so on" 0 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 69 134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6327) (undo-tree-id32194 . 134) (undo-tree-id32195 . -68) (undo-tree-id32196 . -68) (undo-tree-id32197 . -68) (undo-tree-id32198 . -68) (undo-tree-id32199 . -68) (undo-tree-id32200 . -68) (undo-tree-id32201 . -68) (undo-tree-id32202 . -68) (undo-tree-id32203 . -68) (undo-tree-id32204 . -68) (undo-tree-id32205 . -68) (undo-tree-id32206 . -68) (undo-tree-id32207 . -68) (undo-tree-id32208 . -68) (undo-tree-id32209 . -68) (undo-tree-id32210 . -68) (undo-tree-id32211 . -68) (undo-tree-id32212 . -68) (undo-tree-id32213 . -68) (undo-tree-id32214 . -68) (undo-tree-id32215 . -68) (undo-tree-id32216 . -68) (undo-tree-id32217 . -68) (undo-tree-id32218 . -68) (undo-tree-id32219 . -68) (undo-tree-id32220 . -68) (undo-tree-id32221 . -68) (undo-tree-id32222 . -68) (undo-tree-id32223 . -68) (undo-tree-id32224 . -68) (undo-tree-id32225 . -68) (undo-tree-id32226 . -68) (undo-tree-id32227 . -68) (undo-tree-id32228 . -68) (undo-tree-id32229 . -68) (undo-tree-id32230 . -68) (undo-tree-id32231 . -68) (undo-tree-id32232 . -68) (undo-tree-id32233 . -68)) nil (25772 51201 593628 934000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6330) (undo-tree-id30493 . 1) (undo-tree-id30494 . -1) (undo-tree-id30495 . -1)) nil (25772 51201 592637 58000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6330) (undo-tree-id30490 . 1) (undo-tree-id30491 . -1) (undo-tree-id30492 . -1)) nil (25772 51201 592634 626000) 0 nil])
([nil nil ((6330 . 6331) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6330)) nil (25772 51201 592632 119000) 0 nil])
([nil nil ((6328 . 6465) (#("- , then add that value to the inputs, and use the model again to predict the following value, and so on
- Make it predict the next value" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 38 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 38 39 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 39 104 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 104 105 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 105 106 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 106 107 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 107 137 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6328) (undo-tree-id30246 . -107) (undo-tree-id30247 . -107) (undo-tree-id30248 . 30) (undo-tree-id30249 . -107) (undo-tree-id30250 . -107) (undo-tree-id30251 . 29) (undo-tree-id30252 . -137) (undo-tree-id30253 . -107) (undo-tree-id30254 . -107) (undo-tree-id30255 . -107) (undo-tree-id30256 . -107) (undo-tree-id30257 . -107) (undo-tree-id30258 . -107) (undo-tree-id30259 . -107) (undo-tree-id30260 . -107) (undo-tree-id30261 . -107) (undo-tree-id30262 . -107) (undo-tree-id30263 . -107) (undo-tree-id30264 . -107) (undo-tree-id30265 . -107) (undo-tree-id30266 . -107) (undo-tree-id30267 . -107) (undo-tree-id30268 . -107) (undo-tree-id30269 . -106) (undo-tree-id30270 . -106) (undo-tree-id30271 . -106) (undo-tree-id30272 . -106) (undo-tree-id30273 . -106) (undo-tree-id30274 . -106) (undo-tree-id30275 . -106) (undo-tree-id30276 . -106) (undo-tree-id30277 . -106) (undo-tree-id30278 . -106) (undo-tree-id30279 . -106) (undo-tree-id30280 . -106) (undo-tree-id30281 . -106) (undo-tree-id30282 . -106) (undo-tree-id30283 . -106) (undo-tree-id30284 . -106) (undo-tree-id30285 . -106) (undo-tree-id30286 . -106) (undo-tree-id30287 . -106) (undo-tree-id30288 . -106) (undo-tree-id30289 . -106) (undo-tree-id30290 . -106) (undo-tree-id30291 . -106) (undo-tree-id30292 . -106) (undo-tree-id30293 . -106) (undo-tree-id30294 . -106) (undo-tree-id30295 . -107) (undo-tree-id30296 . -107) (undo-tree-id30297 . -107) (undo-tree-id30298 . -107) (undo-tree-id30299 . -107) (undo-tree-id30300 . -107) (undo-tree-id30301 . -107) (undo-tree-id30302 . -107) (undo-tree-id30303 . -107) (undo-tree-id30304 . -107) (undo-tree-id30305 . -107) (undo-tree-id30306 . -107) (undo-tree-id30307 . -107) (undo-tree-id30308 . -107) (undo-tree-id30309 . -107) (undo-tree-id30310 . -107) (undo-tree-id30311 . -107) (undo-tree-id30312 . -107) (undo-tree-id30313 . -107) (undo-tree-id30314 . -107) (undo-tree-id30315 . -107) (undo-tree-id30316 . -107) (undo-tree-id30317 . -107) (undo-tree-id30318 . -107) (undo-tree-id30319 . -107) (undo-tree-id30320 . -107) (undo-tree-id30321 . -107) (undo-tree-id30322 . -107) (undo-tree-id30323 . -107) (undo-tree-id30324 . -107) (undo-tree-id30325 . -107) (undo-tree-id30326 . -107) (undo-tree-id30327 . -107) (undo-tree-id30328 . -107) (undo-tree-id30329 . -107) (undo-tree-id30330 . -107) (undo-tree-id30331 . -107) (undo-tree-id30332 . -107) (undo-tree-id30333 . -107) (undo-tree-id30334 . -107) (undo-tree-id30335 . -107) (undo-tree-id30336 . -107) (undo-tree-id30337 . -107) (undo-tree-id30338 . -107) (undo-tree-id30339 . -107) (undo-tree-id30340 . -107) (undo-tree-id30341 . -107) (undo-tree-id30342 . -107) (undo-tree-id30343 . -107) (undo-tree-id30344 . -107) (undo-tree-id30345 . -107) (undo-tree-id30346 . -107) (undo-tree-id30347 . -107) (undo-tree-id30348 . -107) (undo-tree-id30349 . -107) (undo-tree-id30350 . -107) (undo-tree-id30351 . -107) (undo-tree-id30352 . -107) (undo-tree-id30353 . -107) (undo-tree-id30354 . -107) (undo-tree-id30355 . -107) (undo-tree-id30356 . -107) (undo-tree-id30357 . -107) (undo-tree-id30358 . -107) (undo-tree-id30359 . -107) (undo-tree-id30360 . -107) (undo-tree-id30361 . -107) (undo-tree-id30362 . -107) (undo-tree-id30363 . -107) (undo-tree-id30364 . -107) (undo-tree-id30365 . -107) (undo-tree-id30366 . -107) (undo-tree-id30367 . -107) (undo-tree-id30368 . -107) (undo-tree-id30369 . -107) (undo-tree-id30370 . -107) (undo-tree-id30371 . -107) (undo-tree-id30372 . -107) (undo-tree-id30373 . -107) (undo-tree-id30374 . -107) (undo-tree-id30375 . -107) (undo-tree-id30376 . -107) (undo-tree-id30377 . -107) (undo-tree-id30378 . -107) (undo-tree-id30379 . -107) (undo-tree-id30380 . -107) (undo-tree-id30381 . -107) (undo-tree-id30382 . -107) (undo-tree-id30383 . -107) (undo-tree-id30384 . -107) (undo-tree-id30385 . -107) (undo-tree-id30386 . -107) (undo-tree-id30387 . -107) (undo-tree-id30388 . -107) (undo-tree-id30389 . -107) (undo-tree-id30390 . -107) (undo-tree-id30391 . -107) (undo-tree-id30392 . -107) (undo-tree-id30393 . -107) (undo-tree-id30394 . -107) (undo-tree-id30395 . -107) (undo-tree-id30396 . -107) (undo-tree-id30397 . -107) (undo-tree-id30398 . -107) (undo-tree-id30399 . -107) (undo-tree-id30400 . -107) (undo-tree-id30401 . -107) (undo-tree-id30402 . -107) (undo-tree-id30403 . -107) (undo-tree-id30404 . -110) (undo-tree-id30405 . -110) (undo-tree-id30406 . -110) (undo-tree-id30407 . -110) (undo-tree-id30408 . -110) (undo-tree-id30409 . -110) (undo-tree-id30410 . -110) (undo-tree-id30411 . -110) (undo-tree-id30412 . -110) (undo-tree-id30413 . -110) (undo-tree-id30414 . -110) (undo-tree-id30415 . -110) (undo-tree-id30416 . -110) (undo-tree-id30417 . -110) (undo-tree-id30418 . -110) (undo-tree-id30419 . -113) (undo-tree-id30420 . -113) (undo-tree-id30421 . -113) (undo-tree-id30422 . -113) (undo-tree-id30423 . -113) (undo-tree-id30424 . -113) (undo-tree-id30425 . -113) (undo-tree-id30426 . -113) (undo-tree-id30427 . -121) (undo-tree-id30428 . -121) (undo-tree-id30429 . -121) (undo-tree-id30430 . -121) (undo-tree-id30431 . -121) (undo-tree-id30432 . -121) (undo-tree-id30433 . -121) (undo-tree-id30434 . -121) (undo-tree-id30435 . -121) (undo-tree-id30436 . -121) (undo-tree-id30437 . -121) (undo-tree-id30438 . -121) (undo-tree-id30439 . -121) (undo-tree-id30440 . -121) (undo-tree-id30441 . -121) (undo-tree-id30442 . -121) (undo-tree-id30443 . -121) (undo-tree-id30444 . -121) (undo-tree-id30445 . -121) (undo-tree-id30446 . -121) (undo-tree-id30447 . -121) (undo-tree-id30448 . -121) (undo-tree-id30449 . -121) (undo-tree-id30450 . -121) (undo-tree-id30451 . -121) (undo-tree-id30452 . -121) (undo-tree-id30453 . -121) (undo-tree-id30454 . -121) (undo-tree-id30455 . -121) (undo-tree-id30456 . -137) (undo-tree-id30457 . -137) (undo-tree-id30458 . -137) (undo-tree-id30459 . -137) (undo-tree-id30460 . -137) (undo-tree-id30461 . -137) (undo-tree-id30462 . -137) (undo-tree-id30463 . -137) (undo-tree-id30464 . -137) (undo-tree-id30465 . -137) (undo-tree-id30466 . -137) (undo-tree-id30467 . -137) (undo-tree-id30468 . -137) (undo-tree-id30469 . -137) (undo-tree-id30470 . -137) (undo-tree-id30471 . -137) (undo-tree-id30472 . -137) (undo-tree-id30473 . -137) (undo-tree-id30474 . -137) (undo-tree-id30475 . -137) (undo-tree-id30476 . -137) (undo-tree-id30477 . -137) (undo-tree-id30478 . -137) (undo-tree-id30479 . -137) (undo-tree-id30480 . -137) (undo-tree-id30481 . -137) (undo-tree-id30482 . -137) (undo-tree-id30483 . -137) (undo-tree-id30484 . -137) (undo-tree-id30485 . -137) (undo-tree-id30486 . -137) (undo-tree-id30487 . -137) (undo-tree-id30488 . -137) (undo-tree-id30489 . -105) (6328 . 6433) (#(", then add that value to the inputs, and use the model again to predict the following value, and so on" 0 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 37 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6360)) nil (25772 51201 592624 89000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6363) (undo-tree-id30243 . -1) (undo-tree-id30244 . 2) (undo-tree-id30245 . -2)) nil (25772 51201 592236 570000) 0 nil])
([nil nil ((#("then " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6363) (undo-tree-id30240 . -4) (undo-tree-id30241 . 5) (undo-tree-id30242 . -5)) nil (25772 51201 592234 126000) 0 nil])
([nil nil ((6363 . 6364) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6363)) nil (25772 51201 592231 628000) 0 nil])
([nil nil ((6361 . 6459) (#("- and use the model again to predict the following value, and so on
- Add that value to the inputs" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 68 69 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 69 70 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 70 98 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6361) (undo-tree-id30050 . -98) (undo-tree-id30051 . -98) (undo-tree-id30052 . 28) (undo-tree-id30053 . -70) (undo-tree-id30054 . -70) (undo-tree-id30055 . 27) (undo-tree-id30056 . -98) (undo-tree-id30057 . -70) (undo-tree-id30058 . -70) (undo-tree-id30059 . -70) (undo-tree-id30060 . -70) (undo-tree-id30061 . -70) (undo-tree-id30062 . -70) (undo-tree-id30063 . -70) (undo-tree-id30064 . -70) (undo-tree-id30065 . -70) (undo-tree-id30066 . -70) (undo-tree-id30067 . -70) (undo-tree-id30068 . -70) (undo-tree-id30069 . -70) (undo-tree-id30070 . -70) (undo-tree-id30071 . -70) (undo-tree-id30072 . -70) (undo-tree-id30073 . -70) (undo-tree-id30074 . -70) (undo-tree-id30075 . -70) (undo-tree-id30076 . -70) (undo-tree-id30077 . -70) (undo-tree-id30078 . -70) (undo-tree-id30079 . -70) (undo-tree-id30080 . -69) (undo-tree-id30081 . -69) (undo-tree-id30082 . -69) (undo-tree-id30083 . -69) (undo-tree-id30084 . -69) (undo-tree-id30085 . -69) (undo-tree-id30086 . -69) (undo-tree-id30087 . -69) (undo-tree-id30088 . -69) (undo-tree-id30089 . -69) (undo-tree-id30090 . -69) (undo-tree-id30091 . -69) (undo-tree-id30092 . -69) (undo-tree-id30093 . -69) (undo-tree-id30094 . -69) (undo-tree-id30095 . -69) (undo-tree-id30096 . -69) (undo-tree-id30097 . -69) (undo-tree-id30098 . -69) (undo-tree-id30099 . -69) (undo-tree-id30100 . -69) (undo-tree-id30101 . -69) (undo-tree-id30102 . -69) (undo-tree-id30103 . -69) (undo-tree-id30104 . -69) (undo-tree-id30105 . -69) (undo-tree-id30106 . -70) (undo-tree-id30107 . -70) (undo-tree-id30108 . -70) (undo-tree-id30109 . -70) (undo-tree-id30110 . -70) (undo-tree-id30111 . -70) (undo-tree-id30112 . -70) (undo-tree-id30113 . -70) (undo-tree-id30114 . -70) (undo-tree-id30115 . -70) (undo-tree-id30116 . -70) (undo-tree-id30117 . -70) (undo-tree-id30118 . -70) (undo-tree-id30119 . -70) (undo-tree-id30120 . -70) (undo-tree-id30121 . -70) (undo-tree-id30122 . -70) (undo-tree-id30123 . -70) (undo-tree-id30124 . -70) (undo-tree-id30125 . -70) (undo-tree-id30126 . -70) (undo-tree-id30127 . -70) (undo-tree-id30128 . -70) (undo-tree-id30129 . -70) (undo-tree-id30130 . -70) (undo-tree-id30131 . -70) (undo-tree-id30132 . -70) (undo-tree-id30133 . -70) (undo-tree-id30134 . -70) (undo-tree-id30135 . -70) (undo-tree-id30136 . -70) (undo-tree-id30137 . -70) (undo-tree-id30138 . -70) (undo-tree-id30139 . -70) (undo-tree-id30140 . -70) (undo-tree-id30141 . -70) (undo-tree-id30142 . -70) (undo-tree-id30143 . -70) (undo-tree-id30144 . -70) (undo-tree-id30145 . -70) (undo-tree-id30146 . -70) (undo-tree-id30147 . -70) (undo-tree-id30148 . -70) (undo-tree-id30149 . -70) (undo-tree-id30150 . -70) (undo-tree-id30151 . -70) (undo-tree-id30152 . -70) (undo-tree-id30153 . -70) (undo-tree-id30154 . -70) (undo-tree-id30155 . -70) (undo-tree-id30156 . -70) (undo-tree-id30157 . -70) (undo-tree-id30158 . -70) (undo-tree-id30159 . -70) (undo-tree-id30160 . -70) (undo-tree-id30161 . -70) (undo-tree-id30162 . -70) (undo-tree-id30163 . -70) (undo-tree-id30164 . -70) (undo-tree-id30165 . -70) (undo-tree-id30166 . -70) (undo-tree-id30167 . -70) (undo-tree-id30168 . -70) (undo-tree-id30169 . -70) (undo-tree-id30170 . -70) (undo-tree-id30171 . -70) (undo-tree-id30172 . -70) (undo-tree-id30173 . -70) (undo-tree-id30174 . -70) (undo-tree-id30175 . -70) (undo-tree-id30176 . -70) (undo-tree-id30177 . -70) (undo-tree-id30178 . -70) (undo-tree-id30179 . -70) (undo-tree-id30180 . -70) (undo-tree-id30181 . -70) (undo-tree-id30182 . -70) (undo-tree-id30183 . -70) (undo-tree-id30184 . -70) (undo-tree-id30185 . -70) (undo-tree-id30186 . -70) (undo-tree-id30187 . -70) (undo-tree-id30188 . -70) (undo-tree-id30189 . -70) (undo-tree-id30190 . -70) (undo-tree-id30191 . -70) (undo-tree-id30192 . -70) (undo-tree-id30193 . -70) (undo-tree-id30194 . -70) (undo-tree-id30195 . -70) (undo-tree-id30196 . -70) (undo-tree-id30197 . -70) (undo-tree-id30198 . -70) (undo-tree-id30199 . -70) (undo-tree-id30200 . -70) (undo-tree-id30201 . -70) (undo-tree-id30202 . -70) (undo-tree-id30203 . -70) (undo-tree-id30204 . -70) (undo-tree-id30205 . -70) (undo-tree-id30206 . -70) (undo-tree-id30207 . -70) (undo-tree-id30208 . -70) (undo-tree-id30209 . -70) (undo-tree-id30210 . -70) (undo-tree-id30211 . -70) (undo-tree-id30212 . -70) (undo-tree-id30213 . -70) (undo-tree-id30214 . -70) (undo-tree-id30215 . -70) (undo-tree-id30216 . -70) (undo-tree-id30217 . -70) (undo-tree-id30218 . -70) (undo-tree-id30219 . -70) (undo-tree-id30220 . -70) (undo-tree-id30221 . -72) (undo-tree-id30222 . -77) (undo-tree-id30223 . -83) (undo-tree-id30224 . -98) (undo-tree-id30225 . -98) (undo-tree-id30226 . -98) (undo-tree-id30227 . -98) (undo-tree-id30228 . -98) (undo-tree-id30229 . -98) (undo-tree-id30230 . -98) (undo-tree-id30231 . -98) (undo-tree-id30232 . -98) (undo-tree-id30233 . -98) (undo-tree-id30234 . -98) (undo-tree-id30235 . -98) (undo-tree-id30236 . -68) (6361 . 6429) (#(" and use the model again to predict the following value, and so on" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6391) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6391) (undo-tree-id30237 . -1) (undo-tree-id30238 . -1) (undo-tree-id30239 . -1)) nil (25772 51201 592222 742000) 0 nil])
([nil nil ((#("and " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6394) (undo-tree-id30047 . -3) (undo-tree-id30048 . 4) (undo-tree-id30049 . -4)) nil (25772 51201 591282 917000) 0 nil])
([nil nil ((6394 . 6395) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6394)) nil (25772 51201 591267 445000) 0 nil])
([nil nil ((6392 . 6458) (#("- , and so on
- Use the model again to predict the following value" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 13 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 13 14 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 15 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 15 16 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 16 66 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6392) (undo-tree-id32532 . 50) (undo-tree-id32533 . -16) (undo-tree-id32534 . -16) (undo-tree-id32535 . 49) (undo-tree-id32536 . -16) (undo-tree-id32537 . -66) (undo-tree-id32538 . -16) (undo-tree-id32539 . -16) (undo-tree-id32540 . -16) (undo-tree-id32541 . -16) (undo-tree-id32542 . -16) (undo-tree-id32543 . -16) (undo-tree-id32544 . -16) (undo-tree-id32545 . -16) (undo-tree-id32546 . -16) (undo-tree-id32547 . -16) (undo-tree-id32548 . -16) (undo-tree-id32549 . -18) (undo-tree-id32550 . -22) (undo-tree-id32551 . -28) (undo-tree-id32552 . -34) (undo-tree-id32553 . -37) (undo-tree-id32554 . -45) (undo-tree-id32555 . -49) (undo-tree-id32556 . -59) (undo-tree-id32557 . -65) (undo-tree-id32558 . -66) (undo-tree-id32559 . -66) (undo-tree-id32560 . -66) (undo-tree-id32561 . -66) (undo-tree-id32562 . -66) (undo-tree-id32563 . -66) (undo-tree-id32564 . -66) (undo-tree-id32565 . -66) (undo-tree-id32566 . -66) (undo-tree-id32567 . -66) (undo-tree-id32568 . -66) (undo-tree-id32569 . -66) (undo-tree-id32570 . -14) (6392 . 6406) (#(", and so on" 0 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6444) (t 25772 51201 656855 19000)) nil (25772 51213 327424 696000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6447) (undo-tree-id32529 . -1) (undo-tree-id32530 . 2) (undo-tree-id32531 . -2)) nil (25772 51213 327395 146000) 0 nil])
([nil nil ((6447 . 6448) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6447)) nil (25772 51213 327379 940000) 0 nil])
([nil nil ((#("the prediction for the next step will usually be more
accurate than the predictions for later time steps, 
since the errors might
accumulate. 

This is much higher than the previous models, 
but it’s also a much harder task, so the
comparison doesn’t mean much. 

The naive approach is terrible,
but the linear model is much better than
using our RNN to forecast the future one step at a time, and also much
faster to train and run. 

" 0 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 54 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 107 130 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 130 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 144 191 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 191 232 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 232 263 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 263 264 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 264 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 296 337 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 337 408 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 408 434 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 434 435 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6789) (undo-tree-id33418 . -434) (undo-tree-id33419 . -434) (undo-tree-id33420 . -434) (undo-tree-id33421 . -435) (undo-tree-id33422 . -434) (undo-tree-id33423 . -54) (undo-tree-id33424 . -54) (undo-tree-id33425 . -54) (undo-tree-id33426 . -54) (undo-tree-id33427 . -54) (undo-tree-id33428 . -54) (undo-tree-id33429 . -54) (undo-tree-id33430 . -54) (undo-tree-id33431 . -107) (undo-tree-id33432 . -107) (undo-tree-id33433 . -107) (undo-tree-id33434 . -107) (undo-tree-id33435 . -107) (undo-tree-id33436 . -107) (undo-tree-id33437 . -107) (undo-tree-id33438 . -107) (undo-tree-id33439 . -130) (undo-tree-id33440 . -130) (undo-tree-id33441 . -130) (undo-tree-id33442 . -130) (undo-tree-id33443 . -130) (undo-tree-id33444 . -130) (undo-tree-id33445 . -130) (undo-tree-id33446 . -130) (undo-tree-id33447 . -143) (undo-tree-id33448 . -143) (undo-tree-id33449 . -143) (undo-tree-id33450 . -143) (undo-tree-id33451 . -143) (undo-tree-id33452 . -143) (undo-tree-id33453 . -143) (undo-tree-id33454 . -143) (undo-tree-id33455 . -144) (undo-tree-id33456 . -144) (undo-tree-id33457 . -144) (undo-tree-id33458 . -144) (undo-tree-id33459 . -144) (undo-tree-id33460 . -144) (undo-tree-id33461 . -144) (undo-tree-id33462 . -144) (undo-tree-id33463 . -191) (undo-tree-id33464 . -191) (undo-tree-id33465 . -191) (undo-tree-id33466 . -191) (undo-tree-id33467 . -191) (undo-tree-id33468 . -191) (undo-tree-id33469 . -191) (undo-tree-id33470 . -191) (undo-tree-id33471 . -232) (undo-tree-id33472 . -232) (undo-tree-id33473 . -232) (undo-tree-id33474 . -232) (undo-tree-id33475 . -232) (undo-tree-id33476 . -232) (undo-tree-id33477 . -232) (undo-tree-id33478 . -232) (undo-tree-id33479 . -263) (undo-tree-id33480 . -263) (undo-tree-id33481 . -263) (undo-tree-id33482 . -263) (undo-tree-id33483 . -263) (undo-tree-id33484 . -263) (undo-tree-id33485 . -263) (undo-tree-id33486 . -263) (undo-tree-id33487 . -264) (undo-tree-id33488 . -264) (undo-tree-id33489 . -264) (undo-tree-id33490 . -264) (undo-tree-id33491 . -264) (undo-tree-id33492 . -264) (undo-tree-id33493 . -264) (undo-tree-id33494 . -264) (undo-tree-id33495 . -296) (undo-tree-id33496 . -296) (undo-tree-id33497 . -296) (undo-tree-id33498 . -296) (undo-tree-id33499 . -296) (undo-tree-id33500 . -296) (undo-tree-id33501 . -296) (undo-tree-id33502 . -296) (undo-tree-id33503 . -337) (undo-tree-id33504 . -337) (undo-tree-id33505 . -337) (undo-tree-id33506 . -337) (undo-tree-id33507 . -337) (undo-tree-id33508 . -337) (undo-tree-id33509 . -337) (undo-tree-id33510 . -337) (undo-tree-id33511 . -408) (undo-tree-id33512 . -408) (undo-tree-id33513 . -408) (undo-tree-id33514 . -408) (undo-tree-id33515 . -408) (undo-tree-id33516 . -408) (undo-tree-id33517 . -408) (undo-tree-id33518 . -408) (undo-tree-id33519 . -434) (undo-tree-id33520 . -434) (undo-tree-id33521 . -434) (undo-tree-id33522 . -434) (undo-tree-id33523 . -434) (undo-tree-id33524 . -434) (undo-tree-id33525 . -434) (undo-tree-id33526 . -434) (undo-tree-id33527 . -434) (undo-tree-id33528 . -435) 7223 (t 25772 51213 389640 320000)) nil (25772 51277 731421 28000) 0 nil])
([nil nil ((6457 . 6459)) nil (25772 51277 731356 974000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6458 . 6459) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6893) (6458 . 6894)) nil (25772 51277 731356 150000) 0 nil])
([nil nil ((6457 . 6459)) nil (25772 51277 731354 675000) 0 nil])
([nil nil ((6458 . 6459) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -6458) (undo-tree-id33337 . 1) (undo-tree-id33338 . -1) (undo-tree-id33339 . -1) (undo-tree-id33340 . -1) (undo-tree-id33341 . -1) (undo-tree-id33342 . -1) (undo-tree-id33343 . -1) (undo-tree-id33344 . -1) (undo-tree-id33345 . -1) (undo-tree-id33346 . -1) (undo-tree-id33347 . -1) (undo-tree-id33348 . -1) (undo-tree-id33349 . -1) (undo-tree-id33350 . -1) (undo-tree-id33351 . -1) (undo-tree-id33352 . -1) (undo-tree-id33353 . -1) (undo-tree-id33354 . -1) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6458) (undo-tree-id33355 . -1) (undo-tree-id33356 . -1) (undo-tree-id33357 . -1) (undo-tree-id33358 . -1) (undo-tree-id33359 . -1) (undo-tree-id33360 . -1) (undo-tree-id33361 . -1) (undo-tree-id33362 . -1) (undo-tree-id33363 . -1) (undo-tree-id33364 . -1) (undo-tree-id33365 . -1) (undo-tree-id33366 . -1) (undo-tree-id33367 . -1) (undo-tree-id33368 . -1) (undo-tree-id33369 . -1) (undo-tree-id33370 . -1) (undo-tree-id33371 . -1) (undo-tree-id33372 . -1) (undo-tree-id33373 . -1) (undo-tree-id33374 . -1) (undo-tree-id33375 . -1) (undo-tree-id33376 . -1) (undo-tree-id33377 . -1) (undo-tree-id33378 . -1) (undo-tree-id33379 . -1) (undo-tree-id33380 . -1) (undo-tree-id33381 . -1) (undo-tree-id33382 . -1) (undo-tree-id33383 . -1) (undo-tree-id33384 . -1) (undo-tree-id33385 . -1) (undo-tree-id33386 . -1) (undo-tree-id33387 . -1) (undo-tree-id33388 . -1) (undo-tree-id33389 . -1) (undo-tree-id33390 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6459) (undo-tree-id33391 . 1) (undo-tree-id33392 . -1) (undo-tree-id33393 . -1) (undo-tree-id33394 . -1) (undo-tree-id33395 . -1) (undo-tree-id33396 . -1) (undo-tree-id33397 . -1) (undo-tree-id33398 . -1) (undo-tree-id33399 . -1) (undo-tree-id33400 . -1) (undo-tree-id33401 . -1) (undo-tree-id33402 . -1) (undo-tree-id33403 . -1) (undo-tree-id33404 . -1) (undo-tree-id33405 . -1) (undo-tree-id33406 . -1) (undo-tree-id33407 . -1) (undo-tree-id33408 . -1) (undo-tree-id33409 . -1) (undo-tree-id33410 . -1) (undo-tree-id33411 . -1) (undo-tree-id33412 . -1) (undo-tree-id33413 . -1) (undo-tree-id33414 . -1) (undo-tree-id33415 . -1) (undo-tree-id33416 . -1) (undo-tree-id33417 . -1) 6458) nil (25772 51277 731351 180000) 0 nil])
([nil nil ((6459 . 6460) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6459)) nil (25772 51277 731305 221000) 0 nil])
([nil nil ((6512 . 6513) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6512) (undo-tree-id33336 . -1) 6459) nil (25772 51277 731304 387000) 0 nil])
([nil nil ((#("The " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6459) (undo-tree-id33332 . -3) (undo-tree-id33333 . 4) (undo-tree-id33334 . 3) (undo-tree-id33335 . -4)) nil (25772 51277 731302 717000) 0 nil])
([nil nil ((6459 . 6460) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6459)) nil (25772 51277 731299 597000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6474) (undo-tree-id33330 . -3) (undo-tree-id33331 . -4)) nil (25772 51277 731298 786000) 0 nil])
([nil nil ((#("will " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6484) (undo-tree-id33292 . -4) (undo-tree-id33293 . -3) (undo-tree-id33294 . -3) (undo-tree-id33295 . -3) (undo-tree-id33296 . -3) (undo-tree-id33297 . -3) (undo-tree-id33298 . -3) (undo-tree-id33299 . -3) (undo-tree-id33300 . -3) (undo-tree-id33301 . -3) (undo-tree-id33302 . -3) (undo-tree-id33303 . -3) (undo-tree-id33304 . -3) (undo-tree-id33305 . -3) (undo-tree-id33306 . -3) (undo-tree-id33307 . -3) (undo-tree-id33308 . -3) (undo-tree-id33309 . -3) (undo-tree-id33310 . -3) (undo-tree-id33311 . -3) (undo-tree-id33312 . -3) (undo-tree-id33313 . -3) (undo-tree-id33314 . -3) (undo-tree-id33315 . -3) (undo-tree-id33316 . -3) (undo-tree-id33317 . -3) (undo-tree-id33318 . -3) (undo-tree-id33319 . -3) (undo-tree-id33320 . -3) (undo-tree-id33321 . -3) (undo-tree-id33322 . -3) (undo-tree-id33323 . -3) (undo-tree-id33324 . -3) (undo-tree-id33325 . -3) (undo-tree-id33326 . -3) (undo-tree-id33327 . -3) (undo-tree-id33328 . -3) (undo-tree-id33329 . -5)) nil (25772 51277 731295 785000) 0 nil])
([nil nil ((#("usually " 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6484) (undo-tree-id33290 . -7) (undo-tree-id33291 . -8)) nil (25772 51277 731275 986000) 0 nil])
([nil nil ((#("be " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6484) (undo-tree-id33288 . -2) (undo-tree-id33289 . -3)) nil (25772 51277 731273 406000) 0 nil])
([nil nil ((6484 . 6487)) nil (25772 51277 731271 423000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6506) (undo-tree-id33286 . -3) (undo-tree-id33287 . -4)) nil (25772 51277 731270 614000) 0 nil])
([nil nil ((#("predictions " 0 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6506) (undo-tree-id33284 . -11) (undo-tree-id33285 . -12)) nil (25772 51277 731268 600000) 0 nil])
([nil nil ((6506 . 6512)) nil (25772 51277 731266 869000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6532) (undo-tree-id33282 . -1) (undo-tree-id33283 . -1)) nil (25772 51277 731266 10000) 0 nil])
([nil nil ((6457 . 6535) (#("- 
- Prediction for next step is more accurate than it is for later time steps" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 37 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 37 38 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 38 78 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6457) (undo-tree-id32596 . -78) (undo-tree-id32597 . -78) (undo-tree-id32598 . 20) (undo-tree-id32599 . -5) (undo-tree-id32600 . -5) (undo-tree-id32601 . 72) (undo-tree-id32602 . -78) (undo-tree-id32603 . -4) (undo-tree-id32604 . -4) (undo-tree-id32605 . -4) (undo-tree-id32606 . -4) (undo-tree-id32607 . -4) (undo-tree-id32608 . -4) (undo-tree-id32609 . -4) (undo-tree-id32610 . -4) (undo-tree-id32611 . -4) (undo-tree-id32612 . -4) (undo-tree-id32613 . -4) (undo-tree-id32614 . -4) (undo-tree-id32615 . -4) (undo-tree-id32616 . -4) (undo-tree-id32617 . -4) (undo-tree-id32618 . -4) (undo-tree-id32619 . -4) (undo-tree-id32620 . -4) (undo-tree-id32621 . -4) (undo-tree-id32622 . -4) (undo-tree-id32623 . -4) (undo-tree-id32624 . -4) (undo-tree-id32625 . -4) (undo-tree-id32626 . -4) (undo-tree-id32627 . -4) (undo-tree-id32628 . -4) (undo-tree-id32629 . -4) (undo-tree-id32630 . -4) (undo-tree-id32631 . -4) (undo-tree-id32632 . -4) (undo-tree-id32633 . -4) (undo-tree-id32634 . -4) (undo-tree-id32635 . -4) (undo-tree-id32636 . -4) (undo-tree-id32637 . -4) (undo-tree-id32638 . -4) (undo-tree-id32639 . -4) (undo-tree-id32640 . -4) (undo-tree-id32641 . -4) (undo-tree-id32642 . -4) (undo-tree-id32643 . -4) (undo-tree-id32644 . -4) (undo-tree-id32645 . -4) (undo-tree-id32646 . -4) (undo-tree-id32647 . -4) (undo-tree-id32648 . -4) (undo-tree-id32649 . -4) (undo-tree-id32650 . -4) (undo-tree-id32651 . -4) (undo-tree-id32652 . -4) (undo-tree-id32653 . -4) (undo-tree-id32654 . -4) (undo-tree-id32655 . -4) (undo-tree-id32656 . -4) (undo-tree-id32657 . -4) (undo-tree-id32658 . -4) (undo-tree-id32659 . -4) (undo-tree-id32660 . -4) (undo-tree-id32661 . -4) (undo-tree-id32662 . -4) (undo-tree-id32663 . -4) (undo-tree-id32664 . -4) (undo-tree-id32665 . -4) (undo-tree-id32666 . -4) (undo-tree-id32667 . -4) (undo-tree-id32668 . -4) (undo-tree-id32669 . -4) (undo-tree-id32670 . -4) (undo-tree-id32671 . -4) (undo-tree-id32672 . -4) (undo-tree-id32673 . -4) (undo-tree-id32674 . -4) (undo-tree-id32675 . -4) (undo-tree-id32676 . -4) (undo-tree-id32677 . -4) (undo-tree-id32678 . -4) (undo-tree-id32679 . -4) (undo-tree-id32680 . -4) (undo-tree-id32681 . -4) (undo-tree-id32682 . -4) (undo-tree-id32683 . -4) (undo-tree-id32684 . -4) (undo-tree-id32685 . -4) (undo-tree-id32686 . -4) (undo-tree-id32687 . -4) (undo-tree-id32688 . -4) (undo-tree-id32689 . -5) (undo-tree-id32690 . -5) (undo-tree-id32691 . -5) (undo-tree-id32692 . -5) (undo-tree-id32693 . -5) (undo-tree-id32694 . -5) (undo-tree-id32695 . -5) (undo-tree-id32696 . -5) (undo-tree-id32697 . -5) (undo-tree-id32698 . -5) (undo-tree-id32699 . -5) (undo-tree-id32700 . -5) (undo-tree-id32701 . -5) (undo-tree-id32702 . -5) (undo-tree-id32703 . -5) (undo-tree-id32704 . -5) (undo-tree-id32705 . -5) (undo-tree-id32706 . -5) (undo-tree-id32707 . -5) (undo-tree-id32708 . -5) (undo-tree-id32709 . -5) (undo-tree-id32710 . -5) (undo-tree-id32711 . -37) (undo-tree-id32712 . -37) (undo-tree-id32713 . -37) (undo-tree-id32714 . -37) (undo-tree-id32715 . -37) (undo-tree-id32716 . -37) (undo-tree-id32717 . -37) (undo-tree-id32718 . -37) (undo-tree-id32719 . -37) (undo-tree-id32720 . -37) (undo-tree-id32721 . -37) (undo-tree-id32722 . -37) (undo-tree-id32723 . -37) (undo-tree-id32724 . -37) (undo-tree-id32725 . -37) (undo-tree-id32726 . -37) (undo-tree-id32727 . -37) (undo-tree-id32728 . -37) (undo-tree-id32729 . -37) (undo-tree-id32730 . -37) (undo-tree-id32731 . -37) (undo-tree-id32732 . -37) (undo-tree-id32733 . -5) (undo-tree-id32734 . -5) (undo-tree-id32735 . -5) (undo-tree-id32736 . -5) (undo-tree-id32737 . -5) (undo-tree-id32738 . -5) (undo-tree-id32739 . -5) (undo-tree-id32740 . -5) (undo-tree-id32741 . -5) (undo-tree-id32742 . -5) (undo-tree-id32743 . -5) (undo-tree-id32744 . -5) (undo-tree-id32745 . -5) (undo-tree-id32746 . -5) (undo-tree-id32747 . -5) (undo-tree-id32748 . -5) (undo-tree-id32749 . -5) (undo-tree-id32750 . -5) (undo-tree-id32751 . -5) (undo-tree-id32752 . -5) (undo-tree-id32753 . -5) (undo-tree-id32754 . -5) (undo-tree-id32755 . -5) (undo-tree-id32756 . -5) (undo-tree-id32757 . -5) (undo-tree-id32758 . -5) (undo-tree-id32759 . -5) (undo-tree-id32760 . -5) (undo-tree-id32761 . -5) (undo-tree-id32762 . -5) (undo-tree-id32763 . -5) (undo-tree-id32764 . -5) (undo-tree-id32765 . -5) (undo-tree-id32766 . -5) (undo-tree-id32767 . -5) (undo-tree-id32768 . -5) (undo-tree-id32769 . -5) (undo-tree-id32770 . -5) (undo-tree-id32771 . -5) (undo-tree-id32772 . -5) (undo-tree-id32773 . -5) (undo-tree-id32774 . -5) (undo-tree-id32775 . -5) (undo-tree-id32776 . -5) (undo-tree-id32777 . -5) (undo-tree-id32778 . -5) (undo-tree-id32779 . -5) (undo-tree-id32780 . -5) (undo-tree-id32781 . -5) (undo-tree-id32782 . -5) (undo-tree-id32783 . -5) (undo-tree-id32784 . -5) (undo-tree-id32785 . -5) (undo-tree-id32786 . -5) (undo-tree-id32787 . -5) (undo-tree-id32788 . -5) (undo-tree-id32789 . -5) (undo-tree-id32790 . -5) (undo-tree-id32791 . -5) (undo-tree-id32792 . -5) (undo-tree-id32793 . -5) (undo-tree-id32794 . -5) (undo-tree-id32795 . -5) (undo-tree-id32796 . -5) (undo-tree-id32797 . -5) (undo-tree-id32798 . -5) (undo-tree-id32799 . -5) (undo-tree-id32800 . -5) (undo-tree-id32801 . -5) (undo-tree-id32802 . -5) (undo-tree-id32803 . -5) (undo-tree-id32804 . -5) (undo-tree-id32805 . -5) (undo-tree-id32806 . -5) (undo-tree-id32807 . -5) (undo-tree-id32808 . -5) (undo-tree-id32809 . -5) (undo-tree-id32810 . -5) (undo-tree-id32811 . -5) (undo-tree-id32812 . -5) (undo-tree-id32813 . -5) (undo-tree-id32814 . -5) (undo-tree-id32815 . -5) (undo-tree-id32816 . -5) (undo-tree-id32817 . -5) (undo-tree-id32818 . -5) (undo-tree-id32819 . -5) (undo-tree-id32820 . -5) (undo-tree-id32821 . -5) (undo-tree-id32822 . -5) (undo-tree-id32823 . -5) (undo-tree-id32824 . -5) (undo-tree-id32825 . -5) (undo-tree-id32826 . -5) (undo-tree-id32827 . -5) (undo-tree-id32828 . -5) (undo-tree-id32829 . -14) (undo-tree-id32830 . -14) (undo-tree-id32831 . -14) (undo-tree-id32832 . -14) (undo-tree-id32833 . -14) (undo-tree-id32834 . -14) (undo-tree-id32835 . -14) (undo-tree-id32836 . -14) (undo-tree-id32837 . -14) (undo-tree-id32838 . -14) (undo-tree-id32839 . -14) (undo-tree-id32840 . -14) (undo-tree-id32841 . -14) (undo-tree-id32842 . -14) (undo-tree-id32843 . -14) (undo-tree-id32844 . -18) (undo-tree-id32845 . -18) (undo-tree-id32846 . -18) (undo-tree-id32847 . -18) (undo-tree-id32848 . -18) (undo-tree-id32849 . -18) (undo-tree-id32850 . -18) (undo-tree-id32851 . -18) (undo-tree-id32852 . -18) (undo-tree-id32853 . -18) (undo-tree-id32854 . -18) (undo-tree-id32855 . -18) (undo-tree-id32856 . -18) (undo-tree-id32857 . -18) (undo-tree-id32858 . -18) (undo-tree-id32859 . -20) (undo-tree-id32860 . -20) (undo-tree-id32861 . -20) (undo-tree-id32862 . -20) (undo-tree-id32863 . -20) (undo-tree-id32864 . -20) (undo-tree-id32865 . -20) (undo-tree-id32866 . -20) (undo-tree-id32867 . -20) (undo-tree-id32868 . -20) (undo-tree-id32869 . -20) (undo-tree-id32870 . -20) (undo-tree-id32871 . -20) (undo-tree-id32872 . -20) (undo-tree-id32873 . -20) (undo-tree-id32874 . -20) (undo-tree-id32875 . -20) (undo-tree-id32876 . -20) (undo-tree-id32877 . -20) (undo-tree-id32878 . -20) (undo-tree-id32879 . -20) (undo-tree-id32880 . -20) (undo-tree-id32881 . -20) (undo-tree-id32882 . -20) (undo-tree-id32883 . -20) (undo-tree-id32884 . -20) (undo-tree-id32885 . -20) (undo-tree-id32886 . -20) (undo-tree-id32887 . -20) (undo-tree-id32888 . -20) (undo-tree-id32889 . -20) (undo-tree-id32890 . -20) (undo-tree-id32891 . -20) (undo-tree-id32892 . -20) (undo-tree-id32893 . -20) (undo-tree-id32894 . -20) (undo-tree-id32895 . -20) (undo-tree-id32896 . -20) (undo-tree-id32897 . -20) (undo-tree-id32898 . -20) (undo-tree-id32899 . -20) (undo-tree-id32900 . -20) (undo-tree-id32901 . -20) (undo-tree-id32902 . -20) (undo-tree-id32903 . -20) (undo-tree-id32904 . -20) (undo-tree-id32905 . -20) (undo-tree-id32906 . -20) (undo-tree-id32907 . -23) (undo-tree-id32908 . -23) (undo-tree-id32909 . -23) (undo-tree-id32910 . -23) (undo-tree-id32911 . -23) (undo-tree-id32912 . -23) (undo-tree-id32913 . -23) (undo-tree-id32914 . -23) (undo-tree-id32915 . -23) (undo-tree-id32916 . -23) (undo-tree-id32917 . -23) (undo-tree-id32918 . -23) (undo-tree-id32919 . -23) (undo-tree-id32920 . -23) (undo-tree-id32921 . -23) (undo-tree-id32922 . -28) (undo-tree-id32923 . -28) (undo-tree-id32924 . -28) (undo-tree-id32925 . -28) (undo-tree-id32926 . -28) (undo-tree-id32927 . -28) (undo-tree-id32928 . -28) (undo-tree-id32929 . -28) (undo-tree-id32930 . -28) (undo-tree-id32931 . -28) (undo-tree-id32932 . -28) (undo-tree-id32933 . -28) (undo-tree-id32934 . -28) (undo-tree-id32935 . -28) (undo-tree-id32936 . -28) (undo-tree-id32937 . -30) (undo-tree-id32938 . -30) (undo-tree-id32939 . -30) (undo-tree-id32940 . -30) (undo-tree-id32941 . -30) (undo-tree-id32942 . -30) (undo-tree-id32943 . -30) (undo-tree-id32944 . -30) (undo-tree-id32945 . -30) (undo-tree-id32946 . -30) (undo-tree-id32947 . -30) (undo-tree-id32948 . -30) (undo-tree-id32949 . -30) (undo-tree-id32950 . -30) (undo-tree-id32951 . -30) (undo-tree-id32952 . -30) (undo-tree-id32953 . -30) (undo-tree-id32954 . -30) (undo-tree-id32955 . -30) (undo-tree-id32956 . -30) (undo-tree-id32957 . -30) (undo-tree-id32958 . -30) (undo-tree-id32959 . -30) (undo-tree-id32960 . -30) (undo-tree-id32961 . -30) (undo-tree-id32962 . -30) (undo-tree-id32963 . -30) (undo-tree-id32964 . -30) (undo-tree-id32965 . -30) (undo-tree-id32966 . -30) (undo-tree-id32967 . -30) (undo-tree-id32968 . -30) (undo-tree-id32969 . -30) (undo-tree-id32970 . -30) (undo-tree-id32971 . -30) (undo-tree-id32972 . -30) (undo-tree-id32973 . -30) (undo-tree-id32974 . -30) (undo-tree-id32975 . -30) (undo-tree-id32976 . -30) (undo-tree-id32977 . -30) (undo-tree-id32978 . -30) (undo-tree-id32979 . -30) (undo-tree-id32980 . -30) (undo-tree-id32981 . -30) (undo-tree-id32982 . -30) (undo-tree-id32983 . -30) (undo-tree-id32984 . -30) (undo-tree-id32985 . -30) (undo-tree-id32986 . -30) (undo-tree-id32987 . -30) (undo-tree-id32988 . -30) (undo-tree-id32989 . -30) (undo-tree-id32990 . -30) (undo-tree-id32991 . -30) (undo-tree-id32992 . -30) (undo-tree-id32993 . -30) (undo-tree-id32994 . -30) (undo-tree-id32995 . -30) (undo-tree-id32996 . -30) (undo-tree-id32997 . -30) (undo-tree-id32998 . -30) (undo-tree-id32999 . -30) (undo-tree-id33000 . -30) (undo-tree-id33001 . -30) (undo-tree-id33002 . -30) (undo-tree-id33003 . -30) (undo-tree-id33004 . -30) (undo-tree-id33005 . -30) (undo-tree-id33006 . -30) (undo-tree-id33007 . -30) (undo-tree-id33008 . -30) (undo-tree-id33009 . -30) (undo-tree-id33010 . -30) (undo-tree-id33011 . -30) (undo-tree-id33012 . -30) (undo-tree-id33013 . -30) (undo-tree-id33014 . -30) (undo-tree-id33015 . -30) (undo-tree-id33016 . -30) (undo-tree-id33017 . -30) (undo-tree-id33018 . -30) (undo-tree-id33019 . -30) (undo-tree-id33020 . -30) (undo-tree-id33021 . -30) (undo-tree-id33022 . -30) (undo-tree-id33023 . -30) (undo-tree-id33024 . -30) (undo-tree-id33025 . -30) (undo-tree-id33026 . -30) (undo-tree-id33027 . -30) (undo-tree-id33028 . -30) (undo-tree-id33029 . -30) (undo-tree-id33030 . -30) (undo-tree-id33031 . -30) (undo-tree-id33032 . -30) (undo-tree-id33033 . -30) (undo-tree-id33034 . -30) (undo-tree-id33035 . -30) (undo-tree-id33036 . -30) (undo-tree-id33037 . -30) (undo-tree-id33038 . -30) (undo-tree-id33039 . -30) (undo-tree-id33040 . -30) (undo-tree-id33041 . -30) (undo-tree-id33042 . -30) (undo-tree-id33043 . -30) (undo-tree-id33044 . -30) (undo-tree-id33045 . -30) (undo-tree-id33046 . -30) (undo-tree-id33047 . -30) (undo-tree-id33048 . -30) (undo-tree-id33049 . -30) (undo-tree-id33050 . -30) (undo-tree-id33051 . -30) (undo-tree-id33052 . -30) (undo-tree-id33053 . -30) (undo-tree-id33054 . -30) (undo-tree-id33055 . -30) (undo-tree-id33056 . -30) (undo-tree-id33057 . -30) (undo-tree-id33058 . -30) (undo-tree-id33059 . -30) (undo-tree-id33060 . -30) (undo-tree-id33061 . -30) (undo-tree-id33062 . -30) (undo-tree-id33063 . -30) (undo-tree-id33064 . -30) (undo-tree-id33065 . -30) (undo-tree-id33066 . -30) (undo-tree-id33067 . -30) (undo-tree-id33068 . -30) (undo-tree-id33069 . -30) (undo-tree-id33070 . -30) (undo-tree-id33071 . -30) (undo-tree-id33072 . -30) (undo-tree-id33073 . -30) (undo-tree-id33074 . -30) (undo-tree-id33075 . -30) (undo-tree-id33076 . -30) (undo-tree-id33077 . -30) (undo-tree-id33078 . -30) (undo-tree-id33079 . -30) (undo-tree-id33080 . -30) (undo-tree-id33081 . -30) (undo-tree-id33082 . -30) (undo-tree-id33083 . -31) (undo-tree-id33084 . -31) (undo-tree-id33085 . -31) (undo-tree-id33086 . -31) (undo-tree-id33087 . -31) (undo-tree-id33088 . -31) (undo-tree-id33089 . -31) (undo-tree-id33090 . -31) (undo-tree-id33091 . -32) (undo-tree-id33092 . -32) (undo-tree-id33093 . -32) (undo-tree-id33094 . -32) (undo-tree-id33095 . -32) (undo-tree-id33096 . -32) (undo-tree-id33097 . -32) (undo-tree-id33098 . -32) (undo-tree-id33099 . -33) (undo-tree-id33100 . -33) (undo-tree-id33101 . -33) (undo-tree-id33102 . -33) (undo-tree-id33103 . -33) (undo-tree-id33104 . -33) (undo-tree-id33105 . -33) (undo-tree-id33106 . -33) (undo-tree-id33107 . -33) (undo-tree-id33108 . -32) (undo-tree-id33109 . -32) (undo-tree-id33110 . -32) (undo-tree-id33111 . -32) (undo-tree-id33112 . -32) (undo-tree-id33113 . -32) (undo-tree-id33114 . -32) (undo-tree-id33115 . -32) (undo-tree-id33116 . -32) (undo-tree-id33117 . -32) (undo-tree-id33118 . -32) (undo-tree-id33119 . -32) (undo-tree-id33120 . -32) (undo-tree-id33121 . -32) (undo-tree-id33122 . -32) (undo-tree-id33123 . -32) (undo-tree-id33124 . -32) (undo-tree-id33125 . -32) (undo-tree-id33126 . -32) (undo-tree-id33127 . -33) (undo-tree-id33128 . -38) (undo-tree-id33129 . -47) (undo-tree-id33130 . -52) (undo-tree-id33131 . -52) (undo-tree-id33132 . -52) (undo-tree-id33133 . -52) (undo-tree-id33134 . -52) (undo-tree-id33135 . -52) (undo-tree-id33136 . -52) (undo-tree-id33137 . -52) (undo-tree-id33138 . -52) (undo-tree-id33139 . -52) (undo-tree-id33140 . -52) (undo-tree-id33141 . -52) (undo-tree-id33142 . -52) (undo-tree-id33143 . -52) (undo-tree-id33144 . -52) (undo-tree-id33145 . -52) (undo-tree-id33146 . -52) (undo-tree-id33147 . -52) (undo-tree-id33148 . -52) (undo-tree-id33149 . -52) (undo-tree-id33150 . -52) (undo-tree-id33151 . -52) (undo-tree-id33152 . -52) (undo-tree-id33153 . -52) (undo-tree-id33154 . -52) (undo-tree-id33155 . -52) (undo-tree-id33156 . -52) (undo-tree-id33157 . -52) (undo-tree-id33158 . -52) (undo-tree-id33159 . -52) (undo-tree-id33160 . -52) (undo-tree-id33161 . -52) (undo-tree-id33162 . -52) (undo-tree-id33163 . -52) (undo-tree-id33164 . -52) (undo-tree-id33165 . -52) (undo-tree-id33166 . -52) (undo-tree-id33167 . -52) (undo-tree-id33168 . -52) (undo-tree-id33169 . -52) (undo-tree-id33170 . -52) (undo-tree-id33171 . -52) (undo-tree-id33172 . -52) (undo-tree-id33173 . -52) (undo-tree-id33174 . -52) (undo-tree-id33175 . -52) (undo-tree-id33176 . -52) (undo-tree-id33177 . -52) (undo-tree-id33178 . -52) (undo-tree-id33179 . -53) (undo-tree-id33180 . -53) (undo-tree-id33181 . -53) (undo-tree-id33182 . -53) (undo-tree-id33183 . -53) (undo-tree-id33184 . -53) (undo-tree-id33185 . -53) (undo-tree-id33186 . -53) (undo-tree-id33187 . -54) (undo-tree-id33188 . -54) (undo-tree-id33189 . -54) (undo-tree-id33190 . -54) (undo-tree-id33191 . -54) (undo-tree-id33192 . -54) (undo-tree-id33193 . -54) (undo-tree-id33194 . -54) (undo-tree-id33195 . -55) (undo-tree-id33196 . -55) (undo-tree-id33197 . -55) (undo-tree-id33198 . -55) (undo-tree-id33199 . -55) (undo-tree-id33200 . -55) (undo-tree-id33201 . -55) (undo-tree-id33202 . -55) (undo-tree-id33203 . -55) (undo-tree-id33204 . -56) (undo-tree-id33205 . -56) (undo-tree-id33206 . -56) (undo-tree-id33207 . -56) (undo-tree-id33208 . -56) (undo-tree-id33209 . -56) (undo-tree-id33210 . -56) (undo-tree-id33211 . -56) (undo-tree-id33212 . -57) (undo-tree-id33213 . -57) (undo-tree-id33214 . -57) (undo-tree-id33215 . -57) (undo-tree-id33216 . -57) (undo-tree-id33217 . -57) (undo-tree-id33218 . -57) (undo-tree-id33219 . -57) (undo-tree-id33220 . -58) (undo-tree-id33221 . -58) (undo-tree-id33222 . -58) (undo-tree-id33223 . -58) (undo-tree-id33224 . -58) (undo-tree-id33225 . -58) (undo-tree-id33226 . -58) (undo-tree-id33227 . -58) (undo-tree-id33228 . -58) (undo-tree-id33229 . -57) (undo-tree-id33230 . -57) (undo-tree-id33231 . -57) (undo-tree-id33232 . -57) (undo-tree-id33233 . -57) (undo-tree-id33234 . -57) (undo-tree-id33235 . -57) (undo-tree-id33236 . -57) (undo-tree-id33237 . -57) (undo-tree-id33238 . -57) (undo-tree-id33239 . -57) (undo-tree-id33240 . -57) (undo-tree-id33241 . -57) (undo-tree-id33242 . -57) (undo-tree-id33243 . -57) (undo-tree-id33244 . -57) (undo-tree-id33245 . -57) (undo-tree-id33246 . -57) (undo-tree-id33247 . -57) (undo-tree-id33248 . -78) (undo-tree-id33249 . -78) (undo-tree-id33250 . -78) (undo-tree-id33251 . -78) (undo-tree-id33252 . -78) (undo-tree-id33253 . -78) (undo-tree-id33254 . -78) (undo-tree-id33255 . -78) (undo-tree-id33256 . -78) (undo-tree-id33257 . -78) (undo-tree-id33258 . -78) (undo-tree-id33259 . -78) (undo-tree-id33260 . -78) (undo-tree-id33261 . -78) (undo-tree-id33262 . -78) (undo-tree-id33263 . -78) (undo-tree-id33264 . -78) (undo-tree-id33265 . -78) (undo-tree-id33266 . -78) (undo-tree-id33267 . -78) (undo-tree-id33268 . -78) (undo-tree-id33269 . -3) (6457 . 6460) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6532) (undo-tree-id33270 . -1) (undo-tree-id33271 . -1) (undo-tree-id33272 . -1) (undo-tree-id33273 . -1) (undo-tree-id33274 . -1) (undo-tree-id33275 . -1) (undo-tree-id33276 . -1) (undo-tree-id33277 . -1) (undo-tree-id33278 . -1) (undo-tree-id33279 . -1) (undo-tree-id33280 . -1) (undo-tree-id33281 . -1) 6533) nil (25772 51277 731243 253000) 0 nil])
([nil nil ((6534 . 6535) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 6534) (undo-tree-id32582 . -1) (undo-tree-id32583 . -1) (undo-tree-id32584 . -1) (undo-tree-id32585 . -1) (undo-tree-id32586 . -1) (undo-tree-id32587 . -1) (undo-tree-id32588 . -1) (undo-tree-id32589 . -1) (undo-tree-id32590 . -1) (undo-tree-id32591 . -1) (undo-tree-id32592 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6535) (undo-tree-id32593 . 1) (undo-tree-id32594 . 1) (undo-tree-id32595 . -1) 6534) nil (25772 51277 730429 570000) 0 nil])
([nil nil ((6557 . 6558) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6557) (undo-tree-id32581 . -1) 6534) nil (25772 51277 730419 410000) 0 nil])
([nil nil ((#("since " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6535) (undo-tree-id32576 . -5) (undo-tree-id32577 . 6) (undo-tree-id32578 . 6) (undo-tree-id32579 . -6) (undo-tree-id32580 . -6)) nil (25772 51277 731719 775000) 0 nil])
([nil nil ((6535 . 6536) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6535)) nil (25772 51279 487002 194000) 0 nil] [nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6535) (undo-tree-id32571 . -3) (undo-tree-id32572 . 4) (undo-tree-id32573 . 4) (undo-tree-id32574 . -4) (undo-tree-id32575 . -4)) ((6535 . 6539)) (25772 51277 730408 286000) 0 nil])
([nil nil ((6565 . 6567) (t 25772 51279 549913 29000)) nil (25772 51319 485466 273000) 0 nil])
nil
([nil nil ((6612 . 6613) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6612) (undo-tree-id33959 . -1) (undo-tree-id33960 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6613) (undo-tree-id33961 . -1) (6566 . 6567) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6566) (undo-tree-id33962 . -1) (undo-tree-id33963 . -1) (undo-tree-id33964 . -1) (undo-tree-id33965 . -1) (undo-tree-id33966 . -1) (undo-tree-id33967 . -1) (undo-tree-id33968 . -1) (undo-tree-id33969 . -1) (undo-tree-id33970 . -1) (undo-tree-id33971 . -1) (undo-tree-id33972 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6567) (undo-tree-id33973 . 1) (undo-tree-id33974 . -1) 6566) nil (25772 51319 485464 391000) 0 nil])
([nil nil ((6653 . 6654) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6653) (undo-tree-id33958 . -1) 6612) nil (25772 51319 485452 307000) 0 nil])
([nil nil ((#("This " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6567) (undo-tree-id33955 . -4) (undo-tree-id33956 . 5) (undo-tree-id33957 . -5)) nil (25772 51319 485449 984000) 0 nil])
([nil nil ((#("is " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6567) (undo-tree-id33952 . -2) (undo-tree-id33953 . 3) (undo-tree-id33954 . -3)) nil (25772 51319 485447 564000) 0 nil])
([nil nil ((6567 . 6568) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6567)) nil (25772 51319 485444 855000) 0 nil])
([nil nil ((6565 . 6677) (#("- but it’s also a much harder task, so the comparison doesn’t mean much. 
- Much higher than the previous models" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 42 43 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 43 73 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 74 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 75 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 75 76 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 112 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6565) (undo-tree-id33564 . -112) (undo-tree-id33565 . -112) (undo-tree-id33566 . 36) (undo-tree-id33567 . -76) (undo-tree-id33568 . -76) (undo-tree-id33569 . 35) (undo-tree-id33570 . -112) (undo-tree-id33571 . -75) (undo-tree-id33572 . -75) (undo-tree-id33573 . -75) (undo-tree-id33574 . -75) (undo-tree-id33575 . -75) (undo-tree-id33576 . -75) (undo-tree-id33577 . -75) (undo-tree-id33578 . -75) (undo-tree-id33579 . -75) (undo-tree-id33580 . -75) (undo-tree-id33581 . -75) (undo-tree-id33582 . -75) (undo-tree-id33583 . -75) (undo-tree-id33584 . -75) (undo-tree-id33585 . -75) (undo-tree-id33586 . -75) (undo-tree-id33587 . -75) (undo-tree-id33588 . -75) (undo-tree-id33589 . -75) (undo-tree-id33590 . -75) (undo-tree-id33591 . -75) (undo-tree-id33592 . -75) (undo-tree-id33593 . -75) (undo-tree-id33594 . -75) (undo-tree-id33595 . -75) (undo-tree-id33596 . -75) (undo-tree-id33597 . -75) (undo-tree-id33598 . -75) (undo-tree-id33599 . -75) (undo-tree-id33600 . -75) (undo-tree-id33601 . -75) (undo-tree-id33602 . -75) (undo-tree-id33603 . -75) (undo-tree-id33604 . -75) (undo-tree-id33605 . -75) (undo-tree-id33606 . -75) (undo-tree-id33607 . -75) (undo-tree-id33608 . -75) (undo-tree-id33609 . -75) (undo-tree-id33610 . -75) (undo-tree-id33611 . -75) (undo-tree-id33612 . -75) (undo-tree-id33613 . -75) (undo-tree-id33614 . -75) (undo-tree-id33615 . -75) (undo-tree-id33616 . -75) (undo-tree-id33617 . -75) (undo-tree-id33618 . -112) (undo-tree-id33619 . -112) (undo-tree-id33620 . -112) (undo-tree-id33621 . -112) (undo-tree-id33622 . -112) (undo-tree-id33623 . -112) (undo-tree-id33624 . -112) (undo-tree-id33625 . -112) (undo-tree-id33626 . -112) (undo-tree-id33627 . -112) (undo-tree-id33628 . -112) (undo-tree-id33629 . -112) (undo-tree-id33630 . -112) (undo-tree-id33631 . -112) (undo-tree-id33632 . -112) (undo-tree-id33633 . -112) (undo-tree-id33634 . -112) (undo-tree-id33635 . -112) (undo-tree-id33636 . -112) (undo-tree-id33637 . -112) (undo-tree-id33638 . -112) (undo-tree-id33639 . -112) (undo-tree-id33640 . -112) (undo-tree-id33641 . -112) (undo-tree-id33642 . -112) (undo-tree-id33643 . -112) (undo-tree-id33644 . -112) (undo-tree-id33645 . -112) (undo-tree-id33646 . -112) (undo-tree-id33647 . -112) (undo-tree-id33648 . -112) (undo-tree-id33649 . -112) (undo-tree-id33650 . -76) (undo-tree-id33651 . -76) (undo-tree-id33652 . -76) (undo-tree-id33653 . -76) (undo-tree-id33654 . -76) (undo-tree-id33655 . -76) (undo-tree-id33656 . -76) (undo-tree-id33657 . -76) (undo-tree-id33658 . -76) (undo-tree-id33659 . -76) (undo-tree-id33660 . -76) (undo-tree-id33661 . -76) (undo-tree-id33662 . -76) (undo-tree-id33663 . -76) (undo-tree-id33664 . -76) (undo-tree-id33665 . -76) (undo-tree-id33666 . -76) (undo-tree-id33667 . -76) (undo-tree-id33668 . -76) (undo-tree-id33669 . -76) (undo-tree-id33670 . -76) (undo-tree-id33671 . -76) (undo-tree-id33672 . -76) (undo-tree-id33673 . -76) (undo-tree-id33674 . -76) (undo-tree-id33675 . -76) (undo-tree-id33676 . -76) (undo-tree-id33677 . -76) (undo-tree-id33678 . -76) (undo-tree-id33679 . -76) (undo-tree-id33680 . -76) (undo-tree-id33681 . -76) (undo-tree-id33682 . -76) (undo-tree-id33683 . -76) (undo-tree-id33684 . -76) (undo-tree-id33685 . -76) (undo-tree-id33686 . -76) (undo-tree-id33687 . -76) (undo-tree-id33688 . -76) (undo-tree-id33689 . -76) (undo-tree-id33690 . -76) (undo-tree-id33691 . -76) (undo-tree-id33692 . -76) (undo-tree-id33693 . -76) (undo-tree-id33694 . -76) (undo-tree-id33695 . -76) (undo-tree-id33696 . -76) (undo-tree-id33697 . -76) (undo-tree-id33698 . -76) (undo-tree-id33699 . -76) (undo-tree-id33700 . -76) (undo-tree-id33701 . -76) (undo-tree-id33702 . -76) (undo-tree-id33703 . -76) (undo-tree-id33704 . -76) (undo-tree-id33705 . -76) (undo-tree-id33706 . -76) (undo-tree-id33707 . -76) (undo-tree-id33708 . -76) (undo-tree-id33709 . -76) (undo-tree-id33710 . -76) (undo-tree-id33711 . -76) (undo-tree-id33712 . -76) (undo-tree-id33713 . -76) (undo-tree-id33714 . -76) (undo-tree-id33715 . -76) (undo-tree-id33716 . -76) (undo-tree-id33717 . -76) (undo-tree-id33718 . -76) (undo-tree-id33719 . -76) (undo-tree-id33720 . -76) (undo-tree-id33721 . -76) (undo-tree-id33722 . -76) (undo-tree-id33723 . -76) (undo-tree-id33724 . -76) (undo-tree-id33725 . -76) (undo-tree-id33726 . -76) (undo-tree-id33727 . -76) (undo-tree-id33728 . -76) (undo-tree-id33729 . -76) (undo-tree-id33730 . -76) (undo-tree-id33731 . -76) (undo-tree-id33732 . -76) (undo-tree-id33733 . -76) (undo-tree-id33734 . -76) (undo-tree-id33735 . -76) (undo-tree-id33736 . -76) (undo-tree-id33737 . -76) (undo-tree-id33738 . -76) (undo-tree-id33739 . -76) (undo-tree-id33740 . -76) (undo-tree-id33741 . -76) (undo-tree-id33742 . -76) (undo-tree-id33743 . -76) (undo-tree-id33744 . -76) (undo-tree-id33745 . -76) (undo-tree-id33746 . -76) (undo-tree-id33747 . -76) (undo-tree-id33748 . -76) (undo-tree-id33749 . -76) (undo-tree-id33750 . -76) (undo-tree-id33751 . -76) (undo-tree-id33752 . -76) (undo-tree-id33753 . -76) (undo-tree-id33754 . -76) (undo-tree-id33755 . -76) (undo-tree-id33756 . -76) (undo-tree-id33757 . -76) (undo-tree-id33758 . -76) (undo-tree-id33759 . -76) (undo-tree-id33760 . -76) (undo-tree-id33761 . -76) (undo-tree-id33762 . -76) (undo-tree-id33763 . -76) (undo-tree-id33764 . -76) (undo-tree-id33765 . -76) (undo-tree-id33766 . -76) (undo-tree-id33767 . -76) (undo-tree-id33768 . -76) (undo-tree-id33769 . -76) (undo-tree-id33770 . -76) (undo-tree-id33771 . -76) (undo-tree-id33772 . -76) (undo-tree-id33773 . -76) (undo-tree-id33774 . -76) (undo-tree-id33775 . -76) (undo-tree-id33776 . -76) (undo-tree-id33777 . -76) (undo-tree-id33778 . -76) (undo-tree-id33779 . -76) (undo-tree-id33780 . -76) (undo-tree-id33781 . -76) (undo-tree-id33782 . -76) (undo-tree-id33783 . -76) (undo-tree-id33784 . -76) (undo-tree-id33785 . -76) (undo-tree-id33786 . -79) (undo-tree-id33787 . -79) (undo-tree-id33788 . -79) (undo-tree-id33789 . -79) (undo-tree-id33790 . -79) (undo-tree-id33791 . -79) (undo-tree-id33792 . -79) (undo-tree-id33793 . -79) (undo-tree-id33794 . -79) (undo-tree-id33795 . -79) (undo-tree-id33796 . -79) (undo-tree-id33797 . -79) (undo-tree-id33798 . -79) (undo-tree-id33799 . -79) (undo-tree-id33800 . -79) (undo-tree-id33801 . -86) (undo-tree-id33802 . -86) (undo-tree-id33803 . -86) (undo-tree-id33804 . -86) (undo-tree-id33805 . -86) (undo-tree-id33806 . -86) (undo-tree-id33807 . -86) (undo-tree-id33808 . -86) (undo-tree-id33809 . -86) (undo-tree-id33810 . -86) (undo-tree-id33811 . -86) (undo-tree-id33812 . -86) (undo-tree-id33813 . -86) (undo-tree-id33814 . -86) (undo-tree-id33815 . -86) (undo-tree-id33816 . -91) (undo-tree-id33817 . -91) (undo-tree-id33818 . -91) (undo-tree-id33819 . -91) (undo-tree-id33820 . -91) (undo-tree-id33821 . -91) (undo-tree-id33822 . -91) (undo-tree-id33823 . -91) (undo-tree-id33824 . -91) (undo-tree-id33825 . -91) (undo-tree-id33826 . -91) (undo-tree-id33827 . -91) (undo-tree-id33828 . -91) (undo-tree-id33829 . -91) (undo-tree-id33830 . -91) (undo-tree-id33831 . -95) (undo-tree-id33832 . -95) (undo-tree-id33833 . -95) (undo-tree-id33834 . -95) (undo-tree-id33835 . -95) (undo-tree-id33836 . -95) (undo-tree-id33837 . -95) (undo-tree-id33838 . -95) (undo-tree-id33839 . -95) (undo-tree-id33840 . -95) (undo-tree-id33841 . -95) (undo-tree-id33842 . -95) (undo-tree-id33843 . -95) (undo-tree-id33844 . -95) (undo-tree-id33845 . -95) (undo-tree-id33846 . -104) (undo-tree-id33847 . -104) (undo-tree-id33848 . -104) (undo-tree-id33849 . -104) (undo-tree-id33850 . -104) (undo-tree-id33851 . -104) (undo-tree-id33852 . -104) (undo-tree-id33853 . -104) (undo-tree-id33854 . -104) (undo-tree-id33855 . -104) (undo-tree-id33856 . -104) (undo-tree-id33857 . -104) (undo-tree-id33858 . -104) (undo-tree-id33859 . -104) (undo-tree-id33860 . -104) (undo-tree-id33861 . -111) (undo-tree-id33862 . -111) (undo-tree-id33863 . -111) (undo-tree-id33864 . -111) (undo-tree-id33865 . -111) (undo-tree-id33866 . -111) (undo-tree-id33867 . -111) (undo-tree-id33868 . -111) (undo-tree-id33869 . -111) (undo-tree-id33870 . -111) (undo-tree-id33871 . -111) (undo-tree-id33872 . -111) (undo-tree-id33873 . -111) (undo-tree-id33874 . -111) (undo-tree-id33875 . -111) (undo-tree-id33876 . -112) (undo-tree-id33877 . -112) (undo-tree-id33878 . -112) (undo-tree-id33879 . -112) (undo-tree-id33880 . -112) (undo-tree-id33881 . -112) (undo-tree-id33882 . -112) (undo-tree-id33883 . -112) (undo-tree-id33884 . -112) (undo-tree-id33885 . -112) (undo-tree-id33886 . -112) (undo-tree-id33887 . -112) (undo-tree-id33888 . -112) (undo-tree-id33889 . -112) (undo-tree-id33890 . -112) (undo-tree-id33891 . -112) (undo-tree-id33892 . -112) (undo-tree-id33893 . -112) (undo-tree-id33894 . -112) (undo-tree-id33895 . -112) (undo-tree-id33896 . -112) (undo-tree-id33897 . -112) (undo-tree-id33898 . -112) (undo-tree-id33899 . -112) (undo-tree-id33900 . -112) (undo-tree-id33901 . -112) (undo-tree-id33902 . -112) (undo-tree-id33903 . -112) (undo-tree-id33904 . -112) (undo-tree-id33905 . -112) (undo-tree-id33906 . -112) (undo-tree-id33907 . -112) (undo-tree-id33908 . -112) (undo-tree-id33909 . -112) (undo-tree-id33910 . -112) (undo-tree-id33911 . -112) (undo-tree-id33912 . -112) (undo-tree-id33913 . -112) (undo-tree-id33914 . -112) (undo-tree-id33915 . -112) (undo-tree-id33916 . -74) (6565 . 6639) (#(" but it’s also a much harder task, so the comparison doesn’t mean much. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6603) (undo-tree-id33917 . -41) (undo-tree-id33918 . -41) (undo-tree-id33919 . -41) (undo-tree-id33920 . -41) (undo-tree-id33921 . -41) (undo-tree-id33922 . -41) (undo-tree-id33923 . -41) (undo-tree-id33924 . -41) (undo-tree-id33925 . -41) (undo-tree-id33926 . -41) (undo-tree-id33927 . -41) (undo-tree-id33928 . -41) (undo-tree-id33929 . -41) (undo-tree-id33930 . -41) (undo-tree-id33931 . -41) (undo-tree-id33932 . -41) (undo-tree-id33933 . -41) (undo-tree-id33934 . -41) (undo-tree-id33935 . -41) (undo-tree-id33936 . -41) (undo-tree-id33937 . -41) (undo-tree-id33938 . -41) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6603) (undo-tree-id33939 . -1) (undo-tree-id33940 . -1) (undo-tree-id33941 . -1) (undo-tree-id33942 . -1) (undo-tree-id33943 . -1) (undo-tree-id33944 . -1) (undo-tree-id33945 . -1) (undo-tree-id33946 . -1) (undo-tree-id33947 . -1) (undo-tree-id33948 . -1) (undo-tree-id33949 . -1) (undo-tree-id33950 . -1) (undo-tree-id33951 . -1)) nil (25772 51319 485430 782000) 0 nil])
([nil nil ((#("but " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6606) (undo-tree-id33561 . -3) (undo-tree-id33562 . 4) (undo-tree-id33563 . -4)) nil (25772 51319 484745 752000) 0 nil])
([nil nil ((#("it" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6606) (undo-tree-id33558 . -1) (undo-tree-id33559 . 2) (undo-tree-id33560 . -2)) nil (25772 51319 484743 44000) 0 nil])
([nil nil ((#("’" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6606) (undo-tree-id33556 . 1) (undo-tree-id33557 . -1)) nil (25772 51319 484740 490000) 0 nil])
([nil nil ((#("s " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6606) (undo-tree-id33553 . -1) (undo-tree-id33554 . 2) (undo-tree-id33555 . -2)) nil (25772 51319 484738 653000) 0 nil])
([nil nil ((6606 . 6607) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6606)) nil (25772 51319 484736 305000) 0 nil])
([nil nil ((#("the " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6634) (undo-tree-id33551 . -3) (undo-tree-id33552 . -4)) nil (25772 51319 484735 394000) 0 nil])
([nil nil ((6634 . 6637)) nil (25772 51319 484733 607000) 0 nil])
([nil nil ((#("doesn’t mean much. " 0 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6648) (undo-tree-id33545 . -18) (undo-tree-id33546 . 19) (undo-tree-id33547 . -5) (undo-tree-id33548 . -5) (undo-tree-id33549 . -19) (undo-tree-id33550 . -19)) nil (25772 51319 484732 732000) 0 nil])
([nil nil ((6647 . 6648)) nil (25772 51319 484728 169000) 0 nil])
([nil nil ((6650 . 6652)) nil (25772 51319 484726 864000) 0 nil])
([nil nil ((6795 . 6796) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6795) (undo-tree-id33529 . -1) (6724 . 6725) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6724) (undo-tree-id33530 . -1) (6683 . 6684) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6683) (undo-tree-id33531 . -1) (6651 . 6652) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6651) (undo-tree-id33532 . -1) (undo-tree-id33533 . -1) (undo-tree-id33534 . -1) (undo-tree-id33535 . -1) (undo-tree-id33536 . -1) (undo-tree-id33537 . -1) (undo-tree-id33538 . -1) (undo-tree-id33539 . -1) (undo-tree-id33540 . -1) (undo-tree-id33541 . -1) (undo-tree-id33542 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6652) (undo-tree-id33543 . 1) (undo-tree-id33544 . -1) 6651) nil (25772 51319 484721 471000) 0 nil])
([nil nil ((6650 . 6824) (#("- , but the linear model is much better than using our RNN to forecast the future one step at a time, and also much faster to train and run. 
- The naive approach is terrible" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 44 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 44 45 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 45 115 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 115 116 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 116 141 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 141 142 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 142 143 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 143 144 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 144 174 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6650) (undo-tree-id34555 . 30) (undo-tree-id34556 . -143) (undo-tree-id34557 . -143) (undo-tree-id34558 . -143) (undo-tree-id34559 . -143) (undo-tree-id34560 . -143) (undo-tree-id34561 . -143) (undo-tree-id34562 . -143) (undo-tree-id34563 . -143) (undo-tree-id34564 . -143) (undo-tree-id34565 . -144) (undo-tree-id34566 . -144) (undo-tree-id34567 . -144) (undo-tree-id34568 . -144) (undo-tree-id34569 . -144) (undo-tree-id34570 . -144) (undo-tree-id34571 . -144) (undo-tree-id34572 . -144) (undo-tree-id34573 . -144) (undo-tree-id34574 . -144) (undo-tree-id34575 . -144) (undo-tree-id34576 . -144) (undo-tree-id34577 . -144) (undo-tree-id34578 . -144) (undo-tree-id34579 . -144) (undo-tree-id34580 . -144) (undo-tree-id34581 . -144) (undo-tree-id34582 . -144) (undo-tree-id34583 . -144) (undo-tree-id34584 . -144) (undo-tree-id34585 . -144) (undo-tree-id34586 . -144) (undo-tree-id34587 . -144) (undo-tree-id34588 . -144) (undo-tree-id34589 . -144) (undo-tree-id34590 . -144) (undo-tree-id34591 . -144) (undo-tree-id34592 . -144) (undo-tree-id34593 . -144) (undo-tree-id34594 . -144) (undo-tree-id34595 . -144) (undo-tree-id34596 . -144) (undo-tree-id34597 . -144) (undo-tree-id34598 . -144) (undo-tree-id34599 . -144) (undo-tree-id34600 . -144) (undo-tree-id34601 . -144) (undo-tree-id34602 . -144) (undo-tree-id34603 . -144) (undo-tree-id34604 . -144) (undo-tree-id34605 . -144) (undo-tree-id34606 . -144) (undo-tree-id34607 . -144) (undo-tree-id34608 . -144) (undo-tree-id34609 . -144) (undo-tree-id34610 . -144) (undo-tree-id34611 . -144) (undo-tree-id34612 . -144) (undo-tree-id34613 . -144) (undo-tree-id34614 . -144) (undo-tree-id34615 . -144) (undo-tree-id34616 . -144) (undo-tree-id34617 . -144) (undo-tree-id34618 . -144) (undo-tree-id34619 . -144) (undo-tree-id34620 . -144) (undo-tree-id34621 . -144) (undo-tree-id34622 . -144) (undo-tree-id34623 . -144) (undo-tree-id34624 . -144) (undo-tree-id34625 . -144) (undo-tree-id34626 . -144) (undo-tree-id34627 . -144) (undo-tree-id34628 . -174) (undo-tree-id34629 . -144) (undo-tree-id34630 . -144) (undo-tree-id34631 . -144) (undo-tree-id34632 . -144) (undo-tree-id34633 . -144) (undo-tree-id34634 . -144) (undo-tree-id34635 . -144) (undo-tree-id34636 . -144) (undo-tree-id34637 . -144) (undo-tree-id34638 . -144) (undo-tree-id34639 . -144) (undo-tree-id34640 . -144) (undo-tree-id34641 . -144) (undo-tree-id34642 . -144) (undo-tree-id34643 . -144) (undo-tree-id34644 . -144) (undo-tree-id34645 . -144) (undo-tree-id34646 . -144) (undo-tree-id34647 . -144) (undo-tree-id34648 . -144) (undo-tree-id34649 . -144) (undo-tree-id34650 . -144) (undo-tree-id34651 . -144) (undo-tree-id34652 . -144) (undo-tree-id34653 . -144) (undo-tree-id34654 . -144) (undo-tree-id34655 . -144) (undo-tree-id34656 . -144) (undo-tree-id34657 . -144) (undo-tree-id34658 . -144) (undo-tree-id34659 . -144) (undo-tree-id34660 . -144) (undo-tree-id34661 . -144) (undo-tree-id34662 . -144) (undo-tree-id34663 . -144) (undo-tree-id34664 . -144) (undo-tree-id34665 . -144) (undo-tree-id34666 . -144) (undo-tree-id34667 . -144) (undo-tree-id34668 . -144) (undo-tree-id34669 . -144) (undo-tree-id34670 . -144) (undo-tree-id34671 . -144) (undo-tree-id34672 . -144) (undo-tree-id34673 . -144) (undo-tree-id34674 . -144) (undo-tree-id34675 . -144) (undo-tree-id34676 . -144) (undo-tree-id34677 . -144) (undo-tree-id34678 . -144) (undo-tree-id34679 . -144) (undo-tree-id34680 . -144) (undo-tree-id34681 . -144) (undo-tree-id34682 . -174) (undo-tree-id34683 . -174) (undo-tree-id34684 . -174) (undo-tree-id34685 . -174) (undo-tree-id34686 . -174) (undo-tree-id34687 . -174) (undo-tree-id34688 . -174) (undo-tree-id34689 . -174) (undo-tree-id34690 . -174) (undo-tree-id34691 . -174) (undo-tree-id34692 . -174) (undo-tree-id34693 . -174) (undo-tree-id34694 . -174) (undo-tree-id34695 . -174) (undo-tree-id34696 . -174) (undo-tree-id34697 . -174) (undo-tree-id34698 . -174) (undo-tree-id34699 . -174) (undo-tree-id34700 . -174) (undo-tree-id34701 . -174) (undo-tree-id34702 . -174) (undo-tree-id34703 . -174) (undo-tree-id34704 . -174) (undo-tree-id34705 . -174) (undo-tree-id34706 . -174) (undo-tree-id34707 . -174) (undo-tree-id34708 . -174) (undo-tree-id34709 . -174) (undo-tree-id34710 . -174) (undo-tree-id34711 . -174) (undo-tree-id34712 . -174) (undo-tree-id34713 . -174) (undo-tree-id34714 . -174) (undo-tree-id34715 . -174) (undo-tree-id34716 . -174) (undo-tree-id34717 . -174) (undo-tree-id34718 . -174) (undo-tree-id34719 . -174) (undo-tree-id34720 . -174) (undo-tree-id34721 . -174) (undo-tree-id34722 . -142) (6650 . 6792) (#(", but the linear model is much better than using our RNN to forecast the future one step at a time, and also much faster to train and run. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 114 139 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6682) (t 25772 51319 596389 46000)) nil (25772 51371 40506 233000) 0 nil])
([nil nil ((#(", " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6685) (undo-tree-id34552 . -1) (undo-tree-id34553 . 2) (undo-tree-id34554 . -2)) nil (25772 51371 40411 220000) 0 nil])
([nil nil ((#("but " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6685) (undo-tree-id34549 . -3) (undo-tree-id34550 . 4) (undo-tree-id34551 . -4)) nil (25772 51371 40408 393000) 0 nil])
([nil nil ((6685 . 6686) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6685)) nil (25772 51371 40404 337000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6777) (undo-tree-id34525 . -1) (undo-tree-id34526 . -1) (undo-tree-id34527 . -1) (undo-tree-id34528 . -1) (undo-tree-id34529 . -1) (undo-tree-id34530 . -1) (undo-tree-id34531 . -1) (undo-tree-id34532 . -1) (undo-tree-id34533 . -1) (undo-tree-id34534 . -1) (undo-tree-id34535 . -1) (undo-tree-id34536 . -1) (undo-tree-id34537 . -1) (undo-tree-id34538 . -1) (undo-tree-id34539 . -1) (undo-tree-id34540 . -1) (undo-tree-id34541 . -1) (undo-tree-id34542 . -1) (undo-tree-id34543 . -1) (undo-tree-id34544 . -1) (undo-tree-id34545 . -1) (undo-tree-id34546 . -1) (undo-tree-id34547 . -1) (undo-tree-id34548 . -1)) nil (25772 51371 40402 649000) 0 nil])
([nil nil ((6683 . 6819) (#("- and also much faster to train and run. 
- The linear model is much better than using our RNN to forecast the future one step at a time" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 15 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 15 16 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 16 41 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 42 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 43 44 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 44 80 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 80 81 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 81 136 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6683) (undo-tree-id33978 . -136) (undo-tree-id33979 . -136) (undo-tree-id33980 . 92) (undo-tree-id33981 . -44) (undo-tree-id33982 . -44) (undo-tree-id33983 . 91) (undo-tree-id33984 . -136) (undo-tree-id33985 . -44) (undo-tree-id33986 . -44) (undo-tree-id33987 . -44) (undo-tree-id33988 . -44) (undo-tree-id33989 . -44) (undo-tree-id33990 . -44) (undo-tree-id33991 . -44) (undo-tree-id33992 . -44) (undo-tree-id33993 . -44) (undo-tree-id33994 . -44) (undo-tree-id33995 . -44) (undo-tree-id33996 . -44) (undo-tree-id33997 . -44) (undo-tree-id33998 . -44) (undo-tree-id33999 . -44) (undo-tree-id34000 . -44) (undo-tree-id34001 . -44) (undo-tree-id34002 . -44) (undo-tree-id34003 . -44) (undo-tree-id34004 . -44) (undo-tree-id34005 . -44) (undo-tree-id34006 . -44) (undo-tree-id34007 . -44) (undo-tree-id34008 . -43) (undo-tree-id34009 . -43) (undo-tree-id34010 . -43) (undo-tree-id34011 . -43) (undo-tree-id34012 . -43) (undo-tree-id34013 . -43) (undo-tree-id34014 . -43) (undo-tree-id34015 . -43) (undo-tree-id34016 . -43) (undo-tree-id34017 . -43) (undo-tree-id34018 . -43) (undo-tree-id34019 . -43) (undo-tree-id34020 . -43) (undo-tree-id34021 . -43) (undo-tree-id34022 . -43) (undo-tree-id34023 . -43) (undo-tree-id34024 . -43) (undo-tree-id34025 . -43) (undo-tree-id34026 . -43) (undo-tree-id34027 . -43) (undo-tree-id34028 . -43) (undo-tree-id34029 . -43) (undo-tree-id34030 . -43) (undo-tree-id34031 . -43) (undo-tree-id34032 . -43) (undo-tree-id34033 . -43) (undo-tree-id34034 . -43) (undo-tree-id34035 . -43) (undo-tree-id34036 . -43) (undo-tree-id34037 . -43) (undo-tree-id34038 . -43) (undo-tree-id34039 . -43) (undo-tree-id34040 . -43) (undo-tree-id34041 . -43) (undo-tree-id34042 . -43) (undo-tree-id34043 . -43) (undo-tree-id34044 . -43) (undo-tree-id34045 . -43) (undo-tree-id34046 . -43) (undo-tree-id34047 . -43) (undo-tree-id34048 . -44) (undo-tree-id34049 . -44) (undo-tree-id34050 . -44) (undo-tree-id34051 . -44) (undo-tree-id34052 . -44) (undo-tree-id34053 . -44) (undo-tree-id34054 . -44) (undo-tree-id34055 . -44) (undo-tree-id34056 . -44) (undo-tree-id34057 . -44) (undo-tree-id34058 . -44) (undo-tree-id34059 . -44) (undo-tree-id34060 . -44) (undo-tree-id34061 . -44) (undo-tree-id34062 . -44) (undo-tree-id34063 . -44) (undo-tree-id34064 . -44) (undo-tree-id34065 . -44) (undo-tree-id34066 . -44) (undo-tree-id34067 . -44) (undo-tree-id34068 . -44) (undo-tree-id34069 . -44) (undo-tree-id34070 . -44) (undo-tree-id34071 . -44) (undo-tree-id34072 . -44) (undo-tree-id34073 . -44) (undo-tree-id34074 . -44) (undo-tree-id34075 . -44) (undo-tree-id34076 . -44) (undo-tree-id34077 . -44) (undo-tree-id34078 . -44) (undo-tree-id34079 . -44) (undo-tree-id34080 . -44) (undo-tree-id34081 . -44) (undo-tree-id34082 . -44) (undo-tree-id34083 . -44) (undo-tree-id34084 . -44) (undo-tree-id34085 . -44) (undo-tree-id34086 . -44) (undo-tree-id34087 . -44) (undo-tree-id34088 . -44) (undo-tree-id34089 . -44) (undo-tree-id34090 . -44) (undo-tree-id34091 . -44) (undo-tree-id34092 . -44) (undo-tree-id34093 . -44) (undo-tree-id34094 . -44) (undo-tree-id34095 . -44) (undo-tree-id34096 . -44) (undo-tree-id34097 . -44) (undo-tree-id34098 . -44) (undo-tree-id34099 . -44) (undo-tree-id34100 . -44) (undo-tree-id34101 . -44) (undo-tree-id34102 . -44) (undo-tree-id34103 . -44) (undo-tree-id34104 . -44) (undo-tree-id34105 . -44) (undo-tree-id34106 . -44) (undo-tree-id34107 . -44) (undo-tree-id34108 . -44) (undo-tree-id34109 . -44) (undo-tree-id34110 . -44) (undo-tree-id34111 . -44) (undo-tree-id34112 . -44) (undo-tree-id34113 . -44) (undo-tree-id34114 . -44) (undo-tree-id34115 . -44) (undo-tree-id34116 . -44) (undo-tree-id34117 . -44) (undo-tree-id34118 . -44) (undo-tree-id34119 . -44) (undo-tree-id34120 . -44) (undo-tree-id34121 . -44) (undo-tree-id34122 . -44) (undo-tree-id34123 . -44) (undo-tree-id34124 . -44) (undo-tree-id34125 . -44) (undo-tree-id34126 . -44) (undo-tree-id34127 . -44) (undo-tree-id34128 . -44) (undo-tree-id34129 . -44) (undo-tree-id34130 . -44) (undo-tree-id34131 . -44) (undo-tree-id34132 . -44) (undo-tree-id34133 . -44) (undo-tree-id34134 . -44) (undo-tree-id34135 . -44) (undo-tree-id34136 . -44) (undo-tree-id34137 . -44) (undo-tree-id34138 . -44) (undo-tree-id34139 . -44) (undo-tree-id34140 . -44) (undo-tree-id34141 . -44) (undo-tree-id34142 . -44) (undo-tree-id34143 . -44) (undo-tree-id34144 . -44) (undo-tree-id34145 . -44) (undo-tree-id34146 . -44) (undo-tree-id34147 . -44) (undo-tree-id34148 . -44) (undo-tree-id34149 . -44) (undo-tree-id34150 . -44) (undo-tree-id34151 . -44) (undo-tree-id34152 . -44) (undo-tree-id34153 . -44) (undo-tree-id34154 . -44) (undo-tree-id34155 . -44) (undo-tree-id34156 . -44) (undo-tree-id34157 . -44) (undo-tree-id34158 . -44) (undo-tree-id34159 . -44) (undo-tree-id34160 . -44) (undo-tree-id34161 . -44) (undo-tree-id34162 . -44) (undo-tree-id34163 . -44) (undo-tree-id34164 . -44) (undo-tree-id34165 . -44) (undo-tree-id34166 . -44) (undo-tree-id34167 . -44) (undo-tree-id34168 . -44) (undo-tree-id34169 . -44) (undo-tree-id34170 . -44) (undo-tree-id34171 . -44) (undo-tree-id34172 . -44) (undo-tree-id34173 . -44) (undo-tree-id34174 . -44) (undo-tree-id34175 . -44) (undo-tree-id34176 . -44) (undo-tree-id34177 . -44) (undo-tree-id34178 . -44) (undo-tree-id34179 . -44) (undo-tree-id34180 . -44) (undo-tree-id34181 . -44) (undo-tree-id34182 . -44) (undo-tree-id34183 . -44) (undo-tree-id34184 . -44) (undo-tree-id34185 . -44) (undo-tree-id34186 . -44) (undo-tree-id34187 . -44) (undo-tree-id34188 . -44) (undo-tree-id34189 . -44) (undo-tree-id34190 . -44) (undo-tree-id34191 . -44) (undo-tree-id34192 . -44) (undo-tree-id34193 . -44) (undo-tree-id34194 . -44) (undo-tree-id34195 . -44) (undo-tree-id34196 . -44) (undo-tree-id34197 . -44) (undo-tree-id34198 . -44) (undo-tree-id34199 . -44) (undo-tree-id34200 . -44) (undo-tree-id34201 . -44) (undo-tree-id34202 . -44) (undo-tree-id34203 . -44) (undo-tree-id34204 . -44) (undo-tree-id34205 . 45) (undo-tree-id34206 . -94) (undo-tree-id34207 . -92) (undo-tree-id34208 . -92) (undo-tree-id34209 . -92) (undo-tree-id34210 . -92) (undo-tree-id34211 . -92) (undo-tree-id34212 . -92) (undo-tree-id34213 . -92) (undo-tree-id34214 . -92) (undo-tree-id34215 . -92) (undo-tree-id34216 . -92) (undo-tree-id34217 . -92) (undo-tree-id34218 . -92) (undo-tree-id34219 . -92) (undo-tree-id34220 . -92) (undo-tree-id34221 . -92) (undo-tree-id34222 . -93) (undo-tree-id34223 . -93) (undo-tree-id34224 . -93) (undo-tree-id34225 . -93) (undo-tree-id34226 . -93) (undo-tree-id34227 . -93) (undo-tree-id34228 . -93) (undo-tree-id34229 . -93) (undo-tree-id34230 . -93) (undo-tree-id34231 . -93) (undo-tree-id34232 . -93) (undo-tree-id34233 . -93) (undo-tree-id34234 . -93) (undo-tree-id34235 . -93) (undo-tree-id34236 . -93) (undo-tree-id34237 . -93) (undo-tree-id34238 . -93) (undo-tree-id34239 . -93) (undo-tree-id34240 . -93) (undo-tree-id34241 . -93) (undo-tree-id34242 . -93) (undo-tree-id34243 . -93) (undo-tree-id34244 . -93) (undo-tree-id34245 . -93) (undo-tree-id34246 . -93) (undo-tree-id34247 . -93) (undo-tree-id34248 . -93) (undo-tree-id34249 . -93) (undo-tree-id34250 . -93) (undo-tree-id34251 . -93) (undo-tree-id34252 . -93) (undo-tree-id34253 . -93) (undo-tree-id34254 . -93) (undo-tree-id34255 . -93) (undo-tree-id34256 . -93) (undo-tree-id34257 . -93) (undo-tree-id34258 . -93) (undo-tree-id34259 . -93) (undo-tree-id34260 . -93) (undo-tree-id34261 . -93) (undo-tree-id34262 . -93) (undo-tree-id34263 . -93) (undo-tree-id34264 . -93) (undo-tree-id34265 . -93) (undo-tree-id34266 . -93) (undo-tree-id34267 . -93) (undo-tree-id34268 . -93) (undo-tree-id34269 . -93) (undo-tree-id34270 . -93) (undo-tree-id34271 . -93) (undo-tree-id34272 . -93) (undo-tree-id34273 . -93) (undo-tree-id34274 . -93) (undo-tree-id34275 . -95) (undo-tree-id34276 . -95) (undo-tree-id34277 . -95) (undo-tree-id34278 . -95) (undo-tree-id34279 . -95) (undo-tree-id34280 . -95) (undo-tree-id34281 . -95) (undo-tree-id34282 . -95) (undo-tree-id34283 . -95) (undo-tree-id34284 . -95) (undo-tree-id34285 . -95) (undo-tree-id34286 . -95) (undo-tree-id34287 . -95) (undo-tree-id34288 . -95) (undo-tree-id34289 . -95) (undo-tree-id34290 . -98) (undo-tree-id34291 . -98) (undo-tree-id34292 . -98) (undo-tree-id34293 . -98) (undo-tree-id34294 . -98) (undo-tree-id34295 . -98) (undo-tree-id34296 . -98) (undo-tree-id34297 . -98) (undo-tree-id34298 . -98) (undo-tree-id34299 . -98) (undo-tree-id34300 . -98) (undo-tree-id34301 . -98) (undo-tree-id34302 . -98) (undo-tree-id34303 . -98) (undo-tree-id34304 . -98) (undo-tree-id34305 . -107) (undo-tree-id34306 . -107) (undo-tree-id34307 . -107) (undo-tree-id34308 . -107) (undo-tree-id34309 . -107) (undo-tree-id34310 . -107) (undo-tree-id34311 . -107) (undo-tree-id34312 . -107) (undo-tree-id34313 . -107) (undo-tree-id34314 . -107) (undo-tree-id34315 . -107) (undo-tree-id34316 . -107) (undo-tree-id34317 . -107) (undo-tree-id34318 . -107) (undo-tree-id34319 . -107) (undo-tree-id34320 . -107) (undo-tree-id34321 . -107) (undo-tree-id34322 . -107) (undo-tree-id34323 . -107) (undo-tree-id34324 . -107) (undo-tree-id34325 . -107) (undo-tree-id34326 . -107) (undo-tree-id34327 . -107) (undo-tree-id34328 . -107) (undo-tree-id34329 . -107) (undo-tree-id34330 . -107) (undo-tree-id34331 . -107) (undo-tree-id34332 . -107) (undo-tree-id34333 . -107) (undo-tree-id34334 . -111) (undo-tree-id34335 . -111) (undo-tree-id34336 . -111) (undo-tree-id34337 . -111) (undo-tree-id34338 . -111) (undo-tree-id34339 . -111) (undo-tree-id34340 . -111) (undo-tree-id34341 . -111) (undo-tree-id34342 . -111) (undo-tree-id34343 . -111) (undo-tree-id34344 . -111) (undo-tree-id34345 . -111) (undo-tree-id34346 . -111) (undo-tree-id34347 . -111) (undo-tree-id34348 . -111) (undo-tree-id34349 . -118) (undo-tree-id34350 . -118) (undo-tree-id34351 . -118) (undo-tree-id34352 . -118) (undo-tree-id34353 . -118) (undo-tree-id34354 . -118) (undo-tree-id34355 . -118) (undo-tree-id34356 . -118) (undo-tree-id34357 . -118) (undo-tree-id34358 . -118) (undo-tree-id34359 . -118) (undo-tree-id34360 . -118) (undo-tree-id34361 . -118) (undo-tree-id34362 . -118) (undo-tree-id34363 . -118) (undo-tree-id34364 . -122) (undo-tree-id34365 . -122) (undo-tree-id34366 . -122) (undo-tree-id34367 . -122) (undo-tree-id34368 . -122) (undo-tree-id34369 . -122) (undo-tree-id34370 . -122) (undo-tree-id34371 . -122) (undo-tree-id34372 . -122) (undo-tree-id34373 . -122) (undo-tree-id34374 . -122) (undo-tree-id34375 . -122) (undo-tree-id34376 . -122) (undo-tree-id34377 . -122) (undo-tree-id34378 . -122) (undo-tree-id34379 . -122) (undo-tree-id34380 . -122) (undo-tree-id34381 . -122) (undo-tree-id34382 . -122) (undo-tree-id34383 . -122) (undo-tree-id34384 . -122) (undo-tree-id34385 . -122) (undo-tree-id34386 . -127) (undo-tree-id34387 . -127) (undo-tree-id34388 . -127) (undo-tree-id34389 . -127) (undo-tree-id34390 . -127) (undo-tree-id34391 . -127) (undo-tree-id34392 . -127) (undo-tree-id34393 . -127) (undo-tree-id34394 . -127) (undo-tree-id34395 . -127) (undo-tree-id34396 . -127) (undo-tree-id34397 . -127) (undo-tree-id34398 . -127) (undo-tree-id34399 . -127) (undo-tree-id34400 . -127) (undo-tree-id34401 . -130) (undo-tree-id34402 . -130) (undo-tree-id34403 . -130) (undo-tree-id34404 . -130) (undo-tree-id34405 . -130) (undo-tree-id34406 . -130) (undo-tree-id34407 . -130) (undo-tree-id34408 . -130) (undo-tree-id34409 . -130) (undo-tree-id34410 . -130) (undo-tree-id34411 . -130) (undo-tree-id34412 . -130) (undo-tree-id34413 . -130) (undo-tree-id34414 . -130) (undo-tree-id34415 . -130) (undo-tree-id34416 . -132) (undo-tree-id34417 . -132) (undo-tree-id34418 . -132) (undo-tree-id34419 . -132) (undo-tree-id34420 . -132) (undo-tree-id34421 . -132) (undo-tree-id34422 . -132) (undo-tree-id34423 . -132) (undo-tree-id34424 . -132) (undo-tree-id34425 . -132) (undo-tree-id34426 . -132) (undo-tree-id34427 . -132) (undo-tree-id34428 . -132) (undo-tree-id34429 . -132) (undo-tree-id34430 . -132) (undo-tree-id34431 . -136) (undo-tree-id34432 . -136) (undo-tree-id34433 . -136) (undo-tree-id34434 . -136) (undo-tree-id34435 . -136) (undo-tree-id34436 . -136) (undo-tree-id34437 . -136) (undo-tree-id34438 . -136) (undo-tree-id34439 . -136) (undo-tree-id34440 . -136) (undo-tree-id34441 . -136) (undo-tree-id34442 . -136) (undo-tree-id34443 . -136) (undo-tree-id34444 . -136) (undo-tree-id34445 . -136) (undo-tree-id34446 . -136) (undo-tree-id34447 . -136) (undo-tree-id34448 . -136) (undo-tree-id34449 . -136) (undo-tree-id34450 . -136) (undo-tree-id34451 . -136) (undo-tree-id34452 . -136) (undo-tree-id34453 . -136) (undo-tree-id34454 . -136) (undo-tree-id34455 . -136) (undo-tree-id34456 . -136) (undo-tree-id34457 . -136) (undo-tree-id34458 . -136) (undo-tree-id34459 . -136) (undo-tree-id34460 . -136) (undo-tree-id34461 . -136) (undo-tree-id34462 . -136) (undo-tree-id34463 . -136) (undo-tree-id34464 . -136) (undo-tree-id34465 . -136) (undo-tree-id34466 . -136) (undo-tree-id34467 . -136) (undo-tree-id34468 . -136) (undo-tree-id34469 . -136) (undo-tree-id34470 . -136) (undo-tree-id34471 . -136) (undo-tree-id34472 . -136) (undo-tree-id34473 . -136) (undo-tree-id34474 . -136) (undo-tree-id34475 . -136) (undo-tree-id34476 . -136) (undo-tree-id34477 . -136) (undo-tree-id34478 . -136) (undo-tree-id34479 . -136) (undo-tree-id34480 . -136) (undo-tree-id34481 . -136) (undo-tree-id34482 . -136) (undo-tree-id34483 . -136) (undo-tree-id34484 . -136) (undo-tree-id34485 . -136) (undo-tree-id34486 . -136) (undo-tree-id34487 . -136) (undo-tree-id34488 . -136) (undo-tree-id34489 . -136) (undo-tree-id34490 . -136) (undo-tree-id34491 . -136) (undo-tree-id34492 . -136) (undo-tree-id34493 . -136) (undo-tree-id34494 . -136) (undo-tree-id34495 . -136) (undo-tree-id34496 . -136) (undo-tree-id34497 . -136) (undo-tree-id34498 . -136) (undo-tree-id34499 . -136) (undo-tree-id34500 . -136) (undo-tree-id34501 . -136) (undo-tree-id34502 . -136) (undo-tree-id34503 . -136) (undo-tree-id34504 . -136) (undo-tree-id34505 . -136) (undo-tree-id34506 . -136) (undo-tree-id34507 . -136) (undo-tree-id34508 . -136) (undo-tree-id34509 . -136) (undo-tree-id34510 . -136) (undo-tree-id34511 . -136) (undo-tree-id34512 . -136) (undo-tree-id34513 . -136) (undo-tree-id34514 . -136) (undo-tree-id34515 . -136) (undo-tree-id34516 . -136) (undo-tree-id34517 . -136) (undo-tree-id34518 . -136) (undo-tree-id34519 . -136) (undo-tree-id34520 . -136) (undo-tree-id34521 . -136) (undo-tree-id34522 . -136) (undo-tree-id34523 . -136) (undo-tree-id34524 . -42) (6683 . 6725) (#(" and also much faster to train and run. " 0 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 15 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6777)) nil (25772 51371 40367 856000) 0 nil])
([nil nil ((#("and " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6780) (undo-tree-id33975 . -3) (undo-tree-id33976 . 4) (undo-tree-id33977 . -4)) nil (25772 51371 39691 580000) 0 nil])
([nil nil ((6780 . 6781) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6780)) nil (25772 51371 39676 579000) 0 nil])
([nil nil ((#("Still, if you only want to forecast a few time steps
ahead, on more complex tasks, this approach may work well.

The second option is to train an RNN to predict all 10 next values at once.
We can still use a sequence-to-vector model, but it will output 10 values
instead of 1. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 53 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 55 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 113 189 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 189 263 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 263 278 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7149) (undo-tree-id34749 . -277) (undo-tree-id34750 . -263) (undo-tree-id34751 . -263) (undo-tree-id34752 . -2) (undo-tree-id34753 . -2) (undo-tree-id34754 . -2) (undo-tree-id34755 . -2) (undo-tree-id34756 . -2) (undo-tree-id34757 . -2) (undo-tree-id34758 . -2) (undo-tree-id34759 . -2) (undo-tree-id34760 . -278) (undo-tree-id34761 . -263) (undo-tree-id34762 . -53) (undo-tree-id34763 . -53) (undo-tree-id34764 . -53) (undo-tree-id34765 . -53) (undo-tree-id34766 . -53) (undo-tree-id34767 . -53) (undo-tree-id34768 . -53) (undo-tree-id34769 . -53) (undo-tree-id34770 . -112) (undo-tree-id34771 . -112) (undo-tree-id34772 . -112) (undo-tree-id34773 . -112) (undo-tree-id34774 . -112) (undo-tree-id34775 . -112) (undo-tree-id34776 . -112) (undo-tree-id34777 . -112) (undo-tree-id34778 . -113) (undo-tree-id34779 . -113) (undo-tree-id34780 . -113) (undo-tree-id34781 . -113) (undo-tree-id34782 . -113) (undo-tree-id34783 . -113) (undo-tree-id34784 . -113) (undo-tree-id34785 . -113) (undo-tree-id34786 . -189) (undo-tree-id34787 . -189) (undo-tree-id34788 . -189) (undo-tree-id34789 . -189) (undo-tree-id34790 . -189) (undo-tree-id34791 . -189) (undo-tree-id34792 . -189) (undo-tree-id34793 . -189) (undo-tree-id34794 . -263) (undo-tree-id34795 . -263) (undo-tree-id34796 . -263) (undo-tree-id34797 . -263) (undo-tree-id34798 . -263) (undo-tree-id34799 . -263) (undo-tree-id34800 . -263) (undo-tree-id34801 . -263) (undo-tree-id34802 . -263) (undo-tree-id34803 . -278) 7412 (t 25772 51371 104850 956000)) nil (25772 51387 766519 599000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6816 . 6817) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7094) (6816 . 7095)) nil (25772 51387 766482 773000) 0 nil])
([nil nil ((6817 . 6819)) nil (25772 51387 766480 917000) 0 nil])
([nil nil ((7079 . 7080) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7079) (undo-tree-id34723 . -1) (7005 . 7006) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7005) (undo-tree-id34724 . -1) (6929 . 6930) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6929) (undo-tree-id34725 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6929) (undo-tree-id34726 . -1) (6870 . 6871) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6870) (undo-tree-id34727 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t)) . -6816) (undo-tree-id34728 . -1) (undo-tree-id34729 . -1) (undo-tree-id34730 . -1) (undo-tree-id34731 . -1) (undo-tree-id34732 . -1) (undo-tree-id34733 . -1) (undo-tree-id34734 . -1) (undo-tree-id34735 . -1) (undo-tree-id34736 . -1) (undo-tree-id34737 . -1) (undo-tree-id34738 . -1) (undo-tree-id34739 . -1) (undo-tree-id34740 . -1) (undo-tree-id34741 . -1) (undo-tree-id34742 . -1) (undo-tree-id34743 . -1) (undo-tree-id34744 . -1) (undo-tree-id34745 . -1) (undo-tree-id34746 . -1) (undo-tree-id34747 . -1) (undo-tree-id34748 . -1)) nil (25772 51387 766475 55000) 0 nil])
([nil nil ((#("Still, if you only want to forecast a few time steps ahead, on more complex tasks, this approach may work well. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 52 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 52 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 53 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 55 111 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 111 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6818) (undo-tree-id34804 . -111) (undo-tree-id34805 . 112) (undo-tree-id34806 . -111) (undo-tree-id34807 . -111) (undo-tree-id34808 . -112) (undo-tree-id34809 . -111) (undo-tree-id34810 . -88) (undo-tree-id34811 . -88) (undo-tree-id34812 . -88) (undo-tree-id34813 . -88) (undo-tree-id34814 . -88) (undo-tree-id34815 . -88) (undo-tree-id34816 . -88) (undo-tree-id34817 . -88) (undo-tree-id34818 . -88) (undo-tree-id34819 . -88) (undo-tree-id34820 . -88) (undo-tree-id34821 . -88) (undo-tree-id34822 . -88) (undo-tree-id34823 . -88) (undo-tree-id34824 . -88) (undo-tree-id34825 . -88) (undo-tree-id34826 . -88) (undo-tree-id34827 . -88) (undo-tree-id34828 . -88) (undo-tree-id34829 . -88) (undo-tree-id34830 . -88) (undo-tree-id34831 . -88) (undo-tree-id34832 . -88) (undo-tree-id34833 . -88) (undo-tree-id34834 . -88) (undo-tree-id34835 . -88) (undo-tree-id34836 . -88) (undo-tree-id34837 . -88) (undo-tree-id34838 . -88) (undo-tree-id34839 . -95) (undo-tree-id34840 . -95) (undo-tree-id34841 . -95) (undo-tree-id34842 . -95) (undo-tree-id34843 . -95) (undo-tree-id34844 . -95) (undo-tree-id34845 . -95) (undo-tree-id34846 . -95) (undo-tree-id34847 . -95) (undo-tree-id34848 . -95) (undo-tree-id34849 . -95) (undo-tree-id34850 . -95) (undo-tree-id34851 . -95) (undo-tree-id34852 . -95) (undo-tree-id34853 . -95) (undo-tree-id34854 . -95) (undo-tree-id34855 . -95) (undo-tree-id34856 . -95) (undo-tree-id34857 . -95) (undo-tree-id34858 . -95) (undo-tree-id34859 . -95) (undo-tree-id34860 . -95) (undo-tree-id34861 . -99) (undo-tree-id34862 . -99) (undo-tree-id34863 . -99) (undo-tree-id34864 . -99) (undo-tree-id34865 . -99) (undo-tree-id34866 . -99) (undo-tree-id34867 . -99) (undo-tree-id34868 . -99) (undo-tree-id34869 . -99) (undo-tree-id34870 . -99) (undo-tree-id34871 . -99) (undo-tree-id34872 . -99) (undo-tree-id34873 . -99) (undo-tree-id34874 . -99) (undo-tree-id34875 . -99) (undo-tree-id34876 . -99) (undo-tree-id34877 . -99) (undo-tree-id34878 . -99) (undo-tree-id34879 . -99) (undo-tree-id34880 . -99) (undo-tree-id34881 . -99) (undo-tree-id34882 . -99) (undo-tree-id34883 . -99) (undo-tree-id34884 . -99) (undo-tree-id34885 . -99) (undo-tree-id34886 . -99) (undo-tree-id34887 . -99) (undo-tree-id34888 . -99) (undo-tree-id34889 . -99) (undo-tree-id34890 . -104) (undo-tree-id34891 . -104) (undo-tree-id34892 . -104) (undo-tree-id34893 . -104) (undo-tree-id34894 . -104) (undo-tree-id34895 . -104) (undo-tree-id34896 . -104) (undo-tree-id34897 . -104) (undo-tree-id34898 . -104) (undo-tree-id34899 . -104) (undo-tree-id34900 . -104) (undo-tree-id34901 . -104) (undo-tree-id34902 . -104) (undo-tree-id34903 . -104) (undo-tree-id34904 . -104) (undo-tree-id34905 . -104) (undo-tree-id34906 . -104) (undo-tree-id34907 . -104) (undo-tree-id34908 . -104) (undo-tree-id34909 . -104) (undo-tree-id34910 . -104) (undo-tree-id34911 . -104) (undo-tree-id34912 . -109) (undo-tree-id34913 . -109) (undo-tree-id34914 . -109) (undo-tree-id34915 . -109) (undo-tree-id34916 . -109) (undo-tree-id34917 . -109) (undo-tree-id34918 . -109) (undo-tree-id34919 . -109) (undo-tree-id34920 . -109) (undo-tree-id34921 . -109) (undo-tree-id34922 . -109) (undo-tree-id34923 . -109) (undo-tree-id34924 . -109) (undo-tree-id34925 . -109) (undo-tree-id34926 . -109) (undo-tree-id34927 . -109) (undo-tree-id34928 . -109) (undo-tree-id34929 . -109) (undo-tree-id34930 . -109) (undo-tree-id34931 . -109) (undo-tree-id34932 . -109) (undo-tree-id34933 . -109) (undo-tree-id34934 . -110) (undo-tree-id34935 . -110) (undo-tree-id34936 . -110) (undo-tree-id34937 . -110) (undo-tree-id34938 . -110) (undo-tree-id34939 . -110) (undo-tree-id34940 . -110) (undo-tree-id34941 . -110) (undo-tree-id34942 . -110) (undo-tree-id34943 . -110) (undo-tree-id34944 . -110) (undo-tree-id34945 . -110) (undo-tree-id34946 . -110) (undo-tree-id34947 . -110) (undo-tree-id34948 . -110) (undo-tree-id34949 . -110) (undo-tree-id34950 . -110) (undo-tree-id34951 . -110) (undo-tree-id34952 . -110) (undo-tree-id34953 . -110) (undo-tree-id34954 . -110) (undo-tree-id34955 . -110) (undo-tree-id34956 . -111) (undo-tree-id34957 . -111) (undo-tree-id34958 . -111) (undo-tree-id34959 . -111) (undo-tree-id34960 . -111) (undo-tree-id34961 . -111) (undo-tree-id34962 . -111) (undo-tree-id34963 . -111) (undo-tree-id34964 . -111) (undo-tree-id34965 . -111) (undo-tree-id34966 . -111) (undo-tree-id34967 . -111) (undo-tree-id34968 . -111) (undo-tree-id34969 . -111) (undo-tree-id34970 . -111) (undo-tree-id34971 . -111) (undo-tree-id34972 . -111) (undo-tree-id34973 . -111) (undo-tree-id34974 . -111) (undo-tree-id34975 . -111) (undo-tree-id34976 . -111) (undo-tree-id34977 . -111) (undo-tree-id34978 . -111) (undo-tree-id34979 . -111) (undo-tree-id34980 . -111) (undo-tree-id34981 . -111) (undo-tree-id34982 . -111) (undo-tree-id34983 . -111) (undo-tree-id34984 . -111) (undo-tree-id34985 . -111) (undo-tree-id34986 . -112) 6929 (t 25772 51387 830386 108000)) nil (25772 51403 286163 770000) 0 nil])
([nil nil ((#("all " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6866) (undo-tree-id36704 . -3) (undo-tree-id36705 . -2) (undo-tree-id36706 . -2) (undo-tree-id36707 . -2) (undo-tree-id36708 . -2) (undo-tree-id36709 . -2) (undo-tree-id36710 . -2) (undo-tree-id36711 . -2) (undo-tree-id36712 . -2) (undo-tree-id36713 . -2) (undo-tree-id36714 . -2) (undo-tree-id36715 . -2) (undo-tree-id36716 . -2) (undo-tree-id36717 . -2) (undo-tree-id36718 . -2) (undo-tree-id36719 . -2) (undo-tree-id36720 . -4) (undo-tree-id36721 . -4) (undo-tree-id36722 . -4) (undo-tree-id36723 . -4) (undo-tree-id36724 . -4) (undo-tree-id36725 . -4) (undo-tree-id36726 . -4) (undo-tree-id36727 . -4) (undo-tree-id36728 . -4) (undo-tree-id36729 . -4) (undo-tree-id36730 . -4) (undo-tree-id36731 . -4) (undo-tree-id36732 . -4) (undo-tree-id36733 . -4) (undo-tree-id36734 . -4) (undo-tree-id36735 . -4) (undo-tree-id36736 . -4) (undo-tree-id36737 . -4) (undo-tree-id36738 . -4) (undo-tree-id36739 . -4) (undo-tree-id36740 . -4) (undo-tree-id36741 . -4) (undo-tree-id36742 . -4) (t 25772 51403 343792 328000)) nil (25772 51514 47919 66000) 0 nil])
([nil nil ((#("10 " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6866) (undo-tree-id36687 . -2) (undo-tree-id36688 . -1) (undo-tree-id36689 . -1) (undo-tree-id36690 . -1) (undo-tree-id36691 . -1) (undo-tree-id36692 . -1) (undo-tree-id36693 . -1) (undo-tree-id36694 . -1) (undo-tree-id36695 . -1) (undo-tree-id36696 . -1) (undo-tree-id36697 . -1) (undo-tree-id36698 . -1) (undo-tree-id36699 . -1) (undo-tree-id36700 . -1) (undo-tree-id36701 . -1) (undo-tree-id36702 . -1) (undo-tree-id36703 . -3)) nil (25772 51514 47895 951000) 0 nil])
([nil nil ((#(". We can still use a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6885) (undo-tree-id36570 . -19) (undo-tree-id36571 . -19) (undo-tree-id36572 . -19) (undo-tree-id36573 . -20) (undo-tree-id36574 . -19) (undo-tree-id36575 . -3) (undo-tree-id36576 . -3) (undo-tree-id36577 . -3) (undo-tree-id36578 . -3) (undo-tree-id36579 . -3) (undo-tree-id36580 . -3) (undo-tree-id36581 . -3) (undo-tree-id36582 . -3) (undo-tree-id36583 . -3) (undo-tree-id36584 . -3) (undo-tree-id36585 . -3) (undo-tree-id36586 . -3) (undo-tree-id36587 . -3) (undo-tree-id36588 . -3) (undo-tree-id36589 . -3) (undo-tree-id36590 . -3) (undo-tree-id36591 . -3) (undo-tree-id36592 . -3) (undo-tree-id36593 . -3) (undo-tree-id36594 . -3) (undo-tree-id36595 . -3) (undo-tree-id36596 . -3) (undo-tree-id36597 . -7) (undo-tree-id36598 . -7) (undo-tree-id36599 . -7) (undo-tree-id36600 . -7) (undo-tree-id36601 . -7) (undo-tree-id36602 . -7) (undo-tree-id36603 . -7) (undo-tree-id36604 . -7) (undo-tree-id36605 . -7) (undo-tree-id36606 . -7) (undo-tree-id36607 . -7) (undo-tree-id36608 . -7) (undo-tree-id36609 . -7) (undo-tree-id36610 . -7) (undo-tree-id36611 . -7) (undo-tree-id36612 . -7) (undo-tree-id36613 . -7) (undo-tree-id36614 . -7) (undo-tree-id36615 . -7) (undo-tree-id36616 . -7) (undo-tree-id36617 . -7) (undo-tree-id36618 . -7) (undo-tree-id36619 . -13) (undo-tree-id36620 . -13) (undo-tree-id36621 . -13) (undo-tree-id36622 . -13) (undo-tree-id36623 . -13) (undo-tree-id36624 . -13) (undo-tree-id36625 . -13) (undo-tree-id36626 . -13) (undo-tree-id36627 . -13) (undo-tree-id36628 . -13) (undo-tree-id36629 . -13) (undo-tree-id36630 . -13) (undo-tree-id36631 . -13) (undo-tree-id36632 . -13) (undo-tree-id36633 . -13) (undo-tree-id36634 . -13) (undo-tree-id36635 . -13) (undo-tree-id36636 . -13) (undo-tree-id36637 . -13) (undo-tree-id36638 . -13) (undo-tree-id36639 . -13) (undo-tree-id36640 . -13) (undo-tree-id36641 . -17) (undo-tree-id36642 . -17) (undo-tree-id36643 . -17) (undo-tree-id36644 . -17) (undo-tree-id36645 . -17) (undo-tree-id36646 . -17) (undo-tree-id36647 . -17) (undo-tree-id36648 . -17) (undo-tree-id36649 . -17) (undo-tree-id36650 . -17) (undo-tree-id36651 . -17) (undo-tree-id36652 . -17) (undo-tree-id36653 . -17) (undo-tree-id36654 . -17) (undo-tree-id36655 . -17) (undo-tree-id36656 . -17) (undo-tree-id36657 . -17) (undo-tree-id36658 . -17) (undo-tree-id36659 . -17) (undo-tree-id36660 . -17) (undo-tree-id36661 . -17) (undo-tree-id36662 . -17) (undo-tree-id36663 . -19) (undo-tree-id36664 . -19) (undo-tree-id36665 . -19) (undo-tree-id36666 . -19) (undo-tree-id36667 . -19) (undo-tree-id36668 . -19) (undo-tree-id36669 . -19) (undo-tree-id36670 . -19) (undo-tree-id36671 . -19) (undo-tree-id36672 . -19) (undo-tree-id36673 . -19) (undo-tree-id36674 . -19) (undo-tree-id36675 . -19) (undo-tree-id36676 . -19) (undo-tree-id36677 . -19) (undo-tree-id36678 . -19) (undo-tree-id36679 . -19) (undo-tree-id36680 . -19) (undo-tree-id36681 . -19) (undo-tree-id36682 . -19) (undo-tree-id36683 . -19) (undo-tree-id36684 . -19) (undo-tree-id36685 . -19) (undo-tree-id36686 . -20) 6904) nil (25772 51514 47881 554000) 0 nil])
([nil nil ((6885 . 6887) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6885) (undo-tree-id36488 . -1) (undo-tree-id36489 . -1) (undo-tree-id36490 . -1) (undo-tree-id36491 . -1) (undo-tree-id36492 . -1) (undo-tree-id36493 . -1) (undo-tree-id36494 . -1) (undo-tree-id36495 . -1) (undo-tree-id36496 . -1) (undo-tree-id36497 . -1) (undo-tree-id36498 . -1) (undo-tree-id36499 . -1) (undo-tree-id36500 . -1) (undo-tree-id36501 . -1) (undo-tree-id36502 . -1) (undo-tree-id36503 . -1) (undo-tree-id36504 . -1) (undo-tree-id36505 . -1) (undo-tree-id36506 . -1) (undo-tree-id36507 . -1) (undo-tree-id36508 . -1) (undo-tree-id36509 . -1) (undo-tree-id36510 . -1) (undo-tree-id36511 . -1) (undo-tree-id36512 . -1) (undo-tree-id36513 . -1) (undo-tree-id36514 . -1) (undo-tree-id36515 . -1) (undo-tree-id36516 . -1) (undo-tree-id36517 . -1) (undo-tree-id36518 . -1) (undo-tree-id36519 . -1) (undo-tree-id36520 . -1) (undo-tree-id36521 . -1) (undo-tree-id36522 . -1) (undo-tree-id36523 . -1) (undo-tree-id36524 . -1) (undo-tree-id36525 . -1) (undo-tree-id36526 . -1) (undo-tree-id36527 . -1) (undo-tree-id36528 . -1) (undo-tree-id36529 . -1) (undo-tree-id36530 . -1) (undo-tree-id36531 . -1) (undo-tree-id36532 . -1) (undo-tree-id36533 . -1) (undo-tree-id36534 . -1) (undo-tree-id36535 . -1) (undo-tree-id36536 . -1) (undo-tree-id36537 . -1) (undo-tree-id36538 . -1) (undo-tree-id36539 . -1) (undo-tree-id36540 . -1) (undo-tree-id36541 . -1) (undo-tree-id36542 . -1) (undo-tree-id36543 . -1) (undo-tree-id36544 . -1) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6886) (undo-tree-id36545 . -1) (undo-tree-id36546 . -1) (undo-tree-id36547 . -1) (undo-tree-id36548 . -1) (undo-tree-id36549 . -1) (undo-tree-id36550 . -1) (undo-tree-id36551 . -1) (undo-tree-id36552 . -1) (undo-tree-id36553 . -1) (undo-tree-id36554 . -1) (undo-tree-id36555 . -1) (undo-tree-id36556 . -1) (undo-tree-id36557 . -1) (undo-tree-id36558 . -1) (undo-tree-id36559 . -1) (undo-tree-id36560 . -1) (undo-tree-id36561 . -1) (undo-tree-id36562 . -1) (undo-tree-id36563 . -1) (undo-tree-id36564 . -1) (undo-tree-id36565 . -1) (undo-tree-id36566 . -1) (undo-tree-id36567 . -1) (undo-tree-id36568 . -1) (undo-tree-id36569 . -1) 6887 (6885 . 6887)) nil (25772 51514 47812 976000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6887) (undo-tree-id36484 . 1) (undo-tree-id36485 . 1) (undo-tree-id36486 . -1) (undo-tree-id36487 . -1)) nil (25772 51514 47767 50000) 0 nil])
([nil nil ((6911 . 6912) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6911) (undo-tree-id36483 . -1)) nil (25772 51514 47763 883000) 0 nil])
([nil nil ((6816 . 6958) (#("- but it will output 10 values instead of 1. 
- The second option is to train an RNN to predict next values at once (sequence-to-vector model)" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 30 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 30 31 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 31 45 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 45 46 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 46 47 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 47 48 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 117 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 141 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 141 142 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6816) (undo-tree-id35234 . -141) (undo-tree-id35235 . -141) (undo-tree-id35236 . 25) (undo-tree-id35237 . -115) (undo-tree-id35238 . -115) (undo-tree-id35239 . 25) (undo-tree-id35240 . -48) (undo-tree-id35241 . -48) (undo-tree-id35242 . -48) (undo-tree-id35243 . -48) (undo-tree-id35244 . -48) (undo-tree-id35245 . -48) (undo-tree-id35246 . -48) (undo-tree-id35247 . -48) (undo-tree-id35248 . -48) (undo-tree-id35249 . -48) (undo-tree-id35250 . -48) (undo-tree-id35251 . -48) (undo-tree-id35252 . -48) (undo-tree-id35253 . -48) (undo-tree-id35254 . -48) (undo-tree-id35255 . -48) (undo-tree-id35256 . -48) (undo-tree-id35257 . -48) (undo-tree-id35258 . -48) (undo-tree-id35259 . -48) (undo-tree-id35260 . -48) (undo-tree-id35261 . -48) (undo-tree-id35262 . -48) (undo-tree-id35263 . -48) (undo-tree-id35264 . -48) (undo-tree-id35265 . -48) (undo-tree-id35266 . -48) (undo-tree-id35267 . -48) (undo-tree-id35268 . -48) (undo-tree-id35269 . -48) (undo-tree-id35270 . -48) (undo-tree-id35271 . -48) (undo-tree-id35272 . -48) (undo-tree-id35273 . -48) (undo-tree-id35274 . -48) (undo-tree-id35275 . -48) (undo-tree-id35276 . -48) (undo-tree-id35277 . -48) (undo-tree-id35278 . -48) (undo-tree-id35279 . -48) (undo-tree-id35280 . -48) (undo-tree-id35281 . -48) (undo-tree-id35282 . -48) (undo-tree-id35283 . -48) (undo-tree-id35284 . -48) (undo-tree-id35285 . -48) (undo-tree-id35286 . -48) (undo-tree-id35287 . -48) (undo-tree-id35288 . -48) (undo-tree-id35289 . -48) (undo-tree-id35290 . -48) (undo-tree-id35291 . -48) (undo-tree-id35292 . -48) (undo-tree-id35293 . -48) (undo-tree-id35294 . -48) (undo-tree-id35295 . -48) (undo-tree-id35296 . -48) (undo-tree-id35297 . -48) (undo-tree-id35298 . -48) (undo-tree-id35299 . -48) (undo-tree-id35300 . -48) (undo-tree-id35301 . -48) (undo-tree-id35302 . -48) (undo-tree-id35303 . -48) (undo-tree-id35304 . -48) (undo-tree-id35305 . -48) (undo-tree-id35306 . -48) (undo-tree-id35307 . -48) (undo-tree-id35308 . -48) (undo-tree-id35309 . -48) (undo-tree-id35310 . -48) (undo-tree-id35311 . -48) (undo-tree-id35312 . -48) (undo-tree-id35313 . -48) (undo-tree-id35314 . -48) (undo-tree-id35315 . -48) (undo-tree-id35316 . -48) (undo-tree-id35317 . -48) (undo-tree-id35318 . -48) (undo-tree-id35319 . -48) (undo-tree-id35320 . -48) (undo-tree-id35321 . -48) (undo-tree-id35322 . -48) (undo-tree-id35323 . -48) (undo-tree-id35324 . -48) (undo-tree-id35325 . -48) (undo-tree-id35326 . -48) (undo-tree-id35327 . -48) (undo-tree-id35328 . -48) (undo-tree-id35329 . -48) (undo-tree-id35330 . -48) (undo-tree-id35331 . -48) (undo-tree-id35332 . -48) (undo-tree-id35333 . -48) (undo-tree-id35334 . -48) (undo-tree-id35335 . -48) (undo-tree-id35336 . -48) (undo-tree-id35337 . -48) (undo-tree-id35338 . -48) (undo-tree-id35339 . -48) (undo-tree-id35340 . -48) (undo-tree-id35341 . -48) (undo-tree-id35342 . -48) (undo-tree-id35343 . -48) (undo-tree-id35344 . -48) (undo-tree-id35345 . -48) (undo-tree-id35346 . -48) (undo-tree-id35347 . -48) (undo-tree-id35348 . -48) (undo-tree-id35349 . -48) (undo-tree-id35350 . -48) (undo-tree-id35351 . -48) (undo-tree-id35352 . -48) (undo-tree-id35353 . -48) (undo-tree-id35354 . -48) (undo-tree-id35355 . -48) (undo-tree-id35356 . -48) (undo-tree-id35357 . -48) (undo-tree-id35358 . -48) (undo-tree-id35359 . -48) (undo-tree-id35360 . -48) (undo-tree-id35361 . -48) (undo-tree-id35362 . -48) (undo-tree-id35363 . -48) (undo-tree-id35364 . -48) (undo-tree-id35365 . -48) (undo-tree-id35366 . -48) (undo-tree-id35367 . -48) (undo-tree-id35368 . -48) (undo-tree-id35369 . -48) (undo-tree-id35370 . -48) (undo-tree-id35371 . -48) (undo-tree-id35372 . -48) (undo-tree-id35373 . -48) (undo-tree-id35374 . -48) (undo-tree-id35375 . -48) (undo-tree-id35376 . -48) (undo-tree-id35377 . -48) (undo-tree-id35378 . -48) (undo-tree-id35379 . -48) (undo-tree-id35380 . -48) (undo-tree-id35381 . -48) (undo-tree-id35382 . -48) (undo-tree-id35383 . -48) (undo-tree-id35384 . -48) (undo-tree-id35385 . -48) (undo-tree-id35386 . -48) (undo-tree-id35387 . -48) (undo-tree-id35388 . -48) (undo-tree-id35389 . -48) (undo-tree-id35390 . -48) (undo-tree-id35391 . -48) (undo-tree-id35392 . -48) (undo-tree-id35393 . -48) (undo-tree-id35394 . -48) (undo-tree-id35395 . -48) (undo-tree-id35396 . -48) (undo-tree-id35397 . -48) (undo-tree-id35398 . -48) (undo-tree-id35399 . -48) (undo-tree-id35400 . -48) (undo-tree-id35401 . -48) (undo-tree-id35402 . -48) (undo-tree-id35403 . -48) (undo-tree-id35404 . -48) (undo-tree-id35405 . -48) (undo-tree-id35406 . -48) (undo-tree-id35407 . -48) (undo-tree-id35408 . -48) (undo-tree-id35409 . -48) (undo-tree-id35410 . -48) (undo-tree-id35411 . -48) (undo-tree-id35412 . -48) (undo-tree-id35413 . -48) (undo-tree-id35414 . -48) (undo-tree-id35415 . -48) (undo-tree-id35416 . -142) (undo-tree-id35417 . -48) (undo-tree-id35418 . -48) (undo-tree-id35419 . -48) (undo-tree-id35420 . -48) (undo-tree-id35421 . -48) (undo-tree-id35422 . -48) (undo-tree-id35423 . -48) (undo-tree-id35424 . -48) (undo-tree-id35425 . -48) (undo-tree-id35426 . -48) (undo-tree-id35427 . -48) (undo-tree-id35428 . -48) (undo-tree-id35429 . -48) (undo-tree-id35430 . -48) (undo-tree-id35431 . -48) (undo-tree-id35432 . -48) (undo-tree-id35433 . -48) (undo-tree-id35434 . -48) (undo-tree-id35435 . -48) (undo-tree-id35436 . -48) (undo-tree-id35437 . -48) (undo-tree-id35438 . -48) (undo-tree-id35439 . -48) (undo-tree-id35440 . -48) (undo-tree-id35441 . -48) (undo-tree-id35442 . -48) (undo-tree-id35443 . -48) (undo-tree-id35444 . -48) (undo-tree-id35445 . -48) (undo-tree-id35446 . -48) (undo-tree-id35447 . -48) (undo-tree-id35448 . -48) (undo-tree-id35449 . -48) (undo-tree-id35450 . -48) (undo-tree-id35451 . -48) (undo-tree-id35452 . -48) (undo-tree-id35453 . -48) (undo-tree-id35454 . -48) (undo-tree-id35455 . -48) (undo-tree-id35456 . -50) (undo-tree-id35457 . -50) (undo-tree-id35458 . -50) (undo-tree-id35459 . -50) (undo-tree-id35460 . -50) (undo-tree-id35461 . -50) (undo-tree-id35462 . -50) (undo-tree-id35463 . -50) (undo-tree-id35464 . -50) (undo-tree-id35465 . -50) (undo-tree-id35466 . -50) (undo-tree-id35467 . -50) (undo-tree-id35468 . -50) (undo-tree-id35469 . -50) (undo-tree-id35470 . -50) (undo-tree-id35471 . -57) (undo-tree-id35472 . -57) (undo-tree-id35473 . -57) (undo-tree-id35474 . -57) (undo-tree-id35475 . -57) (undo-tree-id35476 . -57) (undo-tree-id35477 . -57) (undo-tree-id35478 . -57) (undo-tree-id35479 . -57) (undo-tree-id35480 . -57) (undo-tree-id35481 . -57) (undo-tree-id35482 . -57) (undo-tree-id35483 . -57) (undo-tree-id35484 . -57) (undo-tree-id35485 . -57) (undo-tree-id35486 . -64) (undo-tree-id35487 . -64) (undo-tree-id35488 . -64) (undo-tree-id35489 . -64) (undo-tree-id35490 . -64) (undo-tree-id35491 . -64) (undo-tree-id35492 . -64) (undo-tree-id35493 . -64) (undo-tree-id35494 . -67) (undo-tree-id35495 . -67) (undo-tree-id35496 . -67) (undo-tree-id35497 . -67) (undo-tree-id35498 . -67) (undo-tree-id35499 . -67) (undo-tree-id35500 . -67) (undo-tree-id35501 . -67) (undo-tree-id35502 . -70) (undo-tree-id35503 . -70) (undo-tree-id35504 . -70) (undo-tree-id35505 . -70) (undo-tree-id35506 . -70) (undo-tree-id35507 . -70) (undo-tree-id35508 . -70) (undo-tree-id35509 . -70) (undo-tree-id35510 . -76) (undo-tree-id35511 . -76) (undo-tree-id35512 . -76) (undo-tree-id35513 . -76) (undo-tree-id35514 . -76) (undo-tree-id35515 . -76) (undo-tree-id35516 . -76) (undo-tree-id35517 . -76) (undo-tree-id35518 . -76) (undo-tree-id35519 . -76) (undo-tree-id35520 . -76) (undo-tree-id35521 . -76) (undo-tree-id35522 . -76) (undo-tree-id35523 . -76) (undo-tree-id35524 . -76) (undo-tree-id35525 . -76) (undo-tree-id35526 . -76) (undo-tree-id35527 . -76) (undo-tree-id35528 . -76) (undo-tree-id35529 . -76) (undo-tree-id35530 . -76) (undo-tree-id35531 . -76) (undo-tree-id35532 . -76) (undo-tree-id35533 . -76) (undo-tree-id35534 . -76) (undo-tree-id35535 . -76) (undo-tree-id35536 . -76) (undo-tree-id35537 . -76) (undo-tree-id35538 . -76) (undo-tree-id35539 . -79) (undo-tree-id35540 . -79) (undo-tree-id35541 . -79) (undo-tree-id35542 . -79) (undo-tree-id35543 . -79) (undo-tree-id35544 . -79) (undo-tree-id35545 . -79) (undo-tree-id35546 . -79) (undo-tree-id35547 . -79) (undo-tree-id35548 . -79) (undo-tree-id35549 . -79) (undo-tree-id35550 . -79) (undo-tree-id35551 . -79) (undo-tree-id35552 . -79) (undo-tree-id35553 . -79) (undo-tree-id35554 . 61) (undo-tree-id35555 . -84) (undo-tree-id35556 . -83) (undo-tree-id35557 . -83) (undo-tree-id35558 . -83) (undo-tree-id35559 . -83) (undo-tree-id35560 . -83) (undo-tree-id35561 . -83) (undo-tree-id35562 . -83) (undo-tree-id35563 . -83) (undo-tree-id35564 . -83) (undo-tree-id35565 . -83) (undo-tree-id35566 . -83) (undo-tree-id35567 . -83) (undo-tree-id35568 . -83) (undo-tree-id35569 . -83) (undo-tree-id35570 . -83) (undo-tree-id35571 . -86) (undo-tree-id35572 . -86) (undo-tree-id35573 . -86) (undo-tree-id35574 . -86) (undo-tree-id35575 . -86) (undo-tree-id35576 . -86) (undo-tree-id35577 . -86) (undo-tree-id35578 . -86) (undo-tree-id35579 . -86) (undo-tree-id35580 . -86) (undo-tree-id35581 . -86) (undo-tree-id35582 . -86) (undo-tree-id35583 . -86) (undo-tree-id35584 . -86) (undo-tree-id35585 . -86) (undo-tree-id35586 . -94) (undo-tree-id35587 . -94) (undo-tree-id35588 . -94) (undo-tree-id35589 . -94) (undo-tree-id35590 . -94) (undo-tree-id35591 . -94) (undo-tree-id35592 . -94) (undo-tree-id35593 . -94) (undo-tree-id35594 . -94) (undo-tree-id35595 . -94) (undo-tree-id35596 . -94) (undo-tree-id35597 . -94) (undo-tree-id35598 . -94) (undo-tree-id35599 . -94) (undo-tree-id35600 . -94) (undo-tree-id35601 . -96) (undo-tree-id35602 . -96) (undo-tree-id35603 . -96) (undo-tree-id35604 . -96) (undo-tree-id35605 . -96) (undo-tree-id35606 . -96) (undo-tree-id35607 . -96) (undo-tree-id35608 . -96) (undo-tree-id35609 . -96) (undo-tree-id35610 . -96) (undo-tree-id35611 . -96) (undo-tree-id35612 . -96) (undo-tree-id35613 . -96) (undo-tree-id35614 . -96) (undo-tree-id35615 . -96) (undo-tree-id35616 . -96) (undo-tree-id35617 . -96) (undo-tree-id35618 . -96) (undo-tree-id35619 . -96) (undo-tree-id35620 . -96) (undo-tree-id35621 . -96) (undo-tree-id35622 . -96) (undo-tree-id35623 . -96) (undo-tree-id35624 . -96) (undo-tree-id35625 . -96) (undo-tree-id35626 . -96) (undo-tree-id35627 . -96) (undo-tree-id35628 . -96) (undo-tree-id35629 . -96) (undo-tree-id35630 . -96) (undo-tree-id35631 . -96) (undo-tree-id35632 . -96) (undo-tree-id35633 . -96) (undo-tree-id35634 . -96) (undo-tree-id35635 . -96) (undo-tree-id35636 . -96) (undo-tree-id35637 . -96) (undo-tree-id35638 . -96) (undo-tree-id35639 . -96) (undo-tree-id35640 . -96) (undo-tree-id35641 . -96) (undo-tree-id35642 . -96) (undo-tree-id35643 . -96) (undo-tree-id35644 . -96) (undo-tree-id35645 . -96) (undo-tree-id35646 . -96) (undo-tree-id35647 . -96) (undo-tree-id35648 . -96) (undo-tree-id35649 . -96) (undo-tree-id35650 . -96) (undo-tree-id35651 . -96) (undo-tree-id35652 . -96) (undo-tree-id35653 . -96) (undo-tree-id35654 . -96) (undo-tree-id35655 . -96) (undo-tree-id35656 . -96) (undo-tree-id35657 . -96) (undo-tree-id35658 . -96) (undo-tree-id35659 . -96) (undo-tree-id35660 . -96) (undo-tree-id35661 . -96) (undo-tree-id35662 . -96) (undo-tree-id35663 . -96) (undo-tree-id35664 . -96) (undo-tree-id35665 . -96) (undo-tree-id35666 . -96) (undo-tree-id35667 . -96) (undo-tree-id35668 . -96) (undo-tree-id35669 . -96) (undo-tree-id35670 . -96) (undo-tree-id35671 . -96) (undo-tree-id35672 . -96) (undo-tree-id35673 . -96) (undo-tree-id35674 . -96) (undo-tree-id35675 . -96) (undo-tree-id35676 . -96) (undo-tree-id35677 . -96) (undo-tree-id35678 . -96) (undo-tree-id35679 . -96) (undo-tree-id35680 . -96) (undo-tree-id35681 . -96) (undo-tree-id35682 . -96) (undo-tree-id35683 . -96) (undo-tree-id35684 . -96) (undo-tree-id35685 . -96) (undo-tree-id35686 . -96) (undo-tree-id35687 . -96) (undo-tree-id35688 . -96) (undo-tree-id35689 . -96) (undo-tree-id35690 . -96) (undo-tree-id35691 . -96) (undo-tree-id35692 . -96) (undo-tree-id35693 . -96) (undo-tree-id35694 . -96) (undo-tree-id35695 . -96) (undo-tree-id35696 . -96) (undo-tree-id35697 . -96) (undo-tree-id35698 . -96) (undo-tree-id35699 . -96) (undo-tree-id35700 . -96) (undo-tree-id35701 . -96) (undo-tree-id35702 . -96) (undo-tree-id35703 . -96) (undo-tree-id35704 . -96) (undo-tree-id35705 . -96) (undo-tree-id35706 . -96) (undo-tree-id35707 . -96) (undo-tree-id35708 . -96) (undo-tree-id35709 . -96) (undo-tree-id35710 . -96) (undo-tree-id35711 . -96) (undo-tree-id35712 . -96) (undo-tree-id35713 . -96) (undo-tree-id35714 . -96) (undo-tree-id35715 . -96) (undo-tree-id35716 . -96) (undo-tree-id35717 . -96) (undo-tree-id35718 . -96) (undo-tree-id35719 . -96) (undo-tree-id35720 . -96) (undo-tree-id35721 . -96) (undo-tree-id35722 . -96) (undo-tree-id35723 . -96) (undo-tree-id35724 . -96) (undo-tree-id35725 . -96) (undo-tree-id35726 . -96) (undo-tree-id35727 . -96) (undo-tree-id35728 . -96) (undo-tree-id35729 . -96) (undo-tree-id35730 . -96) (undo-tree-id35731 . -96) (undo-tree-id35732 . -96) (undo-tree-id35733 . -96) (undo-tree-id35734 . -96) (undo-tree-id35735 . -96) (undo-tree-id35736 . -96) (undo-tree-id35737 . -96) (undo-tree-id35738 . -96) (undo-tree-id35739 . -96) (undo-tree-id35740 . -96) (undo-tree-id35741 . -96) (undo-tree-id35742 . -96) (undo-tree-id35743 . -96) (undo-tree-id35744 . -96) (undo-tree-id35745 . -96) (undo-tree-id35746 . -96) (undo-tree-id35747 . -96) (undo-tree-id35748 . -96) (undo-tree-id35749 . -96) (undo-tree-id35750 . -96) (undo-tree-id35751 . -96) (undo-tree-id35752 . -96) (undo-tree-id35753 . -96) (undo-tree-id35754 . -96) (undo-tree-id35755 . -96) (undo-tree-id35756 . -96) (undo-tree-id35757 . -96) (undo-tree-id35758 . -96) (undo-tree-id35759 . -96) (undo-tree-id35760 . -96) (undo-tree-id35761 . -96) (undo-tree-id35762 . -96) (undo-tree-id35763 . -96) (undo-tree-id35764 . -96) (undo-tree-id35765 . -96) (undo-tree-id35766 . -96) (undo-tree-id35767 . -96) (undo-tree-id35768 . -96) (undo-tree-id35769 . -96) (undo-tree-id35770 . -96) (undo-tree-id35771 . -96) (undo-tree-id35772 . -96) (undo-tree-id35773 . -96) (undo-tree-id35774 . -96) (undo-tree-id35775 . -96) (undo-tree-id35776 . -115) (undo-tree-id35777 . -115) (undo-tree-id35778 . -115) (undo-tree-id35779 . -115) (undo-tree-id35780 . -115) (undo-tree-id35781 . -115) (undo-tree-id35782 . -115) (undo-tree-id35783 . -115) (undo-tree-id35784 . -115) (undo-tree-id35785 . -115) (undo-tree-id35786 . -115) (undo-tree-id35787 . -115) (undo-tree-id35788 . -115) (undo-tree-id35789 . -115) (undo-tree-id35790 . -115) (undo-tree-id35791 . -115) (undo-tree-id35792 . -115) (undo-tree-id35793 . -115) (undo-tree-id35794 . -115) (undo-tree-id35795 . -115) (undo-tree-id35796 . -115) (undo-tree-id35797 . -115) (undo-tree-id35798 . -115) (undo-tree-id35799 . -115) (undo-tree-id35800 . -115) (undo-tree-id35801 . -115) (undo-tree-id35802 . -115) (undo-tree-id35803 . -115) (undo-tree-id35804 . -115) (undo-tree-id35805 . -115) (undo-tree-id35806 . -115) (undo-tree-id35807 . -115) (undo-tree-id35808 . -115) (undo-tree-id35809 . -115) (undo-tree-id35810 . -115) (undo-tree-id35811 . -115) (undo-tree-id35812 . -115) (undo-tree-id35813 . -115) (undo-tree-id35814 . -115) (undo-tree-id35815 . -115) (undo-tree-id35816 . -115) (undo-tree-id35817 . -115) (undo-tree-id35818 . -115) (undo-tree-id35819 . -115) (undo-tree-id35820 . -115) (undo-tree-id35821 . -115) (undo-tree-id35822 . -115) (undo-tree-id35823 . -115) (undo-tree-id35824 . -115) (undo-tree-id35825 . -115) (undo-tree-id35826 . -115) (undo-tree-id35827 . -115) (undo-tree-id35828 . -115) (undo-tree-id35829 . -115) (undo-tree-id35830 . -115) (undo-tree-id35831 . -115) (undo-tree-id35832 . -115) (undo-tree-id35833 . -115) (undo-tree-id35834 . -115) (undo-tree-id35835 . -115) (undo-tree-id35836 . -115) (undo-tree-id35837 . -115) (undo-tree-id35838 . -115) (undo-tree-id35839 . -115) (undo-tree-id35840 . -115) (undo-tree-id35841 . -115) (undo-tree-id35842 . -115) (undo-tree-id35843 . -115) (undo-tree-id35844 . -115) (undo-tree-id35845 . -115) (undo-tree-id35846 . -115) (undo-tree-id35847 . -115) (undo-tree-id35848 . -115) (undo-tree-id35849 . -115) (undo-tree-id35850 . -115) (undo-tree-id35851 . -115) (undo-tree-id35852 . -115) (undo-tree-id35853 . -115) (undo-tree-id35854 . -115) (undo-tree-id35855 . -115) (undo-tree-id35856 . -115) (undo-tree-id35857 . -115) (undo-tree-id35858 . -115) (undo-tree-id35859 . -115) (undo-tree-id35860 . -115) (undo-tree-id35861 . -115) (undo-tree-id35862 . -115) (undo-tree-id35863 . -115) (undo-tree-id35864 . -115) (undo-tree-id35865 . -115) (undo-tree-id35866 . -115) (undo-tree-id35867 . -115) (undo-tree-id35868 . -115) (undo-tree-id35869 . -115) (undo-tree-id35870 . -115) (undo-tree-id35871 . -115) (undo-tree-id35872 . -115) (undo-tree-id35873 . -115) (undo-tree-id35874 . -115) (undo-tree-id35875 . -115) (undo-tree-id35876 . -115) (undo-tree-id35877 . -115) (undo-tree-id35878 . -115) (undo-tree-id35879 . -115) (undo-tree-id35880 . -115) (undo-tree-id35881 . -115) (undo-tree-id35882 . -115) (undo-tree-id35883 . -115) (undo-tree-id35884 . -115) (undo-tree-id35885 . -115) (undo-tree-id35886 . -115) (undo-tree-id35887 . -115) (undo-tree-id35888 . -115) (undo-tree-id35889 . -115) (undo-tree-id35890 . -115) (undo-tree-id35891 . -115) (undo-tree-id35892 . -115) (undo-tree-id35893 . -115) (undo-tree-id35894 . -115) (undo-tree-id35895 . -115) (undo-tree-id35896 . -115) (undo-tree-id35897 . -115) (undo-tree-id35898 . -115) (undo-tree-id35899 . -115) (undo-tree-id35900 . -115) (undo-tree-id35901 . -115) (undo-tree-id35902 . -115) (undo-tree-id35903 . -115) (undo-tree-id35904 . -115) (undo-tree-id35905 . -115) (undo-tree-id35906 . -115) (undo-tree-id35907 . -115) (undo-tree-id35908 . -115) (undo-tree-id35909 . -115) (undo-tree-id35910 . -115) (undo-tree-id35911 . -115) (undo-tree-id35912 . -115) (undo-tree-id35913 . -115) (undo-tree-id35914 . -115) (undo-tree-id35915 . -115) (undo-tree-id35916 . -115) (undo-tree-id35917 . -115) (undo-tree-id35918 . -115) (undo-tree-id35919 . -115) (undo-tree-id35920 . -115) (undo-tree-id35921 . -115) (undo-tree-id35922 . -115) (undo-tree-id35923 . -115) (undo-tree-id35924 . -115) (undo-tree-id35925 . -115) (undo-tree-id35926 . -115) (undo-tree-id35927 . -115) (undo-tree-id35928 . -115) (undo-tree-id35929 . -115) (undo-tree-id35930 . -115) (undo-tree-id35931 . -115) (undo-tree-id35932 . -115) (undo-tree-id35933 . -115) (undo-tree-id35934 . -115) (undo-tree-id35935 . -115) (undo-tree-id35936 . -115) (undo-tree-id35937 . -115) (undo-tree-id35938 . -115) (undo-tree-id35939 . -115) (undo-tree-id35940 . -115) (undo-tree-id35941 . -115) (undo-tree-id35942 . -115) (undo-tree-id35943 . -115) (undo-tree-id35944 . -115) (undo-tree-id35945 . -115) (undo-tree-id35946 . -115) (undo-tree-id35947 . -115) (undo-tree-id35948 . -115) (undo-tree-id35949 . -115) (undo-tree-id35950 . -115) (undo-tree-id35951 . -115) (undo-tree-id35952 . -115) (undo-tree-id35953 . -115) (undo-tree-id35954 . -115) (undo-tree-id35955 . -115) (undo-tree-id35956 . -115) (undo-tree-id35957 . -115) (undo-tree-id35958 . -115) (undo-tree-id35959 . -115) (undo-tree-id35960 . -115) (undo-tree-id35961 . -115) (undo-tree-id35962 . -115) (undo-tree-id35963 . -115) (undo-tree-id35964 . -115) (undo-tree-id35965 . -115) (undo-tree-id35966 . -115) (undo-tree-id35967 . -115) (undo-tree-id35968 . -115) (undo-tree-id35969 . -115) (undo-tree-id35970 . -115) (undo-tree-id35971 . -115) (undo-tree-id35972 . -115) (undo-tree-id35973 . -115) (undo-tree-id35974 . -115) (undo-tree-id35975 . -115) (undo-tree-id35976 . -115) (undo-tree-id35977 . -115) (undo-tree-id35978 . -115) (undo-tree-id35979 . -115) (undo-tree-id35980 . -115) (undo-tree-id35981 . -115) (undo-tree-id35982 . -115) (undo-tree-id35983 . -115) (undo-tree-id35984 . -115) (undo-tree-id35985 . -115) (undo-tree-id35986 . -115) (undo-tree-id35987 . -115) (undo-tree-id35988 . -115) (undo-tree-id35989 . -115) (undo-tree-id35990 . -115) (undo-tree-id35991 . -115) (undo-tree-id35992 . -115) (undo-tree-id35993 . -115) (undo-tree-id35994 . -115) (undo-tree-id35995 . -115) (undo-tree-id35996 . -115) (undo-tree-id35997 . -115) (undo-tree-id35998 . -115) (undo-tree-id35999 . -115) (undo-tree-id36000 . -115) (undo-tree-id36001 . -115) (undo-tree-id36002 . -115) (undo-tree-id36003 . -115) (undo-tree-id36004 . -115) (undo-tree-id36005 . -115) (undo-tree-id36006 . -115) (undo-tree-id36007 . -115) (undo-tree-id36008 . -115) (undo-tree-id36009 . -115) (undo-tree-id36010 . -115) (undo-tree-id36011 . -115) (undo-tree-id36012 . -115) (undo-tree-id36013 . -115) (undo-tree-id36014 . -115) (undo-tree-id36015 . -115) (undo-tree-id36016 . -115) (undo-tree-id36017 . -115) (undo-tree-id36018 . -115) (undo-tree-id36019 . -115) (undo-tree-id36020 . -115) (undo-tree-id36021 . -115) (undo-tree-id36022 . -115) (undo-tree-id36023 . -115) (undo-tree-id36024 . -115) (undo-tree-id36025 . -115) (undo-tree-id36026 . -115) (undo-tree-id36027 . -115) (undo-tree-id36028 . -115) (undo-tree-id36029 . -115) (undo-tree-id36030 . -115) (undo-tree-id36031 . -115) (undo-tree-id36032 . -115) (undo-tree-id36033 . -115) (undo-tree-id36034 . -115) (undo-tree-id36035 . -115) (undo-tree-id36036 . -115) (undo-tree-id36037 . -115) (undo-tree-id36038 . -115) (undo-tree-id36039 . -115) (undo-tree-id36040 . -115) (undo-tree-id36041 . -115) (undo-tree-id36042 . -115) (undo-tree-id36043 . -115) (undo-tree-id36044 . -115) (undo-tree-id36045 . -115) (undo-tree-id36046 . -115) (undo-tree-id36047 . -115) (undo-tree-id36048 . -115) (undo-tree-id36049 . -115) (undo-tree-id36050 . -116) (undo-tree-id36051 . -116) (undo-tree-id36052 . -116) (undo-tree-id36053 . -116) (undo-tree-id36054 . -116) (undo-tree-id36055 . -116) (undo-tree-id36056 . -116) (undo-tree-id36057 . -116) (undo-tree-id36058 . -116) (undo-tree-id36059 . -116) (undo-tree-id36060 . -116) (undo-tree-id36061 . -116) (undo-tree-id36062 . -116) (undo-tree-id36063 . -116) (undo-tree-id36064 . -116) (undo-tree-id36065 . -116) (undo-tree-id36066 . -116) (undo-tree-id36067 . -116) (undo-tree-id36068 . -116) (undo-tree-id36069 . -116) (undo-tree-id36070 . -116) (undo-tree-id36071 . -116) (undo-tree-id36072 . -116) (undo-tree-id36073 . -117) (undo-tree-id36074 . -117) (undo-tree-id36075 . -117) (undo-tree-id36076 . -117) (undo-tree-id36077 . -117) (undo-tree-id36078 . -117) (undo-tree-id36079 . -117) (undo-tree-id36080 . -117) (undo-tree-id36081 . -117) (undo-tree-id36082 . -117) (undo-tree-id36083 . -117) (undo-tree-id36084 . -117) (undo-tree-id36085 . -117) (undo-tree-id36086 . -117) (undo-tree-id36087 . -117) (undo-tree-id36088 . -117) (undo-tree-id36089 . -117) (undo-tree-id36090 . -117) (undo-tree-id36091 . -117) (undo-tree-id36092 . -117) (undo-tree-id36093 . -117) (undo-tree-id36094 . -117) (undo-tree-id36095 . -117) (undo-tree-id36096 . -116) (undo-tree-id36097 . -116) (undo-tree-id36098 . -116) (undo-tree-id36099 . -116) (undo-tree-id36100 . -116) (undo-tree-id36101 . -116) (undo-tree-id36102 . -116) (undo-tree-id36103 . -116) (undo-tree-id36104 . -116) (undo-tree-id36105 . -116) (undo-tree-id36106 . -116) (undo-tree-id36107 . -116) (undo-tree-id36108 . -116) (undo-tree-id36109 . -116) (undo-tree-id36110 . -116) (undo-tree-id36111 . -116) (undo-tree-id36112 . -116) (undo-tree-id36113 . -116) (undo-tree-id36114 . -116) (undo-tree-id36115 . -116) (undo-tree-id36116 . -116) (undo-tree-id36117 . -116) (undo-tree-id36118 . -116) (undo-tree-id36119 . -116) (undo-tree-id36120 . -116) (undo-tree-id36121 . -116) (undo-tree-id36122 . -117) (undo-tree-id36123 . -117) (undo-tree-id36124 . -117) (undo-tree-id36125 . -117) (undo-tree-id36126 . -117) (undo-tree-id36127 . -117) (undo-tree-id36128 . -117) (undo-tree-id36129 . -117) (undo-tree-id36130 . -117) (undo-tree-id36131 . -117) (undo-tree-id36132 . -117) (undo-tree-id36133 . -117) (undo-tree-id36134 . -117) (undo-tree-id36135 . -117) (undo-tree-id36136 . -117) (undo-tree-id36137 . -117) (undo-tree-id36138 . -117) (undo-tree-id36139 . -117) (undo-tree-id36140 . -117) (undo-tree-id36141 . -117) (undo-tree-id36142 . -117) (undo-tree-id36143 . -117) (undo-tree-id36144 . -117) (undo-tree-id36145 . -117) (undo-tree-id36146 . -117) (undo-tree-id36147 . -117) (undo-tree-id36148 . -117) (undo-tree-id36149 . -117) (undo-tree-id36150 . -117) (undo-tree-id36151 . -117) (undo-tree-id36152 . -117) (undo-tree-id36153 . -117) (undo-tree-id36154 . -117) (undo-tree-id36155 . -117) (undo-tree-id36156 . -117) (undo-tree-id36157 . -117) (undo-tree-id36158 . -117) (undo-tree-id36159 . -117) (undo-tree-id36160 . -117) (undo-tree-id36161 . -117) (undo-tree-id36162 . -117) (undo-tree-id36163 . -117) (undo-tree-id36164 . -117) (undo-tree-id36165 . -117) (undo-tree-id36166 . -117) (undo-tree-id36167 . -117) (undo-tree-id36168 . -117) (undo-tree-id36169 . -117) (undo-tree-id36170 . -117) (undo-tree-id36171 . -117) (undo-tree-id36172 . -117) (undo-tree-id36173 . -117) (undo-tree-id36174 . -117) (undo-tree-id36175 . -117) (undo-tree-id36176 . -117) (undo-tree-id36177 . -117) (undo-tree-id36178 . -117) (undo-tree-id36179 . -117) (undo-tree-id36180 . -117) (undo-tree-id36181 . -141) (undo-tree-id36182 . -141) (undo-tree-id36183 . -141) (undo-tree-id36184 . -141) (undo-tree-id36185 . -141) (undo-tree-id36186 . -141) (undo-tree-id36187 . -141) (undo-tree-id36188 . -141) (undo-tree-id36189 . -141) (undo-tree-id36190 . -141) (undo-tree-id36191 . -141) (undo-tree-id36192 . -141) (undo-tree-id36193 . -141) (undo-tree-id36194 . -141) (undo-tree-id36195 . -141) (undo-tree-id36196 . -141) (undo-tree-id36197 . -141) (undo-tree-id36198 . -141) (undo-tree-id36199 . -141) (undo-tree-id36200 . -141) (undo-tree-id36201 . -141) (undo-tree-id36202 . -141) (undo-tree-id36203 . -141) (undo-tree-id36204 . -141) (undo-tree-id36205 . -141) (undo-tree-id36206 . -141) (undo-tree-id36207 . -141) (undo-tree-id36208 . -141) (undo-tree-id36209 . -141) (undo-tree-id36210 . -141) (undo-tree-id36211 . -141) (undo-tree-id36212 . -141) (undo-tree-id36213 . -141) (undo-tree-id36214 . -141) (undo-tree-id36215 . -141) (undo-tree-id36216 . -141) (undo-tree-id36217 . -141) (undo-tree-id36218 . -141) (undo-tree-id36219 . -141) (undo-tree-id36220 . -141) (undo-tree-id36221 . -141) (undo-tree-id36222 . -141) (undo-tree-id36223 . -141) (undo-tree-id36224 . -141) (undo-tree-id36225 . -141) (undo-tree-id36226 . -141) (undo-tree-id36227 . -141) (undo-tree-id36228 . -141) (undo-tree-id36229 . -141) (undo-tree-id36230 . -141) (undo-tree-id36231 . -141) (undo-tree-id36232 . -142) (undo-tree-id36233 . -142) (undo-tree-id36234 . -142) (undo-tree-id36235 . -142) (undo-tree-id36236 . -142) (undo-tree-id36237 . -142) (undo-tree-id36238 . -142) (undo-tree-id36239 . -142) (undo-tree-id36240 . -142) (undo-tree-id36241 . -142) (undo-tree-id36242 . -142) (undo-tree-id36243 . -142) (undo-tree-id36244 . -142) (undo-tree-id36245 . -142) (undo-tree-id36246 . -142) (undo-tree-id36247 . -142) (undo-tree-id36248 . -142) (undo-tree-id36249 . -142) (undo-tree-id36250 . -142) (undo-tree-id36251 . -142) (undo-tree-id36252 . -142) (undo-tree-id36253 . -142) (undo-tree-id36254 . -142) (undo-tree-id36255 . -142) (undo-tree-id36256 . -142) (undo-tree-id36257 . -142) (undo-tree-id36258 . -142) (undo-tree-id36259 . -142) (undo-tree-id36260 . -142) (undo-tree-id36261 . -142) (undo-tree-id36262 . -142) (undo-tree-id36263 . -142) (undo-tree-id36264 . -142) (undo-tree-id36265 . -142) (undo-tree-id36266 . -142) (undo-tree-id36267 . -142) (undo-tree-id36268 . -142) (undo-tree-id36269 . -142) (undo-tree-id36270 . -142) (undo-tree-id36271 . -142) (undo-tree-id36272 . -142) (undo-tree-id36273 . -142) (undo-tree-id36274 . -142) (undo-tree-id36275 . -142) (undo-tree-id36276 . -142) (undo-tree-id36277 . -142) (undo-tree-id36278 . -142) (undo-tree-id36279 . -142) (undo-tree-id36280 . -142) (undo-tree-id36281 . -142) (undo-tree-id36282 . -142) (undo-tree-id36283 . -142) (undo-tree-id36284 . -142) (undo-tree-id36285 . -142) (undo-tree-id36286 . -142) (undo-tree-id36287 . -142) (undo-tree-id36288 . -142) (undo-tree-id36289 . -142) (undo-tree-id36290 . -142) (undo-tree-id36291 . -142) (undo-tree-id36292 . -142) (undo-tree-id36293 . -142) (undo-tree-id36294 . -142) (undo-tree-id36295 . -142) (undo-tree-id36296 . -142) (undo-tree-id36297 . -142) (undo-tree-id36298 . -142) (undo-tree-id36299 . -142) (undo-tree-id36300 . -142) (undo-tree-id36301 . -142) (undo-tree-id36302 . -142) (undo-tree-id36303 . -142) (undo-tree-id36304 . -142) (undo-tree-id36305 . -142) (undo-tree-id36306 . -142) (undo-tree-id36307 . -142) (undo-tree-id36308 . -142) (undo-tree-id36309 . -142) (undo-tree-id36310 . -142) (undo-tree-id36311 . -142) (undo-tree-id36312 . -142) (undo-tree-id36313 . -142) (undo-tree-id36314 . -142) (undo-tree-id36315 . -142) (undo-tree-id36316 . -142) (undo-tree-id36317 . -142) (undo-tree-id36318 . -142) (undo-tree-id36319 . -142) (undo-tree-id36320 . -142) (undo-tree-id36321 . -142) (undo-tree-id36322 . -142) (undo-tree-id36323 . -142) (undo-tree-id36324 . -142) (undo-tree-id36325 . -142) (undo-tree-id36326 . -142) (undo-tree-id36327 . -142) (undo-tree-id36328 . -142) (undo-tree-id36329 . -142) (undo-tree-id36330 . -142) (undo-tree-id36331 . -142) (undo-tree-id36332 . -142) (undo-tree-id36333 . -142) (undo-tree-id36334 . -142) (undo-tree-id36335 . -142) (undo-tree-id36336 . -142) (undo-tree-id36337 . -142) (undo-tree-id36338 . 1) (undo-tree-id36339 . -142) (undo-tree-id36340 . 26) (undo-tree-id36341 . -117) (undo-tree-id36342 . -142) (undo-tree-id36343 . -142) (undo-tree-id36344 . -142) (undo-tree-id36345 . -142) (undo-tree-id36346 . -142) (undo-tree-id36347 . -142) (undo-tree-id36348 . -142) (undo-tree-id36349 . -142) (undo-tree-id36350 . -142) (undo-tree-id36351 . -142) (undo-tree-id36352 . -142) (undo-tree-id36353 . -142) (undo-tree-id36354 . -142) (undo-tree-id36355 . -142) (undo-tree-id36356 . -142) (undo-tree-id36357 . -142) (undo-tree-id36358 . -142) (undo-tree-id36359 . -142) (undo-tree-id36360 . -142) (undo-tree-id36361 . -142) (undo-tree-id36362 . -142) (undo-tree-id36363 . -142) (undo-tree-id36364 . -142) (undo-tree-id36365 . -46) (6816 . 6862) (#("but it will output 10 values instead of 1. " 0 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 29 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6912) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6912) (undo-tree-id36366 . -1) (undo-tree-id36367 . -1) (undo-tree-id36368 . -1) (undo-tree-id36369 . -1) (undo-tree-id36370 . -1) (undo-tree-id36371 . -1) (undo-tree-id36372 . -1) (undo-tree-id36373 . -1) (undo-tree-id36374 . -1) (undo-tree-id36375 . -1) (undo-tree-id36376 . -1) (undo-tree-id36377 . -1) (undo-tree-id36378 . -1) (undo-tree-id36379 . -1) (undo-tree-id36380 . -1) (undo-tree-id36381 . -1) (undo-tree-id36382 . -1) (undo-tree-id36383 . -1) (undo-tree-id36384 . -1) (undo-tree-id36385 . -1) (undo-tree-id36386 . -1) (undo-tree-id36387 . -1) (undo-tree-id36388 . -1) (undo-tree-id36389 . -1) (undo-tree-id36390 . -1) (undo-tree-id36391 . -1) (undo-tree-id36392 . -1) (undo-tree-id36393 . -1) (undo-tree-id36394 . -1) (undo-tree-id36395 . -1) (undo-tree-id36396 . -1) (undo-tree-id36397 . -1) (undo-tree-id36398 . -1) (undo-tree-id36399 . -1) (undo-tree-id36400 . -1) (undo-tree-id36401 . -1) (undo-tree-id36402 . -1) (undo-tree-id36403 . -1) (undo-tree-id36404 . -1) (undo-tree-id36405 . -1) (undo-tree-id36406 . -1) (undo-tree-id36407 . -1) (undo-tree-id36408 . -1) (undo-tree-id36409 . -1) (undo-tree-id36410 . -1) (undo-tree-id36411 . -1) (undo-tree-id36412 . -1) (undo-tree-id36413 . -1) (undo-tree-id36414 . -1) (undo-tree-id36415 . -1) (undo-tree-id36416 . -1) (undo-tree-id36417 . -1) (undo-tree-id36418 . -1) (undo-tree-id36419 . -1) (undo-tree-id36420 . -1) (undo-tree-id36421 . -1) (undo-tree-id36422 . -1) (undo-tree-id36423 . -1) (undo-tree-id36424 . -1) (undo-tree-id36425 . -1) (undo-tree-id36426 . -1) (undo-tree-id36427 . -1) (undo-tree-id36428 . -1) (undo-tree-id36429 . -1) (undo-tree-id36430 . -1) (undo-tree-id36431 . -1) (undo-tree-id36432 . -1) (undo-tree-id36433 . -1) (undo-tree-id36434 . -1) (undo-tree-id36435 . -1) (undo-tree-id36436 . -1) (undo-tree-id36437 . -1) (undo-tree-id36438 . -1) (undo-tree-id36439 . -1) (undo-tree-id36440 . -1) (undo-tree-id36441 . -1) (undo-tree-id36442 . -1) (undo-tree-id36443 . -1) (undo-tree-id36444 . -1) (undo-tree-id36445 . -1) (undo-tree-id36446 . -1) (undo-tree-id36447 . -1) (undo-tree-id36448 . -1) (undo-tree-id36449 . -1) (undo-tree-id36450 . -1) (undo-tree-id36451 . -1) (undo-tree-id36452 . -1) (undo-tree-id36453 . -1) (undo-tree-id36454 . -1) (undo-tree-id36455 . -1) (undo-tree-id36456 . -1) (undo-tree-id36457 . -1) (undo-tree-id36458 . -1) (undo-tree-id36459 . -1) (undo-tree-id36460 . -1) (undo-tree-id36461 . -1) (undo-tree-id36462 . -1) (undo-tree-id36463 . -1) (undo-tree-id36464 . -1) (undo-tree-id36465 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6913) (undo-tree-id36466 . -1) (undo-tree-id36467 . -1) (undo-tree-id36468 . -1) (undo-tree-id36469 . -1) (undo-tree-id36470 . -1) (undo-tree-id36471 . -1) (undo-tree-id36472 . -1) (undo-tree-id36473 . -1) (undo-tree-id36474 . -1) (undo-tree-id36475 . -1) (undo-tree-id36476 . -1) (undo-tree-id36477 . -1) (undo-tree-id36478 . -1) (undo-tree-id36479 . -1) (undo-tree-id36480 . -1) (undo-tree-id36481 . -1) (undo-tree-id36482 . -1) 6914 (6913 . 6914)) nil (25772 51514 47723 209000) 0 nil])
([nil nil ((#("but " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6915) (undo-tree-id35231 . -3) (undo-tree-id35232 . 4) (undo-tree-id35233 . -4)) nil (25772 51514 46649 51000) 0 nil])
([nil nil ((6915 . 6916) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6915)) nil (25772 51514 46646 418000) 0 nil])
([nil nil ((6915 . 6916) (#("I" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6915)) nil (25772 51514 46645 53000) 0 nil])
([nil nil ((6915 . 6916) (#("I" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6915) (undo-tree-id35230 . 1)) nil (25772 51514 46644 10000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 7277) (undo-tree-id35229 . -9)) nil (25772 51514 46642 393000) 0 nil])
([nil nil ((#("+begin_src python :result outputs" 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t)) . 7279) (undo-tree-id35228 . -32)) nil (25772 51514 46640 937000) 0 nil])
([nil nil ((7300 . 7303) (7279 . 7300)) nil (25772 51514 46639 482000) 0 nil])
([nil nil ((7302 . 7303)) nil (25772 51514 46638 641000) 0 nil])
([nil nil ((#("This model works nicely and is much better than the linear model. 
To do better, we can train it to forecast the next 10 values at
each and every time step. 

The advantage of this technique is that the loss will contain a term for the
output of the RNN at each and every time step. This means there will be many
more error gradients flowing through the model, and they won't have to flow only
through time; they will also flow from the output of each time step.

This will both stabilize and speed up training.

At time step 0 the model will output a vector containing the
forecasts for time steps 1 to 10, 

Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
" 0 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 67 131 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 131 158 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 158 159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 159 236 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 236 313 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 313 394 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 394 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 463 464 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 464 489 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 489 512 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 512 513 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 513 574 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 574 609 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 609 610 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 610 686 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7906) (undo-tree-id35224 . -685) (undo-tree-id35225 . -610) (undo-tree-id35226 . -610) (undo-tree-id35227 . -610) 8516) nil (25772 51514 46637 695000) 0 nil])
([nil nil ((6958 . 6959) (6955 . 6958) 6955) nil (25772 51514 46634 427000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6958 . 6959) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7644) (6958 . 7645) 6956) nil (25772 51514 46633 200000) 0 nil])
([nil nil ((6955 . 6957)) nil (25772 51514 46632 54000) 0 nil])
([nil nil ((7559 . 7560) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7559) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7559) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7560) (7525 . 7526) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7525) (7464 . 7465) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7464) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7464) (7416 . 7417) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7416) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7416) (7347 . 7348) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7347) (7266 . 7267) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7266) (7189 . 7190) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7189) (7112 . 7113) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7112) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7112) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7113) (7086 . 7087) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7086) (7022 . 7023) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7022) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7023) (6956 . 6957) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -6956) (undo-tree-id35221 . 1) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6956) (undo-tree-id35222 . 2) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6957) (undo-tree-id35223 . 1) 6956) nil (25772 51514 46627 370000) 0 nil])
([nil nil ((#("This model works nicely and is much better than the linear model. To do better" 0 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 78 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6957) (undo-tree-id35219 . -77) (undo-tree-id35220 . 78)) nil (25772 51514 46618 810000) 0 nil])
([nil nil ((6962 . 6970) (6959 . 6962) (6957 . 6959) (#("N" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6957) (undo-tree-id35205 . -1) (undo-tree-id35206 . -1) (undo-tree-id35207 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6958) (undo-tree-id35208 . -1) (undo-tree-id35209 . -1) (undo-tree-id35210 . -1) (#("x" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6959) (undo-tree-id35211 . -1) (undo-tree-id35212 . -1) (undo-tree-id35213 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6960) (undo-tree-id35214 . -1) (undo-tree-id35215 . -1) 6961 (6958 . 6961) (#("O" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6958) (undo-tree-id35216 . -1) (undo-tree-id35217 . -1) (undo-tree-id35218 . -1) 6959 (6957 . 6959)) nil (25772 51514 46614 790000) 0 nil])
([nil nil ((#("we can " 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6972) (undo-tree-id35201 . -6) (undo-tree-id35202 . -6) (undo-tree-id35203 . -6) (undo-tree-id35204 . -6) 6978) nil (25772 51514 46603 127000) 0 nil])
([nil nil ((6955 . 7564) (#("- The advantage of this technique is that the loss will contain a term for the output of the RNN at each and every time step. This means there will be many more error gradients flowing through the model, and they won't have to flow only through time; they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- Alternatively, train it to forecast the next 10 values at each and every time step" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 78 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 78 79 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 79 155 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 155 156 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 156 236 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 236 237 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 237 305 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 305 306 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 306 331 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 331 339 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 339 344 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 344 353 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 353 354 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 354 409 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 409 414 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 414 415 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 415 416 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 416 417 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 417 418 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 418 419 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 419 420 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 420 421 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 421 422 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 422 448 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 448 449 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 449 524 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 524 525 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 525 526 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 526 532 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 532 540 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 540 584 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 584 585 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 585 609 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6955) (undo-tree-id34987 . -542) (undo-tree-id34988 . -542) (undo-tree-id34989 . 69) (undo-tree-id34990 . -542) (undo-tree-id34991 . -542) (undo-tree-id34992 . 67) (undo-tree-id34993 . -529) (undo-tree-id34994 . -532) (undo-tree-id34995 . -609) (undo-tree-id34996 . -549) (undo-tree-id34997 . -552) (undo-tree-id34998 . -552) (undo-tree-id34999 . -552) (undo-tree-id35000 . -552) (undo-tree-id35001 . -552) (undo-tree-id35002 . -561) (undo-tree-id35003 . -561) (undo-tree-id35004 . -561) (undo-tree-id35005 . -561) (undo-tree-id35006 . -561) (undo-tree-id35007 . -561) (undo-tree-id35008 . -561) (undo-tree-id35009 . -561) (undo-tree-id35010 . -561) (undo-tree-id35011 . -561) (undo-tree-id35012 . -561) (undo-tree-id35013 . -561) (undo-tree-id35014 . -561) (undo-tree-id35015 . -561) (undo-tree-id35016 . -561) (undo-tree-id35017 . -565) (undo-tree-id35018 . -565) (undo-tree-id35019 . -565) (undo-tree-id35020 . -565) (undo-tree-id35021 . -565) (undo-tree-id35022 . -565) (undo-tree-id35023 . -565) (undo-tree-id35024 . -565) (undo-tree-id35025 . -565) (undo-tree-id35026 . -565) (undo-tree-id35027 . -565) (undo-tree-id35028 . -565) (undo-tree-id35029 . -565) (undo-tree-id35030 . -565) (undo-tree-id35031 . -565) (undo-tree-id35032 . -570) (undo-tree-id35033 . -570) (undo-tree-id35034 . -570) (undo-tree-id35035 . -570) (undo-tree-id35036 . -570) (undo-tree-id35037 . -570) (undo-tree-id35038 . -570) (undo-tree-id35039 . -570) (undo-tree-id35040 . -573) (undo-tree-id35041 . -573) (undo-tree-id35042 . -573) (undo-tree-id35043 . -573) (undo-tree-id35044 . -573) (undo-tree-id35045 . -573) (undo-tree-id35046 . -573) (undo-tree-id35047 . -573) (undo-tree-id35048 . -580) (undo-tree-id35049 . -580) (undo-tree-id35050 . -580) (undo-tree-id35051 . -580) (undo-tree-id35052 . -580) (undo-tree-id35053 . -580) (undo-tree-id35054 . -580) (undo-tree-id35055 . -580) (undo-tree-id35056 . -583) (undo-tree-id35057 . -583) (undo-tree-id35058 . -583) (undo-tree-id35059 . -583) (undo-tree-id35060 . -583) (undo-tree-id35061 . -583) (undo-tree-id35062 . -583) (undo-tree-id35063 . -583) (undo-tree-id35064 . -588) (undo-tree-id35065 . -588) (undo-tree-id35066 . -588) (undo-tree-id35067 . -588) (undo-tree-id35068 . -588) (undo-tree-id35069 . -588) (undo-tree-id35070 . -588) (undo-tree-id35071 . -588) (undo-tree-id35072 . -592) (undo-tree-id35073 . -592) (undo-tree-id35074 . -592) (undo-tree-id35075 . -592) (undo-tree-id35076 . -592) (undo-tree-id35077 . -592) (undo-tree-id35078 . -592) (undo-tree-id35079 . -592) (undo-tree-id35080 . -598) (undo-tree-id35081 . -598) (undo-tree-id35082 . -598) (undo-tree-id35083 . -598) (undo-tree-id35084 . -598) (undo-tree-id35085 . -598) (undo-tree-id35086 . -598) (undo-tree-id35087 . -598) (undo-tree-id35088 . -603) (undo-tree-id35089 . -603) (undo-tree-id35090 . -603) (undo-tree-id35091 . -603) (undo-tree-id35092 . -603) (undo-tree-id35093 . -603) (undo-tree-id35094 . -603) (undo-tree-id35095 . -603) (undo-tree-id35096 . -608) (undo-tree-id35097 . -608) (undo-tree-id35098 . -608) (undo-tree-id35099 . -608) (undo-tree-id35100 . -608) (undo-tree-id35101 . -608) (undo-tree-id35102 . -608) (undo-tree-id35103 . -608) (undo-tree-id35104 . -608) (undo-tree-id35105 . -608) (undo-tree-id35106 . -608) (undo-tree-id35107 . -608) (undo-tree-id35108 . -608) (undo-tree-id35109 . -608) (undo-tree-id35110 . -608) (undo-tree-id35111 . -609) (undo-tree-id35112 . -609) (undo-tree-id35113 . -609) (undo-tree-id35114 . -609) (undo-tree-id35115 . -609) (undo-tree-id35116 . -609) (undo-tree-id35117 . -609) (undo-tree-id35118 . -609) (undo-tree-id35119 . -609) (undo-tree-id35120 . -609) (undo-tree-id35121 . -609) (undo-tree-id35122 . -609) (undo-tree-id35123 . -609) (undo-tree-id35124 . -609) (undo-tree-id35125 . -609) (undo-tree-id35126 . -609) (undo-tree-id35127 . -609) (undo-tree-id35128 . -609) (undo-tree-id35129 . -609) (undo-tree-id35130 . -609) (undo-tree-id35131 . -609) (undo-tree-id35132 . -609) (undo-tree-id35133 . -609) (undo-tree-id35134 . -609) (undo-tree-id35135 . -609) (undo-tree-id35136 . -609) (undo-tree-id35137 . -609) (undo-tree-id35138 . -609) (undo-tree-id35139 . -609) (undo-tree-id35140 . -609) (undo-tree-id35141 . -609) (undo-tree-id35142 . -609) (undo-tree-id35143 . -609) (undo-tree-id35144 . -609) (undo-tree-id35145 . -609) (undo-tree-id35146 . -609) (undo-tree-id35147 . -609) (undo-tree-id35148 . -609) (undo-tree-id35149 . -609) (undo-tree-id35150 . -609) (undo-tree-id35151 . -609) (undo-tree-id35152 . -609) (undo-tree-id35153 . -609) (undo-tree-id35154 . -609) (undo-tree-id35155 . -609) (undo-tree-id35156 . -609) (undo-tree-id35157 . -609) (undo-tree-id35158 . -609) (undo-tree-id35159 . -609) (undo-tree-id35160 . -609) (undo-tree-id35161 . -609) (undo-tree-id35162 . -609) (undo-tree-id35163 . -609) (undo-tree-id35164 . -609) (undo-tree-id35165 . -609) (undo-tree-id35166 . -609) (undo-tree-id35167 . -609) (undo-tree-id35168 . -609) (undo-tree-id35169 . -609) (undo-tree-id35170 . -609) (undo-tree-id35171 . -609) (undo-tree-id35172 . -609) (undo-tree-id35173 . -609) (undo-tree-id35174 . -525) (6955 . 7480) (#(" The advantage of this technique is that the loss will contain a term for the output of the RNN at each and every time step. This means there will be many more error gradients flowing through the model, and they won't have to flow only through time; they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 78 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 78 154 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 154 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 155 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 235 236 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 236 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 304 305 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 305 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 330 338 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 338 343 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 343 352 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 352 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 353 408 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 408 413 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 413 414 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 414 415 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 415 416 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 416 417 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 417 418 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 418 419 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 419 420 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 420 421 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 421 447 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 447 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 448 523 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7039) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7039) (undo-tree-id35175 . -1) (undo-tree-id35176 . -1) (undo-tree-id35177 . -1) (undo-tree-id35178 . -1) (undo-tree-id35179 . -1) (undo-tree-id35180 . -1) (undo-tree-id35181 . -1) (undo-tree-id35182 . -1) (undo-tree-id35183 . -1) (undo-tree-id35184 . -1) (undo-tree-id35185 . -1) (undo-tree-id35186 . -1) (undo-tree-id35187 . -1) (undo-tree-id35188 . -1) (undo-tree-id35189 . -1) (undo-tree-id35190 . -1) (undo-tree-id35191 . -1) (undo-tree-id35192 . -1) (undo-tree-id35193 . -1) (undo-tree-id35194 . -1) (undo-tree-id35195 . -1) (undo-tree-id35196 . -1) (undo-tree-id35197 . -1) (undo-tree-id35198 . -1) (undo-tree-id35199 . -1) (undo-tree-id35200 . -1) 7040) nil (25772 51514 46586 361000) 0 nil])
([nil nil ((#("The " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38165 . -3) (undo-tree-id38166 . 4) (undo-tree-id38167 . -4) (t 25772 51514 109381 760000)) nil (25772 51552 450192 765000) 0 nil])
([nil nil ((#("advantage " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38162 . -9) (undo-tree-id38163 . 10) (undo-tree-id38164 . -10)) nil (25772 51552 450190 176000) 0 nil])
([nil nil ((#("of " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38159 . -2) (undo-tree-id38160 . 3) (undo-tree-id38161 . -3)) nil (25772 51552 450187 376000) 0 nil])
([nil nil ((#("this " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38156 . -4) (undo-tree-id38157 . 5) (undo-tree-id38158 . -5)) nil (25772 51552 450184 643000) 0 nil])
([nil nil ((#("technique " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38153 . -9) (undo-tree-id38154 . 10) (undo-tree-id38155 . -10)) nil (25772 51552 450181 821000) 0 nil])
([nil nil ((#("is " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38150 . -2) (undo-tree-id38151 . 3) (undo-tree-id38152 . -3)) nil (25772 51552 450179 244000) 0 nil])
([nil nil ((#("that " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042) (undo-tree-id38147 . -4) (undo-tree-id38148 . 5) (undo-tree-id38149 . -5)) nil (25772 51552 450176 656000) 0 nil])
([nil nil ((7042 . 7043) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7042)) nil (25772 51552 450174 6000) 0 nil])
([nil nil ((7040 . 7526) (#("- This means there will be many more error gradients flowing through the model, and they won't have to flow only through time; they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- The loss will contain a term for the output of the RNN at each and every time step." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 31 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 31 32 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 32 112 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 112 113 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 113 181 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 181 182 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 182 207 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 207 215 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 215 220 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 220 229 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 229 230 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 230 285 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 285 290 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 290 291 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 291 292 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 292 293 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 293 294 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 294 295 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 295 296 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 296 297 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 297 298 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 298 324 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 324 325 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 325 380 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 380 390 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 390 393 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 393 398 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 398 400 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 400 401 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 401 402 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 402 403 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 403 439 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 439 440 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 440 486 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7040) (undo-tree-id37527 . -403) (undo-tree-id37528 . -403) (undo-tree-id37529 . 83) (undo-tree-id37530 . -403) (undo-tree-id37531 . -403) (undo-tree-id37532 . 82) (undo-tree-id37533 . -402) (undo-tree-id37534 . -486) (undo-tree-id37535 . -402) (undo-tree-id37536 . -402) (undo-tree-id37537 . -402) (undo-tree-id37538 . -402) (undo-tree-id37539 . -402) (undo-tree-id37540 . -402) (undo-tree-id37541 . -402) (undo-tree-id37542 . -402) (undo-tree-id37543 . -402) (undo-tree-id37544 . -402) (undo-tree-id37545 . -402) (undo-tree-id37546 . -402) (undo-tree-id37547 . -402) (undo-tree-id37548 . -402) (undo-tree-id37549 . -402) (undo-tree-id37550 . -402) (undo-tree-id37551 . -402) (undo-tree-id37552 . -402) (undo-tree-id37553 . -402) (undo-tree-id37554 . -402) (undo-tree-id37555 . -402) (undo-tree-id37556 . -402) (undo-tree-id37557 . -402) (undo-tree-id37558 . -402) (undo-tree-id37559 . -402) (undo-tree-id37560 . -402) (undo-tree-id37561 . -402) (undo-tree-id37562 . -402) (undo-tree-id37563 . -402) (undo-tree-id37564 . -402) (undo-tree-id37565 . -402) (undo-tree-id37566 . -402) (undo-tree-id37567 . -403) (undo-tree-id37568 . -403) (undo-tree-id37569 . -403) (undo-tree-id37570 . -403) (undo-tree-id37571 . -403) (undo-tree-id37572 . -403) (undo-tree-id37573 . -403) (undo-tree-id37574 . -403) (undo-tree-id37575 . -403) (undo-tree-id37576 . -403) (undo-tree-id37577 . -403) (undo-tree-id37578 . -403) (undo-tree-id37579 . -403) (undo-tree-id37580 . -403) (undo-tree-id37581 . -403) (undo-tree-id37582 . -403) (undo-tree-id37583 . -403) (undo-tree-id37584 . -403) (undo-tree-id37585 . -403) (undo-tree-id37586 . -403) (undo-tree-id37587 . -403) (undo-tree-id37588 . -403) (undo-tree-id37589 . -403) (undo-tree-id37590 . -403) (undo-tree-id37591 . -403) (undo-tree-id37592 . -403) (undo-tree-id37593 . -403) (undo-tree-id37594 . -403) (undo-tree-id37595 . -403) (undo-tree-id37596 . -403) (undo-tree-id37597 . -403) (undo-tree-id37598 . -403) (undo-tree-id37599 . -403) (undo-tree-id37600 . -403) (undo-tree-id37601 . -403) (undo-tree-id37602 . -403) (undo-tree-id37603 . -403) (undo-tree-id37604 . -403) (undo-tree-id37605 . -403) (undo-tree-id37606 . -403) (undo-tree-id37607 . -403) (undo-tree-id37608 . -403) (undo-tree-id37609 . -403) (undo-tree-id37610 . -403) (undo-tree-id37611 . -403) (undo-tree-id37612 . -403) (undo-tree-id37613 . -403) (undo-tree-id37614 . -403) (undo-tree-id37615 . -403) (undo-tree-id37616 . -403) (undo-tree-id37617 . -403) (undo-tree-id37618 . -403) (undo-tree-id37619 . -403) (undo-tree-id37620 . -403) (undo-tree-id37621 . -403) (undo-tree-id37622 . -403) (undo-tree-id37623 . -403) (undo-tree-id37624 . -403) (undo-tree-id37625 . -403) (undo-tree-id37626 . -403) (undo-tree-id37627 . -403) (undo-tree-id37628 . -403) (undo-tree-id37629 . -403) (undo-tree-id37630 . -403) (undo-tree-id37631 . -403) (undo-tree-id37632 . -403) (undo-tree-id37633 . -403) (undo-tree-id37634 . -403) (undo-tree-id37635 . -403) (undo-tree-id37636 . -403) (undo-tree-id37637 . -403) (undo-tree-id37638 . -403) (undo-tree-id37639 . -403) (undo-tree-id37640 . -403) (undo-tree-id37641 . -403) (undo-tree-id37642 . -403) (undo-tree-id37643 . -403) (undo-tree-id37644 . -403) (undo-tree-id37645 . -403) (undo-tree-id37646 . -403) (undo-tree-id37647 . -403) (undo-tree-id37648 . -403) (undo-tree-id37649 . -403) (undo-tree-id37650 . -403) (undo-tree-id37651 . -403) (undo-tree-id37652 . -403) (undo-tree-id37653 . -403) (undo-tree-id37654 . -403) (undo-tree-id37655 . -403) (undo-tree-id37656 . -403) (undo-tree-id37657 . -403) (undo-tree-id37658 . -403) (undo-tree-id37659 . -403) (undo-tree-id37660 . -403) (undo-tree-id37661 . -403) (undo-tree-id37662 . -403) (undo-tree-id37663 . -403) (undo-tree-id37664 . -403) (undo-tree-id37665 . -403) (undo-tree-id37666 . -403) (undo-tree-id37667 . -403) (undo-tree-id37668 . -403) (undo-tree-id37669 . -403) (undo-tree-id37670 . -403) (undo-tree-id37671 . -403) (undo-tree-id37672 . -403) (undo-tree-id37673 . -403) (undo-tree-id37674 . -403) (undo-tree-id37675 . -403) (undo-tree-id37676 . -403) (undo-tree-id37677 . -403) (undo-tree-id37678 . -403) (undo-tree-id37679 . -403) (undo-tree-id37680 . -403) (undo-tree-id37681 . -403) (undo-tree-id37682 . -403) (undo-tree-id37683 . -403) (undo-tree-id37684 . -403) (undo-tree-id37685 . -403) (undo-tree-id37686 . -403) (undo-tree-id37687 . -403) (undo-tree-id37688 . -403) (undo-tree-id37689 . -403) (undo-tree-id37690 . -403) (undo-tree-id37691 . -403) (undo-tree-id37692 . -403) (undo-tree-id37693 . -403) (undo-tree-id37694 . -403) (undo-tree-id37695 . -403) (undo-tree-id37696 . -403) (undo-tree-id37697 . -403) (undo-tree-id37698 . -403) (undo-tree-id37699 . -403) (undo-tree-id37700 . -403) (undo-tree-id37701 . -403) (undo-tree-id37702 . -403) (undo-tree-id37703 . -403) (undo-tree-id37704 . -403) (undo-tree-id37705 . -403) (undo-tree-id37706 . -403) (undo-tree-id37707 . -403) (undo-tree-id37708 . -403) (undo-tree-id37709 . -403) (undo-tree-id37710 . -403) (undo-tree-id37711 . -403) (undo-tree-id37712 . -403) (undo-tree-id37713 . -403) (undo-tree-id37714 . -403) (undo-tree-id37715 . -403) (undo-tree-id37716 . -403) (undo-tree-id37717 . -403) (undo-tree-id37718 . -403) (undo-tree-id37719 . -403) (undo-tree-id37720 . -403) (undo-tree-id37721 . -403) (undo-tree-id37722 . -403) (undo-tree-id37723 . -403) (undo-tree-id37724 . -403) (undo-tree-id37725 . -403) (undo-tree-id37726 . -403) (undo-tree-id37727 . -403) (undo-tree-id37728 . -403) (undo-tree-id37729 . -403) (undo-tree-id37730 . -403) (undo-tree-id37731 . -403) (undo-tree-id37732 . -403) (undo-tree-id37733 . -403) (undo-tree-id37734 . -403) (undo-tree-id37735 . -403) (undo-tree-id37736 . -403) (undo-tree-id37737 . -403) (undo-tree-id37738 . -403) (undo-tree-id37739 . -403) (undo-tree-id37740 . -403) (undo-tree-id37741 . -403) (undo-tree-id37742 . -403) (undo-tree-id37743 . -403) (undo-tree-id37744 . -403) (undo-tree-id37745 . -403) (undo-tree-id37746 . -403) (undo-tree-id37747 . -403) (undo-tree-id37748 . -403) (undo-tree-id37749 . -403) (undo-tree-id37750 . -403) (undo-tree-id37751 . -403) (undo-tree-id37752 . -403) (undo-tree-id37753 . -403) (undo-tree-id37754 . -403) (undo-tree-id37755 . -403) (undo-tree-id37756 . -403) (undo-tree-id37757 . -403) (undo-tree-id37758 . -403) (undo-tree-id37759 . -403) (undo-tree-id37760 . -403) (undo-tree-id37761 . -403) (undo-tree-id37762 . -403) (undo-tree-id37763 . -403) (undo-tree-id37764 . -403) (undo-tree-id37765 . -403) (undo-tree-id37766 . -403) (undo-tree-id37767 . -403) (undo-tree-id37768 . -403) (undo-tree-id37769 . -403) (undo-tree-id37770 . -403) (undo-tree-id37771 . -403) (undo-tree-id37772 . -403) (undo-tree-id37773 . -403) (undo-tree-id37774 . -403) (undo-tree-id37775 . -403) (undo-tree-id37776 . -403) (undo-tree-id37777 . -403) (undo-tree-id37778 . -403) (undo-tree-id37779 . -403) (undo-tree-id37780 . -403) (undo-tree-id37781 . -403) (undo-tree-id37782 . -403) (undo-tree-id37783 . -403) (undo-tree-id37784 . -403) (undo-tree-id37785 . -403) (undo-tree-id37786 . -403) (undo-tree-id37787 . -403) (undo-tree-id37788 . -403) (undo-tree-id37789 . -403) (undo-tree-id37790 . -403) (undo-tree-id37791 . -403) (undo-tree-id37792 . -403) (undo-tree-id37793 . -403) (undo-tree-id37794 . -403) (undo-tree-id37795 . -403) (undo-tree-id37796 . -403) (undo-tree-id37797 . -403) (undo-tree-id37798 . -403) (undo-tree-id37799 . -403) (undo-tree-id37800 . -403) (undo-tree-id37801 . -403) (undo-tree-id37802 . -403) (undo-tree-id37803 . -403) (undo-tree-id37804 . -403) (undo-tree-id37805 . -403) (undo-tree-id37806 . -403) (undo-tree-id37807 . -403) (undo-tree-id37808 . -403) (undo-tree-id37809 . -403) (undo-tree-id37810 . -403) (undo-tree-id37811 . -403) (undo-tree-id37812 . -403) (undo-tree-id37813 . -403) (undo-tree-id37814 . -403) (undo-tree-id37815 . -403) (undo-tree-id37816 . -403) (undo-tree-id37817 . -403) (undo-tree-id37818 . -403) (undo-tree-id37819 . -403) (undo-tree-id37820 . -403) (undo-tree-id37821 . -403) (undo-tree-id37822 . -403) (undo-tree-id37823 . -403) (undo-tree-id37824 . -403) (undo-tree-id37825 . -403) (undo-tree-id37826 . -403) (undo-tree-id37827 . -405) (undo-tree-id37828 . -405) (undo-tree-id37829 . -405) (undo-tree-id37830 . -405) (undo-tree-id37831 . -405) (undo-tree-id37832 . -405) (undo-tree-id37833 . -405) (undo-tree-id37834 . -405) (undo-tree-id37835 . -405) (undo-tree-id37836 . -405) (undo-tree-id37837 . -405) (undo-tree-id37838 . -405) (undo-tree-id37839 . -405) (undo-tree-id37840 . -405) (undo-tree-id37841 . -405) (undo-tree-id37842 . -410) (undo-tree-id37843 . -410) (undo-tree-id37844 . -410) (undo-tree-id37845 . -410) (undo-tree-id37846 . -410) (undo-tree-id37847 . -410) (undo-tree-id37848 . -410) (undo-tree-id37849 . -410) (undo-tree-id37850 . -410) (undo-tree-id37851 . -410) (undo-tree-id37852 . -410) (undo-tree-id37853 . -410) (undo-tree-id37854 . -410) (undo-tree-id37855 . -410) (undo-tree-id37856 . -410) (undo-tree-id37857 . -415) (undo-tree-id37858 . -415) (undo-tree-id37859 . -415) (undo-tree-id37860 . -415) (undo-tree-id37861 . -415) (undo-tree-id37862 . -415) (undo-tree-id37863 . -415) (undo-tree-id37864 . -415) (undo-tree-id37865 . -415) (undo-tree-id37866 . -415) (undo-tree-id37867 . -415) (undo-tree-id37868 . -415) (undo-tree-id37869 . -415) (undo-tree-id37870 . -415) (undo-tree-id37871 . -415) (undo-tree-id37872 . -423) (undo-tree-id37873 . -423) (undo-tree-id37874 . -423) (undo-tree-id37875 . -423) (undo-tree-id37876 . -423) (undo-tree-id37877 . -423) (undo-tree-id37878 . -423) (undo-tree-id37879 . -423) (undo-tree-id37880 . -423) (undo-tree-id37881 . -423) (undo-tree-id37882 . -423) (undo-tree-id37883 . -423) (undo-tree-id37884 . -423) (undo-tree-id37885 . -423) (undo-tree-id37886 . -423) (undo-tree-id37887 . -425) (undo-tree-id37888 . -425) (undo-tree-id37889 . -425) (undo-tree-id37890 . -425) (undo-tree-id37891 . -425) (undo-tree-id37892 . -425) (undo-tree-id37893 . -425) (undo-tree-id37894 . -425) (undo-tree-id37895 . -425) (undo-tree-id37896 . -425) (undo-tree-id37897 . -425) (undo-tree-id37898 . -425) (undo-tree-id37899 . -425) (undo-tree-id37900 . -425) (undo-tree-id37901 . -425) (undo-tree-id37902 . -430) (undo-tree-id37903 . -430) (undo-tree-id37904 . -430) (undo-tree-id37905 . -430) (undo-tree-id37906 . -430) (undo-tree-id37907 . -430) (undo-tree-id37908 . -430) (undo-tree-id37909 . -430) (undo-tree-id37910 . -430) (undo-tree-id37911 . -430) (undo-tree-id37912 . -430) (undo-tree-id37913 . -430) (undo-tree-id37914 . -430) (undo-tree-id37915 . -430) (undo-tree-id37916 . -430) (undo-tree-id37917 . -434) (undo-tree-id37918 . -434) (undo-tree-id37919 . -434) (undo-tree-id37920 . -434) (undo-tree-id37921 . -434) (undo-tree-id37922 . -434) (undo-tree-id37923 . -434) (undo-tree-id37924 . -434) (undo-tree-id37925 . -434) (undo-tree-id37926 . -434) (undo-tree-id37927 . -434) (undo-tree-id37928 . -434) (undo-tree-id37929 . -434) (undo-tree-id37930 . -434) (undo-tree-id37931 . -434) (undo-tree-id37932 . -438) (undo-tree-id37933 . -438) (undo-tree-id37934 . -438) (undo-tree-id37935 . -438) (undo-tree-id37936 . -438) (undo-tree-id37937 . -438) (undo-tree-id37938 . -438) (undo-tree-id37939 . -438) (undo-tree-id37940 . -438) (undo-tree-id37941 . -438) (undo-tree-id37942 . -438) (undo-tree-id37943 . -438) (undo-tree-id37944 . -438) (undo-tree-id37945 . -438) (undo-tree-id37946 . -438) (undo-tree-id37947 . -445) (undo-tree-id37948 . -445) (undo-tree-id37949 . -445) (undo-tree-id37950 . -445) (undo-tree-id37951 . -445) (undo-tree-id37952 . -445) (undo-tree-id37953 . -445) (undo-tree-id37954 . -445) (undo-tree-id37955 . -445) (undo-tree-id37956 . -445) (undo-tree-id37957 . -445) (undo-tree-id37958 . -445) (undo-tree-id37959 . -445) (undo-tree-id37960 . -445) (undo-tree-id37961 . -445) (undo-tree-id37962 . -448) (undo-tree-id37963 . -448) (undo-tree-id37964 . -448) (undo-tree-id37965 . -448) (undo-tree-id37966 . -448) (undo-tree-id37967 . -448) (undo-tree-id37968 . -448) (undo-tree-id37969 . -448) (undo-tree-id37970 . -448) (undo-tree-id37971 . -448) (undo-tree-id37972 . -448) (undo-tree-id37973 . -448) (undo-tree-id37974 . -448) (undo-tree-id37975 . -448) (undo-tree-id37976 . -448) (undo-tree-id37977 . -452) (undo-tree-id37978 . -452) (undo-tree-id37979 . -452) (undo-tree-id37980 . -452) (undo-tree-id37981 . -452) (undo-tree-id37982 . -452) (undo-tree-id37983 . -452) (undo-tree-id37984 . -452) (undo-tree-id37985 . -452) (undo-tree-id37986 . -452) (undo-tree-id37987 . -452) (undo-tree-id37988 . -452) (undo-tree-id37989 . -452) (undo-tree-id37990 . -452) (undo-tree-id37991 . -452) (undo-tree-id37992 . 32) (undo-tree-id37993 . -457) (undo-tree-id37994 . -456) (undo-tree-id37995 . -456) (undo-tree-id37996 . -456) (undo-tree-id37997 . -456) (undo-tree-id37998 . -456) (undo-tree-id37999 . -456) (undo-tree-id38000 . -456) (undo-tree-id38001 . -456) (undo-tree-id38002 . -456) (undo-tree-id38003 . -456) (undo-tree-id38004 . -456) (undo-tree-id38005 . -456) (undo-tree-id38006 . -456) (undo-tree-id38007 . -456) (undo-tree-id38008 . -456) (undo-tree-id38009 . -459) (undo-tree-id38010 . -459) (undo-tree-id38011 . -459) (undo-tree-id38012 . -459) (undo-tree-id38013 . -459) (undo-tree-id38014 . -459) (undo-tree-id38015 . -459) (undo-tree-id38016 . -459) (undo-tree-id38017 . -459) (undo-tree-id38018 . -459) (undo-tree-id38019 . -459) (undo-tree-id38020 . -459) (undo-tree-id38021 . -459) (undo-tree-id38022 . -459) (undo-tree-id38023 . -459) (undo-tree-id38024 . -459) (undo-tree-id38025 . -459) (undo-tree-id38026 . -459) (undo-tree-id38027 . -459) (undo-tree-id38028 . -459) (undo-tree-id38029 . -459) (undo-tree-id38030 . -459) (undo-tree-id38031 . -464) (undo-tree-id38032 . -464) (undo-tree-id38033 . -464) (undo-tree-id38034 . -464) (undo-tree-id38035 . -464) (undo-tree-id38036 . -464) (undo-tree-id38037 . -464) (undo-tree-id38038 . -464) (undo-tree-id38039 . -464) (undo-tree-id38040 . -464) (undo-tree-id38041 . -464) (undo-tree-id38042 . -464) (undo-tree-id38043 . -464) (undo-tree-id38044 . -464) (undo-tree-id38045 . -464) (undo-tree-id38046 . -468) (undo-tree-id38047 . -468) (undo-tree-id38048 . -468) (undo-tree-id38049 . -468) (undo-tree-id38050 . -468) (undo-tree-id38051 . -468) (undo-tree-id38052 . -468) (undo-tree-id38053 . -468) (undo-tree-id38054 . -468) (undo-tree-id38055 . -468) (undo-tree-id38056 . -468) (undo-tree-id38057 . -468) (undo-tree-id38058 . -468) (undo-tree-id38059 . -468) (undo-tree-id38060 . -468) (undo-tree-id38061 . -468) (undo-tree-id38062 . -468) (undo-tree-id38063 . -468) (undo-tree-id38064 . -468) (undo-tree-id38065 . -468) (undo-tree-id38066 . -468) (undo-tree-id38067 . -468) (undo-tree-id38068 . -474) (undo-tree-id38069 . -474) (undo-tree-id38070 . -474) (undo-tree-id38071 . -474) (undo-tree-id38072 . -474) (undo-tree-id38073 . -474) (undo-tree-id38074 . -474) (undo-tree-id38075 . -474) (undo-tree-id38076 . -474) (undo-tree-id38077 . -474) (undo-tree-id38078 . -474) (undo-tree-id38079 . -474) (undo-tree-id38080 . -474) (undo-tree-id38081 . -474) (undo-tree-id38082 . -474) (undo-tree-id38083 . -479) (undo-tree-id38084 . -479) (undo-tree-id38085 . -479) (undo-tree-id38086 . -479) (undo-tree-id38087 . -479) (undo-tree-id38088 . -479) (undo-tree-id38089 . -479) (undo-tree-id38090 . -479) (undo-tree-id38091 . -479) (undo-tree-id38092 . -479) (undo-tree-id38093 . -479) (undo-tree-id38094 . -479) (undo-tree-id38095 . -479) (undo-tree-id38096 . -479) (undo-tree-id38097 . -479) (undo-tree-id38098 . -484) (undo-tree-id38099 . -484) (undo-tree-id38100 . -484) (undo-tree-id38101 . -484) (undo-tree-id38102 . -484) (undo-tree-id38103 . -484) (undo-tree-id38104 . -484) (undo-tree-id38105 . -484) (undo-tree-id38106 . -484) (undo-tree-id38107 . -484) (undo-tree-id38108 . -484) (undo-tree-id38109 . -484) (undo-tree-id38110 . -484) (undo-tree-id38111 . -484) (undo-tree-id38112 . -484) (undo-tree-id38113 . -485) (undo-tree-id38114 . -485) (undo-tree-id38115 . -485) (undo-tree-id38116 . -485) (undo-tree-id38117 . -485) (undo-tree-id38118 . -485) (undo-tree-id38119 . -485) (undo-tree-id38120 . -485) (undo-tree-id38121 . -485) (undo-tree-id38122 . -485) (undo-tree-id38123 . -485) (undo-tree-id38124 . -485) (undo-tree-id38125 . -485) (undo-tree-id38126 . -485) (undo-tree-id38127 . -485) (undo-tree-id38128 . -486) (undo-tree-id38129 . -486) (undo-tree-id38130 . -486) (undo-tree-id38131 . -486) (undo-tree-id38132 . -486) (undo-tree-id38133 . -486) (undo-tree-id38134 . -486) (undo-tree-id38135 . -486) (undo-tree-id38136 . -486) (undo-tree-id38137 . -486) (undo-tree-id38138 . -486) (undo-tree-id38139 . -486) (undo-tree-id38140 . -486) (undo-tree-id38141 . -486) (undo-tree-id38142 . -486) (undo-tree-id38143 . -486) (undo-tree-id38144 . -486) (undo-tree-id38145 . -486) (undo-tree-id38146 . -401) (7040 . 7441) (#(" This means there will be many more error gradients flowing through the model, and they won't have to flow only through time; they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 30 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 111 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 111 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 112 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 180 181 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 181 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 206 214 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 214 219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 219 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 228 229 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 229 284 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 284 289 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 289 290 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 290 291 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 291 292 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 292 293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 293 294 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 294 295 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 295 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 297 323 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 323 324 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 324 379 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 379 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 389 392 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 392 397 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 397 399 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7125)) nil (25772 51552 450155 432000) 0 nil])
([nil nil ((#("This means there will be " 0 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7128) (undo-tree-id37351 . -24) (undo-tree-id37352 . 25) (undo-tree-id37353 . -24) (undo-tree-id37354 . -24) (undo-tree-id37355 . -25) (undo-tree-id37356 . -24) (undo-tree-id37357 . -3) (undo-tree-id37358 . -3) (undo-tree-id37359 . -3) (undo-tree-id37360 . -3) (undo-tree-id37361 . -3) (undo-tree-id37362 . -3) (undo-tree-id37363 . -3) (undo-tree-id37364 . -3) (undo-tree-id37365 . -3) (undo-tree-id37366 . -3) (undo-tree-id37367 . -3) (undo-tree-id37368 . -3) (undo-tree-id37369 . -3) (undo-tree-id37370 . -3) (undo-tree-id37371 . -3) (undo-tree-id37372 . -3) (undo-tree-id37373 . -3) (undo-tree-id37374 . -3) (undo-tree-id37375 . -3) (undo-tree-id37376 . -3) (undo-tree-id37377 . -3) (undo-tree-id37378 . -3) (undo-tree-id37379 . -9) (undo-tree-id37380 . -9) (undo-tree-id37381 . -9) (undo-tree-id37382 . -9) (undo-tree-id37383 . -9) (undo-tree-id37384 . -9) (undo-tree-id37385 . -9) (undo-tree-id37386 . -9) (undo-tree-id37387 . -9) (undo-tree-id37388 . -9) (undo-tree-id37389 . -9) (undo-tree-id37390 . -9) (undo-tree-id37391 . -9) (undo-tree-id37392 . -9) (undo-tree-id37393 . -9) (undo-tree-id37394 . -9) (undo-tree-id37395 . -9) (undo-tree-id37396 . -9) (undo-tree-id37397 . -9) (undo-tree-id37398 . -9) (undo-tree-id37399 . -9) (undo-tree-id37400 . -9) (undo-tree-id37401 . -15) (undo-tree-id37402 . -15) (undo-tree-id37403 . -15) (undo-tree-id37404 . -15) (undo-tree-id37405 . -15) (undo-tree-id37406 . -15) (undo-tree-id37407 . -15) (undo-tree-id37408 . -15) (undo-tree-id37409 . -15) (undo-tree-id37410 . -15) (undo-tree-id37411 . -15) (undo-tree-id37412 . -15) (undo-tree-id37413 . -15) (undo-tree-id37414 . -15) (undo-tree-id37415 . -15) (undo-tree-id37416 . -15) (undo-tree-id37417 . -15) (undo-tree-id37418 . -15) (undo-tree-id37419 . -15) (undo-tree-id37420 . -15) (undo-tree-id37421 . -15) (undo-tree-id37422 . -15) (undo-tree-id37423 . -20) (undo-tree-id37424 . -20) (undo-tree-id37425 . -20) (undo-tree-id37426 . -20) (undo-tree-id37427 . -20) (undo-tree-id37428 . -20) (undo-tree-id37429 . -20) (undo-tree-id37430 . -20) (undo-tree-id37431 . -20) (undo-tree-id37432 . -20) (undo-tree-id37433 . -20) (undo-tree-id37434 . -20) (undo-tree-id37435 . -20) (undo-tree-id37436 . -20) (undo-tree-id37437 . -20) (undo-tree-id37438 . -20) (undo-tree-id37439 . -20) (undo-tree-id37440 . -20) (undo-tree-id37441 . -20) (undo-tree-id37442 . -20) (undo-tree-id37443 . -20) (undo-tree-id37444 . -20) (undo-tree-id37445 . -20) (undo-tree-id37446 . -20) (undo-tree-id37447 . -20) (undo-tree-id37448 . -20) (undo-tree-id37449 . -20) (undo-tree-id37450 . -20) (undo-tree-id37451 . -20) (undo-tree-id37452 . -23) (undo-tree-id37453 . -23) (undo-tree-id37454 . -23) (undo-tree-id37455 . -23) (undo-tree-id37456 . -23) (undo-tree-id37457 . -23) (undo-tree-id37458 . -23) (undo-tree-id37459 . -23) (undo-tree-id37460 . -23) (undo-tree-id37461 . -23) (undo-tree-id37462 . -23) (undo-tree-id37463 . -23) (undo-tree-id37464 . -23) (undo-tree-id37465 . -23) (undo-tree-id37466 . -23) (undo-tree-id37467 . -23) (undo-tree-id37468 . -23) (undo-tree-id37469 . -23) (undo-tree-id37470 . -23) (undo-tree-id37471 . -23) (undo-tree-id37472 . -23) (undo-tree-id37473 . -23) (undo-tree-id37474 . -25) (undo-tree-id37475 . -25) (undo-tree-id37476 . -25) (undo-tree-id37477 . -25) (undo-tree-id37478 . -25) (undo-tree-id37479 . -25) (undo-tree-id37480 . -25) (undo-tree-id37481 . -25) (undo-tree-id37482 . -25) (undo-tree-id37483 . -25) (undo-tree-id37484 . -25) (undo-tree-id37485 . -25) (undo-tree-id37486 . -25) (undo-tree-id37487 . -25) (undo-tree-id37488 . -25) (undo-tree-id37489 . -25) (undo-tree-id37490 . -25) (undo-tree-id37491 . -25) (undo-tree-id37492 . -25) (undo-tree-id37493 . -25) (undo-tree-id37494 . -25) (undo-tree-id37495 . -25) (undo-tree-id37496 . -24) (undo-tree-id37497 . -24) (undo-tree-id37498 . -24) (undo-tree-id37499 . -24) (undo-tree-id37500 . -24) (undo-tree-id37501 . -24) (undo-tree-id37502 . -24) (undo-tree-id37503 . -24) (undo-tree-id37504 . -24) (undo-tree-id37505 . -24) (undo-tree-id37506 . -24) (undo-tree-id37507 . -24) (undo-tree-id37508 . -24) (undo-tree-id37509 . -24) (undo-tree-id37510 . -24) (undo-tree-id37511 . -24) (undo-tree-id37512 . -24) (undo-tree-id37513 . -24) (undo-tree-id37514 . -24) (undo-tree-id37515 . -24) (undo-tree-id37516 . -24) (undo-tree-id37517 . -24) (undo-tree-id37518 . -24) (undo-tree-id37519 . -24) (undo-tree-id37520 . -24) (undo-tree-id37521 . -24) (undo-tree-id37522 . -24) (undo-tree-id37523 . -24) (undo-tree-id37524 . -24) (undo-tree-id37525 . -24) (undo-tree-id37526 . -25) 7152) nil (25772 51552 449802 15000) 0 nil])
([nil nil ((7128 . 7129) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7128)) nil (25772 51552 449700 489000) 0 nil])
([nil nil ((7126 . 7502) (#("- and they won't have to flow only through time; they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- Many more error gradients flowing through the model" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 34 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 34 35 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 35 103 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 103 104 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 104 129 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 129 137 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 137 142 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 142 151 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 151 152 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 152 207 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 207 212 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 212 213 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 213 214 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 214 215 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 215 216 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 216 217 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 217 218 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 218 219 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 219 220 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 220 246 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 246 247 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 247 302 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 302 312 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 312 315 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 315 320 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 320 322 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 322 323 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 323 324 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 324 325 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 325 329 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 329 330 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 330 376 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7126) (undo-tree-id36746 . -376) (undo-tree-id36747 . -376) (undo-tree-id36748 . 51) (undo-tree-id36749 . -325) (undo-tree-id36750 . -325) (undo-tree-id36751 . 50) (undo-tree-id36752 . -376) (undo-tree-id36753 . -325) (undo-tree-id36754 . -325) (undo-tree-id36755 . -325) (undo-tree-id36756 . -325) (undo-tree-id36757 . -325) (undo-tree-id36758 . -325) (undo-tree-id36759 . -325) (undo-tree-id36760 . -325) (undo-tree-id36761 . -325) (undo-tree-id36762 . -325) (undo-tree-id36763 . -325) (undo-tree-id36764 . -325) (undo-tree-id36765 . -325) (undo-tree-id36766 . -325) (undo-tree-id36767 . -325) (undo-tree-id36768 . -325) (undo-tree-id36769 . -324) (undo-tree-id36770 . -324) (undo-tree-id36771 . -324) (undo-tree-id36772 . -324) (undo-tree-id36773 . -324) (undo-tree-id36774 . -324) (undo-tree-id36775 . -324) (undo-tree-id36776 . -324) (undo-tree-id36777 . -324) (undo-tree-id36778 . -324) (undo-tree-id36779 . -324) (undo-tree-id36780 . -324) (undo-tree-id36781 . -324) (undo-tree-id36782 . -324) (undo-tree-id36783 . -324) (undo-tree-id36784 . -324) (undo-tree-id36785 . -324) (undo-tree-id36786 . -324) (undo-tree-id36787 . -324) (undo-tree-id36788 . -324) (undo-tree-id36789 . -324) (undo-tree-id36790 . -324) (undo-tree-id36791 . -324) (undo-tree-id36792 . -324) (undo-tree-id36793 . -324) (undo-tree-id36794 . -324) (undo-tree-id36795 . -325) (undo-tree-id36796 . -325) (undo-tree-id36797 . -325) (undo-tree-id36798 . -325) (undo-tree-id36799 . -325) (undo-tree-id36800 . -325) (undo-tree-id36801 . -325) (undo-tree-id36802 . -325) (undo-tree-id36803 . -325) (undo-tree-id36804 . -325) (undo-tree-id36805 . -325) (undo-tree-id36806 . -325) (undo-tree-id36807 . -325) (undo-tree-id36808 . -325) (undo-tree-id36809 . -325) (undo-tree-id36810 . -325) (undo-tree-id36811 . -325) (undo-tree-id36812 . -325) (undo-tree-id36813 . -325) (undo-tree-id36814 . -325) (undo-tree-id36815 . -325) (undo-tree-id36816 . -325) (undo-tree-id36817 . -325) (undo-tree-id36818 . -325) (undo-tree-id36819 . -325) (undo-tree-id36820 . -325) (undo-tree-id36821 . -325) (undo-tree-id36822 . -325) (undo-tree-id36823 . -325) (undo-tree-id36824 . -325) (undo-tree-id36825 . -325) (undo-tree-id36826 . -325) (undo-tree-id36827 . -325) (undo-tree-id36828 . -325) (undo-tree-id36829 . -325) (undo-tree-id36830 . -325) (undo-tree-id36831 . -325) (undo-tree-id36832 . -325) (undo-tree-id36833 . -325) (undo-tree-id36834 . -325) (undo-tree-id36835 . -325) (undo-tree-id36836 . -325) (undo-tree-id36837 . -325) (undo-tree-id36838 . -325) (undo-tree-id36839 . -325) (undo-tree-id36840 . -325) (undo-tree-id36841 . -325) (undo-tree-id36842 . -325) (undo-tree-id36843 . -325) (undo-tree-id36844 . -325) (undo-tree-id36845 . -325) (undo-tree-id36846 . -325) (undo-tree-id36847 . -325) (undo-tree-id36848 . -325) (undo-tree-id36849 . -325) (undo-tree-id36850 . -325) (undo-tree-id36851 . -325) (undo-tree-id36852 . -325) (undo-tree-id36853 . -325) (undo-tree-id36854 . -325) (undo-tree-id36855 . -325) (undo-tree-id36856 . -325) (undo-tree-id36857 . -325) (undo-tree-id36858 . -325) (undo-tree-id36859 . -325) (undo-tree-id36860 . -325) (undo-tree-id36861 . -325) (undo-tree-id36862 . -325) (undo-tree-id36863 . -325) (undo-tree-id36864 . -325) (undo-tree-id36865 . -325) (undo-tree-id36866 . -325) (undo-tree-id36867 . -325) (undo-tree-id36868 . -325) (undo-tree-id36869 . -325) (undo-tree-id36870 . -325) (undo-tree-id36871 . -325) (undo-tree-id36872 . -325) (undo-tree-id36873 . -325) (undo-tree-id36874 . -325) (undo-tree-id36875 . -325) (undo-tree-id36876 . -325) (undo-tree-id36877 . -325) (undo-tree-id36878 . -325) (undo-tree-id36879 . -325) (undo-tree-id36880 . -325) (undo-tree-id36881 . -325) (undo-tree-id36882 . -325) (undo-tree-id36883 . -325) (undo-tree-id36884 . -325) (undo-tree-id36885 . -325) (undo-tree-id36886 . -325) (undo-tree-id36887 . -325) (undo-tree-id36888 . -325) (undo-tree-id36889 . -325) (undo-tree-id36890 . -325) (undo-tree-id36891 . -325) (undo-tree-id36892 . -325) (undo-tree-id36893 . -325) (undo-tree-id36894 . -325) (undo-tree-id36895 . -325) (undo-tree-id36896 . -325) (undo-tree-id36897 . -325) (undo-tree-id36898 . -325) (undo-tree-id36899 . -325) (undo-tree-id36900 . -325) (undo-tree-id36901 . -325) (undo-tree-id36902 . -325) (undo-tree-id36903 . -325) (undo-tree-id36904 . -325) (undo-tree-id36905 . -325) (undo-tree-id36906 . -325) (undo-tree-id36907 . -325) (undo-tree-id36908 . -325) (undo-tree-id36909 . -325) (undo-tree-id36910 . -325) (undo-tree-id36911 . -325) (undo-tree-id36912 . -325) (undo-tree-id36913 . -325) (undo-tree-id36914 . -325) (undo-tree-id36915 . -325) (undo-tree-id36916 . -325) (undo-tree-id36917 . -325) (undo-tree-id36918 . -325) (undo-tree-id36919 . -325) (undo-tree-id36920 . -325) (undo-tree-id36921 . -325) (undo-tree-id36922 . -325) (undo-tree-id36923 . -325) (undo-tree-id36924 . -325) (undo-tree-id36925 . -325) (undo-tree-id36926 . -325) (undo-tree-id36927 . -325) (undo-tree-id36928 . -325) (undo-tree-id36929 . -325) (undo-tree-id36930 . -325) (undo-tree-id36931 . -325) (undo-tree-id36932 . -325) (undo-tree-id36933 . -325) (undo-tree-id36934 . -325) (undo-tree-id36935 . -325) (undo-tree-id36936 . -325) (undo-tree-id36937 . -325) (undo-tree-id36938 . -325) (undo-tree-id36939 . -325) (undo-tree-id36940 . -325) (undo-tree-id36941 . -325) (undo-tree-id36942 . -325) (undo-tree-id36943 . -325) (undo-tree-id36944 . -325) (undo-tree-id36945 . -325) (undo-tree-id36946 . -325) (undo-tree-id36947 . -325) (undo-tree-id36948 . -325) (undo-tree-id36949 . -325) (undo-tree-id36950 . -325) (undo-tree-id36951 . -325) (undo-tree-id36952 . -325) (undo-tree-id36953 . -325) (undo-tree-id36954 . -325) (undo-tree-id36955 . -325) (undo-tree-id36956 . -325) (undo-tree-id36957 . -325) (undo-tree-id36958 . -328) (undo-tree-id36959 . -328) (undo-tree-id36960 . -328) (undo-tree-id36961 . -328) (undo-tree-id36962 . -328) (undo-tree-id36963 . -328) (undo-tree-id36964 . -328) (undo-tree-id36965 . -328) (undo-tree-id36966 . -328) (undo-tree-id36967 . -328) (undo-tree-id36968 . -328) (undo-tree-id36969 . -328) (undo-tree-id36970 . -328) (undo-tree-id36971 . -328) (undo-tree-id36972 . -328) (undo-tree-id36973 . -328) (undo-tree-id36974 . -328) (undo-tree-id36975 . -328) (undo-tree-id36976 . -328) (undo-tree-id36977 . -328) (undo-tree-id36978 . -328) (undo-tree-id36979 . -328) (undo-tree-id36980 . -327) (undo-tree-id36981 . -327) (undo-tree-id36982 . -327) (undo-tree-id36983 . -327) (undo-tree-id36984 . -327) (undo-tree-id36985 . -327) (undo-tree-id36986 . -327) (undo-tree-id36987 . -327) (undo-tree-id36988 . -327) (undo-tree-id36989 . -327) (undo-tree-id36990 . -327) (undo-tree-id36991 . -327) (undo-tree-id36992 . -327) (undo-tree-id36993 . -327) (undo-tree-id36994 . -327) (undo-tree-id36995 . -327) (undo-tree-id36996 . -327) (undo-tree-id36997 . -327) (undo-tree-id36998 . -327) (undo-tree-id36999 . -327) (undo-tree-id37000 . -327) (undo-tree-id37001 . -327) (undo-tree-id37002 . -326) (undo-tree-id37003 . -326) (undo-tree-id37004 . -326) (undo-tree-id37005 . -326) (undo-tree-id37006 . -326) (undo-tree-id37007 . -326) (undo-tree-id37008 . -326) (undo-tree-id37009 . -326) (undo-tree-id37010 . -326) (undo-tree-id37011 . -326) (undo-tree-id37012 . -326) (undo-tree-id37013 . -326) (undo-tree-id37014 . -326) (undo-tree-id37015 . -326) (undo-tree-id37016 . -326) (undo-tree-id37017 . -326) (undo-tree-id37018 . -326) (undo-tree-id37019 . -326) (undo-tree-id37020 . -326) (undo-tree-id37021 . -326) (undo-tree-id37022 . -326) (undo-tree-id37023 . -326) (undo-tree-id37024 . -325) (undo-tree-id37025 . -325) (undo-tree-id37026 . -325) (undo-tree-id37027 . -325) (undo-tree-id37028 . -325) (undo-tree-id37029 . -325) (undo-tree-id37030 . -325) (undo-tree-id37031 . -325) (undo-tree-id37032 . -325) (undo-tree-id37033 . -325) (undo-tree-id37034 . -325) (undo-tree-id37035 . -325) (undo-tree-id37036 . -325) (undo-tree-id37037 . -325) (undo-tree-id37038 . -325) (undo-tree-id37039 . -325) (undo-tree-id37040 . -325) (undo-tree-id37041 . -325) (undo-tree-id37042 . -325) (undo-tree-id37043 . -325) (undo-tree-id37044 . -325) (undo-tree-id37045 . -325) (undo-tree-id37046 . -325) (undo-tree-id37047 . -325) (undo-tree-id37048 . -325) (undo-tree-id37049 . -325) (undo-tree-id37050 . -325) (undo-tree-id37051 . -325) (undo-tree-id37052 . -325) (undo-tree-id37053 . -325) (undo-tree-id37054 . -325) (undo-tree-id37055 . -325) (undo-tree-id37056 . -325) (undo-tree-id37057 . -325) (undo-tree-id37058 . -325) (undo-tree-id37059 . -325) (undo-tree-id37060 . -325) (undo-tree-id37061 . -325) (undo-tree-id37062 . -325) (undo-tree-id37063 . -325) (undo-tree-id37064 . -325) (undo-tree-id37065 . -325) (undo-tree-id37066 . -325) (undo-tree-id37067 . -325) (undo-tree-id37068 . -325) (undo-tree-id37069 . -325) (undo-tree-id37070 . -325) (undo-tree-id37071 . -325) (undo-tree-id37072 . -325) (undo-tree-id37073 . -325) (undo-tree-id37074 . -325) (undo-tree-id37075 . -325) (undo-tree-id37076 . -325) (undo-tree-id37077 . -325) (undo-tree-id37078 . -325) (undo-tree-id37079 . -325) (undo-tree-id37080 . -325) (undo-tree-id37081 . -325) (undo-tree-id37082 . -325) (undo-tree-id37083 . -325) (undo-tree-id37084 . -325) (undo-tree-id37085 . -325) (undo-tree-id37086 . -325) (undo-tree-id37087 . -325) (undo-tree-id37088 . -325) (undo-tree-id37089 . -325) (undo-tree-id37090 . -325) (undo-tree-id37091 . -325) (undo-tree-id37092 . -325) (undo-tree-id37093 . -325) (undo-tree-id37094 . -325) (undo-tree-id37095 . -325) (undo-tree-id37096 . -325) (undo-tree-id37097 . -325) (undo-tree-id37098 . -325) (undo-tree-id37099 . -325) (undo-tree-id37100 . -325) (undo-tree-id37101 . -325) (undo-tree-id37102 . -325) (undo-tree-id37103 . -325) (undo-tree-id37104 . -325) (undo-tree-id37105 . -325) (undo-tree-id37106 . -325) (undo-tree-id37107 . -325) (undo-tree-id37108 . -325) (undo-tree-id37109 . -325) (undo-tree-id37110 . -325) (undo-tree-id37111 . -325) (undo-tree-id37112 . -325) (undo-tree-id37113 . -325) (undo-tree-id37114 . -325) (undo-tree-id37115 . -325) (undo-tree-id37116 . -325) (undo-tree-id37117 . -325) (undo-tree-id37118 . -325) (undo-tree-id37119 . -325) (undo-tree-id37120 . -325) (undo-tree-id37121 . -325) (undo-tree-id37122 . -325) (undo-tree-id37123 . -325) (undo-tree-id37124 . -325) (undo-tree-id37125 . -325) (undo-tree-id37126 . -325) (undo-tree-id37127 . -325) (undo-tree-id37128 . -325) (undo-tree-id37129 . -325) (undo-tree-id37130 . -325) (undo-tree-id37131 . -325) (undo-tree-id37132 . -325) (undo-tree-id37133 . -328) (undo-tree-id37134 . -328) (undo-tree-id37135 . -328) (undo-tree-id37136 . -328) (undo-tree-id37137 . -328) (undo-tree-id37138 . -328) (undo-tree-id37139 . -328) (undo-tree-id37140 . -328) (undo-tree-id37141 . -328) (undo-tree-id37142 . -328) (undo-tree-id37143 . -328) (undo-tree-id37144 . -328) (undo-tree-id37145 . -328) (undo-tree-id37146 . -328) (undo-tree-id37147 . -328) (undo-tree-id37148 . -333) (undo-tree-id37149 . -333) (undo-tree-id37150 . -333) (undo-tree-id37151 . -333) (undo-tree-id37152 . -333) (undo-tree-id37153 . -333) (undo-tree-id37154 . -333) (undo-tree-id37155 . -333) (undo-tree-id37156 . -339) (undo-tree-id37157 . -339) (undo-tree-id37158 . -339) (undo-tree-id37159 . -339) (undo-tree-id37160 . -339) (undo-tree-id37161 . -339) (undo-tree-id37162 . -339) (undo-tree-id37163 . -339) (undo-tree-id37164 . -349) (undo-tree-id37165 . -349) (undo-tree-id37166 . -349) (undo-tree-id37167 . -349) (undo-tree-id37168 . -349) (undo-tree-id37169 . -349) (undo-tree-id37170 . -349) (undo-tree-id37171 . -349) (undo-tree-id37172 . -357) (undo-tree-id37173 . -357) (undo-tree-id37174 . -357) (undo-tree-id37175 . -357) (undo-tree-id37176 . -357) (undo-tree-id37177 . -357) (undo-tree-id37178 . -357) (undo-tree-id37179 . -357) (undo-tree-id37180 . -365) (undo-tree-id37181 . -365) (undo-tree-id37182 . -365) (undo-tree-id37183 . -365) (undo-tree-id37184 . -365) (undo-tree-id37185 . -365) (undo-tree-id37186 . -365) (undo-tree-id37187 . -365) (undo-tree-id37188 . -369) (undo-tree-id37189 . -369) (undo-tree-id37190 . -369) (undo-tree-id37191 . -369) (undo-tree-id37192 . -369) (undo-tree-id37193 . -369) (undo-tree-id37194 . -369) (undo-tree-id37195 . -369) (undo-tree-id37196 . -375) (undo-tree-id37197 . -375) (undo-tree-id37198 . -375) (undo-tree-id37199 . -375) (undo-tree-id37200 . -375) (undo-tree-id37201 . -375) (undo-tree-id37202 . -375) (undo-tree-id37203 . -375) (undo-tree-id37204 . -376) (undo-tree-id37205 . -376) (undo-tree-id37206 . -376) (undo-tree-id37207 . -376) (undo-tree-id37208 . -376) (undo-tree-id37209 . -376) (undo-tree-id37210 . -376) (undo-tree-id37211 . -376) (undo-tree-id37212 . -376) (undo-tree-id37213 . -376) (undo-tree-id37214 . -376) (undo-tree-id37215 . -376) (undo-tree-id37216 . -376) (undo-tree-id37217 . -376) (undo-tree-id37218 . -376) (undo-tree-id37219 . -376) (undo-tree-id37220 . -376) (undo-tree-id37221 . -376) (undo-tree-id37222 . -376) (undo-tree-id37223 . -376) (undo-tree-id37224 . -376) (undo-tree-id37225 . -376) (undo-tree-id37226 . -376) (undo-tree-id37227 . -376) (undo-tree-id37228 . -376) (undo-tree-id37229 . -376) (undo-tree-id37230 . -376) (undo-tree-id37231 . -376) (undo-tree-id37232 . -376) (undo-tree-id37233 . -376) (undo-tree-id37234 . -376) (undo-tree-id37235 . -376) (undo-tree-id37236 . -376) (undo-tree-id37237 . -376) (undo-tree-id37238 . -376) (undo-tree-id37239 . -376) (undo-tree-id37240 . -376) (undo-tree-id37241 . -376) (undo-tree-id37242 . -376) (undo-tree-id37243 . -376) (undo-tree-id37244 . -376) (undo-tree-id37245 . -376) (undo-tree-id37246 . -376) (undo-tree-id37247 . -376) (undo-tree-id37248 . -376) (undo-tree-id37249 . -376) (undo-tree-id37250 . -376) (undo-tree-id37251 . -376) (undo-tree-id37252 . -376) (undo-tree-id37253 . -376) (undo-tree-id37254 . -376) (undo-tree-id37255 . -376) (undo-tree-id37256 . -376) (undo-tree-id37257 . -376) (undo-tree-id37258 . -376) (undo-tree-id37259 . -376) (undo-tree-id37260 . -376) (undo-tree-id37261 . -376) (undo-tree-id37262 . -376) (undo-tree-id37263 . -376) (undo-tree-id37264 . -376) (undo-tree-id37265 . -376) (undo-tree-id37266 . -376) (undo-tree-id37267 . -376) (undo-tree-id37268 . -376) (undo-tree-id37269 . -376) (undo-tree-id37270 . -376) (undo-tree-id37271 . -376) (undo-tree-id37272 . -376) (undo-tree-id37273 . -376) (undo-tree-id37274 . -376) (undo-tree-id37275 . -376) (undo-tree-id37276 . -376) (undo-tree-id37277 . -376) (undo-tree-id37278 . -376) (undo-tree-id37279 . -376) (undo-tree-id37280 . -376) (undo-tree-id37281 . -376) (undo-tree-id37282 . -376) (undo-tree-id37283 . -376) (undo-tree-id37284 . -376) (undo-tree-id37285 . -376) (undo-tree-id37286 . -376) (undo-tree-id37287 . -376) (undo-tree-id37288 . -376) (undo-tree-id37289 . -376) (undo-tree-id37290 . -376) (undo-tree-id37291 . -376) (undo-tree-id37292 . -376) (undo-tree-id37293 . -376) (undo-tree-id37294 . -376) (undo-tree-id37295 . -376) (undo-tree-id37296 . -376) (undo-tree-id37297 . -376) (undo-tree-id37298 . -376) (undo-tree-id37299 . -376) (undo-tree-id37300 . -376) (undo-tree-id37301 . -376) (undo-tree-id37302 . -376) (undo-tree-id37303 . -323) (7126 . 7449) (#(" and they won't have to flow only through time; they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 34 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 103 128 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 128 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 136 141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 141 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 150 151 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 151 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 206 211 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 211 212 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 212 213 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 213 214 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 214 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 216 217 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 217 218 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 218 219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 219 245 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 245 246 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 246 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 301 311 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 311 314 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 314 319 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 319 321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7179) (undo-tree-id37304 . -3) (undo-tree-id37305 . -3) (undo-tree-id37306 . -3) (undo-tree-id37307 . -3) (undo-tree-id37308 . -3) (undo-tree-id37309 . -3) (undo-tree-id37310 . -3) (undo-tree-id37311 . -3) (undo-tree-id37312 . -3) (undo-tree-id37313 . -3) (undo-tree-id37314 . -3) (undo-tree-id37315 . -3) (undo-tree-id37316 . -3) (undo-tree-id37317 . -3) (undo-tree-id37318 . -3) (undo-tree-id37319 . -3) (undo-tree-id37320 . -3) (undo-tree-id37321 . -3) (undo-tree-id37322 . -3) (undo-tree-id37323 . -3) (undo-tree-id37324 . -3) (undo-tree-id37325 . -3) (undo-tree-id37326 . -3) (undo-tree-id37327 . -3) (undo-tree-id37328 . -3) (undo-tree-id37329 . -3) (undo-tree-id37330 . -3) (undo-tree-id37331 . -3) (undo-tree-id37332 . -3) (undo-tree-id37333 . -1) (undo-tree-id37334 . -1) (undo-tree-id37335 . -1) (undo-tree-id37336 . -1) (undo-tree-id37337 . -1) (undo-tree-id37338 . -1) (undo-tree-id37339 . -1) (undo-tree-id37340 . -1) (undo-tree-id37341 . -1) (undo-tree-id37342 . -1) (undo-tree-id37343 . -1) (undo-tree-id37344 . -1) (undo-tree-id37345 . -1) (undo-tree-id37346 . -1) (undo-tree-id37347 . -1) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7179) (undo-tree-id37348 . -1) (undo-tree-id37349 . -1) (undo-tree-id37350 . -1)) nil (25772 51552 449676 923000) 0 nil])
([nil nil ((#("and " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7182) (undo-tree-id36743 . -3) (undo-tree-id36744 . 4) (undo-tree-id36745 . -4)) nil (25772 51552 448754 23000) 0 nil])
([nil nil ((7182 . 7183) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7182)) nil (25772 51552 448738 781000) 0 nil])
([nil nil ((7180 . 7499) (#("- they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- They won't have to flow only through time" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 56 57 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 57 82 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 82 90 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 90 95 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 95 104 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 104 105 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 105 160 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 160 165 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 165 166 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 166 167 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 167 168 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 168 169 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 169 170 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 170 171 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 171 172 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 172 173 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 173 199 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 199 200 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 200 255 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 255 265 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 265 268 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 268 273 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 273 275 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 275 276 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 276 277 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 277 278 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 278 306 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 306 307 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 307 319 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7180) (undo-tree-id38168 . -319) (undo-tree-id38169 . -319) (undo-tree-id38170 . 41) (undo-tree-id38171 . -278) (undo-tree-id38172 . -278) (undo-tree-id38173 . 40) (undo-tree-id38174 . -278) (undo-tree-id38175 . -319) (undo-tree-id38176 . -278) (undo-tree-id38177 . -278) (undo-tree-id38178 . -278) (undo-tree-id38179 . -278) (undo-tree-id38180 . -278) (undo-tree-id38181 . -278) (undo-tree-id38182 . -278) (undo-tree-id38183 . -278) (undo-tree-id38184 . -278) (undo-tree-id38185 . -278) (undo-tree-id38186 . -278) (undo-tree-id38187 . -278) (undo-tree-id38188 . -278) (undo-tree-id38189 . -278) (undo-tree-id38190 . -278) (undo-tree-id38191 . -278) (undo-tree-id38192 . -278) (undo-tree-id38193 . -278) (undo-tree-id38194 . -278) (undo-tree-id38195 . -278) (undo-tree-id38196 . -278) (undo-tree-id38197 . -278) (undo-tree-id38198 . -278) (undo-tree-id38199 . -278) (undo-tree-id38200 . -278) (undo-tree-id38201 . -278) (undo-tree-id38202 . -278) (undo-tree-id38203 . -278) (undo-tree-id38204 . -278) (undo-tree-id38205 . -278) (undo-tree-id38206 . -278) (undo-tree-id38207 . -278) (undo-tree-id38208 . -278) (undo-tree-id38209 . -278) (undo-tree-id38210 . -278) (undo-tree-id38211 . -278) (undo-tree-id38212 . -278) (undo-tree-id38213 . -278) (undo-tree-id38214 . -278) (undo-tree-id38215 . -278) (undo-tree-id38216 . -278) (undo-tree-id38217 . -278) (undo-tree-id38218 . -278) (undo-tree-id38219 . -278) (undo-tree-id38220 . -278) (undo-tree-id38221 . -278) (undo-tree-id38222 . -278) (undo-tree-id38223 . -278) (undo-tree-id38224 . -278) (undo-tree-id38225 . -278) (undo-tree-id38226 . -278) (undo-tree-id38227 . -278) (undo-tree-id38228 . -278) (undo-tree-id38229 . -278) (undo-tree-id38230 . -278) (undo-tree-id38231 . -278) (undo-tree-id38232 . -278) (undo-tree-id38233 . -278) (undo-tree-id38234 . -278) (undo-tree-id38235 . -278) (undo-tree-id38236 . -278) (undo-tree-id38237 . -278) (undo-tree-id38238 . -278) (undo-tree-id38239 . -278) (undo-tree-id38240 . -278) (undo-tree-id38241 . -278) (undo-tree-id38242 . -278) (undo-tree-id38243 . -278) (undo-tree-id38244 . -278) (undo-tree-id38245 . -278) (undo-tree-id38246 . -278) (undo-tree-id38247 . -278) (undo-tree-id38248 . -278) (undo-tree-id38249 . -278) (undo-tree-id38250 . -319) (undo-tree-id38251 . -319) (undo-tree-id38252 . -319) (undo-tree-id38253 . -319) (undo-tree-id38254 . -319) (undo-tree-id38255 . -319) (undo-tree-id38256 . -319) (undo-tree-id38257 . -319) (undo-tree-id38258 . -319) (undo-tree-id38259 . -319) (undo-tree-id38260 . -319) (undo-tree-id38261 . -319) (undo-tree-id38262 . -319) (undo-tree-id38263 . -319) (undo-tree-id38264 . -319) (undo-tree-id38265 . -319) (undo-tree-id38266 . -319) (undo-tree-id38267 . -319) (undo-tree-id38268 . -319) (undo-tree-id38269 . -319) (undo-tree-id38270 . -319) (undo-tree-id38271 . -319) (undo-tree-id38272 . -319) (undo-tree-id38273 . -319) (undo-tree-id38274 . -319) (undo-tree-id38275 . -319) (undo-tree-id38276 . -319) (undo-tree-id38277 . -319) (undo-tree-id38278 . -319) (undo-tree-id38279 . -319) (undo-tree-id38280 . -319) (undo-tree-id38281 . -319) (undo-tree-id38282 . -319) (undo-tree-id38283 . -319) (undo-tree-id38284 . -319) (undo-tree-id38285 . -319) (undo-tree-id38286 . -319) (undo-tree-id38287 . -319) (undo-tree-id38288 . -319) (undo-tree-id38289 . -319) (undo-tree-id38290 . -319) (undo-tree-id38291 . -319) (undo-tree-id38292 . -319) (undo-tree-id38293 . -319) (undo-tree-id38294 . -319) (undo-tree-id38295 . -319) (undo-tree-id38296 . -319) (undo-tree-id38297 . -276) (7180 . 7456) (#(" they will also flow from the output of each time step. This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 55 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 56 81 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 81 89 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 89 94 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 94 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 103 104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 104 159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 159 164 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 164 165 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 165 166 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 166 167 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 167 168 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 168 169 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 169 170 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 170 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 171 172 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 172 198 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 198 199 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 199 254 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 254 264 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 264 267 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 267 272 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 272 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7223) (#(";" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7223) (undo-tree-id38298 . -1) (undo-tree-id38299 . -1) (undo-tree-id38300 . -1) (t 25772 51552 564544 732000)) nil (25772 51563 959936 944000) 0 nil])
([nil nil ((7226 . 7227) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7226) (t 25772 51564 25472 508000)) nil (25772 51568 817737 148000) 0 nil])
([nil nil ((7224 . 7500) (#("- This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- They will also flow from the output of each time step" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 27 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 27 35 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 35 40 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 40 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 49 50 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 50 105 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 105 110 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 110 111 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 111 112 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 112 113 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 113 114 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 114 115 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 115 116 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 116 117 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 117 118 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 118 144 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 144 145 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 145 200 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 200 210 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 210 213 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 213 218 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 218 220 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 220 221 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 221 222 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 222 223 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 223 276 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7224) (undo-tree-id38301 . -276) (undo-tree-id38302 . -276) (undo-tree-id38303 . 53) (undo-tree-id38304 . -223) (undo-tree-id38305 . -223) (undo-tree-id38306 . 52) (undo-tree-id38307 . -223) (undo-tree-id38308 . -276) (undo-tree-id38309 . -223) (undo-tree-id38310 . -223) (undo-tree-id38311 . -223) (undo-tree-id38312 . -223) (undo-tree-id38313 . -223) (undo-tree-id38314 . -223) (undo-tree-id38315 . -223) (undo-tree-id38316 . -223) (undo-tree-id38317 . -223) (undo-tree-id38318 . -223) (undo-tree-id38319 . -223) (undo-tree-id38320 . -223) (undo-tree-id38321 . -223) (undo-tree-id38322 . -223) (undo-tree-id38323 . -223) (undo-tree-id38324 . -223) (undo-tree-id38325 . -223) (undo-tree-id38326 . -223) (undo-tree-id38327 . -223) (undo-tree-id38328 . -223) (undo-tree-id38329 . -223) (undo-tree-id38330 . -223) (undo-tree-id38331 . -223) (undo-tree-id38332 . -223) (undo-tree-id38333 . -223) (undo-tree-id38334 . -223) (undo-tree-id38335 . -223) (undo-tree-id38336 . -223) (undo-tree-id38337 . -223) (undo-tree-id38338 . -223) (undo-tree-id38339 . -223) (undo-tree-id38340 . -223) (undo-tree-id38341 . -226) (undo-tree-id38342 . -226) (undo-tree-id38343 . -226) (undo-tree-id38344 . -226) (undo-tree-id38345 . -226) (undo-tree-id38346 . -226) (undo-tree-id38347 . -226) (undo-tree-id38348 . -226) (undo-tree-id38349 . -226) (undo-tree-id38350 . -226) (undo-tree-id38351 . -226) (undo-tree-id38352 . -226) (undo-tree-id38353 . -226) (undo-tree-id38354 . -226) (undo-tree-id38355 . -226) (undo-tree-id38356 . -231) (undo-tree-id38357 . -231) (undo-tree-id38358 . -231) (undo-tree-id38359 . -231) (undo-tree-id38360 . -231) (undo-tree-id38361 . -231) (undo-tree-id38362 . -231) (undo-tree-id38363 . -231) (undo-tree-id38364 . -236) (undo-tree-id38365 . -236) (undo-tree-id38366 . -236) (undo-tree-id38367 . -236) (undo-tree-id38368 . -236) (undo-tree-id38369 . -236) (undo-tree-id38370 . -236) (undo-tree-id38371 . -236) (undo-tree-id38372 . -241) (undo-tree-id38373 . -241) (undo-tree-id38374 . -241) (undo-tree-id38375 . -241) (undo-tree-id38376 . -241) (undo-tree-id38377 . -241) (undo-tree-id38378 . -241) (undo-tree-id38379 . -241) (undo-tree-id38380 . -246) (undo-tree-id38381 . -246) (undo-tree-id38382 . -246) (undo-tree-id38383 . -246) (undo-tree-id38384 . -246) (undo-tree-id38385 . -246) (undo-tree-id38386 . -246) (undo-tree-id38387 . -246) (undo-tree-id38388 . -250) (undo-tree-id38389 . -250) (undo-tree-id38390 . -250) (undo-tree-id38391 . -250) (undo-tree-id38392 . -250) (undo-tree-id38393 . -250) (undo-tree-id38394 . -250) (undo-tree-id38395 . -250) (undo-tree-id38396 . -257) (undo-tree-id38397 . -257) (undo-tree-id38398 . -257) (undo-tree-id38399 . -257) (undo-tree-id38400 . -257) (undo-tree-id38401 . -257) (undo-tree-id38402 . -257) (undo-tree-id38403 . -257) (undo-tree-id38404 . -260) (undo-tree-id38405 . -260) (undo-tree-id38406 . -260) (undo-tree-id38407 . -260) (undo-tree-id38408 . -260) (undo-tree-id38409 . -260) (undo-tree-id38410 . -260) (undo-tree-id38411 . -260) (undo-tree-id38412 . -260) (undo-tree-id38413 . -260) (undo-tree-id38414 . -260) (undo-tree-id38415 . -260) (undo-tree-id38416 . -260) (undo-tree-id38417 . -260) (undo-tree-id38418 . -260) (undo-tree-id38419 . -265) (undo-tree-id38420 . -265) (undo-tree-id38421 . -265) (undo-tree-id38422 . -265) (undo-tree-id38423 . -265) (undo-tree-id38424 . -265) (undo-tree-id38425 . -265) (undo-tree-id38426 . -265) (undo-tree-id38427 . -265) (undo-tree-id38428 . -265) (undo-tree-id38429 . -265) (undo-tree-id38430 . -265) (undo-tree-id38431 . -265) (undo-tree-id38432 . -265) (undo-tree-id38433 . -265) (undo-tree-id38434 . -265) (undo-tree-id38435 . -265) (undo-tree-id38436 . -265) (undo-tree-id38437 . -265) (undo-tree-id38438 . -265) (undo-tree-id38439 . -265) (undo-tree-id38440 . -265) (undo-tree-id38441 . -270) (undo-tree-id38442 . -270) (undo-tree-id38443 . -270) (undo-tree-id38444 . -270) (undo-tree-id38445 . -270) (undo-tree-id38446 . -270) (undo-tree-id38447 . -270) (undo-tree-id38448 . -270) (undo-tree-id38449 . -270) (undo-tree-id38450 . -270) (undo-tree-id38451 . -270) (undo-tree-id38452 . -270) (undo-tree-id38453 . -270) (undo-tree-id38454 . -270) (undo-tree-id38455 . -270) (undo-tree-id38456 . -270) (undo-tree-id38457 . -270) (undo-tree-id38458 . -270) (undo-tree-id38459 . -270) (undo-tree-id38460 . -270) (undo-tree-id38461 . -270) (undo-tree-id38462 . -270) (undo-tree-id38463 . -275) (undo-tree-id38464 . -275) (undo-tree-id38465 . -275) (undo-tree-id38466 . -275) (undo-tree-id38467 . -275) (undo-tree-id38468 . -275) (undo-tree-id38469 . -275) (undo-tree-id38470 . -275) (undo-tree-id38471 . -275) (undo-tree-id38472 . -275) (undo-tree-id38473 . -275) (undo-tree-id38474 . -275) (undo-tree-id38475 . -275) (undo-tree-id38476 . -275) (undo-tree-id38477 . -275) (undo-tree-id38478 . -275) (undo-tree-id38479 . -275) (undo-tree-id38480 . -275) (undo-tree-id38481 . -275) (undo-tree-id38482 . -275) (undo-tree-id38483 . -275) (undo-tree-id38484 . -275) (undo-tree-id38485 . -276) (undo-tree-id38486 . -276) (undo-tree-id38487 . -276) (undo-tree-id38488 . -276) (undo-tree-id38489 . -276) (undo-tree-id38490 . -276) (undo-tree-id38491 . -276) (undo-tree-id38492 . -276) (undo-tree-id38493 . -276) (undo-tree-id38494 . -276) (undo-tree-id38495 . -276) (undo-tree-id38496 . -276) (undo-tree-id38497 . -276) (undo-tree-id38498 . -276) (undo-tree-id38499 . -276) (undo-tree-id38500 . -276) (undo-tree-id38501 . -276) (undo-tree-id38502 . -276) (undo-tree-id38503 . -276) (undo-tree-id38504 . -276) (undo-tree-id38505 . -276) (undo-tree-id38506 . -276) (undo-tree-id38507 . -276) (undo-tree-id38508 . -276) (undo-tree-id38509 . -276) (undo-tree-id38510 . -276) (undo-tree-id38511 . -276) (undo-tree-id38512 . -276) (undo-tree-id38513 . -276) (undo-tree-id38514 . -276) (undo-tree-id38515 . -276) (undo-tree-id38516 . -276) (undo-tree-id38517 . -276) (undo-tree-id38518 . -276) (undo-tree-id38519 . -276) (undo-tree-id38520 . -276) (undo-tree-id38521 . -276) (undo-tree-id38522 . -276) (undo-tree-id38523 . -276) (undo-tree-id38524 . -276) (undo-tree-id38525 . -221) (7224 . 7445) (#(" This will both stabilize and speed up training. At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 26 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 26 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 34 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 39 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 49 104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 104 109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 109 110 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 110 111 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 111 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 114 115 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 115 116 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 116 117 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 144 199 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 199 209 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 209 212 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 212 217 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 217 219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7279) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7279) (undo-tree-id38526 . -1) (undo-tree-id38527 . -1) (undo-tree-id38528 . -1) (t 25772 51568 881863 643000)) nil (25772 51574 992537 327000) 0 nil])
([nil nil ((#("will " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7287) (undo-tree-id38913 . -4) (undo-tree-id38914 . -5) (t 25772 51575 58359 415000)) nil (25772 51589 721189 464000) 0 nil])
([nil nil ((#("both " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7287) (undo-tree-id38911 . -4) (undo-tree-id38912 . -5)) nil (25772 51589 721186 622000) 0 nil])
([nil nil ((7280 . 7492) (#("- At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- This stabilize and speed up training." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 57 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 57 62 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 62 63 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 63 64 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 64 65 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 65 66 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 68 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 68 69 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 69 70 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 70 96 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 96 97 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 97 152 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 152 162 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 162 165 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 165 170 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 170 172 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 172 173 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 173 174 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 174 175 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 175 190 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 190 198 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 198 203 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 203 212 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7280) (undo-tree-id38529 . -180) (undo-tree-id38530 . -180) (undo-tree-id38531 . 37) (undo-tree-id38532 . -174) (undo-tree-id38533 . -212) (undo-tree-id38534 . -174) (undo-tree-id38535 . -174) (undo-tree-id38536 . -174) (undo-tree-id38537 . -174) (undo-tree-id38538 . -174) (undo-tree-id38539 . -174) (undo-tree-id38540 . -174) (undo-tree-id38541 . -174) (undo-tree-id38542 . -174) (undo-tree-id38543 . -174) (undo-tree-id38544 . -174) (undo-tree-id38545 . -174) (undo-tree-id38546 . -174) (undo-tree-id38547 . -174) (undo-tree-id38548 . -174) (undo-tree-id38549 . -174) (undo-tree-id38550 . -174) (undo-tree-id38551 . -174) (undo-tree-id38552 . -174) (undo-tree-id38553 . -174) (undo-tree-id38554 . -174) (undo-tree-id38555 . -174) (undo-tree-id38556 . -174) (undo-tree-id38557 . -174) (undo-tree-id38558 . -174) (undo-tree-id38559 . -174) (undo-tree-id38560 . -174) (undo-tree-id38561 . -174) (undo-tree-id38562 . -174) (undo-tree-id38563 . -174) (undo-tree-id38564 . -174) (undo-tree-id38565 . -174) (undo-tree-id38566 . -175) (undo-tree-id38567 . -175) (undo-tree-id38568 . -175) (undo-tree-id38569 . -175) (undo-tree-id38570 . -175) (undo-tree-id38571 . -175) (undo-tree-id38572 . -175) (undo-tree-id38573 . -175) (undo-tree-id38574 . -175) (undo-tree-id38575 . -175) (undo-tree-id38576 . -175) (undo-tree-id38577 . -175) (undo-tree-id38578 . -175) (undo-tree-id38579 . -175) (undo-tree-id38580 . -175) (undo-tree-id38581 . -175) (undo-tree-id38582 . -175) (undo-tree-id38583 . -175) (undo-tree-id38584 . -175) (undo-tree-id38585 . -175) (undo-tree-id38586 . -175) (undo-tree-id38587 . -175) (undo-tree-id38588 . -175) (undo-tree-id38589 . -175) (undo-tree-id38590 . -175) (undo-tree-id38591 . -175) (undo-tree-id38592 . -175) (undo-tree-id38593 . -175) (undo-tree-id38594 . -175) (undo-tree-id38595 . -175) (undo-tree-id38596 . -175) (undo-tree-id38597 . -175) (undo-tree-id38598 . -175) (undo-tree-id38599 . -175) (undo-tree-id38600 . -175) (undo-tree-id38601 . -175) (undo-tree-id38602 . -175) (undo-tree-id38603 . -175) (undo-tree-id38604 . -175) (undo-tree-id38605 . -175) (undo-tree-id38606 . -175) (undo-tree-id38607 . -175) (undo-tree-id38608 . -175) (undo-tree-id38609 . -175) (undo-tree-id38610 . -175) (undo-tree-id38611 . -175) (undo-tree-id38612 . -175) (undo-tree-id38613 . -175) (undo-tree-id38614 . -175) (undo-tree-id38615 . -175) (undo-tree-id38616 . -175) (undo-tree-id38617 . -175) (undo-tree-id38618 . -175) (undo-tree-id38619 . -175) (undo-tree-id38620 . -175) (undo-tree-id38621 . -175) (undo-tree-id38622 . -175) (undo-tree-id38623 . -175) (undo-tree-id38624 . -175) (undo-tree-id38625 . -175) (undo-tree-id38626 . -175) (undo-tree-id38627 . -175) (undo-tree-id38628 . -175) (undo-tree-id38629 . -175) (undo-tree-id38630 . -175) (undo-tree-id38631 . -175) (undo-tree-id38632 . -175) (undo-tree-id38633 . -175) (undo-tree-id38634 . -175) (undo-tree-id38635 . -175) (undo-tree-id38636 . -175) (undo-tree-id38637 . -175) (undo-tree-id38638 . -175) (undo-tree-id38639 . -175) (undo-tree-id38640 . -175) (undo-tree-id38641 . -175) (undo-tree-id38642 . -175) (undo-tree-id38643 . -175) (undo-tree-id38644 . -175) (undo-tree-id38645 . -175) (undo-tree-id38646 . -175) (undo-tree-id38647 . -175) (undo-tree-id38648 . -175) (undo-tree-id38649 . -180) (undo-tree-id38650 . -180) (undo-tree-id38651 . -180) (undo-tree-id38652 . -180) (undo-tree-id38653 . -180) (undo-tree-id38654 . -180) (undo-tree-id38655 . -180) (undo-tree-id38656 . -180) (undo-tree-id38657 . -180) (undo-tree-id38658 . -180) (undo-tree-id38659 . -180) (undo-tree-id38660 . -180) (undo-tree-id38661 . -180) (undo-tree-id38662 . -180) (undo-tree-id38663 . -180) (undo-tree-id38664 . -180) (undo-tree-id38665 . -180) (undo-tree-id38666 . -180) (undo-tree-id38667 . -180) (undo-tree-id38668 . -180) (undo-tree-id38669 . -180) (undo-tree-id38670 . -180) (undo-tree-id38671 . -180) (undo-tree-id38672 . -180) (undo-tree-id38673 . -180) (undo-tree-id38674 . -180) (undo-tree-id38675 . -180) (undo-tree-id38676 . -180) (undo-tree-id38677 . -180) (undo-tree-id38678 . -180) (undo-tree-id38679 . -180) (undo-tree-id38680 . -180) (undo-tree-id38681 . -180) (undo-tree-id38682 . -180) (undo-tree-id38683 . -180) (undo-tree-id38684 . -180) (undo-tree-id38685 . -180) (undo-tree-id38686 . -180) (undo-tree-id38687 . -180) (undo-tree-id38688 . -180) (undo-tree-id38689 . -180) (undo-tree-id38690 . -180) (undo-tree-id38691 . -180) (undo-tree-id38692 . -180) (undo-tree-id38693 . -180) (undo-tree-id38694 . -180) (undo-tree-id38695 . -180) (undo-tree-id38696 . -180) (undo-tree-id38697 . -180) (undo-tree-id38698 . -180) (undo-tree-id38699 . -180) (undo-tree-id38700 . -180) (undo-tree-id38701 . -180) (undo-tree-id38702 . -180) (undo-tree-id38703 . -180) (undo-tree-id38704 . -180) (undo-tree-id38705 . -180) (undo-tree-id38706 . -180) (undo-tree-id38707 . -180) (undo-tree-id38708 . -180) (undo-tree-id38709 . -180) (undo-tree-id38710 . -180) (undo-tree-id38711 . -180) (undo-tree-id38712 . -180) (undo-tree-id38713 . -180) (undo-tree-id38714 . -180) (undo-tree-id38715 . -180) (undo-tree-id38716 . -180) (undo-tree-id38717 . -180) (undo-tree-id38718 . -180) (undo-tree-id38719 . -180) (undo-tree-id38720 . -180) (undo-tree-id38721 . -180) (undo-tree-id38722 . -180) (undo-tree-id38723 . -180) (undo-tree-id38724 . -180) (undo-tree-id38725 . -180) (undo-tree-id38726 . -180) (undo-tree-id38727 . -180) (undo-tree-id38728 . -180) (undo-tree-id38729 . -180) (undo-tree-id38730 . -188) (undo-tree-id38731 . -188) (undo-tree-id38732 . -188) (undo-tree-id38733 . -188) (undo-tree-id38734 . -188) (undo-tree-id38735 . -188) (undo-tree-id38736 . -188) (undo-tree-id38737 . -188) (undo-tree-id38738 . -188) (undo-tree-id38739 . -188) (undo-tree-id38740 . -188) (undo-tree-id38741 . -188) (undo-tree-id38742 . -188) (undo-tree-id38743 . -188) (undo-tree-id38744 . -188) (undo-tree-id38745 . -192) (undo-tree-id38746 . -192) (undo-tree-id38747 . -192) (undo-tree-id38748 . -192) (undo-tree-id38749 . -192) (undo-tree-id38750 . -192) (undo-tree-id38751 . -192) (undo-tree-id38752 . -192) (undo-tree-id38753 . -198) (undo-tree-id38754 . -198) (undo-tree-id38755 . -198) (undo-tree-id38756 . -198) (undo-tree-id38757 . -198) (undo-tree-id38758 . -198) (undo-tree-id38759 . -198) (undo-tree-id38760 . -198) (undo-tree-id38761 . -201) (undo-tree-id38762 . -201) (undo-tree-id38763 . -201) (undo-tree-id38764 . -201) (undo-tree-id38765 . -201) (undo-tree-id38766 . -201) (undo-tree-id38767 . -201) (undo-tree-id38768 . -201) (undo-tree-id38769 . -201) (undo-tree-id38770 . -201) (undo-tree-id38771 . -201) (undo-tree-id38772 . -201) (undo-tree-id38773 . -201) (undo-tree-id38774 . -201) (undo-tree-id38775 . -201) (undo-tree-id38776 . -210) (undo-tree-id38777 . -210) (undo-tree-id38778 . -210) (undo-tree-id38779 . -210) (undo-tree-id38780 . -210) (undo-tree-id38781 . -210) (undo-tree-id38782 . -210) (undo-tree-id38783 . -210) (undo-tree-id38784 . -210) (undo-tree-id38785 . -210) (undo-tree-id38786 . -210) (undo-tree-id38787 . -210) (undo-tree-id38788 . -210) (undo-tree-id38789 . -210) (undo-tree-id38790 . -210) (undo-tree-id38791 . -211) (undo-tree-id38792 . -211) (undo-tree-id38793 . -211) (undo-tree-id38794 . -211) (undo-tree-id38795 . -211) (undo-tree-id38796 . -211) (undo-tree-id38797 . -211) (undo-tree-id38798 . -211) (undo-tree-id38799 . -211) (undo-tree-id38800 . -211) (undo-tree-id38801 . -211) (undo-tree-id38802 . -211) (undo-tree-id38803 . -211) (undo-tree-id38804 . -211) (undo-tree-id38805 . -211) (undo-tree-id38806 . -211) (undo-tree-id38807 . -211) (undo-tree-id38808 . -211) (undo-tree-id38809 . -211) (undo-tree-id38810 . -211) (undo-tree-id38811 . -211) (undo-tree-id38812 . -211) (undo-tree-id38813 . -212) (undo-tree-id38814 . -212) (undo-tree-id38815 . -212) (undo-tree-id38816 . -212) (undo-tree-id38817 . -212) (undo-tree-id38818 . -212) (undo-tree-id38819 . -212) (undo-tree-id38820 . -212) (undo-tree-id38821 . -212) (undo-tree-id38822 . -212) (undo-tree-id38823 . -212) (undo-tree-id38824 . -212) (undo-tree-id38825 . -212) (undo-tree-id38826 . -212) (undo-tree-id38827 . -212) (undo-tree-id38828 . -212) (undo-tree-id38829 . -212) (undo-tree-id38830 . -212) (undo-tree-id38831 . -212) (undo-tree-id38832 . -212) (undo-tree-id38833 . -212) (undo-tree-id38834 . -212) (undo-tree-id38835 . -212) (undo-tree-id38836 . -212) (undo-tree-id38837 . -212) (undo-tree-id38838 . -212) (undo-tree-id38839 . -212) (undo-tree-id38840 . -212) (undo-tree-id38841 . -212) (undo-tree-id38842 . -212) (undo-tree-id38843 . -212) (undo-tree-id38844 . -212) (undo-tree-id38845 . -212) (undo-tree-id38846 . -212) (undo-tree-id38847 . -212) (undo-tree-id38848 . -212) (undo-tree-id38849 . -212) (undo-tree-id38850 . -212) (undo-tree-id38851 . -212) (undo-tree-id38852 . -212) (undo-tree-id38853 . -212) (undo-tree-id38854 . -212) (undo-tree-id38855 . -212) (undo-tree-id38856 . -212) (undo-tree-id38857 . -212) (undo-tree-id38858 . -212) (undo-tree-id38859 . -212) (undo-tree-id38860 . -212) (undo-tree-id38861 . -173) (7280 . 7453) (#(" At time step 0 the model will output a vector containing the forecasts for time steps 1 to 10, Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 56 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 61 62 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 62 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 64 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 64 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 69 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 151 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 151 161 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 161 164 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 164 169 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 169 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7319) (undo-tree-id38862 . -1) (undo-tree-id38863 . -2) (undo-tree-id38864 . -2) (undo-tree-id38865 . -2) (undo-tree-id38866 . -2) (undo-tree-id38867 . -2) (undo-tree-id38868 . -2) (undo-tree-id38869 . -2) (undo-tree-id38870 . -2) (undo-tree-id38871 . -2) (undo-tree-id38872 . -2) (undo-tree-id38873 . -2) (undo-tree-id38874 . -2) (undo-tree-id38875 . -2) (undo-tree-id38876 . -2) (undo-tree-id38877 . -2) (undo-tree-id38878 . -1) (undo-tree-id38879 . -1) (undo-tree-id38880 . -1) (undo-tree-id38881 . -1) (undo-tree-id38882 . -1) (undo-tree-id38883 . -1) (undo-tree-id38884 . -1) (undo-tree-id38885 . -1) (undo-tree-id38886 . -1) (undo-tree-id38887 . -1) (undo-tree-id38888 . -1) (undo-tree-id38889 . -1) (undo-tree-id38890 . -1) (undo-tree-id38891 . -1) (undo-tree-id38892 . -1) (undo-tree-id38893 . -1) (undo-tree-id38894 . -1) (undo-tree-id38895 . -1) (undo-tree-id38896 . -1) (undo-tree-id38897 . -1) (undo-tree-id38898 . -1) (undo-tree-id38899 . -1) (undo-tree-id38900 . -1) (undo-tree-id38901 . -1) (undo-tree-id38902 . -1) (undo-tree-id38903 . -1) (undo-tree-id38904 . -1) (undo-tree-id38905 . -1) (undo-tree-id38906 . -1) (undo-tree-id38907 . -1) (undo-tree-id38908 . -1) (undo-tree-id38909 . -1) (undo-tree-id38910 . -1) 7320) nil (25772 51589 721167 834000) 0 nil])
([nil nil ((#("will " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7347) (undo-tree-id39689 . -4) (undo-tree-id39690 . -5) (t 25772 51589 835537 998000)) nil (25772 51630 54867 428000) 0 nil])
([nil nil ((#("containing the forecasts " 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 9 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 15 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 17 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 19 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 22 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7363) (undo-tree-id39537 . -24) (undo-tree-id39538 . -24) (undo-tree-id39539 . -24) (undo-tree-id39540 . -11) (undo-tree-id39541 . -11) (undo-tree-id39542 . -11) (undo-tree-id39543 . -11) (undo-tree-id39544 . -11) (undo-tree-id39545 . -11) (undo-tree-id39546 . -11) (undo-tree-id39547 . -11) (undo-tree-id39548 . -11) (undo-tree-id39549 . -11) (undo-tree-id39550 . -11) (undo-tree-id39551 . -11) (undo-tree-id39552 . -11) (undo-tree-id39553 . -11) (undo-tree-id39554 . -11) (undo-tree-id39555 . -11) (undo-tree-id39556 . -11) (undo-tree-id39557 . -11) (undo-tree-id39558 . -11) (undo-tree-id39559 . -11) (undo-tree-id39560 . -11) (undo-tree-id39561 . -11) (undo-tree-id39562 . -11) (undo-tree-id39563 . -11) (undo-tree-id39564 . -11) (undo-tree-id39565 . -11) (undo-tree-id39566 . -11) (undo-tree-id39567 . -11) (undo-tree-id39568 . -11) (undo-tree-id39569 . -25) (undo-tree-id39570 . -24) (undo-tree-id39571 . -9) (undo-tree-id39572 . -9) (undo-tree-id39573 . -9) (undo-tree-id39574 . -9) (undo-tree-id39575 . -9) (undo-tree-id39576 . -9) (undo-tree-id39577 . -9) (undo-tree-id39578 . -9) (undo-tree-id39579 . -9) (undo-tree-id39580 . -9) (undo-tree-id39581 . -9) (undo-tree-id39582 . -9) (undo-tree-id39583 . -9) (undo-tree-id39584 . -9) (undo-tree-id39585 . -9) (undo-tree-id39586 . -9) (undo-tree-id39587 . -9) (undo-tree-id39588 . -9) (undo-tree-id39589 . -9) (undo-tree-id39590 . -9) (undo-tree-id39591 . -9) (undo-tree-id39592 . -9) (undo-tree-id39593 . -13) (undo-tree-id39594 . -13) (undo-tree-id39595 . -13) (undo-tree-id39596 . -13) (undo-tree-id39597 . -13) (undo-tree-id39598 . -13) (undo-tree-id39599 . -13) (undo-tree-id39600 . -13) (undo-tree-id39601 . -13) (undo-tree-id39602 . -13) (undo-tree-id39603 . -13) (undo-tree-id39604 . -13) (undo-tree-id39605 . -13) (undo-tree-id39606 . -13) (undo-tree-id39607 . -13) (undo-tree-id39608 . -13) (undo-tree-id39609 . -13) (undo-tree-id39610 . -13) (undo-tree-id39611 . -13) (undo-tree-id39612 . -13) (undo-tree-id39613 . -13) (undo-tree-id39614 . -13) (undo-tree-id39615 . -23) (undo-tree-id39616 . -23) (undo-tree-id39617 . -23) (undo-tree-id39618 . -23) (undo-tree-id39619 . -23) (undo-tree-id39620 . -23) (undo-tree-id39621 . -23) (undo-tree-id39622 . -23) (undo-tree-id39623 . -23) (undo-tree-id39624 . -23) (undo-tree-id39625 . -23) (undo-tree-id39626 . -23) (undo-tree-id39627 . -23) (undo-tree-id39628 . -23) (undo-tree-id39629 . -23) (undo-tree-id39630 . -23) (undo-tree-id39631 . -23) (undo-tree-id39632 . -23) (undo-tree-id39633 . -23) (undo-tree-id39634 . -23) (undo-tree-id39635 . -23) (undo-tree-id39636 . -23) (undo-tree-id39637 . -23) (undo-tree-id39638 . -23) (undo-tree-id39639 . -23) (undo-tree-id39640 . -23) (undo-tree-id39641 . -23) (undo-tree-id39642 . -23) (undo-tree-id39643 . -23) (undo-tree-id39644 . -23) (undo-tree-id39645 . -23) (undo-tree-id39646 . -23) (undo-tree-id39647 . -23) (undo-tree-id39648 . -23) (undo-tree-id39649 . -23) (undo-tree-id39650 . -23) (undo-tree-id39651 . -24) (undo-tree-id39652 . -24) (undo-tree-id39653 . -24) (undo-tree-id39654 . -24) (undo-tree-id39655 . -24) (undo-tree-id39656 . -24) (undo-tree-id39657 . -24) (undo-tree-id39658 . -24) (undo-tree-id39659 . -24) (undo-tree-id39660 . -24) (undo-tree-id39661 . -24) (undo-tree-id39662 . -24) (undo-tree-id39663 . -24) (undo-tree-id39664 . -24) (undo-tree-id39665 . -24) (undo-tree-id39666 . -24) (undo-tree-id39667 . -24) (undo-tree-id39668 . -24) (undo-tree-id39669 . -24) (undo-tree-id39670 . -24) (undo-tree-id39671 . -24) (undo-tree-id39672 . -24) (undo-tree-id39673 . -24) (undo-tree-id39674 . -24) (undo-tree-id39675 . -24) (undo-tree-id39676 . -24) (undo-tree-id39677 . -24) (undo-tree-id39678 . -24) (undo-tree-id39679 . -24) (undo-tree-id39680 . -24) (undo-tree-id39681 . -24) (undo-tree-id39682 . -24) (undo-tree-id39683 . -24) (undo-tree-id39684 . -24) (undo-tree-id39685 . -24) (undo-tree-id39686 . -24) (undo-tree-id39687 . -24) (undo-tree-id39688 . -25) 7387) nil (25772 51630 54860 955000) 0 nil])
([nil nil ((7320 . 7463) (#("- Then at time step 1 the model will forecast time steps 2 to 11, and so on. 
- At time step 0 the model output a vector for time steps 1 to 10" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 57 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 57 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 70 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 70 75 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 75 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 77 78 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 78 79 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 79 80 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 80 121 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 121 143 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7320) (undo-tree-id38918 . -121) (undo-tree-id38919 . -121) (undo-tree-id38920 . 63) (undo-tree-id38921 . -121) (undo-tree-id38922 . -121) (undo-tree-id38923 . 22) (undo-tree-id38924 . -79) (undo-tree-id38925 . -143) (undo-tree-id38926 . -79) (undo-tree-id38927 . -79) (undo-tree-id38928 . -79) (undo-tree-id38929 . -79) (undo-tree-id38930 . -79) (undo-tree-id38931 . -79) (undo-tree-id38932 . -79) (undo-tree-id38933 . -79) (undo-tree-id38934 . -79) (undo-tree-id38935 . -79) (undo-tree-id38936 . -79) (undo-tree-id38937 . -79) (undo-tree-id38938 . -79) (undo-tree-id38939 . -79) (undo-tree-id38940 . -79) (undo-tree-id38941 . -79) (undo-tree-id38942 . -79) (undo-tree-id38943 . -79) (undo-tree-id38944 . -79) (undo-tree-id38945 . -79) (undo-tree-id38946 . -79) (undo-tree-id38947 . -79) (undo-tree-id38948 . -79) (undo-tree-id38949 . -79) (undo-tree-id38950 . -79) (undo-tree-id38951 . -79) (undo-tree-id38952 . -79) (undo-tree-id38953 . -79) (undo-tree-id38954 . -79) (undo-tree-id38955 . -79) (undo-tree-id38956 . -79) (undo-tree-id38957 . -79) (undo-tree-id38958 . -80) (undo-tree-id38959 . -80) (undo-tree-id38960 . -80) (undo-tree-id38961 . -80) (undo-tree-id38962 . -80) (undo-tree-id38963 . -80) (undo-tree-id38964 . -80) (undo-tree-id38965 . -80) (undo-tree-id38966 . -80) (undo-tree-id38967 . -80) (undo-tree-id38968 . -80) (undo-tree-id38969 . -80) (undo-tree-id38970 . -80) (undo-tree-id38971 . -80) (undo-tree-id38972 . -80) (undo-tree-id38973 . -80) (undo-tree-id38974 . -80) (undo-tree-id38975 . -80) (undo-tree-id38976 . -80) (undo-tree-id38977 . -80) (undo-tree-id38978 . -80) (undo-tree-id38979 . -80) (undo-tree-id38980 . -80) (undo-tree-id38981 . -80) (undo-tree-id38982 . -80) (undo-tree-id38983 . -80) (undo-tree-id38984 . -80) (undo-tree-id38985 . -80) (undo-tree-id38986 . -80) (undo-tree-id38987 . -80) (undo-tree-id38988 . -80) (undo-tree-id38989 . -80) (undo-tree-id38990 . -80) (undo-tree-id38991 . -80) (undo-tree-id38992 . -80) (undo-tree-id38993 . -80) (undo-tree-id38994 . -80) (undo-tree-id38995 . -80) (undo-tree-id38996 . -80) (undo-tree-id38997 . -80) (undo-tree-id38998 . -80) (undo-tree-id38999 . -80) (undo-tree-id39000 . -80) (undo-tree-id39001 . -80) (undo-tree-id39002 . -80) (undo-tree-id39003 . -80) (undo-tree-id39004 . -80) (undo-tree-id39005 . -80) (undo-tree-id39006 . -80) (undo-tree-id39007 . -80) (undo-tree-id39008 . -80) (undo-tree-id39009 . -80) (undo-tree-id39010 . -80) (undo-tree-id39011 . -80) (undo-tree-id39012 . -80) (undo-tree-id39013 . -80) (undo-tree-id39014 . -80) (undo-tree-id39015 . -83) (undo-tree-id39016 . -83) (undo-tree-id39017 . -83) (undo-tree-id39018 . -83) (undo-tree-id39019 . -83) (undo-tree-id39020 . -83) (undo-tree-id39021 . -83) (undo-tree-id39022 . -83) (undo-tree-id39023 . -83) (undo-tree-id39024 . -83) (undo-tree-id39025 . -83) (undo-tree-id39026 . -83) (undo-tree-id39027 . -83) (undo-tree-id39028 . -83) (undo-tree-id39029 . -83) (undo-tree-id39030 . -88) (undo-tree-id39031 . -88) (undo-tree-id39032 . -88) (undo-tree-id39033 . -88) (undo-tree-id39034 . -88) (undo-tree-id39035 . -88) (undo-tree-id39036 . -88) (undo-tree-id39037 . -88) (undo-tree-id39038 . -88) (undo-tree-id39039 . -88) (undo-tree-id39040 . -88) (undo-tree-id39041 . -88) (undo-tree-id39042 . -88) (undo-tree-id39043 . -88) (undo-tree-id39044 . -88) (undo-tree-id39045 . -93) (undo-tree-id39046 . -93) (undo-tree-id39047 . -93) (undo-tree-id39048 . -93) (undo-tree-id39049 . -93) (undo-tree-id39050 . -93) (undo-tree-id39051 . -93) (undo-tree-id39052 . -93) (undo-tree-id39053 . -93) (undo-tree-id39054 . -93) (undo-tree-id39055 . -93) (undo-tree-id39056 . -93) (undo-tree-id39057 . -93) (undo-tree-id39058 . -93) (undo-tree-id39059 . -93) (undo-tree-id39060 . -93) (undo-tree-id39061 . -93) (undo-tree-id39062 . -93) (undo-tree-id39063 . -93) (undo-tree-id39064 . -93) (undo-tree-id39065 . -93) (undo-tree-id39066 . -93) (undo-tree-id39067 . -95) (undo-tree-id39068 . -95) (undo-tree-id39069 . -95) (undo-tree-id39070 . -95) (undo-tree-id39071 . -95) (undo-tree-id39072 . -95) (undo-tree-id39073 . -95) (undo-tree-id39074 . -95) (undo-tree-id39075 . -95) (undo-tree-id39076 . -95) (undo-tree-id39077 . -95) (undo-tree-id39078 . -95) (undo-tree-id39079 . -95) (undo-tree-id39080 . -95) (undo-tree-id39081 . -95) (undo-tree-id39082 . -99) (undo-tree-id39083 . -99) (undo-tree-id39084 . -99) (undo-tree-id39085 . -99) (undo-tree-id39086 . -99) (undo-tree-id39087 . -99) (undo-tree-id39088 . -99) (undo-tree-id39089 . -99) (undo-tree-id39090 . -99) (undo-tree-id39091 . -99) (undo-tree-id39092 . -99) (undo-tree-id39093 . -99) (undo-tree-id39094 . -99) (undo-tree-id39095 . -99) (undo-tree-id39096 . -99) (undo-tree-id39097 . -105) (undo-tree-id39098 . -105) (undo-tree-id39099 . -105) (undo-tree-id39100 . -105) (undo-tree-id39101 . -105) (undo-tree-id39102 . -105) (undo-tree-id39103 . -105) (undo-tree-id39104 . -105) (undo-tree-id39105 . -105) (undo-tree-id39106 . -105) (undo-tree-id39107 . -105) (undo-tree-id39108 . -105) (undo-tree-id39109 . -105) (undo-tree-id39110 . -105) (undo-tree-id39111 . -105) (undo-tree-id39112 . -105) (undo-tree-id39113 . -105) (undo-tree-id39114 . -105) (undo-tree-id39115 . -105) (undo-tree-id39116 . -105) (undo-tree-id39117 . -105) (undo-tree-id39118 . -105) (undo-tree-id39119 . -105) (undo-tree-id39120 . -105) (undo-tree-id39121 . -105) (undo-tree-id39122 . -105) (undo-tree-id39123 . -105) (undo-tree-id39124 . -105) (undo-tree-id39125 . -105) (undo-tree-id39126 . -105) (undo-tree-id39127 . -105) (undo-tree-id39128 . -105) (undo-tree-id39129 . -105) (undo-tree-id39130 . -105) (undo-tree-id39131 . -105) (undo-tree-id39132 . -105) (undo-tree-id39133 . -105) (undo-tree-id39134 . -105) (undo-tree-id39135 . -105) (undo-tree-id39136 . -105) (undo-tree-id39137 . -105) (undo-tree-id39138 . -105) (undo-tree-id39139 . -105) (undo-tree-id39140 . -105) (undo-tree-id39141 . -105) (undo-tree-id39142 . -105) (undo-tree-id39143 . -105) (undo-tree-id39144 . -105) (undo-tree-id39145 . -105) (undo-tree-id39146 . -105) (undo-tree-id39147 . -105) (undo-tree-id39148 . -105) (undo-tree-id39149 . -105) (undo-tree-id39150 . -105) (undo-tree-id39151 . -105) (undo-tree-id39152 . -105) (undo-tree-id39153 . -105) (undo-tree-id39154 . -105) (undo-tree-id39155 . -105) (undo-tree-id39156 . -105) (undo-tree-id39157 . -105) (undo-tree-id39158 . -105) (undo-tree-id39159 . -112) (undo-tree-id39160 . -112) (undo-tree-id39161 . -112) (undo-tree-id39162 . -112) (undo-tree-id39163 . -112) (undo-tree-id39164 . -112) (undo-tree-id39165 . -112) (undo-tree-id39166 . -112) (undo-tree-id39167 . -112) (undo-tree-id39168 . -112) (undo-tree-id39169 . -112) (undo-tree-id39170 . -112) (undo-tree-id39171 . -112) (undo-tree-id39172 . -112) (undo-tree-id39173 . -112) (undo-tree-id39174 . -112) (undo-tree-id39175 . -112) (undo-tree-id39176 . -112) (undo-tree-id39177 . -112) (undo-tree-id39178 . -112) (undo-tree-id39179 . -112) (undo-tree-id39180 . -112) (undo-tree-id39181 . -112) (undo-tree-id39182 . -112) (undo-tree-id39183 . -112) (undo-tree-id39184 . -112) (undo-tree-id39185 . -112) (undo-tree-id39186 . -112) (undo-tree-id39187 . -112) (undo-tree-id39188 . -112) (undo-tree-id39189 . -112) (undo-tree-id39190 . -112) (undo-tree-id39191 . -112) (undo-tree-id39192 . -112) (undo-tree-id39193 . -112) (undo-tree-id39194 . -112) (undo-tree-id39195 . -112) (undo-tree-id39196 . -112) (undo-tree-id39197 . -112) (undo-tree-id39198 . -112) (undo-tree-id39199 . -112) (undo-tree-id39200 . -112) (undo-tree-id39201 . -112) (undo-tree-id39202 . -114) (undo-tree-id39203 . -114) (undo-tree-id39204 . -114) (undo-tree-id39205 . -114) (undo-tree-id39206 . -114) (undo-tree-id39207 . -114) (undo-tree-id39208 . -114) (undo-tree-id39209 . -114) (undo-tree-id39210 . -114) (undo-tree-id39211 . -114) (undo-tree-id39212 . -114) (undo-tree-id39213 . -114) (undo-tree-id39214 . -114) (undo-tree-id39215 . -114) (undo-tree-id39216 . -114) (undo-tree-id39217 . -114) (undo-tree-id39218 . -114) (undo-tree-id39219 . -114) (undo-tree-id39220 . -114) (undo-tree-id39221 . -114) (undo-tree-id39222 . -114) (undo-tree-id39223 . -114) (undo-tree-id39224 . -121) (undo-tree-id39225 . -121) (undo-tree-id39226 . -121) (undo-tree-id39227 . -121) (undo-tree-id39228 . -121) (undo-tree-id39229 . -121) (undo-tree-id39230 . -121) (undo-tree-id39231 . -121) (undo-tree-id39232 . -121) (undo-tree-id39233 . -121) (undo-tree-id39234 . -121) (undo-tree-id39235 . -121) (undo-tree-id39236 . -121) (undo-tree-id39237 . -121) (undo-tree-id39238 . -121) (undo-tree-id39239 . -121) (undo-tree-id39240 . -121) (undo-tree-id39241 . -121) (undo-tree-id39242 . -121) (undo-tree-id39243 . -121) (undo-tree-id39244 . -121) (undo-tree-id39245 . -121) (undo-tree-id39246 . -121) (undo-tree-id39247 . -121) (undo-tree-id39248 . -121) (undo-tree-id39249 . -121) (undo-tree-id39250 . -121) (undo-tree-id39251 . -121) (undo-tree-id39252 . -121) (undo-tree-id39253 . -121) (undo-tree-id39254 . -121) (undo-tree-id39255 . -121) (undo-tree-id39256 . -121) (undo-tree-id39257 . -121) (undo-tree-id39258 . -121) (undo-tree-id39259 . -121) (undo-tree-id39260 . -121) (undo-tree-id39261 . -121) (undo-tree-id39262 . -121) (undo-tree-id39263 . -121) (undo-tree-id39264 . -121) (undo-tree-id39265 . -121) (undo-tree-id39266 . -121) (undo-tree-id39267 . -121) (undo-tree-id39268 . -121) (undo-tree-id39269 . -121) (undo-tree-id39270 . -121) (undo-tree-id39271 . -121) (undo-tree-id39272 . -121) (undo-tree-id39273 . -121) (undo-tree-id39274 . -121) (undo-tree-id39275 . -121) (undo-tree-id39276 . -121) (undo-tree-id39277 . -121) (undo-tree-id39278 . -121) (undo-tree-id39279 . -121) (undo-tree-id39280 . -121) (undo-tree-id39281 . -121) (undo-tree-id39282 . -121) (undo-tree-id39283 . -121) (undo-tree-id39284 . -121) (undo-tree-id39285 . -121) (undo-tree-id39286 . -121) (undo-tree-id39287 . -121) (undo-tree-id39288 . -121) (undo-tree-id39289 . -121) (undo-tree-id39290 . -121) (undo-tree-id39291 . -121) (undo-tree-id39292 . -121) (undo-tree-id39293 . -121) (undo-tree-id39294 . -121) (undo-tree-id39295 . -121) (undo-tree-id39296 . -121) (undo-tree-id39297 . -121) (undo-tree-id39298 . -121) (undo-tree-id39299 . -121) (undo-tree-id39300 . -121) (undo-tree-id39301 . -121) (undo-tree-id39302 . -121) (undo-tree-id39303 . -121) (undo-tree-id39304 . -121) (undo-tree-id39305 . -121) (undo-tree-id39306 . -121) (undo-tree-id39307 . -121) (undo-tree-id39308 . -121) (undo-tree-id39309 . -121) (undo-tree-id39310 . -121) (undo-tree-id39311 . -121) (undo-tree-id39312 . -121) (undo-tree-id39313 . -121) (undo-tree-id39314 . -121) (undo-tree-id39315 . -121) (undo-tree-id39316 . -121) (undo-tree-id39317 . -121) (undo-tree-id39318 . -121) (undo-tree-id39319 . -121) (undo-tree-id39320 . -121) (undo-tree-id39321 . -121) (undo-tree-id39322 . -121) (undo-tree-id39323 . -121) (undo-tree-id39324 . -121) (undo-tree-id39325 . -121) (undo-tree-id39326 . -121) (undo-tree-id39327 . -121) (undo-tree-id39328 . -121) (undo-tree-id39329 . -121) (undo-tree-id39330 . -121) (undo-tree-id39331 . -121) (undo-tree-id39332 . -121) (undo-tree-id39333 . -121) (undo-tree-id39334 . -121) (undo-tree-id39335 . -121) (undo-tree-id39336 . -121) (undo-tree-id39337 . -121) (undo-tree-id39338 . -121) (undo-tree-id39339 . -121) (undo-tree-id39340 . -121) (undo-tree-id39341 . -121) (undo-tree-id39342 . -121) (undo-tree-id39343 . -121) (undo-tree-id39344 . -121) (undo-tree-id39345 . -121) (undo-tree-id39346 . -121) (undo-tree-id39347 . -121) (undo-tree-id39348 . -121) (undo-tree-id39349 . -121) (undo-tree-id39350 . -121) (undo-tree-id39351 . -121) (undo-tree-id39352 . -121) (undo-tree-id39353 . -121) (undo-tree-id39354 . -121) (undo-tree-id39355 . -121) (undo-tree-id39356 . -121) (undo-tree-id39357 . -121) (undo-tree-id39358 . -121) (undo-tree-id39359 . -121) (undo-tree-id39360 . -121) (undo-tree-id39361 . -121) (undo-tree-id39362 . -121) (undo-tree-id39363 . -121) (undo-tree-id39364 . -121) (undo-tree-id39365 . -121) (undo-tree-id39366 . -121) (undo-tree-id39367 . -121) (undo-tree-id39368 . -121) (undo-tree-id39369 . -121) (undo-tree-id39370 . -121) (undo-tree-id39371 . -121) (undo-tree-id39372 . -121) (undo-tree-id39373 . -121) (undo-tree-id39374 . -121) (undo-tree-id39375 . -121) (undo-tree-id39376 . -121) (undo-tree-id39377 . -121) (undo-tree-id39378 . -121) (undo-tree-id39379 . -121) (undo-tree-id39380 . -121) (undo-tree-id39381 . -121) (undo-tree-id39382 . -121) (undo-tree-id39383 . -121) (undo-tree-id39384 . -121) (undo-tree-id39385 . -121) (undo-tree-id39386 . -121) (undo-tree-id39387 . -121) (undo-tree-id39388 . -121) (undo-tree-id39389 . -121) (undo-tree-id39390 . -121) (undo-tree-id39391 . -121) (undo-tree-id39392 . -121) (undo-tree-id39393 . -121) (undo-tree-id39394 . -121) (undo-tree-id39395 . -121) (undo-tree-id39396 . -121) (undo-tree-id39397 . -121) (undo-tree-id39398 . -121) (undo-tree-id39399 . -121) (undo-tree-id39400 . -121) (undo-tree-id39401 . -121) (undo-tree-id39402 . -121) (undo-tree-id39403 . -121) (undo-tree-id39404 . -121) (undo-tree-id39405 . -121) (undo-tree-id39406 . -121) (undo-tree-id39407 . -121) (undo-tree-id39408 . -121) (undo-tree-id39409 . -121) (undo-tree-id39410 . -121) (undo-tree-id39411 . -121) (undo-tree-id39412 . -121) (undo-tree-id39413 . -121) (undo-tree-id39414 . -121) (undo-tree-id39415 . -121) (undo-tree-id39416 . -121) (undo-tree-id39417 . -121) (undo-tree-id39418 . -121) (undo-tree-id39419 . -121) (undo-tree-id39420 . -121) (undo-tree-id39421 . -121) (undo-tree-id39422 . -121) (undo-tree-id39423 . -121) (undo-tree-id39424 . -121) (undo-tree-id39425 . -121) (undo-tree-id39426 . -121) (undo-tree-id39427 . -121) (undo-tree-id39428 . -121) (undo-tree-id39429 . -121) (undo-tree-id39430 . -121) (undo-tree-id39431 . -121) (undo-tree-id39432 . -121) (undo-tree-id39433 . -121) (undo-tree-id39434 . -121) (undo-tree-id39435 . -121) (undo-tree-id39436 . -121) (undo-tree-id39437 . -121) (undo-tree-id39438 . -121) (undo-tree-id39439 . -121) (undo-tree-id39440 . -121) (undo-tree-id39441 . -121) (undo-tree-id39442 . -121) (undo-tree-id39443 . -121) (undo-tree-id39444 . -121) (undo-tree-id39445 . -121) (undo-tree-id39446 . -121) (undo-tree-id39447 . -121) (undo-tree-id39448 . -121) (undo-tree-id39449 . -121) (undo-tree-id39450 . -121) (undo-tree-id39451 . -121) (undo-tree-id39452 . -121) (undo-tree-id39453 . -121) (undo-tree-id39454 . -143) (undo-tree-id39455 . -143) (undo-tree-id39456 . -143) (undo-tree-id39457 . -143) (undo-tree-id39458 . -143) (undo-tree-id39459 . -143) (undo-tree-id39460 . -143) (undo-tree-id39461 . -143) (undo-tree-id39462 . -143) (undo-tree-id39463 . -143) (undo-tree-id39464 . -143) (undo-tree-id39465 . -143) (undo-tree-id39466 . -143) (undo-tree-id39467 . -143) (undo-tree-id39468 . -143) (undo-tree-id39469 . -143) (undo-tree-id39470 . -143) (undo-tree-id39471 . -143) (undo-tree-id39472 . -143) (undo-tree-id39473 . -143) (undo-tree-id39474 . -143) (undo-tree-id39475 . -143) (undo-tree-id39476 . -143) (undo-tree-id39477 . -143) (undo-tree-id39478 . -143) (undo-tree-id39479 . -143) (undo-tree-id39480 . -143) (undo-tree-id39481 . -143) (undo-tree-id39482 . -143) (undo-tree-id39483 . -143) (undo-tree-id39484 . -143) (undo-tree-id39485 . -143) (undo-tree-id39486 . -143) (undo-tree-id39487 . -143) (undo-tree-id39488 . -143) (undo-tree-id39489 . -143) (undo-tree-id39490 . -143) (undo-tree-id39491 . -143) (undo-tree-id39492 . -143) (undo-tree-id39493 . -143) (undo-tree-id39494 . -143) (undo-tree-id39495 . -143) (undo-tree-id39496 . -143) (undo-tree-id39497 . -143) (undo-tree-id39498 . -143) (undo-tree-id39499 . -143) (undo-tree-id39500 . -143) (undo-tree-id39501 . -143) (undo-tree-id39502 . -143) (undo-tree-id39503 . -143) (undo-tree-id39504 . -143) (undo-tree-id39505 . -143) (undo-tree-id39506 . -143) (undo-tree-id39507 . -143) (undo-tree-id39508 . -143) (undo-tree-id39509 . -143) (undo-tree-id39510 . -143) (undo-tree-id39511 . -143) (undo-tree-id39512 . -143) (undo-tree-id39513 . -143) (undo-tree-id39514 . -143) (undo-tree-id39515 . -143) (undo-tree-id39516 . -143) (undo-tree-id39517 . -78) (7320 . 7398) (#(" Then at time step 1 the model will forecast time steps 2 to 11, and so on. " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 56 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 69 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7385) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7385) (undo-tree-id39518 . -1) (undo-tree-id39519 . -1) (undo-tree-id39520 . -1) (undo-tree-id39521 . -1) (undo-tree-id39522 . -1) (undo-tree-id39523 . -1) (undo-tree-id39524 . -1) (undo-tree-id39525 . -1) (undo-tree-id39526 . -1) (undo-tree-id39527 . -1) (undo-tree-id39528 . -1) (undo-tree-id39529 . -1) (undo-tree-id39530 . -1) (undo-tree-id39531 . -1) (undo-tree-id39532 . -1) (undo-tree-id39533 . -1) (undo-tree-id39534 . -1) (undo-tree-id39535 . -1) (undo-tree-id39536 . -1) 7386) nil (25772 51630 54754 32000) 0 nil])
([nil nil ((#("Then " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7388) (undo-tree-id38915 . -4) (undo-tree-id38916 . 5) (undo-tree-id38917 . -5)) nil (25772 51630 53965 688000) 0 nil])
([nil nil ((7388 . 7389) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7388)) nil (25772 51630 53951 320000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 8399) (undo-tree-id39938 . -9) (undo-tree-id39939 . -10) (undo-tree-id39940 . -10) (undo-tree-id39941 . -10) (undo-tree-id39942 . -10) (undo-tree-id39943 . -10) (undo-tree-id39944 . -10) (undo-tree-id39945 . -10) (undo-tree-id39946 . -10) (undo-tree-id39947 . -10) (undo-tree-id39948 . -10) (undo-tree-id39949 . -10) (undo-tree-id39950 . -10) (undo-tree-id39951 . -10) (undo-tree-id39952 . -10) (undo-tree-id39953 . -10) (undo-tree-id39954 . -10) (undo-tree-id39955 . -10) (t 25772 51630 122699 280000)) nil (25772 51679 325617 993000) 0 nil])
([nil nil ((#("+begin_src python :result outputs" 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t)) . 8402) (undo-tree-id39934 . -32) (undo-tree-id39935 . -1) (undo-tree-id39936 . -33) (undo-tree-id39937 . -33)) nil (25772 51679 325605 592000) 0 nil])
([nil nil ((8417 . 8423) (8411 . 8417) (8407 . 8411) (8402 . 8407)) nil (25772 51679 325602 292000) 0 nil])
([nil nil ((#("It may be surprising that the targets will contain values that appear in the
inputs. At each time step, the model only knows about past time steps,
so it cannot look ahead. It is said to be a causal model.

To turn the model into a sequence-to-sequence model, we must set
return_sequences=True in all recurrent layers, and
we must apply the output Dense layer at every time step. 
" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 13 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 77 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 148 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 206 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 207 272 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 272 278 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 278 279 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 279 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 288 323 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 323 381 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8701) (undo-tree-id39863 . -380) (undo-tree-id39864 . -323) (undo-tree-id39865 . -323) (undo-tree-id39866 . -19) (undo-tree-id39867 . -19) (undo-tree-id39868 . -19) (undo-tree-id39869 . -19) (undo-tree-id39870 . -19) (undo-tree-id39871 . -19) (undo-tree-id39872 . -19) (undo-tree-id39873 . -19) (undo-tree-id39874 . -21) (undo-tree-id39875 . -21) (undo-tree-id39876 . -21) (undo-tree-id39877 . -21) (undo-tree-id39878 . -21) (undo-tree-id39879 . -21) (undo-tree-id39880 . -21) (undo-tree-id39881 . -21) (undo-tree-id39882 . -381) (undo-tree-id39883 . -323) (undo-tree-id39884 . -77) (undo-tree-id39885 . -77) (undo-tree-id39886 . -77) (undo-tree-id39887 . -77) (undo-tree-id39888 . -77) (undo-tree-id39889 . -77) (undo-tree-id39890 . -77) (undo-tree-id39891 . -77) (undo-tree-id39892 . -148) (undo-tree-id39893 . -148) (undo-tree-id39894 . -148) (undo-tree-id39895 . -148) (undo-tree-id39896 . -148) (undo-tree-id39897 . -148) (undo-tree-id39898 . -148) (undo-tree-id39899 . -148) (undo-tree-id39900 . -206) (undo-tree-id39901 . -206) (undo-tree-id39902 . -206) (undo-tree-id39903 . -206) (undo-tree-id39904 . -206) (undo-tree-id39905 . -206) (undo-tree-id39906 . -206) (undo-tree-id39907 . -206) (undo-tree-id39908 . -207) (undo-tree-id39909 . -207) (undo-tree-id39910 . -207) (undo-tree-id39911 . -207) (undo-tree-id39912 . -207) (undo-tree-id39913 . -207) (undo-tree-id39914 . -207) (undo-tree-id39915 . -207) (undo-tree-id39916 . -272) (undo-tree-id39917 . -272) (undo-tree-id39918 . -272) (undo-tree-id39919 . -272) (undo-tree-id39920 . -272) (undo-tree-id39921 . -272) (undo-tree-id39922 . -272) (undo-tree-id39923 . -272) (undo-tree-id39924 . -323) (undo-tree-id39925 . -323) (undo-tree-id39926 . -323) (undo-tree-id39927 . -323) (undo-tree-id39928 . -323) (undo-tree-id39929 . -323) (undo-tree-id39930 . -323) (undo-tree-id39931 . -323) (undo-tree-id39932 . -323) (undo-tree-id39933 . -381) 9024) nil (25772 51679 325598 401000) 0 nil])
([nil nil ((7459 . 7461)) nil (25772 51679 325502 177000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7460 . 7461) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7841) (7460 . 7842)) nil (25772 51679 325500 892000) 0 nil])
([nil nil ((7459 . 7461) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7459) (undo-tree-id39818 . -1) (undo-tree-id39819 . -1) (undo-tree-id39820 . -1) (undo-tree-id39821 . -1) (undo-tree-id39822 . -1) (undo-tree-id39823 . -1) (undo-tree-id39824 . -1) (undo-tree-id39825 . -1) (undo-tree-id39826 . -1) (undo-tree-id39827 . -1) (undo-tree-id39828 . -1) (undo-tree-id39829 . -1) (undo-tree-id39830 . -1) (undo-tree-id39831 . -1) (undo-tree-id39832 . -1) (undo-tree-id39833 . -1) (undo-tree-id39834 . -1) (undo-tree-id39835 . -1) (undo-tree-id39836 . -1) (undo-tree-id39837 . -1) (undo-tree-id39838 . -1) (undo-tree-id39839 . -1) (undo-tree-id39840 . -1) (undo-tree-id39841 . -1) (undo-tree-id39842 . -1) (undo-tree-id39843 . -1) (undo-tree-id39844 . -1) (undo-tree-id39845 . -1) (undo-tree-id39846 . -1) (undo-tree-id39847 . -1) (undo-tree-id39848 . -1) (undo-tree-id39849 . -1) (undo-tree-id39850 . -1) (undo-tree-id39851 . -1) (undo-tree-id39852 . -1) (undo-tree-id39853 . -1) (undo-tree-id39854 . -1) (undo-tree-id39855 . -1) (undo-tree-id39856 . -1) (undo-tree-id39857 . -1) (undo-tree-id39858 . -1) (undo-tree-id39859 . -1) (undo-tree-id39860 . -1) (undo-tree-id39861 . -1) (undo-tree-id39862 . -1) 7460) nil (25772 51679 325496 145000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7839) (undo-tree-id39691 . -1) (undo-tree-id39692 . -1) (undo-tree-id39693 . -1) (undo-tree-id39694 . -1) (undo-tree-id39695 . -1) (undo-tree-id39696 . -1) (undo-tree-id39697 . -1) (undo-tree-id39698 . -1) (undo-tree-id39699 . -1) (undo-tree-id39700 . -1) (undo-tree-id39701 . -1) (undo-tree-id39702 . -1) (undo-tree-id39703 . -1) (undo-tree-id39704 . -1) (undo-tree-id39705 . -1) (undo-tree-id39706 . -1) (undo-tree-id39707 . -1) (undo-tree-id39708 . -1) (undo-tree-id39709 . -1) (undo-tree-id39710 . -1) (undo-tree-id39711 . -1) (undo-tree-id39712 . -1) (undo-tree-id39713 . -1) (undo-tree-id39714 . -1) (undo-tree-id39715 . -1) (undo-tree-id39716 . -1) (undo-tree-id39717 . -1) (undo-tree-id39718 . -1) (undo-tree-id39719 . -1) (undo-tree-id39720 . -1) (undo-tree-id39721 . -1) (undo-tree-id39722 . -1) (undo-tree-id39723 . -1) (undo-tree-id39724 . -1) (undo-tree-id39725 . -1) (undo-tree-id39726 . -1) (undo-tree-id39727 . -1) (undo-tree-id39728 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7840) (undo-tree-id39729 . -1) (undo-tree-id39730 . -1) (undo-tree-id39731 . -1) (undo-tree-id39732 . -1) (undo-tree-id39733 . -1) (undo-tree-id39734 . -1) (undo-tree-id39735 . -1) (undo-tree-id39736 . -1) (undo-tree-id39737 . -1) (undo-tree-id39738 . -1) (undo-tree-id39739 . -1) (undo-tree-id39740 . -1) (undo-tree-id39741 . -1) (undo-tree-id39742 . -1) (undo-tree-id39743 . -1) (undo-tree-id39744 . -1) (undo-tree-id39745 . -1) (undo-tree-id39746 . -1) (undo-tree-id39747 . -1) (undo-tree-id39748 . -1) (undo-tree-id39749 . -1) (undo-tree-id39750 . -1) (undo-tree-id39751 . -1) (undo-tree-id39752 . -1) (undo-tree-id39753 . -1) (undo-tree-id39754 . -1) (undo-tree-id39755 . -1) (undo-tree-id39756 . -1) (undo-tree-id39757 . -1) (undo-tree-id39758 . -1) (undo-tree-id39759 . -1) (undo-tree-id39760 . -1) (undo-tree-id39761 . -1) (undo-tree-id39762 . -1) (undo-tree-id39763 . -1) (undo-tree-id39764 . -1) (7782 . 7783) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7782) (undo-tree-id39765 . -1) (7731 . 7732) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7731) (undo-tree-id39766 . -1) (7666 . 7667) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7666) (undo-tree-id39767 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7666) (undo-tree-id39768 . -1) (7608 . 7609) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7608) (undo-tree-id39769 . -1) (7537 . 7538) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7537) (undo-tree-id39770 . -1) (7460 . 7461) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7460) (undo-tree-id39771 . -1) (undo-tree-id39772 . -1) (undo-tree-id39773 . -1) (undo-tree-id39774 . -1) (undo-tree-id39775 . -1) (undo-tree-id39776 . -1) (undo-tree-id39777 . -1) (undo-tree-id39778 . -1) (undo-tree-id39779 . -1) (undo-tree-id39780 . -1) (undo-tree-id39781 . -1) (undo-tree-id39782 . -1) (undo-tree-id39783 . -1) (undo-tree-id39784 . -1) (undo-tree-id39785 . -1) (undo-tree-id39786 . -1) (undo-tree-id39787 . -1) (undo-tree-id39788 . -1) (undo-tree-id39789 . -1) (undo-tree-id39790 . -1) (undo-tree-id39791 . -1) (undo-tree-id39792 . -1) (undo-tree-id39793 . -1) (undo-tree-id39794 . -1) (undo-tree-id39795 . -1) (undo-tree-id39796 . -1) (undo-tree-id39797 . -1) (undo-tree-id39798 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -7461) (undo-tree-id39799 . -1) (undo-tree-id39800 . 1) (undo-tree-id39801 . -1) (undo-tree-id39802 . -1) (undo-tree-id39803 . -1) (undo-tree-id39804 . -1) (undo-tree-id39805 . -1) (undo-tree-id39806 . -1) (undo-tree-id39807 . -1) (undo-tree-id39808 . -1) (undo-tree-id39809 . -1) (undo-tree-id39810 . -1) (undo-tree-id39811 . -1) (undo-tree-id39812 . -1) (undo-tree-id39813 . -1) (undo-tree-id39814 . -1) (undo-tree-id39815 . -1) (undo-tree-id39816 . -1) (undo-tree-id39817 . -1) 7460) nil (25772 51679 325234 293000) 0 nil])
([nil nil ((#("It may be surprising that the " 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7461) (undo-tree-id40870 . -29) (undo-tree-id40871 . 30) (undo-tree-id40872 . -29) (undo-tree-id40873 . -29) (undo-tree-id40874 . -9) (undo-tree-id40875 . -9) (undo-tree-id40876 . -9) (undo-tree-id40877 . -9) (undo-tree-id40878 . -9) (undo-tree-id40879 . -9) (undo-tree-id40880 . -9) (undo-tree-id40881 . -9) (undo-tree-id40882 . -7) (undo-tree-id40883 . -7) (undo-tree-id40884 . -7) (undo-tree-id40885 . -7) (undo-tree-id40886 . -7) (undo-tree-id40887 . -7) (undo-tree-id40888 . -7) (undo-tree-id40889 . -7) (undo-tree-id40890 . -7) (undo-tree-id40891 . -7) (undo-tree-id40892 . -7) (undo-tree-id40893 . -7) (undo-tree-id40894 . -7) (undo-tree-id40895 . -7) (undo-tree-id40896 . -7) (undo-tree-id40897 . -7) (undo-tree-id40898 . -7) (undo-tree-id40899 . -7) (undo-tree-id40900 . -7) (undo-tree-id40901 . -7) (undo-tree-id40902 . -7) (undo-tree-id40903 . -7) (undo-tree-id40904 . -7) (undo-tree-id40905 . -7) (undo-tree-id40906 . -7) (undo-tree-id40907 . -7) (undo-tree-id40908 . -7) (undo-tree-id40909 . -7) (undo-tree-id40910 . -7) (undo-tree-id40911 . -7) (undo-tree-id40912 . -7) (undo-tree-id40913 . -7) (undo-tree-id40914 . -7) (undo-tree-id40915 . -7) (undo-tree-id40916 . -7) (undo-tree-id40917 . -7) (undo-tree-id40918 . -3) (undo-tree-id40919 . -3) (undo-tree-id40920 . -3) (undo-tree-id40921 . -3) (undo-tree-id40922 . -3) (undo-tree-id40923 . -3) (undo-tree-id40924 . -3) (undo-tree-id40925 . -3) (undo-tree-id40926 . -3) (undo-tree-id40927 . -3) (undo-tree-id40928 . -3) (undo-tree-id40929 . -3) (undo-tree-id40930 . -3) (undo-tree-id40931 . -3) (undo-tree-id40932 . -3) (undo-tree-id40933 . -30) (undo-tree-id40934 . -29) (undo-tree-id40935 . -1) (undo-tree-id40936 . -1) (undo-tree-id40937 . -1) (undo-tree-id40938 . -1) (undo-tree-id40939 . -1) (undo-tree-id40940 . -1) (undo-tree-id40941 . -1) (undo-tree-id40942 . -1) (undo-tree-id40943 . -1) (undo-tree-id40944 . -1) (undo-tree-id40945 . -1) (undo-tree-id40946 . -1) (undo-tree-id40947 . -1) (undo-tree-id40948 . -1) (undo-tree-id40949 . -1) (undo-tree-id40950 . -1) (undo-tree-id40951 . -1) (undo-tree-id40952 . -1) (undo-tree-id40953 . -1) (undo-tree-id40954 . -1) (undo-tree-id40955 . -1) (undo-tree-id40956 . -1) (undo-tree-id40957 . -5) (undo-tree-id40958 . -5) (undo-tree-id40959 . -5) (undo-tree-id40960 . -5) (undo-tree-id40961 . -5) (undo-tree-id40962 . -5) (undo-tree-id40963 . -5) (undo-tree-id40964 . -5) (undo-tree-id40965 . -5) (undo-tree-id40966 . -5) (undo-tree-id40967 . -5) (undo-tree-id40968 . -5) (undo-tree-id40969 . -5) (undo-tree-id40970 . -5) (undo-tree-id40971 . -5) (undo-tree-id40972 . -5) (undo-tree-id40973 . -5) (undo-tree-id40974 . -5) (undo-tree-id40975 . -5) (undo-tree-id40976 . -5) (undo-tree-id40977 . -5) (undo-tree-id40978 . -5) (undo-tree-id40979 . -8) (undo-tree-id40980 . -8) (undo-tree-id40981 . -8) (undo-tree-id40982 . -8) (undo-tree-id40983 . -8) (undo-tree-id40984 . -8) (undo-tree-id40985 . -8) (undo-tree-id40986 . -8) (undo-tree-id40987 . -8) (undo-tree-id40988 . -8) (undo-tree-id40989 . -8) (undo-tree-id40990 . -8) (undo-tree-id40991 . -8) (undo-tree-id40992 . -8) (undo-tree-id40993 . -8) (undo-tree-id40994 . -8) (undo-tree-id40995 . -8) (undo-tree-id40996 . -8) (undo-tree-id40997 . -8) (undo-tree-id40998 . -8) (undo-tree-id40999 . -8) (undo-tree-id41000 . -8) (undo-tree-id41001 . -19) (undo-tree-id41002 . -19) (undo-tree-id41003 . -19) (undo-tree-id41004 . -19) (undo-tree-id41005 . -19) (undo-tree-id41006 . -19) (undo-tree-id41007 . -19) (undo-tree-id41008 . -19) (undo-tree-id41009 . -19) (undo-tree-id41010 . -19) (undo-tree-id41011 . -19) (undo-tree-id41012 . -19) (undo-tree-id41013 . -19) (undo-tree-id41014 . -19) (undo-tree-id41015 . -19) (undo-tree-id41016 . -19) (undo-tree-id41017 . -19) (undo-tree-id41018 . -19) (undo-tree-id41019 . -19) (undo-tree-id41020 . -19) (undo-tree-id41021 . -19) (undo-tree-id41022 . -19) (undo-tree-id41023 . -19) (undo-tree-id41024 . -19) (undo-tree-id41025 . -19) (undo-tree-id41026 . -19) (undo-tree-id41027 . -19) (undo-tree-id41028 . -19) (undo-tree-id41029 . -19) (undo-tree-id41030 . -24) (undo-tree-id41031 . -24) (undo-tree-id41032 . -24) (undo-tree-id41033 . -24) (undo-tree-id41034 . -24) (undo-tree-id41035 . -24) (undo-tree-id41036 . -24) (undo-tree-id41037 . -24) (undo-tree-id41038 . -24) (undo-tree-id41039 . -24) (undo-tree-id41040 . -24) (undo-tree-id41041 . -24) (undo-tree-id41042 . -24) (undo-tree-id41043 . -24) (undo-tree-id41044 . -24) (undo-tree-id41045 . -24) (undo-tree-id41046 . -24) (undo-tree-id41047 . -24) (undo-tree-id41048 . -24) (undo-tree-id41049 . -24) (undo-tree-id41050 . -24) (undo-tree-id41051 . -24) (undo-tree-id41052 . -28) (undo-tree-id41053 . -28) (undo-tree-id41054 . -28) (undo-tree-id41055 . -28) (undo-tree-id41056 . -28) (undo-tree-id41057 . -28) (undo-tree-id41058 . -28) (undo-tree-id41059 . -28) (undo-tree-id41060 . -28) (undo-tree-id41061 . -28) (undo-tree-id41062 . -28) (undo-tree-id41063 . -28) (undo-tree-id41064 . -28) (undo-tree-id41065 . -28) (undo-tree-id41066 . -28) (undo-tree-id41067 . -28) (undo-tree-id41068 . -28) (undo-tree-id41069 . -28) (undo-tree-id41070 . -28) (undo-tree-id41071 . -28) (undo-tree-id41072 . -28) (undo-tree-id41073 . -28) (undo-tree-id41074 . -29) (undo-tree-id41075 . -29) (undo-tree-id41076 . -29) (undo-tree-id41077 . -29) (undo-tree-id41078 . -29) (undo-tree-id41079 . -29) (undo-tree-id41080 . -29) (undo-tree-id41081 . -29) (undo-tree-id41082 . -29) (undo-tree-id41083 . -29) (undo-tree-id41084 . -29) (undo-tree-id41085 . -29) (undo-tree-id41086 . -29) (undo-tree-id41087 . -29) (undo-tree-id41088 . -29) (undo-tree-id41089 . -29) (undo-tree-id41090 . -29) (undo-tree-id41091 . -29) (undo-tree-id41092 . -29) (undo-tree-id41093 . -29) (undo-tree-id41094 . -29) (undo-tree-id41095 . -29) (undo-tree-id41096 . -29) (undo-tree-id41097 . -30) 7490 (t 25772 51679 394469 44000)) nil (25772 51699 790812 999000) 0 nil])
([nil nil ((7461 . 7462) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7461)) nil (25772 51699 790520 855000) 0 nil])
([nil nil ((#("will " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7469) (undo-tree-id40853 . -4) (undo-tree-id40854 . -3) (undo-tree-id40855 . -3) (undo-tree-id40856 . -3) (undo-tree-id40857 . -3) (undo-tree-id40858 . -3) (undo-tree-id40859 . -3) (undo-tree-id40860 . -3) (undo-tree-id40861 . -3) (undo-tree-id40862 . -3) (undo-tree-id40863 . -3) (undo-tree-id40864 . -3) (undo-tree-id40865 . -3) (undo-tree-id40866 . -3) (undo-tree-id40867 . -3) (undo-tree-id40868 . -3) (undo-tree-id40869 . -5)) nil (25772 51699 790518 809000) 0 nil])
([nil nil ((7459 . 7805) (#("- At each time step, the model only knows about past time steps, so it cannot look ahead. It is said to be a causal model. To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers, and we must apply the output Dense layer at every time step.
- Targets contain values that appear in the inputs" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 64 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 64 65 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 65 122 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 122 123 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 123 187 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 187 188 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 188 194 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 194 195 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 195 204 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 204 238 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 238 239 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 239 295 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 295 296 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 296 297 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 297 298 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 298 339 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 339 340 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 340 346 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7459) (undo-tree-id39956 . -346) (undo-tree-id39957 . -346) (undo-tree-id39958 . 33) (undo-tree-id39959 . -298) (undo-tree-id39960 . -298) (undo-tree-id39961 . 47) (undo-tree-id39962 . -346) (undo-tree-id39963 . -346) (undo-tree-id39964 . -346) (undo-tree-id39965 . -346) (undo-tree-id39966 . -346) (undo-tree-id39967 . -346) (undo-tree-id39968 . -346) (undo-tree-id39969 . -346) (undo-tree-id39970 . -346) (undo-tree-id39971 . -346) (undo-tree-id39972 . -346) (undo-tree-id39973 . -346) (undo-tree-id39974 . -346) (undo-tree-id39975 . -346) (undo-tree-id39976 . -346) (undo-tree-id39977 . -346) (undo-tree-id39978 . -346) (undo-tree-id39979 . -346) (undo-tree-id39980 . -346) (undo-tree-id39981 . -346) (undo-tree-id39982 . -346) (undo-tree-id39983 . -346) (undo-tree-id39984 . -346) (undo-tree-id39985 . -346) (undo-tree-id39986 . -346) (undo-tree-id39987 . -346) (undo-tree-id39988 . -346) (undo-tree-id39989 . -346) (undo-tree-id39990 . -346) (undo-tree-id39991 . -346) (undo-tree-id39992 . -346) (undo-tree-id39993 . -346) (undo-tree-id39994 . -346) (undo-tree-id39995 . -346) (undo-tree-id39996 . -346) (undo-tree-id39997 . -297) (undo-tree-id39998 . -297) (undo-tree-id39999 . -297) (undo-tree-id40000 . -297) (undo-tree-id40001 . -297) (undo-tree-id40002 . -297) (undo-tree-id40003 . -297) (undo-tree-id40004 . -297) (undo-tree-id40005 . -297) (undo-tree-id40006 . -297) (undo-tree-id40007 . -297) (undo-tree-id40008 . -297) (undo-tree-id40009 . -297) (undo-tree-id40010 . -297) (undo-tree-id40011 . -297) (undo-tree-id40012 . -297) (undo-tree-id40013 . -297) (undo-tree-id40014 . -297) (undo-tree-id40015 . -297) (undo-tree-id40016 . -297) (undo-tree-id40017 . -297) (undo-tree-id40018 . -297) (undo-tree-id40019 . -297) (undo-tree-id40020 . -297) (undo-tree-id40021 . -297) (undo-tree-id40022 . -346) (undo-tree-id40023 . -346) (undo-tree-id40024 . -346) (undo-tree-id40025 . -346) (undo-tree-id40026 . -346) (undo-tree-id40027 . -346) (undo-tree-id40028 . -346) (undo-tree-id40029 . -346) (undo-tree-id40030 . -346) (undo-tree-id40031 . -346) (undo-tree-id40032 . -346) (undo-tree-id40033 . -346) (undo-tree-id40034 . -346) (undo-tree-id40035 . -346) (undo-tree-id40036 . -346) (undo-tree-id40037 . -346) (undo-tree-id40038 . -346) (undo-tree-id40039 . -346) (undo-tree-id40040 . -346) (undo-tree-id40041 . -346) (undo-tree-id40042 . -346) (undo-tree-id40043 . -346) (undo-tree-id40044 . -346) (undo-tree-id40045 . -346) (undo-tree-id40046 . -346) (undo-tree-id40047 . -346) (undo-tree-id40048 . -346) (undo-tree-id40049 . -346) (undo-tree-id40050 . -346) (undo-tree-id40051 . -346) (undo-tree-id40052 . -346) (undo-tree-id40053 . -346) (undo-tree-id40054 . -346) (undo-tree-id40055 . -346) (undo-tree-id40056 . -346) (undo-tree-id40057 . -346) (undo-tree-id40058 . -346) (undo-tree-id40059 . -346) (undo-tree-id40060 . -346) (undo-tree-id40061 . -346) (undo-tree-id40062 . -346) (undo-tree-id40063 . -346) (undo-tree-id40064 . -346) (undo-tree-id40065 . -346) (undo-tree-id40066 . -346) (undo-tree-id40067 . -346) (undo-tree-id40068 . -346) (undo-tree-id40069 . -346) (undo-tree-id40070 . -346) (undo-tree-id40071 . -346) (undo-tree-id40072 . -346) (undo-tree-id40073 . -346) (undo-tree-id40074 . -346) (undo-tree-id40075 . -346) (undo-tree-id40076 . -346) (undo-tree-id40077 . -346) (undo-tree-id40078 . -346) (undo-tree-id40079 . -346) (undo-tree-id40080 . -346) (undo-tree-id40081 . -346) (undo-tree-id40082 . -346) (undo-tree-id40083 . -346) (undo-tree-id40084 . -346) (undo-tree-id40085 . -346) (undo-tree-id40086 . -346) (undo-tree-id40087 . -346) (undo-tree-id40088 . -346) (undo-tree-id40089 . -346) (undo-tree-id40090 . -346) (undo-tree-id40091 . -346) (undo-tree-id40092 . -346) (undo-tree-id40093 . -346) (undo-tree-id40094 . -346) (undo-tree-id40095 . -346) (undo-tree-id40096 . -346) (undo-tree-id40097 . -346) (undo-tree-id40098 . -346) (undo-tree-id40099 . -346) (undo-tree-id40100 . -346) (undo-tree-id40101 . -346) (undo-tree-id40102 . -298) (undo-tree-id40103 . -298) (undo-tree-id40104 . -298) (undo-tree-id40105 . -298) (undo-tree-id40106 . -298) (undo-tree-id40107 . -298) (undo-tree-id40108 . -298) (undo-tree-id40109 . -298) (undo-tree-id40110 . -298) (undo-tree-id40111 . -298) (undo-tree-id40112 . -298) (undo-tree-id40113 . -298) (undo-tree-id40114 . -298) (undo-tree-id40115 . -298) (undo-tree-id40116 . -298) (undo-tree-id40117 . -298) (undo-tree-id40118 . -298) (undo-tree-id40119 . -298) (undo-tree-id40120 . -298) (undo-tree-id40121 . -298) (undo-tree-id40122 . -298) (undo-tree-id40123 . -298) (undo-tree-id40124 . -298) (undo-tree-id40125 . -298) (undo-tree-id40126 . -298) (undo-tree-id40127 . -298) (undo-tree-id40128 . -298) (undo-tree-id40129 . -298) (undo-tree-id40130 . -298) (undo-tree-id40131 . -298) (undo-tree-id40132 . -298) (undo-tree-id40133 . -298) (undo-tree-id40134 . -298) (undo-tree-id40135 . -298) (undo-tree-id40136 . -298) (undo-tree-id40137 . -298) (undo-tree-id40138 . -298) (undo-tree-id40139 . -298) (undo-tree-id40140 . -298) (undo-tree-id40141 . -298) (undo-tree-id40142 . -298) (undo-tree-id40143 . -298) (undo-tree-id40144 . -298) (undo-tree-id40145 . -298) (undo-tree-id40146 . -298) (undo-tree-id40147 . -298) (undo-tree-id40148 . -298) (undo-tree-id40149 . -298) (undo-tree-id40150 . -298) (undo-tree-id40151 . -298) (undo-tree-id40152 . -298) (undo-tree-id40153 . -298) (undo-tree-id40154 . -298) (undo-tree-id40155 . -298) (undo-tree-id40156 . -298) (undo-tree-id40157 . -298) (undo-tree-id40158 . -298) (undo-tree-id40159 . -298) (undo-tree-id40160 . -298) (undo-tree-id40161 . -298) (undo-tree-id40162 . -298) (undo-tree-id40163 . -298) (undo-tree-id40164 . -298) (undo-tree-id40165 . -298) (undo-tree-id40166 . -298) (undo-tree-id40167 . -298) (undo-tree-id40168 . -298) (undo-tree-id40169 . -298) (undo-tree-id40170 . -298) (undo-tree-id40171 . -298) (undo-tree-id40172 . -298) (undo-tree-id40173 . -298) (undo-tree-id40174 . -298) (undo-tree-id40175 . -298) (undo-tree-id40176 . -298) (undo-tree-id40177 . -298) (undo-tree-id40178 . -298) (undo-tree-id40179 . -298) (undo-tree-id40180 . -298) (undo-tree-id40181 . -298) (undo-tree-id40182 . -298) (undo-tree-id40183 . -298) (undo-tree-id40184 . -298) (undo-tree-id40185 . -298) (undo-tree-id40186 . -298) (undo-tree-id40187 . -298) (undo-tree-id40188 . -298) (undo-tree-id40189 . -298) (undo-tree-id40190 . -298) (undo-tree-id40191 . -298) (undo-tree-id40192 . -298) (undo-tree-id40193 . -298) (undo-tree-id40194 . -298) (undo-tree-id40195 . -298) (undo-tree-id40196 . -298) (undo-tree-id40197 . -298) (undo-tree-id40198 . -298) (undo-tree-id40199 . -298) (undo-tree-id40200 . -298) (undo-tree-id40201 . -298) (undo-tree-id40202 . -298) (undo-tree-id40203 . -298) (undo-tree-id40204 . -298) (undo-tree-id40205 . -298) (undo-tree-id40206 . -298) (undo-tree-id40207 . -298) (undo-tree-id40208 . -298) (undo-tree-id40209 . -298) (undo-tree-id40210 . -298) (undo-tree-id40211 . -298) (undo-tree-id40212 . -298) (undo-tree-id40213 . -298) (undo-tree-id40214 . -298) (undo-tree-id40215 . -298) (undo-tree-id40216 . -298) (undo-tree-id40217 . -298) (undo-tree-id40218 . -298) (undo-tree-id40219 . -298) (undo-tree-id40220 . -298) (undo-tree-id40221 . -298) (undo-tree-id40222 . -298) (undo-tree-id40223 . -298) (undo-tree-id40224 . -298) (undo-tree-id40225 . -298) (undo-tree-id40226 . -298) (undo-tree-id40227 . -298) (undo-tree-id40228 . -298) (undo-tree-id40229 . -298) (undo-tree-id40230 . -298) (undo-tree-id40231 . -298) (undo-tree-id40232 . -298) (undo-tree-id40233 . -298) (undo-tree-id40234 . -298) (undo-tree-id40235 . -298) (undo-tree-id40236 . -298) (undo-tree-id40237 . -298) (undo-tree-id40238 . -298) (undo-tree-id40239 . -298) (undo-tree-id40240 . -298) (undo-tree-id40241 . -298) (undo-tree-id40242 . -298) (undo-tree-id40243 . -298) (undo-tree-id40244 . -298) (undo-tree-id40245 . -298) (undo-tree-id40246 . -298) (undo-tree-id40247 . -298) (undo-tree-id40248 . -298) (undo-tree-id40249 . -298) (undo-tree-id40250 . -298) (undo-tree-id40251 . -298) (undo-tree-id40252 . -298) (undo-tree-id40253 . -298) (undo-tree-id40254 . -298) (undo-tree-id40255 . -298) (undo-tree-id40256 . -298) (undo-tree-id40257 . -298) (undo-tree-id40258 . -298) (undo-tree-id40259 . -298) (undo-tree-id40260 . -298) (undo-tree-id40261 . -298) (undo-tree-id40262 . -298) (undo-tree-id40263 . -298) (undo-tree-id40264 . -298) (undo-tree-id40265 . -298) (undo-tree-id40266 . -298) (undo-tree-id40267 . -298) (undo-tree-id40268 . -298) (undo-tree-id40269 . -298) (undo-tree-id40270 . -298) (undo-tree-id40271 . -298) (undo-tree-id40272 . -298) (undo-tree-id40273 . -298) (undo-tree-id40274 . -298) (undo-tree-id40275 . -298) (undo-tree-id40276 . -298) (undo-tree-id40277 . -298) (undo-tree-id40278 . -298) (undo-tree-id40279 . -298) (undo-tree-id40280 . -298) (undo-tree-id40281 . -298) (undo-tree-id40282 . -298) (undo-tree-id40283 . -298) (undo-tree-id40284 . -298) (undo-tree-id40285 . -298) (undo-tree-id40286 . -298) (undo-tree-id40287 . -298) (undo-tree-id40288 . -298) (undo-tree-id40289 . -298) (undo-tree-id40290 . -298) (undo-tree-id40291 . -298) (undo-tree-id40292 . -298) (undo-tree-id40293 . -298) (undo-tree-id40294 . -298) (undo-tree-id40295 . -298) (undo-tree-id40296 . -298) (undo-tree-id40297 . -298) (undo-tree-id40298 . -298) (undo-tree-id40299 . -298) (undo-tree-id40300 . -298) (undo-tree-id40301 . -298) (undo-tree-id40302 . -298) (undo-tree-id40303 . -298) (undo-tree-id40304 . -298) (undo-tree-id40305 . -298) (undo-tree-id40306 . -298) (undo-tree-id40307 . -298) (undo-tree-id40308 . -298) (undo-tree-id40309 . -298) (undo-tree-id40310 . -298) (undo-tree-id40311 . -298) (undo-tree-id40312 . -298) (undo-tree-id40313 . -298) (undo-tree-id40314 . -298) (undo-tree-id40315 . -298) (undo-tree-id40316 . -298) (undo-tree-id40317 . -298) (undo-tree-id40318 . -298) (undo-tree-id40319 . -298) (undo-tree-id40320 . -298) (undo-tree-id40321 . -298) (undo-tree-id40322 . -298) (undo-tree-id40323 . -298) (undo-tree-id40324 . -298) (undo-tree-id40325 . -298) (undo-tree-id40326 . -298) (undo-tree-id40327 . -298) (undo-tree-id40328 . -298) (undo-tree-id40329 . -298) (undo-tree-id40330 . -298) (undo-tree-id40331 . -298) (undo-tree-id40332 . -298) (undo-tree-id40333 . -298) (undo-tree-id40334 . -298) (undo-tree-id40335 . -298) (undo-tree-id40336 . -298) (undo-tree-id40337 . -298) (undo-tree-id40338 . -298) (undo-tree-id40339 . -298) (undo-tree-id40340 . -298) (undo-tree-id40341 . -298) (undo-tree-id40342 . -298) (undo-tree-id40343 . -298) (undo-tree-id40344 . -298) (undo-tree-id40345 . -298) (undo-tree-id40346 . -298) (undo-tree-id40347 . -298) (undo-tree-id40348 . -298) (undo-tree-id40349 . -298) (undo-tree-id40350 . -298) (undo-tree-id40351 . -298) (undo-tree-id40352 . -298) (undo-tree-id40353 . -298) (undo-tree-id40354 . -298) (undo-tree-id40355 . -298) (undo-tree-id40356 . -298) (undo-tree-id40357 . -298) (undo-tree-id40358 . -298) (undo-tree-id40359 . -298) (undo-tree-id40360 . -298) (undo-tree-id40361 . -298) (undo-tree-id40362 . -298) (undo-tree-id40363 . -298) (undo-tree-id40364 . -298) (undo-tree-id40365 . -298) (undo-tree-id40366 . -298) (undo-tree-id40367 . -298) (undo-tree-id40368 . -298) (undo-tree-id40369 . -298) (undo-tree-id40370 . -298) (undo-tree-id40371 . -298) (undo-tree-id40372 . -298) (undo-tree-id40373 . -298) (undo-tree-id40374 . -298) (undo-tree-id40375 . -298) (undo-tree-id40376 . -298) (undo-tree-id40377 . -298) (undo-tree-id40378 . -298) (undo-tree-id40379 . -298) (undo-tree-id40380 . -298) (undo-tree-id40381 . -298) (undo-tree-id40382 . -298) (undo-tree-id40383 . -298) (undo-tree-id40384 . -298) (undo-tree-id40385 . -298) (undo-tree-id40386 . -298) (undo-tree-id40387 . -298) (undo-tree-id40388 . -298) (undo-tree-id40389 . -298) (undo-tree-id40390 . -298) (undo-tree-id40391 . -298) (undo-tree-id40392 . -298) (undo-tree-id40393 . -298) (undo-tree-id40394 . -298) (undo-tree-id40395 . -298) (undo-tree-id40396 . -298) (undo-tree-id40397 . -298) (undo-tree-id40398 . -298) (undo-tree-id40399 . -298) (undo-tree-id40400 . -298) (undo-tree-id40401 . -298) (undo-tree-id40402 . -298) (undo-tree-id40403 . -298) (undo-tree-id40404 . -298) (undo-tree-id40405 . -298) (undo-tree-id40406 . -298) (undo-tree-id40407 . -298) (undo-tree-id40408 . -298) (undo-tree-id40409 . -298) (undo-tree-id40410 . -298) (undo-tree-id40411 . -298) (undo-tree-id40412 . -298) (undo-tree-id40413 . -298) (undo-tree-id40414 . -298) (undo-tree-id40415 . -298) (undo-tree-id40416 . -298) (undo-tree-id40417 . -298) (undo-tree-id40418 . -298) (undo-tree-id40419 . -298) (undo-tree-id40420 . -298) (undo-tree-id40421 . -298) (undo-tree-id40422 . -298) (undo-tree-id40423 . -298) (undo-tree-id40424 . -298) (undo-tree-id40425 . -298) (undo-tree-id40426 . -298) (undo-tree-id40427 . -298) (undo-tree-id40428 . -298) (undo-tree-id40429 . -298) (undo-tree-id40430 . -298) (undo-tree-id40431 . -298) (undo-tree-id40432 . -298) (undo-tree-id40433 . -298) (undo-tree-id40434 . -298) (undo-tree-id40435 . -298) (undo-tree-id40436 . -298) (undo-tree-id40437 . -298) (undo-tree-id40438 . -298) (undo-tree-id40439 . -298) (undo-tree-id40440 . -304) (undo-tree-id40441 . -304) (undo-tree-id40442 . -304) (undo-tree-id40443 . -304) (undo-tree-id40444 . -304) (undo-tree-id40445 . -304) (undo-tree-id40446 . -304) (undo-tree-id40447 . -304) (undo-tree-id40448 . -304) (undo-tree-id40449 . -304) (undo-tree-id40450 . -304) (undo-tree-id40451 . -304) (undo-tree-id40452 . -304) (undo-tree-id40453 . -304) (undo-tree-id40454 . -304) (undo-tree-id40455 . -306) (undo-tree-id40456 . -306) (undo-tree-id40457 . -306) (undo-tree-id40458 . -306) (undo-tree-id40459 . -306) (undo-tree-id40460 . -306) (undo-tree-id40461 . -306) (undo-tree-id40462 . -306) (undo-tree-id40463 . -306) (undo-tree-id40464 . -306) (undo-tree-id40465 . -306) (undo-tree-id40466 . -306) (undo-tree-id40467 . -306) (undo-tree-id40468 . -306) (undo-tree-id40469 . -306) (undo-tree-id40470 . -306) (undo-tree-id40471 . -306) (undo-tree-id40472 . -306) (undo-tree-id40473 . -306) (undo-tree-id40474 . -306) (undo-tree-id40475 . -306) (undo-tree-id40476 . -306) (undo-tree-id40477 . -306) (undo-tree-id40478 . -306) (undo-tree-id40479 . -306) (undo-tree-id40480 . -306) (undo-tree-id40481 . -306) (undo-tree-id40482 . -306) (undo-tree-id40483 . -306) (undo-tree-id40484 . -306) (undo-tree-id40485 . -306) (undo-tree-id40486 . -306) (undo-tree-id40487 . -306) (undo-tree-id40488 . -306) (undo-tree-id40489 . -306) (undo-tree-id40490 . -306) (undo-tree-id40491 . -306) (undo-tree-id40492 . -306) (undo-tree-id40493 . -306) (undo-tree-id40494 . -306) (undo-tree-id40495 . -306) (undo-tree-id40496 . -306) (undo-tree-id40497 . -306) (undo-tree-id40498 . -306) (undo-tree-id40499 . -306) (undo-tree-id40500 . -306) (undo-tree-id40501 . -306) (undo-tree-id40502 . -306) (undo-tree-id40503 . -306) (undo-tree-id40504 . -306) (undo-tree-id40505 . -306) (undo-tree-id40506 . -306) (undo-tree-id40507 . -306) (undo-tree-id40508 . -306) (undo-tree-id40509 . -306) (undo-tree-id40510 . -306) (undo-tree-id40511 . -306) (undo-tree-id40512 . -306) (undo-tree-id40513 . -306) (undo-tree-id40514 . -306) (undo-tree-id40515 . -306) (undo-tree-id40516 . -306) (undo-tree-id40517 . -306) (undo-tree-id40518 . -306) (undo-tree-id40519 . -306) (undo-tree-id40520 . -306) (undo-tree-id40521 . -306) (undo-tree-id40522 . -306) (undo-tree-id40523 . -306) (undo-tree-id40524 . -306) (undo-tree-id40525 . -312) (undo-tree-id40526 . -312) (undo-tree-id40527 . -312) (undo-tree-id40528 . -312) (undo-tree-id40529 . -312) (undo-tree-id40530 . -312) (undo-tree-id40531 . -312) (undo-tree-id40532 . -312) (undo-tree-id40533 . -312) (undo-tree-id40534 . -312) (undo-tree-id40535 . -312) (undo-tree-id40536 . -312) (undo-tree-id40537 . -312) (undo-tree-id40538 . -312) (undo-tree-id40539 . -312) (undo-tree-id40540 . -313) (undo-tree-id40541 . -313) (undo-tree-id40542 . -313) (undo-tree-id40543 . -313) (undo-tree-id40544 . -313) (undo-tree-id40545 . -313) (undo-tree-id40546 . -313) (undo-tree-id40547 . -313) (undo-tree-id40548 . -313) (undo-tree-id40549 . -313) (undo-tree-id40550 . -313) (undo-tree-id40551 . -313) (undo-tree-id40552 . -313) (undo-tree-id40553 . -313) (undo-tree-id40554 . -313) (undo-tree-id40555 . -313) (undo-tree-id40556 . -313) (undo-tree-id40557 . -312) (undo-tree-id40558 . -312) (undo-tree-id40559 . -312) (undo-tree-id40560 . -312) (undo-tree-id40561 . -312) (undo-tree-id40562 . -312) (undo-tree-id40563 . -312) (undo-tree-id40564 . -312) (undo-tree-id40565 . -312) (undo-tree-id40566 . -312) (undo-tree-id40567 . -312) (undo-tree-id40568 . -312) (undo-tree-id40569 . -312) (undo-tree-id40570 . -312) (undo-tree-id40571 . -312) (undo-tree-id40572 . -312) (undo-tree-id40573 . -312) (undo-tree-id40574 . -312) (undo-tree-id40575 . -312) (undo-tree-id40576 . -312) (undo-tree-id40577 . -312) (undo-tree-id40578 . -312) (undo-tree-id40579 . -312) (undo-tree-id40580 . -312) (undo-tree-id40581 . -312) (undo-tree-id40582 . -312) (undo-tree-id40583 . -314) (undo-tree-id40584 . -314) (undo-tree-id40585 . -314) (undo-tree-id40586 . -314) (undo-tree-id40587 . -314) (undo-tree-id40588 . -314) (undo-tree-id40589 . -314) (undo-tree-id40590 . -314) (undo-tree-id40591 . -314) (undo-tree-id40592 . -314) (undo-tree-id40593 . -314) (undo-tree-id40594 . -314) (undo-tree-id40595 . -314) (undo-tree-id40596 . -314) (undo-tree-id40597 . -314) (undo-tree-id40598 . -321) (undo-tree-id40599 . -321) (undo-tree-id40600 . -321) (undo-tree-id40601 . -321) (undo-tree-id40602 . -321) (undo-tree-id40603 . -321) (undo-tree-id40604 . -321) (undo-tree-id40605 . -321) (undo-tree-id40606 . -321) (undo-tree-id40607 . -321) (undo-tree-id40608 . -321) (undo-tree-id40609 . -321) (undo-tree-id40610 . -321) (undo-tree-id40611 . -321) (undo-tree-id40612 . -321) (undo-tree-id40613 . -321) (undo-tree-id40614 . -321) (undo-tree-id40615 . -321) (undo-tree-id40616 . -321) (undo-tree-id40617 . -321) (undo-tree-id40618 . -321) (undo-tree-id40619 . -321) (undo-tree-id40620 . -324) (undo-tree-id40621 . -324) (undo-tree-id40622 . -324) (undo-tree-id40623 . -324) (undo-tree-id40624 . -324) (undo-tree-id40625 . -324) (undo-tree-id40626 . -324) (undo-tree-id40627 . -324) (undo-tree-id40628 . -324) (undo-tree-id40629 . -324) (undo-tree-id40630 . -324) (undo-tree-id40631 . -324) (undo-tree-id40632 . -324) (undo-tree-id40633 . -324) (undo-tree-id40634 . -324) (undo-tree-id40635 . -331) (undo-tree-id40636 . -331) (undo-tree-id40637 . -331) (undo-tree-id40638 . -331) (undo-tree-id40639 . -331) (undo-tree-id40640 . -331) (undo-tree-id40641 . -331) (undo-tree-id40642 . -331) (undo-tree-id40643 . -331) (undo-tree-id40644 . -331) (undo-tree-id40645 . -331) (undo-tree-id40646 . -331) (undo-tree-id40647 . -331) (undo-tree-id40648 . -331) (undo-tree-id40649 . -331) (undo-tree-id40650 . -334) (undo-tree-id40651 . -334) (undo-tree-id40652 . -334) (undo-tree-id40653 . -334) (undo-tree-id40654 . -334) (undo-tree-id40655 . -334) (undo-tree-id40656 . -334) (undo-tree-id40657 . -334) (undo-tree-id40658 . -334) (undo-tree-id40659 . -334) (undo-tree-id40660 . -334) (undo-tree-id40661 . -334) (undo-tree-id40662 . -334) (undo-tree-id40663 . -334) (undo-tree-id40664 . -334) (undo-tree-id40665 . -338) (undo-tree-id40666 . -338) (undo-tree-id40667 . -338) (undo-tree-id40668 . -338) (undo-tree-id40669 . -338) (undo-tree-id40670 . -338) (undo-tree-id40671 . -338) (undo-tree-id40672 . -338) (undo-tree-id40673 . -338) (undo-tree-id40674 . -338) (undo-tree-id40675 . -338) (undo-tree-id40676 . -338) (undo-tree-id40677 . -338) (undo-tree-id40678 . -338) (undo-tree-id40679 . -338) (undo-tree-id40680 . -345) (undo-tree-id40681 . -345) (undo-tree-id40682 . -345) (undo-tree-id40683 . -345) (undo-tree-id40684 . -345) (undo-tree-id40685 . -345) (undo-tree-id40686 . -345) (undo-tree-id40687 . -345) (undo-tree-id40688 . -345) (undo-tree-id40689 . -345) (undo-tree-id40690 . -345) (undo-tree-id40691 . -345) (undo-tree-id40692 . -345) (undo-tree-id40693 . -345) (undo-tree-id40694 . -345) (undo-tree-id40695 . -346) (undo-tree-id40696 . -346) (undo-tree-id40697 . -346) (undo-tree-id40698 . -346) (undo-tree-id40699 . -346) (undo-tree-id40700 . -346) (undo-tree-id40701 . -346) (undo-tree-id40702 . -346) (undo-tree-id40703 . -346) (undo-tree-id40704 . -346) (undo-tree-id40705 . -346) (undo-tree-id40706 . -346) (undo-tree-id40707 . -346) (undo-tree-id40708 . -346) (undo-tree-id40709 . -346) (undo-tree-id40710 . -346) (undo-tree-id40711 . -346) (undo-tree-id40712 . -346) (undo-tree-id40713 . -346) (undo-tree-id40714 . -346) (undo-tree-id40715 . -346) (undo-tree-id40716 . -346) (undo-tree-id40717 . -346) (undo-tree-id40718 . -346) (undo-tree-id40719 . -346) (undo-tree-id40720 . -346) (undo-tree-id40721 . -346) (undo-tree-id40722 . -346) (undo-tree-id40723 . -346) (undo-tree-id40724 . -346) (undo-tree-id40725 . -346) (undo-tree-id40726 . -346) (undo-tree-id40727 . -346) (undo-tree-id40728 . -346) (undo-tree-id40729 . -346) (undo-tree-id40730 . -346) (undo-tree-id40731 . -346) (undo-tree-id40732 . -346) (undo-tree-id40733 . -346) (undo-tree-id40734 . -346) (undo-tree-id40735 . -296) (7459 . 7755) (#(" At each time step, the model only knows about past time steps, so it cannot look ahead. It is said to be a causal model. To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers, and we must apply the output Dense layer at every time step." 0 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 64 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 64 121 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 121 122 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 122 186 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 186 187 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 187 193 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 193 194 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 194 203 (display ((raise -0.3) (height 0.7)) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 203 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 238 294 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7509) (undo-tree-id40736 . -294) (undo-tree-id40737 . -294) (undo-tree-id40738 . -294) (undo-tree-id40739 . -294) (undo-tree-id40740 . -294) (undo-tree-id40741 . -294) (undo-tree-id40742 . -294) (undo-tree-id40743 . -294) (undo-tree-id40744 . -294) (undo-tree-id40745 . -294) (undo-tree-id40746 . -294) (undo-tree-id40747 . -294) (undo-tree-id40748 . -294) (undo-tree-id40749 . -294) (undo-tree-id40750 . -294) (undo-tree-id40751 . -294) (undo-tree-id40752 . -294) (undo-tree-id40753 . -294) (undo-tree-id40754 . -294) (undo-tree-id40755 . -294) (undo-tree-id40756 . -294) (undo-tree-id40757 . -294) (undo-tree-id40758 . -294) (undo-tree-id40759 . -294) (undo-tree-id40760 . -294) (undo-tree-id40761 . -294) (undo-tree-id40762 . -294) (undo-tree-id40763 . -294) (undo-tree-id40764 . -294) (undo-tree-id40765 . -294) (undo-tree-id40766 . -294) (undo-tree-id40767 . -294) (undo-tree-id40768 . -294) (undo-tree-id40769 . -294) (undo-tree-id40770 . -294) (undo-tree-id40771 . -294) (undo-tree-id40772 . -293) (undo-tree-id40773 . -293) (undo-tree-id40774 . -293) (undo-tree-id40775 . -293) (undo-tree-id40776 . -293) (undo-tree-id40777 . -293) (undo-tree-id40778 . -293) (undo-tree-id40779 . -293) (undo-tree-id40780 . -293) (undo-tree-id40781 . -293) (undo-tree-id40782 . -293) (undo-tree-id40783 . -293) (undo-tree-id40784 . -293) (undo-tree-id40785 . -293) (undo-tree-id40786 . -293) (undo-tree-id40787 . -293) (undo-tree-id40788 . -293) (undo-tree-id40789 . -293) (undo-tree-id40790 . -293) (undo-tree-id40791 . -293) (undo-tree-id40792 . -293) (undo-tree-id40793 . -293) (undo-tree-id40794 . -293) (undo-tree-id40795 . -293) (undo-tree-id40796 . -293) (undo-tree-id40797 . -293) (undo-tree-id40798 . -293) (undo-tree-id40799 . -293) (undo-tree-id40800 . -293) (undo-tree-id40801 . -293) (undo-tree-id40802 . -293) (undo-tree-id40803 . -293) (undo-tree-id40804 . -293) (undo-tree-id40805 . -198) (undo-tree-id40806 . -198) (undo-tree-id40807 . -198) (undo-tree-id40808 . -198) (undo-tree-id40809 . -198) (undo-tree-id40810 . -198) (undo-tree-id40811 . -198) (undo-tree-id40812 . -198) (undo-tree-id40813 . -198) (undo-tree-id40814 . -198) (undo-tree-id40815 . -198) (undo-tree-id40816 . -198) (undo-tree-id40817 . -198) (undo-tree-id40818 . -198) (undo-tree-id40819 . -198) (undo-tree-id40820 . -112) (undo-tree-id40821 . -112) (undo-tree-id40822 . -112) (undo-tree-id40823 . -112) (undo-tree-id40824 . -112) (undo-tree-id40825 . -112) (undo-tree-id40826 . -112) (undo-tree-id40827 . -112) (undo-tree-id40828 . -112) (undo-tree-id40829 . -112) (undo-tree-id40830 . -112) (undo-tree-id40831 . -112) (undo-tree-id40832 . -112) (undo-tree-id40833 . -112) (undo-tree-id40834 . -112) (undo-tree-id40835 . -18) (undo-tree-id40836 . -18) (undo-tree-id40837 . -18) (undo-tree-id40838 . -18) (undo-tree-id40839 . -18) (undo-tree-id40840 . -18) (undo-tree-id40841 . -18) (undo-tree-id40842 . -18) (undo-tree-id40843 . -18) (undo-tree-id40844 . -18) (undo-tree-id40845 . -18) (undo-tree-id40846 . -18) (undo-tree-id40847 . -18) (undo-tree-id40848 . -18) (undo-tree-id40849 . -18) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7509) (undo-tree-id40850 . -1) (undo-tree-id40851 . -1) (undo-tree-id40852 . -1)) nil (25772 51699 790435 64000) 0 nil])
([nil nil ((7510 . 7807) (#("- It is said to be a causal model. To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers, and we must apply the output Dense layer at every time step.
- At each time step, the model only knows about past time steps, so it cannot look ahead." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 34 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 34 35 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 35 99 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 99 100 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 100 106 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 106 107 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 107 116 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 116 150 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 150 151 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 151 207 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 207 208 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 208 209 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 209 210 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 210 272 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 272 273 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 273 297 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7510) (undo-tree-id41098 . 87) (undo-tree-id41099 . -209) (undo-tree-id41100 . -209) (undo-tree-id41101 . -209) (undo-tree-id41102 . -209) (undo-tree-id41103 . -209) (undo-tree-id41104 . -209) (undo-tree-id41105 . -209) (undo-tree-id41106 . -209) (undo-tree-id41107 . -209) (undo-tree-id41108 . -209) (undo-tree-id41109 . -209) (undo-tree-id41110 . -209) (undo-tree-id41111 . -209) (undo-tree-id41112 . -209) (undo-tree-id41113 . -209) (undo-tree-id41114 . -209) (undo-tree-id41115 . -209) (undo-tree-id41116 . -209) (undo-tree-id41117 . -209) (undo-tree-id41118 . -209) (undo-tree-id41119 . -209) (undo-tree-id41120 . -209) (undo-tree-id41121 . -209) (undo-tree-id41122 . -209) (undo-tree-id41123 . -209) (undo-tree-id41124 . -209) (undo-tree-id41125 . -209) (undo-tree-id41126 . -209) (undo-tree-id41127 . -209) (undo-tree-id41128 . -209) (undo-tree-id41129 . -209) (undo-tree-id41130 . -209) (undo-tree-id41131 . -209) (undo-tree-id41132 . -209) (undo-tree-id41133 . -209) (undo-tree-id41134 . -209) (undo-tree-id41135 . -209) (undo-tree-id41136 . -209) (undo-tree-id41137 . -209) (undo-tree-id41138 . -209) (undo-tree-id41139 . -209) (undo-tree-id41140 . -209) (undo-tree-id41141 . -209) (undo-tree-id41142 . -209) (undo-tree-id41143 . -209) (undo-tree-id41144 . -209) (undo-tree-id41145 . -209) (undo-tree-id41146 . -209) (undo-tree-id41147 . -209) (undo-tree-id41148 . -209) (undo-tree-id41149 . -209) (undo-tree-id41150 . -209) (undo-tree-id41151 . -209) (undo-tree-id41152 . -209) (undo-tree-id41153 . -209) (undo-tree-id41154 . -209) (undo-tree-id41155 . -209) (undo-tree-id41156 . -209) (undo-tree-id41157 . -209) (undo-tree-id41158 . -209) (undo-tree-id41159 . -209) (undo-tree-id41160 . -209) (undo-tree-id41161 . -209) (undo-tree-id41162 . -209) (undo-tree-id41163 . -209) (undo-tree-id41164 . -209) (undo-tree-id41165 . -297) (undo-tree-id41166 . -209) (undo-tree-id41167 . -209) (undo-tree-id41168 . -209) (undo-tree-id41169 . -209) (undo-tree-id41170 . -209) (undo-tree-id41171 . -209) (undo-tree-id41172 . -209) (undo-tree-id41173 . -209) (undo-tree-id41174 . -209) (undo-tree-id41175 . -209) (undo-tree-id41176 . -209) (undo-tree-id41177 . -209) (undo-tree-id41178 . -209) (undo-tree-id41179 . -209) (undo-tree-id41180 . -209) (undo-tree-id41181 . -209) (undo-tree-id41182 . -209) (undo-tree-id41183 . -209) (undo-tree-id41184 . -210) (undo-tree-id41185 . -210) (undo-tree-id41186 . -210) (undo-tree-id41187 . -210) (undo-tree-id41188 . -210) (undo-tree-id41189 . -210) (undo-tree-id41190 . -210) (undo-tree-id41191 . -210) (undo-tree-id41192 . -210) (undo-tree-id41193 . -210) (undo-tree-id41194 . -210) (undo-tree-id41195 . -210) (undo-tree-id41196 . -210) (undo-tree-id41197 . -210) (undo-tree-id41198 . -210) (undo-tree-id41199 . -210) (undo-tree-id41200 . -210) (undo-tree-id41201 . -210) (undo-tree-id41202 . -210) (undo-tree-id41203 . -210) (undo-tree-id41204 . -210) (undo-tree-id41205 . -210) (undo-tree-id41206 . -210) (undo-tree-id41207 . -210) (undo-tree-id41208 . -210) (undo-tree-id41209 . -210) (undo-tree-id41210 . -210) (undo-tree-id41211 . -210) (undo-tree-id41212 . -210) (undo-tree-id41213 . -210) (undo-tree-id41214 . -210) (undo-tree-id41215 . -210) (undo-tree-id41216 . -210) (undo-tree-id41217 . -210) (undo-tree-id41218 . -210) (undo-tree-id41219 . -210) (undo-tree-id41220 . -210) (undo-tree-id41221 . -210) (undo-tree-id41222 . -210) (undo-tree-id41223 . -210) (undo-tree-id41224 . -210) (undo-tree-id41225 . -210) (undo-tree-id41226 . -210) (undo-tree-id41227 . -296) (undo-tree-id41228 . -296) (undo-tree-id41229 . -296) (undo-tree-id41230 . -296) (undo-tree-id41231 . -296) (undo-tree-id41232 . -296) (undo-tree-id41233 . -296) (undo-tree-id41234 . -296) (undo-tree-id41235 . -296) (undo-tree-id41236 . -296) (undo-tree-id41237 . -296) (undo-tree-id41238 . -296) (undo-tree-id41239 . -296) (undo-tree-id41240 . -296) (undo-tree-id41241 . -296) (undo-tree-id41242 . -296) (undo-tree-id41243 . -296) (undo-tree-id41244 . -296) (undo-tree-id41245 . -296) (undo-tree-id41246 . -296) (undo-tree-id41247 . -296) (undo-tree-id41248 . -296) (undo-tree-id41249 . -297) (undo-tree-id41250 . -297) (undo-tree-id41251 . -297) (undo-tree-id41252 . -297) (undo-tree-id41253 . -297) (undo-tree-id41254 . -297) (undo-tree-id41255 . -297) (undo-tree-id41256 . -297) (undo-tree-id41257 . -297) (undo-tree-id41258 . -297) (undo-tree-id41259 . -297) (undo-tree-id41260 . -297) (undo-tree-id41261 . -297) (undo-tree-id41262 . -297) (undo-tree-id41263 . -297) (undo-tree-id41264 . -297) (undo-tree-id41265 . -297) (undo-tree-id41266 . -297) (undo-tree-id41267 . -297) (undo-tree-id41268 . -297) (undo-tree-id41269 . -297) (undo-tree-id41270 . -297) (undo-tree-id41271 . -297) (undo-tree-id41272 . -297) (undo-tree-id41273 . -297) (undo-tree-id41274 . -297) (undo-tree-id41275 . -297) (undo-tree-id41276 . -297) (undo-tree-id41277 . -297) (undo-tree-id41278 . -297) (undo-tree-id41279 . -297) (undo-tree-id41280 . -297) (undo-tree-id41281 . -297) (undo-tree-id41282 . -297) (undo-tree-id41283 . -297) (undo-tree-id41284 . -297) (undo-tree-id41285 . -297) (undo-tree-id41286 . -297) (undo-tree-id41287 . -297) (undo-tree-id41288 . -297) (undo-tree-id41289 . -208) (7510 . 7718) (#(" It is said to be a causal model. To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers, and we must apply the output Dense layer at every time step." 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 34 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 99 105 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 105 106 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 106 115 (display ((raise -0.3) (height 0.7)) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 115 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 150 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7599) (undo-tree-id41290 . -1) (undo-tree-id41291 . -1) (undo-tree-id41292 . -1) (undo-tree-id41293 . -1) (undo-tree-id41294 . -1) (undo-tree-id41295 . -1) (undo-tree-id41296 . -1) (undo-tree-id41297 . -1) (undo-tree-id41298 . -1) (undo-tree-id41299 . -1) (undo-tree-id41300 . -1) (undo-tree-id41301 . -1) (undo-tree-id41302 . -1) (undo-tree-id41303 . -1) (undo-tree-id41304 . -1) (undo-tree-id41305 . -1) (undo-tree-id41306 . -1) (undo-tree-id41307 . -1) (undo-tree-id41308 . -1) (undo-tree-id41309 . -1) (undo-tree-id41310 . -1) (undo-tree-id41311 . -1) (undo-tree-id41312 . -1) (undo-tree-id41313 . -1) (undo-tree-id41314 . -1) (undo-tree-id41315 . -1) (undo-tree-id41316 . -1) (undo-tree-id41317 . -1) (undo-tree-id41318 . -1) (undo-tree-id41319 . -1) (undo-tree-id41320 . -1) (undo-tree-id41321 . -1) (undo-tree-id41322 . -1) (undo-tree-id41323 . -1) (undo-tree-id41324 . -1) (undo-tree-id41325 . -1) (undo-tree-id41326 . -1) (undo-tree-id41327 . -1) (undo-tree-id41328 . -1) (undo-tree-id41329 . -1) (undo-tree-id41330 . -1) 7600 (t 25772 51699 860005 802000)) nil (25772 51711 687861 654000) 0 nil])
([nil nil ((7600 . 7809) (#("- To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers, and we must apply the output Dense layer at every time step.
- It is said to be a causal model." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 66 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 73 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 74 (invisible t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 74 83 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 83 117 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 117 118 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 118 174 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 174 175 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 175 176 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 176 177 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 177 209 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7600) (undo-tree-id41331 . 32) (undo-tree-id41332 . -176) (undo-tree-id41333 . -209) (undo-tree-id41334 . -176) (undo-tree-id41335 . -176) (undo-tree-id41336 . -176) (undo-tree-id41337 . -176) (undo-tree-id41338 . -176) (undo-tree-id41339 . -176) (undo-tree-id41340 . -176) (undo-tree-id41341 . -176) (undo-tree-id41342 . -176) (undo-tree-id41343 . -176) (undo-tree-id41344 . -176) (undo-tree-id41345 . -176) (undo-tree-id41346 . -176) (undo-tree-id41347 . -176) (undo-tree-id41348 . -176) (undo-tree-id41349 . -176) (undo-tree-id41350 . -176) (undo-tree-id41351 . -176) (undo-tree-id41352 . -176) (undo-tree-id41353 . -176) (undo-tree-id41354 . -176) (undo-tree-id41355 . -176) (undo-tree-id41356 . -176) (undo-tree-id41357 . -176) (undo-tree-id41358 . -176) (undo-tree-id41359 . -176) (undo-tree-id41360 . -176) (undo-tree-id41361 . -176) (undo-tree-id41362 . -176) (undo-tree-id41363 . -176) (undo-tree-id41364 . -176) (undo-tree-id41365 . -176) (undo-tree-id41366 . -176) (undo-tree-id41367 . -176) (undo-tree-id41368 . -176) (undo-tree-id41369 . -176) (undo-tree-id41370 . -176) (undo-tree-id41371 . -176) (undo-tree-id41372 . -176) (undo-tree-id41373 . -176) (undo-tree-id41374 . -176) (undo-tree-id41375 . -176) (undo-tree-id41376 . -176) (undo-tree-id41377 . -176) (undo-tree-id41378 . -176) (undo-tree-id41379 . -176) (undo-tree-id41380 . -176) (undo-tree-id41381 . -176) (undo-tree-id41382 . -176) (undo-tree-id41383 . -176) (undo-tree-id41384 . -176) (undo-tree-id41385 . -176) (undo-tree-id41386 . -176) (undo-tree-id41387 . -176) (undo-tree-id41388 . -176) (undo-tree-id41389 . -176) (undo-tree-id41390 . -176) (undo-tree-id41391 . -176) (undo-tree-id41392 . -176) (undo-tree-id41393 . -176) (undo-tree-id41394 . -208) (undo-tree-id41395 . -208) (undo-tree-id41396 . -208) (undo-tree-id41397 . -208) (undo-tree-id41398 . -208) (undo-tree-id41399 . -208) (undo-tree-id41400 . -208) (undo-tree-id41401 . -208) (undo-tree-id41402 . -208) (undo-tree-id41403 . -208) (undo-tree-id41404 . -208) (undo-tree-id41405 . -208) (undo-tree-id41406 . -208) (undo-tree-id41407 . -208) (undo-tree-id41408 . -208) (undo-tree-id41409 . -209) (undo-tree-id41410 . -209) (undo-tree-id41411 . -209) (undo-tree-id41412 . -209) (undo-tree-id41413 . -209) (undo-tree-id41414 . -209) (undo-tree-id41415 . -209) (undo-tree-id41416 . -209) (undo-tree-id41417 . -209) (undo-tree-id41418 . -209) (undo-tree-id41419 . -209) (undo-tree-id41420 . -209) (undo-tree-id41421 . -209) (undo-tree-id41422 . -209) (undo-tree-id41423 . -209) (undo-tree-id41424 . -209) (undo-tree-id41425 . -209) (undo-tree-id41426 . -209) (undo-tree-id41427 . -209) (undo-tree-id41428 . -209) (undo-tree-id41429 . -209) (undo-tree-id41430 . -209) (undo-tree-id41431 . -209) (undo-tree-id41432 . -209) (undo-tree-id41433 . -209) (undo-tree-id41434 . -209) (undo-tree-id41435 . -209) (undo-tree-id41436 . -209) (undo-tree-id41437 . -209) (undo-tree-id41438 . -209) (undo-tree-id41439 . -209) (undo-tree-id41440 . -209) (undo-tree-id41441 . -209) (undo-tree-id41442 . -209) (undo-tree-id41443 . -209) (undo-tree-id41444 . -209) (undo-tree-id41445 . -209) (undo-tree-id41446 . -209) (undo-tree-id41447 . -209) (undo-tree-id41448 . -209) (undo-tree-id41449 . -175) (7600 . 7775) (#(" To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers, and we must apply the output Dense layer at every time step." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 73 82 (display ((raise -0.3) (height 0.7)) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 116 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 116 117 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 173 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7634) (undo-tree-id41450 . -1) (undo-tree-id41451 . -1) (undo-tree-id41452 . -1) (undo-tree-id41453 . -1) (undo-tree-id41454 . -1) (undo-tree-id41455 . -1) (undo-tree-id41456 . -1) (undo-tree-id41457 . -1) (undo-tree-id41458 . -1) (undo-tree-id41459 . -1) (undo-tree-id41460 . -1) (undo-tree-id41461 . -1) (undo-tree-id41462 . -1) (undo-tree-id41463 . -1) (undo-tree-id41464 . -1) (undo-tree-id41465 . -1) (undo-tree-id41466 . -1) (undo-tree-id41467 . -1) (undo-tree-id41468 . -1) (undo-tree-id41469 . -1) (undo-tree-id41470 . -1) (undo-tree-id41471 . -1) (undo-tree-id41472 . -1) (undo-tree-id41473 . -1) (undo-tree-id41474 . -1) (undo-tree-id41475 . -1) (undo-tree-id41476 . -1) (undo-tree-id41477 . -1) (undo-tree-id41478 . -1) (undo-tree-id41479 . -1) (undo-tree-id41480 . -1) (undo-tree-id41481 . -1) (undo-tree-id41482 . -1) (undo-tree-id41483 . -1) (undo-tree-id41484 . -1) (undo-tree-id41485 . -1) (undo-tree-id41486 . -1) (undo-tree-id41487 . -1) (undo-tree-id41488 . -1) (undo-tree-id41489 . -1) (undo-tree-id41490 . -1) 7635 (t 25772 51711 748891 116000)) nil (25772 51717 932080 260000) 0 nil])
([nil nil ((7635 . 7811) (#("- and we must apply the output Dense layer at every time step.
- To turn the model into a sequence-to-sequence model, we must set return_sequences=True in all recurrent layers," 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 5 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 5 6 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 6 62 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 62 63 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 64 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 64 65 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 65 129 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 129 130 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 130 136 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 136 137 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible t) 137 146 (display ((raise -0.3) (height 0.7)) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 146 176 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7635) (undo-tree-id41588 . 111) (undo-tree-id41589 . -64) (undo-tree-id41590 . -64) (undo-tree-id41591 . -64) (undo-tree-id41592 . -64) (undo-tree-id41593 . -64) (undo-tree-id41594 . -64) (undo-tree-id41595 . -64) (undo-tree-id41596 . -64) (undo-tree-id41597 . -64) (undo-tree-id41598 . -64) (undo-tree-id41599 . -64) (undo-tree-id41600 . -64) (undo-tree-id41601 . -64) (undo-tree-id41602 . -64) (undo-tree-id41603 . -64) (undo-tree-id41604 . -64) (undo-tree-id41605 . -64) (undo-tree-id41606 . -64) (undo-tree-id41607 . -64) (undo-tree-id41608 . -64) (undo-tree-id41609 . -64) (undo-tree-id41610 . -64) (undo-tree-id41611 . -64) (undo-tree-id41612 . -64) (undo-tree-id41613 . -64) (undo-tree-id41614 . -64) (undo-tree-id41615 . -64) (undo-tree-id41616 . -64) (undo-tree-id41617 . -64) (undo-tree-id41618 . -64) (undo-tree-id41619 . -64) (undo-tree-id41620 . -64) (undo-tree-id41621 . -64) (undo-tree-id41622 . -64) (undo-tree-id41623 . -64) (undo-tree-id41624 . -64) (undo-tree-id41625 . -64) (undo-tree-id41626 . -64) (undo-tree-id41627 . -64) (undo-tree-id41628 . -64) (undo-tree-id41629 . -64) (undo-tree-id41630 . -64) (undo-tree-id41631 . -64) (undo-tree-id41632 . -64) (undo-tree-id41633 . -64) (undo-tree-id41634 . -64) (undo-tree-id41635 . -64) (undo-tree-id41636 . -64) (undo-tree-id41637 . -64) (undo-tree-id41638 . -64) (undo-tree-id41639 . -64) (undo-tree-id41640 . -64) (undo-tree-id41641 . -64) (undo-tree-id41642 . -64) (undo-tree-id41643 . -64) (undo-tree-id41644 . -64) (undo-tree-id41645 . -64) (undo-tree-id41646 . -64) (undo-tree-id41647 . -64) (undo-tree-id41648 . -64) (undo-tree-id41649 . -64) (undo-tree-id41650 . -64) (undo-tree-id41651 . -64) (undo-tree-id41652 . -64) (undo-tree-id41653 . -64) (undo-tree-id41654 . -64) (undo-tree-id41655 . -64) (undo-tree-id41656 . -64) (undo-tree-id41657 . -64) (undo-tree-id41658 . -64) (undo-tree-id41659 . -64) (undo-tree-id41660 . -64) (undo-tree-id41661 . -64) (undo-tree-id41662 . -176) (undo-tree-id41663 . -64) (undo-tree-id41664 . -64) (undo-tree-id41665 . -64) (undo-tree-id41666 . -64) (undo-tree-id41667 . -64) (undo-tree-id41668 . -64) (undo-tree-id41669 . -64) (undo-tree-id41670 . -64) (undo-tree-id41671 . -64) (undo-tree-id41672 . -64) (undo-tree-id41673 . -64) (undo-tree-id41674 . -64) (undo-tree-id41675 . -64) (undo-tree-id41676 . -64) (undo-tree-id41677 . -64) (undo-tree-id41678 . -64) (undo-tree-id41679 . -64) (undo-tree-id41680 . -64) (undo-tree-id41681 . -64) (undo-tree-id41682 . -64) (undo-tree-id41683 . -64) (undo-tree-id41684 . -64) (undo-tree-id41685 . -64) (undo-tree-id41686 . -64) (undo-tree-id41687 . -64) (undo-tree-id41688 . -64) (undo-tree-id41689 . -64) (undo-tree-id41690 . -64) (undo-tree-id41691 . -64) (undo-tree-id41692 . -64) (undo-tree-id41693 . -64) (undo-tree-id41694 . -64) (undo-tree-id41695 . -64) (undo-tree-id41696 . -64) (undo-tree-id41697 . -64) (undo-tree-id41698 . -64) (undo-tree-id41699 . -64) (undo-tree-id41700 . -64) (undo-tree-id41701 . -64) (undo-tree-id41702 . -159) (undo-tree-id41703 . -159) (undo-tree-id41704 . -159) (undo-tree-id41705 . -159) (undo-tree-id41706 . -159) (undo-tree-id41707 . -159) (undo-tree-id41708 . -159) (undo-tree-id41709 . -159) (undo-tree-id41710 . -159) (undo-tree-id41711 . -159) (undo-tree-id41712 . -159) (undo-tree-id41713 . -159) (undo-tree-id41714 . -159) (undo-tree-id41715 . -159) (undo-tree-id41716 . -159) (undo-tree-id41717 . -159) (undo-tree-id41718 . -159) (undo-tree-id41719 . -159) (undo-tree-id41720 . -159) (undo-tree-id41721 . -159) (undo-tree-id41722 . -159) (undo-tree-id41723 . -159) (undo-tree-id41724 . -169) (undo-tree-id41725 . -169) (undo-tree-id41726 . -169) (undo-tree-id41727 . -169) (undo-tree-id41728 . -169) (undo-tree-id41729 . -169) (undo-tree-id41730 . -169) (undo-tree-id41731 . -169) (undo-tree-id41732 . -169) (undo-tree-id41733 . -169) (undo-tree-id41734 . -169) (undo-tree-id41735 . -169) (undo-tree-id41736 . -169) (undo-tree-id41737 . -169) (undo-tree-id41738 . -169) (undo-tree-id41739 . -175) (undo-tree-id41740 . -175) (undo-tree-id41741 . -175) (undo-tree-id41742 . -175) (undo-tree-id41743 . -175) (undo-tree-id41744 . -175) (undo-tree-id41745 . -175) (undo-tree-id41746 . -175) (undo-tree-id41747 . -175) (undo-tree-id41748 . -175) (undo-tree-id41749 . -175) (undo-tree-id41750 . -175) (undo-tree-id41751 . -175) (undo-tree-id41752 . -175) (undo-tree-id41753 . -175) (undo-tree-id41754 . -176) (undo-tree-id41755 . -176) (undo-tree-id41756 . -176) (undo-tree-id41757 . -176) (undo-tree-id41758 . -176) (undo-tree-id41759 . -176) (undo-tree-id41760 . -176) (undo-tree-id41761 . -176) (undo-tree-id41762 . -176) (undo-tree-id41763 . -176) (undo-tree-id41764 . -176) (undo-tree-id41765 . -176) (undo-tree-id41766 . -176) (undo-tree-id41767 . -176) (undo-tree-id41768 . -176) (undo-tree-id41769 . -176) (undo-tree-id41770 . -176) (undo-tree-id41771 . -176) (undo-tree-id41772 . -176) (undo-tree-id41773 . -176) (undo-tree-id41774 . -176) (undo-tree-id41775 . -176) (undo-tree-id41776 . -176) (undo-tree-id41777 . -176) (undo-tree-id41778 . -176) (undo-tree-id41779 . -176) (undo-tree-id41780 . -176) (undo-tree-id41781 . -176) (undo-tree-id41782 . -176) (undo-tree-id41783 . -176) (undo-tree-id41784 . -176) (undo-tree-id41785 . -176) (undo-tree-id41786 . -176) (undo-tree-id41787 . -63) (7635 . 7698) (#(" and we must apply the output Dense layer at every time step." 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7748) (undo-tree-id41788 . -1) (undo-tree-id41789 . -1) (undo-tree-id41790 . -1) (undo-tree-id41791 . -1) (undo-tree-id41792 . -1) (undo-tree-id41793 . -1) (undo-tree-id41794 . -1) (undo-tree-id41795 . -1) (undo-tree-id41796 . -1) (undo-tree-id41797 . -1) (undo-tree-id41798 . -1) (undo-tree-id41799 . -1) (undo-tree-id41800 . -1) (undo-tree-id41801 . -1) (undo-tree-id41802 . -1) (undo-tree-id41803 . -1) (undo-tree-id41804 . -1) (undo-tree-id41805 . -1) (undo-tree-id41806 . -1) (undo-tree-id41807 . -1) (undo-tree-id41808 . -1) (undo-tree-id41809 . -1) (undo-tree-id41810 . -1) (undo-tree-id41811 . -1) (undo-tree-id41812 . -1) (undo-tree-id41813 . -1) (undo-tree-id41814 . -1) (undo-tree-id41815 . -1) (undo-tree-id41816 . -1) (undo-tree-id41817 . -1) (undo-tree-id41818 . -1) (undo-tree-id41819 . -1) (undo-tree-id41820 . -1) (undo-tree-id41821 . -1) 7749 (t 25772 51718 1354 579000)) nil (25772 51764 631884 274000) 0 nil])
([nil nil ((7645 . 7647) (#("the model" 0 9 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7645) (undo-tree-id41514 . -8) (undo-tree-id41515 . -8) (undo-tree-id41516 . -8) (undo-tree-id41517 . -9) (undo-tree-id41518 . -8) (undo-tree-id41519 . -2) (undo-tree-id41520 . -2) (undo-tree-id41521 . -2) (undo-tree-id41522 . -2) (undo-tree-id41523 . -2) (undo-tree-id41524 . -2) (undo-tree-id41525 . -2) (undo-tree-id41526 . -2) (undo-tree-id41527 . -2) (undo-tree-id41528 . -2) (undo-tree-id41529 . -2) (undo-tree-id41530 . -2) (undo-tree-id41531 . -2) (undo-tree-id41532 . -2) (undo-tree-id41533 . -2) (undo-tree-id41534 . -2) (undo-tree-id41535 . -2) (undo-tree-id41536 . -2) (undo-tree-id41537 . -2) (undo-tree-id41538 . -2) (undo-tree-id41539 . -2) (undo-tree-id41540 . -2) (undo-tree-id41541 . -8) (undo-tree-id41542 . -8) (undo-tree-id41543 . -8) (undo-tree-id41544 . -8) (undo-tree-id41545 . -8) (undo-tree-id41546 . -8) (undo-tree-id41547 . -8) (undo-tree-id41548 . -8) (undo-tree-id41549 . -8) (undo-tree-id41550 . -8) (undo-tree-id41551 . -8) (undo-tree-id41552 . -8) (undo-tree-id41553 . -8) (undo-tree-id41554 . -8) (undo-tree-id41555 . -8) (undo-tree-id41556 . -8) (undo-tree-id41557 . -8) (undo-tree-id41558 . -8) (undo-tree-id41559 . -8) (undo-tree-id41560 . -8) (undo-tree-id41561 . -8) (undo-tree-id41562 . -8) (undo-tree-id41563 . -8) (undo-tree-id41564 . -8) (undo-tree-id41565 . -8) (undo-tree-id41566 . -8) (undo-tree-id41567 . -8) (undo-tree-id41568 . -8) (undo-tree-id41569 . -8) (undo-tree-id41570 . -8) (undo-tree-id41571 . -8) (undo-tree-id41572 . -8) (undo-tree-id41573 . -8) (undo-tree-id41574 . -8) (undo-tree-id41575 . -8) (undo-tree-id41576 . -8) (undo-tree-id41577 . -8) (undo-tree-id41578 . -8) (undo-tree-id41579 . -8) (undo-tree-id41580 . -8) (undo-tree-id41581 . -8) (undo-tree-id41582 . -8) (undo-tree-id41583 . -8) (undo-tree-id41584 . -8) (undo-tree-id41585 . -9) (undo-tree-id41586 . -9) (undo-tree-id41587 . -9) 7653) nil (25772 51764 631571 295000) 0 nil])
([nil nil ((#("we " 0 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7683) (undo-tree-id41497 . -2) (undo-tree-id41498 . -1) (undo-tree-id41499 . -1) (undo-tree-id41500 . -1) (undo-tree-id41501 . -1) (undo-tree-id41502 . -1) (undo-tree-id41503 . -1) (undo-tree-id41504 . -1) (undo-tree-id41505 . -1) (undo-tree-id41506 . -1) (undo-tree-id41507 . -1) (undo-tree-id41508 . -1) (undo-tree-id41509 . -1) (undo-tree-id41510 . -1) (undo-tree-id41511 . -1) (undo-tree-id41512 . -1) (undo-tree-id41513 . -3)) nil (25772 51764 631351 651000) 0 nil])
([nil nil ((#("must " 0 5 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7683) (undo-tree-id41495 . -4) (undo-tree-id41496 . -5)) nil (25772 51764 631338 624000) 0 nil])
([nil nil ((#("," 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7732) (undo-tree-id41493 . -1) (undo-tree-id41494 . -1)) nil (25772 51764 631335 473000) 0 nil])
([nil nil ((#("and " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7735) (undo-tree-id41491 . -3) (undo-tree-id41492 . -4)) nil (25772 51764 631330 461000) 0 nil])
([nil nil ((#("we " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7735) (undo-tree-id41824 . -2) (undo-tree-id41825 . -3) (t 25772 51764 704771 819000)) nil (25772 51768 491111 380000) 0 nil])
([nil nil ((#("must " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7735) (undo-tree-id41822 . -4) (undo-tree-id41823 . -5)) nil (25772 51768 491107 493000) 0 nil])
([nil nil ((7735 . 7736) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7735)) nil (25772 51768 491094 859000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 9014) (undo-tree-id41972 . -9) (undo-tree-id41973 . -2) (undo-tree-id41974 . -2) (undo-tree-id41975 . -2) (undo-tree-id41976 . -2) (undo-tree-id41977 . -2) (undo-tree-id41978 . -2) (undo-tree-id41979 . -2) (undo-tree-id41980 . -2) (undo-tree-id41981 . -2) (undo-tree-id41982 . -10) (undo-tree-id41983 . -10) (undo-tree-id41984 . -10) (undo-tree-id41985 . -10) (undo-tree-id41986 . -10) (undo-tree-id41987 . -10) (undo-tree-id41988 . -10) (undo-tree-id41989 . -10) (undo-tree-id41990 . -10) (undo-tree-id41991 . -10) (undo-tree-id41992 . -10) (undo-tree-id41993 . -10) (undo-tree-id41994 . -10) (undo-tree-id41995 . -10) (undo-tree-id41996 . -10) (undo-tree-id41997 . -10) (undo-tree-id41998 . -2) (undo-tree-id41999 . -2) (undo-tree-id42000 . -2) (undo-tree-id42001 . -2) (undo-tree-id42002 . -2) (undo-tree-id42003 . -2) (undo-tree-id42004 . -2) (undo-tree-id42005 . -2) (undo-tree-id42006 . -2) (undo-tree-id42007 . -2) (undo-tree-id42008 . -2) (undo-tree-id42009 . -2) (undo-tree-id42010 . -2) (undo-tree-id42011 . -2) (undo-tree-id42012 . -2) (undo-tree-id42013 . -2) (undo-tree-id42014 . -2) (undo-tree-id42015 . -2) (undo-tree-id42016 . -10) 9016 (t 25772 51768 561050 591000)) nil (25772 51820 560710 714000) 0 nil])
([nil nil ((#("+begin_src python :result outputs" 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t)) . 9017) (undo-tree-id41952 . -32) (undo-tree-id41953 . -1) (undo-tree-id41954 . -1) (undo-tree-id41955 . -1) (undo-tree-id41956 . -1) (undo-tree-id41957 . -1) (undo-tree-id41958 . -1) (undo-tree-id41959 . -1) (undo-tree-id41960 . -1) (undo-tree-id41961 . -1) (undo-tree-id41962 . -1) (undo-tree-id41963 . -1) (undo-tree-id41964 . -1) (undo-tree-id41965 . -1) (undo-tree-id41966 . -1) (undo-tree-id41967 . -1) (undo-tree-id41968 . -1) (undo-tree-id41969 . -1) (undo-tree-id41970 . -33) (undo-tree-id41971 . -33)) nil (25772 51820 559786 51000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 9015) (undo-tree-id41926 . -1) (undo-tree-id41927 . -1) (undo-tree-id41928 . -1) (undo-tree-id41929 . -1) (undo-tree-id41930 . -1) (undo-tree-id41931 . -1) (undo-tree-id41932 . -1) (undo-tree-id41933 . -1) (undo-tree-id41934 . -1) (undo-tree-id41935 . -1) (undo-tree-id41936 . -1) (undo-tree-id41937 . -1) (undo-tree-id41938 . -1) (undo-tree-id41939 . -1) (undo-tree-id41940 . -1) (undo-tree-id41941 . -1) (undo-tree-id41942 . -1) (undo-tree-id41943 . -1) (undo-tree-id41944 . -1) (undo-tree-id41945 . -1) (undo-tree-id41946 . -1) (undo-tree-id41947 . -1) (undo-tree-id41948 . -1) (undo-tree-id41949 . -1) (undo-tree-id41950 . -1) (undo-tree-id41951 . -1)) nil (25772 51820 559771 815000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 9014) (undo-tree-id41842 . -1) (undo-tree-id41843 . -1) (undo-tree-id41844 . -1) (undo-tree-id41845 . -1) (undo-tree-id41846 . -1) (undo-tree-id41847 . -1) (undo-tree-id41848 . -1) (undo-tree-id41849 . -1) (undo-tree-id41850 . -1) (undo-tree-id41851 . -1) (undo-tree-id41852 . -1) (undo-tree-id41853 . -1) (undo-tree-id41854 . -1) (undo-tree-id41855 . -1) (undo-tree-id41856 . -1) (undo-tree-id41857 . -1) (undo-tree-id41858 . -1) (undo-tree-id41859 . -1) (undo-tree-id41860 . -1) (undo-tree-id41861 . -1) (undo-tree-id41862 . -1) (undo-tree-id41863 . -1) (undo-tree-id41864 . -1) (undo-tree-id41865 . -1) (undo-tree-id41866 . -1) (undo-tree-id41867 . -1) (undo-tree-id41868 . -1) (undo-tree-id41869 . -1) (undo-tree-id41870 . -1) (undo-tree-id41871 . -1) (undo-tree-id41872 . -1) (undo-tree-id41873 . -1) (undo-tree-id41874 . -1) (undo-tree-id41875 . -1) (undo-tree-id41876 . -1) (undo-tree-id41877 . -1) (undo-tree-id41878 . -1) (undo-tree-id41879 . -1) (undo-tree-id41880 . -1) (undo-tree-id41881 . -1) (undo-tree-id41882 . -1) (undo-tree-id41883 . -1) (undo-tree-id41884 . -1) (undo-tree-id41885 . -1) (undo-tree-id41886 . -1) (undo-tree-id41887 . -1) (undo-tree-id41888 . -1) (undo-tree-id41889 . -1) (undo-tree-id41890 . -1) (undo-tree-id41891 . -1) (undo-tree-id41892 . -1) (undo-tree-id41893 . -1) (undo-tree-id41894 . -1) (undo-tree-id41895 . -1) (undo-tree-id41896 . -1) (undo-tree-id41897 . -1) (undo-tree-id41898 . -1) (undo-tree-id41899 . -1) (undo-tree-id41900 . -1) (undo-tree-id41901 . -1) (undo-tree-id41902 . -1) (undo-tree-id41903 . -1) (undo-tree-id41904 . -1) (undo-tree-id41905 . -1) (undo-tree-id41906 . -1) (undo-tree-id41907 . -1) (undo-tree-id41908 . -1) (undo-tree-id41909 . -1) (undo-tree-id41910 . -1) (undo-tree-id41911 . -1) (undo-tree-id41912 . -1) (undo-tree-id41913 . -1) (undo-tree-id41914 . -1) (undo-tree-id41915 . -1) (undo-tree-id41916 . -1) (undo-tree-id41917 . -1) (undo-tree-id41918 . -1) (undo-tree-id41919 . -1) (undo-tree-id41920 . -1) (undo-tree-id41921 . -1) (undo-tree-id41922 . -1) (undo-tree-id41923 . -1) (undo-tree-id41924 . -1) (undo-tree-id41925 . -1)) nil (25772 51820 559751 929000) 0 nil])
([nil nil ((#("The Dense layer actually supports sequences as inputs. We could
replace the last layer with just Dense(10). 
" 0 64 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 64 109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9305) (undo-tree-id41827 . -108) (undo-tree-id41828 . -64) (undo-tree-id41829 . -64) (undo-tree-id41830 . -109) (undo-tree-id41831 . -64) (undo-tree-id41832 . -64) (undo-tree-id41833 . -64) (undo-tree-id41834 . -64) (undo-tree-id41835 . -64) (undo-tree-id41836 . -64) (undo-tree-id41837 . -64) (undo-tree-id41838 . -64) (undo-tree-id41839 . -64) (undo-tree-id41840 . -64) (undo-tree-id41841 . -109) 9369) nil (25772 51820 559540 960000) 0 nil])
([nil nil ((7786 . 7788) (7783 . 7786) 7733) nil (25772 51820 559525 113000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7786 . 7787) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7895) (7786 . 7896) 7784) nil (25772 51820 559523 875000) 0 nil])
([nil nil ((7787 . 7789)) nil (25772 51820 559522 341000) 0 nil])
([nil nil ((7852 . 7853) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7852) (undo-tree-id41826 . -1) 7788) nil (25772 51820 559518 125000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . 7784) (undo-tree-id42056 . -2) (undo-tree-id42057 . -3) (undo-tree-id42058 . -1) (undo-tree-id42059 . -1) (undo-tree-id42060 . -1) (undo-tree-id42061 . -1) (undo-tree-id42062 . -1) (undo-tree-id42063 . -1) (undo-tree-id42064 . -1) (undo-tree-id42065 . -1) (undo-tree-id42066 . -3) (undo-tree-id42067 . -3) (undo-tree-id42068 . -3) (undo-tree-id42069 . -3) (undo-tree-id42070 . -3) (undo-tree-id42071 . -3) (undo-tree-id42072 . -3) (undo-tree-id42073 . -3) (undo-tree-id42074 . -3) (undo-tree-id42075 . -3) (undo-tree-id42076 . -3) (undo-tree-id42077 . -3) (undo-tree-id42078 . -3) (undo-tree-id42079 . -3) (undo-tree-id42080 . -3) (undo-tree-id42081 . -3) (undo-tree-id42082 . -3) (undo-tree-id42083 . -3) (undo-tree-id42084 . -3) (undo-tree-id42085 . -3) (undo-tree-id42086 . -3) (undo-tree-id42087 . -3) (undo-tree-id42088 . -3) (undo-tree-id42089 . -3) (undo-tree-id42090 . -3) (undo-tree-id42091 . -3) (undo-tree-id42092 . -3) (undo-tree-id42093 . -3) (undo-tree-id42094 . -3) (undo-tree-id42095 . -3) (t 25772 51820 636767 786000)) nil (25772 51839 125018 974000) 0 nil])
([nil nil ((#("actually " 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7802) (undo-tree-id42054 . -8) (undo-tree-id42055 . -9)) nil (25772 51839 124990 45000) 0 nil])
([nil nil ((#("We could replace the last layer with just Dense(10). " 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 9 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 7832) (undo-tree-id42017 . -52) (undo-tree-id42018 . -53) (undo-tree-id42019 . -8) (undo-tree-id42020 . -8) (undo-tree-id42021 . -8) (undo-tree-id42022 . -8) (undo-tree-id42023 . -8) (undo-tree-id42024 . -8) (undo-tree-id42025 . -8) (undo-tree-id42026 . -8) (undo-tree-id42027 . -8) (undo-tree-id42028 . -8) (undo-tree-id42029 . -8) (undo-tree-id42030 . -8) (undo-tree-id42031 . -8) (undo-tree-id42032 . -8) (undo-tree-id42033 . -8) (undo-tree-id42034 . -8) (undo-tree-id42035 . -8) (undo-tree-id42036 . -8) (undo-tree-id42037 . -8) (undo-tree-id42038 . -8) (undo-tree-id42039 . -8) (undo-tree-id42040 . -8) (undo-tree-id42041 . -8) (undo-tree-id42042 . -8) (undo-tree-id42043 . -8) (undo-tree-id42044 . -8) (undo-tree-id42045 . -8) (undo-tree-id42046 . -8) (undo-tree-id42047 . -8) (undo-tree-id42048 . -8) (undo-tree-id42049 . -8) (undo-tree-id42050 . -8) (undo-tree-id42051 . -8) (undo-tree-id42052 . -53) (undo-tree-id42053 . -53)) nil (25772 51839 124981 918000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 9345) (undo-tree-id42126 . -9) (undo-tree-id42127 . -10) (undo-tree-id42128 . -10) (undo-tree-id42129 . -10) (undo-tree-id42130 . -10) (undo-tree-id42131 . -10) (undo-tree-id42132 . -10) (undo-tree-id42133 . -10) (undo-tree-id42134 . -10) (undo-tree-id42135 . -10) (undo-tree-id42136 . -10) (undo-tree-id42137 . -10) (undo-tree-id42138 . -10) (undo-tree-id42139 . -10) (undo-tree-id42140 . -10) (undo-tree-id42141 . -10) (undo-tree-id42142 . -10) (undo-tree-id42143 . -10) (undo-tree-id42144 . -10) (undo-tree-id42145 . -10) (undo-tree-id42146 . -10) (undo-tree-id42147 . -10) (undo-tree-id42148 . -10) (undo-tree-id42149 . -10) (undo-tree-id42150 . -10) (undo-tree-id42151 . -10) (undo-tree-id42152 . -10) (undo-tree-id42153 . -10) (undo-tree-id42154 . -10) (undo-tree-id42155 . -10) (undo-tree-id42156 . -10) (t 25772 51839 238075 194000)) nil (25772 51856 283510 500000) 0 nil])
([nil nil ((#("+begin_src python :result outputs" 0 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t)) . 9348) (undo-tree-id42122 . -32) (undo-tree-id42123 . -1) (undo-tree-id42124 . -33) (undo-tree-id42125 . -33)) nil (25772 51856 283489 334000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 9346) (undo-tree-id42096 . -1) (undo-tree-id42097 . -1) (undo-tree-id42098 . -1) (undo-tree-id42099 . -1) (undo-tree-id42100 . -1) (undo-tree-id42101 . -1) (undo-tree-id42102 . -1) (undo-tree-id42103 . -1) (undo-tree-id42104 . -1) (undo-tree-id42105 . -1) (undo-tree-id42106 . -1) (undo-tree-id42107 . -1) (undo-tree-id42108 . -1) (undo-tree-id42109 . -1) (undo-tree-id42110 . -1) (undo-tree-id42111 . -1) (undo-tree-id42112 . -1) (undo-tree-id42113 . -1) (undo-tree-id42114 . -1) (undo-tree-id42115 . -1) (undo-tree-id42116 . -1) (undo-tree-id42117 . -1) (undo-tree-id42118 . -1) (undo-tree-id42119 . -1) (undo-tree-id42120 . -1) (undo-tree-id42121 . -1)) nil (25772 51883 624283 127000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6221) (undo-tree-id42159 . -1) (undo-tree-id42160 . -1) (t 25772 51856 351269 64000)) nil (25773 34798 697748 733000) 0 nil] [nil nil ((9595 . 9596) (#("H" 0 1 (fontified t face org-level-1 line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 9595) (undo-tree-id42157 . -1) (t 25772 51856 351269 64000)) ((9595 . 9596) (#("w" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 9595) (undo-tree-id42158 . 1)) (25772 51883 623464 747000) 0 nil])
([nil nil ((9618 . 9620) (t 25773 34798 764280 89000)) nil (25773 34824 98440 371000) 0 nil])
nil
([nil nil ((#("To train an RNN on long sequences, we must " 0 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9620) (undo-tree-id42332 . -42) (undo-tree-id42333 . 43) (undo-tree-id42334 . -42) (undo-tree-id42335 . -42) (undo-tree-id42336 . -43) (undo-tree-id42337 . -42) (undo-tree-id42338 . -1) (undo-tree-id42339 . -7) (undo-tree-id42340 . -10) (undo-tree-id42341 . 31) (undo-tree-id42342 . -15) (undo-tree-id42343 . -14) (undo-tree-id42344 . -17) (undo-tree-id42345 . -22) (undo-tree-id42346 . -32) (undo-tree-id42347 . -33) (undo-tree-id42348 . -36) (undo-tree-id42349 . -41) (undo-tree-id42350 . -40) (undo-tree-id42351 . -41) (undo-tree-id42352 . -42) (undo-tree-id42353 . -42) (undo-tree-id42354 . -43) 9662) nil (25773 34824 98438 793000) 0 nil])
([nil nil ((9620 . 9621) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9620)) nil (25773 34824 98424 904000) 0 nil])
([nil nil ((9618 . 9650) (#("- 
- Run it over many time steps" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9618) (undo-tree-id42178 . -5) (undo-tree-id42179 . -5) (undo-tree-id42180 . 27) (undo-tree-id42181 . -5) (undo-tree-id42182 . -5) (undo-tree-id42183 . 26) (undo-tree-id42184 . -4) (undo-tree-id42185 . -4) (undo-tree-id42186 . -4) (undo-tree-id42187 . -4) (undo-tree-id42188 . -4) (undo-tree-id42189 . -4) (undo-tree-id42190 . -4) (undo-tree-id42191 . -4) (undo-tree-id42192 . -4) (undo-tree-id42193 . -5) (undo-tree-id42194 . -5) (undo-tree-id42195 . -5) (undo-tree-id42196 . -5) (undo-tree-id42197 . -5) (undo-tree-id42198 . -5) (undo-tree-id42199 . -5) (undo-tree-id42200 . -5) (undo-tree-id42201 . -5) (undo-tree-id42202 . -4) (undo-tree-id42203 . -4) (undo-tree-id42204 . -4) (undo-tree-id42205 . -4) (undo-tree-id42206 . -4) (undo-tree-id42207 . -4) (undo-tree-id42208 . -4) (undo-tree-id42209 . -4) (undo-tree-id42210 . -4) (undo-tree-id42211 . -4) (undo-tree-id42212 . -4) (undo-tree-id42213 . -4) (undo-tree-id42214 . -4) (undo-tree-id42215 . -4) (undo-tree-id42216 . -4) (undo-tree-id42217 . -4) (undo-tree-id42218 . -4) (undo-tree-id42219 . -4) (undo-tree-id42220 . -4) (undo-tree-id42221 . -4) (undo-tree-id42222 . -4) (undo-tree-id42223 . -4) (undo-tree-id42224 . -4) (undo-tree-id42225 . -4) (undo-tree-id42226 . -4) (undo-tree-id42227 . -4) (undo-tree-id42228 . -4) (undo-tree-id42229 . -4) (undo-tree-id42230 . -4) (undo-tree-id42231 . -4) (undo-tree-id42232 . -4) (undo-tree-id42233 . -32) (undo-tree-id42234 . -4) (undo-tree-id42235 . -4) (undo-tree-id42236 . -4) (undo-tree-id42237 . -4) (undo-tree-id42238 . -4) (undo-tree-id42239 . -4) (undo-tree-id42240 . -4) (undo-tree-id42241 . -4) (undo-tree-id42242 . -4) (undo-tree-id42243 . -4) (undo-tree-id42244 . -5) (undo-tree-id42245 . -5) (undo-tree-id42246 . -5) (undo-tree-id42247 . -5) (undo-tree-id42248 . -5) (undo-tree-id42249 . -5) (undo-tree-id42250 . -5) (undo-tree-id42251 . -5) (undo-tree-id42252 . -5) (undo-tree-id42253 . -5) (undo-tree-id42254 . -5) (undo-tree-id42255 . -5) (undo-tree-id42256 . -5) (undo-tree-id42257 . -5) (undo-tree-id42258 . -5) (undo-tree-id42259 . -5) (undo-tree-id42260 . -5) (undo-tree-id42261 . -5) (undo-tree-id42262 . -5) (undo-tree-id42263 . -5) (undo-tree-id42264 . -5) (undo-tree-id42265 . -5) (undo-tree-id42266 . -5) (undo-tree-id42267 . -5) (undo-tree-id42268 . -5) (undo-tree-id42269 . -5) (undo-tree-id42270 . -5) (undo-tree-id42271 . -5) (undo-tree-id42272 . -5) (undo-tree-id42273 . -5) (undo-tree-id42274 . -5) (undo-tree-id42275 . -5) (undo-tree-id42276 . -5) (undo-tree-id42277 . -5) (undo-tree-id42278 . -5) (undo-tree-id42279 . -5) (undo-tree-id42280 . -5) (undo-tree-id42281 . -5) (undo-tree-id42282 . -5) (undo-tree-id42283 . -5) (undo-tree-id42284 . -5) (undo-tree-id42285 . -5) (undo-tree-id42286 . -5) (undo-tree-id42287 . -5) (undo-tree-id42288 . -5) (undo-tree-id42289 . -5) (undo-tree-id42290 . -5) (undo-tree-id42291 . -5) (undo-tree-id42292 . -5) (undo-tree-id42293 . -5) (undo-tree-id42294 . -5) (undo-tree-id42295 . -5) (undo-tree-id42296 . -5) (undo-tree-id42297 . -5) (undo-tree-id42298 . -32) (undo-tree-id42299 . -32) (undo-tree-id42300 . -32) (undo-tree-id42301 . -32) (undo-tree-id42302 . -32) (undo-tree-id42303 . -32) (undo-tree-id42304 . -32) (undo-tree-id42305 . -32) (undo-tree-id42306 . -32) (undo-tree-id42307 . -32) (undo-tree-id42308 . -32) (undo-tree-id42309 . -32) (undo-tree-id42310 . -32) (undo-tree-id42311 . -32) (undo-tree-id42312 . -32) (undo-tree-id42313 . -32) (undo-tree-id42314 . -32) (undo-tree-id42315 . -32) (undo-tree-id42316 . -32) (undo-tree-id42317 . -32) (undo-tree-id42318 . -32) (undo-tree-id42319 . -3) (9618 . 9621) 9647 (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9647) (undo-tree-id42320 . -1) (undo-tree-id42321 . -1) (undo-tree-id42322 . -1) (undo-tree-id42323 . -1) (undo-tree-id42324 . -1) (undo-tree-id42325 . -1) (undo-tree-id42326 . -1) (undo-tree-id42327 . -1) (undo-tree-id42328 . -1) (undo-tree-id42329 . -1) (undo-tree-id42330 . -1) (undo-tree-id42331 . -1) 9648) nil (25773 34824 99123 766000) 0 nil])
([nil nil ((9649 . 9650) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 9649) (undo-tree-id42355 . -1) (undo-tree-id42356 . -1) (undo-tree-id42357 . -1) (undo-tree-id42358 . -1) (undo-tree-id42359 . -1) (undo-tree-id42360 . -1) (undo-tree-id42361 . -1) (undo-tree-id42362 . -1) (undo-tree-id42363 . -1) (undo-tree-id42364 . -1) (undo-tree-id42365 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9650) (undo-tree-id42366 . 1) (undo-tree-id42367 . 1) (undo-tree-id42368 . -1) 9649) nil (25773 34827 580618 422000) 0 nil] [nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9694) (undo-tree-id42161 . -1) (undo-tree-id42162 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9695) (undo-tree-id42163 . -1) (9649 . 9650) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 9649) (undo-tree-id42164 . -1) (undo-tree-id42165 . -1) (undo-tree-id42166 . -1) (undo-tree-id42167 . -1) (undo-tree-id42168 . -1) (undo-tree-id42169 . -1) (undo-tree-id42170 . -1) (undo-tree-id42171 . -1) (undo-tree-id42172 . -1) (undo-tree-id42173 . -1) (undo-tree-id42174 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9650) (undo-tree-id42175 . 1) (undo-tree-id42176 . 1) (undo-tree-id42177 . -1) 9649) ((9649 . 9651) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9649) (9694 . 9696)) (25773 34824 98319 123000) 0 nil])
([nil nil ((9650 . 9651) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9650)) nil (25773 34827 580596 403000) 0 nil])
nil
([nil nil ((9653 . 9654) (#("ing" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9653) (undo-tree-id42369 . -2) (undo-tree-id42370 . -3) (undo-tree-id42371 . -2) (undo-tree-id42372 . -1) (undo-tree-id42373 . -3) (undo-tree-id42374 . -3) (t 25773 34827 700589 877000)) nil (25773 34841 278183 200000) 0 nil])
([nil nil ((9694 . 9696) (t 25773 34841 352736 961000)) nil (25773 34880 36058 300000) 0 nil])
([nil nil ((9771 . 9772) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9771) (undo-tree-id42747 . -1) (9695 . 9696) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9695) (undo-tree-id42748 . -1) (undo-tree-id42749 . -1) (undo-tree-id42750 . -1) (undo-tree-id42751 . -1) (undo-tree-id42752 . -1) (undo-tree-id42753 . -1) (undo-tree-id42754 . -1) (undo-tree-id42755 . -1) (undo-tree-id42756 . -1) (undo-tree-id42757 . -1) (undo-tree-id42758 . -1) (undo-tree-id42759 . -1) (undo-tree-id42760 . -1) (undo-tree-id42761 . -1) (undo-tree-id42762 . -1) (undo-tree-id42763 . -1) (undo-tree-id42764 . -1) (undo-tree-id42765 . -1) (undo-tree-id42766 . -1) (undo-tree-id42767 . -1) (undo-tree-id42768 . -1) (undo-tree-id42769 . -1) (undo-tree-id42770 . -1) (undo-tree-id42771 . -1) (undo-tree-id42772 . -1) (undo-tree-id42773 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9696) (undo-tree-id42774 . 1) (undo-tree-id42775 . -1) (undo-tree-id42776 . -1) (undo-tree-id42777 . -1) (undo-tree-id42778 . -1) (undo-tree-id42779 . -1) (undo-tree-id42780 . -1) (undo-tree-id42781 . -1) (undo-tree-id42782 . -1) (undo-tree-id42783 . -1) (undo-tree-id42784 . -1) (undo-tree-id42785 . -1) (undo-tree-id42786 . -1) (undo-tree-id42787 . -1) (undo-tree-id42788 . -1) (undo-tree-id42789 . -1) (undo-tree-id42790 . -1) 9695) nil (25773 34880 36052 815000) 0 nil])
([nil nil ((#("Just like any deep neural network it " 0 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9696) (undo-tree-id42744 . -36) (undo-tree-id42745 . 37) (undo-tree-id42746 . -37)) nil (25773 34880 36015 460000) 0 nil])
([nil nil ((9696 . 9697) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9696)) nil (25773 34880 36012 43000) 0 nil])
([nil nil ((9694 . 9803) (#("- it may take forever to train, or training may be unstable.
- May suffer from the unstable gradients problem" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 60 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 60 61 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 61 62 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 62 63 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 101 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 101 102 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 109 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9694) (undo-tree-id42384 . -63) (undo-tree-id42385 . -63) (undo-tree-id42386 . 46) (undo-tree-id42387 . -63) (undo-tree-id42388 . -63) (undo-tree-id42389 . 45) (undo-tree-id42390 . -109) (undo-tree-id42391 . -62) (undo-tree-id42392 . -62) (undo-tree-id42393 . -62) (undo-tree-id42394 . -62) (undo-tree-id42395 . -62) (undo-tree-id42396 . -62) (undo-tree-id42397 . -62) (undo-tree-id42398 . -62) (undo-tree-id42399 . -62) (undo-tree-id42400 . -62) (undo-tree-id42401 . -62) (undo-tree-id42402 . -62) (undo-tree-id42403 . -62) (undo-tree-id42404 . -62) (undo-tree-id42405 . -62) (undo-tree-id42406 . -62) (undo-tree-id42407 . -62) (undo-tree-id42408 . -62) (undo-tree-id42409 . -62) (undo-tree-id42410 . -62) (undo-tree-id42411 . -62) (undo-tree-id42412 . -62) (undo-tree-id42413 . -62) (undo-tree-id42414 . -62) (undo-tree-id42415 . -62) (undo-tree-id42416 . -62) (undo-tree-id42417 . -62) (undo-tree-id42418 . -62) (undo-tree-id42419 . -62) (undo-tree-id42420 . -62) (undo-tree-id42421 . -62) (undo-tree-id42422 . -62) (undo-tree-id42423 . -62) (undo-tree-id42424 . -62) (undo-tree-id42425 . -62) (undo-tree-id42426 . -62) (undo-tree-id42427 . -62) (undo-tree-id42428 . -62) (undo-tree-id42429 . -62) (undo-tree-id42430 . -62) (undo-tree-id42431 . -62) (undo-tree-id42432 . -62) (undo-tree-id42433 . -62) (undo-tree-id42434 . -62) (undo-tree-id42435 . -62) (undo-tree-id42436 . -62) (undo-tree-id42437 . -62) (undo-tree-id42438 . -62) (undo-tree-id42439 . -62) (undo-tree-id42440 . -62) (undo-tree-id42441 . -62) (undo-tree-id42442 . -62) (undo-tree-id42443 . -62) (undo-tree-id42444 . -62) (undo-tree-id42445 . -62) (undo-tree-id42446 . -62) (undo-tree-id42447 . -62) (undo-tree-id42448 . -62) (undo-tree-id42449 . -62) (undo-tree-id42450 . -62) (undo-tree-id42451 . -62) (undo-tree-id42452 . -62) (undo-tree-id42453 . -101) (undo-tree-id42454 . -101) (undo-tree-id42455 . -101) (undo-tree-id42456 . -101) (undo-tree-id42457 . -101) (undo-tree-id42458 . -101) (undo-tree-id42459 . -101) (undo-tree-id42460 . -101) (undo-tree-id42461 . -101) (undo-tree-id42462 . -101) (undo-tree-id42463 . -101) (undo-tree-id42464 . -101) (undo-tree-id42465 . -101) (undo-tree-id42466 . -101) (undo-tree-id42467 . -101) (undo-tree-id42468 . -101) (undo-tree-id42469 . -101) (undo-tree-id42470 . -101) (undo-tree-id42471 . -101) (undo-tree-id42472 . -101) (undo-tree-id42473 . -101) (undo-tree-id42474 . -101) (undo-tree-id42475 . -63) (undo-tree-id42476 . -63) (undo-tree-id42477 . -63) (undo-tree-id42478 . -63) (undo-tree-id42479 . -63) (undo-tree-id42480 . -63) (undo-tree-id42481 . -63) (undo-tree-id42482 . -63) (undo-tree-id42483 . -63) (undo-tree-id42484 . -63) (undo-tree-id42485 . -63) (undo-tree-id42486 . -63) (undo-tree-id42487 . -63) (undo-tree-id42488 . -63) (undo-tree-id42489 . -63) (undo-tree-id42490 . -63) (undo-tree-id42491 . -63) (undo-tree-id42492 . -63) (undo-tree-id42493 . -63) (undo-tree-id42494 . -63) (undo-tree-id42495 . -63) (undo-tree-id42496 . -63) (undo-tree-id42497 . -63) (undo-tree-id42498 . -63) (undo-tree-id42499 . -63) (undo-tree-id42500 . -63) (undo-tree-id42501 . -63) (undo-tree-id42502 . -63) (undo-tree-id42503 . -63) (undo-tree-id42504 . -63) (undo-tree-id42505 . -63) (undo-tree-id42506 . -63) (undo-tree-id42507 . -63) (undo-tree-id42508 . -63) (undo-tree-id42509 . -63) (undo-tree-id42510 . -63) (undo-tree-id42511 . -63) (undo-tree-id42512 . -63) (undo-tree-id42513 . -63) (undo-tree-id42514 . -63) (undo-tree-id42515 . -63) (undo-tree-id42516 . -63) (undo-tree-id42517 . -63) (undo-tree-id42518 . -63) (undo-tree-id42519 . -63) (undo-tree-id42520 . -63) (undo-tree-id42521 . -63) (undo-tree-id42522 . -63) (undo-tree-id42523 . -63) (undo-tree-id42524 . -63) (undo-tree-id42525 . -63) (undo-tree-id42526 . -63) (undo-tree-id42527 . -63) (undo-tree-id42528 . -63) (undo-tree-id42529 . -63) (undo-tree-id42530 . -63) (undo-tree-id42531 . -63) (undo-tree-id42532 . -63) (undo-tree-id42533 . -63) (undo-tree-id42534 . -63) (undo-tree-id42535 . -63) (undo-tree-id42536 . -63) (undo-tree-id42537 . -63) (undo-tree-id42538 . -63) (undo-tree-id42539 . -63) (undo-tree-id42540 . -63) (undo-tree-id42541 . -63) (undo-tree-id42542 . -63) (undo-tree-id42543 . -63) (undo-tree-id42544 . -63) (undo-tree-id42545 . -63) (undo-tree-id42546 . -63) (undo-tree-id42547 . -63) (undo-tree-id42548 . -63) (undo-tree-id42549 . -63) (undo-tree-id42550 . -63) (undo-tree-id42551 . -63) (undo-tree-id42552 . -63) (undo-tree-id42553 . -63) (undo-tree-id42554 . -63) (undo-tree-id42555 . -63) (undo-tree-id42556 . -63) (undo-tree-id42557 . -63) (undo-tree-id42558 . -63) (undo-tree-id42559 . -63) (undo-tree-id42560 . -63) (undo-tree-id42561 . -63) (undo-tree-id42562 . -63) (undo-tree-id42563 . -63) (undo-tree-id42564 . -63) (undo-tree-id42565 . -63) (undo-tree-id42566 . -63) (undo-tree-id42567 . -63) (undo-tree-id42568 . -63) (undo-tree-id42569 . -63) (undo-tree-id42570 . -63) (undo-tree-id42571 . -63) (undo-tree-id42572 . -63) (undo-tree-id42573 . -63) (undo-tree-id42574 . -63) (undo-tree-id42575 . -63) (undo-tree-id42576 . -63) (undo-tree-id42577 . -63) (undo-tree-id42578 . -63) (undo-tree-id42579 . -63) (undo-tree-id42580 . -63) (undo-tree-id42581 . -63) (undo-tree-id42582 . -63) (undo-tree-id42583 . -63) (undo-tree-id42584 . -63) (undo-tree-id42585 . -63) (undo-tree-id42586 . -63) (undo-tree-id42587 . -63) (undo-tree-id42588 . -63) (undo-tree-id42589 . -63) (undo-tree-id42590 . -63) (undo-tree-id42591 . -63) (undo-tree-id42592 . -63) (undo-tree-id42593 . -63) (undo-tree-id42594 . -63) (undo-tree-id42595 . -63) (undo-tree-id42596 . -63) (undo-tree-id42597 . -63) (undo-tree-id42598 . -63) (undo-tree-id42599 . -63) (undo-tree-id42600 . -63) (undo-tree-id42601 . -63) (undo-tree-id42602 . -63) (undo-tree-id42603 . -63) (undo-tree-id42604 . -63) (undo-tree-id42605 . -63) (undo-tree-id42606 . -65) (undo-tree-id42607 . -65) (undo-tree-id42608 . -65) (undo-tree-id42609 . -65) (undo-tree-id42610 . -65) (undo-tree-id42611 . -65) (undo-tree-id42612 . -65) (undo-tree-id42613 . -65) (undo-tree-id42614 . -65) (undo-tree-id42615 . -65) (undo-tree-id42616 . -65) (undo-tree-id42617 . -65) (undo-tree-id42618 . -65) (undo-tree-id42619 . -65) (undo-tree-id42620 . -65) (undo-tree-id42621 . -72) (undo-tree-id42622 . -72) (undo-tree-id42623 . -72) (undo-tree-id42624 . -72) (undo-tree-id42625 . -72) (undo-tree-id42626 . -72) (undo-tree-id42627 . -72) (undo-tree-id42628 . -72) (undo-tree-id42629 . -72) (undo-tree-id42630 . -72) (undo-tree-id42631 . -72) (undo-tree-id42632 . -72) (undo-tree-id42633 . -72) (undo-tree-id42634 . -72) (undo-tree-id42635 . -72) (undo-tree-id42636 . -77) (undo-tree-id42637 . -77) (undo-tree-id42638 . -77) (undo-tree-id42639 . -77) (undo-tree-id42640 . -77) (undo-tree-id42641 . -77) (undo-tree-id42642 . -77) (undo-tree-id42643 . -77) (undo-tree-id42644 . -77) (undo-tree-id42645 . -77) (undo-tree-id42646 . -77) (undo-tree-id42647 . -77) (undo-tree-id42648 . -77) (undo-tree-id42649 . -77) (undo-tree-id42650 . -77) (undo-tree-id42651 . -81) (undo-tree-id42652 . -81) (undo-tree-id42653 . -81) (undo-tree-id42654 . -81) (undo-tree-id42655 . -81) (undo-tree-id42656 . -81) (undo-tree-id42657 . -81) (undo-tree-id42658 . -81) (undo-tree-id42659 . -81) (undo-tree-id42660 . -81) (undo-tree-id42661 . -81) (undo-tree-id42662 . -81) (undo-tree-id42663 . -81) (undo-tree-id42664 . -81) (undo-tree-id42665 . -81) (undo-tree-id42666 . -90) (undo-tree-id42667 . -90) (undo-tree-id42668 . -90) (undo-tree-id42669 . -90) (undo-tree-id42670 . -90) (undo-tree-id42671 . -90) (undo-tree-id42672 . -90) (undo-tree-id42673 . -90) (undo-tree-id42674 . -90) (undo-tree-id42675 . -90) (undo-tree-id42676 . -90) (undo-tree-id42677 . -90) (undo-tree-id42678 . -90) (undo-tree-id42679 . -90) (undo-tree-id42680 . -90) (undo-tree-id42681 . -100) (undo-tree-id42682 . -100) (undo-tree-id42683 . -100) (undo-tree-id42684 . -100) (undo-tree-id42685 . -100) (undo-tree-id42686 . -100) (undo-tree-id42687 . -100) (undo-tree-id42688 . -100) (undo-tree-id42689 . -100) (undo-tree-id42690 . -100) (undo-tree-id42691 . -100) (undo-tree-id42692 . -100) (undo-tree-id42693 . -100) (undo-tree-id42694 . -100) (undo-tree-id42695 . -100) (undo-tree-id42696 . -100) (undo-tree-id42697 . -100) (undo-tree-id42698 . -100) (undo-tree-id42699 . -100) (undo-tree-id42700 . -100) (undo-tree-id42701 . -100) (undo-tree-id42702 . -100) (undo-tree-id42703 . -108) (undo-tree-id42704 . -108) (undo-tree-id42705 . -108) (undo-tree-id42706 . -108) (undo-tree-id42707 . -108) (undo-tree-id42708 . -108) (undo-tree-id42709 . -108) (undo-tree-id42710 . -108) (undo-tree-id42711 . -108) (undo-tree-id42712 . -108) (undo-tree-id42713 . -108) (undo-tree-id42714 . -108) (undo-tree-id42715 . -108) (undo-tree-id42716 . -108) (undo-tree-id42717 . -108) (undo-tree-id42718 . -109) (undo-tree-id42719 . -109) (undo-tree-id42720 . -109) (undo-tree-id42721 . -109) (undo-tree-id42722 . -109) (undo-tree-id42723 . -109) (undo-tree-id42724 . -109) (undo-tree-id42725 . -109) (undo-tree-id42726 . -109) (undo-tree-id42727 . -109) (undo-tree-id42728 . -109) (undo-tree-id42729 . -109) (undo-tree-id42730 . -109) (undo-tree-id42731 . -109) (undo-tree-id42732 . -109) (undo-tree-id42733 . -109) (undo-tree-id42734 . -109) (undo-tree-id42735 . -109) (undo-tree-id42736 . -109) (undo-tree-id42737 . -109) (undo-tree-id42738 . -109) (undo-tree-id42739 . -109) (undo-tree-id42740 . -109) (undo-tree-id42741 . -109) (undo-tree-id42742 . -109) (undo-tree-id42743 . -61) (9694 . 9755) (#(" it may take forever to train, or training may be unstable." 0 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9742)) nil (25773 34880 35997 927000) 0 nil])
([nil nil ((#("it " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9745) (undo-tree-id42381 . -2) (undo-tree-id42382 . 3) (undo-tree-id42383 . -3)) nil (25773 34880 35246 148000) 0 nil])
([nil nil ((#("may take forever to train, or training " 0 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9745) (undo-tree-id42375 . -38) (undo-tree-id42376 . 39) (undo-tree-id42377 . -38) (undo-tree-id42378 . -30) (undo-tree-id42379 . -1) (undo-tree-id42380 . -39)) nil (25773 34880 35242 337000) 0 nil])
([nil nil ((9745 . 9746) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9745)) nil (25773 34880 35226 663000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9760) (undo-tree-id42805 . -1) (undo-tree-id42806 . -1) (t 25773 34880 105157 547000)) nil (25773 34887 952483 25000) 0 nil])
([nil nil ((9761 . 9763)) nil (25773 34887 952480 205000) 0 nil])
([nil nil ((9829 . 9830) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9829) (undo-tree-id42791 . -1) (9762 . 9763) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9762) (undo-tree-id42792 . -1) (undo-tree-id42793 . -1) (undo-tree-id42794 . -1) (undo-tree-id42795 . -1) (undo-tree-id42796 . -1) (undo-tree-id42797 . -1) (undo-tree-id42798 . -1) (undo-tree-id42799 . -1) (undo-tree-id42800 . -1) (undo-tree-id42801 . -1) (undo-tree-id42802 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9763) (undo-tree-id42803 . 1) (undo-tree-id42804 . -1) 9762) nil (25773 34887 952475 552000) 0 nil])
([nil nil ((#("Moreover" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9763) (undo-tree-id42833 . -7) (undo-tree-id42834 . 8) (undo-tree-id42835 . -8) (t 25773 34888 13243 914000)) nil (25773 34919 846763 544000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9763) (undo-tree-id42830 . -1) (undo-tree-id42831 . 2) (undo-tree-id42832 . -2)) nil (25773 34919 846760 810000) 0 nil])
([nil nil ((#("when " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9763) (undo-tree-id42827 . -4) (undo-tree-id42828 . 5) (undo-tree-id42829 . -5)) nil (25773 34919 846758 341000) 0 nil])
([nil nil ((#("an " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9763) (undo-tree-id42824 . -2) (undo-tree-id42825 . 3) (undo-tree-id42826 . -3)) nil (25773 34919 846754 320000) 0 nil])
([nil nil ((#("processes a long sequence, it will" 0 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9767) (undo-tree-id42810 . -33) (undo-tree-id42811 . -33) (undo-tree-id42812 . -33) (undo-tree-id42813 . -34) (undo-tree-id42814 . -33) (undo-tree-id42815 . -8) (undo-tree-id42816 . -10) (undo-tree-id42817 . -15) (undo-tree-id42818 . -24) (undo-tree-id42819 . -25) (undo-tree-id42820 . -28) (undo-tree-id42821 . -33) (undo-tree-id42822 . -33) (undo-tree-id42823 . -34) 9800) nil (25773 34919 846751 282000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9767) (undo-tree-id42807 . 1) (undo-tree-id42808 . -1) (undo-tree-id42809 . -1)) nil (25773 34919 846739 990000) 0 nil])
([nil nil ((9783 . 9784)) nil (25773 34919 846723 139000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9817) (undo-tree-id42836 . -1) (undo-tree-id42837 . -1) (t 25773 34919 953594 496000)) nil (25773 34924 532358 956000) 0 nil])
([nil nil ((9861 . 9863) (t 25773 34924 597645 697000)) nil (25773 35003 726881 271000) 0 nil])
([nil nil ((10258 . 10259) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10258) (undo-tree-id45235 . -1) (10178 . 10179) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10178) (undo-tree-id45236 . -1) (10101 . 10102) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10101) (undo-tree-id45237 . -1) (10020 . 10021) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10020) (undo-tree-id45238 . -1) (9939 . 9940) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9939) (undo-tree-id45239 . -1) 9862) nil (25773 35003 726879 577000) 0 nil])
([nil nil ((#("they" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9898) (undo-tree-id45192 . -3) (undo-tree-id45193 . -1) (undo-tree-id45194 . -1) (undo-tree-id45195 . -1) (undo-tree-id45196 . -1) (undo-tree-id45197 . -1) (undo-tree-id45198 . -1) (undo-tree-id45199 . -1) (undo-tree-id45200 . -1) (undo-tree-id45201 . -1) (undo-tree-id45202 . -1) (undo-tree-id45203 . -1) (undo-tree-id45204 . -1) (undo-tree-id45205 . -1) (undo-tree-id45206 . -1) (undo-tree-id45207 . -1) (undo-tree-id45208 . -1) (undo-tree-id45209 . -1) (undo-tree-id45210 . -1) (undo-tree-id45211 . -1) (undo-tree-id45212 . -1) (undo-tree-id45213 . -1) (undo-tree-id45214 . -1) (undo-tree-id45215 . -1) (undo-tree-id45216 . -1) (undo-tree-id45217 . -1) (undo-tree-id45218 . -1) (undo-tree-id45219 . -1) (undo-tree-id45220 . -1) (undo-tree-id45221 . -1) (undo-tree-id45222 . -1) (undo-tree-id45223 . -1) (undo-tree-id45224 . -1) (undo-tree-id45225 . -1) (undo-tree-id45226 . -1) (undo-tree-id45227 . -1) (undo-tree-id45228 . -1) (undo-tree-id45229 . -1) (undo-tree-id45230 . -1) (undo-tree-id45231 . -1) (undo-tree-id45232 . -1) (undo-tree-id45233 . -4) (undo-tree-id45234 . -4) 9899) nil (25773 35003 726873 481000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9897) (undo-tree-id45135 . -1) (undo-tree-id45136 . -1) (undo-tree-id45137 . -1) (undo-tree-id45138 . -1) (undo-tree-id45139 . -1) (undo-tree-id45140 . -1) (undo-tree-id45141 . -1) (undo-tree-id45142 . -1) (undo-tree-id45143 . -1) (undo-tree-id45144 . -1) (undo-tree-id45145 . -1) (undo-tree-id45146 . -1) (undo-tree-id45147 . -1) (undo-tree-id45148 . -1) (undo-tree-id45149 . -1) (undo-tree-id45150 . -1) (undo-tree-id45151 . -1) (undo-tree-id45152 . -1) (undo-tree-id45153 . -1) (undo-tree-id45154 . -1) (undo-tree-id45155 . -1) (undo-tree-id45156 . -1) (undo-tree-id45157 . -1) (undo-tree-id45158 . -1) (undo-tree-id45159 . -1) (undo-tree-id45160 . -1) (undo-tree-id45161 . -1) (undo-tree-id45162 . -1) (undo-tree-id45163 . -1) (undo-tree-id45164 . -1) (undo-tree-id45165 . -1) (undo-tree-id45166 . -1) (undo-tree-id45167 . -1) (undo-tree-id45168 . -1) (undo-tree-id45169 . -1) (undo-tree-id45170 . -1) (undo-tree-id45171 . -1) (undo-tree-id45172 . -1) (undo-tree-id45173 . -1) (undo-tree-id45174 . -1) (undo-tree-id45175 . -1) (undo-tree-id45176 . -1) (undo-tree-id45177 . -1) (undo-tree-id45178 . -1) (undo-tree-id45179 . -1) (undo-tree-id45180 . -1) (undo-tree-id45181 . -1) (undo-tree-id45182 . -1) (undo-tree-id45183 . -1) (undo-tree-id45184 . -1) (undo-tree-id45185 . -1) (undo-tree-id45186 . -1) (undo-tree-id45187 . -1) (undo-tree-id45188 . -1) (undo-tree-id45189 . -1) (undo-tree-id45190 . -1) (undo-tree-id45191 . -1)) nil (25773 35003 726847 551000) 0 nil])
([nil nil ((9907 . 9909) (9905 . 9907) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9905) (undo-tree-id44811 . -1) (undo-tree-id44812 . -1) (undo-tree-id44813 . -1) (undo-tree-id44814 . -1) (undo-tree-id44815 . -1) (undo-tree-id44816 . -1) (undo-tree-id44817 . -1) (undo-tree-id44818 . -1) (undo-tree-id44819 . -1) (undo-tree-id44820 . -1) (undo-tree-id44821 . -1) (undo-tree-id44822 . -1) (undo-tree-id44823 . -1) (undo-tree-id44824 . -1) (undo-tree-id44825 . -1) (undo-tree-id44826 . -1) (undo-tree-id44827 . -1) (undo-tree-id44828 . -1) (undo-tree-id44829 . -1) (undo-tree-id44830 . -1) (undo-tree-id44831 . -1) (undo-tree-id44832 . -1) (undo-tree-id44833 . -1) (undo-tree-id44834 . -1) (undo-tree-id44835 . -1) (undo-tree-id44836 . -1) 9906 (9902 . 9906) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9902) (undo-tree-id44837 . -1) (undo-tree-id44838 . -1) (undo-tree-id44839 . -1) (undo-tree-id44840 . -1) (undo-tree-id44841 . -1) (undo-tree-id44842 . -1) (undo-tree-id44843 . -1) (undo-tree-id44844 . -1) (undo-tree-id44845 . -1) (undo-tree-id44846 . -1) (undo-tree-id44847 . -1) (undo-tree-id44848 . -1) (undo-tree-id44849 . -1) (undo-tree-id44850 . -1) (undo-tree-id44851 . -1) (undo-tree-id44852 . -1) (undo-tree-id44853 . -1) (undo-tree-id44854 . -1) (undo-tree-id44855 . -1) (undo-tree-id44856 . -1) (undo-tree-id44857 . -1) (undo-tree-id44858 . -1) (undo-tree-id44859 . -1) (undo-tree-id44860 . -1) (undo-tree-id44861 . -1) (undo-tree-id44862 . -1) (undo-tree-id44863 . -1) (undo-tree-id44864 . -1) (undo-tree-id44865 . -1) (undo-tree-id44866 . -1) (undo-tree-id44867 . -1) (undo-tree-id44868 . -1) (undo-tree-id44869 . -1) (undo-tree-id44870 . -1) (undo-tree-id44871 . -1) (undo-tree-id44872 . -1) (undo-tree-id44873 . -1) (undo-tree-id44874 . -1) (undo-tree-id44875 . -1) (undo-tree-id44876 . -1) (undo-tree-id44877 . -1) (undo-tree-id44878 . -1) (undo-tree-id44879 . -1) (undo-tree-id44880 . -1) (undo-tree-id44881 . -1) (undo-tree-id44882 . -1) (undo-tree-id44883 . -1) (undo-tree-id44884 . -1) (undo-tree-id44885 . -1) (undo-tree-id44886 . -1) (undo-tree-id44887 . -1) (undo-tree-id44888 . -1) (undo-tree-id44889 . -1) (undo-tree-id44890 . -1) (undo-tree-id44891 . -1) (undo-tree-id44892 . -1) 9903 (9902 . 9903) (#("actually lead the RNN to be even more" 0 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 15 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9902) (undo-tree-id44893 . -36) (undo-tree-id44894 . -36) (undo-tree-id44895 . -36) (undo-tree-id44896 . -32) (undo-tree-id44897 . -32) (undo-tree-id44898 . -32) (undo-tree-id44899 . -32) (undo-tree-id44900 . -32) (undo-tree-id44901 . -32) (undo-tree-id44902 . -32) (undo-tree-id44903 . -32) (undo-tree-id44904 . -32) (undo-tree-id44905 . -32) (undo-tree-id44906 . -32) (undo-tree-id44907 . -32) (undo-tree-id44908 . -32) (undo-tree-id44909 . -32) (undo-tree-id44910 . -32) (undo-tree-id44911 . -32) (undo-tree-id44912 . -7) (undo-tree-id44913 . -7) (undo-tree-id44914 . -7) (undo-tree-id44915 . -7) (undo-tree-id44916 . -7) (undo-tree-id44917 . -7) (undo-tree-id44918 . -7) (undo-tree-id44919 . -7) (undo-tree-id44920 . -7) (undo-tree-id44921 . -7) (undo-tree-id44922 . -7) (undo-tree-id44923 . -7) (undo-tree-id44924 . -7) (undo-tree-id44925 . -7) (undo-tree-id44926 . -7) (undo-tree-id44927 . -7) (undo-tree-id44928 . -7) (undo-tree-id44929 . -7) (undo-tree-id44930 . -7) (undo-tree-id44931 . -7) (undo-tree-id44932 . -7) (undo-tree-id44933 . -7) (undo-tree-id44934 . -7) (undo-tree-id44935 . -7) (undo-tree-id44936 . -7) (undo-tree-id44937 . -7) (undo-tree-id44938 . -7) (undo-tree-id44939 . -7) (undo-tree-id44940 . -7) (undo-tree-id44941 . -7) (undo-tree-id44942 . -7) (undo-tree-id44943 . -7) (undo-tree-id44944 . -7) (undo-tree-id44945 . -7) (undo-tree-id44946 . -7) (undo-tree-id44947 . -7) (undo-tree-id44948 . -7) (undo-tree-id44949 . -7) (undo-tree-id44950 . -7) (undo-tree-id44951 . -37) (undo-tree-id44952 . -36) (undo-tree-id44953 . -7) (undo-tree-id44954 . -7) (undo-tree-id44955 . -7) (undo-tree-id44956 . -7) (undo-tree-id44957 . -7) (undo-tree-id44958 . -7) (undo-tree-id44959 . -7) (undo-tree-id44960 . -7) (undo-tree-id44961 . -7) (undo-tree-id44962 . -7) (undo-tree-id44963 . -7) (undo-tree-id44964 . -7) (undo-tree-id44965 . -7) (undo-tree-id44966 . -7) (undo-tree-id44967 . -7) (undo-tree-id44968 . -7) (undo-tree-id44969 . -7) (undo-tree-id44970 . -7) (undo-tree-id44971 . -7) (undo-tree-id44972 . -7) (undo-tree-id44973 . -7) (undo-tree-id44974 . -7) (undo-tree-id44975 . -12) (undo-tree-id44976 . -12) (undo-tree-id44977 . -12) (undo-tree-id44978 . -12) (undo-tree-id44979 . -12) (undo-tree-id44980 . -12) (undo-tree-id44981 . -12) (undo-tree-id44982 . -12) (undo-tree-id44983 . -12) (undo-tree-id44984 . -12) (undo-tree-id44985 . -12) (undo-tree-id44986 . -12) (undo-tree-id44987 . -12) (undo-tree-id44988 . -12) (undo-tree-id44989 . -12) (undo-tree-id44990 . -12) (undo-tree-id44991 . -12) (undo-tree-id44992 . -12) (undo-tree-id44993 . -12) (undo-tree-id44994 . -12) (undo-tree-id44995 . -12) (undo-tree-id44996 . -12) (undo-tree-id44997 . -16) (undo-tree-id44998 . -16) (undo-tree-id44999 . -16) (undo-tree-id45000 . -16) (undo-tree-id45001 . -16) (undo-tree-id45002 . -16) (undo-tree-id45003 . -16) (undo-tree-id45004 . -16) (undo-tree-id45005 . -16) (undo-tree-id45006 . -16) (undo-tree-id45007 . -16) (undo-tree-id45008 . -16) (undo-tree-id45009 . -16) (undo-tree-id45010 . -16) (undo-tree-id45011 . -16) (undo-tree-id45012 . -16) (undo-tree-id45013 . -16) (undo-tree-id45014 . -16) (undo-tree-id45015 . -16) (undo-tree-id45016 . -16) (undo-tree-id45017 . -16) (undo-tree-id45018 . -16) (undo-tree-id45019 . 19) (undo-tree-id45020 . -21) (undo-tree-id45021 . -20) (undo-tree-id45022 . -20) (undo-tree-id45023 . -20) (undo-tree-id45024 . -20) (undo-tree-id45025 . -20) (undo-tree-id45026 . -20) (undo-tree-id45027 . -20) (undo-tree-id45028 . -20) (undo-tree-id45029 . -20) (undo-tree-id45030 . -20) (undo-tree-id45031 . -20) (undo-tree-id45032 . -20) (undo-tree-id45033 . -20) (undo-tree-id45034 . -20) (undo-tree-id45035 . -20) (undo-tree-id45036 . -20) (undo-tree-id45037 . -20) (undo-tree-id45038 . -20) (undo-tree-id45039 . -20) (undo-tree-id45040 . -20) (undo-tree-id45041 . -20) (undo-tree-id45042 . -20) (undo-tree-id45043 . -23) (undo-tree-id45044 . -23) (undo-tree-id45045 . -23) (undo-tree-id45046 . -23) (undo-tree-id45047 . -23) (undo-tree-id45048 . -23) (undo-tree-id45049 . -23) (undo-tree-id45050 . -23) (undo-tree-id45051 . -23) (undo-tree-id45052 . -23) (undo-tree-id45053 . -23) (undo-tree-id45054 . -23) (undo-tree-id45055 . -23) (undo-tree-id45056 . -23) (undo-tree-id45057 . -23) (undo-tree-id45058 . -23) (undo-tree-id45059 . -23) (undo-tree-id45060 . -23) (undo-tree-id45061 . -23) (undo-tree-id45062 . -23) (undo-tree-id45063 . -23) (undo-tree-id45064 . -23) (undo-tree-id45065 . -26) (undo-tree-id45066 . -26) (undo-tree-id45067 . -26) (undo-tree-id45068 . -26) (undo-tree-id45069 . -26) (undo-tree-id45070 . -26) (undo-tree-id45071 . -26) (undo-tree-id45072 . -26) (undo-tree-id45073 . -26) (undo-tree-id45074 . -26) (undo-tree-id45075 . -26) (undo-tree-id45076 . -26) (undo-tree-id45077 . -26) (undo-tree-id45078 . -26) (undo-tree-id45079 . -26) (undo-tree-id45080 . -26) (undo-tree-id45081 . -26) (undo-tree-id45082 . -26) (undo-tree-id45083 . -26) (undo-tree-id45084 . -26) (undo-tree-id45085 . -26) (undo-tree-id45086 . -26) (undo-tree-id45087 . -31) (undo-tree-id45088 . -31) (undo-tree-id45089 . -31) (undo-tree-id45090 . -31) (undo-tree-id45091 . -31) (undo-tree-id45092 . -31) (undo-tree-id45093 . -31) (undo-tree-id45094 . -31) (undo-tree-id45095 . -31) (undo-tree-id45096 . -31) (undo-tree-id45097 . -31) (undo-tree-id45098 . -31) (undo-tree-id45099 . -31) (undo-tree-id45100 . -31) (undo-tree-id45101 . -31) (undo-tree-id45102 . -31) (undo-tree-id45103 . -31) (undo-tree-id45104 . -31) (undo-tree-id45105 . -31) (undo-tree-id45106 . -31) (undo-tree-id45107 . -31) (undo-tree-id45108 . -31) (undo-tree-id45109 . -36) (undo-tree-id45110 . -36) (undo-tree-id45111 . -36) (undo-tree-id45112 . -36) (undo-tree-id45113 . -36) (undo-tree-id45114 . -36) (undo-tree-id45115 . -36) (undo-tree-id45116 . -36) (undo-tree-id45117 . -36) (undo-tree-id45118 . -36) (undo-tree-id45119 . -36) (undo-tree-id45120 . -36) (undo-tree-id45121 . -36) (undo-tree-id45122 . -36) (undo-tree-id45123 . -36) (undo-tree-id45124 . -36) (undo-tree-id45125 . -36) (undo-tree-id45126 . -36) (undo-tree-id45127 . -36) (undo-tree-id45128 . -36) (undo-tree-id45129 . -36) (undo-tree-id45130 . -36) (undo-tree-id45131 . -36) (undo-tree-id45132 . -37) (undo-tree-id45133 . -37) (undo-tree-id45134 . -37) 9938) nil (25773 35003 726804 501000) 0 nil])
([nil nil ((9917 . 9920) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9917) (undo-tree-id44793 . -1) (undo-tree-id44794 . -1) (undo-tree-id44795 . -1) (undo-tree-id44796 . -1) (undo-tree-id44797 . -1) (undo-tree-id44798 . -1) (undo-tree-id44799 . -1) (undo-tree-id44800 . -1) (undo-tree-id44801 . -1) (undo-tree-id44802 . -1) (undo-tree-id44803 . -1) (undo-tree-id44804 . -1) (undo-tree-id44805 . -1) (undo-tree-id44806 . -1) (undo-tree-id44807 . -1) (undo-tree-id44808 . -1) (undo-tree-id44809 . -1) (undo-tree-id44810 . -1)) nil (25773 35003 726626 80000) 0 nil])
([nil nil ((9916 . 9917)) nil (25773 35003 726613 752000) 0 nil])
([nil nil ((#(" during training" 0 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9921) (undo-tree-id44739 . -15) (undo-tree-id44740 . -1) (undo-tree-id44741 . -1) (undo-tree-id44742 . -1) (undo-tree-id44743 . -1) (undo-tree-id44744 . -1) (undo-tree-id44745 . -1) (undo-tree-id44746 . -1) (undo-tree-id44747 . -1) (undo-tree-id44748 . -1) (undo-tree-id44749 . -1) (undo-tree-id44750 . -1) (undo-tree-id44751 . -1) (undo-tree-id44752 . -1) (undo-tree-id44753 . -1) (undo-tree-id44754 . -1) (undo-tree-id44755 . -1) (undo-tree-id44756 . -1) (undo-tree-id44757 . -1) (undo-tree-id44758 . -1) (undo-tree-id44759 . -1) (undo-tree-id44760 . -1) (undo-tree-id44761 . -1) (undo-tree-id44762 . -1) (undo-tree-id44763 . -1) (undo-tree-id44764 . -1) (undo-tree-id44765 . -1) (undo-tree-id44766 . -1) (undo-tree-id44767 . -1) (undo-tree-id44768 . -1) (undo-tree-id44769 . -1) (undo-tree-id44770 . -1) (undo-tree-id44771 . -1) (undo-tree-id44772 . -1) (undo-tree-id44773 . -1) (undo-tree-id44774 . -1) (undo-tree-id44775 . -1) (undo-tree-id44776 . -1) (undo-tree-id44777 . -1) (undo-tree-id44778 . -1) (undo-tree-id44779 . -1) (undo-tree-id44780 . -1) (undo-tree-id44781 . -1) (undo-tree-id44782 . -1) (undo-tree-id44783 . -1) (undo-tree-id44784 . -1) (undo-tree-id44785 . -1) (undo-tree-id44786 . -1) (undo-tree-id44787 . -1) (undo-tree-id44788 . -1) (undo-tree-id44789 . -1) (undo-tree-id44790 . -1) (undo-tree-id44791 . -1) (undo-tree-id44792 . -16)) nil (25773 35003 726610 835000) 0 nil])
([nil nil ((9861 . 10283) (#("- Suppose Gradient Descent updates the weights in a way that increases the outputs slightly at the first time step. Because the same weights are used at every time step, the outputs at the second time step may also be slightly increased, and those at the third, and so on until the outputs explode—and a nonsaturating activation function does not prevent that.
- Nonsaturating activation functions may lead to unstability." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 51 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 51 52 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 52 98 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 98 132 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 132 133 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 133 134 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 134 209 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 209 210 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 210 223 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 223 289 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 289 290 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 290 293 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 293 360 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 360 361 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 361 362 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 362 363 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 363 409 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 409 413 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 413 422 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9861) (undo-tree-id42838 . -421) (undo-tree-id42839 . -421) (undo-tree-id42840 . 5) (undo-tree-id42841 . -402) (undo-tree-id42842 . -402) (undo-tree-id42843 . 13) (undo-tree-id42844 . -409) (undo-tree-id42845 . -377) (undo-tree-id42846 . -409) (undo-tree-id42847 . -422) (undo-tree-id42848 . -362) (undo-tree-id42849 . -362) (undo-tree-id42850 . -362) (undo-tree-id42851 . -362) (undo-tree-id42852 . -362) (undo-tree-id42853 . -362) (undo-tree-id42854 . -362) (undo-tree-id42855 . -362) (undo-tree-id42856 . -362) (undo-tree-id42857 . -363) (undo-tree-id42858 . -363) (undo-tree-id42859 . -363) (undo-tree-id42860 . -363) (undo-tree-id42861 . -363) (undo-tree-id42862 . -363) (undo-tree-id42863 . -363) (undo-tree-id42864 . -363) (undo-tree-id42865 . -363) (undo-tree-id42866 . -362) (undo-tree-id42867 . -362) (undo-tree-id42868 . -362) (undo-tree-id42869 . -362) (undo-tree-id42870 . -362) (undo-tree-id42871 . -362) (undo-tree-id42872 . -362) (undo-tree-id42873 . -362) (undo-tree-id42874 . -362) (undo-tree-id42875 . -362) (undo-tree-id42876 . -362) (undo-tree-id42877 . -362) (undo-tree-id42878 . -362) (undo-tree-id42879 . -362) (undo-tree-id42880 . -362) (undo-tree-id42881 . -362) (undo-tree-id42882 . -362) (undo-tree-id42883 . -362) (undo-tree-id42884 . -362) (undo-tree-id42885 . -362) (undo-tree-id42886 . -402) (undo-tree-id42887 . -402) (undo-tree-id42888 . -402) (undo-tree-id42889 . -402) (undo-tree-id42890 . -402) (undo-tree-id42891 . -402) (undo-tree-id42892 . -402) (undo-tree-id42893 . -402) (undo-tree-id42894 . -402) (undo-tree-id42895 . -402) (undo-tree-id42896 . -402) (undo-tree-id42897 . -402) (undo-tree-id42898 . -402) (undo-tree-id42899 . -402) (undo-tree-id42900 . -402) (undo-tree-id42901 . -402) (undo-tree-id42902 . -422) (undo-tree-id42903 . -422) (undo-tree-id42904 . -422) (undo-tree-id42905 . -422) (undo-tree-id42906 . -422) (undo-tree-id42907 . -422) (undo-tree-id42908 . -422) (undo-tree-id42909 . -422) (undo-tree-id42910 . -422) (undo-tree-id42911 . -422) (undo-tree-id42912 . -422) (undo-tree-id42913 . -422) (undo-tree-id42914 . -422) (undo-tree-id42915 . -422) (undo-tree-id42916 . -422) (undo-tree-id42917 . -422) (undo-tree-id42918 . -422) (undo-tree-id42919 . -422) (undo-tree-id42920 . -422) (undo-tree-id42921 . -422) (undo-tree-id42922 . -422) (undo-tree-id42923 . -422) (undo-tree-id42924 . -422) (undo-tree-id42925 . -422) (undo-tree-id42926 . -422) (undo-tree-id42927 . -422) (undo-tree-id42928 . -422) (undo-tree-id42929 . -422) (undo-tree-id42930 . -422) (undo-tree-id42931 . -422) (undo-tree-id42932 . -422) (undo-tree-id42933 . -422) (undo-tree-id42934 . -422) (undo-tree-id42935 . -422) (undo-tree-id42936 . -422) (undo-tree-id42937 . -422) (undo-tree-id42938 . -422) (undo-tree-id42939 . -422) (undo-tree-id42940 . -422) (undo-tree-id42941 . -422) (undo-tree-id42942 . -422) (undo-tree-id42943 . -422) (undo-tree-id42944 . -422) (undo-tree-id42945 . -422) (undo-tree-id42946 . -422) (undo-tree-id42947 . -422) (undo-tree-id42948 . -422) (undo-tree-id42949 . -422) (undo-tree-id42950 . -422) (undo-tree-id42951 . -422) (undo-tree-id42952 . -422) (undo-tree-id42953 . -422) (undo-tree-id42954 . -422) (undo-tree-id42955 . -422) (undo-tree-id42956 . -422) (undo-tree-id42957 . -422) (undo-tree-id42958 . -422) (undo-tree-id42959 . -422) (undo-tree-id42960 . -422) (undo-tree-id42961 . -422) (undo-tree-id42962 . -422) (undo-tree-id42963 . -422) (undo-tree-id42964 . -422) (undo-tree-id42965 . -422) (undo-tree-id42966 . -422) (undo-tree-id42967 . -422) (undo-tree-id42968 . -422) (undo-tree-id42969 . -422) (undo-tree-id42970 . -422) (undo-tree-id42971 . -422) (undo-tree-id42972 . -422) (undo-tree-id42973 . -422) (undo-tree-id42974 . -422) (undo-tree-id42975 . -422) (undo-tree-id42976 . -422) (undo-tree-id42977 . -422) (undo-tree-id42978 . -422) (undo-tree-id42979 . -422) (undo-tree-id42980 . -422) (undo-tree-id42981 . -422) (undo-tree-id42982 . -422) (undo-tree-id42983 . -422) (undo-tree-id42984 . -422) (undo-tree-id42985 . -422) (undo-tree-id42986 . -422) (undo-tree-id42987 . -422) (undo-tree-id42988 . -422) (undo-tree-id42989 . -422) (undo-tree-id42990 . -422) (undo-tree-id42991 . -422) (undo-tree-id42992 . -422) (undo-tree-id42993 . -422) (undo-tree-id42994 . -422) (undo-tree-id42995 . -422) (undo-tree-id42996 . -422) (undo-tree-id42997 . -422) (undo-tree-id42998 . -422) (undo-tree-id42999 . -422) (undo-tree-id43000 . -422) (undo-tree-id43001 . -422) (undo-tree-id43002 . -422) (undo-tree-id43003 . -422) (undo-tree-id43004 . -422) (undo-tree-id43005 . -422) (undo-tree-id43006 . -422) (undo-tree-id43007 . -422) (undo-tree-id43008 . -422) (undo-tree-id43009 . -422) (undo-tree-id43010 . -422) (undo-tree-id43011 . -422) (undo-tree-id43012 . -422) (undo-tree-id43013 . -422) (undo-tree-id43014 . -422) (undo-tree-id43015 . -422) (undo-tree-id43016 . -422) (undo-tree-id43017 . -422) (undo-tree-id43018 . -422) (undo-tree-id43019 . -422) (undo-tree-id43020 . -422) (undo-tree-id43021 . -422) (undo-tree-id43022 . -422) (undo-tree-id43023 . -422) (undo-tree-id43024 . -422) (undo-tree-id43025 . -422) (undo-tree-id43026 . -386) (undo-tree-id43027 . -386) (undo-tree-id43028 . -386) (undo-tree-id43029 . -386) (undo-tree-id43030 . -386) (undo-tree-id43031 . -386) (undo-tree-id43032 . -386) (undo-tree-id43033 . -386) (undo-tree-id43034 . -386) (undo-tree-id43035 . -386) (undo-tree-id43036 . -386) (undo-tree-id43037 . -386) (undo-tree-id43038 . -386) (undo-tree-id43039 . -386) (undo-tree-id43040 . -386) (undo-tree-id43041 . -363) (undo-tree-id43042 . -363) (undo-tree-id43043 . -363) (undo-tree-id43044 . -363) (undo-tree-id43045 . -363) (undo-tree-id43046 . -363) (undo-tree-id43047 . -363) (undo-tree-id43048 . -363) (undo-tree-id43049 . -377) (undo-tree-id43050 . -377) (undo-tree-id43051 . -377) (undo-tree-id43052 . -377) (undo-tree-id43053 . -377) (undo-tree-id43054 . -377) (undo-tree-id43055 . -377) (undo-tree-id43056 . -377) (undo-tree-id43057 . -388) (undo-tree-id43058 . -388) (undo-tree-id43059 . -388) (undo-tree-id43060 . -388) (undo-tree-id43061 . -388) (undo-tree-id43062 . -388) (undo-tree-id43063 . -388) (undo-tree-id43064 . -388) (undo-tree-id43065 . -388) (undo-tree-id43066 . -388) (undo-tree-id43067 . -388) (undo-tree-id43068 . -388) (undo-tree-id43069 . -388) (undo-tree-id43070 . -388) (undo-tree-id43071 . -388) (undo-tree-id43072 . -388) (undo-tree-id43073 . -388) (undo-tree-id43074 . -388) (undo-tree-id43075 . -388) (undo-tree-id43076 . -388) (undo-tree-id43077 . -388) (undo-tree-id43078 . -388) (undo-tree-id43079 . -377) (undo-tree-id43080 . -377) (undo-tree-id43081 . -377) (undo-tree-id43082 . -377) (undo-tree-id43083 . -377) (undo-tree-id43084 . -377) (undo-tree-id43085 . -377) (undo-tree-id43086 . -377) (undo-tree-id43087 . -377) (undo-tree-id43088 . -377) (undo-tree-id43089 . -377) (undo-tree-id43090 . -377) (undo-tree-id43091 . -377) (undo-tree-id43092 . -377) (undo-tree-id43093 . -377) (undo-tree-id43094 . -363) (undo-tree-id43095 . -363) (undo-tree-id43096 . -363) (undo-tree-id43097 . -363) (undo-tree-id43098 . -363) (undo-tree-id43099 . -363) (undo-tree-id43100 . -363) (undo-tree-id43101 . -363) (undo-tree-id43102 . -363) (undo-tree-id43103 . -363) (undo-tree-id43104 . -363) (undo-tree-id43105 . -363) (undo-tree-id43106 . -363) (undo-tree-id43107 . -363) (undo-tree-id43108 . -363) (undo-tree-id43109 . 59) (undo-tree-id43110 . -376) (undo-tree-id43111 . -363) (undo-tree-id43112 . -363) (undo-tree-id43113 . -363) (undo-tree-id43114 . -363) (undo-tree-id43115 . -363) (undo-tree-id43116 . -363) (undo-tree-id43117 . -363) (undo-tree-id43118 . -363) (undo-tree-id43119 . -363) (undo-tree-id43120 . -363) (undo-tree-id43121 . -363) (undo-tree-id43122 . -363) (undo-tree-id43123 . -363) (undo-tree-id43124 . -363) (undo-tree-id43125 . -363) (undo-tree-id43126 . -363) (undo-tree-id43127 . -363) (undo-tree-id43128 . -363) (undo-tree-id43129 . -363) (undo-tree-id43130 . -363) (undo-tree-id43131 . -363) (undo-tree-id43132 . -363) (undo-tree-id43133 . -363) (undo-tree-id43134 . -363) (undo-tree-id43135 . -363) (undo-tree-id43136 . -363) (undo-tree-id43137 . -363) (undo-tree-id43138 . -363) (undo-tree-id43139 . -363) (undo-tree-id43140 . -363) (undo-tree-id43141 . -363) (undo-tree-id43142 . -363) (undo-tree-id43143 . -363) (undo-tree-id43144 . -363) (undo-tree-id43145 . -363) (undo-tree-id43146 . -363) (undo-tree-id43147 . -363) (undo-tree-id43148 . -363) (undo-tree-id43149 . -363) (undo-tree-id43150 . -363) (undo-tree-id43151 . -363) (undo-tree-id43152 . -363) (undo-tree-id43153 . -363) (undo-tree-id43154 . -363) (undo-tree-id43155 . -363) (undo-tree-id43156 . -363) (undo-tree-id43157 . -363) (undo-tree-id43158 . -363) (undo-tree-id43159 . -363) (undo-tree-id43160 . -363) (undo-tree-id43161 . -363) (undo-tree-id43162 . -363) (undo-tree-id43163 . -363) (undo-tree-id43164 . -363) (undo-tree-id43165 . -363) (undo-tree-id43166 . -363) (undo-tree-id43167 . -363) (undo-tree-id43168 . -363) (undo-tree-id43169 . -363) (undo-tree-id43170 . -363) (undo-tree-id43171 . -363) (undo-tree-id43172 . -363) (undo-tree-id43173 . -363) (undo-tree-id43174 . -363) (undo-tree-id43175 . -363) (undo-tree-id43176 . -363) (undo-tree-id43177 . -363) (undo-tree-id43178 . -363) (undo-tree-id43179 . -363) (undo-tree-id43180 . -363) (undo-tree-id43181 . -363) (undo-tree-id43182 . -363) (undo-tree-id43183 . -363) (undo-tree-id43184 . -363) (undo-tree-id43185 . -363) (undo-tree-id43186 . -363) (undo-tree-id43187 . -363) (undo-tree-id43188 . -363) (undo-tree-id43189 . -363) (undo-tree-id43190 . -363) (undo-tree-id43191 . -363) (undo-tree-id43192 . -363) (undo-tree-id43193 . -363) (undo-tree-id43194 . -363) (undo-tree-id43195 . -363) (undo-tree-id43196 . -363) (undo-tree-id43197 . -363) (undo-tree-id43198 . -363) (undo-tree-id43199 . -363) (undo-tree-id43200 . -363) (undo-tree-id43201 . -363) (undo-tree-id43202 . -363) (undo-tree-id43203 . -397) (undo-tree-id43204 . -397) (undo-tree-id43205 . -397) (undo-tree-id43206 . -397) (undo-tree-id43207 . -397) (undo-tree-id43208 . -397) (undo-tree-id43209 . -397) (undo-tree-id43210 . -397) (undo-tree-id43211 . -397) (undo-tree-id43212 . -397) (undo-tree-id43213 . -397) (undo-tree-id43214 . -397) (undo-tree-id43215 . -397) (undo-tree-id43216 . -397) (undo-tree-id43217 . -397) (undo-tree-id43218 . -397) (undo-tree-id43219 . -397) (undo-tree-id43220 . -397) (undo-tree-id43221 . -397) (undo-tree-id43222 . -397) (undo-tree-id43223 . -397) (undo-tree-id43224 . -397) (undo-tree-id43225 . -397) (undo-tree-id43226 . -397) (undo-tree-id43227 . -397) (undo-tree-id43228 . -397) (undo-tree-id43229 . -397) (undo-tree-id43230 . -397) (undo-tree-id43231 . -397) (undo-tree-id43232 . -397) (undo-tree-id43233 . -397) (undo-tree-id43234 . -397) (undo-tree-id43235 . -397) (undo-tree-id43236 . -397) (undo-tree-id43237 . -397) (undo-tree-id43238 . -397) (undo-tree-id43239 . -397) (undo-tree-id43240 . -397) (undo-tree-id43241 . -397) (undo-tree-id43242 . -397) (undo-tree-id43243 . -397) (undo-tree-id43244 . -397) (undo-tree-id43245 . -397) (undo-tree-id43246 . -397) (undo-tree-id43247 . -397) (undo-tree-id43248 . -397) (undo-tree-id43249 . -397) (undo-tree-id43250 . -397) (undo-tree-id43251 . -397) (undo-tree-id43252 . -397) (undo-tree-id43253 . -397) (undo-tree-id43254 . -397) (undo-tree-id43255 . -397) (undo-tree-id43256 . -397) (undo-tree-id43257 . -397) (undo-tree-id43258 . -397) (undo-tree-id43259 . -397) (undo-tree-id43260 . -397) (undo-tree-id43261 . -397) (undo-tree-id43262 . -397) (undo-tree-id43263 . -397) (undo-tree-id43264 . -397) (undo-tree-id43265 . -397) (undo-tree-id43266 . -397) (undo-tree-id43267 . -397) (undo-tree-id43268 . -397) (undo-tree-id43269 . -397) (undo-tree-id43270 . -397) (undo-tree-id43271 . -397) (undo-tree-id43272 . -397) (undo-tree-id43273 . -397) (undo-tree-id43274 . -397) (undo-tree-id43275 . -397) (undo-tree-id43276 . -397) (undo-tree-id43277 . -397) (undo-tree-id43278 . -397) (undo-tree-id43279 . -397) (undo-tree-id43280 . -397) (undo-tree-id43281 . -397) (undo-tree-id43282 . -397) (undo-tree-id43283 . -397) (undo-tree-id43284 . -397) (undo-tree-id43285 . -397) (undo-tree-id43286 . -397) (undo-tree-id43287 . -397) (undo-tree-id43288 . -397) (undo-tree-id43289 . -397) (undo-tree-id43290 . -397) (undo-tree-id43291 . -397) (undo-tree-id43292 . -397) (undo-tree-id43293 . -397) (undo-tree-id43294 . -397) (undo-tree-id43295 . -397) (undo-tree-id43296 . -397) (undo-tree-id43297 . -397) (undo-tree-id43298 . -397) (undo-tree-id43299 . -397) (undo-tree-id43300 . -400) (undo-tree-id43301 . -400) (undo-tree-id43302 . -400) (undo-tree-id43303 . -400) (undo-tree-id43304 . -400) (undo-tree-id43305 . -400) (undo-tree-id43306 . -400) (undo-tree-id43307 . -400) (undo-tree-id43308 . -400) (undo-tree-id43309 . -400) (undo-tree-id43310 . -400) (undo-tree-id43311 . -400) (undo-tree-id43312 . -400) (undo-tree-id43313 . -400) (undo-tree-id43314 . -400) (undo-tree-id43315 . -402) (undo-tree-id43316 . -402) (undo-tree-id43317 . -402) (undo-tree-id43318 . -402) (undo-tree-id43319 . -402) (undo-tree-id43320 . -402) (undo-tree-id43321 . -402) (undo-tree-id43322 . -402) (undo-tree-id43323 . -402) (undo-tree-id43324 . -402) (undo-tree-id43325 . -402) (undo-tree-id43326 . -402) (undo-tree-id43327 . -402) (undo-tree-id43328 . -402) (undo-tree-id43329 . -402) (undo-tree-id43330 . -402) (undo-tree-id43331 . -402) (undo-tree-id43332 . -402) (undo-tree-id43333 . -402) (undo-tree-id43334 . -402) (undo-tree-id43335 . -402) (undo-tree-id43336 . -402) (undo-tree-id43337 . -402) (undo-tree-id43338 . -402) (undo-tree-id43339 . -402) (undo-tree-id43340 . -402) (undo-tree-id43341 . -402) (undo-tree-id43342 . -402) (undo-tree-id43343 . -402) (undo-tree-id43344 . -402) (undo-tree-id43345 . -402) (undo-tree-id43346 . -402) (undo-tree-id43347 . -402) (undo-tree-id43348 . -402) (undo-tree-id43349 . -402) (undo-tree-id43350 . -402) (undo-tree-id43351 . -402) (undo-tree-id43352 . -402) (undo-tree-id43353 . -402) (undo-tree-id43354 . -402) (undo-tree-id43355 . -402) (undo-tree-id43356 . -402) (undo-tree-id43357 . -402) (undo-tree-id43358 . -402) (undo-tree-id43359 . -402) (undo-tree-id43360 . -402) (undo-tree-id43361 . -402) (undo-tree-id43362 . -402) (undo-tree-id43363 . -402) (undo-tree-id43364 . -402) (undo-tree-id43365 . -402) (undo-tree-id43366 . -402) (undo-tree-id43367 . -402) (undo-tree-id43368 . -402) (undo-tree-id43369 . -402) (undo-tree-id43370 . -402) (undo-tree-id43371 . -402) (undo-tree-id43372 . -402) (undo-tree-id43373 . -402) (undo-tree-id43374 . -402) (undo-tree-id43375 . -402) (undo-tree-id43376 . -402) (undo-tree-id43377 . -402) (undo-tree-id43378 . -402) (undo-tree-id43379 . -402) (undo-tree-id43380 . -402) (undo-tree-id43381 . -402) (undo-tree-id43382 . -402) (undo-tree-id43383 . -402) (undo-tree-id43384 . -402) (undo-tree-id43385 . -402) (undo-tree-id43386 . -402) (undo-tree-id43387 . -402) (undo-tree-id43388 . -402) (undo-tree-id43389 . -402) (undo-tree-id43390 . -402) (undo-tree-id43391 . -402) (undo-tree-id43392 . -402) (undo-tree-id43393 . -402) (undo-tree-id43394 . -402) (undo-tree-id43395 . -402) (undo-tree-id43396 . -402) (undo-tree-id43397 . -402) (undo-tree-id43398 . -402) (undo-tree-id43399 . -402) (undo-tree-id43400 . -402) (undo-tree-id43401 . -402) (undo-tree-id43402 . -402) (undo-tree-id43403 . -402) (undo-tree-id43404 . -402) (undo-tree-id43405 . -402) (undo-tree-id43406 . -402) (undo-tree-id43407 . -402) (undo-tree-id43408 . -402) (undo-tree-id43409 . -402) (undo-tree-id43410 . -402) (undo-tree-id43411 . -402) (undo-tree-id43412 . -402) (undo-tree-id43413 . -402) (undo-tree-id43414 . -402) (undo-tree-id43415 . -402) (undo-tree-id43416 . -402) (undo-tree-id43417 . -402) (undo-tree-id43418 . -402) (undo-tree-id43419 . -402) (undo-tree-id43420 . -402) (undo-tree-id43421 . -402) (undo-tree-id43422 . -402) (undo-tree-id43423 . -402) (undo-tree-id43424 . -402) (undo-tree-id43425 . -402) (undo-tree-id43426 . -402) (undo-tree-id43427 . -402) (undo-tree-id43428 . -402) (undo-tree-id43429 . -402) (undo-tree-id43430 . -402) (undo-tree-id43431 . -402) (undo-tree-id43432 . -402) (undo-tree-id43433 . -402) (undo-tree-id43434 . -402) (undo-tree-id43435 . -402) (undo-tree-id43436 . -402) (undo-tree-id43437 . -402) (undo-tree-id43438 . -402) (undo-tree-id43439 . -402) (undo-tree-id43440 . -402) (undo-tree-id43441 . -402) (undo-tree-id43442 . -402) (undo-tree-id43443 . -402) (undo-tree-id43444 . -402) (undo-tree-id43445 . -402) (undo-tree-id43446 . -402) (undo-tree-id43447 . -402) (undo-tree-id43448 . -402) (undo-tree-id43449 . -402) (undo-tree-id43450 . -402) (undo-tree-id43451 . -402) (undo-tree-id43452 . -402) (undo-tree-id43453 . -402) (undo-tree-id43454 . -402) (undo-tree-id43455 . -402) (undo-tree-id43456 . -402) (undo-tree-id43457 . -402) (undo-tree-id43458 . -402) (undo-tree-id43459 . -402) (undo-tree-id43460 . -402) (undo-tree-id43461 . -402) (undo-tree-id43462 . -402) (undo-tree-id43463 . -402) (undo-tree-id43464 . -402) (undo-tree-id43465 . -402) (undo-tree-id43466 . -402) (undo-tree-id43467 . -402) (undo-tree-id43468 . -402) (undo-tree-id43469 . -402) (undo-tree-id43470 . -402) (undo-tree-id43471 . -402) (undo-tree-id43472 . -402) (undo-tree-id43473 . -402) (undo-tree-id43474 . -402) (undo-tree-id43475 . -402) (undo-tree-id43476 . -402) (undo-tree-id43477 . -402) (undo-tree-id43478 . -402) (undo-tree-id43479 . -402) (undo-tree-id43480 . -402) (undo-tree-id43481 . -402) (undo-tree-id43482 . -402) (undo-tree-id43483 . -402) (undo-tree-id43484 . -402) (undo-tree-id43485 . -402) (undo-tree-id43486 . -402) (undo-tree-id43487 . -402) (undo-tree-id43488 . -402) (undo-tree-id43489 . -402) (undo-tree-id43490 . -402) (undo-tree-id43491 . -402) (undo-tree-id43492 . -402) (undo-tree-id43493 . -402) (undo-tree-id43494 . -402) (undo-tree-id43495 . -402) (undo-tree-id43496 . -402) (undo-tree-id43497 . -402) (undo-tree-id43498 . -402) (undo-tree-id43499 . -402) (undo-tree-id43500 . -402) (undo-tree-id43501 . -402) (undo-tree-id43502 . -402) (undo-tree-id43503 . -402) (undo-tree-id43504 . -402) (undo-tree-id43505 . -402) (undo-tree-id43506 . -402) (undo-tree-id43507 . -402) (undo-tree-id43508 . -402) (undo-tree-id43509 . -402) (undo-tree-id43510 . -402) (undo-tree-id43511 . -402) (undo-tree-id43512 . -402) (undo-tree-id43513 . -402) (undo-tree-id43514 . -402) (undo-tree-id43515 . -402) (undo-tree-id43516 . -402) (undo-tree-id43517 . -402) (undo-tree-id43518 . -402) (undo-tree-id43519 . -402) (undo-tree-id43520 . -402) (undo-tree-id43521 . -402) (undo-tree-id43522 . -402) (undo-tree-id43523 . -402) (undo-tree-id43524 . -402) (undo-tree-id43525 . -402) (undo-tree-id43526 . -402) (undo-tree-id43527 . -402) (undo-tree-id43528 . -402) (undo-tree-id43529 . -402) (undo-tree-id43530 . -402) (undo-tree-id43531 . -402) (undo-tree-id43532 . -402) (undo-tree-id43533 . -402) (undo-tree-id43534 . -402) (undo-tree-id43535 . -402) (undo-tree-id43536 . -402) (undo-tree-id43537 . -402) (undo-tree-id43538 . -402) (undo-tree-id43539 . -402) (undo-tree-id43540 . -402) (undo-tree-id43541 . -402) (undo-tree-id43542 . -402) (undo-tree-id43543 . -402) (undo-tree-id43544 . -402) (undo-tree-id43545 . -402) (undo-tree-id43546 . -402) (undo-tree-id43547 . -402) (undo-tree-id43548 . -402) (undo-tree-id43549 . -402) (undo-tree-id43550 . -402) (undo-tree-id43551 . -402) (undo-tree-id43552 . -402) (undo-tree-id43553 . -402) (undo-tree-id43554 . -402) (undo-tree-id43555 . -402) (undo-tree-id43556 . -402) (undo-tree-id43557 . -402) (undo-tree-id43558 . -402) (undo-tree-id43559 . -402) (undo-tree-id43560 . -402) (undo-tree-id43561 . -402) (undo-tree-id43562 . -402) (undo-tree-id43563 . -402) (undo-tree-id43564 . -402) (undo-tree-id43565 . -402) (undo-tree-id43566 . -402) (undo-tree-id43567 . -402) (undo-tree-id43568 . -402) (undo-tree-id43569 . -402) (undo-tree-id43570 . -402) (undo-tree-id43571 . -402) (undo-tree-id43572 . -402) (undo-tree-id43573 . -402) (undo-tree-id43574 . -402) (undo-tree-id43575 . -402) (undo-tree-id43576 . -402) (undo-tree-id43577 . -402) (undo-tree-id43578 . -402) (undo-tree-id43579 . -402) (undo-tree-id43580 . -402) (undo-tree-id43581 . -402) (undo-tree-id43582 . -402) (undo-tree-id43583 . -402) (undo-tree-id43584 . -402) (undo-tree-id43585 . -402) (undo-tree-id43586 . -402) (undo-tree-id43587 . -402) (undo-tree-id43588 . -402) (undo-tree-id43589 . -402) (undo-tree-id43590 . -402) (undo-tree-id43591 . -402) (undo-tree-id43592 . -402) (undo-tree-id43593 . -402) (undo-tree-id43594 . -402) (undo-tree-id43595 . -402) (undo-tree-id43596 . -402) (undo-tree-id43597 . -402) (undo-tree-id43598 . -402) (undo-tree-id43599 . -402) (undo-tree-id43600 . -402) (undo-tree-id43601 . -402) (undo-tree-id43602 . -402) (undo-tree-id43603 . -402) (undo-tree-id43604 . -402) (undo-tree-id43605 . -402) (undo-tree-id43606 . -402) (undo-tree-id43607 . -402) (undo-tree-id43608 . -402) (undo-tree-id43609 . -402) (undo-tree-id43610 . -402) (undo-tree-id43611 . -402) (undo-tree-id43612 . -402) (undo-tree-id43613 . -402) (undo-tree-id43614 . -402) (undo-tree-id43615 . -402) (undo-tree-id43616 . -402) (undo-tree-id43617 . -402) (undo-tree-id43618 . -402) (undo-tree-id43619 . -402) (undo-tree-id43620 . -402) (undo-tree-id43621 . -402) (undo-tree-id43622 . -402) (undo-tree-id43623 . -402) (undo-tree-id43624 . -402) (undo-tree-id43625 . -402) (undo-tree-id43626 . -402) (undo-tree-id43627 . -402) (undo-tree-id43628 . -402) (undo-tree-id43629 . -402) (undo-tree-id43630 . -402) (undo-tree-id43631 . -402) (undo-tree-id43632 . -402) (undo-tree-id43633 . -402) (undo-tree-id43634 . -402) (undo-tree-id43635 . -402) (undo-tree-id43636 . -402) (undo-tree-id43637 . -402) (undo-tree-id43638 . -402) (undo-tree-id43639 . -402) (undo-tree-id43640 . -402) (undo-tree-id43641 . -402) (undo-tree-id43642 . -402) (undo-tree-id43643 . -402) (undo-tree-id43644 . -402) (undo-tree-id43645 . -402) (undo-tree-id43646 . -402) (undo-tree-id43647 . -402) (undo-tree-id43648 . -402) (undo-tree-id43649 . -402) (undo-tree-id43650 . -402) (undo-tree-id43651 . -402) (undo-tree-id43652 . -402) (undo-tree-id43653 . -402) (undo-tree-id43654 . -402) (undo-tree-id43655 . -402) (undo-tree-id43656 . -402) (undo-tree-id43657 . -402) (undo-tree-id43658 . -402) (undo-tree-id43659 . -402) (undo-tree-id43660 . -402) (undo-tree-id43661 . -402) (undo-tree-id43662 . -402) (undo-tree-id43663 . -402) (undo-tree-id43664 . -402) (undo-tree-id43665 . -402) (undo-tree-id43666 . -402) (undo-tree-id43667 . -402) (undo-tree-id43668 . -402) (undo-tree-id43669 . -402) (undo-tree-id43670 . -402) (undo-tree-id43671 . -402) (undo-tree-id43672 . -402) (undo-tree-id43673 . -402) (undo-tree-id43674 . -402) (undo-tree-id43675 . -402) (undo-tree-id43676 . -402) (undo-tree-id43677 . -402) (undo-tree-id43678 . -402) (undo-tree-id43679 . -402) (undo-tree-id43680 . -402) (undo-tree-id43681 . -402) (undo-tree-id43682 . -402) (undo-tree-id43683 . -402) (undo-tree-id43684 . -402) (undo-tree-id43685 . -402) (undo-tree-id43686 . -402) (undo-tree-id43687 . -403) (undo-tree-id43688 . -403) (undo-tree-id43689 . -403) (undo-tree-id43690 . -403) (undo-tree-id43691 . -403) (undo-tree-id43692 . -403) (undo-tree-id43693 . -403) (undo-tree-id43694 . -403) (undo-tree-id43695 . -403) (undo-tree-id43696 . -403) (undo-tree-id43697 . -403) (undo-tree-id43698 . -403) (undo-tree-id43699 . -403) (undo-tree-id43700 . -403) (undo-tree-id43701 . -403) (undo-tree-id43702 . -403) (undo-tree-id43703 . -403) (undo-tree-id43704 . -403) (undo-tree-id43705 . -403) (undo-tree-id43706 . -403) (undo-tree-id43707 . -403) (undo-tree-id43708 . -403) (undo-tree-id43709 . -403) (undo-tree-id43710 . -403) (undo-tree-id43711 . -403) (undo-tree-id43712 . -403) (undo-tree-id43713 . -403) (undo-tree-id43714 . -403) (undo-tree-id43715 . -403) (undo-tree-id43716 . -403) (undo-tree-id43717 . -403) (undo-tree-id43718 . -403) (undo-tree-id43719 . -403) (undo-tree-id43720 . -403) (undo-tree-id43721 . -403) (undo-tree-id43722 . -403) (undo-tree-id43723 . -403) (undo-tree-id43724 . -403) (undo-tree-id43725 . -403) (undo-tree-id43726 . -403) (undo-tree-id43727 . -403) (undo-tree-id43728 . -403) (undo-tree-id43729 . -403) (undo-tree-id43730 . -403) (undo-tree-id43731 . -403) (undo-tree-id43732 . -403) (undo-tree-id43733 . -403) (undo-tree-id43734 . -403) (undo-tree-id43735 . -403) (undo-tree-id43736 . -403) (undo-tree-id43737 . -404) (undo-tree-id43738 . -404) (undo-tree-id43739 . -404) (undo-tree-id43740 . -404) (undo-tree-id43741 . -404) (undo-tree-id43742 . -404) (undo-tree-id43743 . -404) (undo-tree-id43744 . -404) (undo-tree-id43745 . -404) (undo-tree-id43746 . -404) (undo-tree-id43747 . -404) (undo-tree-id43748 . -404) (undo-tree-id43749 . -404) (undo-tree-id43750 . -404) (undo-tree-id43751 . -404) (undo-tree-id43752 . -404) (undo-tree-id43753 . -404) (undo-tree-id43754 . -404) (undo-tree-id43755 . -404) (undo-tree-id43756 . -404) (undo-tree-id43757 . -404) (undo-tree-id43758 . -404) (undo-tree-id43759 . -404) (undo-tree-id43760 . -404) (undo-tree-id43761 . -404) (undo-tree-id43762 . -404) (undo-tree-id43763 . -404) (undo-tree-id43764 . -404) (undo-tree-id43765 . -404) (undo-tree-id43766 . -404) (undo-tree-id43767 . -404) (undo-tree-id43768 . -405) (undo-tree-id43769 . -405) (undo-tree-id43770 . -405) (undo-tree-id43771 . -405) (undo-tree-id43772 . -405) (undo-tree-id43773 . -405) (undo-tree-id43774 . -405) (undo-tree-id43775 . -405) (undo-tree-id43776 . -405) (undo-tree-id43777 . -405) (undo-tree-id43778 . -405) (undo-tree-id43779 . -405) (undo-tree-id43780 . -405) (undo-tree-id43781 . -405) (undo-tree-id43782 . -405) (undo-tree-id43783 . -405) (undo-tree-id43784 . -405) (undo-tree-id43785 . -405) (undo-tree-id43786 . -405) (undo-tree-id43787 . -405) (undo-tree-id43788 . -405) (undo-tree-id43789 . -405) (undo-tree-id43790 . -405) (undo-tree-id43791 . -405) (undo-tree-id43792 . -405) (undo-tree-id43793 . -405) (undo-tree-id43794 . -405) (undo-tree-id43795 . -405) (undo-tree-id43796 . -405) (undo-tree-id43797 . -405) (undo-tree-id43798 . -405) (undo-tree-id43799 . -405) (undo-tree-id43800 . -405) (undo-tree-id43801 . -405) (undo-tree-id43802 . -405) (undo-tree-id43803 . -405) (undo-tree-id43804 . -405) (undo-tree-id43805 . -405) (undo-tree-id43806 . -405) (undo-tree-id43807 . -405) (undo-tree-id43808 . -405) (undo-tree-id43809 . -405) (undo-tree-id43810 . -405) (undo-tree-id43811 . -405) (undo-tree-id43812 . -405) (undo-tree-id43813 . -405) (undo-tree-id43814 . -405) (undo-tree-id43815 . -405) (undo-tree-id43816 . -405) (undo-tree-id43817 . -405) (undo-tree-id43818 . -405) (undo-tree-id43819 . -405) (undo-tree-id43820 . -405) (undo-tree-id43821 . -405) (undo-tree-id43822 . -405) (undo-tree-id43823 . -405) (undo-tree-id43824 . -405) (undo-tree-id43825 . -405) (undo-tree-id43826 . -405) (undo-tree-id43827 . -405) (undo-tree-id43828 . -405) (undo-tree-id43829 . -405) (undo-tree-id43830 . -405) (undo-tree-id43831 . -405) (undo-tree-id43832 . -405) (undo-tree-id43833 . -405) (undo-tree-id43834 . -405) (undo-tree-id43835 . -405) (undo-tree-id43836 . -405) (undo-tree-id43837 . -405) (undo-tree-id43838 . -405) (undo-tree-id43839 . -405) (undo-tree-id43840 . -405) (undo-tree-id43841 . -405) (undo-tree-id43842 . -405) (undo-tree-id43843 . -405) (undo-tree-id43844 . -405) (undo-tree-id43845 . -405) (undo-tree-id43846 . -405) (undo-tree-id43847 . -405) (undo-tree-id43848 . -405) (undo-tree-id43849 . -405) (undo-tree-id43850 . -405) (undo-tree-id43851 . -405) (undo-tree-id43852 . -405) (undo-tree-id43853 . -406) (undo-tree-id43854 . -406) (undo-tree-id43855 . -406) (undo-tree-id43856 . -406) (undo-tree-id43857 . -406) (undo-tree-id43858 . -406) (undo-tree-id43859 . -406) (undo-tree-id43860 . -406) (undo-tree-id43861 . -406) (undo-tree-id43862 . -406) (undo-tree-id43863 . -406) (undo-tree-id43864 . -406) (undo-tree-id43865 . -406) (undo-tree-id43866 . -406) (undo-tree-id43867 . -406) (undo-tree-id43868 . -407) (undo-tree-id43869 . -407) (undo-tree-id43870 . -407) (undo-tree-id43871 . -407) (undo-tree-id43872 . -407) (undo-tree-id43873 . -407) (undo-tree-id43874 . -407) (undo-tree-id43875 . -407) (undo-tree-id43876 . -407) (undo-tree-id43877 . -407) (undo-tree-id43878 . -407) (undo-tree-id43879 . -407) (undo-tree-id43880 . -407) (undo-tree-id43881 . -407) (undo-tree-id43882 . -407) (undo-tree-id43883 . -407) (undo-tree-id43884 . -407) (undo-tree-id43885 . -407) (undo-tree-id43886 . -407) (undo-tree-id43887 . -407) (undo-tree-id43888 . -407) (undo-tree-id43889 . -407) (undo-tree-id43890 . -407) (undo-tree-id43891 . -407) (undo-tree-id43892 . -407) (undo-tree-id43893 . -407) (undo-tree-id43894 . -407) (undo-tree-id43895 . -407) (undo-tree-id43896 . -407) (undo-tree-id43897 . -407) (undo-tree-id43898 . -408) (undo-tree-id43899 . -408) (undo-tree-id43900 . -408) (undo-tree-id43901 . -408) (undo-tree-id43902 . -408) (undo-tree-id43903 . -408) (undo-tree-id43904 . -408) (undo-tree-id43905 . -408) (undo-tree-id43906 . -408) (undo-tree-id43907 . -408) (undo-tree-id43908 . -408) (undo-tree-id43909 . -408) (undo-tree-id43910 . -408) (undo-tree-id43911 . -408) (undo-tree-id43912 . -408) (undo-tree-id43913 . -408) (undo-tree-id43914 . -408) (undo-tree-id43915 . -408) (undo-tree-id43916 . -408) (undo-tree-id43917 . -408) (undo-tree-id43918 . -408) (undo-tree-id43919 . -408) (undo-tree-id43920 . -408) (undo-tree-id43921 . -408) (undo-tree-id43922 . -408) (undo-tree-id43923 . -408) (undo-tree-id43924 . -408) (undo-tree-id43925 . -408) (undo-tree-id43926 . -408) (undo-tree-id43927 . -408) (undo-tree-id43928 . -408) (undo-tree-id43929 . -408) (undo-tree-id43930 . -408) (undo-tree-id43931 . -408) (undo-tree-id43932 . -408) (undo-tree-id43933 . -408) (undo-tree-id43934 . -408) (undo-tree-id43935 . -408) (undo-tree-id43936 . -408) (undo-tree-id43937 . -408) (undo-tree-id43938 . -408) (undo-tree-id43939 . -408) (undo-tree-id43940 . -408) (undo-tree-id43941 . -408) (undo-tree-id43942 . -408) (undo-tree-id43943 . -409) (undo-tree-id43944 . -409) (undo-tree-id43945 . -409) (undo-tree-id43946 . -409) (undo-tree-id43947 . -409) (undo-tree-id43948 . -409) (undo-tree-id43949 . -409) (undo-tree-id43950 . -409) (undo-tree-id43951 . -409) (undo-tree-id43952 . -409) (undo-tree-id43953 . -409) (undo-tree-id43954 . -409) (undo-tree-id43955 . -409) (undo-tree-id43956 . -409) (undo-tree-id43957 . -409) (undo-tree-id43958 . -409) (undo-tree-id43959 . -409) (undo-tree-id43960 . -409) (undo-tree-id43961 . -409) (undo-tree-id43962 . -409) (undo-tree-id43963 . -409) (undo-tree-id43964 . -409) (undo-tree-id43965 . -409) (undo-tree-id43966 . -409) (undo-tree-id43967 . -408) (undo-tree-id43968 . -408) (undo-tree-id43969 . -408) (undo-tree-id43970 . -408) (undo-tree-id43971 . -408) (undo-tree-id43972 . -408) (undo-tree-id43973 . -408) (undo-tree-id43974 . -408) (undo-tree-id43975 . -408) (undo-tree-id43976 . -408) (undo-tree-id43977 . -408) (undo-tree-id43978 . -408) (undo-tree-id43979 . -408) (undo-tree-id43980 . -408) (undo-tree-id43981 . -408) (undo-tree-id43982 . -408) (undo-tree-id43983 . -408) (undo-tree-id43984 . -408) (undo-tree-id43985 . -408) (undo-tree-id43986 . -408) (undo-tree-id43987 . -408) (undo-tree-id43988 . -408) (undo-tree-id43989 . -408) (undo-tree-id43990 . -408) (undo-tree-id43991 . -408) (undo-tree-id43992 . -408) (undo-tree-id43993 . -408) (undo-tree-id43994 . -408) (undo-tree-id43995 . -408) (undo-tree-id43996 . -408) (undo-tree-id43997 . -408) (undo-tree-id43998 . -408) (undo-tree-id43999 . -408) (undo-tree-id44000 . -410) (undo-tree-id44001 . -410) (undo-tree-id44002 . -410) (undo-tree-id44003 . -410) (undo-tree-id44004 . -410) (undo-tree-id44005 . -410) (undo-tree-id44006 . -410) (undo-tree-id44007 . -410) (undo-tree-id44008 . -410) (undo-tree-id44009 . -410) (undo-tree-id44010 . -410) (undo-tree-id44011 . -410) (undo-tree-id44012 . -410) (undo-tree-id44013 . -410) (undo-tree-id44014 . -410) (undo-tree-id44015 . -421) (undo-tree-id44016 . -421) (undo-tree-id44017 . -421) (undo-tree-id44018 . -421) (undo-tree-id44019 . -421) (undo-tree-id44020 . -421) (undo-tree-id44021 . -421) (undo-tree-id44022 . -421) (undo-tree-id44023 . -421) (undo-tree-id44024 . -421) (undo-tree-id44025 . -421) (undo-tree-id44026 . -421) (undo-tree-id44027 . -421) (undo-tree-id44028 . -421) (undo-tree-id44029 . -421) (undo-tree-id44030 . -418) (undo-tree-id44031 . -418) (undo-tree-id44032 . -418) (undo-tree-id44033 . -418) (undo-tree-id44034 . -418) (undo-tree-id44035 . -418) (undo-tree-id44036 . -418) (undo-tree-id44037 . -418) (undo-tree-id44038 . -418) (undo-tree-id44039 . -418) (undo-tree-id44040 . -418) (undo-tree-id44041 . -418) (undo-tree-id44042 . -418) (undo-tree-id44043 . -418) (undo-tree-id44044 . -418) (undo-tree-id44045 . -418) (undo-tree-id44046 . -418) (undo-tree-id44047 . -418) (undo-tree-id44048 . -418) (undo-tree-id44049 . -418) (undo-tree-id44050 . -418) (undo-tree-id44051 . -418) (undo-tree-id44052 . -418) (undo-tree-id44053 . -418) (undo-tree-id44054 . -418) (undo-tree-id44055 . -418) (undo-tree-id44056 . -418) (undo-tree-id44057 . -418) (undo-tree-id44058 . -418) (undo-tree-id44059 . -418) (undo-tree-id44060 . -418) (undo-tree-id44061 . -418) (undo-tree-id44062 . -418) (undo-tree-id44063 . -418) (undo-tree-id44064 . -418) (undo-tree-id44065 . -418) (undo-tree-id44066 . -418) (undo-tree-id44067 . -418) (undo-tree-id44068 . -418) (undo-tree-id44069 . -418) (undo-tree-id44070 . -418) (undo-tree-id44071 . -418) (undo-tree-id44072 . -418) (undo-tree-id44073 . -418) (undo-tree-id44074 . -418) (undo-tree-id44075 . -418) (undo-tree-id44076 . -418) (undo-tree-id44077 . -419) (undo-tree-id44078 . -419) (undo-tree-id44079 . -419) (undo-tree-id44080 . -419) (undo-tree-id44081 . -419) (undo-tree-id44082 . -419) (undo-tree-id44083 . -419) (undo-tree-id44084 . -419) (undo-tree-id44085 . -419) (undo-tree-id44086 . -419) (undo-tree-id44087 . -419) (undo-tree-id44088 . -419) (undo-tree-id44089 . -419) (undo-tree-id44090 . -419) (undo-tree-id44091 . -419) (undo-tree-id44092 . -420) (undo-tree-id44093 . -420) (undo-tree-id44094 . -420) (undo-tree-id44095 . -420) (undo-tree-id44096 . -420) (undo-tree-id44097 . -420) (undo-tree-id44098 . -420) (undo-tree-id44099 . -420) (undo-tree-id44100 . -420) (undo-tree-id44101 . -420) (undo-tree-id44102 . -420) (undo-tree-id44103 . -420) (undo-tree-id44104 . -420) (undo-tree-id44105 . -420) (undo-tree-id44106 . -420) (undo-tree-id44107 . -420) (undo-tree-id44108 . -420) (undo-tree-id44109 . -420) (undo-tree-id44110 . -420) (undo-tree-id44111 . -420) (undo-tree-id44112 . -420) (undo-tree-id44113 . -420) (undo-tree-id44114 . -420) (undo-tree-id44115 . -421) (undo-tree-id44116 . -421) (undo-tree-id44117 . -421) (undo-tree-id44118 . -421) (undo-tree-id44119 . -421) (undo-tree-id44120 . -421) (undo-tree-id44121 . -421) (undo-tree-id44122 . -421) (undo-tree-id44123 . -421) (undo-tree-id44124 . -421) (undo-tree-id44125 . -421) (undo-tree-id44126 . -421) (undo-tree-id44127 . -421) (undo-tree-id44128 . -421) (undo-tree-id44129 . -421) (undo-tree-id44130 . -420) (undo-tree-id44131 . -420) (undo-tree-id44132 . -420) (undo-tree-id44133 . -420) (undo-tree-id44134 . -420) (undo-tree-id44135 . -420) (undo-tree-id44136 . -420) (undo-tree-id44137 . -420) (undo-tree-id44138 . -420) (undo-tree-id44139 . -420) (undo-tree-id44140 . -420) (undo-tree-id44141 . -420) (undo-tree-id44142 . -420) (undo-tree-id44143 . -420) (undo-tree-id44144 . -420) (undo-tree-id44145 . -420) (undo-tree-id44146 . -420) (undo-tree-id44147 . -420) (undo-tree-id44148 . -420) (undo-tree-id44149 . -420) (undo-tree-id44150 . -420) (undo-tree-id44151 . -420) (undo-tree-id44152 . -420) (undo-tree-id44153 . -420) (undo-tree-id44154 . -420) (undo-tree-id44155 . -420) (undo-tree-id44156 . -419) (undo-tree-id44157 . -419) (undo-tree-id44158 . -419) (undo-tree-id44159 . -419) (undo-tree-id44160 . -419) (undo-tree-id44161 . -419) (undo-tree-id44162 . -419) (undo-tree-id44163 . -419) (undo-tree-id44164 . -419) (undo-tree-id44165 . -419) (undo-tree-id44166 . -419) (undo-tree-id44167 . -419) (undo-tree-id44168 . -419) (undo-tree-id44169 . -419) (undo-tree-id44170 . -419) (undo-tree-id44171 . -418) (undo-tree-id44172 . -418) (undo-tree-id44173 . -418) (undo-tree-id44174 . -418) (undo-tree-id44175 . -418) (undo-tree-id44176 . -418) (undo-tree-id44177 . -418) (undo-tree-id44178 . -418) (undo-tree-id44179 . -418) (undo-tree-id44180 . -418) (undo-tree-id44181 . -418) (undo-tree-id44182 . -418) (undo-tree-id44183 . -418) (undo-tree-id44184 . -418) (undo-tree-id44185 . -418) (undo-tree-id44186 . -416) (undo-tree-id44187 . -416) (undo-tree-id44188 . -416) (undo-tree-id44189 . -416) (undo-tree-id44190 . -416) (undo-tree-id44191 . -416) (undo-tree-id44192 . -416) (undo-tree-id44193 . -416) (undo-tree-id44194 . -416) (undo-tree-id44195 . -416) (undo-tree-id44196 . -416) (undo-tree-id44197 . -416) (undo-tree-id44198 . -416) (undo-tree-id44199 . -416) (undo-tree-id44200 . -416) (undo-tree-id44201 . -416) (undo-tree-id44202 . -416) (undo-tree-id44203 . -416) (undo-tree-id44204 . -416) (undo-tree-id44205 . -416) (undo-tree-id44206 . -416) (undo-tree-id44207 . -416) (undo-tree-id44208 . -416) (undo-tree-id44209 . -416) (undo-tree-id44210 . -416) (undo-tree-id44211 . -416) (undo-tree-id44212 . -416) (undo-tree-id44213 . -416) (undo-tree-id44214 . -416) (undo-tree-id44215 . -416) (undo-tree-id44216 . -416) (undo-tree-id44217 . -416) (undo-tree-id44218 . -417) (undo-tree-id44219 . -417) (undo-tree-id44220 . -417) (undo-tree-id44221 . -417) (undo-tree-id44222 . -417) (undo-tree-id44223 . -417) (undo-tree-id44224 . -417) (undo-tree-id44225 . -417) (undo-tree-id44226 . -417) (undo-tree-id44227 . -417) (undo-tree-id44228 . -417) (undo-tree-id44229 . -417) (undo-tree-id44230 . -417) (undo-tree-id44231 . -417) (undo-tree-id44232 . -417) (undo-tree-id44233 . -416) (undo-tree-id44234 . -416) (undo-tree-id44235 . -416) (undo-tree-id44236 . -416) (undo-tree-id44237 . -416) (undo-tree-id44238 . -416) (undo-tree-id44239 . -416) (undo-tree-id44240 . -416) (undo-tree-id44241 . -416) (undo-tree-id44242 . -416) (undo-tree-id44243 . -416) (undo-tree-id44244 . -416) (undo-tree-id44245 . -416) (undo-tree-id44246 . -416) (undo-tree-id44247 . -416) (undo-tree-id44248 . -416) (undo-tree-id44249 . -416) (undo-tree-id44250 . -416) (undo-tree-id44251 . -416) (undo-tree-id44252 . -416) (undo-tree-id44253 . -416) (undo-tree-id44254 . -416) (undo-tree-id44255 . -416) (undo-tree-id44256 . -416) (undo-tree-id44257 . -416) (undo-tree-id44258 . -416) (undo-tree-id44259 . -421) (undo-tree-id44260 . -421) (undo-tree-id44261 . -421) (undo-tree-id44262 . -421) (undo-tree-id44263 . -421) (undo-tree-id44264 . -421) (undo-tree-id44265 . -421) (undo-tree-id44266 . -421) (undo-tree-id44267 . -421) (undo-tree-id44268 . -421) (undo-tree-id44269 . -421) (undo-tree-id44270 . -421) (undo-tree-id44271 . -421) (undo-tree-id44272 . -421) (undo-tree-id44273 . -421) (undo-tree-id44274 . -421) (undo-tree-id44275 . -421) (undo-tree-id44276 . -421) (undo-tree-id44277 . -421) (undo-tree-id44278 . -421) (undo-tree-id44279 . -421) (undo-tree-id44280 . -421) (undo-tree-id44281 . -421) (undo-tree-id44282 . -420) (undo-tree-id44283 . -420) (undo-tree-id44284 . -420) (undo-tree-id44285 . -420) (undo-tree-id44286 . -420) (undo-tree-id44287 . -420) (undo-tree-id44288 . -420) (undo-tree-id44289 . -420) (undo-tree-id44290 . -420) (undo-tree-id44291 . -420) (undo-tree-id44292 . -420) (undo-tree-id44293 . -420) (undo-tree-id44294 . -420) (undo-tree-id44295 . -420) (undo-tree-id44296 . -420) (undo-tree-id44297 . -421) (undo-tree-id44298 . -421) (undo-tree-id44299 . -421) (undo-tree-id44300 . -421) (undo-tree-id44301 . -421) (undo-tree-id44302 . -421) (undo-tree-id44303 . -421) (undo-tree-id44304 . -421) (undo-tree-id44305 . -421) (undo-tree-id44306 . -421) (undo-tree-id44307 . -421) (undo-tree-id44308 . -421) (undo-tree-id44309 . -421) (undo-tree-id44310 . -421) (undo-tree-id44311 . -421) (undo-tree-id44312 . -421) (undo-tree-id44313 . -421) (undo-tree-id44314 . -421) (undo-tree-id44315 . -421) (undo-tree-id44316 . -421) (undo-tree-id44317 . -421) (undo-tree-id44318 . -421) (undo-tree-id44319 . 12) (undo-tree-id44320 . -421) (undo-tree-id44321 . -421) (undo-tree-id44322 . -421) (undo-tree-id44323 . -421) (undo-tree-id44324 . -421) (undo-tree-id44325 . -421) (undo-tree-id44326 . -421) (undo-tree-id44327 . -421) (undo-tree-id44328 . -421) (undo-tree-id44329 . -421) (undo-tree-id44330 . -421) (undo-tree-id44331 . -421) (undo-tree-id44332 . -421) (undo-tree-id44333 . -421) (undo-tree-id44334 . -421) (undo-tree-id44335 . -421) (undo-tree-id44336 . -420) (undo-tree-id44337 . -420) (undo-tree-id44338 . -420) (undo-tree-id44339 . -420) (undo-tree-id44340 . -420) (undo-tree-id44341 . -420) (undo-tree-id44342 . -420) (undo-tree-id44343 . -420) (undo-tree-id44344 . -420) (undo-tree-id44345 . -420) (undo-tree-id44346 . -420) (undo-tree-id44347 . -420) (undo-tree-id44348 . -420) (undo-tree-id44349 . -420) (undo-tree-id44350 . -420) (undo-tree-id44351 . -419) (undo-tree-id44352 . -419) (undo-tree-id44353 . -419) (undo-tree-id44354 . -419) (undo-tree-id44355 . -419) (undo-tree-id44356 . -419) (undo-tree-id44357 . -419) (undo-tree-id44358 . -419) (undo-tree-id44359 . -419) (undo-tree-id44360 . -419) (undo-tree-id44361 . -419) (undo-tree-id44362 . -419) (undo-tree-id44363 . -419) (undo-tree-id44364 . -419) (undo-tree-id44365 . -419) (undo-tree-id44366 . -418) (undo-tree-id44367 . -418) (undo-tree-id44368 . -418) (undo-tree-id44369 . -418) (undo-tree-id44370 . -418) (undo-tree-id44371 . -418) (undo-tree-id44372 . -418) (undo-tree-id44373 . -418) (undo-tree-id44374 . -418) (undo-tree-id44375 . -418) (undo-tree-id44376 . -418) (undo-tree-id44377 . -418) (undo-tree-id44378 . -418) (undo-tree-id44379 . -418) (undo-tree-id44380 . -418) (undo-tree-id44381 . -417) (undo-tree-id44382 . -417) (undo-tree-id44383 . -417) (undo-tree-id44384 . -417) (undo-tree-id44385 . -417) (undo-tree-id44386 . -417) (undo-tree-id44387 . -417) (undo-tree-id44388 . -417) (undo-tree-id44389 . -417) (undo-tree-id44390 . -417) (undo-tree-id44391 . -417) (undo-tree-id44392 . -417) (undo-tree-id44393 . -417) (undo-tree-id44394 . -417) (undo-tree-id44395 . -417) (undo-tree-id44396 . -416) (undo-tree-id44397 . -416) (undo-tree-id44398 . -416) (undo-tree-id44399 . -416) (undo-tree-id44400 . -416) (undo-tree-id44401 . -416) (undo-tree-id44402 . -416) (undo-tree-id44403 . -416) (undo-tree-id44404 . -416) (undo-tree-id44405 . -416) (undo-tree-id44406 . -416) (undo-tree-id44407 . -416) (undo-tree-id44408 . -416) (undo-tree-id44409 . -416) (undo-tree-id44410 . -416) (undo-tree-id44411 . -416) (undo-tree-id44412 . -416) (undo-tree-id44413 . -416) (undo-tree-id44414 . -416) (undo-tree-id44415 . -416) (undo-tree-id44416 . -416) (undo-tree-id44417 . -416) (undo-tree-id44418 . -417) (undo-tree-id44419 . -417) (undo-tree-id44420 . -417) (undo-tree-id44421 . -417) (undo-tree-id44422 . -417) (undo-tree-id44423 . -417) (undo-tree-id44424 . -417) (undo-tree-id44425 . -417) (undo-tree-id44426 . -417) (undo-tree-id44427 . -417) (undo-tree-id44428 . -417) (undo-tree-id44429 . -417) (undo-tree-id44430 . -417) (undo-tree-id44431 . -417) (undo-tree-id44432 . -417) (undo-tree-id44433 . -418) (undo-tree-id44434 . -418) (undo-tree-id44435 . -418) (undo-tree-id44436 . -418) (undo-tree-id44437 . -418) (undo-tree-id44438 . -418) (undo-tree-id44439 . -418) (undo-tree-id44440 . -418) (undo-tree-id44441 . -418) (undo-tree-id44442 . -418) (undo-tree-id44443 . -418) (undo-tree-id44444 . -418) (undo-tree-id44445 . -418) (undo-tree-id44446 . -418) (undo-tree-id44447 . -418) (undo-tree-id44448 . -419) (undo-tree-id44449 . -419) (undo-tree-id44450 . -419) (undo-tree-id44451 . -419) (undo-tree-id44452 . -419) (undo-tree-id44453 . -419) (undo-tree-id44454 . -419) (undo-tree-id44455 . -419) (undo-tree-id44456 . -419) (undo-tree-id44457 . -419) (undo-tree-id44458 . -419) (undo-tree-id44459 . -419) (undo-tree-id44460 . -419) (undo-tree-id44461 . -419) (undo-tree-id44462 . -419) (undo-tree-id44463 . -420) (undo-tree-id44464 . -420) (undo-tree-id44465 . -420) (undo-tree-id44466 . -420) (undo-tree-id44467 . -420) (undo-tree-id44468 . -420) (undo-tree-id44469 . -420) (undo-tree-id44470 . -420) (undo-tree-id44471 . -420) (undo-tree-id44472 . -420) (undo-tree-id44473 . -420) (undo-tree-id44474 . -420) (undo-tree-id44475 . -420) (undo-tree-id44476 . -420) (undo-tree-id44477 . -420) (undo-tree-id44478 . -421) (undo-tree-id44479 . -421) (undo-tree-id44480 . -421) (undo-tree-id44481 . -421) (undo-tree-id44482 . -421) (undo-tree-id44483 . -421) (undo-tree-id44484 . -421) (undo-tree-id44485 . -421) (undo-tree-id44486 . -421) (undo-tree-id44487 . -421) (undo-tree-id44488 . -421) (undo-tree-id44489 . -421) (undo-tree-id44490 . -421) (undo-tree-id44491 . -421) (undo-tree-id44492 . -421) (undo-tree-id44493 . -421) (undo-tree-id44494 . -421) (undo-tree-id44495 . -421) (undo-tree-id44496 . -421) (undo-tree-id44497 . -421) (undo-tree-id44498 . -421) (undo-tree-id44499 . -421) (undo-tree-id44500 . -421) (undo-tree-id44501 . -421) (undo-tree-id44502 . -421) (undo-tree-id44503 . -421) (undo-tree-id44504 . -421) (undo-tree-id44505 . -421) (undo-tree-id44506 . -421) (undo-tree-id44507 . -421) (undo-tree-id44508 . -421) (undo-tree-id44509 . -421) (undo-tree-id44510 . -421) (undo-tree-id44511 . -421) (undo-tree-id44512 . -421) (undo-tree-id44513 . -421) (undo-tree-id44514 . -421) (undo-tree-id44515 . -421) (undo-tree-id44516 . -421) (undo-tree-id44517 . -421) (undo-tree-id44518 . -421) (undo-tree-id44519 . -421) (undo-tree-id44520 . -421) (undo-tree-id44521 . -421) (undo-tree-id44522 . -421) (undo-tree-id44523 . -421) (undo-tree-id44524 . -421) (undo-tree-id44525 . -421) (undo-tree-id44526 . -421) (undo-tree-id44527 . -421) (undo-tree-id44528 . -421) (undo-tree-id44529 . -421) (undo-tree-id44530 . -421) (undo-tree-id44531 . -421) (undo-tree-id44532 . -421) (undo-tree-id44533 . -421) (undo-tree-id44534 . -421) (undo-tree-id44535 . -421) (undo-tree-id44536 . -421) (undo-tree-id44537 . -421) (undo-tree-id44538 . -421) (undo-tree-id44539 . -421) (undo-tree-id44540 . -421) (undo-tree-id44541 . -421) (undo-tree-id44542 . -421) (undo-tree-id44543 . -421) (undo-tree-id44544 . -421) (undo-tree-id44545 . -421) (undo-tree-id44546 . -421) (undo-tree-id44547 . -422) (undo-tree-id44548 . -422) (undo-tree-id44549 . -422) (undo-tree-id44550 . -422) (undo-tree-id44551 . -422) (undo-tree-id44552 . -422) (undo-tree-id44553 . -422) (undo-tree-id44554 . -422) (undo-tree-id44555 . -422) (undo-tree-id44556 . -422) (undo-tree-id44557 . -422) (undo-tree-id44558 . -422) (undo-tree-id44559 . -422) (undo-tree-id44560 . -422) (undo-tree-id44561 . -422) (undo-tree-id44562 . -422) (undo-tree-id44563 . -422) (undo-tree-id44564 . -422) (undo-tree-id44565 . -422) (undo-tree-id44566 . -422) (undo-tree-id44567 . -422) (undo-tree-id44568 . -422) (undo-tree-id44569 . -422) (undo-tree-id44570 . -422) (undo-tree-id44571 . -422) (undo-tree-id44572 . -422) (undo-tree-id44573 . -422) (undo-tree-id44574 . -422) (undo-tree-id44575 . -422) (undo-tree-id44576 . -422) (undo-tree-id44577 . -422) (undo-tree-id44578 . -422) (undo-tree-id44579 . -422) (undo-tree-id44580 . -361) (9861 . 10222) (#(" Suppose Gradient Descent updates the weights in a way that increases the outputs slightly at the first time step. Because the same weights are used at every time step, the outputs at the second time step may also be slightly increased, and those at the third, and so on until the outputs explode—and a nonsaturating activation function does not prevent that." 0 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 50 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 51 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 131 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 131 132 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 132 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 133 208 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 208 209 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 209 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 222 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 288 289 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 289 292 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 292 359 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9922) (undo-tree-id44581 . -1) (undo-tree-id44582 . -50) (undo-tree-id44583 . -50) (undo-tree-id44584 . -50) (undo-tree-id44585 . -50) (undo-tree-id44586 . -50) (undo-tree-id44587 . -50) (undo-tree-id44588 . -50) (undo-tree-id44589 . -50) (undo-tree-id44590 . -50) (undo-tree-id44591 . -50) (undo-tree-id44592 . -50) (undo-tree-id44593 . -50) (undo-tree-id44594 . -50) (undo-tree-id44595 . -50) (undo-tree-id44596 . -50) (undo-tree-id44597 . -50) (undo-tree-id44598 . -131) (undo-tree-id44599 . -131) (undo-tree-id44600 . -131) (undo-tree-id44601 . -131) (undo-tree-id44602 . -131) (undo-tree-id44603 . -131) (undo-tree-id44604 . -131) (undo-tree-id44605 . -131) (undo-tree-id44606 . -131) (undo-tree-id44607 . -131) (undo-tree-id44608 . -131) (undo-tree-id44609 . -131) (undo-tree-id44610 . -131) (undo-tree-id44611 . -131) (undo-tree-id44612 . -131) (undo-tree-id44613 . -131) (undo-tree-id44614 . -208) (undo-tree-id44615 . -208) (undo-tree-id44616 . -208) (undo-tree-id44617 . -208) (undo-tree-id44618 . -208) (undo-tree-id44619 . -208) (undo-tree-id44620 . -208) (undo-tree-id44621 . -208) (undo-tree-id44622 . -208) (undo-tree-id44623 . -208) (undo-tree-id44624 . -208) (undo-tree-id44625 . -208) (undo-tree-id44626 . -208) (undo-tree-id44627 . -208) (undo-tree-id44628 . -208) (undo-tree-id44629 . -208) (undo-tree-id44630 . -288) (undo-tree-id44631 . -288) (undo-tree-id44632 . -288) (undo-tree-id44633 . -288) (undo-tree-id44634 . -288) (undo-tree-id44635 . -288) (undo-tree-id44636 . -288) (undo-tree-id44637 . -288) (undo-tree-id44638 . -288) (undo-tree-id44639 . -288) (undo-tree-id44640 . -288) (undo-tree-id44641 . -288) (undo-tree-id44642 . -288) (undo-tree-id44643 . -288) (undo-tree-id44644 . -288) (undo-tree-id44645 . -288) (undo-tree-id44646 . -288) (undo-tree-id44647 . -288) (undo-tree-id44648 . -288) (undo-tree-id44649 . -288) (undo-tree-id44650 . -288) (undo-tree-id44651 . -288) (undo-tree-id44652 . -288) (undo-tree-id44653 . -288) (undo-tree-id44654 . -288) (undo-tree-id44655 . -288) (undo-tree-id44656 . -288) (undo-tree-id44657 . -288) (undo-tree-id44658 . -288) (undo-tree-id44659 . -288) (undo-tree-id44660 . -288) (undo-tree-id44661 . -192) (undo-tree-id44662 . -192) (undo-tree-id44663 . -192) (undo-tree-id44664 . -192) (undo-tree-id44665 . -192) (undo-tree-id44666 . -192) (undo-tree-id44667 . -192) (undo-tree-id44668 . -192) (undo-tree-id44669 . -192) (undo-tree-id44670 . -192) (undo-tree-id44671 . -192) (undo-tree-id44672 . -192) (undo-tree-id44673 . -192) (undo-tree-id44674 . -192) (undo-tree-id44675 . -192) (undo-tree-id44676 . -97) (undo-tree-id44677 . -97) (undo-tree-id44678 . -97) (undo-tree-id44679 . -97) (undo-tree-id44680 . -97) (undo-tree-id44681 . -97) (undo-tree-id44682 . -97) (undo-tree-id44683 . -97) (undo-tree-id44684 . -97) (undo-tree-id44685 . -97) (undo-tree-id44686 . -97) (undo-tree-id44687 . -97) (undo-tree-id44688 . -97) (undo-tree-id44689 . -97) (undo-tree-id44690 . -97) (undo-tree-id44691 . -7) (undo-tree-id44692 . -7) (undo-tree-id44693 . -7) (undo-tree-id44694 . -7) (undo-tree-id44695 . -7) (undo-tree-id44696 . -7) (undo-tree-id44697 . -7) (undo-tree-id44698 . -7) (undo-tree-id44699 . -7) (undo-tree-id44700 . -7) (undo-tree-id44701 . -7) (undo-tree-id44702 . -7) (undo-tree-id44703 . -7) (undo-tree-id44704 . -7) (undo-tree-id44705 . -7) (undo-tree-id44706 . -1) (undo-tree-id44707 . -1) (undo-tree-id44708 . -1) (undo-tree-id44709 . -1) (undo-tree-id44710 . -1) (undo-tree-id44711 . -1) (undo-tree-id44712 . -1) (undo-tree-id44713 . -1) (undo-tree-id44714 . -1) (undo-tree-id44715 . -1) (undo-tree-id44716 . -1) (undo-tree-id44717 . -1) (undo-tree-id44718 . -1) (undo-tree-id44719 . -1) (undo-tree-id44720 . -1) (undo-tree-id44721 . -1) (undo-tree-id44722 . -1) (undo-tree-id44723 . -1) (undo-tree-id44724 . -1) (undo-tree-id44725 . -1) (undo-tree-id44726 . -1) (undo-tree-id44727 . -1) (undo-tree-id44728 . -1) (undo-tree-id44729 . -1) (undo-tree-id44730 . -1) (undo-tree-id44731 . -1) (undo-tree-id44732 . -1) (undo-tree-id44733 . -1) (undo-tree-id44734 . -1) (undo-tree-id44735 . -1) (undo-tree-id44736 . -1) (undo-tree-id44737 . -1) (undo-tree-id44738 . -1) 9923) nil (25773 35003 726521 714000) 0 nil])
([nil nil ((#("Suppose Gradient Descent updates the weights in a way that increases the outputs slightly at the first time step" 0 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 49 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 50 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925) (undo-tree-id45240 . -111) (undo-tree-id45241 . 112) (undo-tree-id45242 . -112) (t 25773 35003 789254 644000)) nil (25773 35025 935976 628000) 0 nil])
([nil nil ((#(". Because the same weights are used at every time step" 0 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 19 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925) (undo-tree-id45249 . -53) (undo-tree-id45250 . 54) (undo-tree-id45251 . -54) (t 25773 35026 4971 207000)) nil (25773 35036 959877 998000) 0 nil])
([nil nil ((#(", the outputs at the second time step may also be slightly increased" 0 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 55 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925) (undo-tree-id45246 . -67) (undo-tree-id45247 . 68) (undo-tree-id45248 . -68)) nil (25773 35036 959874 360000) 0 nil])
([nil nil ((#(", and those at the third" 0 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925) (undo-tree-id45243 . -23) (undo-tree-id45244 . 24) (undo-tree-id45245 . -24)) nil (25773 35036 959868 107000) 0 nil])
([nil nil ((#(", an" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925) (undo-tree-id45382 . -3) (undo-tree-id45383 . 4) (undo-tree-id45384 . -4) (t 25773 35037 80837 720000)) nil (25773 35048 851631 33000) 0 nil])
([nil nil ((#("- d so on until the outputs explode—and a nonsaturating activation function does not prevent that.
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9923) (undo-tree-id45252 . -98) (undo-tree-id45253 . 97) (undo-tree-id45254 . 1) (undo-tree-id45255 . -2) (undo-tree-id45256 . -2) (undo-tree-id45257 . -2) (undo-tree-id45258 . -2) (undo-tree-id45259 . -2) (undo-tree-id45260 . -2) (undo-tree-id45261 . -2) (undo-tree-id45262 . -2) (undo-tree-id45263 . -2) (undo-tree-id45264 . -2) (undo-tree-id45265 . -2) (undo-tree-id45266 . -2) (undo-tree-id45267 . -2) (undo-tree-id45268 . -2) (undo-tree-id45269 . -2) (undo-tree-id45270 . -2) (undo-tree-id45271 . -2) (undo-tree-id45272 . -2) (undo-tree-id45273 . -2) (undo-tree-id45274 . -2) (undo-tree-id45275 . -2) (undo-tree-id45276 . -2) (undo-tree-id45277 . -2) (undo-tree-id45278 . -2) (undo-tree-id45279 . -2) (undo-tree-id45280 . -2) (undo-tree-id45281 . -2) (undo-tree-id45282 . -2) (undo-tree-id45283 . -2) (undo-tree-id45284 . -2) (undo-tree-id45285 . -2) (undo-tree-id45286 . -2) (undo-tree-id45287 . -2) (undo-tree-id45288 . -2) (undo-tree-id45289 . -2) (undo-tree-id45290 . -2) (undo-tree-id45291 . -2) (undo-tree-id45292 . -2) (undo-tree-id45293 . -2) (undo-tree-id45294 . -2) (undo-tree-id45295 . -2) (undo-tree-id45296 . -2) (undo-tree-id45297 . -2) (undo-tree-id45298 . -2) (undo-tree-id45299 . -2) (undo-tree-id45300 . -2) (undo-tree-id45301 . -2) (undo-tree-id45302 . -2) (undo-tree-id45303 . -2) (undo-tree-id45304 . -2) (undo-tree-id45305 . -2) (undo-tree-id45306 . -2) (undo-tree-id45307 . -2) (undo-tree-id45308 . -2) (undo-tree-id45309 . -2) (undo-tree-id45310 . -2) (undo-tree-id45311 . -2) (undo-tree-id45312 . -2) (undo-tree-id45313 . -2) (undo-tree-id45314 . -2) (undo-tree-id45315 . -2) (undo-tree-id45316 . -2) (undo-tree-id45317 . -2) (undo-tree-id45318 . -2) (undo-tree-id45319 . -2) (undo-tree-id45320 . -2) (undo-tree-id45321 . -2) (undo-tree-id45322 . -2) (undo-tree-id45323 . -2) (undo-tree-id45324 . -2) (undo-tree-id45325 . -2) (undo-tree-id45326 . -2) (undo-tree-id45327 . -2) (undo-tree-id45328 . -2) (undo-tree-id45329 . -2) (undo-tree-id45330 . -2) (undo-tree-id45331 . -2) (undo-tree-id45332 . -2) (undo-tree-id45333 . -2) (undo-tree-id45334 . -2) (undo-tree-id45335 . -2) (undo-tree-id45336 . -2) (undo-tree-id45337 . -2) (undo-tree-id45338 . -2) (undo-tree-id45339 . -2) (undo-tree-id45340 . -2) (undo-tree-id45341 . -2) (undo-tree-id45342 . -2) (undo-tree-id45343 . -2) (undo-tree-id45344 . -2) (undo-tree-id45345 . -2) (undo-tree-id45346 . -2) (undo-tree-id45347 . -2) (undo-tree-id45348 . -2) (undo-tree-id45349 . -2) (undo-tree-id45350 . -2) (undo-tree-id45351 . -2) (undo-tree-id45352 . -2) (undo-tree-id45353 . -2) (undo-tree-id45354 . -2) (undo-tree-id45355 . -2) (undo-tree-id45356 . -2) (undo-tree-id45357 . -2) (undo-tree-id45358 . -2) (undo-tree-id45359 . -2) (undo-tree-id45360 . -2) (undo-tree-id45361 . -2) (undo-tree-id45362 . -2) (undo-tree-id45363 . -2) (undo-tree-id45364 . -2) (undo-tree-id45365 . -2) (undo-tree-id45366 . -2) (undo-tree-id45367 . -2) (undo-tree-id45368 . -2) (undo-tree-id45369 . -2) (undo-tree-id45370 . -2) (undo-tree-id45371 . -2) (undo-tree-id45372 . -2) (undo-tree-id45373 . -2) (undo-tree-id45374 . -2) (undo-tree-id45375 . -2) (undo-tree-id45376 . -2) (undo-tree-id45377 . -2) (undo-tree-id45378 . -2) (undo-tree-id45379 . -2) (undo-tree-id45380 . -2) (undo-tree-id45381 . -99) 9925) nil (25773 35048 851620 703000) 0 nil])
([nil nil ((9924 . 9926) (t 25773 35048 924700 572000)) nil (25773 35052 732368 369000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9923) (undo-tree-id45385 . 1) (undo-tree-id45386 . -1) (undo-tree-id45387 . -1) (undo-tree-id45388 . -1) (undo-tree-id45389 . -1) (undo-tree-id45390 . -1) (undo-tree-id45391 . -1) (undo-tree-id45392 . -1) (undo-tree-id45393 . -1) (undo-tree-id45394 . -1) (undo-tree-id45395 . -1) (undo-tree-id45396 . -1) (undo-tree-id45397 . -1) (undo-tree-id45398 . -1) (undo-tree-id45399 . -1) (undo-tree-id45400 . -1) (undo-tree-id45401 . -1) (undo-tree-id45402 . -1) (undo-tree-id45403 . -1) (undo-tree-id45404 . -1)) nil (25773 35052 732362 545000) 0 nil])
([nil nil ((#("You can reduce this risk by " 0 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925) (undo-tree-id45948 . -27) (undo-tree-id45949 . 28) (undo-tree-id45950 . -27) (undo-tree-id45951 . -27) (undo-tree-id45952 . -28) (undo-tree-id45953 . -27) (undo-tree-id45954 . -2) (undo-tree-id45955 . -2) (undo-tree-id45956 . -2) (undo-tree-id45957 . -2) (undo-tree-id45958 . -2) (undo-tree-id45959 . -2) (undo-tree-id45960 . -2) (undo-tree-id45961 . -2) (undo-tree-id45962 . -6) (undo-tree-id45963 . -6) (undo-tree-id45964 . -6) (undo-tree-id45965 . -6) (undo-tree-id45966 . -6) (undo-tree-id45967 . -6) (undo-tree-id45968 . -6) (undo-tree-id45969 . -6) (undo-tree-id45970 . -13) (undo-tree-id45971 . -13) (undo-tree-id45972 . -13) (undo-tree-id45973 . -13) (undo-tree-id45974 . -13) (undo-tree-id45975 . -13) (undo-tree-id45976 . -13) (undo-tree-id45977 . -13) (undo-tree-id45978 . -18) (undo-tree-id45979 . -18) (undo-tree-id45980 . -18) (undo-tree-id45981 . -18) (undo-tree-id45982 . -18) (undo-tree-id45983 . -18) (undo-tree-id45984 . -18) (undo-tree-id45985 . -18) (undo-tree-id45986 . -23) (undo-tree-id45987 . -23) (undo-tree-id45988 . -23) (undo-tree-id45989 . -23) (undo-tree-id45990 . -23) (undo-tree-id45991 . -23) (undo-tree-id45992 . -23) (undo-tree-id45993 . -23) (undo-tree-id45994 . -26) (undo-tree-id45995 . -26) (undo-tree-id45996 . -26) (undo-tree-id45997 . -26) (undo-tree-id45998 . -26) (undo-tree-id45999 . -26) (undo-tree-id46000 . -26) (undo-tree-id46001 . -26) (undo-tree-id46002 . -27) (undo-tree-id46003 . -27) (undo-tree-id46004 . -27) (undo-tree-id46005 . -27) (undo-tree-id46006 . -27) (undo-tree-id46007 . -27) (undo-tree-id46008 . -27) (undo-tree-id46009 . -27) (undo-tree-id46010 . -27) (undo-tree-id46011 . -28) 9952 (t 25773 35052 800656 927000)) nil (25773 35095 474557 577000) 0 nil])
([nil nil ((9925 . 9926) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9925)) nil (25773 35095 474519 678000) 0 nil])
([nil nil ((9923 . 9999) (#("- , but you can
- Using a smaller learning rate to avoid exploring gradients" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 15 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 15 16 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 16 17 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 17 18 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 18 70 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 70 76 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9923) (undo-tree-id45433 . -18) (undo-tree-id45434 . -18) (undo-tree-id45435 . 58) (undo-tree-id45436 . -18) (undo-tree-id45437 . -18) (undo-tree-id45438 . 57) (undo-tree-id45439 . -69) (undo-tree-id45440 . -70) (undo-tree-id45441 . -76) (undo-tree-id45442 . -18) (undo-tree-id45443 . -18) (undo-tree-id45444 . -18) (undo-tree-id45445 . -18) (undo-tree-id45446 . -18) (undo-tree-id45447 . -18) (undo-tree-id45448 . -18) (undo-tree-id45449 . -18) (undo-tree-id45450 . -18) (undo-tree-id45451 . -18) (undo-tree-id45452 . -18) (undo-tree-id45453 . -18) (undo-tree-id45454 . -18) (undo-tree-id45455 . -18) (undo-tree-id45456 . -18) (undo-tree-id45457 . -18) (undo-tree-id45458 . -18) (undo-tree-id45459 . -18) (undo-tree-id45460 . -18) (undo-tree-id45461 . -18) (undo-tree-id45462 . -18) (undo-tree-id45463 . -18) (undo-tree-id45464 . -18) (undo-tree-id45465 . -18) (undo-tree-id45466 . -18) (undo-tree-id45467 . -18) (undo-tree-id45468 . -18) (undo-tree-id45469 . -18) (undo-tree-id45470 . -18) (undo-tree-id45471 . -18) (undo-tree-id45472 . -18) (undo-tree-id45473 . -18) (undo-tree-id45474 . -18) (undo-tree-id45475 . -18) (undo-tree-id45476 . -18) (undo-tree-id45477 . -18) (undo-tree-id45478 . -18) (undo-tree-id45479 . -18) (undo-tree-id45480 . -18) (undo-tree-id45481 . -18) (undo-tree-id45482 . -18) (undo-tree-id45483 . -18) (undo-tree-id45484 . -18) (undo-tree-id45485 . -18) (undo-tree-id45486 . -18) (undo-tree-id45487 . -18) (undo-tree-id45488 . -18) (undo-tree-id45489 . -18) (undo-tree-id45490 . -18) (undo-tree-id45491 . -18) (undo-tree-id45492 . -18) (undo-tree-id45493 . -18) (undo-tree-id45494 . -18) (undo-tree-id45495 . -18) (undo-tree-id45496 . -18) (undo-tree-id45497 . -18) (undo-tree-id45498 . -18) (undo-tree-id45499 . -18) (undo-tree-id45500 . -18) (undo-tree-id45501 . -18) (undo-tree-id45502 . -18) (undo-tree-id45503 . -18) (undo-tree-id45504 . -18) (undo-tree-id45505 . -18) (undo-tree-id45506 . -18) (undo-tree-id45507 . -18) (undo-tree-id45508 . -18) (undo-tree-id45509 . -18) (undo-tree-id45510 . -18) (undo-tree-id45511 . -18) (undo-tree-id45512 . -18) (undo-tree-id45513 . -18) (undo-tree-id45514 . -18) (undo-tree-id45515 . -18) (undo-tree-id45516 . -18) (undo-tree-id45517 . -18) (undo-tree-id45518 . -18) (undo-tree-id45519 . -18) (undo-tree-id45520 . -18) (undo-tree-id45521 . -18) (undo-tree-id45522 . -18) (undo-tree-id45523 . -18) (undo-tree-id45524 . -18) (undo-tree-id45525 . -18) (undo-tree-id45526 . -18) (undo-tree-id45527 . -18) (undo-tree-id45528 . -18) (undo-tree-id45529 . -18) (undo-tree-id45530 . -18) (undo-tree-id45531 . -18) (undo-tree-id45532 . -18) (undo-tree-id45533 . -18) (undo-tree-id45534 . -18) (undo-tree-id45535 . -18) (undo-tree-id45536 . -18) (undo-tree-id45537 . -18) (undo-tree-id45538 . -18) (undo-tree-id45539 . -22) (undo-tree-id45540 . -24) (undo-tree-id45541 . -32) (undo-tree-id45542 . -41) (undo-tree-id45543 . -46) (undo-tree-id45544 . -47) (undo-tree-id45545 . -76) (undo-tree-id45546 . -76) (undo-tree-id45547 . -47) (undo-tree-id45548 . -47) (undo-tree-id45549 . -47) (undo-tree-id45550 . -47) (undo-tree-id45551 . -47) (undo-tree-id45552 . -47) (undo-tree-id45553 . -47) (undo-tree-id45554 . -47) (undo-tree-id45555 . -47) (undo-tree-id45556 . -47) (undo-tree-id45557 . -47) (undo-tree-id45558 . -48) (undo-tree-id45559 . -48) (undo-tree-id45560 . -48) (undo-tree-id45561 . -48) (undo-tree-id45562 . -48) (undo-tree-id45563 . -48) (undo-tree-id45564 . -48) (undo-tree-id45565 . -48) (undo-tree-id45566 . -48) (undo-tree-id45567 . -49) (undo-tree-id45568 . -49) (undo-tree-id45569 . -49) (undo-tree-id45570 . -49) (undo-tree-id45571 . -49) (undo-tree-id45572 . -49) (undo-tree-id45573 . -49) (undo-tree-id45574 . -49) (undo-tree-id45575 . -49) (undo-tree-id45576 . -49) (undo-tree-id45577 . -49) (undo-tree-id45578 . -49) (undo-tree-id45579 . -49) (undo-tree-id45580 . -49) (undo-tree-id45581 . -49) (undo-tree-id45582 . -49) (undo-tree-id45583 . -49) (undo-tree-id45584 . -49) (undo-tree-id45585 . -49) (undo-tree-id45586 . -49) (undo-tree-id45587 . -49) (undo-tree-id45588 . -49) (undo-tree-id45589 . -49) (undo-tree-id45590 . -49) (undo-tree-id45591 . -49) (undo-tree-id45592 . -49) (undo-tree-id45593 . -49) (undo-tree-id45594 . -49) (undo-tree-id45595 . -49) (undo-tree-id45596 . -49) (undo-tree-id45597 . -49) (undo-tree-id45598 . -49) (undo-tree-id45599 . -49) (undo-tree-id45600 . -49) (undo-tree-id45601 . -49) (undo-tree-id45602 . -49) (undo-tree-id45603 . -49) (undo-tree-id45604 . -49) (undo-tree-id45605 . -50) (undo-tree-id45606 . -50) (undo-tree-id45607 . -50) (undo-tree-id45608 . -50) (undo-tree-id45609 . -50) (undo-tree-id45610 . -50) (undo-tree-id45611 . -50) (undo-tree-id45612 . -50) (undo-tree-id45613 . -50) (undo-tree-id45614 . -50) (undo-tree-id45615 . -50) (undo-tree-id45616 . -50) (undo-tree-id45617 . -50) (undo-tree-id45618 . -50) (undo-tree-id45619 . -50) (undo-tree-id45620 . -50) (undo-tree-id45621 . -50) (undo-tree-id45622 . -51) (undo-tree-id45623 . -51) (undo-tree-id45624 . -51) (undo-tree-id45625 . -51) (undo-tree-id45626 . -51) (undo-tree-id45627 . -51) (undo-tree-id45628 . -51) (undo-tree-id45629 . -51) (undo-tree-id45630 . -51) (undo-tree-id45631 . -51) (undo-tree-id45632 . -52) (undo-tree-id45633 . -52) (undo-tree-id45634 . -52) (undo-tree-id45635 . -52) (undo-tree-id45636 . -52) (undo-tree-id45637 . -52) (undo-tree-id45638 . -52) (undo-tree-id45639 . -52) (undo-tree-id45640 . -52) (undo-tree-id45641 . -52) (undo-tree-id45642 . -52) (undo-tree-id45643 . -52) (undo-tree-id45644 . -52) (undo-tree-id45645 . -52) (undo-tree-id45646 . -52) (undo-tree-id45647 . -52) (undo-tree-id45648 . -52) (undo-tree-id45649 . -52) (undo-tree-id45650 . -52) (undo-tree-id45651 . -52) (undo-tree-id45652 . -52) (undo-tree-id45653 . -52) (undo-tree-id45654 . -52) (undo-tree-id45655 . -52) (undo-tree-id45656 . -52) (undo-tree-id45657 . -52) (undo-tree-id45658 . -52) (undo-tree-id45659 . -52) (undo-tree-id45660 . -52) (undo-tree-id45661 . -52) (undo-tree-id45662 . -52) (undo-tree-id45663 . -52) (undo-tree-id45664 . -52) (undo-tree-id45665 . -52) (undo-tree-id45666 . -52) (undo-tree-id45667 . -52) (undo-tree-id45668 . -52) (undo-tree-id45669 . -52) (undo-tree-id45670 . -53) (undo-tree-id45671 . -53) (undo-tree-id45672 . -53) (undo-tree-id45673 . -53) (undo-tree-id45674 . -53) (undo-tree-id45675 . -53) (undo-tree-id45676 . -53) (undo-tree-id45677 . -53) (undo-tree-id45678 . -53) (undo-tree-id45679 . -53) (undo-tree-id45680 . -53) (undo-tree-id45681 . -53) (undo-tree-id45682 . -53) (undo-tree-id45683 . -53) (undo-tree-id45684 . -53) (undo-tree-id45685 . -53) (undo-tree-id45686 . -53) (undo-tree-id45687 . -54) (undo-tree-id45688 . -54) (undo-tree-id45689 . -54) (undo-tree-id45690 . -54) (undo-tree-id45691 . -54) (undo-tree-id45692 . -54) (undo-tree-id45693 . -54) (undo-tree-id45694 . -54) (undo-tree-id45695 . -54) (undo-tree-id45696 . -54) (undo-tree-id45697 . -55) (undo-tree-id45698 . -55) (undo-tree-id45699 . -55) (undo-tree-id45700 . -55) (undo-tree-id45701 . -55) (undo-tree-id45702 . -55) (undo-tree-id45703 . -55) (undo-tree-id45704 . -55) (undo-tree-id45705 . -56) (undo-tree-id45706 . -56) (undo-tree-id45707 . -56) (undo-tree-id45708 . -56) (undo-tree-id45709 . -56) (undo-tree-id45710 . -56) (undo-tree-id45711 . -56) (undo-tree-id45712 . -56) (undo-tree-id45713 . -57) (undo-tree-id45714 . -57) (undo-tree-id45715 . -57) (undo-tree-id45716 . -57) (undo-tree-id45717 . -57) (undo-tree-id45718 . -57) (undo-tree-id45719 . -57) (undo-tree-id45720 . -57) (undo-tree-id45721 . -57) (undo-tree-id45722 . -58) (undo-tree-id45723 . -58) (undo-tree-id45724 . -58) (undo-tree-id45725 . -58) (undo-tree-id45726 . -58) (undo-tree-id45727 . -58) (undo-tree-id45728 . -58) (undo-tree-id45729 . -58) (undo-tree-id45730 . -58) (undo-tree-id45731 . -58) (undo-tree-id45732 . -58) (undo-tree-id45733 . -58) (undo-tree-id45734 . -58) (undo-tree-id45735 . -58) (undo-tree-id45736 . -58) (undo-tree-id45737 . -58) (undo-tree-id45738 . -58) (undo-tree-id45739 . -58) (undo-tree-id45740 . -58) (undo-tree-id45741 . -58) (undo-tree-id45742 . -58) (undo-tree-id45743 . -58) (undo-tree-id45744 . -58) (undo-tree-id45745 . -58) (undo-tree-id45746 . -58) (undo-tree-id45747 . -58) (undo-tree-id45748 . -58) (undo-tree-id45749 . -58) (undo-tree-id45750 . -58) (undo-tree-id45751 . -58) (undo-tree-id45752 . -58) (undo-tree-id45753 . -58) (undo-tree-id45754 . -58) (undo-tree-id45755 . -58) (undo-tree-id45756 . -58) (undo-tree-id45757 . -58) (undo-tree-id45758 . -58) (undo-tree-id45759 . -58) (undo-tree-id45760 . -59) (undo-tree-id45761 . -59) (undo-tree-id45762 . -59) (undo-tree-id45763 . -59) (undo-tree-id45764 . -59) (undo-tree-id45765 . -59) (undo-tree-id45766 . -59) (undo-tree-id45767 . -59) (undo-tree-id45768 . -59) (undo-tree-id45769 . -59) (undo-tree-id45770 . -59) (undo-tree-id45771 . -59) (undo-tree-id45772 . -59) (undo-tree-id45773 . -59) (undo-tree-id45774 . -59) (undo-tree-id45775 . -59) (undo-tree-id45776 . -59) (undo-tree-id45777 . -60) (undo-tree-id45778 . -60) (undo-tree-id45779 . -60) (undo-tree-id45780 . -60) (undo-tree-id45781 . -60) (undo-tree-id45782 . -60) (undo-tree-id45783 . -60) (undo-tree-id45784 . -60) (undo-tree-id45785 . -60) (undo-tree-id45786 . -60) (undo-tree-id45787 . -60) (undo-tree-id45788 . -60) (undo-tree-id45789 . -60) (undo-tree-id45790 . -60) (undo-tree-id45791 . -60) (undo-tree-id45792 . -60) (undo-tree-id45793 . -60) (undo-tree-id45794 . -61) (undo-tree-id45795 . -61) (undo-tree-id45796 . -61) (undo-tree-id45797 . -61) (undo-tree-id45798 . -61) (undo-tree-id45799 . -61) (undo-tree-id45800 . -61) (undo-tree-id45801 . -61) (undo-tree-id45802 . -61) (undo-tree-id45803 . -61) (undo-tree-id45804 . -61) (undo-tree-id45805 . -61) (undo-tree-id45806 . -61) (undo-tree-id45807 . -61) (undo-tree-id45808 . -61) (undo-tree-id45809 . -61) (undo-tree-id45810 . -61) (undo-tree-id45811 . -62) (undo-tree-id45812 . -62) (undo-tree-id45813 . -62) (undo-tree-id45814 . -62) (undo-tree-id45815 . -62) (undo-tree-id45816 . -62) (undo-tree-id45817 . -62) (undo-tree-id45818 . -62) (undo-tree-id45819 . -62) (undo-tree-id45820 . -62) (undo-tree-id45821 . -63) (undo-tree-id45822 . -63) (undo-tree-id45823 . -63) (undo-tree-id45824 . -63) (undo-tree-id45825 . -63) (undo-tree-id45826 . -63) (undo-tree-id45827 . -63) (undo-tree-id45828 . -63) (undo-tree-id45829 . -64) (undo-tree-id45830 . -64) (undo-tree-id45831 . -64) (undo-tree-id45832 . -64) (undo-tree-id45833 . -64) (undo-tree-id45834 . -64) (undo-tree-id45835 . -64) (undo-tree-id45836 . -64) (undo-tree-id45837 . -65) (undo-tree-id45838 . -65) (undo-tree-id45839 . -65) (undo-tree-id45840 . -65) (undo-tree-id45841 . -65) (undo-tree-id45842 . -65) (undo-tree-id45843 . -65) (undo-tree-id45844 . -65) (undo-tree-id45845 . -66) (undo-tree-id45846 . -66) (undo-tree-id45847 . -66) (undo-tree-id45848 . -66) (undo-tree-id45849 . -66) (undo-tree-id45850 . -66) (undo-tree-id45851 . -66) (undo-tree-id45852 . -66) (undo-tree-id45853 . -67) (undo-tree-id45854 . -67) (undo-tree-id45855 . -67) (undo-tree-id45856 . -67) (undo-tree-id45857 . -67) (undo-tree-id45858 . -67) (undo-tree-id45859 . -67) (undo-tree-id45860 . -67) (undo-tree-id45861 . -67) (undo-tree-id45862 . -68) (undo-tree-id45863 . -68) (undo-tree-id45864 . -68) (undo-tree-id45865 . -68) (undo-tree-id45866 . -68) (undo-tree-id45867 . -68) (undo-tree-id45868 . -68) (undo-tree-id45869 . -68) (undo-tree-id45870 . -68) (undo-tree-id45871 . -68) (undo-tree-id45872 . -68) (undo-tree-id45873 . -68) (undo-tree-id45874 . -68) (undo-tree-id45875 . -68) (undo-tree-id45876 . -68) (undo-tree-id45877 . -68) (undo-tree-id45878 . -68) (undo-tree-id45879 . -68) (undo-tree-id45880 . -68) (undo-tree-id45881 . -68) (undo-tree-id45882 . -68) (undo-tree-id45883 . -68) (undo-tree-id45884 . -68) (undo-tree-id45885 . -68) (undo-tree-id45886 . -68) (undo-tree-id45887 . -68) (undo-tree-id45888 . -68) (undo-tree-id45889 . -68) (undo-tree-id45890 . -68) (undo-tree-id45891 . -68) (undo-tree-id45892 . -68) (undo-tree-id45893 . -68) (undo-tree-id45894 . -68) (undo-tree-id45895 . -68) (undo-tree-id45896 . -68) (undo-tree-id45897 . -68) (undo-tree-id45898 . -68) (undo-tree-id45899 . -68) (undo-tree-id45900 . -69) (undo-tree-id45901 . -69) (undo-tree-id45902 . -69) (undo-tree-id45903 . -69) (undo-tree-id45904 . -69) (undo-tree-id45905 . -69) (undo-tree-id45906 . -69) (undo-tree-id45907 . -69) (undo-tree-id45908 . -69) (undo-tree-id45909 . -69) (undo-tree-id45910 . -69) (undo-tree-id45911 . -69) (undo-tree-id45912 . -69) (undo-tree-id45913 . -69) (undo-tree-id45914 . -69) (undo-tree-id45915 . -69) (undo-tree-id45916 . -69) (undo-tree-id45917 . -70) (undo-tree-id45918 . -70) (undo-tree-id45919 . -70) (undo-tree-id45920 . -70) (undo-tree-id45921 . -70) (undo-tree-id45922 . -70) (undo-tree-id45923 . -70) (undo-tree-id45924 . -70) (undo-tree-id45925 . -70) (undo-tree-id45926 . -70) (undo-tree-id45927 . -70) (undo-tree-id45928 . -70) (undo-tree-id45929 . -70) (undo-tree-id45930 . -70) (undo-tree-id45931 . -70) (undo-tree-id45932 . -70) (undo-tree-id45933 . -70) (undo-tree-id45934 . -76) (undo-tree-id45935 . -76) (undo-tree-id45936 . -76) (undo-tree-id45937 . -76) (undo-tree-id45938 . -76) (undo-tree-id45939 . -76) (undo-tree-id45940 . -76) (undo-tree-id45941 . -76) (undo-tree-id45942 . -76) (undo-tree-id45943 . -76) (undo-tree-id45944 . -76) (undo-tree-id45945 . -16) (9923 . 9939) (#(", but you can" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9983) (undo-tree-id45946 . -4) (undo-tree-id45947 . -2) (9977 . 9983) (9964 . 9977) (9954 . 9964)) nil (25773 35095 474502 623000) 0 nil])
([nil nil ((9999 . 10000) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9999) (undo-tree-id45431 . 1) (undo-tree-id45432 . -1) 9985) nil (25773 35095 473403 545000) 0 nil])
([nil nil ((#(", but you can lso simply" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 14 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9986) (undo-tree-id45405 . -23) (undo-tree-id45406 . 24) (undo-tree-id45407 . -23) (undo-tree-id45408 . -23) (undo-tree-id45409 . -13) (undo-tree-id45410 . -13) (undo-tree-id45411 . -13) (undo-tree-id45412 . -13) (undo-tree-id45413 . -13) (undo-tree-id45414 . -13) (undo-tree-id45415 . -13) (undo-tree-id45416 . -13) (undo-tree-id45417 . -10) (undo-tree-id45418 . -6) (undo-tree-id45419 . -2) (undo-tree-id45420 . -24) (undo-tree-id45421 . -23) (undo-tree-id45422 . -4) (undo-tree-id45423 . -8) (undo-tree-id45424 . -12) (undo-tree-id45425 . 10) (undo-tree-id45426 . -17) (undo-tree-id45427 . -16) (undo-tree-id45428 . -23) (undo-tree-id45429 . -23) (undo-tree-id45430 . -24) 10009) nil (25773 35095 473398 895000) 0 nil])
([nil nil ((9988 . 9999) (9986 . 9988)) nil (25773 35095 473369 124000) 0 nil])
([nil nil ((9999 . 10000)) nil (25773 35095 473363 936000) 0 nil])
([nil nil ((#("like " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10038) (undo-tree-id46015 . -4) (undo-tree-id46016 . -5) (t 25773 35095 548214 405000)) nil (25773 35103 61447 923000) 0 nil])
([nil nil ((#("the " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10038) (undo-tree-id46013 . -3) (undo-tree-id46014 . -4)) nil (25773 35103 61445 138000) 0 nil])
([nil nil ((10038 . 10039)) nil (25773 35103 61441 624000) 0 nil])
([nil nil ((10057 . 10058) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10057) (undo-tree-id46012 . -1)) nil (25773 35103 61437 459000) 0 nil])
([nil nil ((10061 . 10063) (t 25773 35103 132143 79000)) nil (25773 35111 850841 206000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10060) (undo-tree-id46019 . -1) (undo-tree-id46020 . -1) (undo-tree-id46021 . -1) (undo-tree-id46022 . -1) (undo-tree-id46023 . -1) (undo-tree-id46024 . -1) (undo-tree-id46025 . -1) (undo-tree-id46026 . -1) (undo-tree-id46027 . -1) (undo-tree-id46028 . -1) (undo-tree-id46029 . -1) (undo-tree-id46030 . -1) (undo-tree-id46031 . -1) (undo-tree-id46032 . -1) (undo-tree-id46033 . -1) (undo-tree-id46034 . -1) (undo-tree-id46035 . -1) (undo-tree-id46036 . -1) (undo-tree-id46037 . -1)) nil (25773 35111 850838 916000) 0 nil])
([nil nil ((10202 . 10203) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10202) (undo-tree-id46017 . -1) (10131 . 10132) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10131) (undo-tree-id46018 . -1) 10060) nil (25773 35111 850820 617000) 0 nil])
([nil nil ((#("Moreover, " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10062) (undo-tree-id46619 . -9) (undo-tree-id46620 . 10) (undo-tree-id46621 . -9) (undo-tree-id46622 . -9) (undo-tree-id46623 . -10) (undo-tree-id46624 . -9) (undo-tree-id46625 . -7) (undo-tree-id46626 . -7) (undo-tree-id46627 . -7) (undo-tree-id46628 . -7) (undo-tree-id46629 . -7) (undo-tree-id46630 . -7) (undo-tree-id46631 . -7) (undo-tree-id46632 . -7) (undo-tree-id46633 . -7) (undo-tree-id46634 . -7) (undo-tree-id46635 . -7) (undo-tree-id46636 . -7) (undo-tree-id46637 . -7) (undo-tree-id46638 . -7) (undo-tree-id46639 . -7) (undo-tree-id46640 . -7) (undo-tree-id46641 . -7) (undo-tree-id46642 . -7) (undo-tree-id46643 . -7) (undo-tree-id46644 . -7) (undo-tree-id46645 . -7) (undo-tree-id46646 . -7) (undo-tree-id46647 . -8) (undo-tree-id46648 . -8) (undo-tree-id46649 . -8) (undo-tree-id46650 . -8) (undo-tree-id46651 . -8) (undo-tree-id46652 . -8) (undo-tree-id46653 . -8) (undo-tree-id46654 . -8) (undo-tree-id46655 . -8) (undo-tree-id46656 . -8) (undo-tree-id46657 . -8) (undo-tree-id46658 . -8) (undo-tree-id46659 . -8) (undo-tree-id46660 . -8) (undo-tree-id46661 . -8) (undo-tree-id46662 . -8) (undo-tree-id46663 . -8) (undo-tree-id46664 . -8) (undo-tree-id46665 . -8) (undo-tree-id46666 . -8) (undo-tree-id46667 . -8) (undo-tree-id46668 . -8) (undo-tree-id46669 . -10) (undo-tree-id46670 . -10) (undo-tree-id46671 . -10) (undo-tree-id46672 . -10) (undo-tree-id46673 . -10) (undo-tree-id46674 . -10) (undo-tree-id46675 . -10) (undo-tree-id46676 . -10) (undo-tree-id46677 . -10) (undo-tree-id46678 . -10) (undo-tree-id46679 . -10) (undo-tree-id46680 . -10) (undo-tree-id46681 . -10) (undo-tree-id46682 . -10) (undo-tree-id46683 . -10) (undo-tree-id46684 . -10) (undo-tree-id46685 . -10) (undo-tree-id46686 . -10) (undo-tree-id46687 . -10) (undo-tree-id46688 . -10) (undo-tree-id46689 . -10) (undo-tree-id46690 . -10) (undo-tree-id46691 . -9) (undo-tree-id46692 . -9) (undo-tree-id46693 . -9) (undo-tree-id46694 . -9) (undo-tree-id46695 . -9) (undo-tree-id46696 . -9) (undo-tree-id46697 . -9) (undo-tree-id46698 . -9) (undo-tree-id46699 . -9) (undo-tree-id46700 . -9) (undo-tree-id46701 . -9) (undo-tree-id46702 . -9) (undo-tree-id46703 . -9) (undo-tree-id46704 . -9) (undo-tree-id46705 . -9) (undo-tree-id46706 . -9) (undo-tree-id46707 . -9) (undo-tree-id46708 . -9) (undo-tree-id46709 . -9) (undo-tree-id46710 . -9) (undo-tree-id46711 . -9) (undo-tree-id46712 . -9) (undo-tree-id46713 . -9) (undo-tree-id46714 . -9) (undo-tree-id46715 . -9) (undo-tree-id46716 . -9) (undo-tree-id46717 . -9) (undo-tree-id46718 . -9) (undo-tree-id46719 . -9) (undo-tree-id46720 . -9) (undo-tree-id46721 . -9) (undo-tree-id46722 . -9) (undo-tree-id46723 . -9) (undo-tree-id46724 . -9) (undo-tree-id46725 . -9) (undo-tree-id46726 . -9) (undo-tree-id46727 . -9) (undo-tree-id46728 . -10) 10071 (t 25773 35111 924063 1000)) nil (25773 35166 525348 768000) 0 nil])
([nil nil ((#("as with deep feedforward nets. In fact, you cannot use it between time steps, only between recurrent layers. " 0 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 70 71 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 71 109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10122) (undo-tree-id46616 . -108) (undo-tree-id46617 . -109) (undo-tree-id46618 . -109)) nil (25773 35166 525209 67000) 0 nil])
([nil nil ((10121 . 10122)) nil (25773 35166 525206 821000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10124) (undo-tree-id46615 . -1)) nil (25773 35166 525206 20000) 0 nil])
([nil nil ((10124 . 10126)) nil (25773 35166 525204 806000) 0 nil])
([nil nil ((10348 . 10349) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10348) (undo-tree-id46612 . -1) (10215 . 10216) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10215) (undo-tree-id46613 . -1) (10163 . 10164) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10163) (undo-tree-id46614 . -1) 10125) nil (25773 35166 525203 297000) 0 nil])
([nil nil ((#("To be more precise, it is technically possible to add a BN layer to a memory cell so that it will be applied at each time step" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 37 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 38 89 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 89 90 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 90 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10126) (undo-tree-id46464 . -125) (undo-tree-id46465 . 126) (undo-tree-id46466 . -37) (undo-tree-id46467 . -37) (undo-tree-id46468 . -37) (undo-tree-id46469 . -37) (undo-tree-id46470 . -37) (undo-tree-id46471 . -37) (undo-tree-id46472 . -37) (undo-tree-id46473 . -37) (undo-tree-id46474 . -37) (undo-tree-id46475 . -89) (undo-tree-id46476 . -89) (undo-tree-id46477 . -89) (undo-tree-id46478 . -89) (undo-tree-id46479 . -89) (undo-tree-id46480 . -89) (undo-tree-id46481 . -89) (undo-tree-id46482 . -89) (undo-tree-id46483 . -89) (undo-tree-id46484 . -89) (undo-tree-id46485 . -89) (undo-tree-id46486 . -89) (undo-tree-id46487 . -89) (undo-tree-id46488 . -89) (undo-tree-id46489 . -89) (undo-tree-id46490 . -89) (undo-tree-id46491 . -36) (undo-tree-id46492 . -36) (undo-tree-id46493 . -36) (undo-tree-id46494 . -36) (undo-tree-id46495 . -36) (undo-tree-id46496 . -36) (undo-tree-id46497 . -36) (undo-tree-id46498 . -36) (undo-tree-id46499 . -36) (undo-tree-id46500 . -36) (undo-tree-id46501 . -36) (undo-tree-id46502 . -36) (undo-tree-id46503 . -36) (undo-tree-id46504 . -36) (undo-tree-id46505 . -36) (undo-tree-id46506 . -26) (undo-tree-id46507 . -26) (undo-tree-id46508 . -26) (undo-tree-id46509 . -26) (undo-tree-id46510 . -26) (undo-tree-id46511 . -26) (undo-tree-id46512 . -26) (undo-tree-id46513 . -26) (undo-tree-id46514 . -26) (undo-tree-id46515 . -26) (undo-tree-id46516 . -26) (undo-tree-id46517 . -26) (undo-tree-id46518 . -26) (undo-tree-id46519 . -26) (undo-tree-id46520 . -26) (undo-tree-id46521 . -23) (undo-tree-id46522 . -23) (undo-tree-id46523 . -23) (undo-tree-id46524 . -23) (undo-tree-id46525 . -23) (undo-tree-id46526 . -23) (undo-tree-id46527 . -23) (undo-tree-id46528 . -23) (undo-tree-id46529 . -23) (undo-tree-id46530 . -23) (undo-tree-id46531 . -23) (undo-tree-id46532 . -23) (undo-tree-id46533 . -23) (undo-tree-id46534 . -23) (undo-tree-id46535 . -23) (undo-tree-id46536 . -20) (undo-tree-id46537 . -20) (undo-tree-id46538 . -20) (undo-tree-id46539 . -20) (undo-tree-id46540 . -20) (undo-tree-id46541 . -20) (undo-tree-id46542 . -20) (undo-tree-id46543 . -20) (undo-tree-id46544 . -20) (undo-tree-id46545 . -20) (undo-tree-id46546 . -20) (undo-tree-id46547 . -20) (undo-tree-id46548 . -20) (undo-tree-id46549 . -20) (undo-tree-id46550 . -20) (undo-tree-id46551 . -18) (undo-tree-id46552 . -18) (undo-tree-id46553 . -18) (undo-tree-id46554 . -18) (undo-tree-id46555 . -18) (undo-tree-id46556 . -18) (undo-tree-id46557 . -18) (undo-tree-id46558 . -18) (undo-tree-id46559 . -18) (undo-tree-id46560 . -18) (undo-tree-id46561 . -18) (undo-tree-id46562 . -18) (undo-tree-id46563 . -18) (undo-tree-id46564 . -18) (undo-tree-id46565 . -18) (undo-tree-id46566 . -11) (undo-tree-id46567 . -11) (undo-tree-id46568 . -11) (undo-tree-id46569 . -11) (undo-tree-id46570 . -11) (undo-tree-id46571 . -11) (undo-tree-id46572 . -11) (undo-tree-id46573 . -11) (undo-tree-id46574 . -11) (undo-tree-id46575 . -11) (undo-tree-id46576 . -11) (undo-tree-id46577 . -11) (undo-tree-id46578 . -11) (undo-tree-id46579 . -11) (undo-tree-id46580 . -11) (undo-tree-id46581 . -6) (undo-tree-id46582 . -6) (undo-tree-id46583 . -6) (undo-tree-id46584 . -6) (undo-tree-id46585 . -6) (undo-tree-id46586 . -6) (undo-tree-id46587 . -6) (undo-tree-id46588 . -6) (undo-tree-id46589 . -6) (undo-tree-id46590 . -6) (undo-tree-id46591 . -6) (undo-tree-id46592 . -6) (undo-tree-id46593 . -6) (undo-tree-id46594 . -6) (undo-tree-id46595 . -6) (undo-tree-id46596 . -3) (undo-tree-id46597 . -3) (undo-tree-id46598 . -3) (undo-tree-id46599 . -3) (undo-tree-id46600 . -3) (undo-tree-id46601 . -3) (undo-tree-id46602 . -3) (undo-tree-id46603 . -3) (undo-tree-id46604 . -3) (undo-tree-id46605 . -3) (undo-tree-id46606 . -3) (undo-tree-id46607 . -3) (undo-tree-id46608 . -3) (undo-tree-id46609 . -3) (undo-tree-id46610 . -3) (undo-tree-id46611 . -126)) nil (25773 35166 525195 833000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10126) (undo-tree-id46461 . 1) (undo-tree-id46462 . -1) (undo-tree-id46463 . -1)) nil (25773 35166 524925 65000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10126) (undo-tree-id46458 . 1) (undo-tree-id46459 . -1) (undo-tree-id46460 . -1)) nil (25773 35166 524921 878000) 0 nil])
([nil nil ((#("- However, the same BNlayer will be used at each time step, with the same parameters, regardless of the actual scale and offset of the inputs and hidden state. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 161 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10124) (undo-tree-id46040 . -160) (undo-tree-id46041 . 159) (undo-tree-id46042 . -2) (undo-tree-id46043 . -1) (undo-tree-id46044 . -1) (undo-tree-id46045 . -1) (undo-tree-id46046 . -1) (undo-tree-id46047 . -1) (undo-tree-id46048 . -1) (undo-tree-id46049 . -1) (undo-tree-id46050 . -1) (undo-tree-id46051 . -2) (undo-tree-id46052 . -2) (undo-tree-id46053 . -2) (undo-tree-id46054 . -2) (undo-tree-id46055 . -2) (undo-tree-id46056 . -2) (undo-tree-id46057 . -2) (undo-tree-id46058 . -2) (undo-tree-id46059 . -2) (undo-tree-id46060 . -1) (undo-tree-id46061 . -1) (undo-tree-id46062 . -1) (undo-tree-id46063 . -1) (undo-tree-id46064 . -1) (undo-tree-id46065 . -1) (undo-tree-id46066 . -1) (undo-tree-id46067 . -1) (undo-tree-id46068 . -1) (undo-tree-id46069 . -1) (undo-tree-id46070 . -1) (undo-tree-id46071 . -1) (undo-tree-id46072 . -1) (undo-tree-id46073 . -1) (undo-tree-id46074 . -1) (undo-tree-id46075 . -1) (undo-tree-id46076 . -1) (undo-tree-id46077 . -1) (undo-tree-id46078 . -1) (undo-tree-id46079 . -1) (undo-tree-id46080 . -2) (undo-tree-id46081 . -2) (undo-tree-id46082 . -2) (undo-tree-id46083 . -2) (undo-tree-id46084 . -2) (undo-tree-id46085 . -2) (undo-tree-id46086 . -2) (undo-tree-id46087 . -2) (undo-tree-id46088 . -2) (undo-tree-id46089 . -2) (undo-tree-id46090 . -2) (undo-tree-id46091 . -2) (undo-tree-id46092 . -2) (undo-tree-id46093 . -2) (undo-tree-id46094 . -2) (undo-tree-id46095 . -2) (undo-tree-id46096 . -2) (undo-tree-id46097 . -2) (undo-tree-id46098 . -2) (undo-tree-id46099 . -2) (undo-tree-id46100 . -2) (undo-tree-id46101 . -2) (undo-tree-id46102 . -2) (undo-tree-id46103 . -2) (undo-tree-id46104 . -2) (undo-tree-id46105 . -96) (undo-tree-id46106 . -96) (undo-tree-id46107 . -96) (undo-tree-id46108 . -96) (undo-tree-id46109 . -96) (undo-tree-id46110 . -96) (undo-tree-id46111 . -96) (undo-tree-id46112 . -96) (undo-tree-id46113 . -96) (undo-tree-id46114 . -96) (undo-tree-id46115 . -96) (undo-tree-id46116 . -96) (undo-tree-id46117 . -96) (undo-tree-id46118 . -96) (undo-tree-id46119 . -96) (undo-tree-id46120 . -96) (undo-tree-id46121 . -96) (undo-tree-id46122 . -96) (undo-tree-id46123 . -96) (undo-tree-id46124 . -96) (undo-tree-id46125 . -96) (undo-tree-id46126 . -96) (undo-tree-id46127 . -96) (undo-tree-id46128 . -96) (undo-tree-id46129 . -96) (undo-tree-id46130 . -96) (undo-tree-id46131 . -96) (undo-tree-id46132 . -96) (undo-tree-id46133 . -96) (undo-tree-id46134 . -96) (undo-tree-id46135 . -96) (undo-tree-id46136 . -96) (undo-tree-id46137 . -96) (undo-tree-id46138 . -96) (undo-tree-id46139 . -96) (undo-tree-id46140 . -96) (undo-tree-id46141 . -3) (undo-tree-id46142 . -3) (undo-tree-id46143 . -3) (undo-tree-id46144 . -3) (undo-tree-id46145 . -3) (undo-tree-id46146 . -3) (undo-tree-id46147 . -3) (undo-tree-id46148 . -3) (undo-tree-id46149 . -3) (undo-tree-id46150 . -3) (undo-tree-id46151 . -3) (undo-tree-id46152 . -3) (undo-tree-id46153 . -3) (undo-tree-id46154 . -3) (undo-tree-id46155 . -3) (undo-tree-id46156 . -2) (undo-tree-id46157 . -2) (undo-tree-id46158 . -2) (undo-tree-id46159 . -2) (undo-tree-id46160 . -2) (undo-tree-id46161 . -2) (undo-tree-id46162 . -2) (undo-tree-id46163 . -2) (undo-tree-id46164 . -2) (undo-tree-id46165 . -2) (undo-tree-id46166 . -2) (undo-tree-id46167 . -2) (undo-tree-id46168 . -2) (undo-tree-id46169 . -2) (undo-tree-id46170 . -2) (undo-tree-id46171 . -2) (undo-tree-id46172 . -2) (undo-tree-id46173 . -2) (undo-tree-id46174 . -2) (undo-tree-id46175 . -2) (undo-tree-id46176 . -2) (undo-tree-id46177 . -2) (undo-tree-id46178 . -2) (undo-tree-id46179 . -2) (undo-tree-id46180 . -2) (undo-tree-id46181 . -2) (undo-tree-id46182 . -2) (undo-tree-id46183 . -2) (undo-tree-id46184 . -2) (undo-tree-id46185 . -2) (undo-tree-id46186 . -2) (undo-tree-id46187 . -2) (undo-tree-id46188 . -2) (undo-tree-id46189 . -2) (undo-tree-id46190 . -2) (undo-tree-id46191 . -2) (undo-tree-id46192 . -2) (undo-tree-id46193 . -2) (undo-tree-id46194 . -2) (undo-tree-id46195 . -2) (undo-tree-id46196 . -2) (undo-tree-id46197 . -2) (undo-tree-id46198 . -2) (undo-tree-id46199 . -2) (undo-tree-id46200 . -2) (undo-tree-id46201 . -2) (undo-tree-id46202 . -2) (undo-tree-id46203 . -2) (undo-tree-id46204 . -2) (undo-tree-id46205 . -2) (undo-tree-id46206 . -2) (undo-tree-id46207 . -2) (undo-tree-id46208 . -2) (undo-tree-id46209 . -2) (undo-tree-id46210 . -2) (undo-tree-id46211 . -2) (undo-tree-id46212 . -2) (undo-tree-id46213 . -2) (undo-tree-id46214 . -2) (undo-tree-id46215 . -2) (undo-tree-id46216 . -2) (undo-tree-id46217 . -2) (undo-tree-id46218 . -2) (undo-tree-id46219 . -2) (undo-tree-id46220 . -2) (undo-tree-id46221 . -2) (undo-tree-id46222 . -2) (undo-tree-id46223 . -2) (undo-tree-id46224 . -2) (undo-tree-id46225 . -2) (undo-tree-id46226 . -2) (undo-tree-id46227 . -2) (undo-tree-id46228 . -2) (undo-tree-id46229 . -2) (undo-tree-id46230 . -2) (undo-tree-id46231 . -2) (undo-tree-id46232 . -2) (undo-tree-id46233 . -2) (undo-tree-id46234 . -2) (undo-tree-id46235 . -2) (undo-tree-id46236 . -2) (undo-tree-id46237 . -2) (undo-tree-id46238 . -2) (undo-tree-id46239 . -2) (undo-tree-id46240 . -2) (undo-tree-id46241 . -2) (undo-tree-id46242 . -2) (undo-tree-id46243 . -2) (undo-tree-id46244 . -2) (undo-tree-id46245 . -2) (undo-tree-id46246 . -2) (undo-tree-id46247 . -2) (undo-tree-id46248 . -2) (undo-tree-id46249 . -2) (undo-tree-id46250 . -2) (undo-tree-id46251 . -2) (undo-tree-id46252 . -2) (undo-tree-id46253 . -2) (undo-tree-id46254 . -2) (undo-tree-id46255 . -2) (undo-tree-id46256 . -2) (undo-tree-id46257 . -2) (undo-tree-id46258 . -2) (undo-tree-id46259 . -2) (undo-tree-id46260 . -2) (undo-tree-id46261 . -2) (undo-tree-id46262 . -2) (undo-tree-id46263 . -2) (undo-tree-id46264 . -2) (undo-tree-id46265 . -2) (undo-tree-id46266 . -2) (undo-tree-id46267 . -2) (undo-tree-id46268 . -2) (undo-tree-id46269 . -2) (undo-tree-id46270 . -2) (undo-tree-id46271 . -2) (undo-tree-id46272 . -2) (undo-tree-id46273 . -2) (undo-tree-id46274 . -2) (undo-tree-id46275 . -2) (undo-tree-id46276 . -2) (undo-tree-id46277 . -2) (undo-tree-id46278 . -2) (undo-tree-id46279 . -2) (undo-tree-id46280 . -2) (undo-tree-id46281 . -2) (undo-tree-id46282 . -2) (undo-tree-id46283 . -2) (undo-tree-id46284 . -2) (undo-tree-id46285 . -2) (undo-tree-id46286 . -2) (undo-tree-id46287 . -2) (undo-tree-id46288 . -2) (undo-tree-id46289 . -2) (undo-tree-id46290 . -2) (undo-tree-id46291 . -2) (undo-tree-id46292 . -2) (undo-tree-id46293 . -2) (undo-tree-id46294 . -2) (undo-tree-id46295 . -2) (undo-tree-id46296 . -2) (undo-tree-id46297 . -2) (undo-tree-id46298 . -2) (undo-tree-id46299 . -2) (undo-tree-id46300 . -2) (undo-tree-id46301 . -2) (undo-tree-id46302 . -2) (undo-tree-id46303 . -2) (undo-tree-id46304 . -2) (undo-tree-id46305 . -2) (undo-tree-id46306 . -2) (undo-tree-id46307 . -2) (undo-tree-id46308 . -2) (undo-tree-id46309 . -2) (undo-tree-id46310 . -2) (undo-tree-id46311 . -2) (undo-tree-id46312 . -2) (undo-tree-id46313 . -2) (undo-tree-id46314 . -2) (undo-tree-id46315 . -2) (undo-tree-id46316 . -2) (undo-tree-id46317 . -2) (undo-tree-id46318 . -2) (undo-tree-id46319 . -2) (undo-tree-id46320 . -2) (undo-tree-id46321 . -2) (undo-tree-id46322 . -2) (undo-tree-id46323 . -2) (undo-tree-id46324 . -2) (undo-tree-id46325 . -2) (undo-tree-id46326 . -2) (undo-tree-id46327 . -2) (undo-tree-id46328 . -2) (undo-tree-id46329 . -2) (undo-tree-id46330 . -2) (undo-tree-id46331 . -2) (undo-tree-id46332 . -2) (undo-tree-id46333 . -2) (undo-tree-id46334 . -2) (undo-tree-id46335 . -2) (undo-tree-id46336 . -2) (undo-tree-id46337 . -2) (undo-tree-id46338 . -2) (undo-tree-id46339 . -2) (undo-tree-id46340 . -2) (undo-tree-id46341 . -2) (undo-tree-id46342 . -2) (undo-tree-id46343 . -2) (undo-tree-id46344 . -2) (undo-tree-id46345 . -2) (undo-tree-id46346 . -2) (undo-tree-id46347 . -2) (undo-tree-id46348 . -2) (undo-tree-id46349 . -2) (undo-tree-id46350 . -2) (undo-tree-id46351 . -2) (undo-tree-id46352 . -2) (undo-tree-id46353 . -2) (undo-tree-id46354 . -2) (undo-tree-id46355 . -2) (undo-tree-id46356 . -2) (undo-tree-id46357 . -2) (undo-tree-id46358 . -2) (undo-tree-id46359 . -2) (undo-tree-id46360 . -2) (undo-tree-id46361 . -2) (undo-tree-id46362 . -2) (undo-tree-id46363 . -2) (undo-tree-id46364 . -2) (undo-tree-id46365 . -2) (undo-tree-id46366 . -2) (undo-tree-id46367 . -2) (undo-tree-id46368 . -2) (undo-tree-id46369 . -2) (undo-tree-id46370 . -2) (undo-tree-id46371 . -2) (undo-tree-id46372 . -2) (undo-tree-id46373 . -2) (undo-tree-id46374 . -2) (undo-tree-id46375 . -2) (undo-tree-id46376 . -2) (undo-tree-id46377 . -2) (undo-tree-id46378 . -2) (undo-tree-id46379 . -2) (undo-tree-id46380 . -2) (undo-tree-id46381 . -2) (undo-tree-id46382 . -2) (undo-tree-id46383 . -2) (undo-tree-id46384 . -2) (undo-tree-id46385 . -2) (undo-tree-id46386 . -2) (undo-tree-id46387 . -2) (undo-tree-id46388 . -2) (undo-tree-id46389 . -2) (undo-tree-id46390 . -2) (undo-tree-id46391 . -2) (undo-tree-id46392 . -2) (undo-tree-id46393 . -2) (undo-tree-id46394 . -2) (undo-tree-id46395 . -2) (undo-tree-id46396 . -2) (undo-tree-id46397 . -2) (undo-tree-id46398 . -2) (undo-tree-id46399 . -2) (undo-tree-id46400 . -2) (undo-tree-id46401 . -2) (undo-tree-id46402 . -2) (undo-tree-id46403 . -2) (undo-tree-id46404 . -2) (undo-tree-id46405 . -2) (undo-tree-id46406 . -2) (undo-tree-id46407 . -2) (undo-tree-id46408 . -2) (undo-tree-id46409 . -2) (undo-tree-id46410 . -2) (undo-tree-id46411 . -2) (undo-tree-id46412 . -2) (undo-tree-id46413 . -2) (undo-tree-id46414 . -2) (undo-tree-id46415 . -2) (undo-tree-id46416 . -2) (undo-tree-id46417 . -2) (undo-tree-id46418 . -2) (undo-tree-id46419 . -2) (undo-tree-id46420 . -2) (undo-tree-id46421 . -2) (undo-tree-id46422 . -2) (undo-tree-id46423 . -2) (undo-tree-id46424 . -2) (undo-tree-id46425 . -2) (undo-tree-id46426 . -2) (undo-tree-id46427 . -2) (undo-tree-id46428 . -2) (undo-tree-id46429 . -2) (undo-tree-id46430 . -2) (undo-tree-id46431 . -2) (undo-tree-id46432 . -2) (undo-tree-id46433 . -2) (undo-tree-id46434 . -2) (undo-tree-id46435 . -2) (undo-tree-id46436 . -2) (undo-tree-id46437 . -2) (undo-tree-id46438 . -2) (undo-tree-id46439 . -2) (undo-tree-id46440 . -2) (undo-tree-id46441 . -2) (undo-tree-id46442 . -2) (undo-tree-id46443 . -2) (undo-tree-id46444 . -2) (undo-tree-id46445 . -2) (undo-tree-id46446 . -2) (undo-tree-id46447 . -2) (undo-tree-id46448 . -2) (undo-tree-id46449 . -2) (undo-tree-id46450 . -2) (undo-tree-id46451 . -2) (undo-tree-id46452 . -2) (undo-tree-id46453 . -2) (undo-tree-id46454 . -2) (undo-tree-id46455 . -2) (undo-tree-id46456 . -2) (undo-tree-id46457 . -161) 10126) nil (25773 35166 524863 57000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10124) (undo-tree-id46038 . 1) (undo-tree-id46039 . -1)) nil (25773 35166 523354 451000) 0 nil])
([nil nil ((10124 . 10126)) nil (25773 35166 523342 127000) 0 nil])
([nil nil ((#("In practice, this does not yield good results it is found that " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10126) (undo-tree-id46730 . -62) (undo-tree-id46731 . 63) (undo-tree-id46732 . -62) (undo-tree-id46733 . -62) (undo-tree-id46734 . -63) (undo-tree-id46735 . -62) (undo-tree-id46736 . -1) (undo-tree-id46737 . -1) (undo-tree-id46738 . -1) (undo-tree-id46739 . -1) (undo-tree-id46740 . -1) (undo-tree-id46741 . -1) (undo-tree-id46742 . -1) (undo-tree-id46743 . -1) (undo-tree-id46744 . -10) (undo-tree-id46745 . -10) (undo-tree-id46746 . -10) (undo-tree-id46747 . -10) (undo-tree-id46748 . -10) (undo-tree-id46749 . -10) (undo-tree-id46750 . -10) (undo-tree-id46751 . -10) (undo-tree-id46752 . -11) (undo-tree-id46753 . -11) (undo-tree-id46754 . -11) (undo-tree-id46755 . -11) (undo-tree-id46756 . -11) (undo-tree-id46757 . -11) (undo-tree-id46758 . -11) (undo-tree-id46759 . -11) (undo-tree-id46760 . -16) (undo-tree-id46761 . -16) (undo-tree-id46762 . -16) (undo-tree-id46763 . -16) (undo-tree-id46764 . -16) (undo-tree-id46765 . -16) (undo-tree-id46766 . -16) (undo-tree-id46767 . -16) (undo-tree-id46768 . -21) (undo-tree-id46769 . -21) (undo-tree-id46770 . -21) (undo-tree-id46771 . -21) (undo-tree-id46772 . -21) (undo-tree-id46773 . -21) (undo-tree-id46774 . -21) (undo-tree-id46775 . -21) (undo-tree-id46776 . -25) (undo-tree-id46777 . -25) (undo-tree-id46778 . -25) (undo-tree-id46779 . -25) (undo-tree-id46780 . -25) (undo-tree-id46781 . -25) (undo-tree-id46782 . -25) (undo-tree-id46783 . -25) (undo-tree-id46784 . -31) (undo-tree-id46785 . -31) (undo-tree-id46786 . -31) (undo-tree-id46787 . -31) (undo-tree-id46788 . -31) (undo-tree-id46789 . -31) (undo-tree-id46790 . -31) (undo-tree-id46791 . -31) (undo-tree-id46792 . -36) (undo-tree-id46793 . -36) (undo-tree-id46794 . -36) (undo-tree-id46795 . -36) (undo-tree-id46796 . -36) (undo-tree-id46797 . -36) (undo-tree-id46798 . -36) (undo-tree-id46799 . -36) (undo-tree-id46800 . -44) (undo-tree-id46801 . -44) (undo-tree-id46802 . -44) (undo-tree-id46803 . -44) (undo-tree-id46804 . -44) (undo-tree-id46805 . -44) (undo-tree-id46806 . -44) (undo-tree-id46807 . -44) (undo-tree-id46808 . -47) (undo-tree-id46809 . -47) (undo-tree-id46810 . -47) (undo-tree-id46811 . -47) (undo-tree-id46812 . -47) (undo-tree-id46813 . -47) (undo-tree-id46814 . -47) (undo-tree-id46815 . -47) (undo-tree-id46816 . -50) (undo-tree-id46817 . -50) (undo-tree-id46818 . -50) (undo-tree-id46819 . -50) (undo-tree-id46820 . -50) (undo-tree-id46821 . -50) (undo-tree-id46822 . -50) (undo-tree-id46823 . -50) (undo-tree-id46824 . -56) (undo-tree-id46825 . -56) (undo-tree-id46826 . -56) (undo-tree-id46827 . -56) (undo-tree-id46828 . -56) (undo-tree-id46829 . -56) (undo-tree-id46830 . -56) (undo-tree-id46831 . -56) (undo-tree-id46832 . -61) (undo-tree-id46833 . -61) (undo-tree-id46834 . -61) (undo-tree-id46835 . -61) (undo-tree-id46836 . -61) (undo-tree-id46837 . -61) (undo-tree-id46838 . -61) (undo-tree-id46839 . -61) (undo-tree-id46840 . -62) (undo-tree-id46841 . -62) (undo-tree-id46842 . -62) (undo-tree-id46843 . -62) (undo-tree-id46844 . -62) (undo-tree-id46845 . -62) (undo-tree-id46846 . -62) (undo-tree-id46847 . -62) (undo-tree-id46848 . -62) (undo-tree-id46849 . -63) 10188 (t 25773 35166 599625 6000)) nil (25773 35183 978733 152000) 0 nil])
([nil nil ((10141 . 10142) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10141) (undo-tree-id46729 . -1) 10126) nil (25773 35183 978648 803000) 0 nil])
([nil nil ((#("only " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10153) (undo-tree-id46858 . -4) (undo-tree-id46859 . -5) (t 25773 35184 43505 903000)) nil (25773 35200 430687 367000) 0 nil])
([nil nil ((#("it " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10158) (undo-tree-id46855 . -2) (undo-tree-id46856 . -1) (undo-tree-id46857 . -3)) nil (25773 35200 430684 510000) 0 nil])
([nil nil ((#("was " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10158) (undo-tree-id46853 . -3) (undo-tree-id46854 . -4)) nil (25773 35200 431025 986000) 0 nil])
([nil nil ((10124 . 10210) (#("- In
- BN was slightly beneficial when applied to the inputs, not to the hidden states" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 6 7 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 22 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 22 23 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 78 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 78 79 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 79 86 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10124) (undo-tree-id47480 . -86) (undo-tree-id47481 . -86) (undo-tree-id47482 . 7) (undo-tree-id47483 . -7) (undo-tree-id47484 . -7) (undo-tree-id47485 . 79) (undo-tree-id47486 . -22) (undo-tree-id47487 . -86) (undo-tree-id47488 . 79) (undo-tree-id47489 . -9) (undo-tree-id47490 . -39) (undo-tree-id47491 . -78) (undo-tree-id47492 . -78) (undo-tree-id47493 . -78) (undo-tree-id47494 . -78) (undo-tree-id47495 . -78) (undo-tree-id47496 . -78) (undo-tree-id47497 . -78) (undo-tree-id47498 . -78) (undo-tree-id47499 . -78) (undo-tree-id47500 . -86) (undo-tree-id47501 . -86) (undo-tree-id47502 . -86) (undo-tree-id47503 . -86) (undo-tree-id47504 . -86) (undo-tree-id47505 . -86) (undo-tree-id47506 . -86) (undo-tree-id47507 . -86) (undo-tree-id47508 . -86) (undo-tree-id47509 . -86) (undo-tree-id47510 . -86) (undo-tree-id47511 . -86) (undo-tree-id47512 . -5) (10124 . 10129) (#(" In" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10205) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10205) (undo-tree-id47513 . -1) (undo-tree-id47514 . -1) (undo-tree-id47515 . -1)) nil (25773 35243 360854 672000) 0 nil] [nil nil ((10197 . 10198) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10197) (undo-tree-id46850 . -1) (undo-tree-id46851 . -1) (undo-tree-id46852 . -1)) ((10197 . 10198) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10197)) (25773 35200 430672 601000) 0 nil])
([nil nil ((10289 . 10290) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10289) (undo-tree-id47477 . -1) (10210 . 10211) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10210) (undo-tree-id47478 . 1) (undo-tree-id47479 . -1) 10207) nil (25773 35243 360819 313000) 0 nil])
nil
([nil nil ((#("this can be done simply by adding a " 0 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10217) (undo-tree-id47258 . -35) (undo-tree-id47259 . -35) (undo-tree-id47260 . -35) (undo-tree-id47261 . -36) (undo-tree-id47262 . -35) (undo-tree-id47263 . -3) (undo-tree-id47264 . -3) (undo-tree-id47265 . -3) (undo-tree-id47266 . -3) (undo-tree-id47267 . -3) (undo-tree-id47268 . -3) (undo-tree-id47269 . -3) (undo-tree-id47270 . -3) (undo-tree-id47271 . -3) (undo-tree-id47272 . -3) (undo-tree-id47273 . -3) (undo-tree-id47274 . -3) (undo-tree-id47275 . -3) (undo-tree-id47276 . -3) (undo-tree-id47277 . -3) (undo-tree-id47278 . -3) (undo-tree-id47279 . -3) (undo-tree-id47280 . -3) (undo-tree-id47281 . -3) (undo-tree-id47282 . -3) (undo-tree-id47283 . -3) (undo-tree-id47284 . -3) (undo-tree-id47285 . -7) (undo-tree-id47286 . -7) (undo-tree-id47287 . -7) (undo-tree-id47288 . -7) (undo-tree-id47289 . -7) (undo-tree-id47290 . -7) (undo-tree-id47291 . -7) (undo-tree-id47292 . -7) (undo-tree-id47293 . -7) (undo-tree-id47294 . -7) (undo-tree-id47295 . -7) (undo-tree-id47296 . -7) (undo-tree-id47297 . -7) (undo-tree-id47298 . -7) (undo-tree-id47299 . -7) (undo-tree-id47300 . -7) (undo-tree-id47301 . -7) (undo-tree-id47302 . -7) (undo-tree-id47303 . -7) (undo-tree-id47304 . -7) (undo-tree-id47305 . -7) (undo-tree-id47306 . -7) (undo-tree-id47307 . -10) (undo-tree-id47308 . -10) (undo-tree-id47309 . -10) (undo-tree-id47310 . -10) (undo-tree-id47311 . -10) (undo-tree-id47312 . -10) (undo-tree-id47313 . -10) (undo-tree-id47314 . -10) (undo-tree-id47315 . -10) (undo-tree-id47316 . -10) (undo-tree-id47317 . -10) (undo-tree-id47318 . -10) (undo-tree-id47319 . -10) (undo-tree-id47320 . -10) (undo-tree-id47321 . -10) (undo-tree-id47322 . -10) (undo-tree-id47323 . -10) (undo-tree-id47324 . -10) (undo-tree-id47325 . -10) (undo-tree-id47326 . -10) (undo-tree-id47327 . -10) (undo-tree-id47328 . -10) (undo-tree-id47329 . -15) (undo-tree-id47330 . -15) (undo-tree-id47331 . -15) (undo-tree-id47332 . -15) (undo-tree-id47333 . -15) (undo-tree-id47334 . -15) (undo-tree-id47335 . -15) (undo-tree-id47336 . -15) (undo-tree-id47337 . -15) (undo-tree-id47338 . -15) (undo-tree-id47339 . -15) (undo-tree-id47340 . -15) (undo-tree-id47341 . -15) (undo-tree-id47342 . -15) (undo-tree-id47343 . -15) (undo-tree-id47344 . -15) (undo-tree-id47345 . -15) (undo-tree-id47346 . -15) (undo-tree-id47347 . -15) (undo-tree-id47348 . -15) (undo-tree-id47349 . -15) (undo-tree-id47350 . -15) (undo-tree-id47351 . -15) (undo-tree-id47352 . -15) (undo-tree-id47353 . -15) (undo-tree-id47354 . -15) (undo-tree-id47355 . -15) (undo-tree-id47356 . -15) (undo-tree-id47357 . -15) (undo-tree-id47358 . -22) (undo-tree-id47359 . -22) (undo-tree-id47360 . -22) (undo-tree-id47361 . -22) (undo-tree-id47362 . -22) (undo-tree-id47363 . -22) (undo-tree-id47364 . -22) (undo-tree-id47365 . -22) (undo-tree-id47366 . -22) (undo-tree-id47367 . -22) (undo-tree-id47368 . -22) (undo-tree-id47369 . -22) (undo-tree-id47370 . -22) (undo-tree-id47371 . -22) (undo-tree-id47372 . -22) (undo-tree-id47373 . -22) (undo-tree-id47374 . -22) (undo-tree-id47375 . -22) (undo-tree-id47376 . -22) (undo-tree-id47377 . -22) (undo-tree-id47378 . -22) (undo-tree-id47379 . -22) (undo-tree-id47380 . -25) (undo-tree-id47381 . -25) (undo-tree-id47382 . -25) (undo-tree-id47383 . -25) (undo-tree-id47384 . -25) (undo-tree-id47385 . -25) (undo-tree-id47386 . -25) (undo-tree-id47387 . -25) (undo-tree-id47388 . -25) (undo-tree-id47389 . -25) (undo-tree-id47390 . -25) (undo-tree-id47391 . -25) (undo-tree-id47392 . -25) (undo-tree-id47393 . -25) (undo-tree-id47394 . -25) (undo-tree-id47395 . -25) (undo-tree-id47396 . -25) (undo-tree-id47397 . -25) (undo-tree-id47398 . -25) (undo-tree-id47399 . -25) (undo-tree-id47400 . -25) (undo-tree-id47401 . -25) (undo-tree-id47402 . -32) (undo-tree-id47403 . -32) (undo-tree-id47404 . -32) (undo-tree-id47405 . -32) (undo-tree-id47406 . -32) (undo-tree-id47407 . -32) (undo-tree-id47408 . -32) (undo-tree-id47409 . -32) (undo-tree-id47410 . -32) (undo-tree-id47411 . -32) (undo-tree-id47412 . -32) (undo-tree-id47413 . -32) (undo-tree-id47414 . -32) (undo-tree-id47415 . -32) (undo-tree-id47416 . -32) (undo-tree-id47417 . -32) (undo-tree-id47418 . -32) (undo-tree-id47419 . -32) (undo-tree-id47420 . -32) (undo-tree-id47421 . -32) (undo-tree-id47422 . -32) (undo-tree-id47423 . -32) (undo-tree-id47424 . -34) (undo-tree-id47425 . -34) (undo-tree-id47426 . -34) (undo-tree-id47427 . -34) (undo-tree-id47428 . -34) (undo-tree-id47429 . -34) (undo-tree-id47430 . -34) (undo-tree-id47431 . -34) (undo-tree-id47432 . -34) (undo-tree-id47433 . -34) (undo-tree-id47434 . -34) (undo-tree-id47435 . -34) (undo-tree-id47436 . -34) (undo-tree-id47437 . -34) (undo-tree-id47438 . -34) (undo-tree-id47439 . -34) (undo-tree-id47440 . -34) (undo-tree-id47441 . -34) (undo-tree-id47442 . -34) (undo-tree-id47443 . -34) (undo-tree-id47444 . -34) (undo-tree-id47445 . -34) (undo-tree-id47446 . -34) (undo-tree-id47447 . -34) (undo-tree-id47448 . -34) (undo-tree-id47449 . -34) (undo-tree-id47450 . -34) (undo-tree-id47451 . -34) (undo-tree-id47452 . -34) (undo-tree-id47453 . -35) (undo-tree-id47454 . -35) (undo-tree-id47455 . -35) (undo-tree-id47456 . -35) (undo-tree-id47457 . -35) (undo-tree-id47458 . -35) (undo-tree-id47459 . -35) (undo-tree-id47460 . -35) (undo-tree-id47461 . -35) (undo-tree-id47462 . -35) (undo-tree-id47463 . -35) (undo-tree-id47464 . -35) (undo-tree-id47465 . -35) (undo-tree-id47466 . -35) (undo-tree-id47467 . -35) (undo-tree-id47468 . -35) (undo-tree-id47469 . -35) (undo-tree-id47470 . -35) (undo-tree-id47471 . -35) (undo-tree-id47472 . -35) (undo-tree-id47473 . -35) (undo-tree-id47474 . -35) (undo-tree-id47475 . -35) (undo-tree-id47476 . -36) 10252) nil (25773 35243 360809 832000) 0 nil])
([nil nil ((10216 . 10218) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10216) (undo-tree-id46945 . -1) (undo-tree-id46946 . -1) (undo-tree-id46947 . -1) (undo-tree-id46948 . -1) (undo-tree-id46949 . -1) (undo-tree-id46950 . -1) (undo-tree-id46951 . -1) (undo-tree-id46952 . -1) (undo-tree-id46953 . -1) (undo-tree-id46954 . -1) (undo-tree-id46955 . -1) (undo-tree-id46956 . -1) (undo-tree-id46957 . -1) (undo-tree-id46958 . -1) (undo-tree-id46959 . -1) (undo-tree-id46960 . -1) (undo-tree-id46961 . -1) (undo-tree-id46962 . -1) (undo-tree-id46963 . -1) (undo-tree-id46964 . -1) (undo-tree-id46965 . -1) (undo-tree-id46966 . -1) (undo-tree-id46967 . -1) (undo-tree-id46968 . -1) (undo-tree-id46969 . -1) (undo-tree-id46970 . -1) (undo-tree-id46971 . -1) (undo-tree-id46972 . -1) (undo-tree-id46973 . -1) (undo-tree-id46974 . -1) (undo-tree-id46975 . -1) (undo-tree-id46976 . -1) (undo-tree-id46977 . -1) (undo-tree-id46978 . -1) (undo-tree-id46979 . -1) (undo-tree-id46980 . -1) (undo-tree-id46981 . -1) (undo-tree-id46982 . -1) (undo-tree-id46983 . -1) (undo-tree-id46984 . -1) (undo-tree-id46985 . -1) (undo-tree-id46986 . -1) (undo-tree-id46987 . -1) (undo-tree-id46988 . -1) (undo-tree-id46989 . -1) (undo-tree-id46990 . -1) (undo-tree-id46991 . -1) (undo-tree-id46992 . -1) (undo-tree-id46993 . -1) (undo-tree-id46994 . -1) (undo-tree-id46995 . -1) (undo-tree-id46996 . -1) (undo-tree-id46997 . -1) (undo-tree-id46998 . -1) (undo-tree-id46999 . -1) (undo-tree-id47000 . -1) (undo-tree-id47001 . -1) (undo-tree-id47002 . -1) (undo-tree-id47003 . -1) (undo-tree-id47004 . -1) (undo-tree-id47005 . -1) (undo-tree-id47006 . -1) (undo-tree-id47007 . -1) (undo-tree-id47008 . -1) (undo-tree-id47009 . -1) (undo-tree-id47010 . -1) (undo-tree-id47011 . -1) (undo-tree-id47012 . -1) (undo-tree-id47013 . -1) (undo-tree-id47014 . -1) (undo-tree-id47015 . -1) (undo-tree-id47016 . -1) (undo-tree-id47017 . -1) (undo-tree-id47018 . -1) (undo-tree-id47019 . -1) (undo-tree-id47020 . -1) (undo-tree-id47021 . -1) (undo-tree-id47022 . -1) (undo-tree-id47023 . -1) (undo-tree-id47024 . -1) (undo-tree-id47025 . -1) (undo-tree-id47026 . -1) (undo-tree-id47027 . -1) (undo-tree-id47028 . -1) (undo-tree-id47029 . -1) (undo-tree-id47030 . -1) (undo-tree-id47031 . -1) (undo-tree-id47032 . -1) (undo-tree-id47033 . -1) (undo-tree-id47034 . -1) (undo-tree-id47035 . -1) (undo-tree-id47036 . -1) (undo-tree-id47037 . -1) (undo-tree-id47038 . -1) (undo-tree-id47039 . -1) (undo-tree-id47040 . -1) (undo-tree-id47041 . -1) (undo-tree-id47042 . -1) (undo-tree-id47043 . -1) (undo-tree-id47044 . -1) (undo-tree-id47045 . -1) (undo-tree-id47046 . -1) (undo-tree-id47047 . -1) (undo-tree-id47048 . -1) (undo-tree-id47049 . -1) (undo-tree-id47050 . -1) (undo-tree-id47051 . -1) (undo-tree-id47052 . -1) (undo-tree-id47053 . -1) (undo-tree-id47054 . -1) (undo-tree-id47055 . -1) (undo-tree-id47056 . -1) (undo-tree-id47057 . -1) (undo-tree-id47058 . -1) (undo-tree-id47059 . -1) (undo-tree-id47060 . -1) (undo-tree-id47061 . -1) (undo-tree-id47062 . -1) (undo-tree-id47063 . -1) (undo-tree-id47064 . -1) (undo-tree-id47065 . -1) (undo-tree-id47066 . -1) (undo-tree-id47067 . -1) (undo-tree-id47068 . -1) (undo-tree-id47069 . -1) (undo-tree-id47070 . -1) (undo-tree-id47071 . -1) (undo-tree-id47072 . -1) (undo-tree-id47073 . -1) (undo-tree-id47074 . -1) (undo-tree-id47075 . -1) (undo-tree-id47076 . -1) (undo-tree-id47077 . -1) (undo-tree-id47078 . -1) (undo-tree-id47079 . -1) (undo-tree-id47080 . -1) (undo-tree-id47081 . -1) (undo-tree-id47082 . -1) (undo-tree-id47083 . -1) (undo-tree-id47084 . -1) (undo-tree-id47085 . -1) (undo-tree-id47086 . -1) (undo-tree-id47087 . -1) (undo-tree-id47088 . -1) (undo-tree-id47089 . -1) (undo-tree-id47090 . -1) (undo-tree-id47091 . -1) (undo-tree-id47092 . -1) (undo-tree-id47093 . -1) (undo-tree-id47094 . -1) (undo-tree-id47095 . -1) (undo-tree-id47096 . -1) (undo-tree-id47097 . -1) (undo-tree-id47098 . -1) (undo-tree-id47099 . -1) (undo-tree-id47100 . -1) (undo-tree-id47101 . -1) (undo-tree-id47102 . -1) (undo-tree-id47103 . -1) (undo-tree-id47104 . -1) (undo-tree-id47105 . -1) (undo-tree-id47106 . -1) (undo-tree-id47107 . -1) (undo-tree-id47108 . -1) (undo-tree-id47109 . -1) (undo-tree-id47110 . -1) (undo-tree-id47111 . -1) (undo-tree-id47112 . -1) (undo-tree-id47113 . -1) (undo-tree-id47114 . -1) (undo-tree-id47115 . -1) (undo-tree-id47116 . -1) (undo-tree-id47117 . -1) (undo-tree-id47118 . -1) (undo-tree-id47119 . -1) (undo-tree-id47120 . -1) (undo-tree-id47121 . -1) (undo-tree-id47122 . -1) (undo-tree-id47123 . -1) (undo-tree-id47124 . -1) (undo-tree-id47125 . -1) (undo-tree-id47126 . -1) (undo-tree-id47127 . -1) (undo-tree-id47128 . -1) (undo-tree-id47129 . -1) (undo-tree-id47130 . -1) (undo-tree-id47131 . -1) (undo-tree-id47132 . -1) (undo-tree-id47133 . -1) (undo-tree-id47134 . -1) (undo-tree-id47135 . -1) (undo-tree-id47136 . -1) (undo-tree-id47137 . -1) (undo-tree-id47138 . -1) (undo-tree-id47139 . -1) (undo-tree-id47140 . -1) (undo-tree-id47141 . -1) (undo-tree-id47142 . -1) (undo-tree-id47143 . -1) (undo-tree-id47144 . -1) (undo-tree-id47145 . -1) (undo-tree-id47146 . -1) (undo-tree-id47147 . -1) (undo-tree-id47148 . -1) (undo-tree-id47149 . -1) (undo-tree-id47150 . -1) (undo-tree-id47151 . -1) (undo-tree-id47152 . -1) (undo-tree-id47153 . -1) (undo-tree-id47154 . -1) (undo-tree-id47155 . -1) (undo-tree-id47156 . -1) (undo-tree-id47157 . -1) (undo-tree-id47158 . -1) (undo-tree-id47159 . -1) (undo-tree-id47160 . -1) (undo-tree-id47161 . -1) (undo-tree-id47162 . -1) (undo-tree-id47163 . -1) (undo-tree-id47164 . -1) (undo-tree-id47165 . -1) (undo-tree-id47166 . -1) (undo-tree-id47167 . -1) (undo-tree-id47168 . -1) (undo-tree-id47169 . -1) (undo-tree-id47170 . -1) (undo-tree-id47171 . -1) (undo-tree-id47172 . -1) (undo-tree-id47173 . -1) (undo-tree-id47174 . -1) (undo-tree-id47175 . -1) (undo-tree-id47176 . -1) (undo-tree-id47177 . -1) (undo-tree-id47178 . -1) (undo-tree-id47179 . -1) (undo-tree-id47180 . -1) (undo-tree-id47181 . -1) (undo-tree-id47182 . -1) (undo-tree-id47183 . -1) (undo-tree-id47184 . -1) (undo-tree-id47185 . -1) (undo-tree-id47186 . -1) (undo-tree-id47187 . -1) (undo-tree-id47188 . -1) (undo-tree-id47189 . -1) (undo-tree-id47190 . -1) (undo-tree-id47191 . -1) (undo-tree-id47192 . -1) (undo-tree-id47193 . -1) (undo-tree-id47194 . -1) (undo-tree-id47195 . -1) (undo-tree-id47196 . -1) (undo-tree-id47197 . -1) (undo-tree-id47198 . -1) (undo-tree-id47199 . -1) (undo-tree-id47200 . -1) (undo-tree-id47201 . -1) (undo-tree-id47202 . -1) (undo-tree-id47203 . -1) (undo-tree-id47204 . -1) (undo-tree-id47205 . -1) (undo-tree-id47206 . -1) (undo-tree-id47207 . -1) (undo-tree-id47208 . -1) (undo-tree-id47209 . -1) (undo-tree-id47210 . -1) (undo-tree-id47211 . -1) (undo-tree-id47212 . -1) (undo-tree-id47213 . -1) (undo-tree-id47214 . -1) (undo-tree-id47215 . -1) (undo-tree-id47216 . -1) (undo-tree-id47217 . -1) (undo-tree-id47218 . -1) (undo-tree-id47219 . -1) (undo-tree-id47220 . -1) (undo-tree-id47221 . -1) (undo-tree-id47222 . -1) (undo-tree-id47223 . -1) (undo-tree-id47224 . -1) (undo-tree-id47225 . -1) (undo-tree-id47226 . -1) (undo-tree-id47227 . -1) (undo-tree-id47228 . -1) (undo-tree-id47229 . -1) (undo-tree-id47230 . -1) (undo-tree-id47231 . -1) (undo-tree-id47232 . -1) (undo-tree-id47233 . -1) (undo-tree-id47234 . -1) (undo-tree-id47235 . -1) (undo-tree-id47236 . -1) (undo-tree-id47237 . -1) (undo-tree-id47238 . -1) (undo-tree-id47239 . -1) (undo-tree-id47240 . -1) (undo-tree-id47241 . -1) (undo-tree-id47242 . -1) (undo-tree-id47243 . -1) (undo-tree-id47244 . -1) (undo-tree-id47245 . -1) (undo-tree-id47246 . -1) (undo-tree-id47247 . -1) (undo-tree-id47248 . -1) (undo-tree-id47249 . -1) (undo-tree-id47250 . -1) (undo-tree-id47251 . -1) (undo-tree-id47252 . -1) (undo-tree-id47253 . -1) (undo-tree-id47254 . -1) (undo-tree-id47255 . -1) (undo-tree-id47256 . -1) (undo-tree-id47257 . -1) 10217) nil (25773 35243 360681 122000) 0 nil])
([nil nil ((#("but " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10272) (undo-tree-id46913 . -3) (undo-tree-id46914 . -2) (undo-tree-id46915 . -2) (undo-tree-id46916 . -2) (undo-tree-id46917 . -2) (undo-tree-id46918 . -2) (undo-tree-id46919 . -2) (undo-tree-id46920 . -2) (undo-tree-id46921 . -2) (undo-tree-id46922 . -2) (undo-tree-id46923 . -2) (undo-tree-id46924 . -2) (undo-tree-id46925 . -2) (undo-tree-id46926 . -2) (undo-tree-id46927 . -2) (undo-tree-id46928 . -2) (undo-tree-id46929 . -1) (undo-tree-id46930 . -1) (undo-tree-id46931 . -1) (undo-tree-id46932 . -1) (undo-tree-id46933 . -1) (undo-tree-id46934 . -1) (undo-tree-id46935 . -1) (undo-tree-id46936 . -1) (undo-tree-id46937 . -1) (undo-tree-id46938 . -1) (undo-tree-id46939 . -1) (undo-tree-id46940 . -1) (undo-tree-id46941 . -1) (undo-tree-id46942 . -1) (undo-tree-id46943 . -1) (undo-tree-id46944 . -4)) nil (25773 35243 360368 326000) 0 nil])
([nil nil ((10272 . 10273)) nil (25773 35243 360348 98000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10270) (undo-tree-id46888 . -1) (undo-tree-id46889 . -1) (undo-tree-id46890 . -1) (undo-tree-id46891 . -1) (undo-tree-id46892 . -1) (undo-tree-id46893 . -1) (undo-tree-id46894 . -1) (undo-tree-id46895 . -1) (undo-tree-id46896 . -1) (undo-tree-id46897 . -1) (undo-tree-id46898 . -1) (undo-tree-id46899 . -1) (undo-tree-id46900 . -1) (undo-tree-id46901 . -1) (undo-tree-id46902 . -1) (undo-tree-id46903 . -1) (undo-tree-id46904 . -1) (undo-tree-id46905 . -1) (undo-tree-id46906 . -1) (undo-tree-id46907 . -1) (undo-tree-id46908 . -1) (undo-tree-id46909 . -1) (undo-tree-id46910 . -1) (undo-tree-id46911 . -1) (undo-tree-id46912 . -1)) nil (25773 35243 360346 739000) 0 nil])
([nil nil ((10293 . 10294)) nil (25773 35243 360330 189000) 0 nil])
([nil nil ((10293 . 10294) (#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10293) (undo-tree-id46878 . -1) (undo-tree-id46879 . -1) (undo-tree-id46880 . -1) (undo-tree-id46881 . -1) (undo-tree-id46882 . -1) (undo-tree-id46883 . -1) (undo-tree-id46884 . -1) (undo-tree-id46885 . -1) (undo-tree-id46886 . -1) (undo-tree-id46887 . -1)) nil (25773 35243 360329 48000) 0 nil])
([nil nil ((#("from it." 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10295) (undo-tree-id46875 . -7) (undo-tree-id46876 . -8) (undo-tree-id46877 . -8)) nil (25773 35243 360319 97000) 0 nil])
([nil nil ((10296 . 10298)) nil (25773 35243 360315 565000) 0 nil])
([nil nil ((10448 . 10449) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10448) (undo-tree-id46860 . -1) (10375 . 10376) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10375) (undo-tree-id46861 . -1) (10297 . 10298) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10297) (undo-tree-id46862 . -1) (undo-tree-id46863 . -1) (undo-tree-id46864 . -1) (undo-tree-id46865 . -1) (undo-tree-id46866 . -1) (undo-tree-id46867 . -1) (undo-tree-id46868 . -1) (undo-tree-id46869 . -1) (undo-tree-id46870 . -1) (undo-tree-id46871 . -1) (undo-tree-id46872 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10298) (undo-tree-id46873 . 1) (undo-tree-id46874 . -1) 10297) nil (25773 35243 360310 281000) 0 nil])
([nil nil ((#("often " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10318) (undo-tree-id48264 . -5) (undo-tree-id48265 . -6) (t 25773 35243 483168 890000)) nil (25773 35257 808898 779000) 0 nil])
([nil nil ((#("with " 0 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10331) (undo-tree-id48161 . -4) (undo-tree-id48162 . -3) (undo-tree-id48163 . -3) (undo-tree-id48164 . -3) (undo-tree-id48165 . -3) (undo-tree-id48166 . -3) (undo-tree-id48167 . -3) (undo-tree-id48168 . -3) (undo-tree-id48169 . -3) (undo-tree-id48170 . -3) (undo-tree-id48171 . -3) (undo-tree-id48172 . -3) (undo-tree-id48173 . -3) (undo-tree-id48174 . -3) (undo-tree-id48175 . -3) (undo-tree-id48176 . -3) (undo-tree-id48177 . -3) (undo-tree-id48178 . -3) (undo-tree-id48179 . -3) (undo-tree-id48180 . -3) (undo-tree-id48181 . -3) (undo-tree-id48182 . -3) (undo-tree-id48183 . -3) (undo-tree-id48184 . -5) (undo-tree-id48185 . -5) (undo-tree-id48186 . -5) (undo-tree-id48187 . -5) (undo-tree-id48188 . -5) (undo-tree-id48189 . -5) (undo-tree-id48190 . -5) (undo-tree-id48191 . -5) (undo-tree-id48192 . -5) (undo-tree-id48193 . -5) (undo-tree-id48194 . -5) (undo-tree-id48195 . -5) (undo-tree-id48196 . -5) (undo-tree-id48197 . -5) (undo-tree-id48198 . -5) (undo-tree-id48199 . -5) (undo-tree-id48200 . -5) (undo-tree-id48201 . -5) (undo-tree-id48202 . -5) (undo-tree-id48203 . -5) (undo-tree-id48204 . -5) (undo-tree-id48205 . -5) (undo-tree-id48206 . -5) (undo-tree-id48207 . -5) (undo-tree-id48208 . -5) (undo-tree-id48209 . -5) (undo-tree-id48210 . -5) (undo-tree-id48211 . -5) (undo-tree-id48212 . -5) (undo-tree-id48213 . -5) (undo-tree-id48214 . -5) (undo-tree-id48215 . -5) (undo-tree-id48216 . -5) (undo-tree-id48217 . -5) (undo-tree-id48218 . -5) (undo-tree-id48219 . -5) (undo-tree-id48220 . -5) (undo-tree-id48221 . -5) (undo-tree-id48222 . -5) (undo-tree-id48223 . -5) (undo-tree-id48224 . -5) (undo-tree-id48225 . -5) (undo-tree-id48226 . -5) (undo-tree-id48227 . -5) (undo-tree-id48228 . -5) (undo-tree-id48229 . -5) (undo-tree-id48230 . -5) (undo-tree-id48231 . -5) (undo-tree-id48232 . -5) (undo-tree-id48233 . -5) (undo-tree-id48234 . -5) (undo-tree-id48235 . -5) (undo-tree-id48236 . -5) (undo-tree-id48237 . -4) (undo-tree-id48238 . -4) (undo-tree-id48239 . -4) (undo-tree-id48240 . -4) (undo-tree-id48241 . -4) (undo-tree-id48242 . -4) (undo-tree-id48243 . -4) (undo-tree-id48244 . -4) (undo-tree-id48245 . -4) (undo-tree-id48246 . -4) (undo-tree-id48247 . -4) (undo-tree-id48248 . -4) (undo-tree-id48249 . -4) (undo-tree-id48250 . -4) (undo-tree-id48251 . -4) (undo-tree-id48252 . -4) (undo-tree-id48253 . -4) (undo-tree-id48254 . -4) (undo-tree-id48255 . -4) (undo-tree-id48256 . -4) (undo-tree-id48257 . -4) (undo-tree-id48258 . -4) (undo-tree-id48259 . -4) (undo-tree-id48260 . -4) (undo-tree-id48261 . -4) (undo-tree-id48262 . -4) (undo-tree-id48263 . -5)) nil (25773 35257 808892 929000) 0 nil])
([nil nil ((#("RNNs" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10331) (undo-tree-id48156 . -3) (undo-tree-id48157 . 4) (undo-tree-id48158 . 4) (undo-tree-id48159 . -4) (undo-tree-id48160 . -4)) nil (25773 35257 808817 118000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10331) (undo-tree-id48153 . -1) (undo-tree-id48154 . 2) (undo-tree-id48155 . -2)) nil (25773 35257 808812 38000) 0 nil])
([nil nil ((10296 . 10475) (#("- it is very similar to Batch Normalization, but instead of normalizing across the batch dimension, it normalizes across the features dimension.
- Layer Normalization works better" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 29 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 29 30 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 30 96 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 96 102 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 102 103 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 103 144 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 144 145 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 145 146 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 146 147 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 147 179 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10296) (undo-tree-id47516 . -179) (undo-tree-id47517 . -179) (undo-tree-id47518 . -146) (undo-tree-id47519 . -146) (undo-tree-id47520 . -146) (undo-tree-id47521 . -146) (undo-tree-id47522 . -146) (undo-tree-id47523 . -146) (undo-tree-id47524 . -146) (undo-tree-id47525 . -146) (undo-tree-id47526 . -146) (undo-tree-id47527 . -147) (undo-tree-id47528 . -179) (undo-tree-id47529 . -147) (undo-tree-id47530 . -147) (undo-tree-id47531 . -147) (undo-tree-id47532 . -147) (undo-tree-id47533 . -147) (undo-tree-id47534 . -147) (undo-tree-id47535 . -147) (undo-tree-id47536 . -147) (undo-tree-id47537 . -147) (undo-tree-id47538 . -147) (undo-tree-id47539 . -147) (undo-tree-id47540 . -147) (undo-tree-id47541 . -147) (undo-tree-id47542 . -147) (undo-tree-id47543 . -147) (undo-tree-id47544 . -147) (undo-tree-id47545 . -147) (undo-tree-id47546 . -147) (undo-tree-id47547 . -147) (undo-tree-id47548 . -147) (undo-tree-id47549 . -147) (undo-tree-id47550 . -147) (undo-tree-id47551 . -147) (undo-tree-id47552 . -147) (undo-tree-id47553 . -147) (undo-tree-id47554 . -147) (undo-tree-id47555 . -147) (undo-tree-id47556 . -147) (undo-tree-id47557 . -147) (undo-tree-id47558 . -147) (undo-tree-id47559 . -147) (undo-tree-id47560 . -147) (undo-tree-id47561 . -147) (undo-tree-id47562 . -147) (undo-tree-id47563 . -147) (undo-tree-id47564 . -147) (undo-tree-id47565 . -147) (undo-tree-id47566 . -147) (undo-tree-id47567 . -147) (undo-tree-id47568 . -147) (undo-tree-id47569 . -147) (undo-tree-id47570 . -147) (undo-tree-id47571 . -147) (undo-tree-id47572 . -147) (undo-tree-id47573 . -147) (undo-tree-id47574 . -147) (undo-tree-id47575 . -153) (undo-tree-id47576 . -153) (undo-tree-id47577 . -153) (undo-tree-id47578 . -153) (undo-tree-id47579 . -153) (undo-tree-id47580 . -153) (undo-tree-id47581 . -153) (undo-tree-id47582 . -153) (undo-tree-id47583 . -153) (undo-tree-id47584 . -153) (undo-tree-id47585 . -153) (undo-tree-id47586 . -153) (undo-tree-id47587 . -153) (undo-tree-id47588 . -153) (undo-tree-id47589 . -153) (undo-tree-id47590 . -153) (undo-tree-id47591 . -153) (undo-tree-id47592 . -153) (undo-tree-id47593 . -153) (undo-tree-id47594 . -153) (undo-tree-id47595 . -153) (undo-tree-id47596 . -153) (undo-tree-id47597 . -167) (undo-tree-id47598 . -167) (undo-tree-id47599 . -167) (undo-tree-id47600 . -167) (undo-tree-id47601 . -167) (undo-tree-id47602 . -167) (undo-tree-id47603 . -167) (undo-tree-id47604 . -167) (undo-tree-id47605 . -167) (undo-tree-id47606 . -167) (undo-tree-id47607 . -167) (undo-tree-id47608 . -167) (undo-tree-id47609 . -167) (undo-tree-id47610 . -167) (undo-tree-id47611 . -167) (undo-tree-id47612 . -167) (undo-tree-id47613 . -167) (undo-tree-id47614 . -167) (undo-tree-id47615 . -167) (undo-tree-id47616 . -167) (undo-tree-id47617 . -167) (undo-tree-id47618 . -167) (undo-tree-id47619 . -167) (undo-tree-id47620 . -167) (undo-tree-id47621 . -167) (undo-tree-id47622 . -167) (undo-tree-id47623 . -167) (undo-tree-id47624 . -167) (undo-tree-id47625 . -167) (undo-tree-id47626 . -167) (undo-tree-id47627 . -167) (undo-tree-id47628 . -167) (undo-tree-id47629 . -167) (undo-tree-id47630 . -167) (undo-tree-id47631 . -167) (undo-tree-id47632 . -167) (undo-tree-id47633 . -167) (undo-tree-id47634 . -167) (undo-tree-id47635 . -167) (undo-tree-id47636 . -167) (undo-tree-id47637 . -167) (undo-tree-id47638 . -167) (undo-tree-id47639 . -167) (undo-tree-id47640 . -167) (undo-tree-id47641 . -167) (undo-tree-id47642 . -167) (undo-tree-id47643 . -167) (undo-tree-id47644 . -167) (undo-tree-id47645 . -167) (undo-tree-id47646 . -167) (undo-tree-id47647 . -167) (undo-tree-id47648 . -167) (undo-tree-id47649 . -167) (undo-tree-id47650 . -167) (undo-tree-id47651 . -167) (undo-tree-id47652 . -171) (undo-tree-id47653 . -171) (undo-tree-id47654 . -171) (undo-tree-id47655 . -171) (undo-tree-id47656 . -171) (undo-tree-id47657 . -171) (undo-tree-id47658 . -171) (undo-tree-id47659 . -171) (undo-tree-id47660 . -171) (undo-tree-id47661 . -171) (undo-tree-id47662 . -171) (undo-tree-id47663 . -171) (undo-tree-id47664 . -171) (undo-tree-id47665 . -171) (undo-tree-id47666 . -171) (undo-tree-id47667 . -178) (undo-tree-id47668 . -178) (undo-tree-id47669 . -178) (undo-tree-id47670 . -178) (undo-tree-id47671 . -178) (undo-tree-id47672 . -178) (undo-tree-id47673 . -178) (undo-tree-id47674 . -178) (undo-tree-id47675 . -178) (undo-tree-id47676 . -178) (undo-tree-id47677 . -178) (undo-tree-id47678 . -178) (undo-tree-id47679 . -178) (undo-tree-id47680 . -178) (undo-tree-id47681 . -178) (undo-tree-id47682 . -179) (undo-tree-id47683 . -179) (undo-tree-id47684 . -179) (undo-tree-id47685 . -179) (undo-tree-id47686 . -179) (undo-tree-id47687 . -179) (undo-tree-id47688 . -179) (undo-tree-id47689 . -179) (undo-tree-id47690 . -179) (undo-tree-id47691 . -179) (undo-tree-id47692 . -179) (undo-tree-id47693 . -179) (undo-tree-id47694 . -179) (undo-tree-id47695 . -179) (undo-tree-id47696 . -179) (undo-tree-id47697 . -179) (undo-tree-id47698 . -179) (undo-tree-id47699 . -179) (undo-tree-id47700 . -179) (undo-tree-id47701 . -179) (undo-tree-id47702 . -179) (undo-tree-id47703 . -179) (undo-tree-id47704 . -179) (undo-tree-id47705 . -179) (undo-tree-id47706 . -179) (undo-tree-id47707 . -179) (undo-tree-id47708 . -179) (undo-tree-id47709 . -179) (undo-tree-id47710 . -179) (undo-tree-id47711 . -179) (undo-tree-id47712 . -179) (undo-tree-id47713 . -179) (undo-tree-id47714 . -179) (undo-tree-id47715 . -179) (undo-tree-id47716 . -179) (undo-tree-id47717 . -179) (undo-tree-id47718 . -179) (undo-tree-id47719 . -179) (undo-tree-id47720 . -179) (undo-tree-id47721 . -179) (undo-tree-id47722 . -179) (undo-tree-id47723 . -179) (undo-tree-id47724 . -179) (undo-tree-id47725 . -179) (undo-tree-id47726 . -179) (undo-tree-id47727 . -179) (undo-tree-id47728 . -179) (undo-tree-id47729 . -179) (undo-tree-id47730 . -179) (undo-tree-id47731 . -179) (undo-tree-id47732 . -179) (undo-tree-id47733 . -179) (undo-tree-id47734 . -179) (undo-tree-id47735 . -179) (undo-tree-id47736 . -179) (undo-tree-id47737 . -179) (undo-tree-id47738 . -179) (undo-tree-id47739 . -179) (undo-tree-id47740 . -179) (undo-tree-id47741 . -179) (undo-tree-id47742 . -179) (undo-tree-id47743 . -179) (undo-tree-id47744 . -179) (undo-tree-id47745 . -179) (undo-tree-id47746 . -179) (undo-tree-id47747 . -179) (undo-tree-id47748 . -179) (undo-tree-id47749 . -179) (undo-tree-id47750 . -179) (undo-tree-id47751 . -179) (undo-tree-id47752 . -179) (undo-tree-id47753 . -179) (undo-tree-id47754 . -179) (undo-tree-id47755 . -179) (undo-tree-id47756 . -179) (undo-tree-id47757 . -179) (undo-tree-id47758 . -179) (undo-tree-id47759 . -179) (undo-tree-id47760 . -179) (undo-tree-id47761 . -179) (undo-tree-id47762 . -179) (undo-tree-id47763 . -179) (undo-tree-id47764 . -179) (undo-tree-id47765 . -179) (undo-tree-id47766 . -179) (undo-tree-id47767 . -179) (undo-tree-id47768 . -179) (undo-tree-id47769 . -179) (undo-tree-id47770 . -179) (undo-tree-id47771 . -179) (undo-tree-id47772 . -179) (undo-tree-id47773 . -179) (undo-tree-id47774 . -179) (undo-tree-id47775 . -179) (undo-tree-id47776 . -179) (undo-tree-id47777 . -179) (undo-tree-id47778 . -179) (undo-tree-id47779 . -179) (undo-tree-id47780 . -179) (undo-tree-id47781 . -179) (undo-tree-id47782 . -179) (undo-tree-id47783 . -179) (undo-tree-id47784 . -179) (undo-tree-id47785 . -179) (undo-tree-id47786 . -179) (undo-tree-id47787 . -179) (undo-tree-id47788 . -179) (undo-tree-id47789 . -179) (undo-tree-id47790 . -179) (undo-tree-id47791 . -179) (undo-tree-id47792 . -179) (undo-tree-id47793 . -179) (undo-tree-id47794 . -179) (undo-tree-id47795 . -179) (undo-tree-id47796 . -179) (undo-tree-id47797 . -179) (undo-tree-id47798 . -179) (undo-tree-id47799 . -179) (undo-tree-id47800 . -179) (undo-tree-id47801 . -179) (undo-tree-id47802 . -179) (undo-tree-id47803 . -179) (undo-tree-id47804 . -179) (undo-tree-id47805 . -179) (undo-tree-id47806 . -179) (undo-tree-id47807 . -179) (undo-tree-id47808 . -179) (undo-tree-id47809 . -179) (undo-tree-id47810 . -179) (undo-tree-id47811 . -179) (undo-tree-id47812 . -179) (undo-tree-id47813 . -179) (undo-tree-id47814 . -179) (undo-tree-id47815 . -179) (undo-tree-id47816 . -179) (undo-tree-id47817 . -179) (undo-tree-id47818 . -179) (undo-tree-id47819 . -179) (undo-tree-id47820 . -179) (undo-tree-id47821 . -179) (undo-tree-id47822 . -179) (undo-tree-id47823 . -179) (undo-tree-id47824 . -179) (undo-tree-id47825 . -179) (undo-tree-id47826 . -179) (undo-tree-id47827 . -179) (undo-tree-id47828 . -179) (undo-tree-id47829 . -179) (undo-tree-id47830 . -179) (undo-tree-id47831 . -179) (undo-tree-id47832 . -179) (undo-tree-id47833 . -179) (undo-tree-id47834 . -179) (undo-tree-id47835 . -179) (undo-tree-id47836 . -179) (undo-tree-id47837 . -179) (undo-tree-id47838 . -179) (undo-tree-id47839 . -179) (undo-tree-id47840 . -179) (undo-tree-id47841 . -179) (undo-tree-id47842 . -179) (undo-tree-id47843 . -179) (undo-tree-id47844 . -179) (undo-tree-id47845 . -179) (undo-tree-id47846 . -179) (undo-tree-id47847 . -179) (undo-tree-id47848 . -179) (undo-tree-id47849 . -179) (undo-tree-id47850 . -179) (undo-tree-id47851 . -179) (undo-tree-id47852 . -179) (undo-tree-id47853 . -179) (undo-tree-id47854 . -179) (undo-tree-id47855 . -179) (undo-tree-id47856 . -179) (undo-tree-id47857 . -179) (undo-tree-id47858 . -179) (undo-tree-id47859 . -179) (undo-tree-id47860 . -179) (undo-tree-id47861 . -179) (undo-tree-id47862 . -179) (undo-tree-id47863 . -179) (undo-tree-id47864 . -179) (undo-tree-id47865 . -179) (undo-tree-id47866 . -179) (undo-tree-id47867 . -179) (undo-tree-id47868 . -179) (undo-tree-id47869 . -179) (undo-tree-id47870 . -179) (undo-tree-id47871 . -179) (undo-tree-id47872 . -179) (undo-tree-id47873 . -179) (undo-tree-id47874 . -179) (undo-tree-id47875 . -179) (undo-tree-id47876 . -179) (undo-tree-id47877 . -179) (undo-tree-id47878 . -179) (undo-tree-id47879 . -179) (undo-tree-id47880 . -179) (undo-tree-id47881 . -179) (undo-tree-id47882 . -179) (undo-tree-id47883 . -179) (undo-tree-id47884 . -179) (undo-tree-id47885 . -179) (undo-tree-id47886 . -179) (undo-tree-id47887 . -179) (undo-tree-id47888 . -179) (undo-tree-id47889 . -179) (undo-tree-id47890 . -179) (undo-tree-id47891 . -179) (undo-tree-id47892 . -179) (undo-tree-id47893 . -179) (undo-tree-id47894 . -179) (undo-tree-id47895 . -179) (undo-tree-id47896 . -179) (undo-tree-id47897 . -179) (undo-tree-id47898 . -179) (undo-tree-id47899 . -179) (undo-tree-id47900 . -179) (undo-tree-id47901 . -179) (undo-tree-id47902 . -179) (undo-tree-id47903 . -179) (undo-tree-id47904 . -179) (undo-tree-id47905 . -179) (undo-tree-id47906 . -179) (undo-tree-id47907 . -179) (undo-tree-id47908 . -179) (undo-tree-id47909 . -179) (undo-tree-id47910 . -179) (undo-tree-id47911 . -179) (undo-tree-id47912 . -179) (undo-tree-id47913 . -179) (undo-tree-id47914 . -179) (undo-tree-id47915 . -145) (10296 . 10441) (#(" it is very similar to Batch Normalization, but instead of normalizing across the batch dimension, it normalizes across the features dimension." 0 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 29 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 95 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10330) (undo-tree-id47916 . -1) (undo-tree-id47917 . -1) (undo-tree-id47918 . 142) (undo-tree-id47919 . -1) (undo-tree-id47920 . -1) (undo-tree-id47921 . -1) (undo-tree-id47922 . -1) (undo-tree-id47923 . -1) (undo-tree-id47924 . -1) (undo-tree-id47925 . -1) (undo-tree-id47926 . -1) (undo-tree-id47927 . -1) (undo-tree-id47928 . -1) (undo-tree-id47929 . -1) (undo-tree-id47930 . -1) (undo-tree-id47931 . -1) (undo-tree-id47932 . -1) (undo-tree-id47933 . -1) (undo-tree-id47934 . -1) (undo-tree-id47935 . -1) (undo-tree-id47936 . -1) (undo-tree-id47937 . -1) (undo-tree-id47938 . -1) (undo-tree-id47939 . -1) (undo-tree-id47940 . -1) (undo-tree-id47941 . -1) (undo-tree-id47942 . -1) (undo-tree-id47943 . -1) (undo-tree-id47944 . -1) (undo-tree-id47945 . -1) (undo-tree-id47946 . -1) (undo-tree-id47947 . -1) (undo-tree-id47948 . -1) (undo-tree-id47949 . -1) (undo-tree-id47950 . -1) (undo-tree-id47951 . -1) (undo-tree-id47952 . -1) (undo-tree-id47953 . -1) (undo-tree-id47954 . -1) (undo-tree-id47955 . -1) (undo-tree-id47956 . -1) (undo-tree-id47957 . -1) (undo-tree-id47958 . -1) (undo-tree-id47959 . -1) (undo-tree-id47960 . -1) (undo-tree-id47961 . -1) (undo-tree-id47962 . -1) (undo-tree-id47963 . -1) (undo-tree-id47964 . -1) (undo-tree-id47965 . -1) (undo-tree-id47966 . -1) (undo-tree-id47967 . -1) (undo-tree-id47968 . -1) (undo-tree-id47969 . -1) (undo-tree-id47970 . -1) (undo-tree-id47971 . -1) (undo-tree-id47972 . -1) (undo-tree-id47973 . -1) (undo-tree-id47974 . -1) (undo-tree-id47975 . -1) (undo-tree-id47976 . -1) (undo-tree-id47977 . -1) (undo-tree-id47978 . -1) (undo-tree-id47979 . -1) (undo-tree-id47980 . -1) (undo-tree-id47981 . -1) (undo-tree-id47982 . -1) (undo-tree-id47983 . -1) (undo-tree-id47984 . -1) (undo-tree-id47985 . -1) (undo-tree-id47986 . -1) (undo-tree-id47987 . -1) (undo-tree-id47988 . -1) (undo-tree-id47989 . -1) (undo-tree-id47990 . -1) (undo-tree-id47991 . -1) (undo-tree-id47992 . -1) (undo-tree-id47993 . -1) (undo-tree-id47994 . -1) (undo-tree-id47995 . -1) (undo-tree-id47996 . -1) (undo-tree-id47997 . -1) (undo-tree-id47998 . -1) (undo-tree-id47999 . -1) (undo-tree-id48000 . -1) (undo-tree-id48001 . -1) (undo-tree-id48002 . -1) (undo-tree-id48003 . -1) (undo-tree-id48004 . -1) (undo-tree-id48005 . -1) (undo-tree-id48006 . -1) (undo-tree-id48007 . -1) (undo-tree-id48008 . -1) (undo-tree-id48009 . -1) (undo-tree-id48010 . -1) (undo-tree-id48011 . -1) (undo-tree-id48012 . -1) (undo-tree-id48013 . -1) (undo-tree-id48014 . -1) (undo-tree-id48015 . -1) (undo-tree-id48016 . -1) (undo-tree-id48017 . -1) (undo-tree-id48018 . -1) (undo-tree-id48019 . -1) (undo-tree-id48020 . -1) (undo-tree-id48021 . -1) (undo-tree-id48022 . -1) (undo-tree-id48023 . -1) (undo-tree-id48024 . -1) (undo-tree-id48025 . -1) (undo-tree-id48026 . -1) (undo-tree-id48027 . -1) (undo-tree-id48028 . -1) (undo-tree-id48029 . -1) (undo-tree-id48030 . -1) (undo-tree-id48031 . -1) (undo-tree-id48032 . -1) (undo-tree-id48033 . -1) (undo-tree-id48034 . -1) (undo-tree-id48035 . -1) (undo-tree-id48036 . -1) (undo-tree-id48037 . -1) (undo-tree-id48038 . -1) (undo-tree-id48039 . -1) (undo-tree-id48040 . -1) (undo-tree-id48041 . -1) (undo-tree-id48042 . -1) (undo-tree-id48043 . -1) (undo-tree-id48044 . -1) (undo-tree-id48045 . -1) (undo-tree-id48046 . -1) (undo-tree-id48047 . -1) (undo-tree-id48048 . -1) (undo-tree-id48049 . -1) (undo-tree-id48050 . -1) (undo-tree-id48051 . -1) (undo-tree-id48052 . -1) (undo-tree-id48053 . -1) (undo-tree-id48054 . -1) (undo-tree-id48055 . -1) (undo-tree-id48056 . -1) (undo-tree-id48057 . -1) (undo-tree-id48058 . -1) (undo-tree-id48059 . -1) (undo-tree-id48060 . -1) (undo-tree-id48061 . -1) (undo-tree-id48062 . -1) (undo-tree-id48063 . -1) (undo-tree-id48064 . -1) (undo-tree-id48065 . -1) (undo-tree-id48066 . -1) (undo-tree-id48067 . -1) (undo-tree-id48068 . -1) (undo-tree-id48069 . -1) (undo-tree-id48070 . -1) (undo-tree-id48071 . -1) (undo-tree-id48072 . -1) (undo-tree-id48073 . -1) (undo-tree-id48074 . -1) (undo-tree-id48075 . -1) (undo-tree-id48076 . -1) (undo-tree-id48077 . -1) (undo-tree-id48078 . -1) (undo-tree-id48079 . -1) (undo-tree-id48080 . -1) (undo-tree-id48081 . -1) (undo-tree-id48082 . -1) (undo-tree-id48083 . -1) (undo-tree-id48084 . -1) (undo-tree-id48085 . -1) (undo-tree-id48086 . -1) (undo-tree-id48087 . -1) (undo-tree-id48088 . -1) (undo-tree-id48089 . -1) (undo-tree-id48090 . -1) (undo-tree-id48091 . -1) (undo-tree-id48092 . -1) (undo-tree-id48093 . -1) (undo-tree-id48094 . -1) (undo-tree-id48095 . -1) (undo-tree-id48096 . -1) (undo-tree-id48097 . -1) (undo-tree-id48098 . -1) (undo-tree-id48099 . -1) (undo-tree-id48100 . -1) (undo-tree-id48101 . -1) (undo-tree-id48102 . -1) (undo-tree-id48103 . -1) (undo-tree-id48104 . -1) (undo-tree-id48105 . -1) (undo-tree-id48106 . -1) (undo-tree-id48107 . -1) (undo-tree-id48108 . -1) (undo-tree-id48109 . -1) (undo-tree-id48110 . -1) (undo-tree-id48111 . -1) (undo-tree-id48112 . -1) (undo-tree-id48113 . -1) (undo-tree-id48114 . -1) (undo-tree-id48115 . -1) (undo-tree-id48116 . -1) (undo-tree-id48117 . -1) (undo-tree-id48118 . -1) (undo-tree-id48119 . -1) (undo-tree-id48120 . -1) (undo-tree-id48121 . -1) (undo-tree-id48122 . -1) (undo-tree-id48123 . -1) (undo-tree-id48124 . -1) (undo-tree-id48125 . -1) (undo-tree-id48126 . -1) (undo-tree-id48127 . -1) (undo-tree-id48128 . -1) (undo-tree-id48129 . -1) (undo-tree-id48130 . -1) (undo-tree-id48131 . -1) (undo-tree-id48132 . -1) (undo-tree-id48133 . -1) (undo-tree-id48134 . -1) (undo-tree-id48135 . -1) (undo-tree-id48136 . -1) (undo-tree-id48137 . -1) (undo-tree-id48138 . -1) (undo-tree-id48139 . -1) (undo-tree-id48140 . -1) (undo-tree-id48141 . -1) (undo-tree-id48142 . -1) (undo-tree-id48143 . -1) (undo-tree-id48144 . -1) (undo-tree-id48145 . -1) (undo-tree-id48146 . -1) (undo-tree-id48147 . -1) (undo-tree-id48148 . -1) (undo-tree-id48149 . -1) (undo-tree-id48150 . -1) (undo-tree-id48151 . -1) (undo-tree-id48152 . -1) 10331) nil (25773 35257 808765 251000) 0 nil])
([nil nil ((#("it is very similar to Batch Normalization, but instead of normalizing across the batch dimension, " 0 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 94 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 94 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10333) (undo-tree-id48266 . -97) (undo-tree-id48267 . 98) (undo-tree-id48268 . -97) (undo-tree-id48269 . -97) (undo-tree-id48270 . -98) (undo-tree-id48271 . -97) (undo-tree-id48272 . -87) (undo-tree-id48273 . -87) (undo-tree-id48274 . -87) (undo-tree-id48275 . -87) (undo-tree-id48276 . -87) (undo-tree-id48277 . -87) (undo-tree-id48278 . -87) (undo-tree-id48279 . -87) (undo-tree-id48280 . -87) (undo-tree-id48281 . -87) (undo-tree-id48282 . -87) (undo-tree-id48283 . -87) (undo-tree-id48284 . -87) (undo-tree-id48285 . -87) (undo-tree-id48286 . -87) (undo-tree-id48287 . -87) (undo-tree-id48288 . -87) (undo-tree-id48289 . -87) (undo-tree-id48290 . -87) (undo-tree-id48291 . -87) (undo-tree-id48292 . -87) (undo-tree-id48293 . -87) (undo-tree-id48294 . -95) (undo-tree-id48295 . -95) (undo-tree-id48296 . -95) (undo-tree-id48297 . -95) (undo-tree-id48298 . -95) (undo-tree-id48299 . -95) (undo-tree-id48300 . -95) (undo-tree-id48301 . -95) (undo-tree-id48302 . -95) (undo-tree-id48303 . -95) (undo-tree-id48304 . -95) (undo-tree-id48305 . -95) (undo-tree-id48306 . -95) (undo-tree-id48307 . -95) (undo-tree-id48308 . -95) (undo-tree-id48309 . -95) (undo-tree-id48310 . -95) (undo-tree-id48311 . -95) (undo-tree-id48312 . -95) (undo-tree-id48313 . -95) (undo-tree-id48314 . -95) (undo-tree-id48315 . -95) (undo-tree-id48316 . -96) (undo-tree-id48317 . -96) (undo-tree-id48318 . -96) (undo-tree-id48319 . -96) (undo-tree-id48320 . -96) (undo-tree-id48321 . -96) (undo-tree-id48322 . -96) (undo-tree-id48323 . -96) (undo-tree-id48324 . -96) (undo-tree-id48325 . -96) (undo-tree-id48326 . -96) (undo-tree-id48327 . -96) (undo-tree-id48328 . -96) (undo-tree-id48329 . -96) (undo-tree-id48330 . -96) (undo-tree-id48331 . -96) (undo-tree-id48332 . -96) (undo-tree-id48333 . -96) (undo-tree-id48334 . -96) (undo-tree-id48335 . -96) (undo-tree-id48336 . -96) (undo-tree-id48337 . -96) (undo-tree-id48338 . -98) (undo-tree-id48339 . -98) (undo-tree-id48340 . -98) (undo-tree-id48341 . -98) (undo-tree-id48342 . -98) (undo-tree-id48343 . -98) (undo-tree-id48344 . -98) (undo-tree-id48345 . -98) (undo-tree-id48346 . -98) (undo-tree-id48347 . -98) (undo-tree-id48348 . -98) (undo-tree-id48349 . -98) (undo-tree-id48350 . -98) (undo-tree-id48351 . -98) (undo-tree-id48352 . -98) (undo-tree-id48353 . -98) (undo-tree-id48354 . -98) (undo-tree-id48355 . -98) (undo-tree-id48356 . -98) (undo-tree-id48357 . -98) (undo-tree-id48358 . -98) (undo-tree-id48359 . -98) (undo-tree-id48360 . -98) (undo-tree-id48361 . -98) (undo-tree-id48362 . -98) (undo-tree-id48363 . -98) (undo-tree-id48364 . -98) (undo-tree-id48365 . -98) (undo-tree-id48366 . -98) (undo-tree-id48367 . -97) (undo-tree-id48368 . -97) (undo-tree-id48369 . -97) (undo-tree-id48370 . -97) (undo-tree-id48371 . -97) (undo-tree-id48372 . -97) (undo-tree-id48373 . -97) (undo-tree-id48374 . -97) (undo-tree-id48375 . -97) (undo-tree-id48376 . -97) (undo-tree-id48377 . -97) (undo-tree-id48378 . -97) (undo-tree-id48379 . -97) (undo-tree-id48380 . -97) (undo-tree-id48381 . -97) (undo-tree-id48382 . -97) (undo-tree-id48383 . -97) (undo-tree-id48384 . -97) (undo-tree-id48385 . -97) (undo-tree-id48386 . -97) (undo-tree-id48387 . -97) (undo-tree-id48388 . -97) (undo-tree-id48389 . -97) (undo-tree-id48390 . -98) 10430 (t 25773 35257 883102 333000)) nil (25773 35265 295096 829000) 0 nil])
([nil nil ((10333 . 10334) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10333) (t 25773 35265 371069 929000)) nil (25773 35267 571859 749000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10376) (undo-tree-id48405 . -1) (undo-tree-id48406 . -1) (t 25773 35267 639060 408000)) nil (25773 35278 221249 575000) 0 nil])
([nil nil ((10377 . 10379)) nil (25773 35278 221246 578000) 0 nil])
([nil nil ((10442 . 10443) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10442) (undo-tree-id48391 . -1) (10378 . 10379) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10378) (undo-tree-id48392 . -1) (undo-tree-id48393 . -1) (undo-tree-id48394 . -1) (undo-tree-id48395 . -1) (undo-tree-id48396 . -1) (undo-tree-id48397 . -1) (undo-tree-id48398 . -1) (undo-tree-id48399 . -1) (undo-tree-id48400 . -1) (undo-tree-id48401 . -1) (undo-tree-id48402 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10379) (undo-tree-id48403 . 1) (undo-tree-id48404 . -1) 10378) nil (25773 35278 221242 146000) 0 nil])
([nil nil ((#("One advantage is that " 0 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10379) (undo-tree-id48407 . -21) (undo-tree-id48408 . 22) (undo-tree-id48409 . -21) (undo-tree-id48410 . -21) (undo-tree-id48411 . -22) (undo-tree-id48412 . -21) (undo-tree-id48413 . -2) (undo-tree-id48414 . -2) (undo-tree-id48415 . -2) (undo-tree-id48416 . -2) (undo-tree-id48417 . -2) (undo-tree-id48418 . -2) (undo-tree-id48419 . -2) (undo-tree-id48420 . -2) (undo-tree-id48421 . -2) (undo-tree-id48422 . -2) (undo-tree-id48423 . -2) (undo-tree-id48424 . -2) (undo-tree-id48425 . -2) (undo-tree-id48426 . -2) (undo-tree-id48427 . -2) (undo-tree-id48428 . -2) (undo-tree-id48429 . -2) (undo-tree-id48430 . -2) (undo-tree-id48431 . -2) (undo-tree-id48432 . -2) (undo-tree-id48433 . -2) (undo-tree-id48434 . -2) (undo-tree-id48435 . -12) (undo-tree-id48436 . -12) (undo-tree-id48437 . -12) (undo-tree-id48438 . -12) (undo-tree-id48439 . -12) (undo-tree-id48440 . -12) (undo-tree-id48441 . -12) (undo-tree-id48442 . -12) (undo-tree-id48443 . -12) (undo-tree-id48444 . -12) (undo-tree-id48445 . -12) (undo-tree-id48446 . -12) (undo-tree-id48447 . -12) (undo-tree-id48448 . -12) (undo-tree-id48449 . -12) (undo-tree-id48450 . -12) (undo-tree-id48451 . -12) (undo-tree-id48452 . -12) (undo-tree-id48453 . -12) (undo-tree-id48454 . -12) (undo-tree-id48455 . -12) (undo-tree-id48456 . -12) (undo-tree-id48457 . -15) (undo-tree-id48458 . -15) (undo-tree-id48459 . -15) (undo-tree-id48460 . -15) (undo-tree-id48461 . -15) (undo-tree-id48462 . -15) (undo-tree-id48463 . -15) (undo-tree-id48464 . -15) (undo-tree-id48465 . -15) (undo-tree-id48466 . -15) (undo-tree-id48467 . -15) (undo-tree-id48468 . -15) (undo-tree-id48469 . -15) (undo-tree-id48470 . -15) (undo-tree-id48471 . -15) (undo-tree-id48472 . -15) (undo-tree-id48473 . -15) (undo-tree-id48474 . -15) (undo-tree-id48475 . -15) (undo-tree-id48476 . -15) (undo-tree-id48477 . -15) (undo-tree-id48478 . -15) (undo-tree-id48479 . -15) (undo-tree-id48480 . -15) (undo-tree-id48481 . -15) (undo-tree-id48482 . -15) (undo-tree-id48483 . -15) (undo-tree-id48484 . -15) (undo-tree-id48485 . -15) (undo-tree-id48486 . -15) (undo-tree-id48487 . -15) (undo-tree-id48488 . -15) (undo-tree-id48489 . -15) (undo-tree-id48490 . -15) (undo-tree-id48491 . -15) (undo-tree-id48492 . -15) (undo-tree-id48493 . -20) (undo-tree-id48494 . -20) (undo-tree-id48495 . -20) (undo-tree-id48496 . -20) (undo-tree-id48497 . -20) (undo-tree-id48498 . -20) (undo-tree-id48499 . -20) (undo-tree-id48500 . -20) (undo-tree-id48501 . -20) (undo-tree-id48502 . -20) (undo-tree-id48503 . -20) (undo-tree-id48504 . -20) (undo-tree-id48505 . -20) (undo-tree-id48506 . -20) (undo-tree-id48507 . -20) (undo-tree-id48508 . -20) (undo-tree-id48509 . -20) (undo-tree-id48510 . -20) (undo-tree-id48511 . -20) (undo-tree-id48512 . -20) (undo-tree-id48513 . -20) (undo-tree-id48514 . -20) (undo-tree-id48515 . -21) (undo-tree-id48516 . -21) (undo-tree-id48517 . -21) (undo-tree-id48518 . -21) (undo-tree-id48519 . -21) (undo-tree-id48520 . -21) (undo-tree-id48521 . -21) (undo-tree-id48522 . -21) (undo-tree-id48523 . -21) (undo-tree-id48524 . -21) (undo-tree-id48525 . -21) (undo-tree-id48526 . -21) (undo-tree-id48527 . -21) (undo-tree-id48528 . -21) (undo-tree-id48529 . -21) (undo-tree-id48530 . -21) (undo-tree-id48531 . -21) (undo-tree-id48532 . -21) (undo-tree-id48533 . -21) (undo-tree-id48534 . -21) (undo-tree-id48535 . -21) (undo-tree-id48536 . -21) (undo-tree-id48537 . -21) (undo-tree-id48538 . -22) 10400 (t 25773 35278 295017 468000)) nil (25773 35289 74783 284000) 0 nil])
([nil nil ((10379 . 10380) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10379)) nil (25773 35289 74684 886000) 0 nil])
([nil nil ((#(", independently for each instance. " 0 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10447) (undo-tree-id48988 . -34) (undo-tree-id48989 . -35) (undo-tree-id48990 . -35) (t 25773 35289 146976 742000)) nil (25773 35301 561804 138000) 0 nil])
([nil nil ((10377 . 10450) (#("- 
- It can compute the required statistics on the fly, at each time step" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 46 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 46 47 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 73 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10377) (undo-tree-id48557 . -73) (undo-tree-id48558 . -73) (undo-tree-id48559 . 68) (undo-tree-id48560 . -5) (undo-tree-id48561 . -5) (undo-tree-id48562 . 67) (undo-tree-id48563 . -5) (undo-tree-id48564 . -5) (undo-tree-id48565 . -5) (undo-tree-id48566 . -5) (undo-tree-id48567 . -5) (undo-tree-id48568 . -5) (undo-tree-id48569 . -5) (undo-tree-id48570 . -5) (undo-tree-id48571 . -5) (undo-tree-id48572 . -5) (undo-tree-id48573 . -5) (undo-tree-id48574 . -5) (undo-tree-id48575 . -5) (undo-tree-id48576 . -5) (undo-tree-id48577 . -5) (undo-tree-id48578 . -5) (undo-tree-id48579 . -5) (undo-tree-id48580 . -5) (undo-tree-id48581 . -5) (undo-tree-id48582 . -5) (undo-tree-id48583 . -5) (undo-tree-id48584 . -5) (undo-tree-id48585 . -5) (undo-tree-id48586 . -5) (undo-tree-id48587 . -5) (undo-tree-id48588 . -5) (undo-tree-id48589 . -5) (undo-tree-id48590 . -5) (undo-tree-id48591 . -5) (undo-tree-id48592 . -5) (undo-tree-id48593 . -5) (undo-tree-id48594 . -5) (undo-tree-id48595 . -5) (undo-tree-id48596 . -5) (undo-tree-id48597 . -5) (undo-tree-id48598 . -5) (undo-tree-id48599 . -5) (undo-tree-id48600 . -5) (undo-tree-id48601 . -5) (undo-tree-id48602 . -5) (undo-tree-id48603 . -5) (undo-tree-id48604 . -5) (undo-tree-id48605 . -5) (undo-tree-id48606 . -5) (undo-tree-id48607 . -5) (undo-tree-id48608 . -5) (undo-tree-id48609 . -5) (undo-tree-id48610 . -5) (undo-tree-id48611 . -5) (undo-tree-id48612 . -5) (undo-tree-id48613 . -5) (undo-tree-id48614 . -5) (undo-tree-id48615 . -5) (undo-tree-id48616 . -5) (undo-tree-id48617 . -5) (undo-tree-id48618 . -5) (undo-tree-id48619 . -5) (undo-tree-id48620 . -5) (undo-tree-id48621 . -5) (undo-tree-id48622 . -5) (undo-tree-id48623 . -5) (undo-tree-id48624 . -5) (undo-tree-id48625 . -5) (undo-tree-id48626 . -5) (undo-tree-id48627 . -5) (undo-tree-id48628 . -5) (undo-tree-id48629 . -5) (undo-tree-id48630 . -5) (undo-tree-id48631 . -5) (undo-tree-id48632 . -5) (undo-tree-id48633 . -5) (undo-tree-id48634 . -5) (undo-tree-id48635 . -5) (undo-tree-id48636 . -5) (undo-tree-id48637 . -5) (undo-tree-id48638 . -5) (undo-tree-id48639 . -5) (undo-tree-id48640 . -5) (undo-tree-id48641 . -5) (undo-tree-id48642 . -5) (undo-tree-id48643 . -5) (undo-tree-id48644 . -5) (undo-tree-id48645 . -5) (undo-tree-id48646 . -5) (undo-tree-id48647 . -5) (undo-tree-id48648 . -5) (undo-tree-id48649 . -5) (undo-tree-id48650 . -5) (undo-tree-id48651 . -5) (undo-tree-id48652 . -5) (undo-tree-id48653 . -5) (undo-tree-id48654 . -5) (undo-tree-id48655 . -5) (undo-tree-id48656 . -5) (undo-tree-id48657 . -5) (undo-tree-id48658 . -5) (undo-tree-id48659 . -5) (undo-tree-id48660 . -5) (undo-tree-id48661 . -5) (undo-tree-id48662 . -5) (undo-tree-id48663 . -5) (undo-tree-id48664 . -5) (undo-tree-id48665 . -5) (undo-tree-id48666 . -5) (undo-tree-id48667 . -5) (undo-tree-id48668 . -5) (undo-tree-id48669 . -5) (undo-tree-id48670 . -5) (undo-tree-id48671 . -5) (undo-tree-id48672 . -5) (undo-tree-id48673 . -5) (undo-tree-id48674 . -5) (undo-tree-id48675 . -5) (undo-tree-id48676 . -5) (undo-tree-id48677 . -5) (undo-tree-id48678 . -5) (undo-tree-id48679 . -5) (undo-tree-id48680 . -5) (undo-tree-id48681 . -5) (undo-tree-id48682 . -5) (undo-tree-id48683 . -5) (undo-tree-id48684 . -5) (undo-tree-id48685 . -5) (undo-tree-id48686 . -5) (undo-tree-id48687 . -5) (undo-tree-id48688 . -73) (undo-tree-id48689 . -5) (undo-tree-id48690 . -5) (undo-tree-id48691 . -5) (undo-tree-id48692 . -5) (undo-tree-id48693 . -5) (undo-tree-id48694 . -5) (undo-tree-id48695 . -5) (undo-tree-id48696 . -5) (undo-tree-id48697 . -5) (undo-tree-id48698 . -5) (undo-tree-id48699 . -5) (undo-tree-id48700 . -5) (undo-tree-id48701 . -5) (undo-tree-id48702 . -5) (undo-tree-id48703 . -5) (undo-tree-id48704 . -5) (undo-tree-id48705 . -5) (undo-tree-id48706 . -5) (undo-tree-id48707 . -5) (undo-tree-id48708 . -5) (undo-tree-id48709 . -5) (undo-tree-id48710 . -5) (undo-tree-id48711 . -5) (undo-tree-id48712 . -5) (undo-tree-id48713 . -5) (undo-tree-id48714 . -5) (undo-tree-id48715 . -5) (undo-tree-id48716 . -5) (undo-tree-id48717 . -5) (undo-tree-id48718 . -5) (undo-tree-id48719 . -5) (undo-tree-id48720 . -5) (undo-tree-id48721 . -6) (undo-tree-id48722 . -6) (undo-tree-id48723 . -6) (undo-tree-id48724 . -6) (undo-tree-id48725 . -6) (undo-tree-id48726 . -6) (undo-tree-id48727 . -6) (undo-tree-id48728 . -6) (undo-tree-id48729 . -6) (undo-tree-id48730 . -6) (undo-tree-id48731 . -6) (undo-tree-id48732 . -6) (undo-tree-id48733 . -6) (undo-tree-id48734 . -6) (undo-tree-id48735 . -6) (undo-tree-id48736 . -10) (undo-tree-id48737 . -10) (undo-tree-id48738 . -10) (undo-tree-id48739 . -10) (undo-tree-id48740 . -10) (undo-tree-id48741 . -10) (undo-tree-id48742 . -10) (undo-tree-id48743 . -10) (undo-tree-id48744 . -10) (undo-tree-id48745 . -10) (undo-tree-id48746 . -10) (undo-tree-id48747 . -10) (undo-tree-id48748 . -10) (undo-tree-id48749 . -10) (undo-tree-id48750 . -10) (undo-tree-id48751 . -10) (undo-tree-id48752 . -10) (undo-tree-id48753 . -10) (undo-tree-id48754 . -10) (undo-tree-id48755 . -10) (undo-tree-id48756 . -10) (undo-tree-id48757 . -10) (undo-tree-id48758 . -18) (undo-tree-id48759 . -18) (undo-tree-id48760 . -18) (undo-tree-id48761 . -18) (undo-tree-id48762 . -18) (undo-tree-id48763 . -18) (undo-tree-id48764 . -18) (undo-tree-id48765 . -18) (undo-tree-id48766 . -18) (undo-tree-id48767 . -18) (undo-tree-id48768 . -18) (undo-tree-id48769 . -18) (undo-tree-id48770 . -18) (undo-tree-id48771 . -18) (undo-tree-id48772 . -18) (undo-tree-id48773 . -22) (undo-tree-id48774 . -22) (undo-tree-id48775 . -22) (undo-tree-id48776 . -22) (undo-tree-id48777 . -22) (undo-tree-id48778 . -22) (undo-tree-id48779 . -22) (undo-tree-id48780 . -22) (undo-tree-id48781 . -31) (undo-tree-id48782 . -31) (undo-tree-id48783 . -31) (undo-tree-id48784 . -31) (undo-tree-id48785 . -31) (undo-tree-id48786 . -31) (undo-tree-id48787 . -31) (undo-tree-id48788 . -31) (undo-tree-id48789 . -42) (undo-tree-id48790 . -42) (undo-tree-id48791 . -42) (undo-tree-id48792 . -42) (undo-tree-id48793 . -42) (undo-tree-id48794 . -42) (undo-tree-id48795 . -42) (undo-tree-id48796 . -42) (undo-tree-id48797 . -45) (undo-tree-id48798 . -45) (undo-tree-id48799 . -45) (undo-tree-id48800 . -45) (undo-tree-id48801 . -45) (undo-tree-id48802 . -45) (undo-tree-id48803 . -45) (undo-tree-id48804 . -45) (undo-tree-id48805 . -49) (undo-tree-id48806 . -49) (undo-tree-id48807 . -49) (undo-tree-id48808 . -49) (undo-tree-id48809 . -49) (undo-tree-id48810 . -49) (undo-tree-id48811 . -49) (undo-tree-id48812 . -49) (undo-tree-id48813 . -53) (undo-tree-id48814 . -53) (undo-tree-id48815 . -53) (undo-tree-id48816 . -53) (undo-tree-id48817 . -53) (undo-tree-id48818 . -53) (undo-tree-id48819 . -53) (undo-tree-id48820 . -53) (undo-tree-id48821 . -54) (undo-tree-id48822 . -54) (undo-tree-id48823 . -54) (undo-tree-id48824 . -54) (undo-tree-id48825 . -54) (undo-tree-id48826 . -54) (undo-tree-id48827 . -54) (undo-tree-id48828 . -54) (undo-tree-id48829 . -54) (undo-tree-id48830 . -54) (undo-tree-id48831 . -54) (undo-tree-id48832 . -54) (undo-tree-id48833 . -54) (undo-tree-id48834 . -54) (undo-tree-id48835 . -54) (undo-tree-id48836 . -54) (undo-tree-id48837 . -54) (undo-tree-id48838 . -54) (undo-tree-id48839 . -54) (undo-tree-id48840 . -54) (undo-tree-id48841 . -54) (undo-tree-id48842 . -54) (undo-tree-id48843 . -54) (undo-tree-id48844 . -54) (undo-tree-id48845 . -54) (undo-tree-id48846 . -54) (undo-tree-id48847 . -54) (undo-tree-id48848 . -54) (undo-tree-id48849 . -54) (undo-tree-id48850 . -57) (undo-tree-id48851 . -57) (undo-tree-id48852 . -57) (undo-tree-id48853 . -57) (undo-tree-id48854 . -57) (undo-tree-id48855 . -57) (undo-tree-id48856 . -57) (undo-tree-id48857 . -57) (undo-tree-id48858 . -57) (undo-tree-id48859 . -57) (undo-tree-id48860 . -57) (undo-tree-id48861 . -57) (undo-tree-id48862 . -57) (undo-tree-id48863 . -57) (undo-tree-id48864 . -57) (undo-tree-id48865 . -62) (undo-tree-id48866 . -62) (undo-tree-id48867 . -62) (undo-tree-id48868 . -62) (undo-tree-id48869 . -62) (undo-tree-id48870 . -62) (undo-tree-id48871 . -62) (undo-tree-id48872 . -62) (undo-tree-id48873 . -62) (undo-tree-id48874 . -62) (undo-tree-id48875 . -62) (undo-tree-id48876 . -62) (undo-tree-id48877 . -62) (undo-tree-id48878 . -62) (undo-tree-id48879 . -62) (undo-tree-id48880 . -67) (undo-tree-id48881 . -67) (undo-tree-id48882 . -67) (undo-tree-id48883 . -67) (undo-tree-id48884 . -67) (undo-tree-id48885 . -67) (undo-tree-id48886 . -67) (undo-tree-id48887 . -67) (undo-tree-id48888 . -67) (undo-tree-id48889 . -67) (undo-tree-id48890 . -67) (undo-tree-id48891 . -67) (undo-tree-id48892 . -67) (undo-tree-id48893 . -67) (undo-tree-id48894 . -67) (undo-tree-id48895 . -72) (undo-tree-id48896 . -72) (undo-tree-id48897 . -72) (undo-tree-id48898 . -72) (undo-tree-id48899 . -72) (undo-tree-id48900 . -72) (undo-tree-id48901 . -72) (undo-tree-id48902 . -72) (undo-tree-id48903 . -72) (undo-tree-id48904 . -72) (undo-tree-id48905 . -72) (undo-tree-id48906 . -72) (undo-tree-id48907 . -72) (undo-tree-id48908 . -72) (undo-tree-id48909 . -72) (undo-tree-id48910 . -72) (undo-tree-id48911 . -72) (undo-tree-id48912 . -72) (undo-tree-id48913 . -72) (undo-tree-id48914 . -72) (undo-tree-id48915 . -72) (undo-tree-id48916 . -72) (undo-tree-id48917 . -72) (undo-tree-id48918 . -72) (undo-tree-id48919 . -72) (undo-tree-id48920 . -72) (undo-tree-id48921 . -72) (undo-tree-id48922 . -72) (undo-tree-id48923 . -72) (undo-tree-id48924 . -73) (undo-tree-id48925 . -73) (undo-tree-id48926 . -73) (undo-tree-id48927 . -73) (undo-tree-id48928 . -73) (undo-tree-id48929 . -73) (undo-tree-id48930 . -73) (undo-tree-id48931 . -73) (undo-tree-id48932 . -73) (undo-tree-id48933 . -73) (undo-tree-id48934 . -73) (undo-tree-id48935 . -73) (undo-tree-id48936 . -73) (undo-tree-id48937 . -73) (undo-tree-id48938 . -73) (undo-tree-id48939 . -73) (undo-tree-id48940 . -72) (undo-tree-id48941 . -72) (undo-tree-id48942 . -72) (undo-tree-id48943 . -72) (undo-tree-id48944 . -72) (undo-tree-id48945 . -72) (undo-tree-id48946 . -72) (undo-tree-id48947 . -72) (undo-tree-id48948 . -72) (undo-tree-id48949 . -73) (undo-tree-id48950 . -73) (undo-tree-id48951 . -73) (undo-tree-id48952 . -73) (undo-tree-id48953 . -73) (undo-tree-id48954 . -73) (undo-tree-id48955 . -73) (undo-tree-id48956 . -73) (undo-tree-id48957 . -73) (undo-tree-id48958 . -73) (undo-tree-id48959 . -73) (undo-tree-id48960 . -73) (undo-tree-id48961 . -73) (undo-tree-id48962 . -73) (undo-tree-id48963 . -73) (undo-tree-id48964 . -73) (undo-tree-id48965 . -73) (undo-tree-id48966 . -73) (undo-tree-id48967 . -73) (undo-tree-id48968 . -73) (undo-tree-id48969 . -73) (undo-tree-id48970 . -73) (undo-tree-id48971 . -73) (undo-tree-id48972 . -73) (undo-tree-id48973 . -73) (undo-tree-id48974 . -73) (undo-tree-id48975 . -73) (undo-tree-id48976 . -73) (undo-tree-id48977 . -3) (10377 . 10380) 10447 (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10447) (undo-tree-id48978 . -1) (undo-tree-id48979 . -1) (undo-tree-id48980 . -1) (undo-tree-id48981 . -1) (undo-tree-id48982 . -1) (undo-tree-id48983 . -1) (undo-tree-id48984 . -1) (undo-tree-id48985 . -1) (undo-tree-id48986 . -1) (undo-tree-id48987 . -1) 10448 (10447 . 10448)) nil (25773 35301 561785 515000) 0 nil])
([nil nil ((10591 . 10592) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10591) (undo-tree-id48539 . -1) (10449 . 10450) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10449) (undo-tree-id48540 . 1) (undo-tree-id48541 . 1) (undo-tree-id48542 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 10449) (undo-tree-id48543 . -1) (undo-tree-id48544 . -1) (undo-tree-id48545 . -1) (undo-tree-id48546 . -1) (undo-tree-id48547 . -1) (undo-tree-id48548 . -1) (undo-tree-id48549 . -1) (undo-tree-id48550 . -1) (undo-tree-id48551 . -1) (undo-tree-id48552 . -1) (undo-tree-id48553 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10450) (undo-tree-id48554 . 1) (undo-tree-id48555 . 1) (undo-tree-id48556 . -1) 10449) nil (25773 35301 560582 562000) 0 nil])
([nil nil ((#("- This also means that it behaves the same way during training and testing, and it does not need to use exponential moving averages to estimate the feature statistics across all instances in the training set. 
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 144 210 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10448) (undo-tree-id49008 . -209) (undo-tree-id49009 . 208) (undo-tree-id49010 . 208) (undo-tree-id49011 . -1) (undo-tree-id49012 . -1) (undo-tree-id49013 . -1) (undo-tree-id49014 . -1) (undo-tree-id49015 . -1) (undo-tree-id49016 . -1) (undo-tree-id49017 . -1) (undo-tree-id49018 . -1) (undo-tree-id49019 . -1) (undo-tree-id49020 . -143) (undo-tree-id49021 . -143) (undo-tree-id49022 . -143) (undo-tree-id49023 . -143) (undo-tree-id49024 . -143) (undo-tree-id49025 . -143) (undo-tree-id49026 . -143) (undo-tree-id49027 . -143) (undo-tree-id49028 . -143) (undo-tree-id49029 . -143) (undo-tree-id49030 . -143) (undo-tree-id49031 . -143) (undo-tree-id49032 . -143) (undo-tree-id49033 . -143) (undo-tree-id49034 . -143) (undo-tree-id49035 . -143) (undo-tree-id49036 . -143) (undo-tree-id49037 . -143) (undo-tree-id49038 . -143) (undo-tree-id49039 . -143) (undo-tree-id49040 . -143) (undo-tree-id49041 . -143) (undo-tree-id49042 . -143) (undo-tree-id49043 . -143) (undo-tree-id49044 . -143) (undo-tree-id49045 . -143) (undo-tree-id49046 . -143) (undo-tree-id49047 . -143) (undo-tree-id49048 . -143) (undo-tree-id49049 . -143) (undo-tree-id49050 . -143) (undo-tree-id49051 . -143) (undo-tree-id49052 . -143) (undo-tree-id49053 . -143) (undo-tree-id49054 . -143) (undo-tree-id49055 . -143) (undo-tree-id49056 . -143) (undo-tree-id49057 . -143) (undo-tree-id49058 . -143) (undo-tree-id49059 . -48) (undo-tree-id49060 . -48) (undo-tree-id49061 . -48) (undo-tree-id49062 . -48) (undo-tree-id49063 . -48) (undo-tree-id49064 . -48) (undo-tree-id49065 . -48) (undo-tree-id49066 . -48) (undo-tree-id49067 . -48) (undo-tree-id49068 . -48) (undo-tree-id49069 . -48) (undo-tree-id49070 . -48) (undo-tree-id49071 . -48) (undo-tree-id49072 . -48) (undo-tree-id49073 . -48) (undo-tree-id49074 . -48) (undo-tree-id49075 . -48) (undo-tree-id49076 . -48) (undo-tree-id49077 . -48) (undo-tree-id49078 . -48) (undo-tree-id49079 . -48) (undo-tree-id49080 . -48) (undo-tree-id49081 . -48) (undo-tree-id49082 . -48) (undo-tree-id49083 . -48) (undo-tree-id49084 . -48) (undo-tree-id49085 . -48) (undo-tree-id49086 . -48) (undo-tree-id49087 . -48) (undo-tree-id49088 . -47) (undo-tree-id49089 . -47) (undo-tree-id49090 . -47) (undo-tree-id49091 . -47) (undo-tree-id49092 . -47) (undo-tree-id49093 . -47) (undo-tree-id49094 . -47) (undo-tree-id49095 . -47) (undo-tree-id49096 . -47) (undo-tree-id49097 . -47) (undo-tree-id49098 . -47) (undo-tree-id49099 . -47) (undo-tree-id49100 . -47) (undo-tree-id49101 . -47) (undo-tree-id49102 . -47) (undo-tree-id49103 . -43) (undo-tree-id49104 . -43) (undo-tree-id49105 . -43) (undo-tree-id49106 . -43) (undo-tree-id49107 . -43) (undo-tree-id49108 . -43) (undo-tree-id49109 . -43) (undo-tree-id49110 . -43) (undo-tree-id49111 . -43) (undo-tree-id49112 . -43) (undo-tree-id49113 . -43) (undo-tree-id49114 . -43) (undo-tree-id49115 . -43) (undo-tree-id49116 . -43) (undo-tree-id49117 . -43) (undo-tree-id49118 . -43) (undo-tree-id49119 . -43) (undo-tree-id49120 . -43) (undo-tree-id49121 . -43) (undo-tree-id49122 . -43) (undo-tree-id49123 . -43) (undo-tree-id49124 . -43) (undo-tree-id49125 . -38) (undo-tree-id49126 . -38) (undo-tree-id49127 . -38) (undo-tree-id49128 . -38) (undo-tree-id49129 . -38) (undo-tree-id49130 . -38) (undo-tree-id49131 . -38) (undo-tree-id49132 . -38) (undo-tree-id49133 . -38) (undo-tree-id49134 . -38) (undo-tree-id49135 . -38) (undo-tree-id49136 . -38) (undo-tree-id49137 . -38) (undo-tree-id49138 . -38) (undo-tree-id49139 . -38) (undo-tree-id49140 . -34) (undo-tree-id49141 . -34) (undo-tree-id49142 . -34) (undo-tree-id49143 . -34) (undo-tree-id49144 . -34) (undo-tree-id49145 . -34) (undo-tree-id49146 . -34) (undo-tree-id49147 . -34) (undo-tree-id49148 . -34) (undo-tree-id49149 . -34) (undo-tree-id49150 . -34) (undo-tree-id49151 . -34) (undo-tree-id49152 . -34) (undo-tree-id49153 . -34) (undo-tree-id49154 . -34) (undo-tree-id49155 . -26) (undo-tree-id49156 . -26) (undo-tree-id49157 . -26) (undo-tree-id49158 . -26) (undo-tree-id49159 . -26) (undo-tree-id49160 . -26) (undo-tree-id49161 . -26) (undo-tree-id49162 . -26) (undo-tree-id49163 . -26) (undo-tree-id49164 . -26) (undo-tree-id49165 . -26) (undo-tree-id49166 . -26) (undo-tree-id49167 . -26) (undo-tree-id49168 . -26) (undo-tree-id49169 . -26) (undo-tree-id49170 . -23) (undo-tree-id49171 . -23) (undo-tree-id49172 . -23) (undo-tree-id49173 . -23) (undo-tree-id49174 . -23) (undo-tree-id49175 . -23) (undo-tree-id49176 . -23) (undo-tree-id49177 . -23) (undo-tree-id49178 . -23) (undo-tree-id49179 . -23) (undo-tree-id49180 . -23) (undo-tree-id49181 . -23) (undo-tree-id49182 . -23) (undo-tree-id49183 . -23) (undo-tree-id49184 . -23) (undo-tree-id49185 . -18) (undo-tree-id49186 . -18) (undo-tree-id49187 . -18) (undo-tree-id49188 . -18) (undo-tree-id49189 . -18) (undo-tree-id49190 . -18) (undo-tree-id49191 . -18) (undo-tree-id49192 . -18) (undo-tree-id49193 . -18) (undo-tree-id49194 . -18) (undo-tree-id49195 . -18) (undo-tree-id49196 . -18) (undo-tree-id49197 . -18) (undo-tree-id49198 . -18) (undo-tree-id49199 . -18) (undo-tree-id49200 . -12) (undo-tree-id49201 . -12) (undo-tree-id49202 . -12) (undo-tree-id49203 . -12) (undo-tree-id49204 . -12) (undo-tree-id49205 . -12) (undo-tree-id49206 . -12) (undo-tree-id49207 . -12) (undo-tree-id49208 . -12) (undo-tree-id49209 . -12) (undo-tree-id49210 . -12) (undo-tree-id49211 . -12) (undo-tree-id49212 . -12) (undo-tree-id49213 . -12) (undo-tree-id49214 . -12) (undo-tree-id49215 . -7) (undo-tree-id49216 . -7) (undo-tree-id49217 . -7) (undo-tree-id49218 . -7) (undo-tree-id49219 . -7) (undo-tree-id49220 . -7) (undo-tree-id49221 . -7) (undo-tree-id49222 . -7) (undo-tree-id49223 . -7) (undo-tree-id49224 . -7) (undo-tree-id49225 . -7) (undo-tree-id49226 . -7) (undo-tree-id49227 . -7) (undo-tree-id49228 . -7) (undo-tree-id49229 . -7) (undo-tree-id49230 . -7) (undo-tree-id49231 . -7) (undo-tree-id49232 . -7) (undo-tree-id49233 . -7) (undo-tree-id49234 . -7) (undo-tree-id49235 . -7) (undo-tree-id49236 . -7) (undo-tree-id49237 . -2) (undo-tree-id49238 . -2) (undo-tree-id49239 . -2) (undo-tree-id49240 . -2) (undo-tree-id49241 . -2) (undo-tree-id49242 . -2) (undo-tree-id49243 . -2) (undo-tree-id49244 . -2) (undo-tree-id49245 . -2) (undo-tree-id49246 . -2) (undo-tree-id49247 . -2) (undo-tree-id49248 . -2) (undo-tree-id49249 . -2) (undo-tree-id49250 . -2) (undo-tree-id49251 . -2) (undo-tree-id49252 . -2) (undo-tree-id49253 . -2) (undo-tree-id49254 . -2) (undo-tree-id49255 . -2) (undo-tree-id49256 . -2) (undo-tree-id49257 . -2) (undo-tree-id49258 . -2) (undo-tree-id49259 . -2) (undo-tree-id49260 . -2) (undo-tree-id49261 . -2) (undo-tree-id49262 . -2) (undo-tree-id49263 . -2) (undo-tree-id49264 . -2) (undo-tree-id49265 . -2) (undo-tree-id49266 . -2) (undo-tree-id49267 . -2) (undo-tree-id49268 . -2) (undo-tree-id49269 . -2) (undo-tree-id49270 . -2) (undo-tree-id49271 . -2) (undo-tree-id49272 . -2) (undo-tree-id49273 . -2) (undo-tree-id49274 . -2) (undo-tree-id49275 . -2) (undo-tree-id49276 . -2) (undo-tree-id49277 . -2) (undo-tree-id49278 . -2) (undo-tree-id49279 . -2) (undo-tree-id49280 . -2) (undo-tree-id49281 . -2) (undo-tree-id49282 . -2) (undo-tree-id49283 . -2) (undo-tree-id49284 . -2) (undo-tree-id49285 . -2) (undo-tree-id49286 . -2) (undo-tree-id49287 . -2) (undo-tree-id49288 . -2) (undo-tree-id49289 . -2) (undo-tree-id49290 . -2) (undo-tree-id49291 . -2) (undo-tree-id49292 . -2) (undo-tree-id49293 . -2) (undo-tree-id49294 . -2) (undo-tree-id49295 . -2) (undo-tree-id49296 . -2) (undo-tree-id49297 . -2) (undo-tree-id49298 . -2) (undo-tree-id49299 . -2) (undo-tree-id49300 . -2) (undo-tree-id49301 . -2) (undo-tree-id49302 . -2) (undo-tree-id49303 . -2) (undo-tree-id49304 . -2) (undo-tree-id49305 . -2) (undo-tree-id49306 . -2) (undo-tree-id49307 . -2) (undo-tree-id49308 . -2) (undo-tree-id49309 . -2) (undo-tree-id49310 . -2) (undo-tree-id49311 . -2) (undo-tree-id49312 . -2) (undo-tree-id49313 . -2) (undo-tree-id49314 . -2) (undo-tree-id49315 . -2) (undo-tree-id49316 . -2) (undo-tree-id49317 . -2) (undo-tree-id49318 . -2) (undo-tree-id49319 . -2) (undo-tree-id49320 . -2) (undo-tree-id49321 . -2) (undo-tree-id49322 . -2) (undo-tree-id49323 . -2) (undo-tree-id49324 . -2) (undo-tree-id49325 . -2) (undo-tree-id49326 . -2) (undo-tree-id49327 . -2) (undo-tree-id49328 . -2) (undo-tree-id49329 . -210) 10450 (t 25773 35301 638933 532000)) nil (25773 35323 38203 251000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10448) (undo-tree-id49005 . 1) (undo-tree-id49006 . 1) (undo-tree-id49007 . -1)) nil (25773 35323 37766 320000) 0 nil])
([nil nil ((10448 . 10450)) nil (25773 35323 37763 173000) 0 nil])
([nil nil ((#("Like BN, " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10450) (undo-tree-id48991 . -8) (undo-tree-id48992 . 9) (undo-tree-id48993 . -8) (undo-tree-id48994 . -8) (undo-tree-id48995 . -9) (undo-tree-id48996 . -8) (undo-tree-id48997 . -3) (undo-tree-id48998 . 4) (undo-tree-id48999 . -7) (undo-tree-id49000 . -6) (undo-tree-id49001 . -7) (undo-tree-id49002 . -8) (undo-tree-id49003 . -8) (undo-tree-id49004 . -9) 10458) nil (25773 35323 37759 103000) 0 nil])
([nil nil ((10517 . 10518) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10517) (undo-tree-id49435 . -1) 10450 (t 25773 35323 110868 165000)) nil (25773 35332 799240 775000) 0 nil])
([nil nil ((10448 . 10599) (#("- In an RNN, it is typically used right after the linear combination of the
- Layer Normalization learns a scale and an offset parameter for each input" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 39 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 39 75 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 75 76 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 77 78 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 78 145 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 145 146 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 146 151 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10448) (undo-tree-id49330 . -151) (undo-tree-id49331 . -151) (undo-tree-id49332 . 73) (undo-tree-id49333 . -78) (undo-tree-id49334 . -78) (undo-tree-id49335 . 73) (undo-tree-id49336 . -78) (undo-tree-id49337 . -78) (undo-tree-id49338 . -78) (undo-tree-id49339 . -78) (undo-tree-id49340 . -78) (undo-tree-id49341 . -151) (undo-tree-id49342 . -78) (undo-tree-id49343 . -78) (undo-tree-id49344 . -78) (undo-tree-id49345 . -78) (undo-tree-id49346 . -78) (undo-tree-id49347 . -78) (undo-tree-id49348 . -78) (undo-tree-id49349 . -78) (undo-tree-id49350 . -78) (undo-tree-id49351 . -78) (undo-tree-id49352 . -78) (undo-tree-id49353 . -78) (undo-tree-id49354 . -145) (undo-tree-id49355 . -145) (undo-tree-id49356 . -145) (undo-tree-id49357 . -145) (undo-tree-id49358 . -145) (undo-tree-id49359 . -145) (undo-tree-id49360 . -145) (undo-tree-id49361 . -145) (undo-tree-id49362 . -145) (undo-tree-id49363 . -145) (undo-tree-id49364 . -145) (undo-tree-id49365 . -145) (undo-tree-id49366 . -145) (undo-tree-id49367 . -145) (undo-tree-id49368 . -145) (undo-tree-id49369 . -145) (undo-tree-id49370 . -145) (undo-tree-id49371 . -145) (undo-tree-id49372 . -145) (undo-tree-id49373 . -145) (undo-tree-id49374 . -145) (undo-tree-id49375 . -145) (undo-tree-id49376 . -145) (undo-tree-id49377 . -145) (undo-tree-id49378 . -145) (undo-tree-id49379 . -145) (undo-tree-id49380 . -145) (undo-tree-id49381 . -145) (undo-tree-id49382 . -145) (undo-tree-id49383 . -145) (undo-tree-id49384 . -145) (undo-tree-id49385 . -145) (undo-tree-id49386 . -145) (undo-tree-id49387 . -145) (undo-tree-id49388 . -145) (undo-tree-id49389 . -145) (undo-tree-id49390 . -145) (undo-tree-id49391 . -145) (undo-tree-id49392 . -145) (undo-tree-id49393 . -145) (undo-tree-id49394 . -145) (undo-tree-id49395 . -145) (undo-tree-id49396 . -145) (undo-tree-id49397 . -145) (undo-tree-id49398 . -151) (undo-tree-id49399 . -151) (undo-tree-id49400 . -151) (undo-tree-id49401 . -151) (undo-tree-id49402 . -151) (undo-tree-id49403 . -151) (undo-tree-id49404 . -151) (undo-tree-id49405 . -151) (undo-tree-id49406 . -151) (undo-tree-id49407 . -151) (undo-tree-id49408 . -151) (undo-tree-id49409 . -151) (undo-tree-id49410 . -151) (undo-tree-id49411 . -151) (undo-tree-id49412 . -151) (undo-tree-id49413 . -151) (undo-tree-id49414 . -151) (undo-tree-id49415 . -151) (undo-tree-id49416 . -151) (undo-tree-id49417 . -151) (undo-tree-id49418 . -151) (undo-tree-id49419 . -151) (undo-tree-id49420 . -151) (undo-tree-id49421 . -151) (undo-tree-id49422 . -151) (undo-tree-id49423 . -151) (undo-tree-id49424 . -151) (undo-tree-id49425 . -151) (undo-tree-id49426 . -151) (undo-tree-id49427 . -151) (undo-tree-id49428 . -151) (undo-tree-id49429 . -151) (undo-tree-id49430 . -151) (undo-tree-id49431 . -76) (10448 . 10524) (#(" In an RNN, it is typically used right after the linear combination of the" 0 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 38 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10523) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10523) (undo-tree-id49432 . -1) (undo-tree-id49433 . -1) (undo-tree-id49434 . -1)) nil (25773 35332 799232 73000) 0 nil])
([nil nil ((10599 . 10600) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10599) (undo-tree-id49436 . 1) (undo-tree-id49437 . -1) 10525 (t 25773 35332 874842 67000)) nil (25773 35334 294441 622000) 0 nil])
([nil nil ((#("In an RNN, it is " 0 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10526) (undo-tree-id49440 . -16) (undo-tree-id49441 . 17) (undo-tree-id49442 . -16) (undo-tree-id49443 . -16) (undo-tree-id49444 . -17) (undo-tree-id49445 . -16) (undo-tree-id49446 . -1) (undo-tree-id49447 . -1) (undo-tree-id49448 . -1) (undo-tree-id49449 . -1) (undo-tree-id49450 . -1) (undo-tree-id49451 . -1) (undo-tree-id49452 . -1) (undo-tree-id49453 . -1) (undo-tree-id49454 . -1) (undo-tree-id49455 . -1) (undo-tree-id49456 . -1) (undo-tree-id49457 . -1) (undo-tree-id49458 . -1) (undo-tree-id49459 . -1) (undo-tree-id49460 . -1) (undo-tree-id49461 . -1) (undo-tree-id49462 . -1) (undo-tree-id49463 . -1) (undo-tree-id49464 . -1) (undo-tree-id49465 . -1) (undo-tree-id49466 . -1) (undo-tree-id49467 . -1) (undo-tree-id49468 . -4) (undo-tree-id49469 . -4) (undo-tree-id49470 . -4) (undo-tree-id49471 . -4) (undo-tree-id49472 . -4) (undo-tree-id49473 . -4) (undo-tree-id49474 . -4) (undo-tree-id49475 . -4) (undo-tree-id49476 . -4) (undo-tree-id49477 . -4) (undo-tree-id49478 . -4) (undo-tree-id49479 . -4) (undo-tree-id49480 . -4) (undo-tree-id49481 . -4) (undo-tree-id49482 . -4) (undo-tree-id49483 . -4) (undo-tree-id49484 . -4) (undo-tree-id49485 . -4) (undo-tree-id49486 . -4) (undo-tree-id49487 . -4) (undo-tree-id49488 . -4) (undo-tree-id49489 . -4) (undo-tree-id49490 . 11) (undo-tree-id49491 . -9) (undo-tree-id49492 . -8) (undo-tree-id49493 . -8) (undo-tree-id49494 . -8) (undo-tree-id49495 . -8) (undo-tree-id49496 . -8) (undo-tree-id49497 . -8) (undo-tree-id49498 . -8) (undo-tree-id49499 . -8) (undo-tree-id49500 . -8) (undo-tree-id49501 . -8) (undo-tree-id49502 . -8) (undo-tree-id49503 . -8) (undo-tree-id49504 . -8) (undo-tree-id49505 . -8) (undo-tree-id49506 . -8) (undo-tree-id49507 . -8) (undo-tree-id49508 . -8) (undo-tree-id49509 . -8) (undo-tree-id49510 . -8) (undo-tree-id49511 . -8) (undo-tree-id49512 . -8) (undo-tree-id49513 . -8) (undo-tree-id49514 . -9) (undo-tree-id49515 . -9) (undo-tree-id49516 . -9) (undo-tree-id49517 . -9) (undo-tree-id49518 . -9) (undo-tree-id49519 . -9) (undo-tree-id49520 . -9) (undo-tree-id49521 . -9) (undo-tree-id49522 . -9) (undo-tree-id49523 . -9) (undo-tree-id49524 . -9) (undo-tree-id49525 . -9) (undo-tree-id49526 . -9) (undo-tree-id49527 . -9) (undo-tree-id49528 . -9) (undo-tree-id49529 . -9) (undo-tree-id49530 . -9) (undo-tree-id49531 . -9) (undo-tree-id49532 . -9) (undo-tree-id49533 . -9) (undo-tree-id49534 . -9) (undo-tree-id49535 . -9) (undo-tree-id49536 . -10) (undo-tree-id49537 . -10) (undo-tree-id49538 . -10) (undo-tree-id49539 . -10) (undo-tree-id49540 . -10) (undo-tree-id49541 . -10) (undo-tree-id49542 . -10) (undo-tree-id49543 . -10) (undo-tree-id49544 . -10) (undo-tree-id49545 . -10) (undo-tree-id49546 . -10) (undo-tree-id49547 . -10) (undo-tree-id49548 . -10) (undo-tree-id49549 . -10) (undo-tree-id49550 . -10) (undo-tree-id49551 . -10) (undo-tree-id49552 . -10) (undo-tree-id49553 . -10) (undo-tree-id49554 . -10) (undo-tree-id49555 . -10) (undo-tree-id49556 . -10) (undo-tree-id49557 . -10) (undo-tree-id49558 . -10) (undo-tree-id49559 . -10) (undo-tree-id49560 . -10) (undo-tree-id49561 . -10) (undo-tree-id49562 . -10) (undo-tree-id49563 . -10) (undo-tree-id49564 . -10) (undo-tree-id49565 . -12) (undo-tree-id49566 . -12) (undo-tree-id49567 . -12) (undo-tree-id49568 . -12) (undo-tree-id49569 . -12) (undo-tree-id49570 . -12) (undo-tree-id49571 . -12) (undo-tree-id49572 . -12) (undo-tree-id49573 . -12) (undo-tree-id49574 . -12) (undo-tree-id49575 . -12) (undo-tree-id49576 . -12) (undo-tree-id49577 . -12) (undo-tree-id49578 . -12) (undo-tree-id49579 . -12) (undo-tree-id49580 . -12) (undo-tree-id49581 . -12) (undo-tree-id49582 . -12) (undo-tree-id49583 . -12) (undo-tree-id49584 . -12) (undo-tree-id49585 . -12) (undo-tree-id49586 . -12) (undo-tree-id49587 . -15) (undo-tree-id49588 . -15) (undo-tree-id49589 . -15) (undo-tree-id49590 . -15) (undo-tree-id49591 . -15) (undo-tree-id49592 . -15) (undo-tree-id49593 . -15) (undo-tree-id49594 . -15) (undo-tree-id49595 . -15) (undo-tree-id49596 . -15) (undo-tree-id49597 . -15) (undo-tree-id49598 . -15) (undo-tree-id49599 . -15) (undo-tree-id49600 . -15) (undo-tree-id49601 . -15) (undo-tree-id49602 . -15) (undo-tree-id49603 . -15) (undo-tree-id49604 . -15) (undo-tree-id49605 . -15) (undo-tree-id49606 . -15) (undo-tree-id49607 . -15) (undo-tree-id49608 . -15) (undo-tree-id49609 . -17) (undo-tree-id49610 . -17) (undo-tree-id49611 . -17) (undo-tree-id49612 . -17) (undo-tree-id49613 . -17) (undo-tree-id49614 . -17) (undo-tree-id49615 . -17) (undo-tree-id49616 . -17) (undo-tree-id49617 . -16) (undo-tree-id49618 . -16) (undo-tree-id49619 . -16) (undo-tree-id49620 . -16) (undo-tree-id49621 . -16) (undo-tree-id49622 . -16) (undo-tree-id49623 . -16) (undo-tree-id49624 . -16) (undo-tree-id49625 . -16) (undo-tree-id49626 . -16) (undo-tree-id49627 . -16) (undo-tree-id49628 . -16) (undo-tree-id49629 . -16) (undo-tree-id49630 . -16) (undo-tree-id49631 . -16) (undo-tree-id49632 . -16) (undo-tree-id49633 . -16) (undo-tree-id49634 . -16) (undo-tree-id49635 . -16) (undo-tree-id49636 . -16) (undo-tree-id49637 . -16) (undo-tree-id49638 . -16) (undo-tree-id49639 . -16) (undo-tree-id49640 . -17) 10542 (t 25773 35334 362838 285000)) nil (25773 35356 258885 783000) 0 nil])
([nil nil ((10526 . 10527) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10526)) nil (25773 35356 258310 838000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10611) (undo-tree-id49438 . -1) (undo-tree-id49439 . -1)) nil (25773 35356 258306 779000) 0 nil])
([nil nil ((10613 . 10614) (t 25773 35356 330788 306000)) nil (25773 35362 502754 7000) 0 nil])
([nil nil ((#("-
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10613) (undo-tree-id49652 . -1) (undo-tree-id49653 . 1) (undo-tree-id49654 . -1) (undo-tree-id49655 . -1) (undo-tree-id49656 . -1) (undo-tree-id49657 . -1) (undo-tree-id49658 . -1) (undo-tree-id49659 . -1) (undo-tree-id49660 . -1) (undo-tree-id49661 . -1) (undo-tree-id49662 . -1) (undo-tree-id49663 . -2)) nil (25773 35362 502752 684000) 0 nil])
([nil nil ((#("Let's use tf.keras to implement Layer Normalization within a simple
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10613) (undo-tree-id49649 . -67) (undo-tree-id49650 . 68) (undo-tree-id49651 . -68)) nil (25773 35362 502742 627000) 0 nil])
([nil nil ((#("memory cell. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10613) (undo-tree-id49646 . -13) (undo-tree-id49647 . 14) (undo-tree-id49648 . -14)) nil (25773 35362 502739 861000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10613) (undo-tree-id49644 . 1) (undo-tree-id49645 . -1)) nil (25773 35362 502736 828000) 0 nil])
([nil current ((#("For this, we need to define a custom memory cell. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10613) (undo-tree-id49641 . -50) (undo-tree-id49642 . 51) (undo-tree-id49643 . -51)) nil (25773 35362 502731 811000) 0 nil])
nil
