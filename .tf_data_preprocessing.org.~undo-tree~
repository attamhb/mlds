(undo-tree-save-format-version . 1)
"dd32cad8eecc90f9d9fe9cc38261a5e9cc8f1dcf"
[nil nil nil nil (25756 44899 133004 891000) 0 nil]
([nil nil ((2 . 3) (1 . 2) (t 25756 44830 474068 717000) 1) nil (25756 44899 133003 407000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1715 . 1716) (nil fontified nil 1677 . 1716) (nil fontified nil 1608 . 1677) (nil fontified nil 1532 . 1608) (nil fontified nil 1456 . 1532) (nil fontified nil 1387 . 1456) (nil fontified nil 1314 . 1387) (nil fontified nil 1246 . 1314) (nil fontified nil 1173 . 1246) (nil fontified nil 1097 . 1173) (nil fontified nil 1025 . 1097) (nil fontified nil 955 . 1025) (nil fontified nil 885 . 955) (nil fontified nil 813 . 885) (nil fontified nil 741 . 813) (nil fontified nil 664 . 741) (nil fontified nil 590 . 664) (nil fontified nil 522 . 590) (nil fontified nil 447 . 522) (nil fontified nil 371 . 447) (nil fontified nil 296 . 371) (nil fontified nil 226 . 296) (nil fontified nil 150 . 226) (nil fontified nil 75 . 150) (nil fontified nil 3 . 75) (3 . 1716)) nil (25756 44899 133000 324000) 0 nil])
([nil nil ((1716 . 1717)) nil (25756 44899 132991 358000) 0 nil])
([nil nil ((#("So far we have used only datasets that fit in memory, but Deep Learning
" 0 72 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id2 . -71) (undo-tree-id3 . -72) (t 25756 44899 185348 605000)) nil (25756 44909 290046 976000) 0 nil])
([nil nil ((#("systems are often trained on very large datasets that will not fit in RAM.
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 75 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id0 . -74) (undo-tree-id1 . -75)) nil (25756 44920 305789 207000) 0 nil])
([nil nil ((#("Ingesting a large dataset and preprocessing it efficiently can be tricky to
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 76 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id29 . -75) (undo-tree-id30 . -76) (t 25756 44909 297257 339000)) nil (25756 44931 678621 966000) 0 nil] [nil nil ((#("Ingesting a large dataset and preprocessing it efficiently can be tricky to
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 76 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id4 . -75) (undo-tree-id5 . -76) (t 25756 44909 297257 339000)) ((3 . 79)) (25756 44920 305405 430000) 0 nil])
([nil nil ((#("implement with other Deep Learning libraries" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 44 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id27 . -43) (undo-tree-id28 . -44)) nil (25756 44931 678619 634000) 0 nil])
nil
([nil nil ((#("," 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id25 . -1) (undo-tree-id26 . -1)) nil (25756 44931 678617 355000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . 3) (undo-tree-id23 . -1) (undo-tree-id24 . -1)) nil (25756 44931 678614 818000) 0 nil])
([nil nil ((#("but " 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 4 (line-prefix "" wrap-prefix "" fontified t)) . 3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -4) (undo-tree-id12 . -3) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -2) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -4) 6) nil (25756 44931 678611 374000) 0 nil])
([nil nil ((22 . 23) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -22) (undo-tree-id6 . -1) 3) nil (25756 44931 678596 18000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix "")) . 22) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (t 25756 44931 685067 839000)) nil (25756 44945 45114 436000) 0 nil])
([nil nil ((22 . 23)) nil (25756 44945 45112 237000) 0 nil])
([nil nil ((22 . 23) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -22) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) 3) nil (25756 44945 45109 710000) 0 nil])
([nil nil ((#("makes it easy thanks to the" 0 8 (line-prefix "" wrap-prefix "" fontified t) 8 9 (fontified t line-prefix "" wrap-prefix "") 9 27 (line-prefix "" wrap-prefix "" fontified t)) . 14) (undo-tree-id35 . -26) (undo-tree-id36 . -26) (undo-tree-id37 . 18) (undo-tree-id38 . -26) (undo-tree-id39 . -8) (undo-tree-id40 . -26) (undo-tree-id41 . -8) (undo-tree-id42 . -8) (undo-tree-id43 . -8) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (undo-tree-id53 . -8) (undo-tree-id54 . -8) (undo-tree-id55 . -8) (undo-tree-id56 . -8) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) (undo-tree-id61 . -8) (undo-tree-id62 . -8) (undo-tree-id63 . -8) (undo-tree-id64 . -8) (undo-tree-id65 . -8) (undo-tree-id66 . -8) (undo-tree-id67 . -8) (undo-tree-id68 . -8) (undo-tree-id69 . -8) (undo-tree-id70 . -8) (undo-tree-id71 . -8) (undo-tree-id72 . -8) (undo-tree-id73 . -8) (undo-tree-id74 . -8) (undo-tree-id75 . -8) (undo-tree-id76 . -8) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -8) (undo-tree-id80 . -8) (undo-tree-id81 . -8) (undo-tree-id82 . -8) (undo-tree-id83 . -8) (undo-tree-id84 . -8) (undo-tree-id85 . -8) (undo-tree-id86 . -8) (undo-tree-id87 . -8) (undo-tree-id88 . -8) (undo-tree-id89 . -8) (undo-tree-id90 . -8) (undo-tree-id91 . -8) (undo-tree-id92 . -8) (undo-tree-id93 . -8) (undo-tree-id94 . -8) (undo-tree-id95 . -8) (undo-tree-id96 . -8) (undo-tree-id97 . -8) (undo-tree-id98 . -8) (undo-tree-id99 . -8) (undo-tree-id100 . -8) (undo-tree-id101 . -8) (undo-tree-id102 . -8) (undo-tree-id103 . -8) (undo-tree-id104 . -8) (undo-tree-id105 . -8) (undo-tree-id106 . -8) (undo-tree-id107 . -8) (undo-tree-id108 . -8) (undo-tree-id109 . -8) (undo-tree-id110 . -8) (undo-tree-id111 . -8) (undo-tree-id112 . -8) (undo-tree-id113 . -8) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -8) (undo-tree-id127 . -8) (undo-tree-id128 . -8) (undo-tree-id129 . -8) (undo-tree-id130 . -8) (undo-tree-id131 . -8) (undo-tree-id132 . -8) (undo-tree-id133 . -8) (undo-tree-id134 . -8) (undo-tree-id135 . -8) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (undo-tree-id138 . -8) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -8) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -9) (undo-tree-id180 . -9) (undo-tree-id181 . -9) (undo-tree-id182 . -9) (undo-tree-id183 . -9) (undo-tree-id184 . -9) (undo-tree-id185 . -9) (undo-tree-id186 . -9) (undo-tree-id187 . -9) (undo-tree-id188 . -9) (undo-tree-id189 . -9) (undo-tree-id190 . -14) (undo-tree-id191 . -14) (undo-tree-id192 . -14) (undo-tree-id193 . -14) (undo-tree-id194 . -14) (undo-tree-id195 . -14) (undo-tree-id196 . -14) (undo-tree-id197 . -14) (undo-tree-id198 . -14) (undo-tree-id199 . -14) (undo-tree-id200 . -14) (undo-tree-id201 . -14) (undo-tree-id202 . -14) (undo-tree-id203 . -14) (undo-tree-id204 . -14) (undo-tree-id205 . -14) (undo-tree-id206 . -9) (undo-tree-id207 . -9) (undo-tree-id208 . -9) (undo-tree-id209 . -9) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -9) (undo-tree-id215 . -9) (undo-tree-id216 . -9) (undo-tree-id217 . -6) (undo-tree-id218 . -6) (undo-tree-id219 . -6) (undo-tree-id220 . -6) (undo-tree-id221 . -6) (undo-tree-id222 . -6) (undo-tree-id223 . -6) (undo-tree-id224 . -6) (undo-tree-id225 . -6) (undo-tree-id226 . -6) (undo-tree-id227 . -6) (undo-tree-id228 . -27) (undo-tree-id229 . -26) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -7) (undo-tree-id247 . -7) (undo-tree-id248 . -7) (undo-tree-id249 . -7) (undo-tree-id250 . -7) (undo-tree-id251 . -7) (undo-tree-id252 . -7) (undo-tree-id253 . -7) (undo-tree-id254 . -7) (undo-tree-id255 . -7) (undo-tree-id256 . -7) (undo-tree-id257 . -7) (undo-tree-id258 . -7) (undo-tree-id259 . -7) (undo-tree-id260 . -7) (undo-tree-id261 . -7) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -12) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -12) (undo-tree-id269 . -12) (undo-tree-id270 . -12) (undo-tree-id271 . -12) (undo-tree-id272 . -12) (undo-tree-id273 . -12) (undo-tree-id274 . -12) (undo-tree-id275 . -12) (undo-tree-id276 . -12) (undo-tree-id277 . -12) (undo-tree-id278 . -19) (undo-tree-id279 . -19) (undo-tree-id280 . -19) (undo-tree-id281 . -19) (undo-tree-id282 . -19) (undo-tree-id283 . -19) (undo-tree-id284 . -19) (undo-tree-id285 . -19) (undo-tree-id286 . -19) (undo-tree-id287 . -19) (undo-tree-id288 . -19) (undo-tree-id289 . -19) (undo-tree-id290 . -19) (undo-tree-id291 . -19) (undo-tree-id292 . -19) (undo-tree-id293 . -19) (undo-tree-id294 . -19) (undo-tree-id295 . -19) (undo-tree-id296 . -19) (undo-tree-id297 . -19) (undo-tree-id298 . -19) (undo-tree-id299 . -22) (undo-tree-id300 . -22) (undo-tree-id301 . -22) (undo-tree-id302 . -22) (undo-tree-id303 . -22) (undo-tree-id304 . -22) (undo-tree-id305 . -22) (undo-tree-id306 . -22) (undo-tree-id307 . -22) (undo-tree-id308 . -22) (undo-tree-id309 . -22) (undo-tree-id310 . -22) (undo-tree-id311 . -22) (undo-tree-id312 . -22) (undo-tree-id313 . -22) (undo-tree-id314 . -22) (undo-tree-id315 . -26) (undo-tree-id316 . -26) (undo-tree-id317 . -26) (undo-tree-id318 . -26) (undo-tree-id319 . -26) (undo-tree-id320 . -26) (undo-tree-id321 . -26) (undo-tree-id322 . -26) (undo-tree-id323 . -26) (undo-tree-id324 . -26) (undo-tree-id325 . -26) (undo-tree-id326 . -26) (undo-tree-id327 . -26) (undo-tree-id328 . -26) (undo-tree-id329 . -26) (undo-tree-id330 . -26) (undo-tree-id331 . -26) (undo-tree-id332 . -26) (undo-tree-id333 . -26) (undo-tree-id334 . -26) (undo-tree-id335 . -26) (undo-tree-id336 . -26) (undo-tree-id337 . -27) 40) nil (25756 44945 45071 181000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 14) (undo-tree-id31 . 1) (undo-tree-id32 . 1) (undo-tree-id33 . -1) (undo-tree-id34 . -1)) nil (25756 44945 44674 380000) 0 nil])
([nil nil ((#("you" 0 3 (line-prefix "" wrap-prefix "" fontified t)) . 24) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -3) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) 26 (t 25756 44945 44962 752000)) nil (25756 44963 592378 422000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 24) (undo-tree-id372 . 1) (undo-tree-id373 . 1) (undo-tree-id374 . -1)) nil (25756 44963 592364 929000) 0 nil])
([nil nil ((#("just " 0 5 (line-prefix "" wrap-prefix "" fontified t)) . 24) (undo-tree-id368 . -4) (undo-tree-id369 . 5) (undo-tree-id370 . 5) (undo-tree-id371 . -5)) nil (25756 44963 592361 96000) 0 nil])
([nil nil ((24 . 27)) nil (25756 44963 592348 367000) 0 nil])
([nil nil ((111 . 113)) nil (25756 44963 592343 401000) 0 nil])
([nil nil ((216 . 217) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -216) (undo-tree-id391 . -1) (141 . 142) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -141) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) 140 (t 25756 44963 644826 74000)) nil (25756 44994 834859 662000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -275) (nil fontified nil 274 . 275) (nil wrap-prefix "" 274 . 275) (274 . 275) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -194) (nil fontified nil 193 . 194) (nil wrap-prefix "" 193 . 194) (193 . 194) 216) nil (25756 44994 834807 577000) 0 nil])
([nil nil ((#("seamlessly" 0 10 (line-prefix "" wrap-prefix "" fontified t)) . 259) (undo-tree-id436 . -9) (undo-tree-id437 . -10) (undo-tree-id438 . -10) (t 25756 44994 844620 925000)) nil (25756 45008 285415 293000) 0 nil])
([nil nil ((264 . 265) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -264) (undo-tree-id435 . -1) 258) nil (25756 45008 285406 972000) 0 nil])
([nil nil ((274 . 275) (t 25756 45008 296541 427000) 264) nil (25756 45010 189210 992000) 0 nil])
([nil nil ((#("Off the shelf" 0 13 (line-prefix "" wrap-prefix "" fontified t)) . 276) (undo-tree-id529 . -12) (undo-tree-id530 . -13) (t 25756 45010 196530 618000)) nil (25756 45027 780621 17000) 0 nil])
([nil nil ((#(", " 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 2 (line-prefix "" wrap-prefix "" fontified t)) . 276) (undo-tree-id527 . -1) (undo-tree-id528 . -2)) nil (25756 45027 780618 859000) 0 nil])
([nil nil ((314 . 315) (#("(such as CSV files)" 0 19 (line-prefix "" wrap-prefix "" fontified t)) . 314) (undo-tree-id520 . -18) (undo-tree-id521 . 19) (undo-tree-id522 . -1) (undo-tree-id523 . 1) (undo-tree-id524 . -19) (undo-tree-id525 . -19) (undo-tree-id526 . -19)) nil (25756 45027 780615 151000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 313) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1)) nil (25756 45027 780608 208000) 0 nil])
([nil nil ((#("h" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 313) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1)) nil (25756 45027 780460 426000) 0 nil])
([nil nil ((314 . 315) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -314) (undo-tree-id532 . -1) 313 (t 25756 45027 792435 388000)) nil (25756 45038 243727 914000) 0 nil])
([nil nil ((391 . 392) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -391) (undo-tree-id531 . -1) 390) nil (25756 45038 243722 6000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -435) (nil fontified nil 434 . 435) (nil wrap-prefix "" 434 . 435) (434 . 435) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -357) (nil fontified nil 356 . 357) (nil wrap-prefix "" 356 . 357) (356 . 357) 408 (t 25756 45038 252382 846000)) nil (25756 45049 431725 394000) 0 nil])
([nil nil ((450 . 452)) nil (25756 45049 431716 870000) 0 nil])
([nil nil ((#("TFRecord is a
" 0 14 (line-prefix "" wrap-prefix "" fontified t)) . 452) (undo-tree-id539 . -13) (undo-tree-id540 . 14) (undo-tree-id541 . 14) (undo-tree-id542 . -8) (undo-tree-id543 . -14) (t 25756 45049 488329 701000)) nil (25756 45063 925524 482000) 0 nil])
([nil nil ((#("flexible and efficient binary format based on Protocol Buffers (an open
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 72 (line-prefix "" wrap-prefix "" fontified t)) . 452) (undo-tree-id536 . -71) (undo-tree-id537 . 72) (undo-tree-id538 . -72)) nil (25756 45063 925727 551000) 0 nil])
([nil nil ((#("source binary format)" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 21 (line-prefix "" wrap-prefix "" fontified t)) . 452) (undo-tree-id550 . -20) (undo-tree-id551 . 21) (undo-tree-id552 . -21)) nil (25756 45067 466730 961000) 0 nil] [nil nil ((#("source binary format). The Data API also has support for rea" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 60 (line-prefix "" wrap-prefix "" fontified t)) . 452) (undo-tree-id533 . -59) (undo-tree-id534 . 60) (undo-tree-id535 . -60)) ((452 . 512)) (25756 45063 925513 814000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 452) (undo-tree-id547 . 1) (undo-tree-id548 . -1) (undo-tree-id549 . -1)) nil (25756 45067 466727 359000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . 452) (undo-tree-id544 . 1) (undo-tree-id545 . -1) (undo-tree-id546 . -1)) nil (25756 45067 466718 842000) 0 nil])
([nil nil ((449 . 450) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -449) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#(" " 0 1 (line-prefix "" wrap-prefix "" fontified nil)) . 449) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -450) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) 449 (t 25756 45067 476251 545000)) nil (25756 45075 958804 887000) 0 nil])
([nil nil ((#("Moreover, many open source extensions are available to" 0 52 (line-prefix "" wrap-prefix "" fontified t) 52 54 (line-prefix "" wrap-prefix "" fontified t)) . 512) (undo-tree-id763 . -53) (undo-tree-id764 . -22) (undo-tree-id765 . -22) (undo-tree-id766 . -22) (undo-tree-id767 . -22) (undo-tree-id768 . -22) (undo-tree-id769 . -22) (undo-tree-id770 . -22) (undo-tree-id771 . -22) (undo-tree-id772 . -20) (undo-tree-id773 . -15) (undo-tree-id774 . -10) (undo-tree-id775 . -8) (undo-tree-id776 . -54) (undo-tree-id777 . -54) (t 25756 45075 964217 552000)) nil (25756 45100 309401 244000) 0 nil])
([nil nil ((#("read from all sorts of data sources, such as Google’s BigQuery service.
" 0 72 (line-prefix "" wrap-prefix "" fontified t)) . 513) (undo-tree-id740 . -71) (undo-tree-id741 . -13) (undo-tree-id742 . -13) (undo-tree-id743 . -13) (undo-tree-id744 . -13) (undo-tree-id745 . -13) (undo-tree-id746 . -13) (undo-tree-id747 . -13) (undo-tree-id748 . -13) (undo-tree-id749 . -14) (undo-tree-id750 . -20) (undo-tree-id751 . -23) (undo-tree-id752 . -28) (undo-tree-id753 . -35) (undo-tree-id754 . -37) (undo-tree-id755 . -37) (undo-tree-id756 . -37) (undo-tree-id757 . -37) (undo-tree-id758 . -37) (undo-tree-id759 . -37) (undo-tree-id760 . -37) (undo-tree-id761 . -37) (undo-tree-id762 . -72)) nil (25756 45100 309301 170000) 0 nil])
([nil nil ((511 . 512) (#(" " 0 1 (line-prefix "" wrap-prefix "" fontified nil)) . 511) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -512) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) 497) nil (25756 45100 308644 772000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -578) (nil fontified nil 577 . 578) (nil wrap-prefix "" 577 . 578) (577 . 578) 511 (t 25756 45100 368129 807000)) nil (25756 45110 564145 393000) 0 nil])
([nil nil ((#("Reading huge datasets efficiently is not the only difficulty:" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 61 (line-prefix "" wrap-prefix "" fontified t)) . 512) (undo-tree-id781 . -60) (undo-tree-id782 . -60) (undo-tree-id783 . -60) (undo-tree-id784 . -60) (undo-tree-id785 . -61) (undo-tree-id786 . -60) (undo-tree-id787 . -60) (undo-tree-id788 . -60) (undo-tree-id789 . -61) 572) nil (25756 45110 564143 8000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 512) (undo-tree-id778 . 1) (undo-tree-id779 . -1) (undo-tree-id780 . -1)) nil (25756 45110 564132 346000) 0 nil])
([nil nil ((515 . 516) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -515) (undo-tree-id790 . -1) 512 (t 25756 45110 576097 378000)) nil (25756 45111 874484 971000) 0 nil])
([nil nil ((nil rear-nonsticky nil 747 . 748) (nil fontified nil 278 . 748) (nil fontified nil 277 . 278) (nil fontified nil 3 . 277) (3 . 748) (#("TensorFlow Data API: to create a dataset object, and tell it
where to get the data and how to transform it. 

TensorFlow takes care of all the implementation details, such as multithreading,
queuing, batching, and prefetching. Moreover, the Data API works  with tf.keras!

the Data API can read from text files, binary files with fixed-size records, and
binary files that use TensorFlow’s TFRecord format, which supports records of
varying sizes. The Data API also has support for reading from
SQL databases. the data also
needs to be preprocessed, usually normalized. Moreover, it is not always
composed strictly of convenient numerical fields: there may be text
features, categorical features, and so on. These need to be encoded, for
example using one-hot encoding, bag-of-words encoding, or embeddings
(as we will see, an embedding is a trainable dense vector that represents a
category or token). One option to handle all this preprocessing is to write
your own custom preprocessing layers. Another is to use the standard
preprocessing layers provided by Keras.
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 11 (line-prefix "" wrap-prefix "" fontified t) 11 61 (line-prefix "" wrap-prefix "" fontified t) 61 109 (line-prefix "" wrap-prefix "" fontified t) 109 110 (line-prefix "" wrap-prefix "" fontified t) 110 138 (line-prefix "" wrap-prefix "" fontified t) 138 139 (fontified t line-prefix "" wrap-prefix "") 139 190 (line-prefix "" wrap-prefix "" fontified t) 190 191 (fontified t wrap-prefix "" line-prefix "") 191 192 (line-prefix "" wrap-prefix "" fontified t) 192 195 (line-prefix "" wrap-prefix "" fontified t) 195 213 (line-prefix "" wrap-prefix "" fontified t) 213 214 (fontified t line-prefix "" wrap-prefix "") 214 261 (line-prefix "" wrap-prefix "" fontified t) 261 262 (fontified t line-prefix "" wrap-prefix "") 262 263 (line-prefix "" wrap-prefix "" fontified t) 263 271 (line-prefix "" wrap-prefix "" fontified t) 271 272 (fontified t line-prefix "" wrap-prefix "") 272 273 (line-prefix "" wrap-prefix "" fontified t) 273 274 (line-prefix "" wrap-prefix "" fontified t) 274 311 (line-prefix "" wrap-prefix "" fontified t) 311 312 (fontified t line-prefix "" wrap-prefix "") 312 353 (line-prefix "" wrap-prefix "" fontified t) 353 354 (fontified t wrap-prefix "" line-prefix "") 354 355 (line-prefix "" wrap-prefix "" fontified t) 355 388 (line-prefix "" wrap-prefix "" fontified t) 388 389 (fontified t line-prefix "" wrap-prefix "") 389 431 (line-prefix "" wrap-prefix "" fontified t) 431 432 (fontified t wrap-prefix "" line-prefix "") 432 433 (line-prefix "" wrap-prefix "" fontified t) 433 446 (line-prefix "" wrap-prefix "" fontified t) 446 447 (fontified t line-prefix "" wrap-prefix "") 447 448 (line-prefix "" wrap-prefix "" fontified t) 448 484 (line-prefix "" wrap-prefix "" fontified t) 484 485 (line-prefix "" wrap-prefix "" fontified t) 485 494 (line-prefix "" wrap-prefix "" fontified t) 494 508 (line-prefix "" wrap-prefix "" fontified t) 508 509 (fontified t line-prefix "" wrap-prefix "") 509 512 (line-prefix "" wrap-prefix "" fontified t) 512 513 (fontified t line-prefix "" wrap-prefix "") 513 514 (line-prefix "" wrap-prefix "" fontified t) 514 523 (line-prefix "" wrap-prefix "" fontified t) 523 596 (line-prefix "" wrap-prefix "" fontified t) 596 664 (line-prefix "" wrap-prefix "" fontified t) 664 737 (line-prefix "" wrap-prefix "" fontified t) 737 806 (line-prefix "" wrap-prefix "" fontified t) 806 875 (line-prefix "" wrap-prefix "" fontified t) 875 882 (line-prefix "" wrap-prefix "" fontified t) 882 958 (line-prefix "" wrap-prefix "" fontified t) 958 1027 (line-prefix "" wrap-prefix "" fontified t) 1027 1065 (line-prefix "" wrap-prefix "" fontified t) 1065 1066 (line-prefix "" wrap-prefix "" fontified t rear-nonsticky t) 1066 1067 (fontified t line-prefix "" wrap-prefix "")) . 3) (undo-tree-id868 . -1066) (undo-tree-id869 . -1067) (undo-tree-id870 . 620) (undo-tree-id871 . -1066) (undo-tree-id872 . -21) (undo-tree-id873 . -21) (undo-tree-id874 . -21) (undo-tree-id875 . -21) (undo-tree-id876 . -21) (undo-tree-id877 . -21) (undo-tree-id878 . 1034) (undo-tree-id879 . -40) (undo-tree-id880 . 805) (undo-tree-id881 . -264) (undo-tree-id882 . 892) (undo-tree-id883 . -189) (undo-tree-id884 . 853) (undo-tree-id885 . -225) (undo-tree-id886 . 802) (undo-tree-id887 . -270) (undo-tree-id888 . 678) (undo-tree-id889 . -397) (undo-tree-id890 . -512) (undo-tree-id891 . -1067) (undo-tree-id892 . -512) (undo-tree-id893 . -512) (undo-tree-id894 . -512) (undo-tree-id895 . -512) (undo-tree-id896 . -512) (undo-tree-id897 . -512) (undo-tree-id898 . -512) (undo-tree-id899 . -512) (undo-tree-id900 . -512) (undo-tree-id901 . -512) (undo-tree-id902 . -512) (undo-tree-id903 . -513) (undo-tree-id904 . -518) (undo-tree-id905 . -523) (undo-tree-id906 . -523) (undo-tree-id907 . -523) (undo-tree-id908 . -523) (undo-tree-id909 . -523) (undo-tree-id910 . -523) (undo-tree-id911 . -523) (undo-tree-id912 . -523) (undo-tree-id913 . -523) (undo-tree-id914 . -523) (undo-tree-id915 . -523) (undo-tree-id916 . -523) (undo-tree-id917 . -523) (undo-tree-id918 . -523) (undo-tree-id919 . -523) (undo-tree-id920 . -494) (undo-tree-id921 . -494) (undo-tree-id922 . -494) (undo-tree-id923 . -494) (undo-tree-id924 . -494) (undo-tree-id925 . -494) (undo-tree-id926 . -494) (undo-tree-id927 . -494) (undo-tree-id928 . -432) (undo-tree-id929 . -432) (undo-tree-id930 . -432) (undo-tree-id931 . -432) (undo-tree-id932 . -432) (undo-tree-id933 . -432) (undo-tree-id934 . -432) (undo-tree-id935 . -432) (undo-tree-id936 . -354) (undo-tree-id937 . -354) (undo-tree-id938 . -354) (undo-tree-id939 . -354) (undo-tree-id940 . -354) (undo-tree-id941 . -354) (undo-tree-id942 . -354) (undo-tree-id943 . -354) (undo-tree-id944 . -273) (undo-tree-id945 . -273) (undo-tree-id946 . -273) (undo-tree-id947 . -273) (undo-tree-id948 . -273) (undo-tree-id949 . -273) (undo-tree-id950 . -273) (undo-tree-id951 . -273) (undo-tree-id952 . -272) (undo-tree-id953 . -272) (undo-tree-id954 . -272) (undo-tree-id955 . -272) (undo-tree-id956 . -272) (undo-tree-id957 . -272) (undo-tree-id958 . -272) (undo-tree-id959 . -272) (undo-tree-id960 . -191) (undo-tree-id961 . -191) (undo-tree-id962 . -191) (undo-tree-id963 . -191) (undo-tree-id964 . -191) (undo-tree-id965 . -191) (undo-tree-id966 . -191) (undo-tree-id967 . -191) (undo-tree-id968 . -110) (undo-tree-id969 . -110) (undo-tree-id970 . -110) (undo-tree-id971 . -110) (undo-tree-id972 . -110) (undo-tree-id973 . -110) (undo-tree-id974 . -110) (undo-tree-id975 . -110) (undo-tree-id976 . -109) (undo-tree-id977 . -109) (undo-tree-id978 . -109) (undo-tree-id979 . -109) (undo-tree-id980 . -109) (undo-tree-id981 . -109) (undo-tree-id982 . -109) (undo-tree-id983 . -109) (undo-tree-id984 . -61) (undo-tree-id985 . -61) (undo-tree-id986 . -61) (undo-tree-id987 . -61) (undo-tree-id988 . -61) (undo-tree-id989 . -61) (undo-tree-id990 . -61) (undo-tree-id991 . -61) (undo-tree-id992 . -61) (undo-tree-id993 . -61) (undo-tree-id994 . -61) (undo-tree-id995 . -61) (undo-tree-id996 . -61) (undo-tree-id997 . -61) (undo-tree-id998 . -61) (undo-tree-id999 . -61) (undo-tree-id1000 . -109) (undo-tree-id1001 . -109) (undo-tree-id1002 . -109) (undo-tree-id1003 . -109) (undo-tree-id1004 . -109) (undo-tree-id1005 . -109) (undo-tree-id1006 . -109) (undo-tree-id1007 . -109) (undo-tree-id1008 . -110) (undo-tree-id1009 . -110) (undo-tree-id1010 . -110) (undo-tree-id1011 . -110) (undo-tree-id1012 . -110) (undo-tree-id1013 . -110) (undo-tree-id1014 . -110) (undo-tree-id1015 . -110) (undo-tree-id1016 . -191) (undo-tree-id1017 . -191) (undo-tree-id1018 . -191) (undo-tree-id1019 . -191) (undo-tree-id1020 . -191) (undo-tree-id1021 . -191) (undo-tree-id1022 . -191) (undo-tree-id1023 . -191) (undo-tree-id1024 . -272) (undo-tree-id1025 . -272) (undo-tree-id1026 . -272) (undo-tree-id1027 . -272) (undo-tree-id1028 . -272) (undo-tree-id1029 . -272) (undo-tree-id1030 . -272) (undo-tree-id1031 . -272) (undo-tree-id1032 . -273) (undo-tree-id1033 . -273) (undo-tree-id1034 . -273) (undo-tree-id1035 . -273) (undo-tree-id1036 . -273) (undo-tree-id1037 . -273) (undo-tree-id1038 . -273) (undo-tree-id1039 . -273) (undo-tree-id1040 . -354) (undo-tree-id1041 . -354) (undo-tree-id1042 . -354) (undo-tree-id1043 . -354) (undo-tree-id1044 . -354) (undo-tree-id1045 . -354) (undo-tree-id1046 . -354) (undo-tree-id1047 . -354) (undo-tree-id1048 . -432) (undo-tree-id1049 . -432) (undo-tree-id1050 . -432) (undo-tree-id1051 . -432) (undo-tree-id1052 . -432) (undo-tree-id1053 . -432) (undo-tree-id1054 . -432) (undo-tree-id1055 . -432) (undo-tree-id1056 . -494) (undo-tree-id1057 . -494) (undo-tree-id1058 . -494) (undo-tree-id1059 . -494) (undo-tree-id1060 . -494) (undo-tree-id1061 . -494) (undo-tree-id1062 . -494) (undo-tree-id1063 . -494) (undo-tree-id1064 . -523) (undo-tree-id1065 . -523) (undo-tree-id1066 . -523) (undo-tree-id1067 . -523) (undo-tree-id1068 . -523) (undo-tree-id1069 . -523) (undo-tree-id1070 . -523) (undo-tree-id1071 . -523) (undo-tree-id1072 . -596) (undo-tree-id1073 . -596) (undo-tree-id1074 . -596) (undo-tree-id1075 . -596) (undo-tree-id1076 . -596) (undo-tree-id1077 . -596) (undo-tree-id1078 . -596) (undo-tree-id1079 . -596) (undo-tree-id1080 . -664) (undo-tree-id1081 . -664) (undo-tree-id1082 . -664) (undo-tree-id1083 . -664) (undo-tree-id1084 . -664) (undo-tree-id1085 . -664) (undo-tree-id1086 . -664) (undo-tree-id1087 . -664) (undo-tree-id1088 . -737) (undo-tree-id1089 . -737) (undo-tree-id1090 . -737) (undo-tree-id1091 . -737) (undo-tree-id1092 . -737) (undo-tree-id1093 . -737) (undo-tree-id1094 . -737) (undo-tree-id1095 . -737) (undo-tree-id1096 . -806) (undo-tree-id1097 . -806) (undo-tree-id1098 . -806) (undo-tree-id1099 . -806) (undo-tree-id1100 . -806) (undo-tree-id1101 . -806) (undo-tree-id1102 . -806) (undo-tree-id1103 . -806) (undo-tree-id1104 . -806) (undo-tree-id1105 . -806) (undo-tree-id1106 . -806) (undo-tree-id1107 . -806) (undo-tree-id1108 . -806) (undo-tree-id1109 . -806) (undo-tree-id1110 . -806) (undo-tree-id1111 . -882) (undo-tree-id1112 . -882) (undo-tree-id1113 . -882) (undo-tree-id1114 . -882) (undo-tree-id1115 . -882) (undo-tree-id1116 . -882) (undo-tree-id1117 . -882) (undo-tree-id1118 . -882) (undo-tree-id1119 . -882) (undo-tree-id1120 . -882) (undo-tree-id1121 . -882) (undo-tree-id1122 . -882) (undo-tree-id1123 . -882) (undo-tree-id1124 . -882) (undo-tree-id1125 . -882) (undo-tree-id1126 . -958) (undo-tree-id1127 . -958) (undo-tree-id1128 . -958) (undo-tree-id1129 . -958) (undo-tree-id1130 . -958) (undo-tree-id1131 . -958) (undo-tree-id1132 . -958) (undo-tree-id1133 . -958) (undo-tree-id1134 . -1027) (undo-tree-id1135 . -1027) (undo-tree-id1136 . -1027) (undo-tree-id1137 . -1027) (undo-tree-id1138 . -1027) (undo-tree-id1139 . -1027) (undo-tree-id1140 . -1027) (undo-tree-id1141 . -1027) (undo-tree-id1142 . 40) (undo-tree-id1143 . -1040) (undo-tree-id1144 . -1067) (undo-tree-id1145 . -1067) (undo-tree-id1146 . 7) (undo-tree-id1147 . -1065) (undo-tree-id1148 . -1067) (undo-tree-id1149 . -1067) (undo-tree-id1150 . -1067) (undo-tree-id1151 . -1067) (undo-tree-id1152 . -1067) (undo-tree-id1153 . -1067) (undo-tree-id1154 . -1067) (undo-tree-id1155 . -1067) (undo-tree-id1156 . -1067) (undo-tree-id1157 . -1067) 1070 (t 25756 45111 880093 411000)) nil (25756 45236 861957 926000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -224) (nil fontified nil 223 . 224) (nil wrap-prefix "" 223 . 224) (223 . 224) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -157) (nil fontified nil 156 . 157) (nil wrap-prefix "" 156 . 157) (156 . 157) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -77) (nil fontified nil 76 . 77) (nil wrap-prefix "" 76 . 77) (76 . 77) 163) nil (25756 45236 861325 183000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -727) (nil fontified nil 726 . 727) (nil wrap-prefix "" 726 . 727) (726 . 727) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -652) (nil fontified nil 651 . 652) (nil wrap-prefix "" 651 . 652) (651 . 652) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -575) (nil fontified nil 574 . 575) (nil wrap-prefix "" 574 . 575) (574 . 575) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -496) (nil fontified nil 495 . 496) (nil wrap-prefix "" 495 . 496) (495 . 496) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -420) (nil fontified nil 419 . 420) (nil wrap-prefix "" 419 . 420) (419 . 420) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -354) (nil fontified nil 353 . 354) (nil wrap-prefix "" 353 . 354) (353 . 354) 278) nil (25756 45236 861321 378000) 0 nil])
([nil nil ((235 . 239) (#("a" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -235) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . -236) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) 237 (235 . 237) (#("." 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 235) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1)) nil (25756 45236 861315 82000) 0 nil])
([nil nil ((#("It" 0 2 (line-prefix "" wrap-prefix "" fontified t)) . 240) (undo-tree-id814 . -1) (undo-tree-id815 . -2) (undo-tree-id816 . -2)) nil (25756 45236 861275 17000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 239) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1)) nil (25756 45236 861269 631000) 0 nil])
([nil nil ((748 . 749)) nil (25756 45236 861123 212000) 0 nil])
([nil nil ((#("(with varying record sizes)" 0 27 (line-prefix "" wrap-prefix "" fontified t)) . 378) (undo-tree-id1170 . -26) (undo-tree-id1171 . -27) 354 (t 25756 45236 863884 147000)) nil (25756 45249 399863 915000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 377) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1)) nil (25756 45249 399857 74000) 0 nil])
([nil nil ((391 . 392) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -391) (undo-tree-id1196 . -1) 377 (t 25756 45249 399880 206000)) nil (25756 45280 864219 361000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -423) (nil fontified nil 422 . 423) (nil wrap-prefix "" 422 . 423) (422 . 423) 403) nil (25756 45280 864216 909000) 0 nil])
([nil nil ((422 . 423) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -422) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) 354) nil (25756 45280 864214 766000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)))) . -423) (nil fontified nil 422 . 423) (nil wrap-prefix "" 422 . 423) (422 . 423)) nil (25756 45280 864160 555000) 0 nil])
([nil nil ((698 . 699) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -698) (undo-tree-id1172 . -1) (623 . 624) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -623) (undo-tree-id1173 . -1) (546 . 547) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -546) (undo-tree-id1174 . -1) (467 . 468) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -467) (undo-tree-id1175 . 1) (undo-tree-id1176 . 1) (undo-tree-id1177 . -1) 423) nil (25756 45280 864158 247000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -656) (nil fontified nil 655 . 656) (nil wrap-prefix "" 655 . 656) (655 . 656) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -578) (nil fontified nil 577 . 578) (nil wrap-prefix "" 577 . 578) (577 . 578) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -503) (nil fontified nil 502 . 503) (nil wrap-prefix "" 502 . 503) (502 . 503) 698) nil (25756 45280 864090 122000) 0 nil])
([nil nil ((616 . 618)) nil (25756 45280 864084 349000) 0 nil])
([nil nil ((657 . 658) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -657) (undo-tree-id1224 . -1) 618 (t 25756 45280 871882 559000)) nil (25756 45301 859615 128000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -692) (nil fontified nil 691 . 692) (nil wrap-prefix "" 691 . 692) (691 . 692) 657) nil (25756 45301 859613 92000) 0 nil])
([nil nil ((461 . 463)) nil (25756 45301 859611 302000) 0 nil])
([nil nil ((579 . 580) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -579) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (504 . 505) (#("
" 0 1 (fontified t wrap-prefix "" line-prefix "")) . -504) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) 463) nil (25756 45301 859608 576000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified nil)) . -540) (nil wrap-prefix "" 539 . 540) (539 . 540) (#(" " 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 617) (undo-tree-id1197 . -1) 579) nil (25756 45301 859577 321000) 0 nil])
([nil nil ((725 . 726) (724 . 725) (t 25756 45301 915893 502000) 724) nil (25756 45393 742755 833000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1543 . 1544) (nil fontified nil 1523 . 1544) (nil fontified nil 1468 . 1523) (nil fontified nil 1399 . 1468) (nil fontified nil 1332 . 1399) (nil fontified nil 1313 . 1332) (nil fontified nil 1270 . 1313) (nil fontified nil 1197 . 1270) (nil fontified nil 1130 . 1197) (nil fontified nil 1056 . 1130) (nil fontified nil 985 . 1056) (nil fontified nil 957 . 985) (nil fontified nil 946 . 957) (nil fontified nil 874 . 946) (nil fontified nil 800 . 874) (nil fontified nil 726 . 800) (726 . 1544)) nil (25756 45393 742754 302000) 0 nil])
([nil nil ((#("In this chapter, we will cover the Data API, the TFRecord format, and how
" 0 74 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2477 . -73) (undo-tree-id2478 . -20) (undo-tree-id2479 . -20) (undo-tree-id2480 . -20) (undo-tree-id2481 . -20) (undo-tree-id2482 . -20) (undo-tree-id2483 . -20) (undo-tree-id2484 . -20) (undo-tree-id2485 . -20) (undo-tree-id2486 . -74) (undo-tree-id2487 . -74) (undo-tree-id2488 . -74) (undo-tree-id2489 . -74) (undo-tree-id2490 . -74) (undo-tree-id2491 . -74) (undo-tree-id2492 . -74) (undo-tree-id2493 . -74) (undo-tree-id2494 . -74)) nil (25756 45393 742750 827000) 0 nil])
([nil nil ((#("to create custom preprocessing layers and use the standard Keras ones. We
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 74 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2459 . -73) (undo-tree-id2460 . -20) (undo-tree-id2461 . -20) (undo-tree-id2462 . -20) (undo-tree-id2463 . -20) (undo-tree-id2464 . -20) (undo-tree-id2465 . -20) (undo-tree-id2466 . -20) (undo-tree-id2467 . -20) (undo-tree-id2468 . -74) (undo-tree-id2469 . -74) (undo-tree-id2470 . -74) (undo-tree-id2471 . -74) (undo-tree-id2472 . -74) (undo-tree-id2473 . -74) (undo-tree-id2474 . -74) (undo-tree-id2475 . -74) (undo-tree-id2476 . -74)) nil (25756 45393 742739 378000) 0 nil])
([nil nil ((#("will also take a quick look at a few related projects from TensorFlow’s
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 72 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2441 . -71) (undo-tree-id2442 . -20) (undo-tree-id2443 . -20) (undo-tree-id2444 . -20) (undo-tree-id2445 . -20) (undo-tree-id2446 . -20) (undo-tree-id2447 . -20) (undo-tree-id2448 . -20) (undo-tree-id2449 . -20) (undo-tree-id2450 . -72) (undo-tree-id2451 . -72) (undo-tree-id2452 . -72) (undo-tree-id2453 . -72) (undo-tree-id2454 . -72) (undo-tree-id2455 . -72) (undo-tree-id2456 . -72) (undo-tree-id2457 . -72) (undo-tree-id2458 . -72)) nil (25756 45393 742727 840000) 0 nil])
([nil nil ((#("ecosystem:
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 11 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2423 . -10) (undo-tree-id2424 . -9) (undo-tree-id2425 . -9) (undo-tree-id2426 . -9) (undo-tree-id2427 . -9) (undo-tree-id2428 . -9) (undo-tree-id2429 . -9) (undo-tree-id2430 . -9) (undo-tree-id2431 . -9) (undo-tree-id2432 . -11) (undo-tree-id2433 . -11) (undo-tree-id2434 . -11) (undo-tree-id2435 . -11) (undo-tree-id2436 . -11) (undo-tree-id2437 . -11) (undo-tree-id2438 . -11) (undo-tree-id2439 . -11) (undo-tree-id2440 . -11)) nil (25756 45393 742717 20000) 0 nil])
([nil nil ((#("TF Transform (tf.Transform)
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 28 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2403 . -27) (undo-tree-id2404 . -20) (undo-tree-id2405 . -20) (undo-tree-id2406 . -20) (undo-tree-id2407 . -20) (undo-tree-id2408 . -20) (undo-tree-id2409 . -20) (undo-tree-id2410 . -20) (undo-tree-id2411 . -20) (undo-tree-id2412 . -28) (undo-tree-id2413 . -28) (undo-tree-id2414 . -28) (undo-tree-id2415 . -28) (undo-tree-id2416 . -28) (undo-tree-id2417 . -28) (undo-tree-id2418 . -28) (undo-tree-id2419 . -28) (undo-tree-id2420 . 28) (undo-tree-id2421 . -2) (undo-tree-id2422 . -28)) nil (25756 45393 742705 942000) 0 nil])
([nil nil ((#("Makes it possible to write a single preprocessing function that can be
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 71 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2385 . -70) (undo-tree-id2386 . -20) (undo-tree-id2387 . -20) (undo-tree-id2388 . -20) (undo-tree-id2389 . -20) (undo-tree-id2390 . -20) (undo-tree-id2391 . -20) (undo-tree-id2392 . -20) (undo-tree-id2393 . -20) (undo-tree-id2394 . -71) (undo-tree-id2395 . -71) (undo-tree-id2396 . -71) (undo-tree-id2397 . -71) (undo-tree-id2398 . -71) (undo-tree-id2399 . -71) (undo-tree-id2400 . -71) (undo-tree-id2401 . -71) (undo-tree-id2402 . -71)) nil (25756 45393 742694 45000) 0 nil])
([nil nil ((#("run in batch mode on your full training set, before training (to speed it
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 74 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2367 . -73) (undo-tree-id2368 . -20) (undo-tree-id2369 . -20) (undo-tree-id2370 . -20) (undo-tree-id2371 . -20) (undo-tree-id2372 . -20) (undo-tree-id2373 . -20) (undo-tree-id2374 . -20) (undo-tree-id2375 . -20) (undo-tree-id2376 . -74) (undo-tree-id2377 . -74) (undo-tree-id2378 . -74) (undo-tree-id2379 . -74) (undo-tree-id2380 . -74) (undo-tree-id2381 . -74) (undo-tree-id2382 . -74) (undo-tree-id2383 . -74) (undo-tree-id2384 . -74)) nil (25756 45393 742682 937000) 0 nil])
([nil nil ((#("up), and then exported to a TF Function and incorporated into your
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 67 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2349 . -66) (undo-tree-id2350 . -20) (undo-tree-id2351 . -20) (undo-tree-id2352 . -20) (undo-tree-id2353 . -20) (undo-tree-id2354 . -20) (undo-tree-id2355 . -20) (undo-tree-id2356 . -20) (undo-tree-id2357 . -20) (undo-tree-id2358 . -67) (undo-tree-id2359 . -67) (undo-tree-id2360 . -67) (undo-tree-id2361 . -67) (undo-tree-id2362 . -67) (undo-tree-id2363 . -67) (undo-tree-id2364 . -67) (undo-tree-id2365 . -67) (undo-tree-id2366 . -67)) nil (25756 45393 742671 927000) 0 nil])
([nil nil ((#("trained model so that once it is deployed in production it can take care
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 29 (line-prefix "" wrap-prefix "" fontified t) 29 73 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2331 . -72) (undo-tree-id2332 . -20) (undo-tree-id2333 . -20) (undo-tree-id2334 . -20) (undo-tree-id2335 . -20) (undo-tree-id2336 . -20) (undo-tree-id2337 . -20) (undo-tree-id2338 . -20) (undo-tree-id2339 . -20) (undo-tree-id2340 . -73) (undo-tree-id2341 . -73) (undo-tree-id2342 . -73) (undo-tree-id2343 . -73) (undo-tree-id2344 . -73) (undo-tree-id2345 . -73) (undo-tree-id2346 . -73) (undo-tree-id2347 . -73) (undo-tree-id2348 . -73)) nil (25756 45393 742660 915000) 0 nil])
([nil nil ((#("of preprocessing new instances on the fly.
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 43 (line-prefix "" wrap-prefix "" fontified t)) . 726) (undo-tree-id2313 . -42) (undo-tree-id2314 . -20) (undo-tree-id2315 . -20) (undo-tree-id2316 . -20) (undo-tree-id2317 . -20) (undo-tree-id2318 . -20) (undo-tree-id2319 . -20) (undo-tree-id2320 . -20) (undo-tree-id2321 . -20) (undo-tree-id2322 . -43) (undo-tree-id2323 . -43) (undo-tree-id2324 . -43) (undo-tree-id2325 . -43) (undo-tree-id2326 . -43) (undo-tree-id2327 . -43) (undo-tree-id2328 . -43) (undo-tree-id2329 . -43) (undo-tree-id2330 . -43)) nil (25756 45393 742650 127000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1533 . 1534) (nil fontified nil 1506 . 1534) (nil fontified nil 1505 . 1506) (nil fontified nil 1288 . 1505) (nil fontified nil 1287 . 1288) (nil fontified nil 946 . 1287) (nil fontified nil 945 . 946) (nil fontified nil 725 . 945) (725 . 1534) (#("
TF Datasets (TFDS)
Provides a convenient function to download many common datasets of
all kinds, including large ones like ImageNet, as well as convenient
dataset objects to manipulate them using the Data API.
So let’s get started!" 0 1 (fontified t line-prefix "" wrap-prefix "") 1 2 (line-prefix "" wrap-prefix "" fontified t) 2 20 (line-prefix "" wrap-prefix "" fontified t) 20 87 (line-prefix "" wrap-prefix "" fontified t) 87 156 (line-prefix "" wrap-prefix "" fontified t) 156 211 (line-prefix "" wrap-prefix "" fontified t) 211 231 (line-prefix "" wrap-prefix "" fontified t) 231 232 (line-prefix "" wrap-prefix "" fontified t rear-nonsticky t)) . 725) (undo-tree-id1225 . -1) (undo-tree-id1226 . -231) (undo-tree-id1227 . -232) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -231) (undo-tree-id1258 . -231) (undo-tree-id1259 . -231) (undo-tree-id1260 . -231) (undo-tree-id1261 . -231) (undo-tree-id1262 . -231) (undo-tree-id1263 . -231) (undo-tree-id1264 . -231) (undo-tree-id1265 . -231) (undo-tree-id1266 . -231) (undo-tree-id1267 . -231) (undo-tree-id1268 . -231) (undo-tree-id1269 . -231) (undo-tree-id1270 . -231) (undo-tree-id1271 . -231) (undo-tree-id1272 . -231) (undo-tree-id1273 . -231) (undo-tree-id1274 . -231) (undo-tree-id1275 . -231) (undo-tree-id1276 . -231) (undo-tree-id1277 . -231) (undo-tree-id1278 . -231) (undo-tree-id1279 . -231) (undo-tree-id1280 . -231) (undo-tree-id1281 . -231) (undo-tree-id1282 . -231) (undo-tree-id1283 . -231) (undo-tree-id1284 . -231) (undo-tree-id1285 . -231) (undo-tree-id1286 . -231) (undo-tree-id1287 . -231) (undo-tree-id1288 . -231) (undo-tree-id1289 . -231) (undo-tree-id1290 . -231) (undo-tree-id1291 . -231) (undo-tree-id1292 . -231) (undo-tree-id1293 . -231) (undo-tree-id1294 . -231) (undo-tree-id1295 . -231) (undo-tree-id1296 . -231) (undo-tree-id1297 . -231) (undo-tree-id1298 . -231) (undo-tree-id1299 . -231) (undo-tree-id1300 . -231) (undo-tree-id1301 . -231) (undo-tree-id1302 . -231) (undo-tree-id1303 . -231) (undo-tree-id1304 . -231) (undo-tree-id1305 . -231) (undo-tree-id1306 . -231) (undo-tree-id1307 . -231) (undo-tree-id1308 . -231) (undo-tree-id1309 . -231) (undo-tree-id1310 . -231) (undo-tree-id1311 . -231) (undo-tree-id1312 . -231) (undo-tree-id1313 . -231) (undo-tree-id1314 . -231) (undo-tree-id1315 . -231) (undo-tree-id1316 . -231) (undo-tree-id1317 . -231) (undo-tree-id1318 . -231) (undo-tree-id1319 . -231) (undo-tree-id1320 . -231) (undo-tree-id1321 . -231) (undo-tree-id1322 . -231) (undo-tree-id1323 . -231) (undo-tree-id1324 . -231) (undo-tree-id1325 . -231) (undo-tree-id1326 . -231) (undo-tree-id1327 . -231) (undo-tree-id1328 . -231) (undo-tree-id1329 . -231) (undo-tree-id1330 . -231) (undo-tree-id1331 . -231) (undo-tree-id1332 . -231) (undo-tree-id1333 . -231) (undo-tree-id1334 . -231) (undo-tree-id1335 . -231) (undo-tree-id1336 . -231) (undo-tree-id1337 . -231) (undo-tree-id1338 . -231) (undo-tree-id1339 . -231) (undo-tree-id1340 . -231) (undo-tree-id1341 . -231) (undo-tree-id1342 . -231) (undo-tree-id1343 . -231) (undo-tree-id1344 . -231) (undo-tree-id1345 . -231) (undo-tree-id1346 . -231) (undo-tree-id1347 . -231) (undo-tree-id1348 . -231) (undo-tree-id1349 . -231) (undo-tree-id1350 . -231) (undo-tree-id1351 . -231) (undo-tree-id1352 . -231) (undo-tree-id1353 . -231) (undo-tree-id1354 . -231) (undo-tree-id1355 . -231) (undo-tree-id1356 . -231) (undo-tree-id1357 . -231) (undo-tree-id1358 . -231) (undo-tree-id1359 . -231) (undo-tree-id1360 . -231) (undo-tree-id1361 . -231) (undo-tree-id1362 . -231) (undo-tree-id1363 . -231) (undo-tree-id1364 . -231) (undo-tree-id1365 . -231) (undo-tree-id1366 . -231) (undo-tree-id1367 . -231) (undo-tree-id1368 . -231) (undo-tree-id1369 . -231) (undo-tree-id1370 . -231) (undo-tree-id1371 . -231) (undo-tree-id1372 . -231) (undo-tree-id1373 . -231) (undo-tree-id1374 . -231) (undo-tree-id1375 . -231) (undo-tree-id1376 . -231) (undo-tree-id1377 . -231) (undo-tree-id1378 . -231) (undo-tree-id1379 . -231) (undo-tree-id1380 . -231) (undo-tree-id1381 . -231) (undo-tree-id1382 . -231) (undo-tree-id1383 . -231) (undo-tree-id1384 . -231) (undo-tree-id1385 . -231) (undo-tree-id1386 . -231) (undo-tree-id1387 . -231) (undo-tree-id1388 . -231) (undo-tree-id1389 . -231) (undo-tree-id1390 . -231) (undo-tree-id1391 . -231) (undo-tree-id1392 . -231) (undo-tree-id1393 . -231) (undo-tree-id1394 . -231) (undo-tree-id1395 . -231) (undo-tree-id1396 . -231) (undo-tree-id1397 . -231) (undo-tree-id1398 . -231) (undo-tree-id1399 . -231) (undo-tree-id1400 . -231) (undo-tree-id1401 . -231) (undo-tree-id1402 . -231) (undo-tree-id1403 . -231) (undo-tree-id1404 . -231) (undo-tree-id1405 . -231) (undo-tree-id1406 . -231) (undo-tree-id1407 . -231) (undo-tree-id1408 . -231) (undo-tree-id1409 . -231) (undo-tree-id1410 . -231) (undo-tree-id1411 . -231) (undo-tree-id1412 . -231) (undo-tree-id1413 . -231) (undo-tree-id1414 . -231) (undo-tree-id1415 . -231) (undo-tree-id1416 . -231) (undo-tree-id1417 . -231) (undo-tree-id1418 . -231) (undo-tree-id1419 . -231) (undo-tree-id1420 . -231) (undo-tree-id1421 . -231) (undo-tree-id1422 . -231) (undo-tree-id1423 . -231) (undo-tree-id1424 . -231) (undo-tree-id1425 . -231) (undo-tree-id1426 . -231) (undo-tree-id1427 . -231) (undo-tree-id1428 . -231) (undo-tree-id1429 . -231) (undo-tree-id1430 . -231) (undo-tree-id1431 . -231) (undo-tree-id1432 . -231) (undo-tree-id1433 . -231) (undo-tree-id1434 . -231) (undo-tree-id1435 . -231) (undo-tree-id1436 . -231) (undo-tree-id1437 . -231) (undo-tree-id1438 . -231) (undo-tree-id1439 . -231) (undo-tree-id1440 . -231) (undo-tree-id1441 . -231) (undo-tree-id1442 . -231) (undo-tree-id1443 . -231) (undo-tree-id1444 . -231) (undo-tree-id1445 . -231) (undo-tree-id1446 . -231) (undo-tree-id1447 . -231) (undo-tree-id1448 . -231) (undo-tree-id1449 . -231) (undo-tree-id1450 . -231) (undo-tree-id1451 . -231) (undo-tree-id1452 . -231) (undo-tree-id1453 . -231) (undo-tree-id1454 . -231) (undo-tree-id1455 . -231) (undo-tree-id1456 . -231) (undo-tree-id1457 . -231) (undo-tree-id1458 . -231) (undo-tree-id1459 . -231) (undo-tree-id1460 . -231) (undo-tree-id1461 . -231) (undo-tree-id1462 . -231) (undo-tree-id1463 . -231) (undo-tree-id1464 . -231) (undo-tree-id1465 . -231) (undo-tree-id1466 . -231) (undo-tree-id1467 . -231) (undo-tree-id1468 . -231) (undo-tree-id1469 . -231) (undo-tree-id1470 . -231) (undo-tree-id1471 . -231) (undo-tree-id1472 . -231) (undo-tree-id1473 . -231) (undo-tree-id1474 . -231) (undo-tree-id1475 . -231) (undo-tree-id1476 . -231) (undo-tree-id1477 . -231) (undo-tree-id1478 . -231) (undo-tree-id1479 . -231) (undo-tree-id1480 . -231) (undo-tree-id1481 . -231) (undo-tree-id1482 . -231) (undo-tree-id1483 . -231) (undo-tree-id1484 . -231) (undo-tree-id1485 . -231) (undo-tree-id1486 . -231) (undo-tree-id1487 . -231) (undo-tree-id1488 . -231) (undo-tree-id1489 . -231) (undo-tree-id1490 . -231) (undo-tree-id1491 . -231) (undo-tree-id1492 . -231) (undo-tree-id1493 . -231) (undo-tree-id1494 . -231) (undo-tree-id1495 . -231) (undo-tree-id1496 . -231) (undo-tree-id1497 . -231) (undo-tree-id1498 . -231) (undo-tree-id1499 . -231) (undo-tree-id1500 . -231) (undo-tree-id1501 . -231) (undo-tree-id1502 . -231) (undo-tree-id1503 . -231) (undo-tree-id1504 . -231) (undo-tree-id1505 . -231) (undo-tree-id1506 . -231) (undo-tree-id1507 . -231) (undo-tree-id1508 . -231) (undo-tree-id1509 . -231) (undo-tree-id1510 . -231) (undo-tree-id1511 . -231) (undo-tree-id1512 . -231) (undo-tree-id1513 . -231) (undo-tree-id1514 . -231) (undo-tree-id1515 . -231) (undo-tree-id1516 . -231) (undo-tree-id1517 . -231) (undo-tree-id1518 . -231) (undo-tree-id1519 . -231) (undo-tree-id1520 . -231) (undo-tree-id1521 . -231) (undo-tree-id1522 . -231) (undo-tree-id1523 . -231) (undo-tree-id1524 . -231) (undo-tree-id1525 . -231) (undo-tree-id1526 . -231) (undo-tree-id1527 . -231) (undo-tree-id1528 . -231) (undo-tree-id1529 . -231) (undo-tree-id1530 . -231) (undo-tree-id1531 . -231) (undo-tree-id1532 . -231) (undo-tree-id1533 . -231) (undo-tree-id1534 . -231) (undo-tree-id1535 . -231) (undo-tree-id1536 . -231) (undo-tree-id1537 . -231) (undo-tree-id1538 . -231) (undo-tree-id1539 . -231) (undo-tree-id1540 . -231) (undo-tree-id1541 . -231) (undo-tree-id1542 . -231) (undo-tree-id1543 . -231) (undo-tree-id1544 . -231) (undo-tree-id1545 . -231) (undo-tree-id1546 . -211) (undo-tree-id1547 . -231) (undo-tree-id1548 . -231) (undo-tree-id1549 . -231) (undo-tree-id1550 . -231) (undo-tree-id1551 . -231) (undo-tree-id1552 . -231) (undo-tree-id1553 . -231) (undo-tree-id1554 . -231) (undo-tree-id1555 . -231) (undo-tree-id1556 . -231) (undo-tree-id1557 . -231) (undo-tree-id1558 . -231) (undo-tree-id1559 . -231) (undo-tree-id1560 . -231) (undo-tree-id1561 . -231) (undo-tree-id1562 . -231) (undo-tree-id1563 . -231) (undo-tree-id1564 . -1) (undo-tree-id1565 . -176) (undo-tree-id1566 . -176) (undo-tree-id1567 . -176) (undo-tree-id1568 . -176) (undo-tree-id1569 . -176) (undo-tree-id1570 . -176) (undo-tree-id1571 . -176) (undo-tree-id1572 . -176) (undo-tree-id1573 . -107) (undo-tree-id1574 . -107) (undo-tree-id1575 . -107) (undo-tree-id1576 . -107) (undo-tree-id1577 . -107) (undo-tree-id1578 . -107) (undo-tree-id1579 . -107) (undo-tree-id1580 . -107) (undo-tree-id1581 . -40) (undo-tree-id1582 . -40) (undo-tree-id1583 . -40) (undo-tree-id1584 . -40) (undo-tree-id1585 . -40) (undo-tree-id1586 . -40) (undo-tree-id1587 . -40) (undo-tree-id1588 . -40) (undo-tree-id1589 . -18) (undo-tree-id1590 . -18) (undo-tree-id1591 . -18) (undo-tree-id1592 . -18) (undo-tree-id1593 . -18) (undo-tree-id1594 . -18) (undo-tree-id1595 . -18) (undo-tree-id1596 . -18) (undo-tree-id1597 . 218) (undo-tree-id1598 . -18) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -20) (undo-tree-id1785 . -20) (undo-tree-id1786 . -20) (undo-tree-id1787 . -20) (undo-tree-id1788 . -20) (undo-tree-id1789 . -20) (undo-tree-id1790 . -20) (undo-tree-id1791 . -20) (undo-tree-id1792 . -87) (undo-tree-id1793 . -87) (undo-tree-id1794 . -87) (undo-tree-id1795 . -87) (undo-tree-id1796 . -87) (undo-tree-id1797 . -87) (undo-tree-id1798 . -87) (undo-tree-id1799 . -87) (undo-tree-id1800 . -156) (undo-tree-id1801 . -156) (undo-tree-id1802 . -156) (undo-tree-id1803 . -156) (undo-tree-id1804 . -156) (undo-tree-id1805 . -156) (undo-tree-id1806 . -156) (undo-tree-id1807 . -156) (undo-tree-id1808 . -211) (undo-tree-id1809 . -211) (undo-tree-id1810 . -211) (undo-tree-id1811 . -211) (undo-tree-id1812 . -211) (undo-tree-id1813 . -211) (undo-tree-id1814 . -211) (undo-tree-id1815 . -211) (undo-tree-id1816 . -211) (undo-tree-id1817 . -211) (undo-tree-id1818 . -211) (undo-tree-id1819 . -211) (undo-tree-id1820 . -211) (undo-tree-id1821 . -211) (undo-tree-id1822 . -211) (undo-tree-id1823 . -211) (undo-tree-id1824 . -211) (undo-tree-id1825 . -211) (undo-tree-id1826 . -211) (undo-tree-id1827 . -211) (undo-tree-id1828 . -211) (undo-tree-id1829 . -211) (undo-tree-id1830 . -211) (undo-tree-id1831 . -211) (undo-tree-id1832 . -211) (undo-tree-id1833 . -211) (undo-tree-id1834 . -211) (undo-tree-id1835 . -211) (undo-tree-id1836 . -211) (undo-tree-id1837 . -211) (undo-tree-id1838 . -211) (undo-tree-id1839 . -211) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . 231) (undo-tree-id2139 . -3) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -232) (undo-tree-id2260 . -1) (undo-tree-id2261 . -211) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -20) (undo-tree-id2280 . -20) (undo-tree-id2281 . -20) (undo-tree-id2282 . -20) (undo-tree-id2283 . -20) (undo-tree-id2284 . -20) (undo-tree-id2285 . -20) (undo-tree-id2286 . -20) (undo-tree-id2287 . -87) (undo-tree-id2288 . -87) (undo-tree-id2289 . -87) (undo-tree-id2290 . -87) (undo-tree-id2291 . -87) (undo-tree-id2292 . -87) (undo-tree-id2293 . -87) (undo-tree-id2294 . -87) (undo-tree-id2295 . -156) (undo-tree-id2296 . -156) (undo-tree-id2297 . -156) (undo-tree-id2298 . -156) (undo-tree-id2299 . -156) (undo-tree-id2300 . -156) (undo-tree-id2301 . -156) (undo-tree-id2302 . -156) (undo-tree-id2303 . -211) (undo-tree-id2304 . -211) (undo-tree-id2305 . -211) (undo-tree-id2306 . -211) (undo-tree-id2307 . -211) (undo-tree-id2308 . -211) (undo-tree-id2309 . -211) (undo-tree-id2310 . -232) (undo-tree-id2311 . -232) (undo-tree-id2312 . -232) 957) nil (25756 45393 742606 381000) 0 nil])
([nil nil ((1534 . 1535)) nil (25756 45393 741354 957000) 0 nil])
([nil nil ((#("In this chapter, we'll explore the Data API, TFRecord format, and creating custom preprocessing layers alongside utilizing standard Keras ones. We'll also briefly delve into related projects from TensorFlow's ecosystem:
" 0 220 (line-prefix "" wrap-prefix "" fontified t)) . 725) (undo-tree-id2496 . -219) (undo-tree-id2497 . -220) (t 25756 45393 752021 311000)) nil (25756 45403 398408 319000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -1017) (nil fontified nil 1016 . 1017) (nil wrap-prefix "" 1016 . 1017) (1016 . 1017) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -943) (nil fontified nil 942 . 943) (nil wrap-prefix "" 942 . 943) (942 . 943) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -874) (nil fontified nil 873 . 874) (nil wrap-prefix "" 873 . 874) (873 . 874) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -806) (nil fontified nil 805 . 806) (nil wrap-prefix "" 805 . 806) (805 . 806) 726) nil (25756 45405 598434 623000) 0 nil] [nil nil ((#("
" 0 1 (line-prefix "" wrap-prefix "" fontified t)) . 725) (undo-tree-id2495 . -1)) ((725 . 726)) (25756 45403 398164 341000) 0 nil])
([nil nil ((726 . 727) (t 25756 45405 608046 562000)) nil (25756 45445 660814 558000) 0 nil])
nil
([nil nil ((755 . 756)) nil (25756 45445 660810 464000) 0 nil])
([nil nil ((1070 . 1071) (t 25756 45445 668145 357000)) nil (25756 45452 175445 945000) 0 nil])
([nil nil ((1090 . 1091)) nil (25756 45452 175441 176000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -1229) (nil fontified nil 1228 . 1229) (nil wrap-prefix "" 1228 . 1229) (1228 . 1229) (#(" " 0 1 (line-prefix "" wrap-prefix #(" " 0 1 (face org-indent)) fontified t)) . -1151) (nil fontified nil 1150 . 1151) (nil wrap-prefix "" 1150 . 1151) (1150 . 1151) 1089 (t 25756 45452 184163 318000)) nil (25756 45454 811475 108000) 0 nil])
([nil nil ((#("Let's begin our exploration!
" 0 27 (line-prefix "" wrap-prefix "" fontified t) 27 28 (line-prefix "" wrap-prefix "" fontified t rear-nonsticky t) 28 29 (fontified t line-prefix "" wrap-prefix "")) . 1290) (undo-tree-id2498 . -28) (undo-tree-id2499 . -29) (t 25756 45454 820170 730000)) nil (25756 45476 495711 122000) 0 nil])
([nil nil ((1304 . 1305) (1292 . 1304) (1290 . 1292) (1289 . 1290) (t 25756 45476 508234 833000) 1289) nil (25756 45529 17020 376000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2299 . 2300) (nil fontified nil 2265 . 2300) (nil fontified nil 2259 . 2265) (nil fontified nil 2223 . 2259) (nil fontified nil 2187 . 2223) (nil fontified nil 2151 . 2187) (nil fontified nil 2147 . 2151) (nil fontified nil 2135 . 2147) (nil fontified nil 2131 . 2135) (nil fontified nil 2106 . 2131) (nil fontified nil 2049 . 2106) (nil fontified nil 2022 . 2049) (nil fontified nil 1885 . 2022) (nil fontified nil 1813 . 1885) (nil fontified nil 1750 . 1813) (nil fontified nil 1701 . 1750) (nil fontified nil 1689 . 1701) (nil fontified nil 1637 . 1689) (nil fontified nil 1598 . 1637) (nil fontified nil 1560 . 1598) (nil fontified nil 1521 . 1560) (nil fontified nil 1447 . 1521) (nil fontified nil 1373 . 1447) (nil fontified nil 1305 . 1373) (1305 . 2300)) nil (25756 45529 17018 147000) 0 nil])
([nil nil ((1366 . 1367)) nil (25756 45529 17013 989000) 0 nil])
([nil nil ((1373 . 1374) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1373) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) 1367) nil (25756 45529 17009 215000) 0 nil])
([nil nil ((1560 . 1561) (t 25756 45529 76412 178000) 1530) nil (25756 45602 819488 676000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1600) (undo-tree-id2567 . -3) (undo-tree-id2568 . 4) (undo-tree-id2569 . -1) (undo-tree-id2570 . -4)) nil (25756 45602 819486 935000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1612 1612 nil nil nil nil #s(yas--exit 1630 nil))) #s(yas--exit 1630 nil) 1 nil #s(yas--field 1 1612 1612 nil nil nil nil #s(yas--exit 1630 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1630) (undo-tree-id2548 . -2) (1600 . 1643) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1600) (undo-tree-id2549 . -2) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -2) (undo-tree-id2559 . -2) (undo-tree-id2560 . -2) (undo-tree-id2561 . -2) (undo-tree-id2562 . -2) (undo-tree-id2563 . -2) (undo-tree-id2564 . -2) (undo-tree-id2565 . -2) (undo-tree-id2566 . -2) 1602 (1600 . 1602)) nil (25756 45602 819482 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 1600 1641 #s(yas--snippet nil (#s(yas--field 1 1612 1612 nil nil nil nil #s(yas--exit 1630 nil))) #s(yas--exit 1630 nil) 1 nil #s(yas--field 1 1612 1612 nil nil nil nil #s(yas--exit 1630 nil)) nil nil))) nil (25756 45602 819429 13000) 0 nil])
([nil nil ((#("X = tf.range(10) # any data tensor" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1641) (undo-tree-id2543 . -33) (undo-tree-id2544 . -1) (undo-tree-id2545 . -2) (undo-tree-id2546 . -34) (undo-tree-id2547 . -34)) nil (25756 45602 819427 994000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1662 . 1663) (nil fontified nil 1629 . 1663) (1629 . 1663)) nil (25756 45602 819421 656000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 1664) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1)) nil (25756 45602 819416 624000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 1664) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1)) nil (25756 45602 818989 584000) 0 nil])
([nil nil ((1599 . 1600) (t 25756 45602 828708 663000) 1562) nil (25756 45607 830944 830000) 0 nil])
([nil nil ((1674 . 1675) 1665) nil (25756 45607 830940 167000) 0 nil])
([nil nil ((#("Usually you will" 0 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1431) (undo-tree-id2781 . -15) (undo-tree-id2782 . -12) (undo-tree-id2783 . -12) (undo-tree-id2784 . -12) (undo-tree-id2785 . -12) (undo-tree-id2786 . -12) (undo-tree-id2787 . -12) (undo-tree-id2788 . -12) (undo-tree-id2789 . -12) (undo-tree-id2790 . -12) (undo-tree-id2791 . -12) (undo-tree-id2792 . -12) (undo-tree-id2793 . -12) (undo-tree-id2794 . -12) (undo-tree-id2795 . -12) (undo-tree-id2796 . -12) (undo-tree-id2797 . -6) (undo-tree-id2798 . -16) (undo-tree-id2799 . -16) (t 25756 45607 840730 666000)) nil (25756 45660 908712 877000) 0 nil])
([nil nil ((#("use datasets that gradually read data from disk, but for simplicity let’s
" 0 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1432) (undo-tree-id2771 . -73) (undo-tree-id2772 . -74) (undo-tree-id2773 . -74) (undo-tree-id2774 . -74) (undo-tree-id2775 . -74) (undo-tree-id2776 . -74) (undo-tree-id2777 . -74) (undo-tree-id2778 . -74) (undo-tree-id2779 . -74) (undo-tree-id2780 . -74)) nil (25756 45660 908563 353000) 0 nil])
([nil nil ((#("create a dataset entirely in RAM using
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 38 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1432) (undo-tree-id2761 . -38) (undo-tree-id2762 . -39) (undo-tree-id2763 . -39) (undo-tree-id2764 . -39) (undo-tree-id2765 . -39) (undo-tree-id2766 . -39) (undo-tree-id2767 . -39) (undo-tree-id2768 . -39) (undo-tree-id2769 . -39) (undo-tree-id2770 . -39)) nil (25756 45660 908550 591000) 0 nil])
([nil nil ((#("tf.data.Dataset.from_tensor_slices():
" 0 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 21 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 28 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 34 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1433) (undo-tree-id2739 . -37) (undo-tree-id2740 . 30) (undo-tree-id2741 . -15) (undo-tree-id2742 . -38) (undo-tree-id2743 . -38) (undo-tree-id2744 . -38) (undo-tree-id2745 . -38) (undo-tree-id2746 . -38) (undo-tree-id2747 . -38) (undo-tree-id2748 . -38) (undo-tree-id2749 . -38) (undo-tree-id2750 . -38) (undo-tree-id2751 . -38) (undo-tree-id2752 . -38) (undo-tree-id2753 . -38) (undo-tree-id2754 . -38) (undo-tree-id2755 . -38) (undo-tree-id2756 . -38) (undo-tree-id2757 . -38) (undo-tree-id2758 . 38) (undo-tree-id2759 . -2) (undo-tree-id2760 . -38)) nil (25756 45660 908538 459000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1432) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1)) nil (25756 45660 908507 561000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 1497) (undo-tree-id2652 . -9) (undo-tree-id2653 . -10) (undo-tree-id2654 . -10) (undo-tree-id2655 . -10) (undo-tree-id2656 . -10) (undo-tree-id2657 . -10) (undo-tree-id2658 . -10) (undo-tree-id2659 . -10) (undo-tree-id2660 . -10) (undo-tree-id2661 . -10) (undo-tree-id2662 . -10) (undo-tree-id2663 . -10) (undo-tree-id2664 . -10) (undo-tree-id2665 . -10) (undo-tree-id2666 . -10) (undo-tree-id2667 . -10) (undo-tree-id2668 . -10) (undo-tree-id2669 . -10) (undo-tree-id2670 . -10) (undo-tree-id2671 . -10)) nil (25756 45660 907859 914000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1561 . 1562) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1571) (1561 . 1572) 1550) nil (25756 45660 907845 289000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t src-block t)) . 1498) (undo-tree-id2648 . -3) (undo-tree-id2649 . 4) (undo-tree-id2650 . -1) (undo-tree-id2651 . -4)) nil (25756 45660 907843 846000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t)) . 1546) (undo-tree-id2644 . -3) (undo-tree-id2645 . 4) (undo-tree-id2646 . -1) (undo-tree-id2647 . -4)) nil (25756 45660 907839 762000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t)) . 1497) (undo-tree-id2571 . 1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1)) nil (25756 45660 907790 72000) 0 nil])
([nil nil ((1446 . 1453) (t 25756 45660 920976 950000)) nil (25756 45669 708997 325000) 0 nil])
([nil nil ((#("<TensorSliceDataset shapes: (), types: tf.int32>
" 0 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1570) (undo-tree-id2863 . -48) (undo-tree-id2864 . -44) (undo-tree-id2865 . -44) (undo-tree-id2866 . -44) (undo-tree-id2867 . -44) (undo-tree-id2868 . -44) (undo-tree-id2869 . -44) (undo-tree-id2870 . -44) (undo-tree-id2871 . -44) (undo-tree-id2872 . 49) (undo-tree-id2873 . -1) (undo-tree-id2874 . 2) (undo-tree-id2875 . -48) (undo-tree-id2876 . -49) (t 25756 45669 717020 4000)) nil (25756 45697 972058 875000) 0 nil])
([nil nil ((#("from_tensor_slices()" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 5 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 12 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 18 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1574) (undo-tree-id2844 . -19) (undo-tree-id2845 . -19) (undo-tree-id2846 . -19) (undo-tree-id2847 . -20) (undo-tree-id2848 . -19) (undo-tree-id2849 . -3) (undo-tree-id2850 . -4) (undo-tree-id2851 . -10) (undo-tree-id2852 . -11) (undo-tree-id2853 . -17) (undo-tree-id2854 . -19) (undo-tree-id2855 . -20) (undo-tree-id2856 . 1) (undo-tree-id2857 . -20) (undo-tree-id2858 . 2) (undo-tree-id2859 . -19) (undo-tree-id2860 . -19) (undo-tree-id2861 . -19) (undo-tree-id2862 . -20) 1593) nil (25756 45697 972048 153000) 0 nil])
([nil nil ((1572 . 1574) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1572) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) 1573) nil (25756 45697 972035 335000) 0 nil])
([nil nil ((#("function" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1576) (undo-tree-id2828 . -7) (undo-tree-id2829 . -8) (undo-tree-id2830 . -8)) nil (25756 45697 972025 880000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1575) (undo-tree-id2804 . 1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1)) nil (25756 45697 972021 356000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1575) (undo-tree-id2800 . 1) (undo-tree-id2801 . 1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1)) nil (25756 45697 972000 989000) 0 nil])
([nil nil ((1603 . 1604) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1603) (undo-tree-id2877 . -1) 1575 (t 25756 45697 981162 417000)) nil (25756 45699 887544 162000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -1647) (nil fontified nil 1646 . 1647) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1646 . 1647) (1646 . 1647) 1603 (t 25756 45699 897172 290000)) nil (25756 45710 31690 609000) 0 nil])
([nil nil ((#("(along the first
dimension)" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1659) (undo-tree-id2905 . -26) (undo-tree-id2906 . -16) (undo-tree-id2907 . 10) (undo-tree-id2908 . 11) (undo-tree-id2909 . -27) 1647) nil (25756 45710 31687 954000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1658) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1)) nil (25756 45710 31680 339000) 0 nil])
([nil nil ((1569 . 1570) (t 25756 45710 41225 17000) 1568) nil (25756 45737 129343 913000) 0 nil])
([nil nil ((1694 . 1695) (t 25756 45715 733254 934000)) nil (25756 45775 300030 911000) 0 nil] [nil nil ((#(": tensors 0, 1, 2, …, 9. In thiscase we would have obtained the same dataset if we had used" 0 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1694) (undo-tree-id2910 . -90) (undo-tree-id2911 . -91) (undo-tree-id2912 . -91) (t 25756 45715 733254 934000)) ((1694 . 1785)) (25756 45737 128968 919000) 0 nil])
([nil nil ((#(": tensors 0, 1, 2, …, 9. In thiscase we would have obtained the same dataset if we had used
" 0 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 91 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2972 . -91) (undo-tree-id2973 . 92) (undo-tree-id2974 . -91) (undo-tree-id2975 . -92)) nil (25756 45775 300029 909000) 0 nil])
nil
([nil nil ((#("tf.data.Dataset.range(10).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2966 . -26) (undo-tree-id2967 . 27) (undo-tree-id2968 . 27) (undo-tree-id2969 . 27) (undo-tree-id2970 . -2) (undo-tree-id2971 . -27)) nil (25756 45775 300026 840000) 0 nil])
([nil nil ((#("You can simply iterate over a dataset’s items like this:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2962 . -56) (undo-tree-id2963 . 57) (undo-tree-id2964 . 57) (undo-tree-id2965 . -57)) nil (25756 45775 300020 816000) 0 nil])
([nil nil ((#(">>> for item in dataset:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2954 . -24) (undo-tree-id2955 . 25) (undo-tree-id2956 . 9) (undo-tree-id2957 . -23) (undo-tree-id2958 . 25) (undo-tree-id2959 . 25) (undo-tree-id2960 . -1) (undo-tree-id2961 . -25)) nil (25756 45775 299874 540000) 0 nil])
([nil nil ((#("...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2950 . -3) (undo-tree-id2951 . 4) (undo-tree-id2952 . 4) (undo-tree-id2953 . -4)) nil (25756 45775 299869 37000) 0 nil])
([nil nil ((#("print(item)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2946 . -11) (undo-tree-id2947 . 12) (undo-tree-id2948 . 12) (undo-tree-id2949 . -12)) nil (25756 45775 299866 101000) 0 nil])
([nil nil ((#("...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2942 . -3) (undo-tree-id2943 . 4) (undo-tree-id2944 . 4) (undo-tree-id2945 . -4)) nil (25756 45775 299863 131000) 0 nil])
([nil nil ((#("tf.Tensor(0, shape=(), dtype=int32)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2936 . -35) (undo-tree-id2937 . 36) (undo-tree-id2938 . 36) (undo-tree-id2939 . 36) (undo-tree-id2940 . -2) (undo-tree-id2941 . -36)) nil (25756 45775 299860 25000) 0 nil])
([nil nil ((#("tf.Tensor(1, shape=(), dtype=int32)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2932 . -35) (undo-tree-id2933 . 36) (undo-tree-id2934 . 36) (undo-tree-id2935 . -36)) nil (25756 45775 299855 882000) 0 nil])
([nil nil ((#("tf.Tensor(2, shape=(), dtype=int32)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2928 . -35) (undo-tree-id2929 . 36) (undo-tree-id2930 . 36) (undo-tree-id2931 . -36)) nil (25756 45775 299851 358000) 0 nil])
([nil nil ((#("[...]
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2920 . -5) (undo-tree-id2921 . 6) (undo-tree-id2922 . 6) (undo-tree-id2923 . 6) (undo-tree-id2924 . -1) (undo-tree-id2925 . 2) (undo-tree-id2926 . -5) (undo-tree-id2927 . -6)) nil (25756 45775 299847 405000) 0 nil])
([nil nil ((#("tf.Tensor(9, shape=(), dtype=int32)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id2913 . -35) (undo-tree-id2914 . 36) (undo-tree-id2915 . -36) (undo-tree-id2916 . 36) (undo-tree-id2917 . 36) (undo-tree-id2918 . -2) (undo-tree-id2919 . -36)) nil (25756 45775 299839 160000) 0 nil])
([nil nil ((1695 . 1696) (t 25756 45775 309581 555000)) nil (25756 45794 364638 378000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1940 . 1941) (nil fontified nil 1872 . 1941) (nil fontified nil 1798 . 1872) (nil fontified nil 1721 . 1798) (nil fontified nil 1696 . 1721) (1696 . 1941)) nil (25756 45794 364637 283000) 0 nil])
([nil nil ((1696 . 1698)) nil (25756 45794 364635 356000) 0 nil])
([nil nil ((1943 . 1944)) nil (25756 45794 364630 682000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -8) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) 9 (1 . 9) (t 25756 45794 369690 980000)) nil (25756 45810 691560 125000) 0 nil])
([nil nil ((1730 . 1731) (#("Once you have a dataset, y" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1730) (undo-tree-id3216 . -25) (undo-tree-id3217 . -25) (undo-tree-id3218 . -3) (undo-tree-id3219 . -3) (undo-tree-id3220 . -3) (undo-tree-id3221 . -3) (undo-tree-id3222 . -3) (undo-tree-id3223 . -3) (undo-tree-id3224 . -3) (undo-tree-id3225 . -3) (undo-tree-id3226 . -3) (undo-tree-id3227 . -3) (undo-tree-id3228 . -3) (undo-tree-id3229 . -3) (undo-tree-id3230 . -3) (undo-tree-id3231 . -3) (undo-tree-id3232 . -3) (undo-tree-id3233 . -3) (undo-tree-id3234 . -3) (undo-tree-id3235 . -3) (undo-tree-id3236 . -3) (undo-tree-id3237 . -3) (undo-tree-id3238 . -3) (undo-tree-id3239 . -3) (undo-tree-id3240 . -3) (undo-tree-id3241 . -3) (undo-tree-id3242 . -3) (undo-tree-id3243 . -3) (undo-tree-id3244 . -3) (undo-tree-id3245 . -3) (undo-tree-id3246 . -3) (undo-tree-id3247 . -25) (undo-tree-id3248 . -3) (undo-tree-id3249 . -3) (undo-tree-id3250 . -3) (undo-tree-id3251 . -3) (undo-tree-id3252 . -3) (undo-tree-id3253 . -3) (undo-tree-id3254 . -3) (undo-tree-id3255 . -3) (undo-tree-id3256 . -3) (undo-tree-id3257 . -3) (undo-tree-id3258 . -3) (undo-tree-id3259 . -7) (undo-tree-id3260 . -7) (undo-tree-id3261 . -7) (undo-tree-id3262 . -7) (undo-tree-id3263 . -7) (undo-tree-id3264 . -7) (undo-tree-id3265 . -7) (undo-tree-id3266 . -7) (undo-tree-id3267 . -7) (undo-tree-id3268 . -7) (undo-tree-id3269 . -7) (undo-tree-id3270 . -7) (undo-tree-id3271 . -7) (undo-tree-id3272 . -7) (undo-tree-id3273 . -7) (undo-tree-id3274 . -7) (undo-tree-id3275 . -5) (undo-tree-id3276 . -26) (undo-tree-id3277 . -25) (undo-tree-id3278 . -3) (undo-tree-id3279 . -3) (undo-tree-id3280 . -3) (undo-tree-id3281 . -3) (undo-tree-id3282 . -3) (undo-tree-id3283 . -3) (undo-tree-id3284 . -3) (undo-tree-id3285 . -3) (undo-tree-id3286 . -7) (undo-tree-id3287 . -7) (undo-tree-id3288 . -7) (undo-tree-id3289 . -7) (undo-tree-id3290 . -7) (undo-tree-id3291 . -7) (undo-tree-id3292 . -7) (undo-tree-id3293 . -7) (undo-tree-id3294 . -12) (undo-tree-id3295 . -12) (undo-tree-id3296 . -12) (undo-tree-id3297 . -12) (undo-tree-id3298 . -12) (undo-tree-id3299 . -12) (undo-tree-id3300 . -12) (undo-tree-id3301 . -12) (undo-tree-id3302 . -14) (undo-tree-id3303 . -14) (undo-tree-id3304 . -14) (undo-tree-id3305 . -14) (undo-tree-id3306 . -14) (undo-tree-id3307 . -14) (undo-tree-id3308 . -14) (undo-tree-id3309 . -14) (undo-tree-id3310 . 10) (undo-tree-id3311 . -23) (undo-tree-id3312 . -22) (undo-tree-id3313 . -22) (undo-tree-id3314 . -22) (undo-tree-id3315 . -22) (undo-tree-id3316 . -22) (undo-tree-id3317 . -22) (undo-tree-id3318 . -22) (undo-tree-id3319 . -22) (undo-tree-id3320 . -23) (undo-tree-id3321 . -23) (undo-tree-id3322 . -23) (undo-tree-id3323 . -23) (undo-tree-id3324 . -23) (undo-tree-id3325 . -23) (undo-tree-id3326 . -23) (undo-tree-id3327 . -23) (undo-tree-id3328 . -26) (undo-tree-id3329 . -26) (undo-tree-id3330 . -26) (undo-tree-id3331 . -26) (undo-tree-id3332 . -26) (undo-tree-id3333 . -26) (undo-tree-id3334 . -26) (undo-tree-id3335 . -26) (undo-tree-id3336 . -25) (undo-tree-id3337 . -25) (undo-tree-id3338 . -25) (undo-tree-id3339 . -25) (undo-tree-id3340 . -25) (undo-tree-id3341 . -25) (undo-tree-id3342 . -25) (undo-tree-id3343 . -25) (undo-tree-id3344 . -25) (undo-tree-id3345 . -26) (undo-tree-id3346 . -26) (undo-tree-id3347 . -26) 1755 (t 25756 45810 697786 501000)) nil (25756 45899 908008 502000) 0 nil])
([nil nil ((1784 . 1786) (1776 . 1784) (#("it" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1776) (undo-tree-id3213 . -1) (undo-tree-id3214 . -2) (undo-tree-id3215 . -2)) nil (25756 45899 907920 731000) 0 nil])
([nil nil ((#("by
calling its transformation methods. Each method" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1787) (undo-tree-id3117 . -49) (undo-tree-id3118 . -49) (undo-tree-id3119 . -6) (undo-tree-id3120 . -6) (undo-tree-id3121 . -6) (undo-tree-id3122 . -6) (undo-tree-id3123 . -6) (undo-tree-id3124 . -6) (undo-tree-id3125 . -6) (undo-tree-id3126 . -6) (undo-tree-id3127 . -49) (undo-tree-id3128 . -10) (undo-tree-id3129 . -10) (undo-tree-id3130 . -10) (undo-tree-id3131 . -10) (undo-tree-id3132 . -10) (undo-tree-id3133 . -10) (undo-tree-id3134 . -10) (undo-tree-id3135 . -10) (undo-tree-id3136 . -50) (undo-tree-id3137 . -49) (undo-tree-id3138 . -1) (undo-tree-id3139 . -9) (undo-tree-id3140 . -9) (undo-tree-id3141 . -9) (undo-tree-id3142 . -9) (undo-tree-id3143 . -9) (undo-tree-id3144 . -9) (undo-tree-id3145 . -9) (undo-tree-id3146 . -9) (undo-tree-id3147 . -13) (undo-tree-id3148 . -13) (undo-tree-id3149 . -13) (undo-tree-id3150 . -13) (undo-tree-id3151 . -13) (undo-tree-id3152 . -13) (undo-tree-id3153 . -13) (undo-tree-id3154 . -13) (undo-tree-id3155 . -28) (undo-tree-id3156 . -28) (undo-tree-id3157 . -28) (undo-tree-id3158 . -28) (undo-tree-id3159 . -28) (undo-tree-id3160 . -28) (undo-tree-id3161 . -28) (undo-tree-id3162 . -28) (undo-tree-id3163 . -36) (undo-tree-id3164 . -36) (undo-tree-id3165 . -36) (undo-tree-id3166 . -36) (undo-tree-id3167 . -36) (undo-tree-id3168 . -36) (undo-tree-id3169 . -36) (undo-tree-id3170 . -36) (undo-tree-id3171 . -37) (undo-tree-id3172 . -37) (undo-tree-id3173 . -37) (undo-tree-id3174 . -37) (undo-tree-id3175 . -37) (undo-tree-id3176 . -37) (undo-tree-id3177 . -37) (undo-tree-id3178 . -37) (undo-tree-id3179 . -42) (undo-tree-id3180 . -42) (undo-tree-id3181 . -42) (undo-tree-id3182 . -42) (undo-tree-id3183 . -42) (undo-tree-id3184 . -42) (undo-tree-id3185 . -42) (undo-tree-id3186 . -42) (undo-tree-id3187 . -49) (undo-tree-id3188 . -49) (undo-tree-id3189 . -49) (undo-tree-id3190 . -49) (undo-tree-id3191 . -49) (undo-tree-id3192 . -49) (undo-tree-id3193 . -49) (undo-tree-id3194 . -49) (undo-tree-id3195 . -48) (undo-tree-id3196 . -48) (undo-tree-id3197 . -48) (undo-tree-id3198 . -48) (undo-tree-id3199 . -48) (undo-tree-id3200 . -48) (undo-tree-id3201 . -48) (undo-tree-id3202 . -48) (undo-tree-id3203 . -49) (undo-tree-id3204 . -49) (undo-tree-id3205 . -49) (undo-tree-id3206 . -49) (undo-tree-id3207 . -49) (undo-tree-id3208 . -49) (undo-tree-id3209 . -49) (undo-tree-id3210 . -49) (undo-tree-id3211 . -49) (undo-tree-id3212 . -50) 1836) nil (25756 45899 907914 623000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1786) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . 1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) 1787) nil (25756 45899 907851 447000) 0 nil])
([nil nil ((1793 . 1796) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1793) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1)) nil (25756 45899 907383 776000) 0 nil])
([nil nil ((1812 . 1813) (t 25756 45899 962335 598000)) nil (25756 45905 727093 783000) 0 nil])
([nil nil ((1815 . 1816) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1815) (undo-tree-id3348 . -1) 1813) nil (25756 45905 727090 137000) 0 nil])
([nil nil ((#("(this chain is illustrated in" 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t)) . 1856) (undo-tree-id3349 . -28) (undo-tree-id3350 . -28) (undo-tree-id3351 . 29) (undo-tree-id3352 . -1) (undo-tree-id3353 . -29) (undo-tree-id3354 . -29) (t 25756 45905 734372 557000)) nil (25756 45943 221491 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2647 . 2648) (nil fontified nil 2593 . 2648) (nil fontified nil 2520 . 2593) (nil fontified nil 2442 . 2520) (nil fontified nil 2370 . 2442) (nil fontified nil 2295 . 2370) (nil fontified nil 2227 . 2295) (nil fontified nil 2152 . 2227) (nil fontified nil 2079 . 2152) (nil fontified nil 2005 . 2079) (nil fontified nil 1933 . 2005) (nil fontified nil 1857 . 1933) (1857 . 2648)) nil (25756 45943 221480 482000) 0 nil])
([nil nil ((2648 . 2649)) nil (25756 45943 221474 179000) 0 nil])
([nil nil ((1857 . 1858) (t 25756 45943 230616 606000)) nil (25756 45948 366049 40000) 0 nil])
([nil nil ((1875 . 1876) (t 25756 45948 374650 602000)) nil (25756 46021 12756 932000) 0 nil])
([nil nil ((2028 . 2030) (t 25756 46021 23143 93000)) nil (25756 46031 439496 823000) 0 nil])
([nil nil ((2082 . 2083) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2082) (undo-tree-id3355 . -1) 2030 (t 25756 46031 447215 545000)) nil (25756 46041 835363 432000) 0 nil])
([nil nil ((2096 . 2097)) nil (25756 46041 835349 903000) 0 nil])
([nil nil ((2097 . 2098) (t 25756 46041 851288 277000)) nil (25756 46045 179261 761000) 0 nil])
([nil nil ((2196 . 2197) (#("}" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2196) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . 1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) 2197 (2196 . 2197) (t 25756 46045 191311 713000)) nil (25756 46073 116372 847000) 0 nil])
([nil nil ((2197 . 2198) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2197) (undo-tree-id3428 . 1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1)) nil (25756 46073 116356 247000) 0 nil])
([nil nil ((#("( so the code that iterates over the
dataset will have to decide when to stop.)" 0 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2197) (undo-tree-id3356 . -78) (undo-tree-id3357 . 78) (undo-tree-id3358 . -1) (undo-tree-id3359 . -37) (undo-tree-id3360 . -37) (undo-tree-id3361 . -37) (undo-tree-id3362 . -37) (undo-tree-id3363 . -37) (undo-tree-id3364 . -37) (undo-tree-id3365 . -37) (undo-tree-id3366 . -37) (undo-tree-id3367 . 42) (undo-tree-id3368 . -44) (undo-tree-id3369 . -45) (undo-tree-id3370 . -45) (undo-tree-id3371 . -45) (undo-tree-id3372 . -45) (undo-tree-id3373 . -45) (undo-tree-id3374 . -45) (undo-tree-id3375 . -45) (undo-tree-id3376 . -45) (undo-tree-id3377 . -45) (undo-tree-id3378 . -45) (undo-tree-id3379 . -45) (undo-tree-id3380 . -45) (undo-tree-id3381 . -45) (undo-tree-id3382 . -45) (undo-tree-id3383 . -45) (undo-tree-id3384 . -2) (undo-tree-id3385 . -2) (undo-tree-id3386 . -2) (undo-tree-id3387 . -2) (undo-tree-id3388 . -2) (undo-tree-id3389 . -2) (undo-tree-id3390 . -2) (undo-tree-id3391 . -2) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -79) (undo-tree-id3427 . -79) 2198) nil (25756 46073 116346 100000) 0 nil])
([nil nil ((2198 . 2200) (t 25756 46073 127509 372000)) nil (25756 46075 870320 251000) 0 nil])
([nil nil ((apply yas--snippet-revive 1859 1906 #s(yas--snippet nil (#s(yas--field 1 1871 1877 nil nil nil t #s(yas--exit 1895 nil))) #s(yas--exit 1895 nil) 2 nil #s(yas--field 1 1871 1877 nil nil nil t #s(yas--exit 1895 nil)) nil nil)) (1871 . 1877) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1871 1877 nil nil nil t #s(yas--exit 1895 nil))) #s(yas--exit 1895 nil) 2 nil #s(yas--field 1 1871 1877 nil nil nil t #s(yas--exit 1895 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1889) (undo-tree-id3453 . -2) (1859 . 1902) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1859) (undo-tree-id3454 . -1) (undo-tree-id3455 . -2) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -2) (undo-tree-id3495 . -2) (undo-tree-id3496 . -2) (undo-tree-id3497 . -2) (undo-tree-id3498 . -2) (undo-tree-id3499 . -2) (undo-tree-id3500 . -2) (undo-tree-id3501 . -2) (undo-tree-id3502 . -2) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) 1861 (1859 . 1861) (1858 . 1859) (1857 . 1858) (t 25756 46075 875528 968000) 1857) nil (25756 46104 756431 164000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1930 . 1931) (nil fontified nil 1895 . 1931) (1895 . 1931)) nil (25756 46104 755321 992000) 0 nil])
([nil nil ((1942 . 1943) (t 25756 46104 767736 599000) 1933) nil (25756 46108 618944 560000) 0 nil])
([nil nil ((#("(If you call this method with no arguments, the new dataset
will repeat the source dataset forever)" 0 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 60 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2184) (undo-tree-id3584 . -98) (undo-tree-id3585 . 99) (undo-tree-id3586 . 16) (undo-tree-id3587 . -90) (undo-tree-id3588 . 99) (undo-tree-id3589 . -1) (undo-tree-id3590 . 1) (undo-tree-id3591 . -99) (undo-tree-id3592 . -99) (t 25756 46108 627764 554000)) nil (25756 46121 887121 995000) 0 nil])
([nil nil ((#("Of course, this will not copy all the data in memory three times! 
" 0 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 53 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2116) (undo-tree-id3564 . -66) (undo-tree-id3565 . -67) (undo-tree-id3566 . -67) (undo-tree-id3567 . -67) (undo-tree-id3568 . -67) (undo-tree-id3569 . -67) (undo-tree-id3570 . -67) (undo-tree-id3571 . -67) (undo-tree-id3572 . -67) (undo-tree-id3573 . -67) (undo-tree-id3574 . -67) (undo-tree-id3575 . -67) (undo-tree-id3576 . -67) (undo-tree-id3577 . -67) (undo-tree-id3578 . -67) (undo-tree-id3579 . -67) (undo-tree-id3580 . -67) (undo-tree-id3581 . -67) (undo-tree-id3582 . -67) (undo-tree-id3583 . -67)) nil (25756 46121 887115 343000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2116) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1)) nil (25756 46121 887098 766000) 0 nil])
([nil nil ((#(" 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 2116) (undo-tree-id3505 . -1) (undo-tree-id3506 . 2) (undo-tree-id3507 . -2)) nil (25756 46121 887048 642000) 0 nil])
([nil nil ((2140 . 2141) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2140) (undo-tree-id3597 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2116) (undo-tree-id3598 . 1) (undo-tree-id3599 . -1) (t 25756 46121 943861 372000)) nil (25756 46129 765708 899000) 0 nil])
([nil nil ((2438 . 2439) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2438) (undo-tree-id3593 . -1) (2365 . 2366) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2365) (undo-tree-id3594 . -1) (2287 . 2288) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2287) (undo-tree-id3595 . -1) (2215 . 2216) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2215) (undo-tree-id3596 . -1) 2140) nil (25756 46129 765703 559000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2432) (nil fontified nil 2431 . 2432) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2431 . 2432) (2431 . 2432) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2353) (nil fontified nil 2352 . 2353) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2352 . 2353) (2352 . 2353) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2275) (nil fontified nil 2274 . 2275) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2274 . 2275) (2274 . 2275) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2194) (nil fontified nil 2193 . 2194) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2193 . 2194) (2193 . 2194) 2438) nil (25756 46189 578171 879000) 0 nil])
([nil nil ((1931 . 1932) (t 25756 46129 775918 586000) 1912) nil (25756 46200 561820 155000) 0 nil] [nil nil ((nil rear-nonsticky nil 1948 . 1949) (nil fontified nil 1938 . 1949) (nil fontified nil 1934 . 1938) (nil fontified nil 1913 . 1934) (1913 . 1949) 1912 (t 25756 46129 775918 586000)) ((#("for item in dataset:
...
print(item)" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t) 3 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 9 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t) 11 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 21 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 25 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 31 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t)) . 1913) (undo-tree-id3600 . -35) (undo-tree-id3601 . -23) (undo-tree-id3602 . -23) (undo-tree-id3603 . -23) (nil rear-nonsticky t 1948 . 1949)) (25756 46189 577682 212000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1967 . 1968) (nil fontified nil 1957 . 1968) (nil fontified nil 1953 . 1957) (nil fontified nil 1932 . 1953) (1932 . 1968)) nil (25756 46200 561819 27000) 0 nil])
nil
([nil nil ((#("...
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 1953) (undo-tree-id3604 . -3) (undo-tree-id3605 . -2) (undo-tree-id3606 . -4) (undo-tree-id3607 . -2) (undo-tree-id3608 . -2) (undo-tree-id3609 . -2) (undo-tree-id3610 . -2) (undo-tree-id3611 . -2) (undo-tree-id3612 . -2) (undo-tree-id3613 . -2) (undo-tree-id3614 . -2) (undo-tree-id3615 . -2) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) (undo-tree-id3619 . -2) (undo-tree-id3620 . -2) (undo-tree-id3621 . -2) (undo-tree-id3622 . -2) (undo-tree-id3623 . -2) (undo-tree-id3624 . -2) (undo-tree-id3625 . -2) (undo-tree-id3626 . -2) (undo-tree-id3627 . -2) (undo-tree-id3628 . -2) (undo-tree-id3629 . -2) (undo-tree-id3630 . -2) (undo-tree-id3631 . -2) (undo-tree-id3632 . -4) 1955) nil (25756 46200 561816 215000) 0 nil])
([nil nil (1954) nil (25756 46200 561766 455000) 0 nil])
([nil nil ((1953 . 1957)) nil (25756 46200 561761 871000) 0 nil])
([nil nil ((#("on the original dataset," 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2033) (undo-tree-id3740 . -23) (undo-tree-id3741 . -24) (undo-tree-id3742 . -24) (t 25756 46200 616444 666000)) nil (25756 46218 314915 221000) 0 nil])
([nil nil ((#("we " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1999) (undo-tree-id3724 . -2) (undo-tree-id3725 . -2) (undo-tree-id3726 . -2) (undo-tree-id3727 . -3) (undo-tree-id3728 . -2) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -2) (undo-tree-id3738 . -2) (undo-tree-id3739 . -3) 2001) nil (25756 46218 314911 419000) 0 nil])
([nil nil ((#("In this example, 
" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1981) (undo-tree-id3659 . -17) (undo-tree-id3660 . -18) (undo-tree-id3661 . -18) (undo-tree-id3662 . -4) (undo-tree-id3663 . -4) (undo-tree-id3664 . -4) (undo-tree-id3665 . -4) (undo-tree-id3666 . -4) (undo-tree-id3667 . -4) (undo-tree-id3668 . -4) (undo-tree-id3669 . -4) (undo-tree-id3670 . -18) (undo-tree-id3671 . -16) (undo-tree-id3672 . -16) (undo-tree-id3673 . -16) (undo-tree-id3674 . -16) (undo-tree-id3675 . -16) (undo-tree-id3676 . -16) (undo-tree-id3677 . -16) (undo-tree-id3678 . -16) (undo-tree-id3679 . -18) (undo-tree-id3680 . -18) (undo-tree-id3681 . -18) (undo-tree-id3682 . -18) (undo-tree-id3683 . -18) (undo-tree-id3684 . -18) (undo-tree-id3685 . -18) (undo-tree-id3686 . -18) (undo-tree-id3687 . -18) (undo-tree-id3688 . -18) (undo-tree-id3689 . -18) (undo-tree-id3690 . -18) (undo-tree-id3691 . -18) (undo-tree-id3692 . -18) (undo-tree-id3693 . -18) (undo-tree-id3694 . -18) (undo-tree-id3695 . -18) (undo-tree-id3696 . -18) (undo-tree-id3697 . -18) (undo-tree-id3698 . -18) (undo-tree-id3699 . -18) (undo-tree-id3700 . -18) (undo-tree-id3701 . -18) (undo-tree-id3702 . -18) (undo-tree-id3703 . -18) (undo-tree-id3704 . -18) (undo-tree-id3705 . -18) (undo-tree-id3706 . -18) (undo-tree-id3707 . -18) (undo-tree-id3708 . -18) (undo-tree-id3709 . -18) (undo-tree-id3710 . -18) (undo-tree-id3711 . -18) (undo-tree-id3712 . -18) (undo-tree-id3713 . -18) (undo-tree-id3714 . -18) (undo-tree-id3715 . -18) (undo-tree-id3716 . -18) (undo-tree-id3717 . -18) (undo-tree-id3718 . -18) (undo-tree-id3719 . -18) (undo-tree-id3720 . -18) (undo-tree-id3721 . -18) (undo-tree-id3722 . -18) (undo-tree-id3723 . -18)) nil (25756 46218 314896 410000) 0 nil])
([nil nil ((#("first " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1981) (undo-tree-id3633 . -5) (undo-tree-id3634 . -5) (undo-tree-id3635 . -5) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -6) (undo-tree-id3645 . -6) (undo-tree-id3646 . -5) (undo-tree-id3647 . -4) (undo-tree-id3648 . -4) (undo-tree-id3649 . -4) (undo-tree-id3650 . -4) (undo-tree-id3651 . -4) (undo-tree-id3652 . -4) (undo-tree-id3653 . -4) (undo-tree-id3654 . -4) (undo-tree-id3655 . -6) (undo-tree-id3656 . -5) (undo-tree-id3657 . -5) (undo-tree-id3658 . -6) 1986) nil (25756 46218 314703 491000) 0 nil])
([nil nil ((2005 . 2006) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 2005) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2006) (undo-tree-id3990 . -1) 1981 (t 25756 46218 316578 378000)) nil (25756 46257 841366 424000) 0 nil])
([nil nil ((2006 . 2008) (#("and it" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2006) (undo-tree-id3935 . -5) (undo-tree-id3936 . -5) (undo-tree-id3937 . -5) (undo-tree-id3938 . -6) (undo-tree-id3939 . -5) (undo-tree-id3940 . -2) (undo-tree-id3941 . -2) (undo-tree-id3942 . -2) (undo-tree-id3943 . -2) (undo-tree-id3944 . -2) (undo-tree-id3945 . -2) (undo-tree-id3946 . -2) (undo-tree-id3947 . -2) (undo-tree-id3948 . -2) (undo-tree-id3949 . -2) (undo-tree-id3950 . -2) (undo-tree-id3951 . -2) (undo-tree-id3952 . -2) (undo-tree-id3953 . -2) (undo-tree-id3954 . -2) (undo-tree-id3955 . -2) (undo-tree-id3956 . -2) (undo-tree-id3957 . -2) (undo-tree-id3958 . -2) (undo-tree-id3959 . -2) (undo-tree-id3960 . -2) (undo-tree-id3961 . -2) (undo-tree-id3962 . -5) (undo-tree-id3963 . -5) (undo-tree-id3964 . -5) (undo-tree-id3965 . -5) (undo-tree-id3966 . -5) (undo-tree-id3967 . -5) (undo-tree-id3968 . -5) (undo-tree-id3969 . -5) (undo-tree-id3970 . -5) (undo-tree-id3971 . -5) (undo-tree-id3972 . -5) (undo-tree-id3973 . -5) (undo-tree-id3974 . -5) (undo-tree-id3975 . -5) (undo-tree-id3976 . -5) (undo-tree-id3977 . -5) (undo-tree-id3978 . -5) (undo-tree-id3979 . -5) (undo-tree-id3980 . -5) (undo-tree-id3981 . -5) (undo-tree-id3982 . -5) (undo-tree-id3983 . -5) (undo-tree-id3984 . -5) (undo-tree-id3985 . -6) (undo-tree-id3986 . -6) (undo-tree-id3987 . -6) 2011) nil (25756 46257 841361 703000) 0 nil])
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2015) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1)) nil (25756 46257 841328 964000) 0 nil])
([nil nil ((2030 . 2034) (#("that will" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2030) (undo-tree-id3749 . -8) (undo-tree-id3750 . -8) (undo-tree-id3751 . -8) (undo-tree-id3752 . -9) (undo-tree-id3753 . -8) (undo-tree-id3754 . -3) (undo-tree-id3755 . -3) (undo-tree-id3756 . -3) (undo-tree-id3757 . -3) (undo-tree-id3758 . -3) (undo-tree-id3759 . -3) (undo-tree-id3760 . -3) (undo-tree-id3761 . -3) (undo-tree-id3762 . -3) (undo-tree-id3763 . -3) (undo-tree-id3764 . -3) (undo-tree-id3765 . -3) (undo-tree-id3766 . -3) (undo-tree-id3767 . -3) (undo-tree-id3768 . -3) (undo-tree-id3769 . -3) (undo-tree-id3770 . -3) (undo-tree-id3771 . -3) (undo-tree-id3772 . -3) (undo-tree-id3773 . -3) (undo-tree-id3774 . -3) (undo-tree-id3775 . -3) (undo-tree-id3776 . -8) (undo-tree-id3777 . -8) (undo-tree-id3778 . -8) (undo-tree-id3779 . -8) (undo-tree-id3780 . -8) (undo-tree-id3781 . -8) (undo-tree-id3782 . -8) (undo-tree-id3783 . -8) (undo-tree-id3784 . -8) (undo-tree-id3785 . -8) (undo-tree-id3786 . -8) (undo-tree-id3787 . -8) (undo-tree-id3788 . -8) (undo-tree-id3789 . -8) (undo-tree-id3790 . -8) (undo-tree-id3791 . -8) (undo-tree-id3792 . -8) (undo-tree-id3793 . -8) (undo-tree-id3794 . -8) (undo-tree-id3795 . -8) (undo-tree-id3796 . -8) (undo-tree-id3797 . -8) (undo-tree-id3798 . -8) (undo-tree-id3799 . -8) (undo-tree-id3800 . -8) (undo-tree-id3801 . -8) (undo-tree-id3802 . -8) (undo-tree-id3803 . -8) (undo-tree-id3804 . -8) (undo-tree-id3805 . -8) (undo-tree-id3806 . -8) (undo-tree-id3807 . -8) (undo-tree-id3808 . -8) (undo-tree-id3809 . -8) (undo-tree-id3810 . -8) (undo-tree-id3811 . -8) (undo-tree-id3812 . -8) (undo-tree-id3813 . -8) (undo-tree-id3814 . -8) (undo-tree-id3815 . -8) (undo-tree-id3816 . -8) (undo-tree-id3817 . -8) (undo-tree-id3818 . -8) (undo-tree-id3819 . -9) (undo-tree-id3820 . -9) (undo-tree-id3821 . -9) (undo-tree-id3822 . -9) (undo-tree-id3823 . -9) (undo-tree-id3824 . -9) (undo-tree-id3825 . -9) (undo-tree-id3826 . -9) (undo-tree-id3827 . -9) (undo-tree-id3828 . -9) (undo-tree-id3829 . -9) (undo-tree-id3830 . -9) (undo-tree-id3831 . -9) (undo-tree-id3832 . -9) (undo-tree-id3833 . -9) (undo-tree-id3834 . -9) (undo-tree-id3835 . -9) (undo-tree-id3836 . -9) (undo-tree-id3837 . -9) (undo-tree-id3838 . -9) (undo-tree-id3839 . -9) (undo-tree-id3840 . -9) (undo-tree-id3841 . -8) (undo-tree-id3842 . -8) (undo-tree-id3843 . -8) (undo-tree-id3844 . -8) (undo-tree-id3845 . -8) (undo-tree-id3846 . -8) (undo-tree-id3847 . -8) (undo-tree-id3848 . -8) (undo-tree-id3849 . -8) (undo-tree-id3850 . -8) (undo-tree-id3851 . -8) (undo-tree-id3852 . -8) (undo-tree-id3853 . -8) (undo-tree-id3854 . -8) (undo-tree-id3855 . -8) (undo-tree-id3856 . -8) (undo-tree-id3857 . -8) (undo-tree-id3858 . -8) (undo-tree-id3859 . -8) (undo-tree-id3860 . -8) (undo-tree-id3861 . -8) (undo-tree-id3862 . -8) (undo-tree-id3863 . -9) (undo-tree-id3864 . -9) (undo-tree-id3865 . -9) (undo-tree-id3866 . -9) (undo-tree-id3867 . -9) (undo-tree-id3868 . -9) (undo-tree-id3869 . -9) (undo-tree-id3870 . -9) (undo-tree-id3871 . -9) (undo-tree-id3872 . -9) (undo-tree-id3873 . -9) (undo-tree-id3874 . -9) (undo-tree-id3875 . -9) (undo-tree-id3876 . -9) (undo-tree-id3877 . -9) (undo-tree-id3878 . -9) (undo-tree-id3879 . -9) (undo-tree-id3880 . -9) (undo-tree-id3881 . -9) (undo-tree-id3882 . -9) (undo-tree-id3883 . -9) (undo-tree-id3884 . -9) (undo-tree-id3885 . -8) (undo-tree-id3886 . -8) (undo-tree-id3887 . -8) (undo-tree-id3888 . -8) (undo-tree-id3889 . -8) (undo-tree-id3890 . -8) (undo-tree-id3891 . -8) (undo-tree-id3892 . -8) (undo-tree-id3893 . -8) (undo-tree-id3894 . -8) (undo-tree-id3895 . -8) (undo-tree-id3896 . -8) (undo-tree-id3897 . -8) (undo-tree-id3898 . -8) (undo-tree-id3899 . -8) (undo-tree-id3900 . -8) (undo-tree-id3901 . -8) (undo-tree-id3902 . -8) (undo-tree-id3903 . -8) (undo-tree-id3904 . -8) (undo-tree-id3905 . -8) (undo-tree-id3906 . -8) (undo-tree-id3907 . -8) (undo-tree-id3908 . -8) (undo-tree-id3909 . -8) (undo-tree-id3910 . -8) (undo-tree-id3911 . -8) (undo-tree-id3912 . -8) (undo-tree-id3913 . -8) (undo-tree-id3914 . -8) (undo-tree-id3915 . -9) (undo-tree-id3916 . -9) (undo-tree-id3917 . -9) 2038) nil (25756 46257 841313 81000) 0 nil])
([nil nil ((2041 . 2043)) nil (25756 46257 840965 444000) 0 nil])
([nil nil ((#("the" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2044) (undo-tree-id3746 . -2) (undo-tree-id3747 . -3) (undo-tree-id3748 . -3)) nil (25756 46257 840964 77000) 0 nil])
([nil nil ((2066 . 2067) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2066) (undo-tree-id3745 . -1) 2065) nil (25756 46257 840959 506000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2057) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2056 . 2057) (2056 . 2057) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 2086) (undo-tree-id3743 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2044) (undo-tree-id3744 . 1) 2066) nil (25756 46257 840952 361000) 0 nil])
([nil nil ((#("we" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2093) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -2) (undo-tree-id4051 . -2) (undo-tree-id4052 . -2) (undo-tree-id4053 . -2) (undo-tree-id4054 . -2) (undo-tree-id4055 . -2) (undo-tree-id4056 . -2) (undo-tree-id4057 . -2) (undo-tree-id4058 . -2) (undo-tree-id4059 . -2) (undo-tree-id4060 . -2) (undo-tree-id4061 . -2) (undo-tree-id4062 . -2) (undo-tree-id4063 . -2) (undo-tree-id4064 . -2) (undo-tree-id4065 . -2) (undo-tree-id4066 . -2) (undo-tree-id4067 . -2) (undo-tree-id4068 . -2) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -2) (undo-tree-id4081 . -2) 2094 (t 25756 46257 892880 359000)) nil (25756 46269 3669 558000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2092) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1)) nil (25756 46269 3636 158000) 0 nil])
([nil nil ((2117 . 2119) (#("on this new dataset, and again this creates a
new dataset. This one will" 0 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 45 46 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 55 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 68 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2117) (undo-tree-id4084 . -71) (undo-tree-id4085 . -71) (undo-tree-id4086 . -71) (undo-tree-id4087 . -3) (undo-tree-id4088 . -8) (undo-tree-id4089 . -12) (undo-tree-id4090 . -12) (undo-tree-id4091 . -12) (undo-tree-id4092 . -12) (undo-tree-id4093 . -12) (undo-tree-id4094 . -12) (undo-tree-id4095 . -12) (undo-tree-id4096 . -12) (undo-tree-id4097 . -19) (undo-tree-id4098 . -21) (undo-tree-id4099 . -25) (undo-tree-id4100 . -31) (undo-tree-id4101 . -36) (undo-tree-id4102 . -44) (undo-tree-id4103 . -46) (undo-tree-id4104 . -46) (undo-tree-id4105 . -46) (undo-tree-id4106 . -46) (undo-tree-id4107 . -46) (undo-tree-id4108 . -46) (undo-tree-id4109 . -46) (undo-tree-id4110 . -46) (undo-tree-id4111 . -50) (undo-tree-id4112 . -50) (undo-tree-id4113 . -50) (undo-tree-id4114 . -50) (undo-tree-id4115 . -50) (undo-tree-id4116 . -50) (undo-tree-id4117 . -50) (undo-tree-id4118 . -50) (undo-tree-id4119 . -57) (undo-tree-id4120 . -59) (undo-tree-id4121 . -59) (undo-tree-id4122 . -59) (undo-tree-id4123 . -59) (undo-tree-id4124 . -59) (undo-tree-id4125 . -59) (undo-tree-id4126 . -59) (undo-tree-id4127 . -59) (undo-tree-id4128 . -72) (undo-tree-id4129 . -71) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -6) (undo-tree-id4139 . -6) (undo-tree-id4140 . -6) (undo-tree-id4141 . -6) (undo-tree-id4142 . -6) (undo-tree-id4143 . -6) (undo-tree-id4144 . -6) (undo-tree-id4145 . -6) (undo-tree-id4146 . -10) (undo-tree-id4147 . -10) (undo-tree-id4148 . -10) (undo-tree-id4149 . -10) (undo-tree-id4150 . -10) (undo-tree-id4151 . -10) (undo-tree-id4152 . -10) (undo-tree-id4153 . -10) (undo-tree-id4154 . 60) (undo-tree-id4155 . -19) (undo-tree-id4156 . -18) (undo-tree-id4157 . -18) (undo-tree-id4158 . -18) (undo-tree-id4159 . -18) (undo-tree-id4160 . -18) (undo-tree-id4161 . -18) (undo-tree-id4162 . -18) (undo-tree-id4163 . -18) (undo-tree-id4164 . -19) (undo-tree-id4165 . -19) (undo-tree-id4166 . -19) (undo-tree-id4167 . -19) (undo-tree-id4168 . -19) (undo-tree-id4169 . -19) (undo-tree-id4170 . -19) (undo-tree-id4171 . -19) (undo-tree-id4172 . -23) (undo-tree-id4173 . -23) (undo-tree-id4174 . -23) (undo-tree-id4175 . -23) (undo-tree-id4176 . -23) (undo-tree-id4177 . -23) (undo-tree-id4178 . -23) (undo-tree-id4179 . -23) (undo-tree-id4180 . -29) (undo-tree-id4181 . -29) (undo-tree-id4182 . -29) (undo-tree-id4183 . -29) (undo-tree-id4184 . -29) (undo-tree-id4185 . -29) (undo-tree-id4186 . -29) (undo-tree-id4187 . -29) (undo-tree-id4188 . -34) (undo-tree-id4189 . -34) (undo-tree-id4190 . -34) (undo-tree-id4191 . -34) (undo-tree-id4192 . -34) (undo-tree-id4193 . -34) (undo-tree-id4194 . -34) (undo-tree-id4195 . -34) (undo-tree-id4196 . -42) (undo-tree-id4197 . -42) (undo-tree-id4198 . -42) (undo-tree-id4199 . -42) (undo-tree-id4200 . -42) (undo-tree-id4201 . -42) (undo-tree-id4202 . -42) (undo-tree-id4203 . -42) (undo-tree-id4204 . -44) (undo-tree-id4205 . -44) (undo-tree-id4206 . -44) (undo-tree-id4207 . -44) (undo-tree-id4208 . -44) (undo-tree-id4209 . -44) (undo-tree-id4210 . -44) (undo-tree-id4211 . -44) (undo-tree-id4212 . -48) (undo-tree-id4213 . -48) (undo-tree-id4214 . -48) (undo-tree-id4215 . -48) (undo-tree-id4216 . -48) (undo-tree-id4217 . -48) (undo-tree-id4218 . -48) (undo-tree-id4219 . -48) (undo-tree-id4220 . 22) (undo-tree-id4221 . -57) (undo-tree-id4222 . -56) (undo-tree-id4223 . -56) (undo-tree-id4224 . -56) (undo-tree-id4225 . -56) (undo-tree-id4226 . -56) (undo-tree-id4227 . -56) (undo-tree-id4228 . -56) (undo-tree-id4229 . -56) (undo-tree-id4230 . -57) (undo-tree-id4231 . -57) (undo-tree-id4232 . -57) (undo-tree-id4233 . -57) (undo-tree-id4234 . -57) (undo-tree-id4235 . -57) (undo-tree-id4236 . -57) (undo-tree-id4237 . -57) (undo-tree-id4238 . -62) (undo-tree-id4239 . -62) (undo-tree-id4240 . -62) (undo-tree-id4241 . -62) (undo-tree-id4242 . -62) (undo-tree-id4243 . -62) (undo-tree-id4244 . -62) (undo-tree-id4245 . -62) (undo-tree-id4246 . -66) (undo-tree-id4247 . -66) (undo-tree-id4248 . -66) (undo-tree-id4249 . -66) (undo-tree-id4250 . -66) (undo-tree-id4251 . -66) (undo-tree-id4252 . -66) (undo-tree-id4253 . -66) (undo-tree-id4254 . -71) (undo-tree-id4255 . -71) (undo-tree-id4256 . -71) (undo-tree-id4257 . -71) (undo-tree-id4258 . -71) (undo-tree-id4259 . -71) (undo-tree-id4260 . -71) (undo-tree-id4261 . -71) (undo-tree-id4262 . -72) (undo-tree-id4263 . -72) (undo-tree-id4264 . -72) (undo-tree-id4265 . -72) (undo-tree-id4266 . -72) (undo-tree-id4267 . -72) (undo-tree-id4268 . -72) (undo-tree-id4269 . -72) (undo-tree-id4270 . -71) (undo-tree-id4271 . -71) (undo-tree-id4272 . -71) (undo-tree-id4273 . -71) (undo-tree-id4274 . -71) (undo-tree-id4275 . -71) (undo-tree-id4276 . -71) (undo-tree-id4277 . -71) (undo-tree-id4278 . -71) (undo-tree-id4279 . -72) (undo-tree-id4280 . -72) 2188 (t 25756 46269 12965 923000)) nil (25756 46304 875870 762000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2163) (nil fontified nil 2162 . 2163) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2162 . 2163) (2162 . 2163) 2152) nil (25756 46304 875503 983000) 0 nil])
([nil nil ((2173 . 2174) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2173) (undo-tree-id4082 . 1) (undo-tree-id4083 . -1) 2163) nil (25756 46304 875501 545000) 0 nil])
([nil nil ((2187 . 2189)) nil (25756 46304 875487 481000) 0 nil])
([nil nil ((2247 . 2249) (t 25756 46304 885243 972000)) nil (25756 46333 381920 875000) 0 nil])
([nil nil ((#("As you
" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2249) (undo-tree-id4287 . -6) (undo-tree-id4288 . 7) (undo-tree-id4289 . -7)) nil (25756 46333 381919 746000) 0 nil])
([nil nil ((#("can see, the batch() method had to output a final batch of size two instead of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 13 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2249) (undo-tree-id4284 . -78) (undo-tree-id4285 . 79) (undo-tree-id4286 . -79)) nil (25756 46333 381916 215000) 0 nil])
([nil nil ((#("seven, but you can call it with drop_remainder=True if you wan
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 37 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 46 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 61 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 62 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2249) (undo-tree-id4281 . -62) (undo-tree-id4282 . 63) (undo-tree-id4283 . -63)) nil (25756 46333 381909 833000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3974 . 3975) (nil fontified nil 3940 . 3975) (nil fontified nil 3904 . 3940) (nil fontified nil 3868 . 3904) (nil fontified nil 3864 . 3868) (nil fontified nil 3852 . 3864) (nil fontified nil 3848 . 3852) (nil fontified nil 3815 . 3848) (nil fontified nil 3787 . 3815) (nil fontified nil 3711 . 3787) (nil fontified nil 3706 . 3711) (nil fontified nil 3634 . 3706) (nil fontified nil 3558 . 3634) (nil fontified nil 3548 . 3558) (nil fontified nil 3479 . 3548) (nil fontified nil 3426 . 3479) (nil fontified nil 3348 . 3426) (nil fontified nil 3270 . 3348) (nil fontified nil 3196 . 3270) (nil fontified nil 3125 . 3196) (nil fontified nil 3059 . 3125) (nil fontified nil 2991 . 3059) (nil fontified nil 2923 . 2991) (nil fontified nil 2847 . 2923) (nil fontified nil 2771 . 2847) (nil fontified nil 2698 . 2771) (nil fontified nil 2554 . 2698) (nil fontified nil 2494 . 2554) (nil fontified nil 2428 . 2494) (nil fontified nil 2415 . 2428) (nil fontified nil 2331 . 2415) (nil fontified nil 2249 . 2331) (2249 . 3975) (t 25756 46333 389467 2000)) nil (25756 46361 939853 282000) 0 nil])
([nil nil ((3975 . 3976)) nil (25756 46361 939843 242000) 0 nil])
([nil nil ((2427 . 2428) (t 25756 46361 949692 223000) 2415) nil (25756 46370 44541 757000) 0 nil])
([nil nil ((#("(e.g., with dataset = ... )" 0 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2370) (undo-tree-id4384 . -26) (undo-tree-id4385 . -27) 2331 (t 25756 46370 53756 438000)) nil (25756 46394 721945 737000) 0 nil])
([nil nil ((#("keep a reference to these new datasets , or else nothing
" 0 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2331) (undo-tree-id4351 . -56) (undo-tree-id4352 . -39) (undo-tree-id4353 . -57) (undo-tree-id4354 . -57) (undo-tree-id4355 . -57) (undo-tree-id4356 . -57) (undo-tree-id4357 . -57) (undo-tree-id4358 . -57) (undo-tree-id4359 . -57) (undo-tree-id4360 . -57) (undo-tree-id4361 . 27) (undo-tree-id4362 . -38) (undo-tree-id4363 . -39) (undo-tree-id4364 . -39) (undo-tree-id4365 . -39) (undo-tree-id4366 . -39) (undo-tree-id4367 . -39) (undo-tree-id4368 . -39) (undo-tree-id4369 . -39) (undo-tree-id4370 . -39) (undo-tree-id4371 . -39) (undo-tree-id4372 . -39) (undo-tree-id4373 . -39) (undo-tree-id4374 . -39) (undo-tree-id4375 . -39) (undo-tree-id4376 . -39) (undo-tree-id4377 . -39) (undo-tree-id4378 . -39) (undo-tree-id4379 . -39) (undo-tree-id4380 . -39) (undo-tree-id4381 . -39) (undo-tree-id4382 . -39) (undo-tree-id4383 . -57) 2370) nil (25756 46394 721942 115000) 0 nil])
([nil nil ((#("will happen.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2331) (undo-tree-id4294 . -12) (undo-tree-id4295 . -13) (undo-tree-id4296 . -11) (undo-tree-id4297 . -13) (undo-tree-id4298 . -13) (undo-tree-id4299 . -13) (undo-tree-id4300 . -13) (undo-tree-id4301 . -13) (undo-tree-id4302 . -13) (undo-tree-id4303 . -13) (undo-tree-id4304 . -13) (undo-tree-id4305 . -13) (undo-tree-id4306 . -13) (undo-tree-id4307 . -13) (undo-tree-id4308 . -13) (undo-tree-id4309 . -13) (undo-tree-id4310 . -13) (undo-tree-id4311 . -13) (undo-tree-id4312 . -13) (undo-tree-id4313 . -13) (undo-tree-id4314 . -13) (undo-tree-id4315 . -11) (undo-tree-id4316 . -11) (undo-tree-id4317 . -11) (undo-tree-id4318 . -11) (undo-tree-id4319 . -11) (undo-tree-id4320 . -11) (undo-tree-id4321 . -11) (undo-tree-id4322 . -11) (undo-tree-id4323 . -11) (undo-tree-id4324 . -11) (undo-tree-id4325 . -11) (undo-tree-id4326 . -11) (undo-tree-id4327 . -11) (undo-tree-id4328 . -11) (undo-tree-id4329 . -11) (undo-tree-id4330 . -11) (undo-tree-id4331 . -11) (undo-tree-id4332 . -11) (undo-tree-id4333 . -11) (undo-tree-id4334 . -11) (undo-tree-id4335 . -11) (undo-tree-id4336 . -11) (undo-tree-id4337 . -11) (undo-tree-id4338 . -11) (undo-tree-id4339 . -11) (undo-tree-id4340 . -11) (undo-tree-id4341 . -11) (undo-tree-id4342 . -11) (undo-tree-id4343 . -11) (undo-tree-id4344 . -11) (undo-tree-id4345 . -11) (undo-tree-id4346 . -11) (undo-tree-id4347 . -11) (undo-tree-id4348 . -11) (undo-tree-id4349 . -11) (undo-tree-id4350 . -13) 2342) nil (25756 46403 558000 289000) 0 nil])
([nil nil ((#(", so make sure to" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2313) (undo-tree-id4396 . -16) (undo-tree-id4397 . -17) (undo-tree-id4398 . -17)) nil (25756 46410 613415 156000) 0 nil] [nil nil ((#(", they create new ones, so make sure to" 0 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2291) (undo-tree-id4290 . -38) (undo-tree-id4291 . -2) (undo-tree-id4292 . -39) (undo-tree-id4293 . -39)) ((2291 . 2330) (t 25756 46394 733952 796000)) (25756 46394 721878 16000) 0 nil])
([nil nil ((2313 . 2314) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2313) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) 2314 (2313 . 2314)) nil (25756 46410 613408 848000) 0 nil])
nil
([nil nil ((#(". For" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2376) (undo-tree-id4597 . -4) (undo-tree-id4598 . -5) (undo-tree-id4599 . -5) (t 25756 46410 626079 856000)) nil (25756 46444 492224 56000) 0 nil])
([nil nil ((#("w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2377) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) 2378 (2376 . 2378)) nil (25756 46444 492219 475000) 0 nil])
([nil nil ((#("example, this creates a new dataset with all items doubled:
" 0 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2378) (undo-tree-id4556 . -59) (undo-tree-id4557 . -60)) nil (25756 46444 492190 150000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2378) (undo-tree-id4552 . -3) (undo-tree-id4553 . 4) (undo-tree-id4554 . -1) (undo-tree-id4555 . -4)) nil (25756 46444 492187 877000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2390 2390 nil nil nil nil #s(yas--exit 2408 nil))) #s(yas--exit 2408 nil) 3 nil #s(yas--field 1 2390 2390 nil nil nil nil #s(yas--exit 2408 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2408) (undo-tree-id4500 . -2) (2378 . 2421) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2378) (undo-tree-id4501 . -1) (undo-tree-id4502 . -2) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -2) (undo-tree-id4542 . -2) (undo-tree-id4543 . -2) (undo-tree-id4544 . -2) (undo-tree-id4545 . -2) (undo-tree-id4546 . -2) (undo-tree-id4547 . -2) (undo-tree-id4548 . -2) (undo-tree-id4549 . -2) (undo-tree-id4550 . -2) (undo-tree-id4551 . -2) 2380 (2378 . 2380) (2377 . 2378) 2316) nil (25756 46444 492181 952000) 0 nil])
([nil nil ((apply yas--snippet-revive 2378 2419 #s(yas--snippet nil (#s(yas--field 1 2390 2390 nil nil nil nil #s(yas--exit 2408 nil))) #s(yas--exit 2408 nil) 3 nil #s(yas--field 1 2390 2390 nil nil nil nil #s(yas--exit 2408 nil)) nil nil))) nil (25756 46444 491808 540000) 0 nil])
([nil nil ((2390 . 2396)) nil (25756 46444 491807 889000) 0 nil])
([nil nil ((#("dataset = dataset.map(lambda x: x * 2) # Items: [0,2,4,6,8,10,12]This function is the one you will call to apply any preprocessing you want
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2426) (undo-tree-id4456 . -139) (undo-tree-id4457 . -17) (undo-tree-id4458 . 140) (undo-tree-id4459 . -7) (undo-tree-id4460 . -17) (undo-tree-id4461 . -17) (undo-tree-id4462 . -17) (undo-tree-id4463 . -17) (undo-tree-id4464 . -17) (undo-tree-id4465 . -17) (undo-tree-id4466 . -17) (undo-tree-id4467 . -17) (undo-tree-id4468 . -17) (undo-tree-id4469 . -17) (undo-tree-id4470 . -17) (undo-tree-id4471 . -17) (undo-tree-id4472 . -17) (undo-tree-id4473 . -17) (undo-tree-id4474 . -17) (undo-tree-id4475 . -17) (undo-tree-id4476 . -17) (undo-tree-id4477 . -17) (undo-tree-id4478 . -17) (undo-tree-id4479 . -17) (undo-tree-id4480 . -17) (undo-tree-id4481 . -17) (undo-tree-id4482 . -17) (undo-tree-id4483 . -17) (undo-tree-id4484 . -17) (undo-tree-id4485 . -17) (undo-tree-id4486 . -17) (undo-tree-id4487 . -17) (undo-tree-id4488 . -17) (undo-tree-id4489 . -17) (undo-tree-id4490 . -17) (undo-tree-id4491 . -17) (undo-tree-id4492 . -17) (undo-tree-id4493 . -17) (undo-tree-id4494 . -17) (undo-tree-id4495 . -17) (undo-tree-id4496 . -17) (undo-tree-id4497 . -17) (undo-tree-id4498 . -17) (undo-tree-id4499 . -140) 2443) nil (25756 46444 491805 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2414 . 2415) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2554) (2414 . 2555)) nil (25756 46444 491775 270000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2413) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1)) nil (25756 46444 491772 629000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2413) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1)) nil (25756 46465 550028 202000) 0 nil])
([nil nil ((2452 . 2453) (t 25756 46444 506352 271000)) nil (25756 46472 80856 403000) 0 nil] [nil nil ((#("dataset = dataset.map(lambda x: x * 2) # Items: [0,2,4,6,8,10,12]This function is the one you will call to apply any preprocessing you want
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 7 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 18 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 22 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 28 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 38 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 39 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 41 78 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 78 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 79 81 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 81 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 107 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 113 116 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 116 139 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 139 140 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 2413) (undo-tree-id4607 . -139) (undo-tree-id4608 . -82) (undo-tree-id4609 . -139) (undo-tree-id4610 . -78) (undo-tree-id4611 . -39) (undo-tree-id4612 . -39) (undo-tree-id4613 . -39) (undo-tree-id4614 . -39) (undo-tree-id4615 . -39) (undo-tree-id4616 . -39) (undo-tree-id4617 . -39) (undo-tree-id4618 . -39) (undo-tree-id4619 . -39) (undo-tree-id4620 . -39) (undo-tree-id4621 . -39) (undo-tree-id4622 . -39) (undo-tree-id4623 . -39) (undo-tree-id4624 . -39) (undo-tree-id4625 . -39) (undo-tree-id4626 . -39) (undo-tree-id4627 . -39) (undo-tree-id4628 . -39) (undo-tree-id4629 . -39) (undo-tree-id4630 . -39) (undo-tree-id4631 . -39) (undo-tree-id4632 . -39) (undo-tree-id4633 . -39) (undo-tree-id4634 . -39) (undo-tree-id4635 . -39) (undo-tree-id4636 . -39) (undo-tree-id4637 . -39) (undo-tree-id4638 . -39) (undo-tree-id4639 . -39) (undo-tree-id4640 . -39) (undo-tree-id4641 . -39) (undo-tree-id4642 . -39) (undo-tree-id4643 . -39) (undo-tree-id4644 . -39) (undo-tree-id4645 . -39) (undo-tree-id4646 . -39) (undo-tree-id4647 . -39) (undo-tree-id4648 . -39) (undo-tree-id4649 . -39) (undo-tree-id4650 . -40) (undo-tree-id4651 . -40) (undo-tree-id4652 . -40) (undo-tree-id4653 . -40) (undo-tree-id4654 . -40) (undo-tree-id4655 . -40) (undo-tree-id4656 . -40) (undo-tree-id4657 . -40) (undo-tree-id4658 . -40) (undo-tree-id4659 . -40) (undo-tree-id4660 . -40) (undo-tree-id4661 . -40) (undo-tree-id4662 . -40) (undo-tree-id4663 . -40) (undo-tree-id4664 . -40) (undo-tree-id4665 . -40) (undo-tree-id4666 . -40) (undo-tree-id4667 . -40) (undo-tree-id4668 . -40) (undo-tree-id4669 . -40) (undo-tree-id4670 . -40) (undo-tree-id4671 . -40) (undo-tree-id4672 . -40) (undo-tree-id4673 . -40) (undo-tree-id4674 . -40) (undo-tree-id4675 . -40) (undo-tree-id4676 . -40) (undo-tree-id4677 . -40) (undo-tree-id4678 . -40) (undo-tree-id4679 . -40) (undo-tree-id4680 . -40) (undo-tree-id4681 . -40) (undo-tree-id4682 . -40) (undo-tree-id4683 . -40) (undo-tree-id4684 . -40) (undo-tree-id4685 . -40) (undo-tree-id4686 . -40) (undo-tree-id4687 . -40) (undo-tree-id4688 . -40) (undo-tree-id4689 . -40) (undo-tree-id4690 . -40) (undo-tree-id4691 . -40) (undo-tree-id4692 . -40) (undo-tree-id4693 . -122) (undo-tree-id4694 . -122) (undo-tree-id4695 . -122) (undo-tree-id4696 . -122) (undo-tree-id4697 . -122) (undo-tree-id4698 . -122) (undo-tree-id4699 . -122) (undo-tree-id4700 . -122) (undo-tree-id4701 . -122) (undo-tree-id4702 . -122) (undo-tree-id4703 . -122) (undo-tree-id4704 . -122) (undo-tree-id4705 . -122) (undo-tree-id4706 . -122) (undo-tree-id4707 . -122) (undo-tree-id4708 . -140) (undo-tree-id4709 . -140) (undo-tree-id4710 . -140) (undo-tree-id4711 . -140) (undo-tree-id4712 . -140) (undo-tree-id4713 . -140) (undo-tree-id4714 . -140) (undo-tree-id4715 . -140) (undo-tree-id4716 . -140) (undo-tree-id4717 . -140) (undo-tree-id4718 . -140) (undo-tree-id4719 . -140) (undo-tree-id4720 . -140) (undo-tree-id4721 . -140) (undo-tree-id4722 . -140) (undo-tree-id4723 . -140) (undo-tree-id4724 . -140) (undo-tree-id4725 . -140) (undo-tree-id4726 . -140) (undo-tree-id4727 . -140) (undo-tree-id4728 . -140) (undo-tree-id4729 . -140) (undo-tree-id4730 . -140) (undo-tree-id4731 . -140) (undo-tree-id4732 . -140) (undo-tree-id4733 . -140) (undo-tree-id4734 . -140) (undo-tree-id4735 . -140) (undo-tree-id4736 . -140) (undo-tree-id4737 . -140) (undo-tree-id4738 . -140) (undo-tree-id4739 . -140) (undo-tree-id4740 . -140) (undo-tree-id4741 . -140) (undo-tree-id4742 . -140) (undo-tree-id4743 . -140) (undo-tree-id4744 . -140) (undo-tree-id4745 . -140) (undo-tree-id4746 . -140) (undo-tree-id4747 . -140) (undo-tree-id4748 . -140) (undo-tree-id4749 . -140) (undo-tree-id4750 . -140) (undo-tree-id4751 . -140) (undo-tree-id4752 . -82) (undo-tree-id4753 . -82) (undo-tree-id4754 . -82) (undo-tree-id4755 . -82) (undo-tree-id4756 . -82) (undo-tree-id4757 . -82) (undo-tree-id4758 . -82) (undo-tree-id4759 . -82) (undo-tree-id4760 . -82) (undo-tree-id4761 . -82) (undo-tree-id4762 . -82) (undo-tree-id4763 . -82) (undo-tree-id4764 . -82) (undo-tree-id4765 . -82) (undo-tree-id4766 . -82) (undo-tree-id4767 . -82) (undo-tree-id4768 . -82) (undo-tree-id4769 . -82) (undo-tree-id4770 . -82) (undo-tree-id4771 . -82) (undo-tree-id4772 . -82) (undo-tree-id4773 . -82) (undo-tree-id4774 . -82) (undo-tree-id4775 . -82) (undo-tree-id4776 . -82) (undo-tree-id4777 . -82) (undo-tree-id4778 . -82) (undo-tree-id4779 . -82) (undo-tree-id4780 . -82) (undo-tree-id4781 . -82) (undo-tree-id4782 . -82) (undo-tree-id4783 . -82) (undo-tree-id4784 . -140) 2495 (t 25756 46444 506352 271000)) ((2413 . 2553)) (25756 46465 549479 243000) 0 nil] [nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -2492) (nil face nil 2491 . 2492) (nil font-lock-multiline nil 2491 . 2492) (nil src-block nil 2491 . 2492) (nil font-lock-fontified nil 2491 . 2492) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2491 . 2492) (2491 . 2492) 2452 (t 25756 46444 506352 271000)) ((#("
" 0 1 (src-block nil font-lock-fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-multiline nil face nil)) . 2491) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2491 . 2492) (nil font-lock-fontified t 2491 . 2492) (nil src-block t 2491 . 2492) (nil font-lock-multiline t 2491 . 2492) (nil face (font-lock-comment-face org-block) 2491 . 2492) (2492 . 2493)) (25756 46458 303802 616000) 0 nil] [nil nil ((#("# Items: [0,2,4,6,8,10,12]This function is the one you will call to apply any preprocessing you want" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2 100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 2452) (undo-tree-id4600 . -99) (undo-tree-id4601 . -100) (undo-tree-id4602 . -100) (undo-tree-id4603 . -100) (t 25756 46444 506352 271000)) ((2452 . 2552)) (25756 46455 960559 471000) 0 nil])
([nil nil ((#("# Items: [0,2,4,6,8,10,12]This function is the one you will call to apply any preprocessing you want
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 40 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 42 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 68 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 74 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 77 100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 100 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 2453) (undo-tree-id4785 . -100) (undo-tree-id4786 . 101) (undo-tree-id4787 . -100) (undo-tree-id4788 . -39) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -83) (undo-tree-id4833 . -83) (undo-tree-id4834 . -83) (undo-tree-id4835 . -83) (undo-tree-id4836 . -83) (undo-tree-id4837 . -83) (undo-tree-id4838 . -83) (undo-tree-id4839 . -83) (undo-tree-id4840 . -83) (undo-tree-id4841 . -83) (undo-tree-id4842 . -83) (undo-tree-id4843 . -83) (undo-tree-id4844 . -83) (undo-tree-id4845 . -83) (undo-tree-id4846 . -83) (undo-tree-id4847 . -101) (undo-tree-id4848 . -101) (undo-tree-id4849 . -101) (undo-tree-id4850 . -101) (undo-tree-id4851 . -101) (undo-tree-id4852 . -101) (undo-tree-id4853 . -101) (undo-tree-id4854 . -101) (undo-tree-id4855 . -101) (undo-tree-id4856 . -101) (undo-tree-id4857 . -101) (undo-tree-id4858 . -101) (undo-tree-id4859 . -101) (undo-tree-id4860 . -101) (undo-tree-id4861 . -101) (undo-tree-id4862 . -101) (undo-tree-id4863 . -101) (undo-tree-id4864 . -101) (undo-tree-id4865 . -101) (undo-tree-id4866 . -101) (undo-tree-id4867 . -101) (undo-tree-id4868 . -101) (undo-tree-id4869 . -101) (undo-tree-id4870 . -101) (undo-tree-id4871 . -101) (undo-tree-id4872 . -101) (undo-tree-id4873 . -101) (undo-tree-id4874 . -101) (undo-tree-id4875 . -101) (undo-tree-id4876 . -101) (undo-tree-id4877 . -101) (undo-tree-id4878 . -101) (undo-tree-id4879 . -101) (undo-tree-id4880 . -101) (undo-tree-id4881 . -101) (undo-tree-id4882 . -101) (undo-tree-id4883 . -101) (undo-tree-id4884 . -101) (undo-tree-id4885 . -101) (undo-tree-id4886 . -101) (undo-tree-id4887 . -101) (undo-tree-id4888 . -101) (undo-tree-id4889 . -101) (undo-tree-id4890 . -101) (undo-tree-id4891 . -43) (undo-tree-id4892 . -43) (undo-tree-id4893 . -43) (undo-tree-id4894 . -43) (undo-tree-id4895 . -43) (undo-tree-id4896 . -43) (undo-tree-id4897 . -43) (undo-tree-id4898 . -43) (undo-tree-id4899 . -43) (undo-tree-id4900 . -43) (undo-tree-id4901 . -43) (undo-tree-id4902 . -43) (undo-tree-id4903 . -43) (undo-tree-id4904 . -43) (undo-tree-id4905 . -43) (undo-tree-id4906 . -43) (undo-tree-id4907 . -43) (undo-tree-id4908 . -43) (undo-tree-id4909 . -43) (undo-tree-id4910 . -43) (undo-tree-id4911 . -43) (undo-tree-id4912 . -43) (undo-tree-id4913 . -43) (undo-tree-id4914 . -43) (undo-tree-id4915 . -43) (undo-tree-id4916 . -43) (undo-tree-id4917 . -43) (undo-tree-id4918 . -43) (undo-tree-id4919 . -43) (undo-tree-id4920 . -43) (undo-tree-id4921 . -43) (undo-tree-id4922 . -43) (undo-tree-id4923 . -43) (undo-tree-id4924 . -43) (undo-tree-id4925 . -43) (undo-tree-id4926 . -43) (undo-tree-id4927 . -43) (undo-tree-id4928 . -43) (undo-tree-id4929 . -43) (undo-tree-id4930 . -43) (undo-tree-id4931 . -43) (undo-tree-id4932 . -43) (undo-tree-id4933 . -43) (undo-tree-id4934 . -43) (undo-tree-id4935 . -43) (undo-tree-id4936 . -43) (undo-tree-id4937 . -43) (undo-tree-id4938 . -43) (undo-tree-id4939 . -43) (undo-tree-id4940 . -43) (undo-tree-id4941 . -43) (undo-tree-id4942 . -43) (undo-tree-id4943 . -43) (undo-tree-id4944 . -43) (undo-tree-id4945 . -43) (undo-tree-id4946 . -43) (undo-tree-id4947 . -43) (undo-tree-id4948 . -43) (undo-tree-id4949 . -43) (undo-tree-id4950 . -43) (undo-tree-id4951 . -43) (undo-tree-id4952 . -43) (undo-tree-id4953 . -43) (undo-tree-id4954 . -43) (undo-tree-id4955 . -43) (undo-tree-id4956 . -43) (undo-tree-id4957 . -43) (undo-tree-id4958 . -43) (undo-tree-id4959 . -43) (undo-tree-id4960 . -101)) nil (25756 46472 80847 689000) 0 nil])
nil
nil
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2453) (undo-tree-id4961 . 1) (undo-tree-id4962 . -1) (t 25756 46472 94575 568000)) nil (25756 46473 372872 296000) 0 nil])
([nil nil ((#("to your data. Sometimes this will include computations that can be quite
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 51 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2463) (undo-tree-id4971 . -72) (undo-tree-id4972 . -73) (t 25756 46473 382586 24000)) nil (25756 46508 609620 272000) 0 nil])
([nil nil ((#("intensive, such as reshaping or rotating an image, so you will usually want
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2463) (undo-tree-id4969 . -75) (undo-tree-id4970 . -76)) nil (25756 46508 609617 265000) 0 nil])
([nil nil ((#("to spawn multiple threads to speed things up: it’s as simple as setting the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2463) (undo-tree-id4967 . -75) (undo-tree-id4968 . -76)) nil (25756 46509 63082 512000) 0 nil])
([nil nil ((#("num_parallel_calls argument. Note that " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 4 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 13 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 18 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2463) (undo-tree-id4973 . -38) (undo-tree-id4974 . -38) (undo-tree-id4975 . -38) (undo-tree-id4976 . 39) (undo-tree-id4977 . -3) (undo-tree-id4978 . -39) (undo-tree-id4979 . -38) (undo-tree-id4980 . -2) (undo-tree-id4981 . -2) (undo-tree-id4982 . -2) (undo-tree-id4983 . -2) (undo-tree-id4984 . -2) (undo-tree-id4985 . -2) (undo-tree-id4986 . -2) (undo-tree-id4987 . -2) (undo-tree-id4988 . -3) (undo-tree-id4989 . -11) (undo-tree-id4990 . -12) (undo-tree-id4991 . -17) (undo-tree-id4992 . -26) (undo-tree-id4993 . -27) (undo-tree-id4994 . -32) (undo-tree-id4995 . -37) (undo-tree-id4996 . -38) (undo-tree-id4997 . -38) (undo-tree-id4998 . -39) 2501) nil (25756 46513 644241 656000) 0 nil] [nil nil ((#("num_parallel_calls argument. Note that the function you pass to the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 4 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 13 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 18 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2463) (undo-tree-id4963 . -67) (undo-tree-id4964 . 68) (undo-tree-id4965 . -3) (undo-tree-id4966 . -68)) ((2463 . 2531) (t 25756 46508 618873 101000)) (25756 46508 609605 864000) 0 nil])
([nil nil ((2491 . 2492) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2491) (undo-tree-id4999 . -1) 2463 (t 25756 46513 654914 289000)) nil (25756 46516 203302 115000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2542) (nil fontified nil 2541 . 2542) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2541 . 2542) (2541 . 2542) 2491) nil (25756 46516 203277 562000) 0 nil])
([nil nil ((#("(see Chapter 12).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2542) (undo-tree-id5232 . -17) (undo-tree-id5233 . 18) (undo-tree-id5234 . -1) (undo-tree-id5235 . 3) (undo-tree-id5236 . -16) (undo-tree-id5237 . -18) (t 25756 46516 206935 176000)) nil (25756 46578 871450 13000) 0 nil])
([nil nil ((2541 . 2542)) nil (25756 46578 871446 32000) 0 nil])
([nil nil ((#("While the map() method applies a transformation to each item," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id5230 . -60) (undo-tree-id5231 . -61)) nil (25756 46578 871445 274000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 2543) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1)) nil (25756 46578 871442 883000) 0 nil])
([nil nil ((2546 . 2547) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2546) (undo-tree-id5227 . -1) 2543) nil (25756 46578 871440 832000) 0 nil])
([nil nil ((2614 . 2615)) nil (25756 46578 871439 227000) 0 nil])
([nil nil ((#("For
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2615) (undo-tree-id5224 . -3) (undo-tree-id5225 . 4) (undo-tree-id5226 . -4)) nil (25756 46578 871438 418000) 0 nil])
([nil nil ((#("example, the following code applies the unbatch() function to the dataset
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2615) (undo-tree-id5221 . -73) (undo-tree-id5222 . 74) (undo-tree-id5223 . -74)) nil (25756 46578 871435 516000) 0 nil])
([nil nil ((#("(this function is currently experimental, but it will most likely move to the
core API in a future release)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2615) (undo-tree-id5214 . -106) (undo-tree-id5215 . 107) (undo-tree-id5216 . 107) (undo-tree-id5217 . -1) (undo-tree-id5218 . 1) (undo-tree-id5219 . -107) (undo-tree-id5220 . -107)) nil (25756 46578 871432 933000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2615) (undo-tree-id5211 . 1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1)) nil (25756 46578 871427 275000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 2615) (undo-tree-id5208 . 1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1)) nil (25756 46578 871424 681000) 0 nil])
([nil nil ((#("Each item in the new dataset will be a single-
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2615) (undo-tree-id5205 . -46) (undo-tree-id5206 . 47) (undo-tree-id5207 . -47)) nil (25756 46578 871421 992000) 0 nil])
([nil nil ((#("integer tensor instead of a batch of seven integers:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2615) (undo-tree-id5202 . -52) (undo-tree-id5203 . 53) (undo-tree-id5204 . -53)) nil (25756 46578 871419 386000) 0 nil])
([nil nil ((2627 . 2633) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2627 2633 nil nil nil t #s(yas--exit 2651 nil))) #s(yas--exit 2651 nil) 4 nil #s(yas--field 1 2627 2633 nil nil nil t #s(yas--exit 2651 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2645) (undo-tree-id5152 . -2) (2615 . 2658) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2615) (undo-tree-id5153 . -1) (undo-tree-id5154 . -2) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -2) (undo-tree-id5192 . -2) (undo-tree-id5193 . -2) (undo-tree-id5194 . -2) (undo-tree-id5195 . -2) (undo-tree-id5196 . -2) (undo-tree-id5197 . -2) (undo-tree-id5198 . -2) (undo-tree-id5199 . -2) (undo-tree-id5200 . -2) (undo-tree-id5201 . -2) 2617 (2615 . 2617) (2614 . 2615) 2543) nil (25756 46578 871414 974000) 0 nil])
([nil nil ((apply yas--snippet-revive 2615 2662 #s(yas--snippet nil (#s(yas--field 1 2627 2633 nil nil nil t #s(yas--exit 2651 nil))) #s(yas--exit 2651 nil) 4 nil #s(yas--field 1 2627 2633 nil nil nil t #s(yas--exit 2651 nil)) nil nil))) nil (25756 46578 871377 739000) 0 nil])
([nil nil ((#(">>> dataset = dataset.apply(tf.data.experimental.unbatch()) # Items:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2663) (undo-tree-id5129 . -68) (undo-tree-id5130 . -17) (undo-tree-id5131 . -17) (undo-tree-id5132 . -17) (undo-tree-id5133 . -17) (undo-tree-id5134 . -17) (undo-tree-id5135 . -17) (undo-tree-id5136 . -17) (undo-tree-id5137 . -17) (undo-tree-id5138 . -17) (undo-tree-id5139 . -17) (undo-tree-id5140 . -17) (undo-tree-id5141 . -17) (undo-tree-id5142 . -17) (undo-tree-id5143 . -17) (undo-tree-id5144 . -17) (undo-tree-id5145 . -17) (undo-tree-id5146 . -17) (undo-tree-id5147 . -17) (undo-tree-id5148 . -17) (undo-tree-id5149 . -17) (undo-tree-id5150 . -17) (undo-tree-id5151 . -69) 2680) nil (25756 46578 871376 64000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2651 . 2652) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2720) (2651 . 2721)) nil (25756 46578 871358 292000) 0 nil])
([nil nil ((#(">>>" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 2652) (undo-tree-id5124 . -2) (undo-tree-id5125 . 3) (undo-tree-id5126 . -1) (undo-tree-id5127 . -3) (undo-tree-id5128 . -3)) nil (25756 46578 871357 213000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2652) (undo-tree-id5121 . 1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1)) nil (25756 46578 871353 266000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2650) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1)) nil (25756 46578 871348 240000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2650) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1)) nil (25756 46578 870985 504000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2715) (undo-tree-id5005 . -1)) nil (25756 46578 870931 28000) 0 nil])
([nil nil ((#("# Items:" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 2706) (undo-tree-id5000 . -7) (undo-tree-id5001 . -8) (undo-tree-id5002 . -8) (undo-tree-id5003 . -8) (undo-tree-id5004 . -8)) nil (25756 46578 870926 900000) 0 nil])
([nil nil ((#("0,2,4,...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2717) (undo-tree-id5238 . -9) (undo-tree-id5239 . -8) (undo-tree-id5240 . -8) (undo-tree-id5241 . -8) (undo-tree-id5242 . -8) (undo-tree-id5243 . -8) (undo-tree-id5244 . -8) (undo-tree-id5245 . -8) (undo-tree-id5246 . -8) (undo-tree-id5247 . -8) (undo-tree-id5248 . -8) (undo-tree-id5249 . -8) (undo-tree-id5250 . -8) (undo-tree-id5251 . -8) (undo-tree-id5252 . -8) (undo-tree-id5253 . -8) (undo-tree-id5254 . -8) (undo-tree-id5255 . -8) (undo-tree-id5256 . -8) (undo-tree-id5257 . -8) (undo-tree-id5258 . -10) 2725 (t 25756 46578 883451 109000)) nil (25756 46581 165688 47000) 0 nil])
([nil nil ((2716 . 2717) (t 25756 46581 171470 46000) 2715) nil (25756 46583 475483 556000) 0 nil])
([nil nil ((#("It is also possible to " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2718) (undo-tree-id5259 . -22) (undo-tree-id5260 . -22) (undo-tree-id5261 . -22) (undo-tree-id5262 . -23) (undo-tree-id5263 . -22) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -4) (undo-tree-id5273 . -4) (undo-tree-id5274 . -4) (undo-tree-id5275 . -4) (undo-tree-id5276 . -4) (undo-tree-id5277 . -4) (undo-tree-id5278 . -4) (undo-tree-id5279 . -4) (undo-tree-id5280 . -9) (undo-tree-id5281 . -9) (undo-tree-id5282 . -9) (undo-tree-id5283 . -9) (undo-tree-id5284 . -9) (undo-tree-id5285 . -9) (undo-tree-id5286 . -9) (undo-tree-id5287 . -9) (undo-tree-id5288 . -18) (undo-tree-id5289 . -18) (undo-tree-id5290 . -18) (undo-tree-id5291 . -18) (undo-tree-id5292 . -18) (undo-tree-id5293 . -18) (undo-tree-id5294 . -18) (undo-tree-id5295 . -18) (undo-tree-id5296 . -21) (undo-tree-id5297 . -21) (undo-tree-id5298 . -21) (undo-tree-id5299 . -21) (undo-tree-id5300 . -21) (undo-tree-id5301 . -21) (undo-tree-id5302 . -21) (undo-tree-id5303 . -21) (undo-tree-id5304 . -20) (undo-tree-id5305 . -20) (undo-tree-id5306 . -20) (undo-tree-id5307 . -20) (undo-tree-id5308 . -20) (undo-tree-id5309 . -20) (undo-tree-id5310 . -20) (undo-tree-id5311 . -20) (undo-tree-id5312 . -19) (undo-tree-id5313 . -19) (undo-tree-id5314 . -19) (undo-tree-id5315 . -19) (undo-tree-id5316 . -19) (undo-tree-id5317 . -19) (undo-tree-id5318 . -19) (undo-tree-id5319 . -19) (undo-tree-id5320 . -20) (undo-tree-id5321 . -20) (undo-tree-id5322 . -20) (undo-tree-id5323 . -20) (undo-tree-id5324 . -20) (undo-tree-id5325 . -20) (undo-tree-id5326 . -20) (undo-tree-id5327 . -20) (undo-tree-id5328 . -21) (undo-tree-id5329 . -21) (undo-tree-id5330 . -21) (undo-tree-id5331 . -21) (undo-tree-id5332 . -21) (undo-tree-id5333 . -21) (undo-tree-id5334 . -21) (undo-tree-id5335 . -21) (undo-tree-id5336 . -22) (undo-tree-id5337 . -22) (undo-tree-id5338 . -22) (undo-tree-id5339 . -22) (undo-tree-id5340 . -22) (undo-tree-id5341 . -22) (undo-tree-id5342 . -22) (undo-tree-id5343 . -22) (undo-tree-id5344 . -22) (undo-tree-id5345 . -23) 2740 (t 25756 46583 479489 155000)) nil (25756 46601 461981 938000) 0 nil])
([nil nil ((2718 . 2722) (#("simply " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2718) (undo-tree-id5522 . -6) (undo-tree-id5523 . -6) (undo-tree-id5524 . -6) (undo-tree-id5525 . -7) (undo-tree-id5526 . -6) (undo-tree-id5527 . -5) (undo-tree-id5528 . -5) (undo-tree-id5529 . -5) (undo-tree-id5530 . -5) (undo-tree-id5531 . -5) (undo-tree-id5532 . -5) (undo-tree-id5533 . -5) (undo-tree-id5534 . -5) (undo-tree-id5535 . -7) (undo-tree-id5536 . -7) (undo-tree-id5537 . -7) (undo-tree-id5538 . -7) (undo-tree-id5539 . -7) (undo-tree-id5540 . -7) (undo-tree-id5541 . -7) (undo-tree-id5542 . -7) (undo-tree-id5543 . -6) (undo-tree-id5544 . -6) (undo-tree-id5545 . -6) (undo-tree-id5546 . -6) (undo-tree-id5547 . -6) (undo-tree-id5548 . -6) (undo-tree-id5549 . -6) (undo-tree-id5550 . -6) (undo-tree-id5551 . -6) (undo-tree-id5552 . -7) (undo-tree-id5553 . -7) 2724 (t 25756 46601 475638 400000)) nil (25756 46627 258028 809000) 0 nil])
([nil nil ((2783 . 2786) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -2783) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) 2784 (2780 . 2784) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2780 2786 nil nil nil t #s(yas--exit 2804 nil))) #s(yas--exit 2804 nil) 5 nil #s(yas--field 1 2780 2786 nil nil nil t #s(yas--exit 2804 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2798) (undo-tree-id5472 . -2) (2768 . 2811) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2768) (undo-tree-id5473 . -1) (undo-tree-id5474 . -2) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -2) (undo-tree-id5512 . -2) (undo-tree-id5513 . -2) (undo-tree-id5514 . -2) (undo-tree-id5515 . -2) (undo-tree-id5516 . -2) (undo-tree-id5517 . -2) (undo-tree-id5518 . -2) (undo-tree-id5519 . -2) (undo-tree-id5520 . -2) (undo-tree-id5521 . -2) 2770 (2768 . 2770) (2767 . 2768) 2718) nil (25756 46627 258006 498000) 0 nil])
([nil nil ((apply yas--snippet-revive 2768 2815 #s(yas--snippet nil (#s(yas--field 1 2780 2786 nil nil nil t #s(yas--exit 2804 nil))) #s(yas--exit 2804 nil) 5 nil #s(yas--field 1 2780 2786 nil nil nil t #s(yas--exit 2804 nil)) nil nil))) nil (25756 46627 257955 234000) 0 nil])
([nil nil ((#(">>> dataset = dataset.filter(lambda x: x < 10) # Items: 0 2 4 6 8 0 2 4
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2816) (undo-tree-id5440 . -71) (undo-tree-id5441 . -17) (undo-tree-id5442 . -17) (undo-tree-id5443 . -17) (undo-tree-id5444 . -17) (undo-tree-id5445 . -17) (undo-tree-id5446 . -17) (undo-tree-id5447 . -17) (undo-tree-id5448 . -17) (undo-tree-id5449 . -17) (undo-tree-id5450 . -17) (undo-tree-id5451 . -17) (undo-tree-id5452 . -17) (undo-tree-id5453 . -17) (undo-tree-id5454 . -17) (undo-tree-id5455 . -17) (undo-tree-id5456 . -17) (undo-tree-id5457 . -17) (undo-tree-id5458 . -17) (undo-tree-id5459 . -17) (undo-tree-id5460 . -72) 2833) nil (25756 46627 257953 522000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2803 . 2804) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2875) (2803 . 2876)) nil (25756 46627 257939 384000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 2804) (undo-tree-id5436 . -3) (undo-tree-id5437 . 4) (undo-tree-id5438 . -1) (undo-tree-id5439 . -4)) nil (25756 46627 257937 831000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2803) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1)) nil (25756 46627 257932 950000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2871) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1)) nil (25756 46627 257898 336000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2871) (undo-tree-id5365 . -1)) nil (25756 46627 257884 613000) 0 nil])
([nil nil ((#("6...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5346 . -4) (undo-tree-id5347 . -3) (undo-tree-id5348 . -3) (undo-tree-id5349 . -3) (undo-tree-id5350 . -3) (undo-tree-id5351 . -3) (undo-tree-id5352 . -3) (undo-tree-id5353 . -3) (undo-tree-id5354 . -3) (undo-tree-id5355 . -3) (undo-tree-id5356 . -3) (undo-tree-id5357 . -3) (undo-tree-id5358 . -3) (undo-tree-id5359 . -3) (undo-tree-id5360 . -3) (undo-tree-id5361 . -3) (undo-tree-id5362 . -3) (undo-tree-id5363 . -3) (undo-tree-id5364 . -5)) nil (25756 46627 257876 750000) 0 nil])
([nil nil ((#("You will often want to look at just a few items from a dataset. You can use
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5574 . -75) (undo-tree-id5575 . -76) (t 25756 46627 271853 39000)) nil (25756 46641 647143 320000) 0 nil])
([nil nil ((#("the take() method for that:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5572 . -27) (undo-tree-id5573 . -28)) nil (25756 46641 647139 734000) 0 nil])
([nil nil ((#(">>> for item in dataset.take(3):
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5568 . -32) (undo-tree-id5569 . 33) (undo-tree-id5570 . -1) (undo-tree-id5571 . -33)) nil (25756 46641 647137 645000) 0 nil])
([nil nil ((#("...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5566 . -3) (undo-tree-id5567 . -4)) nil (25756 46641 647134 287000) 0 nil])
([nil nil ((#("print(item)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5564 . -11) (undo-tree-id5565 . -12)) nil (25756 46641 647132 236000) 0 nil])
([nil nil ((#("...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5562 . -3) (undo-tree-id5563 . -4)) nil (25756 46641 647130 157000) 0 nil])
([nil nil ((#("tf.Tensor(0, shape=(), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5558 . -35) (undo-tree-id5559 . 36) (undo-tree-id5560 . -2) (undo-tree-id5561 . -36)) nil (25756 46641 647127 438000) 0 nil])
([nil nil ((#("tf.Tensor(2, shape=(), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2881) (undo-tree-id5556 . -35) (undo-tree-id5557 . -36)) nil (25756 46641 647123 282000) 0 nil])
([nil nil ((#("tf.Tensor(4, shape=(), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 35 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2881) (undo-tree-id5554 . -35) (undo-tree-id5555 . -36)) nil (25756 46641 647117 944000) 0 nil])
([nil nil ((#("# Items: 0 2 4 6 8 0 2 4" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 2846) (undo-tree-id5576 . -23) (undo-tree-id5577 . -24) (undo-tree-id5578 . -24) (t 25756 46641 659973 112000)) nil (25756 46652 309027 555000) 0 nil])
([nil nil ((2857 . 2858) (t 25756 46652 316062 197000) 2857) nil (25756 46814 235259 995000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9553 . 9554) (nil fontified nil 9504 . 9554) (nil fontified nil 9435 . 9504) (nil fontified nil 9365 . 9435) (nil fontified nil 9302 . 9365) (nil fontified nil 9241 . 9302) (nil fontified nil 9179 . 9241) (nil fontified nil 9117 . 9179) (nil fontified nil 9056 . 9117) (nil fontified nil 9052 . 9056) (nil fontified nil 9032 . 9052) (nil fontified nil 9028 . 9032) (nil fontified nil 8995 . 9028) (nil fontified nil 8956 . 8995) (nil fontified nil 8884 . 8956) (nil fontified nil 8813 . 8884) (nil fontified nil 8752 . 8813) (nil fontified nil 8679 . 8752) (nil fontified nil 8608 . 8679) (nil fontified nil 8530 . 8608) (nil fontified nil 8456 . 8530) (nil fontified nil 8391 . 8456) (nil fontified nil 8308 . 8391) (nil fontified nil 8281 . 8308) (nil fontified nil 8211 . 8281) (nil fontified nil 8142 . 8211) (nil fontified nil 8068 . 8142) (nil fontified nil 7998 . 8068) (nil fontified nil 7927 . 7998) (nil fontified nil 7851 . 7927) (nil fontified nil 7774 . 7851) (nil fontified nil 7698 . 7774) (nil fontified nil 7631 . 7698) (nil fontified nil 7560 . 7631) (nil fontified nil 7536 . 7560) (nil fontified nil 7476 . 7536) (nil fontified nil 7437 . 7476) (nil fontified nil 7423 . 7437) (nil fontified nil 7381 . 7423) (nil fontified nil 7301 . 7381) (nil fontified nil 7229 . 7301) (nil fontified nil 7188 . 7229) (nil fontified nil 7113 . 7188) (nil fontified nil 7039 . 7113) (nil fontified nil 6967 . 7039) (nil fontified nil 6933 . 6967) (nil fontified nil 6869 . 6933) (nil fontified nil 6757 . 6869) (nil fontified nil 6720 . 6757) (nil fontified nil 6700 . 6720) (nil fontified nil 6644 . 6700) (nil fontified nil 6568 . 6644) (nil fontified nil 6562 . 6568) (nil fontified nil 6505 . 6562) (nil fontified nil 6446 . 6505) (nil fontified nil 6386 . 6446) (nil fontified nil 6383 . 6386) (nil fontified nil 6309 . 6383) (nil fontified nil 6281 . 6309) (nil fontified nil 6207 . 6281) (nil fontified nil 6131 . 6207) (nil fontified nil 6049 . 6131) (nil fontified nil 5977 . 6049) (nil fontified nil 5938 . 5977) (nil fontified nil 5859 . 5938) (nil fontified nil 5786 . 5859) (nil fontified nil 5715 . 5786) (nil fontified nil 5642 . 5715) (nil fontified nil 5567 . 5642) (nil fontified nil 5493 . 5567) (nil fontified nil 5415 . 5493) (nil fontified nil 5348 . 5415) (nil fontified nil 5273 . 5348) (nil fontified nil 5205 . 5273) (nil fontified nil 5128 . 5205) (nil fontified nil 5053 . 5128) (nil fontified nil 4914 . 5053) (nil fontified nil 4844 . 4914) (nil fontified nil 4772 . 4844) (nil fontified nil 4739 . 4772) (nil fontified nil 4671 . 4739) (nil fontified nil 4587 . 4671) (nil fontified nil 4500 . 4587) (nil fontified nil 4496 . 4500) (nil fontified nil 4454 . 4496) (nil fontified nil 4402 . 4454) (nil fontified nil 4350 . 4402) (nil fontified nil 4298 . 4350) (nil fontified nil 4246 . 4298) (nil fontified nil 4242 . 4246) (nil fontified nil 4230 . 4242) (nil fontified nil 4226 . 4230) (nil fontified nil 4201 . 4226) (nil fontified nil 4138 . 4201) (nil fontified nil 4066 . 4138) (nil fontified nil 4055 . 4066) (nil fontified nil 3980 . 4055) (nil fontified nil 3902 . 3980) (nil fontified nil 3836 . 3902) (nil fontified nil 3765 . 3836) (nil fontified nil 3689 . 3765) (nil fontified nil 3619 . 3689) (nil fontified nil 3549 . 3619) (nil fontified nil 3475 . 3549) (nil fontified nil 3400 . 3475) (nil fontified nil 3322 . 3400) (nil fontified nil 3248 . 3322) (nil fontified nil 3170 . 3248) (nil fontified nil 3020 . 3170) (nil fontified nil 2944 . 3020) (nil fontified nil 2877 . 2944) (nil fontified nil 2858 . 2877) (2858 . 9554)) nil (25756 46814 235255 604000) 0 nil])
([nil nil ((2858 . 2860)) nil (25756 46814 235241 442000) 0 nil])
([nil nil ((9556 . 9557)) nil (25756 46814 235237 80000) 0 nil])
([nil nil ((#("As you know, " 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2879) (undo-tree-id5579 . -12) (undo-tree-id5580 . -12) (undo-tree-id5581 . -12) (undo-tree-id5582 . -13) (undo-tree-id5583 . -12) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -5) (undo-tree-id5593 . -5) (undo-tree-id5594 . -5) (undo-tree-id5595 . -5) (undo-tree-id5596 . -5) (undo-tree-id5597 . -5) (undo-tree-id5598 . -5) (undo-tree-id5599 . -5) (undo-tree-id5600 . -10) (undo-tree-id5601 . -10) (undo-tree-id5602 . -10) (undo-tree-id5603 . -10) (undo-tree-id5604 . -10) (undo-tree-id5605 . -10) (undo-tree-id5606 . -10) (undo-tree-id5607 . -10) (undo-tree-id5608 . -11) (undo-tree-id5609 . -11) (undo-tree-id5610 . -11) (undo-tree-id5611 . -11) (undo-tree-id5612 . -11) (undo-tree-id5613 . -11) (undo-tree-id5614 . -11) (undo-tree-id5615 . -11) (undo-tree-id5616 . -12) (undo-tree-id5617 . -12) (undo-tree-id5618 . -12) (undo-tree-id5619 . -12) (undo-tree-id5620 . -12) (undo-tree-id5621 . -12) (undo-tree-id5622 . -12) (undo-tree-id5623 . -12) (undo-tree-id5624 . -12) (undo-tree-id5625 . -13) 2891 (t 25756 46814 297430 992000)) nil (25756 46825 62731 997000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3152) (nil fontified nil 3151 . 3152) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3151 . 3152) (3151 . 3152) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3074) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (nil fontified nil 3073 . 3074) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3073 . 3074) (3073 . 3074) 3074 (t 25756 46825 77522 953000)) nil (25756 46844 806199 976000) 0 nil])
([nil nil ((#("(see Chapter 4)" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2990) (undo-tree-id5638 . -14) (undo-tree-id5639 . -15) 2933) nil (25756 46844 806164 496000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2989) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1)) nil (25756 46861 761657 71000) 0 nil])
([nil nil ((3075 . 3077) (t 25756 46844 817691 593000)) nil (25756 46869 297479 305000) 0 nil] [nil nil ((#("It will create a new dataset that will start by filling up a" 0 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3075) (undo-tree-id5690 . -59) (undo-tree-id5691 . -60) (undo-tree-id5692 . -60) (t 25756 46844 817691 593000)) ((3075 . 3135)) (25756 46861 380282 947000) 0 nil])
([nil nil ((3137 . 3138) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3137) (undo-tree-id5693 . -1) 3077 (t 25756 46869 309901 265000)) nil (25756 46870 800035 632000) 0 nil])
([nil nil ((#("buffer
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3076) (undo-tree-id5688 . -6) (undo-tree-id5689 . -7)) ((3076 . 3083)) (25756 46861 379986 44000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3076) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (t 25756 46870 817914 190000)) nil (25756 46879 234436 573000) 0 nil])
nil
([nil nil ((3188 . 3190) (t 25756 46879 249986 488000)) nil (25756 46893 899714 218000) 0 nil])
([nil nil ((3375 . 3376) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3375) (undo-tree-id5785 . -1) (3297 . 3298) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3297) (undo-tree-id5786 . -1) (3223 . 3224) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3223) (undo-tree-id5787 . -1) 3190 (t 25756 46893 906112 281000)) nil (25756 46976 636721 74000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3427) (nil fontified nil 3426 . 3427) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3426 . 3427) (3426 . 3427) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3346) (nil fontified nil 3345 . 3346) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3345 . 3346) (3345 . 3346) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3269) (nil fontified nil 3268 . 3269) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3268 . 3269) (3268 . 3269) 3375) nil (25756 46976 636716 669000) 0 nil])
([nil nil ((#("At this point it continues to pull" 0 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3392) (undo-tree-id5782 . -33) (undo-tree-id5783 . -34) (undo-tree-id5784 . -34)) nil (25756 46976 636714 252000) 0 nil])
([nil nil ((#("out items randomly from
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5778 . -23) (undo-tree-id5779 . -23) (undo-tree-id5780 . 1) (undo-tree-id5781 . -24)) nil (25756 46976 636711 725000) 0 nil])
([nil nil ((#("the buffer until it is empty." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5774 . -28) (undo-tree-id5775 . 29) (undo-tree-id5776 . 29) (undo-tree-id5777 . -29)) nil (25756 46976 636706 818000) 0 nil])
([nil nil ((#(" You must specify the buffer size, and it is
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3393) (undo-tree-id5770 . -44) (undo-tree-id5771 . 45) (undo-tree-id5772 . 45) (undo-tree-id5773 . -45)) nil (25756 46976 636703 112000) 0 nil])
([nil nil ((#("important to make it large enough, or else shuffling will not be very
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5766 . -69) (undo-tree-id5767 . 70) (undo-tree-id5768 . 70) (undo-tree-id5769 . -70)) nil (25756 46976 636699 998000) 0 nil])
([nil nil ((#("effective" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5762 . -8) (undo-tree-id5763 . 9) (undo-tree-id5764 . 9) (undo-tree-id5765 . -9)) nil (25756 46976 636696 731000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5759 . 1) (undo-tree-id5760 . 1) (undo-tree-id5761 . -1)) nil (25756 46976 636693 740000) 0 nil])
([nil nil ((#("1 " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5755 . -1) (undo-tree-id5756 . 2) (undo-tree-id5757 . 2) (undo-tree-id5758 . -2)) nil (25756 46976 636690 317000) 0 nil])
([nil nil ((#("Just don’t exceed the amount of RAM you have, and even if
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5751 . -57) (undo-tree-id5752 . 58) (undo-tree-id5753 . 58) (undo-tree-id5754 . -58)) nil (25756 46976 636685 672000) 0 nil])
([nil nil ((#("you have plenty of it, there’s no need to go beyond the dataset’s size. You
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5747 . -75) (undo-tree-id5748 . 76) (undo-tree-id5749 . 76) (undo-tree-id5750 . -76)) nil (25756 46976 636682 481000) 0 nil])
([nil nil ((#("can provide a random seed if you want the same random order every time
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5743 . -70) (undo-tree-id5744 . 71) (undo-tree-id5745 . 71) (undo-tree-id5746 . -71)) nil (25756 46976 636678 785000) 0 nil])
([nil nil ((#("you run your program. For example, the following code creates and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5739 . -65) (undo-tree-id5740 . 66) (undo-tree-id5741 . 66) (undo-tree-id5742 . -66)) nil (25756 46976 636675 683000) 0 nil])
([nil nil ((#("displays a dataset containing the integers 0 to 9, repeated 3 times, shuffled
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5735 . -77) (undo-tree-id5736 . 78) (undo-tree-id5737 . 78) (undo-tree-id5738 . -78)) nil (25756 46976 636672 385000) 0 nil])
([nil nil ((#("using a buffer of size 5 and a random seed of 42, and batched with a batch
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5731 . -74) (undo-tree-id5732 . 75) (undo-tree-id5733 . 75) (undo-tree-id5734 . -75)) nil (25756 46976 636668 229000) 0 nil])
([nil nil ((#("size of 7:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5727 . -10) (undo-tree-id5728 . 11) (undo-tree-id5729 . 11) (undo-tree-id5730 . -11)) nil (25756 46976 636665 110000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3393) (undo-tree-id5721 . -3) (undo-tree-id5722 . 4) (undo-tree-id5723 . 4) (undo-tree-id5724 . 4) (undo-tree-id5725 . -1) (undo-tree-id5726 . -4)) nil (25756 46976 636661 881000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3461) (undo-tree-id5716 . -3) (undo-tree-id5717 . 4) (undo-tree-id5718 . 4) (undo-tree-id5719 . -1) (undo-tree-id5720 . -4)) nil (25756 46976 636939 217000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3520) (undo-tree-id5915 . -3) (undo-tree-id5916 . 4) (undo-tree-id5917 . -1) (undo-tree-id5918 . -4)) nil (25756 47000 978218 523000) 0 nil] [nil nil ((#("dataset " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3461) (undo-tree-id5710 . -7) (undo-tree-id5711 . 8) (undo-tree-id5712 . 8) (undo-tree-id5713 . 8) (undo-tree-id5714 . -7) (undo-tree-id5715 . -8)) ((3461 . 3469)) (25756 46976 636648 295000) 0 nil])
([nil nil ((#("..." 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3541) (undo-tree-id5913 . -2) (undo-tree-id5914 . -3)) nil (25756 47000 978215 694000) 0 nil])
nil
([nil nil ((#("..." 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3554) (undo-tree-id5911 . -2) (undo-tree-id5912 . -3)) nil (25756 47000 978212 743000) 0 nil])
([nil nil ((#("tf.Tensor([0 2 3 6 7 9 4], shape=(7,), dtype=int64)
" 0 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3555) (undo-tree-id5907 . -51) (undo-tree-id5908 . 52) (undo-tree-id5909 . -2) (undo-tree-id5910 . -52)) nil (25756 47000 978210 168000) 0 nil])
([nil nil ((#("tf.Tensor([5 0 1 1 8 6 5], shape=(7,), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3555) (undo-tree-id5905 . -51) (undo-tree-id5906 . -52)) nil (25756 47000 978032 516000) 0 nil])
([nil nil ((#("tf.Tensor([4 8 7 1 2 3 0], shape=(7,), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3555) (undo-tree-id5903 . -51) (undo-tree-id5904 . -52)) nil (25756 47000 978029 516000) 0 nil])
([nil nil ((#("tf.Tensor([5 4 2 7 8 9 9], shape=(7,), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3555) (undo-tree-id5901 . -51) (undo-tree-id5902 . -52)) nil (25756 47000 978027 325000) 0 nil])
([nil nil ((#("tf.Tensor([3 6], shape=(2,), dtype=int64)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3555) (undo-tree-id5899 . -41) (undo-tree-id5900 . -42)) nil (25756 47000 978025 365000) 0 nil])
([nil nil ((apply yas--snippet-revive 3393 3440 #s(yas--snippet nil (#s(yas--field 1 3405 3411 nil nil nil t #s(yas--exit 3429 nil))) #s(yas--exit 3429 nil) 6 nil #s(yas--field 1 3405 3411 nil nil nil t #s(yas--exit 3429 nil)) nil nil)) (3405 . 3411) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3405 3411 nil nil nil t #s(yas--exit 3429 nil))) #s(yas--exit 3429 nil) 6 nil #s(yas--field 1 3405 3411 nil nil nil t #s(yas--exit 3429 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3423) (undo-tree-id5849 . -2) (3393 . 3436) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3393) (undo-tree-id5850 . -1) (undo-tree-id5851 . -2) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -2) (undo-tree-id5889 . -2) (undo-tree-id5890 . -2) (undo-tree-id5891 . -2) (undo-tree-id5892 . -2) (undo-tree-id5893 . -2) (undo-tree-id5894 . -2) (undo-tree-id5895 . -2) (undo-tree-id5896 . -2) (undo-tree-id5897 . -2) (undo-tree-id5898 . -2) 3395 (3393 . 3395) (3392 . 3393) 3346) nil (25756 47000 978021 742000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3429) (undo-tree-id5847 . 1) (undo-tree-id5848 . -1)) nil (25756 47000 977990 93000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3429) (undo-tree-id5845 . 1) (undo-tree-id5846 . -1)) nil (25756 47000 977988 207000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 3429) (undo-tree-id5821 . -9) (undo-tree-id5822 . -10) (undo-tree-id5823 . 10) (undo-tree-id5824 . -10) (undo-tree-id5825 . -10) (undo-tree-id5826 . -10) (undo-tree-id5827 . -10) (undo-tree-id5828 . -10) (undo-tree-id5829 . -10) (undo-tree-id5830 . -10) (undo-tree-id5831 . -10) (undo-tree-id5832 . -10) (undo-tree-id5833 . -10) (undo-tree-id5834 . -9) (undo-tree-id5835 . -9) (undo-tree-id5836 . -9) (undo-tree-id5837 . -9) (undo-tree-id5838 . -9) (undo-tree-id5839 . -9) (undo-tree-id5840 . -9) (undo-tree-id5841 . -9) (undo-tree-id5842 . -9) (undo-tree-id5843 . -9) (undo-tree-id5844 . -10)) nil (25756 47000 977985 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3589 . 3590) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3599) (3589 . 3600) 3578) nil (25756 47000 977967 168000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 3577) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1)) nil (25756 47000 977964 82000) 0 nil])
([nil nil ((3577 . 3581)) nil (25756 47000 977929 798000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3428) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (t 25756 47000 991035 772000)) nil (25756 47003 530350 864000) 0 nil])
([nil nil ((#("TIP
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3603) (undo-tree-id5940 . -3) (undo-tree-id5941 . -4) (t 25756 47003 547057 903000)) nil (25756 47008 357224 641000) 0 nil])
([nil nil ((3773 . 3774) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3773) (undo-tree-id5942 . -1) (3689 . 3690) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3689) (undo-tree-id5943 . -1) 3603 (t 25756 47008 371099 679000)) nil (25756 47020 189292 983000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3838) (nil fontified nil 3837 . 3838) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3837 . 3838) (3837 . 3838) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3759) (nil fontified nil 3758 . 3759) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3758 . 3759) (3758 . 3759) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3681) (nil fontified nil 3680 . 3681) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3680 . 3681) (3680 . 3681) 3773) nil (25756 47020 189276 689000) 0 nil])
([nil nil ((#("(e.g., for tests or debugging)" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3798) (undo-tree-id6044 . -29) (undo-tree-id6045 . -30) 3785 (t 25756 47020 203202 200000)) nil (25756 47102 970477 569000) 0 nil])
([nil nil ((#("reuse the same order at each iteration , you can
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 15 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 48 49 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3759) (undo-tree-id6004 . -48) (undo-tree-id6005 . -39) (undo-tree-id6006 . -26) (undo-tree-id6007 . -26) (undo-tree-id6008 . -26) (undo-tree-id6009 . -26) (undo-tree-id6010 . -26) (undo-tree-id6011 . -26) (undo-tree-id6012 . -26) (undo-tree-id6013 . -26) (undo-tree-id6014 . -26) (undo-tree-id6015 . -26) (undo-tree-id6016 . -26) (undo-tree-id6017 . -26) (undo-tree-id6018 . -26) (undo-tree-id6019 . -26) (undo-tree-id6020 . -26) (undo-tree-id6021 . -26) (undo-tree-id6022 . -26) (undo-tree-id6023 . -39) (undo-tree-id6024 . -39) (undo-tree-id6025 . -39) (undo-tree-id6026 . -39) (undo-tree-id6027 . -39) (undo-tree-id6028 . -39) (undo-tree-id6029 . -39) (undo-tree-id6030 . -39) (undo-tree-id6031 . -39) (undo-tree-id6032 . -39) (undo-tree-id6033 . -39) (undo-tree-id6034 . -39) (undo-tree-id6035 . -39) (undo-tree-id6036 . -39) (undo-tree-id6037 . -39) (undo-tree-id6038 . -39) (undo-tree-id6039 . -39) (undo-tree-id6040 . -39) (undo-tree-id6041 . -39) (undo-tree-id6042 . -39) (undo-tree-id6043 . -49) 3798) nil (25756 47102 970474 378000) 0 nil])
([nil nil ((#("set
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3759) (undo-tree-id5981 . -3) (undo-tree-id5982 . -2) (undo-tree-id5983 . -2) (undo-tree-id5984 . -2) (undo-tree-id5985 . -2) (undo-tree-id5986 . -2) (undo-tree-id5987 . -2) (undo-tree-id5988 . -2) (undo-tree-id5989 . -2) (undo-tree-id5990 . -2) (undo-tree-id5991 . -2) (undo-tree-id5992 . -2) (undo-tree-id5993 . -2) (undo-tree-id5994 . -2) (undo-tree-id5995 . -2) (undo-tree-id5996 . -2) (undo-tree-id5997 . -2) (undo-tree-id5998 . -2) (undo-tree-id5999 . -2) (undo-tree-id6000 . -2) (undo-tree-id6001 . -2) (undo-tree-id6002 . -2) (undo-tree-id6003 . -4) 3761) nil (25756 47102 970448 537000) 0 nil])
([nil nil ((#("reshuffle_each_iteration=False .
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 10 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 14 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 15 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 24 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3759) (undo-tree-id5958 . -32) (undo-tree-id5959 . -2) (undo-tree-id5960 . -2) (undo-tree-id5961 . -2) (undo-tree-id5962 . -2) (undo-tree-id5963 . -2) (undo-tree-id5964 . -2) (undo-tree-id5965 . -2) (undo-tree-id5966 . -2) (undo-tree-id5967 . -2) (undo-tree-id5968 . -2) (undo-tree-id5969 . -2) (undo-tree-id5970 . -2) (undo-tree-id5971 . -2) (undo-tree-id5972 . -2) (undo-tree-id5973 . -2) (undo-tree-id5974 . -2) (undo-tree-id5975 . -2) (undo-tree-id5976 . -2) (undo-tree-id5977 . -2) (undo-tree-id5978 . -2) (undo-tree-id5979 . -2) (undo-tree-id5980 . -33) 3761) nil (25756 47102 970433 119000) 0 nil])
([nil nil ((#("This is generally a good idea, but if you prefer to" 0 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3707) (undo-tree-id5955 . -50) (undo-tree-id5956 . -51) (undo-tree-id5957 . -51)) nil (25756 47102 970416 639000) 0 nil])
([nil nil ((3817 . 3818) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3817) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1)) nil (25756 47102 970413 926000) 0 nil])
([nil nil ((#("since the buffer will be small" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3819) (undo-tree-id5950 . -29) (undo-tree-id5951 . -30) (undo-tree-id5952 . -30)) nil (25756 47102 970411 662000) 0 nil])
([nil nil ((#("compared to the dataset" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3820) (undo-tree-id5948 . -22) (undo-tree-id5949 . -23)) nil (25756 47102 970408 846000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3820) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1)) nil (25756 47102 970406 95000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3820) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1)) nil (25756 47102 970400 617000) 0 nil])
([nil nil ((#("(for example, on Linux you can shuffle text files using the shuf
command)" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 65 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3869) (undo-tree-id6046 . -72) (undo-tree-id6047 . -73) 3858 (t 25756 47103 31922 12000)) nil (25756 47120 563134 304000) 0 nil])
([nil nil ((#("Even if the source" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3917) (undo-tree-id6060 . -17) (undo-tree-id6061 . -18) (undo-tree-id6062 . -18) (t 25756 47120 628075 373000)) nil (25756 47141 430014 465000) 0 nil])
([nil nil ((#("data is shuffled, you will usually want to shuffle it some more, or else the
" 0 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3918) (undo-tree-id6058 . -76) (undo-tree-id6059 . -77)) nil (25756 47141 430011 366000) 0 nil])
([nil nil ((#("same order will be repeated at each epoch, and the model may end up
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3918) (undo-tree-id6056 . -67) (undo-tree-id6057 . -68)) nil (25756 47141 430009 273000) 0 nil])
([nil nil ((#("being biased (e.g., due to some spurious patterns present by chance in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3918) (undo-tree-id6054 . -74) (undo-tree-id6055 . -75)) nil (25756 47141 430007 7000) 0 nil])
([nil nil ((#("source data’s order)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3918) (undo-tree-id6052 . -19) (undo-tree-id6053 . -20)) nil (25756 47141 430004 29000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3918) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1)) nil (25756 47141 430001 64000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3918) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1)) nil (25756 47141 429995 514000) 0 nil])
([nil nil ((#("To shuffle the instances some more, a common
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3918) (undo-tree-id6063 . -44) (undo-tree-id6064 . -45) (t 25756 47141 444256 991000)) nil (25756 47149 88244 842000) 0 nil])
([nil nil ((3995 . 3996) (t 25756 47149 104323 868000) 3918) nil (25756 47155 482886 777000) 0 nil])
([nil nil ((3918 . 3922)) nil (25756 47155 482881 58000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -3998) (nil fontified nil 3997 . 3998) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3997 . 3998) (3997 . 3998) 3931 (t 25756 47155 500379 730000)) nil (25756 47161 737722 778000) 0 nil])
([nil nil ((3999 . 4000) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3999) (undo-tree-id6065 . 1) (undo-tree-id6066 . 1) (undo-tree-id6067 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3999) (undo-tree-id6068 . 1) (undo-tree-id6069 . -1) 3998) nil (25756 47161 737718 175000) 0 nil])
([nil nil ((4221 . 4222) (t 25756 47161 752434 351000) 4220) nil (25756 47240 356213 20000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4222) (undo-tree-id6155 . 1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1)) nil (25756 47240 356211 684000) 0 nil])
([nil nil ((#("If all this sounds like a lot of work, don’t worry: the Data API" 0 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4301) (undo-tree-id6152 . -63) (undo-tree-id6153 . -64) (undo-tree-id6154 . -64)) nil (25756 47240 356204 105000) 0 nil])
([nil nil ((#("makes all this possible in just a few lines of code. Let’s see how to do this.
" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 56 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4302) (undo-tree-id6150 . -78) (undo-tree-id6151 . -79)) nil (25756 47240 356200 374000) 0 nil])
([nil nil ((4304 . 4305) (4302 . 4304)) nil (25756 47240 356198 17000) 0 nil])
([nil nil ((#("First, let’s suppose that you’ve loaded the California housing dataset,
" 0 72 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6135 . -71) (undo-tree-id6136 . -7) (undo-tree-id6137 . -5) (undo-tree-id6138 . -7) (undo-tree-id6139 . -7) (undo-tree-id6140 . -7) (undo-tree-id6141 . -7) (undo-tree-id6142 . -7) (undo-tree-id6143 . -7) (undo-tree-id6144 . -7) (undo-tree-id6145 . -7) (undo-tree-id6146 . -7) (undo-tree-id6147 . -7) (undo-tree-id6148 . -7) (undo-tree-id6149 . -72) 4351) nil (25756 47240 356480 913000) 0 nil])
([nil nil ((#("shuffled it (unless it was already shuffled), and split it into a training set, a
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 7 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 7 82 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6189 . -81) (undo-tree-id6190 . -7) (undo-tree-id6191 . -7) (undo-tree-id6192 . -7) (undo-tree-id6193 . -7) (undo-tree-id6194 . -7) (undo-tree-id6195 . -7) (undo-tree-id6196 . -7) (undo-tree-id6197 . -7) (undo-tree-id6198 . -7) (undo-tree-id6199 . -7) (undo-tree-id6200 . -7) (undo-tree-id6201 . -7) (undo-tree-id6202 . -7) (undo-tree-id6203 . -7) (undo-tree-id6204 . -7) (undo-tree-id6205 . -7) (undo-tree-id6206 . -7) (undo-tree-id6207 . -7) (undo-tree-id6208 . -7) (undo-tree-id6209 . -7) (undo-tree-id6210 . -7) (undo-tree-id6211 . -7) (undo-tree-id6212 . -7) (undo-tree-id6213 . -7) (undo-tree-id6214 . -7) (undo-tree-id6215 . -7) (undo-tree-id6216 . -7) (undo-tree-id6217 . -7) (undo-tree-id6218 . -7) (undo-tree-id6219 . -7) (undo-tree-id6220 . -7) (undo-tree-id6221 . -7) (undo-tree-id6222 . -7) (undo-tree-id6223 . -7) (undo-tree-id6224 . -7) (undo-tree-id6225 . -7) (undo-tree-id6226 . -7) (undo-tree-id6227 . -7) (undo-tree-id6228 . -7) (undo-tree-id6229 . -7) (undo-tree-id6230 . -7) (undo-tree-id6231 . -7) (undo-tree-id6232 . -7) (undo-tree-id6233 . -7) (undo-tree-id6234 . -7) (undo-tree-id6235 . -7) (undo-tree-id6236 . -7) (undo-tree-id6237 . -7) (undo-tree-id6238 . -7) (undo-tree-id6239 . -7) (undo-tree-id6240 . -7) (undo-tree-id6241 . -7) (undo-tree-id6242 . -7) (undo-tree-id6243 . -7) (undo-tree-id6244 . -7) (undo-tree-id6245 . -7) (undo-tree-id6246 . -7) (undo-tree-id6247 . -7) (undo-tree-id6248 . -7) (undo-tree-id6249 . -7) (undo-tree-id6250 . -7) (undo-tree-id6251 . -7) (undo-tree-id6252 . -7) (undo-tree-id6253 . -7) (undo-tree-id6254 . -7) (undo-tree-id6255 . -7) (undo-tree-id6256 . -7) (undo-tree-id6257 . -7) (undo-tree-id6258 . -7) (undo-tree-id6259 . -7) (undo-tree-id6260 . -7) (undo-tree-id6261 . -7) (undo-tree-id6262 . -7) (undo-tree-id6263 . -7) (undo-tree-id6264 . -7) (undo-tree-id6265 . -7) (undo-tree-id6266 . -7) (undo-tree-id6267 . -7) (undo-tree-id6268 . -7) (undo-tree-id6269 . -7) (undo-tree-id6270 . -7) (undo-tree-id6271 . -7) (undo-tree-id6272 . -7) (undo-tree-id6273 . -7) (undo-tree-id6274 . -7) (undo-tree-id6275 . -7) (undo-tree-id6276 . -7) (undo-tree-id6277 . -7) (undo-tree-id6278 . -7) (undo-tree-id6279 . -7) (undo-tree-id6280 . -7) (undo-tree-id6281 . -7) (undo-tree-id6282 . -7) (undo-tree-id6283 . -7) (undo-tree-id6284 . -7) (undo-tree-id6285 . -7) (undo-tree-id6286 . -7) (undo-tree-id6287 . -7) (undo-tree-id6288 . -7) (undo-tree-id6289 . -7) (undo-tree-id6290 . -7) (undo-tree-id6291 . -7) (undo-tree-id6292 . -7) (undo-tree-id6293 . -82) 4351) nil (25756 47242 904816 648000) 0 nil] [nil nil ((#("shuffled it (unless it was already shuffled), and split it into a training set, a
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 82 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6070 . -81) (undo-tree-id6071 . -7) (undo-tree-id6072 . -7) (undo-tree-id6073 . -7) (undo-tree-id6074 . -7) (undo-tree-id6075 . -7) (undo-tree-id6076 . -7) (undo-tree-id6077 . -7) (undo-tree-id6078 . -7) (undo-tree-id6079 . -7) (undo-tree-id6080 . -7) (undo-tree-id6081 . -7) (undo-tree-id6082 . -7) (undo-tree-id6083 . -7) (undo-tree-id6084 . -7) (undo-tree-id6085 . -7) (undo-tree-id6086 . -7) (undo-tree-id6087 . -7) (undo-tree-id6088 . -7) (undo-tree-id6089 . -7) (undo-tree-id6090 . -7) (undo-tree-id6091 . -7) (undo-tree-id6092 . -7) (undo-tree-id6093 . -7) (undo-tree-id6094 . -7) (undo-tree-id6095 . -7) (undo-tree-id6096 . -7) (undo-tree-id6097 . -7) (undo-tree-id6098 . -7) (undo-tree-id6099 . -7) (undo-tree-id6100 . -7) (undo-tree-id6101 . -7) (undo-tree-id6102 . -7) (undo-tree-id6103 . -7) (undo-tree-id6104 . -7) (undo-tree-id6105 . -7) (undo-tree-id6106 . -7) (undo-tree-id6107 . -7) (undo-tree-id6108 . -7) (undo-tree-id6109 . -7) (undo-tree-id6110 . -7) (undo-tree-id6111 . -7) (undo-tree-id6112 . -7) (undo-tree-id6113 . -7) (undo-tree-id6114 . -7) (undo-tree-id6115 . -7) (undo-tree-id6116 . -7) (undo-tree-id6117 . -7) (undo-tree-id6118 . -7) (undo-tree-id6119 . -7) (undo-tree-id6120 . -7) (undo-tree-id6121 . -7) (undo-tree-id6122 . -7) (undo-tree-id6123 . -7) (undo-tree-id6124 . -7) (undo-tree-id6125 . -7) (undo-tree-id6126 . -7) (undo-tree-id6127 . -7) (undo-tree-id6128 . -7) (undo-tree-id6129 . -7) (undo-tree-id6130 . -7) (undo-tree-id6131 . -7) (undo-tree-id6132 . -7) (undo-tree-id6133 . -7) (undo-tree-id6134 . -82) 4351) ((4344 . 4426)) (25756 47240 356180 629000) 0 nil])
([nil nil ((#("validation set, and a test set. Then you split each set into many CSV files
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 7 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 7 76 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6318 . -75) (undo-tree-id6319 . -7) (undo-tree-id6320 . -7) (undo-tree-id6321 . -7) (undo-tree-id6322 . -7) (undo-tree-id6323 . -7) (undo-tree-id6324 . -7) (undo-tree-id6325 . -7) (undo-tree-id6326 . -7) (undo-tree-id6327 . -7) (undo-tree-id6328 . -7) (undo-tree-id6329 . -7) (undo-tree-id6330 . -7) (undo-tree-id6331 . -7) (undo-tree-id6332 . -7) (undo-tree-id6333 . -7) (undo-tree-id6334 . -7) (undo-tree-id6335 . -7) (undo-tree-id6336 . -7) (undo-tree-id6337 . -7) (undo-tree-id6338 . -7) (undo-tree-id6339 . -7) (undo-tree-id6340 . -7) (undo-tree-id6341 . -7) (undo-tree-id6342 . -7) (undo-tree-id6343 . -7) (undo-tree-id6344 . -7) (undo-tree-id6345 . -7) (undo-tree-id6346 . -7) (undo-tree-id6347 . -7) (undo-tree-id6348 . -7) (undo-tree-id6349 . -7) (undo-tree-id6350 . -7) (undo-tree-id6351 . -7) (undo-tree-id6352 . -7) (undo-tree-id6353 . -7) (undo-tree-id6354 . -7) (undo-tree-id6355 . -7) (undo-tree-id6356 . -7) (undo-tree-id6357 . -7) (undo-tree-id6358 . -7) (undo-tree-id6359 . -7) (undo-tree-id6360 . -76) 4351) nil (25756 47254 940420 411000) 0 nil] [nil nil ((#("validation set, and a test set. Then you split each set into many CSV files
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 76 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6165 . -75) (undo-tree-id6166 . -7) (undo-tree-id6167 . -7) (undo-tree-id6168 . -7) (undo-tree-id6169 . -7) (undo-tree-id6170 . -7) (undo-tree-id6171 . -7) (undo-tree-id6172 . -7) (undo-tree-id6173 . -7) (undo-tree-id6174 . -7) (undo-tree-id6175 . -7) (undo-tree-id6176 . -7) (undo-tree-id6177 . -7) (undo-tree-id6178 . -7) (undo-tree-id6179 . -7) (undo-tree-id6180 . -7) (undo-tree-id6181 . -7) (undo-tree-id6182 . -7) (undo-tree-id6183 . -7) (undo-tree-id6184 . -7) (undo-tree-id6185 . -7) (undo-tree-id6186 . -7) (undo-tree-id6187 . -7) (undo-tree-id6188 . -76) 4351) ((4344 . 4420)) (25756 47242 904465 394000) 0 nil])
nil
([nil nil ((#("that each look like this " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 7 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 7 25 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6361 . -24) (undo-tree-id6362 . -7) (undo-tree-id6363 . -7) (undo-tree-id6364 . -7) (undo-tree-id6365 . -7) (undo-tree-id6366 . -7) (undo-tree-id6367 . -7) (undo-tree-id6368 . -7) (undo-tree-id6369 . -7) (undo-tree-id6370 . -7) (undo-tree-id6371 . -7) (undo-tree-id6372 . -7) (undo-tree-id6373 . -7) (undo-tree-id6374 . -7) (undo-tree-id6375 . -7) (undo-tree-id6376 . -7) (undo-tree-id6377 . -7) (undo-tree-id6378 . -7) (undo-tree-id6379 . -7) (undo-tree-id6380 . -7) (undo-tree-id6381 . -7) (undo-tree-id6382 . -7) (undo-tree-id6383 . -7) (undo-tree-id6384 . -7) (undo-tree-id6385 . -7) (undo-tree-id6386 . -7) (undo-tree-id6387 . -7) (undo-tree-id6388 . -7) (undo-tree-id6389 . -7) (undo-tree-id6390 . -7) (undo-tree-id6391 . -7) (undo-tree-id6392 . -5) (undo-tree-id6393 . -25)) nil (25756 47262 236204 710000) 0 nil] [nil nil ((#("that each look like this (each row contains eight input features plus the
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 74 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6294 . -73) (undo-tree-id6295 . -7) (undo-tree-id6296 . -7) (undo-tree-id6297 . -7) (undo-tree-id6298 . -7) (undo-tree-id6299 . -7) (undo-tree-id6300 . -7) (undo-tree-id6301 . -7) (undo-tree-id6302 . -7) (undo-tree-id6303 . -7) (undo-tree-id6304 . -7) (undo-tree-id6305 . -7) (undo-tree-id6306 . -7) (undo-tree-id6307 . -7) (undo-tree-id6308 . -7) (undo-tree-id6309 . -7) (undo-tree-id6310 . -7) (undo-tree-id6311 . -7) (undo-tree-id6312 . -7) (undo-tree-id6313 . -7) (undo-tree-id6314 . -7) (undo-tree-id6315 . -7) (undo-tree-id6316 . -7) (undo-tree-id6317 . -74) 4351) ((4344 . 4418)) (25756 47254 940146 728000) 0 nil])
nil
([nil nil ((4392 . 4393) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4392) (undo-tree-id6394 . -1) 4344 (t 25756 47262 249314 497000)) nil (25756 47263 717603 72000) 0 nil])
nil
([nil nil ((#("(" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id6399 . 1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (t 25756 47263 725327 452000)) nil (25756 47268 546823 191000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4417) (undo-tree-id6395 . 1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1)) nil (25756 47268 546816 577000) 0 nil])
([nil nil ((4431 . 4437) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4431 4437 nil nil nil t #s(yas--exit 4456 nil))) #s(yas--exit 4456 nil) 7 nil #s(yas--field 1 4431 4437 nil nil nil t #s(yas--exit 4456 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . -4449) (undo-tree-id6446 . -2) (4419 . 4462) (#("sr" 0 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4419) (undo-tree-id6447 . -1) (undo-tree-id6448 . -2) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -2) (undo-tree-id6486 . -2) (undo-tree-id6487 . -2) (undo-tree-id6488 . -2) (undo-tree-id6489 . -2) (undo-tree-id6490 . -2) (undo-tree-id6491 . -2) (undo-tree-id6492 . -2) (undo-tree-id6493 . -2) (undo-tree-id6494 . -2) (undo-tree-id6495 . -2) 4421 (4419 . 4421) (4418 . 4419) (t 25756 47268 561369 906000) 4344) nil (25756 47291 846149 251000) 0 nil])
([nil nil ((4454 . 4455) (apply yas--snippet-revive 4419 4467 #s(yas--snippet nil (#s(yas--field 1 4431 4437 nil nil nil t #s(yas--exit 4456 nil))) #s(yas--exit 4456 nil) 7 nil #s(yas--field 1 4431 4437 nil nil nil t #s(yas--exit 4456 nil)) nil nil)) (4453 . 4454) 4436) nil (25756 47291 846110 771000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4455) (undo-tree-id6444 . 1) (undo-tree-id6445 . -1)) nil (25756 47291 846109 500000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4455) (undo-tree-id6442 . 1) (undo-tree-id6443 . -1)) nil (25756 47291 846107 524000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4455) (undo-tree-id6440 . 1) (undo-tree-id6441 . -1)) nil (25756 47291 846105 177000) 0 nil])
([nil nil ((#("MedInc,HouseAge,AveRooms,AveBedrms,Popul,AveOccup,Lat,Long,MedianHouseVal
" 0 74 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4466) (undo-tree-id6436 . -73) (undo-tree-id6437 . 74) (undo-tree-id6438 . -6) (undo-tree-id6439 . -74)) nil (25756 47291 846102 786000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4454 . 4455) (#("
" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -4528) (4454 . 4529)) nil (25756 47291 846099 278000) 0 nil])
([nil nil ((#("ue
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4540) (undo-tree-id6432 . -2) (undo-tree-id6433 . 3) (undo-tree-id6434 . -2) (undo-tree-id6435 . -3)) nil (25756 47291 846097 905000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4528 . 4529) (#("
" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -4531) (4528 . 4532) 4455) nil (25756 47291 846093 798000) 0 nil])
([nil nil ((4528 . 4529) (#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -4528) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) 4455) nil (25756 47291 846090 778000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 4528) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1)) nil (25756 47291 846024 805000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4454) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (t 25756 47291 861574 556000)) nil (25756 47348 255726 268000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4530) (undo-tree-id6511 . 1) (undo-tree-id6512 . -1)) nil (25756 47348 255715 839000) 0 nil])
([nil nil ((#("3.5214,15.0,3.0499,1.1065,1447.0,1.6059,37.63,-122.43,1.442
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 52 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 52 60 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4540) (undo-tree-id6509 . -59) (undo-tree-id6510 . -60)) nil (25756 47348 255713 303000) 0 nil])
([nil nil ((#("5.3275,5.0,6.4900,0.9910,3464.0,3.4433,33.69,-117.39,1.687
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 59 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4540) (undo-tree-id6507 . -58) (undo-tree-id6508 . -59)) nil (25756 47348 255709 564000) 0 nil])
([nil nil ((#("3.1,29.0,7.5423,1.5915,1328.0,2.2508,38.44,-122.98,1.621
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 57 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4540) (undo-tree-id6505 . -56) (undo-tree-id6506 . -57)) nil (25756 47348 255707 645000) 0 nil])
([nil nil ((#("[...]
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 6 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4540) (undo-tree-id6499 . -5) (undo-tree-id6500 . 6) (undo-tree-id6501 . -1) (undo-tree-id6502 . 2) (undo-tree-id6503 . -5) (undo-tree-id6504 . -6)) nil (25756 47348 255705 394000) 0 nil])
([nil nil ((4543 . 4544) (#("’" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4543) (undo-tree-id6498 . -1)) nil (25756 47348 255699 559000) 0 nil])
([nil nil ((#("_" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t)) . 4564) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1)) nil (25756 47348 255694 636000) 0 nil])
([nil nil ((#("_" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t)) . 4639) (undo-tree-id6649 . 1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (t 25756 47348 318071 149000)) nil (25756 47398 144373 469000) 0 nil])
([nil nil ((#("_" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t)) . 4657) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1)) nil (25756 47398 144370 697000) 0 nil])
([nil nil ((4681 . 4687) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4681 4687 nil nil nil t #s(yas--exit 4705 nil))) #s(yas--exit 4705 nil) 8 nil #s(yas--field 1 4681 4687 nil nil nil t #s(yas--exit 4705 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . -4699) (undo-tree-id6597 . -2) (4669 . 4712) (#("sr" 0 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4669) (undo-tree-id6598 . -1) (undo-tree-id6599 . -2) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -2) (undo-tree-id6637 . -2) (undo-tree-id6638 . -2) (undo-tree-id6639 . -2) (undo-tree-id6640 . -2) (undo-tree-id6641 . -2) (undo-tree-id6642 . -2) (undo-tree-id6643 . -2) (undo-tree-id6644 . -2) (undo-tree-id6645 . -2) (undo-tree-id6646 . -2) 4671 (4669 . 4671) (4668 . 4669) 4615) nil (25756 47398 144366 447000) 0 nil])
([nil nil ((apply yas--snippet-revive 4669 4716 #s(yas--snippet nil (#s(yas--field 1 4681 4687 nil nil nil t #s(yas--exit 4705 nil))) #s(yas--exit 4705 nil) 8 nil #s(yas--field 1 4681 4687 nil nil nil t #s(yas--exit 4705 nil)) nil nil))) nil (25756 47449 107328 513000) 0 nil])
([nil nil ((#(">>> train_filepaths
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 4 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 4 5 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 5 9 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 9 10 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 10 19 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 19 20 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4717) (undo-tree-id7772 . -19) (undo-tree-id7773 . -8) (undo-tree-id7774 . -8) (undo-tree-id7775 . -8) (undo-tree-id7776 . -8) (undo-tree-id7777 . -8) (undo-tree-id7778 . -8) (undo-tree-id7779 . -8) (undo-tree-id7780 . -8) (undo-tree-id7781 . -8) (undo-tree-id7782 . -8) (undo-tree-id7783 . -8) (undo-tree-id7784 . -8) (undo-tree-id7785 . -8) (undo-tree-id7786 . -8) (undo-tree-id7787 . -8) (undo-tree-id7788 . -8) (undo-tree-id7789 . -8) (undo-tree-id7790 . -8) (undo-tree-id7791 . -8) (undo-tree-id7792 . -20) 4725) nil (25756 47479 79005 841000) 0 nil] [nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t face org-block-end-line)) . 4707) (undo-tree-id6529 . -9) (undo-tree-id6530 . -8) (undo-tree-id6532 . -10) (undo-tree-id6534 . -10) (undo-tree-id6536 . -10) (undo-tree-id6538 . -10) (undo-tree-id6540 . -10) (undo-tree-id6542 . -10) (undo-tree-id6544 . -10) (undo-tree-id6546 . -10) (undo-tree-id6548 . -10) (undo-tree-id6550 . -10) (undo-tree-id6552 . -10) (undo-tree-id6554 . -9) (undo-tree-id6556 . -9) (undo-tree-id6558 . -9) (undo-tree-id6560 . -9) (undo-tree-id6562 . -8) (undo-tree-id6564 . -8) (undo-tree-id6566 . -8) (undo-tree-id6568 . -8) (undo-tree-id6570 . -8) (undo-tree-id6572 . -8) (undo-tree-id6574 . -8) (undo-tree-id6576 . -8) (undo-tree-id6578 . -8) (undo-tree-id6580 . -8) (undo-tree-id6582 . -8) (undo-tree-id6584 . -8) (undo-tree-id6586 . -8) (undo-tree-id6588 . -8) (undo-tree-id6590 . -8) (undo-tree-id6592 . -8) (undo-tree-id6594 . -8) (undo-tree-id6596 . -10) 4715) ((4707 . 4717)) (25756 47448 748651 554000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4704 . 4705) (#("
" 0 1 (font-lock-fontified t src-block t fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -4724) (4704 . 4725)) nil (25756 47479 78992 227000) 0 nil])
([nil nil ((4803 . 4805)) ((#("

" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 2 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4803) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1)) (25756 47448 444713 164000) 0 nil])
([nil nil ((#(">>> " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-multiline t face (org-block)) 1 4 (font-lock-fontified t src-block t fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-multiline t face (org-block))) . 4705) (undo-tree-id7768 . -3) (undo-tree-id7769 . 4) (undo-tree-id7770 . -1) (undo-tree-id7771 . -4)) nil (25756 47479 78991 34000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4804 . 4805) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -4814) (4804 . 4815)) ((#("
#+end_src
" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) rear-nonsticky nil font-lock-fontified t src-block t) 1 6 (font-lock-fontified t fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-meta-line) 6 7 (font-lock-fontified t fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-meta-line) 7 10 (font-lock-fontified t fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-meta-line) 10 11 (face org-block-end-line fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4804) (undo-tree-id7004 . -10) (4814 . 4815) (nil rear-nonsticky t 4804 . 4805)) (25756 47448 94519 407000) 0 nil])
([nil nil ((#("['datasets/housing/my_train_00.csv',
'datasets/housing/my_train_01.csv',...]" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 21 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 21 22 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 22 27 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 27 28 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 28 34 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 34 35 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 35 36 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 36 37 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 37 38 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 38 57 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 57 58 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 58 63 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 63 64 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 64 70 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 70 71 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 71 75 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 75 76 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4733) (undo-tree-id7099 . -75) (undo-tree-id7100 . -75) (undo-tree-id7101 . -75) (undo-tree-id7102 . -76) (undo-tree-id7103 . -76) (undo-tree-id7104 . -76) (undo-tree-id7105 . -76) (undo-tree-id7106 . -76) (undo-tree-id7107 . -76) (undo-tree-id7108 . -76) (undo-tree-id7109 . -76) (undo-tree-id7110 . -76) (undo-tree-id7111 . -76) (undo-tree-id7112 . -76) (undo-tree-id7113 . -76) (undo-tree-id7114 . -76) (undo-tree-id7115 . -76) (undo-tree-id7116 . -76) (undo-tree-id7117 . -76) (undo-tree-id7118 . -76) (undo-tree-id7119 . -76) (undo-tree-id7120 . -76) (undo-tree-id7121 . -76) (undo-tree-id7122 . -76) (undo-tree-id7123 . -76) (undo-tree-id7124 . -76) (undo-tree-id7125 . -76) (undo-tree-id7126 . -76) (undo-tree-id7127 . 74) (undo-tree-id7128 . -10) (undo-tree-id7129 . -8) (undo-tree-id7130 . -8) (undo-tree-id7131 . -8) (undo-tree-id7132 . -8) (undo-tree-id7133 . -8) (undo-tree-id7134 . -8) (undo-tree-id7135 . -8) (undo-tree-id7136 . -8) (undo-tree-id7137 . -8) (undo-tree-id7138 . -8) (undo-tree-id7139 . -8) (undo-tree-id7140 . -8) (undo-tree-id7141 . -8) (undo-tree-id7142 . -8) (undo-tree-id7143 . -8) (undo-tree-id7144 . -8) (undo-tree-id7145 . -8) (undo-tree-id7146 . 45) (undo-tree-id7147 . -34) (undo-tree-id7148 . -37) (undo-tree-id7149 . -37) (undo-tree-id7150 . -37) (undo-tree-id7151 . -37) (undo-tree-id7152 . -37) (undo-tree-id7153 . -37) (undo-tree-id7154 . -37) (undo-tree-id7155 . -37) (undo-tree-id7156 . -37) (undo-tree-id7157 . -37) (undo-tree-id7158 . -37) (undo-tree-id7159 . -37) (undo-tree-id7160 . -37) (undo-tree-id7161 . -37) (undo-tree-id7162 . -37) (undo-tree-id7163 . -37) (undo-tree-id7164 . -37) (undo-tree-id7165 . -37) (undo-tree-id7166 . -37) (undo-tree-id7167 . -37) (undo-tree-id7168 . -37) (undo-tree-id7169 . -37) (undo-tree-id7170 . -37) (undo-tree-id7171 . -37) (undo-tree-id7172 . -37) (undo-tree-id7173 . -37) (undo-tree-id7174 . -37) (undo-tree-id7175 . -37) (undo-tree-id7176 . -37) (undo-tree-id7177 . -37) (undo-tree-id7178 . -37) (undo-tree-id7179 . -37) (undo-tree-id7180 . -37) (undo-tree-id7181 . -37) (undo-tree-id7182 . -37) (undo-tree-id7183 . -37) (undo-tree-id7184 . -37) (undo-tree-id7185 . -37) (undo-tree-id7186 . -37) (undo-tree-id7187 . -37) (undo-tree-id7188 . -37) (undo-tree-id7189 . -37) (undo-tree-id7190 . -37) (undo-tree-id7191 . -37) (undo-tree-id7192 . -37) (undo-tree-id7193 . -37) (undo-tree-id7194 . -37) (undo-tree-id7195 . -37) (undo-tree-id7196 . -37) (undo-tree-id7197 . -37) (undo-tree-id7198 . -37) (undo-tree-id7199 . -37) (undo-tree-id7200 . -37) (undo-tree-id7201 . -37) (undo-tree-id7202 . -37) (undo-tree-id7203 . -37) (undo-tree-id7204 . -37) (undo-tree-id7205 . -37) (undo-tree-id7206 . -37) (undo-tree-id7207 . -37) (undo-tree-id7208 . -37) (undo-tree-id7209 . -37) (undo-tree-id7210 . -37) (undo-tree-id7211 . -37) (undo-tree-id7212 . -37) (undo-tree-id7213 . -37) (undo-tree-id7214 . -37) (undo-tree-id7215 . -37) (undo-tree-id7216 . -37) (undo-tree-id7217 . -37) (undo-tree-id7218 . -37) (undo-tree-id7219 . -37) (undo-tree-id7220 . -37) (undo-tree-id7221 . -37) (undo-tree-id7222 . -37) (undo-tree-id7223 . -37) (undo-tree-id7224 . -37) (undo-tree-id7225 . -37) (undo-tree-id7226 . -37) (undo-tree-id7227 . -37) (undo-tree-id7228 . -37) (undo-tree-id7229 . -37) (undo-tree-id7230 . -37) (undo-tree-id7231 . -37) (undo-tree-id7232 . -37) (undo-tree-id7233 . -37) (undo-tree-id7234 . -37) (undo-tree-id7235 . -37) (undo-tree-id7236 . -37) (undo-tree-id7237 . -37) (undo-tree-id7238 . -37) (undo-tree-id7239 . -37) (undo-tree-id7240 . -37) (undo-tree-id7241 . -37) (undo-tree-id7242 . -37) (undo-tree-id7243 . -37) (undo-tree-id7244 . -37) (undo-tree-id7245 . -37) (undo-tree-id7246 . -37) (undo-tree-id7247 . -37) (undo-tree-id7248 . -37) (undo-tree-id7249 . -37) (undo-tree-id7250 . -76) (undo-tree-id7251 . -75) (undo-tree-id7252 . -37) (undo-tree-id7253 . -37) (undo-tree-id7254 . -37) (undo-tree-id7255 . -37) (undo-tree-id7256 . -37) (undo-tree-id7257 . -37) (undo-tree-id7258 . -37) (undo-tree-id7259 . -37) (undo-tree-id7260 . -37) (undo-tree-id7261 . -37) (undo-tree-id7262 . -37) (undo-tree-id7263 . -37) (undo-tree-id7264 . -37) (undo-tree-id7265 . -37) (undo-tree-id7266 . -37) (undo-tree-id7267 . -37) (undo-tree-id7268 . -37) (undo-tree-id7269 . -37) (undo-tree-id7270 . -37) (undo-tree-id7271 . -37) (undo-tree-id7272 . -37) (undo-tree-id7273 . -37) (undo-tree-id7274 . -37) (undo-tree-id7275 . -37) (undo-tree-id7276 . -37) (undo-tree-id7277 . -37) (undo-tree-id7278 . -37) (undo-tree-id7279 . -37) (undo-tree-id7280 . -37) (undo-tree-id7281 . 38) (undo-tree-id7282 . -46) (undo-tree-id7283 . -38) (undo-tree-id7284 . -38) (undo-tree-id7285 . -38) (undo-tree-id7286 . -38) (undo-tree-id7287 . -38) (undo-tree-id7288 . -38) (undo-tree-id7289 . -38) (undo-tree-id7290 . -38) (undo-tree-id7291 . -38) (undo-tree-id7292 . -38) (undo-tree-id7293 . -38) (undo-tree-id7294 . -38) (undo-tree-id7295 . -38) (undo-tree-id7296 . -38) (undo-tree-id7297 . -38) (undo-tree-id7298 . -38) (undo-tree-id7299 . -38) (undo-tree-id7300 . -38) (undo-tree-id7301 . -38) (undo-tree-id7302 . -38) (undo-tree-id7303 . -38) (undo-tree-id7304 . -38) (undo-tree-id7305 . -39) (undo-tree-id7306 . -39) (undo-tree-id7307 . -39) (undo-tree-id7308 . -39) (undo-tree-id7309 . -39) (undo-tree-id7310 . -39) (undo-tree-id7311 . -39) (undo-tree-id7312 . -39) (undo-tree-id7313 . -39) (undo-tree-id7314 . -39) (undo-tree-id7315 . -39) (undo-tree-id7316 . -39) (undo-tree-id7317 . -39) (undo-tree-id7318 . -39) (undo-tree-id7319 . -39) (undo-tree-id7320 . -39) (undo-tree-id7321 . -39) (undo-tree-id7322 . -39) (undo-tree-id7323 . -39) (undo-tree-id7324 . -39) (undo-tree-id7325 . -39) (undo-tree-id7326 . -39) (undo-tree-id7327 . -39) (undo-tree-id7328 . -39) (undo-tree-id7329 . -39) (undo-tree-id7330 . -39) (undo-tree-id7331 . -39) (undo-tree-id7332 . -39) (undo-tree-id7333 . -39) (undo-tree-id7334 . -40) (undo-tree-id7335 . -40) (undo-tree-id7336 . -40) (undo-tree-id7337 . -40) (undo-tree-id7338 . -40) (undo-tree-id7339 . -40) (undo-tree-id7340 . -40) (undo-tree-id7341 . -40) (undo-tree-id7342 . -41) (undo-tree-id7343 . -41) (undo-tree-id7344 . -41) (undo-tree-id7345 . -41) (undo-tree-id7346 . -41) (undo-tree-id7347 . -41) (undo-tree-id7348 . -41) (undo-tree-id7349 . -41) (undo-tree-id7350 . -42) (undo-tree-id7351 . -42) (undo-tree-id7352 . -42) (undo-tree-id7353 . -42) (undo-tree-id7354 . -42) (undo-tree-id7355 . -42) (undo-tree-id7356 . -42) (undo-tree-id7357 . -42) (undo-tree-id7358 . -43) (undo-tree-id7359 . -43) (undo-tree-id7360 . -43) (undo-tree-id7361 . -43) (undo-tree-id7362 . -43) (undo-tree-id7363 . -43) (undo-tree-id7364 . -43) (undo-tree-id7365 . -43) (undo-tree-id7366 . -44) (undo-tree-id7367 . -44) (undo-tree-id7368 . -44) (undo-tree-id7369 . -44) (undo-tree-id7370 . -44) (undo-tree-id7371 . -44) (undo-tree-id7372 . -44) (undo-tree-id7373 . -44) (undo-tree-id7374 . -45) (undo-tree-id7375 . -45) (undo-tree-id7376 . -45) (undo-tree-id7377 . -45) (undo-tree-id7378 . -45) (undo-tree-id7379 . -45) (undo-tree-id7380 . -45) (undo-tree-id7381 . -45) (undo-tree-id7382 . -46) (undo-tree-id7383 . -46) (undo-tree-id7384 . -46) (undo-tree-id7385 . -46) (undo-tree-id7386 . -46) (undo-tree-id7387 . -46) (undo-tree-id7388 . -46) (undo-tree-id7389 . -46) (undo-tree-id7390 . -47) (undo-tree-id7391 . -47) (undo-tree-id7392 . -47) (undo-tree-id7393 . -47) (undo-tree-id7394 . -47) (undo-tree-id7395 . -47) (undo-tree-id7396 . -47) (undo-tree-id7397 . -47) (undo-tree-id7398 . -48) (undo-tree-id7399 . -48) (undo-tree-id7400 . -48) (undo-tree-id7401 . -48) (undo-tree-id7402 . -48) (undo-tree-id7403 . -48) (undo-tree-id7404 . -48) (undo-tree-id7405 . -48) (undo-tree-id7406 . -49) (undo-tree-id7407 . -49) (undo-tree-id7408 . -49) (undo-tree-id7409 . -49) (undo-tree-id7410 . -49) (undo-tree-id7411 . -49) (undo-tree-id7412 . -49) (undo-tree-id7413 . -49) (undo-tree-id7414 . -50) (undo-tree-id7415 . -50) (undo-tree-id7416 . -50) (undo-tree-id7417 . -50) (undo-tree-id7418 . -50) (undo-tree-id7419 . -50) (undo-tree-id7420 . -50) (undo-tree-id7421 . -50) (undo-tree-id7422 . -51) (undo-tree-id7423 . -51) (undo-tree-id7424 . -51) (undo-tree-id7425 . -51) (undo-tree-id7426 . -51) (undo-tree-id7427 . -51) (undo-tree-id7428 . -51) (undo-tree-id7429 . -51) (undo-tree-id7430 . -52) (undo-tree-id7431 . -52) (undo-tree-id7432 . -52) (undo-tree-id7433 . -52) (undo-tree-id7434 . -52) (undo-tree-id7435 . -52) (undo-tree-id7436 . -52) (undo-tree-id7437 . -52) (undo-tree-id7438 . -53) (undo-tree-id7439 . -53) (undo-tree-id7440 . -53) (undo-tree-id7441 . -53) (undo-tree-id7442 . -53) (undo-tree-id7443 . -53) (undo-tree-id7444 . -53) (undo-tree-id7445 . -53) (undo-tree-id7446 . -54) (undo-tree-id7447 . -54) (undo-tree-id7448 . -54) (undo-tree-id7449 . -54) (undo-tree-id7450 . -54) (undo-tree-id7451 . -54) (undo-tree-id7452 . -54) (undo-tree-id7453 . -54) (undo-tree-id7454 . -55) (undo-tree-id7455 . -55) (undo-tree-id7456 . -55) (undo-tree-id7457 . -55) (undo-tree-id7458 . -55) (undo-tree-id7459 . -55) (undo-tree-id7460 . -55) (undo-tree-id7461 . -55) (undo-tree-id7462 . -56) (undo-tree-id7463 . -56) (undo-tree-id7464 . -56) (undo-tree-id7465 . -56) (undo-tree-id7466 . -56) (undo-tree-id7467 . -56) (undo-tree-id7468 . -56) (undo-tree-id7469 . -56) (undo-tree-id7470 . -57) (undo-tree-id7471 . -57) (undo-tree-id7472 . -57) (undo-tree-id7473 . -57) (undo-tree-id7474 . -57) (undo-tree-id7475 . -57) (undo-tree-id7476 . -57) (undo-tree-id7477 . -57) (undo-tree-id7478 . -59) (undo-tree-id7479 . -59) (undo-tree-id7480 . -59) (undo-tree-id7481 . -59) (undo-tree-id7482 . -59) (undo-tree-id7483 . -59) (undo-tree-id7484 . -59) (undo-tree-id7485 . -59) (undo-tree-id7486 . -60) (undo-tree-id7487 . -60) (undo-tree-id7488 . -60) (undo-tree-id7489 . -60) (undo-tree-id7490 . -60) (undo-tree-id7491 . -60) (undo-tree-id7492 . -60) (undo-tree-id7493 . -60) (undo-tree-id7494 . -61) (undo-tree-id7495 . -61) (undo-tree-id7496 . -61) (undo-tree-id7497 . -61) (undo-tree-id7498 . -61) (undo-tree-id7499 . -61) (undo-tree-id7500 . -61) (undo-tree-id7501 . -61) (undo-tree-id7502 . -62) (undo-tree-id7503 . -62) (undo-tree-id7504 . -62) (undo-tree-id7505 . -62) (undo-tree-id7506 . -62) (undo-tree-id7507 . -62) (undo-tree-id7508 . -62) (undo-tree-id7509 . -62) (undo-tree-id7510 . -63) (undo-tree-id7511 . -63) (undo-tree-id7512 . -63) (undo-tree-id7513 . -63) (undo-tree-id7514 . -63) (undo-tree-id7515 . -63) (undo-tree-id7516 . -63) (undo-tree-id7517 . -63) (undo-tree-id7518 . -65) (undo-tree-id7519 . -65) (undo-tree-id7520 . -65) (undo-tree-id7521 . -65) (undo-tree-id7522 . -65) (undo-tree-id7523 . -65) (undo-tree-id7524 . -65) (undo-tree-id7525 . -65) (undo-tree-id7526 . -66) (undo-tree-id7527 . -66) (undo-tree-id7528 . -66) (undo-tree-id7529 . -66) (undo-tree-id7530 . -66) (undo-tree-id7531 . -66) (undo-tree-id7532 . -66) (undo-tree-id7533 . -66) (undo-tree-id7534 . -66) (undo-tree-id7535 . -66) (undo-tree-id7536 . -66) (undo-tree-id7537 . -66) (undo-tree-id7538 . -66) (undo-tree-id7539 . -66) (undo-tree-id7540 . -66) (undo-tree-id7541 . -66) (undo-tree-id7542 . -66) (undo-tree-id7543 . -66) (undo-tree-id7544 . -66) (undo-tree-id7545 . -66) (undo-tree-id7546 . -66) (undo-tree-id7547 . -66) (undo-tree-id7548 . 9) (undo-tree-id7549 . -70) (undo-tree-id7550 . -67) (undo-tree-id7551 . -67) (undo-tree-id7552 . -67) (undo-tree-id7553 . -67) (undo-tree-id7554 . -67) (undo-tree-id7555 . -67) (undo-tree-id7556 . -67) (undo-tree-id7557 . -67) (undo-tree-id7558 . -67) (undo-tree-id7559 . -67) (undo-tree-id7560 . -67) (undo-tree-id7561 . -67) (undo-tree-id7562 . -67) (undo-tree-id7563 . -67) (undo-tree-id7564 . -67) (undo-tree-id7565 . -67) (undo-tree-id7566 . -67) (undo-tree-id7567 . -67) (undo-tree-id7568 . -67) (undo-tree-id7569 . -67) (undo-tree-id7570 . -67) (undo-tree-id7571 . -67) (undo-tree-id7572 . -67) (undo-tree-id7573 . -67) (undo-tree-id7574 . -67) (undo-tree-id7575 . -67) (undo-tree-id7576 . -67) (undo-tree-id7577 . -67) (undo-tree-id7578 . -67) (undo-tree-id7579 . -68) (undo-tree-id7580 . -68) (undo-tree-id7581 . -68) (undo-tree-id7582 . -68) (undo-tree-id7583 . -68) (undo-tree-id7584 . -68) (undo-tree-id7585 . -68) (undo-tree-id7586 . -68) (undo-tree-id7587 . -68) (undo-tree-id7588 . -68) (undo-tree-id7589 . -68) (undo-tree-id7590 . -68) (undo-tree-id7591 . -68) (undo-tree-id7592 . -68) (undo-tree-id7593 . -68) (undo-tree-id7594 . -68) (undo-tree-id7595 . -68) (undo-tree-id7596 . -68) (undo-tree-id7597 . -68) (undo-tree-id7598 . -68) (undo-tree-id7599 . -68) (undo-tree-id7600 . -68) (undo-tree-id7601 . -69) (undo-tree-id7602 . -69) (undo-tree-id7603 . -69) (undo-tree-id7604 . -69) (undo-tree-id7605 . -69) (undo-tree-id7606 . -69) (undo-tree-id7607 . -69) (undo-tree-id7608 . -69) (undo-tree-id7609 . -69) (undo-tree-id7610 . -69) (undo-tree-id7611 . -69) (undo-tree-id7612 . -69) (undo-tree-id7613 . -69) (undo-tree-id7614 . -69) (undo-tree-id7615 . -69) (undo-tree-id7616 . -69) (undo-tree-id7617 . -69) (undo-tree-id7618 . -69) (undo-tree-id7619 . -69) (undo-tree-id7620 . -69) (undo-tree-id7621 . -69) (undo-tree-id7622 . -69) (undo-tree-id7623 . -70) (undo-tree-id7624 . -70) (undo-tree-id7625 . -70) (undo-tree-id7626 . -70) (undo-tree-id7627 . -70) (undo-tree-id7628 . -70) (undo-tree-id7629 . -70) (undo-tree-id7630 . -70) (undo-tree-id7631 . -70) (undo-tree-id7632 . -70) (undo-tree-id7633 . -70) (undo-tree-id7634 . -70) (undo-tree-id7635 . -70) (undo-tree-id7636 . -70) (undo-tree-id7637 . -70) (undo-tree-id7638 . -70) (undo-tree-id7639 . -70) (undo-tree-id7640 . -70) (undo-tree-id7641 . -70) (undo-tree-id7642 . -70) (undo-tree-id7643 . -70) (undo-tree-id7644 . -70) (undo-tree-id7645 . -71) (undo-tree-id7646 . -71) (undo-tree-id7647 . -71) (undo-tree-id7648 . -71) (undo-tree-id7649 . -71) (undo-tree-id7650 . -71) (undo-tree-id7651 . -71) (undo-tree-id7652 . -71) (undo-tree-id7653 . -71) (undo-tree-id7654 . -71) (undo-tree-id7655 . -71) (undo-tree-id7656 . -71) (undo-tree-id7657 . -71) (undo-tree-id7658 . -71) (undo-tree-id7659 . -71) (undo-tree-id7660 . -71) (undo-tree-id7661 . -71) (undo-tree-id7662 . -71) (undo-tree-id7663 . -71) (undo-tree-id7664 . -71) (undo-tree-id7665 . -71) (undo-tree-id7666 . -71) (undo-tree-id7667 . -72) (undo-tree-id7668 . -72) (undo-tree-id7669 . -72) (undo-tree-id7670 . -72) (undo-tree-id7671 . -72) (undo-tree-id7672 . -72) (undo-tree-id7673 . -72) (undo-tree-id7674 . -72) (undo-tree-id7675 . -72) (undo-tree-id7676 . -72) (undo-tree-id7677 . -72) (undo-tree-id7678 . -72) (undo-tree-id7679 . -72) (undo-tree-id7680 . -72) (undo-tree-id7681 . -72) (undo-tree-id7682 . -72) (undo-tree-id7683 . -72) (undo-tree-id7684 . -72) (undo-tree-id7685 . -72) (undo-tree-id7686 . -72) (undo-tree-id7687 . -72) (undo-tree-id7688 . -72) (undo-tree-id7689 . -73) (undo-tree-id7690 . -73) (undo-tree-id7691 . -73) (undo-tree-id7692 . -73) (undo-tree-id7693 . -73) (undo-tree-id7694 . -73) (undo-tree-id7695 . -73) (undo-tree-id7696 . -73) (undo-tree-id7697 . -73) (undo-tree-id7698 . -73) (undo-tree-id7699 . -73) (undo-tree-id7700 . -73) (undo-tree-id7701 . -73) (undo-tree-id7702 . -73) (undo-tree-id7703 . -73) (undo-tree-id7704 . -73) (undo-tree-id7705 . -73) (undo-tree-id7706 . -73) (undo-tree-id7707 . -73) (undo-tree-id7708 . -73) (undo-tree-id7709 . -73) (undo-tree-id7710 . -73) (undo-tree-id7711 . -73) (undo-tree-id7712 . -73) (undo-tree-id7713 . -73) (undo-tree-id7714 . -73) (undo-tree-id7715 . -73) (undo-tree-id7716 . -73) (undo-tree-id7717 . -73) (undo-tree-id7718 . -74) (undo-tree-id7719 . -74) (undo-tree-id7720 . -74) (undo-tree-id7721 . -74) (undo-tree-id7722 . -74) (undo-tree-id7723 . -74) (undo-tree-id7724 . -74) (undo-tree-id7725 . -74) (undo-tree-id7726 . -74) (undo-tree-id7727 . -74) (undo-tree-id7728 . -74) (undo-tree-id7729 . -74) (undo-tree-id7730 . -74) (undo-tree-id7731 . -74) (undo-tree-id7732 . -74) (undo-tree-id7733 . -74) (undo-tree-id7734 . -74) (undo-tree-id7735 . -74) (undo-tree-id7736 . -74) (undo-tree-id7737 . -74) (undo-tree-id7738 . -74) (undo-tree-id7739 . -74) (undo-tree-id7740 . -75) (undo-tree-id7741 . -75) (undo-tree-id7742 . -75) (undo-tree-id7743 . -75) (undo-tree-id7744 . -75) (undo-tree-id7745 . -75) (undo-tree-id7746 . -75) (undo-tree-id7747 . -75) (undo-tree-id7748 . -75) (undo-tree-id7749 . -75) (undo-tree-id7750 . -75) (undo-tree-id7751 . -75) (undo-tree-id7752 . -75) (undo-tree-id7753 . -75) (undo-tree-id7754 . 1) (undo-tree-id7755 . -76) (undo-tree-id7756 . 76) (undo-tree-id7757 . -1) (undo-tree-id7758 . -75) (undo-tree-id7759 . -75) (undo-tree-id7760 . -75) (undo-tree-id7761 . -75) (undo-tree-id7762 . -75) (undo-tree-id7763 . -75) (undo-tree-id7764 . -75) (undo-tree-id7765 . -75) (undo-tree-id7766 . -75) (undo-tree-id7767 . -76) 4808) nil (25756 47479 78969 136000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4705) (undo-tree-id6904 . -1) (undo-tree-id6906 . -1) (undo-tree-id6908 . -1) (undo-tree-id6910 . -1) (undo-tree-id6912 . -1) (undo-tree-id6914 . -1) (undo-tree-id6916 . -1) (undo-tree-id6918 . -1) (t 25756 47398 158510 313000)) ((4705 . 4706)) (25756 47447 699812 830000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4796 . 4797) (nil fontified nil 4758 . 4797) (nil fontified nil 4721 . 4758) (4721 . 4797)) nil (25756 47479 78547 475000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4705) (undo-tree-id6824 . -1) (undo-tree-id6826 . -1) (undo-tree-id6828 . -1) (undo-tree-id6830 . -1) (undo-tree-id6832 . -1) (undo-tree-id6834 . -1) (undo-tree-id6836 . -1) (undo-tree-id6838 . -1) (undo-tree-id6840 . -1) (undo-tree-id6842 . -1) (undo-tree-id6844 . -1) (undo-tree-id6846 . -1) (undo-tree-id6848 . -1) (undo-tree-id6850 . -1) (undo-tree-id6852 . -1) (undo-tree-id6854 . -1) (undo-tree-id6856 . -1) (undo-tree-id6858 . -1) (undo-tree-id6860 . -1) (undo-tree-id6862 . -1) (undo-tree-id6864 . -1) (undo-tree-id6866 . -1) (undo-tree-id6868 . -1) (undo-tree-id6870 . -1) (undo-tree-id6872 . -1) (undo-tree-id6874 . -1) (undo-tree-id6876 . -1) (undo-tree-id6878 . -1) (undo-tree-id6880 . -1) (undo-tree-id6882 . -1) (undo-tree-id6884 . -1) (undo-tree-id6886 . -1) (undo-tree-id6888 . -1) (undo-tree-id6890 . -1) (undo-tree-id6892 . -1) (undo-tree-id6894 . -1) (undo-tree-id6896 . -1) (undo-tree-id6898 . -1) (undo-tree-id6900 . -1) (undo-tree-id6902 . -1)) ((4705 . 4706)) (25756 47447 460176 399000) 0 nil])
([nil nil ((4720 . 4721) 4719) nil (25756 47479 78546 157000) 0 nil])
([nil nil ((4668 . 4669) 4615) ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4668)) (25756 47447 308225 842000) 0 nil] [nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4704) (undo-tree-id6668 . -1) (undo-tree-id6670 . -1) (undo-tree-id6672 . -1) (undo-tree-id6674 . -1) (undo-tree-id6676 . -1) (undo-tree-id6678 . -1) (undo-tree-id6680 . -1) (undo-tree-id6682 . -1) (undo-tree-id6684 . -1) (undo-tree-id6686 . -1) (undo-tree-id6688 . -1) (undo-tree-id6690 . -1) (undo-tree-id6692 . -1) (undo-tree-id6694 . -1) (undo-tree-id6696 . -1) (undo-tree-id6698 . -1) (undo-tree-id6700 . -1) (undo-tree-id6702 . -1) (undo-tree-id6704 . -1) (undo-tree-id6706 . -1) (undo-tree-id6708 . -1) (undo-tree-id6710 . -1) (undo-tree-id6712 . -1) (undo-tree-id6714 . -1) (undo-tree-id6716 . -1) (undo-tree-id6718 . -1) (undo-tree-id6720 . -1) (undo-tree-id6722 . -1) (undo-tree-id6724 . -1) (undo-tree-id6726 . -1) (undo-tree-id6728 . -1) (undo-tree-id6730 . -1) (undo-tree-id6732 . -1) (undo-tree-id6734 . -1) (undo-tree-id6736 . -1) (undo-tree-id6738 . -1) (undo-tree-id6740 . -1) (undo-tree-id6742 . -1) (undo-tree-id6744 . -1) (undo-tree-id6746 . -1) (undo-tree-id6748 . -1) (undo-tree-id6750 . -1) (undo-tree-id6752 . -1) (undo-tree-id6754 . -1) (undo-tree-id6756 . -1) (undo-tree-id6758 . -1) (undo-tree-id6760 . -1) (undo-tree-id6762 . -1) (undo-tree-id6764 . -1) (undo-tree-id6766 . -1) (undo-tree-id6768 . -1) (undo-tree-id6770 . -1) (undo-tree-id6772 . -1) (undo-tree-id6774 . -1) (undo-tree-id6776 . -1) (undo-tree-id6778 . -1) (undo-tree-id6780 . -1) (undo-tree-id6782 . -1) (undo-tree-id6784 . -1) (undo-tree-id6786 . -1) (undo-tree-id6788 . -1) (undo-tree-id6790 . -1) (undo-tree-id6792 . -1) (undo-tree-id6794 . -1) (undo-tree-id6796 . -1) (undo-tree-id6798 . -1) (undo-tree-id6800 . -1) (undo-tree-id6802 . -1) (undo-tree-id6804 . -1) (undo-tree-id6806 . -1) (undo-tree-id6808 . -1) (undo-tree-id6810 . -1) (undo-tree-id6812 . -1) (undo-tree-id6814 . -1) (undo-tree-id6816 . -1) (undo-tree-id6818 . -1) (undo-tree-id6820 . -1) (undo-tree-id6822 . -1)) ((4704 . 4705)) (25756 47435 845668 943000) 0 nil])
([nil nil ((4722 . 4723)) nil (25756 47479 78545 421000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 4 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4706) (undo-tree-id7000 . -3) (undo-tree-id7001 . 4) (undo-tree-id7002 . -1) (undo-tree-id7003 . -4)) ((4706 . 4710)) (25756 47447 307506 58000) 0 nil])
([nil nil ((4668 . 4669) 4615) ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4668)) (25756 47435 537041 679000) 0 nil] [nil nil ((4724 . 4725)) ((#("#" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4724)) (25756 47425 41559 765000) 0 nil])
([nil nil ((4760 . 4761)) nil (25756 47479 78544 694000) 0 nil])
nil
([nil nil ((#(">>> " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 4 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4705) (undo-tree-id6996 . -3) (undo-tree-id6997 . 4) (undo-tree-id6998 . -1) (undo-tree-id6999 . -4)) ((4705 . 4709)) (25756 47435 536814 270000) 0 nil])
([nil nil ((4762 . 4763) (#(":" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -4762) (undo-tree-id6656 . -1) (undo-tree-id6658 . -1) (undo-tree-id6660 . -1) (undo-tree-id6662 . -1) (undo-tree-id6664 . -1) (undo-tree-id6666 . -1) 4763 (4762 . 4763)) ((#(":" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4762) (4762 . 4763) (#("#" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4762)) (25756 47424 449802 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -4800) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (4759 . 4760) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -4759) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) 4722) nil (25756 47479 79263 741000) 0 nil])
nil
([nil nil ((#(">>> " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 4 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4704) (undo-tree-id6652 . -3) (undo-tree-id6653 . 4) (undo-tree-id6654 . -1)) ((4704 . 4708) (t 25756 47414 726656 453000)) (25756 47423 717307 842000) 0 nil])
([nil nil ((#("Alternatively, you could use file patterns; for example, train_filepaths
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 62 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 62 63 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 63 72 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 72 73 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4811) (undo-tree-id7798 . -72) (undo-tree-id7799 . 73) (undo-tree-id7800 . -73) (t 25756 47480 795239 913000)) nil (25756 47488 914338 680000) 0 nil] [nil nil ((#("#" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 4760) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1)) ((4760 . 4761)) (25756 47479 78250 558000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4799) (t 25756 47414 726656 453000)) ((4799 . 4800)) (25756 47423 72475 614000) 0 nil])
([nil nil ((#("= \"datasets/housing/my_train_*.csv\". Now let’s create a dataset
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 22 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 22 23 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 23 28 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 28 29 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 29 30 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 64 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4811) (undo-tree-id7793 . -63) (undo-tree-id7794 . 64) (undo-tree-id7795 . 61) (undo-tree-id7796 . -11) (undo-tree-id7797 . -64)) nil (25756 47488 914332 357000) 0 nil])
nil
([nil nil ((4757 . 4758) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -4757) (undo-tree-id6955 . -1) (undo-tree-id6957 . -1) (undo-tree-id6959 . -1) (undo-tree-id6961 . -1) (undo-tree-id6963 . -1) (undo-tree-id6965 . -1) (undo-tree-id6967 . -1) (undo-tree-id6969 . -1) (undo-tree-id6971 . -1) (undo-tree-id6973 . -1) (undo-tree-id6975 . -1) (undo-tree-id6977 . -1) (undo-tree-id6979 . -1) 4720) ((4757 . 4758) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t)) . 4757) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1)) (25756 47422 647563 346000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 34 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 4669) (undo-tree-id7891 . -34) (undo-tree-id7892 . -35) (undo-tree-id7893 . -35) (undo-tree-id7894 . -35) (undo-tree-id7895 . -35) (undo-tree-id7896 . -35) (undo-tree-id7897 . -35) (undo-tree-id7898 . -35) (undo-tree-id7899 . -35) (undo-tree-id7900 . -35) (t 25756 47488 923311 765000)) nil (25756 47523 638125 344000) 0 nil])
([nil nil ((#("#" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 4758) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1)) ((4758 . 4759)) (25756 47422 647336 758000) 0 nil] [nil nil ((4798 . 4799) (#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -4798) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) 4757) ((4798 . 4799) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4798)) (25756 47419 665694 325000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t)) . 4669) (undo-tree-id7882 . -1) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) (undo-tree-id7889 . -1) (undo-tree-id7890 . -1)) nil (25756 47523 638118 332000) 0 nil])
nil
nil
([nil nil ((#("train_filepaths
" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1 5 (font-lock-fontified t src-block t fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 5 6 (font-lock-fontified t src-block t fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) invisible t) 6 15 (font-lock-fontified t src-block t fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) display ((raise -0.3) (height 0.7))) 15 16 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t)) . 4669) (undo-tree-id7872 . -15) (undo-tree-id7873 . -16) (undo-tree-id7874 . -16) (undo-tree-id7875 . -16) (undo-tree-id7876 . -16) (undo-tree-id7877 . -16) (undo-tree-id7878 . -16) (undo-tree-id7879 . -16) (undo-tree-id7880 . -16) (undo-tree-id7881 . -16)) nil (25756 47523 638110 591000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t)) . 4669) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (undo-tree-id7867 . -1) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (undo-tree-id7870 . -1) (undo-tree-id7871 . -1)) nil (25756 47523 638103 287000) 0 nil])
([nil nil ((#("#['datasets/housing/my_train_00.csv', #'datasets/housing/my_train_01.csv',...]
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 1 2 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 2 22 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 22 23 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 23 28 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 28 29 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 29 35 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 35 36 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 36 37 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 37 38 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 38 39 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 39 59 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 59 60 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 60 65 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 65 66 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 66 72 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 72 73 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 73 77 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t font-lock-fontified t src-block t) 77 78 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t src-block t) 78 79 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t)) . 4669) (undo-tree-id7829 . -78) (undo-tree-id7830 . 40) (undo-tree-id7831 . -79) (undo-tree-id7832 . -79) (undo-tree-id7833 . -79) (undo-tree-id7834 . -79) (undo-tree-id7835 . -79) (undo-tree-id7836 . -79) (undo-tree-id7837 . -79) (undo-tree-id7838 . -79) (undo-tree-id7839 . -38) (undo-tree-id7840 . -38) (undo-tree-id7841 . -38) (undo-tree-id7842 . -38) (undo-tree-id7843 . -38) (undo-tree-id7844 . -38) (undo-tree-id7845 . -38) (undo-tree-id7846 . -38) (undo-tree-id7847 . -38) (undo-tree-id7848 . -38) (undo-tree-id7849 . -38) (undo-tree-id7850 . -38) (undo-tree-id7851 . -38) (undo-tree-id7852 . -38) (undo-tree-id7853 . -38) (undo-tree-id7854 . -79)) nil (25756 47523 638089 948000) 0 nil])
([nil nil ((#("#+end_src
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 1 8 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 8 9 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 9 10 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4669) (undo-tree-id7805 . -9) (undo-tree-id7806 . 10) (undo-tree-id7807 . -10) (undo-tree-id7808 . -10) (undo-tree-id7809 . -10) (undo-tree-id7810 . -10) (undo-tree-id7811 . -10) (undo-tree-id7812 . -10) (undo-tree-id7813 . -10) (undo-tree-id7814 . -10) (undo-tree-id7815 . -10) (undo-tree-id7816 . -10) (undo-tree-id7817 . -10) (undo-tree-id7818 . -10) (undo-tree-id7819 . -10) (undo-tree-id7820 . -10) (undo-tree-id7821 . -10) (undo-tree-id7822 . -10) (undo-tree-id7823 . -10) (undo-tree-id7824 . -10) (undo-tree-id7825 . -10) (undo-tree-id7826 . -10) (undo-tree-id7827 . -10) (undo-tree-id7828 . -10)) nil (25756 47523 638069 972000) 0 nil])
([nil nil ((#("containing only these file paths:
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 13 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 13 34 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4669) (undo-tree-id7801 . -33) (undo-tree-id7802 . 34) (undo-tree-id7803 . 34) (undo-tree-id7804 . -34)) nil (25756 47523 637853 873000) 0 nil])
([nil nil ((4668 . 4669) 4615) nil (25756 47523 637837 399000) 0 nil])
([nil nil ((4539 . 4540) (t 25756 47523 655618 962000) 4535) nil (25756 47527 386950 174000) 0 nil])
([nil nil ((4682 . 4688) (#("y" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -4682) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -4683) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) 4684 (4682 . 4684) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4682 4688 nil nil nil t #s(yas--exit 4706 nil))) #s(yas--exit 4706 nil) 9 nil #s(yas--field 1 4682 4688 nil nil nil t #s(yas--exit 4706 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . -4700) (undo-tree-id8001 . -2) (4670 . 4713) (#("sr" 0 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4670) (undo-tree-id8002 . -1) (undo-tree-id8003 . -2) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -2) (undo-tree-id8042 . -2) (undo-tree-id8043 . -2) (undo-tree-id8044 . -2) (undo-tree-id8045 . -2) (undo-tree-id8046 . -2) (undo-tree-id8047 . -2) (undo-tree-id8048 . -2) (undo-tree-id8049 . -2) (undo-tree-id8050 . -2) (undo-tree-id8051 . -2) 4672 (4670 . 4672) (t 25756 47527 403652 129000)) nil (25756 47545 218759 752000) 0 nil])
([nil nil ((apply yas--snippet-revive 4670 4717 #s(yas--snippet nil (#s(yas--field 1 4682 4688 nil nil nil t #s(yas--exit 4706 nil))) #s(yas--exit 4706 nil) 9 nil #s(yas--field 1 4682 4688 nil nil nil t #s(yas--exit 4706 nil)) nil nil))) nil (25756 47545 218542 182000) 0 nil])
([nil nil ((#("filepath_dataset = tf.data.Dataset.list_files(train_filepaths, seed=42)
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 8 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 8 9 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 9 16 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 16 39 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 39 40 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 40 45 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 45 51 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 51 52 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 52 61 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 61 72 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4718) (undo-tree-id7936 . -71) (undo-tree-id7937 . 72) (undo-tree-id7938 . 72) (undo-tree-id7939 . -8) (undo-tree-id7940 . -19) (undo-tree-id7941 . 53) (undo-tree-id7942 . -21) (undo-tree-id7943 . -19) (undo-tree-id7944 . -19) (undo-tree-id7945 . -19) (undo-tree-id7946 . -19) (undo-tree-id7947 . -19) (undo-tree-id7948 . -19) (undo-tree-id7949 . -19) (undo-tree-id7950 . -19) (undo-tree-id7951 . -19) (undo-tree-id7952 . -19) (undo-tree-id7953 . -19) (undo-tree-id7954 . -19) (undo-tree-id7955 . -19) (undo-tree-id7956 . -19) (undo-tree-id7957 . -19) (undo-tree-id7958 . -19) (undo-tree-id7959 . -19) (undo-tree-id7960 . -19) (undo-tree-id7961 . -72) 4737) nil (25756 47545 218540 485000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4705 . 4706) (#("
" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -4777) (4705 . 4778)) nil (25756 47545 218519 384000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 4705) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1) (undo-tree-id7933 . -1) (undo-tree-id7934 . -1) (undo-tree-id7935 . -1)) nil (25756 47545 218517 686000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4777) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (undo-tree-id7914 . -1) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1)) nil (25756 47545 218501 915000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4777) (undo-tree-id7901 . -1)) nil (25756 47545 218479 510000) 0 nil])
([nil nil ((4786 . 4787) (t 25756 47545 235809 959000) 4777) nil (25756 47547 341615 269000) 0 nil])
([nil nil ((4669 . 4670) (t 25756 47547 351828 692000) 4616) nil (25756 47551 246600 817000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 34 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 4419) (undo-tree-id8156 . -34) (undo-tree-id8157 . -35) (undo-tree-id8158 . -35) (undo-tree-id8159 . -35) (undo-tree-id8160 . -35) (undo-tree-id8161 . -35) (undo-tree-id8162 . -35) (undo-tree-id8163 . -35) (undo-tree-id8164 . -35) (undo-tree-id8165 . -35) (t 25756 47551 263863 328000)) nil (25756 47584 31237 373000) 0 nil])
([nil nil ((#("MedInc,HouseAge,AveRooms,AveBedrms,Popul,AveOccup,Lat,Long,MedianHouseValue
" 0 73 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 73 74 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 74 75 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 75 76 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t)) . 4419) (undo-tree-id8143 . -75) (undo-tree-id8144 . -76) (undo-tree-id8145 . -76) (undo-tree-id8146 . -76) (undo-tree-id8147 . -76) (undo-tree-id8148 . -76) (undo-tree-id8149 . -76) (undo-tree-id8150 . -76) (undo-tree-id8151 . -76) (undo-tree-id8152 . -75) (undo-tree-id8153 . 76) (undo-tree-id8154 . -6) (undo-tree-id8155 . -76)) nil (25756 47584 31229 212000) 0 nil])
([nil nil ((#("#+end_src
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 1 9 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 9 10 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4419) (undo-tree-id8133 . -9) (undo-tree-id8134 . -10) (undo-tree-id8135 . -10) (undo-tree-id8136 . -10) (undo-tree-id8137 . -10) (undo-tree-id8138 . -10) (undo-tree-id8139 . -10) (undo-tree-id8140 . -10) (undo-tree-id8141 . -10) (undo-tree-id8142 . -10)) nil (25756 47584 31220 790000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4419) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1)) nil (25756 47584 31213 28000) 0 nil])
([nil nil ((#("Let's also suppose trainfilepaths contains the list of training file paths
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 4 24 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 24 33 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display nil) 33 75 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4419) (undo-tree-id8098 . -74) (undo-tree-id8099 . 56) (undo-tree-id8100 . -33) (undo-tree-id8101 . -75) (undo-tree-id8102 . -75) (undo-tree-id8103 . -75) (undo-tree-id8104 . -75) (undo-tree-id8105 . -75) (undo-tree-id8106 . -75) (undo-tree-id8107 . -75) (undo-tree-id8108 . -75) (undo-tree-id8109 . -75) (undo-tree-id8110 . -75) (undo-tree-id8111 . -75) (undo-tree-id8112 . -75) (undo-tree-id8113 . -75) (undo-tree-id8114 . -75) (undo-tree-id8115 . -75) (undo-tree-id8116 . -75)) nil (25756 47584 31202 164000) 0 nil])
([nil nil ((#("(and you also have validfilepaths and testfilepaths):
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 24 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 24 33 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display nil) 33 42 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 42 51 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display nil) 51 53 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 53 54 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4419) (undo-tree-id8068 . -53) (undo-tree-id8069 . 35) (undo-tree-id8070 . -33) (undo-tree-id8071 . -6) (undo-tree-id8072 . 16) (undo-tree-id8073 . -51) (undo-tree-id8074 . -54) (undo-tree-id8075 . -54) (undo-tree-id8076 . -54) (undo-tree-id8077 . -54) (undo-tree-id8078 . -54) (undo-tree-id8079 . -54) (undo-tree-id8080 . -54) (undo-tree-id8081 . -54) (undo-tree-id8082 . -54) (undo-tree-id8083 . -54) (undo-tree-id8084 . -54) (undo-tree-id8085 . -54) (undo-tree-id8086 . -54) (undo-tree-id8087 . -54) (undo-tree-id8088 . -54) (undo-tree-id8089 . -54) (undo-tree-id8090 . -54) (undo-tree-id8091 . -54) (undo-tree-id8092 . -54) (undo-tree-id8093 . 54) (undo-tree-id8094 . -1) (undo-tree-id8095 . 3) (undo-tree-id8096 . -52) (undo-tree-id8097 . -54)) nil (25756 47584 31188 744000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4419) (undo-tree-id8066 . 1) (undo-tree-id8067 . -1)) nil (25756 47584 31165 796000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 34 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 4419) (undo-tree-id8062 . -34) (undo-tree-id8063 . 35) (undo-tree-id8064 . -34) (undo-tree-id8065 . -35)) nil (25756 47584 31163 518000) 0 nil])
([nil nil ((#("filepath_dataset = tf.data.Dataset.list_files(train_filepaths, seed=42)
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 1 8 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 8 9 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t invisible t) 9 16 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 16 39 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 39 40 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t invisible t) 40 45 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 45 46 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 46 51 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 51 52 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t invisible t) 52 61 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 61 70 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 70 71 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t) 71 72 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t src-block t)) . 4419) (undo-tree-id8055 . -71) (undo-tree-id8056 . -71) (undo-tree-id8057 . 72) (undo-tree-id8058 . -71) (undo-tree-id8059 . 72) (undo-tree-id8060 . -8) (undo-tree-id8061 . -72)) nil (25756 47584 31159 320000) 0 nil])
([nil nil ((#("#+end_src
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 1 9 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) font-lock-fontified t face org-meta-line) 9 10 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4419) (undo-tree-id8052 . -9) (undo-tree-id8053 . 10) (undo-tree-id8054 . -10)) nil (25756 47584 31151 513000) 0 nil])
([nil nil ((#("/" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4440) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) 4441 (4440 . 4441) (#("\\" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4440) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) 4441 (4440 . 4441) (t 25756 47584 96154 139000)) nil (25756 47633 711825 345000) 0 nil])
([nil nil ((4506 . 4507) (t 25756 47634 938780 52000)) nil (25756 47750 877664 725000) 0 nil] [nil nil ((4436 . 4437) (t 25756 47603 544326 497000)) ((#("'" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4436) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1)) (25756 47632 831464 151000) 0 nil])
([nil nil ((#("In general this is a good thing, but you can set shuffle=False
" 0 63 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4507) (undo-tree-id10013 . -62) (undo-tree-id10014 . 63) (undo-tree-id10015 . -63)) nil (25756 47750 877663 639000) 0 nil])
([nil nil ((4436 . 4437) (#("'" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4436) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1)) ((4436 . 4437) (#("`" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4436)) (25756 47632 324275 742000) 0 nil] [nil nil ((#("'" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4436) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1)) ((4436 . 4437)) (25756 47618 640325 788000) 0 nil])
([nil nil ((#("if you do not want that for some reason.
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 41 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4507) (undo-tree-id10010 . -40) (undo-tree-id10011 . 41) (undo-tree-id10012 . -41)) nil (25756 47750 877661 16000) 0 nil])
([nil nil ((4449 . 4450) (#("]" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4449) (undo-tree-id8296 . -1) (undo-tree-id8297 . 1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) 4450 (4449 . 4450)) ((#("]" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 4449) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (4449 . 4450) (#("`" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4449) (t 25756 47631 914531 175000)) (25756 47631 850160 835000) 0 nil])
([nil nil ((4435 . 4438) (#(" " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4435) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) 4436) ((4435 . 4436) (#(" ]x" 0 3 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4435) (undo-tree-id8292 . -2) (undo-tree-id8293 . 1) (undo-tree-id8294 . -2) (undo-tree-id8295 . -2)) (25756 47618 639911 750000) 0 nil])
([nil nil ((#("each row contains eight input features plus the target median house value:
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 47 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 47 48 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 48 49 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 49 74 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 74 75 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4344) (undo-tree-id9923 . -74) (undo-tree-id9924 . -75) (undo-tree-id9925 . -75) (undo-tree-id9926 . -75) (undo-tree-id9927 . -75) (undo-tree-id9928 . -75) (undo-tree-id9929 . -75) (undo-tree-id9930 . -75) (undo-tree-id9931 . -75) (undo-tree-id9932 . -75) (undo-tree-id9933 . -75) (undo-tree-id9934 . -75) (undo-tree-id9935 . -75) (undo-tree-id9936 . -75) (undo-tree-id9937 . -75) (undo-tree-id9938 . -75) (undo-tree-id9939 . -75) (undo-tree-id9940 . -75) (undo-tree-id9941 . -75) (undo-tree-id9942 . -75) (undo-tree-id9943 . -75) (undo-tree-id9944 . -75) (undo-tree-id9945 . -75) (undo-tree-id9946 . -75) (undo-tree-id9947 . -75) (undo-tree-id9948 . -75) (undo-tree-id9949 . -75) (undo-tree-id9950 . -75) (undo-tree-id9951 . -75) (undo-tree-id9952 . -75) (undo-tree-id9953 . -75) (undo-tree-id9954 . -75) (undo-tree-id9955 . -75) (undo-tree-id9956 . -75) (undo-tree-id9957 . -75) (undo-tree-id9958 . -75) (undo-tree-id9959 . -75) (undo-tree-id9960 . -75) (undo-tree-id9961 . -75) (undo-tree-id9962 . -75) (undo-tree-id9963 . -75) (undo-tree-id9964 . -75) (undo-tree-id9965 . -75) (undo-tree-id9966 . -75) (undo-tree-id9967 . -75) (undo-tree-id9968 . -75) (undo-tree-id9969 . -75) (undo-tree-id9970 . -75) (undo-tree-id9971 . -75) (undo-tree-id9972 . -75) (undo-tree-id9973 . -75) (undo-tree-id9974 . -75) (undo-tree-id9975 . -75) (undo-tree-id9976 . -75) (undo-tree-id9977 . -75) (undo-tree-id9978 . -75) (undo-tree-id9979 . -75) (undo-tree-id9980 . -75) (undo-tree-id9981 . -75) (undo-tree-id9982 . -75) (undo-tree-id9983 . -75) (undo-tree-id9984 . -75) (undo-tree-id9985 . -75) (undo-tree-id9986 . -75) (undo-tree-id9987 . -75) (undo-tree-id9988 . -75) (undo-tree-id9989 . -75) (undo-tree-id9990 . -75) (undo-tree-id9991 . -75) (undo-tree-id9992 . -75) (undo-tree-id9993 . -75) (undo-tree-id9994 . -75) (undo-tree-id9995 . -75) (undo-tree-id9996 . -75) (undo-tree-id9997 . -75) (undo-tree-id9998 . -75) (undo-tree-id9999 . -75) (undo-tree-id10000 . -75) (undo-tree-id10001 . -75) (undo-tree-id10002 . -75) (undo-tree-id10003 . -75) (undo-tree-id10004 . -75) (undo-tree-id10005 . -75) (undo-tree-id10006 . -75) (undo-tree-id10007 . -75) (undo-tree-id10008 . -75) (undo-tree-id10009 . -75)) nil (25756 47750 877656 4000) 0 nil])
nil
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 4344) (undo-tree-id9911 . -1) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (undo-tree-id9918 . -1) (undo-tree-id9919 . -1) (undo-tree-id9920 . -1) (undo-tree-id9921 . -1) (undo-tree-id9922 . -1)) nil (25756 47750 877604 254000) 0 nil])
([nil nil ((#("By default, the list_files() function returns a dataset that shuffles the
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 15 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 15 16 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 16 20 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 20 21 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 21 26 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 26 28 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 28 74 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9772 . -73) (undo-tree-id9773 . 74) (undo-tree-id9774 . -20) (undo-tree-id9775 . -16) (undo-tree-id9776 . -16) (undo-tree-id9777 . -16) (undo-tree-id9778 . -16) (undo-tree-id9779 . -16) (undo-tree-id9780 . -16) (undo-tree-id9781 . -16) (undo-tree-id9782 . -16) (undo-tree-id9783 . -16) (undo-tree-id9784 . -28) (undo-tree-id9785 . -28) (undo-tree-id9786 . -28) (undo-tree-id9787 . -28) (undo-tree-id9788 . -28) (undo-tree-id9789 . -28) (undo-tree-id9790 . -28) (undo-tree-id9791 . -28) (undo-tree-id9792 . -28) (undo-tree-id9793 . -28) (undo-tree-id9794 . -28) (undo-tree-id9795 . -28) (undo-tree-id9796 . -28) (undo-tree-id9797 . -28) (undo-tree-id9798 . -28) (undo-tree-id9799 . -28) (undo-tree-id9800 . -28) (undo-tree-id9801 . -28) (undo-tree-id9802 . -28) (undo-tree-id9803 . -28) (undo-tree-id9804 . -28) (undo-tree-id9805 . -28) (undo-tree-id9806 . -28) (undo-tree-id9807 . -28) (undo-tree-id9808 . -28) (undo-tree-id9809 . -28) (undo-tree-id9810 . -28) (undo-tree-id9811 . -28) (undo-tree-id9812 . -28) (undo-tree-id9813 . -28) (undo-tree-id9814 . -28) (undo-tree-id9815 . -28) (undo-tree-id9816 . -28) (undo-tree-id9817 . -28) (undo-tree-id9818 . -28) (undo-tree-id9819 . -28) (undo-tree-id9820 . -16) (undo-tree-id9821 . -16) (undo-tree-id9822 . -16) (undo-tree-id9823 . -16) (undo-tree-id9824 . -16) (undo-tree-id9825 . -16) (undo-tree-id9826 . -16) (undo-tree-id9827 . -16) (undo-tree-id9828 . -16) (undo-tree-id9829 . -16) (undo-tree-id9830 . -16) (undo-tree-id9831 . -16) (undo-tree-id9832 . -16) (undo-tree-id9833 . -16) (undo-tree-id9834 . -16) (undo-tree-id9835 . -16) (undo-tree-id9836 . -16) (undo-tree-id9837 . -16) (undo-tree-id9838 . -16) (undo-tree-id9839 . -16) (undo-tree-id9840 . -16) (undo-tree-id9841 . -16) (undo-tree-id9842 . -16) (undo-tree-id9843 . -16) (undo-tree-id9844 . -16) (undo-tree-id9845 . -16) (undo-tree-id9846 . -16) (undo-tree-id9847 . -16) (undo-tree-id9848 . -16) (undo-tree-id9849 . -16) (undo-tree-id9850 . -16) (undo-tree-id9851 . -16) (undo-tree-id9852 . -16) (undo-tree-id9853 . -16) (undo-tree-id9854 . -16) (undo-tree-id9855 . -16) (undo-tree-id9856 . -16) (undo-tree-id9857 . -16) (undo-tree-id9858 . -16) (undo-tree-id9859 . -16) (undo-tree-id9860 . -16) (undo-tree-id9861 . -20) (undo-tree-id9862 . -22) (undo-tree-id9863 . -26) (undo-tree-id9864 . -26) (undo-tree-id9865 . -26) (undo-tree-id9866 . -26) (undo-tree-id9867 . -26) (undo-tree-id9868 . -26) (undo-tree-id9869 . -26) (undo-tree-id9870 . -26) (undo-tree-id9871 . -29) (undo-tree-id9872 . -29) (undo-tree-id9873 . -29) (undo-tree-id9874 . -29) (undo-tree-id9875 . -29) (undo-tree-id9876 . -29) (undo-tree-id9877 . -29) (undo-tree-id9878 . -29) (undo-tree-id9879 . -38) (undo-tree-id9880 . -46) (undo-tree-id9881 . 26) (undo-tree-id9882 . -55) (undo-tree-id9883 . -48) (undo-tree-id9884 . -48) (undo-tree-id9885 . -48) (undo-tree-id9886 . -48) (undo-tree-id9887 . -48) (undo-tree-id9888 . -48) (undo-tree-id9889 . -48) (undo-tree-id9890 . -48) (undo-tree-id9891 . -56) (undo-tree-id9892 . -61) (undo-tree-id9893 . -70) (undo-tree-id9894 . -74) (undo-tree-id9895 . -74) (undo-tree-id9896 . -74) (undo-tree-id9897 . -74) (undo-tree-id9898 . -74) (undo-tree-id9899 . -74) (undo-tree-id9900 . -74) (undo-tree-id9901 . -74) (undo-tree-id9902 . -74) (undo-tree-id9903 . -74) (undo-tree-id9904 . -74) (undo-tree-id9905 . -74) (undo-tree-id9906 . -74) (undo-tree-id9907 . -74) (undo-tree-id9908 . -74) (undo-tree-id9909 . -74) (undo-tree-id9910 . -74)) nil (25756 47750 877591 996000) 0 nil])
([nil nil ((#("file paths. 
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 13 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9683 . -12) (undo-tree-id9684 . 13) (undo-tree-id9685 . -5) (undo-tree-id9686 . -10) (undo-tree-id9687 . -12) (undo-tree-id9688 . -12) (undo-tree-id9689 . -12) (undo-tree-id9690 . -12) (undo-tree-id9691 . -12) (undo-tree-id9692 . -12) (undo-tree-id9693 . -12) (undo-tree-id9694 . -12) (undo-tree-id9695 . -12) (undo-tree-id9696 . -12) (undo-tree-id9697 . -12) (undo-tree-id9698 . -13) (undo-tree-id9699 . -13) (undo-tree-id9700 . -13) (undo-tree-id9701 . -13) (undo-tree-id9702 . -13) (undo-tree-id9703 . -13) (undo-tree-id9704 . -13) (undo-tree-id9705 . -13) (undo-tree-id9706 . -13) (undo-tree-id9707 . -13) (undo-tree-id9708 . -13) (undo-tree-id9709 . -13) (undo-tree-id9710 . -13) (undo-tree-id9711 . -13) (undo-tree-id9712 . -13) (undo-tree-id9713 . -13) (undo-tree-id9714 . -13) (undo-tree-id9715 . -13) (undo-tree-id9716 . -13) (undo-tree-id9717 . -13) (undo-tree-id9718 . -13) (undo-tree-id9719 . -13) (undo-tree-id9720 . -13) (undo-tree-id9721 . -13) (undo-tree-id9722 . -13) (undo-tree-id9723 . -13) (undo-tree-id9724 . -13) (undo-tree-id9725 . -13) (undo-tree-id9726 . -13) (undo-tree-id9727 . -13) (undo-tree-id9728 . -13) (undo-tree-id9729 . -13) (undo-tree-id9730 . -13) (undo-tree-id9731 . -13) (undo-tree-id9732 . -13) (undo-tree-id9733 . -13) (undo-tree-id9734 . -13) (undo-tree-id9735 . -13) (undo-tree-id9736 . -13) (undo-tree-id9737 . -13) (undo-tree-id9738 . -13) (undo-tree-id9739 . -13) (undo-tree-id9740 . -13) (undo-tree-id9741 . -13) (undo-tree-id9742 . -13) (undo-tree-id9743 . -13) (undo-tree-id9744 . -13) (undo-tree-id9745 . -13) (undo-tree-id9746 . -13) (undo-tree-id9747 . -13) (undo-tree-id9748 . -13) (undo-tree-id9749 . -13) (undo-tree-id9750 . -13) (undo-tree-id9751 . -13) (undo-tree-id9752 . -13) (undo-tree-id9753 . -13) (undo-tree-id9754 . -13) (undo-tree-id9755 . -13) (undo-tree-id9756 . -13) (undo-tree-id9757 . -13) (undo-tree-id9758 . -13) (undo-tree-id9759 . -13) (undo-tree-id9760 . -13) (undo-tree-id9761 . -13) (undo-tree-id9762 . -13) (undo-tree-id9763 . -13) (undo-tree-id9764 . -13) (undo-tree-id9765 . -13) (undo-tree-id9766 . -13) (undo-tree-id9767 . -13) (undo-tree-id9768 . -13) (undo-tree-id9769 . -13) (undo-tree-id9770 . -13) (undo-tree-id9771 . -13)) nil (25756 47750 877509 200000) 0 nil])
([nil nil ((#("Next" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 4 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9679 . -3) (undo-tree-id9680 . 4) (undo-tree-id9681 . 4) (undo-tree-id9682 . -4)) nil (25756 47750 877456 252000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9675 . 1) (undo-tree-id9676 . 1) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1)) nil (25756 47750 877453 224000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) fontified t)) . 4344) (undo-tree-id9671 . 1) (undo-tree-id9672 . 1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1)) nil (25756 47750 877449 917000) 0 nil])
([nil nil ((#("you can call " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 13 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9644 . -12) (undo-tree-id9645 . -12) (undo-tree-id9646 . 13) (undo-tree-id9647 . -12) (undo-tree-id9648 . -13) (undo-tree-id9649 . -12) (undo-tree-id9650 . -1) (undo-tree-id9651 . -1) (undo-tree-id9652 . -1) (undo-tree-id9653 . -1) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -2) (undo-tree-id9659 . -3) (undo-tree-id9660 . -4) (undo-tree-id9661 . -5) (undo-tree-id9662 . -6) (undo-tree-id9663 . -7) (undo-tree-id9664 . -8) (undo-tree-id9665 . -9) (undo-tree-id9666 . -10) (undo-tree-id9667 . -11) (undo-tree-id9668 . -12) (undo-tree-id9669 . -12) (undo-tree-id9670 . -13) 4356) nil (25756 47750 877446 48000) 0 nil])
([nil nil ((#("(skipping the first line of each file, which is
the header row, using the skip() method)" 0 48 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 48 88 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4429) (undo-tree-id9573 . -87) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (undo-tree-id9590 . -1) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (undo-tree-id9605 . -1) (undo-tree-id9606 . -1) (undo-tree-id9607 . -1) (undo-tree-id9608 . -1) (undo-tree-id9609 . -1) (undo-tree-id9610 . -1) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) (undo-tree-id9614 . -1) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -1) (undo-tree-id9618 . -1) (undo-tree-id9619 . -1) (undo-tree-id9620 . -1) (undo-tree-id9621 . -1) (undo-tree-id9622 . -1) (undo-tree-id9623 . -1) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) (undo-tree-id9640 . -1) (undo-tree-id9641 . -1) (undo-tree-id9642 . -88) (undo-tree-id9643 . -88) 4430) nil (25756 47750 877427 906000) 0 nil])
([nil nil ((#("the interleave() method to read from five files at a
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 53 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9526 . -52) (undo-tree-id9527 . 53) (undo-tree-id9528 . -31) (undo-tree-id9529 . -4) (undo-tree-id9530 . -14) (undo-tree-id9531 . -17) (undo-tree-id9532 . -24) (undo-tree-id9533 . -27) (undo-tree-id9534 . -32) (undo-tree-id9535 . -37) (undo-tree-id9536 . -42) (undo-tree-id9537 . -48) (undo-tree-id9538 . -51) (undo-tree-id9539 . -53) (undo-tree-id9540 . -53) (undo-tree-id9541 . -53) (undo-tree-id9542 . -53) (undo-tree-id9543 . -53) (undo-tree-id9544 . -53) (undo-tree-id9545 . -53) (undo-tree-id9546 . -53) (undo-tree-id9547 . -53) (undo-tree-id9548 . -53) (undo-tree-id9549 . -53) (undo-tree-id9550 . -53) (undo-tree-id9551 . -53) (undo-tree-id9552 . -53) (undo-tree-id9553 . -53) (undo-tree-id9554 . -31) (undo-tree-id9555 . -31) (undo-tree-id9556 . -31) (undo-tree-id9557 . -31) (undo-tree-id9558 . -31) (undo-tree-id9559 . -31) (undo-tree-id9560 . -31) (undo-tree-id9561 . -31) (undo-tree-id9562 . -31) (undo-tree-id9563 . -31) (undo-tree-id9564 . -31) (undo-tree-id9565 . -31) (undo-tree-id9566 . -31) (undo-tree-id9567 . -31) (undo-tree-id9568 . -31) (undo-tree-id9569 . -31) (undo-tree-id9570 . -31) (undo-tree-id9571 . -31) (undo-tree-id9572 . -53) 4375) nil (25756 47750 877384 880000) 0 nil])
([nil nil ((#("time and interleave their lines :
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 32 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 32 34 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9282 . -33) (undo-tree-id9283 . 2) (undo-tree-id9284 . 34) (undo-tree-id9285 . -31) (undo-tree-id9286 . -5) (undo-tree-id9287 . -5) (undo-tree-id9288 . -5) (undo-tree-id9289 . -5) (undo-tree-id9290 . -5) (undo-tree-id9291 . -5) (undo-tree-id9292 . -5) (undo-tree-id9293 . -5) (undo-tree-id9294 . -5) (undo-tree-id9295 . -5) (undo-tree-id9296 . -5) (undo-tree-id9297 . -5) (undo-tree-id9298 . -5) (undo-tree-id9299 . -5) (undo-tree-id9300 . -5) (undo-tree-id9301 . -9) (undo-tree-id9302 . -9) (undo-tree-id9303 . -9) (undo-tree-id9304 . -9) (undo-tree-id9305 . -9) (undo-tree-id9306 . -9) (undo-tree-id9307 . -9) (undo-tree-id9308 . -9) (undo-tree-id9309 . -9) (undo-tree-id9310 . -9) (undo-tree-id9311 . -9) (undo-tree-id9312 . -9) (undo-tree-id9313 . -9) (undo-tree-id9314 . -9) (undo-tree-id9315 . -9) (undo-tree-id9316 . -9) (undo-tree-id9317 . -9) (undo-tree-id9318 . -9) (undo-tree-id9319 . -9) (undo-tree-id9320 . -9) (undo-tree-id9321 . -9) (undo-tree-id9322 . -9) (undo-tree-id9323 . -9) (undo-tree-id9324 . -9) (undo-tree-id9325 . -9) (undo-tree-id9326 . -9) (undo-tree-id9327 . -9) (undo-tree-id9328 . -9) (undo-tree-id9329 . -9) (undo-tree-id9330 . -20) (undo-tree-id9331 . -20) (undo-tree-id9332 . -20) (undo-tree-id9333 . -20) (undo-tree-id9334 . -20) (undo-tree-id9335 . -20) (undo-tree-id9336 . -20) (undo-tree-id9337 . -20) (undo-tree-id9338 . -20) (undo-tree-id9339 . -20) (undo-tree-id9340 . -20) (undo-tree-id9341 . -20) (undo-tree-id9342 . -20) (undo-tree-id9343 . -20) (undo-tree-id9344 . -20) (undo-tree-id9345 . -20) (undo-tree-id9346 . -20) (undo-tree-id9347 . -20) (undo-tree-id9348 . -20) (undo-tree-id9349 . -20) (undo-tree-id9350 . -20) (undo-tree-id9351 . -20) (undo-tree-id9352 . -20) (undo-tree-id9353 . -20) (undo-tree-id9354 . -20) (undo-tree-id9355 . -20) (undo-tree-id9356 . -20) (undo-tree-id9357 . -20) (undo-tree-id9358 . -20) (undo-tree-id9359 . -20) (undo-tree-id9360 . -20) (undo-tree-id9361 . -20) (undo-tree-id9362 . -20) (undo-tree-id9363 . -20) (undo-tree-id9364 . -20) (undo-tree-id9365 . -20) (undo-tree-id9366 . -26) (undo-tree-id9367 . -26) (undo-tree-id9368 . -26) (undo-tree-id9369 . -26) (undo-tree-id9370 . -26) (undo-tree-id9371 . -26) (undo-tree-id9372 . -26) (undo-tree-id9373 . -26) (undo-tree-id9374 . -26) (undo-tree-id9375 . -26) (undo-tree-id9376 . -26) (undo-tree-id9377 . -26) (undo-tree-id9378 . -26) (undo-tree-id9379 . -26) (undo-tree-id9380 . -26) (undo-tree-id9381 . -32) (undo-tree-id9382 . -32) (undo-tree-id9383 . -32) (undo-tree-id9384 . -32) (undo-tree-id9385 . -32) (undo-tree-id9386 . -32) (undo-tree-id9387 . -32) (undo-tree-id9388 . -32) (undo-tree-id9389 . -32) (undo-tree-id9390 . -32) (undo-tree-id9391 . -32) (undo-tree-id9392 . -32) (undo-tree-id9393 . -32) (undo-tree-id9394 . -32) (undo-tree-id9395 . -32) (undo-tree-id9396 . -32) (undo-tree-id9397 . -32) (undo-tree-id9398 . -32) (undo-tree-id9399 . -32) (undo-tree-id9400 . -32) (undo-tree-id9401 . -32) (undo-tree-id9402 . -32) (undo-tree-id9403 . -32) (undo-tree-id9404 . -32) (undo-tree-id9405 . -32) (undo-tree-id9406 . -32) (undo-tree-id9407 . -32) (undo-tree-id9408 . -32) (undo-tree-id9409 . -32) (undo-tree-id9410 . -32) (undo-tree-id9411 . -32) (undo-tree-id9412 . -32) (undo-tree-id9413 . -32) (undo-tree-id9414 . -32) (undo-tree-id9415 . -32) (undo-tree-id9416 . -32) (undo-tree-id9417 . -32) (undo-tree-id9418 . -32) (undo-tree-id9419 . -32) (undo-tree-id9420 . -32) (undo-tree-id9421 . -32) (undo-tree-id9422 . -32) (undo-tree-id9423 . -32) (undo-tree-id9424 . -32) (undo-tree-id9425 . -32) (undo-tree-id9426 . -32) (undo-tree-id9427 . -32) (undo-tree-id9428 . -32) (undo-tree-id9429 . -32) (undo-tree-id9430 . -32) (undo-tree-id9431 . -32) (undo-tree-id9432 . -32) (undo-tree-id9433 . -32) (undo-tree-id9434 . -32) (undo-tree-id9435 . -32) (undo-tree-id9436 . -32) (undo-tree-id9437 . -32) (undo-tree-id9438 . -32) (undo-tree-id9439 . -32) (undo-tree-id9440 . -32) (undo-tree-id9441 . -32) (undo-tree-id9442 . -32) (undo-tree-id9443 . -32) (undo-tree-id9444 . -32) (undo-tree-id9445 . -32) (undo-tree-id9446 . -32) (undo-tree-id9447 . -32) (undo-tree-id9448 . -32) (undo-tree-id9449 . -32) (undo-tree-id9450 . -32) (undo-tree-id9451 . -32) (undo-tree-id9452 . -32) (undo-tree-id9453 . -32) (undo-tree-id9454 . -32) (undo-tree-id9455 . -32) (undo-tree-id9456 . -32) (undo-tree-id9457 . -32) (undo-tree-id9458 . -32) (undo-tree-id9459 . -32) (undo-tree-id9460 . -32) (undo-tree-id9461 . -32) (undo-tree-id9462 . -32) (undo-tree-id9463 . -32) (undo-tree-id9464 . -32) (undo-tree-id9465 . -32) (undo-tree-id9466 . -32) (undo-tree-id9467 . -32) (undo-tree-id9468 . -32) (undo-tree-id9469 . -32) (undo-tree-id9470 . -32) (undo-tree-id9471 . -32) (undo-tree-id9472 . -32) (undo-tree-id9473 . -32) (undo-tree-id9474 . -32) (undo-tree-id9475 . -32) (undo-tree-id9476 . -32) (undo-tree-id9477 . -32) (undo-tree-id9478 . -32) (undo-tree-id9479 . -31) (undo-tree-id9480 . -31) (undo-tree-id9481 . -31) (undo-tree-id9482 . -31) (undo-tree-id9483 . -31) (undo-tree-id9484 . -31) (undo-tree-id9485 . -31) (undo-tree-id9486 . -31) (undo-tree-id9487 . -31) (undo-tree-id9488 . -31) (undo-tree-id9489 . -31) (undo-tree-id9490 . -31) (undo-tree-id9491 . -31) (undo-tree-id9492 . -31) (undo-tree-id9493 . -31) (undo-tree-id9494 . -31) (undo-tree-id9495 . -31) (undo-tree-id9496 . -31) (undo-tree-id9497 . -31) (undo-tree-id9498 . -31) (undo-tree-id9499 . -31) (undo-tree-id9500 . -31) (undo-tree-id9501 . -31) (undo-tree-id9502 . -31) (undo-tree-id9503 . -31) (undo-tree-id9504 . -31) (undo-tree-id9505 . -31) (undo-tree-id9506 . -31) (undo-tree-id9507 . -31) (undo-tree-id9508 . -31) (undo-tree-id9509 . -31) (undo-tree-id9510 . -31) (undo-tree-id9511 . -31) (undo-tree-id9512 . -31) (undo-tree-id9513 . -31) (undo-tree-id9514 . -31) (undo-tree-id9515 . -31) (undo-tree-id9516 . -31) (undo-tree-id9517 . -31) (undo-tree-id9518 . -31) (undo-tree-id9519 . -31) (undo-tree-id9520 . -31) (undo-tree-id9521 . -31) (undo-tree-id9522 . -31) (undo-tree-id9523 . -31) (undo-tree-id9524 . -31) (undo-tree-id9525 . -34) 4375) nil (25756 47750 877349 194000) 0 nil])
([nil nil ((#("n_readers = 5
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 2 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 2 9 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 9 14 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4344) (undo-tree-id9257 . -13) (undo-tree-id9258 . 14) (undo-tree-id9259 . 14) (undo-tree-id9260 . -12) (undo-tree-id9261 . -12) (undo-tree-id9262 . -12) (undo-tree-id9263 . -12) (undo-tree-id9264 . -12) (undo-tree-id9265 . -12) (undo-tree-id9266 . -12) (undo-tree-id9267 . -12) (undo-tree-id9268 . -12) (undo-tree-id9269 . -12) (undo-tree-id9270 . -12) (undo-tree-id9271 . -12) (undo-tree-id9272 . -12) (undo-tree-id9273 . -12) (undo-tree-id9274 . -12) (undo-tree-id9275 . -12) (undo-tree-id9276 . -12) (undo-tree-id9277 . -12) (undo-tree-id9278 . -12) (undo-tree-id9279 . -12) (undo-tree-id9280 . -12) (undo-tree-id9281 . -14) 4356) nil (25756 47750 877182 634000) 0 nil])
([nil nil ((#("** Interleaving lines from multiple files
" 0 1 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t face org-hide keymap (keymap)) 1 2 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t composition (1 1 [9679]) keymap (keymap) face org-level-2) 2 3 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t keymap (keymap) face org-level-2) 3 4 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t face org-level-2) 4 41 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t face org-level-2) 41 42 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t)) . 4302) (undo-tree-id8413 . -41) (undo-tree-id8414 . -42) (undo-tree-id8415 . -42) (undo-tree-id8416 . -42) (undo-tree-id8417 . -42) (undo-tree-id8418 . -42) (undo-tree-id8419 . -42) (undo-tree-id8420 . -42) (undo-tree-id8421 . -42) (undo-tree-id8422 . -42) (undo-tree-id8423 . -42) (undo-tree-id8424 . -42) (undo-tree-id8425 . -42) (undo-tree-id8426 . -42) (undo-tree-id8427 . -42) (undo-tree-id8428 . -42) (undo-tree-id8429 . -42) (undo-tree-id8430 . -42) (undo-tree-id8431 . -42) (undo-tree-id8432 . -42) (undo-tree-id8433 . -42) (undo-tree-id8434 . -42) (undo-tree-id8435 . -42) (undo-tree-id8436 . -42) (undo-tree-id8437 . -42) (undo-tree-id8438 . -42) (undo-tree-id8439 . -42) (undo-tree-id8440 . -42) (undo-tree-id8441 . -42) (undo-tree-id8442 . -42) (undo-tree-id8443 . -42) (undo-tree-id8444 . -42) (undo-tree-id8445 . -42) (undo-tree-id8446 . -42) (undo-tree-id8447 . -42) (undo-tree-id8448 . -42) (undo-tree-id8449 . -42) (undo-tree-id8450 . -42) (undo-tree-id8451 . -42) (undo-tree-id8452 . -42) (undo-tree-id8453 . -42) (undo-tree-id8454 . -42) (undo-tree-id8455 . -42) (undo-tree-id8456 . -42) (undo-tree-id8457 . -42) (undo-tree-id8458 . -42) (undo-tree-id8459 . -42) (undo-tree-id8460 . -42) (undo-tree-id8461 . -42) (undo-tree-id8462 . -42) (undo-tree-id8463 . -42) (undo-tree-id8464 . -42) (undo-tree-id8465 . -42) (undo-tree-id8466 . -42) (undo-tree-id8467 . -42) (undo-tree-id8468 . -42) (undo-tree-id8469 . -42) (undo-tree-id8470 . -42) (undo-tree-id8471 . -42) (undo-tree-id8472 . -42) (undo-tree-id8473 . -42) (undo-tree-id8474 . -42) (undo-tree-id8475 . -42) (undo-tree-id8476 . -42) (undo-tree-id8477 . -42) (undo-tree-id8478 . -42) (undo-tree-id8479 . -42) (undo-tree-id8480 . -42) (undo-tree-id8481 . -42) (undo-tree-id8482 . -42) (undo-tree-id8483 . -42) (undo-tree-id8484 . -42) (undo-tree-id8485 . -42) (undo-tree-id8486 . -42) (undo-tree-id8487 . -42) (undo-tree-id8488 . -42) (undo-tree-id8489 . -42) (undo-tree-id8490 . -42) (undo-tree-id8491 . -42) (undo-tree-id8492 . -42) (undo-tree-id8493 . -42) (undo-tree-id8494 . -42) (undo-tree-id8495 . -42) (undo-tree-id8496 . -42) (undo-tree-id8497 . -42) (undo-tree-id8498 . -42) (undo-tree-id8499 . -42) (undo-tree-id8500 . -42) (undo-tree-id8501 . -42) (undo-tree-id8502 . -42) (undo-tree-id8503 . -42) (undo-tree-id8504 . -42) (undo-tree-id8505 . -42) (undo-tree-id8506 . -42) (undo-tree-id8507 . -42) (undo-tree-id8508 . -42) (undo-tree-id8509 . -42) (undo-tree-id8510 . -42) (undo-tree-id8511 . -42) (undo-tree-id8512 . -42) (undo-tree-id8513 . -42) (undo-tree-id8514 . -42) (undo-tree-id8515 . -42) (undo-tree-id8516 . -42) (undo-tree-id8517 . -42) (undo-tree-id8518 . -42) (undo-tree-id8519 . -42) (undo-tree-id8520 . -42) (undo-tree-id8521 . -42) (undo-tree-id8522 . -42) (undo-tree-id8523 . -42) (undo-tree-id8524 . -42) (undo-tree-id8525 . -42) (undo-tree-id8526 . -42) (undo-tree-id8527 . -42) (undo-tree-id8528 . -42) (undo-tree-id8529 . -42) (undo-tree-id8530 . -42) (undo-tree-id8531 . -42) (undo-tree-id8532 . -42) (undo-tree-id8533 . -42) (undo-tree-id8534 . -42) (undo-tree-id8535 . -42) (undo-tree-id8536 . -42) (undo-tree-id8537 . -42) (undo-tree-id8538 . -42) (undo-tree-id8539 . -42) (undo-tree-id8540 . -42) (undo-tree-id8541 . -42) (undo-tree-id8542 . -42) (undo-tree-id8543 . -42) (undo-tree-id8544 . -42) (undo-tree-id8545 . -42) (undo-tree-id8546 . -42) (undo-tree-id8547 . -42) (undo-tree-id8548 . -42) (undo-tree-id8549 . -42) (undo-tree-id8550 . -42) (undo-tree-id8551 . -42) (undo-tree-id8552 . -42) (undo-tree-id8553 . -42) (undo-tree-id8554 . -42) (undo-tree-id8555 . -42) (undo-tree-id8556 . -42) (undo-tree-id8557 . -42) (undo-tree-id8558 . -42) (undo-tree-id8559 . -42) (undo-tree-id8560 . -42) (undo-tree-id8561 . -42) (undo-tree-id8562 . -42) (undo-tree-id8563 . -42) (undo-tree-id8564 . -42) (undo-tree-id8565 . -42) (undo-tree-id8566 . -42) (undo-tree-id8567 . -42) (undo-tree-id8568 . -42) (undo-tree-id8569 . -42) (undo-tree-id8570 . -18) (undo-tree-id8571 . -42) (undo-tree-id8572 . -42) (undo-tree-id8573 . -42) (undo-tree-id8574 . -42) (undo-tree-id8575 . -42) (undo-tree-id8576 . -42) (undo-tree-id8577 . -42) (undo-tree-id8578 . -42) (undo-tree-id8579 . -42) (undo-tree-id8580 . -42) (undo-tree-id8581 . -42) (undo-tree-id8582 . -42) (undo-tree-id8583 . -42) (undo-tree-id8584 . -42) (undo-tree-id8585 . -42) (undo-tree-id8586 . -42) (undo-tree-id8587 . -42) (undo-tree-id8588 . -42) (undo-tree-id8589 . -42) (undo-tree-id8590 . -42) (undo-tree-id8591 . -42) (undo-tree-id8592 . -42) (undo-tree-id8593 . -42) (undo-tree-id8594 . -42) (undo-tree-id8595 . -42) (undo-tree-id8596 . -42) (undo-tree-id8597 . -42) (undo-tree-id8598 . -42) (undo-tree-id8599 . -42) (undo-tree-id8600 . -42) (undo-tree-id8601 . -42) (undo-tree-id8602 . -42) (undo-tree-id8603 . -42) (undo-tree-id8604 . -42) (undo-tree-id8605 . -42) (undo-tree-id8606 . -42) (undo-tree-id8607 . -42) (undo-tree-id8608 . -42) (undo-tree-id8609 . -42) (undo-tree-id8610 . -42) (undo-tree-id8611 . -42) (undo-tree-id8612 . -42) (undo-tree-id8613 . -42) (undo-tree-id8614 . -42) (undo-tree-id8615 . -42) (undo-tree-id8616 . -42) (undo-tree-id8617 . -42) (undo-tree-id8618 . -42) (undo-tree-id8619 . -42) (undo-tree-id8620 . -42) (undo-tree-id8621 . -42) (undo-tree-id8622 . -42) (undo-tree-id8623 . -42) (undo-tree-id8624 . -42) (undo-tree-id8625 . -42) (undo-tree-id8626 . -42) (undo-tree-id8627 . -42) (undo-tree-id8628 . -42) (undo-tree-id8629 . -42) (undo-tree-id8630 . -42) (undo-tree-id8631 . -42) (undo-tree-id8632 . -42) (undo-tree-id8633 . -42) (undo-tree-id8634 . -42) (undo-tree-id8635 . -42) (undo-tree-id8636 . -42) (undo-tree-id8637 . -42) (undo-tree-id8638 . -42) (undo-tree-id8639 . -42) (undo-tree-id8640 . -42) (undo-tree-id8641 . -42) (undo-tree-id8642 . -42) (undo-tree-id8643 . -42) (undo-tree-id8644 . -42) (undo-tree-id8645 . -42) (undo-tree-id8646 . -42) (undo-tree-id8647 . -42) (undo-tree-id8648 . -42) (undo-tree-id8649 . -42) (undo-tree-id8650 . -42) (undo-tree-id8651 . -42) (undo-tree-id8652 . -42) (undo-tree-id8653 . -42) (undo-tree-id8654 . -42) (undo-tree-id8655 . -42) (undo-tree-id8656 . -42) (undo-tree-id8657 . -42) (undo-tree-id8658 . -42) (undo-tree-id8659 . -42) (undo-tree-id8660 . -42) (undo-tree-id8661 . -42) (undo-tree-id8662 . -42) (undo-tree-id8663 . -42) (undo-tree-id8664 . -42) (undo-tree-id8665 . -42) (undo-tree-id8666 . -42) (undo-tree-id8667 . -42) (undo-tree-id8668 . -42) (undo-tree-id8669 . -42) (undo-tree-id8670 . -42) (undo-tree-id8671 . -42) (undo-tree-id8672 . -42) (undo-tree-id8673 . -42) (undo-tree-id8674 . -42) (undo-tree-id8675 . -42) (undo-tree-id8676 . -42) (undo-tree-id8677 . -42) (undo-tree-id8678 . -42) (undo-tree-id8679 . -42) (undo-tree-id8680 . -42) (undo-tree-id8681 . -42) (undo-tree-id8682 . -42) (undo-tree-id8683 . -42) (undo-tree-id8684 . -42) (undo-tree-id8685 . -42) (undo-tree-id8686 . -42) (undo-tree-id8687 . -42) (undo-tree-id8688 . -42) (undo-tree-id8689 . -42) (undo-tree-id8690 . -42) (undo-tree-id8691 . -42) (undo-tree-id8692 . -42) (undo-tree-id8693 . -42) (undo-tree-id8694 . -42) (undo-tree-id8695 . -42) (undo-tree-id8696 . -42) (undo-tree-id8697 . -42) (undo-tree-id8698 . -42) (undo-tree-id8699 . -42) (undo-tree-id8700 . -42) (undo-tree-id8701 . -42) (undo-tree-id8702 . -42) (undo-tree-id8703 . -42) (undo-tree-id8704 . -42) (undo-tree-id8705 . -42) (undo-tree-id8706 . -42) (undo-tree-id8707 . -42) (undo-tree-id8708 . -42) (undo-tree-id8709 . -42) (undo-tree-id8710 . -42) (undo-tree-id8711 . -42) (undo-tree-id8712 . -42) (undo-tree-id8713 . -42) (undo-tree-id8714 . -42) (undo-tree-id8715 . -42) (undo-tree-id8716 . -42) (undo-tree-id8717 . -42) (undo-tree-id8718 . -42) (undo-tree-id8719 . -42) (undo-tree-id8720 . -42) (undo-tree-id8721 . -42) (undo-tree-id8722 . -42) (undo-tree-id8723 . -42) (undo-tree-id8724 . -42) (undo-tree-id8725 . -42) (undo-tree-id8726 . -42) (undo-tree-id8727 . -42) (undo-tree-id8728 . -42) (undo-tree-id8729 . -42) (undo-tree-id8730 . -42) (undo-tree-id8731 . -42) (undo-tree-id8732 . -42) (undo-tree-id8733 . -42) (undo-tree-id8734 . -42) (undo-tree-id8735 . -42) (undo-tree-id8736 . -42) (undo-tree-id8737 . -42) (undo-tree-id8738 . -42) (undo-tree-id8739 . -42) (undo-tree-id8740 . -42) (undo-tree-id8741 . -42) (undo-tree-id8742 . -42) (undo-tree-id8743 . -42) (undo-tree-id8744 . -42) (undo-tree-id8745 . -42) (undo-tree-id8746 . -42) (undo-tree-id8747 . -42) (undo-tree-id8748 . -42) (undo-tree-id8749 . -42) (undo-tree-id8750 . -42) (undo-tree-id8751 . -42) (undo-tree-id8752 . -42) (undo-tree-id8753 . -42) (undo-tree-id8754 . -42) (undo-tree-id8755 . -42) (undo-tree-id8756 . -42) (undo-tree-id8757 . -42) (undo-tree-id8758 . -42) (undo-tree-id8759 . -42) (undo-tree-id8760 . -42) (undo-tree-id8761 . -42) (undo-tree-id8762 . -42) (undo-tree-id8763 . -42) (undo-tree-id8764 . -42) (undo-tree-id8765 . -42) (undo-tree-id8766 . -42) (undo-tree-id8767 . -42) (undo-tree-id8768 . -42) (undo-tree-id8769 . -42) (undo-tree-id8770 . -42) (undo-tree-id8771 . -42) (undo-tree-id8772 . -42) (undo-tree-id8773 . -42) (undo-tree-id8774 . -42) (undo-tree-id8775 . -42) (undo-tree-id8776 . -42) (undo-tree-id8777 . -42) (undo-tree-id8778 . -42) (undo-tree-id8779 . -42) (undo-tree-id8780 . -42) (undo-tree-id8781 . -42) (undo-tree-id8782 . -42) (undo-tree-id8783 . -42) (undo-tree-id8784 . -42) (undo-tree-id8785 . -42) (undo-tree-id8786 . -42) (undo-tree-id8787 . -42) (undo-tree-id8788 . -42) (undo-tree-id8789 . -42) (undo-tree-id8790 . -42) (undo-tree-id8791 . -42) (undo-tree-id8792 . -42) (undo-tree-id8793 . -42) (undo-tree-id8794 . -42) (undo-tree-id8795 . -42) (undo-tree-id8796 . -42) (undo-tree-id8797 . -42) (undo-tree-id8798 . -42) (undo-tree-id8799 . -42) (undo-tree-id8800 . -42) (undo-tree-id8801 . -42) (undo-tree-id8802 . -42) (undo-tree-id8803 . -42) (undo-tree-id8804 . -42) (undo-tree-id8805 . -42) (undo-tree-id8806 . -42) (undo-tree-id8807 . -42) (undo-tree-id8808 . -42) (undo-tree-id8809 . -42) (undo-tree-id8810 . -42) (undo-tree-id8811 . -42) (undo-tree-id8812 . -42) (undo-tree-id8813 . -42) (undo-tree-id8814 . -42) (undo-tree-id8815 . -42) (undo-tree-id8816 . -42) (undo-tree-id8817 . -42) (undo-tree-id8818 . -42) (undo-tree-id8819 . -42) (undo-tree-id8820 . -42) (undo-tree-id8821 . -42) (undo-tree-id8822 . -42) (undo-tree-id8823 . -42) (undo-tree-id8824 . -42) (undo-tree-id8825 . -42) (undo-tree-id8826 . -42) (undo-tree-id8827 . -42) (undo-tree-id8828 . -42) (undo-tree-id8829 . -42) (undo-tree-id8830 . -42) (undo-tree-id8831 . -42) (undo-tree-id8832 . -42) (undo-tree-id8833 . -42) (undo-tree-id8834 . -42) (undo-tree-id8835 . -42) (undo-tree-id8836 . -42) (undo-tree-id8837 . -42) (undo-tree-id8838 . -42) (undo-tree-id8839 . -42) (undo-tree-id8840 . -42) (undo-tree-id8841 . -42) (undo-tree-id8842 . -42) (undo-tree-id8843 . -42) (undo-tree-id8844 . -42) (undo-tree-id8845 . -42) (undo-tree-id8846 . -42) (undo-tree-id8847 . -42) (undo-tree-id8848 . -42) (undo-tree-id8849 . -42) (undo-tree-id8850 . -42) (undo-tree-id8851 . -42) (undo-tree-id8852 . -42) (undo-tree-id8853 . -42) (undo-tree-id8854 . -42) (undo-tree-id8855 . -42) (undo-tree-id8856 . -42) (undo-tree-id8857 . -42) (undo-tree-id8858 . -42) (undo-tree-id8859 . -42) (undo-tree-id8860 . -42) (undo-tree-id8861 . -42) (undo-tree-id8862 . -42) (undo-tree-id8863 . -42) (undo-tree-id8864 . -42) (undo-tree-id8865 . -42) (undo-tree-id8866 . -42) (undo-tree-id8867 . -42) (undo-tree-id8868 . -42) (undo-tree-id8869 . -42) (undo-tree-id8870 . -42) (undo-tree-id8871 . -42) (undo-tree-id8872 . -42) (undo-tree-id8873 . -42) (undo-tree-id8874 . -42) (undo-tree-id8875 . -42) (undo-tree-id8876 . -42) (undo-tree-id8877 . -42) (undo-tree-id8878 . -42) (undo-tree-id8879 . -42) (undo-tree-id8880 . -42) (undo-tree-id8881 . -42) (undo-tree-id8882 . -42) (undo-tree-id8883 . -42) (undo-tree-id8884 . -42) (undo-tree-id8885 . -42) (undo-tree-id8886 . -42) (undo-tree-id8887 . -42) (undo-tree-id8888 . -42) (undo-tree-id8889 . -42) (undo-tree-id8890 . -42) (undo-tree-id8891 . -42) (undo-tree-id8892 . -42) (undo-tree-id8893 . -42) (undo-tree-id8894 . -42) (undo-tree-id8895 . -42) (undo-tree-id8896 . -42) (undo-tree-id8897 . -42) (undo-tree-id8898 . -42) (undo-tree-id8899 . -42) (undo-tree-id8900 . -42) (undo-tree-id8901 . -42) (undo-tree-id8902 . -42) (undo-tree-id8903 . -42) (undo-tree-id8904 . -42) (undo-tree-id8905 . -42) (undo-tree-id8906 . -42) (undo-tree-id8907 . -42) (undo-tree-id8908 . -42) (undo-tree-id8909 . -42) (undo-tree-id8910 . -42) (undo-tree-id8911 . -42) (undo-tree-id8912 . -42) (undo-tree-id8913 . -42) (undo-tree-id8914 . -42) (undo-tree-id8915 . -42) (undo-tree-id8916 . -42) (undo-tree-id8917 . -42) (undo-tree-id8918 . -42) (undo-tree-id8919 . -42) (undo-tree-id8920 . -42) (undo-tree-id8921 . -42) (undo-tree-id8922 . -42) (undo-tree-id8923 . -42) (undo-tree-id8924 . -42) (undo-tree-id8925 . -42) (undo-tree-id8926 . -42) (undo-tree-id8927 . -42) (undo-tree-id8928 . -42) (undo-tree-id8929 . -42) (undo-tree-id8930 . -42) (undo-tree-id8931 . -42) (undo-tree-id8932 . -42) (undo-tree-id8933 . -42) (undo-tree-id8934 . -42) (undo-tree-id8935 . -42) (undo-tree-id8936 . -42) (undo-tree-id8937 . -42) (undo-tree-id8938 . -42) (undo-tree-id8939 . -42) (undo-tree-id8940 . -42) (undo-tree-id8941 . -42) (undo-tree-id8942 . -42) (undo-tree-id8943 . -42) (undo-tree-id8944 . -42) (undo-tree-id8945 . -42) (undo-tree-id8946 . -42) (undo-tree-id8947 . -42) (undo-tree-id8948 . -42) (undo-tree-id8949 . -42) (undo-tree-id8950 . -42) (undo-tree-id8951 . -42) (undo-tree-id8952 . -42) (undo-tree-id8953 . -42) (undo-tree-id8954 . -42) (undo-tree-id8955 . -42) (undo-tree-id8956 . -42) (undo-tree-id8957 . -42) (undo-tree-id8958 . -42) (undo-tree-id8959 . -42) (undo-tree-id8960 . -42) (undo-tree-id8961 . -42) (undo-tree-id8962 . -42) (undo-tree-id8963 . -42) (undo-tree-id8964 . -42) (undo-tree-id8965 . -42) (undo-tree-id8966 . -42) (undo-tree-id8967 . -42) (undo-tree-id8968 . -42) (undo-tree-id8969 . -42) (undo-tree-id8970 . -42) (undo-tree-id8971 . -42) (undo-tree-id8972 . -42) (undo-tree-id8973 . -42) (undo-tree-id8974 . -42) (undo-tree-id8975 . -42) (undo-tree-id8976 . -42) (undo-tree-id8977 . -42) (undo-tree-id8978 . -42) (undo-tree-id8979 . -42) (undo-tree-id8980 . -42) (undo-tree-id8981 . -42) (undo-tree-id8982 . -42) (undo-tree-id8983 . -42) (undo-tree-id8984 . -42) (undo-tree-id8985 . -42) (undo-tree-id8986 . -42) (undo-tree-id8987 . -42) (undo-tree-id8988 . -42) (undo-tree-id8989 . -42) (undo-tree-id8990 . -42) (undo-tree-id8991 . -42) (undo-tree-id8992 . -42) (undo-tree-id8993 . -42) (undo-tree-id8994 . -42) (undo-tree-id8995 . -42) (undo-tree-id8996 . -42) (undo-tree-id8997 . -42) (undo-tree-id8998 . -42) (undo-tree-id8999 . -42) (undo-tree-id9000 . -42) (undo-tree-id9001 . -42) (undo-tree-id9002 . -42) (undo-tree-id9003 . -42) (undo-tree-id9004 . -42) (undo-tree-id9005 . -42) (undo-tree-id9006 . -42) (undo-tree-id9007 . -42) (undo-tree-id9008 . -42) (undo-tree-id9009 . -42) (undo-tree-id9010 . -42) (undo-tree-id9011 . -42) (undo-tree-id9012 . -42) (undo-tree-id9013 . -42) (undo-tree-id9014 . -42) (undo-tree-id9015 . -42) (undo-tree-id9016 . -42) (undo-tree-id9017 . -42) (undo-tree-id9018 . -42) (undo-tree-id9019 . -42) (undo-tree-id9020 . -42) (undo-tree-id9021 . -42) (undo-tree-id9022 . -42) (undo-tree-id9023 . -42) (undo-tree-id9024 . -42) (undo-tree-id9025 . -42) (undo-tree-id9026 . -42) (undo-tree-id9027 . -42) (undo-tree-id9028 . -42) (undo-tree-id9029 . -42) (undo-tree-id9030 . -42) (undo-tree-id9031 . -42) (undo-tree-id9032 . -42) (undo-tree-id9033 . -42) (undo-tree-id9034 . -42) (undo-tree-id9035 . -42) (undo-tree-id9036 . -42) (undo-tree-id9037 . -42) (undo-tree-id9038 . -42) (undo-tree-id9039 . -42) (undo-tree-id9040 . -42) (undo-tree-id9041 . -42) (undo-tree-id9042 . -42) (undo-tree-id9043 . -42) (undo-tree-id9044 . -42) (undo-tree-id9045 . -42) (undo-tree-id9046 . -42) (undo-tree-id9047 . -42) (undo-tree-id9048 . -42) (undo-tree-id9049 . -42) (undo-tree-id9050 . -42) (undo-tree-id9051 . -42) (undo-tree-id9052 . -42) (undo-tree-id9053 . -42) (undo-tree-id9054 . -42) (undo-tree-id9055 . -42) (undo-tree-id9056 . -42) (undo-tree-id9057 . -42) (undo-tree-id9058 . -42) (undo-tree-id9059 . -42) (undo-tree-id9060 . -42) (undo-tree-id9061 . -42) (undo-tree-id9062 . -42) (undo-tree-id9063 . -42) (undo-tree-id9064 . -42) (undo-tree-id9065 . -42) (undo-tree-id9066 . -42) (undo-tree-id9067 . -42) (undo-tree-id9068 . -42) (undo-tree-id9069 . -42) (undo-tree-id9070 . -42) (undo-tree-id9071 . -42) (undo-tree-id9072 . -42) (undo-tree-id9073 . -42) (undo-tree-id9074 . -42) (undo-tree-id9075 . -42) (undo-tree-id9076 . -42) (undo-tree-id9077 . -42) (undo-tree-id9078 . -42) (undo-tree-id9079 . -42) (undo-tree-id9080 . -42) (undo-tree-id9081 . -42) (undo-tree-id9082 . -42) (undo-tree-id9083 . -42) (undo-tree-id9084 . -42) (undo-tree-id9085 . -42) (undo-tree-id9086 . -42) (undo-tree-id9087 . -42) (undo-tree-id9088 . -42) (undo-tree-id9089 . -42) (undo-tree-id9090 . -42) (undo-tree-id9091 . -42) (undo-tree-id9092 . -42) (undo-tree-id9093 . -42) (undo-tree-id9094 . -42) (undo-tree-id9095 . -42) (undo-tree-id9096 . -42) (undo-tree-id9097 . -42) (undo-tree-id9098 . -42) (undo-tree-id9099 . -42) (undo-tree-id9100 . -42) (undo-tree-id9101 . -42) (undo-tree-id9102 . -42) (undo-tree-id9103 . -42) (undo-tree-id9104 . -42) (undo-tree-id9105 . -42) (undo-tree-id9106 . -42) (undo-tree-id9107 . -42) (undo-tree-id9108 . -42) (undo-tree-id9109 . -42) (undo-tree-id9110 . -42) (undo-tree-id9111 . -42) (undo-tree-id9112 . -42) (undo-tree-id9113 . -42) (undo-tree-id9114 . -42) (undo-tree-id9115 . -42) (undo-tree-id9116 . -42) (undo-tree-id9117 . -42) (undo-tree-id9118 . -42) (undo-tree-id9119 . -42) (undo-tree-id9120 . -42) (undo-tree-id9121 . -42) (undo-tree-id9122 . -42) (undo-tree-id9123 . -42) (undo-tree-id9124 . -42) (undo-tree-id9125 . -42) (undo-tree-id9126 . -42) (undo-tree-id9127 . -42) (undo-tree-id9128 . -42) (undo-tree-id9129 . -42) (undo-tree-id9130 . -42) (undo-tree-id9131 . -42) (undo-tree-id9132 . -42) (undo-tree-id9133 . -42) (undo-tree-id9134 . -42) (undo-tree-id9135 . -42) (undo-tree-id9136 . -42) (undo-tree-id9137 . -42) (undo-tree-id9138 . -42) (undo-tree-id9139 . -42) (undo-tree-id9140 . -42) (undo-tree-id9141 . -42) (undo-tree-id9142 . -42) (undo-tree-id9143 . -42) (undo-tree-id9144 . -42) (undo-tree-id9145 . -42) (undo-tree-id9146 . -42) (undo-tree-id9147 . -42) (undo-tree-id9148 . -42) (undo-tree-id9149 . -42) (undo-tree-id9150 . -42) (undo-tree-id9151 . -42) (undo-tree-id9152 . -42) (undo-tree-id9153 . -42) (undo-tree-id9154 . -42) (undo-tree-id9155 . -42) (undo-tree-id9156 . -42) (undo-tree-id9157 . -42) (undo-tree-id9158 . -42) (undo-tree-id9159 . -42) (undo-tree-id9160 . -42) (undo-tree-id9161 . -42) (undo-tree-id9162 . -42) (undo-tree-id9163 . -42) (undo-tree-id9164 . -42) (undo-tree-id9165 . -42) (undo-tree-id9166 . -42) (undo-tree-id9167 . -42) (undo-tree-id9168 . -42) (undo-tree-id9169 . -42) (undo-tree-id9170 . -42) (undo-tree-id9171 . -42) (undo-tree-id9172 . -42) (undo-tree-id9173 . -42) (undo-tree-id9174 . -42) (undo-tree-id9175 . -42) (undo-tree-id9176 . -42) (undo-tree-id9177 . -42) (undo-tree-id9178 . -42) (undo-tree-id9179 . -42) (undo-tree-id9180 . -42) (undo-tree-id9181 . -42) (undo-tree-id9182 . -42) (undo-tree-id9183 . -42) (undo-tree-id9184 . -42) (undo-tree-id9185 . -42) (undo-tree-id9186 . -42) (undo-tree-id9187 . -42) (undo-tree-id9188 . -42) (undo-tree-id9189 . -42) (undo-tree-id9190 . -42) (undo-tree-id9191 . -42) (undo-tree-id9192 . -42) (undo-tree-id9193 . -42) (undo-tree-id9194 . -42) (undo-tree-id9195 . -42) (undo-tree-id9196 . -42) (undo-tree-id9197 . -42) (undo-tree-id9198 . -42) (undo-tree-id9199 . -42) (undo-tree-id9200 . -42) (undo-tree-id9201 . -42) (undo-tree-id9202 . -42) (undo-tree-id9203 . -42) (undo-tree-id9204 . -42) (undo-tree-id9205 . -42) (undo-tree-id9206 . -42) (undo-tree-id9207 . -42) (undo-tree-id9208 . -42) (undo-tree-id9209 . -42) (undo-tree-id9210 . -42) (undo-tree-id9211 . -42) (undo-tree-id9212 . -42) (undo-tree-id9213 . -42) (undo-tree-id9214 . -42) (undo-tree-id9215 . -42) (undo-tree-id9216 . -42) (undo-tree-id9217 . -42) (undo-tree-id9218 . -42) (undo-tree-id9219 . -42) (undo-tree-id9220 . -42) (undo-tree-id9221 . -42) (undo-tree-id9222 . -42) (undo-tree-id9223 . -42) (undo-tree-id9224 . -42) (undo-tree-id9225 . -42) (undo-tree-id9226 . -42) (undo-tree-id9227 . -42) (undo-tree-id9228 . -42) (undo-tree-id9229 . -42) (undo-tree-id9230 . -42) (undo-tree-id9231 . -42) (undo-tree-id9232 . -42) (undo-tree-id9233 . -42) (undo-tree-id9234 . -42) (undo-tree-id9235 . -42) (undo-tree-id9236 . -42) (undo-tree-id9237 . -42) (undo-tree-id9238 . -18) (undo-tree-id9239 . -18) (undo-tree-id9240 . -18) (undo-tree-id9241 . -18) (undo-tree-id9242 . -18) (undo-tree-id9243 . -18) (undo-tree-id9244 . -18) (undo-tree-id9245 . -18) (undo-tree-id9246 . -18) (undo-tree-id9247 . -18) (undo-tree-id9248 . -18) (undo-tree-id9249 . -18) (undo-tree-id9250 . -18) (undo-tree-id9251 . -18) (undo-tree-id9252 . -18) (undo-tree-id9253 . -18) (undo-tree-id9254 . -18) (undo-tree-id9255 . -18) (undo-tree-id9256 . -42) 4320) nil (25756 47750 877142 100000) 0 nil])
([nil nil ((4301 . 4302) 4300) nil (25756 47750 876213 636000) 0 nil])
([nil nil ((#("dataset = filepath_dataset.interleave(
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 19 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 37 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8370 . -38) (undo-tree-id8371 . 39) (undo-tree-id8372 . 29) (undo-tree-id8373 . -18) (undo-tree-id8374 . -11) (undo-tree-id8375 . -11) (undo-tree-id8376 . -11) (undo-tree-id8377 . -11) (undo-tree-id8378 . -11) (undo-tree-id8379 . -11) (undo-tree-id8380 . -11) (undo-tree-id8381 . -11) (undo-tree-id8382 . -11) (undo-tree-id8383 . -11) (undo-tree-id8384 . -11) (undo-tree-id8385 . -11) (undo-tree-id8386 . -11) (undo-tree-id8387 . -11) (undo-tree-id8388 . -11) (undo-tree-id8389 . -11) (undo-tree-id8390 . -11) (undo-tree-id8391 . 20) (undo-tree-id8392 . -26) (undo-tree-id8393 . -19) (undo-tree-id8394 . -19) (undo-tree-id8395 . -19) (undo-tree-id8396 . -19) (undo-tree-id8397 . -19) (undo-tree-id8398 . -19) (undo-tree-id8399 . -19) (undo-tree-id8400 . -19) (undo-tree-id8401 . -19) (undo-tree-id8402 . -19) (undo-tree-id8403 . -19) (undo-tree-id8404 . -19) (undo-tree-id8405 . -19) (undo-tree-id8406 . -19) (undo-tree-id8407 . -19) (undo-tree-id8408 . -19) (undo-tree-id8409 . -19) (undo-tree-id8410 . 39) (undo-tree-id8411 . -7) (undo-tree-id8412 . -39)) nil (25756 47750 876211 427000) 0 nil])
([nil nil ((#("lambda filepath: tf.data.TextLineDataset(filepath).skip(1),
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8367 . -59) (undo-tree-id8368 . 60) (undo-tree-id8369 . -60)) nil (25756 47750 876177 184000) 0 nil])
([nil nil ((#("cycle_length=n_readers)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 6 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 12 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 15 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 22 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8364 . -23) (undo-tree-id8365 . 24) (undo-tree-id8366 . -24)) nil (25756 47750 876172 350000) 0 nil])
([nil nil ((#("The interleave() method will create a dataset that will pull five file
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8361 . -70) (undo-tree-id8362 . 71) (undo-tree-id8363 . -71)) nil (25756 47750 876168 767000) 0 nil])
([nil nil ((#("paths from the filepath_dataset, and for each one it will call the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 24 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 31 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8358 . -66) (undo-tree-id8359 . 67) (undo-tree-id8360 . -67)) nil (25756 47750 876165 596000) 0 nil])
([nil nil ((#("function you gave it (a lambda in this example) to create a new dataset (in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8355 . -75) (undo-tree-id8356 . 76) (undo-tree-id8357 . -76)) nil (25756 47750 877932 28000) 0 nil])
([nil nil ((#("this case a TextLineDataset)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10157 . -27) (undo-tree-id10158 . 28) (undo-tree-id10159 . -28)) nil (25756 47809 601557 401000) 0 nil] [nil nil ((#("this case a TextLineDataset). To be clear, at this stage there will be seven
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id8352 . -76) (undo-tree-id8353 . 77) (undo-tree-id8354 . -77)) ((4303 . 4380)) (25756 47750 876155 148000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10154 . 1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1)) nil (25756 47809 601554 970000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4303) (undo-tree-id10151 . 1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1)) nil (25756 47809 601552 300000) 0 nil])
([nil nil ((#("To be clear, at this stage there will be seven
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10109 . -46) (undo-tree-id10110 . 47) (undo-tree-id10111 . -47) (undo-tree-id10112 . -47) (undo-tree-id10113 . -47) (undo-tree-id10114 . -47) (undo-tree-id10115 . -47) (undo-tree-id10116 . -47) (undo-tree-id10117 . -47) (undo-tree-id10118 . -47) (undo-tree-id10119 . -45) (undo-tree-id10120 . -45) (undo-tree-id10121 . -45) (undo-tree-id10122 . -45) (undo-tree-id10123 . -45) (undo-tree-id10124 . -45) (undo-tree-id10125 . -45) (undo-tree-id10126 . -45) (undo-tree-id10127 . -47) (undo-tree-id10128 . -47) (undo-tree-id10129 . -47) (undo-tree-id10130 . -47) (undo-tree-id10131 . -47) (undo-tree-id10132 . -47) (undo-tree-id10133 . -47) (undo-tree-id10134 . -47) (undo-tree-id10135 . -47) (undo-tree-id10136 . -47) (undo-tree-id10137 . -47) (undo-tree-id10138 . -47) (undo-tree-id10139 . -47) (undo-tree-id10140 . -47) (undo-tree-id10141 . -47) (undo-tree-id10142 . -47) (undo-tree-id10143 . -47) (undo-tree-id10144 . -47) (undo-tree-id10145 . -47) (undo-tree-id10146 . -47) (undo-tree-id10147 . -47) (undo-tree-id10148 . -47) (undo-tree-id10149 . -47) (undo-tree-id10150 . -47)) nil (25756 47809 601546 622000) 0 nil])
([nil nil ((#("datasets in all: the filepath dataset, the interleave dataset, and the five
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10049 . -75) (undo-tree-id10050 . 76) (undo-tree-id10051 . -9) (undo-tree-id10052 . -12) (undo-tree-id10053 . -15) (undo-tree-id10054 . -17) (undo-tree-id10055 . 55) (undo-tree-id10056 . -29) (undo-tree-id10057 . -21) (undo-tree-id10058 . -21) (undo-tree-id10059 . -21) (undo-tree-id10060 . -21) (undo-tree-id10061 . -21) (undo-tree-id10062 . -21) (undo-tree-id10063 . -21) (undo-tree-id10064 . -21) (undo-tree-id10065 . 46) (undo-tree-id10066 . -37) (undo-tree-id10067 . -30) (undo-tree-id10068 . -30) (undo-tree-id10069 . -30) (undo-tree-id10070 . -30) (undo-tree-id10071 . -30) (undo-tree-id10072 . -30) (undo-tree-id10073 . -30) (undo-tree-id10074 . -30) (undo-tree-id10075 . -37) (undo-tree-id10076 . -39) (undo-tree-id10077 . -43) (undo-tree-id10078 . 22) (undo-tree-id10079 . -61) (undo-tree-id10080 . -54) (undo-tree-id10081 . -54) (undo-tree-id10082 . -54) (undo-tree-id10083 . -54) (undo-tree-id10084 . -54) (undo-tree-id10085 . -54) (undo-tree-id10086 . -54) (undo-tree-id10087 . -54) (undo-tree-id10088 . -61) (undo-tree-id10089 . -63) (undo-tree-id10090 . -67) (undo-tree-id10091 . -67) (undo-tree-id10092 . -67) (undo-tree-id10093 . -67) (undo-tree-id10094 . -67) (undo-tree-id10095 . -67) (undo-tree-id10096 . -67) (undo-tree-id10097 . -67) (undo-tree-id10098 . -76) (undo-tree-id10099 . -76) (undo-tree-id10100 . -76) (undo-tree-id10101 . -76) (undo-tree-id10102 . -76) (undo-tree-id10103 . -76) (undo-tree-id10104 . -76) (undo-tree-id10105 . -76) (undo-tree-id10106 . 76) (undo-tree-id10107 . -8) (undo-tree-id10108 . -76)) nil (25756 47809 601518 313000) 0 nil])
([nil nil ((#("TextLineDatasets created internally by the interleave dataset. When we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 49 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10044 . -70) (undo-tree-id10045 . 71) (undo-tree-id10046 . 71) (undo-tree-id10047 . -16) (undo-tree-id10048 . -71)) nil (25756 47809 601481 380000) 0 nil])
([nil nil ((#("iterate over the interleave dataset, it will cycle through these five
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10041 . -69) (undo-tree-id10042 . 70) (undo-tree-id10043 . -70)) nil (25756 47809 601476 154000) 0 nil])
([nil nil ((#("TextLineDatasets, reading one line at a time from each until all datasets
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10036 . -73) (undo-tree-id10037 . 74) (undo-tree-id10038 . 74) (undo-tree-id10039 . -16) (undo-tree-id10040 . -74)) nil (25756 47809 601473 523000) 0 nil])
([nil nil ((#("are out of items. Then it will get the next five file paths from the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10033 . -68) (undo-tree-id10034 . 69) (undo-tree-id10035 . -69)) nil (25756 47809 601469 646000) 0 nil])
([nil nil ((#("filepath_dataset and interleave them the same way, and so on until it
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 9 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 16 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10028 . -69) (undo-tree-id10029 . 70) (undo-tree-id10030 . 70) (undo-tree-id10031 . -8) (undo-tree-id10032 . -70)) nil (25756 47809 601466 420000) 0 nil])
([nil nil ((#("runs out of file paths.TIP
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10025 . -26) (undo-tree-id10026 . 27) (undo-tree-id10027 . -27)) nil (25756 47809 601462 556000) 0 nil])
([nil nil ((#("For interleaving to work best, it is preferable to have files of identical length;
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10022 . -82) (undo-tree-id10023 . 83) (undo-tree-id10024 . -83)) nil (25756 47809 601458 11000) 0 nil])
([nil nil ((#("otherwise the ends of the longest files will not be interleaved.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10019 . -64) (undo-tree-id10020 . 65) (undo-tree-id10021 . -65)) nil (25756 47809 601779 26000) 0 nil])
([nil nil ((#("By default, interleave() does not use parallelism; it just reads one line
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10222 . -73) (undo-tree-id10223 . 74) (undo-tree-id10224 . -74)) nil (25756 47844 984261 113000) 0 nil] [nil nil ((#("By default, interleave() does not use parallelism; it just reads one line
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10016 . -73) (undo-tree-id10017 . 74) (undo-tree-id10018 . -74)) ((4303 . 4377)) (25756 47809 601447 968000) 0 nil])
([nil nil ((#("at a time from each file, sequentially. If you want it to actually read files
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10219 . -77) (undo-tree-id10220 . 78) (undo-tree-id10221 . -78)) nil (25756 47844 984258 638000) 0 nil])
nil
([nil nil ((#("in parallel, you can set the num_parallel_calls argument to the number
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 33 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 41 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 42 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 47 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10216 . -70) (undo-tree-id10217 . 71) (undo-tree-id10218 . -71)) nil (25756 47844 984255 559000) 0 nil])
([nil nil ((#("of threads you want (note that the map() method also has this argument).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10213 . -72) (undo-tree-id10214 . 73) (undo-tree-id10215 . -73)) nil (25756 47844 984252 788000) 0 nil])
([nil nil ((#("You can even set it to tf.data.experimental.AUTOTUNE to make
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10210 . -60) (undo-tree-id10211 . 61) (undo-tree-id10212 . -61)) nil (25756 47844 984249 18000) 0 nil])
([nil nil ((#("TensorFlow choose the right number of threads dynamically based on the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10207 . -70) (undo-tree-id10208 . 71) (undo-tree-id10209 . -71)) nil (25756 47844 984246 591000) 0 nil])
([nil nil ((#("available CPU (however, this is an experimental feature for now). Let’s
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10204 . -71) (undo-tree-id10205 . 72) (undo-tree-id10206 . -72)) nil (25756 47844 984243 938000) 0 nil])
([nil nil ((#("look at what the dataset contains now:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10201 . -38) (undo-tree-id10202 . 39) (undo-tree-id10203 . -39)) nil (25756 47844 984241 79000) 0 nil])
([nil nil ((#(">>> for line in dataset.take(5):
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10196 . -32) (undo-tree-id10197 . 33) (undo-tree-id10198 . 33) (undo-tree-id10199 . -1) (undo-tree-id10200 . -33)) nil (25756 47844 984238 489000) 0 nil])
([nil nil ((#("...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10193 . -3) (undo-tree-id10194 . 4) (undo-tree-id10195 . -4)) nil (25756 47844 984234 492000) 0 nil])
([nil nil ((#("print(line.numpy())
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10190 . -19) (undo-tree-id10191 . 20) (undo-tree-id10192 . -20)) nil (25756 47844 984229 988000) 0 nil])
([nil nil ((#("...
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10187 . -3) (undo-tree-id10188 . 4) (undo-tree-id10189 . -4)) nil (25756 47844 984227 101000) 0 nil])
([nil nil ((#("b'4.2083,44.0,5.3232,0.9171,846.0,2.3370,37.47,-122.2,2.782'
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10184 . -60) (undo-tree-id10185 . 61) (undo-tree-id10186 . -61)) nil (25756 47844 984224 194000) 0 nil])
([nil nil ((#("b'4.1812,52.0,5.7013,0.9965,692.0,2.4027,33.73,-118.31,3.215'
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10181 . -61) (undo-tree-id10182 . 62) (undo-tree-id10183 . -62)) nil (25756 47844 984221 446000) 0 nil])
([nil nil ((#("b'3.6875,44.0,4.5244,0.9930,457.0,3.1958,34.04,-118.15,1.625'
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10178 . -61) (undo-tree-id10179 . 62) (undo-tree-id10180 . -62)) nil (25756 47844 984218 92000) 0 nil])
([nil nil ((#("b'3.3456,37.0,4.5140,0.9084,458.0,3.2253,36.67,-121.7,2.526'
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10175 . -60) (undo-tree-id10176 . 61) (undo-tree-id10177 . -61)) nil (25756 47844 984213 916000) 0 nil])
([nil nil ((#("b'3.5214,15.0,3.0499,1.1065,1447.0,1.6059,37.63,-122.43,1.442'
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10172 . -62) (undo-tree-id10173 . 63) (undo-tree-id10174 . -63)) nil (25756 47844 984055 691000) 0 nil])
([nil nil ((#("These are the first rows (ignoring the header row) of five CSV files,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10169 . -69) (undo-tree-id10170 . 70) (undo-tree-id10171 . -70)) nil (25756 47844 984050 578000) 0 nil])
([nil nil ((#("chosen randomly. Looks good! But as you can see, these are just byte
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4303) (undo-tree-id10166 . -68) (undo-tree-id10167 . 69) (undo-tree-id10168 . -69)) nil (25756 47844 984046 998000) 0 nil])
([nil nil ((#("strings; we need to parse them and scale the data.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 49 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 50 51 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4303) (undo-tree-id10160 . -50) (undo-tree-id10161 . 51) (undo-tree-id10162 . -49) (undo-tree-id10163 . -49) (undo-tree-id10164 . -49) (undo-tree-id10165 . -51)) nil (25756 47844 984040 641000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6686 . 6687) (nil fontified nil 6630 . 6687) (nil fontified nil 6573 . 6630) (nil fontified nil 6517 . 6573) (nil fontified nil 6447 . 6517) (nil fontified nil 6391 . 6447) (nil fontified nil 6318 . 6391) (nil fontified nil 6275 . 6318) (nil fontified nil 6210 . 6275) (nil fontified nil 6146 . 6210) (nil fontified nil 6082 . 6146) (nil fontified nil 6045 . 6082) (nil fontified nil 5981 . 6045) (nil fontified nil 5915 . 5981) (nil fontified nil 5846 . 5915) (nil fontified nil 5782 . 5846) (nil fontified nil 5718 . 5782) (nil fontified nil 5671 . 5718) (nil fontified nil 5601 . 5671) (nil fontified nil 5536 . 5601) (nil fontified nil 5471 . 5536) (nil fontified nil 5408 . 5471) (nil fontified nil 5337 . 5408) (nil fontified nil 5273 . 5337) (nil fontified nil 5210 . 5273) (nil fontified nil 5143 . 5210) (nil fontified nil 5076 . 5143) (nil fontified nil 5014 . 5076) (nil fontified nil 4955 . 5014) (nil fontified nil 4924 . 4955) (nil fontified nil 4863 . 4924) (nil fontified nil 4796 . 4863) (nil fontified nil 4734 . 4796) (nil fontified nil 4704 . 4734) (nil fontified nil 4673 . 4704) (nil fontified nil 4647 . 4673) (nil fontified nil 4568 . 4647) (nil fontified nil 4507 . 4568) (nil fontified nil 4485 . 4507) (nil fontified nil 4472 . 4485) (nil fontified nil 4468 . 4472) (nil fontified nil 4397 . 4468) (nil fontified nil 4326 . 4397) (nil fontified nil 4303 . 4326) (4303 . 6687) (t 25756 47845 45680 636000)) nil (25756 48460 467864 977000) 0 nil])
([nil nil ((4303 . 4305)) nil (25756 48460 467858 164000) 0 nil])
([nil nil ((6689 . 6690)) nil (25756 48460 467853 731000) 0 nil])
([nil nil ((4331 . 4332) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4331) (undo-tree-id10225 . -1) (t 25756 48460 484699 590000)) nil (25756 48494 505220 73000) 0 nil])
([nil nil ((#("Let's implement a small function that will perform this preprocessing:
" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4328) (undo-tree-id10332 . -70) (undo-tree-id10333 . -3) (undo-tree-id10334 . -3) (undo-tree-id10335 . -3) (undo-tree-id10336 . -3) (undo-tree-id10337 . -3) (undo-tree-id10338 . -3) (undo-tree-id10339 . -3) (undo-tree-id10340 . -3) (undo-tree-id10341 . -3) (undo-tree-id10342 . -3) (undo-tree-id10343 . -3) (undo-tree-id10344 . -6) (undo-tree-id10345 . -16) (undo-tree-id10346 . -18) (undo-tree-id10347 . -24) (undo-tree-id10348 . -33) (undo-tree-id10349 . -38) (undo-tree-id10350 . -43) (undo-tree-id10351 . -51) (undo-tree-id10352 . -56) (undo-tree-id10353 . -56) (undo-tree-id10354 . -56) (undo-tree-id10355 . -56) (undo-tree-id10356 . -56) (undo-tree-id10357 . -56) (undo-tree-id10358 . -56) (undo-tree-id10359 . -56) (undo-tree-id10360 . -69) (undo-tree-id10361 . -71) (undo-tree-id10362 . -71) (undo-tree-id10363 . -71) (undo-tree-id10364 . -71) (undo-tree-id10365 . -71) (undo-tree-id10366 . -71) (undo-tree-id10367 . -71) (undo-tree-id10368 . -71) (undo-tree-id10369 . -71) (undo-tree-id10370 . -71) (undo-tree-id10371 . -71) (undo-tree-id10372 . -71) (undo-tree-id10373 . -71) (undo-tree-id10374 . -71) (undo-tree-id10375 . -71) (undo-tree-id10376 . -71) (undo-tree-id10377 . -71) (undo-tree-id10378 . -71) (undo-tree-id10379 . -71) (undo-tree-id10380 . -71) (undo-tree-id10381 . -71) (undo-tree-id10382 . -71) (undo-tree-id10383 . -71) (undo-tree-id10384 . -71) (t 25756 48463 976812 230000)) nil (25756 48536 863388 285000) 0 nil] [nil nil ((#("Let's implement a small function that will perform this preprocessing:
" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4328) (undo-tree-id10226 . -70) (undo-tree-id10227 . -3) (undo-tree-id10228 . -3) (undo-tree-id10229 . -3) (undo-tree-id10230 . -3) (undo-tree-id10231 . -3) (undo-tree-id10232 . -3) (undo-tree-id10233 . -3) (undo-tree-id10234 . -3) (undo-tree-id10235 . -3) (undo-tree-id10236 . -3) (undo-tree-id10237 . -3) (undo-tree-id10238 . -6) (undo-tree-id10239 . -16) (undo-tree-id10240 . -18) (undo-tree-id10241 . -24) (undo-tree-id10242 . -33) (undo-tree-id10243 . -38) (undo-tree-id10244 . -43) (undo-tree-id10245 . -51) (undo-tree-id10246 . 15) (undo-tree-id10247 . -69) (undo-tree-id10248 . -56) (undo-tree-id10249 . -56) (undo-tree-id10250 . -56) (undo-tree-id10251 . -56) (undo-tree-id10252 . -56) (undo-tree-id10253 . -56) (undo-tree-id10254 . -56) (undo-tree-id10255 . -56) (undo-tree-id10256 . -69) (undo-tree-id10257 . -71) (undo-tree-id10258 . -71) (undo-tree-id10259 . -71) (undo-tree-id10260 . -71) (undo-tree-id10261 . -71) (undo-tree-id10262 . -71) (undo-tree-id10263 . -71) (undo-tree-id10264 . -71) (undo-tree-id10265 . -71) (undo-tree-id10266 . -71) (undo-tree-id10267 . -71) (undo-tree-id10268 . -71) (undo-tree-id10269 . -71) (undo-tree-id10270 . -71) (undo-tree-id10271 . -71) (undo-tree-id10272 . -71) (t 25756 48463 976812 230000)) ((4328 . 4399)) (25756 48494 504635 680000) 0 nil])
([nil nil ((#("X_mean, X_std = [...] # mean and scale of each feature in the training
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 6 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 10 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 13 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4328) (undo-tree-id10330 . -70) (undo-tree-id10331 . -71)) nil (25756 48536 863348 398000) 0 nil])
nil
([nil nil ((#("set
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4328) (undo-tree-id10328 . -3) (undo-tree-id10329 . -4)) nil (25756 48536 863345 695000) 0 nil])
([nil nil ((#("n_inputs = 8
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 8 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4328) (undo-tree-id10326 . -12) (undo-tree-id10327 . -13)) nil (25756 48536 863342 775000) 0 nil])
([nil nil ((4341 . 4347) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4341 4347 nil nil nil t #s(yas--exit 4365 nil))) #s(yas--exit 4365 nil) 10 nil #s(yas--field 1 4341 4347 nil nil nil t #s(yas--exit 4365 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4359) (undo-tree-id10273 . -2) (4329 . 4372) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4329) (undo-tree-id10274 . -1) (undo-tree-id10275 . -2) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) (undo-tree-id10312 . -1) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1) (undo-tree-id10315 . -2) (undo-tree-id10316 . -2) (undo-tree-id10317 . -2) (undo-tree-id10318 . -2) (undo-tree-id10319 . -2) (undo-tree-id10320 . -2) (undo-tree-id10321 . -2) (undo-tree-id10322 . -2) (undo-tree-id10323 . -2) (undo-tree-id10324 . -2) (undo-tree-id10325 . -2) 4331 (4329 . 4331) (4328 . 4329) (4327 . 4328) 4305) nil (25756 48536 863337 316000) 0 nil])
([nil nil ((apply yas--snippet-revive 4329 4376 #s(yas--snippet nil (#s(yas--field 1 4341 4347 nil nil nil t #s(yas--exit 4365 nil))) #s(yas--exit 4365 nil) 10 nil #s(yas--field 1 4341 4347 nil nil nil t #s(yas--exit 4365 nil)) nil nil))) nil (25756 48536 987776 826000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 4367) (undo-tree-id10424 . -9) (undo-tree-id10425 . -9) (undo-tree-id10426 . -10) (undo-tree-id10427 . -10) (undo-tree-id10428 . -10) (undo-tree-id10429 . -10) (undo-tree-id10430 . -10) (undo-tree-id10431 . -10) (undo-tree-id10432 . -10) (undo-tree-id10433 . -10) (undo-tree-id10434 . -10) (undo-tree-id10435 . -10) (undo-tree-id10436 . -10) (undo-tree-id10437 . -10) (undo-tree-id10438 . -10) (undo-tree-id10439 . -10) (undo-tree-id10440 . -10) (undo-tree-id10441 . -10) (undo-tree-id10442 . -10) (undo-tree-id10443 . -10) (undo-tree-id10444 . -10) (undo-tree-id10445 . -10) (undo-tree-id10446 . -10) (undo-tree-id10447 . -10) (undo-tree-id10448 . -10) (undo-tree-id10449 . -10) (undo-tree-id10450 . -10) (undo-tree-id10451 . -10) (undo-tree-id10452 . -10) (undo-tree-id10453 . -10) (undo-tree-id10454 . -10) (undo-tree-id10455 . -10) (undo-tree-id10456 . -10) (undo-tree-id10457 . -10) (undo-tree-id10458 . -10) (undo-tree-id10459 . -10) (undo-tree-id10460 . -10) (undo-tree-id10461 . -10) (undo-tree-id10462 . -10) (undo-tree-id10463 . -10) (undo-tree-id10464 . -10) (undo-tree-id10465 . -10) (undo-tree-id10466 . -10) (undo-tree-id10467 . -10) (undo-tree-id10468 . -10) (undo-tree-id10469 . -10) (undo-tree-id10470 . -10) (undo-tree-id10471 . -10) (undo-tree-id10472 . -10) (undo-tree-id10473 . -10) (undo-tree-id10474 . -10) (undo-tree-id10475 . -10) (undo-tree-id10476 . -10) (undo-tree-id10477 . -9) (undo-tree-id10478 . -9) (undo-tree-id10479 . -9) (undo-tree-id10480 . -9) (undo-tree-id10481 . -9) (undo-tree-id10482 . -9) (undo-tree-id10483 . -9) (undo-tree-id10484 . -9) (undo-tree-id10485 . -9) (undo-tree-id10486 . -9) (undo-tree-id10487 . -10)) nil (25756 48574 773527 501000) 0 nil] [nil nil ((nil rear-nonsticky nil 4376 . 4377) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4389) (4376 . 4390) 4367) ((#("
n_inputs = 8
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky nil face org-block-end-line) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 3 9 (display ((raise -0.3) (height 0.7)) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9 13 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 13 14 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4376) (undo-tree-id10391 . -13) (undo-tree-id10392 . -13) (undo-tree-id10393 . -13) (undo-tree-id10394 . -1) (undo-tree-id10395 . -13) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1) (undo-tree-id10398 . -1) (undo-tree-id10399 . -1) (undo-tree-id10400 . -1) (undo-tree-id10401 . -1) (undo-tree-id10402 . -1) (undo-tree-id10403 . -1) (undo-tree-id10404 . -1) (undo-tree-id10405 . -1) (4389 . 4390) (nil rear-nonsticky t 4376 . 4377)) (25756 48536 863846 897000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4585 . 4586) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4595) (4585 . 4596) 4555) nil (25756 48574 773476 735000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4389 . 4390) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4402) (4389 . 4403) 4377) ((#("
n_inputs = 8
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky nil) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 3 9 (display ((raise -0.3) (height 0.7)) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9 13 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 13 14 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4389) (undo-tree-id10385 . -1) (undo-tree-id10386 . -13) (undo-tree-id10387 . -13) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (4402 . 4403) (nil rear-nonsticky t 4389 . 4390)) (25756 48536 862846 103000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4364) (undo-tree-id10415 . -1) (undo-tree-id10416 . -1) (undo-tree-id10417 . -1) (undo-tree-id10418 . -1) (undo-tree-id10419 . -1) (undo-tree-id10420 . -1) (undo-tree-id10421 . -1) (undo-tree-id10422 . -1) (undo-tree-id10423 . -1)) nil (25756 48574 773474 744000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4364) (undo-tree-id10406 . -1) (undo-tree-id10407 . -1) (undo-tree-id10408 . -1) (undo-tree-id10409 . -1) (undo-tree-id10410 . -1) (undo-tree-id10411 . -1) (undo-tree-id10412 . -1) (undo-tree-id10413 . -1) (undo-tree-id10414 . -1)) nil (25756 48574 773466 174000) 0 nil])
([nil nil ((4568 . 4569) (4567 . 4568) (4566 . 4567) (4565 . 4566) (4538 . 4539) (4537 . 4538) (4536 . 4537) (4535 . 4536) (4455 . 4456) (4454 . 4455) (4453 . 4454) (4452 . 4453) (4387 . 4391)) nil (25756 48574 773434 411000) 0 nil])
([nil nil ((4510 . 4514) (4509 . 4510)) nil (25756 48574 773420 124000) 0 nil])
([nil nil ((#("Let’s walk through this code:
" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10580 . -29) (undo-tree-id10581 . -4) (undo-tree-id10582 . -4) (undo-tree-id10583 . -4) (undo-tree-id10584 . -4) (undo-tree-id10585 . -4) (undo-tree-id10586 . -4) (undo-tree-id10587 . -4) (undo-tree-id10588 . -4) (undo-tree-id10589 . -4) (undo-tree-id10590 . -4) (undo-tree-id10591 . -4) (undo-tree-id10592 . -4) (undo-tree-id10593 . -4) (undo-tree-id10594 . -4) (undo-tree-id10595 . -4) (undo-tree-id10596 . -4) (undo-tree-id10597 . -4) (undo-tree-id10598 . -4) (undo-tree-id10599 . -4) (undo-tree-id10600 . -30) 4619 (t 25756 48574 796244 529000)) nil (25756 48594 259795 832000) 0 nil])
([nil nil ((#("First, the code assumes that we have precomputed the mean and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10557 . -61) (undo-tree-id10558 . -4) (undo-tree-id10559 . -4) (undo-tree-id10560 . -4) (undo-tree-id10561 . -4) (undo-tree-id10562 . -4) (undo-tree-id10563 . -4) (undo-tree-id10564 . -4) (undo-tree-id10565 . -4) (undo-tree-id10566 . -4) (undo-tree-id10567 . -4) (undo-tree-id10568 . -4) (undo-tree-id10569 . -4) (undo-tree-id10570 . -4) (undo-tree-id10571 . -4) (undo-tree-id10572 . -4) (undo-tree-id10573 . -4) (undo-tree-id10574 . -4) (undo-tree-id10575 . -4) (undo-tree-id10576 . -4) (undo-tree-id10577 . -4) (undo-tree-id10578 . -4) (undo-tree-id10579 . -62) 4619) nil (25756 48594 259780 679000) 0 nil])
([nil nil ((#("standard deviation of each feature in the training set. X_mean and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 7 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 58 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 62 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10534 . -66) (undo-tree-id10535 . -4) (undo-tree-id10536 . -4) (undo-tree-id10537 . -4) (undo-tree-id10538 . -4) (undo-tree-id10539 . -4) (undo-tree-id10540 . -4) (undo-tree-id10541 . -4) (undo-tree-id10542 . -4) (undo-tree-id10543 . -4) (undo-tree-id10544 . -4) (undo-tree-id10545 . -4) (undo-tree-id10546 . -4) (undo-tree-id10547 . -4) (undo-tree-id10548 . -4) (undo-tree-id10549 . -4) (undo-tree-id10550 . -4) (undo-tree-id10551 . -4) (undo-tree-id10552 . -4) (undo-tree-id10553 . -4) (undo-tree-id10554 . -4) (undo-tree-id10555 . -4) (undo-tree-id10556 . -67) 4619) nil (25756 48594 259764 98000) 0 nil])
([nil nil ((#("X_std are just 1D tensors (or NumPy arrays) containing eight
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 5 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10511 . -60) (undo-tree-id10512 . -5) (undo-tree-id10513 . -5) (undo-tree-id10514 . -5) (undo-tree-id10515 . -5) (undo-tree-id10516 . -5) (undo-tree-id10517 . -5) (undo-tree-id10518 . -5) (undo-tree-id10519 . -5) (undo-tree-id10520 . -5) (undo-tree-id10521 . -5) (undo-tree-id10522 . -5) (undo-tree-id10523 . -5) (undo-tree-id10524 . -5) (undo-tree-id10525 . -5) (undo-tree-id10526 . -5) (undo-tree-id10527 . -5) (undo-tree-id10528 . -5) (undo-tree-id10529 . -5) (undo-tree-id10530 . -5) (undo-tree-id10531 . -5) (undo-tree-id10532 . -5) (undo-tree-id10533 . -61) 4620) nil (25756 48594 259651 590000) 0 nil])
([nil nil ((#("floats, one per input feature.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10488 . -30) (undo-tree-id10489 . -4) (undo-tree-id10490 . -4) (undo-tree-id10491 . -4) (undo-tree-id10492 . -4) (undo-tree-id10493 . -4) (undo-tree-id10494 . -4) (undo-tree-id10495 . -4) (undo-tree-id10496 . -4) (undo-tree-id10497 . -4) (undo-tree-id10498 . -4) (undo-tree-id10499 . -4) (undo-tree-id10500 . -4) (undo-tree-id10501 . -4) (undo-tree-id10502 . -4) (undo-tree-id10503 . -4) (undo-tree-id10504 . -4) (undo-tree-id10505 . -4) (undo-tree-id10506 . -4) (undo-tree-id10507 . -4) (undo-tree-id10508 . -4) (undo-tree-id10509 . -4) (undo-tree-id10510 . -31) 4619) nil (25756 48594 259632 294000) 0 nil])
([nil nil ((#("The preprocess() function takes one CSV line and starts by
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10607 . -58) (undo-tree-id10608 . 55) (undo-tree-id10609 . -14) (undo-tree-id10610 . -4) (undo-tree-id10611 . -4) (undo-tree-id10612 . -4) (undo-tree-id10613 . -4) (undo-tree-id10614 . -4) (undo-tree-id10615 . -4) (undo-tree-id10616 . -4) (undo-tree-id10617 . -4) (undo-tree-id10618 . -4) (undo-tree-id10619 . -4) (undo-tree-id10620 . -4) (undo-tree-id10621 . -4) (undo-tree-id10622 . -14) (undo-tree-id10623 . -14) (undo-tree-id10624 . -14) (undo-tree-id10625 . -14) (undo-tree-id10626 . -14) (undo-tree-id10627 . -14) (undo-tree-id10628 . -14) (undo-tree-id10629 . -14) (undo-tree-id10630 . -17) (undo-tree-id10631 . -17) (undo-tree-id10632 . -17) (undo-tree-id10633 . -17) (undo-tree-id10634 . -17) (undo-tree-id10635 . -17) (undo-tree-id10636 . -17) (undo-tree-id10637 . -17) (undo-tree-id10638 . -26) (undo-tree-id10639 . -26) (undo-tree-id10640 . -26) (undo-tree-id10641 . -26) (undo-tree-id10642 . -26) (undo-tree-id10643 . -26) (undo-tree-id10644 . -26) (undo-tree-id10645 . -26) (undo-tree-id10646 . -59) (t 25756 48594 276821 759000)) nil (25756 48619 944145 96000) 0 nil])
([nil nil ((#("parsing it. For this it uses the tf.io.decode_csv() function,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 45 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 46 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 49 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10605 . -61) (undo-tree-id10606 . -62)) nil (25756 48619 944115 767000) 0 nil])
([nil nil ((#("which takes two arguments: the first is the line to parse, and the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10603 . -66) (undo-tree-id10604 . -67)) nil (25756 48619 944112 840000) 0 nil])
([nil nil ((#("second is an array containing the default value for each column in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10601 . -66) (undo-tree-id10602 . -67)) nil (25756 48619 944107 566000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4364) (undo-tree-id10647 . -1) (undo-tree-id10648 . -1) (undo-tree-id10649 . -1) (undo-tree-id10650 . -1) (undo-tree-id10651 . -1) (undo-tree-id10652 . -1) (undo-tree-id10653 . -1) (undo-tree-id10654 . -1) (undo-tree-id10655 . -1) (t 25756 48620 9573 449000)) nil (25756 48624 147234 480000) 0 nil])
([nil nil ((4613 . 4614) (t 25756 48624 165693 737000) 4604) nil (25756 48627 801507 226000) 0 nil])
([nil nil ((#("the CSV file" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10660 . -11) (undo-tree-id10661 . -12) (t 25756 48627 817799 187000)) nil (25756 48631 956384 368000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10658 . -1) (undo-tree-id10659 . -1)) nil (25756 48631 956381 441000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4615) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1)) nil (25756 48631 956376 223000) 0 nil])
([nil nil ((#("This array tells TensorFlow not only the default
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10668 . -48) (undo-tree-id10669 . -49) (t 25756 48631 965918 679000)) nil (25756 48640 311394 788000) 0 nil])
([nil nil ((#("value for each column" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10666 . -20) (undo-tree-id10667 . -21)) nil (25756 48640 311392 430000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10664 . -1) (undo-tree-id10665 . -1)) nil (25756 48640 311389 490000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4615) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1)) nil (25756 48640 311384 510000) 0 nil])
([nil nil ((#("but also the number of columns and their
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10672 . -40) (undo-tree-id10673 . -41) (t 25756 48640 330158 716000)) nil (25756 48785 533262 35000) 0 nil])
([nil nil ((#("types" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10730 . -4) (undo-tree-id10731 . -5)) nil (25756 48806 855890 61000) 0 nil] [nil nil ((#("types. In this example, we tell it that all feature columns are floats
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10670 . -70) (undo-tree-id10671 . -71)) ((4615 . 4686)) (25756 48785 533040 315000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10728 . -1) (undo-tree-id10729 . -2)) nil (25756 48806 855887 810000) 0 nil])
nil
([nil nil ((#("I" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10726 . -1) (undo-tree-id10727 . -1)) nil (25756 48806 855885 915000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) (undo-tree-id10725 . -1)) nil (25756 48806 855883 933000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4615) (undo-tree-id10720 . 1) (undo-tree-id10721 . -1) (undo-tree-id10722 . -1)) nil (25756 48806 855881 428000) 0 nil])
([nil nil ((#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10717 . 1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1)) nil (25756 48806 855878 688000) 0 nil])
([nil nil ((#("h" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10714 . 1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1)) nil (25756 48806 855874 578000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10711 . 1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1)) nil (25756 48806 855871 465000) 0 nil])
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10708 . 1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1)) nil (25756 48806 855869 73000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4615) (undo-tree-id10705 . 1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1)) nil (25756 48806 855866 512000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10702 . 1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1)) nil (25756 48806 855863 736000) 0 nil])
([nil nil ((#("x" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10698 . 1) (undo-tree-id10699 . 1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1)) nil (25756 48806 855860 937000) 0 nil])
([nil nil ((#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10695 . 1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1)) nil (25756 48806 855855 651000) 0 nil])
([nil nil ((#("m" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10691 . 1) (undo-tree-id10692 . 1) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1)) nil (25756 48806 855853 45000) 0 nil])
([nil nil ((#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10687 . 1) (undo-tree-id10688 . 1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1)) nil (25756 48806 855849 703000) 0 nil])
([nil nil ((#("l" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10683 . 1) (undo-tree-id10684 . 1) (undo-tree-id10685 . -1) (undo-tree-id10686 . -1)) nil (25756 48806 855846 508000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10680 . 1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1)) nil (25756 48806 855842 970000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4615) (undo-tree-id10677 . 1) (undo-tree-id10678 . -1) (undo-tree-id10679 . -1)) nil (25756 48806 855839 210000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 4615) (undo-tree-id10674 . 1) (undo-tree-id10675 . -1) (undo-tree-id10676 . -1)) nil (25756 48806 855832 16000) 0 nil])
([nil nil ((#("but we provide an" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4707) (undo-tree-id10842 . -16) (undo-tree-id10843 . -4) (undo-tree-id10844 . -7) (undo-tree-id10845 . -15) (undo-tree-id10846 . -17) (undo-tree-id10847 . -17) (t 25756 48806 874713 754000)) nil (25756 48904 925674 227000) 0 nil])
([nil nil ((#("empty array of type tf.float32 as the default value for the last
" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10802 . -64) (undo-tree-id10803 . -6) (undo-tree-id10804 . -12) (undo-tree-id10805 . -15) (undo-tree-id10806 . -20) (undo-tree-id10807 . -20) (undo-tree-id10808 . -20) (undo-tree-id10809 . -20) (undo-tree-id10810 . -20) (undo-tree-id10811 . -20) (undo-tree-id10812 . -20) (undo-tree-id10813 . -20) (undo-tree-id10814 . -22) (undo-tree-id10815 . -23) (undo-tree-id10816 . -31) (undo-tree-id10817 . -34) (undo-tree-id10818 . -38) (undo-tree-id10819 . -46) (undo-tree-id10820 . -52) (undo-tree-id10821 . -56) (undo-tree-id10822 . -60) (undo-tree-id10823 . -65) (undo-tree-id10824 . -65) (undo-tree-id10825 . -65) (undo-tree-id10826 . -65) (undo-tree-id10827 . -65) (undo-tree-id10828 . -65) (undo-tree-id10829 . -65) (undo-tree-id10830 . -65) (undo-tree-id10831 . 45) (undo-tree-id10832 . -22) (undo-tree-id10833 . -21) (undo-tree-id10834 . -21) (undo-tree-id10835 . -21) (undo-tree-id10836 . -21) (undo-tree-id10837 . -21) (undo-tree-id10838 . -21) (undo-tree-id10839 . -21) (undo-tree-id10840 . -21) (undo-tree-id10841 . -65)) nil (25756 48904 925666 859000) 0 nil])
([nil nil ((#("column (the target): the array tells TensorFlow that this column
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10760 . -64) (undo-tree-id10761 . -7) (undo-tree-id10762 . -7) (undo-tree-id10763 . -7) (undo-tree-id10764 . -7) (undo-tree-id10765 . -7) (undo-tree-id10766 . -7) (undo-tree-id10767 . -7) (undo-tree-id10768 . -7) (undo-tree-id10769 . -8) (undo-tree-id10770 . -8) (undo-tree-id10771 . -8) (undo-tree-id10772 . -8) (undo-tree-id10773 . -8) (undo-tree-id10774 . -8) (undo-tree-id10775 . -8) (undo-tree-id10776 . -8) (undo-tree-id10777 . -12) (undo-tree-id10778 . -18) (undo-tree-id10779 . -18) (undo-tree-id10780 . -18) (undo-tree-id10781 . -18) (undo-tree-id10782 . -18) (undo-tree-id10783 . -18) (undo-tree-id10784 . -18) (undo-tree-id10785 . -18) (undo-tree-id10786 . -21) (undo-tree-id10787 . -21) (undo-tree-id10788 . -21) (undo-tree-id10789 . -21) (undo-tree-id10790 . -21) (undo-tree-id10791 . -21) (undo-tree-id10792 . -21) (undo-tree-id10793 . -21) (undo-tree-id10794 . -21) (undo-tree-id10795 . -21) (undo-tree-id10796 . -21) (undo-tree-id10797 . -21) (undo-tree-id10798 . -21) (undo-tree-id10799 . -21) (undo-tree-id10800 . -21) (undo-tree-id10801 . -65)) nil (25756 48904 925270 915000) 0 nil])
([nil nil ((#("contains floats, but that there is no default value, so it will raise
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10758 . -69) (undo-tree-id10759 . -70)) nil (25756 48904 925241 744000) 0 nil])
([nil nil ((#("an exception if it encounters a missing value.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10756 . -46) (undo-tree-id10757 . -47)) nil (25756 48904 925239 740000) 0 nil])
([nil nil ((#("The decode_csv() function returns a list of scalar tensors (one
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 11 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 14 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10754 . -63) (undo-tree-id10755 . -64)) nil (25756 48904 925237 716000) 0 nil])
([nil nil ((#("per column), but we need to return 1D tensor arrays. So we call
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10752 . -63) (undo-tree-id10753 . -64)) nil (25756 48904 925235 680000) 0 nil])
([nil nil ((#("tf.stack() on all tensors except for the last one (the target): this
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 62 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10748 . -68) (undo-tree-id10749 . 69) (undo-tree-id10750 . -2) (undo-tree-id10751 . -69)) nil (25756 48904 925233 395000) 0 nil])
([nil nil ((#("will stack these tensors into a 1D array. We then do the same for
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10746 . -65) (undo-tree-id10747 . -66)) nil (25756 48904 925230 11000) 0 nil])
([nil nil ((#("the target value (this makes it a 1D tensor array with a single
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10744 . -63) (undo-tree-id10745 . -64)) nil (25756 48904 925227 348000) 0 nil])
([nil nil ((#("value, rather than a scalar tensor).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10742 . -36) (undo-tree-id10743 . -37)) nil (25756 48904 925224 911000) 0 nil])
([nil nil ((#("Finally, we scale the input features by subtracting the feature
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10740 . -63) (undo-tree-id10741 . -64)) nil (25756 48904 925222 495000) 0 nil])
([nil nil ((#("means and then dividing by the feature standard deviations, and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10738 . -63) (undo-tree-id10739 . -64)) nil (25756 48904 925217 885000) 0 nil])
([nil nil ((#("we return a tuple containing the scaled features and the target.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4708) (undo-tree-id10736 . -64) (undo-tree-id10737 . -65)) nil (25756 48904 925898 769000) 0 nil])
([nil nil ((#("preprocess(b'4.2083,44.0,5.3232,0.9171,846.0,2.3370,37.47,-122.2,2.782')
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4751) (undo-tree-id10848 . -72) (undo-tree-id10849 . 73) (undo-tree-id10850 . -10) (undo-tree-id10851 . -73)) nil (25756 48908 938290 308000) 0 nil] [nil nil ((#("preprocess(b'4.2083,44.0,5.3232,0.9171,846.0,2.3370,37.47,-122.2,2.782')
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4751) (undo-tree-id10732 . -72) (undo-tree-id10733 . 73) (undo-tree-id10734 . -10) (undo-tree-id10735 . -73)) ((4751 . 4824)) (25756 48904 925209 229000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4603 . 4604) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4676) (4603 . 4677) 4569) nil (25756 48942 254295 268000) 0 nil])
nil
([nil nil ((#("Let’s test this preprocessing function:>>>
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4781) (undo-tree-id11158 . -42) (undo-tree-id11159 . -43) (undo-tree-id11160 . -43) (undo-tree-id11161 . -43) (undo-tree-id11162 . -43) (undo-tree-id11163 . -43) (undo-tree-id11164 . -43) (undo-tree-id11165 . -43) (undo-tree-id11166 . -43) (undo-tree-id11167 . -43) (undo-tree-id11168 . -43) (undo-tree-id11169 . -43) (undo-tree-id11170 . -43) (undo-tree-id11171 . -43) (undo-tree-id11172 . -43) (undo-tree-id11173 . -43) (undo-tree-id11174 . -43) (undo-tree-id11175 . -43) (undo-tree-id11176 . -43) (undo-tree-id11177 . -43) (undo-tree-id11178 . -43) (undo-tree-id11179 . -43) (undo-tree-id11180 . -43) (undo-tree-id11181 . -43) (undo-tree-id11182 . -43) (undo-tree-id11183 . -43) (undo-tree-id11184 . -43) (undo-tree-id11185 . -43) (undo-tree-id11186 . -43) (undo-tree-id11187 . -43) (undo-tree-id11188 . -43) (undo-tree-id11189 . -43) (undo-tree-id11190 . -43) (undo-tree-id11191 . -43) (undo-tree-id11192 . -43) (undo-tree-id11193 . -43) (undo-tree-id11194 . -43) (undo-tree-id11195 . -43) (undo-tree-id11196 . -43) (undo-tree-id11197 . -43) (undo-tree-id11198 . -43) (undo-tree-id11199 . -43) (undo-tree-id11200 . -43) (undo-tree-id11201 . -43) (undo-tree-id11202 . -43) (undo-tree-id11203 . -43) (undo-tree-id11204 . -43) (undo-tree-id11205 . -43) (undo-tree-id11206 . -43) (undo-tree-id11207 . -43) (undo-tree-id11208 . -43) (undo-tree-id11209 . -43) (undo-tree-id11210 . -43) (undo-tree-id11211 . -43) (undo-tree-id11212 . -43) (undo-tree-id11213 . -43) (undo-tree-id11214 . -43) (undo-tree-id11215 . -43) (undo-tree-id11216 . -43) (undo-tree-id11217 . -43) (undo-tree-id11218 . -43) (undo-tree-id11219 . -43) (undo-tree-id11220 . -43) (undo-tree-id11221 . -43) (undo-tree-id11222 . -43) (undo-tree-id11223 . -43) (undo-tree-id11224 . -43) (undo-tree-id11225 . -43) (undo-tree-id11226 . -43) (undo-tree-id11227 . -43) (undo-tree-id11228 . -43) (undo-tree-id11229 . -43) (undo-tree-id11230 . -43) (undo-tree-id11231 . -43) (undo-tree-id11232 . -43) (undo-tree-id11233 . -43) (undo-tree-id11234 . -43) (undo-tree-id11235 . -43) (undo-tree-id11236 . -43) (undo-tree-id11237 . -43) (undo-tree-id11238 . -43) (undo-tree-id11239 . -43) (undo-tree-id11240 . -43) (undo-tree-id11241 . -43) (undo-tree-id11242 . -43) (undo-tree-id11243 . -43) (undo-tree-id11244 . -43) (undo-tree-id11245 . -43) (undo-tree-id11246 . -43) (undo-tree-id11247 . -43) (undo-tree-id11248 . -43) (undo-tree-id11249 . -43) (undo-tree-id11250 . -43) (undo-tree-id11251 . -43) (undo-tree-id11252 . -43) (undo-tree-id11253 . -43) (undo-tree-id11254 . -43) (undo-tree-id11255 . -43) (undo-tree-id11256 . -43) (undo-tree-id11257 . -43) (undo-tree-id11258 . -43) (undo-tree-id11259 . -43) (t 25756 48909 1329 929000)) nil (25756 48967 305253 305000) 0 nil] [nil nil ((#("Let’s test this preprocessing function:>>>
(<tf.Tensor: id=6227, shape=(8,), dtype=float32, numpy=
array([ 0.16579159, 1.216324 , -0.05204564, -0.39215982, -0.5277444 ,
-0.2633488 , 0.8543046 , -1.3072058 ], dtype=float32)>,
<tf.Tensor: [...], numpy=array([2.782], dtype=float32)>)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 43 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 99 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 169 225 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 225 282 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4781) (undo-tree-id10943 . -281) (undo-tree-id10944 . -43) (undo-tree-id10945 . -43) (undo-tree-id10946 . -43) (undo-tree-id10947 . -43) (undo-tree-id10948 . -43) (undo-tree-id10949 . -43) (undo-tree-id10950 . -43) (undo-tree-id10951 . -43) (undo-tree-id10952 . -43) (undo-tree-id10953 . -43) (undo-tree-id10954 . -43) (undo-tree-id10955 . -43) (undo-tree-id10956 . -43) (undo-tree-id10957 . -43) (undo-tree-id10958 . -43) (undo-tree-id10959 . -43) (undo-tree-id10960 . -43) (undo-tree-id10961 . -43) (undo-tree-id10962 . -43) (undo-tree-id10963 . -43) (undo-tree-id10964 . -43) (undo-tree-id10965 . -43) (undo-tree-id10966 . -43) (undo-tree-id10967 . -43) (undo-tree-id10968 . -43) (undo-tree-id10969 . -43) (undo-tree-id10970 . -43) (undo-tree-id10971 . -43) (undo-tree-id10972 . -43) (undo-tree-id10973 . -43) (undo-tree-id10974 . -43) (undo-tree-id10975 . -43) (undo-tree-id10976 . -43) (undo-tree-id10977 . -43) (undo-tree-id10978 . -43) (undo-tree-id10979 . -43) (undo-tree-id10980 . -43) (undo-tree-id10981 . -43) (undo-tree-id10982 . -43) (undo-tree-id10983 . -43) (undo-tree-id10984 . -43) (undo-tree-id10985 . -43) (undo-tree-id10986 . -43) (undo-tree-id10987 . -43) (undo-tree-id10988 . -43) (undo-tree-id10989 . -43) (undo-tree-id10990 . -43) (undo-tree-id10991 . -43) (undo-tree-id10992 . -43) (undo-tree-id10993 . -43) (undo-tree-id10994 . -43) (undo-tree-id10995 . -43) (undo-tree-id10996 . -43) (undo-tree-id10997 . -43) (undo-tree-id10998 . -43) (undo-tree-id10999 . -43) (undo-tree-id11000 . -43) (undo-tree-id11001 . -43) (undo-tree-id11002 . -43) (undo-tree-id11003 . -43) (undo-tree-id11004 . -43) (undo-tree-id11005 . -43) (undo-tree-id11006 . -43) (undo-tree-id11007 . -43) (undo-tree-id11008 . -43) (undo-tree-id11009 . -43) (undo-tree-id11010 . -43) (undo-tree-id11011 . -43) (undo-tree-id11012 . -43) (undo-tree-id11013 . -43) (undo-tree-id11014 . -43) (undo-tree-id11015 . -43) (undo-tree-id11016 . -43) (undo-tree-id11017 . -43) (undo-tree-id11018 . -43) (undo-tree-id11019 . -43) (undo-tree-id11020 . -43) (undo-tree-id11021 . -43) (undo-tree-id11022 . -43) (undo-tree-id11023 . -43) (undo-tree-id11024 . -43) (undo-tree-id11025 . -43) (undo-tree-id11026 . -43) (undo-tree-id11027 . -43) (undo-tree-id11028 . -43) (undo-tree-id11029 . -282) 5063 (t 25756 48909 1329 929000)) ((4781 . 5063)) (25756 48942 253825 532000) 0 nil] [nil nil ((#("Looks good! We can now apply the function to the dataset.
" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 56 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 57 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5063) (undo-tree-id10939 . -57) (undo-tree-id10940 . 9) (undo-tree-id10941 . -56) (undo-tree-id10942 . -58) (t 25756 48909 1329 929000)) ((5063 . 5121)) (25756 48940 591462 622000) 0 nil])
([nil nil ((#("(<tf.Tensor: id=6227, shape=(8,), dtype=float32, numpy=
array([ 0.16579159, 1.216324 , -0.05204564, -0.39215982, -0.5277444 ,
-0.2633488 , 0.8543046 , -1.3072058 ], dtype=float32)>,
<tf.Tensor: [...], numpy=array([2.782], dtype=float32)>)
Looks good! We can now apply the function to the dataset.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 56 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 126 182 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 182 239 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 239 295 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 295 296 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4781) (undo-tree-id11043 . -296) (undo-tree-id11044 . -239) (undo-tree-id11045 . -239) (undo-tree-id11046 . -239) (undo-tree-id11047 . -239) (undo-tree-id11048 . -239) (undo-tree-id11049 . -239) (undo-tree-id11050 . -239) (undo-tree-id11051 . -239) (undo-tree-id11052 . -239) (undo-tree-id11053 . -239) (undo-tree-id11054 . -239) (undo-tree-id11055 . -239) (undo-tree-id11056 . -239) (undo-tree-id11057 . -239) (undo-tree-id11058 . -239) (undo-tree-id11059 . -239) (undo-tree-id11060 . -239) (undo-tree-id11061 . -239) (undo-tree-id11062 . -239) (undo-tree-id11063 . -182) (undo-tree-id11064 . -182) (undo-tree-id11065 . -182) (undo-tree-id11066 . -182) (undo-tree-id11067 . -182) (undo-tree-id11068 . -182) (undo-tree-id11069 . -182) (undo-tree-id11070 . -182) (undo-tree-id11071 . -182) (undo-tree-id11072 . -182) (undo-tree-id11073 . -182) (undo-tree-id11074 . -182) (undo-tree-id11075 . -182) (undo-tree-id11076 . -182) (undo-tree-id11077 . -182) (undo-tree-id11078 . -126) (undo-tree-id11079 . -126) (undo-tree-id11080 . -126) (undo-tree-id11081 . -126) (undo-tree-id11082 . -126) (undo-tree-id11083 . -126) (undo-tree-id11084 . -126) (undo-tree-id11085 . -126) (undo-tree-id11086 . -126) (undo-tree-id11087 . -126) (undo-tree-id11088 . -126) (undo-tree-id11089 . -126) (undo-tree-id11090 . -126) (undo-tree-id11091 . -126) (undo-tree-id11092 . -126) (undo-tree-id11093 . -56) (undo-tree-id11094 . -56) (undo-tree-id11095 . -56) (undo-tree-id11096 . -56) (undo-tree-id11097 . -56) (undo-tree-id11098 . -56) (undo-tree-id11099 . -56) (undo-tree-id11100 . -56) (undo-tree-id11101 . -297) (undo-tree-id11102 . -239) (undo-tree-id11103 . -56) (undo-tree-id11104 . -56) (undo-tree-id11105 . -56) (undo-tree-id11106 . -56) (undo-tree-id11107 . -56) (undo-tree-id11108 . -56) (undo-tree-id11109 . -56) (undo-tree-id11110 . -56) (undo-tree-id11111 . -56) (undo-tree-id11112 . -56) (undo-tree-id11113 . -56) (undo-tree-id11114 . -56) (undo-tree-id11115 . -56) (undo-tree-id11116 . -56) (undo-tree-id11117 . -56) (undo-tree-id11118 . -126) (undo-tree-id11119 . -126) (undo-tree-id11120 . -126) (undo-tree-id11121 . -126) (undo-tree-id11122 . -126) (undo-tree-id11123 . -126) (undo-tree-id11124 . -126) (undo-tree-id11125 . -126) (undo-tree-id11126 . -182) (undo-tree-id11127 . -182) (undo-tree-id11128 . -182) (undo-tree-id11129 . -182) (undo-tree-id11130 . -182) (undo-tree-id11131 . -182) (undo-tree-id11132 . -182) (undo-tree-id11133 . -182) (undo-tree-id11134 . -182) (undo-tree-id11135 . -182) (undo-tree-id11136 . -182) (undo-tree-id11137 . -182) (undo-tree-id11138 . -182) (undo-tree-id11139 . -182) (undo-tree-id11140 . -182) (undo-tree-id11141 . -239) (undo-tree-id11142 . -239) (undo-tree-id11143 . -239) (undo-tree-id11144 . -239) (undo-tree-id11145 . -239) (undo-tree-id11146 . -239) (undo-tree-id11147 . -239) (undo-tree-id11148 . -239) (undo-tree-id11149 . -239) (undo-tree-id11150 . -239) (undo-tree-id11151 . -239) (undo-tree-id11152 . -239) (undo-tree-id11153 . -239) (undo-tree-id11154 . -239) (undo-tree-id11155 . -239) (undo-tree-id11156 . -239) (undo-tree-id11157 . -297) 5020) nil (25756 48967 304947 714000) 0 nil])
nil
([nil nil ((#("Let’s test this preprocessing function:>>>
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4781) (undo-tree-id10852 . -42) (undo-tree-id10853 . -43) (undo-tree-id10854 . -43) (undo-tree-id10855 . -43) (undo-tree-id10856 . -43) (undo-tree-id10857 . -43) (undo-tree-id10858 . -43) (undo-tree-id10859 . -43) (undo-tree-id10860 . -43) (undo-tree-id10861 . -43) (undo-tree-id10862 . -43) (undo-tree-id10863 . -43) (undo-tree-id10864 . -43) (undo-tree-id10865 . -43) (undo-tree-id10866 . -43) (undo-tree-id10867 . -43) (undo-tree-id10868 . -43) (undo-tree-id10869 . -43) (undo-tree-id10870 . -43) (undo-tree-id10871 . -43) (undo-tree-id10872 . -43) (undo-tree-id10873 . -43) (undo-tree-id10874 . -43) (undo-tree-id10875 . -43) (undo-tree-id10876 . -43) (undo-tree-id10877 . -43) (undo-tree-id10878 . -43) (undo-tree-id10879 . -43) (undo-tree-id10880 . -43) (undo-tree-id10881 . -43) (undo-tree-id10882 . -43) (undo-tree-id10883 . -43) (undo-tree-id10884 . -43) (undo-tree-id10885 . -43) (undo-tree-id10886 . -43) (undo-tree-id10887 . -43) (undo-tree-id10888 . -43) (undo-tree-id10889 . -43) (undo-tree-id10890 . -43) (undo-tree-id10891 . -43) (undo-tree-id10892 . -43) (undo-tree-id10893 . -43) (undo-tree-id10894 . -43) (undo-tree-id10895 . -43) (undo-tree-id10896 . -43) (undo-tree-id10897 . -43) (undo-tree-id10898 . -43) (undo-tree-id10899 . -43) (undo-tree-id10900 . -43) (undo-tree-id10901 . -43) (undo-tree-id10902 . -43) (undo-tree-id10903 . -43) (undo-tree-id10904 . -43) (undo-tree-id10905 . -43) (undo-tree-id10906 . -43) (undo-tree-id10907 . -43) (undo-tree-id10908 . -43) (undo-tree-id10909 . -43) (undo-tree-id10910 . -43) (undo-tree-id10911 . -43) (undo-tree-id10912 . -43) (undo-tree-id10913 . -43) (undo-tree-id10914 . -43) (undo-tree-id10915 . -43) (undo-tree-id10916 . -43) (undo-tree-id10917 . -43) (undo-tree-id10918 . -43) (undo-tree-id10919 . -43) (undo-tree-id10920 . -43) (undo-tree-id10921 . -43) (undo-tree-id10922 . -43) (undo-tree-id10923 . -43) (undo-tree-id10924 . -43) (undo-tree-id10925 . -43) (undo-tree-id10926 . -43) (undo-tree-id10927 . -43) (undo-tree-id10928 . -43) (undo-tree-id10929 . -43) (undo-tree-id10930 . -43) (undo-tree-id10931 . -43) (undo-tree-id10932 . -43) (undo-tree-id10933 . -43) (undo-tree-id10934 . -43) (undo-tree-id10935 . -43) (undo-tree-id10936 . -43) (undo-tree-id10937 . -43) (undo-tree-id10938 . -43)) ((4781 . 4824)) (25756 48940 591041 254000) 0 nil])
([nil nil ((4676 . 4677) 4604) nil (25756 48967 304848 696000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 4677 . 4678) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4974) (4677 . 4975)) nil (25756 48967 304847 217000) 0 nil])
([nil nil ((#("Looks good! We can now apply the function to the dataset.
" 0 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 28 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 56 57 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 57 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 4917) (undo-tree-id11030 . -57) (undo-tree-id11031 . -57) (undo-tree-id11032 . 1) (undo-tree-id11033 . -58) (undo-tree-id11034 . -58) (undo-tree-id11035 . -58) (undo-tree-id11036 . -58) (undo-tree-id11037 . -58) (undo-tree-id11038 . -58) (undo-tree-id11039 . -58) (undo-tree-id11040 . -58) (undo-tree-id11041 . -58) (undo-tree-id11042 . -58)) nil (25756 48967 304844 805000) 0 nil])
([nil nil ((4867 . 4868) (4866 . 4867) (4809 . 4810) (4808 . 4809) (4737 . 4738) (4736 . 4737) (4678 . 4680)) nil (25756 48967 304820 553000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5994 . 5995) (nil fontified nil 5945 . 5995) (nil fontified nil 5876 . 5945) (nil fontified nil 5831 . 5876) (nil fontified nil 5769 . 5831) (nil fontified nil 5699 . 5769) (nil fontified nil 5640 . 5699) (nil fontified nil 5580 . 5640) (nil fontified nil 5550 . 5580) (nil fontified nil 5502 . 5550) (nil fontified nil 5467 . 5502) (nil fontified nil 5419 . 5467) (nil fontified nil 5362 . 5419) (nil fontified nil 5281 . 5362) (nil fontified nil 5210 . 5281) (nil fontified nil 5132 . 5210) (nil fontified nil 5057 . 5132) (nil fontified nil 5029 . 5057) (5029 . 5995) (t 25756 48967 322775 347000)) nil (25756 49087 348571 12000) 0 nil])
([nil nil ((5997 . 5998) (5996 . 5997) (5995 . 5996) 5994) nil (25756 49087 348567 966000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6822 . 6823) (nil fontified nil 6811 . 6823) (nil fontified nil 6735 . 6811) (nil fontified nil 6664 . 6735) (nil fontified nil 6589 . 6664) (nil fontified nil 6519 . 6589) (nil fontified nil 6457 . 6519) (nil fontified nil 6380 . 6457) (nil fontified nil 6308 . 6380) (nil fontified nil 6233 . 6308) (nil fontified nil 6159 . 6233) (nil fontified nil 6084 . 6159) (nil fontified nil 6010 . 6084) (nil fontified nil 5998 . 6010) (5998 . 6823)) nil (25756 49087 348566 463000) 0 nil])
([nil nil ((6823 . 6825)) nil (25756 49087 348563 911000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11047 . 11048) (nil fontified nil 10969 . 11048) (nil fontified nil 10883 . 10969) (nil fontified nil 10798 . 10883) (nil fontified nil 10746 . 10798) (nil fontified nil 10674 . 10746) (nil fontified nil 10606 . 10674) (nil fontified nil 10536 . 10606) (nil fontified nil 10468 . 10536) (nil fontified nil 10403 . 10468) (nil fontified nil 10348 . 10403) (nil fontified nil 10304 . 10348) (nil fontified nil 10251 . 10304) (nil fontified nil 10227 . 10251) (nil fontified nil 10195 . 10227) (nil fontified nil 10160 . 10195) (nil fontified nil 10153 . 10160) (nil fontified nil 10088 . 10153) (nil fontified nil 10033 . 10088) (nil fontified nil 10020 . 10033) (nil fontified nil 9986 . 10020) (nil fontified nil 9911 . 9986) (nil fontified nil 9869 . 9911) (nil fontified nil 9834 . 9869) (nil fontified nil 9778 . 9834) (nil fontified nil 9703 . 9778) (nil fontified nil 9661 . 9703) (nil fontified nil 9588 . 9661) (nil fontified nil 9509 . 9588) (nil fontified nil 9435 . 9509) (nil fontified nil 9375 . 9435) (nil fontified nil 9365 . 9375) (nil fontified nil 9294 . 9365) (nil fontified nil 9269 . 9294) (nil fontified nil 9260 . 9269) (nil fontified nil 9137 . 9260) (nil fontified nil 9116 . 9137) (nil fontified nil 9077 . 9116) (nil fontified nil 9007 . 9077) (nil fontified nil 8930 . 9007) (nil fontified nil 8866 . 8930) (nil fontified nil 8820 . 8866) (nil fontified nil 8772 . 8820) (nil fontified nil 8724 . 8772) (nil fontified nil 8710 . 8724) (nil fontified nil 8632 . 8710) (nil fontified nil 8555 . 8632) (nil fontified nil 8486 . 8555) (nil fontified nil 8454 . 8486) (nil fontified nil 8418 . 8454) (nil fontified nil 8349 . 8418) (nil fontified nil 8274 . 8349) (nil fontified nil 8204 . 8274) (nil fontified nil 8130 . 8204) (nil fontified nil 8053 . 8130) (nil fontified nil 7989 . 8053) (nil fontified nil 7925 . 7989) (nil fontified nil 7858 . 7925) (nil fontified nil 7788 . 7858) (nil fontified nil 7719 . 7788) (nil fontified nil 7655 . 7719) (nil fontified nil 7609 . 7655) (nil fontified nil 7456 . 7609) (nil fontified nil 7380 . 7456) (nil fontified nil 7310 . 7380) (nil fontified nil 7236 . 7310) (nil fontified nil 7159 . 7236) (nil fontified nil 7081 . 7159) (nil fontified nil 6997 . 7081) (nil fontified nil 6913 . 6997) (nil fontified nil 6829 . 6913) (nil fontified nil 6825 . 6829) (6825 . 11048)) nil (25756 49087 348560 999000) 0 nil])
([nil nil ((5998 . 6000)) nil (25756 49087 348550 888000) 0 nil])
([nil nil ((11050 . 11051)) nil (25756 49087 348546 46000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5997) (undo-tree-id11260 . -1) (t 25756 49087 369657 879000)) nil (25756 49092 836876 592000) 0 nil])
([nil nil ((#("prefetch" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6022) (undo-tree-id11390 . -7) (undo-tree-id11391 . -8) (undo-tree-id11392 . -8) (undo-tree-id11393 . -8) (undo-tree-id11394 . -8) (undo-tree-id11395 . -8) (undo-tree-id11396 . -8) (undo-tree-id11397 . -8) (undo-tree-id11398 . -8) (undo-tree-id11399 . 8) (undo-tree-id11400 . -8) (undo-tree-id11401 . -8) (undo-tree-id11402 . -8) (t 25756 49092 857787 17000)) nil (25756 49113 759408 462000) 0 nil])
([nil nil ((#("(1)" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6022) (undo-tree-id11358 . -2) (undo-tree-id11359 . 3) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (undo-tree-id11364 . -1) (undo-tree-id11365 . -1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -2) (undo-tree-id11369 . -2) (undo-tree-id11370 . -2) (undo-tree-id11371 . -2) (undo-tree-id11372 . -2) (undo-tree-id11373 . -2) (undo-tree-id11374 . -2) (undo-tree-id11375 . -2) (undo-tree-id11376 . -1) (undo-tree-id11377 . -1) (undo-tree-id11378 . -1) (undo-tree-id11379 . -1) (undo-tree-id11380 . -1) (undo-tree-id11381 . -1) (undo-tree-id11382 . -1) (undo-tree-id11383 . -1) (undo-tree-id11384 . -1) (undo-tree-id11385 . -1) (undo-tree-id11386 . -1) (undo-tree-id11387 . -1) (undo-tree-id11388 . -3) (undo-tree-id11389 . -3) 6023) nil (25756 49113 759397 862000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6021) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) (undo-tree-id11282 . -1) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (undo-tree-id11292 . -1) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) (undo-tree-id11300 . -1) (undo-tree-id11301 . -1) (undo-tree-id11302 . -1) (undo-tree-id11303 . -1) (undo-tree-id11304 . -1) (undo-tree-id11305 . -1) (undo-tree-id11306 . -1) (undo-tree-id11307 . -1) (undo-tree-id11308 . -1) (undo-tree-id11309 . -1) (undo-tree-id11310 . -1) (undo-tree-id11311 . -1) (undo-tree-id11312 . -1) (undo-tree-id11313 . -1) (undo-tree-id11314 . -1) (undo-tree-id11315 . -1) (undo-tree-id11316 . -1) (undo-tree-id11317 . -1) (undo-tree-id11318 . -1) (undo-tree-id11319 . -1) (undo-tree-id11320 . -1) (undo-tree-id11321 . -1) (undo-tree-id11322 . -1) (undo-tree-id11323 . -1) (undo-tree-id11324 . -1) (undo-tree-id11325 . -1) (undo-tree-id11326 . -1) (undo-tree-id11327 . -1) (undo-tree-id11328 . -1) (undo-tree-id11329 . -1) (undo-tree-id11330 . -1) (undo-tree-id11331 . -1) (undo-tree-id11332 . -1) (undo-tree-id11333 . -1) (undo-tree-id11334 . -1) (undo-tree-id11335 . -1) (undo-tree-id11336 . -1) (undo-tree-id11337 . -1) (undo-tree-id11338 . -1) (undo-tree-id11339 . -1) (undo-tree-id11340 . -1) (undo-tree-id11341 . -1) (undo-tree-id11342 . -1) (undo-tree-id11343 . -1) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1)) nil (25756 49113 759373 507000) 0 nil])
([nil nil ((#("2" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6111) (undo-tree-id11599 . -1) (undo-tree-id11600 . -1) (t 25756 49113 778277 355000)) nil (25756 49130 765876 87000) 0 nil])
([nil nil ((#("By calling at the end, we are creating a dataset that will do
its best to always be one batch ahead. In other words, " 0 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 62 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6011) (undo-tree-id11403 . -116) (undo-tree-id11404 . -116) (undo-tree-id11405 . 107) (undo-tree-id11406 . -10) (undo-tree-id11407 . -10) (undo-tree-id11408 . -10) (undo-tree-id11409 . -10) (undo-tree-id11410 . -10) (undo-tree-id11411 . -10) (undo-tree-id11412 . -10) (undo-tree-id11413 . -10) (undo-tree-id11414 . -10) (undo-tree-id11415 . -10) (undo-tree-id11416 . -10) (undo-tree-id11417 . -10) (undo-tree-id11418 . -10) (undo-tree-id11419 . -10) (undo-tree-id11420 . -10) (undo-tree-id11421 . -10) (undo-tree-id11422 . -10) (undo-tree-id11423 . -10) (undo-tree-id11424 . -10) (undo-tree-id11425 . -10) (undo-tree-id11426 . -10) (undo-tree-id11427 . -10) (undo-tree-id11428 . -10) (undo-tree-id11429 . -10) (undo-tree-id11430 . -10) (undo-tree-id11431 . -10) (undo-tree-id11432 . -10) (undo-tree-id11433 . -10) (undo-tree-id11434 . -10) (undo-tree-id11435 . -10) (undo-tree-id11436 . -10) (undo-tree-id11437 . -10) (undo-tree-id11438 . -10) (undo-tree-id11439 . -10) (undo-tree-id11440 . -10) (undo-tree-id11441 . -10) (undo-tree-id11442 . -10) (undo-tree-id11443 . -10) (undo-tree-id11444 . -10) (undo-tree-id11445 . -10) (undo-tree-id11446 . -10) (undo-tree-id11447 . -10) (undo-tree-id11448 . -10) (undo-tree-id11449 . -10) (undo-tree-id11450 . -10) (undo-tree-id11451 . -10) (undo-tree-id11452 . -10) (undo-tree-id11453 . -10) (undo-tree-id11454 . -10) (undo-tree-id11455 . -10) (undo-tree-id11456 . -10) (undo-tree-id11457 . -10) (undo-tree-id11458 . -10) (undo-tree-id11459 . -10) (undo-tree-id11460 . -10) (undo-tree-id11461 . -10) (undo-tree-id11462 . -10) (undo-tree-id11463 . -10) (undo-tree-id11464 . -10) (undo-tree-id11465 . -10) (undo-tree-id11466 . -10) (undo-tree-id11467 . -10) (undo-tree-id11468 . -10) (undo-tree-id11469 . -10) (undo-tree-id11470 . -10) (undo-tree-id11471 . -10) (undo-tree-id11472 . -10) (undo-tree-id11473 . -10) (undo-tree-id11474 . -10) (undo-tree-id11475 . -10) (undo-tree-id11476 . -10) (undo-tree-id11477 . -10) (undo-tree-id11478 . -10) (undo-tree-id11479 . -10) (undo-tree-id11480 . -10) (undo-tree-id11481 . -10) (undo-tree-id11482 . -10) (undo-tree-id11483 . -10) (undo-tree-id11484 . -10) (undo-tree-id11485 . -10) (undo-tree-id11486 . -10) (undo-tree-id11487 . -10) (undo-tree-id11488 . -10) (undo-tree-id11489 . -10) (undo-tree-id11490 . -10) (undo-tree-id11491 . -10) (undo-tree-id11492 . -10) (undo-tree-id11493 . -10) (undo-tree-id11494 . -10) (undo-tree-id11495 . -10) (undo-tree-id11496 . -10) (undo-tree-id11497 . -10) (undo-tree-id11498 . -10) (undo-tree-id11499 . -10) (undo-tree-id11500 . -10) (undo-tree-id11501 . -10) (undo-tree-id11502 . -116) (undo-tree-id11503 . -10) (undo-tree-id11504 . -10) (undo-tree-id11505 . -10) (undo-tree-id11506 . -10) (undo-tree-id11507 . -10) (undo-tree-id11508 . -10) (undo-tree-id11509 . -10) (undo-tree-id11510 . -10) (undo-tree-id11511 . -10) (undo-tree-id11512 . -10) (undo-tree-id11513 . -10) (undo-tree-id11514 . -11) (undo-tree-id11515 . -14) (undo-tree-id11516 . -18) (undo-tree-id11517 . -21) (undo-tree-id11518 . -23) (undo-tree-id11519 . -26) (undo-tree-id11520 . -30) (undo-tree-id11521 . -39) (undo-tree-id11522 . 76) (undo-tree-id11523 . -48) (undo-tree-id11524 . -41) (undo-tree-id11525 . -41) (undo-tree-id11526 . -41) (undo-tree-id11527 . -41) (undo-tree-id11528 . -41) (undo-tree-id11529 . -41) (undo-tree-id11530 . -41) (undo-tree-id11531 . -41) (undo-tree-id11532 . -49) (undo-tree-id11533 . -54) (undo-tree-id11534 . -59) (undo-tree-id11535 . -62) (undo-tree-id11536 . -62) (undo-tree-id11537 . -62) (undo-tree-id11538 . -62) (undo-tree-id11539 . -62) (undo-tree-id11540 . -62) (undo-tree-id11541 . -62) (undo-tree-id11542 . -62) (undo-tree-id11543 . -66) (undo-tree-id11544 . -71) (undo-tree-id11545 . -74) (undo-tree-id11546 . -81) (undo-tree-id11547 . -84) (undo-tree-id11548 . -88) (undo-tree-id11549 . -94) (undo-tree-id11550 . -99) (undo-tree-id11551 . -100) (undo-tree-id11552 . -100) (undo-tree-id11553 . -100) (undo-tree-id11554 . -100) (undo-tree-id11555 . -100) (undo-tree-id11556 . -100) (undo-tree-id11557 . -100) (undo-tree-id11558 . -100) (undo-tree-id11559 . -100) (undo-tree-id11560 . -100) (undo-tree-id11561 . -101) (undo-tree-id11562 . -101) (undo-tree-id11563 . -101) (undo-tree-id11564 . -101) (undo-tree-id11565 . -101) (undo-tree-id11566 . -101) (undo-tree-id11567 . -101) (undo-tree-id11568 . -101) (undo-tree-id11569 . -39) (undo-tree-id11570 . -39) (undo-tree-id11571 . -39) (undo-tree-id11572 . -39) (undo-tree-id11573 . -39) (undo-tree-id11574 . -39) (undo-tree-id11575 . -39) (undo-tree-id11576 . -39) (undo-tree-id11577 . -117) (undo-tree-id11578 . -116) (undo-tree-id11579 . -62) (undo-tree-id11580 . -62) (undo-tree-id11581 . -62) (undo-tree-id11582 . -62) (undo-tree-id11583 . -62) (undo-tree-id11584 . -62) (undo-tree-id11585 . -62) (undo-tree-id11586 . -62) (undo-tree-id11587 . -62) (undo-tree-id11588 . -62) (undo-tree-id11589 . -62) (undo-tree-id11590 . -62) (undo-tree-id11591 . -62) (undo-tree-id11592 . -62) (undo-tree-id11593 . -62) (undo-tree-id11594 . -62) (undo-tree-id11595 . -115) (undo-tree-id11596 . -116) (undo-tree-id11597 . -116) (undo-tree-id11598 . -117) 6127) nil (25756 49130 765864 435000) 0 nil])
([nil nil ((6029 . 6030) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6029) (undo-tree-id11601 . -1) 6011 (t 25756 49130 786673 818000)) nil (25756 49132 373672 189000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6090) (nil fontified nil 6089 . 6090) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6089 . 6090) (6089 . 6090) 6054 (t 25756 49132 394711 202000)) nil (25756 49151 620603 39000) 0 nil])
([nil nil ((6250 . 6251) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6250) (undo-tree-id11685 . -1) (6178 . 6179) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6178) (undo-tree-id11686 . -1) (6103 . 6104) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6103) (undo-tree-id11687 . 1) (undo-tree-id11688 . -1) 6090) nil (25756 49151 620600 755000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6248) (nil fontified nil 6247 . 6248) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6247 . 6248) (6247 . 6248) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6169) (nil fontified nil 6168 . 6169) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6168 . 6169) (6168 . 6169) 6250) nil (25756 49151 620595 177000) 0 nil])
([nil nil ((#("(e.g., reading the data
from disk and preprocessing it)" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 34 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6145) (undo-tree-id11659 . -54) (undo-tree-id11660 . -33) (undo-tree-id11661 . -33) (undo-tree-id11662 . -33) (undo-tree-id11663 . -33) (undo-tree-id11664 . -33) (undo-tree-id11665 . -33) (undo-tree-id11666 . -33) (undo-tree-id11667 . -33) (undo-tree-id11668 . -33) (undo-tree-id11669 . -33) (undo-tree-id11670 . -33) (undo-tree-id11671 . -33) (undo-tree-id11672 . -33) (undo-tree-id11673 . -33) (undo-tree-id11674 . -33) (undo-tree-id11675 . -33) (undo-tree-id11676 . -24) (undo-tree-id11677 . -24) (undo-tree-id11678 . -24) (undo-tree-id11679 . -24) (undo-tree-id11680 . -24) (undo-tree-id11681 . -24) (undo-tree-id11682 . -24) (undo-tree-id11683 . -24) (undo-tree-id11684 . -55) 6090) nil (25756 49151 620591 961000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6144) (undo-tree-id11602 . -1) (undo-tree-id11603 . -1) (undo-tree-id11604 . -1) (undo-tree-id11605 . -1) (undo-tree-id11606 . -1) (undo-tree-id11607 . -1) (undo-tree-id11608 . -1) (undo-tree-id11609 . -1) (undo-tree-id11610 . -1) (undo-tree-id11611 . -1) (undo-tree-id11612 . -1) (undo-tree-id11613 . -1) (undo-tree-id11614 . -1) (undo-tree-id11615 . -1) (undo-tree-id11616 . -1) (undo-tree-id11617 . -1) (undo-tree-id11618 . -1) (undo-tree-id11619 . -1) (undo-tree-id11620 . -1) (undo-tree-id11621 . -1) (undo-tree-id11622 . -1) (undo-tree-id11623 . -1) (undo-tree-id11624 . -1) (undo-tree-id11625 . -1) (undo-tree-id11626 . -1) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) (undo-tree-id11631 . -1) (undo-tree-id11632 . -1) (undo-tree-id11633 . -1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -1) (undo-tree-id11637 . -1) (undo-tree-id11638 . -1) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) (undo-tree-id11645 . -1) (undo-tree-id11646 . -1) (undo-tree-id11647 . -1) (undo-tree-id11648 . -1) (undo-tree-id11649 . -1) (undo-tree-id11650 . -1) (undo-tree-id11651 . -1) (undo-tree-id11652 . -1) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) (undo-tree-id11656 . -1) (undo-tree-id11657 . -1) (undo-tree-id11658 . -1)) nil (25756 49151 620571 624000) 0 nil])
([nil nil ((#("This can improve performance dramatically, as
is illustrated in Figure 13-3. " 0 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 45 46 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 48 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 49 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6146) (undo-tree-id11689 . -76) (undo-tree-id11690 . -76) (undo-tree-id11691 . -76) (undo-tree-id11692 . -77) (undo-tree-id11693 . -76) (undo-tree-id11694 . -45) (undo-tree-id11695 . -45) (undo-tree-id11696 . -45) (undo-tree-id11697 . -45) (undo-tree-id11698 . -45) (undo-tree-id11699 . -45) (undo-tree-id11700 . -45) (undo-tree-id11701 . -45) (undo-tree-id11702 . -45) (undo-tree-id11703 . -45) (undo-tree-id11704 . -45) (undo-tree-id11705 . -45) (undo-tree-id11706 . -45) (undo-tree-id11707 . -45) (undo-tree-id11708 . -45) (undo-tree-id11709 . -45) (undo-tree-id11710 . -45) (undo-tree-id11711 . -45) (undo-tree-id11712 . -45) (undo-tree-id11713 . -45) (undo-tree-id11714 . -45) (undo-tree-id11715 . -45) (undo-tree-id11716 . -45) (undo-tree-id11717 . -45) (undo-tree-id11718 . -45) (undo-tree-id11719 . -45) (undo-tree-id11720 . -45) (undo-tree-id11721 . -45) (undo-tree-id11722 . -45) (undo-tree-id11723 . -45) (undo-tree-id11724 . -45) (undo-tree-id11725 . -45) (undo-tree-id11726 . -45) (undo-tree-id11727 . -45) (undo-tree-id11728 . -45) (undo-tree-id11729 . -45) (undo-tree-id11730 . -45) (undo-tree-id11731 . -45) (undo-tree-id11732 . -45) (undo-tree-id11733 . -45) (undo-tree-id11734 . -45) (undo-tree-id11735 . -45) (undo-tree-id11736 . -45) (undo-tree-id11737 . -45) (undo-tree-id11738 . -45) (undo-tree-id11739 . -45) (undo-tree-id11740 . -45) (undo-tree-id11741 . -45) (undo-tree-id11742 . -45) (undo-tree-id11743 . -45) (undo-tree-id11744 . -45) (undo-tree-id11745 . -45) (undo-tree-id11746 . -45) (undo-tree-id11747 . -45) (undo-tree-id11748 . -45) (undo-tree-id11749 . -45) (undo-tree-id11750 . -45) (undo-tree-id11751 . -45) (undo-tree-id11752 . -46) (undo-tree-id11753 . -46) (undo-tree-id11754 . -46) (undo-tree-id11755 . -46) (undo-tree-id11756 . -46) (undo-tree-id11757 . -46) (undo-tree-id11758 . -46) (undo-tree-id11759 . -46) (undo-tree-id11760 . -47) (undo-tree-id11761 . -47) (undo-tree-id11762 . -47) (undo-tree-id11763 . -47) (undo-tree-id11764 . -47) (undo-tree-id11765 . -47) (undo-tree-id11766 . -47) (undo-tree-id11767 . -47) (undo-tree-id11768 . -48) (undo-tree-id11769 . -48) (undo-tree-id11770 . -48) (undo-tree-id11771 . -48) (undo-tree-id11772 . -48) (undo-tree-id11773 . -48) (undo-tree-id11774 . -48) (undo-tree-id11775 . -48) (undo-tree-id11776 . -49) (undo-tree-id11777 . -49) (undo-tree-id11778 . -49) (undo-tree-id11779 . -49) (undo-tree-id11780 . -49) (undo-tree-id11781 . -49) (undo-tree-id11782 . -49) (undo-tree-id11783 . -49) (undo-tree-id11784 . -50) (undo-tree-id11785 . -50) (undo-tree-id11786 . -50) (undo-tree-id11787 . -50) (undo-tree-id11788 . -50) (undo-tree-id11789 . -50) (undo-tree-id11790 . -50) (undo-tree-id11791 . -50) (undo-tree-id11792 . -51) (undo-tree-id11793 . -51) (undo-tree-id11794 . -51) (undo-tree-id11795 . -51) (undo-tree-id11796 . -51) (undo-tree-id11797 . -51) (undo-tree-id11798 . -51) (undo-tree-id11799 . -51) (undo-tree-id11800 . -52) (undo-tree-id11801 . -52) (undo-tree-id11802 . -52) (undo-tree-id11803 . -52) (undo-tree-id11804 . -52) (undo-tree-id11805 . -52) (undo-tree-id11806 . -52) (undo-tree-id11807 . -52) (undo-tree-id11808 . -53) (undo-tree-id11809 . -53) (undo-tree-id11810 . -53) (undo-tree-id11811 . -53) (undo-tree-id11812 . -53) (undo-tree-id11813 . -53) (undo-tree-id11814 . -53) (undo-tree-id11815 . -53) (undo-tree-id11816 . -54) (undo-tree-id11817 . -54) (undo-tree-id11818 . -54) (undo-tree-id11819 . -54) (undo-tree-id11820 . -54) (undo-tree-id11821 . -54) (undo-tree-id11822 . -54) (undo-tree-id11823 . -54) (undo-tree-id11824 . -55) (undo-tree-id11825 . -55) (undo-tree-id11826 . -55) (undo-tree-id11827 . -55) (undo-tree-id11828 . -55) (undo-tree-id11829 . -55) (undo-tree-id11830 . -55) (undo-tree-id11831 . -55) (undo-tree-id11832 . -56) (undo-tree-id11833 . -56) (undo-tree-id11834 . -56) (undo-tree-id11835 . -56) (undo-tree-id11836 . -56) (undo-tree-id11837 . -56) (undo-tree-id11838 . -56) (undo-tree-id11839 . -56) (undo-tree-id11840 . -57) (undo-tree-id11841 . -57) (undo-tree-id11842 . -57) (undo-tree-id11843 . -57) (undo-tree-id11844 . -57) (undo-tree-id11845 . -57) (undo-tree-id11846 . -57) (undo-tree-id11847 . -57) (undo-tree-id11848 . -58) (undo-tree-id11849 . -58) (undo-tree-id11850 . -58) (undo-tree-id11851 . -58) (undo-tree-id11852 . -58) (undo-tree-id11853 . -58) (undo-tree-id11854 . -58) (undo-tree-id11855 . -58) (undo-tree-id11856 . -59) (undo-tree-id11857 . -59) (undo-tree-id11858 . -59) (undo-tree-id11859 . -59) (undo-tree-id11860 . -59) (undo-tree-id11861 . -59) (undo-tree-id11862 . -59) (undo-tree-id11863 . -59) (undo-tree-id11864 . -60) (undo-tree-id11865 . -60) (undo-tree-id11866 . -60) (undo-tree-id11867 . -60) (undo-tree-id11868 . -60) (undo-tree-id11869 . -60) (undo-tree-id11870 . -60) (undo-tree-id11871 . -60) (undo-tree-id11872 . -61) (undo-tree-id11873 . -61) (undo-tree-id11874 . -61) (undo-tree-id11875 . -61) (undo-tree-id11876 . -61) (undo-tree-id11877 . -61) (undo-tree-id11878 . -61) (undo-tree-id11879 . -61) (undo-tree-id11880 . -62) (undo-tree-id11881 . -62) (undo-tree-id11882 . -62) (undo-tree-id11883 . -62) (undo-tree-id11884 . -62) (undo-tree-id11885 . -62) (undo-tree-id11886 . -62) (undo-tree-id11887 . -62) (undo-tree-id11888 . -63) (undo-tree-id11889 . -63) (undo-tree-id11890 . -63) (undo-tree-id11891 . -63) (undo-tree-id11892 . -63) (undo-tree-id11893 . -63) (undo-tree-id11894 . -63) (undo-tree-id11895 . -63) (undo-tree-id11896 . -64) (undo-tree-id11897 . -64) (undo-tree-id11898 . -64) (undo-tree-id11899 . -64) (undo-tree-id11900 . -64) (undo-tree-id11901 . -64) (undo-tree-id11902 . -64) (undo-tree-id11903 . -64) (undo-tree-id11904 . -65) (undo-tree-id11905 . -65) (undo-tree-id11906 . -65) (undo-tree-id11907 . -65) (undo-tree-id11908 . -65) (undo-tree-id11909 . -65) (undo-tree-id11910 . -65) (undo-tree-id11911 . -65) (undo-tree-id11912 . -66) (undo-tree-id11913 . -66) (undo-tree-id11914 . -66) (undo-tree-id11915 . -66) (undo-tree-id11916 . -66) (undo-tree-id11917 . -66) (undo-tree-id11918 . -66) (undo-tree-id11919 . -66) (undo-tree-id11920 . -67) (undo-tree-id11921 . -67) (undo-tree-id11922 . -67) (undo-tree-id11923 . -67) (undo-tree-id11924 . -67) (undo-tree-id11925 . -67) (undo-tree-id11926 . -67) (undo-tree-id11927 . -67) (undo-tree-id11928 . -68) (undo-tree-id11929 . -68) (undo-tree-id11930 . -68) (undo-tree-id11931 . -68) (undo-tree-id11932 . -68) (undo-tree-id11933 . -68) (undo-tree-id11934 . -68) (undo-tree-id11935 . -68) (undo-tree-id11936 . -69) (undo-tree-id11937 . -69) (undo-tree-id11938 . -69) (undo-tree-id11939 . -69) (undo-tree-id11940 . -69) (undo-tree-id11941 . -69) (undo-tree-id11942 . -69) (undo-tree-id11943 . -69) (undo-tree-id11944 . -70) (undo-tree-id11945 . -70) (undo-tree-id11946 . -70) (undo-tree-id11947 . -70) (undo-tree-id11948 . -70) (undo-tree-id11949 . -70) (undo-tree-id11950 . -70) (undo-tree-id11951 . -70) (undo-tree-id11952 . -71) (undo-tree-id11953 . -71) (undo-tree-id11954 . -71) (undo-tree-id11955 . -71) (undo-tree-id11956 . -71) (undo-tree-id11957 . -71) (undo-tree-id11958 . -71) (undo-tree-id11959 . -71) (undo-tree-id11960 . -72) (undo-tree-id11961 . -72) (undo-tree-id11962 . -72) (undo-tree-id11963 . -72) (undo-tree-id11964 . -72) (undo-tree-id11965 . -72) (undo-tree-id11966 . -72) (undo-tree-id11967 . -72) (undo-tree-id11968 . -73) (undo-tree-id11969 . -73) (undo-tree-id11970 . -73) (undo-tree-id11971 . -73) (undo-tree-id11972 . -73) (undo-tree-id11973 . -73) (undo-tree-id11974 . -73) (undo-tree-id11975 . -73) (undo-tree-id11976 . -74) (undo-tree-id11977 . -74) (undo-tree-id11978 . -74) (undo-tree-id11979 . -74) (undo-tree-id11980 . -74) (undo-tree-id11981 . -74) (undo-tree-id11982 . -74) (undo-tree-id11983 . -74) (undo-tree-id11984 . -75) (undo-tree-id11985 . -75) (undo-tree-id11986 . -75) (undo-tree-id11987 . -75) (undo-tree-id11988 . -75) (undo-tree-id11989 . -75) (undo-tree-id11990 . -75) (undo-tree-id11991 . -75) (undo-tree-id11992 . -76) (undo-tree-id11993 . -76) (undo-tree-id11994 . -76) (undo-tree-id11995 . -76) (undo-tree-id11996 . -76) (undo-tree-id11997 . -76) (undo-tree-id11998 . -76) (undo-tree-id11999 . -76) (undo-tree-id12000 . -76) (undo-tree-id12001 . -77) 6222 (t 25756 49151 635157 223000)) nil (25756 49167 916315 47000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6169) (nil fontified nil 6168 . 6169) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6168 . 6169) (6168 . 6169) 6146) nil (25756 49167 915913 473000) 0 nil])
([nil nil ((6194 . 6195) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6194) (undo-tree-id12002 . -1) 6169 (t 25756 49167 983534 374000)) nil (25756 49170 412957 658000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6249) (nil fontified nil 6248 . 6249) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6248 . 6249) (6248 . 6249) 6194) nil (25756 49170 412943 765000) 0 nil])
([nil nil ((6011 . 6012) (#("w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6011) (t 25756 49170 435590 800000)) nil (25756 49175 873951 75000) 0 nil])
([nil nil ((#("(by setting num_parallel_calls when
calling
interleave() and map())" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 16 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 23 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 25 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 36 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6213) (undo-tree-id12117 . -66) (undo-tree-id12118 . -1) (undo-tree-id12119 . -1) (undo-tree-id12120 . -1) (undo-tree-id12121 . -1) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) (undo-tree-id12129 . -1) (undo-tree-id12130 . -1) (undo-tree-id12131 . -1) (undo-tree-id12132 . -1) (undo-tree-id12133 . -1) (undo-tree-id12134 . -1) (undo-tree-id12135 . -1) (undo-tree-id12136 . -1) (undo-tree-id12137 . -1) (undo-tree-id12138 . -1) (undo-tree-id12139 . -1) (undo-tree-id12140 . -1) (undo-tree-id12141 . -1) (undo-tree-id12142 . -1) (undo-tree-id12143 . -1) (undo-tree-id12144 . -1) (undo-tree-id12145 . -1) (undo-tree-id12146 . -1) (undo-tree-id12147 . -1) (undo-tree-id12148 . -1) (undo-tree-id12149 . -1) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -1) (undo-tree-id12162 . -1) (undo-tree-id12163 . -1) (undo-tree-id12164 . -1) (undo-tree-id12165 . -1) (undo-tree-id12166 . -1) (undo-tree-id12167 . -1) (undo-tree-id12168 . -1) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1) (undo-tree-id12181 . -1) (undo-tree-id12182 . -1) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -1) (undo-tree-id12192 . -1) (undo-tree-id12193 . -67) (undo-tree-id12194 . -67) 6214 (t 25756 49175 887716 136000)) nil (25756 49207 35223 28000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6212) (undo-tree-id12003 . -1) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1) (undo-tree-id12006 . -1) (undo-tree-id12007 . -1) (undo-tree-id12008 . -1) (undo-tree-id12009 . -1) (undo-tree-id12010 . -1) (undo-tree-id12011 . -1) (undo-tree-id12012 . -1) (undo-tree-id12013 . -1) (undo-tree-id12014 . -1) (undo-tree-id12015 . -1) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (undo-tree-id12018 . -1) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) (undo-tree-id12027 . -1) (undo-tree-id12028 . -1) (undo-tree-id12029 . -1) (undo-tree-id12030 . -1) (undo-tree-id12031 . -1) (undo-tree-id12032 . -1) (undo-tree-id12033 . -1) (undo-tree-id12034 . -1) (undo-tree-id12035 . -1) (undo-tree-id12036 . -1) (undo-tree-id12037 . -1) (undo-tree-id12038 . -1) (undo-tree-id12039 . -1) (undo-tree-id12040 . -1) (undo-tree-id12041 . -1) (undo-tree-id12042 . -1) (undo-tree-id12043 . -1) (undo-tree-id12044 . -1) (undo-tree-id12045 . -1) (undo-tree-id12046 . -1) (undo-tree-id12047 . -1) (undo-tree-id12048 . -1) (undo-tree-id12049 . -1) (undo-tree-id12050 . -1) (undo-tree-id12051 . -1) (undo-tree-id12052 . -1) (undo-tree-id12053 . -1) (undo-tree-id12054 . -1) (undo-tree-id12055 . -1) (undo-tree-id12056 . -1) (undo-tree-id12057 . -1) (undo-tree-id12058 . -1) (undo-tree-id12059 . -1) (undo-tree-id12060 . -1) (undo-tree-id12061 . -1) (undo-tree-id12062 . -1) (undo-tree-id12063 . -1) (undo-tree-id12064 . -1) (undo-tree-id12065 . -1) (undo-tree-id12066 . -1) (undo-tree-id12067 . -1) (undo-tree-id12068 . -1) (undo-tree-id12069 . -1) (undo-tree-id12070 . -1) (undo-tree-id12071 . -1) (undo-tree-id12072 . -1) (undo-tree-id12073 . -1) (undo-tree-id12074 . -1) (undo-tree-id12075 . -1) (undo-tree-id12076 . -1) (undo-tree-id12077 . -1) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -1) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1) (undo-tree-id12100 . -1) (undo-tree-id12101 . -1) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) (undo-tree-id12106 . -1) (undo-tree-id12107 . -1) (undo-tree-id12108 . -1) (undo-tree-id12109 . -1) (undo-tree-id12110 . -1) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1)) nil (25756 49207 34929 372000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6247) (nil fontified nil 6246 . 6247) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6246 . 6247) (6246 . 6247) 6212 (t 25756 49207 52429 201000)) nil (25756 49217 681300 278000) 0 nil])
([nil nil ((6404 . 6405) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6404) (undo-tree-id12196 . -1) (6333 . 6334) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6333) (undo-tree-id12197 . -1) (6258 . 6259) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6258) (undo-tree-id12198 . 1) (undo-tree-id12199 . -1) (undo-tree-id12200 . -1) (undo-tree-id12201 . -1) (undo-tree-id12202 . -1) (undo-tree-id12203 . -1) (undo-tree-id12204 . -1) (undo-tree-id12205 . -1) (undo-tree-id12206 . -1) (undo-tree-id12207 . -1) (undo-tree-id12208 . -1) (undo-tree-id12209 . -1) (undo-tree-id12210 . -1) (undo-tree-id12211 . -1) (undo-tree-id12212 . -1) (undo-tree-id12213 . -1) (undo-tree-id12214 . -1) 6247) nil (25756 49217 681297 668000) 0 nil])
([nil nil ((6480 . 6481) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -6480) (undo-tree-id12195 . -1) 6404) nil (25756 49217 681280 267000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6486) (nil fontified nil 6485 . 6486) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6485 . 6486) (6485 . 6486) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -6405) (nil fontified nil 6404 . 6405) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6404 . 6405) (6404 . 6405) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -6325) (nil fontified nil 6324 . 6325) (nil wrap-prefix #("  " 0 2 (face org-indent)) 6324 . 6325) (6324 . 6325) 6480) nil (25756 49217 681265 307000) 0 nil])
([nil nil ((#("(except
for the data transfer time from the CPU to the GPU3)" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 7 8 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6397) (undo-tree-id12242 . -59) (undo-tree-id12243 . -8) (undo-tree-id12244 . -8) (undo-tree-id12245 . -8) (undo-tree-id12246 . -8) (undo-tree-id12247 . -8) (undo-tree-id12248 . -8) (undo-tree-id12249 . -8) (undo-tree-id12250 . -8) (undo-tree-id12251 . -60) 6351 (t 25756 49217 700671 565000)) nil (25756 49252 190143 485000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6397) (undo-tree-id12240 . -1) (undo-tree-id12241 . -1)) nil (25756 49252 190136 470000) 0 nil])
([nil nil ((#(" and training will run much" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 23 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6397) (undo-tree-id12237 . -26) (undo-tree-id12238 . -27) (undo-tree-id12239 . -27)) nil (25756 49252 190134 77000) 0 nil])
([nil nil ((#("faster.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6398) (undo-tree-id12215 . -7) (undo-tree-id12216 . -7) (undo-tree-id12217 . -6) (undo-tree-id12218 . -6) (undo-tree-id12219 . -6) (undo-tree-id12220 . -6) (undo-tree-id12221 . -6) (undo-tree-id12222 . -6) (undo-tree-id12223 . -6) (undo-tree-id12224 . -6) (undo-tree-id12225 . -6) (undo-tree-id12226 . -6) (undo-tree-id12227 . -6) (undo-tree-id12228 . -6) (undo-tree-id12229 . -6) (undo-tree-id12230 . -6) (undo-tree-id12231 . -6) (undo-tree-id12232 . -6) (undo-tree-id12233 . -6) (undo-tree-id12234 . -6) (undo-tree-id12235 . -6) (undo-tree-id12236 . -8) 6404) nil (25756 49252 190129 299000) 0 nil])
([nil nil ((6396 . 6397)) nil (25756 49252 190100 979000) 0 nil])
([nil nil ((#("TIP
" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12252 . -3) (undo-tree-id12253 . -2) (undo-tree-id12254 . -2) (undo-tree-id12255 . -2) (undo-tree-id12256 . -2) (undo-tree-id12257 . -2) (undo-tree-id12258 . -2) (undo-tree-id12259 . -2) (undo-tree-id12260 . -2) (undo-tree-id12261 . -2) (undo-tree-id12262 . -2) (undo-tree-id12263 . -2) (undo-tree-id12264 . -2) (undo-tree-id12265 . -2) (undo-tree-id12266 . -2) (undo-tree-id12267 . -2) (undo-tree-id12268 . -2) (undo-tree-id12269 . -2) (undo-tree-id12270 . -2) (undo-tree-id12271 . -2) (undo-tree-id12272 . -4) 6402 (t 25756 49252 257453 884000)) nil (25756 49262 365654 112000) 0 nil])
([nil nil ((#("If you plan to purchase a GPU card, its processing power and its memory size are of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12570 . -83) (undo-tree-id12571 . -2) (undo-tree-id12572 . -2) (undo-tree-id12573 . -2) (undo-tree-id12574 . -2) (undo-tree-id12575 . -2) (undo-tree-id12576 . -2) (undo-tree-id12577 . -2) (undo-tree-id12578 . -2) (undo-tree-id12579 . -2) (undo-tree-id12580 . -2) (undo-tree-id12581 . -2) (undo-tree-id12582 . -2) (undo-tree-id12583 . -2) (undo-tree-id12584 . -2) (undo-tree-id12585 . -2) (undo-tree-id12586 . -2) (undo-tree-id12587 . -2) (undo-tree-id12588 . -2) (undo-tree-id12589 . -2) (undo-tree-id12590 . -2) (undo-tree-id12591 . -2) (undo-tree-id12592 . -2) (undo-tree-id12593 . -2) (undo-tree-id12594 . -2) (undo-tree-id12595 . -2) (undo-tree-id12596 . -2) (undo-tree-id12597 . -2) (undo-tree-id12598 . -2) (undo-tree-id12599 . -2) (undo-tree-id12600 . -2) (undo-tree-id12601 . -2) (undo-tree-id12602 . -2) (undo-tree-id12603 . -2) (undo-tree-id12604 . -2) (undo-tree-id12605 . -2) (undo-tree-id12606 . -2) (undo-tree-id12607 . -2) (undo-tree-id12608 . -2) (undo-tree-id12609 . -2) (undo-tree-id12610 . -2) (undo-tree-id12611 . -2) (undo-tree-id12612 . -2) (undo-tree-id12613 . -2) (undo-tree-id12614 . -2) (undo-tree-id12615 . -2) (undo-tree-id12616 . -2) (undo-tree-id12617 . -2) (undo-tree-id12618 . -2) (undo-tree-id12619 . -2) (undo-tree-id12620 . -2) (undo-tree-id12621 . -2) (undo-tree-id12622 . -2) (undo-tree-id12623 . -2) (undo-tree-id12624 . -2) (undo-tree-id12625 . -2) (undo-tree-id12626 . -2) (undo-tree-id12627 . -2) (undo-tree-id12628 . -2) (undo-tree-id12629 . -2) (undo-tree-id12630 . -2) (undo-tree-id12631 . -2) (undo-tree-id12632 . -2) (undo-tree-id12633 . -2) (undo-tree-id12634 . -2) (undo-tree-id12635 . -2) (undo-tree-id12636 . -2) (undo-tree-id12637 . -2) (undo-tree-id12638 . -2) (undo-tree-id12639 . -2) (undo-tree-id12640 . -2) (undo-tree-id12641 . -2) (undo-tree-id12642 . -2) (undo-tree-id12643 . -2) (undo-tree-id12644 . -2) (undo-tree-id12645 . -2) (undo-tree-id12646 . -2) (undo-tree-id12647 . -2) (undo-tree-id12648 . -2) (undo-tree-id12649 . -2) (undo-tree-id12650 . -2) (undo-tree-id12651 . -2) (undo-tree-id12652 . -2) (undo-tree-id12653 . -2) (undo-tree-id12654 . -2) (undo-tree-id12655 . -2) (undo-tree-id12656 . -2) (undo-tree-id12657 . -2) (undo-tree-id12658 . -2) (undo-tree-id12659 . -2) (undo-tree-id12660 . -2) (undo-tree-id12661 . -2) (undo-tree-id12662 . -2) (undo-tree-id12663 . -2) (undo-tree-id12664 . -2) (undo-tree-id12665 . -2) (undo-tree-id12666 . -2) (undo-tree-id12667 . -2) (undo-tree-id12668 . -2) (undo-tree-id12669 . -2) (undo-tree-id12670 . -2) (undo-tree-id12671 . -2) (undo-tree-id12672 . -2) (undo-tree-id12673 . -2) (undo-tree-id12674 . -2) (undo-tree-id12675 . -2) (undo-tree-id12676 . -2) (undo-tree-id12677 . -2) (undo-tree-id12678 . -2) (undo-tree-id12679 . -2) (undo-tree-id12680 . -2) (undo-tree-id12681 . -2) (undo-tree-id12682 . -2) (undo-tree-id12683 . -2) (undo-tree-id12684 . -2) (undo-tree-id12685 . -2) (undo-tree-id12686 . -2) (undo-tree-id12687 . -2) (undo-tree-id12688 . -2) (undo-tree-id12689 . -2) (undo-tree-id12690 . -2) (undo-tree-id12691 . -2) (undo-tree-id12692 . -2) (undo-tree-id12693 . -2) (undo-tree-id12694 . -2) (undo-tree-id12695 . -2) (undo-tree-id12696 . -2) (undo-tree-id12697 . -2) (undo-tree-id12698 . -2) (undo-tree-id12699 . -2) (undo-tree-id12700 . -2) (undo-tree-id12701 . -2) (undo-tree-id12702 . -2) (undo-tree-id12703 . -2) (undo-tree-id12704 . -2) (undo-tree-id12705 . -2) (undo-tree-id12706 . -2) (undo-tree-id12707 . -2) (undo-tree-id12708 . -2) (undo-tree-id12709 . -2) (undo-tree-id12710 . -2) (undo-tree-id12711 . -2) (undo-tree-id12712 . -2) (undo-tree-id12713 . -2) (undo-tree-id12714 . -2) (undo-tree-id12715 . -2) (undo-tree-id12716 . -2) (undo-tree-id12717 . -2) (undo-tree-id12718 . -2) (undo-tree-id12719 . -2) (undo-tree-id12720 . -2) (undo-tree-id12721 . -2) (undo-tree-id12722 . -2) (undo-tree-id12723 . -2) (undo-tree-id12724 . -2) (undo-tree-id12725 . -2) (undo-tree-id12726 . -2) (undo-tree-id12727 . -2) (undo-tree-id12728 . -2) (undo-tree-id12729 . -2) (undo-tree-id12730 . -2) (undo-tree-id12731 . -2) (undo-tree-id12732 . -2) (undo-tree-id12733 . -2) (undo-tree-id12734 . -2) (undo-tree-id12735 . -2) (undo-tree-id12736 . -2) (undo-tree-id12737 . -2) (undo-tree-id12738 . -2) (undo-tree-id12739 . -2) (undo-tree-id12740 . -2) (undo-tree-id12741 . -2) (undo-tree-id12742 . -2) (undo-tree-id12743 . -2) (undo-tree-id12744 . -2) (undo-tree-id12745 . -2) (undo-tree-id12746 . -2) (undo-tree-id12747 . -2) (undo-tree-id12748 . -2) (undo-tree-id12749 . -2) (undo-tree-id12750 . -2) (undo-tree-id12751 . -2) (undo-tree-id12752 . -2) (undo-tree-id12753 . -2) (undo-tree-id12754 . -2) (undo-tree-id12755 . -2) (undo-tree-id12756 . -2) (undo-tree-id12757 . -2) (undo-tree-id12758 . -2) (undo-tree-id12759 . -84) 6402 (t 25756 49254 553505 642000)) nil (25756 49276 527226 546000) 0 nil] [nil nil ((#("If you plan to purchase a GPU card, its processing power and its memory size are of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12273 . -83) (undo-tree-id12274 . -2) (undo-tree-id12275 . -2) (undo-tree-id12276 . -2) (undo-tree-id12277 . -2) (undo-tree-id12278 . -2) (undo-tree-id12279 . -2) (undo-tree-id12280 . -2) (undo-tree-id12281 . -2) (undo-tree-id12282 . -2) (undo-tree-id12283 . -2) (undo-tree-id12284 . -2) (undo-tree-id12285 . -2) (undo-tree-id12286 . -2) (undo-tree-id12287 . -2) (undo-tree-id12288 . -2) (undo-tree-id12289 . -2) (undo-tree-id12290 . -2) (undo-tree-id12291 . -2) (undo-tree-id12292 . -2) (undo-tree-id12293 . -2) (undo-tree-id12294 . -2) (undo-tree-id12295 . -2) (undo-tree-id12296 . -2) (undo-tree-id12297 . -2) (undo-tree-id12298 . -2) (undo-tree-id12299 . -2) (undo-tree-id12300 . -2) (undo-tree-id12301 . -2) (undo-tree-id12302 . -2) (undo-tree-id12303 . -2) (undo-tree-id12304 . -2) (undo-tree-id12305 . -2) (undo-tree-id12306 . -2) (undo-tree-id12307 . -2) (undo-tree-id12308 . -2) (undo-tree-id12309 . -2) (undo-tree-id12310 . -2) (undo-tree-id12311 . -2) (undo-tree-id12312 . -2) (undo-tree-id12313 . -2) (undo-tree-id12314 . -2) (undo-tree-id12315 . -2) (undo-tree-id12316 . -2) (undo-tree-id12317 . -2) (undo-tree-id12318 . -2) (undo-tree-id12319 . -2) (undo-tree-id12320 . -2) (undo-tree-id12321 . -2) (undo-tree-id12322 . -2) (undo-tree-id12323 . -2) (undo-tree-id12324 . -2) (undo-tree-id12325 . -2) (undo-tree-id12326 . -2) (undo-tree-id12327 . -2) (undo-tree-id12328 . -2) (undo-tree-id12329 . -2) (undo-tree-id12330 . -2) (undo-tree-id12331 . -2) (undo-tree-id12332 . -2) (undo-tree-id12333 . -2) (undo-tree-id12334 . -2) (undo-tree-id12335 . -2) (undo-tree-id12336 . -2) (undo-tree-id12337 . -2) (undo-tree-id12338 . -2) (undo-tree-id12339 . -2) (undo-tree-id12340 . -2) (undo-tree-id12341 . -2) (undo-tree-id12342 . -2) (undo-tree-id12343 . -2) (undo-tree-id12344 . -2) (undo-tree-id12345 . -2) (undo-tree-id12346 . -2) (undo-tree-id12347 . -2) (undo-tree-id12348 . -2) (undo-tree-id12349 . -2) (undo-tree-id12350 . -2) (undo-tree-id12351 . -2) (undo-tree-id12352 . -2) (undo-tree-id12353 . -2) (undo-tree-id12354 . -2) (undo-tree-id12355 . -2) (undo-tree-id12356 . -2) (undo-tree-id12357 . -2) (undo-tree-id12358 . -2) (undo-tree-id12359 . -2) (undo-tree-id12360 . -2) (undo-tree-id12361 . -2) (undo-tree-id12362 . -2) (undo-tree-id12363 . -2) (undo-tree-id12364 . -2) (undo-tree-id12365 . -2) (undo-tree-id12366 . -2) (undo-tree-id12367 . -2) (undo-tree-id12368 . -2) (undo-tree-id12369 . -2) (undo-tree-id12370 . -2) (undo-tree-id12371 . -2) (undo-tree-id12372 . -2) (undo-tree-id12373 . -2) (undo-tree-id12374 . -2) (undo-tree-id12375 . -2) (undo-tree-id12376 . -2) (undo-tree-id12377 . -2) (undo-tree-id12378 . -2) (undo-tree-id12379 . -2) (undo-tree-id12380 . -2) (undo-tree-id12381 . -2) (undo-tree-id12382 . -2) (undo-tree-id12383 . -2) (undo-tree-id12384 . -2) (undo-tree-id12385 . -2) (undo-tree-id12386 . -2) (undo-tree-id12387 . -2) (undo-tree-id12388 . -2) (undo-tree-id12389 . -2) (undo-tree-id12390 . -2) (undo-tree-id12391 . -2) (undo-tree-id12392 . -2) (undo-tree-id12393 . -2) (undo-tree-id12394 . -2) (undo-tree-id12395 . -2) (undo-tree-id12396 . -2) (undo-tree-id12397 . -2) (undo-tree-id12398 . -2) (undo-tree-id12399 . -2) (undo-tree-id12400 . -2) (undo-tree-id12401 . -2) (undo-tree-id12402 . -2) (undo-tree-id12403 . -2) (undo-tree-id12404 . -2) (undo-tree-id12405 . -2) (undo-tree-id12406 . -2) (undo-tree-id12407 . -84) 6402 (t 25756 49254 553505 642000)) ((6400 . 6484)) (25756 49262 365161 336000) 0 nil])
([nil nil ((#("course very important (in particular, a large amount of RAM is crucial for computer
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12504 . -83) (undo-tree-id12505 . -2) (undo-tree-id12506 . -2) (undo-tree-id12507 . -2) (undo-tree-id12508 . -2) (undo-tree-id12509 . -2) (undo-tree-id12510 . -2) (undo-tree-id12511 . -2) (undo-tree-id12512 . -2) (undo-tree-id12513 . -2) (undo-tree-id12514 . -2) (undo-tree-id12515 . -2) (undo-tree-id12516 . -2) (undo-tree-id12517 . -2) (undo-tree-id12518 . -2) (undo-tree-id12519 . -2) (undo-tree-id12520 . -2) (undo-tree-id12521 . -2) (undo-tree-id12522 . -2) (undo-tree-id12523 . -2) (undo-tree-id12524 . -2) (undo-tree-id12525 . -2) (undo-tree-id12526 . -2) (undo-tree-id12527 . -2) (undo-tree-id12528 . -2) (undo-tree-id12529 . -2) (undo-tree-id12530 . -2) (undo-tree-id12531 . -2) (undo-tree-id12532 . -2) (undo-tree-id12533 . -2) (undo-tree-id12534 . -2) (undo-tree-id12535 . -2) (undo-tree-id12536 . -2) (undo-tree-id12537 . -2) (undo-tree-id12538 . -2) (undo-tree-id12539 . -2) (undo-tree-id12540 . -2) (undo-tree-id12541 . -2) (undo-tree-id12542 . -2) (undo-tree-id12543 . -2) (undo-tree-id12544 . -2) (undo-tree-id12545 . -2) (undo-tree-id12546 . -2) (undo-tree-id12547 . -2) (undo-tree-id12548 . -2) (undo-tree-id12549 . -2) (undo-tree-id12550 . -2) (undo-tree-id12551 . -2) (undo-tree-id12552 . -2) (undo-tree-id12553 . -2) (undo-tree-id12554 . -2) (undo-tree-id12555 . -2) (undo-tree-id12556 . -2) (undo-tree-id12557 . -2) (undo-tree-id12558 . -2) (undo-tree-id12559 . -2) (undo-tree-id12560 . -2) (undo-tree-id12561 . -2) (undo-tree-id12562 . -2) (undo-tree-id12563 . -2) (undo-tree-id12564 . -2) (undo-tree-id12565 . -2) (undo-tree-id12566 . -2) (undo-tree-id12567 . -2) (undo-tree-id12568 . -2) (undo-tree-id12569 . -84) 6402) nil (25756 49276 527104 303000) 0 nil])
nil
([nil nil ((#("sion)" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6402) (undo-tree-id12502 . -4) (undo-tree-id12503 . -5)) nil (25756 49276 527058 113000) 0 nil])
([nil nil ((#("v" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12499 . -1) (undo-tree-id12500 . -1) (undo-tree-id12501 . -1)) nil (25756 49276 527055 693000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12412 . -1) (undo-tree-id12413 . -1) (undo-tree-id12414 . -1) (undo-tree-id12415 . -1) (undo-tree-id12416 . -1) (undo-tree-id12417 . -1) (undo-tree-id12418 . -1) (undo-tree-id12419 . -1) (undo-tree-id12420 . -1) (undo-tree-id12421 . -1) (undo-tree-id12422 . -1) (undo-tree-id12423 . -1) (undo-tree-id12424 . -1) (undo-tree-id12425 . -1) (undo-tree-id12426 . -1) (undo-tree-id12427 . -1) (undo-tree-id12428 . -1) (undo-tree-id12429 . -1) (undo-tree-id12430 . -1) (undo-tree-id12431 . -1) (undo-tree-id12432 . -1) (undo-tree-id12433 . -1) (undo-tree-id12434 . -1) (undo-tree-id12435 . -1) (undo-tree-id12436 . -1) (undo-tree-id12437 . -1) (undo-tree-id12438 . -1) (undo-tree-id12439 . -1) (undo-tree-id12440 . -1) (undo-tree-id12441 . -1) (undo-tree-id12442 . -1) (undo-tree-id12443 . -1) (undo-tree-id12444 . -1) (undo-tree-id12445 . -1) (undo-tree-id12446 . -1) (undo-tree-id12447 . -1) (undo-tree-id12448 . -1) (undo-tree-id12449 . -1) (undo-tree-id12450 . -1) (undo-tree-id12451 . -1) (undo-tree-id12452 . -1) (undo-tree-id12453 . -1) (undo-tree-id12454 . -1) (undo-tree-id12455 . -1) (undo-tree-id12456 . -1) (undo-tree-id12457 . -1) (undo-tree-id12458 . -1) (undo-tree-id12459 . -1) (undo-tree-id12460 . -1) (undo-tree-id12461 . -1) (undo-tree-id12462 . -1) (undo-tree-id12463 . -1) (undo-tree-id12464 . -1) (undo-tree-id12465 . -1) (undo-tree-id12466 . -1) (undo-tree-id12467 . -1) (undo-tree-id12468 . -1) (undo-tree-id12469 . -1) (undo-tree-id12470 . -1) (undo-tree-id12471 . -1) (undo-tree-id12472 . -1) (undo-tree-id12473 . -1) (undo-tree-id12474 . -1) (undo-tree-id12475 . -1) (undo-tree-id12476 . -1) (undo-tree-id12477 . -1) (undo-tree-id12478 . -1) (undo-tree-id12479 . -1) (undo-tree-id12480 . -1) (undo-tree-id12481 . -1) (undo-tree-id12482 . -1) (undo-tree-id12483 . -1) (undo-tree-id12484 . -1) (undo-tree-id12485 . -1) (undo-tree-id12486 . -1) (undo-tree-id12487 . -1) (undo-tree-id12488 . -1) (undo-tree-id12489 . -1) (undo-tree-id12490 . -1) (undo-tree-id12491 . -1) (undo-tree-id12492 . -1) (undo-tree-id12493 . -1) (undo-tree-id12494 . -1) (undo-tree-id12495 . -1) (undo-tree-id12496 . -1) (undo-tree-id12497 . -1) (undo-tree-id12498 . -1)) nil (25756 49276 527050 207000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12410 . -1) (undo-tree-id12411 . -1)) nil (25756 49276 526919 270000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 6400) (undo-tree-id12408 . -1) (undo-tree-id12409 . -1)) nil (25756 49276 526913 803000) 0 nil])
([nil nil ((#("Just as important to get good performance is its memory bandwidth; this is
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12762 . -74) (undo-tree-id12763 . -75) (t 25756 49276 541999 953000)) nil (25756 49287 327442 736000) 0 nil])
([nil nil ((#("the number of gigabytes of data it can get into or out of its RAM per second.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6400) (undo-tree-id12760 . -77) (undo-tree-id12761 . -78)) nil (25756 49287 327437 99000) 0 nil])
([nil nil ((6556 . 6558) (t 25756 49287 394243 37000)) nil (25756 49300 584955 672000) 0 nil])
([nil nil ((#("You should generally do this after loading and preprocessing the
" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12770 . -64) (undo-tree-id12771 . 65) (undo-tree-id12772 . -65) (t 25756 49300 606538 218000)) nil (25756 49313 197472 887000) 0 nil])
([nil nil ((#("data, but before shuffling, repeating, batching, and prefetching. This way,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12767 . -75) (undo-tree-id12768 . 76) (undo-tree-id12769 . -76)) nil (25756 49313 197691 696000) 0 nil])
([nil nil ((#("each instance will only be read and preprocessed once (instead of once perepoch), but the data will still be shuffled differently at each epoch, and the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12784 . -152) (undo-tree-id12785 . 153) (undo-tree-id12786 . -153)) nil (25756 49330 502419 980000) 0 nil] [nil nil ((#("each instance will only be read and preprocessed once (instead of once perepoch), but the data will still be shuffled differently at each epoch, and the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12764 . -152) (undo-tree-id12765 . 153) (undo-tree-id12766 . -153)) ((6558 . 6711)) (25756 49313 197463 110000) 0 nil])
([nil nil ((#("next batch will still be prepared in advance.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12781 . -45) (undo-tree-id12782 . 46) (undo-tree-id12783 . -46)) nil (25756 49330 502416 879000) 0 nil])
nil
([nil nil ((#("You now know how to build efficient input pipelines to load and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12778 . -63) (undo-tree-id12779 . 64) (undo-tree-id12780 . -64)) nil (25756 49330 502413 358000) 0 nil])
([nil nil ((#("preprocess data from multiple text files. We have discussed the most
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12773 . -68) (undo-tree-id12774 . 69) (undo-tree-id12775 . 69) (undo-tree-id12776 . -10) (undo-tree-id12777 . -69)) nil (25756 49338 89514 825000) 0 nil])
([nil nil ((#("common dataset methods, but there are a few more you may want to look
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12796 . -69) (undo-tree-id12797 . 70) (undo-tree-id12798 . -70) (t 25756 49330 519203 519000)) nil (25756 49342 792763 520000) 0 nil] [nil nil ((#("common dataset methods, but there are a few more you may want to look
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12787 . -69) (undo-tree-id12788 . 70) (undo-tree-id12789 . -70) (t 25756 49330 519203 519000)) ((6558 . 6628)) (25756 49338 88976 887000) 0 nil])
([nil nil ((#("at: concatenate(), zip(), window(), reduce(), shard(), flat_map(),
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 22 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 60 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 63 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12793 . -66) (undo-tree-id12794 . 67) (undo-tree-id12795 . -67)) nil (25756 49342 793205 777000) 0 nil])
nil
([nil nil ((#("and padded_batch(). There are also a couple more class methods:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 11 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 16 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13164 . -63) (undo-tree-id13165 . 64) (undo-tree-id13166 . -64)) nil (25756 49391 698859 310000) 0 nil] [nil nil ((#("and padded_batch(). There are also a couple more class methods:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 11 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 16 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id12790 . -63) (undo-tree-id12791 . 64) (undo-tree-id12792 . -64)) ((6558 . 6622)) (25756 49342 792747 668000) 0 nil])
([nil nil ((#("from_generator() and from_tensors(), which create a new dataset
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 5 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 14 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 26 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 33 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13161 . -63) (undo-tree-id13162 . 64) (undo-tree-id13163 . -64)) nil (25756 49391 698856 704000) 0 nil])
nil
([nil nil ((#("from a Python generator or a list of tensors, respectively. Please check the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13158 . -76) (undo-tree-id13159 . 77) (undo-tree-id13160 . -77)) nil (25756 49391 698854 47000) 0 nil])
([nil nil ((#("API documentation for more details. Also note that there are experimental
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13155 . -73) (undo-tree-id13156 . 74) (undo-tree-id13157 . -74)) nil (25756 49391 698851 532000) 0 nil])
([nil nil ((#("features available in tf.data.experimental, many of which will likely
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13152 . -69) (undo-tree-id13153 . 70) (undo-tree-id13154 . -70)) nil (25756 49391 698847 496000) 0 nil])
([nil nil ((#("make it to the core API in future releases (e.g., check out the CsvDataset
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13149 . -74) (undo-tree-id13150 . 75) (undo-tree-id13151 . -75)) nil (25756 49391 698845 106000) 0 nil])
([nil nil ((#("class, as well as the make_csv_dataset() method, which takes care of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 27 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 31 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 38 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13146 . -68) (undo-tree-id13147 . 69) (undo-tree-id13148 . -69)) nil (25756 49391 698842 500000) 0 nil])
([nil nil ((#("inferring the type of each column).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 7 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13143 . -35) (undo-tree-id13144 . 36) (undo-tree-id13145 . -36)) nil (25756 49391 698840 273000) 0 nil])
([nil nil ((#("Using the Dataset with tf.keras
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13140 . -31) (undo-tree-id13141 . 32) (undo-tree-id13142 . -32)) nil (25756 49391 698837 820000) 0 nil])
([nil nil ((#("Now we can use the csv_reader_dataset() function to create a dataset
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 22 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 23 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 30 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 37 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13137 . -68) (undo-tree-id13138 . 69) (undo-tree-id13139 . -69)) nil (25756 49391 698835 474000) 0 nil])
([nil nil ((#("for the training set. Note that we do not need to repeat it, as this will be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13134 . -76) (undo-tree-id13135 . 77) (undo-tree-id13136 . -77)) nil (25756 49391 698833 49000) 0 nil])
([nil nil ((#("taken care of by tf.keras. We also create datasets for the validation set and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13131 . -77) (undo-tree-id13132 . 78) (undo-tree-id13133 . -78)) nil (25756 49391 698828 967000) 0 nil])
([nil nil ((#("the test set:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13128 . -13) (undo-tree-id13129 . 14) (undo-tree-id13130 . -14)) nil (25756 49391 698826 493000) 0 nil])
([nil nil ((6570 . 6576) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6570 6576 nil nil nil t #s(yas--exit 6594 nil))) #s(yas--exit 6594 nil) 11 nil #s(yas--field 1 6570 6576 nil nil nil t #s(yas--exit 6594 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -6588) (undo-tree-id13078 . -2) (6558 . 6601) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6558) (undo-tree-id13079 . -1) (undo-tree-id13080 . -2) (undo-tree-id13081 . -1) (undo-tree-id13082 . -1) (undo-tree-id13083 . -1) (undo-tree-id13084 . -1) (undo-tree-id13085 . -1) (undo-tree-id13086 . -1) (undo-tree-id13087 . -1) (undo-tree-id13088 . -1) (undo-tree-id13089 . -1) (undo-tree-id13090 . -1) (undo-tree-id13091 . -1) (undo-tree-id13092 . -1) (undo-tree-id13093 . -1) (undo-tree-id13094 . -1) (undo-tree-id13095 . -1) (undo-tree-id13096 . -1) (undo-tree-id13097 . -1) (undo-tree-id13098 . -1) (undo-tree-id13099 . -1) (undo-tree-id13100 . -1) (undo-tree-id13101 . -1) (undo-tree-id13102 . -1) (undo-tree-id13103 . -1) (undo-tree-id13104 . -1) (undo-tree-id13105 . -1) (undo-tree-id13106 . -1) (undo-tree-id13107 . -1) (undo-tree-id13108 . -1) (undo-tree-id13109 . -1) (undo-tree-id13110 . -1) (undo-tree-id13111 . -1) (undo-tree-id13112 . -1) (undo-tree-id13113 . -1) (undo-tree-id13114 . -1) (undo-tree-id13115 . -1) (undo-tree-id13116 . -1) (undo-tree-id13117 . -2) (undo-tree-id13118 . -2) (undo-tree-id13119 . -2) (undo-tree-id13120 . -2) (undo-tree-id13121 . -2) (undo-tree-id13122 . -2) (undo-tree-id13123 . -2) (undo-tree-id13124 . -2) (undo-tree-id13125 . -2) (undo-tree-id13126 . -2) (undo-tree-id13127 . -2) 6560 (6558 . 6560) (6557 . 6558)) nil (25756 49391 698821 986000) 0 nil])
([nil nil ((apply yas--snippet-revive 6558 6605 #s(yas--snippet nil (#s(yas--field 1 6570 6576 nil nil nil t #s(yas--exit 6594 nil))) #s(yas--exit 6594 nil) 11 nil #s(yas--field 1 6570 6576 nil nil nil t #s(yas--exit 6594 nil)) nil nil))) nil (25756 49391 698790 761000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6593) (undo-tree-id13077 . -1)) nil (25756 49391 698789 942000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6593) (undo-tree-id13076 . -1)) nil (25756 49391 698788 531000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6593) (undo-tree-id13075 . -1)) nil (25756 49391 698786 998000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 6593) (undo-tree-id12799 . -9) (undo-tree-id12800 . -10) (undo-tree-id12801 . -10) (undo-tree-id12802 . -10) (undo-tree-id12803 . -10) (undo-tree-id12804 . -10) (undo-tree-id12805 . -10) (undo-tree-id12806 . -10) (undo-tree-id12807 . -10) (undo-tree-id12808 . -10) (undo-tree-id12809 . -10) (undo-tree-id12810 . -10) (undo-tree-id12811 . -10) (undo-tree-id12812 . -10) (undo-tree-id12813 . -10) (undo-tree-id12814 . -10) (undo-tree-id12815 . -10) (undo-tree-id12816 . -10) (undo-tree-id12817 . -10) (undo-tree-id12818 . -10) (undo-tree-id12819 . -10) (undo-tree-id12820 . -10) (undo-tree-id12821 . -10) (undo-tree-id12822 . -10) (undo-tree-id12823 . -10) (undo-tree-id12824 . -10) (undo-tree-id12825 . -10) (undo-tree-id12826 . -10) (undo-tree-id12827 . -10) (undo-tree-id12828 . -10) (undo-tree-id12829 . -10) (undo-tree-id12830 . -10) (undo-tree-id12831 . -10) (undo-tree-id12832 . -10) (undo-tree-id12833 . -10) (undo-tree-id12834 . -10) (undo-tree-id12835 . -10) (undo-tree-id12836 . -10) (undo-tree-id12837 . -10) (undo-tree-id12838 . -10) (undo-tree-id12839 . -10) (undo-tree-id12840 . -10) (undo-tree-id12841 . -10) (undo-tree-id12842 . -10) (undo-tree-id12843 . -10) (undo-tree-id12844 . -10) (undo-tree-id12845 . -10) (undo-tree-id12846 . -10) (undo-tree-id12847 . -10) (undo-tree-id12848 . -10) (undo-tree-id12849 . -10) (undo-tree-id12850 . -10) (undo-tree-id12851 . -10) (undo-tree-id12852 . -10) (undo-tree-id12853 . -10) (undo-tree-id12854 . -10) (undo-tree-id12855 . -10) (undo-tree-id12856 . -10) (undo-tree-id12857 . -10) (undo-tree-id12858 . -10) (undo-tree-id12859 . -10) (undo-tree-id12860 . -10) (undo-tree-id12861 . -10) (undo-tree-id12862 . -10) (undo-tree-id12863 . -10) (undo-tree-id12864 . -10) (undo-tree-id12865 . -10) (undo-tree-id12866 . -10) (undo-tree-id12867 . -10) (undo-tree-id12868 . -10) (undo-tree-id12869 . -10) (undo-tree-id12870 . -10) (undo-tree-id12871 . -10) (undo-tree-id12872 . -10) (undo-tree-id12873 . -10) (undo-tree-id12874 . -10) (undo-tree-id12875 . -10) (undo-tree-id12876 . -10) (undo-tree-id12877 . -10) (undo-tree-id12878 . -10) (undo-tree-id12879 . -10) (undo-tree-id12880 . -10) (undo-tree-id12881 . -10) (undo-tree-id12882 . -10) (undo-tree-id12883 . -10) (undo-tree-id12884 . -10) (undo-tree-id12885 . -10) (undo-tree-id12886 . -10) (undo-tree-id12887 . -10) (undo-tree-id12888 . -10) (undo-tree-id12889 . -10) (undo-tree-id12890 . -10) (undo-tree-id12891 . -10) (undo-tree-id12892 . -10) (undo-tree-id12893 . -10) (undo-tree-id12894 . -10) (undo-tree-id12895 . -10) (undo-tree-id12896 . -10) (undo-tree-id12897 . -10) (undo-tree-id12898 . -10) (undo-tree-id12899 . -10) (undo-tree-id12900 . -10) (undo-tree-id12901 . -10) (undo-tree-id12902 . -10) (undo-tree-id12903 . -10) (undo-tree-id12904 . -10) (undo-tree-id12905 . -10) (undo-tree-id12906 . -10) (undo-tree-id12907 . -10) (undo-tree-id12908 . -10) (undo-tree-id12909 . -10) (undo-tree-id12910 . -10) (undo-tree-id12911 . -10) (undo-tree-id12912 . -10) (undo-tree-id12913 . -10) (undo-tree-id12914 . -10) (undo-tree-id12915 . -10) (undo-tree-id12916 . -10) (undo-tree-id12917 . -10) (undo-tree-id12918 . -10) (undo-tree-id12919 . -10) (undo-tree-id12920 . -10) (undo-tree-id12921 . -10) (undo-tree-id12922 . -10) (undo-tree-id12923 . -10) (undo-tree-id12924 . -10) (undo-tree-id12925 . -10) (undo-tree-id12926 . -10) (undo-tree-id12927 . -10) (undo-tree-id12928 . -10) (undo-tree-id12929 . -10) (undo-tree-id12930 . -10) (undo-tree-id12931 . -10) (undo-tree-id12932 . -10) (undo-tree-id12933 . -10) (undo-tree-id12934 . -10) (undo-tree-id12935 . -10) (undo-tree-id12936 . -10) (undo-tree-id12937 . -10) (undo-tree-id12938 . -10) (undo-tree-id12939 . -10) (undo-tree-id12940 . -10) (undo-tree-id12941 . -10) (undo-tree-id12942 . -10) (undo-tree-id12943 . -10) (undo-tree-id12944 . -10) (undo-tree-id12945 . -10) (undo-tree-id12946 . -10) (undo-tree-id12947 . -10) (undo-tree-id12948 . -10) (undo-tree-id12949 . -10) (undo-tree-id12950 . -10) (undo-tree-id12951 . -10) (undo-tree-id12952 . -10) (undo-tree-id12953 . -10) (undo-tree-id12954 . -10) (undo-tree-id12955 . -10) (undo-tree-id12956 . -10) (undo-tree-id12957 . -10) (undo-tree-id12958 . -10) (undo-tree-id12959 . -10) (undo-tree-id12960 . -10) (undo-tree-id12961 . -10) (undo-tree-id12962 . -10) (undo-tree-id12963 . -10) (undo-tree-id12964 . -10) (undo-tree-id12965 . -10) (undo-tree-id12966 . -10) (undo-tree-id12967 . -10) (undo-tree-id12968 . -10) (undo-tree-id12969 . -10) (undo-tree-id12970 . -10) (undo-tree-id12971 . -10) (undo-tree-id12972 . -10) (undo-tree-id12973 . -10) (undo-tree-id12974 . -10) (undo-tree-id12975 . -10) (undo-tree-id12976 . -10) (undo-tree-id12977 . -10) (undo-tree-id12978 . -10) (undo-tree-id12979 . -10) (undo-tree-id12980 . -10) (undo-tree-id12981 . -10) (undo-tree-id12982 . -10) (undo-tree-id12983 . -10) (undo-tree-id12984 . -10) (undo-tree-id12985 . -10) (undo-tree-id12986 . -10) (undo-tree-id12987 . -10) (undo-tree-id12988 . -10) (undo-tree-id12989 . -10) (undo-tree-id12990 . -10) (undo-tree-id12991 . -10) (undo-tree-id12992 . -10) (undo-tree-id12993 . -10) (undo-tree-id12994 . -10) (undo-tree-id12995 . -10) (undo-tree-id12996 . -10) (undo-tree-id12997 . -10) (undo-tree-id12998 . -10) (undo-tree-id12999 . -10) (undo-tree-id13000 . -10) (undo-tree-id13001 . -10) (undo-tree-id13002 . -10) (undo-tree-id13003 . -10) (undo-tree-id13004 . -10) (undo-tree-id13005 . -10) (undo-tree-id13006 . -10) (undo-tree-id13007 . -10) (undo-tree-id13008 . -10) (undo-tree-id13009 . -10) (undo-tree-id13010 . -10) (undo-tree-id13011 . -10) (undo-tree-id13012 . -10) (undo-tree-id13013 . -10) (undo-tree-id13014 . -10) (undo-tree-id13015 . -10) (undo-tree-id13016 . -10) (undo-tree-id13017 . -10) (undo-tree-id13018 . -10) (undo-tree-id13019 . -10) (undo-tree-id13020 . -10) (undo-tree-id13021 . -10) (undo-tree-id13022 . -10) (undo-tree-id13023 . -10) (undo-tree-id13024 . -10) (undo-tree-id13025 . -10) (undo-tree-id13026 . -10) (undo-tree-id13027 . -10) (undo-tree-id13028 . -10) (undo-tree-id13029 . -10) (undo-tree-id13030 . -10) (undo-tree-id13031 . -10) (undo-tree-id13032 . -10) (undo-tree-id13033 . -10) (undo-tree-id13034 . -10) (undo-tree-id13035 . -10) (undo-tree-id13036 . -10) (undo-tree-id13037 . -10) (undo-tree-id13038 . -10) (undo-tree-id13039 . -10) (undo-tree-id13040 . -10) (undo-tree-id13041 . -10) (undo-tree-id13042 . -10) (undo-tree-id13043 . -10) (undo-tree-id13044 . -10) (undo-tree-id13045 . -10) (undo-tree-id13046 . -10) (undo-tree-id13047 . -10) (undo-tree-id13048 . -10) (undo-tree-id13049 . -10) (undo-tree-id13050 . -10) (undo-tree-id13051 . -10) (undo-tree-id13052 . -10) (undo-tree-id13053 . -10) (undo-tree-id13054 . -10) (undo-tree-id13055 . -10) (undo-tree-id13056 . -10) (undo-tree-id13057 . -10) (undo-tree-id13058 . -10) (undo-tree-id13059 . -10) (undo-tree-id13060 . -10) (undo-tree-id13061 . -10) (undo-tree-id13062 . -10) (undo-tree-id13063 . -10) (undo-tree-id13064 . -9) (undo-tree-id13065 . -9) (undo-tree-id13066 . -9) (undo-tree-id13067 . -9) (undo-tree-id13068 . -9) (undo-tree-id13069 . -9) (undo-tree-id13070 . -9) (undo-tree-id13071 . -9) (undo-tree-id13072 . -9) (undo-tree-id13073 . -9) (undo-tree-id13074 . -10)) nil (25756 49391 698775 548000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6734 . 6735) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6744) (6734 . 6745) 6689) nil (25756 49391 698252 87000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6955 . 6956) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -6990) (6955 . 6991) 6886 (t 25756 49391 716552 554000)) nil (25756 49412 887937 509000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7278 . 7279) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7313) (7278 . 7314) 7208) nil (25756 49412 887936 9000) 0 nil])
([nil nil ((#("b" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7281) (undo-tree-id13176 . -1) (undo-tree-id13177 . -1)) nil (25756 49412 887934 715000) 0 nil])
([nil nil ((#("e" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line)) . 7281) (undo-tree-id13174 . -1) (undo-tree-id13175 . -1)) nil (25756 49412 887930 618000) 0 nil])
([nil nil ((#("g" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line)) . 7281) (undo-tree-id13172 . -1) (undo-tree-id13173 . -1)) nil (25756 49412 887928 33000) 0 nil])
([nil nil ((#("i" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line)) . 7281) (undo-tree-id13170 . -1) (undo-tree-id13171 . -1)) nil (25756 49412 887925 16000) 0 nil])
([nil nil ((7281 . 7284) (#("n" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line)) . 7281) (undo-tree-id13167 . -1) (undo-tree-id13168 . -1) (undo-tree-id13169 . -1)) nil (25756 49412 887919 304000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line font-lock-multiline t) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 6735) (undo-tree-id13360 . -9) (undo-tree-id13361 . -8) (undo-tree-id13362 . -4) (undo-tree-id13363 . -4) (undo-tree-id13364 . -4) (undo-tree-id13365 . -4) (undo-tree-id13366 . -4) (undo-tree-id13367 . -4) (undo-tree-id13368 . -4) (undo-tree-id13369 . -4) (undo-tree-id13370 . -2) (undo-tree-id13371 . -5) (undo-tree-id13372 . -6) (undo-tree-id13373 . -10) (undo-tree-id13374 . -10) (undo-tree-id13375 . -10) (undo-tree-id13376 . -10) (undo-tree-id13377 . -10) (undo-tree-id13378 . -10) (undo-tree-id13379 . -10) (undo-tree-id13380 . -10) (undo-tree-id13381 . -8) (undo-tree-id13382 . -8) (undo-tree-id13383 . -8) (undo-tree-id13384 . -8) (undo-tree-id13385 . -8) (undo-tree-id13386 . -8) (undo-tree-id13387 . -8) (undo-tree-id13388 . -8) (undo-tree-id13389 . -8) (undo-tree-id13390 . -8) (undo-tree-id13391 . -8) (undo-tree-id13392 . -8) (undo-tree-id13393 . -8) (undo-tree-id13394 . -8) (undo-tree-id13395 . -8) (undo-tree-id13396 . -8) (undo-tree-id13397 . -8) (undo-tree-id13398 . -8) (undo-tree-id13399 . -10) 6743 (t 25756 49412 909016 210000)) nil (25756 49431 259178 132000) 0 nil])
([nil nil ((#("And now we can simply build and train a Keras model using these
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 28 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t) 31 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 6735) (undo-tree-id13294 . -63) (undo-tree-id13295 . -8) (undo-tree-id13296 . -4) (undo-tree-id13297 . -4) (undo-tree-id13298 . -4) (undo-tree-id13299 . -4) (undo-tree-id13300 . -4) (undo-tree-id13301 . -4) (undo-tree-id13302 . -4) (undo-tree-id13303 . -4) (undo-tree-id13304 . -4) (undo-tree-id13305 . -8) (undo-tree-id13306 . -11) (undo-tree-id13307 . -15) (undo-tree-id13308 . -22) (undo-tree-id13309 . -28) (undo-tree-id13310 . -32) (undo-tree-id13311 . -38) (undo-tree-id13312 . -40) (undo-tree-id13313 . -40) (undo-tree-id13314 . -40) (undo-tree-id13315 . -40) (undo-tree-id13316 . -40) (undo-tree-id13317 . -40) (undo-tree-id13318 . -40) (undo-tree-id13319 . -40) (undo-tree-id13320 . -46) (undo-tree-id13321 . -52) (undo-tree-id13322 . -58) (undo-tree-id13323 . -64) (undo-tree-id13324 . -64) (undo-tree-id13325 . -64) (undo-tree-id13326 . -64) (undo-tree-id13327 . -64) (undo-tree-id13328 . -64) (undo-tree-id13329 . -64) (undo-tree-id13330 . -64) (undo-tree-id13331 . -18) (undo-tree-id13332 . -18) (undo-tree-id13333 . -18) (undo-tree-id13334 . -18) (undo-tree-id13335 . -18) (undo-tree-id13336 . -18) (undo-tree-id13337 . -18) (undo-tree-id13338 . -18) (undo-tree-id13339 . -8) (undo-tree-id13340 . -8) (undo-tree-id13341 . -8) (undo-tree-id13342 . -8) (undo-tree-id13343 . -8) (undo-tree-id13344 . -8) (undo-tree-id13345 . -8) (undo-tree-id13346 . -8) (undo-tree-id13347 . -8) (undo-tree-id13348 . -8) (undo-tree-id13349 . -8) (undo-tree-id13350 . -8) (undo-tree-id13351 . -8) (undo-tree-id13352 . -8) (undo-tree-id13353 . -8) (undo-tree-id13354 . -8) (undo-tree-id13355 . -8) (undo-tree-id13356 . -8) (undo-tree-id13357 . -8) (undo-tree-id13358 . -8) (undo-tree-id13359 . -64) 6743) nil (25756 49431 259103 19000) 0 nil])
([nil nil ((#("datasets.4 All we need to do is pass the training and validation datasets to
" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 24 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 29 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 31 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 32 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 36 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 50 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 53 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 76 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6735) (undo-tree-id13248 . -76) (undo-tree-id13249 . -8) (undo-tree-id13250 . -4) (undo-tree-id13251 . -4) (undo-tree-id13252 . -4) (undo-tree-id13253 . -4) (undo-tree-id13254 . -4) (undo-tree-id13255 . -4) (undo-tree-id13256 . -4) (undo-tree-id13257 . -4) (undo-tree-id13258 . -8) (undo-tree-id13259 . -9) (undo-tree-id13260 . -11) (undo-tree-id13261 . -15) (undo-tree-id13262 . -18) (undo-tree-id13263 . -18) (undo-tree-id13264 . -18) (undo-tree-id13265 . -18) (undo-tree-id13266 . -18) (undo-tree-id13267 . -18) (undo-tree-id13268 . -18) (undo-tree-id13269 . -18) (undo-tree-id13270 . -76) (undo-tree-id13271 . 77) (undo-tree-id13272 . -8) (undo-tree-id13273 . -8) (undo-tree-id13274 . -8) (undo-tree-id13275 . -8) (undo-tree-id13276 . -8) (undo-tree-id13277 . -8) (undo-tree-id13278 . -8) (undo-tree-id13279 . -8) (undo-tree-id13280 . -8) (undo-tree-id13281 . -8) (undo-tree-id13282 . -8) (undo-tree-id13283 . -8) (undo-tree-id13284 . -8) (undo-tree-id13285 . -8) (undo-tree-id13286 . -8) (undo-tree-id13287 . -8) (undo-tree-id13288 . -8) (undo-tree-id13289 . -8) (undo-tree-id13290 . -8) (undo-tree-id13291 . -8) (undo-tree-id13292 . -8) (undo-tree-id13293 . -77) 6743) nil (25756 49431 258898 963000) 0 nil])
([nil nil ((#("the fit() method, instead of X_train, y_train, X_valid, and y_valid:5
" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 9 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 31 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 36 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 39 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 40 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 45 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 48 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 49 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 54 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 56 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 59 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 61 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 62 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 67 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 69 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6735) (undo-tree-id13212 . -69) (undo-tree-id13213 . -8) (undo-tree-id13214 . -4) (undo-tree-id13215 . -4) (undo-tree-id13216 . -4) (undo-tree-id13217 . -4) (undo-tree-id13218 . -4) (undo-tree-id13219 . -4) (undo-tree-id13220 . -4) (undo-tree-id13221 . -4) (undo-tree-id13222 . -69) (undo-tree-id13223 . -8) (undo-tree-id13224 . -8) (undo-tree-id13225 . -8) (undo-tree-id13226 . -8) (undo-tree-id13227 . -8) (undo-tree-id13228 . -8) (undo-tree-id13229 . -8) (undo-tree-id13230 . -8) (undo-tree-id13231 . -8) (undo-tree-id13232 . 62) (undo-tree-id13233 . -9) (undo-tree-id13234 . 63) (undo-tree-id13235 . -8) (undo-tree-id13236 . -8) (undo-tree-id13237 . -8) (undo-tree-id13238 . -8) (undo-tree-id13239 . -8) (undo-tree-id13240 . -8) (undo-tree-id13241 . -8) (undo-tree-id13242 . -8) (undo-tree-id13243 . -8) (undo-tree-id13244 . -8) (undo-tree-id13245 . -8) (undo-tree-id13246 . -8) (undo-tree-id13247 . -70) 6743) nil (25756 49431 258867 137000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1 34 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 6735) (undo-tree-id13178 . -34) (undo-tree-id13179 . -8) (undo-tree-id13180 . -4) (undo-tree-id13181 . -4) (undo-tree-id13182 . -4) (undo-tree-id13183 . -4) (undo-tree-id13184 . -4) (undo-tree-id13185 . -4) (undo-tree-id13186 . -4) (undo-tree-id13187 . -4) (undo-tree-id13188 . -34) (undo-tree-id13189 . 27) (undo-tree-id13190 . -11) (undo-tree-id13191 . -8) (undo-tree-id13192 . -8) (undo-tree-id13193 . -8) (undo-tree-id13194 . -8) (undo-tree-id13195 . -8) (undo-tree-id13196 . -8) (undo-tree-id13197 . -8) (undo-tree-id13198 . -8) (undo-tree-id13199 . -8) (undo-tree-id13200 . -8) (undo-tree-id13201 . -8) (undo-tree-id13202 . -8) (undo-tree-id13203 . -8) (undo-tree-id13204 . -8) (undo-tree-id13205 . -8) (undo-tree-id13206 . -8) (undo-tree-id13207 . -8) (undo-tree-id13208 . -8) (undo-tree-id13209 . -8) (undo-tree-id13210 . -8) (undo-tree-id13211 . -35) 6743) nil (25756 49431 258838 114000) 0 nil])
([nil nil ((6853 . 6854) (t 25756 49431 281416 797000)) nil (25756 49443 625612 844000) 0 nil])
([nil nil ((#("Similarly, we can pass a dataset to the evaluate() and predict()
" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 18 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 22 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 48 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 49 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 50 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 51 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 54 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 62 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6854) (undo-tree-id13404 . -64) (undo-tree-id13405 . 65) (undo-tree-id13406 . -65)) nil (25756 49443 625610 883000) 0 nil])
([nil nil ((#("methods:
" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6854) (undo-tree-id13400 . -8) (undo-tree-id13401 . 9) (undo-tree-id13402 . -8) (undo-tree-id13403 . -9)) nil (25756 49443 625605 24000) 0 nil])
([nil nil ((#("#+end_src python :result outputs
" 0 32 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 6950) (undo-tree-id13407 . -32) (undo-tree-id13408 . -32) (undo-tree-id13409 . -4) (undo-tree-id13410 . -31) (undo-tree-id13411 . -31) (undo-tree-id13412 . -31) (undo-tree-id13413 . -31) (undo-tree-id13414 . -31) (undo-tree-id13415 . -31) (undo-tree-id13416 . -31) (undo-tree-id13417 . -31) (undo-tree-id13418 . -31) (undo-tree-id13419 . -31) (undo-tree-id13420 . -31) (undo-tree-id13421 . -31) (undo-tree-id13422 . -31) (undo-tree-id13423 . -31) (undo-tree-id13424 . -31) (undo-tree-id13425 . -31) (undo-tree-id13426 . -31) (undo-tree-id13427 . -31) (undo-tree-id13428 . -31) (undo-tree-id13429 . -31) (undo-tree-id13430 . -31) (undo-tree-id13431 . -31) (undo-tree-id13432 . -31) (undo-tree-id13433 . -31) (undo-tree-id13434 . -31) (undo-tree-id13435 . -31) (undo-tree-id13436 . -31) (undo-tree-id13437 . -33) 6981 (t 25756 49443 693686 730000)) nil (25756 49454 552525 882000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7019 . 7020) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7052) (7019 . 7053) 6968) nil (25756 49454 552484 635000) 0 nil])
([nil nil ((6949 . 6950) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -6949) (undo-tree-id13438 . -1) (undo-tree-id13439 . -1) (undo-tree-id13440 . -1) (undo-tree-id13441 . -1) (undo-tree-id13442 . -1) (undo-tree-id13443 . -1) (undo-tree-id13444 . -1) (undo-tree-id13445 . -1) (undo-tree-id13446 . -1) (undo-tree-id13447 . -1) (undo-tree-id13448 . -1) (undo-tree-id13449 . -1) (undo-tree-id13450 . -1) (undo-tree-id13451 . -1) (undo-tree-id13452 . -1) (undo-tree-id13453 . -1) (undo-tree-id13454 . -1) (undo-tree-id13455 . -1) (undo-tree-id13456 . -1) (undo-tree-id13457 . -1) (undo-tree-id13458 . -1) (undo-tree-id13459 . -1) (undo-tree-id13460 . -1) (undo-tree-id13461 . -1) (undo-tree-id13462 . -1) (undo-tree-id13463 . -1) (undo-tree-id13464 . -1) (undo-tree-id13465 . -1) (undo-tree-id13466 . -1) (undo-tree-id13467 . -1) (undo-tree-id13468 . -1) (undo-tree-id13469 . -1) (undo-tree-id13470 . -1) (undo-tree-id13471 . -1) (undo-tree-id13472 . -1) (undo-tree-id13473 . -1) (undo-tree-id13474 . -1) (undo-tree-id13475 . -1) (undo-tree-id13476 . -1) (undo-tree-id13477 . -1) (undo-tree-id13478 . -1) (undo-tree-id13479 . -1) (undo-tree-id13480 . -1) 6926 (t 25756 49454 573922 900000)) nil (25756 49462 235235 384000) 0 nil])
([nil nil ((#("pretend we have" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 6928) (undo-tree-id13481 . -14) (undo-tree-id13482 . -14) (undo-tree-id13483 . -14) (undo-tree-id13484 . -15) (undo-tree-id13485 . -15) (undo-tree-id13486 . -15) (undo-tree-id13487 . -15) (undo-tree-id13488 . -15) (undo-tree-id13489 . -15) (undo-tree-id13490 . -15) (undo-tree-id13491 . -15) (undo-tree-id13492 . -15) (undo-tree-id13493 . -15) (undo-tree-id13494 . -15) (undo-tree-id13495 . -15) (undo-tree-id13496 . -15) (undo-tree-id13497 . -15) (undo-tree-id13498 . -15) (undo-tree-id13499 . -14) (undo-tree-id13500 . -14) (undo-tree-id13501 . -14) (undo-tree-id13502 . -14) (undo-tree-id13503 . -14) (undo-tree-id13504 . -14) (undo-tree-id13505 . -14) (undo-tree-id13506 . -14) (undo-tree-id13507 . -14) (undo-tree-id13508 . -14) (undo-tree-id13509 . -14) (undo-tree-id13510 . -14) (undo-tree-id13511 . -14) (undo-tree-id13512 . -14) (undo-tree-id13513 . -14) (undo-tree-id13514 . -13) (undo-tree-id13515 . -13) (undo-tree-id13516 . -13) (undo-tree-id13517 . -13) (undo-tree-id13518 . -13) (undo-tree-id13519 . -13) (undo-tree-id13520 . -13) (undo-tree-id13521 . -13) (undo-tree-id13522 . -13) (undo-tree-id13523 . -13) (undo-tree-id13524 . -13) (undo-tree-id13525 . -13) (undo-tree-id13526 . -13) (undo-tree-id13527 . -13) (undo-tree-id13528 . -13) (undo-tree-id13529 . -12) (undo-tree-id13530 . -12) (undo-tree-id13531 . -12) (undo-tree-id13532 . -12) (undo-tree-id13533 . -12) (undo-tree-id13534 . -12) (undo-tree-id13535 . -12) (undo-tree-id13536 . -12) (undo-tree-id13537 . -12) (undo-tree-id13538 . -12) (undo-tree-id13539 . -12) (undo-tree-id13540 . -12) (undo-tree-id13541 . -12) (undo-tree-id13542 . -12) (undo-tree-id13543 . -12) (undo-tree-id13544 . -12) (undo-tree-id13545 . -12) (undo-tree-id13546 . -12) (undo-tree-id13547 . -12) (undo-tree-id13548 . -12) (undo-tree-id13549 . -12) (undo-tree-id13550 . -12) (undo-tree-id13551 . -11) (undo-tree-id13552 . -11) (undo-tree-id13553 . -11) (undo-tree-id13554 . -11) (undo-tree-id13555 . -11) (undo-tree-id13556 . -11) (undo-tree-id13557 . -11) (undo-tree-id13558 . -11) (undo-tree-id13559 . -10) (undo-tree-id13560 . -10) (undo-tree-id13561 . -10) (undo-tree-id13562 . -10) (undo-tree-id13563 . -10) (undo-tree-id13564 . -10) (undo-tree-id13565 . -10) (undo-tree-id13566 . -10) (undo-tree-id13567 . -10) (undo-tree-id13568 . -10) (undo-tree-id13569 . -10) (undo-tree-id13570 . -10) (undo-tree-id13571 . -10) (undo-tree-id13572 . -10) (undo-tree-id13573 . -10) (undo-tree-id13574 . -9) (undo-tree-id13575 . -9) (undo-tree-id13576 . -9) (undo-tree-id13577 . -9) (undo-tree-id13578 . -9) (undo-tree-id13579 . -9) (undo-tree-id13580 . -9) (undo-tree-id13581 . -9) (undo-tree-id13582 . -9) (undo-tree-id13583 . -9) (undo-tree-id13584 . -9) (undo-tree-id13585 . -9) (undo-tree-id13586 . -9) (undo-tree-id13587 . -9) (undo-tree-id13588 . -9) (undo-tree-id13589 . -8) (undo-tree-id13590 . -8) (undo-tree-id13591 . -8) (undo-tree-id13592 . -8) (undo-tree-id13593 . -8) (undo-tree-id13594 . -8) (undo-tree-id13595 . -8) (undo-tree-id13596 . -8) (undo-tree-id13597 . -8) (undo-tree-id13598 . -8) (undo-tree-id13599 . -8) (undo-tree-id13600 . -8) (undo-tree-id13601 . -8) (undo-tree-id13602 . -8) (undo-tree-id13603 . -8) (undo-tree-id13604 . -8) (undo-tree-id13605 . -8) (undo-tree-id13606 . -8) (undo-tree-id13607 . -8) (undo-tree-id13608 . -8) (undo-tree-id13609 . -8) (undo-tree-id13610 . -8) (undo-tree-id13611 . -8) (undo-tree-id13612 . -8) (undo-tree-id13613 . -8) (undo-tree-id13614 . -8) (undo-tree-id13615 . -8) (undo-tree-id13616 . -8) (undo-tree-id13617 . -8) (undo-tree-id13618 . -8) (undo-tree-id13619 . -8) (undo-tree-id13620 . -8) (undo-tree-id13621 . -8) (undo-tree-id13622 . -8) (undo-tree-id13623 . -8) (undo-tree-id13624 . -8) (undo-tree-id13625 . -15) (undo-tree-id13626 . -14) (undo-tree-id13627 . -6) (undo-tree-id13628 . -6) (undo-tree-id13629 . -6) (undo-tree-id13630 . -6) (undo-tree-id13631 . -6) (undo-tree-id13632 . -6) (undo-tree-id13633 . -6) (undo-tree-id13634 . -6) (undo-tree-id13635 . -6) (undo-tree-id13636 . -6) (undo-tree-id13637 . -6) (undo-tree-id13638 . -6) (undo-tree-id13639 . -6) (undo-tree-id13640 . -6) (undo-tree-id13641 . -6) (undo-tree-id13642 . -6) (undo-tree-id13643 . -6) (undo-tree-id13644 . -6) (undo-tree-id13645 . -6) (undo-tree-id13646 . -6) (undo-tree-id13647 . -6) (undo-tree-id13648 . -6) (undo-tree-id13649 . -6) (undo-tree-id13650 . -6) (undo-tree-id13651 . -6) (undo-tree-id13652 . -6) (undo-tree-id13653 . -6) (undo-tree-id13654 . -6) (undo-tree-id13655 . -6) (undo-tree-id13656 . -6) (undo-tree-id13657 . -6) (undo-tree-id13658 . -6) (undo-tree-id13659 . -6) (undo-tree-id13660 . -6) (undo-tree-id13661 . -6) (undo-tree-id13662 . -6) (undo-tree-id13663 . -6) (undo-tree-id13664 . -6) (undo-tree-id13665 . -6) (undo-tree-id13666 . -6) (undo-tree-id13667 . -6) (undo-tree-id13668 . -6) (undo-tree-id13669 . -6) (undo-tree-id13670 . -9) (undo-tree-id13671 . -9) (undo-tree-id13672 . -9) (undo-tree-id13673 . -9) (undo-tree-id13674 . -9) (undo-tree-id13675 . -9) (undo-tree-id13676 . -9) (undo-tree-id13677 . -9) (undo-tree-id13678 . -9) (undo-tree-id13679 . -9) (undo-tree-id13680 . -9) (undo-tree-id13681 . -9) (undo-tree-id13682 . -9) (undo-tree-id13683 . -9) (undo-tree-id13684 . -9) (undo-tree-id13685 . -9) (undo-tree-id13686 . -9) (undo-tree-id13687 . -9) (undo-tree-id13688 . -9) (undo-tree-id13689 . -9) (undo-tree-id13690 . -9) (undo-tree-id13691 . -9) (undo-tree-id13692 . -14) (undo-tree-id13693 . -14) (undo-tree-id13694 . -14) (undo-tree-id13695 . -14) (undo-tree-id13696 . -14) (undo-tree-id13697 . -14) (undo-tree-id13698 . -14) (undo-tree-id13699 . -14) (undo-tree-id13700 . -14) (undo-tree-id13701 . -14) (undo-tree-id13702 . -14) (undo-tree-id13703 . -14) (undo-tree-id13704 . -14) (undo-tree-id13705 . -14) (undo-tree-id13706 . -14) (undo-tree-id13707 . -14) (undo-tree-id13708 . -14) (undo-tree-id13709 . -14) (undo-tree-id13710 . -14) (undo-tree-id13711 . -14) (undo-tree-id13712 . -14) (undo-tree-id13713 . -14) (undo-tree-id13714 . -14) (undo-tree-id13715 . -14) (undo-tree-id13716 . -14) (undo-tree-id13717 . -14) (undo-tree-id13718 . -14) (undo-tree-id13719 . -14) (undo-tree-id13720 . -14) (undo-tree-id13721 . -14) (undo-tree-id13722 . -14) (undo-tree-id13723 . -14) (undo-tree-id13724 . -14) (undo-tree-id13725 . -14) (undo-tree-id13726 . -14) (undo-tree-id13727 . -14) (undo-tree-id13728 . -14) (undo-tree-id13729 . -15) 6942 (t 25756 49462 258089 447000)) nil (25756 49474 496699 205000) 0 nil])
([nil nil ((7037 . 7038) (t 25756 49474 514354 675000) 7005) nil (25756 49481 301507 739000) 0 nil])
([nil nil ((#("Unlike the other sets, the new_set will usually not contain labels (if it
" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 31 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 34 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13738 . -73) (undo-tree-id13739 . -74) (t 25756 49481 318501 701000)) nil (25756 49493 354117 608000) 0 nil])
([nil nil ((#("does, Keras will ignore them). Note that in all these cases, you can still use
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13736 . -78) (undo-tree-id13737 . -79)) nil (25756 49493 354115 262000) 0 nil])
([nil nil ((#("NumPy arrays instead of datasets if you want (but of course they need to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13732 . -72) (undo-tree-id13733 . 73) (undo-tree-id13734 . -5) (undo-tree-id13735 . -73)) nil (25756 49493 354112 595000) 0 nil])
([nil nil ((#("have been loaded and preprocessed first).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13730 . -41) (undo-tree-id13731 . -42)) nil (25756 49493 354106 751000) 0 nil])
([nil nil ((#("If you want to build your own custom training loop (as in Chapter 12), you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13750 . -74) (undo-tree-id13751 . -75) (t 25756 49493 374761 839000)) nil (25756 49529 212054 39000) 0 nil])
([nil nil ((#("can just iterate over the training set, very naturally:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13748 . -55) (undo-tree-id13749 . -56)) nil (25756 49529 212051 641000) 0 nil])
([nil nil ((#("for X_batch, y_batch in train_set:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 6 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 11 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 15 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 20 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 30 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 33 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13746 . -34) (undo-tree-id13747 . -35)) nil (25756 49529 212048 941000) 0 nil])
([nil nil ((#("[...] # perform one Gradient Descent step
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13740 . -41) (undo-tree-id13741 . 42) (undo-tree-id13742 . -1) (undo-tree-id13743 . 38) (undo-tree-id13744 . -5) (undo-tree-id13745 . -42)) nil (25756 49529 212043 874000) 0 nil])
([nil nil ((#("In fact, it is even possible to create a TF Function (see Chapter 12) that
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13764 . -74) (undo-tree-id13765 . -75) (t 25756 49529 235532 904000)) nil (25756 49553 975405 926000) 0 nil])
([nil nil ((#("performs the whole training loop:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7039) (undo-tree-id13762 . -33) (undo-tree-id13763 . -34)) nil (25756 49553 975400 593000) 0 nil])
([nil nil ((#("#+end_src python :result outputs
" 0 32 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 32 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 7005) (undo-tree-id13752 . -32) (undo-tree-id13753 . -33) (undo-tree-id13754 . -33) (undo-tree-id13755 . -33) (undo-tree-id13756 . -33) (undo-tree-id13757 . -33) (undo-tree-id13758 . -33) (undo-tree-id13759 . -33) (undo-tree-id13760 . -33) (undo-tree-id13761 . -33)) nil (25756 49553 975397 739000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7453 . 7454) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7486) (7453 . 7487) 7389) nil (25756 49553 975384 209000) 0 nil])
([nil nil ((7006 . 7021) (7005 . 7006) 7005) nil (25756 49553 975379 181000) 0 nil])
([nil nil ((7440 . 7441) (7439 . 7440) (7438 . 7439) (7437 . 7438) (7381 . 7382) (7380 . 7381) (7379 . 7380) (7378 . 7379) (7333 . 7334) (7332 . 7333) (7331 . 7332) (7330 . 7331) (7276 . 7277) (7275 . 7276) (7274 . 7275) (7273 . 7274) (7248 . 7249) (7247 . 7248) (7246 . 7247) (7245 . 7246) (7212 . 7213) (7211 . 7212) (7210 . 7211) (7209 . 7210) (7173 . 7174) (7172 . 7173) (7171 . 7172) (7170 . 7171) (7162 . 7163) (7161 . 7162) (7160 . 7161) (7159 . 7160) (7090 . 7094) (t 25756 49553 996063 28000)) nil (25756 49562 94185 230000) 0 nil])
([nil nil ((7158 . 7159) (#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 7158) (undo-tree-id13766 . -3) (undo-tree-id13767 . -3) (undo-tree-id13768 . -3) (undo-tree-id13769 . -3) (undo-tree-id13770 . -3) (undo-tree-id13771 . -3) (undo-tree-id13772 . -3) (undo-tree-id13773 . -3) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -7158) (undo-tree-id13774 . -1) 7093 (t 25756 49562 120236 582000)) nil (25756 49565 53547 353000) 0 nil])
([nil nil (7205) nil (25756 49576 257509 703000) 0 nil])
([nil nil ((7460 . 7461) (7459 . 7460) (7458 . 7459) (7457 . 7458) (7397 . 7398) (7396 . 7397) (7395 . 7396) (7394 . 7395) (7345 . 7346) (7344 . 7345) (7343 . 7344) (7342 . 7343) (7284 . 7285) (7283 . 7284) (7282 . 7283) (7281 . 7282) (7252 . 7253) (7251 . 7252) (7250 . 7251) (7249 . 7250) (7209 . 7213) (t 25756 49565 72299 600000)) nil (25756 49576 257504 531000) 0 nil])
([nil nil ((7480 . 7481) (7479 . 7480) (7478 . 7479) (7477 . 7478) (7413 . 7414) (7412 . 7413) (7411 . 7412) (7410 . 7411) (7357 . 7358) (7356 . 7357) (7355 . 7356) (7354 . 7355) (7292 . 7293) (7291 . 7292) (7290 . 7291) (7289 . 7290) (7253 . 7257) (t 25756 49576 284538 725000)) nil (25756 49586 377807 115000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("           " 0 2 (face org-indent) 2 11 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -7410) (undo-tree-id13777 . -1) (undo-tree-id13778 . -1) (undo-tree-id13779 . -1) (undo-tree-id13780 . -1) (undo-tree-id13781 . -1) (undo-tree-id13782 . -1) (undo-tree-id13783 . -1) (undo-tree-id13784 . -1) (undo-tree-id13785 . -1) (undo-tree-id13786 . -1) (undo-tree-id13787 . -1) (undo-tree-id13788 . -1) (undo-tree-id13789 . -1) (undo-tree-id13790 . -1) (undo-tree-id13791 . -1) (undo-tree-id13792 . -1) (undo-tree-id13793 . -1) (undo-tree-id13794 . -1) (undo-tree-id13795 . -1) (undo-tree-id13796 . -1) (undo-tree-id13797 . -1) (undo-tree-id13798 . -1) (undo-tree-id13799 . -1) (undo-tree-id13800 . -1) (undo-tree-id13801 . -1) (undo-tree-id13802 . -1) (undo-tree-id13803 . -1) (undo-tree-id13804 . -1) (undo-tree-id13805 . -1) (undo-tree-id13806 . -1) (undo-tree-id13807 . -1) (undo-tree-id13808 . -1) (undo-tree-id13809 . -1) (undo-tree-id13810 . -1) (undo-tree-id13811 . -1) (undo-tree-id13812 . -1) (undo-tree-id13813 . -1) (undo-tree-id13814 . -1) (undo-tree-id13815 . -1) (undo-tree-id13816 . -1) (undo-tree-id13817 . -1) (undo-tree-id13818 . -1) (undo-tree-id13819 . -1) (undo-tree-id13820 . -1) (undo-tree-id13821 . -1) (undo-tree-id13822 . -1) (undo-tree-id13823 . -1) (undo-tree-id13824 . -1) (undo-tree-id13825 . -1) (undo-tree-id13826 . -1) (undo-tree-id13827 . -1) (undo-tree-id13828 . -1) (undo-tree-id13829 . -1) (undo-tree-id13830 . -1) (undo-tree-id13831 . -1) (undo-tree-id13832 . -1) (undo-tree-id13833 . -1) (undo-tree-id13834 . -1) (undo-tree-id13835 . -1) (undo-tree-id13836 . -1) (undo-tree-id13837 . -1) (undo-tree-id13838 . -1) (undo-tree-id13839 . -1) (undo-tree-id13840 . -1) (undo-tree-id13841 . -1) (undo-tree-id13842 . -1) (undo-tree-id13843 . -1) (undo-tree-id13844 . -1) (undo-tree-id13845 . -1) (undo-tree-id13846 . -1) (undo-tree-id13847 . -1) (undo-tree-id13848 . -1) (undo-tree-id13849 . -1) (undo-tree-id13850 . -1) (undo-tree-id13851 . -1) (undo-tree-id13852 . -1) (undo-tree-id13853 . -1) (undo-tree-id13854 . -1) (undo-tree-id13855 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -7411) (undo-tree-id13856 . -1) (undo-tree-id13857 . -1) (undo-tree-id13858 . -1) (undo-tree-id13859 . -1) (undo-tree-id13860 . -1) (undo-tree-id13861 . -1) (undo-tree-id13862 . -1) (undo-tree-id13863 . -1) (undo-tree-id13864 . -1) (undo-tree-id13865 . -1) (undo-tree-id13866 . -1) (undo-tree-id13867 . -1) (undo-tree-id13868 . -1) (undo-tree-id13869 . -1) (undo-tree-id13870 . -1) (undo-tree-id13871 . -1) (undo-tree-id13872 . -1) (undo-tree-id13873 . -1) (undo-tree-id13874 . -1) (undo-tree-id13875 . -1) (undo-tree-id13876 . -1) (undo-tree-id13877 . -1) (undo-tree-id13878 . -1) (undo-tree-id13879 . -1) (undo-tree-id13880 . -1) (undo-tree-id13881 . -1) (undo-tree-id13882 . -1) (undo-tree-id13883 . -1) (undo-tree-id13884 . -1) (undo-tree-id13885 . -1) (undo-tree-id13886 . -1) (undo-tree-id13887 . -1) (undo-tree-id13888 . -1) (undo-tree-id13889 . -1) (undo-tree-id13890 . -1) (undo-tree-id13891 . -1) (undo-tree-id13892 . -1) (undo-tree-id13893 . -1) (undo-tree-id13894 . -1) (undo-tree-id13895 . -1) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1) (undo-tree-id13919 . -1) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("             " 0 2 (face org-indent) 2 13 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -7412) (undo-tree-id13926 . -1) (undo-tree-id13927 . -1) (undo-tree-id13928 . -1) (undo-tree-id13929 . -1) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1) (undo-tree-id13936 . -1) (undo-tree-id13937 . -1) (undo-tree-id13938 . -1) (undo-tree-id13939 . -1) (undo-tree-id13940 . -1) (undo-tree-id13941 . -1) (undo-tree-id13942 . -1) (undo-tree-id13943 . -1) (undo-tree-id13944 . -1) (undo-tree-id13945 . -1) (undo-tree-id13946 . -1) (undo-tree-id13947 . -1) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) (undo-tree-id13952 . -1) (undo-tree-id13953 . -1) (undo-tree-id13954 . -1) (undo-tree-id13955 . -1) (undo-tree-id13956 . -1) (undo-tree-id13957 . -1) (undo-tree-id13958 . -1) (undo-tree-id13959 . -1) (undo-tree-id13960 . -1) (undo-tree-id13961 . -1) (undo-tree-id13962 . -1) (undo-tree-id13963 . -1) (undo-tree-id13964 . -1) (undo-tree-id13965 . -1) (undo-tree-id13966 . -1) (undo-tree-id13967 . -1) (undo-tree-id13968 . -1) (undo-tree-id13969 . -1) (undo-tree-id13970 . -1) (undo-tree-id13971 . -1) (undo-tree-id13972 . -1) (undo-tree-id13973 . -1) (undo-tree-id13974 . -1) (undo-tree-id13975 . -1) (undo-tree-id13976 . -1) (undo-tree-id13977 . -1) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1) (undo-tree-id13982 . -1) (undo-tree-id13983 . -1) (undo-tree-id13984 . -1) (undo-tree-id13985 . -1) (undo-tree-id13986 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("              " 0 2 (face org-indent) 2 14 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -7413) (undo-tree-id13987 . -1) (undo-tree-id13988 . -1) (undo-tree-id13989 . -1) (undo-tree-id13990 . -1) (undo-tree-id13991 . -1) (undo-tree-id13992 . -1) (undo-tree-id13993 . -1) (undo-tree-id13994 . -1) (undo-tree-id13995 . -1) (undo-tree-id13996 . -1) (undo-tree-id13997 . -1) (undo-tree-id13998 . -1) (undo-tree-id13999 . -1) (undo-tree-id14000 . -1) (undo-tree-id14001 . -1) (undo-tree-id14002 . -1) (undo-tree-id14003 . -1) (undo-tree-id14004 . -1) (undo-tree-id14005 . -1) (undo-tree-id14006 . -1) (undo-tree-id14007 . -1) (undo-tree-id14008 . -1) (undo-tree-id14009 . -1) (undo-tree-id14010 . -1) (undo-tree-id14011 . -1) (undo-tree-id14012 . -1) (undo-tree-id14013 . -1) (undo-tree-id14014 . -1) (undo-tree-id14015 . -1) (undo-tree-id14016 . -1) (undo-tree-id14017 . -1) (undo-tree-id14018 . -1) (undo-tree-id14019 . -1) (undo-tree-id14020 . -1) (undo-tree-id14021 . -1) (undo-tree-id14022 . -1) (undo-tree-id14023 . -1) (undo-tree-id14024 . -1) (undo-tree-id14025 . -1) (undo-tree-id14026 . -1) (undo-tree-id14027 . -1) (undo-tree-id14028 . -1) (undo-tree-id14029 . -1) (undo-tree-id14030 . -1) (undo-tree-id14031 . -1) (undo-tree-id14032 . -1) (undo-tree-id14033 . -1) (undo-tree-id14034 . -1) (undo-tree-id14035 . -1) (undo-tree-id14036 . -1) (undo-tree-id14037 . -1) (undo-tree-id14038 . -1) 7414 (t 25756 49586 396754 100000)) nil (25756 49630 28031 184000) 0 nil])
([nil nil ((#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("              " 0 2 (face org-indent) 2 14 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 7473) (undo-tree-id13775 . -3) (undo-tree-id13776 . -4)) nil (25756 49630 27604 434000) 0 nil])
([nil nil ((#("Congratulations, you now know how to build powerful input pipelines
" 0 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14041 . -67) (undo-tree-id14042 . -68) (t 25756 49630 49680 754000)) nil (25756 49648 304816 326000) 0 nil])
([nil nil ((#("using the Data API! However, so far we have used CSV files, which are
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14057 . -69) (undo-tree-id14058 . -70)) nil (25756 49694 325702 769000) 0 nil] [nil nil ((#("using the Data API! However, so far we have used CSV files, which are
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14039 . -69) (undo-tree-id14040 . -70)) ((7571 . 7641)) (25756 49648 304491 907000) 0 nil])
([nil nil ((#("common, simple, and convenient but not really efficient, and do not
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14055 . -67) (undo-tree-id14056 . -68)) nil (25756 49694 325698 595000) 0 nil])
nil
([nil nil ((#("support large or complex data structures (such as images or audio) very
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14053 . -71) (undo-tree-id14054 . -72)) nil (25756 49694 325696 695000) 0 nil])
([nil nil ((#("well. So let’s see how to use TFRecords instead.TIP
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14051 . -51) (undo-tree-id14052 . -52)) nil (25756 49694 325694 478000) 0 nil])
([nil nil ((#("If you are happy with CSV files (or whatever other format you are using), you do not
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14049 . -84) (undo-tree-id14050 . -85)) nil (25756 49694 325692 235000) 0 nil])
([nil nil ((#("have to use TFRecords. As the saying goes, if it ain’t broke, don’t fix it! TFRecords
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7571) (undo-tree-id14047 . -85) (undo-tree-id14048 . -86)) nil (25756 49694 325689 739000) 0 nil])
([nil nil ((#("are useful when the bottleneck during training is loading and parsing the data.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 79 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7571) (undo-tree-id14043 . -79) (undo-tree-id14044 . -79) (undo-tree-id14045 . -78) (undo-tree-id14046 . -80)) nil (25756 49694 325684 673000) 0 nil])
([nil nil ((7572 . 7574) (#("m" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7572) (undo-tree-id14059 . -1) (undo-tree-id14060 . -1) (undo-tree-id14061 . -1) (undo-tree-id14062 . -1) (undo-tree-id14063 . -1) (undo-tree-id14064 . -1) (undo-tree-id14065 . -1) (undo-tree-id14066 . -1) (undo-tree-id14067 . -1) (undo-tree-id14068 . -1) (undo-tree-id14069 . -1) (undo-tree-id14070 . -1) (undo-tree-id14071 . -1) (undo-tree-id14072 . -1) (undo-tree-id14073 . -1) (undo-tree-id14074 . -1) (undo-tree-id14075 . -1) (undo-tree-id14076 . -1) (undo-tree-id14077 . -1) (undo-tree-id14078 . -1) (undo-tree-id14079 . -1) (undo-tree-id14080 . -1) (undo-tree-id14081 . -1) (undo-tree-id14082 . -1) (undo-tree-id14083 . -1) (undo-tree-id14084 . -1) (undo-tree-id14085 . -1) (undo-tree-id14086 . -1) (undo-tree-id14087 . -1) (undo-tree-id14088 . -1) (undo-tree-id14089 . -1) (undo-tree-id14090 . -1) (undo-tree-id14091 . -1) (undo-tree-id14092 . -1) (undo-tree-id14093 . -1) (undo-tree-id14094 . -1) (undo-tree-id14095 . -1) (undo-tree-id14096 . -1) (undo-tree-id14097 . -1) (undo-tree-id14098 . -1) (undo-tree-id14099 . -1) 7573 (7572 . 7573) (7571 . 7572) (t 25756 49694 343784 467000)) nil (25756 49714 916916 428000) 0 nil])
([nil nil ((7574 . 7575)) nil (25756 49714 916631 45000) 0 nil])
([nil nil ((7573 . 7574) (t 25756 49714 986522 42000)) nil (25756 49719 48255 47000) 0 nil])
([nil current ((7575 . 7576) (t 25756 49719 71054 27000) 7573) nil (25756 49721 816887 167000) 0 nil])
nil
