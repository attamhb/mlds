(undo-tree-save-format-version . 1)
"f6a710dc2dc46e1dfe8de3b77206db9f8c88df16"
[nil nil nil nil (25758 60459 788688 141000) 0 nil]
([nil nil ((8 . 12) (4 . 8) (2 . 4) (1 . 2) (t 25758 60459 796145 352000)) nil (25758 60465 369770 525000) 0 nil])
([nil nil ((12 . 13)) nil (25758 60465 369764 463000) 0 nil])
([nil nil ((nil rear-nonsticky nil 54 . 55) (nil fontified nil 46 . 55) (nil fontified nil 21 . 46) (nil fontified nil 4 . 21) (4 . 55) 3 (t 25758 60465 376077 134000)) nil (25758 60483 30693 538000) 0 nil])
([nil nil ((45 . 46) (#("
" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t)) . -45) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (20 . 21) (#("
" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t)) . -20) (undo-tree-id2 . -1) 13) nil (25758 60483 30688 587000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3056 . 3057) (nil fontified nil 3041 . 3057) (nil fontified nil 2969 . 3041) (nil fontified nil 2955 . 2969) (nil fontified nil 2892 . 2955) (nil fontified nil 2827 . 2892) (nil fontified nil 2754 . 2827) (nil fontified nil 2680 . 2754) (nil fontified nil 2610 . 2680) (nil fontified nil 2536 . 2610) (nil fontified nil 2460 . 2536) (nil fontified nil 2386 . 2460) (nil fontified nil 2312 . 2386) (nil fontified nil 2269 . 2312) (nil fontified nil 2197 . 2269) (nil fontified nil 2129 . 2197) (nil fontified nil 2061 . 2129) (nil fontified nil 1985 . 2061) (nil fontified nil 1910 . 1985) (nil fontified nil 1767 . 1910) (nil fontified nil 1694 . 1767) (nil fontified nil 1619 . 1694) (nil fontified nil 1546 . 1619) (nil fontified nil 1471 . 1546) (nil fontified nil 1395 . 1471) (nil fontified nil 1323 . 1395) (nil fontified nil 1255 . 1323) (nil fontified nil 1183 . 1255) (nil fontified nil 1155 . 1183) (nil fontified nil 1080 . 1155) (nil fontified nil 1006 . 1080) (nil fontified nil 932 . 1006) (nil fontified nil 857 . 932) (nil fontified nil 791 . 857) (nil fontified nil 713 . 791) (nil fontified nil 638 . 713) (nil fontified nil 573 . 638) (nil fontified nil 501 . 573) (nil fontified nil 424 . 501) (nil fontified nil 348 . 424) (nil fontified nil 273 . 348) (nil fontified nil 203 . 273) (nil fontified nil 129 . 203) (nil fontified nil 56 . 129) (56 . 3057) (t 25758 60483 35867 756000)) nil (25758 60634 338105 252000) 0 nil])
([nil nil ((#("When Alan Turing imagined his famous Turing test1 in 1950, his objective
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id108 . -72) (undo-tree-id109 . -5) (undo-tree-id110 . -73)) nil (25758 60634 338097 243000) 0 nil])
([nil nil ((#("was to evaluate a machine’s ability to match human intelligence. He could
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id106 . -73) (undo-tree-id107 . -74)) nil (25758 60634 338094 447000) 0 nil])
([nil nil ((#("have tested for many things, such as the ability to recognize cats in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id104 . -69) (undo-tree-id105 . -70)) nil (25758 60634 338091 987000) 0 nil])
([nil nil ((#("pictures, play chess, compose music, or escape a maze, but, interestingly,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id102 . -74) (undo-tree-id103 . -75)) nil (25758 60634 338089 737000) 0 nil])
([nil nil ((#("he chose a linguistic task. More specifically, he devised a chatbot capable
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id100 . -75) (undo-tree-id101 . -76)) nil (25758 60634 338087 152000) 0 nil])
([nil nil ((#("of fooling its interlocutor into thinking it was human.2 This test does have
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id98 . -76) (undo-tree-id99 . -77)) nil (25758 60634 337829 708000) 0 nil])
([nil nil ((#("its weaknesses: a set of hardcoded rules can fool unsuspecting or naive
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 55 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id96 . -71) (undo-tree-id97 . -72)) nil (25758 60634 337827 602000) 0 nil])
([nil nil ((#("humans (e.g., the machine could give vague predefined answers in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id94 . -64) (undo-tree-id95 . -65)) nil (25758 60634 337825 539000) 0 nil])
([nil nil ((#("response to some keywords; it could pretend that it is joking or drunk, to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id92 . -74) (undo-tree-id93 . -75)) nil (25758 60634 337823 541000) 0 nil])
([nil nil ((#("get a pass on its weirdest answers; or it could escape difficult questions by
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id90 . -77) (undo-tree-id91 . -78)) nil (25758 60634 337821 454000) 0 nil])
([nil nil ((#("answering them with its own questions), and many aspects of human
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id88 . -65) (undo-tree-id89 . -66)) nil (25758 60634 337819 284000) 0 nil])
([nil nil ((#("intelligence are utterly ignored (e.g., the ability to interpret nonverbal
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id86 . -74) (undo-tree-id87 . -75)) nil (25758 60634 337817 241000) 0 nil])
([nil nil ((#("communication such as facial expressions, or to learn a manual task). But
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id84 . -73) (undo-tree-id85 . -74)) nil (25758 60634 337815 453000) 0 nil])
([nil nil ((#("the test does highlight the fact that mastering language is arguably Homo
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id82 . -73) (undo-tree-id83 . -74)) nil (25758 60634 337813 604000) 0 nil])
([nil nil ((#("sapiens’s greatest cognitive ability. Can we build a machine that can read
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id80 . -74) (undo-tree-id81 . -75)) nil (25758 60634 337811 255000) 0 nil])
([nil nil ((#("and write natural language?
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id78 . -27) (undo-tree-id79 . -28)) nil (25758 60634 337809 234000) 0 nil])
([nil nil ((#("We will therefore continue to explore RNNs (introduced in
Chapter 15" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 58 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 138) (undo-tree-id76 . -67) (undo-tree-id77 . -68)) nil (25758 60634 337807 260000) 0 nil])
([nil nil ((#("), starting with a character RNN, trained to predict the next
character in a sentence. This will allow us to generate some original text,
and in the" 0 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 62 138 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 138 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 138) (undo-tree-id72 . -147) (undo-tree-id73 . 148) (undo-tree-id74 . -1) (undo-tree-id75 . -148)) nil (25758 60634 337804 950000) 0 nil])
([nil nil ((#(" process we will see how to build a TensorFlow Dataset on a very" 0 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 138) (undo-tree-id69 . -63) (undo-tree-id70 . -64) (undo-tree-id71 . -64)) nil (25758 60634 337801 548000) 0 nil])
([nil nil ((#("long sequence. " 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id57 . -14) (undo-tree-id58 . -14) (undo-tree-id59 . -14) (undo-tree-id60 . -14) (undo-tree-id61 . -15) (undo-tree-id62 . -14) (undo-tree-id63 . -3) (undo-tree-id64 . -12) (undo-tree-id65 . -13) (undo-tree-id66 . -14) (undo-tree-id67 . -14) (undo-tree-id68 . -15) 153) nil (25758 60634 337797 919000) 0 nil])
([nil nil ((137 . 138) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 137) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -138) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 128) nil (25758 60634 337783 33000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -171) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 172 (#("(which learns on random
portions of text at each iteration, without any information on the rest of
the text)" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 99 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 172) (undo-tree-id230 . -107) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -108) (undo-tree-id237 . -108) 173 (t 25758 60634 390437 566000)) nil (25758 60675 483990 756000) 0 nil])
([nil nil ((#("(which preserves the hidden
state between training iterations and continues reading where it left off,allowing it to learn longer patterns)" 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 28 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 207) (undo-tree-id213 . -138) (undo-tree-id214 . 139) (undo-tree-id215 . -1) (undo-tree-id216 . 1) (undo-tree-id217 . -139) (undo-tree-id218 . -139)) nil (25758 60675 483975 570000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 206) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1)) nil (25758 60675 484253 714000) 0 nil])
([nil nil ((#("Next, we will build an RNN to" 0 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 208) (undo-tree-id304 . -28) (undo-tree-id305 . -29) (undo-tree-id306 . -29)) nil (25758 60700 562168 338000) 0 nil] [nil nil ((#("networks. We will first use a stateless RNN, then we will build a stateful RNN. Next, we will build an RNN to
" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 43 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 128) (undo-tree-id111 . -109) (undo-tree-id112 . 67) (undo-tree-id113 . -9) (undo-tree-id114 . -9) (undo-tree-id115 . -9) (undo-tree-id116 . -9) (undo-tree-id117 . -9) (undo-tree-id118 . -9) (undo-tree-id119 . -9) (undo-tree-id120 . -9) (undo-tree-id121 . -9) (undo-tree-id122 . -9) (undo-tree-id123 . -9) (undo-tree-id124 . -9) (undo-tree-id125 . -9) (undo-tree-id126 . -9) (undo-tree-id127 . -9) (undo-tree-id128 . -9) (undo-tree-id129 . -9) (undo-tree-id130 . -9) (undo-tree-id131 . -9) (undo-tree-id132 . -9) (undo-tree-id133 . 100) (undo-tree-id134 . -9) (undo-tree-id135 . -9) (undo-tree-id136 . -9) (undo-tree-id137 . -9) (undo-tree-id138 . -9) (undo-tree-id139 . -9) (undo-tree-id140 . -9) (undo-tree-id141 . -9) (undo-tree-id142 . -9) (undo-tree-id143 . -9) (undo-tree-id144 . -9) (undo-tree-id145 . -9) (undo-tree-id146 . -9) (undo-tree-id147 . -80) (undo-tree-id148 . -9) (undo-tree-id149 . -9) (undo-tree-id150 . -9) (undo-tree-id151 . -9) (undo-tree-id152 . -10) (undo-tree-id153 . -13) (undo-tree-id154 . -18) (undo-tree-id155 . -24) (undo-tree-id156 . -28) (undo-tree-id157 . -30) (undo-tree-id158 . -40) (undo-tree-id159 . -43) (undo-tree-id160 . -43) (undo-tree-id161 . -43) (undo-tree-id162 . -43) (undo-tree-id163 . 70) (undo-tree-id164 . -43) (undo-tree-id165 . -43) (undo-tree-id166 . -43) (undo-tree-id167 . -43) (undo-tree-id168 . -43) (undo-tree-id169 . -43) (undo-tree-id170 . -42) (undo-tree-id171 . -42) (undo-tree-id172 . -42) (undo-tree-id173 . -42) (undo-tree-id174 . -42) (undo-tree-id175 . -43) (undo-tree-id176 . -45) (undo-tree-id177 . -50) (undo-tree-id178 . -53) (undo-tree-id179 . -58) (undo-tree-id180 . -64) (undo-tree-id181 . 44) (undo-tree-id182 . -74) (undo-tree-id183 . -66) (undo-tree-id184 . -75) (undo-tree-id185 . -78) (undo-tree-id186 . -78) (undo-tree-id187 . 35) (undo-tree-id188 . -78) (undo-tree-id189 . -78) (undo-tree-id190 . -78) (undo-tree-id191 . -78) (undo-tree-id192 . -78) (undo-tree-id193 . -78) (undo-tree-id194 . -78) (undo-tree-id195 . -78) (undo-tree-id196 . -78) (undo-tree-id197 . -78) (undo-tree-id198 . -80) (undo-tree-id199 . -80) (undo-tree-id200 . -80) (undo-tree-id201 . -80) (undo-tree-id202 . -110) 208) ((128 . 238)) (25758 60675 483956 320000) 0 nil])
([nil nil ((#("perform sentiment analysis (e.g., reading movie reviews and extracting the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 209) (undo-tree-id301 . -74) (undo-tree-id302 . -73) (undo-tree-id303 . -75)) nil (25758 60700 562165 414000) 0 nil])
nil
([nil nil ((#("We will first use a stateless RNN, then we will build a stateful RNN. " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 68 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 138) (undo-tree-id246 . -69) (undo-tree-id247 . 37) (undo-tree-id248 . 70) (undo-tree-id249 . -3) (undo-tree-id250 . -8) (undo-tree-id251 . -14) (undo-tree-id252 . -18) (undo-tree-id253 . -20) (undo-tree-id254 . -30) (undo-tree-id255 . -33) (undo-tree-id256 . -33) (undo-tree-id257 . -33) (undo-tree-id258 . -33) (undo-tree-id259 . -33) (undo-tree-id260 . -33) (undo-tree-id261 . -33) (undo-tree-id262 . -33) (undo-tree-id263 . -33) (undo-tree-id264 . -32) (undo-tree-id265 . -32) (undo-tree-id266 . -32) (undo-tree-id267 . -32) (undo-tree-id268 . -32) (undo-tree-id269 . -33) (undo-tree-id270 . -35) (undo-tree-id271 . -40) (undo-tree-id272 . -43) (undo-tree-id273 . -48) (undo-tree-id274 . -54) (undo-tree-id275 . -56) (undo-tree-id276 . -65) (undo-tree-id277 . -68) (undo-tree-id278 . -68) (undo-tree-id279 . -68) (undo-tree-id280 . -68) (undo-tree-id281 . -68) (undo-tree-id282 . -68) (undo-tree-id283 . -68) (undo-tree-id284 . -68) (undo-tree-id285 . -68) (undo-tree-id286 . -68) (undo-tree-id287 . -68) (undo-tree-id288 . -70) (undo-tree-id289 . -70) (undo-tree-id290 . -70) (undo-tree-id291 . -70) (undo-tree-id292 . -70) (undo-tree-id293 . -70) (undo-tree-id294 . -70) (undo-tree-id295 . 5) (undo-tree-id296 . -68) (undo-tree-id297 . -69) (undo-tree-id298 . -69) (undo-tree-id299 . -70) (undo-tree-id300 . -70)) nil (25758 60700 562160 739000) 0 nil])
([nil nil ((#("rater’s feeling about the movie), this time treating sentences as sequences
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id244 . -75) (undo-tree-id245 . -76)) nil (25758 60700 562117 16000) 0 nil])
([nil nil ((#("of words, rather than characters. Then we will show how RNNs can be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 58 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id242 . -67) (undo-tree-id243 . -68)) nil (25758 60700 562112 988000) 0 nil])
([nil nil ((#("used to build an Encoder–Decoder architecture capable of performing
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id240 . -67) (undo-tree-id241 . -68)) nil (25758 60700 562444 86000) 0 nil])
([nil nil ((#("neural machine translation (NMT). For this, we will use the seq2seq API
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id309 . -71) (undo-tree-id310 . -72)) nil (25758 60706 219592 65000) 0 nil] [nil nil ((#("neural machine translation (NMT). For this, we will use the seq2seq API
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id238 . -71) (undo-tree-id239 . -72)) ((139 . 211)) (25758 60700 562103 632000) 0 nil])
([nil nil ((#("provided by the TensorFlow Addons project.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id307 . -42) (undo-tree-id308 . -43)) nil (25758 60706 219584 864000) 0 nil])
nil
([nil nil ((#("In the second part of this chapter, we will look at attention mechanisms.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id311 . -73) (undo-tree-id312 . -74) (t 25758 60706 225954 194000)) nil (25758 60714 88380 639000) 0 nil])
([nil nil ((#("As their name suggests, these are neural network components that learn to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id317 . -73) (undo-tree-id318 . -74) (t 25758 60714 93907 805000)) nil (25758 60736 301171 362000) 0 nil])
([nil nil ((#("select the part of the inputs that the rest of the model should focus on at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id315 . -75) (undo-tree-id316 . -76)) nil (25758 60736 301168 477000) 0 nil])
([nil nil ((#("each time step. First we will see how to boost the performance of an RNN-
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id313 . -73) (undo-tree-id314 . -74)) nil (25758 60736 301162 401000) 0 nil])
([nil nil ((#("based Encoder–Decoder architecture using attention, then we will drop
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id323 . -69) (undo-tree-id324 . -70) (t 25758 60736 309783 346000)) nil (25758 60743 715306 354000) 0 nil])
([nil nil ((#("RNNs altogether and look at a very successful attention-only architecture
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id319 . -73) (undo-tree-id320 . 74) (undo-tree-id321 . -4) (undo-tree-id322 . -74)) nil (25758 60743 715301 384000) 0 nil])
([nil nil ((#("called the Transformer. Finally, we will take a look at some of the most
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id331 . -72) (undo-tree-id332 . -73) (t 25758 60743 721743 917000)) nil (25758 60759 914683 31000) 0 nil])
([nil nil ((#("important advances in NLP in 2018 and 2019, including incredibly
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id329 . -64) (undo-tree-id330 . -65)) nil (25758 60760 320300 255000) 0 nil])
([nil nil ((#("powerful language models such as GPT-2 and BERT, both based on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id345 . -62) (undo-tree-id346 . -63)) nil (25758 60769 292187 476000) 0 nil] [nil nil ((#("powerful language models such as GPT-2 and BERT, both based on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id327 . -62) (undo-tree-id328 . -63)) ((139 . 202)) (25758 60759 914890 128000) 0 nil])
([nil nil ((#("Transformers.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id343 . -13) (undo-tree-id344 . -14)) nil (25758 60769 292185 360000) 0 nil])
([nil nil ((#("Transformers.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id325 . -13) (undo-tree-id326 . -14)) ((139 . 153)) (25758 60759 914669 789000) 0 nil])
([nil nil ((#("Let’s start with a simple and fun model that can write like Shakespeare
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id341 . -71) (undo-tree-id342 . -72)) nil (25758 60769 292182 614000) 0 nil])
nil
([nil nil ((#("(well, sort of).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id333 . -16) (undo-tree-id334 . -15) (undo-tree-id335 . -15) (undo-tree-id336 . 17) (undo-tree-id337 . -1) (undo-tree-id338 . 3) (undo-tree-id339 . -15) (undo-tree-id340 . -17)) nil (25758 60769 292177 523000) 0 nil])
([nil nil ((141 . 142) (t 25758 60769 297615 628000)) nil (25758 60885 98280 17000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19156 . 19157) (nil fontified nil 19123 . 19157) (nil fontified nil 19050 . 19123) (nil fontified nil 18983 . 19050) (nil fontified nil 18908 . 18983) (nil fontified nil 18825 . 18908) (nil fontified nil 18736 . 18825) (nil fontified nil 18648 . 18736) (nil fontified nil 18644 . 18648) (nil fontified nil 18579 . 18644) (nil fontified nil 18507 . 18579) (nil fontified nil 18499 . 18507) (nil fontified nil 18428 . 18499) (nil fontified nil 18356 . 18428) (nil fontified nil 18330 . 18356) (nil fontified nil 18291 . 18330) (nil fontified nil 18238 . 18291) (nil fontified nil 18172 . 18238) (nil fontified nil 18095 . 18172) (nil fontified nil 18072 . 18095) (nil fontified nil 18016 . 18072) (nil fontified nil 17979 . 18016) (nil fontified nil 17919 . 17979) (nil fontified nil 17872 . 17919) (nil fontified nil 17836 . 17872) (nil fontified nil 17776 . 17836) (nil fontified nil 17742 . 17776) (nil fontified nil 17712 . 17742) (nil fontified nil 17638 . 17712) (nil fontified nil 17564 . 17638) (nil fontified nil 17488 . 17564) (nil fontified nil 17417 . 17488) (nil fontified nil 17346 . 17417) (nil fontified nil 17280 . 17346) (nil fontified nil 17206 . 17280) (nil fontified nil 17135 . 17206) (nil fontified nil 17083 . 17135) (nil fontified nil 17021 . 17083) (nil fontified nil 16949 . 17021) (nil fontified nil 16876 . 16949) (nil fontified nil 16751 . 16876) (nil fontified nil 16721 . 16751) (nil fontified nil 16711 . 16721) (nil fontified nil 16650 . 16711) (nil fontified nil 16627 . 16650) (nil fontified nil 16554 . 16627) (nil fontified nil 16527 . 16554) (nil fontified nil 16456 . 16527) (nil fontified nil 16435 . 16456) (nil fontified nil 16380 . 16435) (nil fontified nil 16313 . 16380) (nil fontified nil 16244 . 16313) (nil fontified nil 16168 . 16244) (nil fontified nil 16090 . 16168) (nil fontified nil 16020 . 16090) (nil fontified nil 15945 . 16020) (nil fontified nil 15875 . 15945) (nil fontified nil 15802 . 15875) (nil fontified nil 15729 . 15802) (nil fontified nil 15656 . 15729) (nil fontified nil 15588 . 15656) (nil fontified nil 15525 . 15588) (nil fontified nil 15456 . 15525) (nil fontified nil 15311 . 15456) (nil fontified nil 15239 . 15311) (nil fontified nil 15164 . 15239) (nil fontified nil 15131 . 15164) (nil fontified nil 15059 . 15131) (nil fontified nil 14987 . 15059) (nil fontified nil 14912 . 14987) (nil fontified nil 14837 . 14912) (nil fontified nil 14759 . 14837) (nil fontified nil 14681 . 14759) (nil fontified nil 14605 . 14681) (nil fontified nil 14592 . 14605) (nil fontified nil 14576 . 14592) (nil fontified nil 14502 . 14576) (nil fontified nil 14430 . 14502) (nil fontified nil 14360 . 14430) (nil fontified nil 14289 . 14360) (nil fontified nil 14224 . 14289) (nil fontified nil 14149 . 14224) (nil fontified nil 14075 . 14149) (nil fontified nil 14002 . 14075) (nil fontified nil 13993 . 14002) (nil fontified nil 13961 . 13993) (nil fontified nil 13950 . 13961) (nil fontified nil 13905 . 13950) (nil fontified nil 13880 . 13905) (nil fontified nil 13854 . 13880) (nil fontified nil 13809 . 13854) (nil fontified nil 13758 . 13809) (nil fontified nil 13711 . 13758) (nil fontified nil 13697 . 13711) (nil fontified nil 13621 . 13697) (nil fontified nil 13584 . 13621) (nil fontified nil 13559 . 13584) (nil fontified nil 13507 . 13559) (nil fontified nil 13448 . 13507) (nil fontified nil 13374 . 13448) (nil fontified nil 13318 . 13374) (nil fontified nil 13250 . 13318) (nil fontified nil 13197 . 13250) (nil fontified nil 13155 . 13197) (nil fontified nil 13128 . 13155) (nil fontified nil 13092 . 13128) (nil fontified nil 13056 . 13092) (nil fontified nil 12985 . 13056) (nil fontified nil 12908 . 12985) (nil fontified nil 12833 . 12908) (nil fontified nil 12765 . 12833) (nil fontified nil 12692 . 12765) (nil fontified nil 12618 . 12692) (nil fontified nil 12548 . 12618) (nil fontified nil 12482 . 12548) (nil fontified nil 12411 . 12482) (nil fontified nil 12341 . 12411) (nil fontified nil 12273 . 12341) (nil fontified nil 12196 . 12273) (nil fontified nil 12117 . 12196) (nil fontified nil 12048 . 12117) (nil fontified nil 12013 . 12048) (nil fontified nil 12003 . 12013) (nil fontified nil 11929 . 12003) (nil fontified nil 11924 . 11929) (nil fontified nil 11851 . 11924) (nil fontified nil 11809 . 11851) (nil fontified nil 11770 . 11809) (nil fontified nil 11705 . 11770) (nil fontified nil 11676 . 11705) (nil fontified nil 11622 . 11676) (nil fontified nil 11599 . 11622) (nil fontified nil 11542 . 11599) (nil fontified nil 11468 . 11542) (nil fontified nil 11393 . 11468) (nil fontified nil 11368 . 11393) (nil fontified nil 11328 . 11368) (nil fontified nil 11256 . 11328) (nil fontified nil 11253 . 11256) (nil fontified nil 11230 . 11253) (nil fontified nil 11174 . 11230) (nil fontified nil 11137 . 11174) (nil fontified nil 11092 . 11137) (nil fontified nil 11055 . 11092) (nil fontified nil 11046 . 11055) (nil fontified nil 10982 . 11046) (nil fontified nil 10948 . 10982) (nil fontified nil 10907 . 10948) (nil fontified nil 10832 . 10907) (nil fontified nil 10770 . 10832) (nil fontified nil 10715 . 10770) (nil fontified nil 10643 . 10715) (nil fontified nil 10569 . 10643) (nil fontified nil 10495 . 10569) (nil fontified nil 10348 . 10495) (nil fontified nil 10274 . 10348) (nil fontified nil 10203 . 10274) (nil fontified nil 10132 . 10203) (nil fontified nil 10057 . 10132) (nil fontified nil 10016 . 10057) (nil fontified nil 10009 . 10016) (nil fontified nil 9933 . 10009) (nil fontified nil 9903 . 9933) (nil fontified nil 9861 . 9903) (nil fontified nil 9851 . 9861) (nil fontified nil 9790 . 9851) (nil fontified nil 9767 . 9790) (nil fontified nil 9736 . 9767) (nil fontified nil 9662 . 9736) (nil fontified nil 9594 . 9662) (nil fontified nil 9519 . 9594) (nil fontified nil 9451 . 9519) (nil fontified nil 9382 . 9451) (nil fontified nil 9312 . 9382) (nil fontified nil 9239 . 9312) (nil fontified nil 9188 . 9239) (nil fontified nil 9172 . 9188) (nil fontified nil 9100 . 9172) (nil fontified nil 9030 . 9100) (nil fontified nil 8954 . 9030) (nil fontified nil 8879 . 8954) (nil fontified nil 8810 . 8879) (nil fontified nil 8736 . 8810) (nil fontified nil 8669 . 8736) (nil fontified nil 8598 . 8669) (nil fontified nil 8523 . 8598) (nil fontified nil 8439 . 8523) (nil fontified nil 8365 . 8439) (nil fontified nil 8304 . 8365) (nil fontified nil 8238 . 8304) (nil fontified nil 8167 . 8238) (nil fontified nil 8085 . 8167) (nil fontified nil 8011 . 8085) (nil fontified nil 7940 . 8011) (nil fontified nil 7864 . 7940) (nil fontified nil 7722 . 7864) (nil fontified nil 7646 . 7722) (nil fontified nil 7574 . 7646) (nil fontified nil 7496 . 7574) (nil fontified nil 7427 . 7496) (nil fontified nil 7356 . 7427) (nil fontified nil 7292 . 7356) (nil fontified nil 7218 . 7292) (nil fontified nil 7143 . 7218) (nil fontified nil 7070 . 7143) (nil fontified nil 6999 . 7070) (nil fontified nil 6928 . 6999) (nil fontified nil 6903 . 6928) (nil fontified nil 6818 . 6903) (nil fontified nil 6734 . 6818) (nil fontified nil 6730 . 6734) (nil fontified nil 6660 . 6730) (nil fontified nil 6589 . 6660) (nil fontified nil 6575 . 6589) (nil fontified nil 6544 . 6575) (nil fontified nil 6471 . 6544) (nil fontified nil 6409 . 6471) (nil fontified nil 6333 . 6409) (nil fontified nil 6258 . 6333) (nil fontified nil 6184 . 6258) (nil fontified nil 6109 . 6184) (nil fontified nil 6036 . 6109) (nil fontified nil 5962 . 6036) (nil fontified nil 5840 . 5962) (nil fontified nil 5773 . 5840) (nil fontified nil 5735 . 5773) (nil fontified nil 5725 . 5735) (nil fontified nil 5652 . 5725) (nil fontified nil 5575 . 5652) (nil fontified nil 5505 . 5575) (nil fontified nil 5491 . 5505) (nil fontified nil 5413 . 5491) (nil fontified nil 5334 . 5413) (nil fontified nil 5291 . 5334) (nil fontified nil 5217 . 5291) (nil fontified nil 5137 . 5217) (nil fontified nil 5065 . 5137) (nil fontified nil 4992 . 5065) (nil fontified nil 4917 . 4992) (nil fontified nil 4846 . 4917) (nil fontified nil 4773 . 4846) (nil fontified nil 4696 . 4773) (nil fontified nil 4630 . 4696) (nil fontified nil 4559 . 4630) (nil fontified nil 4483 . 4559) (nil fontified nil 4407 . 4483) (nil fontified nil 4355 . 4407) (nil fontified nil 4283 . 4355) (nil fontified nil 4208 . 4283) (nil fontified nil 4141 . 4208) (nil fontified nil 4067 . 4141) (nil fontified nil 3990 . 4067) (nil fontified nil 3917 . 3990) (nil fontified nil 3774 . 3917) (nil fontified nil 3700 . 3774) (nil fontified nil 3627 . 3700) (nil fontified nil 3551 . 3627) (nil fontified nil 3545 . 3551) (nil fontified nil 3472 . 3545) (nil fontified nil 3401 . 3472) (nil fontified nil 3321 . 3401) (nil fontified nil 3245 . 3321) (nil fontified nil 3173 . 3245) (nil fontified nil 3139 . 3173) (nil fontified nil 3091 . 3139) (nil fontified nil 3011 . 3091) (nil fontified nil 2939 . 3011) (nil fontified nil 2937 . 2939) (nil fontified nil 2864 . 2937) (nil fontified nil 2801 . 2864) (nil fontified nil 2727 . 2801) (nil fontified nil 2654 . 2727) (nil fontified nil 2583 . 2654) (nil fontified nil 2569 . 2583) (nil fontified nil 2516 . 2569) (nil fontified nil 2497 . 2516) (nil fontified nil 2453 . 2497) (nil fontified nil 2395 . 2453) (nil fontified nil 2318 . 2395) (nil fontified nil 2241 . 2318) (nil fontified nil 2172 . 2241) (nil fontified nil 2097 . 2172) (nil fontified nil 1984 . 2097) (nil fontified nil 1920 . 1984) (nil fontified nil 1884 . 1920) (nil fontified nil 1807 . 1884) (nil fontified nil 1732 . 1807) (nil fontified nil 1652 . 1732) (nil fontified nil 1581 . 1652) (nil fontified nil 1505 . 1581) (nil fontified nil 1429 . 1505) (nil fontified nil 1401 . 1429) (nil fontified nil 1375 . 1401) (nil fontified nil 1307 . 1375) (nil fontified nil 1242 . 1307) (nil fontified nil 1224 . 1242) (nil fontified nil 1156 . 1224) (nil fontified nil 1087 . 1156) (nil fontified nil 1057 . 1087) (nil fontified nil 982 . 1057) (nil fontified nil 907 . 982) (nil fontified nil 839 . 907) (nil fontified nil 766 . 839) (nil fontified nil 746 . 766) (nil fontified nil 696 . 746) (nil fontified nil 638 . 696) (nil fontified nil 584 . 638) (nil fontified nil 548 . 584) (nil fontified nil 475 . 548) (nil fontified nil 402 . 475) (nil fontified nil 330 . 402) (nil fontified nil 263 . 330) (nil fontified nil 194 . 263) (nil fontified nil 180 . 194) (nil fontified nil 142 . 180) (142 . 19157)) nil (25758 60885 98265 838000) 0 nil])
([nil nil ((178 . 179) (#("
" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t)) . -178) (undo-tree-id440 . -1) (nil keymap (keymap) 140 . 141) (nil face org-level-1 140 . 141) (nil line-prefix #("  " 0 2 (face org-indent)) 140 . 141) (nil wrap-prefix #("  " 0 2 (face org-indent)) 140 . 141) (nil fontified nil 140 . 141) (140 . 141) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 140) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -141) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) 140) nil (25758 60885 98189 8000) 0 nil])
([nil nil ((#("In a famous 2015 blog post titled “The Unreasonable Effectiveness of
" 0 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 193) (undo-tree-id438 . -68) (undo-tree-id439 . -69)) nil (25758 60885 98150 436000) 0 nil])
([nil nil ((#("Recurrent Neural Networks,” Andrej Karpathy showed how to train an
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 193) (undo-tree-id436 . -66) (undo-tree-id437 . -67)) nil (25758 60885 98146 897000) 0 nil])
([nil nil ((#("RNN to predict the next character in a sentence" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 193) (undo-tree-id432 . -46) (undo-tree-id433 . 47) (undo-tree-id434 . -3) (undo-tree-id435 . -47)) nil (25758 60885 98143 540000) 0 nil])
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 193) (undo-tree-id430 . -1) (undo-tree-id431 . -2)) nil (25758 60885 98136 882000) 0 nil])
([nil nil ((215 . 216) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -215) (undo-tree-id429 . -1) 193) nil (25758 60885 98133 2000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -210) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) 211 (#("then" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 211) (undo-tree-id425 . -3) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4)) nil (25758 60885 98128 172000) 0 nil])
([nil nil ((405 . 408) (401 . 405) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -401) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -402) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -403) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (apply yas--snippet-revive 393 433 #s(yas--snippet nil (#s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil))) #s(yas--exit 422 nil) 7 nil #s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil)) nil nil)) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -404) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . 1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) 405 (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil))) #s(yas--exit 422 nil) 7 nil #s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -423) (undo-tree-id403 . -2) (393 . 436) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 393) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) 395 (393 . 395) (392 . 393) 360) nil (25758 60885 98106 276000) 0 nil])
([nil nil ((nil rear-nonsticky nil 440 . 441) (nil fontified nil 434 . 441) (434 . 441) (#("src" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . 434) (undo-tree-id347 . -2) (undo-tree-id348 . -3) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -2) (undo-tree-id354 . 3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -2) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) 437) nil (25758 60885 98042 770000) 0 nil])
([nil nil ((#("result outputs" 0 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 410) (undo-tree-id495 . -13) (undo-tree-id496 . -14) (undo-tree-id497 . -14) (t 25758 60885 105171 644000)) nil (25758 60892 625753 643000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -408) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . 1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -409) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 410) nil (25758 60892 625746 485000) 0 nil])
([nil nil ((#("#+end_example
" 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 6 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-end-line) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 412) (undo-tree-id514 . -13) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . 1) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -12) (undo-tree-id522 . -12) (undo-tree-id523 . -12) (undo-tree-id524 . -12) (undo-tree-id525 . -12) (undo-tree-id526 . -14) 424 (t 25758 60892 633149 829000)) nil (25758 60906 30453 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 593 . 594) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -607) (593 . 608) 586) nil (25758 60906 30442 976000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (:inherit (org-block)))) . 409) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1)) nil (25758 60906 30440 442000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (:inherit (org-block)))) . 409) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1)) nil (25758 60906 30435 196000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (:inherit (org-block)))) . 409) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1)) nil (25758 60906 30427 473000) 0 nil])
([nil nil ((283 . 284) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -283) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 193 (t 25758 60906 85112 798000)) nil (25758 60920 848380 336000) 0 nil])
([nil nil ((356 . 357) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -356) (undo-tree-id536 . -1) (undo-tree-id537 . -1) 283) nil (25758 60920 848377 581000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -354) (nil fontified nil 353 . 354) (nil wrap-prefix #("  " 0 2 (face org-indent)) 353 . 354) (353 . 354) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -273) (undo-tree-id535 . -1) (nil fontified nil 272 . 273) (nil wrap-prefix #("  " 0 2 (face org-indent)) 272 . 273) (272 . 273) 356) nil (25758 60920 848372 909000) 0 nil])
([nil nil ((268 . 269)) nil (25758 60920 848369 877000) 0 nil])
([nil nil ((273 . 274) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -273) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) 269) nil (25758 60920 848368 350000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -347) (nil fontified nil 346 . 347) (nil wrap-prefix #("  " 0 2 (face org-indent)) 346 . 347) (346 . 347) 273) nil (25758 60920 848363 959000) 0 nil])
([nil nil ((354 . 355) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -354) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . 1) (undo-tree-id531 . -1) 347) nil (25758 60920 848359 565000) 0 nil])
([nil nil ((376 . 377) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 376) (undo-tree-id545 . -1) (t 25758 60920 857074 957000)) nil (25758 60942 912092 659000) 0 nil])
([nil nil ((#(":PANDARUS:" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 383) (undo-tree-id540 . -9) (undo-tree-id541 . 9) (undo-tree-id542 . -9) (undo-tree-id543 . -10) (undo-tree-id544 . -10)) nil (25758 60942 912089 576000) 0 nil])
([nil nil ((383 . 384)) nil (25758 60942 912072 687000) 0 nil])
([nil nil ((583 . 584) (t 25758 60942 921023 764000)) nil (25758 60971 999957 570000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (:inherit (org-block)))) . 583) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1)) nil (25758 60971 999954 973000) 0 nil])
([nil nil ((596 . 597) 583) nil (25758 60971 999935 585000) 0 nil])
([nil nil ((#("Not exactly a masterpiece, but it is still impressive that the model was
able to learn words, grammar, proper punctuation, and more, just by
learning to predict the next character in a sentence. " 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 141 195 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 598) (undo-tree-id554 . -194) (undo-tree-id555 . -194) (undo-tree-id556 . -194) (undo-tree-id557 . -195) (undo-tree-id558 . -194) (undo-tree-id559 . -2) (undo-tree-id560 . -10) (undo-tree-id561 . -12) (undo-tree-id562 . -24) (undo-tree-id563 . -25) (undo-tree-id564 . -29) (undo-tree-id565 . -32) (undo-tree-id566 . -35) (undo-tree-id567 . -41) (undo-tree-id568 . -52) (undo-tree-id569 . -57) (undo-tree-id570 . -61) (undo-tree-id571 . -67) (undo-tree-id572 . -71) (undo-tree-id573 . -76) (undo-tree-id574 . -79) (undo-tree-id575 . -85) (undo-tree-id576 . -91) (undo-tree-id577 . -92) (undo-tree-id578 . -100) (undo-tree-id579 . -101) (undo-tree-id580 . -108) (undo-tree-id581 . -120) (undo-tree-id582 . -121) (undo-tree-id583 . -125) (undo-tree-id584 . -130) (undo-tree-id585 . -131) (undo-tree-id586 . -136) (undo-tree-id587 . -139) (undo-tree-id588 . -148) (undo-tree-id589 . -151) (undo-tree-id590 . -159) (undo-tree-id591 . -163) (undo-tree-id592 . -168) (undo-tree-id593 . -178) (undo-tree-id594 . -181) (undo-tree-id595 . -183) (undo-tree-id596 . -192) (undo-tree-id597 . -193) (undo-tree-id598 . -195) (undo-tree-id599 . -194) (undo-tree-id600 . -195) (undo-tree-id601 . -194) (undo-tree-id602 . -194) (undo-tree-id603 . -195) 792 (t 25758 60972 52965 536000)) nil (25758 60993 459925 712000) 0 nil])
([nil nil ((#("Let’s look at how to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 598) (undo-tree-id607 . -20) (undo-tree-id608 . 21) (undo-tree-id609 . -21) (t 25758 60993 460929 223000)) nil (25758 61005 119133 333000) 0 nil])
([nil nil ((#("build a Char-RNN, step by step, starting with the creation of the dataset.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 598) (undo-tree-id604 . -74) (undo-tree-id605 . 75) (undo-tree-id606 . -75)) nil (25758 61005 119129 793000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 596) (598 . 600)) nil (25758 61005 119113 173000) 0 nil])
([nil nil ((639 . 640) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 639) (undo-tree-id611 . -1) (t 25758 61005 124911 656000)) nil (25758 61022 831820 318000) 0 nil])
([nil nil ((669 . 670) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 669) (undo-tree-id610 . -1)) nil (25758 61022 831814 691000) 0 nil])
([nil nil ((689 . 690) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 689) (undo-tree-id612 . -1) (t 25758 61022 840887 868000)) nil (25758 61026 150595 329000) 0 nil])
([nil nil ((763 . 764) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 763) (undo-tree-id613 . -1) (t 25758 61026 152883 800000)) nil (25758 61041 322539 279000) 0 nil])
([nil nil ((796 . 802) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil))) #s(yas--exit 820 nil) 8 nil #s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -814) (undo-tree-id627 . -2) (784 . 827) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 784) (undo-tree-id628 . -2) (undo-tree-id629 . -2) (undo-tree-id630 . -2) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -2) (undo-tree-id635 . -2) (undo-tree-id636 . -2) (undo-tree-id637 . -2) 786 (784 . 786) (783 . 784) (t 25758 61041 324866 658000) 766) nil (25758 61056 712133 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 784 831 #s(yas--snippet nil (#s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil))) #s(yas--exit 820 nil) 8 nil #s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil)) nil nil))) nil (25758 61056 712123 879000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 819) (undo-tree-id626 . -1)) nil (25758 61056 712123 50000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 819) (undo-tree-id625 . -1)) nil (25758 61056 712121 702000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 819) (undo-tree-id624 . -1)) nil (25758 61056 712120 210000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 819) (undo-tree-id614 . -9) (undo-tree-id615 . -9) (undo-tree-id616 . -10) (undo-tree-id617 . -10) (undo-tree-id618 . -10) (undo-tree-id619 . -10) (undo-tree-id620 . -9) (undo-tree-id621 . -9) (undo-tree-id622 . -9) (undo-tree-id623 . -10)) nil (25758 61056 712117 773000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1005 . 1006) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1015) (1005 . 1016) 978) nil (25758 61056 712095 938000) 0 nil])
([nil nil ((978 . 982) (t 25758 61056 764851 670000)) nil (25758 61076 910997 971000) 0 nil])
([nil nil ((1072 . 1074) (t 25758 61076 964835 683000)) nil (25758 61107 381103 865000) 0 nil])
([nil nil ((#("One option is to create
" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1074) (undo-tree-id670 . -23) (undo-tree-id671 . 24) (undo-tree-id672 . -24) (undo-tree-id673 . -24) (t 25758 61097 448823 519000)) nil (25758 61113 727817 248000) 0 nil] [nil nil ((#("One option is to create
" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1074) (undo-tree-id638 . -23) (undo-tree-id639 . 24) (undo-tree-id640 . -24) (undo-tree-id641 . -24) (t 25758 61097 448823 519000)) ((1074 . 1098)) (25758 61107 380703 634000) 0 nil])
([nil nil ((#("a custom preprocessing layer, as we did in Chapter 13" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1074) (undo-tree-id667 . -52) (undo-tree-id668 . 53) (undo-tree-id669 . -53)) nil (25758 61113 727813 503000) 0 nil])
nil
([nil nil ((#(". " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1074) (undo-tree-id664 . -1) (undo-tree-id665 . 2) (undo-tree-id666 . -2)) nil (25758 61113 727772 715000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1073) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1)) nil (25758 61113 727766 693000) 0 nil])
([nil nil ((1122 . 1123) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1122) (undo-tree-id674 . -1) (t 25758 61113 736816 644000)) nil (25758 61119 881499 577000) 0 nil])
([nil nil ((1093 . 1094) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1093) (undo-tree-id679 . -1) 1092 (t 25758 61119 888814 676000)) nil (25758 61130 561416 407000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -1151) (nil fontified nil 1150 . 1151) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1150 . 1151) (1150 . 1151) 1093) nil (25758 61130 561414 62000) 0 nil])
([nil nil ((1141 . 1142)) nil (25758 61130 561412 234000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 1142) (undo-tree-id675 . 1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1)) nil (25758 61130 561408 333000) 0 nil])
([nil nil ((1150 . 1151) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1150) (undo-tree-id680 . -1) 1142 (t 25758 61130 568812 60000)) nil (25758 61133 658408 205000) 0 nil])
([nil nil ((1164 . 1165) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1164) (undo-tree-id681 . -1) 1142 (t 25758 61133 660811 489000)) nil (25758 61156 733455 885000) 0 nil])
([nil nil ((1188 . 1189)) nil (25758 61156 733441 144000) 0 nil])
([nil nil ((#("(it does not start at 0, so we can use that value for masking, as
we will see later in this chapter)" 0 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 66 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1332) (undo-tree-id691 . -99) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -100) 1333 (t 25758 61156 788809 815000)) nil (25758 61187 221442 421000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1331) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1)) nil (25758 61187 221433 708000) 0 nil])
([nil nil ((1347 . 1351) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -1347) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -1348) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -1349) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -1350) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) 1351 (1345 . 1351) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil))) #s(yas--exit 1369 nil) 9 nil #s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1363) (undo-tree-id800 . -2) (1333 . 1376) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1333) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) 1335 (1333 . 1335) (1332 . 1333) (t 25758 61187 228814 347000) 1331) nil (25758 61220 801380 576000) 0 nil])
([nil nil ((apply yas--snippet-revive 1333 1380 #s(yas--snippet nil (#s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil))) #s(yas--exit 1369 nil) 9 nil #s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil)) nil nil))) nil (25758 61220 801351 177000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1369) (undo-tree-id765 . -1)) nil (25758 61220 801350 325000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1368) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1)) nil (25758 61220 801347 418000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 1369) (undo-tree-id752 . -9) (undo-tree-id753 . -9) (undo-tree-id754 . -9) (undo-tree-id755 . -9) (undo-tree-id756 . -10)) nil (25758 61220 801341 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1545 . 1546) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1555) (1545 . 1556) 1433) nil (25758 61220 800893 352000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1368) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1)) nil (25758 61221 202625 847000) 0 nil])
([nil nil ((1475 . 1476) (1474 . 1475)) nil (25758 61236 252760 253000) 0 nil] [nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 1545) (undo-tree-id737 . -9) (undo-tree-id738 . -9) (undo-tree-id739 . -10)) ((1545 . 1555)) (25758 61220 801639 514000) 0 nil])
([nil nil ((#("#We set char_level=True to get character-level encoding rather than the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 4 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 7 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 8 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 13 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 18 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 19 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 23 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 1475) (undo-tree-id814 . -71) (undo-tree-id815 . 71) (undo-tree-id816 . -72) (undo-tree-id817 . -72) (undo-tree-id818 . -31) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -72)) nil (25758 61236 252758 897000) 0 nil])
([nil nil ((#("tokenizer = keras.preprocessing.text.Tokenizer(char_level=True)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 9 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 47 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 51 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 52 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 58 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 62 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 1368) (undo-tree-id698 . -63) (undo-tree-id699 . -64) (undo-tree-id700 . -64) (undo-tree-id701 . -64) (undo-tree-id702 . -64) (undo-tree-id703 . -64) (undo-tree-id704 . -64) (undo-tree-id705 . -64) (undo-tree-id706 . -64) (undo-tree-id707 . -64) (undo-tree-id708 . -64) (undo-tree-id709 . -64) (undo-tree-id710 . -64) (undo-tree-id711 . -64) (undo-tree-id712 . -64) (undo-tree-id713 . -64) (undo-tree-id714 . -64) (undo-tree-id715 . -64) (undo-tree-id716 . -64) (undo-tree-id717 . -64) (undo-tree-id718 . -64) (undo-tree-id719 . -64) (undo-tree-id720 . -64) (undo-tree-id721 . -64) (undo-tree-id722 . -64) (undo-tree-id723 . -64) (undo-tree-id724 . -64) (undo-tree-id725 . -64) (undo-tree-id726 . -64) (undo-tree-id727 . -63) (undo-tree-id728 . -64) (undo-tree-id729 . -64) (undo-tree-id730 . 64) (undo-tree-id731 . -9) (undo-tree-id732 . -64) (undo-tree-id733 . -64) (undo-tree-id734 . -64) (undo-tree-id735 . -64) (undo-tree-id736 . -64) 1432) ((1368 . 1432)) (25758 61220 800874 353000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1484 . 1485) (#("
" 0 1 (rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1556) (1484 . 1557) 1475) nil (25758 61236 252752 652000) 0 nil])
nil
([nil nil ((#("#" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1485) (undo-tree-id812 . -1) (undo-tree-id813 . -1)) nil (25758 61236 252748 588000) 0 nil])
([nil nil ((1585 . 1586) (t 25758 61236 260836 708000)) nil (25758 61259 822006 691000) 0 nil])
([nil nil ((#("(but you can set lower=False if you do not want
that)" 0 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 39 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 48 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1653) (undo-tree-id827 . -52) (undo-tree-id828 . -53) 1632) nil (25758 61259 822004 906000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1652) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1)) nil (25758 61259 821997 875000) 0 nil])
([nil nil ((1654 . 1656) (t 25758 61259 828853 641000)) nil (25758 61263 962289 893000) 0 nil])
([nil nil ((#("(or a list of sentences)" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1696) (undo-tree-id834 . -23) (undo-tree-id835 . -24) 1656 (t 25758 61263 968857 8000)) nil (25758 61272 263674 798000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1695) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1)) nil (25758 61272 263669 10000) 0 nil])
([nil nil ((1851 . 1855) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -1851) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) 1852 (1849 . 1852) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil))) #s(yas--exit 1873 nil) 10 nil #s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1867) (undo-tree-id847 . -2) (1837 . 1880) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1837) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) 1839 (1837 . 1839) (1836 . 1837) (1835 . 1836) (t 25758 61272 272864 108000) 1830) nil (25758 61299 47026 133000) 0 nil])
([nil nil ((apply yas--snippet-revive 1837 1884 #s(yas--snippet nil (#s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil))) #s(yas--exit 1873 nil) 10 nil #s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil)) nil nil))) nil (25758 61299 47012 804000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1872) (undo-tree-id841 . -2) (undo-tree-id842 . -3)) nil (25758 61299 47011 527000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 1872) (undo-tree-id836 . -9) (undo-tree-id837 . -9) (undo-tree-id838 . -9) (undo-tree-id839 . -9) (undo-tree-id840 . -10)) nil (25758 61299 47008 737000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2145 . 2146) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2155) (2145 . 2156) 2073) nil (25758 61299 46990 908000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 1872) (undo-tree-id880 . -3) (undo-tree-id881 . 4) (undo-tree-id882 . -1) (undo-tree-id883 . -4) (t 25758 61299 56890 89000)) nil (25758 61317 573107 834000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1931) (undo-tree-id876 . -3) (undo-tree-id877 . 4) (undo-tree-id878 . -1) (undo-tree-id879 . -4)) nil (25758 61317 573104 232000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1994) (undo-tree-id872 . -3) (undo-tree-id873 . 4) (undo-tree-id874 . -1) (undo-tree-id875 . -4)) nil (25758 61317 573100 456000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2061) (undo-tree-id868 . -3) (undo-tree-id869 . 4) (undo-tree-id870 . -1) (undo-tree-id871 . -4)) nil (25758 61317 573096 688000) 0 nil])
([nil nil ((1911 . 1912) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -1911) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) 1872) nil (25758 61317 573088 955000) 0 nil])
([nil nil ((1912 . 1913)) nil (25758 61317 573049 994000) 0 nil])
([nil nil ((1980 . 1982)) nil (25758 61317 573048 865000) 0 nil])
([nil nil ((1982 . 1983) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -1982) (undo-tree-id859 . 1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) 1981) nil (25758 61317 573044 979000) 0 nil])
([nil nil ((2146 . 2147) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2146) (undo-tree-id922 . -1) (t 25758 61317 628910 767000)) nil (25758 61431 392525 514000) 0 nil])
([nil nil ((2213 . 2214)) nil (25758 61431 392516 689000) 0 nil])
([nil nil ((2214 . 2217) (#("(we" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2214) (undo-tree-id911 . -2) (undo-tree-id912 . 3) (undo-tree-id913 . -2) (undo-tree-id914 . -2) (undo-tree-id915 . -3) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) 2216) nil (25758 61431 392515 358000) 0 nil])
([nil nil ((2217 . 2218) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2217) (undo-tree-id907 . 1) (undo-tree-id908 . 1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) 2216) nil (25758 61431 392505 694000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2278) (undo-tree-id902 . -1) (undo-tree-id903 . 1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1)) nil (25758 61431 392501 307000) 0 nil])
([nil nil ((2292 . 2298) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil))) #s(yas--exit 2316 nil) 11 nil #s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2310) (undo-tree-id891 . -2) (2280 . 2323) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2280) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -2) (undo-tree-id899 . -2) (undo-tree-id900 . -2) (undo-tree-id901 . -2) 2282 (2280 . 2282) (2279 . 2280)) nil (25758 61431 392495 135000) 0 nil])
([nil nil ((apply yas--snippet-revive 2280 2327 #s(yas--snippet nil (#s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil))) #s(yas--exit 2316 nil) 11 nil #s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil)) nil nil))) nil (25758 61431 392052 327000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2315) (undo-tree-id889 . -2) (undo-tree-id890 . -3)) nil (25758 61431 392051 287000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 2315) (undo-tree-id884 . -9) (undo-tree-id885 . -9) (undo-tree-id886 . -9) (undo-tree-id887 . -9) (undo-tree-id888 . -10)) nil (25758 61431 392048 457000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2389 . 2390) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2399) (2389 . 2400) 2388) nil (25758 61431 392034 516000) 0 nil])
([nil nil ((2387 . 2388) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -2387) (undo-tree-id923 . -1) (undo-tree-id924 . -1) 2362 (t 25758 61431 401080 416000)) nil (25758 61455 18416 656000) 0 nil])
([nil nil ((2600 . 2602) (t 25758 61440 729097 314000)) nil (25758 61458 970652 36000) 0 nil] [nil nil ((2601 . 2604) (t 25758 61440 729097 314000)) ((#("
* " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 2601) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2)) (25758 61455 17068 848000) 0 nil])
([nil nil ((#("Before we continue, we need to split the dataset into a training set, a
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2400) (undo-tree-id939 . -71) (undo-tree-id940 . -72) (undo-tree-id941 . -72) (t 25758 61458 981131 571000)) nil (25758 61486 379851 841000) 0 nil])
nil
([nil nil ((#("validation set, and a test set. We can’t just shuffle all the characters in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2400) (undo-tree-id936 . -79) (undo-tree-id937 . -80) (undo-tree-id938 . -80)) nil (25758 61486 379848 465000) 0 nil])
([nil nil ((#("text, so how do you split a sequential dataset?
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2400) (undo-tree-id929 . -47) (undo-tree-id930 . -48) (undo-tree-id931 . -48) (undo-tree-id932 . -48) (undo-tree-id933 . 9) (undo-tree-id934 . -46) (undo-tree-id935 . -48)) nil (25758 61486 379842 505000) 0 nil])
([nil nil ((#("For example, we can take the first 90% of
the text for the training set, then the next 5% for the validation set, and the
final 5% for the test set. It would also be a good idea to leave a gap
between these sets to avoid the risk of a paragraph overlapping over two
sets.
" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 22 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 122 193 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 193 266 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 266 272 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2542) (undo-tree-id942 . -271) (undo-tree-id943 . -271) (undo-tree-id944 . -271) (undo-tree-id945 . -272) (undo-tree-id946 . -271) (undo-tree-id947 . -2) (undo-tree-id948 . -10) (undo-tree-id949 . -11) (undo-tree-id950 . -14) (undo-tree-id951 . -18) (undo-tree-id952 . -23) (undo-tree-id953 . -27) (undo-tree-id954 . -33) (undo-tree-id955 . -37) (undo-tree-id956 . -40) (undo-tree-id957 . -44) (undo-tree-id958 . -49) (undo-tree-id959 . -53) (undo-tree-id960 . -57) (undo-tree-id961 . -66) (undo-tree-id962 . -70) (undo-tree-id963 . -71) (undo-tree-id964 . -76) (undo-tree-id965 . -80) (undo-tree-id966 . -85) (undo-tree-id967 . -88) (undo-tree-id968 . -92) (undo-tree-id969 . -96) (undo-tree-id970 . -107) (undo-tree-id971 . -111) (undo-tree-id972 . -112) (undo-tree-id973 . -116) (undo-tree-id974 . -120) (undo-tree-id975 . -126) (undo-tree-id976 . -129) (undo-tree-id977 . -133) (undo-tree-id978 . -137) (undo-tree-id979 . -142) (undo-tree-id980 . -146) (undo-tree-id981 . -147) (undo-tree-id982 . -150) (undo-tree-id983 . -156) (undo-tree-id984 . -161) (undo-tree-id985 . -164) (undo-tree-id986 . -166) (undo-tree-id987 . -171) (undo-tree-id988 . -176) (undo-tree-id989 . -179) (undo-tree-id990 . -185) (undo-tree-id991 . -187) (undo-tree-id992 . -191) (undo-tree-id993 . -199) (undo-tree-id994 . -205) (undo-tree-id995 . -210) (undo-tree-id996 . -213) (undo-tree-id997 . -219) (undo-tree-id998 . -271) (undo-tree-id999 . -271) (undo-tree-id1000 . -272) 2813 (t 25758 61486 389185 864000)) nil (25758 61543 398684 306000) 0 nil])
([nil nil ((2542 . 2544)) nil (25758 61543 398633 689000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (t 25758 61543 409309 119000)) nil (25758 61554 401284 200000) 0 nil])
([nil nil ((#("When dealing with time series, you would in general split across time,: for
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1039 . -75) (undo-tree-id1040 . 76) (undo-tree-id1041 . 36) (undo-tree-id1042 . -3) (undo-tree-id1043 . -11) (undo-tree-id1044 . -16) (undo-tree-id1045 . -21) (undo-tree-id1046 . -28) (undo-tree-id1047 . -29) (undo-tree-id1048 . -33) (undo-tree-id1049 . -39) (undo-tree-id1050 . -42) (undo-tree-id1051 . -50) (undo-tree-id1052 . -56) (undo-tree-id1053 . -63) (undo-tree-id1054 . -68) (undo-tree-id1055 . -70) (undo-tree-id1056 . -74) (undo-tree-id1057 . -6) (undo-tree-id1058 . -6) (undo-tree-id1059 . -13) (undo-tree-id1060 . -76) (undo-tree-id1061 . -76) (t 25758 61554 409334 397000)) nil (25758 61583 640795 19000) 0 nil])
([nil nil ((#("example, you might take the years 2000 to 2012 for the training set, the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1020 . -72) (undo-tree-id1021 . 73) (undo-tree-id1022 . 73) (undo-tree-id1023 . -6) (undo-tree-id1024 . -13) (undo-tree-id1025 . -19) (undo-tree-id1026 . -24) (undo-tree-id1027 . -28) (undo-tree-id1028 . -34) (undo-tree-id1029 . -39) (undo-tree-id1030 . -42) (undo-tree-id1031 . -47) (undo-tree-id1032 . -51) (undo-tree-id1033 . -55) (undo-tree-id1034 . -64) (undo-tree-id1035 . -67) (undo-tree-id1036 . -69) (undo-tree-id1037 . -73) (undo-tree-id1038 . -73)) nil (25758 61583 640739 309000) 0 nil])
([nil nil ((#("years 2013 to 2015 for the validation set, and the years 2016 to 2018 for
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1016 . -73) (undo-tree-id1017 . 74) (undo-tree-id1018 . 74) (undo-tree-id1019 . -74)) nil (25758 61583 641077 58000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2611) (nil fontified nil 2610 . 2611) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2610 . 2611) (2610 . 2611) 2543) nil (25758 61596 947094 957000) 0 nil] [nil nil ((#("the test set. However, in some cases you may be able to split along otherdimensions, which will give you a longer time period to train on. For
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1012 . -142) (undo-tree-id1013 . 143) (undo-tree-id1014 . 143) (undo-tree-id1015 . -143)) ((2543 . 2686)) (25758 61583 640711 594000) 0 nil])
([nil nil ((#("the test set. However, in some cases you may be able to split along
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1076 . -67) (undo-tree-id1077 . 68) (undo-tree-id1078 . 68) (undo-tree-id1079 . -68) (undo-tree-id1080 . -68) (undo-tree-id1081 . -68) (undo-tree-id1082 . -68)) nil (25758 61596 947093 116000) 0 nil])
nil
([nil nil ((#("otherdimensions, which will give you a longer time period to train on. For
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1068 . -74) (undo-tree-id1069 . 75) (undo-tree-id1070 . 75) (undo-tree-id1071 . -74) (undo-tree-id1072 . 1) (undo-tree-id1073 . 75) (undo-tree-id1074 . -15) (undo-tree-id1075 . -75)) nil (25758 61600 750994 729000) 0 nil])
([nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1107 . -72) (undo-tree-id1108 . 73) (undo-tree-id1109 . 73) (undo-tree-id1110 . 73) (undo-tree-id1111 . 73) (undo-tree-id1112 . -73)) nil (25758 61623 657469 946000) 0 nil] [nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1083 . -72) (undo-tree-id1084 . 73) (undo-tree-id1085 . 73) (undo-tree-id1086 . 73) (undo-tree-id1087 . 73) (undo-tree-id1088 . -73)) ((2543 . 2616)) (25758 61600 750771 890000) 0 nil] [nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1062 . -72) (undo-tree-id1063 . 73) (undo-tree-id1064 . 73) (undo-tree-id1065 . 73) (undo-tree-id1066 . 73) (undo-tree-id1067 . -73)) ((2543 . 2616)) (25758 61596 947077 553000) 0 nil])
([nil nil ((#("from 2000 to 2018, you might be able to split this data across the different
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1101 . -76) (undo-tree-id1102 . 77) (undo-tree-id1103 . 77) (undo-tree-id1104 . 77) (undo-tree-id1105 . 77) (undo-tree-id1106 . -77)) nil (25758 61623 657465 656000) 0 nil])
nil
nil
([nil nil ((#("companies. It’s very likely that many of these companies will be strongly
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1095 . -73) (undo-tree-id1096 . 74) (undo-tree-id1097 . 74) (undo-tree-id1098 . 74) (undo-tree-id1099 . 74) (undo-tree-id1100 . -74)) nil (25758 61623 657679 861000) 0 nil])
([nil nil ((#("correlated, though (e.g., whole economic sectors may go up or down
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1119 . -66) (undo-tree-id1120 . 67) (undo-tree-id1121 . 67) (undo-tree-id1122 . 67) (undo-tree-id1123 . 67) (undo-tree-id1124 . -67)) nil (25758 61657 411739 975000) 0 nil] [nil nil ((#("correlated, though (e.g., whole economic sectors may go up or down
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1089 . -66) (undo-tree-id1090 . 67) (undo-tree-id1091 . 67) (undo-tree-id1092 . 67) (undo-tree-id1093 . 67) (undo-tree-id1094 . -67)) ((2543 . 2610)) (25758 61623 657451 142000) 0 nil])
([nil nil ((#("jointly), and if you have correlated companies across the training set and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1149 . -74) (undo-tree-id1150 . 75) (undo-tree-id1151 . 75) (undo-tree-id1152 . 75) (undo-tree-id1153 . 75) (undo-tree-id1154 . -75)) nil (25758 61665 894085 465000) 0 nil] [nil nil ((#("jointly), and if you have correlated companies across the training set and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1131 . -74) (undo-tree-id1132 . 75) (undo-tree-id1133 . 75) (undo-tree-id1134 . 75) (undo-tree-id1135 . 75) (undo-tree-id1136 . -75)) ((2543 . 2618)) (25758 61656 954717 428000) 0 nil] [nil nil ((#("jointly), and if you have correlated companies across the training set and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1113 . -74) (undo-tree-id1114 . 75) (undo-tree-id1115 . 75) (undo-tree-id1116 . 75) (undo-tree-id1117 . 75) (undo-tree-id1118 . -75)) ((2543 . 2618)) (25758 61648 129152 926000) 0 nil])
nil
([nil nil ((#("the test set your test set will not be as useful, as its measure of the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1143 . -71) (undo-tree-id1144 . 72) (undo-tree-id1145 . 72) (undo-tree-id1146 . 72) (undo-tree-id1147 . 72) (undo-tree-id1148 . -72)) nil (25758 61665 894080 459000) 0 nil])
([nil nil ((#("the test set your test set will not be as useful, as its measure of the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1125 . -71) (undo-tree-id1126 . 72) (undo-tree-id1127 . 72) (undo-tree-id1128 . 72) (undo-tree-id1129 . 72) (undo-tree-id1130 . -72)) ((2543 . 2615)) (25758 61656 954499 205000) 0 nil])
nil
([nil nil ((#("generalization error will be optimistically biased.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1137 . -51) (undo-tree-id1138 . 52) (undo-tree-id1139 . 52) (undo-tree-id1140 . 52) (undo-tree-id1141 . 52) (undo-tree-id1142 . -52)) nil (25758 61665 894071 635000) 0 nil])
nil
([nil nil ((2543 . 2544) (#("So, i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1200 . -4) (undo-tree-id1201 . 5) (undo-tree-id1202 . -4) (undo-tree-id1203 . 5) (undo-tree-id1204 . 5) (undo-tree-id1205 . -4) (undo-tree-id1206 . -1) (undo-tree-id1207 . -2) (undo-tree-id1208 . -5) (undo-tree-id1209 . -5) (undo-tree-id1210 . -4) (undo-tree-id1211 . -1) (undo-tree-id1212 . -2) (undo-tree-id1213 . -3) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -5) 2547 (t 25758 61665 902584 915000)) nil (25758 61695 293412 598000) 0 nil])
([nil nil ((#("(in the training set)" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2658) (undo-tree-id1193 . -20) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -21) 2660) nil (25758 61695 293317 82000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2657) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1)) nil (25758 61696 530106 140000) 0 nil])
([nil nil ((#("(at least in a wide sense)" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2751) (undo-tree-id1250 . -25) (undo-tree-id1251 . -10) (undo-tree-id1252 . -10) (undo-tree-id1253 . -10) (undo-tree-id1254 . -10) (undo-tree-id1255 . -10) (undo-tree-id1256 . -10) (undo-tree-id1257 . -10) (undo-tree-id1258 . -10) (undo-tree-id1259 . -10) (undo-tree-id1260 . -10) (undo-tree-id1261 . -10) (undo-tree-id1262 . -10) (undo-tree-id1263 . -10) (undo-tree-id1264 . -10) (undo-tree-id1265 . -10) (undo-tree-id1266 . -10) (undo-tree-id1267 . -10) (undo-tree-id1268 . -10) (undo-tree-id1269 . -10) (undo-tree-id1270 . -10) (undo-tree-id1271 . -10) (undo-tree-id1272 . -10) (undo-tree-id1273 . -10) (undo-tree-id1274 . -26) 2761) nil (25758 61705 89698 801000) 0 nil] [nil nil ((#("(at least in a wide sense)" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2751) (undo-tree-id1171 . -25) (undo-tree-id1172 . -10) (undo-tree-id1173 . -10) (undo-tree-id1174 . -10) (undo-tree-id1175 . -10) (undo-tree-id1176 . -10) (undo-tree-id1177 . -10) (undo-tree-id1178 . -10) (undo-tree-id1179 . -10) (undo-tree-id1180 . -10) (undo-tree-id1181 . -10) (undo-tree-id1182 . -10) (undo-tree-id1183 . -26) 2761) ((2751 . 2777)) (25758 61695 891096 646000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2750) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1)) nil (25758 61705 89578 423000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2750) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1)) ((2750 . 2751) (t 25758 61695 356112 844000)) (25758 61695 293285 362000) 0 nil])
([nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2751) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (t 25758 61705 144605 113000)) nil (25758 61707 61523 298000) 0 nil])
nil
([nil nil ((2752 . 2753) (t 25758 61707 72701 192000)) nil (25758 61712 54732 383000) 0 nil])
([nil nil ((#("(e.g., chemical reactions should be fine, since the
laws of chemistry don’t change every day)" 0 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2804) (undo-tree-id1282 . -92) (undo-tree-id1283 . -93) 2779 (t 25758 61712 56948 218000)) nil (25758 61739 377069 746000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2803) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1)) nil (25758 61739 377064 386000) 0 nil])
([nil nil ((2778 . 2779) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2778) (undo-tree-id1307 . -1) 2777 (t 25758 61739 390269 255000)) nil (25758 61765 233608 689000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -2831) (nil fontified nil 2830 . 2831) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2830 . 2831) (2830 . 2831) 2778) nil (25758 61765 233606 474000) 0 nil])
([nil nil ((#("(e.g., financial markets are notoriously not stationary since patterns
disappear as soon as traders spot them and start exploiting them)" 0 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 71 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2835) (undo-tree-id1298 . -135) (undo-tree-id1299 . -2) (undo-tree-id1300 . 136) (undo-tree-id1301 . -1) (undo-tree-id1302 . -2) (undo-tree-id1303 . -2) (undo-tree-id1304 . -2) (undo-tree-id1305 . -2) (undo-tree-id1306 . -136) 2837) nil (25758 61765 233604 763000) 0 nil])
([nil nil ((2834 . 2835) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2834) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . 1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) 2831) nil (25758 61765 233596 986000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2834) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1)) nil (25758 61765 233584 64000) 0 nil])
([nil nil ((2922 . 2923) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2922) (undo-tree-id1308 . -1) (t 25758 61765 247468 569000)) nil (25758 61781 648959 735000) 0 nil])
([nil nil ((3185 . 3186) (t 25758 61781 656205 356000)) nil (25758 61816 805169 511000) 0 nil])
([nil nil ((#("In short, splitting a time series into a training set, a validation set, and a
" 0 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3187) (undo-tree-id1313 . -78) (undo-tree-id1314 . -79) (t 25758 61816 813723 650000)) nil (25758 61834 285990 854000) 0 nil])
([nil nil ((#("test set is not a trivial task, and how it’s done will depend strongly on the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3187) (undo-tree-id1311 . -77) (undo-tree-id1312 . -78)) nil (25758 61834 285987 894000) 0 nil])
([nil nil ((#("task at hand.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3187) (undo-tree-id1309 . -13) (undo-tree-id1310 . -14)) nil (25758 61834 285981 430000) 0 nil])
([nil nil ((#("Now back to Shakespeare! " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3187) (undo-tree-id1315 . -24) (undo-tree-id1316 . -24) (undo-tree-id1317 . -24) (undo-tree-id1318 . -25) (undo-tree-id1319 . -24) (undo-tree-id1320 . -2) (undo-tree-id1321 . -7) (undo-tree-id1322 . -10) (undo-tree-id1323 . -22) (undo-tree-id1324 . -23) (undo-tree-id1325 . -24) (undo-tree-id1326 . -24) (undo-tree-id1327 . -25) 3211 (t 25758 61834 298449 434000)) nil (25758 61841 719423 733000) 0 nil])
([nil nil ((3190 . 3191) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3190) (undo-tree-id1328 . -1) (t 25758 61841 730752 280000)) nil (25758 61844 597369 431000) 0 nil])
([nil nil ((#("(keeping the rest for the validation set and the test set)" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3245) (undo-tree-id1338 . -57) (undo-tree-id1339 . -7) (undo-tree-id1340 . -7) (undo-tree-id1341 . -7) (undo-tree-id1342 . -7) (undo-tree-id1343 . -7) (undo-tree-id1344 . -58) 3252 (t 25758 61844 606868 583000)) nil (25758 61855 211169 341000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3244) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1)) nil (25758 61855 211161 167000) 0 nil])
([nil nil ((3345 . 3351) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil))) #s(yas--exit 3369 nil) 12 nil #s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3363) (undo-tree-id1353 . -2) (3333 . 3376) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3333) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) 3335 (3333 . 3335) (3332 . 3333) (t 25758 61855 223293 640000) 3323) nil (25758 61875 208836 215000) 0 nil])
([nil nil ((apply yas--snippet-revive 3333 3380 #s(yas--snippet nil (#s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil))) #s(yas--exit 3369 nil) 12 nil #s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil)) nil nil))) nil (25758 61875 208825 496000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3368) (undo-tree-id1352 . -1)) nil (25758 61875 208824 607000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3368) (undo-tree-id1351 . -1)) nil (25758 61875 208823 16000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3368) (undo-tree-id1350 . -1)) nil (25758 61875 208821 320000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 3368) (undo-tree-id1345 . -9) (undo-tree-id1346 . -9) (undo-tree-id1347 . -9) (undo-tree-id1348 . -9) (undo-tree-id1349 . -10)) nil (25758 61875 208818 905000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3472 . 3473) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3482) (3472 . 3483) 3406) nil (25758 61875 208802 189000) 0 nil])
([nil nil ((3482 . 3483) (t 25758 61875 220076 509000) 3473) nil (25758 61880 63334 730000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 3482) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (3484 . 3486) (t 25758 61880 68262 901000)) nil (25758 61899 468429 19000) 0 nil])
([nil nil ((3538 . 3607) (#("The training set now consists of a single sequence of over a million" 0 68 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t face org-level-1)) . 3538) (undo-tree-id1475 . -3) (t 25758 61899 476996 110000)) nil (25758 61905 442208 46000) 0 nil])
([nil nil ((#("The training set now consists of a single sequence of over a million
characters, so we can’t just train the neural network directly on it: the
RNN would be equivalent to a deep net with over a million layers, and we
would have a single (very long) instance to train it. Instead, " 0 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 68 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 69 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 112 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 143 216 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 216 279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3539) (undo-tree-id1476 . -278) (undo-tree-id1477 . 279) (undo-tree-id1478 . -278) (undo-tree-id1479 . -2) (undo-tree-id1480 . -11) (undo-tree-id1481 . -15) (undo-tree-id1482 . -19) (undo-tree-id1483 . -28) (undo-tree-id1484 . -31) (undo-tree-id1485 . -33) (undo-tree-id1486 . -40) (undo-tree-id1487 . -49) (undo-tree-id1488 . -52) (undo-tree-id1489 . -57) (undo-tree-id1490 . -59) (undo-tree-id1491 . -67) (undo-tree-id1492 . -78) (undo-tree-id1493 . -78) (undo-tree-id1494 . -78) (undo-tree-id1495 . -78) (undo-tree-id1496 . -78) (undo-tree-id1497 . -78) (undo-tree-id1498 . -78) (undo-tree-id1499 . -78) (undo-tree-id1500 . -78) (undo-tree-id1501 . -78) (undo-tree-id1502 . -78) (undo-tree-id1503 . -78) (undo-tree-id1504 . -78) (undo-tree-id1505 . -79) (undo-tree-id1506 . -81) (undo-tree-id1507 . -84) (undo-tree-id1508 . -87) (undo-tree-id1509 . -90) (undo-tree-id1510 . -91) (undo-tree-id1511 . -93) (undo-tree-id1512 . -98) (undo-tree-id1513 . -104) (undo-tree-id1514 . -35) (undo-tree-id1515 . -69) (undo-tree-id1516 . -78) (undo-tree-id1517 . -79) (undo-tree-id1518 . -82) (undo-tree-id1519 . -85) (undo-tree-id1520 . -89) (undo-tree-id1521 . -90) (undo-tree-id1522 . -91) (undo-tree-id1523 . -96) (undo-tree-id1524 . -102) (undo-tree-id1525 . -106) (undo-tree-id1526 . -113) (undo-tree-id1527 . -121) (undo-tree-id1528 . -130) (undo-tree-id1529 . -133) (undo-tree-id1530 . -136) (undo-tree-id1531 . -137) (undo-tree-id1532 . -141) (undo-tree-id1533 . 136) (undo-tree-id1534 . -146) (undo-tree-id1535 . -145) (undo-tree-id1536 . -151) (undo-tree-id1537 . -154) (undo-tree-id1538 . -165) (undo-tree-id1539 . -168) (undo-tree-id1540 . -170) (undo-tree-id1541 . -175) (undo-tree-id1542 . -179) (undo-tree-id1543 . -184) (undo-tree-id1544 . -189) (undo-tree-id1545 . -191) (undo-tree-id1546 . -199) (undo-tree-id1547 . -206) (undo-tree-id1548 . -207) (undo-tree-id1549 . -211) (undo-tree-id1550 . -214) (undo-tree-id1551 . -220) (undo-tree-id1552 . -225) (undo-tree-id1553 . -227) (undo-tree-id1554 . -234) (undo-tree-id1555 . -236) (undo-tree-id1556 . -240) (undo-tree-id1557 . -245) (undo-tree-id1558 . -246) (undo-tree-id1559 . -255) (undo-tree-id1560 . -258) (undo-tree-id1561 . -264) (undo-tree-id1562 . -267) (undo-tree-id1563 . -267) (undo-tree-id1564 . -267) (undo-tree-id1565 . -267) (undo-tree-id1566 . -267) (undo-tree-id1567 . -267) (undo-tree-id1568 . -267) (undo-tree-id1569 . -267) (undo-tree-id1570 . -267) (undo-tree-id1571 . -267) (undo-tree-id1572 . -278) (undo-tree-id1573 . -267) (undo-tree-id1574 . -267) (undo-tree-id1575 . -267) (undo-tree-id1576 . -267) (undo-tree-id1577 . -194) (undo-tree-id1578 . -120) (undo-tree-id1579 . -51) (undo-tree-id1580 . -279) (undo-tree-id1581 . -278) (undo-tree-id1582 . -2) (undo-tree-id1583 . -71) (undo-tree-id1584 . -145) (undo-tree-id1585 . -218) (undo-tree-id1586 . -268) (undo-tree-id1587 . -269) (undo-tree-id1588 . -270) (undo-tree-id1589 . -271) (undo-tree-id1590 . -272) (undo-tree-id1591 . -273) (undo-tree-id1592 . -274) (undo-tree-id1593 . -275) (undo-tree-id1594 . -276) (undo-tree-id1595 . -277) (undo-tree-id1596 . -278) (undo-tree-id1597 . -278) (undo-tree-id1598 . -279) 3817 (t 25758 61905 453217 778000)) nil (25758 62048 30342 602000) 0 nil])
([nil nil ((3562 . 3563) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3562) (undo-tree-id1599 . -1) (t 25758 62048 41992 926000)) nil (25758 62051 411284 221000) 0 nil])
([nil nil ((3828 . 3829) (t 25758 62051 414095 37000)) nil (25758 62092 715244 853000) 0 nil])
([nil nil ((3867 . 3868)) nil (25758 62092 715243 952000) 0 nil])
([nil nil ((3828 . 3829)) nil (25758 62092 715242 901000) 0 nil])
([nil nil ((3839 . 3840) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3839) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) 3829) nil (25758 62100 734782 371000) 0 nil])
([nil nil ((#("Let’s call the window() method to create a" 0 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3871) (undo-tree-id1635 . -41) (undo-tree-id1636 . -2) (undo-tree-id1637 . -42) (undo-tree-id1638 . -42) (t 25758 62092 775311 673000)) nil (25758 62116 961293 769000) 0 nil] [nil nil ((#("Let’s call the window() method to create a" 0 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3871) (undo-tree-id1602 . -41) (undo-tree-id1603 . -2) (undo-tree-id1604 . -42) (undo-tree-id1605 . -42) (t 25758 62092 775311 673000)) ((3871 . 3913)) (25758 62100 734409 418000) 0 nil])
([nil nil ((#("dataset of short text windows:" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3872) (undo-tree-id1630 . -29) (undo-tree-id1631 . 30) (undo-tree-id1632 . -7) (undo-tree-id1633 . -30) (undo-tree-id1634 . -30)) nil (25758 62116 961289 867000) 0 nil])
nil
([nil nil ((3884 . 3890) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil))) #s(yas--exit 3908 nil) 13 nil #s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3902) (undo-tree-id1614 . -2) (3872 . 3915) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3872) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -1) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) 3874 (3872 . 3874) (#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3872) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) 3873 (3872 . 3873)) nil (25758 62116 961285 3000) 0 nil])
([nil nil ((apply yas--snippet-revive 3872 3919 #s(yas--snippet nil (#s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil))) #s(yas--exit 3908 nil) 13 nil #s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil)) nil nil))) nil (25758 62116 961271 499000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3907) (undo-tree-id1613 . -1)) nil (25758 62116 961270 628000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3907) (undo-tree-id1612 . -1)) nil (25758 62116 961269 23000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 3907) (undo-tree-id1611 . -1)) nil (25758 62116 961267 417000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 3907) (undo-tree-id1606 . -9) (undo-tree-id1607 . -9) (undo-tree-id1608 . -9) (undo-tree-id1609 . -9) (undo-tree-id1610 . -10)) nil (25758 62116 961264 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3991 . 3992) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4001) (3991 . 4002) 3921) nil (25758 62116 961247 665000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line font-lock-multiline t) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 3992) (undo-tree-id1639 . -9) (undo-tree-id1640 . -9) (undo-tree-id1641 . -10) (t 25758 62116 971993 987000)) nil (25758 62121 250731 961000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4061 . 4062) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4071) (4061 . 4072) 3992) nil (25758 62121 250715 923000) 0 nil])
([nil nil ((#("TIP" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4072) (undo-tree-id1642 . -2) (undo-tree-id1643 . -3) (undo-tree-id1644 . -3) (t 25758 62121 264112 845000)) nil (25758 62123 739802 914000) 0 nil])
([nil nil ((#("You can try tuning n_steps : it is easier to train RNNs on shorter input sequences,
" 0 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 21 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 26 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4073) (undo-tree-id1649 . -83) (undo-tree-id1650 . -84) (t 25758 62123 752181 455000)) nil (25758 62147 912148 345000) 0 nil])
([nil nil ((#("but of course the RNN will not be able to learn any pattern longer than n_steps , so
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 74 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 79 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4073) (undo-tree-id1647 . -84) (undo-tree-id1648 . -85)) nil (25758 62147 912145 229000) 0 nil])
([nil nil ((#("don’t make it too small.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4073) (undo-tree-id1645 . -24) (undo-tree-id1646 . -25)) nil (25758 62147 912138 102000) 0 nil])
([nil nil ((3872 . 3873) (3871 . 3872) (t 25758 62147 968838 241000) 3870) nil (25758 62181 175231 963000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3872) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1)) nil (25758 62181 175227 165000) 0 nil])
([nil nil ((#("(which will allow us to create batches without having to do any padding),
" 0 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4364) (undo-tree-id1659 . -73) (undo-tree-id1660 . 74) (undo-tree-id1661 . -1) (undo-tree-id1662 . 3) (undo-tree-id1663 . -72) (undo-tree-id1664 . -74) (t 25758 62181 185707 881000)) nil (25758 62243 264853 597000) 0 nil])
([nil nil ((#("(otherwise the last 100 windows will
contain 100 characters, 99 characters, and so on down to 1 character)" 0 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4391) (undo-tree-id1676 . -105) (undo-tree-id1677 . -18) (undo-tree-id1678 . -9) (undo-tree-id1679 . -13) (undo-tree-id1680 . -18) (undo-tree-id1681 . -18) (undo-tree-id1682 . -18) (undo-tree-id1683 . -18) (undo-tree-id1684 . -106) 4409 (t 25758 62243 323244 905000)) nil (25758 62260 42442 105000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4390) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1)) nil (25759 18366 46767 176000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4191) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) 4192 (4191 . 4192)) nil (25759 18371 156690 279000) 0 nil] [nil nil ((4190 . 4191) (t 25758 62260 59640 307000)) ((#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4190)) (25759 18365 495952 690000) 0 nil])
([nil nil ((4391 . 4392) (t 25759 18371 167072 989000) 4367) nil (25759 18402 718505 508000) 0 nil])
([nil nil ((4198 . 4199)) ((#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (underline) font-lock-multiline t org-emphasis t invisible org-link)) . 4198) (t 25759 18364 674772 271000)) (25759 18364 615421 381000) 0 nil])
([nil nil ((4504 . 4505) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4504) (undo-tree-id1689 . -1) (t 25759 18402 724534 374000)) nil (25759 18474 698258 578000) 0 nil])
nil
([nil nil ((#("This is useful when you want to transform each window by
calling its dataset methods (e.g., to shuffle them or batch them). However,
we cannot use a nested dataset directly for training, as our model willexpect tensors as input, not datasets. So," 0 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 57 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 72 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 133 246 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4555) (undo-tree-id1695 . -245) (undo-tree-id1696 . -245) (undo-tree-id1697 . -245) (undo-tree-id1698 . -3) (undo-tree-id1699 . -6) (undo-tree-id1700 . -5) (undo-tree-id1701 . 174) (undo-tree-id1702 . -76) (undo-tree-id1703 . -246) (undo-tree-id1704 . -245) (undo-tree-id1705 . 177) (undo-tree-id1706 . -76) (undo-tree-id1707 . -72) (undo-tree-id1708 . -87) (undo-tree-id1709 . -89) (undo-tree-id1710 . -122) (undo-tree-id1711 . -130) (undo-tree-id1712 . -131) (undo-tree-id1713 . -134) (undo-tree-id1714 . -141) (undo-tree-id1715 . -145) (undo-tree-id1716 . -147) (undo-tree-id1717 . -146) (undo-tree-id1718 . -145) (undo-tree-id1719 . -147) (undo-tree-id1720 . -154) (undo-tree-id1721 . 90) (undo-tree-id1722 . -163) (undo-tree-id1723 . -162) (undo-tree-id1724 . -171) (undo-tree-id1725 . -175) (undo-tree-id1726 . -184) (undo-tree-id1727 . -185) (undo-tree-id1728 . -188) (undo-tree-id1729 . -192) (undo-tree-id1730 . -198) (undo-tree-id1731 . 46) (undo-tree-id1732 . -210) (undo-tree-id1733 . -209) (undo-tree-id1734 . -217) (undo-tree-id1735 . -220) (undo-tree-id1736 . -226) (undo-tree-id1737 . -227) (undo-tree-id1738 . -231) (undo-tree-id1739 . 13) (undo-tree-id1740 . -241) (undo-tree-id1741 . -240) (undo-tree-id1742 . -241) (undo-tree-id1743 . -244) (undo-tree-id1744 . -245) (undo-tree-id1745 . -245) (undo-tree-id1746 . -246) 4800 (t 25759 18432 925932 470000)) nil (25759 18505 445047 902000) 0 nil] [nil nil ((#("This is useful when you want to transform each window by
calling its dat" 0 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 57 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4555) (undo-tree-id1690 . -71) (undo-tree-id1691 . -3) (undo-tree-id1692 . -6) (undo-tree-id1693 . -5) (undo-tree-id1694 . -72) (t 25759 18432 925932 470000)) ((4555 . 4627)) (25759 18474 697698 980000) 0 nil])
([nil nil ((4556 . 4557) (#("w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4556)) nil (25759 18505 445000 257000) 0 nil])
nil
([nil nil ((#("w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -4590) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) 4591 (4590 . 4591) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4590) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (t 25759 18505 453288 165000)) nil (25759 18521 530481 522000) 0 nil])
([nil nil ((4591 . 4593) (#("it" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4591) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -2) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) 4592) nil (25759 18521 530475 770000) 0 nil])
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4601) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1)) nil (25759 18521 530464 825000) 0 nil])
([nil nil ((#("(one that does not
contain datasets)" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4639) (undo-tree-id1773 . -35) (undo-tree-id1774 . 36) (undo-tree-id1775 . -1) (undo-tree-id1776 . 1) (undo-tree-id1777 . -36) (undo-tree-id1778 . -36) (t 25759 18521 542032 250000)) nil (25759 18526 919945 639000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4638) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1)) nil (25759 18526 919937 760000) 0 nil])
([nil nil ((#("For example, suppose {1, 2, 3} represents a dataset" 0 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4640) (undo-tree-id1802 . -50) (undo-tree-id1803 . -50) (undo-tree-id1804 . -50) (undo-tree-id1805 . 7) (undo-tree-id1806 . -51) (undo-tree-id1807 . -21) (undo-tree-id1808 . -51) (undo-tree-id1809 . -51) (t 25759 18526 926281 241000)) nil (25759 18556 346972 684000) 0 nil])
([nil nil ((#("containing the sequence of tensors 1, 2, and 3. If you flatten the nested" 0 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4641) (undo-tree-id1797 . -72) (undo-tree-id1798 . -56) (undo-tree-id1799 . -56) (undo-tree-id1800 . -73) (undo-tree-id1801 . -73)) nil (25759 18556 346966 119000) 0 nil])
([nil nil ((#("dataset {{1, 2}, {3, 4, 5, 6}}, you get back the flat dataset {1, 2, 3, 4, 5, 6}." 0 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4642) (undo-tree-id1779 . -80) (undo-tree-id1780 . -56) (undo-tree-id1781 . -56) (undo-tree-id1782 . -56) (undo-tree-id1783 . -56) (undo-tree-id1784 . -56) (undo-tree-id1785 . -56) (undo-tree-id1786 . -56) (undo-tree-id1787 . -56) (undo-tree-id1788 . 27) (undo-tree-id1789 . -61) (undo-tree-id1790 . -56) (undo-tree-id1791 . -56) (undo-tree-id1792 . -56) (undo-tree-id1793 . 81) (undo-tree-id1794 . -7) (undo-tree-id1795 . -81) (undo-tree-id1796 . -81)) nil (25759 18556 346958 36000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4641) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (t 25759 18556 359642 149000)) nil (25759 18558 629288 678000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4641) (undo-tree-id1826 . -1) (t 25759 18558 635747 376000)) nil (25759 18589 896237 175000) 0 nil])
([nil nil ((4641 . 4642) (#("Moreover, t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4641) (undo-tree-id1866 . -10) (undo-tree-id1867 . -10) (undo-tree-id1868 . -7) (undo-tree-id1869 . -7) (undo-tree-id1870 . -7) (undo-tree-id1871 . -7) (undo-tree-id1872 . -7) (undo-tree-id1873 . -7) (undo-tree-id1874 . -7) (undo-tree-id1875 . -7) (undo-tree-id1876 . -7) (undo-tree-id1877 . -7) (undo-tree-id1878 . -7) (undo-tree-id1879 . -7) (undo-tree-id1880 . -7) (undo-tree-id1881 . -7) (undo-tree-id1882 . -7) (undo-tree-id1883 . -7) (undo-tree-id1884 . -8) (undo-tree-id1885 . -8) (undo-tree-id1886 . -8) (undo-tree-id1887 . -8) (undo-tree-id1888 . -8) (undo-tree-id1889 . -8) (undo-tree-id1890 . -8) (undo-tree-id1891 . -8) (undo-tree-id1892 . -8) (undo-tree-id1893 . -8) (undo-tree-id1894 . -7) (undo-tree-id1895 . -8) (undo-tree-id1896 . -11) (undo-tree-id1897 . -10) (undo-tree-id1898 . -10) (undo-tree-id1899 . -10) (undo-tree-id1900 . -10) (undo-tree-id1901 . -10) (undo-tree-id1902 . -10) (undo-tree-id1903 . -10) (undo-tree-id1904 . -10) (undo-tree-id1905 . -10) (undo-tree-id1906 . -10) (undo-tree-id1907 . -10) (undo-tree-id1908 . -10) (undo-tree-id1909 . -8) (undo-tree-id1910 . -10) (undo-tree-id1911 . -11) (undo-tree-id1912 . -10) (undo-tree-id1913 . -7) (undo-tree-id1914 . -8) (undo-tree-id1915 . -11) (undo-tree-id1916 . -10) (undo-tree-id1917 . -10) (undo-tree-id1918 . -11) (undo-tree-id1919 . -11) (undo-tree-id1920 . -11) 4651 (t 25759 18591 305257 493000)) nil (25759 18621 464216 829000) 0 nil] [nil nil ((4641 . 4642) (#("Moreover, t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4641) (undo-tree-id1827 . -10) (undo-tree-id1828 . -10) (undo-tree-id1829 . -7) (undo-tree-id1830 . -7) (undo-tree-id1831 . -7) (undo-tree-id1832 . -7) (undo-tree-id1833 . -7) (undo-tree-id1834 . -7) (undo-tree-id1835 . -7) (undo-tree-id1836 . -7) (undo-tree-id1837 . -7) (undo-tree-id1838 . -7) (undo-tree-id1839 . -7) (undo-tree-id1840 . -7) (undo-tree-id1841 . -7) (undo-tree-id1842 . -7) (undo-tree-id1843 . -7) (undo-tree-id1844 . -7) (undo-tree-id1845 . -8) (undo-tree-id1846 . -8) (undo-tree-id1847 . -8) (undo-tree-id1848 . -8) (undo-tree-id1849 . -8) (undo-tree-id1850 . -8) (undo-tree-id1851 . -8) (undo-tree-id1852 . -8) (undo-tree-id1853 . -8) (undo-tree-id1854 . -8) (undo-tree-id1855 . -10) (undo-tree-id1856 . -11) (undo-tree-id1857 . -10) (undo-tree-id1858 . -7) (undo-tree-id1859 . -8) (undo-tree-id1860 . -11) (undo-tree-id1861 . -10) (undo-tree-id1862 . -10) (undo-tree-id1863 . -11) (undo-tree-id1864 . -11) (undo-tree-id1865 . -11) 4651 (t 25759 18560 587837 620000)) ((4641 . 4652) (#("T" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4641) (t 25759 18589 685182 616000)) (25759 18589 675005 233000) 0 nil])
([nil current ((#("For example, if you pass the function lambda ds:" 0 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4780) (undo-tree-id1929 . -47) (undo-tree-id1930 . -2) (undo-tree-id1931 . -48) (undo-tree-id1932 . -48) (t 25759 18621 474651 699000)) nil (25759 18646 805679 64000) 0 nil])
nil
([nil nil ((#("ds.batch(2) to flat_map(), then it will transform the nested dataset {{1,
" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 20 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 23 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4781) (undo-tree-id1925 . -73) (undo-tree-id1926 . 74) (undo-tree-id1927 . -2) (undo-tree-id1928 . -74)) ((4781 . 4855)) (25759 18645 973168 640000) 0 nil])
([nil nil ((#("2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4781) (undo-tree-id1921 . -83) (undo-tree-id1922 . 11) (undo-tree-id1923 . -80) (undo-tree-id1924 . -84)) ((4781 . 4865)) (25759 18645 972861 137000) 0 nil])
nil
