(undo-tree-save-format-version . 1)
"5ce657341b52308c07db0e5e004aab70ef16768f"
[nil nil nil nil (25758 60459 788688 141000) 0 nil]
([nil nil ((8 . 12) (4 . 8) (2 . 4) (1 . 2) (t 25758 60459 796145 352000)) nil (25758 60465 369770 525000) 0 nil])
([nil nil ((12 . 13)) nil (25758 60465 369764 463000) 0 nil])
([nil nil ((nil rear-nonsticky nil 54 . 55) (nil fontified nil 46 . 55) (nil fontified nil 21 . 46) (nil fontified nil 4 . 21) (4 . 55) 3 (t 25758 60465 376077 134000)) nil (25758 60483 30693 538000) 0 nil])
([nil nil ((45 . 46) (#("
" 0 1 (fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . -45) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (20 . 21) (#("
" 0 1 (fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . -20) (undo-tree-id2 . -1) 13) nil (25758 60483 30688 587000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3056 . 3057) (nil fontified nil 3041 . 3057) (nil fontified nil 2969 . 3041) (nil fontified nil 2955 . 2969) (nil fontified nil 2892 . 2955) (nil fontified nil 2827 . 2892) (nil fontified nil 2754 . 2827) (nil fontified nil 2680 . 2754) (nil fontified nil 2610 . 2680) (nil fontified nil 2536 . 2610) (nil fontified nil 2460 . 2536) (nil fontified nil 2386 . 2460) (nil fontified nil 2312 . 2386) (nil fontified nil 2269 . 2312) (nil fontified nil 2197 . 2269) (nil fontified nil 2129 . 2197) (nil fontified nil 2061 . 2129) (nil fontified nil 1985 . 2061) (nil fontified nil 1910 . 1985) (nil fontified nil 1767 . 1910) (nil fontified nil 1694 . 1767) (nil fontified nil 1619 . 1694) (nil fontified nil 1546 . 1619) (nil fontified nil 1471 . 1546) (nil fontified nil 1395 . 1471) (nil fontified nil 1323 . 1395) (nil fontified nil 1255 . 1323) (nil fontified nil 1183 . 1255) (nil fontified nil 1155 . 1183) (nil fontified nil 1080 . 1155) (nil fontified nil 1006 . 1080) (nil fontified nil 932 . 1006) (nil fontified nil 857 . 932) (nil fontified nil 791 . 857) (nil fontified nil 713 . 791) (nil fontified nil 638 . 713) (nil fontified nil 573 . 638) (nil fontified nil 501 . 573) (nil fontified nil 424 . 501) (nil fontified nil 348 . 424) (nil fontified nil 273 . 348) (nil fontified nil 203 . 273) (nil fontified nil 129 . 203) (nil fontified nil 56 . 129) (56 . 3057) (t 25758 60483 35867 756000)) nil (25758 60634 338105 252000) 0 nil])
([nil nil ((#("When Alan Turing imagined his famous Turing test1 in 1950, his objective
" 0 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id108 . -72) (undo-tree-id109 . -5) (undo-tree-id110 . -73)) nil (25758 60634 338097 243000) 0 nil])
([nil nil ((#("was to evaluate a machine’s ability to match human intelligence. He could
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id106 . -73) (undo-tree-id107 . -74)) nil (25758 60634 338094 447000) 0 nil])
([nil nil ((#("have tested for many things, such as the ability to recognize cats in
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id104 . -69) (undo-tree-id105 . -70)) nil (25758 60634 338091 987000) 0 nil])
([nil nil ((#("pictures, play chess, compose music, or escape a maze, but, interestingly,
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id102 . -74) (undo-tree-id103 . -75)) nil (25758 60634 338089 737000) 0 nil])
([nil nil ((#("he chose a linguistic task. More specifically, he devised a chatbot capable
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 76 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id100 . -75) (undo-tree-id101 . -76)) nil (25758 60634 338087 152000) 0 nil])
([nil nil ((#("of fooling its interlocutor into thinking it was human.2 This test does have
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 77 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id98 . -76) (undo-tree-id99 . -77)) nil (25758 60634 337829 708000) 0 nil])
([nil nil ((#("its weaknesses: a set of hardcoded rules can fool unsuspecting or naive
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 55 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 55 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id96 . -71) (undo-tree-id97 . -72)) nil (25758 60634 337827 602000) 0 nil])
([nil nil ((#("humans (e.g., the machine could give vague predefined answers in
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 65 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id94 . -64) (undo-tree-id95 . -65)) nil (25758 60634 337825 539000) 0 nil])
([nil nil ((#("response to some keywords; it could pretend that it is joking or drunk, to
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id92 . -74) (undo-tree-id93 . -75)) nil (25758 60634 337823 541000) 0 nil])
([nil nil ((#("get a pass on its weirdest answers; or it could escape difficult questions by
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id90 . -77) (undo-tree-id91 . -78)) nil (25758 60634 337821 454000) 0 nil])
([nil nil ((#("answering them with its own questions), and many aspects of human
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 66 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id88 . -65) (undo-tree-id89 . -66)) nil (25758 60634 337819 284000) 0 nil])
([nil nil ((#("intelligence are utterly ignored (e.g., the ability to interpret nonverbal
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id86 . -74) (undo-tree-id87 . -75)) nil (25758 60634 337817 241000) 0 nil])
([nil nil ((#("communication such as facial expressions, or to learn a manual task). But
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id84 . -73) (undo-tree-id85 . -74)) nil (25758 60634 337815 453000) 0 nil])
([nil nil ((#("the test does highlight the fact that mastering language is arguably Homo
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 67 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 67 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id82 . -73) (undo-tree-id83 . -74)) nil (25758 60634 337813 604000) 0 nil])
([nil nil ((#("sapiens’s greatest cognitive ability. Can we build a machine that can read
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id80 . -74) (undo-tree-id81 . -75)) nil (25758 60634 337811 255000) 0 nil])
([nil nil ((#("and write natural language?
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 28 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 56) (undo-tree-id78 . -27) (undo-tree-id79 . -28)) nil (25758 60634 337809 234000) 0 nil])
([nil nil ((#("We will therefore continue to explore RNNs (introduced in
Chapter 15" 0 58 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 58 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 138) (undo-tree-id76 . -67) (undo-tree-id77 . -68)) nil (25758 60634 337807 260000) 0 nil])
([nil nil ((#("), starting with a character RNN, trained to predict the next
character in a sentence. This will allow us to generate some original text,
and in the" 0 62 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 62 138 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 138 148 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 138) (undo-tree-id72 . -147) (undo-tree-id73 . 148) (undo-tree-id74 . -1) (undo-tree-id75 . -148)) nil (25758 60634 337804 950000) 0 nil])
([nil nil ((#(" process we will see how to build a TensorFlow Dataset on a very" 0 64 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 138) (undo-tree-id69 . -63) (undo-tree-id70 . -64) (undo-tree-id71 . -64)) nil (25758 60634 337801 548000) 0 nil])
([nil nil ((#("long sequence. " 0 15 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id57 . -14) (undo-tree-id58 . -14) (undo-tree-id59 . -14) (undo-tree-id60 . -14) (undo-tree-id61 . -15) (undo-tree-id62 . -14) (undo-tree-id63 . -3) (undo-tree-id64 . -12) (undo-tree-id65 . -13) (undo-tree-id66 . -14) (undo-tree-id67 . -14) (undo-tree-id68 . -15) 153) nil (25758 60634 337797 919000) 0 nil])
([nil nil ((137 . 138) (#(" " 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 137) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -138) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 128) nil (25758 60634 337783 33000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -171) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 172 (#("(which learns on random
portions of text at each iteration, without any information on the rest of
the text)" 0 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 24 99 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 99 108 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 172) (undo-tree-id230 . -107) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -108) (undo-tree-id237 . -108) 173 (t 25758 60634 390437 566000)) nil (25758 60675 483990 756000) 0 nil])
([nil nil ((#("(which preserves the hidden
state between training iterations and continues reading where it left off,allowing it to learn longer patterns)" 0 28 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 28 139 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 207) (undo-tree-id213 . -138) (undo-tree-id214 . 139) (undo-tree-id215 . -1) (undo-tree-id216 . 1) (undo-tree-id217 . -139) (undo-tree-id218 . -139)) nil (25758 60675 483975 570000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 206) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1)) nil (25758 60675 484253 714000) 0 nil])
([nil nil ((#("Next, we will build an RNN to" 0 29 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 208) (undo-tree-id304 . -28) (undo-tree-id305 . -29) (undo-tree-id306 . -29)) nil (25758 60700 562168 338000) 0 nil] [nil nil ((#("networks. We will first use a stateless RNN, then we will build a stateful RNN. Next, we will build an RNN to
" 0 9 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 9 10 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 11 29 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 29 43 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 43 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 78 110 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 128) (undo-tree-id111 . -109) (undo-tree-id112 . 67) (undo-tree-id113 . -9) (undo-tree-id114 . -9) (undo-tree-id115 . -9) (undo-tree-id116 . -9) (undo-tree-id117 . -9) (undo-tree-id118 . -9) (undo-tree-id119 . -9) (undo-tree-id120 . -9) (undo-tree-id121 . -9) (undo-tree-id122 . -9) (undo-tree-id123 . -9) (undo-tree-id124 . -9) (undo-tree-id125 . -9) (undo-tree-id126 . -9) (undo-tree-id127 . -9) (undo-tree-id128 . -9) (undo-tree-id129 . -9) (undo-tree-id130 . -9) (undo-tree-id131 . -9) (undo-tree-id132 . -9) (undo-tree-id133 . 100) (undo-tree-id134 . -9) (undo-tree-id135 . -9) (undo-tree-id136 . -9) (undo-tree-id137 . -9) (undo-tree-id138 . -9) (undo-tree-id139 . -9) (undo-tree-id140 . -9) (undo-tree-id141 . -9) (undo-tree-id142 . -9) (undo-tree-id143 . -9) (undo-tree-id144 . -9) (undo-tree-id145 . -9) (undo-tree-id146 . -9) (undo-tree-id147 . -80) (undo-tree-id148 . -9) (undo-tree-id149 . -9) (undo-tree-id150 . -9) (undo-tree-id151 . -9) (undo-tree-id152 . -10) (undo-tree-id153 . -13) (undo-tree-id154 . -18) (undo-tree-id155 . -24) (undo-tree-id156 . -28) (undo-tree-id157 . -30) (undo-tree-id158 . -40) (undo-tree-id159 . -43) (undo-tree-id160 . -43) (undo-tree-id161 . -43) (undo-tree-id162 . -43) (undo-tree-id163 . 70) (undo-tree-id164 . -43) (undo-tree-id165 . -43) (undo-tree-id166 . -43) (undo-tree-id167 . -43) (undo-tree-id168 . -43) (undo-tree-id169 . -43) (undo-tree-id170 . -42) (undo-tree-id171 . -42) (undo-tree-id172 . -42) (undo-tree-id173 . -42) (undo-tree-id174 . -42) (undo-tree-id175 . -43) (undo-tree-id176 . -45) (undo-tree-id177 . -50) (undo-tree-id178 . -53) (undo-tree-id179 . -58) (undo-tree-id180 . -64) (undo-tree-id181 . 44) (undo-tree-id182 . -74) (undo-tree-id183 . -66) (undo-tree-id184 . -75) (undo-tree-id185 . -78) (undo-tree-id186 . -78) (undo-tree-id187 . 35) (undo-tree-id188 . -78) (undo-tree-id189 . -78) (undo-tree-id190 . -78) (undo-tree-id191 . -78) (undo-tree-id192 . -78) (undo-tree-id193 . -78) (undo-tree-id194 . -78) (undo-tree-id195 . -78) (undo-tree-id196 . -78) (undo-tree-id197 . -78) (undo-tree-id198 . -80) (undo-tree-id199 . -80) (undo-tree-id200 . -80) (undo-tree-id201 . -80) (undo-tree-id202 . -110) 208) ((128 . 238)) (25758 60675 483956 320000) 0 nil])
([nil nil ((#("perform sentiment analysis (e.g., reading movie reviews and extracting the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 209) (undo-tree-id301 . -74) (undo-tree-id302 . -73) (undo-tree-id303 . -75)) nil (25758 60700 562165 414000) 0 nil])
nil
([nil nil ((#("We will first use a stateless RNN, then we will build a stateful RNN. " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 33 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 33 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 68 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 138) (undo-tree-id246 . -69) (undo-tree-id247 . 37) (undo-tree-id248 . 70) (undo-tree-id249 . -3) (undo-tree-id250 . -8) (undo-tree-id251 . -14) (undo-tree-id252 . -18) (undo-tree-id253 . -20) (undo-tree-id254 . -30) (undo-tree-id255 . -33) (undo-tree-id256 . -33) (undo-tree-id257 . -33) (undo-tree-id258 . -33) (undo-tree-id259 . -33) (undo-tree-id260 . -33) (undo-tree-id261 . -33) (undo-tree-id262 . -33) (undo-tree-id263 . -33) (undo-tree-id264 . -32) (undo-tree-id265 . -32) (undo-tree-id266 . -32) (undo-tree-id267 . -32) (undo-tree-id268 . -32) (undo-tree-id269 . -33) (undo-tree-id270 . -35) (undo-tree-id271 . -40) (undo-tree-id272 . -43) (undo-tree-id273 . -48) (undo-tree-id274 . -54) (undo-tree-id275 . -56) (undo-tree-id276 . -65) (undo-tree-id277 . -68) (undo-tree-id278 . -68) (undo-tree-id279 . -68) (undo-tree-id280 . -68) (undo-tree-id281 . -68) (undo-tree-id282 . -68) (undo-tree-id283 . -68) (undo-tree-id284 . -68) (undo-tree-id285 . -68) (undo-tree-id286 . -68) (undo-tree-id287 . -68) (undo-tree-id288 . -70) (undo-tree-id289 . -70) (undo-tree-id290 . -70) (undo-tree-id291 . -70) (undo-tree-id292 . -70) (undo-tree-id293 . -70) (undo-tree-id294 . -70) (undo-tree-id295 . 5) (undo-tree-id296 . -68) (undo-tree-id297 . -69) (undo-tree-id298 . -69) (undo-tree-id299 . -70) (undo-tree-id300 . -70)) nil (25758 60700 562160 739000) 0 nil])
([nil nil ((#("rater’s feeling about the movie), this time treating sentences as sequences
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 76 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id244 . -75) (undo-tree-id245 . -76)) nil (25758 60700 562117 16000) 0 nil])
([nil nil ((#("of words, rather than characters. Then we will show how RNNs can be
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 58 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 58 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id242 . -67) (undo-tree-id243 . -68)) nil (25758 60700 562112 988000) 0 nil])
([nil nil ((#("used to build an Encoder–Decoder architecture capable of performing
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id240 . -67) (undo-tree-id241 . -68)) nil (25758 60700 562444 86000) 0 nil])
([nil nil ((#("neural machine translation (NMT). For this, we will use the seq2seq API
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id309 . -71) (undo-tree-id310 . -72)) nil (25758 60706 219592 65000) 0 nil] [nil nil ((#("neural machine translation (NMT). For this, we will use the seq2seq API
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id238 . -71) (undo-tree-id239 . -72)) ((139 . 211)) (25758 60700 562103 632000) 0 nil])
([nil nil ((#("provided by the TensorFlow Addons project.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 43 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id307 . -42) (undo-tree-id308 . -43)) nil (25758 60706 219584 864000) 0 nil])
nil
([nil nil ((#("In the second part of this chapter, we will look at attention mechanisms.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id311 . -73) (undo-tree-id312 . -74) (t 25758 60706 225954 194000)) nil (25758 60714 88380 639000) 0 nil])
([nil nil ((#("As their name suggests, these are neural network components that learn to
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id317 . -73) (undo-tree-id318 . -74) (t 25758 60714 93907 805000)) nil (25758 60736 301171 362000) 0 nil])
([nil nil ((#("select the part of the inputs that the rest of the model should focus on at
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 76 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id315 . -75) (undo-tree-id316 . -76)) nil (25758 60736 301168 477000) 0 nil])
([nil nil ((#("each time step. First we will see how to boost the performance of an RNN-
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id313 . -73) (undo-tree-id314 . -74)) nil (25758 60736 301162 401000) 0 nil])
([nil nil ((#("based Encoder–Decoder architecture using attention, then we will drop
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 70 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id323 . -69) (undo-tree-id324 . -70) (t 25758 60736 309783 346000)) nil (25758 60743 715306 354000) 0 nil])
([nil nil ((#("RNNs altogether and look at a very successful attention-only architecture
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id319 . -73) (undo-tree-id320 . 74) (undo-tree-id321 . -4) (undo-tree-id322 . -74)) nil (25758 60743 715301 384000) 0 nil])
([nil nil ((#("called the Transformer. Finally, we will take a look at some of the most
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id331 . -72) (undo-tree-id332 . -73) (t 25758 60743 721743 917000)) nil (25758 60759 914683 31000) 0 nil])
([nil nil ((#("important advances in NLP in 2018 and 2019, including incredibly
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 65 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id329 . -64) (undo-tree-id330 . -65)) nil (25758 60760 320300 255000) 0 nil])
([nil nil ((#("powerful language models such as GPT-2 and BERT, both based on
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 63 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id345 . -62) (undo-tree-id346 . -63)) nil (25758 60769 292187 476000) 0 nil] [nil nil ((#("powerful language models such as GPT-2 and BERT, both based on
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 63 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id327 . -62) (undo-tree-id328 . -63)) ((139 . 202)) (25758 60759 914890 128000) 0 nil])
([nil nil ((#("Transformers.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 14 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id343 . -13) (undo-tree-id344 . -14)) nil (25758 60769 292185 360000) 0 nil])
([nil nil ((#("Transformers.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 14 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id325 . -13) (undo-tree-id326 . -14)) ((139 . 153)) (25758 60759 914669 789000) 0 nil])
([nil nil ((#("Let’s start with a simple and fun model that can write like Shakespeare
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id341 . -71) (undo-tree-id342 . -72)) nil (25758 60769 292182 614000) 0 nil])
nil
([nil nil ((#("(well, sort of).
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 15 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 15 16 (rear-nonsticky t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 16 17 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 139) (undo-tree-id333 . -16) (undo-tree-id334 . -15) (undo-tree-id335 . -15) (undo-tree-id336 . 17) (undo-tree-id337 . -1) (undo-tree-id338 . 3) (undo-tree-id339 . -15) (undo-tree-id340 . -17)) nil (25758 60769 292177 523000) 0 nil])
([nil nil ((141 . 142) (t 25758 60769 297615 628000)) nil (25758 60885 98280 17000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19156 . 19157) (nil fontified nil 19123 . 19157) (nil fontified nil 19050 . 19123) (nil fontified nil 18983 . 19050) (nil fontified nil 18908 . 18983) (nil fontified nil 18825 . 18908) (nil fontified nil 18736 . 18825) (nil fontified nil 18648 . 18736) (nil fontified nil 18644 . 18648) (nil fontified nil 18579 . 18644) (nil fontified nil 18507 . 18579) (nil fontified nil 18499 . 18507) (nil fontified nil 18428 . 18499) (nil fontified nil 18356 . 18428) (nil fontified nil 18330 . 18356) (nil fontified nil 18291 . 18330) (nil fontified nil 18238 . 18291) (nil fontified nil 18172 . 18238) (nil fontified nil 18095 . 18172) (nil fontified nil 18072 . 18095) (nil fontified nil 18016 . 18072) (nil fontified nil 17979 . 18016) (nil fontified nil 17919 . 17979) (nil fontified nil 17872 . 17919) (nil fontified nil 17836 . 17872) (nil fontified nil 17776 . 17836) (nil fontified nil 17742 . 17776) (nil fontified nil 17712 . 17742) (nil fontified nil 17638 . 17712) (nil fontified nil 17564 . 17638) (nil fontified nil 17488 . 17564) (nil fontified nil 17417 . 17488) (nil fontified nil 17346 . 17417) (nil fontified nil 17280 . 17346) (nil fontified nil 17206 . 17280) (nil fontified nil 17135 . 17206) (nil fontified nil 17083 . 17135) (nil fontified nil 17021 . 17083) (nil fontified nil 16949 . 17021) (nil fontified nil 16876 . 16949) (nil fontified nil 16751 . 16876) (nil fontified nil 16721 . 16751) (nil fontified nil 16711 . 16721) (nil fontified nil 16650 . 16711) (nil fontified nil 16627 . 16650) (nil fontified nil 16554 . 16627) (nil fontified nil 16527 . 16554) (nil fontified nil 16456 . 16527) (nil fontified nil 16435 . 16456) (nil fontified nil 16380 . 16435) (nil fontified nil 16313 . 16380) (nil fontified nil 16244 . 16313) (nil fontified nil 16168 . 16244) (nil fontified nil 16090 . 16168) (nil fontified nil 16020 . 16090) (nil fontified nil 15945 . 16020) (nil fontified nil 15875 . 15945) (nil fontified nil 15802 . 15875) (nil fontified nil 15729 . 15802) (nil fontified nil 15656 . 15729) (nil fontified nil 15588 . 15656) (nil fontified nil 15525 . 15588) (nil fontified nil 15456 . 15525) (nil fontified nil 15311 . 15456) (nil fontified nil 15239 . 15311) (nil fontified nil 15164 . 15239) (nil fontified nil 15131 . 15164) (nil fontified nil 15059 . 15131) (nil fontified nil 14987 . 15059) (nil fontified nil 14912 . 14987) (nil fontified nil 14837 . 14912) (nil fontified nil 14759 . 14837) (nil fontified nil 14681 . 14759) (nil fontified nil 14605 . 14681) (nil fontified nil 14592 . 14605) (nil fontified nil 14576 . 14592) (nil fontified nil 14502 . 14576) (nil fontified nil 14430 . 14502) (nil fontified nil 14360 . 14430) (nil fontified nil 14289 . 14360) (nil fontified nil 14224 . 14289) (nil fontified nil 14149 . 14224) (nil fontified nil 14075 . 14149) (nil fontified nil 14002 . 14075) (nil fontified nil 13993 . 14002) (nil fontified nil 13961 . 13993) (nil fontified nil 13950 . 13961) (nil fontified nil 13905 . 13950) (nil fontified nil 13880 . 13905) (nil fontified nil 13854 . 13880) (nil fontified nil 13809 . 13854) (nil fontified nil 13758 . 13809) (nil fontified nil 13711 . 13758) (nil fontified nil 13697 . 13711) (nil fontified nil 13621 . 13697) (nil fontified nil 13584 . 13621) (nil fontified nil 13559 . 13584) (nil fontified nil 13507 . 13559) (nil fontified nil 13448 . 13507) (nil fontified nil 13374 . 13448) (nil fontified nil 13318 . 13374) (nil fontified nil 13250 . 13318) (nil fontified nil 13197 . 13250) (nil fontified nil 13155 . 13197) (nil fontified nil 13128 . 13155) (nil fontified nil 13092 . 13128) (nil fontified nil 13056 . 13092) (nil fontified nil 12985 . 13056) (nil fontified nil 12908 . 12985) (nil fontified nil 12833 . 12908) (nil fontified nil 12765 . 12833) (nil fontified nil 12692 . 12765) (nil fontified nil 12618 . 12692) (nil fontified nil 12548 . 12618) (nil fontified nil 12482 . 12548) (nil fontified nil 12411 . 12482) (nil fontified nil 12341 . 12411) (nil fontified nil 12273 . 12341) (nil fontified nil 12196 . 12273) (nil fontified nil 12117 . 12196) (nil fontified nil 12048 . 12117) (nil fontified nil 12013 . 12048) (nil fontified nil 12003 . 12013) (nil fontified nil 11929 . 12003) (nil fontified nil 11924 . 11929) (nil fontified nil 11851 . 11924) (nil fontified nil 11809 . 11851) (nil fontified nil 11770 . 11809) (nil fontified nil 11705 . 11770) (nil fontified nil 11676 . 11705) (nil fontified nil 11622 . 11676) (nil fontified nil 11599 . 11622) (nil fontified nil 11542 . 11599) (nil fontified nil 11468 . 11542) (nil fontified nil 11393 . 11468) (nil fontified nil 11368 . 11393) (nil fontified nil 11328 . 11368) (nil fontified nil 11256 . 11328) (nil fontified nil 11253 . 11256) (nil fontified nil 11230 . 11253) (nil fontified nil 11174 . 11230) (nil fontified nil 11137 . 11174) (nil fontified nil 11092 . 11137) (nil fontified nil 11055 . 11092) (nil fontified nil 11046 . 11055) (nil fontified nil 10982 . 11046) (nil fontified nil 10948 . 10982) (nil fontified nil 10907 . 10948) (nil fontified nil 10832 . 10907) (nil fontified nil 10770 . 10832) (nil fontified nil 10715 . 10770) (nil fontified nil 10643 . 10715) (nil fontified nil 10569 . 10643) (nil fontified nil 10495 . 10569) (nil fontified nil 10348 . 10495) (nil fontified nil 10274 . 10348) (nil fontified nil 10203 . 10274) (nil fontified nil 10132 . 10203) (nil fontified nil 10057 . 10132) (nil fontified nil 10016 . 10057) (nil fontified nil 10009 . 10016) (nil fontified nil 9933 . 10009) (nil fontified nil 9903 . 9933) (nil fontified nil 9861 . 9903) (nil fontified nil 9851 . 9861) (nil fontified nil 9790 . 9851) (nil fontified nil 9767 . 9790) (nil fontified nil 9736 . 9767) (nil fontified nil 9662 . 9736) (nil fontified nil 9594 . 9662) (nil fontified nil 9519 . 9594) (nil fontified nil 9451 . 9519) (nil fontified nil 9382 . 9451) (nil fontified nil 9312 . 9382) (nil fontified nil 9239 . 9312) (nil fontified nil 9188 . 9239) (nil fontified nil 9172 . 9188) (nil fontified nil 9100 . 9172) (nil fontified nil 9030 . 9100) (nil fontified nil 8954 . 9030) (nil fontified nil 8879 . 8954) (nil fontified nil 8810 . 8879) (nil fontified nil 8736 . 8810) (nil fontified nil 8669 . 8736) (nil fontified nil 8598 . 8669) (nil fontified nil 8523 . 8598) (nil fontified nil 8439 . 8523) (nil fontified nil 8365 . 8439) (nil fontified nil 8304 . 8365) (nil fontified nil 8238 . 8304) (nil fontified nil 8167 . 8238) (nil fontified nil 8085 . 8167) (nil fontified nil 8011 . 8085) (nil fontified nil 7940 . 8011) (nil fontified nil 7864 . 7940) (nil fontified nil 7722 . 7864) (nil fontified nil 7646 . 7722) (nil fontified nil 7574 . 7646) (nil fontified nil 7496 . 7574) (nil fontified nil 7427 . 7496) (nil fontified nil 7356 . 7427) (nil fontified nil 7292 . 7356) (nil fontified nil 7218 . 7292) (nil fontified nil 7143 . 7218) (nil fontified nil 7070 . 7143) (nil fontified nil 6999 . 7070) (nil fontified nil 6928 . 6999) (nil fontified nil 6903 . 6928) (nil fontified nil 6818 . 6903) (nil fontified nil 6734 . 6818) (nil fontified nil 6730 . 6734) (nil fontified nil 6660 . 6730) (nil fontified nil 6589 . 6660) (nil fontified nil 6575 . 6589) (nil fontified nil 6544 . 6575) (nil fontified nil 6471 . 6544) (nil fontified nil 6409 . 6471) (nil fontified nil 6333 . 6409) (nil fontified nil 6258 . 6333) (nil fontified nil 6184 . 6258) (nil fontified nil 6109 . 6184) (nil fontified nil 6036 . 6109) (nil fontified nil 5962 . 6036) (nil fontified nil 5840 . 5962) (nil fontified nil 5773 . 5840) (nil fontified nil 5735 . 5773) (nil fontified nil 5725 . 5735) (nil fontified nil 5652 . 5725) (nil fontified nil 5575 . 5652) (nil fontified nil 5505 . 5575) (nil fontified nil 5491 . 5505) (nil fontified nil 5413 . 5491) (nil fontified nil 5334 . 5413) (nil fontified nil 5291 . 5334) (nil fontified nil 5217 . 5291) (nil fontified nil 5137 . 5217) (nil fontified nil 5065 . 5137) (nil fontified nil 4992 . 5065) (nil fontified nil 4917 . 4992) (nil fontified nil 4846 . 4917) (nil fontified nil 4773 . 4846) (nil fontified nil 4696 . 4773) (nil fontified nil 4630 . 4696) (nil fontified nil 4559 . 4630) (nil fontified nil 4483 . 4559) (nil fontified nil 4407 . 4483) (nil fontified nil 4355 . 4407) (nil fontified nil 4283 . 4355) (nil fontified nil 4208 . 4283) (nil fontified nil 4141 . 4208) (nil fontified nil 4067 . 4141) (nil fontified nil 3990 . 4067) (nil fontified nil 3917 . 3990) (nil fontified nil 3774 . 3917) (nil fontified nil 3700 . 3774) (nil fontified nil 3627 . 3700) (nil fontified nil 3551 . 3627) (nil fontified nil 3545 . 3551) (nil fontified nil 3472 . 3545) (nil fontified nil 3401 . 3472) (nil fontified nil 3321 . 3401) (nil fontified nil 3245 . 3321) (nil fontified nil 3173 . 3245) (nil fontified nil 3139 . 3173) (nil fontified nil 3091 . 3139) (nil fontified nil 3011 . 3091) (nil fontified nil 2939 . 3011) (nil fontified nil 2937 . 2939) (nil fontified nil 2864 . 2937) (nil fontified nil 2801 . 2864) (nil fontified nil 2727 . 2801) (nil fontified nil 2654 . 2727) (nil fontified nil 2583 . 2654) (nil fontified nil 2569 . 2583) (nil fontified nil 2516 . 2569) (nil fontified nil 2497 . 2516) (nil fontified nil 2453 . 2497) (nil fontified nil 2395 . 2453) (nil fontified nil 2318 . 2395) (nil fontified nil 2241 . 2318) (nil fontified nil 2172 . 2241) (nil fontified nil 2097 . 2172) (nil fontified nil 1984 . 2097) (nil fontified nil 1920 . 1984) (nil fontified nil 1884 . 1920) (nil fontified nil 1807 . 1884) (nil fontified nil 1732 . 1807) (nil fontified nil 1652 . 1732) (nil fontified nil 1581 . 1652) (nil fontified nil 1505 . 1581) (nil fontified nil 1429 . 1505) (nil fontified nil 1401 . 1429) (nil fontified nil 1375 . 1401) (nil fontified nil 1307 . 1375) (nil fontified nil 1242 . 1307) (nil fontified nil 1224 . 1242) (nil fontified nil 1156 . 1224) (nil fontified nil 1087 . 1156) (nil fontified nil 1057 . 1087) (nil fontified nil 982 . 1057) (nil fontified nil 907 . 982) (nil fontified nil 839 . 907) (nil fontified nil 766 . 839) (nil fontified nil 746 . 766) (nil fontified nil 696 . 746) (nil fontified nil 638 . 696) (nil fontified nil 584 . 638) (nil fontified nil 548 . 584) (nil fontified nil 475 . 548) (nil fontified nil 402 . 475) (nil fontified nil 330 . 402) (nil fontified nil 263 . 330) (nil fontified nil 194 . 263) (nil fontified nil 180 . 194) (nil fontified nil 142 . 180) (142 . 19157)) nil (25758 60885 98265 838000) 0 nil])
([nil nil ((178 . 179) (#("
" 0 1 (fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . -178) (undo-tree-id440 . -1) (nil keymap (keymap) 140 . 141) (nil face org-level-1 140 . 141) (nil line-prefix #("  " 0 2 (face org-indent)) 140 . 141) (nil wrap-prefix #("  " 0 2 (face org-indent)) 140 . 141) (nil fontified nil 140 . 141) (140 . 141) (#(" " 0 1 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . 140) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#("
" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -141) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) 140) nil (25758 60885 98189 8000) 0 nil])
([nil nil ((#("In a famous 2015 blog post titled “The Unreasonable Effectiveness of
" 0 69 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 193) (undo-tree-id438 . -68) (undo-tree-id439 . -69)) nil (25758 60885 98150 436000) 0 nil])
([nil nil ((#("Recurrent Neural Networks,” Andrej Karpathy showed how to train an
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 67 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 193) (undo-tree-id436 . -66) (undo-tree-id437 . -67)) nil (25758 60885 98146 897000) 0 nil])
([nil nil ((#("RNN to predict the next character in a sentence" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 47 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 193) (undo-tree-id432 . -46) (undo-tree-id433 . 47) (undo-tree-id434 . -3) (undo-tree-id435 . -47)) nil (25758 60885 98143 540000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 193) (undo-tree-id430 . -1) (undo-tree-id431 . -2)) nil (25758 60885 98136 882000) 0 nil])
([nil nil ((215 . 216) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -215) (undo-tree-id429 . -1) 193) nil (25758 60885 98133 2000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -210) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) 211 (#("then" 0 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 211) (undo-tree-id425 . -3) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4)) nil (25758 60885 98128 172000) 0 nil])
([nil nil ((405 . 408) (401 . 405) (#("s" 0 1 (font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -401) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("r" 0 1 (font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -402) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("c" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -403) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (apply yas--snippet-revive 393 433 #s(yas--snippet nil (#s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil))) #s(yas--exit 422 nil) 7 nil #s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil)) nil nil)) (#(" " 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -404) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . 1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) 405 (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil))) #s(yas--exit 422 nil) 7 nil #s(yas--field 1 404 404 nil nil nil t #s(yas--exit 422 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -423) (undo-tree-id403 . -2) (393 . 436) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 393) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) 395 (393 . 395) (392 . 393) 360) nil (25758 60885 98106 276000) 0 nil])
([nil nil ((nil rear-nonsticky nil 440 . 441) (nil fontified nil 434 . 441) (434 . 441) (#("src" 0 3 (font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 434) (undo-tree-id347 . -2) (undo-tree-id348 . -3) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -2) (undo-tree-id354 . 3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -2) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) 437) nil (25758 60885 98042 770000) 0 nil])
([nil nil ((#("result outputs" 0 14 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 410) (undo-tree-id495 . -13) (undo-tree-id496 . -14) (undo-tree-id497 . -14) (t 25758 60885 105171 644000)) nil (25758 60892 625753 643000) 0 nil])
([nil nil ((#(" " 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -408) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . 1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#(":" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -409) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 410) nil (25758 60892 625746 485000) 0 nil])
([nil nil ((#("#+end_example
" 0 6 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 6 12 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 12 13 (face org-block-end-line font-lock-multiline t font-lock-fontified t rear-nonsticky t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 14 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 412) (undo-tree-id514 . -13) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . 1) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -12) (undo-tree-id522 . -12) (undo-tree-id523 . -12) (undo-tree-id524 . -12) (undo-tree-id525 . -12) (undo-tree-id526 . -14) 424 (t 25758 60892 633149 829000)) nil (25758 60906 30453 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 593 . 594) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -607) (593 . 608) 586) nil (25758 60906 30442 976000) 0 nil])
([nil nil ((#("
" 0 1 (face (:inherit (org-block)) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 409) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1)) nil (25758 60906 30440 442000) 0 nil])
([nil nil ((#("
" 0 1 (face (:inherit (org-block)) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 409) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1)) nil (25758 60906 30435 196000) 0 nil])
([nil nil ((#("
" 0 1 (face (:inherit (org-block)) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 409) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1)) nil (25758 60906 30427 473000) 0 nil])
([nil nil ((283 . 284) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -283) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 193 (t 25758 60906 85112 798000)) nil (25758 60920 848380 336000) 0 nil])
([nil nil ((356 . 357) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -356) (undo-tree-id536 . -1) (undo-tree-id537 . -1) 283) nil (25758 60920 848377 581000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -354) (nil fontified nil 353 . 354) (nil wrap-prefix #("  " 0 2 (face org-indent)) 353 . 354) (353 . 354) (#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -273) (undo-tree-id535 . -1) (nil fontified nil 272 . 273) (nil wrap-prefix #("  " 0 2 (face org-indent)) 272 . 273) (272 . 273) 356) nil (25758 60920 848372 909000) 0 nil])
([nil nil ((268 . 269)) nil (25758 60920 848369 877000) 0 nil])
([nil nil ((273 . 274) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -273) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) 269) nil (25758 60920 848368 350000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -347) (nil fontified nil 346 . 347) (nil wrap-prefix #("  " 0 2 (face org-indent)) 346 . 347) (346 . 347) 273) nil (25758 60920 848363 959000) 0 nil])
([nil nil ((354 . 355) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -354) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . 1) (undo-tree-id531 . -1) 347) nil (25758 60920 848359 565000) 0 nil])
([nil nil ((376 . 377) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 376) (undo-tree-id545 . -1) (t 25758 60920 857074 957000)) nil (25758 60942 912092 659000) 0 nil])
([nil nil ((#(":PANDARUS:" 0 10 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 383) (undo-tree-id540 . -9) (undo-tree-id541 . 9) (undo-tree-id542 . -9) (undo-tree-id543 . -10) (undo-tree-id544 . -10)) nil (25758 60942 912089 576000) 0 nil])
([nil nil ((383 . 384)) nil (25758 60942 912072 687000) 0 nil])
([nil nil ((583 . 584) (t 25758 60942 921023 764000)) nil (25758 60971 999957 570000) 0 nil])
([nil nil ((#("
" 0 1 (face (:inherit (org-block)) font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 583) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1)) nil (25758 60971 999954 973000) 0 nil])
([nil nil ((596 . 597) 583) nil (25758 60971 999935 585000) 0 nil])
([nil nil ((#("Not exactly a masterpiece, but it is still impressive that the model was
able to learn words, grammar, proper punctuation, and more, just by
learning to predict the next character in a sentence. " 0 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 141 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 141 195 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 598) (undo-tree-id554 . -194) (undo-tree-id555 . -194) (undo-tree-id556 . -194) (undo-tree-id557 . -195) (undo-tree-id558 . -194) (undo-tree-id559 . -2) (undo-tree-id560 . -10) (undo-tree-id561 . -12) (undo-tree-id562 . -24) (undo-tree-id563 . -25) (undo-tree-id564 . -29) (undo-tree-id565 . -32) (undo-tree-id566 . -35) (undo-tree-id567 . -41) (undo-tree-id568 . -52) (undo-tree-id569 . -57) (undo-tree-id570 . -61) (undo-tree-id571 . -67) (undo-tree-id572 . -71) (undo-tree-id573 . -76) (undo-tree-id574 . -79) (undo-tree-id575 . -85) (undo-tree-id576 . -91) (undo-tree-id577 . -92) (undo-tree-id578 . -100) (undo-tree-id579 . -101) (undo-tree-id580 . -108) (undo-tree-id581 . -120) (undo-tree-id582 . -121) (undo-tree-id583 . -125) (undo-tree-id584 . -130) (undo-tree-id585 . -131) (undo-tree-id586 . -136) (undo-tree-id587 . -139) (undo-tree-id588 . -148) (undo-tree-id589 . -151) (undo-tree-id590 . -159) (undo-tree-id591 . -163) (undo-tree-id592 . -168) (undo-tree-id593 . -178) (undo-tree-id594 . -181) (undo-tree-id595 . -183) (undo-tree-id596 . -192) (undo-tree-id597 . -193) (undo-tree-id598 . -195) (undo-tree-id599 . -194) (undo-tree-id600 . -195) (undo-tree-id601 . -194) (undo-tree-id602 . -194) (undo-tree-id603 . -195) 792 (t 25758 60972 52965 536000)) nil (25758 60993 459925 712000) 0 nil])
([nil nil ((#("Let’s look at how to
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 21 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 598) (undo-tree-id607 . -20) (undo-tree-id608 . 21) (undo-tree-id609 . -21) (t 25758 60993 460929 223000)) nil (25758 61005 119133 333000) 0 nil])
([nil nil ((#("build a Char-RNN, step by step, starting with the creation of the dataset.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 598) (undo-tree-id604 . -74) (undo-tree-id605 . 75) (undo-tree-id606 . -75)) nil (25758 61005 119129 793000) 0 nil])
([nil nil ((#("
" 0 1 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 596) (598 . 600)) nil (25758 61005 119113 173000) 0 nil])
([nil nil ((639 . 640) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 639) (undo-tree-id611 . -1) (t 25758 61005 124911 656000)) nil (25758 61022 831820 318000) 0 nil])
([nil nil ((669 . 670) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 669) (undo-tree-id610 . -1)) nil (25758 61022 831814 691000) 0 nil])
([nil nil ((689 . 690) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 689) (undo-tree-id612 . -1) (t 25758 61022 840887 868000)) nil (25758 61026 150595 329000) 0 nil])
([nil nil ((763 . 764) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 763) (undo-tree-id613 . -1) (t 25758 61026 152883 800000)) nil (25758 61041 322539 279000) 0 nil])
([nil nil ((796 . 802) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil))) #s(yas--exit 820 nil) 8 nil #s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -814) (undo-tree-id627 . -2) (784 . 827) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 784) (undo-tree-id628 . -2) (undo-tree-id629 . -2) (undo-tree-id630 . -2) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -2) (undo-tree-id635 . -2) (undo-tree-id636 . -2) (undo-tree-id637 . -2) 786 (784 . 786) (783 . 784) (t 25758 61041 324866 658000) 766) nil (25758 61056 712133 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 784 831 #s(yas--snippet nil (#s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil))) #s(yas--exit 820 nil) 8 nil #s(yas--field 1 796 802 nil nil nil t #s(yas--exit 820 nil)) nil nil))) nil (25758 61056 712123 879000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 819) (undo-tree-id626 . -1)) nil (25758 61056 712123 50000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 819) (undo-tree-id625 . -1)) nil (25758 61056 712121 702000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 819) (undo-tree-id624 . -1)) nil (25758 61056 712120 210000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 819) (undo-tree-id614 . -9) (undo-tree-id615 . -9) (undo-tree-id616 . -10) (undo-tree-id617 . -10) (undo-tree-id618 . -10) (undo-tree-id619 . -10) (undo-tree-id620 . -9) (undo-tree-id621 . -9) (undo-tree-id622 . -9) (undo-tree-id623 . -10)) nil (25758 61056 712117 773000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1005 . 1006) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -1015) (1005 . 1016) 978) nil (25758 61056 712095 938000) 0 nil])
([nil nil ((978 . 982) (t 25758 61056 764851 670000)) nil (25758 61076 910997 971000) 0 nil])
([nil nil ((1072 . 1074) (t 25758 61076 964835 683000)) nil (25758 61107 381103 865000) 0 nil])
([nil nil ((#("One option is to create
" 0 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1074) (undo-tree-id670 . -23) (undo-tree-id671 . 24) (undo-tree-id672 . -24) (undo-tree-id673 . -24) (t 25758 61097 448823 519000)) nil (25758 61113 727817 248000) 0 nil] [nil nil ((#("One option is to create
" 0 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1074) (undo-tree-id638 . -23) (undo-tree-id639 . 24) (undo-tree-id640 . -24) (undo-tree-id641 . -24) (t 25758 61097 448823 519000)) ((1074 . 1098)) (25758 61107 380703 634000) 0 nil])
([nil nil ((#("a custom preprocessing layer, as we did in Chapter 13" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 53 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1074) (undo-tree-id667 . -52) (undo-tree-id668 . 53) (undo-tree-id669 . -53)) nil (25758 61113 727813 503000) 0 nil])
nil
([nil nil ((#(". " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1074) (undo-tree-id664 . -1) (undo-tree-id665 . 2) (undo-tree-id666 . -2)) nil (25758 61113 727772 715000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1073) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1)) nil (25758 61113 727766 693000) 0 nil])
([nil nil ((1122 . 1123) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1122) (undo-tree-id674 . -1) (t 25758 61113 736816 644000)) nil (25758 61119 881499 577000) 0 nil])
([nil nil ((1093 . 1094) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1093) (undo-tree-id679 . -1) 1092 (t 25758 61119 888814 676000)) nil (25758 61130 561416 407000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1151) (nil fontified nil 1150 . 1151) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1150 . 1151) (1150 . 1151) 1093) nil (25758 61130 561414 62000) 0 nil])
([nil nil ((1141 . 1142)) nil (25758 61130 561412 234000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1142) (undo-tree-id675 . 1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1)) nil (25758 61130 561408 333000) 0 nil])
([nil nil ((1150 . 1151) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1150) (undo-tree-id680 . -1) 1142 (t 25758 61130 568812 60000)) nil (25758 61133 658408 205000) 0 nil])
([nil nil ((1164 . 1165) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1164) (undo-tree-id681 . -1) 1142 (t 25758 61133 660811 489000)) nil (25758 61156 733455 885000) 0 nil])
([nil nil ((1188 . 1189)) nil (25758 61156 733441 144000) 0 nil])
([nil nil ((#("(it does not start at 0, so we can use that value for masking, as
we will see later in this chapter)" 0 66 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 66 100 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1332) (undo-tree-id691 . -99) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -100) 1333 (t 25758 61156 788809 815000)) nil (25758 61187 221442 421000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1331) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1)) nil (25758 61187 221433 708000) 0 nil])
([nil nil ((1347 . 1351) (#("h" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1347) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (#("t" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1348) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (#("n" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1349) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("o" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1350) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) 1351 (1345 . 1351) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil))) #s(yas--exit 1369 nil) 9 nil #s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -1363) (undo-tree-id800 . -2) (1333 . 1376) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1333) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) 1335 (1333 . 1335) (1332 . 1333) (t 25758 61187 228814 347000) 1331) nil (25758 61220 801380 576000) 0 nil])
([nil nil ((apply yas--snippet-revive 1333 1380 #s(yas--snippet nil (#s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil))) #s(yas--exit 1369 nil) 9 nil #s(yas--field 1 1345 1351 nil nil nil t #s(yas--exit 1369 nil)) nil nil))) nil (25758 61220 801351 177000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1369) (undo-tree-id765 . -1)) nil (25758 61220 801350 325000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1368) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1)) nil (25758 61220 801347 418000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1369) (undo-tree-id752 . -9) (undo-tree-id753 . -9) (undo-tree-id754 . -9) (undo-tree-id755 . -9) (undo-tree-id756 . -10)) nil (25758 61220 801341 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1545 . 1546) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -1555) (1545 . 1556) 1433) nil (25758 61220 800893 352000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1368) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1)) nil (25758 61221 202625 847000) 0 nil])
([nil nil ((1475 . 1476) (1474 . 1475)) nil (25758 61236 252760 253000) 0 nil] [nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1545) (undo-tree-id737 . -9) (undo-tree-id738 . -9) (undo-tree-id739 . -10)) ((1545 . 1555)) (25758 61220 801639 514000) 0 nil])
([nil nil ((#("#We set char_level=True to get character-level encoding rather than the
" 0 1 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 4 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 4 7 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 7 8 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 8 12 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 12 13 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 18 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 18 19 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 23 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 23 71 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 71 72 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1475) (undo-tree-id814 . -71) (undo-tree-id815 . 71) (undo-tree-id816 . -72) (undo-tree-id817 . -72) (undo-tree-id818 . -31) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -72)) nil (25758 61236 252758 897000) 0 nil])
([nil nil ((#("tokenizer = keras.preprocessing.text.Tokenizer(char_level=True)
" 0 1 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 9 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 9 46 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 46 47 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 51 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 51 52 (invisible t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 52 57 (display ((raise -0.3) (height 0.7)) src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 58 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 58 62 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 62 63 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 64 (src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1368) (undo-tree-id698 . -63) (undo-tree-id699 . -64) (undo-tree-id700 . -64) (undo-tree-id701 . -64) (undo-tree-id702 . -64) (undo-tree-id703 . -64) (undo-tree-id704 . -64) (undo-tree-id705 . -64) (undo-tree-id706 . -64) (undo-tree-id707 . -64) (undo-tree-id708 . -64) (undo-tree-id709 . -64) (undo-tree-id710 . -64) (undo-tree-id711 . -64) (undo-tree-id712 . -64) (undo-tree-id713 . -64) (undo-tree-id714 . -64) (undo-tree-id715 . -64) (undo-tree-id716 . -64) (undo-tree-id717 . -64) (undo-tree-id718 . -64) (undo-tree-id719 . -64) (undo-tree-id720 . -64) (undo-tree-id721 . -64) (undo-tree-id722 . -64) (undo-tree-id723 . -64) (undo-tree-id724 . -64) (undo-tree-id725 . -64) (undo-tree-id726 . -64) (undo-tree-id727 . -63) (undo-tree-id728 . -64) (undo-tree-id729 . -64) (undo-tree-id730 . 64) (undo-tree-id731 . -9) (undo-tree-id732 . -64) (undo-tree-id733 . -64) (undo-tree-id734 . -64) (undo-tree-id735 . -64) (undo-tree-id736 . -64) 1432) ((1368 . 1432)) (25758 61220 800874 353000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1484 . 1485) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t)) . -1556) (1484 . 1557) 1475) nil (25758 61236 252752 652000) 0 nil])
nil
([nil nil ((#("#" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t src-block t font-lock-fontified t)) . 1485) (undo-tree-id812 . -1) (undo-tree-id813 . -1)) nil (25758 61236 252748 588000) 0 nil])
([nil nil ((1585 . 1586) (t 25758 61236 260836 708000)) nil (25758 61259 822006 691000) 0 nil])
([nil nil ((#("(but you can set lower=False if you do not want
that)" 0 39 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 39 48 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 48 53 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1653) (undo-tree-id827 . -52) (undo-tree-id828 . -53) 1632) nil (25758 61259 822004 906000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1652) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1)) nil (25758 61259 821997 875000) 0 nil])
([nil nil ((1654 . 1656) (t 25758 61259 828853 641000)) nil (25758 61263 962289 893000) 0 nil])
([nil nil ((#("(or a list of sentences)" 0 24 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1696) (undo-tree-id834 . -23) (undo-tree-id835 . -24) 1656 (t 25758 61263 968857 8000)) nil (25758 61272 263674 798000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1695) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1)) nil (25758 61272 263669 10000) 0 nil])
([nil nil ((1851 . 1855) (#("h" 0 1 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -1851) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) 1852 (1849 . 1852) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil))) #s(yas--exit 1873 nil) 10 nil #s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -1867) (undo-tree-id847 . -2) (1837 . 1880) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1837) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) 1839 (1837 . 1839) (1836 . 1837) (1835 . 1836) (t 25758 61272 272864 108000) 1830) nil (25758 61299 47026 133000) 0 nil])
([nil nil ((apply yas--snippet-revive 1837 1884 #s(yas--snippet nil (#s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil))) #s(yas--exit 1873 nil) 10 nil #s(yas--field 1 1849 1855 nil nil nil t #s(yas--exit 1873 nil)) nil nil))) nil (25758 61299 47012 804000) 0 nil])
([nil nil ((#("


" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1872) (undo-tree-id841 . -2) (undo-tree-id842 . -3)) nil (25758 61299 47011 527000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1872) (undo-tree-id836 . -9) (undo-tree-id837 . -9) (undo-tree-id838 . -9) (undo-tree-id839 . -9) (undo-tree-id840 . -10)) nil (25758 61299 47008 737000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2145 . 2146) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -2155) (2145 . 2156) 2073) nil (25758 61299 46990 908000) 0 nil])
([nil nil ((#(">>> " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 4 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1872) (undo-tree-id880 . -3) (undo-tree-id881 . 4) (undo-tree-id882 . -1) (undo-tree-id883 . -4) (t 25758 61299 56890 89000)) nil (25758 61317 573107 834000) 0 nil])
([nil nil ((#(">>> " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1931) (undo-tree-id876 . -3) (undo-tree-id877 . 4) (undo-tree-id878 . -1) (undo-tree-id879 . -4)) nil (25758 61317 573104 232000) 0 nil])
([nil nil ((#(">>> " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1994) (undo-tree-id872 . -3) (undo-tree-id873 . 4) (undo-tree-id874 . -1) (undo-tree-id875 . -4)) nil (25758 61317 573100 456000) 0 nil])
([nil nil ((#(">>> " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2061) (undo-tree-id868 . -3) (undo-tree-id869 . 4) (undo-tree-id870 . -1) (undo-tree-id871 . -4)) nil (25758 61317 573096 688000) 0 nil])
([nil nil ((1911 . 1912) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1911) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) 1872) nil (25758 61317 573088 955000) 0 nil])
([nil nil ((1912 . 1913)) nil (25758 61317 573049 994000) 0 nil])
([nil nil ((1980 . 1982)) nil (25758 61317 573048 865000) 0 nil])
([nil nil ((1982 . 1983) (#("
" 0 1 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1982) (undo-tree-id859 . 1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) 1981) nil (25758 61317 573044 979000) 0 nil])
([nil nil ((2146 . 2147) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2146) (undo-tree-id922 . -1) (t 25758 61317 628910 767000)) nil (25758 61431 392525 514000) 0 nil])
([nil nil ((2213 . 2214)) nil (25758 61431 392516 689000) 0 nil])
([nil nil ((2214 . 2217) (#("(we" 0 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2214) (undo-tree-id911 . -2) (undo-tree-id912 . 3) (undo-tree-id913 . -2) (undo-tree-id914 . -2) (undo-tree-id915 . -3) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) 2216) nil (25758 61431 392515 358000) 0 nil])
([nil nil ((2217 . 2218) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2217) (undo-tree-id907 . 1) (undo-tree-id908 . 1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) 2216) nil (25758 61431 392505 694000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2278) (undo-tree-id902 . -1) (undo-tree-id903 . 1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1)) nil (25758 61431 392501 307000) 0 nil])
([nil nil ((2292 . 2298) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil))) #s(yas--exit 2316 nil) 11 nil #s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -2310) (undo-tree-id891 . -2) (2280 . 2323) (#("sr" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2280) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -2) (undo-tree-id899 . -2) (undo-tree-id900 . -2) (undo-tree-id901 . -2) 2282 (2280 . 2282) (2279 . 2280)) nil (25758 61431 392495 135000) 0 nil])
([nil nil ((apply yas--snippet-revive 2280 2327 #s(yas--snippet nil (#s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil))) #s(yas--exit 2316 nil) 11 nil #s(yas--field 1 2292 2298 nil nil nil t #s(yas--exit 2316 nil)) nil nil))) nil (25758 61431 392052 327000) 0 nil])
([nil nil ((#("


" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2315) (undo-tree-id889 . -2) (undo-tree-id890 . -3)) nil (25758 61431 392051 287000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2315) (undo-tree-id884 . -9) (undo-tree-id885 . -9) (undo-tree-id886 . -9) (undo-tree-id887 . -9) (undo-tree-id888 . -10)) nil (25758 61431 392048 457000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2389 . 2390) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -2399) (2389 . 2400) 2388) nil (25758 61431 392034 516000) 0 nil])
([nil nil ((2387 . 2388) (#("
" 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2387) (undo-tree-id923 . -1) (undo-tree-id924 . -1) 2362 (t 25758 61431 401080 416000)) nil (25758 61455 18416 656000) 0 nil])
([nil nil ((2600 . 2602) (t 25758 61440 729097 314000)) nil (25758 61458 970652 36000) 0 nil] [nil nil ((2601 . 2604) (t 25758 61440 729097 314000)) ((#("
* " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (face org-level-1 keymap (keymap) composition (0 1 [9673]) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 2 3 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 2601) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2)) (25758 61455 17068 848000) 0 nil])
([nil nil ((#("Before we continue, we need to split the dataset into a training set, a
" 0 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2400) (undo-tree-id939 . -71) (undo-tree-id940 . -72) (undo-tree-id941 . -72) (t 25758 61458 981131 571000)) nil (25758 61486 379851 841000) 0 nil])
nil
([nil nil ((#("validation set, and a test set. We can’t just shuffle all the characters in the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 80 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2400) (undo-tree-id936 . -79) (undo-tree-id937 . -80) (undo-tree-id938 . -80)) nil (25758 61486 379848 465000) 0 nil])
([nil nil ((#("text, so how do you split a sequential dataset?
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 48 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2400) (undo-tree-id929 . -47) (undo-tree-id930 . -48) (undo-tree-id931 . -48) (undo-tree-id932 . -48) (undo-tree-id933 . 9) (undo-tree-id934 . -46) (undo-tree-id935 . -48)) nil (25758 61486 379842 505000) 0 nil])
([nil nil ((#("For example, we can take the first 90% of
the text for the training set, then the next 5% for the validation set, and the
final 5% for the test set. It would also be a good idea to leave a gap
between these sets to avoid the risk of a paragraph overlapping over two
sets.
" 0 22 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 22 42 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 122 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 122 193 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 193 266 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 266 272 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2542) (undo-tree-id942 . -271) (undo-tree-id943 . -271) (undo-tree-id944 . -271) (undo-tree-id945 . -272) (undo-tree-id946 . -271) (undo-tree-id947 . -2) (undo-tree-id948 . -10) (undo-tree-id949 . -11) (undo-tree-id950 . -14) (undo-tree-id951 . -18) (undo-tree-id952 . -23) (undo-tree-id953 . -27) (undo-tree-id954 . -33) (undo-tree-id955 . -37) (undo-tree-id956 . -40) (undo-tree-id957 . -44) (undo-tree-id958 . -49) (undo-tree-id959 . -53) (undo-tree-id960 . -57) (undo-tree-id961 . -66) (undo-tree-id962 . -70) (undo-tree-id963 . -71) (undo-tree-id964 . -76) (undo-tree-id965 . -80) (undo-tree-id966 . -85) (undo-tree-id967 . -88) (undo-tree-id968 . -92) (undo-tree-id969 . -96) (undo-tree-id970 . -107) (undo-tree-id971 . -111) (undo-tree-id972 . -112) (undo-tree-id973 . -116) (undo-tree-id974 . -120) (undo-tree-id975 . -126) (undo-tree-id976 . -129) (undo-tree-id977 . -133) (undo-tree-id978 . -137) (undo-tree-id979 . -142) (undo-tree-id980 . -146) (undo-tree-id981 . -147) (undo-tree-id982 . -150) (undo-tree-id983 . -156) (undo-tree-id984 . -161) (undo-tree-id985 . -164) (undo-tree-id986 . -166) (undo-tree-id987 . -171) (undo-tree-id988 . -176) (undo-tree-id989 . -179) (undo-tree-id990 . -185) (undo-tree-id991 . -187) (undo-tree-id992 . -191) (undo-tree-id993 . -199) (undo-tree-id994 . -205) (undo-tree-id995 . -210) (undo-tree-id996 . -213) (undo-tree-id997 . -219) (undo-tree-id998 . -271) (undo-tree-id999 . -271) (undo-tree-id1000 . -272) 2813 (t 25758 61486 389185 864000)) nil (25758 61543 398684 306000) 0 nil])
([nil nil ((2542 . 2544)) nil (25758 61543 398633 689000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (t 25758 61543 409309 119000)) nil (25758 61554 401284 200000) 0 nil])
([nil nil ((#("When dealing with time series, you would in general split across time,: for
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 76 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1039 . -75) (undo-tree-id1040 . 76) (undo-tree-id1041 . 36) (undo-tree-id1042 . -3) (undo-tree-id1043 . -11) (undo-tree-id1044 . -16) (undo-tree-id1045 . -21) (undo-tree-id1046 . -28) (undo-tree-id1047 . -29) (undo-tree-id1048 . -33) (undo-tree-id1049 . -39) (undo-tree-id1050 . -42) (undo-tree-id1051 . -50) (undo-tree-id1052 . -56) (undo-tree-id1053 . -63) (undo-tree-id1054 . -68) (undo-tree-id1055 . -70) (undo-tree-id1056 . -74) (undo-tree-id1057 . -6) (undo-tree-id1058 . -6) (undo-tree-id1059 . -13) (undo-tree-id1060 . -76) (undo-tree-id1061 . -76) (t 25758 61554 409334 397000)) nil (25758 61583 640795 19000) 0 nil])
([nil nil ((#("example, you might take the years 2000 to 2012 for the training set, the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1020 . -72) (undo-tree-id1021 . 73) (undo-tree-id1022 . 73) (undo-tree-id1023 . -6) (undo-tree-id1024 . -13) (undo-tree-id1025 . -19) (undo-tree-id1026 . -24) (undo-tree-id1027 . -28) (undo-tree-id1028 . -34) (undo-tree-id1029 . -39) (undo-tree-id1030 . -42) (undo-tree-id1031 . -47) (undo-tree-id1032 . -51) (undo-tree-id1033 . -55) (undo-tree-id1034 . -64) (undo-tree-id1035 . -67) (undo-tree-id1036 . -69) (undo-tree-id1037 . -73) (undo-tree-id1038 . -73)) nil (25758 61583 640739 309000) 0 nil])
([nil nil ((#("years 2013 to 2015 for the validation set, and the years 2016 to 2018 for
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1016 . -73) (undo-tree-id1017 . 74) (undo-tree-id1018 . 74) (undo-tree-id1019 . -74)) nil (25758 61583 641077 58000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2611) (nil fontified nil 2610 . 2611) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2610 . 2611) (2610 . 2611) 2543) nil (25758 61596 947094 957000) 0 nil] [nil nil ((#("the test set. However, in some cases you may be able to split along otherdimensions, which will give you a longer time period to train on. For
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 47 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 143 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1012 . -142) (undo-tree-id1013 . 143) (undo-tree-id1014 . 143) (undo-tree-id1015 . -143)) ((2543 . 2686)) (25758 61583 640711 594000) 0 nil])
([nil nil ((#("the test set. However, in some cases you may be able to split along
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 47 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 67 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 67 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2543) (undo-tree-id1076 . -67) (undo-tree-id1077 . 68) (undo-tree-id1078 . 68) (undo-tree-id1079 . -68) (undo-tree-id1080 . -68) (undo-tree-id1081 . -68) (undo-tree-id1082 . -68)) nil (25758 61596 947093 116000) 0 nil])
nil
([nil nil ((#("otherdimensions, which will give you a longer time period to train on. For
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1068 . -74) (undo-tree-id1069 . 75) (undo-tree-id1070 . 75) (undo-tree-id1071 . -74) (undo-tree-id1072 . 1) (undo-tree-id1073 . 75) (undo-tree-id1074 . -15) (undo-tree-id1075 . -75)) nil (25758 61600 750994 729000) 0 nil])
([nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1107 . -72) (undo-tree-id1108 . 73) (undo-tree-id1109 . 73) (undo-tree-id1110 . 73) (undo-tree-id1111 . 73) (undo-tree-id1112 . -73)) nil (25758 61623 657469 946000) 0 nil] [nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1083 . -72) (undo-tree-id1084 . 73) (undo-tree-id1085 . 73) (undo-tree-id1086 . 73) (undo-tree-id1087 . 73) (undo-tree-id1088 . -73)) ((2543 . 2616)) (25758 61600 750771 890000) 0 nil] [nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1062 . -72) (undo-tree-id1063 . 73) (undo-tree-id1064 . 73) (undo-tree-id1065 . 73) (undo-tree-id1066 . 73) (undo-tree-id1067 . -73)) ((2543 . 2616)) (25758 61596 947077 553000) 0 nil])
([nil nil ((#("from 2000 to 2018, you might be able to split this data across the different
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 77 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1101 . -76) (undo-tree-id1102 . 77) (undo-tree-id1103 . 77) (undo-tree-id1104 . 77) (undo-tree-id1105 . 77) (undo-tree-id1106 . -77)) nil (25758 61623 657465 656000) 0 nil])
nil
nil
([nil nil ((#("companies. It’s very likely that many of these companies will be strongly
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1095 . -73) (undo-tree-id1096 . 74) (undo-tree-id1097 . 74) (undo-tree-id1098 . 74) (undo-tree-id1099 . 74) (undo-tree-id1100 . -74)) nil (25758 61623 657679 861000) 0 nil])
([nil nil ((#("correlated, though (e.g., whole economic sectors may go up or down
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 67 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1119 . -66) (undo-tree-id1120 . 67) (undo-tree-id1121 . 67) (undo-tree-id1122 . 67) (undo-tree-id1123 . 67) (undo-tree-id1124 . -67)) nil (25758 61657 411739 975000) 0 nil] [nil nil ((#("correlated, though (e.g., whole economic sectors may go up or down
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 67 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1089 . -66) (undo-tree-id1090 . 67) (undo-tree-id1091 . 67) (undo-tree-id1092 . 67) (undo-tree-id1093 . 67) (undo-tree-id1094 . -67)) ((2543 . 2610)) (25758 61623 657451 142000) 0 nil])
([nil nil ((#("jointly), and if you have correlated companies across the training set and
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1149 . -74) (undo-tree-id1150 . 75) (undo-tree-id1151 . 75) (undo-tree-id1152 . 75) (undo-tree-id1153 . 75) (undo-tree-id1154 . -75)) nil (25758 61665 894085 465000) 0 nil] [nil nil ((#("jointly), and if you have correlated companies across the training set and
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1131 . -74) (undo-tree-id1132 . 75) (undo-tree-id1133 . 75) (undo-tree-id1134 . 75) (undo-tree-id1135 . 75) (undo-tree-id1136 . -75)) ((2543 . 2618)) (25758 61656 954717 428000) 0 nil] [nil nil ((#("jointly), and if you have correlated companies across the training set and
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1113 . -74) (undo-tree-id1114 . 75) (undo-tree-id1115 . 75) (undo-tree-id1116 . 75) (undo-tree-id1117 . 75) (undo-tree-id1118 . -75)) ((2543 . 2618)) (25758 61648 129152 926000) 0 nil])
nil
([nil nil ((#("the test set your test set will not be as useful, as its measure of the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1143 . -71) (undo-tree-id1144 . 72) (undo-tree-id1145 . 72) (undo-tree-id1146 . 72) (undo-tree-id1147 . 72) (undo-tree-id1148 . -72)) nil (25758 61665 894080 459000) 0 nil])
([nil nil ((#("the test set your test set will not be as useful, as its measure of the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1125 . -71) (undo-tree-id1126 . 72) (undo-tree-id1127 . 72) (undo-tree-id1128 . 72) (undo-tree-id1129 . 72) (undo-tree-id1130 . -72)) ((2543 . 2615)) (25758 61656 954499 205000) 0 nil])
nil
([nil nil ((#("generalization error will be optimistically biased.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 52 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1137 . -51) (undo-tree-id1138 . 52) (undo-tree-id1139 . 52) (undo-tree-id1140 . 52) (undo-tree-id1141 . 52) (undo-tree-id1142 . -52)) nil (25758 61665 894071 635000) 0 nil])
nil
([nil nil ((2543 . 2544) (#("So, i" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 5 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2543) (undo-tree-id1200 . -4) (undo-tree-id1201 . 5) (undo-tree-id1202 . -4) (undo-tree-id1203 . 5) (undo-tree-id1204 . 5) (undo-tree-id1205 . -4) (undo-tree-id1206 . -1) (undo-tree-id1207 . -2) (undo-tree-id1208 . -5) (undo-tree-id1209 . -5) (undo-tree-id1210 . -4) (undo-tree-id1211 . -1) (undo-tree-id1212 . -2) (undo-tree-id1213 . -3) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -5) 2547 (t 25758 61665 902584 915000)) nil (25758 61695 293412 598000) 0 nil])
([nil nil ((#("(in the training set)" 0 21 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2658) (undo-tree-id1193 . -20) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -21) 2660) nil (25758 61695 293317 82000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2657) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1)) nil (25758 61696 530106 140000) 0 nil])
([nil nil ((#("(at least in a wide sense)" 0 26 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2751) (undo-tree-id1250 . -25) (undo-tree-id1251 . -10) (undo-tree-id1252 . -10) (undo-tree-id1253 . -10) (undo-tree-id1254 . -10) (undo-tree-id1255 . -10) (undo-tree-id1256 . -10) (undo-tree-id1257 . -10) (undo-tree-id1258 . -10) (undo-tree-id1259 . -10) (undo-tree-id1260 . -10) (undo-tree-id1261 . -10) (undo-tree-id1262 . -10) (undo-tree-id1263 . -10) (undo-tree-id1264 . -10) (undo-tree-id1265 . -10) (undo-tree-id1266 . -10) (undo-tree-id1267 . -10) (undo-tree-id1268 . -10) (undo-tree-id1269 . -10) (undo-tree-id1270 . -10) (undo-tree-id1271 . -10) (undo-tree-id1272 . -10) (undo-tree-id1273 . -10) (undo-tree-id1274 . -26) 2761) nil (25758 61705 89698 801000) 0 nil] [nil nil ((#("(at least in a wide sense)" 0 26 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2751) (undo-tree-id1171 . -25) (undo-tree-id1172 . -10) (undo-tree-id1173 . -10) (undo-tree-id1174 . -10) (undo-tree-id1175 . -10) (undo-tree-id1176 . -10) (undo-tree-id1177 . -10) (undo-tree-id1178 . -10) (undo-tree-id1179 . -10) (undo-tree-id1180 . -10) (undo-tree-id1181 . -10) (undo-tree-id1182 . -10) (undo-tree-id1183 . -26) 2761) ((2751 . 2777)) (25758 61695 891096 646000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2750) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1)) nil (25758 61705 89578 423000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2750) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1)) ((2750 . 2751) (t 25758 61695 356112 844000)) (25758 61695 293285 362000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2751) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (t 25758 61705 144605 113000)) nil (25758 61707 61523 298000) 0 nil])
nil
([nil nil ((2752 . 2753) (t 25758 61707 72701 192000)) nil (25758 61712 54732 383000) 0 nil])
([nil nil ((#("(e.g., chemical reactions should be fine, since the
laws of chemistry don’t change every day)" 0 52 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 52 93 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2804) (undo-tree-id1282 . -92) (undo-tree-id1283 . -93) 2779 (t 25758 61712 56948 218000)) nil (25758 61739 377069 746000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2803) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1)) nil (25758 61739 377064 386000) 0 nil])
([nil nil ((2778 . 2779) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2778) (undo-tree-id1307 . -1) 2777 (t 25758 61739 390269 255000)) nil (25758 61765 233608 689000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2831) (nil fontified nil 2830 . 2831) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2830 . 2831) (2830 . 2831) 2778) nil (25758 61765 233606 474000) 0 nil])
([nil nil ((#("(e.g., financial markets are notoriously not stationary since patterns
disappear as soon as traders spot them and start exploiting them)" 0 71 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 71 136 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2835) (undo-tree-id1298 . -135) (undo-tree-id1299 . -2) (undo-tree-id1300 . 136) (undo-tree-id1301 . -1) (undo-tree-id1302 . -2) (undo-tree-id1303 . -2) (undo-tree-id1304 . -2) (undo-tree-id1305 . -2) (undo-tree-id1306 . -136) 2837) nil (25758 61765 233604 763000) 0 nil])
([nil nil ((2834 . 2835) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2834) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . 1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) 2831) nil (25758 61765 233596 986000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2834) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1)) nil (25758 61765 233584 64000) 0 nil])
([nil nil ((2922 . 2923) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2922) (undo-tree-id1308 . -1) (t 25758 61765 247468 569000)) nil (25758 61781 648959 735000) 0 nil])
([nil nil ((3185 . 3186) (t 25758 61781 656205 356000)) nil (25758 61816 805169 511000) 0 nil])
([nil nil ((#("In short, splitting a time series into a training set, a validation set, and a
" 0 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3187) (undo-tree-id1313 . -78) (undo-tree-id1314 . -79) (t 25758 61816 813723 650000)) nil (25758 61834 285990 854000) 0 nil])
([nil nil ((#("test set is not a trivial task, and how it’s done will depend strongly on the
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3187) (undo-tree-id1311 . -77) (undo-tree-id1312 . -78)) nil (25758 61834 285987 894000) 0 nil])
([nil nil ((#("task at hand.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 14 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3187) (undo-tree-id1309 . -13) (undo-tree-id1310 . -14)) nil (25758 61834 285981 430000) 0 nil])
([nil nil ((#("Now back to Shakespeare! " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 25 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3187) (undo-tree-id1315 . -24) (undo-tree-id1316 . -24) (undo-tree-id1317 . -24) (undo-tree-id1318 . -25) (undo-tree-id1319 . -24) (undo-tree-id1320 . -2) (undo-tree-id1321 . -7) (undo-tree-id1322 . -10) (undo-tree-id1323 . -22) (undo-tree-id1324 . -23) (undo-tree-id1325 . -24) (undo-tree-id1326 . -24) (undo-tree-id1327 . -25) 3211 (t 25758 61834 298449 434000)) nil (25758 61841 719423 733000) 0 nil])
([nil nil ((3190 . 3191) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3190) (undo-tree-id1328 . -1) (t 25758 61841 730752 280000)) nil (25758 61844 597369 431000) 0 nil])
([nil nil ((#("(keeping the rest for the validation set and the test set)" 0 58 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3245) (undo-tree-id1338 . -57) (undo-tree-id1339 . -7) (undo-tree-id1340 . -7) (undo-tree-id1341 . -7) (undo-tree-id1342 . -7) (undo-tree-id1343 . -7) (undo-tree-id1344 . -58) 3252 (t 25758 61844 606868 583000)) nil (25758 61855 211169 341000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3244) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1)) nil (25758 61855 211161 167000) 0 nil])
([nil nil ((3345 . 3351) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil))) #s(yas--exit 3369 nil) 12 nil #s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -3363) (undo-tree-id1353 . -2) (3333 . 3376) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3333) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) 3335 (3333 . 3335) (3332 . 3333) (t 25758 61855 223293 640000) 3323) nil (25758 61875 208836 215000) 0 nil])
([nil nil ((apply yas--snippet-revive 3333 3380 #s(yas--snippet nil (#s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil))) #s(yas--exit 3369 nil) 12 nil #s(yas--field 1 3345 3351 nil nil nil t #s(yas--exit 3369 nil)) nil nil))) nil (25758 61875 208825 496000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3368) (undo-tree-id1352 . -1)) nil (25758 61875 208824 607000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3368) (undo-tree-id1351 . -1)) nil (25758 61875 208823 16000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3368) (undo-tree-id1350 . -1)) nil (25758 61875 208821 320000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3368) (undo-tree-id1345 . -9) (undo-tree-id1346 . -9) (undo-tree-id1347 . -9) (undo-tree-id1348 . -9) (undo-tree-id1349 . -10)) nil (25758 61875 208818 905000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3472 . 3473) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -3482) (3472 . 3483) 3406) nil (25758 61875 208802 189000) 0 nil])
([nil nil ((3482 . 3483) (t 25758 61875 220076 509000) 3473) nil (25758 61880 63334 730000) 0 nil])
([nil nil ((#("
" 0 1 (face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3482) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (3484 . 3486) (t 25758 61880 68262 901000)) nil (25758 61899 468429 19000) 0 nil])
([nil nil ((3538 . 3607) (#("The training set now consists of a single sequence of over a million" 0 68 (face org-level-1 fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . 3538) (undo-tree-id1475 . -3) (t 25758 61899 476996 110000)) nil (25758 61905 442208 46000) 0 nil])
([nil nil ((#("The training set now consists of a single sequence of over a million
characters, so we can’t just train the neural network directly on it: the
RNN would be equivalent to a deep net with over a million layers, and we
would have a single (very long) instance to train it. Instead, " 0 68 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 68 69 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 69 112 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 112 143 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 143 216 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 216 279 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3539) (undo-tree-id1476 . -278) (undo-tree-id1477 . 279) (undo-tree-id1478 . -278) (undo-tree-id1479 . -2) (undo-tree-id1480 . -11) (undo-tree-id1481 . -15) (undo-tree-id1482 . -19) (undo-tree-id1483 . -28) (undo-tree-id1484 . -31) (undo-tree-id1485 . -33) (undo-tree-id1486 . -40) (undo-tree-id1487 . -49) (undo-tree-id1488 . -52) (undo-tree-id1489 . -57) (undo-tree-id1490 . -59) (undo-tree-id1491 . -67) (undo-tree-id1492 . -78) (undo-tree-id1493 . -78) (undo-tree-id1494 . -78) (undo-tree-id1495 . -78) (undo-tree-id1496 . -78) (undo-tree-id1497 . -78) (undo-tree-id1498 . -78) (undo-tree-id1499 . -78) (undo-tree-id1500 . -78) (undo-tree-id1501 . -78) (undo-tree-id1502 . -78) (undo-tree-id1503 . -78) (undo-tree-id1504 . -78) (undo-tree-id1505 . -79) (undo-tree-id1506 . -81) (undo-tree-id1507 . -84) (undo-tree-id1508 . -87) (undo-tree-id1509 . -90) (undo-tree-id1510 . -91) (undo-tree-id1511 . -93) (undo-tree-id1512 . -98) (undo-tree-id1513 . -104) (undo-tree-id1514 . -35) (undo-tree-id1515 . -69) (undo-tree-id1516 . -78) (undo-tree-id1517 . -79) (undo-tree-id1518 . -82) (undo-tree-id1519 . -85) (undo-tree-id1520 . -89) (undo-tree-id1521 . -90) (undo-tree-id1522 . -91) (undo-tree-id1523 . -96) (undo-tree-id1524 . -102) (undo-tree-id1525 . -106) (undo-tree-id1526 . -113) (undo-tree-id1527 . -121) (undo-tree-id1528 . -130) (undo-tree-id1529 . -133) (undo-tree-id1530 . -136) (undo-tree-id1531 . -137) (undo-tree-id1532 . -141) (undo-tree-id1533 . 136) (undo-tree-id1534 . -146) (undo-tree-id1535 . -145) (undo-tree-id1536 . -151) (undo-tree-id1537 . -154) (undo-tree-id1538 . -165) (undo-tree-id1539 . -168) (undo-tree-id1540 . -170) (undo-tree-id1541 . -175) (undo-tree-id1542 . -179) (undo-tree-id1543 . -184) (undo-tree-id1544 . -189) (undo-tree-id1545 . -191) (undo-tree-id1546 . -199) (undo-tree-id1547 . -206) (undo-tree-id1548 . -207) (undo-tree-id1549 . -211) (undo-tree-id1550 . -214) (undo-tree-id1551 . -220) (undo-tree-id1552 . -225) (undo-tree-id1553 . -227) (undo-tree-id1554 . -234) (undo-tree-id1555 . -236) (undo-tree-id1556 . -240) (undo-tree-id1557 . -245) (undo-tree-id1558 . -246) (undo-tree-id1559 . -255) (undo-tree-id1560 . -258) (undo-tree-id1561 . -264) (undo-tree-id1562 . -267) (undo-tree-id1563 . -267) (undo-tree-id1564 . -267) (undo-tree-id1565 . -267) (undo-tree-id1566 . -267) (undo-tree-id1567 . -267) (undo-tree-id1568 . -267) (undo-tree-id1569 . -267) (undo-tree-id1570 . -267) (undo-tree-id1571 . -267) (undo-tree-id1572 . -278) (undo-tree-id1573 . -267) (undo-tree-id1574 . -267) (undo-tree-id1575 . -267) (undo-tree-id1576 . -267) (undo-tree-id1577 . -194) (undo-tree-id1578 . -120) (undo-tree-id1579 . -51) (undo-tree-id1580 . -279) (undo-tree-id1581 . -278) (undo-tree-id1582 . -2) (undo-tree-id1583 . -71) (undo-tree-id1584 . -145) (undo-tree-id1585 . -218) (undo-tree-id1586 . -268) (undo-tree-id1587 . -269) (undo-tree-id1588 . -270) (undo-tree-id1589 . -271) (undo-tree-id1590 . -272) (undo-tree-id1591 . -273) (undo-tree-id1592 . -274) (undo-tree-id1593 . -275) (undo-tree-id1594 . -276) (undo-tree-id1595 . -277) (undo-tree-id1596 . -278) (undo-tree-id1597 . -278) (undo-tree-id1598 . -279) 3817 (t 25758 61905 453217 778000)) nil (25758 62048 30342 602000) 0 nil])
([nil nil ((3562 . 3563) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3562) (undo-tree-id1599 . -1) (t 25758 62048 41992 926000)) nil (25758 62051 411284 221000) 0 nil])
([nil nil ((3828 . 3829) (t 25758 62051 414095 37000)) nil (25758 62092 715244 853000) 0 nil])
([nil nil ((3867 . 3868)) nil (25758 62092 715243 952000) 0 nil])
([nil nil ((3828 . 3829)) nil (25758 62092 715242 901000) 0 nil])
([nil nil ((3839 . 3840) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3839) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) 3829) nil (25758 62100 734782 371000) 0 nil])
([nil nil ((#("Let’s call the window() method to create a" 0 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 42 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3871) (undo-tree-id1635 . -41) (undo-tree-id1636 . -2) (undo-tree-id1637 . -42) (undo-tree-id1638 . -42) (t 25758 62092 775311 673000)) nil (25758 62116 961293 769000) 0 nil] [nil nil ((#("Let’s call the window() method to create a" 0 35 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 42 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3871) (undo-tree-id1602 . -41) (undo-tree-id1603 . -2) (undo-tree-id1604 . -42) (undo-tree-id1605 . -42) (t 25758 62092 775311 673000)) ((3871 . 3913)) (25758 62100 734409 418000) 0 nil])
([nil nil ((#("dataset of short text windows:" 0 30 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3872) (undo-tree-id1630 . -29) (undo-tree-id1631 . 30) (undo-tree-id1632 . -7) (undo-tree-id1633 . -30) (undo-tree-id1634 . -30)) nil (25758 62116 961289 867000) 0 nil])
nil
([nil nil ((3884 . 3890) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil))) #s(yas--exit 3908 nil) 13 nil #s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil)) nil nil)) (#("  " 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . -3902) (undo-tree-id1614 . -2) (3872 . 3915) (#("sr" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3872) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -1) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) 3874 (3872 . 3874) (#("r" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3872) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) 3873 (3872 . 3873)) nil (25758 62116 961285 3000) 0 nil])
([nil nil ((apply yas--snippet-revive 3872 3919 #s(yas--snippet nil (#s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil))) #s(yas--exit 3908 nil) 13 nil #s(yas--field 1 3884 3890 nil nil nil t #s(yas--exit 3908 nil)) nil nil))) nil (25758 62116 961271 499000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3907) (undo-tree-id1613 . -1)) nil (25758 62116 961270 628000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3907) (undo-tree-id1612 . -1)) nil (25758 62116 961269 23000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3907) (undo-tree-id1611 . -1)) nil (25758 62116 961267 417000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3907) (undo-tree-id1606 . -9) (undo-tree-id1607 . -9) (undo-tree-id1608 . -9) (undo-tree-id1609 . -9) (undo-tree-id1610 . -10)) nil (25758 62116 961264 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3991 . 3992) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -4001) (3991 . 4002) 3921) nil (25758 62116 961247 665000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-multiline t face org-block-end-line wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 9 10 (face org-block-end-line fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3992) (undo-tree-id1639 . -9) (undo-tree-id1640 . -9) (undo-tree-id1641 . -10) (t 25758 62116 971993 987000)) nil (25758 62121 250731 961000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4061 . 4062) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil face org-block-end-line)) . -4071) (4061 . 4072) 3992) nil (25758 62121 250715 923000) 0 nil])
([nil nil ((#("TIP" 0 3 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4072) (undo-tree-id1642 . -2) (undo-tree-id1643 . -3) (undo-tree-id1644 . -3) (t 25758 62121 264112 845000)) nil (25758 62123 739802 914000) 0 nil])
([nil nil ((#("You can try tuning n_steps : it is easier to train RNNs on shorter input sequences,
" 0 20 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 20 21 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 26 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 26 84 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4073) (undo-tree-id1649 . -83) (undo-tree-id1650 . -84) (t 25758 62123 752181 455000)) nil (25758 62147 912148 345000) 0 nil])
([nil nil ((#("but of course the RNN will not be able to learn any pattern longer than n_steps , so
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 74 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 74 79 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 79 85 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4073) (undo-tree-id1647 . -84) (undo-tree-id1648 . -85)) nil (25758 62147 912145 229000) 0 nil])
([nil nil ((#("don’t make it too small.
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 25 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4073) (undo-tree-id1645 . -24) (undo-tree-id1646 . -25)) nil (25758 62147 912138 102000) 0 nil])
([nil nil ((3872 . 3873) (3871 . 3872) (t 25758 62147 968838 241000) 3870) nil (25758 62181 175231 963000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3872) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1)) nil (25758 62181 175227 165000) 0 nil])
([nil nil ((#("(which will allow us to create batches without having to do any padding),
" 0 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4364) (undo-tree-id1659 . -73) (undo-tree-id1660 . 74) (undo-tree-id1661 . -1) (undo-tree-id1662 . 3) (undo-tree-id1663 . -72) (undo-tree-id1664 . -74) (t 25758 62181 185707 881000)) nil (25758 62243 264853 597000) 0 nil])
([nil nil ((#("(otherwise the last 100 windows will
contain 100 characters, 99 characters, and so on down to 1 character)" 0 37 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 37 106 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4391) (undo-tree-id1676 . -105) (undo-tree-id1677 . -18) (undo-tree-id1678 . -9) (undo-tree-id1679 . -13) (undo-tree-id1680 . -18) (undo-tree-id1681 . -18) (undo-tree-id1682 . -18) (undo-tree-id1683 . -18) (undo-tree-id1684 . -106) 4409 (t 25758 62243 323244 905000)) nil (25758 62260 42442 105000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4390) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1)) nil (25759 18366 46767 176000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -4191) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) 4192 (4191 . 4192)) nil (25759 18371 156690 279000) 0 nil] [nil nil ((4190 . 4191) (t 25758 62260 59640 307000)) ((#("_" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4190)) (25759 18365 495952 690000) 0 nil])
([nil nil ((4391 . 4392) (t 25759 18371 167072 989000) 4367) nil (25759 18402 718505 508000) 0 nil])
([nil nil ((4198 . 4199)) ((#("_" 0 1 (invisible org-link org-emphasis t font-lock-multiline t face (underline) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4198) (t 25759 18364 674772 271000)) (25759 18364 615421 381000) 0 nil])
([nil nil ((4504 . 4505) (#("’" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4504) (undo-tree-id1689 . -1) (t 25759 18402 724534 374000)) nil (25759 18474 698258 578000) 0 nil])
nil
([nil nil ((#("This is useful when you want to transform each window by
calling its dataset methods (e.g., to shuffle them or batch them). However,
we cannot use a nested dataset directly for training, as our model willexpect tensors as input, not datasets. So," 0 57 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 133 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 133 246 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4555) (undo-tree-id1695 . -245) (undo-tree-id1696 . -245) (undo-tree-id1697 . -245) (undo-tree-id1698 . -3) (undo-tree-id1699 . -6) (undo-tree-id1700 . -5) (undo-tree-id1701 . 174) (undo-tree-id1702 . -76) (undo-tree-id1703 . -246) (undo-tree-id1704 . -245) (undo-tree-id1705 . 177) (undo-tree-id1706 . -76) (undo-tree-id1707 . -72) (undo-tree-id1708 . -87) (undo-tree-id1709 . -89) (undo-tree-id1710 . -122) (undo-tree-id1711 . -130) (undo-tree-id1712 . -131) (undo-tree-id1713 . -134) (undo-tree-id1714 . -141) (undo-tree-id1715 . -145) (undo-tree-id1716 . -147) (undo-tree-id1717 . -146) (undo-tree-id1718 . -145) (undo-tree-id1719 . -147) (undo-tree-id1720 . -154) (undo-tree-id1721 . 90) (undo-tree-id1722 . -163) (undo-tree-id1723 . -162) (undo-tree-id1724 . -171) (undo-tree-id1725 . -175) (undo-tree-id1726 . -184) (undo-tree-id1727 . -185) (undo-tree-id1728 . -188) (undo-tree-id1729 . -192) (undo-tree-id1730 . -198) (undo-tree-id1731 . 46) (undo-tree-id1732 . -210) (undo-tree-id1733 . -209) (undo-tree-id1734 . -217) (undo-tree-id1735 . -220) (undo-tree-id1736 . -226) (undo-tree-id1737 . -227) (undo-tree-id1738 . -231) (undo-tree-id1739 . 13) (undo-tree-id1740 . -241) (undo-tree-id1741 . -240) (undo-tree-id1742 . -241) (undo-tree-id1743 . -244) (undo-tree-id1744 . -245) (undo-tree-id1745 . -245) (undo-tree-id1746 . -246) 4800 (t 25759 18432 925932 470000)) nil (25759 18505 445047 902000) 0 nil] [nil nil ((#("This is useful when you want to transform each window by
calling its dat" 0 57 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 72 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4555) (undo-tree-id1690 . -71) (undo-tree-id1691 . -3) (undo-tree-id1692 . -6) (undo-tree-id1693 . -5) (undo-tree-id1694 . -72) (t 25759 18432 925932 470000)) ((4555 . 4627)) (25759 18474 697698 980000) 0 nil])
([nil nil ((4556 . 4557) (#("w" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4556)) nil (25759 18505 445000 257000) 0 nil])
nil
([nil nil ((#("w" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -4590) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) 4591 (4590 . 4591) (#(":" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4590) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (t 25759 18505 453288 165000)) nil (25759 18521 530481 522000) 0 nil])
([nil nil ((4591 . 4593) (#("it" 0 2 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4591) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -2) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) 4592) nil (25759 18521 530475 770000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4601) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1)) nil (25759 18521 530464 825000) 0 nil])
([nil nil ((#("(one that does not
contain datasets)" 0 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 36 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4639) (undo-tree-id1773 . -35) (undo-tree-id1774 . 36) (undo-tree-id1775 . -1) (undo-tree-id1776 . 1) (undo-tree-id1777 . -36) (undo-tree-id1778 . -36) (t 25759 18521 542032 250000)) nil (25759 18526 919945 639000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4638) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1)) nil (25759 18526 919937 760000) 0 nil])
([nil nil ((#("For example, suppose {1, 2, 3} represents a dataset" 0 51 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4640) (undo-tree-id1802 . -50) (undo-tree-id1803 . -50) (undo-tree-id1804 . -50) (undo-tree-id1805 . 7) (undo-tree-id1806 . -51) (undo-tree-id1807 . -21) (undo-tree-id1808 . -51) (undo-tree-id1809 . -51) (t 25759 18526 926281 241000)) nil (25759 18556 346972 684000) 0 nil])
([nil nil ((#("containing the sequence of tensors 1, 2, and 3. If you flatten the nested" 0 63 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 73 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4641) (undo-tree-id1797 . -72) (undo-tree-id1798 . -56) (undo-tree-id1799 . -56) (undo-tree-id1800 . -73) (undo-tree-id1801 . -73)) nil (25759 18556 346966 119000) 0 nil])
([nil nil ((#("dataset {{1, 2}, {3, 4, 5, 6}}, you get back the flat dataset {1, 2, 3, 4, 5, 6}." 0 81 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4642) (undo-tree-id1779 . -80) (undo-tree-id1780 . -56) (undo-tree-id1781 . -56) (undo-tree-id1782 . -56) (undo-tree-id1783 . -56) (undo-tree-id1784 . -56) (undo-tree-id1785 . -56) (undo-tree-id1786 . -56) (undo-tree-id1787 . -56) (undo-tree-id1788 . 27) (undo-tree-id1789 . -61) (undo-tree-id1790 . -56) (undo-tree-id1791 . -56) (undo-tree-id1792 . -56) (undo-tree-id1793 . 81) (undo-tree-id1794 . -7) (undo-tree-id1795 . -81) (undo-tree-id1796 . -81)) nil (25759 18556 346958 36000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4641) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (t 25759 18556 359642 149000)) nil (25759 18558 629288 678000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4641) (undo-tree-id1826 . -1) (t 25759 18558 635747 376000)) nil (25759 18589 896237 175000) 0 nil])
([nil nil ((4641 . 4642) (#("Moreover, t" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 11 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4641) (undo-tree-id1866 . -10) (undo-tree-id1867 . -10) (undo-tree-id1868 . -7) (undo-tree-id1869 . -7) (undo-tree-id1870 . -7) (undo-tree-id1871 . -7) (undo-tree-id1872 . -7) (undo-tree-id1873 . -7) (undo-tree-id1874 . -7) (undo-tree-id1875 . -7) (undo-tree-id1876 . -7) (undo-tree-id1877 . -7) (undo-tree-id1878 . -7) (undo-tree-id1879 . -7) (undo-tree-id1880 . -7) (undo-tree-id1881 . -7) (undo-tree-id1882 . -7) (undo-tree-id1883 . -7) (undo-tree-id1884 . -8) (undo-tree-id1885 . -8) (undo-tree-id1886 . -8) (undo-tree-id1887 . -8) (undo-tree-id1888 . -8) (undo-tree-id1889 . -8) (undo-tree-id1890 . -8) (undo-tree-id1891 . -8) (undo-tree-id1892 . -8) (undo-tree-id1893 . -8) (undo-tree-id1894 . -7) (undo-tree-id1895 . -8) (undo-tree-id1896 . -11) (undo-tree-id1897 . -10) (undo-tree-id1898 . -10) (undo-tree-id1899 . -10) (undo-tree-id1900 . -10) (undo-tree-id1901 . -10) (undo-tree-id1902 . -10) (undo-tree-id1903 . -10) (undo-tree-id1904 . -10) (undo-tree-id1905 . -10) (undo-tree-id1906 . -10) (undo-tree-id1907 . -10) (undo-tree-id1908 . -10) (undo-tree-id1909 . -8) (undo-tree-id1910 . -10) (undo-tree-id1911 . -11) (undo-tree-id1912 . -10) (undo-tree-id1913 . -7) (undo-tree-id1914 . -8) (undo-tree-id1915 . -11) (undo-tree-id1916 . -10) (undo-tree-id1917 . -10) (undo-tree-id1918 . -11) (undo-tree-id1919 . -11) (undo-tree-id1920 . -11) 4651 (t 25759 18591 305257 493000)) nil (25759 18621 464216 829000) 0 nil] [nil nil ((4641 . 4642) (#("Moreover, t" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 11 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4641) (undo-tree-id1827 . -10) (undo-tree-id1828 . -10) (undo-tree-id1829 . -7) (undo-tree-id1830 . -7) (undo-tree-id1831 . -7) (undo-tree-id1832 . -7) (undo-tree-id1833 . -7) (undo-tree-id1834 . -7) (undo-tree-id1835 . -7) (undo-tree-id1836 . -7) (undo-tree-id1837 . -7) (undo-tree-id1838 . -7) (undo-tree-id1839 . -7) (undo-tree-id1840 . -7) (undo-tree-id1841 . -7) (undo-tree-id1842 . -7) (undo-tree-id1843 . -7) (undo-tree-id1844 . -7) (undo-tree-id1845 . -8) (undo-tree-id1846 . -8) (undo-tree-id1847 . -8) (undo-tree-id1848 . -8) (undo-tree-id1849 . -8) (undo-tree-id1850 . -8) (undo-tree-id1851 . -8) (undo-tree-id1852 . -8) (undo-tree-id1853 . -8) (undo-tree-id1854 . -8) (undo-tree-id1855 . -10) (undo-tree-id1856 . -11) (undo-tree-id1857 . -10) (undo-tree-id1858 . -7) (undo-tree-id1859 . -8) (undo-tree-id1860 . -11) (undo-tree-id1861 . -10) (undo-tree-id1862 . -10) (undo-tree-id1863 . -11) (undo-tree-id1864 . -11) (undo-tree-id1865 . -11) 4651 (t 25759 18560 587837 620000)) ((4641 . 4652) (#("T" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4641) (t 25759 18589 685182 616000)) (25759 18589 675005 233000) 0 nil])
([nil nil ((#("For example, if you pass the function lambda ds:" 0 48 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4780) (undo-tree-id1929 . -47) (undo-tree-id1930 . -2) (undo-tree-id1931 . -48) (undo-tree-id1932 . -48) (t 25759 18621 474651 699000)) nil (25759 18646 805679 64000) 0 nil])
nil
([nil nil ((#("* 
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 15575) (undo-tree-id290 . -2) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -3) 15576 (t 25759 18648 330921 296000)) nil (25767 2777 473933 960000) 0 nil] [nil nil ((#("ds.batch(2) to flat_map(), then it will transform the nested dataset {{1,
" 0 19 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 20 (invisible t fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 20 23 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 23 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4781) (undo-tree-id1925 . -73) (undo-tree-id1926 . 74) (undo-tree-id1927 . -2) (undo-tree-id1928 . -74)) ((4781 . 4855)) (25759 18645 973168 640000) 0 nil])
([nil nil ((#("* Natural Language Processing with RNNs and Attention
A common approach for natural language tasks is to use recurrent neural
networks. 
" 0 1 (fontified t composition (0 1 [9673]) keymap (keymap) face org-level-1 line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 1 2 (fontified t keymap (keymap) face org-level-1 line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 2 53 (fontified t face org-level-1 line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 53 54 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 54 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 126 137 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2) (undo-tree-id286 . -136) (undo-tree-id287 . 84) (undo-tree-id288 . -136) (undo-tree-id289 . -137)) nil (25767 2777 473838 152000) 0 nil])
([nil nil ((#("2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 84 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4781) (undo-tree-id1921 . -83) (undo-tree-id1922 . 11) (undo-tree-id1923 . -80) (undo-tree-id1924 . -84)) ((4781 . 4865)) (25759 18645 972861 137000) 0 nil])
([nil nil ((#("* Generating Shakespearean Text Using a Character RNN
This Char-RNN can be used to generate novel text, one character at a time. 
Here is a small sample of the text generated by a Char-RNN model after it was
trained on all of Shakespeare's work:
#+begin_example
Alas, I think he shall be come approached and the day
When little srain would be attain’d into being never fed,
And who is but a chain and subjects of his death,
I should not sleep.
#+end_example
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 53 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 53 54 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 54 130 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 130 208 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 208 246 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 246 262 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 262 316 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 316 362 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 362 374 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 374 424 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 424 444 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 444 457 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 457 458 (fontified t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2) (undo-tree-id281 . -457) (undo-tree-id282 . -2) (undo-tree-id283 . 405) (undo-tree-id284 . -457) (undo-tree-id285 . -458)) nil (25767 2777 473834 17000) 0 nil])
nil
([nil nil ((#("* Creating the Training Dataset
First, let's download all of Shakespeare's work, using Keras's handy
get_file() function and downloading the data from Andrej Karpathy's
Char-RNN project:
#+begin_src python :result outputs
shakespeare_url = \"https://homl.info/shakespeare\" # shortcut URL
filepath = keras.utils.get_file(\"shakespeare.txt\", shakespeare_url)
with open(filepath) as f:
    shakespeare_text = f.read()
#+end_src
Next, we must encode every character as an integer. 
But in this case, it will be simpler to use Keras's Tokenizer class.
First we need to fit a tokenizer to the text: 
it will find all the characters used in the text and map
each of them to a different character ID, from 1 to the number of distinct
characters:
#+begin_src python :result outputs
tokenizer = keras.preprocessing.text.Tokenizer(char_level=True)
tokenizer.fit_on_texts([shakespeare_text])
#+end_src
We set char_level=True to get character-level encoding rather than the
default word-level encoding. 
Note that this tokenizer converts the text to
lowercase by default. 

Now the tokenizer can encode a sentence to a
list of character IDs and back, and it tells us how many distinct characters
there are and the total number of characters in the text:

#+begin_src python :result outputs
tokenizer.texts_to_sequences([\"First\"]) #[[20, 6, 9, 8, 3]]
tokenizer.sequences_to_texts([[20, 6, 9, 8, 3]]) # ['f i r s t']
max_id = len(tokenizer.word_index) # number of distinct characters
dataset_size = tokenizer.document_count # total number of characters
#+end_src
Let's encode the full text so each character is represented by its ID 
and subtract 1 to get IDs from 0 to 38, rather than from 1 to 39:
#+begin_src python :result outputs
[encoded] = np.array(tokenizer.texts_to_sequences([shakespeare_text])) - 1
#+end_src
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 31 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 31 32 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 32 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 101 104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 104 105 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 105 109 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 109 169 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 169 187 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 187 221 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 221 222 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 222 233 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 233 234 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 234 237 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 237 240 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 240 241 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 241 269 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://homl.info/shakespeare" htmlize-link (:uri "https://homl.info/shakespeare") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 269 270 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://homl.info/shakespeare" htmlize-link (:uri "https://homl.info/shakespeare") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 270 271 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 271 272 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 272 274 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 274 287 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 287 295 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 295 313 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 313 314 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 314 318 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 318 319 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 319 336 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 336 349 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 349 350 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 350 353 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 353 354 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 354 355 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 355 359 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 359 360 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 360 364 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 364 365 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 365 373 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 373 374 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 374 375 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 375 377 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 377 381 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 381 385 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 385 396 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 396 397 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 397 401 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 401 410 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 410 411 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 411 412 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 412 413 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 413 422 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 422 423 (fontified t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 423 476 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 476 499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 499 545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 545 592 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 592 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 649 724 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 724 736 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 736 770 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 770 771 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 771 780 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 780 817 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 817 818 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 818 822 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 822 823 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 823 828 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 828 829 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 829 833 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) src-block t) 833 834 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 834 835 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 835 848 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 848 849 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 849 851 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 851 852 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 852 857 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 857 858 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 858 859 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 859 870 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 870 871 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 871 875 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 875 876 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 876 877 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 877 878 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 878 887 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 887 888 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line) 888 899 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 899 900 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 900 905 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 905 959 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 959 989 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 989 1035 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1035 1045 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1045 1058 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1058 1059 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1059 1104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1104 1181 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1181 1239 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1239 1240 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1240 1274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1274 1275 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1275 1290 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1290 1291 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1291 1293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1293 1294 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1294 1303 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1303 1304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1304 1305 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 1305 1312 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t) 1312 1313 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 1313 1314 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1314 1315 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1315 1316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) src-block t) 1316 1317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 1317 1318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 1318 1331 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 1331 1332 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 1332 1333 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 1333 1334 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 1334 1335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t) 1335 1354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1354 1355 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1355 1357 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1357 1358 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1358 1363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1363 1364 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1364 1365 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (rainbow-delimiters-depth-2-face org-block) src-block t) 1365 1366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (rainbow-delimiters-depth-3-face org-block) src-block t) 1366 1379 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (org-block) src-block t) 1379 1380 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (org-block) src-block t) 1380 1381 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (rainbow-delimiters-depth-3-face org-block) src-block t) 1381 1382 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: 20, 6, 9, 8, 3" htmlize-link (:uri "20, 6, 9, 8, 3") font-lock-multiline t font-lock-fontified t face (rainbow-delimiters-depth-2-face org-block) src-block t) 1382 1383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1383 1384 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1384 1386 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) src-block t) 1386 1400 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t) 1400 1403 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1403 1404 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1404 1406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1406 1409 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1409 1412 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) src-block t) 1412 1413 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1413 1427 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1427 1428 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1428 1433 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1433 1434 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1434 1435 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1435 1437 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) src-block t) 1437 1467 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t) 1467 1474 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1474 1475 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1475 1479 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1479 1500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1500 1501 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1501 1506 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1506 1507 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1507 1509 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) src-block t) 1509 1536 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) src-block t) 1536 1545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 1545 1546 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line) 1546 1558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1558 1617 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1617 1683 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1683 1718 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1718 1793 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1793 1802 (fontified t font-lock-fontified t face org-meta-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1802 1803 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2) (undo-tree-id277 . -1802) (undo-tree-id278 . 1772) (undo-tree-id279 . -1802) (undo-tree-id280 . -1803)) nil (25767 2777 473829 51000) 0 nil])
([nil nil ((#("* How to Split a Sequential Dataset
It is very important to avoid any overlap between the training set, the
validation set, and the test set. 
It is often safer to split across time—but this implicitly assumes that
the patterns the RNN can learn in the past will still
exist in the future. In other words, we assume that the time series is
stationary. 
For many time series this assumption is reasonable, but for many others it is
not. To make
sure the time series is indeed sufficiently stationary, you can plot the
model's errors on the validation set across time: if the model performs
much better on the first part of the validation set than on the last part, then
the time series may not be stationary enough, and you might be better off
training the model on a shorter time span.

Let's take the first 90% of the text for the
training set, and
create a tf.data.Dataset that will return each character one by one from
this set:
#+begin_src python :result outputs
train_size = dataset_size * 90 // 100
dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size])
#+end_src
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 35 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 35 36 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 36 108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 108 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 143 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 215 269 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 269 340 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 340 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 353 431 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 431 444 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 444 499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 499 517 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 517 589 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 589 669 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 669 743 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 743 786 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 786 787 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 787 832 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 832 850 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 850 923 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 923 933 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 933 967 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 967 968 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 968 973 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 973 974 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 974 978 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 978 988 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 988 989 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 989 993 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 993 1006 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1006 1013 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 1013 1017 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1017 1036 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1036 1037 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1037 1043 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1043 1044 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1044 1050 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1050 1051 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1051 1058 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1058 1059 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 1059 1065 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1065 1066 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1066 1070 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1070 1071 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 1071 1072 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t) 1072 1073 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1073 1082 (fontified t font-lock-fontified t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t) 1082 1083 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 2) (undo-tree-id268 . -1082) (undo-tree-id269 . 1048) (undo-tree-id270 . -1082) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -1083)) nil (25767 2777 473821 737000) 0 nil])
([nil nil ((#("* Chopping the Sequential Dataset into Multiple Windows
we will use
the dataset's window() method to convert this long sequence of characters
into many smaller windows of text. Every instance in the dataset will be a
fairly short substring of the whole text, and the RNN will be unrolled only
over the length of these substrings. This is called 
*truncated backpropagation through time*. 

#+begin_src python :result outputs
n_steps = 100
window_length = n_steps + 1 # target = input shifted 1 character ahead
dataset = dataset.window(window_length, shift=1, drop_remainder=True)
#+end_src

By default, the window() method creates nonoverlapping windows, but to
get the largest possible training set we use shift=1 so that the first
window contains characters 0 to 100, the second contains characters 1 to
101, and so on. To ensure that all windows are exactly 101 characters long
we set drop_remainder=True.

The window() method creates a dataset that contains windows, each of
which is also represented as a dataset. It's a nested dataset, analogous to a
list of lists.  We must call the flat_map()
method to convert a nested dataset into a flat dataset. 
The flat_map() method takes a function as an argument, which
allows you to transform each dataset in the nested dataset before
flattening. 
ds.batch(2) to flat_map(), then it will transform the nested dataset {{1,
2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of
tensors of size 2. With that in mind, we are ready to flatten our dataset:
dataset = dataset.flat_map(lambda window: window.batch(window_length))
Notice that we call batch(window_length) on each window: since all
windows have exactly that length, we will get a single tensor for each of
them. Now the dataset contains consecutive windows of 101 characters
each. Since Gradient Descent works best when the instances in the training
set are independent and identically distributed (see Chapter 4), we need to
shuffle these windows. Then we can batch the windows and separate the
inputs (the first 100 characters) from the target (the last character):
batch_size = 32
dataset = dataset.shuffle(10000).batch(batch_size)
dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))
Figure 16-1 summarizes the dataset preparation steps discussed so far
(showing windows of length 11 rather than 101, and a batch size of 3
instead of 32).Figure 16-1. Preparing a dataset of shuffled windows
As discussed in Chapter 13, categorical input features should generally be
encoded, usually as one-hot vectors or as embeddings. Here, we will
encode each character using a one-hot vector because there are fairly few
distinct characters (only 39):
dataset = dataset.map(
lambda X_batch, Y_batch: (tf.one_hot(X_batch, depth=max_id),
Y_batch))
Finally, we just need to add prefetching:
dataset = dataset.prefetch(1)
That’s it! Preparing the dataset was the hardest part. Now let’s create the
model.
Building and Training the Char-RNN Model
To predict the next character based on the previous 100 characters, we can
use an RNN with 2 GRU layers of 128 units each and 20% dropout on both
the inputs (dropout) and the hidden states (recurrent_dropout). We can
tweak these hyperparameters later, if needed. The output layer is a time-
distributed Dense layer like we saw in Chapter 15. This time this layermust have 39 units (max_id) because there are 39 distinct characters in the
text, and we want to output a probability for each possible character (at
each time step). The output probabilities should sum up to 1 at each time
step, so we apply the softmax activation function to the outputs of the
Dense layer. We can then compile this model, using the
\"sparse_categorical_crossentropy\" loss and an Adam optimizer.
Finally, we are ready to train the model for several epochs (this may take
many hours, depending on your hardware):
model = keras.models.Sequential([
keras.layers.GRU(128, return_sequences=True, input_shape=[None,
max_id],
dropout=0.2, recurrent_dropout=0.2),
keras.layers.GRU(128, return_sequences=True,
dropout=0.2, recurrent_dropout=0.2),
keras.layers.TimeDistributed(keras.layers.Dense(max_id,
activation=\"softmax\"))
])
model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\")
history = model.fit(dataset, epochs=20)
Using the Char-RNN Model
Now we have a model that can predict the next character in text written by
Shakespeare. To feed it some text, we first need to preprocess it like we
did earlier, so let’s create a little function for this:
def preprocess(texts):
X = np.array(tokenizer.texts_to_sequences(texts)) - 1
return tf.one_hot(X, max_id)
Now let’s use the model to predict the next letter in some text:
>>> X_new = preprocess([\"How are yo\"])
>>> Y_pred = model.predict_classes(X_new)
>>> tokenizer.sequences_to_texts(Y_pred + 1)[0][-1] # 1st sentence, last
char
'u'Success! The model guessed right. Now let’s use this model to generate
new text.
Generating Fake Shakespearean Text
To generate new text using the Char-RNN model, we could feed it some
text, make the model predict the most likely next letter, add it at the end of
the text, then give the extended text to the model to guess the next letter,
and so on. But in practice this often leads to the same words being
repeated over and over again. Instead, we can pick the next character
randomly, with a probability equal to the estimated probability, using
TensorFlow’s tf.random.categorical() function. This will generate
more diverse and interesting text. The categorical() function samples
random class indices, given the class log probabilities (logits). To have
more control over the diversity of the generated text, we can divide the
logits by a number called the temperature, which we can tweak as we
wish: a temperature close to 0 will favor the high-probability characters,
while a very high temperature will give all characters an equal probability.
The following next_char() function uses this approach to pick the next
character to add to the input text:
def next_char(text, temperature=1):
X_new = preprocess([text])
y_proba = model.predict(X_new)[0, -1:, :]
rescaled_logits = tf.math.log(y_proba) / temperature
char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
return tokenizer.sequences_to_texts(char_id.numpy())[0]
Next, we can write a small function that will repeatedly call next_char()
to get the next character and append it to the given text:
def complete_text(text, n_chars=50, temperature=1):
for _ in range(n_chars):
text += next_char(text, temperature)
return textWe are now ready to generate some text! Let’s try with different
temperatures:
>>> print(complete_text(\"t\", temperature=0.2))
the belly the great and who shall be the belly the
>>> print(complete_text(\"w\", temperature=1))
thing? or why you gremio.
who make which the first
>>> print(complete_text(\"w\", temperature=2))
th no cce:
yeolg-hormer firi. a play asks.
fol rusb
Apparently our Shakespeare model works best at a temperature close to 1.
To generate more convincing text, you could try using more GRU layers and
more neurons per layer, train for longer, and add some regularization (for
example, you could set recurrent_dropout=0.3 in the GRU layers).
Moreover, the model is currently incapable of learning patterns longer
than n_steps, which is just 100 characters. You could try making this
window larger, but it will also make training harder, and even LSTM and
GRU cells cannot handle very long sequences. Alternatively, you could use
a stateful RNN.
Stateful RNN
Until now, we have used only stateless RNNs: at each training iteration the
model starts with a hidden state full of zeros, then it updates this state at
each time step, and after the last time step, it throws it away, as it is not
needed anymore. What if we told the RNN to preserve this final state after
processing one training batch and use it as the initial state for the next
training batch? This way the model can learn long-term patterns despite
only backpropagating through short sequences. This is called a stateful
RNN. Let’s see how to build one.
First, note that a stateful RNN only makes sense if each input sequence in
a batch starts exactly where the corresponding sequence in the previous
batch left off. So the first thing we need to do to build a stateful RNN is touse sequential and nonoverlapping input sequences (rather than the
shuffled and overlapping sequences we used to train stateless RNNs).
When creating the Dataset, we must therefore use shift=n_steps
(instead of shift=1) when calling the window() method. Moreover, we
must obviously not call the shuffle() method. Unfortunately, batching is
much harder when preparing a dataset for a stateful RNN than it is for a
stateless RNN. Indeed, if we were to call batch(32), then 32 consecutive
windows would be put in the same batch, and the following batch would
not continue each of these window where it left off. The first batch would
contain windows 1 to 32 and the second batch would contain windows 33
to 64, so if you consider, say, the first window of each batch (i.e., windows
1 and 33), you can see that they are not consecutive. The simplest solution
to this problem is to just use “batches” containing a single window:
dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size])
dataset = dataset.window(window_length, shift=n_steps,
drop_remainder=True)
dataset = dataset.flat_map(lambda window: window.batch(window_length))
dataset = dataset.batch(1)
dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))
dataset = dataset.map(
lambda X_batch, Y_batch: (tf.one_hot(X_batch, depth=max_id),
Y_batch))
dataset = dataset.prefetch(1)
Figure 16-2 summarizes the first steps.Figure 16-2. Preparing a dataset of consecutive sequence fragments for a stateful RNN
Batching is harder, but it is not impossible. For example, we could chop
Shakespeare’s text into 32 texts of equal length, create one dataset of
consecutive input sequences for each of them, and finally use
tf.train.Dataset.zip(datasets).map(lambda *windows:
tf.stack(windows)) to create proper consecutive batches, where the nth
input sequence in a batch starts off exactly where the nth input sequence
ended in the previous batch (see the notebook for the full code).
Now let’s create the stateful RNN. First, we need to set stateful=True
when creating every recurrent layer. Second, the stateful RNN needs to
know the batch size (since it will preserve a state for each input sequence
in the batch), so we must set the batch_input_shape argument in the first
layer. Note that we can leave the second dimension unspecified, since the
inputs could have any length:
model = keras.models.Sequential([
keras.layers.GRU(128, return_sequences=True, stateful=True,
dropout=0.2, recurrent_dropout=0.2,
batch_input_shape=[batch_size, None, max_id]),
keras.layers.GRU(128, return_sequences=True, stateful=True,
dropout=0.2, recurrent_dropout=0.2),
keras.layers.TimeDistributed(keras.layers.Dense(max_id,
activation=\"softmax\"))
])At the end of each epoch, we need to reset the states before we go back to
the beginning of the text. For this, we can use a small callback:
class ResetStatesCallback(keras.callbacks.Callback):
def on_epoch_begin(self, epoch, logs):
self.model.reset_states()
And now we can compile and fit the model (for more epochs, because each
epoch is much shorter than earlier, and there is only one instance per
batch):
model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\")
model.fit(dataset, epochs=50, callbacks=[ResetStatesCallback()])
TIP
After this model is trained, it will only be possible to use it to make predictions for
batches of the same size as were used during training. To avoid this restriction, create
an identical stateless model, and copy the stateful model’s weights to this model.
Now that we have built a character-level model, it’s time to look at word-
level models and tackle a common natural language processing task:
sentiment analysis. In the process we will learn how to handle sequences
of variable lengths using masking.

" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 55 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 55 56 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent))) 56 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 68 142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 142 217 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 217 293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 293 346 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 346 347 (fontified t face (bold) font-lock-multiline t org-emphasis t invisible org-link line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 347 385 (fontified t face (bold) font-lock-multiline t org-emphasis t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 385 386 (fontified t face (bold) font-lock-multiline t org-emphasis t invisible org-link line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 386 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 389 390 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 390 424 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 424 425 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 425 426 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 426 427 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 427 432 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 432 439 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 439 445 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 445 446 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 446 452 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 452 456 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 456 457 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 457 462 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 462 467 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 467 469 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 469 499 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 499 510 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 510 517 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 517 534 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 534 535 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 535 541 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 541 542 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 542 548 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 548 563 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 563 564 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 564 573 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 573 574 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 574 578 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 578 579 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 579 580 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 580 589 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 589 590 (fontified t face org-block-end-line line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 590 591 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 591 662 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 662 733 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 733 806 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 806 881 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 881 892 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 892 893 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 893 902 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 902 909 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 909 910 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 910 979 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 979 1057 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1057 1080 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1080 1094 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1094 1095 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1095 1098 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1098 1101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1101 1158 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1158 1166 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1166 1167 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1167 1170 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1170 1219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1219 1285 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1285 1298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1298 1317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1317 1318 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1318 1321 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1321 1372 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1372 1456 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1456 1531 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1531 1553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1553 1554 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1554 1557 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1557 1592 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1592 1593 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1593 1599 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1599 1601 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1601 1602 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1602 1634 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1634 1635 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1635 1641 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1641 1669 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1669 1743 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1743 1812 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1812 1887 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1887 1963 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1963 2033 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2033 2102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2102 2105 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2105 2110 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2110 2111 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2111 2115 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2115 2121 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2121 2165 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2165 2166 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2166 2170 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2170 2172 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2172 2245 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2245 2315 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2315 2317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2317 2384 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2384 2452 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2452 2527 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2527 2595 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2595 2669 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2669 2700 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2700 2723 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2723 2731 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2731 2732 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2732 2737 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2737 2740 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2740 2741 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2741 2746 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2746 2755 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2755 2756 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2756 2759 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2759 2761 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2761 2762 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2762 2767 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2767 2778 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2778 2779 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2779 2781 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2781 2784 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2784 2785 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2785 2786 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2786 2791 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2791 2794 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2794 2817 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2817 2836 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2836 2866 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2866 2942 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2942 2949 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2949 2990 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2990 3065 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3065 3136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3136 3189 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3189 3190 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3190 3197 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3197 3207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3207 3281 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3281 3336 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3336 3375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3375 3376 (fontified t invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3376 3378 (fontified t display ((raise -0.3) (height 0.7)) line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3378 3428 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3428 3502 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3502 3576 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3576 3648 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3648 3703 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3703 3765 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3765 3840 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3840 3881 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3881 3915 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3915 3979 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3979 3988 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3988 4025 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4025 4070 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4070 4107 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4107 4163 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4163 4186 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4186 4189 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4189 4261 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4261 4301 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4301 4326 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4326 4401 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4401 4475 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4475 4532 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4532 4555 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4555 4609 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4609 4638 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4638 4703 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4703 4742 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4742 4784 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4784 4857 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4857 4862 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4862 4936 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4936 4946 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4946 4981 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4981 5050 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5050 5129 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5129 5206 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5206 5274 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5274 5344 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5344 5415 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5415 5481 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5481 5551 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5551 5625 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5625 5698 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5698 5766 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5766 5841 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5841 5918 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5918 5989 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5989 6025 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6025 6061 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6061 6088 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6088 6130 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6130 6183 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6183 6251 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6251 6307 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6307 6381 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6381 6440 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6440 6492 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6492 6517 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6517 6554 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6554 6630 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6630 6644 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6644 6691 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6691 6742 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6742 6787 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6787 6813 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6813 6838 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6838 6883 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6883 6894 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6894 6926 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6926 6935 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 6935 7008 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7008 7082 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7082 7157 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7157 7222 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7222 7293 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7293 7363 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7363 7435 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7435 7509 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7509 7525 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7525 7538 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7538 7614 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7614 7692 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7692 7770 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7770 7845 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7845 7920 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7920 7992 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7992 8064 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8064 8097 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8097 8172 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8172 8244 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8244 8389 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8389 8458 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8458 8521 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8521 8589 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8589 8662 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8662 8735 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8735 8808 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8808 8878 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8878 8953 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8953 9023 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9023 9101 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9101 9177 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9177 9246 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9246 9313 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9313 9368 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9368 9389 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9389 9460 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9460 9487 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9487 9560 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9560 9583 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9583 9644 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9644 9654 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9654 9684 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9684 9809 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9809 9882 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9882 9954 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9954 10016 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10016 10068 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10068 10139 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10139 10213 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10213 10279 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10279 10350 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10350 10421 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10421 10497 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10497 10571 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10571 10645 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10645 10675 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10675 10709 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10709 10769 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10769 10805 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10805 10852 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10852 10912 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10912 10949 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10949 11005 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11005 11028 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11028 11105 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11105 11171 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11171 11224 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11224 11263 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11263 11289 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11289 11361 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11361 11432 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11432 11440 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11440 11512 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11512 11577 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11577 11581 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11581 11669 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11669 11758 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11758 11841 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11841 11916 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11916 11983 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11983 12056 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 12056 12091 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 12091 12092 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2) (undo-tree-id0 . -12091) (undo-tree-id1 . -12092) (undo-tree-id2 . -2317) (undo-tree-id3 . -2317) (undo-tree-id4 . -2317) (undo-tree-id5 . -2317) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . 12037) (undo-tree-id222 . -12091) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -2) (undo-tree-id226 . -2) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -12092) (undo-tree-id239 . -12092) (undo-tree-id240 . -12092) (undo-tree-id241 . -12092) (undo-tree-id242 . -12092) (undo-tree-id243 . -12092) (undo-tree-id244 . -12092) (undo-tree-id245 . -12092) (undo-tree-id246 . -12092) (undo-tree-id247 . -12092) (undo-tree-id248 . -12092) (undo-tree-id249 . -12092) (undo-tree-id250 . -12092) (undo-tree-id251 . -12092) (undo-tree-id252 . -12092) (undo-tree-id253 . -12092) (undo-tree-id254 . -12092) (undo-tree-id255 . -12092) (undo-tree-id256 . -12092) (undo-tree-id257 . -12092) (undo-tree-id258 . -12092) (undo-tree-id259 . -12092) (undo-tree-id260 . -12092) (undo-tree-id261 . -12092) (undo-tree-id262 . -12092) (undo-tree-id263 . -12092) (undo-tree-id264 . -2) (undo-tree-id265 . -12092) (undo-tree-id266 . -12092) (undo-tree-id267 . -12092)) nil (25767 2777 473792 754000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1127 . 1128) (nil fontified nil 1101 . 1128) (nil fontified nil 1026 . 1101) (nil fontified nil 952 . 1026) (nil fontified nil 878 . 952) (nil fontified nil 803 . 878) (nil fontified nil 737 . 803) (nil fontified nil 659 . 737) (nil fontified nil 584 . 659) (nil fontified nil 519 . 584) (nil fontified nil 447 . 519) (nil fontified nil 370 . 447) (nil fontified nil 294 . 370) (nil fontified nil 219 . 294) (nil fontified nil 149 . 219) (nil fontified nil 75 . 149) (nil fontified nil 2 . 75) (2 . 1128) (t 25767 2777 482515 655000)) nil (25767 3369 7445 621000) 0 nil])
([nil nil ((1128 . 1129)) nil (25767 3369 7438 240000) 0 nil])
([nil nil ((5 . 8) (#("p" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -5) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("r" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -6) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("o" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -7) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) 8 (3 . 8) (1 . 3) (t 25767 3369 14519 11000)) nil (25767 3387 704279 226000) 0 nil])
([nil nil ((#("When Alan Turing imagined his famous Turing test1 in 1950, his objective
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9) (undo-tree-id837 . -72) (undo-tree-id838 . -3) (undo-tree-id839 . -8) (undo-tree-id840 . -15) (undo-tree-id841 . -24) (undo-tree-id842 . -28) (undo-tree-id843 . -35) (undo-tree-id844 . -42) (undo-tree-id845 . -48) (undo-tree-id846 . -51) (undo-tree-id847 . -51) (undo-tree-id848 . -51) (undo-tree-id849 . -51) (undo-tree-id850 . -51) (undo-tree-id851 . -51) (undo-tree-id852 . -73) (t 25767 3387 717917 566000)) nil (25767 3399 220498 177000) 0 nil])
([nil nil ((#("Intro" 0 5 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 3) (undo-tree-id799 . -4) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -5) 9) nil (25767 3399 220487 846000) 0 nil])
([nil nil ((#("* 
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . 1) (undo-tree-id673 . -2) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -2) (undo-tree-id688 . -2) (undo-tree-id689 . -2) (undo-tree-id690 . -2) (undo-tree-id691 . -2) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -2) (undo-tree-id715 . -2) (undo-tree-id716 . -2) (undo-tree-id717 . 1) (undo-tree-id718 . -3) (undo-tree-id719 . -1) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -3) (undo-tree-id723 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -3) (undo-tree-id726 . -3) (undo-tree-id727 . -3) (undo-tree-id728 . -3) (undo-tree-id729 . -3) (undo-tree-id730 . -3) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) (undo-tree-id781 . -3) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -3) 2) nil (25767 3399 220462 390000) 0 nil])
([nil nil ((#("was to evaluate a machine’s ability to match human intelligence. He could
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 74 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id653 . -73) (undo-tree-id654 . 74) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -74) 2) nil (25767 3399 220378 473000) 0 nil])
([nil nil ((#("have tested for many things, such as the ability to recognize cats in
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 70 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id633 . -69) (undo-tree-id634 . 70) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -70) 2) nil (25767 3399 220365 392000) 0 nil])
([nil nil ((#("pictures, play chess, compose music, or escape a maze, but, interestingly,
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 75 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id613 . -74) (undo-tree-id614 . 75) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -75) 2) nil (25767 3399 220352 303000) 0 nil])
([nil nil ((#("he chose a linguistic task. More specifically, he devised a chatbot capable
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 76 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id593 . -75) (undo-tree-id594 . 76) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -76) 2) nil (25767 3399 220260 793000) 0 nil])
([nil nil ((#("of fooling its interlocutor into thinking it was human.2 This test does have
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 77 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id573 . -76) (undo-tree-id574 . 77) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -77) 2) nil (25767 3399 220248 17000) 0 nil])
([nil nil ((#("its weaknesses: a set of hardcoded rules can fool unsuspecting or naive
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 55 (line-prefix "" wrap-prefix "" fontified t) 55 72 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id553 . -71) (undo-tree-id554 . 72) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -72) 2) nil (25767 3399 220139 394000) 0 nil])
([nil nil ((#("humans (e.g., the machine could give vague predefined answers in
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 65 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id533 . -64) (undo-tree-id534 . 65) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -65) 2) nil (25767 3399 220127 820000) 0 nil])
([nil nil ((#("response to some keywords; it could pretend that it is joking or drunk, to
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 75 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id513 . -74) (undo-tree-id514 . 75) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -75) 2) nil (25767 3399 220115 480000) 0 nil])
([nil nil ((#("get a pass on its weirdest answers; or it could escape difficult questions by
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 78 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id493 . -77) (undo-tree-id494 . 78) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -78) 2) nil (25767 3399 220101 928000) 0 nil])
([nil nil ((#("answering them with its own questions), and many aspects of human
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 66 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id473 . -65) (undo-tree-id474 . 66) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -66) 2) nil (25767 3399 220089 886000) 0 nil])
([nil nil ((#("intelligence are utterly ignored (e.g., the ability to interpret nonverbal
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 75 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id453 . -74) (undo-tree-id454 . 75) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -75) 2) nil (25767 3399 220077 225000) 0 nil])
([nil nil ((#("communication such as facial expressions, or to learn a manual task). But
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 74 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id433 . -73) (undo-tree-id434 . 74) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -74) 2) nil (25767 3399 220064 351000) 0 nil])
([nil nil ((#("the test does highlight the fact that mastering language is arguably Homo
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 67 (line-prefix "" wrap-prefix "" fontified t) 67 74 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id413 . -73) (undo-tree-id414 . 74) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -74) 2) nil (25767 3399 220050 585000) 0 nil])
([nil nil ((#("sapiens’s greatest cognitive ability. Can we build a machine that can read
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 75 (line-prefix "" wrap-prefix "" fontified t)) . 1) (undo-tree-id393 . -74) (undo-tree-id394 . 75) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -75) 2) nil (25767 3399 220036 856000) 0 nil])
([nil nil ((#("and write natural language?
" 0 1 (line-prefix "" wrap-prefix "" fontified t) 1 26 (line-prefix "" wrap-prefix "" fontified t) 26 27 (line-prefix "" wrap-prefix "" fontified t rear-nonsticky t) 27 28 (fontified t line-prefix "" wrap-prefix "")) . 1) (undo-tree-id373 . -27) (undo-tree-id374 . 28) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -28) 2) nil (25767 3399 220020 993000) 0 nil])
([nil nil ((nil rear-nonsticky nil 432 . 433) (nil fontified nil 407 . 433) (nil fontified nil 334 . 407) (nil fontified nil 261 . 334) (nil fontified nil 189 . 261) (nil fontified nil 122 . 189) (nil fontified nil 53 . 122) (nil fontified nil 39 . 53) (nil fontified nil 1 . 39) (1 . 433) (t 25767 3399 225529 553000)) nil (25767 3411 636951 520000) 0 nil])
([nil nil ((1 . 3)) nil (25767 3411 636949 123000) 0 nil])
([nil nil ((435 . 436)) nil (25767 3411 636944 519000) 0 nil])
([nil nil ((40 . 41) (#("
" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t)) . -40) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) 3 (t 25767 3411 649096 915000)) nil (25767 3422 596796 552000) 0 nil])
([nil nil ((1 . 2) 53) nil (25767 3444 198228 29000) 0 nil])
([nil nil ((56 . 58) (56 . 57) (t 25767 3422 616704 153000)) nil (25767 3505 604220 676000) 0 nil] [nil nil ((#("In a famous 2015 blog post titled “The Unreasonable Effectiveness of
" 0 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 56) (undo-tree-id865 . -68) (undo-tree-id866 . -3) (undo-tree-id867 . -5) (undo-tree-id868 . -12) (undo-tree-id869 . -5) (undo-tree-id870 . -3) (undo-tree-id871 . -69) (t 25767 3422 616704 153000)) ((56 . 125)) (25767 3444 197896 969000) 0 nil])
([nil nil ((57 . 58) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 57) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -58) (undo-tree-id1520 . 1) (undo-tree-id1521 . -1) 57) nil (25767 3505 604219 86000) 0 nil])
nil
([nil nil ((#("In a famous " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 58) (undo-tree-id1492 . -11) (undo-tree-id1493 . -11) (undo-tree-id1494 . -11) (undo-tree-id1495 . 12) (undo-tree-id1496 . -11) (undo-tree-id1497 . -3) (undo-tree-id1498 . -5) (undo-tree-id1499 . -12) (undo-tree-id1500 . -5) (undo-tree-id1501 . -3) (undo-tree-id1502 . -12) (undo-tree-id1503 . -11) (undo-tree-id1504 . -1) (undo-tree-id1505 . -3) (undo-tree-id1506 . -10) (undo-tree-id1507 . -11) (undo-tree-id1508 . -11) (undo-tree-id1509 . -12) (undo-tree-id1510 . -12) (undo-tree-id1511 . -12) 69) nil (25767 3505 604197 298000) 0 nil])
([nil nil ((62 . 63)) nil (25767 3505 604183 790000) 0 nil])
([nil nil ((#("blog post titled " 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 64) (undo-tree-id1480 . -16) (undo-tree-id1481 . -16) (undo-tree-id1482 . -16) (undo-tree-id1483 . -16) (undo-tree-id1484 . -17) (undo-tree-id1485 . -16) (undo-tree-id1486 . -3) (undo-tree-id1487 . -8) (undo-tree-id1488 . -15) (undo-tree-id1489 . -16) (undo-tree-id1490 . -16) (undo-tree-id1491 . -17) 80) nil (25767 3505 604182 360000) 0 nil])
([nil nil ((64 . 65) (#("“" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 64) (undo-tree-id1478 . 1) (undo-tree-id1479 . -1)) nil (25767 3505 604133 971000) 0 nil])
([nil nil ((98 . 99) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -98) (undo-tree-id1477 . -1) 64) nil (25767 3505 604131 408000) 0 nil])
([nil nil ((125 . 126) (#("”" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 125) (undo-tree-id1476 . -1)) nil (25767 3505 604129 720000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 124) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1)) nil (25767 3505 604126 834000) 0 nil])
([nil nil ((56 . 166) (#("- showed how to train an
- 2015, \"The Unreasonable Effectiveness of Recurrent Neural Networks\" Andrej Karpathy" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 24 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 24 25 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 25 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 26 27 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 33 34 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 34 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 67 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 68 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 69 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 93 94 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 94 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 56) (undo-tree-id964 . -93) (undo-tree-id965 . -93) (undo-tree-id966 . -33) (undo-tree-id967 . -33) (undo-tree-id968 . 76) (undo-tree-id969 . -33) (undo-tree-id970 . -33) (undo-tree-id971 . 78) (undo-tree-id972 . -110) (undo-tree-id973 . -27) (undo-tree-id974 . -27) (undo-tree-id975 . -27) (undo-tree-id976 . -27) (undo-tree-id977 . -27) (undo-tree-id978 . -26) (undo-tree-id979 . -26) (undo-tree-id980 . -26) (undo-tree-id981 . -26) (undo-tree-id982 . -26) (undo-tree-id983 . -26) (undo-tree-id984 . -26) (undo-tree-id985 . -26) (undo-tree-id986 . -26) (undo-tree-id987 . -26) (undo-tree-id988 . -26) (undo-tree-id989 . -26) (undo-tree-id990 . -26) (undo-tree-id991 . -26) (undo-tree-id992 . -26) (undo-tree-id993 . -26) (undo-tree-id994 . -26) (undo-tree-id995 . -26) (undo-tree-id996 . -26) (undo-tree-id997 . -26) (undo-tree-id998 . -26) (undo-tree-id999 . -26) (undo-tree-id1000 . -26) (undo-tree-id1001 . -26) (undo-tree-id1002 . -26) (undo-tree-id1003 . -26) (undo-tree-id1004 . -26) (undo-tree-id1005 . -26) (undo-tree-id1006 . -26) (undo-tree-id1007 . -26) (undo-tree-id1008 . -26) (undo-tree-id1009 . -26) (undo-tree-id1010 . -26) (undo-tree-id1011 . -26) (undo-tree-id1012 . -27) (undo-tree-id1013 . -27) (undo-tree-id1014 . -27) (undo-tree-id1015 . -27) (undo-tree-id1016 . -27) (undo-tree-id1017 . -27) (undo-tree-id1018 . -27) (undo-tree-id1019 . -27) (undo-tree-id1020 . -27) (undo-tree-id1021 . -27) (undo-tree-id1022 . -27) (undo-tree-id1023 . -27) (undo-tree-id1024 . -27) (undo-tree-id1025 . -27) (undo-tree-id1026 . -27) (undo-tree-id1027 . -27) (undo-tree-id1028 . -27) (undo-tree-id1029 . -27) (undo-tree-id1030 . -27) (undo-tree-id1031 . -27) (undo-tree-id1032 . -27) (undo-tree-id1033 . -26) (undo-tree-id1034 . -26) (undo-tree-id1035 . -26) (undo-tree-id1036 . -26) (undo-tree-id1037 . -26) (undo-tree-id1038 . -26) (undo-tree-id1039 . -26) (undo-tree-id1040 . -26) (undo-tree-id1041 . -26) (undo-tree-id1042 . -26) (undo-tree-id1043 . -26) (undo-tree-id1044 . -26) (undo-tree-id1045 . -26) (undo-tree-id1046 . -26) (undo-tree-id1047 . -26) (undo-tree-id1048 . -27) (undo-tree-id1049 . -30) (undo-tree-id1050 . -31) (undo-tree-id1051 . -31) (undo-tree-id1052 . -31) (undo-tree-id1053 . -31) (undo-tree-id1054 . -31) (undo-tree-id1055 . -31) (undo-tree-id1056 . -31) (undo-tree-id1057 . -31) (undo-tree-id1058 . -32) (undo-tree-id1059 . -32) (undo-tree-id1060 . -32) (undo-tree-id1061 . -32) (undo-tree-id1062 . -32) (undo-tree-id1063 . -32) (undo-tree-id1064 . -31) (undo-tree-id1065 . -31) (undo-tree-id1066 . -31) (undo-tree-id1067 . -31) (undo-tree-id1068 . -31) (undo-tree-id1069 . -31) (undo-tree-id1070 . -31) (undo-tree-id1071 . -31) (undo-tree-id1072 . -31) (undo-tree-id1073 . -31) (undo-tree-id1074 . -31) (undo-tree-id1075 . -31) (undo-tree-id1076 . -31) (undo-tree-id1077 . -31) (undo-tree-id1078 . -31) (undo-tree-id1079 . -33) (undo-tree-id1080 . -33) (undo-tree-id1081 . -33) (undo-tree-id1082 . -33) (undo-tree-id1083 . -33) (undo-tree-id1084 . -33) (undo-tree-id1085 . -33) (undo-tree-id1086 . -33) (undo-tree-id1087 . -33) (undo-tree-id1088 . -33) (undo-tree-id1089 . -33) (undo-tree-id1090 . -33) (undo-tree-id1091 . -33) (undo-tree-id1092 . -33) (undo-tree-id1093 . -33) (undo-tree-id1094 . -33) (undo-tree-id1095 . -33) (undo-tree-id1096 . -33) (undo-tree-id1097 . -33) (undo-tree-id1098 . -33) (undo-tree-id1099 . -33) (undo-tree-id1100 . -33) (undo-tree-id1101 . -33) (undo-tree-id1102 . -33) (undo-tree-id1103 . -33) (undo-tree-id1104 . -33) (undo-tree-id1105 . -33) (undo-tree-id1106 . -67) (undo-tree-id1107 . -67) (undo-tree-id1108 . -67) (undo-tree-id1109 . -67) (undo-tree-id1110 . -67) (undo-tree-id1111 . -67) (undo-tree-id1112 . -67) (undo-tree-id1113 . -67) (undo-tree-id1114 . -67) (undo-tree-id1115 . -67) (undo-tree-id1116 . -67) (undo-tree-id1117 . -67) (undo-tree-id1118 . -67) (undo-tree-id1119 . -67) (undo-tree-id1120 . -67) (undo-tree-id1121 . -67) (undo-tree-id1122 . -76) (undo-tree-id1123 . -76) (undo-tree-id1124 . -76) (undo-tree-id1125 . -76) (undo-tree-id1126 . -76) (undo-tree-id1127 . -76) (undo-tree-id1128 . -76) (undo-tree-id1129 . -76) (undo-tree-id1130 . -76) (undo-tree-id1131 . -76) (undo-tree-id1132 . -76) (undo-tree-id1133 . -83) (undo-tree-id1134 . -83) (undo-tree-id1135 . -83) (undo-tree-id1136 . -83) (undo-tree-id1137 . -83) (undo-tree-id1138 . -83) (undo-tree-id1139 . -83) (undo-tree-id1140 . -83) (undo-tree-id1141 . -83) (undo-tree-id1142 . -83) (undo-tree-id1143 . -83) (undo-tree-id1144 . -92) (undo-tree-id1145 . -92) (undo-tree-id1146 . -92) (undo-tree-id1147 . -92) (undo-tree-id1148 . -92) (undo-tree-id1149 . -92) (undo-tree-id1150 . -92) (undo-tree-id1151 . -92) (undo-tree-id1152 . -92) (undo-tree-id1153 . -92) (undo-tree-id1154 . -92) (undo-tree-id1155 . -93) (undo-tree-id1156 . -93) (undo-tree-id1157 . -93) (undo-tree-id1158 . -93) (undo-tree-id1159 . -93) (undo-tree-id1160 . -93) (undo-tree-id1161 . -93) (undo-tree-id1162 . -93) (undo-tree-id1163 . -93) (undo-tree-id1164 . -93) (undo-tree-id1165 . -93) (undo-tree-id1166 . -93) (undo-tree-id1167 . -93) (undo-tree-id1168 . -93) (undo-tree-id1169 . -93) (undo-tree-id1170 . -93) (undo-tree-id1171 . -93) (undo-tree-id1172 . -93) (undo-tree-id1173 . -93) (undo-tree-id1174 . -93) (undo-tree-id1175 . -93) (undo-tree-id1176 . -93) (undo-tree-id1177 . -93) (undo-tree-id1178 . -93) (undo-tree-id1179 . -93) (undo-tree-id1180 . -93) (undo-tree-id1181 . -93) (undo-tree-id1182 . -93) (undo-tree-id1183 . -93) (undo-tree-id1184 . -93) (undo-tree-id1185 . -93) (undo-tree-id1186 . -93) (undo-tree-id1187 . -93) (undo-tree-id1188 . -93) (undo-tree-id1189 . -93) (undo-tree-id1190 . -93) (undo-tree-id1191 . -93) (undo-tree-id1192 . -93) (undo-tree-id1193 . -93) (undo-tree-id1194 . -93) (undo-tree-id1195 . -93) (undo-tree-id1196 . -93) (undo-tree-id1197 . -93) (undo-tree-id1198 . -93) (undo-tree-id1199 . -93) (undo-tree-id1200 . -93) (undo-tree-id1201 . -93) (undo-tree-id1202 . -93) (undo-tree-id1203 . -93) (undo-tree-id1204 . -93) (undo-tree-id1205 . -93) (undo-tree-id1206 . -93) (undo-tree-id1207 . -93) (undo-tree-id1208 . -93) (undo-tree-id1209 . -93) (undo-tree-id1210 . -93) (undo-tree-id1211 . -93) (undo-tree-id1212 . -93) (undo-tree-id1213 . -93) (undo-tree-id1214 . -93) (undo-tree-id1215 . -93) (undo-tree-id1216 . -93) (undo-tree-id1217 . -93) (undo-tree-id1218 . -93) (undo-tree-id1219 . -93) (undo-tree-id1220 . -93) (undo-tree-id1221 . -93) (undo-tree-id1222 . -93) (undo-tree-id1223 . -93) (undo-tree-id1224 . -93) (undo-tree-id1225 . -93) (undo-tree-id1226 . -93) (undo-tree-id1227 . -93) (undo-tree-id1228 . -93) (undo-tree-id1229 . -93) (undo-tree-id1230 . -110) (undo-tree-id1231 . -110) (undo-tree-id1232 . -110) (undo-tree-id1233 . -110) (undo-tree-id1234 . -110) (undo-tree-id1235 . -110) (undo-tree-id1236 . -110) (undo-tree-id1237 . -110) (undo-tree-id1238 . -110) (undo-tree-id1239 . -110) (undo-tree-id1240 . -110) (undo-tree-id1241 . -110) (undo-tree-id1242 . -110) (undo-tree-id1243 . -110) (undo-tree-id1244 . -110) (undo-tree-id1245 . -110) (undo-tree-id1246 . -110) (undo-tree-id1247 . -110) (undo-tree-id1248 . -110) (undo-tree-id1249 . -110) (undo-tree-id1250 . -110) (undo-tree-id1251 . -110) (undo-tree-id1252 . -110) (undo-tree-id1253 . -110) (undo-tree-id1254 . -110) (undo-tree-id1255 . -110) (undo-tree-id1256 . -110) (undo-tree-id1257 . -110) (undo-tree-id1258 . -110) (undo-tree-id1259 . -110) (undo-tree-id1260 . -110) (undo-tree-id1261 . -110) (undo-tree-id1262 . -110) (undo-tree-id1263 . -110) (undo-tree-id1264 . -110) (undo-tree-id1265 . -110) (undo-tree-id1266 . -110) (undo-tree-id1267 . -110) (undo-tree-id1268 . -110) (undo-tree-id1269 . -110) (undo-tree-id1270 . -110) (undo-tree-id1271 . -110) (undo-tree-id1272 . -110) (undo-tree-id1273 . -110) (undo-tree-id1274 . -110) (undo-tree-id1275 . -110) (undo-tree-id1276 . -110) (undo-tree-id1277 . -110) (undo-tree-id1278 . -110) (undo-tree-id1279 . -110) (undo-tree-id1280 . -110) (undo-tree-id1281 . -110) (undo-tree-id1282 . -110) (undo-tree-id1283 . -110) (undo-tree-id1284 . -110) (undo-tree-id1285 . -110) (undo-tree-id1286 . -110) (undo-tree-id1287 . -110) (undo-tree-id1288 . -110) (undo-tree-id1289 . -110) (undo-tree-id1290 . -110) (undo-tree-id1291 . -110) (undo-tree-id1292 . -110) (undo-tree-id1293 . -110) (undo-tree-id1294 . -110) (undo-tree-id1295 . -110) (undo-tree-id1296 . -110) (undo-tree-id1297 . -110) (undo-tree-id1298 . -110) (undo-tree-id1299 . -110) (undo-tree-id1300 . -110) (undo-tree-id1301 . -110) (undo-tree-id1302 . -110) (undo-tree-id1303 . -110) (undo-tree-id1304 . -110) (undo-tree-id1305 . -110) (undo-tree-id1306 . -110) (undo-tree-id1307 . -110) (undo-tree-id1308 . -110) (undo-tree-id1309 . -110) (undo-tree-id1310 . -110) (undo-tree-id1311 . -110) (undo-tree-id1312 . -110) (undo-tree-id1313 . -110) (undo-tree-id1314 . -110) (undo-tree-id1315 . -110) (undo-tree-id1316 . -110) (undo-tree-id1317 . -110) (undo-tree-id1318 . -110) (undo-tree-id1319 . -110) (undo-tree-id1320 . -110) (undo-tree-id1321 . -110) (undo-tree-id1322 . -110) (undo-tree-id1323 . -110) (undo-tree-id1324 . -110) (undo-tree-id1325 . -110) (undo-tree-id1326 . -110) (undo-tree-id1327 . -110) (undo-tree-id1328 . -110) (undo-tree-id1329 . -110) (undo-tree-id1330 . -25) (56 . 81) (#(" showed how to train an" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 141) (undo-tree-id1331 . -1) (undo-tree-id1332 . -22) (undo-tree-id1333 . -22) (undo-tree-id1334 . -22) (undo-tree-id1335 . -22) (undo-tree-id1336 . -22) (undo-tree-id1337 . -22) (undo-tree-id1338 . -22) (undo-tree-id1339 . -22) (undo-tree-id1340 . -22) (undo-tree-id1341 . -22) (undo-tree-id1342 . -22) (undo-tree-id1343 . -22) (undo-tree-id1344 . -22) (undo-tree-id1345 . -22) (undo-tree-id1346 . -22) (undo-tree-id1347 . -22) (undo-tree-id1348 . -21) (undo-tree-id1349 . -21) (undo-tree-id1350 . -21) (undo-tree-id1351 . -21) (undo-tree-id1352 . -21) (undo-tree-id1353 . -21) (undo-tree-id1354 . -21) (undo-tree-id1355 . -21) (undo-tree-id1356 . -21) (undo-tree-id1357 . -21) (undo-tree-id1358 . -21) (undo-tree-id1359 . -15) (undo-tree-id1360 . -15) (undo-tree-id1361 . -15) (undo-tree-id1362 . -15) (undo-tree-id1363 . -15) (undo-tree-id1364 . -15) (undo-tree-id1365 . -15) (undo-tree-id1366 . -15) (undo-tree-id1367 . -15) (undo-tree-id1368 . -15) (undo-tree-id1369 . -15) (undo-tree-id1370 . -15) (undo-tree-id1371 . -15) (undo-tree-id1372 . -15) (undo-tree-id1373 . -15) (undo-tree-id1374 . -15) (undo-tree-id1375 . -12) (undo-tree-id1376 . -12) (undo-tree-id1377 . -12) (undo-tree-id1378 . -12) (undo-tree-id1379 . -12) (undo-tree-id1380 . -12) (undo-tree-id1381 . -12) (undo-tree-id1382 . -12) (undo-tree-id1383 . -12) (undo-tree-id1384 . -12) (undo-tree-id1385 . -12) (undo-tree-id1386 . -8) (undo-tree-id1387 . -8) (undo-tree-id1388 . -8) (undo-tree-id1389 . -8) (undo-tree-id1390 . -8) (undo-tree-id1391 . -8) (undo-tree-id1392 . -8) (undo-tree-id1393 . -8) (undo-tree-id1394 . -8) (undo-tree-id1395 . -8) (undo-tree-id1396 . -8) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) 142) nil (25767 3505 604046 464000) 0 nil])
([nil nil ((#("2015, " 0 6 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 58) (undo-tree-id903 . -5) (undo-tree-id904 . -5) (undo-tree-id905 . -5) (undo-tree-id906 . -5) (undo-tree-id907 . -6) (undo-tree-id908 . -5) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -5) (undo-tree-id947 . -5) (undo-tree-id948 . -5) (undo-tree-id949 . -5) (undo-tree-id950 . -5) (undo-tree-id951 . -5) (undo-tree-id952 . -5) (undo-tree-id953 . -5) (undo-tree-id954 . -5) (undo-tree-id955 . -5) (undo-tree-id956 . -5) (undo-tree-id957 . -5) (undo-tree-id958 . -5) (undo-tree-id959 . -5) (undo-tree-id960 . -5) (undo-tree-id961 . -5) (undo-tree-id962 . -5) (undo-tree-id963 . -6) 63) nil (25767 3505 602683 843000) 0 nil])
([nil nil ((135 . 136)) nil (25767 3505 602643 535000) 0 nil])
([nil nil ((136 . 137)) nil (25767 3505 602642 739000) 0 nil])
([nil nil ((nil rear-nonsticky nil 142 . 143) (nil fontified nil 137 . 143) (137 . 143) 136) nil (25767 3505 602641 787000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 141) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1)) nil (25767 3505 602639 491000) 0 nil])
([nil nil ((#("\"" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 58) (undo-tree-id886 . 1) (undo-tree-id887 . -1) (undo-tree-id888 . -1)) nil (25767 3505 602553 77000) 0 nil])
([nil nil ((117 . 121) (#("\"" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 117) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1)) nil (25767 3505 602545 880000) 0 nil])
([nil nil ((#("showed how to " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 147) (undo-tree-id1523 . -13) (undo-tree-id1524 . -13) (undo-tree-id1525 . -13) (undo-tree-id1526 . -13) (undo-tree-id1527 . -14) (undo-tree-id1528 . -13) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -5) (undo-tree-id1534 . -5) (undo-tree-id1535 . -9) (undo-tree-id1536 . -9) (undo-tree-id1537 . -9) (undo-tree-id1538 . -9) (undo-tree-id1539 . -9) (undo-tree-id1540 . -9) (undo-tree-id1541 . -12) (undo-tree-id1542 . -12) (undo-tree-id1543 . -12) (undo-tree-id1544 . -12) (undo-tree-id1545 . -12) (undo-tree-id1546 . -12) (undo-tree-id1547 . -13) (undo-tree-id1548 . -13) (undo-tree-id1549 . -13) (undo-tree-id1550 . -13) (undo-tree-id1551 . -13) (undo-tree-id1552 . -13) (undo-tree-id1553 . -13) (undo-tree-id1554 . -14) 160 (t 25767 3505 618813 917000)) nil (25767 3525 55104 667000) 0 nil])
([nil nil ((147 . 148) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 147)) nil (25767 3525 352288 342000) 0 nil])
([nil nil ((155 . 156) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 155)) ((155 . 156) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 155)) (25767 3529 518889 389000) 0 nil])
([nil nil ((206 . 208) (205 . 206)) nil (25767 3533 706988 150000) 0 nil] [nil nil ((206 . 207) (205 . 208)) ((#("
* " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 205) (undo-tree-id1561 . -3) (undo-tree-id1562 . -3) (undo-tree-id1563 . -3) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 206)) (25767 3529 518574 514000) 0 nil] [nil nil ((206 . 207) (206 . 208) (205 . 206)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 205) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (#("* " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 206) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 206)) (25767 3525 55014 31000) 0 nil])
([nil nil ((230 . 231) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -230) (undo-tree-id2129 . -1) 208 (t 25767 3533 723173 965000)) nil (25767 3573 973524 179000) 0 nil])
nil
nil
([nil nil ((#("This " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 208) (undo-tree-id2077 . -4) (undo-tree-id2078 . -4) (undo-tree-id2079 . -4) (undo-tree-id2080 . 5) (undo-tree-id2081 . -4) (undo-tree-id2082 . -5) (undo-tree-id2083 . -5) (undo-tree-id2084 . -5) (undo-tree-id2085 . -5) (undo-tree-id2086 . -5) (undo-tree-id2087 . -5) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -5) (undo-tree-id2091 . -5) (undo-tree-id2092 . -5) (undo-tree-id2093 . -5) (undo-tree-id2094 . -4) (undo-tree-id2095 . -3) (undo-tree-id2096 . -3) (undo-tree-id2097 . -3) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3) (undo-tree-id2102 . -3) (undo-tree-id2103 . -3) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) (undo-tree-id2110 . -3) (undo-tree-id2111 . -4) (undo-tree-id2112 . -4) (undo-tree-id2113 . -4) (undo-tree-id2114 . -4) (undo-tree-id2115 . -4) (undo-tree-id2116 . -4) (undo-tree-id2117 . -4) (undo-tree-id2118 . -4) (undo-tree-id2119 . -4) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -5) 212) nil (25767 3573 973520 448000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -299) (undo-tree-id2067 . -2) (undo-tree-id2068 . -2) (undo-tree-id2069 . -2) (undo-tree-id2070 . -2) (undo-tree-id2071 . -2) (undo-tree-id2072 . -2) (undo-tree-id2073 . -2) (undo-tree-id2074 . -2) (undo-tree-id2075 . -2) (undo-tree-id2076 . -2) 301 (298 . 301) 275) nil (25767 3573 973415 0) 0 nil])
([nil nil ((#("- Char-RNN can then be used to generate novel text, one character at a time. Here is a small
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 19 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 92 93 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 206) (undo-tree-id1706 . -92) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . 91) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -1) (undo-tree-id1713 . -77) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -19) (undo-tree-id1726 . -19) (undo-tree-id1727 . -19) (undo-tree-id1728 . -19) (undo-tree-id1729 . -19) (undo-tree-id1730 . -19) (undo-tree-id1731 . -19) (undo-tree-id1732 . -19) (undo-tree-id1733 . -19) (undo-tree-id1734 . -19) (undo-tree-id1735 . -19) (undo-tree-id1736 . -19) (undo-tree-id1737 . -19) (undo-tree-id1738 . -19) (undo-tree-id1739 . -19) (undo-tree-id1740 . -19) (undo-tree-id1741 . -19) (undo-tree-id1742 . -19) (undo-tree-id1743 . -19) (undo-tree-id1744 . -19) (undo-tree-id1745 . -19) (undo-tree-id1746 . -19) (undo-tree-id1747 . -19) (undo-tree-id1748 . -19) (undo-tree-id1749 . -19) (undo-tree-id1750 . -19) (undo-tree-id1751 . -19) (undo-tree-id1752 . -15) (undo-tree-id1753 . -15) (undo-tree-id1754 . -15) (undo-tree-id1755 . -15) (undo-tree-id1756 . -15) (undo-tree-id1757 . -15) (undo-tree-id1758 . -15) (undo-tree-id1759 . -15) (undo-tree-id1760 . -15) (undo-tree-id1761 . -15) (undo-tree-id1762 . -15) (undo-tree-id1763 . -11) (undo-tree-id1764 . -11) (undo-tree-id1765 . -11) (undo-tree-id1766 . -11) (undo-tree-id1767 . -11) (undo-tree-id1768 . -11) (undo-tree-id1769 . -11) (undo-tree-id1770 . -11) (undo-tree-id1771 . -11) (undo-tree-id1772 . -11) (undo-tree-id1773 . -11) (undo-tree-id1774 . -7) (undo-tree-id1775 . -7) (undo-tree-id1776 . -7) (undo-tree-id1777 . -7) (undo-tree-id1778 . -7) (undo-tree-id1779 . -7) (undo-tree-id1780 . -7) (undo-tree-id1781 . -7) (undo-tree-id1782 . -7) (undo-tree-id1783 . -7) (undo-tree-id1784 . -7) (undo-tree-id1785 . -6) (undo-tree-id1786 . -6) (undo-tree-id1787 . -6) (undo-tree-id1788 . -6) (undo-tree-id1789 . -6) (undo-tree-id1790 . -6) (undo-tree-id1791 . -6) (undo-tree-id1792 . -6) (undo-tree-id1793 . -6) (undo-tree-id1794 . -6) (undo-tree-id1795 . -6) (undo-tree-id1796 . -2) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -2) (undo-tree-id1818 . -2) (undo-tree-id1819 . -2) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -2) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2) (undo-tree-id1825 . -2) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -2) (undo-tree-id1839 . -2) (undo-tree-id1840 . -2) (undo-tree-id1841 . -2) (undo-tree-id1842 . -2) (undo-tree-id1843 . -2) (undo-tree-id1844 . -2) (undo-tree-id1845 . -2) (undo-tree-id1846 . -2) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -2) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) (undo-tree-id1859 . -2) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -2) (undo-tree-id1868 . -2) (undo-tree-id1869 . -2) (undo-tree-id1870 . -2) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) (undo-tree-id1873 . -2) (undo-tree-id1874 . -2) (undo-tree-id1875 . -2) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) (undo-tree-id1878 . -2) (undo-tree-id1879 . -2) (undo-tree-id1880 . -2) (undo-tree-id1881 . -2) (undo-tree-id1882 . -2) (undo-tree-id1883 . -2) (undo-tree-id1884 . -2) (undo-tree-id1885 . -2) (undo-tree-id1886 . -2) (undo-tree-id1887 . -2) (undo-tree-id1888 . -2) (undo-tree-id1889 . -2) (undo-tree-id1890 . -2) (undo-tree-id1891 . -2) (undo-tree-id1892 . -2) (undo-tree-id1893 . -2) (undo-tree-id1894 . -2) (undo-tree-id1895 . -2) (undo-tree-id1896 . -5) (undo-tree-id1897 . -5) (undo-tree-id1898 . -5) (undo-tree-id1899 . -5) (undo-tree-id1900 . -5) (undo-tree-id1901 . -5) (undo-tree-id1902 . -5) (undo-tree-id1903 . -5) (undo-tree-id1904 . -5) (undo-tree-id1905 . -5) (undo-tree-id1906 . -5) (undo-tree-id1907 . -5) (undo-tree-id1908 . -5) (undo-tree-id1909 . -5) (undo-tree-id1910 . -5) (undo-tree-id1911 . -5) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (undo-tree-id1915 . -6) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . 86) (undo-tree-id1919 . -10) (undo-tree-id1920 . -9) (undo-tree-id1921 . -9) (undo-tree-id1922 . -9) (undo-tree-id1923 . -9) (undo-tree-id1924 . -9) (undo-tree-id1925 . -9) (undo-tree-id1926 . -13) (undo-tree-id1927 . -13) (undo-tree-id1928 . -13) (undo-tree-id1929 . -13) (undo-tree-id1930 . -13) (undo-tree-id1931 . -13) (undo-tree-id1932 . -18) (undo-tree-id1933 . -18) (undo-tree-id1934 . -18) (undo-tree-id1935 . -18) (undo-tree-id1936 . -18) (undo-tree-id1937 . -18) (undo-tree-id1938 . -21) (undo-tree-id1939 . -21) (undo-tree-id1940 . -21) (undo-tree-id1941 . -21) (undo-tree-id1942 . -21) (undo-tree-id1943 . -21) (undo-tree-id1944 . -26) (undo-tree-id1945 . -26) (undo-tree-id1946 . -26) (undo-tree-id1947 . -26) (undo-tree-id1948 . -26) (undo-tree-id1949 . -26) (undo-tree-id1950 . -29) (undo-tree-id1951 . -29) (undo-tree-id1952 . -29) (undo-tree-id1953 . -29) (undo-tree-id1954 . -29) (undo-tree-id1955 . -29) (undo-tree-id1956 . -38) (undo-tree-id1957 . -38) (undo-tree-id1958 . -38) (undo-tree-id1959 . -38) (undo-tree-id1960 . -38) (undo-tree-id1961 . -38) (undo-tree-id1962 . -44) (undo-tree-id1963 . -44) (undo-tree-id1964 . -44) (undo-tree-id1965 . -44) (undo-tree-id1966 . -44) (undo-tree-id1967 . -44) (undo-tree-id1968 . -49) (undo-tree-id1969 . -49) (undo-tree-id1970 . -49) (undo-tree-id1971 . -49) (undo-tree-id1972 . -49) (undo-tree-id1973 . -49) (undo-tree-id1974 . -50) (undo-tree-id1975 . -50) (undo-tree-id1976 . -50) (undo-tree-id1977 . -50) (undo-tree-id1978 . -50) (undo-tree-id1979 . -50) (undo-tree-id1980 . -54) (undo-tree-id1981 . -54) (undo-tree-id1982 . -54) (undo-tree-id1983 . -54) (undo-tree-id1984 . -54) (undo-tree-id1985 . -54) (undo-tree-id1986 . -64) (undo-tree-id1987 . -64) (undo-tree-id1988 . -64) (undo-tree-id1989 . -64) (undo-tree-id1990 . -64) (undo-tree-id1991 . -64) (undo-tree-id1992 . -67) (undo-tree-id1993 . -67) (undo-tree-id1994 . -67) (undo-tree-id1995 . -67) (undo-tree-id1996 . -67) (undo-tree-id1997 . -67) (undo-tree-id1998 . -69) (undo-tree-id1999 . -69) (undo-tree-id2000 . -69) (undo-tree-id2001 . -69) (undo-tree-id2002 . -69) (undo-tree-id2003 . -69) (undo-tree-id2004 . -69) (undo-tree-id2005 . -69) (undo-tree-id2006 . -69) (undo-tree-id2007 . -69) (undo-tree-id2008 . -69) (undo-tree-id2009 . -69) (undo-tree-id2010 . -69) (undo-tree-id2011 . -69) (undo-tree-id2012 . -69) (undo-tree-id2013 . -69) (undo-tree-id2014 . -93) (undo-tree-id2015 . -93) (undo-tree-id2016 . -93) (undo-tree-id2017 . -93) (undo-tree-id2018 . -93) (undo-tree-id2019 . -93) (undo-tree-id2020 . -93) (undo-tree-id2021 . -93) (undo-tree-id2022 . -93) (undo-tree-id2023 . -93) (undo-tree-id2024 . -93) (undo-tree-id2025 . -93) (undo-tree-id2026 . -93) (undo-tree-id2027 . -93) (undo-tree-id2028 . -93) (undo-tree-id2029 . -93) (undo-tree-id2030 . -93) (undo-tree-id2031 . -93) (undo-tree-id2032 . -93) (undo-tree-id2033 . -93) (undo-tree-id2034 . -93) (undo-tree-id2035 . -93) (undo-tree-id2036 . -93) (undo-tree-id2037 . -93) (undo-tree-id2038 . -93) (undo-tree-id2039 . -93) (undo-tree-id2040 . -93) (undo-tree-id2041 . -93) (undo-tree-id2042 . -77) (undo-tree-id2043 . -77) (undo-tree-id2044 . -77) (undo-tree-id2045 . -77) (undo-tree-id2046 . -77) (undo-tree-id2047 . -77) (undo-tree-id2048 . -77) (undo-tree-id2049 . -77) (undo-tree-id2050 . -77) (undo-tree-id2051 . -77) (undo-tree-id2052 . -77) (undo-tree-id2053 . -77) (undo-tree-id2054 . -77) (undo-tree-id2055 . -77) (undo-tree-id2056 . -77) (undo-tree-id2057 . -77) (undo-tree-id2058 . -77) (undo-tree-id2059 . -77) (undo-tree-id2060 . -77) (undo-tree-id2061 . -77) (undo-tree-id2062 . -77) (undo-tree-id2063 . -77) (undo-tree-id2064 . -77) (undo-tree-id2065 . -77) (undo-tree-id2066 . -93) 283) nil (25767 3573 973394 794000) 0 nil])
([nil nil ((#("sample of the text generated by a Char-RNN model after it was trained on
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 207) (undo-tree-id1704 . -72) (undo-tree-id1705 . -73)) nil (25767 3573 972795 840000) 0 nil])
([nil nil ((#("all of Shakespeare’s work:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 26 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 207) (undo-tree-id1700 . -26) (undo-tree-id1701 . -25) (undo-tree-id1702 . -25) (undo-tree-id1703 . -27)) nil (25767 3573 972793 34000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -206) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . 1) (undo-tree-id1567 . 1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) 207) nil (25767 3573 972781 123000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1174 . 1175) (nil fontified nil 1133 . 1175) (nil fontified nil 1069 . 1133) (nil fontified nil 1033 . 1069) (nil fontified nil 956 . 1033) (nil fontified nil 881 . 956) (nil fontified nil 801 . 881) (nil fontified nil 730 . 801) (nil fontified nil 654 . 730) (nil fontified nil 578 . 654) (nil fontified nil 550 . 578) (nil fontified nil 524 . 550) (nil fontified nil 456 . 524) (nil fontified nil 391 . 456) (nil fontified nil 373 . 391) (nil fontified nil 305 . 373) (nil fontified nil 236 . 305) (nil fontified nil 206 . 236) (206 . 1175) (t 25767 3573 984937 415000)) nil (25767 3611 275600 771000) 0 nil])
([nil nil ((206 . 207) (206 . 208)) nil (25767 3611 275596 812000) 0 nil])
([nil nil ((1178 . 1179)) nil (25767 3611 275591 592000) 0 nil])
([nil nil ((239 . 240) (#("First, let’s d" 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 239) (undo-tree-id2204 . -13) (undo-tree-id2205 . -13) (undo-tree-id2206 . -13) (undo-tree-id2207 . -13) (undo-tree-id2208 . -5) (undo-tree-id2209 . -14) (undo-tree-id2210 . -13) (undo-tree-id2211 . -4) (undo-tree-id2212 . -4) (undo-tree-id2213 . -4) (undo-tree-id2214 . -4) (undo-tree-id2215 . -4) (undo-tree-id2216 . -4) (undo-tree-id2217 . -5) (undo-tree-id2218 . -5) (undo-tree-id2219 . -5) (undo-tree-id2220 . -5) (undo-tree-id2221 . -5) (undo-tree-id2222 . -5) (undo-tree-id2223 . -9) (undo-tree-id2224 . -9) (undo-tree-id2225 . -9) (undo-tree-id2226 . -9) (undo-tree-id2227 . -9) (undo-tree-id2228 . -9) (undo-tree-id2229 . -10) (undo-tree-id2230 . -10) (undo-tree-id2231 . -10) (undo-tree-id2232 . -10) (undo-tree-id2233 . -10) (undo-tree-id2234 . -10) (undo-tree-id2235 . -11) (undo-tree-id2236 . -11) (undo-tree-id2237 . -11) (undo-tree-id2238 . -11) (undo-tree-id2239 . -11) (undo-tree-id2240 . -11) (undo-tree-id2241 . -12) (undo-tree-id2242 . -12) (undo-tree-id2243 . -12) (undo-tree-id2244 . -12) (undo-tree-id2245 . -12) (undo-tree-id2246 . -12) (undo-tree-id2247 . -13) (undo-tree-id2248 . -13) (undo-tree-id2249 . -13) (undo-tree-id2250 . -13) (undo-tree-id2251 . -13) (undo-tree-id2252 . -13) (undo-tree-id2253 . -13) (undo-tree-id2254 . -14) (undo-tree-id2255 . -14) (undo-tree-id2256 . -14) 252 (t 25767 3611 290539 95000)) nil (25767 3653 688829 260000) 0 nil])
([nil nil ((266 . 267) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 266) (undo-tree-id2203 . -1)) nil (25767 3653 688619 263000) 0 nil])
([nil nil ((#(", using Keras’s handy" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 273) (undo-tree-id2200 . -20) (undo-tree-id2201 . -21) (undo-tree-id2202 . -21)) nil (25767 3653 688617 417000) 0 nil])
([nil nil ((#("get_file() function and downloading the data from Andrej Karpathy’s
" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 4 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 8 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 274) (undo-tree-id2198 . -67) (undo-tree-id2199 . -68)) nil (25767 3653 688614 448000) 0 nil])
([nil nil ((#("Char-RNN project:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 274) (undo-tree-id2196 . -17) (undo-tree-id2197 . -18)) nil (25767 3653 688612 524000) 0 nil])
([nil nil ((286 . 292) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 286 292 nil nil nil t #s(yas--exit 310 nil))) #s(yas--exit 310 nil) 0 nil #s(yas--field 1 286 292 nil nil nil t #s(yas--exit 310 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -304) (undo-tree-id2149 . -2) (274 . 317) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 274) (undo-tree-id2150 . -1) (undo-tree-id2151 . -2) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -2) (undo-tree-id2187 . -2) (undo-tree-id2188 . -2) (undo-tree-id2189 . -2) 276 (274 . 276) (274 . 275) (#("shakespeare_url = \"https://homl.info/shakespeare\" # shortcut URL
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 12 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 15 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t help-echo "LINK: https://homl.info/shakespeare" htmlize-link (:uri "https://homl.info/shakespeare") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 47 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo "LINK: https://homl.info/shakespeare" htmlize-link (:uri "https://homl.info/shakespeare") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 48 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 274) (undo-tree-id2190 . -64) (undo-tree-id2191 . 65) (undo-tree-id2192 . -11) (undo-tree-id2193 . -65) (undo-tree-id2194 . -65) (undo-tree-id2195 . -65)) nil (25767 3653 688608 548000) 0 nil])
([nil nil ((apply yas--snippet-revive 274 321 #s(yas--snippet nil (#s(yas--field 1 286 292 nil nil nil t #s(yas--exit 310 nil))) #s(yas--exit 310 nil) 0 nil #s(yas--field 1 286 292 nil nil nil t #s(yas--exit 310 nil)) nil nil))) nil (25767 3653 688578 324000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 309) (undo-tree-id2148 . -1)) nil (25767 3653 688577 296000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 309) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1)) nil (25767 3653 688575 586000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 309) (undo-tree-id2140 . -1)) nil (25767 3653 688570 811000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 309) (undo-tree-id2130 . -9) (undo-tree-id2131 . -9) (undo-tree-id2132 . -9) (undo-tree-id2133 . -9) (undo-tree-id2134 . -9) (undo-tree-id2135 . -9) (undo-tree-id2136 . -9) (undo-tree-id2137 . -9) (undo-tree-id2138 . -9) (undo-tree-id2139 . -10)) nil (25767 3653 688568 55000) 0 nil])
([nil nil ((nil rear-nonsticky nil 430 . 431) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -440) (430 . 441) 403) nil (25767 3653 688546 765000) 0 nil])
([nil nil ((403 . 407) (t 25767 3653 702763 425000)) nil (25767 3661 251401 913000) 0 nil])
([nil nil ((309 . 310) (t 25767 3661 267991 892000)) nil (25767 3676 867622 562000) 0 nil])
([nil nil ((378 . 379)) nil (25767 3676 867620 385000) 0 nil])
([nil nil ((409 . 410)) nil (25767 3676 867614 457000) 0 nil])
([nil nil ((239 . 241) (t 25767 3676 930342 368000)) nil (25767 3708 329055 225000) 0 nil])
([nil nil ((450 . 452) (#("Next, we must " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 450) (undo-tree-id2267 . -13) (undo-tree-id2268 . -13) (undo-tree-id2269 . -13) (undo-tree-id2270 . -13) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -14) (undo-tree-id2278 . -13) (undo-tree-id2279 . -3) (undo-tree-id2280 . -3) (undo-tree-id2281 . -3) (undo-tree-id2282 . -3) (undo-tree-id2283 . -3) (undo-tree-id2284 . -3) (undo-tree-id2285 . -4) (undo-tree-id2286 . -4) (undo-tree-id2287 . -4) (undo-tree-id2288 . -4) (undo-tree-id2289 . -4) (undo-tree-id2290 . -4) (undo-tree-id2291 . -7) (undo-tree-id2292 . -7) (undo-tree-id2293 . -7) (undo-tree-id2294 . -7) (undo-tree-id2295 . -7) (undo-tree-id2296 . -7) (undo-tree-id2297 . -12) (undo-tree-id2298 . -12) (undo-tree-id2299 . -12) (undo-tree-id2300 . -12) (undo-tree-id2301 . -12) (undo-tree-id2302 . -12) (undo-tree-id2303 . -14) (undo-tree-id2304 . -14) (undo-tree-id2305 . -14) (undo-tree-id2306 . -14) (undo-tree-id2307 . -14) (undo-tree-id2308 . -14) (undo-tree-id2309 . -13) (undo-tree-id2310 . -13) (undo-tree-id2311 . -13) (undo-tree-id2312 . -13) (undo-tree-id2313 . -13) (undo-tree-id2314 . -13) (undo-tree-id2315 . -13) (undo-tree-id2316 . -14) (undo-tree-id2317 . -14) (undo-tree-id2318 . -14) 463) nil (25767 3708 329052 582000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 451) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1)) nil (25767 3708 329018 909000) 0 nil])
([nil nil ((451 . 452)) nil (25767 3708 329001 747000) 0 nil])
([nil nil ((452 . 453) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 452)) nil (25767 3708 328996 616000) 0 nil])
([nil nil ((#("One option is to create
a custom preprocessing layer, as we did in Chapter 13. But in this case, it
will be simpler to use Keras’s Tokenizer class. " 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 24 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 76 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 100 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 490) (undo-tree-id2370 . -147) (undo-tree-id2371 . -147) (undo-tree-id2372 . -147) (undo-tree-id2373 . -147) (undo-tree-id2374 . -148) (undo-tree-id2375 . -147) (undo-tree-id2376 . -2) (undo-tree-id2377 . -2) (undo-tree-id2378 . -2) (undo-tree-id2379 . -2) (undo-tree-id2380 . -2) (undo-tree-id2381 . -2) (undo-tree-id2382 . -9) (undo-tree-id2383 . -9) (undo-tree-id2384 . -9) (undo-tree-id2385 . -9) (undo-tree-id2386 . -9) (undo-tree-id2387 . -9) (undo-tree-id2388 . -12) (undo-tree-id2389 . -12) (undo-tree-id2390 . -12) (undo-tree-id2391 . -12) (undo-tree-id2392 . -12) (undo-tree-id2393 . -12) (undo-tree-id2394 . -15) (undo-tree-id2395 . -15) (undo-tree-id2396 . -15) (undo-tree-id2397 . -15) (undo-tree-id2398 . -15) (undo-tree-id2399 . -15) (undo-tree-id2400 . -22) (undo-tree-id2401 . -22) (undo-tree-id2402 . -22) (undo-tree-id2403 . -22) (undo-tree-id2404 . -22) (undo-tree-id2405 . -22) (undo-tree-id2406 . -24) (undo-tree-id2407 . -24) (undo-tree-id2408 . -24) (undo-tree-id2409 . -24) (undo-tree-id2410 . -24) (undo-tree-id2411 . -24) (undo-tree-id2412 . -31) (undo-tree-id2413 . -31) (undo-tree-id2414 . -31) (undo-tree-id2415 . -31) (undo-tree-id2416 . -31) (undo-tree-id2417 . -31) (undo-tree-id2418 . 115) (undo-tree-id2419 . -46) (undo-tree-id2420 . -45) (undo-tree-id2421 . -45) (undo-tree-id2422 . -45) (undo-tree-id2423 . -45) (undo-tree-id2424 . -45) (undo-tree-id2425 . -45) (undo-tree-id2426 . -51) (undo-tree-id2427 . -51) (undo-tree-id2428 . -51) (undo-tree-id2429 . -51) (undo-tree-id2430 . -51) (undo-tree-id2431 . -51) (undo-tree-id2432 . -52) (undo-tree-id2433 . -52) (undo-tree-id2434 . -52) (undo-tree-id2435 . -52) (undo-tree-id2436 . -52) (undo-tree-id2437 . -52) (undo-tree-id2438 . -55) (undo-tree-id2439 . -55) (undo-tree-id2440 . -55) (undo-tree-id2441 . -55) (undo-tree-id2442 . -55) (undo-tree-id2443 . -55) (undo-tree-id2444 . -58) (undo-tree-id2445 . -58) (undo-tree-id2446 . -58) (undo-tree-id2447 . -58) (undo-tree-id2448 . -58) (undo-tree-id2449 . -58) (undo-tree-id2450 . -62) (undo-tree-id2451 . -62) (undo-tree-id2452 . -62) (undo-tree-id2453 . -62) (undo-tree-id2454 . -62) (undo-tree-id2455 . -62) (undo-tree-id2456 . -65) (undo-tree-id2457 . -65) (undo-tree-id2458 . -65) (undo-tree-id2459 . -65) (undo-tree-id2460 . -65) (undo-tree-id2461 . -65) (undo-tree-id2462 . -73) (undo-tree-id2463 . -73) (undo-tree-id2464 . -73) (undo-tree-id2465 . -73) (undo-tree-id2466 . -73) (undo-tree-id2467 . -73) (undo-tree-id2468 . -76) (undo-tree-id2469 . -76) (undo-tree-id2470 . -76) (undo-tree-id2471 . -76) (undo-tree-id2472 . -76) (undo-tree-id2473 . -76) (undo-tree-id2474 . -77) (undo-tree-id2475 . -77) (undo-tree-id2476 . -77) (undo-tree-id2477 . -77) (undo-tree-id2478 . -77) (undo-tree-id2479 . -77) (undo-tree-id2480 . -81) (undo-tree-id2481 . -81) (undo-tree-id2482 . -81) (undo-tree-id2483 . -81) (undo-tree-id2484 . -81) (undo-tree-id2485 . -81) (undo-tree-id2486 . -84) (undo-tree-id2487 . -84) (undo-tree-id2488 . -84) (undo-tree-id2489 . -84) (undo-tree-id2490 . -84) (undo-tree-id2491 . -84) (undo-tree-id2492 . -89) (undo-tree-id2493 . -89) (undo-tree-id2494 . -89) (undo-tree-id2495 . -89) (undo-tree-id2496 . -89) (undo-tree-id2497 . -89) (undo-tree-id2498 . -94) (undo-tree-id2499 . -94) (undo-tree-id2500 . -94) (undo-tree-id2501 . -94) (undo-tree-id2502 . -94) (undo-tree-id2503 . -94) (undo-tree-id2504 . -95) (undo-tree-id2505 . -95) (undo-tree-id2506 . -95) (undo-tree-id2507 . -95) (undo-tree-id2508 . -95) (undo-tree-id2509 . -95) (undo-tree-id2510 . -98) (undo-tree-id2511 . -98) (undo-tree-id2512 . -98) (undo-tree-id2513 . -98) (undo-tree-id2514 . -98) (undo-tree-id2515 . -98) (undo-tree-id2516 . -103) (undo-tree-id2517 . -103) (undo-tree-id2518 . -103) (undo-tree-id2519 . -103) (undo-tree-id2520 . -103) (undo-tree-id2521 . -103) (undo-tree-id2522 . -106) (undo-tree-id2523 . -106) (undo-tree-id2524 . -106) (undo-tree-id2525 . -106) (undo-tree-id2526 . -106) (undo-tree-id2527 . -106) (undo-tree-id2528 . -114) (undo-tree-id2529 . -114) (undo-tree-id2530 . -114) (undo-tree-id2531 . -114) (undo-tree-id2532 . -114) (undo-tree-id2533 . -114) (undo-tree-id2534 . -117) (undo-tree-id2535 . -117) (undo-tree-id2536 . -117) (undo-tree-id2537 . -117) (undo-tree-id2538 . -117) (undo-tree-id2539 . -117) (undo-tree-id2540 . -121) (undo-tree-id2541 . -121) (undo-tree-id2542 . -121) (undo-tree-id2543 . -121) (undo-tree-id2544 . -121) (undo-tree-id2545 . -121) (undo-tree-id2546 . 25) (undo-tree-id2547 . -128) (undo-tree-id2548 . -127) (undo-tree-id2549 . -127) (undo-tree-id2550 . -127) (undo-tree-id2551 . -127) (undo-tree-id2552 . -127) (undo-tree-id2553 . -127) (undo-tree-id2554 . -128) (undo-tree-id2555 . -128) (undo-tree-id2556 . -128) (undo-tree-id2557 . -128) (undo-tree-id2558 . -128) (undo-tree-id2559 . -128) (undo-tree-id2560 . -129) (undo-tree-id2561 . -129) (undo-tree-id2562 . -129) (undo-tree-id2563 . -129) (undo-tree-id2564 . -129) (undo-tree-id2565 . -129) (undo-tree-id2566 . 17) (undo-tree-id2567 . -140) (undo-tree-id2568 . -139) (undo-tree-id2569 . -139) (undo-tree-id2570 . -139) (undo-tree-id2571 . -139) (undo-tree-id2572 . -139) (undo-tree-id2573 . -139) (undo-tree-id2574 . -145) (undo-tree-id2575 . -145) (undo-tree-id2576 . -145) (undo-tree-id2577 . -145) (undo-tree-id2578 . -145) (undo-tree-id2579 . -145) (undo-tree-id2580 . -146) (undo-tree-id2581 . -146) (undo-tree-id2582 . -146) (undo-tree-id2583 . -146) (undo-tree-id2584 . -146) (undo-tree-id2585 . -146) (undo-tree-id2586 . -148) (undo-tree-id2587 . -148) (undo-tree-id2588 . -148) (undo-tree-id2589 . -148) (undo-tree-id2590 . -148) (undo-tree-id2591 . -148) (undo-tree-id2592 . -146) (undo-tree-id2593 . -146) (undo-tree-id2594 . -146) (undo-tree-id2595 . -146) (undo-tree-id2596 . -146) (undo-tree-id2597 . -146) (undo-tree-id2598 . -147) (undo-tree-id2599 . -147) (undo-tree-id2600 . -147) (undo-tree-id2601 . -147) (undo-tree-id2602 . -147) (undo-tree-id2603 . -147) (undo-tree-id2604 . -147) (undo-tree-id2605 . -148) 637 (t 25767 3708 390381 18000)) nil (25767 3758 559503 916000) 0 nil])
([nil nil ((492 . 494) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -492) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . -493) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) 494 (491 . 492) (491 . 493) (490 . 491)) nil (25767 3758 559149 472000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 491) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1)) nil (25767 3758 559133 946000) 0 nil])
([nil nil ((515 . 516) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -515) (undo-tree-id2322 . -1) 493) nil (25767 3758 559768 250000) 0 nil])
([nil nil ((#(": it will find all the characters used in the text and map" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 537) (undo-tree-id2733 . -57) (undo-tree-id2734 . -58) (undo-tree-id2735 . -2) (undo-tree-id2736 . -2) (undo-tree-id2737 . -2) (undo-tree-id2738 . -2) (undo-tree-id2739 . -2) (undo-tree-id2740 . -2) (undo-tree-id2741 . -2) (undo-tree-id2742 . -2) (undo-tree-id2743 . -2) (undo-tree-id2744 . -2) (undo-tree-id2745 . -2) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -58) (undo-tree-id2758 . -58)) nil (25767 3815 950687 433000) 0 nil] [nil nil ((#(": it will find all the characters used in the text and map" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 537) (undo-tree-id2319 . -57) (undo-tree-id2320 . -58) (undo-tree-id2321 . -58)) ((537 . 595)) (25767 3758 559114 241000) 0 nil])
([nil nil ((#("each of them to a different character ID, from 1 to the number of distinct
" 0 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 538) (undo-tree-id2730 . -74) (undo-tree-id2731 . 75) (undo-tree-id2732 . -75)) nil (25767 3815 950671 272000) 0 nil])
nil
([nil nil ((#("characters " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 538) (undo-tree-id2727 . -10) (undo-tree-id2728 . 11) (undo-tree-id2729 . -11)) nil (25767 3815 950668 737000) 0 nil])
([nil nil ((538 . 540)) nil (25767 3815 950665 397000) 0 nil])
([nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 540) (undo-tree-id2721 . 1) (undo-tree-id2722 . 1) (undo-tree-id2723 . 1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1)) nil (25767 3815 950664 468000) 0 nil])
([nil nil ((#("it does not start at " 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 540) (undo-tree-id2705 . -20) (undo-tree-id2706 . -20) (undo-tree-id2707 . -20) (undo-tree-id2708 . 21) (undo-tree-id2709 . -20) (undo-tree-id2710 . 21) (undo-tree-id2711 . -21) (undo-tree-id2712 . -20) (undo-tree-id2713 . -1) (undo-tree-id2714 . -6) (undo-tree-id2715 . -10) (undo-tree-id2716 . -16) (undo-tree-id2717 . -19) (undo-tree-id2718 . -20) (undo-tree-id2719 . -20) (undo-tree-id2720 . -21) 560) nil (25767 3815 950657 13000) 0 nil])
([nil nil ((541 . 544) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -541) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) 542 (541 . 542) (#(", so we can" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 541) (undo-tree-id2690 . -10) (undo-tree-id2691 . -10) (undo-tree-id2692 . -10) (undo-tree-id2693 . -10) (undo-tree-id2694 . -11) (undo-tree-id2695 . -10) (undo-tree-id2696 . -3) (undo-tree-id2697 . -6) (undo-tree-id2698 . -10) (undo-tree-id2699 . -11) (undo-tree-id2700 . -10) (undo-tree-id2701 . -10) (undo-tree-id2702 . -11) (undo-tree-id2703 . -11) (undo-tree-id2704 . -11) 551) nil (25767 3815 950392 918000) 0 nil])
([nil nil ((548 . 549)) nil (25767 3815 950378 23000) 0 nil])
([nil nil ((#("that value " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 550) (undo-tree-id2667 . -10) (undo-tree-id2668 . -10) (undo-tree-id2669 . -10) (undo-tree-id2670 . -10) (undo-tree-id2671 . -3) (undo-tree-id2672 . -2) (undo-tree-id2673 . -1) (undo-tree-id2674 . -11) (undo-tree-id2675 . -10) (undo-tree-id2676 . -3) (undo-tree-id2677 . -9) (undo-tree-id2678 . -11) (undo-tree-id2679 . -10) (undo-tree-id2680 . -10) (undo-tree-id2681 . -11) 560) nil (25767 3815 950376 826000) 0 nil])
([nil nil ((#(", as" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 561) (undo-tree-id2662 . -3) (undo-tree-id2663 . -2) (undo-tree-id2664 . -1) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4)) nil (25767 3815 950367 574000) 0 nil])
([nil nil ((#("we will see later in this chapter):" 0 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 562) (undo-tree-id2659 . -34) (undo-tree-id2660 . -35) (undo-tree-id2661 . -35)) nil (25767 3815 950362 92000) 0 nil])
([nil nil ((575 . 581) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 575 581 nil nil nil t #s(yas--exit 599 nil))) #s(yas--exit 599 nil) 1 nil #s(yas--field 1 575 581 nil nil nil t #s(yas--exit 599 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -593) (undo-tree-id2619 . -2) (563 . 606) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 563) (undo-tree-id2620 . -1) (undo-tree-id2621 . -2) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -2) (undo-tree-id2651 . -2) (undo-tree-id2652 . -2) (undo-tree-id2653 . -2) (undo-tree-id2654 . -2) (undo-tree-id2655 . -2) (undo-tree-id2656 . -2) (undo-tree-id2657 . -2) (undo-tree-id2658 . -2) 565 (563 . 565) (562 . 563)) nil (25767 3815 950358 104000) 0 nil])
([nil nil ((apply yas--snippet-revive 563 610 #s(yas--snippet nil (#s(yas--field 1 575 581 nil nil nil t #s(yas--exit 599 nil))) #s(yas--exit 599 nil) 1 nil #s(yas--field 1 575 581 nil nil nil t #s(yas--exit 599 nil)) nil nil))) nil (25767 3815 950330 183000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 598) (undo-tree-id2618 . -1)) nil (25767 3815 950329 376000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 598) (undo-tree-id2617 . -1)) nil (25767 3815 950327 689000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 598) (undo-tree-id2616 . -1)) nil (25767 3815 950326 35000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 598) (undo-tree-id2606 . -9) (undo-tree-id2607 . -9) (undo-tree-id2608 . -9) (undo-tree-id2609 . -9) (undo-tree-id2610 . -9) (undo-tree-id2611 . -9) (undo-tree-id2612 . -9) (undo-tree-id2613 . -9) (undo-tree-id2614 . -9) (undo-tree-id2615 . -10)) nil (25767 3815 950323 534000) 0 nil])
([nil nil ((nil rear-nonsticky nil 704 . 705) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -714) (704 . 715) 662) nil (25767 3815 950304 178000) 0 nil])
([nil nil ((nil rear-nonsticky nil 561 . 562) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -585) (561 . 586) 538 (t 25767 3815 963487 526000)) nil (25767 3833 401229 831000) 0 nil])
([nil nil ((nil rear-nonsticky nil 585 . 586) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -609) (585 . 610) 562) nil (25767 3833 401594 312000) 0 nil])
([nil nil ((564 . 565) (#("0" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 564) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (t 25767 3865 306165 99000)) nil (25767 3879 405057 287000) 0 nil] [nil nil ((585 . 586) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -585) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) 564) ((585 . 586) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 585)) (25767 3833 401223 148000) 0 nil])
([nil nil ((589 . 590) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 589) (undo-tree-id2780 . 1) (undo-tree-id2781 . -1) (588 . 589) (#("0" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 588) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1)) nil (25767 3879 405043 134000) 0 nil])
nil
([nil nil ((#("2" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 589) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1)) nil (25767 3879 405024 813000) 0 nil])
([nil nil ((589 . 590)) nil (25767 3879 405022 80000) 0 nil])
([nil nil ((#("masking" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 602) (undo-tree-id2775 . -6) (undo-tree-id2776 . -7) (undo-tree-id2777 . -7)) nil (25767 3879 405020 384000) 0 nil])
([nil nil ((#("masking" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 578) (undo-tree-id2772 . -6) (undo-tree-id2773 . -7) (undo-tree-id2774 . -7)) nil (25767 3879 405013 648000) 0 nil])
([nil nil ((583 . 584) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -583) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) 584 (580 . 584) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -580) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) 581 (579 . 581) (#("_" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -579) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (#("_" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t invisible org-link)) . -580) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (#("_" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t invisible org-link)) . -581) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) 582 (578 . 582) (t 25767 3879 422823 273000)) nil (25767 3890 183261 72000) 0 nil])
([nil nil ((#("- Encode every character as an integer. 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 450) (undo-tree-id2937 . -40) (undo-tree-id2938 . -2) (undo-tree-id2939 . -41) (undo-tree-id2940 . -41) (undo-tree-id2941 . -41) (undo-tree-id2942 . -41) (undo-tree-id2943 . -41) (undo-tree-id2944 . -41) (undo-tree-id2945 . -2) (undo-tree-id2946 . -2) (undo-tree-id2947 . -2) (undo-tree-id2948 . -2) (undo-tree-id2949 . -2) (undo-tree-id2950 . -2) (undo-tree-id2951 . -2) (undo-tree-id2952 . -2) (undo-tree-id2953 . -2) (undo-tree-id2954 . -2) (undo-tree-id2955 . -2) (undo-tree-id2956 . -2) (undo-tree-id2957 . -2) (undo-tree-id2958 . -2) (undo-tree-id2959 . -41) 452 (t 25767 3890 195299 82000)) nil (25767 3917 97500 270000) 0 nil])
([nil nil ((nil rear-nonsticky nil 560 . 561) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -601) (560 . 602) 546) nil (25767 3917 97484 809000) 0 nil])
([nil nil ((#("First we need to " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 452) (undo-tree-id2899 . -16) (undo-tree-id2900 . -16) (undo-tree-id2901 . -16) (undo-tree-id2902 . -16) (undo-tree-id2903 . -17) (undo-tree-id2904 . -16) (undo-tree-id2905 . -4) (undo-tree-id2906 . -4) (undo-tree-id2907 . -4) (undo-tree-id2908 . -4) (undo-tree-id2909 . -4) (undo-tree-id2910 . -4) (undo-tree-id2911 . -7) (undo-tree-id2912 . -7) (undo-tree-id2913 . -7) (undo-tree-id2914 . -7) (undo-tree-id2915 . -7) (undo-tree-id2916 . -7) (undo-tree-id2917 . -12) (undo-tree-id2918 . -12) (undo-tree-id2919 . -12) (undo-tree-id2920 . -12) (undo-tree-id2921 . -12) (undo-tree-id2922 . -12) (undo-tree-id2923 . -15) (undo-tree-id2924 . -15) (undo-tree-id2925 . -15) (undo-tree-id2926 . -15) (undo-tree-id2927 . -15) (undo-tree-id2928 . -15) (undo-tree-id2929 . -16) (undo-tree-id2930 . -16) (undo-tree-id2931 . -16) (undo-tree-id2932 . -16) (undo-tree-id2933 . -16) (undo-tree-id2934 . -16) (undo-tree-id2935 . -16) (undo-tree-id2936 . -17) 468) nil (25767 3917 97481 967000) 0 nil])
([nil nil ((452 . 453) (#("f" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 452)) nil (25767 3917 97446 601000) 0 nil])
([nil nil ((738 . 740) (t 25767 3917 116400 572000)) nil (25767 3961 550858 664000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2033 . 2034) (nil fontified nil 1959 . 2034) (nil fontified nil 1887 . 1959) (nil fontified nil 1853 . 1887) (nil fontified nil 1805 . 1853) (nil fontified nil 1725 . 1805) (nil fontified nil 1653 . 1725) (nil fontified nil 1651 . 1653) (nil fontified nil 1578 . 1651) (nil fontified nil 1515 . 1578) (nil fontified nil 1441 . 1515) (nil fontified nil 1368 . 1441) (nil fontified nil 1297 . 1368) (nil fontified nil 1283 . 1297) (nil fontified nil 1230 . 1283) (nil fontified nil 1211 . 1230) (nil fontified nil 1167 . 1211) (nil fontified nil 1109 . 1167) (nil fontified nil 1032 . 1109) (nil fontified nil 955 . 1032) (nil fontified nil 886 . 955) (nil fontified nil 811 . 886) (nil fontified nil 740 . 811) (740 . 2034)) nil (25767 3961 550856 993000) 0 nil])
([nil nil ((#("We set char_level=True to get character-level encoding rather than the
" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 12 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 17 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 740) (undo-tree-id3008 . -70) (undo-tree-id3009 . -70) (undo-tree-id3010 . 1) (undo-tree-id3011 . -71)) nil (25767 3961 550852 878000) 0 nil])
([nil nil ((nil rear-nonsticky nil 684 . 685) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -755) (684 . 756) 621) nil (25767 3961 550849 879000) 0 nil])
([nil nil ((685 . 686)) nil (25767 3961 550848 824000) 0 nil])
([nil nil ((686 . 687) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -686) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -687) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) 688 (686 . 688) (#("We " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 686) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -2) (undo-tree-id2997 . 3) (undo-tree-id2998 . -2) (undo-tree-id2999 . -3) (undo-tree-id3000 . -2) (undo-tree-id3001 . -1) (undo-tree-id3002 . -3) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -3) (undo-tree-id3006 . -3) (undo-tree-id3007 . -3) 688) nil (25767 3961 550845 554000) 0 nil])
([nil nil ((#("rather than the" 0 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 739) (undo-tree-id2960 . -14) (undo-tree-id2961 . -15) (undo-tree-id2962 . -15)) nil (25767 3961 550594 359000) 0 nil])
([nil nil ((2018 . 2019)) nil (25767 3961 550579 89000) 0 nil])
([nil nil ((#("# set char_level=True to get character-level encoding 
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 6 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 11 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 17 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 21 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 54 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 685) (undo-tree-id3012 . -54) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . 53) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . 53) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -53) (undo-tree-id3043 . -53) (undo-tree-id3044 . -53) (undo-tree-id3045 . -53) (undo-tree-id3046 . -53) (undo-tree-id3047 . -53) (undo-tree-id3048 . -53) (undo-tree-id3049 . -53) (undo-tree-id3050 . -53) (undo-tree-id3051 . -53) (undo-tree-id3052 . -53) (undo-tree-id3053 . -53) (undo-tree-id3054 . -53) (undo-tree-id3055 . -53) (undo-tree-id3056 . -53) (undo-tree-id3057 . -53) (undo-tree-id3058 . -53) (undo-tree-id3059 . -53) (undo-tree-id3060 . -53) (undo-tree-id3061 . -55) 738 (t 25767 3961 565997 387000)) nil (25767 3965 28199 225000) 0 nil])
([nil nil ((nil rear-nonsticky nil 620 . 621) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -675) (620 . 676) 619) nil (25767 3965 28150 702000) 0 nil])
([nil nil ((#("default word-level encoding. Note that this tokenizer converts the text to
lowercase by default (but you can set lower=False if you do not want
that). Now the tokenizer can encode a sentence (or a list of sentences) to a
list of character IDs and back, and it tells us how many distinct characters
there are and the total number of characters in the text:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 144 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 144 221 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 221 298 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 298 356 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 795) (undo-tree-id3206 . -355) (undo-tree-id3207 . -298) (undo-tree-id3208 . -298) (undo-tree-id3209 . -298) (undo-tree-id3210 . -356) (undo-tree-id3211 . -298) (undo-tree-id3212 . -75) (undo-tree-id3213 . -75) (undo-tree-id3214 . -75) (undo-tree-id3215 . -75) (undo-tree-id3216 . -75) (undo-tree-id3217 . -75) (undo-tree-id3218 . -144) (undo-tree-id3219 . -144) (undo-tree-id3220 . -144) (undo-tree-id3221 . -144) (undo-tree-id3222 . -144) (undo-tree-id3223 . -144) (undo-tree-id3224 . -221) (undo-tree-id3225 . -221) (undo-tree-id3226 . -221) (undo-tree-id3227 . -221) (undo-tree-id3228 . -221) (undo-tree-id3229 . -221) (undo-tree-id3230 . -298) (undo-tree-id3231 . -298) (undo-tree-id3232 . -298) (undo-tree-id3233 . -298) (undo-tree-id3234 . -298) (undo-tree-id3235 . -298) (undo-tree-id3236 . -221) (undo-tree-id3237 . -221) (undo-tree-id3238 . -221) (undo-tree-id3239 . -221) (undo-tree-id3240 . -221) (undo-tree-id3241 . -221) (undo-tree-id3242 . -298) (undo-tree-id3243 . -298) (undo-tree-id3244 . -298) (undo-tree-id3245 . -298) (undo-tree-id3246 . -298) (undo-tree-id3247 . -298) (undo-tree-id3248 . -221) (undo-tree-id3249 . -221) (undo-tree-id3250 . -221) (undo-tree-id3251 . -221) (undo-tree-id3252 . -221) (undo-tree-id3253 . -221) (undo-tree-id3254 . -298) (undo-tree-id3255 . -298) (undo-tree-id3256 . -298) (undo-tree-id3257 . -298) (undo-tree-id3258 . -298) (undo-tree-id3259 . -298) (undo-tree-id3260 . -298) (undo-tree-id3261 . -356) 1093 (t 25767 3965 46112 855000)) nil (25767 4036 288977 38000) 0 nil])
([nil nil ((nil rear-nonsticky nil 585 . 586) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -941) (585 . 942)) nil (25767 4036 288883 690000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t)) . 585) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1)) nil (25767 4036 288880 179000) 0 nil])
([nil nil ((585 . 587)) nil (25767 4036 288606 861000) 0 nil])
([nil nil ((595 . 596) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -595) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -596) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) 597 (594 . 597) (#("m" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -594) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) 595 (587 . 595) (#("default word-level encoding. Note that this" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 587) (undo-tree-id3168 . -42) (undo-tree-id3169 . -42) (undo-tree-id3170 . -42) (undo-tree-id3171 . 43) (undo-tree-id3172 . -42) (undo-tree-id3173 . -6) (undo-tree-id3174 . -43) (undo-tree-id3175 . -42) (undo-tree-id3176 . -6) (undo-tree-id3177 . -11) (undo-tree-id3178 . -12) (undo-tree-id3179 . -17) (undo-tree-id3180 . -26) (undo-tree-id3181 . -27) (undo-tree-id3182 . -32) (undo-tree-id3183 . -37) (undo-tree-id3184 . -38) (undo-tree-id3185 . -39) (undo-tree-id3186 . -40) (undo-tree-id3187 . -41) (undo-tree-id3188 . -42) (undo-tree-id3189 . -42) (undo-tree-id3190 . -43) (undo-tree-id3191 . -43) (undo-tree-id3192 . -43) 629) nil (25767 4036 288602 955000) 0 nil])
([nil nil ((627 . 628) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -627) (undo-tree-id3115 . -1) 625) nil (25767 4036 288553 33000) 0 nil])
([nil nil ((#("(but you can set lower=False if you do not want
that)" 0 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 649) (undo-tree-id3113 . -52) (undo-tree-id3114 . -53) 587) nil (25767 4036 288550 76000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 648) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1)) nil (25767 4051 508289 689000) 0 nil])
([nil nil ((#("Now the tokenizer can encode a sentence (or a list of sentences) to a" 0 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 650) (undo-tree-id3391 . -68) (undo-tree-id3392 . -69) (undo-tree-id3393 . -69) (t 25767 4036 305599 575000)) nil (25767 4078 784178 663000) 0 nil] [nil nil ((#("Now the tokenizer can encode a sentence (or a list of sentences) to a" 0 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 650) (undo-tree-id3262 . -68) (undo-tree-id3263 . -69) (undo-tree-id3264 . -69) (t 25767 4036 305599 575000)) ((650 . 719)) (25767 4051 507878 798000) 0 nil])
([nil nil ((#("list of character IDs and back, and it tells us how many distinct characters
" 0 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id3389 . -76) (undo-tree-id3390 . -77)) nil (25767 4078 784175 935000) 0 nil])
nil
([nil nil ((#("there are and the total number of characters in the text:
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 57 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 651) (undo-tree-id3387 . -57) (undo-tree-id3388 . -58)) nil (25767 4079 208408 297000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -651) (undo-tree-id3409 . -2) (undo-tree-id3410 . -2) (undo-tree-id3411 . -2) (undo-tree-id3412 . -2) (undo-tree-id3413 . -2) (undo-tree-id3414 . -2) (undo-tree-id3415 . -2) (undo-tree-id3416 . -2) (undo-tree-id3417 . -2) (undo-tree-id3418 . -2) 653 (650 . 653) 585) nil (25767 4085 138483 208000) 0 nil] [nil nil ((585 . 586)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 585) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1)) (25767 4078 784645 886000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 849) (undo-tree-id3406 . -9) (undo-tree-id3407 . -10) (undo-tree-id3408 . -10)) nil (25767 4085 138471 750000) 0 nil])
([nil nil ((#("- here, the tokenizer converts the text to lowercase by default. 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 586) (undo-tree-id3265 . -65) (undo-tree-id3266 . -66) (undo-tree-id3267 . -66) (undo-tree-id3268 . -66) (undo-tree-id3269 . -66) (undo-tree-id3270 . 66) (undo-tree-id3271 . -10) (undo-tree-id3272 . 54) (undo-tree-id3273 . -21) (undo-tree-id3274 . -63) (undo-tree-id3275 . -65) (undo-tree-id3276 . -64) (undo-tree-id3277 . -65) (undo-tree-id3278 . -65) (undo-tree-id3279 . -65) (undo-tree-id3280 . -65) (undo-tree-id3281 . -65) (undo-tree-id3282 . -65) (undo-tree-id3283 . -65) (undo-tree-id3284 . -65) (undo-tree-id3285 . -65) (undo-tree-id3286 . -65) (undo-tree-id3287 . -65) (undo-tree-id3288 . -65) (undo-tree-id3289 . -65) (undo-tree-id3290 . -65) (undo-tree-id3291 . -65) (undo-tree-id3292 . -65) (undo-tree-id3293 . -65) (undo-tree-id3294 . -65) (undo-tree-id3295 . -65) (undo-tree-id3296 . -65) (undo-tree-id3297 . -65) (undo-tree-id3298 . -65) (undo-tree-id3299 . -65) (undo-tree-id3300 . -65) (undo-tree-id3301 . -65) (undo-tree-id3302 . -65) (undo-tree-id3303 . -65) (undo-tree-id3304 . -65) (undo-tree-id3305 . -65) (undo-tree-id3306 . -65) (undo-tree-id3307 . -65) (undo-tree-id3308 . -65) (undo-tree-id3309 . -65) (undo-tree-id3310 . -65) (undo-tree-id3311 . -65) (undo-tree-id3312 . -65) (undo-tree-id3313 . -65) (undo-tree-id3314 . -65) (undo-tree-id3315 . -65) (undo-tree-id3316 . -65) (undo-tree-id3317 . -65) (undo-tree-id3318 . -65) (undo-tree-id3319 . -65) (undo-tree-id3320 . -65) (undo-tree-id3321 . -64) (undo-tree-id3322 . -64) (undo-tree-id3323 . -64) (undo-tree-id3324 . -64) (undo-tree-id3325 . -64) (undo-tree-id3326 . -64) (undo-tree-id3327 . -64) (undo-tree-id3328 . -66) (undo-tree-id3329 . -66) (undo-tree-id3330 . -66) (undo-tree-id3331 . -66) (undo-tree-id3332 . -66) (undo-tree-id3333 . -66) (undo-tree-id3334 . -66) (undo-tree-id3335 . -66) (undo-tree-id3336 . -66) (undo-tree-id3337 . -66) (undo-tree-id3338 . -66) (undo-tree-id3339 . -66) (undo-tree-id3340 . -66) (undo-tree-id3341 . -66) (undo-tree-id3342 . -66) (undo-tree-id3343 . -66) (undo-tree-id3344 . -66) (undo-tree-id3345 . -66) (undo-tree-id3346 . -66) (undo-tree-id3347 . -66) (undo-tree-id3348 . -66) (undo-tree-id3349 . -66) (undo-tree-id3350 . -66) (undo-tree-id3351 . -66) (undo-tree-id3352 . -66) (undo-tree-id3353 . -66) (undo-tree-id3354 . -66) (undo-tree-id3355 . -66) (undo-tree-id3356 . -66) (undo-tree-id3357 . -66) (undo-tree-id3358 . -66) (undo-tree-id3359 . -66) (undo-tree-id3360 . -66) (undo-tree-id3361 . -66) (undo-tree-id3362 . -66) (undo-tree-id3363 . -66) (undo-tree-id3364 . -66) (undo-tree-id3365 . -66) (undo-tree-id3366 . -66) (undo-tree-id3367 . -66) (undo-tree-id3368 . -66) (undo-tree-id3369 . -66) (undo-tree-id3370 . -66) (undo-tree-id3371 . -66) (undo-tree-id3372 . -66) (undo-tree-id3373 . -66) (undo-tree-id3374 . -66) (undo-tree-id3375 . -66) (undo-tree-id3376 . -66) (undo-tree-id3377 . -66) (undo-tree-id3378 . -66) (undo-tree-id3379 . -66) (undo-tree-id3380 . -66) (undo-tree-id3381 . -66) (undo-tree-id3382 . -66) (undo-tree-id3383 . -66) (undo-tree-id3384 . -66) (undo-tree-id3385 . -66) (undo-tree-id3386 . -66)) ((586 . 652)) (25767 4078 784162 301000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1124 . 1125) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1134) (1124 . 1135) 1052) nil (25767 4085 138455 896000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 849) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (t 25767 4085 203762 979000)) nil (25767 4109 693747 19000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 849) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1)) nil (25767 4109 693740 988000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 849) (undo-tree-id3490 . -3) (undo-tree-id3491 . 4) (undo-tree-id3492 . -1) (undo-tree-id3493 . -4)) nil (25767 4109 693734 137000) 0 nil])
([nil nil ((889 . 891)) nil (25767 4109 693731 17000) 0 nil])
([nil nil ((888 . 889) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -888) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) 850) nil (25767 4109 693728 681000) 0 nil])
([nil nil ((#(">>>" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 910) (undo-tree-id3454 . -2) (undo-tree-id3455 . 3) (undo-tree-id3456 . -1) (undo-tree-id3457 . -3) (undo-tree-id3458 . -3)) nil (25767 4109 693705 350000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 910) (undo-tree-id3450 . 1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1)) nil (25767 4109 693700 746000) 0 nil])
([nil nil ((959 . 961)) nil (25767 4109 693695 564000) 0 nil])
([nil nil ((958 . 959) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -958) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) 911) nil (25767 4109 693690 149000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 975) (undo-tree-id3513 . -3) (undo-tree-id3514 . 4) (undo-tree-id3515 . -1) (undo-tree-id3516 . -4) (t 25767 4109 759006 166000)) nil (25767 4115 393997 501000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1042) (undo-tree-id3509 . -3) (undo-tree-id3510 . 4) (undo-tree-id3511 . -1) (undo-tree-id3512 . -4)) nil (25767 4115 393988 175000) 0 nil])
([nil nil ((1124 . 1125) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1124) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (t 25767 4115 402846 308000)) nil (25767 4159 585698 51000) 0 nil])
([nil nil ((#("Let's encode the full text so each character is represented by its ID (we
subtract 1 to get IDs from 0 to 38, rather than from 1 to 39):
[encoded] = np.array(tokenizer.texts_to_sequences([shakespeare_text])) -
1
Before we continue, we need to split the dataset into a training set, a
validation set, and a test set. We can’t just shuffle all the characters in the
text, so how do you split a sequential dataset?
How to Split a Sequential Dataset
It is very important to avoid any overlap between the training set, the
validation set, and the test set. For example, we can take the first 90% of
" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 137 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 173 174 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 174 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 176 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 177 186 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 186 199 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 199 200 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 200 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 204 210 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 210 212 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 212 284 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 284 342 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 342 364 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 364 412 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 412 446 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 446 518 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 518 592 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 592 593 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 593 594 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1121) (undo-tree-id3664 . -593) (undo-tree-id3665 . -518) (undo-tree-id3666 . -518) (undo-tree-id3667 . -3) (undo-tree-id3668 . -3) (undo-tree-id3669 . -3) (undo-tree-id3670 . -3) (undo-tree-id3671 . -3) (undo-tree-id3672 . -3) (undo-tree-id3673 . -3) (undo-tree-id3674 . -3) (undo-tree-id3675 . -3) (undo-tree-id3676 . -3) (undo-tree-id3677 . -3) (undo-tree-id3678 . -3) (undo-tree-id3679 . -3) (undo-tree-id3680 . -3) (undo-tree-id3681 . -3) (undo-tree-id3682 . -3) (undo-tree-id3683 . -3) (undo-tree-id3684 . -3) (undo-tree-id3685 . -3) (undo-tree-id3686 . -3) (undo-tree-id3687 . -3) (undo-tree-id3688 . -3) (undo-tree-id3689 . -3) (undo-tree-id3690 . -3) (undo-tree-id3691 . -3) (undo-tree-id3692 . -3) (undo-tree-id3693 . -3) (undo-tree-id3694 . -3) (undo-tree-id3695 . -3) (undo-tree-id3696 . -3) (undo-tree-id3697 . -3) (undo-tree-id3698 . -3) (undo-tree-id3699 . -3) (undo-tree-id3700 . -3) (undo-tree-id3701 . -3) (undo-tree-id3702 . -3) (undo-tree-id3703 . -3) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -518) (undo-tree-id3708 . -3) (undo-tree-id3709 . -3) (undo-tree-id3710 . -3) (undo-tree-id3711 . -3) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -3) (undo-tree-id3718 . -3) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) (undo-tree-id3724 . -73) (undo-tree-id3725 . 520) (undo-tree-id3726 . 521) (undo-tree-id3727 . -594) (undo-tree-id3728 . -518) (undo-tree-id3729 . -74) (undo-tree-id3730 . -74) (undo-tree-id3731 . -74) (undo-tree-id3732 . -74) (undo-tree-id3733 . -74) (undo-tree-id3734 . -74) (undo-tree-id3735 . -137) (undo-tree-id3736 . -137) (undo-tree-id3737 . -137) (undo-tree-id3738 . -137) (undo-tree-id3739 . -137) (undo-tree-id3740 . -137) (undo-tree-id3741 . -137) (undo-tree-id3742 . -137) (undo-tree-id3743 . -137) (undo-tree-id3744 . -137) (undo-tree-id3745 . -137) (undo-tree-id3746 . -210) (undo-tree-id3747 . -210) (undo-tree-id3748 . -210) (undo-tree-id3749 . -210) (undo-tree-id3750 . -210) (undo-tree-id3751 . -210) (undo-tree-id3752 . -210) (undo-tree-id3753 . -210) (undo-tree-id3754 . -210) (undo-tree-id3755 . -210) (undo-tree-id3756 . -210) (undo-tree-id3757 . -212) (undo-tree-id3758 . -212) (undo-tree-id3759 . -212) (undo-tree-id3760 . -212) (undo-tree-id3761 . -212) (undo-tree-id3762 . -212) (undo-tree-id3763 . -284) (undo-tree-id3764 . -284) (undo-tree-id3765 . -284) (undo-tree-id3766 . -284) (undo-tree-id3767 . -284) (undo-tree-id3768 . -284) (undo-tree-id3769 . -284) (undo-tree-id3770 . -284) (undo-tree-id3771 . -284) (undo-tree-id3772 . -284) (undo-tree-id3773 . -284) (undo-tree-id3774 . -284) (undo-tree-id3775 . -284) (undo-tree-id3776 . -284) (undo-tree-id3777 . -284) (undo-tree-id3778 . -284) (undo-tree-id3779 . -360) (undo-tree-id3780 . -360) (undo-tree-id3781 . -360) (undo-tree-id3782 . -360) (undo-tree-id3783 . -360) (undo-tree-id3784 . -360) (undo-tree-id3785 . -360) (undo-tree-id3786 . -360) (undo-tree-id3787 . -360) (undo-tree-id3788 . -360) (undo-tree-id3789 . -360) (undo-tree-id3790 . -360) (undo-tree-id3791 . -360) (undo-tree-id3792 . -360) (undo-tree-id3793 . -360) (undo-tree-id3794 . -360) (undo-tree-id3795 . -364) (undo-tree-id3796 . -364) (undo-tree-id3797 . -364) (undo-tree-id3798 . -364) (undo-tree-id3799 . -364) (undo-tree-id3800 . -364) (undo-tree-id3801 . -364) (undo-tree-id3802 . -364) (undo-tree-id3803 . -412) (undo-tree-id3804 . -412) (undo-tree-id3805 . -412) (undo-tree-id3806 . -412) (undo-tree-id3807 . -412) (undo-tree-id3808 . -412) (undo-tree-id3809 . -446) (undo-tree-id3810 . -446) (undo-tree-id3811 . -446) (undo-tree-id3812 . -446) (undo-tree-id3813 . -446) (undo-tree-id3814 . -446) (undo-tree-id3815 . -518) (undo-tree-id3816 . -518) (undo-tree-id3817 . -518) (undo-tree-id3818 . -518) (undo-tree-id3819 . -518) (undo-tree-id3820 . -518) (undo-tree-id3821 . -518) (undo-tree-id3822 . -594) 1639 (t 25767 4159 645758 706000)) nil (25767 4214 885013 497000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -651) (undo-tree-id3654 . -2) (undo-tree-id3655 . -2) (undo-tree-id3656 . -2) (undo-tree-id3657 . -2) (undo-tree-id3658 . -2) (undo-tree-id3659 . -2) (undo-tree-id3660 . -2) (undo-tree-id3661 . -2) (undo-tree-id3662 . -2) (undo-tree-id3663 . -2) 653 (650 . 653) 585) nil (25767 4214 884887 935000) 0 nil])
([nil nil ((nil rear-nonsticky nil 651 . 652) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1245) (651 . 1246)) nil (25767 4214 884877 555000) 0 nil])
([nil nil ((651 . 653)) nil (25767 4214 884875 934000) 0 nil])
([nil nil ((652 . 653) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 652) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -653) (undo-tree-id3639 . -1) (undo-tree-id3640 . 1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) 652) nil (25767 4214 885402 223000) 0 nil])
([nil nil ((#("- Let's encode the full text so each character is represented by its ID (we
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 651) (undo-tree-id3901 . -75) (undo-tree-id3902 . 74) (undo-tree-id3903 . -2) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -2) (undo-tree-id3952 . -2) (undo-tree-id3953 . -2) (undo-tree-id3954 . -2) (undo-tree-id3955 . -2) (undo-tree-id3956 . -2) (undo-tree-id3957 . -2) (undo-tree-id3958 . -2) (undo-tree-id3959 . -2) (undo-tree-id3960 . -2) (undo-tree-id3961 . -2) (undo-tree-id3962 . -2) (undo-tree-id3963 . -2) (undo-tree-id3964 . -2) (undo-tree-id3965 . -2) (undo-tree-id3966 . -2) (undo-tree-id3967 . -2) (undo-tree-id3968 . -2) (undo-tree-id3969 . -2) (undo-tree-id3970 . -2) (undo-tree-id3971 . -2) (undo-tree-id3972 . -2) (undo-tree-id3973 . -2) (undo-tree-id3974 . -2) (undo-tree-id3975 . -76) 653) nil (25767 4234 815845 886000) 0 nil] [nil nil ((#("- Let's encode the full text so each character is represented by its ID (we
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 651) (undo-tree-id3557 . -75) (undo-tree-id3558 . 74) (undo-tree-id3559 . -2) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -2) (undo-tree-id3608 . -2) (undo-tree-id3609 . -2) (undo-tree-id3610 . -2) (undo-tree-id3611 . -2) (undo-tree-id3612 . -2) (undo-tree-id3613 . -2) (undo-tree-id3614 . -2) (undo-tree-id3615 . -2) (undo-tree-id3616 . -76) 653) ((651 . 727)) (25767 4214 884840 410000) 0 nil])
([nil nil ((#("subtract 1 to get IDs from 0 to 38, rather than from 1 to 39):
[encoded] = np.array(tokenizer.texts_to_sequences([shakespeare_text])) -
1
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 63 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 99 100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 100 102 (display ((raise -0.3) (height 0.7)) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 103 112 (display ((raise -0.3) (height 0.7)) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 112 125 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 125 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 126 130 (display ((raise -0.3) (height 0.7)) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 130 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 136 138 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id3861 . -137) (undo-tree-id3862 . -136) (undo-tree-id3863 . -136) (undo-tree-id3864 . 138) (undo-tree-id3865 . -136) (undo-tree-id3866 . -2) (undo-tree-id3867 . -2) (undo-tree-id3868 . -2) (undo-tree-id3869 . -2) (undo-tree-id3870 . -2) (undo-tree-id3871 . -2) (undo-tree-id3872 . -2) (undo-tree-id3873 . -2) (undo-tree-id3874 . -2) (undo-tree-id3875 . -138) (undo-tree-id3876 . -136) (undo-tree-id3877 . -63) (undo-tree-id3878 . -63) (undo-tree-id3879 . -63) (undo-tree-id3880 . -63) (undo-tree-id3881 . -63) (undo-tree-id3882 . -63) (undo-tree-id3883 . -63) (undo-tree-id3884 . -63) (undo-tree-id3885 . -63) (undo-tree-id3886 . -63) (undo-tree-id3887 . -63) (undo-tree-id3888 . -136) (undo-tree-id3889 . -136) (undo-tree-id3890 . -136) (undo-tree-id3891 . -136) (undo-tree-id3892 . -136) (undo-tree-id3893 . -136) (undo-tree-id3894 . -136) (undo-tree-id3895 . -136) (undo-tree-id3896 . -136) (undo-tree-id3897 . -136) (undo-tree-id3898 . -136) (undo-tree-id3899 . -136) (undo-tree-id3900 . -138) 787) nil (25767 4234 815682 942000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1492 . 1493) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1630) (1492 . 1631) 1424) nil (25767 4234 815656 331000) 0 nil])
([nil nil ((1493 . 1494)) nil (25767 4234 815654 635000) 0 nil])
([nil nil ((1629 . 1630) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -1629) (undo-tree-id3860 . -1) 1557) nil (25767 4234 815653 586000) 0 nil])
([nil nil ((#("#subtract 1 to get IDs from 0 to 38, rather than from 1 to 39):
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 2 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 23 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 27 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 41 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 49 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 53 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 61 62 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 62 64 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 1493) (undo-tree-id3823 . -63) (undo-tree-id3824 . 63) (undo-tree-id3825 . -62) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -64) (undo-tree-id3834 . -64) (undo-tree-id3835 . -64) (undo-tree-id3836 . -64) (undo-tree-id3837 . -64) (undo-tree-id3838 . -64) (undo-tree-id3839 . -64) (undo-tree-id3840 . -64) (undo-tree-id3841 . -64) (undo-tree-id3842 . -64) (undo-tree-id3843 . -64) (undo-tree-id3844 . -64) (undo-tree-id3845 . -62) (undo-tree-id3846 . -62) (undo-tree-id3847 . -62) (undo-tree-id3848 . -62) (undo-tree-id3849 . -62) (undo-tree-id3850 . -62) (undo-tree-id3851 . -62) (undo-tree-id3852 . -62) (undo-tree-id3853 . -62) (undo-tree-id3854 . -62) (undo-tree-id3855 . -62) (undo-tree-id3856 . -62) (undo-tree-id3857 . -62) (undo-tree-id3858 . -62) (undo-tree-id3859 . -64) 1555) nil (25767 4234 815650 317000) 0 nil])
([nil nil ((1493 . 1494) (1492 . 1493) 1486) nil (25767 4234 815613 88000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1494 . 1495) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1558) (1494 . 1559)) nil (25767 4234 815610 310000) 0 nil])
([nil nil ((1356 . 1357) 1292) nil (25767 4234 815605 154000) 0 nil])
([nil nil ((1123 . 1124) (t 25767 4234 884484 162000) 1069) nil (25767 4240 478222 831000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1124) (undo-tree-id3976 . 1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1)) nil (25767 4240 478220 225000) 0 nil])
([nil nil ((1068 . 1069) 1034) nil (25767 4240 478203 553000) 0 nil])
([nil nil ((1231 . 1232) (t 25767 4240 492413 755000) 1189) nil (25767 4244 256881 210000) 0 nil])
([nil nil ((#("Before we continue, we need to split the dataset into a training set, a
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id4035 . -71) (undo-tree-id4036 . 72) (undo-tree-id4037 . -72) (undo-tree-id4038 . -72) (undo-tree-id4039 . -72) (undo-tree-id4040 . -72) (undo-tree-id4041 . -72) (undo-tree-id4042 . -72) (undo-tree-id4043 . -72) (t 25767 4244 276367 960000)) nil (25767 4272 537373 205000) 0 nil])
([nil nil ((#("validation set, and a test set. We can’t just shuffle all the characters in the
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 58 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id4020 . -79) (undo-tree-id4021 . 80) (undo-tree-id4022 . -80) (undo-tree-id4023 . -80) (undo-tree-id4024 . -80) (undo-tree-id4025 . -80) (undo-tree-id4026 . -80) (undo-tree-id4027 . -80) (undo-tree-id4028 . -76) (undo-tree-id4029 . -76) (undo-tree-id4030 . -76) (undo-tree-id4031 . -76) (undo-tree-id4032 . -76) (undo-tree-id4033 . -76) (undo-tree-id4034 . -80)) nil (25767 4272 537365 177000) 0 nil])
([nil nil ((#("text, so how do you split a sequential dataset?
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id4011 . -47) (undo-tree-id4012 . 48) (undo-tree-id4013 . -48) (undo-tree-id4014 . -48) (undo-tree-id4015 . -48) (undo-tree-id4016 . -48) (undo-tree-id4017 . -48) (undo-tree-id4018 . -48) (undo-tree-id4019 . -48)) nil (25767 4272 537353 809000) 0 nil])
([nil nil ((#("How to Split a Sequential Dataset
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id4002 . -33) (undo-tree-id4003 . 34) (undo-tree-id4004 . -34) (undo-tree-id4005 . -34) (undo-tree-id4006 . -34) (undo-tree-id4007 . -34) (undo-tree-id4008 . -34) (undo-tree-id4009 . -34) (undo-tree-id4010 . -34)) nil (25767 4272 537346 851000) 0 nil])
([nil nil ((#("It is very important to avoid any overlap between the training set, the
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 53 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id3993 . -71) (undo-tree-id3994 . 72) (undo-tree-id3995 . -72) (undo-tree-id3996 . -72) (undo-tree-id3997 . -72) (undo-tree-id3998 . -72) (undo-tree-id3999 . -72) (undo-tree-id4000 . -72) (undo-tree-id4001 . -72)) nil (25767 4279 464206 483000) 0 nil])
([nil nil ((#("validation set, and the test set. For example, we can take the first 90% of
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 74 75 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 75 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 651) (undo-tree-id4044 . 76) (undo-tree-id4045 . -76) (undo-tree-id4046 . -76) (undo-tree-id4047 . -76) (undo-tree-id4048 . -76) (undo-tree-id4049 . -76) (undo-tree-id4050 . -76)) ((651 . 727) (t 25767 4272 556067 564000)) (25767 4281 660633 173000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs
" 0 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 276) (undo-tree-id4204 . -34) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -35) 277 (t 25767 4272 556067 564000)) nil (25767 4311 855593 80000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 405) (undo-tree-id4175 . -9) (undo-tree-id4176 . -1) (undo-tree-id4177 . -10) (undo-tree-id4178 . -10) (undo-tree-id4179 . -10) (undo-tree-id4180 . -10) (undo-tree-id4181 . -10) (undo-tree-id4182 . -10) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -10) 406) nil (25767 4311 855553 438000) 0 nil])
([nil nil ((#(" filepath = keras.utils.get_file(\"shakespeare.txt\", shakespeare_url)
 with open(filepath) as f:
     shakespeare_text = f.read()
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 2 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 9 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 28 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 33 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 50 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 64 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 67 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 68 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 69 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 70 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 74 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 75 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 79 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 80 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 88 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 89 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 90 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 92 96 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t) 96 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t) 101 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t) 112 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t invisible t) 113 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t display ((raise -0.3) (height 0.7))) 117 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t) 126 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t) 127 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t) 128 129 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t)) . 276) (undo-tree-id4051 . -128) (undo-tree-id4052 . -97) (undo-tree-id4053 . -1) (undo-tree-id4054 . -97) (undo-tree-id4055 . -97) (undo-tree-id4056 . -129) (undo-tree-id4057 . -129) (undo-tree-id4058 . -129) (undo-tree-id4059 . -129) (undo-tree-id4060 . -129) (undo-tree-id4061 . -129) (undo-tree-id4062 . -129) (undo-tree-id4063 . -129) (undo-tree-id4064 . -129) (undo-tree-id4065 . -129) (undo-tree-id4066 . -129) (undo-tree-id4067 . -129) (undo-tree-id4068 . -97) (undo-tree-id4069 . -97) (undo-tree-id4070 . -97) (undo-tree-id4071 . -97) (undo-tree-id4072 . -97) (undo-tree-id4073 . -97) (undo-tree-id4074 . -70) (undo-tree-id4075 . -70) (undo-tree-id4076 . -70) (undo-tree-id4077 . -70) (undo-tree-id4078 . -70) (undo-tree-id4079 . -70) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -68) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -70) (undo-tree-id4101 . -70) (undo-tree-id4102 . -70) (undo-tree-id4103 . -70) (undo-tree-id4104 . -70) (undo-tree-id4105 . -70) (undo-tree-id4106 . -97) (undo-tree-id4107 . -97) (undo-tree-id4108 . -97) (undo-tree-id4109 . -97) (undo-tree-id4110 . -97) (undo-tree-id4111 . -97) (undo-tree-id4112 . -129) (undo-tree-id4113 . -129) (undo-tree-id4114 . -129) (undo-tree-id4115 . -129) (undo-tree-id4116 . -129) (undo-tree-id4117 . -129) (undo-tree-id4118 . -129) (undo-tree-id4119 . -129) (undo-tree-id4120 . -129) (undo-tree-id4121 . -129) (undo-tree-id4122 . -129) (undo-tree-id4123 . -129) (undo-tree-id4124 . -129) (undo-tree-id4125 . -97) (undo-tree-id4126 . -97) (undo-tree-id4127 . -97) (undo-tree-id4128 . -97) (undo-tree-id4129 . -97) (undo-tree-id4130 . -97) (undo-tree-id4131 . -70) (undo-tree-id4132 . -70) (undo-tree-id4133 . -70) (undo-tree-id4134 . -70) (undo-tree-id4135 . -70) (undo-tree-id4136 . -70) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -129) (undo-tree-id4144 . 128) (undo-tree-id4145 . -9) (undo-tree-id4146 . -1) (undo-tree-id4147 . -97) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -70) (undo-tree-id4162 . -70) (undo-tree-id4163 . -70) (undo-tree-id4164 . -70) (undo-tree-id4165 . -70) (undo-tree-id4166 . -70) (undo-tree-id4167 . -97) (undo-tree-id4168 . -97) (undo-tree-id4169 . -97) (undo-tree-id4170 . -97) (undo-tree-id4171 . -97) (undo-tree-id4172 . -97) (undo-tree-id4173 . -97) (undo-tree-id4174 . -129) 373) nil (25767 4311 855527 8000) 0 nil])
([nil nil ((513 . 514) (512 . 513) 479) nil (25767 4311 855244 747000) 0 nil])
([nil nil ((nil rear-nonsticky nil 515 . 516) (#("
" 0 1 (rear-nonsticky t font-lock-fontified t src-block t fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)))) . -643) (514 . 644)) nil (25767 4311 855238 633000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 514) (undo-tree-id4227 . -1) (t 25767 4311 871761 707000)) nil (25767 4313 671728 976000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 1071) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (t 25767 4313 683750 476000)) nil (25767 4338 646174 405000) 0 nil])
([nil nil ((1220 . 1221) (1219 . 1220) (t 25767 4338 663619 156000) 1210) nil (25767 4341 305177 431000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 1221) (undo-tree-id4259 . 1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (t 25767 4341 323607 664000)) nil (25767 4372 354605 713000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1928 . 1929) (nil fontified nil 1856 . 1929) (nil fontified nil 1782 . 1856) (nil fontified nil 1709 . 1782) (nil fontified nil 1633 . 1709) (nil fontified nil 1627 . 1633) (nil fontified nil 1554 . 1627) (nil fontified nil 1483 . 1554) (nil fontified nil 1403 . 1483) (nil fontified nil 1327 . 1403) (nil fontified nil 1255 . 1327) (nil fontified nil 1221 . 1255) (1221 . 1929)) nil (25767 4372 354601 605000) 0 nil])
([nil nil ((1221 . 1223)) nil (25767 4372 354598 383000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1868) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1867 . 1868) (1867 . 1868) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1799) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1798 . 1799) (1798 . 1799) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1721) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1720 . 1721) (1720 . 1721) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1641) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1640 . 1641) (1640 . 1641) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1564) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1563 . 1564) (1563 . 1564) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1485) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1484 . 1485) (1484 . 1485) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1409) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1408 . 1409) (1408 . 1409) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1329) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 1328 . 1329) (1328 . 1329) (1858 . 1859) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1858) (1784 . 1785) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1784) (1711 . 1712) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1711) (1635 . 1636) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 1635) (1628 . 1629) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1628) (1555 . 1556) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1555) (1484 . 1485) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1484) (1404 . 1405) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1404) (1328 . 1329) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1328) (1634 . 1635) 1858) nil (25767 4372 354592 898000) 0 nil])
([nil nil ((1932 . 1933)) nil (25767 4372 354562 654000) 0 nil])
([nil nil ((1257 . 1259) (#("It is very important to" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1257) (undo-tree-id5023 . -22) (undo-tree-id5024 . -22) (undo-tree-id5025 . -22) (undo-tree-id5026 . -23) (undo-tree-id5027 . -22) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -4) (undo-tree-id5035 . -4) (undo-tree-id5036 . -4) (undo-tree-id5037 . -4) (undo-tree-id5038 . -4) (undo-tree-id5039 . -4) (undo-tree-id5040 . -9) (undo-tree-id5041 . -9) (undo-tree-id5042 . -9) (undo-tree-id5043 . -9) (undo-tree-id5044 . -9) (undo-tree-id5045 . -9) (undo-tree-id5046 . -19) (undo-tree-id5047 . -19) (undo-tree-id5048 . -19) (undo-tree-id5049 . -19) (undo-tree-id5050 . -19) (undo-tree-id5051 . -19) (undo-tree-id5052 . -22) (undo-tree-id5053 . -22) (undo-tree-id5054 . -22) (undo-tree-id5055 . -22) (undo-tree-id5056 . -22) (undo-tree-id5057 . -22) (undo-tree-id5058 . -22) (undo-tree-id5059 . -23) (undo-tree-id5060 . -23) (undo-tree-id5061 . -23) 1279 (t 25767 4372 371506 373000)) nil (25767 4434 620872 871000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1259) (undo-tree-id5019 . 1) (undo-tree-id5020 . 1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1)) nil (25767 4434 620825 799000) 0 nil])
([nil nil ((1259 . 1260) (#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1259)) nil (25767 4434 620820 882000) 0 nil])
([nil nil ((1306 . 1307) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1306) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) 1266) nil (25767 4434 620819 71000) 0 nil])
([nil nil ((1297 . 1298) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1297) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) 1298 (#("set, the" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1298) (undo-tree-id4882 . -7) (undo-tree-id4883 . -7) (undo-tree-id4884 . -8) (undo-tree-id4885 . -8) (undo-tree-id4886 . -8) (undo-tree-id4887 . -8) (undo-tree-id4888 . -8) (undo-tree-id4889 . -8) (undo-tree-id4890 . -7) (undo-tree-id4891 . -2) (undo-tree-id4892 . -3) (undo-tree-id4893 . -7) (undo-tree-id4894 . -8) (undo-tree-id4895 . -8) (undo-tree-id4896 . -8) (undo-tree-id4897 . -8) (undo-tree-id4898 . -8) (undo-tree-id4899 . -8) (undo-tree-id4900 . -8) (undo-tree-id4901 . -8) (undo-tree-id4902 . -8) (undo-tree-id4903 . -8) (undo-tree-id4904 . -8) (undo-tree-id4905 . -8) (undo-tree-id4906 . -8) (undo-tree-id4907 . -8) (undo-tree-id4908 . -8) (undo-tree-id4909 . -8) (undo-tree-id4910 . -5) (undo-tree-id4911 . -5) (undo-tree-id4912 . -5) (undo-tree-id4913 . -5) (undo-tree-id4914 . -5) (undo-tree-id4915 . -5) (undo-tree-id4916 . -5) (undo-tree-id4917 . -5) (undo-tree-id4918 . -5) (undo-tree-id4919 . -5) (undo-tree-id4920 . -5) (undo-tree-id4921 . -3) (undo-tree-id4922 . -3) (undo-tree-id4923 . -3) (undo-tree-id4924 . -3) (undo-tree-id4925 . -3) (undo-tree-id4926 . -3) (undo-tree-id4927 . -3) (undo-tree-id4928 . -3) (undo-tree-id4929 . -3) (undo-tree-id4930 . -3) (undo-tree-id4931 . -3) (undo-tree-id4932 . -3) (undo-tree-id4933 . -3) (undo-tree-id4934 . -3) (undo-tree-id4935 . -3) (undo-tree-id4936 . -3) (undo-tree-id4937 . -3) (undo-tree-id4938 . -3) (undo-tree-id4939 . -3) (undo-tree-id4940 . -3) (undo-tree-id4941 . -3) (undo-tree-id4942 . -3) (undo-tree-id4943 . -3) (undo-tree-id4944 . -3) (undo-tree-id4945 . -3) (undo-tree-id4946 . -3) (undo-tree-id4947 . -3) (undo-tree-id4948 . -8) (undo-tree-id4949 . -7) (undo-tree-id4950 . -2) (undo-tree-id4951 . -2) (undo-tree-id4952 . -2) (undo-tree-id4953 . -2) (undo-tree-id4954 . -2) (undo-tree-id4955 . -2) (undo-tree-id4956 . -2) (undo-tree-id4957 . -2) (undo-tree-id4958 . -2) (undo-tree-id4959 . -2) (undo-tree-id4960 . -2) (undo-tree-id4961 . -2) (undo-tree-id4962 . -2) (undo-tree-id4963 . -2) (undo-tree-id4964 . -2) (undo-tree-id4965 . -2) (undo-tree-id4966 . -3) (undo-tree-id4967 . -3) (undo-tree-id4968 . -3) (undo-tree-id4969 . -3) (undo-tree-id4970 . -3) (undo-tree-id4971 . -3) (undo-tree-id4972 . -3) (undo-tree-id4973 . -3) (undo-tree-id4974 . -3) (undo-tree-id4975 . -3) (undo-tree-id4976 . -3) (undo-tree-id4977 . -3) (undo-tree-id4978 . -3) (undo-tree-id4979 . -3) (undo-tree-id4980 . -3) (undo-tree-id4981 . -3) (undo-tree-id4982 . -7) (undo-tree-id4983 . -7) (undo-tree-id4984 . -7) (undo-tree-id4985 . -7) (undo-tree-id4986 . -7) (undo-tree-id4987 . -7) (undo-tree-id4988 . -7) (undo-tree-id4989 . -7) (undo-tree-id4990 . -7) (undo-tree-id4991 . -7) (undo-tree-id4992 . -7) (undo-tree-id4993 . -7) (undo-tree-id4994 . -7) (undo-tree-id4995 . -7) (undo-tree-id4996 . -7) (undo-tree-id4997 . -7) (undo-tree-id4998 . -7) (undo-tree-id4999 . -7) (undo-tree-id5000 . -7) (undo-tree-id5001 . -7) (undo-tree-id5002 . -7) (undo-tree-id5003 . -7) (undo-tree-id5004 . -7) (undo-tree-id5005 . -7) (undo-tree-id5006 . -7) (undo-tree-id5007 . -7) (undo-tree-id5008 . -7) (undo-tree-id5009 . -8) (undo-tree-id5010 . -8) (undo-tree-id5011 . -8) 1305) nil (25767 4434 620795 736000) 0 nil])
([nil nil ((#("set," 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1310) (undo-tree-id4632 . -3) (undo-tree-id4633 . -3) (undo-tree-id4634 . -3) (undo-tree-id4635 . -4) (undo-tree-id4636 . -3) (undo-tree-id4637 . -2) (undo-tree-id4638 . -2) (undo-tree-id4639 . -2) (undo-tree-id4640 . -2) (undo-tree-id4641 . -2) (undo-tree-id4642 . -2) (undo-tree-id4643 . -2) (undo-tree-id4644 . -2) (undo-tree-id4645 . -2) (undo-tree-id4646 . -2) (undo-tree-id4647 . -2) (undo-tree-id4648 . -2) (undo-tree-id4649 . -2) (undo-tree-id4650 . -2) (undo-tree-id4651 . -2) (undo-tree-id4652 . -2) (undo-tree-id4653 . -3) (undo-tree-id4654 . -3) (undo-tree-id4655 . -3) (undo-tree-id4656 . -3) (undo-tree-id4657 . -3) (undo-tree-id4658 . -3) (undo-tree-id4659 . -3) (undo-tree-id4660 . -3) (undo-tree-id4661 . -3) (undo-tree-id4662 . -3) (undo-tree-id4663 . -3) (undo-tree-id4664 . -3) (undo-tree-id4665 . -3) (undo-tree-id4666 . -3) (undo-tree-id4667 . -3) (undo-tree-id4668 . -3) (undo-tree-id4669 . -3) (undo-tree-id4670 . -4) (undo-tree-id4671 . -4) (undo-tree-id4672 . -4) 1313) nil (25767 4434 620342 413000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1309) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1)) nil (25767 4434 620312 345000) 0 nil])
([nil nil ((1329 . 1331) (1328 . 1329) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1328) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . 1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) 1329 (1328 . 1329)) nil (25767 4434 620250 192000) 0 nil])
([nil nil ((#("For example, we can take the first 90% of the
text for the training set, then the next 5% for the validation set, and the
final 5% for the test set. It would also be a good idea to" 0 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 42 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 45 46 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 46 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 121 122 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 122 180 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1331) (undo-tree-id4279 . -179) (undo-tree-id4280 . -179) (undo-tree-id4281 . 180) (undo-tree-id4282 . -122) (undo-tree-id4283 . -122) (undo-tree-id4284 . -122) (undo-tree-id4285 . -122) (undo-tree-id4286 . -122) (undo-tree-id4287 . -122) (undo-tree-id4288 . -179) (undo-tree-id4289 . -180) (undo-tree-id4290 . -179) (undo-tree-id4291 . -2) (undo-tree-id4292 . -10) (undo-tree-id4293 . -11) (undo-tree-id4294 . -14) (undo-tree-id4295 . -18) (undo-tree-id4296 . -23) (undo-tree-id4297 . -27) (undo-tree-id4298 . -33) (undo-tree-id4299 . -37) (undo-tree-id4300 . -40) (undo-tree-id4301 . -44) (undo-tree-id4302 . -49) (undo-tree-id4303 . -49) (undo-tree-id4304 . -49) (undo-tree-id4305 . -49) (undo-tree-id4306 . -49) (undo-tree-id4307 . -49) (undo-tree-id4308 . -53) (undo-tree-id4309 . -53) (undo-tree-id4310 . -53) (undo-tree-id4311 . -53) (undo-tree-id4312 . -53) (undo-tree-id4313 . -53) (undo-tree-id4314 . -57) (undo-tree-id4315 . -57) (undo-tree-id4316 . -57) (undo-tree-id4317 . -57) (undo-tree-id4318 . -57) (undo-tree-id4319 . -57) (undo-tree-id4320 . -66) (undo-tree-id4321 . -66) (undo-tree-id4322 . -66) (undo-tree-id4323 . -66) (undo-tree-id4324 . -66) (undo-tree-id4325 . -66) (undo-tree-id4326 . -70) (undo-tree-id4327 . -70) (undo-tree-id4328 . -70) (undo-tree-id4329 . -70) (undo-tree-id4330 . -70) (undo-tree-id4331 . -70) (undo-tree-id4332 . -71) (undo-tree-id4333 . -71) (undo-tree-id4334 . -71) (undo-tree-id4335 . -71) (undo-tree-id4336 . -71) (undo-tree-id4337 . -71) (undo-tree-id4338 . -76) (undo-tree-id4339 . -76) (undo-tree-id4340 . -76) (undo-tree-id4341 . -76) (undo-tree-id4342 . -76) (undo-tree-id4343 . -76) (undo-tree-id4344 . -80) (undo-tree-id4345 . -80) (undo-tree-id4346 . -80) (undo-tree-id4347 . -80) (undo-tree-id4348 . -80) (undo-tree-id4349 . -80) (undo-tree-id4350 . -85) (undo-tree-id4351 . -85) (undo-tree-id4352 . -85) (undo-tree-id4353 . -85) (undo-tree-id4354 . -85) (undo-tree-id4355 . -85) (undo-tree-id4356 . -88) (undo-tree-id4357 . -88) (undo-tree-id4358 . -88) (undo-tree-id4359 . -88) (undo-tree-id4360 . -88) (undo-tree-id4361 . -88) (undo-tree-id4362 . -92) (undo-tree-id4363 . -92) (undo-tree-id4364 . -92) (undo-tree-id4365 . -92) (undo-tree-id4366 . -92) (undo-tree-id4367 . -92) (undo-tree-id4368 . -96) (undo-tree-id4369 . -96) (undo-tree-id4370 . -96) (undo-tree-id4371 . -96) (undo-tree-id4372 . -96) (undo-tree-id4373 . -96) (undo-tree-id4374 . -107) (undo-tree-id4375 . -107) (undo-tree-id4376 . -107) (undo-tree-id4377 . -107) (undo-tree-id4378 . -107) (undo-tree-id4379 . -107) (undo-tree-id4380 . -111) (undo-tree-id4381 . -111) (undo-tree-id4382 . -111) (undo-tree-id4383 . -111) (undo-tree-id4384 . -111) (undo-tree-id4385 . -111) (undo-tree-id4386 . -112) (undo-tree-id4387 . -112) (undo-tree-id4388 . -112) (undo-tree-id4389 . -112) (undo-tree-id4390 . -112) (undo-tree-id4391 . -112) (undo-tree-id4392 . -116) (undo-tree-id4393 . -116) (undo-tree-id4394 . -116) (undo-tree-id4395 . -116) (undo-tree-id4396 . -116) (undo-tree-id4397 . -116) (undo-tree-id4398 . -120) (undo-tree-id4399 . -120) (undo-tree-id4400 . -120) (undo-tree-id4401 . -120) (undo-tree-id4402 . -120) (undo-tree-id4403 . -120) (undo-tree-id4404 . -126) (undo-tree-id4405 . -126) (undo-tree-id4406 . -126) (undo-tree-id4407 . -126) (undo-tree-id4408 . -126) (undo-tree-id4409 . -126) (undo-tree-id4410 . -129) (undo-tree-id4411 . -129) (undo-tree-id4412 . -129) (undo-tree-id4413 . -129) (undo-tree-id4414 . -129) (undo-tree-id4415 . -129) (undo-tree-id4416 . -133) (undo-tree-id4417 . -133) (undo-tree-id4418 . -133) (undo-tree-id4419 . -133) (undo-tree-id4420 . -133) (undo-tree-id4421 . -133) (undo-tree-id4422 . -137) (undo-tree-id4423 . -137) (undo-tree-id4424 . -137) (undo-tree-id4425 . -137) (undo-tree-id4426 . -137) (undo-tree-id4427 . -137) (undo-tree-id4428 . -142) (undo-tree-id4429 . -142) (undo-tree-id4430 . -142) (undo-tree-id4431 . -142) (undo-tree-id4432 . -142) (undo-tree-id4433 . -142) (undo-tree-id4434 . -146) (undo-tree-id4435 . -146) (undo-tree-id4436 . -146) (undo-tree-id4437 . -146) (undo-tree-id4438 . -146) (undo-tree-id4439 . -146) (undo-tree-id4440 . -147) (undo-tree-id4441 . -147) (undo-tree-id4442 . -147) (undo-tree-id4443 . -147) (undo-tree-id4444 . -147) (undo-tree-id4445 . -147) (undo-tree-id4446 . -150) (undo-tree-id4447 . -150) (undo-tree-id4448 . -150) (undo-tree-id4449 . -150) (undo-tree-id4450 . -150) (undo-tree-id4451 . -150) (undo-tree-id4452 . -156) (undo-tree-id4453 . -156) (undo-tree-id4454 . -156) (undo-tree-id4455 . -156) (undo-tree-id4456 . -156) (undo-tree-id4457 . -156) (undo-tree-id4458 . -161) (undo-tree-id4459 . -161) (undo-tree-id4460 . -161) (undo-tree-id4461 . -161) (undo-tree-id4462 . -161) (undo-tree-id4463 . -161) (undo-tree-id4464 . -164) (undo-tree-id4465 . -164) (undo-tree-id4466 . -164) (undo-tree-id4467 . -164) (undo-tree-id4468 . -164) (undo-tree-id4469 . -164) (undo-tree-id4470 . -166) (undo-tree-id4471 . -166) (undo-tree-id4472 . -166) (undo-tree-id4473 . -166) (undo-tree-id4474 . -166) (undo-tree-id4475 . -166) (undo-tree-id4476 . -171) (undo-tree-id4477 . -171) (undo-tree-id4478 . -171) (undo-tree-id4479 . -171) (undo-tree-id4480 . -171) (undo-tree-id4481 . -171) (undo-tree-id4482 . -176) (undo-tree-id4483 . -176) (undo-tree-id4484 . -176) (undo-tree-id4485 . -176) (undo-tree-id4486 . -176) (undo-tree-id4487 . -176) (undo-tree-id4488 . -179) (undo-tree-id4489 . -179) (undo-tree-id4490 . -179) (undo-tree-id4491 . -179) (undo-tree-id4492 . -179) (undo-tree-id4493 . -179) (undo-tree-id4494 . -180) (undo-tree-id4495 . -180) (undo-tree-id4496 . -180) (undo-tree-id4497 . -180) (undo-tree-id4498 . -180) (undo-tree-id4499 . -180) (undo-tree-id4500 . -180) (undo-tree-id4501 . -180) (undo-tree-id4502 . -180) (undo-tree-id4503 . -180) (undo-tree-id4504 . -180) (undo-tree-id4505 . -180) (undo-tree-id4506 . -180) (undo-tree-id4507 . -180) (undo-tree-id4508 . -180) (undo-tree-id4509 . -180) (undo-tree-id4510 . -180) (undo-tree-id4511 . -180) (undo-tree-id4512 . -180) (undo-tree-id4513 . -180) (undo-tree-id4514 . -178) (undo-tree-id4515 . -178) (undo-tree-id4516 . -178) (undo-tree-id4517 . -178) (undo-tree-id4518 . -178) (undo-tree-id4519 . -178) (undo-tree-id4520 . -179) (undo-tree-id4521 . -179) (undo-tree-id4522 . -179) (undo-tree-id4523 . -179) (undo-tree-id4524 . -179) (undo-tree-id4525 . -179) (undo-tree-id4526 . -179) (undo-tree-id4527 . -180) (undo-tree-id4528 . -180) (undo-tree-id4529 . -180) 1510) nil (25767 4434 620051 808000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1331) (undo-tree-id4263 . 1) (undo-tree-id4264 . 1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1)) nil (25767 4434 619045 722000) 0 nil])
([nil nil ((1331 . 1332) (#("l" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1331) (t 25767 4434 639464 534000)) nil (25767 4467 44959 791000) 0 nil])
([nil nil ((1350 . 1351) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1350) (undo-tree-id5123 . -1) 1337) nil (25767 4467 44958 23000) 0 nil])
([nil nil ((#("over two sets.  When" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 16 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1407) (undo-tree-id5109 . -19) (undo-tree-id5110 . -19) (undo-tree-id5111 . -19) (undo-tree-id5112 . -19) (undo-tree-id5113 . -19) (undo-tree-id5114 . -19) (undo-tree-id5115 . -19) (undo-tree-id5116 . -19) (undo-tree-id5117 . -19) (undo-tree-id5118 . -19) (undo-tree-id5119 . -19) (undo-tree-id5120 . -19) (undo-tree-id5121 . -20) (undo-tree-id5122 . -20)) nil (25767 4467 44955 465000) 0 nil])
([nil nil ((1408 . 1410) (1407 . 1408)) nil (25767 4467 44944 520000) 0 nil])
([nil nil ((1409 . 1410) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1409) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1410) (undo-tree-id5091 . 1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) 1409) nil (25767 4467 45195 720000) 0 nil])
([nil nil ((#("dealing with time series, you would in general split across time,: for example," 0 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1410) (undo-tree-id5553 . -78) (undo-tree-id5554 . 79) (undo-tree-id5555 . -79) (undo-tree-id5556 . -79)) nil (25767 4532 925763 894000) 0 nil] [nil nil ((#("dealing with time series, you would in general split across time,: for example," 0 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1410) (undo-tree-id5062 . -78) (undo-tree-id5063 . 79) (undo-tree-id5064 . -79) (undo-tree-id5065 . -79)) ((1410 . 1489)) (25767 4467 44904 174000) 0 nil])
([nil nil ((#("you might take the years 2000 to 2012 for the training set, the years 2013 to
" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 77 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1411) (undo-tree-id5551 . -77) (undo-tree-id5552 . -78)) nil (25767 4532 925760 781000) 0 nil])
nil
([nil nil ((#("2015 for the validation set, and the years 2016 to 2018 for the test
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 60 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 68 69 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1411) (undo-tree-id5549 . -68) (undo-tree-id5550 . -69)) nil (25767 4532 925758 321000) 0 nil])
([nil nil ((#("set. However, in some cases you may be able to split along other
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 64 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1411) (undo-tree-id5547 . -64) (undo-tree-id5548 . -65)) nil (25767 4532 925755 977000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3456 . 3457) (nil fontified nil 3404 . 3457) (nil fontified nil 3337 . 3404) (nil fontified nil 3299 . 3337) (nil fontified nil 3289 . 3299) (nil fontified nil 3216 . 3289) (nil fontified nil 3139 . 3216) (nil fontified nil 3069 . 3139) (nil fontified nil 3055 . 3069) (nil fontified nil 2977 . 3055) (nil fontified nil 2898 . 2977) (nil fontified nil 2855 . 2898) (nil fontified nil 2781 . 2855) (nil fontified nil 2701 . 2781) (nil fontified nil 2629 . 2701) (nil fontified nil 2556 . 2629) (nil fontified nil 2481 . 2556) (nil fontified nil 2410 . 2481) (nil fontified nil 2337 . 2410) (nil fontified nil 2260 . 2337) (nil fontified nil 2194 . 2260) (nil fontified nil 2123 . 2194) (nil fontified nil 2047 . 2123) (nil fontified nil 1971 . 2047) (nil fontified nil 1919 . 1971) (nil fontified nil 1847 . 1919) (nil fontified nil 1772 . 1847) (nil fontified nil 1705 . 1772) (nil fontified nil 1631 . 1705) (nil fontified nil 1554 . 1631) (nil fontified nil 1481 . 1554) (nil fontified nil 1411 . 1481) (1411 . 3457)) nil (25767 4532 925752 793000) 0 nil])
([nil nil ((#("dimensions, which will give you a longer time period to train on. For
" 0 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5545 . -69) (undo-tree-id5546 . -70)) nil (25767 4532 925744 57000) 0 nil])
([nil nil ((#("example, if you have data about the financial health of 10,000 companies
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5543 . -72) (undo-tree-id5544 . -73)) nil (25767 4532 925741 590000) 0 nil])
([nil nil ((#("from 2000 to 2018, you might be able to split this data across the different
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5541 . -76) (undo-tree-id5542 . -77)) nil (25767 4532 925739 106000) 0 nil])
([nil nil ((#("companies. It’s very likely that many of these companies will be strongly
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5539 . -73) (undo-tree-id5540 . -74)) nil (25767 4532 925736 138000) 0 nil])
([nil nil ((#("correlated, though (e.g., whole economic sectors may go up or down
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5537 . -66) (undo-tree-id5538 . -67)) nil (25767 4532 926389 921000) 0 nil])
([nil nil ((1409 . 1410) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1409) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1410) (undo-tree-id6285 . -1) (undo-tree-id6286 . 1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) 1408) nil (25767 4605 981804 556000) 0 nil] [nil nil ((#("- 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1408) (undo-tree-id5124 . -2) (undo-tree-id5125 . -3) (undo-tree-id5126 . 1) (undo-tree-id5127 . -3) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -2) (undo-tree-id5152 . -1) (undo-tree-id5153 . -2) (undo-tree-id5154 . -2) (undo-tree-id5155 . -2) (undo-tree-id5156 . -2) (undo-tree-id5157 . -2) (undo-tree-id5158 . -2) (undo-tree-id5159 . -2) (undo-tree-id5160 . -2) (undo-tree-id5161 . -2) (undo-tree-id5162 . -2) (undo-tree-id5163 . -2) (undo-tree-id5164 . -2) (undo-tree-id5165 . -2) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -3) (undo-tree-id5174 . -3) (undo-tree-id5175 . -3) (undo-tree-id5176 . -3) (undo-tree-id5177 . -3) (undo-tree-id5178 . -3) (undo-tree-id5179 . -3) (undo-tree-id5180 . -3) (undo-tree-id5181 . -3) (undo-tree-id5182 . -3) (undo-tree-id5183 . -3) (undo-tree-id5184 . -3) (undo-tree-id5185 . -3) (undo-tree-id5186 . -3) (undo-tree-id5187 . -3) (undo-tree-id5188 . -3) (undo-tree-id5189 . -3) (undo-tree-id5190 . -3) (undo-tree-id5191 . -3) (undo-tree-id5192 . -3) (undo-tree-id5193 . -3) (undo-tree-id5194 . -3) (undo-tree-id5195 . -3) (undo-tree-id5196 . -3) (undo-tree-id5197 . -3) (undo-tree-id5198 . -3) (undo-tree-id5199 . -3) (undo-tree-id5200 . -3) (undo-tree-id5201 . -3) (undo-tree-id5202 . -3) (undo-tree-id5203 . -3) (undo-tree-id5204 . -3) (undo-tree-id5205 . -3) (undo-tree-id5206 . -3) (undo-tree-id5207 . -3) (undo-tree-id5208 . -3) (undo-tree-id5209 . -3) (undo-tree-id5210 . -3) (undo-tree-id5211 . -3) (undo-tree-id5212 . -3) (undo-tree-id5213 . -3) (undo-tree-id5214 . -3) (undo-tree-id5215 . -3) (undo-tree-id5216 . -3) (undo-tree-id5217 . -3) (undo-tree-id5218 . -3) (undo-tree-id5219 . -3) (undo-tree-id5220 . -3) (undo-tree-id5221 . -3) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) (undo-tree-id5231 . -3) (undo-tree-id5232 . -3) (undo-tree-id5233 . -3) (undo-tree-id5234 . -3) (undo-tree-id5235 . -3) (undo-tree-id5236 . -3) (undo-tree-id5237 . -3) (undo-tree-id5238 . -3) (undo-tree-id5239 . -3) (undo-tree-id5240 . -3) (undo-tree-id5241 . -3) (undo-tree-id5242 . -3) (undo-tree-id5243 . -3) (undo-tree-id5244 . -3) (undo-tree-id5245 . -3) (undo-tree-id5246 . -3) (undo-tree-id5247 . -3) (undo-tree-id5248 . -3) (undo-tree-id5249 . -3) (undo-tree-id5250 . -3) (undo-tree-id5251 . -3) (undo-tree-id5252 . -3) (undo-tree-id5253 . -3) (undo-tree-id5254 . -3) (undo-tree-id5255 . -3) (undo-tree-id5256 . -3) (undo-tree-id5257 . -3) (undo-tree-id5258 . -3) (undo-tree-id5259 . -3) (undo-tree-id5260 . -3) (undo-tree-id5261 . -3) (undo-tree-id5262 . -3) (undo-tree-id5263 . -3) (undo-tree-id5264 . -3) (undo-tree-id5265 . -3) (undo-tree-id5266 . -3) (undo-tree-id5267 . -3) (undo-tree-id5268 . -3) (undo-tree-id5269 . -3) (undo-tree-id5270 . -3) (undo-tree-id5271 . -3) (undo-tree-id5272 . -3) (undo-tree-id5273 . -3) (undo-tree-id5274 . -3) (undo-tree-id5275 . -3) (undo-tree-id5276 . -3) (undo-tree-id5277 . -3) (undo-tree-id5278 . -3) (undo-tree-id5279 . -3) (undo-tree-id5280 . -3) (undo-tree-id5281 . -3) (undo-tree-id5282 . -3) (undo-tree-id5283 . -3) (undo-tree-id5284 . -3) (undo-tree-id5285 . -3) (undo-tree-id5286 . -3) (undo-tree-id5287 . -3) (undo-tree-id5288 . -3) (undo-tree-id5289 . -3) (undo-tree-id5290 . -3) (undo-tree-id5291 . -3) (undo-tree-id5292 . -3) (undo-tree-id5293 . -3) (undo-tree-id5294 . -3) (undo-tree-id5295 . -3) (undo-tree-id5296 . -3) (undo-tree-id5297 . -3) (undo-tree-id5298 . -3) (undo-tree-id5299 . -3) (undo-tree-id5300 . -3) (undo-tree-id5301 . -3) (undo-tree-id5302 . -3) (undo-tree-id5303 . -3) (undo-tree-id5304 . -3) (undo-tree-id5305 . -3) (undo-tree-id5306 . -3) (undo-tree-id5307 . -3) (undo-tree-id5308 . -3) (undo-tree-id5309 . -3) (undo-tree-id5310 . -3) (undo-tree-id5311 . -3) (undo-tree-id5312 . -3) (undo-tree-id5313 . -3) (undo-tree-id5314 . -3) (undo-tree-id5315 . -3) (undo-tree-id5316 . -3) (undo-tree-id5317 . -3) (undo-tree-id5318 . -3) (undo-tree-id5319 . -3) (undo-tree-id5320 . -3) (undo-tree-id5321 . -3) (undo-tree-id5322 . -3) (undo-tree-id5323 . -3) (undo-tree-id5324 . -3) (undo-tree-id5325 . -3) (undo-tree-id5326 . -3) (undo-tree-id5327 . -3) (undo-tree-id5328 . -3) (undo-tree-id5329 . -3) (undo-tree-id5330 . -3) (undo-tree-id5331 . -3) (undo-tree-id5332 . -3) (undo-tree-id5333 . -3) (undo-tree-id5334 . -3) (undo-tree-id5335 . -3) (undo-tree-id5336 . -3) (undo-tree-id5337 . -3) (undo-tree-id5338 . -3) (undo-tree-id5339 . -3) (undo-tree-id5340 . -3) (undo-tree-id5341 . -3) (undo-tree-id5342 . -3) (undo-tree-id5343 . -3) (undo-tree-id5344 . -3) (undo-tree-id5345 . -3) (undo-tree-id5346 . -3) (undo-tree-id5347 . -3) (undo-tree-id5348 . -3) (undo-tree-id5349 . -3) (undo-tree-id5350 . -3) (undo-tree-id5351 . -3) (undo-tree-id5352 . -3) (undo-tree-id5353 . -3) (undo-tree-id5354 . -3) (undo-tree-id5355 . -3) (undo-tree-id5356 . -3) (undo-tree-id5357 . -3) (undo-tree-id5358 . -3) (undo-tree-id5359 . -3) (undo-tree-id5360 . -3) (undo-tree-id5361 . -3) (undo-tree-id5362 . -3) (undo-tree-id5363 . -3) (undo-tree-id5364 . -3) (undo-tree-id5365 . -3) (undo-tree-id5366 . -3) (undo-tree-id5367 . -3) (undo-tree-id5368 . -3) (undo-tree-id5369 . -3) (undo-tree-id5370 . -3) (undo-tree-id5371 . -3) (undo-tree-id5372 . -3) (undo-tree-id5373 . -3) (undo-tree-id5374 . -3) (undo-tree-id5375 . -3) (undo-tree-id5376 . -3) (undo-tree-id5377 . -3) (undo-tree-id5378 . -3) (undo-tree-id5379 . -3) (undo-tree-id5380 . -3) (undo-tree-id5381 . -3) (undo-tree-id5382 . -3) (undo-tree-id5383 . -3) (undo-tree-id5384 . -3) (undo-tree-id5385 . -3) (undo-tree-id5386 . -3) (undo-tree-id5387 . -3) (undo-tree-id5388 . -3) (undo-tree-id5389 . -3) (undo-tree-id5390 . -3) (undo-tree-id5391 . -3) (undo-tree-id5392 . -3) (undo-tree-id5393 . -3) (undo-tree-id5394 . -3) (undo-tree-id5395 . -3) (undo-tree-id5396 . -3) (undo-tree-id5397 . -3) (undo-tree-id5398 . -3) (undo-tree-id5399 . -3) (undo-tree-id5400 . -3) (undo-tree-id5401 . -3) (undo-tree-id5402 . -3) (undo-tree-id5403 . -3) (undo-tree-id5404 . -3) (undo-tree-id5405 . -3) (undo-tree-id5406 . -3) (undo-tree-id5407 . -3) (undo-tree-id5408 . -3) (undo-tree-id5409 . -3) (undo-tree-id5410 . -3) (undo-tree-id5411 . -3) (undo-tree-id5412 . -3) (undo-tree-id5413 . -3) (undo-tree-id5414 . -3) (undo-tree-id5415 . -3) (undo-tree-id5416 . -3) (undo-tree-id5417 . -3) (undo-tree-id5418 . -3) (undo-tree-id5419 . -3) (undo-tree-id5420 . -3) (undo-tree-id5421 . -3) (undo-tree-id5422 . -3) (undo-tree-id5423 . -3) (undo-tree-id5424 . -3) (undo-tree-id5425 . -3) (undo-tree-id5426 . -3) (undo-tree-id5427 . -3) (undo-tree-id5428 . -3) (undo-tree-id5429 . -3) (undo-tree-id5430 . -3) (undo-tree-id5431 . -3) (undo-tree-id5432 . -3) (undo-tree-id5433 . -3) (undo-tree-id5434 . -3) (undo-tree-id5435 . -3) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -3) (undo-tree-id5443 . -3) (undo-tree-id5444 . -3) (undo-tree-id5445 . -3) (undo-tree-id5446 . -3) (undo-tree-id5447 . -3) (undo-tree-id5448 . -3) (undo-tree-id5449 . -3) (undo-tree-id5450 . -3) (undo-tree-id5451 . -3) (undo-tree-id5452 . -3) (undo-tree-id5453 . -3) (undo-tree-id5454 . -3) (undo-tree-id5455 . -3) (undo-tree-id5456 . -3) (undo-tree-id5457 . -3) (undo-tree-id5458 . -3) (undo-tree-id5459 . -3) (undo-tree-id5460 . -3) (undo-tree-id5461 . -3) (undo-tree-id5462 . -3) (undo-tree-id5463 . -3) (undo-tree-id5464 . -3) (undo-tree-id5465 . -3) (undo-tree-id5466 . -3) (undo-tree-id5467 . -3) (undo-tree-id5468 . -3) (undo-tree-id5469 . -3) (undo-tree-id5470 . -3) (undo-tree-id5471 . -3) (undo-tree-id5472 . -3) (undo-tree-id5473 . -3) (undo-tree-id5474 . -3) (undo-tree-id5475 . -3) (undo-tree-id5476 . -3) (undo-tree-id5477 . -3) (undo-tree-id5478 . -3) (undo-tree-id5479 . -3) (undo-tree-id5480 . -3) (undo-tree-id5481 . -3) (undo-tree-id5482 . -3) (undo-tree-id5483 . -3) (undo-tree-id5484 . -3) (undo-tree-id5485 . -3) (undo-tree-id5486 . -3) (undo-tree-id5487 . -3) (undo-tree-id5488 . -3) (undo-tree-id5489 . -3) (undo-tree-id5490 . -3) (undo-tree-id5491 . -3) (undo-tree-id5492 . -3) (undo-tree-id5493 . -3) (undo-tree-id5494 . -3) (undo-tree-id5495 . -3) (undo-tree-id5496 . -3) (undo-tree-id5497 . -3) (undo-tree-id5498 . -3) (undo-tree-id5499 . -3) (undo-tree-id5500 . -3) (undo-tree-id5501 . -3) (undo-tree-id5502 . -3) (undo-tree-id5503 . -3) (undo-tree-id5504 . -3) (undo-tree-id5505 . -3) (undo-tree-id5506 . -3) (undo-tree-id5507 . -3) (undo-tree-id5508 . -3) (undo-tree-id5509 . -3) (undo-tree-id5510 . -3) (undo-tree-id5511 . -3) (undo-tree-id5512 . -3) (undo-tree-id5513 . -3) (undo-tree-id5514 . -3) (undo-tree-id5515 . -3) (undo-tree-id5516 . -3) (undo-tree-id5517 . -3) (undo-tree-id5518 . -3) (undo-tree-id5519 . -3) (undo-tree-id5520 . -3) (undo-tree-id5521 . -3) (undo-tree-id5522 . -3) (undo-tree-id5523 . -3) (undo-tree-id5524 . -3) (undo-tree-id5525 . -3) (undo-tree-id5526 . -3) (undo-tree-id5527 . -3) (undo-tree-id5528 . -3) (undo-tree-id5529 . -3) (undo-tree-id5530 . -3) (undo-tree-id5531 . -3) (undo-tree-id5532 . -3) (undo-tree-id5533 . -3) (undo-tree-id5534 . -3) (undo-tree-id5535 . -3) (undo-tree-id5536 . -3) 1411) ((1408 . 1411)) (25767 4532 925713 220000) 0 nil])
([nil nil ((#("jointly), and " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1410) (undo-tree-id5884 . -13) (undo-tree-id5885 . -13) (undo-tree-id5886 . 14) (undo-tree-id5887 . -13) (undo-tree-id5888 . -14) (undo-tree-id5889 . -13) (undo-tree-id5890 . -6) (undo-tree-id5891 . -8) (undo-tree-id5892 . -12) (undo-tree-id5893 . -14) (undo-tree-id5894 . -13) (undo-tree-id5895 . -14) (undo-tree-id5896 . -13) (undo-tree-id5897 . -13) (undo-tree-id5898 . -14) 1423) nil (25767 4605 981328 643000) 0 nil])
nil
([nil nil ((1410 . 1411) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1410)) nil (25767 4605 981317 162000) 0 nil])
([nil nil ((#("If you have correlated companies across the training set and" 0 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1410) (undo-tree-id5869 . -59) (undo-tree-id5870 . 59) (undo-tree-id5871 . 60) (undo-tree-id5872 . -1) (undo-tree-id5873 . -3) (undo-tree-id5874 . -7) (undo-tree-id5875 . -12) (undo-tree-id5876 . -23) (undo-tree-id5877 . -33) (undo-tree-id5878 . -40) (undo-tree-id5879 . -44) (undo-tree-id5880 . -53) (undo-tree-id5881 . -57) (undo-tree-id5882 . -60) (undo-tree-id5883 . -60)) nil (25767 4605 981315 651000) 0 nil])
([nil nil ((#("the test set your test set will not be as useful, as its measure of the
" 0 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5840 . -71) (undo-tree-id5841 . -4) (undo-tree-id5842 . -9) (undo-tree-id5843 . -13) (undo-tree-id5844 . -18) (undo-tree-id5845 . -23) (undo-tree-id5846 . -27) (undo-tree-id5847 . -32) (undo-tree-id5848 . -36) (undo-tree-id5849 . -39) (undo-tree-id5850 . -42) (undo-tree-id5851 . -48) (undo-tree-id5852 . -50) (undo-tree-id5853 . -53) (undo-tree-id5854 . -57) (undo-tree-id5855 . -65) (undo-tree-id5856 . -68) (undo-tree-id5857 . -72) (undo-tree-id5858 . -72) (undo-tree-id5859 . -72) (undo-tree-id5860 . -72) (undo-tree-id5861 . -72) (undo-tree-id5862 . -72) (undo-tree-id5863 . -72) (undo-tree-id5864 . -72) (undo-tree-id5865 . -72) (undo-tree-id5866 . -72) (undo-tree-id5867 . -72) (undo-tree-id5868 . -72)) nil (25767 4605 981303 704000) 0 nil])
([nil nil ((#("generalization error will be optimistically biased.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1411) (undo-tree-id5838 . -51) (undo-tree-id5839 . -52)) nil (25767 4605 981285 650000) 0 nil])
([nil nil ((1409 . 1410) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1409) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1410) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . 1) (undo-tree-id5756 . 1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) 1408) nil (25767 4605 981274 301000) 0 nil])
([nil nil ((1410 . 1411) (#("So, i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1410) (undo-tree-id5601 . -4) (undo-tree-id5602 . -4) (undo-tree-id5603 . 5) (undo-tree-id5604 . -4) (undo-tree-id5605 . -5) (undo-tree-id5606 . -4) (undo-tree-id5607 . -1) (undo-tree-id5608 . -2) (undo-tree-id5609 . -5) (undo-tree-id5610 . -4) (undo-tree-id5611 . -4) (undo-tree-id5612 . -5) (undo-tree-id5613 . -5) (undo-tree-id5614 . -5) 1414) nil (25767 4605 980814 881000) 0 nil])
([nil nil ((#("(in the training set)" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1525) (undo-tree-id5595 . -20) (undo-tree-id5596 . 21) (undo-tree-id5597 . -1) (undo-tree-id5598 . 1) (undo-tree-id5599 . -21) (undo-tree-id5600 . -21)) nil (25767 4605 980804 463000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1524) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1)) nil (25767 4605 980798 623000) 0 nil])
([nil nil ((1558 . 1560) (1557 . 1558)) nil (25767 4605 980762 555000) 0 nil])
([nil nil ((1482 . 1484)) nil (25767 4605 982040 16000) 0 nil])
([nil nil ((1538 . 1540)) nil (25767 4608 309909 494000) 0 nil] [nil nil ((1539 . 1541)) ((#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1539) (undo-tree-id6656 . -1) (undo-tree-id6657 . -2) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1)) (25767 4605 980756 15000) 0 nil])
([nil nil ((2877 . 2878)) nil (25767 4608 309903 890000) 0 nil])
nil
([nil nil ((1614 . 1616) (t 25767 4608 332163 598000)) nil (25767 4635 478373 34000) 0 nil])
([nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1654) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (t 25767 4635 500349 777000)) nil (25767 4655 416869 114000) 0 nil])
([nil nil ((1654 . 1656)) nil (25767 4655 416865 405000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 1656) (undo-tree-id6660 . 1) (undo-tree-id6661 . -1) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1)) nil (25767 4655 416861 482000) 0 nil])
([nil nil ((#("(at least in a wide sense)" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1627) (undo-tree-id7050 . -25) (undo-tree-id7051 . 26) (undo-tree-id7052 . -1) (undo-tree-id7053 . 1) (undo-tree-id7054 . -26) (undo-tree-id7055 . -26) (t 25767 4655 484496 525000)) nil (25767 4744 124309 629000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1626) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1)) nil (25767 4744 124303 296000) 0 nil])
([nil nil ((#("For many time series this
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1629) (undo-tree-id6996 . -25) (undo-tree-id6997 . 26) (undo-tree-id6998 . -26) (undo-tree-id6999 . -26) (undo-tree-id7000 . -26) (undo-tree-id7001 . -26) (undo-tree-id7002 . -26) (undo-tree-id7003 . -26) (undo-tree-id7004 . -26) (undo-tree-id7005 . -26) (undo-tree-id7006 . -26) (undo-tree-id7007 . -26) (undo-tree-id7008 . -26) (undo-tree-id7009 . -26) (undo-tree-id7010 . -26) (undo-tree-id7011 . -26) (undo-tree-id7012 . -26) (undo-tree-id7013 . -26) (undo-tree-id7014 . -26) (undo-tree-id7015 . -26) (undo-tree-id7016 . -26)) nil (25767 4744 124181 256000) 0 nil])
([nil nil ((1627 . 1628) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1627) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1627) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) 1614) nil (25767 4744 124163 705000) 0 nil])
([nil nil ((#("assumption " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1628) (undo-tree-id6901 . -10) (undo-tree-id6902 . 11) (undo-tree-id6903 . -11)) nil (25767 4744 124083 607000) 0 nil])
([nil nil ((#("is " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1628) (undo-tree-id6898 . -2) (undo-tree-id6899 . 3) (undo-tree-id6900 . -3)) nil (25767 4744 124080 231000) 0 nil])
([nil nil ((#("reasonable " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1628) (undo-tree-id6895 . -10) (undo-tree-id6896 . 11) (undo-tree-id6897 . -11)) nil (25767 4744 124076 765000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1626) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1)) nil (25767 4744 124069 1000) 0 nil])
([nil nil ((1652 . 1653)) nil (25767 4744 123879 625000) 0 nil])
([nil nil ((#("should be fine, since the" 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1654) (undo-tree-id6766 . -24) (undo-tree-id6767 . -5) (undo-tree-id6768 . -4) (undo-tree-id6769 . -3) (undo-tree-id6770 . -2) (undo-tree-id6771 . -1) (undo-tree-id6772 . -25) (undo-tree-id6773 . -25)) nil (25767 4744 123877 506000) 0 nil])
([nil nil ((#("laws of chemistry don’t change every day), but for many others it is not
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1655) (undo-tree-id6742 . -72) (undo-tree-id6743 . -73) (undo-tree-id6744 . -73) (undo-tree-id6745 . -73) (undo-tree-id6746 . -73) (undo-tree-id6747 . -73) (undo-tree-id6748 . -73) (undo-tree-id6749 . -73) (undo-tree-id6750 . -73) (undo-tree-id6751 . -73) (undo-tree-id6752 . -73) (undo-tree-id6753 . -73) (undo-tree-id6754 . -73) (undo-tree-id6755 . -73) (undo-tree-id6756 . -73) (undo-tree-id6757 . -73) (undo-tree-id6758 . -73) (undo-tree-id6759 . -73) (undo-tree-id6760 . -73) (undo-tree-id6761 . -73) (undo-tree-id6762 . -73) (undo-tree-id6763 . -73) (undo-tree-id6764 . -73) (undo-tree-id6765 . -73)) nil (25767 4744 123522 385000) 0 nil])
([nil nil ((#("(e.g., financial markets are notoriously not stationary since patterns
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1655) (undo-tree-id6721 . -70) (undo-tree-id6722 . -71) (undo-tree-id6723 . -71) (undo-tree-id6724 . -71) (undo-tree-id6725 . -71) (undo-tree-id6726 . -71) (undo-tree-id6727 . -71) (undo-tree-id6728 . -71) (undo-tree-id6729 . -71) (undo-tree-id6730 . -71) (undo-tree-id6731 . -71) (undo-tree-id6732 . -71) (undo-tree-id6733 . -71) (undo-tree-id6734 . -71) (undo-tree-id6735 . -71) (undo-tree-id6736 . -71) (undo-tree-id6737 . -71) (undo-tree-id6738 . -71) (undo-tree-id6739 . 71) (undo-tree-id6740 . -1) (undo-tree-id6741 . -71)) nil (25767 4744 123506 446000) 0 nil])
([nil nil ((#("disappear as soon as traders spot them and start exploiting them)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1655) (undo-tree-id6719 . -64) (undo-tree-id6720 . -65)) nil (25767 4744 123491 550000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1655) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1)) nil (25767 4744 123489 547000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 1655) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1)) nil (25767 4744 123487 169000) 0 nil])
([nil nil ((1655 . 1657)) nil (25767 4744 123484 903000) 0 nil])
([nil nil ((1664 . 1665) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1664) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) 1657) nil (25767 4744 123483 165000) 0 nil])
([nil nil ((1809 . 1810) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1809) (undo-tree-id6667 . -1) (1737 . 1738) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1737) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) 1736) nil (25767 4744 123468 980000) 0 nil])
([nil nil ((1743 . 1744) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1743) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (t 25767 4744 141231 728000)) nil (25767 4769 845600 235000) 0 nil])
([nil nil ((2006 . 2007) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2006) (undo-tree-id7056 . -1) (1963 . 1964) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1963) (undo-tree-id7057 . -1) (1889 . 1890) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1889) (undo-tree-id7058 . -1) 1886) nil (25767 4769 845583 716000) 0 nil])
([nil nil ((1655 . 2086) (#("- if the model performs much better on the first part of the validation set than on the last part, then the time series may not be stationary enough, and you might be better off training the model on a shorter time span. In short, splitting a time series into a training set, a validation set, and a
- To make sure the time series is indeed sufficiently stationary, you can plot the model's errors on the validation set across time" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 23 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 23 24 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 24 103 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 103 104 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 104 177 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 177 178 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 178 220 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 220 221 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 221 299 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 299 300 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 300 301 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 301 302 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 302 303 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 303 309 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 309 310 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 310 382 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 382 383 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 383 388 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 388 389 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 389 431 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1655) (undo-tree-id7071 . -431) (undo-tree-id7072 . -431) (undo-tree-id7073 . 129) (undo-tree-id7074 . -388) (undo-tree-id7075 . -388) (undo-tree-id7076 . -388) (undo-tree-id7077 . -388) (undo-tree-id7078 . -388) (undo-tree-id7079 . -388) (undo-tree-id7080 . -388) (undo-tree-id7081 . -388) (undo-tree-id7082 . -388) (undo-tree-id7083 . -388) (undo-tree-id7084 . -388) (undo-tree-id7085 . -431) (undo-tree-id7086 . -302) (undo-tree-id7087 . -302) (undo-tree-id7088 . -302) (undo-tree-id7089 . -302) (undo-tree-id7090 . -302) (undo-tree-id7091 . -302) (undo-tree-id7092 . -302) (undo-tree-id7093 . -302) (undo-tree-id7094 . -302) (undo-tree-id7095 . -302) (undo-tree-id7096 . -302) (undo-tree-id7097 . -302) (undo-tree-id7098 . -302) (undo-tree-id7099 . -302) (undo-tree-id7100 . -302) (undo-tree-id7101 . -302) (undo-tree-id7102 . -302) (undo-tree-id7103 . -302) (undo-tree-id7104 . -302) (undo-tree-id7105 . -302) (undo-tree-id7106 . -302) (undo-tree-id7107 . -302) (undo-tree-id7108 . -302) (undo-tree-id7109 . -302) (undo-tree-id7110 . -302) (undo-tree-id7111 . -302) (undo-tree-id7112 . -374) (undo-tree-id7113 . -374) (undo-tree-id7114 . -374) (undo-tree-id7115 . -374) (undo-tree-id7116 . -374) (undo-tree-id7117 . -374) (undo-tree-id7118 . -374) (undo-tree-id7119 . -374) (undo-tree-id7120 . -374) (undo-tree-id7121 . -374) (undo-tree-id7122 . -374) (undo-tree-id7123 . -374) (undo-tree-id7124 . -374) (undo-tree-id7125 . -374) (undo-tree-id7126 . -374) (undo-tree-id7127 . -374) (undo-tree-id7128 . -374) (undo-tree-id7129 . -374) (undo-tree-id7130 . -374) (undo-tree-id7131 . -374) (undo-tree-id7132 . -374) (undo-tree-id7133 . -374) (undo-tree-id7134 . -374) (undo-tree-id7135 . -374) (undo-tree-id7136 . -374) (undo-tree-id7137 . -374) (undo-tree-id7138 . -374) (undo-tree-id7139 . -374) (undo-tree-id7140 . -374) (undo-tree-id7141 . -374) (undo-tree-id7142 . -374) (undo-tree-id7143 . -431) (undo-tree-id7144 . -431) (undo-tree-id7145 . -431) (undo-tree-id7146 . -431) (undo-tree-id7147 . -431) (undo-tree-id7148 . -431) (undo-tree-id7149 . -431) (undo-tree-id7150 . -431) (undo-tree-id7151 . -431) (undo-tree-id7152 . -431) (undo-tree-id7153 . -431) (undo-tree-id7154 . -431) (undo-tree-id7155 . -431) (undo-tree-id7156 . -431) (undo-tree-id7157 . -431) (undo-tree-id7158 . -431) (undo-tree-id7159 . -431) (undo-tree-id7160 . -431) (undo-tree-id7161 . -431) (undo-tree-id7162 . -431) (undo-tree-id7163 . -431) (undo-tree-id7164 . -374) (undo-tree-id7165 . -374) (undo-tree-id7166 . -374) (undo-tree-id7167 . -374) (undo-tree-id7168 . -374) (undo-tree-id7169 . -374) (undo-tree-id7170 . -374) (undo-tree-id7171 . -374) (undo-tree-id7172 . -374) (undo-tree-id7173 . -374) (undo-tree-id7174 . -374) (undo-tree-id7175 . -374) (undo-tree-id7176 . -374) (undo-tree-id7177 . -374) (undo-tree-id7178 . -374) (undo-tree-id7179 . -374) (undo-tree-id7180 . -374) (undo-tree-id7181 . -374) (undo-tree-id7182 . -374) (undo-tree-id7183 . -374) (undo-tree-id7184 . -374) (undo-tree-id7185 . -374) (undo-tree-id7186 . -374) (undo-tree-id7187 . -374) (undo-tree-id7188 . -374) (undo-tree-id7189 . -374) (undo-tree-id7190 . -431) (undo-tree-id7191 . -431) (undo-tree-id7192 . -431) (undo-tree-id7193 . -431) (undo-tree-id7194 . -431) (undo-tree-id7195 . -431) (undo-tree-id7196 . -431) (undo-tree-id7197 . -431) (undo-tree-id7198 . -431) (undo-tree-id7199 . -431) (undo-tree-id7200 . -431) (undo-tree-id7201 . -431) (undo-tree-id7202 . -431) (undo-tree-id7203 . -431) (undo-tree-id7204 . -431) (undo-tree-id7205 . -431) (undo-tree-id7206 . -431) (undo-tree-id7207 . -431) (undo-tree-id7208 . -431) (undo-tree-id7209 . -431) (undo-tree-id7210 . -431) (undo-tree-id7211 . -431) (undo-tree-id7212 . -431) (undo-tree-id7213 . -431) (undo-tree-id7214 . -431) (undo-tree-id7215 . -431) (undo-tree-id7216 . -431) (undo-tree-id7217 . -431) (undo-tree-id7218 . -431) (undo-tree-id7219 . -431) (undo-tree-id7220 . -431) (undo-tree-id7221 . -431) (undo-tree-id7222 . -431) (undo-tree-id7223 . -431) (undo-tree-id7224 . -431) (undo-tree-id7225 . -300) (1655 . 1955) (#(" if the model performs much better on the first part of the validation set than on the last part, then the time series may not be stationary enough, and you might be better off training the model on a shorter time span. In short, splitting a time series into a training set, a validation set, and a" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 102 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 103 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 176 177 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 177 219 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 219 220 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 220 298 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1786) (undo-tree-id7226 . -14) (undo-tree-id7227 . -14) (undo-tree-id7228 . -14) (undo-tree-id7229 . -14) (undo-tree-id7230 . -14) (undo-tree-id7231 . -14) (undo-tree-id7232 . -14) (undo-tree-id7233 . -14) (undo-tree-id7234 . -14) (undo-tree-id7235 . -14) (undo-tree-id7236 . -14) (undo-tree-id7237 . -14) (undo-tree-id7238 . -14) (undo-tree-id7239 . -14) (undo-tree-id7240 . -14) (undo-tree-id7241 . -14) (undo-tree-id7242 . -14) (undo-tree-id7243 . -14) (undo-tree-id7244 . -14) (undo-tree-id7245 . -14) (undo-tree-id7246 . -14) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1786) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (t 25767 4769 909467 51000)) nil (25767 4784 855152 872000) 0 nil])
([nil nil ((1789 . 1790) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1789) (t 25767 4784 877607 510000)) nil (25767 4830 26790 484000) 0 nil])
([nil nil ((1935 . 1936) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1935) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1)) nil (25767 4830 26789 293000) 0 nil])
([nil nil ((#("and you might be better off training the model on a shorter time span" 0 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 27 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1937) (undo-tree-id7951 . -68) (undo-tree-id7952 . -69)) nil (25767 4830 26785 753000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1937) (undo-tree-id7949 . -1) (undo-tree-id7950 . -1)) nil (25767 4830 27638 152000) 0 nil])
([nil nil ((2443 . 2444) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2443) (undo-tree-id7985 . -1) (2376 . 2377) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2376) (undo-tree-id7986 . -1) (2338 . 2339) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2338) (undo-tree-id7987 . -1) (2328 . 2329) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2328) (undo-tree-id7988 . -1) (2255 . 2256) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2255) (undo-tree-id7989 . -1) (2178 . 2179) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2178) (undo-tree-id7990 . -1) (2108 . 2109) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2108) (undo-tree-id7991 . -1) (2094 . 2095) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2094) (undo-tree-id7992 . -1) (2016 . 2017) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2016) (undo-tree-id7993 . -1) 1938) nil (25767 4877 57586 528000) 0 nil] [nil nil ((#("- If the model performs much better on the first part of the validation set than on the last part, then the time series may not be stationary enough.  In short, splitting a time series into a training set, a validation set, and a
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 23 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 24 103 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 103 104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 104 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 150 151 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 151 229 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 229 230 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1787) (undo-tree-id7250 . -229) (undo-tree-id7251 . -2) (undo-tree-id7252 . -2) (undo-tree-id7253 . 227) (undo-tree-id7254 . 81) (undo-tree-id7255 . -1) (undo-tree-id7256 . -151) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -2) (undo-tree-id7282 . -2) (undo-tree-id7283 . -2) (undo-tree-id7284 . -2) (undo-tree-id7285 . -2) (undo-tree-id7286 . -2) (undo-tree-id7287 . -2) (undo-tree-id7288 . -2) (undo-tree-id7289 . -2) (undo-tree-id7290 . -2) (undo-tree-id7291 . -2) (undo-tree-id7292 . -2) (undo-tree-id7293 . -2) (undo-tree-id7294 . -2) (undo-tree-id7295 . -2) (undo-tree-id7296 . -2) (undo-tree-id7297 . -2) (undo-tree-id7298 . -2) (undo-tree-id7299 . -2) (undo-tree-id7300 . -2) (undo-tree-id7301 . -2) (undo-tree-id7302 . -2) (undo-tree-id7303 . -2) (undo-tree-id7304 . -2) (undo-tree-id7305 . -2) (undo-tree-id7306 . -2) (undo-tree-id7307 . -2) (undo-tree-id7308 . -2) (undo-tree-id7309 . -2) (undo-tree-id7310 . -2) (undo-tree-id7311 . -2) (undo-tree-id7312 . -2) (undo-tree-id7313 . -2) (undo-tree-id7314 . -2) (undo-tree-id7315 . -2) (undo-tree-id7316 . -2) (undo-tree-id7317 . -2) (undo-tree-id7318 . -2) (undo-tree-id7319 . -2) (undo-tree-id7320 . -2) (undo-tree-id7321 . -2) (undo-tree-id7322 . -2) (undo-tree-id7323 . -2) (undo-tree-id7324 . -2) (undo-tree-id7325 . -2) (undo-tree-id7326 . -2) (undo-tree-id7327 . -2) (undo-tree-id7328 . -2) (undo-tree-id7329 . -2) (undo-tree-id7330 . -2) (undo-tree-id7331 . -2) (undo-tree-id7332 . -2) (undo-tree-id7333 . -2) (undo-tree-id7334 . -2) (undo-tree-id7335 . -2) (undo-tree-id7336 . -2) (undo-tree-id7337 . -2) (undo-tree-id7338 . -2) (undo-tree-id7339 . -2) (undo-tree-id7340 . -2) (undo-tree-id7341 . -2) (undo-tree-id7342 . -2) (undo-tree-id7343 . -2) (undo-tree-id7344 . -2) (undo-tree-id7345 . -2) (undo-tree-id7346 . -2) (undo-tree-id7347 . -2) (undo-tree-id7348 . -2) (undo-tree-id7349 . -2) (undo-tree-id7350 . -2) (undo-tree-id7351 . -2) (undo-tree-id7352 . -2) (undo-tree-id7353 . -5) (undo-tree-id7354 . -5) (undo-tree-id7355 . -5) (undo-tree-id7356 . -5) (undo-tree-id7357 . -5) (undo-tree-id7358 . -5) (undo-tree-id7359 . -5) (undo-tree-id7360 . -5) (undo-tree-id7361 . -5) (undo-tree-id7362 . -5) (undo-tree-id7363 . -5) (undo-tree-id7364 . -9) (undo-tree-id7365 . -9) (undo-tree-id7366 . -9) (undo-tree-id7367 . -9) (undo-tree-id7368 . -9) (undo-tree-id7369 . -9) (undo-tree-id7370 . -9) (undo-tree-id7371 . -9) (undo-tree-id7372 . -9) (undo-tree-id7373 . -9) (undo-tree-id7374 . -9) (undo-tree-id7375 . -15) (undo-tree-id7376 . -15) (undo-tree-id7377 . -15) (undo-tree-id7378 . -15) (undo-tree-id7379 . -15) (undo-tree-id7380 . -15) (undo-tree-id7381 . -15) (undo-tree-id7382 . -15) (undo-tree-id7383 . -15) (undo-tree-id7384 . -15) (undo-tree-id7385 . -15) (undo-tree-id7386 . -24) (undo-tree-id7387 . -24) (undo-tree-id7388 . -24) (undo-tree-id7389 . -24) (undo-tree-id7390 . -24) (undo-tree-id7391 . -24) (undo-tree-id7392 . -24) (undo-tree-id7393 . -24) (undo-tree-id7394 . -24) (undo-tree-id7395 . -24) (undo-tree-id7396 . -24) (undo-tree-id7397 . -29) (undo-tree-id7398 . -29) (undo-tree-id7399 . -29) (undo-tree-id7400 . -29) (undo-tree-id7401 . -29) (undo-tree-id7402 . -29) (undo-tree-id7403 . -29) (undo-tree-id7404 . -29) (undo-tree-id7405 . -29) (undo-tree-id7406 . -29) (undo-tree-id7407 . -29) (undo-tree-id7408 . -36) (undo-tree-id7409 . -36) (undo-tree-id7410 . -36) (undo-tree-id7411 . -36) (undo-tree-id7412 . -36) (undo-tree-id7413 . -36) (undo-tree-id7414 . -36) (undo-tree-id7415 . -36) (undo-tree-id7416 . -36) (undo-tree-id7417 . -36) (undo-tree-id7418 . -36) (undo-tree-id7419 . -39) (undo-tree-id7420 . -39) (undo-tree-id7421 . -39) (undo-tree-id7422 . -39) (undo-tree-id7423 . -39) (undo-tree-id7424 . -39) (undo-tree-id7425 . -39) (undo-tree-id7426 . -39) (undo-tree-id7427 . -39) (undo-tree-id7428 . -39) (undo-tree-id7429 . -39) (undo-tree-id7430 . -39) (undo-tree-id7431 . -39) (undo-tree-id7432 . -39) (undo-tree-id7433 . -39) (undo-tree-id7434 . -39) (undo-tree-id7435 . -43) (undo-tree-id7436 . -43) (undo-tree-id7437 . -43) (undo-tree-id7438 . -43) (undo-tree-id7439 . -43) (undo-tree-id7440 . -43) (undo-tree-id7441 . -43) (undo-tree-id7442 . -43) (undo-tree-id7443 . -43) (undo-tree-id7444 . -43) (undo-tree-id7445 . -43) (undo-tree-id7446 . -49) (undo-tree-id7447 . -49) (undo-tree-id7448 . -49) (undo-tree-id7449 . -49) (undo-tree-id7450 . -49) (undo-tree-id7451 . -49) (undo-tree-id7452 . -49) (undo-tree-id7453 . -49) (undo-tree-id7454 . -49) (undo-tree-id7455 . -49) (undo-tree-id7456 . -49) (undo-tree-id7457 . -54) (undo-tree-id7458 . -54) (undo-tree-id7459 . -54) (undo-tree-id7460 . -54) (undo-tree-id7461 . -54) (undo-tree-id7462 . -54) (undo-tree-id7463 . -54) (undo-tree-id7464 . -54) (undo-tree-id7465 . -54) (undo-tree-id7466 . -54) (undo-tree-id7467 . -54) (undo-tree-id7468 . -57) (undo-tree-id7469 . -57) (undo-tree-id7470 . -57) (undo-tree-id7471 . -57) (undo-tree-id7472 . -57) (undo-tree-id7473 . -57) (undo-tree-id7474 . -57) (undo-tree-id7475 . -57) (undo-tree-id7476 . -57) (undo-tree-id7477 . -57) (undo-tree-id7478 . -57) (undo-tree-id7479 . -61) (undo-tree-id7480 . -61) (undo-tree-id7481 . -61) (undo-tree-id7482 . -61) (undo-tree-id7483 . -61) (undo-tree-id7484 . -61) (undo-tree-id7485 . -61) (undo-tree-id7486 . -61) (undo-tree-id7487 . -61) (undo-tree-id7488 . -61) (undo-tree-id7489 . -61) (undo-tree-id7490 . -72) (undo-tree-id7491 . -72) (undo-tree-id7492 . -72) (undo-tree-id7493 . -72) (undo-tree-id7494 . -72) (undo-tree-id7495 . -72) (undo-tree-id7496 . -72) (undo-tree-id7497 . -72) (undo-tree-id7498 . -72) (undo-tree-id7499 . -72) (undo-tree-id7500 . -72) (undo-tree-id7501 . -76) (undo-tree-id7502 . -76) (undo-tree-id7503 . -76) (undo-tree-id7504 . -76) (undo-tree-id7505 . -76) (undo-tree-id7506 . -76) (undo-tree-id7507 . -76) (undo-tree-id7508 . -76) (undo-tree-id7509 . -76) (undo-tree-id7510 . -76) (undo-tree-id7511 . -76) (undo-tree-id7512 . -81) (undo-tree-id7513 . -81) (undo-tree-id7514 . -81) (undo-tree-id7515 . -81) (undo-tree-id7516 . -81) (undo-tree-id7517 . -81) (undo-tree-id7518 . -81) (undo-tree-id7519 . -81) (undo-tree-id7520 . -81) (undo-tree-id7521 . -81) (undo-tree-id7522 . -81) (undo-tree-id7523 . -84) (undo-tree-id7524 . -84) (undo-tree-id7525 . -84) (undo-tree-id7526 . -84) (undo-tree-id7527 . -84) (undo-tree-id7528 . -84) (undo-tree-id7529 . -84) (undo-tree-id7530 . -84) (undo-tree-id7531 . -84) (undo-tree-id7532 . -84) (undo-tree-id7533 . -84) (undo-tree-id7534 . -88) (undo-tree-id7535 . -88) (undo-tree-id7536 . -88) (undo-tree-id7537 . -88) (undo-tree-id7538 . -88) (undo-tree-id7539 . -88) (undo-tree-id7540 . -88) (undo-tree-id7541 . -88) (undo-tree-id7542 . -88) (undo-tree-id7543 . -88) (undo-tree-id7544 . -88) (undo-tree-id7545 . -93) (undo-tree-id7546 . -93) (undo-tree-id7547 . -93) (undo-tree-id7548 . -93) (undo-tree-id7549 . -93) (undo-tree-id7550 . -93) (undo-tree-id7551 . -93) (undo-tree-id7552 . -93) (undo-tree-id7553 . -93) (undo-tree-id7554 . -93) (undo-tree-id7555 . -93) (undo-tree-id7556 . -97) (undo-tree-id7557 . -97) (undo-tree-id7558 . -97) (undo-tree-id7559 . -97) (undo-tree-id7560 . -97) (undo-tree-id7561 . -97) (undo-tree-id7562 . -97) (undo-tree-id7563 . -97) (undo-tree-id7564 . -97) (undo-tree-id7565 . -97) (undo-tree-id7566 . -97) (undo-tree-id7567 . -99) (undo-tree-id7568 . -99) (undo-tree-id7569 . -99) (undo-tree-id7570 . -99) (undo-tree-id7571 . -99) (undo-tree-id7572 . -99) (undo-tree-id7573 . -99) (undo-tree-id7574 . -99) (undo-tree-id7575 . -99) (undo-tree-id7576 . -99) (undo-tree-id7577 . -99) (undo-tree-id7578 . -99) (undo-tree-id7579 . -99) (undo-tree-id7580 . -99) (undo-tree-id7581 . -99) (undo-tree-id7582 . -99) (undo-tree-id7583 . -104) (undo-tree-id7584 . -104) (undo-tree-id7585 . -104) (undo-tree-id7586 . -104) (undo-tree-id7587 . -104) (undo-tree-id7588 . -104) (undo-tree-id7589 . -104) (undo-tree-id7590 . -104) (undo-tree-id7591 . -104) (undo-tree-id7592 . -104) (undo-tree-id7593 . -104) (undo-tree-id7594 . -108) (undo-tree-id7595 . -108) (undo-tree-id7596 . -108) (undo-tree-id7597 . -108) (undo-tree-id7598 . -108) (undo-tree-id7599 . -108) (undo-tree-id7600 . -108) (undo-tree-id7601 . -108) (undo-tree-id7602 . -108) (undo-tree-id7603 . -108) (undo-tree-id7604 . -108) (undo-tree-id7605 . -113) (undo-tree-id7606 . -113) (undo-tree-id7607 . -113) (undo-tree-id7608 . -113) (undo-tree-id7609 . -113) (undo-tree-id7610 . -113) (undo-tree-id7611 . -113) (undo-tree-id7612 . -113) (undo-tree-id7613 . -113) (undo-tree-id7614 . -113) (undo-tree-id7615 . -113) (undo-tree-id7616 . -120) (undo-tree-id7617 . -120) (undo-tree-id7618 . -120) (undo-tree-id7619 . -120) (undo-tree-id7620 . -120) (undo-tree-id7621 . -120) (undo-tree-id7622 . -120) (undo-tree-id7623 . -120) (undo-tree-id7624 . -120) (undo-tree-id7625 . -120) (undo-tree-id7626 . -120) (undo-tree-id7627 . -124) (undo-tree-id7628 . -124) (undo-tree-id7629 . -124) (undo-tree-id7630 . -124) (undo-tree-id7631 . -124) (undo-tree-id7632 . -124) (undo-tree-id7633 . -124) (undo-tree-id7634 . -124) (undo-tree-id7635 . -124) (undo-tree-id7636 . -124) (undo-tree-id7637 . -124) (undo-tree-id7638 . -124) (undo-tree-id7639 . -124) (undo-tree-id7640 . -124) (undo-tree-id7641 . -124) (undo-tree-id7642 . -124) (undo-tree-id7643 . -128) (undo-tree-id7644 . -128) (undo-tree-id7645 . -128) (undo-tree-id7646 . -128) (undo-tree-id7647 . -128) (undo-tree-id7648 . -128) (undo-tree-id7649 . -128) (undo-tree-id7650 . -128) (undo-tree-id7651 . -128) (undo-tree-id7652 . -128) (undo-tree-id7653 . -128) (undo-tree-id7654 . -131) (undo-tree-id7655 . -131) (undo-tree-id7656 . -131) (undo-tree-id7657 . -131) (undo-tree-id7658 . -131) (undo-tree-id7659 . -131) (undo-tree-id7660 . -131) (undo-tree-id7661 . -131) (undo-tree-id7662 . -131) (undo-tree-id7663 . -131) (undo-tree-id7664 . -131) (undo-tree-id7665 . -142) (undo-tree-id7666 . -142) (undo-tree-id7667 . -142) (undo-tree-id7668 . -142) (undo-tree-id7669 . -142) (undo-tree-id7670 . -142) (undo-tree-id7671 . -142) (undo-tree-id7672 . -142) (undo-tree-id7673 . -142) (undo-tree-id7674 . -142) (undo-tree-id7675 . -142) (undo-tree-id7676 . -148) (undo-tree-id7677 . -148) (undo-tree-id7678 . -148) (undo-tree-id7679 . -148) (undo-tree-id7680 . -148) (undo-tree-id7681 . -148) (undo-tree-id7682 . -148) (undo-tree-id7683 . -148) (undo-tree-id7684 . -148) (undo-tree-id7685 . -148) (undo-tree-id7686 . -148) (undo-tree-id7687 . -148) (undo-tree-id7688 . -148) (undo-tree-id7689 . -148) (undo-tree-id7690 . -148) (undo-tree-id7691 . -148) (undo-tree-id7692 . -148) (undo-tree-id7693 . -148) (undo-tree-id7694 . -148) (undo-tree-id7695 . -148) (undo-tree-id7696 . -148) (undo-tree-id7697 . -148) (undo-tree-id7698 . -148) (undo-tree-id7699 . -148) (undo-tree-id7700 . -148) (undo-tree-id7701 . -148) (undo-tree-id7702 . -148) (undo-tree-id7703 . -148) (undo-tree-id7704 . -148) (undo-tree-id7705 . -148) (undo-tree-id7706 . -148) (undo-tree-id7707 . -148) (undo-tree-id7708 . -148) (undo-tree-id7709 . -148) (undo-tree-id7710 . -149) (undo-tree-id7711 . -149) (undo-tree-id7712 . -149) (undo-tree-id7713 . -149) (undo-tree-id7714 . -149) (undo-tree-id7715 . -149) (undo-tree-id7716 . -149) (undo-tree-id7717 . -149) (undo-tree-id7718 . -149) (undo-tree-id7719 . -149) (undo-tree-id7720 . -149) (undo-tree-id7721 . -149) (undo-tree-id7722 . -148) (undo-tree-id7723 . -148) (undo-tree-id7724 . -148) (undo-tree-id7725 . -148) (undo-tree-id7726 . -148) (undo-tree-id7727 . -148) (undo-tree-id7728 . -148) (undo-tree-id7729 . -148) (undo-tree-id7730 . -148) (undo-tree-id7731 . -148) (undo-tree-id7732 . -148) (undo-tree-id7733 . -148) (undo-tree-id7734 . -148) (undo-tree-id7735 . -148) (undo-tree-id7736 . -148) (undo-tree-id7737 . -148) (undo-tree-id7738 . -148) (undo-tree-id7739 . -148) (undo-tree-id7740 . -148) (undo-tree-id7741 . -148) (undo-tree-id7742 . -150) (undo-tree-id7743 . -150) (undo-tree-id7744 . -150) (undo-tree-id7745 . -150) (undo-tree-id7746 . -150) (undo-tree-id7747 . -150) (undo-tree-id7748 . -150) (undo-tree-id7749 . -150) (undo-tree-id7750 . -150) (undo-tree-id7751 . -150) (undo-tree-id7752 . -150) (undo-tree-id7753 . -150) (undo-tree-id7754 . -150) (undo-tree-id7755 . -150) (undo-tree-id7756 . -150) (undo-tree-id7757 . -150) (undo-tree-id7758 . -150) (undo-tree-id7759 . -150) (undo-tree-id7760 . -150) (undo-tree-id7761 . -150) (undo-tree-id7762 . -150) (undo-tree-id7763 . -150) (undo-tree-id7764 . -150) (undo-tree-id7765 . -150) (undo-tree-id7766 . -150) (undo-tree-id7767 . -150) (undo-tree-id7768 . -150) (undo-tree-id7769 . -150) (undo-tree-id7770 . -150) (undo-tree-id7771 . -150) (undo-tree-id7772 . -150) (undo-tree-id7773 . -150) (undo-tree-id7774 . -150) (undo-tree-id7775 . -150) (undo-tree-id7776 . -150) (undo-tree-id7777 . -150) (undo-tree-id7778 . -150) (undo-tree-id7779 . -150) (undo-tree-id7780 . -150) (undo-tree-id7781 . -150) (undo-tree-id7782 . -150) (undo-tree-id7783 . -150) (undo-tree-id7784 . -150) (undo-tree-id7785 . -150) (undo-tree-id7786 . -150) (undo-tree-id7787 . -150) (undo-tree-id7788 . -150) (undo-tree-id7789 . -150) (undo-tree-id7790 . -150) (undo-tree-id7791 . -150) (undo-tree-id7792 . -150) (undo-tree-id7793 . -150) (undo-tree-id7794 . -150) (undo-tree-id7795 . -150) (undo-tree-id7796 . -150) (undo-tree-id7797 . -150) (undo-tree-id7798 . -150) (undo-tree-id7799 . -150) (undo-tree-id7800 . -150) (undo-tree-id7801 . -150) (undo-tree-id7802 . -150) (undo-tree-id7803 . -150) (undo-tree-id7804 . -150) (undo-tree-id7805 . -150) (undo-tree-id7806 . -150) (undo-tree-id7807 . -150) (undo-tree-id7808 . -150) (undo-tree-id7809 . -150) (undo-tree-id7810 . -150) (undo-tree-id7811 . -150) (undo-tree-id7812 . -150) (undo-tree-id7813 . -150) (undo-tree-id7814 . -150) (undo-tree-id7815 . -150) (undo-tree-id7816 . -150) (undo-tree-id7817 . -150) (undo-tree-id7818 . -150) (undo-tree-id7819 . -150) (undo-tree-id7820 . -150) (undo-tree-id7821 . -150) (undo-tree-id7822 . -150) (undo-tree-id7823 . -150) (undo-tree-id7824 . -150) (undo-tree-id7825 . -150) (undo-tree-id7826 . -150) (undo-tree-id7827 . -150) (undo-tree-id7828 . -150) (undo-tree-id7829 . -150) (undo-tree-id7830 . -150) (undo-tree-id7831 . -150) (undo-tree-id7832 . -150) (undo-tree-id7833 . -150) (undo-tree-id7834 . -150) (undo-tree-id7835 . -150) (undo-tree-id7836 . -150) (undo-tree-id7837 . -150) (undo-tree-id7838 . -150) (undo-tree-id7839 . -150) (undo-tree-id7840 . -150) (undo-tree-id7841 . -150) (undo-tree-id7842 . -150) (undo-tree-id7843 . -150) (undo-tree-id7844 . -150) (undo-tree-id7845 . -150) (undo-tree-id7846 . -150) (undo-tree-id7847 . -150) (undo-tree-id7848 . -150) (undo-tree-id7849 . -150) (undo-tree-id7850 . -150) (undo-tree-id7851 . -150) (undo-tree-id7852 . -150) (undo-tree-id7853 . -150) (undo-tree-id7854 . -150) (undo-tree-id7855 . -150) (undo-tree-id7856 . -150) (undo-tree-id7857 . -150) (undo-tree-id7858 . -150) (undo-tree-id7859 . -150) (undo-tree-id7860 . -150) (undo-tree-id7861 . -150) (undo-tree-id7862 . -150) (undo-tree-id7863 . -150) (undo-tree-id7864 . -150) (undo-tree-id7865 . -150) (undo-tree-id7866 . -150) (undo-tree-id7867 . -150) (undo-tree-id7868 . -150) (undo-tree-id7869 . -150) (undo-tree-id7870 . -150) (undo-tree-id7871 . -150) (undo-tree-id7872 . -150) (undo-tree-id7873 . -150) (undo-tree-id7874 . -150) (undo-tree-id7875 . -151) (undo-tree-id7876 . -151) (undo-tree-id7877 . -151) (undo-tree-id7878 . -151) (undo-tree-id7879 . -151) (undo-tree-id7880 . -151) (undo-tree-id7881 . -151) (undo-tree-id7882 . -151) (undo-tree-id7883 . -151) (undo-tree-id7884 . -151) (undo-tree-id7885 . -151) (undo-tree-id7886 . -151) (undo-tree-id7887 . -151) (undo-tree-id7888 . -151) (undo-tree-id7889 . -151) (undo-tree-id7890 . -151) (undo-tree-id7891 . -150) (undo-tree-id7892 . -150) (undo-tree-id7893 . -150) (undo-tree-id7894 . -150) (undo-tree-id7895 . -150) (undo-tree-id7896 . -150) (undo-tree-id7897 . -150) (undo-tree-id7898 . -150) (undo-tree-id7899 . -150) (undo-tree-id7900 . -150) (undo-tree-id7901 . -150) (undo-tree-id7902 . -150) (undo-tree-id7903 . -150) (undo-tree-id7904 . -150) (undo-tree-id7905 . -150) (undo-tree-id7906 . -150) (undo-tree-id7907 . -150) (undo-tree-id7908 . -150) (undo-tree-id7909 . -150) (undo-tree-id7910 . -150) (undo-tree-id7911 . -150) (undo-tree-id7912 . -150) (undo-tree-id7913 . -150) (undo-tree-id7914 . -151) (undo-tree-id7915 . -151) (undo-tree-id7916 . -151) (undo-tree-id7917 . -151) (undo-tree-id7918 . -151) (undo-tree-id7919 . -151) (undo-tree-id7920 . -151) (undo-tree-id7921 . -151) (undo-tree-id7922 . -151) (undo-tree-id7923 . -151) (undo-tree-id7924 . -151) (undo-tree-id7925 . -151) (undo-tree-id7926 . -151) (undo-tree-id7927 . -151) (undo-tree-id7928 . -151) (undo-tree-id7929 . -151) (undo-tree-id7930 . -151) (undo-tree-id7931 . -151) (undo-tree-id7932 . -151) (undo-tree-id7933 . -151) (undo-tree-id7934 . -151) (undo-tree-id7935 . -151) (undo-tree-id7936 . -151) (undo-tree-id7937 . -151) (undo-tree-id7938 . -151) (undo-tree-id7939 . -151) (undo-tree-id7940 . -151) (undo-tree-id7941 . -151) (undo-tree-id7942 . -151) (undo-tree-id7943 . -151) (undo-tree-id7944 . -151) (undo-tree-id7945 . -151) (undo-tree-id7946 . -151) (undo-tree-id7947 . -151) (undo-tree-id7948 . -230) 1938) ((1787 . 2017)) (25767 4830 26754 440000) 0 nil])
([nil nil ((2484 . 2486) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2484) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2483 . 2484) (2483 . 2484) (2401 . 2403) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2401) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2400 . 2401) (2400 . 2401) (2336 . 2338) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2336) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2335 . 2336) (2335 . 2336) (2256 . 2258) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2256) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2255 . 2256) (2255 . 2256) (2179 . 2181) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -2179) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2178 . 2179) (2178 . 2179) (2101 . 2103) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2101) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2100 . 2101) (2100 . 2101) (2021 . 2023) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2021) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 2020 . 2021) (2020 . 2021) (1943 . 1945) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -1943) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 1942 . 1943) (1942 . 1943) (1868 . 1870) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -1868) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (nil fontified nil 1867 . 1868) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 1867 . 1868) (1867 . 1868) 2137) nil (25767 4877 57573 507000) 0 nil])
nil
([nil nil ((1867 . 1868) (#("  " 0 2 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1867) (undo-tree-id7956 . -2) (undo-tree-id7957 . -2) (undo-tree-id7958 . -2) (undo-tree-id7959 . -2) (undo-tree-id7960 . -2) (undo-tree-id7961 . -2) (undo-tree-id7962 . -2) (undo-tree-id7963 . -2) (undo-tree-id7964 . -2) (undo-tree-id7965 . -2) (undo-tree-id7966 . -2) (undo-tree-id7967 . -2) (undo-tree-id7968 . -2) (undo-tree-id7969 . -2) (undo-tree-id7970 . -2) (undo-tree-id7971 . -2) (undo-tree-id7972 . -2) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1867) (undo-tree-id7973 . -1) 1789) nil (25767 4877 57508 435000) 0 nil])
([nil nil ((1736 . 1738) (1735 . 1736) (1734 . 1735)) nil (25767 4877 57452 317000) 0 nil])
([nil nil ((1872 . 1873)) nil (25767 4877 57450 889000) 0 nil])
([nil nil ((1873 . 1875)) nil (25767 4877 57446 369000) 0 nil])
([nil nil ((1946 . 1948) (1945 . 1946) (t 25767 4877 78524 184000)) nil (25767 4935 534906 942000) 0 nil])
([nil nil ((#("  In
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1946) (undo-tree-id8093 . -4) (undo-tree-id8094 . 4) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -2) (undo-tree-id8105 . -2) (undo-tree-id8106 . -2) (undo-tree-id8107 . -2) (undo-tree-id8108 . -2) (undo-tree-id8109 . -2) (undo-tree-id8110 . -2) (undo-tree-id8111 . -2) (undo-tree-id8112 . -2) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -5)) nil (25767 4935 534904 444000) 0 nil])
([nil nil ((#("  short, splitting a time series into a training set, a validation set, and a
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 77 78 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1946) (undo-tree-id8089 . -77) (undo-tree-id8090 . 78) (undo-tree-id8091 . 78) (undo-tree-id8092 . -78)) nil (25767 4935 534873 883000) 0 nil])
([nil nil ((#("  test set is not a trivial task, and how it’s done will depend strongly on the
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 6 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 79 80 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 1946) (undo-tree-id8085 . -79) (undo-tree-id8086 . 80) (undo-tree-id8087 . 80) (undo-tree-id8088 . -80)) nil (25767 4935 534870 709000) 0 nil])
([nil nil ((#("  task at hand. Now back to Shakespeare! Let’s take the first 90% of the text
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 15 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 16 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 44 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 77 78 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1946) (undo-tree-id8069 . -77) (undo-tree-id8070 . 78) (undo-tree-id8071 . 78) (undo-tree-id8072 . -2) (undo-tree-id8073 . -2) (undo-tree-id8074 . -2) (undo-tree-id8075 . -2) (undo-tree-id8076 . -2) (undo-tree-id8077 . -2) (undo-tree-id8078 . -2) (undo-tree-id8079 . -2) (undo-tree-id8080 . -2) (undo-tree-id8081 . -2) (undo-tree-id8082 . -2) (undo-tree-id8083 . -2) (undo-tree-id8084 . -78) 1948) nil (25767 4935 534867 153000) 0 nil])
([nil nil ((#("  for the training set (keeping the rest for the validation set and the test
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 10 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 76 77 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1946) (undo-tree-id8044 . -76) (undo-tree-id8045 . 77) (undo-tree-id8046 . 77) (undo-tree-id8047 . -2) (undo-tree-id8048 . -2) (undo-tree-id8049 . -2) (undo-tree-id8050 . -2) (undo-tree-id8051 . -2) (undo-tree-id8052 . -2) (undo-tree-id8053 . -2) (undo-tree-id8054 . -2) (undo-tree-id8055 . -2) (undo-tree-id8056 . -2) (undo-tree-id8057 . -2) (undo-tree-id8058 . -2) (undo-tree-id8059 . -2) (undo-tree-id8060 . -2) (undo-tree-id8061 . -2) (undo-tree-id8062 . -2) (undo-tree-id8063 . -2) (undo-tree-id8064 . -2) (undo-tree-id8065 . -2) (undo-tree-id8066 . -2) (undo-tree-id8067 . -2) (undo-tree-id8068 . -77) 1948) nil (25767 4937 535415 662000) 0 nil])
([nil nil ((2043 . 2044)) nil (25767 4981 602953 869000) 0 nil] [nil nil ((#("  set), and create a tf.data.Dataset that will return each character one by one
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 12 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 43 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 79 80 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1946) (undo-tree-id8019 . -79) (undo-tree-id8020 . 80) (undo-tree-id8021 . 80) (undo-tree-id8022 . -2) (undo-tree-id8023 . -2) (undo-tree-id8024 . -2) (undo-tree-id8025 . -2) (undo-tree-id8026 . -2) (undo-tree-id8027 . -2) (undo-tree-id8028 . -2) (undo-tree-id8029 . -2) (undo-tree-id8030 . -2) (undo-tree-id8031 . -2) (undo-tree-id8032 . -2) (undo-tree-id8033 . -2) (undo-tree-id8034 . -2) (undo-tree-id8035 . -2) (undo-tree-id8036 . -2) (undo-tree-id8037 . -2) (undo-tree-id8038 . -2) (undo-tree-id8039 . -2) (undo-tree-id8040 . -2) (undo-tree-id8041 . -2) (undo-tree-id8042 . -2) (undo-tree-id8043 . -80) 1948) ((1946 . 2026)) (25767 4936 570242 957000) 0 nil])
([nil nil ((2092 . 2093)) nil (25767 4981 602953 208000) 0 nil])
([nil nil ((#("from this set: train_size = dataset_size * 90 // 100 dataset =" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 15 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 21 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 25 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 36 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 40 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 52 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 53 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1948) (undo-tree-id8014 . -61) (undo-tree-id8015 . 9) (undo-tree-id8016 . -60) (undo-tree-id8017 . -62) (undo-tree-id8018 . -62)) ((1948 . 2010)) (25767 4936 5562 707000) 0 nil])
([nil nil ((2082 . 2083)) nil (25767 4981 602952 400000) 0 nil])
([nil nil ((1960 . 1966) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil))) #s(yas--exit 1980 nil) 2 nil #s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil)) nil nil)) (1982 . 1984) (1948 . 1991) (#("sr" 0 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1948) (undo-tree-id7994 . -2) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -2) (undo-tree-id8004 . -2) (undo-tree-id8005 . -2) (undo-tree-id8006 . -2) (undo-tree-id8007 . -2) (undo-tree-id8008 . -2) (undo-tree-id8009 . -2) (undo-tree-id8010 . 2) (undo-tree-id8011 . -2) (undo-tree-id8012 . -2) (undo-tree-id8013 . -2) 1950 (1948 . 1950)) ((#("sr" 0 2 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1948) (undo-tree-id8143 . -2) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -2) (undo-tree-id8153 . -2) (undo-tree-id8154 . -2) (undo-tree-id8155 . -2) (undo-tree-id8156 . -2) (undo-tree-id8157 . -2) (undo-tree-id8158 . -2) (undo-tree-id8159 . -2) (1948 . 1950) (#("#+begin_src  :result outputs

  

#+end_src" 0 28 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 28 29 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 29 30 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 30 33 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 33 34 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 43 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 1948) (undo-tree-id8160 . 31) (undo-tree-id8161 . -12) (undo-tree-id8162 . -12) (undo-tree-id8163 . -12) (undo-tree-id8164 . -12) (undo-tree-id8165 . -12) (undo-tree-id8166 . -12) (undo-tree-id8167 . -12) (undo-tree-id8168 . -12) (undo-tree-id8169 . -12) (undo-tree-id8170 . -12) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 1982) (apply yas--snippet-revive 1948 1993 #s(yas--snippet nil (#s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil))) #s(yas--exit 1980 nil) 2 nil #s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil)) nil nil)) (#("python" 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 1960) (undo-tree-id8171 . -6)) (25767 4935 534941 199000) 0 nil])
([nil nil ((2092 . 2093) (#("   " 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 3 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2092) (undo-tree-id8508 . -3) (undo-tree-id8509 . -3) (undo-tree-id8510 . -3) (undo-tree-id8511 . -3) (undo-tree-id8512 . -3) (undo-tree-id8513 . -3) (undo-tree-id8514 . -3) (undo-tree-id8515 . -3) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2092) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) 2083) nil (25767 4981 602949 142000) 0 nil])
([nil nil ((apply yas--snippet-revive 1948 1999 #s(yas--snippet nil (#s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil))) #s(yas--exit 1980 nil) 2 nil #s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil))) #s(yas--exit 1980 nil) 2 nil #s(yas--field 1 1960 1960 nil nil nil t #s(yas--exit 1980 nil)) nil nil))) (25767 4935 534786 233000) 0 nil])
([nil nil ((2150 . 2152)) nil (25767 4981 602881 47000) 0 nil])
nil
([nil nil ((2058 . 2064) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2058 2064 nil nil nil t #s(yas--exit 2084 nil))) #s(yas--exit 2084 nil) 3 nil #s(yas--field 1 2058 2064 nil nil nil t #s(yas--exit 2084 nil)) nil nil)) (2080 . 2082) (2046 . 2089) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2046) (undo-tree-id8402 . -2) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -2) (undo-tree-id8412 . -2) (undo-tree-id8413 . -2) (undo-tree-id8414 . -2) (undo-tree-id8415 . -2) (undo-tree-id8416 . -2) (undo-tree-id8417 . -2) (undo-tree-id8418 . 2) (undo-tree-id8419 . -2) (undo-tree-id8420 . -2) (undo-tree-id8421 . -2) 2048 (2046 . 2048) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2046) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) 2047 (2046 . 2047) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2046) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2047) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) 2048 (2046 . 2048) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2046) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2047) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) 2048 (2046 . 2048) (2043 . 2046) 2026) nil (25767 4981 602871 737000) 0 nil])
([nil nil ((apply yas--snippet-revive 2046 2097 #s(yas--snippet nil (#s(yas--field 1 2058 2064 nil nil nil t #s(yas--exit 2084 nil))) #s(yas--exit 2084 nil) 3 nil #s(yas--field 1 2058 2064 nil nil nil t #s(yas--exit 2084 nil)) nil nil))) nil (25767 4981 602590 500000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 2081) (undo-tree-id8401 . -1)) nil (25767 4981 602589 625000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 2081) (undo-tree-id8398 . -2) (undo-tree-id8399 . -2) (undo-tree-id8400 . -3)) nil (25767 4981 602587 953000) 0 nil])
([nil nil ((#("train_size = dataset_size * 90 // 100 
dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size]) 
" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 6 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 10 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 21 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 25 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 39 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 48 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 49 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 69 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 70 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 76 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 77 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 83 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 98 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 99 103 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 103 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 105 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2094) (undo-tree-id8172 . -106) (undo-tree-id8173 . 50) (undo-tree-id8174 . -64) (undo-tree-id8175 . -64) (undo-tree-id8176 . -48) (undo-tree-id8177 . -48) (undo-tree-id8178 . -48) (undo-tree-id8179 . -48) (undo-tree-id8180 . -48) (undo-tree-id8181 . -48) (undo-tree-id8182 . -48) (undo-tree-id8183 . -48) (undo-tree-id8184 . 58) (undo-tree-id8185 . -51) (undo-tree-id8186 . -48) (undo-tree-id8187 . -48) (undo-tree-id8188 . -48) (undo-tree-id8189 . -48) (undo-tree-id8190 . -48) (undo-tree-id8191 . -48) (undo-tree-id8192 . -48) (undo-tree-id8193 . -48) (undo-tree-id8194 . -48) (undo-tree-id8195 . -48) (undo-tree-id8196 . -48) (undo-tree-id8197 . -48) (undo-tree-id8198 . -48) (undo-tree-id8199 . -48) (undo-tree-id8200 . -48) (undo-tree-id8201 . -48) (undo-tree-id8202 . -48) (undo-tree-id8203 . -48) (undo-tree-id8204 . -48) (undo-tree-id8205 . -48) (undo-tree-id8206 . -48) (undo-tree-id8207 . -48) (undo-tree-id8208 . -48) (undo-tree-id8209 . -48) (undo-tree-id8210 . -48) (undo-tree-id8211 . -48) (undo-tree-id8212 . -48) (undo-tree-id8213 . -48) (undo-tree-id8214 . -48) (undo-tree-id8215 . -48) (undo-tree-id8216 . -48) (undo-tree-id8217 . -48) (undo-tree-id8218 . -48) (undo-tree-id8219 . -48) (undo-tree-id8220 . -48) (undo-tree-id8221 . -48) (undo-tree-id8222 . -48) (undo-tree-id8223 . -48) (undo-tree-id8224 . -48) (undo-tree-id8225 . -48) (undo-tree-id8226 . -48) (undo-tree-id8227 . -48) (undo-tree-id8228 . -48) (undo-tree-id8229 . -48) (undo-tree-id8230 . -48) (undo-tree-id8231 . -48) (undo-tree-id8232 . -48) (undo-tree-id8233 . -48) (undo-tree-id8234 . -48) (undo-tree-id8235 . -48) (undo-tree-id8236 . -48) (undo-tree-id8237 . -48) (undo-tree-id8238 . -48) (undo-tree-id8239 . 94) (undo-tree-id8240 . -20) (undo-tree-id8241 . -13) (undo-tree-id8242 . -13) (undo-tree-id8243 . -13) (undo-tree-id8244 . -13) (undo-tree-id8245 . -13) (undo-tree-id8246 . -13) (undo-tree-id8247 . -13) (undo-tree-id8248 . -13) (undo-tree-id8249 . -20) (undo-tree-id8250 . -22) (undo-tree-id8251 . -26) (undo-tree-id8252 . -28) (undo-tree-id8253 . -31) (undo-tree-id8254 . -34) (undo-tree-id8255 . -38) (undo-tree-id8256 . -38) (undo-tree-id8257 . -38) (undo-tree-id8258 . -38) (undo-tree-id8259 . -38) (undo-tree-id8260 . -38) (undo-tree-id8261 . -38) (undo-tree-id8262 . -38) (undo-tree-id8263 . -38) (undo-tree-id8264 . -38) (undo-tree-id8265 . -38) (undo-tree-id8266 . -38) (undo-tree-id8267 . -38) (undo-tree-id8268 . -38) (undo-tree-id8269 . -38) (undo-tree-id8270 . -38) (undo-tree-id8271 . -38) (undo-tree-id8272 . -38) (undo-tree-id8273 . -39) (undo-tree-id8274 . -39) (undo-tree-id8275 . -39) (undo-tree-id8276 . -39) (undo-tree-id8277 . -39) (undo-tree-id8278 . -39) (undo-tree-id8279 . -39) (undo-tree-id8280 . -39) (undo-tree-id8281 . -39) (undo-tree-id8282 . -39) (undo-tree-id8283 . -39) (undo-tree-id8284 . -39) (undo-tree-id8285 . -39) (undo-tree-id8286 . -39) (undo-tree-id8287 . -39) (undo-tree-id8288 . -39) (undo-tree-id8289 . -39) (undo-tree-id8290 . -39) (undo-tree-id8291 . 68) (undo-tree-id8292 . -46) (undo-tree-id8293 . -39) (undo-tree-id8294 . -39) (undo-tree-id8295 . -39) (undo-tree-id8296 . -39) (undo-tree-id8297 . -39) (undo-tree-id8298 . -39) (undo-tree-id8299 . -39) (undo-tree-id8300 . -39) (undo-tree-id8301 . -39) (undo-tree-id8302 . -39) (undo-tree-id8303 . -48) (undo-tree-id8304 . -48) (undo-tree-id8305 . -48) (undo-tree-id8306 . -48) (undo-tree-id8307 . -48) (undo-tree-id8308 . -48) (undo-tree-id8309 . -48) (undo-tree-id8310 . -48) (undo-tree-id8311 . -48) (undo-tree-id8312 . -48) (undo-tree-id8313 . -48) (undo-tree-id8314 . -48) (undo-tree-id8315 . -48) (undo-tree-id8316 . -48) (undo-tree-id8317 . -48) (undo-tree-id8318 . -48) (undo-tree-id8319 . -48) (undo-tree-id8320 . -48) (undo-tree-id8321 . -48) (undo-tree-id8322 . -48) (undo-tree-id8323 . -48) (undo-tree-id8324 . -48) (undo-tree-id8325 . -48) (undo-tree-id8326 . -48) (undo-tree-id8327 . -48) (undo-tree-id8328 . -48) (undo-tree-id8329 . -48) (undo-tree-id8330 . -48) (undo-tree-id8331 . -48) (undo-tree-id8332 . -48) (undo-tree-id8333 . -48) (undo-tree-id8334 . -48) (undo-tree-id8335 . -48) (undo-tree-id8336 . -48) (undo-tree-id8337 . -48) (undo-tree-id8338 . -48) (undo-tree-id8339 . -48) (undo-tree-id8340 . -106) (undo-tree-id8341 . -106) (undo-tree-id8342 . -106) (undo-tree-id8343 . -106) (undo-tree-id8344 . -106) (undo-tree-id8345 . -106) (undo-tree-id8346 . -106) (undo-tree-id8347 . -106) (undo-tree-id8348 . -106) (undo-tree-id8349 . -106) (undo-tree-id8350 . -106) (undo-tree-id8351 . -106) (undo-tree-id8352 . -106) (undo-tree-id8353 . -106) (undo-tree-id8354 . -106) (undo-tree-id8355 . -106) (undo-tree-id8356 . -106) (undo-tree-id8357 . -106) (undo-tree-id8358 . -106) (undo-tree-id8359 . -106) (undo-tree-id8360 . -106) (undo-tree-id8361 . -106) (undo-tree-id8362 . -106) (undo-tree-id8363 . -106) (undo-tree-id8364 . -106) (undo-tree-id8365 . -106) (undo-tree-id8366 . -106) (undo-tree-id8367 . -106) (undo-tree-id8368 . -106) (undo-tree-id8369 . -106) (undo-tree-id8370 . -106) (undo-tree-id8371 . -106) (undo-tree-id8372 . -107) (undo-tree-id8373 . -107) (undo-tree-id8374 . -107) (undo-tree-id8375 . -107) (undo-tree-id8376 . -107) (undo-tree-id8377 . -107) (undo-tree-id8378 . -107) (undo-tree-id8379 . -107) (undo-tree-id8380 . -107) (undo-tree-id8381 . -107) (undo-tree-id8382 . -107) (undo-tree-id8383 . -107) (undo-tree-id8384 . -107) (undo-tree-id8385 . -107) (undo-tree-id8386 . -107) (undo-tree-id8387 . -107) (undo-tree-id8388 . -107) (undo-tree-id8389 . -39) (undo-tree-id8390 . -39) (undo-tree-id8391 . -39) (undo-tree-id8392 . -39) (undo-tree-id8393 . -39) (undo-tree-id8394 . -39) (undo-tree-id8395 . -39) (undo-tree-id8396 . -39) (undo-tree-id8397 . -107)) nil (25767 4981 602575 492000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2081 . 2082) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2188) (2081 . 2189)) nil (25767 4981 601771 413000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 2060) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (t 25767 4981 675646 107000)) nil (25767 4986 628667 267000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2061 . 2062) (nil fontified nil 2061 . 2062) (2061 . 2062) 2060) nil (25767 4986 628664 604000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2062 . 2063) (nil fontified nil 2062 . 2063) (2062 . 2063) 2061) nil (25767 4986 629058 153000) 0 nil])
([nil nil ((#("h" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 2062) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1)) nil (25767 4989 328401 853000) 0 nil] [nil nil ((2062 . 2063) (#("h" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 2062) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1)) ((2062 . 2063) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 2062)) (25767 4986 628658 354000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 2081) (undo-tree-id8577 . -1) (t 25767 4989 343730 967000)) nil (25767 4996 260943 630000) 0 nil])
nil
([nil nil ((2081 . 2083)) nil (25767 4996 260924 1000) 0 nil])
([nil nil ((2122 . 2124)) nil (25767 4996 260918 524000) 0 nil])
([nil nil ((2205 . 2207) (t 25767 4996 275807 941000)) nil (25767 5000 58986 768000) 0 nil])
([nil nil ((2230 . 2231) (#("  " 0 2 (fontified nil wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . 2230) (#("
" 0 1 (fontified t wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "")) . -2230) (undo-tree-id8578 . -1) 2207 (t 25767 5000 83850 326000)) nil (25767 5001 758295 105000) 0 nil])
([nil nil ((#("In other words, we assume that the " 0 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1564) (undo-tree-id8618 . -34) (undo-tree-id8619 . -34) (undo-tree-id8620 . -18) (undo-tree-id8621 . -18) (undo-tree-id8622 . -18) (undo-tree-id8623 . -18) (undo-tree-id8624 . -18) (undo-tree-id8625 . -18) (undo-tree-id8626 . -18) (undo-tree-id8627 . -18) (undo-tree-id8628 . -34) (undo-tree-id8629 . -3) (undo-tree-id8630 . -3) (undo-tree-id8631 . -3) (undo-tree-id8632 . -3) (undo-tree-id8633 . -3) (undo-tree-id8634 . -3) (undo-tree-id8635 . -3) (undo-tree-id8636 . -3) (undo-tree-id8637 . -3) (undo-tree-id8638 . -3) (undo-tree-id8639 . -3) (undo-tree-id8640 . -7) (undo-tree-id8641 . -7) (undo-tree-id8642 . -7) (undo-tree-id8643 . -7) (undo-tree-id8644 . -7) (undo-tree-id8645 . -7) (undo-tree-id8646 . -7) (undo-tree-id8647 . -7) (undo-tree-id8648 . -3) (undo-tree-id8649 . -3) (undo-tree-id8650 . -3) (undo-tree-id8651 . -3) (undo-tree-id8652 . -3) (undo-tree-id8653 . -3) (undo-tree-id8654 . -3) (undo-tree-id8655 . -3) (undo-tree-id8656 . -35) (undo-tree-id8657 . -34) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -7) (undo-tree-id8667 . -7) (undo-tree-id8668 . -7) (undo-tree-id8669 . -7) (undo-tree-id8670 . -7) (undo-tree-id8671 . -7) (undo-tree-id8672 . -7) (undo-tree-id8673 . -7) (undo-tree-id8674 . -13) (undo-tree-id8675 . -13) (undo-tree-id8676 . -13) (undo-tree-id8677 . -13) (undo-tree-id8678 . -13) (undo-tree-id8679 . -13) (undo-tree-id8680 . -13) (undo-tree-id8681 . -13) (undo-tree-id8682 . -14) (undo-tree-id8683 . -14) (undo-tree-id8684 . -14) (undo-tree-id8685 . -14) (undo-tree-id8686 . -14) (undo-tree-id8687 . -14) (undo-tree-id8688 . -14) (undo-tree-id8689 . -14) (undo-tree-id8690 . -17) (undo-tree-id8691 . -17) (undo-tree-id8692 . -17) (undo-tree-id8693 . -17) (undo-tree-id8694 . -17) (undo-tree-id8695 . -17) (undo-tree-id8696 . -17) (undo-tree-id8697 . -17) (undo-tree-id8698 . -24) (undo-tree-id8699 . -24) (undo-tree-id8700 . -24) (undo-tree-id8701 . -24) (undo-tree-id8702 . -24) (undo-tree-id8703 . -24) (undo-tree-id8704 . -24) (undo-tree-id8705 . -24) (undo-tree-id8706 . -29) (undo-tree-id8707 . -29) (undo-tree-id8708 . -29) (undo-tree-id8709 . -29) (undo-tree-id8710 . -29) (undo-tree-id8711 . -29) (undo-tree-id8712 . -29) (undo-tree-id8713 . -29) (undo-tree-id8714 . -33) (undo-tree-id8715 . -33) (undo-tree-id8716 . -33) (undo-tree-id8717 . -33) (undo-tree-id8718 . -33) (undo-tree-id8719 . -33) (undo-tree-id8720 . -33) (undo-tree-id8721 . -33) (undo-tree-id8722 . -35) (undo-tree-id8723 . -35) (undo-tree-id8724 . -35) (undo-tree-id8725 . -35) (undo-tree-id8726 . -35) (undo-tree-id8727 . -35) (undo-tree-id8728 . -35) (undo-tree-id8729 . -35) (undo-tree-id8730 . -31) (undo-tree-id8731 . -31) (undo-tree-id8732 . -31) (undo-tree-id8733 . -31) (undo-tree-id8734 . -31) (undo-tree-id8735 . -31) (undo-tree-id8736 . -31) (undo-tree-id8737 . -31) (undo-tree-id8738 . -32) (undo-tree-id8739 . -32) (undo-tree-id8740 . -32) (undo-tree-id8741 . -32) (undo-tree-id8742 . -32) (undo-tree-id8743 . -32) (undo-tree-id8744 . -32) (undo-tree-id8745 . -32) (undo-tree-id8746 . -33) (undo-tree-id8747 . -33) (undo-tree-id8748 . -33) (undo-tree-id8749 . -33) (undo-tree-id8750 . -33) (undo-tree-id8751 . -33) (undo-tree-id8752 . -33) (undo-tree-id8753 . -33) (undo-tree-id8754 . -34) (undo-tree-id8755 . -34) (undo-tree-id8756 . -34) (undo-tree-id8757 . -34) (undo-tree-id8758 . -34) (undo-tree-id8759 . -34) (undo-tree-id8760 . -34) (undo-tree-id8761 . -34) (undo-tree-id8762 . -34) (undo-tree-id8763 . -35) 1598 (t 25767 5001 779869 227000)) nil (25767 5051 782136 604000) 0 nil])
([nil nil ((1564 . 1575)) nil (25767 5051 781690 369000) 0 nil])
([nil nil ((1589 . 1590) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1589) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1589) (undo-tree-id8617 . -1) 1574) nil (25767 5051 781689 183000) 0 nil])
([nil nil ((#("is stationary " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1587) (undo-tree-id8590 . -13) (undo-tree-id8591 . -13) (undo-tree-id8592 . -13) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -2) (undo-tree-id8602 . -2) (undo-tree-id8603 . -2) (undo-tree-id8604 . -2) (undo-tree-id8605 . -2) (undo-tree-id8606 . -2) (undo-tree-id8607 . -2) (undo-tree-id8608 . -2) (undo-tree-id8609 . -2) (undo-tree-id8610 . -14) (undo-tree-id8611 . -13) (undo-tree-id8612 . -1) (undo-tree-id8613 . -12) (undo-tree-id8614 . -13) (undo-tree-id8615 . -13) (undo-tree-id8616 . -14) 1600) nil (25767 5051 781686 17000) 0 nil])
([nil nil ((1630 . 1632) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1630) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) 1631 (1612 . 1631)) nil (25767 5051 781664 417000) 0 nil])
([nil nil ((2241 . 2243) (t 25767 5051 851877 862000)) nil (25767 5121 771682 275000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4142 . 4143) (nil fontified nil 4072 . 4143) (nil fontified nil 3996 . 4072) (nil fontified nil 3924 . 3996) (nil fontified nil 3846 . 3924) (nil fontified nil 3777 . 3846) (nil fontified nil 3706 . 3777) (nil fontified nil 3642 . 3706) (nil fontified nil 3568 . 3642) (nil fontified nil 3493 . 3568) (nil fontified nil 3420 . 3493) (nil fontified nil 3349 . 3420) (nil fontified nil 3278 . 3349) (nil fontified nil 3253 . 3278) (nil fontified nil 3168 . 3253) (nil fontified nil 3084 . 3168) (nil fontified nil 3080 . 3084) (nil fontified nil 3010 . 3080) (nil fontified nil 2939 . 3010) (nil fontified nil 2925 . 2939) (nil fontified nil 2894 . 2925) (nil fontified nil 2821 . 2894) (nil fontified nil 2759 . 2821) (nil fontified nil 2683 . 2759) (nil fontified nil 2608 . 2683) (nil fontified nil 2534 . 2608) (nil fontified nil 2459 . 2534) (nil fontified nil 2386 . 2459) (nil fontified nil 2312 . 2386) (nil fontified nil 2243 . 2312) (2243 . 4143)) nil (25767 5121 771679 902000) 0 nil])
([nil nil ((4143 . 4144)) nil (25767 5121 771670 372000) 0 nil])
([nil nil ((2243 . 2245) (t 25767 5121 795296 534000)) nil (25767 5128 706735 842000) 0 nil])
([nil nil ((#("now" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2262) (undo-tree-id8787 . -2) (undo-tree-id8788 . -3) (undo-tree-id8789 . -3) (t 25767 5128 727248 128000)) nil (25767 5160 805026 660000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2261) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1)) nil (25767 5160 805378 328000) 0 nil])
([nil nil ((2922 . 2923) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2922) (undo-tree-id12129 . -1) (2891 . 2892) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2891) (undo-tree-id12130 . -1) (2818 . 2819) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2818) (undo-tree-id12131 . -1) (2756 . 2757) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2756) (undo-tree-id12132 . -1) (2680 . 2681) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2680) (undo-tree-id12133 . -1) (2605 . 2606) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2605) (undo-tree-id12134 . -1) (2531 . 2532) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2531) (undo-tree-id12135 . -1) (2456 . 2457) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2456) (undo-tree-id12136 . -1) (2383 . 2384) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2383) (undo-tree-id12137 . -1) (2309 . 2310) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2309) (undo-tree-id12138 . -1) 2253) nil (25767 5198 395510 80000) 0 nil] [nil nil ((2321 . 2322) (2320 . 2323)) ((#("
* " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 2320) (undo-tree-id8790 . -2) (undo-tree-id8791 . -2) (undo-tree-id8792 . -2) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2321)) (25767 5160 804993 590000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4141) (undo-tree-id11602 . -1) (4069 . 4070) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4069) (undo-tree-id11603 . -1) (3993 . 3994) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3993) (undo-tree-id11604 . -1) (3921 . 3922) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3921) (undo-tree-id11605 . -1) (3843 . 3844) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3843) (undo-tree-id11606 . -1) (3774 . 3775) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3774) (undo-tree-id11607 . -1) (3703 . 3704) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3703) (undo-tree-id11608 . -1) (3639 . 3640) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3639) (undo-tree-id11609 . -1) (3565 . 3566) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3565) (undo-tree-id11610 . -1) (3490 . 3491) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3490) (undo-tree-id11611 . -1) (undo-tree-id11612 . -1) (undo-tree-id11613 . -1) (undo-tree-id11614 . -1) (undo-tree-id11615 . -1) (undo-tree-id11616 . -1) (undo-tree-id11617 . -1) (undo-tree-id11618 . -1) (undo-tree-id11619 . -1) (undo-tree-id11620 . -1) (undo-tree-id11621 . -1) (undo-tree-id11622 . -1) (undo-tree-id11623 . -1) (undo-tree-id11624 . -1) (undo-tree-id11625 . -1) (undo-tree-id11626 . -1) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) (undo-tree-id11631 . -1) (undo-tree-id11632 . -1) (undo-tree-id11633 . -1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -1) (undo-tree-id11637 . -1) (undo-tree-id11638 . -1) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) (undo-tree-id11645 . -1) (undo-tree-id11646 . -1) (undo-tree-id11647 . -1) (undo-tree-id11648 . -1) (undo-tree-id11649 . -1) (undo-tree-id11650 . -1) (undo-tree-id11651 . -1) (undo-tree-id11652 . -1) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) (undo-tree-id11656 . -1) (undo-tree-id11657 . -1) (undo-tree-id11658 . -1) (undo-tree-id11659 . -1) (undo-tree-id11660 . -1) (undo-tree-id11661 . -1) (undo-tree-id11662 . -1) (undo-tree-id11663 . -1) (undo-tree-id11664 . -1) (undo-tree-id11665 . -1) (undo-tree-id11666 . -1) (undo-tree-id11667 . -1) (undo-tree-id11668 . -1) (undo-tree-id11669 . -1) (undo-tree-id11670 . -1) (undo-tree-id11671 . -1) (undo-tree-id11672 . -1) (undo-tree-id11673 . -1) (undo-tree-id11674 . -1) (undo-tree-id11675 . -1) (undo-tree-id11676 . -1) (undo-tree-id11677 . -1) (undo-tree-id11678 . -1) (undo-tree-id11679 . -1) (undo-tree-id11680 . -1) (undo-tree-id11681 . -1) (undo-tree-id11682 . -1) (undo-tree-id11683 . -1) (undo-tree-id11684 . -1) (undo-tree-id11685 . -1) (undo-tree-id11686 . -1) (undo-tree-id11687 . -1) (undo-tree-id11688 . -1) (undo-tree-id11689 . -1) (undo-tree-id11690 . -1) (undo-tree-id11691 . -1) (undo-tree-id11692 . -1) (undo-tree-id11693 . -1) (undo-tree-id11694 . -1) (undo-tree-id11695 . -1) (undo-tree-id11696 . -1) (undo-tree-id11697 . -1) (undo-tree-id11698 . -1) (undo-tree-id11699 . -1) (undo-tree-id11700 . -1) (undo-tree-id11701 . -1) (undo-tree-id11702 . -1) (undo-tree-id11703 . -1) (undo-tree-id11704 . -1) (undo-tree-id11705 . -1) (undo-tree-id11706 . -1) (undo-tree-id11707 . -1) (undo-tree-id11708 . -1) (undo-tree-id11709 . -1) (undo-tree-id11710 . -1) (undo-tree-id11711 . -1) (undo-tree-id11712 . -1) (undo-tree-id11713 . -1) (undo-tree-id11714 . -1) (undo-tree-id11715 . -1) (undo-tree-id11716 . -1) (undo-tree-id11717 . -1) (undo-tree-id11718 . -1) (undo-tree-id11719 . -1) (undo-tree-id11720 . -1) (undo-tree-id11721 . -1) (undo-tree-id11722 . -1) (undo-tree-id11723 . -1) (undo-tree-id11724 . -1) (undo-tree-id11725 . -1) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -1) (undo-tree-id11730 . -1) (undo-tree-id11731 . -1) (undo-tree-id11732 . -1) (undo-tree-id11733 . -1) (undo-tree-id11734 . -1) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) (undo-tree-id11744 . -1) (undo-tree-id11745 . -1) (undo-tree-id11746 . -1) (undo-tree-id11747 . -1) (undo-tree-id11748 . -1) (undo-tree-id11749 . -1) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (undo-tree-id11759 . -1) (undo-tree-id11760 . -1) (undo-tree-id11761 . -1) (undo-tree-id11762 . -1) (undo-tree-id11763 . -1) (undo-tree-id11764 . -1) (undo-tree-id11765 . -1) (undo-tree-id11766 . -1) (undo-tree-id11767 . -1) (undo-tree-id11768 . -1) (undo-tree-id11769 . -1) (undo-tree-id11770 . -1) (undo-tree-id11771 . -1) (undo-tree-id11772 . -1) (undo-tree-id11773 . -1) (undo-tree-id11774 . -1) (undo-tree-id11775 . -1) (undo-tree-id11776 . -1) (undo-tree-id11777 . -1) (undo-tree-id11778 . -1) (undo-tree-id11779 . -1) (undo-tree-id11780 . -1) (undo-tree-id11781 . -1) (undo-tree-id11782 . -1) (undo-tree-id11783 . -1) (undo-tree-id11784 . -1) (undo-tree-id11785 . -1) (undo-tree-id11786 . -1) (undo-tree-id11787 . -1) (undo-tree-id11788 . -1) (undo-tree-id11789 . -1) (undo-tree-id11790 . -1) (undo-tree-id11791 . -1) (undo-tree-id11792 . -1) (undo-tree-id11793 . -1) (undo-tree-id11794 . -1) (undo-tree-id11795 . -1) (undo-tree-id11796 . -1) (undo-tree-id11797 . -1) (undo-tree-id11798 . -1) (undo-tree-id11799 . -1) (undo-tree-id11800 . -1) (undo-tree-id11801 . -1) (undo-tree-id11802 . -1) (undo-tree-id11803 . -1) (undo-tree-id11804 . -1) (undo-tree-id11805 . -1) (undo-tree-id11806 . -1) (undo-tree-id11807 . -1) (undo-tree-id11808 . -1) (undo-tree-id11809 . -1) (undo-tree-id11810 . -1) (undo-tree-id11811 . -1) (undo-tree-id11812 . -1) (undo-tree-id11813 . -1) (undo-tree-id11814 . -1) (undo-tree-id11815 . -1) (undo-tree-id11816 . -1) (undo-tree-id11817 . -1) (undo-tree-id11818 . -1) (undo-tree-id11819 . -1) (undo-tree-id11820 . -1) (undo-tree-id11821 . -1) (undo-tree-id11822 . -1) (undo-tree-id11823 . -1) (undo-tree-id11824 . -1) (undo-tree-id11825 . -1) (undo-tree-id11826 . -1) (undo-tree-id11827 . -1) (undo-tree-id11828 . -1) (undo-tree-id11829 . -1) (undo-tree-id11830 . -1) (undo-tree-id11831 . -1) (undo-tree-id11832 . -1) (undo-tree-id11833 . -1) (undo-tree-id11834 . -1) (undo-tree-id11835 . -1) (undo-tree-id11836 . -1) (undo-tree-id11837 . -1) (undo-tree-id11838 . -1) (undo-tree-id11839 . -1) (undo-tree-id11840 . -1) (undo-tree-id11841 . -1) (undo-tree-id11842 . -1) (undo-tree-id11843 . -1) (undo-tree-id11844 . -1) (undo-tree-id11845 . -1) (undo-tree-id11846 . -1) (undo-tree-id11847 . -1) (undo-tree-id11848 . -1) (undo-tree-id11849 . -1) (undo-tree-id11850 . -1) (undo-tree-id11851 . -1) (undo-tree-id11852 . -1) (undo-tree-id11853 . -1) (undo-tree-id11854 . -1) (undo-tree-id11855 . -1) (undo-tree-id11856 . -1) (undo-tree-id11857 . -1) (undo-tree-id11858 . -1) (undo-tree-id11859 . -1) (undo-tree-id11860 . -1) (undo-tree-id11861 . -1) (undo-tree-id11862 . -1) (undo-tree-id11863 . -1) (undo-tree-id11864 . -1) (undo-tree-id11865 . -1) (undo-tree-id11866 . -1) (undo-tree-id11867 . -1) (undo-tree-id11868 . -1) (undo-tree-id11869 . -1) (undo-tree-id11870 . -1) (undo-tree-id11871 . -1) (undo-tree-id11872 . -1) (undo-tree-id11873 . -1) (undo-tree-id11874 . -1) (undo-tree-id11875 . -1) (undo-tree-id11876 . -1) (undo-tree-id11877 . -1) (undo-tree-id11878 . -1) (undo-tree-id11879 . -1) (undo-tree-id11880 . -1) (undo-tree-id11881 . -1) (undo-tree-id11882 . -1) (undo-tree-id11883 . -1) (undo-tree-id11884 . -1) (undo-tree-id11885 . -1) (undo-tree-id11886 . -1) (undo-tree-id11887 . -1) (undo-tree-id11888 . -1) (undo-tree-id11889 . -1) (undo-tree-id11890 . -1) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) (undo-tree-id11907 . -1) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1) (undo-tree-id11913 . -1) (undo-tree-id11914 . -1) (undo-tree-id11915 . -1) (undo-tree-id11916 . -1) (undo-tree-id11917 . -1) (undo-tree-id11918 . -1) (undo-tree-id11919 . -1) (undo-tree-id11920 . -1) (undo-tree-id11921 . -1) (undo-tree-id11922 . -1) (undo-tree-id11923 . -1) (undo-tree-id11924 . -1) (undo-tree-id11925 . -1) (undo-tree-id11926 . -1) (undo-tree-id11927 . -1) (undo-tree-id11928 . -1) (undo-tree-id11929 . -1) (undo-tree-id11930 . -1) (undo-tree-id11931 . -1) (undo-tree-id11932 . -1) (undo-tree-id11933 . -1) (undo-tree-id11934 . -1) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (undo-tree-id11940 . -1) (undo-tree-id11941 . -1) (undo-tree-id11942 . -1) (undo-tree-id11943 . -1) (undo-tree-id11944 . -1) (undo-tree-id11945 . -1) (undo-tree-id11946 . -1) (undo-tree-id11947 . -1) (undo-tree-id11948 . -1) (undo-tree-id11949 . -1) (undo-tree-id11950 . -1) (undo-tree-id11951 . -1) (undo-tree-id11952 . -1) (undo-tree-id11953 . -1) (undo-tree-id11954 . -1) (undo-tree-id11955 . -1) (undo-tree-id11956 . -1) (undo-tree-id11957 . -1) (undo-tree-id11958 . -1) (undo-tree-id11959 . -1) (undo-tree-id11960 . -1) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (undo-tree-id11963 . -1) (undo-tree-id11964 . -1) (undo-tree-id11965 . -1) (undo-tree-id11966 . -1) (undo-tree-id11967 . -1) (undo-tree-id11968 . -1) (undo-tree-id11969 . -1) (undo-tree-id11970 . -1) (undo-tree-id11971 . -1) (undo-tree-id11972 . -1) (undo-tree-id11973 . -1) (undo-tree-id11974 . -1) (undo-tree-id11975 . -1) (undo-tree-id11976 . -1) (undo-tree-id11977 . -1) (undo-tree-id11978 . -1) (undo-tree-id11979 . -1) (undo-tree-id11980 . -1) (undo-tree-id11981 . -1) (undo-tree-id11982 . -1) (undo-tree-id11983 . -1) (undo-tree-id11984 . -1) (undo-tree-id11985 . -1) (undo-tree-id11986 . -1) (undo-tree-id11987 . -1) (undo-tree-id11988 . -1) (undo-tree-id11989 . -1) (undo-tree-id11990 . -1) (undo-tree-id11991 . -1) (undo-tree-id11992 . -1) (undo-tree-id11993 . -1) (undo-tree-id11994 . -1) (undo-tree-id11995 . -1) (undo-tree-id11996 . -1) (undo-tree-id11997 . -1) (undo-tree-id11998 . -1) (undo-tree-id11999 . -1) (undo-tree-id12000 . -1) (undo-tree-id12001 . -1) (undo-tree-id12002 . -1) (undo-tree-id12003 . -1) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1) (undo-tree-id12006 . -1) (undo-tree-id12007 . -1) (undo-tree-id12008 . -1) (undo-tree-id12009 . -1) (undo-tree-id12010 . -1) (undo-tree-id12011 . -1) (undo-tree-id12012 . -1) (undo-tree-id12013 . -1) (undo-tree-id12014 . -1) (undo-tree-id12015 . -1) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (undo-tree-id12018 . -1) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) (undo-tree-id12027 . -1) (undo-tree-id12028 . -1) (undo-tree-id12029 . -1) (undo-tree-id12030 . -1) (undo-tree-id12031 . -1) (undo-tree-id12032 . -1) (undo-tree-id12033 . -1) (undo-tree-id12034 . -1) (undo-tree-id12035 . -1) (undo-tree-id12036 . -1) (undo-tree-id12037 . -1) (undo-tree-id12038 . -1) (undo-tree-id12039 . -1) (undo-tree-id12040 . -1) (undo-tree-id12041 . -1) (undo-tree-id12042 . -1) (undo-tree-id12043 . -1) (undo-tree-id12044 . -1) (undo-tree-id12045 . -1) (undo-tree-id12046 . -1) (undo-tree-id12047 . -1) (3417 . 3418) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3417) (undo-tree-id12048 . -1) (undo-tree-id12049 . -1) (undo-tree-id12050 . -1) (undo-tree-id12051 . -1) (undo-tree-id12052 . -1) (undo-tree-id12053 . -1) (undo-tree-id12054 . -1) (undo-tree-id12055 . -1) (undo-tree-id12056 . -1) (3346 . 3347) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3346) (undo-tree-id12057 . -1) (undo-tree-id12058 . -1) (undo-tree-id12059 . -1) (undo-tree-id12060 . -1) (undo-tree-id12061 . -1) (undo-tree-id12062 . -1) (undo-tree-id12063 . -1) (undo-tree-id12064 . -1) (undo-tree-id12065 . -1) (3275 . 3276) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3275) (undo-tree-id12066 . -1) (undo-tree-id12067 . -1) (undo-tree-id12068 . -1) (undo-tree-id12069 . -1) (undo-tree-id12070 . -1) (undo-tree-id12071 . -1) (undo-tree-id12072 . -1) (undo-tree-id12073 . -1) (undo-tree-id12074 . -1) (3250 . 3251) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3250) (undo-tree-id12075 . -1) (undo-tree-id12076 . -1) (undo-tree-id12077 . -1) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (3165 . 3166) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3165) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (3081 . 3082) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3081) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -1) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1) (undo-tree-id12100 . -1) (undo-tree-id12101 . -1) (3077 . 3078) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3077) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) (undo-tree-id12106 . -1) (undo-tree-id12107 . -1) (undo-tree-id12108 . -1) (undo-tree-id12109 . -1) (undo-tree-id12110 . -1) (3007 . 3008) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3007) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1) (undo-tree-id12118 . -1) (undo-tree-id12119 . -1) (2936 . 2937) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -2936) (undo-tree-id12120 . -1) (undo-tree-id12121 . -1) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) 2860) nil (25767 5198 395480 954000) 0 nil])
nil
([nil nil ((2243 . 4142) (#("- so we can’t just train the neural network directly on it: the RNN would be equivalent to a deep net with over a million layers, and we would have a single (very long) instance to train it. Instead, we will use the dataset’s window() method to convert this long sequence of characters into many smaller windows of text. Every instance in the dataset will be a fairly short substring of the whole text, and the RNN will be unrolled only over the length of these substrings. This is called truncated backpropagation through time. Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will
- The training set consists of a single sequence of over a million characters" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 63 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 64 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 64 136 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 136 137 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 137 211 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 211 212 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 212 285 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 285 286 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 286 315 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 315 360 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 360 361 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 361 421 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 421 423 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 423 424 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 424 436 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 436 437 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 437 498 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 498 499 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 499 540 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 540 571 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 571 572 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 572 602 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 602 603 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 603 604 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 604 605 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 605 610 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 610 616 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 616 617 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 617 623 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 623 624 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 624 630 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 630 634 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 634 635 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 635 640 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 640 687 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 687 688 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 688 719 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 719 720 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 720 726 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 726 741 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 741 742 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 742 751 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 751 757 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 757 758 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 758 761 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 761 762 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 762 782 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 782 783 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 783 788 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 788 815 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 815 845 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 845 846 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 846 919 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 919 920 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 920 925 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 925 930 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 930 931 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 931 937 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 937 955 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 955 956 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 956 1026 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1026 1027 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1027 1097 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1097 1098 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1098 1170 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1170 1171 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1171 1245 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1245 1246 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1246 1319 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1319 1320 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1320 1331 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1331 1332 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1332 1341 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1341 1383 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1383 1384 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1384 1454 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1454 1455 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1455 1456 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1456 1523 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1523 1524 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1524 1601 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1601 1602 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1602 1673 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1673 1674 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1674 1749 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1749 1750 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1750 1820 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1820 1821 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1821 1822 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1822 1823 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1823 1824 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1824 1832 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1832 1888 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1888 1889 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1889 1899 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 2243) (undo-tree-id8802 . -1899) (undo-tree-id8803 . -1899) (undo-tree-id8804 . -1899) (undo-tree-id8805 . -1824) (undo-tree-id8806 . 72) (undo-tree-id8807 . -1824) (undo-tree-id8808 . -1899) (undo-tree-id8809 . -1840) (undo-tree-id8810 . -1840) (undo-tree-id8811 . -1840) (undo-tree-id8812 . -1840) (undo-tree-id8813 . -1840) (undo-tree-id8814 . -1840) (undo-tree-id8815 . -1840) (undo-tree-id8816 . -1840) (undo-tree-id8817 . -1840) (undo-tree-id8818 . -1840) (undo-tree-id8819 . -1840) (undo-tree-id8820 . -1840) (undo-tree-id8821 . -1840) (undo-tree-id8822 . -1840) (undo-tree-id8823 . -1840) (undo-tree-id8824 . -1840) (undo-tree-id8825 . -1840) (undo-tree-id8826 . -1840) (undo-tree-id8827 . -1840) (undo-tree-id8828 . -1840) (undo-tree-id8829 . -1840) (undo-tree-id8830 . -1899) (undo-tree-id8831 . -1899) (undo-tree-id8832 . -1899) (undo-tree-id8833 . -1899) (undo-tree-id8834 . -1899) (undo-tree-id8835 . -1899) (undo-tree-id8836 . -1899) (undo-tree-id8837 . -1899) (undo-tree-id8838 . -1899) (undo-tree-id8839 . -1899) (undo-tree-id8840 . -1899) (undo-tree-id8841 . -1899) (undo-tree-id8842 . -1899) (undo-tree-id8843 . -1899) (undo-tree-id8844 . -1899) (undo-tree-id8845 . -1899) (undo-tree-id8846 . -1899) (undo-tree-id8847 . -1832) (undo-tree-id8848 . -1832) (undo-tree-id8849 . -1832) (undo-tree-id8850 . -1832) (undo-tree-id8851 . -1832) (undo-tree-id8852 . -1832) (undo-tree-id8853 . -1832) (undo-tree-id8854 . -1832) (undo-tree-id8855 . -1832) (undo-tree-id8856 . -1888) (undo-tree-id8857 . -1888) (undo-tree-id8858 . -1888) (undo-tree-id8859 . -1888) (undo-tree-id8860 . -1888) (undo-tree-id8861 . -1888) (undo-tree-id8862 . -1888) (undo-tree-id8863 . -1888) (undo-tree-id8864 . -1888) (undo-tree-id8865 . -1888) (undo-tree-id8866 . -1888) (undo-tree-id8867 . -1888) (undo-tree-id8868 . -1888) (undo-tree-id8869 . -1888) (undo-tree-id8870 . -1888) (undo-tree-id8871 . -1888) (undo-tree-id8872 . -1899) (undo-tree-id8873 . -1899) (undo-tree-id8874 . -1899) (undo-tree-id8875 . -1899) (undo-tree-id8876 . -1899) (undo-tree-id8877 . -1899) (undo-tree-id8878 . -1899) (undo-tree-id8879 . -1899) (undo-tree-id8880 . -1899) (undo-tree-id8881 . -1899) (undo-tree-id8882 . -1899) (undo-tree-id8883 . -1899) (undo-tree-id8884 . -1899) (undo-tree-id8885 . -1899) (undo-tree-id8886 . -1899) (undo-tree-id8887 . -1899) (undo-tree-id8888 . -1899) (undo-tree-id8889 . -1899) (undo-tree-id8890 . -1899) (undo-tree-id8891 . -1899) (undo-tree-id8892 . -1899) (undo-tree-id8893 . -1899) (undo-tree-id8894 . -1899) (undo-tree-id8895 . -1899) (undo-tree-id8896 . -1899) (undo-tree-id8897 . -1899) (undo-tree-id8898 . -1899) (undo-tree-id8899 . -1899) (undo-tree-id8900 . -1899) (undo-tree-id8901 . -1899) (undo-tree-id8902 . -1899) (undo-tree-id8903 . -1899) (undo-tree-id8904 . -1899) (undo-tree-id8905 . -1899) (undo-tree-id8906 . -1899) (undo-tree-id8907 . -1899) (undo-tree-id8908 . -1899) (undo-tree-id8909 . -1899) (undo-tree-id8910 . -1899) (undo-tree-id8911 . -1899) (undo-tree-id8912 . -1899) (undo-tree-id8913 . -1899) (undo-tree-id8914 . -1899) (undo-tree-id8915 . -1899) (undo-tree-id8916 . -1899) (undo-tree-id8917 . -1899) (undo-tree-id8918 . -1899) (undo-tree-id8919 . -1899) (undo-tree-id8920 . -1899) (undo-tree-id8921 . -1899) (undo-tree-id8922 . -1899) (undo-tree-id8923 . -1899) (undo-tree-id8924 . -1899) (undo-tree-id8925 . -1899) (undo-tree-id8926 . -1899) (undo-tree-id8927 . -1899) (undo-tree-id8928 . -1899) (undo-tree-id8929 . -1899) (undo-tree-id8930 . -1899) (undo-tree-id8931 . -1899) (undo-tree-id8932 . -1899) (undo-tree-id8933 . -1899) (undo-tree-id8934 . -1899) (undo-tree-id8935 . -1899) (undo-tree-id8936 . -1899) (undo-tree-id8937 . -1899) (undo-tree-id8938 . -1899) (undo-tree-id8939 . -1899) (undo-tree-id8940 . -1899) (undo-tree-id8941 . -1899) (undo-tree-id8942 . -1899) (undo-tree-id8943 . -1899) (undo-tree-id8944 . -1899) (undo-tree-id8945 . -1899) (undo-tree-id8946 . -1899) (undo-tree-id8947 . -1899) (undo-tree-id8948 . -1899) (undo-tree-id8949 . -1899) (undo-tree-id8950 . -1899) (undo-tree-id8951 . -1899) (undo-tree-id8952 . -1899) (undo-tree-id8953 . -1899) (undo-tree-id8954 . -1899) (undo-tree-id8955 . -1899) (undo-tree-id8956 . -1899) (undo-tree-id8957 . -1899) (undo-tree-id8958 . -1899) (undo-tree-id8959 . -1899) (undo-tree-id8960 . -1899) (undo-tree-id8961 . -1899) (undo-tree-id8962 . -1899) (undo-tree-id8963 . -1899) (undo-tree-id8964 . -1899) (undo-tree-id8965 . -1899) (undo-tree-id8966 . -1899) (undo-tree-id8967 . -1899) (undo-tree-id8968 . -1899) (undo-tree-id8969 . -1899) (undo-tree-id8970 . -1899) (undo-tree-id8971 . -1899) (undo-tree-id8972 . -1899) (undo-tree-id8973 . -1899) (undo-tree-id8974 . -1899) (undo-tree-id8975 . -1899) (undo-tree-id8976 . -1899) (undo-tree-id8977 . -1899) (undo-tree-id8978 . -1899) (undo-tree-id8979 . -1899) (undo-tree-id8980 . -1899) (undo-tree-id8981 . -1899) (undo-tree-id8982 . -1899) (undo-tree-id8983 . -1899) (undo-tree-id8984 . -1899) (undo-tree-id8985 . -1899) (undo-tree-id8986 . -1899) (undo-tree-id8987 . -1899) (undo-tree-id8988 . -1899) (undo-tree-id8989 . -1899) (undo-tree-id8990 . -1899) (undo-tree-id8991 . -1899) (undo-tree-id8992 . -1899) (undo-tree-id8993 . -1899) (undo-tree-id8994 . -1899) (undo-tree-id8995 . -1899) (undo-tree-id8996 . -1899) (undo-tree-id8997 . -1899) (undo-tree-id8998 . -1899) (undo-tree-id8999 . -1899) (undo-tree-id9000 . -1899) (undo-tree-id9001 . -1899) (undo-tree-id9002 . -1899) (undo-tree-id9003 . -1899) (undo-tree-id9004 . -1899) (undo-tree-id9005 . -1899) (undo-tree-id9006 . -1899) (undo-tree-id9007 . -1899) (undo-tree-id9008 . -1899) (undo-tree-id9009 . -1899) (undo-tree-id9010 . -1899) (undo-tree-id9011 . -1899) (undo-tree-id9012 . -1899) (undo-tree-id9013 . -1899) (undo-tree-id9014 . -1899) (undo-tree-id9015 . -1899) (undo-tree-id9016 . -1899) (undo-tree-id9017 . -1899) (undo-tree-id9018 . -1899) (undo-tree-id9019 . -1899) (undo-tree-id9020 . -1899) (undo-tree-id9021 . -1899) (undo-tree-id9022 . -1899) (undo-tree-id9023 . -1899) (undo-tree-id9024 . -1899) (undo-tree-id9025 . -1899) (undo-tree-id9026 . -1899) (undo-tree-id9027 . -1899) (undo-tree-id9028 . -1899) (undo-tree-id9029 . -1899) (undo-tree-id9030 . -1899) (undo-tree-id9031 . -1899) (undo-tree-id9032 . -1899) (undo-tree-id9033 . -1899) (undo-tree-id9034 . -1899) (undo-tree-id9035 . -1899) (undo-tree-id9036 . -1899) (undo-tree-id9037 . -1899) (undo-tree-id9038 . -1899) (undo-tree-id9039 . -1899) (undo-tree-id9040 . -1899) (undo-tree-id9041 . -1899) (undo-tree-id9042 . -1899) (undo-tree-id9043 . -1899) (undo-tree-id9044 . -1899) (undo-tree-id9045 . -1899) (undo-tree-id9046 . -1899) (undo-tree-id9047 . -1899) (undo-tree-id9048 . -1899) (undo-tree-id9049 . -1899) (undo-tree-id9050 . -1899) (undo-tree-id9051 . -1899) (undo-tree-id9052 . -1899) (undo-tree-id9053 . -1899) (undo-tree-id9054 . -1899) (undo-tree-id9055 . -1899) (undo-tree-id9056 . -1899) (undo-tree-id9057 . -1899) (undo-tree-id9058 . -1899) (undo-tree-id9059 . -1899) (undo-tree-id9060 . -1899) (undo-tree-id9061 . -1899) (undo-tree-id9062 . -1899) (undo-tree-id9063 . -1899) (undo-tree-id9064 . -1899) (undo-tree-id9065 . -1899) (undo-tree-id9066 . -1899) (undo-tree-id9067 . -1899) (undo-tree-id9068 . -1899) (undo-tree-id9069 . -1899) (undo-tree-id9070 . -1899) (undo-tree-id9071 . -1899) (undo-tree-id9072 . -1899) (undo-tree-id9073 . -1899) (undo-tree-id9074 . -1899) (undo-tree-id9075 . -1899) (undo-tree-id9076 . -1899) (undo-tree-id9077 . -1899) (undo-tree-id9078 . -1899) (undo-tree-id9079 . -1899) (undo-tree-id9080 . -1899) (undo-tree-id9081 . -1899) (undo-tree-id9082 . -1899) (undo-tree-id9083 . -1899) (undo-tree-id9084 . -1899) (undo-tree-id9085 . -1899) (undo-tree-id9086 . -1899) (undo-tree-id9087 . -1899) (undo-tree-id9088 . -1899) (undo-tree-id9089 . -1899) (undo-tree-id9090 . -1899) (undo-tree-id9091 . -1899) (undo-tree-id9092 . -1899) (undo-tree-id9093 . -1899) (undo-tree-id9094 . -1899) (undo-tree-id9095 . -1899) (undo-tree-id9096 . -1899) (undo-tree-id9097 . -1899) (undo-tree-id9098 . -1899) (undo-tree-id9099 . -1899) (undo-tree-id9100 . -1899) (undo-tree-id9101 . -1899) (undo-tree-id9102 . -1899) (undo-tree-id9103 . -1899) (undo-tree-id9104 . -1899) (undo-tree-id9105 . -1899) (undo-tree-id9106 . -1899) (undo-tree-id9107 . -1899) (undo-tree-id9108 . -1899) (undo-tree-id9109 . -1899) (undo-tree-id9110 . -1899) (undo-tree-id9111 . -1899) (undo-tree-id9112 . -1899) (undo-tree-id9113 . -1899) (undo-tree-id9114 . -1899) (undo-tree-id9115 . -1899) (undo-tree-id9116 . -1899) (undo-tree-id9117 . -1899) (undo-tree-id9118 . -1899) (undo-tree-id9119 . -1899) (undo-tree-id9120 . -1899) (undo-tree-id9121 . -1899) (undo-tree-id9122 . -1899) (undo-tree-id9123 . -1899) (undo-tree-id9124 . -1899) (undo-tree-id9125 . -1899) (undo-tree-id9126 . -1899) (undo-tree-id9127 . -1899) (undo-tree-id9128 . -1899) (undo-tree-id9129 . -1899) (undo-tree-id9130 . -1899) (undo-tree-id9131 . -1899) (undo-tree-id9132 . -1899) (undo-tree-id9133 . -1899) (undo-tree-id9134 . -1899) (undo-tree-id9135 . -1899) (undo-tree-id9136 . -1899) (undo-tree-id9137 . -1899) (undo-tree-id9138 . -1899) (undo-tree-id9139 . -1899) (undo-tree-id9140 . -1899) (undo-tree-id9141 . -1899) (undo-tree-id9142 . -1899) (undo-tree-id9143 . -1899) (undo-tree-id9144 . -1899) (undo-tree-id9145 . -1899) (undo-tree-id9146 . -1899) (undo-tree-id9147 . -1899) (undo-tree-id9148 . -1899) (undo-tree-id9149 . -1899) (undo-tree-id9150 . -1899) (undo-tree-id9151 . -1899) (undo-tree-id9152 . -1899) (undo-tree-id9153 . -1899) (undo-tree-id9154 . -1899) (undo-tree-id9155 . -1899) (undo-tree-id9156 . -1899) (undo-tree-id9157 . -1899) (undo-tree-id9158 . -1899) (undo-tree-id9159 . -1899) (undo-tree-id9160 . -1899) (undo-tree-id9161 . -1899) (undo-tree-id9162 . -1899) (undo-tree-id9163 . -1899) (undo-tree-id9164 . -1899) (undo-tree-id9165 . -1899) (undo-tree-id9166 . -1899) (undo-tree-id9167 . -1899) (undo-tree-id9168 . -1899) (undo-tree-id9169 . -1899) (undo-tree-id9170 . -1899) (undo-tree-id9171 . -1899) (undo-tree-id9172 . -1899) (undo-tree-id9173 . -1899) (undo-tree-id9174 . -1899) (undo-tree-id9175 . -1899) (undo-tree-id9176 . -1899) (undo-tree-id9177 . -1899) (undo-tree-id9178 . -1899) (undo-tree-id9179 . -1899) (undo-tree-id9180 . -1899) (undo-tree-id9181 . -1899) (undo-tree-id9182 . -1899) (undo-tree-id9183 . -1899) (undo-tree-id9184 . -1899) (undo-tree-id9185 . -1899) (undo-tree-id9186 . -1899) (undo-tree-id9187 . -1899) (undo-tree-id9188 . -1899) (undo-tree-id9189 . -1899) (undo-tree-id9190 . -1899) (undo-tree-id9191 . -1899) (undo-tree-id9192 . -1899) (undo-tree-id9193 . -1899) (undo-tree-id9194 . -1899) (undo-tree-id9195 . -1899) (undo-tree-id9196 . -1899) (undo-tree-id9197 . -1899) (undo-tree-id9198 . -1899) (undo-tree-id9199 . -1899) (undo-tree-id9200 . -1899) (undo-tree-id9201 . -1899) (undo-tree-id9202 . -1899) (undo-tree-id9203 . -1899) (undo-tree-id9204 . -1899) (undo-tree-id9205 . -1899) (undo-tree-id9206 . -1899) (undo-tree-id9207 . -1899) (undo-tree-id9208 . -1899) (undo-tree-id9209 . -1899) (undo-tree-id9210 . -1899) (undo-tree-id9211 . -1899) (undo-tree-id9212 . -1899) (undo-tree-id9213 . -1899) (undo-tree-id9214 . -1899) (undo-tree-id9215 . -1899) (undo-tree-id9216 . -1899) (undo-tree-id9217 . -1899) (undo-tree-id9218 . -1899) (undo-tree-id9219 . -1899) (undo-tree-id9220 . -1899) (undo-tree-id9221 . -1899) (undo-tree-id9222 . -1899) (undo-tree-id9223 . -1899) (undo-tree-id9224 . -1899) (undo-tree-id9225 . -1899) (undo-tree-id9226 . -1899) (undo-tree-id9227 . -1899) (undo-tree-id9228 . -1899) (undo-tree-id9229 . -1899) (undo-tree-id9230 . -1899) (undo-tree-id9231 . -1899) (undo-tree-id9232 . -1899) (undo-tree-id9233 . -1899) (undo-tree-id9234 . -1899) (undo-tree-id9235 . -1899) (undo-tree-id9236 . -1899) (undo-tree-id9237 . -1899) (undo-tree-id9238 . -1899) (undo-tree-id9239 . -1899) (undo-tree-id9240 . -1899) (undo-tree-id9241 . -1899) (undo-tree-id9242 . -1899) (undo-tree-id9243 . -1899) (undo-tree-id9244 . -1899) (undo-tree-id9245 . -1899) (undo-tree-id9246 . -1899) (undo-tree-id9247 . -1899) (undo-tree-id9248 . -1899) (undo-tree-id9249 . -1899) (undo-tree-id9250 . -1899) (undo-tree-id9251 . -1899) (undo-tree-id9252 . -1899) (undo-tree-id9253 . -1899) (undo-tree-id9254 . -1899) (undo-tree-id9255 . -1899) (undo-tree-id9256 . -1899) (undo-tree-id9257 . -1899) (undo-tree-id9258 . -1899) (undo-tree-id9259 . -1899) (undo-tree-id9260 . -1899) (undo-tree-id9261 . -1899) (undo-tree-id9262 . -1899) (undo-tree-id9263 . -1899) (undo-tree-id9264 . -1899) (undo-tree-id9265 . -1899) (undo-tree-id9266 . -1899) (undo-tree-id9267 . -1899) (undo-tree-id9268 . -1899) (undo-tree-id9269 . -1899) (undo-tree-id9270 . -1899) (undo-tree-id9271 . -1899) (undo-tree-id9272 . -1899) (undo-tree-id9273 . -1899) (undo-tree-id9274 . -1899) (undo-tree-id9275 . -1899) (undo-tree-id9276 . -1899) (undo-tree-id9277 . -1899) (undo-tree-id9278 . -1899) (undo-tree-id9279 . -1899) (undo-tree-id9280 . -1899) (undo-tree-id9281 . -1899) (undo-tree-id9282 . -1899) (undo-tree-id9283 . -1899) (undo-tree-id9284 . -1899) (undo-tree-id9285 . -1899) (undo-tree-id9286 . -1899) (undo-tree-id9287 . -1899) (undo-tree-id9288 . -1899) (undo-tree-id9289 . -1899) (undo-tree-id9290 . -1899) (undo-tree-id9291 . -1899) (undo-tree-id9292 . -1899) (undo-tree-id9293 . -1899) (undo-tree-id9294 . -1899) (undo-tree-id9295 . -1899) (undo-tree-id9296 . -1899) (undo-tree-id9297 . -1899) (undo-tree-id9298 . -1899) (undo-tree-id9299 . -1899) (undo-tree-id9300 . -1899) (undo-tree-id9301 . -1899) (undo-tree-id9302 . -1899) (undo-tree-id9303 . -1899) (undo-tree-id9304 . -1899) (undo-tree-id9305 . -1899) (undo-tree-id9306 . -1899) (undo-tree-id9307 . -1899) (undo-tree-id9308 . -1899) (undo-tree-id9309 . -1899) (undo-tree-id9310 . -1899) (undo-tree-id9311 . -1899) (undo-tree-id9312 . -1899) (undo-tree-id9313 . -1899) (undo-tree-id9314 . -1899) (undo-tree-id9315 . -1899) (undo-tree-id9316 . -1899) (undo-tree-id9317 . -1899) (undo-tree-id9318 . -1899) (undo-tree-id9319 . -1899) (undo-tree-id9320 . -1899) (undo-tree-id9321 . -1899) (undo-tree-id9322 . -1899) (undo-tree-id9323 . -1899) (undo-tree-id9324 . -1899) (undo-tree-id9325 . -1899) (undo-tree-id9326 . -1899) (undo-tree-id9327 . -1899) (undo-tree-id9328 . -1899) (undo-tree-id9329 . -1899) (undo-tree-id9330 . -1899) (undo-tree-id9331 . -1899) (undo-tree-id9332 . -1899) (undo-tree-id9333 . -1899) (undo-tree-id9334 . -1899) (undo-tree-id9335 . -1899) (undo-tree-id9336 . -1899) (undo-tree-id9337 . -1899) (undo-tree-id9338 . -1899) (undo-tree-id9339 . -1899) (undo-tree-id9340 . -1899) (undo-tree-id9341 . -1899) (undo-tree-id9342 . -1899) (undo-tree-id9343 . -1899) (undo-tree-id9344 . -1899) (undo-tree-id9345 . -1899) (undo-tree-id9346 . -1899) (undo-tree-id9347 . -1899) (undo-tree-id9348 . -1899) (undo-tree-id9349 . -1899) (undo-tree-id9350 . -1899) (undo-tree-id9351 . -1899) (undo-tree-id9352 . -1899) (undo-tree-id9353 . -1899) (undo-tree-id9354 . -1899) (undo-tree-id9355 . -1899) (undo-tree-id9356 . -1899) (undo-tree-id9357 . -1899) (undo-tree-id9358 . -1899) (undo-tree-id9359 . -1899) (undo-tree-id9360 . -1899) (undo-tree-id9361 . -1899) (undo-tree-id9362 . -1899) (undo-tree-id9363 . -1899) (undo-tree-id9364 . -1899) (undo-tree-id9365 . -1899) (undo-tree-id9366 . -1899) (undo-tree-id9367 . -1899) (undo-tree-id9368 . -1899) (undo-tree-id9369 . -1899) (undo-tree-id9370 . -1899) (undo-tree-id9371 . -1899) (undo-tree-id9372 . -1899) (undo-tree-id9373 . -1899) (undo-tree-id9374 . -1899) (undo-tree-id9375 . -1899) (undo-tree-id9376 . -1899) (undo-tree-id9377 . -1899) (undo-tree-id9378 . -1899) (undo-tree-id9379 . -1899) (undo-tree-id9380 . -1899) (undo-tree-id9381 . -1899) (undo-tree-id9382 . -1899) (undo-tree-id9383 . -1899) (undo-tree-id9384 . -1899) (undo-tree-id9385 . -1899) (undo-tree-id9386 . -1899) (undo-tree-id9387 . -1899) (undo-tree-id9388 . -1899) (undo-tree-id9389 . -1899) (undo-tree-id9390 . -1899) (undo-tree-id9391 . -1899) (undo-tree-id9392 . -1899) (undo-tree-id9393 . -1899) (undo-tree-id9394 . -1899) (undo-tree-id9395 . -1899) (undo-tree-id9396 . -1899) (undo-tree-id9397 . -1899) (undo-tree-id9398 . -1899) (undo-tree-id9399 . -1899) (undo-tree-id9400 . -1899) (undo-tree-id9401 . -1899) (undo-tree-id9402 . -1899) (undo-tree-id9403 . -1899) (undo-tree-id9404 . -1899) (undo-tree-id9405 . -1899) (undo-tree-id9406 . -1899) (undo-tree-id9407 . -1899) (undo-tree-id9408 . -1899) (undo-tree-id9409 . -1899) (undo-tree-id9410 . -1899) (undo-tree-id9411 . -1899) (undo-tree-id9412 . -1899) (undo-tree-id9413 . -1899) (undo-tree-id9414 . -1899) (undo-tree-id9415 . -1899) (undo-tree-id9416 . -1899) (undo-tree-id9417 . -1899) (undo-tree-id9418 . -1899) (undo-tree-id9419 . -1899) (undo-tree-id9420 . -1899) (undo-tree-id9421 . -1899) (undo-tree-id9422 . -1899) (undo-tree-id9423 . -1899) (undo-tree-id9424 . -1899) (undo-tree-id9425 . -1899) (undo-tree-id9426 . -1899) (undo-tree-id9427 . -1899) (undo-tree-id9428 . -1899) (undo-tree-id9429 . -1899) (undo-tree-id9430 . -1899) (undo-tree-id9431 . -1899) (undo-tree-id9432 . -1899) (undo-tree-id9433 . -1899) (undo-tree-id9434 . -1899) (undo-tree-id9435 . -1899) (undo-tree-id9436 . -1899) (undo-tree-id9437 . -1899) (undo-tree-id9438 . -1899) (undo-tree-id9439 . -1899) (undo-tree-id9440 . -1899) (undo-tree-id9441 . -1899) (undo-tree-id9442 . -1899) (undo-tree-id9443 . -1899) (undo-tree-id9444 . -1899) (undo-tree-id9445 . -1899) (undo-tree-id9446 . -1899) (undo-tree-id9447 . -1899) (undo-tree-id9448 . -1899) (undo-tree-id9449 . -1899) (undo-tree-id9450 . -1899) (undo-tree-id9451 . -1899) (undo-tree-id9452 . -1899) (undo-tree-id9453 . -1899) (undo-tree-id9454 . -1899) (undo-tree-id9455 . -1899) (undo-tree-id9456 . -1899) (undo-tree-id9457 . -1899) (undo-tree-id9458 . -1899) (undo-tree-id9459 . -1899) (undo-tree-id9460 . -1899) (undo-tree-id9461 . -1899) (undo-tree-id9462 . -1899) (undo-tree-id9463 . -1899) (undo-tree-id9464 . -1899) (undo-tree-id9465 . -1899) (undo-tree-id9466 . -1899) (undo-tree-id9467 . -1899) (undo-tree-id9468 . -1899) (undo-tree-id9469 . -1899) (undo-tree-id9470 . -1899) (undo-tree-id9471 . -1899) (undo-tree-id9472 . -1899) (undo-tree-id9473 . -1899) (undo-tree-id9474 . -1899) (undo-tree-id9475 . -1899) (undo-tree-id9476 . -1899) (undo-tree-id9477 . -1899) (undo-tree-id9478 . -1899) (undo-tree-id9479 . -1899) (undo-tree-id9480 . -1899) (undo-tree-id9481 . -1899) (undo-tree-id9482 . -1899) (undo-tree-id9483 . -1899) (undo-tree-id9484 . -1899) (undo-tree-id9485 . -1899) (undo-tree-id9486 . -1899) (undo-tree-id9487 . -1899) (undo-tree-id9488 . -1899) (undo-tree-id9489 . -1899) (undo-tree-id9490 . -1899) (undo-tree-id9491 . -1899) (undo-tree-id9492 . -1899) (undo-tree-id9493 . -1899) (undo-tree-id9494 . -1899) (undo-tree-id9495 . -1899) (undo-tree-id9496 . -1899) (undo-tree-id9497 . -1899) (undo-tree-id9498 . -1899) (undo-tree-id9499 . -1899) (undo-tree-id9500 . -1899) (undo-tree-id9501 . -1899) (undo-tree-id9502 . -1899) (undo-tree-id9503 . -1899) (undo-tree-id9504 . -1899) (undo-tree-id9505 . -1899) (undo-tree-id9506 . -1899) (undo-tree-id9507 . -1899) (undo-tree-id9508 . -1899) (undo-tree-id9509 . -1899) (undo-tree-id9510 . -1899) (undo-tree-id9511 . -1899) (undo-tree-id9512 . -1899) (undo-tree-id9513 . -1899) (undo-tree-id9514 . -1899) (undo-tree-id9515 . -1899) (undo-tree-id9516 . -1899) (undo-tree-id9517 . -1899) (undo-tree-id9518 . -1899) (undo-tree-id9519 . -1899) (undo-tree-id9520 . -1899) (undo-tree-id9521 . -1899) (undo-tree-id9522 . -1899) (undo-tree-id9523 . -1899) (undo-tree-id9524 . -1899) (undo-tree-id9525 . -1899) (undo-tree-id9526 . -1899) (undo-tree-id9527 . -1899) (undo-tree-id9528 . -1899) (undo-tree-id9529 . -1899) (undo-tree-id9530 . -1899) (undo-tree-id9531 . -1899) (undo-tree-id9532 . -1899) (undo-tree-id9533 . -1899) (undo-tree-id9534 . -1899) (undo-tree-id9535 . -1899) (undo-tree-id9536 . -1899) (undo-tree-id9537 . -1899) (undo-tree-id9538 . -1899) (undo-tree-id9539 . -1899) (undo-tree-id9540 . -1899) (undo-tree-id9541 . -1899) (undo-tree-id9542 . -1899) (undo-tree-id9543 . -1899) (undo-tree-id9544 . -1899) (undo-tree-id9545 . -1899) (undo-tree-id9546 . -1899) (undo-tree-id9547 . -1899) (undo-tree-id9548 . -1899) (undo-tree-id9549 . -1899) (undo-tree-id9550 . -1899) (undo-tree-id9551 . -1899) (undo-tree-id9552 . -1899) (undo-tree-id9553 . -1899) (undo-tree-id9554 . -1899) (undo-tree-id9555 . -1899) (undo-tree-id9556 . -1899) (undo-tree-id9557 . -1899) (undo-tree-id9558 . -1899) (undo-tree-id9559 . -1899) (undo-tree-id9560 . -1899) (undo-tree-id9561 . -1899) (undo-tree-id9562 . -1899) (undo-tree-id9563 . -1899) (undo-tree-id9564 . -1899) (undo-tree-id9565 . -1899) (undo-tree-id9566 . -1899) (undo-tree-id9567 . -1899) (undo-tree-id9568 . -1899) (undo-tree-id9569 . -1899) (undo-tree-id9570 . -1899) (undo-tree-id9571 . -1899) (undo-tree-id9572 . -1899) (undo-tree-id9573 . -1899) (undo-tree-id9574 . -1899) (undo-tree-id9575 . -1899) (undo-tree-id9576 . -1899) (undo-tree-id9577 . -1899) (undo-tree-id9578 . -1899) (undo-tree-id9579 . -1899) (undo-tree-id9580 . -1899) (undo-tree-id9581 . -1899) (undo-tree-id9582 . -1899) (undo-tree-id9583 . -1899) (undo-tree-id9584 . -1899) (undo-tree-id9585 . -1899) (undo-tree-id9586 . -1899) (undo-tree-id9587 . -1899) (undo-tree-id9588 . -1899) (undo-tree-id9589 . -1899) (undo-tree-id9590 . -1899) (undo-tree-id9591 . -1899) (undo-tree-id9592 . -1899) (undo-tree-id9593 . -1899) (undo-tree-id9594 . -1899) (undo-tree-id9595 . -1899) (undo-tree-id9596 . -1899) (undo-tree-id9597 . -1899) (undo-tree-id9598 . -1899) (undo-tree-id9599 . -1899) (undo-tree-id9600 . -1899) (undo-tree-id9601 . -1899) (undo-tree-id9602 . -1899) (undo-tree-id9603 . -1899) (undo-tree-id9604 . -1899) (undo-tree-id9605 . -1899) (undo-tree-id9606 . -1899) (undo-tree-id9607 . -1899) (undo-tree-id9608 . -1899) (undo-tree-id9609 . -1899) (undo-tree-id9610 . -1899) (undo-tree-id9611 . -1899) (undo-tree-id9612 . -1899) (undo-tree-id9613 . -1899) (undo-tree-id9614 . -1899) (undo-tree-id9615 . -1899) (undo-tree-id9616 . -1899) (undo-tree-id9617 . -1899) (undo-tree-id9618 . -1899) (undo-tree-id9619 . -1899) (undo-tree-id9620 . -1899) (undo-tree-id9621 . -1899) (undo-tree-id9622 . -1899) (undo-tree-id9623 . -1899) (undo-tree-id9624 . -1899) (undo-tree-id9625 . -1899) (undo-tree-id9626 . -1899) (undo-tree-id9627 . -1899) (undo-tree-id9628 . -1899) (undo-tree-id9629 . -1899) (undo-tree-id9630 . -1899) (undo-tree-id9631 . -1899) (undo-tree-id9632 . -1899) (undo-tree-id9633 . -1899) (undo-tree-id9634 . -1899) (undo-tree-id9635 . -1899) (undo-tree-id9636 . -1899) (undo-tree-id9637 . -1899) (undo-tree-id9638 . -1899) (undo-tree-id9639 . -1899) (undo-tree-id9640 . -1899) (undo-tree-id9641 . -1899) (undo-tree-id9642 . -1899) (undo-tree-id9643 . -1899) (undo-tree-id9644 . -1899) (undo-tree-id9645 . -1899) (undo-tree-id9646 . -1899) (undo-tree-id9647 . -1899) (undo-tree-id9648 . -1899) (undo-tree-id9649 . -1899) (undo-tree-id9650 . -1899) (undo-tree-id9651 . -1899) (undo-tree-id9652 . -1899) (undo-tree-id9653 . -1899) (undo-tree-id9654 . -1899) (undo-tree-id9655 . -1899) (undo-tree-id9656 . -1899) (undo-tree-id9657 . -1899) (undo-tree-id9658 . -1899) (undo-tree-id9659 . -1899) (undo-tree-id9660 . -1899) (undo-tree-id9661 . -1899) (undo-tree-id9662 . -1899) (undo-tree-id9663 . -1899) (undo-tree-id9664 . -1899) (undo-tree-id9665 . -1899) (undo-tree-id9666 . -1899) (undo-tree-id9667 . -1899) (undo-tree-id9668 . -1899) (undo-tree-id9669 . -1899) (undo-tree-id9670 . -1899) (undo-tree-id9671 . -1899) (undo-tree-id9672 . -1899) (undo-tree-id9673 . -1899) (undo-tree-id9674 . -1899) (undo-tree-id9675 . -1899) (undo-tree-id9676 . -1899) (undo-tree-id9677 . -1899) (undo-tree-id9678 . -1899) (undo-tree-id9679 . -1899) (undo-tree-id9680 . -1899) (undo-tree-id9681 . -1899) (undo-tree-id9682 . -1899) (undo-tree-id9683 . -1899) (undo-tree-id9684 . -1899) (undo-tree-id9685 . -1899) (undo-tree-id9686 . -1899) (undo-tree-id9687 . -1899) (undo-tree-id9688 . -1899) (undo-tree-id9689 . -1899) (undo-tree-id9690 . -1899) (undo-tree-id9691 . -1899) (undo-tree-id9692 . -1899) (undo-tree-id9693 . -1899) (undo-tree-id9694 . -1899) (undo-tree-id9695 . -1899) (undo-tree-id9696 . -1899) (undo-tree-id9697 . -1899) (undo-tree-id9698 . -1899) (undo-tree-id9699 . -1899) (undo-tree-id9700 . -1899) (undo-tree-id9701 . -1899) (undo-tree-id9702 . -1899) (undo-tree-id9703 . -1899) (undo-tree-id9704 . -1899) (undo-tree-id9705 . -1899) (undo-tree-id9706 . -1899) (undo-tree-id9707 . -1899) (undo-tree-id9708 . -1899) (undo-tree-id9709 . -1899) (undo-tree-id9710 . -1899) (undo-tree-id9711 . -1899) (undo-tree-id9712 . -1899) (undo-tree-id9713 . -1899) (undo-tree-id9714 . -1899) (undo-tree-id9715 . -1899) (undo-tree-id9716 . -1899) (undo-tree-id9717 . -1899) (undo-tree-id9718 . -1899) (undo-tree-id9719 . -1899) (undo-tree-id9720 . -1899) (undo-tree-id9721 . -1899) (undo-tree-id9722 . -1899) (undo-tree-id9723 . -1899) (undo-tree-id9724 . -1899) (undo-tree-id9725 . -1899) (undo-tree-id9726 . -1899) (undo-tree-id9727 . -1899) (undo-tree-id9728 . -1899) (undo-tree-id9729 . -1899) (undo-tree-id9730 . -1899) (undo-tree-id9731 . -1899) (undo-tree-id9732 . -1899) (undo-tree-id9733 . -1899) (undo-tree-id9734 . -1899) (undo-tree-id9735 . -1899) (undo-tree-id9736 . -1899) (undo-tree-id9737 . -1899) (undo-tree-id9738 . -1899) (undo-tree-id9739 . -1899) (undo-tree-id9740 . -1899) (undo-tree-id9741 . -1899) (undo-tree-id9742 . -1899) (undo-tree-id9743 . -1899) (undo-tree-id9744 . -1899) (undo-tree-id9745 . -1899) (undo-tree-id9746 . -1899) (undo-tree-id9747 . -1899) (undo-tree-id9748 . -1899) (undo-tree-id9749 . -1899) (undo-tree-id9750 . -1899) (undo-tree-id9751 . -1899) (undo-tree-id9752 . -1899) (undo-tree-id9753 . -1899) (undo-tree-id9754 . -1899) (undo-tree-id9755 . -1899) (undo-tree-id9756 . -1899) (undo-tree-id9757 . -1899) (undo-tree-id9758 . -1899) (undo-tree-id9759 . -1899) (undo-tree-id9760 . -1899) (undo-tree-id9761 . -1899) (undo-tree-id9762 . -1899) (undo-tree-id9763 . -1899) (undo-tree-id9764 . -1899) (undo-tree-id9765 . -1899) (undo-tree-id9766 . -1899) (undo-tree-id9767 . -1899) (undo-tree-id9768 . -1899) (undo-tree-id9769 . -1899) (undo-tree-id9770 . -1899) (undo-tree-id9771 . -1899) (undo-tree-id9772 . -1899) (undo-tree-id9773 . -1899) (undo-tree-id9774 . -1899) (undo-tree-id9775 . -1899) (undo-tree-id9776 . -1899) (undo-tree-id9777 . -1899) (undo-tree-id9778 . -1899) (undo-tree-id9779 . -1899) (undo-tree-id9780 . -1899) (undo-tree-id9781 . -1899) (undo-tree-id9782 . -1899) (undo-tree-id9783 . -1899) (undo-tree-id9784 . -1899) (undo-tree-id9785 . -1899) (undo-tree-id9786 . -1899) (undo-tree-id9787 . -1899) (undo-tree-id9788 . -1899) (undo-tree-id9789 . -1899) (undo-tree-id9790 . -1899) (undo-tree-id9791 . -1899) (undo-tree-id9792 . -1899) (undo-tree-id9793 . -1899) (undo-tree-id9794 . -1899) (undo-tree-id9795 . -1899) (undo-tree-id9796 . -1899) (undo-tree-id9797 . -1899) (undo-tree-id9798 . -1899) (undo-tree-id9799 . -1899) (undo-tree-id9800 . -1899) (undo-tree-id9801 . -1899) (undo-tree-id9802 . -1899) (undo-tree-id9803 . -1899) (undo-tree-id9804 . -1899) (undo-tree-id9805 . -1899) (undo-tree-id9806 . -1899) (undo-tree-id9807 . -1899) (undo-tree-id9808 . -1899) (undo-tree-id9809 . -1899) (undo-tree-id9810 . -1899) (undo-tree-id9811 . -1899) (undo-tree-id9812 . -1899) (undo-tree-id9813 . -1899) (undo-tree-id9814 . -1899) (undo-tree-id9815 . -1899) (undo-tree-id9816 . -1899) (undo-tree-id9817 . -1899) (undo-tree-id9818 . -1899) (undo-tree-id9819 . -1899) (undo-tree-id9820 . -1899) (undo-tree-id9821 . -1899) (undo-tree-id9822 . -1899) (undo-tree-id9823 . -1899) (undo-tree-id9824 . -1899) (undo-tree-id9825 . -1899) (undo-tree-id9826 . -1899) (undo-tree-id9827 . -1899) (undo-tree-id9828 . -1899) (undo-tree-id9829 . -1899) (undo-tree-id9830 . -1899) (undo-tree-id9831 . -1899) (undo-tree-id9832 . -1899) (undo-tree-id9833 . -1899) (undo-tree-id9834 . -1899) (undo-tree-id9835 . -1899) (undo-tree-id9836 . -1899) (undo-tree-id9837 . -1899) (undo-tree-id9838 . -1899) (undo-tree-id9839 . -1899) (undo-tree-id9840 . -1899) (undo-tree-id9841 . -1899) (undo-tree-id9842 . -1899) (undo-tree-id9843 . -1899) (undo-tree-id9844 . -1899) (undo-tree-id9845 . -1899) (undo-tree-id9846 . -1824) (undo-tree-id9847 . -1899) (undo-tree-id9848 . -1899) (undo-tree-id9849 . -1899) (undo-tree-id9850 . -1899) (undo-tree-id9851 . -1899) (undo-tree-id9852 . -1899) (undo-tree-id9853 . -1899) (undo-tree-id9854 . -1899) (undo-tree-id9855 . -1899) (undo-tree-id9856 . -1899) (undo-tree-id9857 . -1899) (undo-tree-id9858 . -1899) (undo-tree-id9859 . -1899) (undo-tree-id9860 . -1899) (undo-tree-id9861 . -1899) (undo-tree-id9862 . -1899) (undo-tree-id9863 . -1899) (undo-tree-id9864 . -1899) (undo-tree-id9865 . -1899) (undo-tree-id9866 . -1899) (undo-tree-id9867 . -1899) (undo-tree-id9868 . -1899) (undo-tree-id9869 . -1899) (undo-tree-id9870 . -1899) (undo-tree-id9871 . -1899) (undo-tree-id9872 . -1899) (undo-tree-id9873 . -1899) (undo-tree-id9874 . -1899) (undo-tree-id9875 . -1899) (undo-tree-id9876 . -1899) (undo-tree-id9877 . -1899) (undo-tree-id9878 . -1899) (undo-tree-id9879 . -1899) (undo-tree-id9880 . -1899) (undo-tree-id9881 . -1899) (undo-tree-id9882 . -1899) (undo-tree-id9883 . -1899) (undo-tree-id9884 . -1899) (undo-tree-id9885 . -1899) (undo-tree-id9886 . -1899) (undo-tree-id9887 . -1899) (undo-tree-id9888 . -1899) (undo-tree-id9889 . -1899) (undo-tree-id9890 . -1899) (undo-tree-id9891 . -1899) (undo-tree-id9892 . -1899) (undo-tree-id9893 . -1899) (undo-tree-id9894 . -1899) (undo-tree-id9895 . -1899) (undo-tree-id9896 . -1899) (undo-tree-id9897 . -1899) (undo-tree-id9898 . -1899) (undo-tree-id9899 . -1899) (undo-tree-id9900 . -1899) (undo-tree-id9901 . -1899) (undo-tree-id9902 . -1899) (undo-tree-id9903 . -1899) (undo-tree-id9904 . -1899) (undo-tree-id9905 . -1899) (undo-tree-id9906 . -1899) (undo-tree-id9907 . -1899) (undo-tree-id9908 . -1899) (undo-tree-id9909 . -1899) (undo-tree-id9910 . -1899) (undo-tree-id9911 . -1899) (undo-tree-id9912 . -1899) (undo-tree-id9913 . -1899) (undo-tree-id9914 . -1899) (undo-tree-id9915 . -1899) (undo-tree-id9916 . -1899) (undo-tree-id9917 . -1899) (undo-tree-id9918 . -1899) (undo-tree-id9919 . -1899) (undo-tree-id9920 . -1899) (undo-tree-id9921 . -1899) (undo-tree-id9922 . -1899) (undo-tree-id9923 . -1899) (undo-tree-id9924 . -1899) (undo-tree-id9925 . -1899) (undo-tree-id9926 . -1899) (undo-tree-id9927 . -1899) (undo-tree-id9928 . -1899) (undo-tree-id9929 . -1899) (undo-tree-id9930 . -1899) (undo-tree-id9931 . -1899) (undo-tree-id9932 . -1899) (undo-tree-id9933 . -1899) (undo-tree-id9934 . -1899) (undo-tree-id9935 . -1899) (undo-tree-id9936 . -1899) (undo-tree-id9937 . -1899) (undo-tree-id9938 . -1899) (undo-tree-id9939 . -1899) (undo-tree-id9940 . -1899) (undo-tree-id9941 . -1899) (undo-tree-id9942 . -1899) (undo-tree-id9943 . -1899) (undo-tree-id9944 . -1899) (undo-tree-id9945 . -1899) (undo-tree-id9946 . -1899) (undo-tree-id9947 . -1899) (undo-tree-id9948 . -1899) (undo-tree-id9949 . -1899) (undo-tree-id9950 . -1899) (undo-tree-id9951 . -1899) (undo-tree-id9952 . -1899) (undo-tree-id9953 . -1899) (undo-tree-id9954 . -1899) (undo-tree-id9955 . -1899) (undo-tree-id9956 . -1899) (undo-tree-id9957 . -1899) (undo-tree-id9958 . -1899) (undo-tree-id9959 . -1899) (undo-tree-id9960 . -1899) (undo-tree-id9961 . -1899) (undo-tree-id9962 . -1899) (undo-tree-id9963 . -1899) (undo-tree-id9964 . -1899) (undo-tree-id9965 . -1899) (undo-tree-id9966 . -1899) (undo-tree-id9967 . -1899) (undo-tree-id9968 . -1899) (undo-tree-id9969 . -1899) (undo-tree-id9970 . -1899) (undo-tree-id9971 . -1899) (undo-tree-id9972 . -1899) (undo-tree-id9973 . -1899) (undo-tree-id9974 . -1899) (undo-tree-id9975 . -1899) (undo-tree-id9976 . -1899) (undo-tree-id9977 . -1899) (undo-tree-id9978 . -1899) (undo-tree-id9979 . -1899) (undo-tree-id9980 . -1899) (undo-tree-id9981 . -1899) (undo-tree-id9982 . -1899) (undo-tree-id9983 . -1899) (undo-tree-id9984 . -1899) (undo-tree-id9985 . -1899) (undo-tree-id9986 . -1899) (undo-tree-id9987 . -1899) (undo-tree-id9988 . -1899) (undo-tree-id9989 . -1899) (undo-tree-id9990 . -1899) (undo-tree-id9991 . -1899) (undo-tree-id9992 . -1899) (undo-tree-id9993 . -1899) (undo-tree-id9994 . -1899) (undo-tree-id9995 . -1899) (undo-tree-id9996 . -1899) (undo-tree-id9997 . -1899) (undo-tree-id9998 . -1899) (undo-tree-id9999 . -1899) (undo-tree-id10000 . -1899) (undo-tree-id10001 . -1899) (undo-tree-id10002 . -1899) (undo-tree-id10003 . -1899) (undo-tree-id10004 . -1899) (undo-tree-id10005 . -1899) (undo-tree-id10006 . -1899) (undo-tree-id10007 . -1899) (undo-tree-id10008 . -1899) (undo-tree-id10009 . -1899) (undo-tree-id10010 . -1899) (undo-tree-id10011 . -1899) (undo-tree-id10012 . -1899) (undo-tree-id10013 . -1899) (undo-tree-id10014 . -1899) (undo-tree-id10015 . -1899) (undo-tree-id10016 . -1899) (undo-tree-id10017 . -1899) (undo-tree-id10018 . -1899) (undo-tree-id10019 . -1899) (undo-tree-id10020 . -1899) (undo-tree-id10021 . -1899) (undo-tree-id10022 . -1899) (undo-tree-id10023 . -1899) (undo-tree-id10024 . -1899) (undo-tree-id10025 . -1899) (undo-tree-id10026 . -1899) (undo-tree-id10027 . -1899) (undo-tree-id10028 . -1899) (undo-tree-id10029 . -1899) (undo-tree-id10030 . -1899) (undo-tree-id10031 . -1899) (undo-tree-id10032 . -1899) (undo-tree-id10033 . -1899) (undo-tree-id10034 . -1899) (undo-tree-id10035 . -1899) (undo-tree-id10036 . -1899) (undo-tree-id10037 . -1899) (undo-tree-id10038 . -1899) (undo-tree-id10039 . -1899) (undo-tree-id10040 . -1899) (undo-tree-id10041 . -1899) (undo-tree-id10042 . -1899) (undo-tree-id10043 . -1899) (undo-tree-id10044 . -1899) (undo-tree-id10045 . -1899) (undo-tree-id10046 . -1899) (undo-tree-id10047 . -1899) (undo-tree-id10048 . -1899) (undo-tree-id10049 . -1899) (undo-tree-id10050 . -1899) (undo-tree-id10051 . -1899) (undo-tree-id10052 . -1899) (undo-tree-id10053 . -1899) (undo-tree-id10054 . -1899) (undo-tree-id10055 . -1899) (undo-tree-id10056 . -1899) (undo-tree-id10057 . -1899) (undo-tree-id10058 . -1899) (undo-tree-id10059 . -1899) (undo-tree-id10060 . -1899) (undo-tree-id10061 . -1899) (undo-tree-id10062 . -1899) (undo-tree-id10063 . -1899) (undo-tree-id10064 . -1899) (undo-tree-id10065 . -1899) (undo-tree-id10066 . -1899) (undo-tree-id10067 . -1899) (undo-tree-id10068 . -1899) (undo-tree-id10069 . -1899) (undo-tree-id10070 . -1899) (undo-tree-id10071 . -1899) (undo-tree-id10072 . -1899) (undo-tree-id10073 . -1899) (undo-tree-id10074 . -1899) (undo-tree-id10075 . -1899) (undo-tree-id10076 . -1899) (undo-tree-id10077 . -1899) (undo-tree-id10078 . -1899) (undo-tree-id10079 . -1899) (undo-tree-id10080 . -1899) (undo-tree-id10081 . -1899) (undo-tree-id10082 . -1899) (undo-tree-id10083 . -1899) (undo-tree-id10084 . -1899) (undo-tree-id10085 . -1899) (undo-tree-id10086 . -1899) (undo-tree-id10087 . -1899) (undo-tree-id10088 . -1899) (undo-tree-id10089 . -1899) (undo-tree-id10090 . -1899) (undo-tree-id10091 . -1899) (undo-tree-id10092 . -1899) (undo-tree-id10093 . -1899) (undo-tree-id10094 . -1899) (undo-tree-id10095 . -1899) (undo-tree-id10096 . -1899) (undo-tree-id10097 . -1899) (undo-tree-id10098 . -1899) (undo-tree-id10099 . -1899) (undo-tree-id10100 . -1899) (undo-tree-id10101 . -1899) (undo-tree-id10102 . -1899) (undo-tree-id10103 . -1899) (undo-tree-id10104 . -1899) (undo-tree-id10105 . -1899) (undo-tree-id10106 . -1899) (undo-tree-id10107 . -1899) (undo-tree-id10108 . -1899) (undo-tree-id10109 . -1899) (undo-tree-id10110 . -1899) (undo-tree-id10111 . -1899) (undo-tree-id10112 . -1899) (undo-tree-id10113 . -1899) (undo-tree-id10114 . -1899) (undo-tree-id10115 . -1899) (undo-tree-id10116 . -1899) (undo-tree-id10117 . -1899) (undo-tree-id10118 . -1899) (undo-tree-id10119 . -1899) (undo-tree-id10120 . -1899) (undo-tree-id10121 . -1899) (undo-tree-id10122 . -1899) (undo-tree-id10123 . -1899) (undo-tree-id10124 . -1899) (undo-tree-id10125 . -1899) (undo-tree-id10126 . -1899) (undo-tree-id10127 . -1899) (undo-tree-id10128 . -1899) (undo-tree-id10129 . -1899) (undo-tree-id10130 . -1899) (undo-tree-id10131 . -1899) (undo-tree-id10132 . -1899) (undo-tree-id10133 . -1899) (undo-tree-id10134 . -1899) (undo-tree-id10135 . -1899) (undo-tree-id10136 . -1850) (undo-tree-id10137 . -1850) (undo-tree-id10138 . -1850) (undo-tree-id10139 . -1850) (undo-tree-id10140 . -1850) (undo-tree-id10141 . -1850) (undo-tree-id10142 . -1850) (undo-tree-id10143 . -1850) (undo-tree-id10144 . -1850) (undo-tree-id10145 . -1850) (undo-tree-id10146 . -1850) (undo-tree-id10147 . -1850) (undo-tree-id10148 . -1850) (undo-tree-id10149 . -1850) (undo-tree-id10150 . -1850) (undo-tree-id10151 . -1853) (undo-tree-id10152 . -1853) (undo-tree-id10153 . -1853) (undo-tree-id10154 . -1853) (undo-tree-id10155 . -1853) (undo-tree-id10156 . -1853) (undo-tree-id10157 . -1853) (undo-tree-id10158 . -1853) (undo-tree-id10159 . -1853) (undo-tree-id10160 . -1853) (undo-tree-id10161 . -1853) (undo-tree-id10162 . -1853) (undo-tree-id10163 . -1853) (undo-tree-id10164 . -1853) (undo-tree-id10165 . -1853) (undo-tree-id10166 . -1855) (undo-tree-id10167 . -1855) (undo-tree-id10168 . -1855) (undo-tree-id10169 . -1855) (undo-tree-id10170 . -1855) (undo-tree-id10171 . -1855) (undo-tree-id10172 . -1855) (undo-tree-id10173 . -1855) (undo-tree-id10174 . -1855) (undo-tree-id10175 . -1855) (undo-tree-id10176 . -1855) (undo-tree-id10177 . -1855) (undo-tree-id10178 . -1855) (undo-tree-id10179 . -1855) (undo-tree-id10180 . -1855) (undo-tree-id10181 . -1862) (undo-tree-id10182 . -1862) (undo-tree-id10183 . -1862) (undo-tree-id10184 . -1862) (undo-tree-id10185 . -1862) (undo-tree-id10186 . -1862) (undo-tree-id10187 . -1862) (undo-tree-id10188 . -1862) (undo-tree-id10189 . -1862) (undo-tree-id10190 . -1862) (undo-tree-id10191 . -1862) (undo-tree-id10192 . -1862) (undo-tree-id10193 . -1862) (undo-tree-id10194 . -1862) (undo-tree-id10195 . -1862) (undo-tree-id10196 . -1871) (undo-tree-id10197 . -1871) (undo-tree-id10198 . -1871) (undo-tree-id10199 . -1871) (undo-tree-id10200 . -1871) (undo-tree-id10201 . -1871) (undo-tree-id10202 . -1871) (undo-tree-id10203 . -1871) (undo-tree-id10204 . -1871) (undo-tree-id10205 . -1871) (undo-tree-id10206 . -1871) (undo-tree-id10207 . -1871) (undo-tree-id10208 . -1871) (undo-tree-id10209 . -1871) (undo-tree-id10210 . -1871) (undo-tree-id10211 . -1874) (undo-tree-id10212 . -1874) (undo-tree-id10213 . -1874) (undo-tree-id10214 . -1874) (undo-tree-id10215 . -1874) (undo-tree-id10216 . -1874) (undo-tree-id10217 . -1874) (undo-tree-id10218 . -1874) (undo-tree-id10219 . -1874) (undo-tree-id10220 . -1874) (undo-tree-id10221 . -1874) (undo-tree-id10222 . -1874) (undo-tree-id10223 . -1874) (undo-tree-id10224 . -1874) (undo-tree-id10225 . -1874) (undo-tree-id10226 . -1879) (undo-tree-id10227 . -1879) (undo-tree-id10228 . -1879) (undo-tree-id10229 . -1879) (undo-tree-id10230 . -1879) (undo-tree-id10231 . -1879) (undo-tree-id10232 . -1879) (undo-tree-id10233 . -1879) (undo-tree-id10234 . -1879) (undo-tree-id10235 . -1879) (undo-tree-id10236 . -1879) (undo-tree-id10237 . -1879) (undo-tree-id10238 . -1879) (undo-tree-id10239 . -1879) (undo-tree-id10240 . -1879) (undo-tree-id10241 . -1881) (undo-tree-id10242 . -1881) (undo-tree-id10243 . -1881) (undo-tree-id10244 . -1881) (undo-tree-id10245 . -1881) (undo-tree-id10246 . -1881) (undo-tree-id10247 . -1881) (undo-tree-id10248 . -1881) (undo-tree-id10249 . -1881) (undo-tree-id10250 . -1881) (undo-tree-id10251 . -1881) (undo-tree-id10252 . -1881) (undo-tree-id10253 . -1881) (undo-tree-id10254 . -1881) (undo-tree-id10255 . -1881) (undo-tree-id10256 . -1889) (undo-tree-id10257 . -1889) (undo-tree-id10258 . -1889) (undo-tree-id10259 . -1889) (undo-tree-id10260 . -1889) (undo-tree-id10261 . -1889) (undo-tree-id10262 . -1889) (undo-tree-id10263 . -1889) (undo-tree-id10264 . -1889) (undo-tree-id10265 . -1889) (undo-tree-id10266 . -1889) (undo-tree-id10267 . -1889) (undo-tree-id10268 . -1889) (undo-tree-id10269 . -1889) (undo-tree-id10270 . -1889) (undo-tree-id10271 . -1899) (undo-tree-id10272 . -1899) (undo-tree-id10273 . -1899) (undo-tree-id10274 . -1899) (undo-tree-id10275 . -1899) (undo-tree-id10276 . -1899) (undo-tree-id10277 . -1899) (undo-tree-id10278 . -1899) (undo-tree-id10279 . -1899) (undo-tree-id10280 . -1899) (undo-tree-id10281 . -1899) (undo-tree-id10282 . -1899) (undo-tree-id10283 . -1899) (undo-tree-id10284 . -1899) (undo-tree-id10285 . -1899) (undo-tree-id10286 . -1899) (undo-tree-id10287 . -1899) (undo-tree-id10288 . -1899) (undo-tree-id10289 . -1899) (undo-tree-id10290 . -1899) (undo-tree-id10291 . -1899) (undo-tree-id10292 . -1899) (undo-tree-id10293 . -1899) (undo-tree-id10294 . -1899) (undo-tree-id10295 . -1899) (undo-tree-id10296 . -1899) (undo-tree-id10297 . -1899) (undo-tree-id10298 . -1899) (undo-tree-id10299 . -1899) (undo-tree-id10300 . -1899) (undo-tree-id10301 . -1899) (undo-tree-id10302 . -1899) (undo-tree-id10303 . -1899) (undo-tree-id10304 . -1899) (undo-tree-id10305 . -1899) (undo-tree-id10306 . -1899) (undo-tree-id10307 . -1899) (undo-tree-id10308 . -1899) (undo-tree-id10309 . -1899) (undo-tree-id10310 . -1899) (undo-tree-id10311 . -1899) (undo-tree-id10312 . -1899) (undo-tree-id10313 . -1899) (undo-tree-id10314 . -1899) (undo-tree-id10315 . -1899) (undo-tree-id10316 . -1899) (undo-tree-id10317 . -1899) (undo-tree-id10318 . -1899) (undo-tree-id10319 . -1899) (undo-tree-id10320 . -1899) (undo-tree-id10321 . -1899) (undo-tree-id10322 . -1899) (undo-tree-id10323 . -1899) (undo-tree-id10324 . -1899) (undo-tree-id10325 . -1899) (undo-tree-id10326 . -1899) (undo-tree-id10327 . -1899) (undo-tree-id10328 . -1899) (undo-tree-id10329 . -1899) (undo-tree-id10330 . -1899) (undo-tree-id10331 . -1899) (undo-tree-id10332 . -1822) (2243 . 4065) (#(" so we can’t just train the neural network directly on it: the RNN would be equivalent to a deep net with over a million layers, and we would have a single (very long) instance to train it. Instead, we will use the dataset’s window() method to convert this long sequence of characters into many smaller windows of text. Every instance in the dataset will be a fairly short substring of the whole text, and the RNN will be unrolled only over the length of these substrings. This is called truncated backpropagation through time. Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will" 0 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 62 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 135 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 136 210 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 210 211 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 211 284 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 284 285 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 285 314 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 314 359 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 359 360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 360 420 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 420 422 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 422 423 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 423 435 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 435 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 436 497 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 497 498 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 498 539 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 539 570 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 570 571 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 571 601 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 601 602 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 602 603 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 603 604 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 604 609 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 609 615 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 615 616 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 616 622 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 622 623 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 623 629 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 629 633 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 633 634 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 634 639 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 639 686 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 686 687 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 687 718 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 718 719 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 719 725 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 725 740 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 740 741 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 741 750 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 750 756 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 756 757 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 757 760 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 760 761 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 761 781 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 781 782 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 782 787 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 787 814 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 814 844 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 844 845 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 845 918 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 918 919 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 919 924 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 924 929 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 929 930 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 930 936 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 936 954 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 954 955 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 955 1025 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1025 1026 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1026 1096 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1096 1097 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1097 1169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1169 1170 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1170 1244 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1244 1245 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1245 1318 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1318 1319 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1319 1330 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1330 1331 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1331 1340 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1340 1382 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1382 1383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1383 1453 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1453 1454 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1454 1455 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1455 1522 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1522 1523 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1523 1600 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1600 1601 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1601 1672 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1672 1673 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1673 1748 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1748 1749 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1749 1819 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1819 1820 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 2320) (undo-tree-id10333 . -30) (undo-tree-id10334 . 1820) (undo-tree-id10335 . -62) (undo-tree-id10336 . -62) (undo-tree-id10337 . -62) (undo-tree-id10338 . -62) (undo-tree-id10339 . -62) (undo-tree-id10340 . -62) (undo-tree-id10341 . -62) (undo-tree-id10342 . -62) (undo-tree-id10343 . -62) (undo-tree-id10344 . -62) (undo-tree-id10345 . -62) (undo-tree-id10346 . -62) (undo-tree-id10347 . -62) (undo-tree-id10348 . -62) (undo-tree-id10349 . -62) (undo-tree-id10350 . -62) (undo-tree-id10351 . -135) (undo-tree-id10352 . -135) (undo-tree-id10353 . -135) (undo-tree-id10354 . -135) (undo-tree-id10355 . -135) (undo-tree-id10356 . -135) (undo-tree-id10357 . -135) (undo-tree-id10358 . -135) (undo-tree-id10359 . -135) (undo-tree-id10360 . -135) (undo-tree-id10361 . -135) (undo-tree-id10362 . -135) (undo-tree-id10363 . -135) (undo-tree-id10364 . -135) (undo-tree-id10365 . -135) (undo-tree-id10366 . -135) (undo-tree-id10367 . -210) (undo-tree-id10368 . -210) (undo-tree-id10369 . -210) (undo-tree-id10370 . -210) (undo-tree-id10371 . -210) (undo-tree-id10372 . -210) (undo-tree-id10373 . -210) (undo-tree-id10374 . -210) (undo-tree-id10375 . -210) (undo-tree-id10376 . -284) (undo-tree-id10377 . -284) (undo-tree-id10378 . -284) (undo-tree-id10379 . -284) (undo-tree-id10380 . -284) (undo-tree-id10381 . -284) (undo-tree-id10382 . -284) (undo-tree-id10383 . -284) (undo-tree-id10384 . -284) (undo-tree-id10385 . -359) (undo-tree-id10386 . -359) (undo-tree-id10387 . -359) (undo-tree-id10388 . -359) (undo-tree-id10389 . -359) (undo-tree-id10390 . -359) (undo-tree-id10391 . -359) (undo-tree-id10392 . -359) (undo-tree-id10393 . -359) (undo-tree-id10394 . -435) (undo-tree-id10395 . -435) (undo-tree-id10396 . -435) (undo-tree-id10397 . -435) (undo-tree-id10398 . -435) (undo-tree-id10399 . -435) (undo-tree-id10400 . -435) (undo-tree-id10401 . -435) (undo-tree-id10402 . -435) (undo-tree-id10403 . -497) (undo-tree-id10404 . -497) (undo-tree-id10405 . -497) (undo-tree-id10406 . -497) (undo-tree-id10407 . -497) (undo-tree-id10408 . -497) (undo-tree-id10409 . -497) (undo-tree-id10410 . -497) (undo-tree-id10411 . -497) (undo-tree-id10412 . -497) (undo-tree-id10413 . -497) (undo-tree-id10414 . -497) (undo-tree-id10415 . -497) (undo-tree-id10416 . -497) (undo-tree-id10417 . -497) (undo-tree-id10418 . -497) (undo-tree-id10419 . -570) (undo-tree-id10420 . -570) (undo-tree-id10421 . -570) (undo-tree-id10422 . -570) (undo-tree-id10423 . -570) (undo-tree-id10424 . -570) (undo-tree-id10425 . -570) (undo-tree-id10426 . -570) (undo-tree-id10427 . -570) (undo-tree-id10428 . -570) (undo-tree-id10429 . -570) (undo-tree-id10430 . -570) (undo-tree-id10431 . -570) (undo-tree-id10432 . -570) (undo-tree-id10433 . -570) (undo-tree-id10434 . -601) (undo-tree-id10435 . -601) (undo-tree-id10436 . -601) (undo-tree-id10437 . -601) (undo-tree-id10438 . -601) (undo-tree-id10439 . -601) (undo-tree-id10440 . -601) (undo-tree-id10441 . -601) (undo-tree-id10442 . -601) (undo-tree-id10443 . -601) (undo-tree-id10444 . -601) (undo-tree-id10445 . -601) (undo-tree-id10446 . -601) (undo-tree-id10447 . -601) (undo-tree-id10448 . -601) (undo-tree-id10449 . -601) (undo-tree-id10450 . -601) (undo-tree-id10451 . -601) (undo-tree-id10452 . -601) (undo-tree-id10453 . -601) (undo-tree-id10454 . -601) (undo-tree-id10455 . -601) (undo-tree-id10456 . -601) (undo-tree-id10457 . -601) (undo-tree-id10458 . -601) (undo-tree-id10459 . -601) (undo-tree-id10460 . -601) (undo-tree-id10461 . -601) (undo-tree-id10462 . -601) (undo-tree-id10463 . -601) (undo-tree-id10464 . -601) (undo-tree-id10465 . -601) (undo-tree-id10466 . -601) (undo-tree-id10467 . -601) (undo-tree-id10468 . -601) (undo-tree-id10469 . -601) (undo-tree-id10470 . -601) (undo-tree-id10471 . -601) (undo-tree-id10472 . -601) (undo-tree-id10473 . -601) (undo-tree-id10474 . -601) (undo-tree-id10475 . -601) (undo-tree-id10476 . -601) (undo-tree-id10477 . -601) (undo-tree-id10478 . -601) (undo-tree-id10479 . -601) (undo-tree-id10480 . -601) (undo-tree-id10481 . -601) (undo-tree-id10482 . -601) (undo-tree-id10483 . -601) (undo-tree-id10484 . -601) (undo-tree-id10485 . -601) (undo-tree-id10486 . -601) (undo-tree-id10487 . -601) (undo-tree-id10488 . -601) (undo-tree-id10489 . -601) (undo-tree-id10490 . -601) (undo-tree-id10491 . -601) (undo-tree-id10492 . -601) (undo-tree-id10493 . -601) (undo-tree-id10494 . -601) (undo-tree-id10495 . -601) (undo-tree-id10496 . -601) (undo-tree-id10497 . -601) (undo-tree-id10498 . -601) (undo-tree-id10499 . -601) (undo-tree-id10500 . -601) (undo-tree-id10501 . -601) (undo-tree-id10502 . -601) (undo-tree-id10503 . -601) (undo-tree-id10504 . -601) (undo-tree-id10505 . -601) (undo-tree-id10506 . -601) (undo-tree-id10507 . -601) (undo-tree-id10508 . -601) (undo-tree-id10509 . -601) (undo-tree-id10510 . -601) (undo-tree-id10511 . -601) (undo-tree-id10512 . -601) (undo-tree-id10513 . -601) (undo-tree-id10514 . -601) (undo-tree-id10515 . -601) (undo-tree-id10516 . -601) (undo-tree-id10517 . -601) (undo-tree-id10518 . -601) (undo-tree-id10519 . -601) (undo-tree-id10520 . -601) (undo-tree-id10521 . -601) (undo-tree-id10522 . -601) (undo-tree-id10523 . -601) (undo-tree-id10524 . -601) (undo-tree-id10525 . -601) (undo-tree-id10526 . -601) (undo-tree-id10527 . -601) (undo-tree-id10528 . -601) (undo-tree-id10529 . -601) (undo-tree-id10530 . -601) (undo-tree-id10531 . -601) (undo-tree-id10532 . -601) (undo-tree-id10533 . -601) (undo-tree-id10534 . -601) (undo-tree-id10535 . -601) (undo-tree-id10536 . -601) (undo-tree-id10537 . -601) (undo-tree-id10538 . -601) (undo-tree-id10539 . -601) (undo-tree-id10540 . -601) (undo-tree-id10541 . -601) (undo-tree-id10542 . -601) (undo-tree-id10543 . -601) (undo-tree-id10544 . -601) (undo-tree-id10545 . -601) (undo-tree-id10546 . -601) (undo-tree-id10547 . -601) (undo-tree-id10548 . -601) (undo-tree-id10549 . -601) (undo-tree-id10550 . -601) (undo-tree-id10551 . -601) (undo-tree-id10552 . -601) (undo-tree-id10553 . -601) (undo-tree-id10554 . -601) (undo-tree-id10555 . -601) (undo-tree-id10556 . -601) (undo-tree-id10557 . -601) (undo-tree-id10558 . -601) (undo-tree-id10559 . -601) (undo-tree-id10560 . -1169) (undo-tree-id10561 . -1169) (undo-tree-id10562 . -1169) (undo-tree-id10563 . -1169) (undo-tree-id10564 . -1169) (undo-tree-id10565 . -1169) (undo-tree-id10566 . -1169) (undo-tree-id10567 . -1169) (undo-tree-id10568 . -1169) (undo-tree-id10569 . -1169) (undo-tree-id10570 . -1169) (undo-tree-id10571 . -1169) (undo-tree-id10572 . -1169) (undo-tree-id10573 . -1169) (undo-tree-id10574 . -1169) (undo-tree-id10575 . -1169) (undo-tree-id10576 . -1169) (undo-tree-id10577 . -1169) (undo-tree-id10578 . -1169) (undo-tree-id10579 . -1169) (undo-tree-id10580 . -1169) (undo-tree-id10581 . -1169) (undo-tree-id10582 . -1169) (undo-tree-id10583 . -1169) (undo-tree-id10584 . -1169) (undo-tree-id10585 . -1169) (undo-tree-id10586 . -1169) (undo-tree-id10587 . -1169) (undo-tree-id10588 . -1169) (undo-tree-id10589 . -1169) (undo-tree-id10590 . -1169) (undo-tree-id10591 . -1169) (undo-tree-id10592 . -1169) (undo-tree-id10593 . -1169) (undo-tree-id10594 . -1169) (undo-tree-id10595 . -1169) (undo-tree-id10596 . -1169) (undo-tree-id10597 . -1169) (undo-tree-id10598 . -1169) (undo-tree-id10599 . -1169) (undo-tree-id10600 . -1169) (undo-tree-id10601 . -1169) (undo-tree-id10602 . -1169) (undo-tree-id10603 . -1169) (undo-tree-id10604 . -1169) (undo-tree-id10605 . -1169) (undo-tree-id10606 . -1169) (undo-tree-id10607 . -1169) (undo-tree-id10608 . -1169) (undo-tree-id10609 . -1169) (undo-tree-id10610 . -1169) (undo-tree-id10611 . -1169) (undo-tree-id10612 . -1169) (undo-tree-id10613 . -1169) (undo-tree-id10614 . -1169) (undo-tree-id10615 . -1169) (undo-tree-id10616 . -1169) (undo-tree-id10617 . -1169) (undo-tree-id10618 . -1169) (undo-tree-id10619 . -1169) (undo-tree-id10620 . -1169) (undo-tree-id10621 . -1169) (undo-tree-id10622 . -1169) (undo-tree-id10623 . -1169) (undo-tree-id10624 . -1169) (undo-tree-id10625 . -1169) (undo-tree-id10626 . -1169) (undo-tree-id10627 . -1169) (undo-tree-id10628 . -1169) (undo-tree-id10629 . -1169) (undo-tree-id10630 . -1169) (undo-tree-id10631 . -1169) (undo-tree-id10632 . -1169) (undo-tree-id10633 . -1169) (undo-tree-id10634 . -1169) (undo-tree-id10635 . -1169) (undo-tree-id10636 . -1169) (undo-tree-id10637 . -1169) (undo-tree-id10638 . -1169) (undo-tree-id10639 . -1169) (undo-tree-id10640 . -1169) (undo-tree-id10641 . -1169) (undo-tree-id10642 . -1169) (undo-tree-id10643 . -1169) (undo-tree-id10644 . -1169) (undo-tree-id10645 . -1169) (undo-tree-id10646 . -1169) (undo-tree-id10647 . -1169) (undo-tree-id10648 . -1169) (undo-tree-id10649 . -1169) (undo-tree-id10650 . -1169) (undo-tree-id10651 . -1169) (undo-tree-id10652 . -1169) (undo-tree-id10653 . -1169) (undo-tree-id10654 . -1169) (undo-tree-id10655 . -1169) (undo-tree-id10656 . -1169) (undo-tree-id10657 . -1169) (undo-tree-id10658 . -1169) (undo-tree-id10659 . -1169) (undo-tree-id10660 . -1169) (undo-tree-id10661 . -1169) (undo-tree-id10662 . -1169) (undo-tree-id10663 . -1169) (undo-tree-id10664 . -1169) (undo-tree-id10665 . -1169) (undo-tree-id10666 . -1169) (undo-tree-id10667 . -1169) (undo-tree-id10668 . -1169) (undo-tree-id10669 . -1169) (undo-tree-id10670 . -1169) (undo-tree-id10671 . -1169) (undo-tree-id10672 . -1169) (undo-tree-id10673 . -1169) (undo-tree-id10674 . -1169) (undo-tree-id10675 . -1169) (undo-tree-id10676 . -1169) (undo-tree-id10677 . -1169) (undo-tree-id10678 . -1169) (undo-tree-id10679 . -1169) (undo-tree-id10680 . -1169) (undo-tree-id10681 . -1169) (undo-tree-id10682 . -1169) (undo-tree-id10683 . -1169) (undo-tree-id10684 . -1169) (undo-tree-id10685 . -1169) (undo-tree-id10686 . -1169) (undo-tree-id10687 . -1169) (undo-tree-id10688 . -1169) (undo-tree-id10689 . -1169) (undo-tree-id10690 . -1169) (undo-tree-id10691 . -1169) (undo-tree-id10692 . -1169) (undo-tree-id10693 . -1169) (undo-tree-id10694 . -1169) (undo-tree-id10695 . -1169) (undo-tree-id10696 . -1169) (undo-tree-id10697 . -1169) (undo-tree-id10698 . -1169) (undo-tree-id10699 . -1169) (undo-tree-id10700 . -1169) (undo-tree-id10701 . -1169) (undo-tree-id10702 . -1169) (undo-tree-id10703 . -1169) (undo-tree-id10704 . -1169) (undo-tree-id10705 . -1169) (undo-tree-id10706 . -1169) (undo-tree-id10707 . -1169) (undo-tree-id10708 . -1169) (undo-tree-id10709 . -1169) (undo-tree-id10710 . -1169) (undo-tree-id10711 . -1169) (undo-tree-id10712 . -1169) (undo-tree-id10713 . -1169) (undo-tree-id10714 . -1169) (undo-tree-id10715 . -1169) (undo-tree-id10716 . -1169) (undo-tree-id10717 . -1169) (undo-tree-id10718 . -1169) (undo-tree-id10719 . -1169) (undo-tree-id10720 . -1169) (undo-tree-id10721 . -1169) (undo-tree-id10722 . -1169) (undo-tree-id10723 . -1169) (undo-tree-id10724 . -1169) (undo-tree-id10725 . -1169) (undo-tree-id10726 . -1169) (undo-tree-id10727 . -1169) (undo-tree-id10728 . -1169) (undo-tree-id10729 . -1169) (undo-tree-id10730 . -1169) (undo-tree-id10731 . -1169) (undo-tree-id10732 . -1169) (undo-tree-id10733 . -1169) (undo-tree-id10734 . -1169) (undo-tree-id10735 . -1169) (undo-tree-id10736 . -1169) (undo-tree-id10737 . -1169) (undo-tree-id10738 . -1169) (undo-tree-id10739 . -1169) (undo-tree-id10740 . -1169) (undo-tree-id10741 . -1169) (undo-tree-id10742 . -1169) (undo-tree-id10743 . -1169) (undo-tree-id10744 . -1169) (undo-tree-id10745 . -1169) (undo-tree-id10746 . -1169) (undo-tree-id10747 . -1169) (undo-tree-id10748 . -1169) (undo-tree-id10749 . -1169) (undo-tree-id10750 . -1169) (undo-tree-id10751 . -1169) (undo-tree-id10752 . -1169) (undo-tree-id10753 . -1169) (undo-tree-id10754 . -1169) (undo-tree-id10755 . -1169) (undo-tree-id10756 . -1169) (undo-tree-id10757 . -1169) (undo-tree-id10758 . -1169) (undo-tree-id10759 . -1169) (undo-tree-id10760 . -1169) (undo-tree-id10761 . -1169) (undo-tree-id10762 . -1169) (undo-tree-id10763 . -1169) (undo-tree-id10764 . -1169) (undo-tree-id10765 . -1169) (undo-tree-id10766 . -1169) (undo-tree-id10767 . -1169) (undo-tree-id10768 . -1169) (undo-tree-id10769 . -1169) (undo-tree-id10770 . -1169) (undo-tree-id10771 . -1169) (undo-tree-id10772 . -1169) (undo-tree-id10773 . -1169) (undo-tree-id10774 . -1169) (undo-tree-id10775 . -1169) (undo-tree-id10776 . -1169) (undo-tree-id10777 . -1169) (undo-tree-id10778 . -1169) (undo-tree-id10779 . -1169) (undo-tree-id10780 . -1169) (undo-tree-id10781 . -1169) (undo-tree-id10782 . -1169) (undo-tree-id10783 . -1169) (undo-tree-id10784 . -1169) (undo-tree-id10785 . -1169) (undo-tree-id10786 . -1169) (undo-tree-id10787 . -1169) (undo-tree-id10788 . -1169) (undo-tree-id10789 . -1169) (undo-tree-id10790 . -1169) (undo-tree-id10791 . -1169) (undo-tree-id10792 . -1169) (undo-tree-id10793 . -1169) (undo-tree-id10794 . -1169) (undo-tree-id10795 . -1169) (undo-tree-id10796 . -1169) (undo-tree-id10797 . -1169) (undo-tree-id10798 . -1169) (undo-tree-id10799 . -1169) (undo-tree-id10800 . -1169) (undo-tree-id10801 . -1169) (undo-tree-id10802 . -1169) (undo-tree-id10803 . -1169) (undo-tree-id10804 . -1169) (undo-tree-id10805 . -1169) (undo-tree-id10806 . -1169) (undo-tree-id10807 . -1169) (undo-tree-id10808 . -1169) (undo-tree-id10809 . -1169) (undo-tree-id10810 . -1169) (undo-tree-id10811 . -1169) (undo-tree-id10812 . -1169) (undo-tree-id10813 . -1169) (undo-tree-id10814 . -1169) (undo-tree-id10815 . -1169) (undo-tree-id10816 . -1169) (undo-tree-id10817 . -1169) (undo-tree-id10818 . -1169) (undo-tree-id10819 . -1169) (undo-tree-id10820 . -1169) (undo-tree-id10821 . -1169) (undo-tree-id10822 . -1169) (undo-tree-id10823 . -1169) (undo-tree-id10824 . -1169) (undo-tree-id10825 . -1169) (undo-tree-id10826 . -1169) (undo-tree-id10827 . -1169) (undo-tree-id10828 . -1169) (undo-tree-id10829 . -1169) (undo-tree-id10830 . -1169) (undo-tree-id10831 . -1169) (undo-tree-id10832 . -1169) (undo-tree-id10833 . -1169) (undo-tree-id10834 . -1169) (undo-tree-id10835 . -1169) (undo-tree-id10836 . -1169) (undo-tree-id10837 . -1169) (undo-tree-id10838 . -1169) (undo-tree-id10839 . -1169) (undo-tree-id10840 . -1169) (undo-tree-id10841 . -1169) (undo-tree-id10842 . -1169) (undo-tree-id10843 . -1169) (undo-tree-id10844 . -1169) (undo-tree-id10845 . -1169) (undo-tree-id10846 . -1169) (undo-tree-id10847 . -1169) (undo-tree-id10848 . -1169) (undo-tree-id10849 . -1169) (undo-tree-id10850 . -1169) (undo-tree-id10851 . -1169) (undo-tree-id10852 . -1169) (undo-tree-id10853 . -1169) (undo-tree-id10854 . -1169) (undo-tree-id10855 . -1169) (undo-tree-id10856 . -1169) (undo-tree-id10857 . -1169) (undo-tree-id10858 . -1169) (undo-tree-id10859 . -1169) (undo-tree-id10860 . -1169) (undo-tree-id10861 . -1169) (undo-tree-id10862 . -1169) (undo-tree-id10863 . -1169) (undo-tree-id10864 . -1169) (undo-tree-id10865 . -1169) (undo-tree-id10866 . -1169) (undo-tree-id10867 . -1169) (undo-tree-id10868 . -1169) (undo-tree-id10869 . -1169) (undo-tree-id10870 . -1169) (undo-tree-id10871 . -1169) (undo-tree-id10872 . -1169) (undo-tree-id10873 . -1169) (undo-tree-id10874 . -1169) (undo-tree-id10875 . -1169) (undo-tree-id10876 . -1169) (undo-tree-id10877 . -1169) (undo-tree-id10878 . -1169) (undo-tree-id10879 . -1169) (undo-tree-id10880 . -1169) (undo-tree-id10881 . -1169) (undo-tree-id10882 . -1169) (undo-tree-id10883 . -1169) (undo-tree-id10884 . -1169) (undo-tree-id10885 . -1169) (undo-tree-id10886 . -1169) (undo-tree-id10887 . -1169) (undo-tree-id10888 . -1169) (undo-tree-id10889 . -1169) (undo-tree-id10890 . -1169) (undo-tree-id10891 . -1169) (undo-tree-id10892 . -1169) (undo-tree-id10893 . -1169) (undo-tree-id10894 . -1169) (undo-tree-id10895 . -1169) (undo-tree-id10896 . -1169) (undo-tree-id10897 . -1169) (undo-tree-id10898 . -1169) (undo-tree-id10899 . -1169) (undo-tree-id10900 . -1169) (undo-tree-id10901 . -1169) (undo-tree-id10902 . -1169) (undo-tree-id10903 . -1169) (undo-tree-id10904 . -1169) (undo-tree-id10905 . -1169) (undo-tree-id10906 . -1169) (undo-tree-id10907 . -1169) (undo-tree-id10908 . -1169) (undo-tree-id10909 . -1169) (undo-tree-id10910 . -1169) (undo-tree-id10911 . -1169) (undo-tree-id10912 . -1169) (undo-tree-id10913 . -1169) (undo-tree-id10914 . -1169) (undo-tree-id10915 . -1169) (undo-tree-id10916 . -1169) (undo-tree-id10917 . -1169) (undo-tree-id10918 . -1169) (undo-tree-id10919 . -1169) (undo-tree-id10920 . -1169) (undo-tree-id10921 . -1169) (undo-tree-id10922 . -1169) (undo-tree-id10923 . -1169) (undo-tree-id10924 . -1169) (undo-tree-id10925 . -1169) (undo-tree-id10926 . -1169) (undo-tree-id10927 . -1169) (undo-tree-id10928 . -1169) (undo-tree-id10929 . -1169) (undo-tree-id10930 . -1169) (undo-tree-id10931 . -1169) (undo-tree-id10932 . -1169) (undo-tree-id10933 . -1169) (undo-tree-id10934 . -1169) (undo-tree-id10935 . -1169) (undo-tree-id10936 . -1169) (undo-tree-id10937 . -1169) (undo-tree-id10938 . -1169) (undo-tree-id10939 . -1169) (undo-tree-id10940 . -1169) (undo-tree-id10941 . -1169) (undo-tree-id10942 . -1169) (undo-tree-id10943 . -1169) (undo-tree-id10944 . -1169) (undo-tree-id10945 . -1169) (undo-tree-id10946 . -1169) (undo-tree-id10947 . -1169) (undo-tree-id10948 . -1169) (undo-tree-id10949 . -1169) (undo-tree-id10950 . -1169) (undo-tree-id10951 . -1169) (undo-tree-id10952 . -1169) (undo-tree-id10953 . -1169) (undo-tree-id10954 . -1169) (undo-tree-id10955 . -1169) (undo-tree-id10956 . -1169) (undo-tree-id10957 . -1169) (undo-tree-id10958 . -1169) (undo-tree-id10959 . -1169) (undo-tree-id10960 . -1169) (undo-tree-id10961 . -1169) (undo-tree-id10962 . -1169) (undo-tree-id10963 . -1169) (undo-tree-id10964 . -1169) (undo-tree-id10965 . -1169) (undo-tree-id10966 . -1169) (undo-tree-id10967 . -1169) (undo-tree-id10968 . -1169) (undo-tree-id10969 . -1169) (undo-tree-id10970 . -1169) (undo-tree-id10971 . -1169) (undo-tree-id10972 . -1169) (undo-tree-id10973 . -1169) (undo-tree-id10974 . -1169) (undo-tree-id10975 . -1169) (undo-tree-id10976 . -1169) (undo-tree-id10977 . -1169) (undo-tree-id10978 . -1169) (undo-tree-id10979 . -1169) (undo-tree-id10980 . -1169) (undo-tree-id10981 . -1169) (undo-tree-id10982 . -1169) (undo-tree-id10983 . -1169) (undo-tree-id10984 . -1169) (undo-tree-id10985 . -1169) (undo-tree-id10986 . -1169) (undo-tree-id10987 . -1169) (undo-tree-id10988 . -1169) (undo-tree-id10989 . -1169) (undo-tree-id10990 . -1169) (undo-tree-id10991 . -1169) (undo-tree-id10992 . -1169) (undo-tree-id10993 . -1169) (undo-tree-id10994 . -1169) (undo-tree-id10995 . -1169) (undo-tree-id10996 . -1096) (undo-tree-id10997 . -1096) (undo-tree-id10998 . -1096) (undo-tree-id10999 . -1096) (undo-tree-id11000 . -1096) (undo-tree-id11001 . -1096) (undo-tree-id11002 . -1096) (undo-tree-id11003 . -1096) (undo-tree-id11004 . -1025) (undo-tree-id11005 . -1025) (undo-tree-id11006 . -1025) (undo-tree-id11007 . -1025) (undo-tree-id11008 . -1025) (undo-tree-id11009 . -1025) (undo-tree-id11010 . -1025) (undo-tree-id11011 . -1025) (undo-tree-id11012 . -954) (undo-tree-id11013 . -954) (undo-tree-id11014 . -954) (undo-tree-id11015 . -954) (undo-tree-id11016 . -954) (undo-tree-id11017 . -954) (undo-tree-id11018 . -954) (undo-tree-id11019 . -954) (undo-tree-id11020 . -929) (undo-tree-id11021 . -929) (undo-tree-id11022 . -929) (undo-tree-id11023 . -929) (undo-tree-id11024 . -929) (undo-tree-id11025 . -929) (undo-tree-id11026 . -929) (undo-tree-id11027 . -929) (undo-tree-id11028 . -844) (undo-tree-id11029 . -844) (undo-tree-id11030 . -844) (undo-tree-id11031 . -844) (undo-tree-id11032 . -844) (undo-tree-id11033 . -844) (undo-tree-id11034 . -844) (undo-tree-id11035 . -844) (undo-tree-id11036 . -760) (undo-tree-id11037 . -760) (undo-tree-id11038 . -760) (undo-tree-id11039 . -760) (undo-tree-id11040 . -760) (undo-tree-id11041 . -760) (undo-tree-id11042 . -760) (undo-tree-id11043 . -760) (undo-tree-id11044 . -756) (undo-tree-id11045 . -756) (undo-tree-id11046 . -756) (undo-tree-id11047 . -756) (undo-tree-id11048 . -756) (undo-tree-id11049 . -756) (undo-tree-id11050 . -756) (undo-tree-id11051 . -756) (undo-tree-id11052 . -686) (undo-tree-id11053 . -686) (undo-tree-id11054 . -686) (undo-tree-id11055 . -686) (undo-tree-id11056 . -686) (undo-tree-id11057 . -686) (undo-tree-id11058 . -686) (undo-tree-id11059 . -686) (undo-tree-id11060 . -615) (undo-tree-id11061 . -615) (undo-tree-id11062 . -615) (undo-tree-id11063 . -615) (undo-tree-id11064 . -615) (undo-tree-id11065 . -615) (undo-tree-id11066 . -615) (undo-tree-id11067 . -615) (undo-tree-id11068 . -539) (undo-tree-id11069 . -539) (undo-tree-id11070 . -539) (undo-tree-id11071 . -539) (undo-tree-id11072 . -539) (undo-tree-id11073 . -539) (undo-tree-id11074 . -539) (undo-tree-id11075 . -539) (undo-tree-id11076 . -539) (undo-tree-id11077 . -539) (undo-tree-id11078 . -539) (undo-tree-id11079 . -539) (undo-tree-id11080 . -539) (undo-tree-id11081 . -539) (undo-tree-id11082 . -539) (undo-tree-id11083 . -539) (undo-tree-id11084 . -615) (undo-tree-id11085 . -615) (undo-tree-id11086 . -615) (undo-tree-id11087 . -615) (undo-tree-id11088 . -615) (undo-tree-id11089 . -615) (undo-tree-id11090 . -615) (undo-tree-id11091 . -615) (undo-tree-id11092 . -615) (undo-tree-id11093 . -615) (undo-tree-id11094 . -615) (undo-tree-id11095 . -615) (undo-tree-id11096 . -615) (undo-tree-id11097 . -615) (undo-tree-id11098 . -615) (undo-tree-id11099 . -615) (undo-tree-id11100 . -686) (undo-tree-id11101 . -686) (undo-tree-id11102 . -686) (undo-tree-id11103 . -686) (undo-tree-id11104 . -686) (undo-tree-id11105 . -686) (undo-tree-id11106 . -686) (undo-tree-id11107 . -686) (undo-tree-id11108 . -686) (undo-tree-id11109 . -686) (undo-tree-id11110 . -686) (undo-tree-id11111 . -686) (undo-tree-id11112 . -686) (undo-tree-id11113 . -686) (undo-tree-id11114 . -686) (undo-tree-id11115 . -686) (undo-tree-id11116 . -756) (undo-tree-id11117 . -756) (undo-tree-id11118 . -756) (undo-tree-id11119 . -756) (undo-tree-id11120 . -756) (undo-tree-id11121 . -756) (undo-tree-id11122 . -756) (undo-tree-id11123 . -756) (undo-tree-id11124 . -756) (undo-tree-id11125 . -756) (undo-tree-id11126 . -756) (undo-tree-id11127 . -756) (undo-tree-id11128 . -756) (undo-tree-id11129 . -756) (undo-tree-id11130 . -756) (undo-tree-id11131 . -756) (undo-tree-id11132 . -756) (undo-tree-id11133 . -756) (undo-tree-id11134 . -756) (undo-tree-id11135 . -756) (undo-tree-id11136 . -756) (undo-tree-id11137 . -756) (undo-tree-id11138 . -760) (undo-tree-id11139 . -760) (undo-tree-id11140 . -760) (undo-tree-id11141 . -760) (undo-tree-id11142 . -760) (undo-tree-id11143 . -760) (undo-tree-id11144 . -760) (undo-tree-id11145 . -760) (undo-tree-id11146 . -760) (undo-tree-id11147 . -844) (undo-tree-id11148 . -844) (undo-tree-id11149 . -844) (undo-tree-id11150 . -844) (undo-tree-id11151 . -844) (undo-tree-id11152 . -844) (undo-tree-id11153 . -844) (undo-tree-id11154 . -844) (undo-tree-id11155 . -844) (undo-tree-id11156 . -929) (undo-tree-id11157 . -929) (undo-tree-id11158 . -929) (undo-tree-id11159 . -929) (undo-tree-id11160 . -929) (undo-tree-id11161 . -929) (undo-tree-id11162 . -929) (undo-tree-id11163 . -929) (undo-tree-id11164 . -954) (undo-tree-id11165 . -954) (undo-tree-id11166 . -954) (undo-tree-id11167 . -954) (undo-tree-id11168 . -954) (undo-tree-id11169 . -954) (undo-tree-id11170 . -954) (undo-tree-id11171 . -954) (undo-tree-id11172 . -954) (undo-tree-id11173 . -1025) (undo-tree-id11174 . -1025) (undo-tree-id11175 . -1025) (undo-tree-id11176 . -1025) (undo-tree-id11177 . -1025) (undo-tree-id11178 . -1025) (undo-tree-id11179 . -1025) (undo-tree-id11180 . -1025) (undo-tree-id11181 . -1025) (undo-tree-id11182 . -1096) (undo-tree-id11183 . -1096) (undo-tree-id11184 . -1096) (undo-tree-id11185 . -1096) (undo-tree-id11186 . -1096) (undo-tree-id11187 . -1096) (undo-tree-id11188 . -1096) (undo-tree-id11189 . -1096) (undo-tree-id11190 . -1096) (undo-tree-id11191 . -1169) (undo-tree-id11192 . -1169) (undo-tree-id11193 . -1169) (undo-tree-id11194 . -1169) (undo-tree-id11195 . -1169) (undo-tree-id11196 . -1169) (undo-tree-id11197 . -1169) (undo-tree-id11198 . -1169) (undo-tree-id11199 . -1169) (undo-tree-id11200 . -1169) (undo-tree-id11201 . -1169) (undo-tree-id11202 . -1169) (undo-tree-id11203 . -1169) (undo-tree-id11204 . -1169) (undo-tree-id11205 . -1169) (undo-tree-id11206 . -1169) (undo-tree-id11207 . -1244) (undo-tree-id11208 . -1244) (undo-tree-id11209 . -1244) (undo-tree-id11210 . -1244) (undo-tree-id11211 . -1244) (undo-tree-id11212 . -1244) (undo-tree-id11213 . -1244) (undo-tree-id11214 . -1244) (undo-tree-id11215 . -1244) (undo-tree-id11216 . -1244) (undo-tree-id11217 . -1244) (undo-tree-id11218 . -1244) (undo-tree-id11219 . -1244) (undo-tree-id11220 . -1244) (undo-tree-id11221 . -1244) (undo-tree-id11222 . -1244) (undo-tree-id11223 . -1318) (undo-tree-id11224 . -1318) (undo-tree-id11225 . -1318) (undo-tree-id11226 . -1318) (undo-tree-id11227 . -1318) (undo-tree-id11228 . -1318) (undo-tree-id11229 . -1318) (undo-tree-id11230 . -1318) (undo-tree-id11231 . -1318) (undo-tree-id11232 . -1382) (undo-tree-id11233 . -1382) (undo-tree-id11234 . -1382) (undo-tree-id11235 . -1382) (undo-tree-id11236 . -1382) (undo-tree-id11237 . -1382) (undo-tree-id11238 . -1382) (undo-tree-id11239 . -1382) (undo-tree-id11240 . -1382) (undo-tree-id11241 . -1453) (undo-tree-id11242 . -1453) (undo-tree-id11243 . -1453) (undo-tree-id11244 . -1453) (undo-tree-id11245 . -1453) (undo-tree-id11246 . -1453) (undo-tree-id11247 . -1453) (undo-tree-id11248 . -1453) (undo-tree-id11249 . -1453) (undo-tree-id11250 . -1522) (undo-tree-id11251 . -1522) (undo-tree-id11252 . -1522) (undo-tree-id11253 . -1522) (undo-tree-id11254 . -1522) (undo-tree-id11255 . -1522) (undo-tree-id11256 . -1522) (undo-tree-id11257 . -1522) (undo-tree-id11258 . -1522) (undo-tree-id11259 . -1600) (undo-tree-id11260 . -1600) (undo-tree-id11261 . -1600) (undo-tree-id11262 . -1600) (undo-tree-id11263 . -1600) (undo-tree-id11264 . -1600) (undo-tree-id11265 . -1600) (undo-tree-id11266 . -1600) (undo-tree-id11267 . -1600) (undo-tree-id11268 . -1600) (undo-tree-id11269 . -1600) (undo-tree-id11270 . -1600) (undo-tree-id11271 . -1600) (undo-tree-id11272 . -1600) (undo-tree-id11273 . -1600) (undo-tree-id11274 . -1600) (undo-tree-id11275 . -1672) (undo-tree-id11276 . -1672) (undo-tree-id11277 . -1672) (undo-tree-id11278 . -1672) (undo-tree-id11279 . -1672) (undo-tree-id11280 . -1672) (undo-tree-id11281 . -1672) (undo-tree-id11282 . -1672) (undo-tree-id11283 . -1672) (undo-tree-id11284 . -1672) (undo-tree-id11285 . -1672) (undo-tree-id11286 . -1672) (undo-tree-id11287 . -1672) (undo-tree-id11288 . -1672) (undo-tree-id11289 . -1672) (undo-tree-id11290 . -1672) (undo-tree-id11291 . -1748) (undo-tree-id11292 . -1748) (undo-tree-id11293 . -1748) (undo-tree-id11294 . -1748) (undo-tree-id11295 . -1748) (undo-tree-id11296 . -1748) (undo-tree-id11297 . -1748) (undo-tree-id11298 . -1748) (undo-tree-id11299 . -1748) (undo-tree-id11300 . -1748) (undo-tree-id11301 . -1748) (undo-tree-id11302 . -1748) (undo-tree-id11303 . -1748) (undo-tree-id11304 . -1748) (undo-tree-id11305 . -1748) (undo-tree-id11306 . -1748) (undo-tree-id11307 . -1748) (undo-tree-id11308 . -314) (undo-tree-id11309 . -1819) (undo-tree-id11310 . -1819) (undo-tree-id11311 . -1819) (undo-tree-id11312 . -1819) (undo-tree-id11313 . -1819) (undo-tree-id11314 . -1819) (undo-tree-id11315 . -1819) (undo-tree-id11316 . -1819) (undo-tree-id11317 . -1819) (undo-tree-id11318 . -1819) (undo-tree-id11319 . -1819) (undo-tree-id11320 . -1819) (undo-tree-id11321 . -1819) (undo-tree-id11322 . -1819) (undo-tree-id11323 . -1819) (undo-tree-id11324 . -1819) (undo-tree-id11325 . -1819) (undo-tree-id11326 . -1819) (undo-tree-id11327 . -1819) (undo-tree-id11328 . -1819) (undo-tree-id11329 . -1819) (undo-tree-id11330 . -1819) (undo-tree-id11331 . -1819) (undo-tree-id11332 . -1819) (undo-tree-id11333 . -1819) (undo-tree-id11334 . -1819) (undo-tree-id11335 . -1819) (undo-tree-id11336 . -1819) (undo-tree-id11337 . -1819) (undo-tree-id11338 . -1819) (undo-tree-id11339 . -1748) (undo-tree-id11340 . -1745) (undo-tree-id11341 . -1745) (undo-tree-id11342 . -1745) (undo-tree-id11343 . -1745) (undo-tree-id11344 . -1745) (undo-tree-id11345 . -1745) (undo-tree-id11346 . -1745) (undo-tree-id11347 . -1745) (undo-tree-id11348 . -1745) (undo-tree-id11349 . -1745) (undo-tree-id11350 . -1745) (undo-tree-id11351 . -1745) (undo-tree-id11352 . -1745) (undo-tree-id11353 . -1745) (undo-tree-id11354 . -1745) (undo-tree-id11355 . -1819) (undo-tree-id11356 . -1666) (undo-tree-id11357 . -1666) (undo-tree-id11358 . -1666) (undo-tree-id11359 . -1666) (undo-tree-id11360 . -1666) (undo-tree-id11361 . -1666) (undo-tree-id11362 . -1666) (undo-tree-id11363 . -1666) (undo-tree-id11364 . -1745) (undo-tree-id11365 . -1589) (undo-tree-id11366 . -1589) (undo-tree-id11367 . -1589) (undo-tree-id11368 . -1589) (undo-tree-id11369 . -1589) (undo-tree-id11370 . -1589) (undo-tree-id11371 . -1589) (undo-tree-id11372 . -1589) (undo-tree-id11373 . -1666) (undo-tree-id11374 . -1510) (undo-tree-id11375 . -1510) (undo-tree-id11376 . -1510) (undo-tree-id11377 . -1510) (undo-tree-id11378 . -1510) (undo-tree-id11379 . -1510) (undo-tree-id11380 . -1510) (undo-tree-id11381 . -1510) (undo-tree-id11382 . -1589) (undo-tree-id11383 . -1433) (undo-tree-id11384 . -1433) (undo-tree-id11385 . -1433) (undo-tree-id11386 . -1433) (undo-tree-id11387 . -1433) (undo-tree-id11388 . -1433) (undo-tree-id11389 . -1433) (undo-tree-id11390 . -1433) (undo-tree-id11391 . -1510) (undo-tree-id11392 . -1355) (undo-tree-id11393 . -1355) (undo-tree-id11394 . -1355) (undo-tree-id11395 . -1355) (undo-tree-id11396 . -1355) (undo-tree-id11397 . -1355) (undo-tree-id11398 . -1355) (undo-tree-id11399 . -1355) (undo-tree-id11400 . -1433) (undo-tree-id11401 . -1278) (undo-tree-id11402 . -1278) (undo-tree-id11403 . -1278) (undo-tree-id11404 . -1278) (undo-tree-id11405 . -1278) (undo-tree-id11406 . -1278) (undo-tree-id11407 . -1278) (undo-tree-id11408 . -1278) (undo-tree-id11409 . -1355) (undo-tree-id11410 . -1201) (undo-tree-id11411 . -1201) (undo-tree-id11412 . -1201) (undo-tree-id11413 . -1201) (undo-tree-id11414 . -1201) (undo-tree-id11415 . -1201) (undo-tree-id11416 . -1201) (undo-tree-id11417 . -1201) (undo-tree-id11418 . -1278) (undo-tree-id11419 . -1123) (undo-tree-id11420 . -1123) (undo-tree-id11421 . -1123) (undo-tree-id11422 . -1123) (undo-tree-id11423 . -1123) (undo-tree-id11424 . -1123) (undo-tree-id11425 . -1123) (undo-tree-id11426 . -1123) (undo-tree-id11427 . -1201) (undo-tree-id11428 . -1045) (undo-tree-id11429 . -1045) (undo-tree-id11430 . -1045) (undo-tree-id11431 . -1045) (undo-tree-id11432 . -1045) (undo-tree-id11433 . -1045) (undo-tree-id11434 . -1045) (undo-tree-id11435 . -1045) (undo-tree-id11436 . -1123) (undo-tree-id11437 . -967) (undo-tree-id11438 . -967) (undo-tree-id11439 . -967) (undo-tree-id11440 . -967) (undo-tree-id11441 . -967) (undo-tree-id11442 . -967) (undo-tree-id11443 . -967) (undo-tree-id11444 . -967) (undo-tree-id11445 . -1045) (undo-tree-id11446 . -885) (undo-tree-id11447 . -885) (undo-tree-id11448 . -885) (undo-tree-id11449 . -885) (undo-tree-id11450 . -885) (undo-tree-id11451 . -885) (undo-tree-id11452 . -885) (undo-tree-id11453 . -885) (undo-tree-id11454 . -967) (undo-tree-id11455 . -808) (undo-tree-id11456 . -808) (undo-tree-id11457 . -808) (undo-tree-id11458 . -808) (undo-tree-id11459 . -808) (undo-tree-id11460 . -808) (undo-tree-id11461 . -808) (undo-tree-id11462 . -808) (undo-tree-id11463 . -885) (undo-tree-id11464 . -725) (undo-tree-id11465 . -725) (undo-tree-id11466 . -725) (undo-tree-id11467 . -725) (undo-tree-id11468 . -725) (undo-tree-id11469 . -725) (undo-tree-id11470 . -725) (undo-tree-id11471 . -725) (undo-tree-id11472 . -808) (undo-tree-id11473 . -647) (undo-tree-id11474 . -647) (undo-tree-id11475 . -647) (undo-tree-id11476 . -647) (undo-tree-id11477 . -647) (undo-tree-id11478 . -647) (undo-tree-id11479 . -647) (undo-tree-id11480 . -647) (undo-tree-id11481 . -725) (undo-tree-id11482 . -565) (undo-tree-id11483 . -565) (undo-tree-id11484 . -565) (undo-tree-id11485 . -565) (undo-tree-id11486 . -565) (undo-tree-id11487 . -565) (undo-tree-id11488 . -565) (undo-tree-id11489 . -565) (undo-tree-id11490 . -647) (undo-tree-id11491 . -487) (undo-tree-id11492 . -487) (undo-tree-id11493 . -487) (undo-tree-id11494 . -487) (undo-tree-id11495 . -487) (undo-tree-id11496 . -487) (undo-tree-id11497 . -487) (undo-tree-id11498 . -487) (undo-tree-id11499 . -565) (undo-tree-id11500 . -416) (undo-tree-id11501 . -416) (undo-tree-id11502 . -416) (undo-tree-id11503 . -416) (undo-tree-id11504 . -416) (undo-tree-id11505 . -416) (undo-tree-id11506 . -416) (undo-tree-id11507 . -416) (undo-tree-id11508 . -487) (undo-tree-id11509 . -340) (undo-tree-id11510 . -340) (undo-tree-id11511 . -340) (undo-tree-id11512 . -340) (undo-tree-id11513 . -340) (undo-tree-id11514 . -340) (undo-tree-id11515 . -340) (undo-tree-id11516 . -340) (undo-tree-id11517 . -340) (undo-tree-id11518 . -340) (undo-tree-id11519 . -340) (undo-tree-id11520 . -340) (undo-tree-id11521 . -340) (undo-tree-id11522 . -340) (undo-tree-id11523 . -340) (undo-tree-id11524 . -340) (undo-tree-id11525 . -340) (undo-tree-id11526 . -340) (undo-tree-id11527 . -340) (undo-tree-id11528 . -340) (undo-tree-id11529 . -340) (undo-tree-id11530 . -340) (undo-tree-id11531 . -416) (undo-tree-id11532 . -260) (undo-tree-id11533 . -260) (undo-tree-id11534 . -260) (undo-tree-id11535 . -260) (undo-tree-id11536 . -260) (undo-tree-id11537 . -260) (undo-tree-id11538 . -260) (undo-tree-id11539 . -260) (undo-tree-id11540 . -260) (undo-tree-id11541 . -260) (undo-tree-id11542 . -260) (undo-tree-id11543 . -260) (undo-tree-id11544 . -260) (undo-tree-id11545 . -260) (undo-tree-id11546 . -260) (undo-tree-id11547 . -260) (undo-tree-id11548 . -260) (undo-tree-id11549 . -340) (undo-tree-id11550 . -182) (undo-tree-id11551 . -182) (undo-tree-id11552 . -182) (undo-tree-id11553 . -182) (undo-tree-id11554 . -182) (undo-tree-id11555 . -182) (undo-tree-id11556 . -182) (undo-tree-id11557 . -182) (undo-tree-id11558 . -182) (undo-tree-id11559 . -182) (undo-tree-id11560 . -182) (undo-tree-id11561 . -182) (undo-tree-id11562 . -182) (undo-tree-id11563 . -182) (undo-tree-id11564 . -182) (undo-tree-id11565 . -260) (undo-tree-id11566 . -102) (undo-tree-id11567 . -102) (undo-tree-id11568 . -102) (undo-tree-id11569 . -102) (undo-tree-id11570 . -102) (undo-tree-id11571 . -102) (undo-tree-id11572 . -102) (undo-tree-id11573 . -102) (undo-tree-id11574 . -102) (undo-tree-id11575 . -102) (undo-tree-id11576 . -102) (undo-tree-id11577 . -102) (undo-tree-id11578 . -102) (undo-tree-id11579 . -102) (undo-tree-id11580 . -102) (undo-tree-id11581 . -182) (undo-tree-id11582 . -30) (undo-tree-id11583 . -30) (undo-tree-id11584 . -30) (undo-tree-id11585 . -30) (undo-tree-id11586 . -30) (undo-tree-id11587 . -30) (undo-tree-id11588 . -30) (undo-tree-id11589 . -30) (undo-tree-id11590 . -30) (undo-tree-id11591 . -30) (undo-tree-id11592 . -30) (undo-tree-id11593 . -30) (undo-tree-id11594 . -30) (undo-tree-id11595 . -30) (undo-tree-id11596 . -30) (undo-tree-id11597 . -102) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2320) (undo-tree-id11598 . 1) (undo-tree-id11599 . -1) (undo-tree-id11600 . -1) (undo-tree-id11601 . -1)) nil (25767 5198 395064 727000) 0 nil])
([nil nil ((#("so we can’t just train the neural network directly on it" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323) (undo-tree-id8799 . -55) (undo-tree-id8800 . 56) (undo-tree-id8801 . -56)) nil (25767 5198 392477 185000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323) (undo-tree-id8796 . 1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1)) nil (25767 5198 392473 229000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323) (undo-tree-id8793 . 1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1)) nil (25767 5198 392469 154000) 0 nil])
([nil nil ((4084 . 4085)) nil (25767 5198 392453 416000) 0 nil])
([nil nil ((#("the RNN would be equivalent to a deep net with over a million layers, and we would have a single (very long) instance to train it" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 76 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323) (undo-tree-id12481 . -128) (undo-tree-id12482 . 129) (undo-tree-id12483 . -129) (t 25767 5198 466845 53000)) nil (25767 5240 977958 936000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323) (undo-tree-id12478 . 1) (undo-tree-id12479 . -1) (undo-tree-id12480 . -1)) nil (25767 5240 977955 446000) 0 nil])
([nil nil ((#(" Instead, we will use the dataset’s window() method to " 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 22 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323) (undo-tree-id12139 . -54) (undo-tree-id12140 . -54) (undo-tree-id12141 . 55) (undo-tree-id12142 . -54) (undo-tree-id12143 . -55) (undo-tree-id12144 . -54) (undo-tree-id12145 . -7) (undo-tree-id12146 . -7) (undo-tree-id12147 . -7) (undo-tree-id12148 . -7) (undo-tree-id12149 . -7) (undo-tree-id12150 . -7) (undo-tree-id12151 . -7) (undo-tree-id12152 . -7) (undo-tree-id12153 . -7) (undo-tree-id12154 . -7) (undo-tree-id12155 . -7) (undo-tree-id12156 . -7) (undo-tree-id12157 . -7) (undo-tree-id12158 . -7) (undo-tree-id12159 . -7) (undo-tree-id12160 . -7) (undo-tree-id12161 . -7) (undo-tree-id12162 . -7) (undo-tree-id12163 . -7) (undo-tree-id12164 . -7) (undo-tree-id12165 . -7) (undo-tree-id12166 . -7) (undo-tree-id12167 . -8) (undo-tree-id12168 . -8) (undo-tree-id12169 . -8) (undo-tree-id12170 . -8) (undo-tree-id12171 . -8) (undo-tree-id12172 . -8) (undo-tree-id12173 . -8) (undo-tree-id12174 . -8) (undo-tree-id12175 . -8) (undo-tree-id12176 . -8) (undo-tree-id12177 . -8) (undo-tree-id12178 . -8) (undo-tree-id12179 . -8) (undo-tree-id12180 . -8) (undo-tree-id12181 . -8) (undo-tree-id12182 . -8) (undo-tree-id12183 . -8) (undo-tree-id12184 . -8) (undo-tree-id12185 . -8) (undo-tree-id12186 . -8) (undo-tree-id12187 . -8) (undo-tree-id12188 . -8) (undo-tree-id12189 . -8) (undo-tree-id12190 . -8) (undo-tree-id12191 . -8) (undo-tree-id12192 . -8) (undo-tree-id12193 . -8) (undo-tree-id12194 . -8) (undo-tree-id12195 . -8) (undo-tree-id12196 . -8) (undo-tree-id12197 . -8) (undo-tree-id12198 . -8) (undo-tree-id12199 . -8) (undo-tree-id12200 . -8) (undo-tree-id12201 . -8) (undo-tree-id12202 . -8) (undo-tree-id12203 . -11) (undo-tree-id12204 . -11) (undo-tree-id12205 . -11) (undo-tree-id12206 . -11) (undo-tree-id12207 . -11) (undo-tree-id12208 . -11) (undo-tree-id12209 . -11) (undo-tree-id12210 . -11) (undo-tree-id12211 . -11) (undo-tree-id12212 . -11) (undo-tree-id12213 . -11) (undo-tree-id12214 . -11) (undo-tree-id12215 . -11) (undo-tree-id12216 . -11) (undo-tree-id12217 . -11) (undo-tree-id12218 . -11) (undo-tree-id12219 . -11) (undo-tree-id12220 . -11) (undo-tree-id12221 . -11) (undo-tree-id12222 . -11) (undo-tree-id12223 . -11) (undo-tree-id12224 . -11) (undo-tree-id12225 . -16) (undo-tree-id12226 . -16) (undo-tree-id12227 . -16) (undo-tree-id12228 . -16) (undo-tree-id12229 . -16) (undo-tree-id12230 . -16) (undo-tree-id12231 . -16) (undo-tree-id12232 . -16) (undo-tree-id12233 . -16) (undo-tree-id12234 . -16) (undo-tree-id12235 . -16) (undo-tree-id12236 . -16) (undo-tree-id12237 . -16) (undo-tree-id12238 . -16) (undo-tree-id12239 . -16) (undo-tree-id12240 . -16) (undo-tree-id12241 . -16) (undo-tree-id12242 . -16) (undo-tree-id12243 . -16) (undo-tree-id12244 . -16) (undo-tree-id12245 . -16) (undo-tree-id12246 . -16) (undo-tree-id12247 . -20) (undo-tree-id12248 . -20) (undo-tree-id12249 . -20) (undo-tree-id12250 . -20) (undo-tree-id12251 . -20) (undo-tree-id12252 . -20) (undo-tree-id12253 . -20) (undo-tree-id12254 . -20) (undo-tree-id12255 . -20) (undo-tree-id12256 . -20) (undo-tree-id12257 . -20) (undo-tree-id12258 . -20) (undo-tree-id12259 . -20) (undo-tree-id12260 . -20) (undo-tree-id12261 . -20) (undo-tree-id12262 . -20) (undo-tree-id12263 . -20) (undo-tree-id12264 . -20) (undo-tree-id12265 . -20) (undo-tree-id12266 . -20) (undo-tree-id12267 . -20) (undo-tree-id12268 . -20) (undo-tree-id12269 . -20) (undo-tree-id12270 . -20) (undo-tree-id12271 . -20) (undo-tree-id12272 . -20) (undo-tree-id12273 . -20) (undo-tree-id12274 . -20) (undo-tree-id12275 . -20) (undo-tree-id12276 . -24) (undo-tree-id12277 . -24) (undo-tree-id12278 . -24) (undo-tree-id12279 . -24) (undo-tree-id12280 . -24) (undo-tree-id12281 . -24) (undo-tree-id12282 . -24) (undo-tree-id12283 . -24) (undo-tree-id12284 . -24) (undo-tree-id12285 . -24) (undo-tree-id12286 . -24) (undo-tree-id12287 . -24) (undo-tree-id12288 . -24) (undo-tree-id12289 . -24) (undo-tree-id12290 . -24) (undo-tree-id12291 . -24) (undo-tree-id12292 . -24) (undo-tree-id12293 . -24) (undo-tree-id12294 . -24) (undo-tree-id12295 . -24) (undo-tree-id12296 . -24) (undo-tree-id12297 . -24) (undo-tree-id12298 . 29) (undo-tree-id12299 . -33) (undo-tree-id12300 . -32) (undo-tree-id12301 . -32) (undo-tree-id12302 . -32) (undo-tree-id12303 . -32) (undo-tree-id12304 . -32) (undo-tree-id12305 . -32) (undo-tree-id12306 . -32) (undo-tree-id12307 . -32) (undo-tree-id12308 . -32) (undo-tree-id12309 . -32) (undo-tree-id12310 . -32) (undo-tree-id12311 . -32) (undo-tree-id12312 . -32) (undo-tree-id12313 . -32) (undo-tree-id12314 . -32) (undo-tree-id12315 . -32) (undo-tree-id12316 . -32) (undo-tree-id12317 . -32) (undo-tree-id12318 . -32) (undo-tree-id12319 . -32) (undo-tree-id12320 . -32) (undo-tree-id12321 . -32) (undo-tree-id12322 . -33) (undo-tree-id12323 . -33) (undo-tree-id12324 . -33) (undo-tree-id12325 . -33) (undo-tree-id12326 . -33) (undo-tree-id12327 . -33) (undo-tree-id12328 . -33) (undo-tree-id12329 . -33) (undo-tree-id12330 . -33) (undo-tree-id12331 . -33) (undo-tree-id12332 . -33) (undo-tree-id12333 . -33) (undo-tree-id12334 . -33) (undo-tree-id12335 . -33) (undo-tree-id12336 . -33) (undo-tree-id12337 . -33) (undo-tree-id12338 . -33) (undo-tree-id12339 . -33) (undo-tree-id12340 . -33) (undo-tree-id12341 . -33) (undo-tree-id12342 . -33) (undo-tree-id12343 . -33) (undo-tree-id12344 . -34) (undo-tree-id12345 . -34) (undo-tree-id12346 . -34) (undo-tree-id12347 . -34) (undo-tree-id12348 . -34) (undo-tree-id12349 . -34) (undo-tree-id12350 . -34) (undo-tree-id12351 . -34) (undo-tree-id12352 . -34) (undo-tree-id12353 . -34) (undo-tree-id12354 . -34) (undo-tree-id12355 . -34) (undo-tree-id12356 . -34) (undo-tree-id12357 . -34) (undo-tree-id12358 . -34) (undo-tree-id12359 . -34) (undo-tree-id12360 . -34) (undo-tree-id12361 . -34) (undo-tree-id12362 . -34) (undo-tree-id12363 . -34) (undo-tree-id12364 . -34) (undo-tree-id12365 . -34) (undo-tree-id12366 . -41) (undo-tree-id12367 . -41) (undo-tree-id12368 . -41) (undo-tree-id12369 . -41) (undo-tree-id12370 . -41) (undo-tree-id12371 . -41) (undo-tree-id12372 . -41) (undo-tree-id12373 . -41) (undo-tree-id12374 . -41) (undo-tree-id12375 . -41) (undo-tree-id12376 . -41) (undo-tree-id12377 . -41) (undo-tree-id12378 . -41) (undo-tree-id12379 . -41) (undo-tree-id12380 . -41) (undo-tree-id12381 . -41) (undo-tree-id12382 . -41) (undo-tree-id12383 . -41) (undo-tree-id12384 . -41) (undo-tree-id12385 . -41) (undo-tree-id12386 . -41) (undo-tree-id12387 . -41) (undo-tree-id12388 . -43) (undo-tree-id12389 . -43) (undo-tree-id12390 . -43) (undo-tree-id12391 . -43) (undo-tree-id12392 . -43) (undo-tree-id12393 . -43) (undo-tree-id12394 . -43) (undo-tree-id12395 . -43) (undo-tree-id12396 . -43) (undo-tree-id12397 . -43) (undo-tree-id12398 . -43) (undo-tree-id12399 . -43) (undo-tree-id12400 . -43) (undo-tree-id12401 . -43) (undo-tree-id12402 . -43) (undo-tree-id12403 . -43) (undo-tree-id12404 . -43) (undo-tree-id12405 . -43) (undo-tree-id12406 . -43) (undo-tree-id12407 . -43) (undo-tree-id12408 . -43) (undo-tree-id12409 . -43) (undo-tree-id12410 . -50) (undo-tree-id12411 . -50) (undo-tree-id12412 . -50) (undo-tree-id12413 . -50) (undo-tree-id12414 . -50) (undo-tree-id12415 . -50) (undo-tree-id12416 . -50) (undo-tree-id12417 . -50) (undo-tree-id12418 . -50) (undo-tree-id12419 . -50) (undo-tree-id12420 . -50) (undo-tree-id12421 . -50) (undo-tree-id12422 . -50) (undo-tree-id12423 . -50) (undo-tree-id12424 . -50) (undo-tree-id12425 . -50) (undo-tree-id12426 . -50) (undo-tree-id12427 . -50) (undo-tree-id12428 . -50) (undo-tree-id12429 . -50) (undo-tree-id12430 . -50) (undo-tree-id12431 . -50) (undo-tree-id12432 . -53) (undo-tree-id12433 . -53) (undo-tree-id12434 . -53) (undo-tree-id12435 . -53) (undo-tree-id12436 . -53) (undo-tree-id12437 . -53) (undo-tree-id12438 . -53) (undo-tree-id12439 . -53) (undo-tree-id12440 . -53) (undo-tree-id12441 . -53) (undo-tree-id12442 . -53) (undo-tree-id12443 . -53) (undo-tree-id12444 . -53) (undo-tree-id12445 . -53) (undo-tree-id12446 . -53) (undo-tree-id12447 . -53) (undo-tree-id12448 . -53) (undo-tree-id12449 . -53) (undo-tree-id12450 . -53) (undo-tree-id12451 . -53) (undo-tree-id12452 . -53) (undo-tree-id12453 . -53) (undo-tree-id12454 . -54) (undo-tree-id12455 . -54) (undo-tree-id12456 . -54) (undo-tree-id12457 . -54) (undo-tree-id12458 . -54) (undo-tree-id12459 . -54) (undo-tree-id12460 . -54) (undo-tree-id12461 . -54) (undo-tree-id12462 . -54) (undo-tree-id12463 . -54) (undo-tree-id12464 . -54) (undo-tree-id12465 . -54) (undo-tree-id12466 . -54) (undo-tree-id12467 . -54) (undo-tree-id12468 . -54) (undo-tree-id12469 . -54) (undo-tree-id12470 . -54) (undo-tree-id12471 . -54) (undo-tree-id12472 . -54) (undo-tree-id12473 . -54) (undo-tree-id12474 . -54) (undo-tree-id12475 . -54) (undo-tree-id12476 . -54) (undo-tree-id12477 . -55) 2377) nil (25767 5240 977939 26000) 0 nil])
([nil nil ((2323 . 2324) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2323)) nil (25767 5240 977478 582000) 0 nil])
([nil nil ((2321 . 3901) (#("- Every instance in the dataset will be a fairly short substring of the whole text, and the RNN will be unrolled only over the length of these substrings. This is called truncated backpropagation through time. Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will
- Convert this long sequence of characters into many smaller windows of text." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 41 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 41 42 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 42 102 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 102 103 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 103 104 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 104 105 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 105 117 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 117 118 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 118 179 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 179 180 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 180 221 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 221 237 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 237 238 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 238 239 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 239 252 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 252 253 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 253 283 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 283 284 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 284 285 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 285 286 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 286 291 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 291 297 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 297 298 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 298 304 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 304 305 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 305 311 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 311 315 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 315 316 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 316 321 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 321 368 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 368 369 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 369 400 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 400 401 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 401 407 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 407 422 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 422 423 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 423 424 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 424 432 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 432 438 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 438 439 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 439 442 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 442 443 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 443 463 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 463 464 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 464 469 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 469 496 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 496 526 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 526 527 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 527 600 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 600 601 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 601 606 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 606 611 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 611 612 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 612 618 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 618 636 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 636 637 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 637 707 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 707 708 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 708 778 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 778 779 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 779 851 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 851 852 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 852 926 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 926 927 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 927 1000 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1000 1001 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1001 1012 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1012 1013 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1013 1022 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1022 1064 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1064 1065 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1065 1135 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1135 1136 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1136 1137 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1137 1204 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1204 1205 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1205 1282 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1282 1283 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1283 1354 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1354 1355 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1355 1430 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1430 1431 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1431 1501 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1501 1502 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1502 1503 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1503 1504 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 1504 1505 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1505 1545 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1545 1546 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1546 1575 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1575 1580 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 2321) (undo-tree-id12484 . -1505) (undo-tree-id12485 . -1505) (undo-tree-id12486 . 74) (undo-tree-id12487 . 75) (undo-tree-id12488 . -1505) (undo-tree-id12489 . -1505) (undo-tree-id12490 . -1505) (undo-tree-id12491 . -1505) (undo-tree-id12492 . -1505) (undo-tree-id12493 . -1505) (undo-tree-id12494 . -1505) (undo-tree-id12495 . -1505) (undo-tree-id12496 . -1505) (undo-tree-id12497 . -1505) (undo-tree-id12498 . -1505) (undo-tree-id12499 . -1505) (undo-tree-id12500 . -1505) (undo-tree-id12501 . -1505) (undo-tree-id12502 . -1505) (undo-tree-id12503 . -1505) (undo-tree-id12504 . -1505) (undo-tree-id12505 . -1505) (undo-tree-id12506 . -1505) (undo-tree-id12507 . -1505) (undo-tree-id12508 . -1505) (undo-tree-id12509 . -1505) (undo-tree-id12510 . -1505) (undo-tree-id12511 . -1505) (undo-tree-id12512 . -1505) (undo-tree-id12513 . -1505) (undo-tree-id12514 . -1505) (undo-tree-id12515 . -1505) (undo-tree-id12516 . -1505) (undo-tree-id12517 . -1505) (undo-tree-id12518 . -1505) (undo-tree-id12519 . -1505) (undo-tree-id12520 . -1505) (undo-tree-id12521 . -1505) (undo-tree-id12522 . -1505) (undo-tree-id12523 . -1505) (undo-tree-id12524 . -1505) (undo-tree-id12525 . -1505) (undo-tree-id12526 . -1505) (undo-tree-id12527 . -1505) (undo-tree-id12528 . -1505) (undo-tree-id12529 . -1505) (undo-tree-id12530 . -1505) (undo-tree-id12531 . -1505) (undo-tree-id12532 . -1505) (undo-tree-id12533 . -1505) (undo-tree-id12534 . -1505) (undo-tree-id12535 . -1505) (undo-tree-id12536 . -1505) (undo-tree-id12537 . -1505) (undo-tree-id12538 . -1505) (undo-tree-id12539 . -1505) (undo-tree-id12540 . -1505) (undo-tree-id12541 . -1505) (undo-tree-id12542 . -1505) (undo-tree-id12543 . -1505) (undo-tree-id12544 . -1505) (undo-tree-id12545 . -1505) (undo-tree-id12546 . -1505) (undo-tree-id12547 . -1505) (undo-tree-id12548 . -1505) (undo-tree-id12549 . -1505) (undo-tree-id12550 . -1505) (undo-tree-id12551 . -1505) (undo-tree-id12552 . -1505) (undo-tree-id12553 . -1505) (undo-tree-id12554 . -1505) (undo-tree-id12555 . -1505) (undo-tree-id12556 . -1505) (undo-tree-id12557 . -1505) (undo-tree-id12558 . -1505) (undo-tree-id12559 . -1505) (undo-tree-id12560 . -1505) (undo-tree-id12561 . -1505) (undo-tree-id12562 . -1505) (undo-tree-id12563 . -1505) (undo-tree-id12564 . -1505) (undo-tree-id12565 . -1505) (undo-tree-id12566 . -1505) (undo-tree-id12567 . -1505) (undo-tree-id12568 . -1505) (undo-tree-id12569 . -1505) (undo-tree-id12570 . -1505) (undo-tree-id12571 . -1505) (undo-tree-id12572 . -1505) (undo-tree-id12573 . -1505) (undo-tree-id12574 . -1505) (undo-tree-id12575 . -1505) (undo-tree-id12576 . -1505) (undo-tree-id12577 . -1505) (undo-tree-id12578 . -1505) (undo-tree-id12579 . -1505) (undo-tree-id12580 . -1505) (undo-tree-id12581 . -1505) (undo-tree-id12582 . -1505) (undo-tree-id12583 . -1505) (undo-tree-id12584 . -1505) (undo-tree-id12585 . -1505) (undo-tree-id12586 . -1505) (undo-tree-id12587 . -1505) (undo-tree-id12588 . -1505) (undo-tree-id12589 . -1505) (undo-tree-id12590 . -1505) (undo-tree-id12591 . -1505) (undo-tree-id12592 . -1505) (undo-tree-id12593 . -1505) (undo-tree-id12594 . -1505) (undo-tree-id12595 . -1505) (undo-tree-id12596 . -1505) (undo-tree-id12597 . -1505) (undo-tree-id12598 . -1505) (undo-tree-id12599 . -1505) (undo-tree-id12600 . -1505) (undo-tree-id12601 . -1505) (undo-tree-id12602 . -1505) (undo-tree-id12603 . -1505) (undo-tree-id12604 . -1505) (undo-tree-id12605 . -1505) (undo-tree-id12606 . -1505) (undo-tree-id12607 . -1505) (undo-tree-id12608 . -1505) (undo-tree-id12609 . -1505) (undo-tree-id12610 . -1505) (undo-tree-id12611 . -1505) (undo-tree-id12612 . -1505) (undo-tree-id12613 . -1505) (undo-tree-id12614 . -1505) (undo-tree-id12615 . -1505) (undo-tree-id12616 . -1505) (undo-tree-id12617 . -1505) (undo-tree-id12618 . -1505) (undo-tree-id12619 . -1505) (undo-tree-id12620 . -1505) (undo-tree-id12621 . -1505) (undo-tree-id12622 . -1505) (undo-tree-id12623 . -1505) (undo-tree-id12624 . -1505) (undo-tree-id12625 . -1505) (undo-tree-id12626 . -1505) (undo-tree-id12627 . -1505) (undo-tree-id12628 . -1505) (undo-tree-id12629 . -1505) (undo-tree-id12630 . -1505) (undo-tree-id12631 . -1505) (undo-tree-id12632 . -1505) (undo-tree-id12633 . -1505) (undo-tree-id12634 . -1505) (undo-tree-id12635 . -1505) (undo-tree-id12636 . -1505) (undo-tree-id12637 . -1505) (undo-tree-id12638 . -1505) (undo-tree-id12639 . -1505) (undo-tree-id12640 . -1505) (undo-tree-id12641 . -1505) (undo-tree-id12642 . -1505) (undo-tree-id12643 . -1505) (undo-tree-id12644 . -1505) (undo-tree-id12645 . -1505) (undo-tree-id12646 . -1505) (undo-tree-id12647 . -1505) (undo-tree-id12648 . -1505) (undo-tree-id12649 . -1505) (undo-tree-id12650 . -1505) (undo-tree-id12651 . -1505) (undo-tree-id12652 . -1505) (undo-tree-id12653 . -1505) (undo-tree-id12654 . -1505) (undo-tree-id12655 . -1505) (undo-tree-id12656 . -1505) (undo-tree-id12657 . -1505) (undo-tree-id12658 . -1505) (undo-tree-id12659 . -1505) (undo-tree-id12660 . -1505) (undo-tree-id12661 . -1505) (undo-tree-id12662 . -1505) (undo-tree-id12663 . -1505) (undo-tree-id12664 . -1505) (undo-tree-id12665 . -1505) (undo-tree-id12666 . -1505) (undo-tree-id12667 . -1505) (undo-tree-id12668 . -1505) (undo-tree-id12669 . -1505) (undo-tree-id12670 . -1505) (undo-tree-id12671 . -1505) (undo-tree-id12672 . -1505) (undo-tree-id12673 . -1505) (undo-tree-id12674 . -1505) (undo-tree-id12675 . -1505) (undo-tree-id12676 . -1505) (undo-tree-id12677 . -1505) (undo-tree-id12678 . -1505) (undo-tree-id12679 . -1505) (undo-tree-id12680 . -1505) (undo-tree-id12681 . -1505) (undo-tree-id12682 . -1505) (undo-tree-id12683 . -1505) (undo-tree-id12684 . -1505) (undo-tree-id12685 . -1505) (undo-tree-id12686 . -1505) (undo-tree-id12687 . -1505) (undo-tree-id12688 . -1505) (undo-tree-id12689 . -1505) (undo-tree-id12690 . -1505) (undo-tree-id12691 . -1505) (undo-tree-id12692 . -1505) (undo-tree-id12693 . -1505) (undo-tree-id12694 . -1505) (undo-tree-id12695 . -1505) (undo-tree-id12696 . -1505) (undo-tree-id12697 . -1505) (undo-tree-id12698 . -1505) (undo-tree-id12699 . -1505) (undo-tree-id12700 . -1505) (undo-tree-id12701 . -1505) (undo-tree-id12702 . -1505) (undo-tree-id12703 . -1505) (undo-tree-id12704 . -1505) (undo-tree-id12705 . -1505) (undo-tree-id12706 . -1505) (undo-tree-id12707 . -1505) (undo-tree-id12708 . -1505) (undo-tree-id12709 . -1505) (undo-tree-id12710 . -1505) (undo-tree-id12711 . -1505) (undo-tree-id12712 . -1505) (undo-tree-id12713 . -1505) (undo-tree-id12714 . -1505) (undo-tree-id12715 . -1505) (undo-tree-id12716 . -1505) (undo-tree-id12717 . -1505) (undo-tree-id12718 . -1505) (undo-tree-id12719 . -1505) (undo-tree-id12720 . -1505) (undo-tree-id12721 . -1505) (undo-tree-id12722 . -1505) (undo-tree-id12723 . -1505) (undo-tree-id12724 . -1505) (undo-tree-id12725 . -1505) (undo-tree-id12726 . -1505) (undo-tree-id12727 . -1505) (undo-tree-id12728 . -1505) (undo-tree-id12729 . -1505) (undo-tree-id12730 . -1505) (undo-tree-id12731 . -1505) (undo-tree-id12732 . -1505) (undo-tree-id12733 . -1505) (undo-tree-id12734 . -1505) (undo-tree-id12735 . -1505) (undo-tree-id12736 . -1505) (undo-tree-id12737 . -1505) (undo-tree-id12738 . -1505) (undo-tree-id12739 . -1505) (undo-tree-id12740 . -1505) (undo-tree-id12741 . -1505) (undo-tree-id12742 . -1505) (undo-tree-id12743 . -1505) (undo-tree-id12744 . -1505) (undo-tree-id12745 . -1505) (undo-tree-id12746 . -1505) (undo-tree-id12747 . -1505) (undo-tree-id12748 . -1505) (undo-tree-id12749 . -1505) (undo-tree-id12750 . -1505) (undo-tree-id12751 . -1505) (undo-tree-id12752 . -1505) (undo-tree-id12753 . -1505) (undo-tree-id12754 . -1505) (undo-tree-id12755 . -1505) (undo-tree-id12756 . -1505) (undo-tree-id12757 . -1505) (undo-tree-id12758 . -1505) (undo-tree-id12759 . -1505) (undo-tree-id12760 . -1505) (undo-tree-id12761 . -1505) (undo-tree-id12762 . -1505) (undo-tree-id12763 . -1505) (undo-tree-id12764 . -1505) (undo-tree-id12765 . -1505) (undo-tree-id12766 . -1505) (undo-tree-id12767 . -1505) (undo-tree-id12768 . -1505) (undo-tree-id12769 . -1505) (undo-tree-id12770 . -1505) (undo-tree-id12771 . -1505) (undo-tree-id12772 . -1505) (undo-tree-id12773 . -1505) (undo-tree-id12774 . -1505) (undo-tree-id12775 . -1505) (undo-tree-id12776 . -1505) (undo-tree-id12777 . -1505) (undo-tree-id12778 . -1505) (undo-tree-id12779 . -1505) (undo-tree-id12780 . -1505) (undo-tree-id12781 . -1505) (undo-tree-id12782 . -1505) (undo-tree-id12783 . -1505) (undo-tree-id12784 . -1505) (undo-tree-id12785 . -1505) (undo-tree-id12786 . -1505) (undo-tree-id12787 . -1505) (undo-tree-id12788 . -1505) (undo-tree-id12789 . -1505) (undo-tree-id12790 . -1505) (undo-tree-id12791 . -1505) (undo-tree-id12792 . -1505) (undo-tree-id12793 . -1505) (undo-tree-id12794 . -1505) (undo-tree-id12795 . -1505) (undo-tree-id12796 . -1505) (undo-tree-id12797 . -1505) (undo-tree-id12798 . -1505) (undo-tree-id12799 . -1505) (undo-tree-id12800 . -1505) (undo-tree-id12801 . -1505) (undo-tree-id12802 . -1505) (undo-tree-id12803 . -1505) (undo-tree-id12804 . -1505) (undo-tree-id12805 . -1505) (undo-tree-id12806 . -1505) (undo-tree-id12807 . -1505) (undo-tree-id12808 . -1505) (undo-tree-id12809 . -1505) (undo-tree-id12810 . -1505) (undo-tree-id12811 . -1505) (undo-tree-id12812 . -1505) (undo-tree-id12813 . -1505) (undo-tree-id12814 . -1505) (undo-tree-id12815 . -1505) (undo-tree-id12816 . -1505) (undo-tree-id12817 . -1505) (undo-tree-id12818 . -1580) (undo-tree-id12819 . -1505) (undo-tree-id12820 . -1505) (undo-tree-id12821 . -1505) (undo-tree-id12822 . -1505) (undo-tree-id12823 . -1505) (undo-tree-id12824 . -1505) (undo-tree-id12825 . -1505) (undo-tree-id12826 . -1505) (undo-tree-id12827 . -1505) (undo-tree-id12828 . -1505) (undo-tree-id12829 . -1505) (undo-tree-id12830 . -1505) (undo-tree-id12831 . -1505) (undo-tree-id12832 . -1505) (undo-tree-id12833 . -1505) (undo-tree-id12834 . -1505) (undo-tree-id12835 . -1505) (undo-tree-id12836 . -1505) (undo-tree-id12837 . -1505) (undo-tree-id12838 . -1505) (undo-tree-id12839 . -1505) (undo-tree-id12840 . -1505) (undo-tree-id12841 . -1505) (undo-tree-id12842 . -1505) (undo-tree-id12843 . -1505) (undo-tree-id12844 . -1511) (undo-tree-id12845 . -1511) (undo-tree-id12846 . -1511) (undo-tree-id12847 . -1511) (undo-tree-id12848 . -1511) (undo-tree-id12849 . -1511) (undo-tree-id12850 . -1511) (undo-tree-id12851 . -1511) (undo-tree-id12852 . -1511) (undo-tree-id12853 . -1511) (undo-tree-id12854 . -1511) (undo-tree-id12855 . -1511) (undo-tree-id12856 . -1511) (undo-tree-id12857 . -1511) (undo-tree-id12858 . -1511) (undo-tree-id12859 . -1516) (undo-tree-id12860 . -1516) (undo-tree-id12861 . -1516) (undo-tree-id12862 . -1516) (undo-tree-id12863 . -1516) (undo-tree-id12864 . -1516) (undo-tree-id12865 . -1516) (undo-tree-id12866 . -1516) (undo-tree-id12867 . -1516) (undo-tree-id12868 . -1516) (undo-tree-id12869 . -1516) (undo-tree-id12870 . -1516) (undo-tree-id12871 . -1516) (undo-tree-id12872 . -1516) (undo-tree-id12873 . -1516) (undo-tree-id12874 . -1521) (undo-tree-id12875 . -1521) (undo-tree-id12876 . -1521) (undo-tree-id12877 . -1521) (undo-tree-id12878 . -1521) (undo-tree-id12879 . -1521) (undo-tree-id12880 . -1521) (undo-tree-id12881 . -1521) (undo-tree-id12882 . -1521) (undo-tree-id12883 . -1521) (undo-tree-id12884 . -1521) (undo-tree-id12885 . -1521) (undo-tree-id12886 . -1521) (undo-tree-id12887 . -1521) (undo-tree-id12888 . -1521) (undo-tree-id12889 . -1530) (undo-tree-id12890 . -1530) (undo-tree-id12891 . -1530) (undo-tree-id12892 . -1530) (undo-tree-id12893 . -1530) (undo-tree-id12894 . -1530) (undo-tree-id12895 . -1530) (undo-tree-id12896 . -1530) (undo-tree-id12897 . -1530) (undo-tree-id12898 . -1530) (undo-tree-id12899 . -1530) (undo-tree-id12900 . -1530) (undo-tree-id12901 . -1530) (undo-tree-id12902 . -1530) (undo-tree-id12903 . -1530) (undo-tree-id12904 . -1533) (undo-tree-id12905 . -1533) (undo-tree-id12906 . -1533) (undo-tree-id12907 . -1533) (undo-tree-id12908 . -1533) (undo-tree-id12909 . -1533) (undo-tree-id12910 . -1533) (undo-tree-id12911 . -1533) (undo-tree-id12912 . -1533) (undo-tree-id12913 . -1533) (undo-tree-id12914 . -1533) (undo-tree-id12915 . -1533) (undo-tree-id12916 . -1533) (undo-tree-id12917 . -1533) (undo-tree-id12918 . -1533) (undo-tree-id12919 . -1544) (undo-tree-id12920 . -1544) (undo-tree-id12921 . -1544) (undo-tree-id12922 . -1544) (undo-tree-id12923 . -1544) (undo-tree-id12924 . -1544) (undo-tree-id12925 . -1544) (undo-tree-id12926 . -1544) (undo-tree-id12927 . -1544) (undo-tree-id12928 . -1544) (undo-tree-id12929 . -1544) (undo-tree-id12930 . -1544) (undo-tree-id12931 . -1544) (undo-tree-id12932 . -1544) (undo-tree-id12933 . -1544) (undo-tree-id12934 . -1549) (undo-tree-id12935 . -1549) (undo-tree-id12936 . -1549) (undo-tree-id12937 . -1549) (undo-tree-id12938 . -1549) (undo-tree-id12939 . -1549) (undo-tree-id12940 . -1549) (undo-tree-id12941 . -1549) (undo-tree-id12942 . -1549) (undo-tree-id12943 . -1549) (undo-tree-id12944 . -1549) (undo-tree-id12945 . -1549) (undo-tree-id12946 . -1549) (undo-tree-id12947 . -1549) (undo-tree-id12948 . -1549) (undo-tree-id12949 . -1554) (undo-tree-id12950 . -1554) (undo-tree-id12951 . -1554) (undo-tree-id12952 . -1554) (undo-tree-id12953 . -1554) (undo-tree-id12954 . -1554) (undo-tree-id12955 . -1554) (undo-tree-id12956 . -1554) (undo-tree-id12957 . -1554) (undo-tree-id12958 . -1554) (undo-tree-id12959 . -1554) (undo-tree-id12960 . -1554) (undo-tree-id12961 . -1554) (undo-tree-id12962 . -1554) (undo-tree-id12963 . -1554) (undo-tree-id12964 . -1554) (undo-tree-id12965 . -1554) (undo-tree-id12966 . -1554) (undo-tree-id12967 . -1554) (undo-tree-id12968 . -1554) (undo-tree-id12969 . -1554) (undo-tree-id12970 . -1554) (undo-tree-id12971 . -1562) (undo-tree-id12972 . -1562) (undo-tree-id12973 . -1562) (undo-tree-id12974 . -1562) (undo-tree-id12975 . -1562) (undo-tree-id12976 . -1562) (undo-tree-id12977 . -1562) (undo-tree-id12978 . -1562) (undo-tree-id12979 . -1562) (undo-tree-id12980 . -1562) (undo-tree-id12981 . -1562) (undo-tree-id12982 . -1562) (undo-tree-id12983 . -1562) (undo-tree-id12984 . -1562) (undo-tree-id12985 . -1562) (undo-tree-id12986 . -1570) (undo-tree-id12987 . -1570) (undo-tree-id12988 . -1570) (undo-tree-id12989 . -1570) (undo-tree-id12990 . -1570) (undo-tree-id12991 . -1570) (undo-tree-id12992 . -1570) (undo-tree-id12993 . -1570) (undo-tree-id12994 . -1570) (undo-tree-id12995 . -1570) (undo-tree-id12996 . -1570) (undo-tree-id12997 . -1570) (undo-tree-id12998 . -1570) (undo-tree-id12999 . -1570) (undo-tree-id13000 . -1570) (undo-tree-id13001 . -1573) (undo-tree-id13002 . -1573) (undo-tree-id13003 . -1573) (undo-tree-id13004 . -1573) (undo-tree-id13005 . -1573) (undo-tree-id13006 . -1573) (undo-tree-id13007 . -1573) (undo-tree-id13008 . -1573) (undo-tree-id13009 . -1573) (undo-tree-id13010 . -1573) (undo-tree-id13011 . -1573) (undo-tree-id13012 . -1573) (undo-tree-id13013 . -1573) (undo-tree-id13014 . -1573) (undo-tree-id13015 . -1573) (undo-tree-id13016 . -1578) (undo-tree-id13017 . -1578) (undo-tree-id13018 . -1578) (undo-tree-id13019 . -1578) (undo-tree-id13020 . -1578) (undo-tree-id13021 . -1578) (undo-tree-id13022 . -1578) (undo-tree-id13023 . -1578) (undo-tree-id13024 . -1578) (undo-tree-id13025 . -1578) (undo-tree-id13026 . -1578) (undo-tree-id13027 . -1578) (undo-tree-id13028 . -1578) (undo-tree-id13029 . -1578) (undo-tree-id13030 . -1578) (undo-tree-id13031 . -1579) (undo-tree-id13032 . -1579) (undo-tree-id13033 . -1579) (undo-tree-id13034 . -1579) (undo-tree-id13035 . -1579) (undo-tree-id13036 . -1579) (undo-tree-id13037 . -1579) (undo-tree-id13038 . -1579) (undo-tree-id13039 . -1579) (undo-tree-id13040 . -1579) (undo-tree-id13041 . -1579) (undo-tree-id13042 . -1579) (undo-tree-id13043 . -1579) (undo-tree-id13044 . -1579) (undo-tree-id13045 . -1579) (undo-tree-id13046 . -1579) (undo-tree-id13047 . -1579) (undo-tree-id13048 . -1579) (undo-tree-id13049 . -1579) (undo-tree-id13050 . -1579) (undo-tree-id13051 . -1579) (undo-tree-id13052 . -1579) (undo-tree-id13053 . -1580) (undo-tree-id13054 . -1580) (undo-tree-id13055 . -1580) (undo-tree-id13056 . -1580) (undo-tree-id13057 . -1580) (undo-tree-id13058 . -1580) (undo-tree-id13059 . -1580) (undo-tree-id13060 . -1580) (undo-tree-id13061 . -1580) (undo-tree-id13062 . -1580) (undo-tree-id13063 . -1580) (undo-tree-id13064 . -1580) (undo-tree-id13065 . -1580) (undo-tree-id13066 . -1580) (undo-tree-id13067 . -1580) (undo-tree-id13068 . -1580) (undo-tree-id13069 . -1580) (undo-tree-id13070 . -1580) (undo-tree-id13071 . -1580) (undo-tree-id13072 . -1580) (undo-tree-id13073 . -1580) (undo-tree-id13074 . -1580) (undo-tree-id13075 . -1580) (undo-tree-id13076 . -1580) (undo-tree-id13077 . -1580) (undo-tree-id13078 . -1503) (2321 . 3824) (#(" Every instance in the dataset will be a fairly short substring of the whole text, and the RNN will be unrolled only over the length of these substrings. This is called truncated backpropagation through time. Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will" 0 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 40 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 41 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 101 102 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 102 103 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 103 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 104 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 116 117 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 178 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 178 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 179 220 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 220 236 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 236 237 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 237 238 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 238 251 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 251 252 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 252 282 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 282 283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 283 284 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 284 285 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 285 290 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 290 296 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 297 303 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 303 304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 304 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 310 314 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 314 315 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 315 320 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 320 367 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 367 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 368 399 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 399 400 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 400 406 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 406 421 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 421 422 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 422 423 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 423 431 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 431 437 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 437 438 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 438 441 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 441 442 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 442 462 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 462 463 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 463 468 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 468 495 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 495 525 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 525 526 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 526 599 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 599 600 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 600 605 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 605 610 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 610 611 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 611 617 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 617 635 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 635 636 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 636 706 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 706 707 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 707 777 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 777 778 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 778 850 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 850 851 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 851 925 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 925 926 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 926 999 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 999 1000 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1000 1011 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1011 1012 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1012 1021 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1021 1063 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1063 1064 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1064 1134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1134 1135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1135 1136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1136 1203 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1203 1204 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1204 1281 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1281 1282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1282 1353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1353 1354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1354 1429 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1429 1430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1430 1500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1500 1501 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 2398) (t 25767 5240 994668 629000)) nil (25767 5249 34198 805000) 0 nil])
([nil nil ((2320 . 2321) (t 25767 5249 58640 654000)) nil (25767 5304 92975 127000) 0 nil])
([nil nil ((#("Every instance in the dataset will be a fairly short substring of the whole text" 0 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 40 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2402) (undo-tree-id13982 . -79) (undo-tree-id13983 . -80)) nil (25767 5304 92973 291000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2402) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1)) nil (25767 5304 92971 234000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2402) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1)) nil (25767 5304 92968 794000) 0 nil])
([nil nil ((2402 . 2403) (#("and t" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2402) (undo-tree-id13881 . -4) (undo-tree-id13882 . -4) (undo-tree-id13883 . -4) (undo-tree-id13884 . -5) (undo-tree-id13885 . -4) (undo-tree-id13886 . -1) (undo-tree-id13887 . -1) (undo-tree-id13888 . -1) (undo-tree-id13889 . -1) (undo-tree-id13890 . -1) (undo-tree-id13891 . -1) (undo-tree-id13892 . -1) (undo-tree-id13893 . -1) (undo-tree-id13894 . -1) (undo-tree-id13895 . -1) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (undo-tree-id13908 . -2) (undo-tree-id13909 . -2) (undo-tree-id13910 . -2) (undo-tree-id13911 . -2) (undo-tree-id13912 . -2) (undo-tree-id13913 . -2) (undo-tree-id13914 . -2) (undo-tree-id13915 . -2) (undo-tree-id13916 . -2) (undo-tree-id13917 . -2) (undo-tree-id13918 . -2) (undo-tree-id13919 . -2) (undo-tree-id13920 . -2) (undo-tree-id13921 . -2) (undo-tree-id13922 . -2) (undo-tree-id13923 . -2) (undo-tree-id13924 . -2) (undo-tree-id13925 . -2) (undo-tree-id13926 . -2) (undo-tree-id13927 . -2) (undo-tree-id13928 . -2) (undo-tree-id13929 . -2) (undo-tree-id13930 . -3) (undo-tree-id13931 . -3) (undo-tree-id13932 . -3) (undo-tree-id13933 . -3) (undo-tree-id13934 . -3) (undo-tree-id13935 . -3) (undo-tree-id13936 . -3) (undo-tree-id13937 . -3) (undo-tree-id13938 . -3) (undo-tree-id13939 . -3) (undo-tree-id13940 . -3) (undo-tree-id13941 . -3) (undo-tree-id13942 . -3) (undo-tree-id13943 . -3) (undo-tree-id13944 . -3) (undo-tree-id13945 . -3) (undo-tree-id13946 . -3) (undo-tree-id13947 . -3) (undo-tree-id13948 . -3) (undo-tree-id13949 . -3) (undo-tree-id13950 . -3) (undo-tree-id13951 . -3) (undo-tree-id13952 . -4) (undo-tree-id13953 . -4) (undo-tree-id13954 . -4) (undo-tree-id13955 . -4) (undo-tree-id13956 . -4) (undo-tree-id13957 . -4) (undo-tree-id13958 . -4) (undo-tree-id13959 . -4) (undo-tree-id13960 . -4) (undo-tree-id13961 . -4) (undo-tree-id13962 . -4) (undo-tree-id13963 . -4) (undo-tree-id13964 . -4) (undo-tree-id13965 . -4) (undo-tree-id13966 . -4) (undo-tree-id13967 . -4) (undo-tree-id13968 . -4) (undo-tree-id13969 . -4) (undo-tree-id13970 . -4) (undo-tree-id13971 . -4) (undo-tree-id13972 . -4) (undo-tree-id13973 . -4) (undo-tree-id13974 . -4) (undo-tree-id13975 . -5) (undo-tree-id13976 . -5) (undo-tree-id13977 . -5) 2406) nil (25767 5304 92963 669000) 0 nil])
([nil nil ((2400 . 3818) (#("- This is called truncated backpropagation through time. Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will
- The RNN will be unrolled only over the length of these substrings." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 26 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 26 27 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 27 68 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 68 84 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 84 85 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 85 86 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 86 99 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 99 100 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 100 130 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 130 131 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 131 132 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 132 133 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 133 138 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 138 144 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 144 145 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 145 151 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 151 152 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 152 158 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 158 162 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 162 163 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 163 168 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 168 215 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 215 216 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 216 247 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 247 248 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 248 254 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 254 269 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 269 270 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 270 271 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 271 279 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 279 285 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 285 286 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 286 289 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 289 290 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 290 310 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 310 311 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 311 316 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 316 343 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 343 373 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 373 374 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 374 427 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 427 428 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 428 429 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 429 433 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 433 434 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 434 447 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 447 448 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 448 453 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 453 458 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 458 459 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 459 465 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 465 483 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 483 484 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 484 554 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 554 555 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 555 625 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 625 626 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 626 698 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 698 699 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 699 773 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 773 774 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 774 847 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 847 848 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 848 859 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 859 860 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 860 869 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 869 911 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 911 912 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 912 982 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 982 983 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 983 984 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 984 1051 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1051 1052 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1052 1129 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1129 1130 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1130 1201 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1201 1202 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1202 1277 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1277 1278 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1278 1348 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1348 1349 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1349 1350 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1350 1351 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 1351 1353 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1353 1366 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1366 1367 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1367 1368 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1368 1369 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1369 1381 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1381 1382 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1382 1418 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 2400) (undo-tree-id13079 . -1352) (undo-tree-id13080 . -1352) (undo-tree-id13081 . -1352) (undo-tree-id13082 . -1352) (undo-tree-id13083 . 65) (undo-tree-id13084 . 65) (undo-tree-id13085 . -1351) (undo-tree-id13086 . -1418) (undo-tree-id13087 . -1351) (undo-tree-id13088 . -1351) (undo-tree-id13089 . -1351) (undo-tree-id13090 . -1351) (undo-tree-id13091 . -1351) (undo-tree-id13092 . -1351) (undo-tree-id13093 . -1351) (undo-tree-id13094 . -1351) (undo-tree-id13095 . -1351) (undo-tree-id13096 . -1351) (undo-tree-id13097 . -1351) (undo-tree-id13098 . -1351) (undo-tree-id13099 . -1351) (undo-tree-id13100 . -1351) (undo-tree-id13101 . -1351) (undo-tree-id13102 . -1351) (undo-tree-id13103 . -1351) (undo-tree-id13104 . -1351) (undo-tree-id13105 . -1351) (undo-tree-id13106 . -1351) (undo-tree-id13107 . -1351) (undo-tree-id13108 . -1351) (undo-tree-id13109 . -1351) (undo-tree-id13110 . -1351) (undo-tree-id13111 . -1351) (undo-tree-id13112 . -1351) (undo-tree-id13113 . -1351) (undo-tree-id13114 . -1351) (undo-tree-id13115 . -1351) (undo-tree-id13116 . -1351) (undo-tree-id13117 . -1351) (undo-tree-id13118 . -1351) (undo-tree-id13119 . -1352) (undo-tree-id13120 . -1352) (undo-tree-id13121 . -1352) (undo-tree-id13122 . -1352) (undo-tree-id13123 . -1352) (undo-tree-id13124 . -1352) (undo-tree-id13125 . -1352) (undo-tree-id13126 . -1352) (undo-tree-id13127 . -1352) (undo-tree-id13128 . -1352) (undo-tree-id13129 . -1352) (undo-tree-id13130 . -1352) (undo-tree-id13131 . -1352) (undo-tree-id13132 . -1352) (undo-tree-id13133 . -1352) (undo-tree-id13134 . -1352) (undo-tree-id13135 . -1352) (undo-tree-id13136 . -1352) (undo-tree-id13137 . -1352) (undo-tree-id13138 . -1352) (undo-tree-id13139 . -1352) (undo-tree-id13140 . -1352) (undo-tree-id13141 . -1352) (undo-tree-id13142 . -1352) (undo-tree-id13143 . -1352) (undo-tree-id13144 . -1352) (undo-tree-id13145 . -1352) (undo-tree-id13146 . -1352) (undo-tree-id13147 . -1352) (undo-tree-id13148 . -1352) (undo-tree-id13149 . -1352) (undo-tree-id13150 . -1352) (undo-tree-id13151 . -1352) (undo-tree-id13152 . -1352) (undo-tree-id13153 . -1352) (undo-tree-id13154 . -1352) (undo-tree-id13155 . -1352) (undo-tree-id13156 . -1352) (undo-tree-id13157 . -1352) (undo-tree-id13158 . -1352) (undo-tree-id13159 . -1352) (undo-tree-id13160 . -1352) (undo-tree-id13161 . -1352) (undo-tree-id13162 . -1352) (undo-tree-id13163 . -1352) (undo-tree-id13164 . -1352) (undo-tree-id13165 . -1352) (undo-tree-id13166 . -1352) (undo-tree-id13167 . -1352) (undo-tree-id13168 . -1352) (undo-tree-id13169 . -1352) (undo-tree-id13170 . -1352) (undo-tree-id13171 . -1352) (undo-tree-id13172 . -1352) (undo-tree-id13173 . -1352) (undo-tree-id13174 . -1352) (undo-tree-id13175 . -1352) (undo-tree-id13176 . -1352) (undo-tree-id13177 . -1352) (undo-tree-id13178 . -1352) (undo-tree-id13179 . -1352) (undo-tree-id13180 . -1352) (undo-tree-id13181 . -1352) (undo-tree-id13182 . -1352) (undo-tree-id13183 . -1352) (undo-tree-id13184 . -1352) (undo-tree-id13185 . -1352) (undo-tree-id13186 . -1352) (undo-tree-id13187 . -1352) (undo-tree-id13188 . -1352) (undo-tree-id13189 . -1352) (undo-tree-id13190 . -1352) (undo-tree-id13191 . -1352) (undo-tree-id13192 . -1352) (undo-tree-id13193 . -1352) (undo-tree-id13194 . -1352) (undo-tree-id13195 . -1352) (undo-tree-id13196 . -1352) (undo-tree-id13197 . -1352) (undo-tree-id13198 . -1352) (undo-tree-id13199 . -1352) (undo-tree-id13200 . -1352) (undo-tree-id13201 . -1352) (undo-tree-id13202 . -1352) (undo-tree-id13203 . -1352) (undo-tree-id13204 . -1352) (undo-tree-id13205 . -1352) (undo-tree-id13206 . -1352) (undo-tree-id13207 . -1352) (undo-tree-id13208 . -1352) (undo-tree-id13209 . -1352) (undo-tree-id13210 . -1352) (undo-tree-id13211 . -1352) (undo-tree-id13212 . -1352) (undo-tree-id13213 . -1352) (undo-tree-id13214 . -1352) (undo-tree-id13215 . -1352) (undo-tree-id13216 . -1352) (undo-tree-id13217 . -1352) (undo-tree-id13218 . -1352) (undo-tree-id13219 . -1352) (undo-tree-id13220 . -1352) (undo-tree-id13221 . -1352) (undo-tree-id13222 . -1352) (undo-tree-id13223 . -1352) (undo-tree-id13224 . -1352) (undo-tree-id13225 . -1352) (undo-tree-id13226 . -1352) (undo-tree-id13227 . -1352) (undo-tree-id13228 . -1352) (undo-tree-id13229 . -1352) (undo-tree-id13230 . -1352) (undo-tree-id13231 . -1352) (undo-tree-id13232 . -1352) (undo-tree-id13233 . -1352) (undo-tree-id13234 . -1352) (undo-tree-id13235 . -1352) (undo-tree-id13236 . -1352) (undo-tree-id13237 . -1352) (undo-tree-id13238 . -1352) (undo-tree-id13239 . -1352) (undo-tree-id13240 . -1352) (undo-tree-id13241 . -1352) (undo-tree-id13242 . -1352) (undo-tree-id13243 . -1352) (undo-tree-id13244 . -1352) (undo-tree-id13245 . -1352) (undo-tree-id13246 . -1352) (undo-tree-id13247 . -1352) (undo-tree-id13248 . -1352) (undo-tree-id13249 . -1352) (undo-tree-id13250 . -1352) (undo-tree-id13251 . -1352) (undo-tree-id13252 . -1352) (undo-tree-id13253 . -1352) (undo-tree-id13254 . -1352) (undo-tree-id13255 . -1352) (undo-tree-id13256 . -1352) (undo-tree-id13257 . -1352) (undo-tree-id13258 . -1352) (undo-tree-id13259 . -1352) (undo-tree-id13260 . -1352) (undo-tree-id13261 . -1352) (undo-tree-id13262 . -1352) (undo-tree-id13263 . -1352) (undo-tree-id13264 . -1352) (undo-tree-id13265 . -1352) (undo-tree-id13266 . -1352) (undo-tree-id13267 . -1352) (undo-tree-id13268 . -1352) (undo-tree-id13269 . -1352) (undo-tree-id13270 . -1352) (undo-tree-id13271 . -1352) (undo-tree-id13272 . -1352) (undo-tree-id13273 . -1352) (undo-tree-id13274 . -1352) (undo-tree-id13275 . -1352) (undo-tree-id13276 . -1352) (undo-tree-id13277 . -1352) (undo-tree-id13278 . -1352) (undo-tree-id13279 . -1352) (undo-tree-id13280 . -1352) (undo-tree-id13281 . -1352) (undo-tree-id13282 . -1352) (undo-tree-id13283 . -1352) (undo-tree-id13284 . -1352) (undo-tree-id13285 . -1352) (undo-tree-id13286 . -1352) (undo-tree-id13287 . -1352) (undo-tree-id13288 . -1352) (undo-tree-id13289 . -1352) (undo-tree-id13290 . -1352) (undo-tree-id13291 . -1352) (undo-tree-id13292 . -1352) (undo-tree-id13293 . -1352) (undo-tree-id13294 . -1352) (undo-tree-id13295 . -1352) (undo-tree-id13296 . -1352) (undo-tree-id13297 . -1352) (undo-tree-id13298 . -1352) (undo-tree-id13299 . -1352) (undo-tree-id13300 . -1352) (undo-tree-id13301 . -1352) (undo-tree-id13302 . -1352) (undo-tree-id13303 . -1352) (undo-tree-id13304 . -1352) (undo-tree-id13305 . -1352) (undo-tree-id13306 . -1352) (undo-tree-id13307 . -1352) (undo-tree-id13308 . -1352) (undo-tree-id13309 . -1352) (undo-tree-id13310 . -1352) (undo-tree-id13311 . -1352) (undo-tree-id13312 . -1352) (undo-tree-id13313 . -1352) (undo-tree-id13314 . -1352) (undo-tree-id13315 . -1352) (undo-tree-id13316 . -1352) (undo-tree-id13317 . -1352) (undo-tree-id13318 . -1352) (undo-tree-id13319 . -1352) (undo-tree-id13320 . -1352) (undo-tree-id13321 . -1352) (undo-tree-id13322 . -1352) (undo-tree-id13323 . -1352) (undo-tree-id13324 . -1352) (undo-tree-id13325 . -1352) (undo-tree-id13326 . -1352) (undo-tree-id13327 . -1352) (undo-tree-id13328 . -1352) (undo-tree-id13329 . -1352) (undo-tree-id13330 . -1352) (undo-tree-id13331 . -1352) (undo-tree-id13332 . -1352) (undo-tree-id13333 . -1352) (undo-tree-id13334 . -1352) (undo-tree-id13335 . -1352) (undo-tree-id13336 . -1352) (undo-tree-id13337 . -1352) (undo-tree-id13338 . -1352) (undo-tree-id13339 . -1352) (undo-tree-id13340 . -1352) (undo-tree-id13341 . -1352) (undo-tree-id13342 . -1352) (undo-tree-id13343 . -1352) (undo-tree-id13344 . -1352) (undo-tree-id13345 . -1352) (undo-tree-id13346 . -1352) (undo-tree-id13347 . -1352) (undo-tree-id13348 . -1352) (undo-tree-id13349 . -1352) (undo-tree-id13350 . -1352) (undo-tree-id13351 . -1352) (undo-tree-id13352 . -1352) (undo-tree-id13353 . -1352) (undo-tree-id13354 . -1352) (undo-tree-id13355 . -1352) (undo-tree-id13356 . -1352) (undo-tree-id13357 . -1352) (undo-tree-id13358 . -1352) (undo-tree-id13359 . -1352) (undo-tree-id13360 . -1352) (undo-tree-id13361 . -1352) (undo-tree-id13362 . -1352) (undo-tree-id13363 . -1352) (undo-tree-id13364 . -1352) (undo-tree-id13365 . -1352) (undo-tree-id13366 . -1352) (undo-tree-id13367 . -1352) (undo-tree-id13368 . -1352) (undo-tree-id13369 . -1352) (undo-tree-id13370 . -1352) (undo-tree-id13371 . -1352) (undo-tree-id13372 . -1352) (undo-tree-id13373 . -1352) (undo-tree-id13374 . -1352) (undo-tree-id13375 . -1352) (undo-tree-id13376 . -1352) (undo-tree-id13377 . -1352) (undo-tree-id13378 . -1352) (undo-tree-id13379 . -1352) (undo-tree-id13380 . -1352) (undo-tree-id13381 . -1352) (undo-tree-id13382 . -1352) (undo-tree-id13383 . -1352) (undo-tree-id13384 . -1352) (undo-tree-id13385 . -1352) (undo-tree-id13386 . -1352) (undo-tree-id13387 . -1352) (undo-tree-id13388 . -1352) (undo-tree-id13389 . -1352) (undo-tree-id13390 . -1352) (undo-tree-id13391 . -1352) (undo-tree-id13392 . -1352) (undo-tree-id13393 . -1352) (undo-tree-id13394 . -1352) (undo-tree-id13395 . -1352) (undo-tree-id13396 . -1352) (undo-tree-id13397 . -1352) (undo-tree-id13398 . -1352) (undo-tree-id13399 . -1352) (undo-tree-id13400 . -1352) (undo-tree-id13401 . -1352) (undo-tree-id13402 . -1352) (undo-tree-id13403 . -1352) (undo-tree-id13404 . -1352) (undo-tree-id13405 . -1352) (undo-tree-id13406 . -1352) (undo-tree-id13407 . -1352) (undo-tree-id13408 . -1352) (undo-tree-id13409 . -1352) (undo-tree-id13410 . -1352) (undo-tree-id13411 . -1352) (undo-tree-id13412 . -1352) (undo-tree-id13413 . -1352) (undo-tree-id13414 . -1352) (undo-tree-id13415 . -1352) (undo-tree-id13416 . -1352) (undo-tree-id13417 . -1352) (undo-tree-id13418 . -1352) (undo-tree-id13419 . -1352) (undo-tree-id13420 . -1352) (undo-tree-id13421 . -1352) (undo-tree-id13422 . -1352) (undo-tree-id13423 . -1352) (undo-tree-id13424 . -1352) (undo-tree-id13425 . -1352) (undo-tree-id13426 . -1352) (undo-tree-id13427 . -1352) (undo-tree-id13428 . -1352) (undo-tree-id13429 . -1352) (undo-tree-id13430 . -1352) (undo-tree-id13431 . -1352) (undo-tree-id13432 . -1352) (undo-tree-id13433 . -1352) (undo-tree-id13434 . -1353) (undo-tree-id13435 . -1353) (undo-tree-id13436 . -1353) (undo-tree-id13437 . -1353) (undo-tree-id13438 . -1353) (undo-tree-id13439 . -1353) (undo-tree-id13440 . -1353) (undo-tree-id13441 . -1353) (undo-tree-id13442 . -1353) (undo-tree-id13443 . -1353) (undo-tree-id13444 . -1353) (undo-tree-id13445 . -1353) (undo-tree-id13446 . -1353) (undo-tree-id13447 . -1353) (undo-tree-id13448 . -1353) (undo-tree-id13449 . -1353) (undo-tree-id13450 . -1353) (undo-tree-id13451 . -1353) (undo-tree-id13452 . -1353) (undo-tree-id13453 . -1353) (undo-tree-id13454 . -1353) (undo-tree-id13455 . -1353) (undo-tree-id13456 . -1352) (undo-tree-id13457 . -1352) (undo-tree-id13458 . -1352) (undo-tree-id13459 . -1352) (undo-tree-id13460 . -1352) (undo-tree-id13461 . -1352) (undo-tree-id13462 . -1352) (undo-tree-id13463 . -1352) (undo-tree-id13464 . -1352) (undo-tree-id13465 . -1352) (undo-tree-id13466 . -1352) (undo-tree-id13467 . -1352) (undo-tree-id13468 . -1352) (undo-tree-id13469 . -1352) (undo-tree-id13470 . -1352) (undo-tree-id13471 . -1352) (undo-tree-id13472 . -1352) (undo-tree-id13473 . -1352) (undo-tree-id13474 . -1352) (undo-tree-id13475 . -1352) (undo-tree-id13476 . -1352) (undo-tree-id13477 . -1352) (undo-tree-id13478 . -1352) (undo-tree-id13479 . -1352) (undo-tree-id13480 . -1352) (undo-tree-id13481 . -1352) (undo-tree-id13482 . 62) (undo-tree-id13483 . -1359) (undo-tree-id13484 . -1356) (undo-tree-id13485 . -1356) (undo-tree-id13486 . -1356) (undo-tree-id13487 . -1356) (undo-tree-id13488 . -1356) (undo-tree-id13489 . -1356) (undo-tree-id13490 . -1356) (undo-tree-id13491 . -1356) (undo-tree-id13492 . -1356) (undo-tree-id13493 . -1356) (undo-tree-id13494 . -1356) (undo-tree-id13495 . -1356) (undo-tree-id13496 . -1356) (undo-tree-id13497 . -1356) (undo-tree-id13498 . -1356) (undo-tree-id13499 . -1358) (undo-tree-id13500 . -1358) (undo-tree-id13501 . -1358) (undo-tree-id13502 . -1358) (undo-tree-id13503 . -1358) (undo-tree-id13504 . -1358) (undo-tree-id13505 . -1358) (undo-tree-id13506 . -1358) (undo-tree-id13507 . -1358) (undo-tree-id13508 . -1358) (undo-tree-id13509 . -1358) (undo-tree-id13510 . -1358) (undo-tree-id13511 . -1358) (undo-tree-id13512 . -1358) (undo-tree-id13513 . -1358) (undo-tree-id13514 . -1363) (undo-tree-id13515 . -1363) (undo-tree-id13516 . -1363) (undo-tree-id13517 . -1363) (undo-tree-id13518 . -1363) (undo-tree-id13519 . -1363) (undo-tree-id13520 . -1363) (undo-tree-id13521 . -1363) (undo-tree-id13522 . -1363) (undo-tree-id13523 . -1363) (undo-tree-id13524 . -1363) (undo-tree-id13525 . -1363) (undo-tree-id13526 . -1363) (undo-tree-id13527 . -1363) (undo-tree-id13528 . -1363) (undo-tree-id13529 . -1363) (undo-tree-id13530 . -1363) (undo-tree-id13531 . -1363) (undo-tree-id13532 . -1363) (undo-tree-id13533 . -1363) (undo-tree-id13534 . -1363) (undo-tree-id13535 . -1363) (undo-tree-id13536 . -1366) (undo-tree-id13537 . -1366) (undo-tree-id13538 . -1366) (undo-tree-id13539 . -1366) (undo-tree-id13540 . -1366) (undo-tree-id13541 . -1366) (undo-tree-id13542 . -1366) (undo-tree-id13543 . -1366) (undo-tree-id13544 . -1366) (undo-tree-id13545 . -1366) (undo-tree-id13546 . -1366) (undo-tree-id13547 . -1366) (undo-tree-id13548 . -1366) (undo-tree-id13549 . -1366) (undo-tree-id13550 . -1366) (undo-tree-id13551 . -1375) (undo-tree-id13552 . -1375) (undo-tree-id13553 . -1375) (undo-tree-id13554 . -1375) (undo-tree-id13555 . -1375) (undo-tree-id13556 . -1375) (undo-tree-id13557 . -1375) (undo-tree-id13558 . -1375) (undo-tree-id13559 . -1375) (undo-tree-id13560 . -1375) (undo-tree-id13561 . -1375) (undo-tree-id13562 . -1375) (undo-tree-id13563 . -1375) (undo-tree-id13564 . -1375) (undo-tree-id13565 . -1375) (undo-tree-id13566 . -1380) (undo-tree-id13567 . -1380) (undo-tree-id13568 . -1380) (undo-tree-id13569 . -1380) (undo-tree-id13570 . -1380) (undo-tree-id13571 . -1380) (undo-tree-id13572 . -1380) (undo-tree-id13573 . -1380) (undo-tree-id13574 . -1380) (undo-tree-id13575 . -1380) (undo-tree-id13576 . -1380) (undo-tree-id13577 . -1380) (undo-tree-id13578 . -1380) (undo-tree-id13579 . -1380) (undo-tree-id13580 . -1380) (undo-tree-id13581 . -1385) (undo-tree-id13582 . -1385) (undo-tree-id13583 . -1385) (undo-tree-id13584 . -1385) (undo-tree-id13585 . -1385) (undo-tree-id13586 . -1385) (undo-tree-id13587 . -1385) (undo-tree-id13588 . -1385) (undo-tree-id13589 . -1385) (undo-tree-id13590 . -1385) (undo-tree-id13591 . -1385) (undo-tree-id13592 . -1385) (undo-tree-id13593 . -1385) (undo-tree-id13594 . -1385) (undo-tree-id13595 . -1385) (undo-tree-id13596 . -1389) (undo-tree-id13597 . -1389) (undo-tree-id13598 . -1389) (undo-tree-id13599 . -1389) (undo-tree-id13600 . -1389) (undo-tree-id13601 . -1389) (undo-tree-id13602 . -1389) (undo-tree-id13603 . -1389) (undo-tree-id13604 . -1389) (undo-tree-id13605 . -1389) (undo-tree-id13606 . -1389) (undo-tree-id13607 . -1389) (undo-tree-id13608 . -1389) (undo-tree-id13609 . -1389) (undo-tree-id13610 . -1389) (undo-tree-id13611 . -1396) (undo-tree-id13612 . -1396) (undo-tree-id13613 . -1396) (undo-tree-id13614 . -1396) (undo-tree-id13615 . -1396) (undo-tree-id13616 . -1396) (undo-tree-id13617 . -1396) (undo-tree-id13618 . -1396) (undo-tree-id13619 . -1396) (undo-tree-id13620 . -1396) (undo-tree-id13621 . -1396) (undo-tree-id13622 . -1396) (undo-tree-id13623 . -1396) (undo-tree-id13624 . -1396) (undo-tree-id13625 . -1396) (undo-tree-id13626 . -1399) (undo-tree-id13627 . -1399) (undo-tree-id13628 . -1399) (undo-tree-id13629 . -1399) (undo-tree-id13630 . -1399) (undo-tree-id13631 . -1399) (undo-tree-id13632 . -1399) (undo-tree-id13633 . -1399) (undo-tree-id13634 . -1399) (undo-tree-id13635 . -1399) (undo-tree-id13636 . -1399) (undo-tree-id13637 . -1399) (undo-tree-id13638 . -1399) (undo-tree-id13639 . -1399) (undo-tree-id13640 . -1399) (undo-tree-id13641 . -1405) (undo-tree-id13642 . -1405) (undo-tree-id13643 . -1405) (undo-tree-id13644 . -1405) (undo-tree-id13645 . -1405) (undo-tree-id13646 . -1405) (undo-tree-id13647 . -1405) (undo-tree-id13648 . -1405) (undo-tree-id13649 . -1405) (undo-tree-id13650 . -1405) (undo-tree-id13651 . -1405) (undo-tree-id13652 . -1405) (undo-tree-id13653 . -1405) (undo-tree-id13654 . -1405) (undo-tree-id13655 . -1405) (undo-tree-id13656 . -1405) (undo-tree-id13657 . -1405) (undo-tree-id13658 . -1405) (undo-tree-id13659 . -1405) (undo-tree-id13660 . -1405) (undo-tree-id13661 . -1405) (undo-tree-id13662 . -1405) (undo-tree-id13663 . -1416) (undo-tree-id13664 . -1416) (undo-tree-id13665 . -1416) (undo-tree-id13666 . -1416) (undo-tree-id13667 . -1416) (undo-tree-id13668 . -1416) (undo-tree-id13669 . -1416) (undo-tree-id13670 . -1416) (undo-tree-id13671 . -1416) (undo-tree-id13672 . -1416) (undo-tree-id13673 . -1416) (undo-tree-id13674 . -1416) (undo-tree-id13675 . -1416) (undo-tree-id13676 . -1416) (undo-tree-id13677 . -1416) (undo-tree-id13678 . -1407) (undo-tree-id13679 . -1407) (undo-tree-id13680 . -1407) (undo-tree-id13681 . -1407) (undo-tree-id13682 . -1407) (undo-tree-id13683 . -1407) (undo-tree-id13684 . -1407) (undo-tree-id13685 . -1407) (undo-tree-id13686 . -1407) (undo-tree-id13687 . -1407) (undo-tree-id13688 . -1407) (undo-tree-id13689 . -1407) (undo-tree-id13690 . -1407) (undo-tree-id13691 . -1407) (undo-tree-id13692 . -1407) (undo-tree-id13693 . -1401) (undo-tree-id13694 . -1401) (undo-tree-id13695 . -1401) (undo-tree-id13696 . -1401) (undo-tree-id13697 . -1401) (undo-tree-id13698 . -1401) (undo-tree-id13699 . -1401) (undo-tree-id13700 . -1401) (undo-tree-id13701 . -1401) (undo-tree-id13702 . -1401) (undo-tree-id13703 . -1401) (undo-tree-id13704 . -1401) (undo-tree-id13705 . -1401) (undo-tree-id13706 . -1401) (undo-tree-id13707 . -1401) (undo-tree-id13708 . -1405) (undo-tree-id13709 . -1405) (undo-tree-id13710 . -1405) (undo-tree-id13711 . -1405) (undo-tree-id13712 . -1405) (undo-tree-id13713 . -1405) (undo-tree-id13714 . -1405) (undo-tree-id13715 . -1405) (undo-tree-id13716 . -1405) (undo-tree-id13717 . -1405) (undo-tree-id13718 . -1405) (undo-tree-id13719 . -1405) (undo-tree-id13720 . -1405) (undo-tree-id13721 . -1405) (undo-tree-id13722 . -1405) (undo-tree-id13723 . 11) (undo-tree-id13724 . -1417) (undo-tree-id13725 . -1416) (undo-tree-id13726 . -1416) (undo-tree-id13727 . -1416) (undo-tree-id13728 . -1416) (undo-tree-id13729 . -1416) (undo-tree-id13730 . -1416) (undo-tree-id13731 . -1416) (undo-tree-id13732 . -1416) (undo-tree-id13733 . -1416) (undo-tree-id13734 . -1416) (undo-tree-id13735 . -1416) (undo-tree-id13736 . -1416) (undo-tree-id13737 . -1416) (undo-tree-id13738 . -1416) (undo-tree-id13739 . -1416) (undo-tree-id13740 . -1417) (undo-tree-id13741 . -1417) (undo-tree-id13742 . -1417) (undo-tree-id13743 . -1417) (undo-tree-id13744 . -1417) (undo-tree-id13745 . -1417) (undo-tree-id13746 . -1417) (undo-tree-id13747 . -1417) (undo-tree-id13748 . -1417) (undo-tree-id13749 . -1417) (undo-tree-id13750 . -1417) (undo-tree-id13751 . -1417) (undo-tree-id13752 . -1417) (undo-tree-id13753 . -1417) (undo-tree-id13754 . -1417) (undo-tree-id13755 . -1418) (undo-tree-id13756 . -1418) (undo-tree-id13757 . -1418) (undo-tree-id13758 . -1418) (undo-tree-id13759 . -1418) (undo-tree-id13760 . -1418) (undo-tree-id13761 . -1418) (undo-tree-id13762 . -1418) (undo-tree-id13763 . -1418) (undo-tree-id13764 . -1418) (undo-tree-id13765 . -1418) (undo-tree-id13766 . -1418) (undo-tree-id13767 . -1418) (undo-tree-id13768 . -1418) (undo-tree-id13769 . -1418) (undo-tree-id13770 . -1418) (undo-tree-id13771 . -1418) (undo-tree-id13772 . -1418) (undo-tree-id13773 . -1418) (undo-tree-id13774 . -1418) (undo-tree-id13775 . -1418) (undo-tree-id13776 . -1418) (undo-tree-id13777 . -1418) (undo-tree-id13778 . -1418) (undo-tree-id13779 . -1418) (undo-tree-id13780 . -1418) (undo-tree-id13781 . -1418) (undo-tree-id13782 . -1418) (undo-tree-id13783 . -1418) (undo-tree-id13784 . -1418) (undo-tree-id13785 . -1418) (undo-tree-id13786 . -1418) (undo-tree-id13787 . -1418) (undo-tree-id13788 . -1418) (undo-tree-id13789 . -1418) (undo-tree-id13790 . -1418) (undo-tree-id13791 . -1418) (undo-tree-id13792 . -1418) (undo-tree-id13793 . -1418) (undo-tree-id13794 . -1418) (undo-tree-id13795 . -1418) (undo-tree-id13796 . -1418) (undo-tree-id13797 . -1418) (undo-tree-id13798 . -1418) (undo-tree-id13799 . -1418) (undo-tree-id13800 . -1418) (undo-tree-id13801 . -1418) (undo-tree-id13802 . -1418) (undo-tree-id13803 . -1418) (undo-tree-id13804 . -1418) (undo-tree-id13805 . -1418) (undo-tree-id13806 . -1418) (undo-tree-id13807 . -1418) (undo-tree-id13808 . -1418) (undo-tree-id13809 . -1418) (undo-tree-id13810 . -1418) (undo-tree-id13811 . -1418) (undo-tree-id13812 . -1418) (undo-tree-id13813 . -1418) (undo-tree-id13814 . -1418) (undo-tree-id13815 . -1418) (undo-tree-id13816 . -1418) (undo-tree-id13817 . -1350) (2400 . 3750) (#(" This is called truncated backpropagation through time. Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will" 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 25 26 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 26 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 67 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 83 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 84 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 85 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 98 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 99 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 129 130 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 130 131 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 131 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 132 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 137 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 144 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 150 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 151 157 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 157 161 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 161 162 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 162 167 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 167 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 214 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 215 246 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 246 247 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 247 253 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 253 268 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 268 269 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 269 270 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 270 278 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 278 284 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 284 285 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 285 288 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 288 289 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 289 309 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 309 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 310 315 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 315 342 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 342 372 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 372 373 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 373 426 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 426 427 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 427 428 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 428 432 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 432 433 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 433 446 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 446 447 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 447 452 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 452 457 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 458 464 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 464 482 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 482 483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 483 553 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 554 624 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 624 625 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 625 697 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 697 698 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 698 772 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 772 773 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 773 846 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 846 847 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 847 858 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 858 859 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 859 868 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 868 910 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 910 911 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 911 981 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 981 982 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 982 983 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 983 1050 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1050 1051 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1051 1128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1128 1129 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1129 1200 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1200 1201 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1201 1276 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1276 1277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1277 1347 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1347 1348 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 2468) (undo-tree-id13818 . -1) (undo-tree-id13819 . -4) (undo-tree-id13820 . -4) (undo-tree-id13821 . -4) (undo-tree-id13822 . -4) (undo-tree-id13823 . -4) (undo-tree-id13824 . -4) (undo-tree-id13825 . -4) (undo-tree-id13826 . -4) (undo-tree-id13827 . -4) (undo-tree-id13828 . -4) (undo-tree-id13829 . -4) (undo-tree-id13830 . -4) (undo-tree-id13831 . -4) (undo-tree-id13832 . -4) (undo-tree-id13833 . -4) (undo-tree-id13834 . -1) (undo-tree-id13835 . -1) (undo-tree-id13836 . -1) (undo-tree-id13837 . -1) (undo-tree-id13838 . -1) (undo-tree-id13839 . -1) (undo-tree-id13840 . -1) (undo-tree-id13841 . -1) (undo-tree-id13842 . -1) (undo-tree-id13843 . -1) (undo-tree-id13844 . -1) (undo-tree-id13845 . -1) (undo-tree-id13846 . -1) (undo-tree-id13847 . -1) (undo-tree-id13848 . -1) (undo-tree-id13849 . -1) (undo-tree-id13850 . -1) (undo-tree-id13851 . -1) (undo-tree-id13852 . -1) (undo-tree-id13853 . -1) (undo-tree-id13854 . -1) (undo-tree-id13855 . -1) (undo-tree-id13856 . -1) (undo-tree-id13857 . -1) (undo-tree-id13858 . -1) (undo-tree-id13859 . -1) (undo-tree-id13860 . -1) (undo-tree-id13861 . -1) (undo-tree-id13862 . -1) (undo-tree-id13863 . -1) (undo-tree-id13864 . -1) (undo-tree-id13865 . -1) (undo-tree-id13866 . -1) (undo-tree-id13867 . -1) (undo-tree-id13868 . -1) (undo-tree-id13869 . -1) (undo-tree-id13870 . -1) (undo-tree-id13871 . -1) (undo-tree-id13872 . -1) (undo-tree-id13873 . -1) (undo-tree-id13874 . -1) (undo-tree-id13875 . -1) (undo-tree-id13876 . -1) (undo-tree-id13877 . -1) (undo-tree-id13878 . -1) (undo-tree-id13879 . -1) (undo-tree-id13880 . -1) 2469) nil (25767 5304 92877 223000) 0 nil])
([nil nil ((2460 . 2461)) nil (25767 5304 91934 593000) 0 nil])
([nil nil ((2470 . 3821) (#("- Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will
- This is called truncated backpropagation through time." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 13 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 29 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 29 30 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 30 31 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 31 44 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 44 45 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 45 75 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 75 76 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 76 77 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 77 78 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 78 83 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 89 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 89 90 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 90 96 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 96 97 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 97 103 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 103 107 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 107 108 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 108 113 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 113 160 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 160 161 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 161 192 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 192 193 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 193 199 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 199 214 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 214 215 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 215 216 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 216 224 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 224 230 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 230 231 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 231 234 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 234 235 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 235 255 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 255 256 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 256 261 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 261 288 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 288 318 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 318 319 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 319 372 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 372 373 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 373 374 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 374 376 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 376 378 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 378 379 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 379 392 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 392 393 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 393 398 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 398 403 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 403 404 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 404 410 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 410 428 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 428 429 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 429 499 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 499 500 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 500 570 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 570 571 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 571 643 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 643 644 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 644 718 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 718 719 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 719 792 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 792 793 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 793 804 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 804 805 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 805 814 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 814 856 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 856 857 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 857 927 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 927 928 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 928 929 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 929 996 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 996 997 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 997 1074 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1074 1075 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1075 1146 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1146 1147 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1147 1222 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1222 1223 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1223 1293 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1293 1294 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1294 1295 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1295 1296 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 1296 1297 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1297 1321 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1321 1322 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1322 1351 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 2470) (undo-tree-id13984 . -1351) (undo-tree-id13985 . -1297) (undo-tree-id13986 . -1297) (undo-tree-id13987 . -1297) (undo-tree-id13988 . -1297) (undo-tree-id13989 . -1297) (undo-tree-id13990 . -1297) (undo-tree-id13991 . -1297) (undo-tree-id13992 . -1297) (undo-tree-id13993 . -1297) (undo-tree-id13994 . -1297) (undo-tree-id13995 . -1297) (undo-tree-id13996 . -1297) (undo-tree-id13997 . -1297) (undo-tree-id13998 . -1297) (undo-tree-id13999 . -1297) (undo-tree-id14000 . -1297) (undo-tree-id14001 . -1297) (undo-tree-id14002 . -1297) (undo-tree-id14003 . -1297) (undo-tree-id14004 . -1297) (undo-tree-id14005 . -1297) (undo-tree-id14006 . -1297) (undo-tree-id14007 . -1297) (undo-tree-id14008 . -1297) (undo-tree-id14009 . -1297) (undo-tree-id14010 . -1297) (undo-tree-id14011 . -1297) (undo-tree-id14012 . -1297) (undo-tree-id14013 . -1297) (undo-tree-id14014 . -1350) (undo-tree-id14015 . -1350) (undo-tree-id14016 . -1350) (undo-tree-id14017 . -1350) (undo-tree-id14018 . -1350) (undo-tree-id14019 . -1350) (undo-tree-id14020 . -1350) (undo-tree-id14021 . -1350) (undo-tree-id14022 . -1350) (undo-tree-id14023 . -1350) (undo-tree-id14024 . -1350) (undo-tree-id14025 . -1350) (undo-tree-id14026 . -1350) (undo-tree-id14027 . -1350) (undo-tree-id14028 . -1350) (undo-tree-id14029 . -1351) (undo-tree-id14030 . -1351) (undo-tree-id14031 . -1351) (undo-tree-id14032 . -1351) (undo-tree-id14033 . -1351) (undo-tree-id14034 . -1351) (undo-tree-id14035 . -1351) (undo-tree-id14036 . -1351) (undo-tree-id14037 . -1351) (undo-tree-id14038 . -1351) (undo-tree-id14039 . -1351) (undo-tree-id14040 . -1351) (undo-tree-id14041 . -1351) (undo-tree-id14042 . -1351) (undo-tree-id14043 . -1351) (undo-tree-id14044 . -1351) (undo-tree-id14045 . -1351) (undo-tree-id14046 . -1351) (undo-tree-id14047 . -1351) (undo-tree-id14048 . -1351) (undo-tree-id14049 . -1351) (undo-tree-id14050 . -1351) (undo-tree-id14051 . -1351) (undo-tree-id14052 . -1351) (undo-tree-id14053 . -1351) (undo-tree-id14054 . -1351) (undo-tree-id14055 . -1351) (undo-tree-id14056 . -1351) (undo-tree-id14057 . -1351) (undo-tree-id14058 . -1351) (undo-tree-id14059 . -1351) (undo-tree-id14060 . -1351) (undo-tree-id14061 . -1351) (undo-tree-id14062 . -1351) (undo-tree-id14063 . -1351) (undo-tree-id14064 . -1351) (undo-tree-id14065 . -1351) (undo-tree-id14066 . -1351) (undo-tree-id14067 . -1351) (undo-tree-id14068 . -1351) (undo-tree-id14069 . -1295) (2470 . 3765) (#(" Let’s call the window() method to create a dataset of short text windows: n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True) TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. By default, the window() method creates nonoverlapping windows, but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will" 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 12 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 30 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 43 44 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 44 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 74 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 76 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 77 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 82 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 88 89 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 89 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 95 96 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 96 102 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 102 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 106 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 107 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 112 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 159 160 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 160 191 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 191 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 192 198 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 198 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 213 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 214 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 215 223 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 223 229 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 229 230 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 230 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 233 234 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 234 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 254 255 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 255 260 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 260 287 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 287 317 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 317 318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 318 371 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 371 372 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 372 373 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 373 375 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 375 377 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 377 378 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 378 391 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 391 392 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 392 397 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 397 402 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 402 403 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 403 409 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 409 427 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 427 428 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 428 498 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 498 499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 499 569 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 569 570 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 570 642 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 642 643 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 643 717 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 717 718 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 718 791 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 791 792 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 792 803 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 803 804 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 804 813 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 813 855 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 855 856 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 856 926 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 926 927 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 927 928 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 928 995 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 995 996 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 996 1073 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1073 1074 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1074 1145 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1145 1146 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1146 1221 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1221 1222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1222 1292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1292 1293 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 2526) (undo-tree-id14070 . -1) (undo-tree-id14071 . -1) (undo-tree-id14072 . -1) (undo-tree-id14073 . -1) (undo-tree-id14074 . -1) (undo-tree-id14075 . -1) (undo-tree-id14076 . -1) (undo-tree-id14077 . -1) (undo-tree-id14078 . -1) (undo-tree-id14079 . -1) (undo-tree-id14080 . -1) (undo-tree-id14081 . -1) (undo-tree-id14082 . -1) (undo-tree-id14083 . -1) (undo-tree-id14084 . -1) (undo-tree-id14085 . -1) (undo-tree-id14086 . -1) (undo-tree-id14087 . -1) (undo-tree-id14088 . -1) (undo-tree-id14089 . -1) (undo-tree-id14090 . -1) (undo-tree-id14091 . -1) (undo-tree-id14092 . -1) (undo-tree-id14093 . -1) (undo-tree-id14094 . -1) (undo-tree-id14095 . -1) (undo-tree-id14096 . -1) (undo-tree-id14097 . -1) (undo-tree-id14098 . -1) (undo-tree-id14099 . -1) (undo-tree-id14100 . -1) (undo-tree-id14101 . -1) (undo-tree-id14102 . -1) (undo-tree-id14103 . -1) (undo-tree-id14104 . -1) (undo-tree-id14105 . -1) (undo-tree-id14106 . -1) (undo-tree-id14107 . -1) (undo-tree-id14108 . -1) (undo-tree-id14109 . -1) (undo-tree-id14110 . -1) 2527 (t 25767 5304 110493 216000)) nil (25767 5308 456253 628000) 0 nil])
([nil nil ((2532 . 2533) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2532) (undo-tree-id14111 . -1) (t 25767 5308 478484 632000)) nil (25767 5310 561099 695000) 0 nil])
([nil nil ((#("Let's call the window() method to create a dataset of short text windows:" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 29 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2529) (undo-tree-id15739 . -72) (undo-tree-id15740 . 73) (undo-tree-id15741 . -3) (undo-tree-id15742 . -3) (undo-tree-id15743 . -3) (undo-tree-id15744 . -3) (undo-tree-id15745 . -3) (undo-tree-id15746 . -3) (undo-tree-id15747 . -3) (undo-tree-id15748 . -3) (undo-tree-id15749 . -3) (undo-tree-id15750 . -3) (undo-tree-id15751 . -3) (undo-tree-id15752 . -3) (undo-tree-id15753 . -3) (undo-tree-id15754 . -3) (undo-tree-id15755 . -3) (undo-tree-id15756 . -3) (undo-tree-id15757 . -3) (undo-tree-id15758 . -3) (undo-tree-id15759 . -3) (undo-tree-id15760 . -3) (undo-tree-id15761 . -3) (undo-tree-id15762 . -3) (undo-tree-id15763 . -3) (undo-tree-id15764 . -3) (undo-tree-id15765 . -3) (undo-tree-id15766 . -3) (undo-tree-id15767 . -3) (undo-tree-id15768 . -3) (undo-tree-id15769 . -3) (undo-tree-id15770 . -3) (undo-tree-id15771 . -3) (undo-tree-id15772 . -3) (undo-tree-id15773 . -3) (undo-tree-id15774 . -3) (undo-tree-id15775 . -3) (undo-tree-id15776 . -3) (undo-tree-id15777 . -3) (undo-tree-id15778 . -3) (undo-tree-id15779 . -3) (undo-tree-id15780 . -3) (undo-tree-id15781 . -73) (t 25767 5310 582480 653000)) nil (25767 5393 21556 972000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2529) (undo-tree-id15736 . 1) (undo-tree-id15737 . -1) (undo-tree-id15738 . -1)) nil (25767 5393 21531 77000) 0 nil])
([nil nil ((2530 . 2533) (2529 . 2530)) nil (25767 5393 21528 393000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2542 2542 nil nil nil nil #s(yas--exit 2560 nil))) #s(yas--exit 2560 nil) 4 nil #s(yas--field 1 2542 2542 nil nil nil nil #s(yas--exit 2560 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2560) (undo-tree-id15637 . -2) (2530 . 2573) (#("sr" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 2530) (undo-tree-id15638 . -2) (undo-tree-id15639 . -1) (undo-tree-id15640 . -1) (undo-tree-id15641 . -1) (undo-tree-id15642 . -1) (undo-tree-id15643 . -1) (undo-tree-id15644 . -1) (undo-tree-id15645 . -1) (undo-tree-id15646 . -1) (undo-tree-id15647 . -1) (undo-tree-id15648 . -1) (undo-tree-id15649 . -1) (undo-tree-id15650 . -1) (undo-tree-id15651 . -1) (undo-tree-id15652 . -1) (undo-tree-id15653 . -1) (undo-tree-id15654 . -1) (undo-tree-id15655 . -1) (undo-tree-id15656 . -1) (undo-tree-id15657 . -1) (undo-tree-id15658 . -1) (undo-tree-id15659 . -1) (undo-tree-id15660 . -1) (undo-tree-id15661 . -2) (undo-tree-id15662 . -2) (undo-tree-id15663 . -2) (undo-tree-id15664 . -2) (undo-tree-id15665 . -2) (undo-tree-id15666 . -2) (undo-tree-id15667 . -2) (undo-tree-id15668 . -2) (undo-tree-id15669 . -2) (undo-tree-id15670 . -2) (undo-tree-id15671 . -2) (undo-tree-id15672 . -2) (undo-tree-id15673 . -2) (undo-tree-id15674 . -2) (undo-tree-id15675 . -2) (undo-tree-id15676 . -2) (undo-tree-id15677 . -2) (undo-tree-id15678 . -2) (undo-tree-id15679 . -2) (undo-tree-id15680 . -2) (undo-tree-id15681 . -2) (undo-tree-id15682 . -2) (undo-tree-id15683 . -2) (undo-tree-id15684 . -2) (undo-tree-id15685 . -2) (undo-tree-id15686 . -2) (undo-tree-id15687 . -2) (undo-tree-id15688 . -2) (undo-tree-id15689 . -2) (undo-tree-id15690 . -2) (undo-tree-id15691 . -2) (undo-tree-id15692 . 2) (undo-tree-id15693 . -2) (undo-tree-id15694 . -2) (undo-tree-id15695 . -2) (undo-tree-id15696 . -2) (undo-tree-id15697 . -2) (undo-tree-id15698 . -2) (undo-tree-id15699 . -2) (undo-tree-id15700 . -2) (undo-tree-id15701 . -2) (undo-tree-id15702 . -2) (undo-tree-id15703 . -2) (undo-tree-id15704 . -2) (undo-tree-id15705 . -2) (undo-tree-id15706 . -2) (undo-tree-id15707 . -2) (undo-tree-id15708 . -2) (undo-tree-id15709 . -2) (undo-tree-id15710 . -2) (undo-tree-id15711 . -2) (undo-tree-id15712 . -2) (undo-tree-id15713 . -2) (undo-tree-id15714 . -2) (undo-tree-id15715 . -2) (undo-tree-id15716 . -2) (undo-tree-id15717 . -2) (undo-tree-id15718 . -2) (undo-tree-id15719 . -2) (undo-tree-id15720 . -2) (undo-tree-id15721 . -2) (undo-tree-id15722 . -2) (undo-tree-id15723 . -2) (undo-tree-id15724 . -2) (undo-tree-id15725 . -2) (undo-tree-id15726 . -2) (undo-tree-id15727 . -2) (undo-tree-id15728 . -2) (undo-tree-id15729 . -2) (undo-tree-id15730 . -2) (undo-tree-id15731 . -2) (undo-tree-id15732 . -2) (undo-tree-id15733 . -2) (undo-tree-id15734 . -2) (undo-tree-id15735 . -2) 2532) nil (25767 5393 21523 881000) 0 nil])
([nil nil ((apply yas--snippet-revive 2530 2571 #s(yas--snippet nil (#s(yas--field 1 2542 2542 nil nil nil nil #s(yas--exit 2560 nil))) #s(yas--exit 2560 nil) 4 nil #s(yas--field 1 2542 2542 nil nil nil nil #s(yas--exit 2560 nil)) nil nil))) nil (25767 5393 21466 871000) 0 nil])
([nil nil ((2572 . 2573)) nil (25767 5393 21466 76000) 0 nil])
([nil nil ((nil fontified nil 2528 . 2529) (nil line-prefix #("  " 0 2 (face org-indent)) 2528 . 2529) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2528 . 2529) (2528 . 2529) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 2528) (undo-tree-id15176 . -1) (undo-tree-id15177 . -1) (undo-tree-id15178 . -1) (undo-tree-id15179 . -1) (undo-tree-id15180 . -1) (undo-tree-id15181 . -1) (undo-tree-id15182 . -1) (undo-tree-id15183 . -1) (undo-tree-id15184 . -1) (undo-tree-id15185 . -1) (undo-tree-id15186 . -1) (undo-tree-id15187 . -1) (undo-tree-id15188 . -1) (undo-tree-id15189 . -1) (undo-tree-id15190 . -1) (undo-tree-id15191 . -1) (undo-tree-id15192 . -1) (undo-tree-id15193 . -1) (undo-tree-id15194 . -1) (undo-tree-id15195 . -1) (undo-tree-id15196 . -1) (undo-tree-id15197 . -1) (undo-tree-id15198 . -1) (undo-tree-id15199 . -1) (undo-tree-id15200 . -1) (undo-tree-id15201 . -1) (undo-tree-id15202 . -1) (undo-tree-id15203 . -1) (undo-tree-id15204 . -1) (undo-tree-id15205 . -1) (undo-tree-id15206 . -1) (undo-tree-id15207 . -1) (undo-tree-id15208 . -1) (undo-tree-id15209 . -1) (undo-tree-id15210 . -1) (undo-tree-id15211 . -1) (undo-tree-id15212 . -1) (undo-tree-id15213 . -1) (undo-tree-id15214 . -1) (undo-tree-id15215 . -1) (undo-tree-id15216 . -1) (undo-tree-id15217 . -1) (undo-tree-id15218 . -1) (undo-tree-id15219 . -1) (undo-tree-id15220 . -1) (undo-tree-id15221 . -1) (undo-tree-id15222 . -1) (undo-tree-id15223 . -1) (undo-tree-id15224 . -1) (undo-tree-id15225 . -1) (undo-tree-id15226 . -1) (undo-tree-id15227 . -1) (undo-tree-id15228 . -1) (undo-tree-id15229 . -1) (undo-tree-id15230 . -1) (undo-tree-id15231 . -1) (undo-tree-id15232 . -1) (undo-tree-id15233 . -1) (undo-tree-id15234 . -1) (undo-tree-id15235 . -1) (undo-tree-id15236 . -1) (undo-tree-id15237 . -1) (undo-tree-id15238 . -1) (undo-tree-id15239 . -1) (undo-tree-id15240 . -1) (undo-tree-id15241 . -1) (undo-tree-id15242 . -1) (undo-tree-id15243 . -1) (undo-tree-id15244 . -1) (undo-tree-id15245 . -1) (undo-tree-id15246 . -1) (undo-tree-id15247 . -1) (undo-tree-id15248 . -1) (undo-tree-id15249 . -1) (undo-tree-id15250 . -1) (undo-tree-id15251 . -1) (undo-tree-id15252 . -1) (undo-tree-id15253 . -1) (undo-tree-id15254 . -1) (undo-tree-id15255 . -1) (undo-tree-id15256 . -1) (undo-tree-id15257 . -1) (undo-tree-id15258 . -1) (undo-tree-id15259 . -1) (undo-tree-id15260 . -1) (undo-tree-id15261 . -1) (undo-tree-id15262 . -1) (undo-tree-id15263 . -1) (undo-tree-id15264 . -1) (undo-tree-id15265 . -1) (undo-tree-id15266 . -1) (undo-tree-id15267 . -1) (undo-tree-id15268 . -1) (undo-tree-id15269 . -1) (undo-tree-id15270 . -1) (undo-tree-id15271 . -1) (undo-tree-id15272 . -1) (undo-tree-id15273 . -1) (undo-tree-id15274 . -1) (undo-tree-id15275 . -1) (undo-tree-id15276 . -1) (undo-tree-id15277 . -1) (undo-tree-id15278 . -1) (undo-tree-id15279 . -1) (undo-tree-id15280 . -1) (undo-tree-id15281 . -1) (undo-tree-id15282 . -1) (undo-tree-id15283 . -1) (undo-tree-id15284 . -1) (undo-tree-id15285 . -1) (undo-tree-id15286 . -1) (undo-tree-id15287 . -1) (undo-tree-id15288 . -1) (undo-tree-id15289 . -1) (undo-tree-id15290 . -1) (undo-tree-id15291 . -1) (undo-tree-id15292 . -1) (undo-tree-id15293 . -1) (undo-tree-id15294 . -1) (undo-tree-id15295 . -1) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) (undo-tree-id15299 . -1) (undo-tree-id15300 . -1) (undo-tree-id15301 . -1) (undo-tree-id15302 . -1) (undo-tree-id15303 . -1) (undo-tree-id15304 . -1) (undo-tree-id15305 . -1) (undo-tree-id15306 . -1) (undo-tree-id15307 . -1) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) (undo-tree-id15317 . -1) (undo-tree-id15318 . -1) (undo-tree-id15319 . -1) (undo-tree-id15320 . -1) (undo-tree-id15321 . -1) (undo-tree-id15322 . -1) (undo-tree-id15323 . -1) (undo-tree-id15324 . -1) (undo-tree-id15325 . -1) (undo-tree-id15326 . -1) (undo-tree-id15327 . -1) (undo-tree-id15328 . -1) (undo-tree-id15329 . -1) (undo-tree-id15330 . -1) (undo-tree-id15331 . -1) (undo-tree-id15332 . -1) (undo-tree-id15333 . -1) (undo-tree-id15334 . -1) (undo-tree-id15335 . -1) (undo-tree-id15336 . -1) (undo-tree-id15337 . -1) (undo-tree-id15338 . -1) (undo-tree-id15339 . -1) (undo-tree-id15340 . -1) (undo-tree-id15341 . -1) (undo-tree-id15342 . -1) (undo-tree-id15343 . -1) (undo-tree-id15344 . -1) (undo-tree-id15345 . -1) (undo-tree-id15346 . -1) (undo-tree-id15347 . -1) (undo-tree-id15348 . -1) (undo-tree-id15349 . -1) (undo-tree-id15350 . -1) (undo-tree-id15351 . -1) (undo-tree-id15352 . -1) (undo-tree-id15353 . -1) (undo-tree-id15354 . -1) (undo-tree-id15355 . -1) (undo-tree-id15356 . -1) (undo-tree-id15357 . -1) (undo-tree-id15358 . -1) (undo-tree-id15359 . -1) (undo-tree-id15360 . -1) (undo-tree-id15361 . -1) (undo-tree-id15362 . -1) (undo-tree-id15363 . -1) (undo-tree-id15364 . -1) (undo-tree-id15365 . -1) (undo-tree-id15366 . -1) (undo-tree-id15367 . -1) (undo-tree-id15368 . -1) (undo-tree-id15369 . -1) (undo-tree-id15370 . -1) (undo-tree-id15371 . -1) (undo-tree-id15372 . -1) (undo-tree-id15373 . -1) (undo-tree-id15374 . -1) (undo-tree-id15375 . -1) (undo-tree-id15376 . -1) (undo-tree-id15377 . -1) (undo-tree-id15378 . -1) (undo-tree-id15379 . -1) (undo-tree-id15380 . -1) (undo-tree-id15381 . -1) (undo-tree-id15382 . -1) (undo-tree-id15383 . -1) (undo-tree-id15384 . -1) (undo-tree-id15385 . -1) (undo-tree-id15386 . -1) (undo-tree-id15387 . -1) (undo-tree-id15388 . -1) (undo-tree-id15389 . -1) (undo-tree-id15390 . -1) (undo-tree-id15391 . -1) (undo-tree-id15392 . -1) (undo-tree-id15393 . -1) (undo-tree-id15394 . -1) (undo-tree-id15395 . -1) (undo-tree-id15396 . -1) (undo-tree-id15397 . -1) (undo-tree-id15398 . -1) (undo-tree-id15399 . -1) (undo-tree-id15400 . -1) (undo-tree-id15401 . -1) (undo-tree-id15402 . -1) (undo-tree-id15403 . -1) (undo-tree-id15404 . -1) (undo-tree-id15405 . -1) (undo-tree-id15406 . -1) (undo-tree-id15407 . -1) (undo-tree-id15408 . -1) (undo-tree-id15409 . -1) (undo-tree-id15410 . -1) (undo-tree-id15411 . -1) (undo-tree-id15412 . -1) (undo-tree-id15413 . -1) (undo-tree-id15414 . -1) (undo-tree-id15415 . -1) (undo-tree-id15416 . -1) (undo-tree-id15417 . -1) (undo-tree-id15418 . -1) (undo-tree-id15419 . -1) (undo-tree-id15420 . -1) (undo-tree-id15421 . -1) (undo-tree-id15422 . -1) (undo-tree-id15423 . -1) (undo-tree-id15424 . -1) (undo-tree-id15425 . -1) (undo-tree-id15426 . -1) (undo-tree-id15427 . -1) (undo-tree-id15428 . -1) (undo-tree-id15429 . -1) (undo-tree-id15430 . -1) (undo-tree-id15431 . -1) (undo-tree-id15432 . -1) (undo-tree-id15433 . -1) (undo-tree-id15434 . -1) (undo-tree-id15435 . -1) (undo-tree-id15436 . -1) (undo-tree-id15437 . -1) (undo-tree-id15438 . -1) (undo-tree-id15439 . -1) (undo-tree-id15440 . -1) (undo-tree-id15441 . -1) (undo-tree-id15442 . -1) (undo-tree-id15443 . -1) (undo-tree-id15444 . -1) (undo-tree-id15445 . -1) (undo-tree-id15446 . -1) (undo-tree-id15447 . -1) (undo-tree-id15448 . -1) (undo-tree-id15449 . -1) (undo-tree-id15450 . -1) (undo-tree-id15451 . -1) (undo-tree-id15452 . -1) (undo-tree-id15453 . -1) (undo-tree-id15454 . -1) (undo-tree-id15455 . -1) (undo-tree-id15456 . -1) (undo-tree-id15457 . -1) (undo-tree-id15458 . -1) (undo-tree-id15459 . -1) (undo-tree-id15460 . -1) (undo-tree-id15461 . -1) (undo-tree-id15462 . -1) (undo-tree-id15463 . -1) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (undo-tree-id15468 . -1) (undo-tree-id15469 . -1) (undo-tree-id15470 . -1) (undo-tree-id15471 . -1) (undo-tree-id15472 . -1) (undo-tree-id15473 . -1) (undo-tree-id15474 . -1) (undo-tree-id15475 . -1) (undo-tree-id15476 . -1) (undo-tree-id15477 . -1) (undo-tree-id15478 . -1) (undo-tree-id15479 . -1) (undo-tree-id15480 . -1) (undo-tree-id15481 . -1) (undo-tree-id15482 . -1) (undo-tree-id15483 . -1) (undo-tree-id15484 . -1) (undo-tree-id15485 . -1) (undo-tree-id15486 . -1) (undo-tree-id15487 . -1) (undo-tree-id15488 . -1) (undo-tree-id15489 . -1) (undo-tree-id15490 . -1) (undo-tree-id15491 . -1) (undo-tree-id15492 . -1) (undo-tree-id15493 . -1) (undo-tree-id15494 . -1) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (undo-tree-id15497 . -1) (undo-tree-id15498 . -1) (undo-tree-id15499 . -1) (undo-tree-id15500 . -1) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -1) (#("
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -2529) (undo-tree-id15504 . -1) (undo-tree-id15505 . -1) (undo-tree-id15506 . -1) (undo-tree-id15507 . -1) (undo-tree-id15508 . -1) (undo-tree-id15509 . -1) (undo-tree-id15510 . -1) (undo-tree-id15511 . -1) (undo-tree-id15512 . -1) (undo-tree-id15513 . -1) (undo-tree-id15514 . -1) (undo-tree-id15515 . -1) (undo-tree-id15516 . -1) (undo-tree-id15517 . -1) (undo-tree-id15518 . -1) (undo-tree-id15519 . -1) (undo-tree-id15520 . -1) (undo-tree-id15521 . -1) (undo-tree-id15522 . -1) (undo-tree-id15523 . -1) (undo-tree-id15524 . -1) (undo-tree-id15525 . -1) (undo-tree-id15526 . -1) (undo-tree-id15527 . -1) (undo-tree-id15528 . -1) (undo-tree-id15529 . -1) (undo-tree-id15530 . -1) (undo-tree-id15531 . -1) (undo-tree-id15532 . -1) (undo-tree-id15533 . -1) (undo-tree-id15534 . -1) (undo-tree-id15535 . -1) (undo-tree-id15536 . -1) (undo-tree-id15537 . -1) (undo-tree-id15538 . -1) (undo-tree-id15539 . -1) (undo-tree-id15540 . -1) (undo-tree-id15541 . -1) (undo-tree-id15542 . -1) (undo-tree-id15543 . -1) (undo-tree-id15544 . -1) (undo-tree-id15545 . -1) (undo-tree-id15546 . -1) (undo-tree-id15547 . -1) (undo-tree-id15548 . -1) (undo-tree-id15549 . -1) (undo-tree-id15550 . -1) (undo-tree-id15551 . -1) (undo-tree-id15552 . -1) (undo-tree-id15553 . -1) (undo-tree-id15554 . -1) (undo-tree-id15555 . -1) (undo-tree-id15556 . -1) (undo-tree-id15557 . -1) (undo-tree-id15558 . -1) (undo-tree-id15559 . -1) (undo-tree-id15560 . -1) (undo-tree-id15561 . -1) (undo-tree-id15562 . -1) (undo-tree-id15563 . -1) (undo-tree-id15564 . -1) (undo-tree-id15565 . -1) (undo-tree-id15566 . -1) (undo-tree-id15567 . -1) (undo-tree-id15568 . -1) (undo-tree-id15569 . -1) (undo-tree-id15570 . -1) (undo-tree-id15571 . -1) (undo-tree-id15572 . -1) (undo-tree-id15573 . -1) (undo-tree-id15574 . -1) (undo-tree-id15575 . -1) (undo-tree-id15576 . -1) (undo-tree-id15577 . -1) (undo-tree-id15578 . -1) (undo-tree-id15579 . -1) (undo-tree-id15580 . -1) (undo-tree-id15581 . -1) (undo-tree-id15582 . -1) (undo-tree-id15583 . -1) (undo-tree-id15584 . -1) (undo-tree-id15585 . -1) (undo-tree-id15586 . -1) (undo-tree-id15587 . -1) (undo-tree-id15588 . -1) (undo-tree-id15589 . -1) (undo-tree-id15590 . -1) (undo-tree-id15591 . -1) (undo-tree-id15592 . -1) (undo-tree-id15593 . -1) (undo-tree-id15594 . -1) (undo-tree-id15595 . -1) (undo-tree-id15596 . -1) (undo-tree-id15597 . -1) (undo-tree-id15598 . -1) (undo-tree-id15599 . -1) (undo-tree-id15600 . -1) (undo-tree-id15601 . -1) (undo-tree-id15602 . -1) (undo-tree-id15603 . -1) (undo-tree-id15604 . -1) (undo-tree-id15605 . -1) (undo-tree-id15606 . -1) (undo-tree-id15607 . -1) (undo-tree-id15608 . -1) (undo-tree-id15609 . -1) (undo-tree-id15610 . -1) (undo-tree-id15611 . -1) (undo-tree-id15612 . -1) (undo-tree-id15613 . -1) (undo-tree-id15614 . -1) (undo-tree-id15615 . -1) (undo-tree-id15616 . -1) (undo-tree-id15617 . -1) (undo-tree-id15618 . -1) (undo-tree-id15619 . -1) (undo-tree-id15620 . -1) (undo-tree-id15621 . -1) (undo-tree-id15622 . -1) (undo-tree-id15623 . -1) (undo-tree-id15624 . -1) (undo-tree-id15625 . -1) (undo-tree-id15626 . -1) (undo-tree-id15627 . -1) (undo-tree-id15628 . -1) (undo-tree-id15629 . -1) (undo-tree-id15630 . -1) (undo-tree-id15631 . -1) (undo-tree-id15632 . -1) (undo-tree-id15633 . -1) (undo-tree-id15634 . -1) (undo-tree-id15635 . -1) (undo-tree-id15636 . -1) 2527) nil (25767 5393 21451 883000) 0 nil])
([nil nil ((2562 . 2563) (2561 . 2562)) nil (25767 5393 21164 406000) 0 nil])
([nil nil ((#("n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 7 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t) 14 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t invisible t) 21 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 27 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 31 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t invisible t) 32 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 37 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 84 85 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t) 85 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 116 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t invisible t) 117 123 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 123 138 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t) 138 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t invisible t) 139 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 140 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 148 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t)) . 2574) (undo-tree-id14221 . -153) (undo-tree-id14222 . -153) (undo-tree-id14223 . -153) (undo-tree-id14224 . -1) (undo-tree-id14225 . -1) (undo-tree-id14226 . -1) (undo-tree-id14227 . -1) (undo-tree-id14228 . -1) (undo-tree-id14229 . -1) (undo-tree-id14230 . -1) (undo-tree-id14231 . -1) (undo-tree-id14232 . -1) (undo-tree-id14233 . -1) (undo-tree-id14234 . -1) (undo-tree-id14235 . -1) (undo-tree-id14236 . -1) (undo-tree-id14237 . -1) (undo-tree-id14238 . -1) (undo-tree-id14239 . -1) (undo-tree-id14240 . -1) (undo-tree-id14241 . -1) (undo-tree-id14242 . -1) (undo-tree-id14243 . -1) (undo-tree-id14244 . -1) (undo-tree-id14245 . -1) (undo-tree-id14246 . -154) (undo-tree-id14247 . -153) (undo-tree-id14248 . -1) (undo-tree-id14249 . -1) (undo-tree-id14250 . -1) (undo-tree-id14251 . -1) (undo-tree-id14252 . -1) (undo-tree-id14253 . -1) (undo-tree-id14254 . -1) (undo-tree-id14255 . -1) (undo-tree-id14256 . -1) (undo-tree-id14257 . -1) (undo-tree-id14258 . -1) (undo-tree-id14259 . -1) (undo-tree-id14260 . -1) (undo-tree-id14261 . -1) (undo-tree-id14262 . -1) (undo-tree-id14263 . -1) (undo-tree-id14264 . -1) (undo-tree-id14265 . -1) (undo-tree-id14266 . -1) (undo-tree-id14267 . -1) (undo-tree-id14268 . -1) (undo-tree-id14269 . -1) (undo-tree-id14270 . -1) (undo-tree-id14271 . -1) (undo-tree-id14272 . -1) (undo-tree-id14273 . -1) (undo-tree-id14274 . -1) (undo-tree-id14275 . -1) (undo-tree-id14276 . -1) (undo-tree-id14277 . -6) (undo-tree-id14278 . -6) (undo-tree-id14279 . -6) (undo-tree-id14280 . -6) (undo-tree-id14281 . -6) (undo-tree-id14282 . -6) (undo-tree-id14283 . -6) (undo-tree-id14284 . -6) (undo-tree-id14285 . -6) (undo-tree-id14286 . -6) (undo-tree-id14287 . -6) (undo-tree-id14288 . -6) (undo-tree-id14289 . -6) (undo-tree-id14290 . -6) (undo-tree-id14291 . -6) (undo-tree-id14292 . -6) (undo-tree-id14293 . -6) (undo-tree-id14294 . -6) (undo-tree-id14295 . -6) (undo-tree-id14296 . -6) (undo-tree-id14297 . -6) (undo-tree-id14298 . -6) (undo-tree-id14299 . -8) (undo-tree-id14300 . -8) (undo-tree-id14301 . -8) (undo-tree-id14302 . -8) (undo-tree-id14303 . -8) (undo-tree-id14304 . -8) (undo-tree-id14305 . -8) (undo-tree-id14306 . -8) (undo-tree-id14307 . -8) (undo-tree-id14308 . -8) (undo-tree-id14309 . -8) (undo-tree-id14310 . -8) (undo-tree-id14311 . -8) (undo-tree-id14312 . -8) (undo-tree-id14313 . -8) (undo-tree-id14314 . -8) (undo-tree-id14315 . -8) (undo-tree-id14316 . -8) (undo-tree-id14317 . -8) (undo-tree-id14318 . -8) (undo-tree-id14319 . -8) (undo-tree-id14320 . -8) (undo-tree-id14321 . -12) (undo-tree-id14322 . -12) (undo-tree-id14323 . -12) (undo-tree-id14324 . -12) (undo-tree-id14325 . -12) (undo-tree-id14326 . -12) (undo-tree-id14327 . -12) (undo-tree-id14328 . -12) (undo-tree-id14329 . -12) (undo-tree-id14330 . -12) (undo-tree-id14331 . -12) (undo-tree-id14332 . -12) (undo-tree-id14333 . -12) (undo-tree-id14334 . -12) (undo-tree-id14335 . -12) (undo-tree-id14336 . -12) (undo-tree-id14337 . -12) (undo-tree-id14338 . -12) (undo-tree-id14339 . -12) (undo-tree-id14340 . -12) (undo-tree-id14341 . -12) (undo-tree-id14342 . -12) (undo-tree-id14343 . -19) (undo-tree-id14344 . -19) (undo-tree-id14345 . -19) (undo-tree-id14346 . -19) (undo-tree-id14347 . -19) (undo-tree-id14348 . -19) (undo-tree-id14349 . -19) (undo-tree-id14350 . -19) (undo-tree-id14351 . -19) (undo-tree-id14352 . -19) (undo-tree-id14353 . -19) (undo-tree-id14354 . -19) (undo-tree-id14355 . -19) (undo-tree-id14356 . -19) (undo-tree-id14357 . -19) (undo-tree-id14358 . -19) (undo-tree-id14359 . -19) (undo-tree-id14360 . -19) (undo-tree-id14361 . -19) (undo-tree-id14362 . -19) (undo-tree-id14363 . -19) (undo-tree-id14364 . -19) (undo-tree-id14365 . -20) (undo-tree-id14366 . -20) (undo-tree-id14367 . -20) (undo-tree-id14368 . -20) (undo-tree-id14369 . -20) (undo-tree-id14370 . -20) (undo-tree-id14371 . -20) (undo-tree-id14372 . -20) (undo-tree-id14373 . -20) (undo-tree-id14374 . -20) (undo-tree-id14375 . -20) (undo-tree-id14376 . -20) (undo-tree-id14377 . -20) (undo-tree-id14378 . -20) (undo-tree-id14379 . -20) (undo-tree-id14380 . -20) (undo-tree-id14381 . -20) (undo-tree-id14382 . -20) (undo-tree-id14383 . -20) (undo-tree-id14384 . -20) (undo-tree-id14385 . -20) (undo-tree-id14386 . -20) (undo-tree-id14387 . -26) (undo-tree-id14388 . -26) (undo-tree-id14389 . -26) (undo-tree-id14390 . -26) (undo-tree-id14391 . -26) (undo-tree-id14392 . -26) (undo-tree-id14393 . -26) (undo-tree-id14394 . -26) (undo-tree-id14395 . -26) (undo-tree-id14396 . -26) (undo-tree-id14397 . -26) (undo-tree-id14398 . -26) (undo-tree-id14399 . -26) (undo-tree-id14400 . -26) (undo-tree-id14401 . -26) (undo-tree-id14402 . -26) (undo-tree-id14403 . -26) (undo-tree-id14404 . -26) (undo-tree-id14405 . -26) (undo-tree-id14406 . -26) (undo-tree-id14407 . -26) (undo-tree-id14408 . -26) (undo-tree-id14409 . -28) (undo-tree-id14410 . -28) (undo-tree-id14411 . -28) (undo-tree-id14412 . -28) (undo-tree-id14413 . -28) (undo-tree-id14414 . -28) (undo-tree-id14415 . -28) (undo-tree-id14416 . -28) (undo-tree-id14417 . -28) (undo-tree-id14418 . -28) (undo-tree-id14419 . -28) (undo-tree-id14420 . -28) (undo-tree-id14421 . -28) (undo-tree-id14422 . -28) (undo-tree-id14423 . -28) (undo-tree-id14424 . -28) (undo-tree-id14425 . -28) (undo-tree-id14426 . -28) (undo-tree-id14427 . -28) (undo-tree-id14428 . -28) (undo-tree-id14429 . -28) (undo-tree-id14430 . -28) (undo-tree-id14431 . -30) (undo-tree-id14432 . -30) (undo-tree-id14433 . -30) (undo-tree-id14434 . -30) (undo-tree-id14435 . -30) (undo-tree-id14436 . -30) (undo-tree-id14437 . -30) (undo-tree-id14438 . -30) (undo-tree-id14439 . -30) (undo-tree-id14440 . -30) (undo-tree-id14441 . -30) (undo-tree-id14442 . -30) (undo-tree-id14443 . -30) (undo-tree-id14444 . -30) (undo-tree-id14445 . -30) (undo-tree-id14446 . -30) (undo-tree-id14447 . -30) (undo-tree-id14448 . -30) (undo-tree-id14449 . -30) (undo-tree-id14450 . -30) (undo-tree-id14451 . -30) (undo-tree-id14452 . -30) (undo-tree-id14453 . -31) (undo-tree-id14454 . -31) (undo-tree-id14455 . -31) (undo-tree-id14456 . -31) (undo-tree-id14457 . -31) (undo-tree-id14458 . -31) (undo-tree-id14459 . -31) (undo-tree-id14460 . -31) (undo-tree-id14461 . -31) (undo-tree-id14462 . -31) (undo-tree-id14463 . -31) (undo-tree-id14464 . -31) (undo-tree-id14465 . -31) (undo-tree-id14466 . -31) (undo-tree-id14467 . -31) (undo-tree-id14468 . -31) (undo-tree-id14469 . -31) (undo-tree-id14470 . -31) (undo-tree-id14471 . -31) (undo-tree-id14472 . -31) (undo-tree-id14473 . -31) (undo-tree-id14474 . -31) (undo-tree-id14475 . -36) (undo-tree-id14476 . -36) (undo-tree-id14477 . -36) (undo-tree-id14478 . -36) (undo-tree-id14479 . -36) (undo-tree-id14480 . -36) (undo-tree-id14481 . -36) (undo-tree-id14482 . -36) (undo-tree-id14483 . -36) (undo-tree-id14484 . -36) (undo-tree-id14485 . -36) (undo-tree-id14486 . -36) (undo-tree-id14487 . -36) (undo-tree-id14488 . -36) (undo-tree-id14489 . -36) (undo-tree-id14490 . -36) (undo-tree-id14491 . -36) (undo-tree-id14492 . -36) (undo-tree-id14493 . -36) (undo-tree-id14494 . -36) (undo-tree-id14495 . -36) (undo-tree-id14496 . -36) (undo-tree-id14497 . -38) (undo-tree-id14498 . -38) (undo-tree-id14499 . -38) (undo-tree-id14500 . -38) (undo-tree-id14501 . -38) (undo-tree-id14502 . -38) (undo-tree-id14503 . -38) (undo-tree-id14504 . -38) (undo-tree-id14505 . -38) (undo-tree-id14506 . -38) (undo-tree-id14507 . -38) (undo-tree-id14508 . -38) (undo-tree-id14509 . -38) (undo-tree-id14510 . -38) (undo-tree-id14511 . -38) (undo-tree-id14512 . -38) (undo-tree-id14513 . -38) (undo-tree-id14514 . -38) (undo-tree-id14515 . -38) (undo-tree-id14516 . -38) (undo-tree-id14517 . -38) (undo-tree-id14518 . -38) (undo-tree-id14519 . -40) (undo-tree-id14520 . -40) (undo-tree-id14521 . -40) (undo-tree-id14522 . -40) (undo-tree-id14523 . -40) (undo-tree-id14524 . -40) (undo-tree-id14525 . -40) (undo-tree-id14526 . -40) (undo-tree-id14527 . -40) (undo-tree-id14528 . -40) (undo-tree-id14529 . -40) (undo-tree-id14530 . -40) (undo-tree-id14531 . -40) (undo-tree-id14532 . -40) (undo-tree-id14533 . -40) (undo-tree-id14534 . -40) (undo-tree-id14535 . -40) (undo-tree-id14536 . -40) (undo-tree-id14537 . -40) (undo-tree-id14538 . -40) (undo-tree-id14539 . -40) (undo-tree-id14540 . -40) (undo-tree-id14541 . -42) (undo-tree-id14542 . -42) (undo-tree-id14543 . -42) (undo-tree-id14544 . -42) (undo-tree-id14545 . -42) (undo-tree-id14546 . -42) (undo-tree-id14547 . -42) (undo-tree-id14548 . -42) (undo-tree-id14549 . -42) (undo-tree-id14550 . -42) (undo-tree-id14551 . -42) (undo-tree-id14552 . -42) (undo-tree-id14553 . -42) (undo-tree-id14554 . -42) (undo-tree-id14555 . -42) (undo-tree-id14556 . -42) (undo-tree-id14557 . -42) (undo-tree-id14558 . -42) (undo-tree-id14559 . -42) (undo-tree-id14560 . -42) (undo-tree-id14561 . -42) (undo-tree-id14562 . -42) (undo-tree-id14563 . -49) (undo-tree-id14564 . -49) (undo-tree-id14565 . -49) (undo-tree-id14566 . -49) (undo-tree-id14567 . -49) (undo-tree-id14568 . -49) (undo-tree-id14569 . -49) (undo-tree-id14570 . -49) (undo-tree-id14571 . -49) (undo-tree-id14572 . -49) (undo-tree-id14573 . -49) (undo-tree-id14574 . -49) (undo-tree-id14575 . -49) (undo-tree-id14576 . -49) (undo-tree-id14577 . -49) (undo-tree-id14578 . -49) (undo-tree-id14579 . -49) (undo-tree-id14580 . -49) (undo-tree-id14581 . -49) (undo-tree-id14582 . -49) (undo-tree-id14583 . -49) (undo-tree-id14584 . -49) (undo-tree-id14585 . -51) (undo-tree-id14586 . -51) (undo-tree-id14587 . -51) (undo-tree-id14588 . -51) (undo-tree-id14589 . -51) (undo-tree-id14590 . -51) (undo-tree-id14591 . -51) (undo-tree-id14592 . -51) (undo-tree-id14593 . -51) (undo-tree-id14594 . -51) (undo-tree-id14595 . -51) (undo-tree-id14596 . -51) (undo-tree-id14597 . -51) (undo-tree-id14598 . -51) (undo-tree-id14599 . -51) (undo-tree-id14600 . -51) (undo-tree-id14601 . -51) (undo-tree-id14602 . -51) (undo-tree-id14603 . -51) (undo-tree-id14604 . -51) (undo-tree-id14605 . -51) (undo-tree-id14606 . -51) (undo-tree-id14607 . -57) (undo-tree-id14608 . -57) (undo-tree-id14609 . -57) (undo-tree-id14610 . -57) (undo-tree-id14611 . -57) (undo-tree-id14612 . -57) (undo-tree-id14613 . -57) (undo-tree-id14614 . -57) (undo-tree-id14615 . -57) (undo-tree-id14616 . -57) (undo-tree-id14617 . -57) (undo-tree-id14618 . -57) (undo-tree-id14619 . -57) (undo-tree-id14620 . -57) (undo-tree-id14621 . -57) (undo-tree-id14622 . -57) (undo-tree-id14623 . -57) (undo-tree-id14624 . -57) (undo-tree-id14625 . -57) (undo-tree-id14626 . -57) (undo-tree-id14627 . -57) (undo-tree-id14628 . -57) (undo-tree-id14629 . -65) (undo-tree-id14630 . -65) (undo-tree-id14631 . -65) (undo-tree-id14632 . -65) (undo-tree-id14633 . -65) (undo-tree-id14634 . -65) (undo-tree-id14635 . -65) (undo-tree-id14636 . -65) (undo-tree-id14637 . -65) (undo-tree-id14638 . -65) (undo-tree-id14639 . -65) (undo-tree-id14640 . -65) (undo-tree-id14641 . -65) (undo-tree-id14642 . -65) (undo-tree-id14643 . -65) (undo-tree-id14644 . -65) (undo-tree-id14645 . -65) (undo-tree-id14646 . -65) (undo-tree-id14647 . -65) (undo-tree-id14648 . -65) (undo-tree-id14649 . -65) (undo-tree-id14650 . -65) (undo-tree-id14651 . -65) (undo-tree-id14652 . -65) (undo-tree-id14653 . -65) (undo-tree-id14654 . -65) (undo-tree-id14655 . -65) (undo-tree-id14656 . -65) (undo-tree-id14657 . -65) (undo-tree-id14658 . -65) (undo-tree-id14659 . -65) (undo-tree-id14660 . -65) (undo-tree-id14661 . -65) (undo-tree-id14662 . -65) (undo-tree-id14663 . -65) (undo-tree-id14664 . -65) (undo-tree-id14665 . -65) (undo-tree-id14666 . -65) (undo-tree-id14667 . -65) (undo-tree-id14668 . -65) (undo-tree-id14669 . -65) (undo-tree-id14670 . -65) (undo-tree-id14671 . -65) (undo-tree-id14672 . -67) (undo-tree-id14673 . -67) (undo-tree-id14674 . -67) (undo-tree-id14675 . -67) (undo-tree-id14676 . -67) (undo-tree-id14677 . -67) (undo-tree-id14678 . -67) (undo-tree-id14679 . -67) (undo-tree-id14680 . -67) (undo-tree-id14681 . -67) (undo-tree-id14682 . -67) (undo-tree-id14683 . -67) (undo-tree-id14684 . -67) (undo-tree-id14685 . -67) (undo-tree-id14686 . -67) (undo-tree-id14687 . -67) (undo-tree-id14688 . -67) (undo-tree-id14689 . -67) (undo-tree-id14690 . -67) (undo-tree-id14691 . -67) (undo-tree-id14692 . -67) (undo-tree-id14693 . -67) (undo-tree-id14694 . -77) (undo-tree-id14695 . -77) (undo-tree-id14696 . -77) (undo-tree-id14697 . -77) (undo-tree-id14698 . -77) (undo-tree-id14699 . -77) (undo-tree-id14700 . -77) (undo-tree-id14701 . -77) (undo-tree-id14702 . -77) (undo-tree-id14703 . -77) (undo-tree-id14704 . -77) (undo-tree-id14705 . -77) (undo-tree-id14706 . -77) (undo-tree-id14707 . -77) (undo-tree-id14708 . -77) (undo-tree-id14709 . -77) (undo-tree-id14710 . -77) (undo-tree-id14711 . -77) (undo-tree-id14712 . -77) (undo-tree-id14713 . -77) (undo-tree-id14714 . -77) (undo-tree-id14715 . -77) (undo-tree-id14716 . -83) (undo-tree-id14717 . -83) (undo-tree-id14718 . -83) (undo-tree-id14719 . -83) (undo-tree-id14720 . -83) (undo-tree-id14721 . -83) (undo-tree-id14722 . -83) (undo-tree-id14723 . -83) (undo-tree-id14724 . -83) (undo-tree-id14725 . -83) (undo-tree-id14726 . -83) (undo-tree-id14727 . -83) (undo-tree-id14728 . -83) (undo-tree-id14729 . -83) (undo-tree-id14730 . -83) (undo-tree-id14731 . -83) (undo-tree-id14732 . -83) (undo-tree-id14733 . -83) (undo-tree-id14734 . -83) (undo-tree-id14735 . -83) (undo-tree-id14736 . -83) (undo-tree-id14737 . -83) (undo-tree-id14738 . 69) (undo-tree-id14739 . -92) (undo-tree-id14740 . -91) (undo-tree-id14741 . -91) (undo-tree-id14742 . -91) (undo-tree-id14743 . -91) (undo-tree-id14744 . -91) (undo-tree-id14745 . -91) (undo-tree-id14746 . -91) (undo-tree-id14747 . -91) (undo-tree-id14748 . -91) (undo-tree-id14749 . -91) (undo-tree-id14750 . -91) (undo-tree-id14751 . -91) (undo-tree-id14752 . -91) (undo-tree-id14753 . -91) (undo-tree-id14754 . -91) (undo-tree-id14755 . -91) (undo-tree-id14756 . -91) (undo-tree-id14757 . -91) (undo-tree-id14758 . -91) (undo-tree-id14759 . -91) (undo-tree-id14760 . -91) (undo-tree-id14761 . -91) (undo-tree-id14762 . -93) (undo-tree-id14763 . -93) (undo-tree-id14764 . -93) (undo-tree-id14765 . -93) (undo-tree-id14766 . -93) (undo-tree-id14767 . -93) (undo-tree-id14768 . -93) (undo-tree-id14769 . -93) (undo-tree-id14770 . -93) (undo-tree-id14771 . -93) (undo-tree-id14772 . -93) (undo-tree-id14773 . -93) (undo-tree-id14774 . -93) (undo-tree-id14775 . -93) (undo-tree-id14776 . -93) (undo-tree-id14777 . -93) (undo-tree-id14778 . -93) (undo-tree-id14779 . -93) (undo-tree-id14780 . -93) (undo-tree-id14781 . -93) (undo-tree-id14782 . -93) (undo-tree-id14783 . -93) (undo-tree-id14784 . 59) (undo-tree-id14785 . -102) (undo-tree-id14786 . -101) (undo-tree-id14787 . -101) (undo-tree-id14788 . -101) (undo-tree-id14789 . -101) (undo-tree-id14790 . -101) (undo-tree-id14791 . -101) (undo-tree-id14792 . -101) (undo-tree-id14793 . -101) (undo-tree-id14794 . -101) (undo-tree-id14795 . -101) (undo-tree-id14796 . -101) (undo-tree-id14797 . -101) (undo-tree-id14798 . -101) (undo-tree-id14799 . -101) (undo-tree-id14800 . -101) (undo-tree-id14801 . -101) (undo-tree-id14802 . -101) (undo-tree-id14803 . -101) (undo-tree-id14804 . -101) (undo-tree-id14805 . -101) (undo-tree-id14806 . -101) (undo-tree-id14807 . -101) (undo-tree-id14808 . -102) (undo-tree-id14809 . -102) (undo-tree-id14810 . -102) (undo-tree-id14811 . -102) (undo-tree-id14812 . -102) (undo-tree-id14813 . -102) (undo-tree-id14814 . -102) (undo-tree-id14815 . -102) (undo-tree-id14816 . -102) (undo-tree-id14817 . -102) (undo-tree-id14818 . -102) (undo-tree-id14819 . -102) (undo-tree-id14820 . -102) (undo-tree-id14821 . -102) (undo-tree-id14822 . -102) (undo-tree-id14823 . -102) (undo-tree-id14824 . -102) (undo-tree-id14825 . -102) (undo-tree-id14826 . -102) (undo-tree-id14827 . -102) (undo-tree-id14828 . -102) (undo-tree-id14829 . -102) (undo-tree-id14830 . -108) (undo-tree-id14831 . -108) (undo-tree-id14832 . -108) (undo-tree-id14833 . -108) (undo-tree-id14834 . -108) (undo-tree-id14835 . -108) (undo-tree-id14836 . -108) (undo-tree-id14837 . -108) (undo-tree-id14838 . -108) (undo-tree-id14839 . -108) (undo-tree-id14840 . -108) (undo-tree-id14841 . -108) (undo-tree-id14842 . -108) (undo-tree-id14843 . -108) (undo-tree-id14844 . -108) (undo-tree-id14845 . -108) (undo-tree-id14846 . -108) (undo-tree-id14847 . -108) (undo-tree-id14848 . -108) (undo-tree-id14849 . -108) (undo-tree-id14850 . -108) (undo-tree-id14851 . -108) (undo-tree-id14852 . -109) (undo-tree-id14853 . -109) (undo-tree-id14854 . -109) (undo-tree-id14855 . -109) (undo-tree-id14856 . -109) (undo-tree-id14857 . -109) (undo-tree-id14858 . -109) (undo-tree-id14859 . -109) (undo-tree-id14860 . -115) (undo-tree-id14861 . -115) (undo-tree-id14862 . -115) (undo-tree-id14863 . -115) (undo-tree-id14864 . -115) (undo-tree-id14865 . -115) (undo-tree-id14866 . -115) (undo-tree-id14867 . -115) (undo-tree-id14868 . -116) (undo-tree-id14869 . -116) (undo-tree-id14870 . -116) (undo-tree-id14871 . -116) (undo-tree-id14872 . -116) (undo-tree-id14873 . -116) (undo-tree-id14874 . -116) (undo-tree-id14875 . -116) (undo-tree-id14876 . -122) (undo-tree-id14877 . -122) (undo-tree-id14878 . -122) (undo-tree-id14879 . -122) (undo-tree-id14880 . -122) (undo-tree-id14881 . -122) (undo-tree-id14882 . -122) (undo-tree-id14883 . -122) (undo-tree-id14884 . -123) (undo-tree-id14885 . -123) (undo-tree-id14886 . -123) (undo-tree-id14887 . -123) (undo-tree-id14888 . -123) (undo-tree-id14889 . -123) (undo-tree-id14890 . -123) (undo-tree-id14891 . -123) (undo-tree-id14892 . -129) (undo-tree-id14893 . -129) (undo-tree-id14894 . -129) (undo-tree-id14895 . -129) (undo-tree-id14896 . -129) (undo-tree-id14897 . -129) (undo-tree-id14898 . -129) (undo-tree-id14899 . -129) (undo-tree-id14900 . -129) (undo-tree-id14901 . -129) (undo-tree-id14902 . -129) (undo-tree-id14903 . -129) (undo-tree-id14904 . -129) (undo-tree-id14905 . -129) (undo-tree-id14906 . -129) (undo-tree-id14907 . -129) (undo-tree-id14908 . -129) (undo-tree-id14909 . -129) (undo-tree-id14910 . -129) (undo-tree-id14911 . -129) (undo-tree-id14912 . -129) (undo-tree-id14913 . -129) (undo-tree-id14914 . -129) (undo-tree-id14915 . -129) (undo-tree-id14916 . -129) (undo-tree-id14917 . -129) (undo-tree-id14918 . -129) (undo-tree-id14919 . -129) (undo-tree-id14920 . -129) (undo-tree-id14921 . -130) (undo-tree-id14922 . -130) (undo-tree-id14923 . -130) (undo-tree-id14924 . -130) (undo-tree-id14925 . -130) (undo-tree-id14926 . -130) (undo-tree-id14927 . -130) (undo-tree-id14928 . -130) (undo-tree-id14929 . -130) (undo-tree-id14930 . -130) (undo-tree-id14931 . -130) (undo-tree-id14932 . -130) (undo-tree-id14933 . -130) (undo-tree-id14934 . -130) (undo-tree-id14935 . -130) (undo-tree-id14936 . -130) (undo-tree-id14937 . -130) (undo-tree-id14938 . -130) (undo-tree-id14939 . -130) (undo-tree-id14940 . -130) (undo-tree-id14941 . -130) (undo-tree-id14942 . -130) (undo-tree-id14943 . -131) (undo-tree-id14944 . -131) (undo-tree-id14945 . -131) (undo-tree-id14946 . -131) (undo-tree-id14947 . -131) (undo-tree-id14948 . -131) (undo-tree-id14949 . -131) (undo-tree-id14950 . -131) (undo-tree-id14951 . -131) (undo-tree-id14952 . -131) (undo-tree-id14953 . -131) (undo-tree-id14954 . -131) (undo-tree-id14955 . -131) (undo-tree-id14956 . -131) (undo-tree-id14957 . -131) (undo-tree-id14958 . -131) (undo-tree-id14959 . -131) (undo-tree-id14960 . -131) (undo-tree-id14961 . -131) (undo-tree-id14962 . -131) (undo-tree-id14963 . -131) (undo-tree-id14964 . -131) (undo-tree-id14965 . -132) (undo-tree-id14966 . -132) (undo-tree-id14967 . -132) (undo-tree-id14968 . -132) (undo-tree-id14969 . -132) (undo-tree-id14970 . -132) (undo-tree-id14971 . -132) (undo-tree-id14972 . -132) (undo-tree-id14973 . -132) (undo-tree-id14974 . -132) (undo-tree-id14975 . -132) (undo-tree-id14976 . -132) (undo-tree-id14977 . -132) (undo-tree-id14978 . -132) (undo-tree-id14979 . -132) (undo-tree-id14980 . -132) (undo-tree-id14981 . -132) (undo-tree-id14982 . -132) (undo-tree-id14983 . -132) (undo-tree-id14984 . -132) (undo-tree-id14985 . -132) (undo-tree-id14986 . -132) (undo-tree-id14987 . -137) (undo-tree-id14988 . -137) (undo-tree-id14989 . -137) (undo-tree-id14990 . -137) (undo-tree-id14991 . -137) (undo-tree-id14992 . -137) (undo-tree-id14993 . -137) (undo-tree-id14994 . -137) (undo-tree-id14995 . -137) (undo-tree-id14996 . -137) (undo-tree-id14997 . -137) (undo-tree-id14998 . -137) (undo-tree-id14999 . -137) (undo-tree-id15000 . -137) (undo-tree-id15001 . -137) (undo-tree-id15002 . -137) (undo-tree-id15003 . -137) (undo-tree-id15004 . -137) (undo-tree-id15005 . -137) (undo-tree-id15006 . -137) (undo-tree-id15007 . -137) (undo-tree-id15008 . -137) (undo-tree-id15009 . -138) (undo-tree-id15010 . -138) (undo-tree-id15011 . -138) (undo-tree-id15012 . -138) (undo-tree-id15013 . -138) (undo-tree-id15014 . -138) (undo-tree-id15015 . -138) (undo-tree-id15016 . -138) (undo-tree-id15017 . -138) (undo-tree-id15018 . -138) (undo-tree-id15019 . -138) (undo-tree-id15020 . -138) (undo-tree-id15021 . -138) (undo-tree-id15022 . -138) (undo-tree-id15023 . -138) (undo-tree-id15024 . -138) (undo-tree-id15025 . -138) (undo-tree-id15026 . -138) (undo-tree-id15027 . -138) (undo-tree-id15028 . -138) (undo-tree-id15029 . -138) (undo-tree-id15030 . -138) (undo-tree-id15031 . -147) (undo-tree-id15032 . -147) (undo-tree-id15033 . -147) (undo-tree-id15034 . -147) (undo-tree-id15035 . -147) (undo-tree-id15036 . -147) (undo-tree-id15037 . -147) (undo-tree-id15038 . -147) (undo-tree-id15039 . -147) (undo-tree-id15040 . -147) (undo-tree-id15041 . -147) (undo-tree-id15042 . -147) (undo-tree-id15043 . -147) (undo-tree-id15044 . -147) (undo-tree-id15045 . -147) (undo-tree-id15046 . -147) (undo-tree-id15047 . -147) (undo-tree-id15048 . -147) (undo-tree-id15049 . -147) (undo-tree-id15050 . -147) (undo-tree-id15051 . -147) (undo-tree-id15052 . -147) (undo-tree-id15053 . -148) (undo-tree-id15054 . -148) (undo-tree-id15055 . -148) (undo-tree-id15056 . -148) (undo-tree-id15057 . -148) (undo-tree-id15058 . -148) (undo-tree-id15059 . -148) (undo-tree-id15060 . -148) (undo-tree-id15061 . -148) (undo-tree-id15062 . -148) (undo-tree-id15063 . -148) (undo-tree-id15064 . -148) (undo-tree-id15065 . -148) (undo-tree-id15066 . -148) (undo-tree-id15067 . -148) (undo-tree-id15068 . -148) (undo-tree-id15069 . -148) (undo-tree-id15070 . -148) (undo-tree-id15071 . -148) (undo-tree-id15072 . -148) (undo-tree-id15073 . -148) (undo-tree-id15074 . -148) (undo-tree-id15075 . -152) (undo-tree-id15076 . -152) (undo-tree-id15077 . -152) (undo-tree-id15078 . -152) (undo-tree-id15079 . -152) (undo-tree-id15080 . -152) (undo-tree-id15081 . -152) (undo-tree-id15082 . -152) (undo-tree-id15083 . -152) (undo-tree-id15084 . -152) (undo-tree-id15085 . -152) (undo-tree-id15086 . -152) (undo-tree-id15087 . -152) (undo-tree-id15088 . -152) (undo-tree-id15089 . -152) (undo-tree-id15090 . -152) (undo-tree-id15091 . -152) (undo-tree-id15092 . -152) (undo-tree-id15093 . -152) (undo-tree-id15094 . -152) (undo-tree-id15095 . -152) (undo-tree-id15096 . -152) (undo-tree-id15097 . -153) (undo-tree-id15098 . -153) (undo-tree-id15099 . -153) (undo-tree-id15100 . -153) (undo-tree-id15101 . -153) (undo-tree-id15102 . -153) (undo-tree-id15103 . -153) (undo-tree-id15104 . -153) (undo-tree-id15105 . -153) (undo-tree-id15106 . -153) (undo-tree-id15107 . -153) (undo-tree-id15108 . -153) (undo-tree-id15109 . -153) (undo-tree-id15110 . -153) (undo-tree-id15111 . -153) (undo-tree-id15112 . -153) (undo-tree-id15113 . -153) (undo-tree-id15114 . -153) (undo-tree-id15115 . -153) (undo-tree-id15116 . -153) (undo-tree-id15117 . -153) (undo-tree-id15118 . -153) (undo-tree-id15119 . -154) (undo-tree-id15120 . -154) (undo-tree-id15121 . -154) (undo-tree-id15122 . -154) (undo-tree-id15123 . -154) (undo-tree-id15124 . -154) (undo-tree-id15125 . -154) (undo-tree-id15126 . -154) (undo-tree-id15127 . -154) (undo-tree-id15128 . -154) (undo-tree-id15129 . -154) (undo-tree-id15130 . -154) (undo-tree-id15131 . -154) (undo-tree-id15132 . -154) (undo-tree-id15133 . -154) (undo-tree-id15134 . -154) (undo-tree-id15135 . -154) (undo-tree-id15136 . -154) (undo-tree-id15137 . -154) (undo-tree-id15138 . -154) (undo-tree-id15139 . -154) (undo-tree-id15140 . -154) (undo-tree-id15141 . -153) (undo-tree-id15142 . -153) (undo-tree-id15143 . -153) (undo-tree-id15144 . -153) (undo-tree-id15145 . -153) (undo-tree-id15146 . -153) (undo-tree-id15147 . -153) (undo-tree-id15148 . -153) (undo-tree-id15149 . -153) (undo-tree-id15150 . -153) (undo-tree-id15151 . -153) (undo-tree-id15152 . -153) (undo-tree-id15153 . -153) (undo-tree-id15154 . -153) (undo-tree-id15155 . 1) (undo-tree-id15156 . -154) (undo-tree-id15157 . 45) (undo-tree-id15158 . -110) (undo-tree-id15159 . -153) (undo-tree-id15160 . -153) (undo-tree-id15161 . -153) (undo-tree-id15162 . -153) (undo-tree-id15163 . -153) (undo-tree-id15164 . -153) (undo-tree-id15165 . -153) (undo-tree-id15166 . -153) (undo-tree-id15167 . -153) (undo-tree-id15168 . -153) (undo-tree-id15169 . -153) (undo-tree-id15170 . -153) (undo-tree-id15171 . -153) (undo-tree-id15172 . -153) (undo-tree-id15173 . -153) (undo-tree-id15174 . -153) (undo-tree-id15175 . -154) 2727) nil (25767 5393 21125 993000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2711 . 2712) (nil fontified nil 2558 . 2712) (2558 . 2712)) nil (25767 5393 18992 93000) 0 nil])
([nil nil ((2542 . 2548)) nil (25767 5393 18990 392000) 0 nil])
([nil nil ((2529 . 2530)) nil (25767 5393 18989 256000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t)) . 2720) (undo-tree-id14188 . -1) (undo-tree-id14189 . -1) (undo-tree-id14190 . -1) (undo-tree-id14191 . -1) (undo-tree-id14192 . -1) (undo-tree-id14193 . -1) (undo-tree-id14194 . -1) (undo-tree-id14195 . -1) (undo-tree-id14196 . -1) (undo-tree-id14197 . -1) (undo-tree-id14198 . -1) (undo-tree-id14199 . -1) (undo-tree-id14200 . -1) (undo-tree-id14201 . -1) (undo-tree-id14202 . -1) (undo-tree-id14203 . -1) (undo-tree-id14204 . -1) (undo-tree-id14205 . -1) (undo-tree-id14206 . -1) (undo-tree-id14207 . -1) (undo-tree-id14208 . -1) (undo-tree-id14209 . -1) (undo-tree-id14210 . -1) (undo-tree-id14211 . -1) (undo-tree-id14212 . -1) (undo-tree-id14213 . -1) (undo-tree-id14214 . -1) (undo-tree-id14215 . -1) (undo-tree-id14216 . -1) (undo-tree-id14217 . -1) (undo-tree-id14218 . -1) (undo-tree-id14219 . -1) (undo-tree-id14220 . -1)) nil (25767 5393 18986 321000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t)) . 2720) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) (undo-tree-id14162 . -1) (undo-tree-id14163 . -1) (undo-tree-id14164 . -1) (undo-tree-id14165 . -1) (undo-tree-id14166 . -1) (undo-tree-id14167 . -1) (undo-tree-id14168 . -1) (undo-tree-id14169 . -1) (undo-tree-id14170 . -1) (undo-tree-id14171 . -1) (undo-tree-id14172 . -1) (undo-tree-id14173 . -1) (undo-tree-id14174 . -1) (undo-tree-id14175 . -1) (undo-tree-id14176 . -1) (undo-tree-id14177 . -1) (undo-tree-id14178 . -1) (undo-tree-id14179 . -1) (undo-tree-id14180 . -1) (undo-tree-id14181 . -1) (undo-tree-id14182 . -1) (undo-tree-id14183 . -1) (undo-tree-id14184 . -1) (undo-tree-id14185 . -1) (undo-tree-id14186 . -1) (undo-tree-id14187 . -1)) nil (25767 5393 18332 125000) 0 nil])
([nil nil ((2565 . 2566)) nil (25767 5393 18263 221000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face org-block-end-line)) . 2721) (undo-tree-id14123 . -1) (undo-tree-id14124 . -1) (undo-tree-id14125 . -1) (undo-tree-id14126 . -1) (undo-tree-id14127 . -1) (undo-tree-id14128 . -1) (undo-tree-id14129 . -1) (undo-tree-id14130 . -1) (undo-tree-id14131 . -1) (undo-tree-id14132 . -1) (undo-tree-id14133 . -1) (undo-tree-id14134 . -1) (undo-tree-id14135 . -1) (undo-tree-id14136 . -1) (undo-tree-id14137 . -1) (undo-tree-id14138 . -1) (undo-tree-id14139 . -1) (undo-tree-id14140 . -1) (undo-tree-id14141 . -1) (undo-tree-id14142 . -1) (undo-tree-id14143 . -1) (undo-tree-id14144 . -1) (undo-tree-id14145 . -1) (undo-tree-id14146 . -1) (undo-tree-id14147 . -1) (undo-tree-id14148 . -1) (undo-tree-id14149 . -1) (undo-tree-id14150 . -1) (undo-tree-id14151 . -1) (undo-tree-id14152 . -1) (undo-tree-id14153 . -1) (undo-tree-id14154 . -1) (undo-tree-id14155 . -1) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (undo-tree-id14159 . -1)) nil (25767 5393 18260 649000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face org-block-end-line)) . 2721) (undo-tree-id14112 . -1) (undo-tree-id14113 . -1) (undo-tree-id14114 . -1) (undo-tree-id14115 . -1) (undo-tree-id14116 . -1) (undo-tree-id14117 . -1) (undo-tree-id14118 . -1) (undo-tree-id14119 . -1) (undo-tree-id14120 . -1) (undo-tree-id14121 . -1) (undo-tree-id14122 . -1)) nil (25767 5393 18220 548000) 0 nil])
([nil nil ((2549 . 2550)) nil (25767 5395 449179 368000) 0 nil])
([nil nil ((#("#+begin_src  python :result outputs
 n_steps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead dataset = dataset.window(window_length, shift=1, drop_remainder=True)
#+end_src 
" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 8 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 11 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 35 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 38 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 39 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 44 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 51 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 58 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 64 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 69 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 74 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 79 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 81 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 153 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 154 160 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 160 175 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 175 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 176 185 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 185 190 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 190 191 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 191 192 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 192 201 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 201 202 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 202 203 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t face org-block-end-line)) . 2530) (undo-tree-id19296 . -202) (undo-tree-id19297 . -192) (undo-tree-id19298 . 183) (undo-tree-id19299 . -203) (undo-tree-id19300 . -19) (undo-tree-id19301 . -192) (undo-tree-id19302 . -19) (undo-tree-id19303 . -19) (undo-tree-id19304 . -19) (undo-tree-id19305 . -19) (undo-tree-id19306 . -19) (undo-tree-id19307 . -19) (undo-tree-id19308 . -19) (undo-tree-id19309 . -19) (undo-tree-id19310 . -19) (undo-tree-id19311 . -19) (undo-tree-id19312 . -19) (undo-tree-id19313 . -19) (undo-tree-id19314 . -19) (undo-tree-id19315 . -19) (undo-tree-id19316 . -19) (undo-tree-id19317 . -19) (undo-tree-id19318 . -19) (undo-tree-id19319 . -19) (undo-tree-id19320 . -203) (undo-tree-id19321 . -192) (undo-tree-id19322 . -36) (undo-tree-id19323 . -36) (undo-tree-id19324 . -36) (undo-tree-id19325 . -36) (undo-tree-id19326 . -36) (undo-tree-id19327 . -36) (undo-tree-id19328 . -36) (undo-tree-id19329 . -36) (undo-tree-id19330 . -36) (undo-tree-id19331 . -36) (undo-tree-id19332 . -36) (undo-tree-id19333 . -36) (undo-tree-id19334 . -36) (undo-tree-id19335 . -36) (undo-tree-id19336 . -36) (undo-tree-id19337 . -36) (undo-tree-id19338 . -36) (undo-tree-id19339 . -36) (undo-tree-id19340 . -36) (undo-tree-id19341 . -36) (undo-tree-id19342 . -36) (undo-tree-id19343 . -36) (undo-tree-id19344 . -122) (undo-tree-id19345 . -122) (undo-tree-id19346 . -122) (undo-tree-id19347 . -122) (undo-tree-id19348 . -122) (undo-tree-id19349 . -122) (undo-tree-id19350 . -122) (undo-tree-id19351 . -122) (undo-tree-id19352 . -122) (undo-tree-id19353 . -122) (undo-tree-id19354 . -122) (undo-tree-id19355 . -122) (undo-tree-id19356 . -122) (undo-tree-id19357 . -122) (undo-tree-id19358 . -122) (undo-tree-id19359 . -122) (undo-tree-id19360 . -122) (undo-tree-id19361 . -122) (undo-tree-id19362 . -122) (undo-tree-id19363 . -122) (undo-tree-id19364 . -122) (undo-tree-id19365 . -122) (undo-tree-id19366 . -192) (undo-tree-id19367 . -192) (undo-tree-id19368 . -192) (undo-tree-id19369 . -192) (undo-tree-id19370 . -192) (undo-tree-id19371 . -192) (undo-tree-id19372 . -192) (undo-tree-id19373 . -192) (undo-tree-id19374 . -192) (undo-tree-id19375 . -203) 2722 (t 25767 5393 50400 579000)) nil (25767 5457 446953 359000) 0 nil] [nil nil ((#("#+begin_src  python :result outputs" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 8 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 11 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 2530) (undo-tree-id15782 . -34) (undo-tree-id15783 . 15) (undo-tree-id15784 . -19) (undo-tree-id15785 . -19) (undo-tree-id15786 . -19) (undo-tree-id15787 . -19) (undo-tree-id15788 . -19) (undo-tree-id15789 . -19) (undo-tree-id15790 . -19) (undo-tree-id15791 . -19) (undo-tree-id15792 . -19) (undo-tree-id15793 . -19) (undo-tree-id15794 . -19) (undo-tree-id15795 . -19) (undo-tree-id15796 . -19) (undo-tree-id15797 . -19) (undo-tree-id15798 . -19) (undo-tree-id15799 . -19) (undo-tree-id15800 . -19) (undo-tree-id15801 . -19) (undo-tree-id15802 . -19) (undo-tree-id15803 . -35) (undo-tree-id15804 . -35) (t 25767 5393 50400 579000)) ((2530 . 2565)) (25767 5395 448775 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3595 . 3596) (#("
" 0 1 (font-lock-fontified t face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3798) (3595 . 3799)) nil (25767 5457 446904 954000) 0 nil])
nil
([nil nil ((nil line-prefix #("  " 0 2 (face org-indent)) 2528 . 2529) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2528 . 2529) (nil fontified nil 2528 . 2529) (2528 . 2529) (#("  " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t)) . 2528) (undo-tree-id19007 . -1) (undo-tree-id19008 . 1) (undo-tree-id19009 . 1) (undo-tree-id19010 . -1) (undo-tree-id19011 . -1) (undo-tree-id19012 . -1) (undo-tree-id19013 . -1) (undo-tree-id19014 . -1) (undo-tree-id19015 . -1) (undo-tree-id19016 . -1) (undo-tree-id19017 . -1) (undo-tree-id19018 . -1) (undo-tree-id19019 . -1) (undo-tree-id19020 . -1) (undo-tree-id19021 . -1) (undo-tree-id19022 . -1) (undo-tree-id19023 . -1) (undo-tree-id19024 . -1) (undo-tree-id19025 . -1) (undo-tree-id19026 . -1) (undo-tree-id19027 . -1) (undo-tree-id19028 . -1) (undo-tree-id19029 . -1) (undo-tree-id19030 . -1) (undo-tree-id19031 . -1) (undo-tree-id19032 . -1) (undo-tree-id19033 . -1) (undo-tree-id19034 . -1) (undo-tree-id19035 . -1) (undo-tree-id19036 . -1) (undo-tree-id19037 . -1) (undo-tree-id19038 . -1) (undo-tree-id19039 . -1) (undo-tree-id19040 . -1) (undo-tree-id19041 . -1) (undo-tree-id19042 . -1) (undo-tree-id19043 . -1) (undo-tree-id19044 . -1) (undo-tree-id19045 . -1) (undo-tree-id19046 . -1) (undo-tree-id19047 . -1) (undo-tree-id19048 . -1) (undo-tree-id19049 . -1) (undo-tree-id19050 . -1) (undo-tree-id19051 . -1) (undo-tree-id19052 . -1) (undo-tree-id19053 . -1) (undo-tree-id19054 . -1) (undo-tree-id19055 . -1) (undo-tree-id19056 . -1) (undo-tree-id19057 . -1) (undo-tree-id19058 . -1) (undo-tree-id19059 . -1) (undo-tree-id19060 . -1) (undo-tree-id19061 . -1) (undo-tree-id19062 . -1) (undo-tree-id19063 . -1) (undo-tree-id19064 . -1) (undo-tree-id19065 . -1) (undo-tree-id19066 . -1) (undo-tree-id19067 . -1) (undo-tree-id19068 . -1) (undo-tree-id19069 . -1) (undo-tree-id19070 . -1) (undo-tree-id19071 . -1) (undo-tree-id19072 . -1) (undo-tree-id19073 . -1) (undo-tree-id19074 . -1) (undo-tree-id19075 . -1) (undo-tree-id19076 . -1) (undo-tree-id19077 . -1) (undo-tree-id19078 . -1) (undo-tree-id19079 . -1) (undo-tree-id19080 . -1) (undo-tree-id19081 . -1) (undo-tree-id19082 . -1) (undo-tree-id19083 . -1) (undo-tree-id19084 . -1) (undo-tree-id19085 . -1) (undo-tree-id19086 . -1) (undo-tree-id19087 . -1) (undo-tree-id19088 . -1) (undo-tree-id19089 . -1) (undo-tree-id19090 . -1) (undo-tree-id19091 . -1) (undo-tree-id19092 . -1) (undo-tree-id19093 . -1) (undo-tree-id19094 . -1) (undo-tree-id19095 . -1) (undo-tree-id19096 . -1) (undo-tree-id19097 . -1) (undo-tree-id19098 . -1) (undo-tree-id19099 . -1) (undo-tree-id19100 . -1) (undo-tree-id19101 . -1) (undo-tree-id19102 . -1) (undo-tree-id19103 . -1) (undo-tree-id19104 . -1) (undo-tree-id19105 . -1) (undo-tree-id19106 . -1) (undo-tree-id19107 . -1) (undo-tree-id19108 . -1) (undo-tree-id19109 . -1) (undo-tree-id19110 . -1) (undo-tree-id19111 . -1) (undo-tree-id19112 . -1) (undo-tree-id19113 . -1) (undo-tree-id19114 . -1) (undo-tree-id19115 . -1) (undo-tree-id19116 . -1) (undo-tree-id19117 . -1) (undo-tree-id19118 . -1) (undo-tree-id19119 . -1) (undo-tree-id19120 . -1) (undo-tree-id19121 . -1) (undo-tree-id19122 . -1) (undo-tree-id19123 . -1) (undo-tree-id19124 . -1) (undo-tree-id19125 . -1) (undo-tree-id19126 . -1) (undo-tree-id19127 . -1) (undo-tree-id19128 . -1) (undo-tree-id19129 . -1) (undo-tree-id19130 . -1) (undo-tree-id19131 . -1) (undo-tree-id19132 . -1) (undo-tree-id19133 . -1) (undo-tree-id19134 . -1) (undo-tree-id19135 . -1) (undo-tree-id19136 . -1) (undo-tree-id19137 . -1) (undo-tree-id19138 . -1) (undo-tree-id19139 . -1) (undo-tree-id19140 . -1) (undo-tree-id19141 . -1) (undo-tree-id19142 . -1) (undo-tree-id19143 . -1) (undo-tree-id19144 . -1) (undo-tree-id19145 . -1) (undo-tree-id19146 . -1) (undo-tree-id19147 . -1) (undo-tree-id19148 . -1) (undo-tree-id19149 . -1) (undo-tree-id19150 . -1) (undo-tree-id19151 . -1) (undo-tree-id19152 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2529) (undo-tree-id19153 . -1) (undo-tree-id19154 . -1) (undo-tree-id19155 . -1) (undo-tree-id19156 . -1) (undo-tree-id19157 . -1) (undo-tree-id19158 . -1) (undo-tree-id19159 . -1) (undo-tree-id19160 . -1) (undo-tree-id19161 . -1) (undo-tree-id19162 . -1) (undo-tree-id19163 . -1) (undo-tree-id19164 . -1) (undo-tree-id19165 . -1) (undo-tree-id19166 . -1) (undo-tree-id19167 . -1) (undo-tree-id19168 . -1) (undo-tree-id19169 . -1) (undo-tree-id19170 . -1) (undo-tree-id19171 . -1) (undo-tree-id19172 . -1) (undo-tree-id19173 . -1) (undo-tree-id19174 . -1) (undo-tree-id19175 . -1) (undo-tree-id19176 . -1) (undo-tree-id19177 . -1) (undo-tree-id19178 . -1) (undo-tree-id19179 . -1) (undo-tree-id19180 . -1) (undo-tree-id19181 . -1) (undo-tree-id19182 . -1) (undo-tree-id19183 . -1) (undo-tree-id19184 . -1) (undo-tree-id19185 . -1) (undo-tree-id19186 . -1) (undo-tree-id19187 . -1) (undo-tree-id19188 . -1) (undo-tree-id19189 . -1) (undo-tree-id19190 . -1) (undo-tree-id19191 . -1) (undo-tree-id19192 . -1) (undo-tree-id19193 . -1) (undo-tree-id19194 . -1) (undo-tree-id19195 . -1) (undo-tree-id19196 . -1) (undo-tree-id19197 . -1) (undo-tree-id19198 . -1) (undo-tree-id19199 . -1) (undo-tree-id19200 . -1) (undo-tree-id19201 . -1) (undo-tree-id19202 . -1) (undo-tree-id19203 . -1) (undo-tree-id19204 . -1) (undo-tree-id19205 . -1) (undo-tree-id19206 . -1) (undo-tree-id19207 . -1) (undo-tree-id19208 . -1) (undo-tree-id19209 . -1) (undo-tree-id19210 . -1) (undo-tree-id19211 . -1) (undo-tree-id19212 . -1) (undo-tree-id19213 . -1) (undo-tree-id19214 . -1) (undo-tree-id19215 . -1) (undo-tree-id19216 . -1) (undo-tree-id19217 . -1) (undo-tree-id19218 . -1) (undo-tree-id19219 . -1) (undo-tree-id19220 . -1) (undo-tree-id19221 . -1) (undo-tree-id19222 . -1) (undo-tree-id19223 . -1) (undo-tree-id19224 . -1) (undo-tree-id19225 . -1) (undo-tree-id19226 . -1) (undo-tree-id19227 . -1) (undo-tree-id19228 . -1) (undo-tree-id19229 . -1) (undo-tree-id19230 . -1) (undo-tree-id19231 . -1) (undo-tree-id19232 . -1) (undo-tree-id19233 . -1) (undo-tree-id19234 . -1) (undo-tree-id19235 . -1) (undo-tree-id19236 . -1) (undo-tree-id19237 . -1) (undo-tree-id19238 . -1) (undo-tree-id19239 . -1) (undo-tree-id19240 . -1) (undo-tree-id19241 . -1) (undo-tree-id19242 . -1) (undo-tree-id19243 . -1) (undo-tree-id19244 . -1) (undo-tree-id19245 . -1) (undo-tree-id19246 . -1) (undo-tree-id19247 . -1) (undo-tree-id19248 . -1) (undo-tree-id19249 . -1) (undo-tree-id19250 . -1) (undo-tree-id19251 . -1) (undo-tree-id19252 . -1) (undo-tree-id19253 . -1) (undo-tree-id19254 . -1) (undo-tree-id19255 . -1) (undo-tree-id19256 . -1) (undo-tree-id19257 . -1) (undo-tree-id19258 . -1) (undo-tree-id19259 . -1) (undo-tree-id19260 . -1) (undo-tree-id19261 . -1) (undo-tree-id19262 . -1) (undo-tree-id19263 . -1) (undo-tree-id19264 . -1) (undo-tree-id19265 . -1) (undo-tree-id19266 . -1) (undo-tree-id19267 . -1) (undo-tree-id19268 . -1) (undo-tree-id19269 . -1) (undo-tree-id19270 . -1) (undo-tree-id19271 . -1) (undo-tree-id19272 . -1) (undo-tree-id19273 . -1) (undo-tree-id19274 . -1) (undo-tree-id19275 . -1) (undo-tree-id19276 . -1) (undo-tree-id19277 . -1) (undo-tree-id19278 . -1) (undo-tree-id19279 . -1) (undo-tree-id19280 . -1) (undo-tree-id19281 . -1) (undo-tree-id19282 . -1) (undo-tree-id19283 . -1) (undo-tree-id19284 . -1) (undo-tree-id19285 . -1) (undo-tree-id19286 . -1) (undo-tree-id19287 . -1) (undo-tree-id19288 . -1) (undo-tree-id19289 . -1) (undo-tree-id19290 . -1) (undo-tree-id19291 . -1) (undo-tree-id19292 . -1) (undo-tree-id19293 . -1) (undo-tree-id19294 . -1) (undo-tree-id19295 . -1) 2527) nil (25767 5457 446895 346000) 0 nil])
([nil nil ((#("TIP You can try tuning n_steps : it is easier to train RNNs on shorter input sequences, but of course the RNN will not be able to learn any pattern longer than n_steps , so don’t make it too small. " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 4 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 24 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t invisible t) 25 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 30 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 57 87 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 87 88 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 88 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 141 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 142 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 143 145 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 145 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 147 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 148 161 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 161 162 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t invisible t) 162 167 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 167 172 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 172 173 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 173 179 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 179 197 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 197 198 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t)) . 2529) (undo-tree-id18019 . -197) (undo-tree-id18020 . -197) (undo-tree-id18021 . 198) (undo-tree-id18022 . -197) (undo-tree-id18023 . -155) (undo-tree-id18024 . -155) (undo-tree-id18025 . -155) (undo-tree-id18026 . -155) (undo-tree-id18027 . -155) (undo-tree-id18028 . -155) (undo-tree-id18029 . -155) (undo-tree-id18030 . -155) (undo-tree-id18031 . -77) (undo-tree-id18032 . -77) (undo-tree-id18033 . -77) (undo-tree-id18034 . -77) (undo-tree-id18035 . -77) (undo-tree-id18036 . -77) (undo-tree-id18037 . -77) (undo-tree-id18038 . -77) (undo-tree-id18039 . -198) (undo-tree-id18040 . -197) (undo-tree-id18041 . -2) (undo-tree-id18042 . -2) (undo-tree-id18043 . -2) (undo-tree-id18044 . -2) (undo-tree-id18045 . -2) (undo-tree-id18046 . -2) (undo-tree-id18047 . -2) (undo-tree-id18048 . -2) (undo-tree-id18049 . -2) (undo-tree-id18050 . -2) (undo-tree-id18051 . -2) (undo-tree-id18052 . -2) (undo-tree-id18053 . -2) (undo-tree-id18054 . -2) (undo-tree-id18055 . -2) (undo-tree-id18056 . -2) (undo-tree-id18057 . -2) (undo-tree-id18058 . -2) (undo-tree-id18059 . -2) (undo-tree-id18060 . -2) (undo-tree-id18061 . -2) (undo-tree-id18062 . -2) (undo-tree-id18063 . -2) (undo-tree-id18064 . -2) (undo-tree-id18065 . -2) (undo-tree-id18066 . -2) (undo-tree-id18067 . -2) (undo-tree-id18068 . -2) (undo-tree-id18069 . -2) (undo-tree-id18070 . -6) (undo-tree-id18071 . -6) (undo-tree-id18072 . -6) (undo-tree-id18073 . -6) (undo-tree-id18074 . -6) (undo-tree-id18075 . -6) (undo-tree-id18076 . -6) (undo-tree-id18077 . -6) (undo-tree-id18078 . -6) (undo-tree-id18079 . -6) (undo-tree-id18080 . -6) (undo-tree-id18081 . -6) (undo-tree-id18082 . -6) (undo-tree-id18083 . -6) (undo-tree-id18084 . -6) (undo-tree-id18085 . -6) (undo-tree-id18086 . -6) (undo-tree-id18087 . -6) (undo-tree-id18088 . -6) (undo-tree-id18089 . -6) (undo-tree-id18090 . -6) (undo-tree-id18091 . -6) (undo-tree-id18092 . -10) (undo-tree-id18093 . -10) (undo-tree-id18094 . -10) (undo-tree-id18095 . -10) (undo-tree-id18096 . -10) (undo-tree-id18097 . -10) (undo-tree-id18098 . -10) (undo-tree-id18099 . -10) (undo-tree-id18100 . -10) (undo-tree-id18101 . -10) (undo-tree-id18102 . -10) (undo-tree-id18103 . -10) (undo-tree-id18104 . -10) (undo-tree-id18105 . -10) (undo-tree-id18106 . -10) (undo-tree-id18107 . -10) (undo-tree-id18108 . -10) (undo-tree-id18109 . -10) (undo-tree-id18110 . -10) (undo-tree-id18111 . -10) (undo-tree-id18112 . -10) (undo-tree-id18113 . -10) (undo-tree-id18114 . -10) (undo-tree-id18115 . -10) (undo-tree-id18116 . -10) (undo-tree-id18117 . -10) (undo-tree-id18118 . -10) (undo-tree-id18119 . -10) (undo-tree-id18120 . -10) (undo-tree-id18121 . -10) (undo-tree-id18122 . -10) (undo-tree-id18123 . -10) (undo-tree-id18124 . -10) (undo-tree-id18125 . -10) (undo-tree-id18126 . -10) (undo-tree-id18127 . -10) (undo-tree-id18128 . -14) (undo-tree-id18129 . -14) (undo-tree-id18130 . -14) (undo-tree-id18131 . -14) (undo-tree-id18132 . -14) (undo-tree-id18133 . -14) (undo-tree-id18134 . -14) (undo-tree-id18135 . -14) (undo-tree-id18136 . -14) (undo-tree-id18137 . -14) (undo-tree-id18138 . -14) (undo-tree-id18139 . -14) (undo-tree-id18140 . -14) (undo-tree-id18141 . -14) (undo-tree-id18142 . -14) (undo-tree-id18143 . -14) (undo-tree-id18144 . -14) (undo-tree-id18145 . -14) (undo-tree-id18146 . -14) (undo-tree-id18147 . -14) (undo-tree-id18148 . -14) (undo-tree-id18149 . -14) (undo-tree-id18150 . -21) (undo-tree-id18151 . -21) (undo-tree-id18152 . -21) (undo-tree-id18153 . -21) (undo-tree-id18154 . -21) (undo-tree-id18155 . -21) (undo-tree-id18156 . -21) (undo-tree-id18157 . -21) (undo-tree-id18158 . -21) (undo-tree-id18159 . -21) (undo-tree-id18160 . -21) (undo-tree-id18161 . -21) (undo-tree-id18162 . -21) (undo-tree-id18163 . -21) (undo-tree-id18164 . -21) (undo-tree-id18165 . -21) (undo-tree-id18166 . -21) (undo-tree-id18167 . -21) (undo-tree-id18168 . -21) (undo-tree-id18169 . -21) (undo-tree-id18170 . -21) (undo-tree-id18171 . -21) (undo-tree-id18172 . -23) (undo-tree-id18173 . -23) (undo-tree-id18174 . -23) (undo-tree-id18175 . -23) (undo-tree-id18176 . -23) (undo-tree-id18177 . -23) (undo-tree-id18178 . -23) (undo-tree-id18179 . -23) (undo-tree-id18180 . -23) (undo-tree-id18181 . -23) (undo-tree-id18182 . -23) (undo-tree-id18183 . -23) (undo-tree-id18184 . -23) (undo-tree-id18185 . -23) (undo-tree-id18186 . -23) (undo-tree-id18187 . -23) (undo-tree-id18188 . -23) (undo-tree-id18189 . -23) (undo-tree-id18190 . -23) (undo-tree-id18191 . -23) (undo-tree-id18192 . -23) (undo-tree-id18193 . -23) (undo-tree-id18194 . -23) (undo-tree-id18195 . -23) (undo-tree-id18196 . -23) (undo-tree-id18197 . -23) (undo-tree-id18198 . -23) (undo-tree-id18199 . -23) (undo-tree-id18200 . -23) (undo-tree-id18201 . -23) (undo-tree-id18202 . -23) (undo-tree-id18203 . -23) (undo-tree-id18204 . -23) (undo-tree-id18205 . -23) (undo-tree-id18206 . -23) (undo-tree-id18207 . -23) (undo-tree-id18208 . -24) (undo-tree-id18209 . -24) (undo-tree-id18210 . -24) (undo-tree-id18211 . -24) (undo-tree-id18212 . -24) (undo-tree-id18213 . -24) (undo-tree-id18214 . -24) (undo-tree-id18215 . -24) (undo-tree-id18216 . -24) (undo-tree-id18217 . -24) (undo-tree-id18218 . -24) (undo-tree-id18219 . -24) (undo-tree-id18220 . -24) (undo-tree-id18221 . -24) (undo-tree-id18222 . -24) (undo-tree-id18223 . -24) (undo-tree-id18224 . -24) (undo-tree-id18225 . -24) (undo-tree-id18226 . -24) (undo-tree-id18227 . -24) (undo-tree-id18228 . -24) (undo-tree-id18229 . -24) (undo-tree-id18230 . -29) (undo-tree-id18231 . -29) (undo-tree-id18232 . -29) (undo-tree-id18233 . -29) (undo-tree-id18234 . -29) (undo-tree-id18235 . -29) (undo-tree-id18236 . -29) (undo-tree-id18237 . -29) (undo-tree-id18238 . -29) (undo-tree-id18239 . -29) (undo-tree-id18240 . -29) (undo-tree-id18241 . -29) (undo-tree-id18242 . -29) (undo-tree-id18243 . -29) (undo-tree-id18244 . -29) (undo-tree-id18245 . -29) (undo-tree-id18246 . -29) (undo-tree-id18247 . -29) (undo-tree-id18248 . -29) (undo-tree-id18249 . -29) (undo-tree-id18250 . -29) (undo-tree-id18251 . -29) (undo-tree-id18252 . -31) (undo-tree-id18253 . -31) (undo-tree-id18254 . -31) (undo-tree-id18255 . -31) (undo-tree-id18256 . -31) (undo-tree-id18257 . -31) (undo-tree-id18258 . -31) (undo-tree-id18259 . -31) (undo-tree-id18260 . -31) (undo-tree-id18261 . -31) (undo-tree-id18262 . -31) (undo-tree-id18263 . -31) (undo-tree-id18264 . -31) (undo-tree-id18265 . -31) (undo-tree-id18266 . -31) (undo-tree-id18267 . -31) (undo-tree-id18268 . -31) (undo-tree-id18269 . -31) (undo-tree-id18270 . -31) (undo-tree-id18271 . -31) (undo-tree-id18272 . -31) (undo-tree-id18273 . -31) (undo-tree-id18274 . -34) (undo-tree-id18275 . -34) (undo-tree-id18276 . -34) (undo-tree-id18277 . -34) (undo-tree-id18278 . -34) (undo-tree-id18279 . -34) (undo-tree-id18280 . -34) (undo-tree-id18281 . -34) (undo-tree-id18282 . -34) (undo-tree-id18283 . -34) (undo-tree-id18284 . -34) (undo-tree-id18285 . -34) (undo-tree-id18286 . -34) (undo-tree-id18287 . -34) (undo-tree-id18288 . -34) (undo-tree-id18289 . -34) (undo-tree-id18290 . -34) (undo-tree-id18291 . -34) (undo-tree-id18292 . -34) (undo-tree-id18293 . -34) (undo-tree-id18294 . -34) (undo-tree-id18295 . -34) (undo-tree-id18296 . -34) (undo-tree-id18297 . -34) (undo-tree-id18298 . -34) (undo-tree-id18299 . -34) (undo-tree-id18300 . -34) (undo-tree-id18301 . -34) (undo-tree-id18302 . -34) (undo-tree-id18303 . -37) (undo-tree-id18304 . -37) (undo-tree-id18305 . -37) (undo-tree-id18306 . -37) (undo-tree-id18307 . -37) (undo-tree-id18308 . -37) (undo-tree-id18309 . -37) (undo-tree-id18310 . -37) (undo-tree-id18311 . -37) (undo-tree-id18312 . -37) (undo-tree-id18313 . -37) (undo-tree-id18314 . -37) (undo-tree-id18315 . -37) (undo-tree-id18316 . -37) (undo-tree-id18317 . -37) (undo-tree-id18318 . -37) (undo-tree-id18319 . -37) (undo-tree-id18320 . -37) (undo-tree-id18321 . -37) (undo-tree-id18322 . -37) (undo-tree-id18323 . -37) (undo-tree-id18324 . -37) (undo-tree-id18325 . -44) (undo-tree-id18326 . -44) (undo-tree-id18327 . -44) (undo-tree-id18328 . -44) (undo-tree-id18329 . -44) (undo-tree-id18330 . -44) (undo-tree-id18331 . -44) (undo-tree-id18332 . -44) (undo-tree-id18333 . -44) (undo-tree-id18334 . -44) (undo-tree-id18335 . -44) (undo-tree-id18336 . -44) (undo-tree-id18337 . -44) (undo-tree-id18338 . -44) (undo-tree-id18339 . -44) (undo-tree-id18340 . -44) (undo-tree-id18341 . -44) (undo-tree-id18342 . -44) (undo-tree-id18343 . -44) (undo-tree-id18344 . -44) (undo-tree-id18345 . -44) (undo-tree-id18346 . -44) (undo-tree-id18347 . -47) (undo-tree-id18348 . -47) (undo-tree-id18349 . -47) (undo-tree-id18350 . -47) (undo-tree-id18351 . -47) (undo-tree-id18352 . -47) (undo-tree-id18353 . -47) (undo-tree-id18354 . -47) (undo-tree-id18355 . -47) (undo-tree-id18356 . -47) (undo-tree-id18357 . -47) (undo-tree-id18358 . -47) (undo-tree-id18359 . -47) (undo-tree-id18360 . -47) (undo-tree-id18361 . -47) (undo-tree-id18362 . -47) (undo-tree-id18363 . -47) (undo-tree-id18364 . -47) (undo-tree-id18365 . -47) (undo-tree-id18366 . -47) (undo-tree-id18367 . -47) (undo-tree-id18368 . -47) (undo-tree-id18369 . -53) (undo-tree-id18370 . -53) (undo-tree-id18371 . -53) (undo-tree-id18372 . -53) (undo-tree-id18373 . -53) (undo-tree-id18374 . -53) (undo-tree-id18375 . -53) (undo-tree-id18376 . -53) (undo-tree-id18377 . -53) (undo-tree-id18378 . -53) (undo-tree-id18379 . -53) (undo-tree-id18380 . -53) (undo-tree-id18381 . -53) (undo-tree-id18382 . -53) (undo-tree-id18383 . -53) (undo-tree-id18384 . -53) (undo-tree-id18385 . -53) (undo-tree-id18386 . -53) (undo-tree-id18387 . -53) (undo-tree-id18388 . -53) (undo-tree-id18389 . -53) (undo-tree-id18390 . -53) (undo-tree-id18391 . 143) (undo-tree-id18392 . -59) (undo-tree-id18393 . -58) (undo-tree-id18394 . -58) (undo-tree-id18395 . -58) (undo-tree-id18396 . -58) (undo-tree-id18397 . -58) (undo-tree-id18398 . -58) (undo-tree-id18399 . -58) (undo-tree-id18400 . -58) (undo-tree-id18401 . -58) (undo-tree-id18402 . -58) (undo-tree-id18403 . -58) (undo-tree-id18404 . -58) (undo-tree-id18405 . -58) (undo-tree-id18406 . -58) (undo-tree-id18407 . -58) (undo-tree-id18408 . -58) (undo-tree-id18409 . -58) (undo-tree-id18410 . -58) (undo-tree-id18411 . -58) (undo-tree-id18412 . -58) (undo-tree-id18413 . -58) (undo-tree-id18414 . -58) (undo-tree-id18415 . -61) (undo-tree-id18416 . -61) (undo-tree-id18417 . -61) (undo-tree-id18418 . -61) (undo-tree-id18419 . -61) (undo-tree-id18420 . -61) (undo-tree-id18421 . -61) (undo-tree-id18422 . -61) (undo-tree-id18423 . -61) (undo-tree-id18424 . -61) (undo-tree-id18425 . -61) (undo-tree-id18426 . -61) (undo-tree-id18427 . -61) (undo-tree-id18428 . -61) (undo-tree-id18429 . -61) (undo-tree-id18430 . -61) (undo-tree-id18431 . -61) (undo-tree-id18432 . -61) (undo-tree-id18433 . -61) (undo-tree-id18434 . -61) (undo-tree-id18435 . -61) (undo-tree-id18436 . -61) (undo-tree-id18437 . -61) (undo-tree-id18438 . -61) (undo-tree-id18439 . -61) (undo-tree-id18440 . -61) (undo-tree-id18441 . -61) (undo-tree-id18442 . -61) (undo-tree-id18443 . -61) (undo-tree-id18444 . -69) (undo-tree-id18445 . -69) (undo-tree-id18446 . -69) (undo-tree-id18447 . -69) (undo-tree-id18448 . -69) (undo-tree-id18449 . -69) (undo-tree-id18450 . -69) (undo-tree-id18451 . -69) (undo-tree-id18452 . -69) (undo-tree-id18453 . -69) (undo-tree-id18454 . -69) (undo-tree-id18455 . -69) (undo-tree-id18456 . -69) (undo-tree-id18457 . -69) (undo-tree-id18458 . -69) (undo-tree-id18459 . -69) (undo-tree-id18460 . -69) (undo-tree-id18461 . -69) (undo-tree-id18462 . -69) (undo-tree-id18463 . -69) (undo-tree-id18464 . -69) (undo-tree-id18465 . -69) (undo-tree-id18466 . -75) (undo-tree-id18467 . -75) (undo-tree-id18468 . -75) (undo-tree-id18469 . -75) (undo-tree-id18470 . -75) (undo-tree-id18471 . -75) (undo-tree-id18472 . -75) (undo-tree-id18473 . -75) (undo-tree-id18474 . -75) (undo-tree-id18475 . -75) (undo-tree-id18476 . -75) (undo-tree-id18477 . -75) (undo-tree-id18478 . -75) (undo-tree-id18479 . -75) (undo-tree-id18480 . -75) (undo-tree-id18481 . -75) (undo-tree-id18482 . -75) (undo-tree-id18483 . -75) (undo-tree-id18484 . -75) (undo-tree-id18485 . -75) (undo-tree-id18486 . -75) (undo-tree-id18487 . -75) (undo-tree-id18488 . -85) (undo-tree-id18489 . -85) (undo-tree-id18490 . -85) (undo-tree-id18491 . -85) (undo-tree-id18492 . -85) (undo-tree-id18493 . -85) (undo-tree-id18494 . -85) (undo-tree-id18495 . -85) (undo-tree-id18496 . -85) (undo-tree-id18497 . -85) (undo-tree-id18498 . -85) (undo-tree-id18499 . -85) (undo-tree-id18500 . -85) (undo-tree-id18501 . -85) (undo-tree-id18502 . -85) (undo-tree-id18503 . -85) (undo-tree-id18504 . -85) (undo-tree-id18505 . -85) (undo-tree-id18506 . -85) (undo-tree-id18507 . -85) (undo-tree-id18508 . -85) (undo-tree-id18509 . -85) (undo-tree-id18510 . -86) (undo-tree-id18511 . -86) (undo-tree-id18512 . -86) (undo-tree-id18513 . -86) (undo-tree-id18514 . -86) (undo-tree-id18515 . -86) (undo-tree-id18516 . -86) (undo-tree-id18517 . -86) (undo-tree-id18518 . -86) (undo-tree-id18519 . -86) (undo-tree-id18520 . -86) (undo-tree-id18521 . -86) (undo-tree-id18522 . -86) (undo-tree-id18523 . -86) (undo-tree-id18524 . -86) (undo-tree-id18525 . -86) (undo-tree-id18526 . -86) (undo-tree-id18527 . -86) (undo-tree-id18528 . -86) (undo-tree-id18529 . -86) (undo-tree-id18530 . -86) (undo-tree-id18531 . -86) (undo-tree-id18532 . -90) (undo-tree-id18533 . -90) (undo-tree-id18534 . -90) (undo-tree-id18535 . -90) (undo-tree-id18536 . -90) (undo-tree-id18537 . -90) (undo-tree-id18538 . -90) (undo-tree-id18539 . -90) (undo-tree-id18540 . -90) (undo-tree-id18541 . -90) (undo-tree-id18542 . -90) (undo-tree-id18543 . -90) (undo-tree-id18544 . -90) (undo-tree-id18545 . -90) (undo-tree-id18546 . -90) (undo-tree-id18547 . -90) (undo-tree-id18548 . -90) (undo-tree-id18549 . -90) (undo-tree-id18550 . -90) (undo-tree-id18551 . -90) (undo-tree-id18552 . -90) (undo-tree-id18553 . -90) (undo-tree-id18554 . -93) (undo-tree-id18555 . -93) (undo-tree-id18556 . -93) (undo-tree-id18557 . -93) (undo-tree-id18558 . -93) (undo-tree-id18559 . -93) (undo-tree-id18560 . -93) (undo-tree-id18561 . -93) (undo-tree-id18562 . -93) (undo-tree-id18563 . -93) (undo-tree-id18564 . -93) (undo-tree-id18565 . -93) (undo-tree-id18566 . -93) (undo-tree-id18567 . -93) (undo-tree-id18568 . -93) (undo-tree-id18569 . -93) (undo-tree-id18570 . -93) (undo-tree-id18571 . -93) (undo-tree-id18572 . -93) (undo-tree-id18573 . -93) (undo-tree-id18574 . -93) (undo-tree-id18575 . -93) (undo-tree-id18576 . -100) (undo-tree-id18577 . -100) (undo-tree-id18578 . -100) (undo-tree-id18579 . -100) (undo-tree-id18580 . -100) (undo-tree-id18581 . -100) (undo-tree-id18582 . -100) (undo-tree-id18583 . -100) (undo-tree-id18584 . -100) (undo-tree-id18585 . -100) (undo-tree-id18586 . -100) (undo-tree-id18587 . -100) (undo-tree-id18588 . -100) (undo-tree-id18589 . -100) (undo-tree-id18590 . -100) (undo-tree-id18591 . -100) (undo-tree-id18592 . -100) (undo-tree-id18593 . -100) (undo-tree-id18594 . -100) (undo-tree-id18595 . -100) (undo-tree-id18596 . -100) (undo-tree-id18597 . -100) (undo-tree-id18598 . -104) (undo-tree-id18599 . -104) (undo-tree-id18600 . -104) (undo-tree-id18601 . -104) (undo-tree-id18602 . -104) (undo-tree-id18603 . -104) (undo-tree-id18604 . -104) (undo-tree-id18605 . -104) (undo-tree-id18606 . -104) (undo-tree-id18607 . -104) (undo-tree-id18608 . -104) (undo-tree-id18609 . -104) (undo-tree-id18610 . -104) (undo-tree-id18611 . -104) (undo-tree-id18612 . -104) (undo-tree-id18613 . -104) (undo-tree-id18614 . -104) (undo-tree-id18615 . -104) (undo-tree-id18616 . -104) (undo-tree-id18617 . -104) (undo-tree-id18618 . -104) (undo-tree-id18619 . -104) (undo-tree-id18620 . 92) (undo-tree-id18621 . -109) (undo-tree-id18622 . -108) (undo-tree-id18623 . -108) (undo-tree-id18624 . -108) (undo-tree-id18625 . -108) (undo-tree-id18626 . -108) (undo-tree-id18627 . -108) (undo-tree-id18628 . -108) (undo-tree-id18629 . -108) (undo-tree-id18630 . -108) (undo-tree-id18631 . -108) (undo-tree-id18632 . -108) (undo-tree-id18633 . -108) (undo-tree-id18634 . -108) (undo-tree-id18635 . -108) (undo-tree-id18636 . -108) (undo-tree-id18637 . -108) (undo-tree-id18638 . -108) (undo-tree-id18639 . -108) (undo-tree-id18640 . -108) (undo-tree-id18641 . -108) (undo-tree-id18642 . -108) (undo-tree-id18643 . -108) (undo-tree-id18644 . -113) (undo-tree-id18645 . -113) (undo-tree-id18646 . -113) (undo-tree-id18647 . -113) (undo-tree-id18648 . -113) (undo-tree-id18649 . -113) (undo-tree-id18650 . -113) (undo-tree-id18651 . -113) (undo-tree-id18652 . -113) (undo-tree-id18653 . -113) (undo-tree-id18654 . -113) (undo-tree-id18655 . -113) (undo-tree-id18656 . -113) (undo-tree-id18657 . -113) (undo-tree-id18658 . -113) (undo-tree-id18659 . -113) (undo-tree-id18660 . -113) (undo-tree-id18661 . -113) (undo-tree-id18662 . -113) (undo-tree-id18663 . -113) (undo-tree-id18664 . -113) (undo-tree-id18665 . -113) (undo-tree-id18666 . -117) (undo-tree-id18667 . -117) (undo-tree-id18668 . -117) (undo-tree-id18669 . -117) (undo-tree-id18670 . -117) (undo-tree-id18671 . -117) (undo-tree-id18672 . -117) (undo-tree-id18673 . -117) (undo-tree-id18674 . -117) (undo-tree-id18675 . -117) (undo-tree-id18676 . -117) (undo-tree-id18677 . -117) (undo-tree-id18678 . -117) (undo-tree-id18679 . -117) (undo-tree-id18680 . -117) (undo-tree-id18681 . -117) (undo-tree-id18682 . -117) (undo-tree-id18683 . -117) (undo-tree-id18684 . -117) (undo-tree-id18685 . -117) (undo-tree-id18686 . -117) (undo-tree-id18687 . -117) (undo-tree-id18688 . -117) (undo-tree-id18689 . -117) (undo-tree-id18690 . -117) (undo-tree-id18691 . -117) (undo-tree-id18692 . -117) (undo-tree-id18693 . -117) (undo-tree-id18694 . -117) (undo-tree-id18695 . -120) (undo-tree-id18696 . -120) (undo-tree-id18697 . -120) (undo-tree-id18698 . -120) (undo-tree-id18699 . -120) (undo-tree-id18700 . -120) (undo-tree-id18701 . -120) (undo-tree-id18702 . -120) (undo-tree-id18703 . -125) (undo-tree-id18704 . -125) (undo-tree-id18705 . -125) (undo-tree-id18706 . -125) (undo-tree-id18707 . -125) (undo-tree-id18708 . -125) (undo-tree-id18709 . -125) (undo-tree-id18710 . -125) (undo-tree-id18711 . -128) (undo-tree-id18712 . -128) (undo-tree-id18713 . -128) (undo-tree-id18714 . -128) (undo-tree-id18715 . -128) (undo-tree-id18716 . -128) (undo-tree-id18717 . -128) (undo-tree-id18718 . -128) (undo-tree-id18719 . -134) (undo-tree-id18720 . -134) (undo-tree-id18721 . -134) (undo-tree-id18722 . -134) (undo-tree-id18723 . -134) (undo-tree-id18724 . -134) (undo-tree-id18725 . -134) (undo-tree-id18726 . -134) (undo-tree-id18727 . -138) (undo-tree-id18728 . -138) (undo-tree-id18729 . -138) (undo-tree-id18730 . -138) (undo-tree-id18731 . -138) (undo-tree-id18732 . -138) (undo-tree-id18733 . -138) (undo-tree-id18734 . -138) (undo-tree-id18735 . -146) (undo-tree-id18736 . -146) (undo-tree-id18737 . -146) (undo-tree-id18738 . -146) (undo-tree-id18739 . -146) (undo-tree-id18740 . -146) (undo-tree-id18741 . -146) (undo-tree-id18742 . -146) (undo-tree-id18743 . -153) (undo-tree-id18744 . -153) (undo-tree-id18745 . -153) (undo-tree-id18746 . -153) (undo-tree-id18747 . -153) (undo-tree-id18748 . -153) (undo-tree-id18749 . -153) (undo-tree-id18750 . -153) (undo-tree-id18751 . -158) (undo-tree-id18752 . -158) (undo-tree-id18753 . -158) (undo-tree-id18754 . -158) (undo-tree-id18755 . -158) (undo-tree-id18756 . -158) (undo-tree-id18757 . -158) (undo-tree-id18758 . -158) (undo-tree-id18759 . -160) (undo-tree-id18760 . -160) (undo-tree-id18761 . -160) (undo-tree-id18762 . -160) (undo-tree-id18763 . -160) (undo-tree-id18764 . -160) (undo-tree-id18765 . -160) (undo-tree-id18766 . -160) (undo-tree-id18767 . -161) (undo-tree-id18768 . -161) (undo-tree-id18769 . -161) (undo-tree-id18770 . -161) (undo-tree-id18771 . -161) (undo-tree-id18772 . -161) (undo-tree-id18773 . -161) (undo-tree-id18774 . -161) (undo-tree-id18775 . -161) (undo-tree-id18776 . -161) (undo-tree-id18777 . -161) (undo-tree-id18778 . -161) (undo-tree-id18779 . -161) (undo-tree-id18780 . -161) (undo-tree-id18781 . -161) (undo-tree-id18782 . -161) (undo-tree-id18783 . -161) (undo-tree-id18784 . -161) (undo-tree-id18785 . -161) (undo-tree-id18786 . -161) (undo-tree-id18787 . -161) (undo-tree-id18788 . -161) (undo-tree-id18789 . -166) (undo-tree-id18790 . -166) (undo-tree-id18791 . -166) (undo-tree-id18792 . -166) (undo-tree-id18793 . -166) (undo-tree-id18794 . -166) (undo-tree-id18795 . -166) (undo-tree-id18796 . -166) (undo-tree-id18797 . -166) (undo-tree-id18798 . -166) (undo-tree-id18799 . -166) (undo-tree-id18800 . -166) (undo-tree-id18801 . -166) (undo-tree-id18802 . -166) (undo-tree-id18803 . -166) (undo-tree-id18804 . -166) (undo-tree-id18805 . -166) (undo-tree-id18806 . -166) (undo-tree-id18807 . -166) (undo-tree-id18808 . -166) (undo-tree-id18809 . -166) (undo-tree-id18810 . -166) (undo-tree-id18811 . -168) (undo-tree-id18812 . -168) (undo-tree-id18813 . -168) (undo-tree-id18814 . -168) (undo-tree-id18815 . -168) (undo-tree-id18816 . -168) (undo-tree-id18817 . -168) (undo-tree-id18818 . -168) (undo-tree-id18819 . -168) (undo-tree-id18820 . -168) (undo-tree-id18821 . -168) (undo-tree-id18822 . -168) (undo-tree-id18823 . -168) (undo-tree-id18824 . -168) (undo-tree-id18825 . -168) (undo-tree-id18826 . -168) (undo-tree-id18827 . -168) (undo-tree-id18828 . -168) (undo-tree-id18829 . -168) (undo-tree-id18830 . -168) (undo-tree-id18831 . -168) (undo-tree-id18832 . -168) (undo-tree-id18833 . -171) (undo-tree-id18834 . -171) (undo-tree-id18835 . -171) (undo-tree-id18836 . -171) (undo-tree-id18837 . -171) (undo-tree-id18838 . -171) (undo-tree-id18839 . -171) (undo-tree-id18840 . -171) (undo-tree-id18841 . -171) (undo-tree-id18842 . -171) (undo-tree-id18843 . -171) (undo-tree-id18844 . -171) (undo-tree-id18845 . -171) (undo-tree-id18846 . -171) (undo-tree-id18847 . -171) (undo-tree-id18848 . -171) (undo-tree-id18849 . -171) (undo-tree-id18850 . -171) (undo-tree-id18851 . -171) (undo-tree-id18852 . -171) (undo-tree-id18853 . -171) (undo-tree-id18854 . -171) (undo-tree-id18855 . -175) (undo-tree-id18856 . -175) (undo-tree-id18857 . -175) (undo-tree-id18858 . -175) (undo-tree-id18859 . -175) (undo-tree-id18860 . -175) (undo-tree-id18861 . -175) (undo-tree-id18862 . -175) (undo-tree-id18863 . -175) (undo-tree-id18864 . -175) (undo-tree-id18865 . -175) (undo-tree-id18866 . -175) (undo-tree-id18867 . -175) (undo-tree-id18868 . -175) (undo-tree-id18869 . -175) (undo-tree-id18870 . -175) (undo-tree-id18871 . -175) (undo-tree-id18872 . -175) (undo-tree-id18873 . -175) (undo-tree-id18874 . -175) (undo-tree-id18875 . -175) (undo-tree-id18876 . -175) (undo-tree-id18877 . -176) (undo-tree-id18878 . -176) (undo-tree-id18879 . -176) (undo-tree-id18880 . -176) (undo-tree-id18881 . -176) (undo-tree-id18882 . -176) (undo-tree-id18883 . -176) (undo-tree-id18884 . -176) (undo-tree-id18885 . -177) (undo-tree-id18886 . -177) (undo-tree-id18887 . -177) (undo-tree-id18888 . -177) (undo-tree-id18889 . -177) (undo-tree-id18890 . -177) (undo-tree-id18891 . -177) (undo-tree-id18892 . -177) (undo-tree-id18893 . -182) (undo-tree-id18894 . -182) (undo-tree-id18895 . -182) (undo-tree-id18896 . -182) (undo-tree-id18897 . -182) (undo-tree-id18898 . -182) (undo-tree-id18899 . -182) (undo-tree-id18900 . -182) (undo-tree-id18901 . -185) (undo-tree-id18902 . -185) (undo-tree-id18903 . -185) (undo-tree-id18904 . -185) (undo-tree-id18905 . -185) (undo-tree-id18906 . -185) (undo-tree-id18907 . -185) (undo-tree-id18908 . -185) (undo-tree-id18909 . -189) (undo-tree-id18910 . -189) (undo-tree-id18911 . -189) (undo-tree-id18912 . -189) (undo-tree-id18913 . -189) (undo-tree-id18914 . -189) (undo-tree-id18915 . -189) (undo-tree-id18916 . -189) (undo-tree-id18917 . -195) (undo-tree-id18918 . -195) (undo-tree-id18919 . -195) (undo-tree-id18920 . -195) (undo-tree-id18921 . -195) (undo-tree-id18922 . -195) (undo-tree-id18923 . -195) (undo-tree-id18924 . -195) (undo-tree-id18925 . -196) (undo-tree-id18926 . -196) (undo-tree-id18927 . -196) (undo-tree-id18928 . -196) (undo-tree-id18929 . -196) (undo-tree-id18930 . -196) (undo-tree-id18931 . -196) (undo-tree-id18932 . -196) (undo-tree-id18933 . -196) (undo-tree-id18934 . -196) (undo-tree-id18935 . -196) (undo-tree-id18936 . -196) (undo-tree-id18937 . -196) (undo-tree-id18938 . -196) (undo-tree-id18939 . -196) (undo-tree-id18940 . -196) (undo-tree-id18941 . -196) (undo-tree-id18942 . -196) (undo-tree-id18943 . -196) (undo-tree-id18944 . -196) (undo-tree-id18945 . -196) (undo-tree-id18946 . -196) (undo-tree-id18947 . -198) (undo-tree-id18948 . -198) (undo-tree-id18949 . -198) (undo-tree-id18950 . -198) (undo-tree-id18951 . -198) (undo-tree-id18952 . -198) (undo-tree-id18953 . -198) (undo-tree-id18954 . -198) (undo-tree-id18955 . -198) (undo-tree-id18956 . -198) (undo-tree-id18957 . -198) (undo-tree-id18958 . -198) (undo-tree-id18959 . -198) (undo-tree-id18960 . -198) (undo-tree-id18961 . -198) (undo-tree-id18962 . -198) (undo-tree-id18963 . -198) (undo-tree-id18964 . -198) (undo-tree-id18965 . -198) (undo-tree-id18966 . -198) (undo-tree-id18967 . -198) (undo-tree-id18968 . -198) (undo-tree-id18969 . -197) (undo-tree-id18970 . -197) (undo-tree-id18971 . -197) (undo-tree-id18972 . -197) (undo-tree-id18973 . -197) (undo-tree-id18974 . -197) (undo-tree-id18975 . -197) (undo-tree-id18976 . -197) (undo-tree-id18977 . -197) (undo-tree-id18978 . -197) (undo-tree-id18979 . -197) (undo-tree-id18980 . -197) (undo-tree-id18981 . -197) (undo-tree-id18982 . -197) (undo-tree-id18983 . -197) (undo-tree-id18984 . -197) (undo-tree-id18985 . -197) (undo-tree-id18986 . -197) (undo-tree-id18987 . -197) (undo-tree-id18988 . -197) (undo-tree-id18989 . -197) (undo-tree-id18990 . -197) (undo-tree-id18991 . -197) (undo-tree-id18992 . -197) (undo-tree-id18993 . -197) (undo-tree-id18994 . -197) (undo-tree-id18995 . -197) (undo-tree-id18996 . -197) (undo-tree-id18997 . -197) (undo-tree-id18998 . -197) (undo-tree-id18999 . -197) (undo-tree-id19000 . -197) (undo-tree-id19001 . -197) (undo-tree-id19002 . -197) (undo-tree-id19003 . -197) (undo-tree-id19004 . -197) (undo-tree-id19005 . -197) (undo-tree-id19006 . -198) 2726) nil (25767 5457 446692 372000) 0 nil])
([nil nil ((2591 . 2592) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2591) (undo-tree-id18001 . -1) (undo-tree-id18002 . -1) (undo-tree-id18003 . -1) (undo-tree-id18004 . -1) (undo-tree-id18005 . -1) (undo-tree-id18006 . -1) (undo-tree-id18007 . -1) (undo-tree-id18008 . -1) (undo-tree-id18009 . -1) (undo-tree-id18010 . -1) (undo-tree-id18011 . -1) (undo-tree-id18012 . -1) (undo-tree-id18013 . -1) (undo-tree-id18014 . -1) (undo-tree-id18015 . -1) (undo-tree-id18016 . -1) (undo-tree-id18017 . -1) (undo-tree-id18018 . -1)) nil (25767 5457 446125 318000) 0 nil])
([nil nil ((2527 . 3396) (#("- but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will
- By default, the window() method creates nonoverlapping windows." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 8 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 8 9 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 9 42 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 79 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 79 80 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 80 82 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 82 83 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 84 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 84 152 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 152 153 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 153 227 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 227 228 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 228 238 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 238 301 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 301 302 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 302 313 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 313 314 (invisible t font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 314 323 (display ((raise -0.3) (height 0.7)) font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 323 365 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 365 366 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 366 436 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 436 437 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 437 438 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 438 505 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 505 506 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 506 583 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 583 584 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 584 655 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 655 656 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 656 731 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 731 732 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 732 802 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 802 803 (font-lock-fontified t rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 803 804 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 804 805 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 805 806 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 806 820 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t) 820 869 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t)) . 2527) (undo-tree-id15805 . -868) (undo-tree-id15806 . -868) (undo-tree-id15807 . -806) (undo-tree-id15808 . -806) (undo-tree-id15809 . 63) (undo-tree-id15810 . -805) (undo-tree-id15811 . -805) (undo-tree-id15812 . -869) (undo-tree-id15813 . -805) (undo-tree-id15814 . -805) (undo-tree-id15815 . -805) (undo-tree-id15816 . -805) (undo-tree-id15817 . -805) (undo-tree-id15818 . -805) (undo-tree-id15819 . -805) (undo-tree-id15820 . -805) (undo-tree-id15821 . -805) (undo-tree-id15822 . -805) (undo-tree-id15823 . -805) (undo-tree-id15824 . -805) (undo-tree-id15825 . -805) (undo-tree-id15826 . -805) (undo-tree-id15827 . -805) (undo-tree-id15828 . -805) (undo-tree-id15829 . -805) (undo-tree-id15830 . -805) (undo-tree-id15831 . -805) (undo-tree-id15832 . -805) (undo-tree-id15833 . -805) (undo-tree-id15834 . -805) (undo-tree-id15835 . -805) (undo-tree-id15836 . -805) (undo-tree-id15837 . -805) (undo-tree-id15838 . -805) (undo-tree-id15839 . -805) (undo-tree-id15840 . -805) (undo-tree-id15841 . -805) (undo-tree-id15842 . -805) (undo-tree-id15843 . -805) (undo-tree-id15844 . -805) (undo-tree-id15845 . -805) (undo-tree-id15846 . -805) (undo-tree-id15847 . -805) (undo-tree-id15848 . -805) (undo-tree-id15849 . -805) (undo-tree-id15850 . -805) (undo-tree-id15851 . -805) (undo-tree-id15852 . -805) (undo-tree-id15853 . -805) (undo-tree-id15854 . -805) (undo-tree-id15855 . -805) (undo-tree-id15856 . -805) (undo-tree-id15857 . -805) (undo-tree-id15858 . -805) (undo-tree-id15859 . -805) (undo-tree-id15860 . -805) (undo-tree-id15861 . -805) (undo-tree-id15862 . -805) (undo-tree-id15863 . -805) (undo-tree-id15864 . -805) (undo-tree-id15865 . -805) (undo-tree-id15866 . -805) (undo-tree-id15867 . -805) (undo-tree-id15868 . -805) (undo-tree-id15869 . -805) (undo-tree-id15870 . -805) (undo-tree-id15871 . -805) (undo-tree-id15872 . -805) (undo-tree-id15873 . -805) (undo-tree-id15874 . -805) (undo-tree-id15875 . -805) (undo-tree-id15876 . -805) (undo-tree-id15877 . -805) (undo-tree-id15878 . -805) (undo-tree-id15879 . -805) (undo-tree-id15880 . -805) (undo-tree-id15881 . -805) (undo-tree-id15882 . -805) (undo-tree-id15883 . -805) (undo-tree-id15884 . -805) (undo-tree-id15885 . -805) (undo-tree-id15886 . -805) (undo-tree-id15887 . -805) (undo-tree-id15888 . -805) (undo-tree-id15889 . -805) (undo-tree-id15890 . -805) (undo-tree-id15891 . -805) (undo-tree-id15892 . -805) (undo-tree-id15893 . -805) (undo-tree-id15894 . -805) (undo-tree-id15895 . -805) (undo-tree-id15896 . -805) (undo-tree-id15897 . -805) (undo-tree-id15898 . -805) (undo-tree-id15899 . -805) (undo-tree-id15900 . -805) (undo-tree-id15901 . -805) (undo-tree-id15902 . -805) (undo-tree-id15903 . -805) (undo-tree-id15904 . -805) (undo-tree-id15905 . -805) (undo-tree-id15906 . -805) (undo-tree-id15907 . -805) (undo-tree-id15908 . -805) (undo-tree-id15909 . -805) (undo-tree-id15910 . -805) (undo-tree-id15911 . -805) (undo-tree-id15912 . -805) (undo-tree-id15913 . -805) (undo-tree-id15914 . -805) (undo-tree-id15915 . -805) (undo-tree-id15916 . -805) (undo-tree-id15917 . -805) (undo-tree-id15918 . -805) (undo-tree-id15919 . -805) (undo-tree-id15920 . -805) (undo-tree-id15921 . -805) (undo-tree-id15922 . -805) (undo-tree-id15923 . -805) (undo-tree-id15924 . -805) (undo-tree-id15925 . -805) (undo-tree-id15926 . -805) (undo-tree-id15927 . -805) (undo-tree-id15928 . -805) (undo-tree-id15929 . -805) (undo-tree-id15930 . -805) (undo-tree-id15931 . -805) (undo-tree-id15932 . -805) (undo-tree-id15933 . -805) (undo-tree-id15934 . -805) (undo-tree-id15935 . -805) (undo-tree-id15936 . -805) (undo-tree-id15937 . -869) (undo-tree-id15938 . -869) (undo-tree-id15939 . -869) (undo-tree-id15940 . -869) (undo-tree-id15941 . -869) (undo-tree-id15942 . -869) (undo-tree-id15943 . -869) (undo-tree-id15944 . -869) (undo-tree-id15945 . -869) (undo-tree-id15946 . -869) (undo-tree-id15947 . -869) (undo-tree-id15948 . -869) (undo-tree-id15949 . -869) (undo-tree-id15950 . -869) (undo-tree-id15951 . -869) (undo-tree-id15952 . -869) (undo-tree-id15953 . -869) (undo-tree-id15954 . -869) (undo-tree-id15955 . -869) (undo-tree-id15956 . -869) (undo-tree-id15957 . -869) (undo-tree-id15958 . -869) (undo-tree-id15959 . -869) (undo-tree-id15960 . -869) (undo-tree-id15961 . -869) (undo-tree-id15962 . -869) (undo-tree-id15963 . -869) (undo-tree-id15964 . -869) (undo-tree-id15965 . -869) (undo-tree-id15966 . -869) (undo-tree-id15967 . -869) (undo-tree-id15968 . -869) (undo-tree-id15969 . -869) (undo-tree-id15970 . -869) (undo-tree-id15971 . -869) (undo-tree-id15972 . -869) (undo-tree-id15973 . -869) (undo-tree-id15974 . -869) (undo-tree-id15975 . -869) (undo-tree-id15976 . -869) (undo-tree-id15977 . -869) (undo-tree-id15978 . -869) (undo-tree-id15979 . -869) (undo-tree-id15980 . -869) (undo-tree-id15981 . -869) (undo-tree-id15982 . -869) (undo-tree-id15983 . -869) (undo-tree-id15984 . -869) (undo-tree-id15985 . -869) (undo-tree-id15986 . -869) (undo-tree-id15987 . -869) (undo-tree-id15988 . -869) (undo-tree-id15989 . -869) (undo-tree-id15990 . -869) (undo-tree-id15991 . -869) (undo-tree-id15992 . -869) (undo-tree-id15993 . -869) (undo-tree-id15994 . -869) (undo-tree-id15995 . -869) (undo-tree-id15996 . -869) (undo-tree-id15997 . -869) (undo-tree-id15998 . -869) (undo-tree-id15999 . -869) (undo-tree-id16000 . -869) (undo-tree-id16001 . -869) (undo-tree-id16002 . -869) (undo-tree-id16003 . -869) (undo-tree-id16004 . -869) (undo-tree-id16005 . -869) (undo-tree-id16006 . -869) (undo-tree-id16007 . -869) (undo-tree-id16008 . -869) (undo-tree-id16009 . -869) (undo-tree-id16010 . -869) (undo-tree-id16011 . -869) (undo-tree-id16012 . -869) (undo-tree-id16013 . -869) (undo-tree-id16014 . -869) (undo-tree-id16015 . -869) (undo-tree-id16016 . -869) (undo-tree-id16017 . -869) (undo-tree-id16018 . -869) (undo-tree-id16019 . -869) (undo-tree-id16020 . -869) (undo-tree-id16021 . -869) (undo-tree-id16022 . -869) (undo-tree-id16023 . -869) (undo-tree-id16024 . -846) (undo-tree-id16025 . -846) (undo-tree-id16026 . -846) (undo-tree-id16027 . -846) (undo-tree-id16028 . -846) (undo-tree-id16029 . -846) (undo-tree-id16030 . -846) (undo-tree-id16031 . -846) (undo-tree-id16032 . -806) (undo-tree-id16033 . -806) (undo-tree-id16034 . -806) (undo-tree-id16035 . -806) (undo-tree-id16036 . -806) (undo-tree-id16037 . -806) (undo-tree-id16038 . -806) (undo-tree-id16039 . -806) (undo-tree-id16040 . -806) (undo-tree-id16041 . -806) (undo-tree-id16042 . -806) (undo-tree-id16043 . -806) (undo-tree-id16044 . -806) (undo-tree-id16045 . -806) (undo-tree-id16046 . -806) (undo-tree-id16047 . -806) (undo-tree-id16048 . -805) (undo-tree-id16049 . -805) (undo-tree-id16050 . -805) (undo-tree-id16051 . -805) (undo-tree-id16052 . -805) (undo-tree-id16053 . -805) (undo-tree-id16054 . -805) (undo-tree-id16055 . -805) (undo-tree-id16056 . -805) (undo-tree-id16057 . -805) (undo-tree-id16058 . -805) (undo-tree-id16059 . -805) (undo-tree-id16060 . -805) (undo-tree-id16061 . -805) (undo-tree-id16062 . -805) (undo-tree-id16063 . -805) (undo-tree-id16064 . -805) (undo-tree-id16065 . -805) (undo-tree-id16066 . -805) (undo-tree-id16067 . -805) (undo-tree-id16068 . -805) (undo-tree-id16069 . -805) (undo-tree-id16070 . -805) (undo-tree-id16071 . -805) (undo-tree-id16072 . -805) (undo-tree-id16073 . -805) (undo-tree-id16074 . -805) (undo-tree-id16075 . -805) (undo-tree-id16076 . -805) (undo-tree-id16077 . -805) (undo-tree-id16078 . -805) (undo-tree-id16079 . -806) (undo-tree-id16080 . -806) (undo-tree-id16081 . -806) (undo-tree-id16082 . -806) (undo-tree-id16083 . -806) (undo-tree-id16084 . -806) (undo-tree-id16085 . -806) (undo-tree-id16086 . -806) (undo-tree-id16087 . -806) (undo-tree-id16088 . -806) (undo-tree-id16089 . -806) (undo-tree-id16090 . -806) (undo-tree-id16091 . -806) (undo-tree-id16092 . -806) (undo-tree-id16093 . -806) (undo-tree-id16094 . -806) (undo-tree-id16095 . -806) (undo-tree-id16096 . -806) (undo-tree-id16097 . -806) (undo-tree-id16098 . -806) (undo-tree-id16099 . -806) (undo-tree-id16100 . -806) (undo-tree-id16101 . -806) (undo-tree-id16102 . -806) (undo-tree-id16103 . -806) (undo-tree-id16104 . -806) (undo-tree-id16105 . -806) (undo-tree-id16106 . -806) (undo-tree-id16107 . -806) (undo-tree-id16108 . -806) (undo-tree-id16109 . -806) (undo-tree-id16110 . -806) (undo-tree-id16111 . -806) (undo-tree-id16112 . -806) (undo-tree-id16113 . -806) (undo-tree-id16114 . -806) (undo-tree-id16115 . -806) (undo-tree-id16116 . -806) (undo-tree-id16117 . -806) (undo-tree-id16118 . -806) (undo-tree-id16119 . -806) (undo-tree-id16120 . -806) (undo-tree-id16121 . -806) (undo-tree-id16122 . -806) (undo-tree-id16123 . -806) (undo-tree-id16124 . -806) (undo-tree-id16125 . -806) (undo-tree-id16126 . -806) (undo-tree-id16127 . -806) (undo-tree-id16128 . -806) (undo-tree-id16129 . -806) (undo-tree-id16130 . -806) (undo-tree-id16131 . -806) (undo-tree-id16132 . -806) (undo-tree-id16133 . -806) (undo-tree-id16134 . -806) (undo-tree-id16135 . -806) (undo-tree-id16136 . -806) (undo-tree-id16137 . -806) (undo-tree-id16138 . -806) (undo-tree-id16139 . -806) (undo-tree-id16140 . -806) (undo-tree-id16141 . -806) (undo-tree-id16142 . -806) (undo-tree-id16143 . -806) (undo-tree-id16144 . -806) (undo-tree-id16145 . -806) (undo-tree-id16146 . -806) (undo-tree-id16147 . -806) (undo-tree-id16148 . -806) (undo-tree-id16149 . -806) (undo-tree-id16150 . -806) (undo-tree-id16151 . -806) (undo-tree-id16152 . -806) (undo-tree-id16153 . -806) (undo-tree-id16154 . -806) (undo-tree-id16155 . -806) (undo-tree-id16156 . -806) (undo-tree-id16157 . -806) (undo-tree-id16158 . -806) (undo-tree-id16159 . -806) (undo-tree-id16160 . -806) (undo-tree-id16161 . -806) (undo-tree-id16162 . -806) (undo-tree-id16163 . -806) (undo-tree-id16164 . -806) (undo-tree-id16165 . -806) (undo-tree-id16166 . -806) (undo-tree-id16167 . -806) (undo-tree-id16168 . -806) (undo-tree-id16169 . -806) (undo-tree-id16170 . -806) (undo-tree-id16171 . -806) (undo-tree-id16172 . -806) (undo-tree-id16173 . -806) (undo-tree-id16174 . -806) (undo-tree-id16175 . -806) (undo-tree-id16176 . -806) (undo-tree-id16177 . -806) (undo-tree-id16178 . -806) (undo-tree-id16179 . -806) (undo-tree-id16180 . -806) (undo-tree-id16181 . -806) (undo-tree-id16182 . -806) (undo-tree-id16183 . -806) (undo-tree-id16184 . -806) (undo-tree-id16185 . -806) (undo-tree-id16186 . -806) (undo-tree-id16187 . -806) (undo-tree-id16188 . -806) (undo-tree-id16189 . -806) (undo-tree-id16190 . -806) (undo-tree-id16191 . -806) (undo-tree-id16192 . -806) (undo-tree-id16193 . -806) (undo-tree-id16194 . -806) (undo-tree-id16195 . -806) (undo-tree-id16196 . -806) (undo-tree-id16197 . -806) (undo-tree-id16198 . -806) (undo-tree-id16199 . -806) (undo-tree-id16200 . -806) (undo-tree-id16201 . -806) (undo-tree-id16202 . -806) (undo-tree-id16203 . -806) (undo-tree-id16204 . -806) (undo-tree-id16205 . -806) (undo-tree-id16206 . -806) (undo-tree-id16207 . -806) (undo-tree-id16208 . -806) (undo-tree-id16209 . -806) (undo-tree-id16210 . -806) (undo-tree-id16211 . -806) (undo-tree-id16212 . -806) (undo-tree-id16213 . -806) (undo-tree-id16214 . -806) (undo-tree-id16215 . -806) (undo-tree-id16216 . -806) (undo-tree-id16217 . -806) (undo-tree-id16218 . -806) (undo-tree-id16219 . -806) (undo-tree-id16220 . -806) (undo-tree-id16221 . -806) (undo-tree-id16222 . -806) (undo-tree-id16223 . -806) (undo-tree-id16224 . -806) (undo-tree-id16225 . -806) (undo-tree-id16226 . -806) (undo-tree-id16227 . -806) (undo-tree-id16228 . -806) (undo-tree-id16229 . -806) (undo-tree-id16230 . -806) (undo-tree-id16231 . -806) (undo-tree-id16232 . -806) (undo-tree-id16233 . -806) (undo-tree-id16234 . -806) (undo-tree-id16235 . -806) (undo-tree-id16236 . -806) (undo-tree-id16237 . -806) (undo-tree-id16238 . -806) (undo-tree-id16239 . -806) (undo-tree-id16240 . -806) (undo-tree-id16241 . -806) (undo-tree-id16242 . -806) (undo-tree-id16243 . -806) (undo-tree-id16244 . -806) (undo-tree-id16245 . -806) (undo-tree-id16246 . -806) (undo-tree-id16247 . -806) (undo-tree-id16248 . -806) (undo-tree-id16249 . -806) (undo-tree-id16250 . -806) (undo-tree-id16251 . -806) (undo-tree-id16252 . -806) (undo-tree-id16253 . -806) (undo-tree-id16254 . -806) (undo-tree-id16255 . -806) (undo-tree-id16256 . -806) (undo-tree-id16257 . -806) (undo-tree-id16258 . -806) (undo-tree-id16259 . -806) (undo-tree-id16260 . -806) (undo-tree-id16261 . -806) (undo-tree-id16262 . -806) (undo-tree-id16263 . -806) (undo-tree-id16264 . -806) (undo-tree-id16265 . -806) (undo-tree-id16266 . -806) (undo-tree-id16267 . -806) (undo-tree-id16268 . -806) (undo-tree-id16269 . -806) (undo-tree-id16270 . -806) (undo-tree-id16271 . -806) (undo-tree-id16272 . -806) (undo-tree-id16273 . -806) (undo-tree-id16274 . -806) (undo-tree-id16275 . -806) (undo-tree-id16276 . -806) (undo-tree-id16277 . -806) (undo-tree-id16278 . -806) (undo-tree-id16279 . -806) (undo-tree-id16280 . -806) (undo-tree-id16281 . -806) (undo-tree-id16282 . -806) (undo-tree-id16283 . -806) (undo-tree-id16284 . -806) (undo-tree-id16285 . -806) (undo-tree-id16286 . -806) (undo-tree-id16287 . -806) (undo-tree-id16288 . -806) (undo-tree-id16289 . -806) (undo-tree-id16290 . -806) (undo-tree-id16291 . -806) (undo-tree-id16292 . -806) (undo-tree-id16293 . -806) (undo-tree-id16294 . -806) (undo-tree-id16295 . -806) (undo-tree-id16296 . -806) (undo-tree-id16297 . -806) (undo-tree-id16298 . -806) (undo-tree-id16299 . -806) (undo-tree-id16300 . -806) (undo-tree-id16301 . -806) (undo-tree-id16302 . -806) (undo-tree-id16303 . -806) (undo-tree-id16304 . -806) (undo-tree-id16305 . -806) (undo-tree-id16306 . -806) (undo-tree-id16307 . -806) (undo-tree-id16308 . -806) (undo-tree-id16309 . -806) (undo-tree-id16310 . -806) (undo-tree-id16311 . -806) (undo-tree-id16312 . -806) (undo-tree-id16313 . -806) (undo-tree-id16314 . -806) (undo-tree-id16315 . -806) (undo-tree-id16316 . -806) (undo-tree-id16317 . -806) (undo-tree-id16318 . -806) (undo-tree-id16319 . -806) (undo-tree-id16320 . -806) (undo-tree-id16321 . -806) (undo-tree-id16322 . -806) (undo-tree-id16323 . -806) (undo-tree-id16324 . -806) (undo-tree-id16325 . -806) (undo-tree-id16326 . -806) (undo-tree-id16327 . -806) (undo-tree-id16328 . -806) (undo-tree-id16329 . -806) (undo-tree-id16330 . -806) (undo-tree-id16331 . -806) (undo-tree-id16332 . -806) (undo-tree-id16333 . -806) (undo-tree-id16334 . -806) (undo-tree-id16335 . -806) (undo-tree-id16336 . -806) (undo-tree-id16337 . -806) (undo-tree-id16338 . -806) (undo-tree-id16339 . -806) (undo-tree-id16340 . -806) (undo-tree-id16341 . -806) (undo-tree-id16342 . -806) (undo-tree-id16343 . -806) (undo-tree-id16344 . -806) (undo-tree-id16345 . -806) (undo-tree-id16346 . -806) (undo-tree-id16347 . -806) (undo-tree-id16348 . -806) (undo-tree-id16349 . -806) (undo-tree-id16350 . -806) (undo-tree-id16351 . -806) (undo-tree-id16352 . -806) (undo-tree-id16353 . -806) (undo-tree-id16354 . -806) (undo-tree-id16355 . -806) (undo-tree-id16356 . -806) (undo-tree-id16357 . -806) (undo-tree-id16358 . -806) (undo-tree-id16359 . -806) (undo-tree-id16360 . -806) (undo-tree-id16361 . -806) (undo-tree-id16362 . -806) (undo-tree-id16363 . -806) (undo-tree-id16364 . -806) (undo-tree-id16365 . -806) (undo-tree-id16366 . -806) (undo-tree-id16367 . -806) (undo-tree-id16368 . -806) (undo-tree-id16369 . -806) (undo-tree-id16370 . -806) (undo-tree-id16371 . -806) (undo-tree-id16372 . -806) (undo-tree-id16373 . -806) (undo-tree-id16374 . -806) (undo-tree-id16375 . -806) (undo-tree-id16376 . -806) (undo-tree-id16377 . -806) (undo-tree-id16378 . -806) (undo-tree-id16379 . -806) (undo-tree-id16380 . -806) (undo-tree-id16381 . -806) (undo-tree-id16382 . -806) (undo-tree-id16383 . -806) (undo-tree-id16384 . -806) (undo-tree-id16385 . -806) (undo-tree-id16386 . -806) (undo-tree-id16387 . -806) (undo-tree-id16388 . -806) (undo-tree-id16389 . -806) (undo-tree-id16390 . -806) (undo-tree-id16391 . -806) (undo-tree-id16392 . -806) (undo-tree-id16393 . -806) (undo-tree-id16394 . -806) (undo-tree-id16395 . -806) (undo-tree-id16396 . -806) (undo-tree-id16397 . -806) (undo-tree-id16398 . -806) (undo-tree-id16399 . -806) (undo-tree-id16400 . -806) (undo-tree-id16401 . -806) (undo-tree-id16402 . -806) (undo-tree-id16403 . -806) (undo-tree-id16404 . -806) (undo-tree-id16405 . -806) (undo-tree-id16406 . -806) (undo-tree-id16407 . -806) (undo-tree-id16408 . -806) (undo-tree-id16409 . -806) (undo-tree-id16410 . -806) (undo-tree-id16411 . -806) (undo-tree-id16412 . -806) (undo-tree-id16413 . -806) (undo-tree-id16414 . -806) (undo-tree-id16415 . -806) (undo-tree-id16416 . -806) (undo-tree-id16417 . -806) (undo-tree-id16418 . -806) (undo-tree-id16419 . -806) (undo-tree-id16420 . -806) (undo-tree-id16421 . -806) (undo-tree-id16422 . -806) (undo-tree-id16423 . -806) (undo-tree-id16424 . -806) (undo-tree-id16425 . -806) (undo-tree-id16426 . -806) (undo-tree-id16427 . -806) (undo-tree-id16428 . -806) (undo-tree-id16429 . -806) (undo-tree-id16430 . -806) (undo-tree-id16431 . -806) (undo-tree-id16432 . -806) (undo-tree-id16433 . -806) (undo-tree-id16434 . -806) (undo-tree-id16435 . -806) (undo-tree-id16436 . -806) (undo-tree-id16437 . -806) (undo-tree-id16438 . -806) (undo-tree-id16439 . -806) (undo-tree-id16440 . -806) (undo-tree-id16441 . -806) (undo-tree-id16442 . -806) (undo-tree-id16443 . -806) (undo-tree-id16444 . -806) (undo-tree-id16445 . -806) (undo-tree-id16446 . -806) (undo-tree-id16447 . -806) (undo-tree-id16448 . -806) (undo-tree-id16449 . -806) (undo-tree-id16450 . -806) (undo-tree-id16451 . -806) (undo-tree-id16452 . -806) (undo-tree-id16453 . -806) (undo-tree-id16454 . -806) (undo-tree-id16455 . -806) (undo-tree-id16456 . -806) (undo-tree-id16457 . -806) (undo-tree-id16458 . -806) (undo-tree-id16459 . -806) (undo-tree-id16460 . -806) (undo-tree-id16461 . -806) (undo-tree-id16462 . -806) (undo-tree-id16463 . -806) (undo-tree-id16464 . -806) (undo-tree-id16465 . -806) (undo-tree-id16466 . -806) (undo-tree-id16467 . -806) (undo-tree-id16468 . -806) (undo-tree-id16469 . -806) (undo-tree-id16470 . -806) (undo-tree-id16471 . -806) (undo-tree-id16472 . -806) (undo-tree-id16473 . -806) (undo-tree-id16474 . -806) (undo-tree-id16475 . -806) (undo-tree-id16476 . -806) (undo-tree-id16477 . -806) (undo-tree-id16478 . -806) (undo-tree-id16479 . -806) (undo-tree-id16480 . -806) (undo-tree-id16481 . -806) (undo-tree-id16482 . -806) (undo-tree-id16483 . -806) (undo-tree-id16484 . -806) (undo-tree-id16485 . -806) (undo-tree-id16486 . -806) (undo-tree-id16487 . -806) (undo-tree-id16488 . -806) (undo-tree-id16489 . -806) (undo-tree-id16490 . -806) (undo-tree-id16491 . -806) (undo-tree-id16492 . -806) (undo-tree-id16493 . -806) (undo-tree-id16494 . -806) (undo-tree-id16495 . -806) (undo-tree-id16496 . -806) (undo-tree-id16497 . -806) (undo-tree-id16498 . -806) (undo-tree-id16499 . -806) (undo-tree-id16500 . -806) (undo-tree-id16501 . -806) (undo-tree-id16502 . -806) (undo-tree-id16503 . -806) (undo-tree-id16504 . -806) (undo-tree-id16505 . -806) (undo-tree-id16506 . -806) (undo-tree-id16507 . -806) (undo-tree-id16508 . -806) (undo-tree-id16509 . -806) (undo-tree-id16510 . -806) (undo-tree-id16511 . -806) (undo-tree-id16512 . -806) (undo-tree-id16513 . -806) (undo-tree-id16514 . -806) (undo-tree-id16515 . -806) (undo-tree-id16516 . -806) (undo-tree-id16517 . -806) (undo-tree-id16518 . -806) (undo-tree-id16519 . -806) (undo-tree-id16520 . -806) (undo-tree-id16521 . -806) (undo-tree-id16522 . -806) (undo-tree-id16523 . -806) (undo-tree-id16524 . -806) (undo-tree-id16525 . -806) (undo-tree-id16526 . -806) (undo-tree-id16527 . -806) (undo-tree-id16528 . -806) (undo-tree-id16529 . -806) (undo-tree-id16530 . -806) (undo-tree-id16531 . -806) (undo-tree-id16532 . -806) (undo-tree-id16533 . -806) (undo-tree-id16534 . -806) (undo-tree-id16535 . -806) (undo-tree-id16536 . -806) (undo-tree-id16537 . -806) (undo-tree-id16538 . -806) (undo-tree-id16539 . -806) (undo-tree-id16540 . -806) (undo-tree-id16541 . -806) (undo-tree-id16542 . -806) (undo-tree-id16543 . -806) (undo-tree-id16544 . -806) (undo-tree-id16545 . -806) (undo-tree-id16546 . -806) (undo-tree-id16547 . -806) (undo-tree-id16548 . -806) (undo-tree-id16549 . -806) (undo-tree-id16550 . -806) (undo-tree-id16551 . -806) (undo-tree-id16552 . -806) (undo-tree-id16553 . -806) (undo-tree-id16554 . -806) (undo-tree-id16555 . -806) (undo-tree-id16556 . -806) (undo-tree-id16557 . -806) (undo-tree-id16558 . -806) (undo-tree-id16559 . -806) (undo-tree-id16560 . -806) (undo-tree-id16561 . -806) (undo-tree-id16562 . -806) (undo-tree-id16563 . -806) (undo-tree-id16564 . -806) (undo-tree-id16565 . -806) (undo-tree-id16566 . -806) (undo-tree-id16567 . -806) (undo-tree-id16568 . -806) (undo-tree-id16569 . -806) (undo-tree-id16570 . -806) (undo-tree-id16571 . -806) (undo-tree-id16572 . -806) (undo-tree-id16573 . -806) (undo-tree-id16574 . -806) (undo-tree-id16575 . -806) (undo-tree-id16576 . -806) (undo-tree-id16577 . -806) (undo-tree-id16578 . -806) (undo-tree-id16579 . -806) (undo-tree-id16580 . -806) (undo-tree-id16581 . -806) (undo-tree-id16582 . -806) (undo-tree-id16583 . -806) (undo-tree-id16584 . -806) (undo-tree-id16585 . -806) (undo-tree-id16586 . -806) (undo-tree-id16587 . -806) (undo-tree-id16588 . -806) (undo-tree-id16589 . -806) (undo-tree-id16590 . -806) (undo-tree-id16591 . -806) (undo-tree-id16592 . -806) (undo-tree-id16593 . -806) (undo-tree-id16594 . -806) (undo-tree-id16595 . -806) (undo-tree-id16596 . -806) (undo-tree-id16597 . -806) (undo-tree-id16598 . -806) (undo-tree-id16599 . -806) (undo-tree-id16600 . -806) (undo-tree-id16601 . -806) (undo-tree-id16602 . -806) (undo-tree-id16603 . -806) (undo-tree-id16604 . -806) (undo-tree-id16605 . -806) (undo-tree-id16606 . -806) (undo-tree-id16607 . -806) (undo-tree-id16608 . -806) (undo-tree-id16609 . -806) (undo-tree-id16610 . -806) (undo-tree-id16611 . -806) (undo-tree-id16612 . -806) (undo-tree-id16613 . -806) (undo-tree-id16614 . -806) (undo-tree-id16615 . -806) (undo-tree-id16616 . -806) (undo-tree-id16617 . -806) (undo-tree-id16618 . -806) (undo-tree-id16619 . -806) (undo-tree-id16620 . -806) (undo-tree-id16621 . -806) (undo-tree-id16622 . -806) (undo-tree-id16623 . -806) (undo-tree-id16624 . -806) (undo-tree-id16625 . -806) (undo-tree-id16626 . -806) (undo-tree-id16627 . -806) (undo-tree-id16628 . -806) (undo-tree-id16629 . -806) (undo-tree-id16630 . -806) (undo-tree-id16631 . -806) (undo-tree-id16632 . -806) (undo-tree-id16633 . -806) (undo-tree-id16634 . -806) (undo-tree-id16635 . -806) (undo-tree-id16636 . -806) (undo-tree-id16637 . -806) (undo-tree-id16638 . -806) (undo-tree-id16639 . -806) (undo-tree-id16640 . -806) (undo-tree-id16641 . -806) (undo-tree-id16642 . -806) (undo-tree-id16643 . -806) (undo-tree-id16644 . -806) (undo-tree-id16645 . -806) (undo-tree-id16646 . -806) (undo-tree-id16647 . -806) (undo-tree-id16648 . -806) (undo-tree-id16649 . -806) (undo-tree-id16650 . -806) (undo-tree-id16651 . -806) (undo-tree-id16652 . -806) (undo-tree-id16653 . -806) (undo-tree-id16654 . -806) (undo-tree-id16655 . -806) (undo-tree-id16656 . -806) (undo-tree-id16657 . -806) (undo-tree-id16658 . -806) (undo-tree-id16659 . -806) (undo-tree-id16660 . -806) (undo-tree-id16661 . -806) (undo-tree-id16662 . -806) (undo-tree-id16663 . -806) (undo-tree-id16664 . -806) (undo-tree-id16665 . -806) (undo-tree-id16666 . -806) (undo-tree-id16667 . -806) (undo-tree-id16668 . -806) (undo-tree-id16669 . -806) (undo-tree-id16670 . -806) (undo-tree-id16671 . -806) (undo-tree-id16672 . -806) (undo-tree-id16673 . -806) (undo-tree-id16674 . -806) (undo-tree-id16675 . -806) (undo-tree-id16676 . -806) (undo-tree-id16677 . -806) (undo-tree-id16678 . -806) (undo-tree-id16679 . -806) (undo-tree-id16680 . -806) (undo-tree-id16681 . -806) (undo-tree-id16682 . -806) (undo-tree-id16683 . -806) (undo-tree-id16684 . -806) (undo-tree-id16685 . -806) (undo-tree-id16686 . -806) (undo-tree-id16687 . -806) (undo-tree-id16688 . -806) (undo-tree-id16689 . -806) (undo-tree-id16690 . -806) (undo-tree-id16691 . -806) (undo-tree-id16692 . -806) (undo-tree-id16693 . -806) (undo-tree-id16694 . -806) (undo-tree-id16695 . -806) (undo-tree-id16696 . -806) (undo-tree-id16697 . -806) (undo-tree-id16698 . -806) (undo-tree-id16699 . -806) (undo-tree-id16700 . -806) (undo-tree-id16701 . -806) (undo-tree-id16702 . -806) (undo-tree-id16703 . -806) (undo-tree-id16704 . -806) (undo-tree-id16705 . -806) (undo-tree-id16706 . -806) (undo-tree-id16707 . -806) (undo-tree-id16708 . -806) (undo-tree-id16709 . -806) (undo-tree-id16710 . -806) (undo-tree-id16711 . -806) (undo-tree-id16712 . -806) (undo-tree-id16713 . -806) (undo-tree-id16714 . -806) (undo-tree-id16715 . -806) (undo-tree-id16716 . -806) (undo-tree-id16717 . -806) (undo-tree-id16718 . -806) (undo-tree-id16719 . -806) (undo-tree-id16720 . -806) (undo-tree-id16721 . -806) (undo-tree-id16722 . -806) (undo-tree-id16723 . -806) (undo-tree-id16724 . -806) (undo-tree-id16725 . -806) (undo-tree-id16726 . -806) (undo-tree-id16727 . -806) (undo-tree-id16728 . -806) (undo-tree-id16729 . -806) (undo-tree-id16730 . -806) (undo-tree-id16731 . -806) (undo-tree-id16732 . -806) (undo-tree-id16733 . -806) (undo-tree-id16734 . -806) (undo-tree-id16735 . -806) (undo-tree-id16736 . -806) (undo-tree-id16737 . -806) (undo-tree-id16738 . -806) (undo-tree-id16739 . -806) (undo-tree-id16740 . -806) (undo-tree-id16741 . -806) (undo-tree-id16742 . -806) (undo-tree-id16743 . -806) (undo-tree-id16744 . -806) (undo-tree-id16745 . -806) (undo-tree-id16746 . -806) (undo-tree-id16747 . -806) (undo-tree-id16748 . -806) (undo-tree-id16749 . -806) (undo-tree-id16750 . -806) (undo-tree-id16751 . -806) (undo-tree-id16752 . -806) (undo-tree-id16753 . -806) (undo-tree-id16754 . -806) (undo-tree-id16755 . -806) (undo-tree-id16756 . -806) (undo-tree-id16757 . -806) (undo-tree-id16758 . -806) (undo-tree-id16759 . -806) (undo-tree-id16760 . -806) (undo-tree-id16761 . -806) (undo-tree-id16762 . -806) (undo-tree-id16763 . -806) (undo-tree-id16764 . -806) (undo-tree-id16765 . -806) (undo-tree-id16766 . -806) (undo-tree-id16767 . -806) (undo-tree-id16768 . -806) (undo-tree-id16769 . -806) (undo-tree-id16770 . -806) (undo-tree-id16771 . -806) (undo-tree-id16772 . -806) (undo-tree-id16773 . -806) (undo-tree-id16774 . -806) (undo-tree-id16775 . -806) (undo-tree-id16776 . -806) (undo-tree-id16777 . -806) (undo-tree-id16778 . -806) (undo-tree-id16779 . -806) (undo-tree-id16780 . -806) (undo-tree-id16781 . -806) (undo-tree-id16782 . -806) (undo-tree-id16783 . -806) (undo-tree-id16784 . -806) (undo-tree-id16785 . -806) (undo-tree-id16786 . -806) (undo-tree-id16787 . -806) (undo-tree-id16788 . -806) (undo-tree-id16789 . -806) (undo-tree-id16790 . -806) (undo-tree-id16791 . -806) (undo-tree-id16792 . -806) (undo-tree-id16793 . -806) (undo-tree-id16794 . -806) (undo-tree-id16795 . -806) (undo-tree-id16796 . -806) (undo-tree-id16797 . -806) (undo-tree-id16798 . -806) (undo-tree-id16799 . -806) (undo-tree-id16800 . -806) (undo-tree-id16801 . -806) (undo-tree-id16802 . -806) (undo-tree-id16803 . -806) (undo-tree-id16804 . -806) (undo-tree-id16805 . -806) (undo-tree-id16806 . -806) (undo-tree-id16807 . -806) (undo-tree-id16808 . -806) (undo-tree-id16809 . -806) (undo-tree-id16810 . -806) (undo-tree-id16811 . -806) (undo-tree-id16812 . -806) (undo-tree-id16813 . -806) (undo-tree-id16814 . -806) (undo-tree-id16815 . -806) (undo-tree-id16816 . -806) (undo-tree-id16817 . -806) (undo-tree-id16818 . -806) (undo-tree-id16819 . -806) (undo-tree-id16820 . -806) (undo-tree-id16821 . -806) (undo-tree-id16822 . -806) (undo-tree-id16823 . -806) (undo-tree-id16824 . -806) (undo-tree-id16825 . -806) (undo-tree-id16826 . -806) (undo-tree-id16827 . -806) (undo-tree-id16828 . -806) (undo-tree-id16829 . -806) (undo-tree-id16830 . -806) (undo-tree-id16831 . -806) (undo-tree-id16832 . -806) (undo-tree-id16833 . -806) (undo-tree-id16834 . -806) (undo-tree-id16835 . -806) (undo-tree-id16836 . -806) (undo-tree-id16837 . -806) (undo-tree-id16838 . -806) (undo-tree-id16839 . -806) (undo-tree-id16840 . -806) (undo-tree-id16841 . -806) (undo-tree-id16842 . -806) (undo-tree-id16843 . -806) (undo-tree-id16844 . -806) (undo-tree-id16845 . -806) (undo-tree-id16846 . -806) (undo-tree-id16847 . -806) (undo-tree-id16848 . -806) (undo-tree-id16849 . -806) (undo-tree-id16850 . -806) (undo-tree-id16851 . -806) (undo-tree-id16852 . -806) (undo-tree-id16853 . -806) (undo-tree-id16854 . -806) (undo-tree-id16855 . -806) (undo-tree-id16856 . -806) (undo-tree-id16857 . -806) (undo-tree-id16858 . -806) (undo-tree-id16859 . -806) (undo-tree-id16860 . -806) (undo-tree-id16861 . -806) (undo-tree-id16862 . -806) (undo-tree-id16863 . -806) (undo-tree-id16864 . -806) (undo-tree-id16865 . -806) (undo-tree-id16866 . -806) (undo-tree-id16867 . -806) (undo-tree-id16868 . -806) (undo-tree-id16869 . -806) (undo-tree-id16870 . -806) (undo-tree-id16871 . -806) (undo-tree-id16872 . -806) (undo-tree-id16873 . -806) (undo-tree-id16874 . -806) (undo-tree-id16875 . -806) (undo-tree-id16876 . -806) (undo-tree-id16877 . -806) (undo-tree-id16878 . -806) (undo-tree-id16879 . -806) (undo-tree-id16880 . -806) (undo-tree-id16881 . -806) (undo-tree-id16882 . -806) (undo-tree-id16883 . -806) (undo-tree-id16884 . -806) (undo-tree-id16885 . -806) (undo-tree-id16886 . -806) (undo-tree-id16887 . -806) (undo-tree-id16888 . -806) (undo-tree-id16889 . -806) (undo-tree-id16890 . -806) (undo-tree-id16891 . -806) (undo-tree-id16892 . -806) (undo-tree-id16893 . -806) (undo-tree-id16894 . -806) (undo-tree-id16895 . -806) (undo-tree-id16896 . -806) (undo-tree-id16897 . -806) (undo-tree-id16898 . -806) (undo-tree-id16899 . -806) (undo-tree-id16900 . -806) (undo-tree-id16901 . -806) (undo-tree-id16902 . -806) (undo-tree-id16903 . -806) (undo-tree-id16904 . -806) (undo-tree-id16905 . -806) (undo-tree-id16906 . -806) (undo-tree-id16907 . -806) (undo-tree-id16908 . -806) (undo-tree-id16909 . -806) (undo-tree-id16910 . -806) (undo-tree-id16911 . -806) (undo-tree-id16912 . -806) (undo-tree-id16913 . -806) (undo-tree-id16914 . -806) (undo-tree-id16915 . -806) (undo-tree-id16916 . -806) (undo-tree-id16917 . -806) (undo-tree-id16918 . -806) (undo-tree-id16919 . -806) (undo-tree-id16920 . -806) (undo-tree-id16921 . -806) (undo-tree-id16922 . -806) (undo-tree-id16923 . -806) (undo-tree-id16924 . -806) (undo-tree-id16925 . -806) (undo-tree-id16926 . -806) (undo-tree-id16927 . -806) (undo-tree-id16928 . -806) (undo-tree-id16929 . -806) (undo-tree-id16930 . -806) (undo-tree-id16931 . -806) (undo-tree-id16932 . -806) (undo-tree-id16933 . -806) (undo-tree-id16934 . -806) (undo-tree-id16935 . -806) (undo-tree-id16936 . -806) (undo-tree-id16937 . -806) (undo-tree-id16938 . -806) (undo-tree-id16939 . -806) (undo-tree-id16940 . -806) (undo-tree-id16941 . -806) (undo-tree-id16942 . -806) (undo-tree-id16943 . -806) (undo-tree-id16944 . -806) (undo-tree-id16945 . -806) (undo-tree-id16946 . -806) (undo-tree-id16947 . -806) (undo-tree-id16948 . -806) (undo-tree-id16949 . -806) (undo-tree-id16950 . -806) (undo-tree-id16951 . -806) (undo-tree-id16952 . -806) (undo-tree-id16953 . -806) (undo-tree-id16954 . -806) (undo-tree-id16955 . -806) (undo-tree-id16956 . -806) (undo-tree-id16957 . -806) (undo-tree-id16958 . -806) (undo-tree-id16959 . -806) (undo-tree-id16960 . -806) (undo-tree-id16961 . -806) (undo-tree-id16962 . -806) (undo-tree-id16963 . -806) (undo-tree-id16964 . -806) (undo-tree-id16965 . -806) (undo-tree-id16966 . -806) (undo-tree-id16967 . -806) (undo-tree-id16968 . -806) (undo-tree-id16969 . -806) (undo-tree-id16970 . -806) (undo-tree-id16971 . -806) (undo-tree-id16972 . -806) (undo-tree-id16973 . -806) (undo-tree-id16974 . -806) (undo-tree-id16975 . -806) (undo-tree-id16976 . -806) (undo-tree-id16977 . -806) (undo-tree-id16978 . -806) (undo-tree-id16979 . -806) (undo-tree-id16980 . -806) (undo-tree-id16981 . -806) (undo-tree-id16982 . -806) (undo-tree-id16983 . -806) (undo-tree-id16984 . -806) (undo-tree-id16985 . -806) (undo-tree-id16986 . -806) (undo-tree-id16987 . -806) (undo-tree-id16988 . -806) (undo-tree-id16989 . -806) (undo-tree-id16990 . -806) (undo-tree-id16991 . -806) (undo-tree-id16992 . -806) (undo-tree-id16993 . -806) (undo-tree-id16994 . -806) (undo-tree-id16995 . -806) (undo-tree-id16996 . -806) (undo-tree-id16997 . -806) (undo-tree-id16998 . -806) (undo-tree-id16999 . -806) (undo-tree-id17000 . -806) (undo-tree-id17001 . -806) (undo-tree-id17002 . -806) (undo-tree-id17003 . -806) (undo-tree-id17004 . -806) (undo-tree-id17005 . -806) (undo-tree-id17006 . -806) (undo-tree-id17007 . -806) (undo-tree-id17008 . -806) (undo-tree-id17009 . -806) (undo-tree-id17010 . -806) (undo-tree-id17011 . -806) (undo-tree-id17012 . -806) (undo-tree-id17013 . -806) (undo-tree-id17014 . -806) (undo-tree-id17015 . -806) (undo-tree-id17016 . -806) (undo-tree-id17017 . -806) (undo-tree-id17018 . -806) (undo-tree-id17019 . -806) (undo-tree-id17020 . -806) (undo-tree-id17021 . -806) (undo-tree-id17022 . -806) (undo-tree-id17023 . -806) (undo-tree-id17024 . -806) (undo-tree-id17025 . -806) (undo-tree-id17026 . -806) (undo-tree-id17027 . -807) (undo-tree-id17028 . -807) (undo-tree-id17029 . -807) (undo-tree-id17030 . -807) (undo-tree-id17031 . -807) (undo-tree-id17032 . -807) (undo-tree-id17033 . -807) (undo-tree-id17034 . -807) (undo-tree-id17035 . -807) (undo-tree-id17036 . -807) (undo-tree-id17037 . -807) (undo-tree-id17038 . -807) (undo-tree-id17039 . -807) (undo-tree-id17040 . -807) (undo-tree-id17041 . -807) (undo-tree-id17042 . -807) (undo-tree-id17043 . -807) (undo-tree-id17044 . -807) (undo-tree-id17045 . -807) (undo-tree-id17046 . -807) (undo-tree-id17047 . -807) (undo-tree-id17048 . -807) (undo-tree-id17049 . -815) (undo-tree-id17050 . -815) (undo-tree-id17051 . -815) (undo-tree-id17052 . -815) (undo-tree-id17053 . -815) (undo-tree-id17054 . -815) (undo-tree-id17055 . -815) (undo-tree-id17056 . -815) (undo-tree-id17057 . -816) (undo-tree-id17058 . -816) (undo-tree-id17059 . -816) (undo-tree-id17060 . -816) (undo-tree-id17061 . -816) (undo-tree-id17062 . -816) (undo-tree-id17063 . -816) (undo-tree-id17064 . -816) (undo-tree-id17065 . -820) (undo-tree-id17066 . -820) (undo-tree-id17067 . -820) (undo-tree-id17068 . -820) (undo-tree-id17069 . -820) (undo-tree-id17070 . -820) (undo-tree-id17071 . -820) (undo-tree-id17072 . -820) (undo-tree-id17073 . -827) (undo-tree-id17074 . -827) (undo-tree-id17075 . -827) (undo-tree-id17076 . -827) (undo-tree-id17077 . -827) (undo-tree-id17078 . -827) (undo-tree-id17079 . -827) (undo-tree-id17080 . -827) (undo-tree-id17081 . -829) (undo-tree-id17082 . -829) (undo-tree-id17083 . -829) (undo-tree-id17084 . -829) (undo-tree-id17085 . -829) (undo-tree-id17086 . -829) (undo-tree-id17087 . -829) (undo-tree-id17088 . -829) (undo-tree-id17089 . -836) (undo-tree-id17090 . -836) (undo-tree-id17091 . -836) (undo-tree-id17092 . -836) (undo-tree-id17093 . -836) (undo-tree-id17094 . -836) (undo-tree-id17095 . -836) (undo-tree-id17096 . -836) (undo-tree-id17097 . -844) (undo-tree-id17098 . -844) (undo-tree-id17099 . -844) (undo-tree-id17100 . -844) (undo-tree-id17101 . -844) (undo-tree-id17102 . -844) (undo-tree-id17103 . -844) (undo-tree-id17104 . -844) (undo-tree-id17105 . -859) (undo-tree-id17106 . -859) (undo-tree-id17107 . -859) (undo-tree-id17108 . -859) (undo-tree-id17109 . -859) (undo-tree-id17110 . -859) (undo-tree-id17111 . -859) (undo-tree-id17112 . -859) (undo-tree-id17113 . -867) (undo-tree-id17114 . -867) (undo-tree-id17115 . -867) (undo-tree-id17116 . -867) (undo-tree-id17117 . -867) (undo-tree-id17118 . -867) (undo-tree-id17119 . -867) (undo-tree-id17120 . -867) (undo-tree-id17121 . -868) (undo-tree-id17122 . -868) (undo-tree-id17123 . -868) (undo-tree-id17124 . -868) (undo-tree-id17125 . -868) (undo-tree-id17126 . -868) (undo-tree-id17127 . -868) (undo-tree-id17128 . -868) (undo-tree-id17129 . -869) (undo-tree-id17130 . -869) (undo-tree-id17131 . -869) (undo-tree-id17132 . -869) (undo-tree-id17133 . -869) (undo-tree-id17134 . -869) (undo-tree-id17135 . -869) (undo-tree-id17136 . -869) (undo-tree-id17137 . -869) (undo-tree-id17138 . -869) (undo-tree-id17139 . -869) (undo-tree-id17140 . -869) (undo-tree-id17141 . -869) (undo-tree-id17142 . -869) (undo-tree-id17143 . -869) (undo-tree-id17144 . -869) (undo-tree-id17145 . -869) (undo-tree-id17146 . -869) (undo-tree-id17147 . -869) (undo-tree-id17148 . -869) (undo-tree-id17149 . -869) (undo-tree-id17150 . -869) (undo-tree-id17151 . -869) (undo-tree-id17152 . -869) (undo-tree-id17153 . -869) (undo-tree-id17154 . -869) (undo-tree-id17155 . -869) (undo-tree-id17156 . -869) (undo-tree-id17157 . -869) (undo-tree-id17158 . -869) (undo-tree-id17159 . -869) (undo-tree-id17160 . -869) (undo-tree-id17161 . -869) (undo-tree-id17162 . -869) (undo-tree-id17163 . -869) (undo-tree-id17164 . -869) (undo-tree-id17165 . -869) (undo-tree-id17166 . -869) (undo-tree-id17167 . -869) (undo-tree-id17168 . -869) (undo-tree-id17169 . -869) (undo-tree-id17170 . -869) (undo-tree-id17171 . -869) (undo-tree-id17172 . -869) (undo-tree-id17173 . -869) (undo-tree-id17174 . -869) (undo-tree-id17175 . -869) (undo-tree-id17176 . -869) (undo-tree-id17177 . -869) (undo-tree-id17178 . -869) (undo-tree-id17179 . -869) (undo-tree-id17180 . -869) (undo-tree-id17181 . -869) (undo-tree-id17182 . -869) (undo-tree-id17183 . -869) (undo-tree-id17184 . -869) (undo-tree-id17185 . -869) (undo-tree-id17186 . -869) (undo-tree-id17187 . -869) (undo-tree-id17188 . -869) (undo-tree-id17189 . -869) (undo-tree-id17190 . -869) (undo-tree-id17191 . -869) (undo-tree-id17192 . -869) (undo-tree-id17193 . -869) (undo-tree-id17194 . -869) (undo-tree-id17195 . -869) (undo-tree-id17196 . -869) (undo-tree-id17197 . -869) (undo-tree-id17198 . -869) (undo-tree-id17199 . -869) (undo-tree-id17200 . -869) (undo-tree-id17201 . -869) (undo-tree-id17202 . -869) (undo-tree-id17203 . -869) (undo-tree-id17204 . -869) (undo-tree-id17205 . -869) (undo-tree-id17206 . -869) (undo-tree-id17207 . -869) (undo-tree-id17208 . -869) (undo-tree-id17209 . -869) (undo-tree-id17210 . -869) (undo-tree-id17211 . -869) (undo-tree-id17212 . -869) (undo-tree-id17213 . -869) (undo-tree-id17214 . -869) (undo-tree-id17215 . -869) (undo-tree-id17216 . -869) (undo-tree-id17217 . -868) (undo-tree-id17218 . -868) (undo-tree-id17219 . -868) (undo-tree-id17220 . -868) (undo-tree-id17221 . -868) (undo-tree-id17222 . -868) (undo-tree-id17223 . -868) (undo-tree-id17224 . -868) (undo-tree-id17225 . -868) (undo-tree-id17226 . -868) (undo-tree-id17227 . -868) (undo-tree-id17228 . -868) (undo-tree-id17229 . -868) (undo-tree-id17230 . -868) (undo-tree-id17231 . -868) (undo-tree-id17232 . -868) (undo-tree-id17233 . -868) (undo-tree-id17234 . -868) (undo-tree-id17235 . -868) (undo-tree-id17236 . -868) (undo-tree-id17237 . -868) (undo-tree-id17238 . -868) (undo-tree-id17239 . -861) (undo-tree-id17240 . -861) (undo-tree-id17241 . -861) (undo-tree-id17242 . -861) (undo-tree-id17243 . -861) (undo-tree-id17244 . -861) (undo-tree-id17245 . -861) (undo-tree-id17246 . -861) (undo-tree-id17247 . -861) (undo-tree-id17248 . -861) (undo-tree-id17249 . -861) (undo-tree-id17250 . -861) (undo-tree-id17251 . -861) (undo-tree-id17252 . -861) (undo-tree-id17253 . -861) (undo-tree-id17254 . -861) (undo-tree-id17255 . -861) (undo-tree-id17256 . -861) (undo-tree-id17257 . -861) (undo-tree-id17258 . -861) (undo-tree-id17259 . -861) (undo-tree-id17260 . -861) (undo-tree-id17261 . 23) (undo-tree-id17262 . -860) (undo-tree-id17263 . -860) (undo-tree-id17264 . -860) (undo-tree-id17265 . -860) (undo-tree-id17266 . -860) (undo-tree-id17267 . -860) (undo-tree-id17268 . -860) (undo-tree-id17269 . -860) (undo-tree-id17270 . -860) (undo-tree-id17271 . -860) (undo-tree-id17272 . -860) (undo-tree-id17273 . -860) (undo-tree-id17274 . -860) (undo-tree-id17275 . -860) (undo-tree-id17276 . -860) (undo-tree-id17277 . -860) (undo-tree-id17278 . -860) (undo-tree-id17279 . -860) (undo-tree-id17280 . -860) (undo-tree-id17281 . -860) (undo-tree-id17282 . -860) (undo-tree-id17283 . -860) (undo-tree-id17284 . -860) (undo-tree-id17285 . -860) (undo-tree-id17286 . -860) (undo-tree-id17287 . -860) (undo-tree-id17288 . -860) (undo-tree-id17289 . -860) (undo-tree-id17290 . -860) (undo-tree-id17291 . -860) (undo-tree-id17292 . -860) (undo-tree-id17293 . -860) (undo-tree-id17294 . -860) (undo-tree-id17295 . -860) (undo-tree-id17296 . -860) (undo-tree-id17297 . -860) (undo-tree-id17298 . -860) (undo-tree-id17299 . -846) (undo-tree-id17300 . -846) (undo-tree-id17301 . -846) (undo-tree-id17302 . -846) (undo-tree-id17303 . -846) (undo-tree-id17304 . -846) (undo-tree-id17305 . -846) (undo-tree-id17306 . -846) (undo-tree-id17307 . -846) (undo-tree-id17308 . -846) (undo-tree-id17309 . -846) (undo-tree-id17310 . -846) (undo-tree-id17311 . -846) (undo-tree-id17312 . -846) (undo-tree-id17313 . -846) (undo-tree-id17314 . -846) (undo-tree-id17315 . -846) (undo-tree-id17316 . -846) (undo-tree-id17317 . -846) (undo-tree-id17318 . -846) (undo-tree-id17319 . -846) (undo-tree-id17320 . -846) (undo-tree-id17321 . -838) (undo-tree-id17322 . -838) (undo-tree-id17323 . -838) (undo-tree-id17324 . -838) (undo-tree-id17325 . -838) (undo-tree-id17326 . -838) (undo-tree-id17327 . -838) (undo-tree-id17328 . -838) (undo-tree-id17329 . -838) (undo-tree-id17330 . -838) (undo-tree-id17331 . -838) (undo-tree-id17332 . -838) (undo-tree-id17333 . -838) (undo-tree-id17334 . -838) (undo-tree-id17335 . -838) (undo-tree-id17336 . -838) (undo-tree-id17337 . -838) (undo-tree-id17338 . -838) (undo-tree-id17339 . -838) (undo-tree-id17340 . -838) (undo-tree-id17341 . -838) (undo-tree-id17342 . -838) (undo-tree-id17343 . -831) (undo-tree-id17344 . -831) (undo-tree-id17345 . -831) (undo-tree-id17346 . -831) (undo-tree-id17347 . -831) (undo-tree-id17348 . -831) (undo-tree-id17349 . -831) (undo-tree-id17350 . -831) (undo-tree-id17351 . -831) (undo-tree-id17352 . -831) (undo-tree-id17353 . -831) (undo-tree-id17354 . -831) (undo-tree-id17355 . -831) (undo-tree-id17356 . -831) (undo-tree-id17357 . -831) (undo-tree-id17358 . -831) (undo-tree-id17359 . -831) (undo-tree-id17360 . -831) (undo-tree-id17361 . -831) (undo-tree-id17362 . -831) (undo-tree-id17363 . -831) (undo-tree-id17364 . -831) (undo-tree-id17365 . -828) (undo-tree-id17366 . -828) (undo-tree-id17367 . -828) (undo-tree-id17368 . -828) (undo-tree-id17369 . -828) (undo-tree-id17370 . -828) (undo-tree-id17371 . -828) (undo-tree-id17372 . -828) (undo-tree-id17373 . -828) (undo-tree-id17374 . -828) (undo-tree-id17375 . -828) (undo-tree-id17376 . -828) (undo-tree-id17377 . -828) (undo-tree-id17378 . -828) (undo-tree-id17379 . -828) (undo-tree-id17380 . -828) (undo-tree-id17381 . -828) (undo-tree-id17382 . -828) (undo-tree-id17383 . -828) (undo-tree-id17384 . -828) (undo-tree-id17385 . -828) (undo-tree-id17386 . -828) (undo-tree-id17387 . -822) (undo-tree-id17388 . -822) (undo-tree-id17389 . -822) (undo-tree-id17390 . -822) (undo-tree-id17391 . -822) (undo-tree-id17392 . -822) (undo-tree-id17393 . -822) (undo-tree-id17394 . -822) (undo-tree-id17395 . -822) (undo-tree-id17396 . -822) (undo-tree-id17397 . -822) (undo-tree-id17398 . -822) (undo-tree-id17399 . -822) (undo-tree-id17400 . -822) (undo-tree-id17401 . -822) (undo-tree-id17402 . -822) (undo-tree-id17403 . -822) (undo-tree-id17404 . -822) (undo-tree-id17405 . -822) (undo-tree-id17406 . -822) (undo-tree-id17407 . -822) (undo-tree-id17408 . -822) (undo-tree-id17409 . -818) (undo-tree-id17410 . -818) (undo-tree-id17411 . -818) (undo-tree-id17412 . -818) (undo-tree-id17413 . -818) (undo-tree-id17414 . -818) (undo-tree-id17415 . -818) (undo-tree-id17416 . -818) (undo-tree-id17417 . -818) (undo-tree-id17418 . -818) (undo-tree-id17419 . -818) (undo-tree-id17420 . -818) (undo-tree-id17421 . -818) (undo-tree-id17422 . -818) (undo-tree-id17423 . -818) (undo-tree-id17424 . -818) (undo-tree-id17425 . -818) (undo-tree-id17426 . -818) (undo-tree-id17427 . -818) (undo-tree-id17428 . -818) (undo-tree-id17429 . -818) (undo-tree-id17430 . -818) (undo-tree-id17431 . -818) (undo-tree-id17432 . -818) (undo-tree-id17433 . -818) (undo-tree-id17434 . -818) (undo-tree-id17435 . -818) (undo-tree-id17436 . -818) (undo-tree-id17437 . -818) (undo-tree-id17438 . -816) (undo-tree-id17439 . -816) (undo-tree-id17440 . -816) (undo-tree-id17441 . -816) (undo-tree-id17442 . -816) (undo-tree-id17443 . -816) (undo-tree-id17444 . -816) (undo-tree-id17445 . -816) (undo-tree-id17446 . -816) (undo-tree-id17447 . -816) (undo-tree-id17448 . -816) (undo-tree-id17449 . -816) (undo-tree-id17450 . -816) (undo-tree-id17451 . -816) (undo-tree-id17452 . -816) (undo-tree-id17453 . -816) (undo-tree-id17454 . -816) (undo-tree-id17455 . -816) (undo-tree-id17456 . -816) (undo-tree-id17457 . -816) (undo-tree-id17458 . -816) (undo-tree-id17459 . -816) (undo-tree-id17460 . -809) (undo-tree-id17461 . -809) (undo-tree-id17462 . -809) (undo-tree-id17463 . -809) (undo-tree-id17464 . -809) (undo-tree-id17465 . -809) (undo-tree-id17466 . -809) (undo-tree-id17467 . -809) (undo-tree-id17468 . -809) (undo-tree-id17469 . -809) (undo-tree-id17470 . -809) (undo-tree-id17471 . -809) (undo-tree-id17472 . -809) (undo-tree-id17473 . -809) (undo-tree-id17474 . -809) (undo-tree-id17475 . -809) (undo-tree-id17476 . -809) (undo-tree-id17477 . -809) (undo-tree-id17478 . -809) (undo-tree-id17479 . -809) (undo-tree-id17480 . -809) (undo-tree-id17481 . -809) (undo-tree-id17482 . -806) (undo-tree-id17483 . -806) (undo-tree-id17484 . -806) (undo-tree-id17485 . -806) (undo-tree-id17486 . -806) (undo-tree-id17487 . -806) (undo-tree-id17488 . -806) (undo-tree-id17489 . -806) (undo-tree-id17490 . -806) (undo-tree-id17491 . -806) (undo-tree-id17492 . -806) (undo-tree-id17493 . -806) (undo-tree-id17494 . -806) (undo-tree-id17495 . -806) (undo-tree-id17496 . -806) (undo-tree-id17497 . -806) (undo-tree-id17498 . -806) (undo-tree-id17499 . -806) (undo-tree-id17500 . -806) (undo-tree-id17501 . -806) (undo-tree-id17502 . -806) (undo-tree-id17503 . -806) (undo-tree-id17504 . -806) (undo-tree-id17505 . -806) (undo-tree-id17506 . -806) (undo-tree-id17507 . -806) (undo-tree-id17508 . -806) (undo-tree-id17509 . -806) (undo-tree-id17510 . -806) (undo-tree-id17511 . -806) (undo-tree-id17512 . -806) (undo-tree-id17513 . -806) (undo-tree-id17514 . -806) (undo-tree-id17515 . -806) (undo-tree-id17516 . -806) (undo-tree-id17517 . -806) (undo-tree-id17518 . -806) (undo-tree-id17519 . -806) (undo-tree-id17520 . -806) (undo-tree-id17521 . -806) (undo-tree-id17522 . -806) (undo-tree-id17523 . -806) (undo-tree-id17524 . -806) (undo-tree-id17525 . -806) (undo-tree-id17526 . -806) (undo-tree-id17527 . -806) (undo-tree-id17528 . -806) (undo-tree-id17529 . -806) (undo-tree-id17530 . -806) (undo-tree-id17531 . -806) (undo-tree-id17532 . -806) (undo-tree-id17533 . -806) (undo-tree-id17534 . -806) (undo-tree-id17535 . -806) (undo-tree-id17536 . -806) (undo-tree-id17537 . -806) (undo-tree-id17538 . -806) (undo-tree-id17539 . -806) (undo-tree-id17540 . -806) (undo-tree-id17541 . -806) (undo-tree-id17542 . -806) (undo-tree-id17543 . -806) (undo-tree-id17544 . -806) (undo-tree-id17545 . -806) (undo-tree-id17546 . -806) (undo-tree-id17547 . -806) (undo-tree-id17548 . -806) (undo-tree-id17549 . -806) (undo-tree-id17550 . -806) (undo-tree-id17551 . -806) (undo-tree-id17552 . -806) (undo-tree-id17553 . -806) (undo-tree-id17554 . -806) (undo-tree-id17555 . -806) (undo-tree-id17556 . -806) (undo-tree-id17557 . -806) (undo-tree-id17558 . -806) (undo-tree-id17559 . -806) (undo-tree-id17560 . -806) (undo-tree-id17561 . -806) (undo-tree-id17562 . -806) (undo-tree-id17563 . -806) (undo-tree-id17564 . -806) (undo-tree-id17565 . -806) (undo-tree-id17566 . -806) (undo-tree-id17567 . -806) (undo-tree-id17568 . -806) (undo-tree-id17569 . -806) (undo-tree-id17570 . -806) (undo-tree-id17571 . -806) (undo-tree-id17572 . -806) (undo-tree-id17573 . -806) (undo-tree-id17574 . -806) (undo-tree-id17575 . -806) (undo-tree-id17576 . -806) (undo-tree-id17577 . -806) (undo-tree-id17578 . -806) (undo-tree-id17579 . -806) (undo-tree-id17580 . -806) (undo-tree-id17581 . -806) (undo-tree-id17582 . -806) (undo-tree-id17583 . -806) (undo-tree-id17584 . -806) (undo-tree-id17585 . -806) (undo-tree-id17586 . -806) (undo-tree-id17587 . -806) (undo-tree-id17588 . -806) (undo-tree-id17589 . -806) (undo-tree-id17590 . -806) (undo-tree-id17591 . -806) (undo-tree-id17592 . -806) (undo-tree-id17593 . -806) (undo-tree-id17594 . -806) (undo-tree-id17595 . -806) (undo-tree-id17596 . -806) (undo-tree-id17597 . -806) (undo-tree-id17598 . -806) (undo-tree-id17599 . -816) (undo-tree-id17600 . -816) (undo-tree-id17601 . -816) (undo-tree-id17602 . -816) (undo-tree-id17603 . -816) (undo-tree-id17604 . -816) (undo-tree-id17605 . -816) (undo-tree-id17606 . -816) (undo-tree-id17607 . -816) (undo-tree-id17608 . -816) (undo-tree-id17609 . -816) (undo-tree-id17610 . -816) (undo-tree-id17611 . -816) (undo-tree-id17612 . -816) (undo-tree-id17613 . -816) (undo-tree-id17614 . -816) (undo-tree-id17615 . -816) (undo-tree-id17616 . -816) (undo-tree-id17617 . -816) (undo-tree-id17618 . -816) (undo-tree-id17619 . -816) (undo-tree-id17620 . -816) (undo-tree-id17621 . -868) (undo-tree-id17622 . -868) (undo-tree-id17623 . -868) (undo-tree-id17624 . -868) (undo-tree-id17625 . -868) (undo-tree-id17626 . -868) (undo-tree-id17627 . -868) (undo-tree-id17628 . -868) (undo-tree-id17629 . -868) (undo-tree-id17630 . -868) (undo-tree-id17631 . -868) (undo-tree-id17632 . -868) (undo-tree-id17633 . -868) (undo-tree-id17634 . -868) (undo-tree-id17635 . -868) (undo-tree-id17636 . -868) (undo-tree-id17637 . -868) (undo-tree-id17638 . -868) (undo-tree-id17639 . -868) (undo-tree-id17640 . -868) (undo-tree-id17641 . -868) (undo-tree-id17642 . -868) (undo-tree-id17643 . -869) (undo-tree-id17644 . -869) (undo-tree-id17645 . -869) (undo-tree-id17646 . -869) (undo-tree-id17647 . -869) (undo-tree-id17648 . -869) (undo-tree-id17649 . -869) (undo-tree-id17650 . -869) (undo-tree-id17651 . -869) (undo-tree-id17652 . -869) (undo-tree-id17653 . -869) (undo-tree-id17654 . -869) (undo-tree-id17655 . -869) (undo-tree-id17656 . -869) (undo-tree-id17657 . -869) (undo-tree-id17658 . -868) (undo-tree-id17659 . -868) (undo-tree-id17660 . -868) (undo-tree-id17661 . -868) (undo-tree-id17662 . -868) (undo-tree-id17663 . -868) (undo-tree-id17664 . -868) (undo-tree-id17665 . -868) (undo-tree-id17666 . -868) (undo-tree-id17667 . -868) (undo-tree-id17668 . -868) (undo-tree-id17669 . -868) (undo-tree-id17670 . -868) (undo-tree-id17671 . -868) (undo-tree-id17672 . -868) (undo-tree-id17673 . -868) (undo-tree-id17674 . -868) (undo-tree-id17675 . -868) (undo-tree-id17676 . -868) (undo-tree-id17677 . -868) (undo-tree-id17678 . -868) (undo-tree-id17679 . -868) (undo-tree-id17680 . -868) (undo-tree-id17681 . -868) (undo-tree-id17682 . -868) (undo-tree-id17683 . -868) (undo-tree-id17684 . -868) (undo-tree-id17685 . -868) (undo-tree-id17686 . -868) (undo-tree-id17687 . -868) (undo-tree-id17688 . -868) (undo-tree-id17689 . -868) (undo-tree-id17690 . -868) (undo-tree-id17691 . -868) (undo-tree-id17692 . -868) (undo-tree-id17693 . -868) (undo-tree-id17694 . -868) (undo-tree-id17695 . -868) (undo-tree-id17696 . -868) (undo-tree-id17697 . -868) (undo-tree-id17698 . -868) (undo-tree-id17699 . -868) (undo-tree-id17700 . -868) (undo-tree-id17701 . -868) (undo-tree-id17702 . -868) (undo-tree-id17703 . -868) (undo-tree-id17704 . -868) (undo-tree-id17705 . -869) (undo-tree-id17706 . -869) (undo-tree-id17707 . -869) (undo-tree-id17708 . -869) (undo-tree-id17709 . -869) (undo-tree-id17710 . -869) (undo-tree-id17711 . -869) (undo-tree-id17712 . -869) (undo-tree-id17713 . -869) (undo-tree-id17714 . -869) (undo-tree-id17715 . -869) (undo-tree-id17716 . -869) (undo-tree-id17717 . -869) (undo-tree-id17718 . -869) (undo-tree-id17719 . -869) (undo-tree-id17720 . -869) (undo-tree-id17721 . -868) (undo-tree-id17722 . -868) (undo-tree-id17723 . -868) (undo-tree-id17724 . -868) (undo-tree-id17725 . -868) (undo-tree-id17726 . -868) (undo-tree-id17727 . -868) (undo-tree-id17728 . -868) (undo-tree-id17729 . -868) (undo-tree-id17730 . -868) (undo-tree-id17731 . -868) (undo-tree-id17732 . -868) (undo-tree-id17733 . -868) (undo-tree-id17734 . -868) (undo-tree-id17735 . -868) (undo-tree-id17736 . -868) (undo-tree-id17737 . -868) (undo-tree-id17738 . -868) (undo-tree-id17739 . -868) (undo-tree-id17740 . -869) (undo-tree-id17741 . -869) (undo-tree-id17742 . -869) (undo-tree-id17743 . -869) (undo-tree-id17744 . -869) (undo-tree-id17745 . -869) (undo-tree-id17746 . -869) (undo-tree-id17747 . -869) (undo-tree-id17748 . -869) (undo-tree-id17749 . -869) (undo-tree-id17750 . -869) (undo-tree-id17751 . -869) (undo-tree-id17752 . -869) (undo-tree-id17753 . -869) (undo-tree-id17754 . -869) (undo-tree-id17755 . -869) (undo-tree-id17756 . -869) (undo-tree-id17757 . -869) (undo-tree-id17758 . -869) (undo-tree-id17759 . -869) (undo-tree-id17760 . -869) (undo-tree-id17761 . -869) (undo-tree-id17762 . -869) (undo-tree-id17763 . -869) (undo-tree-id17764 . -869) (undo-tree-id17765 . -869) (undo-tree-id17766 . -869) (undo-tree-id17767 . -869) (undo-tree-id17768 . -869) (undo-tree-id17769 . -869) (undo-tree-id17770 . -869) (undo-tree-id17771 . -869) (undo-tree-id17772 . -869) (undo-tree-id17773 . -804) (2527 . 3331) (#(" but to get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100, the second contains characters 1 to 101, and so on. To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding), we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters, 99 characters, and so on down to 1 character). The window() method creates a dataset that contains windows, each of which is also represented as a dataset. It’s a nested dataset, analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 8 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 41 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 78 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 79 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 81 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 82 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 83 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 151 152 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 152 226 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 226 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 227 237 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 237 300 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 301 312 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 312 313 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t invisible t) 313 322 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 322 364 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 364 365 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 365 435 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 435 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 436 437 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 437 504 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 504 505 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 505 582 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 582 583 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 583 654 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 654 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 655 730 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 730 731 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 731 801 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 801 802 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t)) . 2592) (undo-tree-id17774 . 802) (undo-tree-id17775 . -1) (undo-tree-id17776 . 48) (undo-tree-id17777 . -761) (undo-tree-id17778 . -754) (undo-tree-id17779 . -754) (undo-tree-id17780 . -754) (undo-tree-id17781 . -754) (undo-tree-id17782 . -754) (undo-tree-id17783 . -754) (undo-tree-id17784 . -754) (undo-tree-id17785 . -754) (undo-tree-id17786 . -675) (undo-tree-id17787 . -675) (undo-tree-id17788 . -675) (undo-tree-id17789 . -675) (undo-tree-id17790 . -675) (undo-tree-id17791 . -675) (undo-tree-id17792 . -675) (undo-tree-id17793 . -675) (undo-tree-id17794 . -675) (undo-tree-id17795 . -675) (undo-tree-id17796 . -675) (undo-tree-id17797 . -675) (undo-tree-id17798 . -675) (undo-tree-id17799 . -675) (undo-tree-id17800 . -675) (undo-tree-id17801 . -598) (undo-tree-id17802 . -598) (undo-tree-id17803 . -598) (undo-tree-id17804 . -598) (undo-tree-id17805 . -598) (undo-tree-id17806 . -598) (undo-tree-id17807 . -598) (undo-tree-id17808 . -598) (undo-tree-id17809 . -519) (undo-tree-id17810 . -519) (undo-tree-id17811 . -519) (undo-tree-id17812 . -519) (undo-tree-id17813 . -519) (undo-tree-id17814 . -519) (undo-tree-id17815 . -519) (undo-tree-id17816 . -519) (undo-tree-id17817 . -440) (undo-tree-id17818 . -440) (undo-tree-id17819 . -440) (undo-tree-id17820 . -440) (undo-tree-id17821 . -440) (undo-tree-id17822 . -440) (undo-tree-id17823 . -440) (undo-tree-id17824 . -440) (undo-tree-id17825 . -365) (undo-tree-id17826 . -365) (undo-tree-id17827 . -365) (undo-tree-id17828 . -365) (undo-tree-id17829 . -365) (undo-tree-id17830 . -365) (undo-tree-id17831 . -365) (undo-tree-id17832 . -365) (undo-tree-id17833 . -287) (undo-tree-id17834 . -287) (undo-tree-id17835 . -287) (undo-tree-id17836 . -287) (undo-tree-id17837 . -287) (undo-tree-id17838 . -287) (undo-tree-id17839 . -287) (undo-tree-id17840 . -287) (undo-tree-id17841 . -207) (undo-tree-id17842 . -207) (undo-tree-id17843 . -207) (undo-tree-id17844 . -207) (undo-tree-id17845 . -207) (undo-tree-id17846 . -207) (undo-tree-id17847 . -207) (undo-tree-id17848 . -207) (undo-tree-id17849 . -127) (undo-tree-id17850 . -127) (undo-tree-id17851 . -127) (undo-tree-id17852 . -127) (undo-tree-id17853 . -127) (undo-tree-id17854 . -127) (undo-tree-id17855 . -127) (undo-tree-id17856 . -127) (undo-tree-id17857 . -53) (undo-tree-id17858 . -53) (undo-tree-id17859 . -53) (undo-tree-id17860 . -53) (undo-tree-id17861 . -53) (undo-tree-id17862 . -53) (undo-tree-id17863 . -53) (undo-tree-id17864 . -53) (undo-tree-id17865 . -3) (undo-tree-id17866 . -3) (undo-tree-id17867 . -3) (undo-tree-id17868 . -3) (undo-tree-id17869 . -3) (undo-tree-id17870 . -3) (undo-tree-id17871 . -3) (undo-tree-id17872 . -3) (undo-tree-id17873 . -6) (undo-tree-id17874 . -6) (undo-tree-id17875 . -6) (undo-tree-id17876 . -6) (undo-tree-id17877 . -6) (undo-tree-id17878 . -6) (undo-tree-id17879 . -6) (undo-tree-id17880 . -6) (undo-tree-id17881 . -6) (undo-tree-id17882 . -6) (undo-tree-id17883 . -6) (undo-tree-id17884 . -6) (undo-tree-id17885 . -6) (undo-tree-id17886 . -6) (undo-tree-id17887 . -6) (undo-tree-id17888 . -6) (undo-tree-id17889 . -6) (undo-tree-id17890 . -6) (undo-tree-id17891 . -6) (undo-tree-id17892 . -6) (undo-tree-id17893 . -6) (undo-tree-id17894 . -6) (undo-tree-id17895 . -6) (undo-tree-id17896 . -6) (undo-tree-id17897 . -6) (undo-tree-id17898 . -6) (undo-tree-id17899 . -6) (undo-tree-id17900 . -6) (undo-tree-id17901 . -6) (undo-tree-id17902 . -6) (undo-tree-id17903 . -6) (undo-tree-id17904 . -6) (undo-tree-id17905 . -6) (undo-tree-id17906 . -6) (undo-tree-id17907 . -6) (undo-tree-id17908 . -6) (undo-tree-id17909 . -5) (undo-tree-id17910 . -5) (undo-tree-id17911 . -5) (undo-tree-id17912 . -5) (undo-tree-id17913 . -5) (undo-tree-id17914 . -5) (undo-tree-id17915 . -5) (undo-tree-id17916 . -5) (undo-tree-id17917 . -5) (undo-tree-id17918 . -5) (undo-tree-id17919 . -5) (undo-tree-id17920 . -5) (undo-tree-id17921 . -5) (undo-tree-id17922 . -5) (undo-tree-id17923 . -5) (undo-tree-id17924 . -5) (undo-tree-id17925 . -5) (undo-tree-id17926 . -5) (undo-tree-id17927 . -5) (undo-tree-id17928 . -5) (undo-tree-id17929 . -5) (undo-tree-id17930 . -5) (undo-tree-id17931 . -1) (undo-tree-id17932 . -1) (undo-tree-id17933 . -1) (undo-tree-id17934 . -1) (undo-tree-id17935 . -1) (undo-tree-id17936 . -1) (undo-tree-id17937 . -1) (undo-tree-id17938 . -1) (undo-tree-id17939 . -1) (undo-tree-id17940 . -1) (undo-tree-id17941 . -1) (undo-tree-id17942 . -1) (undo-tree-id17943 . -1) (undo-tree-id17944 . -1) (undo-tree-id17945 . -1) (undo-tree-id17946 . -1) (undo-tree-id17947 . -1) (undo-tree-id17948 . -1) (undo-tree-id17949 . -1) (undo-tree-id17950 . -1) (undo-tree-id17951 . -1) (undo-tree-id17952 . -1) (undo-tree-id17953 . -1) (undo-tree-id17954 . -1) (undo-tree-id17955 . -1) (undo-tree-id17956 . -1) (undo-tree-id17957 . -1) (undo-tree-id17958 . -1) (undo-tree-id17959 . -1) (undo-tree-id17960 . -1) (undo-tree-id17961 . -1) (undo-tree-id17962 . -1) (undo-tree-id17963 . -1) (undo-tree-id17964 . -1) (undo-tree-id17965 . -1) (undo-tree-id17966 . -1) (undo-tree-id17967 . -1) (undo-tree-id17968 . -1) (undo-tree-id17969 . -1) (undo-tree-id17970 . -1) (undo-tree-id17971 . -1) (undo-tree-id17972 . -1) (undo-tree-id17973 . -1) (undo-tree-id17974 . -1) (undo-tree-id17975 . -1) (undo-tree-id17976 . -1) (undo-tree-id17977 . -1) (undo-tree-id17978 . -1) (undo-tree-id17979 . -1) (undo-tree-id17980 . -1) (undo-tree-id17981 . -1) (undo-tree-id17982 . -1) (undo-tree-id17983 . -1) (undo-tree-id17984 . -1) (undo-tree-id17985 . -1) (undo-tree-id17986 . -1) (undo-tree-id17987 . -1) (undo-tree-id17988 . -1) (undo-tree-id17989 . -1) (undo-tree-id17990 . -1) (undo-tree-id17991 . -1) (undo-tree-id17992 . -1) (undo-tree-id17993 . -1) (undo-tree-id17994 . -1) (undo-tree-id17995 . -1) (undo-tree-id17996 . -1) (undo-tree-id17997 . -1) (undo-tree-id17998 . -1) (undo-tree-id17999 . -1) (undo-tree-id18000 . -1) 2593) nil (25767 5457 446037 128000) 0 nil])
([nil nil ((3600 . 3601)) nil (25767 5457 443966 628000) 0 nil])
([nil nil ((#("but " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19376 . -3) (undo-tree-id19377 . -3) (undo-tree-id19378 . 4) (undo-tree-id19379 . -3) (undo-tree-id19380 . -4) (undo-tree-id19381 . -3) (undo-tree-id19382 . -2) (undo-tree-id19383 . -2) (undo-tree-id19384 . -2) (undo-tree-id19385 . -2) (undo-tree-id19386 . -2) (undo-tree-id19387 . -2) (undo-tree-id19388 . -2) (undo-tree-id19389 . -2) (undo-tree-id19390 . -2) (undo-tree-id19391 . -2) (undo-tree-id19392 . -2) (undo-tree-id19393 . -2) (undo-tree-id19394 . -2) (undo-tree-id19395 . -2) (undo-tree-id19396 . -2) (undo-tree-id19397 . -2) (undo-tree-id19398 . -2) (undo-tree-id19399 . -2) (undo-tree-id19400 . -2) (undo-tree-id19401 . -2) (undo-tree-id19402 . -2) (undo-tree-id19403 . -2) (undo-tree-id19404 . -4) (undo-tree-id19405 . -4) (undo-tree-id19406 . -4) (undo-tree-id19407 . -4) (undo-tree-id19408 . -4) (undo-tree-id19409 . -4) (undo-tree-id19410 . -4) (undo-tree-id19411 . -4) (undo-tree-id19412 . -4) (undo-tree-id19413 . -4) (undo-tree-id19414 . -4) (undo-tree-id19415 . -4) (undo-tree-id19416 . -4) (undo-tree-id19417 . -4) (undo-tree-id19418 . -4) (undo-tree-id19419 . -4) (undo-tree-id19420 . -4) (undo-tree-id19421 . -4) (undo-tree-id19422 . -4) (undo-tree-id19423 . -4) (undo-tree-id19424 . -4) (undo-tree-id19425 . -4) (undo-tree-id19426 . -3) (undo-tree-id19427 . -3) (undo-tree-id19428 . -3) (undo-tree-id19429 . -3) (undo-tree-id19430 . -3) (undo-tree-id19431 . -3) (undo-tree-id19432 . -3) (undo-tree-id19433 . -3) (undo-tree-id19434 . -3) (undo-tree-id19435 . -3) (undo-tree-id19436 . -3) (undo-tree-id19437 . -3) (undo-tree-id19438 . -3) (undo-tree-id19439 . -3) (undo-tree-id19440 . -3) (undo-tree-id19441 . -3) (undo-tree-id19442 . -3) (undo-tree-id19443 . -3) (undo-tree-id19444 . -3) (undo-tree-id19445 . -3) (undo-tree-id19446 . -3) (undo-tree-id19447 . -3) (undo-tree-id19448 . -3) (undo-tree-id19449 . -4) (undo-tree-id19450 . -4) (undo-tree-id19451 . -4) 2598 (t 25767 5457 474431 531000)) nil (25767 5478 66270 0) 0 nil])
([nil nil ((2595 . 2596) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595)) nil (25767 5478 66199 941000) 0 nil])
([nil nil ((#("To get the largest possible training set we use shift=1 so that the first window contains characters 0 to 100" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 3 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 36 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 74 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 76 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 77 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 78 109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19483 . -108) (undo-tree-id19484 . 108) (undo-tree-id19485 . 109) (undo-tree-id19486 . -1) (undo-tree-id19487 . -1) (undo-tree-id19488 . -1) (undo-tree-id19489 . -1) (undo-tree-id19490 . -1) (undo-tree-id19491 . -1) (undo-tree-id19492 . -1) (undo-tree-id19493 . -1) (undo-tree-id19494 . -1) (undo-tree-id19495 . -1) (undo-tree-id19496 . -1) (undo-tree-id19497 . -1) (undo-tree-id19498 . -1) (undo-tree-id19499 . -1) (undo-tree-id19500 . -1) (undo-tree-id19501 . -5) (undo-tree-id19502 . -5) (undo-tree-id19503 . -5) (undo-tree-id19504 . -5) (undo-tree-id19505 . -5) (undo-tree-id19506 . -5) (undo-tree-id19507 . -5) (undo-tree-id19508 . -5) (undo-tree-id19509 . -5) (undo-tree-id19510 . -5) (undo-tree-id19511 . -5) (undo-tree-id19512 . -5) (undo-tree-id19513 . -5) (undo-tree-id19514 . -5) (undo-tree-id19515 . -5) (undo-tree-id19516 . -9) (undo-tree-id19517 . -9) (undo-tree-id19518 . -9) (undo-tree-id19519 . -9) (undo-tree-id19520 . -9) (undo-tree-id19521 . -9) (undo-tree-id19522 . -9) (undo-tree-id19523 . -9) (undo-tree-id19524 . -9) (undo-tree-id19525 . -9) (undo-tree-id19526 . -9) (undo-tree-id19527 . -9) (undo-tree-id19528 . -9) (undo-tree-id19529 . -9) (undo-tree-id19530 . -9) (undo-tree-id19531 . -17) (undo-tree-id19532 . -17) (undo-tree-id19533 . -17) (undo-tree-id19534 . -17) (undo-tree-id19535 . -17) (undo-tree-id19536 . -17) (undo-tree-id19537 . -17) (undo-tree-id19538 . -17) (undo-tree-id19539 . -17) (undo-tree-id19540 . -17) (undo-tree-id19541 . -17) (undo-tree-id19542 . -17) (undo-tree-id19543 . -17) (undo-tree-id19544 . -17) (undo-tree-id19545 . -17) (undo-tree-id19546 . -26) (undo-tree-id19547 . -26) (undo-tree-id19548 . -26) (undo-tree-id19549 . -26) (undo-tree-id19550 . -26) (undo-tree-id19551 . -26) (undo-tree-id19552 . -26) (undo-tree-id19553 . -26) (undo-tree-id19554 . -26) (undo-tree-id19555 . -26) (undo-tree-id19556 . -26) (undo-tree-id19557 . -26) (undo-tree-id19558 . -26) (undo-tree-id19559 . -26) (undo-tree-id19560 . -26) (undo-tree-id19561 . -35) (undo-tree-id19562 . -35) (undo-tree-id19563 . -35) (undo-tree-id19564 . -35) (undo-tree-id19565 . -35) (undo-tree-id19566 . -35) (undo-tree-id19567 . -35) (undo-tree-id19568 . -35) (undo-tree-id19569 . -35) (undo-tree-id19570 . -35) (undo-tree-id19571 . -35) (undo-tree-id19572 . -35) (undo-tree-id19573 . -35) (undo-tree-id19574 . -35) (undo-tree-id19575 . -35) (undo-tree-id19576 . -39) (undo-tree-id19577 . -39) (undo-tree-id19578 . -39) (undo-tree-id19579 . -39) (undo-tree-id19580 . -39) (undo-tree-id19581 . -39) (undo-tree-id19582 . -39) (undo-tree-id19583 . -39) (undo-tree-id19584 . -39) (undo-tree-id19585 . -39) (undo-tree-id19586 . -39) (undo-tree-id19587 . -39) (undo-tree-id19588 . -39) (undo-tree-id19589 . -39) (undo-tree-id19590 . -39) (undo-tree-id19591 . -39) (undo-tree-id19592 . -39) (undo-tree-id19593 . -39) (undo-tree-id19594 . -39) (undo-tree-id19595 . -39) (undo-tree-id19596 . -39) (undo-tree-id19597 . -39) (undo-tree-id19598 . -39) (undo-tree-id19599 . -39) (undo-tree-id19600 . -39) (undo-tree-id19601 . -39) (undo-tree-id19602 . -39) (undo-tree-id19603 . -39) (undo-tree-id19604 . -39) (undo-tree-id19605 . -39) (undo-tree-id19606 . -39) (undo-tree-id19607 . -39) (undo-tree-id19608 . -39) (undo-tree-id19609 . -39) (undo-tree-id19610 . -39) (undo-tree-id19611 . -39) (undo-tree-id19612 . -42) (undo-tree-id19613 . -42) (undo-tree-id19614 . -42) (undo-tree-id19615 . -42) (undo-tree-id19616 . -42) (undo-tree-id19617 . -42) (undo-tree-id19618 . -42) (undo-tree-id19619 . -42) (undo-tree-id19620 . -42) (undo-tree-id19621 . -42) (undo-tree-id19622 . -42) (undo-tree-id19623 . -42) (undo-tree-id19624 . -42) (undo-tree-id19625 . -42) (undo-tree-id19626 . -42) (undo-tree-id19627 . -46) (undo-tree-id19628 . -46) (undo-tree-id19629 . -46) (undo-tree-id19630 . -46) (undo-tree-id19631 . -46) (undo-tree-id19632 . -46) (undo-tree-id19633 . -46) (undo-tree-id19634 . -46) (undo-tree-id19635 . -46) (undo-tree-id19636 . -46) (undo-tree-id19637 . -46) (undo-tree-id19638 . -46) (undo-tree-id19639 . -46) (undo-tree-id19640 . -46) (undo-tree-id19641 . -46) (undo-tree-id19642 . -52) (undo-tree-id19643 . -52) (undo-tree-id19644 . -52) (undo-tree-id19645 . -52) (undo-tree-id19646 . -52) (undo-tree-id19647 . -52) (undo-tree-id19648 . -52) (undo-tree-id19649 . -52) (undo-tree-id19650 . -52) (undo-tree-id19651 . -52) (undo-tree-id19652 . -52) (undo-tree-id19653 . -52) (undo-tree-id19654 . -52) (undo-tree-id19655 . -52) (undo-tree-id19656 . -52) (undo-tree-id19657 . -48) (undo-tree-id19658 . -48) (undo-tree-id19659 . -48) (undo-tree-id19660 . -48) (undo-tree-id19661 . -48) (undo-tree-id19662 . -48) (undo-tree-id19663 . -48) (undo-tree-id19664 . -48) (undo-tree-id19665 . -48) (undo-tree-id19666 . -48) (undo-tree-id19667 . -48) (undo-tree-id19668 . -48) (undo-tree-id19669 . -48) (undo-tree-id19670 . -48) (undo-tree-id19671 . -48) (undo-tree-id19672 . -52) (undo-tree-id19673 . -52) (undo-tree-id19674 . -52) (undo-tree-id19675 . -52) (undo-tree-id19676 . -52) (undo-tree-id19677 . -52) (undo-tree-id19678 . -52) (undo-tree-id19679 . -52) (undo-tree-id19680 . -52) (undo-tree-id19681 . -52) (undo-tree-id19682 . -52) (undo-tree-id19683 . -52) (undo-tree-id19684 . -52) (undo-tree-id19685 . -52) (undo-tree-id19686 . -52) (undo-tree-id19687 . -52) (undo-tree-id19688 . -52) (undo-tree-id19689 . -52) (undo-tree-id19690 . -52) (undo-tree-id19691 . -52) (undo-tree-id19692 . -52) (undo-tree-id19693 . -52) (undo-tree-id19694 . -52) (undo-tree-id19695 . -52) (undo-tree-id19696 . -52) (undo-tree-id19697 . -52) (undo-tree-id19698 . -52) (undo-tree-id19699 . -52) (undo-tree-id19700 . -52) (undo-tree-id19701 . -52) (undo-tree-id19702 . -52) (undo-tree-id19703 . -52) (undo-tree-id19704 . -52) (undo-tree-id19705 . -52) (undo-tree-id19706 . -52) (undo-tree-id19707 . -52) (undo-tree-id19708 . -53) (undo-tree-id19709 . -53) (undo-tree-id19710 . -53) (undo-tree-id19711 . -53) (undo-tree-id19712 . -53) (undo-tree-id19713 . -53) (undo-tree-id19714 . -53) (undo-tree-id19715 . -53) (undo-tree-id19716 . -53) (undo-tree-id19717 . -53) (undo-tree-id19718 . -53) (undo-tree-id19719 . -53) (undo-tree-id19720 . -53) (undo-tree-id19721 . -53) (undo-tree-id19722 . -53) (undo-tree-id19723 . -54) (undo-tree-id19724 . -54) (undo-tree-id19725 . -54) (undo-tree-id19726 . -54) (undo-tree-id19727 . -54) (undo-tree-id19728 . -54) (undo-tree-id19729 . -54) (undo-tree-id19730 . -54) (undo-tree-id19731 . -54) (undo-tree-id19732 . -54) (undo-tree-id19733 . -54) (undo-tree-id19734 . -54) (undo-tree-id19735 . -54) (undo-tree-id19736 . -54) (undo-tree-id19737 . -54) (undo-tree-id19738 . -57) (undo-tree-id19739 . -57) (undo-tree-id19740 . -57) (undo-tree-id19741 . -57) (undo-tree-id19742 . -57) (undo-tree-id19743 . -57) (undo-tree-id19744 . -57) (undo-tree-id19745 . -57) (undo-tree-id19746 . -57) (undo-tree-id19747 . -57) (undo-tree-id19748 . -57) (undo-tree-id19749 . -57) (undo-tree-id19750 . -57) (undo-tree-id19751 . -57) (undo-tree-id19752 . -57) (undo-tree-id19753 . -56) (undo-tree-id19754 . -56) (undo-tree-id19755 . -56) (undo-tree-id19756 . -56) (undo-tree-id19757 . -56) (undo-tree-id19758 . -56) (undo-tree-id19759 . -56) (undo-tree-id19760 . -56) (undo-tree-id19761 . -56) (undo-tree-id19762 . -56) (undo-tree-id19763 . -56) (undo-tree-id19764 . -56) (undo-tree-id19765 . -56) (undo-tree-id19766 . -56) (undo-tree-id19767 . -56) (undo-tree-id19768 . -56) (undo-tree-id19769 . -56) (undo-tree-id19770 . -56) (undo-tree-id19771 . -56) (undo-tree-id19772 . -56) (undo-tree-id19773 . -56) (undo-tree-id19774 . -56) (undo-tree-id19775 . -56) (undo-tree-id19776 . -56) (undo-tree-id19777 . -56) (undo-tree-id19778 . -56) (undo-tree-id19779 . -56) (undo-tree-id19780 . -56) (undo-tree-id19781 . -56) (undo-tree-id19782 . -56) (undo-tree-id19783 . -56) (undo-tree-id19784 . -56) (undo-tree-id19785 . -56) (undo-tree-id19786 . -56) (undo-tree-id19787 . -56) (undo-tree-id19788 . -56) (undo-tree-id19789 . -56) (undo-tree-id19790 . -56) (undo-tree-id19791 . -56) (undo-tree-id19792 . -56) (undo-tree-id19793 . -56) (undo-tree-id19794 . -56) (undo-tree-id19795 . -56) (undo-tree-id19796 . -56) (undo-tree-id19797 . -56) (undo-tree-id19798 . -56) (undo-tree-id19799 . -56) (undo-tree-id19800 . -56) (undo-tree-id19801 . -56) (undo-tree-id19802 . -56) (undo-tree-id19803 . -56) (undo-tree-id19804 . -56) (undo-tree-id19805 . -56) (undo-tree-id19806 . -56) (undo-tree-id19807 . -56) (undo-tree-id19808 . -56) (undo-tree-id19809 . -56) (undo-tree-id19810 . -56) (undo-tree-id19811 . -56) (undo-tree-id19812 . -56) (undo-tree-id19813 . -56) (undo-tree-id19814 . -56) (undo-tree-id19815 . -56) (undo-tree-id19816 . -56) (undo-tree-id19817 . -56) (undo-tree-id19818 . -56) (undo-tree-id19819 . -56) (undo-tree-id19820 . -56) (undo-tree-id19821 . -56) (undo-tree-id19822 . -56) (undo-tree-id19823 . -56) (undo-tree-id19824 . -56) (undo-tree-id19825 . -56) (undo-tree-id19826 . -56) (undo-tree-id19827 . -56) (undo-tree-id19828 . -56) (undo-tree-id19829 . -56) (undo-tree-id19830 . -56) (undo-tree-id19831 . -56) (undo-tree-id19832 . -56) (undo-tree-id19833 . -56) (undo-tree-id19834 . -59) (undo-tree-id19835 . -59) (undo-tree-id19836 . -59) (undo-tree-id19837 . -59) (undo-tree-id19838 . -59) (undo-tree-id19839 . -59) (undo-tree-id19840 . -59) (undo-tree-id19841 . -59) (undo-tree-id19842 . -59) (undo-tree-id19843 . -59) (undo-tree-id19844 . -59) (undo-tree-id19845 . -59) (undo-tree-id19846 . -59) (undo-tree-id19847 . -59) (undo-tree-id19848 . -59) (undo-tree-id19849 . -64) (undo-tree-id19850 . -64) (undo-tree-id19851 . -64) (undo-tree-id19852 . -64) (undo-tree-id19853 . -64) (undo-tree-id19854 . -64) (undo-tree-id19855 . -64) (undo-tree-id19856 . -64) (undo-tree-id19857 . -64) (undo-tree-id19858 . -64) (undo-tree-id19859 . -64) (undo-tree-id19860 . -64) (undo-tree-id19861 . -64) (undo-tree-id19862 . -64) (undo-tree-id19863 . -64) (undo-tree-id19864 . -68) (undo-tree-id19865 . -68) (undo-tree-id19866 . -68) (undo-tree-id19867 . -68) (undo-tree-id19868 . -68) (undo-tree-id19869 . -68) (undo-tree-id19870 . -68) (undo-tree-id19871 . -68) (undo-tree-id19872 . -68) (undo-tree-id19873 . -68) (undo-tree-id19874 . -68) (undo-tree-id19875 . -68) (undo-tree-id19876 . -68) (undo-tree-id19877 . -68) (undo-tree-id19878 . -68) (undo-tree-id19879 . -74) (undo-tree-id19880 . -74) (undo-tree-id19881 . -74) (undo-tree-id19882 . -74) (undo-tree-id19883 . -74) (undo-tree-id19884 . -74) (undo-tree-id19885 . -74) (undo-tree-id19886 . -74) (undo-tree-id19887 . -74) (undo-tree-id19888 . -74) (undo-tree-id19889 . -74) (undo-tree-id19890 . -74) (undo-tree-id19891 . -74) (undo-tree-id19892 . -74) (undo-tree-id19893 . -74) (undo-tree-id19894 . -74) (undo-tree-id19895 . -74) (undo-tree-id19896 . -74) (undo-tree-id19897 . -74) (undo-tree-id19898 . -74) (undo-tree-id19899 . -74) (undo-tree-id19900 . -74) (undo-tree-id19901 . -109) (t 25767 5478 94456 952000)) nil (25767 5511 183740 607000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19479 . 1) (undo-tree-id19480 . 1) (undo-tree-id19481 . -1) (undo-tree-id19482 . -1)) nil (25767 5511 183258 98000) 0 nil])
([nil nil ((#(" the second contains characters 1 to 101" 0 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 37 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19475 . -39) (undo-tree-id19476 . 40) (undo-tree-id19477 . 40) (undo-tree-id19478 . -40)) nil (25767 5511 183254 523000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19471 . 1) (undo-tree-id19472 . 1) (undo-tree-id19473 . -1) (undo-tree-id19474 . -1)) nil (25767 5511 183251 389000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19468 . 1) (undo-tree-id19469 . 1) (undo-tree-id19470 . -1)) nil (25767 5511 183247 396000) 0 nil])
([nil nil ((#("and " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19464 . -3) (undo-tree-id19465 . 4) (undo-tree-id19466 . 4) (undo-tree-id19467 . -4)) nil (25767 5511 183243 731000) 0 nil])
([nil nil ((#("so " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19460 . -2) (undo-tree-id19461 . 3) (undo-tree-id19462 . 3) (undo-tree-id19463 . -3)) nil (25767 5511 183238 565000) 0 nil])
([nil nil ((#("on" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19456 . -1) (undo-tree-id19457 . 2) (undo-tree-id19458 . 2) (undo-tree-id19459 . -2)) nil (25767 5511 183152 43000) 0 nil])
([nil nil ((#(". " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19452 . -1) (undo-tree-id19453 . 2) (undo-tree-id19454 . 2) (undo-tree-id19455 . -2)) nil (25767 5511 183145 68000) 0 nil])
([nil nil ((3353 . 3354) (t 25767 5511 214512 367000)) nil (25767 5576 277913 38000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-multiline t face (org-block))) . 3267) (undo-tree-id20366 . -1) (undo-tree-id20367 . -1)) nil (25767 5576 277911 936000) 0 nil])
([nil nil ((#("n" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block))) . 3267) (undo-tree-id20256 . -1) (undo-tree-id20257 . -1) (undo-tree-id20258 . -1) (undo-tree-id20259 . -1) (undo-tree-id20260 . -1) (undo-tree-id20261 . -1) (undo-tree-id20262 . -1) (undo-tree-id20263 . -1) (undo-tree-id20264 . -1) (undo-tree-id20265 . -1) (undo-tree-id20266 . -1) (undo-tree-id20267 . -1) (undo-tree-id20268 . -1) (undo-tree-id20269 . -1) (undo-tree-id20270 . -1) (undo-tree-id20271 . -1) (undo-tree-id20272 . -1) (undo-tree-id20273 . -1) (undo-tree-id20274 . -1) (undo-tree-id20275 . -1) (undo-tree-id20276 . -1) (undo-tree-id20277 . -1) (undo-tree-id20278 . -1) (undo-tree-id20279 . -1) (undo-tree-id20280 . -1) (undo-tree-id20281 . -1) (undo-tree-id20282 . -1) (undo-tree-id20283 . -1) (undo-tree-id20284 . -1) (undo-tree-id20285 . -1) (undo-tree-id20286 . -1) (undo-tree-id20287 . -1) (undo-tree-id20288 . -1) (undo-tree-id20289 . -1) (undo-tree-id20290 . -1) (undo-tree-id20291 . -1) (undo-tree-id20292 . -1) (undo-tree-id20293 . -1) (undo-tree-id20294 . -1) (undo-tree-id20295 . -1) (undo-tree-id20296 . -1) (undo-tree-id20297 . -1) (undo-tree-id20298 . -1) (undo-tree-id20299 . -1) (undo-tree-id20300 . -1) (undo-tree-id20301 . -1) (undo-tree-id20302 . -1) (undo-tree-id20303 . -1) (undo-tree-id20304 . -1) (undo-tree-id20305 . -1) (undo-tree-id20306 . -1) (undo-tree-id20307 . -1) (undo-tree-id20308 . -1) (undo-tree-id20309 . -1) (undo-tree-id20310 . -1) (undo-tree-id20311 . -1) (undo-tree-id20312 . -1) (undo-tree-id20313 . -1) (undo-tree-id20314 . -1) (undo-tree-id20315 . -1) (undo-tree-id20316 . -1) (undo-tree-id20317 . -1) (undo-tree-id20318 . -1) (undo-tree-id20319 . -1) (undo-tree-id20320 . -1) (undo-tree-id20321 . -1) (undo-tree-id20322 . -1) (undo-tree-id20323 . -1) (undo-tree-id20324 . -1) (undo-tree-id20325 . -1) (undo-tree-id20326 . -1) (undo-tree-id20327 . -1) (undo-tree-id20328 . -1) (undo-tree-id20329 . -1) (undo-tree-id20330 . -1) (undo-tree-id20331 . -1) (undo-tree-id20332 . -1) (undo-tree-id20333 . -1) (undo-tree-id20334 . -1) (undo-tree-id20335 . -1) (undo-tree-id20336 . -1) (undo-tree-id20337 . -1) (undo-tree-id20338 . -1) (undo-tree-id20339 . -1) (undo-tree-id20340 . -1) (undo-tree-id20341 . -1) (undo-tree-id20342 . -1) (undo-tree-id20343 . -1) (undo-tree-id20344 . -1) (undo-tree-id20345 . -1) (undo-tree-id20346 . -1) (undo-tree-id20347 . -1) (undo-tree-id20348 . -1) (undo-tree-id20349 . -1) (undo-tree-id20350 . -1) (undo-tree-id20351 . -1) (undo-tree-id20352 . -1) (undo-tree-id20353 . -1) (undo-tree-id20354 . -1) (undo-tree-id20355 . -1) (undo-tree-id20356 . -1) (undo-tree-id20357 . -1) (undo-tree-id20358 . -1) (undo-tree-id20359 . -1) (undo-tree-id20360 . -1) (undo-tree-id20361 . -1) (undo-tree-id20362 . -1) (undo-tree-id20363 . -1) (undo-tree-id20364 . -1) (undo-tree-id20365 . -1)) nil (25767 5576 277906 869000) 0 nil])
([nil nil ((3267 . 3268) (#("_" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block))) . 3267) (undo-tree-id20255 . -1)) nil (25767 5576 277837 165000) 0 nil])
([nil nil ((#("To ensure that all windows are exactly 101 characters long (which will allow us to create batches without having to do any padding)" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 58 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 59 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 69 131 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19953 . -130) (undo-tree-id19954 . 131) (undo-tree-id19955 . -1) (undo-tree-id19956 . -1) (undo-tree-id19957 . -1) (undo-tree-id19958 . -1) (undo-tree-id19959 . -1) (undo-tree-id19960 . -1) (undo-tree-id19961 . -1) (undo-tree-id19962 . -1) (undo-tree-id19963 . -1) (undo-tree-id19964 . -1) (undo-tree-id19965 . -1) (undo-tree-id19966 . -1) (undo-tree-id19967 . -1) (undo-tree-id19968 . -1) (undo-tree-id19969 . -1) (undo-tree-id19970 . -8) (undo-tree-id19971 . -8) (undo-tree-id19972 . -8) (undo-tree-id19973 . -8) (undo-tree-id19974 . -8) (undo-tree-id19975 . -8) (undo-tree-id19976 . -8) (undo-tree-id19977 . -8) (undo-tree-id19978 . -8) (undo-tree-id19979 . -8) (undo-tree-id19980 . -8) (undo-tree-id19981 . -8) (undo-tree-id19982 . -8) (undo-tree-id19983 . -8) (undo-tree-id19984 . -8) (undo-tree-id19985 . -8) (undo-tree-id19986 . -8) (undo-tree-id19987 . -8) (undo-tree-id19988 . -8) (undo-tree-id19989 . -8) (undo-tree-id19990 . -8) (undo-tree-id19991 . -8) (undo-tree-id19992 . -8) (undo-tree-id19993 . -8) (undo-tree-id19994 . -8) (undo-tree-id19995 . -8) (undo-tree-id19996 . -8) (undo-tree-id19997 . -8) (undo-tree-id19998 . -8) (undo-tree-id19999 . -8) (undo-tree-id20000 . -8) (undo-tree-id20001 . -8) (undo-tree-id20002 . -8) (undo-tree-id20003 . -8) (undo-tree-id20004 . -8) (undo-tree-id20005 . -8) (undo-tree-id20006 . -8) (undo-tree-id20007 . -8) (undo-tree-id20008 . -8) (undo-tree-id20009 . -8) (undo-tree-id20010 . -8) (undo-tree-id20011 . -8) (undo-tree-id20012 . -8) (undo-tree-id20013 . -8) (undo-tree-id20014 . -8) (undo-tree-id20015 . -8) (undo-tree-id20016 . -8) (undo-tree-id20017 . -8) (undo-tree-id20018 . -8) (undo-tree-id20019 . -8) (undo-tree-id20020 . -8) (undo-tree-id20021 . -8) (undo-tree-id20022 . -8) (undo-tree-id20023 . -8) (undo-tree-id20024 . -8) (undo-tree-id20025 . -8) (undo-tree-id20026 . -8) (undo-tree-id20027 . -8) (undo-tree-id20028 . -8) (undo-tree-id20029 . -8) (undo-tree-id20030 . -13) (undo-tree-id20031 . -13) (undo-tree-id20032 . -13) (undo-tree-id20033 . -13) (undo-tree-id20034 . -13) (undo-tree-id20035 . -13) (undo-tree-id20036 . -13) (undo-tree-id20037 . -13) (undo-tree-id20038 . -13) (undo-tree-id20039 . -13) (undo-tree-id20040 . -13) (undo-tree-id20041 . -13) (undo-tree-id20042 . -13) (undo-tree-id20043 . -13) (undo-tree-id20044 . -13) (undo-tree-id20045 . -13) (undo-tree-id20046 . -13) (undo-tree-id20047 . -13) (undo-tree-id20048 . -13) (undo-tree-id20049 . -13) (undo-tree-id20050 . -13) (undo-tree-id20051 . -13) (undo-tree-id20052 . -17) (undo-tree-id20053 . -17) (undo-tree-id20054 . -17) (undo-tree-id20055 . -17) (undo-tree-id20056 . -17) (undo-tree-id20057 . -17) (undo-tree-id20058 . -17) (undo-tree-id20059 . -17) (undo-tree-id20060 . -17) (undo-tree-id20061 . -17) (undo-tree-id20062 . -17) (undo-tree-id20063 . -17) (undo-tree-id20064 . -17) (undo-tree-id20065 . -17) (undo-tree-id20066 . -17) (undo-tree-id20067 . -25) (undo-tree-id20068 . -25) (undo-tree-id20069 . -25) (undo-tree-id20070 . -25) (undo-tree-id20071 . -25) (undo-tree-id20072 . -25) (undo-tree-id20073 . -25) (undo-tree-id20074 . -25) (undo-tree-id20075 . -25) (undo-tree-id20076 . -25) (undo-tree-id20077 . -25) (undo-tree-id20078 . -25) (undo-tree-id20079 . -25) (undo-tree-id20080 . -25) (undo-tree-id20081 . -25) (undo-tree-id20082 . -29) (undo-tree-id20083 . -29) (undo-tree-id20084 . -29) (undo-tree-id20085 . -29) (undo-tree-id20086 . -29) (undo-tree-id20087 . -29) (undo-tree-id20088 . -29) (undo-tree-id20089 . -29) (undo-tree-id20090 . -29) (undo-tree-id20091 . -29) (undo-tree-id20092 . -29) (undo-tree-id20093 . -29) (undo-tree-id20094 . -29) (undo-tree-id20095 . -29) (undo-tree-id20096 . -29) (undo-tree-id20097 . -37) (undo-tree-id20098 . -37) (undo-tree-id20099 . -37) (undo-tree-id20100 . -37) (undo-tree-id20101 . -37) (undo-tree-id20102 . -37) (undo-tree-id20103 . -37) (undo-tree-id20104 . -37) (undo-tree-id20105 . -37) (undo-tree-id20106 . -37) (undo-tree-id20107 . -37) (undo-tree-id20108 . -37) (undo-tree-id20109 . -37) (undo-tree-id20110 . -37) (undo-tree-id20111 . -37) (undo-tree-id20112 . -31) (undo-tree-id20113 . -31) (undo-tree-id20114 . -31) (undo-tree-id20115 . -31) (undo-tree-id20116 . -31) (undo-tree-id20117 . -31) (undo-tree-id20118 . -31) (undo-tree-id20119 . -31) (undo-tree-id20120 . -31) (undo-tree-id20121 . -31) (undo-tree-id20122 . -31) (undo-tree-id20123 . -31) (undo-tree-id20124 . -31) (undo-tree-id20125 . -31) (undo-tree-id20126 . -31) (undo-tree-id20127 . -27) (undo-tree-id20128 . -27) (undo-tree-id20129 . -27) (undo-tree-id20130 . -27) (undo-tree-id20131 . -27) (undo-tree-id20132 . -27) (undo-tree-id20133 . -27) (undo-tree-id20134 . -27) (undo-tree-id20135 . -27) (undo-tree-id20136 . -27) (undo-tree-id20137 . -27) (undo-tree-id20138 . -27) (undo-tree-id20139 . -27) (undo-tree-id20140 . -27) (undo-tree-id20141 . -27) (undo-tree-id20142 . -19) (undo-tree-id20143 . -19) (undo-tree-id20144 . -19) (undo-tree-id20145 . -19) (undo-tree-id20146 . -19) (undo-tree-id20147 . -19) (undo-tree-id20148 . -19) (undo-tree-id20149 . -19) (undo-tree-id20150 . -19) (undo-tree-id20151 . -19) (undo-tree-id20152 . -19) (undo-tree-id20153 . -19) (undo-tree-id20154 . -19) (undo-tree-id20155 . -19) (undo-tree-id20156 . -19) (undo-tree-id20157 . -19) (undo-tree-id20158 . -19) (undo-tree-id20159 . -19) (undo-tree-id20160 . -19) (undo-tree-id20161 . -19) (undo-tree-id20162 . -19) (undo-tree-id20163 . -19) (undo-tree-id20164 . -15) (undo-tree-id20165 . -15) (undo-tree-id20166 . -15) (undo-tree-id20167 . -15) (undo-tree-id20168 . -15) (undo-tree-id20169 . -15) (undo-tree-id20170 . -15) (undo-tree-id20171 . -15) (undo-tree-id20172 . -15) (undo-tree-id20173 . -15) (undo-tree-id20174 . -15) (undo-tree-id20175 . -15) (undo-tree-id20176 . -15) (undo-tree-id20177 . -15) (undo-tree-id20178 . -15) (undo-tree-id20179 . -10) (undo-tree-id20180 . -10) (undo-tree-id20181 . -10) (undo-tree-id20182 . -10) (undo-tree-id20183 . -10) (undo-tree-id20184 . -10) (undo-tree-id20185 . -10) (undo-tree-id20186 . -10) (undo-tree-id20187 . -10) (undo-tree-id20188 . -10) (undo-tree-id20189 . -10) (undo-tree-id20190 . -10) (undo-tree-id20191 . -10) (undo-tree-id20192 . -10) (undo-tree-id20193 . -10) (undo-tree-id20194 . -3) (undo-tree-id20195 . -3) (undo-tree-id20196 . -3) (undo-tree-id20197 . -3) (undo-tree-id20198 . -3) (undo-tree-id20199 . -3) (undo-tree-id20200 . -3) (undo-tree-id20201 . -3) (undo-tree-id20202 . -3) (undo-tree-id20203 . -3) (undo-tree-id20204 . -3) (undo-tree-id20205 . -3) (undo-tree-id20206 . -3) (undo-tree-id20207 . -3) (undo-tree-id20208 . -3) (undo-tree-id20209 . -80) (undo-tree-id20210 . -80) (undo-tree-id20211 . -80) (undo-tree-id20212 . -80) (undo-tree-id20213 . -80) (undo-tree-id20214 . -80) (undo-tree-id20215 . -80) (undo-tree-id20216 . -80) (undo-tree-id20217 . -80) (undo-tree-id20218 . -80) (undo-tree-id20219 . -80) (undo-tree-id20220 . -80) (undo-tree-id20221 . -80) (undo-tree-id20222 . -80) (undo-tree-id20223 . -80) (undo-tree-id20224 . -80) (undo-tree-id20225 . -80) (undo-tree-id20226 . -80) (undo-tree-id20227 . -80) (undo-tree-id20228 . -80) (undo-tree-id20229 . -80) (undo-tree-id20230 . -80) (undo-tree-id20231 . -80) (undo-tree-id20232 . -80) (undo-tree-id20233 . -80) (undo-tree-id20234 . -80) (undo-tree-id20235 . -80) (undo-tree-id20236 . -80) (undo-tree-id20237 . -80) (undo-tree-id20238 . -80) (undo-tree-id20239 . -80) (undo-tree-id20240 . -80) (undo-tree-id20241 . -80) (undo-tree-id20242 . -80) (undo-tree-id20243 . -80) (undo-tree-id20244 . -80) (undo-tree-id20245 . -80) (undo-tree-id20246 . -80) (undo-tree-id20247 . -80) (undo-tree-id20248 . -80) (undo-tree-id20249 . -80) (undo-tree-id20250 . -80) (undo-tree-id20251 . -80) (undo-tree-id20252 . -80) (undo-tree-id20253 . -80) (undo-tree-id20254 . -131)) nil (25767 5576 277824 429000) 0 nil])
([nil nil ((#(", we set drop_remainder=True (otherwise the last 100 windows will contain 100 characters" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 2 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t invisible t) 14 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t display ((raise -0.3) (height 0.7))) 23 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 66 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19927 . -87) (undo-tree-id19928 . 88) (undo-tree-id19929 . -29) (undo-tree-id19930 . -29) (undo-tree-id19931 . -29) (undo-tree-id19932 . -29) (undo-tree-id19933 . -29) (undo-tree-id19934 . -29) (undo-tree-id19935 . -29) (undo-tree-id19936 . -29) (undo-tree-id19937 . -29) (undo-tree-id19938 . -29) (undo-tree-id19939 . -29) (undo-tree-id19940 . -29) (undo-tree-id19941 . -29) (undo-tree-id19942 . -29) (undo-tree-id19943 . -29) (undo-tree-id19944 . -29) (undo-tree-id19945 . -29) (undo-tree-id19946 . -29) (undo-tree-id19947 . -29) (undo-tree-id19948 . -29) (undo-tree-id19949 . -29) (undo-tree-id19950 . -29) (undo-tree-id19951 . -29) (undo-tree-id19952 . -88)) nil (25767 5576 277372 30000) 0 nil])
([nil nil ((#(", 99 characters, and so on down to 1 character)" 0 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19908 . -46) (undo-tree-id19909 . 47) (undo-tree-id19910 . -21) (undo-tree-id19911 . -21) (undo-tree-id19912 . -21) (undo-tree-id19913 . -21) (undo-tree-id19914 . -21) (undo-tree-id19915 . -21) (undo-tree-id19916 . -21) (undo-tree-id19917 . -21) (undo-tree-id19918 . -21) (undo-tree-id19919 . -21) (undo-tree-id19920 . -21) (undo-tree-id19921 . -21) (undo-tree-id19922 . -21) (undo-tree-id19923 . -21) (undo-tree-id19924 . -21) (undo-tree-id19925 . -21) (undo-tree-id19926 . -47)) nil (25767 5576 277272 639000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2595) (undo-tree-id19905 . 1) (undo-tree-id19906 . -1) (undo-tree-id19907 . -1)) nil (25767 5576 277257 948000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t)) . 2595) (undo-tree-id19902 . 1) (undo-tree-id19903 . -1) (undo-tree-id19904 . -1)) nil (25767 5576 277252 481000) 0 nil])
([nil nil ((#("each of which is also represented as a dataset. It’s" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 8 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2656) (undo-tree-id22699 . -51) (undo-tree-id22700 . -51) (undo-tree-id22701 . -51) (undo-tree-id22702 . -52) (undo-tree-id22703 . -51) (undo-tree-id22704 . -3) (undo-tree-id22705 . -3) (undo-tree-id22706 . -3) (undo-tree-id22707 . -3) (undo-tree-id22708 . -3) (undo-tree-id22709 . -3) (undo-tree-id22710 . -3) (undo-tree-id22711 . -3) (undo-tree-id22712 . -3) (undo-tree-id22713 . -3) (undo-tree-id22714 . -3) (undo-tree-id22715 . -3) (undo-tree-id22716 . -3) (undo-tree-id22717 . -3) (undo-tree-id22718 . -3) (undo-tree-id22719 . -3) (undo-tree-id22720 . -3) (undo-tree-id22721 . -3) (undo-tree-id22722 . -3) (undo-tree-id22723 . -3) (undo-tree-id22724 . -3) (undo-tree-id22725 . -3) (undo-tree-id22726 . -6) (undo-tree-id22727 . -6) (undo-tree-id22728 . -6) (undo-tree-id22729 . -6) (undo-tree-id22730 . -6) (undo-tree-id22731 . -6) (undo-tree-id22732 . -6) (undo-tree-id22733 . -6) (undo-tree-id22734 . -6) (undo-tree-id22735 . -6) (undo-tree-id22736 . -6) (undo-tree-id22737 . -6) (undo-tree-id22738 . -6) (undo-tree-id22739 . -6) (undo-tree-id22740 . -6) (undo-tree-id22741 . -6) (undo-tree-id22742 . -6) (undo-tree-id22743 . -6) (undo-tree-id22744 . -6) (undo-tree-id22745 . -6) (undo-tree-id22746 . -6) (undo-tree-id22747 . -6) (undo-tree-id22748 . -12) (undo-tree-id22749 . -12) (undo-tree-id22750 . -12) (undo-tree-id22751 . -12) (undo-tree-id22752 . -12) (undo-tree-id22753 . -12) (undo-tree-id22754 . -12) (undo-tree-id22755 . -12) (undo-tree-id22756 . -12) (undo-tree-id22757 . -12) (undo-tree-id22758 . -12) (undo-tree-id22759 . -12) (undo-tree-id22760 . -12) (undo-tree-id22761 . -12) (undo-tree-id22762 . -12) (undo-tree-id22763 . -12) (undo-tree-id22764 . -12) (undo-tree-id22765 . -12) (undo-tree-id22766 . -12) (undo-tree-id22767 . -12) (undo-tree-id22768 . -12) (undo-tree-id22769 . -12) (undo-tree-id22770 . -15) (undo-tree-id22771 . -15) (undo-tree-id22772 . -15) (undo-tree-id22773 . -15) (undo-tree-id22774 . -15) (undo-tree-id22775 . -15) (undo-tree-id22776 . -15) (undo-tree-id22777 . -15) (undo-tree-id22778 . -15) (undo-tree-id22779 . -15) (undo-tree-id22780 . -15) (undo-tree-id22781 . -15) (undo-tree-id22782 . -15) (undo-tree-id22783 . -15) (undo-tree-id22784 . -15) (undo-tree-id22785 . -15) (undo-tree-id22786 . -15) (undo-tree-id22787 . -15) (undo-tree-id22788 . -15) (undo-tree-id22789 . -15) (undo-tree-id22790 . -15) (undo-tree-id22791 . -15) (undo-tree-id22792 . -20) (undo-tree-id22793 . -20) (undo-tree-id22794 . -20) (undo-tree-id22795 . -20) (undo-tree-id22796 . -20) (undo-tree-id22797 . -20) (undo-tree-id22798 . -20) (undo-tree-id22799 . -20) (undo-tree-id22800 . -20) (undo-tree-id22801 . -20) (undo-tree-id22802 . -20) (undo-tree-id22803 . -20) (undo-tree-id22804 . -20) (undo-tree-id22805 . -20) (undo-tree-id22806 . -20) (undo-tree-id22807 . -20) (undo-tree-id22808 . -20) (undo-tree-id22809 . -20) (undo-tree-id22810 . -20) (undo-tree-id22811 . -20) (undo-tree-id22812 . -20) (undo-tree-id22813 . -20) (undo-tree-id22814 . -32) (undo-tree-id22815 . -32) (undo-tree-id22816 . -32) (undo-tree-id22817 . -32) (undo-tree-id22818 . -32) (undo-tree-id22819 . -32) (undo-tree-id22820 . -32) (undo-tree-id22821 . -32) (undo-tree-id22822 . -32) (undo-tree-id22823 . -32) (undo-tree-id22824 . -32) (undo-tree-id22825 . -32) (undo-tree-id22826 . -32) (undo-tree-id22827 . -32) (undo-tree-id22828 . -32) (undo-tree-id22829 . -32) (undo-tree-id22830 . -32) (undo-tree-id22831 . -32) (undo-tree-id22832 . -32) (undo-tree-id22833 . -32) (undo-tree-id22834 . -32) (undo-tree-id22835 . -32) (undo-tree-id22836 . -35) (undo-tree-id22837 . -35) (undo-tree-id22838 . -35) (undo-tree-id22839 . -35) (undo-tree-id22840 . -35) (undo-tree-id22841 . -35) (undo-tree-id22842 . -35) (undo-tree-id22843 . -35) (undo-tree-id22844 . -35) (undo-tree-id22845 . -35) (undo-tree-id22846 . -35) (undo-tree-id22847 . -35) (undo-tree-id22848 . -35) (undo-tree-id22849 . -35) (undo-tree-id22850 . -35) (undo-tree-id22851 . -35) (undo-tree-id22852 . -35) (undo-tree-id22853 . -35) (undo-tree-id22854 . -35) (undo-tree-id22855 . -35) (undo-tree-id22856 . -35) (undo-tree-id22857 . -35) (undo-tree-id22858 . -37) (undo-tree-id22859 . -37) (undo-tree-id22860 . -37) (undo-tree-id22861 . -37) (undo-tree-id22862 . -37) (undo-tree-id22863 . -37) (undo-tree-id22864 . -37) (undo-tree-id22865 . -37) (undo-tree-id22866 . -37) (undo-tree-id22867 . -37) (undo-tree-id22868 . -37) (undo-tree-id22869 . -37) (undo-tree-id22870 . -37) (undo-tree-id22871 . -37) (undo-tree-id22872 . -37) (undo-tree-id22873 . -37) (undo-tree-id22874 . -37) (undo-tree-id22875 . -37) (undo-tree-id22876 . -37) (undo-tree-id22877 . -37) (undo-tree-id22878 . -37) (undo-tree-id22879 . -37) (undo-tree-id22880 . -37) (undo-tree-id22881 . -37) (undo-tree-id22882 . -37) (undo-tree-id22883 . -37) (undo-tree-id22884 . -37) (undo-tree-id22885 . -37) (undo-tree-id22886 . -37) (undo-tree-id22887 . 13) (undo-tree-id22888 . -46) (undo-tree-id22889 . -45) (undo-tree-id22890 . -45) (undo-tree-id22891 . -45) (undo-tree-id22892 . -45) (undo-tree-id22893 . -45) (undo-tree-id22894 . -45) (undo-tree-id22895 . -45) (undo-tree-id22896 . -45) (undo-tree-id22897 . -45) (undo-tree-id22898 . -45) (undo-tree-id22899 . -45) (undo-tree-id22900 . -45) (undo-tree-id22901 . -45) (undo-tree-id22902 . -45) (undo-tree-id22903 . -45) (undo-tree-id22904 . -45) (undo-tree-id22905 . -45) (undo-tree-id22906 . -45) (undo-tree-id22907 . -45) (undo-tree-id22908 . -45) (undo-tree-id22909 . -45) (undo-tree-id22910 . -45) (undo-tree-id22911 . -46) (undo-tree-id22912 . -46) (undo-tree-id22913 . -46) (undo-tree-id22914 . -46) (undo-tree-id22915 . -46) (undo-tree-id22916 . -46) (undo-tree-id22917 . -46) (undo-tree-id22918 . -46) (undo-tree-id22919 . -46) (undo-tree-id22920 . -46) (undo-tree-id22921 . -46) (undo-tree-id22922 . -46) (undo-tree-id22923 . -46) (undo-tree-id22924 . -46) (undo-tree-id22925 . -46) (undo-tree-id22926 . -46) (undo-tree-id22927 . -46) (undo-tree-id22928 . -46) (undo-tree-id22929 . -46) (undo-tree-id22930 . -46) (undo-tree-id22931 . -46) (undo-tree-id22932 . -46) (undo-tree-id22933 . -49) (undo-tree-id22934 . -49) (undo-tree-id22935 . -49) (undo-tree-id22936 . -49) (undo-tree-id22937 . -49) (undo-tree-id22938 . -49) (undo-tree-id22939 . -49) (undo-tree-id22940 . -49) (undo-tree-id22941 . -49) (undo-tree-id22942 . -49) (undo-tree-id22943 . -49) (undo-tree-id22944 . -49) (undo-tree-id22945 . -49) (undo-tree-id22946 . -49) (undo-tree-id22947 . -49) (undo-tree-id22948 . -49) (undo-tree-id22949 . -49) (undo-tree-id22950 . -49) (undo-tree-id22951 . -49) (undo-tree-id22952 . -49) (undo-tree-id22953 . -49) (undo-tree-id22954 . -49) (undo-tree-id22955 . -50) (undo-tree-id22956 . -50) (undo-tree-id22957 . -50) (undo-tree-id22958 . -50) (undo-tree-id22959 . -50) (undo-tree-id22960 . -50) (undo-tree-id22961 . -50) (undo-tree-id22962 . -50) (undo-tree-id22963 . -50) (undo-tree-id22964 . -50) (undo-tree-id22965 . -50) (undo-tree-id22966 . -50) (undo-tree-id22967 . -50) (undo-tree-id22968 . -50) (undo-tree-id22969 . -50) (undo-tree-id22970 . -50) (undo-tree-id22971 . -50) (undo-tree-id22972 . -50) (undo-tree-id22973 . -50) (undo-tree-id22974 . -50) (undo-tree-id22975 . -50) (undo-tree-id22976 . -50) (undo-tree-id22977 . -51) (undo-tree-id22978 . -51) (undo-tree-id22979 . -51) (undo-tree-id22980 . -51) (undo-tree-id22981 . -51) (undo-tree-id22982 . -51) (undo-tree-id22983 . -51) (undo-tree-id22984 . -51) (undo-tree-id22985 . -51) (undo-tree-id22986 . -51) (undo-tree-id22987 . -51) (undo-tree-id22988 . -51) (undo-tree-id22989 . -51) (undo-tree-id22990 . -51) (undo-tree-id22991 . -51) (undo-tree-id22992 . -51) (undo-tree-id22993 . -51) (undo-tree-id22994 . -51) (undo-tree-id22995 . -51) (undo-tree-id22996 . -51) (undo-tree-id22997 . -51) (undo-tree-id22998 . -51) (undo-tree-id22999 . -51) (undo-tree-id23000 . -51) (undo-tree-id23001 . -51) (undo-tree-id23002 . -51) (undo-tree-id23003 . -51) (undo-tree-id23004 . -51) (undo-tree-id23005 . -51) (undo-tree-id23006 . -51) (undo-tree-id23007 . -52) 2707 (t 25767 5576 306669 763000)) nil (25767 5621 573527 119000) 0 nil])
([nil nil ((2654 . 2656) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . -2654) (undo-tree-id21883 . -1) (undo-tree-id21884 . -1) (undo-tree-id21885 . -1) (undo-tree-id21886 . -1) (undo-tree-id21887 . -1) (undo-tree-id21888 . -1) (undo-tree-id21889 . -1) (undo-tree-id21890 . -1) (undo-tree-id21891 . -1) (undo-tree-id21892 . -1) (undo-tree-id21893 . -1) (undo-tree-id21894 . -1) (undo-tree-id21895 . -1) (undo-tree-id21896 . -1) (undo-tree-id21897 . -1) (undo-tree-id21898 . -1) (undo-tree-id21899 . -1) (undo-tree-id21900 . -1) (undo-tree-id21901 . -1) (undo-tree-id21902 . -1) (undo-tree-id21903 . -1) (undo-tree-id21904 . -1) (undo-tree-id21905 . -1) (undo-tree-id21906 . -1) (undo-tree-id21907 . -1) (undo-tree-id21908 . -1) (undo-tree-id21909 . -1) (undo-tree-id21910 . -1) (undo-tree-id21911 . -1) (undo-tree-id21912 . -1) (undo-tree-id21913 . -1) (undo-tree-id21914 . -1) (undo-tree-id21915 . -1) (undo-tree-id21916 . -1) (undo-tree-id21917 . -1) (undo-tree-id21918 . -1) (undo-tree-id21919 . -1) (undo-tree-id21920 . -1) (undo-tree-id21921 . -1) (undo-tree-id21922 . -1) (undo-tree-id21923 . -1) (undo-tree-id21924 . -1) (undo-tree-id21925 . -1) (undo-tree-id21926 . -1) (undo-tree-id21927 . -1) (undo-tree-id21928 . -1) (undo-tree-id21929 . -1) (undo-tree-id21930 . -1) (undo-tree-id21931 . -1) (undo-tree-id21932 . -1) (undo-tree-id21933 . -1) (undo-tree-id21934 . -1) (undo-tree-id21935 . -1) (undo-tree-id21936 . -1) (undo-tree-id21937 . -1) (undo-tree-id21938 . -1) (undo-tree-id21939 . -1) (undo-tree-id21940 . -1) (undo-tree-id21941 . -1) (undo-tree-id21942 . -1) (undo-tree-id21943 . -1) (undo-tree-id21944 . -1) (undo-tree-id21945 . -1) (undo-tree-id21946 . -1) (undo-tree-id21947 . -1) (undo-tree-id21948 . -1) (undo-tree-id21949 . -1) (undo-tree-id21950 . -1) (undo-tree-id21951 . -1) (undo-tree-id21952 . -1) (undo-tree-id21953 . -1) (undo-tree-id21954 . -1) (undo-tree-id21955 . -1) (undo-tree-id21956 . -1) (undo-tree-id21957 . -1) (undo-tree-id21958 . -1) (undo-tree-id21959 . -1) (undo-tree-id21960 . -1) (undo-tree-id21961 . -1) (undo-tree-id21962 . -1) (undo-tree-id21963 . -1) (undo-tree-id21964 . -1) (undo-tree-id21965 . -1) (undo-tree-id21966 . -1) (undo-tree-id21967 . -1) (undo-tree-id21968 . -1) (undo-tree-id21969 . -1) (undo-tree-id21970 . -1) (undo-tree-id21971 . -1) (undo-tree-id21972 . -1) (undo-tree-id21973 . -1) (undo-tree-id21974 . -1) (undo-tree-id21975 . -1) (undo-tree-id21976 . -1) (undo-tree-id21977 . -1) (undo-tree-id21978 . -1) (undo-tree-id21979 . -1) (undo-tree-id21980 . -1) (undo-tree-id21981 . -1) (undo-tree-id21982 . -1) (undo-tree-id21983 . -1) (undo-tree-id21984 . -1) (undo-tree-id21985 . -1) (undo-tree-id21986 . -1) (undo-tree-id21987 . -1) (undo-tree-id21988 . -1) (undo-tree-id21989 . -1) (undo-tree-id21990 . -1) (undo-tree-id21991 . -1) (undo-tree-id21992 . -1) (undo-tree-id21993 . -1) (undo-tree-id21994 . -1) (undo-tree-id21995 . -1) (undo-tree-id21996 . -1) (undo-tree-id21997 . -1) (undo-tree-id21998 . -1) (undo-tree-id21999 . -1) (undo-tree-id22000 . -1) (undo-tree-id22001 . -1) (undo-tree-id22002 . -1) (undo-tree-id22003 . -1) (undo-tree-id22004 . -1) (undo-tree-id22005 . -1) (undo-tree-id22006 . -1) (undo-tree-id22007 . -1) (undo-tree-id22008 . -1) (undo-tree-id22009 . -1) (undo-tree-id22010 . -1) (undo-tree-id22011 . -1) (undo-tree-id22012 . -1) (undo-tree-id22013 . -1) (undo-tree-id22014 . -1) (undo-tree-id22015 . -1) (undo-tree-id22016 . -1) (undo-tree-id22017 . -1) (undo-tree-id22018 . -1) (undo-tree-id22019 . -1) (undo-tree-id22020 . -1) (undo-tree-id22021 . -1) (undo-tree-id22022 . -1) (undo-tree-id22023 . -1) (undo-tree-id22024 . -1) (undo-tree-id22025 . -1) (undo-tree-id22026 . -1) (undo-tree-id22027 . -1) (undo-tree-id22028 . -1) (undo-tree-id22029 . -1) (undo-tree-id22030 . -1) (undo-tree-id22031 . -1) (undo-tree-id22032 . -1) (undo-tree-id22033 . -1) (undo-tree-id22034 . -1) (undo-tree-id22035 . -1) (undo-tree-id22036 . -1) (undo-tree-id22037 . -1) (undo-tree-id22038 . -1) (undo-tree-id22039 . -1) (undo-tree-id22040 . -1) (undo-tree-id22041 . -1) (undo-tree-id22042 . -1) (undo-tree-id22043 . -1) (undo-tree-id22044 . -1) (undo-tree-id22045 . -1) (undo-tree-id22046 . -1) (undo-tree-id22047 . -1) (undo-tree-id22048 . -1) (undo-tree-id22049 . -1) (undo-tree-id22050 . -1) (undo-tree-id22051 . -1) (undo-tree-id22052 . -1) (undo-tree-id22053 . -1) (undo-tree-id22054 . -1) (undo-tree-id22055 . -1) (undo-tree-id22056 . -1) (undo-tree-id22057 . -1) (undo-tree-id22058 . -1) (undo-tree-id22059 . -1) (undo-tree-id22060 . -1) (undo-tree-id22061 . -1) (undo-tree-id22062 . -1) (undo-tree-id22063 . -1) (undo-tree-id22064 . -1) (undo-tree-id22065 . -1) (undo-tree-id22066 . -1) (undo-tree-id22067 . -1) (undo-tree-id22068 . -1) (undo-tree-id22069 . -1) (undo-tree-id22070 . -1) (undo-tree-id22071 . -1) (undo-tree-id22072 . -1) (undo-tree-id22073 . -1) (undo-tree-id22074 . -1) (undo-tree-id22075 . -1) (undo-tree-id22076 . -1) (undo-tree-id22077 . -1) (undo-tree-id22078 . -1) (undo-tree-id22079 . -1) (undo-tree-id22080 . -1) (undo-tree-id22081 . -1) (undo-tree-id22082 . -1) (undo-tree-id22083 . -1) (undo-tree-id22084 . -1) (undo-tree-id22085 . -1) (undo-tree-id22086 . -1) (undo-tree-id22087 . -1) (undo-tree-id22088 . -1) (undo-tree-id22089 . -1) (undo-tree-id22090 . -1) (undo-tree-id22091 . -1) (undo-tree-id22092 . -1) (undo-tree-id22093 . -1) (undo-tree-id22094 . -1) (undo-tree-id22095 . -1) (undo-tree-id22096 . -1) (undo-tree-id22097 . -1) (undo-tree-id22098 . -1) (undo-tree-id22099 . -1) (undo-tree-id22100 . -1) (undo-tree-id22101 . -1) (undo-tree-id22102 . -1) (undo-tree-id22103 . -1) (undo-tree-id22104 . -1) (undo-tree-id22105 . -1) (undo-tree-id22106 . -1) (undo-tree-id22107 . -1) (undo-tree-id22108 . -1) (undo-tree-id22109 . -1) (undo-tree-id22110 . -1) (undo-tree-id22111 . -1) (undo-tree-id22112 . -1) (undo-tree-id22113 . -1) (undo-tree-id22114 . -1) (undo-tree-id22115 . -1) (undo-tree-id22116 . -1) (undo-tree-id22117 . -1) (undo-tree-id22118 . -1) (undo-tree-id22119 . -1) (undo-tree-id22120 . -1) (undo-tree-id22121 . -1) (undo-tree-id22122 . -1) (undo-tree-id22123 . -1) (undo-tree-id22124 . -1) (undo-tree-id22125 . -1) (undo-tree-id22126 . -1) (undo-tree-id22127 . -1) (undo-tree-id22128 . -1) (undo-tree-id22129 . -1) (undo-tree-id22130 . -1) (undo-tree-id22131 . -1) (undo-tree-id22132 . -1) (undo-tree-id22133 . -1) (undo-tree-id22134 . -1) (undo-tree-id22135 . -1) (undo-tree-id22136 . -1) (undo-tree-id22137 . -1) (undo-tree-id22138 . -1) (undo-tree-id22139 . -1) (undo-tree-id22140 . -1) (undo-tree-id22141 . -1) (undo-tree-id22142 . -1) (undo-tree-id22143 . -1) (undo-tree-id22144 . -1) (undo-tree-id22145 . -1) (undo-tree-id22146 . -1) (undo-tree-id22147 . -1) (undo-tree-id22148 . -1) (undo-tree-id22149 . -1) (undo-tree-id22150 . -1) (undo-tree-id22151 . -1) (undo-tree-id22152 . -1) (undo-tree-id22153 . -1) (undo-tree-id22154 . -1) (undo-tree-id22155 . -1) (undo-tree-id22156 . -1) (undo-tree-id22157 . -1) (undo-tree-id22158 . -1) (undo-tree-id22159 . -1) (undo-tree-id22160 . -1) (undo-tree-id22161 . -1) (undo-tree-id22162 . -1) (undo-tree-id22163 . -1) (undo-tree-id22164 . -1) (undo-tree-id22165 . -1) (undo-tree-id22166 . -1) (undo-tree-id22167 . -1) (undo-tree-id22168 . -1) (undo-tree-id22169 . -1) (undo-tree-id22170 . -1) (undo-tree-id22171 . -1) (undo-tree-id22172 . -1) (undo-tree-id22173 . -1) (undo-tree-id22174 . -1) (undo-tree-id22175 . -1) (undo-tree-id22176 . -1) (undo-tree-id22177 . -1) (undo-tree-id22178 . -1) (undo-tree-id22179 . -1) (undo-tree-id22180 . -1) (undo-tree-id22181 . -1) (undo-tree-id22182 . -1) (undo-tree-id22183 . -1) (undo-tree-id22184 . -1) (undo-tree-id22185 . -1) (undo-tree-id22186 . -1) (undo-tree-id22187 . -1) (undo-tree-id22188 . -1) (undo-tree-id22189 . -1) (undo-tree-id22190 . -1) (undo-tree-id22191 . -1) (undo-tree-id22192 . -1) (undo-tree-id22193 . -1) (undo-tree-id22194 . -1) (undo-tree-id22195 . -1) (undo-tree-id22196 . -1) (undo-tree-id22197 . -1) (undo-tree-id22198 . -1) (undo-tree-id22199 . -1) (undo-tree-id22200 . -1) (undo-tree-id22201 . -1) (undo-tree-id22202 . -1) (undo-tree-id22203 . -1) (undo-tree-id22204 . -1) (undo-tree-id22205 . -1) (undo-tree-id22206 . -1) (undo-tree-id22207 . -1) (undo-tree-id22208 . -1) (undo-tree-id22209 . -1) (undo-tree-id22210 . -1) (undo-tree-id22211 . -1) (undo-tree-id22212 . -1) (undo-tree-id22213 . -1) (undo-tree-id22214 . -1) (undo-tree-id22215 . -1) (undo-tree-id22216 . -1) (undo-tree-id22217 . -1) (undo-tree-id22218 . -1) (undo-tree-id22219 . -1) (undo-tree-id22220 . -1) (undo-tree-id22221 . -1) (undo-tree-id22222 . -1) (undo-tree-id22223 . -1) (undo-tree-id22224 . -1) (undo-tree-id22225 . -1) (undo-tree-id22226 . -1) (undo-tree-id22227 . -1) (undo-tree-id22228 . -1) (undo-tree-id22229 . -1) (undo-tree-id22230 . -1) (undo-tree-id22231 . -1) (undo-tree-id22232 . -1) (undo-tree-id22233 . -1) (undo-tree-id22234 . -1) (undo-tree-id22235 . -1) (undo-tree-id22236 . -1) (undo-tree-id22237 . -1) (undo-tree-id22238 . -1) (undo-tree-id22239 . -1) (undo-tree-id22240 . -1) (undo-tree-id22241 . -1) (undo-tree-id22242 . -1) (undo-tree-id22243 . -1) (undo-tree-id22244 . -1) (undo-tree-id22245 . -1) (undo-tree-id22246 . -1) (undo-tree-id22247 . -1) (undo-tree-id22248 . -1) (undo-tree-id22249 . -1) (undo-tree-id22250 . -1) (undo-tree-id22251 . -1) (undo-tree-id22252 . -1) (undo-tree-id22253 . -1) (undo-tree-id22254 . -1) (undo-tree-id22255 . -1) (undo-tree-id22256 . -1) (undo-tree-id22257 . -1) (undo-tree-id22258 . -1) (undo-tree-id22259 . -1) (undo-tree-id22260 . -1) (undo-tree-id22261 . -1) (undo-tree-id22262 . -1) (undo-tree-id22263 . -1) (undo-tree-id22264 . -1) (undo-tree-id22265 . -1) (undo-tree-id22266 . -1) (undo-tree-id22267 . -1) (undo-tree-id22268 . -1) (undo-tree-id22269 . -1) (undo-tree-id22270 . -1) (undo-tree-id22271 . -1) (undo-tree-id22272 . -1) (undo-tree-id22273 . -1) (undo-tree-id22274 . -1) (undo-tree-id22275 . -1) (undo-tree-id22276 . -1) (undo-tree-id22277 . -1) (undo-tree-id22278 . -1) (undo-tree-id22279 . -1) (undo-tree-id22280 . -1) (undo-tree-id22281 . -1) (undo-tree-id22282 . -1) (undo-tree-id22283 . -1) (undo-tree-id22284 . -1) (undo-tree-id22285 . -1) (undo-tree-id22286 . -1) (undo-tree-id22287 . -1) (undo-tree-id22288 . -1) (undo-tree-id22289 . -1) (undo-tree-id22290 . -1) (undo-tree-id22291 . -1) (undo-tree-id22292 . -1) (undo-tree-id22293 . -1) (undo-tree-id22294 . -1) (undo-tree-id22295 . -1) (undo-tree-id22296 . -1) (undo-tree-id22297 . -1) (undo-tree-id22298 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . -2655) (undo-tree-id22299 . -1) (undo-tree-id22300 . -1) (undo-tree-id22301 . -1) (undo-tree-id22302 . -1) (undo-tree-id22303 . -1) (undo-tree-id22304 . -1) (undo-tree-id22305 . -1) (undo-tree-id22306 . -1) (undo-tree-id22307 . -1) (undo-tree-id22308 . -1) (undo-tree-id22309 . -1) (undo-tree-id22310 . -1) (undo-tree-id22311 . -1) (undo-tree-id22312 . -1) (undo-tree-id22313 . -1) (undo-tree-id22314 . -1) (undo-tree-id22315 . -1) (undo-tree-id22316 . -1) (undo-tree-id22317 . -1) (undo-tree-id22318 . -1) (undo-tree-id22319 . -1) (undo-tree-id22320 . -1) (undo-tree-id22321 . -1) (undo-tree-id22322 . -1) (undo-tree-id22323 . -1) (undo-tree-id22324 . -1) (undo-tree-id22325 . -1) (undo-tree-id22326 . -1) (undo-tree-id22327 . -1) (undo-tree-id22328 . -1) (undo-tree-id22329 . -1) (undo-tree-id22330 . -1) (undo-tree-id22331 . -1) (undo-tree-id22332 . -1) (undo-tree-id22333 . -1) (undo-tree-id22334 . -1) (undo-tree-id22335 . -1) (undo-tree-id22336 . -1) (undo-tree-id22337 . -1) (undo-tree-id22338 . -1) (undo-tree-id22339 . -1) (undo-tree-id22340 . -1) (undo-tree-id22341 . -1) (undo-tree-id22342 . -1) (undo-tree-id22343 . -1) (undo-tree-id22344 . -1) (undo-tree-id22345 . -1) (undo-tree-id22346 . -1) (undo-tree-id22347 . -1) (undo-tree-id22348 . -1) (undo-tree-id22349 . -1) (undo-tree-id22350 . -1) (undo-tree-id22351 . -1) (undo-tree-id22352 . -1) (undo-tree-id22353 . -1) (undo-tree-id22354 . -1) (undo-tree-id22355 . -1) (undo-tree-id22356 . -1) (undo-tree-id22357 . -1) (undo-tree-id22358 . -1) (undo-tree-id22359 . -1) (undo-tree-id22360 . -1) (undo-tree-id22361 . -1) (undo-tree-id22362 . -1) (undo-tree-id22363 . -1) (undo-tree-id22364 . -1) (undo-tree-id22365 . -1) (undo-tree-id22366 . -1) (undo-tree-id22367 . -1) (undo-tree-id22368 . -1) (undo-tree-id22369 . -1) (undo-tree-id22370 . -1) (undo-tree-id22371 . -1) (undo-tree-id22372 . -1) (undo-tree-id22373 . -1) (undo-tree-id22374 . -1) (undo-tree-id22375 . -1) (undo-tree-id22376 . -1) (undo-tree-id22377 . -1) (undo-tree-id22378 . -1) (undo-tree-id22379 . -1) (undo-tree-id22380 . -1) (undo-tree-id22381 . -1) (undo-tree-id22382 . -1) (undo-tree-id22383 . -1) (undo-tree-id22384 . -1) (undo-tree-id22385 . -1) (undo-tree-id22386 . -1) (undo-tree-id22387 . -1) (undo-tree-id22388 . -1) (undo-tree-id22389 . -1) (undo-tree-id22390 . -1) (undo-tree-id22391 . -1) (undo-tree-id22392 . -1) (undo-tree-id22393 . -1) (undo-tree-id22394 . -1) (undo-tree-id22395 . -1) (undo-tree-id22396 . -1) (undo-tree-id22397 . -1) (undo-tree-id22398 . -1) (undo-tree-id22399 . -1) (undo-tree-id22400 . -1) (undo-tree-id22401 . -1) (undo-tree-id22402 . -1) (undo-tree-id22403 . -1) (undo-tree-id22404 . -1) (undo-tree-id22405 . -1) (undo-tree-id22406 . -1) (undo-tree-id22407 . -1) (undo-tree-id22408 . -1) (undo-tree-id22409 . -1) (undo-tree-id22410 . -1) (undo-tree-id22411 . -1) (undo-tree-id22412 . -1) (undo-tree-id22413 . -1) (undo-tree-id22414 . -1) (undo-tree-id22415 . -1) (undo-tree-id22416 . -1) (undo-tree-id22417 . -1) (undo-tree-id22418 . -1) (undo-tree-id22419 . -1) (undo-tree-id22420 . -1) (undo-tree-id22421 . -1) (undo-tree-id22422 . -1) (undo-tree-id22423 . -1) (undo-tree-id22424 . -1) (undo-tree-id22425 . -1) (undo-tree-id22426 . -1) (undo-tree-id22427 . -1) (undo-tree-id22428 . -1) (undo-tree-id22429 . -1) (undo-tree-id22430 . -1) (undo-tree-id22431 . -1) (undo-tree-id22432 . -1) (undo-tree-id22433 . -1) (undo-tree-id22434 . -1) (undo-tree-id22435 . -1) (undo-tree-id22436 . -1) (undo-tree-id22437 . -1) (undo-tree-id22438 . -1) (undo-tree-id22439 . -1) (undo-tree-id22440 . -1) (undo-tree-id22441 . -1) (undo-tree-id22442 . -1) (undo-tree-id22443 . -1) (undo-tree-id22444 . -1) (undo-tree-id22445 . -1) (undo-tree-id22446 . -1) (undo-tree-id22447 . -1) (undo-tree-id22448 . -1) (undo-tree-id22449 . -1) (undo-tree-id22450 . -1) (undo-tree-id22451 . -1) (undo-tree-id22452 . -1) (undo-tree-id22453 . -1) (undo-tree-id22454 . -1) (undo-tree-id22455 . -1) (undo-tree-id22456 . -1) (undo-tree-id22457 . -1) (undo-tree-id22458 . -1) (undo-tree-id22459 . -1) (undo-tree-id22460 . -1) (undo-tree-id22461 . -1) (undo-tree-id22462 . -1) (undo-tree-id22463 . -1) (undo-tree-id22464 . -1) (undo-tree-id22465 . -1) (undo-tree-id22466 . -1) (undo-tree-id22467 . -1) (undo-tree-id22468 . -1) (undo-tree-id22469 . -1) (undo-tree-id22470 . -1) (undo-tree-id22471 . -1) (undo-tree-id22472 . -1) (undo-tree-id22473 . -1) (undo-tree-id22474 . -1) (undo-tree-id22475 . -1) (undo-tree-id22476 . -1) (undo-tree-id22477 . -1) (undo-tree-id22478 . -1) (undo-tree-id22479 . -1) (undo-tree-id22480 . -1) (undo-tree-id22481 . -1) (undo-tree-id22482 . -1) (undo-tree-id22483 . -1) (undo-tree-id22484 . -1) (undo-tree-id22485 . -1) (undo-tree-id22486 . -1) (undo-tree-id22487 . -1) (undo-tree-id22488 . -1) (undo-tree-id22489 . -1) (undo-tree-id22490 . -1) (undo-tree-id22491 . -1) (undo-tree-id22492 . -1) (undo-tree-id22493 . -1) (undo-tree-id22494 . -1) (undo-tree-id22495 . -1) (undo-tree-id22496 . -1) (undo-tree-id22497 . -1) (undo-tree-id22498 . -1) (undo-tree-id22499 . -1) (undo-tree-id22500 . -1) (undo-tree-id22501 . -1) (undo-tree-id22502 . -1) (undo-tree-id22503 . -1) (undo-tree-id22504 . -1) (undo-tree-id22505 . -1) (undo-tree-id22506 . -1) (undo-tree-id22507 . -1) (undo-tree-id22508 . -1) (undo-tree-id22509 . -1) (undo-tree-id22510 . -1) (undo-tree-id22511 . -1) (undo-tree-id22512 . -1) (undo-tree-id22513 . -1) (undo-tree-id22514 . -1) (undo-tree-id22515 . -1) (undo-tree-id22516 . -1) (undo-tree-id22517 . -1) (undo-tree-id22518 . -1) (undo-tree-id22519 . -1) (undo-tree-id22520 . -1) (undo-tree-id22521 . -1) (undo-tree-id22522 . -1) (undo-tree-id22523 . -1) (undo-tree-id22524 . -1) (undo-tree-id22525 . -1) (undo-tree-id22526 . -1) (undo-tree-id22527 . -1) (undo-tree-id22528 . -1) (undo-tree-id22529 . -1) (undo-tree-id22530 . -1) (undo-tree-id22531 . -1) (undo-tree-id22532 . -1) (undo-tree-id22533 . -1) (undo-tree-id22534 . -1) (undo-tree-id22535 . -1) (undo-tree-id22536 . -1) (undo-tree-id22537 . -1) (undo-tree-id22538 . -1) (undo-tree-id22539 . -1) (undo-tree-id22540 . -1) (undo-tree-id22541 . -1) (undo-tree-id22542 . -1) (undo-tree-id22543 . -1) (undo-tree-id22544 . -1) (undo-tree-id22545 . -1) (undo-tree-id22546 . -1) (undo-tree-id22547 . -1) (undo-tree-id22548 . -1) (undo-tree-id22549 . -1) (undo-tree-id22550 . -1) (undo-tree-id22551 . -1) (undo-tree-id22552 . -1) (undo-tree-id22553 . -1) (undo-tree-id22554 . -1) (undo-tree-id22555 . -1) (undo-tree-id22556 . -1) (undo-tree-id22557 . -1) (undo-tree-id22558 . -1) (undo-tree-id22559 . -1) (undo-tree-id22560 . -1) (undo-tree-id22561 . -1) (undo-tree-id22562 . -1) (undo-tree-id22563 . -1) (undo-tree-id22564 . -1) (undo-tree-id22565 . -1) (undo-tree-id22566 . -1) (undo-tree-id22567 . -1) (undo-tree-id22568 . -1) (undo-tree-id22569 . -1) (undo-tree-id22570 . -1) (undo-tree-id22571 . -1) (undo-tree-id22572 . -1) (undo-tree-id22573 . -1) (undo-tree-id22574 . -1) (undo-tree-id22575 . -1) (undo-tree-id22576 . -1) (undo-tree-id22577 . -1) (undo-tree-id22578 . -1) (undo-tree-id22579 . -1) (undo-tree-id22580 . -1) (undo-tree-id22581 . -1) (undo-tree-id22582 . -1) (undo-tree-id22583 . -1) (undo-tree-id22584 . -1) (undo-tree-id22585 . -1) (undo-tree-id22586 . -1) (undo-tree-id22587 . -1) (undo-tree-id22588 . -1) (undo-tree-id22589 . -1) (undo-tree-id22590 . -1) (undo-tree-id22591 . -1) (undo-tree-id22592 . -1) (undo-tree-id22593 . -1) (undo-tree-id22594 . -1) (undo-tree-id22595 . -1) (undo-tree-id22596 . -1) (undo-tree-id22597 . -1) (undo-tree-id22598 . -1) (undo-tree-id22599 . -1) (undo-tree-id22600 . -1) (undo-tree-id22601 . -1) (undo-tree-id22602 . -1) (undo-tree-id22603 . -1) (undo-tree-id22604 . -1) (undo-tree-id22605 . -1) (undo-tree-id22606 . -1) (undo-tree-id22607 . -1) (undo-tree-id22608 . -1) (undo-tree-id22609 . -1) (undo-tree-id22610 . -1) (undo-tree-id22611 . -1) (undo-tree-id22612 . -1) (undo-tree-id22613 . -1) (undo-tree-id22614 . -1) (undo-tree-id22615 . -1) (undo-tree-id22616 . -1) (undo-tree-id22617 . -1) (undo-tree-id22618 . -1) (undo-tree-id22619 . -1) (undo-tree-id22620 . -1) (undo-tree-id22621 . -1) (undo-tree-id22622 . -1) (undo-tree-id22623 . -1) (undo-tree-id22624 . -1) (undo-tree-id22625 . -1) (undo-tree-id22626 . -1) (undo-tree-id22627 . -1) (undo-tree-id22628 . -1) (undo-tree-id22629 . -1) (undo-tree-id22630 . -1) (undo-tree-id22631 . -1) (undo-tree-id22632 . -1) (undo-tree-id22633 . -1) (undo-tree-id22634 . -1) (undo-tree-id22635 . -1) (undo-tree-id22636 . -1) (undo-tree-id22637 . -1) (undo-tree-id22638 . -1) (undo-tree-id22639 . -1) (undo-tree-id22640 . -1) (undo-tree-id22641 . -1) (undo-tree-id22642 . -1) (undo-tree-id22643 . -1) (undo-tree-id22644 . -1) (undo-tree-id22645 . -1) (undo-tree-id22646 . -1) (undo-tree-id22647 . -1) (undo-tree-id22648 . -1) (undo-tree-id22649 . -1) (undo-tree-id22650 . -1) (undo-tree-id22651 . -1) (undo-tree-id22652 . -1) (undo-tree-id22653 . -1) (undo-tree-id22654 . -1) (undo-tree-id22655 . -1) (undo-tree-id22656 . -1) (undo-tree-id22657 . -1) (undo-tree-id22658 . -1) (undo-tree-id22659 . -1) (undo-tree-id22660 . -1) (undo-tree-id22661 . -1) (undo-tree-id22662 . -1) (undo-tree-id22663 . -1) (undo-tree-id22664 . -1) (undo-tree-id22665 . -1) (undo-tree-id22666 . -1) (undo-tree-id22667 . -1) (undo-tree-id22668 . -1) (undo-tree-id22669 . -1) (undo-tree-id22670 . -1) (undo-tree-id22671 . -1) (undo-tree-id22672 . -1) (undo-tree-id22673 . -1) (undo-tree-id22674 . -1) (undo-tree-id22675 . -1) (undo-tree-id22676 . -1) (undo-tree-id22677 . -1) (undo-tree-id22678 . -1) (undo-tree-id22679 . -1) (undo-tree-id22680 . -1) (undo-tree-id22681 . -1) (undo-tree-id22682 . -1) (undo-tree-id22683 . -1) (undo-tree-id22684 . -1) (undo-tree-id22685 . -1) (undo-tree-id22686 . -1) (undo-tree-id22687 . -1) (undo-tree-id22688 . -1) (undo-tree-id22689 . -1) (undo-tree-id22690 . -1) (undo-tree-id22691 . -1) (undo-tree-id22692 . -1) (undo-tree-id22693 . -1) (undo-tree-id22694 . -1) (undo-tree-id22695 . -1) (undo-tree-id22696 . -1) (undo-tree-id22697 . -1) (undo-tree-id22698 . -1) 2656) nil (25767 5621 573315 922000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2656) (undo-tree-id21879 . 1) (undo-tree-id21880 . 1) (undo-tree-id21881 . -1) (undo-tree-id21882 . -1)) nil (25767 5621 572820 518000) 0 nil])
([nil nil ((2656 . 2657)) nil (25767 5621 572816 908000) 0 nil])
([nil nil ((2673 . 2674) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . -2673) (undo-tree-id21860 . -1) (undo-tree-id21861 . -1) (undo-tree-id21862 . -1) (undo-tree-id21863 . -1) (undo-tree-id21864 . -1) (undo-tree-id21865 . -1) (undo-tree-id21866 . -1) (undo-tree-id21867 . -1) (undo-tree-id21868 . -1) (undo-tree-id21869 . -1) (undo-tree-id21870 . -1) (undo-tree-id21871 . -1) (undo-tree-id21872 . -1) (undo-tree-id21873 . -1) (undo-tree-id21874 . -1) (undo-tree-id21875 . -1) (undo-tree-id21876 . -1) (undo-tree-id21877 . -1) (undo-tree-id21878 . -1) 2674) nil (25767 5621 572814 948000) 0 nil])
([nil nil ((2593 . 2911) (#("- analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will
- The window() method creates a dataset that contains windows, (a nested dataset)" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 16 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 16 17 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 17 46 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 46 47 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 87 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 87 88 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 88 89 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 89 93 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 93 96 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 96 98 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 98 100 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 100 164 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 164 165 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 165 231 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 231 235 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 235 236 (font-lock-fontified t rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 236 237 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 237 238 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 238 239 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 239 240 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t) 240 301 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t) 301 318 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t)) . 2593) (undo-tree-id20368 . -300) (undo-tree-id20369 . -300) (undo-tree-id20370 . -298) (undo-tree-id20371 . -298) (undo-tree-id20372 . 17) (undo-tree-id20373 . -239) (undo-tree-id20374 . -239) (undo-tree-id20375 . -239) (undo-tree-id20376 . -239) (undo-tree-id20377 . -239) (undo-tree-id20378 . -239) (undo-tree-id20379 . -239) (undo-tree-id20380 . -239) (undo-tree-id20381 . -239) (undo-tree-id20382 . -239) (undo-tree-id20383 . -239) (undo-tree-id20384 . -239) (undo-tree-id20385 . -239) (undo-tree-id20386 . -239) (undo-tree-id20387 . -239) (undo-tree-id20388 . -239) (undo-tree-id20389 . -239) (undo-tree-id20390 . -239) (undo-tree-id20391 . -239) (undo-tree-id20392 . -239) (undo-tree-id20393 . -239) (undo-tree-id20394 . -239) (undo-tree-id20395 . -239) (undo-tree-id20396 . -239) (undo-tree-id20397 . -239) (undo-tree-id20398 . -239) (undo-tree-id20399 . -239) (undo-tree-id20400 . -239) (undo-tree-id20401 . -239) (undo-tree-id20402 . -239) (undo-tree-id20403 . -239) (undo-tree-id20404 . -239) (undo-tree-id20405 . -239) (undo-tree-id20406 . -239) (undo-tree-id20407 . -239) (undo-tree-id20408 . -239) (undo-tree-id20409 . -239) (undo-tree-id20410 . -239) (undo-tree-id20411 . -239) (undo-tree-id20412 . -239) (undo-tree-id20413 . -239) (undo-tree-id20414 . -239) (undo-tree-id20415 . -239) (undo-tree-id20416 . -239) (undo-tree-id20417 . -239) (undo-tree-id20418 . -239) (undo-tree-id20419 . -239) (undo-tree-id20420 . -239) (undo-tree-id20421 . -239) (undo-tree-id20422 . -239) (undo-tree-id20423 . -239) (undo-tree-id20424 . -239) (undo-tree-id20425 . -239) (undo-tree-id20426 . -239) (undo-tree-id20427 . -239) (undo-tree-id20428 . -239) (undo-tree-id20429 . -239) (undo-tree-id20430 . -239) (undo-tree-id20431 . -239) (undo-tree-id20432 . -239) (undo-tree-id20433 . -239) (undo-tree-id20434 . -239) (undo-tree-id20435 . -239) (undo-tree-id20436 . -239) (undo-tree-id20437 . -239) (undo-tree-id20438 . -239) (undo-tree-id20439 . -239) (undo-tree-id20440 . -239) (undo-tree-id20441 . -239) (undo-tree-id20442 . -239) (undo-tree-id20443 . -239) (undo-tree-id20444 . -239) (undo-tree-id20445 . -239) (undo-tree-id20446 . -239) (undo-tree-id20447 . -239) (undo-tree-id20448 . -239) (undo-tree-id20449 . -239) (undo-tree-id20450 . -239) (undo-tree-id20451 . -239) (undo-tree-id20452 . -239) (undo-tree-id20453 . -239) (undo-tree-id20454 . -239) (undo-tree-id20455 . -239) (undo-tree-id20456 . -239) (undo-tree-id20457 . -239) (undo-tree-id20458 . -239) (undo-tree-id20459 . -239) (undo-tree-id20460 . -239) (undo-tree-id20461 . -239) (undo-tree-id20462 . -239) (undo-tree-id20463 . -239) (undo-tree-id20464 . -239) (undo-tree-id20465 . -239) (undo-tree-id20466 . -239) (undo-tree-id20467 . -239) (undo-tree-id20468 . -239) (undo-tree-id20469 . -239) (undo-tree-id20470 . -239) (undo-tree-id20471 . -239) (undo-tree-id20472 . -239) (undo-tree-id20473 . -239) (undo-tree-id20474 . -239) (undo-tree-id20475 . -239) (undo-tree-id20476 . -239) (undo-tree-id20477 . -239) (undo-tree-id20478 . -239) (undo-tree-id20479 . -239) (undo-tree-id20480 . -239) (undo-tree-id20481 . -239) (undo-tree-id20482 . -239) (undo-tree-id20483 . -239) (undo-tree-id20484 . -239) (undo-tree-id20485 . -239) (undo-tree-id20486 . -239) (undo-tree-id20487 . -239) (undo-tree-id20488 . -239) (undo-tree-id20489 . -239) (undo-tree-id20490 . -239) (undo-tree-id20491 . -239) (undo-tree-id20492 . -239) (undo-tree-id20493 . -239) (undo-tree-id20494 . -239) (undo-tree-id20495 . -239) (undo-tree-id20496 . -239) (undo-tree-id20497 . -239) (undo-tree-id20498 . -239) (undo-tree-id20499 . -239) (undo-tree-id20500 . -239) (undo-tree-id20501 . -239) (undo-tree-id20502 . -239) (undo-tree-id20503 . -239) (undo-tree-id20504 . -239) (undo-tree-id20505 . -239) (undo-tree-id20506 . -239) (undo-tree-id20507 . -239) (undo-tree-id20508 . -239) (undo-tree-id20509 . -239) (undo-tree-id20510 . -239) (undo-tree-id20511 . -239) (undo-tree-id20512 . -239) (undo-tree-id20513 . -239) (undo-tree-id20514 . -239) (undo-tree-id20515 . -239) (undo-tree-id20516 . -239) (undo-tree-id20517 . -239) (undo-tree-id20518 . -239) (undo-tree-id20519 . -239) (undo-tree-id20520 . -239) (undo-tree-id20521 . -239) (undo-tree-id20522 . -239) (undo-tree-id20523 . -239) (undo-tree-id20524 . -239) (undo-tree-id20525 . -239) (undo-tree-id20526 . -239) (undo-tree-id20527 . -239) (undo-tree-id20528 . -239) (undo-tree-id20529 . -239) (undo-tree-id20530 . -239) (undo-tree-id20531 . -239) (undo-tree-id20532 . -239) (undo-tree-id20533 . -239) (undo-tree-id20534 . -239) (undo-tree-id20535 . -239) (undo-tree-id20536 . -239) (undo-tree-id20537 . -239) (undo-tree-id20538 . -239) (undo-tree-id20539 . -239) (undo-tree-id20540 . -239) (undo-tree-id20541 . -239) (undo-tree-id20542 . -239) (undo-tree-id20543 . -239) (undo-tree-id20544 . -239) (undo-tree-id20545 . -239) (undo-tree-id20546 . -239) (undo-tree-id20547 . -239) (undo-tree-id20548 . -239) (undo-tree-id20549 . -239) (undo-tree-id20550 . -239) (undo-tree-id20551 . -239) (undo-tree-id20552 . -239) (undo-tree-id20553 . -239) (undo-tree-id20554 . -239) (undo-tree-id20555 . -239) (undo-tree-id20556 . -239) (undo-tree-id20557 . -239) (undo-tree-id20558 . -239) (undo-tree-id20559 . -239) (undo-tree-id20560 . -239) (undo-tree-id20561 . -239) (undo-tree-id20562 . -239) (undo-tree-id20563 . -239) (undo-tree-id20564 . -239) (undo-tree-id20565 . -239) (undo-tree-id20566 . -239) (undo-tree-id20567 . -239) (undo-tree-id20568 . -239) (undo-tree-id20569 . -239) (undo-tree-id20570 . -239) (undo-tree-id20571 . -239) (undo-tree-id20572 . -239) (undo-tree-id20573 . -239) (undo-tree-id20574 . -239) (undo-tree-id20575 . -239) (undo-tree-id20576 . -239) (undo-tree-id20577 . -239) (undo-tree-id20578 . -239) (undo-tree-id20579 . -239) (undo-tree-id20580 . -239) (undo-tree-id20581 . -239) (undo-tree-id20582 . -239) (undo-tree-id20583 . -239) (undo-tree-id20584 . -239) (undo-tree-id20585 . -239) (undo-tree-id20586 . -239) (undo-tree-id20587 . -239) (undo-tree-id20588 . -239) (undo-tree-id20589 . -239) (undo-tree-id20590 . -239) (undo-tree-id20591 . -239) (undo-tree-id20592 . -239) (undo-tree-id20593 . -239) (undo-tree-id20594 . -239) (undo-tree-id20595 . -239) (undo-tree-id20596 . -239) (undo-tree-id20597 . -239) (undo-tree-id20598 . -239) (undo-tree-id20599 . -239) (undo-tree-id20600 . -239) (undo-tree-id20601 . -239) (undo-tree-id20602 . -239) (undo-tree-id20603 . -239) (undo-tree-id20604 . -239) (undo-tree-id20605 . -239) (undo-tree-id20606 . -239) (undo-tree-id20607 . -239) (undo-tree-id20608 . -239) (undo-tree-id20609 . -239) (undo-tree-id20610 . -239) (undo-tree-id20611 . -239) (undo-tree-id20612 . -239) (undo-tree-id20613 . -239) (undo-tree-id20614 . -239) (undo-tree-id20615 . -239) (undo-tree-id20616 . -239) (undo-tree-id20617 . -239) (undo-tree-id20618 . -239) (undo-tree-id20619 . -239) (undo-tree-id20620 . -239) (undo-tree-id20621 . -239) (undo-tree-id20622 . -239) (undo-tree-id20623 . -239) (undo-tree-id20624 . -239) (undo-tree-id20625 . -239) (undo-tree-id20626 . -239) (undo-tree-id20627 . -239) (undo-tree-id20628 . -239) (undo-tree-id20629 . -239) (undo-tree-id20630 . -239) (undo-tree-id20631 . -239) (undo-tree-id20632 . -239) (undo-tree-id20633 . -239) (undo-tree-id20634 . -239) (undo-tree-id20635 . -239) (undo-tree-id20636 . -239) (undo-tree-id20637 . -239) (undo-tree-id20638 . -239) (undo-tree-id20639 . -239) (undo-tree-id20640 . -239) (undo-tree-id20641 . -239) (undo-tree-id20642 . -239) (undo-tree-id20643 . -239) (undo-tree-id20644 . -239) (undo-tree-id20645 . -239) (undo-tree-id20646 . -239) (undo-tree-id20647 . -239) (undo-tree-id20648 . -239) (undo-tree-id20649 . -239) (undo-tree-id20650 . -239) (undo-tree-id20651 . -239) (undo-tree-id20652 . -239) (undo-tree-id20653 . -239) (undo-tree-id20654 . -239) (undo-tree-id20655 . -239) (undo-tree-id20656 . -239) (undo-tree-id20657 . -239) (undo-tree-id20658 . -239) (undo-tree-id20659 . -239) (undo-tree-id20660 . -239) (undo-tree-id20661 . -239) (undo-tree-id20662 . -239) (undo-tree-id20663 . -239) (undo-tree-id20664 . -239) (undo-tree-id20665 . -239) (undo-tree-id20666 . -239) (undo-tree-id20667 . -239) (undo-tree-id20668 . -239) (undo-tree-id20669 . -239) (undo-tree-id20670 . -239) (undo-tree-id20671 . -239) (undo-tree-id20672 . -239) (undo-tree-id20673 . -239) (undo-tree-id20674 . -239) (undo-tree-id20675 . -239) (undo-tree-id20676 . -239) (undo-tree-id20677 . -239) (undo-tree-id20678 . -239) (undo-tree-id20679 . -239) (undo-tree-id20680 . -239) (undo-tree-id20681 . -239) (undo-tree-id20682 . -239) (undo-tree-id20683 . -239) (undo-tree-id20684 . -239) (undo-tree-id20685 . -239) (undo-tree-id20686 . -239) (undo-tree-id20687 . -239) (undo-tree-id20688 . -239) (undo-tree-id20689 . -239) (undo-tree-id20690 . -239) (undo-tree-id20691 . -239) (undo-tree-id20692 . -239) (undo-tree-id20693 . -239) (undo-tree-id20694 . -239) (undo-tree-id20695 . -239) (undo-tree-id20696 . -239) (undo-tree-id20697 . -239) (undo-tree-id20698 . -239) (undo-tree-id20699 . -239) (undo-tree-id20700 . -239) (undo-tree-id20701 . -239) (undo-tree-id20702 . -239) (undo-tree-id20703 . -239) (undo-tree-id20704 . -239) (undo-tree-id20705 . -239) (undo-tree-id20706 . -239) (undo-tree-id20707 . -239) (undo-tree-id20708 . -239) (undo-tree-id20709 . -239) (undo-tree-id20710 . -239) (undo-tree-id20711 . -318) (undo-tree-id20712 . -239) (undo-tree-id20713 . -239) (undo-tree-id20714 . -239) (undo-tree-id20715 . -239) (undo-tree-id20716 . -239) (undo-tree-id20717 . -239) (undo-tree-id20718 . -239) (undo-tree-id20719 . -239) (undo-tree-id20720 . -239) (undo-tree-id20721 . -239) (undo-tree-id20722 . -239) (undo-tree-id20723 . -239) (undo-tree-id20724 . -239) (undo-tree-id20725 . -239) (undo-tree-id20726 . -239) (undo-tree-id20727 . -239) (undo-tree-id20728 . -239) (undo-tree-id20729 . -239) (undo-tree-id20730 . -239) (undo-tree-id20731 . -239) (undo-tree-id20732 . -239) (undo-tree-id20733 . -239) (undo-tree-id20734 . -239) (undo-tree-id20735 . -239) (undo-tree-id20736 . -239) (undo-tree-id20737 . -239) (undo-tree-id20738 . -239) (undo-tree-id20739 . -239) (undo-tree-id20740 . -239) (undo-tree-id20741 . -239) (undo-tree-id20742 . -239) (undo-tree-id20743 . -239) (undo-tree-id20744 . -239) (undo-tree-id20745 . -239) (undo-tree-id20746 . -239) (undo-tree-id20747 . -239) (undo-tree-id20748 . -239) (undo-tree-id20749 . -239) (undo-tree-id20750 . -239) (undo-tree-id20751 . -239) (undo-tree-id20752 . -239) (undo-tree-id20753 . -239) (undo-tree-id20754 . -239) (undo-tree-id20755 . -239) (undo-tree-id20756 . -239) (undo-tree-id20757 . -239) (undo-tree-id20758 . -239) (undo-tree-id20759 . -239) (undo-tree-id20760 . -239) (undo-tree-id20761 . -239) (undo-tree-id20762 . -239) (undo-tree-id20763 . -239) (undo-tree-id20764 . -239) (undo-tree-id20765 . -239) (undo-tree-id20766 . -239) (undo-tree-id20767 . -239) (undo-tree-id20768 . -239) (undo-tree-id20769 . -239) (undo-tree-id20770 . -239) (undo-tree-id20771 . -239) (undo-tree-id20772 . -239) (undo-tree-id20773 . -239) (undo-tree-id20774 . -239) (undo-tree-id20775 . -239) (undo-tree-id20776 . -239) (undo-tree-id20777 . -239) (undo-tree-id20778 . -239) (undo-tree-id20779 . -239) (undo-tree-id20780 . -239) (undo-tree-id20781 . -239) (undo-tree-id20782 . -239) (undo-tree-id20783 . -239) (undo-tree-id20784 . -239) (undo-tree-id20785 . -239) (undo-tree-id20786 . -243) (undo-tree-id20787 . -243) (undo-tree-id20788 . -243) (undo-tree-id20789 . -243) (undo-tree-id20790 . -243) (undo-tree-id20791 . -243) (undo-tree-id20792 . -243) (undo-tree-id20793 . -243) (undo-tree-id20794 . -243) (undo-tree-id20795 . -243) (undo-tree-id20796 . -243) (undo-tree-id20797 . -243) (undo-tree-id20798 . -243) (undo-tree-id20799 . -243) (undo-tree-id20800 . -243) (undo-tree-id20801 . -243) (undo-tree-id20802 . -243) (undo-tree-id20803 . -243) (undo-tree-id20804 . -243) (undo-tree-id20805 . -243) (undo-tree-id20806 . -243) (undo-tree-id20807 . -243) (undo-tree-id20808 . -243) (undo-tree-id20809 . -243) (undo-tree-id20810 . -243) (undo-tree-id20811 . -243) (undo-tree-id20812 . -243) (undo-tree-id20813 . -243) (undo-tree-id20814 . -243) (undo-tree-id20815 . -298) (undo-tree-id20816 . -298) (undo-tree-id20817 . -298) (undo-tree-id20818 . -298) (undo-tree-id20819 . -298) (undo-tree-id20820 . -298) (undo-tree-id20821 . -298) (undo-tree-id20822 . -298) (undo-tree-id20823 . -298) (undo-tree-id20824 . -298) (undo-tree-id20825 . -298) (undo-tree-id20826 . -298) (undo-tree-id20827 . -298) (undo-tree-id20828 . -298) (undo-tree-id20829 . -298) (undo-tree-id20830 . -298) (undo-tree-id20831 . -298) (undo-tree-id20832 . -298) (undo-tree-id20833 . -298) (undo-tree-id20834 . -298) (undo-tree-id20835 . -298) (undo-tree-id20836 . -298) (undo-tree-id20837 . -298) (undo-tree-id20838 . -298) (undo-tree-id20839 . -298) (undo-tree-id20840 . -298) (undo-tree-id20841 . -298) (undo-tree-id20842 . -298) (undo-tree-id20843 . -298) (undo-tree-id20844 . -298) (undo-tree-id20845 . -298) (undo-tree-id20846 . -298) (undo-tree-id20847 . -298) (undo-tree-id20848 . -298) (undo-tree-id20849 . -298) (undo-tree-id20850 . -298) (undo-tree-id20851 . -298) (undo-tree-id20852 . -298) (undo-tree-id20853 . -298) (undo-tree-id20854 . -298) (undo-tree-id20855 . -298) (undo-tree-id20856 . -298) (undo-tree-id20857 . -298) (undo-tree-id20858 . -298) (undo-tree-id20859 . -298) (undo-tree-id20860 . -298) (undo-tree-id20861 . -298) (undo-tree-id20862 . -298) (undo-tree-id20863 . -298) (undo-tree-id20864 . -298) (undo-tree-id20865 . -298) (undo-tree-id20866 . -298) (undo-tree-id20867 . -298) (undo-tree-id20868 . -298) (undo-tree-id20869 . -298) (undo-tree-id20870 . -298) (undo-tree-id20871 . -298) (undo-tree-id20872 . -298) (undo-tree-id20873 . -298) (undo-tree-id20874 . -298) (undo-tree-id20875 . -298) (undo-tree-id20876 . -298) (undo-tree-id20877 . -298) (undo-tree-id20878 . -298) (undo-tree-id20879 . -298) (undo-tree-id20880 . -298) (undo-tree-id20881 . -298) (undo-tree-id20882 . -298) (undo-tree-id20883 . -298) (undo-tree-id20884 . -298) (undo-tree-id20885 . -298) (undo-tree-id20886 . -298) (undo-tree-id20887 . -298) (undo-tree-id20888 . -298) (undo-tree-id20889 . -298) (undo-tree-id20890 . -298) (undo-tree-id20891 . -298) (undo-tree-id20892 . -298) (undo-tree-id20893 . -298) (undo-tree-id20894 . -298) (undo-tree-id20895 . -298) (undo-tree-id20896 . -298) (undo-tree-id20897 . -298) (undo-tree-id20898 . -298) (undo-tree-id20899 . -298) (undo-tree-id20900 . -298) (undo-tree-id20901 . -298) (undo-tree-id20902 . -298) (undo-tree-id20903 . -298) (undo-tree-id20904 . -298) (undo-tree-id20905 . -298) (undo-tree-id20906 . -298) (undo-tree-id20907 . -298) (undo-tree-id20908 . -298) (undo-tree-id20909 . -298) (undo-tree-id20910 . -298) (undo-tree-id20911 . -298) (undo-tree-id20912 . -298) (undo-tree-id20913 . -298) (undo-tree-id20914 . -298) (undo-tree-id20915 . -298) (undo-tree-id20916 . -298) (undo-tree-id20917 . -298) (undo-tree-id20918 . -298) (undo-tree-id20919 . -298) (undo-tree-id20920 . -298) (undo-tree-id20921 . -298) (undo-tree-id20922 . -298) (undo-tree-id20923 . -298) (undo-tree-id20924 . -298) (undo-tree-id20925 . -298) (undo-tree-id20926 . -298) (undo-tree-id20927 . -298) (undo-tree-id20928 . -298) (undo-tree-id20929 . -298) (undo-tree-id20930 . -298) (undo-tree-id20931 . -298) (undo-tree-id20932 . -298) (undo-tree-id20933 . -298) (undo-tree-id20934 . -298) (undo-tree-id20935 . -298) (undo-tree-id20936 . -298) (undo-tree-id20937 . -298) (undo-tree-id20938 . -298) (undo-tree-id20939 . -298) (undo-tree-id20940 . -298) (undo-tree-id20941 . -298) (undo-tree-id20942 . -298) (undo-tree-id20943 . -298) (undo-tree-id20944 . -298) (undo-tree-id20945 . -298) (undo-tree-id20946 . -298) (undo-tree-id20947 . -298) (undo-tree-id20948 . -298) (undo-tree-id20949 . -298) (undo-tree-id20950 . -298) (undo-tree-id20951 . -298) (undo-tree-id20952 . -298) (undo-tree-id20953 . -298) (undo-tree-id20954 . -298) (undo-tree-id20955 . -298) (undo-tree-id20956 . -298) (undo-tree-id20957 . -298) (undo-tree-id20958 . -298) (undo-tree-id20959 . -298) (undo-tree-id20960 . -298) (undo-tree-id20961 . -298) (undo-tree-id20962 . -298) (undo-tree-id20963 . -298) (undo-tree-id20964 . -298) (undo-tree-id20965 . -298) (undo-tree-id20966 . -298) (undo-tree-id20967 . -298) (undo-tree-id20968 . -298) (undo-tree-id20969 . -298) (undo-tree-id20970 . -298) (undo-tree-id20971 . -298) (undo-tree-id20972 . -298) (undo-tree-id20973 . -298) (undo-tree-id20974 . -298) (undo-tree-id20975 . -298) (undo-tree-id20976 . -298) (undo-tree-id20977 . -298) (undo-tree-id20978 . -298) (undo-tree-id20979 . -298) (undo-tree-id20980 . -298) (undo-tree-id20981 . -298) (undo-tree-id20982 . -298) (undo-tree-id20983 . -298) (undo-tree-id20984 . -298) (undo-tree-id20985 . -298) (undo-tree-id20986 . -298) (undo-tree-id20987 . -298) (undo-tree-id20988 . -298) (undo-tree-id20989 . -298) (undo-tree-id20990 . -298) (undo-tree-id20991 . -298) (undo-tree-id20992 . -298) (undo-tree-id20993 . -298) (undo-tree-id20994 . -298) (undo-tree-id20995 . -298) (undo-tree-id20996 . -298) (undo-tree-id20997 . -298) (undo-tree-id20998 . -298) (undo-tree-id20999 . -298) (undo-tree-id21000 . -298) (undo-tree-id21001 . -298) (undo-tree-id21002 . -298) (undo-tree-id21003 . -298) (undo-tree-id21004 . -298) (undo-tree-id21005 . -298) (undo-tree-id21006 . -298) (undo-tree-id21007 . -298) (undo-tree-id21008 . -298) (undo-tree-id21009 . -298) (undo-tree-id21010 . -298) (undo-tree-id21011 . -298) (undo-tree-id21012 . -298) (undo-tree-id21013 . -298) (undo-tree-id21014 . -298) (undo-tree-id21015 . -298) (undo-tree-id21016 . -298) (undo-tree-id21017 . -298) (undo-tree-id21018 . -298) (undo-tree-id21019 . -298) (undo-tree-id21020 . -298) (undo-tree-id21021 . -298) (undo-tree-id21022 . -298) (undo-tree-id21023 . -298) (undo-tree-id21024 . -298) (undo-tree-id21025 . -298) (undo-tree-id21026 . -298) (undo-tree-id21027 . -298) (undo-tree-id21028 . -298) (undo-tree-id21029 . -298) (undo-tree-id21030 . -298) (undo-tree-id21031 . -298) (undo-tree-id21032 . -298) (undo-tree-id21033 . -298) (undo-tree-id21034 . -298) (undo-tree-id21035 . -298) (undo-tree-id21036 . -298) (undo-tree-id21037 . -298) (undo-tree-id21038 . -298) (undo-tree-id21039 . -298) (undo-tree-id21040 . -298) (undo-tree-id21041 . -298) (undo-tree-id21042 . -298) (undo-tree-id21043 . -298) (undo-tree-id21044 . -298) (undo-tree-id21045 . -298) (undo-tree-id21046 . -298) (undo-tree-id21047 . -298) (undo-tree-id21048 . -298) (undo-tree-id21049 . -298) (undo-tree-id21050 . -298) (undo-tree-id21051 . -298) (undo-tree-id21052 . -298) (undo-tree-id21053 . -298) (undo-tree-id21054 . -298) (undo-tree-id21055 . -298) (undo-tree-id21056 . -298) (undo-tree-id21057 . -298) (undo-tree-id21058 . -298) (undo-tree-id21059 . -298) (undo-tree-id21060 . -298) (undo-tree-id21061 . -298) (undo-tree-id21062 . -298) (undo-tree-id21063 . -298) (undo-tree-id21064 . -298) (undo-tree-id21065 . -298) (undo-tree-id21066 . -298) (undo-tree-id21067 . -298) (undo-tree-id21068 . -298) (undo-tree-id21069 . -298) (undo-tree-id21070 . -298) (undo-tree-id21071 . -298) (undo-tree-id21072 . -298) (undo-tree-id21073 . -298) (undo-tree-id21074 . -298) (undo-tree-id21075 . -298) (undo-tree-id21076 . -298) (undo-tree-id21077 . -298) (undo-tree-id21078 . -298) (undo-tree-id21079 . -298) (undo-tree-id21080 . -298) (undo-tree-id21081 . -298) (undo-tree-id21082 . -298) (undo-tree-id21083 . -298) (undo-tree-id21084 . -298) (undo-tree-id21085 . -298) (undo-tree-id21086 . -298) (undo-tree-id21087 . -298) (undo-tree-id21088 . -298) (undo-tree-id21089 . -298) (undo-tree-id21090 . -298) (undo-tree-id21091 . -298) (undo-tree-id21092 . -298) (undo-tree-id21093 . -298) (undo-tree-id21094 . -298) (undo-tree-id21095 . -298) (undo-tree-id21096 . -298) (undo-tree-id21097 . -298) (undo-tree-id21098 . -298) (undo-tree-id21099 . -298) (undo-tree-id21100 . -298) (undo-tree-id21101 . -298) (undo-tree-id21102 . -298) (undo-tree-id21103 . -298) (undo-tree-id21104 . -298) (undo-tree-id21105 . -298) (undo-tree-id21106 . -298) (undo-tree-id21107 . -298) (undo-tree-id21108 . -298) (undo-tree-id21109 . -298) (undo-tree-id21110 . -298) (undo-tree-id21111 . -298) (undo-tree-id21112 . -298) (undo-tree-id21113 . -298) (undo-tree-id21114 . -298) (undo-tree-id21115 . -298) (undo-tree-id21116 . -298) (undo-tree-id21117 . -298) (undo-tree-id21118 . -298) (undo-tree-id21119 . -298) (undo-tree-id21120 . -298) (undo-tree-id21121 . -298) (undo-tree-id21122 . -298) (undo-tree-id21123 . -298) (undo-tree-id21124 . -298) (undo-tree-id21125 . -298) (undo-tree-id21126 . -298) (undo-tree-id21127 . -298) (undo-tree-id21128 . -298) (undo-tree-id21129 . -298) (undo-tree-id21130 . -298) (undo-tree-id21131 . -298) (undo-tree-id21132 . -298) (undo-tree-id21133 . -298) (undo-tree-id21134 . -298) (undo-tree-id21135 . -298) (undo-tree-id21136 . -298) (undo-tree-id21137 . -298) (undo-tree-id21138 . -298) (undo-tree-id21139 . -298) (undo-tree-id21140 . -298) (undo-tree-id21141 . -298) (undo-tree-id21142 . -298) (undo-tree-id21143 . -298) (undo-tree-id21144 . -298) (undo-tree-id21145 . -298) (undo-tree-id21146 . -298) (undo-tree-id21147 . -298) (undo-tree-id21148 . -298) (undo-tree-id21149 . -298) (undo-tree-id21150 . -298) (undo-tree-id21151 . -298) (undo-tree-id21152 . -298) (undo-tree-id21153 . -298) (undo-tree-id21154 . -298) (undo-tree-id21155 . -298) (undo-tree-id21156 . -298) (undo-tree-id21157 . -298) (undo-tree-id21158 . -298) (undo-tree-id21159 . -298) (undo-tree-id21160 . -298) (undo-tree-id21161 . -298) (undo-tree-id21162 . -298) (undo-tree-id21163 . -298) (undo-tree-id21164 . -298) (undo-tree-id21165 . -298) (undo-tree-id21166 . -298) (undo-tree-id21167 . -298) (undo-tree-id21168 . -298) (undo-tree-id21169 . -298) (undo-tree-id21170 . -298) (undo-tree-id21171 . -298) (undo-tree-id21172 . -298) (undo-tree-id21173 . -298) (undo-tree-id21174 . -298) (undo-tree-id21175 . -298) (undo-tree-id21176 . -298) (undo-tree-id21177 . -298) (undo-tree-id21178 . -298) (undo-tree-id21179 . -298) (undo-tree-id21180 . -298) (undo-tree-id21181 . -298) (undo-tree-id21182 . -298) (undo-tree-id21183 . -298) (undo-tree-id21184 . -298) (undo-tree-id21185 . -298) (undo-tree-id21186 . -298) (undo-tree-id21187 . -298) (undo-tree-id21188 . -298) (undo-tree-id21189 . -298) (undo-tree-id21190 . -298) (undo-tree-id21191 . -298) (undo-tree-id21192 . -298) (undo-tree-id21193 . -298) (undo-tree-id21194 . -298) (undo-tree-id21195 . -298) (undo-tree-id21196 . -298) (undo-tree-id21197 . -298) (undo-tree-id21198 . -298) (undo-tree-id21199 . -298) (undo-tree-id21200 . -298) (undo-tree-id21201 . -298) (undo-tree-id21202 . -298) (undo-tree-id21203 . -298) (undo-tree-id21204 . -298) (undo-tree-id21205 . -298) (undo-tree-id21206 . -298) (undo-tree-id21207 . -298) (undo-tree-id21208 . -298) (undo-tree-id21209 . -298) (undo-tree-id21210 . -298) (undo-tree-id21211 . -298) (undo-tree-id21212 . -298) (undo-tree-id21213 . -298) (undo-tree-id21214 . -298) (undo-tree-id21215 . -298) (undo-tree-id21216 . -298) (undo-tree-id21217 . -298) (undo-tree-id21218 . -298) (undo-tree-id21219 . -298) (undo-tree-id21220 . -298) (undo-tree-id21221 . -298) (undo-tree-id21222 . -298) (undo-tree-id21223 . -298) (undo-tree-id21224 . -298) (undo-tree-id21225 . -298) (undo-tree-id21226 . -298) (undo-tree-id21227 . -298) (undo-tree-id21228 . -298) (undo-tree-id21229 . -298) (undo-tree-id21230 . -298) (undo-tree-id21231 . -298) (undo-tree-id21232 . -298) (undo-tree-id21233 . -298) (undo-tree-id21234 . -298) (undo-tree-id21235 . -298) (undo-tree-id21236 . -298) (undo-tree-id21237 . -298) (undo-tree-id21238 . -298) (undo-tree-id21239 . -298) (undo-tree-id21240 . -298) (undo-tree-id21241 . -298) (undo-tree-id21242 . -298) (undo-tree-id21243 . -298) (undo-tree-id21244 . -298) (undo-tree-id21245 . -298) (undo-tree-id21246 . -298) (undo-tree-id21247 . -298) (undo-tree-id21248 . -298) (undo-tree-id21249 . -298) (undo-tree-id21250 . -298) (undo-tree-id21251 . -298) (undo-tree-id21252 . -298) (undo-tree-id21253 . -298) (undo-tree-id21254 . -298) (undo-tree-id21255 . -298) (undo-tree-id21256 . -299) (undo-tree-id21257 . -299) (undo-tree-id21258 . -299) (undo-tree-id21259 . -299) (undo-tree-id21260 . -299) (undo-tree-id21261 . -299) (undo-tree-id21262 . -299) (undo-tree-id21263 . -299) (undo-tree-id21264 . -299) (undo-tree-id21265 . -299) (undo-tree-id21266 . -299) (undo-tree-id21267 . -299) (undo-tree-id21268 . -299) (undo-tree-id21269 . -299) (undo-tree-id21270 . -299) (undo-tree-id21271 . -299) (undo-tree-id21272 . -299) (undo-tree-id21273 . -299) (undo-tree-id21274 . -299) (undo-tree-id21275 . -299) (undo-tree-id21276 . -299) (undo-tree-id21277 . -299) (undo-tree-id21278 . -299) (undo-tree-id21279 . -300) (undo-tree-id21280 . -300) (undo-tree-id21281 . -300) (undo-tree-id21282 . -300) (undo-tree-id21283 . -300) (undo-tree-id21284 . -300) (undo-tree-id21285 . -300) (undo-tree-id21286 . -300) (undo-tree-id21287 . -300) (undo-tree-id21288 . -300) (undo-tree-id21289 . -300) (undo-tree-id21290 . -300) (undo-tree-id21291 . -300) (undo-tree-id21292 . -300) (undo-tree-id21293 . -300) (undo-tree-id21294 . -300) (undo-tree-id21295 . -300) (undo-tree-id21296 . -300) (undo-tree-id21297 . -300) (undo-tree-id21298 . -300) (undo-tree-id21299 . -300) (undo-tree-id21300 . -300) (undo-tree-id21301 . -300) (undo-tree-id21302 . -299) (undo-tree-id21303 . -299) (undo-tree-id21304 . -299) (undo-tree-id21305 . -299) (undo-tree-id21306 . -299) (undo-tree-id21307 . -299) (undo-tree-id21308 . -299) (undo-tree-id21309 . -299) (undo-tree-id21310 . -299) (undo-tree-id21311 . -299) (undo-tree-id21312 . -299) (undo-tree-id21313 . -299) (undo-tree-id21314 . -299) (undo-tree-id21315 . -299) (undo-tree-id21316 . -299) (undo-tree-id21317 . -299) (undo-tree-id21318 . -299) (undo-tree-id21319 . -299) (undo-tree-id21320 . -299) (undo-tree-id21321 . -299) (undo-tree-id21322 . -299) (undo-tree-id21323 . -299) (undo-tree-id21324 . -299) (undo-tree-id21325 . -299) (undo-tree-id21326 . -299) (undo-tree-id21327 . -299) (undo-tree-id21328 . -300) (undo-tree-id21329 . -300) (undo-tree-id21330 . -300) (undo-tree-id21331 . -300) (undo-tree-id21332 . -300) (undo-tree-id21333 . -300) (undo-tree-id21334 . -300) (undo-tree-id21335 . -300) (undo-tree-id21336 . -300) (undo-tree-id21337 . -300) (undo-tree-id21338 . -300) (undo-tree-id21339 . -300) (undo-tree-id21340 . -300) (undo-tree-id21341 . -300) (undo-tree-id21342 . -300) (undo-tree-id21343 . -300) (undo-tree-id21344 . -300) (undo-tree-id21345 . -300) (undo-tree-id21346 . -300) (undo-tree-id21347 . -300) (undo-tree-id21348 . -300) (undo-tree-id21349 . -300) (undo-tree-id21350 . -300) (undo-tree-id21351 . -300) (undo-tree-id21352 . -300) (undo-tree-id21353 . -300) (undo-tree-id21354 . -300) (undo-tree-id21355 . -300) (undo-tree-id21356 . -300) (undo-tree-id21357 . -300) (undo-tree-id21358 . -300) (undo-tree-id21359 . -300) (undo-tree-id21360 . -300) (undo-tree-id21361 . -300) (undo-tree-id21362 . -300) (undo-tree-id21363 . -300) (undo-tree-id21364 . -300) (undo-tree-id21365 . -300) (undo-tree-id21366 . -300) (undo-tree-id21367 . -300) (undo-tree-id21368 . -300) (undo-tree-id21369 . -300) (undo-tree-id21370 . -300) (undo-tree-id21371 . -300) (undo-tree-id21372 . -300) (undo-tree-id21373 . -300) (undo-tree-id21374 . -300) (undo-tree-id21375 . -300) (undo-tree-id21376 . -301) (undo-tree-id21377 . -301) (undo-tree-id21378 . -301) (undo-tree-id21379 . -301) (undo-tree-id21380 . -301) (undo-tree-id21381 . -301) (undo-tree-id21382 . -301) (undo-tree-id21383 . -301) (undo-tree-id21384 . -301) (undo-tree-id21385 . -301) (undo-tree-id21386 . -301) (undo-tree-id21387 . -301) (undo-tree-id21388 . -301) (undo-tree-id21389 . -301) (undo-tree-id21390 . -301) (undo-tree-id21391 . -301) (undo-tree-id21392 . -301) (undo-tree-id21393 . -301) (undo-tree-id21394 . -301) (undo-tree-id21395 . -301) (undo-tree-id21396 . -301) (undo-tree-id21397 . -301) (undo-tree-id21398 . -301) (undo-tree-id21399 . -300) (undo-tree-id21400 . -300) (undo-tree-id21401 . -300) (undo-tree-id21402 . -300) (undo-tree-id21403 . -300) (undo-tree-id21404 . -300) (undo-tree-id21405 . -300) (undo-tree-id21406 . -300) (undo-tree-id21407 . -300) (undo-tree-id21408 . -300) (undo-tree-id21409 . -300) (undo-tree-id21410 . -300) (undo-tree-id21411 . -300) (undo-tree-id21412 . -300) (undo-tree-id21413 . -300) (undo-tree-id21414 . -300) (undo-tree-id21415 . -300) (undo-tree-id21416 . -300) (undo-tree-id21417 . -300) (undo-tree-id21418 . -300) (undo-tree-id21419 . -300) (undo-tree-id21420 . -300) (undo-tree-id21421 . -300) (undo-tree-id21422 . -300) (undo-tree-id21423 . -300) (undo-tree-id21424 . -300) (undo-tree-id21425 . -300) (undo-tree-id21426 . -300) (undo-tree-id21427 . -300) (undo-tree-id21428 . -300) (undo-tree-id21429 . -300) (undo-tree-id21430 . -300) (undo-tree-id21431 . -300) (undo-tree-id21432 . -301) (undo-tree-id21433 . -301) (undo-tree-id21434 . -301) (undo-tree-id21435 . -301) (undo-tree-id21436 . -301) (undo-tree-id21437 . -301) (undo-tree-id21438 . -301) (undo-tree-id21439 . -301) (undo-tree-id21440 . -301) (undo-tree-id21441 . -301) (undo-tree-id21442 . -301) (undo-tree-id21443 . -301) (undo-tree-id21444 . -301) (undo-tree-id21445 . -301) (undo-tree-id21446 . -301) (undo-tree-id21447 . -303) (undo-tree-id21448 . -303) (undo-tree-id21449 . -303) (undo-tree-id21450 . -303) (undo-tree-id21451 . -303) (undo-tree-id21452 . -303) (undo-tree-id21453 . -303) (undo-tree-id21454 . -303) (undo-tree-id21455 . -303) (undo-tree-id21456 . -303) (undo-tree-id21457 . -303) (undo-tree-id21458 . -303) (undo-tree-id21459 . -303) (undo-tree-id21460 . -303) (undo-tree-id21461 . -303) (undo-tree-id21462 . -310) (undo-tree-id21463 . -310) (undo-tree-id21464 . -310) (undo-tree-id21465 . -310) (undo-tree-id21466 . -310) (undo-tree-id21467 . -310) (undo-tree-id21468 . -310) (undo-tree-id21469 . -310) (undo-tree-id21470 . -310) (undo-tree-id21471 . -310) (undo-tree-id21472 . -310) (undo-tree-id21473 . -310) (undo-tree-id21474 . -310) (undo-tree-id21475 . -310) (undo-tree-id21476 . -310) (undo-tree-id21477 . -317) (undo-tree-id21478 . -317) (undo-tree-id21479 . -317) (undo-tree-id21480 . -317) (undo-tree-id21481 . -317) (undo-tree-id21482 . -317) (undo-tree-id21483 . -317) (undo-tree-id21484 . -317) (undo-tree-id21485 . -317) (undo-tree-id21486 . -317) (undo-tree-id21487 . -317) (undo-tree-id21488 . -317) (undo-tree-id21489 . -317) (undo-tree-id21490 . -317) (undo-tree-id21491 . -317) (undo-tree-id21492 . -318) (undo-tree-id21493 . -318) (undo-tree-id21494 . -318) (undo-tree-id21495 . -318) (undo-tree-id21496 . -318) (undo-tree-id21497 . -318) (undo-tree-id21498 . -318) (undo-tree-id21499 . -318) (undo-tree-id21500 . -318) (undo-tree-id21501 . -318) (undo-tree-id21502 . -318) (undo-tree-id21503 . -318) (undo-tree-id21504 . -318) (undo-tree-id21505 . -318) (undo-tree-id21506 . -318) (undo-tree-id21507 . -318) (undo-tree-id21508 . -318) (undo-tree-id21509 . -318) (undo-tree-id21510 . -318) (undo-tree-id21511 . -318) (undo-tree-id21512 . -318) (undo-tree-id21513 . -318) (undo-tree-id21514 . -318) (undo-tree-id21515 . -318) (undo-tree-id21516 . -318) (undo-tree-id21517 . -318) (undo-tree-id21518 . -318) (undo-tree-id21519 . -318) (undo-tree-id21520 . -318) (undo-tree-id21521 . -318) (undo-tree-id21522 . -318) (undo-tree-id21523 . -318) (undo-tree-id21524 . -318) (undo-tree-id21525 . -318) (undo-tree-id21526 . -318) (undo-tree-id21527 . -318) (undo-tree-id21528 . -239) (undo-tree-id21529 . -239) (undo-tree-id21530 . -239) (undo-tree-id21531 . -239) (undo-tree-id21532 . -239) (undo-tree-id21533 . -239) (undo-tree-id21534 . -239) (undo-tree-id21535 . -239) (undo-tree-id21536 . -239) (undo-tree-id21537 . -239) (undo-tree-id21538 . -239) (undo-tree-id21539 . -239) (undo-tree-id21540 . -239) (undo-tree-id21541 . -239) (undo-tree-id21542 . -239) (undo-tree-id21543 . -318) (undo-tree-id21544 . -318) (undo-tree-id21545 . -318) (undo-tree-id21546 . -318) (undo-tree-id21547 . -318) (undo-tree-id21548 . -318) (undo-tree-id21549 . -318) (undo-tree-id21550 . -318) (undo-tree-id21551 . -318) (undo-tree-id21552 . -318) (undo-tree-id21553 . -318) (undo-tree-id21554 . -318) (undo-tree-id21555 . -318) (undo-tree-id21556 . -318) (undo-tree-id21557 . -318) (undo-tree-id21558 . -318) (undo-tree-id21559 . -318) (undo-tree-id21560 . -318) (undo-tree-id21561 . -318) (undo-tree-id21562 . -318) (undo-tree-id21563 . -318) (undo-tree-id21564 . -318) (undo-tree-id21565 . -318) (undo-tree-id21566 . -318) (undo-tree-id21567 . -318) (undo-tree-id21568 . -318) (undo-tree-id21569 . -318) (undo-tree-id21570 . -318) (undo-tree-id21571 . -318) (undo-tree-id21572 . -318) (undo-tree-id21573 . -318) (undo-tree-id21574 . -318) (undo-tree-id21575 . -318) (undo-tree-id21576 . -318) (undo-tree-id21577 . -318) (undo-tree-id21578 . -318) (undo-tree-id21579 . -318) (undo-tree-id21580 . -318) (undo-tree-id21581 . -318) (undo-tree-id21582 . -318) (undo-tree-id21583 . -318) (undo-tree-id21584 . -318) (undo-tree-id21585 . -318) (undo-tree-id21586 . -239) (undo-tree-id21587 . -239) (undo-tree-id21588 . -239) (undo-tree-id21589 . -239) (undo-tree-id21590 . -239) (undo-tree-id21591 . -239) (undo-tree-id21592 . -239) (undo-tree-id21593 . -239) (undo-tree-id21594 . -239) (undo-tree-id21595 . -239) (undo-tree-id21596 . -239) (undo-tree-id21597 . -239) (undo-tree-id21598 . -239) (undo-tree-id21599 . -239) (undo-tree-id21600 . -239) (undo-tree-id21601 . -239) (undo-tree-id21602 . -239) (undo-tree-id21603 . -239) (undo-tree-id21604 . -239) (undo-tree-id21605 . -239) (undo-tree-id21606 . -239) (undo-tree-id21607 . -239) (undo-tree-id21608 . -239) (undo-tree-id21609 . -239) (undo-tree-id21610 . -239) (undo-tree-id21611 . -239) (undo-tree-id21612 . -239) (undo-tree-id21613 . -239) (undo-tree-id21614 . -239) (undo-tree-id21615 . -298) (undo-tree-id21616 . -298) (undo-tree-id21617 . -298) (undo-tree-id21618 . -298) (undo-tree-id21619 . -298) (undo-tree-id21620 . -298) (undo-tree-id21621 . -298) (undo-tree-id21622 . -298) (undo-tree-id21623 . -298) (undo-tree-id21624 . -298) (undo-tree-id21625 . -298) (undo-tree-id21626 . -298) (undo-tree-id21627 . -298) (undo-tree-id21628 . -298) (undo-tree-id21629 . -298) (undo-tree-id21630 . -298) (undo-tree-id21631 . -298) (undo-tree-id21632 . -298) (undo-tree-id21633 . -298) (undo-tree-id21634 . -298) (undo-tree-id21635 . -298) (undo-tree-id21636 . -298) (undo-tree-id21637 . -298) (undo-tree-id21638 . -298) (undo-tree-id21639 . -298) (undo-tree-id21640 . -298) (undo-tree-id21641 . -298) (undo-tree-id21642 . -298) (undo-tree-id21643 . -298) (undo-tree-id21644 . -298) (undo-tree-id21645 . -298) (undo-tree-id21646 . -298) (undo-tree-id21647 . -298) (undo-tree-id21648 . -298) (undo-tree-id21649 . -298) (undo-tree-id21650 . -298) (undo-tree-id21651 . 8) (undo-tree-id21652 . -317) (undo-tree-id21653 . -317) (undo-tree-id21654 . -317) (undo-tree-id21655 . -317) (undo-tree-id21656 . -317) (undo-tree-id21657 . -317) (undo-tree-id21658 . -317) (undo-tree-id21659 . -317) (undo-tree-id21660 . -317) (undo-tree-id21661 . -317) (undo-tree-id21662 . -317) (undo-tree-id21663 . -317) (undo-tree-id21664 . -317) (undo-tree-id21665 . -317) (undo-tree-id21666 . -317) (undo-tree-id21667 . -317) (undo-tree-id21668 . -317) (undo-tree-id21669 . -317) (undo-tree-id21670 . -317) (undo-tree-id21671 . -317) (undo-tree-id21672 . -317) (undo-tree-id21673 . -317) (undo-tree-id21674 . -317) (undo-tree-id21675 . -317) (undo-tree-id21676 . -317) (undo-tree-id21677 . -317) (undo-tree-id21678 . -317) (undo-tree-id21679 . -317) (undo-tree-id21680 . -317) (undo-tree-id21681 . -317) (undo-tree-id21682 . -317) (undo-tree-id21683 . -317) (undo-tree-id21684 . -317) (undo-tree-id21685 . -317) (undo-tree-id21686 . -317) (undo-tree-id21687 . -317) (undo-tree-id21688 . -317) (undo-tree-id21689 . -317) (undo-tree-id21690 . -317) (undo-tree-id21691 . -317) (undo-tree-id21692 . -317) (undo-tree-id21693 . -317) (undo-tree-id21694 . -317) (undo-tree-id21695 . -317) (undo-tree-id21696 . -317) (undo-tree-id21697 . -317) (undo-tree-id21698 . -317) (undo-tree-id21699 . -317) (undo-tree-id21700 . -317) (undo-tree-id21701 . -318) (undo-tree-id21702 . -318) (undo-tree-id21703 . -318) (undo-tree-id21704 . -318) (undo-tree-id21705 . -318) (undo-tree-id21706 . -318) (undo-tree-id21707 . -318) (undo-tree-id21708 . -318) (undo-tree-id21709 . -318) (undo-tree-id21710 . -318) (undo-tree-id21711 . -318) (undo-tree-id21712 . -318) (undo-tree-id21713 . -318) (undo-tree-id21714 . -318) (undo-tree-id21715 . -318) (undo-tree-id21716 . -318) (undo-tree-id21717 . -318) (undo-tree-id21718 . -318) (undo-tree-id21719 . -318) (undo-tree-id21720 . -318) (undo-tree-id21721 . -318) (undo-tree-id21722 . -318) (undo-tree-id21723 . 1) (undo-tree-id21724 . -318) (undo-tree-id21725 . 18) (undo-tree-id21726 . -301) (undo-tree-id21727 . -318) (undo-tree-id21728 . -318) (undo-tree-id21729 . -318) (undo-tree-id21730 . -318) (undo-tree-id21731 . -318) (undo-tree-id21732 . -318) (undo-tree-id21733 . -318) (undo-tree-id21734 . -318) (undo-tree-id21735 . -317) (undo-tree-id21736 . -317) (undo-tree-id21737 . -317) (undo-tree-id21738 . -317) (undo-tree-id21739 . -317) (undo-tree-id21740 . -317) (undo-tree-id21741 . -317) (undo-tree-id21742 . -317) (undo-tree-id21743 . -317) (undo-tree-id21744 . -317) (undo-tree-id21745 . -317) (undo-tree-id21746 . -317) (undo-tree-id21747 . -317) (undo-tree-id21748 . -317) (undo-tree-id21749 . -317) (undo-tree-id21750 . -317) (undo-tree-id21751 . -317) (undo-tree-id21752 . -317) (undo-tree-id21753 . -317) (undo-tree-id21754 . -317) (undo-tree-id21755 . -317) (undo-tree-id21756 . -317) (undo-tree-id21757 . -317) (undo-tree-id21758 . -317) (undo-tree-id21759 . -317) (undo-tree-id21760 . -317) (undo-tree-id21761 . -318) (undo-tree-id21762 . -318) (undo-tree-id21763 . -318) (undo-tree-id21764 . -318) (undo-tree-id21765 . -318) (undo-tree-id21766 . -318) (undo-tree-id21767 . -318) (undo-tree-id21768 . -318) (undo-tree-id21769 . -318) (undo-tree-id21770 . -318) (undo-tree-id21771 . -318) (undo-tree-id21772 . -318) (undo-tree-id21773 . -318) (undo-tree-id21774 . -318) (undo-tree-id21775 . -318) (undo-tree-id21776 . -318) (undo-tree-id21777 . -318) (undo-tree-id21778 . -318) (undo-tree-id21779 . -237) (2593 . 2830) (#(" analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g., to shuffle them or batch them). However, we cannot use a nested dataset directly for training, as our model will" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 15 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 16 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 45 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 46 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 86 87 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 87 88 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 88 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 92 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 95 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 97 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 99 163 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 163 164 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 164 230 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 230 234 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 234 235 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t)) . 2674) (undo-tree-id21780 . 235) (undo-tree-id21781 . -1) (undo-tree-id21782 . -1) (undo-tree-id21783 . -1) (undo-tree-id21784 . -1) (undo-tree-id21785 . -1) (undo-tree-id21786 . -1) (undo-tree-id21787 . -1) (undo-tree-id21788 . -1) (undo-tree-id21789 . -1) (undo-tree-id21790 . -1) (undo-tree-id21791 . -1) (undo-tree-id21792 . -1) (undo-tree-id21793 . -1) (undo-tree-id21794 . -1) (undo-tree-id21795 . -1) (undo-tree-id21796 . -1) (undo-tree-id21797 . -1) (undo-tree-id21798 . -1) (undo-tree-id21799 . -1) (undo-tree-id21800 . -1) (undo-tree-id21801 . -1) (undo-tree-id21802 . -1) (undo-tree-id21803 . -1) (undo-tree-id21804 . -1) (undo-tree-id21805 . -1) (undo-tree-id21806 . -1) (undo-tree-id21807 . -1) (undo-tree-id21808 . -1) (undo-tree-id21809 . -1) (undo-tree-id21810 . -1) (undo-tree-id21811 . -1) (undo-tree-id21812 . -1) (undo-tree-id21813 . -1) (undo-tree-id21814 . -1) (undo-tree-id21815 . -1) (undo-tree-id21816 . -1) (undo-tree-id21817 . -1) (undo-tree-id21818 . -1) (undo-tree-id21819 . -1) (undo-tree-id21820 . -1) (undo-tree-id21821 . -1) (undo-tree-id21822 . -1) (undo-tree-id21823 . -1) (undo-tree-id21824 . -1) (undo-tree-id21825 . -1) (undo-tree-id21826 . -1) (undo-tree-id21827 . -1) (undo-tree-id21828 . -1) (undo-tree-id21829 . -1) (undo-tree-id21830 . -1) (undo-tree-id21831 . -1) (undo-tree-id21832 . -1) (undo-tree-id21833 . -1) (undo-tree-id21834 . -1) (undo-tree-id21835 . -1) (undo-tree-id21836 . -1) (undo-tree-id21837 . -1) (undo-tree-id21838 . -1) (undo-tree-id21839 . -1) (undo-tree-id21840 . -1) (undo-tree-id21841 . -1) (undo-tree-id21842 . -1) (undo-tree-id21843 . -1) (undo-tree-id21844 . -1) (undo-tree-id21845 . -1) (undo-tree-id21846 . -1) (undo-tree-id21847 . -1) (undo-tree-id21848 . -1) (undo-tree-id21849 . -1) (undo-tree-id21850 . -1) (undo-tree-id21851 . -1) (undo-tree-id21852 . -1) (undo-tree-id21853 . -1) (undo-tree-id21854 . -1) (undo-tree-id21855 . -1) (undo-tree-id21856 . -1) (undo-tree-id21857 . -1) (undo-tree-id21858 . -1) (undo-tree-id21859 . -1)) nil (25767 5621 572743 399000) 0 nil])
([nil nil ((#("analogous to a list of lists. This is useful when you want to transform each window by calling its dataset methods (e.g." 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 15 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 44 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 45 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 85 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 86 87 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 87 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 91 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 94 96 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 96 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 98 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2677) (undo-tree-id23048 . -119) (undo-tree-id23049 . 120) (undo-tree-id23050 . -77) (undo-tree-id23051 . -77) (undo-tree-id23052 . -77) (undo-tree-id23053 . -77) (undo-tree-id23054 . -77) (undo-tree-id23055 . -77) (undo-tree-id23056 . -77) (undo-tree-id23057 . -77) (undo-tree-id23058 . -77) (undo-tree-id23059 . -77) (undo-tree-id23060 . -77) (undo-tree-id23061 . -77) (undo-tree-id23062 . -77) (undo-tree-id23063 . -77) (undo-tree-id23064 . -77) (undo-tree-id23065 . -77) (undo-tree-id23066 . -77) (undo-tree-id23067 . -77) (undo-tree-id23068 . -77) (undo-tree-id23069 . -77) (undo-tree-id23070 . -77) (undo-tree-id23071 . -77) (undo-tree-id23072 . -120) (t 25767 5621 606813 854000)) nil (25767 5665 194661 688000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2677) (undo-tree-id23045 . 1) (undo-tree-id23046 . -1) (undo-tree-id23047 . -1)) nil (25767 5665 194642 124000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2677) (undo-tree-id23042 . 1) (undo-tree-id23043 . -1) (undo-tree-id23044 . -1)) nil (25767 5665 194638 836000) 0 nil])
([nil nil ((2677 . 2680) (#("to" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2677) (undo-tree-id23010 . -1) (undo-tree-id23011 . -1) (undo-tree-id23012 . 2) (undo-tree-id23013 . -1) (undo-tree-id23014 . -2) (undo-tree-id23015 . -1) (undo-tree-id23016 . -1) (undo-tree-id23017 . -1) (undo-tree-id23018 . -1) (undo-tree-id23019 . -1) (undo-tree-id23020 . -1) (undo-tree-id23021 . -1) (undo-tree-id23022 . -1) (undo-tree-id23023 . -1) (undo-tree-id23024 . -1) (undo-tree-id23025 . -1) (undo-tree-id23026 . -1) (undo-tree-id23027 . -1) (undo-tree-id23028 . -1) (undo-tree-id23029 . -1) (undo-tree-id23030 . -1) (undo-tree-id23031 . -1) (undo-tree-id23032 . -1) (undo-tree-id23033 . -1) (undo-tree-id23034 . -1) (undo-tree-id23035 . -1) (undo-tree-id23036 . -1) (undo-tree-id23037 . -1) (undo-tree-id23038 . -1) (undo-tree-id23039 . -2) (undo-tree-id23040 . -2) (undo-tree-id23041 . -2) 2678) nil (25767 5665 194902 106000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2707) (undo-tree-id23359 . 1) (undo-tree-id23360 . -1) (undo-tree-id23361 . -1) (undo-tree-id23362 . -1)) nil (25767 5678 630146 204000) 0 nil] [nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2681) (undo-tree-id23008 . -1) (undo-tree-id23009 . -1)) ((2681 . 2682)) (25767 5665 194599 842000) 0 nil])
([nil nil ((2675 . 2791) (#("- However, we cannot use a nested dataset directly for training, as our model will
- Can shuffle them or batch them." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 10 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 10 11 (font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 11 77 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 77 81 (font-lock-fontified t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 81 82 (font-lock-fontified t rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 82 83 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 83 84 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 84 88 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 88 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t) 89 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t) 90 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil font-lock-fontified t)) . 2675) (undo-tree-id23088 . -115) (undo-tree-id23089 . -115) (undo-tree-id23090 . -85) (undo-tree-id23091 . -85) (undo-tree-id23092 . 28) (undo-tree-id23093 . 28) (undo-tree-id23094 . -87) (undo-tree-id23095 . -88) (undo-tree-id23096 . -116) (undo-tree-id23097 . -85) (undo-tree-id23098 . -85) (undo-tree-id23099 . -85) (undo-tree-id23100 . -85) (undo-tree-id23101 . -85) (undo-tree-id23102 . -85) (undo-tree-id23103 . -85) (undo-tree-id23104 . -85) (undo-tree-id23105 . -85) (undo-tree-id23106 . -85) (undo-tree-id23107 . -85) (undo-tree-id23108 . -85) (undo-tree-id23109 . -85) (undo-tree-id23110 . -85) (undo-tree-id23111 . -85) (undo-tree-id23112 . -85) (undo-tree-id23113 . -85) (undo-tree-id23114 . -85) (undo-tree-id23115 . -85) (undo-tree-id23116 . -85) (undo-tree-id23117 . -85) (undo-tree-id23118 . -85) (undo-tree-id23119 . -85) (undo-tree-id23120 . -85) (undo-tree-id23121 . -85) (undo-tree-id23122 . -85) (undo-tree-id23123 . -85) (undo-tree-id23124 . -85) (undo-tree-id23125 . -85) (undo-tree-id23126 . -85) (undo-tree-id23127 . -85) (undo-tree-id23128 . -85) (undo-tree-id23129 . -85) (undo-tree-id23130 . -85) (undo-tree-id23131 . -85) (undo-tree-id23132 . -85) (undo-tree-id23133 . -85) (undo-tree-id23134 . -85) (undo-tree-id23135 . -85) (undo-tree-id23136 . -85) (undo-tree-id23137 . -85) (undo-tree-id23138 . -85) (undo-tree-id23139 . -85) (undo-tree-id23140 . -85) (undo-tree-id23141 . -89) (undo-tree-id23142 . -89) (undo-tree-id23143 . -89) (undo-tree-id23144 . -89) (undo-tree-id23145 . -89) (undo-tree-id23146 . -89) (undo-tree-id23147 . -89) (undo-tree-id23148 . -89) (undo-tree-id23149 . -89) (undo-tree-id23150 . -89) (undo-tree-id23151 . -89) (undo-tree-id23152 . -89) (undo-tree-id23153 . -89) (undo-tree-id23154 . -89) (undo-tree-id23155 . -89) (undo-tree-id23156 . -89) (undo-tree-id23157 . -89) (undo-tree-id23158 . -89) (undo-tree-id23159 . -89) (undo-tree-id23160 . -89) (undo-tree-id23161 . -89) (undo-tree-id23162 . -89) (undo-tree-id23163 . -89) (undo-tree-id23164 . -89) (undo-tree-id23165 . -97) (undo-tree-id23166 . -97) (undo-tree-id23167 . -97) (undo-tree-id23168 . -97) (undo-tree-id23169 . -97) (undo-tree-id23170 . -97) (undo-tree-id23171 . -97) (undo-tree-id23172 . -97) (undo-tree-id23173 . -97) (undo-tree-id23174 . -97) (undo-tree-id23175 . -97) (undo-tree-id23176 . -97) (undo-tree-id23177 . -97) (undo-tree-id23178 . -97) (undo-tree-id23179 . -97) (undo-tree-id23180 . -102) (undo-tree-id23181 . -102) (undo-tree-id23182 . -102) (undo-tree-id23183 . -102) (undo-tree-id23184 . -102) (undo-tree-id23185 . -102) (undo-tree-id23186 . -102) (undo-tree-id23187 . -102) (undo-tree-id23188 . -102) (undo-tree-id23189 . -102) (undo-tree-id23190 . -102) (undo-tree-id23191 . -102) (undo-tree-id23192 . -102) (undo-tree-id23193 . -102) (undo-tree-id23194 . -102) (undo-tree-id23195 . -102) (undo-tree-id23196 . -102) (undo-tree-id23197 . -102) (undo-tree-id23198 . -102) (undo-tree-id23199 . -102) (undo-tree-id23200 . -102) (undo-tree-id23201 . -102) (undo-tree-id23202 . -105) (undo-tree-id23203 . -105) (undo-tree-id23204 . -105) (undo-tree-id23205 . -105) (undo-tree-id23206 . -105) (undo-tree-id23207 . -105) (undo-tree-id23208 . -105) (undo-tree-id23209 . -105) (undo-tree-id23210 . -105) (undo-tree-id23211 . -105) (undo-tree-id23212 . -105) (undo-tree-id23213 . -105) (undo-tree-id23214 . -105) (undo-tree-id23215 . -105) (undo-tree-id23216 . -105) (undo-tree-id23217 . -111) (undo-tree-id23218 . -111) (undo-tree-id23219 . -111) (undo-tree-id23220 . -111) (undo-tree-id23221 . -111) (undo-tree-id23222 . -111) (undo-tree-id23223 . -111) (undo-tree-id23224 . -111) (undo-tree-id23225 . -111) (undo-tree-id23226 . -111) (undo-tree-id23227 . -111) (undo-tree-id23228 . -111) (undo-tree-id23229 . -111) (undo-tree-id23230 . -111) (undo-tree-id23231 . -111) (undo-tree-id23232 . -115) (undo-tree-id23233 . -115) (undo-tree-id23234 . -115) (undo-tree-id23235 . -115) (undo-tree-id23236 . -115) (undo-tree-id23237 . -115) (undo-tree-id23238 . -115) (undo-tree-id23239 . -115) (undo-tree-id23240 . -115) (undo-tree-id23241 . -115) (undo-tree-id23242 . -115) (undo-tree-id23243 . -115) (undo-tree-id23244 . -115) (undo-tree-id23245 . -115) (undo-tree-id23246 . -115) (undo-tree-id23247 . -115) (undo-tree-id23248 . -115) (undo-tree-id23249 . -115) (undo-tree-id23250 . -115) (undo-tree-id23251 . -115) (undo-tree-id23252 . -115) (undo-tree-id23253 . -115) (undo-tree-id23254 . -115) (undo-tree-id23255 . -115) (undo-tree-id23256 . -115) (undo-tree-id23257 . -115) (undo-tree-id23258 . -115) (undo-tree-id23259 . -115) (undo-tree-id23260 . -115) (undo-tree-id23261 . -115) (undo-tree-id23262 . -115) (undo-tree-id23263 . -116) (undo-tree-id23264 . -116) (undo-tree-id23265 . -116) (undo-tree-id23266 . -116) (undo-tree-id23267 . -116) (undo-tree-id23268 . -116) (undo-tree-id23269 . -116) (undo-tree-id23270 . -116) (undo-tree-id23271 . -116) (undo-tree-id23272 . -116) (undo-tree-id23273 . -116) (undo-tree-id23274 . -116) (undo-tree-id23275 . -116) (undo-tree-id23276 . -116) (undo-tree-id23277 . -116) (undo-tree-id23278 . -116) (undo-tree-id23279 . -116) (undo-tree-id23280 . -116) (undo-tree-id23281 . -116) (undo-tree-id23282 . -116) (undo-tree-id23283 . -116) (undo-tree-id23284 . -116) (undo-tree-id23285 . -116) (undo-tree-id23286 . -116) (undo-tree-id23287 . -116) (undo-tree-id23288 . -116) (undo-tree-id23289 . -116) (undo-tree-id23290 . -116) (undo-tree-id23291 . -116) (undo-tree-id23292 . -116) (undo-tree-id23293 . -116) (undo-tree-id23294 . -116) (undo-tree-id23295 . -116) (undo-tree-id23296 . -116) (undo-tree-id23297 . -116) (undo-tree-id23298 . -116) (undo-tree-id23299 . -116) (undo-tree-id23300 . -116) (undo-tree-id23301 . -116) (undo-tree-id23302 . -116) (undo-tree-id23303 . -116) (undo-tree-id23304 . -116) (undo-tree-id23305 . -116) (undo-tree-id23306 . -116) (undo-tree-id23307 . -116) (undo-tree-id23308 . -116) (undo-tree-id23309 . -116) (undo-tree-id23310 . -83) (2675 . 2758) (#(" However, we cannot use a nested dataset directly for training, as our model will" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 10 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 76 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 80 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t)) . 2708) (undo-tree-id23311 . -1) (undo-tree-id23312 . -1) (undo-tree-id23313 . -1) (undo-tree-id23314 . -1) (undo-tree-id23315 . -1) (undo-tree-id23316 . -1) (undo-tree-id23317 . -1) (undo-tree-id23318 . -1) (undo-tree-id23319 . -1) (undo-tree-id23320 . -1) (undo-tree-id23321 . -1) (undo-tree-id23322 . -1) (undo-tree-id23323 . -1) (undo-tree-id23324 . -1) (undo-tree-id23325 . -1) (undo-tree-id23326 . -1) (undo-tree-id23327 . -1) (undo-tree-id23328 . -1) (undo-tree-id23329 . -1) (undo-tree-id23330 . -1) (undo-tree-id23331 . -1) (undo-tree-id23332 . -1) (undo-tree-id23333 . -1) (undo-tree-id23334 . -1) (undo-tree-id23335 . -1) (undo-tree-id23336 . -1) (undo-tree-id23337 . -1) (undo-tree-id23338 . -1) (undo-tree-id23339 . -1) (undo-tree-id23340 . -1) (undo-tree-id23341 . -1) (undo-tree-id23342 . -1) (undo-tree-id23343 . -1) (undo-tree-id23344 . -1) (undo-tree-id23345 . -1) (undo-tree-id23346 . -1) (undo-tree-id23347 . -1) (undo-tree-id23348 . -1) (undo-tree-id23349 . -1) (undo-tree-id23350 . -1) (undo-tree-id23351 . -1) (undo-tree-id23352 . -1) (undo-tree-id23353 . -1) (undo-tree-id23354 . -1) (undo-tree-id23355 . -1) (undo-tree-id23356 . -1) (undo-tree-id23357 . -1) (undo-tree-id23358 . -1) 2709) nil (25767 5678 630132 484000) 0 nil])
nil
([nil nil ((2711 . 2712) (#("However, we c" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t) 9 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2711) (undo-tree-id23073 . -12) (undo-tree-id23074 . -12) (undo-tree-id23075 . 13) (undo-tree-id23076 . -12) (undo-tree-id23077 . -13) (undo-tree-id23078 . -12) (undo-tree-id23079 . -6) (undo-tree-id23080 . -7) (undo-tree-id23081 . -10) (undo-tree-id23082 . -13) (undo-tree-id23083 . -12) (undo-tree-id23084 . -12) (undo-tree-id23085 . -13) (undo-tree-id23086 . -13) (undo-tree-id23087 . -13) 2723) nil (25767 5678 629836 125000) 0 nil])
([nil nil ((#("as our model will" 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 12 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t) 16 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t)) . 2762) (undo-tree-id23383 . -16) (undo-tree-id23384 . -1) (undo-tree-id23385 . -17) (undo-tree-id23386 . -17) (t 25767 5678 707031 681000)) nil (25767 5690 155225 766000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2761) (undo-tree-id23378 . -1) (undo-tree-id23379 . -1) (undo-tree-id23380 . -1) (undo-tree-id23381 . -1) (undo-tree-id23382 . -1)) nil (25767 5690 155220 706000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t font-lock-fontified t)) . 2760) (undo-tree-id23363 . -1) (undo-tree-id23364 . -1) (undo-tree-id23365 . -1) (undo-tree-id23366 . -1) (undo-tree-id23367 . -1) (undo-tree-id23368 . -1) (undo-tree-id23369 . -1) (undo-tree-id23370 . -1) (undo-tree-id23371 . -1) (undo-tree-id23372 . -1) (undo-tree-id23373 . -1) (undo-tree-id23374 . -1) (undo-tree-id23375 . -1) (undo-tree-id23376 . -1) (undo-tree-id23377 . -1)) nil (25767 5690 155213 23000) 0 nil])
([nil nil ((2964 . 2966) (t 25767 5690 187080 1000)) nil (25767 5718 755667 739000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4638 . 4639) (nil fontified nil 4624 . 4639) (nil fontified nil 4555 . 4624) (nil fontified nil 4485 . 4555) (nil fontified nil 4412 . 4485) (nil fontified nil 4361 . 4412) (nil fontified nil 4345 . 4361) (nil fontified nil 4273 . 4345) (nil fontified nil 4203 . 4273) (nil fontified nil 4127 . 4203) (nil fontified nil 4052 . 4127) (nil fontified nil 3983 . 4052) (nil fontified nil 3909 . 3983) (nil fontified nil 3842 . 3909) (nil fontified nil 3771 . 3842) (nil fontified nil 3696 . 3771) (nil fontified nil 3612 . 3696) (nil fontified nil 3538 . 3612) (nil fontified nil 3477 . 3538) (nil fontified nil 3411 . 3477) (nil fontified nil 3340 . 3411) (nil fontified nil 3258 . 3340) (nil fontified nil 3184 . 3258) (nil fontified nil 3113 . 3184) (nil fontified nil 3037 . 3113) (nil fontified nil 2966 . 3037) (2966 . 4639)) nil (25767 5718 755665 175000) 0 nil])
([nil nil ((4639 . 4640)) nil (25767 5718 755656 383000) 0 nil])
([nil nil ((2965 . 2967) (t 25767 5718 787206 563000)) nil (25767 5761 952958 554000) 0 nil])
([nil nil ((4361 . 4362) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4361) (undo-tree-id23478 . -1) (4345 . 4346) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4345) (undo-tree-id23479 . -1) (4273 . 4274) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4273) (undo-tree-id23480 . -1) (4203 . 4204) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4203) (undo-tree-id23481 . -1) (4127 . 4128) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4127) (undo-tree-id23482 . -1) (4052 . 4053) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4052) (undo-tree-id23483 . -1) (3983 . 3984) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3983) (undo-tree-id23484 . -1) (3909 . 3910) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3909) (undo-tree-id23485 . -1) (3842 . 3843) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3842) (undo-tree-id23486 . -1) (3771 . 3772) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3771) (undo-tree-id23487 . -1) (3696 . 3697) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3696) (undo-tree-id23488 . -1) (3612 . 3613) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3612) (undo-tree-id23489 . -1) (3538 . 3539) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3538) (undo-tree-id23490 . -1) (3477 . 3478) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3477) (undo-tree-id23491 . -1) (3411 . 3412) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3411) (undo-tree-id23492 . -1) (3340 . 3341) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3340) (undo-tree-id23493 . -1) (3258 . 3259) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3258) (undo-tree-id23494 . -1) (3184 . 3185) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3184) (undo-tree-id23495 . -1) (3113 . 3114) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3113) (undo-tree-id23496 . -1) (3037 . 3038) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3037) (undo-tree-id23497 . -1) (2966 . 2967) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2966) (undo-tree-id23498 . -1) (undo-tree-id23499 . -1) (undo-tree-id23500 . -1) (undo-tree-id23501 . -1) (undo-tree-id23502 . -1) (undo-tree-id23503 . -1) (undo-tree-id23504 . -1) (undo-tree-id23505 . -1) (undo-tree-id23506 . -1) (undo-tree-id23507 . -1) (undo-tree-id23508 . -1) (undo-tree-id23509 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2967) (undo-tree-id23510 . 1) (undo-tree-id23511 . -1) (undo-tree-id23512 . -1) 2966) nil (25767 5761 952953 33000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4640) (undo-tree-id23473 . -1) (4624 . 4625) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4624) (undo-tree-id23474 . -1) (4555 . 4556) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4555) (undo-tree-id23475 . -1) (4485 . 4486) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4485) (undo-tree-id23476 . -1) (4412 . 4413) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4412) (undo-tree-id23477 . -1) 4361) nil (25767 5761 952921 792000) 0 nil])
([nil nil ((2969 . 2973) (2967 . 2969) (#("H" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2967) (undo-tree-id23412 . -1) (undo-tree-id23413 . -1) (undo-tree-id23414 . -1) (undo-tree-id23415 . -1) (undo-tree-id23416 . -1) (undo-tree-id23417 . -1) (undo-tree-id23418 . -1) (undo-tree-id23419 . -1) (undo-tree-id23420 . -1) (undo-tree-id23421 . -1) (undo-tree-id23422 . -1) (undo-tree-id23423 . -1) (undo-tree-id23424 . -1) (undo-tree-id23425 . -1) (undo-tree-id23426 . -1) (undo-tree-id23427 . -1) (undo-tree-id23428 . -1) (undo-tree-id23429 . -1) (undo-tree-id23430 . -1) (undo-tree-id23431 . -1) (undo-tree-id23432 . -1) (undo-tree-id23433 . -1) (undo-tree-id23434 . -1) (undo-tree-id23435 . -1) (undo-tree-id23436 . -1) (undo-tree-id23437 . -1) (undo-tree-id23438 . -1) (undo-tree-id23439 . -1) (undo-tree-id23440 . -1) (undo-tree-id23441 . -1) (undo-tree-id23442 . -1) (undo-tree-id23443 . -1) (undo-tree-id23444 . 1) (undo-tree-id23445 . -1) (undo-tree-id23446 . -1) (undo-tree-id23447 . -1) (undo-tree-id23448 . -1) (undo-tree-id23449 . -1) (undo-tree-id23450 . -1) (undo-tree-id23451 . -1) (undo-tree-id23452 . -1) (undo-tree-id23453 . -1) (undo-tree-id23454 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2968) (undo-tree-id23455 . -1) (undo-tree-id23456 . -1) (undo-tree-id23457 . -1) (undo-tree-id23458 . -1) (undo-tree-id23459 . -1) (undo-tree-id23460 . -1) (undo-tree-id23461 . -1) (undo-tree-id23462 . -1) (undo-tree-id23463 . -1) (undo-tree-id23464 . -1) (undo-tree-id23465 . -1) (undo-tree-id23466 . -1) (undo-tree-id23467 . -1) (undo-tree-id23468 . -1) (undo-tree-id23469 . -1) (undo-tree-id23470 . -1) (undo-tree-id23471 . -1) (undo-tree-id23472 . -1) 2969 (2967 . 2969)) nil (25767 5761 952912 177000) 0 nil])
([nil nil ((2979 . 2980)) nil (25767 5763 839490 910000) 0 nil])
([nil nil ((#("So, we must" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3013) (undo-tree-id24121 . -10) (undo-tree-id24122 . -10) (undo-tree-id24123 . 11) (undo-tree-id24124 . -10) (undo-tree-id24125 . -11) (undo-tree-id24126 . -10) (undo-tree-id24127 . -1) (undo-tree-id24128 . -1) (undo-tree-id24129 . -1) (undo-tree-id24130 . -1) (undo-tree-id24131 . -1) (undo-tree-id24132 . -1) (undo-tree-id24133 . -1) (undo-tree-id24134 . -1) (undo-tree-id24135 . -1) (undo-tree-id24136 . -1) (undo-tree-id24137 . -1) (undo-tree-id24138 . -1) (undo-tree-id24139 . -1) (undo-tree-id24140 . -1) (undo-tree-id24141 . -1) (undo-tree-id24142 . -1) (undo-tree-id24143 . -1) (undo-tree-id24144 . -1) (undo-tree-id24145 . -1) (undo-tree-id24146 . -1) (undo-tree-id24147 . -1) (undo-tree-id24148 . -1) (undo-tree-id24149 . -1) (undo-tree-id24150 . -1) (undo-tree-id24151 . -1) (undo-tree-id24152 . -1) (undo-tree-id24153 . -1) (undo-tree-id24154 . -1) (undo-tree-id24155 . -1) (undo-tree-id24156 . -2) (undo-tree-id24157 . -2) (undo-tree-id24158 . -2) (undo-tree-id24159 . -2) (undo-tree-id24160 . -2) (undo-tree-id24161 . -2) (undo-tree-id24162 . -2) (undo-tree-id24163 . -2) (undo-tree-id24164 . -2) (undo-tree-id24165 . -2) (undo-tree-id24166 . -2) (undo-tree-id24167 . -2) (undo-tree-id24168 . -2) (undo-tree-id24169 . -2) (undo-tree-id24170 . -2) (undo-tree-id24171 . -2) (undo-tree-id24172 . -2) (undo-tree-id24173 . -2) (undo-tree-id24174 . -2) (undo-tree-id24175 . -2) (undo-tree-id24176 . -2) (undo-tree-id24177 . -2) (undo-tree-id24178 . -5) (undo-tree-id24179 . -5) (undo-tree-id24180 . -5) (undo-tree-id24181 . -5) (undo-tree-id24182 . -5) (undo-tree-id24183 . -5) (undo-tree-id24184 . -5) (undo-tree-id24185 . -5) (undo-tree-id24186 . -5) (undo-tree-id24187 . -5) (undo-tree-id24188 . -5) (undo-tree-id24189 . -5) (undo-tree-id24190 . -5) (undo-tree-id24191 . -5) (undo-tree-id24192 . -5) (undo-tree-id24193 . -5) (undo-tree-id24194 . -5) (undo-tree-id24195 . -5) (undo-tree-id24196 . -5) (undo-tree-id24197 . -5) (undo-tree-id24198 . -5) (undo-tree-id24199 . -5) (undo-tree-id24200 . -10) (undo-tree-id24201 . -10) (undo-tree-id24202 . -10) (undo-tree-id24203 . -10) (undo-tree-id24204 . -10) (undo-tree-id24205 . -10) (undo-tree-id24206 . -10) (undo-tree-id24207 . -10) (undo-tree-id24208 . -10) (undo-tree-id24209 . -10) (undo-tree-id24210 . -10) (undo-tree-id24211 . -10) (undo-tree-id24212 . -10) (undo-tree-id24213 . -10) (undo-tree-id24214 . -10) (undo-tree-id24215 . -10) (undo-tree-id24216 . -10) (undo-tree-id24217 . -10) (undo-tree-id24218 . -10) (undo-tree-id24219 . -10) (undo-tree-id24220 . -10) (undo-tree-id24221 . -10) (undo-tree-id24222 . -10) (undo-tree-id24223 . -10) (undo-tree-id24224 . -10) (undo-tree-id24225 . -10) (undo-tree-id24226 . -10) (undo-tree-id24227 . -10) (undo-tree-id24228 . -10) (undo-tree-id24229 . -10) (undo-tree-id24230 . -11) 3023) nil (25767 5772 664719 187000) 0 nil] [nil nil ((#("So, we must call the flat_map() method" 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 25 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 26 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 29 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3013) (undo-tree-id23393 . -37) (undo-tree-id23394 . 38) (undo-tree-id23395 . -31) (undo-tree-id23396 . -31) (undo-tree-id23397 . -31) (undo-tree-id23398 . -31) (undo-tree-id23399 . -31) (undo-tree-id23400 . -31) (undo-tree-id23401 . -31) (undo-tree-id23402 . -31) (undo-tree-id23403 . -31) (undo-tree-id23404 . -31) (undo-tree-id23405 . -31) (undo-tree-id23406 . -31) (undo-tree-id23407 . -31) (undo-tree-id23408 . -31) (undo-tree-id23409 . -31) (undo-tree-id23410 . -31) (undo-tree-id23411 . -38)) ((3013 . 3051)) (25767 5763 470773 842000) 0 nil])
([nil nil ((2965 . 4637) (#("- call the flat_map() method: it converts a nested dataset into a flat dataset (one that does not contain datasets). For example, suppose {1, 2, 3} represents a dataset containing the sequence of tensors 1, 2, and 3. If you flatten the nested dataset {{1, 2}, {3, 4, 5, 6}}, you get back the flat dataset {1, 2, 3, 4, 5, 6}. Moreover, the flat_map() method takes a function as an argument, which allows you to transform each dataset in the nested dataset before flattening. For example, if you pass the function lambda ds: ds.batch(2) to flat_map(), then it will transform the nested dataset {{1, 2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of tensors of size 2. With that in mind, we are ready to flatten our dataset: dataset = dataset.flat_map(lambda window: window.batch(window_length)) Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32).
- Model expects tensors as input, not datasets." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 15 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 15 16 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 16 19 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 21 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 22 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 22 28 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 28 29 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 29 30 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 30 31 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 31 97 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 97 98 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 98 168 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 168 169 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 169 242 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 242 243 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 243 324 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 324 325 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 325 343 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 343 344 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 344 347 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 347 395 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 395 396 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 396 442 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 442 443 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 443 444 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 444 445 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 445 446 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 446 447 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 447 448 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 448 449 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 449 451 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 451 453 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 453 461 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 461 462 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 462 480 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 480 481 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 481 522 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 522 523 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 523 529 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 529 542 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 542 543 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 543 546 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 546 596 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 596 597 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 597 680 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 680 681 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 681 755 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 755 756 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 756 778 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 778 779 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 779 782 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 782 817 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 817 818 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 818 824 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 824 826 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 826 827 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 827 859 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 859 860 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 860 866 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 866 893 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 893 894 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 894 962 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 962 967 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 967 968 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 968 1036 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1036 1037 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1037 1111 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1111 1112 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1112 1187 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1187 1188 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1188 1257 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1257 1258 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1258 1329 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1329 1330 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1330 1335 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1335 1336 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1336 1340 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1340 1345 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1345 1346 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1346 1390 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1390 1391 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1391 1395 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1395 1396 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1396 1397 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1397 1468 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1468 1469 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1469 1470 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1470 1539 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1539 1540 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1540 1608 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1608 1609 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1609 1623 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1623 1624 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1624 1625 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1625 1626 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1626 1633 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1633 1672 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 2965) (undo-tree-id23534 . -1672) (undo-tree-id23535 . -1672) (undo-tree-id23536 . -1672) (undo-tree-id23537 . -1672) (undo-tree-id23538 . -1626) (undo-tree-id23539 . -1672) (undo-tree-id23540 . -1626) (undo-tree-id23541 . -1626) (undo-tree-id23542 . -1626) (undo-tree-id23543 . -1626) (undo-tree-id23544 . -1626) (undo-tree-id23545 . -1626) (undo-tree-id23546 . -1626) (undo-tree-id23547 . -1626) (undo-tree-id23548 . -1626) (undo-tree-id23549 . -1672) (undo-tree-id23550 . -1672) (undo-tree-id23551 . -1672) (undo-tree-id23552 . -1672) (undo-tree-id23553 . -1672) (undo-tree-id23554 . -1672) (undo-tree-id23555 . -1672) (undo-tree-id23556 . -1672) (undo-tree-id23557 . -1672) (undo-tree-id23558 . -1672) (undo-tree-id23559 . -1672) (undo-tree-id23560 . -1672) (undo-tree-id23561 . -1672) (undo-tree-id23562 . -1672) (undo-tree-id23563 . -1672) (undo-tree-id23564 . -1672) (undo-tree-id23565 . -1627) (undo-tree-id23566 . -1627) (undo-tree-id23567 . -1627) (undo-tree-id23568 . -1627) (undo-tree-id23569 . -1627) (undo-tree-id23570 . -1627) (undo-tree-id23571 . -1627) (undo-tree-id23572 . -1627) (undo-tree-id23573 . -1627) (undo-tree-id23574 . -1627) (undo-tree-id23575 . -1627) (undo-tree-id23576 . -1627) (undo-tree-id23577 . -1627) (undo-tree-id23578 . -1627) (undo-tree-id23579 . -1627) (undo-tree-id23580 . -1627) (undo-tree-id23581 . -1627) (undo-tree-id23582 . -1627) (undo-tree-id23583 . -1627) (undo-tree-id23584 . -1627) (undo-tree-id23585 . -1627) (undo-tree-id23586 . -1627) (undo-tree-id23587 . -1627) (undo-tree-id23588 . -1627) (undo-tree-id23589 . -1627) (undo-tree-id23590 . -1627) (undo-tree-id23591 . -1627) (undo-tree-id23592 . -1627) (undo-tree-id23593 . -1627) (undo-tree-id23594 . -1627) (undo-tree-id23595 . -1627) (undo-tree-id23596 . -1627) (undo-tree-id23597 . -1627) (undo-tree-id23598 . -1627) (undo-tree-id23599 . -1627) (undo-tree-id23600 . -1627) (undo-tree-id23601 . -1627) (undo-tree-id23602 . -1627) (undo-tree-id23603 . -1627) (undo-tree-id23604 . -1627) (undo-tree-id23605 . -1672) (undo-tree-id23606 . -1672) (undo-tree-id23607 . -1672) (undo-tree-id23608 . -1672) (undo-tree-id23609 . -1672) (undo-tree-id23610 . -1672) (undo-tree-id23611 . -1672) (undo-tree-id23612 . -1672) (undo-tree-id23613 . -1672) (undo-tree-id23614 . -1672) (undo-tree-id23615 . -1672) (undo-tree-id23616 . -1672) (undo-tree-id23617 . -1672) (undo-tree-id23618 . -1672) (undo-tree-id23619 . -1672) (undo-tree-id23620 . -1672) (undo-tree-id23621 . -1672) (undo-tree-id23622 . -1672) (undo-tree-id23623 . -1672) (undo-tree-id23624 . -1672) (undo-tree-id23625 . -1672) (undo-tree-id23626 . -1672) (undo-tree-id23627 . -1672) (undo-tree-id23628 . -1672) (undo-tree-id23629 . -1672) (undo-tree-id23630 . -1672) (undo-tree-id23631 . -1672) (undo-tree-id23632 . -1672) (undo-tree-id23633 . -1672) (undo-tree-id23634 . -1672) (undo-tree-id23635 . -1672) (undo-tree-id23636 . -1672) (undo-tree-id23637 . -1672) (undo-tree-id23638 . -1672) (undo-tree-id23639 . -1672) (undo-tree-id23640 . -1672) (undo-tree-id23641 . -1672) (undo-tree-id23642 . -1672) (undo-tree-id23643 . -1672) (undo-tree-id23644 . -1672) (undo-tree-id23645 . -1672) (undo-tree-id23646 . -1672) (undo-tree-id23647 . -1672) (undo-tree-id23648 . -1672) (undo-tree-id23649 . -1672) (undo-tree-id23650 . -1672) (undo-tree-id23651 . -1672) (undo-tree-id23652 . -1672) (undo-tree-id23653 . -1672) (undo-tree-id23654 . -1672) (undo-tree-id23655 . -1672) (undo-tree-id23656 . -1672) (undo-tree-id23657 . -1672) (undo-tree-id23658 . -1672) (undo-tree-id23659 . -1672) (undo-tree-id23660 . -1672) (undo-tree-id23661 . -1672) (undo-tree-id23662 . -1672) (undo-tree-id23663 . -1672) (undo-tree-id23664 . -1672) (undo-tree-id23665 . -1672) (undo-tree-id23666 . -1672) (undo-tree-id23667 . -1672) (undo-tree-id23668 . -1672) (undo-tree-id23669 . -1672) (undo-tree-id23670 . -1672) (undo-tree-id23671 . -1672) (undo-tree-id23672 . -1672) (undo-tree-id23673 . -1672) (undo-tree-id23674 . -1672) (undo-tree-id23675 . -1672) (undo-tree-id23676 . -1672) (undo-tree-id23677 . -1672) (undo-tree-id23678 . -1672) (undo-tree-id23679 . -1672) (undo-tree-id23680 . -1672) (undo-tree-id23681 . -1672) (undo-tree-id23682 . -1672) (undo-tree-id23683 . -1672) (undo-tree-id23684 . -1672) (undo-tree-id23685 . -1672) (undo-tree-id23686 . -1672) (undo-tree-id23687 . -1672) (undo-tree-id23688 . -1672) (undo-tree-id23689 . -1672) (undo-tree-id23690 . -1672) (undo-tree-id23691 . -1672) (undo-tree-id23692 . -1672) (undo-tree-id23693 . -1672) (undo-tree-id23694 . -1672) (undo-tree-id23695 . -1672) (undo-tree-id23696 . -1672) (undo-tree-id23697 . -1672) (undo-tree-id23698 . -1672) (undo-tree-id23699 . -1672) (undo-tree-id23700 . -1672) (undo-tree-id23701 . -1672) (undo-tree-id23702 . -1672) (undo-tree-id23703 . -1672) (undo-tree-id23704 . -1672) (undo-tree-id23705 . -1672) (undo-tree-id23706 . -1672) (undo-tree-id23707 . -1672) (undo-tree-id23708 . -1672) (undo-tree-id23709 . -1672) (undo-tree-id23710 . -1672) (undo-tree-id23711 . -1672) (undo-tree-id23712 . -1672) (undo-tree-id23713 . -1672) (undo-tree-id23714 . -1672) (undo-tree-id23715 . -1672) (undo-tree-id23716 . -1672) (undo-tree-id23717 . -1672) (undo-tree-id23718 . -1672) (undo-tree-id23719 . -1672) (undo-tree-id23720 . -1672) (undo-tree-id23721 . -1672) (undo-tree-id23722 . -1672) (undo-tree-id23723 . -1672) (undo-tree-id23724 . -1672) (undo-tree-id23725 . -1672) (undo-tree-id23726 . -1672) (undo-tree-id23727 . -1672) (undo-tree-id23728 . -1672) (undo-tree-id23729 . -1672) (undo-tree-id23730 . -1672) (undo-tree-id23731 . -1672) (undo-tree-id23732 . -1672) (undo-tree-id23733 . -1672) (undo-tree-id23734 . -1672) (undo-tree-id23735 . -1672) (undo-tree-id23736 . -1672) (undo-tree-id23737 . -1672) (undo-tree-id23738 . -1672) (undo-tree-id23739 . -1672) (undo-tree-id23740 . -1672) (undo-tree-id23741 . -1672) (undo-tree-id23742 . -1672) (undo-tree-id23743 . -1672) (undo-tree-id23744 . -1672) (undo-tree-id23745 . -1672) (undo-tree-id23746 . -1672) (undo-tree-id23747 . -1672) (undo-tree-id23748 . -1672) (undo-tree-id23749 . -1672) (undo-tree-id23750 . -1672) (undo-tree-id23751 . -1672) (undo-tree-id23752 . -1672) (undo-tree-id23753 . -1672) (undo-tree-id23754 . -1672) (undo-tree-id23755 . -1672) (undo-tree-id23756 . -1672) (undo-tree-id23757 . -1672) (undo-tree-id23758 . -1672) (undo-tree-id23759 . -1672) (undo-tree-id23760 . -1672) (undo-tree-id23761 . -1672) (undo-tree-id23762 . -1672) (undo-tree-id23763 . -1672) (undo-tree-id23764 . -1672) (undo-tree-id23765 . -1672) (undo-tree-id23766 . -1672) (undo-tree-id23767 . -1672) (undo-tree-id23768 . -1672) (undo-tree-id23769 . -1672) (undo-tree-id23770 . -1672) (undo-tree-id23771 . -1672) (undo-tree-id23772 . -1672) (undo-tree-id23773 . -1672) (undo-tree-id23774 . -1672) (undo-tree-id23775 . -1672) (undo-tree-id23776 . -1672) (undo-tree-id23777 . -1672) (undo-tree-id23778 . -1672) (undo-tree-id23779 . -1672) (undo-tree-id23780 . -1672) (undo-tree-id23781 . -1672) (undo-tree-id23782 . -1672) (undo-tree-id23783 . -1672) (undo-tree-id23784 . -1672) (undo-tree-id23785 . -1672) (undo-tree-id23786 . -1672) (undo-tree-id23787 . -1672) (undo-tree-id23788 . -1672) (undo-tree-id23789 . -1672) (undo-tree-id23790 . -1672) (undo-tree-id23791 . -1672) (undo-tree-id23792 . -1672) (undo-tree-id23793 . -1672) (undo-tree-id23794 . -1672) (undo-tree-id23795 . -1672) (undo-tree-id23796 . -1672) (undo-tree-id23797 . -1672) (undo-tree-id23798 . -1672) (undo-tree-id23799 . -1672) (undo-tree-id23800 . -1672) (undo-tree-id23801 . -1672) (undo-tree-id23802 . -1672) (undo-tree-id23803 . -1672) (undo-tree-id23804 . -1672) (undo-tree-id23805 . -1672) (undo-tree-id23806 . -1672) (undo-tree-id23807 . -1672) (undo-tree-id23808 . -1672) (undo-tree-id23809 . -1672) (undo-tree-id23810 . 9) (undo-tree-id23811 . -1671) (undo-tree-id23812 . -1672) (undo-tree-id23813 . -1672) (undo-tree-id23814 . -1672) (undo-tree-id23815 . -1672) (undo-tree-id23816 . -1672) (undo-tree-id23817 . -1672) (undo-tree-id23818 . -1672) (undo-tree-id23819 . -1672) (undo-tree-id23820 . -1672) (undo-tree-id23821 . -1672) (undo-tree-id23822 . -1672) (undo-tree-id23823 . -1672) (undo-tree-id23824 . -1672) (undo-tree-id23825 . -1672) (undo-tree-id23826 . -1672) (undo-tree-id23827 . -1672) (undo-tree-id23828 . -1672) (undo-tree-id23829 . -1672) (undo-tree-id23830 . -1672) (undo-tree-id23831 . -1672) (undo-tree-id23832 . -1672) (undo-tree-id23833 . -1672) (undo-tree-id23834 . -1672) (undo-tree-id23835 . -1672) (undo-tree-id23836 . -1672) (undo-tree-id23837 . -1672) (undo-tree-id23838 . -1672) (undo-tree-id23839 . -1672) (undo-tree-id23840 . -1672) (undo-tree-id23841 . -1672) (undo-tree-id23842 . -1672) (undo-tree-id23843 . -1672) (undo-tree-id23844 . -1672) (undo-tree-id23845 . -1672) (undo-tree-id23846 . -1672) (undo-tree-id23847 . -1625) (2965 . 4590) (#("  call the flat_map() method: it converts a nested dataset into a flat dataset (one that does not contain datasets). For example, suppose {1, 2, 3} represents a dataset containing the sequence of tensors 1, 2, and 3. If you flatten the nested dataset {{1, 2}, {3, 4, 5, 6}}, you get back the flat dataset {1, 2, 3, 4, 5, 6}. Moreover, the flat_map() method takes a function as an argument, which allows you to transform each dataset in the nested dataset before flattening. For example, if you pass the function lambda ds: ds.batch(2) to flat_map(), then it will transform the nested dataset {{1, 2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of tensors of size 2. With that in mind, we are ready to flatten our dataset: dataset = dataset.flat_map(lambda window: window.batch(window_length)) Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32)." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 16 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 19 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 22 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 31 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 168 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 168 169 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 169 242 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 242 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 243 324 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 324 325 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 325 343 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 343 344 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 344 347 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 347 395 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 395 396 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 396 442 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 442 443 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 443 444 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 444 445 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 445 446 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 446 447 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 447 448 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 448 449 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 449 451 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 451 453 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 453 461 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 461 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 462 480 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 480 481 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 481 522 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 522 523 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 523 529 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 529 542 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 542 543 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 543 546 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 546 596 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 596 597 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 597 680 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 680 681 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 681 755 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 755 756 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 756 778 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 778 779 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 779 782 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 782 817 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 817 818 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 818 824 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 824 826 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 826 827 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 827 859 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 859 860 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 860 866 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 866 893 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 893 894 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 894 962 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 962 967 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 967 968 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 968 1036 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1036 1037 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1037 1111 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1111 1112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1112 1187 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1187 1188 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1188 1257 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1257 1258 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1258 1329 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1329 1330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1330 1335 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1335 1336 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1336 1340 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1340 1345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1345 1346 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1346 1390 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1390 1391 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1391 1395 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1395 1396 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1396 1397 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1397 1468 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1468 1469 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1469 1470 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1470 1539 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1539 1540 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1540 1608 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1608 1609 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1609 1623 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1623 1624 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 3012) (undo-tree-id23848 . -1) (undo-tree-id23849 . -1) (undo-tree-id23850 . -1) (undo-tree-id23851 . -1) (undo-tree-id23852 . 1623) (undo-tree-id23853 . 1623) (undo-tree-id23854 . -1) (undo-tree-id23855 . -21) (undo-tree-id23856 . -21) (undo-tree-id23857 . -21) (undo-tree-id23858 . -21) (undo-tree-id23859 . -21) (undo-tree-id23860 . -21) (undo-tree-id23861 . -21) (undo-tree-id23862 . -21) (undo-tree-id23863 . -21) (undo-tree-id23864 . -21) (undo-tree-id23865 . -21) (undo-tree-id23866 . -21) (undo-tree-id23867 . -21) (undo-tree-id23868 . -21) (undo-tree-id23869 . -21) (undo-tree-id23870 . -21) (undo-tree-id23871 . 1463) (undo-tree-id23872 . -168) (undo-tree-id23873 . 1327) (undo-tree-id23874 . -304) (undo-tree-id23875 . 1105) (undo-tree-id23876 . -521) (undo-tree-id23877 . 1040) (undo-tree-id23878 . -591) (undo-tree-id23879 . 877) (undo-tree-id23880 . -754) (undo-tree-id23881 . -1) (undo-tree-id23882 . -1) (undo-tree-id23883 . -1) (undo-tree-id23884 . -1) (undo-tree-id23885 . -1) (undo-tree-id23886 . -1) (undo-tree-id23887 . -1) (undo-tree-id23888 . -1) (undo-tree-id23889 . -1) (undo-tree-id23890 . -1) (undo-tree-id23891 . -1) (undo-tree-id23892 . -1) (undo-tree-id23893 . -1) (undo-tree-id23894 . -1) (undo-tree-id23895 . -1) (undo-tree-id23896 . -1) (undo-tree-id23897 . -1) (undo-tree-id23898 . -1) (undo-tree-id23899 . -1) (undo-tree-id23900 . -1) (undo-tree-id23901 . -1) (undo-tree-id23902 . -1) (undo-tree-id23903 . -1) (undo-tree-id23904 . -1) (undo-tree-id23905 . -1) (undo-tree-id23906 . -1) (undo-tree-id23907 . -1) (undo-tree-id23908 . -1) (undo-tree-id23909 . -1) (undo-tree-id23910 . -1) (undo-tree-id23911 . -1) (undo-tree-id23912 . -1) (undo-tree-id23913 . -1) (undo-tree-id23914 . -1) (undo-tree-id23915 . -1) (undo-tree-id23916 . -1) (undo-tree-id23917 . -1) (undo-tree-id23918 . -1) (undo-tree-id23919 . -1) (undo-tree-id23920 . -1) (undo-tree-id23921 . -1) (undo-tree-id23922 . -1) (undo-tree-id23923 . -1) (undo-tree-id23924 . -1) (undo-tree-id23925 . -1) (undo-tree-id23926 . -1) (undo-tree-id23927 . -1) (undo-tree-id23928 . -1) (undo-tree-id23929 . -1) (undo-tree-id23930 . -1) (undo-tree-id23931 . -1) (undo-tree-id23932 . -1) (undo-tree-id23933 . -1) (undo-tree-id23934 . -1) (undo-tree-id23935 . -1) (undo-tree-id23936 . -1) (undo-tree-id23937 . -1) (undo-tree-id23938 . -1) (undo-tree-id23939 . -1) (undo-tree-id23940 . -1) (undo-tree-id23941 . -1) (undo-tree-id23942 . -1) (undo-tree-id23943 . -1) (undo-tree-id23944 . -1) (undo-tree-id23945 . -1) (undo-tree-id23946 . -1) (undo-tree-id23947 . -1) (undo-tree-id23948 . -1) (undo-tree-id23949 . -1) (undo-tree-id23950 . -1) (undo-tree-id23951 . -1) (undo-tree-id23952 . -1) (undo-tree-id23953 . -1) (undo-tree-id23954 . -1) (undo-tree-id23955 . -1) (undo-tree-id23956 . -1) (undo-tree-id23957 . -1) (undo-tree-id23958 . -1) (undo-tree-id23959 . -1) (undo-tree-id23960 . -1) (undo-tree-id23961 . -1) (undo-tree-id23962 . -1) (undo-tree-id23963 . -1) (undo-tree-id23964 . -1) (undo-tree-id23965 . -1) (undo-tree-id23966 . -1) (undo-tree-id23967 . -1) (undo-tree-id23968 . -1) (undo-tree-id23969 . -1) (undo-tree-id23970 . -1) (undo-tree-id23971 . -1) (undo-tree-id23972 . -1) (undo-tree-id23973 . -1) (undo-tree-id23974 . -1) (undo-tree-id23975 . -1) (undo-tree-id23976 . -1) (undo-tree-id23977 . -1) (undo-tree-id23978 . -1) (undo-tree-id23979 . -1) (undo-tree-id23980 . -1) (undo-tree-id23981 . -1) (undo-tree-id23982 . -1) (undo-tree-id23983 . -1) (undo-tree-id23984 . -1) (undo-tree-id23985 . -1) (undo-tree-id23986 . -1) (undo-tree-id23987 . -1) (undo-tree-id23988 . -1) (undo-tree-id23989 . -1) (undo-tree-id23990 . -1) (undo-tree-id23991 . -1) (undo-tree-id23992 . -1) (undo-tree-id23993 . -1) (undo-tree-id23994 . -1) (undo-tree-id23995 . -1) (undo-tree-id23996 . -1) (undo-tree-id23997 . -1) (undo-tree-id23998 . -1) (undo-tree-id23999 . -1) (undo-tree-id24000 . -1) (undo-tree-id24001 . -1) (undo-tree-id24002 . -1) (undo-tree-id24003 . -1) (undo-tree-id24004 . -1) (undo-tree-id24005 . -1) (undo-tree-id24006 . -1) (undo-tree-id24007 . -1) (undo-tree-id24008 . -1) (undo-tree-id24009 . -1) (undo-tree-id24010 . -1) (undo-tree-id24011 . -1) (undo-tree-id24012 . -1) (undo-tree-id24013 . -1) (undo-tree-id24014 . -1) (undo-tree-id24015 . -1) (undo-tree-id24016 . -1) (undo-tree-id24017 . -1) (undo-tree-id24018 . -1) (undo-tree-id24019 . -1) (undo-tree-id24020 . -1) (undo-tree-id24021 . -1) (undo-tree-id24022 . -1) (undo-tree-id24023 . -1) (undo-tree-id24024 . -1) (undo-tree-id24025 . -1) (undo-tree-id24026 . -1) (undo-tree-id24027 . -1) (undo-tree-id24028 . -1) (undo-tree-id24029 . -1) (undo-tree-id24030 . -1) (undo-tree-id24031 . -1) (undo-tree-id24032 . -1) (undo-tree-id24033 . -1) (undo-tree-id24034 . -1) (undo-tree-id24035 . -1) (undo-tree-id24036 . -1) (undo-tree-id24037 . -1) (undo-tree-id24038 . -1) (undo-tree-id24039 . -1) (undo-tree-id24040 . -1) (undo-tree-id24041 . -1) (undo-tree-id24042 . -1) (undo-tree-id24043 . -1) (undo-tree-id24044 . -1) (undo-tree-id24045 . -1) (undo-tree-id24046 . -1) (undo-tree-id24047 . -1) (undo-tree-id24048 . -1) (undo-tree-id24049 . -1) (undo-tree-id24050 . -1) (undo-tree-id24051 . -1) (undo-tree-id24052 . -1) (undo-tree-id24053 . -1) (undo-tree-id24054 . -1) (undo-tree-id24055 . -1) (undo-tree-id24056 . -1) (undo-tree-id24057 . -1) (undo-tree-id24058 . -1) (undo-tree-id24059 . -1) (undo-tree-id24060 . -1) (undo-tree-id24061 . -1) (undo-tree-id24062 . -1) (undo-tree-id24063 . -1) (undo-tree-id24064 . -1) (undo-tree-id24065 . -1) (undo-tree-id24066 . -1) (undo-tree-id24067 . -1) (undo-tree-id24068 . -1) (undo-tree-id24069 . -1) (undo-tree-id24070 . -1) (undo-tree-id24071 . -1) (undo-tree-id24072 . -1) (undo-tree-id24073 . -1) (undo-tree-id24074 . -1) (undo-tree-id24075 . -1) (undo-tree-id24076 . -1) (undo-tree-id24077 . -1) (undo-tree-id24078 . -1) (undo-tree-id24079 . -1) (undo-tree-id24080 . -1) (undo-tree-id24081 . -1) (undo-tree-id24082 . -1) (undo-tree-id24083 . -1) (undo-tree-id24084 . -1) (undo-tree-id24085 . -1) (undo-tree-id24086 . -1) (undo-tree-id24087 . -1) (undo-tree-id24088 . -1) (undo-tree-id24089 . -1) (undo-tree-id24090 . -1) (undo-tree-id24091 . -1) (undo-tree-id24092 . -1) (undo-tree-id24093 . -1) (undo-tree-id24094 . -1) (undo-tree-id24095 . -1) (undo-tree-id24096 . -1) (undo-tree-id24097 . -1) (undo-tree-id24098 . -1) (undo-tree-id24099 . -1) (undo-tree-id24100 . -1) (undo-tree-id24101 . -1) (undo-tree-id24102 . -1) (undo-tree-id24103 . -1) (undo-tree-id24104 . -1) (undo-tree-id24105 . -1) (undo-tree-id24106 . -1) (undo-tree-id24107 . -1) (undo-tree-id24108 . -1) (undo-tree-id24109 . -1) (undo-tree-id24110 . -1) (undo-tree-id24111 . -1) (undo-tree-id24112 . -1) (undo-tree-id24113 . -1) (undo-tree-id24114 . -1) (undo-tree-id24115 . -1) (undo-tree-id24116 . -1) (undo-tree-id24117 . -1) (undo-tree-id24118 . -1) (undo-tree-id24119 . -1) (undo-tree-id24120 . -1) 3013) nil (25767 5772 664632 987000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3013) (undo-tree-id23390 . 1) (undo-tree-id23391 . -1) (undo-tree-id23392 . -1)) ((3013 . 3014)) (25767 5762 293784 299000) 0 nil])
([nil nil ((3015 . 3016) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3015)) nil (25767 5772 664156 253000) 0 nil])
([nil nil ((3013 . 3014)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3013) (undo-tree-id23513 . -1) (undo-tree-id23514 . -1) (undo-tree-id23515 . -1) (undo-tree-id23516 . -1) (undo-tree-id23517 . -1) (undo-tree-id23518 . -1) (undo-tree-id23519 . -1) (undo-tree-id23520 . -1) (undo-tree-id23521 . -1) (undo-tree-id23522 . -1) (undo-tree-id23523 . -1) (undo-tree-id23524 . -1) (undo-tree-id23525 . -1) (undo-tree-id23526 . -1) (undo-tree-id23527 . -1) (undo-tree-id23528 . -1) (undo-tree-id23529 . -1) (undo-tree-id23530 . -1) (undo-tree-id23531 . -1) (undo-tree-id23532 . -1) (undo-tree-id23533 . -1)) (25767 5761 953204 552000) 0 nil])
([nil nil ((4637 . 4638)) nil (25767 5772 664151 71000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3014) (undo-tree-id23387 . 1) (undo-tree-id23388 . -1) (undo-tree-id23389 . -1)) ((3014 . 3015)) (25767 5761 952614 450000) 0 nil])
([nil nil ((3041 . 3044) (#(": it " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3041) (undo-tree-id24331 . -4) (undo-tree-id24332 . -4) (undo-tree-id24333 . -4) (undo-tree-id24334 . -5) (undo-tree-id24335 . -4) (undo-tree-id24336 . -3) (undo-tree-id24337 . -3) (undo-tree-id24338 . -3) (undo-tree-id24339 . -3) (undo-tree-id24340 . -3) (undo-tree-id24341 . -3) (undo-tree-id24342 . -3) (undo-tree-id24343 . -3) (undo-tree-id24344 . -3) (undo-tree-id24345 . -3) (undo-tree-id24346 . -3) (undo-tree-id24347 . -3) (undo-tree-id24348 . -3) (undo-tree-id24349 . -3) (undo-tree-id24350 . -3) (undo-tree-id24351 . -3) (undo-tree-id24352 . -3) (undo-tree-id24353 . -3) (undo-tree-id24354 . -3) (undo-tree-id24355 . -3) (undo-tree-id24356 . -3) (undo-tree-id24357 . -3) (undo-tree-id24358 . -5) (undo-tree-id24359 . -5) (undo-tree-id24360 . -5) (undo-tree-id24361 . -5) (undo-tree-id24362 . -5) (undo-tree-id24363 . -5) (undo-tree-id24364 . -5) (undo-tree-id24365 . -5) (undo-tree-id24366 . -5) (undo-tree-id24367 . -5) (undo-tree-id24368 . -5) (undo-tree-id24369 . -5) (undo-tree-id24370 . -5) (undo-tree-id24371 . -5) (undo-tree-id24372 . -5) (undo-tree-id24373 . -5) (undo-tree-id24374 . -5) (undo-tree-id24375 . -5) (undo-tree-id24376 . -5) (undo-tree-id24377 . -5) (undo-tree-id24378 . -5) (undo-tree-id24379 . -5) (undo-tree-id24380 . -4) (undo-tree-id24381 . -4) (undo-tree-id24382 . -4) (undo-tree-id24383 . -4) (undo-tree-id24384 . -4) (undo-tree-id24385 . -4) (undo-tree-id24386 . -4) (undo-tree-id24387 . -4) (undo-tree-id24388 . -4) (undo-tree-id24389 . -4) (undo-tree-id24390 . -4) (undo-tree-id24391 . -4) (undo-tree-id24392 . -4) (undo-tree-id24393 . -4) (undo-tree-id24394 . -4) (undo-tree-id24395 . -4) (undo-tree-id24396 . -4) (undo-tree-id24397 . -4) (undo-tree-id24398 . -4) (undo-tree-id24399 . -4) (undo-tree-id24400 . -4) (undo-tree-id24401 . -4) (undo-tree-id24402 . -4) (undo-tree-id24403 . -4) (undo-tree-id24404 . -4) (undo-tree-id24405 . -4) (undo-tree-id24406 . -4) (undo-tree-id24407 . -4) (undo-tree-id24408 . -4) (undo-tree-id24409 . -4) (undo-tree-id24410 . -5) (undo-tree-id24411 . -5) (undo-tree-id24412 . -5) 3045 (t 25767 5772 691467 671000)) nil (25767 5797 145045 685000) 0 nil])
nil
([nil nil ((3044 . 3045)) nil (25767 5797 144245 947000) 0 nil])
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3052) (undo-tree-id24329 . -1) (undo-tree-id24330 . -1)) nil (25767 5797 144244 989000) 0 nil])
([nil nil ((#("(one that does not contain datasets)" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 19 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3090) (undo-tree-id24323 . -35) (undo-tree-id24324 . 36) (undo-tree-id24325 . -1) (undo-tree-id24326 . 1) (undo-tree-id24327 . -36) (undo-tree-id24328 . -36)) nil (25767 5797 144242 338000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3089) (undo-tree-id24231 . -1) (undo-tree-id24232 . -1) (undo-tree-id24233 . -1) (undo-tree-id24234 . -1) (undo-tree-id24235 . -1) (undo-tree-id24236 . -1) (undo-tree-id24237 . -1) (undo-tree-id24238 . -1) (undo-tree-id24239 . -1) (undo-tree-id24240 . -1) (undo-tree-id24241 . -1) (undo-tree-id24242 . -1) (undo-tree-id24243 . -1) (undo-tree-id24244 . -1) (undo-tree-id24245 . -1) (undo-tree-id24246 . -1) (undo-tree-id24247 . -1) (undo-tree-id24248 . -1) (undo-tree-id24249 . -1) (undo-tree-id24250 . -1) (undo-tree-id24251 . -1) (undo-tree-id24252 . -1) (undo-tree-id24253 . -1) (undo-tree-id24254 . -1) (undo-tree-id24255 . -1) (undo-tree-id24256 . -1) (undo-tree-id24257 . -1) (undo-tree-id24258 . -1) (undo-tree-id24259 . -1) (undo-tree-id24260 . -1) (undo-tree-id24261 . -1) (undo-tree-id24262 . -1) (undo-tree-id24263 . -1) (undo-tree-id24264 . -1) (undo-tree-id24265 . -1) (undo-tree-id24266 . -1) (undo-tree-id24267 . -1) (undo-tree-id24268 . -1) (undo-tree-id24269 . -1) (undo-tree-id24270 . -1) (undo-tree-id24271 . -1) (undo-tree-id24272 . -1) (undo-tree-id24273 . -1) (undo-tree-id24274 . -1) (undo-tree-id24275 . -1) (undo-tree-id24276 . -1) (undo-tree-id24277 . -1) (undo-tree-id24278 . -1) (undo-tree-id24279 . -1) (undo-tree-id24280 . -1) (undo-tree-id24281 . -1) (undo-tree-id24282 . -1) (undo-tree-id24283 . -1) (undo-tree-id24284 . -1) (undo-tree-id24285 . -1) (undo-tree-id24286 . -1) (undo-tree-id24287 . -1) (undo-tree-id24288 . -1) (undo-tree-id24289 . -1) (undo-tree-id24290 . -1) (undo-tree-id24291 . -1) (undo-tree-id24292 . -1) (undo-tree-id24293 . -1) (undo-tree-id24294 . -1) (undo-tree-id24295 . -1) (undo-tree-id24296 . -1) (undo-tree-id24297 . -1) (undo-tree-id24298 . -1) (undo-tree-id24299 . -1) (undo-tree-id24300 . -1) (undo-tree-id24301 . -1) (undo-tree-id24302 . -1) (undo-tree-id24303 . -1) (undo-tree-id24304 . -1) (undo-tree-id24305 . -1) (undo-tree-id24306 . -1) (undo-tree-id24307 . -1) (undo-tree-id24308 . -1) (undo-tree-id24309 . -1) (undo-tree-id24310 . -1) (undo-tree-id24311 . -1) (undo-tree-id24312 . -1) (undo-tree-id24313 . -1) (undo-tree-id24314 . -1) (undo-tree-id24315 . -1) (undo-tree-id24316 . -1) (undo-tree-id24317 . -1) (undo-tree-id24318 . -1) (undo-tree-id24319 . -1) (undo-tree-id24320 . -1) (undo-tree-id24321 . -1) (undo-tree-id24322 . -1)) nil (25767 5797 145407 341000) 0 nil])
([nil nil ((#("For example, suppose {1, 2, 3} represents a dataset containing the sequence of tensors 1, 2, and 3. If you flatten the nested dataset {{1, 2}, {3, 4, 5, 6}}, you get back the flat dataset {1, 2, 3, 4, 5, 6}. " 0 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 51 52 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 52 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 125 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 126 207 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 207 208 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3091) (undo-tree-id27109 . -207) (undo-tree-id27110 . -207) (undo-tree-id27111 . 208) (undo-tree-id27112 . -207) (undo-tree-id27113 . -208) (undo-tree-id27114 . -207) (undo-tree-id27115 . -2) (undo-tree-id27116 . -2) (undo-tree-id27117 . -2) (undo-tree-id27118 . -2) (undo-tree-id27119 . -2) (undo-tree-id27120 . -2) (undo-tree-id27121 . -2) (undo-tree-id27122 . -2) (undo-tree-id27123 . -2) (undo-tree-id27124 . -2) (undo-tree-id27125 . -2) (undo-tree-id27126 . -2) (undo-tree-id27127 . -2) (undo-tree-id27128 . -2) (undo-tree-id27129 . -2) (undo-tree-id27130 . -2) (undo-tree-id27131 . -2) (undo-tree-id27132 . -2) (undo-tree-id27133 . -2) (undo-tree-id27134 . -2) (undo-tree-id27135 . -2) (undo-tree-id27136 . -2) (undo-tree-id27137 . -10) (undo-tree-id27138 . -10) (undo-tree-id27139 . -10) (undo-tree-id27140 . -10) (undo-tree-id27141 . -10) (undo-tree-id27142 . -10) (undo-tree-id27143 . -10) (undo-tree-id27144 . -10) (undo-tree-id27145 . -10) (undo-tree-id27146 . -10) (undo-tree-id27147 . -10) (undo-tree-id27148 . -10) (undo-tree-id27149 . -10) (undo-tree-id27150 . -10) (undo-tree-id27151 . -10) (undo-tree-id27152 . -10) (undo-tree-id27153 . -10) (undo-tree-id27154 . -10) (undo-tree-id27155 . -10) (undo-tree-id27156 . -10) (undo-tree-id27157 . -10) (undo-tree-id27158 . -10) (undo-tree-id27159 . -11) (undo-tree-id27160 . -11) (undo-tree-id27161 . -11) (undo-tree-id27162 . -11) (undo-tree-id27163 . -11) (undo-tree-id27164 . -11) (undo-tree-id27165 . -11) (undo-tree-id27166 . -11) (undo-tree-id27167 . -11) (undo-tree-id27168 . -11) (undo-tree-id27169 . -11) (undo-tree-id27170 . -11) (undo-tree-id27171 . -11) (undo-tree-id27172 . -11) (undo-tree-id27173 . -11) (undo-tree-id27174 . -11) (undo-tree-id27175 . -11) (undo-tree-id27176 . -11) (undo-tree-id27177 . -11) (undo-tree-id27178 . -11) (undo-tree-id27179 . -11) (undo-tree-id27180 . -11) (undo-tree-id27181 . -19) (undo-tree-id27182 . -19) (undo-tree-id27183 . -19) (undo-tree-id27184 . -19) (undo-tree-id27185 . -19) (undo-tree-id27186 . -19) (undo-tree-id27187 . -19) (undo-tree-id27188 . -19) (undo-tree-id27189 . -19) (undo-tree-id27190 . -19) (undo-tree-id27191 . -19) (undo-tree-id27192 . -19) (undo-tree-id27193 . -19) (undo-tree-id27194 . -19) (undo-tree-id27195 . -19) (undo-tree-id27196 . -19) (undo-tree-id27197 . -19) (undo-tree-id27198 . -19) (undo-tree-id27199 . -19) (undo-tree-id27200 . -19) (undo-tree-id27201 . -19) (undo-tree-id27202 . -19) (undo-tree-id27203 . -21) (undo-tree-id27204 . -21) (undo-tree-id27205 . -21) (undo-tree-id27206 . -21) (undo-tree-id27207 . -21) (undo-tree-id27208 . -21) (undo-tree-id27209 . -21) (undo-tree-id27210 . -21) (undo-tree-id27211 . -21) (undo-tree-id27212 . -21) (undo-tree-id27213 . -21) (undo-tree-id27214 . -21) (undo-tree-id27215 . -21) (undo-tree-id27216 . -21) (undo-tree-id27217 . -21) (undo-tree-id27218 . -21) (undo-tree-id27219 . -21) (undo-tree-id27220 . -21) (undo-tree-id27221 . -21) (undo-tree-id27222 . -21) (undo-tree-id27223 . -21) (undo-tree-id27224 . -21) (undo-tree-id27225 . -21) (undo-tree-id27226 . -21) (undo-tree-id27227 . -21) (undo-tree-id27228 . -21) (undo-tree-id27229 . -21) (undo-tree-id27230 . -21) (undo-tree-id27231 . -21) (undo-tree-id27232 . -21) (undo-tree-id27233 . -21) (undo-tree-id27234 . -21) (undo-tree-id27235 . -21) (undo-tree-id27236 . -21) (undo-tree-id27237 . -21) (undo-tree-id27238 . -21) (undo-tree-id27239 . -22) (undo-tree-id27240 . -22) (undo-tree-id27241 . -22) (undo-tree-id27242 . -22) (undo-tree-id27243 . -22) (undo-tree-id27244 . -22) (undo-tree-id27245 . -22) (undo-tree-id27246 . -22) (undo-tree-id27247 . -22) (undo-tree-id27248 . -22) (undo-tree-id27249 . -22) (undo-tree-id27250 . -22) (undo-tree-id27251 . -22) (undo-tree-id27252 . -22) (undo-tree-id27253 . -22) (undo-tree-id27254 . -22) (undo-tree-id27255 . -22) (undo-tree-id27256 . -22) (undo-tree-id27257 . -22) (undo-tree-id27258 . -22) (undo-tree-id27259 . -22) (undo-tree-id27260 . -22) (undo-tree-id27261 . -23) (undo-tree-id27262 . -23) (undo-tree-id27263 . -23) (undo-tree-id27264 . -23) (undo-tree-id27265 . -23) (undo-tree-id27266 . -23) (undo-tree-id27267 . -23) (undo-tree-id27268 . -23) (undo-tree-id27269 . -25) (undo-tree-id27270 . -25) (undo-tree-id27271 . -25) (undo-tree-id27272 . -25) (undo-tree-id27273 . -25) (undo-tree-id27274 . -25) (undo-tree-id27275 . -25) (undo-tree-id27276 . -25) (undo-tree-id27277 . -26) (undo-tree-id27278 . -26) (undo-tree-id27279 . -26) (undo-tree-id27280 . -26) (undo-tree-id27281 . -26) (undo-tree-id27282 . -26) (undo-tree-id27283 . -26) (undo-tree-id27284 . -26) (undo-tree-id27285 . -28) (undo-tree-id27286 . -28) (undo-tree-id27287 . -28) (undo-tree-id27288 . -28) (undo-tree-id27289 . -28) (undo-tree-id27290 . -28) (undo-tree-id27291 . -28) (undo-tree-id27292 . -28) (undo-tree-id27293 . -29) (undo-tree-id27294 . -29) (undo-tree-id27295 . -29) (undo-tree-id27296 . -29) (undo-tree-id27297 . -29) (undo-tree-id27298 . -29) (undo-tree-id27299 . -29) (undo-tree-id27300 . -29) (undo-tree-id27301 . -40) (undo-tree-id27302 . -40) (undo-tree-id27303 . -40) (undo-tree-id27304 . -40) (undo-tree-id27305 . -40) (undo-tree-id27306 . -40) (undo-tree-id27307 . -40) (undo-tree-id27308 . -40) (undo-tree-id27309 . -40) (undo-tree-id27310 . -40) (undo-tree-id27311 . -40) (undo-tree-id27312 . -40) (undo-tree-id27313 . -40) (undo-tree-id27314 . -40) (undo-tree-id27315 . -40) (undo-tree-id27316 . -40) (undo-tree-id27317 . -40) (undo-tree-id27318 . -40) (undo-tree-id27319 . -40) (undo-tree-id27320 . -40) (undo-tree-id27321 . -40) (undo-tree-id27322 . -40) (undo-tree-id27323 . -42) (undo-tree-id27324 . -42) (undo-tree-id27325 . -42) (undo-tree-id27326 . -42) (undo-tree-id27327 . -42) (undo-tree-id27328 . -42) (undo-tree-id27329 . -42) (undo-tree-id27330 . -42) (undo-tree-id27331 . -42) (undo-tree-id27332 . -42) (undo-tree-id27333 . -42) (undo-tree-id27334 . -42) (undo-tree-id27335 . -42) (undo-tree-id27336 . -42) (undo-tree-id27337 . -42) (undo-tree-id27338 . -42) (undo-tree-id27339 . -42) (undo-tree-id27340 . -42) (undo-tree-id27341 . -42) (undo-tree-id27342 . -42) (undo-tree-id27343 . -42) (undo-tree-id27344 . -42) (undo-tree-id27345 . 164) (undo-tree-id27346 . -51) (undo-tree-id27347 . -50) (undo-tree-id27348 . -50) (undo-tree-id27349 . -50) (undo-tree-id27350 . -50) (undo-tree-id27351 . -50) (undo-tree-id27352 . -50) (undo-tree-id27353 . -50) (undo-tree-id27354 . -50) (undo-tree-id27355 . -50) (undo-tree-id27356 . -50) (undo-tree-id27357 . -50) (undo-tree-id27358 . -50) (undo-tree-id27359 . -50) (undo-tree-id27360 . -50) (undo-tree-id27361 . -50) (undo-tree-id27362 . -50) (undo-tree-id27363 . -50) (undo-tree-id27364 . -50) (undo-tree-id27365 . -50) (undo-tree-id27366 . -50) (undo-tree-id27367 . -50) (undo-tree-id27368 . -50) (undo-tree-id27369 . -50) (undo-tree-id27370 . -50) (undo-tree-id27371 . -50) (undo-tree-id27372 . -50) (undo-tree-id27373 . -50) (undo-tree-id27374 . -50) (undo-tree-id27375 . -50) (undo-tree-id27376 . -61) (undo-tree-id27377 . -61) (undo-tree-id27378 . -61) (undo-tree-id27379 . -61) (undo-tree-id27380 . -61) (undo-tree-id27381 . -61) (undo-tree-id27382 . -61) (undo-tree-id27383 . -61) (undo-tree-id27384 . -61) (undo-tree-id27385 . -61) (undo-tree-id27386 . -61) (undo-tree-id27387 . -61) (undo-tree-id27388 . -61) (undo-tree-id27389 . -61) (undo-tree-id27390 . -61) (undo-tree-id27391 . -61) (undo-tree-id27392 . -61) (undo-tree-id27393 . -61) (undo-tree-id27394 . -61) (undo-tree-id27395 . -61) (undo-tree-id27396 . -61) (undo-tree-id27397 . -61) (undo-tree-id27398 . -65) (undo-tree-id27399 . -65) (undo-tree-id27400 . -65) (undo-tree-id27401 . -65) (undo-tree-id27402 . -65) (undo-tree-id27403 . -65) (undo-tree-id27404 . -65) (undo-tree-id27405 . -65) (undo-tree-id27406 . -65) (undo-tree-id27407 . -65) (undo-tree-id27408 . -65) (undo-tree-id27409 . -65) (undo-tree-id27410 . -65) (undo-tree-id27411 . -65) (undo-tree-id27412 . -65) (undo-tree-id27413 . -65) (undo-tree-id27414 . -65) (undo-tree-id27415 . -65) (undo-tree-id27416 . -65) (undo-tree-id27417 . -65) (undo-tree-id27418 . -65) (undo-tree-id27419 . -65) (undo-tree-id27420 . -74) (undo-tree-id27421 . -74) (undo-tree-id27422 . -74) (undo-tree-id27423 . -74) (undo-tree-id27424 . -74) (undo-tree-id27425 . -74) (undo-tree-id27426 . -74) (undo-tree-id27427 . -74) (undo-tree-id27428 . -74) (undo-tree-id27429 . -74) (undo-tree-id27430 . -74) (undo-tree-id27431 . -74) (undo-tree-id27432 . -74) (undo-tree-id27433 . -74) (undo-tree-id27434 . -74) (undo-tree-id27435 . -74) (undo-tree-id27436 . -74) (undo-tree-id27437 . -74) (undo-tree-id27438 . -74) (undo-tree-id27439 . -74) (undo-tree-id27440 . -74) (undo-tree-id27441 . -74) (undo-tree-id27442 . -77) (undo-tree-id27443 . -77) (undo-tree-id27444 . -77) (undo-tree-id27445 . -77) (undo-tree-id27446 . -77) (undo-tree-id27447 . -77) (undo-tree-id27448 . -77) (undo-tree-id27449 . -77) (undo-tree-id27450 . -77) (undo-tree-id27451 . -77) (undo-tree-id27452 . -77) (undo-tree-id27453 . -77) (undo-tree-id27454 . -77) (undo-tree-id27455 . -77) (undo-tree-id27456 . -77) (undo-tree-id27457 . -77) (undo-tree-id27458 . -77) (undo-tree-id27459 . -77) (undo-tree-id27460 . -77) (undo-tree-id27461 . -77) (undo-tree-id27462 . -77) (undo-tree-id27463 . -77) (undo-tree-id27464 . -85) (undo-tree-id27465 . -85) (undo-tree-id27466 . -85) (undo-tree-id27467 . -85) (undo-tree-id27468 . -85) (undo-tree-id27469 . -85) (undo-tree-id27470 . -85) (undo-tree-id27471 . -85) (undo-tree-id27472 . -85) (undo-tree-id27473 . -85) (undo-tree-id27474 . -85) (undo-tree-id27475 . -85) (undo-tree-id27476 . -85) (undo-tree-id27477 . -85) (undo-tree-id27478 . -85) (undo-tree-id27479 . -85) (undo-tree-id27480 . -85) (undo-tree-id27481 . -85) (undo-tree-id27482 . -85) (undo-tree-id27483 . -85) (undo-tree-id27484 . -85) (undo-tree-id27485 . -85) (undo-tree-id27486 . -87) (undo-tree-id27487 . -87) (undo-tree-id27488 . -87) (undo-tree-id27489 . -87) (undo-tree-id27490 . -87) (undo-tree-id27491 . -87) (undo-tree-id27492 . -87) (undo-tree-id27493 . -87) (undo-tree-id27494 . -87) (undo-tree-id27495 . -87) (undo-tree-id27496 . -87) (undo-tree-id27497 . -87) (undo-tree-id27498 . -87) (undo-tree-id27499 . -87) (undo-tree-id27500 . -87) (undo-tree-id27501 . -87) (undo-tree-id27502 . -87) (undo-tree-id27503 . -87) (undo-tree-id27504 . -87) (undo-tree-id27505 . -87) (undo-tree-id27506 . -87) (undo-tree-id27507 . -87) (undo-tree-id27508 . -88) (undo-tree-id27509 . -88) (undo-tree-id27510 . -88) (undo-tree-id27511 . -88) (undo-tree-id27512 . -88) (undo-tree-id27513 . -88) (undo-tree-id27514 . -88) (undo-tree-id27515 . -88) (undo-tree-id27516 . -88) (undo-tree-id27517 . -88) (undo-tree-id27518 . -88) (undo-tree-id27519 . -88) (undo-tree-id27520 . -88) (undo-tree-id27521 . -88) (undo-tree-id27522 . -88) (undo-tree-id27523 . -88) (undo-tree-id27524 . -88) (undo-tree-id27525 . -88) (undo-tree-id27526 . -88) (undo-tree-id27527 . -88) (undo-tree-id27528 . -88) (undo-tree-id27529 . -88) (undo-tree-id27530 . -88) (undo-tree-id27531 . -88) (undo-tree-id27532 . -88) (undo-tree-id27533 . -88) (undo-tree-id27534 . -88) (undo-tree-id27535 . -88) (undo-tree-id27536 . -88) (undo-tree-id27537 . -88) (undo-tree-id27538 . -88) (undo-tree-id27539 . -88) (undo-tree-id27540 . -88) (undo-tree-id27541 . -88) (undo-tree-id27542 . -88) (undo-tree-id27543 . -88) (undo-tree-id27544 . -88) (undo-tree-id27545 . -88) (undo-tree-id27546 . -88) (undo-tree-id27547 . -88) (undo-tree-id27548 . -88) (undo-tree-id27549 . -88) (undo-tree-id27550 . -88) (undo-tree-id27551 . -90) (undo-tree-id27552 . -90) (undo-tree-id27553 . -90) (undo-tree-id27554 . -90) (undo-tree-id27555 . -90) (undo-tree-id27556 . -90) (undo-tree-id27557 . -90) (undo-tree-id27558 . -90) (undo-tree-id27559 . -90) (undo-tree-id27560 . -90) (undo-tree-id27561 . -90) (undo-tree-id27562 . -90) (undo-tree-id27563 . -90) (undo-tree-id27564 . -90) (undo-tree-id27565 . -90) (undo-tree-id27566 . -90) (undo-tree-id27567 . -90) (undo-tree-id27568 . -90) (undo-tree-id27569 . -90) (undo-tree-id27570 . -90) (undo-tree-id27571 . -90) (undo-tree-id27572 . -90) (undo-tree-id27573 . -91) (undo-tree-id27574 . -91) (undo-tree-id27575 . -91) (undo-tree-id27576 . -91) (undo-tree-id27577 . -91) (undo-tree-id27578 . -91) (undo-tree-id27579 . -91) (undo-tree-id27580 . -91) (undo-tree-id27581 . -95) (undo-tree-id27582 . -95) (undo-tree-id27583 . -95) (undo-tree-id27584 . -95) (undo-tree-id27585 . -95) (undo-tree-id27586 . -95) (undo-tree-id27587 . -95) (undo-tree-id27588 . -95) (undo-tree-id27589 . -97) (undo-tree-id27590 . -97) (undo-tree-id27591 . -97) (undo-tree-id27592 . -97) (undo-tree-id27593 . -97) (undo-tree-id27594 . -97) (undo-tree-id27595 . -97) (undo-tree-id27596 . -97) (undo-tree-id27597 . -98) (undo-tree-id27598 . -98) (undo-tree-id27599 . -98) (undo-tree-id27600 . -98) (undo-tree-id27601 . -98) (undo-tree-id27602 . -98) (undo-tree-id27603 . -98) (undo-tree-id27604 . -98) (undo-tree-id27605 . -101) (undo-tree-id27606 . -101) (undo-tree-id27607 . -101) (undo-tree-id27608 . -101) (undo-tree-id27609 . -101) (undo-tree-id27610 . -101) (undo-tree-id27611 . -101) (undo-tree-id27612 . -101) (undo-tree-id27613 . -105) (undo-tree-id27614 . -105) (undo-tree-id27615 . -105) (undo-tree-id27616 . -105) (undo-tree-id27617 . -105) (undo-tree-id27618 . -105) (undo-tree-id27619 . -105) (undo-tree-id27620 . -105) (undo-tree-id27621 . -113) (undo-tree-id27622 . -113) (undo-tree-id27623 . -113) (undo-tree-id27624 . -113) (undo-tree-id27625 . -113) (undo-tree-id27626 . -113) (undo-tree-id27627 . -113) (undo-tree-id27628 . -113) (undo-tree-id27629 . -117) (undo-tree-id27630 . -117) (undo-tree-id27631 . -117) (undo-tree-id27632 . -117) (undo-tree-id27633 . -117) (undo-tree-id27634 . -117) (undo-tree-id27635 . -117) (undo-tree-id27636 . -117) (undo-tree-id27637 . -124) (undo-tree-id27638 . -124) (undo-tree-id27639 . -124) (undo-tree-id27640 . -124) (undo-tree-id27641 . -124) (undo-tree-id27642 . -124) (undo-tree-id27643 . -124) (undo-tree-id27644 . -124) (undo-tree-id27645 . 82) (undo-tree-id27646 . -133) (undo-tree-id27647 . -132) (undo-tree-id27648 . -132) (undo-tree-id27649 . -132) (undo-tree-id27650 . -132) (undo-tree-id27651 . -132) (undo-tree-id27652 . -132) (undo-tree-id27653 . -132) (undo-tree-id27654 . -132) (undo-tree-id27655 . -135) (undo-tree-id27656 . -135) (undo-tree-id27657 . -135) (undo-tree-id27658 . -135) (undo-tree-id27659 . -135) (undo-tree-id27660 . -135) (undo-tree-id27661 . -135) (undo-tree-id27662 . -135) (undo-tree-id27663 . -136) (undo-tree-id27664 . -136) (undo-tree-id27665 . -136) (undo-tree-id27666 . -136) (undo-tree-id27667 . -136) (undo-tree-id27668 . -136) (undo-tree-id27669 . -136) (undo-tree-id27670 . -136) (undo-tree-id27671 . -137) (undo-tree-id27672 . -137) (undo-tree-id27673 . -137) (undo-tree-id27674 . -137) (undo-tree-id27675 . -137) (undo-tree-id27676 . -137) (undo-tree-id27677 . -137) (undo-tree-id27678 . -137) (undo-tree-id27679 . -139) (undo-tree-id27680 . -139) (undo-tree-id27681 . -139) (undo-tree-id27682 . -139) (undo-tree-id27683 . -139) (undo-tree-id27684 . -139) (undo-tree-id27685 . -139) (undo-tree-id27686 . -139) (undo-tree-id27687 . -141) (undo-tree-id27688 . -141) (undo-tree-id27689 . -141) (undo-tree-id27690 . -141) (undo-tree-id27691 . -141) (undo-tree-id27692 . -141) (undo-tree-id27693 . -141) (undo-tree-id27694 . -141) (undo-tree-id27695 . -143) (undo-tree-id27696 . -143) (undo-tree-id27697 . -143) (undo-tree-id27698 . -143) (undo-tree-id27699 . -143) (undo-tree-id27700 . -143) (undo-tree-id27701 . -143) (undo-tree-id27702 . -143) (undo-tree-id27703 . -144) (undo-tree-id27704 . -144) (undo-tree-id27705 . -144) (undo-tree-id27706 . -144) (undo-tree-id27707 . -144) (undo-tree-id27708 . -144) (undo-tree-id27709 . -144) (undo-tree-id27710 . -144) (undo-tree-id27711 . -145) (undo-tree-id27712 . -145) (undo-tree-id27713 . -145) (undo-tree-id27714 . -145) (undo-tree-id27715 . -145) (undo-tree-id27716 . -145) (undo-tree-id27717 . -145) (undo-tree-id27718 . -145) (undo-tree-id27719 . -147) (undo-tree-id27720 . -147) (undo-tree-id27721 . -147) (undo-tree-id27722 . -147) (undo-tree-id27723 . -147) (undo-tree-id27724 . -147) (undo-tree-id27725 . -147) (undo-tree-id27726 . -147) (undo-tree-id27727 . -148) (undo-tree-id27728 . -148) (undo-tree-id27729 . -148) (undo-tree-id27730 . -148) (undo-tree-id27731 . -148) (undo-tree-id27732 . -148) (undo-tree-id27733 . -148) (undo-tree-id27734 . -148) (undo-tree-id27735 . -150) (undo-tree-id27736 . -150) (undo-tree-id27737 . -150) (undo-tree-id27738 . -150) (undo-tree-id27739 . -150) (undo-tree-id27740 . -150) (undo-tree-id27741 . -150) (undo-tree-id27742 . -150) (undo-tree-id27743 . -151) (undo-tree-id27744 . -151) (undo-tree-id27745 . -151) (undo-tree-id27746 . -151) (undo-tree-id27747 . -151) (undo-tree-id27748 . -151) (undo-tree-id27749 . -151) (undo-tree-id27750 . -151) (undo-tree-id27751 . -153) (undo-tree-id27752 . -153) (undo-tree-id27753 . -153) (undo-tree-id27754 . -153) (undo-tree-id27755 . -153) (undo-tree-id27756 . -153) (undo-tree-id27757 . -153) (undo-tree-id27758 . -153) (undo-tree-id27759 . -156) (undo-tree-id27760 . -156) (undo-tree-id27761 . -156) (undo-tree-id27762 . -156) (undo-tree-id27763 . -156) (undo-tree-id27764 . -156) (undo-tree-id27765 . -156) (undo-tree-id27766 . -156) (undo-tree-id27767 . -160) (undo-tree-id27768 . -160) (undo-tree-id27769 . -160) (undo-tree-id27770 . -160) (undo-tree-id27771 . -160) (undo-tree-id27772 . -160) (undo-tree-id27773 . -160) (undo-tree-id27774 . -160) (undo-tree-id27775 . -164) (undo-tree-id27776 . -164) (undo-tree-id27777 . -164) (undo-tree-id27778 . -164) (undo-tree-id27779 . -164) (undo-tree-id27780 . -164) (undo-tree-id27781 . -164) (undo-tree-id27782 . -164) (undo-tree-id27783 . -169) (undo-tree-id27784 . -169) (undo-tree-id27785 . -169) (undo-tree-id27786 . -169) (undo-tree-id27787 . -169) (undo-tree-id27788 . -169) (undo-tree-id27789 . -169) (undo-tree-id27790 . -169) (undo-tree-id27791 . -173) (undo-tree-id27792 . -173) (undo-tree-id27793 . -173) (undo-tree-id27794 . -173) (undo-tree-id27795 . -173) (undo-tree-id27796 . -173) (undo-tree-id27797 . -173) (undo-tree-id27798 . -173) (undo-tree-id27799 . -178) (undo-tree-id27800 . -178) (undo-tree-id27801 . -178) (undo-tree-id27802 . -178) (undo-tree-id27803 . -178) (undo-tree-id27804 . -178) (undo-tree-id27805 . -178) (undo-tree-id27806 . -178) (undo-tree-id27807 . -186) (undo-tree-id27808 . -186) (undo-tree-id27809 . -186) (undo-tree-id27810 . -186) (undo-tree-id27811 . -186) (undo-tree-id27812 . -186) (undo-tree-id27813 . -186) (undo-tree-id27814 . -186) (undo-tree-id27815 . -188) (undo-tree-id27816 . -188) (undo-tree-id27817 . -188) (undo-tree-id27818 . -188) (undo-tree-id27819 . -188) (undo-tree-id27820 . -188) (undo-tree-id27821 . -188) (undo-tree-id27822 . -188) (undo-tree-id27823 . -189) (undo-tree-id27824 . -189) (undo-tree-id27825 . -189) (undo-tree-id27826 . -189) (undo-tree-id27827 . -189) (undo-tree-id27828 . -189) (undo-tree-id27829 . -189) (undo-tree-id27830 . -189) (undo-tree-id27831 . -189) (undo-tree-id27832 . -189) (undo-tree-id27833 . -189) (undo-tree-id27834 . -189) (undo-tree-id27835 . -189) (undo-tree-id27836 . -189) (undo-tree-id27837 . -189) (undo-tree-id27838 . -189) (undo-tree-id27839 . -189) (undo-tree-id27840 . -189) (undo-tree-id27841 . -189) (undo-tree-id27842 . -189) (undo-tree-id27843 . -189) (undo-tree-id27844 . -189) (undo-tree-id27845 . -190) (undo-tree-id27846 . -190) (undo-tree-id27847 . -190) (undo-tree-id27848 . -190) (undo-tree-id27849 . -190) (undo-tree-id27850 . -190) (undo-tree-id27851 . -190) (undo-tree-id27852 . -190) (undo-tree-id27853 . -190) (undo-tree-id27854 . -190) (undo-tree-id27855 . -190) (undo-tree-id27856 . -190) (undo-tree-id27857 . -190) (undo-tree-id27858 . -190) (undo-tree-id27859 . -190) (undo-tree-id27860 . -190) (undo-tree-id27861 . -190) (undo-tree-id27862 . -190) (undo-tree-id27863 . -190) (undo-tree-id27864 . -190) (undo-tree-id27865 . -190) (undo-tree-id27866 . -190) (undo-tree-id27867 . -192) (undo-tree-id27868 . -192) (undo-tree-id27869 . -192) (undo-tree-id27870 . -192) (undo-tree-id27871 . -192) (undo-tree-id27872 . -192) (undo-tree-id27873 . -192) (undo-tree-id27874 . -192) (undo-tree-id27875 . -192) (undo-tree-id27876 . -192) (undo-tree-id27877 . -192) (undo-tree-id27878 . -192) (undo-tree-id27879 . -192) (undo-tree-id27880 . -192) (undo-tree-id27881 . -192) (undo-tree-id27882 . -192) (undo-tree-id27883 . -192) (undo-tree-id27884 . -192) (undo-tree-id27885 . -192) (undo-tree-id27886 . -192) (undo-tree-id27887 . -192) (undo-tree-id27888 . -192) (undo-tree-id27889 . -193) (undo-tree-id27890 . -193) (undo-tree-id27891 . -193) (undo-tree-id27892 . -193) (undo-tree-id27893 . -193) (undo-tree-id27894 . -193) (undo-tree-id27895 . -193) (undo-tree-id27896 . -193) (undo-tree-id27897 . -193) (undo-tree-id27898 . -193) (undo-tree-id27899 . -193) (undo-tree-id27900 . -193) (undo-tree-id27901 . -193) (undo-tree-id27902 . -193) (undo-tree-id27903 . -193) (undo-tree-id27904 . -193) (undo-tree-id27905 . -193) (undo-tree-id27906 . -193) (undo-tree-id27907 . -193) (undo-tree-id27908 . -193) (undo-tree-id27909 . -193) (undo-tree-id27910 . -193) (undo-tree-id27911 . -195) (undo-tree-id27912 . -195) (undo-tree-id27913 . -195) (undo-tree-id27914 . -195) (undo-tree-id27915 . -195) (undo-tree-id27916 . -195) (undo-tree-id27917 . -195) (undo-tree-id27918 . -195) (undo-tree-id27919 . -195) (undo-tree-id27920 . -195) (undo-tree-id27921 . -195) (undo-tree-id27922 . -195) (undo-tree-id27923 . -195) (undo-tree-id27924 . -195) (undo-tree-id27925 . -195) (undo-tree-id27926 . -195) (undo-tree-id27927 . -195) (undo-tree-id27928 . -195) (undo-tree-id27929 . -195) (undo-tree-id27930 . -195) (undo-tree-id27931 . -195) (undo-tree-id27932 . -195) (undo-tree-id27933 . -196) (undo-tree-id27934 . -196) (undo-tree-id27935 . -196) (undo-tree-id27936 . -196) (undo-tree-id27937 . -196) (undo-tree-id27938 . -196) (undo-tree-id27939 . -196) (undo-tree-id27940 . -196) (undo-tree-id27941 . -196) (undo-tree-id27942 . -196) (undo-tree-id27943 . -196) (undo-tree-id27944 . -196) (undo-tree-id27945 . -196) (undo-tree-id27946 . -196) (undo-tree-id27947 . -196) (undo-tree-id27948 . -196) (undo-tree-id27949 . -196) (undo-tree-id27950 . -196) (undo-tree-id27951 . -196) (undo-tree-id27952 . -196) (undo-tree-id27953 . -196) (undo-tree-id27954 . -196) (undo-tree-id27955 . -198) (undo-tree-id27956 . -198) (undo-tree-id27957 . -198) (undo-tree-id27958 . -198) (undo-tree-id27959 . -198) (undo-tree-id27960 . -198) (undo-tree-id27961 . -198) (undo-tree-id27962 . -198) (undo-tree-id27963 . -198) (undo-tree-id27964 . -198) (undo-tree-id27965 . -198) (undo-tree-id27966 . -198) (undo-tree-id27967 . -198) (undo-tree-id27968 . -198) (undo-tree-id27969 . -198) (undo-tree-id27970 . -198) (undo-tree-id27971 . -198) (undo-tree-id27972 . -198) (undo-tree-id27973 . -198) (undo-tree-id27974 . -198) (undo-tree-id27975 . -198) (undo-tree-id27976 . -198) (undo-tree-id27977 . -199) (undo-tree-id27978 . -199) (undo-tree-id27979 . -199) (undo-tree-id27980 . -199) (undo-tree-id27981 . -199) (undo-tree-id27982 . -199) (undo-tree-id27983 . -199) (undo-tree-id27984 . -199) (undo-tree-id27985 . -199) (undo-tree-id27986 . -199) (undo-tree-id27987 . -199) (undo-tree-id27988 . -199) (undo-tree-id27989 . -199) (undo-tree-id27990 . -199) (undo-tree-id27991 . -199) (undo-tree-id27992 . -199) (undo-tree-id27993 . -199) (undo-tree-id27994 . -199) (undo-tree-id27995 . -199) (undo-tree-id27996 . -199) (undo-tree-id27997 . -199) (undo-tree-id27998 . -199) (undo-tree-id27999 . -201) (undo-tree-id28000 . -201) (undo-tree-id28001 . -201) (undo-tree-id28002 . -201) (undo-tree-id28003 . -201) (undo-tree-id28004 . -201) (undo-tree-id28005 . -201) (undo-tree-id28006 . -201) (undo-tree-id28007 . -201) (undo-tree-id28008 . -201) (undo-tree-id28009 . -201) (undo-tree-id28010 . -201) (undo-tree-id28011 . -201) (undo-tree-id28012 . -201) (undo-tree-id28013 . -201) (undo-tree-id28014 . -201) (undo-tree-id28015 . -201) (undo-tree-id28016 . -201) (undo-tree-id28017 . -201) (undo-tree-id28018 . -201) (undo-tree-id28019 . -201) (undo-tree-id28020 . -201) (undo-tree-id28021 . -201) (undo-tree-id28022 . -201) (undo-tree-id28023 . -201) (undo-tree-id28024 . -201) (undo-tree-id28025 . -201) (undo-tree-id28026 . -201) (undo-tree-id28027 . -201) (undo-tree-id28028 . -202) (undo-tree-id28029 . -202) (undo-tree-id28030 . -202) (undo-tree-id28031 . -202) (undo-tree-id28032 . -202) (undo-tree-id28033 . -202) (undo-tree-id28034 . -202) (undo-tree-id28035 . -202) (undo-tree-id28036 . -202) (undo-tree-id28037 . -202) (undo-tree-id28038 . -202) (undo-tree-id28039 . -202) (undo-tree-id28040 . -202) (undo-tree-id28041 . -202) (undo-tree-id28042 . -202) (undo-tree-id28043 . -202) (undo-tree-id28044 . -202) (undo-tree-id28045 . -202) (undo-tree-id28046 . -202) (undo-tree-id28047 . -202) (undo-tree-id28048 . -202) (undo-tree-id28049 . -202) (undo-tree-id28050 . -204) (undo-tree-id28051 . -204) (undo-tree-id28052 . -204) (undo-tree-id28053 . -204) (undo-tree-id28054 . -204) (undo-tree-id28055 . -204) (undo-tree-id28056 . -204) (undo-tree-id28057 . -204) (undo-tree-id28058 . -204) (undo-tree-id28059 . -204) (undo-tree-id28060 . -204) (undo-tree-id28061 . -204) (undo-tree-id28062 . -204) (undo-tree-id28063 . -204) (undo-tree-id28064 . -204) (undo-tree-id28065 . -204) (undo-tree-id28066 . -204) (undo-tree-id28067 . -204) (undo-tree-id28068 . -204) (undo-tree-id28069 . -204) (undo-tree-id28070 . -204) (undo-tree-id28071 . -204) (undo-tree-id28072 . -206) (undo-tree-id28073 . -206) (undo-tree-id28074 . -206) (undo-tree-id28075 . -206) (undo-tree-id28076 . -206) (undo-tree-id28077 . -206) (undo-tree-id28078 . -206) (undo-tree-id28079 . -206) (undo-tree-id28080 . -206) (undo-tree-id28081 . -206) (undo-tree-id28082 . -206) (undo-tree-id28083 . -206) (undo-tree-id28084 . -206) (undo-tree-id28085 . -206) (undo-tree-id28086 . -206) (undo-tree-id28087 . -206) (undo-tree-id28088 . -206) (undo-tree-id28089 . -206) (undo-tree-id28090 . -206) (undo-tree-id28091 . -206) (undo-tree-id28092 . -206) (undo-tree-id28093 . -206) (undo-tree-id28094 . -208) (undo-tree-id28095 . -208) (undo-tree-id28096 . -208) (undo-tree-id28097 . -208) (undo-tree-id28098 . -208) (undo-tree-id28099 . -208) (undo-tree-id28100 . -208) (undo-tree-id28101 . -208) (undo-tree-id28102 . -208) (undo-tree-id28103 . -208) (undo-tree-id28104 . -208) (undo-tree-id28105 . -208) (undo-tree-id28106 . -208) (undo-tree-id28107 . -208) (undo-tree-id28108 . -208) (undo-tree-id28109 . -208) (undo-tree-id28110 . -208) (undo-tree-id28111 . -208) (undo-tree-id28112 . -208) (undo-tree-id28113 . -208) (undo-tree-id28114 . -208) (undo-tree-id28115 . -208) (undo-tree-id28116 . 28) (undo-tree-id28117 . -187) (undo-tree-id28118 . -207) (undo-tree-id28119 . -207) (undo-tree-id28120 . -207) (undo-tree-id28121 . -207) (undo-tree-id28122 . -207) (undo-tree-id28123 . -207) (undo-tree-id28124 . -207) (undo-tree-id28125 . -207) (undo-tree-id28126 . -207) (undo-tree-id28127 . -207) (undo-tree-id28128 . -207) (undo-tree-id28129 . -207) (undo-tree-id28130 . -207) (undo-tree-id28131 . -207) (undo-tree-id28132 . -207) (undo-tree-id28133 . -207) (undo-tree-id28134 . -207) (undo-tree-id28135 . -207) (undo-tree-id28136 . -207) (undo-tree-id28137 . -207) (undo-tree-id28138 . -207) (undo-tree-id28139 . -207) (undo-tree-id28140 . -207) (undo-tree-id28141 . -208) 3298) nil (25767 5822 838268 630000) 0 nil] [nil nil ((3091 . 3092)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3091) (undo-tree-id24413 . -1) (undo-tree-id24414 . -1) (undo-tree-id24415 . -1)) (25767 5797 144151 264000) 0 nil])
([nil nil ((3013 . 4392) (#("- Moreover, the flat_map() method takes a function as an argument, which allows you to transform each dataset in the nested dataset before flattening. For example, if you pass the function lambda ds: ds.batch(2) to flat_map(), then it will transform the nested dataset {{1, 2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of tensors of size 2. With that in mind, we are ready to flatten our dataset: dataset = dataset.flat_map(lambda window: window.batch(window_length)) Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32).
- Call the flat_map() method to convert a nested dataset into a flat dataset." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 20 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 20 21 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 24 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 24 72 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 73 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 119 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 119 120 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 120 121 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 121 122 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 122 123 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 123 124 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 124 125 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 125 126 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 126 128 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 128 129 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 129 130 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 130 138 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 138 139 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 139 157 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 157 158 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 158 177 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 177 178 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 178 179 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 179 180 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 180 181 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 181 182 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 182 199 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 199 200 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 200 206 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 206 215 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 215 216 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 216 219 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 219 220 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 220 223 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 223 273 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 273 274 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 274 357 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 357 358 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 358 424 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 424 432 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 432 433 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 433 455 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 455 456 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 456 459 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 459 494 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 494 495 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 495 501 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 501 503 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 503 504 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 504 536 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 536 537 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 537 543 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 543 570 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 570 571 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 571 639 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 639 644 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 644 645 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 645 713 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 713 714 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 714 788 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 788 789 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 789 864 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 864 865 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 865 934 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 934 935 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 935 1006 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1006 1007 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1007 1012 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1012 1013 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1013 1017 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1017 1022 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1022 1023 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1023 1067 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1067 1068 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1068 1072 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1072 1073 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1073 1074 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1074 1145 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1145 1146 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1146 1147 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1147 1216 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1216 1217 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1217 1285 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1285 1286 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1286 1300 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1300 1301 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1301 1302 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1302 1303 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 1303 1304 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1304 1317 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1317 1318 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 1318 1321 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1321 1323 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1323 1324 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1324 1334 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1334 1378 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1378 1379 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 3013) (undo-tree-id24416 . -1379) (undo-tree-id24417 . -1379) (undo-tree-id24418 . -1379) (undo-tree-id24419 . -1379) (undo-tree-id24420 . -1304) (undo-tree-id24421 . -1379) (undo-tree-id24422 . -1330) (undo-tree-id24423 . -1330) (undo-tree-id24424 . -1330) (undo-tree-id24425 . -1330) (undo-tree-id24426 . -1330) (undo-tree-id24427 . -1330) (undo-tree-id24428 . -1330) (undo-tree-id24429 . -1330) (undo-tree-id24430 . -1330) (undo-tree-id24431 . -1330) (undo-tree-id24432 . -1330) (undo-tree-id24433 . -1330) (undo-tree-id24434 . -1330) (undo-tree-id24435 . -1330) (undo-tree-id24436 . -1330) (undo-tree-id24437 . -1330) (undo-tree-id24438 . -1330) (undo-tree-id24439 . -1330) (undo-tree-id24440 . -1330) (undo-tree-id24441 . -1330) (undo-tree-id24442 . -1330) (undo-tree-id24443 . -1330) (undo-tree-id24444 . -1330) (undo-tree-id24445 . -1330) (undo-tree-id24446 . -1330) (undo-tree-id24447 . -1330) (undo-tree-id24448 . -1330) (undo-tree-id24449 . -1330) (undo-tree-id24450 . -1330) (undo-tree-id24451 . -1330) (undo-tree-id24452 . -1330) (undo-tree-id24453 . -1330) (undo-tree-id24454 . -1330) (undo-tree-id24455 . -1330) (undo-tree-id24456 . -1330) (undo-tree-id24457 . -1330) (undo-tree-id24458 . -1330) (undo-tree-id24459 . -1330) (undo-tree-id24460 . -1330) (undo-tree-id24461 . -1330) (undo-tree-id24462 . -1330) (undo-tree-id24463 . -1330) (undo-tree-id24464 . -1330) (undo-tree-id24465 . -1330) (undo-tree-id24466 . -1330) (undo-tree-id24467 . -1330) (undo-tree-id24468 . -1330) (undo-tree-id24469 . -1330) (undo-tree-id24470 . -1330) (undo-tree-id24471 . -1330) (undo-tree-id24472 . -1330) (undo-tree-id24473 . -1330) (undo-tree-id24474 . -1330) (undo-tree-id24475 . -1330) (undo-tree-id24476 . -1330) (undo-tree-id24477 . -1330) (undo-tree-id24478 . -1330) (undo-tree-id24479 . -1330) (undo-tree-id24480 . -1330) (undo-tree-id24481 . -1330) (undo-tree-id24482 . -1330) (undo-tree-id24483 . -1330) (undo-tree-id24484 . -1330) (undo-tree-id24485 . -1330) (undo-tree-id24486 . -1330) (undo-tree-id24487 . -1330) (undo-tree-id24488 . -1330) (undo-tree-id24489 . -1330) (undo-tree-id24490 . -1330) (undo-tree-id24491 . -1330) (undo-tree-id24492 . -1330) (undo-tree-id24493 . -1330) (undo-tree-id24494 . -1330) (undo-tree-id24495 . 28) (undo-tree-id24496 . -1358) (undo-tree-id24497 . -1378) (undo-tree-id24498 . -1378) (undo-tree-id24499 . -1378) (undo-tree-id24500 . -1378) (undo-tree-id24501 . -1378) (undo-tree-id24502 . -1378) (undo-tree-id24503 . -1378) (undo-tree-id24504 . -1378) (undo-tree-id24505 . -1378) (undo-tree-id24506 . -1378) (undo-tree-id24507 . -1378) (undo-tree-id24508 . -1378) (undo-tree-id24509 . -1378) (undo-tree-id24510 . -1378) (undo-tree-id24511 . -1378) (undo-tree-id24512 . -1378) (undo-tree-id24513 . -1378) (undo-tree-id24514 . -1378) (undo-tree-id24515 . -1378) (undo-tree-id24516 . -1378) (undo-tree-id24517 . -1378) (undo-tree-id24518 . -1378) (undo-tree-id24519 . -1378) (undo-tree-id24520 . -1378) (undo-tree-id24521 . -1378) (undo-tree-id24522 . -1378) (undo-tree-id24523 . -1378) (undo-tree-id24524 . -1378) (undo-tree-id24525 . -1378) (undo-tree-id24526 . -1378) (undo-tree-id24527 . -1378) (undo-tree-id24528 . -1378) (undo-tree-id24529 . -1378) (undo-tree-id24530 . -1378) (undo-tree-id24531 . -1378) (undo-tree-id24532 . -1378) (undo-tree-id24533 . -1378) (undo-tree-id24534 . -1378) (undo-tree-id24535 . -1378) (undo-tree-id24536 . -1378) (undo-tree-id24537 . -1378) (undo-tree-id24538 . -1378) (undo-tree-id24539 . -1378) (undo-tree-id24540 . -1378) (undo-tree-id24541 . -1378) (undo-tree-id24542 . -1378) (undo-tree-id24543 . -1378) (undo-tree-id24544 . -1378) (undo-tree-id24545 . -1378) (undo-tree-id24546 . -1378) (undo-tree-id24547 . -1378) (undo-tree-id24548 . -1378) (undo-tree-id24549 . -1378) (undo-tree-id24550 . -1378) (undo-tree-id24551 . -1378) (undo-tree-id24552 . -1378) (undo-tree-id24553 . -1378) (undo-tree-id24554 . -1378) (undo-tree-id24555 . -1378) (undo-tree-id24556 . -1378) (undo-tree-id24557 . -1378) (undo-tree-id24558 . -1378) (undo-tree-id24559 . -1378) (undo-tree-id24560 . -1378) (undo-tree-id24561 . -1378) (undo-tree-id24562 . -1378) (undo-tree-id24563 . -1378) (undo-tree-id24564 . -1378) (undo-tree-id24565 . -1378) (undo-tree-id24566 . -1378) (undo-tree-id24567 . -1378) (undo-tree-id24568 . -1378) (undo-tree-id24569 . -1378) (undo-tree-id24570 . -1378) (undo-tree-id24571 . -1378) (undo-tree-id24572 . -1378) (undo-tree-id24573 . -1378) (undo-tree-id24574 . -1378) (undo-tree-id24575 . -1378) (undo-tree-id24576 . -1378) (undo-tree-id24577 . -1378) (undo-tree-id24578 . -1378) (undo-tree-id24579 . -1378) (undo-tree-id24580 . -1378) (undo-tree-id24581 . -1378) (undo-tree-id24582 . -1378) (undo-tree-id24583 . -1378) (undo-tree-id24584 . -1378) (undo-tree-id24585 . -1378) (undo-tree-id24586 . -1378) (undo-tree-id24587 . 8) (undo-tree-id24588 . -1378) (undo-tree-id24589 . -1379) (undo-tree-id24590 . -1379) (undo-tree-id24591 . -1379) (undo-tree-id24592 . -1379) (undo-tree-id24593 . -1379) (undo-tree-id24594 . -1379) (undo-tree-id24595 . -1379) (undo-tree-id24596 . -1379) (undo-tree-id24597 . -1379) (undo-tree-id24598 . -1379) (undo-tree-id24599 . -1379) (undo-tree-id24600 . -1379) (undo-tree-id24601 . -1379) (undo-tree-id24602 . -1379) (undo-tree-id24603 . -1379) (undo-tree-id24604 . -1379) (undo-tree-id24605 . -1379) (undo-tree-id24606 . -1379) (undo-tree-id24607 . -1379) (undo-tree-id24608 . -1379) (undo-tree-id24609 . -1379) (undo-tree-id24610 . -1379) (undo-tree-id24611 . -1379) (undo-tree-id24612 . -1379) (undo-tree-id24613 . -1379) (undo-tree-id24614 . -1379) (undo-tree-id24615 . -1379) (undo-tree-id24616 . -1379) (undo-tree-id24617 . -1379) (undo-tree-id24618 . -1379) (undo-tree-id24619 . -1379) (undo-tree-id24620 . -1379) (undo-tree-id24621 . -1379) (undo-tree-id24622 . -1379) (undo-tree-id24623 . -1379) (undo-tree-id24624 . -1379) (undo-tree-id24625 . -1379) (undo-tree-id24626 . -1379) (undo-tree-id24627 . -1379) (undo-tree-id24628 . -1379) (undo-tree-id24629 . -1379) (undo-tree-id24630 . -1379) (undo-tree-id24631 . -1379) (undo-tree-id24632 . -1379) (undo-tree-id24633 . -1379) (undo-tree-id24634 . -1379) (undo-tree-id24635 . -1379) (undo-tree-id24636 . -1379) (undo-tree-id24637 . -1379) (undo-tree-id24638 . -1379) (undo-tree-id24639 . -1379) (undo-tree-id24640 . -1379) (undo-tree-id24641 . -1379) (undo-tree-id24642 . -1379) (undo-tree-id24643 . -1379) (undo-tree-id24644 . -1379) (undo-tree-id24645 . -1379) (undo-tree-id24646 . -1379) (undo-tree-id24647 . -1379) (undo-tree-id24648 . -1379) (undo-tree-id24649 . -1379) (undo-tree-id24650 . -1379) (undo-tree-id24651 . -1379) (undo-tree-id24652 . -1379) (undo-tree-id24653 . -1379) (undo-tree-id24654 . -1379) (undo-tree-id24655 . -1379) (undo-tree-id24656 . -1379) (undo-tree-id24657 . -1379) (undo-tree-id24658 . -1379) (undo-tree-id24659 . -1379) (undo-tree-id24660 . -1379) (undo-tree-id24661 . -1379) (undo-tree-id24662 . -1379) (undo-tree-id24663 . -1379) (undo-tree-id24664 . -1379) (undo-tree-id24665 . -1379) (undo-tree-id24666 . -1379) (undo-tree-id24667 . -1379) (undo-tree-id24668 . -1379) (undo-tree-id24669 . -1379) (undo-tree-id24670 . -1379) (undo-tree-id24671 . -1379) (undo-tree-id24672 . -1379) (undo-tree-id24673 . -1379) (undo-tree-id24674 . -1379) (undo-tree-id24675 . -1379) (undo-tree-id24676 . -1379) (undo-tree-id24677 . -1379) (undo-tree-id24678 . -1379) (undo-tree-id24679 . -1379) (undo-tree-id24680 . -1379) (undo-tree-id24681 . -1379) (undo-tree-id24682 . -1379) (undo-tree-id24683 . -1379) (undo-tree-id24684 . -1379) (undo-tree-id24685 . -1379) (undo-tree-id24686 . -1379) (undo-tree-id24687 . -1379) (undo-tree-id24688 . -1379) (undo-tree-id24689 . -1379) (undo-tree-id24690 . -1379) (undo-tree-id24691 . -1379) (undo-tree-id24692 . -1379) (undo-tree-id24693 . -1379) (undo-tree-id24694 . -1379) (undo-tree-id24695 . -1379) (undo-tree-id24696 . -1379) (undo-tree-id24697 . -1379) (undo-tree-id24698 . -1379) (undo-tree-id24699 . -1379) (undo-tree-id24700 . -1379) (undo-tree-id24701 . -1379) (undo-tree-id24702 . -1379) (undo-tree-id24703 . -1379) (undo-tree-id24704 . -1379) (undo-tree-id24705 . -1379) (undo-tree-id24706 . -1379) (undo-tree-id24707 . -1379) (undo-tree-id24708 . -1379) (undo-tree-id24709 . -1379) (undo-tree-id24710 . -1379) (undo-tree-id24711 . -1379) (undo-tree-id24712 . -1379) (undo-tree-id24713 . -1379) (undo-tree-id24714 . -1379) (undo-tree-id24715 . -1379) (undo-tree-id24716 . -1379) (undo-tree-id24717 . -1379) (undo-tree-id24718 . -1379) (undo-tree-id24719 . -1379) (undo-tree-id24720 . -1379) (undo-tree-id24721 . -1379) (undo-tree-id24722 . -1379) (undo-tree-id24723 . -1379) (undo-tree-id24724 . -1379) (undo-tree-id24725 . -1379) (undo-tree-id24726 . -1379) (undo-tree-id24727 . -1379) (undo-tree-id24728 . -1379) (undo-tree-id24729 . -1379) (undo-tree-id24730 . -1379) (undo-tree-id24731 . -1379) (undo-tree-id24732 . -1379) (undo-tree-id24733 . -1379) (undo-tree-id24734 . -1379) (undo-tree-id24735 . -1379) (undo-tree-id24736 . -1379) (undo-tree-id24737 . -1379) (undo-tree-id24738 . -1379) (undo-tree-id24739 . -1379) (undo-tree-id24740 . -1379) (undo-tree-id24741 . -1379) (undo-tree-id24742 . -1379) (undo-tree-id24743 . -1379) (undo-tree-id24744 . -1379) (undo-tree-id24745 . -1379) (undo-tree-id24746 . -1379) (undo-tree-id24747 . -1379) (undo-tree-id24748 . -1379) (undo-tree-id24749 . -1379) (undo-tree-id24750 . -1379) (undo-tree-id24751 . -1379) (undo-tree-id24752 . -1379) (undo-tree-id24753 . -1379) (undo-tree-id24754 . -1379) (undo-tree-id24755 . -1379) (undo-tree-id24756 . -1379) (undo-tree-id24757 . -1379) (undo-tree-id24758 . -1379) (undo-tree-id24759 . -1379) (undo-tree-id24760 . -1379) (undo-tree-id24761 . -1379) (undo-tree-id24762 . -1379) (undo-tree-id24763 . -1379) (undo-tree-id24764 . -1379) (undo-tree-id24765 . -1379) (undo-tree-id24766 . -1379) (undo-tree-id24767 . -1379) (undo-tree-id24768 . -1379) (undo-tree-id24769 . -1379) (undo-tree-id24770 . -1379) (undo-tree-id24771 . -1379) (undo-tree-id24772 . -1379) (undo-tree-id24773 . -1379) (undo-tree-id24774 . -1379) (undo-tree-id24775 . -1379) (undo-tree-id24776 . -1379) (undo-tree-id24777 . -1379) (undo-tree-id24778 . -1379) (undo-tree-id24779 . -1379) (undo-tree-id24780 . -1379) (undo-tree-id24781 . -1379) (undo-tree-id24782 . -1379) (undo-tree-id24783 . -1379) (undo-tree-id24784 . -1379) (undo-tree-id24785 . -1379) (undo-tree-id24786 . -1379) (undo-tree-id24787 . -1379) (undo-tree-id24788 . -1379) (undo-tree-id24789 . -1379) (undo-tree-id24790 . -1379) (undo-tree-id24791 . -1379) (undo-tree-id24792 . -1379) (undo-tree-id24793 . -1379) (undo-tree-id24794 . -1379) (undo-tree-id24795 . -1379) (undo-tree-id24796 . -1379) (undo-tree-id24797 . -1379) (undo-tree-id24798 . -1379) (undo-tree-id24799 . -1379) (undo-tree-id24800 . -1379) (undo-tree-id24801 . -1379) (undo-tree-id24802 . -1379) (undo-tree-id24803 . -1379) (undo-tree-id24804 . -1379) (undo-tree-id24805 . -1379) (undo-tree-id24806 . -1379) (undo-tree-id24807 . -1379) (undo-tree-id24808 . -1379) (undo-tree-id24809 . -1379) (undo-tree-id24810 . -1379) (undo-tree-id24811 . -1379) (undo-tree-id24812 . -1379) (undo-tree-id24813 . -1379) (undo-tree-id24814 . -1379) (undo-tree-id24815 . -1379) (undo-tree-id24816 . -1379) (undo-tree-id24817 . -1379) (undo-tree-id24818 . -1379) (undo-tree-id24819 . -1379) (undo-tree-id24820 . -1379) (undo-tree-id24821 . -1379) (undo-tree-id24822 . -1379) (undo-tree-id24823 . -1379) (undo-tree-id24824 . -1379) (undo-tree-id24825 . -1379) (undo-tree-id24826 . -1379) (undo-tree-id24827 . -1379) (undo-tree-id24828 . -1379) (undo-tree-id24829 . -1379) (undo-tree-id24830 . -1379) (undo-tree-id24831 . -1379) (undo-tree-id24832 . -1379) (undo-tree-id24833 . -1379) (undo-tree-id24834 . -1379) (undo-tree-id24835 . -1379) (undo-tree-id24836 . -1379) (undo-tree-id24837 . -1379) (undo-tree-id24838 . -1379) (undo-tree-id24839 . -1379) (undo-tree-id24840 . -1379) (undo-tree-id24841 . -1379) (undo-tree-id24842 . -1379) (undo-tree-id24843 . -1379) (undo-tree-id24844 . -1379) (undo-tree-id24845 . -1379) (undo-tree-id24846 . -1379) (undo-tree-id24847 . -1379) (undo-tree-id24848 . -1379) (undo-tree-id24849 . -1379) (undo-tree-id24850 . -1379) (undo-tree-id24851 . -1379) (undo-tree-id24852 . -1379) (undo-tree-id24853 . -1379) (undo-tree-id24854 . -1379) (undo-tree-id24855 . -1379) (undo-tree-id24856 . -1379) (undo-tree-id24857 . -1379) (undo-tree-id24858 . -1379) (undo-tree-id24859 . -1379) (undo-tree-id24860 . -1379) (undo-tree-id24861 . -1379) (undo-tree-id24862 . -1379) (undo-tree-id24863 . -1379) (undo-tree-id24864 . -1379) (undo-tree-id24865 . -1379) (undo-tree-id24866 . -1379) (undo-tree-id24867 . -1379) (undo-tree-id24868 . -1379) (undo-tree-id24869 . -1379) (undo-tree-id24870 . -1379) (undo-tree-id24871 . -1379) (undo-tree-id24872 . -1379) (undo-tree-id24873 . -1379) (undo-tree-id24874 . -1379) (undo-tree-id24875 . -1379) (undo-tree-id24876 . -1379) (undo-tree-id24877 . -1379) (undo-tree-id24878 . -1379) (undo-tree-id24879 . -1379) (undo-tree-id24880 . -1379) (undo-tree-id24881 . -1379) (undo-tree-id24882 . -1379) (undo-tree-id24883 . -1379) (undo-tree-id24884 . -1379) (undo-tree-id24885 . -1379) (undo-tree-id24886 . -1379) (undo-tree-id24887 . -1379) (undo-tree-id24888 . -1379) (undo-tree-id24889 . -1379) (undo-tree-id24890 . -1379) (undo-tree-id24891 . -1379) (undo-tree-id24892 . -1379) (undo-tree-id24893 . -1379) (undo-tree-id24894 . -1379) (undo-tree-id24895 . -1379) (undo-tree-id24896 . -1379) (undo-tree-id24897 . -1379) (undo-tree-id24898 . -1379) (undo-tree-id24899 . -1379) (undo-tree-id24900 . -1379) (undo-tree-id24901 . -1379) (undo-tree-id24902 . -1379) (undo-tree-id24903 . -1379) (undo-tree-id24904 . -1379) (undo-tree-id24905 . -1379) (undo-tree-id24906 . -1379) (undo-tree-id24907 . -1379) (undo-tree-id24908 . -1379) (undo-tree-id24909 . -1379) (undo-tree-id24910 . -1379) (undo-tree-id24911 . -1379) (undo-tree-id24912 . -1379) (undo-tree-id24913 . -1379) (undo-tree-id24914 . -1379) (undo-tree-id24915 . -1379) (undo-tree-id24916 . -1379) (undo-tree-id24917 . -1379) (undo-tree-id24918 . -1379) (undo-tree-id24919 . -1379) (undo-tree-id24920 . -1379) (undo-tree-id24921 . -1379) (undo-tree-id24922 . -1379) (undo-tree-id24923 . -1379) (undo-tree-id24924 . -1379) (undo-tree-id24925 . -1379) (undo-tree-id24926 . -1379) (undo-tree-id24927 . -1379) (undo-tree-id24928 . -1379) (undo-tree-id24929 . -1379) (undo-tree-id24930 . -1379) (undo-tree-id24931 . -1379) (undo-tree-id24932 . -1379) (undo-tree-id24933 . -1379) (undo-tree-id24934 . -1379) (undo-tree-id24935 . -1379) (undo-tree-id24936 . -1379) (undo-tree-id24937 . -1379) (undo-tree-id24938 . -1379) (undo-tree-id24939 . -1379) (undo-tree-id24940 . -1379) (undo-tree-id24941 . -1379) (undo-tree-id24942 . -1379) (undo-tree-id24943 . -1379) (undo-tree-id24944 . -1379) (undo-tree-id24945 . -1379) (undo-tree-id24946 . -1379) (undo-tree-id24947 . -1379) (undo-tree-id24948 . -1379) (undo-tree-id24949 . -1379) (undo-tree-id24950 . -1379) (undo-tree-id24951 . -1379) (undo-tree-id24952 . -1379) (undo-tree-id24953 . -1379) (undo-tree-id24954 . -1379) (undo-tree-id24955 . -1379) (undo-tree-id24956 . -1379) (undo-tree-id24957 . -1379) (undo-tree-id24958 . -1379) (undo-tree-id24959 . -1379) (undo-tree-id24960 . -1379) (undo-tree-id24961 . -1379) (undo-tree-id24962 . -1379) (undo-tree-id24963 . -1379) (undo-tree-id24964 . -1379) (undo-tree-id24965 . -1379) (undo-tree-id24966 . -1379) (undo-tree-id24967 . -1379) (undo-tree-id24968 . -1379) (undo-tree-id24969 . -1379) (undo-tree-id24970 . -1379) (undo-tree-id24971 . -1379) (undo-tree-id24972 . -1379) (undo-tree-id24973 . -1379) (undo-tree-id24974 . -1379) (undo-tree-id24975 . -1379) (undo-tree-id24976 . -1379) (undo-tree-id24977 . -1379) (undo-tree-id24978 . -1379) (undo-tree-id24979 . -1379) (undo-tree-id24980 . -1379) (undo-tree-id24981 . -1379) (undo-tree-id24982 . -1379) (undo-tree-id24983 . -1379) (undo-tree-id24984 . -1379) (undo-tree-id24985 . -1379) (undo-tree-id24986 . -1379) (undo-tree-id24987 . -1379) (undo-tree-id24988 . -1379) (undo-tree-id24989 . -1379) (undo-tree-id24990 . -1379) (undo-tree-id24991 . -1379) (undo-tree-id24992 . -1379) (undo-tree-id24993 . -1379) (undo-tree-id24994 . -1379) (undo-tree-id24995 . -1379) (undo-tree-id24996 . -1379) (undo-tree-id24997 . -1379) (undo-tree-id24998 . -1379) (undo-tree-id24999 . -1379) (undo-tree-id25000 . -1379) (undo-tree-id25001 . -1379) (undo-tree-id25002 . -1379) (undo-tree-id25003 . -1379) (undo-tree-id25004 . -1379) (undo-tree-id25005 . -1379) (undo-tree-id25006 . -1379) (undo-tree-id25007 . -1379) (undo-tree-id25008 . -1379) (undo-tree-id25009 . -1379) (undo-tree-id25010 . -1379) (undo-tree-id25011 . -1379) (undo-tree-id25012 . -1379) (undo-tree-id25013 . -1379) (undo-tree-id25014 . -1379) (undo-tree-id25015 . -1379) (undo-tree-id25016 . -1379) (undo-tree-id25017 . -1379) (undo-tree-id25018 . -1379) (undo-tree-id25019 . -1379) (undo-tree-id25020 . -1379) (undo-tree-id25021 . -1379) (undo-tree-id25022 . -1379) (undo-tree-id25023 . -1379) (undo-tree-id25024 . -1379) (undo-tree-id25025 . -1379) (undo-tree-id25026 . -1379) (undo-tree-id25027 . -1379) (undo-tree-id25028 . -1379) (undo-tree-id25029 . -1379) (undo-tree-id25030 . -1379) (undo-tree-id25031 . -1379) (undo-tree-id25032 . -1379) (undo-tree-id25033 . -1379) (undo-tree-id25034 . -1379) (undo-tree-id25035 . -1379) (undo-tree-id25036 . -1379) (undo-tree-id25037 . -1379) (undo-tree-id25038 . -1379) (undo-tree-id25039 . -1379) (undo-tree-id25040 . -1379) (undo-tree-id25041 . -1379) (undo-tree-id25042 . -1379) (undo-tree-id25043 . -1379) (undo-tree-id25044 . -1379) (undo-tree-id25045 . -1379) (undo-tree-id25046 . -1379) (undo-tree-id25047 . -1379) (undo-tree-id25048 . -1379) (undo-tree-id25049 . -1379) (undo-tree-id25050 . -1379) (undo-tree-id25051 . -1379) (undo-tree-id25052 . -1379) (undo-tree-id25053 . -1379) (undo-tree-id25054 . -1379) (undo-tree-id25055 . -1379) (undo-tree-id25056 . -1379) (undo-tree-id25057 . -1379) (undo-tree-id25058 . -1379) (undo-tree-id25059 . -1379) (undo-tree-id25060 . -1379) (undo-tree-id25061 . -1379) (undo-tree-id25062 . -1379) (undo-tree-id25063 . -1379) (undo-tree-id25064 . -1379) (undo-tree-id25065 . -1379) (undo-tree-id25066 . -1379) (undo-tree-id25067 . -1379) (undo-tree-id25068 . -1379) (undo-tree-id25069 . -1379) (undo-tree-id25070 . -1379) (undo-tree-id25071 . -1379) (undo-tree-id25072 . -1379) (undo-tree-id25073 . -1379) (undo-tree-id25074 . -1379) (undo-tree-id25075 . -1379) (undo-tree-id25076 . -1379) (undo-tree-id25077 . -1379) (undo-tree-id25078 . -1379) (undo-tree-id25079 . -1379) (undo-tree-id25080 . -1379) (undo-tree-id25081 . -1379) (undo-tree-id25082 . -1379) (undo-tree-id25083 . -1379) (undo-tree-id25084 . -1379) (undo-tree-id25085 . -1379) (undo-tree-id25086 . -1379) (undo-tree-id25087 . -1379) (undo-tree-id25088 . -1379) (undo-tree-id25089 . -1379) (undo-tree-id25090 . -1379) (undo-tree-id25091 . -1379) (undo-tree-id25092 . -1379) (undo-tree-id25093 . -1379) (undo-tree-id25094 . -1379) (undo-tree-id25095 . -1379) (undo-tree-id25096 . -1379) (undo-tree-id25097 . -1379) (undo-tree-id25098 . -1379) (undo-tree-id25099 . -1379) (undo-tree-id25100 . -1379) (undo-tree-id25101 . -1379) (undo-tree-id25102 . -1379) (undo-tree-id25103 . -1379) (undo-tree-id25104 . -1379) (undo-tree-id25105 . -1379) (undo-tree-id25106 . -1379) (undo-tree-id25107 . -1379) (undo-tree-id25108 . -1379) (undo-tree-id25109 . -1379) (undo-tree-id25110 . -1379) (undo-tree-id25111 . -1379) (undo-tree-id25112 . -1379) (undo-tree-id25113 . -1379) (undo-tree-id25114 . -1379) (undo-tree-id25115 . -1379) (undo-tree-id25116 . -1379) (undo-tree-id25117 . -1379) (undo-tree-id25118 . -1379) (undo-tree-id25119 . -1379) (undo-tree-id25120 . -1379) (undo-tree-id25121 . -1379) (undo-tree-id25122 . -1379) (undo-tree-id25123 . -1379) (undo-tree-id25124 . -1379) (undo-tree-id25125 . -1379) (undo-tree-id25126 . -1379) (undo-tree-id25127 . -1379) (undo-tree-id25128 . -1379) (undo-tree-id25129 . -1379) (undo-tree-id25130 . -1379) (undo-tree-id25131 . -1379) (undo-tree-id25132 . -1379) (undo-tree-id25133 . -1379) (undo-tree-id25134 . -1379) (undo-tree-id25135 . -1379) (undo-tree-id25136 . -1379) (undo-tree-id25137 . -1379) (undo-tree-id25138 . -1379) (undo-tree-id25139 . -1379) (undo-tree-id25140 . -1379) (undo-tree-id25141 . -1379) (undo-tree-id25142 . -1379) (undo-tree-id25143 . -1379) (undo-tree-id25144 . -1379) (undo-tree-id25145 . -1379) (undo-tree-id25146 . -1379) (undo-tree-id25147 . -1379) (undo-tree-id25148 . -1379) (undo-tree-id25149 . -1379) (undo-tree-id25150 . -1379) (undo-tree-id25151 . -1379) (undo-tree-id25152 . -1379) (undo-tree-id25153 . -1379) (undo-tree-id25154 . -1379) (undo-tree-id25155 . -1379) (undo-tree-id25156 . -1379) (undo-tree-id25157 . -1379) (undo-tree-id25158 . -1379) (undo-tree-id25159 . -1379) (undo-tree-id25160 . -1379) (undo-tree-id25161 . -1379) (undo-tree-id25162 . -1379) (undo-tree-id25163 . -1379) (undo-tree-id25164 . -1379) (undo-tree-id25165 . -1379) (undo-tree-id25166 . -1379) (undo-tree-id25167 . -1379) (undo-tree-id25168 . -1379) (undo-tree-id25169 . -1379) (undo-tree-id25170 . -1379) (undo-tree-id25171 . -1379) (undo-tree-id25172 . -1379) (undo-tree-id25173 . -1379) (undo-tree-id25174 . -1379) (undo-tree-id25175 . -1379) (undo-tree-id25176 . -1379) (undo-tree-id25177 . -1379) (undo-tree-id25178 . -1379) (undo-tree-id25179 . -1379) (undo-tree-id25180 . -1379) (undo-tree-id25181 . -1379) (undo-tree-id25182 . -1379) (undo-tree-id25183 . -1379) (undo-tree-id25184 . -1379) (undo-tree-id25185 . -1379) (undo-tree-id25186 . -1379) (undo-tree-id25187 . -1379) (undo-tree-id25188 . -1379) (undo-tree-id25189 . -1379) (undo-tree-id25190 . -1379) (undo-tree-id25191 . -1379) (undo-tree-id25192 . -1379) (undo-tree-id25193 . -1379) (undo-tree-id25194 . -1379) (undo-tree-id25195 . -1379) (undo-tree-id25196 . -1379) (undo-tree-id25197 . -1379) (undo-tree-id25198 . -1379) (undo-tree-id25199 . -1379) (undo-tree-id25200 . -1379) (undo-tree-id25201 . -1379) (undo-tree-id25202 . -1379) (undo-tree-id25203 . -1379) (undo-tree-id25204 . -1379) (undo-tree-id25205 . -1379) (undo-tree-id25206 . -1379) (undo-tree-id25207 . -1379) (undo-tree-id25208 . -1379) (undo-tree-id25209 . -1379) (undo-tree-id25210 . -1379) (undo-tree-id25211 . -1379) (undo-tree-id25212 . -1379) (undo-tree-id25213 . -1379) (undo-tree-id25214 . -1379) (undo-tree-id25215 . -1379) (undo-tree-id25216 . -1379) (undo-tree-id25217 . -1379) (undo-tree-id25218 . -1379) (undo-tree-id25219 . -1379) (undo-tree-id25220 . -1379) (undo-tree-id25221 . -1379) (undo-tree-id25222 . -1379) (undo-tree-id25223 . -1379) (undo-tree-id25224 . -1379) (undo-tree-id25225 . -1379) (undo-tree-id25226 . -1379) (undo-tree-id25227 . -1379) (undo-tree-id25228 . -1379) (undo-tree-id25229 . -1379) (undo-tree-id25230 . -1379) (undo-tree-id25231 . -1379) (undo-tree-id25232 . -1379) (undo-tree-id25233 . -1379) (undo-tree-id25234 . -1379) (undo-tree-id25235 . -1379) (undo-tree-id25236 . -1379) (undo-tree-id25237 . -1379) (undo-tree-id25238 . -1379) (undo-tree-id25239 . -1379) (undo-tree-id25240 . -1379) (undo-tree-id25241 . -1379) (undo-tree-id25242 . -1379) (undo-tree-id25243 . -1379) (undo-tree-id25244 . -1379) (undo-tree-id25245 . -1379) (undo-tree-id25246 . -1379) (undo-tree-id25247 . -1379) (undo-tree-id25248 . -1379) (undo-tree-id25249 . -1379) (undo-tree-id25250 . -1379) (undo-tree-id25251 . -1379) (undo-tree-id25252 . -1379) (undo-tree-id25253 . -1379) (undo-tree-id25254 . -1379) (undo-tree-id25255 . -1379) (undo-tree-id25256 . -1379) (undo-tree-id25257 . -1379) (undo-tree-id25258 . -1379) (undo-tree-id25259 . -1379) (undo-tree-id25260 . -1379) (undo-tree-id25261 . -1379) (undo-tree-id25262 . -1379) (undo-tree-id25263 . -1379) (undo-tree-id25264 . -1379) (undo-tree-id25265 . -1379) (undo-tree-id25266 . -1379) (undo-tree-id25267 . -1379) (undo-tree-id25268 . -1379) (undo-tree-id25269 . -1379) (undo-tree-id25270 . -1379) (undo-tree-id25271 . -1379) (undo-tree-id25272 . -1379) (undo-tree-id25273 . -1379) (undo-tree-id25274 . -1379) (undo-tree-id25275 . -1379) (undo-tree-id25276 . -1379) (undo-tree-id25277 . -1379) (undo-tree-id25278 . -1379) (undo-tree-id25279 . -1379) (undo-tree-id25280 . -1379) (undo-tree-id25281 . -1379) (undo-tree-id25282 . -1379) (undo-tree-id25283 . -1379) (undo-tree-id25284 . -1379) (undo-tree-id25285 . -1379) (undo-tree-id25286 . -1379) (undo-tree-id25287 . -1379) (undo-tree-id25288 . -1379) (undo-tree-id25289 . -1379) (undo-tree-id25290 . -1379) (undo-tree-id25291 . -1379) (undo-tree-id25292 . -1379) (undo-tree-id25293 . -1379) (undo-tree-id25294 . -1379) (undo-tree-id25295 . -1379) (undo-tree-id25296 . -1379) (undo-tree-id25297 . -1379) (undo-tree-id25298 . -1379) (undo-tree-id25299 . -1379) (undo-tree-id25300 . -1379) (undo-tree-id25301 . -1379) (undo-tree-id25302 . -1379) (undo-tree-id25303 . -1379) (undo-tree-id25304 . -1379) (undo-tree-id25305 . -1379) (undo-tree-id25306 . -1379) (undo-tree-id25307 . -1379) (undo-tree-id25308 . -1379) (undo-tree-id25309 . -1379) (undo-tree-id25310 . -1379) (undo-tree-id25311 . -1379) (undo-tree-id25312 . -1379) (undo-tree-id25313 . -1379) (undo-tree-id25314 . -1379) (undo-tree-id25315 . -1379) (undo-tree-id25316 . -1379) (undo-tree-id25317 . -1379) (undo-tree-id25318 . -1379) (undo-tree-id25319 . -1379) (undo-tree-id25320 . -1379) (undo-tree-id25321 . -1379) (undo-tree-id25322 . -1379) (undo-tree-id25323 . -1379) (undo-tree-id25324 . -1379) (undo-tree-id25325 . -1379) (undo-tree-id25326 . -1379) (undo-tree-id25327 . -1379) (undo-tree-id25328 . -1379) (undo-tree-id25329 . -1379) (undo-tree-id25330 . -1379) (undo-tree-id25331 . -1379) (undo-tree-id25332 . -1379) (undo-tree-id25333 . -1379) (undo-tree-id25334 . -1379) (undo-tree-id25335 . -1379) (undo-tree-id25336 . -1379) (undo-tree-id25337 . -1379) (undo-tree-id25338 . -1379) (undo-tree-id25339 . -1379) (undo-tree-id25340 . -1379) (undo-tree-id25341 . -1379) (undo-tree-id25342 . -1379) (undo-tree-id25343 . -1379) (undo-tree-id25344 . -1379) (undo-tree-id25345 . -1379) (undo-tree-id25346 . -1379) (undo-tree-id25347 . -1379) (undo-tree-id25348 . -1379) (undo-tree-id25349 . -1379) (undo-tree-id25350 . -1379) (undo-tree-id25351 . -1379) (undo-tree-id25352 . -1379) (undo-tree-id25353 . -1379) (undo-tree-id25354 . -1379) (undo-tree-id25355 . -1379) (undo-tree-id25356 . -1379) (undo-tree-id25357 . -1379) (undo-tree-id25358 . -1379) (undo-tree-id25359 . -1379) (undo-tree-id25360 . -1379) (undo-tree-id25361 . -1379) (undo-tree-id25362 . -1379) (undo-tree-id25363 . -1379) (undo-tree-id25364 . -1379) (undo-tree-id25365 . -1379) (undo-tree-id25366 . -1379) (undo-tree-id25367 . -1379) (undo-tree-id25368 . -1379) (undo-tree-id25369 . -1379) (undo-tree-id25370 . -1379) (undo-tree-id25371 . -1379) (undo-tree-id25372 . -1379) (undo-tree-id25373 . -1379) (undo-tree-id25374 . -1379) (undo-tree-id25375 . -1379) (undo-tree-id25376 . -1379) (undo-tree-id25377 . -1379) (undo-tree-id25378 . -1379) (undo-tree-id25379 . -1379) (undo-tree-id25380 . -1379) (undo-tree-id25381 . -1379) (undo-tree-id25382 . -1379) (undo-tree-id25383 . -1379) (undo-tree-id25384 . -1379) (undo-tree-id25385 . -1379) (undo-tree-id25386 . -1379) (undo-tree-id25387 . -1379) (undo-tree-id25388 . -1379) (undo-tree-id25389 . -1379) (undo-tree-id25390 . -1379) (undo-tree-id25391 . -1379) (undo-tree-id25392 . -1379) (undo-tree-id25393 . -1379) (undo-tree-id25394 . -1379) (undo-tree-id25395 . -1379) (undo-tree-id25396 . -1379) (undo-tree-id25397 . -1379) (undo-tree-id25398 . -1379) (undo-tree-id25399 . -1379) (undo-tree-id25400 . -1379) (undo-tree-id25401 . -1379) (undo-tree-id25402 . -1379) (undo-tree-id25403 . -1379) (undo-tree-id25404 . -1379) (undo-tree-id25405 . -1379) (undo-tree-id25406 . -1379) (undo-tree-id25407 . -1379) (undo-tree-id25408 . -1379) (undo-tree-id25409 . -1379) (undo-tree-id25410 . -1379) (undo-tree-id25411 . -1379) (undo-tree-id25412 . -1379) (undo-tree-id25413 . -1379) (undo-tree-id25414 . -1379) (undo-tree-id25415 . -1379) (undo-tree-id25416 . -1379) (undo-tree-id25417 . -1379) (undo-tree-id25418 . -1379) (undo-tree-id25419 . -1379) (undo-tree-id25420 . -1379) (undo-tree-id25421 . -1379) (undo-tree-id25422 . -1379) (undo-tree-id25423 . -1379) (undo-tree-id25424 . -1379) (undo-tree-id25425 . -1379) (undo-tree-id25426 . -1379) (undo-tree-id25427 . -1379) (undo-tree-id25428 . -1379) (undo-tree-id25429 . -1379) (undo-tree-id25430 . -1379) (undo-tree-id25431 . -1379) (undo-tree-id25432 . -1379) (undo-tree-id25433 . -1379) (undo-tree-id25434 . -1379) (undo-tree-id25435 . -1379) (undo-tree-id25436 . -1379) (undo-tree-id25437 . -1379) (undo-tree-id25438 . -1379) (undo-tree-id25439 . -1379) (undo-tree-id25440 . -1379) (undo-tree-id25441 . -1379) (undo-tree-id25442 . -1379) (undo-tree-id25443 . -1379) (undo-tree-id25444 . -1379) (undo-tree-id25445 . -1379) (undo-tree-id25446 . -1379) (undo-tree-id25447 . -1379) (undo-tree-id25448 . -1379) (undo-tree-id25449 . -1379) (undo-tree-id25450 . -1379) (undo-tree-id25451 . -1379) (undo-tree-id25452 . -1379) (undo-tree-id25453 . -1379) (undo-tree-id25454 . -1379) (undo-tree-id25455 . -1379) (undo-tree-id25456 . -1379) (undo-tree-id25457 . -1379) (undo-tree-id25458 . -1379) (undo-tree-id25459 . -1379) (undo-tree-id25460 . -1379) (undo-tree-id25461 . -1379) (undo-tree-id25462 . -1379) (undo-tree-id25463 . -1379) (undo-tree-id25464 . -1379) (undo-tree-id25465 . -1379) (undo-tree-id25466 . -1379) (undo-tree-id25467 . -1379) (undo-tree-id25468 . -1379) (undo-tree-id25469 . -1379) (undo-tree-id25470 . -1379) (undo-tree-id25471 . -1379) (undo-tree-id25472 . -1379) (undo-tree-id25473 . -1379) (undo-tree-id25474 . -1379) (undo-tree-id25475 . -1379) (undo-tree-id25476 . -1379) (undo-tree-id25477 . -1379) (undo-tree-id25478 . -1379) (undo-tree-id25479 . -1379) (undo-tree-id25480 . -1379) (undo-tree-id25481 . -1379) (undo-tree-id25482 . -1379) (undo-tree-id25483 . -1379) (undo-tree-id25484 . -1379) (undo-tree-id25485 . -1379) (undo-tree-id25486 . -1379) (undo-tree-id25487 . -1379) (undo-tree-id25488 . -1379) (undo-tree-id25489 . -1379) (undo-tree-id25490 . -1379) (undo-tree-id25491 . -1379) (undo-tree-id25492 . -1379) (undo-tree-id25493 . -1379) (undo-tree-id25494 . -1379) (undo-tree-id25495 . -1379) (undo-tree-id25496 . -1379) (undo-tree-id25497 . -1379) (undo-tree-id25498 . -1379) (undo-tree-id25499 . -1379) (undo-tree-id25500 . -1379) (undo-tree-id25501 . -1379) (undo-tree-id25502 . -1379) (undo-tree-id25503 . -1379) (undo-tree-id25504 . -1379) (undo-tree-id25505 . -1379) (undo-tree-id25506 . -1379) (undo-tree-id25507 . -1379) (undo-tree-id25508 . -1379) (undo-tree-id25509 . -1379) (undo-tree-id25510 . -1379) (undo-tree-id25511 . -1379) (undo-tree-id25512 . -1379) (undo-tree-id25513 . -1379) (undo-tree-id25514 . -1379) (undo-tree-id25515 . -1379) (undo-tree-id25516 . -1379) (undo-tree-id25517 . -1379) (undo-tree-id25518 . -1379) (undo-tree-id25519 . -1379) (undo-tree-id25520 . -1379) (undo-tree-id25521 . -1379) (undo-tree-id25522 . -1379) (undo-tree-id25523 . -1379) (undo-tree-id25524 . -1379) (undo-tree-id25525 . -1379) (undo-tree-id25526 . -1379) (undo-tree-id25527 . -1379) (undo-tree-id25528 . -1379) (undo-tree-id25529 . -1379) (undo-tree-id25530 . -1379) (undo-tree-id25531 . -1379) (undo-tree-id25532 . -1379) (undo-tree-id25533 . -1379) (undo-tree-id25534 . -1379) (undo-tree-id25535 . -1379) (undo-tree-id25536 . -1379) (undo-tree-id25537 . -1379) (undo-tree-id25538 . -1379) (undo-tree-id25539 . -1379) (undo-tree-id25540 . -1379) (undo-tree-id25541 . -1379) (undo-tree-id25542 . -1379) (undo-tree-id25543 . -1379) (undo-tree-id25544 . -1379) (undo-tree-id25545 . -1379) (undo-tree-id25546 . -1379) (undo-tree-id25547 . -1379) (undo-tree-id25548 . -1379) (undo-tree-id25549 . -1379) (undo-tree-id25550 . -1379) (undo-tree-id25551 . -1379) (undo-tree-id25552 . -1379) (undo-tree-id25553 . -1379) (undo-tree-id25554 . -1379) (undo-tree-id25555 . -1379) (undo-tree-id25556 . -1379) (undo-tree-id25557 . -1379) (undo-tree-id25558 . -1379) (undo-tree-id25559 . -1379) (undo-tree-id25560 . -1379) (undo-tree-id25561 . -1379) (undo-tree-id25562 . -1379) (undo-tree-id25563 . -1379) (undo-tree-id25564 . -1379) (undo-tree-id25565 . -1379) (undo-tree-id25566 . -1379) (undo-tree-id25567 . -1379) (undo-tree-id25568 . -1379) (undo-tree-id25569 . -1379) (undo-tree-id25570 . -1379) (undo-tree-id25571 . -1379) (undo-tree-id25572 . -1379) (undo-tree-id25573 . -1379) (undo-tree-id25574 . -1379) (undo-tree-id25575 . -1379) (undo-tree-id25576 . -1379) (undo-tree-id25577 . -1379) (undo-tree-id25578 . -1379) (undo-tree-id25579 . -1379) (undo-tree-id25580 . -1379) (undo-tree-id25581 . -1379) (undo-tree-id25582 . -1379) (undo-tree-id25583 . -1379) (undo-tree-id25584 . -1379) (undo-tree-id25585 . -1379) (undo-tree-id25586 . -1379) (undo-tree-id25587 . -1379) (undo-tree-id25588 . -1379) (undo-tree-id25589 . -1379) (undo-tree-id25590 . -1379) (undo-tree-id25591 . -1379) (undo-tree-id25592 . -1379) (undo-tree-id25593 . -1379) (undo-tree-id25594 . -1379) (undo-tree-id25595 . -1379) (undo-tree-id25596 . -1379) (undo-tree-id25597 . -1379) (undo-tree-id25598 . -1379) (undo-tree-id25599 . -1379) (undo-tree-id25600 . -1379) (undo-tree-id25601 . -1379) (undo-tree-id25602 . -1379) (undo-tree-id25603 . -1379) (undo-tree-id25604 . -1379) (undo-tree-id25605 . -1379) (undo-tree-id25606 . -1379) (undo-tree-id25607 . -1379) (undo-tree-id25608 . -1379) (undo-tree-id25609 . -1379) (undo-tree-id25610 . -1379) (undo-tree-id25611 . -1379) (undo-tree-id25612 . -1379) (undo-tree-id25613 . -1379) (undo-tree-id25614 . -1379) (undo-tree-id25615 . -1379) (undo-tree-id25616 . -1379) (undo-tree-id25617 . -1379) (undo-tree-id25618 . -1379) (undo-tree-id25619 . -1379) (undo-tree-id25620 . -1379) (undo-tree-id25621 . -1379) (undo-tree-id25622 . -1379) (undo-tree-id25623 . -1379) (undo-tree-id25624 . -1379) (undo-tree-id25625 . -1379) (undo-tree-id25626 . -1379) (undo-tree-id25627 . -1379) (undo-tree-id25628 . -1379) (undo-tree-id25629 . -1379) (undo-tree-id25630 . -1379) (undo-tree-id25631 . -1379) (undo-tree-id25632 . -1379) (undo-tree-id25633 . -1379) (undo-tree-id25634 . -1379) (undo-tree-id25635 . -1379) (undo-tree-id25636 . -1379) (undo-tree-id25637 . -1379) (undo-tree-id25638 . -1379) (undo-tree-id25639 . -1379) (undo-tree-id25640 . -1379) (undo-tree-id25641 . -1379) (undo-tree-id25642 . -1379) (undo-tree-id25643 . -1379) (undo-tree-id25644 . -1379) (undo-tree-id25645 . -1379) (undo-tree-id25646 . -1379) (undo-tree-id25647 . -1379) (undo-tree-id25648 . -1379) (undo-tree-id25649 . -1379) (undo-tree-id25650 . -1379) (undo-tree-id25651 . -1379) (undo-tree-id25652 . -1379) (undo-tree-id25653 . -1379) (undo-tree-id25654 . -1379) (undo-tree-id25655 . -1379) (undo-tree-id25656 . -1379) (undo-tree-id25657 . -1379) (undo-tree-id25658 . -1379) (undo-tree-id25659 . -1379) (undo-tree-id25660 . -1379) (undo-tree-id25661 . -1379) (undo-tree-id25662 . -1379) (undo-tree-id25663 . -1379) (undo-tree-id25664 . -1379) (undo-tree-id25665 . -1379) (undo-tree-id25666 . -1379) (undo-tree-id25667 . -1379) (undo-tree-id25668 . -1379) (undo-tree-id25669 . -1379) (undo-tree-id25670 . -1379) (undo-tree-id25671 . -1379) (undo-tree-id25672 . -1379) (undo-tree-id25673 . -1379) (undo-tree-id25674 . -1379) (undo-tree-id25675 . -1379) (undo-tree-id25676 . -1379) (undo-tree-id25677 . -1379) (undo-tree-id25678 . -1379) (undo-tree-id25679 . -1379) (undo-tree-id25680 . -1379) (undo-tree-id25681 . -1379) (undo-tree-id25682 . -1379) (undo-tree-id25683 . -1379) (undo-tree-id25684 . -1379) (undo-tree-id25685 . -1379) (undo-tree-id25686 . -1379) (undo-tree-id25687 . -1379) (undo-tree-id25688 . -1379) (undo-tree-id25689 . -1379) (undo-tree-id25690 . -1379) (undo-tree-id25691 . -1379) (undo-tree-id25692 . -1379) (undo-tree-id25693 . -1379) (undo-tree-id25694 . -1379) (undo-tree-id25695 . -1379) (undo-tree-id25696 . -1379) (undo-tree-id25697 . -1379) (undo-tree-id25698 . -1379) (undo-tree-id25699 . -1379) (undo-tree-id25700 . -1379) (undo-tree-id25701 . -1379) (undo-tree-id25702 . -1379) (undo-tree-id25703 . -1379) (undo-tree-id25704 . -1379) (undo-tree-id25705 . -1379) (undo-tree-id25706 . -1379) (undo-tree-id25707 . -1379) (undo-tree-id25708 . -1379) (undo-tree-id25709 . -1379) (undo-tree-id25710 . -1379) (undo-tree-id25711 . -1379) (undo-tree-id25712 . -1379) (undo-tree-id25713 . -1379) (undo-tree-id25714 . -1379) (undo-tree-id25715 . -1379) (undo-tree-id25716 . -1379) (undo-tree-id25717 . -1379) (undo-tree-id25718 . -1379) (undo-tree-id25719 . -1379) (undo-tree-id25720 . -1379) (undo-tree-id25721 . -1379) (undo-tree-id25722 . -1379) (undo-tree-id25723 . -1379) (undo-tree-id25724 . -1379) (undo-tree-id25725 . -1379) (undo-tree-id25726 . -1379) (undo-tree-id25727 . -1379) (undo-tree-id25728 . -1379) (undo-tree-id25729 . -1379) (undo-tree-id25730 . -1379) (undo-tree-id25731 . -1379) (undo-tree-id25732 . -1379) (undo-tree-id25733 . -1379) (undo-tree-id25734 . -1379) (undo-tree-id25735 . -1379) (undo-tree-id25736 . -1379) (undo-tree-id25737 . -1379) (undo-tree-id25738 . -1379) (undo-tree-id25739 . -1379) (undo-tree-id25740 . -1379) (undo-tree-id25741 . -1379) (undo-tree-id25742 . -1379) (undo-tree-id25743 . -1379) (undo-tree-id25744 . -1379) (undo-tree-id25745 . -1379) (undo-tree-id25746 . -1379) (undo-tree-id25747 . -1379) (undo-tree-id25748 . -1379) (undo-tree-id25749 . -1379) (undo-tree-id25750 . -1379) (undo-tree-id25751 . -1379) (undo-tree-id25752 . -1379) (undo-tree-id25753 . -1379) (undo-tree-id25754 . -1379) (undo-tree-id25755 . -1379) (undo-tree-id25756 . -1379) (undo-tree-id25757 . -1379) (undo-tree-id25758 . -1379) (undo-tree-id25759 . -1379) (undo-tree-id25760 . -1379) (undo-tree-id25761 . -1379) (undo-tree-id25762 . -1379) (undo-tree-id25763 . -1379) (undo-tree-id25764 . -1379) (undo-tree-id25765 . -1379) (undo-tree-id25766 . -1379) (undo-tree-id25767 . -1379) (undo-tree-id25768 . -1379) (undo-tree-id25769 . -1379) (undo-tree-id25770 . -1379) (undo-tree-id25771 . -1379) (undo-tree-id25772 . -1379) (undo-tree-id25773 . -1379) (undo-tree-id25774 . -1379) (undo-tree-id25775 . -1379) (undo-tree-id25776 . -1379) (undo-tree-id25777 . -1379) (undo-tree-id25778 . -1379) (undo-tree-id25779 . -1379) (undo-tree-id25780 . -1379) (undo-tree-id25781 . -1379) (undo-tree-id25782 . -1379) (undo-tree-id25783 . -1379) (undo-tree-id25784 . -1379) (undo-tree-id25785 . -1379) (undo-tree-id25786 . -1379) (undo-tree-id25787 . -1379) (undo-tree-id25788 . -1379) (undo-tree-id25789 . -1379) (undo-tree-id25790 . -1379) (undo-tree-id25791 . -1379) (undo-tree-id25792 . -1379) (undo-tree-id25793 . -1379) (undo-tree-id25794 . -1379) (undo-tree-id25795 . -1379) (undo-tree-id25796 . -1379) (undo-tree-id25797 . -1379) (undo-tree-id25798 . -1379) (undo-tree-id25799 . -1379) (undo-tree-id25800 . -1379) (undo-tree-id25801 . -1379) (undo-tree-id25802 . -1379) (undo-tree-id25803 . -1379) (undo-tree-id25804 . -1379) (undo-tree-id25805 . -1379) (undo-tree-id25806 . -1379) (undo-tree-id25807 . -1379) (undo-tree-id25808 . -1379) (undo-tree-id25809 . -1379) (undo-tree-id25810 . -1379) (undo-tree-id25811 . -1379) (undo-tree-id25812 . -1379) (undo-tree-id25813 . -1379) (undo-tree-id25814 . -1379) (undo-tree-id25815 . -1379) (undo-tree-id25816 . -1379) (undo-tree-id25817 . -1379) (undo-tree-id25818 . -1379) (undo-tree-id25819 . -1379) (undo-tree-id25820 . -1379) (undo-tree-id25821 . -1379) (undo-tree-id25822 . -1379) (undo-tree-id25823 . -1379) (undo-tree-id25824 . -1379) (undo-tree-id25825 . -1379) (undo-tree-id25826 . -1379) (undo-tree-id25827 . -1379) (undo-tree-id25828 . -1379) (undo-tree-id25829 . -1379) (undo-tree-id25830 . -1379) (undo-tree-id25831 . -1379) (undo-tree-id25832 . -1379) (undo-tree-id25833 . -1379) (undo-tree-id25834 . -1379) (undo-tree-id25835 . -1379) (undo-tree-id25836 . -1379) (undo-tree-id25837 . -1379) (undo-tree-id25838 . -1379) (undo-tree-id25839 . -1379) (undo-tree-id25840 . -1379) (undo-tree-id25841 . -1379) (undo-tree-id25842 . -1379) (undo-tree-id25843 . -1379) (undo-tree-id25844 . -1379) (undo-tree-id25845 . -1302) (3013 . 4315) (#(" Moreover, the flat_map() method takes a function as an argument, which allows you to transform each dataset in the nested dataset before flattening. For example, if you pass the function lambda ds: ds.batch(2) to flat_map(), then it will transform the nested dataset {{1, 2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of tensors of size 2. With that in mind, we are ready to flatten our dataset: dataset = dataset.flat_map(lambda window: window.batch(window_length)) Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32)." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 19 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 20 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 23 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 118 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 119 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 120 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 121 122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 122 123 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 123 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 124 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 125 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 127 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 128 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 129 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 137 138 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 138 156 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 156 157 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 157 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 176 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 177 178 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 178 179 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 179 180 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 180 181 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 181 198 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 198 199 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 199 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 205 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 214 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 215 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 218 219 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 219 222 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 222 272 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 272 273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 273 356 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 356 357 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 357 423 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 423 431 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 431 432 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 432 454 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 454 455 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 455 458 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 458 493 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 493 494 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 494 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 500 502 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 502 503 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 503 535 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 535 536 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 536 542 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 542 569 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 569 570 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 570 638 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 638 643 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 643 644 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 644 712 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 712 713 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 713 787 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 787 788 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 788 863 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 863 864 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 864 933 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 933 934 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 934 1005 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1005 1006 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1006 1011 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1011 1012 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1012 1016 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1016 1021 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1021 1022 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1022 1066 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1066 1067 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1067 1071 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1071 1072 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1072 1073 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1073 1144 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1144 1145 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1145 1146 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1146 1215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1215 1216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1216 1284 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1284 1285 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1285 1299 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1299 1300 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 3090) (undo-tree-id25846 . -1) (undo-tree-id25847 . -1) (undo-tree-id25848 . -1) (undo-tree-id25849 . -1) (undo-tree-id25850 . 1299) (undo-tree-id25851 . 1299) (undo-tree-id25852 . -1) (undo-tree-id25853 . -1) (undo-tree-id25854 . -1) (undo-tree-id25855 . -1) (undo-tree-id25856 . -1) (undo-tree-id25857 . -1) (undo-tree-id25858 . -1) (undo-tree-id25859 . -1) (undo-tree-id25860 . -1) (undo-tree-id25861 . -1) (undo-tree-id25862 . -1) (undo-tree-id25863 . -1) (undo-tree-id25864 . -1) (undo-tree-id25865 . -1) (undo-tree-id25866 . -1) (undo-tree-id25867 . -1) (undo-tree-id25868 . -1) (undo-tree-id25869 . -1) (undo-tree-id25870 . -1) (undo-tree-id25871 . -1) (undo-tree-id25872 . -1) (undo-tree-id25873 . -1) (undo-tree-id25874 . -1) (undo-tree-id25875 . -1) (undo-tree-id25876 . -1) (undo-tree-id25877 . -1) (undo-tree-id25878 . -1) (undo-tree-id25879 . -1) (undo-tree-id25880 . -1) (undo-tree-id25881 . -1) (undo-tree-id25882 . -1) (undo-tree-id25883 . -1) (undo-tree-id25884 . -1) (undo-tree-id25885 . -1) (undo-tree-id25886 . -1) (undo-tree-id25887 . -1) (undo-tree-id25888 . -1) (undo-tree-id25889 . -1) (undo-tree-id25890 . -1) (undo-tree-id25891 . -1) (undo-tree-id25892 . -1) (undo-tree-id25893 . -1) (undo-tree-id25894 . -1) (undo-tree-id25895 . -1) (undo-tree-id25896 . -1) (undo-tree-id25897 . -1) (undo-tree-id25898 . -1) (undo-tree-id25899 . -1) (undo-tree-id25900 . -1) (undo-tree-id25901 . -1) (undo-tree-id25902 . -1) (undo-tree-id25903 . -1) (undo-tree-id25904 . -1) (undo-tree-id25905 . -1) (undo-tree-id25906 . -1) (undo-tree-id25907 . -1) (undo-tree-id25908 . -1) (undo-tree-id25909 . -1) (undo-tree-id25910 . -1) (undo-tree-id25911 . -1) (undo-tree-id25912 . -1) (undo-tree-id25913 . -1) (undo-tree-id25914 . -1) (undo-tree-id25915 . -1) (undo-tree-id25916 . -1) (undo-tree-id25917 . -1) (undo-tree-id25918 . -1) (undo-tree-id25919 . -1) (undo-tree-id25920 . -1) (undo-tree-id25921 . -1) (undo-tree-id25922 . -1) (undo-tree-id25923 . -1) (undo-tree-id25924 . -1) (undo-tree-id25925 . -1) (undo-tree-id25926 . -1) (undo-tree-id25927 . -1) (undo-tree-id25928 . -1) (undo-tree-id25929 . -1) (undo-tree-id25930 . -1) (undo-tree-id25931 . -1) (undo-tree-id25932 . -1) (undo-tree-id25933 . -1) (undo-tree-id25934 . -1) (undo-tree-id25935 . -1) (undo-tree-id25936 . -1) (undo-tree-id25937 . -1) (undo-tree-id25938 . -1) (undo-tree-id25939 . -1) (undo-tree-id25940 . -1) (undo-tree-id25941 . -1) (undo-tree-id25942 . -1) (undo-tree-id25943 . -1) (undo-tree-id25944 . -1) (undo-tree-id25945 . -1) (undo-tree-id25946 . -1) (undo-tree-id25947 . -1) (undo-tree-id25948 . -1) (undo-tree-id25949 . -1) (undo-tree-id25950 . -1) (undo-tree-id25951 . -1) (undo-tree-id25952 . -1) (undo-tree-id25953 . -1) (undo-tree-id25954 . -1) (undo-tree-id25955 . -1) (undo-tree-id25956 . -1) (undo-tree-id25957 . -1) (undo-tree-id25958 . -1) (undo-tree-id25959 . -1) (undo-tree-id25960 . -1) (undo-tree-id25961 . -1) (undo-tree-id25962 . -1) (undo-tree-id25963 . -1) (undo-tree-id25964 . -1) (undo-tree-id25965 . -1) (undo-tree-id25966 . -1) (undo-tree-id25967 . -1) (undo-tree-id25968 . -1) (undo-tree-id25969 . -1) (undo-tree-id25970 . -1) (undo-tree-id25971 . -1) (undo-tree-id25972 . -1) (undo-tree-id25973 . -1) (undo-tree-id25974 . -1) (undo-tree-id25975 . -1) (undo-tree-id25976 . -1) (undo-tree-id25977 . -1) (undo-tree-id25978 . -1) (undo-tree-id25979 . -1) (undo-tree-id25980 . -1) (undo-tree-id25981 . -1) (undo-tree-id25982 . -1) (undo-tree-id25983 . -1) (undo-tree-id25984 . -1) (undo-tree-id25985 . -1) (undo-tree-id25986 . -1) (undo-tree-id25987 . -1) (undo-tree-id25988 . -1) (undo-tree-id25989 . -1) (undo-tree-id25990 . -1) (undo-tree-id25991 . -1) (undo-tree-id25992 . -1) (undo-tree-id25993 . -1) (undo-tree-id25994 . -1) (undo-tree-id25995 . -1) (undo-tree-id25996 . -1) (undo-tree-id25997 . -1) (undo-tree-id25998 . -1) (undo-tree-id25999 . -1) (undo-tree-id26000 . -1) (undo-tree-id26001 . -1) (undo-tree-id26002 . -1) (undo-tree-id26003 . -1) (undo-tree-id26004 . -1) (undo-tree-id26005 . -1) (undo-tree-id26006 . -1) (undo-tree-id26007 . -1) (undo-tree-id26008 . -1) (undo-tree-id26009 . -1) (undo-tree-id26010 . -1) (undo-tree-id26011 . -1) (undo-tree-id26012 . -1) (undo-tree-id26013 . -1) (undo-tree-id26014 . -1) (undo-tree-id26015 . -1) (undo-tree-id26016 . -1) (undo-tree-id26017 . -1) (undo-tree-id26018 . -1) (undo-tree-id26019 . -1) (undo-tree-id26020 . -1) (undo-tree-id26021 . -1) (undo-tree-id26022 . -1) (undo-tree-id26023 . -1) (undo-tree-id26024 . -1) (undo-tree-id26025 . -1) (undo-tree-id26026 . -1) (undo-tree-id26027 . -1) (undo-tree-id26028 . -1) (undo-tree-id26029 . -1) (undo-tree-id26030 . -1) (undo-tree-id26031 . -1) (undo-tree-id26032 . -1) (undo-tree-id26033 . -1) (undo-tree-id26034 . -1) (undo-tree-id26035 . -1) (undo-tree-id26036 . -1) (undo-tree-id26037 . -1) (undo-tree-id26038 . -1) (undo-tree-id26039 . -1) (undo-tree-id26040 . -1) (undo-tree-id26041 . -1) (undo-tree-id26042 . -1) (undo-tree-id26043 . -1) (undo-tree-id26044 . -1) (undo-tree-id26045 . -1) (undo-tree-id26046 . -1) (undo-tree-id26047 . -1) (undo-tree-id26048 . -1) (undo-tree-id26049 . -1) (undo-tree-id26050 . -1) (undo-tree-id26051 . -1) (undo-tree-id26052 . -1) (undo-tree-id26053 . -1) (undo-tree-id26054 . -1) (undo-tree-id26055 . -1) (undo-tree-id26056 . -1) (undo-tree-id26057 . -1) (undo-tree-id26058 . -1) (undo-tree-id26059 . -1) (undo-tree-id26060 . -1) (undo-tree-id26061 . -1) (undo-tree-id26062 . -1) (undo-tree-id26063 . -1) (undo-tree-id26064 . -1) (undo-tree-id26065 . -1) (undo-tree-id26066 . -1) (undo-tree-id26067 . -1) (undo-tree-id26068 . -1) (undo-tree-id26069 . -1) (undo-tree-id26070 . -1) (undo-tree-id26071 . -1) (undo-tree-id26072 . -1) (undo-tree-id26073 . -1) (undo-tree-id26074 . -1) (undo-tree-id26075 . -1) (undo-tree-id26076 . -1) (undo-tree-id26077 . -1) (undo-tree-id26078 . -1) (undo-tree-id26079 . -1) (undo-tree-id26080 . -1) (undo-tree-id26081 . -1) (undo-tree-id26082 . -1) (undo-tree-id26083 . -1) (undo-tree-id26084 . -1) (undo-tree-id26085 . -1) (undo-tree-id26086 . -1) (undo-tree-id26087 . -1) (undo-tree-id26088 . -1) (undo-tree-id26089 . -1) (undo-tree-id26090 . -1) (undo-tree-id26091 . -1) (undo-tree-id26092 . -1) (undo-tree-id26093 . -1) (undo-tree-id26094 . -1) (undo-tree-id26095 . -1) (undo-tree-id26096 . -1) (undo-tree-id26097 . -1) (undo-tree-id26098 . -1) (undo-tree-id26099 . -1) (undo-tree-id26100 . -1) (undo-tree-id26101 . -1) (undo-tree-id26102 . -1) (undo-tree-id26103 . -1) (undo-tree-id26104 . -1) (undo-tree-id26105 . -1) (undo-tree-id26106 . -1) (undo-tree-id26107 . -1) (undo-tree-id26108 . -1) (undo-tree-id26109 . -1) (undo-tree-id26110 . -1) (undo-tree-id26111 . -1) (undo-tree-id26112 . -1) (undo-tree-id26113 . -1) (undo-tree-id26114 . -1) (undo-tree-id26115 . -1) (undo-tree-id26116 . -1) (undo-tree-id26117 . -1) (undo-tree-id26118 . -1) (undo-tree-id26119 . -1) (undo-tree-id26120 . -1) (undo-tree-id26121 . -1) (undo-tree-id26122 . -1) (undo-tree-id26123 . -1) (undo-tree-id26124 . -1) (undo-tree-id26125 . -1) (undo-tree-id26126 . -1) (undo-tree-id26127 . -1) (undo-tree-id26128 . -1) (undo-tree-id26129 . -1) (undo-tree-id26130 . -1) (undo-tree-id26131 . -1) (undo-tree-id26132 . -1) (undo-tree-id26133 . -1) (undo-tree-id26134 . -1) (undo-tree-id26135 . -1) (undo-tree-id26136 . -1) (undo-tree-id26137 . -1) (undo-tree-id26138 . -1) (undo-tree-id26139 . -1) (undo-tree-id26140 . -1) (undo-tree-id26141 . -1) (undo-tree-id26142 . -1) (undo-tree-id26143 . -1) (undo-tree-id26144 . -1) (undo-tree-id26145 . -1) (undo-tree-id26146 . -1) (undo-tree-id26147 . -1) (undo-tree-id26148 . -1) (undo-tree-id26149 . -1) (undo-tree-id26150 . -1) (undo-tree-id26151 . -1) (undo-tree-id26152 . -1) (undo-tree-id26153 . -1) (undo-tree-id26154 . -1) (undo-tree-id26155 . -1) (undo-tree-id26156 . -1) (undo-tree-id26157 . -1) (undo-tree-id26158 . -1) (undo-tree-id26159 . -1) (undo-tree-id26160 . -1) (undo-tree-id26161 . -1) (undo-tree-id26162 . -1) (undo-tree-id26163 . -1) (undo-tree-id26164 . -1) (undo-tree-id26165 . -1) (undo-tree-id26166 . -1) (undo-tree-id26167 . -1) (undo-tree-id26168 . -1) (undo-tree-id26169 . -1) (undo-tree-id26170 . -1) (undo-tree-id26171 . -1) (undo-tree-id26172 . -1) (undo-tree-id26173 . -1) (undo-tree-id26174 . -1) (undo-tree-id26175 . -1) (undo-tree-id26176 . -1) (undo-tree-id26177 . -1) (undo-tree-id26178 . -1) (undo-tree-id26179 . -1) (undo-tree-id26180 . -1) (undo-tree-id26181 . -1) (undo-tree-id26182 . -1) (undo-tree-id26183 . -1) (undo-tree-id26184 . -1) (undo-tree-id26185 . -1) (undo-tree-id26186 . -1) (undo-tree-id26187 . -1) (undo-tree-id26188 . -1) (undo-tree-id26189 . -1) (undo-tree-id26190 . -1) (undo-tree-id26191 . -1) (undo-tree-id26192 . -1) (undo-tree-id26193 . -1) (undo-tree-id26194 . -1) (undo-tree-id26195 . -1) (undo-tree-id26196 . -1) (undo-tree-id26197 . -1) (undo-tree-id26198 . -1) (undo-tree-id26199 . -1) (undo-tree-id26200 . -1) (undo-tree-id26201 . -1) (undo-tree-id26202 . -1) (undo-tree-id26203 . -1) (undo-tree-id26204 . -1) (undo-tree-id26205 . -1) (undo-tree-id26206 . -1) (undo-tree-id26207 . -1) (undo-tree-id26208 . -1) (undo-tree-id26209 . -1) (undo-tree-id26210 . -1) (undo-tree-id26211 . -1) (undo-tree-id26212 . -1) (undo-tree-id26213 . -1) (undo-tree-id26214 . -1) (undo-tree-id26215 . -1) (undo-tree-id26216 . -1) (undo-tree-id26217 . -1) (undo-tree-id26218 . -1) (undo-tree-id26219 . -1) (undo-tree-id26220 . -1) (undo-tree-id26221 . -1) (undo-tree-id26222 . -1) (undo-tree-id26223 . -1) (undo-tree-id26224 . -1) (undo-tree-id26225 . -1) (undo-tree-id26226 . -1) (undo-tree-id26227 . -1) (undo-tree-id26228 . -1) (undo-tree-id26229 . -1) (undo-tree-id26230 . -1) (undo-tree-id26231 . -1) (undo-tree-id26232 . -1) (undo-tree-id26233 . -1) (undo-tree-id26234 . -1) (undo-tree-id26235 . -1) (undo-tree-id26236 . -1) (undo-tree-id26237 . -1) (undo-tree-id26238 . -1) (undo-tree-id26239 . -1) (undo-tree-id26240 . -1) (undo-tree-id26241 . -1) (undo-tree-id26242 . -1) (undo-tree-id26243 . -1) (undo-tree-id26244 . -1) (undo-tree-id26245 . -1) (undo-tree-id26246 . -1) (undo-tree-id26247 . -1) (undo-tree-id26248 . -1) (undo-tree-id26249 . -1) (undo-tree-id26250 . -1) (undo-tree-id26251 . -1) (undo-tree-id26252 . -1) (undo-tree-id26253 . -1) (undo-tree-id26254 . -1) (undo-tree-id26255 . -1) (undo-tree-id26256 . -1) (undo-tree-id26257 . -1) (undo-tree-id26258 . -1) (undo-tree-id26259 . -1) (undo-tree-id26260 . -1) (undo-tree-id26261 . -1) (undo-tree-id26262 . -1) (undo-tree-id26263 . -1) (undo-tree-id26264 . -1) (undo-tree-id26265 . -1) (undo-tree-id26266 . -1) (undo-tree-id26267 . -1) (undo-tree-id26268 . -1) (undo-tree-id26269 . -1) (undo-tree-id26270 . -1) (undo-tree-id26271 . -1) (undo-tree-id26272 . -1) (undo-tree-id26273 . -1) (undo-tree-id26274 . -1) (undo-tree-id26275 . -1) (undo-tree-id26276 . -1) (undo-tree-id26277 . -1) (undo-tree-id26278 . -1) (undo-tree-id26279 . -1) (undo-tree-id26280 . -1) (undo-tree-id26281 . -1) (undo-tree-id26282 . -1) (undo-tree-id26283 . -1) (undo-tree-id26284 . -1) (undo-tree-id26285 . -1) (undo-tree-id26286 . -1) (undo-tree-id26287 . -1) (undo-tree-id26288 . -1) (undo-tree-id26289 . -1) (undo-tree-id26290 . -1) (undo-tree-id26291 . -1) (undo-tree-id26292 . -1) (undo-tree-id26293 . -1) (undo-tree-id26294 . -1) (undo-tree-id26295 . -1) (undo-tree-id26296 . -1) (undo-tree-id26297 . -1) (undo-tree-id26298 . -1) (undo-tree-id26299 . -1) (undo-tree-id26300 . -1) (undo-tree-id26301 . -1) (undo-tree-id26302 . -1) (undo-tree-id26303 . -1) (undo-tree-id26304 . -1) (undo-tree-id26305 . -1) (undo-tree-id26306 . -1) (undo-tree-id26307 . -1) (undo-tree-id26308 . -1) (undo-tree-id26309 . -1) (undo-tree-id26310 . -1) (undo-tree-id26311 . -1) (undo-tree-id26312 . -1) (undo-tree-id26313 . -1) (undo-tree-id26314 . -1) (undo-tree-id26315 . -1) (undo-tree-id26316 . -1) (undo-tree-id26317 . -1) (undo-tree-id26318 . -1) (undo-tree-id26319 . -1) (undo-tree-id26320 . -1) (undo-tree-id26321 . -1) (undo-tree-id26322 . -1) (undo-tree-id26323 . -1) (undo-tree-id26324 . -1) (undo-tree-id26325 . -1) (undo-tree-id26326 . -1) (undo-tree-id26327 . -1) (undo-tree-id26328 . -1) (undo-tree-id26329 . -1) (undo-tree-id26330 . -1) (undo-tree-id26331 . -1) (undo-tree-id26332 . -1) (undo-tree-id26333 . -1) (undo-tree-id26334 . -1) (undo-tree-id26335 . -1) (undo-tree-id26336 . -1) (undo-tree-id26337 . -1) (undo-tree-id26338 . -1) (undo-tree-id26339 . -1) (undo-tree-id26340 . -1) (undo-tree-id26341 . -1) (undo-tree-id26342 . -1) (undo-tree-id26343 . -1) (undo-tree-id26344 . -1) (undo-tree-id26345 . -1) (undo-tree-id26346 . -1) (undo-tree-id26347 . -1) (undo-tree-id26348 . -1) (undo-tree-id26349 . -1) (undo-tree-id26350 . -1) (undo-tree-id26351 . -1) (undo-tree-id26352 . -1) (undo-tree-id26353 . -1) (undo-tree-id26354 . -1) (undo-tree-id26355 . -1) (undo-tree-id26356 . -1) (undo-tree-id26357 . -1) (undo-tree-id26358 . -1) (undo-tree-id26359 . -1) (undo-tree-id26360 . -1) (undo-tree-id26361 . -1) (undo-tree-id26362 . -1) (undo-tree-id26363 . -1) (undo-tree-id26364 . -1) (undo-tree-id26365 . -1) (undo-tree-id26366 . -1) (undo-tree-id26367 . -1) (undo-tree-id26368 . -1) (undo-tree-id26369 . -1) (undo-tree-id26370 . -1) (undo-tree-id26371 . -1) (undo-tree-id26372 . -1) (undo-tree-id26373 . -1) (undo-tree-id26374 . -1) (undo-tree-id26375 . -1) (undo-tree-id26376 . -1) (undo-tree-id26377 . -1) (undo-tree-id26378 . -1) (undo-tree-id26379 . -1) (undo-tree-id26380 . -1) (undo-tree-id26381 . -1) (undo-tree-id26382 . -1) (undo-tree-id26383 . -1) (undo-tree-id26384 . -1) (undo-tree-id26385 . -1) (undo-tree-id26386 . -1) (undo-tree-id26387 . -1) (undo-tree-id26388 . -1) (undo-tree-id26389 . -1) (undo-tree-id26390 . -1) (undo-tree-id26391 . -1) (undo-tree-id26392 . -1) (undo-tree-id26393 . -1) (undo-tree-id26394 . -1) (undo-tree-id26395 . -1) (undo-tree-id26396 . -1) (undo-tree-id26397 . -1) (undo-tree-id26398 . -1) (undo-tree-id26399 . -1) (undo-tree-id26400 . -1) (undo-tree-id26401 . -1) (undo-tree-id26402 . -1) (undo-tree-id26403 . -1) (undo-tree-id26404 . -1) (undo-tree-id26405 . -1) (undo-tree-id26406 . -1) (undo-tree-id26407 . -1) (undo-tree-id26408 . -1) (undo-tree-id26409 . -1) (undo-tree-id26410 . -1) (undo-tree-id26411 . -1) (undo-tree-id26412 . -1) (undo-tree-id26413 . -1) (undo-tree-id26414 . -1) (undo-tree-id26415 . -1) (undo-tree-id26416 . -1) (undo-tree-id26417 . -1) (undo-tree-id26418 . -1) (undo-tree-id26419 . -1) (undo-tree-id26420 . -1) (undo-tree-id26421 . -1) (undo-tree-id26422 . -1) (undo-tree-id26423 . -1) (undo-tree-id26424 . -1) (undo-tree-id26425 . -1) (undo-tree-id26426 . -1) (undo-tree-id26427 . -1) (undo-tree-id26428 . -1) (undo-tree-id26429 . -1) (undo-tree-id26430 . -1) (undo-tree-id26431 . -1) (undo-tree-id26432 . -1) (undo-tree-id26433 . -1) (undo-tree-id26434 . -1) (undo-tree-id26435 . -1) (undo-tree-id26436 . -1) (undo-tree-id26437 . -1) (undo-tree-id26438 . -1) (undo-tree-id26439 . -1) (undo-tree-id26440 . -1) (undo-tree-id26441 . -1) (undo-tree-id26442 . -1) (undo-tree-id26443 . -1) (undo-tree-id26444 . -1) (undo-tree-id26445 . -1) (undo-tree-id26446 . -1) (undo-tree-id26447 . -1) (undo-tree-id26448 . -1) (undo-tree-id26449 . -1) (undo-tree-id26450 . -1) (undo-tree-id26451 . -1) (undo-tree-id26452 . -1) (undo-tree-id26453 . -1) (undo-tree-id26454 . -1) (undo-tree-id26455 . -1) (undo-tree-id26456 . -1) (undo-tree-id26457 . -1) (undo-tree-id26458 . -1) (undo-tree-id26459 . -1) (undo-tree-id26460 . -1) (undo-tree-id26461 . -1) (undo-tree-id26462 . -1) (undo-tree-id26463 . -1) (undo-tree-id26464 . -1) (undo-tree-id26465 . -1) (undo-tree-id26466 . -1) (undo-tree-id26467 . -1) (undo-tree-id26468 . -1) (undo-tree-id26469 . -1) (undo-tree-id26470 . -1) (undo-tree-id26471 . -1) (undo-tree-id26472 . -1) (undo-tree-id26473 . -1) (undo-tree-id26474 . -1) (undo-tree-id26475 . -1) (undo-tree-id26476 . -1) (undo-tree-id26477 . -1) (undo-tree-id26478 . -1) (undo-tree-id26479 . -1) (undo-tree-id26480 . -1) (undo-tree-id26481 . -1) (undo-tree-id26482 . -1) (undo-tree-id26483 . -1) (undo-tree-id26484 . -1) (undo-tree-id26485 . -1) (undo-tree-id26486 . -1) (undo-tree-id26487 . -1) (undo-tree-id26488 . -1) (undo-tree-id26489 . -1) (undo-tree-id26490 . -1) (undo-tree-id26491 . -1) (undo-tree-id26492 . -1) (undo-tree-id26493 . -1) (undo-tree-id26494 . -1) (undo-tree-id26495 . -1) (undo-tree-id26496 . -1) (undo-tree-id26497 . -1) (undo-tree-id26498 . -1) (undo-tree-id26499 . -1) (undo-tree-id26500 . -1) (undo-tree-id26501 . -1) (undo-tree-id26502 . -1) (undo-tree-id26503 . -1) (undo-tree-id26504 . -1) (undo-tree-id26505 . -1) (undo-tree-id26506 . -1) (undo-tree-id26507 . -1) (undo-tree-id26508 . -1) (undo-tree-id26509 . -1) (undo-tree-id26510 . -1) (undo-tree-id26511 . -1) (undo-tree-id26512 . -1) (undo-tree-id26513 . -1) (undo-tree-id26514 . -1) (undo-tree-id26515 . -1) (undo-tree-id26516 . -1) (undo-tree-id26517 . -1) (undo-tree-id26518 . -1) (undo-tree-id26519 . -1) (undo-tree-id26520 . -1) (undo-tree-id26521 . -1) (undo-tree-id26522 . -1) (undo-tree-id26523 . -1) (undo-tree-id26524 . -1) (undo-tree-id26525 . -1) (undo-tree-id26526 . -1) (undo-tree-id26527 . -1) (undo-tree-id26528 . -1) (undo-tree-id26529 . -1) (undo-tree-id26530 . -1) (undo-tree-id26531 . -1) (undo-tree-id26532 . -1) (undo-tree-id26533 . -1) (undo-tree-id26534 . -1) (undo-tree-id26535 . -1) (undo-tree-id26536 . -1) (undo-tree-id26537 . -1) (undo-tree-id26538 . -1) (undo-tree-id26539 . -1) (undo-tree-id26540 . -1) (undo-tree-id26541 . -1) (undo-tree-id26542 . -1) (undo-tree-id26543 . -1) (undo-tree-id26544 . -1) (undo-tree-id26545 . -1) (undo-tree-id26546 . -1) (undo-tree-id26547 . -1) (undo-tree-id26548 . -1) (undo-tree-id26549 . -1) (undo-tree-id26550 . -1) (undo-tree-id26551 . -1) (undo-tree-id26552 . -1) (undo-tree-id26553 . -1) (undo-tree-id26554 . -1) (undo-tree-id26555 . -1) (undo-tree-id26556 . -1) (undo-tree-id26557 . -1) (undo-tree-id26558 . -1) (undo-tree-id26559 . -1) (undo-tree-id26560 . -1) (undo-tree-id26561 . -1) (undo-tree-id26562 . -1) (undo-tree-id26563 . -1) (undo-tree-id26564 . -1) (undo-tree-id26565 . -1) (undo-tree-id26566 . -1) (undo-tree-id26567 . -1) (undo-tree-id26568 . -1) (undo-tree-id26569 . -1) (undo-tree-id26570 . -1) (undo-tree-id26571 . -1) (undo-tree-id26572 . -1) (undo-tree-id26573 . -1) (undo-tree-id26574 . -1) (undo-tree-id26575 . -1) (undo-tree-id26576 . -1) (undo-tree-id26577 . -1) (undo-tree-id26578 . -1) (undo-tree-id26579 . -1) (undo-tree-id26580 . -1) (undo-tree-id26581 . -1) (undo-tree-id26582 . -1) (undo-tree-id26583 . -1) (undo-tree-id26584 . -1) (undo-tree-id26585 . -1) (undo-tree-id26586 . -1) (undo-tree-id26587 . -1) (undo-tree-id26588 . -1) (undo-tree-id26589 . -1) (undo-tree-id26590 . -1) (undo-tree-id26591 . -1) (undo-tree-id26592 . -1) (undo-tree-id26593 . -1) (undo-tree-id26594 . -1) (undo-tree-id26595 . -1) (undo-tree-id26596 . -1) (undo-tree-id26597 . -1) (undo-tree-id26598 . -1) (undo-tree-id26599 . -1) (undo-tree-id26600 . -1) (undo-tree-id26601 . -1) (undo-tree-id26602 . -1) (undo-tree-id26603 . -1) (undo-tree-id26604 . -1) (undo-tree-id26605 . -1) (undo-tree-id26606 . -1) (undo-tree-id26607 . -1) (undo-tree-id26608 . -1) (undo-tree-id26609 . -1) (undo-tree-id26610 . -1) (undo-tree-id26611 . -1) (undo-tree-id26612 . -1) (undo-tree-id26613 . -1) (undo-tree-id26614 . -1) (undo-tree-id26615 . -1) (undo-tree-id26616 . -1) (undo-tree-id26617 . -1) (undo-tree-id26618 . -1) (undo-tree-id26619 . -1) (undo-tree-id26620 . -1) (undo-tree-id26621 . -1) (undo-tree-id26622 . -1) (undo-tree-id26623 . -1) (undo-tree-id26624 . -1) (undo-tree-id26625 . -1) (undo-tree-id26626 . -1) (undo-tree-id26627 . -1) (undo-tree-id26628 . -1) (undo-tree-id26629 . -1) (undo-tree-id26630 . -1) (undo-tree-id26631 . -1) (undo-tree-id26632 . -1) (undo-tree-id26633 . -1) (undo-tree-id26634 . -1) (undo-tree-id26635 . -1) (undo-tree-id26636 . -1) (undo-tree-id26637 . -1) (undo-tree-id26638 . -1) (undo-tree-id26639 . -1) (undo-tree-id26640 . -1) (undo-tree-id26641 . -1) (undo-tree-id26642 . -1) (undo-tree-id26643 . -1) (undo-tree-id26644 . -1) (undo-tree-id26645 . -1) (undo-tree-id26646 . -1) (undo-tree-id26647 . -1) (undo-tree-id26648 . -1) (undo-tree-id26649 . -1) (undo-tree-id26650 . -1) (undo-tree-id26651 . -1) (undo-tree-id26652 . -1) (undo-tree-id26653 . -1) (undo-tree-id26654 . -1) (undo-tree-id26655 . -1) (undo-tree-id26656 . -1) (undo-tree-id26657 . -1) (undo-tree-id26658 . -1) (undo-tree-id26659 . -1) (undo-tree-id26660 . -1) (undo-tree-id26661 . -1) (undo-tree-id26662 . -1) (undo-tree-id26663 . -1) (undo-tree-id26664 . -1) (undo-tree-id26665 . -1) (undo-tree-id26666 . -1) (undo-tree-id26667 . -1) (undo-tree-id26668 . -1) (undo-tree-id26669 . -1) (undo-tree-id26670 . -1) (undo-tree-id26671 . -1) (undo-tree-id26672 . -1) (undo-tree-id26673 . -1) (undo-tree-id26674 . -1) (undo-tree-id26675 . -1) (undo-tree-id26676 . -1) (undo-tree-id26677 . -1) (undo-tree-id26678 . -1) (undo-tree-id26679 . -1) (undo-tree-id26680 . -1) (undo-tree-id26681 . -1) (undo-tree-id26682 . -1) (undo-tree-id26683 . -1) (undo-tree-id26684 . -1) (undo-tree-id26685 . -1) (undo-tree-id26686 . -1) (undo-tree-id26687 . -1) (undo-tree-id26688 . -1) (undo-tree-id26689 . -1) (undo-tree-id26690 . -1) (undo-tree-id26691 . -1) (undo-tree-id26692 . -1) (undo-tree-id26693 . -1) (undo-tree-id26694 . -1) (undo-tree-id26695 . -1) (undo-tree-id26696 . -1) (undo-tree-id26697 . -1) (undo-tree-id26698 . -1) (undo-tree-id26699 . -1) (undo-tree-id26700 . -1) (undo-tree-id26701 . -1) (undo-tree-id26702 . -1) (undo-tree-id26703 . -1) (undo-tree-id26704 . -1) (undo-tree-id26705 . -1) (undo-tree-id26706 . -1) (undo-tree-id26707 . -1) (undo-tree-id26708 . -1) (undo-tree-id26709 . -1) (undo-tree-id26710 . -1) (undo-tree-id26711 . -1) (undo-tree-id26712 . -1) (undo-tree-id26713 . -1) (undo-tree-id26714 . -1) (undo-tree-id26715 . -1) (undo-tree-id26716 . -1) (undo-tree-id26717 . -1) (undo-tree-id26718 . -1) (undo-tree-id26719 . -1) (undo-tree-id26720 . -1) (undo-tree-id26721 . -1) (undo-tree-id26722 . -1) (undo-tree-id26723 . -1) (undo-tree-id26724 . -1) (undo-tree-id26725 . -1) (undo-tree-id26726 . -1) (undo-tree-id26727 . -1) (undo-tree-id26728 . -1) (undo-tree-id26729 . -1) (undo-tree-id26730 . -1) (undo-tree-id26731 . -1) (undo-tree-id26732 . -1) (undo-tree-id26733 . -1) (undo-tree-id26734 . -1) (undo-tree-id26735 . -1) (undo-tree-id26736 . -1) (undo-tree-id26737 . -1) (undo-tree-id26738 . -1) (undo-tree-id26739 . -1) (undo-tree-id26740 . -1) (undo-tree-id26741 . -1) (undo-tree-id26742 . -1) (undo-tree-id26743 . -1) (undo-tree-id26744 . -1) (undo-tree-id26745 . -1) (undo-tree-id26746 . -1) (undo-tree-id26747 . -1) (undo-tree-id26748 . -1) (undo-tree-id26749 . -1) (undo-tree-id26750 . -1) (undo-tree-id26751 . -1) (undo-tree-id26752 . -1) (undo-tree-id26753 . -1) (undo-tree-id26754 . -1) (undo-tree-id26755 . -1) (undo-tree-id26756 . -1) (undo-tree-id26757 . -1) (undo-tree-id26758 . -1) (undo-tree-id26759 . -1) (undo-tree-id26760 . -1) (undo-tree-id26761 . -1) (undo-tree-id26762 . -1) (undo-tree-id26763 . -1) (undo-tree-id26764 . -1) (undo-tree-id26765 . -1) (undo-tree-id26766 . -1) (undo-tree-id26767 . -1) (undo-tree-id26768 . -1) (undo-tree-id26769 . -1) (undo-tree-id26770 . -1) (undo-tree-id26771 . -1) (undo-tree-id26772 . -1) (undo-tree-id26773 . -1) (undo-tree-id26774 . -1) (undo-tree-id26775 . -1) (undo-tree-id26776 . -1) (undo-tree-id26777 . -1) (undo-tree-id26778 . -1) (undo-tree-id26779 . -1) (undo-tree-id26780 . -1) (undo-tree-id26781 . -1) (undo-tree-id26782 . -1) (undo-tree-id26783 . -1) (undo-tree-id26784 . -1) (undo-tree-id26785 . -1) (undo-tree-id26786 . -1) (undo-tree-id26787 . -1) (undo-tree-id26788 . -1) (undo-tree-id26789 . -1) (undo-tree-id26790 . -1) (undo-tree-id26791 . -1) (undo-tree-id26792 . -1) (undo-tree-id26793 . -1) (undo-tree-id26794 . -1) (undo-tree-id26795 . -1) (undo-tree-id26796 . -1) (undo-tree-id26797 . -1) (undo-tree-id26798 . -1) (undo-tree-id26799 . -1) (undo-tree-id26800 . -1) (undo-tree-id26801 . -1) (undo-tree-id26802 . -1) (undo-tree-id26803 . -1) (undo-tree-id26804 . -1) (undo-tree-id26805 . -1) (undo-tree-id26806 . -1) (undo-tree-id26807 . -1) (undo-tree-id26808 . -1) (undo-tree-id26809 . -1) (undo-tree-id26810 . -1) (undo-tree-id26811 . -1) (undo-tree-id26812 . -1) (undo-tree-id26813 . -1) (undo-tree-id26814 . -1) (undo-tree-id26815 . -1) (undo-tree-id26816 . -1) (undo-tree-id26817 . -1) (undo-tree-id26818 . -1) (undo-tree-id26819 . -1) (undo-tree-id26820 . -1) (undo-tree-id26821 . -1) (undo-tree-id26822 . -1) (undo-tree-id26823 . -1) (undo-tree-id26824 . -1) (undo-tree-id26825 . -1) (undo-tree-id26826 . -1) (undo-tree-id26827 . -1) (undo-tree-id26828 . -1) (undo-tree-id26829 . -1) (undo-tree-id26830 . -1) (undo-tree-id26831 . -1) (undo-tree-id26832 . -1) (undo-tree-id26833 . -1) (undo-tree-id26834 . -1) (undo-tree-id26835 . -1) (undo-tree-id26836 . -1) (undo-tree-id26837 . -1) (undo-tree-id26838 . -1) (undo-tree-id26839 . -1) (undo-tree-id26840 . -1) (undo-tree-id26841 . -1) (undo-tree-id26842 . -1) (undo-tree-id26843 . -1) (undo-tree-id26844 . -1) (undo-tree-id26845 . -1) (undo-tree-id26846 . -1) (undo-tree-id26847 . -1) (undo-tree-id26848 . -1) (undo-tree-id26849 . -1) (undo-tree-id26850 . -1) (undo-tree-id26851 . -1) (undo-tree-id26852 . -1) (undo-tree-id26853 . -1) (undo-tree-id26854 . -1) (undo-tree-id26855 . -1) (undo-tree-id26856 . -1) (undo-tree-id26857 . -1) (undo-tree-id26858 . -1) (undo-tree-id26859 . -1) (undo-tree-id26860 . -1) (undo-tree-id26861 . -1) (undo-tree-id26862 . -8) (undo-tree-id26863 . -8) (undo-tree-id26864 . -8) (undo-tree-id26865 . -8) (undo-tree-id26866 . -8) (undo-tree-id26867 . -8) (undo-tree-id26868 . -8) (undo-tree-id26869 . -8) (undo-tree-id26870 . -8) (undo-tree-id26871 . -8) (undo-tree-id26872 . -8) (undo-tree-id26873 . -8) (undo-tree-id26874 . -8) (undo-tree-id26875 . -8) (undo-tree-id26876 . -8) (undo-tree-id26877 . -8) (undo-tree-id26878 . -8) (undo-tree-id26879 . -8) (undo-tree-id26880 . -8) (undo-tree-id26881 . -8) (undo-tree-id26882 . -8) (undo-tree-id26883 . -8) (undo-tree-id26884 . -7) (undo-tree-id26885 . -7) (undo-tree-id26886 . -7) (undo-tree-id26887 . -7) (undo-tree-id26888 . -7) (undo-tree-id26889 . -7) (undo-tree-id26890 . -7) (undo-tree-id26891 . -7) (undo-tree-id26892 . -7) (undo-tree-id26893 . -7) (undo-tree-id26894 . -7) (undo-tree-id26895 . -7) (undo-tree-id26896 . -7) (undo-tree-id26897 . -7) (undo-tree-id26898 . -7) (undo-tree-id26899 . -7) (undo-tree-id26900 . -7) (undo-tree-id26901 . -7) (undo-tree-id26902 . -7) (undo-tree-id26903 . -7) (undo-tree-id26904 . -7) (undo-tree-id26905 . -7) (undo-tree-id26906 . -6) (undo-tree-id26907 . -6) (undo-tree-id26908 . -6) (undo-tree-id26909 . -6) (undo-tree-id26910 . -6) (undo-tree-id26911 . -6) (undo-tree-id26912 . -6) (undo-tree-id26913 . -6) (undo-tree-id26914 . -6) (undo-tree-id26915 . -6) (undo-tree-id26916 . -6) (undo-tree-id26917 . -6) (undo-tree-id26918 . -6) (undo-tree-id26919 . -6) (undo-tree-id26920 . -6) (undo-tree-id26921 . -6) (undo-tree-id26922 . -6) (undo-tree-id26923 . -6) (undo-tree-id26924 . -6) (undo-tree-id26925 . -6) (undo-tree-id26926 . -6) (undo-tree-id26927 . -6) (undo-tree-id26928 . -5) (undo-tree-id26929 . -5) (undo-tree-id26930 . -5) (undo-tree-id26931 . -5) (undo-tree-id26932 . -5) (undo-tree-id26933 . -5) (undo-tree-id26934 . -5) (undo-tree-id26935 . -5) (undo-tree-id26936 . -5) (undo-tree-id26937 . -5) (undo-tree-id26938 . -5) (undo-tree-id26939 . -5) (undo-tree-id26940 . -5) (undo-tree-id26941 . -5) (undo-tree-id26942 . -5) (undo-tree-id26943 . -5) (undo-tree-id26944 . -5) (undo-tree-id26945 . -5) (undo-tree-id26946 . -5) (undo-tree-id26947 . -5) (undo-tree-id26948 . -5) (undo-tree-id26949 . -5) (undo-tree-id26950 . -4) (undo-tree-id26951 . -4) (undo-tree-id26952 . -4) (undo-tree-id26953 . -4) (undo-tree-id26954 . -4) (undo-tree-id26955 . -4) (undo-tree-id26956 . -4) (undo-tree-id26957 . -4) (undo-tree-id26958 . -4) (undo-tree-id26959 . -4) (undo-tree-id26960 . -4) (undo-tree-id26961 . -4) (undo-tree-id26962 . -4) (undo-tree-id26963 . -4) (undo-tree-id26964 . -4) (undo-tree-id26965 . -4) (undo-tree-id26966 . -4) (undo-tree-id26967 . -4) (undo-tree-id26968 . -4) (undo-tree-id26969 . -4) (undo-tree-id26970 . -4) (undo-tree-id26971 . -4) (undo-tree-id26972 . -3) (undo-tree-id26973 . -3) (undo-tree-id26974 . -3) (undo-tree-id26975 . -3) (undo-tree-id26976 . -3) (undo-tree-id26977 . -3) (undo-tree-id26978 . -3) (undo-tree-id26979 . -3) (undo-tree-id26980 . -3) (undo-tree-id26981 . -3) (undo-tree-id26982 . -3) (undo-tree-id26983 . -3) (undo-tree-id26984 . -3) (undo-tree-id26985 . -3) (undo-tree-id26986 . -3) (undo-tree-id26987 . -3) (undo-tree-id26988 . -3) (undo-tree-id26989 . -3) (undo-tree-id26990 . -3) (undo-tree-id26991 . -3) (undo-tree-id26992 . -3) (undo-tree-id26993 . -3) (undo-tree-id26994 . -2) (undo-tree-id26995 . -2) (undo-tree-id26996 . -2) (undo-tree-id26997 . -2) (undo-tree-id26998 . -2) (undo-tree-id26999 . -2) (undo-tree-id27000 . -2) (undo-tree-id27001 . -2) (undo-tree-id27002 . -2) (undo-tree-id27003 . -2) (undo-tree-id27004 . -2) (undo-tree-id27005 . -2) (undo-tree-id27006 . -2) (undo-tree-id27007 . -2) (undo-tree-id27008 . -2) (undo-tree-id27009 . -2) (undo-tree-id27010 . -2) (undo-tree-id27011 . -2) (undo-tree-id27012 . -2) (undo-tree-id27013 . -2) (undo-tree-id27014 . -2) (undo-tree-id27015 . -2) (undo-tree-id27016 . -1) (undo-tree-id27017 . -1) (undo-tree-id27018 . -1) (undo-tree-id27019 . -1) (undo-tree-id27020 . -1) (undo-tree-id27021 . -1) (undo-tree-id27022 . -1) (undo-tree-id27023 . -1) (undo-tree-id27024 . -1) (undo-tree-id27025 . -1) (undo-tree-id27026 . -1) (undo-tree-id27027 . -1) (undo-tree-id27028 . -1) (undo-tree-id27029 . -1) (undo-tree-id27030 . -1) (undo-tree-id27031 . -1) (undo-tree-id27032 . -1) (undo-tree-id27033 . -1) (undo-tree-id27034 . -1) (undo-tree-id27035 . -1) (undo-tree-id27036 . -1) (undo-tree-id27037 . -1) (undo-tree-id27038 . -1) (undo-tree-id27039 . -1) (undo-tree-id27040 . -1) (undo-tree-id27041 . -1) (undo-tree-id27042 . -1) (undo-tree-id27043 . -1) (undo-tree-id27044 . -1) (undo-tree-id27045 . -1) (undo-tree-id27046 . -1) (undo-tree-id27047 . -1) (undo-tree-id27048 . -1) (undo-tree-id27049 . -1) (undo-tree-id27050 . -1) (undo-tree-id27051 . -1) (undo-tree-id27052 . -1) (undo-tree-id27053 . -1) (undo-tree-id27054 . -1) (undo-tree-id27055 . -1) (undo-tree-id27056 . -1) (undo-tree-id27057 . -1) (undo-tree-id27058 . -1) (undo-tree-id27059 . -1) (undo-tree-id27060 . -1) (undo-tree-id27061 . -1) (undo-tree-id27062 . -1) (undo-tree-id27063 . -1) (undo-tree-id27064 . -1) (undo-tree-id27065 . -1) (undo-tree-id27066 . -1) (undo-tree-id27067 . -1) (undo-tree-id27068 . -1) (undo-tree-id27069 . -1) (undo-tree-id27070 . -1) (undo-tree-id27071 . -1) (undo-tree-id27072 . -1) (undo-tree-id27073 . -1) (undo-tree-id27074 . -1) (undo-tree-id27075 . -1) (undo-tree-id27076 . -1) (undo-tree-id27077 . -1) (undo-tree-id27078 . -1) (undo-tree-id27079 . -1) (undo-tree-id27080 . -1) (undo-tree-id27081 . -1) (undo-tree-id27082 . -1) (undo-tree-id27083 . -1) (undo-tree-id27084 . -1) (undo-tree-id27085 . -1) (undo-tree-id27086 . -1) (undo-tree-id27087 . -1) (undo-tree-id27088 . -1) (undo-tree-id27089 . -1) (undo-tree-id27090 . -1) (undo-tree-id27091 . -1) (undo-tree-id27092 . -1) (undo-tree-id27093 . -1) (undo-tree-id27094 . -1) (undo-tree-id27095 . -1) (undo-tree-id27096 . -1) (undo-tree-id27097 . -1) (undo-tree-id27098 . -1) (undo-tree-id27099 . -1) (undo-tree-id27100 . -1) (undo-tree-id27101 . -1) (undo-tree-id27102 . -1) (undo-tree-id27103 . -1) (undo-tree-id27104 . -1) (undo-tree-id27105 . -1) (undo-tree-id27106 . -1) (undo-tree-id27107 . -1) (undo-tree-id27108 . -1) 3091) nil (25767 5847 950631 794000) 0 nil])
nil
([nil nil ((#(", which allows you to transform each dataset in the nested dataset before flattening. For example, if you pass the function lambda ds: ds.batch(2) to flat_map(), then it will transform the nested dataset {{1, 2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of tensors of size 2. With that in mind, we are ready to flatten our dataset:" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 54 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 55 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 58 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 61 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 65 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 92 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 93 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 112 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 113 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 114 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 115 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 116 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 117 134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 134 135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 135 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 141 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 150 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 151 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 154 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 155 158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 158 208 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 208 209 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 209 292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 292 293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 293 357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 357 359 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 359 367 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3156) (undo-tree-id28546 . -366) (undo-tree-id28547 . -366) (undo-tree-id28548 . -366) (undo-tree-id28549 . -6) (undo-tree-id28550 . -6) (undo-tree-id28551 . -6) (undo-tree-id28552 . -6) (undo-tree-id28553 . -6) (undo-tree-id28554 . -6) (undo-tree-id28555 . -6) (undo-tree-id28556 . -6) (undo-tree-id28557 . -2) (undo-tree-id28558 . -2) (undo-tree-id28559 . -2) (undo-tree-id28560 . -2) (undo-tree-id28561 . -2) (undo-tree-id28562 . -2) (undo-tree-id28563 . -2) (undo-tree-id28564 . -2) (undo-tree-id28565 . -2) (undo-tree-id28566 . -2) (undo-tree-id28567 . -2) (undo-tree-id28568 . -2) (undo-tree-id28569 . -2) (undo-tree-id28570 . -2) (undo-tree-id28571 . -2) (undo-tree-id28572 . -1) (undo-tree-id28573 . -1) (undo-tree-id28574 . -1) (undo-tree-id28575 . -1) (undo-tree-id28576 . -1) (undo-tree-id28577 . -1) (undo-tree-id28578 . -1) (undo-tree-id28579 . -1) (undo-tree-id28580 . -1) (undo-tree-id28581 . -1) (undo-tree-id28582 . -1) (undo-tree-id28583 . -1) (undo-tree-id28584 . -1) (undo-tree-id28585 . -1) (undo-tree-id28586 . -1) (undo-tree-id28587 . -13) (undo-tree-id28588 . -367) (undo-tree-id28589 . -366) (undo-tree-id28590 . -6) (undo-tree-id28591 . -6) (undo-tree-id28592 . -6) (undo-tree-id28593 . -6) (undo-tree-id28594 . -6) (undo-tree-id28595 . -6) (undo-tree-id28596 . -6) (undo-tree-id28597 . -6) (undo-tree-id28598 . -6) (undo-tree-id28599 . -6) (undo-tree-id28600 . -6) (undo-tree-id28601 . -6) (undo-tree-id28602 . -6) (undo-tree-id28603 . -6) (undo-tree-id28604 . -6) (undo-tree-id28605 . -6) (undo-tree-id28606 . -6) (undo-tree-id28607 . -6) (undo-tree-id28608 . -6) (undo-tree-id28609 . -6) (undo-tree-id28610 . -6) (undo-tree-id28611 . -6) (undo-tree-id28612 . -13) (undo-tree-id28613 . -13) (undo-tree-id28614 . -13) (undo-tree-id28615 . -13) (undo-tree-id28616 . -13) (undo-tree-id28617 . -13) (undo-tree-id28618 . -13) (undo-tree-id28619 . -13) (undo-tree-id28620 . -13) (undo-tree-id28621 . -13) (undo-tree-id28622 . -13) (undo-tree-id28623 . -13) (undo-tree-id28624 . -13) (undo-tree-id28625 . -13) (undo-tree-id28626 . -13) (undo-tree-id28627 . -13) (undo-tree-id28628 . -13) (undo-tree-id28629 . -13) (undo-tree-id28630 . -13) (undo-tree-id28631 . -13) (undo-tree-id28632 . -13) (undo-tree-id28633 . -13) (undo-tree-id28634 . -17) (undo-tree-id28635 . -17) (undo-tree-id28636 . -17) (undo-tree-id28637 . -17) (undo-tree-id28638 . -17) (undo-tree-id28639 . -17) (undo-tree-id28640 . -17) (undo-tree-id28641 . -17) (undo-tree-id28642 . -17) (undo-tree-id28643 . -17) (undo-tree-id28644 . -17) (undo-tree-id28645 . -17) (undo-tree-id28646 . -17) (undo-tree-id28647 . -17) (undo-tree-id28648 . -17) (undo-tree-id28649 . -17) (undo-tree-id28650 . -17) (undo-tree-id28651 . -17) (undo-tree-id28652 . -17) (undo-tree-id28653 . -17) (undo-tree-id28654 . -17) (undo-tree-id28655 . -17) (undo-tree-id28656 . -20) (undo-tree-id28657 . -20) (undo-tree-id28658 . -20) (undo-tree-id28659 . -20) (undo-tree-id28660 . -20) (undo-tree-id28661 . -20) (undo-tree-id28662 . -20) (undo-tree-id28663 . -20) (undo-tree-id28664 . -20) (undo-tree-id28665 . -20) (undo-tree-id28666 . -20) (undo-tree-id28667 . -20) (undo-tree-id28668 . -20) (undo-tree-id28669 . -20) (undo-tree-id28670 . -20) (undo-tree-id28671 . -20) (undo-tree-id28672 . -20) (undo-tree-id28673 . -20) (undo-tree-id28674 . -20) (undo-tree-id28675 . -20) (undo-tree-id28676 . -20) (undo-tree-id28677 . -20) (undo-tree-id28678 . -30) (undo-tree-id28679 . -30) (undo-tree-id28680 . -30) (undo-tree-id28681 . -30) (undo-tree-id28682 . -30) (undo-tree-id28683 . -30) (undo-tree-id28684 . -30) (undo-tree-id28685 . -30) (undo-tree-id28686 . -30) (undo-tree-id28687 . -30) (undo-tree-id28688 . -30) (undo-tree-id28689 . -30) (undo-tree-id28690 . -30) (undo-tree-id28691 . -30) (undo-tree-id28692 . -30) (undo-tree-id28693 . -30) (undo-tree-id28694 . -30) (undo-tree-id28695 . -30) (undo-tree-id28696 . -30) (undo-tree-id28697 . -30) (undo-tree-id28698 . -30) (undo-tree-id28699 . -30) (undo-tree-id28700 . -35) (undo-tree-id28701 . -35) (undo-tree-id28702 . -35) (undo-tree-id28703 . -35) (undo-tree-id28704 . -35) (undo-tree-id28705 . -35) (undo-tree-id28706 . -35) (undo-tree-id28707 . -35) (undo-tree-id28708 . -35) (undo-tree-id28709 . -35) (undo-tree-id28710 . -35) (undo-tree-id28711 . -35) (undo-tree-id28712 . -35) (undo-tree-id28713 . -35) (undo-tree-id28714 . -35) (undo-tree-id28715 . -35) (undo-tree-id28716 . -35) (undo-tree-id28717 . -35) (undo-tree-id28718 . -35) (undo-tree-id28719 . -35) (undo-tree-id28720 . -35) (undo-tree-id28721 . -35) (undo-tree-id28722 . -35) (undo-tree-id28723 . -35) (undo-tree-id28724 . -35) (undo-tree-id28725 . -35) (undo-tree-id28726 . -35) (undo-tree-id28727 . -35) (undo-tree-id28728 . -35) (undo-tree-id28729 . 330) (undo-tree-id28730 . -44) (undo-tree-id28731 . -43) (undo-tree-id28732 . -43) (undo-tree-id28733 . -43) (undo-tree-id28734 . -43) (undo-tree-id28735 . -43) (undo-tree-id28736 . -43) (undo-tree-id28737 . -43) (undo-tree-id28738 . -43) (undo-tree-id28739 . -43) (undo-tree-id28740 . -43) (undo-tree-id28741 . -43) (undo-tree-id28742 . -43) (undo-tree-id28743 . -43) (undo-tree-id28744 . -43) (undo-tree-id28745 . -43) (undo-tree-id28746 . -43) (undo-tree-id28747 . -43) (undo-tree-id28748 . -43) (undo-tree-id28749 . -43) (undo-tree-id28750 . -43) (undo-tree-id28751 . -43) (undo-tree-id28752 . -43) (undo-tree-id28753 . -46) (undo-tree-id28754 . -46) (undo-tree-id28755 . -46) (undo-tree-id28756 . -46) (undo-tree-id28757 . -46) (undo-tree-id28758 . -46) (undo-tree-id28759 . -46) (undo-tree-id28760 . -46) (undo-tree-id28761 . -46) (undo-tree-id28762 . -46) (undo-tree-id28763 . -46) (undo-tree-id28764 . -46) (undo-tree-id28765 . -46) (undo-tree-id28766 . -46) (undo-tree-id28767 . -46) (undo-tree-id28768 . -46) (undo-tree-id28769 . -46) (undo-tree-id28770 . -46) (undo-tree-id28771 . -46) (undo-tree-id28772 . -46) (undo-tree-id28773 . -46) (undo-tree-id28774 . -46) (undo-tree-id28775 . -50) (undo-tree-id28776 . -50) (undo-tree-id28777 . -50) (undo-tree-id28778 . -50) (undo-tree-id28779 . -50) (undo-tree-id28780 . -50) (undo-tree-id28781 . -50) (undo-tree-id28782 . -50) (undo-tree-id28783 . -50) (undo-tree-id28784 . -50) (undo-tree-id28785 . -50) (undo-tree-id28786 . -50) (undo-tree-id28787 . -50) (undo-tree-id28788 . -50) (undo-tree-id28789 . -50) (undo-tree-id28790 . -50) (undo-tree-id28791 . -50) (undo-tree-id28792 . -50) (undo-tree-id28793 . -50) (undo-tree-id28794 . -50) (undo-tree-id28795 . -50) (undo-tree-id28796 . -50) (undo-tree-id28797 . -57) (undo-tree-id28798 . -57) (undo-tree-id28799 . -57) (undo-tree-id28800 . -57) (undo-tree-id28801 . -57) (undo-tree-id28802 . -57) (undo-tree-id28803 . -57) (undo-tree-id28804 . -57) (undo-tree-id28805 . -57) (undo-tree-id28806 . -57) (undo-tree-id28807 . -57) (undo-tree-id28808 . -57) (undo-tree-id28809 . -57) (undo-tree-id28810 . -57) (undo-tree-id28811 . -57) (undo-tree-id28812 . -57) (undo-tree-id28813 . -57) (undo-tree-id28814 . -57) (undo-tree-id28815 . -57) (undo-tree-id28816 . -57) (undo-tree-id28817 . -57) (undo-tree-id28818 . -57) (undo-tree-id28819 . 308) (undo-tree-id28820 . -66) (undo-tree-id28821 . -65) (undo-tree-id28822 . -65) (undo-tree-id28823 . -65) (undo-tree-id28824 . -65) (undo-tree-id28825 . -65) (undo-tree-id28826 . -65) (undo-tree-id28827 . -65) (undo-tree-id28828 . -65) (undo-tree-id28829 . -65) (undo-tree-id28830 . -65) (undo-tree-id28831 . -65) (undo-tree-id28832 . -65) (undo-tree-id28833 . -65) (undo-tree-id28834 . -65) (undo-tree-id28835 . -65) (undo-tree-id28836 . -65) (undo-tree-id28837 . -65) (undo-tree-id28838 . -65) (undo-tree-id28839 . -65) (undo-tree-id28840 . -65) (undo-tree-id28841 . -65) (undo-tree-id28842 . -65) (undo-tree-id28843 . -72) (undo-tree-id28844 . -72) (undo-tree-id28845 . -72) (undo-tree-id28846 . -72) (undo-tree-id28847 . -72) (undo-tree-id28848 . -72) (undo-tree-id28849 . -72) (undo-tree-id28850 . -72) (undo-tree-id28851 . -72) (undo-tree-id28852 . -72) (undo-tree-id28853 . -72) (undo-tree-id28854 . -72) (undo-tree-id28855 . -72) (undo-tree-id28856 . -72) (undo-tree-id28857 . -72) (undo-tree-id28858 . -72) (undo-tree-id28859 . -72) (undo-tree-id28860 . -72) (undo-tree-id28861 . -72) (undo-tree-id28862 . -72) (undo-tree-id28863 . -72) (undo-tree-id28864 . -72) (undo-tree-id28865 . -83) (undo-tree-id28866 . -83) (undo-tree-id28867 . -83) (undo-tree-id28868 . -83) (undo-tree-id28869 . -83) (undo-tree-id28870 . -83) (undo-tree-id28871 . -83) (undo-tree-id28872 . -83) (undo-tree-id28873 . -83) (undo-tree-id28874 . -83) (undo-tree-id28875 . -83) (undo-tree-id28876 . -83) (undo-tree-id28877 . -83) (undo-tree-id28878 . -83) (undo-tree-id28879 . -83) (undo-tree-id28880 . -83) (undo-tree-id28881 . -83) (undo-tree-id28882 . -83) (undo-tree-id28883 . -83) (undo-tree-id28884 . -83) (undo-tree-id28885 . -83) (undo-tree-id28886 . -83) (undo-tree-id28887 . -84) (undo-tree-id28888 . -84) (undo-tree-id28889 . -84) (undo-tree-id28890 . -84) (undo-tree-id28891 . -84) (undo-tree-id28892 . -84) (undo-tree-id28893 . -84) (undo-tree-id28894 . -84) (undo-tree-id28895 . -84) (undo-tree-id28896 . -84) (undo-tree-id28897 . -84) (undo-tree-id28898 . -84) (undo-tree-id28899 . -84) (undo-tree-id28900 . -84) (undo-tree-id28901 . -84) (undo-tree-id28902 . -84) (undo-tree-id28903 . -84) (undo-tree-id28904 . -84) (undo-tree-id28905 . -84) (undo-tree-id28906 . -84) (undo-tree-id28907 . -84) (undo-tree-id28908 . -84) (undo-tree-id28909 . -88) (undo-tree-id28910 . -88) (undo-tree-id28911 . -88) (undo-tree-id28912 . -88) (undo-tree-id28913 . -88) (undo-tree-id28914 . -88) (undo-tree-id28915 . -88) (undo-tree-id28916 . -88) (undo-tree-id28917 . -88) (undo-tree-id28918 . -88) (undo-tree-id28919 . -88) (undo-tree-id28920 . -88) (undo-tree-id28921 . -88) (undo-tree-id28922 . -88) (undo-tree-id28923 . -88) (undo-tree-id28924 . -88) (undo-tree-id28925 . -88) (undo-tree-id28926 . -88) (undo-tree-id28927 . -88) (undo-tree-id28928 . -88) (undo-tree-id28929 . -88) (undo-tree-id28930 . -88) (undo-tree-id28931 . -96) (undo-tree-id28932 . -96) (undo-tree-id28933 . -96) (undo-tree-id28934 . -96) (undo-tree-id28935 . -96) (undo-tree-id28936 . -96) (undo-tree-id28937 . -96) (undo-tree-id28938 . -96) (undo-tree-id28939 . -96) (undo-tree-id28940 . -96) (undo-tree-id28941 . -96) (undo-tree-id28942 . -96) (undo-tree-id28943 . -96) (undo-tree-id28944 . -96) (undo-tree-id28945 . -96) (undo-tree-id28946 . -96) (undo-tree-id28947 . -96) (undo-tree-id28948 . -96) (undo-tree-id28949 . -96) (undo-tree-id28950 . -96) (undo-tree-id28951 . -96) (undo-tree-id28952 . -96) (undo-tree-id28953 . -96) (undo-tree-id28954 . -96) (undo-tree-id28955 . -96) (undo-tree-id28956 . -96) (undo-tree-id28957 . -96) (undo-tree-id28958 . -96) (undo-tree-id28959 . -96) (undo-tree-id28960 . -97) (undo-tree-id28961 . -97) (undo-tree-id28962 . -97) (undo-tree-id28963 . -97) (undo-tree-id28964 . -97) (undo-tree-id28965 . -97) (undo-tree-id28966 . -97) (undo-tree-id28967 . -97) (undo-tree-id28968 . -97) (undo-tree-id28969 . -97) (undo-tree-id28970 . -97) (undo-tree-id28971 . -97) (undo-tree-id28972 . -97) (undo-tree-id28973 . -97) (undo-tree-id28974 . -97) (undo-tree-id28975 . -97) (undo-tree-id28976 . -97) (undo-tree-id28977 . -97) (undo-tree-id28978 . -97) (undo-tree-id28979 . -97) (undo-tree-id28980 . -97) (undo-tree-id28981 . -97) (undo-tree-id28982 . -100) (undo-tree-id28983 . -100) (undo-tree-id28984 . -100) (undo-tree-id28985 . -100) (undo-tree-id28986 . -100) (undo-tree-id28987 . -100) (undo-tree-id28988 . -100) (undo-tree-id28989 . -100) (undo-tree-id28990 . -100) (undo-tree-id28991 . -100) (undo-tree-id28992 . -100) (undo-tree-id28993 . -100) (undo-tree-id28994 . -100) (undo-tree-id28995 . -100) (undo-tree-id28996 . -100) (undo-tree-id28997 . -100) (undo-tree-id28998 . -100) (undo-tree-id28999 . -100) (undo-tree-id29000 . -100) (undo-tree-id29001 . -100) (undo-tree-id29002 . -100) (undo-tree-id29003 . -100) (undo-tree-id29004 . -104) (undo-tree-id29005 . -104) (undo-tree-id29006 . -104) (undo-tree-id29007 . -104) (undo-tree-id29008 . -104) (undo-tree-id29009 . -104) (undo-tree-id29010 . -104) (undo-tree-id29011 . -104) (undo-tree-id29012 . -104) (undo-tree-id29013 . -104) (undo-tree-id29014 . -104) (undo-tree-id29015 . -104) (undo-tree-id29016 . -104) (undo-tree-id29017 . -104) (undo-tree-id29018 . -104) (undo-tree-id29019 . -104) (undo-tree-id29020 . -104) (undo-tree-id29021 . -104) (undo-tree-id29022 . -104) (undo-tree-id29023 . -104) (undo-tree-id29024 . -104) (undo-tree-id29025 . -104) (undo-tree-id29026 . -109) (undo-tree-id29027 . -109) (undo-tree-id29028 . -109) (undo-tree-id29029 . -109) (undo-tree-id29030 . -109) (undo-tree-id29031 . -109) (undo-tree-id29032 . -109) (undo-tree-id29033 . -109) (undo-tree-id29034 . -113) (undo-tree-id29035 . -113) (undo-tree-id29036 . -113) (undo-tree-id29037 . -113) (undo-tree-id29038 . -113) (undo-tree-id29039 . -113) (undo-tree-id29040 . -113) (undo-tree-id29041 . -113) (undo-tree-id29042 . -122) (undo-tree-id29043 . -122) (undo-tree-id29044 . -122) (undo-tree-id29045 . -122) (undo-tree-id29046 . -122) (undo-tree-id29047 . -122) (undo-tree-id29048 . -122) (undo-tree-id29049 . -122) (undo-tree-id29050 . -129) (undo-tree-id29051 . -129) (undo-tree-id29052 . -129) (undo-tree-id29053 . -129) (undo-tree-id29054 . -129) (undo-tree-id29055 . -129) (undo-tree-id29056 . -129) (undo-tree-id29057 . -129) (undo-tree-id29058 . -129) (undo-tree-id29059 . -129) (undo-tree-id29060 . -129) (undo-tree-id29061 . -129) (undo-tree-id29062 . -129) (undo-tree-id29063 . -129) (undo-tree-id29064 . -129) (undo-tree-id29065 . -129) (undo-tree-id29066 . -129) (undo-tree-id29067 . -129) (undo-tree-id29068 . -129) (undo-tree-id29069 . -129) (undo-tree-id29070 . -129) (undo-tree-id29071 . -129) (undo-tree-id29072 . 236) (undo-tree-id29073 . -133) (undo-tree-id29074 . -132) (undo-tree-id29075 . -132) (undo-tree-id29076 . -132) (undo-tree-id29077 . -132) (undo-tree-id29078 . -132) (undo-tree-id29079 . -132) (undo-tree-id29080 . -132) (undo-tree-id29081 . -132) (undo-tree-id29082 . -132) (undo-tree-id29083 . -132) (undo-tree-id29084 . -132) (undo-tree-id29085 . -132) (undo-tree-id29086 . -132) (undo-tree-id29087 . -132) (undo-tree-id29088 . -132) (undo-tree-id29089 . -132) (undo-tree-id29090 . -132) (undo-tree-id29091 . -132) (undo-tree-id29092 . -132) (undo-tree-id29093 . -132) (undo-tree-id29094 . -132) (undo-tree-id29095 . -132) (undo-tree-id29096 . -132) (undo-tree-id29097 . -132) (undo-tree-id29098 . -132) (undo-tree-id29099 . -132) (undo-tree-id29100 . -132) (undo-tree-id29101 . -132) (undo-tree-id29102 . -132) (undo-tree-id29103 . -132) (undo-tree-id29104 . -132) (undo-tree-id29105 . -132) (undo-tree-id29106 . -132) (undo-tree-id29107 . -132) (undo-tree-id29108 . -132) (undo-tree-id29109 . -132) (undo-tree-id29110 . -132) (undo-tree-id29111 . -132) (undo-tree-id29112 . -132) (undo-tree-id29113 . -132) (undo-tree-id29114 . -132) (undo-tree-id29115 . -132) (undo-tree-id29116 . -132) (undo-tree-id29117 . -133) (undo-tree-id29118 . -133) (undo-tree-id29119 . -133) (undo-tree-id29120 . -133) (undo-tree-id29121 . -133) (undo-tree-id29122 . -133) (undo-tree-id29123 . -133) (undo-tree-id29124 . -133) (undo-tree-id29125 . -133) (undo-tree-id29126 . -133) (undo-tree-id29127 . -133) (undo-tree-id29128 . -133) (undo-tree-id29129 . -133) (undo-tree-id29130 . -133) (undo-tree-id29131 . -133) (undo-tree-id29132 . -133) (undo-tree-id29133 . -133) (undo-tree-id29134 . -133) (undo-tree-id29135 . -133) (undo-tree-id29136 . -133) (undo-tree-id29137 . -133) (undo-tree-id29138 . -133) (undo-tree-id29139 . 232) (undo-tree-id29140 . -137) (undo-tree-id29141 . -136) (undo-tree-id29142 . -136) (undo-tree-id29143 . -136) (undo-tree-id29144 . -136) (undo-tree-id29145 . -136) (undo-tree-id29146 . -136) (undo-tree-id29147 . -136) (undo-tree-id29148 . -136) (undo-tree-id29149 . -136) (undo-tree-id29150 . -136) (undo-tree-id29151 . -136) (undo-tree-id29152 . -136) (undo-tree-id29153 . -136) (undo-tree-id29154 . -136) (undo-tree-id29155 . -136) (undo-tree-id29156 . -136) (undo-tree-id29157 . -136) (undo-tree-id29158 . -136) (undo-tree-id29159 . -136) (undo-tree-id29160 . -136) (undo-tree-id29161 . -136) (undo-tree-id29162 . -136) (undo-tree-id29163 . -136) (undo-tree-id29164 . -136) (undo-tree-id29165 . -136) (undo-tree-id29166 . -136) (undo-tree-id29167 . -136) (undo-tree-id29168 . -136) (undo-tree-id29169 . -136) (undo-tree-id29170 . -137) (undo-tree-id29171 . -137) (undo-tree-id29172 . -137) (undo-tree-id29173 . -137) (undo-tree-id29174 . -137) (undo-tree-id29175 . -137) (undo-tree-id29176 . -137) (undo-tree-id29177 . -137) (undo-tree-id29178 . -137) (undo-tree-id29179 . -137) (undo-tree-id29180 . -137) (undo-tree-id29181 . -137) (undo-tree-id29182 . -137) (undo-tree-id29183 . -137) (undo-tree-id29184 . -137) (undo-tree-id29185 . -137) (undo-tree-id29186 . -137) (undo-tree-id29187 . -137) (undo-tree-id29188 . -137) (undo-tree-id29189 . -137) (undo-tree-id29190 . -137) (undo-tree-id29191 . -137) (undo-tree-id29192 . -142) (undo-tree-id29193 . -142) (undo-tree-id29194 . -142) (undo-tree-id29195 . -142) (undo-tree-id29196 . -142) (undo-tree-id29197 . -142) (undo-tree-id29198 . -142) (undo-tree-id29199 . -142) (undo-tree-id29200 . -142) (undo-tree-id29201 . -142) (undo-tree-id29202 . -142) (undo-tree-id29203 . -142) (undo-tree-id29204 . -142) (undo-tree-id29205 . -142) (undo-tree-id29206 . -142) (undo-tree-id29207 . -142) (undo-tree-id29208 . -142) (undo-tree-id29209 . -142) (undo-tree-id29210 . -142) (undo-tree-id29211 . -142) (undo-tree-id29212 . -142) (undo-tree-id29213 . -142) (undo-tree-id29214 . -143) (undo-tree-id29215 . -143) (undo-tree-id29216 . -143) (undo-tree-id29217 . -143) (undo-tree-id29218 . -143) (undo-tree-id29219 . -143) (undo-tree-id29220 . -143) (undo-tree-id29221 . -143) (undo-tree-id29222 . -143) (undo-tree-id29223 . -143) (undo-tree-id29224 . -143) (undo-tree-id29225 . -143) (undo-tree-id29226 . -143) (undo-tree-id29227 . -143) (undo-tree-id29228 . -143) (undo-tree-id29229 . -143) (undo-tree-id29230 . -143) (undo-tree-id29231 . -143) (undo-tree-id29232 . -143) (undo-tree-id29233 . -143) (undo-tree-id29234 . -143) (undo-tree-id29235 . -143) (undo-tree-id29236 . -144) (undo-tree-id29237 . -144) (undo-tree-id29238 . -144) (undo-tree-id29239 . -144) (undo-tree-id29240 . -144) (undo-tree-id29241 . -144) (undo-tree-id29242 . -144) (undo-tree-id29243 . -144) (undo-tree-id29244 . -144) (undo-tree-id29245 . -144) (undo-tree-id29246 . -144) (undo-tree-id29247 . -144) (undo-tree-id29248 . -144) (undo-tree-id29249 . -144) (undo-tree-id29250 . -144) (undo-tree-id29251 . -144) (undo-tree-id29252 . -144) (undo-tree-id29253 . -144) (undo-tree-id29254 . -144) (undo-tree-id29255 . -144) (undo-tree-id29256 . -144) (undo-tree-id29257 . -144) (undo-tree-id29258 . -144) (undo-tree-id29259 . -144) (undo-tree-id29260 . -144) (undo-tree-id29261 . -144) (undo-tree-id29262 . -144) (undo-tree-id29263 . -144) (undo-tree-id29264 . -144) (undo-tree-id29265 . -145) (undo-tree-id29266 . -145) (undo-tree-id29267 . -145) (undo-tree-id29268 . -145) (undo-tree-id29269 . -145) (undo-tree-id29270 . -145) (undo-tree-id29271 . -145) (undo-tree-id29272 . -145) (undo-tree-id29273 . -145) (undo-tree-id29274 . -145) (undo-tree-id29275 . -145) (undo-tree-id29276 . -145) (undo-tree-id29277 . -145) (undo-tree-id29278 . -145) (undo-tree-id29279 . -145) (undo-tree-id29280 . -145) (undo-tree-id29281 . -145) (undo-tree-id29282 . -145) (undo-tree-id29283 . -145) (undo-tree-id29284 . -145) (undo-tree-id29285 . -145) (undo-tree-id29286 . -145) (undo-tree-id29287 . -148) (undo-tree-id29288 . -148) (undo-tree-id29289 . -148) (undo-tree-id29290 . -148) (undo-tree-id29291 . -148) (undo-tree-id29292 . -148) (undo-tree-id29293 . -148) (undo-tree-id29294 . -148) (undo-tree-id29295 . -148) (undo-tree-id29296 . -148) (undo-tree-id29297 . -148) (undo-tree-id29298 . -148) (undo-tree-id29299 . -148) (undo-tree-id29300 . -148) (undo-tree-id29301 . -148) (undo-tree-id29302 . -148) (undo-tree-id29303 . -148) (undo-tree-id29304 . -148) (undo-tree-id29305 . -148) (undo-tree-id29306 . -148) (undo-tree-id29307 . -148) (undo-tree-id29308 . -148) (undo-tree-id29309 . -153) (undo-tree-id29310 . -153) (undo-tree-id29311 . -153) (undo-tree-id29312 . -153) (undo-tree-id29313 . -153) (undo-tree-id29314 . -153) (undo-tree-id29315 . -153) (undo-tree-id29316 . -153) (undo-tree-id29317 . -153) (undo-tree-id29318 . -153) (undo-tree-id29319 . -153) (undo-tree-id29320 . -153) (undo-tree-id29321 . -153) (undo-tree-id29322 . -153) (undo-tree-id29323 . -153) (undo-tree-id29324 . -153) (undo-tree-id29325 . -153) (undo-tree-id29326 . -153) (undo-tree-id29327 . -153) (undo-tree-id29328 . -153) (undo-tree-id29329 . -153) (undo-tree-id29330 . -153) (undo-tree-id29331 . -154) (undo-tree-id29332 . -154) (undo-tree-id29333 . -154) (undo-tree-id29334 . -154) (undo-tree-id29335 . -154) (undo-tree-id29336 . -154) (undo-tree-id29337 . -154) (undo-tree-id29338 . -154) (undo-tree-id29339 . -154) (undo-tree-id29340 . -154) (undo-tree-id29341 . -154) (undo-tree-id29342 . -154) (undo-tree-id29343 . -154) (undo-tree-id29344 . -154) (undo-tree-id29345 . -154) (undo-tree-id29346 . -154) (undo-tree-id29347 . -154) (undo-tree-id29348 . -154) (undo-tree-id29349 . -154) (undo-tree-id29350 . -154) (undo-tree-id29351 . -154) (undo-tree-id29352 . -154) (undo-tree-id29353 . -157) (undo-tree-id29354 . -157) (undo-tree-id29355 . -157) (undo-tree-id29356 . -157) (undo-tree-id29357 . -157) (undo-tree-id29358 . -157) (undo-tree-id29359 . -157) (undo-tree-id29360 . -157) (undo-tree-id29361 . -157) (undo-tree-id29362 . -157) (undo-tree-id29363 . -157) (undo-tree-id29364 . -157) (undo-tree-id29365 . -157) (undo-tree-id29366 . -157) (undo-tree-id29367 . -157) (undo-tree-id29368 . -157) (undo-tree-id29369 . -157) (undo-tree-id29370 . -157) (undo-tree-id29371 . -157) (undo-tree-id29372 . -157) (undo-tree-id29373 . -157) (undo-tree-id29374 . -157) (undo-tree-id29375 . -160) (undo-tree-id29376 . -160) (undo-tree-id29377 . -160) (undo-tree-id29378 . -160) (undo-tree-id29379 . -160) (undo-tree-id29380 . -160) (undo-tree-id29381 . -160) (undo-tree-id29382 . -160) (undo-tree-id29383 . -160) (undo-tree-id29384 . -160) (undo-tree-id29385 . -160) (undo-tree-id29386 . -160) (undo-tree-id29387 . -160) (undo-tree-id29388 . -160) (undo-tree-id29389 . -160) (undo-tree-id29390 . -160) (undo-tree-id29391 . -160) (undo-tree-id29392 . -160) (undo-tree-id29393 . -160) (undo-tree-id29394 . -160) (undo-tree-id29395 . -160) (undo-tree-id29396 . -160) (undo-tree-id29397 . -165) (undo-tree-id29398 . -165) (undo-tree-id29399 . -165) (undo-tree-id29400 . -165) (undo-tree-id29401 . -165) (undo-tree-id29402 . -165) (undo-tree-id29403 . -165) (undo-tree-id29404 . -165) (undo-tree-id29405 . -165) (undo-tree-id29406 . -165) (undo-tree-id29407 . -165) (undo-tree-id29408 . -165) (undo-tree-id29409 . -165) (undo-tree-id29410 . -165) (undo-tree-id29411 . -165) (undo-tree-id29412 . -165) (undo-tree-id29413 . -165) (undo-tree-id29414 . -165) (undo-tree-id29415 . -165) (undo-tree-id29416 . -165) (undo-tree-id29417 . -165) (undo-tree-id29418 . -165) (undo-tree-id29419 . -168) (undo-tree-id29420 . -168) (undo-tree-id29421 . -168) (undo-tree-id29422 . -168) (undo-tree-id29423 . -168) (undo-tree-id29424 . -168) (undo-tree-id29425 . -168) (undo-tree-id29426 . -168) (undo-tree-id29427 . -168) (undo-tree-id29428 . -168) (undo-tree-id29429 . -168) (undo-tree-id29430 . -168) (undo-tree-id29431 . -168) (undo-tree-id29432 . -168) (undo-tree-id29433 . -168) (undo-tree-id29434 . -168) (undo-tree-id29435 . -168) (undo-tree-id29436 . -168) (undo-tree-id29437 . -168) (undo-tree-id29438 . -168) (undo-tree-id29439 . -168) (undo-tree-id29440 . -168) (undo-tree-id29441 . -173) (undo-tree-id29442 . -173) (undo-tree-id29443 . -173) (undo-tree-id29444 . -173) (undo-tree-id29445 . -173) (undo-tree-id29446 . -173) (undo-tree-id29447 . -173) (undo-tree-id29448 . -173) (undo-tree-id29449 . -173) (undo-tree-id29450 . -173) (undo-tree-id29451 . -173) (undo-tree-id29452 . -173) (undo-tree-id29453 . -173) (undo-tree-id29454 . -173) (undo-tree-id29455 . -173) (undo-tree-id29456 . -173) (undo-tree-id29457 . -173) (undo-tree-id29458 . -173) (undo-tree-id29459 . -173) (undo-tree-id29460 . -173) (undo-tree-id29461 . -173) (undo-tree-id29462 . -173) (undo-tree-id29463 . -183) (undo-tree-id29464 . -183) (undo-tree-id29465 . -183) (undo-tree-id29466 . -183) (undo-tree-id29467 . -183) (undo-tree-id29468 . -183) (undo-tree-id29469 . -183) (undo-tree-id29470 . -183) (undo-tree-id29471 . -183) (undo-tree-id29472 . -183) (undo-tree-id29473 . -183) (undo-tree-id29474 . -183) (undo-tree-id29475 . -183) (undo-tree-id29476 . -183) (undo-tree-id29477 . -183) (undo-tree-id29478 . -183) (undo-tree-id29479 . -183) (undo-tree-id29480 . -183) (undo-tree-id29481 . -183) (undo-tree-id29482 . -183) (undo-tree-id29483 . -183) (undo-tree-id29484 . -183) (undo-tree-id29485 . -187) (undo-tree-id29486 . -187) (undo-tree-id29487 . -187) (undo-tree-id29488 . -187) (undo-tree-id29489 . -187) (undo-tree-id29490 . -187) (undo-tree-id29491 . -187) (undo-tree-id29492 . -187) (undo-tree-id29493 . -187) (undo-tree-id29494 . -187) (undo-tree-id29495 . -187) (undo-tree-id29496 . -187) (undo-tree-id29497 . -187) (undo-tree-id29498 . -187) (undo-tree-id29499 . -187) (undo-tree-id29500 . -187) (undo-tree-id29501 . -187) (undo-tree-id29502 . -187) (undo-tree-id29503 . -187) (undo-tree-id29504 . -187) (undo-tree-id29505 . -187) (undo-tree-id29506 . -187) (undo-tree-id29507 . -194) (undo-tree-id29508 . -194) (undo-tree-id29509 . -194) (undo-tree-id29510 . -194) (undo-tree-id29511 . -194) (undo-tree-id29512 . -194) (undo-tree-id29513 . -194) (undo-tree-id29514 . -194) (undo-tree-id29515 . -194) (undo-tree-id29516 . -194) (undo-tree-id29517 . -194) (undo-tree-id29518 . -194) (undo-tree-id29519 . -194) (undo-tree-id29520 . -194) (undo-tree-id29521 . -194) (undo-tree-id29522 . -194) (undo-tree-id29523 . -194) (undo-tree-id29524 . -194) (undo-tree-id29525 . -194) (undo-tree-id29526 . -194) (undo-tree-id29527 . -194) (undo-tree-id29528 . -194) (undo-tree-id29529 . 171) (undo-tree-id29530 . -203) (undo-tree-id29531 . -202) (undo-tree-id29532 . -202) (undo-tree-id29533 . -202) (undo-tree-id29534 . -202) (undo-tree-id29535 . -202) (undo-tree-id29536 . -202) (undo-tree-id29537 . -202) (undo-tree-id29538 . -202) (undo-tree-id29539 . -202) (undo-tree-id29540 . -202) (undo-tree-id29541 . -202) (undo-tree-id29542 . -202) (undo-tree-id29543 . -202) (undo-tree-id29544 . -202) (undo-tree-id29545 . -202) (undo-tree-id29546 . -202) (undo-tree-id29547 . -202) (undo-tree-id29548 . -202) (undo-tree-id29549 . -202) (undo-tree-id29550 . -202) (undo-tree-id29551 . -202) (undo-tree-id29552 . -202) (undo-tree-id29553 . -205) (undo-tree-id29554 . -205) (undo-tree-id29555 . -205) (undo-tree-id29556 . -205) (undo-tree-id29557 . -205) (undo-tree-id29558 . -205) (undo-tree-id29559 . -205) (undo-tree-id29560 . -205) (undo-tree-id29561 . -205) (undo-tree-id29562 . -205) (undo-tree-id29563 . -205) (undo-tree-id29564 . -205) (undo-tree-id29565 . -205) (undo-tree-id29566 . -205) (undo-tree-id29567 . -205) (undo-tree-id29568 . -205) (undo-tree-id29569 . -205) (undo-tree-id29570 . -205) (undo-tree-id29571 . -205) (undo-tree-id29572 . -205) (undo-tree-id29573 . -205) (undo-tree-id29574 . -205) (undo-tree-id29575 . -206) (undo-tree-id29576 . -206) (undo-tree-id29577 . -206) (undo-tree-id29578 . -206) (undo-tree-id29579 . -206) (undo-tree-id29580 . -206) (undo-tree-id29581 . -206) (undo-tree-id29582 . -206) (undo-tree-id29583 . -206) (undo-tree-id29584 . -206) (undo-tree-id29585 . -206) (undo-tree-id29586 . -206) (undo-tree-id29587 . -206) (undo-tree-id29588 . -206) (undo-tree-id29589 . -206) (undo-tree-id29590 . -206) (undo-tree-id29591 . -206) (undo-tree-id29592 . -206) (undo-tree-id29593 . -206) (undo-tree-id29594 . -206) (undo-tree-id29595 . -206) (undo-tree-id29596 . -206) (undo-tree-id29597 . -207) (undo-tree-id29598 . -207) (undo-tree-id29599 . -207) (undo-tree-id29600 . -207) (undo-tree-id29601 . -207) (undo-tree-id29602 . -207) (undo-tree-id29603 . -207) (undo-tree-id29604 . -207) (undo-tree-id29605 . -207) (undo-tree-id29606 . -207) (undo-tree-id29607 . -207) (undo-tree-id29608 . -207) (undo-tree-id29609 . -207) (undo-tree-id29610 . -207) (undo-tree-id29611 . -207) (undo-tree-id29612 . -207) (undo-tree-id29613 . -207) (undo-tree-id29614 . -207) (undo-tree-id29615 . -207) (undo-tree-id29616 . -207) (undo-tree-id29617 . -207) (undo-tree-id29618 . -207) (undo-tree-id29619 . -209) (undo-tree-id29620 . -209) (undo-tree-id29621 . -209) (undo-tree-id29622 . -209) (undo-tree-id29623 . -209) (undo-tree-id29624 . -209) (undo-tree-id29625 . -209) (undo-tree-id29626 . -209) (undo-tree-id29627 . -209) (undo-tree-id29628 . -209) (undo-tree-id29629 . -209) (undo-tree-id29630 . -209) (undo-tree-id29631 . -209) (undo-tree-id29632 . -209) (undo-tree-id29633 . -209) (undo-tree-id29634 . -209) (undo-tree-id29635 . -209) (undo-tree-id29636 . -209) (undo-tree-id29637 . -209) (undo-tree-id29638 . -209) (undo-tree-id29639 . -209) (undo-tree-id29640 . -209) (undo-tree-id29641 . -211) (undo-tree-id29642 . -211) (undo-tree-id29643 . -211) (undo-tree-id29644 . -211) (undo-tree-id29645 . -211) (undo-tree-id29646 . -211) (undo-tree-id29647 . -211) (undo-tree-id29648 . -211) (undo-tree-id29649 . -211) (undo-tree-id29650 . -211) (undo-tree-id29651 . -211) (undo-tree-id29652 . -211) (undo-tree-id29653 . -211) (undo-tree-id29654 . -211) (undo-tree-id29655 . -211) (undo-tree-id29656 . -211) (undo-tree-id29657 . -211) (undo-tree-id29658 . -211) (undo-tree-id29659 . -211) (undo-tree-id29660 . -211) (undo-tree-id29661 . -211) (undo-tree-id29662 . -211) (undo-tree-id29663 . -213) (undo-tree-id29664 . -213) (undo-tree-id29665 . -213) (undo-tree-id29666 . -213) (undo-tree-id29667 . -213) (undo-tree-id29668 . -213) (undo-tree-id29669 . -213) (undo-tree-id29670 . -213) (undo-tree-id29671 . -213) (undo-tree-id29672 . -213) (undo-tree-id29673 . -213) (undo-tree-id29674 . -213) (undo-tree-id29675 . -213) (undo-tree-id29676 . -213) (undo-tree-id29677 . -213) (undo-tree-id29678 . -213) (undo-tree-id29679 . -213) (undo-tree-id29680 . -213) (undo-tree-id29681 . -213) (undo-tree-id29682 . -213) (undo-tree-id29683 . -213) (undo-tree-id29684 . -213) (undo-tree-id29685 . -214) (undo-tree-id29686 . -214) (undo-tree-id29687 . -214) (undo-tree-id29688 . -214) (undo-tree-id29689 . -214) (undo-tree-id29690 . -214) (undo-tree-id29691 . -214) (undo-tree-id29692 . -214) (undo-tree-id29693 . -214) (undo-tree-id29694 . -214) (undo-tree-id29695 . -214) (undo-tree-id29696 . -214) (undo-tree-id29697 . -214) (undo-tree-id29698 . -214) (undo-tree-id29699 . -214) (undo-tree-id29700 . -214) (undo-tree-id29701 . -214) (undo-tree-id29702 . -214) (undo-tree-id29703 . -214) (undo-tree-id29704 . -214) (undo-tree-id29705 . -214) (undo-tree-id29706 . -214) (undo-tree-id29707 . -215) (undo-tree-id29708 . -215) (undo-tree-id29709 . -215) (undo-tree-id29710 . -215) (undo-tree-id29711 . -215) (undo-tree-id29712 . -215) (undo-tree-id29713 . -215) (undo-tree-id29714 . -215) (undo-tree-id29715 . -215) (undo-tree-id29716 . -215) (undo-tree-id29717 . -215) (undo-tree-id29718 . -215) (undo-tree-id29719 . -215) (undo-tree-id29720 . -215) (undo-tree-id29721 . -215) (undo-tree-id29722 . -215) (undo-tree-id29723 . -215) (undo-tree-id29724 . -215) (undo-tree-id29725 . -215) (undo-tree-id29726 . -215) (undo-tree-id29727 . -215) (undo-tree-id29728 . -215) (undo-tree-id29729 . -217) (undo-tree-id29730 . -217) (undo-tree-id29731 . -217) (undo-tree-id29732 . -217) (undo-tree-id29733 . -217) (undo-tree-id29734 . -217) (undo-tree-id29735 . -217) (undo-tree-id29736 . -217) (undo-tree-id29737 . -217) (undo-tree-id29738 . -217) (undo-tree-id29739 . -217) (undo-tree-id29740 . -217) (undo-tree-id29741 . -217) (undo-tree-id29742 . -217) (undo-tree-id29743 . -217) (undo-tree-id29744 . -217) (undo-tree-id29745 . -217) (undo-tree-id29746 . -217) (undo-tree-id29747 . -217) (undo-tree-id29748 . -217) (undo-tree-id29749 . -217) (undo-tree-id29750 . -217) (undo-tree-id29751 . -218) (undo-tree-id29752 . -218) (undo-tree-id29753 . -218) (undo-tree-id29754 . -218) (undo-tree-id29755 . -218) (undo-tree-id29756 . -218) (undo-tree-id29757 . -218) (undo-tree-id29758 . -218) (undo-tree-id29759 . -218) (undo-tree-id29760 . -218) (undo-tree-id29761 . -218) (undo-tree-id29762 . -218) (undo-tree-id29763 . -218) (undo-tree-id29764 . -218) (undo-tree-id29765 . -218) (undo-tree-id29766 . -218) (undo-tree-id29767 . -218) (undo-tree-id29768 . -218) (undo-tree-id29769 . -218) (undo-tree-id29770 . -218) (undo-tree-id29771 . -218) (undo-tree-id29772 . -218) (undo-tree-id29773 . -220) (undo-tree-id29774 . -220) (undo-tree-id29775 . -220) (undo-tree-id29776 . -220) (undo-tree-id29777 . -220) (undo-tree-id29778 . -220) (undo-tree-id29779 . -220) (undo-tree-id29780 . -220) (undo-tree-id29781 . -220) (undo-tree-id29782 . -220) (undo-tree-id29783 . -220) (undo-tree-id29784 . -220) (undo-tree-id29785 . -220) (undo-tree-id29786 . -220) (undo-tree-id29787 . -220) (undo-tree-id29788 . -220) (undo-tree-id29789 . -220) (undo-tree-id29790 . -220) (undo-tree-id29791 . -220) (undo-tree-id29792 . -220) (undo-tree-id29793 . -220) (undo-tree-id29794 . -220) (undo-tree-id29795 . -221) (undo-tree-id29796 . -221) (undo-tree-id29797 . -221) (undo-tree-id29798 . -221) (undo-tree-id29799 . -221) (undo-tree-id29800 . -221) (undo-tree-id29801 . -221) (undo-tree-id29802 . -221) (undo-tree-id29803 . -221) (undo-tree-id29804 . -221) (undo-tree-id29805 . -221) (undo-tree-id29806 . -221) (undo-tree-id29807 . -221) (undo-tree-id29808 . -221) (undo-tree-id29809 . -221) (undo-tree-id29810 . -221) (undo-tree-id29811 . -221) (undo-tree-id29812 . -221) (undo-tree-id29813 . -221) (undo-tree-id29814 . -221) (undo-tree-id29815 . -221) (undo-tree-id29816 . -221) (undo-tree-id29817 . -223) (undo-tree-id29818 . -223) (undo-tree-id29819 . -223) (undo-tree-id29820 . -223) (undo-tree-id29821 . -223) (undo-tree-id29822 . -223) (undo-tree-id29823 . -223) (undo-tree-id29824 . -223) (undo-tree-id29825 . -223) (undo-tree-id29826 . -223) (undo-tree-id29827 . -223) (undo-tree-id29828 . -223) (undo-tree-id29829 . -223) (undo-tree-id29830 . -223) (undo-tree-id29831 . -223) (undo-tree-id29832 . -223) (undo-tree-id29833 . -223) (undo-tree-id29834 . -223) (undo-tree-id29835 . -223) (undo-tree-id29836 . -223) (undo-tree-id29837 . -223) (undo-tree-id29838 . -223) (undo-tree-id29839 . -225) (undo-tree-id29840 . -225) (undo-tree-id29841 . -225) (undo-tree-id29842 . -225) (undo-tree-id29843 . -225) (undo-tree-id29844 . -225) (undo-tree-id29845 . -225) (undo-tree-id29846 . -225) (undo-tree-id29847 . -230) (undo-tree-id29848 . -230) (undo-tree-id29849 . -230) (undo-tree-id29850 . -230) (undo-tree-id29851 . -230) (undo-tree-id29852 . -230) (undo-tree-id29853 . -230) (undo-tree-id29854 . -230) (undo-tree-id29855 . -234) (undo-tree-id29856 . -234) (undo-tree-id29857 . -234) (undo-tree-id29858 . -234) (undo-tree-id29859 . -234) (undo-tree-id29860 . -234) (undo-tree-id29861 . -234) (undo-tree-id29862 . -234) (undo-tree-id29863 . -239) (undo-tree-id29864 . -239) (undo-tree-id29865 . -239) (undo-tree-id29866 . -239) (undo-tree-id29867 . -239) (undo-tree-id29868 . -239) (undo-tree-id29869 . -239) (undo-tree-id29870 . -239) (undo-tree-id29871 . 126) (undo-tree-id29872 . -248) (undo-tree-id29873 . -247) (undo-tree-id29874 . -247) (undo-tree-id29875 . -247) (undo-tree-id29876 . -247) (undo-tree-id29877 . -247) (undo-tree-id29878 . -247) (undo-tree-id29879 . -247) (undo-tree-id29880 . -247) (undo-tree-id29881 . -250) (undo-tree-id29882 . -250) (undo-tree-id29883 . -250) (undo-tree-id29884 . -250) (undo-tree-id29885 . -250) (undo-tree-id29886 . -250) (undo-tree-id29887 . -250) (undo-tree-id29888 . -250) (undo-tree-id29889 . -251) (undo-tree-id29890 . -251) (undo-tree-id29891 . -251) (undo-tree-id29892 . -251) (undo-tree-id29893 . -251) (undo-tree-id29894 . -251) (undo-tree-id29895 . -251) (undo-tree-id29896 . -251) (undo-tree-id29897 . -252) (undo-tree-id29898 . -252) (undo-tree-id29899 . -252) (undo-tree-id29900 . -252) (undo-tree-id29901 . -252) (undo-tree-id29902 . -252) (undo-tree-id29903 . -252) (undo-tree-id29904 . -252) (undo-tree-id29905 . -254) (undo-tree-id29906 . -254) (undo-tree-id29907 . -254) (undo-tree-id29908 . -254) (undo-tree-id29909 . -254) (undo-tree-id29910 . -254) (undo-tree-id29911 . -254) (undo-tree-id29912 . -254) (undo-tree-id29913 . -256) (undo-tree-id29914 . -256) (undo-tree-id29915 . -256) (undo-tree-id29916 . -256) (undo-tree-id29917 . -256) (undo-tree-id29918 . -256) (undo-tree-id29919 . -256) (undo-tree-id29920 . -256) (undo-tree-id29921 . -258) (undo-tree-id29922 . -258) (undo-tree-id29923 . -258) (undo-tree-id29924 . -258) (undo-tree-id29925 . -258) (undo-tree-id29926 . -258) (undo-tree-id29927 . -258) (undo-tree-id29928 . -258) (undo-tree-id29929 . -259) (undo-tree-id29930 . -259) (undo-tree-id29931 . -259) (undo-tree-id29932 . -259) (undo-tree-id29933 . -259) (undo-tree-id29934 . -259) (undo-tree-id29935 . -259) (undo-tree-id29936 . -259) (undo-tree-id29937 . -259) (undo-tree-id29938 . -259) (undo-tree-id29939 . -259) (undo-tree-id29940 . -259) (undo-tree-id29941 . -259) (undo-tree-id29942 . -259) (undo-tree-id29943 . -259) (undo-tree-id29944 . -259) (undo-tree-id29945 . -259) (undo-tree-id29946 . -259) (undo-tree-id29947 . -259) (undo-tree-id29948 . -259) (undo-tree-id29949 . -259) (undo-tree-id29950 . -259) (undo-tree-id29951 . -260) (undo-tree-id29952 . -260) (undo-tree-id29953 . -260) (undo-tree-id29954 . -260) (undo-tree-id29955 . -260) (undo-tree-id29956 . -260) (undo-tree-id29957 . -260) (undo-tree-id29958 . -260) (undo-tree-id29959 . -260) (undo-tree-id29960 . -260) (undo-tree-id29961 . -260) (undo-tree-id29962 . -260) (undo-tree-id29963 . -260) (undo-tree-id29964 . -260) (undo-tree-id29965 . -260) (undo-tree-id29966 . -260) (undo-tree-id29967 . -260) (undo-tree-id29968 . -260) (undo-tree-id29969 . -260) (undo-tree-id29970 . -260) (undo-tree-id29971 . -260) (undo-tree-id29972 . -260) (undo-tree-id29973 . -260) (undo-tree-id29974 . -260) (undo-tree-id29975 . -260) (undo-tree-id29976 . -260) (undo-tree-id29977 . -260) (undo-tree-id29978 . -260) (undo-tree-id29979 . -260) (undo-tree-id29980 . -262) (undo-tree-id29981 . -262) (undo-tree-id29982 . -262) (undo-tree-id29983 . -262) (undo-tree-id29984 . -262) (undo-tree-id29985 . -262) (undo-tree-id29986 . -262) (undo-tree-id29987 . -262) (undo-tree-id29988 . -264) (undo-tree-id29989 . -264) (undo-tree-id29990 . -264) (undo-tree-id29991 . -264) (undo-tree-id29992 . -264) (undo-tree-id29993 . -264) (undo-tree-id29994 . -264) (undo-tree-id29995 . -264) (undo-tree-id29996 . -266) (undo-tree-id29997 . -266) (undo-tree-id29998 . -266) (undo-tree-id29999 . -266) (undo-tree-id30000 . -266) (undo-tree-id30001 . -266) (undo-tree-id30002 . -266) (undo-tree-id30003 . -266) (undo-tree-id30004 . -267) (undo-tree-id30005 . -267) (undo-tree-id30006 . -267) (undo-tree-id30007 . -267) (undo-tree-id30008 . -267) (undo-tree-id30009 . -267) (undo-tree-id30010 . -267) (undo-tree-id30011 . -267) (undo-tree-id30012 . -268) (undo-tree-id30013 . -268) (undo-tree-id30014 . -268) (undo-tree-id30015 . -268) (undo-tree-id30016 . -268) (undo-tree-id30017 . -268) (undo-tree-id30018 . -268) (undo-tree-id30019 . -268) (undo-tree-id30020 . -270) (undo-tree-id30021 . -270) (undo-tree-id30022 . -270) (undo-tree-id30023 . -270) (undo-tree-id30024 . -270) (undo-tree-id30025 . -270) (undo-tree-id30026 . -270) (undo-tree-id30027 . -270) (undo-tree-id30028 . -273) (undo-tree-id30029 . -273) (undo-tree-id30030 . -273) (undo-tree-id30031 . -273) (undo-tree-id30032 . -273) (undo-tree-id30033 . -273) (undo-tree-id30034 . -273) (undo-tree-id30035 . -273) (undo-tree-id30036 . -276) (undo-tree-id30037 . -276) (undo-tree-id30038 . -276) (undo-tree-id30039 . -276) (undo-tree-id30040 . -276) (undo-tree-id30041 . -276) (undo-tree-id30042 . -276) (undo-tree-id30043 . -276) (undo-tree-id30044 . -277) (undo-tree-id30045 . -277) (undo-tree-id30046 . -277) (undo-tree-id30047 . -277) (undo-tree-id30048 . -277) (undo-tree-id30049 . -277) (undo-tree-id30050 . -277) (undo-tree-id30051 . -277) (undo-tree-id30052 . -278) (undo-tree-id30053 . -278) (undo-tree-id30054 . -278) (undo-tree-id30055 . -278) (undo-tree-id30056 . -278) (undo-tree-id30057 . -278) (undo-tree-id30058 . -278) (undo-tree-id30059 . -278) (undo-tree-id30060 . -280) (undo-tree-id30061 . -280) (undo-tree-id30062 . -280) (undo-tree-id30063 . -280) (undo-tree-id30064 . -280) (undo-tree-id30065 . -280) (undo-tree-id30066 . -280) (undo-tree-id30067 . -280) (undo-tree-id30068 . 85) (undo-tree-id30069 . -289) (undo-tree-id30070 . -288) (undo-tree-id30071 . -288) (undo-tree-id30072 . -288) (undo-tree-id30073 . -288) (undo-tree-id30074 . -288) (undo-tree-id30075 . -288) (undo-tree-id30076 . -288) (undo-tree-id30077 . -288) (undo-tree-id30078 . -291) (undo-tree-id30079 . -291) (undo-tree-id30080 . -291) (undo-tree-id30081 . -291) (undo-tree-id30082 . -291) (undo-tree-id30083 . -291) (undo-tree-id30084 . -291) (undo-tree-id30085 . -291) (undo-tree-id30086 . -299) (undo-tree-id30087 . -299) (undo-tree-id30088 . -299) (undo-tree-id30089 . -299) (undo-tree-id30090 . -299) (undo-tree-id30091 . -299) (undo-tree-id30092 . -299) (undo-tree-id30093 . -299) (undo-tree-id30094 . -302) (undo-tree-id30095 . -302) (undo-tree-id30096 . -302) (undo-tree-id30097 . -302) (undo-tree-id30098 . -302) (undo-tree-id30099 . -302) (undo-tree-id30100 . -302) (undo-tree-id30101 . -302) (undo-tree-id30102 . -307) (undo-tree-id30103 . -307) (undo-tree-id30104 . -307) (undo-tree-id30105 . -307) (undo-tree-id30106 . -307) (undo-tree-id30107 . -307) (undo-tree-id30108 . -307) (undo-tree-id30109 . -307) (undo-tree-id30110 . -309) (undo-tree-id30111 . -309) (undo-tree-id30112 . -309) (undo-tree-id30113 . -309) (undo-tree-id30114 . -309) (undo-tree-id30115 . -309) (undo-tree-id30116 . -309) (undo-tree-id30117 . -309) (undo-tree-id30118 . -310) (undo-tree-id30119 . -310) (undo-tree-id30120 . -310) (undo-tree-id30121 . -310) (undo-tree-id30122 . -310) (undo-tree-id30123 . -310) (undo-tree-id30124 . -310) (undo-tree-id30125 . -310) (undo-tree-id30126 . -315) (undo-tree-id30127 . -315) (undo-tree-id30128 . -315) (undo-tree-id30129 . -315) (undo-tree-id30130 . -315) (undo-tree-id30131 . -315) (undo-tree-id30132 . -315) (undo-tree-id30133 . -315) (undo-tree-id30134 . -320) (undo-tree-id30135 . -320) (undo-tree-id30136 . -320) (undo-tree-id30137 . -320) (undo-tree-id30138 . -320) (undo-tree-id30139 . -320) (undo-tree-id30140 . -320) (undo-tree-id30141 . -320) (undo-tree-id30142 . -323) (undo-tree-id30143 . -323) (undo-tree-id30144 . -323) (undo-tree-id30145 . -323) (undo-tree-id30146 . -323) (undo-tree-id30147 . -323) (undo-tree-id30148 . -323) (undo-tree-id30149 . -323) (undo-tree-id30150 . -323) (undo-tree-id30151 . -323) (undo-tree-id30152 . -323) (undo-tree-id30153 . -323) (undo-tree-id30154 . -323) (undo-tree-id30155 . -323) (undo-tree-id30156 . -323) (undo-tree-id30157 . -323) (undo-tree-id30158 . -323) (undo-tree-id30159 . -323) (undo-tree-id30160 . -323) (undo-tree-id30161 . -323) (undo-tree-id30162 . -323) (undo-tree-id30163 . -323) (undo-tree-id30164 . -328) (undo-tree-id30165 . -328) (undo-tree-id30166 . -328) (undo-tree-id30167 . -328) (undo-tree-id30168 . -328) (undo-tree-id30169 . -328) (undo-tree-id30170 . -328) (undo-tree-id30171 . -328) (undo-tree-id30172 . -328) (undo-tree-id30173 . -328) (undo-tree-id30174 . -328) (undo-tree-id30175 . -328) (undo-tree-id30176 . -328) (undo-tree-id30177 . -328) (undo-tree-id30178 . -328) (undo-tree-id30179 . -328) (undo-tree-id30180 . -328) (undo-tree-id30181 . -328) (undo-tree-id30182 . -328) (undo-tree-id30183 . -328) (undo-tree-id30184 . -328) (undo-tree-id30185 . -328) (undo-tree-id30186 . -329) (undo-tree-id30187 . -329) (undo-tree-id30188 . -329) (undo-tree-id30189 . -329) (undo-tree-id30190 . -329) (undo-tree-id30191 . -329) (undo-tree-id30192 . -329) (undo-tree-id30193 . -329) (undo-tree-id30194 . -329) (undo-tree-id30195 . -329) (undo-tree-id30196 . -329) (undo-tree-id30197 . -329) (undo-tree-id30198 . -329) (undo-tree-id30199 . -329) (undo-tree-id30200 . -329) (undo-tree-id30201 . -329) (undo-tree-id30202 . -329) (undo-tree-id30203 . -329) (undo-tree-id30204 . -329) (undo-tree-id30205 . -329) (undo-tree-id30206 . -329) (undo-tree-id30207 . -329) (undo-tree-id30208 . -332) (undo-tree-id30209 . -332) (undo-tree-id30210 . -332) (undo-tree-id30211 . -332) (undo-tree-id30212 . -332) (undo-tree-id30213 . -332) (undo-tree-id30214 . -332) (undo-tree-id30215 . -332) (undo-tree-id30216 . -332) (undo-tree-id30217 . -332) (undo-tree-id30218 . -332) (undo-tree-id30219 . -332) (undo-tree-id30220 . -332) (undo-tree-id30221 . -332) (undo-tree-id30222 . -332) (undo-tree-id30223 . -332) (undo-tree-id30224 . -332) (undo-tree-id30225 . -332) (undo-tree-id30226 . -332) (undo-tree-id30227 . -332) (undo-tree-id30228 . -332) (undo-tree-id30229 . -332) (undo-tree-id30230 . -336) (undo-tree-id30231 . -336) (undo-tree-id30232 . -336) (undo-tree-id30233 . -336) (undo-tree-id30234 . -336) (undo-tree-id30235 . -336) (undo-tree-id30236 . -336) (undo-tree-id30237 . -336) (undo-tree-id30238 . -336) (undo-tree-id30239 . -336) (undo-tree-id30240 . -336) (undo-tree-id30241 . -336) (undo-tree-id30242 . -336) (undo-tree-id30243 . -336) (undo-tree-id30244 . -336) (undo-tree-id30245 . -336) (undo-tree-id30246 . -336) (undo-tree-id30247 . -336) (undo-tree-id30248 . -336) (undo-tree-id30249 . -336) (undo-tree-id30250 . -336) (undo-tree-id30251 . -336) (undo-tree-id30252 . -342) (undo-tree-id30253 . -342) (undo-tree-id30254 . -342) (undo-tree-id30255 . -342) (undo-tree-id30256 . -342) (undo-tree-id30257 . -342) (undo-tree-id30258 . -342) (undo-tree-id30259 . -342) (undo-tree-id30260 . -345) (undo-tree-id30261 . -345) (undo-tree-id30262 . -345) (undo-tree-id30263 . -345) (undo-tree-id30264 . -345) (undo-tree-id30265 . -345) (undo-tree-id30266 . -345) (undo-tree-id30267 . -345) (undo-tree-id30268 . -353) (undo-tree-id30269 . -353) (undo-tree-id30270 . -353) (undo-tree-id30271 . -353) (undo-tree-id30272 . -353) (undo-tree-id30273 . -353) (undo-tree-id30274 . -353) (undo-tree-id30275 . -353) (undo-tree-id30276 . -357) (undo-tree-id30277 . -357) (undo-tree-id30278 . -357) (undo-tree-id30279 . -357) (undo-tree-id30280 . -357) (undo-tree-id30281 . -357) (undo-tree-id30282 . -357) (undo-tree-id30283 . -357) (undo-tree-id30284 . -357) (undo-tree-id30285 . -357) (undo-tree-id30286 . -357) (undo-tree-id30287 . -357) (undo-tree-id30288 . -357) (undo-tree-id30289 . -357) (undo-tree-id30290 . -357) (undo-tree-id30291 . -357) (undo-tree-id30292 . -357) (undo-tree-id30293 . -357) (undo-tree-id30294 . -357) (undo-tree-id30295 . -357) (undo-tree-id30296 . -357) (undo-tree-id30297 . -357) (undo-tree-id30298 . 8) (undo-tree-id30299 . -366) (undo-tree-id30300 . -365) (undo-tree-id30301 . -365) (undo-tree-id30302 . -365) (undo-tree-id30303 . -365) (undo-tree-id30304 . -365) (undo-tree-id30305 . -365) (undo-tree-id30306 . -365) (undo-tree-id30307 . -365) (undo-tree-id30308 . -365) (undo-tree-id30309 . -365) (undo-tree-id30310 . -365) (undo-tree-id30311 . -365) (undo-tree-id30312 . -365) (undo-tree-id30313 . -365) (undo-tree-id30314 . -365) (undo-tree-id30315 . -365) (undo-tree-id30316 . -365) (undo-tree-id30317 . -365) (undo-tree-id30318 . -365) (undo-tree-id30319 . -365) (undo-tree-id30320 . -365) (undo-tree-id30321 . -365) (undo-tree-id30322 . -366) (undo-tree-id30323 . -366) (undo-tree-id30324 . -366) (undo-tree-id30325 . -366) (undo-tree-id30326 . -366) (undo-tree-id30327 . -366) (undo-tree-id30328 . -366) (undo-tree-id30329 . -366) (undo-tree-id30330 . -366) (undo-tree-id30331 . -366) (undo-tree-id30332 . -366) (undo-tree-id30333 . -366) (undo-tree-id30334 . -366) (undo-tree-id30335 . -366) (undo-tree-id30336 . -366) (undo-tree-id30337 . -366) (undo-tree-id30338 . -366) (undo-tree-id30339 . -366) (undo-tree-id30340 . -366) (undo-tree-id30341 . -366) (undo-tree-id30342 . -366) (undo-tree-id30343 . -366) (undo-tree-id30344 . -366) (undo-tree-id30345 . -366) (undo-tree-id30346 . -366) (undo-tree-id30347 . -366) (undo-tree-id30348 . -366) (undo-tree-id30349 . -366) (undo-tree-id30350 . -366) (undo-tree-id30351 . -366) (undo-tree-id30352 . -366) (undo-tree-id30353 . -366) (undo-tree-id30354 . -366) (undo-tree-id30355 . -366) (undo-tree-id30356 . -366) (undo-tree-id30357 . -366) (undo-tree-id30358 . -366) (undo-tree-id30359 . -367) 3522 (t 25767 5822 919735 324000)) nil (25767 5882 378385 659000) 0 nil] [nil nil ((#(", which" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3156) (undo-tree-id28506 . -6) (undo-tree-id28507 . -6) (undo-tree-id28508 . -6) (undo-tree-id28509 . -6) (undo-tree-id28510 . -6) (undo-tree-id28511 . -6) (undo-tree-id28512 . -6) (undo-tree-id28513 . -6) (undo-tree-id28514 . -6) (undo-tree-id28515 . -2) (undo-tree-id28516 . -2) (undo-tree-id28517 . -2) (undo-tree-id28518 . -2) (undo-tree-id28519 . -2) (undo-tree-id28520 . -2) (undo-tree-id28521 . -2) (undo-tree-id28522 . -2) (undo-tree-id28523 . -2) (undo-tree-id28524 . -2) (undo-tree-id28525 . -2) (undo-tree-id28526 . -2) (undo-tree-id28527 . -2) (undo-tree-id28528 . -2) (undo-tree-id28529 . -2) (undo-tree-id28530 . -1) (undo-tree-id28531 . -1) (undo-tree-id28532 . -1) (undo-tree-id28533 . -1) (undo-tree-id28534 . -1) (undo-tree-id28535 . -1) (undo-tree-id28536 . -1) (undo-tree-id28537 . -1) (undo-tree-id28538 . -1) (undo-tree-id28539 . -1) (undo-tree-id28540 . -1) (undo-tree-id28541 . -1) (undo-tree-id28542 . -1) (undo-tree-id28543 . -1) (undo-tree-id28544 . -1) (undo-tree-id28545 . -7) (t 25767 5822 919735 324000)) ((3156 . 3163)) (25767 5847 950128 519000) 0 nil] [nil nil ((#(", which allows you to transform each dataset in the nested dataset before flattening. For example, if you pass the function lambda ds: ds.batch(2) to flat_map(), then it will transform the nested dataset {{1, 2}, {3, 4, 5, 6}} into the flat dataset {[1, 2], [3, 4], [5, 6]}: it’s a dataset of tensors of size 2. With that in mind, we are ready to flatten our dataset: dataset = dataset.flat_map(lambda window: window.batch(window_length)) Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32)." 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 54 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 55 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 58 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 61 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 65 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 92 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 93 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 112 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 113 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 114 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 115 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 116 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 117 134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 134 135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 135 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 141 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 150 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 151 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 154 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 155 158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 158 208 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 208 209 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 209 292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 292 293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 293 357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 357 359 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 359 367 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 367 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 368 390 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 390 391 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 391 394 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 394 429 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 429 430 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 430 436 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 436 438 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 438 439 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 439 471 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 471 472 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 472 478 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 478 505 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 505 506 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 506 574 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 574 579 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 579 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 580 648 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 648 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 649 723 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 723 724 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 724 799 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 799 800 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 800 869 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 869 870 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 870 941 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 941 942 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 942 947 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 947 948 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 948 952 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 952 957 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 957 958 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 958 1002 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1002 1003 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1003 1007 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1007 1008 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1008 1009 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1009 1080 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1080 1081 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1081 1082 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1082 1151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1151 1152 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1152 1220 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1220 1221 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1221 1235 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1235 1236 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 3156) (undo-tree-id28142 . -1235) (undo-tree-id28143 . 1122) (undo-tree-id28144 . -6) (undo-tree-id28145 . -6) (undo-tree-id28146 . -6) (undo-tree-id28147 . -6) (undo-tree-id28148 . -6) (undo-tree-id28149 . -6) (undo-tree-id28150 . -6) (undo-tree-id28151 . -6) (undo-tree-id28152 . -13) (undo-tree-id28153 . -13) (undo-tree-id28154 . -13) (undo-tree-id28155 . -13) (undo-tree-id28156 . -13) (undo-tree-id28157 . -13) (undo-tree-id28158 . -13) (undo-tree-id28159 . -13) (undo-tree-id28160 . -17) (undo-tree-id28161 . -17) (undo-tree-id28162 . -17) (undo-tree-id28163 . -17) (undo-tree-id28164 . -17) (undo-tree-id28165 . -17) (undo-tree-id28166 . -17) (undo-tree-id28167 . -17) (undo-tree-id28168 . -20) (undo-tree-id28169 . -20) (undo-tree-id28170 . -20) (undo-tree-id28171 . -20) (undo-tree-id28172 . -20) (undo-tree-id28173 . -20) (undo-tree-id28174 . -20) (undo-tree-id28175 . -20) (undo-tree-id28176 . -20) (undo-tree-id28177 . -20) (undo-tree-id28178 . -20) (undo-tree-id28179 . -20) (undo-tree-id28180 . -20) (undo-tree-id28181 . -20) (undo-tree-id28182 . -20) (undo-tree-id28183 . -20) (undo-tree-id28184 . -20) (undo-tree-id28185 . -20) (undo-tree-id28186 . -20) (undo-tree-id28187 . -20) (undo-tree-id28188 . -20) (undo-tree-id28189 . -20) (undo-tree-id28190 . -30) (undo-tree-id28191 . -30) (undo-tree-id28192 . -30) (undo-tree-id28193 . -30) (undo-tree-id28194 . -30) (undo-tree-id28195 . -30) (undo-tree-id28196 . -30) (undo-tree-id28197 . -30) (undo-tree-id28198 . -30) (undo-tree-id28199 . -30) (undo-tree-id28200 . -30) (undo-tree-id28201 . -30) (undo-tree-id28202 . -30) (undo-tree-id28203 . -30) (undo-tree-id28204 . -30) (undo-tree-id28205 . -30) (undo-tree-id28206 . -30) (undo-tree-id28207 . -30) (undo-tree-id28208 . -30) (undo-tree-id28209 . -30) (undo-tree-id28210 . -30) (undo-tree-id28211 . -30) (undo-tree-id28212 . -35) (undo-tree-id28213 . -35) (undo-tree-id28214 . -35) (undo-tree-id28215 . -35) (undo-tree-id28216 . -35) (undo-tree-id28217 . -35) (undo-tree-id28218 . -35) (undo-tree-id28219 . -35) (undo-tree-id28220 . -35) (undo-tree-id28221 . -35) (undo-tree-id28222 . -35) (undo-tree-id28223 . -35) (undo-tree-id28224 . -35) (undo-tree-id28225 . -35) (undo-tree-id28226 . -35) (undo-tree-id28227 . -35) (undo-tree-id28228 . -35) (undo-tree-id28229 . -35) (undo-tree-id28230 . -35) (undo-tree-id28231 . -35) (undo-tree-id28232 . -35) (undo-tree-id28233 . -35) (undo-tree-id28234 . -43) (undo-tree-id28235 . -43) (undo-tree-id28236 . -43) (undo-tree-id28237 . -43) (undo-tree-id28238 . -43) (undo-tree-id28239 . -43) (undo-tree-id28240 . -43) (undo-tree-id28241 . -43) (undo-tree-id28242 . -46) (undo-tree-id28243 . -46) (undo-tree-id28244 . -46) (undo-tree-id28245 . -46) (undo-tree-id28246 . -46) (undo-tree-id28247 . -46) (undo-tree-id28248 . -46) (undo-tree-id28249 . -46) (undo-tree-id28250 . -50) (undo-tree-id28251 . -50) (undo-tree-id28252 . -50) (undo-tree-id28253 . -50) (undo-tree-id28254 . -50) (undo-tree-id28255 . -50) (undo-tree-id28256 . -50) (undo-tree-id28257 . -50) (undo-tree-id28258 . -57) (undo-tree-id28259 . -57) (undo-tree-id28260 . -57) (undo-tree-id28261 . -57) (undo-tree-id28262 . -57) (undo-tree-id28263 . -57) (undo-tree-id28264 . -57) (undo-tree-id28265 . -57) (undo-tree-id28266 . 1177) (undo-tree-id28267 . -66) (undo-tree-id28268 . -65) (undo-tree-id28269 . -65) (undo-tree-id28270 . -65) (undo-tree-id28271 . -65) (undo-tree-id28272 . -65) (undo-tree-id28273 . -65) (undo-tree-id28274 . -65) (undo-tree-id28275 . -65) (undo-tree-id28276 . -72) (undo-tree-id28277 . -72) (undo-tree-id28278 . -72) (undo-tree-id28279 . -72) (undo-tree-id28280 . -72) (undo-tree-id28281 . -72) (undo-tree-id28282 . -72) (undo-tree-id28283 . -72) (undo-tree-id28284 . -72) (undo-tree-id28285 . -72) (undo-tree-id28286 . -72) (undo-tree-id28287 . -72) (undo-tree-id28288 . -72) (undo-tree-id28289 . -72) (undo-tree-id28290 . -72) (undo-tree-id28291 . -72) (undo-tree-id28292 . -72) (undo-tree-id28293 . -72) (undo-tree-id28294 . -72) (undo-tree-id28295 . -72) (undo-tree-id28296 . -72) (undo-tree-id28297 . -72) (undo-tree-id28298 . -72) (undo-tree-id28299 . -72) (undo-tree-id28300 . -72) (undo-tree-id28301 . -72) (undo-tree-id28302 . -72) (undo-tree-id28303 . -72) (undo-tree-id28304 . -72) (undo-tree-id28305 . -83) (undo-tree-id28306 . -83) (undo-tree-id28307 . -83) (undo-tree-id28308 . -83) (undo-tree-id28309 . -83) (undo-tree-id28310 . -83) (undo-tree-id28311 . -83) (undo-tree-id28312 . -83) (undo-tree-id28313 . -83) (undo-tree-id28314 . -83) (undo-tree-id28315 . -83) (undo-tree-id28316 . -83) (undo-tree-id28317 . -83) (undo-tree-id28318 . -83) (undo-tree-id28319 . -83) (undo-tree-id28320 . -83) (undo-tree-id28321 . -83) (undo-tree-id28322 . -83) (undo-tree-id28323 . -83) (undo-tree-id28324 . -83) (undo-tree-id28325 . -83) (undo-tree-id28326 . -83) (undo-tree-id28327 . -84) (undo-tree-id28328 . -84) (undo-tree-id28329 . -84) (undo-tree-id28330 . -84) (undo-tree-id28331 . -84) (undo-tree-id28332 . -84) (undo-tree-id28333 . -84) (undo-tree-id28334 . -84) (undo-tree-id28335 . -88) (undo-tree-id28336 . -88) (undo-tree-id28337 . -88) (undo-tree-id28338 . -88) (undo-tree-id28339 . -88) (undo-tree-id28340 . -88) (undo-tree-id28341 . -88) (undo-tree-id28342 . -88) (undo-tree-id28343 . -96) (undo-tree-id28344 . -96) (undo-tree-id28345 . -96) (undo-tree-id28346 . -96) (undo-tree-id28347 . -96) (undo-tree-id28348 . -96) (undo-tree-id28349 . -96) (undo-tree-id28350 . -96) (undo-tree-id28351 . -97) (undo-tree-id28352 . -97) (undo-tree-id28353 . -97) (undo-tree-id28354 . -97) (undo-tree-id28355 . -97) (undo-tree-id28356 . -97) (undo-tree-id28357 . -97) (undo-tree-id28358 . -97) (undo-tree-id28359 . -100) (undo-tree-id28360 . -100) (undo-tree-id28361 . -100) (undo-tree-id28362 . -100) (undo-tree-id28363 . -100) (undo-tree-id28364 . -100) (undo-tree-id28365 . -100) (undo-tree-id28366 . -100) (undo-tree-id28367 . -104) (undo-tree-id28368 . -104) (undo-tree-id28369 . -104) (undo-tree-id28370 . -104) (undo-tree-id28371 . -104) (undo-tree-id28372 . -104) (undo-tree-id28373 . -104) (undo-tree-id28374 . -104) (undo-tree-id28375 . -109) (undo-tree-id28376 . -109) (undo-tree-id28377 . -109) (undo-tree-id28378 . -109) (undo-tree-id28379 . -109) (undo-tree-id28380 . -109) (undo-tree-id28381 . -109) (undo-tree-id28382 . -109) (undo-tree-id28383 . -109) (undo-tree-id28384 . -109) (undo-tree-id28385 . -109) (undo-tree-id28386 . -109) (undo-tree-id28387 . -109) (undo-tree-id28388 . -109) (undo-tree-id28389 . -109) (undo-tree-id28390 . -109) (undo-tree-id28391 . -109) (undo-tree-id28392 . -109) (undo-tree-id28393 . -109) (undo-tree-id28394 . -109) (undo-tree-id28395 . -109) (undo-tree-id28396 . -109) (undo-tree-id28397 . -113) (undo-tree-id28398 . -113) (undo-tree-id28399 . -113) (undo-tree-id28400 . -113) (undo-tree-id28401 . -113) (undo-tree-id28402 . -113) (undo-tree-id28403 . -113) (undo-tree-id28404 . -113) (undo-tree-id28405 . -113) (undo-tree-id28406 . -113) (undo-tree-id28407 . -113) (undo-tree-id28408 . -113) (undo-tree-id28409 . -113) (undo-tree-id28410 . -113) (undo-tree-id28411 . -113) (undo-tree-id28412 . -113) (undo-tree-id28413 . -113) (undo-tree-id28414 . -113) (undo-tree-id28415 . -113) (undo-tree-id28416 . -113) (undo-tree-id28417 . -113) (undo-tree-id28418 . -113) (undo-tree-id28419 . -113) (undo-tree-id28420 . -113) (undo-tree-id28421 . -113) (undo-tree-id28422 . -113) (undo-tree-id28423 . -113) (undo-tree-id28424 . -113) (undo-tree-id28425 . -113) (undo-tree-id28426 . -113) (undo-tree-id28427 . -113) (undo-tree-id28428 . -113) (undo-tree-id28429 . -113) (undo-tree-id28430 . -113) (undo-tree-id28431 . -113) (undo-tree-id28432 . -113) (undo-tree-id28433 . -113) (undo-tree-id28434 . -113) (undo-tree-id28435 . -113) (undo-tree-id28436 . -113) (undo-tree-id28437 . -113) (undo-tree-id28438 . -113) (undo-tree-id28439 . -113) (undo-tree-id28440 . -113) (undo-tree-id28441 . -113) (undo-tree-id28442 . -113) (undo-tree-id28443 . -113) (undo-tree-id28444 . -113) (undo-tree-id28445 . -113) (undo-tree-id28446 . -113) (undo-tree-id28447 . -113) (undo-tree-id28448 . -113) (undo-tree-id28449 . -113) (undo-tree-id28450 . 1199) (undo-tree-id28451 . -44) (undo-tree-id28452 . -38) (undo-tree-id28453 . -38) (undo-tree-id28454 . -38) (undo-tree-id28455 . -38) (undo-tree-id28456 . -38) (undo-tree-id28457 . -38) (undo-tree-id28458 . -38) (undo-tree-id28459 . -38) (undo-tree-id28460 . -38) (undo-tree-id28461 . -38) (undo-tree-id28462 . -38) (undo-tree-id28463 . -38) (undo-tree-id28464 . -38) (undo-tree-id28465 . -38) (undo-tree-id28466 . -38) (undo-tree-id28467 . -38) (undo-tree-id28468 . -38) (undo-tree-id28469 . -38) (undo-tree-id28470 . -38) (undo-tree-id28471 . -38) (undo-tree-id28472 . -38) (undo-tree-id28473 . -38) (undo-tree-id28474 . -2) (undo-tree-id28475 . -2) (undo-tree-id28476 . -2) (undo-tree-id28477 . -2) (undo-tree-id28478 . -2) (undo-tree-id28479 . -2) (undo-tree-id28480 . -2) (undo-tree-id28481 . -2) (undo-tree-id28482 . -2) (undo-tree-id28483 . -2) (undo-tree-id28484 . -2) (undo-tree-id28485 . -2) (undo-tree-id28486 . -2) (undo-tree-id28487 . -2) (undo-tree-id28488 . -2) (undo-tree-id28489 . -1) (undo-tree-id28490 . -1) (undo-tree-id28491 . -1) (undo-tree-id28492 . -1) (undo-tree-id28493 . -1) (undo-tree-id28494 . -1) (undo-tree-id28495 . -1) (undo-tree-id28496 . -1) (undo-tree-id28497 . -1) (undo-tree-id28498 . -1) (undo-tree-id28499 . -1) (undo-tree-id28500 . -1) (undo-tree-id28501 . -1) (undo-tree-id28502 . -1) (undo-tree-id28503 . -1) (undo-tree-id28504 . -1236) (undo-tree-id28505 . -1236) (t 25767 5822 919735 324000)) ((3156 . 4392)) (25767 5845 605169 997000) 0 nil])
([nil nil ((#("dataset = dataset.flat_map(lambda window: window.batch(window_length))" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 22 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 23 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 26 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 61 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 62 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 67 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 68 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3157) (undo-tree-id30364 . -69) (undo-tree-id30365 . -69) (undo-tree-id30366 . 70) (undo-tree-id30367 . -69) (undo-tree-id30368 . 70) (undo-tree-id30369 . -7) (undo-tree-id30370 . -70) (undo-tree-id30371 . -69) (undo-tree-id30372 . -6) (undo-tree-id30373 . -6) (undo-tree-id30374 . -6) (undo-tree-id30375 . -6) (undo-tree-id30376 . -6) (undo-tree-id30377 . -6) (undo-tree-id30378 . -6) (undo-tree-id30379 . -6) (undo-tree-id30380 . -6) (undo-tree-id30381 . -6) (undo-tree-id30382 . -6) (undo-tree-id30383 . -6) (undo-tree-id30384 . -6) (undo-tree-id30385 . -6) (undo-tree-id30386 . -6) (undo-tree-id30387 . -6) (undo-tree-id30388 . -6) (undo-tree-id30389 . -6) (undo-tree-id30390 . -6) (undo-tree-id30391 . -6) (undo-tree-id30392 . -6) (undo-tree-id30393 . -6) (undo-tree-id30394 . -8) (undo-tree-id30395 . -8) (undo-tree-id30396 . -8) (undo-tree-id30397 . -8) (undo-tree-id30398 . -8) (undo-tree-id30399 . -8) (undo-tree-id30400 . -8) (undo-tree-id30401 . -8) (undo-tree-id30402 . -8) (undo-tree-id30403 . -8) (undo-tree-id30404 . -8) (undo-tree-id30405 . -8) (undo-tree-id30406 . -8) (undo-tree-id30407 . -8) (undo-tree-id30408 . -8) (undo-tree-id30409 . -8) (undo-tree-id30410 . -8) (undo-tree-id30411 . -8) (undo-tree-id30412 . -8) (undo-tree-id30413 . -8) (undo-tree-id30414 . -8) (undo-tree-id30415 . -8) (undo-tree-id30416 . 60) (undo-tree-id30417 . -17) (undo-tree-id30418 . -16) (undo-tree-id30419 . -16) (undo-tree-id30420 . -16) (undo-tree-id30421 . -16) (undo-tree-id30422 . -16) (undo-tree-id30423 . -16) (undo-tree-id30424 . -16) (undo-tree-id30425 . -16) (undo-tree-id30426 . -17) (undo-tree-id30427 . -17) (undo-tree-id30428 . -17) (undo-tree-id30429 . -17) (undo-tree-id30430 . -17) (undo-tree-id30431 . -17) (undo-tree-id30432 . -17) (undo-tree-id30433 . -17) (undo-tree-id30434 . -21) (undo-tree-id30435 . -21) (undo-tree-id30436 . -21) (undo-tree-id30437 . -21) (undo-tree-id30438 . -21) (undo-tree-id30439 . -21) (undo-tree-id30440 . -21) (undo-tree-id30441 . -21) (undo-tree-id30442 . -22) (undo-tree-id30443 . -22) (undo-tree-id30444 . -22) (undo-tree-id30445 . -22) (undo-tree-id30446 . -22) (undo-tree-id30447 . -22) (undo-tree-id30448 . -22) (undo-tree-id30449 . -22) (undo-tree-id30450 . -25) (undo-tree-id30451 . -25) (undo-tree-id30452 . -25) (undo-tree-id30453 . -25) (undo-tree-id30454 . -25) (undo-tree-id30455 . -25) (undo-tree-id30456 . -25) (undo-tree-id30457 . -25) (undo-tree-id30458 . -26) (undo-tree-id30459 . -26) (undo-tree-id30460 . -26) (undo-tree-id30461 . -26) (undo-tree-id30462 . -26) (undo-tree-id30463 . -26) (undo-tree-id30464 . -26) (undo-tree-id30465 . -26) (undo-tree-id30466 . -32) (undo-tree-id30467 . -32) (undo-tree-id30468 . -32) (undo-tree-id30469 . -32) (undo-tree-id30470 . -32) (undo-tree-id30471 . -32) (undo-tree-id30472 . -32) (undo-tree-id30473 . -32) (undo-tree-id30474 . -39) (undo-tree-id30475 . -39) (undo-tree-id30476 . -39) (undo-tree-id30477 . -39) (undo-tree-id30478 . -39) (undo-tree-id30479 . -39) (undo-tree-id30480 . -39) (undo-tree-id30481 . -39) (undo-tree-id30482 . -40) (undo-tree-id30483 . -40) (undo-tree-id30484 . -40) (undo-tree-id30485 . -40) (undo-tree-id30486 . -40) (undo-tree-id30487 . -40) (undo-tree-id30488 . -40) (undo-tree-id30489 . -40) (undo-tree-id30490 . -47) (undo-tree-id30491 . -47) (undo-tree-id30492 . -47) (undo-tree-id30493 . -47) (undo-tree-id30494 . -47) (undo-tree-id30495 . -47) (undo-tree-id30496 . -47) (undo-tree-id30497 . -47) (undo-tree-id30498 . -48) (undo-tree-id30499 . -48) (undo-tree-id30500 . -48) (undo-tree-id30501 . -48) (undo-tree-id30502 . -48) (undo-tree-id30503 . -48) (undo-tree-id30504 . -48) (undo-tree-id30505 . -48) (undo-tree-id30506 . -53) (undo-tree-id30507 . -53) (undo-tree-id30508 . -53) (undo-tree-id30509 . -53) (undo-tree-id30510 . -53) (undo-tree-id30511 . -53) (undo-tree-id30512 . -53) (undo-tree-id30513 . -53) (undo-tree-id30514 . -54) (undo-tree-id30515 . -54) (undo-tree-id30516 . -54) (undo-tree-id30517 . -54) (undo-tree-id30518 . -54) (undo-tree-id30519 . -54) (undo-tree-id30520 . -54) (undo-tree-id30521 . -54) (undo-tree-id30522 . -60) (undo-tree-id30523 . -60) (undo-tree-id30524 . -60) (undo-tree-id30525 . -60) (undo-tree-id30526 . -60) (undo-tree-id30527 . -60) (undo-tree-id30528 . -60) (undo-tree-id30529 . -60) (undo-tree-id30530 . -61) (undo-tree-id30531 . -61) (undo-tree-id30532 . -61) (undo-tree-id30533 . -61) (undo-tree-id30534 . -61) (undo-tree-id30535 . -61) (undo-tree-id30536 . -61) (undo-tree-id30537 . -61) (undo-tree-id30538 . -61) (undo-tree-id30539 . -61) (undo-tree-id30540 . -61) (undo-tree-id30541 . -61) (undo-tree-id30542 . -61) (undo-tree-id30543 . -61) (undo-tree-id30544 . -61) (undo-tree-id30545 . -61) (undo-tree-id30546 . -61) (undo-tree-id30547 . -61) (undo-tree-id30548 . -61) (undo-tree-id30549 . -61) (undo-tree-id30550 . -61) (undo-tree-id30551 . -61) (undo-tree-id30552 . -67) (undo-tree-id30553 . -67) (undo-tree-id30554 . -67) (undo-tree-id30555 . -67) (undo-tree-id30556 . -67) (undo-tree-id30557 . -67) (undo-tree-id30558 . -67) (undo-tree-id30559 . -67) (undo-tree-id30560 . -67) (undo-tree-id30561 . -67) (undo-tree-id30562 . -67) (undo-tree-id30563 . -67) (undo-tree-id30564 . -67) (undo-tree-id30565 . -67) (undo-tree-id30566 . -67) (undo-tree-id30567 . -67) (undo-tree-id30568 . -67) (undo-tree-id30569 . -67) (undo-tree-id30570 . -67) (undo-tree-id30571 . -67) (undo-tree-id30572 . -67) (undo-tree-id30573 . -67) (undo-tree-id30574 . -67) (undo-tree-id30575 . -67) (undo-tree-id30576 . -67) (undo-tree-id30577 . -67) (undo-tree-id30578 . -67) (undo-tree-id30579 . -67) (undo-tree-id30580 . -67) (undo-tree-id30581 . -69) (undo-tree-id30582 . -69) (undo-tree-id30583 . -69) (undo-tree-id30584 . -69) (undo-tree-id30585 . -69) (undo-tree-id30586 . -69) (undo-tree-id30587 . -69) (undo-tree-id30588 . -69) (undo-tree-id30589 . -69) (undo-tree-id30590 . -69) (undo-tree-id30591 . -69) (undo-tree-id30592 . -69) (undo-tree-id30593 . -69) (undo-tree-id30594 . -69) (undo-tree-id30595 . -69) (undo-tree-id30596 . -69) (undo-tree-id30597 . -69) (undo-tree-id30598 . -69) (undo-tree-id30599 . -69) (undo-tree-id30600 . -69) (undo-tree-id30601 . -69) (undo-tree-id30602 . -69) (undo-tree-id30603 . -69) (undo-tree-id30604 . -69) (undo-tree-id30605 . -69) (undo-tree-id30606 . -69) (undo-tree-id30607 . -69) (undo-tree-id30608 . -69) (undo-tree-id30609 . -69) (undo-tree-id30610 . -69) (undo-tree-id30611 . -69) (undo-tree-id30612 . -69) (undo-tree-id30613 . -69) (undo-tree-id30614 . -69) (undo-tree-id30615 . -69) (undo-tree-id30616 . -69) (undo-tree-id30617 . -70) (undo-tree-id30618 . -70) (undo-tree-id30619 . -70) (undo-tree-id30620 . -70) (undo-tree-id30621 . -70) (undo-tree-id30622 . -70) (undo-tree-id30623 . -70) (undo-tree-id30624 . -70) (undo-tree-id30625 . -70) (undo-tree-id30626 . -70) (undo-tree-id30627 . -70) (undo-tree-id30628 . -70) (undo-tree-id30629 . -70) (undo-tree-id30630 . -70) (undo-tree-id30631 . -70) (undo-tree-id30632 . -70) (undo-tree-id30633 . -70) (undo-tree-id30634 . -70) (undo-tree-id30635 . -70) (undo-tree-id30636 . -70) (undo-tree-id30637 . -70) (undo-tree-id30638 . -70) (undo-tree-id30639 . -69) (undo-tree-id30640 . -69) (undo-tree-id30641 . -69) (undo-tree-id30642 . -69) (undo-tree-id30643 . -69) (undo-tree-id30644 . -69) (undo-tree-id30645 . -69) (undo-tree-id30646 . -69) (undo-tree-id30647 . -69) (undo-tree-id30648 . -69) (undo-tree-id30649 . -69) (undo-tree-id30650 . -69) (undo-tree-id30651 . -69) (undo-tree-id30652 . -69) (undo-tree-id30653 . 1) (undo-tree-id30654 . -70) (undo-tree-id30655 . 44) (undo-tree-id30656 . -27) (undo-tree-id30657 . -69) (undo-tree-id30658 . -69) (undo-tree-id30659 . -69) (undo-tree-id30660 . -69) (undo-tree-id30661 . -69) (undo-tree-id30662 . -69) (undo-tree-id30663 . -69) (undo-tree-id30664 . -69) (undo-tree-id30665 . -69) (undo-tree-id30666 . -70) 3226) nil (25767 5897 297932 471000) 0 nil] [nil nil ((3158 . 3159) (3157 . 3158)) ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3157) (undo-tree-id30360 . -1) (undo-tree-id30361 . -1) (undo-tree-id30362 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3158) (undo-tree-id30363 . 1)) (25767 5882 376066 58000) 0 nil])
nil
nil
([nil nil ((2952 . 2953) 2951) nil (25767 5897 297480 489000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3022 . 3023) (nil fontified nil 2953 . 3023) (2953 . 3023)) nil (25767 5897 297475 876000) 0 nil])
([nil nil ((3162 . 4027) (#("- Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32).
- Moreover, the flat_map() method takes a function as an argument" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 5 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 5 34 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 41 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 41 68 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 68 69 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 69 137 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 137 142 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 142 143 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 143 211 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 211 212 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 212 286 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 286 287 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 287 362 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 362 363 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 363 365 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 365 430 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 430 432 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 432 433 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 433 435 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 435 504 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 504 505 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 505 510 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 510 511 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 511 515 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 515 520 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 520 521 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 521 565 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 565 566 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 566 570 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 570 571 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 571 572 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 572 643 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 643 644 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 644 645 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 645 714 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 714 715 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 715 783 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 783 784 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 784 798 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 798 799 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 799 800 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 800 801 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 801 802 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 802 820 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 820 821 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 821 824 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 824 865 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 3162) (undo-tree-id31557 . -865) (undo-tree-id31558 . -865) (undo-tree-id31559 . -865) (undo-tree-id31560 . -865) (undo-tree-id31561 . -865) (undo-tree-id31562 . -865) (undo-tree-id31563 . -865) (undo-tree-id31564 . -865) (undo-tree-id31565 . -865) (undo-tree-id31566 . -865) (undo-tree-id31567 . -865) (undo-tree-id31568 . -865) (undo-tree-id31569 . -865) (undo-tree-id31570 . -865) (undo-tree-id31571 . -865) (undo-tree-id31572 . -865) (undo-tree-id31573 . -865) (undo-tree-id31574 . -865) (undo-tree-id31575 . -865) (undo-tree-id31576 . -865) (undo-tree-id31577 . -865) (undo-tree-id31578 . -865) (undo-tree-id31579 . -865) (undo-tree-id31580 . -865) (undo-tree-id31581 . -865) (undo-tree-id31582 . -865) (undo-tree-id31583 . -865) (undo-tree-id31584 . -865) (undo-tree-id31585 . -865) (undo-tree-id31586 . -865) (undo-tree-id31587 . -865) (undo-tree-id31588 . -865) (undo-tree-id31589 . -865) (undo-tree-id31590 . -865) (undo-tree-id31591 . -865) (undo-tree-id31592 . -865) (undo-tree-id31593 . -865) (undo-tree-id31594 . -865) (undo-tree-id31595 . -865) (undo-tree-id31596 . -865) (undo-tree-id31597 . -865) (undo-tree-id31598 . -865) (undo-tree-id31599 . -865) (undo-tree-id31600 . -865) (undo-tree-id31601 . -865) (undo-tree-id31602 . -865) (undo-tree-id31603 . -865) (undo-tree-id31604 . -865) (undo-tree-id31605 . -865) (undo-tree-id31606 . -865) (undo-tree-id31607 . -865) (undo-tree-id31608 . -865) (undo-tree-id31609 . -865) (undo-tree-id31610 . -865) (undo-tree-id31611 . -865) (undo-tree-id31612 . -865) (undo-tree-id31613 . -865) (undo-tree-id31614 . -865) (undo-tree-id31615 . -865) (undo-tree-id31616 . -865) (undo-tree-id31617 . -865) (undo-tree-id31618 . -865) (undo-tree-id31619 . -865) (undo-tree-id31620 . -865) (undo-tree-id31621 . -865) (undo-tree-id31622 . -865) (undo-tree-id31623 . -865) (undo-tree-id31624 . -865) (undo-tree-id31625 . -865) (undo-tree-id31626 . -865) (undo-tree-id31627 . -865) (undo-tree-id31628 . -865) (undo-tree-id31629 . -865) (undo-tree-id31630 . -865) (undo-tree-id31631 . -865) (undo-tree-id31632 . -865) (undo-tree-id31633 . -865) (undo-tree-id31634 . -865) (undo-tree-id31635 . -865) (undo-tree-id31636 . -865) (undo-tree-id31637 . -865) (undo-tree-id31638 . -865) (undo-tree-id31639 . -865) (undo-tree-id31640 . -865) (undo-tree-id31641 . -865) (undo-tree-id31642 . -865) (undo-tree-id31643 . -865) (undo-tree-id31644 . -865) (undo-tree-id31645 . -865) (undo-tree-id31646 . -865) (undo-tree-id31647 . -865) (undo-tree-id31648 . -865) (undo-tree-id31649 . -865) (undo-tree-id31650 . -865) (undo-tree-id31651 . -865) (undo-tree-id31652 . -865) (undo-tree-id31653 . -865) (undo-tree-id31654 . -865) (undo-tree-id31655 . -865) (undo-tree-id31656 . -865) (undo-tree-id31657 . -865) (undo-tree-id31658 . -865) (undo-tree-id31659 . -865) (undo-tree-id31660 . -865) (undo-tree-id31661 . -865) (undo-tree-id31662 . -865) (undo-tree-id31663 . -865) (undo-tree-id31664 . -865) (undo-tree-id31665 . -865) (undo-tree-id31666 . -865) (undo-tree-id31667 . -865) (undo-tree-id31668 . -865) (undo-tree-id31669 . -865) (undo-tree-id31670 . -865) (undo-tree-id31671 . -865) (undo-tree-id31672 . -865) (undo-tree-id31673 . -865) (undo-tree-id31674 . -865) (undo-tree-id31675 . -865) (undo-tree-id31676 . -865) (undo-tree-id31677 . -865) (undo-tree-id31678 . -865) (undo-tree-id31679 . -865) (undo-tree-id31680 . -865) (undo-tree-id31681 . -865) (undo-tree-id31682 . -865) (undo-tree-id31683 . -865) (undo-tree-id31684 . -865) (undo-tree-id31685 . -865) (undo-tree-id31686 . -865) (undo-tree-id31687 . -865) (undo-tree-id31688 . -865) (undo-tree-id31689 . -865) (undo-tree-id31690 . -865) (undo-tree-id31691 . -865) (undo-tree-id31692 . -865) (undo-tree-id31693 . -865) (undo-tree-id31694 . -865) (undo-tree-id31695 . -865) (undo-tree-id31696 . -865) (undo-tree-id31697 . -865) (undo-tree-id31698 . -865) (undo-tree-id31699 . -865) (undo-tree-id31700 . -865) (undo-tree-id31701 . -865) (undo-tree-id31702 . -865) (undo-tree-id31703 . -865) (undo-tree-id31704 . -865) (undo-tree-id31705 . -865) (undo-tree-id31706 . -865) (undo-tree-id31707 . -865) (undo-tree-id31708 . -865) (undo-tree-id31709 . -865) (undo-tree-id31710 . -865) (undo-tree-id31711 . -865) (undo-tree-id31712 . -865) (undo-tree-id31713 . -865) (undo-tree-id31714 . -865) (undo-tree-id31715 . -865) (undo-tree-id31716 . -865) (undo-tree-id31717 . -865) (undo-tree-id31718 . -865) (undo-tree-id31719 . -865) (undo-tree-id31720 . -865) (undo-tree-id31721 . -865) (undo-tree-id31722 . -865) (undo-tree-id31723 . -865) (undo-tree-id31724 . -865) (undo-tree-id31725 . -865) (undo-tree-id31726 . -865) (undo-tree-id31727 . -865) (undo-tree-id31728 . -865) (undo-tree-id31729 . -865) (undo-tree-id31730 . -865) (undo-tree-id31731 . -865) (undo-tree-id31732 . -865) (undo-tree-id31733 . -865) (undo-tree-id31734 . -865) (undo-tree-id31735 . -865) (undo-tree-id31736 . -865) (undo-tree-id31737 . -865) (undo-tree-id31738 . -865) (undo-tree-id31739 . -865) (undo-tree-id31740 . -865) (undo-tree-id31741 . -865) (undo-tree-id31742 . -865) (undo-tree-id31743 . -865) (undo-tree-id31744 . -865) (undo-tree-id31745 . -865) (undo-tree-id31746 . -865) (undo-tree-id31747 . -865) (undo-tree-id31748 . -865) (undo-tree-id31749 . -865) (undo-tree-id31750 . -865) (undo-tree-id31751 . -865) (undo-tree-id31752 . -865) (undo-tree-id31753 . -865) (undo-tree-id31754 . -865) (undo-tree-id31755 . -865) (undo-tree-id31756 . -865) (undo-tree-id31757 . -865) (undo-tree-id31758 . -865) (undo-tree-id31759 . -865) (undo-tree-id31760 . -865) (undo-tree-id31761 . -865) (undo-tree-id31762 . -865) (undo-tree-id31763 . -865) (undo-tree-id31764 . -865) (undo-tree-id31765 . -865) (undo-tree-id31766 . -865) (undo-tree-id31767 . -865) (undo-tree-id31768 . -865) (undo-tree-id31769 . -865) (undo-tree-id31770 . -865) (undo-tree-id31771 . -865) (undo-tree-id31772 . -865) (undo-tree-id31773 . -865) (undo-tree-id31774 . -865) (undo-tree-id31775 . -865) (undo-tree-id31776 . -865) (undo-tree-id31777 . -865) (undo-tree-id31778 . -865) (undo-tree-id31779 . -865) (undo-tree-id31780 . -865) (undo-tree-id31781 . -865) (undo-tree-id31782 . -865) (undo-tree-id31783 . -865) (undo-tree-id31784 . -865) (undo-tree-id31785 . -865) (undo-tree-id31786 . -865) (undo-tree-id31787 . -865) (undo-tree-id31788 . -865) (undo-tree-id31789 . -865) (undo-tree-id31790 . -865) (undo-tree-id31791 . -865) (undo-tree-id31792 . -865) (undo-tree-id31793 . -865) (undo-tree-id31794 . -865) (undo-tree-id31795 . -865) (undo-tree-id31796 . -865) (undo-tree-id31797 . -865) (undo-tree-id31798 . -865) (undo-tree-id31799 . -865) (undo-tree-id31800 . -865) (undo-tree-id31801 . -865) (undo-tree-id31802 . -865) (undo-tree-id31803 . -865) (undo-tree-id31804 . -865) (undo-tree-id31805 . -865) (undo-tree-id31806 . -865) (undo-tree-id31807 . -865) (undo-tree-id31808 . -865) (undo-tree-id31809 . -865) (undo-tree-id31810 . -865) (undo-tree-id31811 . -865) (undo-tree-id31812 . -865) (undo-tree-id31813 . -865) (undo-tree-id31814 . -865) (undo-tree-id31815 . -865) (undo-tree-id31816 . -865) (undo-tree-id31817 . -865) (undo-tree-id31818 . -865) (undo-tree-id31819 . -865) (undo-tree-id31820 . -865) (undo-tree-id31821 . -865) (undo-tree-id31822 . -865) (undo-tree-id31823 . -865) (undo-tree-id31824 . -865) (undo-tree-id31825 . -865) (undo-tree-id31826 . -865) (undo-tree-id31827 . -865) (undo-tree-id31828 . -865) (undo-tree-id31829 . -865) (undo-tree-id31830 . -865) (undo-tree-id31831 . -865) (undo-tree-id31832 . -865) (undo-tree-id31833 . -865) (undo-tree-id31834 . -865) (undo-tree-id31835 . -865) (undo-tree-id31836 . -865) (undo-tree-id31837 . -865) (undo-tree-id31838 . -865) (undo-tree-id31839 . -865) (undo-tree-id31840 . -865) (undo-tree-id31841 . -865) (undo-tree-id31842 . -865) (undo-tree-id31843 . -865) (undo-tree-id31844 . -865) (undo-tree-id31845 . -865) (undo-tree-id31846 . -802) (undo-tree-id31847 . -802) (undo-tree-id31848 . -802) (undo-tree-id31849 . -802) (undo-tree-id31850 . -802) (undo-tree-id31851 . -802) (undo-tree-id31852 . -802) (undo-tree-id31853 . -802) (undo-tree-id31854 . -802) (undo-tree-id31855 . -802) (undo-tree-id31856 . -802) (undo-tree-id31857 . -802) (undo-tree-id31858 . -802) (undo-tree-id31859 . -802) (undo-tree-id31860 . -802) (undo-tree-id31861 . -802) (undo-tree-id31862 . -802) (undo-tree-id31863 . -802) (undo-tree-id31864 . -802) (undo-tree-id31865 . -802) (undo-tree-id31866 . -802) (undo-tree-id31867 . -802) (undo-tree-id31868 . -802) (undo-tree-id31869 . -802) (undo-tree-id31870 . -802) (undo-tree-id31871 . -802) (undo-tree-id31872 . -802) (undo-tree-id31873 . -802) (undo-tree-id31874 . -802) (undo-tree-id31875 . -802) (undo-tree-id31876 . -802) (undo-tree-id31877 . -802) (undo-tree-id31878 . -802) (undo-tree-id31879 . -802) (undo-tree-id31880 . -802) (undo-tree-id31881 . -865) (undo-tree-id31882 . -802) (undo-tree-id31883 . -802) (undo-tree-id31884 . -802) (undo-tree-id31885 . -802) (undo-tree-id31886 . -802) (undo-tree-id31887 . -802) (undo-tree-id31888 . -802) (undo-tree-id31889 . -802) (undo-tree-id31890 . -802) (undo-tree-id31891 . -802) (undo-tree-id31892 . -802) (undo-tree-id31893 . -802) (undo-tree-id31894 . -802) (undo-tree-id31895 . -802) (undo-tree-id31896 . -802) (undo-tree-id31897 . -802) (undo-tree-id31898 . -802) (undo-tree-id31899 . -802) (undo-tree-id31900 . -802) (undo-tree-id31901 . -802) (undo-tree-id31902 . -802) (undo-tree-id31903 . -802) (undo-tree-id31904 . -802) (undo-tree-id31905 . -802) (undo-tree-id31906 . -802) (undo-tree-id31907 . -802) (undo-tree-id31908 . -802) (undo-tree-id31909 . -802) (undo-tree-id31910 . -802) (undo-tree-id31911 . -802) (undo-tree-id31912 . -802) (undo-tree-id31913 . -802) (undo-tree-id31914 . -802) (undo-tree-id31915 . -802) (undo-tree-id31916 . -802) (undo-tree-id31917 . -802) (undo-tree-id31918 . -802) (undo-tree-id31919 . -802) (undo-tree-id31920 . -802) (undo-tree-id31921 . -802) (undo-tree-id31922 . -802) (undo-tree-id31923 . -802) (undo-tree-id31924 . -802) (undo-tree-id31925 . -802) (undo-tree-id31926 . -802) (undo-tree-id31927 . -802) (undo-tree-id31928 . -802) (undo-tree-id31929 . -802) (undo-tree-id31930 . -802) (undo-tree-id31931 . -802) (undo-tree-id31932 . -802) (undo-tree-id31933 . -802) (undo-tree-id31934 . -802) (undo-tree-id31935 . -802) (undo-tree-id31936 . -802) (undo-tree-id31937 . -802) (undo-tree-id31938 . -802) (undo-tree-id31939 . -802) (undo-tree-id31940 . -802) (undo-tree-id31941 . -802) (undo-tree-id31942 . -802) (undo-tree-id31943 . -802) (undo-tree-id31944 . -802) (undo-tree-id31945 . -802) (undo-tree-id31946 . -802) (undo-tree-id31947 . -802) (undo-tree-id31948 . -802) (undo-tree-id31949 . -802) (undo-tree-id31950 . -802) (undo-tree-id31951 . -802) (undo-tree-id31952 . -802) (undo-tree-id31953 . -802) (undo-tree-id31954 . -802) (undo-tree-id31955 . -802) (undo-tree-id31956 . -802) (undo-tree-id31957 . -802) (undo-tree-id31958 . -802) (undo-tree-id31959 . -802) (undo-tree-id31960 . -802) (undo-tree-id31961 . -802) (undo-tree-id31962 . -802) (undo-tree-id31963 . -802) (undo-tree-id31964 . -802) (undo-tree-id31965 . -802) (undo-tree-id31966 . -802) (undo-tree-id31967 . -802) (undo-tree-id31968 . -802) (undo-tree-id31969 . -802) (undo-tree-id31970 . -802) (undo-tree-id31971 . -802) (undo-tree-id31972 . -802) (undo-tree-id31973 . -802) (undo-tree-id31974 . -802) (undo-tree-id31975 . -802) (undo-tree-id31976 . -802) (undo-tree-id31977 . -802) (undo-tree-id31978 . -802) (undo-tree-id31979 . -802) (undo-tree-id31980 . -802) (undo-tree-id31981 . -802) (undo-tree-id31982 . -802) (undo-tree-id31983 . -802) (undo-tree-id31984 . -802) (undo-tree-id31985 . -802) (undo-tree-id31986 . -802) (undo-tree-id31987 . -802) (undo-tree-id31988 . -802) (undo-tree-id31989 . -802) (undo-tree-id31990 . -802) (undo-tree-id31991 . -802) (undo-tree-id31992 . -802) (undo-tree-id31993 . -802) (undo-tree-id31994 . -802) (undo-tree-id31995 . -802) (undo-tree-id31996 . -802) (undo-tree-id31997 . -802) (undo-tree-id31998 . -802) (undo-tree-id31999 . -802) (undo-tree-id32000 . -802) (undo-tree-id32001 . -802) (undo-tree-id32002 . -802) (undo-tree-id32003 . -802) (undo-tree-id32004 . -802) (undo-tree-id32005 . -802) (undo-tree-id32006 . -802) (undo-tree-id32007 . -802) (undo-tree-id32008 . -802) (undo-tree-id32009 . -802) (undo-tree-id32010 . -802) (undo-tree-id32011 . -802) (undo-tree-id32012 . -802) (undo-tree-id32013 . -802) (undo-tree-id32014 . -802) (undo-tree-id32015 . -802) (undo-tree-id32016 . -802) (undo-tree-id32017 . -802) (undo-tree-id32018 . -802) (undo-tree-id32019 . -802) (undo-tree-id32020 . -802) (undo-tree-id32021 . -802) (undo-tree-id32022 . -802) (undo-tree-id32023 . -802) (undo-tree-id32024 . -802) (undo-tree-id32025 . -802) (undo-tree-id32026 . -802) (undo-tree-id32027 . -802) (undo-tree-id32028 . -802) (undo-tree-id32029 . -802) (undo-tree-id32030 . -802) (undo-tree-id32031 . -802) (undo-tree-id32032 . -802) (undo-tree-id32033 . -802) (undo-tree-id32034 . -802) (undo-tree-id32035 . -802) (undo-tree-id32036 . -802) (undo-tree-id32037 . -802) (undo-tree-id32038 . -802) (undo-tree-id32039 . -802) (undo-tree-id32040 . -802) (undo-tree-id32041 . -802) (undo-tree-id32042 . -802) (undo-tree-id32043 . -802) (undo-tree-id32044 . -802) (undo-tree-id32045 . -802) (undo-tree-id32046 . -802) (undo-tree-id32047 . -802) (undo-tree-id32048 . -802) (undo-tree-id32049 . -802) (undo-tree-id32050 . -802) (undo-tree-id32051 . -802) (undo-tree-id32052 . -802) (undo-tree-id32053 . -802) (undo-tree-id32054 . -802) (undo-tree-id32055 . -802) (undo-tree-id32056 . -802) (undo-tree-id32057 . -802) (undo-tree-id32058 . -802) (undo-tree-id32059 . -802) (undo-tree-id32060 . -802) (undo-tree-id32061 . -802) (undo-tree-id32062 . -802) (undo-tree-id32063 . -802) (undo-tree-id32064 . -802) (undo-tree-id32065 . -802) (undo-tree-id32066 . -802) (undo-tree-id32067 . -802) (undo-tree-id32068 . -802) (undo-tree-id32069 . -802) (undo-tree-id32070 . -802) (undo-tree-id32071 . -802) (undo-tree-id32072 . -802) (undo-tree-id32073 . -802) (undo-tree-id32074 . -802) (undo-tree-id32075 . -802) (undo-tree-id32076 . -802) (undo-tree-id32077 . -802) (undo-tree-id32078 . -802) (undo-tree-id32079 . -802) (undo-tree-id32080 . -802) (undo-tree-id32081 . -802) (undo-tree-id32082 . -802) (undo-tree-id32083 . -802) (undo-tree-id32084 . -802) (undo-tree-id32085 . -802) (undo-tree-id32086 . -802) (undo-tree-id32087 . -802) (undo-tree-id32088 . -802) (undo-tree-id32089 . -802) (undo-tree-id32090 . -802) (undo-tree-id32091 . -802) (undo-tree-id32092 . -802) (undo-tree-id32093 . -865) (undo-tree-id32094 . -865) (undo-tree-id32095 . -865) (undo-tree-id32096 . -865) (undo-tree-id32097 . -865) (undo-tree-id32098 . -865) (undo-tree-id32099 . -865) (undo-tree-id32100 . -865) (undo-tree-id32101 . -865) (undo-tree-id32102 . -865) (undo-tree-id32103 . -865) (undo-tree-id32104 . -865) (undo-tree-id32105 . -865) (undo-tree-id32106 . -865) (undo-tree-id32107 . -865) (undo-tree-id32108 . -865) (undo-tree-id32109 . -865) (undo-tree-id32110 . -865) (undo-tree-id32111 . -865) (undo-tree-id32112 . -865) (undo-tree-id32113 . -865) (undo-tree-id32114 . -865) (undo-tree-id32115 . -865) (undo-tree-id32116 . -865) (undo-tree-id32117 . -865) (undo-tree-id32118 . -865) (undo-tree-id32119 . -865) (undo-tree-id32120 . -865) (undo-tree-id32121 . -865) (undo-tree-id32122 . -865) (undo-tree-id32123 . -865) (undo-tree-id32124 . -865) (undo-tree-id32125 . -865) (undo-tree-id32126 . -800) (3162 . 3962) (#("  Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each. Since Gradient Descent works best when the instances in the training set are independent and identically distributed (see Chapter 4), we need to shuffle these windows. Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32)." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 5 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 35 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 41 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 69 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 137 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 142 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 143 211 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 211 212 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 212 286 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 286 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 287 362 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 362 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 363 365 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 365 430 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 430 432 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 432 433 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 433 435 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 435 504 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 504 505 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 505 510 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 510 511 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 511 515 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 515 520 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 520 521 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 521 565 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 565 566 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 566 570 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 570 571 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 571 572 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 572 643 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 643 644 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 644 645 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 645 714 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 714 715 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 715 783 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 783 784 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 784 798 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 798 799 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 3227) (undo-tree-id32127 . -1) (undo-tree-id32128 . 798) (undo-tree-id32129 . -1) (undo-tree-id32130 . -1) (undo-tree-id32131 . -1) (undo-tree-id32132 . -1) (undo-tree-id32133 . -1) (undo-tree-id32134 . -1) (undo-tree-id32135 . -1) (undo-tree-id32136 . -1) (undo-tree-id32137 . -1) (undo-tree-id32138 . -1) (undo-tree-id32139 . -1) (undo-tree-id32140 . -1) (undo-tree-id32141 . -1) (undo-tree-id32142 . -1) (undo-tree-id32143 . -1) (undo-tree-id32144 . -1) (undo-tree-id32145 . -1) (undo-tree-id32146 . -1) (undo-tree-id32147 . -1) (undo-tree-id32148 . -1) (undo-tree-id32149 . -1) (undo-tree-id32150 . -1) (undo-tree-id32151 . -1) (undo-tree-id32152 . -1) (undo-tree-id32153 . -1) (undo-tree-id32154 . -1) (undo-tree-id32155 . -1) (undo-tree-id32156 . -1) (undo-tree-id32157 . -1) (undo-tree-id32158 . -1) (undo-tree-id32159 . -1) (undo-tree-id32160 . -1) (undo-tree-id32161 . -1) (undo-tree-id32162 . -1) (undo-tree-id32163 . -1) (undo-tree-id32164 . -1) (undo-tree-id32165 . -1) (undo-tree-id32166 . -1) (undo-tree-id32167 . -1) (undo-tree-id32168 . -1) (undo-tree-id32169 . -1) (undo-tree-id32170 . -1) (undo-tree-id32171 . -1) (undo-tree-id32172 . -1) (undo-tree-id32173 . -1) (undo-tree-id32174 . -1) (undo-tree-id32175 . -1) (undo-tree-id32176 . -1) (undo-tree-id32177 . -1) (undo-tree-id32178 . -1) (undo-tree-id32179 . -1) (undo-tree-id32180 . -1) (undo-tree-id32181 . -1) (undo-tree-id32182 . -1) (undo-tree-id32183 . -1) (undo-tree-id32184 . -1) (undo-tree-id32185 . -1) (undo-tree-id32186 . -1) (undo-tree-id32187 . -1) (undo-tree-id32188 . -1) (undo-tree-id32189 . -1) (undo-tree-id32190 . -1) (undo-tree-id32191 . -1) (undo-tree-id32192 . -1) (undo-tree-id32193 . -1) (undo-tree-id32194 . -1) (undo-tree-id32195 . -1) (undo-tree-id32196 . -1) (undo-tree-id32197 . -1) (undo-tree-id32198 . -1) (undo-tree-id32199 . -1) (undo-tree-id32200 . -1) (undo-tree-id32201 . -1) (undo-tree-id32202 . -1) (undo-tree-id32203 . -1) (undo-tree-id32204 . -1) (undo-tree-id32205 . -1) (undo-tree-id32206 . -1) (undo-tree-id32207 . -1) (undo-tree-id32208 . -1) (undo-tree-id32209 . -1) (undo-tree-id32210 . -1) (undo-tree-id32211 . -1) (undo-tree-id32212 . -1) (undo-tree-id32213 . -1) (undo-tree-id32214 . -1) (undo-tree-id32215 . -1) (undo-tree-id32216 . -1) (undo-tree-id32217 . -1) (undo-tree-id32218 . -1) (undo-tree-id32219 . -1) (undo-tree-id32220 . -1) (undo-tree-id32221 . -1) (undo-tree-id32222 . -1) (undo-tree-id32223 . -1) (undo-tree-id32224 . -1) (undo-tree-id32225 . -1) (undo-tree-id32226 . -1) (undo-tree-id32227 . -1) (undo-tree-id32228 . -1) (undo-tree-id32229 . -1) (undo-tree-id32230 . -1) (undo-tree-id32231 . -1) (undo-tree-id32232 . -1) (undo-tree-id32233 . -1) (undo-tree-id32234 . -1) (undo-tree-id32235 . -1) (undo-tree-id32236 . -1) (undo-tree-id32237 . -1) (undo-tree-id32238 . -1) (undo-tree-id32239 . -1) (undo-tree-id32240 . -1) (undo-tree-id32241 . -1) (undo-tree-id32242 . -1) (undo-tree-id32243 . -1) (undo-tree-id32244 . -1) (undo-tree-id32245 . -1) (undo-tree-id32246 . -1) (undo-tree-id32247 . -1) (undo-tree-id32248 . -1) (undo-tree-id32249 . -1) (undo-tree-id32250 . -1) (undo-tree-id32251 . -1) (undo-tree-id32252 . -1) (undo-tree-id32253 . -1) (undo-tree-id32254 . -1) (undo-tree-id32255 . -1) (undo-tree-id32256 . -1) (undo-tree-id32257 . -1) (undo-tree-id32258 . -1) (undo-tree-id32259 . -1) (undo-tree-id32260 . -1) (undo-tree-id32261 . -1) (undo-tree-id32262 . -1) (undo-tree-id32263 . -1) (undo-tree-id32264 . -1) (undo-tree-id32265 . -1) (undo-tree-id32266 . -1) (undo-tree-id32267 . -1) (undo-tree-id32268 . -1) (undo-tree-id32269 . -1) (undo-tree-id32270 . -1) (undo-tree-id32271 . -1) (undo-tree-id32272 . -1) (undo-tree-id32273 . -1) (undo-tree-id32274 . -1) (undo-tree-id32275 . -1) (undo-tree-id32276 . -1) (undo-tree-id32277 . -1) (undo-tree-id32278 . -1) (undo-tree-id32279 . -1) (undo-tree-id32280 . -1) (undo-tree-id32281 . -1) (undo-tree-id32282 . -1) (undo-tree-id32283 . -1) (undo-tree-id32284 . -1) (undo-tree-id32285 . -1) (undo-tree-id32286 . -1) (undo-tree-id32287 . -1) (undo-tree-id32288 . -1) (undo-tree-id32289 . -1) (undo-tree-id32290 . -1) (undo-tree-id32291 . -1) (undo-tree-id32292 . -1) (undo-tree-id32293 . -1) (undo-tree-id32294 . -1) (undo-tree-id32295 . -1) (undo-tree-id32296 . -1) (undo-tree-id32297 . -1) (undo-tree-id32298 . -1) (undo-tree-id32299 . -1) (undo-tree-id32300 . -1) (undo-tree-id32301 . -1) (undo-tree-id32302 . -1) (undo-tree-id32303 . -1) (undo-tree-id32304 . -1) (undo-tree-id32305 . -1) (undo-tree-id32306 . -1) (undo-tree-id32307 . -1) (undo-tree-id32308 . -1) (undo-tree-id32309 . -1) (undo-tree-id32310 . -1) (undo-tree-id32311 . -1) (undo-tree-id32312 . -1) (undo-tree-id32313 . -1) (undo-tree-id32314 . -1) (undo-tree-id32315 . -1) (undo-tree-id32316 . -1) (undo-tree-id32317 . -1) (undo-tree-id32318 . -1) (undo-tree-id32319 . -1) (undo-tree-id32320 . -1) (undo-tree-id32321 . -1) (undo-tree-id32322 . -1) (undo-tree-id32323 . -1) (undo-tree-id32324 . -1) (undo-tree-id32325 . -1) (undo-tree-id32326 . -1) (undo-tree-id32327 . -1) (undo-tree-id32328 . -1) (undo-tree-id32329 . -1) (undo-tree-id32330 . -1) (undo-tree-id32331 . -1) (undo-tree-id32332 . -1) (undo-tree-id32333 . -1) (undo-tree-id32334 . -1) (undo-tree-id32335 . -1) (undo-tree-id32336 . -1) (undo-tree-id32337 . -1) (undo-tree-id32338 . -1) (undo-tree-id32339 . -1) (undo-tree-id32340 . -1) (undo-tree-id32341 . -1) (undo-tree-id32342 . -1) (undo-tree-id32343 . -1) (undo-tree-id32344 . -1) (undo-tree-id32345 . -1) (undo-tree-id32346 . -1) (undo-tree-id32347 . -1) (undo-tree-id32348 . -1) (undo-tree-id32349 . -1) (undo-tree-id32350 . -1) (undo-tree-id32351 . -1) (undo-tree-id32352 . -1) (undo-tree-id32353 . -1) (undo-tree-id32354 . -1) (undo-tree-id32355 . -1) (undo-tree-id32356 . -1) (undo-tree-id32357 . -1) (undo-tree-id32358 . -1) (undo-tree-id32359 . -1) (undo-tree-id32360 . -1) (undo-tree-id32361 . -1) (undo-tree-id32362 . -1) (undo-tree-id32363 . -1) (undo-tree-id32364 . -1) (undo-tree-id32365 . -1) (undo-tree-id32366 . -1) (undo-tree-id32367 . -1) (undo-tree-id32368 . -1) (undo-tree-id32369 . -1) (undo-tree-id32370 . -1) (undo-tree-id32371 . -1) (undo-tree-id32372 . -1) (undo-tree-id32373 . -1) (undo-tree-id32374 . -1) (undo-tree-id32375 . -1) (undo-tree-id32376 . -1) (undo-tree-id32377 . -1) (undo-tree-id32378 . -1) (undo-tree-id32379 . -1) (undo-tree-id32380 . -1) (undo-tree-id32381 . -1) (undo-tree-id32382 . -1) (undo-tree-id32383 . -1) (undo-tree-id32384 . -1) (undo-tree-id32385 . -1) (undo-tree-id32386 . -1) (undo-tree-id32387 . -1) (undo-tree-id32388 . -1) (undo-tree-id32389 . -1) (undo-tree-id32390 . -1) (undo-tree-id32391 . -1) (undo-tree-id32392 . -1) (undo-tree-id32393 . -1) (undo-tree-id32394 . -1) (undo-tree-id32395 . -1) (undo-tree-id32396 . -1) (undo-tree-id32397 . -1) (undo-tree-id32398 . -1) (undo-tree-id32399 . -1) (undo-tree-id32400 . -1) (undo-tree-id32401 . -1) (undo-tree-id32402 . -1) (undo-tree-id32403 . -1) (undo-tree-id32404 . -1) (undo-tree-id32405 . -1) (undo-tree-id32406 . -1) (undo-tree-id32407 . -1) (undo-tree-id32408 . -1) (undo-tree-id32409 . -1) (undo-tree-id32410 . -1) (undo-tree-id32411 . -1) (undo-tree-id32412 . -1) (undo-tree-id32413 . -1) (undo-tree-id32414 . -1) (undo-tree-id32415 . -1) (undo-tree-id32416 . -1) (undo-tree-id32417 . -2) (undo-tree-id32418 . -2) (undo-tree-id32419 . -2) (undo-tree-id32420 . -2) (undo-tree-id32421 . -2) (undo-tree-id32422 . -2) (undo-tree-id32423 . -2) (undo-tree-id32424 . -2) (undo-tree-id32425 . -2) (undo-tree-id32426 . -2) (undo-tree-id32427 . -2) (undo-tree-id32428 . -2) (undo-tree-id32429 . -2) (undo-tree-id32430 . -2) (undo-tree-id32431 . -2) (undo-tree-id32432 . -2) (undo-tree-id32433 . -2) (undo-tree-id32434 . -2) (undo-tree-id32435 . -2) (undo-tree-id32436 . -2) (undo-tree-id32437 . -2) (undo-tree-id32438 . -2) (undo-tree-id32439 . -2) (undo-tree-id32440 . -2) (undo-tree-id32441 . -2) (undo-tree-id32442 . -2) (undo-tree-id32443 . -2) (undo-tree-id32444 . -2) (undo-tree-id32445 . -2) (undo-tree-id32446 . -2) (undo-tree-id32447 . -2) (undo-tree-id32448 . -2) (undo-tree-id32449 . -2) (undo-tree-id32450 . -2) 3229 (t 25767 5897 336170 334000)) nil (25767 5967 565050 397000) 0 nil])
([nil nil ((#("Notice that we call batch(window_length) on each window: since all windows have exactly that length, we will get a single tensor for each of them. Now the dataset contains consecutive windows of 101 characters each." 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 33 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 39 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 67 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 135 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 140 141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 141 209 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 209 210 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 210 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3230) (undo-tree-id30712 . -214) (undo-tree-id30713 . -214) (undo-tree-id30714 . 215) (undo-tree-id30715 . -214) (undo-tree-id30716 . -215) (undo-tree-id30717 . -214) (undo-tree-id30718 . -5) (undo-tree-id30719 . -5) (undo-tree-id30720 . -5) (undo-tree-id30721 . -5) (undo-tree-id30722 . -5) (undo-tree-id30723 . -5) (undo-tree-id30724 . -5) (undo-tree-id30725 . -5) (undo-tree-id30726 . -5) (undo-tree-id30727 . -5) (undo-tree-id30728 . -5) (undo-tree-id30729 . -5) (undo-tree-id30730 . -5) (undo-tree-id30731 . -5) (undo-tree-id30732 . -5) (undo-tree-id30733 . -5) (undo-tree-id30734 . -5) (undo-tree-id30735 . -5) (undo-tree-id30736 . -5) (undo-tree-id30737 . -5) (undo-tree-id30738 . -5) (undo-tree-id30739 . -5) (undo-tree-id30740 . -10) (undo-tree-id30741 . -10) (undo-tree-id30742 . -10) (undo-tree-id30743 . -10) (undo-tree-id30744 . -10) (undo-tree-id30745 . -10) (undo-tree-id30746 . -10) (undo-tree-id30747 . -10) (undo-tree-id30748 . -10) (undo-tree-id30749 . -10) (undo-tree-id30750 . -10) (undo-tree-id30751 . -10) (undo-tree-id30752 . -10) (undo-tree-id30753 . -10) (undo-tree-id30754 . -10) (undo-tree-id30755 . -10) (undo-tree-id30756 . -10) (undo-tree-id30757 . -10) (undo-tree-id30758 . -10) (undo-tree-id30759 . -10) (undo-tree-id30760 . -10) (undo-tree-id30761 . -10) (undo-tree-id30762 . -13) (undo-tree-id30763 . -13) (undo-tree-id30764 . -13) (undo-tree-id30765 . -13) (undo-tree-id30766 . -13) (undo-tree-id30767 . -13) (undo-tree-id30768 . -13) (undo-tree-id30769 . -13) (undo-tree-id30770 . -13) (undo-tree-id30771 . -13) (undo-tree-id30772 . -13) (undo-tree-id30773 . -13) (undo-tree-id30774 . -13) (undo-tree-id30775 . -13) (undo-tree-id30776 . -13) (undo-tree-id30777 . -13) (undo-tree-id30778 . -13) (undo-tree-id30779 . -13) (undo-tree-id30780 . -13) (undo-tree-id30781 . -13) (undo-tree-id30782 . -13) (undo-tree-id30783 . -13) (undo-tree-id30784 . -18) (undo-tree-id30785 . -18) (undo-tree-id30786 . -18) (undo-tree-id30787 . -18) (undo-tree-id30788 . -18) (undo-tree-id30789 . -18) (undo-tree-id30790 . -18) (undo-tree-id30791 . -18) (undo-tree-id30792 . -18) (undo-tree-id30793 . -18) (undo-tree-id30794 . -18) (undo-tree-id30795 . -18) (undo-tree-id30796 . -18) (undo-tree-id30797 . -18) (undo-tree-id30798 . -18) (undo-tree-id30799 . -18) (undo-tree-id30800 . -18) (undo-tree-id30801 . -18) (undo-tree-id30802 . -18) (undo-tree-id30803 . -18) (undo-tree-id30804 . -18) (undo-tree-id30805 . -18) (undo-tree-id30806 . -24) (undo-tree-id30807 . -24) (undo-tree-id30808 . -24) (undo-tree-id30809 . -24) (undo-tree-id30810 . -24) (undo-tree-id30811 . -24) (undo-tree-id30812 . -24) (undo-tree-id30813 . -24) (undo-tree-id30814 . -24) (undo-tree-id30815 . -24) (undo-tree-id30816 . -24) (undo-tree-id30817 . -24) (undo-tree-id30818 . -24) (undo-tree-id30819 . -24) (undo-tree-id30820 . -24) (undo-tree-id30821 . -24) (undo-tree-id30822 . -24) (undo-tree-id30823 . -24) (undo-tree-id30824 . -24) (undo-tree-id30825 . -24) (undo-tree-id30826 . -24) (undo-tree-id30827 . -24) (undo-tree-id30828 . -25) (undo-tree-id30829 . -25) (undo-tree-id30830 . -25) (undo-tree-id30831 . -25) (undo-tree-id30832 . -25) (undo-tree-id30833 . -25) (undo-tree-id30834 . -25) (undo-tree-id30835 . -25) (undo-tree-id30836 . -25) (undo-tree-id30837 . -25) (undo-tree-id30838 . -25) (undo-tree-id30839 . -25) (undo-tree-id30840 . -25) (undo-tree-id30841 . -25) (undo-tree-id30842 . -25) (undo-tree-id30843 . -25) (undo-tree-id30844 . -25) (undo-tree-id30845 . -25) (undo-tree-id30846 . -25) (undo-tree-id30847 . -25) (undo-tree-id30848 . -25) (undo-tree-id30849 . -25) (undo-tree-id30850 . -31) (undo-tree-id30851 . -31) (undo-tree-id30852 . -31) (undo-tree-id30853 . -31) (undo-tree-id30854 . -31) (undo-tree-id30855 . -31) (undo-tree-id30856 . -31) (undo-tree-id30857 . -31) (undo-tree-id30858 . -31) (undo-tree-id30859 . -31) (undo-tree-id30860 . -31) (undo-tree-id30861 . -31) (undo-tree-id30862 . -31) (undo-tree-id30863 . -31) (undo-tree-id30864 . -31) (undo-tree-id30865 . -31) (undo-tree-id30866 . -31) (undo-tree-id30867 . -31) (undo-tree-id30868 . -31) (undo-tree-id30869 . -31) (undo-tree-id30870 . -31) (undo-tree-id30871 . -31) (undo-tree-id30872 . -32) (undo-tree-id30873 . -32) (undo-tree-id30874 . -32) (undo-tree-id30875 . -32) (undo-tree-id30876 . -32) (undo-tree-id30877 . -32) (undo-tree-id30878 . -32) (undo-tree-id30879 . -32) (undo-tree-id30880 . -32) (undo-tree-id30881 . -32) (undo-tree-id30882 . -32) (undo-tree-id30883 . -32) (undo-tree-id30884 . -32) (undo-tree-id30885 . -32) (undo-tree-id30886 . -32) (undo-tree-id30887 . -32) (undo-tree-id30888 . -32) (undo-tree-id30889 . -32) (undo-tree-id30890 . -32) (undo-tree-id30891 . -32) (undo-tree-id30892 . -32) (undo-tree-id30893 . -32) (undo-tree-id30894 . -38) (undo-tree-id30895 . -38) (undo-tree-id30896 . -38) (undo-tree-id30897 . -38) (undo-tree-id30898 . -38) (undo-tree-id30899 . -38) (undo-tree-id30900 . -38) (undo-tree-id30901 . -38) (undo-tree-id30902 . -38) (undo-tree-id30903 . -38) (undo-tree-id30904 . -38) (undo-tree-id30905 . -38) (undo-tree-id30906 . -38) (undo-tree-id30907 . -38) (undo-tree-id30908 . -38) (undo-tree-id30909 . -38) (undo-tree-id30910 . -38) (undo-tree-id30911 . -38) (undo-tree-id30912 . -38) (undo-tree-id30913 . -38) (undo-tree-id30914 . -38) (undo-tree-id30915 . -38) (undo-tree-id30916 . -39) (undo-tree-id30917 . -39) (undo-tree-id30918 . -39) (undo-tree-id30919 . -39) (undo-tree-id30920 . -39) (undo-tree-id30921 . -39) (undo-tree-id30922 . -39) (undo-tree-id30923 . -39) (undo-tree-id30924 . -39) (undo-tree-id30925 . -39) (undo-tree-id30926 . -39) (undo-tree-id30927 . -39) (undo-tree-id30928 . -39) (undo-tree-id30929 . -39) (undo-tree-id30930 . -39) (undo-tree-id30931 . -39) (undo-tree-id30932 . -39) (undo-tree-id30933 . -39) (undo-tree-id30934 . -39) (undo-tree-id30935 . -39) (undo-tree-id30936 . -39) (undo-tree-id30937 . -39) (undo-tree-id30938 . -42) (undo-tree-id30939 . -42) (undo-tree-id30940 . -42) (undo-tree-id30941 . -42) (undo-tree-id30942 . -42) (undo-tree-id30943 . -42) (undo-tree-id30944 . -42) (undo-tree-id30945 . -42) (undo-tree-id30946 . -42) (undo-tree-id30947 . -42) (undo-tree-id30948 . -42) (undo-tree-id30949 . -42) (undo-tree-id30950 . -42) (undo-tree-id30951 . -42) (undo-tree-id30952 . -42) (undo-tree-id30953 . -42) (undo-tree-id30954 . -42) (undo-tree-id30955 . -42) (undo-tree-id30956 . -42) (undo-tree-id30957 . -42) (undo-tree-id30958 . -42) (undo-tree-id30959 . -42) (undo-tree-id30960 . -47) (undo-tree-id30961 . -47) (undo-tree-id30962 . -47) (undo-tree-id30963 . -47) (undo-tree-id30964 . -47) (undo-tree-id30965 . -47) (undo-tree-id30966 . -47) (undo-tree-id30967 . -47) (undo-tree-id30968 . -54) (undo-tree-id30969 . -54) (undo-tree-id30970 . -54) (undo-tree-id30971 . -54) (undo-tree-id30972 . -54) (undo-tree-id30973 . -54) (undo-tree-id30974 . -54) (undo-tree-id30975 . -54) (undo-tree-id30976 . -55) (undo-tree-id30977 . -55) (undo-tree-id30978 . -55) (undo-tree-id30979 . -55) (undo-tree-id30980 . -55) (undo-tree-id30981 . -55) (undo-tree-id30982 . -55) (undo-tree-id30983 . -55) (undo-tree-id30984 . -61) (undo-tree-id30985 . -61) (undo-tree-id30986 . -61) (undo-tree-id30987 . -61) (undo-tree-id30988 . -61) (undo-tree-id30989 . -61) (undo-tree-id30990 . -61) (undo-tree-id30991 . -61) (undo-tree-id30992 . -65) (undo-tree-id30993 . -65) (undo-tree-id30994 . -65) (undo-tree-id30995 . -65) (undo-tree-id30996 . -65) (undo-tree-id30997 . -65) (undo-tree-id30998 . -65) (undo-tree-id30999 . -65) (undo-tree-id31000 . -73) (undo-tree-id31001 . -73) (undo-tree-id31002 . -73) (undo-tree-id31003 . -73) (undo-tree-id31004 . -73) (undo-tree-id31005 . -73) (undo-tree-id31006 . -73) (undo-tree-id31007 . -73) (undo-tree-id31008 . -78) (undo-tree-id31009 . -78) (undo-tree-id31010 . -78) (undo-tree-id31011 . -78) (undo-tree-id31012 . -78) (undo-tree-id31013 . -78) (undo-tree-id31014 . -78) (undo-tree-id31015 . -78) (undo-tree-id31016 . -86) (undo-tree-id31017 . -86) (undo-tree-id31018 . -86) (undo-tree-id31019 . -86) (undo-tree-id31020 . -86) (undo-tree-id31021 . -86) (undo-tree-id31022 . -86) (undo-tree-id31023 . -86) (undo-tree-id31024 . -91) (undo-tree-id31025 . -91) (undo-tree-id31026 . -91) (undo-tree-id31027 . -91) (undo-tree-id31028 . -91) (undo-tree-id31029 . -91) (undo-tree-id31030 . -91) (undo-tree-id31031 . -91) (undo-tree-id31032 . -91) (undo-tree-id31033 . -91) (undo-tree-id31034 . -91) (undo-tree-id31035 . -91) (undo-tree-id31036 . -91) (undo-tree-id31037 . -91) (undo-tree-id31038 . -91) (undo-tree-id31039 . -98) (undo-tree-id31040 . -98) (undo-tree-id31041 . -98) (undo-tree-id31042 . -98) (undo-tree-id31043 . -98) (undo-tree-id31044 . -98) (undo-tree-id31045 . -98) (undo-tree-id31046 . -98) (undo-tree-id31047 . -99) (undo-tree-id31048 . -99) (undo-tree-id31049 . -99) (undo-tree-id31050 . -99) (undo-tree-id31051 . -99) (undo-tree-id31052 . -99) (undo-tree-id31053 . -99) (undo-tree-id31054 . -99) (undo-tree-id31055 . -102) (undo-tree-id31056 . -102) (undo-tree-id31057 . -102) (undo-tree-id31058 . -102) (undo-tree-id31059 . -102) (undo-tree-id31060 . -102) (undo-tree-id31061 . -102) (undo-tree-id31062 . -102) (undo-tree-id31063 . -102) (undo-tree-id31064 . -102) (undo-tree-id31065 . -102) (undo-tree-id31066 . -102) (undo-tree-id31067 . -102) (undo-tree-id31068 . -102) (undo-tree-id31069 . -102) (undo-tree-id31070 . -102) (undo-tree-id31071 . -102) (undo-tree-id31072 . -102) (undo-tree-id31073 . -102) (undo-tree-id31074 . -102) (undo-tree-id31075 . -102) (undo-tree-id31076 . -102) (undo-tree-id31077 . -107) (undo-tree-id31078 . -107) (undo-tree-id31079 . -107) (undo-tree-id31080 . -107) (undo-tree-id31081 . -107) (undo-tree-id31082 . -107) (undo-tree-id31083 . -107) (undo-tree-id31084 . -107) (undo-tree-id31085 . -107) (undo-tree-id31086 . -107) (undo-tree-id31087 . -107) (undo-tree-id31088 . -107) (undo-tree-id31089 . -107) (undo-tree-id31090 . -107) (undo-tree-id31091 . -107) (undo-tree-id31092 . -107) (undo-tree-id31093 . -107) (undo-tree-id31094 . -107) (undo-tree-id31095 . -107) (undo-tree-id31096 . -107) (undo-tree-id31097 . -107) (undo-tree-id31098 . -107) (undo-tree-id31099 . -111) (undo-tree-id31100 . -111) (undo-tree-id31101 . -111) (undo-tree-id31102 . -111) (undo-tree-id31103 . -111) (undo-tree-id31104 . -111) (undo-tree-id31105 . -111) (undo-tree-id31106 . -111) (undo-tree-id31107 . -111) (undo-tree-id31108 . -111) (undo-tree-id31109 . -111) (undo-tree-id31110 . -111) (undo-tree-id31111 . -111) (undo-tree-id31112 . -111) (undo-tree-id31113 . -111) (undo-tree-id31114 . -111) (undo-tree-id31115 . -111) (undo-tree-id31116 . -111) (undo-tree-id31117 . -111) (undo-tree-id31118 . -111) (undo-tree-id31119 . -111) (undo-tree-id31120 . -111) (undo-tree-id31121 . -113) (undo-tree-id31122 . -113) (undo-tree-id31123 . -113) (undo-tree-id31124 . -113) (undo-tree-id31125 . -113) (undo-tree-id31126 . -113) (undo-tree-id31127 . -113) (undo-tree-id31128 . -113) (undo-tree-id31129 . -113) (undo-tree-id31130 . -113) (undo-tree-id31131 . -113) (undo-tree-id31132 . -113) (undo-tree-id31133 . -113) (undo-tree-id31134 . -113) (undo-tree-id31135 . -113) (undo-tree-id31136 . -113) (undo-tree-id31137 . -113) (undo-tree-id31138 . -113) (undo-tree-id31139 . -113) (undo-tree-id31140 . -113) (undo-tree-id31141 . -113) (undo-tree-id31142 . -113) (undo-tree-id31143 . -120) (undo-tree-id31144 . -120) (undo-tree-id31145 . -120) (undo-tree-id31146 . -120) (undo-tree-id31147 . -120) (undo-tree-id31148 . -120) (undo-tree-id31149 . -120) (undo-tree-id31150 . -120) (undo-tree-id31151 . -120) (undo-tree-id31152 . -120) (undo-tree-id31153 . -120) (undo-tree-id31154 . -120) (undo-tree-id31155 . -120) (undo-tree-id31156 . -120) (undo-tree-id31157 . -120) (undo-tree-id31158 . -120) (undo-tree-id31159 . -120) (undo-tree-id31160 . -120) (undo-tree-id31161 . -120) (undo-tree-id31162 . -120) (undo-tree-id31163 . -120) (undo-tree-id31164 . -120) (undo-tree-id31165 . -127) (undo-tree-id31166 . -127) (undo-tree-id31167 . -127) (undo-tree-id31168 . -127) (undo-tree-id31169 . -127) (undo-tree-id31170 . -127) (undo-tree-id31171 . -127) (undo-tree-id31172 . -127) (undo-tree-id31173 . -127) (undo-tree-id31174 . -127) (undo-tree-id31175 . -127) (undo-tree-id31176 . -127) (undo-tree-id31177 . -127) (undo-tree-id31178 . -127) (undo-tree-id31179 . -127) (undo-tree-id31180 . -127) (undo-tree-id31181 . -127) (undo-tree-id31182 . -127) (undo-tree-id31183 . -127) (undo-tree-id31184 . -127) (undo-tree-id31185 . -127) (undo-tree-id31186 . -127) (undo-tree-id31187 . -131) (undo-tree-id31188 . -131) (undo-tree-id31189 . -131) (undo-tree-id31190 . -131) (undo-tree-id31191 . -131) (undo-tree-id31192 . -131) (undo-tree-id31193 . -131) (undo-tree-id31194 . -131) (undo-tree-id31195 . -131) (undo-tree-id31196 . -131) (undo-tree-id31197 . -131) (undo-tree-id31198 . -131) (undo-tree-id31199 . -131) (undo-tree-id31200 . -131) (undo-tree-id31201 . -131) (undo-tree-id31202 . -131) (undo-tree-id31203 . -131) (undo-tree-id31204 . -131) (undo-tree-id31205 . -131) (undo-tree-id31206 . -131) (undo-tree-id31207 . -131) (undo-tree-id31208 . -131) (undo-tree-id31209 . -136) (undo-tree-id31210 . -136) (undo-tree-id31211 . -136) (undo-tree-id31212 . -136) (undo-tree-id31213 . -136) (undo-tree-id31214 . -136) (undo-tree-id31215 . -136) (undo-tree-id31216 . -136) (undo-tree-id31217 . -136) (undo-tree-id31218 . -136) (undo-tree-id31219 . -136) (undo-tree-id31220 . -136) (undo-tree-id31221 . -136) (undo-tree-id31222 . -136) (undo-tree-id31223 . -136) (undo-tree-id31224 . -136) (undo-tree-id31225 . -136) (undo-tree-id31226 . -136) (undo-tree-id31227 . -136) (undo-tree-id31228 . -136) (undo-tree-id31229 . -136) (undo-tree-id31230 . -136) (undo-tree-id31231 . -139) (undo-tree-id31232 . -139) (undo-tree-id31233 . -139) (undo-tree-id31234 . -139) (undo-tree-id31235 . -139) (undo-tree-id31236 . -139) (undo-tree-id31237 . -139) (undo-tree-id31238 . -139) (undo-tree-id31239 . -139) (undo-tree-id31240 . -139) (undo-tree-id31241 . -139) (undo-tree-id31242 . -139) (undo-tree-id31243 . -139) (undo-tree-id31244 . -139) (undo-tree-id31245 . -139) (undo-tree-id31246 . -139) (undo-tree-id31247 . -139) (undo-tree-id31248 . -139) (undo-tree-id31249 . -139) (undo-tree-id31250 . -139) (undo-tree-id31251 . -139) (undo-tree-id31252 . -139) (undo-tree-id31253 . -144) (undo-tree-id31254 . -144) (undo-tree-id31255 . -144) (undo-tree-id31256 . -144) (undo-tree-id31257 . -144) (undo-tree-id31258 . -144) (undo-tree-id31259 . -144) (undo-tree-id31260 . -144) (undo-tree-id31261 . -144) (undo-tree-id31262 . -144) (undo-tree-id31263 . -144) (undo-tree-id31264 . -144) (undo-tree-id31265 . -144) (undo-tree-id31266 . -144) (undo-tree-id31267 . -144) (undo-tree-id31268 . -144) (undo-tree-id31269 . -144) (undo-tree-id31270 . -144) (undo-tree-id31271 . -144) (undo-tree-id31272 . -144) (undo-tree-id31273 . -144) (undo-tree-id31274 . -144) (undo-tree-id31275 . -145) (undo-tree-id31276 . -145) (undo-tree-id31277 . -145) (undo-tree-id31278 . -145) (undo-tree-id31279 . -145) (undo-tree-id31280 . -145) (undo-tree-id31281 . -145) (undo-tree-id31282 . -145) (undo-tree-id31283 . -145) (undo-tree-id31284 . -145) (undo-tree-id31285 . -145) (undo-tree-id31286 . -145) (undo-tree-id31287 . -145) (undo-tree-id31288 . -145) (undo-tree-id31289 . -145) (undo-tree-id31290 . -145) (undo-tree-id31291 . -145) (undo-tree-id31292 . -145) (undo-tree-id31293 . -145) (undo-tree-id31294 . -145) (undo-tree-id31295 . -145) (undo-tree-id31296 . -145) (undo-tree-id31297 . -149) (undo-tree-id31298 . -149) (undo-tree-id31299 . -149) (undo-tree-id31300 . -149) (undo-tree-id31301 . -149) (undo-tree-id31302 . -149) (undo-tree-id31303 . -149) (undo-tree-id31304 . -149) (undo-tree-id31305 . -149) (undo-tree-id31306 . -149) (undo-tree-id31307 . -149) (undo-tree-id31308 . -149) (undo-tree-id31309 . -149) (undo-tree-id31310 . -149) (undo-tree-id31311 . -149) (undo-tree-id31312 . -149) (undo-tree-id31313 . -149) (undo-tree-id31314 . -149) (undo-tree-id31315 . -149) (undo-tree-id31316 . -149) (undo-tree-id31317 . -149) (undo-tree-id31318 . -149) (undo-tree-id31319 . -153) (undo-tree-id31320 . -153) (undo-tree-id31321 . -153) (undo-tree-id31322 . -153) (undo-tree-id31323 . -153) (undo-tree-id31324 . -153) (undo-tree-id31325 . -153) (undo-tree-id31326 . -153) (undo-tree-id31327 . -153) (undo-tree-id31328 . -153) (undo-tree-id31329 . -153) (undo-tree-id31330 . -153) (undo-tree-id31331 . -153) (undo-tree-id31332 . -153) (undo-tree-id31333 . -153) (undo-tree-id31334 . -153) (undo-tree-id31335 . -153) (undo-tree-id31336 . -153) (undo-tree-id31337 . -153) (undo-tree-id31338 . -153) (undo-tree-id31339 . -153) (undo-tree-id31340 . -153) (undo-tree-id31341 . 60) (undo-tree-id31342 . -162) (undo-tree-id31343 . -161) (undo-tree-id31344 . -161) (undo-tree-id31345 . -161) (undo-tree-id31346 . -161) (undo-tree-id31347 . -161) (undo-tree-id31348 . -161) (undo-tree-id31349 . -161) (undo-tree-id31350 . -161) (undo-tree-id31351 . -161) (undo-tree-id31352 . -161) (undo-tree-id31353 . -161) (undo-tree-id31354 . -161) (undo-tree-id31355 . -161) (undo-tree-id31356 . -161) (undo-tree-id31357 . -161) (undo-tree-id31358 . -161) (undo-tree-id31359 . -161) (undo-tree-id31360 . -161) (undo-tree-id31361 . -161) (undo-tree-id31362 . -161) (undo-tree-id31363 . -161) (undo-tree-id31364 . -161) (undo-tree-id31365 . -170) (undo-tree-id31366 . -170) (undo-tree-id31367 . -170) (undo-tree-id31368 . -170) (undo-tree-id31369 . -170) (undo-tree-id31370 . -170) (undo-tree-id31371 . -170) (undo-tree-id31372 . -170) (undo-tree-id31373 . -170) (undo-tree-id31374 . -170) (undo-tree-id31375 . -170) (undo-tree-id31376 . -170) (undo-tree-id31377 . -170) (undo-tree-id31378 . -170) (undo-tree-id31379 . -170) (undo-tree-id31380 . -170) (undo-tree-id31381 . -170) (undo-tree-id31382 . -170) (undo-tree-id31383 . -170) (undo-tree-id31384 . -170) (undo-tree-id31385 . -170) (undo-tree-id31386 . -170) (undo-tree-id31387 . -182) (undo-tree-id31388 . -182) (undo-tree-id31389 . -182) (undo-tree-id31390 . -182) (undo-tree-id31391 . -182) (undo-tree-id31392 . -182) (undo-tree-id31393 . -182) (undo-tree-id31394 . -182) (undo-tree-id31395 . -182) (undo-tree-id31396 . -182) (undo-tree-id31397 . -182) (undo-tree-id31398 . -182) (undo-tree-id31399 . -182) (undo-tree-id31400 . -182) (undo-tree-id31401 . -182) (undo-tree-id31402 . -182) (undo-tree-id31403 . -182) (undo-tree-id31404 . -182) (undo-tree-id31405 . -182) (undo-tree-id31406 . -182) (undo-tree-id31407 . -182) (undo-tree-id31408 . -182) (undo-tree-id31409 . -190) (undo-tree-id31410 . -190) (undo-tree-id31411 . -190) (undo-tree-id31412 . -190) (undo-tree-id31413 . -190) (undo-tree-id31414 . -190) (undo-tree-id31415 . -190) (undo-tree-id31416 . -190) (undo-tree-id31417 . -190) (undo-tree-id31418 . -190) (undo-tree-id31419 . -190) (undo-tree-id31420 . -190) (undo-tree-id31421 . -190) (undo-tree-id31422 . -190) (undo-tree-id31423 . -190) (undo-tree-id31424 . -190) (undo-tree-id31425 . -190) (undo-tree-id31426 . -190) (undo-tree-id31427 . -190) (undo-tree-id31428 . -190) (undo-tree-id31429 . -190) (undo-tree-id31430 . -190) (undo-tree-id31431 . -193) (undo-tree-id31432 . -193) (undo-tree-id31433 . -193) (undo-tree-id31434 . -193) (undo-tree-id31435 . -193) (undo-tree-id31436 . -193) (undo-tree-id31437 . -193) (undo-tree-id31438 . -193) (undo-tree-id31439 . -193) (undo-tree-id31440 . -193) (undo-tree-id31441 . -193) (undo-tree-id31442 . -193) (undo-tree-id31443 . -193) (undo-tree-id31444 . -193) (undo-tree-id31445 . -193) (undo-tree-id31446 . -193) (undo-tree-id31447 . -193) (undo-tree-id31448 . -193) (undo-tree-id31449 . -193) (undo-tree-id31450 . -193) (undo-tree-id31451 . -193) (undo-tree-id31452 . -193) (undo-tree-id31453 . -197) (undo-tree-id31454 . -197) (undo-tree-id31455 . -197) (undo-tree-id31456 . -197) (undo-tree-id31457 . -197) (undo-tree-id31458 . -197) (undo-tree-id31459 . -197) (undo-tree-id31460 . -197) (undo-tree-id31461 . -197) (undo-tree-id31462 . -197) (undo-tree-id31463 . -197) (undo-tree-id31464 . -197) (undo-tree-id31465 . -197) (undo-tree-id31466 . -197) (undo-tree-id31467 . -197) (undo-tree-id31468 . -197) (undo-tree-id31469 . -197) (undo-tree-id31470 . -197) (undo-tree-id31471 . -197) (undo-tree-id31472 . -197) (undo-tree-id31473 . -197) (undo-tree-id31474 . -197) (undo-tree-id31475 . -208) (undo-tree-id31476 . -208) (undo-tree-id31477 . -208) (undo-tree-id31478 . -208) (undo-tree-id31479 . -208) (undo-tree-id31480 . -208) (undo-tree-id31481 . -208) (undo-tree-id31482 . -208) (undo-tree-id31483 . -208) (undo-tree-id31484 . -208) (undo-tree-id31485 . -208) (undo-tree-id31486 . -208) (undo-tree-id31487 . -208) (undo-tree-id31488 . -208) (undo-tree-id31489 . -208) (undo-tree-id31490 . -208) (undo-tree-id31491 . -208) (undo-tree-id31492 . -208) (undo-tree-id31493 . -208) (undo-tree-id31494 . -208) (undo-tree-id31495 . -208) (undo-tree-id31496 . -208) (undo-tree-id31497 . -213) (undo-tree-id31498 . -213) (undo-tree-id31499 . -213) (undo-tree-id31500 . -213) (undo-tree-id31501 . -213) (undo-tree-id31502 . -213) (undo-tree-id31503 . -213) (undo-tree-id31504 . -213) (undo-tree-id31505 . -213) (undo-tree-id31506 . -213) (undo-tree-id31507 . -213) (undo-tree-id31508 . -213) (undo-tree-id31509 . -213) (undo-tree-id31510 . -213) (undo-tree-id31511 . -213) (undo-tree-id31512 . -213) (undo-tree-id31513 . -213) (undo-tree-id31514 . -213) (undo-tree-id31515 . -213) (undo-tree-id31516 . -213) (undo-tree-id31517 . -213) (undo-tree-id31518 . -213) (undo-tree-id31519 . -214) (undo-tree-id31520 . -214) (undo-tree-id31521 . -214) (undo-tree-id31522 . -214) (undo-tree-id31523 . -214) (undo-tree-id31524 . -214) (undo-tree-id31525 . -214) (undo-tree-id31526 . -214) (undo-tree-id31527 . -214) (undo-tree-id31528 . -214) (undo-tree-id31529 . -214) (undo-tree-id31530 . -214) (undo-tree-id31531 . -214) (undo-tree-id31532 . -214) (undo-tree-id31533 . -214) (undo-tree-id31534 . -214) (undo-tree-id31535 . -214) (undo-tree-id31536 . -214) (undo-tree-id31537 . -214) (undo-tree-id31538 . -214) (undo-tree-id31539 . -214) (undo-tree-id31540 . -214) (undo-tree-id31541 . -214) (undo-tree-id31542 . -214) (undo-tree-id31543 . -214) (undo-tree-id31544 . -214) (undo-tree-id31545 . -214) (undo-tree-id31546 . -214) (undo-tree-id31547 . -214) (undo-tree-id31548 . -214) (undo-tree-id31549 . -214) (undo-tree-id31550 . -214) (undo-tree-id31551 . -214) (undo-tree-id31552 . -214) (undo-tree-id31553 . -214) (undo-tree-id31554 . -214) (undo-tree-id31555 . -214) (undo-tree-id31556 . -215) 3444) nil (25767 5967 564497 831000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3230) (undo-tree-id30708 . 1) (undo-tree-id30709 . 1) (undo-tree-id30710 . -1) (undo-tree-id30711 . -1)) nil (25767 5967 563628 294000) 0 nil])
([nil nil ((#("Since" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3230) (undo-tree-id30671 . -4) (undo-tree-id30672 . -4) (undo-tree-id30673 . 5) (undo-tree-id30674 . -4) (undo-tree-id30675 . -5) (undo-tree-id30676 . -4) (undo-tree-id30677 . -4) (undo-tree-id30678 . -4) (undo-tree-id30679 . -4) (undo-tree-id30680 . -4) (undo-tree-id30681 . -4) (undo-tree-id30682 . -4) (undo-tree-id30683 . -4) (undo-tree-id30684 . -4) (undo-tree-id30685 . -4) (undo-tree-id30686 . -4) (undo-tree-id30687 . -4) (undo-tree-id30688 . -4) (undo-tree-id30689 . -4) (undo-tree-id30690 . -4) (undo-tree-id30691 . -4) (undo-tree-id30692 . -4) (undo-tree-id30693 . -4) (undo-tree-id30694 . -4) (undo-tree-id30695 . -4) (undo-tree-id30696 . -4) (undo-tree-id30697 . -4) (undo-tree-id30698 . -4) (undo-tree-id30699 . -4) (undo-tree-id30700 . -4) (undo-tree-id30701 . -4) (undo-tree-id30702 . -4) (undo-tree-id30703 . -4) (undo-tree-id30704 . -4) (undo-tree-id30705 . -4) (undo-tree-id30706 . -4) (undo-tree-id30707 . -5) 3234) nil (25767 5967 563622 937000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3230) (undo-tree-id30667 . 1) (undo-tree-id30668 . 1) (undo-tree-id30669 . -1) (undo-tree-id30670 . -1)) nil (25767 5967 563593 44000) 0 nil])
([nil nil ((#("(see Chapter 4)" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3341) (undo-tree-id34204 . -14) (undo-tree-id34205 . -15) 3332 (t 25767 5967 604618 244000)) nil (25767 6015 584760 596000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3340) (undo-tree-id34178 . -1) (undo-tree-id34179 . -1) (undo-tree-id34180 . -1) (undo-tree-id34181 . -1) (undo-tree-id34182 . -1) (undo-tree-id34183 . -1) (undo-tree-id34184 . -1) (undo-tree-id34185 . -1) (undo-tree-id34186 . -1) (undo-tree-id34187 . -1) (undo-tree-id34188 . -1) (undo-tree-id34189 . -1) (undo-tree-id34190 . -1) (undo-tree-id34191 . -1) (undo-tree-id34192 . -1) (undo-tree-id34193 . -1) (undo-tree-id34194 . -1) (undo-tree-id34195 . -1) (undo-tree-id34196 . -1) (undo-tree-id34197 . -1) (undo-tree-id34198 . -1) (undo-tree-id34199 . -1) (undo-tree-id34200 . -1) (undo-tree-id34201 . -1) (undo-tree-id34202 . -1) (undo-tree-id34203 . -1)) nil (25767 6015 584757 421000) 0 nil])
([nil nil ((3228 . 3791) (#("- Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32).
- Gradient Descent works best when the instances in the training set are independent and identically distributed, we need to shuffle these windows." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 46 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 46 48 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 48 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 49 50 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 50 51 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 51 120 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 120 121 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 121 126 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 126 127 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 127 131 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 131 136 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 136 137 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 137 181 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 181 182 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 182 186 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 186 187 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 187 188 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 188 259 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 259 260 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 260 261 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 261 330 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 330 331 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 331 332 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 332 337 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 337 338 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 338 353 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 353 354 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 354 399 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 399 400 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 400 414 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 414 415 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 415 416 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 416 417 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 417 418 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 418 480 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 480 481 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 481 540 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 540 541 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 541 543 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 543 563 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 3228) (undo-tree-id32766 . -528) (undo-tree-id32767 . -528) (undo-tree-id32768 . -418) (undo-tree-id32769 . -418) (undo-tree-id32770 . 145) (undo-tree-id32771 . 145) (undo-tree-id32772 . -418) (undo-tree-id32773 . -418) (undo-tree-id32774 . -418) (undo-tree-id32775 . -418) (undo-tree-id32776 . -418) (undo-tree-id32777 . -418) (undo-tree-id32778 . -418) (undo-tree-id32779 . -418) (undo-tree-id32780 . -418) (undo-tree-id32781 . -418) (undo-tree-id32782 . -418) (undo-tree-id32783 . -418) (undo-tree-id32784 . -418) (undo-tree-id32785 . -418) (undo-tree-id32786 . -418) (undo-tree-id32787 . -418) (undo-tree-id32788 . -418) (undo-tree-id32789 . -418) (undo-tree-id32790 . -418) (undo-tree-id32791 . -418) (undo-tree-id32792 . -418) (undo-tree-id32793 . -418) (undo-tree-id32794 . -418) (undo-tree-id32795 . -418) (undo-tree-id32796 . -418) (undo-tree-id32797 . -418) (undo-tree-id32798 . -418) (undo-tree-id32799 . -418) (undo-tree-id32800 . -418) (undo-tree-id32801 . -418) (undo-tree-id32802 . -418) (undo-tree-id32803 . -418) (undo-tree-id32804 . -418) (undo-tree-id32805 . -418) (undo-tree-id32806 . -418) (undo-tree-id32807 . -418) (undo-tree-id32808 . -418) (undo-tree-id32809 . -418) (undo-tree-id32810 . -418) (undo-tree-id32811 . -418) (undo-tree-id32812 . -418) (undo-tree-id32813 . -418) (undo-tree-id32814 . -418) (undo-tree-id32815 . -418) (undo-tree-id32816 . -418) (undo-tree-id32817 . -418) (undo-tree-id32818 . -418) (undo-tree-id32819 . -418) (undo-tree-id32820 . -418) (undo-tree-id32821 . -418) (undo-tree-id32822 . -418) (undo-tree-id32823 . -418) (undo-tree-id32824 . -418) (undo-tree-id32825 . -418) (undo-tree-id32826 . -418) (undo-tree-id32827 . -418) (undo-tree-id32828 . -418) (undo-tree-id32829 . -418) (undo-tree-id32830 . -418) (undo-tree-id32831 . -418) (undo-tree-id32832 . -418) (undo-tree-id32833 . -418) (undo-tree-id32834 . -418) (undo-tree-id32835 . -418) (undo-tree-id32836 . -418) (undo-tree-id32837 . -418) (undo-tree-id32838 . -418) (undo-tree-id32839 . -418) (undo-tree-id32840 . -418) (undo-tree-id32841 . -418) (undo-tree-id32842 . -418) (undo-tree-id32843 . -418) (undo-tree-id32844 . -418) (undo-tree-id32845 . -418) (undo-tree-id32846 . -418) (undo-tree-id32847 . -418) (undo-tree-id32848 . -418) (undo-tree-id32849 . -418) (undo-tree-id32850 . -418) (undo-tree-id32851 . -418) (undo-tree-id32852 . -418) (undo-tree-id32853 . -418) (undo-tree-id32854 . -418) (undo-tree-id32855 . -418) (undo-tree-id32856 . -418) (undo-tree-id32857 . -418) (undo-tree-id32858 . -418) (undo-tree-id32859 . -418) (undo-tree-id32860 . -418) (undo-tree-id32861 . -418) (undo-tree-id32862 . -418) (undo-tree-id32863 . -418) (undo-tree-id32864 . -418) (undo-tree-id32865 . -418) (undo-tree-id32866 . -418) (undo-tree-id32867 . -418) (undo-tree-id32868 . -418) (undo-tree-id32869 . -418) (undo-tree-id32870 . -418) (undo-tree-id32871 . -418) (undo-tree-id32872 . -418) (undo-tree-id32873 . -418) (undo-tree-id32874 . -418) (undo-tree-id32875 . -418) (undo-tree-id32876 . -418) (undo-tree-id32877 . -418) (undo-tree-id32878 . -418) (undo-tree-id32879 . -418) (undo-tree-id32880 . -418) (undo-tree-id32881 . -418) (undo-tree-id32882 . -418) (undo-tree-id32883 . -418) (undo-tree-id32884 . -418) (undo-tree-id32885 . -418) (undo-tree-id32886 . -418) (undo-tree-id32887 . -418) (undo-tree-id32888 . -418) (undo-tree-id32889 . -418) (undo-tree-id32890 . -418) (undo-tree-id32891 . -418) (undo-tree-id32892 . -418) (undo-tree-id32893 . -418) (undo-tree-id32894 . -418) (undo-tree-id32895 . -418) (undo-tree-id32896 . -418) (undo-tree-id32897 . -418) (undo-tree-id32898 . -418) (undo-tree-id32899 . -418) (undo-tree-id32900 . -418) (undo-tree-id32901 . -418) (undo-tree-id32902 . -418) (undo-tree-id32903 . -418) (undo-tree-id32904 . -418) (undo-tree-id32905 . -418) (undo-tree-id32906 . -418) (undo-tree-id32907 . -418) (undo-tree-id32908 . -418) (undo-tree-id32909 . -418) (undo-tree-id32910 . -418) (undo-tree-id32911 . -418) (undo-tree-id32912 . -418) (undo-tree-id32913 . -418) (undo-tree-id32914 . -418) (undo-tree-id32915 . -418) (undo-tree-id32916 . -418) (undo-tree-id32917 . -418) (undo-tree-id32918 . -418) (undo-tree-id32919 . -418) (undo-tree-id32920 . -418) (undo-tree-id32921 . -418) (undo-tree-id32922 . -418) (undo-tree-id32923 . -418) (undo-tree-id32924 . -418) (undo-tree-id32925 . -418) (undo-tree-id32926 . -418) (undo-tree-id32927 . -418) (undo-tree-id32928 . -418) (undo-tree-id32929 . -418) (undo-tree-id32930 . -418) (undo-tree-id32931 . -418) (undo-tree-id32932 . -418) (undo-tree-id32933 . -418) (undo-tree-id32934 . -418) (undo-tree-id32935 . -418) (undo-tree-id32936 . -418) (undo-tree-id32937 . -418) (undo-tree-id32938 . -418) (undo-tree-id32939 . -418) (undo-tree-id32940 . -418) (undo-tree-id32941 . -418) (undo-tree-id32942 . -418) (undo-tree-id32943 . -418) (undo-tree-id32944 . -418) (undo-tree-id32945 . -418) (undo-tree-id32946 . -418) (undo-tree-id32947 . -418) (undo-tree-id32948 . -418) (undo-tree-id32949 . -418) (undo-tree-id32950 . -418) (undo-tree-id32951 . -418) (undo-tree-id32952 . -418) (undo-tree-id32953 . -418) (undo-tree-id32954 . -418) (undo-tree-id32955 . -418) (undo-tree-id32956 . -418) (undo-tree-id32957 . -418) (undo-tree-id32958 . -418) (undo-tree-id32959 . -418) (undo-tree-id32960 . -418) (undo-tree-id32961 . -418) (undo-tree-id32962 . -418) (undo-tree-id32963 . -418) (undo-tree-id32964 . -418) (undo-tree-id32965 . -418) (undo-tree-id32966 . -418) (undo-tree-id32967 . -418) (undo-tree-id32968 . -418) (undo-tree-id32969 . -418) (undo-tree-id32970 . -418) (undo-tree-id32971 . -418) (undo-tree-id32972 . -418) (undo-tree-id32973 . -418) (undo-tree-id32974 . -418) (undo-tree-id32975 . -418) (undo-tree-id32976 . -418) (undo-tree-id32977 . -418) (undo-tree-id32978 . -418) (undo-tree-id32979 . -418) (undo-tree-id32980 . -418) (undo-tree-id32981 . -418) (undo-tree-id32982 . -418) (undo-tree-id32983 . -418) (undo-tree-id32984 . -418) (undo-tree-id32985 . -418) (undo-tree-id32986 . -418) (undo-tree-id32987 . -418) (undo-tree-id32988 . -418) (undo-tree-id32989 . -418) (undo-tree-id32990 . -418) (undo-tree-id32991 . -418) (undo-tree-id32992 . -418) (undo-tree-id32993 . -418) (undo-tree-id32994 . -418) (undo-tree-id32995 . -418) (undo-tree-id32996 . -418) (undo-tree-id32997 . -418) (undo-tree-id32998 . -418) (undo-tree-id32999 . -418) (undo-tree-id33000 . -418) (undo-tree-id33001 . -418) (undo-tree-id33002 . -418) (undo-tree-id33003 . -418) (undo-tree-id33004 . -418) (undo-tree-id33005 . -418) (undo-tree-id33006 . -418) (undo-tree-id33007 . -418) (undo-tree-id33008 . -418) (undo-tree-id33009 . -418) (undo-tree-id33010 . -418) (undo-tree-id33011 . -418) (undo-tree-id33012 . -418) (undo-tree-id33013 . -418) (undo-tree-id33014 . -418) (undo-tree-id33015 . -418) (undo-tree-id33016 . -418) (undo-tree-id33017 . -418) (undo-tree-id33018 . -418) (undo-tree-id33019 . -418) (undo-tree-id33020 . -418) (undo-tree-id33021 . -418) (undo-tree-id33022 . -418) (undo-tree-id33023 . -418) (undo-tree-id33024 . -418) (undo-tree-id33025 . -418) (undo-tree-id33026 . -418) (undo-tree-id33027 . -418) (undo-tree-id33028 . -418) (undo-tree-id33029 . -418) (undo-tree-id33030 . -418) (undo-tree-id33031 . -418) (undo-tree-id33032 . -418) (undo-tree-id33033 . -418) (undo-tree-id33034 . -418) (undo-tree-id33035 . -418) (undo-tree-id33036 . -418) (undo-tree-id33037 . -418) (undo-tree-id33038 . -418) (undo-tree-id33039 . -418) (undo-tree-id33040 . -418) (undo-tree-id33041 . -418) (undo-tree-id33042 . -418) (undo-tree-id33043 . -418) (undo-tree-id33044 . -418) (undo-tree-id33045 . -418) (undo-tree-id33046 . -418) (undo-tree-id33047 . -418) (undo-tree-id33048 . -418) (undo-tree-id33049 . -418) (undo-tree-id33050 . -418) (undo-tree-id33051 . -418) (undo-tree-id33052 . -418) (undo-tree-id33053 . -418) (undo-tree-id33054 . -418) (undo-tree-id33055 . -418) (undo-tree-id33056 . -418) (undo-tree-id33057 . -418) (undo-tree-id33058 . -418) (undo-tree-id33059 . -418) (undo-tree-id33060 . -418) (undo-tree-id33061 . -418) (undo-tree-id33062 . -418) (undo-tree-id33063 . -418) (undo-tree-id33064 . -418) (undo-tree-id33065 . -418) (undo-tree-id33066 . -418) (undo-tree-id33067 . -418) (undo-tree-id33068 . -418) (undo-tree-id33069 . -418) (undo-tree-id33070 . -418) (undo-tree-id33071 . -418) (undo-tree-id33072 . -418) (undo-tree-id33073 . -418) (undo-tree-id33074 . -418) (undo-tree-id33075 . -418) (undo-tree-id33076 . -418) (undo-tree-id33077 . -418) (undo-tree-id33078 . -418) (undo-tree-id33079 . -418) (undo-tree-id33080 . -418) (undo-tree-id33081 . -418) (undo-tree-id33082 . -418) (undo-tree-id33083 . -418) (undo-tree-id33084 . -418) (undo-tree-id33085 . -418) (undo-tree-id33086 . -418) (undo-tree-id33087 . -418) (undo-tree-id33088 . -418) (undo-tree-id33089 . -418) (undo-tree-id33090 . -418) (undo-tree-id33091 . -418) (undo-tree-id33092 . -418) (undo-tree-id33093 . -418) (undo-tree-id33094 . -418) (undo-tree-id33095 . -418) (undo-tree-id33096 . -418) (undo-tree-id33097 . -418) (undo-tree-id33098 . -418) (undo-tree-id33099 . -418) (undo-tree-id33100 . -418) (undo-tree-id33101 . -418) (undo-tree-id33102 . -418) (undo-tree-id33103 . -418) (undo-tree-id33104 . -418) (undo-tree-id33105 . -418) (undo-tree-id33106 . -418) (undo-tree-id33107 . -418) (undo-tree-id33108 . -418) (undo-tree-id33109 . -418) (undo-tree-id33110 . -418) (undo-tree-id33111 . -418) (undo-tree-id33112 . -418) (undo-tree-id33113 . -418) (undo-tree-id33114 . -418) (undo-tree-id33115 . -418) (undo-tree-id33116 . -418) (undo-tree-id33117 . -418) (undo-tree-id33118 . -418) (undo-tree-id33119 . -418) (undo-tree-id33120 . -418) (undo-tree-id33121 . -418) (undo-tree-id33122 . -418) (undo-tree-id33123 . -418) (undo-tree-id33124 . -418) (undo-tree-id33125 . -418) (undo-tree-id33126 . -418) (undo-tree-id33127 . -418) (undo-tree-id33128 . -418) (undo-tree-id33129 . -418) (undo-tree-id33130 . -418) (undo-tree-id33131 . -418) (undo-tree-id33132 . -418) (undo-tree-id33133 . -418) (undo-tree-id33134 . -418) (undo-tree-id33135 . -418) (undo-tree-id33136 . -418) (undo-tree-id33137 . -418) (undo-tree-id33138 . -418) (undo-tree-id33139 . -418) (undo-tree-id33140 . -418) (undo-tree-id33141 . -418) (undo-tree-id33142 . -418) (undo-tree-id33143 . -418) (undo-tree-id33144 . -418) (undo-tree-id33145 . -418) (undo-tree-id33146 . -418) (undo-tree-id33147 . -418) (undo-tree-id33148 . -418) (undo-tree-id33149 . -418) (undo-tree-id33150 . -418) (undo-tree-id33151 . -418) (undo-tree-id33152 . -418) (undo-tree-id33153 . -418) (undo-tree-id33154 . -418) (undo-tree-id33155 . -418) (undo-tree-id33156 . -418) (undo-tree-id33157 . -418) (undo-tree-id33158 . -418) (undo-tree-id33159 . -418) (undo-tree-id33160 . -418) (undo-tree-id33161 . -418) (undo-tree-id33162 . -418) (undo-tree-id33163 . -418) (undo-tree-id33164 . -418) (undo-tree-id33165 . -418) (undo-tree-id33166 . -418) (undo-tree-id33167 . -418) (undo-tree-id33168 . -418) (undo-tree-id33169 . -418) (undo-tree-id33170 . -418) (undo-tree-id33171 . -418) (undo-tree-id33172 . -418) (undo-tree-id33173 . -418) (undo-tree-id33174 . -418) (undo-tree-id33175 . -418) (undo-tree-id33176 . -418) (undo-tree-id33177 . -418) (undo-tree-id33178 . -418) (undo-tree-id33179 . -418) (undo-tree-id33180 . -418) (undo-tree-id33181 . -418) (undo-tree-id33182 . -418) (undo-tree-id33183 . -418) (undo-tree-id33184 . -418) (undo-tree-id33185 . -418) (undo-tree-id33186 . -418) (undo-tree-id33187 . -418) (undo-tree-id33188 . -418) (undo-tree-id33189 . -418) (undo-tree-id33190 . -418) (undo-tree-id33191 . -418) (undo-tree-id33192 . -418) (undo-tree-id33193 . -418) (undo-tree-id33194 . -418) (undo-tree-id33195 . -418) (undo-tree-id33196 . -418) (undo-tree-id33197 . -418) (undo-tree-id33198 . -418) (undo-tree-id33199 . -418) (undo-tree-id33200 . -418) (undo-tree-id33201 . -418) (undo-tree-id33202 . -418) (undo-tree-id33203 . -418) (undo-tree-id33204 . -418) (undo-tree-id33205 . -418) (undo-tree-id33206 . -418) (undo-tree-id33207 . -418) (undo-tree-id33208 . -418) (undo-tree-id33209 . -418) (undo-tree-id33210 . -418) (undo-tree-id33211 . -418) (undo-tree-id33212 . -418) (undo-tree-id33213 . -418) (undo-tree-id33214 . -418) (undo-tree-id33215 . -418) (undo-tree-id33216 . -418) (undo-tree-id33217 . -418) (undo-tree-id33218 . -418) (undo-tree-id33219 . -418) (undo-tree-id33220 . -418) (undo-tree-id33221 . -418) (undo-tree-id33222 . -418) (undo-tree-id33223 . -418) (undo-tree-id33224 . -418) (undo-tree-id33225 . -418) (undo-tree-id33226 . -418) (undo-tree-id33227 . -418) (undo-tree-id33228 . -418) (undo-tree-id33229 . -418) (undo-tree-id33230 . -418) (undo-tree-id33231 . -418) (undo-tree-id33232 . -418) (undo-tree-id33233 . -418) (undo-tree-id33234 . -418) (undo-tree-id33235 . -418) (undo-tree-id33236 . -418) (undo-tree-id33237 . -418) (undo-tree-id33238 . -418) (undo-tree-id33239 . -418) (undo-tree-id33240 . -418) (undo-tree-id33241 . -418) (undo-tree-id33242 . -418) (undo-tree-id33243 . -418) (undo-tree-id33244 . -418) (undo-tree-id33245 . -418) (undo-tree-id33246 . -418) (undo-tree-id33247 . -418) (undo-tree-id33248 . -418) (undo-tree-id33249 . -418) (undo-tree-id33250 . -418) (undo-tree-id33251 . -418) (undo-tree-id33252 . -418) (undo-tree-id33253 . -418) (undo-tree-id33254 . -418) (undo-tree-id33255 . -418) (undo-tree-id33256 . -418) (undo-tree-id33257 . -418) (undo-tree-id33258 . -418) (undo-tree-id33259 . -418) (undo-tree-id33260 . -418) (undo-tree-id33261 . -418) (undo-tree-id33262 . -418) (undo-tree-id33263 . -418) (undo-tree-id33264 . -418) (undo-tree-id33265 . -418) (undo-tree-id33266 . -418) (undo-tree-id33267 . -418) (undo-tree-id33268 . -418) (undo-tree-id33269 . -418) (undo-tree-id33270 . -418) (undo-tree-id33271 . -418) (undo-tree-id33272 . -418) (undo-tree-id33273 . -418) (undo-tree-id33274 . -418) (undo-tree-id33275 . -418) (undo-tree-id33276 . -418) (undo-tree-id33277 . -418) (undo-tree-id33278 . -418) (undo-tree-id33279 . -418) (undo-tree-id33280 . -418) (undo-tree-id33281 . -418) (undo-tree-id33282 . -418) (undo-tree-id33283 . -418) (undo-tree-id33284 . -418) (undo-tree-id33285 . -418) (undo-tree-id33286 . -418) (undo-tree-id33287 . -418) (undo-tree-id33288 . -418) (undo-tree-id33289 . -418) (undo-tree-id33290 . -418) (undo-tree-id33291 . -418) (undo-tree-id33292 . -418) (undo-tree-id33293 . -418) (undo-tree-id33294 . -418) (undo-tree-id33295 . -418) (undo-tree-id33296 . -418) (undo-tree-id33297 . -418) (undo-tree-id33298 . -418) (undo-tree-id33299 . -418) (undo-tree-id33300 . -418) (undo-tree-id33301 . -418) (undo-tree-id33302 . -418) (undo-tree-id33303 . -418) (undo-tree-id33304 . -418) (undo-tree-id33305 . -418) (undo-tree-id33306 . -418) (undo-tree-id33307 . -418) (undo-tree-id33308 . -418) (undo-tree-id33309 . -418) (undo-tree-id33310 . -418) (undo-tree-id33311 . -418) (undo-tree-id33312 . -418) (undo-tree-id33313 . -418) (undo-tree-id33314 . -418) (undo-tree-id33315 . -418) (undo-tree-id33316 . -418) (undo-tree-id33317 . -418) (undo-tree-id33318 . -418) (undo-tree-id33319 . -418) (undo-tree-id33320 . -418) (undo-tree-id33321 . -418) (undo-tree-id33322 . -418) (undo-tree-id33323 . -418) (undo-tree-id33324 . -418) (undo-tree-id33325 . -418) (undo-tree-id33326 . -418) (undo-tree-id33327 . -418) (undo-tree-id33328 . -418) (undo-tree-id33329 . -418) (undo-tree-id33330 . -418) (undo-tree-id33331 . -418) (undo-tree-id33332 . -418) (undo-tree-id33333 . -418) (undo-tree-id33334 . -418) (undo-tree-id33335 . -418) (undo-tree-id33336 . -418) (undo-tree-id33337 . -418) (undo-tree-id33338 . -418) (undo-tree-id33339 . -418) (undo-tree-id33340 . -418) (undo-tree-id33341 . -418) (undo-tree-id33342 . -418) (undo-tree-id33343 . -418) (undo-tree-id33344 . -418) (undo-tree-id33345 . -418) (undo-tree-id33346 . -418) (undo-tree-id33347 . -418) (undo-tree-id33348 . -418) (undo-tree-id33349 . -418) (undo-tree-id33350 . -418) (undo-tree-id33351 . -418) (undo-tree-id33352 . -418) (undo-tree-id33353 . -418) (undo-tree-id33354 . -418) (undo-tree-id33355 . -418) (undo-tree-id33356 . -418) (undo-tree-id33357 . -418) (undo-tree-id33358 . -418) (undo-tree-id33359 . -418) (undo-tree-id33360 . -418) (undo-tree-id33361 . -418) (undo-tree-id33362 . -418) (undo-tree-id33363 . -418) (undo-tree-id33364 . -418) (undo-tree-id33365 . -418) (undo-tree-id33366 . -418) (undo-tree-id33367 . -418) (undo-tree-id33368 . -418) (undo-tree-id33369 . -418) (undo-tree-id33370 . -418) (undo-tree-id33371 . -418) (undo-tree-id33372 . -418) (undo-tree-id33373 . -418) (undo-tree-id33374 . -418) (undo-tree-id33375 . -418) (undo-tree-id33376 . -418) (undo-tree-id33377 . -418) (undo-tree-id33378 . -418) (undo-tree-id33379 . -418) (undo-tree-id33380 . -418) (undo-tree-id33381 . -418) (undo-tree-id33382 . -418) (undo-tree-id33383 . -418) (undo-tree-id33384 . -418) (undo-tree-id33385 . -418) (undo-tree-id33386 . -418) (undo-tree-id33387 . -418) (undo-tree-id33388 . -418) (undo-tree-id33389 . -418) (undo-tree-id33390 . -418) (undo-tree-id33391 . -418) (undo-tree-id33392 . -418) (undo-tree-id33393 . -418) (undo-tree-id33394 . -418) (undo-tree-id33395 . -418) (undo-tree-id33396 . -418) (undo-tree-id33397 . -418) (undo-tree-id33398 . -418) (undo-tree-id33399 . -418) (undo-tree-id33400 . -418) (undo-tree-id33401 . -418) (undo-tree-id33402 . -418) (undo-tree-id33403 . -418) (undo-tree-id33404 . -418) (undo-tree-id33405 . -418) (undo-tree-id33406 . -418) (undo-tree-id33407 . -418) (undo-tree-id33408 . -418) (undo-tree-id33409 . -418) (undo-tree-id33410 . -418) (undo-tree-id33411 . -418) (undo-tree-id33412 . -418) (undo-tree-id33413 . -418) (undo-tree-id33414 . -418) (undo-tree-id33415 . -418) (undo-tree-id33416 . -418) (undo-tree-id33417 . -418) (undo-tree-id33418 . -418) (undo-tree-id33419 . -418) (undo-tree-id33420 . -418) (undo-tree-id33421 . -418) (undo-tree-id33422 . -418) (undo-tree-id33423 . -418) (undo-tree-id33424 . -418) (undo-tree-id33425 . -418) (undo-tree-id33426 . -418) (undo-tree-id33427 . -418) (undo-tree-id33428 . -418) (undo-tree-id33429 . -418) (undo-tree-id33430 . -418) (undo-tree-id33431 . -418) (undo-tree-id33432 . -418) (undo-tree-id33433 . -418) (undo-tree-id33434 . -418) (undo-tree-id33435 . -418) (undo-tree-id33436 . -418) (undo-tree-id33437 . -418) (undo-tree-id33438 . -418) (undo-tree-id33439 . -418) (undo-tree-id33440 . -418) (undo-tree-id33441 . -418) (undo-tree-id33442 . -418) (undo-tree-id33443 . -418) (undo-tree-id33444 . -418) (undo-tree-id33445 . -418) (undo-tree-id33446 . -418) (undo-tree-id33447 . -418) (undo-tree-id33448 . -418) (undo-tree-id33449 . -418) (undo-tree-id33450 . -418) (undo-tree-id33451 . -418) (undo-tree-id33452 . -418) (undo-tree-id33453 . -418) (undo-tree-id33454 . -418) (undo-tree-id33455 . -418) (undo-tree-id33456 . -418) (undo-tree-id33457 . -418) (undo-tree-id33458 . -418) (undo-tree-id33459 . -418) (undo-tree-id33460 . -418) (undo-tree-id33461 . -418) (undo-tree-id33462 . -418) (undo-tree-id33463 . -418) (undo-tree-id33464 . -418) (undo-tree-id33465 . -418) (undo-tree-id33466 . -418) (undo-tree-id33467 . -418) (undo-tree-id33468 . -418) (undo-tree-id33469 . -418) (undo-tree-id33470 . -418) (undo-tree-id33471 . -418) (undo-tree-id33472 . -418) (undo-tree-id33473 . -418) (undo-tree-id33474 . -418) (undo-tree-id33475 . -418) (undo-tree-id33476 . -418) (undo-tree-id33477 . -418) (undo-tree-id33478 . -418) (undo-tree-id33479 . -418) (undo-tree-id33480 . -418) (undo-tree-id33481 . -418) (undo-tree-id33482 . -418) (undo-tree-id33483 . -418) (undo-tree-id33484 . -418) (undo-tree-id33485 . -418) (undo-tree-id33486 . -418) (undo-tree-id33487 . -418) (undo-tree-id33488 . -418) (undo-tree-id33489 . -418) (undo-tree-id33490 . -418) (undo-tree-id33491 . -418) (undo-tree-id33492 . -418) (undo-tree-id33493 . -418) (undo-tree-id33494 . -418) (undo-tree-id33495 . -418) (undo-tree-id33496 . -418) (undo-tree-id33497 . -418) (undo-tree-id33498 . -418) (undo-tree-id33499 . -418) (undo-tree-id33500 . -418) (undo-tree-id33501 . -418) (undo-tree-id33502 . -418) (undo-tree-id33503 . -418) (undo-tree-id33504 . -418) (undo-tree-id33505 . -418) (undo-tree-id33506 . -418) (undo-tree-id33507 . -418) (undo-tree-id33508 . -418) (undo-tree-id33509 . -418) (undo-tree-id33510 . -418) (undo-tree-id33511 . -418) (undo-tree-id33512 . -418) (undo-tree-id33513 . -418) (undo-tree-id33514 . -418) (undo-tree-id33515 . -418) (undo-tree-id33516 . -418) (undo-tree-id33517 . -418) (undo-tree-id33518 . -418) (undo-tree-id33519 . -418) (undo-tree-id33520 . -418) (undo-tree-id33521 . -418) (undo-tree-id33522 . -418) (undo-tree-id33523 . -418) (undo-tree-id33524 . -418) (undo-tree-id33525 . -418) (undo-tree-id33526 . -418) (undo-tree-id33527 . -418) (undo-tree-id33528 . -418) (undo-tree-id33529 . -418) (undo-tree-id33530 . -418) (undo-tree-id33531 . -418) (undo-tree-id33532 . -418) (undo-tree-id33533 . -418) (undo-tree-id33534 . -418) (undo-tree-id33535 . -418) (undo-tree-id33536 . -418) (undo-tree-id33537 . -418) (undo-tree-id33538 . -418) (undo-tree-id33539 . -418) (undo-tree-id33540 . -418) (undo-tree-id33541 . -418) (undo-tree-id33542 . -418) (undo-tree-id33543 . -418) (undo-tree-id33544 . -418) (undo-tree-id33545 . -418) (undo-tree-id33546 . -418) (undo-tree-id33547 . -418) (undo-tree-id33548 . -418) (undo-tree-id33549 . -418) (undo-tree-id33550 . -418) (undo-tree-id33551 . -418) (undo-tree-id33552 . -418) (undo-tree-id33553 . -418) (undo-tree-id33554 . -418) (undo-tree-id33555 . -418) (undo-tree-id33556 . -418) (undo-tree-id33557 . -418) (undo-tree-id33558 . -418) (undo-tree-id33559 . -418) (undo-tree-id33560 . -418) (undo-tree-id33561 . -418) (undo-tree-id33562 . -418) (undo-tree-id33563 . -418) (undo-tree-id33564 . -418) (undo-tree-id33565 . -418) (undo-tree-id33566 . -418) (undo-tree-id33567 . -418) (undo-tree-id33568 . -418) (undo-tree-id33569 . -418) (undo-tree-id33570 . -418) (undo-tree-id33571 . -418) (undo-tree-id33572 . -418) (undo-tree-id33573 . -418) (undo-tree-id33574 . -418) (undo-tree-id33575 . -418) (undo-tree-id33576 . -418) (undo-tree-id33577 . -418) (undo-tree-id33578 . -418) (undo-tree-id33579 . -418) (undo-tree-id33580 . -418) (undo-tree-id33581 . -418) (undo-tree-id33582 . -418) (undo-tree-id33583 . -418) (undo-tree-id33584 . -418) (undo-tree-id33585 . -418) (undo-tree-id33586 . -418) (undo-tree-id33587 . -418) (undo-tree-id33588 . -418) (undo-tree-id33589 . -418) (undo-tree-id33590 . -418) (undo-tree-id33591 . -418) (undo-tree-id33592 . -418) (undo-tree-id33593 . -418) (undo-tree-id33594 . -418) (undo-tree-id33595 . -418) (undo-tree-id33596 . -418) (undo-tree-id33597 . -418) (undo-tree-id33598 . -418) (undo-tree-id33599 . -418) (undo-tree-id33600 . -418) (undo-tree-id33601 . -418) (undo-tree-id33602 . -418) (undo-tree-id33603 . -418) (undo-tree-id33604 . -418) (undo-tree-id33605 . -418) (undo-tree-id33606 . -418) (undo-tree-id33607 . -418) (undo-tree-id33608 . -418) (undo-tree-id33609 . -418) (undo-tree-id33610 . -418) (undo-tree-id33611 . -418) (undo-tree-id33612 . -418) (undo-tree-id33613 . -418) (undo-tree-id33614 . -418) (undo-tree-id33615 . -418) (undo-tree-id33616 . -418) (undo-tree-id33617 . -418) (undo-tree-id33618 . -418) (undo-tree-id33619 . -418) (undo-tree-id33620 . -418) (undo-tree-id33621 . -418) (undo-tree-id33622 . -418) (undo-tree-id33623 . -418) (undo-tree-id33624 . -418) (undo-tree-id33625 . -418) (undo-tree-id33626 . -418) (undo-tree-id33627 . -418) (undo-tree-id33628 . -418) (undo-tree-id33629 . -418) (undo-tree-id33630 . -418) (undo-tree-id33631 . -418) (undo-tree-id33632 . -418) (undo-tree-id33633 . -418) (undo-tree-id33634 . -418) (undo-tree-id33635 . -418) (undo-tree-id33636 . -418) (undo-tree-id33637 . -418) (undo-tree-id33638 . -418) (undo-tree-id33639 . -418) (undo-tree-id33640 . -418) (undo-tree-id33641 . -418) (undo-tree-id33642 . -418) (undo-tree-id33643 . -418) (undo-tree-id33644 . -418) (undo-tree-id33645 . -418) (undo-tree-id33646 . -418) (undo-tree-id33647 . -418) (undo-tree-id33648 . -418) (undo-tree-id33649 . -418) (undo-tree-id33650 . -418) (undo-tree-id33651 . -418) (undo-tree-id33652 . -418) (undo-tree-id33653 . -418) (undo-tree-id33654 . -418) (undo-tree-id33655 . -418) (undo-tree-id33656 . -418) (undo-tree-id33657 . -418) (undo-tree-id33658 . -418) (undo-tree-id33659 . -418) (undo-tree-id33660 . -418) (undo-tree-id33661 . -418) (undo-tree-id33662 . -418) (undo-tree-id33663 . -418) (undo-tree-id33664 . -418) (undo-tree-id33665 . -418) (undo-tree-id33666 . -418) (undo-tree-id33667 . -418) (undo-tree-id33668 . -425) (undo-tree-id33669 . -425) (undo-tree-id33670 . -425) (undo-tree-id33671 . -425) (undo-tree-id33672 . -425) (undo-tree-id33673 . -425) (undo-tree-id33674 . -425) (undo-tree-id33675 . -425) (undo-tree-id33676 . -425) (undo-tree-id33677 . -425) (undo-tree-id33678 . -425) (undo-tree-id33679 . -425) (undo-tree-id33680 . -425) (undo-tree-id33681 . -425) (undo-tree-id33682 . -425) (undo-tree-id33683 . -433) (undo-tree-id33684 . -433) (undo-tree-id33685 . -433) (undo-tree-id33686 . -433) (undo-tree-id33687 . -433) (undo-tree-id33688 . -433) (undo-tree-id33689 . -433) (undo-tree-id33690 . -433) (undo-tree-id33691 . -433) (undo-tree-id33692 . -433) (undo-tree-id33693 . -433) (undo-tree-id33694 . -433) (undo-tree-id33695 . -433) (undo-tree-id33696 . -433) (undo-tree-id33697 . -433) (undo-tree-id33698 . -439) (undo-tree-id33699 . -439) (undo-tree-id33700 . -439) (undo-tree-id33701 . -439) (undo-tree-id33702 . -439) (undo-tree-id33703 . -439) (undo-tree-id33704 . -439) (undo-tree-id33705 . -439) (undo-tree-id33706 . -439) (undo-tree-id33707 . -439) (undo-tree-id33708 . -439) (undo-tree-id33709 . -439) (undo-tree-id33710 . -439) (undo-tree-id33711 . -439) (undo-tree-id33712 . -439) (undo-tree-id33713 . -444) (undo-tree-id33714 . -444) (undo-tree-id33715 . -444) (undo-tree-id33716 . -444) (undo-tree-id33717 . -444) (undo-tree-id33718 . -444) (undo-tree-id33719 . -444) (undo-tree-id33720 . -444) (undo-tree-id33721 . -444) (undo-tree-id33722 . -444) (undo-tree-id33723 . -444) (undo-tree-id33724 . -444) (undo-tree-id33725 . -444) (undo-tree-id33726 . -444) (undo-tree-id33727 . -444) (undo-tree-id33728 . -444) (undo-tree-id33729 . -444) (undo-tree-id33730 . -444) (undo-tree-id33731 . -444) (undo-tree-id33732 . -444) (undo-tree-id33733 . -444) (undo-tree-id33734 . -444) (undo-tree-id33735 . -444) (undo-tree-id33736 . -444) (undo-tree-id33737 . -444) (undo-tree-id33738 . -444) (undo-tree-id33739 . -444) (undo-tree-id33740 . -444) (undo-tree-id33741 . -444) (undo-tree-id33742 . -444) (undo-tree-id33743 . -444) (undo-tree-id33744 . -444) (undo-tree-id33745 . -444) (undo-tree-id33746 . -444) (undo-tree-id33747 . -444) (undo-tree-id33748 . -444) (undo-tree-id33749 . -444) (undo-tree-id33750 . -444) (undo-tree-id33751 . -444) (undo-tree-id33752 . -444) (undo-tree-id33753 . -444) (undo-tree-id33754 . -444) (undo-tree-id33755 . -444) (undo-tree-id33756 . -444) (undo-tree-id33757 . -444) (undo-tree-id33758 . -444) (undo-tree-id33759 . -444) (undo-tree-id33760 . -444) (undo-tree-id33761 . -444) (undo-tree-id33762 . -444) (undo-tree-id33763 . -444) (undo-tree-id33764 . -444) (undo-tree-id33765 . -444) (undo-tree-id33766 . -444) (undo-tree-id33767 . -444) (undo-tree-id33768 . -444) (undo-tree-id33769 . -444) (undo-tree-id33770 . -444) (undo-tree-id33771 . -444) (undo-tree-id33772 . -444) (undo-tree-id33773 . -444) (undo-tree-id33774 . -444) (undo-tree-id33775 . -444) (undo-tree-id33776 . -444) (undo-tree-id33777 . -444) (undo-tree-id33778 . -444) (undo-tree-id33779 . -444) (undo-tree-id33780 . -444) (undo-tree-id33781 . -444) (undo-tree-id33782 . -444) (undo-tree-id33783 . -444) (undo-tree-id33784 . -444) (undo-tree-id33785 . -444) (undo-tree-id33786 . -444) (undo-tree-id33787 . -444) (undo-tree-id33788 . -444) (undo-tree-id33789 . -444) (undo-tree-id33790 . -444) (undo-tree-id33791 . -444) (undo-tree-id33792 . -444) (undo-tree-id33793 . -444) (undo-tree-id33794 . -444) (undo-tree-id33795 . -444) (undo-tree-id33796 . -444) (undo-tree-id33797 . -444) (undo-tree-id33798 . -444) (undo-tree-id33799 . -444) (undo-tree-id33800 . -444) (undo-tree-id33801 . -444) (undo-tree-id33802 . -444) (undo-tree-id33803 . -444) (undo-tree-id33804 . -444) (undo-tree-id33805 . -444) (undo-tree-id33806 . -563) (undo-tree-id33807 . -444) (undo-tree-id33808 . -444) (undo-tree-id33809 . -444) (undo-tree-id33810 . -444) (undo-tree-id33811 . -444) (undo-tree-id33812 . -444) (undo-tree-id33813 . -444) (undo-tree-id33814 . -444) (undo-tree-id33815 . -444) (undo-tree-id33816 . -444) (undo-tree-id33817 . -444) (undo-tree-id33818 . -444) (undo-tree-id33819 . -444) (undo-tree-id33820 . -444) (undo-tree-id33821 . -444) (undo-tree-id33822 . -444) (undo-tree-id33823 . -444) (undo-tree-id33824 . -444) (undo-tree-id33825 . -444) (undo-tree-id33826 . -444) (undo-tree-id33827 . -444) (undo-tree-id33828 . -444) (undo-tree-id33829 . -444) (undo-tree-id33830 . -444) (undo-tree-id33831 . -444) (undo-tree-id33832 . -444) (undo-tree-id33833 . -444) (undo-tree-id33834 . -444) (undo-tree-id33835 . -444) (undo-tree-id33836 . -444) (undo-tree-id33837 . -444) (undo-tree-id33838 . -444) (undo-tree-id33839 . -444) (undo-tree-id33840 . -444) (undo-tree-id33841 . -449) (undo-tree-id33842 . -449) (undo-tree-id33843 . -449) (undo-tree-id33844 . -449) (undo-tree-id33845 . -449) (undo-tree-id33846 . -449) (undo-tree-id33847 . -449) (undo-tree-id33848 . -449) (undo-tree-id33849 . -449) (undo-tree-id33850 . -449) (undo-tree-id33851 . -449) (undo-tree-id33852 . -449) (undo-tree-id33853 . -449) (undo-tree-id33854 . -449) (undo-tree-id33855 . -449) (undo-tree-id33856 . -449) (undo-tree-id33857 . -449) (undo-tree-id33858 . -449) (undo-tree-id33859 . -449) (undo-tree-id33860 . -449) (undo-tree-id33861 . -449) (undo-tree-id33862 . -449) (undo-tree-id33863 . -449) (undo-tree-id33864 . -449) (undo-tree-id33865 . -449) (undo-tree-id33866 . -449) (undo-tree-id33867 . -449) (undo-tree-id33868 . -449) (undo-tree-id33869 . -449) (undo-tree-id33870 . -449) (undo-tree-id33871 . -449) (undo-tree-id33872 . -449) (undo-tree-id33873 . -449) (undo-tree-id33874 . -449) (undo-tree-id33875 . -449) (undo-tree-id33876 . -449) (undo-tree-id33877 . -520) (undo-tree-id33878 . -520) (undo-tree-id33879 . -520) (undo-tree-id33880 . -520) (undo-tree-id33881 . -520) (undo-tree-id33882 . -520) (undo-tree-id33883 . -520) (undo-tree-id33884 . -520) (undo-tree-id33885 . -520) (undo-tree-id33886 . -520) (undo-tree-id33887 . -520) (undo-tree-id33888 . -520) (undo-tree-id33889 . -520) (undo-tree-id33890 . -520) (undo-tree-id33891 . -520) (undo-tree-id33892 . -520) (undo-tree-id33893 . -520) (undo-tree-id33894 . -520) (undo-tree-id33895 . -520) (undo-tree-id33896 . -520) (undo-tree-id33897 . -520) (undo-tree-id33898 . -520) (undo-tree-id33899 . -520) (undo-tree-id33900 . -520) (undo-tree-id33901 . -520) (undo-tree-id33902 . -520) (undo-tree-id33903 . -520) (undo-tree-id33904 . -520) (undo-tree-id33905 . -520) (undo-tree-id33906 . -520) (undo-tree-id33907 . -520) (undo-tree-id33908 . -520) (undo-tree-id33909 . -520) (undo-tree-id33910 . -520) (undo-tree-id33911 . -520) (undo-tree-id33912 . -520) (undo-tree-id33913 . -520) (undo-tree-id33914 . -520) (undo-tree-id33915 . -520) (undo-tree-id33916 . -520) (undo-tree-id33917 . -520) (undo-tree-id33918 . -520) (undo-tree-id33919 . -520) (undo-tree-id33920 . -520) (undo-tree-id33921 . -520) (undo-tree-id33922 . -520) (undo-tree-id33923 . -520) (undo-tree-id33924 . -520) (undo-tree-id33925 . -520) (undo-tree-id33926 . -520) (undo-tree-id33927 . -520) (undo-tree-id33928 . -520) (undo-tree-id33929 . -528) (undo-tree-id33930 . -528) (undo-tree-id33931 . -528) (undo-tree-id33932 . -528) (undo-tree-id33933 . -528) (undo-tree-id33934 . -528) (undo-tree-id33935 . -528) (undo-tree-id33936 . -528) (undo-tree-id33937 . -528) (undo-tree-id33938 . -528) (undo-tree-id33939 . -528) (undo-tree-id33940 . -528) (undo-tree-id33941 . -528) (undo-tree-id33942 . -528) (undo-tree-id33943 . -528) (undo-tree-id33944 . -528) (undo-tree-id33945 . -528) (undo-tree-id33946 . -528) (undo-tree-id33947 . -528) (undo-tree-id33948 . -528) (undo-tree-id33949 . -528) (undo-tree-id33950 . -528) (undo-tree-id33951 . -528) (undo-tree-id33952 . -528) (undo-tree-id33953 . -528) (undo-tree-id33954 . -528) (undo-tree-id33955 . -528) (undo-tree-id33956 . -528) (undo-tree-id33957 . -528) (undo-tree-id33958 . -528) (undo-tree-id33959 . -528) (undo-tree-id33960 . -528) (undo-tree-id33961 . -528) (undo-tree-id33962 . -528) (undo-tree-id33963 . -528) (undo-tree-id33964 . -528) (undo-tree-id33965 . -528) (undo-tree-id33966 . -528) (undo-tree-id33967 . -528) (undo-tree-id33968 . -528) (undo-tree-id33969 . -528) (undo-tree-id33970 . -528) (undo-tree-id33971 . -528) (undo-tree-id33972 . -528) (undo-tree-id33973 . -528) (undo-tree-id33974 . -528) (undo-tree-id33975 . -528) (undo-tree-id33976 . -528) (undo-tree-id33977 . -528) (undo-tree-id33978 . -528) (undo-tree-id33979 . -528) (undo-tree-id33980 . -528) (undo-tree-id33981 . -528) (undo-tree-id33982 . -528) (undo-tree-id33983 . -528) (undo-tree-id33984 . -528) (undo-tree-id33985 . -528) (undo-tree-id33986 . -528) (undo-tree-id33987 . -528) (undo-tree-id33988 . -528) (undo-tree-id33989 . -528) (undo-tree-id33990 . -528) (undo-tree-id33991 . -530) (undo-tree-id33992 . -530) (undo-tree-id33993 . -530) (undo-tree-id33994 . -530) (undo-tree-id33995 . -530) (undo-tree-id33996 . -530) (undo-tree-id33997 . -530) (undo-tree-id33998 . -530) (undo-tree-id33999 . -530) (undo-tree-id34000 . -530) (undo-tree-id34001 . -530) (undo-tree-id34002 . -530) (undo-tree-id34003 . -530) (undo-tree-id34004 . -530) (undo-tree-id34005 . -530) (undo-tree-id34006 . -530) (undo-tree-id34007 . -530) (undo-tree-id34008 . -530) (undo-tree-id34009 . -530) (undo-tree-id34010 . -530) (undo-tree-id34011 . -530) (undo-tree-id34012 . -530) (undo-tree-id34013 . -530) (undo-tree-id34014 . -530) (undo-tree-id34015 . -530) (undo-tree-id34016 . -530) (undo-tree-id34017 . -530) (undo-tree-id34018 . -530) (undo-tree-id34019 . -530) (undo-tree-id34020 . -533) (undo-tree-id34021 . -533) (undo-tree-id34022 . -533) (undo-tree-id34023 . -533) (undo-tree-id34024 . -533) (undo-tree-id34025 . -533) (undo-tree-id34026 . -533) (undo-tree-id34027 . -533) (undo-tree-id34028 . -533) (undo-tree-id34029 . -533) (undo-tree-id34030 . -533) (undo-tree-id34031 . -533) (undo-tree-id34032 . -533) (undo-tree-id34033 . -533) (undo-tree-id34034 . -533) (undo-tree-id34035 . -538) (undo-tree-id34036 . -538) (undo-tree-id34037 . -538) (undo-tree-id34038 . -538) (undo-tree-id34039 . -538) (undo-tree-id34040 . -538) (undo-tree-id34041 . -538) (undo-tree-id34042 . -538) (undo-tree-id34043 . -538) (undo-tree-id34044 . -538) (undo-tree-id34045 . -538) (undo-tree-id34046 . -538) (undo-tree-id34047 . -538) (undo-tree-id34048 . -538) (undo-tree-id34049 . -538) (undo-tree-id34050 . -541) (undo-tree-id34051 . -541) (undo-tree-id34052 . -541) (undo-tree-id34053 . -541) (undo-tree-id34054 . -541) (undo-tree-id34055 . -541) (undo-tree-id34056 . -541) (undo-tree-id34057 . -541) (undo-tree-id34058 . -541) (undo-tree-id34059 . -541) (undo-tree-id34060 . -541) (undo-tree-id34061 . -541) (undo-tree-id34062 . -541) (undo-tree-id34063 . -541) (undo-tree-id34064 . -541) (undo-tree-id34065 . -549) (undo-tree-id34066 . -549) (undo-tree-id34067 . -549) (undo-tree-id34068 . -549) (undo-tree-id34069 . -549) (undo-tree-id34070 . -549) (undo-tree-id34071 . -549) (undo-tree-id34072 . -549) (undo-tree-id34073 . -549) (undo-tree-id34074 . -549) (undo-tree-id34075 . -549) (undo-tree-id34076 . -549) (undo-tree-id34077 . -549) (undo-tree-id34078 . -549) (undo-tree-id34079 . -549) (undo-tree-id34080 . -555) (undo-tree-id34081 . -555) (undo-tree-id34082 . -555) (undo-tree-id34083 . -555) (undo-tree-id34084 . -555) (undo-tree-id34085 . -555) (undo-tree-id34086 . -555) (undo-tree-id34087 . -555) (undo-tree-id34088 . -555) (undo-tree-id34089 . -555) (undo-tree-id34090 . -555) (undo-tree-id34091 . -555) (undo-tree-id34092 . -555) (undo-tree-id34093 . -555) (undo-tree-id34094 . -555) (undo-tree-id34095 . -562) (undo-tree-id34096 . -562) (undo-tree-id34097 . -562) (undo-tree-id34098 . -562) (undo-tree-id34099 . -562) (undo-tree-id34100 . -562) (undo-tree-id34101 . -562) (undo-tree-id34102 . -562) (undo-tree-id34103 . -562) (undo-tree-id34104 . -562) (undo-tree-id34105 . -562) (undo-tree-id34106 . -562) (undo-tree-id34107 . -562) (undo-tree-id34108 . -562) (undo-tree-id34109 . -562) (undo-tree-id34110 . -563) (undo-tree-id34111 . -563) (undo-tree-id34112 . -563) (undo-tree-id34113 . -563) (undo-tree-id34114 . -563) (undo-tree-id34115 . -563) (undo-tree-id34116 . -563) (undo-tree-id34117 . -563) (undo-tree-id34118 . -563) (undo-tree-id34119 . -563) (undo-tree-id34120 . -563) (undo-tree-id34121 . -563) (undo-tree-id34122 . -563) (undo-tree-id34123 . -563) (undo-tree-id34124 . -563) (undo-tree-id34125 . -563) (undo-tree-id34126 . -563) (undo-tree-id34127 . -563) (undo-tree-id34128 . -563) (undo-tree-id34129 . -563) (undo-tree-id34130 . -563) (undo-tree-id34131 . -563) (undo-tree-id34132 . -563) (undo-tree-id34133 . -563) (undo-tree-id34134 . -563) (undo-tree-id34135 . -563) (undo-tree-id34136 . -563) (undo-tree-id34137 . -563) (undo-tree-id34138 . -563) (undo-tree-id34139 . -563) (undo-tree-id34140 . -563) (undo-tree-id34141 . -563) (undo-tree-id34142 . -563) (undo-tree-id34143 . -416) (3228 . 3644) (#(" Then we can batch the windows and separate the inputs (the first 100 characters) from the target (the last character): batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:])) Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32)." 0 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 45 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 47 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 49 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 50 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 119 120 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 120 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 125 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 126 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 130 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 135 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 136 180 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 180 181 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 181 185 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 185 186 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 186 187 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 187 258 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 258 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 259 260 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 260 329 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 329 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 330 331 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 331 336 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 336 337 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 337 352 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 352 353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 353 398 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 398 399 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 399 413 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 413 414 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 3375) (undo-tree-id34144 . -1) (undo-tree-id34145 . -1) (undo-tree-id34146 . -1) (undo-tree-id34147 . -1) (undo-tree-id34148 . -1) (undo-tree-id34149 . -1) (undo-tree-id34150 . -1) (undo-tree-id34151 . -1) (undo-tree-id34152 . -1) (undo-tree-id34153 . -1) (undo-tree-id34154 . -1) (undo-tree-id34155 . -1) (undo-tree-id34156 . -1) (undo-tree-id34157 . -1) (undo-tree-id34158 . -1) (undo-tree-id34159 . -1) (undo-tree-id34160 . -1) (undo-tree-id34161 . -1) (undo-tree-id34162 . -1) (undo-tree-id34163 . -1) (undo-tree-id34164 . -1) (undo-tree-id34165 . -1) (undo-tree-id34166 . -1) (undo-tree-id34167 . -1) (undo-tree-id34168 . -1) (undo-tree-id34169 . -1) (undo-tree-id34170 . -1) (undo-tree-id34171 . -1) (undo-tree-id34172 . -1) (undo-tree-id34173 . -1) (undo-tree-id34174 . -1) (undo-tree-id34175 . -1) (undo-tree-id34176 . -1) (undo-tree-id34177 . -1) 3376) nil (25767 6015 584700 365000) 0 nil])
([nil nil ((#("we need to shuffle these windows" 0 10 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 10 11 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 11 13 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 32 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3342) (undo-tree-id32620 . -31) (undo-tree-id32621 . -31) (undo-tree-id32622 . -31) (undo-tree-id32623 . -32) (undo-tree-id32624 . -31) (undo-tree-id32625 . -1) (undo-tree-id32626 . -1) (undo-tree-id32627 . -1) (undo-tree-id32628 . -1) (undo-tree-id32629 . -1) (undo-tree-id32630 . -1) (undo-tree-id32631 . -1) (undo-tree-id32632 . -1) (undo-tree-id32633 . -1) (undo-tree-id32634 . -1) (undo-tree-id32635 . -1) (undo-tree-id32636 . -1) (undo-tree-id32637 . -1) (undo-tree-id32638 . -1) (undo-tree-id32639 . -1) (undo-tree-id32640 . -1) (undo-tree-id32641 . -1) (undo-tree-id32642 . -1) (undo-tree-id32643 . -1) (undo-tree-id32644 . -1) (undo-tree-id32645 . -1) (undo-tree-id32646 . -1) (undo-tree-id32647 . -6) (undo-tree-id32648 . -6) (undo-tree-id32649 . -6) (undo-tree-id32650 . -6) (undo-tree-id32651 . -6) (undo-tree-id32652 . -6) (undo-tree-id32653 . -6) (undo-tree-id32654 . -6) (undo-tree-id32655 . -6) (undo-tree-id32656 . -6) (undo-tree-id32657 . -6) (undo-tree-id32658 . -6) (undo-tree-id32659 . -6) (undo-tree-id32660 . -6) (undo-tree-id32661 . -6) (undo-tree-id32662 . -6) (undo-tree-id32663 . -6) (undo-tree-id32664 . -6) (undo-tree-id32665 . -6) (undo-tree-id32666 . -6) (undo-tree-id32667 . -6) (undo-tree-id32668 . -6) (undo-tree-id32669 . -9) (undo-tree-id32670 . -9) (undo-tree-id32671 . -9) (undo-tree-id32672 . -9) (undo-tree-id32673 . -9) (undo-tree-id32674 . -9) (undo-tree-id32675 . -9) (undo-tree-id32676 . -9) (undo-tree-id32677 . -9) (undo-tree-id32678 . -9) (undo-tree-id32679 . -9) (undo-tree-id32680 . -9) (undo-tree-id32681 . -9) (undo-tree-id32682 . -9) (undo-tree-id32683 . -9) (undo-tree-id32684 . -9) (undo-tree-id32685 . -9) (undo-tree-id32686 . -9) (undo-tree-id32687 . -9) (undo-tree-id32688 . -9) (undo-tree-id32689 . -9) (undo-tree-id32690 . -9) (undo-tree-id32691 . -9) (undo-tree-id32692 . -9) (undo-tree-id32693 . -9) (undo-tree-id32694 . -9) (undo-tree-id32695 . -9) (undo-tree-id32696 . -9) (undo-tree-id32697 . -9) (undo-tree-id32698 . -17) (undo-tree-id32699 . -17) (undo-tree-id32700 . -17) (undo-tree-id32701 . -17) (undo-tree-id32702 . -17) (undo-tree-id32703 . -17) (undo-tree-id32704 . -17) (undo-tree-id32705 . -17) (undo-tree-id32706 . -17) (undo-tree-id32707 . -17) (undo-tree-id32708 . -17) (undo-tree-id32709 . -17) (undo-tree-id32710 . -17) (undo-tree-id32711 . -17) (undo-tree-id32712 . -17) (undo-tree-id32713 . -17) (undo-tree-id32714 . -17) (undo-tree-id32715 . -17) (undo-tree-id32716 . -17) (undo-tree-id32717 . -17) (undo-tree-id32718 . -17) (undo-tree-id32719 . -17) (undo-tree-id32720 . -23) (undo-tree-id32721 . -23) (undo-tree-id32722 . -23) (undo-tree-id32723 . -23) (undo-tree-id32724 . -23) (undo-tree-id32725 . -23) (undo-tree-id32726 . -23) (undo-tree-id32727 . -23) (undo-tree-id32728 . -23) (undo-tree-id32729 . -23) (undo-tree-id32730 . -23) (undo-tree-id32731 . -23) (undo-tree-id32732 . -23) (undo-tree-id32733 . -23) (undo-tree-id32734 . -23) (undo-tree-id32735 . -23) (undo-tree-id32736 . -23) (undo-tree-id32737 . -23) (undo-tree-id32738 . -23) (undo-tree-id32739 . -23) (undo-tree-id32740 . -23) (undo-tree-id32741 . -23) (undo-tree-id32742 . -31) (undo-tree-id32743 . -31) (undo-tree-id32744 . -31) (undo-tree-id32745 . -31) (undo-tree-id32746 . -31) (undo-tree-id32747 . -31) (undo-tree-id32748 . -31) (undo-tree-id32749 . -31) (undo-tree-id32750 . -31) (undo-tree-id32751 . -31) (undo-tree-id32752 . -31) (undo-tree-id32753 . -31) (undo-tree-id32754 . -31) (undo-tree-id32755 . -31) (undo-tree-id32756 . -31) (undo-tree-id32757 . -31) (undo-tree-id32758 . -31) (undo-tree-id32759 . -31) (undo-tree-id32760 . -31) (undo-tree-id32761 . -31) (undo-tree-id32762 . -31) (undo-tree-id32763 . -31) (undo-tree-id32764 . -31) (undo-tree-id32765 . -32) 3373) nil (25767 6015 583847 294000) 0 nil])
([nil nil ((3229 . 3230)) nil (25767 6015 583588 154000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3261 . 3262) (nil fontified nil 3230 . 3262) (3230 . 3262) 3229) nil (25767 6015 583587 150000) 0 nil])
([nil nil ((#("we need to " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3230) (undo-tree-id32451 . -10) (undo-tree-id32452 . -10) (undo-tree-id32453 . -10) (undo-tree-id32454 . -11) (undo-tree-id32455 . -11) (undo-tree-id32456 . -11) (undo-tree-id32457 . -11) (undo-tree-id32458 . -11) (undo-tree-id32459 . -11) (undo-tree-id32460 . -11) (undo-tree-id32461 . -11) (undo-tree-id32462 . -11) (undo-tree-id32463 . -11) (undo-tree-id32464 . -11) (undo-tree-id32465 . -11) (undo-tree-id32466 . -11) (undo-tree-id32467 . -11) (undo-tree-id32468 . -11) (undo-tree-id32469 . -8) (undo-tree-id32470 . -8) (undo-tree-id32471 . -8) (undo-tree-id32472 . -8) (undo-tree-id32473 . -8) (undo-tree-id32474 . -8) (undo-tree-id32475 . -8) (undo-tree-id32476 . -8) (undo-tree-id32477 . -8) (undo-tree-id32478 . -8) (undo-tree-id32479 . -8) (undo-tree-id32480 . -8) (undo-tree-id32481 . -8) (undo-tree-id32482 . -8) (undo-tree-id32483 . -8) (undo-tree-id32484 . -3) (undo-tree-id32485 . -3) (undo-tree-id32486 . -3) (undo-tree-id32487 . -3) (undo-tree-id32488 . -3) (undo-tree-id32489 . -3) (undo-tree-id32490 . -3) (undo-tree-id32491 . -3) (undo-tree-id32492 . -3) (undo-tree-id32493 . -3) (undo-tree-id32494 . -3) (undo-tree-id32495 . -3) (undo-tree-id32496 . -3) (undo-tree-id32497 . -3) (undo-tree-id32498 . -3) (undo-tree-id32499 . -11) (undo-tree-id32500 . -10) (undo-tree-id32501 . -1) (undo-tree-id32502 . -1) (undo-tree-id32503 . -1) (undo-tree-id32504 . -1) (undo-tree-id32505 . -1) (undo-tree-id32506 . -1) (undo-tree-id32507 . -1) (undo-tree-id32508 . -1) (undo-tree-id32509 . -1) (undo-tree-id32510 . -1) (undo-tree-id32511 . -1) (undo-tree-id32512 . -1) (undo-tree-id32513 . -1) (undo-tree-id32514 . -1) (undo-tree-id32515 . -1) (undo-tree-id32516 . -1) (undo-tree-id32517 . -1) (undo-tree-id32518 . -1) (undo-tree-id32519 . -1) (undo-tree-id32520 . -1) (undo-tree-id32521 . -1) (undo-tree-id32522 . -1) (undo-tree-id32523 . -1) (undo-tree-id32524 . -1) (undo-tree-id32525 . -1) (undo-tree-id32526 . -1) (undo-tree-id32527 . -1) (undo-tree-id32528 . -1) (undo-tree-id32529 . -1) (undo-tree-id32530 . -6) (undo-tree-id32531 . -6) (undo-tree-id32532 . -6) (undo-tree-id32533 . -6) (undo-tree-id32534 . -6) (undo-tree-id32535 . -6) (undo-tree-id32536 . -6) (undo-tree-id32537 . -6) (undo-tree-id32538 . -6) (undo-tree-id32539 . -6) (undo-tree-id32540 . -6) (undo-tree-id32541 . -6) (undo-tree-id32542 . -6) (undo-tree-id32543 . -6) (undo-tree-id32544 . -6) (undo-tree-id32545 . -6) (undo-tree-id32546 . -6) (undo-tree-id32547 . -6) (undo-tree-id32548 . -6) (undo-tree-id32549 . -6) (undo-tree-id32550 . -6) (undo-tree-id32551 . -6) (undo-tree-id32552 . -9) (undo-tree-id32553 . -9) (undo-tree-id32554 . -9) (undo-tree-id32555 . -9) (undo-tree-id32556 . -9) (undo-tree-id32557 . -9) (undo-tree-id32558 . -9) (undo-tree-id32559 . -9) (undo-tree-id32560 . -9) (undo-tree-id32561 . -9) (undo-tree-id32562 . -9) (undo-tree-id32563 . -9) (undo-tree-id32564 . -9) (undo-tree-id32565 . -9) (undo-tree-id32566 . -9) (undo-tree-id32567 . -9) (undo-tree-id32568 . -9) (undo-tree-id32569 . -9) (undo-tree-id32570 . -9) (undo-tree-id32571 . -9) (undo-tree-id32572 . -9) (undo-tree-id32573 . -9) (undo-tree-id32574 . -11) (undo-tree-id32575 . -11) (undo-tree-id32576 . -11) (undo-tree-id32577 . -11) (undo-tree-id32578 . -11) (undo-tree-id32579 . -11) (undo-tree-id32580 . -11) (undo-tree-id32581 . -11) (undo-tree-id32582 . -11) (undo-tree-id32583 . -11) (undo-tree-id32584 . -11) (undo-tree-id32585 . -11) (undo-tree-id32586 . -11) (undo-tree-id32587 . -11) (undo-tree-id32588 . -11) (undo-tree-id32589 . -11) (undo-tree-id32590 . -11) (undo-tree-id32591 . -11) (undo-tree-id32592 . -11) (undo-tree-id32593 . -11) (undo-tree-id32594 . -11) (undo-tree-id32595 . -11) (undo-tree-id32596 . -10) (undo-tree-id32597 . -10) (undo-tree-id32598 . -10) (undo-tree-id32599 . -10) (undo-tree-id32600 . -10) (undo-tree-id32601 . -10) (undo-tree-id32602 . -10) (undo-tree-id32603 . -10) (undo-tree-id32604 . -10) (undo-tree-id32605 . -10) (undo-tree-id32606 . -10) (undo-tree-id32607 . -10) (undo-tree-id32608 . -10) (undo-tree-id32609 . -10) (undo-tree-id32610 . -10) (undo-tree-id32611 . -10) (undo-tree-id32612 . -10) (undo-tree-id32613 . -10) (undo-tree-id32614 . -10) (undo-tree-id32615 . -10) (undo-tree-id32616 . -10) (undo-tree-id32617 . -10) (undo-tree-id32618 . -10) (undo-tree-id32619 . -11) 3240) nil (25767 6015 583577 787000) 0 nil])
([nil nil ((3230 . 3231) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3230)) nil (25767 6015 582972 457000) 0 nil])
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3241) (undo-tree-id34353 . -1) (undo-tree-id34354 . -1) (undo-tree-id34355 . -1) (undo-tree-id34356 . -1) (undo-tree-id34357 . -1) (undo-tree-id34358 . -1) (undo-tree-id34359 . -1) (undo-tree-id34360 . -1) (undo-tree-id34361 . -1) (undo-tree-id34362 . -1) (undo-tree-id34363 . -1) (undo-tree-id34364 . -1) (undo-tree-id34365 . -1) (undo-tree-id34366 . -1) (undo-tree-id34367 . -1) (undo-tree-id34368 . -1) (undo-tree-id34369 . -1) (t 25767 6015 620942 600000)) nil (25767 6038 768380 814000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3241) (undo-tree-id34351 . -1) (undo-tree-id34352 . -1)) nil (25767 6038 768231 562000) 0 nil])
([nil nil ((3250 . 3251)) nil (25767 6038 768229 93000) 0 nil])
([nil nil ((#("," 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3361) (undo-tree-id34349 . -1) (undo-tree-id34350 . -1)) nil (25767 6038 768227 763000) 0 nil])
([nil nil ((3361 . 3362)) nil (25767 6038 768224 650000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3362) (undo-tree-id34206 . 1) (undo-tree-id34207 . -1) (undo-tree-id34208 . -1) (undo-tree-id34209 . -1) (undo-tree-id34210 . -1) (undo-tree-id34211 . -1) (undo-tree-id34212 . -1) (undo-tree-id34213 . -1) (undo-tree-id34214 . -1) (undo-tree-id34215 . -1) (undo-tree-id34216 . -1) (undo-tree-id34217 . -1) (undo-tree-id34218 . -1) (undo-tree-id34219 . -1) (undo-tree-id34220 . -1) (undo-tree-id34221 . -1) (undo-tree-id34222 . -1) (undo-tree-id34223 . -1) (undo-tree-id34224 . -1) (undo-tree-id34225 . -1) (undo-tree-id34226 . -1) (undo-tree-id34227 . -1) (undo-tree-id34228 . -1) (undo-tree-id34229 . -1) (undo-tree-id34230 . -1) (undo-tree-id34231 . -1) (undo-tree-id34232 . -1) (undo-tree-id34233 . -1) (undo-tree-id34234 . -1) (undo-tree-id34235 . -1) (undo-tree-id34236 . -1) (undo-tree-id34237 . -1) (undo-tree-id34238 . -1) (undo-tree-id34239 . -1) (undo-tree-id34240 . -1) (undo-tree-id34241 . -1) (undo-tree-id34242 . -1) (undo-tree-id34243 . -1) (undo-tree-id34244 . -1) (undo-tree-id34245 . -1) (undo-tree-id34246 . -1) (undo-tree-id34247 . -1) (undo-tree-id34248 . -1) (undo-tree-id34249 . -1) (undo-tree-id34250 . -1) (undo-tree-id34251 . -1) (undo-tree-id34252 . -1) (undo-tree-id34253 . -1) (undo-tree-id34254 . -1) (undo-tree-id34255 . -1) (undo-tree-id34256 . -1) (undo-tree-id34257 . -1) (undo-tree-id34258 . -1) (undo-tree-id34259 . -1) (undo-tree-id34260 . -1) (undo-tree-id34261 . -1) (undo-tree-id34262 . -1) (undo-tree-id34263 . -1) (undo-tree-id34264 . -1) (undo-tree-id34265 . -1) (undo-tree-id34266 . -1) (undo-tree-id34267 . -1) (undo-tree-id34268 . -1) (undo-tree-id34269 . -1) (undo-tree-id34270 . -1) (undo-tree-id34271 . -1) (undo-tree-id34272 . -1) (undo-tree-id34273 . -1) (undo-tree-id34274 . -1) (undo-tree-id34275 . -1) (undo-tree-id34276 . -1) (undo-tree-id34277 . -1) (undo-tree-id34278 . -1) (undo-tree-id34279 . -1) (undo-tree-id34280 . -1) (undo-tree-id34281 . -1) (undo-tree-id34282 . -1) (undo-tree-id34283 . -1) (undo-tree-id34284 . -1) (undo-tree-id34285 . -1) (undo-tree-id34286 . -1) (undo-tree-id34287 . -1) (undo-tree-id34288 . -1) (undo-tree-id34289 . -1) (undo-tree-id34290 . -1) (undo-tree-id34291 . -1) (undo-tree-id34292 . -1) (undo-tree-id34293 . -1) (undo-tree-id34294 . -1) (undo-tree-id34295 . -1) (undo-tree-id34296 . -1) (undo-tree-id34297 . -1) (undo-tree-id34298 . -1) (undo-tree-id34299 . -1) (undo-tree-id34300 . -1) (undo-tree-id34301 . -1) (undo-tree-id34302 . -1) (undo-tree-id34303 . -1) (undo-tree-id34304 . -1) (undo-tree-id34305 . -1) (undo-tree-id34306 . -1) (undo-tree-id34307 . -1) (undo-tree-id34308 . -1) (undo-tree-id34309 . -1) (undo-tree-id34310 . -1) (undo-tree-id34311 . -1) (undo-tree-id34312 . -1) (undo-tree-id34313 . -1) (undo-tree-id34314 . -1) (undo-tree-id34315 . -1) (undo-tree-id34316 . -1) (undo-tree-id34317 . -1) (undo-tree-id34318 . -1) (undo-tree-id34319 . -1) (undo-tree-id34320 . -1) (undo-tree-id34321 . -1) (undo-tree-id34322 . -1) (undo-tree-id34323 . -1) (undo-tree-id34324 . -1) (undo-tree-id34325 . -1) (undo-tree-id34326 . -1) (undo-tree-id34327 . -1) (undo-tree-id34328 . -1) (undo-tree-id34329 . -1) (undo-tree-id34330 . -1) (undo-tree-id34331 . -1) (undo-tree-id34332 . -1) (undo-tree-id34333 . -1) (undo-tree-id34334 . -1) (undo-tree-id34335 . -1) (undo-tree-id34336 . -1) (undo-tree-id34337 . -1) (undo-tree-id34338 . -1) (undo-tree-id34339 . -1) (undo-tree-id34340 . -1) (undo-tree-id34341 . -1) (undo-tree-id34342 . -1) (undo-tree-id34343 . -1) (undo-tree-id34344 . -1) (undo-tree-id34345 . -1) (undo-tree-id34346 . -1) (undo-tree-id34347 . -1) (undo-tree-id34348 . -1)) nil (25767 6038 768213 515000) 0 nil])
([nil nil ((3483 . 3484) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3483) (undo-tree-id34842 . -1) (undo-tree-id34843 . -1) (undo-tree-id34844 . -1) (t 25767 6038 853104 392000)) nil (25767 6098 884511 32000) 0 nil])
([nil nil ((#("batch_size = 32 dataset = dataset.shuffle(10000).batch(batch_size) dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t invisible t) 6 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 10 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 15 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 16 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t invisible t) 61 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 65 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 67 138 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 138 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3485) (undo-tree-id34370 . -138) (undo-tree-id34371 . -138) (undo-tree-id34372 . -138) (undo-tree-id34373 . -139) (undo-tree-id34374 . -138) (undo-tree-id34375 . -4) (undo-tree-id34376 . -4) (undo-tree-id34377 . -4) (undo-tree-id34378 . -4) (undo-tree-id34379 . -4) (undo-tree-id34380 . -4) (undo-tree-id34381 . -4) (undo-tree-id34382 . -4) (undo-tree-id34383 . -4) (undo-tree-id34384 . -4) (undo-tree-id34385 . -4) (undo-tree-id34386 . -4) (undo-tree-id34387 . -4) (undo-tree-id34388 . -4) (undo-tree-id34389 . -4) (undo-tree-id34390 . -4) (undo-tree-id34391 . -4) (undo-tree-id34392 . -4) (undo-tree-id34393 . -4) (undo-tree-id34394 . -4) (undo-tree-id34395 . -4) (undo-tree-id34396 . -4) (undo-tree-id34397 . -5) (undo-tree-id34398 . -5) (undo-tree-id34399 . -5) (undo-tree-id34400 . -5) (undo-tree-id34401 . -5) (undo-tree-id34402 . -5) (undo-tree-id34403 . -5) (undo-tree-id34404 . -5) (undo-tree-id34405 . -5) (undo-tree-id34406 . -5) (undo-tree-id34407 . -5) (undo-tree-id34408 . -5) (undo-tree-id34409 . -5) (undo-tree-id34410 . -5) (undo-tree-id34411 . -5) (undo-tree-id34412 . -5) (undo-tree-id34413 . -5) (undo-tree-id34414 . -5) (undo-tree-id34415 . -5) (undo-tree-id34416 . -5) (undo-tree-id34417 . -5) (undo-tree-id34418 . -5) (undo-tree-id34419 . -9) (undo-tree-id34420 . -9) (undo-tree-id34421 . -9) (undo-tree-id34422 . -9) (undo-tree-id34423 . -9) (undo-tree-id34424 . -9) (undo-tree-id34425 . -9) (undo-tree-id34426 . -9) (undo-tree-id34427 . -9) (undo-tree-id34428 . -9) (undo-tree-id34429 . -9) (undo-tree-id34430 . -9) (undo-tree-id34431 . -9) (undo-tree-id34432 . -9) (undo-tree-id34433 . -9) (undo-tree-id34434 . -9) (undo-tree-id34435 . -9) (undo-tree-id34436 . -9) (undo-tree-id34437 . -9) (undo-tree-id34438 . -9) (undo-tree-id34439 . -9) (undo-tree-id34440 . -9) (undo-tree-id34441 . -11) (undo-tree-id34442 . -11) (undo-tree-id34443 . -11) (undo-tree-id34444 . -11) (undo-tree-id34445 . -11) (undo-tree-id34446 . -11) (undo-tree-id34447 . -11) (undo-tree-id34448 . -11) (undo-tree-id34449 . -11) (undo-tree-id34450 . -11) (undo-tree-id34451 . -11) (undo-tree-id34452 . -11) (undo-tree-id34453 . -11) (undo-tree-id34454 . -11) (undo-tree-id34455 . -11) (undo-tree-id34456 . -11) (undo-tree-id34457 . -11) (undo-tree-id34458 . -11) (undo-tree-id34459 . -11) (undo-tree-id34460 . -11) (undo-tree-id34461 . -11) (undo-tree-id34462 . -11) (undo-tree-id34463 . -14) (undo-tree-id34464 . -14) (undo-tree-id34465 . -14) (undo-tree-id34466 . -14) (undo-tree-id34467 . -14) (undo-tree-id34468 . -14) (undo-tree-id34469 . -14) (undo-tree-id34470 . -14) (undo-tree-id34471 . -14) (undo-tree-id34472 . -14) (undo-tree-id34473 . -14) (undo-tree-id34474 . -14) (undo-tree-id34475 . -14) (undo-tree-id34476 . -14) (undo-tree-id34477 . -14) (undo-tree-id34478 . -14) (undo-tree-id34479 . -14) (undo-tree-id34480 . -14) (undo-tree-id34481 . -14) (undo-tree-id34482 . -14) (undo-tree-id34483 . -14) (undo-tree-id34484 . -14) (undo-tree-id34485 . 123) (undo-tree-id34486 . -23) (undo-tree-id34487 . -22) (undo-tree-id34488 . -22) (undo-tree-id34489 . -22) (undo-tree-id34490 . -22) (undo-tree-id34491 . -22) (undo-tree-id34492 . -22) (undo-tree-id34493 . -22) (undo-tree-id34494 . -22) (undo-tree-id34495 . -24) (undo-tree-id34496 . -24) (undo-tree-id34497 . -24) (undo-tree-id34498 . -24) (undo-tree-id34499 . -24) (undo-tree-id34500 . -24) (undo-tree-id34501 . -24) (undo-tree-id34502 . -24) (undo-tree-id34503 . 113) (undo-tree-id34504 . -33) (undo-tree-id34505 . -32) (undo-tree-id34506 . -32) (undo-tree-id34507 . -32) (undo-tree-id34508 . -32) (undo-tree-id34509 . -32) (undo-tree-id34510 . -32) (undo-tree-id34511 . -32) (undo-tree-id34512 . -32) (undo-tree-id34513 . -33) (undo-tree-id34514 . -33) (undo-tree-id34515 . -33) (undo-tree-id34516 . -33) (undo-tree-id34517 . -33) (undo-tree-id34518 . -33) (undo-tree-id34519 . -33) (undo-tree-id34520 . -33) (undo-tree-id34521 . -40) (undo-tree-id34522 . -40) (undo-tree-id34523 . -40) (undo-tree-id34524 . -40) (undo-tree-id34525 . -40) (undo-tree-id34526 . -40) (undo-tree-id34527 . -40) (undo-tree-id34528 . -40) (undo-tree-id34529 . -41) (undo-tree-id34530 . -41) (undo-tree-id34531 . -41) (undo-tree-id34532 . -41) (undo-tree-id34533 . -41) (undo-tree-id34534 . -41) (undo-tree-id34535 . -41) (undo-tree-id34536 . -41) (undo-tree-id34537 . -46) (undo-tree-id34538 . -46) (undo-tree-id34539 . -46) (undo-tree-id34540 . -46) (undo-tree-id34541 . -46) (undo-tree-id34542 . -46) (undo-tree-id34543 . -46) (undo-tree-id34544 . -46) (undo-tree-id34545 . -48) (undo-tree-id34546 . -48) (undo-tree-id34547 . -48) (undo-tree-id34548 . -48) (undo-tree-id34549 . -48) (undo-tree-id34550 . -48) (undo-tree-id34551 . -48) (undo-tree-id34552 . -48) (undo-tree-id34553 . -53) (undo-tree-id34554 . -53) (undo-tree-id34555 . -53) (undo-tree-id34556 . -53) (undo-tree-id34557 . -53) (undo-tree-id34558 . -53) (undo-tree-id34559 . -53) (undo-tree-id34560 . -53) (undo-tree-id34561 . -54) (undo-tree-id34562 . -54) (undo-tree-id34563 . -54) (undo-tree-id34564 . -54) (undo-tree-id34565 . -54) (undo-tree-id34566 . -54) (undo-tree-id34567 . -54) (undo-tree-id34568 . -54) (undo-tree-id34569 . -59) (undo-tree-id34570 . -59) (undo-tree-id34571 . -59) (undo-tree-id34572 . -59) (undo-tree-id34573 . -59) (undo-tree-id34574 . -59) (undo-tree-id34575 . -59) (undo-tree-id34576 . -59) (undo-tree-id34577 . -60) (undo-tree-id34578 . -60) (undo-tree-id34579 . -60) (undo-tree-id34580 . -60) (undo-tree-id34581 . -60) (undo-tree-id34582 . -60) (undo-tree-id34583 . -60) (undo-tree-id34584 . -60) (undo-tree-id34585 . -64) (undo-tree-id34586 . -64) (undo-tree-id34587 . -64) (undo-tree-id34588 . -64) (undo-tree-id34589 . -64) (undo-tree-id34590 . -64) (undo-tree-id34591 . -64) (undo-tree-id34592 . -64) (undo-tree-id34593 . -65) (undo-tree-id34594 . -65) (undo-tree-id34595 . -65) (undo-tree-id34596 . -65) (undo-tree-id34597 . -65) (undo-tree-id34598 . -65) (undo-tree-id34599 . -65) (undo-tree-id34600 . -65) (undo-tree-id34601 . 72) (undo-tree-id34602 . -74) (undo-tree-id34603 . -73) (undo-tree-id34604 . -73) (undo-tree-id34605 . -73) (undo-tree-id34606 . -73) (undo-tree-id34607 . -73) (undo-tree-id34608 . -73) (undo-tree-id34609 . -73) (undo-tree-id34610 . -73) (undo-tree-id34611 . -75) (undo-tree-id34612 . -75) (undo-tree-id34613 . -75) (undo-tree-id34614 . -75) (undo-tree-id34615 . -75) (undo-tree-id34616 . -75) (undo-tree-id34617 . -75) (undo-tree-id34618 . -75) (undo-tree-id34619 . 62) (undo-tree-id34620 . -84) (undo-tree-id34621 . -83) (undo-tree-id34622 . -83) (undo-tree-id34623 . -83) (undo-tree-id34624 . -83) (undo-tree-id34625 . -83) (undo-tree-id34626 . -83) (undo-tree-id34627 . -83) (undo-tree-id34628 . -83) (undo-tree-id34629 . -84) (undo-tree-id34630 . -84) (undo-tree-id34631 . -84) (undo-tree-id34632 . -84) (undo-tree-id34633 . -84) (undo-tree-id34634 . -84) (undo-tree-id34635 . -84) (undo-tree-id34636 . -84) (undo-tree-id34637 . -87) (undo-tree-id34638 . -87) (undo-tree-id34639 . -87) (undo-tree-id34640 . -87) (undo-tree-id34641 . -87) (undo-tree-id34642 . -87) (undo-tree-id34643 . -87) (undo-tree-id34644 . -87) (undo-tree-id34645 . -87) (undo-tree-id34646 . -87) (undo-tree-id34647 . -87) (undo-tree-id34648 . -87) (undo-tree-id34649 . -87) (undo-tree-id34650 . -87) (undo-tree-id34651 . -87) (undo-tree-id34652 . -87) (undo-tree-id34653 . -87) (undo-tree-id34654 . -87) (undo-tree-id34655 . -87) (undo-tree-id34656 . -87) (undo-tree-id34657 . -87) (undo-tree-id34658 . -87) (undo-tree-id34659 . -88) (undo-tree-id34660 . -88) (undo-tree-id34661 . -88) (undo-tree-id34662 . -88) (undo-tree-id34663 . -88) (undo-tree-id34664 . -88) (undo-tree-id34665 . -88) (undo-tree-id34666 . -88) (undo-tree-id34667 . -88) (undo-tree-id34668 . -88) (undo-tree-id34669 . -88) (undo-tree-id34670 . -88) (undo-tree-id34671 . -88) (undo-tree-id34672 . -88) (undo-tree-id34673 . -88) (undo-tree-id34674 . -88) (undo-tree-id34675 . -88) (undo-tree-id34676 . -88) (undo-tree-id34677 . -88) (undo-tree-id34678 . -88) (undo-tree-id34679 . -88) (undo-tree-id34680 . -88) (undo-tree-id34681 . -88) (undo-tree-id34682 . -88) (undo-tree-id34683 . -88) (undo-tree-id34684 . -88) (undo-tree-id34685 . -88) (undo-tree-id34686 . -88) (undo-tree-id34687 . -88) (undo-tree-id34688 . -94) (undo-tree-id34689 . -94) (undo-tree-id34690 . -94) (undo-tree-id34691 . -94) (undo-tree-id34692 . -94) (undo-tree-id34693 . -94) (undo-tree-id34694 . -94) (undo-tree-id34695 . -94) (undo-tree-id34696 . -102) (undo-tree-id34697 . -102) (undo-tree-id34698 . -102) (undo-tree-id34699 . -102) (undo-tree-id34700 . -102) (undo-tree-id34701 . -102) (undo-tree-id34702 . -102) (undo-tree-id34703 . -102) (undo-tree-id34704 . -103) (undo-tree-id34705 . -103) (undo-tree-id34706 . -103) (undo-tree-id34707 . -103) (undo-tree-id34708 . -103) (undo-tree-id34709 . -103) (undo-tree-id34710 . -103) (undo-tree-id34711 . -103) (undo-tree-id34712 . -105) (undo-tree-id34713 . -105) (undo-tree-id34714 . -105) (undo-tree-id34715 . -105) (undo-tree-id34716 . -105) (undo-tree-id34717 . -105) (undo-tree-id34718 . -105) (undo-tree-id34719 . -105) (undo-tree-id34720 . -112) (undo-tree-id34721 . -112) (undo-tree-id34722 . -112) (undo-tree-id34723 . -112) (undo-tree-id34724 . -112) (undo-tree-id34725 . -112) (undo-tree-id34726 . -112) (undo-tree-id34727 . -112) (undo-tree-id34728 . -115) (undo-tree-id34729 . -115) (undo-tree-id34730 . -115) (undo-tree-id34731 . -115) (undo-tree-id34732 . -115) (undo-tree-id34733 . -115) (undo-tree-id34734 . -115) (undo-tree-id34735 . -115) (undo-tree-id34736 . -118) (undo-tree-id34737 . -118) (undo-tree-id34738 . -118) (undo-tree-id34739 . -118) (undo-tree-id34740 . -118) (undo-tree-id34741 . -118) (undo-tree-id34742 . -118) (undo-tree-id34743 . -118) (undo-tree-id34744 . -119) (undo-tree-id34745 . -119) (undo-tree-id34746 . -119) (undo-tree-id34747 . -119) (undo-tree-id34748 . -119) (undo-tree-id34749 . -119) (undo-tree-id34750 . -119) (undo-tree-id34751 . -119) (undo-tree-id34752 . -121) (undo-tree-id34753 . -121) (undo-tree-id34754 . -121) (undo-tree-id34755 . -121) (undo-tree-id34756 . -121) (undo-tree-id34757 . -121) (undo-tree-id34758 . -121) (undo-tree-id34759 . -121) (undo-tree-id34760 . -129) (undo-tree-id34761 . -129) (undo-tree-id34762 . -129) (undo-tree-id34763 . -129) (undo-tree-id34764 . -129) (undo-tree-id34765 . -129) (undo-tree-id34766 . -129) (undo-tree-id34767 . -129) (undo-tree-id34768 . -132) (undo-tree-id34769 . -132) (undo-tree-id34770 . -132) (undo-tree-id34771 . -132) (undo-tree-id34772 . -132) (undo-tree-id34773 . -132) (undo-tree-id34774 . -132) (undo-tree-id34775 . -132) (undo-tree-id34776 . -134) (undo-tree-id34777 . -134) (undo-tree-id34778 . -134) (undo-tree-id34779 . -134) (undo-tree-id34780 . -134) (undo-tree-id34781 . -134) (undo-tree-id34782 . -134) (undo-tree-id34783 . -134) (undo-tree-id34784 . -138) (undo-tree-id34785 . -138) (undo-tree-id34786 . -138) (undo-tree-id34787 . -138) (undo-tree-id34788 . -138) (undo-tree-id34789 . -138) (undo-tree-id34790 . -138) (undo-tree-id34791 . -138) (undo-tree-id34792 . -139) (undo-tree-id34793 . -139) (undo-tree-id34794 . -139) (undo-tree-id34795 . -139) (undo-tree-id34796 . -139) (undo-tree-id34797 . -139) (undo-tree-id34798 . -139) (undo-tree-id34799 . -139) (undo-tree-id34800 . -139) (undo-tree-id34801 . -139) (undo-tree-id34802 . -139) (undo-tree-id34803 . -139) (undo-tree-id34804 . -139) (undo-tree-id34805 . -139) (undo-tree-id34806 . -139) (undo-tree-id34807 . -139) (undo-tree-id34808 . -139) (undo-tree-id34809 . -139) (undo-tree-id34810 . -139) (undo-tree-id34811 . -139) (undo-tree-id34812 . -139) (undo-tree-id34813 . -139) (undo-tree-id34814 . -138) (undo-tree-id34815 . -138) (undo-tree-id34816 . -138) (undo-tree-id34817 . -138) (undo-tree-id34818 . -138) (undo-tree-id34819 . -138) (undo-tree-id34820 . -138) (undo-tree-id34821 . -138) (undo-tree-id34822 . -138) (undo-tree-id34823 . -138) (undo-tree-id34824 . -138) (undo-tree-id34825 . -138) (undo-tree-id34826 . -138) (undo-tree-id34827 . -138) (undo-tree-id34828 . 1) (undo-tree-id34829 . -139) (undo-tree-id34830 . 51) (undo-tree-id34831 . -89) (undo-tree-id34832 . -138) (undo-tree-id34833 . -138) (undo-tree-id34834 . -138) (undo-tree-id34835 . -138) (undo-tree-id34836 . -138) (undo-tree-id34837 . -138) (undo-tree-id34838 . -138) (undo-tree-id34839 . -138) (undo-tree-id34840 . -138) (undo-tree-id34841 . -139) 3623) nil (25767 6098 884479 996000) 0 nil])
([nil nil ((3023 . 3024) 2954) nil (25767 6098 882976 515000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3162 . 3163) (nil fontified nil 3024 . 3163) (3024 . 3163)) nil (25767 6098 882974 974000) 0 nil])
([nil nil ((3040 . 3041)) nil (25767 6098 882969 850000) 0 nil])
([nil nil ((3092 . 3093) (t 25767 6098 969536 547000)) nil (25767 6105 428242 55000) 0 nil])
([nil nil ((#("  Figure 16-1 summarizes the dataset preparation steps discussed so far (showing windows of length 11 rather than 101, and a batch size of 3 instead of 32).
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 73 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 78 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 79 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 93 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 94 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 95 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 140 141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 141 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 155 156 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 156 157 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3626) (undo-tree-id34845 . -156) (undo-tree-id34846 . -1) (undo-tree-id34847 . 156) (undo-tree-id34848 . -1) (undo-tree-id34849 . -12) (undo-tree-id34850 . 128) (undo-tree-id34851 . -36) (undo-tree-id34852 . -30) (undo-tree-id34853 . -30) (undo-tree-id34854 . -30) (undo-tree-id34855 . -30) (undo-tree-id34856 . -30) (undo-tree-id34857 . -30) (undo-tree-id34858 . -30) (undo-tree-id34859 . -30) (undo-tree-id34860 . -30) (undo-tree-id34861 . -30) (undo-tree-id34862 . -30) (undo-tree-id34863 . -30) (undo-tree-id34864 . -30) (undo-tree-id34865 . -30) (undo-tree-id34866 . -30) (undo-tree-id34867 . -29) (undo-tree-id34868 . -29) (undo-tree-id34869 . -29) (undo-tree-id34870 . -29) (undo-tree-id34871 . -29) (undo-tree-id34872 . -29) (undo-tree-id34873 . -29) (undo-tree-id34874 . -29) (undo-tree-id34875 . -29) (undo-tree-id34876 . -29) (undo-tree-id34877 . -29) (undo-tree-id34878 . -29) (undo-tree-id34879 . -29) (undo-tree-id34880 . -29) (undo-tree-id34881 . -29) (undo-tree-id34882 . -25) (undo-tree-id34883 . -25) (undo-tree-id34884 . -25) (undo-tree-id34885 . -25) (undo-tree-id34886 . -25) (undo-tree-id34887 . -25) (undo-tree-id34888 . -25) (undo-tree-id34889 . -25) (undo-tree-id34890 . -25) (undo-tree-id34891 . -25) (undo-tree-id34892 . -25) (undo-tree-id34893 . -25) (undo-tree-id34894 . -25) (undo-tree-id34895 . -25) (undo-tree-id34896 . -25) (undo-tree-id34897 . -14) (undo-tree-id34898 . -14) (undo-tree-id34899 . -14) (undo-tree-id34900 . -14) (undo-tree-id34901 . -14) (undo-tree-id34902 . -14) (undo-tree-id34903 . -14) (undo-tree-id34904 . -14) (undo-tree-id34905 . -14) (undo-tree-id34906 . -14) (undo-tree-id34907 . -14) (undo-tree-id34908 . -14) (undo-tree-id34909 . -14) (undo-tree-id34910 . -14) (undo-tree-id34911 . -14) (undo-tree-id34912 . -12) (undo-tree-id34913 . -12) (undo-tree-id34914 . -12) (undo-tree-id34915 . -12) (undo-tree-id34916 . -12) (undo-tree-id34917 . -12) (undo-tree-id34918 . -12) (undo-tree-id34919 . -12) (undo-tree-id34920 . -12) (undo-tree-id34921 . -12) (undo-tree-id34922 . -12) (undo-tree-id34923 . -12) (undo-tree-id34924 . -12) (undo-tree-id34925 . -12) (undo-tree-id34926 . -12) (undo-tree-id34927 . -12) (undo-tree-id34928 . -12) (undo-tree-id34929 . -12) (undo-tree-id34930 . -12) (undo-tree-id34931 . -12) (undo-tree-id34932 . -12) (undo-tree-id34933 . -12) (undo-tree-id34934 . -12) (undo-tree-id34935 . -12) (undo-tree-id34936 . -12) (undo-tree-id34937 . -12) (undo-tree-id34938 . -12) (undo-tree-id34939 . -12) (undo-tree-id34940 . -12) (undo-tree-id34941 . -12) (undo-tree-id34942 . -12) (undo-tree-id34943 . -12) (undo-tree-id34944 . -12) (undo-tree-id34945 . -12) (undo-tree-id34946 . -12) (undo-tree-id34947 . -12) (undo-tree-id34948 . -12) (undo-tree-id34949 . -12) (undo-tree-id34950 . -12) (undo-tree-id34951 . -12) (undo-tree-id34952 . -12) (undo-tree-id34953 . -12) (undo-tree-id34954 . -12) (undo-tree-id34955 . -12) (undo-tree-id34956 . -12) (undo-tree-id34957 . -12) (undo-tree-id34958 . -157) 3638 (t 25767 6105 465584 345000)) nil (25767 6117 468992 620000) 0 nil])
([nil nil ((#("#+begin_src  python :result outputs
wsteps = 100 window_length = n_steps + 1 # target = input shifted 1 character ahead 
dataset = dataset.window(window_length, shift=1, drop_remainder=True)
dataset = dataset.flat_map(lambda window: window.batch(window_length))
batch_size = 32 
dataset = dataset.shuffle(10000).batch(batch_size) 
dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))
#+end_src 
" 0 7 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 7 8 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 8 11 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 11 35 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 35 36 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 37 42 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 49 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 49 55 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 55 56 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 56 62 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 62 66 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 66 67 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 67 72 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 72 77 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 77 79 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 79 121 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-comment-face org-block)) 121 128 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-variable-name-face org-block)) 128 145 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 145 146 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 146 152 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 152 153 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 153 159 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 159 174 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 174 175 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 175 184 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 184 185 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 185 189 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (font-lock-constant-face org-block)) 189 190 (rear-nonsticky t font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 190 191 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 191 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 192 198 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 198 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 213 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 214 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 217 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 218 224 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 224 245 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 245 246 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 246 252 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 252 253 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 253 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 259 260 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 260 261 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 261 262 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 262 267 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 267 268 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 268 272 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 272 279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 279 286 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 286 304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 304 305 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 305 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 310 311 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 311 317 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 317 318 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 318 323 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 323 324 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 324 328 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 328 329 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 329 331 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 331 338 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 338 349 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 349 352 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 352 353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 353 359 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 359 369 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 369 370 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 370 377 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 378 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 378 384 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 384 385 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 385 394 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 394 395 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 395 400 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 400 401 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 401 402 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 402 403 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 403 404 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block)) 404 413 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 413 414 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 414 415 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 2762) (undo-tree-id35170 . -414) (undo-tree-id35171 . -404) (undo-tree-id35172 . 84) (undo-tree-id35173 . -415) (undo-tree-id35174 . -414) (undo-tree-id35175 . -404) (undo-tree-id35176 . -415) (undo-tree-id35177 . -415) (undo-tree-id35178 . -415) (undo-tree-id35179 . -415) (undo-tree-id35180 . -415) (undo-tree-id35181 . -415) (undo-tree-id35182 . -415) (undo-tree-id35183 . -415) (undo-tree-id35184 . -404) (undo-tree-id35185 . -404) (undo-tree-id35186 . -404) (undo-tree-id35187 . -404) (undo-tree-id35188 . -404) (undo-tree-id35189 . -404) (undo-tree-id35190 . -404) (undo-tree-id35191 . -404) (undo-tree-id35192 . -331) (undo-tree-id35193 . -331) (undo-tree-id35194 . -331) (undo-tree-id35195 . -331) (undo-tree-id35196 . -331) (undo-tree-id35197 . -331) (undo-tree-id35198 . -331) (undo-tree-id35199 . -331) (undo-tree-id35200 . -279) (undo-tree-id35201 . -279) (undo-tree-id35202 . -279) (undo-tree-id35203 . -279) (undo-tree-id35204 . -279) (undo-tree-id35205 . -279) (undo-tree-id35206 . -279) (undo-tree-id35207 . -279) (undo-tree-id35208 . -262) (undo-tree-id35209 . -262) (undo-tree-id35210 . -262) (undo-tree-id35211 . -262) (undo-tree-id35212 . -262) (undo-tree-id35213 . -262) (undo-tree-id35214 . -262) (undo-tree-id35215 . -262) (undo-tree-id35216 . -191) (undo-tree-id35217 . -191) (undo-tree-id35218 . -191) (undo-tree-id35219 . -191) (undo-tree-id35220 . -191) (undo-tree-id35221 . -191) (undo-tree-id35222 . -191) (undo-tree-id35223 . -191) (undo-tree-id35224 . -121) (undo-tree-id35225 . -121) (undo-tree-id35226 . -121) (undo-tree-id35227 . -121) (undo-tree-id35228 . -121) (undo-tree-id35229 . -121) (undo-tree-id35230 . -121) (undo-tree-id35231 . -121) (undo-tree-id35232 . -36) (undo-tree-id35233 . -36) (undo-tree-id35234 . -36) (undo-tree-id35235 . -36) (undo-tree-id35236 . -36) (undo-tree-id35237 . -36) (undo-tree-id35238 . -36) (undo-tree-id35239 . -36) (undo-tree-id35240 . -415) (undo-tree-id35241 . -404) (undo-tree-id35242 . -36) (undo-tree-id35243 . -36) (undo-tree-id35244 . -36) (undo-tree-id35245 . -36) (undo-tree-id35246 . -36) (undo-tree-id35247 . -36) (undo-tree-id35248 . -36) (undo-tree-id35249 . -36) (undo-tree-id35250 . -121) (undo-tree-id35251 . -121) (undo-tree-id35252 . -121) (undo-tree-id35253 . -121) (undo-tree-id35254 . -121) (undo-tree-id35255 . -121) (undo-tree-id35256 . -121) (undo-tree-id35257 . -121) (undo-tree-id35258 . -191) (undo-tree-id35259 . -191) (undo-tree-id35260 . -191) (undo-tree-id35261 . -191) (undo-tree-id35262 . -191) (undo-tree-id35263 . -191) (undo-tree-id35264 . -191) (undo-tree-id35265 . -191) (undo-tree-id35266 . -262) (undo-tree-id35267 . -262) (undo-tree-id35268 . -262) (undo-tree-id35269 . -262) (undo-tree-id35270 . -262) (undo-tree-id35271 . -262) (undo-tree-id35272 . -262) (undo-tree-id35273 . -262) (undo-tree-id35274 . -279) (undo-tree-id35275 . -279) (undo-tree-id35276 . -279) (undo-tree-id35277 . -279) (undo-tree-id35278 . -279) (undo-tree-id35279 . -279) (undo-tree-id35280 . -279) (undo-tree-id35281 . -279) (undo-tree-id35282 . -331) (undo-tree-id35283 . -331) (undo-tree-id35284 . -331) (undo-tree-id35285 . -331) (undo-tree-id35286 . -331) (undo-tree-id35287 . -331) (undo-tree-id35288 . -331) (undo-tree-id35289 . -331) (undo-tree-id35290 . -404) (undo-tree-id35291 . -404) (undo-tree-id35292 . -404) (undo-tree-id35293 . -404) (undo-tree-id35294 . -404) (undo-tree-id35295 . -404) (undo-tree-id35296 . -404) (undo-tree-id35297 . -404) (undo-tree-id35298 . -404) (undo-tree-id35299 . -415) 3166 (t 25767 6117 501673 443000)) nil (25767 6128 392782 728000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3211 . 3212) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3626) (3211 . 3627)) nil (25767 6128 392656 670000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t)) . 2761) (undo-tree-id34988 . -1) (undo-tree-id34989 . -1) (undo-tree-id34990 . -1) (undo-tree-id34991 . -1) (undo-tree-id34992 . -1) (undo-tree-id34993 . -1) (undo-tree-id34994 . -1) (undo-tree-id34995 . -1) (undo-tree-id34996 . -1) (undo-tree-id34997 . -1) (undo-tree-id34998 . -1) (undo-tree-id34999 . -1) (undo-tree-id35000 . -1) (undo-tree-id35001 . -1) (undo-tree-id35002 . -1) (undo-tree-id35003 . -1) (undo-tree-id35004 . -1) (undo-tree-id35005 . -1) (undo-tree-id35006 . -1) (undo-tree-id35007 . -1) (undo-tree-id35008 . -1) (undo-tree-id35009 . -1) (undo-tree-id35010 . -1) (undo-tree-id35011 . -1) (undo-tree-id35012 . -1) (undo-tree-id35013 . -1) (undo-tree-id35014 . -1) (undo-tree-id35015 . -1) (undo-tree-id35016 . -1) (undo-tree-id35017 . -1) (undo-tree-id35018 . -1) (undo-tree-id35019 . -1) (undo-tree-id35020 . -1) (undo-tree-id35021 . -1) (undo-tree-id35022 . -1) (undo-tree-id35023 . -1) (undo-tree-id35024 . -1) (undo-tree-id35025 . -1) (undo-tree-id35026 . -1) (undo-tree-id35027 . -1) (undo-tree-id35028 . -1) (undo-tree-id35029 . -1) (undo-tree-id35030 . -1) (undo-tree-id35031 . -1) (undo-tree-id35032 . -1) (undo-tree-id35033 . -1) (undo-tree-id35034 . -1) (undo-tree-id35035 . -1) (undo-tree-id35036 . -1) (undo-tree-id35037 . -1) (undo-tree-id35038 . -1) (undo-tree-id35039 . -1) (undo-tree-id35040 . -1) (undo-tree-id35041 . -1) (undo-tree-id35042 . -1) (undo-tree-id35043 . -1) (undo-tree-id35044 . -1) (undo-tree-id35045 . -1) (undo-tree-id35046 . -1) (undo-tree-id35047 . -1) (undo-tree-id35048 . -1) (undo-tree-id35049 . -1) (undo-tree-id35050 . -1) (undo-tree-id35051 . -1) (undo-tree-id35052 . -1) (undo-tree-id35053 . -1) (undo-tree-id35054 . -1) (undo-tree-id35055 . -1) (undo-tree-id35056 . -1) (undo-tree-id35057 . -1) (undo-tree-id35058 . -1) (undo-tree-id35059 . -1) (undo-tree-id35060 . -1) (undo-tree-id35061 . -1) (undo-tree-id35062 . -1) (undo-tree-id35063 . -1) (undo-tree-id35064 . -1) (undo-tree-id35065 . -1) (undo-tree-id35066 . -1) (undo-tree-id35067 . -1) (undo-tree-id35068 . -1) (undo-tree-id35069 . -1) (undo-tree-id35070 . -1) (undo-tree-id35071 . -1) (undo-tree-id35072 . -1) (undo-tree-id35073 . -1) (undo-tree-id35074 . -1) (undo-tree-id35075 . -1) (undo-tree-id35076 . -1) (undo-tree-id35077 . -1) (undo-tree-id35078 . -1) (undo-tree-id35079 . -1) (undo-tree-id35080 . -1) (undo-tree-id35081 . -1) (undo-tree-id35082 . -1) (undo-tree-id35083 . -1) (undo-tree-id35084 . -1) (undo-tree-id35085 . -1) (undo-tree-id35086 . -1) (undo-tree-id35087 . -1) (undo-tree-id35088 . -1) (undo-tree-id35089 . -1) (undo-tree-id35090 . -1) (undo-tree-id35091 . -1) (undo-tree-id35092 . -1) (undo-tree-id35093 . -1) (undo-tree-id35094 . -1) (undo-tree-id35095 . -1) (undo-tree-id35096 . -1) (undo-tree-id35097 . -1) (undo-tree-id35098 . -1) (undo-tree-id35099 . -1) (undo-tree-id35100 . -1) (undo-tree-id35101 . -1) (undo-tree-id35102 . -1) (undo-tree-id35103 . -1) (undo-tree-id35104 . -1) (undo-tree-id35105 . -1) (undo-tree-id35106 . -1) (undo-tree-id35107 . -1) (undo-tree-id35108 . -1) (undo-tree-id35109 . -1) (undo-tree-id35110 . -1) (undo-tree-id35111 . -1) (undo-tree-id35112 . -1) (undo-tree-id35113 . -1) (undo-tree-id35114 . -1) (undo-tree-id35115 . -1) (undo-tree-id35116 . -1) (undo-tree-id35117 . -1) (undo-tree-id35118 . -1) (undo-tree-id35119 . -1) (undo-tree-id35120 . -1) (undo-tree-id35121 . -1) (undo-tree-id35122 . -1) (undo-tree-id35123 . -1) (undo-tree-id35124 . -1) (undo-tree-id35125 . -1) (undo-tree-id35126 . -1) (undo-tree-id35127 . -1) (undo-tree-id35128 . -1) (undo-tree-id35129 . -1) (undo-tree-id35130 . -1) (undo-tree-id35131 . -1) (undo-tree-id35132 . -1) (undo-tree-id35133 . -1) (undo-tree-id35134 . -1) (undo-tree-id35135 . -1) (undo-tree-id35136 . -1) (undo-tree-id35137 . -1) (undo-tree-id35138 . -1) (undo-tree-id35139 . -1) (undo-tree-id35140 . -1) (undo-tree-id35141 . -1) (undo-tree-id35142 . -1) (undo-tree-id35143 . -1) (undo-tree-id35144 . -1) (undo-tree-id35145 . -1) (undo-tree-id35146 . -1) (undo-tree-id35147 . -1) (undo-tree-id35148 . -1) (undo-tree-id35149 . -1) (undo-tree-id35150 . -1) (undo-tree-id35151 . -1) (undo-tree-id35152 . -1) (undo-tree-id35153 . -1) (undo-tree-id35154 . -1) (undo-tree-id35155 . -1) (undo-tree-id35156 . -1) (undo-tree-id35157 . -1) (undo-tree-id35158 . -1) (undo-tree-id35159 . -1) (undo-tree-id35160 . -1) (undo-tree-id35161 . -1) (undo-tree-id35162 . -1) (undo-tree-id35163 . -1) (undo-tree-id35164 . -1) (undo-tree-id35165 . -1) (undo-tree-id35166 . -1) (undo-tree-id35167 . -1) (undo-tree-id35168 . -1) (undo-tree-id35169 . -1)) nil (25767 6128 392649 942000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2761) (undo-tree-id34959 . 1) (undo-tree-id34960 . 1) (undo-tree-id34961 . -1) (undo-tree-id34962 . -1) (undo-tree-id34963 . -1) (undo-tree-id34964 . -1) (undo-tree-id34965 . -1) (undo-tree-id34966 . -1) (undo-tree-id34967 . -1) (undo-tree-id34968 . -1) (undo-tree-id34969 . -1) (undo-tree-id34970 . -1) (undo-tree-id34971 . -1) (undo-tree-id34972 . -1) (undo-tree-id34973 . -1) (undo-tree-id34974 . -1) (undo-tree-id34975 . -1) (undo-tree-id34976 . -1) (undo-tree-id34977 . -1) (undo-tree-id34978 . -1) (undo-tree-id34979 . -1) (undo-tree-id34980 . -1) (undo-tree-id34981 . -1) (undo-tree-id34982 . -1) (undo-tree-id34983 . -1) (undo-tree-id34984 . -1) (undo-tree-id34985 . -1) (undo-tree-id34986 . -1) (undo-tree-id34987 . -1)) nil (25767 6128 392406 947000) 0 nil])
([nil nil ((3624 . 3625)) nil (25767 6128 392374 975000) 0 nil])
([nil nil ((3625 . 3626) (t 25767 6128 433754 963000)) nil (25767 6159 354090 162000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4237 . 4238) (nil fontified nil 4164 . 4238) (nil fontified nil 4123 . 4164) (nil fontified nil 4116 . 4123) (nil fontified nil 4040 . 4116) (nil fontified nil 4010 . 4040) (nil fontified nil 3968 . 4010) (nil fontified nil 3958 . 3968) (nil fontified nil 3897 . 3958) (nil fontified nil 3874 . 3897) (nil fontified nil 3843 . 3874) (nil fontified nil 3769 . 3843) (nil fontified nil 3701 . 3769) (nil fontified nil 3626 . 3701) (3626 . 4238)) nil (25767 6159 354087 724000) 0 nil])
([nil nil ((4238 . 4239)) nil (25767 6159 354081 251000) 0 nil])
([nil nil ((#("As discussed in Chapter 13" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35363 . -25) (undo-tree-id35364 . -26) (t 25767 6159 393988 798000)) nil (25767 6187 56112 303000) 0 nil])
([nil nil ((#(", categorical input features should generally be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35353 . -48) (undo-tree-id35354 . -47) (undo-tree-id35355 . -47) (undo-tree-id35356 . -47) (undo-tree-id35357 . -47) (undo-tree-id35358 . -47) (undo-tree-id35359 . -47) (undo-tree-id35360 . -47) (undo-tree-id35361 . -47) (undo-tree-id35362 . -49)) nil (25767 6187 56109 270000) 0 nil])
([nil nil ((#("encoded, usually as one-hot vectors or as embeddings" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35351 . -51) (undo-tree-id35352 . -52)) nil (25767 6187 55991 898000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35349 . -1) (undo-tree-id35350 . -1)) nil (25767 6187 55989 382000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3626) (undo-tree-id35347 . -1) (undo-tree-id35348 . -1)) nil (25767 6187 55986 961000) 0 nil])
([nil nil ((#("Here, " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35316 . -5) (undo-tree-id35317 . -5) (undo-tree-id35318 . -5) (undo-tree-id35319 . -6) (undo-tree-id35320 . -5) (undo-tree-id35321 . -3) (undo-tree-id35322 . -3) (undo-tree-id35323 . -3) (undo-tree-id35324 . -3) (undo-tree-id35325 . -3) (undo-tree-id35326 . -3) (undo-tree-id35327 . -3) (undo-tree-id35328 . -3) (undo-tree-id35329 . -4) (undo-tree-id35330 . -4) (undo-tree-id35331 . -4) (undo-tree-id35332 . -4) (undo-tree-id35333 . -4) (undo-tree-id35334 . -4) (undo-tree-id35335 . -4) (undo-tree-id35336 . -4) (undo-tree-id35337 . -5) (undo-tree-id35338 . -5) (undo-tree-id35339 . -5) (undo-tree-id35340 . -5) (undo-tree-id35341 . -5) (undo-tree-id35342 . -5) (undo-tree-id35343 . -5) (undo-tree-id35344 . -5) (undo-tree-id35345 . -5) (undo-tree-id35346 . -6) 3631) nil (25767 6187 647998 428000) 0 nil])
([nil nil ((3633 . 3634) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3633) (undo-tree-id35365 . -1) 3631) nil (25767 6189 429828 674000) 0 nil] [nil nil ((#("we wil" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35302 . -5) (undo-tree-id35303 . -5) (undo-tree-id35304 . -6) (undo-tree-id35305 . -6) (undo-tree-id35306 . -6) (undo-tree-id35307 . -6) (undo-tree-id35308 . -6) (undo-tree-id35309 . -6) (undo-tree-id35310 . -6) (undo-tree-id35311 . -6) (undo-tree-id35312 . -6) (undo-tree-id35313 . -5) (undo-tree-id35314 . -5) (undo-tree-id35315 . -6) 3631) ((3626 . 3632)) (25767 6187 56367 746000) 0 nil])
([nil nil ((#("dataset = dataset.map(
lambda X_batch, Y_batch: (tf.one_hot(X_batch, depth=max_id),
Y_batch))
" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 31 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 32 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 37 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 40 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 41 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 46 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 55 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 56 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 59 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 61 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 62 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 67 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 79 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 81 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 84 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 85 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 86 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 91 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3739) (undo-tree-id35384 . -93) (undo-tree-id35385 . -84) (undo-tree-id35386 . -84) (undo-tree-id35387 . 94) (undo-tree-id35388 . -7) (undo-tree-id35389 . -94) (undo-tree-id35390 . -84) (undo-tree-id35391 . -23) (undo-tree-id35392 . -23) (undo-tree-id35393 . -23) (undo-tree-id35394 . -23) (undo-tree-id35395 . -23) (undo-tree-id35396 . -23) (undo-tree-id35397 . -23) (undo-tree-id35398 . -23) (undo-tree-id35399 . -84) (undo-tree-id35400 . -84) (undo-tree-id35401 . -84) (undo-tree-id35402 . -84) (undo-tree-id35403 . -84) (undo-tree-id35404 . -84) (undo-tree-id35405 . -84) (undo-tree-id35406 . -84) (undo-tree-id35407 . -84) (undo-tree-id35408 . -94) 3823 (t 25767 6189 514220 300000)) nil (25767 6212 801902 955000) 0 nil])
([nil nil ((3626 . 3627) (#("l" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3626) (undo-tree-id35300 . 1) (undo-tree-id35301 . -1)) ((3626 . 3627) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3626)) (25767 6187 55941 248000) 0 nil])
([nil nil ((3613 . 3614) 3541) nil (25767 6212 801844 343000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3614 . 3615) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3708) (3614 . 3709)) nil (25767 6212 801843 228000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 3614) (undo-tree-id35367 . -1) (undo-tree-id35368 . -1) (undo-tree-id35369 . -1) (undo-tree-id35370 . -1) (undo-tree-id35371 . -1) (undo-tree-id35372 . -1) (undo-tree-id35373 . -1) (undo-tree-id35374 . -1) (undo-tree-id35375 . -1) (undo-tree-id35376 . -1) (undo-tree-id35377 . -1) (undo-tree-id35378 . -1) (undo-tree-id35379 . -1) (undo-tree-id35380 . -1) (undo-tree-id35381 . -1) (undo-tree-id35382 . -1) (undo-tree-id35383 . -1)) nil (25767 6212 801840 994000) 0 nil])
([nil nil ((3697 . 3698) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -3697) (undo-tree-id35366 . -1) 3637) nil (25767 6226 69901 827000) 0 nil])
([nil nil ((#("we will encode each character using a one-hot vector because there are fairly few
distinct characters (only 39):
Finally, we just need to add prefetching:
dataset = dataset.prefetch(1)
That’s it! Preparing the dataset was the hardest part. Now let’s create the
model.
Building and Training the Char-RNN Model
To predict the next character based on the previous 100 characters, we can
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 82 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 113 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 114 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 155 185 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 185 261 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 261 268 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 268 271 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 271 309 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 309 382 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 382 383 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 383 384 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3720) (undo-tree-id35449 . -383) (undo-tree-id35450 . -309) (undo-tree-id35451 . 211) (undo-tree-id35452 . -181) (undo-tree-id35453 . 242) (undo-tree-id35454 . -153) (undo-tree-id35455 . -309) (undo-tree-id35456 . -19) (undo-tree-id35457 . -19) (undo-tree-id35458 . -19) (undo-tree-id35459 . -19) (undo-tree-id35460 . -19) (undo-tree-id35461 . -19) (undo-tree-id35462 . -19) (undo-tree-id35463 . -19) (undo-tree-id35464 . -384) (undo-tree-id35465 . -309) (undo-tree-id35466 . -82) (undo-tree-id35467 . -82) (undo-tree-id35468 . -82) (undo-tree-id35469 . -82) (undo-tree-id35470 . -82) (undo-tree-id35471 . -82) (undo-tree-id35472 . -82) (undo-tree-id35473 . -82) (undo-tree-id35474 . -113) (undo-tree-id35475 . -113) (undo-tree-id35476 . -113) (undo-tree-id35477 . -113) (undo-tree-id35478 . -113) (undo-tree-id35479 . -113) (undo-tree-id35480 . -113) (undo-tree-id35481 . -113) (undo-tree-id35482 . -155) (undo-tree-id35483 . -155) (undo-tree-id35484 . -155) (undo-tree-id35485 . -155) (undo-tree-id35486 . -155) (undo-tree-id35487 . -155) (undo-tree-id35488 . -155) (undo-tree-id35489 . -155) (undo-tree-id35490 . -185) (undo-tree-id35491 . -185) (undo-tree-id35492 . -185) (undo-tree-id35493 . -185) (undo-tree-id35494 . -185) (undo-tree-id35495 . -185) (undo-tree-id35496 . -185) (undo-tree-id35497 . -185) (undo-tree-id35498 . -261) (undo-tree-id35499 . -261) (undo-tree-id35500 . -261) (undo-tree-id35501 . -261) (undo-tree-id35502 . -261) (undo-tree-id35503 . -261) (undo-tree-id35504 . -261) (undo-tree-id35505 . -261) (undo-tree-id35506 . -268) (undo-tree-id35507 . -268) (undo-tree-id35508 . -268) (undo-tree-id35509 . -268) (undo-tree-id35510 . -268) (undo-tree-id35511 . -268) (undo-tree-id35512 . -268) (undo-tree-id35513 . -268) (undo-tree-id35514 . -309) (undo-tree-id35515 . -309) (undo-tree-id35516 . -309) (undo-tree-id35517 . -309) (undo-tree-id35518 . -309) (undo-tree-id35519 . -309) (undo-tree-id35520 . -309) (undo-tree-id35521 . -309) (undo-tree-id35522 . -309) (undo-tree-id35523 . -384) 4029) nil (25767 6240 654456 776000) 0 nil] [nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -3636) (undo-tree-id35409 . -1) (undo-tree-id35410 . -1) (undo-tree-id35411 . -1) (undo-tree-id35412 . -1) (undo-tree-id35413 . -1) (undo-tree-id35414 . -1) (undo-tree-id35415 . -1) (undo-tree-id35416 . -1) (undo-tree-id35417 . -1) (undo-tree-id35418 . -1) (undo-tree-id35419 . -1) (undo-tree-id35420 . -1) (undo-tree-id35421 . -1) (undo-tree-id35422 . -1) (undo-tree-id35423 . -1) (undo-tree-id35424 . -1) (undo-tree-id35425 . -1) (undo-tree-id35426 . -1) (undo-tree-id35427 . -1) (undo-tree-id35428 . -1) (undo-tree-id35429 . -1) (undo-tree-id35430 . -1) (undo-tree-id35431 . -1) (undo-tree-id35432 . -1) (undo-tree-id35433 . -1) (undo-tree-id35434 . -1) (undo-tree-id35435 . -1) (undo-tree-id35436 . -1) (undo-tree-id35437 . -1) (undo-tree-id35438 . -1) (undo-tree-id35439 . -1) (undo-tree-id35440 . -1) (undo-tree-id35441 . -1) (undo-tree-id35442 . -1) (undo-tree-id35443 . -1) (undo-tree-id35444 . -1) (undo-tree-id35445 . -1) (undo-tree-id35446 . -1) (undo-tree-id35447 . -1) (undo-tree-id35448 . -1) 3635 (t 25767 6212 842402 169000)) ((3636 . 3637) (t 25767 6225 878504 739000)) (25767 6225 836580 501000) 0 nil])
([nil nil ((3211 . 3212) (3208 . 3211) 3160) nil (25767 6240 654401 927000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3212 . 3213) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3596) (3212 . 3597)) nil (25767 6240 654396 493000) 0 nil])
([nil nil ((#("  
" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3209) (undo-tree-id35524 . -2) (undo-tree-id35525 . -3) (undo-tree-id35526 . -3) (undo-tree-id35527 . -3) (undo-tree-id35528 . -3) (undo-tree-id35529 . -3) (undo-tree-id35530 . -3) (undo-tree-id35531 . -3) (undo-tree-id35532 . -3) (undo-tree-id35533 . -3) (t 25767 6240 698622 134000)) nil (25767 6245 455179 601000) 0 nil])
([nil nil ((3209 . 3211)) nil (25767 6245 455155 785000) 0 nil])
([nil nil ((3519 . 3520) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3519) (undo-tree-id35534 . -1) (3478 . 3479) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3478) (undo-tree-id35535 . -1) (3471 . 3472) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3471) (undo-tree-id35536 . -1) (3395 . 3396) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3395) (undo-tree-id35537 . -1) (3365 . 3366) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3365) (undo-tree-id35538 . -1) (3323 . 3324) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3323) (undo-tree-id35539 . -1) (3292 . 3293) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3292) (undo-tree-id35540 . -1) (3210 . 3211) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3210) (undo-tree-id35541 . -1) (undo-tree-id35542 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . -3211) (undo-tree-id35543 . 1) (undo-tree-id35544 . -1) 3210 (t 25767 6245 494660 299000)) nil (25767 6250 293255 599000) 0 nil])
([nil nil ((#("we will " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3211) (undo-tree-id35545 . -7) (undo-tree-id35546 . -7) (undo-tree-id35547 . 8) (undo-tree-id35548 . -7) (undo-tree-id35549 . -8) (undo-tree-id35550 . -7) (undo-tree-id35551 . -1) (undo-tree-id35552 . -1) (undo-tree-id35553 . -1) (undo-tree-id35554 . -1) (undo-tree-id35555 . -1) (undo-tree-id35556 . -1) (undo-tree-id35557 . -1) (undo-tree-id35558 . -1) (undo-tree-id35559 . -1) (undo-tree-id35560 . -1) (undo-tree-id35561 . -1) (undo-tree-id35562 . -1) (undo-tree-id35563 . -1) (undo-tree-id35564 . -1) (undo-tree-id35565 . -1) (undo-tree-id35566 . -1) (undo-tree-id35567 . -1) (undo-tree-id35568 . -1) (undo-tree-id35569 . -1) (undo-tree-id35570 . -1) (undo-tree-id35571 . -1) (undo-tree-id35572 . -1) (undo-tree-id35573 . -6) (undo-tree-id35574 . -6) (undo-tree-id35575 . -6) (undo-tree-id35576 . -6) (undo-tree-id35577 . -6) (undo-tree-id35578 . -6) (undo-tree-id35579 . -6) (undo-tree-id35580 . -6) (undo-tree-id35581 . -6) (undo-tree-id35582 . -6) (undo-tree-id35583 . -6) (undo-tree-id35584 . -6) (undo-tree-id35585 . -6) (undo-tree-id35586 . -6) (undo-tree-id35587 . -6) (undo-tree-id35588 . -6) (undo-tree-id35589 . -6) (undo-tree-id35590 . -6) (undo-tree-id35591 . -6) (undo-tree-id35592 . -6) (undo-tree-id35593 . -6) (undo-tree-id35594 . -6) (undo-tree-id35595 . -6) (undo-tree-id35596 . -6) (undo-tree-id35597 . -6) (undo-tree-id35598 . -6) (undo-tree-id35599 . -6) (undo-tree-id35600 . -6) (undo-tree-id35601 . -6) (undo-tree-id35602 . -7) (undo-tree-id35603 . -7) (undo-tree-id35604 . -7) (undo-tree-id35605 . -7) (undo-tree-id35606 . -7) (undo-tree-id35607 . -7) (undo-tree-id35608 . -7) (undo-tree-id35609 . -7) (undo-tree-id35610 . -7) (undo-tree-id35611 . -7) (undo-tree-id35612 . -7) (undo-tree-id35613 . -7) (undo-tree-id35614 . -7) (undo-tree-id35615 . -7) (undo-tree-id35616 . -7) (undo-tree-id35617 . -7) (undo-tree-id35618 . -7) (undo-tree-id35619 . -7) (undo-tree-id35620 . -7) (undo-tree-id35621 . -7) (undo-tree-id35622 . -7) (undo-tree-id35623 . -7) (undo-tree-id35624 . -7) (undo-tree-id35625 . -8) 3218 (t 25767 6250 326698 839000)) nil (25767 6261 116493 665000) 0 nil])
([nil nil ((3211 . 3212) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3211)) nil (25767 6261 116321 615000) 0 nil])
([nil nil ((#("because there are fairly" 0 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3256) (undo-tree-id37358 . -23) (undo-tree-id37359 . -23) (undo-tree-id37360 . -23) (undo-tree-id37361 . -6) (undo-tree-id37362 . -6) (undo-tree-id37363 . -6) (undo-tree-id37364 . -6) (undo-tree-id37365 . -6) (undo-tree-id37366 . -6) (undo-tree-id37367 . -6) (undo-tree-id37368 . -6) (undo-tree-id37369 . -6) (undo-tree-id37370 . -6) (undo-tree-id37371 . -6) (undo-tree-id37372 . -6) (undo-tree-id37373 . -6) (undo-tree-id37374 . -6) (undo-tree-id37375 . -6) (undo-tree-id37376 . -6) (undo-tree-id37377 . -6) (undo-tree-id37378 . -6) (undo-tree-id37379 . -6) (undo-tree-id37380 . -6) (undo-tree-id37381 . -6) (undo-tree-id37382 . -6) (undo-tree-id37383 . -6) (undo-tree-id37384 . -6) (undo-tree-id37385 . -6) (undo-tree-id37386 . -6) (undo-tree-id37387 . -6) (undo-tree-id37388 . -6) (undo-tree-id37389 . -6) (undo-tree-id37390 . -6) (undo-tree-id37391 . -6) (undo-tree-id37392 . -6) (undo-tree-id37393 . -6) (undo-tree-id37394 . -6) (undo-tree-id37395 . -6) (undo-tree-id37396 . -6) (undo-tree-id37397 . -6) (undo-tree-id37398 . -6) (undo-tree-id37399 . -6) (undo-tree-id37400 . -6) (undo-tree-id37401 . -6) (undo-tree-id37402 . -6) (undo-tree-id37403 . -6) (undo-tree-id37404 . -6) (undo-tree-id37405 . -6) (undo-tree-id37406 . -6) (undo-tree-id37407 . -12) (undo-tree-id37408 . -12) (undo-tree-id37409 . -12) (undo-tree-id37410 . -12) (undo-tree-id37411 . -12) (undo-tree-id37412 . -12) (undo-tree-id37413 . -12) (undo-tree-id37414 . -12) (undo-tree-id37415 . -12) (undo-tree-id37416 . -12) (undo-tree-id37417 . -12) (undo-tree-id37418 . -12) (undo-tree-id37419 . -12) (undo-tree-id37420 . -12) (undo-tree-id37421 . -12) (undo-tree-id37422 . -12) (undo-tree-id37423 . -12) (undo-tree-id37424 . -12) (undo-tree-id37425 . -12) (undo-tree-id37426 . -12) (undo-tree-id37427 . -12) (undo-tree-id37428 . -12) (undo-tree-id37429 . -16) (undo-tree-id37430 . -16) (undo-tree-id37431 . -16) (undo-tree-id37432 . -16) (undo-tree-id37433 . -16) (undo-tree-id37434 . -16) (undo-tree-id37435 . -16) (undo-tree-id37436 . -16) (undo-tree-id37437 . -16) (undo-tree-id37438 . -16) (undo-tree-id37439 . -16) (undo-tree-id37440 . -16) (undo-tree-id37441 . -16) (undo-tree-id37442 . -16) (undo-tree-id37443 . -16) (undo-tree-id37444 . -16) (undo-tree-id37445 . -16) (undo-tree-id37446 . -16) (undo-tree-id37447 . -16) (undo-tree-id37448 . -16) (undo-tree-id37449 . -16) (undo-tree-id37450 . -16) (undo-tree-id37451 . -16) (undo-tree-id37452 . -16) (undo-tree-id37453 . -16) (undo-tree-id37454 . -16) (undo-tree-id37455 . -16) (undo-tree-id37456 . -16) (undo-tree-id37457 . -16) (undo-tree-id37458 . -16) (undo-tree-id37459 . -16) (undo-tree-id37460 . -16) (undo-tree-id37461 . -16) (undo-tree-id37462 . -16) (undo-tree-id37463 . -16) (undo-tree-id37464 . -16) (undo-tree-id37465 . -16) (undo-tree-id37466 . -16) (undo-tree-id37467 . -16) (undo-tree-id37468 . -16) (undo-tree-id37469 . -16) (undo-tree-id37470 . -16) (undo-tree-id37471 . -16) (undo-tree-id37472 . -16) (undo-tree-id37473 . -16) (undo-tree-id37474 . -16) (undo-tree-id37475 . -16) (undo-tree-id37476 . -16) (undo-tree-id37477 . -16) (undo-tree-id37478 . -16) (undo-tree-id37479 . -16) (undo-tree-id37480 . -16) (undo-tree-id37481 . -16) (undo-tree-id37482 . -16) (undo-tree-id37483 . -16) (undo-tree-id37484 . -16) (undo-tree-id37485 . -16) (undo-tree-id37486 . -16) (undo-tree-id37487 . -16) (undo-tree-id37488 . -16) (undo-tree-id37489 . -16) (undo-tree-id37490 . -16) (undo-tree-id37491 . -16) (undo-tree-id37492 . -16) (undo-tree-id37493 . -16) (undo-tree-id37494 . -16) (undo-tree-id37495 . -16) (undo-tree-id37496 . -16) (undo-tree-id37497 . -16) (undo-tree-id37498 . -16) (undo-tree-id37499 . -24) (undo-tree-id37500 . -23) (undo-tree-id37501 . -6) (undo-tree-id37502 . -6) (undo-tree-id37503 . -6) (undo-tree-id37504 . -6) (undo-tree-id37505 . -6) (undo-tree-id37506 . -6) (undo-tree-id37507 . -6) (undo-tree-id37508 . -6) (undo-tree-id37509 . -6) (undo-tree-id37510 . -6) (undo-tree-id37511 . -6) (undo-tree-id37512 . -6) (undo-tree-id37513 . -6) (undo-tree-id37514 . -6) (undo-tree-id37515 . -6) (undo-tree-id37516 . -6) (undo-tree-id37517 . -6) (undo-tree-id37518 . -6) (undo-tree-id37519 . -6) (undo-tree-id37520 . -6) (undo-tree-id37521 . -6) (undo-tree-id37522 . -6) (undo-tree-id37523 . -12) (undo-tree-id37524 . -12) (undo-tree-id37525 . -12) (undo-tree-id37526 . -12) (undo-tree-id37527 . -12) (undo-tree-id37528 . -12) (undo-tree-id37529 . -12) (undo-tree-id37530 . -12) (undo-tree-id37531 . -12) (undo-tree-id37532 . -12) (undo-tree-id37533 . -12) (undo-tree-id37534 . -12) (undo-tree-id37535 . -12) (undo-tree-id37536 . -12) (undo-tree-id37537 . -12) (undo-tree-id37538 . -12) (undo-tree-id37539 . -12) (undo-tree-id37540 . -12) (undo-tree-id37541 . -12) (undo-tree-id37542 . -12) (undo-tree-id37543 . -12) (undo-tree-id37544 . -12) (undo-tree-id37545 . -16) (undo-tree-id37546 . -16) (undo-tree-id37547 . -16) (undo-tree-id37548 . -16) (undo-tree-id37549 . -16) (undo-tree-id37550 . -16) (undo-tree-id37551 . -16) (undo-tree-id37552 . -16) (undo-tree-id37553 . -16) (undo-tree-id37554 . -16) (undo-tree-id37555 . -16) (undo-tree-id37556 . -16) (undo-tree-id37557 . -16) (undo-tree-id37558 . -16) (undo-tree-id37559 . -16) (undo-tree-id37560 . -16) (undo-tree-id37561 . -16) (undo-tree-id37562 . -16) (undo-tree-id37563 . -16) (undo-tree-id37564 . -16) (undo-tree-id37565 . -16) (undo-tree-id37566 . -16) (undo-tree-id37567 . -16) (undo-tree-id37568 . -16) (undo-tree-id37569 . -16) (undo-tree-id37570 . -16) (undo-tree-id37571 . -16) (undo-tree-id37572 . -16) (undo-tree-id37573 . -16) (undo-tree-id37574 . -16) (undo-tree-id37575 . -16) (undo-tree-id37576 . -16) (undo-tree-id37577 . -16) (undo-tree-id37578 . -16) (undo-tree-id37579 . -16) (undo-tree-id37580 . -16) (undo-tree-id37581 . -23) (undo-tree-id37582 . -23) (undo-tree-id37583 . -23) (undo-tree-id37584 . -23) (undo-tree-id37585 . -23) (undo-tree-id37586 . -23) (undo-tree-id37587 . -23) (undo-tree-id37588 . -23) (undo-tree-id37589 . -23) (undo-tree-id37590 . -23) (undo-tree-id37591 . -23) (undo-tree-id37592 . -23) (undo-tree-id37593 . -23) (undo-tree-id37594 . -23) (undo-tree-id37595 . -23) (undo-tree-id37596 . -23) (undo-tree-id37597 . -23) (undo-tree-id37598 . -23) (undo-tree-id37599 . -23) (undo-tree-id37600 . -23) (undo-tree-id37601 . -23) (undo-tree-id37602 . -23) (undo-tree-id37603 . -23) (undo-tree-id37604 . -24) 3279 (t 25767 6261 158785 544000)) nil (25767 6310 744703 682000) 0 nil])
([nil nil ((3256 . 3257) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3256) (undo-tree-id37354 . 1) (undo-tree-id37355 . -1) (undo-tree-id37356 . -1) (undo-tree-id37357 . -1)) nil (25767 6310 744561 996000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3256) (undo-tree-id37327 . -1) (undo-tree-id37328 . -1) (undo-tree-id37329 . -1) (undo-tree-id37330 . -1) (undo-tree-id37331 . -1) (undo-tree-id37332 . -1) (undo-tree-id37333 . -1) (undo-tree-id37334 . -1) (undo-tree-id37335 . -1) (undo-tree-id37336 . -1) (undo-tree-id37337 . -1) (undo-tree-id37338 . -1) (undo-tree-id37339 . -1) (undo-tree-id37340 . -1) (undo-tree-id37341 . -1) (undo-tree-id37342 . -1) (undo-tree-id37343 . -1) (undo-tree-id37344 . -1) (undo-tree-id37345 . -1) (undo-tree-id37346 . -1) (undo-tree-id37347 . -1) (undo-tree-id37348 . -1) (undo-tree-id37349 . -1) (undo-tree-id37350 . 1) (undo-tree-id37351 . -1) (undo-tree-id37352 . -1) (undo-tree-id37353 . -1)) nil (25767 6310 744557 810000) 0 nil])
([nil nil ((#("few distinct characters" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3256) (undo-tree-id37246 . -22) (undo-tree-id37247 . -22) (undo-tree-id37248 . 23) (undo-tree-id37249 . -22) (undo-tree-id37250 . -23) (undo-tree-id37251 . -22) (undo-tree-id37252 . -2) (undo-tree-id37253 . -2) (undo-tree-id37254 . -2) (undo-tree-id37255 . -2) (undo-tree-id37256 . -2) (undo-tree-id37257 . -2) (undo-tree-id37258 . -2) (undo-tree-id37259 . -2) (undo-tree-id37260 . -2) (undo-tree-id37261 . -2) (undo-tree-id37262 . -2) (undo-tree-id37263 . -2) (undo-tree-id37264 . -2) (undo-tree-id37265 . -2) (undo-tree-id37266 . -2) (undo-tree-id37267 . -2) (undo-tree-id37268 . -2) (undo-tree-id37269 . -2) (undo-tree-id37270 . -2) (undo-tree-id37271 . -2) (undo-tree-id37272 . -2) (undo-tree-id37273 . -2) (undo-tree-id37274 . -11) (undo-tree-id37275 . -11) (undo-tree-id37276 . -11) (undo-tree-id37277 . -11) (undo-tree-id37278 . -11) (undo-tree-id37279 . -11) (undo-tree-id37280 . -11) (undo-tree-id37281 . -11) (undo-tree-id37282 . -11) (undo-tree-id37283 . -11) (undo-tree-id37284 . -11) (undo-tree-id37285 . -11) (undo-tree-id37286 . -11) (undo-tree-id37287 . -11) (undo-tree-id37288 . -11) (undo-tree-id37289 . -11) (undo-tree-id37290 . -11) (undo-tree-id37291 . -11) (undo-tree-id37292 . -11) (undo-tree-id37293 . -11) (undo-tree-id37294 . -11) (undo-tree-id37295 . -11) (undo-tree-id37296 . -22) (undo-tree-id37297 . -22) (undo-tree-id37298 . -22) (undo-tree-id37299 . -22) (undo-tree-id37300 . -22) (undo-tree-id37301 . -22) (undo-tree-id37302 . -22) (undo-tree-id37303 . -22) (undo-tree-id37304 . -22) (undo-tree-id37305 . -22) (undo-tree-id37306 . -22) (undo-tree-id37307 . -22) (undo-tree-id37308 . -22) (undo-tree-id37309 . -22) (undo-tree-id37310 . -22) (undo-tree-id37311 . -22) (undo-tree-id37312 . -22) (undo-tree-id37313 . -22) (undo-tree-id37314 . -22) (undo-tree-id37315 . -22) (undo-tree-id37316 . -22) (undo-tree-id37317 . -22) (undo-tree-id37318 . -22) (undo-tree-id37319 . -22) (undo-tree-id37320 . -22) (undo-tree-id37321 . -22) (undo-tree-id37322 . -22) (undo-tree-id37323 . -22) (undo-tree-id37324 . -22) (undo-tree-id37325 . -22) (undo-tree-id37326 . -23) 3278) nil (25767 6310 744538 733000) 0 nil])
([nil nil ((3284 . 3285) (3280 . 3284) (3274 . 3280) (3270 . 3274) (3265 . 3270)) nil (25767 6310 744490 632000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3286) (undo-tree-id37244 . -1) (undo-tree-id37245 . -1)) nil (25767 6310 744488 815000) 0 nil])
([nil nil ((3209 . 3559) (#("- Finally, we just need to add prefetching: dataset = dataset.prefetch(1) That’s it! Preparing the dataset was the hardest part. Now let’s create the model. Building and Training the Char-RNN Model To predict the next character based on the previous 100 characters, we can
- Encode each character using a one-hot vector  (only 39 distinct characters)" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 3 43 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 43 44 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 44 73 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 74 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 74 149 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 149 150 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 150 156 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 156 157 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 157 160 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 160 197 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 197 198 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 198 271 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 271 272 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky t) 272 273 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 273 274 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 274 275 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 275 320 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 320 334 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 334 344 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 344 349 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 349 350 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3209) (undo-tree-id35817 . -350) (undo-tree-id35818 . -350) (undo-tree-id35819 . -320) (undo-tree-id35820 . -320) (undo-tree-id35821 . 30) (undo-tree-id35822 . 1) (undo-tree-id35823 . -341) (undo-tree-id35824 . -275) (undo-tree-id35825 . -275) (undo-tree-id35826 . -275) (undo-tree-id35827 . -275) (undo-tree-id35828 . -275) (undo-tree-id35829 . -275) (undo-tree-id35830 . -275) (undo-tree-id35831 . -275) (undo-tree-id35832 . -275) (undo-tree-id35833 . -275) (undo-tree-id35834 . -275) (undo-tree-id35835 . -275) (undo-tree-id35836 . -275) (undo-tree-id35837 . -275) (undo-tree-id35838 . -275) (undo-tree-id35839 . -275) (undo-tree-id35840 . -275) (undo-tree-id35841 . -275) (undo-tree-id35842 . -275) (undo-tree-id35843 . -275) (undo-tree-id35844 . -275) (undo-tree-id35845 . -275) (undo-tree-id35846 . -275) (undo-tree-id35847 . -275) (undo-tree-id35848 . -275) (undo-tree-id35849 . -275) (undo-tree-id35850 . -275) (undo-tree-id35851 . -275) (undo-tree-id35852 . -275) (undo-tree-id35853 . -275) (undo-tree-id35854 . -275) (undo-tree-id35855 . -275) (undo-tree-id35856 . -275) (undo-tree-id35857 . -275) (undo-tree-id35858 . -275) (undo-tree-id35859 . -275) (undo-tree-id35860 . -275) (undo-tree-id35861 . -275) (undo-tree-id35862 . -275) (undo-tree-id35863 . -275) (undo-tree-id35864 . -275) (undo-tree-id35865 . -275) (undo-tree-id35866 . -275) (undo-tree-id35867 . -275) (undo-tree-id35868 . -275) (undo-tree-id35869 . -275) (undo-tree-id35870 . -275) (undo-tree-id35871 . -275) (undo-tree-id35872 . -275) (undo-tree-id35873 . -275) (undo-tree-id35874 . -275) (undo-tree-id35875 . -275) (undo-tree-id35876 . -275) (undo-tree-id35877 . -275) (undo-tree-id35878 . -275) (undo-tree-id35879 . -275) (undo-tree-id35880 . -275) (undo-tree-id35881 . -275) (undo-tree-id35882 . -275) (undo-tree-id35883 . -275) (undo-tree-id35884 . -275) (undo-tree-id35885 . -275) (undo-tree-id35886 . -275) (undo-tree-id35887 . -275) (undo-tree-id35888 . -275) (undo-tree-id35889 . -275) (undo-tree-id35890 . -275) (undo-tree-id35891 . -275) (undo-tree-id35892 . -275) (undo-tree-id35893 . -275) (undo-tree-id35894 . -275) (undo-tree-id35895 . -275) (undo-tree-id35896 . -275) (undo-tree-id35897 . -344) (undo-tree-id35898 . -350) (undo-tree-id35899 . -275) (undo-tree-id35900 . -275) (undo-tree-id35901 . -275) (undo-tree-id35902 . -275) (undo-tree-id35903 . -275) (undo-tree-id35904 . -275) (undo-tree-id35905 . -275) (undo-tree-id35906 . -275) (undo-tree-id35907 . -275) (undo-tree-id35908 . -275) (undo-tree-id35909 . -275) (undo-tree-id35910 . -275) (undo-tree-id35911 . -275) (undo-tree-id35912 . -275) (undo-tree-id35913 . -275) (undo-tree-id35914 . -275) (undo-tree-id35915 . -275) (undo-tree-id35916 . -275) (undo-tree-id35917 . -275) (undo-tree-id35918 . -275) (undo-tree-id35919 . -275) (undo-tree-id35920 . -275) (undo-tree-id35921 . -275) (undo-tree-id35922 . -275) (undo-tree-id35923 . -275) (undo-tree-id35924 . -275) (undo-tree-id35925 . -275) (undo-tree-id35926 . -275) (undo-tree-id35927 . -275) (undo-tree-id35928 . -275) (undo-tree-id35929 . -275) (undo-tree-id35930 . -275) (undo-tree-id35931 . -275) (undo-tree-id35932 . -275) (undo-tree-id35933 . -275) (undo-tree-id35934 . -275) (undo-tree-id35935 . -275) (undo-tree-id35936 . -275) (undo-tree-id35937 . -275) (undo-tree-id35938 . -275) (undo-tree-id35939 . -275) (undo-tree-id35940 . -275) (undo-tree-id35941 . -275) (undo-tree-id35942 . -275) (undo-tree-id35943 . -275) (undo-tree-id35944 . -275) (undo-tree-id35945 . -275) (undo-tree-id35946 . -275) (undo-tree-id35947 . -275) (undo-tree-id35948 . -275) (undo-tree-id35949 . -275) (undo-tree-id35950 . -275) (undo-tree-id35951 . -275) (undo-tree-id35952 . -280) (undo-tree-id35953 . -280) (undo-tree-id35954 . -280) (undo-tree-id35955 . -280) (undo-tree-id35956 . -280) (undo-tree-id35957 . -280) (undo-tree-id35958 . -280) (undo-tree-id35959 . -280) (undo-tree-id35960 . -280) (undo-tree-id35961 . -280) (undo-tree-id35962 . -280) (undo-tree-id35963 . -280) (undo-tree-id35964 . -280) (undo-tree-id35965 . -280) (undo-tree-id35966 . -280) (undo-tree-id35967 . -285) (undo-tree-id35968 . -285) (undo-tree-id35969 . -285) (undo-tree-id35970 . -285) (undo-tree-id35971 . -285) (undo-tree-id35972 . -285) (undo-tree-id35973 . -285) (undo-tree-id35974 . -285) (undo-tree-id35975 . -285) (undo-tree-id35976 . -285) (undo-tree-id35977 . -285) (undo-tree-id35978 . -285) (undo-tree-id35979 . -285) (undo-tree-id35980 . -285) (undo-tree-id35981 . -285) (undo-tree-id35982 . -295) (undo-tree-id35983 . -295) (undo-tree-id35984 . -295) (undo-tree-id35985 . -295) (undo-tree-id35986 . -295) (undo-tree-id35987 . -295) (undo-tree-id35988 . -295) (undo-tree-id35989 . -295) (undo-tree-id35990 . -295) (undo-tree-id35991 . -295) (undo-tree-id35992 . -295) (undo-tree-id35993 . -295) (undo-tree-id35994 . -295) (undo-tree-id35995 . -295) (undo-tree-id35996 . -295) (undo-tree-id35997 . -301) (undo-tree-id35998 . -301) (undo-tree-id35999 . -301) (undo-tree-id36000 . -301) (undo-tree-id36001 . -301) (undo-tree-id36002 . -301) (undo-tree-id36003 . -301) (undo-tree-id36004 . -301) (undo-tree-id36005 . -301) (undo-tree-id36006 . -301) (undo-tree-id36007 . -301) (undo-tree-id36008 . -301) (undo-tree-id36009 . -301) (undo-tree-id36010 . -301) (undo-tree-id36011 . -301) (undo-tree-id36012 . -303) (undo-tree-id36013 . -303) (undo-tree-id36014 . -303) (undo-tree-id36015 . -303) (undo-tree-id36016 . -303) (undo-tree-id36017 . -303) (undo-tree-id36018 . -303) (undo-tree-id36019 . -303) (undo-tree-id36020 . -303) (undo-tree-id36021 . -303) (undo-tree-id36022 . -303) (undo-tree-id36023 . -303) (undo-tree-id36024 . -303) (undo-tree-id36025 . -303) (undo-tree-id36026 . -303) (undo-tree-id36027 . -307) (undo-tree-id36028 . -307) (undo-tree-id36029 . -307) (undo-tree-id36030 . -307) (undo-tree-id36031 . -307) (undo-tree-id36032 . -307) (undo-tree-id36033 . -307) (undo-tree-id36034 . -307) (undo-tree-id36035 . -307) (undo-tree-id36036 . -307) (undo-tree-id36037 . -307) (undo-tree-id36038 . -307) (undo-tree-id36039 . -307) (undo-tree-id36040 . -307) (undo-tree-id36041 . -307) (undo-tree-id36042 . -308) (undo-tree-id36043 . -308) (undo-tree-id36044 . -308) (undo-tree-id36045 . -308) (undo-tree-id36046 . -308) (undo-tree-id36047 . -308) (undo-tree-id36048 . -308) (undo-tree-id36049 . -308) (undo-tree-id36050 . -308) (undo-tree-id36051 . -308) (undo-tree-id36052 . -308) (undo-tree-id36053 . -308) (undo-tree-id36054 . -308) (undo-tree-id36055 . -308) (undo-tree-id36056 . -308) (undo-tree-id36057 . -311) (undo-tree-id36058 . -311) (undo-tree-id36059 . -311) (undo-tree-id36060 . -311) (undo-tree-id36061 . -311) (undo-tree-id36062 . -311) (undo-tree-id36063 . -311) (undo-tree-id36064 . -311) (undo-tree-id36065 . -311) (undo-tree-id36066 . -311) (undo-tree-id36067 . -311) (undo-tree-id36068 . -311) (undo-tree-id36069 . -311) (undo-tree-id36070 . -311) (undo-tree-id36071 . -311) (undo-tree-id36072 . -318) (undo-tree-id36073 . -318) (undo-tree-id36074 . -318) (undo-tree-id36075 . -318) (undo-tree-id36076 . -318) (undo-tree-id36077 . -318) (undo-tree-id36078 . -318) (undo-tree-id36079 . -318) (undo-tree-id36080 . -318) (undo-tree-id36081 . -318) (undo-tree-id36082 . -318) (undo-tree-id36083 . -318) (undo-tree-id36084 . -318) (undo-tree-id36085 . -318) (undo-tree-id36086 . -318) (undo-tree-id36087 . -320) (undo-tree-id36088 . -320) (undo-tree-id36089 . -320) (undo-tree-id36090 . -320) (undo-tree-id36091 . -320) (undo-tree-id36092 . -320) (undo-tree-id36093 . -320) (undo-tree-id36094 . -320) (undo-tree-id36095 . -320) (undo-tree-id36096 . -320) (undo-tree-id36097 . -320) (undo-tree-id36098 . -320) (undo-tree-id36099 . -320) (undo-tree-id36100 . -320) (undo-tree-id36101 . -320) (undo-tree-id36102 . -320) (undo-tree-id36103 . -320) (undo-tree-id36104 . -320) (undo-tree-id36105 . -320) (undo-tree-id36106 . -320) (undo-tree-id36107 . -320) (undo-tree-id36108 . -320) (undo-tree-id36109 . -320) (undo-tree-id36110 . -320) (undo-tree-id36111 . -320) (undo-tree-id36112 . -320) (undo-tree-id36113 . -320) (undo-tree-id36114 . -320) (undo-tree-id36115 . -320) (undo-tree-id36116 . -320) (undo-tree-id36117 . -320) (undo-tree-id36118 . -320) (undo-tree-id36119 . -320) (undo-tree-id36120 . -320) (undo-tree-id36121 . -320) (undo-tree-id36122 . -320) (undo-tree-id36123 . -320) (undo-tree-id36124 . -320) (undo-tree-id36125 . -320) (undo-tree-id36126 . -320) (undo-tree-id36127 . -320) (undo-tree-id36128 . -320) (undo-tree-id36129 . -320) (undo-tree-id36130 . -320) (undo-tree-id36131 . -320) (undo-tree-id36132 . -320) (undo-tree-id36133 . -320) (undo-tree-id36134 . -320) (undo-tree-id36135 . -320) (undo-tree-id36136 . -320) (undo-tree-id36137 . -320) (undo-tree-id36138 . -320) (undo-tree-id36139 . -320) (undo-tree-id36140 . -320) (undo-tree-id36141 . -320) (undo-tree-id36142 . -320) (undo-tree-id36143 . -320) (undo-tree-id36144 . -320) (undo-tree-id36145 . -320) (undo-tree-id36146 . -320) (undo-tree-id36147 . -320) (undo-tree-id36148 . -320) (undo-tree-id36149 . -320) (undo-tree-id36150 . -320) (undo-tree-id36151 . -320) (undo-tree-id36152 . -320) (undo-tree-id36153 . -320) (undo-tree-id36154 . -320) (undo-tree-id36155 . -320) (undo-tree-id36156 . -320) (undo-tree-id36157 . -320) (undo-tree-id36158 . -320) (undo-tree-id36159 . -320) (undo-tree-id36160 . -320) (undo-tree-id36161 . -320) (undo-tree-id36162 . -320) (undo-tree-id36163 . -320) (undo-tree-id36164 . -320) (undo-tree-id36165 . -320) (undo-tree-id36166 . -320) (undo-tree-id36167 . -320) (undo-tree-id36168 . -320) (undo-tree-id36169 . -320) (undo-tree-id36170 . -320) (undo-tree-id36171 . -320) (undo-tree-id36172 . -320) (undo-tree-id36173 . -320) (undo-tree-id36174 . -320) (undo-tree-id36175 . -320) (undo-tree-id36176 . -320) (undo-tree-id36177 . -320) (undo-tree-id36178 . -320) (undo-tree-id36179 . -320) (undo-tree-id36180 . -320) (undo-tree-id36181 . -320) (undo-tree-id36182 . -320) (undo-tree-id36183 . -320) (undo-tree-id36184 . -320) (undo-tree-id36185 . -320) (undo-tree-id36186 . -320) (undo-tree-id36187 . -320) (undo-tree-id36188 . -320) (undo-tree-id36189 . -320) (undo-tree-id36190 . -320) (undo-tree-id36191 . -320) (undo-tree-id36192 . -320) (undo-tree-id36193 . -320) (undo-tree-id36194 . -320) (undo-tree-id36195 . -320) (undo-tree-id36196 . -320) (undo-tree-id36197 . -320) (undo-tree-id36198 . -320) (undo-tree-id36199 . -320) (undo-tree-id36200 . -320) (undo-tree-id36201 . -320) (undo-tree-id36202 . -320) (undo-tree-id36203 . -320) (undo-tree-id36204 . -320) (undo-tree-id36205 . -320) (undo-tree-id36206 . -320) (undo-tree-id36207 . -320) (undo-tree-id36208 . -320) (undo-tree-id36209 . -320) (undo-tree-id36210 . -320) (undo-tree-id36211 . -320) (undo-tree-id36212 . -320) (undo-tree-id36213 . -320) (undo-tree-id36214 . -320) (undo-tree-id36215 . -320) (undo-tree-id36216 . -320) (undo-tree-id36217 . -320) (undo-tree-id36218 . -320) (undo-tree-id36219 . -320) (undo-tree-id36220 . -320) (undo-tree-id36221 . -320) (undo-tree-id36222 . -320) (undo-tree-id36223 . -320) (undo-tree-id36224 . -320) (undo-tree-id36225 . -275) (undo-tree-id36226 . -275) (undo-tree-id36227 . -275) (undo-tree-id36228 . -275) (undo-tree-id36229 . -275) (undo-tree-id36230 . -275) (undo-tree-id36231 . -275) (undo-tree-id36232 . -275) (undo-tree-id36233 . -275) (undo-tree-id36234 . -275) (undo-tree-id36235 . -275) (undo-tree-id36236 . -275) (undo-tree-id36237 . -275) (undo-tree-id36238 . -275) (undo-tree-id36239 . -275) (undo-tree-id36240 . -275) (undo-tree-id36241 . -275) (undo-tree-id36242 . -275) (undo-tree-id36243 . -275) (undo-tree-id36244 . -275) (undo-tree-id36245 . -275) (undo-tree-id36246 . -275) (undo-tree-id36247 . -275) (undo-tree-id36248 . -275) (undo-tree-id36249 . -275) (undo-tree-id36250 . -275) (undo-tree-id36251 . -275) (undo-tree-id36252 . -275) (undo-tree-id36253 . -275) (undo-tree-id36254 . -275) (undo-tree-id36255 . -275) (undo-tree-id36256 . -275) (undo-tree-id36257 . -275) (undo-tree-id36258 . -275) (undo-tree-id36259 . -275) (undo-tree-id36260 . -275) (undo-tree-id36261 . -320) (undo-tree-id36262 . -320) (undo-tree-id36263 . -320) (undo-tree-id36264 . -320) (undo-tree-id36265 . -320) (undo-tree-id36266 . -320) (undo-tree-id36267 . -320) (undo-tree-id36268 . -320) (undo-tree-id36269 . -320) (undo-tree-id36270 . -320) (undo-tree-id36271 . -320) (undo-tree-id36272 . -320) (undo-tree-id36273 . -320) (undo-tree-id36274 . -320) (undo-tree-id36275 . -320) (undo-tree-id36276 . -320) (undo-tree-id36277 . -320) (undo-tree-id36278 . -320) (undo-tree-id36279 . -320) (undo-tree-id36280 . -320) (undo-tree-id36281 . -320) (undo-tree-id36282 . -320) (undo-tree-id36283 . -320) (undo-tree-id36284 . -320) (undo-tree-id36285 . -320) (undo-tree-id36286 . -320) (undo-tree-id36287 . -320) (undo-tree-id36288 . -320) (undo-tree-id36289 . -320) (undo-tree-id36290 . -320) (undo-tree-id36291 . -320) (undo-tree-id36292 . -320) (undo-tree-id36293 . -320) (undo-tree-id36294 . -320) (undo-tree-id36295 . -320) (undo-tree-id36296 . -320) (undo-tree-id36297 . -320) (undo-tree-id36298 . -320) (undo-tree-id36299 . -320) (undo-tree-id36300 . -320) (undo-tree-id36301 . -320) (undo-tree-id36302 . -320) (undo-tree-id36303 . -320) (undo-tree-id36304 . -320) (undo-tree-id36305 . -320) (undo-tree-id36306 . -320) (undo-tree-id36307 . -320) (undo-tree-id36308 . -320) (undo-tree-id36309 . -320) (undo-tree-id36310 . -320) (undo-tree-id36311 . -320) (undo-tree-id36312 . -320) (undo-tree-id36313 . -320) (undo-tree-id36314 . -320) (undo-tree-id36315 . -320) (undo-tree-id36316 . -320) (undo-tree-id36317 . -320) (undo-tree-id36318 . -320) (undo-tree-id36319 . -320) (undo-tree-id36320 . -320) (undo-tree-id36321 . -320) (undo-tree-id36322 . -320) (undo-tree-id36323 . -320) (undo-tree-id36324 . -320) (undo-tree-id36325 . -320) (undo-tree-id36326 . -320) (undo-tree-id36327 . -320) (undo-tree-id36328 . -320) (undo-tree-id36329 . -320) (undo-tree-id36330 . -320) (undo-tree-id36331 . -320) (undo-tree-id36332 . -320) (undo-tree-id36333 . -320) (undo-tree-id36334 . -320) (undo-tree-id36335 . -320) (undo-tree-id36336 . -320) (undo-tree-id36337 . -320) (undo-tree-id36338 . -320) (undo-tree-id36339 . -320) (undo-tree-id36340 . -320) (undo-tree-id36341 . -320) (undo-tree-id36342 . -320) (undo-tree-id36343 . -320) (undo-tree-id36344 . -320) (undo-tree-id36345 . -320) (undo-tree-id36346 . -320) (undo-tree-id36347 . -320) (undo-tree-id36348 . -320) (undo-tree-id36349 . -320) (undo-tree-id36350 . -320) (undo-tree-id36351 . -320) (undo-tree-id36352 . -320) (undo-tree-id36353 . -320) (undo-tree-id36354 . -320) (undo-tree-id36355 . -320) (undo-tree-id36356 . -320) (undo-tree-id36357 . -320) (undo-tree-id36358 . -320) (undo-tree-id36359 . -320) (undo-tree-id36360 . -320) (undo-tree-id36361 . -320) (undo-tree-id36362 . -320) (undo-tree-id36363 . -320) (undo-tree-id36364 . -320) (undo-tree-id36365 . -320) (undo-tree-id36366 . -320) (undo-tree-id36367 . -320) (undo-tree-id36368 . -320) (undo-tree-id36369 . -320) (undo-tree-id36370 . -320) (undo-tree-id36371 . -320) (undo-tree-id36372 . -320) (undo-tree-id36373 . -320) (undo-tree-id36374 . -320) (undo-tree-id36375 . -320) (undo-tree-id36376 . -320) (undo-tree-id36377 . -320) (undo-tree-id36378 . -320) (undo-tree-id36379 . -320) (undo-tree-id36380 . -320) (undo-tree-id36381 . -320) (undo-tree-id36382 . -320) (undo-tree-id36383 . -320) (undo-tree-id36384 . -320) (undo-tree-id36385 . -320) (undo-tree-id36386 . -320) (undo-tree-id36387 . -320) (undo-tree-id36388 . -320) (undo-tree-id36389 . -320) (undo-tree-id36390 . -320) (undo-tree-id36391 . -320) (undo-tree-id36392 . -320) (undo-tree-id36393 . -320) (undo-tree-id36394 . -320) (undo-tree-id36395 . -320) (undo-tree-id36396 . -320) (undo-tree-id36397 . -320) (undo-tree-id36398 . -320) (undo-tree-id36399 . -320) (undo-tree-id36400 . -320) (undo-tree-id36401 . -320) (undo-tree-id36402 . -320) (undo-tree-id36403 . -320) (undo-tree-id36404 . -320) (undo-tree-id36405 . -320) (undo-tree-id36406 . -320) (undo-tree-id36407 . -320) (undo-tree-id36408 . -320) (undo-tree-id36409 . -320) (undo-tree-id36410 . -320) (undo-tree-id36411 . -320) (undo-tree-id36412 . -320) (undo-tree-id36413 . -320) (undo-tree-id36414 . -320) (undo-tree-id36415 . -320) (undo-tree-id36416 . -320) (undo-tree-id36417 . -320) (undo-tree-id36418 . -320) (undo-tree-id36419 . -320) (undo-tree-id36420 . -320) (undo-tree-id36421 . -320) (undo-tree-id36422 . -320) (undo-tree-id36423 . -320) (undo-tree-id36424 . -320) (undo-tree-id36425 . -320) (undo-tree-id36426 . -320) (undo-tree-id36427 . -320) (undo-tree-id36428 . -320) (undo-tree-id36429 . -320) (undo-tree-id36430 . -320) (undo-tree-id36431 . -320) (undo-tree-id36432 . -320) (undo-tree-id36433 . -320) (undo-tree-id36434 . -320) (undo-tree-id36435 . -320) (undo-tree-id36436 . -320) (undo-tree-id36437 . -320) (undo-tree-id36438 . -320) (undo-tree-id36439 . -320) (undo-tree-id36440 . -320) (undo-tree-id36441 . -320) (undo-tree-id36442 . -320) (undo-tree-id36443 . -320) (undo-tree-id36444 . -320) (undo-tree-id36445 . -320) (undo-tree-id36446 . -320) (undo-tree-id36447 . -320) (undo-tree-id36448 . -320) (undo-tree-id36449 . -320) (undo-tree-id36450 . -320) (undo-tree-id36451 . -320) (undo-tree-id36452 . -320) (undo-tree-id36453 . -320) (undo-tree-id36454 . -320) (undo-tree-id36455 . -320) (undo-tree-id36456 . -320) (undo-tree-id36457 . -320) (undo-tree-id36458 . -320) (undo-tree-id36459 . -320) (undo-tree-id36460 . -320) (undo-tree-id36461 . -320) (undo-tree-id36462 . -320) (undo-tree-id36463 . -320) (undo-tree-id36464 . -320) (undo-tree-id36465 . -320) (undo-tree-id36466 . -320) (undo-tree-id36467 . -320) (undo-tree-id36468 . -320) (undo-tree-id36469 . -320) (undo-tree-id36470 . -320) (undo-tree-id36471 . -320) (undo-tree-id36472 . -320) (undo-tree-id36473 . -320) (undo-tree-id36474 . -320) (undo-tree-id36475 . -320) (undo-tree-id36476 . -320) (undo-tree-id36477 . -320) (undo-tree-id36478 . -320) (undo-tree-id36479 . -320) (undo-tree-id36480 . -320) (undo-tree-id36481 . -320) (undo-tree-id36482 . -320) (undo-tree-id36483 . -320) (undo-tree-id36484 . -320) (undo-tree-id36485 . -320) (undo-tree-id36486 . -320) (undo-tree-id36487 . -320) (undo-tree-id36488 . -320) (undo-tree-id36489 . -320) (undo-tree-id36490 . -320) (undo-tree-id36491 . -320) (undo-tree-id36492 . -320) (undo-tree-id36493 . -320) (undo-tree-id36494 . -320) (undo-tree-id36495 . -320) (undo-tree-id36496 . -320) (undo-tree-id36497 . -320) (undo-tree-id36498 . -320) (undo-tree-id36499 . -320) (undo-tree-id36500 . -320) (undo-tree-id36501 . -320) (undo-tree-id36502 . -320) (undo-tree-id36503 . -320) (undo-tree-id36504 . -320) (undo-tree-id36505 . -320) (undo-tree-id36506 . -320) (undo-tree-id36507 . -320) (undo-tree-id36508 . -320) (undo-tree-id36509 . -320) (undo-tree-id36510 . -320) (undo-tree-id36511 . -320) (undo-tree-id36512 . -320) (undo-tree-id36513 . -320) (undo-tree-id36514 . -320) (undo-tree-id36515 . -320) (undo-tree-id36516 . -320) (undo-tree-id36517 . -320) (undo-tree-id36518 . -320) (undo-tree-id36519 . -320) (undo-tree-id36520 . -320) (undo-tree-id36521 . -320) (undo-tree-id36522 . -320) (undo-tree-id36523 . -320) (undo-tree-id36524 . -320) (undo-tree-id36525 . -320) (undo-tree-id36526 . -320) (undo-tree-id36527 . -320) (undo-tree-id36528 . -320) (undo-tree-id36529 . -320) (undo-tree-id36530 . -320) (undo-tree-id36531 . -320) (undo-tree-id36532 . -320) (undo-tree-id36533 . -320) (undo-tree-id36534 . -320) (undo-tree-id36535 . -320) (undo-tree-id36536 . -320) (undo-tree-id36537 . -320) (undo-tree-id36538 . -320) (undo-tree-id36539 . -320) (undo-tree-id36540 . -320) (undo-tree-id36541 . -320) (undo-tree-id36542 . -320) (undo-tree-id36543 . -320) (undo-tree-id36544 . -320) (undo-tree-id36545 . -320) (undo-tree-id36546 . -320) (undo-tree-id36547 . -320) (undo-tree-id36548 . -320) (undo-tree-id36549 . -320) (undo-tree-id36550 . -320) (undo-tree-id36551 . -320) (undo-tree-id36552 . -320) (undo-tree-id36553 . -320) (undo-tree-id36554 . -320) (undo-tree-id36555 . -320) (undo-tree-id36556 . -320) (undo-tree-id36557 . -320) (undo-tree-id36558 . -320) (undo-tree-id36559 . -320) (undo-tree-id36560 . -320) (undo-tree-id36561 . -320) (undo-tree-id36562 . -320) (undo-tree-id36563 . -320) (undo-tree-id36564 . -320) (undo-tree-id36565 . -320) (undo-tree-id36566 . -320) (undo-tree-id36567 . -320) (undo-tree-id36568 . -320) (undo-tree-id36569 . -320) (undo-tree-id36570 . -320) (undo-tree-id36571 . -320) (undo-tree-id36572 . -320) (undo-tree-id36573 . -320) (undo-tree-id36574 . -320) (undo-tree-id36575 . -320) (undo-tree-id36576 . -320) (undo-tree-id36577 . -320) (undo-tree-id36578 . -320) (undo-tree-id36579 . -320) (undo-tree-id36580 . -320) (undo-tree-id36581 . -320) (undo-tree-id36582 . -320) (undo-tree-id36583 . -320) (undo-tree-id36584 . -320) (undo-tree-id36585 . -320) (undo-tree-id36586 . -320) (undo-tree-id36587 . -320) (undo-tree-id36588 . -320) (undo-tree-id36589 . -320) (undo-tree-id36590 . -320) (undo-tree-id36591 . -320) (undo-tree-id36592 . -320) (undo-tree-id36593 . -320) (undo-tree-id36594 . -320) (undo-tree-id36595 . -320) (undo-tree-id36596 . -320) (undo-tree-id36597 . -320) (undo-tree-id36598 . -320) (undo-tree-id36599 . -320) (undo-tree-id36600 . -320) (undo-tree-id36601 . -320) (undo-tree-id36602 . -320) (undo-tree-id36603 . -320) (undo-tree-id36604 . -320) (undo-tree-id36605 . -320) (undo-tree-id36606 . -320) (undo-tree-id36607 . -320) (undo-tree-id36608 . -320) (undo-tree-id36609 . -320) (undo-tree-id36610 . -320) (undo-tree-id36611 . -320) (undo-tree-id36612 . -320) (undo-tree-id36613 . -320) (undo-tree-id36614 . -320) (undo-tree-id36615 . -320) (undo-tree-id36616 . -320) (undo-tree-id36617 . -320) (undo-tree-id36618 . -320) (undo-tree-id36619 . -320) (undo-tree-id36620 . -320) (undo-tree-id36621 . -320) (undo-tree-id36622 . -320) (undo-tree-id36623 . -320) (undo-tree-id36624 . -320) (undo-tree-id36625 . -320) (undo-tree-id36626 . -320) (undo-tree-id36627 . -320) (undo-tree-id36628 . -320) (undo-tree-id36629 . -320) (undo-tree-id36630 . -320) (undo-tree-id36631 . -320) (undo-tree-id36632 . -320) (undo-tree-id36633 . -320) (undo-tree-id36634 . -320) (undo-tree-id36635 . -320) (undo-tree-id36636 . -320) (undo-tree-id36637 . -320) (undo-tree-id36638 . -320) (undo-tree-id36639 . -320) (undo-tree-id36640 . -320) (undo-tree-id36641 . -320) (undo-tree-id36642 . -320) (undo-tree-id36643 . -320) (undo-tree-id36644 . -320) (undo-tree-id36645 . -320) (undo-tree-id36646 . -320) (undo-tree-id36647 . -320) (undo-tree-id36648 . -320) (undo-tree-id36649 . -320) (undo-tree-id36650 . -320) (undo-tree-id36651 . -320) (undo-tree-id36652 . -320) (undo-tree-id36653 . -320) (undo-tree-id36654 . -320) (undo-tree-id36655 . -320) (undo-tree-id36656 . -320) (undo-tree-id36657 . -320) (undo-tree-id36658 . -320) (undo-tree-id36659 . -320) (undo-tree-id36660 . -320) (undo-tree-id36661 . -320) (undo-tree-id36662 . -320) (undo-tree-id36663 . -320) (undo-tree-id36664 . -320) (undo-tree-id36665 . -320) (undo-tree-id36666 . -320) (undo-tree-id36667 . -320) (undo-tree-id36668 . -320) (undo-tree-id36669 . -320) (undo-tree-id36670 . -320) (undo-tree-id36671 . -321) (undo-tree-id36672 . -321) (undo-tree-id36673 . -321) (undo-tree-id36674 . -321) (undo-tree-id36675 . -321) (undo-tree-id36676 . -321) (undo-tree-id36677 . -321) (undo-tree-id36678 . -321) (undo-tree-id36679 . -321) (undo-tree-id36680 . -321) (undo-tree-id36681 . -321) (undo-tree-id36682 . -321) (undo-tree-id36683 . -321) (undo-tree-id36684 . -321) (undo-tree-id36685 . -321) (undo-tree-id36686 . -325) (undo-tree-id36687 . -325) (undo-tree-id36688 . -325) (undo-tree-id36689 . -325) (undo-tree-id36690 . -325) (undo-tree-id36691 . -325) (undo-tree-id36692 . -325) (undo-tree-id36693 . -325) (undo-tree-id36694 . -325) (undo-tree-id36695 . -325) (undo-tree-id36696 . -325) (undo-tree-id36697 . -325) (undo-tree-id36698 . -325) (undo-tree-id36699 . -325) (undo-tree-id36700 . -325) (undo-tree-id36701 . -328) (undo-tree-id36702 . -328) (undo-tree-id36703 . -328) (undo-tree-id36704 . -328) (undo-tree-id36705 . -328) (undo-tree-id36706 . -328) (undo-tree-id36707 . -328) (undo-tree-id36708 . -328) (undo-tree-id36709 . -328) (undo-tree-id36710 . -328) (undo-tree-id36711 . -328) (undo-tree-id36712 . -328) (undo-tree-id36713 . -328) (undo-tree-id36714 . -328) (undo-tree-id36715 . -328) (undo-tree-id36716 . -329) (undo-tree-id36717 . -329) (undo-tree-id36718 . -329) (undo-tree-id36719 . -329) (undo-tree-id36720 . -329) (undo-tree-id36721 . -329) (undo-tree-id36722 . -329) (undo-tree-id36723 . -329) (undo-tree-id36724 . -329) (undo-tree-id36725 . -329) (undo-tree-id36726 . -329) (undo-tree-id36727 . -329) (undo-tree-id36728 . -329) (undo-tree-id36729 . -329) (undo-tree-id36730 . -329) (undo-tree-id36731 . -329) (undo-tree-id36732 . -329) (undo-tree-id36733 . -330) (undo-tree-id36734 . -330) (undo-tree-id36735 . -330) (undo-tree-id36736 . -330) (undo-tree-id36737 . -330) (undo-tree-id36738 . -330) (undo-tree-id36739 . -330) (undo-tree-id36740 . -330) (undo-tree-id36741 . -330) (undo-tree-id36742 . -330) (undo-tree-id36743 . -330) (undo-tree-id36744 . -330) (undo-tree-id36745 . -330) (undo-tree-id36746 . -330) (undo-tree-id36747 . -330) (undo-tree-id36748 . -330) (undo-tree-id36749 . -330) (undo-tree-id36750 . -330) (undo-tree-id36751 . -330) (undo-tree-id36752 . -330) (undo-tree-id36753 . -330) (undo-tree-id36754 . -330) (undo-tree-id36755 . -330) (undo-tree-id36756 . -331) (undo-tree-id36757 . -331) (undo-tree-id36758 . -331) (undo-tree-id36759 . -331) (undo-tree-id36760 . -331) (undo-tree-id36761 . -331) (undo-tree-id36762 . -331) (undo-tree-id36763 . -331) (undo-tree-id36764 . -331) (undo-tree-id36765 . -331) (undo-tree-id36766 . -331) (undo-tree-id36767 . -331) (undo-tree-id36768 . -331) (undo-tree-id36769 . -331) (undo-tree-id36770 . -331) (undo-tree-id36771 . -331) (undo-tree-id36772 . -331) (undo-tree-id36773 . -331) (undo-tree-id36774 . -331) (undo-tree-id36775 . -331) (undo-tree-id36776 . -331) (undo-tree-id36777 . -331) (undo-tree-id36778 . -331) (undo-tree-id36779 . -331) (undo-tree-id36780 . -331) (undo-tree-id36781 . -331) (undo-tree-id36782 . -331) (undo-tree-id36783 . -331) (undo-tree-id36784 . -331) (undo-tree-id36785 . -331) (undo-tree-id36786 . -331) (undo-tree-id36787 . -331) (undo-tree-id36788 . -331) (undo-tree-id36789 . -331) (undo-tree-id36790 . -331) (undo-tree-id36791 . -331) (undo-tree-id36792 . -331) (undo-tree-id36793 . -331) (undo-tree-id36794 . -332) (undo-tree-id36795 . -332) (undo-tree-id36796 . -332) (undo-tree-id36797 . -332) (undo-tree-id36798 . -332) (undo-tree-id36799 . -332) (undo-tree-id36800 . -332) (undo-tree-id36801 . -332) (undo-tree-id36802 . -332) (undo-tree-id36803 . -332) (undo-tree-id36804 . -332) (undo-tree-id36805 . -332) (undo-tree-id36806 . -332) (undo-tree-id36807 . -332) (undo-tree-id36808 . -332) (undo-tree-id36809 . -332) (undo-tree-id36810 . -332) (undo-tree-id36811 . -332) (undo-tree-id36812 . -332) (undo-tree-id36813 . -332) (undo-tree-id36814 . -332) (undo-tree-id36815 . -332) (undo-tree-id36816 . -332) (undo-tree-id36817 . -332) (undo-tree-id36818 . -333) (undo-tree-id36819 . -333) (undo-tree-id36820 . -333) (undo-tree-id36821 . -333) (undo-tree-id36822 . -333) (undo-tree-id36823 . -333) (undo-tree-id36824 . -333) (undo-tree-id36825 . -333) (undo-tree-id36826 . -333) (undo-tree-id36827 . -333) (undo-tree-id36828 . -333) (undo-tree-id36829 . -333) (undo-tree-id36830 . -333) (undo-tree-id36831 . -333) (undo-tree-id36832 . -333) (undo-tree-id36833 . -333) (undo-tree-id36834 . -333) (undo-tree-id36835 . -333) (undo-tree-id36836 . -333) (undo-tree-id36837 . -333) (undo-tree-id36838 . -333) (undo-tree-id36839 . -333) (undo-tree-id36840 . -333) (undo-tree-id36841 . -333) (undo-tree-id36842 . -334) (undo-tree-id36843 . -334) (undo-tree-id36844 . -334) (undo-tree-id36845 . -334) (undo-tree-id36846 . -334) (undo-tree-id36847 . -334) (undo-tree-id36848 . -334) (undo-tree-id36849 . -334) (undo-tree-id36850 . -334) (undo-tree-id36851 . -334) (undo-tree-id36852 . -334) (undo-tree-id36853 . -334) (undo-tree-id36854 . -334) (undo-tree-id36855 . -334) (undo-tree-id36856 . -334) (undo-tree-id36857 . -334) (undo-tree-id36858 . -334) (undo-tree-id36859 . -334) (undo-tree-id36860 . -334) (undo-tree-id36861 . -334) (undo-tree-id36862 . -334) (undo-tree-id36863 . -334) (undo-tree-id36864 . -334) (undo-tree-id36865 . -334) (undo-tree-id36866 . -334) (undo-tree-id36867 . -334) (undo-tree-id36868 . -334) (undo-tree-id36869 . -334) (undo-tree-id36870 . -334) (undo-tree-id36871 . -334) (undo-tree-id36872 . -334) (undo-tree-id36873 . -338) (undo-tree-id36874 . -338) (undo-tree-id36875 . -338) (undo-tree-id36876 . -338) (undo-tree-id36877 . -338) (undo-tree-id36878 . -338) (undo-tree-id36879 . -338) (undo-tree-id36880 . -338) (undo-tree-id36881 . -338) (undo-tree-id36882 . -338) (undo-tree-id36883 . -338) (undo-tree-id36884 . -338) (undo-tree-id36885 . -338) (undo-tree-id36886 . -338) (undo-tree-id36887 . -338) (undo-tree-id36888 . -338) (undo-tree-id36889 . -338) (undo-tree-id36890 . -339) (undo-tree-id36891 . -339) (undo-tree-id36892 . -339) (undo-tree-id36893 . -339) (undo-tree-id36894 . -339) (undo-tree-id36895 . -339) (undo-tree-id36896 . -339) (undo-tree-id36897 . -339) (undo-tree-id36898 . -339) (undo-tree-id36899 . -339) (undo-tree-id36900 . -339) (undo-tree-id36901 . -339) (undo-tree-id36902 . -339) (undo-tree-id36903 . -339) (undo-tree-id36904 . -339) (undo-tree-id36905 . -339) (undo-tree-id36906 . -339) (undo-tree-id36907 . -339) (undo-tree-id36908 . -339) (undo-tree-id36909 . -339) (undo-tree-id36910 . -339) (undo-tree-id36911 . -339) (undo-tree-id36912 . -339) (undo-tree-id36913 . -340) (undo-tree-id36914 . -340) (undo-tree-id36915 . -340) (undo-tree-id36916 . -340) (undo-tree-id36917 . -340) (undo-tree-id36918 . -340) (undo-tree-id36919 . -340) (undo-tree-id36920 . -340) (undo-tree-id36921 . -340) (undo-tree-id36922 . -340) (undo-tree-id36923 . -340) (undo-tree-id36924 . -340) (undo-tree-id36925 . -340) (undo-tree-id36926 . -340) (undo-tree-id36927 . -340) (undo-tree-id36928 . -340) (undo-tree-id36929 . -340) (undo-tree-id36930 . -340) (undo-tree-id36931 . -340) (undo-tree-id36932 . -340) (undo-tree-id36933 . -340) (undo-tree-id36934 . -340) (undo-tree-id36935 . -340) (undo-tree-id36936 . -340) (undo-tree-id36937 . -340) (undo-tree-id36938 . -340) (undo-tree-id36939 . -340) (undo-tree-id36940 . -340) (undo-tree-id36941 . -340) (undo-tree-id36942 . -340) (undo-tree-id36943 . -340) (undo-tree-id36944 . -340) (undo-tree-id36945 . -340) (undo-tree-id36946 . -340) (undo-tree-id36947 . -340) (undo-tree-id36948 . -340) (undo-tree-id36949 . -340) (undo-tree-id36950 . -340) (undo-tree-id36951 . -341) (undo-tree-id36952 . -341) (undo-tree-id36953 . -341) (undo-tree-id36954 . -341) (undo-tree-id36955 . -341) (undo-tree-id36956 . -341) (undo-tree-id36957 . -341) (undo-tree-id36958 . -341) (undo-tree-id36959 . -341) (undo-tree-id36960 . -341) (undo-tree-id36961 . -341) (undo-tree-id36962 . -341) (undo-tree-id36963 . -341) (undo-tree-id36964 . -341) (undo-tree-id36965 . -341) (undo-tree-id36966 . -341) (undo-tree-id36967 . -341) (undo-tree-id36968 . -341) (undo-tree-id36969 . -341) (undo-tree-id36970 . -341) (undo-tree-id36971 . -341) (undo-tree-id36972 . -341) (undo-tree-id36973 . -341) (undo-tree-id36974 . -341) (undo-tree-id36975 . -342) (undo-tree-id36976 . -342) (undo-tree-id36977 . -342) (undo-tree-id36978 . -342) (undo-tree-id36979 . -342) (undo-tree-id36980 . -342) (undo-tree-id36981 . -342) (undo-tree-id36982 . -342) (undo-tree-id36983 . -342) (undo-tree-id36984 . -342) (undo-tree-id36985 . -342) (undo-tree-id36986 . -342) (undo-tree-id36987 . -342) (undo-tree-id36988 . -342) (undo-tree-id36989 . -342) (undo-tree-id36990 . -342) (undo-tree-id36991 . -342) (undo-tree-id36992 . -342) (undo-tree-id36993 . -342) (undo-tree-id36994 . -342) (undo-tree-id36995 . -342) (undo-tree-id36996 . -342) (undo-tree-id36997 . -342) (undo-tree-id36998 . -342) (undo-tree-id36999 . -342) (undo-tree-id37000 . -342) (undo-tree-id37001 . -342) (undo-tree-id37002 . -342) (undo-tree-id37003 . -342) (undo-tree-id37004 . -342) (undo-tree-id37005 . -342) (undo-tree-id37006 . -342) (undo-tree-id37007 . -342) (undo-tree-id37008 . -342) (undo-tree-id37009 . -342) (undo-tree-id37010 . -342) (undo-tree-id37011 . -342) (undo-tree-id37012 . -342) (undo-tree-id37013 . -343) (undo-tree-id37014 . -343) (undo-tree-id37015 . -343) (undo-tree-id37016 . -343) (undo-tree-id37017 . -343) (undo-tree-id37018 . -343) (undo-tree-id37019 . -343) (undo-tree-id37020 . -343) (undo-tree-id37021 . -343) (undo-tree-id37022 . -343) (undo-tree-id37023 . -343) (undo-tree-id37024 . -343) (undo-tree-id37025 . -343) (undo-tree-id37026 . -343) (undo-tree-id37027 . -343) (undo-tree-id37028 . -343) (undo-tree-id37029 . -343) (undo-tree-id37030 . -343) (undo-tree-id37031 . -343) (undo-tree-id37032 . -343) (undo-tree-id37033 . -343) (undo-tree-id37034 . -343) (undo-tree-id37035 . -343) (undo-tree-id37036 . -343) (undo-tree-id37037 . -344) (undo-tree-id37038 . -344) (undo-tree-id37039 . -344) (undo-tree-id37040 . -344) (undo-tree-id37041 . -344) (undo-tree-id37042 . -344) (undo-tree-id37043 . -344) (undo-tree-id37044 . -344) (undo-tree-id37045 . -344) (undo-tree-id37046 . -344) (undo-tree-id37047 . -344) (undo-tree-id37048 . -344) (undo-tree-id37049 . -344) (undo-tree-id37050 . -344) (undo-tree-id37051 . -344) (undo-tree-id37052 . -344) (undo-tree-id37053 . -344) (undo-tree-id37054 . -344) (undo-tree-id37055 . -344) (undo-tree-id37056 . -344) (undo-tree-id37057 . -344) (undo-tree-id37058 . -344) (undo-tree-id37059 . -344) (undo-tree-id37060 . -344) (undo-tree-id37061 . -344) (undo-tree-id37062 . -344) (undo-tree-id37063 . -344) (undo-tree-id37064 . -344) (undo-tree-id37065 . -344) (undo-tree-id37066 . -344) (undo-tree-id37067 . -344) (undo-tree-id37068 . -348) (undo-tree-id37069 . -348) (undo-tree-id37070 . -348) (undo-tree-id37071 . -348) (undo-tree-id37072 . -348) (undo-tree-id37073 . -348) (undo-tree-id37074 . -348) (undo-tree-id37075 . -348) (undo-tree-id37076 . -348) (undo-tree-id37077 . -348) (undo-tree-id37078 . -348) (undo-tree-id37079 . -348) (undo-tree-id37080 . -348) (undo-tree-id37081 . -348) (undo-tree-id37082 . -348) (undo-tree-id37083 . -348) (undo-tree-id37084 . -348) (undo-tree-id37085 . -349) (undo-tree-id37086 . -349) (undo-tree-id37087 . -349) (undo-tree-id37088 . -349) (undo-tree-id37089 . -349) (undo-tree-id37090 . -349) (undo-tree-id37091 . -349) (undo-tree-id37092 . -349) (undo-tree-id37093 . -349) (undo-tree-id37094 . -349) (undo-tree-id37095 . -349) (undo-tree-id37096 . -349) (undo-tree-id37097 . -349) (undo-tree-id37098 . -349) (undo-tree-id37099 . -349) (undo-tree-id37100 . -349) (undo-tree-id37101 . -349) (undo-tree-id37102 . -348) (undo-tree-id37103 . -348) (undo-tree-id37104 . -348) (undo-tree-id37105 . -348) (undo-tree-id37106 . -348) (undo-tree-id37107 . -348) (undo-tree-id37108 . -348) (undo-tree-id37109 . -348) (undo-tree-id37110 . -348) (undo-tree-id37111 . -348) (undo-tree-id37112 . -348) (undo-tree-id37113 . -348) (undo-tree-id37114 . -348) (undo-tree-id37115 . -348) (undo-tree-id37116 . -348) (undo-tree-id37117 . -348) (undo-tree-id37118 . -348) (undo-tree-id37119 . -348) (undo-tree-id37120 . -348) (undo-tree-id37121 . -348) (undo-tree-id37122 . -348) (undo-tree-id37123 . -348) (undo-tree-id37124 . -348) (undo-tree-id37125 . -348) (undo-tree-id37126 . -348) (undo-tree-id37127 . -348) (undo-tree-id37128 . -349) (undo-tree-id37129 . -349) (undo-tree-id37130 . -349) (undo-tree-id37131 . -349) (undo-tree-id37132 . -349) (undo-tree-id37133 . -349) (undo-tree-id37134 . -349) (undo-tree-id37135 . -349) (undo-tree-id37136 . -349) (undo-tree-id37137 . -349) (undo-tree-id37138 . -349) (undo-tree-id37139 . -349) (undo-tree-id37140 . -349) (undo-tree-id37141 . -349) (undo-tree-id37142 . -349) (undo-tree-id37143 . -349) (undo-tree-id37144 . -349) (undo-tree-id37145 . -349) (undo-tree-id37146 . -349) (undo-tree-id37147 . -349) (undo-tree-id37148 . -349) (undo-tree-id37149 . -349) (undo-tree-id37150 . -350) (undo-tree-id37151 . -350) (undo-tree-id37152 . -350) (undo-tree-id37153 . -350) (undo-tree-id37154 . -350) (undo-tree-id37155 . -350) (undo-tree-id37156 . -350) (undo-tree-id37157 . -350) (undo-tree-id37158 . -350) (undo-tree-id37159 . -350) (undo-tree-id37160 . -350) (undo-tree-id37161 . -350) (undo-tree-id37162 . -350) (undo-tree-id37163 . -350) (undo-tree-id37164 . -350) (undo-tree-id37165 . -350) (undo-tree-id37166 . -350) (undo-tree-id37167 . -350) (undo-tree-id37168 . -350) (undo-tree-id37169 . -350) (undo-tree-id37170 . -350) (undo-tree-id37171 . -350) (undo-tree-id37172 . -350) (undo-tree-id37173 . -350) (undo-tree-id37174 . -350) (undo-tree-id37175 . -350) (undo-tree-id37176 . -350) (undo-tree-id37177 . -350) (undo-tree-id37178 . -350) (undo-tree-id37179 . -350) (undo-tree-id37180 . -350) (undo-tree-id37181 . -350) (undo-tree-id37182 . -350) (undo-tree-id37183 . -350) (undo-tree-id37184 . -350) (undo-tree-id37185 . -350) (undo-tree-id37186 . -350) (undo-tree-id37187 . -350) (undo-tree-id37188 . -350) (undo-tree-id37189 . -350) (undo-tree-id37190 . -350) (undo-tree-id37191 . -350) (undo-tree-id37192 . -350) (undo-tree-id37193 . -350) (undo-tree-id37194 . -350) (undo-tree-id37195 . -350) (undo-tree-id37196 . -350) (undo-tree-id37197 . -350) (undo-tree-id37198 . -350) (undo-tree-id37199 . -350) (undo-tree-id37200 . -350) (undo-tree-id37201 . -350) (undo-tree-id37202 . -350) (undo-tree-id37203 . -350) (undo-tree-id37204 . -350) (undo-tree-id37205 . -350) (undo-tree-id37206 . -350) (undo-tree-id37207 . -350) (undo-tree-id37208 . -350) (undo-tree-id37209 . -350) (undo-tree-id37210 . -350) (undo-tree-id37211 . -350) (undo-tree-id37212 . -350) (undo-tree-id37213 . -273) (3209 . 3482) (#(" Finally, we just need to add prefetching: dataset = dataset.prefetch(1) That’s it! Preparing the dataset was the hardest part. Now let’s create the model. Building and Training the Char-RNN Model To predict the next character based on the previous 100 characters, we can" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 73 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 148 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 149 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 156 159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 159 196 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 196 197 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 197 270 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 270 271 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3286) (undo-tree-id37214 . 210) (undo-tree-id37215 . -69) (undo-tree-id37216 . 241) (undo-tree-id37217 . -41) (undo-tree-id37218 . -1) (undo-tree-id37219 . -1) (undo-tree-id37220 . -1) (undo-tree-id37221 . -1) (undo-tree-id37222 . -1) (undo-tree-id37223 . -1) (undo-tree-id37224 . -1) (undo-tree-id37225 . -1) (undo-tree-id37226 . -1) (undo-tree-id37227 . -1) (undo-tree-id37228 . -1) (undo-tree-id37229 . -1) (undo-tree-id37230 . -1) (undo-tree-id37231 . -1) (undo-tree-id37232 . -1) (undo-tree-id37233 . -1) (undo-tree-id37234 . -1) (undo-tree-id37235 . -1) (undo-tree-id37236 . -1) (undo-tree-id37237 . -1) (undo-tree-id37238 . -1) (undo-tree-id37239 . -1) (undo-tree-id37240 . -1) (undo-tree-id37241 . -1) (undo-tree-id37242 . -1) (undo-tree-id37243 . -1) 3287) nil (25767 6310 744442 557000) 0 nil])
([nil nil ((#("Finally, we just need to " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 25 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3289) (undo-tree-id35626 . -24) (undo-tree-id35627 . -24) (undo-tree-id35628 . 25) (undo-tree-id35629 . -24) (undo-tree-id35630 . -25) (undo-tree-id35631 . -24) (undo-tree-id35632 . -6) (undo-tree-id35633 . -6) (undo-tree-id35634 . -6) (undo-tree-id35635 . -6) (undo-tree-id35636 . -6) (undo-tree-id35637 . -6) (undo-tree-id35638 . -6) (undo-tree-id35639 . -6) (undo-tree-id35640 . -6) (undo-tree-id35641 . -6) (undo-tree-id35642 . -6) (undo-tree-id35643 . -6) (undo-tree-id35644 . -6) (undo-tree-id35645 . -6) (undo-tree-id35646 . -6) (undo-tree-id35647 . -6) (undo-tree-id35648 . -6) (undo-tree-id35649 . -6) (undo-tree-id35650 . -6) (undo-tree-id35651 . -6) (undo-tree-id35652 . -6) (undo-tree-id35653 . -6) (undo-tree-id35654 . -7) (undo-tree-id35655 . -7) (undo-tree-id35656 . -7) (undo-tree-id35657 . -7) (undo-tree-id35658 . -7) (undo-tree-id35659 . -7) (undo-tree-id35660 . -7) (undo-tree-id35661 . -7) (undo-tree-id35662 . -7) (undo-tree-id35663 . -7) (undo-tree-id35664 . -7) (undo-tree-id35665 . -7) (undo-tree-id35666 . -7) (undo-tree-id35667 . -7) (undo-tree-id35668 . -7) (undo-tree-id35669 . -7) (undo-tree-id35670 . -7) (undo-tree-id35671 . -7) (undo-tree-id35672 . -7) (undo-tree-id35673 . -7) (undo-tree-id35674 . -7) (undo-tree-id35675 . -7) (undo-tree-id35676 . -7) (undo-tree-id35677 . -7) (undo-tree-id35678 . -7) (undo-tree-id35679 . -7) (undo-tree-id35680 . -7) (undo-tree-id35681 . -7) (undo-tree-id35682 . -7) (undo-tree-id35683 . -10) (undo-tree-id35684 . -10) (undo-tree-id35685 . -10) (undo-tree-id35686 . -10) (undo-tree-id35687 . -10) (undo-tree-id35688 . -10) (undo-tree-id35689 . -10) (undo-tree-id35690 . -10) (undo-tree-id35691 . -10) (undo-tree-id35692 . -10) (undo-tree-id35693 . -10) (undo-tree-id35694 . -10) (undo-tree-id35695 . -10) (undo-tree-id35696 . -10) (undo-tree-id35697 . -10) (undo-tree-id35698 . -10) (undo-tree-id35699 . -10) (undo-tree-id35700 . -10) (undo-tree-id35701 . -10) (undo-tree-id35702 . -10) (undo-tree-id35703 . -10) (undo-tree-id35704 . -10) (undo-tree-id35705 . -15) (undo-tree-id35706 . -15) (undo-tree-id35707 . -15) (undo-tree-id35708 . -15) (undo-tree-id35709 . -15) (undo-tree-id35710 . -15) (undo-tree-id35711 . -15) (undo-tree-id35712 . -15) (undo-tree-id35713 . -15) (undo-tree-id35714 . -15) (undo-tree-id35715 . -15) (undo-tree-id35716 . -15) (undo-tree-id35717 . -15) (undo-tree-id35718 . -15) (undo-tree-id35719 . -15) (undo-tree-id35720 . -15) (undo-tree-id35721 . -15) (undo-tree-id35722 . -15) (undo-tree-id35723 . -15) (undo-tree-id35724 . -15) (undo-tree-id35725 . -15) (undo-tree-id35726 . -15) (undo-tree-id35727 . -20) (undo-tree-id35728 . -20) (undo-tree-id35729 . -20) (undo-tree-id35730 . -20) (undo-tree-id35731 . -20) (undo-tree-id35732 . -20) (undo-tree-id35733 . -20) (undo-tree-id35734 . -20) (undo-tree-id35735 . -20) (undo-tree-id35736 . -20) (undo-tree-id35737 . -20) (undo-tree-id35738 . -20) (undo-tree-id35739 . -20) (undo-tree-id35740 . -20) (undo-tree-id35741 . -20) (undo-tree-id35742 . -20) (undo-tree-id35743 . -20) (undo-tree-id35744 . -20) (undo-tree-id35745 . -20) (undo-tree-id35746 . -20) (undo-tree-id35747 . -20) (undo-tree-id35748 . -20) (undo-tree-id35749 . -23) (undo-tree-id35750 . -23) (undo-tree-id35751 . -23) (undo-tree-id35752 . -23) (undo-tree-id35753 . -23) (undo-tree-id35754 . -23) (undo-tree-id35755 . -23) (undo-tree-id35756 . -23) (undo-tree-id35757 . -23) (undo-tree-id35758 . -23) (undo-tree-id35759 . -23) (undo-tree-id35760 . -23) (undo-tree-id35761 . -23) (undo-tree-id35762 . -23) (undo-tree-id35763 . -23) (undo-tree-id35764 . -23) (undo-tree-id35765 . -23) (undo-tree-id35766 . -23) (undo-tree-id35767 . -23) (undo-tree-id35768 . -23) (undo-tree-id35769 . -23) (undo-tree-id35770 . -23) (undo-tree-id35771 . -25) (undo-tree-id35772 . -25) (undo-tree-id35773 . -25) (undo-tree-id35774 . -25) (undo-tree-id35775 . -25) (undo-tree-id35776 . -25) (undo-tree-id35777 . -25) (undo-tree-id35778 . -25) (undo-tree-id35779 . -25) (undo-tree-id35780 . -25) (undo-tree-id35781 . -25) (undo-tree-id35782 . -25) (undo-tree-id35783 . -25) (undo-tree-id35784 . -25) (undo-tree-id35785 . -25) (undo-tree-id35786 . -25) (undo-tree-id35787 . -25) (undo-tree-id35788 . -25) (undo-tree-id35789 . -25) (undo-tree-id35790 . -25) (undo-tree-id35791 . -25) (undo-tree-id35792 . -25) (undo-tree-id35793 . -24) (undo-tree-id35794 . -24) (undo-tree-id35795 . -24) (undo-tree-id35796 . -24) (undo-tree-id35797 . -24) (undo-tree-id35798 . -24) (undo-tree-id35799 . -24) (undo-tree-id35800 . -24) (undo-tree-id35801 . -24) (undo-tree-id35802 . -24) (undo-tree-id35803 . -24) (undo-tree-id35804 . -24) (undo-tree-id35805 . -24) (undo-tree-id35806 . -24) (undo-tree-id35807 . -24) (undo-tree-id35808 . -24) (undo-tree-id35809 . -24) (undo-tree-id35810 . -24) (undo-tree-id35811 . -24) (undo-tree-id35812 . -24) (undo-tree-id35813 . -24) (undo-tree-id35814 . -24) (undo-tree-id35815 . -24) (undo-tree-id35816 . -25) 3313) nil (25767 6310 742828 992000) 0 nil])
([nil nil ((3289 . 3290) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3289)) nil (25767 6310 741665 613000) 0 nil])
([nil nil ((#("dataset = dataset.prefetch(1)" 0 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3306) (undo-tree-id37605 . -28) (undo-tree-id37606 . -28) (undo-tree-id37607 . -28) (undo-tree-id37608 . 29) (undo-tree-id37609 . -7) (undo-tree-id37610 . -29) (undo-tree-id37611 . -28) (undo-tree-id37612 . -6) (undo-tree-id37613 . -6) (undo-tree-id37614 . -6) (undo-tree-id37615 . -6) (undo-tree-id37616 . -6) (undo-tree-id37617 . -6) (undo-tree-id37618 . -6) (undo-tree-id37619 . -6) (undo-tree-id37620 . -6) (undo-tree-id37621 . -6) (undo-tree-id37622 . -6) (undo-tree-id37623 . -6) (undo-tree-id37624 . -6) (undo-tree-id37625 . -6) (undo-tree-id37626 . -6) (undo-tree-id37627 . -6) (undo-tree-id37628 . -6) (undo-tree-id37629 . -6) (undo-tree-id37630 . -6) (undo-tree-id37631 . -6) (undo-tree-id37632 . -6) (undo-tree-id37633 . -6) (undo-tree-id37634 . -8) (undo-tree-id37635 . -8) (undo-tree-id37636 . -8) (undo-tree-id37637 . -8) (undo-tree-id37638 . -8) (undo-tree-id37639 . -8) (undo-tree-id37640 . -8) (undo-tree-id37641 . -8) (undo-tree-id37642 . -8) (undo-tree-id37643 . -8) (undo-tree-id37644 . -8) (undo-tree-id37645 . -8) (undo-tree-id37646 . -8) (undo-tree-id37647 . -8) (undo-tree-id37648 . -8) (undo-tree-id37649 . -8) (undo-tree-id37650 . -8) (undo-tree-id37651 . -8) (undo-tree-id37652 . -8) (undo-tree-id37653 . -8) (undo-tree-id37654 . -8) (undo-tree-id37655 . -8) (undo-tree-id37656 . 19) (undo-tree-id37657 . -17) (undo-tree-id37658 . -16) (undo-tree-id37659 . -16) (undo-tree-id37660 . -16) (undo-tree-id37661 . -16) (undo-tree-id37662 . -16) (undo-tree-id37663 . -16) (undo-tree-id37664 . -16) (undo-tree-id37665 . -16) (undo-tree-id37666 . -16) (undo-tree-id37667 . -16) (undo-tree-id37668 . -16) (undo-tree-id37669 . -16) (undo-tree-id37670 . -16) (undo-tree-id37671 . -16) (undo-tree-id37672 . -16) (undo-tree-id37673 . -16) (undo-tree-id37674 . -16) (undo-tree-id37675 . -16) (undo-tree-id37676 . -16) (undo-tree-id37677 . -16) (undo-tree-id37678 . -16) (undo-tree-id37679 . -16) (undo-tree-id37680 . -17) (undo-tree-id37681 . -17) (undo-tree-id37682 . -17) (undo-tree-id37683 . -17) (undo-tree-id37684 . -17) (undo-tree-id37685 . -17) (undo-tree-id37686 . -17) (undo-tree-id37687 . -17) (undo-tree-id37688 . -17) (undo-tree-id37689 . -17) (undo-tree-id37690 . -17) (undo-tree-id37691 . -17) (undo-tree-id37692 . -17) (undo-tree-id37693 . -17) (undo-tree-id37694 . -17) (undo-tree-id37695 . -17) (undo-tree-id37696 . -17) (undo-tree-id37697 . -17) (undo-tree-id37698 . -17) (undo-tree-id37699 . -17) (undo-tree-id37700 . -17) (undo-tree-id37701 . -17) (undo-tree-id37702 . 11) (undo-tree-id37703 . -26) (undo-tree-id37704 . -25) (undo-tree-id37705 . -25) (undo-tree-id37706 . -25) (undo-tree-id37707 . -25) (undo-tree-id37708 . -25) (undo-tree-id37709 . -25) (undo-tree-id37710 . -25) (undo-tree-id37711 . -25) (undo-tree-id37712 . -25) (undo-tree-id37713 . -25) (undo-tree-id37714 . -25) (undo-tree-id37715 . -25) (undo-tree-id37716 . -25) (undo-tree-id37717 . -25) (undo-tree-id37718 . -25) (undo-tree-id37719 . -25) (undo-tree-id37720 . -25) (undo-tree-id37721 . -25) (undo-tree-id37722 . -25) (undo-tree-id37723 . -25) (undo-tree-id37724 . -25) (undo-tree-id37725 . -25) (undo-tree-id37726 . -26) (undo-tree-id37727 . -26) (undo-tree-id37728 . -26) (undo-tree-id37729 . -26) (undo-tree-id37730 . -26) (undo-tree-id37731 . -26) (undo-tree-id37732 . -26) (undo-tree-id37733 . -26) (undo-tree-id37734 . -26) (undo-tree-id37735 . -26) (undo-tree-id37736 . -26) (undo-tree-id37737 . -26) (undo-tree-id37738 . -26) (undo-tree-id37739 . -26) (undo-tree-id37740 . -26) (undo-tree-id37741 . -26) (undo-tree-id37742 . -26) (undo-tree-id37743 . -26) (undo-tree-id37744 . -26) (undo-tree-id37745 . -26) (undo-tree-id37746 . -26) (undo-tree-id37747 . -26) (undo-tree-id37748 . -26) (undo-tree-id37749 . -26) (undo-tree-id37750 . -26) (undo-tree-id37751 . -26) (undo-tree-id37752 . -26) (undo-tree-id37753 . -26) (undo-tree-id37754 . -26) (undo-tree-id37755 . -27) (undo-tree-id37756 . -27) (undo-tree-id37757 . -27) (undo-tree-id37758 . -27) (undo-tree-id37759 . -27) (undo-tree-id37760 . -27) (undo-tree-id37761 . -27) (undo-tree-id37762 . -27) (undo-tree-id37763 . -27) (undo-tree-id37764 . -27) (undo-tree-id37765 . -27) (undo-tree-id37766 . -27) (undo-tree-id37767 . -27) (undo-tree-id37768 . -27) (undo-tree-id37769 . -27) (undo-tree-id37770 . -27) (undo-tree-id37771 . -27) (undo-tree-id37772 . -27) (undo-tree-id37773 . -27) (undo-tree-id37774 . -27) (undo-tree-id37775 . -27) (undo-tree-id37776 . -27) (undo-tree-id37777 . -28) (undo-tree-id37778 . -28) (undo-tree-id37779 . -28) (undo-tree-id37780 . -28) (undo-tree-id37781 . -28) (undo-tree-id37782 . -28) (undo-tree-id37783 . -28) (undo-tree-id37784 . -28) (undo-tree-id37785 . -28) (undo-tree-id37786 . -28) (undo-tree-id37787 . -28) (undo-tree-id37788 . -28) (undo-tree-id37789 . -28) (undo-tree-id37790 . -28) (undo-tree-id37791 . -28) (undo-tree-id37792 . -28) (undo-tree-id37793 . -28) (undo-tree-id37794 . -28) (undo-tree-id37795 . -28) (undo-tree-id37796 . -28) (undo-tree-id37797 . -28) (undo-tree-id37798 . 1) (undo-tree-id37799 . -29) (undo-tree-id37800 . 3) (undo-tree-id37801 . -27) (undo-tree-id37802 . -28) (undo-tree-id37803 . -28) (undo-tree-id37804 . -28) (undo-tree-id37805 . -28) (undo-tree-id37806 . -28) (undo-tree-id37807 . -28) (undo-tree-id37808 . -28) (undo-tree-id37809 . -28) (undo-tree-id37810 . -28) (undo-tree-id37811 . -29) 3334 (t 25767 6310 787188 13000)) nil (25767 6332 399496 324000) 0 nil])
([nil nil ((4004 . 4005) 3954) nil (25767 6335 26141 646000) 0 nil] [nil nil ((nil rear-nonsticky nil 3983 . 3984) (nil fontified nil 3955 . 3984) (3955 . 3984) 3954) ((#("dataset = dataset.prefetch(1)" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 7 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 26 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) src-block t)) . 3955) (undo-tree-id37812 . -28) (undo-tree-id37813 . -28) (undo-tree-id37814 . -28) (undo-tree-id37815 . -28) (undo-tree-id37816 . -28) (undo-tree-id37817 . -28) (undo-tree-id37818 . -28) (undo-tree-id37819 . -28) (undo-tree-id37820 . -28) (undo-tree-id37821 . -28) (undo-tree-id37822 . -28) (undo-tree-id37823 . -28) (undo-tree-id37824 . -28) (undo-tree-id37825 . -28) (undo-tree-id37826 . -28) (undo-tree-id37827 . -28) (undo-tree-id37828 . -28) (undo-tree-id37829 . -28) (undo-tree-id37830 . -28) (undo-tree-id37831 . -28) (undo-tree-id37832 . -28) (undo-tree-id37833 . -28) (undo-tree-id37834 . -28) (undo-tree-id37835 . -28) (undo-tree-id37836 . -28) (undo-tree-id37837 . -28) (undo-tree-id37838 . -28) (undo-tree-id37839 . -28) (undo-tree-id37840 . -28) (undo-tree-id37841 . -28) (undo-tree-id37842 . -28) (undo-tree-id37843 . -28) (undo-tree-id37844 . -28) (undo-tree-id37845 . 1) (undo-tree-id37846 . -29) (undo-tree-id37847 . 3) (undo-tree-id37848 . -27) (undo-tree-id37849 . -28) (undo-tree-id37850 . -28) (undo-tree-id37851 . -28) (undo-tree-id37852 . -28) (undo-tree-id37853 . -28) (undo-tree-id37854 . -28) (undo-tree-id37855 . -28) (undo-tree-id37856 . -28) (undo-tree-id37857 . -28) (undo-tree-id37858 . -28) (undo-tree-id37859 . -28) (undo-tree-id37860 . -28) (undo-tree-id37861 . -28) (undo-tree-id37862 . -28) (undo-tree-id37863 . -28) (undo-tree-id37864 . -28) (nil rear-nonsticky t 3983 . 3984) (t 25767 6330 347348 876000)) (25767 6330 255151 778000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4033 . 4034) (nil fontified nil 4005 . 4034) (4005 . 4034)) nil (25767 6335 26136 704000) 0 nil])
nil
([nil nil ((#("That’s it! Preparing the dataset was the hardest part. Now let’s create the model. Building and Training the Char-RNN Model To predict the next" 0 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 75 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 83 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 83 86 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 86 123 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 123 124 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 124 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3307) (undo-tree-id38030 . -142) (undo-tree-id38031 . -142) (undo-tree-id38032 . -142) (undo-tree-id38033 . -83) (undo-tree-id38034 . -83) (undo-tree-id38035 . -83) (undo-tree-id38036 . -83) (undo-tree-id38037 . -83) (undo-tree-id38038 . -83) (undo-tree-id38039 . -83) (undo-tree-id38040 . -83) (undo-tree-id38041 . -83) (undo-tree-id38042 . -83) (undo-tree-id38043 . -83) (undo-tree-id38044 . -83) (undo-tree-id38045 . -83) (undo-tree-id38046 . -83) (undo-tree-id38047 . -83) (undo-tree-id38048 . -6) (undo-tree-id38049 . -6) (undo-tree-id38050 . -6) (undo-tree-id38051 . -6) (undo-tree-id38052 . -6) (undo-tree-id38053 . -6) (undo-tree-id38054 . -6) (undo-tree-id38055 . -6) (undo-tree-id38056 . -6) (undo-tree-id38057 . -6) (undo-tree-id38058 . -6) (undo-tree-id38059 . -6) (undo-tree-id38060 . -6) (undo-tree-id38061 . -6) (undo-tree-id38062 . -6) (undo-tree-id38063 . -6) (undo-tree-id38064 . -6) (undo-tree-id38065 . -6) (undo-tree-id38066 . -6) (undo-tree-id38067 . -6) (undo-tree-id38068 . -6) (undo-tree-id38069 . -6) (undo-tree-id38070 . -5) (undo-tree-id38071 . -5) (undo-tree-id38072 . -5) (undo-tree-id38073 . -5) (undo-tree-id38074 . -5) (undo-tree-id38075 . -5) (undo-tree-id38076 . -5) (undo-tree-id38077 . -5) (undo-tree-id38078 . -5) (undo-tree-id38079 . -5) (undo-tree-id38080 . -5) (undo-tree-id38081 . -5) (undo-tree-id38082 . -5) (undo-tree-id38083 . -5) (undo-tree-id38084 . -5) (undo-tree-id38085 . -4) (undo-tree-id38086 . -4) (undo-tree-id38087 . -4) (undo-tree-id38088 . -4) (undo-tree-id38089 . -4) (undo-tree-id38090 . -4) (undo-tree-id38091 . -4) (undo-tree-id38092 . -4) (undo-tree-id38093 . -4) (undo-tree-id38094 . -4) (undo-tree-id38095 . -4) (undo-tree-id38096 . -4) (undo-tree-id38097 . -4) (undo-tree-id38098 . -4) (undo-tree-id38099 . -4) (undo-tree-id38100 . -143) (undo-tree-id38101 . -142) (undo-tree-id38102 . -3) (undo-tree-id38103 . -3) (undo-tree-id38104 . -3) (undo-tree-id38105 . -3) (undo-tree-id38106 . -3) (undo-tree-id38107 . -3) (undo-tree-id38108 . -3) (undo-tree-id38109 . -3) (undo-tree-id38110 . -3) (undo-tree-id38111 . -3) (undo-tree-id38112 . -3) (undo-tree-id38113 . -3) (undo-tree-id38114 . -3) (undo-tree-id38115 . -3) (undo-tree-id38116 . -3) (undo-tree-id38117 . -3) (undo-tree-id38118 . -3) (undo-tree-id38119 . -3) (undo-tree-id38120 . -3) (undo-tree-id38121 . -3) (undo-tree-id38122 . -3) (undo-tree-id38123 . -3) (undo-tree-id38124 . -4) (undo-tree-id38125 . -4) (undo-tree-id38126 . -4) (undo-tree-id38127 . -4) (undo-tree-id38128 . -4) (undo-tree-id38129 . -4) (undo-tree-id38130 . -4) (undo-tree-id38131 . -4) (undo-tree-id38132 . -4) (undo-tree-id38133 . -4) (undo-tree-id38134 . -4) (undo-tree-id38135 . -4) (undo-tree-id38136 . -4) (undo-tree-id38137 . -4) (undo-tree-id38138 . -4) (undo-tree-id38139 . -4) (undo-tree-id38140 . -4) (undo-tree-id38141 . -4) (undo-tree-id38142 . -4) (undo-tree-id38143 . -4) (undo-tree-id38144 . -4) (undo-tree-id38145 . -4) (undo-tree-id38146 . -5) (undo-tree-id38147 . -5) (undo-tree-id38148 . -5) (undo-tree-id38149 . -5) (undo-tree-id38150 . -5) (undo-tree-id38151 . -5) (undo-tree-id38152 . -5) (undo-tree-id38153 . -5) (undo-tree-id38154 . -5) (undo-tree-id38155 . -5) (undo-tree-id38156 . -5) (undo-tree-id38157 . -5) (undo-tree-id38158 . -5) (undo-tree-id38159 . -5) (undo-tree-id38160 . -5) (undo-tree-id38161 . -5) (undo-tree-id38162 . -5) (undo-tree-id38163 . -5) (undo-tree-id38164 . -5) (undo-tree-id38165 . -5) (undo-tree-id38166 . -5) (undo-tree-id38167 . -5) (undo-tree-id38168 . -8) (undo-tree-id38169 . -8) (undo-tree-id38170 . -8) (undo-tree-id38171 . -8) (undo-tree-id38172 . -8) (undo-tree-id38173 . -8) (undo-tree-id38174 . -8) (undo-tree-id38175 . -8) (undo-tree-id38176 . -8) (undo-tree-id38177 . -8) (undo-tree-id38178 . -8) (undo-tree-id38179 . -8) (undo-tree-id38180 . -8) (undo-tree-id38181 . -8) (undo-tree-id38182 . -8) (undo-tree-id38183 . -8) (undo-tree-id38184 . -8) (undo-tree-id38185 . -8) (undo-tree-id38186 . -8) (undo-tree-id38187 . -8) (undo-tree-id38188 . -8) (undo-tree-id38189 . -8) (undo-tree-id38190 . -9) (undo-tree-id38191 . -9) (undo-tree-id38192 . -9) (undo-tree-id38193 . -9) (undo-tree-id38194 . -9) (undo-tree-id38195 . -9) (undo-tree-id38196 . -9) (undo-tree-id38197 . -9) (undo-tree-id38198 . -9) (undo-tree-id38199 . -9) (undo-tree-id38200 . -9) (undo-tree-id38201 . -9) (undo-tree-id38202 . -9) (undo-tree-id38203 . -9) (undo-tree-id38204 . -9) (undo-tree-id38205 . -9) (undo-tree-id38206 . -9) (undo-tree-id38207 . -9) (undo-tree-id38208 . -9) (undo-tree-id38209 . -9) (undo-tree-id38210 . -9) (undo-tree-id38211 . -9) (undo-tree-id38212 . -19) (undo-tree-id38213 . -19) (undo-tree-id38214 . -19) (undo-tree-id38215 . -19) (undo-tree-id38216 . -19) (undo-tree-id38217 . -19) (undo-tree-id38218 . -19) (undo-tree-id38219 . -19) (undo-tree-id38220 . -19) (undo-tree-id38221 . -19) (undo-tree-id38222 . -19) (undo-tree-id38223 . -19) (undo-tree-id38224 . -19) (undo-tree-id38225 . -19) (undo-tree-id38226 . -19) (undo-tree-id38227 . -19) (undo-tree-id38228 . -19) (undo-tree-id38229 . -19) (undo-tree-id38230 . -19) (undo-tree-id38231 . -19) (undo-tree-id38232 . -19) (undo-tree-id38233 . -19) (undo-tree-id38234 . -23) (undo-tree-id38235 . -23) (undo-tree-id38236 . -23) (undo-tree-id38237 . -23) (undo-tree-id38238 . -23) (undo-tree-id38239 . -23) (undo-tree-id38240 . -23) (undo-tree-id38241 . -23) (undo-tree-id38242 . -23) (undo-tree-id38243 . -23) (undo-tree-id38244 . -23) (undo-tree-id38245 . -23) (undo-tree-id38246 . -23) (undo-tree-id38247 . -23) (undo-tree-id38248 . -23) (undo-tree-id38249 . -23) (undo-tree-id38250 . -23) (undo-tree-id38251 . -23) (undo-tree-id38252 . -23) (undo-tree-id38253 . -23) (undo-tree-id38254 . -23) (undo-tree-id38255 . -23) (undo-tree-id38256 . 118) (undo-tree-id38257 . -32) (undo-tree-id38258 . -31) (undo-tree-id38259 . -31) (undo-tree-id38260 . -31) (undo-tree-id38261 . -31) (undo-tree-id38262 . -31) (undo-tree-id38263 . -31) (undo-tree-id38264 . -31) (undo-tree-id38265 . -31) (undo-tree-id38266 . -31) (undo-tree-id38267 . -31) (undo-tree-id38268 . -31) (undo-tree-id38269 . -31) (undo-tree-id38270 . -31) (undo-tree-id38271 . -31) (undo-tree-id38272 . -31) (undo-tree-id38273 . -31) (undo-tree-id38274 . -31) (undo-tree-id38275 . -31) (undo-tree-id38276 . -31) (undo-tree-id38277 . -31) (undo-tree-id38278 . -31) (undo-tree-id38279 . -31) (undo-tree-id38280 . -35) (undo-tree-id38281 . -35) (undo-tree-id38282 . -35) (undo-tree-id38283 . -35) (undo-tree-id38284 . -35) (undo-tree-id38285 . -35) (undo-tree-id38286 . -35) (undo-tree-id38287 . -35) (undo-tree-id38288 . -35) (undo-tree-id38289 . -35) (undo-tree-id38290 . -35) (undo-tree-id38291 . -35) (undo-tree-id38292 . -35) (undo-tree-id38293 . -35) (undo-tree-id38294 . -35) (undo-tree-id38295 . -35) (undo-tree-id38296 . -35) (undo-tree-id38297 . -35) (undo-tree-id38298 . -35) (undo-tree-id38299 . -35) (undo-tree-id38300 . -35) (undo-tree-id38301 . -35) (undo-tree-id38302 . -39) (undo-tree-id38303 . -39) (undo-tree-id38304 . -39) (undo-tree-id38305 . -39) (undo-tree-id38306 . -39) (undo-tree-id38307 . -39) (undo-tree-id38308 . -39) (undo-tree-id38309 . -39) (undo-tree-id38310 . -39) (undo-tree-id38311 . -39) (undo-tree-id38312 . -39) (undo-tree-id38313 . -39) (undo-tree-id38314 . -39) (undo-tree-id38315 . -39) (undo-tree-id38316 . -39) (undo-tree-id38317 . -39) (undo-tree-id38318 . -39) (undo-tree-id38319 . -39) (undo-tree-id38320 . -39) (undo-tree-id38321 . -39) (undo-tree-id38322 . -39) (undo-tree-id38323 . -39) (undo-tree-id38324 . -47) (undo-tree-id38325 . -47) (undo-tree-id38326 . -47) (undo-tree-id38327 . -47) (undo-tree-id38328 . -47) (undo-tree-id38329 . -47) (undo-tree-id38330 . -47) (undo-tree-id38331 . -47) (undo-tree-id38332 . -47) (undo-tree-id38333 . -47) (undo-tree-id38334 . -47) (undo-tree-id38335 . -47) (undo-tree-id38336 . -47) (undo-tree-id38337 . -47) (undo-tree-id38338 . -47) (undo-tree-id38339 . -47) (undo-tree-id38340 . -47) (undo-tree-id38341 . -47) (undo-tree-id38342 . -47) (undo-tree-id38343 . -47) (undo-tree-id38344 . -47) (undo-tree-id38345 . -47) (undo-tree-id38346 . -52) (undo-tree-id38347 . -52) (undo-tree-id38348 . -52) (undo-tree-id38349 . -52) (undo-tree-id38350 . -52) (undo-tree-id38351 . -52) (undo-tree-id38352 . -52) (undo-tree-id38353 . -52) (undo-tree-id38354 . -52) (undo-tree-id38355 . -52) (undo-tree-id38356 . -52) (undo-tree-id38357 . -52) (undo-tree-id38358 . -52) (undo-tree-id38359 . -52) (undo-tree-id38360 . -52) (undo-tree-id38361 . -52) (undo-tree-id38362 . -52) (undo-tree-id38363 . -52) (undo-tree-id38364 . -52) (undo-tree-id38365 . -52) (undo-tree-id38366 . -52) (undo-tree-id38367 . -52) (undo-tree-id38368 . -53) (undo-tree-id38369 . -53) (undo-tree-id38370 . -53) (undo-tree-id38371 . -53) (undo-tree-id38372 . -53) (undo-tree-id38373 . -53) (undo-tree-id38374 . -53) (undo-tree-id38375 . -53) (undo-tree-id38376 . -53) (undo-tree-id38377 . -53) (undo-tree-id38378 . -53) (undo-tree-id38379 . -53) (undo-tree-id38380 . -53) (undo-tree-id38381 . -53) (undo-tree-id38382 . -53) (undo-tree-id38383 . -53) (undo-tree-id38384 . -53) (undo-tree-id38385 . -53) (undo-tree-id38386 . -53) (undo-tree-id38387 . -53) (undo-tree-id38388 . -53) (undo-tree-id38389 . -53) (undo-tree-id38390 . -57) (undo-tree-id38391 . -57) (undo-tree-id38392 . -57) (undo-tree-id38393 . -57) (undo-tree-id38394 . -57) (undo-tree-id38395 . -57) (undo-tree-id38396 . -57) (undo-tree-id38397 . -57) (undo-tree-id38398 . -57) (undo-tree-id38399 . -57) (undo-tree-id38400 . -57) (undo-tree-id38401 . -57) (undo-tree-id38402 . -57) (undo-tree-id38403 . -57) (undo-tree-id38404 . -57) (undo-tree-id38405 . -57) (undo-tree-id38406 . -57) (undo-tree-id38407 . -57) (undo-tree-id38408 . -57) (undo-tree-id38409 . -57) (undo-tree-id38410 . -57) (undo-tree-id38411 . -57) (undo-tree-id38412 . -61) (undo-tree-id38413 . -61) (undo-tree-id38414 . -61) (undo-tree-id38415 . -61) (undo-tree-id38416 . -61) (undo-tree-id38417 . -61) (undo-tree-id38418 . -61) (undo-tree-id38419 . -61) (undo-tree-id38420 . -61) (undo-tree-id38421 . -61) (undo-tree-id38422 . -61) (undo-tree-id38423 . -61) (undo-tree-id38424 . -61) (undo-tree-id38425 . -61) (undo-tree-id38426 . -61) (undo-tree-id38427 . -61) (undo-tree-id38428 . -61) (undo-tree-id38429 . -61) (undo-tree-id38430 . -61) (undo-tree-id38431 . -61) (undo-tree-id38432 . -61) (undo-tree-id38433 . -61) (undo-tree-id38434 . -61) (undo-tree-id38435 . -61) (undo-tree-id38436 . -61) (undo-tree-id38437 . -61) (undo-tree-id38438 . -61) (undo-tree-id38439 . -61) (undo-tree-id38440 . -61) (undo-tree-id38441 . -62) (undo-tree-id38442 . -62) (undo-tree-id38443 . -62) (undo-tree-id38444 . -62) (undo-tree-id38445 . -62) (undo-tree-id38446 . -62) (undo-tree-id38447 . -62) (undo-tree-id38448 . -62) (undo-tree-id38449 . -62) (undo-tree-id38450 . -62) (undo-tree-id38451 . -62) (undo-tree-id38452 . -62) (undo-tree-id38453 . -62) (undo-tree-id38454 . -62) (undo-tree-id38455 . -62) (undo-tree-id38456 . -62) (undo-tree-id38457 . -62) (undo-tree-id38458 . -62) (undo-tree-id38459 . -62) (undo-tree-id38460 . -62) (undo-tree-id38461 . -62) (undo-tree-id38462 . -62) (undo-tree-id38463 . -63) (undo-tree-id38464 . -63) (undo-tree-id38465 . -63) (undo-tree-id38466 . -63) (undo-tree-id38467 . -63) (undo-tree-id38468 . -63) (undo-tree-id38469 . -63) (undo-tree-id38470 . -63) (undo-tree-id38471 . -63) (undo-tree-id38472 . -63) (undo-tree-id38473 . -63) (undo-tree-id38474 . -63) (undo-tree-id38475 . -63) (undo-tree-id38476 . -63) (undo-tree-id38477 . -63) (undo-tree-id38478 . -63) (undo-tree-id38479 . -63) (undo-tree-id38480 . -63) (undo-tree-id38481 . -63) (undo-tree-id38482 . -63) (undo-tree-id38483 . -63) (undo-tree-id38484 . -63) (undo-tree-id38485 . -70) (undo-tree-id38486 . -70) (undo-tree-id38487 . -70) (undo-tree-id38488 . -70) (undo-tree-id38489 . -70) (undo-tree-id38490 . -70) (undo-tree-id38491 . -70) (undo-tree-id38492 . -70) (undo-tree-id38493 . -70) (undo-tree-id38494 . -70) (undo-tree-id38495 . -70) (undo-tree-id38496 . -70) (undo-tree-id38497 . -70) (undo-tree-id38498 . -70) (undo-tree-id38499 . -70) (undo-tree-id38500 . -70) (undo-tree-id38501 . -70) (undo-tree-id38502 . -70) (undo-tree-id38503 . -70) (undo-tree-id38504 . -70) (undo-tree-id38505 . -70) (undo-tree-id38506 . -70) (undo-tree-id38507 . -70) (undo-tree-id38508 . -70) (undo-tree-id38509 . -70) (undo-tree-id38510 . -70) (undo-tree-id38511 . -70) (undo-tree-id38512 . -70) (undo-tree-id38513 . -70) (undo-tree-id38514 . -142) (undo-tree-id38515 . -142) (undo-tree-id38516 . -142) (undo-tree-id38517 . -142) (undo-tree-id38518 . -142) (undo-tree-id38519 . -142) (undo-tree-id38520 . -142) (undo-tree-id38521 . -142) (undo-tree-id38522 . -142) (undo-tree-id38523 . -142) (undo-tree-id38524 . -142) (undo-tree-id38525 . -142) (undo-tree-id38526 . -142) (undo-tree-id38527 . -142) (undo-tree-id38528 . -142) (undo-tree-id38529 . -142) (undo-tree-id38530 . -142) (undo-tree-id38531 . -142) (undo-tree-id38532 . -142) (undo-tree-id38533 . -142) (undo-tree-id38534 . -142) (undo-tree-id38535 . -142) (undo-tree-id38536 . -142) (undo-tree-id38537 . -143) 3449 (t 25767 6335 71387 907000)) nil (25767 6412 210806 266000) 0 nil])
([nil nil ((#(" character based on the previous 100 characters, we can" 0 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 54 55 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3307) (undo-tree-id37888 . -54) (undo-tree-id37889 . 55) (undo-tree-id37890 . -20) (undo-tree-id37891 . -20) (undo-tree-id37892 . -20) (undo-tree-id37893 . -20) (undo-tree-id37894 . -20) (undo-tree-id37895 . -20) (undo-tree-id37896 . -20) (undo-tree-id37897 . -20) (undo-tree-id37898 . -20) (undo-tree-id37899 . -20) (undo-tree-id37900 . -20) (undo-tree-id37901 . -20) (undo-tree-id37902 . -20) (undo-tree-id37903 . -20) (undo-tree-id37904 . -20) (undo-tree-id37905 . -7) (undo-tree-id37906 . -7) (undo-tree-id37907 . -7) (undo-tree-id37908 . -7) (undo-tree-id37909 . -7) (undo-tree-id37910 . -7) (undo-tree-id37911 . -7) (undo-tree-id37912 . -7) (undo-tree-id37913 . -7) (undo-tree-id37914 . -7) (undo-tree-id37915 . -7) (undo-tree-id37916 . -7) (undo-tree-id37917 . -7) (undo-tree-id37918 . -7) (undo-tree-id37919 . -7) (undo-tree-id37920 . -7) (undo-tree-id37921 . -7) (undo-tree-id37922 . -7) (undo-tree-id37923 . -7) (undo-tree-id37924 . -7) (undo-tree-id37925 . -7) (undo-tree-id37926 . -7) (undo-tree-id37927 . -7) (undo-tree-id37928 . -7) (undo-tree-id37929 . -7) (undo-tree-id37930 . -7) (undo-tree-id37931 . -7) (undo-tree-id37932 . -7) (undo-tree-id37933 . -7) (undo-tree-id37934 . -9) (undo-tree-id37935 . -9) (undo-tree-id37936 . -9) (undo-tree-id37937 . -9) (undo-tree-id37938 . -9) (undo-tree-id37939 . -9) (undo-tree-id37940 . -9) (undo-tree-id37941 . -9) (undo-tree-id37942 . -9) (undo-tree-id37943 . -9) (undo-tree-id37944 . -9) (undo-tree-id37945 . -9) (undo-tree-id37946 . -9) (undo-tree-id37947 . -9) (undo-tree-id37948 . -9) (undo-tree-id37949 . -9) (undo-tree-id37950 . -9) (undo-tree-id37951 . -9) (undo-tree-id37952 . -9) (undo-tree-id37953 . -9) (undo-tree-id37954 . -9) (undo-tree-id37955 . -9) (undo-tree-id37956 . -15) (undo-tree-id37957 . -15) (undo-tree-id37958 . -15) (undo-tree-id37959 . -15) (undo-tree-id37960 . -15) (undo-tree-id37961 . -15) (undo-tree-id37962 . -15) (undo-tree-id37963 . -15) (undo-tree-id37964 . -18) (undo-tree-id37965 . -18) (undo-tree-id37966 . -18) (undo-tree-id37967 . -18) (undo-tree-id37968 . -18) (undo-tree-id37969 . -18) (undo-tree-id37970 . -18) (undo-tree-id37971 . -18) (undo-tree-id37972 . -22) (undo-tree-id37973 . -22) (undo-tree-id37974 . -22) (undo-tree-id37975 . -22) (undo-tree-id37976 . -22) (undo-tree-id37977 . -22) (undo-tree-id37978 . -22) (undo-tree-id37979 . -22) (undo-tree-id37980 . -31) (undo-tree-id37981 . -31) (undo-tree-id37982 . -31) (undo-tree-id37983 . -31) (undo-tree-id37984 . -31) (undo-tree-id37985 . -31) (undo-tree-id37986 . -31) (undo-tree-id37987 . -31) (undo-tree-id37988 . -35) (undo-tree-id37989 . -35) (undo-tree-id37990 . -35) (undo-tree-id37991 . -35) (undo-tree-id37992 . -35) (undo-tree-id37993 . -35) (undo-tree-id37994 . -35) (undo-tree-id37995 . -35) (undo-tree-id37996 . -46) (undo-tree-id37997 . -46) (undo-tree-id37998 . -46) (undo-tree-id37999 . -46) (undo-tree-id38000 . -46) (undo-tree-id38001 . -46) (undo-tree-id38002 . -46) (undo-tree-id38003 . -46) (undo-tree-id38004 . -47) (undo-tree-id38005 . -47) (undo-tree-id38006 . -47) (undo-tree-id38007 . -47) (undo-tree-id38008 . -47) (undo-tree-id38009 . -47) (undo-tree-id38010 . -47) (undo-tree-id38011 . -47) (undo-tree-id38012 . -50) (undo-tree-id38013 . -50) (undo-tree-id38014 . -50) (undo-tree-id38015 . -50) (undo-tree-id38016 . -50) (undo-tree-id38017 . -50) (undo-tree-id38018 . -50) (undo-tree-id38019 . -50) (undo-tree-id38020 . -54) (undo-tree-id38021 . -54) (undo-tree-id38022 . -54) (undo-tree-id38023 . -54) (undo-tree-id38024 . -54) (undo-tree-id38025 . -54) (undo-tree-id38026 . -54) (undo-tree-id38027 . -54) (undo-tree-id38028 . -55) (undo-tree-id38029 . -55)) nil (25767 6412 210114 99000) 0 nil])
([nil nil ((3304 . 3305) (#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3304) (undo-tree-id37884 . -1) (undo-tree-id37885 . -1) (undo-tree-id37886 . -1) (undo-tree-id37887 . -1)) nil (25767 6412 210018 131000) 0 nil])
([nil nil ((3304 . 3305) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3304) (undo-tree-id37872 . -1) (undo-tree-id37873 . -1) (undo-tree-id37874 . -1) (undo-tree-id37875 . -1) (undo-tree-id37876 . -1) (undo-tree-id37877 . -1) (undo-tree-id37878 . -1) (undo-tree-id37879 . -1) (undo-tree-id37880 . -1) (undo-tree-id37881 . -1) (undo-tree-id37882 . -1) (undo-tree-id37883 . -1)) nil (25767 6412 210012 450000) 0 nil])
([nil nil ((3304 . 3305) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3304) (undo-tree-id37869 . -1) (undo-tree-id37870 . -1) (undo-tree-id37871 . -1)) nil (25767 6412 209785 90000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2242) (undo-tree-id37865 . -1) (undo-tree-id37866 . -1) (undo-tree-id37867 . -1) (undo-tree-id37868 . -1)) nil (25767 6412 209778 915000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3303) (undo-tree-id38538 . -1) (undo-tree-id38539 . -1) (undo-tree-id38540 . -1) (undo-tree-id38541 . -1) (t 25767 6412 256034 962000)) nil (25767 6426 168417 757000) 0 nil])
([nil nil ((3303 . 3304) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3303) (undo-tree-id38542 . 1) (undo-tree-id38543 . -1) (undo-tree-id38544 . -1) (t 25767 6426 212153 721000)) nil (25767 11217 1287 530000) 0 nil])
([nil nil ((3851 . 3852) (3849 . 3851) (3848 . 3849) (3847 . 3848) 3847) nil (25767 11239 700651 106000) 0 nil] [nil nil ((nil rear-nonsticky nil 4249 . 4250) (nil fontified nil 4179 . 4250) (nil fontified nil 4105 . 4179) (nil fontified nil 4034 . 4105) (nil fontified nil 3963 . 4034) (nil fontified nil 3888 . 3963) (nil fontified nil 3847 . 3888) (3847 . 4250) (t 25767 6428 444172 763000)) ((#("Building and Training the Char-RNN Model
To predict the next character based on the previous 100 characters, we can
use an RNN with 2 GRU layers of 128 units each and 20% dropout on both
the inputs (dropout) and the hidden states (recurrent_dropout). We can
tweak these hyperparameters later, if needed. The output layer is a time-
distributed Dense layer like we saw in Chapter 15. This time this layer" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 40 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 116 187 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 187 240 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 240 241 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 241 248 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 248 258 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 258 332 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 332 402 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 402 403 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 3847) (undo-tree-id38799 . -403) (undo-tree-id38800 . -403) (undo-tree-id38801 . -403) (undo-tree-id38802 . -403) (undo-tree-id38803 . -403) (undo-tree-id38804 . 372) (undo-tree-id38805 . -34) (undo-tree-id38806 . -403) (undo-tree-id38807 . -403) (undo-tree-id38808 . -403) (undo-tree-id38809 . -403) (undo-tree-id38810 . -403) (undo-tree-id38811 . -403) (undo-tree-id38812 . -402) (undo-tree-id38813 . -41) (undo-tree-id38814 . -41) (undo-tree-id38815 . -41) (undo-tree-id38816 . -41) (undo-tree-id38817 . -41) (undo-tree-id38818 . -41) (undo-tree-id38819 . -41) (undo-tree-id38820 . -41) (undo-tree-id38821 . -41) (undo-tree-id38822 . -41) (undo-tree-id38823 . -182) (undo-tree-id38824 . -182) (undo-tree-id38825 . -182) (undo-tree-id38826 . -182) (undo-tree-id38827 . -182) (undo-tree-id38828 . -182) (undo-tree-id38829 . -182) (undo-tree-id38830 . -182) (undo-tree-id38831 . -182) (undo-tree-id38832 . -182) (undo-tree-id38833 . -182) (undo-tree-id38834 . -403) (undo-tree-id38835 . -403) (undo-tree-id38836 . -403) (undo-tree-id38837 . -403) (undo-tree-id38838 . -403) (undo-tree-id38839 . -403) (undo-tree-id38840 . -403) (undo-tree-id38841 . -403) (undo-tree-id38842 . -403) (undo-tree-id38843 . -403) (undo-tree-id38844 . -403) (undo-tree-id38845 . -403) (undo-tree-id38846 . -403) (undo-tree-id38847 . -403) (undo-tree-id38848 . -403) (undo-tree-id38849 . -403) (undo-tree-id38850 . -403) (undo-tree-id38851 . -403) (undo-tree-id38852 . -403) (undo-tree-id38853 . -403) (undo-tree-id38854 . -403) (undo-tree-id38855 . -403) (undo-tree-id38856 . -403) (undo-tree-id38857 . -403) (undo-tree-id38858 . -403) (undo-tree-id38859 . -403) (undo-tree-id38860 . -403) (undo-tree-id38861 . -403) (undo-tree-id38862 . -403) (undo-tree-id38863 . -403) (undo-tree-id38864 . -403) (undo-tree-id38865 . -403) (undo-tree-id38866 . -403) (undo-tree-id38867 . -403) (undo-tree-id38868 . -403) (undo-tree-id38869 . -403) (undo-tree-id38870 . -403) (undo-tree-id38871 . -403) (undo-tree-id38872 . -403) (undo-tree-id38873 . -403) (undo-tree-id38874 . -403) (undo-tree-id38875 . -403) (undo-tree-id38876 . -403) (undo-tree-id38877 . -403) (undo-tree-id38878 . -403) (undo-tree-id38879 . -403) (undo-tree-id38880 . -403) (undo-tree-id38881 . -403) (undo-tree-id38882 . -403) (undo-tree-id38883 . -41) (undo-tree-id38884 . -41) (undo-tree-id38885 . -41) (undo-tree-id38886 . -41) (undo-tree-id38887 . -41) (undo-tree-id38888 . -41) (undo-tree-id38889 . -41) (undo-tree-id38890 . -41) (undo-tree-id38891 . -41) (undo-tree-id38892 . -41) (undo-tree-id38893 . -41) (undo-tree-id38894 . -41) (undo-tree-id38895 . -41) (undo-tree-id38896 . -41) (undo-tree-id38897 . -41) (undo-tree-id38898 . -41) (undo-tree-id38899 . -41) (undo-tree-id38900 . -41) (undo-tree-id38901 . -41) (undo-tree-id38902 . -41) (undo-tree-id38903 . -41) (undo-tree-id38904 . -41) (undo-tree-id38905 . -41) (undo-tree-id38906 . -41) (undo-tree-id38907 . -41) (undo-tree-id38908 . -41) (undo-tree-id38909 . -41) (undo-tree-id38910 . -41) (undo-tree-id38911 . -41) (undo-tree-id38912 . -41) (undo-tree-id38913 . -41) (undo-tree-id38914 . -41) (undo-tree-id38915 . -41) (undo-tree-id38916 . -41) (undo-tree-id38917 . -41) (undo-tree-id38918 . -41) (undo-tree-id38919 . -41) (undo-tree-id38920 . -41) (undo-tree-id38921 . -41) (undo-tree-id38922 . -41) (undo-tree-id38923 . -41) (undo-tree-id38924 . -41) (undo-tree-id38925 . -41) (undo-tree-id38926 . -41) (undo-tree-id38927 . -41) (undo-tree-id38928 . -41) (undo-tree-id38929 . -41) (undo-tree-id38930 . -41) (undo-tree-id38931 . -41) (undo-tree-id38932 . -41) (undo-tree-id38933 . -41) (undo-tree-id38934 . -41) (undo-tree-id38935 . -41) (undo-tree-id38936 . -41) (undo-tree-id38937 . -41) (undo-tree-id38938 . -41) (undo-tree-id38939 . -41) (undo-tree-id38940 . -41) (undo-tree-id38941 . -41) (undo-tree-id38942 . -41) (undo-tree-id38943 . -41) (undo-tree-id38944 . -41) (undo-tree-id38945 . -41) (undo-tree-id38946 . -403) (undo-tree-id38947 . -403) (undo-tree-id38948 . -403) (undo-tree-id38949 . -403) (undo-tree-id38950 . -403) (undo-tree-id38951 . -403) (undo-tree-id38952 . -403) (undo-tree-id38953 . -403) (undo-tree-id38954 . -403) (undo-tree-id38955 . -403) (undo-tree-id38956 . -403) (undo-tree-id38957 . -403) (undo-tree-id38958 . -403) (undo-tree-id38959 . -403) (undo-tree-id38960 . -403) (undo-tree-id38961 . -403) (undo-tree-id38962 . -403) (undo-tree-id38963 . -403) (undo-tree-id38964 . -403) (undo-tree-id38965 . -403) (undo-tree-id38966 . -402) (undo-tree-id38967 . -402) (undo-tree-id38968 . -402) (undo-tree-id38969 . -402) (undo-tree-id38970 . -402) (undo-tree-id38971 . -402) (undo-tree-id38972 . -402) (undo-tree-id38973 . -402) (undo-tree-id38974 . -402) (undo-tree-id38975 . -402) (undo-tree-id38976 . -402) (undo-tree-id38977 . -402) (undo-tree-id38978 . -402) (undo-tree-id38979 . -402) (undo-tree-id38980 . -402) (undo-tree-id38981 . -402) (undo-tree-id38982 . -402) (undo-tree-id38983 . -402) (nil fontified t 3887 . 3888) (nil fontified t 3848 . 3887) (nil fontified t 3847 . 3848) (nil fontified t 3888 . 3963) (nil fontified t 3963 . 4034) (nil fontified t 4095 . 4105) (nil fontified t 4088 . 4095) (nil fontified t 4087 . 4088) (nil fontified t 4034 . 4087) (nil fontified t 4105 . 4179) (nil rear-nonsticky t 4249 . 4250)) (25767 11216 25339 886000) 0 nil])
([nil nil ((3852 . 3853)) nil (25767 11239 700645 702000) 0 nil])
([nil nil ((4250 . 4252)) ((#("

" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4250) (undo-tree-id38718 . -2) (undo-tree-id38719 . -2) (undo-tree-id38720 . -2) (undo-tree-id38721 . -2) (undo-tree-id38722 . -2) (undo-tree-id38723 . -2) (undo-tree-id38724 . -2) (undo-tree-id38725 . -2) (undo-tree-id38726 . -2) (undo-tree-id38727 . -2) (undo-tree-id38728 . -2) (undo-tree-id38729 . -2) (undo-tree-id38730 . -2) (undo-tree-id38731 . -2) (undo-tree-id38732 . -2) (undo-tree-id38733 . -2) (undo-tree-id38734 . -2) (undo-tree-id38735 . -2) (undo-tree-id38736 . -2) (undo-tree-id38737 . -2) (undo-tree-id38738 . -2) (undo-tree-id38739 . -2) (undo-tree-id38740 . -2) (undo-tree-id38741 . -2) (undo-tree-id38742 . -2) (undo-tree-id38743 . -2) (undo-tree-id38744 . -2) (undo-tree-id38745 . -2) (undo-tree-id38746 . -2) (undo-tree-id38747 . -2) (undo-tree-id38748 . -2) (undo-tree-id38749 . -2) (undo-tree-id38750 . -2) (undo-tree-id38751 . -2) (undo-tree-id38752 . -2) (undo-tree-id38753 . -2) (undo-tree-id38754 . -2) (undo-tree-id38755 . -2) (undo-tree-id38756 . -2) (undo-tree-id38757 . -2) (undo-tree-id38758 . -2) (undo-tree-id38759 . -2) (undo-tree-id38760 . -2) (undo-tree-id38761 . -2) (undo-tree-id38762 . -2) (undo-tree-id38763 . -2) (undo-tree-id38764 . -2) (undo-tree-id38765 . -2) (undo-tree-id38766 . -2) (undo-tree-id38767 . -2) (undo-tree-id38768 . -2) (undo-tree-id38769 . -2) (undo-tree-id38770 . -2) (undo-tree-id38771 . -2) (undo-tree-id38772 . -2) (undo-tree-id38773 . -2) (undo-tree-id38774 . -2) (undo-tree-id38775 . -2) (undo-tree-id38776 . -2) (undo-tree-id38777 . -2) (undo-tree-id38778 . -2) (undo-tree-id38779 . -2) (undo-tree-id38780 . -2) (undo-tree-id38781 . -2) (undo-tree-id38782 . -2) (undo-tree-id38783 . -2) (undo-tree-id38784 . -2) (undo-tree-id38785 . -2) (undo-tree-id38786 . -2) (undo-tree-id38787 . -2) (undo-tree-id38788 . -2) (undo-tree-id38789 . -2) (undo-tree-id38790 . -2) (undo-tree-id38791 . -2) (undo-tree-id38792 . -2) (undo-tree-id38793 . -2) (undo-tree-id38794 . -2) (undo-tree-id38795 . -2) (undo-tree-id38796 . -2) (undo-tree-id38797 . -2) (undo-tree-id38798 . -2)) (25767 11215 296282 110000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4252 . 4253) (nil fontified nil 4182 . 4253) (nil fontified nil 4108 . 4182) (nil fontified nil 4037 . 4108) (nil fontified nil 3966 . 4037) (nil fontified nil 3891 . 3966) (nil fontified nil 3850 . 3891) (3850 . 4253) 3849 (t 25767 11239 745781 90000)) nil (25767 11249 791366 967000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5159 . 5160) (nil fontified nil 5089 . 5160) (nil fontified nil 5086 . 5089) (nil fontified nil 5063 . 5086) (nil fontified nil 5007 . 5063) (nil fontified nil 4970 . 5007) (nil fontified nil 4925 . 4970) (nil fontified nil 4888 . 4925) (nil fontified nil 4879 . 4888) (nil fontified nil 4815 . 4879) (nil fontified nil 4781 . 4815) (nil fontified nil 4740 . 4781) (nil fontified nil 4665 . 4740) (nil fontified nil 4603 . 4665) (nil fontified nil 4548 . 4603) (nil fontified nil 4476 . 4548) (nil fontified nil 4402 . 4476) (nil fontified nil 4328 . 4402) (nil fontified nil 4252 . 4328) (4252 . 5160)) ((#("must have 39 units (max_id) because there are 39 distinct characters in the
text, and we want to output a probability for each possible character (at
each time step). The output probabilities should sum up to 1 at each time
step, so we apply the softmax activation function to the outputs of the
Dense layer. We can then compile this model, using the
\"sparse_categorical_crossentropy\" loss and an Adam optimizer.
Finally, we are ready to train the model for several epochs (this may take
many hours, depending on your hardware):
model = keras.models.Sequential([
keras.layers.GRU(128, return_sequences=True, input_shape=[None,
max_id],
dropout=0.2, recurrent_dropout=0.2),
keras.layers.GRU(128, return_sequences=True,
dropout=0.2, recurrent_dropout=0.2),
keras.layers.TimeDistributed(keras.layers.Dense(max_id,
activation=\"softmax\"))
])
model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\")" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 23 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 24 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 26 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 76 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 150 224 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 224 296 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 296 351 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 351 358 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 358 359 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 359 370 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 370 371 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 371 383 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 383 413 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 413 488 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 488 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 500 529 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 529 563 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 563 591 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 591 592 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 592 601 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 601 613 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 613 614 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 614 619 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 619 627 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 627 630 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 630 631 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 631 633 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 633 636 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 636 658 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 658 659 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 659 666 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 666 673 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 673 701 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 701 702 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 702 711 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 711 718 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 718 740 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 740 741 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 741 748 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 748 755 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 755 806 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 806 807 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 807 809 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 809 811 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 811 834 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 834 837 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 837 863 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 863 864 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 864 875 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 875 876 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 876 888 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 888 907 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 907 908 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 4252) (undo-tree-id38645 . -908) (undo-tree-id38646 . -908) (undo-tree-id38647 . -907) (undo-tree-id38648 . -908) (undo-tree-id38649 . -908) (undo-tree-id38650 . -908) (undo-tree-id38651 . -908) (undo-tree-id38652 . -908) (undo-tree-id38653 . -136) (undo-tree-id38654 . -136) (undo-tree-id38655 . -136) (undo-tree-id38656 . -136) (undo-tree-id38657 . -136) (undo-tree-id38658 . -136) (undo-tree-id38659 . -136) (undo-tree-id38660 . -136) (undo-tree-id38661 . -136) (undo-tree-id38662 . -136) (undo-tree-id38663 . -136) (undo-tree-id38664 . -136) (undo-tree-id38665 . -136) (undo-tree-id38666 . -136) (undo-tree-id38667 . -136) (undo-tree-id38668 . -136) (undo-tree-id38669 . -136) (undo-tree-id38670 . -136) (undo-tree-id38671 . -136) (undo-tree-id38672 . -136) (undo-tree-id38673 . -136) (undo-tree-id38674 . -136) (undo-tree-id38675 . -136) (undo-tree-id38676 . -136) (undo-tree-id38677 . -136) (undo-tree-id38678 . -136) (undo-tree-id38679 . -136) (undo-tree-id38680 . -136) (undo-tree-id38681 . -136) (undo-tree-id38682 . -136) (undo-tree-id38683 . -136) (undo-tree-id38684 . -136) (undo-tree-id38685 . -136) (undo-tree-id38686 . -136) (undo-tree-id38687 . -136) (undo-tree-id38688 . -136) (undo-tree-id38689 . -136) (undo-tree-id38690 . -136) (undo-tree-id38691 . -136) (undo-tree-id38692 . -136) (undo-tree-id38693 . -136) (undo-tree-id38694 . -136) (undo-tree-id38695 . -136) (undo-tree-id38696 . -136) (undo-tree-id38697 . -136) (undo-tree-id38698 . -136) (undo-tree-id38699 . -136) (undo-tree-id38700 . -136) (undo-tree-id38701 . -136) (undo-tree-id38702 . -136) (undo-tree-id38703 . 6) (undo-tree-id38704 . -906) (undo-tree-id38705 . -907) (undo-tree-id38706 . -907) (undo-tree-id38707 . -907) (undo-tree-id38708 . -907) (undo-tree-id38709 . -907) (undo-tree-id38710 . -907) (undo-tree-id38711 . -907) (undo-tree-id38712 . -907) (undo-tree-id38713 . -907) (undo-tree-id38714 . -907) (undo-tree-id38715 . -907) (undo-tree-id38716 . -907) (undo-tree-id38717 . -907) (nil fontified t 4278 . 4328) (nil fontified t 4276 . 4278) (nil fontified t 4275 . 4276) (nil fontified t 4252 . 4275) (nil fontified t 4328 . 4402) (nil fontified t 4402 . 4476) (nil fontified t 4476 . 4548) (nil fontified t 4548 . 4603) (nil fontified t 4635 . 4665) (nil fontified t 4623 . 4635) (nil fontified t 4622 . 4623) (nil fontified t 4611 . 4622) (nil fontified t 4610 . 4611) (nil fontified t 4603 . 4610) (nil fontified t 4665 . 4740) (nil fontified t 4752 . 4781) (nil fontified t 4740 . 4752) (nil fontified t 4781 . 4815) (nil fontified t 4871 . 4879) (nil fontified t 4866 . 4871) (nil fontified t 4865 . 4866) (nil fontified t 4853 . 4865) (nil fontified t 4844 . 4853) (nil fontified t 4843 . 4844) (nil fontified t 4815 . 4843) (nil fontified t 4885 . 4888) (nil fontified t 4883 . 4885) (nil fontified t 4882 . 4883) (nil fontified t 4879 . 4882) (nil fontified t 4918 . 4925) (nil fontified t 4911 . 4918) (nil fontified t 4910 . 4911) (nil fontified t 4888 . 4910) (nil fontified t 4963 . 4970) (nil fontified t 4954 . 4963) (nil fontified t 4953 . 4954) (nil fontified t 4925 . 4953) (nil fontified t 5000 . 5007) (nil fontified t 4993 . 5000) (nil fontified t 4992 . 4993) (nil fontified t 4970 . 4992) (nil fontified t 5061 . 5063) (nil fontified t 5059 . 5061) (nil fontified t 5058 . 5059) (nil fontified t 5007 . 5058) (nil fontified t 5063 . 5086) (nil fontified t 5086 . 5089) (nil rear-nonsticky t 5159 . 5160)) (25767 11213 940620 797000) 0 nil])
([nil nil ((3850 . 3851) (t 25767 11249 837384 427000)) nil (25767 11254 740750 277000) 0 nil])
([nil nil ((3847 . 3849)) ((#("* " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 3847)) (25767 11213 713107 85000) 0 nil])
([nil nil ((4257 . 4258) (t 25767 11254 781194 224000)) nil (25767 11290 610963 659000) 0 nil])
([nil nil ((5162 . 5163)) ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5162) (undo-tree-id38638 . -1) (undo-tree-id38639 . -1) (undo-tree-id38640 . -1) (undo-tree-id38641 . -1) (undo-tree-id38642 . -1) (undo-tree-id38643 . -1) (undo-tree-id38644 . -1)) (25767 11213 441288 461000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5205 . 5206) (nil fontified nil 5167 . 5206) (nil fontified nil 5095 . 5167) (nil fontified nil 5092 . 5095) (nil fontified nil 5069 . 5092) (nil fontified nil 5013 . 5069) (nil fontified nil 4976 . 5013) (nil fontified nil 4931 . 4976) (nil fontified nil 4894 . 4931) (nil fontified nil 4885 . 4894) (nil fontified nil 4821 . 4885) (nil fontified nil 4787 . 4821) (nil fontified nil 4746 . 4787) (nil fontified nil 4671 . 4746) (nil fontified nil 4609 . 4671) (nil fontified nil 4554 . 4609) (nil fontified nil 4482 . 4554) (nil fontified nil 4408 . 4482) (nil fontified nil 4334 . 4408) (nil fontified nil 4258 . 4334) (4258 . 5206)) nil (25767 11290 610961 111000) 0 nil])
([nil nil ((#("_____ " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t invisible org-link) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t invisible org-link) 5 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 346) (undo-tree-id38545 . -5) (undo-tree-id38547 . -6) (t 25767 6550 17227 806000)) ((346 . 352)) (25767 11213 204364 268000) 0 nil])
([nil nil ((5206 . 5207)) nil (25767 11290 610952 851000) 0 nil])
([nil nil ((1531 . 1532) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1531) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1531) (undo-tree-id38550 . -1) (undo-tree-id38552 . -1) (undo-tree-id38554 . -1) (undo-tree-id38556 . -1) 1501 (t 25767 10784 190093 990000)) ((1531 . 1532) (1531 . 1533) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1531)) (25767 11212 702869 614000) 0 nil])
([nil nil ((#("To predict the next character based on the previous 100 characters" 0 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3892) (undo-tree-id39087 . -65) (undo-tree-id39088 . -56) (undo-tree-id39089 . -56) (undo-tree-id39090 . 66) (undo-tree-id39091 . -3) (undo-tree-id39092 . -3) (undo-tree-id39093 . -3) (undo-tree-id39094 . -3) (undo-tree-id39095 . -3) (undo-tree-id39096 . -3) (undo-tree-id39097 . -3) (undo-tree-id39098 . -3) (undo-tree-id39099 . -3) (undo-tree-id39100 . -3) (undo-tree-id39101 . -3) (undo-tree-id39102 . -11) (undo-tree-id39103 . -11) (undo-tree-id39104 . -11) (undo-tree-id39105 . -11) (undo-tree-id39106 . -11) (undo-tree-id39107 . -11) (undo-tree-id39108 . -11) (undo-tree-id39109 . -11) (undo-tree-id39110 . -11) (undo-tree-id39111 . -11) (undo-tree-id39112 . -11) (undo-tree-id39113 . -11) (undo-tree-id39114 . -11) (undo-tree-id39115 . -11) (undo-tree-id39116 . -11) (undo-tree-id39117 . -11) (undo-tree-id39118 . -15) (undo-tree-id39119 . -15) (undo-tree-id39120 . -15) (undo-tree-id39121 . -15) (undo-tree-id39122 . -15) (undo-tree-id39123 . -15) (undo-tree-id39124 . -15) (undo-tree-id39125 . -15) (undo-tree-id39126 . -15) (undo-tree-id39127 . -15) (undo-tree-id39128 . -15) (undo-tree-id39129 . -20) (undo-tree-id39130 . -20) (undo-tree-id39131 . -20) (undo-tree-id39132 . -20) (undo-tree-id39133 . -20) (undo-tree-id39134 . -20) (undo-tree-id39135 . -20) (undo-tree-id39136 . -20) (undo-tree-id39137 . -20) (undo-tree-id39138 . -20) (undo-tree-id39139 . -20) (undo-tree-id39140 . -30) (undo-tree-id39141 . -30) (undo-tree-id39142 . -30) (undo-tree-id39143 . -30) (undo-tree-id39144 . -30) (undo-tree-id39145 . -30) (undo-tree-id39146 . -30) (undo-tree-id39147 . -30) (undo-tree-id39148 . -30) (undo-tree-id39149 . -30) (undo-tree-id39150 . -30) (undo-tree-id39151 . -36) (undo-tree-id39152 . -36) (undo-tree-id39153 . -36) (undo-tree-id39154 . -36) (undo-tree-id39155 . -36) (undo-tree-id39156 . -36) (undo-tree-id39157 . -36) (undo-tree-id39158 . -36) (undo-tree-id39159 . -36) (undo-tree-id39160 . -36) (undo-tree-id39161 . -36) (undo-tree-id39162 . -39) (undo-tree-id39163 . -39) (undo-tree-id39164 . -39) (undo-tree-id39165 . -39) (undo-tree-id39166 . -39) (undo-tree-id39167 . -39) (undo-tree-id39168 . -39) (undo-tree-id39169 . -39) (undo-tree-id39170 . -39) (undo-tree-id39171 . -39) (undo-tree-id39172 . -39) (undo-tree-id39173 . -43) (undo-tree-id39174 . -43) (undo-tree-id39175 . -43) (undo-tree-id39176 . -43) (undo-tree-id39177 . -43) (undo-tree-id39178 . -43) (undo-tree-id39179 . -43) (undo-tree-id39180 . -43) (undo-tree-id39181 . -43) (undo-tree-id39182 . -43) (undo-tree-id39183 . -43) (undo-tree-id39184 . -52) (undo-tree-id39185 . -52) (undo-tree-id39186 . -52) (undo-tree-id39187 . -52) (undo-tree-id39188 . -52) (undo-tree-id39189 . -52) (undo-tree-id39190 . -52) (undo-tree-id39191 . -52) (undo-tree-id39192 . -52) (undo-tree-id39193 . -52) (undo-tree-id39194 . -52) (undo-tree-id39195 . -56) (undo-tree-id39196 . -56) (undo-tree-id39197 . -56) (undo-tree-id39198 . -56) (undo-tree-id39199 . -56) (undo-tree-id39200 . -56) (undo-tree-id39201 . -56) (undo-tree-id39202 . -56) (undo-tree-id39203 . -56) (undo-tree-id39204 . -56) (undo-tree-id39205 . -56) (undo-tree-id39206 . -56) (undo-tree-id39207 . -56) (undo-tree-id39208 . -56) (undo-tree-id39209 . -56) (undo-tree-id39210 . -56) (undo-tree-id39211 . -56) (undo-tree-id39212 . -56) (undo-tree-id39213 . -56) (undo-tree-id39214 . -56) (undo-tree-id39215 . -56) (undo-tree-id39216 . -56) (undo-tree-id39217 . -56) (undo-tree-id39218 . -56) (undo-tree-id39219 . -56) (undo-tree-id39220 . -56) (undo-tree-id39221 . -56) (undo-tree-id39222 . -56) (undo-tree-id39223 . -56) (undo-tree-id39224 . -56) (undo-tree-id39225 . -56) (undo-tree-id39226 . -56) (undo-tree-id39227 . -56) (undo-tree-id39228 . -56) (undo-tree-id39229 . -56) (undo-tree-id39230 . -56) (undo-tree-id39231 . -56) (undo-tree-id39232 . -56) (undo-tree-id39233 . -56) (undo-tree-id39234 . -56) (undo-tree-id39235 . -56) (undo-tree-id39236 . -56) (undo-tree-id39237 . -56) (undo-tree-id39238 . -56) (undo-tree-id39239 . -65) (undo-tree-id39240 . -65) (undo-tree-id39241 . -65) (undo-tree-id39242 . -65) (undo-tree-id39243 . -65) (undo-tree-id39244 . -65) (undo-tree-id39245 . -65) (undo-tree-id39246 . -65) (undo-tree-id39247 . -65) (undo-tree-id39248 . -65) (undo-tree-id39249 . -65) (undo-tree-id39250 . -65) (undo-tree-id39251 . -65) (undo-tree-id39252 . -65) (undo-tree-id39253 . -65) (undo-tree-id39254 . -65) (undo-tree-id39255 . -65) (undo-tree-id39256 . -65) (undo-tree-id39257 . -65) (undo-tree-id39258 . -65) (undo-tree-id39259 . -65) (undo-tree-id39260 . -65) (undo-tree-id39261 . -65) (undo-tree-id39262 . -65) (undo-tree-id39263 . -65) (undo-tree-id39264 . -65) (undo-tree-id39265 . -65) (undo-tree-id39266 . -65) (undo-tree-id39267 . -65) (undo-tree-id39268 . -65) (undo-tree-id39269 . -65) (undo-tree-id39270 . -65) (undo-tree-id39271 . -65) (undo-tree-id39272 . -65) (undo-tree-id39273 . -65) (undo-tree-id39274 . -65) (undo-tree-id39275 . -65) (undo-tree-id39276 . -65) (undo-tree-id39277 . -65) (undo-tree-id39278 . -65) (undo-tree-id39279 . -65) (undo-tree-id39280 . -65) (undo-tree-id39281 . -65) (undo-tree-id39282 . -65) (undo-tree-id39283 . -65) (undo-tree-id39284 . -65) (undo-tree-id39285 . -65) (undo-tree-id39286 . -65) (undo-tree-id39287 . -65) (undo-tree-id39288 . -65) (undo-tree-id39289 . -65) (undo-tree-id39290 . -65) (undo-tree-id39291 . -65) (undo-tree-id39292 . -65) (undo-tree-id39293 . -9) (undo-tree-id39294 . -9) (undo-tree-id39295 . -9) (undo-tree-id39296 . -9) (undo-tree-id39297 . -9) (undo-tree-id39298 . -9) (undo-tree-id39299 . -9) (undo-tree-id39300 . -9) (undo-tree-id39301 . -9) (undo-tree-id39302 . -9) (undo-tree-id39303 . -9) (undo-tree-id39304 . -9) (undo-tree-id39305 . -9) (undo-tree-id39306 . -9) (undo-tree-id39307 . -9) (undo-tree-id39308 . -9) (undo-tree-id39309 . -3) (undo-tree-id39310 . -3) (undo-tree-id39311 . -3) (undo-tree-id39312 . -3) (undo-tree-id39313 . -3) (undo-tree-id39314 . -3) (undo-tree-id39315 . -3) (undo-tree-id39316 . -3) (undo-tree-id39317 . -3) (undo-tree-id39318 . -3) (undo-tree-id39319 . -3) (undo-tree-id39320 . -66) (t 25767 11290 703890 865000)) nil (25767 11335 384405 306000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1923) (undo-tree-id38558 . 1) (undo-tree-id38559 . -1) (undo-tree-id38561 . -1) (t 25767 10830 851415 461000)) ((1923 . 1924)) (25767 11212 62886 366000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3892) (undo-tree-id39083 . 1) (undo-tree-id39084 . 1) (undo-tree-id39085 . -1) (undo-tree-id39086 . -1)) nil (25767 11335 383473 32000) 0 nil])
([nil nil ((#("  set, and create a tf.data.Dataset that will return each character one by one
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 11 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 42 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1918) (undo-tree-id38565 . -78) (undo-tree-id38567 . -5) (undo-tree-id38569 . -5) (undo-tree-id38571 . -5) (undo-tree-id38573 . -5) (undo-tree-id38575 . -5) (undo-tree-id38577 . -5) (undo-tree-id38579 . -5) (undo-tree-id38581 . -5) (undo-tree-id38583 . -5) (undo-tree-id38584 . -2) (undo-tree-id38586 . -5) (undo-tree-id38588 . -5) (undo-tree-id38590 . -5) (undo-tree-id38592 . -5) (undo-tree-id38594 . -77) (undo-tree-id38596 . -5) (undo-tree-id38598 . -5) (undo-tree-id38600 . -5) (undo-tree-id38602 . -5) (undo-tree-id38604 . -2) (undo-tree-id38606 . -2) (undo-tree-id38608 . -2) (undo-tree-id38610 . -2) (undo-tree-id38612 . -2) (undo-tree-id38614 . -2) (undo-tree-id38616 . -2) (undo-tree-id38618 . -2) (undo-tree-id38620 . -2) (undo-tree-id38622 . -2) (undo-tree-id38624 . -2) (undo-tree-id38626 . -2) (undo-tree-id38628 . -2) 1920 (t 25767 10869 996516 616000)) ((1918 . 1997)) (25767 11211 576820 615000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 3892) (undo-tree-id39079 . 1) (undo-tree-id39080 . 1) (undo-tree-id39081 . -1) (undo-tree-id39082 . -1)) nil (25767 11335 383465 694000) 0 nil])
([nil nil ((#("from this set: " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1920) (undo-tree-id38562 . -14) (undo-tree-id38564 . -15)) ((1920 . 1935) (t 25767 10899 645346 444000)) (25767 11047 843755 279000) 0 nil])
([nil nil ((3892 . 3894)) nil (25767 11335 382926 19000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5779 . 5780) (nil fontified nil 5745 . 5780) (nil fontified nil 5671 . 5745) (nil fontified nil 5598 . 5671) (nil fontified nil 5524 . 5598) (nil fontified nil 5446 . 5524) (nil fontified nil 5370 . 5446) (nil fontified nil 5293 . 5370) (nil fontified nil 5219 . 5293) (nil fontified nil 5139 . 5219) (nil fontified nil 5060 . 5139) (5060 . 5780) (t 25767 10899 645346 444000)) ((#("There are 20,640 instances in the dataset, which means that it is fairly small
by Machine Learning standards, but it’s perfect to get started. Notice that the
total_bedrooms attribute has only 20,433 nonnull values, meaning that 207
districts are missing this feature. We will need to take care of this later.
All attributes are numerical, except the ocean_proximity field. Its type is
object, so it could hold any kind of Python object. But since you loaded this
data from a CSV file, you know that it must be a text attribute. When you
looked at the top five rows, you probably noticed that the values in the
ocean_proximity column were repetitive, which means that it is probably a
categorical attribute. You can find" 0 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 79 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 159 164 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 164 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 165 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 173 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 233 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 310 356 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 356 357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 357 366 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 366 386 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 386 464 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 464 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 500 538 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 538 611 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 611 616 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 616 617 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 617 626 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 626 685 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 685 719 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 719 720 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 5060) (undo-tree-id38634 . -719) (undo-tree-id38635 . -719) (undo-tree-id38636 . -719) (undo-tree-id38637 . -719) (nil fontified t 5060 . 5139) (nil fontified t 5139 . 5219) (nil fontified t 5233 . 5293) (nil fontified t 5225 . 5233) (nil fontified t 5224 . 5225) (nil fontified t 5219 . 5224) (nil fontified t 5293 . 5370) (nil fontified t 5426 . 5446) (nil fontified t 5417 . 5426) (nil fontified t 5416 . 5417) (nil fontified t 5370 . 5416) (nil fontified t 5446 . 5524) (nil fontified t 5560 . 5598) (nil fontified t 5524 . 5560) (nil fontified t 5598 . 5671) (nil fontified t 5686 . 5745) (nil fontified t 5677 . 5686) (nil fontified t 5676 . 5677) (nil fontified t 5671 . 5676) (nil rear-nonsticky t 5779 . 5780)) (25767 11047 842451 810000) 0 nil] [nil nil ((nil rear-nonsticky nil 5779 . 5780) (nil fontified nil 5745 . 5780) (nil fontified nil 5671 . 5745) (nil fontified nil 5598 . 5671) (nil fontified nil 5524 . 5598) (nil fontified nil 5446 . 5524) (nil fontified nil 5370 . 5446) (nil fontified nil 5293 . 5370) (nil fontified nil 5219 . 5293) (nil fontified nil 5139 . 5219) (nil fontified nil 5060 . 5139) (5060 . 5780) (t 25767 10899 645346 444000)) ((#("There are 20,640 instances in the dataset, which means that it is fairly small
by Machine Learning standards, but it’s perfect to get started. Notice that the
total_bedrooms attribute has only 20,433 nonnull values, meaning that 207
districts are missing this feature. We will need to take care of this later.
All attributes are numerical, except the ocean_proximity field. Its type is
object, so it could hold any kind of Python object. But since you loaded this
data from a CSV file, you know that it must be a text attribute. When you
looked at the top five rows, you probably noticed that the values in the
ocean_proximity column were repetitive, which means that it is probably a
categorical attribute. You can find" 0 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 79 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 159 164 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 164 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 165 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 173 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 233 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 310 356 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 356 357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 357 366 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 366 386 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 386 464 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 464 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 500 538 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 538 611 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 611 616 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 616 617 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil invisible t) 617 626 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 626 685 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 685 719 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 719 720 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil rear-nonsticky nil)) . 5060) (undo-tree-id38630 . -719) (undo-tree-id38631 . -719) (undo-tree-id38632 . -719) (undo-tree-id38633 . -719) (nil fontified t 5060 . 5139) (nil fontified t 5139 . 5219) (nil fontified t 5233 . 5293) (nil fontified t 5225 . 5233) (nil fontified t 5224 . 5225) (nil fontified t 5219 . 5224) (nil fontified t 5293 . 5370) (nil fontified t 5426 . 5446) (nil fontified t 5417 . 5426) (nil fontified t 5416 . 5417) (nil fontified t 5370 . 5416) (nil fontified t 5446 . 5524) (nil fontified t 5560 . 5598) (nil fontified t 5524 . 5560) (nil fontified t 5598 . 5671) (nil fontified t 5686 . 5745) (nil fontified t 5677 . 5686) (nil fontified t 5676 . 5677) (nil fontified t 5671 . 5676) (nil rear-nonsticky t 5779 . 5780)) (25767 11038 926093 9000) 0 nil])
([nil nil ((3900 . 3901) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3900) (undo-tree-id39078 . -1) 3893) nil (25767 11335 382924 948000) 0 nil])
nil
nil
([nil nil ((3894 . 3895) (#("w" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3894)) nil (25767 11335 382922 790000) 0 nil])
([nil nil ((#("can" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3897) (undo-tree-id39059 . -2) (undo-tree-id39060 . -3) (undo-tree-id39061 . -3) (undo-tree-id39062 . -3) (undo-tree-id39063 . -3) (undo-tree-id39064 . -3) (undo-tree-id39065 . -3) (undo-tree-id39066 . -3) (undo-tree-id39067 . -3) (undo-tree-id39068 . -3) (undo-tree-id39069 . -3) (undo-tree-id39070 . -3) (undo-tree-id39071 . -3) (undo-tree-id39072 . -3) (undo-tree-id39073 . -3) (undo-tree-id39074 . -3) (undo-tree-id39075 . -3) (undo-tree-id39076 . -3) (undo-tree-id39077 . -3)) nil (25767 11335 382920 714000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 3896) (undo-tree-id38984 . -1) (undo-tree-id38985 . -1) (undo-tree-id38986 . -1) (undo-tree-id38987 . -1) (undo-tree-id38988 . -1) (undo-tree-id38989 . -1) (undo-tree-id38990 . -1) (undo-tree-id38991 . -1) (undo-tree-id38992 . -1) (undo-tree-id38993 . -1) (undo-tree-id38994 . -1) (undo-tree-id38995 . -1) (undo-tree-id38996 . -1) (undo-tree-id38997 . -1) (undo-tree-id38998 . -1) (undo-tree-id38999 . -1) (undo-tree-id39000 . -1) (undo-tree-id39001 . -1) (undo-tree-id39002 . -1) (undo-tree-id39003 . -1) (undo-tree-id39004 . -1) (undo-tree-id39005 . -1) (undo-tree-id39006 . -1) (undo-tree-id39007 . -1) (undo-tree-id39008 . -1) (undo-tree-id39009 . -1) (undo-tree-id39010 . -1) (undo-tree-id39011 . -1) (undo-tree-id39012 . -1) (undo-tree-id39013 . -1) (undo-tree-id39014 . -1) (undo-tree-id39015 . -1) (undo-tree-id39016 . -1) (undo-tree-id39017 . -1) (undo-tree-id39018 . -1) (undo-tree-id39019 . -1) (undo-tree-id39020 . -1) (undo-tree-id39021 . -1) (undo-tree-id39022 . -1) (undo-tree-id39023 . -1) (undo-tree-id39024 . -1) (undo-tree-id39025 . -1) (undo-tree-id39026 . -1) (undo-tree-id39027 . -1) (undo-tree-id39028 . -1) (undo-tree-id39029 . -1) (undo-tree-id39030 . -1) (undo-tree-id39031 . -1) (undo-tree-id39032 . -1) (undo-tree-id39033 . -1) (undo-tree-id39034 . -1) (undo-tree-id39035 . -1) (undo-tree-id39036 . -1) (undo-tree-id39037 . -1) (undo-tree-id39038 . -1) (undo-tree-id39039 . -1) (undo-tree-id39040 . -1) (undo-tree-id39041 . -1) (undo-tree-id39042 . -1) (undo-tree-id39043 . -1) (undo-tree-id39044 . -1) (undo-tree-id39045 . -1) (undo-tree-id39046 . -1) (undo-tree-id39047 . -1) (undo-tree-id39048 . -1) (undo-tree-id39049 . -1) (undo-tree-id39050 . -1) (undo-tree-id39051 . -1) (undo-tree-id39052 . -1) (undo-tree-id39053 . -1) (undo-tree-id39054 . -1) (undo-tree-id39055 . -1) (undo-tree-id39056 . -1) (undo-tree-id39057 . -1) (undo-tree-id39058 . -1)) nil (25767 11335 382902 369000) 0 nil])
([nil nil ((3967 . 3968) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -3967) (undo-tree-id39321 . -1) 3952 (t 25767 11335 426451 76000)) nil (25767 11356 380158 591000) 0 nil])
([nil nil ((4597 . 4598) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4597) (undo-tree-id39498 . -1) (4535 . 4536) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4535) (undo-tree-id39499 . -1) (4480 . 4481) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4480) (undo-tree-id39500 . -1) (4408 . 4409) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4408) (undo-tree-id39501 . -1) (4334 . 4335) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4334) (undo-tree-id39502 . -1) (4260 . 4261) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4260) (undo-tree-id39503 . -1) (4184 . 4185) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4184) (undo-tree-id39504 . -1) (undo-tree-id39505 . -1) (undo-tree-id39506 . -1) (#("  " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4184) (undo-tree-id39507 . -2) (undo-tree-id39508 . -2) (undo-tree-id39509 . -2) (undo-tree-id39510 . -2) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -4186) (undo-tree-id39511 . -1) (undo-tree-id39512 . -1) (undo-tree-id39513 . -1) (4112 . 4113) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4112) (undo-tree-id39514 . -1) (4038 . 4039) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4038) (undo-tree-id39515 . -1) 4032) nil (25767 11380 881152 351000) 0 nil] [nil nil ((4033 . 4034) (4033 . 4035) (4032 . 4033)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4032) (undo-tree-id39322 . -1) (undo-tree-id39323 . -1) (undo-tree-id39324 . -1) (#("* " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 4033) (undo-tree-id39325 . -1) (undo-tree-id39326 . -1) (undo-tree-id39327 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4033)) (25767 11356 379232 8000) 0 nil])
([nil nil ((5091 . 5092) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5091) (undo-tree-id39486 . -1) (5019 . 5020) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5019) (undo-tree-id39487 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5017) (undo-tree-id39488 . -1) (4994 . 4995) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4994) (undo-tree-id39489 . -1) (4938 . 4939) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4938) (undo-tree-id39490 . -1) (4901 . 4902) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4901) (undo-tree-id39491 . -1) (4856 . 4857) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4856) (undo-tree-id39492 . -1) (4819 . 4820) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4819) (undo-tree-id39493 . -1) (4810 . 4811) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4810) (undo-tree-id39494 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4747) (undo-tree-id39495 . -1) (4713 . 4714) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4713) (undo-tree-id39496 . -1) (4672 . 4673) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -4672) (undo-tree-id39497 . -1) 4597) nil (25767 11380 881134 59000) 0 nil])
nil
([nil nil ((5149 . 5153) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -5149) (undo-tree-id39328 . -1) (undo-tree-id39329 . -1) (undo-tree-id39330 . -1) (undo-tree-id39331 . -1) (undo-tree-id39332 . -1) (undo-tree-id39333 . -1) (undo-tree-id39334 . -1) (undo-tree-id39335 . -1) (undo-tree-id39336 . -1) (undo-tree-id39337 . -1) (undo-tree-id39338 . -1) (undo-tree-id39339 . -1) (undo-tree-id39340 . -1) (undo-tree-id39341 . -1) (undo-tree-id39342 . -1) (undo-tree-id39343 . -1) (undo-tree-id39344 . -1) (undo-tree-id39345 . -1) (undo-tree-id39346 . -1) (undo-tree-id39347 . -1) (undo-tree-id39348 . -1) (undo-tree-id39349 . -1) (undo-tree-id39350 . -1) (undo-tree-id39351 . -1) (undo-tree-id39352 . -1) (undo-tree-id39353 . -1) (undo-tree-id39354 . -1) (undo-tree-id39355 . -1) (undo-tree-id39356 . -1) (undo-tree-id39357 . -1) (undo-tree-id39358 . -1) (undo-tree-id39359 . -1) (undo-tree-id39360 . -1) (undo-tree-id39361 . -1) (undo-tree-id39362 . -1) (undo-tree-id39363 . -1) (undo-tree-id39364 . -1) (undo-tree-id39365 . -1) (undo-tree-id39366 . -1) (undo-tree-id39367 . -1) (undo-tree-id39368 . -1) (undo-tree-id39369 . -1) (undo-tree-id39370 . -1) (undo-tree-id39371 . -1) (undo-tree-id39372 . -1) (undo-tree-id39373 . -1) (undo-tree-id39374 . -1) (undo-tree-id39375 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -5150) (undo-tree-id39376 . -1) (undo-tree-id39377 . -1) (undo-tree-id39378 . -1) (undo-tree-id39379 . -1) (undo-tree-id39380 . -1) (undo-tree-id39381 . -1) (undo-tree-id39382 . -1) (undo-tree-id39383 . -1) (undo-tree-id39384 . -1) (undo-tree-id39385 . -1) (undo-tree-id39386 . -1) (undo-tree-id39387 . -1) (undo-tree-id39388 . -1) (undo-tree-id39389 . -1) (undo-tree-id39390 . -1) (undo-tree-id39391 . -1) (undo-tree-id39392 . -1) (undo-tree-id39393 . -1) (undo-tree-id39394 . -1) (undo-tree-id39395 . -1) (undo-tree-id39396 . -1) (undo-tree-id39397 . -1) (undo-tree-id39398 . -1) (undo-tree-id39399 . -1) (undo-tree-id39400 . -1) (undo-tree-id39401 . -1) (undo-tree-id39402 . -1) (undo-tree-id39403 . -1) (undo-tree-id39404 . -1) (undo-tree-id39405 . -1) (undo-tree-id39406 . -1) (undo-tree-id39407 . -1) (undo-tree-id39408 . -1) (undo-tree-id39409 . -1) (undo-tree-id39410 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -5151) (undo-tree-id39411 . -1) (undo-tree-id39412 . -1) (undo-tree-id39413 . -1) (undo-tree-id39414 . -1) (undo-tree-id39415 . -1) (undo-tree-id39416 . -1) (undo-tree-id39417 . -1) (undo-tree-id39418 . -1) (undo-tree-id39419 . -1) (undo-tree-id39420 . -1) (undo-tree-id39421 . -1) (undo-tree-id39422 . -1) (undo-tree-id39423 . -1) (undo-tree-id39424 . -1) (undo-tree-id39425 . -1) (undo-tree-id39426 . -1) (undo-tree-id39427 . -1) (undo-tree-id39428 . -1) (undo-tree-id39429 . -1) (undo-tree-id39430 . -1) (undo-tree-id39431 . -1) (undo-tree-id39432 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -5152) (undo-tree-id39433 . -1) (undo-tree-id39434 . -1) (undo-tree-id39435 . -1) (undo-tree-id39436 . -1) (undo-tree-id39437 . -1) (undo-tree-id39438 . -1) (undo-tree-id39439 . -1) (undo-tree-id39440 . -1) (undo-tree-id39441 . -1) 5153 (5147 . 5153) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5147 5153 nil nil nil t #s(yas--exit 5173 nil))) #s(yas--exit 5173 nil) 5 nil #s(yas--field 1 5147 5153 nil nil nil t #s(yas--exit 5173 nil)) nil nil)) (5169 . 5171) (5135 . 5178) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5135) (undo-tree-id39442 . -2) (undo-tree-id39443 . -2) (undo-tree-id39444 . -1) (undo-tree-id39445 . -1) (undo-tree-id39446 . -1) (undo-tree-id39447 . -1) (undo-tree-id39448 . -1) (undo-tree-id39449 . -1) (undo-tree-id39450 . -1) (undo-tree-id39451 . -1) (undo-tree-id39452 . -1) (undo-tree-id39453 . -1) (undo-tree-id39454 . -1) (undo-tree-id39455 . -1) (undo-tree-id39456 . -1) (undo-tree-id39457 . -1) (undo-tree-id39458 . -1) (undo-tree-id39459 . -1) (undo-tree-id39460 . -1) (undo-tree-id39461 . -1) (undo-tree-id39462 . -1) (undo-tree-id39463 . -1) (undo-tree-id39464 . -1) (undo-tree-id39465 . -1) (undo-tree-id39466 . -1) (undo-tree-id39467 . -1) (undo-tree-id39468 . -1) (undo-tree-id39469 . -1) (undo-tree-id39470 . -1) (undo-tree-id39471 . -1) (undo-tree-id39472 . -2) (undo-tree-id39473 . -2) (undo-tree-id39474 . -2) (undo-tree-id39475 . -2) (undo-tree-id39476 . -2) (undo-tree-id39477 . -2) (undo-tree-id39478 . -2) (undo-tree-id39479 . -2) (undo-tree-id39480 . -2) (undo-tree-id39481 . -2) (undo-tree-id39482 . -2) (undo-tree-id39483 . -2) (undo-tree-id39484 . -2) (undo-tree-id39485 . -2) 5137 (5135 . 5137) (5132 . 5135) 5132) nil (25767 11380 881115 575000) 0 nil])
([nil nil ((apply yas--snippet-revive 5135 5186 #s(yas--snippet nil (#s(yas--field 1 5147 5153 nil nil nil t #s(yas--exit 5173 nil))) #s(yas--exit 5173 nil) 5 nil #s(yas--field 1 5147 5153 nil nil nil t #s(yas--exit 5173 nil)) nil nil))) nil (25767 11380 880529 548000) 0 nil])
([nil nil ((5186 . 5187)) nil (25767 11380 880524 769000) 0 nil])
([nil nil ((3892 . 5189) (#("- We can tweak these hyperparameters later, if needed. The output layer is a time- distributed Dense layer like we saw in Chapter 15. This time this layer must have 39 units (max_id) because there are 39 distinct characters in the text, and we want to output a probability for each possible character (at each time step). The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- We use an RNN with 2 GRU layers of 128 units each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 8 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 8 9 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 9 82 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 82 83 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 83 153 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 153 154 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 154 155 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 155 178 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 178 179 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 179 181 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 181 230 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 230 231 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 231 304 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 304 305 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 305 362 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 362 378 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 378 379 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 379 450 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 450 451 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 451 505 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 505 506 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 506 513 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 513 514 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 514 525 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 525 526 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 526 538 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 538 567 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 567 568 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 568 642 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 642 643 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 643 655 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 655 683 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 683 684 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 684 717 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 717 745 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 745 746 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 746 755 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 755 767 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 767 768 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 768 773 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 773 780 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 780 781 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 781 784 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 784 785 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 785 787 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 787 789 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 789 790 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 790 812 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 812 813 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 813 820 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 820 826 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 826 827 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 827 855 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 855 856 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 856 865 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 865 871 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 871 872 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 872 894 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 894 895 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 895 902 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 902 908 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 908 909 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 909 960 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 960 961 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 961 963 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 963 964 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 964 965 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 965 987 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 987 989 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 989 990 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 990 1016 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1016 1017 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1017 1028 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1028 1029 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1029 1041 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1041 1061 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1061 1062 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1062 1100 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1100 1101 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1101 1102 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1102 1103 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1103 1105 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1105 1139 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1139 1140 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1140 1141 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1141 1144 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1144 1145 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1145 1147 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1147 1156 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1156 1157 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1157 1158 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1158 1159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 1159 1160 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1160 1161 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1161 1162 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1162 1163 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1163 1233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1233 1234 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1234 1287 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1287 1288 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 1288 1295 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 1295 1297 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 3892) (undo-tree-id39516 . -1160) (undo-tree-id39517 . -1160) (undo-tree-id39518 . 136) (undo-tree-id39519 . -1297) (undo-tree-id39520 . -1297) (undo-tree-id39521 . -1297) (undo-tree-id39522 . -1297) (undo-tree-id39523 . 127) (undo-tree-id39524 . -1173) (undo-tree-id39525 . -1297) (undo-tree-id39526 . -1297) (undo-tree-id39527 . -1297) (undo-tree-id39528 . -1297) (undo-tree-id39529 . -1297) (undo-tree-id39530 . -1297) (undo-tree-id39531 . -1297) (undo-tree-id39532 . -1297) (undo-tree-id39533 . -1297) (undo-tree-id39534 . -1297) (undo-tree-id39535 . -1297) (undo-tree-id39536 . -1297) (undo-tree-id39537 . -1297) (undo-tree-id39538 . -1297) (undo-tree-id39539 . -1297) (undo-tree-id39540 . -1297) (undo-tree-id39541 . -1297) (undo-tree-id39542 . -1297) (undo-tree-id39543 . -1297) (undo-tree-id39544 . -1297) (undo-tree-id39545 . -1297) (undo-tree-id39546 . -1297) (undo-tree-id39547 . -1297) (undo-tree-id39548 . -1297) (undo-tree-id39549 . -1297) (undo-tree-id39550 . -1297) (undo-tree-id39551 . -1297) (undo-tree-id39552 . -1297) (undo-tree-id39553 . -1297) (undo-tree-id39554 . -1297) (undo-tree-id39555 . -1297) (undo-tree-id39556 . -1297) (undo-tree-id39557 . -1297) (undo-tree-id39558 . -1297) (undo-tree-id39559 . -1297) (undo-tree-id39560 . -1297) (undo-tree-id39561 . -1297) (undo-tree-id39562 . -1297) (undo-tree-id39563 . -1297) (undo-tree-id39564 . -1297) (undo-tree-id39565 . -1297) (undo-tree-id39566 . -1297) (undo-tree-id39567 . -1297) (undo-tree-id39568 . -1297) (undo-tree-id39569 . -1297) (undo-tree-id39570 . -1297) (undo-tree-id39571 . -1297) (undo-tree-id39572 . -1297) (undo-tree-id39573 . -1297) (undo-tree-id39574 . -1297) (undo-tree-id39575 . -1297) (undo-tree-id39576 . -1297) (undo-tree-id39577 . -1297) (undo-tree-id39578 . -1297) (undo-tree-id39579 . -1297) (undo-tree-id39580 . -1297) (undo-tree-id39581 . -1297) (undo-tree-id39582 . -1297) (undo-tree-id39583 . -1297) (undo-tree-id39584 . -1297) (undo-tree-id39585 . -1297) (undo-tree-id39586 . -1297) (undo-tree-id39587 . -1297) (undo-tree-id39588 . -1297) (undo-tree-id39589 . -1297) (undo-tree-id39590 . -1297) (undo-tree-id39591 . -1297) (undo-tree-id39592 . -1297) (undo-tree-id39593 . -1297) (undo-tree-id39594 . -1297) (undo-tree-id39595 . -1297) (undo-tree-id39596 . -1297) (undo-tree-id39597 . -1297) (undo-tree-id39598 . -1297) (undo-tree-id39599 . -1297) (undo-tree-id39600 . -1297) (undo-tree-id39601 . -1297) (undo-tree-id39602 . -1297) (undo-tree-id39603 . -1297) (undo-tree-id39604 . -1297) (undo-tree-id39605 . -1297) (undo-tree-id39606 . -1297) (undo-tree-id39607 . -1297) (undo-tree-id39608 . -1297) (undo-tree-id39609 . -1297) (undo-tree-id39610 . -1297) (undo-tree-id39611 . -1233) (undo-tree-id39612 . -1297) (undo-tree-id39613 . -1233) (undo-tree-id39614 . -1233) (undo-tree-id39615 . -1233) (undo-tree-id39616 . -1233) (undo-tree-id39617 . -1233) (undo-tree-id39618 . -1233) (undo-tree-id39619 . -1233) (undo-tree-id39620 . -1233) (undo-tree-id39621 . -1233) (undo-tree-id39622 . -1233) (undo-tree-id39623 . -1233) (undo-tree-id39624 . -1233) (undo-tree-id39625 . -1233) (undo-tree-id39626 . -1233) (undo-tree-id39627 . -1233) (undo-tree-id39628 . -1233) (undo-tree-id39629 . -1233) (undo-tree-id39630 . -1233) (undo-tree-id39631 . -1233) (undo-tree-id39632 . -1233) (undo-tree-id39633 . -1233) (undo-tree-id39634 . -1233) (undo-tree-id39635 . -1233) (undo-tree-id39636 . -1233) (undo-tree-id39637 . -1175) (undo-tree-id39638 . -1175) (undo-tree-id39639 . -1175) (undo-tree-id39640 . -1175) (undo-tree-id39641 . -1175) (undo-tree-id39642 . -1175) (undo-tree-id39643 . -1175) (undo-tree-id39644 . -1175) (undo-tree-id39645 . -1175) (undo-tree-id39646 . -1175) (undo-tree-id39647 . -1175) (undo-tree-id39648 . -1175) (undo-tree-id39649 . -1175) (undo-tree-id39650 . -1175) (undo-tree-id39651 . -1175) (undo-tree-id39652 . -1175) (undo-tree-id39653 . -1179) (undo-tree-id39654 . -1179) (undo-tree-id39655 . -1179) (undo-tree-id39656 . -1179) (undo-tree-id39657 . -1179) (undo-tree-id39658 . -1179) (undo-tree-id39659 . -1179) (undo-tree-id39660 . -1179) (undo-tree-id39661 . -1179) (undo-tree-id39662 . -1179) (undo-tree-id39663 . -1179) (undo-tree-id39664 . -1179) (undo-tree-id39665 . -1179) (undo-tree-id39666 . -1179) (undo-tree-id39667 . -1179) (undo-tree-id39668 . -1179) (undo-tree-id39669 . 116) (undo-tree-id39670 . -1184) (undo-tree-id39671 . -1181) (undo-tree-id39672 . -1181) (undo-tree-id39673 . -1181) (undo-tree-id39674 . -1181) (undo-tree-id39675 . -1181) (undo-tree-id39676 . -1181) (undo-tree-id39677 . -1181) (undo-tree-id39678 . -1181) (undo-tree-id39679 . -1181) (undo-tree-id39680 . -1181) (undo-tree-id39681 . -1181) (undo-tree-id39682 . -1181) (undo-tree-id39683 . -1181) (undo-tree-id39684 . -1181) (undo-tree-id39685 . -1181) (undo-tree-id39686 . -1181) (undo-tree-id39687 . -1185) (undo-tree-id39688 . -1185) (undo-tree-id39689 . -1185) (undo-tree-id39690 . -1185) (undo-tree-id39691 . -1185) (undo-tree-id39692 . -1185) (undo-tree-id39693 . -1185) (undo-tree-id39694 . -1185) (undo-tree-id39695 . -1185) (undo-tree-id39696 . -1185) (undo-tree-id39697 . -1185) (undo-tree-id39698 . -1185) (undo-tree-id39699 . -1185) (undo-tree-id39700 . -1185) (undo-tree-id39701 . -1185) (undo-tree-id39702 . -1185) (undo-tree-id39703 . -1192) (undo-tree-id39704 . -1192) (undo-tree-id39705 . -1192) (undo-tree-id39706 . -1192) (undo-tree-id39707 . -1192) (undo-tree-id39708 . -1192) (undo-tree-id39709 . -1192) (undo-tree-id39710 . -1192) (undo-tree-id39711 . -1192) (undo-tree-id39712 . -1192) (undo-tree-id39713 . -1192) (undo-tree-id39714 . -1195) (undo-tree-id39715 . -1195) (undo-tree-id39716 . -1195) (undo-tree-id39717 . -1195) (undo-tree-id39718 . -1195) (undo-tree-id39719 . -1195) (undo-tree-id39720 . -1195) (undo-tree-id39721 . -1195) (undo-tree-id39722 . -1195) (undo-tree-id39723 . -1195) (undo-tree-id39724 . -1195) (undo-tree-id39725 . -1195) (undo-tree-id39726 . -1195) (undo-tree-id39727 . -1195) (undo-tree-id39728 . -1195) (undo-tree-id39729 . -1195) (undo-tree-id39730 . -1195) (undo-tree-id39731 . -1195) (undo-tree-id39732 . -1195) (undo-tree-id39733 . -1195) (undo-tree-id39734 . -1195) (undo-tree-id39735 . -1199) (undo-tree-id39736 . -1199) (undo-tree-id39737 . -1199) (undo-tree-id39738 . -1199) (undo-tree-id39739 . -1199) (undo-tree-id39740 . -1199) (undo-tree-id39741 . -1199) (undo-tree-id39742 . -1199) (undo-tree-id39743 . -1199) (undo-tree-id39744 . -1199) (undo-tree-id39745 . -1199) (undo-tree-id39746 . -1205) (undo-tree-id39747 . -1205) (undo-tree-id39748 . -1205) (undo-tree-id39749 . -1205) (undo-tree-id39750 . -1205) (undo-tree-id39751 . -1205) (undo-tree-id39752 . -1205) (undo-tree-id39753 . -1205) (undo-tree-id39754 . -1205) (undo-tree-id39755 . -1205) (undo-tree-id39756 . -1205) (undo-tree-id39757 . -1210) (undo-tree-id39758 . -1210) (undo-tree-id39759 . -1210) (undo-tree-id39760 . -1210) (undo-tree-id39761 . -1210) (undo-tree-id39762 . -1210) (undo-tree-id39763 . -1210) (undo-tree-id39764 . -1210) (undo-tree-id39765 . -1210) (undo-tree-id39766 . -1210) (undo-tree-id39767 . -1210) (undo-tree-id39768 . -1214) (undo-tree-id39769 . -1214) (undo-tree-id39770 . -1214) (undo-tree-id39771 . -1214) (undo-tree-id39772 . -1214) (undo-tree-id39773 . -1214) (undo-tree-id39774 . -1214) (undo-tree-id39775 . -1214) (undo-tree-id39776 . -1214) (undo-tree-id39777 . -1214) (undo-tree-id39778 . -1214) (undo-tree-id39779 . -1218) (undo-tree-id39780 . -1218) (undo-tree-id39781 . -1218) (undo-tree-id39782 . -1218) (undo-tree-id39783 . -1218) (undo-tree-id39784 . -1218) (undo-tree-id39785 . -1218) (undo-tree-id39786 . -1218) (undo-tree-id39787 . -1218) (undo-tree-id39788 . -1218) (undo-tree-id39789 . -1218) (undo-tree-id39790 . -1226) (undo-tree-id39791 . -1226) (undo-tree-id39792 . -1226) (undo-tree-id39793 . -1226) (undo-tree-id39794 . -1226) (undo-tree-id39795 . -1226) (undo-tree-id39796 . -1226) (undo-tree-id39797 . -1226) (undo-tree-id39798 . -1226) (undo-tree-id39799 . -1226) (undo-tree-id39800 . -1226) (undo-tree-id39801 . -1229) (undo-tree-id39802 . -1229) (undo-tree-id39803 . -1229) (undo-tree-id39804 . -1229) (undo-tree-id39805 . -1229) (undo-tree-id39806 . -1229) (undo-tree-id39807 . -1229) (undo-tree-id39808 . -1229) (undo-tree-id39809 . -1229) (undo-tree-id39810 . -1229) (undo-tree-id39811 . -1229) (undo-tree-id39812 . -1234) (undo-tree-id39813 . -1234) (undo-tree-id39814 . -1234) (undo-tree-id39815 . -1234) (undo-tree-id39816 . -1234) (undo-tree-id39817 . -1234) (undo-tree-id39818 . -1234) (undo-tree-id39819 . -1234) (undo-tree-id39820 . -1234) (undo-tree-id39821 . -1234) (undo-tree-id39822 . -1234) (undo-tree-id39823 . -1238) (undo-tree-id39824 . -1238) (undo-tree-id39825 . -1238) (undo-tree-id39826 . -1238) (undo-tree-id39827 . -1238) (undo-tree-id39828 . -1238) (undo-tree-id39829 . -1238) (undo-tree-id39830 . -1238) (undo-tree-id39831 . -1238) (undo-tree-id39832 . -1238) (undo-tree-id39833 . -1238) (undo-tree-id39834 . -1238) (undo-tree-id39835 . -1238) (undo-tree-id39836 . -1238) (undo-tree-id39837 . -1238) (undo-tree-id39838 . -1238) (undo-tree-id39839 . -1245) (undo-tree-id39840 . -1245) (undo-tree-id39841 . -1245) (undo-tree-id39842 . -1245) (undo-tree-id39843 . -1245) (undo-tree-id39844 . -1245) (undo-tree-id39845 . -1245) (undo-tree-id39846 . -1245) (undo-tree-id39847 . -1245) (undo-tree-id39848 . -1245) (undo-tree-id39849 . -1245) (undo-tree-id39850 . -1246) (undo-tree-id39851 . -1246) (undo-tree-id39852 . -1246) (undo-tree-id39853 . -1246) (undo-tree-id39854 . -1246) (undo-tree-id39855 . -1246) (undo-tree-id39856 . -1246) (undo-tree-id39857 . -1246) (undo-tree-id39858 . -1246) (undo-tree-id39859 . -1246) (undo-tree-id39860 . -1246) (undo-tree-id39861 . -1253) (undo-tree-id39862 . -1253) (undo-tree-id39863 . -1253) (undo-tree-id39864 . -1253) (undo-tree-id39865 . -1253) (undo-tree-id39866 . -1253) (undo-tree-id39867 . -1253) (undo-tree-id39868 . -1253) (undo-tree-id39869 . -1253) (undo-tree-id39870 . -1253) (undo-tree-id39871 . -1253) (undo-tree-id39872 . -1255) (undo-tree-id39873 . -1255) (undo-tree-id39874 . -1255) (undo-tree-id39875 . -1255) (undo-tree-id39876 . -1255) (undo-tree-id39877 . -1255) (undo-tree-id39878 . -1255) (undo-tree-id39879 . -1255) (undo-tree-id39880 . -1255) (undo-tree-id39881 . -1255) (undo-tree-id39882 . -1255) (undo-tree-id39883 . -1259) (undo-tree-id39884 . -1259) (undo-tree-id39885 . -1259) (undo-tree-id39886 . -1259) (undo-tree-id39887 . -1259) (undo-tree-id39888 . -1259) (undo-tree-id39889 . -1259) (undo-tree-id39890 . -1259) (undo-tree-id39891 . -1259) (undo-tree-id39892 . -1259) (undo-tree-id39893 . -1259) (undo-tree-id39894 . -1263) (undo-tree-id39895 . -1263) (undo-tree-id39896 . -1263) (undo-tree-id39897 . -1263) (undo-tree-id39898 . -1263) (undo-tree-id39899 . -1263) (undo-tree-id39900 . -1263) (undo-tree-id39901 . -1263) (undo-tree-id39902 . -1263) (undo-tree-id39903 . -1263) (undo-tree-id39904 . -1263) (undo-tree-id39905 . -1263) (undo-tree-id39906 . -1263) (undo-tree-id39907 . -1263) (undo-tree-id39908 . -1263) (undo-tree-id39909 . -1263) (undo-tree-id39910 . -1270) (undo-tree-id39911 . -1270) (undo-tree-id39912 . -1270) (undo-tree-id39913 . -1270) (undo-tree-id39914 . -1270) (undo-tree-id39915 . -1270) (undo-tree-id39916 . -1270) (undo-tree-id39917 . -1270) (undo-tree-id39918 . -1270) (undo-tree-id39919 . -1270) (undo-tree-id39920 . -1270) (undo-tree-id39921 . -1277) (undo-tree-id39922 . -1277) (undo-tree-id39923 . -1277) (undo-tree-id39924 . -1277) (undo-tree-id39925 . -1277) (undo-tree-id39926 . -1277) (undo-tree-id39927 . -1277) (undo-tree-id39928 . -1277) (undo-tree-id39929 . -1277) (undo-tree-id39930 . -1277) (undo-tree-id39931 . -1277) (undo-tree-id39932 . -1278) (undo-tree-id39933 . -1278) (undo-tree-id39934 . -1278) (undo-tree-id39935 . -1278) (undo-tree-id39936 . -1278) (undo-tree-id39937 . -1278) (undo-tree-id39938 . -1278) (undo-tree-id39939 . -1278) (undo-tree-id39940 . -1278) (undo-tree-id39941 . -1278) (undo-tree-id39942 . -1278) (undo-tree-id39943 . -1287) (undo-tree-id39944 . -1287) (undo-tree-id39945 . -1287) (undo-tree-id39946 . -1287) (undo-tree-id39947 . -1287) (undo-tree-id39948 . -1287) (undo-tree-id39949 . -1287) (undo-tree-id39950 . -1287) (undo-tree-id39951 . -1287) (undo-tree-id39952 . -1287) (undo-tree-id39953 . -1287) (undo-tree-id39954 . -1289) (undo-tree-id39955 . -1289) (undo-tree-id39956 . -1289) (undo-tree-id39957 . -1289) (undo-tree-id39958 . -1289) (undo-tree-id39959 . -1289) (undo-tree-id39960 . -1289) (undo-tree-id39961 . -1289) (undo-tree-id39962 . -1289) (undo-tree-id39963 . -1289) (undo-tree-id39964 . -1289) (undo-tree-id39965 . -1289) (undo-tree-id39966 . -1289) (undo-tree-id39967 . -1289) (undo-tree-id39968 . -1289) (undo-tree-id39969 . -1289) (undo-tree-id39970 . -1295) (undo-tree-id39971 . -1295) (undo-tree-id39972 . -1295) (undo-tree-id39973 . -1295) (undo-tree-id39974 . -1295) (undo-tree-id39975 . -1295) (undo-tree-id39976 . -1295) (undo-tree-id39977 . -1295) (undo-tree-id39978 . -1295) (undo-tree-id39979 . -1295) (undo-tree-id39980 . -1295) (undo-tree-id39981 . -1297) (undo-tree-id39982 . -1297) (undo-tree-id39983 . -1297) (undo-tree-id39984 . -1297) (undo-tree-id39985 . -1297) (undo-tree-id39986 . -1297) (undo-tree-id39987 . -1297) (undo-tree-id39988 . -1297) (undo-tree-id39989 . -1297) (undo-tree-id39990 . -1297) (undo-tree-id39991 . -1297) (undo-tree-id39992 . -1297) (undo-tree-id39993 . -1297) (undo-tree-id39994 . -1297) (undo-tree-id39995 . -1297) (undo-tree-id39996 . -1297) (undo-tree-id39997 . -1297) (undo-tree-id39998 . -1297) (undo-tree-id39999 . -1297) (undo-tree-id40000 . -1297) (undo-tree-id40001 . -1297) (undo-tree-id40002 . -1297) (undo-tree-id40003 . -1297) (undo-tree-id40004 . -1297) (undo-tree-id40005 . -1297) (undo-tree-id40006 . -1297) (undo-tree-id40007 . -1297) (undo-tree-id40008 . -1297) (undo-tree-id40009 . -1297) (undo-tree-id40010 . -1297) (undo-tree-id40011 . -1297) (undo-tree-id40012 . -1297) (undo-tree-id40013 . -1297) (undo-tree-id40014 . -1297) (undo-tree-id40015 . -1297) (undo-tree-id40016 . -1297) (undo-tree-id40017 . -1297) (undo-tree-id40018 . -1297) (undo-tree-id40019 . -1297) (undo-tree-id40020 . -1297) (undo-tree-id40021 . -1158) (3892 . 5050) (#(" We can tweak these hyperparameters later, if needed. The output layer is a time- distributed Dense layer like we saw in Chapter 15. This time this layer must have 39 units (max_id) because there are 39 distinct characters in the text, and we want to output a probability for each possible character (at each time step). The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 81 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 152 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 153 154 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 154 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 177 178 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 178 180 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 180 229 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 229 230 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 230 303 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 303 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 304 361 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 361 377 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 377 378 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 378 449 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 449 450 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 450 504 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 504 505 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 505 512 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 512 513 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 513 524 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 524 525 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 525 537 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 537 566 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 566 567 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 567 641 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 641 642 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 642 654 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 654 682 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 682 683 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 683 716 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 716 744 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 744 745 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 745 754 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 754 766 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 766 767 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 767 772 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 772 779 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 779 780 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 780 783 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 783 784 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 784 786 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 786 788 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 788 789 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 789 811 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 811 812 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 812 819 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 819 825 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 825 826 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 826 854 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 854 855 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 855 864 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 864 870 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 870 871 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 871 893 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 893 894 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 894 901 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 901 907 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 907 908 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 908 959 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 959 960 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 960 962 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 962 963 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 963 964 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 964 986 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 986 988 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 988 989 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 989 1015 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1015 1016 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1016 1027 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1027 1028 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 1028 1040 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1040 1060 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1060 1061 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1061 1099 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1099 1100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 1100 1101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1101 1102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1102 1104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1104 1138 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1138 1139 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1139 1140 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1140 1143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1143 1144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1144 1146 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 1146 1155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4031) (undo-tree-id40022 . 33) (undo-tree-id40023 . -153) (undo-tree-id40024 . -153) (undo-tree-id40025 . -153) (undo-tree-id40026 . -153) (undo-tree-id40027 . 439) (undo-tree-id40028 . -721) (undo-tree-id40029 . 101) (undo-tree-id40030 . -1058) (undo-tree-id40031 . 179) (undo-tree-id40032 . -983) (undo-tree-id40033 . 426) (undo-tree-id40034 . -732) (undo-tree-id40035 . 247) (undo-tree-id40036 . -913) (undo-tree-id40037 . -1104) (undo-tree-id40038 . -1104) (undo-tree-id40039 . -1104) (undo-tree-id40040 . -1104) (undo-tree-id40041 . -1104) (undo-tree-id40042 . -1104) (undo-tree-id40043 . -1104) (undo-tree-id40044 . -1104) (undo-tree-id40045 . -1104) (undo-tree-id40046 . -1104) (undo-tree-id40047 . -1104) (undo-tree-id40048 . -1104) (undo-tree-id40049 . -1104) (undo-tree-id40050 . -1104) (undo-tree-id40051 . -1104) (undo-tree-id40052 . -1104) (undo-tree-id40053 . -1104) (undo-tree-id40054 . -1104) (undo-tree-id40055 . -1104) (undo-tree-id40056 . -1104) (undo-tree-id40057 . -1104) (undo-tree-id40058 . -1104) (undo-tree-id40059 . -1104) (undo-tree-id40060 . -1104) (undo-tree-id40061 . -1104) (undo-tree-id40062 . -1104) (undo-tree-id40063 . -1104) (undo-tree-id40064 . -1104) (undo-tree-id40065 . -1104) (undo-tree-id40066 . -1104) (undo-tree-id40067 . -1104) (undo-tree-id40068 . -1104) (undo-tree-id40069 . -1104) (undo-tree-id40070 . -1104) (undo-tree-id40071 . -1104) (undo-tree-id40072 . -1104) (undo-tree-id40073 . -1104) (undo-tree-id40074 . -1104) (undo-tree-id40075 . -1104) (undo-tree-id40076 . -1104) (undo-tree-id40077 . -1104) (undo-tree-id40078 . -1118) (undo-tree-id40079 . -1118) (undo-tree-id40080 . -1118) (undo-tree-id40081 . -1118) (undo-tree-id40082 . -1118) (undo-tree-id40083 . -1118) (undo-tree-id40084 . -1118) (undo-tree-id40085 . -1118) (undo-tree-id40086 . -1118) (undo-tree-id40087 . -1118) (undo-tree-id40088 . -1118) (undo-tree-id40089 . -1118) (undo-tree-id40090 . -1118) (undo-tree-id40091 . -1118) (undo-tree-id40092 . -1118) (undo-tree-id40093 . -1118) (undo-tree-id40094 . -1118) (undo-tree-id40095 . -1118) (undo-tree-id40096 . -1118) (undo-tree-id40097 . -1118) (undo-tree-id40098 . -1118) (undo-tree-id40099 . -1118) (undo-tree-id40100 . -1118) (undo-tree-id40101 . -1118) (undo-tree-id40102 . -1118) (undo-tree-id40103 . -1118) (undo-tree-id40104 . -1118) (undo-tree-id40105 . -1118) (undo-tree-id40106 . -1118) (undo-tree-id40107 . -1118) (undo-tree-id40108 . -1118) (undo-tree-id40109 . -1118) (undo-tree-id40110 . -1118) (undo-tree-id40111 . -1118) (undo-tree-id40112 . -1118) (undo-tree-id40113 . -1118) (undo-tree-id40114 . -1118) (undo-tree-id40115 . -1118) (undo-tree-id40116 . -1118) (undo-tree-id40117 . -1118) (undo-tree-id40118 . -1118) (undo-tree-id40119 . -1118) (undo-tree-id40120 . -1118) (undo-tree-id40121 . -1118) (undo-tree-id40122 . -1118) (undo-tree-id40123 . -1) (undo-tree-id40124 . -1) (undo-tree-id40125 . -1) (undo-tree-id40126 . -1) (undo-tree-id40127 . -1) (undo-tree-id40128 . -1) (undo-tree-id40129 . -1) (undo-tree-id40130 . -1) (undo-tree-id40131 . -1) (undo-tree-id40132 . -1) (undo-tree-id40133 . -1) (undo-tree-id40134 . -1) (undo-tree-id40135 . -1) (undo-tree-id40136 . -1) (undo-tree-id40137 . -1) (undo-tree-id40138 . -1) (undo-tree-id40139 . -1) (undo-tree-id40140 . -1) (undo-tree-id40141 . -1) (undo-tree-id40142 . -1) (undo-tree-id40143 . -1) (undo-tree-id40144 . -1) (undo-tree-id40145 . -1) (undo-tree-id40146 . -1) (undo-tree-id40147 . -1) (undo-tree-id40148 . -1) (undo-tree-id40149 . -1) (undo-tree-id40150 . -1) (undo-tree-id40151 . -1) (undo-tree-id40152 . -1) (undo-tree-id40153 . -1) (undo-tree-id40154 . -1) (undo-tree-id40155 . -1) (undo-tree-id40156 . -1) (undo-tree-id40157 . -1) (undo-tree-id40158 . -1) (undo-tree-id40159 . -1) (undo-tree-id40160 . -1) (undo-tree-id40161 . -1) (undo-tree-id40162 . -1) (undo-tree-id40163 . -1) 4032 (t 25767 11380 925178 29000)) nil (25767 11394 217080 909000) 0 nil])
([nil nil ((4033 . 5192) (#("- The output layer is a time- distributed Dense layer like we saw in Chapter 15. This time this layer must have 39 units (max_id) because there are 39 distinct characters in the text, and we want to output a probability for each possible character (at each time step). The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- We can tweak these hyperparameters later, if needed." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 29 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 29 30 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 30 100 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 100 101 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 101 102 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 102 125 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 125 126 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 126 128 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 128 177 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 177 178 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 178 251 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 251 252 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 252 306 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 306 309 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 309 325 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 325 326 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 326 397 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 397 398 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 398 452 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 452 453 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 453 460 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 460 461 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 461 472 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 472 473 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 473 485 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 485 514 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 514 515 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 515 589 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 589 590 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 590 602 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 602 630 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 630 631 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 631 664 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 664 692 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 692 693 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 693 702 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 702 714 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 714 715 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 715 720 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 720 727 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 727 728 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 728 731 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 731 732 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 732 734 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 734 736 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 736 737 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 737 759 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 759 760 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 760 767 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 767 773 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 773 774 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 774 802 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 802 803 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 803 812 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 812 818 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 818 819 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 819 841 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 841 842 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 842 849 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 849 855 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 855 856 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 856 907 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 907 908 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 908 910 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 910 911 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 911 912 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 912 934 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 934 936 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 936 937 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 937 963 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 963 964 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 964 975 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 975 976 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 976 988 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 988 1008 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1008 1009 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1009 1047 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1047 1048 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1048 1049 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1049 1050 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1050 1052 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1052 1086 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1086 1087 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1087 1088 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1088 1091 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1091 1092 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1092 1094 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1094 1103 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1103 1104 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1104 1105 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1105 1106 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 1106 1107 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1107 1108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1108 1113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1113 1114 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1114 1159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 4033) (undo-tree-id40164 . 52) (undo-tree-id40165 . -1106) (undo-tree-id40166 . -1159) (undo-tree-id40167 . -1106) (undo-tree-id40168 . -1106) (undo-tree-id40169 . -1106) (undo-tree-id40170 . -1106) (undo-tree-id40171 . -1106) (undo-tree-id40172 . -1106) (undo-tree-id40173 . -1106) (undo-tree-id40174 . -1106) (undo-tree-id40175 . -1106) (undo-tree-id40176 . -1106) (undo-tree-id40177 . -1106) (undo-tree-id40178 . -1106) (undo-tree-id40179 . -1106) (undo-tree-id40180 . -1106) (undo-tree-id40181 . -1106) (undo-tree-id40182 . -1106) (undo-tree-id40183 . -1106) (undo-tree-id40184 . -1106) (undo-tree-id40185 . -1106) (undo-tree-id40186 . -1106) (undo-tree-id40187 . -1106) (undo-tree-id40188 . -1106) (undo-tree-id40189 . -1106) (undo-tree-id40190 . -1106) (undo-tree-id40191 . -1106) (undo-tree-id40192 . -1106) (undo-tree-id40193 . -1106) (undo-tree-id40194 . -1106) (undo-tree-id40195 . -1106) (undo-tree-id40196 . -1106) (undo-tree-id40197 . -1106) (undo-tree-id40198 . -1106) (undo-tree-id40199 . -1106) (undo-tree-id40200 . -1106) (undo-tree-id40201 . -1106) (undo-tree-id40202 . -1106) (undo-tree-id40203 . -1106) (undo-tree-id40204 . -1106) (undo-tree-id40205 . -1106) (undo-tree-id40206 . -1106) (undo-tree-id40207 . -1106) (undo-tree-id40208 . -1106) (undo-tree-id40209 . -1106) (undo-tree-id40210 . -1106) (undo-tree-id40211 . -1106) (undo-tree-id40212 . -1106) (undo-tree-id40213 . -1106) (undo-tree-id40214 . -1106) (undo-tree-id40215 . -1106) (undo-tree-id40216 . -1106) (undo-tree-id40217 . -1106) (undo-tree-id40218 . -1106) (undo-tree-id40219 . -1106) (undo-tree-id40220 . -1106) (undo-tree-id40221 . -1147) (undo-tree-id40222 . -1147) (undo-tree-id40223 . -1147) (undo-tree-id40224 . -1147) (undo-tree-id40225 . -1147) (undo-tree-id40226 . -1147) (undo-tree-id40227 . -1147) (undo-tree-id40228 . -1147) (undo-tree-id40229 . -1147) (undo-tree-id40230 . -1147) (undo-tree-id40231 . -1147) (undo-tree-id40232 . -1149) (undo-tree-id40233 . -1149) (undo-tree-id40234 . -1149) (undo-tree-id40235 . -1149) (undo-tree-id40236 . -1149) (undo-tree-id40237 . -1149) (undo-tree-id40238 . -1149) (undo-tree-id40239 . -1149) (undo-tree-id40240 . -1149) (undo-tree-id40241 . -1149) (undo-tree-id40242 . -1149) (undo-tree-id40243 . -1147) (undo-tree-id40244 . -1147) (undo-tree-id40245 . -1147) (undo-tree-id40246 . -1147) (undo-tree-id40247 . -1147) (undo-tree-id40248 . -1147) (undo-tree-id40249 . -1147) (undo-tree-id40250 . -1147) (undo-tree-id40251 . -1147) (undo-tree-id40252 . -1147) (undo-tree-id40253 . -1147) (undo-tree-id40254 . -1147) (undo-tree-id40255 . -1147) (undo-tree-id40256 . -1147) (undo-tree-id40257 . -1147) (undo-tree-id40258 . -1147) (undo-tree-id40259 . -1147) (undo-tree-id40260 . -1147) (undo-tree-id40261 . -1147) (undo-tree-id40262 . -1147) (undo-tree-id40263 . -1147) (undo-tree-id40264 . -1147) (undo-tree-id40265 . -1147) (undo-tree-id40266 . -1147) (undo-tree-id40267 . -1147) (undo-tree-id40268 . -1147) (undo-tree-id40269 . -1147) (undo-tree-id40270 . -1147) (undo-tree-id40271 . -1147) (undo-tree-id40272 . -1147) (undo-tree-id40273 . -1147) (undo-tree-id40274 . -1147) (undo-tree-id40275 . -1147) (undo-tree-id40276 . -1147) (undo-tree-id40277 . -1147) (undo-tree-id40278 . -1147) (undo-tree-id40279 . -1147) (undo-tree-id40280 . -1147) (undo-tree-id40281 . -1147) (undo-tree-id40282 . -1147) (undo-tree-id40283 . -1147) (undo-tree-id40284 . -1147) (undo-tree-id40285 . -1147) (undo-tree-id40286 . -1147) (undo-tree-id40287 . -1147) (undo-tree-id40288 . -1147) (undo-tree-id40289 . -1147) (undo-tree-id40290 . -1147) (undo-tree-id40291 . -1147) (undo-tree-id40292 . -1147) (undo-tree-id40293 . -1149) (undo-tree-id40294 . -1149) (undo-tree-id40295 . -1149) (undo-tree-id40296 . -1149) (undo-tree-id40297 . -1149) (undo-tree-id40298 . -1149) (undo-tree-id40299 . -1149) (undo-tree-id40300 . -1149) (undo-tree-id40301 . -1149) (undo-tree-id40302 . -1149) (undo-tree-id40303 . -1149) (undo-tree-id40304 . -1152) (undo-tree-id40305 . -1152) (undo-tree-id40306 . -1152) (undo-tree-id40307 . -1152) (undo-tree-id40308 . -1152) (undo-tree-id40309 . -1152) (undo-tree-id40310 . -1152) (undo-tree-id40311 . -1152) (undo-tree-id40312 . -1152) (undo-tree-id40313 . -1152) (undo-tree-id40314 . -1152) (undo-tree-id40315 . -1152) (undo-tree-id40316 . -1152) (undo-tree-id40317 . -1152) (undo-tree-id40318 . -1152) (undo-tree-id40319 . -1152) (undo-tree-id40320 . -1158) (undo-tree-id40321 . -1158) (undo-tree-id40322 . -1158) (undo-tree-id40323 . -1158) (undo-tree-id40324 . -1158) (undo-tree-id40325 . -1158) (undo-tree-id40326 . -1158) (undo-tree-id40327 . -1158) (undo-tree-id40328 . -1158) (undo-tree-id40329 . -1158) (undo-tree-id40330 . -1158) (undo-tree-id40331 . -1158) (undo-tree-id40332 . -1158) (undo-tree-id40333 . -1158) (undo-tree-id40334 . -1158) (undo-tree-id40335 . -1158) (undo-tree-id40336 . -1159) (undo-tree-id40337 . -1159) (undo-tree-id40338 . -1159) (undo-tree-id40339 . -1159) (undo-tree-id40340 . -1159) (undo-tree-id40341 . -1159) (undo-tree-id40342 . -1159) (undo-tree-id40343 . -1159) (undo-tree-id40344 . -1159) (undo-tree-id40345 . -1159) (undo-tree-id40346 . -1159) (undo-tree-id40347 . -1159) (undo-tree-id40348 . -1159) (undo-tree-id40349 . -1159) (undo-tree-id40350 . -1159) (undo-tree-id40351 . -1159) (undo-tree-id40352 . -1159) (undo-tree-id40353 . -1159) (undo-tree-id40354 . -1159) (undo-tree-id40355 . -1159) (undo-tree-id40356 . -1159) (undo-tree-id40357 . -1159) (undo-tree-id40358 . -1159) (undo-tree-id40359 . -1159) (undo-tree-id40360 . -1159) (undo-tree-id40361 . -1159) (undo-tree-id40362 . -1159) (undo-tree-id40363 . -1159) (undo-tree-id40364 . -1159) (undo-tree-id40365 . -1159) (undo-tree-id40366 . -1159) (undo-tree-id40367 . -1159) (undo-tree-id40368 . -1159) (undo-tree-id40369 . -1159) (undo-tree-id40370 . -1159) (undo-tree-id40371 . -1159) (undo-tree-id40372 . -1159) (undo-tree-id40373 . -1159) (undo-tree-id40374 . -1159) (undo-tree-id40375 . -1159) (undo-tree-id40376 . -1159) (undo-tree-id40377 . -1159) (undo-tree-id40378 . -1159) (undo-tree-id40379 . -1159) (undo-tree-id40380 . -1159) (undo-tree-id40381 . -1159) (undo-tree-id40382 . -1159) (undo-tree-id40383 . -1159) (undo-tree-id40384 . -1159) (undo-tree-id40385 . -1159) (undo-tree-id40386 . -1159) (undo-tree-id40387 . -1159) (undo-tree-id40388 . -1105) (4033 . 5138) (#(" The output layer is a time- distributed Dense layer like we saw in Chapter 15. This time this layer must have 39 units (max_id) because there are 39 distinct characters in the text, and we want to output a probability for each possible character (at each time step). The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 28 29 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 29 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 99 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 100 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 101 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 124 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 125 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 127 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 176 177 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 177 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 250 251 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 251 305 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 305 308 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 308 324 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 324 325 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 325 396 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 396 397 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 397 451 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 451 452 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 452 459 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 459 460 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 460 471 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 471 472 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 472 484 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 484 513 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 513 514 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 514 588 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 588 589 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 589 601 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 601 629 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 629 630 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 630 663 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 663 691 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 691 692 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 692 701 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 701 713 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 713 714 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 714 719 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 719 726 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 726 727 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 727 730 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 730 731 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 731 733 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 733 735 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 735 736 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 736 758 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 758 759 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 759 766 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 766 772 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 772 773 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 773 801 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 801 802 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 802 811 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 811 817 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 817 818 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 818 840 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 840 841 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 841 848 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 848 854 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 854 855 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 855 906 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 906 907 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 907 909 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 909 910 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 910 911 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 911 933 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 933 935 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 935 936 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 936 962 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 962 963 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 963 974 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 974 975 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 975 987 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 987 1007 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1007 1008 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1008 1046 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1046 1047 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 1047 1048 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1048 1049 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1049 1051 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1051 1085 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1085 1086 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1086 1087 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1087 1090 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1090 1091 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1091 1093 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 1093 1102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4087) (undo-tree-id40389 . -1) (undo-tree-id40390 . -1) (undo-tree-id40391 . -1) (undo-tree-id40392 . -1) (undo-tree-id40393 . -1) (undo-tree-id40394 . -1) (undo-tree-id40395 . -1) (undo-tree-id40396 . -5) (undo-tree-id40397 . -5) (undo-tree-id40398 . -5) (undo-tree-id40399 . -5) (undo-tree-id40400 . -5) (undo-tree-id40401 . -5) (undo-tree-id40402 . -5) (undo-tree-id40403 . -5) (undo-tree-id40404 . -5) (undo-tree-id40405 . -5) (undo-tree-id40406 . -5) (undo-tree-id40407 . -5) (undo-tree-id40408 . -5) (undo-tree-id40409 . -5) (undo-tree-id40410 . -5) (undo-tree-id40411 . -5) (undo-tree-id40412 . -1) (undo-tree-id40413 . -1) (undo-tree-id40414 . -1) (undo-tree-id40415 . -1) (undo-tree-id40416 . -1) (undo-tree-id40417 . -1) (undo-tree-id40418 . -1) (undo-tree-id40419 . -1) (undo-tree-id40420 . -1) (undo-tree-id40421 . -1) (undo-tree-id40422 . -1) (undo-tree-id40423 . -1) (undo-tree-id40424 . -1) (undo-tree-id40425 . -1) (undo-tree-id40426 . -1) (undo-tree-id40427 . -1) (undo-tree-id40428 . -1) (undo-tree-id40429 . -1) (undo-tree-id40430 . -1) (undo-tree-id40431 . -1) (undo-tree-id40432 . -1) (undo-tree-id40433 . -1) (undo-tree-id40434 . -1) (undo-tree-id40435 . -1) (undo-tree-id40436 . -1) (undo-tree-id40437 . -1) (undo-tree-id40438 . -1) (undo-tree-id40439 . -1) (undo-tree-id40440 . -1) (undo-tree-id40441 . -1) 4088 (t 25767 11394 260839 147000)) nil (25767 11408 517247 360000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 4118) (undo-tree-id40717 . -1) (undo-tree-id40718 . -1) (undo-tree-id40719 . -1) (undo-tree-id40720 . -1) (undo-tree-id40721 . -1) (undo-tree-id40722 . -1) (undo-tree-id40723 . -1) (undo-tree-id40724 . -1) (undo-tree-id40725 . -1) (undo-tree-id40726 . -1) (undo-tree-id40727 . -1) (undo-tree-id40728 . -1) (undo-tree-id40729 . -1) (t 25767 11408 560492 212000)) nil (25767 11422 872504 467000) 0 nil])
([nil nil ((#("like we saw in Chapter 15" 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4142) (undo-tree-id40604 . -24) (undo-tree-id40605 . -24) (undo-tree-id40606 . -24) (undo-tree-id40607 . -25) (undo-tree-id40608 . -24) (undo-tree-id40609 . -3) (undo-tree-id40610 . -3) (undo-tree-id40611 . -3) (undo-tree-id40612 . -3) (undo-tree-id40613 . -3) (undo-tree-id40614 . -3) (undo-tree-id40615 . -3) (undo-tree-id40616 . -3) (undo-tree-id40617 . -3) (undo-tree-id40618 . -3) (undo-tree-id40619 . -3) (undo-tree-id40620 . -3) (undo-tree-id40621 . -3) (undo-tree-id40622 . -3) (undo-tree-id40623 . -3) (undo-tree-id40624 . -3) (undo-tree-id40625 . -3) (undo-tree-id40626 . -3) (undo-tree-id40627 . -3) (undo-tree-id40628 . -3) (undo-tree-id40629 . -3) (undo-tree-id40630 . -6) (undo-tree-id40631 . -6) (undo-tree-id40632 . -6) (undo-tree-id40633 . -6) (undo-tree-id40634 . -6) (undo-tree-id40635 . -6) (undo-tree-id40636 . -6) (undo-tree-id40637 . -6) (undo-tree-id40638 . -6) (undo-tree-id40639 . -6) (undo-tree-id40640 . -6) (undo-tree-id40641 . -6) (undo-tree-id40642 . -6) (undo-tree-id40643 . -6) (undo-tree-id40644 . -6) (undo-tree-id40645 . -6) (undo-tree-id40646 . -10) (undo-tree-id40647 . -10) (undo-tree-id40648 . -10) (undo-tree-id40649 . -10) (undo-tree-id40650 . -10) (undo-tree-id40651 . -10) (undo-tree-id40652 . -10) (undo-tree-id40653 . -10) (undo-tree-id40654 . -10) (undo-tree-id40655 . -10) (undo-tree-id40656 . -10) (undo-tree-id40657 . -10) (undo-tree-id40658 . -10) (undo-tree-id40659 . -10) (undo-tree-id40660 . -10) (undo-tree-id40661 . -10) (undo-tree-id40662 . -13) (undo-tree-id40663 . -13) (undo-tree-id40664 . -13) (undo-tree-id40665 . -13) (undo-tree-id40666 . -13) (undo-tree-id40667 . -13) (undo-tree-id40668 . -13) (undo-tree-id40669 . -13) (undo-tree-id40670 . -13) (undo-tree-id40671 . -13) (undo-tree-id40672 . -13) (undo-tree-id40673 . -13) (undo-tree-id40674 . -13) (undo-tree-id40675 . -13) (undo-tree-id40676 . -13) (undo-tree-id40677 . -13) (undo-tree-id40678 . -21) (undo-tree-id40679 . -21) (undo-tree-id40680 . -21) (undo-tree-id40681 . -21) (undo-tree-id40682 . -21) (undo-tree-id40683 . -21) (undo-tree-id40684 . -21) (undo-tree-id40685 . -21) (undo-tree-id40686 . -21) (undo-tree-id40687 . -21) (undo-tree-id40688 . -21) (undo-tree-id40689 . -21) (undo-tree-id40690 . -21) (undo-tree-id40691 . -21) (undo-tree-id40692 . -21) (undo-tree-id40693 . -21) (undo-tree-id40694 . -24) (undo-tree-id40695 . -24) (undo-tree-id40696 . -24) (undo-tree-id40697 . -24) (undo-tree-id40698 . -24) (undo-tree-id40699 . -24) (undo-tree-id40700 . -24) (undo-tree-id40701 . -24) (undo-tree-id40702 . -24) (undo-tree-id40703 . -24) (undo-tree-id40704 . -24) (undo-tree-id40705 . -24) (undo-tree-id40706 . -24) (undo-tree-id40707 . -24) (undo-tree-id40708 . -24) (undo-tree-id40709 . -24) (undo-tree-id40710 . -24) (undo-tree-id40711 . -24) (undo-tree-id40712 . -24) (undo-tree-id40713 . -24) (undo-tree-id40714 . -24) (undo-tree-id40715 . -24) (undo-tree-id40716 . -25) 4166) nil (25767 11422 872489 847000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4141) (undo-tree-id40442 . -1) (undo-tree-id40443 . -1) (undo-tree-id40444 . -1) (undo-tree-id40445 . -1) (undo-tree-id40446 . -1) (undo-tree-id40447 . -1) (undo-tree-id40448 . -1) (undo-tree-id40449 . -1) (undo-tree-id40450 . -1) (undo-tree-id40451 . -1) (undo-tree-id40452 . -1) (undo-tree-id40453 . -1) (undo-tree-id40454 . -1) (undo-tree-id40455 . -1) (undo-tree-id40456 . -1) (undo-tree-id40457 . -1) (undo-tree-id40458 . -1) (undo-tree-id40459 . -1) (undo-tree-id40460 . -1) (undo-tree-id40461 . -1) (undo-tree-id40462 . -1) (undo-tree-id40463 . -1) (undo-tree-id40464 . -1) (undo-tree-id40465 . -1) (undo-tree-id40466 . -1) (undo-tree-id40467 . -1) (undo-tree-id40468 . -1) (undo-tree-id40469 . -1) (undo-tree-id40470 . -1) (undo-tree-id40471 . -1) (undo-tree-id40472 . -1) (undo-tree-id40473 . -1) (undo-tree-id40474 . -1) (undo-tree-id40475 . -1) (undo-tree-id40476 . -1) (undo-tree-id40477 . -1) (undo-tree-id40478 . -1) (undo-tree-id40479 . -1) (undo-tree-id40480 . -1) (undo-tree-id40481 . -1) (undo-tree-id40482 . -1) (undo-tree-id40483 . -1) (undo-tree-id40484 . -1) (undo-tree-id40485 . -1) (undo-tree-id40486 . -1) (undo-tree-id40487 . -1) (undo-tree-id40488 . -1) (undo-tree-id40489 . -1) (undo-tree-id40490 . -1) (undo-tree-id40491 . -1) (undo-tree-id40492 . -1) (undo-tree-id40493 . -1) (undo-tree-id40494 . -1) (undo-tree-id40495 . -1) (undo-tree-id40496 . -1) (undo-tree-id40497 . -1) (undo-tree-id40498 . -1) (undo-tree-id40499 . -1) (undo-tree-id40500 . -1) (undo-tree-id40501 . -1) (undo-tree-id40502 . -1) (undo-tree-id40503 . -1) (undo-tree-id40504 . -1) (undo-tree-id40505 . -1) (undo-tree-id40506 . -1) (undo-tree-id40507 . -1) (undo-tree-id40508 . -1) (undo-tree-id40509 . -1) (undo-tree-id40510 . -1) (undo-tree-id40511 . -1) (undo-tree-id40512 . -1) (undo-tree-id40513 . -1) (undo-tree-id40514 . -1) (undo-tree-id40515 . -1) (undo-tree-id40516 . -1) (undo-tree-id40517 . -1) (undo-tree-id40518 . -1) (undo-tree-id40519 . -1) (undo-tree-id40520 . -1) (undo-tree-id40521 . -1) (undo-tree-id40522 . -1) (undo-tree-id40523 . -1) (undo-tree-id40524 . -1) (undo-tree-id40525 . -1) (undo-tree-id40526 . -1) (undo-tree-id40527 . -1) (undo-tree-id40528 . -1) (undo-tree-id40529 . -1) (undo-tree-id40530 . -1) (undo-tree-id40531 . -1) (undo-tree-id40532 . -1) (undo-tree-id40533 . -1) (undo-tree-id40534 . -1) (undo-tree-id40535 . -1) (undo-tree-id40536 . -1) (undo-tree-id40537 . -1) (undo-tree-id40538 . -1) (undo-tree-id40539 . -1) (undo-tree-id40540 . -1) (undo-tree-id40541 . -1) (undo-tree-id40542 . -1) (undo-tree-id40543 . -1) (undo-tree-id40544 . -1) (undo-tree-id40545 . -1) (undo-tree-id40546 . -1) (undo-tree-id40547 . -1) (undo-tree-id40548 . -1) (undo-tree-id40549 . -1) (undo-tree-id40550 . -1) (undo-tree-id40551 . -1) (undo-tree-id40552 . -1) (undo-tree-id40553 . -1) (undo-tree-id40554 . -1) (undo-tree-id40555 . -1) (undo-tree-id40556 . -1) (undo-tree-id40557 . -1) (undo-tree-id40558 . -1) (undo-tree-id40559 . -1) (undo-tree-id40560 . -1) (undo-tree-id40561 . -1) (undo-tree-id40562 . -1) (undo-tree-id40563 . -1) (undo-tree-id40564 . -1) (undo-tree-id40565 . -1) (undo-tree-id40566 . -1) (undo-tree-id40567 . -1) (undo-tree-id40568 . -1) (undo-tree-id40569 . -1) (undo-tree-id40570 . -1) (undo-tree-id40571 . -1) (undo-tree-id40572 . -1) (undo-tree-id40573 . -1) (undo-tree-id40574 . -1) (undo-tree-id40575 . -1) (undo-tree-id40576 . -1) (undo-tree-id40577 . -1) (undo-tree-id40578 . -1) (undo-tree-id40579 . -1) (undo-tree-id40580 . -1) (undo-tree-id40581 . -1) (undo-tree-id40582 . -1) (undo-tree-id40583 . -1) (undo-tree-id40584 . -1) (undo-tree-id40585 . -1) (undo-tree-id40586 . -1) (undo-tree-id40587 . -1) (undo-tree-id40588 . -1) (undo-tree-id40589 . -1) (undo-tree-id40590 . -1) (undo-tree-id40591 . -1) (undo-tree-id40592 . -1) (undo-tree-id40593 . -1) (undo-tree-id40594 . -1) (undo-tree-id40595 . -1) (undo-tree-id40596 . -1) (undo-tree-id40597 . -1) (undo-tree-id40598 . -1) (undo-tree-id40599 . -1) (undo-tree-id40600 . -1) (undo-tree-id40601 . -1) (undo-tree-id40602 . -1) (undo-tree-id40603 . -1)) nil (25767 11422 872306 378000) 0 nil])
([nil nil ((#("(max_id) because there are 39 distinct characters in the text," 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 5 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 57 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4183) (undo-tree-id42575 . -61) (undo-tree-id42576 . -61) (undo-tree-id42577 . -61) (undo-tree-id42578 . -1) (undo-tree-id42579 . -1) (undo-tree-id42580 . -1) (undo-tree-id42581 . -1) (undo-tree-id42582 . -1) (undo-tree-id42583 . -1) (undo-tree-id42584 . -1) (undo-tree-id42585 . -1) (undo-tree-id42586 . -1) (undo-tree-id42587 . -1) (undo-tree-id42588 . -1) (undo-tree-id42589 . -1) (undo-tree-id42590 . -1) (undo-tree-id42591 . -1) (undo-tree-id42592 . -1) (undo-tree-id42593 . -1) (undo-tree-id42594 . -4) (undo-tree-id42595 . -4) (undo-tree-id42596 . -4) (undo-tree-id42597 . -4) (undo-tree-id42598 . -4) (undo-tree-id42599 . -4) (undo-tree-id42600 . -4) (undo-tree-id42601 . -4) (undo-tree-id42602 . -4) (undo-tree-id42603 . -4) (undo-tree-id42604 . -4) (undo-tree-id42605 . -6) (undo-tree-id42606 . -6) (undo-tree-id42607 . -6) (undo-tree-id42608 . -6) (undo-tree-id42609 . -6) (undo-tree-id42610 . -6) (undo-tree-id42611 . -6) (undo-tree-id42612 . -6) (undo-tree-id42613 . -6) (undo-tree-id42614 . -6) (undo-tree-id42615 . -6) (undo-tree-id42616 . -7) (undo-tree-id42617 . -7) (undo-tree-id42618 . -7) (undo-tree-id42619 . -7) (undo-tree-id42620 . -7) (undo-tree-id42621 . -7) (undo-tree-id42622 . -7) (undo-tree-id42623 . -7) (undo-tree-id42624 . -7) (undo-tree-id42625 . -7) (undo-tree-id42626 . -7) (undo-tree-id42627 . -9) (undo-tree-id42628 . -9) (undo-tree-id42629 . -9) (undo-tree-id42630 . -9) (undo-tree-id42631 . -9) (undo-tree-id42632 . -9) (undo-tree-id42633 . -9) (undo-tree-id42634 . -9) (undo-tree-id42635 . -9) (undo-tree-id42636 . -9) (undo-tree-id42637 . -9) (undo-tree-id42638 . -9) (undo-tree-id42639 . -9) (undo-tree-id42640 . -9) (undo-tree-id42641 . -9) (undo-tree-id42642 . -9) (undo-tree-id42643 . -9) (undo-tree-id42644 . -9) (undo-tree-id42645 . -9) (undo-tree-id42646 . -9) (undo-tree-id42647 . -9) (undo-tree-id42648 . -9) (undo-tree-id42649 . -9) (undo-tree-id42650 . -9) (undo-tree-id42651 . -9) (undo-tree-id42652 . -9) (undo-tree-id42653 . -7) (undo-tree-id42654 . -7) (undo-tree-id42655 . -7) (undo-tree-id42656 . -7) (undo-tree-id42657 . -7) (undo-tree-id42658 . -7) (undo-tree-id42659 . -7) (undo-tree-id42660 . -7) (undo-tree-id42661 . -7) (undo-tree-id42662 . -7) (undo-tree-id42663 . -7) (undo-tree-id42664 . -4) (undo-tree-id42665 . -4) (undo-tree-id42666 . -4) (undo-tree-id42667 . -4) (undo-tree-id42668 . -4) (undo-tree-id42669 . -4) (undo-tree-id42670 . -4) (undo-tree-id42671 . -4) (undo-tree-id42672 . -4) (undo-tree-id42673 . -4) (undo-tree-id42674 . -4) (undo-tree-id42675 . -1) (undo-tree-id42676 . -1) (undo-tree-id42677 . -1) (undo-tree-id42678 . -1) (undo-tree-id42679 . -1) (undo-tree-id42680 . -1) (undo-tree-id42681 . -1) (undo-tree-id42682 . -1) (undo-tree-id42683 . -1) (undo-tree-id42684 . -1) (undo-tree-id42685 . -1) (undo-tree-id42686 . -62) (undo-tree-id42687 . -61) (undo-tree-id42688 . -3) (undo-tree-id42689 . -3) (undo-tree-id42690 . -3) (undo-tree-id42691 . -3) (undo-tree-id42692 . -3) (undo-tree-id42693 . -3) (undo-tree-id42694 . -3) (undo-tree-id42695 . -3) (undo-tree-id42696 . -3) (undo-tree-id42697 . -3) (undo-tree-id42698 . -3) (undo-tree-id42699 . -3) (undo-tree-id42700 . -3) (undo-tree-id42701 . -3) (undo-tree-id42702 . -3) (undo-tree-id42703 . -3) (undo-tree-id42704 . -4) (undo-tree-id42705 . -4) (undo-tree-id42706 . -4) (undo-tree-id42707 . -4) (undo-tree-id42708 . -4) (undo-tree-id42709 . -4) (undo-tree-id42710 . -4) (undo-tree-id42711 . -4) (undo-tree-id42712 . -4) (undo-tree-id42713 . -4) (undo-tree-id42714 . -4) (undo-tree-id42715 . -4) (undo-tree-id42716 . -4) (undo-tree-id42717 . -4) (undo-tree-id42718 . -4) (undo-tree-id42719 . -4) (undo-tree-id42720 . -4) (undo-tree-id42721 . -4) (undo-tree-id42722 . -4) (undo-tree-id42723 . -4) (undo-tree-id42724 . -4) (undo-tree-id42725 . -6) (undo-tree-id42726 . -6) (undo-tree-id42727 . -6) (undo-tree-id42728 . -6) (undo-tree-id42729 . -6) (undo-tree-id42730 . -6) (undo-tree-id42731 . -6) (undo-tree-id42732 . -6) (undo-tree-id42733 . -6) (undo-tree-id42734 . -6) (undo-tree-id42735 . -6) (undo-tree-id42736 . -6) (undo-tree-id42737 . -6) (undo-tree-id42738 . -6) (undo-tree-id42739 . -6) (undo-tree-id42740 . -6) (undo-tree-id42741 . -7) (undo-tree-id42742 . -7) (undo-tree-id42743 . -7) (undo-tree-id42744 . -7) (undo-tree-id42745 . -7) (undo-tree-id42746 . -7) (undo-tree-id42747 . -7) (undo-tree-id42748 . -7) (undo-tree-id42749 . -7) (undo-tree-id42750 . -7) (undo-tree-id42751 . -7) (undo-tree-id42752 . -7) (undo-tree-id42753 . -7) (undo-tree-id42754 . -7) (undo-tree-id42755 . -7) (undo-tree-id42756 . -7) (undo-tree-id42757 . -15) (undo-tree-id42758 . -15) (undo-tree-id42759 . -15) (undo-tree-id42760 . -15) (undo-tree-id42761 . -15) (undo-tree-id42762 . -15) (undo-tree-id42763 . -15) (undo-tree-id42764 . -15) (undo-tree-id42765 . -15) (undo-tree-id42766 . -15) (undo-tree-id42767 . -15) (undo-tree-id42768 . -15) (undo-tree-id42769 . -15) (undo-tree-id42770 . -15) (undo-tree-id42771 . -15) (undo-tree-id42772 . -15) (undo-tree-id42773 . -21) (undo-tree-id42774 . -21) (undo-tree-id42775 . -21) (undo-tree-id42776 . -21) (undo-tree-id42777 . -21) (undo-tree-id42778 . -21) (undo-tree-id42779 . -21) (undo-tree-id42780 . -21) (undo-tree-id42781 . -21) (undo-tree-id42782 . -21) (undo-tree-id42783 . -21) (undo-tree-id42784 . -21) (undo-tree-id42785 . -21) (undo-tree-id42786 . -21) (undo-tree-id42787 . -21) (undo-tree-id42788 . -21) (undo-tree-id42789 . -25) (undo-tree-id42790 . -25) (undo-tree-id42791 . -25) (undo-tree-id42792 . -25) (undo-tree-id42793 . -25) (undo-tree-id42794 . -25) (undo-tree-id42795 . -25) (undo-tree-id42796 . -25) (undo-tree-id42797 . -25) (undo-tree-id42798 . -25) (undo-tree-id42799 . -25) (undo-tree-id42800 . -25) (undo-tree-id42801 . -25) (undo-tree-id42802 . -25) (undo-tree-id42803 . -25) (undo-tree-id42804 . -25) (undo-tree-id42805 . -25) (undo-tree-id42806 . -25) (undo-tree-id42807 . -25) (undo-tree-id42808 . -25) (undo-tree-id42809 . -25) (undo-tree-id42810 . -28) (undo-tree-id42811 . -28) (undo-tree-id42812 . -28) (undo-tree-id42813 . -28) (undo-tree-id42814 . -28) (undo-tree-id42815 . -28) (undo-tree-id42816 . -37) (undo-tree-id42817 . -37) (undo-tree-id42818 . -37) (undo-tree-id42819 . -37) (undo-tree-id42820 . -37) (undo-tree-id42821 . -37) (undo-tree-id42822 . -48) (undo-tree-id42823 . -48) (undo-tree-id42824 . -48) (undo-tree-id42825 . -48) (undo-tree-id42826 . -48) (undo-tree-id42827 . -48) (undo-tree-id42828 . -51) (undo-tree-id42829 . -51) (undo-tree-id42830 . -51) (undo-tree-id42831 . -51) (undo-tree-id42832 . -51) (undo-tree-id42833 . -51) (undo-tree-id42834 . -55) (undo-tree-id42835 . -55) (undo-tree-id42836 . -55) (undo-tree-id42837 . -55) (undo-tree-id42838 . -55) (undo-tree-id42839 . -55) (undo-tree-id42840 . -60) (undo-tree-id42841 . -60) (undo-tree-id42842 . -60) (undo-tree-id42843 . -60) (undo-tree-id42844 . -60) (undo-tree-id42845 . -60) (undo-tree-id42846 . -61) (undo-tree-id42847 . -61) (undo-tree-id42848 . -61) (undo-tree-id42849 . -61) (undo-tree-id42850 . -61) (undo-tree-id42851 . -61) (undo-tree-id42852 . -61) (undo-tree-id42853 . -61) (undo-tree-id42854 . -61) (undo-tree-id42855 . -61) (undo-tree-id42856 . -61) (undo-tree-id42857 . -61) (undo-tree-id42858 . -61) (undo-tree-id42859 . -61) (undo-tree-id42860 . -61) (undo-tree-id42861 . -61) (undo-tree-id42862 . -61) (undo-tree-id42863 . -61) (undo-tree-id42864 . -61) (undo-tree-id42865 . -61) (undo-tree-id42866 . -61) (undo-tree-id42867 . -61) (undo-tree-id42868 . -61) (undo-tree-id42869 . -61) (undo-tree-id42870 . -61) (undo-tree-id42871 . -61) (undo-tree-id42872 . -61) (undo-tree-id42873 . -61) (undo-tree-id42874 . -62) 4244 (t 25767 11422 920160 473000)) nil (25767 11456 721277 61000) 0 nil])
([nil nil ((4089 . 5105) (#("- and we want to output a probability for each possible character (at each time step). The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- The output layer is a time-distributed Dense layer. This time this layer must have 39 units" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 69 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 69 70 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 70 124 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 124 127 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 127 143 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 143 144 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 144 215 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 215 216 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 216 262 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 262 270 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 270 271 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 271 278 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 278 279 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 279 290 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 290 291 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 291 303 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 303 319 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 319 332 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 332 333 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 333 344 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 344 345 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 345 407 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 407 408 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 408 420 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 420 448 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 448 449 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 449 482 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 482 510 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 510 511 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 511 520 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 520 532 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 532 533 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 533 538 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 538 545 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 545 546 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 546 549 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 549 550 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 550 552 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 552 554 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 554 555 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 555 577 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 577 578 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 578 585 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 585 591 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 591 592 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 592 620 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 620 621 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 621 630 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 630 636 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 636 637 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 637 659 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 659 660 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 660 667 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 667 673 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 673 674 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 674 725 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 725 726 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 726 728 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 728 729 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 729 730 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 730 752 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 752 754 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 754 755 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 755 781 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 781 782 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 782 793 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 793 794 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 794 806 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 806 826 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 826 827 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 827 865 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 865 866 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 866 867 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 867 868 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 868 870 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 870 904 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 904 905 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 905 906 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 906 909 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 909 910 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 910 912 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 912 921 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 921 922 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 922 923 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 923 924 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 924 925 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 925 952 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 952 996 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 996 997 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky t) 997 998 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 998 1016 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 4089) (undo-tree-id41239 . -1016) (undo-tree-id41240 . -1016) (undo-tree-id41241 . -1016) (undo-tree-id41242 . -1016) (undo-tree-id41243 . 91) (undo-tree-id41244 . -952) (undo-tree-id41245 . -952) (undo-tree-id41246 . -952) (undo-tree-id41247 . -952) (undo-tree-id41248 . -952) (undo-tree-id41249 . -952) (undo-tree-id41250 . -952) (undo-tree-id41251 . -952) (undo-tree-id41252 . -952) (undo-tree-id41253 . -952) (undo-tree-id41254 . -952) (undo-tree-id41255 . -975) (undo-tree-id41256 . -975) (undo-tree-id41257 . -975) (undo-tree-id41258 . -975) (undo-tree-id41259 . -975) (undo-tree-id41260 . -975) (undo-tree-id41261 . -975) (undo-tree-id41262 . -975) (undo-tree-id41263 . -975) (undo-tree-id41264 . -975) (undo-tree-id41265 . -975) (undo-tree-id41266 . -975) (undo-tree-id41267 . -975) (undo-tree-id41268 . -975) (undo-tree-id41269 . -975) (undo-tree-id41270 . -975) (undo-tree-id41271 . -975) (undo-tree-id41272 . -975) (undo-tree-id41273 . -975) (undo-tree-id41274 . -975) (undo-tree-id41275 . -975) (undo-tree-id41276 . -975) (undo-tree-id41277 . -975) (undo-tree-id41278 . -975) (undo-tree-id41279 . -975) (undo-tree-id41280 . -975) (undo-tree-id41281 . -975) (undo-tree-id41282 . -975) (undo-tree-id41283 . -975) (undo-tree-id41284 . -975) (undo-tree-id41285 . -975) (undo-tree-id41286 . -975) (undo-tree-id41287 . -975) (undo-tree-id41288 . -975) (undo-tree-id41289 . -975) (undo-tree-id41290 . -975) (undo-tree-id41291 . -975) (undo-tree-id41292 . -975) (undo-tree-id41293 . -975) (undo-tree-id41294 . -975) (undo-tree-id41295 . -975) (undo-tree-id41296 . -975) (undo-tree-id41297 . -975) (undo-tree-id41298 . -975) (undo-tree-id41299 . -975) (undo-tree-id41300 . -975) (undo-tree-id41301 . -975) (undo-tree-id41302 . -975) (undo-tree-id41303 . -975) (undo-tree-id41304 . -975) (undo-tree-id41305 . -975) (undo-tree-id41306 . -975) (undo-tree-id41307 . -975) (undo-tree-id41308 . -975) (undo-tree-id41309 . -975) (undo-tree-id41310 . -975) (undo-tree-id41311 . -975) (undo-tree-id41312 . -975) (undo-tree-id41313 . -975) (undo-tree-id41314 . -975) (undo-tree-id41315 . -975) (undo-tree-id41316 . -975) (undo-tree-id41317 . -975) (undo-tree-id41318 . -975) (undo-tree-id41319 . -975) (undo-tree-id41320 . -975) (undo-tree-id41321 . -975) (undo-tree-id41322 . -975) (undo-tree-id41323 . -975) (undo-tree-id41324 . -975) (undo-tree-id41325 . -975) (undo-tree-id41326 . -975) (undo-tree-id41327 . -975) (undo-tree-id41328 . -975) (undo-tree-id41329 . -975) (undo-tree-id41330 . -975) (undo-tree-id41331 . -975) (undo-tree-id41332 . -975) (undo-tree-id41333 . -975) (undo-tree-id41334 . -975) (undo-tree-id41335 . -975) (undo-tree-id41336 . -975) (undo-tree-id41337 . -975) (undo-tree-id41338 . -975) (undo-tree-id41339 . -975) (undo-tree-id41340 . -975) (undo-tree-id41341 . -975) (undo-tree-id41342 . -975) (undo-tree-id41343 . -975) (undo-tree-id41344 . -975) (undo-tree-id41345 . -975) (undo-tree-id41346 . -975) (undo-tree-id41347 . -975) (undo-tree-id41348 . -975) (undo-tree-id41349 . -975) (undo-tree-id41350 . -975) (undo-tree-id41351 . -975) (undo-tree-id41352 . -975) (undo-tree-id41353 . -975) (undo-tree-id41354 . -975) (undo-tree-id41355 . -975) (undo-tree-id41356 . -975) (undo-tree-id41357 . -975) (undo-tree-id41358 . -975) (undo-tree-id41359 . -975) (undo-tree-id41360 . -975) (undo-tree-id41361 . -975) (undo-tree-id41362 . -975) (undo-tree-id41363 . -975) (undo-tree-id41364 . -975) (undo-tree-id41365 . -975) (undo-tree-id41366 . -975) (undo-tree-id41367 . -975) (undo-tree-id41368 . -975) (undo-tree-id41369 . -975) (undo-tree-id41370 . -975) (undo-tree-id41371 . -975) (undo-tree-id41372 . -975) (undo-tree-id41373 . -975) (undo-tree-id41374 . -975) (undo-tree-id41375 . -975) (undo-tree-id41376 . -975) (undo-tree-id41377 . -975) (undo-tree-id41378 . -975) (undo-tree-id41379 . -975) (undo-tree-id41380 . -975) (undo-tree-id41381 . -975) (undo-tree-id41382 . -975) (undo-tree-id41383 . -975) (undo-tree-id41384 . -975) (undo-tree-id41385 . -975) (undo-tree-id41386 . -975) (undo-tree-id41387 . -975) (undo-tree-id41388 . -975) (undo-tree-id41389 . -975) (undo-tree-id41390 . -975) (undo-tree-id41391 . -975) (undo-tree-id41392 . -975) (undo-tree-id41393 . -975) (undo-tree-id41394 . -975) (undo-tree-id41395 . -975) (undo-tree-id41396 . -975) (undo-tree-id41397 . -975) (undo-tree-id41398 . -975) (undo-tree-id41399 . -975) (undo-tree-id41400 . -975) (undo-tree-id41401 . -975) (undo-tree-id41402 . -975) (undo-tree-id41403 . -975) (undo-tree-id41404 . -975) (undo-tree-id41405 . -975) (undo-tree-id41406 . -975) (undo-tree-id41407 . -975) (undo-tree-id41408 . -975) (undo-tree-id41409 . -975) (undo-tree-id41410 . -975) (undo-tree-id41411 . -975) (undo-tree-id41412 . -975) (undo-tree-id41413 . -975) (undo-tree-id41414 . -1016) (undo-tree-id41415 . -975) (undo-tree-id41416 . -975) (undo-tree-id41417 . -975) (undo-tree-id41418 . -975) (undo-tree-id41419 . -975) (undo-tree-id41420 . -975) (undo-tree-id41421 . -975) (undo-tree-id41422 . -975) (undo-tree-id41423 . -975) (undo-tree-id41424 . -975) (undo-tree-id41425 . -975) (undo-tree-id41426 . -975) (undo-tree-id41427 . -975) (undo-tree-id41428 . -975) (undo-tree-id41429 . -975) (undo-tree-id41430 . -975) (undo-tree-id41431 . -975) (undo-tree-id41432 . -975) (undo-tree-id41433 . -975) (undo-tree-id41434 . -975) (undo-tree-id41435 . -975) (undo-tree-id41436 . -975) (undo-tree-id41437 . -975) (undo-tree-id41438 . -975) (undo-tree-id41439 . -977) (undo-tree-id41440 . -977) (undo-tree-id41441 . -977) (undo-tree-id41442 . -977) (undo-tree-id41443 . -977) (undo-tree-id41444 . -977) (undo-tree-id41445 . -977) (undo-tree-id41446 . -977) (undo-tree-id41447 . -977) (undo-tree-id41448 . -977) (undo-tree-id41449 . -977) (undo-tree-id41450 . -977) (undo-tree-id41451 . -977) (undo-tree-id41452 . -977) (undo-tree-id41453 . -977) (undo-tree-id41454 . -977) (undo-tree-id41455 . -982) (undo-tree-id41456 . -982) (undo-tree-id41457 . -982) (undo-tree-id41458 . -982) (undo-tree-id41459 . -982) (undo-tree-id41460 . -982) (undo-tree-id41461 . -982) (undo-tree-id41462 . -982) (undo-tree-id41463 . -982) (undo-tree-id41464 . -982) (undo-tree-id41465 . -982) (undo-tree-id41466 . -982) (undo-tree-id41467 . -982) (undo-tree-id41468 . -982) (undo-tree-id41469 . -982) (undo-tree-id41470 . -982) (undo-tree-id41471 . -987) (undo-tree-id41472 . -987) (undo-tree-id41473 . -987) (undo-tree-id41474 . -987) (undo-tree-id41475 . -987) (undo-tree-id41476 . -987) (undo-tree-id41477 . -987) (undo-tree-id41478 . -987) (undo-tree-id41479 . -987) (undo-tree-id41480 . -987) (undo-tree-id41481 . -987) (undo-tree-id41482 . -987) (undo-tree-id41483 . -987) (undo-tree-id41484 . -987) (undo-tree-id41485 . -987) (undo-tree-id41486 . -987) (undo-tree-id41487 . -987) (undo-tree-id41488 . -987) (undo-tree-id41489 . -987) (undo-tree-id41490 . -987) (undo-tree-id41491 . -987) (undo-tree-id41492 . -987) (undo-tree-id41493 . -987) (undo-tree-id41494 . -987) (undo-tree-id41495 . -987) (undo-tree-id41496 . -987) (undo-tree-id41497 . -992) (undo-tree-id41498 . -992) (undo-tree-id41499 . -992) (undo-tree-id41500 . -992) (undo-tree-id41501 . -992) (undo-tree-id41502 . -992) (undo-tree-id41503 . -992) (undo-tree-id41504 . -992) (undo-tree-id41505 . -992) (undo-tree-id41506 . -992) (undo-tree-id41507 . -992) (undo-tree-id41508 . -992) (undo-tree-id41509 . -992) (undo-tree-id41510 . -992) (undo-tree-id41511 . -992) (undo-tree-id41512 . -992) (undo-tree-id41513 . -998) (undo-tree-id41514 . -998) (undo-tree-id41515 . -998) (undo-tree-id41516 . -998) (undo-tree-id41517 . -998) (undo-tree-id41518 . -998) (undo-tree-id41519 . -998) (undo-tree-id41520 . -998) (undo-tree-id41521 . -998) (undo-tree-id41522 . -998) (undo-tree-id41523 . -998) (undo-tree-id41524 . -1003) (undo-tree-id41525 . -1003) (undo-tree-id41526 . -1003) (undo-tree-id41527 . -1003) (undo-tree-id41528 . -1003) (undo-tree-id41529 . -1003) (undo-tree-id41530 . -1003) (undo-tree-id41531 . -1003) (undo-tree-id41532 . -1003) (undo-tree-id41533 . -1003) (undo-tree-id41534 . -1003) (undo-tree-id41535 . -1003) (undo-tree-id41536 . -1003) (undo-tree-id41537 . -1003) (undo-tree-id41538 . -1003) (undo-tree-id41539 . -1003) (undo-tree-id41540 . -1008) (undo-tree-id41541 . -1008) (undo-tree-id41542 . -1008) (undo-tree-id41543 . -1008) (undo-tree-id41544 . -1008) (undo-tree-id41545 . -1008) (undo-tree-id41546 . -1008) (undo-tree-id41547 . -1008) (undo-tree-id41548 . -1008) (undo-tree-id41549 . -1008) (undo-tree-id41550 . -1008) (undo-tree-id41551 . -1008) (undo-tree-id41552 . -1008) (undo-tree-id41553 . -1008) (undo-tree-id41554 . -1008) (undo-tree-id41555 . -1008) (undo-tree-id41556 . -1008) (undo-tree-id41557 . -1008) (undo-tree-id41558 . -1008) (undo-tree-id41559 . -1008) (undo-tree-id41560 . -1008) (undo-tree-id41561 . -1011) (undo-tree-id41562 . -1011) (undo-tree-id41563 . -1011) (undo-tree-id41564 . -1011) (undo-tree-id41565 . -1011) (undo-tree-id41566 . -1011) (undo-tree-id41567 . -1011) (undo-tree-id41568 . -1011) (undo-tree-id41569 . -1011) (undo-tree-id41570 . -1011) (undo-tree-id41571 . -1011) (undo-tree-id41572 . -1016) (undo-tree-id41573 . -1016) (undo-tree-id41574 . -1016) (undo-tree-id41575 . -1016) (undo-tree-id41576 . -1016) (undo-tree-id41577 . -1016) (undo-tree-id41578 . -1016) (undo-tree-id41579 . -1016) (undo-tree-id41580 . -1016) (undo-tree-id41581 . -1016) (undo-tree-id41582 . -1016) (undo-tree-id41583 . -1016) (undo-tree-id41584 . -1016) (undo-tree-id41585 . -1016) (undo-tree-id41586 . -1016) (undo-tree-id41587 . -1016) (undo-tree-id41588 . -1016) (undo-tree-id41589 . -1016) (undo-tree-id41590 . -1016) (undo-tree-id41591 . -1016) (undo-tree-id41592 . -1016) (undo-tree-id41593 . -1016) (undo-tree-id41594 . -1016) (undo-tree-id41595 . -1016) (undo-tree-id41596 . -1016) (undo-tree-id41597 . -1016) (undo-tree-id41598 . -1016) (undo-tree-id41599 . -1016) (undo-tree-id41600 . -1016) (undo-tree-id41601 . -1016) (undo-tree-id41602 . -1016) (undo-tree-id41603 . -1016) (undo-tree-id41604 . -1016) (undo-tree-id41605 . -1016) (undo-tree-id41606 . -1016) (undo-tree-id41607 . -1016) (undo-tree-id41608 . -1016) (undo-tree-id41609 . -1016) (undo-tree-id41610 . -1016) (undo-tree-id41611 . -1016) (undo-tree-id41612 . -1016) (undo-tree-id41613 . -1016) (undo-tree-id41614 . -1016) (undo-tree-id41615 . -1016) (undo-tree-id41616 . -1016) (undo-tree-id41617 . -1016) (undo-tree-id41618 . -1016) (undo-tree-id41619 . -1016) (undo-tree-id41620 . -1016) (undo-tree-id41621 . -1016) (undo-tree-id41622 . -1016) (undo-tree-id41623 . -1016) (undo-tree-id41624 . -1016) (undo-tree-id41625 . -1016) (undo-tree-id41626 . -1016) (undo-tree-id41627 . -1016) (undo-tree-id41628 . -1016) (undo-tree-id41629 . -1016) (undo-tree-id41630 . -1016) (undo-tree-id41631 . -1016) (undo-tree-id41632 . -1016) (undo-tree-id41633 . -1016) (undo-tree-id41634 . -1016) (undo-tree-id41635 . -1016) (undo-tree-id41636 . -1016) (undo-tree-id41637 . -1016) (undo-tree-id41638 . -1016) (undo-tree-id41639 . -1016) (undo-tree-id41640 . -1016) (undo-tree-id41641 . -1016) (undo-tree-id41642 . -1016) (undo-tree-id41643 . -1016) (undo-tree-id41644 . -1016) (undo-tree-id41645 . -1016) (undo-tree-id41646 . -1016) (undo-tree-id41647 . -1016) (undo-tree-id41648 . -1016) (undo-tree-id41649 . -1016) (undo-tree-id41650 . -1016) (undo-tree-id41651 . -1016) (undo-tree-id41652 . -1016) (undo-tree-id41653 . -1016) (undo-tree-id41654 . -1016) (undo-tree-id41655 . -1016) (undo-tree-id41656 . -1016) (undo-tree-id41657 . -1016) (undo-tree-id41658 . -1016) (undo-tree-id41659 . -1016) (undo-tree-id41660 . -1016) (undo-tree-id41661 . -1016) (undo-tree-id41662 . -1016) (undo-tree-id41663 . -1016) (undo-tree-id41664 . -1016) (undo-tree-id41665 . -1016) (undo-tree-id41666 . -1016) (undo-tree-id41667 . -1016) (undo-tree-id41668 . -1016) (undo-tree-id41669 . -1016) (undo-tree-id41670 . -1016) (undo-tree-id41671 . -1016) (undo-tree-id41672 . -1016) (undo-tree-id41673 . -1016) (undo-tree-id41674 . -1016) (undo-tree-id41675 . -1016) (undo-tree-id41676 . -1016) (undo-tree-id41677 . -1016) (undo-tree-id41678 . -1016) (undo-tree-id41679 . -1016) (undo-tree-id41680 . -1016) (undo-tree-id41681 . -1016) (undo-tree-id41682 . -1016) (undo-tree-id41683 . -1016) (undo-tree-id41684 . -1016) (undo-tree-id41685 . -1016) (undo-tree-id41686 . -1016) (undo-tree-id41687 . -1016) (undo-tree-id41688 . -1016) (undo-tree-id41689 . -1016) (undo-tree-id41690 . -1016) (undo-tree-id41691 . -1016) (undo-tree-id41692 . -1016) (undo-tree-id41693 . -1016) (undo-tree-id41694 . -1016) (undo-tree-id41695 . -1016) (undo-tree-id41696 . -1016) (undo-tree-id41697 . -1016) (undo-tree-id41698 . -1016) (undo-tree-id41699 . -1016) (undo-tree-id41700 . -1016) (undo-tree-id41701 . -1016) (undo-tree-id41702 . -1016) (undo-tree-id41703 . -1016) (undo-tree-id41704 . -1016) (undo-tree-id41705 . -1016) (undo-tree-id41706 . -1016) (undo-tree-id41707 . -1016) (undo-tree-id41708 . -1016) (undo-tree-id41709 . -1016) (undo-tree-id41710 . -1016) (undo-tree-id41711 . -1016) (undo-tree-id41712 . -1016) (undo-tree-id41713 . -1016) (undo-tree-id41714 . -1016) (undo-tree-id41715 . -1016) (undo-tree-id41716 . -1016) (undo-tree-id41717 . -1016) (undo-tree-id41718 . -1016) (undo-tree-id41719 . -1016) (undo-tree-id41720 . -1016) (undo-tree-id41721 . -1016) (undo-tree-id41722 . -1016) (undo-tree-id41723 . -1016) (undo-tree-id41724 . -1016) (undo-tree-id41725 . -1016) (undo-tree-id41726 . -1016) (undo-tree-id41727 . -1016) (undo-tree-id41728 . -1016) (undo-tree-id41729 . -1016) (undo-tree-id41730 . -1016) (undo-tree-id41731 . -1016) (undo-tree-id41732 . -1016) (undo-tree-id41733 . -1016) (undo-tree-id41734 . -1016) (undo-tree-id41735 . -1016) (undo-tree-id41736 . -1016) (undo-tree-id41737 . -1016) (undo-tree-id41738 . -1016) (undo-tree-id41739 . -1016) (undo-tree-id41740 . -1016) (undo-tree-id41741 . -1016) (undo-tree-id41742 . -1016) (undo-tree-id41743 . -1016) (undo-tree-id41744 . -1016) (undo-tree-id41745 . -1016) (undo-tree-id41746 . -1016) (undo-tree-id41747 . -1016) (undo-tree-id41748 . -1016) (undo-tree-id41749 . -1016) (undo-tree-id41750 . -1016) (undo-tree-id41751 . -1016) (undo-tree-id41752 . -1016) (undo-tree-id41753 . -1016) (undo-tree-id41754 . -1016) (undo-tree-id41755 . -1016) (undo-tree-id41756 . -1016) (undo-tree-id41757 . -1016) (undo-tree-id41758 . -1016) (undo-tree-id41759 . -1016) (undo-tree-id41760 . -1016) (undo-tree-id41761 . -1016) (undo-tree-id41762 . -1016) (undo-tree-id41763 . -1016) (undo-tree-id41764 . -1016) (undo-tree-id41765 . -1016) (undo-tree-id41766 . -1016) (undo-tree-id41767 . -1016) (undo-tree-id41768 . -1016) (undo-tree-id41769 . -1016) (undo-tree-id41770 . -1016) (undo-tree-id41771 . -1016) (undo-tree-id41772 . -1016) (undo-tree-id41773 . -1016) (undo-tree-id41774 . -1016) (undo-tree-id41775 . -1016) (undo-tree-id41776 . -1016) (undo-tree-id41777 . -1016) (undo-tree-id41778 . -1016) (undo-tree-id41779 . -1016) (undo-tree-id41780 . -1016) (undo-tree-id41781 . -1016) (undo-tree-id41782 . -1016) (undo-tree-id41783 . -1016) (undo-tree-id41784 . -1016) (undo-tree-id41785 . -1016) (undo-tree-id41786 . -1016) (undo-tree-id41787 . -1016) (undo-tree-id41788 . -1016) (undo-tree-id41789 . -1016) (undo-tree-id41790 . -1016) (undo-tree-id41791 . -1016) (undo-tree-id41792 . -1016) (undo-tree-id41793 . -1016) (undo-tree-id41794 . -1016) (undo-tree-id41795 . -1016) (undo-tree-id41796 . -1016) (undo-tree-id41797 . -1016) (undo-tree-id41798 . -1016) (undo-tree-id41799 . -1016) (undo-tree-id41800 . -1016) (undo-tree-id41801 . -1016) (undo-tree-id41802 . -1016) (undo-tree-id41803 . -1016) (undo-tree-id41804 . -1016) (undo-tree-id41805 . -1016) (undo-tree-id41806 . -1016) (undo-tree-id41807 . -1016) (undo-tree-id41808 . -1016) (undo-tree-id41809 . -1016) (undo-tree-id41810 . -1016) (undo-tree-id41811 . -1016) (undo-tree-id41812 . -1016) (undo-tree-id41813 . -1016) (undo-tree-id41814 . -1016) (undo-tree-id41815 . -1016) (undo-tree-id41816 . -1016) (undo-tree-id41817 . -1016) (undo-tree-id41818 . -1016) (undo-tree-id41819 . -1016) (undo-tree-id41820 . -1016) (undo-tree-id41821 . -1016) (undo-tree-id41822 . -1016) (undo-tree-id41823 . -1016) (undo-tree-id41824 . -1016) (undo-tree-id41825 . -1016) (undo-tree-id41826 . -1016) (undo-tree-id41827 . -1016) (undo-tree-id41828 . -1016) (undo-tree-id41829 . -1016) (undo-tree-id41830 . -1016) (undo-tree-id41831 . -1016) (undo-tree-id41832 . -1016) (undo-tree-id41833 . -1016) (undo-tree-id41834 . -1016) (undo-tree-id41835 . -1016) (undo-tree-id41836 . -1016) (undo-tree-id41837 . -1016) (undo-tree-id41838 . -1016) (undo-tree-id41839 . -1016) (undo-tree-id41840 . -1016) (undo-tree-id41841 . -1016) (undo-tree-id41842 . -1016) (undo-tree-id41843 . -1016) (undo-tree-id41844 . -1016) (undo-tree-id41845 . -1016) (undo-tree-id41846 . -1016) (undo-tree-id41847 . -1016) (undo-tree-id41848 . -1016) (undo-tree-id41849 . -1016) (undo-tree-id41850 . -1016) (undo-tree-id41851 . -1016) (undo-tree-id41852 . -1016) (undo-tree-id41853 . -1016) (undo-tree-id41854 . -1016) (undo-tree-id41855 . -1016) (undo-tree-id41856 . -1016) (undo-tree-id41857 . -1016) (undo-tree-id41858 . -1016) (undo-tree-id41859 . -1016) (undo-tree-id41860 . -1016) (undo-tree-id41861 . -1016) (undo-tree-id41862 . -1016) (undo-tree-id41863 . -1016) (undo-tree-id41864 . -1016) (undo-tree-id41865 . -1016) (undo-tree-id41866 . -1016) (undo-tree-id41867 . -1016) (undo-tree-id41868 . -1016) (undo-tree-id41869 . -1016) (undo-tree-id41870 . -1016) (undo-tree-id41871 . -1016) (undo-tree-id41872 . -1016) (undo-tree-id41873 . -1016) (undo-tree-id41874 . -1016) (undo-tree-id41875 . -1016) (undo-tree-id41876 . -1016) (undo-tree-id41877 . -1016) (undo-tree-id41878 . -1016) (undo-tree-id41879 . -1016) (undo-tree-id41880 . -1016) (undo-tree-id41881 . -1016) (undo-tree-id41882 . -1016) (undo-tree-id41883 . -1016) (undo-tree-id41884 . -1016) (undo-tree-id41885 . -1016) (undo-tree-id41886 . -1016) (undo-tree-id41887 . -1016) (undo-tree-id41888 . -1016) (undo-tree-id41889 . -1016) (undo-tree-id41890 . -1016) (undo-tree-id41891 . -1016) (undo-tree-id41892 . -1016) (undo-tree-id41893 . -1016) (undo-tree-id41894 . -1016) (undo-tree-id41895 . -1016) (undo-tree-id41896 . -1016) (undo-tree-id41897 . -1016) (undo-tree-id41898 . -1016) (undo-tree-id41899 . -1016) (undo-tree-id41900 . -1016) (undo-tree-id41901 . -1016) (undo-tree-id41902 . -1016) (undo-tree-id41903 . -1016) (undo-tree-id41904 . -1016) (undo-tree-id41905 . -1016) (undo-tree-id41906 . -1016) (undo-tree-id41907 . -1016) (undo-tree-id41908 . -1016) (undo-tree-id41909 . -1016) (undo-tree-id41910 . -1016) (undo-tree-id41911 . -1016) (undo-tree-id41912 . -1016) (undo-tree-id41913 . -1016) (undo-tree-id41914 . -1016) (undo-tree-id41915 . -1016) (undo-tree-id41916 . -1016) (undo-tree-id41917 . -1016) (undo-tree-id41918 . -1016) (undo-tree-id41919 . -1016) (undo-tree-id41920 . -1016) (undo-tree-id41921 . -1016) (undo-tree-id41922 . -1016) (undo-tree-id41923 . -1016) (undo-tree-id41924 . -1016) (undo-tree-id41925 . -1016) (undo-tree-id41926 . -1016) (undo-tree-id41927 . -1016) (undo-tree-id41928 . -1016) (undo-tree-id41929 . -1016) (undo-tree-id41930 . -1016) (undo-tree-id41931 . -1016) (undo-tree-id41932 . -1016) (undo-tree-id41933 . -1016) (undo-tree-id41934 . -1016) (undo-tree-id41935 . -1016) (undo-tree-id41936 . -1016) (undo-tree-id41937 . -1016) (undo-tree-id41938 . -1016) (undo-tree-id41939 . -1016) (undo-tree-id41940 . -1016) (undo-tree-id41941 . -1016) (undo-tree-id41942 . -1016) (undo-tree-id41943 . -1016) (undo-tree-id41944 . -1016) (undo-tree-id41945 . -1016) (undo-tree-id41946 . -1016) (undo-tree-id41947 . -1016) (undo-tree-id41948 . -1016) (undo-tree-id41949 . -1016) (undo-tree-id41950 . -1016) (undo-tree-id41951 . -1016) (undo-tree-id41952 . -1016) (undo-tree-id41953 . -1016) (undo-tree-id41954 . -1016) (undo-tree-id41955 . -1016) (undo-tree-id41956 . -1016) (undo-tree-id41957 . -1016) (undo-tree-id41958 . -1016) (undo-tree-id41959 . -1016) (undo-tree-id41960 . -1016) (undo-tree-id41961 . -1016) (undo-tree-id41962 . -1016) (undo-tree-id41963 . -1016) (undo-tree-id41964 . -1016) (undo-tree-id41965 . -1016) (undo-tree-id41966 . -1016) (undo-tree-id41967 . -1016) (undo-tree-id41968 . -1016) (undo-tree-id41969 . -1016) (undo-tree-id41970 . -1016) (undo-tree-id41971 . -1016) (undo-tree-id41972 . -1016) (undo-tree-id41973 . -1016) (undo-tree-id41974 . -1016) (undo-tree-id41975 . -1016) (undo-tree-id41976 . -1016) (undo-tree-id41977 . -1016) (undo-tree-id41978 . -1016) (undo-tree-id41979 . -1016) (undo-tree-id41980 . -1016) (undo-tree-id41981 . -1016) (undo-tree-id41982 . -1016) (undo-tree-id41983 . -1016) (undo-tree-id41984 . -1016) (undo-tree-id41985 . -1016) (undo-tree-id41986 . -1016) (undo-tree-id41987 . -1016) (undo-tree-id41988 . -1016) (undo-tree-id41989 . -1016) (undo-tree-id41990 . -1016) (undo-tree-id41991 . -1016) (undo-tree-id41992 . -1016) (undo-tree-id41993 . -1016) (undo-tree-id41994 . -1016) (undo-tree-id41995 . -1016) (undo-tree-id41996 . -1016) (undo-tree-id41997 . -1016) (undo-tree-id41998 . -1016) (undo-tree-id41999 . -1016) (undo-tree-id42000 . -1016) (undo-tree-id42001 . -1016) (undo-tree-id42002 . -1016) (undo-tree-id42003 . -1016) (undo-tree-id42004 . -1016) (undo-tree-id42005 . -1016) (undo-tree-id42006 . -1016) (undo-tree-id42007 . -1016) (undo-tree-id42008 . -1016) (undo-tree-id42009 . -1016) (undo-tree-id42010 . -1016) (undo-tree-id42011 . -1016) (undo-tree-id42012 . -1016) (undo-tree-id42013 . -1016) (undo-tree-id42014 . -1016) (undo-tree-id42015 . -1016) (undo-tree-id42016 . -1016) (undo-tree-id42017 . -1016) (undo-tree-id42018 . -1016) (undo-tree-id42019 . -1016) (undo-tree-id42020 . -1016) (undo-tree-id42021 . -1016) (undo-tree-id42022 . -1016) (undo-tree-id42023 . -1016) (undo-tree-id42024 . -1016) (undo-tree-id42025 . -1016) (undo-tree-id42026 . -1016) (undo-tree-id42027 . -1016) (undo-tree-id42028 . -1016) (undo-tree-id42029 . -1016) (undo-tree-id42030 . -1016) (undo-tree-id42031 . -1016) (undo-tree-id42032 . -1016) (undo-tree-id42033 . -1016) (undo-tree-id42034 . -1016) (undo-tree-id42035 . -1016) (undo-tree-id42036 . -1016) (undo-tree-id42037 . -1016) (undo-tree-id42038 . -1016) (undo-tree-id42039 . -1016) (undo-tree-id42040 . -1016) (undo-tree-id42041 . -1016) (undo-tree-id42042 . -1016) (undo-tree-id42043 . -1016) (undo-tree-id42044 . -1016) (undo-tree-id42045 . -1016) (undo-tree-id42046 . -1016) (undo-tree-id42047 . -1016) (undo-tree-id42048 . -1016) (undo-tree-id42049 . -1016) (undo-tree-id42050 . -1016) (undo-tree-id42051 . -1016) (undo-tree-id42052 . -1016) (undo-tree-id42053 . -1016) (undo-tree-id42054 . -1016) (undo-tree-id42055 . -1016) (undo-tree-id42056 . -1016) (undo-tree-id42057 . -1016) (undo-tree-id42058 . -1016) (undo-tree-id42059 . -1016) (undo-tree-id42060 . -1016) (undo-tree-id42061 . -1016) (undo-tree-id42062 . -1016) (undo-tree-id42063 . -1016) (undo-tree-id42064 . -1016) (undo-tree-id42065 . -1016) (undo-tree-id42066 . -1016) (undo-tree-id42067 . -1016) (undo-tree-id42068 . -1016) (undo-tree-id42069 . -1016) (undo-tree-id42070 . -923) (4089 . 5012) (#("  and we want to output a probability for each possible character (at each time step). The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 69 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 70 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 124 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 127 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 144 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 216 262 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 262 270 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 270 271 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 271 278 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 278 279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 279 290 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 290 291 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 291 303 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 303 319 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 319 332 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 332 333 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 333 344 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 344 345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 345 407 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 407 408 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 408 420 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 420 448 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 449 482 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 482 510 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 510 511 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 511 520 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 520 532 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 532 533 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 533 538 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 538 545 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 545 546 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 546 549 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 549 550 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 550 552 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 552 554 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 554 555 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 555 577 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 577 578 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 578 585 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 585 591 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 591 592 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 592 620 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 620 621 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 621 630 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 630 636 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 636 637 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 637 659 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 659 660 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 660 667 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 667 673 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 673 674 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 674 725 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 725 726 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 726 728 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 728 729 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 729 730 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 730 752 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 752 754 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 754 755 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 755 781 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 781 782 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 782 793 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 793 794 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 794 806 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 806 826 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 826 827 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 827 865 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 865 866 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 866 867 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 867 868 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 868 870 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 870 904 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 904 905 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 905 906 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 906 909 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 909 910 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 910 912 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 912 921 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4182) (undo-tree-id42071 . -1) (undo-tree-id42072 . -1) (undo-tree-id42073 . -1) (undo-tree-id42074 . -1) (undo-tree-id42075 . 920) (undo-tree-id42076 . -1) (undo-tree-id42077 . -1) (undo-tree-id42078 . -1) (undo-tree-id42079 . -1) (undo-tree-id42080 . -1) (undo-tree-id42081 . -1) (undo-tree-id42082 . -1) (undo-tree-id42083 . -1) (undo-tree-id42084 . -1) (undo-tree-id42085 . -1) (undo-tree-id42086 . -1) (undo-tree-id42087 . -1) (undo-tree-id42088 . -1) (undo-tree-id42089 . -1) (undo-tree-id42090 . -1) (undo-tree-id42091 . -1) (undo-tree-id42092 . -1) (undo-tree-id42093 . -1) (undo-tree-id42094 . -1) (undo-tree-id42095 . -1) (undo-tree-id42096 . -1) (undo-tree-id42097 . -1) (undo-tree-id42098 . -1) (undo-tree-id42099 . -1) (undo-tree-id42100 . -1) (undo-tree-id42101 . -1) (undo-tree-id42102 . -1) (undo-tree-id42103 . -1) (undo-tree-id42104 . -1) (undo-tree-id42105 . -1) (undo-tree-id42106 . -1) (undo-tree-id42107 . -1) (undo-tree-id42108 . -1) (undo-tree-id42109 . -1) (undo-tree-id42110 . -1) (undo-tree-id42111 . -1) (undo-tree-id42112 . -1) (undo-tree-id42113 . -1) (undo-tree-id42114 . -1) (undo-tree-id42115 . -1) (undo-tree-id42116 . -1) (undo-tree-id42117 . -1) (undo-tree-id42118 . -1) (undo-tree-id42119 . -1) (undo-tree-id42120 . -1) (undo-tree-id42121 . -1) (undo-tree-id42122 . -1) (undo-tree-id42123 . -1) (undo-tree-id42124 . -1) (undo-tree-id42125 . -1) (undo-tree-id42126 . -1) (undo-tree-id42127 . -1) (undo-tree-id42128 . -1) (undo-tree-id42129 . -1) (undo-tree-id42130 . -1) (undo-tree-id42131 . -1) (undo-tree-id42132 . -1) (undo-tree-id42133 . -1) (undo-tree-id42134 . -1) (undo-tree-id42135 . -1) (undo-tree-id42136 . -1) (undo-tree-id42137 . -1) (undo-tree-id42138 . -1) (undo-tree-id42139 . -1) (undo-tree-id42140 . -1) (undo-tree-id42141 . -1) (undo-tree-id42142 . -1) (undo-tree-id42143 . -1) (undo-tree-id42144 . -1) (undo-tree-id42145 . -1) (undo-tree-id42146 . -1) (undo-tree-id42147 . -1) (undo-tree-id42148 . -1) (undo-tree-id42149 . -1) (undo-tree-id42150 . -1) (undo-tree-id42151 . -1) (undo-tree-id42152 . -1) (undo-tree-id42153 . -1) (undo-tree-id42154 . -1) (undo-tree-id42155 . -1) (undo-tree-id42156 . -1) (undo-tree-id42157 . -1) (undo-tree-id42158 . -1) (undo-tree-id42159 . -1) (undo-tree-id42160 . -1) (undo-tree-id42161 . -1) (undo-tree-id42162 . -1) (undo-tree-id42163 . -1) (undo-tree-id42164 . -1) (undo-tree-id42165 . -1) (undo-tree-id42166 . -1) (undo-tree-id42167 . -1) (undo-tree-id42168 . -1) (undo-tree-id42169 . -1) (undo-tree-id42170 . -1) (undo-tree-id42171 . -1) (undo-tree-id42172 . -1) (undo-tree-id42173 . -1) (undo-tree-id42174 . -1) (undo-tree-id42175 . -1) (undo-tree-id42176 . -1) (undo-tree-id42177 . -1) (undo-tree-id42178 . -1) (undo-tree-id42179 . -1) (undo-tree-id42180 . -1) (undo-tree-id42181 . -1) (undo-tree-id42182 . -1) (undo-tree-id42183 . -1) (undo-tree-id42184 . -1) (undo-tree-id42185 . -1) (undo-tree-id42186 . -1) (undo-tree-id42187 . -1) (undo-tree-id42188 . -1) (undo-tree-id42189 . -1) (undo-tree-id42190 . -1) (undo-tree-id42191 . -1) (undo-tree-id42192 . -1) (undo-tree-id42193 . -1) (undo-tree-id42194 . -1) (undo-tree-id42195 . -1) (undo-tree-id42196 . -1) (undo-tree-id42197 . -1) (undo-tree-id42198 . -1) (undo-tree-id42199 . -1) (undo-tree-id42200 . -1) (undo-tree-id42201 . -1) (undo-tree-id42202 . -1) (undo-tree-id42203 . -1) (undo-tree-id42204 . -1) (undo-tree-id42205 . -1) (undo-tree-id42206 . -1) (undo-tree-id42207 . -1) (undo-tree-id42208 . -1) (undo-tree-id42209 . -1) (undo-tree-id42210 . -1) (undo-tree-id42211 . -1) (undo-tree-id42212 . -1) (undo-tree-id42213 . -1) (undo-tree-id42214 . -1) (undo-tree-id42215 . -1) (undo-tree-id42216 . -1) (undo-tree-id42217 . -1) (undo-tree-id42218 . -1) (undo-tree-id42219 . -1) (undo-tree-id42220 . -1) (undo-tree-id42221 . -1) (undo-tree-id42222 . -1) (undo-tree-id42223 . -1) (undo-tree-id42224 . -1) (undo-tree-id42225 . -1) (undo-tree-id42226 . -1) (undo-tree-id42227 . -1) (undo-tree-id42228 . -1) (undo-tree-id42229 . -1) (undo-tree-id42230 . -1) (undo-tree-id42231 . -1) (undo-tree-id42232 . -1) (undo-tree-id42233 . -1) (undo-tree-id42234 . -1) (undo-tree-id42235 . -1) (undo-tree-id42236 . -1) (undo-tree-id42237 . -1) (undo-tree-id42238 . -1) (undo-tree-id42239 . -1) (undo-tree-id42240 . -1) (undo-tree-id42241 . -1) (undo-tree-id42242 . -1) (undo-tree-id42243 . -1) (undo-tree-id42244 . -1) (undo-tree-id42245 . -1) (undo-tree-id42246 . -1) (undo-tree-id42247 . -1) (undo-tree-id42248 . -1) (undo-tree-id42249 . -1) (undo-tree-id42250 . -1) (undo-tree-id42251 . -1) (undo-tree-id42252 . -1) (undo-tree-id42253 . -1) (undo-tree-id42254 . -1) (undo-tree-id42255 . -1) (undo-tree-id42256 . -1) (undo-tree-id42257 . -1) (undo-tree-id42258 . -1) (undo-tree-id42259 . -1) (undo-tree-id42260 . -1) (undo-tree-id42261 . -1) (undo-tree-id42262 . -1) (undo-tree-id42263 . -1) (undo-tree-id42264 . -1) (undo-tree-id42265 . -1) (undo-tree-id42266 . -1) (undo-tree-id42267 . -1) (undo-tree-id42268 . -1) (undo-tree-id42269 . -1) (undo-tree-id42270 . -1) (undo-tree-id42271 . -1) (undo-tree-id42272 . -1) (undo-tree-id42273 . -1) (undo-tree-id42274 . -1) (undo-tree-id42275 . -1) (undo-tree-id42276 . -1) (undo-tree-id42277 . -1) (undo-tree-id42278 . -1) (undo-tree-id42279 . -1) (undo-tree-id42280 . -1) (undo-tree-id42281 . -1) (undo-tree-id42282 . -1) (undo-tree-id42283 . -1) (undo-tree-id42284 . -1) (undo-tree-id42285 . -1) (undo-tree-id42286 . -1) (undo-tree-id42287 . -1) (undo-tree-id42288 . -1) (undo-tree-id42289 . -1) (undo-tree-id42290 . -1) (undo-tree-id42291 . -1) (undo-tree-id42292 . -1) (undo-tree-id42293 . -1) (undo-tree-id42294 . -1) (undo-tree-id42295 . -1) (undo-tree-id42296 . -1) (undo-tree-id42297 . -1) (undo-tree-id42298 . -1) (undo-tree-id42299 . -1) (undo-tree-id42300 . -1) (undo-tree-id42301 . -1) (undo-tree-id42302 . -1) (undo-tree-id42303 . -1) (undo-tree-id42304 . -1) (undo-tree-id42305 . -1) (undo-tree-id42306 . -1) (undo-tree-id42307 . -1) (undo-tree-id42308 . -1) (undo-tree-id42309 . -1) (undo-tree-id42310 . -1) (undo-tree-id42311 . -1) (undo-tree-id42312 . -1) (undo-tree-id42313 . -1) (undo-tree-id42314 . -1) (undo-tree-id42315 . -1) (undo-tree-id42316 . -1) (undo-tree-id42317 . -1) (undo-tree-id42318 . -1) (undo-tree-id42319 . -1) (undo-tree-id42320 . -1) (undo-tree-id42321 . -1) (undo-tree-id42322 . -1) (undo-tree-id42323 . -1) (undo-tree-id42324 . -1) (undo-tree-id42325 . -1) (undo-tree-id42326 . -1) (undo-tree-id42327 . -1) (undo-tree-id42328 . -1) (undo-tree-id42329 . -1) (undo-tree-id42330 . -1) (undo-tree-id42331 . -1) (undo-tree-id42332 . -1) (undo-tree-id42333 . -1) (undo-tree-id42334 . -1) (undo-tree-id42335 . -1) (undo-tree-id42336 . -1) (undo-tree-id42337 . -1) (undo-tree-id42338 . -1) (undo-tree-id42339 . -1) (undo-tree-id42340 . -1) (undo-tree-id42341 . -1) (undo-tree-id42342 . -1) (undo-tree-id42343 . -1) (undo-tree-id42344 . -1) (undo-tree-id42345 . -1) (undo-tree-id42346 . -1) (undo-tree-id42347 . -1) (undo-tree-id42348 . -1) (undo-tree-id42349 . -1) (undo-tree-id42350 . -1) (undo-tree-id42351 . -1) (undo-tree-id42352 . -1) (undo-tree-id42353 . -1) (undo-tree-id42354 . -1) (undo-tree-id42355 . -1) (undo-tree-id42356 . -1) (undo-tree-id42357 . -1) (undo-tree-id42358 . -1) (undo-tree-id42359 . -1) (undo-tree-id42360 . -1) (undo-tree-id42361 . -1) (undo-tree-id42362 . -1) (undo-tree-id42363 . -1) (undo-tree-id42364 . -1) (undo-tree-id42365 . -1) (undo-tree-id42366 . -1) (undo-tree-id42367 . -1) (undo-tree-id42368 . -1) (undo-tree-id42369 . -1) (undo-tree-id42370 . -1) (undo-tree-id42371 . -1) (undo-tree-id42372 . -1) (undo-tree-id42373 . -1) (undo-tree-id42374 . -1) (undo-tree-id42375 . -1) (undo-tree-id42376 . -1) (undo-tree-id42377 . -1) (undo-tree-id42378 . -1) (undo-tree-id42379 . -1) (undo-tree-id42380 . -1) (undo-tree-id42381 . -1) (undo-tree-id42382 . -1) (undo-tree-id42383 . -1) (undo-tree-id42384 . -1) (undo-tree-id42385 . -1) (undo-tree-id42386 . -1) (undo-tree-id42387 . -1) (undo-tree-id42388 . -1) (undo-tree-id42389 . -1) (undo-tree-id42390 . -1) (undo-tree-id42391 . -1) (undo-tree-id42392 . -1) (undo-tree-id42393 . -1) (undo-tree-id42394 . -1) (undo-tree-id42395 . -1) (undo-tree-id42396 . -1) (undo-tree-id42397 . -1) (undo-tree-id42398 . -1) (undo-tree-id42399 . -4) (undo-tree-id42400 . -4) (undo-tree-id42401 . -4) (undo-tree-id42402 . -4) (undo-tree-id42403 . -4) (undo-tree-id42404 . -4) (undo-tree-id42405 . -7) (undo-tree-id42406 . -7) (undo-tree-id42407 . -7) (undo-tree-id42408 . -7) (undo-tree-id42409 . -7) (undo-tree-id42410 . -7) (undo-tree-id42411 . -12) (undo-tree-id42412 . -12) (undo-tree-id42413 . -12) (undo-tree-id42414 . -12) (undo-tree-id42415 . -12) (undo-tree-id42416 . -12) (undo-tree-id42417 . -15) (undo-tree-id42418 . -15) (undo-tree-id42419 . -15) (undo-tree-id42420 . -15) (undo-tree-id42421 . -15) (undo-tree-id42422 . -15) (undo-tree-id42423 . -15) (undo-tree-id42424 . -15) (undo-tree-id42425 . -15) (undo-tree-id42426 . -15) (undo-tree-id42427 . -15) (undo-tree-id42428 . -15) (undo-tree-id42429 . -15) (undo-tree-id42430 . -15) (undo-tree-id42431 . -15) (undo-tree-id42432 . -15) (undo-tree-id42433 . -15) (undo-tree-id42434 . -15) (undo-tree-id42435 . -15) (undo-tree-id42436 . -15) (undo-tree-id42437 . -15) (undo-tree-id42438 . -14) (undo-tree-id42439 . -14) (undo-tree-id42440 . -14) (undo-tree-id42441 . -14) (undo-tree-id42442 . -14) (undo-tree-id42443 . -14) (undo-tree-id42444 . -14) (undo-tree-id42445 . -14) (undo-tree-id42446 . -14) (undo-tree-id42447 . -14) (undo-tree-id42448 . -14) (undo-tree-id42449 . -14) (undo-tree-id42450 . -14) (undo-tree-id42451 . -14) (undo-tree-id42452 . -14) (undo-tree-id42453 . -14) (undo-tree-id42454 . -14) (undo-tree-id42455 . -14) (undo-tree-id42456 . -14) (undo-tree-id42457 . -14) (undo-tree-id42458 . -14) (undo-tree-id42459 . -14) (undo-tree-id42460 . -14) (undo-tree-id42461 . -14) (undo-tree-id42462 . -14) (undo-tree-id42463 . -14) (undo-tree-id42464 . -14) (undo-tree-id42465 . -14) (undo-tree-id42466 . -14) (undo-tree-id42467 . -14) (undo-tree-id42468 . -14) (undo-tree-id42469 . -9) (undo-tree-id42470 . -9) (undo-tree-id42471 . -9) (undo-tree-id42472 . -9) (undo-tree-id42473 . -9) (undo-tree-id42474 . -9) (undo-tree-id42475 . -9) (undo-tree-id42476 . -9) (undo-tree-id42477 . -9) (undo-tree-id42478 . -9) (undo-tree-id42479 . -9) (undo-tree-id42480 . -9) (undo-tree-id42481 . -9) (undo-tree-id42482 . -9) (undo-tree-id42483 . -9) (undo-tree-id42484 . -9) (undo-tree-id42485 . -6) (undo-tree-id42486 . -6) (undo-tree-id42487 . -6) (undo-tree-id42488 . -6) (undo-tree-id42489 . -6) (undo-tree-id42490 . -6) (undo-tree-id42491 . -6) (undo-tree-id42492 . -6) (undo-tree-id42493 . -6) (undo-tree-id42494 . -6) (undo-tree-id42495 . -6) (undo-tree-id42496 . -6) (undo-tree-id42497 . -6) (undo-tree-id42498 . -6) (undo-tree-id42499 . -6) (undo-tree-id42500 . -6) (undo-tree-id42501 . -2) (undo-tree-id42502 . -2) (undo-tree-id42503 . -2) (undo-tree-id42504 . -2) (undo-tree-id42505 . -2) (undo-tree-id42506 . -2) (undo-tree-id42507 . -2) (undo-tree-id42508 . -2) (undo-tree-id42509 . -2) (undo-tree-id42510 . -2) (undo-tree-id42511 . -2) (undo-tree-id42512 . -2) (undo-tree-id42513 . -2) (undo-tree-id42514 . -2) (undo-tree-id42515 . -2) (undo-tree-id42516 . -2) (undo-tree-id42517 . -1) (undo-tree-id42518 . -1) (undo-tree-id42519 . -1) (undo-tree-id42520 . -1) (undo-tree-id42521 . -1) (undo-tree-id42522 . -1) (undo-tree-id42523 . -1) (undo-tree-id42524 . -1) (undo-tree-id42525 . -1) (undo-tree-id42526 . -1) (undo-tree-id42527 . -1) (undo-tree-id42528 . -1) (undo-tree-id42529 . -1) (undo-tree-id42530 . -1) (undo-tree-id42531 . -1) (undo-tree-id42532 . -1) (undo-tree-id42533 . -1) (undo-tree-id42534 . -1) (undo-tree-id42535 . -1) (undo-tree-id42536 . -1) (undo-tree-id42537 . -1) (undo-tree-id42538 . -1) (undo-tree-id42539 . -1) (undo-tree-id42540 . -1) (undo-tree-id42541 . -1) (undo-tree-id42542 . -1) (undo-tree-id42543 . -1) (undo-tree-id42544 . -1) (undo-tree-id42545 . -1) (undo-tree-id42546 . -1) (undo-tree-id42547 . -1) (undo-tree-id42548 . -1) (undo-tree-id42549 . -1) (undo-tree-id42550 . -1) (undo-tree-id42551 . -1) (undo-tree-id42552 . -1) (undo-tree-id42553 . -1) (undo-tree-id42554 . -1) (undo-tree-id42555 . -1) (undo-tree-id42556 . -1) (undo-tree-id42557 . -1) (undo-tree-id42558 . -1) (undo-tree-id42559 . -1) (undo-tree-id42560 . -1) (undo-tree-id42561 . -1) (undo-tree-id42562 . -1) (undo-tree-id42563 . -1) (undo-tree-id42564 . -1) (undo-tree-id42565 . -1) (undo-tree-id42566 . -1) (undo-tree-id42567 . -1) (undo-tree-id42568 . -1) (undo-tree-id42569 . -1) (undo-tree-id42570 . -1) (undo-tree-id42571 . -1) (undo-tree-id42572 . -1) (undo-tree-id42573 . -1) (undo-tree-id42574 . -1) 4183) nil (25767 11456 721062 793000) 0 nil])
([nil nil ((4186 . 4187) (#("and w" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4186) (undo-tree-id41171 . -4) (undo-tree-id41172 . -4) (undo-tree-id41173 . 5) (undo-tree-id41174 . -4) (undo-tree-id41175 . -5) (undo-tree-id41176 . -4) (undo-tree-id41177 . -2) (undo-tree-id41178 . -2) (undo-tree-id41179 . -2) (undo-tree-id41180 . -2) (undo-tree-id41181 . -2) (undo-tree-id41182 . -2) (undo-tree-id41183 . -2) (undo-tree-id41184 . -2) (undo-tree-id41185 . -2) (undo-tree-id41186 . -2) (undo-tree-id41187 . -2) (undo-tree-id41188 . -2) (undo-tree-id41189 . -2) (undo-tree-id41190 . -2) (undo-tree-id41191 . -2) (undo-tree-id41192 . -2) (undo-tree-id41193 . -5) (undo-tree-id41194 . -5) (undo-tree-id41195 . -5) (undo-tree-id41196 . -5) (undo-tree-id41197 . -5) (undo-tree-id41198 . -5) (undo-tree-id41199 . -5) (undo-tree-id41200 . -5) (undo-tree-id41201 . -5) (undo-tree-id41202 . -5) (undo-tree-id41203 . -5) (undo-tree-id41204 . -5) (undo-tree-id41205 . -5) (undo-tree-id41206 . -5) (undo-tree-id41207 . -5) (undo-tree-id41208 . -5) (undo-tree-id41209 . -5) (undo-tree-id41210 . -5) (undo-tree-id41211 . -5) (undo-tree-id41212 . -5) (undo-tree-id41213 . -5) (undo-tree-id41214 . -5) (undo-tree-id41215 . -5) (undo-tree-id41216 . -5) (undo-tree-id41217 . -5) (undo-tree-id41218 . -5) (undo-tree-id41219 . -4) (undo-tree-id41220 . -4) (undo-tree-id41221 . -4) (undo-tree-id41222 . -4) (undo-tree-id41223 . -4) (undo-tree-id41224 . -4) (undo-tree-id41225 . -4) (undo-tree-id41226 . -4) (undo-tree-id41227 . -4) (undo-tree-id41228 . -4) (undo-tree-id41229 . -4) (undo-tree-id41230 . -4) (undo-tree-id41231 . -4) (undo-tree-id41232 . -4) (undo-tree-id41233 . -4) (undo-tree-id41234 . -4) (undo-tree-id41235 . -4) (undo-tree-id41236 . -5) (undo-tree-id41237 . -5) (undo-tree-id41238 . -5) 4190) nil (25767 11456 720166 673000) 0 nil])
([nil nil ((4184 . 5104) (#("- The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- We want to output a probability for each possible character (at each time step)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 39 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 39 42 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 58 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 58 59 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 59 130 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 130 131 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 131 177 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 177 185 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 185 186 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 186 193 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 193 194 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 194 205 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 205 206 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 206 218 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 218 234 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 234 247 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 247 248 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 248 259 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 259 260 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 260 320 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 320 322 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 322 323 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 323 335 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 335 363 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 363 364 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 364 397 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 397 419 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 419 420 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 420 425 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 425 426 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 426 435 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 435 447 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 447 448 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 448 453 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 453 460 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 460 461 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 461 464 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 464 465 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 465 467 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 467 469 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 469 470 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 470 492 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 492 493 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 493 500 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 500 506 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 506 507 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 507 535 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 535 536 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 536 545 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 545 551 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 551 552 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 552 574 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 574 575 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 575 582 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 582 588 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 588 589 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 589 640 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 640 641 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 641 643 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 643 644 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 644 645 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 645 667 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 667 669 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 669 670 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 670 696 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 696 697 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 697 708 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 708 709 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 709 721 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 721 741 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 741 742 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 742 780 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 780 781 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 781 782 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 782 783 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 783 785 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 785 819 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 819 820 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 820 821 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 821 824 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 824 825 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 825 827 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 827 836 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 836 837 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 837 838 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 838 839 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 839 841 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 841 903 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 903 904 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 904 920 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 4184) (undo-tree-id40730 . -840) (undo-tree-id40731 . -840) (undo-tree-id40732 . -840) (undo-tree-id40733 . -840) (undo-tree-id40734 . 79) (undo-tree-id40735 . 79) (undo-tree-id40736 . -920) (undo-tree-id40737 . -840) (undo-tree-id40738 . -840) (undo-tree-id40739 . -840) (undo-tree-id40740 . -840) (undo-tree-id40741 . -840) (undo-tree-id40742 . -840) (undo-tree-id40743 . -840) (undo-tree-id40744 . -840) (undo-tree-id40745 . -840) (undo-tree-id40746 . -840) (undo-tree-id40747 . -840) (undo-tree-id40748 . -840) (undo-tree-id40749 . -840) (undo-tree-id40750 . -840) (undo-tree-id40751 . -840) (undo-tree-id40752 . -840) (undo-tree-id40753 . -840) (undo-tree-id40754 . -840) (undo-tree-id40755 . -839) (undo-tree-id40756 . -839) (undo-tree-id40757 . -839) (undo-tree-id40758 . -839) (undo-tree-id40759 . -839) (undo-tree-id40760 . -839) (undo-tree-id40761 . -839) (undo-tree-id40762 . -839) (undo-tree-id40763 . -839) (undo-tree-id40764 . -839) (undo-tree-id40765 . -839) (undo-tree-id40766 . -839) (undo-tree-id40767 . -839) (undo-tree-id40768 . -839) (undo-tree-id40769 . -839) (undo-tree-id40770 . -839) (undo-tree-id40771 . -839) (undo-tree-id40772 . -839) (undo-tree-id40773 . -839) (undo-tree-id40774 . -839) (undo-tree-id40775 . -840) (undo-tree-id40776 . -840) (undo-tree-id40777 . -840) (undo-tree-id40778 . -840) (undo-tree-id40779 . -840) (undo-tree-id40780 . -840) (undo-tree-id40781 . -840) (undo-tree-id40782 . -840) (undo-tree-id40783 . -840) (undo-tree-id40784 . -840) (undo-tree-id40785 . -840) (undo-tree-id40786 . -840) (undo-tree-id40787 . -840) (undo-tree-id40788 . -840) (undo-tree-id40789 . -840) (undo-tree-id40790 . -840) (undo-tree-id40791 . -840) (undo-tree-id40792 . -840) (undo-tree-id40793 . -840) (undo-tree-id40794 . -840) (undo-tree-id40795 . -840) (undo-tree-id40796 . -840) (undo-tree-id40797 . -840) (undo-tree-id40798 . -840) (undo-tree-id40799 . -840) (undo-tree-id40800 . -840) (undo-tree-id40801 . -840) (undo-tree-id40802 . -840) (undo-tree-id40803 . -840) (undo-tree-id40804 . -840) (undo-tree-id40805 . -840) (undo-tree-id40806 . -840) (undo-tree-id40807 . -840) (undo-tree-id40808 . -840) (undo-tree-id40809 . -840) (undo-tree-id40810 . -840) (undo-tree-id40811 . -840) (undo-tree-id40812 . -840) (undo-tree-id40813 . -840) (undo-tree-id40814 . -840) (undo-tree-id40815 . -840) (undo-tree-id40816 . -840) (undo-tree-id40817 . -840) (undo-tree-id40818 . -840) (undo-tree-id40819 . -840) (undo-tree-id40820 . -840) (undo-tree-id40821 . -840) (undo-tree-id40822 . -840) (undo-tree-id40823 . -840) (undo-tree-id40824 . -840) (undo-tree-id40825 . -840) (undo-tree-id40826 . -840) (undo-tree-id40827 . -840) (undo-tree-id40828 . -840) (undo-tree-id40829 . -840) (undo-tree-id40830 . -840) (undo-tree-id40831 . -840) (undo-tree-id40832 . -840) (undo-tree-id40833 . -840) (undo-tree-id40834 . -840) (undo-tree-id40835 . -840) (undo-tree-id40836 . -840) (undo-tree-id40837 . -840) (undo-tree-id40838 . -840) (undo-tree-id40839 . -840) (undo-tree-id40840 . -840) (undo-tree-id40841 . -840) (undo-tree-id40842 . -840) (undo-tree-id40843 . -840) (undo-tree-id40844 . -840) (undo-tree-id40845 . -840) (undo-tree-id40846 . -840) (undo-tree-id40847 . -840) (undo-tree-id40848 . -840) (undo-tree-id40849 . -840) (undo-tree-id40850 . -840) (undo-tree-id40851 . -840) (undo-tree-id40852 . -840) (undo-tree-id40853 . -840) (undo-tree-id40854 . -840) (undo-tree-id40855 . -840) (undo-tree-id40856 . -840) (undo-tree-id40857 . -840) (undo-tree-id40858 . -840) (undo-tree-id40859 . -840) (undo-tree-id40860 . -840) (undo-tree-id40861 . -840) (undo-tree-id40862 . -840) (undo-tree-id40863 . -840) (undo-tree-id40864 . -840) (undo-tree-id40865 . -840) (undo-tree-id40866 . -840) (undo-tree-id40867 . -840) (undo-tree-id40868 . -840) (undo-tree-id40869 . -840) (undo-tree-id40870 . -840) (undo-tree-id40871 . -840) (undo-tree-id40872 . -840) (undo-tree-id40873 . -840) (undo-tree-id40874 . -840) (undo-tree-id40875 . -840) (undo-tree-id40876 . -840) (undo-tree-id40877 . -840) (undo-tree-id40878 . -840) (undo-tree-id40879 . -840) (undo-tree-id40880 . -841) (undo-tree-id40881 . -841) (undo-tree-id40882 . -841) (undo-tree-id40883 . -841) (undo-tree-id40884 . -841) (undo-tree-id40885 . -841) (undo-tree-id40886 . -841) (undo-tree-id40887 . -841) (undo-tree-id40888 . -841) (undo-tree-id40889 . -841) (undo-tree-id40890 . -841) (undo-tree-id40891 . -840) (undo-tree-id40892 . -840) (undo-tree-id40893 . -840) (undo-tree-id40894 . -840) (undo-tree-id40895 . -840) (undo-tree-id40896 . -840) (undo-tree-id40897 . -840) (undo-tree-id40898 . -840) (undo-tree-id40899 . -840) (undo-tree-id40900 . -840) (undo-tree-id40901 . -840) (undo-tree-id40902 . -840) (undo-tree-id40903 . -840) (undo-tree-id40904 . -840) (undo-tree-id40905 . -840) (undo-tree-id40906 . -840) (undo-tree-id40907 . -840) (undo-tree-id40908 . -840) (undo-tree-id40909 . -840) (undo-tree-id40910 . -840) (undo-tree-id40911 . -840) (undo-tree-id40912 . -840) (undo-tree-id40913 . -840) (undo-tree-id40914 . -840) (undo-tree-id40915 . -840) (undo-tree-id40916 . -841) (undo-tree-id40917 . -841) (undo-tree-id40918 . -841) (undo-tree-id40919 . -841) (undo-tree-id40920 . -841) (undo-tree-id40921 . -841) (undo-tree-id40922 . -841) (undo-tree-id40923 . -841) (undo-tree-id40924 . -841) (undo-tree-id40925 . -841) (undo-tree-id40926 . -841) (undo-tree-id40927 . -846) (undo-tree-id40928 . -846) (undo-tree-id40929 . -846) (undo-tree-id40930 . -846) (undo-tree-id40931 . -846) (undo-tree-id40932 . -846) (undo-tree-id40933 . -846) (undo-tree-id40934 . -846) (undo-tree-id40935 . -846) (undo-tree-id40936 . -846) (undo-tree-id40937 . -846) (undo-tree-id40938 . -846) (undo-tree-id40939 . -846) (undo-tree-id40940 . -846) (undo-tree-id40941 . -846) (undo-tree-id40942 . -846) (undo-tree-id40943 . -849) (undo-tree-id40944 . -849) (undo-tree-id40945 . -849) (undo-tree-id40946 . -849) (undo-tree-id40947 . -849) (undo-tree-id40948 . -849) (undo-tree-id40949 . -856) (undo-tree-id40950 . -856) (undo-tree-id40951 . -856) (undo-tree-id40952 . -856) (undo-tree-id40953 . -856) (undo-tree-id40954 . -856) (undo-tree-id40955 . -858) (undo-tree-id40956 . -858) (undo-tree-id40957 . -858) (undo-tree-id40958 . -858) (undo-tree-id40959 . -858) (undo-tree-id40960 . -858) (undo-tree-id40961 . -870) (undo-tree-id40962 . -870) (undo-tree-id40963 . -870) (undo-tree-id40964 . -870) (undo-tree-id40965 . -870) (undo-tree-id40966 . -870) (undo-tree-id40967 . -874) (undo-tree-id40968 . -874) (undo-tree-id40969 . -874) (undo-tree-id40970 . -874) (undo-tree-id40971 . -874) (undo-tree-id40972 . -874) (undo-tree-id40973 . -874) (undo-tree-id40974 . -874) (undo-tree-id40975 . -874) (undo-tree-id40976 . -874) (undo-tree-id40977 . -874) (undo-tree-id40978 . -879) (undo-tree-id40979 . -879) (undo-tree-id40980 . -879) (undo-tree-id40981 . -879) (undo-tree-id40982 . -879) (undo-tree-id40983 . -879) (undo-tree-id40984 . -879) (undo-tree-id40985 . -879) (undo-tree-id40986 . -879) (undo-tree-id40987 . -879) (undo-tree-id40988 . -879) (undo-tree-id40989 . -888) (undo-tree-id40990 . -888) (undo-tree-id40991 . -888) (undo-tree-id40992 . -888) (undo-tree-id40993 . -888) (undo-tree-id40994 . -888) (undo-tree-id40995 . -888) (undo-tree-id40996 . -888) (undo-tree-id40997 . -888) (undo-tree-id40998 . -888) (undo-tree-id40999 . -888) (undo-tree-id41000 . -898) (undo-tree-id41001 . -898) (undo-tree-id41002 . -898) (undo-tree-id41003 . -898) (undo-tree-id41004 . -898) (undo-tree-id41005 . -898) (undo-tree-id41006 . -898) (undo-tree-id41007 . -898) (undo-tree-id41008 . -898) (undo-tree-id41009 . -898) (undo-tree-id41010 . -898) (undo-tree-id41011 . -898) (undo-tree-id41012 . -898) (undo-tree-id41013 . -898) (undo-tree-id41014 . -898) (undo-tree-id41015 . -898) (undo-tree-id41016 . -898) (undo-tree-id41017 . -898) (undo-tree-id41018 . -898) (undo-tree-id41019 . -898) (undo-tree-id41020 . -898) (undo-tree-id41021 . -898) (undo-tree-id41022 . -898) (undo-tree-id41023 . -898) (undo-tree-id41024 . -898) (undo-tree-id41025 . -898) (undo-tree-id41026 . -898) (undo-tree-id41027 . -898) (undo-tree-id41028 . -898) (undo-tree-id41029 . -898) (undo-tree-id41030 . -898) (undo-tree-id41031 . -900) (undo-tree-id41032 . -900) (undo-tree-id41033 . -900) (undo-tree-id41034 . -900) (undo-tree-id41035 . -900) (undo-tree-id41036 . -900) (undo-tree-id41037 . -900) (undo-tree-id41038 . -900) (undo-tree-id41039 . -900) (undo-tree-id41040 . -900) (undo-tree-id41041 . -900) (undo-tree-id41042 . -901) (undo-tree-id41043 . -901) (undo-tree-id41044 . -901) (undo-tree-id41045 . -901) (undo-tree-id41046 . -901) (undo-tree-id41047 . -901) (undo-tree-id41048 . -901) (undo-tree-id41049 . -901) (undo-tree-id41050 . -901) (undo-tree-id41051 . -901) (undo-tree-id41052 . -901) (undo-tree-id41053 . -904) (undo-tree-id41054 . -904) (undo-tree-id41055 . -904) (undo-tree-id41056 . -904) (undo-tree-id41057 . -904) (undo-tree-id41058 . -904) (undo-tree-id41059 . -904) (undo-tree-id41060 . -904) (undo-tree-id41061 . -904) (undo-tree-id41062 . -904) (undo-tree-id41063 . -904) (undo-tree-id41064 . -909) (undo-tree-id41065 . -909) (undo-tree-id41066 . -909) (undo-tree-id41067 . -909) (undo-tree-id41068 . -909) (undo-tree-id41069 . -909) (undo-tree-id41070 . -909) (undo-tree-id41071 . -909) (undo-tree-id41072 . -909) (undo-tree-id41073 . -909) (undo-tree-id41074 . -909) (undo-tree-id41075 . -914) (undo-tree-id41076 . -914) (undo-tree-id41077 . -914) (undo-tree-id41078 . -914) (undo-tree-id41079 . -914) (undo-tree-id41080 . -914) (undo-tree-id41081 . -914) (undo-tree-id41082 . -914) (undo-tree-id41083 . -914) (undo-tree-id41084 . -914) (undo-tree-id41085 . -914) (undo-tree-id41086 . -918) (undo-tree-id41087 . -918) (undo-tree-id41088 . -918) (undo-tree-id41089 . -918) (undo-tree-id41090 . -918) (undo-tree-id41091 . -918) (undo-tree-id41092 . -918) (undo-tree-id41093 . -918) (undo-tree-id41094 . -918) (undo-tree-id41095 . -918) (undo-tree-id41096 . -918) (undo-tree-id41097 . -920) (undo-tree-id41098 . -920) (undo-tree-id41099 . -920) (undo-tree-id41100 . -920) (undo-tree-id41101 . -920) (undo-tree-id41102 . -920) (undo-tree-id41103 . -920) (undo-tree-id41104 . -920) (undo-tree-id41105 . -920) (undo-tree-id41106 . -920) (undo-tree-id41107 . -920) (undo-tree-id41108 . -920) (undo-tree-id41109 . -920) (undo-tree-id41110 . -920) (undo-tree-id41111 . -920) (undo-tree-id41112 . -920) (undo-tree-id41113 . -920) (undo-tree-id41114 . -920) (undo-tree-id41115 . -920) (undo-tree-id41116 . -920) (undo-tree-id41117 . -920) (undo-tree-id41118 . -920) (undo-tree-id41119 . -920) (undo-tree-id41120 . -920) (undo-tree-id41121 . -920) (undo-tree-id41122 . -920) (undo-tree-id41123 . -920) (undo-tree-id41124 . -920) (undo-tree-id41125 . -920) (undo-tree-id41126 . -920) (undo-tree-id41127 . -920) (undo-tree-id41128 . -920) (undo-tree-id41129 . -920) (undo-tree-id41130 . -920) (undo-tree-id41131 . -920) (undo-tree-id41132 . -838) (4184 . 5022) (#(" The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer. We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 38 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 41 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 57 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 58 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 129 130 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 130 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 176 184 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 184 185 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 185 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 192 193 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 193 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 204 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 205 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 217 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 233 246 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 246 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 247 258 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 258 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 259 319 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 319 321 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 321 322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 322 334 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 334 362 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 362 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 363 396 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 396 418 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 418 419 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 419 424 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 424 425 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 425 434 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 434 446 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 446 447 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 447 452 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 452 459 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 459 460 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 460 463 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 463 464 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 464 466 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 466 468 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 468 469 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 469 491 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 491 492 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 492 499 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 499 505 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 505 506 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 506 534 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 534 535 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 535 544 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 544 550 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 550 551 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 551 573 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 573 574 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 574 581 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 581 587 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 587 588 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 588 639 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 639 640 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 640 642 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 642 643 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 643 644 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 644 666 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 666 668 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 668 669 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 669 695 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 695 696 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 696 707 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 707 708 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 708 720 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 720 740 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 740 741 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 741 779 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 779 780 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 780 781 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 781 782 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 782 784 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 784 818 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 818 819 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 819 820 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 820 823 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 823 824 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 824 826 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 826 835 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4266) (undo-tree-id41133 . -1) (undo-tree-id41134 . 101) (undo-tree-id41135 . -738) (undo-tree-id41136 . -1) (undo-tree-id41137 . -1) (undo-tree-id41138 . -1) (undo-tree-id41139 . -1) (undo-tree-id41140 . -1) (undo-tree-id41141 . -1) (undo-tree-id41142 . -1) (undo-tree-id41143 . -1) (undo-tree-id41144 . -1) (undo-tree-id41145 . -1) (undo-tree-id41146 . -1) (undo-tree-id41147 . -1) (undo-tree-id41148 . -1) (undo-tree-id41149 . -1) (undo-tree-id41150 . -1) (undo-tree-id41151 . -1) (undo-tree-id41152 . -1) (undo-tree-id41153 . -1) (undo-tree-id41154 . -1) (undo-tree-id41155 . -1) (undo-tree-id41156 . -1) (undo-tree-id41157 . -1) (undo-tree-id41158 . -1) (undo-tree-id41159 . -1) (undo-tree-id41160 . -1) (undo-tree-id41161 . -1) (undo-tree-id41162 . -1) (undo-tree-id41163 . -1) (undo-tree-id41164 . -1) (undo-tree-id41165 . -1) (undo-tree-id41166 . -1) (undo-tree-id41167 . -1) (undo-tree-id41168 . -1) (undo-tree-id41169 . -1) (undo-tree-id41170 . -1) 4267) nil (25767 11456 720041 635000) 0 nil])
([nil nil ((4268 . 5107) (#("- We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- The output probabilities should sum up to 1 at each time step, so we apply the softmax activation function to the outputs of the Dense layer." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 35 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 43 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 43 44 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 44 51 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 51 52 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 52 63 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 64 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 64 76 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 76 92 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 92 105 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 105 106 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 106 117 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 117 118 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 118 178 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 178 180 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 180 181 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 181 193 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 193 221 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 221 222 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 222 255 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 255 274 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 274 277 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 277 278 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 278 283 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 283 284 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 284 293 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 293 305 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 305 306 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 306 311 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 311 318 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 318 319 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 319 322 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 322 323 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 323 325 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 325 327 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 327 328 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 328 350 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 350 351 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 351 358 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 358 364 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 364 365 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 365 393 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 393 394 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 394 403 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 403 409 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 409 410 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 410 432 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 432 433 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 433 440 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 440 446 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 446 447 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 447 498 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 498 499 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 499 501 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 501 502 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 502 503 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 503 525 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 525 527 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 527 528 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 528 554 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 554 555 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 555 566 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 566 567 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 567 579 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 579 599 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 599 600 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 600 638 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 638 639 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 639 640 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 640 641 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 641 643 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 643 677 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 677 678 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 678 679 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 679 682 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 682 683 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 683 685 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 685 694 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 694 695 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 695 696 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 696 697 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 697 698 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 698 735 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 735 738 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 738 754 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 754 755 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 755 826 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 826 827 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 827 839 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 4268) (undo-tree-id42875 . 141) (undo-tree-id42876 . -697) (undo-tree-id42877 . -839) (undo-tree-id42878 . -697) (undo-tree-id42879 . -697) (undo-tree-id42880 . -697) (undo-tree-id42881 . -697) (undo-tree-id42882 . -697) (undo-tree-id42883 . -697) (undo-tree-id42884 . -697) (undo-tree-id42885 . -697) (undo-tree-id42886 . -697) (undo-tree-id42887 . -697) (undo-tree-id42888 . -697) (undo-tree-id42889 . -697) (undo-tree-id42890 . -697) (undo-tree-id42891 . -697) (undo-tree-id42892 . -697) (undo-tree-id42893 . -697) (undo-tree-id42894 . -697) (undo-tree-id42895 . -697) (undo-tree-id42896 . -697) (undo-tree-id42897 . -697) (undo-tree-id42898 . -697) (undo-tree-id42899 . -697) (undo-tree-id42900 . -697) (undo-tree-id42901 . -697) (undo-tree-id42902 . -698) (undo-tree-id42903 . -698) (undo-tree-id42904 . -698) (undo-tree-id42905 . -698) (undo-tree-id42906 . -698) (undo-tree-id42907 . -698) (undo-tree-id42908 . -698) (undo-tree-id42909 . -698) (undo-tree-id42910 . -698) (undo-tree-id42911 . -698) (undo-tree-id42912 . -698) (undo-tree-id42913 . -698) (undo-tree-id42914 . -698) (undo-tree-id42915 . -698) (undo-tree-id42916 . -698) (undo-tree-id42917 . -698) (undo-tree-id42918 . -698) (undo-tree-id42919 . -698) (undo-tree-id42920 . -698) (undo-tree-id42921 . -698) (undo-tree-id42922 . -698) (undo-tree-id42923 . -698) (undo-tree-id42924 . -698) (undo-tree-id42925 . -698) (undo-tree-id42926 . -698) (undo-tree-id42927 . -698) (undo-tree-id42928 . -698) (undo-tree-id42929 . -698) (undo-tree-id42930 . -698) (undo-tree-id42931 . -698) (undo-tree-id42932 . -698) (undo-tree-id42933 . -698) (undo-tree-id42934 . -698) (undo-tree-id42935 . -698) (undo-tree-id42936 . -698) (undo-tree-id42937 . -698) (undo-tree-id42938 . -761) (undo-tree-id42939 . -761) (undo-tree-id42940 . -761) (undo-tree-id42941 . -761) (undo-tree-id42942 . -761) (undo-tree-id42943 . -761) (undo-tree-id42944 . -761) (undo-tree-id42945 . -761) (undo-tree-id42946 . -761) (undo-tree-id42947 . -761) (undo-tree-id42948 . -761) (undo-tree-id42949 . -761) (undo-tree-id42950 . -761) (undo-tree-id42951 . -761) (undo-tree-id42952 . -761) (undo-tree-id42953 . -761) (undo-tree-id42954 . -823) (undo-tree-id42955 . -823) (undo-tree-id42956 . -823) (undo-tree-id42957 . -823) (undo-tree-id42958 . -823) (undo-tree-id42959 . -823) (undo-tree-id42960 . -823) (undo-tree-id42961 . -823) (undo-tree-id42962 . -823) (undo-tree-id42963 . -823) (undo-tree-id42964 . -823) (undo-tree-id42965 . -823) (undo-tree-id42966 . -823) (undo-tree-id42967 . -823) (undo-tree-id42968 . -823) (undo-tree-id42969 . -823) (undo-tree-id42970 . -823) (undo-tree-id42971 . -823) (undo-tree-id42972 . -823) (undo-tree-id42973 . -823) (undo-tree-id42974 . -823) (undo-tree-id42975 . -823) (undo-tree-id42976 . -823) (undo-tree-id42977 . -823) (undo-tree-id42978 . -823) (undo-tree-id42979 . -823) (undo-tree-id42980 . -823) (undo-tree-id42981 . -823) (undo-tree-id42982 . -823) (undo-tree-id42983 . -823) (undo-tree-id42984 . -823) (undo-tree-id42985 . -827) (undo-tree-id42986 . -827) (undo-tree-id42987 . -827) (undo-tree-id42988 . -827) (undo-tree-id42989 . -827) (undo-tree-id42990 . -827) (undo-tree-id42991 . -827) (undo-tree-id42992 . -827) (undo-tree-id42993 . -827) (undo-tree-id42994 . -827) (undo-tree-id42995 . -827) (undo-tree-id42996 . -833) (undo-tree-id42997 . -833) (undo-tree-id42998 . -833) (undo-tree-id42999 . -833) (undo-tree-id43000 . -833) (undo-tree-id43001 . -833) (undo-tree-id43002 . -833) (undo-tree-id43003 . -833) (undo-tree-id43004 . -833) (undo-tree-id43005 . -833) (undo-tree-id43006 . -833) (undo-tree-id43007 . -838) (undo-tree-id43008 . -838) (undo-tree-id43009 . -838) (undo-tree-id43010 . -838) (undo-tree-id43011 . -838) (undo-tree-id43012 . -838) (undo-tree-id43013 . -838) (undo-tree-id43014 . -838) (undo-tree-id43015 . -838) (undo-tree-id43016 . -838) (undo-tree-id43017 . -838) (undo-tree-id43018 . -839) (undo-tree-id43019 . -839) (undo-tree-id43020 . -839) (undo-tree-id43021 . -839) (undo-tree-id43022 . -839) (undo-tree-id43023 . -839) (undo-tree-id43024 . -839) (undo-tree-id43025 . -839) (undo-tree-id43026 . -839) (undo-tree-id43027 . -839) (undo-tree-id43028 . -839) (undo-tree-id43029 . -839) (undo-tree-id43030 . -839) (undo-tree-id43031 . -839) (undo-tree-id43032 . -839) (undo-tree-id43033 . -839) (undo-tree-id43034 . -839) (undo-tree-id43035 . -839) (undo-tree-id43036 . -839) (undo-tree-id43037 . -839) (undo-tree-id43038 . -839) (undo-tree-id43039 . -839) (undo-tree-id43040 . -839) (undo-tree-id43041 . -839) (undo-tree-id43042 . -839) (undo-tree-id43043 . -696) (4268 . 4964) (#(" We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer. Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 34 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 50 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 51 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 62 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 63 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 75 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 91 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 104 105 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 105 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 116 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 117 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 177 179 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 180 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 192 220 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 220 221 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 221 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 254 273 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 273 276 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 276 277 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 277 282 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 282 283 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 283 292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 292 304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 304 305 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 305 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 310 317 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 317 318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 318 321 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 321 322 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 322 324 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 324 326 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 326 327 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 327 349 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 349 350 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 350 357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 357 363 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 363 364 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 364 392 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 392 393 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 393 402 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 402 408 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 408 409 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 409 431 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 431 432 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 432 439 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 439 445 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 445 446 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 446 497 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 497 498 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 498 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 500 501 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 501 502 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 502 524 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 524 526 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 526 527 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 527 553 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 553 554 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 554 565 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 565 566 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 566 578 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 578 598 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 598 599 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 599 637 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 637 638 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 638 639 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 639 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 640 642 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 642 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 676 677 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 677 678 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 678 681 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 681 682 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 682 684 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 684 693 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4411) (undo-tree-id43044 . -1) (undo-tree-id43045 . -1) (undo-tree-id43046 . -1) (undo-tree-id43047 . -1) (undo-tree-id43048 . -1) (undo-tree-id43049 . -1) (undo-tree-id43050 . -1) (undo-tree-id43051 . -1) (undo-tree-id43052 . -1) (undo-tree-id43053 . -1) (undo-tree-id43054 . -1) (undo-tree-id43055 . -1) (undo-tree-id43056 . -1) (undo-tree-id43057 . -1) (undo-tree-id43058 . -1) (undo-tree-id43059 . -1) (undo-tree-id43060 . -1) (undo-tree-id43061 . -1) (undo-tree-id43062 . -1) (undo-tree-id43063 . -1) (undo-tree-id43064 . -1) (undo-tree-id43065 . -1) (undo-tree-id43066 . -1) (undo-tree-id43067 . -1) (undo-tree-id43068 . -1) (undo-tree-id43069 . -1) 4412 (t 25767 11456 815440 996000)) nil (25767 11468 293620 285000) 0 nil])
([nil nil ((4413 . 5110) (#("- Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- We can then compile this model, using the \"sparse_categorical_crossentropy\" loss and an Adam optimizer." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 13 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 14 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 14 74 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 74 76 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 76 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 77 89 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 89 117 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 117 118 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 118 151 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 151 170 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 170 173 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 173 174 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 174 179 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 179 180 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 180 189 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 189 201 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 201 202 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 202 207 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 207 214 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 214 215 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 215 218 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 218 219 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 219 221 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 221 223 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 223 224 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 224 246 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 246 247 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 247 251 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 251 254 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 254 260 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 260 261 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 261 289 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 289 290 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 290 299 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 299 305 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 305 306 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 306 328 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 328 329 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 329 336 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 336 342 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 342 343 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 343 394 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 394 395 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 395 397 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 397 398 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 398 399 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 399 421 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 421 423 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 423 424 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 424 450 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 450 451 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 451 462 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 462 463 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 463 475 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 475 495 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 495 496 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 496 534 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 534 535 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 535 536 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 536 537 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 537 539 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 539 573 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 573 574 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 574 575 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 575 578 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 578 579 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 579 581 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 581 590 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 590 591 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 591 592 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 592 593 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 593 594 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 594 627 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 627 635 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 635 636 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 636 643 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 643 644 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 644 655 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 655 656 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 656 668 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 668 684 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 684 697 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 4413) (undo-tree-id43070 . 103) (undo-tree-id43071 . -593) (undo-tree-id43072 . -697) (undo-tree-id43073 . -593) (undo-tree-id43074 . -593) (undo-tree-id43075 . -593) (undo-tree-id43076 . -593) (undo-tree-id43077 . -593) (undo-tree-id43078 . -593) (undo-tree-id43079 . -593) (undo-tree-id43080 . -593) (undo-tree-id43081 . -593) (undo-tree-id43082 . -593) (undo-tree-id43083 . -593) (undo-tree-id43084 . -593) (undo-tree-id43085 . -593) (undo-tree-id43086 . -593) (undo-tree-id43087 . -593) (undo-tree-id43088 . -593) (undo-tree-id43089 . -593) (undo-tree-id43090 . -593) (undo-tree-id43091 . -593) (undo-tree-id43092 . -593) (undo-tree-id43093 . -593) (undo-tree-id43094 . -593) (undo-tree-id43095 . -593) (undo-tree-id43096 . -593) (undo-tree-id43097 . -594) (undo-tree-id43098 . -594) (undo-tree-id43099 . -594) (undo-tree-id43100 . -594) (undo-tree-id43101 . -594) (undo-tree-id43102 . -594) (undo-tree-id43103 . -594) (undo-tree-id43104 . -594) (undo-tree-id43105 . -594) (undo-tree-id43106 . -594) (undo-tree-id43107 . -594) (undo-tree-id43108 . -594) (undo-tree-id43109 . -594) (undo-tree-id43110 . -594) (undo-tree-id43111 . -594) (undo-tree-id43112 . -594) (undo-tree-id43113 . -594) (undo-tree-id43114 . -594) (undo-tree-id43115 . -594) (undo-tree-id43116 . -594) (undo-tree-id43117 . -594) (undo-tree-id43118 . -594) (undo-tree-id43119 . -594) (undo-tree-id43120 . -594) (undo-tree-id43121 . -594) (undo-tree-id43122 . -594) (undo-tree-id43123 . -594) (undo-tree-id43124 . -594) (undo-tree-id43125 . -594) (undo-tree-id43126 . -594) (undo-tree-id43127 . -594) (undo-tree-id43128 . -594) (undo-tree-id43129 . -594) (undo-tree-id43130 . -594) (undo-tree-id43131 . -594) (undo-tree-id43132 . -594) (undo-tree-id43133 . -594) (undo-tree-id43134 . -594) (undo-tree-id43135 . -594) (undo-tree-id43136 . -594) (undo-tree-id43137 . -594) (undo-tree-id43138 . -594) (undo-tree-id43139 . -594) (undo-tree-id43140 . -594) (undo-tree-id43141 . -594) (undo-tree-id43142 . -594) (undo-tree-id43143 . -594) (undo-tree-id43144 . -594) (undo-tree-id43145 . -594) (undo-tree-id43146 . -594) (undo-tree-id43147 . -594) (undo-tree-id43148 . -636) (undo-tree-id43149 . -636) (undo-tree-id43150 . -636) (undo-tree-id43151 . -636) (undo-tree-id43152 . -636) (undo-tree-id43153 . -636) (undo-tree-id43154 . -636) (undo-tree-id43155 . -636) (undo-tree-id43156 . -636) (undo-tree-id43157 . -636) (undo-tree-id43158 . -636) (undo-tree-id43159 . -636) (undo-tree-id43160 . -636) (undo-tree-id43161 . -636) (undo-tree-id43162 . -636) (undo-tree-id43163 . -636) (undo-tree-id43164 . -636) (undo-tree-id43165 . -636) (undo-tree-id43166 . -636) (undo-tree-id43167 . -636) (undo-tree-id43168 . -636) (undo-tree-id43169 . -696) (undo-tree-id43170 . -696) (undo-tree-id43171 . -696) (undo-tree-id43172 . -696) (undo-tree-id43173 . -696) (undo-tree-id43174 . -696) (undo-tree-id43175 . -696) (undo-tree-id43176 . -696) (undo-tree-id43177 . -696) (undo-tree-id43178 . -696) (undo-tree-id43179 . -696) (undo-tree-id43180 . -697) (undo-tree-id43181 . -697) (undo-tree-id43182 . -697) (undo-tree-id43183 . -697) (undo-tree-id43184 . -697) (undo-tree-id43185 . -697) (undo-tree-id43186 . -697) (undo-tree-id43187 . -697) (undo-tree-id43188 . -697) (undo-tree-id43189 . -697) (undo-tree-id43190 . -697) (undo-tree-id43191 . -697) (undo-tree-id43192 . -697) (undo-tree-id43193 . -697) (undo-tree-id43194 . -697) (undo-tree-id43195 . -697) (undo-tree-id43196 . -697) (undo-tree-id43197 . -697) (undo-tree-id43198 . -697) (undo-tree-id43199 . -697) (undo-tree-id43200 . -697) (undo-tree-id43201 . -697) (undo-tree-id43202 . -697) (undo-tree-id43203 . -697) (undo-tree-id43204 . -697) (undo-tree-id43205 . -592) (4413 . 5005) (#(" Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware): model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 13 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 73 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 75 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 88 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 116 117 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 150 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 169 172 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 172 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 173 178 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 178 179 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 179 188 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 188 200 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 200 201 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 201 206 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 206 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 213 214 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 214 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 217 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 218 220 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 220 222 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 222 223 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 223 245 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 245 246 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 246 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 250 253 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 253 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 259 260 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 260 288 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 288 289 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 289 298 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 298 304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 304 305 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 305 327 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 327 328 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 328 335 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 335 341 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 341 342 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 342 393 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 393 394 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 394 396 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 396 397 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 397 398 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 398 420 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 420 422 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 422 423 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 423 449 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 449 450 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 450 461 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 461 462 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 462 474 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 474 494 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 494 495 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 495 533 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 533 534 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 534 535 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 535 536 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 536 538 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 538 572 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 572 573 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 573 574 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 574 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 578 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 580 589 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4518) (undo-tree-id43206 . -1) (undo-tree-id43207 . -1) (undo-tree-id43208 . -1) (undo-tree-id43209 . -1) (undo-tree-id43210 . -1) (undo-tree-id43211 . -1) (undo-tree-id43212 . -1) (undo-tree-id43213 . -1) (undo-tree-id43214 . -1) (undo-tree-id43215 . -1) (undo-tree-id43216 . -1) (undo-tree-id43217 . -1) (undo-tree-id43218 . -1) (undo-tree-id43219 . -1) (undo-tree-id43220 . -1) (undo-tree-id43221 . -1) (undo-tree-id43222 . -1) (undo-tree-id43223 . -1) (undo-tree-id43224 . -1) (undo-tree-id43225 . -1) (undo-tree-id43226 . -1) (undo-tree-id43227 . -1) (undo-tree-id43228 . -1) (undo-tree-id43229 . -1) (undo-tree-id43230 . -1) (undo-tree-id43231 . -1) 4519 (t 25767 11468 347215 800000)) nil (25767 11492 232933 648000) 0 nil])
([nil nil ((#("model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)" 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 33 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 52 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 55 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 61 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 62 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 71 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 83 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 84 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 89 96 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 100 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 101 103 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 103 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 105 106 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 106 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 128 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 129 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 133 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 136 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 142 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 143 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 171 172 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 172 181 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 181 187 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 187 188 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 188 210 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 210 211 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 211 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 218 224 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 224 225 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 225 275 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 275 276 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 276 277 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 277 279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 279 280 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 280 281 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 281 303 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 303 305 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 305 306 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 306 332 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 332 333 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 333 344 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 344 345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 345 357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 357 377 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 377 378 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 378 382 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 382 416 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 416 417 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 4638) (undo-tree-id43408 . -416) (undo-tree-id43409 . -416) (undo-tree-id43410 . -416) (undo-tree-id43411 . -417) (undo-tree-id43412 . -416) (undo-tree-id43413 . -4) (undo-tree-id43414 . -4) (undo-tree-id43415 . -4) (undo-tree-id43416 . -4) (undo-tree-id43417 . -4) (undo-tree-id43418 . -4) (undo-tree-id43419 . -4) (undo-tree-id43420 . -4) (undo-tree-id43421 . -4) (undo-tree-id43422 . -4) (undo-tree-id43423 . -4) (undo-tree-id43424 . -4) (undo-tree-id43425 . -4) (undo-tree-id43426 . -4) (undo-tree-id43427 . -4) (undo-tree-id43428 . -4) (undo-tree-id43429 . -6) (undo-tree-id43430 . -6) (undo-tree-id43431 . -6) (undo-tree-id43432 . -6) (undo-tree-id43433 . -6) (undo-tree-id43434 . -6) (undo-tree-id43435 . -6) (undo-tree-id43436 . -6) (undo-tree-id43437 . -6) (undo-tree-id43438 . -6) (undo-tree-id43439 . -6) (undo-tree-id43440 . -6) (undo-tree-id43441 . -6) (undo-tree-id43442 . -6) (undo-tree-id43443 . -6) (undo-tree-id43444 . -6) (undo-tree-id43445 . -6) (undo-tree-id43446 . -6) (undo-tree-id43447 . -6) (undo-tree-id43448 . -6) (undo-tree-id43449 . -6) (undo-tree-id43450 . 409) (undo-tree-id43451 . -13) (undo-tree-id43452 . -12) (undo-tree-id43453 . -12) (undo-tree-id43454 . -12) (undo-tree-id43455 . -12) (undo-tree-id43456 . -12) (undo-tree-id43457 . -12) (undo-tree-id43458 . -13) (undo-tree-id43459 . -13) (undo-tree-id43460 . -13) (undo-tree-id43461 . -13) (undo-tree-id43462 . -13) (undo-tree-id43463 . -13) (undo-tree-id43464 . -19) (undo-tree-id43465 . -19) (undo-tree-id43466 . -19) (undo-tree-id43467 . -19) (undo-tree-id43468 . -19) (undo-tree-id43469 . -19) (undo-tree-id43470 . -20) (undo-tree-id43471 . -20) (undo-tree-id43472 . -20) (undo-tree-id43473 . -20) (undo-tree-id43474 . -20) (undo-tree-id43475 . -20) (undo-tree-id43476 . -20) (undo-tree-id43477 . -20) (undo-tree-id43478 . -30) (undo-tree-id43479 . -30) (undo-tree-id43480 . -30) (undo-tree-id43481 . -30) (undo-tree-id43482 . -30) (undo-tree-id43483 . -30) (undo-tree-id43484 . -32) (undo-tree-id43485 . -32) (undo-tree-id43486 . -32) (undo-tree-id43487 . -32) (undo-tree-id43488 . -32) (undo-tree-id43489 . -32) (undo-tree-id43490 . 384) (undo-tree-id43491 . -38) (undo-tree-id43492 . -37) (undo-tree-id43493 . -37) (undo-tree-id43494 . -37) (undo-tree-id43495 . -37) (undo-tree-id43496 . -37) (undo-tree-id43497 . -37) (undo-tree-id43498 . -38) (undo-tree-id43499 . -38) (undo-tree-id43500 . -38) (undo-tree-id43501 . -38) (undo-tree-id43502 . -38) (undo-tree-id43503 . -38) (undo-tree-id43504 . -44) (undo-tree-id43505 . -44) (undo-tree-id43506 . -44) (undo-tree-id43507 . -44) (undo-tree-id43508 . -44) (undo-tree-id43509 . -44) (undo-tree-id43510 . -45) (undo-tree-id43511 . -45) (undo-tree-id43512 . -45) (undo-tree-id43513 . -45) (undo-tree-id43514 . -45) (undo-tree-id43515 . -45) (undo-tree-id43516 . -45) (undo-tree-id43517 . -45) (undo-tree-id43518 . -45) (undo-tree-id43519 . -45) (undo-tree-id43520 . -45) (undo-tree-id43521 . -45) (undo-tree-id43522 . -45) (undo-tree-id43523 . -45) (undo-tree-id43524 . -45) (undo-tree-id43525 . -45) (undo-tree-id43526 . 371) (undo-tree-id43527 . -49) (undo-tree-id43528 . -48) (undo-tree-id43529 . -48) (undo-tree-id43530 . -48) (undo-tree-id43531 . -48) (undo-tree-id43532 . -48) (undo-tree-id43533 . -48) (undo-tree-id43534 . -48) (undo-tree-id43535 . -48) (undo-tree-id43536 . -48) (undo-tree-id43537 . -48) (undo-tree-id43538 . -48) (undo-tree-id43539 . -48) (undo-tree-id43540 . -48) (undo-tree-id43541 . -48) (undo-tree-id43542 . -48) (undo-tree-id43543 . -48) (undo-tree-id43544 . -48) (undo-tree-id43545 . -48) (undo-tree-id43546 . -48) (undo-tree-id43547 . -48) (undo-tree-id43548 . -48) (undo-tree-id43549 . -49) (undo-tree-id43550 . -49) (undo-tree-id43551 . -49) (undo-tree-id43552 . -49) (undo-tree-id43553 . -49) (undo-tree-id43554 . -49) (undo-tree-id43555 . -52) (undo-tree-id43556 . -52) (undo-tree-id43557 . -52) (undo-tree-id43558 . -52) (undo-tree-id43559 . -52) (undo-tree-id43560 . -52) (undo-tree-id43561 . -53) (undo-tree-id43562 . -53) (undo-tree-id43563 . -53) (undo-tree-id43564 . -53) (undo-tree-id43565 . -53) (undo-tree-id43566 . -53) (undo-tree-id43567 . -60) (undo-tree-id43568 . -60) (undo-tree-id43569 . -60) (undo-tree-id43570 . -60) (undo-tree-id43571 . -60) (undo-tree-id43572 . -60) (undo-tree-id43573 . -61) (undo-tree-id43574 . -61) (undo-tree-id43575 . -61) (undo-tree-id43576 . -61) (undo-tree-id43577 . -61) (undo-tree-id43578 . -61) (undo-tree-id43579 . -70) (undo-tree-id43580 . -70) (undo-tree-id43581 . -70) (undo-tree-id43582 . -70) (undo-tree-id43583 . -70) (undo-tree-id43584 . -70) (undo-tree-id43585 . -71) (undo-tree-id43586 . -71) (undo-tree-id43587 . -71) (undo-tree-id43588 . -71) (undo-tree-id43589 . -71) (undo-tree-id43590 . -71) (undo-tree-id43591 . -75) (undo-tree-id43592 . -75) (undo-tree-id43593 . -75) (undo-tree-id43594 . -75) (undo-tree-id43595 . -75) (undo-tree-id43596 . -75) (undo-tree-id43597 . -76) (undo-tree-id43598 . -76) (undo-tree-id43599 . -76) (undo-tree-id43600 . -76) (undo-tree-id43601 . -76) (undo-tree-id43602 . -76) (undo-tree-id43603 . -82) (undo-tree-id43604 . -82) (undo-tree-id43605 . -82) (undo-tree-id43606 . -82) (undo-tree-id43607 . -82) (undo-tree-id43608 . -82) (undo-tree-id43609 . -83) (undo-tree-id43610 . -83) (undo-tree-id43611 . -83) (undo-tree-id43612 . -83) (undo-tree-id43613 . -83) (undo-tree-id43614 . -83) (undo-tree-id43615 . -88) (undo-tree-id43616 . -88) (undo-tree-id43617 . -88) (undo-tree-id43618 . -88) (undo-tree-id43619 . -88) (undo-tree-id43620 . -88) (undo-tree-id43621 . -90) (undo-tree-id43622 . -90) (undo-tree-id43623 . -90) (undo-tree-id43624 . -90) (undo-tree-id43625 . -90) (undo-tree-id43626 . -90) (undo-tree-id43627 . -94) (undo-tree-id43628 . -94) (undo-tree-id43629 . -94) (undo-tree-id43630 . -94) (undo-tree-id43631 . -94) (undo-tree-id43632 . -94) (undo-tree-id43633 . -95) (undo-tree-id43634 . -95) (undo-tree-id43635 . -95) (undo-tree-id43636 . -95) (undo-tree-id43637 . -95) (undo-tree-id43638 . -95) (undo-tree-id43639 . -99) (undo-tree-id43640 . -99) (undo-tree-id43641 . -99) (undo-tree-id43642 . -99) (undo-tree-id43643 . -99) (undo-tree-id43644 . -99) (undo-tree-id43645 . -100) (undo-tree-id43646 . -100) (undo-tree-id43647 . -100) (undo-tree-id43648 . -100) (undo-tree-id43649 . -100) (undo-tree-id43650 . -100) (undo-tree-id43651 . -102) (undo-tree-id43652 . -102) (undo-tree-id43653 . -102) (undo-tree-id43654 . -102) (undo-tree-id43655 . -102) (undo-tree-id43656 . -102) (undo-tree-id43657 . -104) (undo-tree-id43658 . -104) (undo-tree-id43659 . -104) (undo-tree-id43660 . -104) (undo-tree-id43661 . -104) (undo-tree-id43662 . -104) (undo-tree-id43663 . -112) (undo-tree-id43664 . -112) (undo-tree-id43665 . -112) (undo-tree-id43666 . -112) (undo-tree-id43667 . -112) (undo-tree-id43668 . -112) (undo-tree-id43669 . -113) (undo-tree-id43670 . -113) (undo-tree-id43671 . -113) (undo-tree-id43672 . -113) (undo-tree-id43673 . -113) (undo-tree-id43674 . -113) (undo-tree-id43675 . -114) (undo-tree-id43676 . -114) (undo-tree-id43677 . -114) (undo-tree-id43678 . -114) (undo-tree-id43679 . -114) (undo-tree-id43680 . -114) (undo-tree-id43681 . -115) (undo-tree-id43682 . -115) (undo-tree-id43683 . -115) (undo-tree-id43684 . -115) (undo-tree-id43685 . -115) (undo-tree-id43686 . -115) (undo-tree-id43687 . -116) (undo-tree-id43688 . -116) (undo-tree-id43689 . -116) (undo-tree-id43690 . -116) (undo-tree-id43691 . -116) (undo-tree-id43692 . -116) (undo-tree-id43693 . -117) (undo-tree-id43694 . -117) (undo-tree-id43695 . -117) (undo-tree-id43696 . -117) (undo-tree-id43697 . -117) (undo-tree-id43698 . -117) (undo-tree-id43699 . -127) (undo-tree-id43700 . -127) (undo-tree-id43701 . -127) (undo-tree-id43702 . -127) (undo-tree-id43703 . -127) (undo-tree-id43704 . -127) (undo-tree-id43705 . -128) (undo-tree-id43706 . -128) (undo-tree-id43707 . -128) (undo-tree-id43708 . -128) (undo-tree-id43709 . -128) (undo-tree-id43710 . -128) (undo-tree-id43711 . -135) (undo-tree-id43712 . -135) (undo-tree-id43713 . -135) (undo-tree-id43714 . -135) (undo-tree-id43715 . -135) (undo-tree-id43716 . -135) (undo-tree-id43717 . -136) (undo-tree-id43718 . -136) (undo-tree-id43719 . -136) (undo-tree-id43720 . -136) (undo-tree-id43721 . -136) (undo-tree-id43722 . -136) (undo-tree-id43723 . -137) (undo-tree-id43724 . -137) (undo-tree-id43725 . -137) (undo-tree-id43726 . -137) (undo-tree-id43727 . -137) (undo-tree-id43728 . -137) (undo-tree-id43729 . -138) (undo-tree-id43730 . -138) (undo-tree-id43731 . -138) (undo-tree-id43732 . -138) (undo-tree-id43733 . -138) (undo-tree-id43734 . -138) (undo-tree-id43735 . -139) (undo-tree-id43736 . -139) (undo-tree-id43737 . -139) (undo-tree-id43738 . -139) (undo-tree-id43739 . -139) (undo-tree-id43740 . -139) (undo-tree-id43741 . -141) (undo-tree-id43742 . -141) (undo-tree-id43743 . -141) (undo-tree-id43744 . -141) (undo-tree-id43745 . -141) (undo-tree-id43746 . -141) (undo-tree-id43747 . 274) (undo-tree-id43748 . -148) (undo-tree-id43749 . -147) (undo-tree-id43750 . -147) (undo-tree-id43751 . -147) (undo-tree-id43752 . -147) (undo-tree-id43753 . -147) (undo-tree-id43754 . -147) (undo-tree-id43755 . -148) (undo-tree-id43756 . -148) (undo-tree-id43757 . -148) (undo-tree-id43758 . -148) (undo-tree-id43759 . -148) (undo-tree-id43760 . -148) (undo-tree-id43761 . -154) (undo-tree-id43762 . -154) (undo-tree-id43763 . -154) (undo-tree-id43764 . -154) (undo-tree-id43765 . -154) (undo-tree-id43766 . -154) (undo-tree-id43767 . -155) (undo-tree-id43768 . -155) (undo-tree-id43769 . -155) (undo-tree-id43770 . -155) (undo-tree-id43771 . -155) (undo-tree-id43772 . -155) (undo-tree-id43773 . 261) (undo-tree-id43774 . -159) (undo-tree-id43775 . -158) (undo-tree-id43776 . -158) (undo-tree-id43777 . -158) (undo-tree-id43778 . -158) (undo-tree-id43779 . -158) (undo-tree-id43780 . -158) (undo-tree-id43781 . -159) (undo-tree-id43782 . -159) (undo-tree-id43783 . -159) (undo-tree-id43784 . -159) (undo-tree-id43785 . -159) (undo-tree-id43786 . -159) (undo-tree-id43787 . -162) (undo-tree-id43788 . -162) (undo-tree-id43789 . -162) (undo-tree-id43790 . -162) (undo-tree-id43791 . -162) (undo-tree-id43792 . -162) (undo-tree-id43793 . -163) (undo-tree-id43794 . -163) (undo-tree-id43795 . -163) (undo-tree-id43796 . -163) (undo-tree-id43797 . -163) (undo-tree-id43798 . -163) (undo-tree-id43799 . -170) (undo-tree-id43800 . -170) (undo-tree-id43801 . -170) (undo-tree-id43802 . -170) (undo-tree-id43803 . -170) (undo-tree-id43804 . -170) (undo-tree-id43805 . -171) (undo-tree-id43806 . -171) (undo-tree-id43807 . -171) (undo-tree-id43808 . -171) (undo-tree-id43809 . -171) (undo-tree-id43810 . -171) (undo-tree-id43811 . -180) (undo-tree-id43812 . -180) (undo-tree-id43813 . -180) (undo-tree-id43814 . -180) (undo-tree-id43815 . -180) (undo-tree-id43816 . -180) (undo-tree-id43817 . -181) (undo-tree-id43818 . -181) (undo-tree-id43819 . -181) (undo-tree-id43820 . -181) (undo-tree-id43821 . -181) (undo-tree-id43822 . -181) (undo-tree-id43823 . -185) (undo-tree-id43824 . -185) (undo-tree-id43825 . -185) (undo-tree-id43826 . -185) (undo-tree-id43827 . -185) (undo-tree-id43828 . -185) (undo-tree-id43829 . -186) (undo-tree-id43830 . -186) (undo-tree-id43831 . -186) (undo-tree-id43832 . -186) (undo-tree-id43833 . -186) (undo-tree-id43834 . -186) (undo-tree-id43835 . -194) (undo-tree-id43836 . -194) (undo-tree-id43837 . -194) (undo-tree-id43838 . -194) (undo-tree-id43839 . -194) (undo-tree-id43840 . -194) (undo-tree-id43841 . -195) (undo-tree-id43842 . -195) (undo-tree-id43843 . -195) (undo-tree-id43844 . -195) (undo-tree-id43845 . -195) (undo-tree-id43846 . -195) (undo-tree-id43847 . -196) (undo-tree-id43848 . -196) (undo-tree-id43849 . -196) (undo-tree-id43850 . -196) (undo-tree-id43851 . -196) (undo-tree-id43852 . -196) (undo-tree-id43853 . -197) (undo-tree-id43854 . -197) (undo-tree-id43855 . -197) (undo-tree-id43856 . -197) (undo-tree-id43857 . -197) (undo-tree-id43858 . -197) (undo-tree-id43859 . -198) (undo-tree-id43860 . -198) (undo-tree-id43861 . -198) (undo-tree-id43862 . -198) (undo-tree-id43863 . -198) (undo-tree-id43864 . -198) (undo-tree-id43865 . -199) (undo-tree-id43866 . -199) (undo-tree-id43867 . -199) (undo-tree-id43868 . -199) (undo-tree-id43869 . -199) (undo-tree-id43870 . -199) (undo-tree-id43871 . -209) (undo-tree-id43872 . -209) (undo-tree-id43873 . -209) (undo-tree-id43874 . -209) (undo-tree-id43875 . -209) (undo-tree-id43876 . -209) (undo-tree-id43877 . -210) (undo-tree-id43878 . -210) (undo-tree-id43879 . -210) (undo-tree-id43880 . -210) (undo-tree-id43881 . -210) (undo-tree-id43882 . -210) (undo-tree-id43883 . -217) (undo-tree-id43884 . -217) (undo-tree-id43885 . -217) (undo-tree-id43886 . -217) (undo-tree-id43887 . -217) (undo-tree-id43888 . -217) (undo-tree-id43889 . -218) (undo-tree-id43890 . -218) (undo-tree-id43891 . -218) (undo-tree-id43892 . -218) (undo-tree-id43893 . -218) (undo-tree-id43894 . -218) (undo-tree-id43895 . -219) (undo-tree-id43896 . -219) (undo-tree-id43897 . -219) (undo-tree-id43898 . -219) (undo-tree-id43899 . -219) (undo-tree-id43900 . -219) (undo-tree-id43901 . -220) (undo-tree-id43902 . -220) (undo-tree-id43903 . -220) (undo-tree-id43904 . -220) (undo-tree-id43905 . -220) (undo-tree-id43906 . -220) (undo-tree-id43907 . -221) (undo-tree-id43908 . -221) (undo-tree-id43909 . -221) (undo-tree-id43910 . -221) (undo-tree-id43911 . -221) (undo-tree-id43912 . -221) (undo-tree-id43913 . -223) (undo-tree-id43914 . -223) (undo-tree-id43915 . -223) (undo-tree-id43916 . -223) (undo-tree-id43917 . -223) (undo-tree-id43918 . -223) (undo-tree-id43919 . 192) (undo-tree-id43920 . -230) (undo-tree-id43921 . -229) (undo-tree-id43922 . -229) (undo-tree-id43923 . -229) (undo-tree-id43924 . -229) (undo-tree-id43925 . -229) (undo-tree-id43926 . -229) (undo-tree-id43927 . -230) (undo-tree-id43928 . -230) (undo-tree-id43929 . -230) (undo-tree-id43930 . -230) (undo-tree-id43931 . -230) (undo-tree-id43932 . -230) (undo-tree-id43933 . -236) (undo-tree-id43934 . -236) (undo-tree-id43935 . -236) (undo-tree-id43936 . -236) (undo-tree-id43937 . -236) (undo-tree-id43938 . -236) (undo-tree-id43939 . -237) (undo-tree-id43940 . -237) (undo-tree-id43941 . -237) (undo-tree-id43942 . -237) (undo-tree-id43943 . -237) (undo-tree-id43944 . -237) (undo-tree-id43945 . 179) (undo-tree-id43946 . -253) (undo-tree-id43947 . -252) (undo-tree-id43948 . -252) (undo-tree-id43949 . -252) (undo-tree-id43950 . -252) (undo-tree-id43951 . -252) (undo-tree-id43952 . -252) (undo-tree-id43953 . -253) (undo-tree-id43954 . -253) (undo-tree-id43955 . -253) (undo-tree-id43956 . -253) (undo-tree-id43957 . -253) (undo-tree-id43958 . -253) (undo-tree-id43959 . 163) (undo-tree-id43960 . -259) (undo-tree-id43961 . -258) (undo-tree-id43962 . -258) (undo-tree-id43963 . -258) (undo-tree-id43964 . -258) (undo-tree-id43965 . -258) (undo-tree-id43966 . -258) (undo-tree-id43967 . -259) (undo-tree-id43968 . -259) (undo-tree-id43969 . -259) (undo-tree-id43970 . -259) (undo-tree-id43971 . -259) (undo-tree-id43972 . -259) (undo-tree-id43973 . -265) (undo-tree-id43974 . -265) (undo-tree-id43975 . -265) (undo-tree-id43976 . -265) (undo-tree-id43977 . -265) (undo-tree-id43978 . -265) (undo-tree-id43979 . -266) (undo-tree-id43980 . -266) (undo-tree-id43981 . -266) (undo-tree-id43982 . -266) (undo-tree-id43983 . -266) (undo-tree-id43984 . -266) (undo-tree-id43985 . -271) (undo-tree-id43986 . -271) (undo-tree-id43987 . -271) (undo-tree-id43988 . -271) (undo-tree-id43989 . -271) (undo-tree-id43990 . -271) (undo-tree-id43991 . -272) (undo-tree-id43992 . -272) (undo-tree-id43993 . -272) (undo-tree-id43994 . -272) (undo-tree-id43995 . -272) (undo-tree-id43996 . -272) (undo-tree-id43997 . -275) (undo-tree-id43998 . -275) (undo-tree-id43999 . -275) (undo-tree-id44000 . -275) (undo-tree-id44001 . -275) (undo-tree-id44002 . -275) (undo-tree-id44003 . -276) (undo-tree-id44004 . -276) (undo-tree-id44005 . -276) (undo-tree-id44006 . -276) (undo-tree-id44007 . -276) (undo-tree-id44008 . -276) (undo-tree-id44009 . -278) (undo-tree-id44010 . -278) (undo-tree-id44011 . -278) (undo-tree-id44012 . -278) (undo-tree-id44013 . -278) (undo-tree-id44014 . -278) (undo-tree-id44015 . -279) (undo-tree-id44016 . -279) (undo-tree-id44017 . -279) (undo-tree-id44018 . -279) (undo-tree-id44019 . -279) (undo-tree-id44020 . -279) (undo-tree-id44021 . -290) (undo-tree-id44022 . -290) (undo-tree-id44023 . -290) (undo-tree-id44024 . -290) (undo-tree-id44025 . -290) (undo-tree-id44026 . -290) (undo-tree-id44027 . -292) (undo-tree-id44028 . -292) (undo-tree-id44029 . -292) (undo-tree-id44030 . -292) (undo-tree-id44031 . -292) (undo-tree-id44032 . -292) (undo-tree-id44033 . 124) (undo-tree-id44034 . -300) (undo-tree-id44035 . -299) (undo-tree-id44036 . -299) (undo-tree-id44037 . -299) (undo-tree-id44038 . -299) (undo-tree-id44039 . -299) (undo-tree-id44040 . -299) (undo-tree-id44041 . -304) (undo-tree-id44042 . -304) (undo-tree-id44043 . -304) (undo-tree-id44044 . -304) (undo-tree-id44045 . -304) (undo-tree-id44046 . -304) (undo-tree-id44047 . -310) (undo-tree-id44048 . -310) (undo-tree-id44049 . -310) (undo-tree-id44050 . -310) (undo-tree-id44051 . -310) (undo-tree-id44052 . -310) (undo-tree-id44053 . -311) (undo-tree-id44054 . -311) (undo-tree-id44055 . -311) (undo-tree-id44056 . -311) (undo-tree-id44057 . -311) (undo-tree-id44058 . -311) (undo-tree-id44059 . -311) (undo-tree-id44060 . -311) (undo-tree-id44061 . -311) (undo-tree-id44062 . -311) (undo-tree-id44063 . -311) (undo-tree-id44064 . -311) (undo-tree-id44065 . -311) (undo-tree-id44066 . -311) (undo-tree-id44067 . -311) (undo-tree-id44068 . -311) (undo-tree-id44069 . -311) (undo-tree-id44070 . -311) (undo-tree-id44071 . -311) (undo-tree-id44072 . -311) (undo-tree-id44073 . -311) (undo-tree-id44074 . -311) (undo-tree-id44075 . -311) (undo-tree-id44076 . -311) (undo-tree-id44077 . -311) (undo-tree-id44078 . -311) (undo-tree-id44079 . -383) (undo-tree-id44080 . -383) (undo-tree-id44081 . -383) (undo-tree-id44082 . -383) (undo-tree-id44083 . -383) (undo-tree-id44084 . -383) (undo-tree-id44085 . -383) (undo-tree-id44086 . -383) (undo-tree-id44087 . -383) (undo-tree-id44088 . -383) (undo-tree-id44089 . -383) (undo-tree-id44090 . -383) (undo-tree-id44091 . -383) (undo-tree-id44092 . -383) (undo-tree-id44093 . -383) (undo-tree-id44094 . -383) (undo-tree-id44095 . -384) (undo-tree-id44096 . -384) (undo-tree-id44097 . -384) (undo-tree-id44098 . -384) (undo-tree-id44099 . -384) (undo-tree-id44100 . -384) (undo-tree-id44101 . -384) (undo-tree-id44102 . -384) (undo-tree-id44103 . -384) (undo-tree-id44104 . -384) (undo-tree-id44105 . -384) (undo-tree-id44106 . -384) (undo-tree-id44107 . -384) (undo-tree-id44108 . -384) (undo-tree-id44109 . -384) (undo-tree-id44110 . -384) (undo-tree-id44111 . -386) (undo-tree-id44112 . -386) (undo-tree-id44113 . -386) (undo-tree-id44114 . -386) (undo-tree-id44115 . -386) (undo-tree-id44116 . -386) (undo-tree-id44117 . -386) (undo-tree-id44118 . -386) (undo-tree-id44119 . -386) (undo-tree-id44120 . -386) (undo-tree-id44121 . -386) (undo-tree-id44122 . -386) (undo-tree-id44123 . -386) (undo-tree-id44124 . -386) (undo-tree-id44125 . -386) (undo-tree-id44126 . -386) (undo-tree-id44127 . -386) (undo-tree-id44128 . -386) (undo-tree-id44129 . -386) (undo-tree-id44130 . -386) (undo-tree-id44131 . -386) (undo-tree-id44132 . -392) (undo-tree-id44133 . -392) (undo-tree-id44134 . -392) (undo-tree-id44135 . -392) (undo-tree-id44136 . -392) (undo-tree-id44137 . -392) (undo-tree-id44138 . -393) (undo-tree-id44139 . -393) (undo-tree-id44140 . -393) (undo-tree-id44141 . -393) (undo-tree-id44142 . -393) (undo-tree-id44143 . -393) (undo-tree-id44144 . -396) (undo-tree-id44145 . -396) (undo-tree-id44146 . -396) (undo-tree-id44147 . -396) (undo-tree-id44148 . -396) (undo-tree-id44149 . -396) (undo-tree-id44150 . -397) (undo-tree-id44151 . -397) (undo-tree-id44152 . -397) (undo-tree-id44153 . -397) (undo-tree-id44154 . -397) (undo-tree-id44155 . -397) (undo-tree-id44156 . -404) (undo-tree-id44157 . -404) (undo-tree-id44158 . -404) (undo-tree-id44159 . -404) (undo-tree-id44160 . -404) (undo-tree-id44161 . -404) (undo-tree-id44162 . -405) (undo-tree-id44163 . -405) (undo-tree-id44164 . -405) (undo-tree-id44165 . -405) (undo-tree-id44166 . -405) (undo-tree-id44167 . -405) (undo-tree-id44168 . -412) (undo-tree-id44169 . -412) (undo-tree-id44170 . -412) (undo-tree-id44171 . -412) (undo-tree-id44172 . -412) (undo-tree-id44173 . -412) (undo-tree-id44174 . -413) (undo-tree-id44175 . -413) (undo-tree-id44176 . -413) (undo-tree-id44177 . -413) (undo-tree-id44178 . -413) (undo-tree-id44179 . -413) (undo-tree-id44180 . -415) (undo-tree-id44181 . -415) (undo-tree-id44182 . -415) (undo-tree-id44183 . -415) (undo-tree-id44184 . -415) (undo-tree-id44185 . -415) (undo-tree-id44186 . -416) (undo-tree-id44187 . -416) (undo-tree-id44188 . -416) (undo-tree-id44189 . -416) (undo-tree-id44190 . -416) (undo-tree-id44191 . -416) (undo-tree-id44192 . -383) (undo-tree-id44193 . -383) (undo-tree-id44194 . -383) (undo-tree-id44195 . -383) (undo-tree-id44196 . -383) (undo-tree-id44197 . -383) (undo-tree-id44198 . -383) (undo-tree-id44199 . -383) (undo-tree-id44200 . -383) (undo-tree-id44201 . -383) (undo-tree-id44202 . -383) (undo-tree-id44203 . -383) (undo-tree-id44204 . -383) (undo-tree-id44205 . -383) (undo-tree-id44206 . -383) (undo-tree-id44207 . -383) (undo-tree-id44208 . -383) (undo-tree-id44209 . -383) (undo-tree-id44210 . -383) (undo-tree-id44211 . -383) (undo-tree-id44212 . -383) (undo-tree-id44213 . -383) (undo-tree-id44214 . -383) (undo-tree-id44215 . -383) (undo-tree-id44216 . -383) (undo-tree-id44217 . -383) (undo-tree-id44218 . -384) (undo-tree-id44219 . -384) (undo-tree-id44220 . -384) (undo-tree-id44221 . -384) (undo-tree-id44222 . -384) (undo-tree-id44223 . -384) (undo-tree-id44224 . -384) (undo-tree-id44225 . -384) (undo-tree-id44226 . -384) (undo-tree-id44227 . -384) (undo-tree-id44228 . -384) (undo-tree-id44229 . -384) (undo-tree-id44230 . -384) (undo-tree-id44231 . -384) (undo-tree-id44232 . -384) (undo-tree-id44233 . -384) (undo-tree-id44234 . -384) (undo-tree-id44235 . -384) (undo-tree-id44236 . -384) (undo-tree-id44237 . -384) (undo-tree-id44238 . -384) (undo-tree-id44239 . -386) (undo-tree-id44240 . -386) (undo-tree-id44241 . -386) (undo-tree-id44242 . -386) (undo-tree-id44243 . -386) (undo-tree-id44244 . -386) (undo-tree-id44245 . -392) (undo-tree-id44246 . -392) (undo-tree-id44247 . -392) (undo-tree-id44248 . -392) (undo-tree-id44249 . -392) (undo-tree-id44250 . -392) (undo-tree-id44251 . -393) (undo-tree-id44252 . -393) (undo-tree-id44253 . -393) (undo-tree-id44254 . -393) (undo-tree-id44255 . -393) (undo-tree-id44256 . -393) (undo-tree-id44257 . -396) (undo-tree-id44258 . -396) (undo-tree-id44259 . -396) (undo-tree-id44260 . -396) (undo-tree-id44261 . -396) (undo-tree-id44262 . -396) (undo-tree-id44263 . -397) (undo-tree-id44264 . -397) (undo-tree-id44265 . -397) (undo-tree-id44266 . -397) (undo-tree-id44267 . -397) (undo-tree-id44268 . -397) (undo-tree-id44269 . 19) (undo-tree-id44270 . -405) (undo-tree-id44271 . -404) (undo-tree-id44272 . -404) (undo-tree-id44273 . -404) (undo-tree-id44274 . -404) (undo-tree-id44275 . -404) (undo-tree-id44276 . -404) (undo-tree-id44277 . -405) (undo-tree-id44278 . -405) (undo-tree-id44279 . -405) (undo-tree-id44280 . -405) (undo-tree-id44281 . -405) (undo-tree-id44282 . -405) (undo-tree-id44283 . -412) (undo-tree-id44284 . -412) (undo-tree-id44285 . -412) (undo-tree-id44286 . -412) (undo-tree-id44287 . -412) (undo-tree-id44288 . -412) (undo-tree-id44289 . -412) (undo-tree-id44290 . -412) (undo-tree-id44291 . -412) (undo-tree-id44292 . -412) (undo-tree-id44293 . -412) (undo-tree-id44294 . -412) (undo-tree-id44295 . -412) (undo-tree-id44296 . -412) (undo-tree-id44297 . -412) (undo-tree-id44298 . -412) (undo-tree-id44299 . -413) (undo-tree-id44300 . -413) (undo-tree-id44301 . -413) (undo-tree-id44302 . -413) (undo-tree-id44303 . -413) (undo-tree-id44304 . -413) (undo-tree-id44305 . -413) (undo-tree-id44306 . -413) (undo-tree-id44307 . -413) (undo-tree-id44308 . -413) (undo-tree-id44309 . -413) (undo-tree-id44310 . -413) (undo-tree-id44311 . -413) (undo-tree-id44312 . -413) (undo-tree-id44313 . -413) (undo-tree-id44314 . -413) (undo-tree-id44315 . -415) (undo-tree-id44316 . -415) (undo-tree-id44317 . -415) (undo-tree-id44318 . -415) (undo-tree-id44319 . -415) (undo-tree-id44320 . -415) (undo-tree-id44321 . -415) (undo-tree-id44322 . -415) (undo-tree-id44323 . -415) (undo-tree-id44324 . -415) (undo-tree-id44325 . -415) (undo-tree-id44326 . -415) (undo-tree-id44327 . -415) (undo-tree-id44328 . -415) (undo-tree-id44329 . -415) (undo-tree-id44330 . -415) (undo-tree-id44331 . -416) (undo-tree-id44332 . -416) (undo-tree-id44333 . -416) (undo-tree-id44334 . -416) (undo-tree-id44335 . -416) (undo-tree-id44336 . -416) (undo-tree-id44337 . -416) (undo-tree-id44338 . -416) (undo-tree-id44339 . -416) (undo-tree-id44340 . -416) (undo-tree-id44341 . 1) (undo-tree-id44342 . -417) (undo-tree-id44343 . 20) (undo-tree-id44344 . -398) (undo-tree-id44345 . -416) (undo-tree-id44346 . -416) (undo-tree-id44347 . -416) (undo-tree-id44348 . -416) (undo-tree-id44349 . -416) (undo-tree-id44350 . -416) (undo-tree-id44351 . -416) (undo-tree-id44352 . -416) (undo-tree-id44353 . -416) (undo-tree-id44354 . -416) (undo-tree-id44355 . -416) (undo-tree-id44356 . -416) (undo-tree-id44357 . -417) 5054 (t 25767 11483 30942 882000)) nil (25767 11508 758415 28000) 0 nil] [nil nil ((4520 . 5113) (#("- model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

- Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware):" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 35 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 54 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 54 57 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 58 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 58 63 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 64 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 64 73 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 85 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 85 86 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 86 91 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 91 98 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 98 99 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 99 102 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 102 103 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 103 105 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 105 107 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 107 108 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 108 130 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 130 131 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 131 135 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 135 138 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 138 144 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 144 145 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 145 173 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 173 174 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 174 183 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 183 189 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 189 190 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 190 212 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 212 213 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 213 220 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 220 226 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 226 227 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 227 277 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 277 278 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 278 279 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 279 281 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 281 282 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 282 283 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 283 305 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 305 307 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 307 308 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 308 334 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 334 335 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 335 346 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 346 347 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 347 359 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 359 379 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 379 380 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 380 418 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 418 419 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 419 420 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 420 421 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 421 423 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 423 457 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 457 458 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 458 459 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 459 462 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 462 463 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 463 465 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 465 474 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 474 475 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 475 476 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 476 477 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 477 478 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 478 489 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 489 490 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 490 550 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 550 552 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 552 553 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 553 565 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 565 593 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 4520) (undo-tree-id43232 . 115) (undo-tree-id43233 . -477) (undo-tree-id43234 . -593) (undo-tree-id43235 . -477) (undo-tree-id43236 . -477) (undo-tree-id43237 . -477) (undo-tree-id43238 . -477) (undo-tree-id43239 . -477) (undo-tree-id43240 . -477) (undo-tree-id43241 . -477) (undo-tree-id43242 . -477) (undo-tree-id43243 . -477) (undo-tree-id43244 . -477) (undo-tree-id43245 . -477) (undo-tree-id43246 . -477) (undo-tree-id43247 . -477) (undo-tree-id43248 . -477) (undo-tree-id43249 . -477) (undo-tree-id43250 . -477) (undo-tree-id43251 . -477) (undo-tree-id43252 . -477) (undo-tree-id43253 . -477) (undo-tree-id43254 . -477) (undo-tree-id43255 . -477) (undo-tree-id43256 . -477) (undo-tree-id43257 . -477) (undo-tree-id43258 . -477) (undo-tree-id43259 . -478) (undo-tree-id43260 . -478) (undo-tree-id43261 . -478) (undo-tree-id43262 . -478) (undo-tree-id43263 . -478) (undo-tree-id43264 . -478) (undo-tree-id43265 . -478) (undo-tree-id43266 . -478) (undo-tree-id43267 . -478) (undo-tree-id43268 . -478) (undo-tree-id43269 . -478) (undo-tree-id43270 . -478) (undo-tree-id43271 . -478) (undo-tree-id43272 . -478) (undo-tree-id43273 . -478) (undo-tree-id43274 . -478) (undo-tree-id43275 . -478) (undo-tree-id43276 . -478) (undo-tree-id43277 . -478) (undo-tree-id43278 . -478) (undo-tree-id43279 . -478) (undo-tree-id43280 . -478) (undo-tree-id43281 . -478) (undo-tree-id43282 . -478) (undo-tree-id43283 . -478) (undo-tree-id43284 . -478) (undo-tree-id43285 . -478) (undo-tree-id43286 . -478) (undo-tree-id43287 . -478) (undo-tree-id43288 . -478) (undo-tree-id43289 . -478) (undo-tree-id43290 . -478) (undo-tree-id43291 . -478) (undo-tree-id43292 . -478) (undo-tree-id43293 . -478) (undo-tree-id43294 . -478) (undo-tree-id43295 . -538) (undo-tree-id43296 . -538) (undo-tree-id43297 . -538) (undo-tree-id43298 . -538) (undo-tree-id43299 . -538) (undo-tree-id43300 . -538) (undo-tree-id43301 . -538) (undo-tree-id43302 . -538) (undo-tree-id43303 . -538) (undo-tree-id43304 . -538) (undo-tree-id43305 . -538) (undo-tree-id43306 . -538) (undo-tree-id43307 . -538) (undo-tree-id43308 . -538) (undo-tree-id43309 . -538) (undo-tree-id43310 . -538) (undo-tree-id43311 . -538) (undo-tree-id43312 . -538) (undo-tree-id43313 . -538) (undo-tree-id43314 . -538) (undo-tree-id43315 . -538) (undo-tree-id43316 . -538) (undo-tree-id43317 . -538) (undo-tree-id43318 . -538) (undo-tree-id43319 . -538) (undo-tree-id43320 . -538) (undo-tree-id43321 . -592) (undo-tree-id43322 . -592) (undo-tree-id43323 . -592) (undo-tree-id43324 . -592) (undo-tree-id43325 . -592) (undo-tree-id43326 . -592) (undo-tree-id43327 . -592) (undo-tree-id43328 . -592) (undo-tree-id43329 . -592) (undo-tree-id43330 . -592) (undo-tree-id43331 . -592) (undo-tree-id43332 . -592) (undo-tree-id43333 . -592) (undo-tree-id43334 . -592) (undo-tree-id43335 . -592) (undo-tree-id43336 . -592) (undo-tree-id43337 . -592) (undo-tree-id43338 . -592) (undo-tree-id43339 . -592) (undo-tree-id43340 . -592) (undo-tree-id43341 . -592) (undo-tree-id43342 . -593) (undo-tree-id43343 . -593) (undo-tree-id43344 . -593) (undo-tree-id43345 . -593) (undo-tree-id43346 . -593) (undo-tree-id43347 . -593) (undo-tree-id43348 . -593) (undo-tree-id43349 . -593) (undo-tree-id43350 . -593) (undo-tree-id43351 . -593) (undo-tree-id43352 . -593) (undo-tree-id43353 . -593) (undo-tree-id43354 . -593) (undo-tree-id43355 . -593) (undo-tree-id43356 . -593) (undo-tree-id43357 . -593) (undo-tree-id43358 . -593) (undo-tree-id43359 . -593) (undo-tree-id43360 . -593) (undo-tree-id43361 . -593) (undo-tree-id43362 . -593) (undo-tree-id43363 . -593) (undo-tree-id43364 . -593) (undo-tree-id43365 . -593) (undo-tree-id43366 . -593) (undo-tree-id43367 . -593) (undo-tree-id43368 . -593) (undo-tree-id43369 . -593) (undo-tree-id43370 . -593) (undo-tree-id43371 . -593) (undo-tree-id43372 . -476) (4520 . 4996) (#(" model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 34 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 53 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 57 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 62 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 63 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 72 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 84 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 85 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 90 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 101 102 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 102 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 104 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 106 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 107 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 129 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 130 134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 134 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 137 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 144 172 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 172 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 173 182 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 182 188 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 188 189 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 189 211 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 211 212 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 212 219 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 219 225 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 225 226 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 226 276 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 276 277 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 277 278 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 278 280 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 280 281 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 281 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 282 304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 304 306 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 306 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 307 333 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 333 334 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 334 345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 345 346 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 346 358 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 358 378 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 378 379 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 379 417 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 417 418 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 418 419 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 419 420 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 420 422 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 422 456 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 456 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 458 461 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 461 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 462 464 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 464 473 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4637) (undo-tree-id43373 . -1) (undo-tree-id43374 . -1) (undo-tree-id43375 . -1) (undo-tree-id43376 . -1) (undo-tree-id43377 . -1) (undo-tree-id43378 . -1) (undo-tree-id43379 . -1) (undo-tree-id43380 . -1) (undo-tree-id43381 . -1) (undo-tree-id43382 . -1) (undo-tree-id43383 . -1) (undo-tree-id43384 . -1) (undo-tree-id43385 . -1) (undo-tree-id43386 . -1) (undo-tree-id43387 . -1) (undo-tree-id43388 . -1) (undo-tree-id43389 . -1) (undo-tree-id43390 . -1) (undo-tree-id43391 . -1) (undo-tree-id43392 . -1) (undo-tree-id43393 . -1) (undo-tree-id43394 . -1) (undo-tree-id43395 . -1) (undo-tree-id43396 . -1) (undo-tree-id43397 . -1) (undo-tree-id43398 . -1) (undo-tree-id43399 . -1) (undo-tree-id43400 . -1) (undo-tree-id43401 . -1) (undo-tree-id43402 . -1) (undo-tree-id43403 . -1) 4638 (t 25767 11483 30942 882000)) ((4637 . 5110) (#("- model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src

" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 35 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 54 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 54 57 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 58 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 58 63 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 63 64 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 64 73 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 85 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 85 86 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 86 91 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 91 98 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 98 99 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 99 102 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 102 103 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 103 105 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 105 107 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 107 108 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 108 130 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 130 131 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 131 135 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 135 138 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 138 144 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 144 145 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 145 173 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 173 174 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 174 183 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 183 189 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 189 190 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 190 212 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 212 213 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 213 220 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 220 226 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 226 227 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 227 277 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 277 278 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 278 279 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 279 281 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 281 282 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 282 283 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 283 305 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 305 307 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 307 308 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 308 334 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 334 335 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 335 346 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 346 347 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 347 359 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 359 379 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 379 380 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 380 418 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 418 419 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 419 420 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 420 421 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 421 423 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 423 457 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 457 458 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 458 459 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 459 462 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 462 463 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 463 465 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 465 474 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 474 475 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 475 476 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4520) (4520 . 5113) (#("- Finally, we are ready to train the model for several epochs (this may take many hours, depending on your hardware):

- model = keras.models.Sequential([keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id], dropout=0.2, recurrent_dropout=0.2), keras.layers.GRU(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation=\"softmax\"))]) model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\") history = model.fit(dataset, epochs=20)

  #+begin_src python :result outputs

  

  #+end_src" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 13 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 14 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 14 74 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 74 76 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 76 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 77 89 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 89 117 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 117 118 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 118 119 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 119 120 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 120 121 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 121 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 154 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 173 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 176 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 177 182 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 182 183 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 183 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 192 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 204 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 205 210 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 210 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 217 218 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 218 221 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 221 222 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 222 224 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 224 226 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 226 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 227 249 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 249 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 250 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 254 257 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 257 263 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 263 264 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 264 292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 292 293 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 293 302 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 302 308 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 308 309 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 309 331 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 331 332 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 332 339 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 339 345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 345 346 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 346 396 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 396 397 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 397 398 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 398 400 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 400 401 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 402 424 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 424 426 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 426 427 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 427 453 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 453 454 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 454 465 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 465 466 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 466 478 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 478 498 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 498 499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 499 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 500 537 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 537 538 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 538 539 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 539 540 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 540 542 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 542 576 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 576 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 578 581 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 581 582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 582 584 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 584 593 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 4520) (undo-tree-id43404 . 472) (undo-tree-id43405 . -120) (undo-tree-id43406 . -120) (undo-tree-id43407 . -120)) (25767 11492 231780 211000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5093 . 5094) (nil fontified nil 4677 . 5094) (4677 . 5094)) nil (25767 11508 756479 405000) 0 nil])
nil
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 4640) (undo-tree-id44360 . -1) (undo-tree-id44361 . -2) (t 25767 11508 810499 991000)) nil (25767 11538 645119 643000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 5097) (undo-tree-id44358 . -1) (undo-tree-id44359 . -2)) nil (25767 11538 645116 534000) 0 nil])
([nil nil ((5092 . 5093) 4956) nil (25767 11538 645107 909000) 0 nil])
([nil nil ((5092 . 5093) 4956) nil (25767 11538 645106 124000) 0 nil])
([nil nil ((4981 . 4983)) nil (25767 11538 645101 553000) 0 nil])
([nil nil ((5054 . 5056) (t 25767 11538 746041 57000)) nil (25767 11547 47347 626000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5056) (undo-tree-id44362 . 1) (undo-tree-id44363 . -1) (undo-tree-id44364 . -1)) nil (25767 11547 47307 144000) 0 nil])
([nil nil ((4707 . 4708) (t 25767 11547 97923 192000)) nil (25767 11574 220700 362000) 0 nil])
([nil nil ((4819 . 4820)) nil (25767 11574 220698 848000) 0 nil])
([nil nil ((4980 . 4981)) nil (25767 11574 220693 971000) 0 nil])
([nil nil ((4709 . 4710) (t 25767 11574 269569 190000)) nil (25767 11579 46315 769000) 0 nil])
([nil nil ((4727 . 4728) (t 25767 11579 93510 925000)) nil (25767 11595 722704 483000) 0 nil])
([nil nil ((4818 . 4819)) nil (25767 11595 722699 722000) 0 nil])
([nil nil ((4902 . 4903) (t 25767 11595 821319 266000)) nil (25767 11605 201911 814000) 0 nil])
([nil nil ((4840 . 4841)) nil (25767 11605 201907 344000) 0 nil])
([nil nil ((4907 . 4908) (t 25767 11605 301217 657000)) nil (25767 11629 605056 255000) 0 nil])
([nil nil ((4937 . 4938) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -4937) (undo-tree-id44365 . -1) (undo-tree-id44366 . -1) (undo-tree-id44367 . -1) (undo-tree-id44368 . -1) (undo-tree-id44369 . -1) (undo-tree-id44370 . -1) (undo-tree-id44371 . -1) (undo-tree-id44372 . -1) (undo-tree-id44373 . -1) (undo-tree-id44374 . -1) (undo-tree-id44375 . -1) (undo-tree-id44376 . -1) (undo-tree-id44377 . -1) 4938 (4937 . 4938)) nil (25767 11629 605053 386000) 0 nil])
([nil nil ((4986 . 4987)) nil (25767 11629 604951 239000) 0 nil])
([nil nil ((4990 . 4991) (t 25767 11629 704978 649000)) nil (25767 11667 913996 864000) 0 nil])
([nil nil ((#(", if needed." 0 12 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4075) (undo-tree-id44849 . -11) (undo-tree-id44850 . -12) (undo-tree-id44851 . -12)) nil (25767 11715 215143 746000) 0 nil] [nil nil ((3892 . 4034) (#("- each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout).

- We use an RNN with 2 GRU layers of 128 units" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 30 31 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 84 85 (invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 85 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 92 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 94 95 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 95 96 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 96 97 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) composition (1 1 [8226])) 97 98 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 98 99 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 99 100 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 100 101 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 101 142 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3892) (undo-tree-id44378 . 34) (undo-tree-id44379 . -111) (undo-tree-id44380 . 23) (undo-tree-id44381 . -122) (undo-tree-id44382 . -142) (undo-tree-id44384 . -142) (undo-tree-id44386 . -142) (undo-tree-id44388 . -142) (undo-tree-id44390 . -142) (undo-tree-id44392 . -142) (undo-tree-id44394 . -142) (undo-tree-id44396 . -142) (undo-tree-id44398 . -142) (undo-tree-id44400 . -142) (undo-tree-id44402 . -142) (undo-tree-id44404 . -142) (undo-tree-id44406 . -142) (undo-tree-id44408 . -142) (undo-tree-id44410 . -99) (undo-tree-id44412 . -99) (undo-tree-id44414 . -99) (undo-tree-id44416 . -99) (undo-tree-id44418 . -99) (undo-tree-id44420 . -99) (undo-tree-id44422 . -99) (undo-tree-id44424 . -99) (undo-tree-id44426 . -99) (undo-tree-id44428 . -99) (undo-tree-id44430 . -99) (undo-tree-id44432 . -103) (undo-tree-id44434 . -103) (undo-tree-id44436 . -103) (undo-tree-id44438 . -103) (undo-tree-id44440 . -103) (undo-tree-id44442 . -103) (undo-tree-id44444 . -103) (undo-tree-id44446 . -103) (undo-tree-id44448 . -126) (undo-tree-id44450 . -126) (undo-tree-id44452 . -126) (undo-tree-id44454 . -126) (undo-tree-id44456 . -126) (undo-tree-id44458 . -126) (undo-tree-id44460 . -126) (undo-tree-id44462 . -126) (undo-tree-id44464 . -142) (undo-tree-id44466 . -142) (undo-tree-id44468 . -142) (undo-tree-id44470 . -142) (undo-tree-id44472 . -142) (undo-tree-id44474 . -142) (undo-tree-id44476 . -142) (undo-tree-id44478 . -142) (undo-tree-id44480 . -142) (undo-tree-id44482 . -142) (undo-tree-id44484 . -142) (undo-tree-id44486 . -142) (undo-tree-id44488 . -142) (undo-tree-id44490 . -142) (undo-tree-id44492 . -142) (undo-tree-id44494 . -142) (undo-tree-id44496 . -142) (undo-tree-id44498 . -142) (undo-tree-id44500 . -142) (undo-tree-id44502 . -142) (3892 . 3988) (#(" each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout)." 0 29 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 29 30 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 30 83 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 84 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) invisible t) 84 91 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 91 93 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3938) (undo-tree-id44504 . -1) (undo-tree-id44506 . -73) (undo-tree-id44508 . -73) (undo-tree-id44510 . -73) (undo-tree-id44512 . -73) (undo-tree-id44514 . -73) (undo-tree-id44516 . -14) (undo-tree-id44518 . -14) (undo-tree-id44520 . -14) (undo-tree-id44522 . -14) (undo-tree-id44524 . -14) (undo-tree-id44526 . -14) (undo-tree-id44528 . -14) (undo-tree-id44530 . -14) (undo-tree-id44532 . -1) (undo-tree-id44534 . -1) (undo-tree-id44536 . -1) (undo-tree-id44538 . -1) (undo-tree-id44540 . -1) (undo-tree-id44542 . -1) (undo-tree-id44544 . -1) (undo-tree-id44546 . -1) (undo-tree-id44548 . -1) (undo-tree-id44550 . -1) (undo-tree-id44552 . -1) (undo-tree-id44554 . -1) (undo-tree-id44556 . -1) (undo-tree-id44558 . -1) (undo-tree-id44560 . -1) (undo-tree-id44562 . -1) (undo-tree-id44564 . -1) (undo-tree-id44566 . -1) (undo-tree-id44568 . -1) (undo-tree-id44570 . -1) 3939 (t 25767 11635 724924 561000)) ((3938 . 4031) (#("- each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout).

" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 30 31 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 84 85 (invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 85 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 92 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 94 95 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 95 96 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3892) (3892 . 4034) (#("- We use an RNN with 2 GRU layers of 128 units

- each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout)." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 46 47 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 47 48 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 48 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 49 50 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 50 51 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 51 78 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 78 79 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 79 132 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 132 133 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) invisible t) 133 140 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 140 142 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3892) (undo-tree-id44573 . -50) (undo-tree-id44574 . -50) (undo-tree-id44575 . -50) (undo-tree-id44576 . -50) (undo-tree-id44577 . 91) (undo-tree-id44578 . 91) (undo-tree-id44579 . 130) (undo-tree-id44580 . -15) (undo-tree-id44581 . 119) (undo-tree-id44582 . -26) (undo-tree-id44583 . -49) (undo-tree-id44584 . -50) (undo-tree-id44585 . -57) (undo-tree-id44586 . -50) (undo-tree-id44587 . -50) (undo-tree-id44588 . -50) (undo-tree-id44589 . -50) (undo-tree-id44590 . -50) (undo-tree-id44591 . -50) (undo-tree-id44592 . -50) (undo-tree-id44593 . -50) (undo-tree-id44594 . -50) (undo-tree-id44595 . -50) (undo-tree-id44596 . -50) (undo-tree-id44597 . -50) (undo-tree-id44598 . -50) (undo-tree-id44599 . -50) (undo-tree-id44600 . -50) (undo-tree-id44601 . -50) (undo-tree-id44602 . -50) (undo-tree-id44603 . -50) (undo-tree-id44604 . -50) (undo-tree-id44605 . -50) (undo-tree-id44606 . -50) (undo-tree-id44607 . -50) (undo-tree-id44608 . -50) (undo-tree-id44609 . -50) (t 25767 11662 356707 563000)) (25767 11667 192074 511000) 0 nil])
([nil nil ((4075 . 4076)) nil (25767 11715 215140 550000) 0 nil])
([nil nil ((3942 . 3943) (#("e" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3942) (t 25767 11662 356707 563000)) ((3942 . 3943) (#("E" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3942) (undo-tree-id44572 . 1)) (25767 11667 191491 129000) 0 nil])
([nil nil ((4078 . 4174) (#("- This time this layer must have 39 units

- The output layer is a time-distributed Dense layer." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky t) 22 23 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 41 42 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 43 44 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 44 45 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 45 72 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 96 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4078) (undo-tree-id44610 . -96) (undo-tree-id44611 . -45) (undo-tree-id44612 . -45) (undo-tree-id44613 . -45) (undo-tree-id44614 . -45) (undo-tree-id44615 . -45) (undo-tree-id44616 . -45) (undo-tree-id44617 . -45) (undo-tree-id44618 . -45) (undo-tree-id44619 . -45) (undo-tree-id44620 . -45) (undo-tree-id44621 . -45) (undo-tree-id44622 . -49) (undo-tree-id44623 . -49) (undo-tree-id44624 . -49) (undo-tree-id44625 . -49) (undo-tree-id44626 . -49) (undo-tree-id44627 . -49) (undo-tree-id44628 . -49) (undo-tree-id44629 . -49) (undo-tree-id44630 . -49) (undo-tree-id44631 . -49) (undo-tree-id44632 . -49) (undo-tree-id44633 . -49) (undo-tree-id44634 . -49) (undo-tree-id44635 . -49) (undo-tree-id44636 . -49) (undo-tree-id44637 . -49) (undo-tree-id44638 . -56) (undo-tree-id44639 . -56) (undo-tree-id44640 . -56) (undo-tree-id44641 . -56) (undo-tree-id44642 . -56) (undo-tree-id44643 . -56) (undo-tree-id44644 . -56) (undo-tree-id44645 . -56) (undo-tree-id44646 . -56) (undo-tree-id44647 . -56) (undo-tree-id44648 . -56) (undo-tree-id44649 . -62) (undo-tree-id44650 . -62) (undo-tree-id44651 . -62) (undo-tree-id44652 . -62) (undo-tree-id44653 . -62) (undo-tree-id44654 . -62) (undo-tree-id44655 . -62) (undo-tree-id44656 . -62) (undo-tree-id44657 . -62) (undo-tree-id44658 . -62) (undo-tree-id44659 . -62) (undo-tree-id44660 . -65) (undo-tree-id44661 . -65) (undo-tree-id44662 . -65) (undo-tree-id44663 . -65) (undo-tree-id44664 . -65) (undo-tree-id44665 . -65) (undo-tree-id44666 . -65) (undo-tree-id44667 . -65) (undo-tree-id44668 . -65) (undo-tree-id44669 . -65) (undo-tree-id44670 . -65) (undo-tree-id44671 . -65) (undo-tree-id44672 . -65) (undo-tree-id44673 . -65) (undo-tree-id44674 . -65) (undo-tree-id44675 . -65) (undo-tree-id44676 . -67) (undo-tree-id44677 . -67) (undo-tree-id44678 . -67) (undo-tree-id44679 . -67) (undo-tree-id44680 . -67) (undo-tree-id44681 . -67) (undo-tree-id44682 . -67) (undo-tree-id44683 . -67) (undo-tree-id44684 . -67) (undo-tree-id44685 . -67) (undo-tree-id44686 . -67) (undo-tree-id44687 . -71) (undo-tree-id44688 . -71) (undo-tree-id44689 . -71) (undo-tree-id44690 . -71) (undo-tree-id44691 . -71) (undo-tree-id44692 . -71) (undo-tree-id44693 . -71) (undo-tree-id44694 . -71) (undo-tree-id44695 . -71) (undo-tree-id44696 . -71) (undo-tree-id44697 . -71) (undo-tree-id44698 . -72) (undo-tree-id44699 . -72) (undo-tree-id44700 . -72) (undo-tree-id44701 . -72) (undo-tree-id44702 . -72) (undo-tree-id44703 . -72) (undo-tree-id44704 . -72) (undo-tree-id44705 . -72) (undo-tree-id44706 . -72) (undo-tree-id44707 . -72) (undo-tree-id44708 . -72) (undo-tree-id44709 . -84) (undo-tree-id44710 . -84) (undo-tree-id44711 . -84) (undo-tree-id44712 . -84) (undo-tree-id44713 . -84) (undo-tree-id44714 . -84) (undo-tree-id44715 . -84) (undo-tree-id44716 . -84) (undo-tree-id44717 . -84) (undo-tree-id44718 . -84) (undo-tree-id44719 . -84) (undo-tree-id44720 . -90) (undo-tree-id44721 . -90) (undo-tree-id44722 . -90) (undo-tree-id44723 . -90) (undo-tree-id44724 . -90) (undo-tree-id44725 . -90) (undo-tree-id44726 . -90) (undo-tree-id44727 . -90) (undo-tree-id44728 . -90) (undo-tree-id44729 . -90) (undo-tree-id44730 . -90) (undo-tree-id44731 . -95) (undo-tree-id44732 . -95) (undo-tree-id44733 . -95) (undo-tree-id44734 . -95) (undo-tree-id44735 . -95) (undo-tree-id44736 . -95) (undo-tree-id44737 . -95) (undo-tree-id44738 . -95) (undo-tree-id44739 . -95) (undo-tree-id44740 . -95) (undo-tree-id44741 . -95) (undo-tree-id44742 . -95) (undo-tree-id44743 . -95) (undo-tree-id44744 . -95) (undo-tree-id44745 . -95) (undo-tree-id44746 . -95) (undo-tree-id44747 . -96) (undo-tree-id44748 . -96) (undo-tree-id44749 . -96) (undo-tree-id44750 . -96) (undo-tree-id44751 . -96) (undo-tree-id44752 . -96) (undo-tree-id44753 . -96) (undo-tree-id44754 . -96) (undo-tree-id44755 . -96) (undo-tree-id44756 . -96) (undo-tree-id44757 . -96) (undo-tree-id44758 . -96) (undo-tree-id44759 . -96) (undo-tree-id44760 . -96) (undo-tree-id44761 . -96) (undo-tree-id44762 . -96) (undo-tree-id44763 . -96) (undo-tree-id44764 . -96) (undo-tree-id44765 . -96) (undo-tree-id44766 . -96) (undo-tree-id44767 . -96) (undo-tree-id44768 . -96) (undo-tree-id44769 . -96) (undo-tree-id44770 . -96) (undo-tree-id44771 . -96) (undo-tree-id44772 . -96) (undo-tree-id44773 . -96) (undo-tree-id44774 . -96) (undo-tree-id44775 . -96) (undo-tree-id44776 . -96) (undo-tree-id44777 . -96) (undo-tree-id44778 . -96) (undo-tree-id44779 . -96) (undo-tree-id44780 . -96) (undo-tree-id44781 . -96) (undo-tree-id44782 . -96) (undo-tree-id44783 . -96) (undo-tree-id44784 . -96) (undo-tree-id44785 . -96) (undo-tree-id44786 . -96) (undo-tree-id44787 . -96) (undo-tree-id44788 . -96) (undo-tree-id44789 . -96) (undo-tree-id44790 . -96) (undo-tree-id44791 . -96) (undo-tree-id44792 . -96) (undo-tree-id44793 . -96) (undo-tree-id44794 . -96) (undo-tree-id44795 . -96) (undo-tree-id44796 . -96) (undo-tree-id44797 . -43) (4078 . 4121) (#(" This time this layer must have 39 units" 0 20 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 20 21 (rear-nonsticky t fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 22 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 22 40 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4131) (undo-tree-id44798 . -1) (undo-tree-id44799 . -1) (undo-tree-id44800 . -1) (undo-tree-id44801 . -1) (undo-tree-id44802 . -1) (undo-tree-id44803 . -1) (undo-tree-id44804 . -1) (undo-tree-id44805 . -1) (undo-tree-id44806 . -1) (undo-tree-id44807 . -1) (undo-tree-id44808 . -1) (undo-tree-id44809 . -1) (undo-tree-id44810 . -1) (undo-tree-id44811 . -1) (undo-tree-id44812 . -1) (undo-tree-id44813 . -1) (undo-tree-id44814 . -1) (undo-tree-id44815 . -1) (undo-tree-id44816 . -1) (undo-tree-id44817 . -1) (undo-tree-id44818 . -1) (undo-tree-id44819 . -1) (undo-tree-id44820 . -1) (undo-tree-id44821 . -1) (undo-tree-id44822 . -1) (undo-tree-id44823 . -1) (undo-tree-id44824 . -1) (undo-tree-id44825 . -1) (undo-tree-id44826 . -1) (undo-tree-id44827 . -1) (undo-tree-id44828 . -1) (undo-tree-id44829 . -1) (undo-tree-id44830 . -1) (undo-tree-id44831 . -1) (undo-tree-id44832 . -1) (undo-tree-id44833 . -1) (undo-tree-id44834 . -1) (undo-tree-id44835 . -1) (undo-tree-id44836 . -1) (undo-tree-id44837 . -1) (undo-tree-id44838 . -1) (undo-tree-id44839 . -1) (undo-tree-id44840 . -1) (undo-tree-id44841 . -1) (undo-tree-id44842 . -1) (undo-tree-id44843 . -1) (undo-tree-id44844 . -1) (undo-tree-id44845 . -1) (undo-tree-id44846 . -1) (undo-tree-id44847 . -1) (undo-tree-id44848 . -1) 4132) nil (25767 11715 215128 455000) 0 nil])
nil
([nil nil ((#("(this may take many hours, depending on your hardware)" 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 12 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 15 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 27 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4574) (undo-tree-id44915 . -53) (undo-tree-id44916 . -1) (undo-tree-id44917 . -1) (undo-tree-id44918 . -1) (undo-tree-id44919 . -1) (undo-tree-id44920 . -1) (undo-tree-id44921 . -1) (undo-tree-id44922 . -1) (undo-tree-id44923 . -1) (undo-tree-id44924 . -1) (undo-tree-id44925 . -1) (undo-tree-id44926 . -1) (undo-tree-id44927 . -1) (undo-tree-id44928 . -1) (undo-tree-id44929 . -1) (undo-tree-id44930 . -1) (undo-tree-id44931 . -1) (undo-tree-id44932 . -1) (undo-tree-id44933 . -1) (undo-tree-id44934 . -1) (undo-tree-id44935 . -1) (undo-tree-id44936 . -1) (undo-tree-id44937 . -1) (undo-tree-id44938 . -1) (undo-tree-id44939 . -1) (undo-tree-id44940 . -1) (undo-tree-id44941 . -1) (undo-tree-id44942 . -1) (undo-tree-id44943 . -1) (undo-tree-id44944 . -1) (undo-tree-id44945 . -1) (undo-tree-id44946 . -1) (undo-tree-id44947 . -1) (undo-tree-id44948 . -1) (undo-tree-id44949 . -1) (undo-tree-id44950 . -1) (undo-tree-id44951 . -1) (undo-tree-id44952 . -1) (undo-tree-id44953 . -1) (undo-tree-id44954 . -1) (undo-tree-id44955 . -1) (undo-tree-id44956 . -1) (undo-tree-id44957 . -1) (undo-tree-id44958 . -1) (undo-tree-id44959 . -1) (undo-tree-id44960 . -1) (undo-tree-id44961 . -1) (undo-tree-id44962 . -1) (undo-tree-id44963 . -1) (undo-tree-id44964 . -1) (undo-tree-id44965 . -1) (undo-tree-id44966 . -1) (undo-tree-id44967 . -1) (undo-tree-id44968 . -1) (undo-tree-id44969 . -1) (undo-tree-id44970 . -1) (undo-tree-id44971 . -54) 4575 (t 25767 11715 316378 194000)) nil (25767 11751 71215 423000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4573) (undo-tree-id44852 . -1) (undo-tree-id44853 . -1) (undo-tree-id44854 . -1) (undo-tree-id44855 . -1) (undo-tree-id44856 . -1) (undo-tree-id44857 . -1) (undo-tree-id44858 . -1) (undo-tree-id44859 . -1) (undo-tree-id44860 . -1) (undo-tree-id44861 . -1) (undo-tree-id44862 . -1) (undo-tree-id44863 . -1) (undo-tree-id44864 . -1) (undo-tree-id44865 . -1) (undo-tree-id44866 . -1) (undo-tree-id44867 . -1) (undo-tree-id44868 . -1) (undo-tree-id44869 . -1) (undo-tree-id44870 . -1) (undo-tree-id44871 . -1) (undo-tree-id44872 . -1) (undo-tree-id44873 . -1) (undo-tree-id44874 . -1) (undo-tree-id44875 . -1) (undo-tree-id44876 . -1) (undo-tree-id44877 . -1) (undo-tree-id44878 . -1) (undo-tree-id44879 . -1) (undo-tree-id44880 . -1) (undo-tree-id44881 . -1) (undo-tree-id44882 . -1) (undo-tree-id44883 . -1) (undo-tree-id44884 . -1) (undo-tree-id44885 . -1) (undo-tree-id44886 . -1) (undo-tree-id44887 . -1) (undo-tree-id44888 . -1) (undo-tree-id44889 . -1) (undo-tree-id44890 . -1) (undo-tree-id44891 . -1) (undo-tree-id44892 . -1) (undo-tree-id44893 . -1) (undo-tree-id44894 . -1) (undo-tree-id44895 . -1) (undo-tree-id44896 . -1) (undo-tree-id44897 . -1) (undo-tree-id44898 . -1) (undo-tree-id44899 . -1) (undo-tree-id44900 . -1) (undo-tree-id44901 . -1) (undo-tree-id44902 . -1) (undo-tree-id44903 . -1) (undo-tree-id44904 . -1) (undo-tree-id44905 . -1) (undo-tree-id44906 . -1) (undo-tree-id44907 . -1) (undo-tree-id44908 . -1) (undo-tree-id44909 . -1) (undo-tree-id44910 . -1) (undo-tree-id44911 . -1) (undo-tree-id44912 . -1) (undo-tree-id44913 . -1) (undo-tree-id44914 . -1)) nil (25767 11751 71165 404000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4573) (undo-tree-id44972 . -1) (undo-tree-id44973 . -1) (undo-tree-id44974 . -1) (t 25767 11751 128226 950000)) nil (25767 11753 928188 82000) 0 nil])
([nil nil ((3894 . 3895) (#("x" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3894) (undo-tree-id44975 . -1) (undo-tree-id44976 . -1) (undo-tree-id44977 . -1) (undo-tree-id44978 . -1) (undo-tree-id44979 . -1) (undo-tree-id44980 . -1) (undo-tree-id44981 . -1) (undo-tree-id44982 . -1) (undo-tree-id44983 . -1) (undo-tree-id44984 . -1) (undo-tree-id44985 . -1) (undo-tree-id44986 . -1) (undo-tree-id44987 . -1) (undo-tree-id44988 . -1) (undo-tree-id44989 . -1) (undo-tree-id44990 . -1) (undo-tree-id44991 . -1) (undo-tree-id44992 . -1) 3895 (3894 . 3895) (#("We u" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 3 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3894) (undo-tree-id44993 . -3) (undo-tree-id44994 . -3) (undo-tree-id44995 . -3) (undo-tree-id44996 . -4) (undo-tree-id44997 . -3) (undo-tree-id44998 . -1) (undo-tree-id44999 . -1) (undo-tree-id45000 . -1) (undo-tree-id45001 . -1) (undo-tree-id45002 . -1) (undo-tree-id45003 . -1) (undo-tree-id45004 . -1) (undo-tree-id45005 . -1) (undo-tree-id45006 . -1) (undo-tree-id45007 . -1) (undo-tree-id45008 . -1) (undo-tree-id45009 . -1) (undo-tree-id45010 . -1) (undo-tree-id45011 . -1) (undo-tree-id45012 . -1) (undo-tree-id45013 . -1) (undo-tree-id45014 . -4) (undo-tree-id45015 . -4) (undo-tree-id45016 . -4) (undo-tree-id45017 . -4) (undo-tree-id45018 . -4) (undo-tree-id45019 . -4) (undo-tree-id45020 . -4) (undo-tree-id45021 . -4) (undo-tree-id45022 . -4) (undo-tree-id45023 . -4) (undo-tree-id45024 . -4) (undo-tree-id45025 . -4) (undo-tree-id45026 . -4) (undo-tree-id45027 . -4) (undo-tree-id45028 . -4) (undo-tree-id45029 . -4) (undo-tree-id45030 . -3) (undo-tree-id45031 . -3) (undo-tree-id45032 . -3) (undo-tree-id45033 . -3) (undo-tree-id45034 . -3) (undo-tree-id45035 . -3) (undo-tree-id45036 . -3) (undo-tree-id45037 . -3) (undo-tree-id45038 . -3) (undo-tree-id45039 . -3) (undo-tree-id45040 . -3) (undo-tree-id45041 . -3) (undo-tree-id45042 . -3) (undo-tree-id45043 . -3) (undo-tree-id45044 . -3) (undo-tree-id45045 . -3) (undo-tree-id45046 . -3) (undo-tree-id45047 . -4) (undo-tree-id45048 . -4) (undo-tree-id45049 . -4) 3897 (t 25767 11753 984217 225000)) nil (25767 11766 907731 166000) 0 nil])
([nil nil ((4404 . 4405) (#("We can then c" 0 13 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4404) (undo-tree-id45050 . -12) (undo-tree-id45051 . -12) (undo-tree-id45052 . -12) (undo-tree-id45053 . -13) (undo-tree-id45054 . -12) (undo-tree-id45055 . -1) (undo-tree-id45056 . -1) (undo-tree-id45057 . -1) (undo-tree-id45058 . -1) (undo-tree-id45059 . -1) (undo-tree-id45060 . -1) (undo-tree-id45061 . -1) (undo-tree-id45062 . -1) (undo-tree-id45063 . -1) (undo-tree-id45064 . -1) (undo-tree-id45065 . -1) (undo-tree-id45066 . -1) (undo-tree-id45067 . -1) (undo-tree-id45068 . -1) (undo-tree-id45069 . -1) (undo-tree-id45070 . -1) (undo-tree-id45071 . -5) (undo-tree-id45072 . -5) (undo-tree-id45073 . -5) (undo-tree-id45074 . -5) (undo-tree-id45075 . -5) (undo-tree-id45076 . -5) (undo-tree-id45077 . -5) (undo-tree-id45078 . -5) (undo-tree-id45079 . -5) (undo-tree-id45080 . -5) (undo-tree-id45081 . -5) (undo-tree-id45082 . -5) (undo-tree-id45083 . -5) (undo-tree-id45084 . -5) (undo-tree-id45085 . -5) (undo-tree-id45086 . -5) (undo-tree-id45087 . -10) (undo-tree-id45088 . -10) (undo-tree-id45089 . -10) (undo-tree-id45090 . -10) (undo-tree-id45091 . -10) (undo-tree-id45092 . -10) (undo-tree-id45093 . -10) (undo-tree-id45094 . -10) (undo-tree-id45095 . -10) (undo-tree-id45096 . -10) (undo-tree-id45097 . -10) (undo-tree-id45098 . -10) (undo-tree-id45099 . -10) (undo-tree-id45100 . -10) (undo-tree-id45101 . -10) (undo-tree-id45102 . -10) (undo-tree-id45103 . -13) (undo-tree-id45104 . -13) (undo-tree-id45105 . -13) (undo-tree-id45106 . -13) (undo-tree-id45107 . -13) (undo-tree-id45108 . -13) (undo-tree-id45109 . -13) (undo-tree-id45110 . -13) (undo-tree-id45111 . -13) (undo-tree-id45112 . -13) (undo-tree-id45113 . -13) (undo-tree-id45114 . -13) (undo-tree-id45115 . -13) (undo-tree-id45116 . -13) (undo-tree-id45117 . -13) (undo-tree-id45118 . -13) (undo-tree-id45119 . -12) (undo-tree-id45120 . -12) (undo-tree-id45121 . -12) (undo-tree-id45122 . -12) (undo-tree-id45123 . -12) (undo-tree-id45124 . -12) (undo-tree-id45125 . -12) (undo-tree-id45126 . -12) (undo-tree-id45127 . -12) (undo-tree-id45128 . -12) (undo-tree-id45129 . -12) (undo-tree-id45130 . -12) (undo-tree-id45131 . -12) (undo-tree-id45132 . -12) (undo-tree-id45133 . -12) (undo-tree-id45134 . -12) (undo-tree-id45135 . -12) (undo-tree-id45136 . -13) (undo-tree-id45137 . -13) (undo-tree-id45138 . -13) 4416 (t 25767 11766 968177 231000)) nil (25767 11820 668136 879000) 0 nil])
([nil nil ((#("Finally, we are ready to " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 12 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4499) (undo-tree-id45139 . -24) (undo-tree-id45140 . -24) (undo-tree-id45141 . -24) (undo-tree-id45142 . -6) (undo-tree-id45143 . -6) (undo-tree-id45144 . -6) (undo-tree-id45145 . -6) (undo-tree-id45146 . -6) (undo-tree-id45147 . -6) (undo-tree-id45148 . -25) (undo-tree-id45149 . -24) (undo-tree-id45150 . -6) (undo-tree-id45151 . -6) (undo-tree-id45152 . -6) (undo-tree-id45153 . -6) (undo-tree-id45154 . -6) (undo-tree-id45155 . -6) (undo-tree-id45156 . -7) (undo-tree-id45157 . -7) (undo-tree-id45158 . -7) (undo-tree-id45159 . -7) (undo-tree-id45160 . -7) (undo-tree-id45161 . -7) (undo-tree-id45162 . -10) (undo-tree-id45163 . -10) (undo-tree-id45164 . -10) (undo-tree-id45165 . -10) (undo-tree-id45166 . -10) (undo-tree-id45167 . -10) (undo-tree-id45168 . -14) (undo-tree-id45169 . -14) (undo-tree-id45170 . -14) (undo-tree-id45171 . -14) (undo-tree-id45172 . -14) (undo-tree-id45173 . -14) (undo-tree-id45174 . -20) (undo-tree-id45175 . -20) (undo-tree-id45176 . -20) (undo-tree-id45177 . -20) (undo-tree-id45178 . -20) (undo-tree-id45179 . -20) (undo-tree-id45180 . -23) (undo-tree-id45181 . -23) (undo-tree-id45182 . -23) (undo-tree-id45183 . -23) (undo-tree-id45184 . -23) (undo-tree-id45185 . -23) (undo-tree-id45186 . -24) (undo-tree-id45187 . -24) (undo-tree-id45188 . -24) (undo-tree-id45189 . -24) (undo-tree-id45190 . -24) (undo-tree-id45191 . -24) (undo-tree-id45192 . -24) (undo-tree-id45193 . -25) 4523 (t 25767 11820 720081 849000)) nil (25767 11834 32104 878000) 0 nil])
([nil nil ((4499 . 4500) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 4499)) nil (25767 11834 32054 142000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3848) (undo-tree-id45194 . -1) (t 25767 11834 88074 789000)) nil (25767 11851 410359 141000) 0 nil])
([nil nil ((3891 . 4030) (#("- of 128 units each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout).

- Use an RNN with 2 GRU layers" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 14 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 43 44 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 44 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 97 98 (invisible t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 98 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 105 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 107 108 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 108 109 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 109 110 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) composition (1 1 [8226])) 110 112 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 112 139 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3891) (undo-tree-id45257 . 1) (undo-tree-id45258 . -111) (undo-tree-id45259 . -111) (undo-tree-id45260 . -111) (undo-tree-id45261 . -111) (undo-tree-id45262 . -111) (undo-tree-id45263 . -111) (undo-tree-id45264 . -111) (undo-tree-id45265 . -111) (undo-tree-id45266 . -111) (undo-tree-id45267 . -111) (undo-tree-id45268 . -111) (undo-tree-id45269 . -111) (undo-tree-id45270 . -111) (undo-tree-id45271 . -111) (undo-tree-id45272 . -111) (undo-tree-id45273 . -111) (undo-tree-id45274 . -111) (undo-tree-id45275 . -111) (undo-tree-id45276 . -111) (undo-tree-id45277 . -111) (undo-tree-id45278 . -111) (undo-tree-id45279 . -111) (undo-tree-id45280 . -111) (undo-tree-id45281 . -111) (undo-tree-id45282 . -111) (undo-tree-id45283 . -111) (undo-tree-id45284 . -111) (undo-tree-id45285 . -111) (undo-tree-id45286 . -111) (undo-tree-id45287 . -111) (undo-tree-id45288 . -111) (undo-tree-id45289 . -111) (undo-tree-id45290 . -111) (undo-tree-id45291 . -111) (undo-tree-id45292 . -111) (undo-tree-id45293 . -111) (undo-tree-id45294 . -111) (undo-tree-id45295 . -111) (undo-tree-id45296 . -139) (undo-tree-id45297 . -111) (undo-tree-id45298 . -111) (undo-tree-id45299 . -111) (undo-tree-id45300 . -111) (undo-tree-id45301 . -111) (undo-tree-id45302 . -111) (undo-tree-id45303 . -111) (undo-tree-id45304 . -111) (undo-tree-id45305 . -111) (undo-tree-id45306 . -111) (undo-tree-id45307 . -111) (undo-tree-id45308 . -111) (undo-tree-id45309 . -111) (undo-tree-id45310 . -111) (undo-tree-id45311 . -111) (undo-tree-id45312 . -111) (undo-tree-id45313 . -111) (undo-tree-id45314 . -111) (undo-tree-id45315 . -111) (undo-tree-id45316 . -111) (undo-tree-id45317 . -111) (undo-tree-id45318 . -111) (undo-tree-id45319 . -111) (undo-tree-id45320 . -111) (undo-tree-id45321 . -111) (undo-tree-id45322 . -111) (undo-tree-id45323 . -111) (undo-tree-id45324 . -111) (undo-tree-id45325 . -111) (undo-tree-id45326 . -111) (undo-tree-id45327 . -111) (undo-tree-id45328 . -111) (undo-tree-id45329 . -111) (undo-tree-id45330 . -111) (undo-tree-id45331 . -111) (undo-tree-id45332 . -111) (undo-tree-id45333 . -111) (undo-tree-id45334 . -111) (undo-tree-id45335 . -111) (undo-tree-id45336 . -111) (undo-tree-id45337 . -111) (undo-tree-id45338 . -111) (undo-tree-id45339 . -111) (undo-tree-id45340 . -111) (undo-tree-id45341 . -111) (undo-tree-id45342 . -111) (undo-tree-id45343 . -111) (undo-tree-id45344 . -111) (undo-tree-id45345 . -139) (undo-tree-id45346 . -139) (undo-tree-id45347 . -139) (undo-tree-id45348 . -139) (undo-tree-id45349 . -139) (undo-tree-id45350 . -139) (undo-tree-id45351 . -139) (undo-tree-id45352 . -139) (undo-tree-id45353 . -139) (undo-tree-id45354 . -139) (undo-tree-id45355 . -139) (undo-tree-id45356 . -139) (undo-tree-id45357 . -139) (undo-tree-id45358 . -139) (undo-tree-id45359 . -139) (undo-tree-id45360 . -139) (undo-tree-id45361 . -139) (undo-tree-id45362 . -139) (undo-tree-id45363 . -139) (undo-tree-id45364 . -139) (undo-tree-id45365 . -139) (undo-tree-id45366 . -139) (undo-tree-id45367 . -139) (undo-tree-id45368 . -139) (undo-tree-id45369 . -111) (undo-tree-id45370 . -111) (undo-tree-id45371 . -111) (undo-tree-id45372 . -111) (undo-tree-id45373 . -111) (undo-tree-id45374 . -111) (undo-tree-id45375 . -111) (undo-tree-id45376 . -111) (undo-tree-id45377 . -111) (undo-tree-id45378 . -111) (undo-tree-id45379 . -111) (undo-tree-id45380 . -111) (undo-tree-id45381 . -111) (undo-tree-id45382 . -111) (undo-tree-id45383 . -111) (undo-tree-id45384 . -111) (undo-tree-id45385 . -111) (undo-tree-id45386 . -111) (undo-tree-id45387 . -111) (undo-tree-id45388 . -111) (undo-tree-id45389 . -111) (undo-tree-id45390 . -111) (undo-tree-id45391 . -111) (undo-tree-id45392 . -111) (undo-tree-id45393 . -111) (undo-tree-id45394 . -111) (undo-tree-id45395 . -113) (undo-tree-id45396 . -113) (undo-tree-id45397 . -113) (undo-tree-id45398 . -113) (undo-tree-id45399 . -113) (undo-tree-id45400 . -113) (undo-tree-id45401 . -113) (undo-tree-id45402 . -113) (undo-tree-id45403 . -113) (undo-tree-id45404 . -113) (undo-tree-id45405 . -113) (undo-tree-id45406 . -116) (undo-tree-id45407 . -116) (undo-tree-id45408 . -116) (undo-tree-id45409 . -116) (undo-tree-id45410 . -116) (undo-tree-id45411 . -116) (undo-tree-id45412 . -116) (undo-tree-id45413 . -116) (undo-tree-id45414 . -116) (undo-tree-id45415 . -116) (undo-tree-id45416 . -116) (undo-tree-id45417 . 21) (undo-tree-id45418 . -121) (undo-tree-id45419 . -120) (undo-tree-id45420 . -120) (undo-tree-id45421 . -120) (undo-tree-id45422 . -120) (undo-tree-id45423 . -120) (undo-tree-id45424 . -120) (undo-tree-id45425 . -120) (undo-tree-id45426 . -120) (undo-tree-id45427 . -120) (undo-tree-id45428 . -120) (undo-tree-id45429 . -120) (undo-tree-id45430 . -125) (undo-tree-id45431 . -125) (undo-tree-id45432 . -125) (undo-tree-id45433 . -125) (undo-tree-id45434 . -125) (undo-tree-id45435 . -125) (undo-tree-id45436 . -125) (undo-tree-id45437 . -125) (undo-tree-id45438 . -125) (undo-tree-id45439 . -125) (undo-tree-id45440 . -125) (undo-tree-id45441 . -127) (undo-tree-id45442 . -127) (undo-tree-id45443 . -127) (undo-tree-id45444 . -127) (undo-tree-id45445 . -127) (undo-tree-id45446 . -127) (undo-tree-id45447 . -127) (undo-tree-id45448 . -127) (undo-tree-id45449 . -127) (undo-tree-id45450 . -127) (undo-tree-id45451 . -127) (undo-tree-id45452 . 10) (undo-tree-id45453 . -132) (undo-tree-id45454 . -131) (undo-tree-id45455 . -131) (undo-tree-id45456 . -131) (undo-tree-id45457 . -131) (undo-tree-id45458 . -131) (undo-tree-id45459 . -131) (undo-tree-id45460 . -131) (undo-tree-id45461 . -131) (undo-tree-id45462 . -131) (undo-tree-id45463 . -131) (undo-tree-id45464 . -131) (undo-tree-id45465 . -138) (undo-tree-id45466 . -138) (undo-tree-id45467 . -138) (undo-tree-id45468 . -138) (undo-tree-id45469 . -138) (undo-tree-id45470 . -138) (undo-tree-id45471 . -138) (undo-tree-id45472 . -138) (undo-tree-id45473 . -138) (undo-tree-id45474 . -138) (undo-tree-id45475 . -138) (undo-tree-id45476 . -139) (undo-tree-id45477 . -139) (undo-tree-id45478 . -139) (undo-tree-id45479 . -139) (undo-tree-id45480 . -139) (undo-tree-id45481 . -139) (undo-tree-id45482 . -139) (undo-tree-id45483 . -139) (undo-tree-id45484 . -139) (undo-tree-id45485 . -139) (undo-tree-id45486 . -139) (undo-tree-id45487 . -139) (undo-tree-id45488 . -139) (undo-tree-id45489 . -139) (undo-tree-id45490 . -139) (undo-tree-id45491 . -139) (undo-tree-id45492 . -139) (undo-tree-id45493 . -139) (undo-tree-id45494 . -139) (undo-tree-id45495 . -139) (undo-tree-id45496 . -139) (undo-tree-id45497 . -139) (undo-tree-id45498 . -139) (undo-tree-id45499 . -139) (undo-tree-id45500 . -139) (undo-tree-id45501 . -139) (undo-tree-id45502 . -139) (undo-tree-id45503 . -139) (undo-tree-id45504 . -139) (undo-tree-id45505 . -139) (undo-tree-id45506 . -139) (undo-tree-id45507 . -139) (undo-tree-id45508 . -133) (undo-tree-id45509 . -133) (undo-tree-id45510 . -133) (undo-tree-id45511 . -133) (undo-tree-id45512 . -133) (undo-tree-id45513 . -133) (undo-tree-id45514 . -133) (undo-tree-id45515 . -133) (undo-tree-id45516 . -133) (undo-tree-id45517 . -133) (undo-tree-id45518 . -133) (undo-tree-id45519 . -133) (undo-tree-id45520 . -133) (undo-tree-id45521 . -133) (undo-tree-id45522 . -133) (undo-tree-id45523 . -133) (undo-tree-id45524 . -138) (undo-tree-id45525 . -138) (undo-tree-id45526 . -138) (undo-tree-id45527 . -138) (undo-tree-id45528 . -138) (undo-tree-id45529 . -138) (undo-tree-id45530 . -138) (undo-tree-id45531 . -138) (undo-tree-id45532 . -138) (undo-tree-id45533 . -138) (undo-tree-id45534 . -138) (undo-tree-id45535 . -138) (undo-tree-id45536 . -138) (undo-tree-id45537 . -138) (undo-tree-id45538 . -138) (undo-tree-id45539 . -138) (undo-tree-id45540 . -138) (undo-tree-id45541 . -138) (undo-tree-id45542 . -138) (undo-tree-id45543 . -138) (undo-tree-id45544 . -138) (undo-tree-id45545 . -138) (undo-tree-id45546 . -138) (undo-tree-id45547 . -138) (undo-tree-id45548 . -138) (undo-tree-id45549 . -138) (undo-tree-id45550 . -138) (undo-tree-id45551 . -138) (undo-tree-id45552 . -138) (undo-tree-id45553 . -138) (undo-tree-id45554 . -138) (undo-tree-id45555 . -138) (undo-tree-id45556 . -138) (undo-tree-id45557 . -138) (undo-tree-id45558 . -137) (undo-tree-id45559 . -137) (undo-tree-id45560 . -137) (undo-tree-id45561 . -137) (undo-tree-id45562 . -137) (undo-tree-id45563 . -137) (undo-tree-id45564 . -137) (undo-tree-id45565 . -137) (undo-tree-id45566 . -137) (undo-tree-id45567 . -137) (undo-tree-id45568 . -137) (undo-tree-id45569 . -137) (undo-tree-id45570 . -137) (undo-tree-id45571 . -137) (undo-tree-id45572 . -137) (undo-tree-id45573 . -137) (undo-tree-id45574 . -137) (undo-tree-id45575 . -137) (undo-tree-id45576 . -137) (undo-tree-id45577 . -137) (undo-tree-id45578 . -139) (undo-tree-id45579 . -139) (undo-tree-id45580 . -139) (undo-tree-id45581 . -139) (undo-tree-id45582 . -139) (undo-tree-id45583 . -139) (undo-tree-id45584 . -139) (undo-tree-id45585 . -139) (undo-tree-id45586 . -139) (undo-tree-id45587 . -139) (undo-tree-id45588 . -139) (undo-tree-id45589 . -139) (undo-tree-id45590 . -139) (undo-tree-id45591 . -139) (undo-tree-id45592 . -139) (undo-tree-id45593 . -139) (undo-tree-id45594 . -139) (undo-tree-id45595 . -139) (undo-tree-id45596 . -139) (undo-tree-id45597 . -139) (undo-tree-id45598 . -139) (undo-tree-id45599 . -133) (undo-tree-id45600 . -133) (undo-tree-id45601 . -133) (undo-tree-id45602 . -133) (undo-tree-id45603 . -133) (undo-tree-id45604 . -133) (undo-tree-id45605 . -133) (undo-tree-id45606 . -133) (undo-tree-id45607 . -133) (undo-tree-id45608 . -133) (undo-tree-id45609 . -133) (undo-tree-id45610 . -133) (undo-tree-id45611 . -133) (undo-tree-id45612 . -133) (undo-tree-id45613 . -133) (undo-tree-id45614 . -133) (undo-tree-id45615 . -138) (undo-tree-id45616 . -138) (undo-tree-id45617 . -138) (undo-tree-id45618 . -138) (undo-tree-id45619 . -138) (undo-tree-id45620 . -138) (undo-tree-id45621 . -138) (undo-tree-id45622 . -138) (undo-tree-id45623 . -138) (undo-tree-id45624 . -138) (undo-tree-id45625 . -138) (undo-tree-id45626 . -139) (undo-tree-id45627 . -139) (undo-tree-id45628 . -139) (undo-tree-id45629 . -139) (undo-tree-id45630 . -139) (undo-tree-id45631 . -139) (undo-tree-id45632 . -139) (undo-tree-id45633 . -139) (undo-tree-id45634 . -139) (undo-tree-id45635 . -139) (undo-tree-id45636 . -139) (undo-tree-id45637 . -139) (undo-tree-id45638 . -139) (undo-tree-id45639 . -139) (undo-tree-id45640 . -139) (undo-tree-id45641 . -139) (undo-tree-id45642 . -139) (undo-tree-id45643 . -139) (undo-tree-id45644 . -139) (undo-tree-id45645 . -109) (3891 . 4000) (#(" of 128 units each and 20% dropout on both the inputs (dropout) and the hidden states (recurrent_dropout)." 0 13 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 13 42 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 43 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 43 96 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 96 97 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) invisible t) 97 104 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 104 106 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3921) (undo-tree-id45646 . -106) (undo-tree-id45647 . -106) (undo-tree-id45648 . -38) (undo-tree-id45649 . -38) (undo-tree-id45650 . -38) (undo-tree-id45651 . -38) (undo-tree-id45652 . -38) (undo-tree-id45653 . -38) (undo-tree-id45654 . -38) (undo-tree-id45655 . -38) (undo-tree-id45656 . -38) (undo-tree-id45657 . -38) (undo-tree-id45658 . -38) (undo-tree-id45659 . -38) (undo-tree-id45660 . -38) (undo-tree-id45661 . -38) (undo-tree-id45662 . -38) (undo-tree-id45663 . -38) (undo-tree-id45664 . -38) (undo-tree-id45665 . -38) (undo-tree-id45666 . -38) (undo-tree-id45667 . -38) (undo-tree-id45668 . -38) (undo-tree-id45669 . -38) (undo-tree-id45670 . -2) (undo-tree-id45671 . -2) (undo-tree-id45672 . -2) (undo-tree-id45673 . -2) (undo-tree-id45674 . -2) (undo-tree-id45675 . -2) (undo-tree-id45676 . -2) (undo-tree-id45677 . -2) (undo-tree-id45678 . -2) (undo-tree-id45679 . -2) (undo-tree-id45680 . -2) (undo-tree-id45681 . -2) (undo-tree-id45682 . -2) (undo-tree-id45683 . -2) (undo-tree-id45684 . -2) (undo-tree-id45685 . -2) (undo-tree-id45686 . -2) (undo-tree-id45687 . -2) (undo-tree-id45688 . -2) (undo-tree-id45689 . -2) (undo-tree-id45690 . -2) (undo-tree-id45691 . -1) (undo-tree-id45692 . -1) (undo-tree-id45693 . -1) (undo-tree-id45694 . -1) (undo-tree-id45695 . -1) (undo-tree-id45696 . -1) (undo-tree-id45697 . -1) (undo-tree-id45698 . -1) (undo-tree-id45699 . -1) (undo-tree-id45700 . -1) (undo-tree-id45701 . -1) (undo-tree-id45702 . -1) (undo-tree-id45703 . -1) (undo-tree-id45704 . -1) (undo-tree-id45705 . -1) (undo-tree-id45706 . -1) (undo-tree-id45707 . -1) (undo-tree-id45708 . -1) (undo-tree-id45709 . -1) (undo-tree-id45710 . -1) (undo-tree-id45711 . -1) (undo-tree-id45712 . -1) (undo-tree-id45713 . -1) (undo-tree-id45714 . -1) (undo-tree-id45715 . -1) (undo-tree-id45716 . -1) (undo-tree-id45717 . -1) (undo-tree-id45718 . -1) (undo-tree-id45719 . -1) (undo-tree-id45720 . -1) (undo-tree-id45721 . -1) (undo-tree-id45722 . -1) (t 25767 11851 512075 16000)) nil (25767 11892 184391 379000) 0 nil])
([nil nil ((3925 . 3939) (#("F" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3925) (undo-tree-id45195 . -1) (undo-tree-id45196 . -1) (undo-tree-id45197 . -1) (undo-tree-id45198 . -1) (undo-tree-id45199 . -1) (undo-tree-id45200 . -1) (undo-tree-id45201 . -1) (undo-tree-id45202 . -1) (undo-tree-id45203 . -1) (undo-tree-id45204 . -1) (undo-tree-id45205 . -1) (undo-tree-id45206 . -1) (undo-tree-id45207 . -1) (undo-tree-id45208 . -1) (undo-tree-id45209 . -1) (undo-tree-id45210 . -1) (undo-tree-id45211 . -1) (undo-tree-id45212 . -1) (undo-tree-id45213 . -1) (undo-tree-id45214 . -1) (undo-tree-id45215 . -1) (undo-tree-id45216 . -1) (undo-tree-id45217 . -1) (undo-tree-id45218 . -1) (undo-tree-id45219 . -1) (undo-tree-id45220 . -1) (undo-tree-id45221 . -1) (undo-tree-id45222 . -1) (undo-tree-id45223 . -1) (undo-tree-id45224 . 1) (undo-tree-id45225 . -1) (undo-tree-id45226 . -1) (undo-tree-id45227 . -1) (undo-tree-id45228 . -1) (undo-tree-id45229 . -1) (undo-tree-id45230 . -1) (undo-tree-id45231 . -1) (undo-tree-id45232 . -1) (undo-tree-id45233 . -1) (undo-tree-id45234 . -1) (undo-tree-id45235 . -1) (undo-tree-id45236 . -1) (undo-tree-id45237 . -1) (#("e" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3926) (undo-tree-id45238 . -1) (undo-tree-id45239 . -1) (undo-tree-id45240 . -1) (undo-tree-id45241 . -1) (undo-tree-id45242 . -1) (undo-tree-id45243 . -1) (undo-tree-id45244 . -1) (undo-tree-id45245 . -1) (undo-tree-id45246 . -1) (undo-tree-id45247 . -1) (undo-tree-id45248 . -1) (undo-tree-id45249 . -1) (undo-tree-id45250 . -1) (undo-tree-id45251 . -1) (undo-tree-id45252 . -1) (undo-tree-id45253 . -1) (undo-tree-id45254 . -1) (undo-tree-id45255 . -1) (undo-tree-id45256 . -1) 3927 (3925 . 3927)) nil (25767 11892 182286 831000) 0 nil])
([nil nil ((5036 . 5037) (t 25767 11892 240115 275000)) nil (25767 12074 754070 460000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5600 . 5601) (nil fontified nil 5598 . 5601) (nil fontified nil 5593 . 5598) (nil fontified nil 5520 . 5593) (nil fontified nil 5478 . 5520) (nil fontified nil 5439 . 5478) (nil fontified nil 5374 . 5439) (nil fontified nil 5345 . 5374) (nil fontified nil 5291 . 5345) (nil fontified nil 5268 . 5291) (nil fontified nil 5211 . 5268) (nil fontified nil 5137 . 5211) (nil fontified nil 5062 . 5137) (nil fontified nil 5037 . 5062) (5037 . 5601)) nil (25767 12074 754069 39000) 0 nil])
([nil nil ((5601 . 5603)) nil (25767 12074 754065 593000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5614 . 5615) (nil fontified nil 5603 . 5615) (5603 . 5615)) nil (25767 12074 754064 882000) 0 nil])
([nil nil ((#("
Success! The" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t)) . 5602) (undo-tree-id46426 . -1) (undo-tree-id46427 . -12) (undo-tree-id46428 . -1) (undo-tree-id46429 . -12) (undo-tree-id46430 . -1) (undo-tree-id46431 . -1) (undo-tree-id46432 . -1) (undo-tree-id46433 . -1) (undo-tree-id46434 . -1) (undo-tree-id46435 . -1) (undo-tree-id46436 . -1) (undo-tree-id46437 . -1) (undo-tree-id46438 . -1) (undo-tree-id46439 . -1) (undo-tree-id46440 . -1) (undo-tree-id46441 . -1) (undo-tree-id46442 . -1) (undo-tree-id46443 . -1) (undo-tree-id46444 . -1) (undo-tree-id46445 . -1) (undo-tree-id46446 . -1) (undo-tree-id46447 . -1) (undo-tree-id46448 . -1) (undo-tree-id46449 . -1) (undo-tree-id46450 . -1) (undo-tree-id46451 . -1) (undo-tree-id46452 . -1) (undo-tree-id46453 . -12) (undo-tree-id46454 . -12) (undo-tree-id46455 . -12) (undo-tree-id46456 . -12) (undo-tree-id46457 . -12) (undo-tree-id46458 . -12) (undo-tree-id46459 . -12) (undo-tree-id46460 . -12) (undo-tree-id46461 . -12) (undo-tree-id46462 . -12) (undo-tree-id46463 . -12) (undo-tree-id46464 . -12) (undo-tree-id46465 . -12) (undo-tree-id46466 . -12) (undo-tree-id46467 . -12) (undo-tree-id46468 . -13) 5614) nil (25767 12074 754062 491000) 0 nil])
([nil nil ((5602 . 5603)) nil (25767 12074 754035 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5682 . 5683) (nil fontified nil 5674 . 5683) (nil fontified nil 5603 . 5674) (5603 . 5683)) nil (25767 12074 754034 374000) 0 nil])
([nil nil ((5037 . 5039)) nil (25767 12074 754032 906000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5036) (undo-tree-id46423 . -1) (undo-tree-id46424 . -1) (undo-tree-id46425 . -1)) nil (25767 12074 754032 102000) 0 nil])
([nil nil ((#("Now we have a model that can predict the next character in text written by
" 0 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5063) (undo-tree-id46400 . -74) (undo-tree-id46401 . -4) (undo-tree-id46402 . -4) (undo-tree-id46403 . -4) (undo-tree-id46404 . -4) (undo-tree-id46405 . -4) (undo-tree-id46406 . -4) (undo-tree-id46407 . -4) (undo-tree-id46408 . -4) (undo-tree-id46409 . -4) (undo-tree-id46410 . -4) (undo-tree-id46411 . -4) (undo-tree-id46412 . -4) (undo-tree-id46413 . -4) (undo-tree-id46414 . -4) (undo-tree-id46415 . -4) (undo-tree-id46416 . -4) (undo-tree-id46417 . -4) (undo-tree-id46418 . -4) (undo-tree-id46419 . -4) (undo-tree-id46420 . -4) (undo-tree-id46421 . -4) (undo-tree-id46422 . -75)) nil (25767 12074 754028 985000) 0 nil])
([nil nil ((#("Shakespeare" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5063) (undo-tree-id46398 . -10) (undo-tree-id46399 . -11)) nil (25767 12074 754013 662000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5063) (undo-tree-id46396 . -1) (undo-tree-id46397 . -1)) nil (25767 12074 754011 119000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 5063) (undo-tree-id46394 . -1) (undo-tree-id46395 . -1)) nil (25767 12074 754008 726000) 0 nil])
([nil nil ((5063 . 5065) (#("To feed it some text, we first need to " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5063) (undo-tree-id46369 . -38) (undo-tree-id46370 . -38) (undo-tree-id46371 . -38) (undo-tree-id46372 . -39) (undo-tree-id46373 . -38) (undo-tree-id46374 . -1) (undo-tree-id46375 . -1) (undo-tree-id46376 . -1) (undo-tree-id46377 . -1) (undo-tree-id46378 . -1) (undo-tree-id46379 . -1) (undo-tree-id46380 . -6) (undo-tree-id46381 . -9) (undo-tree-id46382 . -14) (undo-tree-id46383 . -19) (undo-tree-id46384 . -20) (undo-tree-id46385 . -23) (undo-tree-id46386 . -29) (undo-tree-id46387 . -34) (undo-tree-id46388 . -37) (undo-tree-id46389 . -38) (undo-tree-id46390 . -38) (undo-tree-id46391 . -39) (undo-tree-id46392 . -39) (undo-tree-id46393 . -39) 5101) nil (25767 12074 754005 778000) 0 nil])
([nil nil ((5076 . 5086)) nil (25767 12074 753988 596000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5085) (undo-tree-id46323 . -1) (undo-tree-id46324 . -1) (undo-tree-id46325 . -1) (undo-tree-id46326 . -1) (undo-tree-id46327 . -1) (undo-tree-id46328 . -1) (undo-tree-id46329 . -1) (undo-tree-id46330 . -1) (undo-tree-id46331 . -1) (undo-tree-id46332 . -1) (undo-tree-id46333 . -1) (undo-tree-id46334 . -1) (undo-tree-id46335 . -1) (undo-tree-id46336 . -1) (undo-tree-id46337 . -1) (undo-tree-id46338 . -1) (undo-tree-id46339 . -1) (undo-tree-id46340 . -1) (undo-tree-id46341 . -1) (undo-tree-id46342 . -1) (undo-tree-id46343 . -1) (undo-tree-id46344 . -1) (undo-tree-id46345 . -1) (undo-tree-id46346 . -1) (undo-tree-id46347 . -1) (undo-tree-id46348 . -1) (undo-tree-id46349 . -1) (undo-tree-id46350 . -1) (undo-tree-id46351 . -1) (undo-tree-id46352 . -1) (undo-tree-id46353 . -1) (undo-tree-id46354 . -1) (undo-tree-id46355 . -1) 5086 (#("it" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5086) (undo-tree-id46356 . -1) (undo-tree-id46357 . -1) (undo-tree-id46358 . 2) (undo-tree-id46359 . -1) (undo-tree-id46360 . -1) (undo-tree-id46361 . -1) (undo-tree-id46362 . -2) (undo-tree-id46363 . -1) (undo-tree-id46364 . -1) (undo-tree-id46365 . -1) (undo-tree-id46366 . -2) (undo-tree-id46367 . -2) (undo-tree-id46368 . -2) 5087) nil (25767 12074 753986 291000) 0 nil])
([nil nil ((5093 . 5094) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5093) (undo-tree-id46322 . -1) 5086) nil (25767 12074 753956 421000) 0 nil])
([nil nil ((#("we did earlier" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5091) (undo-tree-id46187 . -13) (undo-tree-id46188 . -13) (undo-tree-id46189 . -13) (undo-tree-id46190 . -2) (undo-tree-id46191 . -2) (undo-tree-id46192 . -2) (undo-tree-id46193 . -2) (undo-tree-id46194 . -2) (undo-tree-id46195 . -2) (undo-tree-id46196 . -2) (undo-tree-id46197 . -2) (undo-tree-id46198 . -2) (undo-tree-id46199 . -2) (undo-tree-id46200 . -2) (undo-tree-id46201 . -2) (undo-tree-id46202 . -2) (undo-tree-id46203 . -2) (undo-tree-id46204 . -2) (undo-tree-id46205 . -2) (undo-tree-id46206 . -2) (undo-tree-id46207 . -2) (undo-tree-id46208 . -2) (undo-tree-id46209 . -2) (undo-tree-id46210 . -2) (undo-tree-id46211 . -2) (undo-tree-id46212 . -2) (undo-tree-id46213 . -2) (undo-tree-id46214 . -2) (undo-tree-id46215 . -2) (undo-tree-id46216 . -2) (undo-tree-id46217 . -2) (undo-tree-id46218 . -2) (undo-tree-id46219 . -2) (undo-tree-id46220 . -2) (undo-tree-id46221 . -2) (undo-tree-id46222 . -2) (undo-tree-id46223 . -2) (undo-tree-id46224 . -2) (undo-tree-id46225 . -2) (undo-tree-id46226 . -2) (undo-tree-id46227 . -2) (undo-tree-id46228 . -2) (undo-tree-id46229 . -2) (undo-tree-id46230 . -2) (undo-tree-id46231 . -2) (undo-tree-id46232 . -2) (undo-tree-id46233 . -2) (undo-tree-id46234 . -2) (undo-tree-id46235 . -2) (undo-tree-id46236 . -2) (undo-tree-id46237 . -2) (undo-tree-id46238 . -2) (undo-tree-id46239 . -2) (undo-tree-id46240 . -2) (undo-tree-id46241 . -2) (undo-tree-id46242 . -2) (undo-tree-id46243 . -2) (undo-tree-id46244 . -2) (undo-tree-id46245 . -2) (undo-tree-id46246 . -2) (undo-tree-id46247 . -2) (undo-tree-id46248 . -2) (undo-tree-id46249 . -2) (undo-tree-id46250 . -2) (undo-tree-id46251 . -2) (undo-tree-id46252 . -2) (undo-tree-id46253 . -2) (undo-tree-id46254 . -2) (undo-tree-id46255 . -2) (undo-tree-id46256 . -2) (undo-tree-id46257 . -2) (undo-tree-id46258 . -2) (undo-tree-id46259 . -2) (undo-tree-id46260 . -2) (undo-tree-id46261 . -2) (undo-tree-id46262 . -2) (undo-tree-id46263 . -2) (undo-tree-id46264 . -2) (undo-tree-id46265 . -14) (undo-tree-id46266 . -13) (undo-tree-id46267 . -1) (undo-tree-id46268 . -1) (undo-tree-id46269 . -1) (undo-tree-id46270 . -1) (undo-tree-id46271 . -1) (undo-tree-id46272 . -1) (undo-tree-id46273 . -1) (undo-tree-id46274 . -1) (undo-tree-id46275 . -1) (undo-tree-id46276 . -1) (undo-tree-id46277 . -1) (undo-tree-id46278 . -1) (undo-tree-id46279 . -1) (undo-tree-id46280 . -1) (undo-tree-id46281 . -1) (undo-tree-id46282 . -1) (undo-tree-id46283 . -5) (undo-tree-id46284 . -5) (undo-tree-id46285 . -5) (undo-tree-id46286 . -5) (undo-tree-id46287 . -5) (undo-tree-id46288 . -5) (undo-tree-id46289 . -5) (undo-tree-id46290 . -5) (undo-tree-id46291 . -5) (undo-tree-id46292 . -5) (undo-tree-id46293 . -5) (undo-tree-id46294 . -5) (undo-tree-id46295 . -5) (undo-tree-id46296 . -5) (undo-tree-id46297 . -5) (undo-tree-id46298 . -5) (undo-tree-id46299 . -13) (undo-tree-id46300 . -13) (undo-tree-id46301 . -13) (undo-tree-id46302 . -13) (undo-tree-id46303 . -13) (undo-tree-id46304 . -13) (undo-tree-id46305 . -13) (undo-tree-id46306 . -13) (undo-tree-id46307 . -13) (undo-tree-id46308 . -13) (undo-tree-id46309 . -13) (undo-tree-id46310 . -13) (undo-tree-id46311 . -13) (undo-tree-id46312 . -13) (undo-tree-id46313 . -13) (undo-tree-id46314 . -13) (undo-tree-id46315 . -13) (undo-tree-id46316 . -13) (undo-tree-id46317 . -13) (undo-tree-id46318 . -13) (undo-tree-id46319 . -13) (undo-tree-id46320 . -13) (undo-tree-id46321 . -14) 5104) nil (25767 12074 753949 373000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5090) (undo-tree-id45998 . -1) (undo-tree-id45999 . -1) (undo-tree-id46000 . -1) (undo-tree-id46001 . -1) (undo-tree-id46002 . -1) (undo-tree-id46003 . -1) (undo-tree-id46004 . -1) (undo-tree-id46005 . -1) (undo-tree-id46006 . -1) (undo-tree-id46007 . -1) (undo-tree-id46008 . -1) (undo-tree-id46009 . -1) (undo-tree-id46010 . -1) (undo-tree-id46011 . -1) (undo-tree-id46012 . -1) (undo-tree-id46013 . -1) (undo-tree-id46014 . -1) (undo-tree-id46015 . -1) (undo-tree-id46016 . -1) (undo-tree-id46017 . -1) (undo-tree-id46018 . -1) (undo-tree-id46019 . -1) (undo-tree-id46020 . -1) (undo-tree-id46021 . -1) (undo-tree-id46022 . -1) (undo-tree-id46023 . -1) (undo-tree-id46024 . -1) (undo-tree-id46025 . -1) (undo-tree-id46026 . -1) (undo-tree-id46027 . -1) (undo-tree-id46028 . -1) (undo-tree-id46029 . -1) (undo-tree-id46030 . -1) (undo-tree-id46031 . -1) (undo-tree-id46032 . -1) (undo-tree-id46033 . -1) (undo-tree-id46034 . -1) (undo-tree-id46035 . -1) (undo-tree-id46036 . -1) (undo-tree-id46037 . -1) (undo-tree-id46038 . -1) (undo-tree-id46039 . -1) (undo-tree-id46040 . -1) (undo-tree-id46041 . -1) (undo-tree-id46042 . -1) (undo-tree-id46043 . -1) (undo-tree-id46044 . -1) (undo-tree-id46045 . -1) (undo-tree-id46046 . -1) (undo-tree-id46047 . -1) (undo-tree-id46048 . -1) (undo-tree-id46049 . -1) (undo-tree-id46050 . -1) (undo-tree-id46051 . -1) (undo-tree-id46052 . -1) (undo-tree-id46053 . -1) (undo-tree-id46054 . -1) (undo-tree-id46055 . -1) (undo-tree-id46056 . -1) (undo-tree-id46057 . -1) (undo-tree-id46058 . -1) (undo-tree-id46059 . -1) (undo-tree-id46060 . -1) (undo-tree-id46061 . -1) (undo-tree-id46062 . -1) (undo-tree-id46063 . -1) (undo-tree-id46064 . -1) (undo-tree-id46065 . -1) (undo-tree-id46066 . -1) (undo-tree-id46067 . -1) (undo-tree-id46068 . -1) (undo-tree-id46069 . -1) (undo-tree-id46070 . -1) (undo-tree-id46071 . -1) (undo-tree-id46072 . -1) (undo-tree-id46073 . -1) (undo-tree-id46074 . -1) (undo-tree-id46075 . -1) (undo-tree-id46076 . -1) (undo-tree-id46077 . -1) (undo-tree-id46078 . -1) (undo-tree-id46079 . -1) (undo-tree-id46080 . -1) (undo-tree-id46081 . -1) (undo-tree-id46082 . -1) (undo-tree-id46083 . -1) (undo-tree-id46084 . -1) (undo-tree-id46085 . -1) (undo-tree-id46086 . -1) (undo-tree-id46087 . -1) (undo-tree-id46088 . -1) (undo-tree-id46089 . -1) (undo-tree-id46090 . -1) (undo-tree-id46091 . -1) (undo-tree-id46092 . -1) (undo-tree-id46093 . -1) (undo-tree-id46094 . -1) (undo-tree-id46095 . -1) (undo-tree-id46096 . -1) (undo-tree-id46097 . -1) (undo-tree-id46098 . -1) (undo-tree-id46099 . -1) (undo-tree-id46100 . -1) (undo-tree-id46101 . -1) (undo-tree-id46102 . -1) (undo-tree-id46103 . -1) (undo-tree-id46104 . -1) (undo-tree-id46105 . -1) (undo-tree-id46106 . -1) (undo-tree-id46107 . -1) (undo-tree-id46108 . -1) (undo-tree-id46109 . -1) (undo-tree-id46110 . -1) (undo-tree-id46111 . -1) (undo-tree-id46112 . -1) (undo-tree-id46113 . -1) (undo-tree-id46114 . -1) (undo-tree-id46115 . -1) (undo-tree-id46116 . -1) (undo-tree-id46117 . -1) (undo-tree-id46118 . -1) (undo-tree-id46119 . -1) (undo-tree-id46120 . -1) (undo-tree-id46121 . -1) (undo-tree-id46122 . -1) (undo-tree-id46123 . -1) (undo-tree-id46124 . -1) (undo-tree-id46125 . -1) (undo-tree-id46126 . -1) (undo-tree-id46127 . -1) (undo-tree-id46128 . -1) (undo-tree-id46129 . -1) (undo-tree-id46130 . -1) (undo-tree-id46131 . -1) (undo-tree-id46132 . -1) (undo-tree-id46133 . -1) (undo-tree-id46134 . -1) (undo-tree-id46135 . -1) (undo-tree-id46136 . -1) (undo-tree-id46137 . -1) (undo-tree-id46138 . -1) (undo-tree-id46139 . -1) (undo-tree-id46140 . -1) (undo-tree-id46141 . -1) (undo-tree-id46142 . -1) (undo-tree-id46143 . -1) (undo-tree-id46144 . -1) (undo-tree-id46145 . -1) (undo-tree-id46146 . -1) (undo-tree-id46147 . -1) (undo-tree-id46148 . -1) (undo-tree-id46149 . -1) (undo-tree-id46150 . -1) (undo-tree-id46151 . -1) (undo-tree-id46152 . -1) (undo-tree-id46153 . -1) (undo-tree-id46154 . -1) (undo-tree-id46155 . -1) (undo-tree-id46156 . -1) (undo-tree-id46157 . -1) (undo-tree-id46158 . -1) (undo-tree-id46159 . -1) (undo-tree-id46160 . -1) (undo-tree-id46161 . -1) (undo-tree-id46162 . -1) (undo-tree-id46163 . -1) (undo-tree-id46164 . -1) (undo-tree-id46165 . -1) (undo-tree-id46166 . -1) (undo-tree-id46167 . -1) (undo-tree-id46168 . -1) (undo-tree-id46169 . -1) (undo-tree-id46170 . -1) (undo-tree-id46171 . -1) (undo-tree-id46172 . -1) (undo-tree-id46173 . -1) (undo-tree-id46174 . -1) (undo-tree-id46175 . -1) (undo-tree-id46176 . -1) (undo-tree-id46177 . -1) (undo-tree-id46178 . -1) (undo-tree-id46179 . -1) (undo-tree-id46180 . -1) (undo-tree-id46181 . -1) (undo-tree-id46182 . -1) (undo-tree-id46183 . -1) (undo-tree-id46184 . -1) (undo-tree-id46185 . -1) (undo-tree-id46186 . -1)) nil (25767 12074 753862 478000) 0 nil])
([nil nil ((5092 . 5093) (5091 . 5092)) nil (25767 12074 753330 767000) 0 nil])
([nil nil ((5567 . 5573) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5567 5573 nil nil nil t #s(yas--exit 5591 nil))) #s(yas--exit 5591 nil) 6 nil #s(yas--field 1 5567 5573 nil nil nil t #s(yas--exit 5591 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5585) (undo-tree-id45955 . -2) (5555 . 5598) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5555) (undo-tree-id45956 . -2) (undo-tree-id45957 . -2) (undo-tree-id45958 . -1) (undo-tree-id45959 . -1) (undo-tree-id45960 . -1) (undo-tree-id45961 . -1) (undo-tree-id45962 . -1) (undo-tree-id45963 . -1) (undo-tree-id45964 . -1) (undo-tree-id45965 . -1) (undo-tree-id45966 . -1) (undo-tree-id45967 . -1) (undo-tree-id45968 . -1) (undo-tree-id45969 . -1) (undo-tree-id45970 . -1) (undo-tree-id45971 . -1) (undo-tree-id45972 . -1) (undo-tree-id45973 . -1) (undo-tree-id45974 . -1) (undo-tree-id45975 . -1) (undo-tree-id45976 . -1) (undo-tree-id45977 . -1) (undo-tree-id45978 . -1) (undo-tree-id45979 . -1) (undo-tree-id45980 . -1) (undo-tree-id45981 . -1) (undo-tree-id45982 . -1) (undo-tree-id45983 . -1) (undo-tree-id45984 . -2) (undo-tree-id45985 . -2) (undo-tree-id45986 . -2) (undo-tree-id45987 . -2) (undo-tree-id45988 . -2) (undo-tree-id45989 . -2) (undo-tree-id45990 . -2) (undo-tree-id45991 . -2) (undo-tree-id45992 . -2) (undo-tree-id45993 . -2) (undo-tree-id45994 . -2) (undo-tree-id45995 . -2) (undo-tree-id45996 . -2) (undo-tree-id45997 . -2) 5557 (5555 . 5557) (5554 . 5555) (5553 . 5554) 5546) nil (25767 12074 753328 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 5555 5602 #s(yas--snippet nil (#s(yas--field 1 5567 5573 nil nil nil t #s(yas--exit 5591 nil))) #s(yas--exit 5591 nil) 6 nil #s(yas--field 1 5567 5573 nil nil nil t #s(yas--exit 5591 nil)) nil nil))) nil (25767 12074 753298 57000) 0 nil])
([nil nil ((#("def preprocess(texts):
X = np.array(tokenizer.texts_to_sequences(texts)) - 1
return tf.one_hot(X, max_id)
" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 51 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 52 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 54 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 55 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 64 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 77 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 90 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 91 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 94 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 101 102 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 102 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 104 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5138) (undo-tree-id45805 . -105) (undo-tree-id45806 . -94) (undo-tree-id45807 . -94) (undo-tree-id45808 . -2) (undo-tree-id45809 . -2) (undo-tree-id45810 . -2) (undo-tree-id45811 . -2) (undo-tree-id45812 . -2) (undo-tree-id45813 . -2) (undo-tree-id45814 . -25) (undo-tree-id45815 . -25) (undo-tree-id45816 . -25) (undo-tree-id45817 . -25) (undo-tree-id45818 . -25) (undo-tree-id45819 . -25) (undo-tree-id45820 . -79) (undo-tree-id45821 . -79) (undo-tree-id45822 . -79) (undo-tree-id45823 . -79) (undo-tree-id45824 . -79) (undo-tree-id45825 . -79) (undo-tree-id45826 . -94) (undo-tree-id45827 . -94) (undo-tree-id45828 . -94) (undo-tree-id45829 . -94) (undo-tree-id45830 . -94) (undo-tree-id45831 . -94) (undo-tree-id45832 . -94) (undo-tree-id45833 . -94) (undo-tree-id45834 . -94) (undo-tree-id45835 . -94) (undo-tree-id45836 . -94) (undo-tree-id45837 . -39) (undo-tree-id45838 . -39) (undo-tree-id45839 . -39) (undo-tree-id45840 . -39) (undo-tree-id45841 . -39) (undo-tree-id45842 . -39) (undo-tree-id45843 . -39) (undo-tree-id45844 . -39) (undo-tree-id45845 . -39) (undo-tree-id45846 . -39) (undo-tree-id45847 . -39) (undo-tree-id45848 . -16) (undo-tree-id45849 . -16) (undo-tree-id45850 . -16) (undo-tree-id45851 . -16) (undo-tree-id45852 . -16) (undo-tree-id45853 . -16) (undo-tree-id45854 . -16) (undo-tree-id45855 . -16) (undo-tree-id45856 . -16) (undo-tree-id45857 . -16) (undo-tree-id45858 . -16) (undo-tree-id45859 . -16) (undo-tree-id45860 . -16) (undo-tree-id45861 . -16) (undo-tree-id45862 . -16) (undo-tree-id45863 . -16) (undo-tree-id45864 . -16) (undo-tree-id45865 . -16) (undo-tree-id45866 . -16) (undo-tree-id45867 . -39) (undo-tree-id45868 . -39) (undo-tree-id45869 . -39) (undo-tree-id45870 . -39) (undo-tree-id45871 . -39) (undo-tree-id45872 . -39) (undo-tree-id45873 . -94) (undo-tree-id45874 . -94) (undo-tree-id45875 . -94) (undo-tree-id45876 . -94) (undo-tree-id45877 . -94) (undo-tree-id45878 . -94) (undo-tree-id45879 . -94) (undo-tree-id45880 . -94) (undo-tree-id45881 . -94) (undo-tree-id45882 . -94) (undo-tree-id45883 . -94) (undo-tree-id45884 . -16) (undo-tree-id45885 . -16) (undo-tree-id45886 . -16) (undo-tree-id45887 . -16) (undo-tree-id45888 . -16) (undo-tree-id45889 . -16) (undo-tree-id45890 . -16) (undo-tree-id45891 . -16) (undo-tree-id45892 . -16) (undo-tree-id45893 . -16) (undo-tree-id45894 . -16) (undo-tree-id45895 . -16) (undo-tree-id45896 . -16) (undo-tree-id45897 . -16) (undo-tree-id45898 . -16) (undo-tree-id45899 . -16) (undo-tree-id45900 . -16) (undo-tree-id45901 . -16) (undo-tree-id45902 . -39) (undo-tree-id45903 . -39) (undo-tree-id45904 . -39) (undo-tree-id45905 . -39) (undo-tree-id45906 . -39) (undo-tree-id45907 . -39) (undo-tree-id45908 . -16) (undo-tree-id45909 . -16) (undo-tree-id45910 . -16) (undo-tree-id45911 . -16) (undo-tree-id45912 . -16) (undo-tree-id45913 . -16) (undo-tree-id45914 . -106) (undo-tree-id45915 . -16) (undo-tree-id45916 . -94) (undo-tree-id45917 . -16) (undo-tree-id45918 . -16) (undo-tree-id45919 . -16) (undo-tree-id45920 . -16) (undo-tree-id45921 . -16) (undo-tree-id45922 . -16) (undo-tree-id45923 . -16) (undo-tree-id45924 . -16) (undo-tree-id45925 . -16) (undo-tree-id45926 . -16) (undo-tree-id45927 . -16) (undo-tree-id45928 . -16) (undo-tree-id45929 . -16) (undo-tree-id45930 . 70) (undo-tree-id45931 . -45) (undo-tree-id45932 . -39) (undo-tree-id45933 . -39) (undo-tree-id45934 . -39) (undo-tree-id45935 . -39) (undo-tree-id45936 . -39) (undo-tree-id45937 . -39) (undo-tree-id45938 . -94) (undo-tree-id45939 . -94) (undo-tree-id45940 . -94) (undo-tree-id45941 . -94) (undo-tree-id45942 . -94) (undo-tree-id45943 . 12) (undo-tree-id45944 . -95) (undo-tree-id45945 . 2) (undo-tree-id45946 . -105) (undo-tree-id45947 . -94) (undo-tree-id45948 . -94) (undo-tree-id45949 . -94) (undo-tree-id45950 . -94) (undo-tree-id45951 . -94) (undo-tree-id45952 . -94) (undo-tree-id45953 . -94) (undo-tree-id45954 . -106) 5232) nil (25767 12074 753290 328000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5484 . 5485) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -5590) (5484 . 5591)) nil (25767 12074 752396 589000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 5484) (undo-tree-id45792 . -1) (undo-tree-id45793 . -1) (undo-tree-id45794 . -1) (undo-tree-id45795 . -1) (undo-tree-id45796 . -1) (undo-tree-id45797 . -1) (undo-tree-id45798 . -1) (undo-tree-id45799 . -1) (undo-tree-id45800 . -1) (undo-tree-id45801 . -1) (undo-tree-id45802 . -1) (undo-tree-id45803 . -1) (undo-tree-id45804 . -1)) nil (25767 12074 752394 695000) 0 nil])
([nil nil ((5507 . 5511) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -5507) (undo-tree-id45723 . -1) (undo-tree-id45724 . -1) (undo-tree-id45725 . -1) (undo-tree-id45726 . -1) (undo-tree-id45727 . -1) (undo-tree-id45728 . -1) (undo-tree-id45729 . -1) (undo-tree-id45730 . -1) (undo-tree-id45731 . -1) (undo-tree-id45732 . -1) (undo-tree-id45733 . -1) (undo-tree-id45734 . -1) (undo-tree-id45735 . -1) (undo-tree-id45736 . -1) (undo-tree-id45737 . -1) (undo-tree-id45738 . -1) (undo-tree-id45739 . -1) (undo-tree-id45740 . -1) (undo-tree-id45741 . -1) (undo-tree-id45742 . -1) (undo-tree-id45743 . -1) (undo-tree-id45744 . -1) (undo-tree-id45745 . -1) (undo-tree-id45746 . -1) (undo-tree-id45747 . -1) (undo-tree-id45748 . -1) (undo-tree-id45749 . -1) (undo-tree-id45750 . -1) (undo-tree-id45751 . -1) (undo-tree-id45752 . -1) (undo-tree-id45753 . -1) (undo-tree-id45754 . -1) (undo-tree-id45755 . -1) (undo-tree-id45756 . -1) (undo-tree-id45757 . -1) (undo-tree-id45758 . -1) (undo-tree-id45759 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -5508) (undo-tree-id45760 . -1) (undo-tree-id45761 . -1) (undo-tree-id45762 . -1) (undo-tree-id45763 . -1) (undo-tree-id45764 . -1) (undo-tree-id45765 . -1) (undo-tree-id45766 . -1) (undo-tree-id45767 . -1) (undo-tree-id45768 . -1) (undo-tree-id45769 . -1) (undo-tree-id45770 . -1) (undo-tree-id45771 . -1) (undo-tree-id45772 . -1) (undo-tree-id45773 . -1) (undo-tree-id45774 . -1) (undo-tree-id45775 . -1) (undo-tree-id45776 . -1) (undo-tree-id45777 . -1) (undo-tree-id45778 . -1) (undo-tree-id45779 . -1) (undo-tree-id45780 . -1) (undo-tree-id45781 . -1) (undo-tree-id45782 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -5509) (undo-tree-id45783 . -1) (undo-tree-id45784 . -1) (undo-tree-id45785 . -1) (undo-tree-id45786 . -1) (undo-tree-id45787 . -1) (undo-tree-id45788 . -1) (undo-tree-id45789 . -1) (undo-tree-id45790 . -1) (undo-tree-id45791 . -1) 5510 (5507 . 5510)) nil (25767 12074 752382 79000) 0 nil])
([nil nil ((5567 . 5569) (5565 . 5567)) nil (25767 12074 752326 620000) 0 nil])
([nil nil ((5609 . 5610)) nil (25767 12074 752322 32000) 0 nil])
([nil nil ((5072 . 5086) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5072) (undo-tree-id47530 . -1) (undo-tree-id47531 . -1) (undo-tree-id47532 . -1) (undo-tree-id47533 . -1) (undo-tree-id47534 . -1) (undo-tree-id47535 . -1) (undo-tree-id47536 . -1) (undo-tree-id47537 . -1) (undo-tree-id47538 . -1) 5073 (5072 . 5073) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5072) (undo-tree-id47539 . -1) (undo-tree-id47540 . -1) (undo-tree-id47541 . -1) (undo-tree-id47542 . -1) (undo-tree-id47543 . -1) (undo-tree-id47544 . -1) (undo-tree-id47545 . -1) (undo-tree-id47546 . -1) (undo-tree-id47547 . -1) 5073 (5065 . 5073) (t 25767 12074 852883 9000)) nil (25767 12147 46781 284000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5096) (undo-tree-id47497 . -1) (undo-tree-id47498 . -1) (undo-tree-id47499 . -1) (undo-tree-id47500 . -1) (undo-tree-id47501 . -1) (undo-tree-id47502 . -1) (undo-tree-id47503 . -1) (undo-tree-id47504 . -1) (undo-tree-id47505 . -1) (undo-tree-id47506 . -1) (undo-tree-id47507 . -1) (undo-tree-id47508 . -1) (undo-tree-id47509 . -1) (undo-tree-id47510 . -1) (undo-tree-id47511 . -1) (undo-tree-id47512 . -1) (undo-tree-id47513 . -1) (undo-tree-id47514 . -1) (undo-tree-id47515 . -1) (undo-tree-id47516 . -1) 5097 (#("some" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5097) (undo-tree-id47517 . -3) (undo-tree-id47518 . -3) (undo-tree-id47519 . -3) (undo-tree-id47520 . -3) (undo-tree-id47521 . -3) (undo-tree-id47522 . -3) (undo-tree-id47523 . -3) (undo-tree-id47524 . -3) (undo-tree-id47525 . -3) (undo-tree-id47526 . -3) (undo-tree-id47527 . -3) (undo-tree-id47528 . -4) (undo-tree-id47529 . -4) 5100) nil (25767 12147 46767 314000) 0 nil])
([nil nil ((#(" like," 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5101) (undo-tree-id47307 . -5) (undo-tree-id47308 . 6) (undo-tree-id47309 . -5) (undo-tree-id47310 . -5) (undo-tree-id47311 . -5) (undo-tree-id47312 . -5) (undo-tree-id47313 . -5) (undo-tree-id47314 . -5) (undo-tree-id47315 . -5) (undo-tree-id47316 . -5) (undo-tree-id47317 . -5) (undo-tree-id47318 . -5) (undo-tree-id47319 . -5) (undo-tree-id47320 . -5) (undo-tree-id47321 . -5) (undo-tree-id47322 . -5) (undo-tree-id47323 . -5) (undo-tree-id47324 . -5) (undo-tree-id47325 . -5) (undo-tree-id47326 . -5) (undo-tree-id47327 . -5) (undo-tree-id47328 . -5) (undo-tree-id47329 . -5) (undo-tree-id47330 . -5) (undo-tree-id47331 . -5) (undo-tree-id47332 . -5) (undo-tree-id47333 . -5) (undo-tree-id47334 . -5) (undo-tree-id47335 . -5) (undo-tree-id47336 . -5) (undo-tree-id47337 . -5) (undo-tree-id47338 . -5) (undo-tree-id47339 . -5) (undo-tree-id47340 . -5) (undo-tree-id47341 . -5) (undo-tree-id47342 . -5) (undo-tree-id47343 . -5) (undo-tree-id47344 . -5) (undo-tree-id47345 . -5) (undo-tree-id47346 . -5) (undo-tree-id47347 . -5) (undo-tree-id47348 . -5) (undo-tree-id47349 . -5) (undo-tree-id47350 . -5) (undo-tree-id47351 . -5) (undo-tree-id47352 . -5) (undo-tree-id47353 . -5) (undo-tree-id47354 . -5) (undo-tree-id47355 . -5) (undo-tree-id47356 . -5) (undo-tree-id47357 . -5) (undo-tree-id47358 . -5) (undo-tree-id47359 . -5) (undo-tree-id47360 . -5) (undo-tree-id47361 . -5) (undo-tree-id47362 . -5) (undo-tree-id47363 . -5) (undo-tree-id47364 . -5) (undo-tree-id47365 . -5) (undo-tree-id47366 . -5) (undo-tree-id47367 . -5) (undo-tree-id47368 . -5) (undo-tree-id47369 . -5) (undo-tree-id47370 . -5) (undo-tree-id47371 . -5) (undo-tree-id47372 . -5) (undo-tree-id47373 . -5) (undo-tree-id47374 . -5) (undo-tree-id47375 . -5) (undo-tree-id47376 . -5) (undo-tree-id47377 . -5) (undo-tree-id47378 . -5) (undo-tree-id47379 . -5) (undo-tree-id47380 . -5) (undo-tree-id47381 . -5) (undo-tree-id47382 . -5) (undo-tree-id47383 . -5) (undo-tree-id47384 . -5) (undo-tree-id47385 . -5) (undo-tree-id47386 . -5) (undo-tree-id47387 . -5) (undo-tree-id47388 . -5) (undo-tree-id47389 . -5) (undo-tree-id47390 . -5) (undo-tree-id47391 . -5) (undo-tree-id47392 . -5) (undo-tree-id47393 . -5) (undo-tree-id47394 . -5) (undo-tree-id47395 . -5) (undo-tree-id47396 . -5) (undo-tree-id47397 . -5) (undo-tree-id47398 . -5) (undo-tree-id47399 . -5) (undo-tree-id47400 . -5) (undo-tree-id47401 . -5) (undo-tree-id47402 . -5) (undo-tree-id47403 . -5) (undo-tree-id47404 . -5) (undo-tree-id47405 . -5) (undo-tree-id47406 . -5) (undo-tree-id47407 . -5) (undo-tree-id47408 . -5) (undo-tree-id47409 . -5) (undo-tree-id47410 . -5) (undo-tree-id47411 . -5) (undo-tree-id47412 . -5) (undo-tree-id47413 . -5) (undo-tree-id47414 . -5) (undo-tree-id47415 . -5) (undo-tree-id47416 . -5) (undo-tree-id47417 . -5) (undo-tree-id47418 . -5) (undo-tree-id47419 . -5) (undo-tree-id47420 . -5) (undo-tree-id47421 . -5) (undo-tree-id47422 . -5) (undo-tree-id47423 . -5) (undo-tree-id47424 . -5) (undo-tree-id47425 . -5) (undo-tree-id47426 . -5) (undo-tree-id47427 . -5) (undo-tree-id47428 . -5) (undo-tree-id47429 . -5) (undo-tree-id47430 . -5) (undo-tree-id47431 . -5) (undo-tree-id47432 . -5) (undo-tree-id47433 . -5) (undo-tree-id47434 . -5) (undo-tree-id47435 . -5) (undo-tree-id47436 . -5) (undo-tree-id47437 . -5) (undo-tree-id47438 . -5) (undo-tree-id47439 . -5) (undo-tree-id47440 . -5) (undo-tree-id47441 . -5) (undo-tree-id47442 . -5) (undo-tree-id47443 . -5) (undo-tree-id47444 . -5) (undo-tree-id47445 . -5) (undo-tree-id47446 . -5) (undo-tree-id47447 . -5) (undo-tree-id47448 . -5) (undo-tree-id47449 . -5) (undo-tree-id47450 . -5) (undo-tree-id47451 . -5) (undo-tree-id47452 . -5) (undo-tree-id47453 . -5) (undo-tree-id47454 . -5) (undo-tree-id47455 . -5) (undo-tree-id47456 . -5) (undo-tree-id47457 . -5) (undo-tree-id47458 . -5) (undo-tree-id47459 . -5) (undo-tree-id47460 . -5) (undo-tree-id47461 . -5) (undo-tree-id47462 . -5) (undo-tree-id47463 . -5) (undo-tree-id47464 . -5) (undo-tree-id47465 . -5) (undo-tree-id47466 . -5) (undo-tree-id47467 . -5) (undo-tree-id47468 . -5) (undo-tree-id47469 . -5) (undo-tree-id47470 . -5) (undo-tree-id47471 . -5) (undo-tree-id47472 . -5) (undo-tree-id47473 . -5) (undo-tree-id47474 . -5) (undo-tree-id47475 . -5) (undo-tree-id47476 . -5) (undo-tree-id47477 . -5) (undo-tree-id47478 . -5) (undo-tree-id47479 . -5) (undo-tree-id47480 . -5) (undo-tree-id47481 . -5) (undo-tree-id47482 . -5) (undo-tree-id47483 . -5) (undo-tree-id47484 . -5) (undo-tree-id47485 . -5) (undo-tree-id47486 . -5) (undo-tree-id47487 . -5) (undo-tree-id47488 . -5) (undo-tree-id47489 . -5) (undo-tree-id47490 . -5) (undo-tree-id47491 . -5) (undo-tree-id47492 . -5) (undo-tree-id47493 . -5) (undo-tree-id47494 . -1) (undo-tree-id47495 . -6) (undo-tree-id47496 . -6)) nil (25767 12147 46741 657000) 0 nil])
([nil nil ((5101 . 5102)) nil (25767 12147 46621 696000) 0 nil])
([nil nil ((#("so let’s create a little function for this:" 0 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5105) (undo-tree-id47234 . -42) (undo-tree-id47235 . -42) (undo-tree-id47236 . -42) (undo-tree-id47237 . -43) (undo-tree-id47238 . -42) (undo-tree-id47239 . -1) (undo-tree-id47240 . -1) (undo-tree-id47241 . -1) (undo-tree-id47242 . -1) (undo-tree-id47243 . -1) (undo-tree-id47244 . -1) (undo-tree-id47245 . -5) (undo-tree-id47246 . -5) (undo-tree-id47247 . -5) (undo-tree-id47248 . -5) (undo-tree-id47249 . -5) (undo-tree-id47250 . -5) (undo-tree-id47251 . -6) (undo-tree-id47252 . -6) (undo-tree-id47253 . -6) (undo-tree-id47254 . -6) (undo-tree-id47255 . -6) (undo-tree-id47256 . -6) (undo-tree-id47257 . -7) (undo-tree-id47258 . -7) (undo-tree-id47259 . -7) (undo-tree-id47260 . -7) (undo-tree-id47261 . -7) (undo-tree-id47262 . -7) (undo-tree-id47263 . -14) (undo-tree-id47264 . -14) (undo-tree-id47265 . -14) (undo-tree-id47266 . -14) (undo-tree-id47267 . -14) (undo-tree-id47268 . -14) (undo-tree-id47269 . -16) (undo-tree-id47270 . -16) (undo-tree-id47271 . -16) (undo-tree-id47272 . -16) (undo-tree-id47273 . -16) (undo-tree-id47274 . -16) (undo-tree-id47275 . -23) (undo-tree-id47276 . -23) (undo-tree-id47277 . -23) (undo-tree-id47278 . -23) (undo-tree-id47279 . -23) (undo-tree-id47280 . -23) (undo-tree-id47281 . -32) (undo-tree-id47282 . -32) (undo-tree-id47283 . -32) (undo-tree-id47284 . -32) (undo-tree-id47285 . -32) (undo-tree-id47286 . -32) (undo-tree-id47287 . -36) (undo-tree-id47288 . -36) (undo-tree-id47289 . -36) (undo-tree-id47290 . -36) (undo-tree-id47291 . -36) (undo-tree-id47292 . -36) (undo-tree-id47293 . -41) (undo-tree-id47294 . -41) (undo-tree-id47295 . -41) (undo-tree-id47296 . -41) (undo-tree-id47297 . -41) (undo-tree-id47298 . -41) (undo-tree-id47299 . -42) (undo-tree-id47300 . -42) (undo-tree-id47301 . -42) (undo-tree-id47302 . -42) (undo-tree-id47303 . -42) (undo-tree-id47304 . -42) (undo-tree-id47305 . -42) (undo-tree-id47306 . -43) 5147) nil (25767 12147 46618 460000) 0 nil])
([nil nil ((#("Now let’s " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5106) (undo-tree-id47174 . -9) (undo-tree-id47175 . -9) (undo-tree-id47176 . -9) (undo-tree-id47177 . -2) (undo-tree-id47178 . -2) (undo-tree-id47179 . -2) (undo-tree-id47180 . -2) (undo-tree-id47181 . -2) (undo-tree-id47182 . -2) (undo-tree-id47183 . -2) (undo-tree-id47184 . -2) (undo-tree-id47185 . -2) (undo-tree-id47186 . -2) (undo-tree-id47187 . -2) (undo-tree-id47188 . -1) (undo-tree-id47189 . -1) (undo-tree-id47190 . -1) (undo-tree-id47191 . -1) (undo-tree-id47192 . -1) (undo-tree-id47193 . -1) (undo-tree-id47194 . -10) (undo-tree-id47195 . -9) (undo-tree-id47196 . -2) (undo-tree-id47197 . -2) (undo-tree-id47198 . -2) (undo-tree-id47199 . -2) (undo-tree-id47200 . -2) (undo-tree-id47201 . -2) (undo-tree-id47202 . -6) (undo-tree-id47203 . -6) (undo-tree-id47204 . -6) (undo-tree-id47205 . -6) (undo-tree-id47206 . -6) (undo-tree-id47207 . -6) (undo-tree-id47208 . -7) (undo-tree-id47209 . -7) (undo-tree-id47210 . -7) (undo-tree-id47211 . -7) (undo-tree-id47212 . -7) (undo-tree-id47213 . -7) (undo-tree-id47214 . -8) (undo-tree-id47215 . -8) (undo-tree-id47216 . -8) (undo-tree-id47217 . -8) (undo-tree-id47218 . -8) (undo-tree-id47219 . -8) (undo-tree-id47220 . -10) (undo-tree-id47221 . -10) (undo-tree-id47222 . -10) (undo-tree-id47223 . -10) (undo-tree-id47224 . -10) (undo-tree-id47225 . -10) (undo-tree-id47226 . -9) (undo-tree-id47227 . -9) (undo-tree-id47228 . -9) (undo-tree-id47229 . -9) (undo-tree-id47230 . -9) (undo-tree-id47231 . -9) (undo-tree-id47232 . -9) (undo-tree-id47233 . -10) 5115) nil (25767 12147 46546 641000) 0 nil])
([nil nil ((5104 . 5105) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5104) (undo-tree-id46659 . -1) (undo-tree-id46660 . -1) (undo-tree-id46661 . -1) (undo-tree-id46662 . -1) (undo-tree-id46663 . -1) (undo-tree-id46664 . -1) (undo-tree-id46665 . -1) (undo-tree-id46666 . -1) (undo-tree-id46667 . -1) (undo-tree-id46668 . -1) (undo-tree-id46669 . -1) (undo-tree-id46670 . -1) (undo-tree-id46671 . -1) (undo-tree-id46672 . -1) (undo-tree-id46673 . -1) (undo-tree-id46674 . -1) (undo-tree-id46675 . -1) (undo-tree-id46676 . -1) (undo-tree-id46677 . -1) (undo-tree-id46678 . -1) (undo-tree-id46679 . -1) (undo-tree-id46680 . -1) (undo-tree-id46681 . -1) (undo-tree-id46682 . -1) (undo-tree-id46683 . -1) (undo-tree-id46684 . -1) (undo-tree-id46685 . -1) (undo-tree-id46686 . -1) (undo-tree-id46687 . -1) (undo-tree-id46688 . -1) (undo-tree-id46689 . -1) (undo-tree-id46690 . -1) (undo-tree-id46691 . -1) (undo-tree-id46692 . -1) (undo-tree-id46693 . -1) (undo-tree-id46694 . -1) (undo-tree-id46695 . -1) (undo-tree-id46696 . -1) (undo-tree-id46697 . -1) (undo-tree-id46698 . -1) (undo-tree-id46699 . -1) (undo-tree-id46700 . -1) (undo-tree-id46701 . -1) (undo-tree-id46702 . -1) (undo-tree-id46703 . -1) (undo-tree-id46704 . -1) (undo-tree-id46705 . -1) (undo-tree-id46706 . -1) (undo-tree-id46707 . -1) (undo-tree-id46708 . -1) (undo-tree-id46709 . -1) (undo-tree-id46710 . -1) (undo-tree-id46711 . -1) (undo-tree-id46712 . -1) (undo-tree-id46713 . -1) (undo-tree-id46714 . -1) (undo-tree-id46715 . -1) (undo-tree-id46716 . -1) (undo-tree-id46717 . -1) (undo-tree-id46718 . -1) (undo-tree-id46719 . -1) (undo-tree-id46720 . -1) (undo-tree-id46721 . -1) (undo-tree-id46722 . -1) (undo-tree-id46723 . -1) (undo-tree-id46724 . -1) (undo-tree-id46725 . -1) (undo-tree-id46726 . -1) (undo-tree-id46727 . -1) (undo-tree-id46728 . -1) (undo-tree-id46729 . -1) (undo-tree-id46730 . -1) (undo-tree-id46731 . -1) (undo-tree-id46732 . -1) (undo-tree-id46733 . -1) (undo-tree-id46734 . -1) (undo-tree-id46735 . -1) (undo-tree-id46736 . -1) (undo-tree-id46737 . -1) (undo-tree-id46738 . -1) (undo-tree-id46739 . -1) (undo-tree-id46740 . -1) (undo-tree-id46741 . -1) (undo-tree-id46742 . -1) (undo-tree-id46743 . -1) (undo-tree-id46744 . -1) (undo-tree-id46745 . -1) (undo-tree-id46746 . -1) (undo-tree-id46747 . -1) (undo-tree-id46748 . -1) (undo-tree-id46749 . -1) (undo-tree-id46750 . -1) (undo-tree-id46751 . -1) (undo-tree-id46752 . -1) (undo-tree-id46753 . -1) (undo-tree-id46754 . -1) (undo-tree-id46755 . -1) (undo-tree-id46756 . -1) (undo-tree-id46757 . -1) (undo-tree-id46758 . -1) (undo-tree-id46759 . -1) (undo-tree-id46760 . -1) (undo-tree-id46761 . -1) (undo-tree-id46762 . -1) (undo-tree-id46763 . -1) (undo-tree-id46764 . -1) (undo-tree-id46765 . -1) (undo-tree-id46766 . -1) (undo-tree-id46767 . -1) (undo-tree-id46768 . -1) (undo-tree-id46769 . -1) (undo-tree-id46770 . -1) (undo-tree-id46771 . -1) (undo-tree-id46772 . -1) (undo-tree-id46773 . -1) (undo-tree-id46774 . -1) (undo-tree-id46775 . -1) (undo-tree-id46776 . -1) (undo-tree-id46777 . -1) (undo-tree-id46778 . -1) (undo-tree-id46779 . -1) (undo-tree-id46780 . -1) (undo-tree-id46781 . -1) (undo-tree-id46782 . -1) (undo-tree-id46783 . -1) (undo-tree-id46784 . -1) (undo-tree-id46785 . -1) (undo-tree-id46786 . -1) (undo-tree-id46787 . -1) (undo-tree-id46788 . -1) (undo-tree-id46789 . -1) (undo-tree-id46790 . -1) (undo-tree-id46791 . -1) (undo-tree-id46792 . -1) (undo-tree-id46793 . -1) (undo-tree-id46794 . -1) (undo-tree-id46795 . -1) (undo-tree-id46796 . -1) (undo-tree-id46797 . -1) (undo-tree-id46798 . -1) (undo-tree-id46799 . -1) (undo-tree-id46800 . -1) (undo-tree-id46801 . -1) (undo-tree-id46802 . -1) (undo-tree-id46803 . -1) (undo-tree-id46804 . -1) (undo-tree-id46805 . -1) (undo-tree-id46806 . -1) (undo-tree-id46807 . -1) (undo-tree-id46808 . -1) (undo-tree-id46809 . -1) (undo-tree-id46810 . -1) (undo-tree-id46811 . -1) (undo-tree-id46812 . -1) (undo-tree-id46813 . -1) (undo-tree-id46814 . -1) (undo-tree-id46815 . -1) (undo-tree-id46816 . -1) (undo-tree-id46817 . -1) (undo-tree-id46818 . -1) (undo-tree-id46819 . -1) (undo-tree-id46820 . -1) (undo-tree-id46821 . -1) (undo-tree-id46822 . -1) (undo-tree-id46823 . -1) (undo-tree-id46824 . -1) (undo-tree-id46825 . -1) (undo-tree-id46826 . -1) (undo-tree-id46827 . -1) (undo-tree-id46828 . -1) (undo-tree-id46829 . -1) (undo-tree-id46830 . -1) (undo-tree-id46831 . -1) (undo-tree-id46832 . -1) (undo-tree-id46833 . -1) (undo-tree-id46834 . -1) (undo-tree-id46835 . -1) (undo-tree-id46836 . -1) (undo-tree-id46837 . -1) (undo-tree-id46838 . -1) (undo-tree-id46839 . -1) (undo-tree-id46840 . -1) (undo-tree-id46841 . -1) (undo-tree-id46842 . -1) (undo-tree-id46843 . -1) (undo-tree-id46844 . -1) (undo-tree-id46845 . -1) (undo-tree-id46846 . -1) (undo-tree-id46847 . -1) (undo-tree-id46848 . -1) (undo-tree-id46849 . -1) (undo-tree-id46850 . -1) (undo-tree-id46851 . -1) (undo-tree-id46852 . -1) (undo-tree-id46853 . -1) (undo-tree-id46854 . -1) (undo-tree-id46855 . -1) (undo-tree-id46856 . -1) (undo-tree-id46857 . -1) (undo-tree-id46858 . -1) (undo-tree-id46859 . -1) (undo-tree-id46860 . -1) (undo-tree-id46861 . -1) (undo-tree-id46862 . -1) (undo-tree-id46863 . -1) (undo-tree-id46864 . -1) (undo-tree-id46865 . -1) (undo-tree-id46866 . -1) (undo-tree-id46867 . -1) (undo-tree-id46868 . -1) (undo-tree-id46869 . -1) (undo-tree-id46870 . -1) (undo-tree-id46871 . -1) (undo-tree-id46872 . -1) (undo-tree-id46873 . -1) (undo-tree-id46874 . -1) (undo-tree-id46875 . -1) (undo-tree-id46876 . -1) (undo-tree-id46877 . -1) (undo-tree-id46878 . -1) (undo-tree-id46879 . -1) (undo-tree-id46880 . -1) (undo-tree-id46881 . -1) (undo-tree-id46882 . -1) (undo-tree-id46883 . -1) (undo-tree-id46884 . -1) (undo-tree-id46885 . -1) (undo-tree-id46886 . -1) (undo-tree-id46887 . -1) (undo-tree-id46888 . -1) (undo-tree-id46889 . -1) (undo-tree-id46890 . -1) (undo-tree-id46891 . -1) (undo-tree-id46892 . -1) (undo-tree-id46893 . -1) (undo-tree-id46894 . -1) (undo-tree-id46895 . -1) (undo-tree-id46896 . -1) (undo-tree-id46897 . -1) (undo-tree-id46898 . -1) (undo-tree-id46899 . -1) (undo-tree-id46900 . -1) (undo-tree-id46901 . -1) (undo-tree-id46902 . -1) (undo-tree-id46903 . -1) (undo-tree-id46904 . -1) (undo-tree-id46905 . -1) (undo-tree-id46906 . -1) (undo-tree-id46907 . -1) (undo-tree-id46908 . -1) (undo-tree-id46909 . -1) (undo-tree-id46910 . -1) (undo-tree-id46911 . -1) (undo-tree-id46912 . -1) (undo-tree-id46913 . -1) (undo-tree-id46914 . -1) (undo-tree-id46915 . -1) (undo-tree-id46916 . -1) (undo-tree-id46917 . -1) (undo-tree-id46918 . -1) (undo-tree-id46919 . -1) (undo-tree-id46920 . -1) (undo-tree-id46921 . -1) (undo-tree-id46922 . -1) (undo-tree-id46923 . -1) (undo-tree-id46924 . -1) (undo-tree-id46925 . -1) (undo-tree-id46926 . -1) (undo-tree-id46927 . -1) (undo-tree-id46928 . -1) (undo-tree-id46929 . -1) (undo-tree-id46930 . -1) (undo-tree-id46931 . -1) (undo-tree-id46932 . -1) (undo-tree-id46933 . -1) (undo-tree-id46934 . -1) (undo-tree-id46935 . -1) (undo-tree-id46936 . -1) (undo-tree-id46937 . -1) (undo-tree-id46938 . -1) (undo-tree-id46939 . -1) (undo-tree-id46940 . -1) (undo-tree-id46941 . -1) (undo-tree-id46942 . -1) (undo-tree-id46943 . -1) (undo-tree-id46944 . -1) (undo-tree-id46945 . -1) (undo-tree-id46946 . -1) (undo-tree-id46947 . -1) (undo-tree-id46948 . -1) (undo-tree-id46949 . -1) (undo-tree-id46950 . -1) (undo-tree-id46951 . -1) (undo-tree-id46952 . -1) (undo-tree-id46953 . -1) (undo-tree-id46954 . -1) (undo-tree-id46955 . -1) (undo-tree-id46956 . -1) (undo-tree-id46957 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5105) (undo-tree-id46958 . -1) (undo-tree-id46959 . -1) (undo-tree-id46960 . -1) (undo-tree-id46961 . -1) (undo-tree-id46962 . -1) (undo-tree-id46963 . -1) (undo-tree-id46964 . -1) (undo-tree-id46965 . -1) (undo-tree-id46966 . -1) (undo-tree-id46967 . -1) (undo-tree-id46968 . -1) (undo-tree-id46969 . -1) (undo-tree-id46970 . -1) (undo-tree-id46971 . -1) (undo-tree-id46972 . -1) (undo-tree-id46973 . -1) (undo-tree-id46974 . -1) (undo-tree-id46975 . -1) (undo-tree-id46976 . -1) (undo-tree-id46977 . -1) (undo-tree-id46978 . -1) (undo-tree-id46979 . -1) (undo-tree-id46980 . -1) (undo-tree-id46981 . -1) (undo-tree-id46982 . -1) (undo-tree-id46983 . -1) (undo-tree-id46984 . -1) (undo-tree-id46985 . -1) (undo-tree-id46986 . -1) (undo-tree-id46987 . -1) (undo-tree-id46988 . -1) (undo-tree-id46989 . -1) (undo-tree-id46990 . -1) (undo-tree-id46991 . -1) (undo-tree-id46992 . -1) (undo-tree-id46993 . -1) (undo-tree-id46994 . -1) (undo-tree-id46995 . -1) (undo-tree-id46996 . -1) (undo-tree-id46997 . -1) (undo-tree-id46998 . -1) (undo-tree-id46999 . -1) (undo-tree-id47000 . -1) (undo-tree-id47001 . -1) (undo-tree-id47002 . -1) (undo-tree-id47003 . -1) (undo-tree-id47004 . -1) (undo-tree-id47005 . -1) (undo-tree-id47006 . -1) (undo-tree-id47007 . -1) (undo-tree-id47008 . -1) (undo-tree-id47009 . -1) (undo-tree-id47010 . -1) (undo-tree-id47011 . -1) (undo-tree-id47012 . -1) (undo-tree-id47013 . -1) (undo-tree-id47014 . -1) (undo-tree-id47015 . -1) (undo-tree-id47016 . -1) (undo-tree-id47017 . -1) (undo-tree-id47018 . -1) (undo-tree-id47019 . -1) (undo-tree-id47020 . -1) (undo-tree-id47021 . -1) (undo-tree-id47022 . -1) (undo-tree-id47023 . -1) (undo-tree-id47024 . -1) (undo-tree-id47025 . -1) (undo-tree-id47026 . -1) (undo-tree-id47027 . -1) (undo-tree-id47028 . -1) (undo-tree-id47029 . -1) (undo-tree-id47030 . -1) (undo-tree-id47031 . -1) (undo-tree-id47032 . -1) (undo-tree-id47033 . -1) (undo-tree-id47034 . -1) (undo-tree-id47035 . -1) (undo-tree-id47036 . -1) (undo-tree-id47037 . -1) (undo-tree-id47038 . -1) (undo-tree-id47039 . -1) (undo-tree-id47040 . -1) (undo-tree-id47041 . -1) (undo-tree-id47042 . -1) (undo-tree-id47043 . -1) (undo-tree-id47044 . -1) (undo-tree-id47045 . -1) (undo-tree-id47046 . -1) (undo-tree-id47047 . -1) (undo-tree-id47048 . -1) (undo-tree-id47049 . -1) (undo-tree-id47050 . -1) (undo-tree-id47051 . -1) (undo-tree-id47052 . -1) (undo-tree-id47053 . -1) (undo-tree-id47054 . -1) (undo-tree-id47055 . -1) (undo-tree-id47056 . -1) (undo-tree-id47057 . -1) (undo-tree-id47058 . -1) (undo-tree-id47059 . -1) (undo-tree-id47060 . -1) (undo-tree-id47061 . -1) (undo-tree-id47062 . -1) (undo-tree-id47063 . -1) (undo-tree-id47064 . -1) (undo-tree-id47065 . -1) (undo-tree-id47066 . -1) (undo-tree-id47067 . -1) (undo-tree-id47068 . -1) (undo-tree-id47069 . -1) (undo-tree-id47070 . -1) (undo-tree-id47071 . -1) (undo-tree-id47072 . -1) (undo-tree-id47073 . -1) (undo-tree-id47074 . -1) (undo-tree-id47075 . -1) (undo-tree-id47076 . -1) (undo-tree-id47077 . -1) (undo-tree-id47078 . -1) (undo-tree-id47079 . -1) (undo-tree-id47080 . -1) (undo-tree-id47081 . -1) (undo-tree-id47082 . -1) (undo-tree-id47083 . -1) (undo-tree-id47084 . -1) (undo-tree-id47085 . -1) (undo-tree-id47086 . -1) (undo-tree-id47087 . -1) (undo-tree-id47088 . -1) (undo-tree-id47089 . -1) (undo-tree-id47090 . -1) (undo-tree-id47091 . -1) (undo-tree-id47092 . -1) (undo-tree-id47093 . -1) (undo-tree-id47094 . -1) (undo-tree-id47095 . -1) (undo-tree-id47096 . -1) (undo-tree-id47097 . -1) (undo-tree-id47098 . -1) (undo-tree-id47099 . -1) (undo-tree-id47100 . -1) (undo-tree-id47101 . -1) (undo-tree-id47102 . -1) (undo-tree-id47103 . -1) (undo-tree-id47104 . -1) (undo-tree-id47105 . -1) (undo-tree-id47106 . -1) (undo-tree-id47107 . -1) (undo-tree-id47108 . -1) (undo-tree-id47109 . -1) (undo-tree-id47110 . -1) (undo-tree-id47111 . -1) (undo-tree-id47112 . -1) (undo-tree-id47113 . -1) (undo-tree-id47114 . -1) (undo-tree-id47115 . -1) (undo-tree-id47116 . -1) (undo-tree-id47117 . -1) (undo-tree-id47118 . -1) (undo-tree-id47119 . -1) (undo-tree-id47120 . -1) (undo-tree-id47121 . -1) (undo-tree-id47122 . -1) (undo-tree-id47123 . -1) (undo-tree-id47124 . -1) (undo-tree-id47125 . -1) (undo-tree-id47126 . -1) (undo-tree-id47127 . -1) (undo-tree-id47128 . -1) (undo-tree-id47129 . -1) (undo-tree-id47130 . -1) (undo-tree-id47131 . -1) (undo-tree-id47132 . -1) (undo-tree-id47133 . -1) (undo-tree-id47134 . -1) (undo-tree-id47135 . -1) (undo-tree-id47136 . -1) (undo-tree-id47137 . -1) (undo-tree-id47138 . -1) (undo-tree-id47139 . -1) (undo-tree-id47140 . -1) (undo-tree-id47141 . -1) (undo-tree-id47142 . -1) (undo-tree-id47143 . -1) (undo-tree-id47144 . -1) (undo-tree-id47145 . -1) (undo-tree-id47146 . -1) (undo-tree-id47147 . -1) (undo-tree-id47148 . -1) (undo-tree-id47149 . -1) (undo-tree-id47150 . -1) (undo-tree-id47151 . -1) (undo-tree-id47152 . -1) (undo-tree-id47153 . -1) (undo-tree-id47154 . -1) (undo-tree-id47155 . -1) (undo-tree-id47156 . -1) (undo-tree-id47157 . -1) (undo-tree-id47158 . -1) (undo-tree-id47159 . -1) (undo-tree-id47160 . -1) (undo-tree-id47161 . -1) (undo-tree-id47162 . -1) (undo-tree-id47163 . -1) (undo-tree-id47164 . -1) (undo-tree-id47165 . -1) (undo-tree-id47166 . -1) (undo-tree-id47167 . -1) (undo-tree-id47168 . -1) (undo-tree-id47169 . -1) (undo-tree-id47170 . -1) (undo-tree-id47171 . -1) (undo-tree-id47172 . -1) (undo-tree-id47173 . -1) 5103) nil (25767 12147 46044 730000) 0 nil])
([nil nil ((5105 . 5106) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5105)) nil (25767 12147 44541 778000) 0 nil])
([nil nil ((5158 . 5159) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5158) (undo-tree-id46656 . -1) (undo-tree-id46657 . -1) (undo-tree-id46658 . -1)) nil (25767 12147 44540 639000) 0 nil])
([nil nil ((#(">>> X_new = preprocess([\"How are yo\"])
>>> Y_pred = model.predict_classes(X_new)
>>> tokenizer.sequences_to_texts(Y_pred + 1)[0][-1] # 1st sentence, last
char
'u'

" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 6 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 9 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 39 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 45 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 49 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 65 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 66 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 73 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 76 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 79 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 81 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 98 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 104 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 105 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 107 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 108 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 113 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 115 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 116 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 120 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 154 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 159 161 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 161 162 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 162 163 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 163 164 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5160) (undo-tree-id46509 . -163) (undo-tree-id46510 . -163) (undo-tree-id46511 . -163) (undo-tree-id46512 . -163) (undo-tree-id46513 . -163) (undo-tree-id46514 . -163) (undo-tree-id46515 . -163) (undo-tree-id46516 . -163) (undo-tree-id46517 . -163) (undo-tree-id46518 . -163) (undo-tree-id46519 . -163) (undo-tree-id46520 . -163) (undo-tree-id46521 . -163) (undo-tree-id46522 . -163) (undo-tree-id46523 . -163) (undo-tree-id46524 . -163) (undo-tree-id46525 . -163) (undo-tree-id46526 . -163) (undo-tree-id46527 . -163) (undo-tree-id46528 . -163) (undo-tree-id46529 . -163) (undo-tree-id46530 . -163) (undo-tree-id46531 . -163) (undo-tree-id46532 . -163) (undo-tree-id46533 . -162) (undo-tree-id46534 . -163) (undo-tree-id46535 . -163) (undo-tree-id46536 . -163) (undo-tree-id46537 . -163) (undo-tree-id46538 . -163) (undo-tree-id46539 . -163) (undo-tree-id46540 . -163) (undo-tree-id46541 . -163) (undo-tree-id46542 . -163) (undo-tree-id46543 . -163) (undo-tree-id46544 . -163) (undo-tree-id46545 . -163) (undo-tree-id46546 . -163) (undo-tree-id46547 . -163) (undo-tree-id46548 . -163) (undo-tree-id46549 . -163) (undo-tree-id46550 . -164) (undo-tree-id46551 . 119) (undo-tree-id46552 . -49) (undo-tree-id46553 . 152) (undo-tree-id46554 . -22) (undo-tree-id46555 . -163) (undo-tree-id46556 . -163) (undo-tree-id46557 . -163) (undo-tree-id46558 . -163) (undo-tree-id46559 . -163) (undo-tree-id46560 . -163) (undo-tree-id46561 . -163) (undo-tree-id46562 . -161) (undo-tree-id46563 . -161) (undo-tree-id46564 . -161) (undo-tree-id46565 . -161) (undo-tree-id46566 . -161) (undo-tree-id46567 . -161) (undo-tree-id46568 . -156) (undo-tree-id46569 . -156) (undo-tree-id46570 . -156) (undo-tree-id46571 . -156) (undo-tree-id46572 . -156) (undo-tree-id46573 . -156) (undo-tree-id46574 . -83) (undo-tree-id46575 . -83) (undo-tree-id46576 . -83) (undo-tree-id46577 . -83) (undo-tree-id46578 . -83) (undo-tree-id46579 . -83) (undo-tree-id46580 . -83) (undo-tree-id46581 . -83) (undo-tree-id46582 . -83) (undo-tree-id46583 . -83) (undo-tree-id46584 . -83) (undo-tree-id46585 . -41) (undo-tree-id46586 . -41) (undo-tree-id46587 . -41) (undo-tree-id46588 . -41) (undo-tree-id46589 . -41) (undo-tree-id46590 . -41) (undo-tree-id46591 . -41) (undo-tree-id46592 . -41) (undo-tree-id46593 . -41) (undo-tree-id46594 . -41) (undo-tree-id46595 . -41) (undo-tree-id46596 . -2) (undo-tree-id46597 . -2) (undo-tree-id46598 . -2) (undo-tree-id46599 . -2) (undo-tree-id46600 . -2) (undo-tree-id46601 . -2) (undo-tree-id46602 . -2) (undo-tree-id46603 . -2) (undo-tree-id46604 . -2) (undo-tree-id46605 . -2) (undo-tree-id46606 . -2) (undo-tree-id46607 . -164) (undo-tree-id46608 . -163) (undo-tree-id46609 . -39) (undo-tree-id46610 . -39) (undo-tree-id46611 . -39) (undo-tree-id46612 . -39) (undo-tree-id46613 . -39) (undo-tree-id46614 . -39) (undo-tree-id46615 . -39) (undo-tree-id46616 . -39) (undo-tree-id46617 . -39) (undo-tree-id46618 . -39) (undo-tree-id46619 . -39) (undo-tree-id46620 . -81) (undo-tree-id46621 . -81) (undo-tree-id46622 . -81) (undo-tree-id46623 . -81) (undo-tree-id46624 . -81) (undo-tree-id46625 . -81) (undo-tree-id46626 . -81) (undo-tree-id46627 . -81) (undo-tree-id46628 . -81) (undo-tree-id46629 . -81) (undo-tree-id46630 . -81) (undo-tree-id46631 . -154) (undo-tree-id46632 . -154) (undo-tree-id46633 . -154) (undo-tree-id46634 . -154) (undo-tree-id46635 . -154) (undo-tree-id46636 . -154) (undo-tree-id46637 . -154) (undo-tree-id46638 . -154) (undo-tree-id46639 . -154) (undo-tree-id46640 . -154) (undo-tree-id46641 . -154) (undo-tree-id46642 . -159) (undo-tree-id46643 . -159) (undo-tree-id46644 . -159) (undo-tree-id46645 . -159) (undo-tree-id46646 . -159) (undo-tree-id46647 . -159) (undo-tree-id46648 . -163) (undo-tree-id46649 . -163) (undo-tree-id46650 . -163) (undo-tree-id46651 . -163) (undo-tree-id46652 . -163) (undo-tree-id46653 . -163) (undo-tree-id46654 . -163) (undo-tree-id46655 . -164) 5323) nil (25767 12147 44530 459000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5391 . 5392) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -5555) (5391 . 5556)) nil (25767 12147 43650 136000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 5392) (undo-tree-id46485 . -3) (undo-tree-id46486 . -3) (undo-tree-id46487 . -3) (undo-tree-id46488 . -4) (undo-tree-id46489 . -3) (undo-tree-id46490 . -4) (undo-tree-id46491 . -4) (undo-tree-id46492 . -4) (undo-tree-id46493 . -4) (undo-tree-id46494 . -4) (undo-tree-id46495 . -4) (undo-tree-id46496 . -4) (undo-tree-id46497 . -4) (undo-tree-id46498 . -4) (undo-tree-id46499 . -4) (undo-tree-id46500 . -4) (undo-tree-id46501 . -3) (undo-tree-id46502 . -3) (undo-tree-id46503 . -3) (undo-tree-id46504 . -3) (undo-tree-id46505 . -3) (undo-tree-id46506 . -3) (undo-tree-id46507 . -3) (undo-tree-id46508 . -4) 5395) nil (25767 12147 43648 30000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5427) (undo-tree-id46481 . -3) (undo-tree-id46482 . 4) (undo-tree-id46483 . -1) (undo-tree-id46484 . -4)) nil (25767 12147 43593 26000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5465) (undo-tree-id46477 . -3) (undo-tree-id46478 . 4) (undo-tree-id46479 . -1) (undo-tree-id46480 . -4)) nil (25767 12147 43589 351000) 0 nil])
([nil nil ((5538 . 5539) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -5538) (undo-tree-id46469 . -1) (5533 . 5534) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -5533) (undo-tree-id46470 . -1) (undo-tree-id46471 . -1) (undo-tree-id46472 . -1) (undo-tree-id46473 . -1) (undo-tree-id46474 . -1) (undo-tree-id46475 . -1) (undo-tree-id46476 . -1) 5465) nil (25767 12147 43581 483000) 0 nil])
([nil nil ((5513 . 5514) (t 25767 12147 145406 7000)) nil (25767 12158 832349 682000) 0 nil])
([nil nil ((5464 . 5465) 5427) nil (25767 12158 832344 459000) 0 nil])
([nil nil ((#("Success! The model guessed right. Now let’s use this model to generate
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5160) (undo-tree-id47782 . -70) (undo-tree-id47783 . -71) (undo-tree-id47784 . -71) (undo-tree-id47785 . -71) (undo-tree-id47786 . -71) (undo-tree-id47787 . -71) (undo-tree-id47788 . -71) (undo-tree-id47789 . -62) (undo-tree-id47790 . -62) (undo-tree-id47791 . -62) (undo-tree-id47792 . -62) (undo-tree-id47793 . -62) (undo-tree-id47794 . -62) (undo-tree-id47795 . -71) (t 25767 12158 885500 751000)) nil (25767 12175 456489 76000) 0 nil])
([nil nil ((#("new text.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 5160) (undo-tree-id47774 . -9) (undo-tree-id47775 . -10) (undo-tree-id47776 . -10) (undo-tree-id47777 . -10) (undo-tree-id47778 . -10) (undo-tree-id47779 . -10) (undo-tree-id47780 . -10) (undo-tree-id47781 . -10)) nil (25767 12175 456479 146000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5159) (undo-tree-id47548 . -1) (undo-tree-id47549 . -1) (undo-tree-id47550 . -1) (undo-tree-id47551 . -1) (undo-tree-id47552 . -1) (undo-tree-id47553 . -1) (undo-tree-id47554 . -1) (undo-tree-id47555 . -1) (undo-tree-id47556 . -1) (undo-tree-id47557 . -1) (undo-tree-id47558 . -1) (undo-tree-id47559 . -1) (undo-tree-id47560 . -1) (undo-tree-id47561 . -1) (undo-tree-id47562 . -1) (undo-tree-id47563 . -1) (undo-tree-id47564 . -1) (undo-tree-id47565 . -1) (undo-tree-id47566 . -1) (undo-tree-id47567 . -1) (undo-tree-id47568 . -1) (undo-tree-id47569 . -1) (undo-tree-id47570 . -1) (undo-tree-id47571 . -1) (undo-tree-id47572 . -1) (undo-tree-id47573 . -1) (undo-tree-id47574 . -1) (undo-tree-id47575 . -1) (undo-tree-id47576 . -1) (undo-tree-id47577 . -1) (undo-tree-id47578 . -1) (undo-tree-id47579 . -1) (undo-tree-id47580 . -1) (undo-tree-id47581 . -1) (undo-tree-id47582 . -1) (undo-tree-id47583 . -1) (undo-tree-id47584 . -1) (undo-tree-id47585 . -1) (undo-tree-id47586 . -1) (undo-tree-id47587 . -1) (undo-tree-id47588 . -1) (undo-tree-id47589 . -1) (undo-tree-id47590 . -1) (undo-tree-id47591 . -1) (undo-tree-id47592 . -1) (undo-tree-id47593 . -1) (undo-tree-id47594 . -1) (undo-tree-id47595 . -1) (undo-tree-id47596 . -1) (undo-tree-id47597 . -1) (undo-tree-id47598 . -1) (undo-tree-id47599 . -1) (undo-tree-id47600 . -1) (undo-tree-id47601 . -1) (undo-tree-id47602 . -1) (undo-tree-id47603 . -1) (undo-tree-id47604 . -1) (undo-tree-id47605 . -1) (undo-tree-id47606 . -1) (undo-tree-id47607 . -1) (undo-tree-id47608 . -1) (undo-tree-id47609 . -1) (undo-tree-id47610 . -1) (undo-tree-id47611 . -1) (undo-tree-id47612 . -1) (undo-tree-id47613 . -1) (undo-tree-id47614 . -1) (undo-tree-id47615 . -1) (undo-tree-id47616 . -1) (undo-tree-id47617 . -1) (undo-tree-id47618 . -1) (undo-tree-id47619 . -1) (undo-tree-id47620 . -1) (undo-tree-id47621 . -1) (undo-tree-id47622 . -1) (undo-tree-id47623 . -1) (undo-tree-id47624 . -1) (undo-tree-id47625 . -1) (undo-tree-id47626 . -1) (undo-tree-id47627 . -1) (undo-tree-id47628 . -1) (undo-tree-id47629 . -1) (undo-tree-id47630 . -1) (undo-tree-id47631 . -1) (undo-tree-id47632 . -1) (undo-tree-id47633 . -1) (undo-tree-id47634 . -1) (undo-tree-id47635 . -1) (undo-tree-id47636 . -1) (undo-tree-id47637 . -1) (undo-tree-id47638 . -1) (undo-tree-id47639 . -1) (undo-tree-id47640 . -1) (undo-tree-id47641 . -1) (undo-tree-id47642 . -1) (undo-tree-id47643 . -1) (undo-tree-id47644 . -1) (undo-tree-id47645 . -1) (undo-tree-id47646 . -1) (undo-tree-id47647 . -1) (undo-tree-id47648 . -1) (undo-tree-id47649 . -1) (undo-tree-id47650 . -1) (undo-tree-id47651 . -1) (undo-tree-id47652 . -1) (undo-tree-id47653 . -1) (undo-tree-id47654 . -1) (undo-tree-id47655 . -1) (undo-tree-id47656 . -1) (undo-tree-id47657 . -1) (undo-tree-id47658 . -1) (undo-tree-id47659 . -1) (undo-tree-id47660 . -1) (undo-tree-id47661 . -1) (undo-tree-id47662 . -1) (undo-tree-id47663 . -1) (undo-tree-id47664 . -1) (undo-tree-id47665 . -1) (undo-tree-id47666 . -1) (undo-tree-id47667 . -1) (undo-tree-id47668 . -1) (undo-tree-id47669 . -1) (undo-tree-id47670 . -1) (undo-tree-id47671 . -1) (undo-tree-id47672 . -1) (undo-tree-id47673 . -1) (undo-tree-id47674 . -1) (undo-tree-id47675 . -1) (undo-tree-id47676 . -1) (undo-tree-id47677 . -1) (undo-tree-id47678 . -1) (undo-tree-id47679 . -1) (undo-tree-id47680 . -1) (undo-tree-id47681 . -1) (undo-tree-id47682 . -1) (undo-tree-id47683 . -1) (undo-tree-id47684 . -1) (undo-tree-id47685 . -1) (undo-tree-id47686 . -1) (undo-tree-id47687 . -1) (undo-tree-id47688 . -1) (undo-tree-id47689 . -1) (undo-tree-id47690 . -1) (undo-tree-id47691 . -1) (undo-tree-id47692 . -1) (undo-tree-id47693 . -1) (undo-tree-id47694 . -1) (undo-tree-id47695 . -1) (undo-tree-id47696 . -1) (undo-tree-id47697 . -1) (undo-tree-id47698 . -1) (undo-tree-id47699 . -1) (undo-tree-id47700 . -1) (undo-tree-id47701 . -1) (undo-tree-id47702 . -1) (undo-tree-id47703 . -1) (undo-tree-id47704 . -1) (undo-tree-id47705 . -1) (undo-tree-id47706 . -1) (undo-tree-id47707 . -1) (undo-tree-id47708 . -1) (undo-tree-id47709 . -1) (undo-tree-id47710 . -1) (undo-tree-id47711 . -1) (undo-tree-id47712 . -1) (undo-tree-id47713 . -1) (undo-tree-id47714 . -1) (undo-tree-id47715 . -1) (undo-tree-id47716 . -1) (undo-tree-id47717 . -1) (undo-tree-id47718 . -1) (undo-tree-id47719 . -1) (undo-tree-id47720 . -1) (undo-tree-id47721 . -1) (undo-tree-id47722 . -1) (undo-tree-id47723 . -1) (undo-tree-id47724 . -1) (undo-tree-id47725 . -1) (undo-tree-id47726 . -1) (undo-tree-id47727 . -1) (undo-tree-id47728 . -1) (undo-tree-id47729 . -1) (undo-tree-id47730 . -1) (undo-tree-id47731 . -1) (undo-tree-id47732 . -1) (undo-tree-id47733 . -1) (undo-tree-id47734 . -1) (undo-tree-id47735 . -1) (undo-tree-id47736 . -1) (undo-tree-id47737 . -1) (undo-tree-id47738 . -1) (undo-tree-id47739 . -1) (undo-tree-id47740 . -1) (undo-tree-id47741 . -1) (undo-tree-id47742 . -1) (undo-tree-id47743 . -1) (undo-tree-id47744 . -1) (undo-tree-id47745 . -1) (undo-tree-id47746 . -1) (undo-tree-id47747 . -1) (undo-tree-id47748 . -1) (undo-tree-id47749 . -1) (undo-tree-id47750 . -1) (undo-tree-id47751 . -1) (undo-tree-id47752 . -1) (undo-tree-id47753 . -1) (undo-tree-id47754 . -1) (undo-tree-id47755 . -1) (undo-tree-id47756 . -1) (undo-tree-id47757 . -1) (undo-tree-id47758 . -1) (undo-tree-id47759 . -1) (undo-tree-id47760 . -1) (undo-tree-id47761 . -1) (undo-tree-id47762 . -1) (undo-tree-id47763 . -1) (undo-tree-id47764 . -1) (undo-tree-id47765 . -1) (undo-tree-id47766 . -1) (undo-tree-id47767 . -1) (undo-tree-id47768 . -1) (undo-tree-id47769 . -1) (undo-tree-id47770 . -1) (undo-tree-id47771 . -1) (undo-tree-id47772 . -1) (undo-tree-id47773 . -1)) nil (25767 12175 456465 152000) 0 nil])
([nil nil ((5194 . 5195) 5160) nil (25767 12175 456133 866000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 5475) (undo-tree-id47796 . -1) (undo-tree-id47797 . -1) (undo-tree-id47798 . -1) (undo-tree-id47799 . -1) (undo-tree-id47800 . -1) (undo-tree-id47801 . -1) (undo-tree-id47802 . -1) (undo-tree-id47803 . -1) (5477 . 5479) (5476 . 5477) (5475 . 5476) (t 25767 12175 509639 304000) 5038) nil (25767 12189 962921 668000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7097 . 7098) (nil fontified nil 7087 . 7098) (nil fontified nil 7050 . 7087) (nil fontified nil 7025 . 7050) (nil fontified nil 6973 . 7025) (nil fontified nil 6914 . 6973) (nil fontified nil 6840 . 6914) (nil fontified nil 6784 . 6840) (nil fontified nil 6716 . 6784) (nil fontified nil 6663 . 6716) (nil fontified nil 6621 . 6663) (nil fontified nil 6594 . 6621) (nil fontified nil 6558 . 6594) (nil fontified nil 6522 . 6558) (nil fontified nil 6451 . 6522) (nil fontified nil 6374 . 6451) (nil fontified nil 6299 . 6374) (nil fontified nil 6231 . 6299) (nil fontified nil 6158 . 6231) (nil fontified nil 6084 . 6158) (nil fontified nil 6014 . 6084) (nil fontified nil 5948 . 6014) (nil fontified nil 5877 . 5948) (nil fontified nil 5807 . 5877) (nil fontified nil 5739 . 5807) (nil fontified nil 5662 . 5739) (nil fontified nil 5583 . 5662) (nil fontified nil 5514 . 5583) (nil fontified nil 5479 . 5514) (5479 . 7098) (t 25767 12190 17764 298000)) nil (25767 12240 258039 67000) 0 nil])
([nil nil ((7098 . 7100)) nil (25767 12240 258034 520000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8058 . 8059) (nil fontified nil 8044 . 8059) (nil fontified nil 7970 . 8044) (nil fontified nil 7898 . 7970) (nil fontified nil 7828 . 7898) (nil fontified nil 7757 . 7828) (nil fontified nil 7692 . 7757) (nil fontified nil 7617 . 7692) (nil fontified nil 7543 . 7617) (nil fontified nil 7470 . 7543) (nil fontified nil 7461 . 7470) (nil fontified nil 7429 . 7461) (nil fontified nil 7418 . 7429) (nil fontified nil 7373 . 7418) (nil fontified nil 7348 . 7373) (nil fontified nil 7322 . 7348) (nil fontified nil 7277 . 7322) (nil fontified nil 7226 . 7277) (nil fontified nil 7179 . 7226) (nil fontified nil 7165 . 7179) (nil fontified nil 7100 . 7165) (7100 . 8059)) nil (25767 12240 258033 256000) 0 nil])
([nil nil ((8075 . 8079) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -8075) (undo-tree-id47804 . -1) 8076 (8073 . 8076) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8073 8079 nil nil nil t #s(yas--exit 8097 nil))) #s(yas--exit 8097 nil) 7 nil #s(yas--field 1 8073 8079 nil nil nil t #s(yas--exit 8097 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -8091) (undo-tree-id47805 . -2) (8061 . 8104) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8061) (undo-tree-id47806 . -2) (undo-tree-id47807 . -2) 8063 (8061 . 8063) (8060 . 8061) (8059 . 8060)) nil (25767 12240 258028 74000) 0 nil])
([nil nil ((apply yas--snippet-revive 8061 8108 #s(yas--snippet nil (#s(yas--field 1 8073 8079 nil nil nil t #s(yas--exit 8097 nil))) #s(yas--exit 8097 nil) 7 nil #s(yas--field 1 8073 8079 nil nil nil t #s(yas--exit 8097 nil)) nil nil))) nil (25767 12240 258015 952000) 0 nil])
([nil nil ((8108 . 8109)) nil (25767 12240 258010 461000) 0 nil])
([nil nil ((5479 . 5481) (t 25767 12240 362226 90000)) nil (25767 12331 801421 324000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226]))) . 5479) (undo-tree-id49029 . -1) (undo-tree-id49030 . -1) (undo-tree-id49031 . -1) (undo-tree-id49032 . -1) (undo-tree-id49033 . -1) (undo-tree-id49034 . -1) (undo-tree-id49035 . -1) (undo-tree-id49036 . -1) (undo-tree-id49037 . -1) (undo-tree-id49038 . -1) (undo-tree-id49039 . -1) (undo-tree-id49040 . -1) (undo-tree-id49041 . -1) (undo-tree-id49042 . -1) (undo-tree-id49043 . -1) (undo-tree-id49044 . -1) (undo-tree-id49045 . -1) (undo-tree-id49046 . -1) (undo-tree-id49047 . -1) (undo-tree-id49048 . -1) (undo-tree-id49049 . -1) (undo-tree-id49050 . -1) (undo-tree-id49051 . -1) (undo-tree-id49052 . -1) (undo-tree-id49053 . -1) (undo-tree-id49054 . -1) (undo-tree-id49055 . -1) (undo-tree-id49056 . -1) (undo-tree-id49057 . -1)) nil (25767 12331 801419 503000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 5479) (undo-tree-id49020 . -1) (undo-tree-id49021 . -1) (undo-tree-id49022 . -1) (undo-tree-id49023 . -1) (undo-tree-id49024 . -1) (undo-tree-id49025 . -1) (undo-tree-id49026 . -1) (undo-tree-id49027 . -1) (undo-tree-id49028 . -1)) nil (25767 12331 801402 574000) 0 nil])
([nil nil ((nil keymap (keymap) 5477 . 5478) (nil face org-level-1 5477 . 5478) (nil line-prefix #("  " 0 2 (face org-indent)) 5477 . 5478) (nil wrap-prefix #("  " 0 2 (face org-indent)) 5477 . 5478) (nil fontified nil 5477 . 5478) (5477 . 5478) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 5477) (undo-tree-id48861 . -1) (undo-tree-id48862 . -1) (undo-tree-id48863 . -1) (undo-tree-id48864 . -1) (undo-tree-id48865 . -1) (undo-tree-id48866 . -1) (undo-tree-id48867 . -1) (undo-tree-id48868 . -1) (undo-tree-id48869 . -1) (undo-tree-id48870 . -1) (undo-tree-id48871 . -1) (undo-tree-id48872 . -1) (undo-tree-id48873 . -1) (undo-tree-id48874 . -1) (undo-tree-id48875 . -1) (undo-tree-id48876 . -1) (undo-tree-id48877 . -1) (undo-tree-id48878 . -1) (undo-tree-id48879 . -1) (undo-tree-id48880 . -1) (undo-tree-id48881 . -1) (undo-tree-id48882 . -1) (undo-tree-id48883 . -1) (undo-tree-id48884 . -1) (undo-tree-id48885 . -1) (undo-tree-id48886 . -1) (undo-tree-id48887 . -1) (undo-tree-id48888 . -1) (undo-tree-id48889 . -1) (undo-tree-id48890 . -1) (undo-tree-id48891 . -1) (undo-tree-id48892 . -1) (undo-tree-id48893 . -1) (undo-tree-id48894 . -1) (undo-tree-id48895 . -1) (undo-tree-id48896 . -1) (undo-tree-id48897 . -1) (undo-tree-id48898 . -1) (undo-tree-id48899 . -1) (undo-tree-id48900 . -1) (undo-tree-id48901 . -1) (undo-tree-id48902 . -1) (undo-tree-id48903 . -1) (undo-tree-id48904 . -1) (undo-tree-id48905 . -1) (undo-tree-id48906 . -1) (undo-tree-id48907 . -1) (undo-tree-id48908 . -1) (undo-tree-id48909 . -1) (undo-tree-id48910 . -1) (undo-tree-id48911 . -1) (undo-tree-id48912 . -1) (undo-tree-id48913 . -1) (undo-tree-id48914 . -1) (undo-tree-id48915 . -1) (undo-tree-id48916 . -1) (undo-tree-id48917 . -1) (undo-tree-id48918 . -1) (undo-tree-id48919 . -1) (undo-tree-id48920 . -1) (undo-tree-id48921 . -1) (undo-tree-id48922 . -1) (undo-tree-id48923 . -1) (undo-tree-id48924 . -1) (undo-tree-id48925 . -1) (undo-tree-id48926 . -1) (undo-tree-id48927 . -1) (undo-tree-id48928 . -1) (undo-tree-id48929 . -1) (undo-tree-id48930 . -1) (undo-tree-id48931 . -1) (undo-tree-id48932 . -1) (undo-tree-id48933 . -1) (undo-tree-id48934 . -1) (undo-tree-id48935 . -1) (undo-tree-id48936 . -1) (undo-tree-id48937 . -1) (undo-tree-id48938 . -1) (undo-tree-id48939 . -1) (undo-tree-id48940 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -5478) (undo-tree-id48941 . -1) (undo-tree-id48942 . -1) (undo-tree-id48943 . -1) (undo-tree-id48944 . -1) (undo-tree-id48945 . -1) (undo-tree-id48946 . -1) (undo-tree-id48947 . -1) (undo-tree-id48948 . -1) (undo-tree-id48949 . -1) (undo-tree-id48950 . -1) (undo-tree-id48951 . -1) (undo-tree-id48952 . -1) (undo-tree-id48953 . -1) (undo-tree-id48954 . -1) (undo-tree-id48955 . -1) (undo-tree-id48956 . -1) (undo-tree-id48957 . -1) (undo-tree-id48958 . -1) (undo-tree-id48959 . -1) (undo-tree-id48960 . -1) (undo-tree-id48961 . -1) (undo-tree-id48962 . -1) (undo-tree-id48963 . -1) (undo-tree-id48964 . -1) (undo-tree-id48965 . -1) (undo-tree-id48966 . -1) (undo-tree-id48967 . -1) (undo-tree-id48968 . -1) (undo-tree-id48969 . -1) (undo-tree-id48970 . -1) (undo-tree-id48971 . -1) (undo-tree-id48972 . -1) (undo-tree-id48973 . -1) (undo-tree-id48974 . -1) (undo-tree-id48975 . -1) (undo-tree-id48976 . -1) (undo-tree-id48977 . -1) (undo-tree-id48978 . -1) (undo-tree-id48979 . -1) (undo-tree-id48980 . -1) (undo-tree-id48981 . -1) (undo-tree-id48982 . -1) (undo-tree-id48983 . -1) (undo-tree-id48984 . -1) (undo-tree-id48985 . -1) (undo-tree-id48986 . -1) (undo-tree-id48987 . -1) (undo-tree-id48988 . -1) (undo-tree-id48989 . -1) (undo-tree-id48990 . -1) (undo-tree-id48991 . -1) (undo-tree-id48992 . -1) (undo-tree-id48993 . -1) (undo-tree-id48994 . -1) (undo-tree-id48995 . -1) (undo-tree-id48996 . -1) (undo-tree-id48997 . -1) (undo-tree-id48998 . -1) (undo-tree-id48999 . -1) (undo-tree-id49000 . -1) (undo-tree-id49001 . -1) (undo-tree-id49002 . -1) (undo-tree-id49003 . -1) (undo-tree-id49004 . -1) (undo-tree-id49005 . -1) (undo-tree-id49006 . -1) (undo-tree-id49007 . -1) (undo-tree-id49008 . -1) (undo-tree-id49009 . -1) (undo-tree-id49010 . -1) (undo-tree-id49011 . -1) (undo-tree-id49012 . -1) (undo-tree-id49013 . -1) (undo-tree-id49014 . -1) (undo-tree-id49015 . -1) (undo-tree-id49016 . -1) (undo-tree-id49017 . -1) (undo-tree-id49018 . -1) (undo-tree-id49019 . -1) 5477) nil (25767 12331 801392 105000) 0 nil])
([nil nil ((5514 . 5516) (5513 . 5514)) nil (25767 12331 801297 745000) 0 nil])
([nil nil ((#("To generate new text using the Char-RNN model, we could feed it some
text, make the model predict the most likely next letter, add it at the end of
the text, then give the extended text to the model to guess the next letter,
and so on." 0 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 69 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 148 225 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 225 235 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5516) (undo-tree-id48606 . -234) (undo-tree-id48607 . -234) (undo-tree-id48608 . 235) (undo-tree-id48609 . -234) (undo-tree-id48610 . -1) (undo-tree-id48611 . -1) (undo-tree-id48612 . -1) (undo-tree-id48613 . -1) (undo-tree-id48614 . -1) (undo-tree-id48615 . -1) (undo-tree-id48616 . -235) (undo-tree-id48617 . -234) (undo-tree-id48618 . -1) (undo-tree-id48619 . -1) (undo-tree-id48620 . -1) (undo-tree-id48621 . -1) (undo-tree-id48622 . -1) (undo-tree-id48623 . -1) (undo-tree-id48624 . -1) (undo-tree-id48625 . -1) (undo-tree-id48626 . -1) (undo-tree-id48627 . -1) (undo-tree-id48628 . -1) (undo-tree-id48629 . -1) (undo-tree-id48630 . -1) (undo-tree-id48631 . -1) (undo-tree-id48632 . -1) (undo-tree-id48633 . -1) (undo-tree-id48634 . -10) (undo-tree-id48635 . -10) (undo-tree-id48636 . -10) (undo-tree-id48637 . -10) (undo-tree-id48638 . -10) (undo-tree-id48639 . -10) (undo-tree-id48640 . -10) (undo-tree-id48641 . -10) (undo-tree-id48642 . -10) (undo-tree-id48643 . -10) (undo-tree-id48644 . -10) (undo-tree-id48645 . -10) (undo-tree-id48646 . -10) (undo-tree-id48647 . -10) (undo-tree-id48648 . -10) (undo-tree-id48649 . -10) (undo-tree-id48650 . -10) (undo-tree-id48651 . -10) (undo-tree-id48652 . -10) (undo-tree-id48653 . -10) (undo-tree-id48654 . -10) (undo-tree-id48655 . -68) (undo-tree-id48656 . -68) (undo-tree-id48657 . -68) (undo-tree-id48658 . -68) (undo-tree-id48659 . -68) (undo-tree-id48660 . -68) (undo-tree-id48661 . -68) (undo-tree-id48662 . -68) (undo-tree-id48663 . -68) (undo-tree-id48664 . -68) (undo-tree-id48665 . -68) (undo-tree-id48666 . -68) (undo-tree-id48667 . -68) (undo-tree-id48668 . -68) (undo-tree-id48669 . -68) (undo-tree-id48670 . -68) (undo-tree-id48671 . -81) (undo-tree-id48672 . -81) (undo-tree-id48673 . -81) (undo-tree-id48674 . -81) (undo-tree-id48675 . -81) (undo-tree-id48676 . -81) (undo-tree-id48677 . -81) (undo-tree-id48678 . -81) (undo-tree-id48679 . -81) (undo-tree-id48680 . -81) (undo-tree-id48681 . -81) (undo-tree-id48682 . -81) (undo-tree-id48683 . -81) (undo-tree-id48684 . -81) (undo-tree-id48685 . -81) (undo-tree-id48686 . -81) (undo-tree-id48687 . -81) (undo-tree-id48688 . -81) (undo-tree-id48689 . -81) (undo-tree-id48690 . -81) (undo-tree-id48691 . -81) (undo-tree-id48692 . -147) (undo-tree-id48693 . -147) (undo-tree-id48694 . -147) (undo-tree-id48695 . -147) (undo-tree-id48696 . -147) (undo-tree-id48697 . -147) (undo-tree-id48698 . -147) (undo-tree-id48699 . -147) (undo-tree-id48700 . -147) (undo-tree-id48701 . -147) (undo-tree-id48702 . -147) (undo-tree-id48703 . -147) (undo-tree-id48704 . -147) (undo-tree-id48705 . -147) (undo-tree-id48706 . -147) (undo-tree-id48707 . -147) (undo-tree-id48708 . -147) (undo-tree-id48709 . -147) (undo-tree-id48710 . -147) (undo-tree-id48711 . -147) (undo-tree-id48712 . -147) (undo-tree-id48713 . -147) (undo-tree-id48714 . -147) (undo-tree-id48715 . -147) (undo-tree-id48716 . -147) (undo-tree-id48717 . -147) (undo-tree-id48718 . -147) (undo-tree-id48719 . -147) (undo-tree-id48720 . -147) (undo-tree-id48721 . -147) (undo-tree-id48722 . -147) (undo-tree-id48723 . -160) (undo-tree-id48724 . -160) (undo-tree-id48725 . -160) (undo-tree-id48726 . -160) (undo-tree-id48727 . -160) (undo-tree-id48728 . -160) (undo-tree-id48729 . -160) (undo-tree-id48730 . -160) (undo-tree-id48731 . -160) (undo-tree-id48732 . -160) (undo-tree-id48733 . -160) (undo-tree-id48734 . -160) (undo-tree-id48735 . -160) (undo-tree-id48736 . -160) (undo-tree-id48737 . -160) (undo-tree-id48738 . -160) (undo-tree-id48739 . -160) (undo-tree-id48740 . -160) (undo-tree-id48741 . -160) (undo-tree-id48742 . -160) (undo-tree-id48743 . -160) (undo-tree-id48744 . -160) (undo-tree-id48745 . -160) (undo-tree-id48746 . -160) (undo-tree-id48747 . -160) (undo-tree-id48748 . -160) (undo-tree-id48749 . -160) (undo-tree-id48750 . -160) (undo-tree-id48751 . -160) (undo-tree-id48752 . -160) (undo-tree-id48753 . -160) (undo-tree-id48754 . -159) (undo-tree-id48755 . -159) (undo-tree-id48756 . -159) (undo-tree-id48757 . -159) (undo-tree-id48758 . -159) (undo-tree-id48759 . -159) (undo-tree-id48760 . -159) (undo-tree-id48761 . -159) (undo-tree-id48762 . -159) (undo-tree-id48763 . -159) (undo-tree-id48764 . -159) (undo-tree-id48765 . -159) (undo-tree-id48766 . -159) (undo-tree-id48767 . -159) (undo-tree-id48768 . -159) (undo-tree-id48769 . -159) (undo-tree-id48770 . -159) (undo-tree-id48771 . -159) (undo-tree-id48772 . -159) (undo-tree-id48773 . -159) (undo-tree-id48774 . -159) (undo-tree-id48775 . -158) (undo-tree-id48776 . -158) (undo-tree-id48777 . -158) (undo-tree-id48778 . -158) (undo-tree-id48779 . -158) (undo-tree-id48780 . -158) (undo-tree-id48781 . -158) (undo-tree-id48782 . -158) (undo-tree-id48783 . -158) (undo-tree-id48784 . -158) (undo-tree-id48785 . -158) (undo-tree-id48786 . -158) (undo-tree-id48787 . -158) (undo-tree-id48788 . -158) (undo-tree-id48789 . -158) (undo-tree-id48790 . -158) (undo-tree-id48791 . -157) (undo-tree-id48792 . -157) (undo-tree-id48793 . -157) (undo-tree-id48794 . -157) (undo-tree-id48795 . -157) (undo-tree-id48796 . -157) (undo-tree-id48797 . -157) (undo-tree-id48798 . -157) (undo-tree-id48799 . -157) (undo-tree-id48800 . -157) (undo-tree-id48801 . -157) (undo-tree-id48802 . -157) (undo-tree-id48803 . -157) (undo-tree-id48804 . -157) (undo-tree-id48805 . -157) (undo-tree-id48806 . -157) (undo-tree-id48807 . -157) (undo-tree-id48808 . -157) (undo-tree-id48809 . -157) (undo-tree-id48810 . -157) (undo-tree-id48811 . -157) (undo-tree-id48812 . -157) (undo-tree-id48813 . -157) (undo-tree-id48814 . -157) (undo-tree-id48815 . -157) (undo-tree-id48816 . -157) (undo-tree-id48817 . -157) (undo-tree-id48818 . -157) (undo-tree-id48819 . -157) (undo-tree-id48820 . -157) (undo-tree-id48821 . -157) (undo-tree-id48822 . -221) (undo-tree-id48823 . -221) (undo-tree-id48824 . -221) (undo-tree-id48825 . -221) (undo-tree-id48826 . -221) (undo-tree-id48827 . -221) (undo-tree-id48828 . -221) (undo-tree-id48829 . -221) (undo-tree-id48830 . -221) (undo-tree-id48831 . -221) (undo-tree-id48832 . -221) (undo-tree-id48833 . -221) (undo-tree-id48834 . -221) (undo-tree-id48835 . -221) (undo-tree-id48836 . -221) (undo-tree-id48837 . -221) (undo-tree-id48838 . -221) (undo-tree-id48839 . -221) (undo-tree-id48840 . -221) (undo-tree-id48841 . -221) (undo-tree-id48842 . -221) (undo-tree-id48843 . -221) (undo-tree-id48844 . -221) (undo-tree-id48845 . -221) (undo-tree-id48846 . -221) (undo-tree-id48847 . -221) (undo-tree-id48848 . -221) (undo-tree-id48849 . -221) (undo-tree-id48850 . -221) (undo-tree-id48851 . -221) (undo-tree-id48852 . -221) (undo-tree-id48853 . -234) (undo-tree-id48854 . -234) (undo-tree-id48855 . -234) (undo-tree-id48856 . -234) (undo-tree-id48857 . -234) (undo-tree-id48858 . -234) (undo-tree-id48859 . -234) (undo-tree-id48860 . -235) 5750) nil (25767 12331 801289 446000) 0 nil])
([nil nil ((5516 . 5517)) nil (25767 12331 801147 59000) 0 nil])
([nil nil ((#(" But in practice this often leads to the same words being
" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 5517) (undo-tree-id48592 . -57) (undo-tree-id48593 . 58) (undo-tree-id48594 . 58) (undo-tree-id48595 . -1) (undo-tree-id48596 . -1) (undo-tree-id48597 . -1) (undo-tree-id48598 . -1) (undo-tree-id48599 . -1) (undo-tree-id48600 . -1) (undo-tree-id48601 . -1) (undo-tree-id48602 . -1) (undo-tree-id48603 . -1) (undo-tree-id48604 . -1) (undo-tree-id48605 . -58) 5518) nil (25767 12331 801145 622000) 0 nil])
([nil nil ((#("repeated over and over again." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5517) (undo-tree-id48565 . -28) (undo-tree-id48566 . 29) (undo-tree-id48567 . 29) (undo-tree-id48568 . -1) (undo-tree-id48569 . -1) (undo-tree-id48570 . -1) (undo-tree-id48571 . -1) (undo-tree-id48572 . -1) (undo-tree-id48573 . -1) (undo-tree-id48574 . -1) (undo-tree-id48575 . -1) (undo-tree-id48576 . -1) (undo-tree-id48577 . -1) (undo-tree-id48578 . -1) (undo-tree-id48579 . -1) (undo-tree-id48580 . -1) (undo-tree-id48581 . -1) (undo-tree-id48582 . -1) (undo-tree-id48583 . -1) (undo-tree-id48584 . -1) (undo-tree-id48585 . -1) (undo-tree-id48586 . -1) (undo-tree-id48587 . -1) (undo-tree-id48588 . -1) (undo-tree-id48589 . -1) (undo-tree-id48590 . -1) (undo-tree-id48591 . -29)) nil (25767 12331 801136 578000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 5517) (undo-tree-id48561 . 1) (undo-tree-id48562 . 1) (undo-tree-id48563 . -1) (undo-tree-id48564 . -1)) nil (25767 12331 801121 198000) 0 nil])
([nil nil ((5515 . 5516) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5515) (undo-tree-id47937 . -1) (undo-tree-id47938 . -1) (undo-tree-id47939 . -1) (undo-tree-id47940 . -1) (undo-tree-id47941 . -1) (undo-tree-id47942 . -1) (undo-tree-id47943 . -1) (undo-tree-id47944 . -1) (undo-tree-id47945 . -1) (undo-tree-id47946 . -1) (undo-tree-id47947 . -1) (undo-tree-id47948 . -1) (undo-tree-id47949 . -1) (undo-tree-id47950 . -1) (undo-tree-id47951 . -1) (undo-tree-id47952 . -1) (undo-tree-id47953 . -1) (undo-tree-id47954 . -1) (undo-tree-id47955 . -1) (undo-tree-id47956 . -1) (undo-tree-id47957 . -1) (undo-tree-id47958 . -1) (undo-tree-id47959 . -1) (undo-tree-id47960 . -1) (undo-tree-id47961 . -1) (undo-tree-id47962 . -1) (undo-tree-id47963 . -1) (undo-tree-id47964 . -1) (undo-tree-id47965 . -1) (undo-tree-id47966 . -1) (undo-tree-id47967 . -1) (undo-tree-id47968 . -1) (undo-tree-id47969 . -1) (undo-tree-id47970 . -1) (undo-tree-id47971 . -1) (undo-tree-id47972 . -1) (undo-tree-id47973 . -1) (undo-tree-id47974 . -1) (undo-tree-id47975 . -1) (undo-tree-id47976 . -1) (undo-tree-id47977 . -1) (undo-tree-id47978 . -1) (undo-tree-id47979 . -1) (undo-tree-id47980 . -1) (undo-tree-id47981 . -1) (undo-tree-id47982 . -1) (undo-tree-id47983 . -1) (undo-tree-id47984 . -1) (undo-tree-id47985 . -1) (undo-tree-id47986 . -1) (undo-tree-id47987 . -1) (undo-tree-id47988 . -1) (undo-tree-id47989 . -1) (undo-tree-id47990 . -1) (undo-tree-id47991 . -1) (undo-tree-id47992 . -1) (undo-tree-id47993 . -1) (undo-tree-id47994 . -1) (undo-tree-id47995 . -1) (undo-tree-id47996 . -1) (undo-tree-id47997 . -1) (undo-tree-id47998 . -1) (undo-tree-id47999 . -1) (undo-tree-id48000 . -1) (undo-tree-id48001 . -1) (undo-tree-id48002 . -1) (undo-tree-id48003 . -1) (undo-tree-id48004 . -1) (undo-tree-id48005 . -1) (undo-tree-id48006 . -1) (undo-tree-id48007 . -1) (undo-tree-id48008 . -1) (undo-tree-id48009 . -1) (undo-tree-id48010 . -1) (undo-tree-id48011 . -1) (undo-tree-id48012 . -1) (undo-tree-id48013 . -1) (undo-tree-id48014 . -1) (undo-tree-id48015 . -1) (undo-tree-id48016 . -1) (undo-tree-id48017 . -1) (undo-tree-id48018 . -1) (undo-tree-id48019 . -1) (undo-tree-id48020 . -1) (undo-tree-id48021 . -1) (undo-tree-id48022 . -1) (undo-tree-id48023 . -1) (undo-tree-id48024 . -1) (undo-tree-id48025 . -1) (undo-tree-id48026 . -1) (undo-tree-id48027 . -1) (undo-tree-id48028 . -1) (undo-tree-id48029 . -1) (undo-tree-id48030 . -1) (undo-tree-id48031 . -1) (undo-tree-id48032 . -1) (undo-tree-id48033 . -1) (undo-tree-id48034 . -1) (undo-tree-id48035 . -1) (undo-tree-id48036 . -1) (undo-tree-id48037 . -1) (undo-tree-id48038 . -1) (undo-tree-id48039 . -1) (undo-tree-id48040 . -1) (undo-tree-id48041 . -1) (undo-tree-id48042 . -1) (undo-tree-id48043 . -1) (undo-tree-id48044 . -1) (undo-tree-id48045 . -1) (undo-tree-id48046 . -1) (undo-tree-id48047 . -1) (undo-tree-id48048 . -1) (undo-tree-id48049 . -1) (undo-tree-id48050 . -1) (undo-tree-id48051 . -1) (undo-tree-id48052 . -1) (undo-tree-id48053 . -1) (undo-tree-id48054 . -1) (undo-tree-id48055 . -1) (undo-tree-id48056 . -1) (undo-tree-id48057 . -1) (undo-tree-id48058 . -1) (undo-tree-id48059 . -1) (undo-tree-id48060 . -1) (undo-tree-id48061 . -1) (undo-tree-id48062 . -1) (undo-tree-id48063 . -1) (undo-tree-id48064 . -1) (undo-tree-id48065 . -1) (undo-tree-id48066 . -1) (undo-tree-id48067 . -1) (undo-tree-id48068 . -1) (undo-tree-id48069 . -1) (undo-tree-id48070 . -1) (undo-tree-id48071 . -1) (undo-tree-id48072 . -1) (undo-tree-id48073 . -1) (undo-tree-id48074 . -1) (undo-tree-id48075 . -1) (undo-tree-id48076 . -1) (undo-tree-id48077 . -1) (undo-tree-id48078 . -1) (undo-tree-id48079 . -1) (undo-tree-id48080 . -1) (undo-tree-id48081 . -1) (undo-tree-id48082 . -1) (undo-tree-id48083 . -1) (undo-tree-id48084 . -1) (undo-tree-id48085 . -1) (undo-tree-id48086 . -1) (undo-tree-id48087 . -1) (undo-tree-id48088 . -1) (undo-tree-id48089 . -1) (undo-tree-id48090 . -1) (undo-tree-id48091 . -1) (undo-tree-id48092 . -1) (undo-tree-id48093 . -1) (undo-tree-id48094 . -1) (undo-tree-id48095 . -1) (undo-tree-id48096 . -1) (undo-tree-id48097 . -1) (undo-tree-id48098 . -1) (undo-tree-id48099 . -1) (undo-tree-id48100 . -1) (undo-tree-id48101 . -1) (undo-tree-id48102 . -1) (undo-tree-id48103 . -1) (undo-tree-id48104 . -1) (undo-tree-id48105 . -1) (undo-tree-id48106 . -1) (undo-tree-id48107 . -1) (undo-tree-id48108 . -1) (undo-tree-id48109 . -1) (undo-tree-id48110 . -1) (undo-tree-id48111 . -1) (undo-tree-id48112 . -1) (undo-tree-id48113 . -1) (undo-tree-id48114 . -1) (undo-tree-id48115 . -1) (undo-tree-id48116 . -1) (undo-tree-id48117 . -1) (undo-tree-id48118 . -1) (undo-tree-id48119 . -1) (undo-tree-id48120 . -1) (undo-tree-id48121 . -1) (undo-tree-id48122 . -1) (undo-tree-id48123 . -1) (undo-tree-id48124 . -1) (undo-tree-id48125 . -1) (undo-tree-id48126 . -1) (undo-tree-id48127 . -1) (undo-tree-id48128 . -1) (undo-tree-id48129 . -1) (undo-tree-id48130 . -1) (undo-tree-id48131 . -1) (undo-tree-id48132 . -1) (undo-tree-id48133 . -1) (undo-tree-id48134 . -1) (undo-tree-id48135 . -1) (undo-tree-id48136 . -1) (undo-tree-id48137 . -1) (undo-tree-id48138 . -1) (undo-tree-id48139 . -1) (undo-tree-id48140 . -1) (undo-tree-id48141 . -1) (undo-tree-id48142 . -1) (undo-tree-id48143 . -1) (undo-tree-id48144 . -1) (undo-tree-id48145 . -1) (undo-tree-id48146 . -1) (undo-tree-id48147 . -1) (undo-tree-id48148 . -1) (undo-tree-id48149 . -1) (undo-tree-id48150 . -1) (undo-tree-id48151 . -1) (undo-tree-id48152 . -1) (undo-tree-id48153 . -1) (undo-tree-id48154 . -1) (undo-tree-id48155 . -1) (undo-tree-id48156 . -1) (undo-tree-id48157 . -1) (undo-tree-id48158 . -1) (undo-tree-id48159 . -1) (undo-tree-id48160 . -1) (undo-tree-id48161 . -1) (undo-tree-id48162 . -1) (undo-tree-id48163 . -1) (undo-tree-id48164 . -1) (undo-tree-id48165 . -1) (undo-tree-id48166 . -1) (undo-tree-id48167 . -1) (undo-tree-id48168 . -1) (undo-tree-id48169 . -1) (undo-tree-id48170 . -1) (undo-tree-id48171 . -1) (undo-tree-id48172 . -1) (undo-tree-id48173 . -1) (undo-tree-id48174 . -1) (undo-tree-id48175 . -1) (undo-tree-id48176 . -1) (undo-tree-id48177 . -1) (undo-tree-id48178 . -1) (undo-tree-id48179 . -1) (undo-tree-id48180 . -1) (undo-tree-id48181 . -1) (undo-tree-id48182 . -1) (undo-tree-id48183 . -1) (undo-tree-id48184 . -1) (undo-tree-id48185 . -1) (undo-tree-id48186 . -1) (undo-tree-id48187 . -1) (undo-tree-id48188 . -1) (undo-tree-id48189 . -1) (undo-tree-id48190 . -1) (undo-tree-id48191 . -1) (undo-tree-id48192 . -1) (undo-tree-id48193 . -1) (undo-tree-id48194 . -1) (undo-tree-id48195 . -1) (undo-tree-id48196 . -1) (undo-tree-id48197 . -1) (undo-tree-id48198 . -1) (undo-tree-id48199 . -1) (undo-tree-id48200 . -1) (undo-tree-id48201 . -1) (undo-tree-id48202 . -1) (undo-tree-id48203 . -1) (undo-tree-id48204 . -1) (undo-tree-id48205 . -1) (undo-tree-id48206 . -1) (undo-tree-id48207 . -1) (undo-tree-id48208 . -1) (undo-tree-id48209 . -1) (undo-tree-id48210 . -1) (undo-tree-id48211 . -1) (undo-tree-id48212 . -1) (undo-tree-id48213 . -1) (undo-tree-id48214 . -1) (undo-tree-id48215 . -1) (undo-tree-id48216 . -1) (undo-tree-id48217 . -1) (undo-tree-id48218 . -1) (undo-tree-id48219 . -1) (undo-tree-id48220 . -1) (undo-tree-id48221 . -1) (undo-tree-id48222 . -1) (undo-tree-id48223 . -1) (undo-tree-id48224 . -1) (undo-tree-id48225 . -1) (undo-tree-id48226 . -1) (undo-tree-id48227 . -1) (undo-tree-id48228 . -1) (undo-tree-id48229 . -1) (undo-tree-id48230 . -1) (undo-tree-id48231 . -1) (undo-tree-id48232 . -1) (undo-tree-id48233 . -1) (undo-tree-id48234 . -1) (undo-tree-id48235 . -1) (undo-tree-id48236 . -1) (undo-tree-id48237 . -1) (undo-tree-id48238 . -1) (undo-tree-id48239 . -1) (undo-tree-id48240 . -1) (undo-tree-id48241 . -1) (undo-tree-id48242 . -1) (undo-tree-id48243 . -1) (undo-tree-id48244 . -1) (undo-tree-id48245 . -1) (undo-tree-id48246 . -1) (undo-tree-id48247 . -1) (undo-tree-id48248 . -1) (undo-tree-id48249 . -1) (undo-tree-id48250 . -1) (undo-tree-id48251 . -1) (undo-tree-id48252 . -1) (undo-tree-id48253 . -1) (undo-tree-id48254 . -1) (undo-tree-id48255 . -1) (undo-tree-id48256 . -1) (undo-tree-id48257 . -1) (undo-tree-id48258 . -1) (undo-tree-id48259 . -1) (undo-tree-id48260 . -1) (undo-tree-id48261 . -1) (undo-tree-id48262 . -1) (undo-tree-id48263 . -1) (undo-tree-id48264 . -1) (undo-tree-id48265 . -1) (undo-tree-id48266 . -1) (undo-tree-id48267 . -1) (undo-tree-id48268 . -1) (undo-tree-id48269 . -1) (undo-tree-id48270 . -1) (undo-tree-id48271 . -1) (undo-tree-id48272 . -1) (undo-tree-id48273 . -1) (undo-tree-id48274 . -1) (undo-tree-id48275 . -1) (undo-tree-id48276 . -1) (undo-tree-id48277 . -1) (undo-tree-id48278 . -1) (undo-tree-id48279 . -1) (undo-tree-id48280 . -1) (undo-tree-id48281 . -1) (undo-tree-id48282 . -1) (undo-tree-id48283 . -1) (undo-tree-id48284 . -1) (undo-tree-id48285 . -1) (undo-tree-id48286 . -1) (undo-tree-id48287 . -1) (undo-tree-id48288 . -1) (undo-tree-id48289 . -1) (undo-tree-id48290 . -1) (undo-tree-id48291 . -1) (undo-tree-id48292 . -1) (undo-tree-id48293 . -1) (undo-tree-id48294 . -1) (undo-tree-id48295 . -1) (undo-tree-id48296 . -1) (undo-tree-id48297 . -1) (undo-tree-id48298 . -1) (undo-tree-id48299 . -1) (undo-tree-id48300 . -1) (undo-tree-id48301 . -1) (undo-tree-id48302 . -1) (undo-tree-id48303 . -1) (undo-tree-id48304 . -1) (undo-tree-id48305 . -1) (undo-tree-id48306 . -1) (undo-tree-id48307 . -1) (undo-tree-id48308 . -1) (undo-tree-id48309 . -1) (undo-tree-id48310 . -1) (undo-tree-id48311 . -1) (undo-tree-id48312 . -1) (undo-tree-id48313 . -1) (undo-tree-id48314 . -1) (undo-tree-id48315 . -1) (undo-tree-id48316 . -1) (undo-tree-id48317 . -1) (undo-tree-id48318 . -1) (undo-tree-id48319 . -1) (undo-tree-id48320 . -1) (undo-tree-id48321 . -1) (undo-tree-id48322 . -1) (undo-tree-id48323 . -1) (undo-tree-id48324 . -1) (undo-tree-id48325 . -1) (undo-tree-id48326 . -1) (undo-tree-id48327 . -1) (undo-tree-id48328 . -1) (undo-tree-id48329 . -1) (undo-tree-id48330 . -1) (undo-tree-id48331 . -1) (undo-tree-id48332 . -1) (undo-tree-id48333 . -1) (undo-tree-id48334 . -1) (undo-tree-id48335 . -1) (undo-tree-id48336 . -1) (undo-tree-id48337 . -1) (undo-tree-id48338 . -1) (undo-tree-id48339 . -1) (undo-tree-id48340 . -1) (undo-tree-id48341 . -1) (undo-tree-id48342 . -1) (undo-tree-id48343 . -1) (undo-tree-id48344 . -1) (undo-tree-id48345 . -1) (undo-tree-id48346 . -1) (undo-tree-id48347 . -1) (undo-tree-id48348 . -1) (undo-tree-id48349 . -1) (undo-tree-id48350 . -1) (undo-tree-id48351 . -1) (undo-tree-id48352 . -1) (undo-tree-id48353 . -1) (undo-tree-id48354 . -1) (undo-tree-id48355 . -1) (undo-tree-id48356 . -1) (undo-tree-id48357 . -1) (undo-tree-id48358 . -1) (undo-tree-id48359 . -1) (undo-tree-id48360 . -1) (undo-tree-id48361 . -1) (undo-tree-id48362 . -1) (undo-tree-id48363 . -1) (undo-tree-id48364 . -1) (undo-tree-id48365 . -1) (undo-tree-id48366 . -1) (undo-tree-id48367 . -1) (undo-tree-id48368 . -1) (undo-tree-id48369 . -1) (undo-tree-id48370 . -1) (undo-tree-id48371 . -1) (undo-tree-id48372 . -1) (undo-tree-id48373 . -1) (undo-tree-id48374 . -1) (undo-tree-id48375 . -1) (undo-tree-id48376 . -1) (undo-tree-id48377 . -1) (undo-tree-id48378 . -1) (undo-tree-id48379 . -1) (undo-tree-id48380 . -1) (undo-tree-id48381 . -1) (undo-tree-id48382 . -1) (undo-tree-id48383 . -1) (undo-tree-id48384 . -1) (undo-tree-id48385 . -1) (undo-tree-id48386 . -1) (undo-tree-id48387 . -1) (undo-tree-id48388 . -1) (undo-tree-id48389 . -1) (undo-tree-id48390 . -1) (undo-tree-id48391 . -1) (undo-tree-id48392 . -1) (undo-tree-id48393 . -1) (undo-tree-id48394 . -1) (undo-tree-id48395 . -1) (undo-tree-id48396 . -1) (undo-tree-id48397 . -1) (undo-tree-id48398 . -1) (undo-tree-id48399 . -1) (undo-tree-id48400 . -1) (undo-tree-id48401 . -1) (undo-tree-id48402 . -1) (undo-tree-id48403 . -1) (undo-tree-id48404 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5516) (undo-tree-id48405 . -1) (undo-tree-id48406 . -1) (undo-tree-id48407 . -1) (undo-tree-id48408 . -1) (undo-tree-id48409 . -1) (undo-tree-id48410 . -1) (undo-tree-id48411 . -1) (undo-tree-id48412 . -1) (undo-tree-id48413 . -1) (undo-tree-id48414 . -1) (undo-tree-id48415 . -1) (undo-tree-id48416 . -1) (undo-tree-id48417 . -1) (undo-tree-id48418 . -1) (undo-tree-id48419 . -1) (undo-tree-id48420 . -1) (undo-tree-id48421 . -1) (undo-tree-id48422 . -1) (undo-tree-id48423 . -1) (undo-tree-id48424 . -1) (undo-tree-id48425 . -1) (undo-tree-id48426 . -1) (undo-tree-id48427 . -1) (undo-tree-id48428 . -1) (undo-tree-id48429 . -1) (undo-tree-id48430 . -1) (undo-tree-id48431 . -1) (undo-tree-id48432 . -1) (undo-tree-id48433 . -1) (undo-tree-id48434 . -1) (undo-tree-id48435 . -1) (undo-tree-id48436 . -1) (undo-tree-id48437 . -1) (undo-tree-id48438 . -1) (undo-tree-id48439 . -1) (undo-tree-id48440 . -1) (undo-tree-id48441 . -1) (undo-tree-id48442 . -1) (undo-tree-id48443 . -1) (undo-tree-id48444 . -1) (undo-tree-id48445 . -1) (undo-tree-id48446 . -1) (undo-tree-id48447 . -1) (undo-tree-id48448 . -1) (undo-tree-id48449 . -1) (undo-tree-id48450 . -1) (undo-tree-id48451 . -1) (undo-tree-id48452 . -1) (undo-tree-id48453 . -1) (undo-tree-id48454 . -1) (undo-tree-id48455 . -1) (undo-tree-id48456 . -1) (undo-tree-id48457 . -1) (undo-tree-id48458 . -1) (undo-tree-id48459 . -1) (undo-tree-id48460 . -1) (undo-tree-id48461 . -1) (undo-tree-id48462 . -1) (undo-tree-id48463 . -1) (undo-tree-id48464 . -1) (undo-tree-id48465 . -1) (undo-tree-id48466 . -1) (undo-tree-id48467 . -1) (undo-tree-id48468 . -1) (undo-tree-id48469 . -1) (undo-tree-id48470 . -1) (undo-tree-id48471 . -1) (undo-tree-id48472 . -1) (undo-tree-id48473 . -1) (undo-tree-id48474 . -1) (undo-tree-id48475 . -1) (undo-tree-id48476 . -1) (undo-tree-id48477 . -1) (undo-tree-id48478 . -1) (undo-tree-id48479 . -1) (undo-tree-id48480 . -1) (undo-tree-id48481 . -1) (undo-tree-id48482 . -1) (undo-tree-id48483 . -1) (undo-tree-id48484 . -1) (undo-tree-id48485 . -1) (undo-tree-id48486 . -1) (undo-tree-id48487 . -1) (undo-tree-id48488 . -1) (undo-tree-id48489 . -1) (undo-tree-id48490 . -1) (undo-tree-id48491 . -1) (undo-tree-id48492 . -1) (undo-tree-id48493 . -1) (undo-tree-id48494 . -1) (undo-tree-id48495 . -1) (undo-tree-id48496 . -1) (undo-tree-id48497 . -1) (undo-tree-id48498 . -1) (undo-tree-id48499 . -1) (undo-tree-id48500 . -1) (undo-tree-id48501 . -1) (undo-tree-id48502 . -1) (undo-tree-id48503 . -1) (undo-tree-id48504 . -1) (undo-tree-id48505 . -1) (undo-tree-id48506 . -1) (undo-tree-id48507 . -1) (undo-tree-id48508 . -1) (undo-tree-id48509 . -1) (undo-tree-id48510 . -1) (undo-tree-id48511 . -1) (undo-tree-id48512 . -1) (undo-tree-id48513 . -1) (undo-tree-id48514 . -1) (undo-tree-id48515 . -1) (undo-tree-id48516 . -1) (undo-tree-id48517 . -1) (undo-tree-id48518 . -1) (undo-tree-id48519 . -1) (undo-tree-id48520 . -1) (undo-tree-id48521 . -1) (undo-tree-id48522 . -1) (undo-tree-id48523 . -1) (undo-tree-id48524 . -1) (undo-tree-id48525 . -1) (undo-tree-id48526 . -1) (undo-tree-id48527 . -1) (undo-tree-id48528 . -1) (undo-tree-id48529 . -1) (undo-tree-id48530 . -1) (undo-tree-id48531 . -1) (undo-tree-id48532 . -1) (undo-tree-id48533 . -1) (undo-tree-id48534 . -1) (undo-tree-id48535 . -1) (undo-tree-id48536 . -1) (undo-tree-id48537 . -1) (undo-tree-id48538 . -1) (undo-tree-id48539 . -1) (undo-tree-id48540 . -1) (undo-tree-id48541 . -1) (undo-tree-id48542 . -1) (undo-tree-id48543 . -1) (undo-tree-id48544 . -1) (undo-tree-id48545 . -1) (undo-tree-id48546 . -1) (undo-tree-id48547 . -1) (undo-tree-id48548 . -1) (undo-tree-id48549 . -1) (undo-tree-id48550 . -1) (undo-tree-id48551 . -1) (undo-tree-id48552 . -1) (undo-tree-id48553 . -1) (undo-tree-id48554 . -1) (undo-tree-id48555 . -1) (undo-tree-id48556 . -1) (undo-tree-id48557 . -1) (undo-tree-id48558 . -1) (undo-tree-id48559 . -1) (undo-tree-id48560 . -1) 5514) nil (25767 12331 801098 530000) 0 nil])
([nil nil ((5516 . 5517) (#("Instead, we can p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5516) (undo-tree-id47906 . -16) (undo-tree-id47907 . -16) (undo-tree-id47908 . 17) (undo-tree-id47909 . -16) (undo-tree-id47910 . -17) (undo-tree-id47911 . -16) (undo-tree-id47912 . -6) (undo-tree-id47913 . -7) (undo-tree-id47914 . -10) (undo-tree-id47915 . -14) (undo-tree-id47916 . -14) (undo-tree-id47917 . -14) (undo-tree-id47918 . -14) (undo-tree-id47919 . -14) (undo-tree-id47920 . -14) (undo-tree-id47921 . -17) (undo-tree-id47922 . -17) (undo-tree-id47923 . -17) (undo-tree-id47924 . -17) (undo-tree-id47925 . -17) (undo-tree-id47926 . -17) (undo-tree-id47927 . -16) (undo-tree-id47928 . -16) (undo-tree-id47929 . -16) (undo-tree-id47930 . -16) (undo-tree-id47931 . -16) (undo-tree-id47932 . -16) (undo-tree-id47933 . -16) (undo-tree-id47934 . -17) (undo-tree-id47935 . -17) (undo-tree-id47936 . -17) 5532) nil (25767 12331 799936 438000) 0 nil])
([nil nil ((5539 . 5540) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5539) (undo-tree-id47905 . -1) 5516) nil (25767 12331 799916 994000) 0 nil])
([nil nil ((5603 . 5604) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5603) (undo-tree-id47902 . -1) (undo-tree-id47903 . -1) (undo-tree-id47904 . -1)) nil (25767 12331 799915 186000) 0 nil])
([nil nil ((#(" using
T" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 7 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5604) (undo-tree-id47851 . -7) (undo-tree-id47852 . -7) (undo-tree-id47853 . 8) (undo-tree-id47854 . -1) (undo-tree-id47855 . -1) (undo-tree-id47856 . -1) (undo-tree-id47857 . -1) (undo-tree-id47858 . -1) (undo-tree-id47859 . -1) (undo-tree-id47860 . -1) (undo-tree-id47861 . -1) (undo-tree-id47862 . -1) (undo-tree-id47863 . -1) (undo-tree-id47864 . -1) (undo-tree-id47865 . -1) (undo-tree-id47866 . -1) (undo-tree-id47867 . -1) (undo-tree-id47868 . -1) (undo-tree-id47869 . -1) (undo-tree-id47870 . -1) (undo-tree-id47871 . -1) (undo-tree-id47872 . -1) (undo-tree-id47873 . -1) (undo-tree-id47874 . -1) (undo-tree-id47875 . -1) (undo-tree-id47876 . -1) (undo-tree-id47877 . -1) (undo-tree-id47878 . -1) (undo-tree-id47879 . -1) (undo-tree-id47880 . -7) (undo-tree-id47881 . -7) (undo-tree-id47882 . -7) (undo-tree-id47883 . -7) (undo-tree-id47884 . -7) (undo-tree-id47885 . -7) (undo-tree-id47886 . -8) (undo-tree-id47887 . -7) (undo-tree-id47888 . -7) (undo-tree-id47889 . -7) (undo-tree-id47890 . -7) (undo-tree-id47891 . -7) (undo-tree-id47892 . -7) (undo-tree-id47893 . -7) (undo-tree-id47894 . -7) (undo-tree-id47895 . -7) (undo-tree-id47896 . -7) (undo-tree-id47897 . -7) (undo-tree-id47898 . -7) (undo-tree-id47899 . -7) (undo-tree-id47900 . -7) (undo-tree-id47901 . -8)) nil (25767 12331 799911 146000) 0 nil])
([nil nil ((#("ensorFlow’s tf" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5604) (undo-tree-id47845 . -13) (undo-tree-id47846 . 14) (undo-tree-id47847 . 14) (undo-tree-id47848 . 14) (undo-tree-id47849 . -9) (undo-tree-id47850 . -14)) nil (25767 12331 799878 494000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5604) (undo-tree-id47841 . 1) (undo-tree-id47842 . 1) (undo-tree-id47843 . -1) (undo-tree-id47844 . -1)) nil (25767 12331 799874 198000) 0 nil])
([nil nil ((#("random" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5604) (undo-tree-id47837 . -5) (undo-tree-id47838 . 6) (undo-tree-id47839 . 6) (undo-tree-id47840 . -6)) nil (25767 12331 799871 75000) 0 nil])
([nil nil ((#(".categorical() function" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5604) (undo-tree-id47833 . -22) (undo-tree-id47834 . 23) (undo-tree-id47835 . 23) (undo-tree-id47836 . -23)) nil (25767 12331 799867 457000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5604) (undo-tree-id47829 . 1) (undo-tree-id47830 . 1) (undo-tree-id47831 . -1) (undo-tree-id47832 . -1)) nil (25767 12331 799862 488000) 0 nil])
([nil nil ((5604 . 5606)) nil (25767 12331 799859 34000) 0 nil])
([nil nil ((5625 . 5626) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5625) (undo-tree-id47828 . -1) 5605) nil (25767 12331 799857 597000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5606) (undo-tree-id47808 . 1) (undo-tree-id47809 . 1) (undo-tree-id47810 . -1) (undo-tree-id47811 . -1) (undo-tree-id47812 . -1) (undo-tree-id47813 . -1) (undo-tree-id47814 . -1) (undo-tree-id47815 . -1) (undo-tree-id47816 . -1) (undo-tree-id47817 . -1) (undo-tree-id47818 . -1) (undo-tree-id47819 . -1) (undo-tree-id47820 . -1) (undo-tree-id47821 . -1) (undo-tree-id47822 . -1) (undo-tree-id47823 . -1) (undo-tree-id47824 . -1) (undo-tree-id47825 . -1) (undo-tree-id47826 . -1) (undo-tree-id47827 . -1)) nil (25767 12331 799851 923000) 0 nil])
([nil nil ((5660 . 5661) (t 25767 12331 907166 617000)) nil (25767 12369 383983 269000) 0 nil])
([nil nil ((5662 . 5664) (5661 . 5662)) nil (25767 12369 383981 734000) 0 nil])
([nil nil ((5698 . 5699) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5698) (undo-tree-id49058 . -1) 5663) nil (25767 12369 383977 93000) 0 nil])
([nil nil ((6136 . 6137) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6136) (undo-tree-id49059 . -1) (6065 . 6066) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6065) (undo-tree-id49060 . -1) (5988 . 5989) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5988) (undo-tree-id49061 . -1) (5913 . 5914) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5913) (undo-tree-id49062 . -1) (5845 . 5846) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5845) (undo-tree-id49063 . -1) (5772 . 5773) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5772) (undo-tree-id49064 . -1) 5762 (t 25767 12369 487586 215000)) nil (25767 12393 946828 720000) 0 nil])
([nil nil ((5662 . 6175) (#("- To have more control over the diversity of the generated text, we can divide the logits by a number called the temperature, which we can tweak as we wish: a temperature close to 0 will favor the high-probability characters, while a very high temperature will give all characters an equal probability. The following next_char() function uses this approach to pick the next character to add to the input text:

- The categorical() function samples random class indices, given the class log probabilities (logits)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 9 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 9 10 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 10 82 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 82 83 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 83 150 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 150 151 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 151 225 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 225 226 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 226 302 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 302 303 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 303 321 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 321 322 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 322 326 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 326 366 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 366 373 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 373 374 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 374 396 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 396 399 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 399 409 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 409 410 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 410 411 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 411 412 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 412 413 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 413 447 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 447 448 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 448 513 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5662) (undo-tree-id49068 . 100) (undo-tree-id49069 . -513) (undo-tree-id49070 . -513) (undo-tree-id49071 . 8) (undo-tree-id49072 . -511) (undo-tree-id49073 . -513) (undo-tree-id49074 . -513) (undo-tree-id49075 . -513) (undo-tree-id49076 . -513) (undo-tree-id49077 . -513) (undo-tree-id49078 . -513) (undo-tree-id49079 . -513) (undo-tree-id49080 . -513) (undo-tree-id49081 . -513) (undo-tree-id49082 . -513) (undo-tree-id49083 . -513) (undo-tree-id49084 . -513) (undo-tree-id49085 . -513) (undo-tree-id49086 . -513) (undo-tree-id49087 . -513) (undo-tree-id49088 . -513) (undo-tree-id49089 . -513) (undo-tree-id49090 . -513) (undo-tree-id49091 . -513) (undo-tree-id49092 . -513) (undo-tree-id49093 . -513) (undo-tree-id49094 . -513) (undo-tree-id49095 . -513) (undo-tree-id49096 . -513) (undo-tree-id49097 . -513) (undo-tree-id49098 . -513) (undo-tree-id49099 . -513) (undo-tree-id49100 . -513) (undo-tree-id49101 . -513) (undo-tree-id49102 . -513) (undo-tree-id49103 . -513) (undo-tree-id49104 . -513) (undo-tree-id49105 . -513) (undo-tree-id49106 . -513) (undo-tree-id49107 . -513) (undo-tree-id49108 . -513) (undo-tree-id49109 . -513) (undo-tree-id49110 . -513) (undo-tree-id49111 . -513) (undo-tree-id49112 . -513) (undo-tree-id49113 . -513) (undo-tree-id49114 . -513) (undo-tree-id49115 . -513) (undo-tree-id49116 . -513) (undo-tree-id49117 . -513) (undo-tree-id49118 . -513) (undo-tree-id49119 . -513) (undo-tree-id49120 . -513) (undo-tree-id49121 . -513) (undo-tree-id49122 . -513) (undo-tree-id49123 . -513) (undo-tree-id49124 . -513) (undo-tree-id49125 . -513) (undo-tree-id49126 . -513) (undo-tree-id49127 . -513) (undo-tree-id49128 . -513) (undo-tree-id49129 . -513) (undo-tree-id49130 . -513) (undo-tree-id49131 . -513) (undo-tree-id49132 . -513) (undo-tree-id49133 . -513) (undo-tree-id49134 . -411) (5662 . 6073) (#(" To have more control over the diversity of the generated text, we can divide the logits by a number called the temperature, which we can tweak as we wish: a temperature close to 0 will favor the high-probability characters, while a very high temperature will give all characters an equal probability. The following next_char() function uses this approach to pick the next character to add to the input text:" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 9 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 81 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 150 224 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 224 225 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 225 301 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 302 320 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 320 321 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 321 325 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 325 365 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 365 372 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 372 373 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 373 395 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 395 398 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 398 408 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5764) (undo-tree-id49135 . -372) (undo-tree-id49136 . -1) (undo-tree-id49137 . -1) (undo-tree-id49138 . -1) (undo-tree-id49139 . -1) (undo-tree-id49140 . -1) (undo-tree-id49141 . -1) (undo-tree-id49142 . -1) (undo-tree-id49143 . -1) (undo-tree-id49144 . -1) (undo-tree-id49145 . -1) (undo-tree-id49146 . -1) (undo-tree-id49147 . -1) (undo-tree-id49148 . -1) (undo-tree-id49149 . -1) (undo-tree-id49150 . -1) (undo-tree-id49151 . -1) (undo-tree-id49152 . -1) (undo-tree-id49153 . -1) (undo-tree-id49154 . -1) (undo-tree-id49155 . -1) 5765 (t 25767 12378 803692 987000)) nil (25767 12397 229980 599000) 0 nil] [nil nil ((5764 . 5767) (t 25767 12378 803692 987000)) ((#("
* " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 5764) (undo-tree-id49065 . -3) (undo-tree-id49066 . -3) (undo-tree-id49067 . -3)) (25767 12393 945854 975000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5765) (undo-tree-id49930 . -1) (t 25767 12397 287907 936000)) nil (25767 12435 311613 50000) 0 nil])
nil
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5765) (undo-tree-id49920 . -2) (undo-tree-id49921 . -2) (undo-tree-id49922 . -2) (undo-tree-id49923 . -2) (undo-tree-id49924 . -2) (undo-tree-id49925 . -2) (undo-tree-id49926 . -2) (undo-tree-id49927 . -2) (undo-tree-id49928 . -2) (undo-tree-id49929 . -2) 5767 (5764 . 5767) 5727) nil (25767 12435 311611 92000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5604) (undo-tree-id49910 . -2) (undo-tree-id49911 . -2) (undo-tree-id49912 . -2) (undo-tree-id49913 . -2) (undo-tree-id49914 . -2) (undo-tree-id49915 . -2) (undo-tree-id49916 . -2) (undo-tree-id49917 . -2) (undo-tree-id49918 . -2) (undo-tree-id49919 . -2) 5606 (5603 . 5606) 5582) nil (25767 12435 311603 655000) 0 nil])
([nil nil ((#(", which we can tweak as we wish:" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 26 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5891) (undo-tree-id49765 . -31) (undo-tree-id49766 . -31) (undo-tree-id49767 . -31) (undo-tree-id49768 . -32) (undo-tree-id49769 . -31) (undo-tree-id49770 . -6) (undo-tree-id49771 . -6) (undo-tree-id49772 . -6) (undo-tree-id49773 . -6) (undo-tree-id49774 . -6) (undo-tree-id49775 . -6) (undo-tree-id49776 . -6) (undo-tree-id49777 . -6) (undo-tree-id49778 . -6) (undo-tree-id49779 . -6) (undo-tree-id49780 . -6) (undo-tree-id49781 . -6) (undo-tree-id49782 . -6) (undo-tree-id49783 . -6) (undo-tree-id49784 . -6) (undo-tree-id49785 . -6) (undo-tree-id49786 . -6) (undo-tree-id49787 . -6) (undo-tree-id49788 . -6) (undo-tree-id49789 . -6) (undo-tree-id49790 . -6) (undo-tree-id49791 . -9) (undo-tree-id49792 . -9) (undo-tree-id49793 . -9) (undo-tree-id49794 . -9) (undo-tree-id49795 . -9) (undo-tree-id49796 . -9) (undo-tree-id49797 . -9) (undo-tree-id49798 . -9) (undo-tree-id49799 . -9) (undo-tree-id49800 . -9) (undo-tree-id49801 . -9) (undo-tree-id49802 . -9) (undo-tree-id49803 . -9) (undo-tree-id49804 . -9) (undo-tree-id49805 . -9) (undo-tree-id49806 . -9) (undo-tree-id49807 . -13) (undo-tree-id49808 . -13) (undo-tree-id49809 . -13) (undo-tree-id49810 . -13) (undo-tree-id49811 . -13) (undo-tree-id49812 . -13) (undo-tree-id49813 . -13) (undo-tree-id49814 . -13) (undo-tree-id49815 . -13) (undo-tree-id49816 . -13) (undo-tree-id49817 . -13) (undo-tree-id49818 . -13) (undo-tree-id49819 . -13) (undo-tree-id49820 . -13) (undo-tree-id49821 . -13) (undo-tree-id49822 . -13) (undo-tree-id49823 . -19) (undo-tree-id49824 . -19) (undo-tree-id49825 . -19) (undo-tree-id49826 . -19) (undo-tree-id49827 . -19) (undo-tree-id49828 . -19) (undo-tree-id49829 . -19) (undo-tree-id49830 . -19) (undo-tree-id49831 . -19) (undo-tree-id49832 . -19) (undo-tree-id49833 . -19) (undo-tree-id49834 . -19) (undo-tree-id49835 . -19) (undo-tree-id49836 . -19) (undo-tree-id49837 . -19) (undo-tree-id49838 . -19) (undo-tree-id49839 . -22) (undo-tree-id49840 . -22) (undo-tree-id49841 . -22) (undo-tree-id49842 . -22) (undo-tree-id49843 . -22) (undo-tree-id49844 . -22) (undo-tree-id49845 . -22) (undo-tree-id49846 . -22) (undo-tree-id49847 . -22) (undo-tree-id49848 . -22) (undo-tree-id49849 . -22) (undo-tree-id49850 . -22) (undo-tree-id49851 . -22) (undo-tree-id49852 . -22) (undo-tree-id49853 . -22) (undo-tree-id49854 . -22) (undo-tree-id49855 . -25) (undo-tree-id49856 . -25) (undo-tree-id49857 . -25) (undo-tree-id49858 . -25) (undo-tree-id49859 . -25) (undo-tree-id49860 . -25) (undo-tree-id49861 . -25) (undo-tree-id49862 . -25) (undo-tree-id49863 . -25) (undo-tree-id49864 . -25) (undo-tree-id49865 . -25) (undo-tree-id49866 . -25) (undo-tree-id49867 . -25) (undo-tree-id49868 . -25) (undo-tree-id49869 . -25) (undo-tree-id49870 . -25) (undo-tree-id49871 . -30) (undo-tree-id49872 . -30) (undo-tree-id49873 . -30) (undo-tree-id49874 . -30) (undo-tree-id49875 . -30) (undo-tree-id49876 . -30) (undo-tree-id49877 . -30) (undo-tree-id49878 . -30) (undo-tree-id49879 . -30) (undo-tree-id49880 . -30) (undo-tree-id49881 . -30) (undo-tree-id49882 . -30) (undo-tree-id49883 . -30) (undo-tree-id49884 . -30) (undo-tree-id49885 . -30) (undo-tree-id49886 . -30) (undo-tree-id49887 . -31) (undo-tree-id49888 . -31) (undo-tree-id49889 . -31) (undo-tree-id49890 . -31) (undo-tree-id49891 . -31) (undo-tree-id49892 . -31) (undo-tree-id49893 . -31) (undo-tree-id49894 . -31) (undo-tree-id49895 . -31) (undo-tree-id49896 . -31) (undo-tree-id49897 . -31) (undo-tree-id49898 . -31) (undo-tree-id49899 . -31) (undo-tree-id49900 . -31) (undo-tree-id49901 . -31) (undo-tree-id49902 . -31) (undo-tree-id49903 . -31) (undo-tree-id49904 . -31) (undo-tree-id49905 . -31) (undo-tree-id49906 . -31) (undo-tree-id49907 . -31) (undo-tree-id49908 . -31) (undo-tree-id49909 . -32) 5922) nil (25767 12435 311590 956000) 0 nil])
([nil nil ((5767 . 6149) (#("- 
 a temperature close to 0 will favor the high-probability characters, while a very high temperature will give all characters an equal probability. The following next_char() function uses this approach to pick the next character to add to the input text:

- To have more control over the diversity of the generated text, we can divide the logits by a number called the temperature" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 72 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 73 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 149 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 149 150 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 150 168 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 168 169 (invisible t fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 169 173 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 173 213 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 213 220 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 220 221 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 221 243 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 243 246 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 246 256 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 256 257 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 257 258 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 258 259 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 259 260 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 260 267 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 267 268 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 268 340 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 340 341 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 341 382 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5767) (undo-tree-id49168 . -382) (undo-tree-id49169 . -382) (undo-tree-id49170 . -382) (undo-tree-id49171 . -382) (undo-tree-id49172 . -259) (undo-tree-id49173 . -382) (undo-tree-id49174 . -259) (undo-tree-id49175 . -259) (undo-tree-id49176 . -259) (undo-tree-id49177 . -259) (undo-tree-id49178 . -259) (undo-tree-id49179 . -259) (undo-tree-id49180 . -259) (undo-tree-id49181 . -259) (undo-tree-id49182 . -259) (undo-tree-id49183 . -259) (undo-tree-id49184 . -259) (undo-tree-id49185 . -259) (undo-tree-id49186 . -259) (undo-tree-id49187 . -259) (undo-tree-id49188 . -259) (undo-tree-id49189 . -259) (undo-tree-id49190 . -259) (undo-tree-id49191 . -259) (undo-tree-id49192 . -259) (undo-tree-id49193 . -259) (undo-tree-id49194 . -259) (undo-tree-id49195 . -259) (undo-tree-id49196 . -259) (undo-tree-id49197 . -259) (undo-tree-id49198 . -259) (undo-tree-id49199 . -259) (undo-tree-id49200 . -259) (undo-tree-id49201 . -259) (undo-tree-id49202 . -259) (undo-tree-id49203 . -259) (undo-tree-id49204 . -259) (undo-tree-id49205 . -259) (undo-tree-id49206 . -259) (undo-tree-id49207 . -259) (undo-tree-id49208 . -260) (undo-tree-id49209 . -260) (undo-tree-id49210 . -260) (undo-tree-id49211 . -260) (undo-tree-id49212 . -260) (undo-tree-id49213 . -260) (undo-tree-id49214 . -260) (undo-tree-id49215 . -260) (undo-tree-id49216 . -260) (undo-tree-id49217 . -260) (undo-tree-id49218 . -260) (undo-tree-id49219 . -260) (undo-tree-id49220 . -260) (undo-tree-id49221 . -260) (undo-tree-id49222 . -260) (undo-tree-id49223 . -260) (undo-tree-id49224 . -260) (undo-tree-id49225 . -260) (undo-tree-id49226 . -260) (undo-tree-id49227 . -260) (undo-tree-id49228 . -260) (undo-tree-id49229 . -260) (undo-tree-id49230 . -260) (undo-tree-id49231 . -260) (undo-tree-id49232 . -260) (undo-tree-id49233 . -260) (undo-tree-id49234 . -260) (undo-tree-id49235 . -260) (undo-tree-id49236 . -260) (undo-tree-id49237 . -260) (undo-tree-id49238 . -260) (undo-tree-id49239 . -260) (undo-tree-id49240 . -260) (undo-tree-id49241 . -260) (undo-tree-id49242 . -260) (undo-tree-id49243 . -260) (undo-tree-id49244 . -260) (undo-tree-id49245 . -260) (undo-tree-id49246 . -260) (undo-tree-id49247 . -260) (undo-tree-id49248 . -260) (undo-tree-id49249 . -260) (undo-tree-id49250 . -260) (undo-tree-id49251 . -260) (undo-tree-id49252 . -260) (undo-tree-id49253 . -260) (undo-tree-id49254 . -260) (undo-tree-id49255 . -260) (undo-tree-id49256 . -260) (undo-tree-id49257 . -260) (undo-tree-id49258 . -260) (undo-tree-id49259 . -260) (undo-tree-id49260 . -260) (undo-tree-id49261 . -260) (undo-tree-id49262 . -260) (undo-tree-id49263 . -260) (undo-tree-id49264 . -260) (undo-tree-id49265 . -260) (undo-tree-id49266 . -260) (undo-tree-id49267 . -260) (undo-tree-id49268 . -260) (undo-tree-id49269 . -260) (undo-tree-id49270 . -260) (undo-tree-id49271 . -260) (undo-tree-id49272 . -260) (undo-tree-id49273 . -260) (undo-tree-id49274 . -260) (undo-tree-id49275 . -260) (undo-tree-id49276 . -260) (undo-tree-id49277 . -260) (undo-tree-id49278 . -260) (undo-tree-id49279 . -260) (undo-tree-id49280 . -260) (undo-tree-id49281 . -260) (undo-tree-id49282 . -260) (undo-tree-id49283 . -260) (undo-tree-id49284 . -260) (undo-tree-id49285 . -260) (undo-tree-id49286 . -260) (undo-tree-id49287 . -260) (undo-tree-id49288 . -261) (undo-tree-id49289 . -261) (undo-tree-id49290 . -261) (undo-tree-id49291 . -261) (undo-tree-id49292 . -261) (undo-tree-id49293 . -261) (undo-tree-id49294 . -261) (undo-tree-id49295 . -261) (undo-tree-id49296 . -261) (undo-tree-id49297 . -261) (undo-tree-id49298 . -261) (undo-tree-id49299 . -261) (undo-tree-id49300 . -261) (undo-tree-id49301 . -261) (undo-tree-id49302 . -261) (undo-tree-id49303 . -261) (undo-tree-id49304 . -266) (undo-tree-id49305 . -266) (undo-tree-id49306 . -266) (undo-tree-id49307 . -266) (undo-tree-id49308 . -266) (undo-tree-id49309 . -266) (undo-tree-id49310 . -266) (undo-tree-id49311 . -266) (undo-tree-id49312 . -266) (undo-tree-id49313 . -266) (undo-tree-id49314 . -266) (undo-tree-id49315 . -266) (undo-tree-id49316 . -266) (undo-tree-id49317 . -266) (undo-tree-id49318 . -266) (undo-tree-id49319 . -266) (undo-tree-id49320 . -266) (undo-tree-id49321 . -266) (undo-tree-id49322 . -266) (undo-tree-id49323 . -266) (undo-tree-id49324 . -266) (undo-tree-id49325 . -266) (undo-tree-id49326 . -266) (undo-tree-id49327 . -266) (undo-tree-id49328 . -266) (undo-tree-id49329 . -266) (undo-tree-id49330 . -266) (undo-tree-id49331 . -266) (undo-tree-id49332 . -266) (undo-tree-id49333 . -266) (undo-tree-id49334 . -266) (undo-tree-id49335 . -266) (undo-tree-id49336 . -266) (undo-tree-id49337 . -266) (undo-tree-id49338 . -266) (undo-tree-id49339 . -266) (undo-tree-id49340 . -266) (undo-tree-id49341 . -266) (undo-tree-id49342 . -266) (undo-tree-id49343 . -265) (undo-tree-id49344 . -265) (undo-tree-id49345 . -265) (undo-tree-id49346 . -265) (undo-tree-id49347 . -265) (undo-tree-id49348 . -265) (undo-tree-id49349 . -265) (undo-tree-id49350 . -265) (undo-tree-id49351 . -265) (undo-tree-id49352 . -265) (undo-tree-id49353 . -265) (undo-tree-id49354 . -264) (undo-tree-id49355 . -264) (undo-tree-id49356 . -264) (undo-tree-id49357 . -264) (undo-tree-id49358 . -264) (undo-tree-id49359 . -264) (undo-tree-id49360 . -264) (undo-tree-id49361 . -264) (undo-tree-id49362 . -264) (undo-tree-id49363 . -264) (undo-tree-id49364 . -264) (undo-tree-id49365 . -263) (undo-tree-id49366 . -263) (undo-tree-id49367 . -263) (undo-tree-id49368 . -263) (undo-tree-id49369 . -263) (undo-tree-id49370 . -263) (undo-tree-id49371 . -263) (undo-tree-id49372 . -263) (undo-tree-id49373 . -263) (undo-tree-id49374 . -263) (undo-tree-id49375 . -263) (undo-tree-id49376 . -263) (undo-tree-id49377 . -263) (undo-tree-id49378 . -263) (undo-tree-id49379 . -263) (undo-tree-id49380 . -263) (undo-tree-id49381 . -263) (undo-tree-id49382 . -263) (undo-tree-id49383 . -263) (undo-tree-id49384 . -263) (undo-tree-id49385 . -263) (undo-tree-id49386 . -263) (undo-tree-id49387 . -263) (undo-tree-id49388 . -263) (undo-tree-id49389 . -263) (undo-tree-id49390 . -263) (undo-tree-id49391 . -329) (undo-tree-id49392 . -329) (undo-tree-id49393 . -329) (undo-tree-id49394 . -329) (undo-tree-id49395 . -329) (undo-tree-id49396 . -329) (undo-tree-id49397 . -329) (undo-tree-id49398 . -329) (undo-tree-id49399 . -329) (undo-tree-id49400 . -329) (undo-tree-id49401 . -329) (undo-tree-id49402 . -329) (undo-tree-id49403 . -329) (undo-tree-id49404 . -329) (undo-tree-id49405 . -329) (undo-tree-id49406 . -329) (undo-tree-id49407 . -329) (undo-tree-id49408 . -329) (undo-tree-id49409 . -329) (undo-tree-id49410 . -329) (undo-tree-id49411 . -329) (undo-tree-id49412 . -335) (undo-tree-id49413 . -335) (undo-tree-id49414 . -335) (undo-tree-id49415 . -335) (undo-tree-id49416 . -335) (undo-tree-id49417 . -335) (undo-tree-id49418 . -335) (undo-tree-id49419 . -335) (undo-tree-id49420 . -335) (undo-tree-id49421 . -335) (undo-tree-id49422 . -335) (undo-tree-id49423 . -339) (undo-tree-id49424 . -339) (undo-tree-id49425 . -339) (undo-tree-id49426 . -339) (undo-tree-id49427 . -339) (undo-tree-id49428 . -339) (undo-tree-id49429 . -339) (undo-tree-id49430 . -339) (undo-tree-id49431 . -339) (undo-tree-id49432 . -339) (undo-tree-id49433 . -339) (undo-tree-id49434 . 41) (undo-tree-id49435 . -347) (undo-tree-id49436 . -346) (undo-tree-id49437 . -346) (undo-tree-id49438 . -346) (undo-tree-id49439 . -346) (undo-tree-id49440 . -346) (undo-tree-id49441 . -346) (undo-tree-id49442 . -346) (undo-tree-id49443 . -346) (undo-tree-id49444 . -346) (undo-tree-id49445 . -346) (undo-tree-id49446 . -346) (undo-tree-id49447 . -349) (undo-tree-id49448 . -349) (undo-tree-id49449 . -349) (undo-tree-id49450 . -349) (undo-tree-id49451 . -349) (undo-tree-id49452 . -349) (undo-tree-id49453 . -349) (undo-tree-id49454 . -349) (undo-tree-id49455 . -349) (undo-tree-id49456 . -349) (undo-tree-id49457 . -349) (undo-tree-id49458 . -351) (undo-tree-id49459 . -351) (undo-tree-id49460 . -351) (undo-tree-id49461 . -351) (undo-tree-id49462 . -351) (undo-tree-id49463 . -351) (undo-tree-id49464 . -351) (undo-tree-id49465 . -351) (undo-tree-id49466 . -351) (undo-tree-id49467 . -351) (undo-tree-id49468 . -351) (undo-tree-id49469 . -358) (undo-tree-id49470 . -358) (undo-tree-id49471 . -358) (undo-tree-id49472 . -358) (undo-tree-id49473 . -358) (undo-tree-id49474 . -358) (undo-tree-id49475 . -358) (undo-tree-id49476 . -358) (undo-tree-id49477 . -358) (undo-tree-id49478 . -358) (undo-tree-id49479 . -358) (undo-tree-id49480 . -365) (undo-tree-id49481 . -365) (undo-tree-id49482 . -365) (undo-tree-id49483 . -365) (undo-tree-id49484 . -365) (undo-tree-id49485 . -365) (undo-tree-id49486 . -365) (undo-tree-id49487 . -365) (undo-tree-id49488 . -365) (undo-tree-id49489 . -365) (undo-tree-id49490 . -365) (undo-tree-id49491 . -369) (undo-tree-id49492 . -369) (undo-tree-id49493 . -369) (undo-tree-id49494 . -369) (undo-tree-id49495 . -369) (undo-tree-id49496 . -369) (undo-tree-id49497 . -369) (undo-tree-id49498 . -369) (undo-tree-id49499 . -369) (undo-tree-id49500 . -369) (undo-tree-id49501 . -369) (undo-tree-id49502 . -369) (undo-tree-id49503 . -369) (undo-tree-id49504 . -369) (undo-tree-id49505 . -369) (undo-tree-id49506 . -369) (undo-tree-id49507 . -381) (undo-tree-id49508 . -381) (undo-tree-id49509 . -381) (undo-tree-id49510 . -381) (undo-tree-id49511 . -381) (undo-tree-id49512 . -381) (undo-tree-id49513 . -381) (undo-tree-id49514 . -381) (undo-tree-id49515 . -381) (undo-tree-id49516 . -381) (undo-tree-id49517 . -381) (undo-tree-id49518 . -382) (undo-tree-id49519 . -382) (undo-tree-id49520 . -382) (undo-tree-id49521 . -382) (undo-tree-id49522 . -382) (undo-tree-id49523 . -382) (undo-tree-id49524 . -382) (undo-tree-id49525 . -382) (undo-tree-id49526 . -382) (undo-tree-id49527 . -382) (undo-tree-id49528 . -382) (undo-tree-id49529 . -382) (undo-tree-id49530 . -382) (undo-tree-id49531 . -382) (undo-tree-id49532 . -382) (undo-tree-id49533 . -382) (undo-tree-id49534 . -382) (undo-tree-id49535 . -382) (undo-tree-id49536 . -382) (undo-tree-id49537 . -382) (undo-tree-id49538 . -382) (undo-tree-id49539 . -382) (undo-tree-id49540 . -382) (undo-tree-id49541 . -382) (undo-tree-id49542 . -382) (undo-tree-id49543 . -382) (undo-tree-id49544 . -382) (undo-tree-id49545 . -382) (undo-tree-id49546 . -382) (undo-tree-id49547 . -382) (undo-tree-id49548 . -382) (undo-tree-id49549 . -382) (undo-tree-id49550 . -382) (undo-tree-id49551 . -382) (undo-tree-id49552 . -382) (undo-tree-id49553 . -382) (undo-tree-id49554 . -382) (undo-tree-id49555 . -382) (undo-tree-id49556 . -382) (undo-tree-id49557 . -382) (undo-tree-id49558 . -382) (undo-tree-id49559 . -382) (undo-tree-id49560 . -382) (undo-tree-id49561 . -382) (undo-tree-id49562 . -382) (undo-tree-id49563 . -382) (undo-tree-id49564 . -382) (undo-tree-id49565 . -382) (undo-tree-id49566 . -382) (undo-tree-id49567 . -382) (undo-tree-id49568 . -382) (undo-tree-id49569 . -382) (undo-tree-id49570 . -382) (undo-tree-id49571 . -382) (undo-tree-id49572 . -382) (undo-tree-id49573 . -382) (undo-tree-id49574 . -382) (undo-tree-id49575 . -382) (undo-tree-id49576 . -382) (undo-tree-id49577 . -382) (undo-tree-id49578 . -382) (undo-tree-id49579 . -382) (undo-tree-id49580 . -382) (undo-tree-id49581 . -382) (undo-tree-id49582 . -382) (undo-tree-id49583 . -382) (undo-tree-id49584 . -382) (undo-tree-id49585 . -382) (undo-tree-id49586 . -382) (undo-tree-id49587 . -382) (undo-tree-id49588 . -382) (undo-tree-id49589 . -382) (undo-tree-id49590 . -382) (undo-tree-id49591 . -382) (undo-tree-id49592 . -382) (undo-tree-id49593 . -382) (undo-tree-id49594 . -382) (undo-tree-id49595 . -382) (undo-tree-id49596 . -382) (undo-tree-id49597 . -382) (undo-tree-id49598 . -382) (undo-tree-id49599 . -382) (undo-tree-id49600 . -382) (undo-tree-id49601 . -382) (undo-tree-id49602 . -382) (undo-tree-id49603 . -382) (undo-tree-id49604 . -382) (undo-tree-id49605 . -382) (undo-tree-id49606 . -382) (undo-tree-id49607 . -382) (undo-tree-id49608 . -382) (undo-tree-id49609 . -382) (undo-tree-id49610 . -382) (undo-tree-id49611 . -382) (undo-tree-id49612 . -382) (undo-tree-id49613 . -382) (undo-tree-id49614 . -382) (undo-tree-id49615 . -382) (undo-tree-id49616 . -382) (undo-tree-id49617 . -382) (undo-tree-id49618 . -382) (undo-tree-id49619 . -382) (undo-tree-id49620 . -382) (undo-tree-id49621 . -382) (undo-tree-id49622 . -382) (undo-tree-id49623 . -382) (undo-tree-id49624 . -382) (undo-tree-id49625 . -382) (undo-tree-id49626 . -382) (undo-tree-id49627 . -382) (undo-tree-id49628 . -382) (undo-tree-id49629 . -382) (undo-tree-id49630 . -382) (undo-tree-id49631 . -382) (undo-tree-id49632 . -382) (undo-tree-id49633 . -382) (undo-tree-id49634 . -382) (undo-tree-id49635 . -382) (undo-tree-id49636 . -382) (undo-tree-id49637 . -382) (undo-tree-id49638 . -382) (undo-tree-id49639 . -382) (undo-tree-id49640 . -382) (undo-tree-id49641 . -382) (undo-tree-id49642 . -382) (undo-tree-id49643 . -382) (undo-tree-id49644 . -382) (undo-tree-id49645 . -382) (undo-tree-id49646 . -382) (undo-tree-id49647 . -382) (undo-tree-id49648 . -382) (undo-tree-id49649 . -382) (undo-tree-id49650 . -382) (undo-tree-id49651 . -382) (undo-tree-id49652 . -382) (undo-tree-id49653 . -382) (undo-tree-id49654 . -382) (undo-tree-id49655 . -382) (undo-tree-id49656 . -382) (undo-tree-id49657 . -382) (undo-tree-id49658 . -382) (undo-tree-id49659 . -382) (undo-tree-id49660 . -382) (undo-tree-id49661 . -382) (undo-tree-id49662 . -382) (undo-tree-id49663 . -382) (undo-tree-id49664 . -382) (undo-tree-id49665 . -382) (undo-tree-id49666 . -382) (undo-tree-id49667 . -382) (undo-tree-id49668 . -382) (undo-tree-id49669 . -382) (undo-tree-id49670 . -382) (undo-tree-id49671 . -382) (undo-tree-id49672 . -382) (undo-tree-id49673 . -382) (undo-tree-id49674 . -382) (undo-tree-id49675 . -382) (undo-tree-id49676 . -382) (undo-tree-id49677 . -382) (undo-tree-id49678 . -382) (undo-tree-id49679 . -382) (undo-tree-id49680 . -382) (undo-tree-id49681 . -382) (undo-tree-id49682 . -382) (undo-tree-id49683 . -382) (undo-tree-id49684 . -382) (undo-tree-id49685 . -382) (undo-tree-id49686 . -382) (undo-tree-id49687 . -382) (undo-tree-id49688 . -382) (undo-tree-id49689 . -382) (undo-tree-id49690 . -382) (undo-tree-id49691 . -382) (undo-tree-id49692 . -382) (undo-tree-id49693 . -382) (undo-tree-id49694 . -382) (undo-tree-id49695 . -382) (undo-tree-id49696 . -382) (undo-tree-id49697 . -382) (undo-tree-id49698 . -382) (undo-tree-id49699 . -382) (undo-tree-id49700 . -382) (undo-tree-id49701 . -382) (undo-tree-id49702 . -382) (undo-tree-id49703 . -382) (undo-tree-id49704 . -382) (undo-tree-id49705 . -382) (undo-tree-id49706 . -382) (undo-tree-id49707 . -382) (undo-tree-id49708 . -382) (undo-tree-id49709 . -382) (undo-tree-id49710 . -382) (undo-tree-id49711 . -382) (undo-tree-id49712 . -382) (undo-tree-id49713 . -382) (undo-tree-id49714 . -382) (undo-tree-id49715 . -382) (undo-tree-id49716 . -382) (undo-tree-id49717 . -382) (undo-tree-id49718 . -382) (undo-tree-id49719 . -382) (undo-tree-id49720 . -382) (undo-tree-id49721 . -382) (undo-tree-id49722 . -382) (undo-tree-id49723 . -382) (undo-tree-id49724 . -382) (undo-tree-id49725 . -382) (undo-tree-id49726 . -382) (undo-tree-id49727 . -382) (undo-tree-id49728 . -382) (undo-tree-id49729 . -382) (undo-tree-id49730 . -382) (undo-tree-id49731 . -382) (undo-tree-id49732 . -382) (undo-tree-id49733 . -382) (undo-tree-id49734 . -382) (undo-tree-id49735 . -382) (undo-tree-id49736 . -382) (undo-tree-id49737 . -382) (undo-tree-id49738 . -382) (undo-tree-id49739 . -382) (undo-tree-id49740 . -382) (undo-tree-id49741 . -382) (undo-tree-id49742 . -382) (undo-tree-id49743 . -382) (undo-tree-id49744 . -258) (5767 . 6025) (#("
 a temperature close to 0 will favor the high-probability characters, while a very high temperature will give all characters an equal probability. The following next_char() function uses this approach to pick the next character to add to the input text:" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 70 71 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 71 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 148 166 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 166 167 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t invisible t) 167 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 171 211 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 211 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 218 219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 219 241 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 241 244 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 244 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 5891) (undo-tree-id49745 . 253) (undo-tree-id49746 . -1) (undo-tree-id49747 . -1) (undo-tree-id49748 . -1) (undo-tree-id49749 . -1) (undo-tree-id49750 . -1) (undo-tree-id49751 . -1) (undo-tree-id49752 . -1) (undo-tree-id49753 . -1) (undo-tree-id49754 . -1) (undo-tree-id49755 . -1) (undo-tree-id49756 . -1) (undo-tree-id49757 . -1) (undo-tree-id49758 . -1) (undo-tree-id49759 . -1) (undo-tree-id49760 . -1) (undo-tree-id49761 . -1) (undo-tree-id49762 . -1) (undo-tree-id49763 . -1) (undo-tree-id49764 . -1) 5892 (5891 . 5892)) nil (25767 12435 311409 143000) 0 nil])
([nil nil ((5894 . 5895) (#("  " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5894) (undo-tree-id49156 . 1) (undo-tree-id49157 . -1) (undo-tree-id49158 . -1) (undo-tree-id49159 . -1) (undo-tree-id49160 . -1) (undo-tree-id49161 . -1) (undo-tree-id49162 . -1) (undo-tree-id49163 . -1) (undo-tree-id49164 . -1) (undo-tree-id49165 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5895) (undo-tree-id49166 . 1) (undo-tree-id49167 . -1) 5894) nil (25767 12435 309448 827000) 0 nil])
([nil nil ((5895 . 5896) (#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5895) (t 25767 12435 368363 228000)) nil (25767 12467 966753 695000) 0 nil])
([nil nil ((5893 . 6150) (#("- The following next_char() function uses this approach to pick the next character to add to the input text:

- A temperature close to 0 will favor the high-probability characters, while a very high temperature will give all characters an equal probability." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 20 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 20 21 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 21 25 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 25 65 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 65 72 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 73 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 95 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 95 98 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 98 108 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 108 109 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 109 110 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 110 111 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 111 112 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 112 180 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 180 181 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 181 257 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5893) (undo-tree-id50024 . -112) (undo-tree-id50025 . -112) (undo-tree-id50026 . -112) (undo-tree-id50027 . -112) (undo-tree-id50028 . 144) (undo-tree-id50029 . 145) (undo-tree-id50030 . -111) (undo-tree-id50031 . -111) (undo-tree-id50032 . -111) (undo-tree-id50033 . -111) (undo-tree-id50034 . -111) (undo-tree-id50035 . -111) (undo-tree-id50036 . -111) (undo-tree-id50037 . -111) (undo-tree-id50038 . -257) (undo-tree-id50039 . -111) (undo-tree-id50040 . -111) (undo-tree-id50041 . -111) (undo-tree-id50042 . -111) (undo-tree-id50043 . -111) (undo-tree-id50044 . -111) (undo-tree-id50045 . -111) (undo-tree-id50046 . -111) (undo-tree-id50047 . -111) (undo-tree-id50048 . -111) (undo-tree-id50049 . -111) (undo-tree-id50050 . -111) (undo-tree-id50051 . -111) (undo-tree-id50052 . -111) (undo-tree-id50053 . -111) (undo-tree-id50054 . -111) (undo-tree-id50055 . -111) (undo-tree-id50056 . -111) (undo-tree-id50057 . -111) (undo-tree-id50058 . -111) (undo-tree-id50059 . -111) (undo-tree-id50060 . -111) (undo-tree-id50061 . -111) (undo-tree-id50062 . -111) (undo-tree-id50063 . -112) (undo-tree-id50064 . -112) (undo-tree-id50065 . -112) (undo-tree-id50066 . -112) (undo-tree-id50067 . -112) (undo-tree-id50068 . -112) (undo-tree-id50069 . -112) (undo-tree-id50070 . -112) (undo-tree-id50071 . -112) (undo-tree-id50072 . -112) (undo-tree-id50073 . -112) (undo-tree-id50074 . -112) (undo-tree-id50075 . -112) (undo-tree-id50076 . -112) (undo-tree-id50077 . -112) (undo-tree-id50078 . -112) (undo-tree-id50079 . -112) (undo-tree-id50080 . -112) (undo-tree-id50081 . -112) (undo-tree-id50082 . -112) (undo-tree-id50083 . -112) (undo-tree-id50084 . -112) (undo-tree-id50085 . -112) (undo-tree-id50086 . -112) (undo-tree-id50087 . -112) (undo-tree-id50088 . -112) (undo-tree-id50089 . -112) (undo-tree-id50090 . -112) (undo-tree-id50091 . -112) (undo-tree-id50092 . -112) (undo-tree-id50093 . -112) (undo-tree-id50094 . -112) (undo-tree-id50095 . -112) (undo-tree-id50096 . -112) (undo-tree-id50097 . -112) (undo-tree-id50098 . -112) (undo-tree-id50099 . -112) (undo-tree-id50100 . -112) (undo-tree-id50101 . -112) (undo-tree-id50102 . -112) (undo-tree-id50103 . -112) (undo-tree-id50104 . -112) (undo-tree-id50105 . -112) (undo-tree-id50106 . -112) (undo-tree-id50107 . -112) (undo-tree-id50108 . -112) (undo-tree-id50109 . -112) (undo-tree-id50110 . -112) (undo-tree-id50111 . -112) (undo-tree-id50112 . -112) (undo-tree-id50113 . -112) (undo-tree-id50114 . -112) (undo-tree-id50115 . -112) (undo-tree-id50116 . -112) (undo-tree-id50117 . -112) (undo-tree-id50118 . -112) (undo-tree-id50119 . -112) (undo-tree-id50120 . -112) (undo-tree-id50121 . -112) (undo-tree-id50122 . -112) (undo-tree-id50123 . -112) (undo-tree-id50124 . -112) (undo-tree-id50125 . -112) (undo-tree-id50126 . -112) (undo-tree-id50127 . -112) (undo-tree-id50128 . -112) (undo-tree-id50129 . -112) (undo-tree-id50130 . -112) (undo-tree-id50131 . -112) (undo-tree-id50132 . -112) (undo-tree-id50133 . -112) (undo-tree-id50134 . -112) (undo-tree-id50135 . -124) (undo-tree-id50136 . -124) (undo-tree-id50137 . -124) (undo-tree-id50138 . -124) (undo-tree-id50139 . -124) (undo-tree-id50140 . -124) (undo-tree-id50141 . -124) (undo-tree-id50142 . -124) (undo-tree-id50143 . -124) (undo-tree-id50144 . -124) (undo-tree-id50145 . -124) (undo-tree-id50146 . -130) (undo-tree-id50147 . -130) (undo-tree-id50148 . -130) (undo-tree-id50149 . -130) (undo-tree-id50150 . -130) (undo-tree-id50151 . -130) (undo-tree-id50152 . -130) (undo-tree-id50153 . -130) (undo-tree-id50154 . -130) (undo-tree-id50155 . -130) (undo-tree-id50156 . -130) (undo-tree-id50157 . -133) (undo-tree-id50158 . -133) (undo-tree-id50159 . -133) (undo-tree-id50160 . -133) (undo-tree-id50161 . -133) (undo-tree-id50162 . -133) (undo-tree-id50163 . -133) (undo-tree-id50164 . -133) (undo-tree-id50165 . -133) (undo-tree-id50166 . -133) (undo-tree-id50167 . -133) (undo-tree-id50168 . -135) (undo-tree-id50169 . -135) (undo-tree-id50170 . -135) (undo-tree-id50171 . -135) (undo-tree-id50172 . -135) (undo-tree-id50173 . -135) (undo-tree-id50174 . -135) (undo-tree-id50175 . -135) (undo-tree-id50176 . -135) (undo-tree-id50177 . -135) (undo-tree-id50178 . -135) (undo-tree-id50179 . -135) (undo-tree-id50180 . -135) (undo-tree-id50181 . -135) (undo-tree-id50182 . -135) (undo-tree-id50183 . -135) (undo-tree-id50184 . -140) (undo-tree-id50185 . -140) (undo-tree-id50186 . -140) (undo-tree-id50187 . -140) (undo-tree-id50188 . -140) (undo-tree-id50189 . -140) (undo-tree-id50190 . -140) (undo-tree-id50191 . -140) (undo-tree-id50192 . -140) (undo-tree-id50193 . -140) (undo-tree-id50194 . -140) (undo-tree-id50195 . -146) (undo-tree-id50196 . -146) (undo-tree-id50197 . -146) (undo-tree-id50198 . -146) (undo-tree-id50199 . -146) (undo-tree-id50200 . -146) (undo-tree-id50201 . -146) (undo-tree-id50202 . -146) (undo-tree-id50203 . -146) (undo-tree-id50204 . -146) (undo-tree-id50205 . -146) (undo-tree-id50206 . -150) (undo-tree-id50207 . -150) (undo-tree-id50208 . -150) (undo-tree-id50209 . -150) (undo-tree-id50210 . -150) (undo-tree-id50211 . -150) (undo-tree-id50212 . -150) (undo-tree-id50213 . -150) (undo-tree-id50214 . -150) (undo-tree-id50215 . -150) (undo-tree-id50216 . -150) (undo-tree-id50217 . -155) (undo-tree-id50218 . -155) (undo-tree-id50219 . -155) (undo-tree-id50220 . -155) (undo-tree-id50221 . -155) (undo-tree-id50222 . -155) (undo-tree-id50223 . -155) (undo-tree-id50224 . -155) (undo-tree-id50225 . -155) (undo-tree-id50226 . -155) (undo-tree-id50227 . -155) (undo-tree-id50228 . -156) (undo-tree-id50229 . -156) (undo-tree-id50230 . -156) (undo-tree-id50231 . -156) (undo-tree-id50232 . -156) (undo-tree-id50233 . -156) (undo-tree-id50234 . -156) (undo-tree-id50235 . -156) (undo-tree-id50236 . -156) (undo-tree-id50237 . -156) (undo-tree-id50238 . -156) (undo-tree-id50239 . -167) (undo-tree-id50240 . -167) (undo-tree-id50241 . -167) (undo-tree-id50242 . -167) (undo-tree-id50243 . -167) (undo-tree-id50244 . -167) (undo-tree-id50245 . -167) (undo-tree-id50246 . -167) (undo-tree-id50247 . -167) (undo-tree-id50248 . -167) (undo-tree-id50249 . -167) (undo-tree-id50250 . -178) (undo-tree-id50251 . -178) (undo-tree-id50252 . -178) (undo-tree-id50253 . -178) (undo-tree-id50254 . -178) (undo-tree-id50255 . -178) (undo-tree-id50256 . -178) (undo-tree-id50257 . -178) (undo-tree-id50258 . -178) (undo-tree-id50259 . -178) (undo-tree-id50260 . -178) (undo-tree-id50261 . -179) (undo-tree-id50262 . -179) (undo-tree-id50263 . -179) (undo-tree-id50264 . -179) (undo-tree-id50265 . -179) (undo-tree-id50266 . -179) (undo-tree-id50267 . -179) (undo-tree-id50268 . -179) (undo-tree-id50269 . -179) (undo-tree-id50270 . -179) (undo-tree-id50271 . -179) (undo-tree-id50272 . -179) (undo-tree-id50273 . -179) (undo-tree-id50274 . -179) (undo-tree-id50275 . -179) (undo-tree-id50276 . -179) (undo-tree-id50277 . -185) (undo-tree-id50278 . -185) (undo-tree-id50279 . -185) (undo-tree-id50280 . -185) (undo-tree-id50281 . -185) (undo-tree-id50282 . -185) (undo-tree-id50283 . -185) (undo-tree-id50284 . -185) (undo-tree-id50285 . -185) (undo-tree-id50286 . -185) (undo-tree-id50287 . -185) (undo-tree-id50288 . -185) (undo-tree-id50289 . -185) (undo-tree-id50290 . -185) (undo-tree-id50291 . -185) (undo-tree-id50292 . -185) (undo-tree-id50293 . -187) (undo-tree-id50294 . -187) (undo-tree-id50295 . -187) (undo-tree-id50296 . -187) (undo-tree-id50297 . -187) (undo-tree-id50298 . -187) (undo-tree-id50299 . -192) (undo-tree-id50300 . -192) (undo-tree-id50301 . -192) (undo-tree-id50302 . -192) (undo-tree-id50303 . -192) (undo-tree-id50304 . -192) (undo-tree-id50305 . -197) (undo-tree-id50306 . -197) (undo-tree-id50307 . -197) (undo-tree-id50308 . -197) (undo-tree-id50309 . -197) (undo-tree-id50310 . -197) (undo-tree-id50311 . -209) (undo-tree-id50312 . -209) (undo-tree-id50313 . -209) (undo-tree-id50314 . -209) (undo-tree-id50315 . -209) (undo-tree-id50316 . -209) (undo-tree-id50317 . -214) (undo-tree-id50318 . -214) (undo-tree-id50319 . -214) (undo-tree-id50320 . -214) (undo-tree-id50321 . -214) (undo-tree-id50322 . -214) (undo-tree-id50323 . -214) (undo-tree-id50324 . -214) (undo-tree-id50325 . -214) (undo-tree-id50326 . -214) (undo-tree-id50327 . -214) (undo-tree-id50328 . -214) (undo-tree-id50329 . -214) (undo-tree-id50330 . -214) (undo-tree-id50331 . -214) (undo-tree-id50332 . -214) (undo-tree-id50333 . -214) (undo-tree-id50334 . -214) (undo-tree-id50335 . -214) (undo-tree-id50336 . -214) (undo-tree-id50337 . -214) (undo-tree-id50338 . -219) (undo-tree-id50339 . -219) (undo-tree-id50340 . -219) (undo-tree-id50341 . -219) (undo-tree-id50342 . -219) (undo-tree-id50343 . -219) (undo-tree-id50344 . -219) (undo-tree-id50345 . -219) (undo-tree-id50346 . -219) (undo-tree-id50347 . -219) (undo-tree-id50348 . -219) (undo-tree-id50349 . -219) (undo-tree-id50350 . -219) (undo-tree-id50351 . -219) (undo-tree-id50352 . -219) (undo-tree-id50353 . -219) (undo-tree-id50354 . -219) (undo-tree-id50355 . -219) (undo-tree-id50356 . -219) (undo-tree-id50357 . -219) (undo-tree-id50358 . -219) (undo-tree-id50359 . -219) (undo-tree-id50360 . -219) (undo-tree-id50361 . -219) (undo-tree-id50362 . -219) (undo-tree-id50363 . -219) (undo-tree-id50364 . -223) (undo-tree-id50365 . -223) (undo-tree-id50366 . -223) (undo-tree-id50367 . -223) (undo-tree-id50368 . -223) (undo-tree-id50369 . -223) (undo-tree-id50370 . -223) (undo-tree-id50371 . -223) (undo-tree-id50372 . -223) (undo-tree-id50373 . -223) (undo-tree-id50374 . -223) (undo-tree-id50375 . -223) (undo-tree-id50376 . -223) (undo-tree-id50377 . -223) (undo-tree-id50378 . -223) (undo-tree-id50379 . -223) (undo-tree-id50380 . -223) (undo-tree-id50381 . -223) (undo-tree-id50382 . -223) (undo-tree-id50383 . -223) (undo-tree-id50384 . -223) (undo-tree-id50385 . -234) (undo-tree-id50386 . -234) (undo-tree-id50387 . -234) (undo-tree-id50388 . -234) (undo-tree-id50389 . -234) (undo-tree-id50390 . -234) (undo-tree-id50391 . -234) (undo-tree-id50392 . -234) (undo-tree-id50393 . -234) (undo-tree-id50394 . -234) (undo-tree-id50395 . -234) (undo-tree-id50396 . -237) (undo-tree-id50397 . -237) (undo-tree-id50398 . -237) (undo-tree-id50399 . -237) (undo-tree-id50400 . -237) (undo-tree-id50401 . -237) (undo-tree-id50402 . -237) (undo-tree-id50403 . -237) (undo-tree-id50404 . -237) (undo-tree-id50405 . -237) (undo-tree-id50406 . -237) (undo-tree-id50407 . -243) (undo-tree-id50408 . -243) (undo-tree-id50409 . -243) (undo-tree-id50410 . -243) (undo-tree-id50411 . -243) (undo-tree-id50412 . -243) (undo-tree-id50413 . -243) (undo-tree-id50414 . -243) (undo-tree-id50415 . -243) (undo-tree-id50416 . -243) (undo-tree-id50417 . -243) (undo-tree-id50418 . -255) (undo-tree-id50419 . -255) (undo-tree-id50420 . -255) (undo-tree-id50421 . -255) (undo-tree-id50422 . -255) (undo-tree-id50423 . -255) (undo-tree-id50424 . -255) (undo-tree-id50425 . -255) (undo-tree-id50426 . -255) (undo-tree-id50427 . -255) (undo-tree-id50428 . -255) (undo-tree-id50429 . -256) (undo-tree-id50430 . -256) (undo-tree-id50431 . -256) (undo-tree-id50432 . -256) (undo-tree-id50433 . -256) (undo-tree-id50434 . -256) (undo-tree-id50435 . -256) (undo-tree-id50436 . -256) (undo-tree-id50437 . -256) (undo-tree-id50438 . -256) (undo-tree-id50439 . -256) (undo-tree-id50440 . -256) (undo-tree-id50441 . -256) (undo-tree-id50442 . -256) (undo-tree-id50443 . -256) (undo-tree-id50444 . -256) (undo-tree-id50445 . -257) (undo-tree-id50446 . -257) (undo-tree-id50447 . -257) (undo-tree-id50448 . -257) (undo-tree-id50449 . -257) (undo-tree-id50450 . -257) (undo-tree-id50451 . -257) (undo-tree-id50452 . -257) (undo-tree-id50453 . -257) (undo-tree-id50454 . -257) (undo-tree-id50455 . -257) (undo-tree-id50456 . -257) (undo-tree-id50457 . -257) (undo-tree-id50458 . -257) (undo-tree-id50459 . -257) (undo-tree-id50460 . -257) (undo-tree-id50461 . -257) (undo-tree-id50462 . -257) (undo-tree-id50463 . -257) (undo-tree-id50464 . -257) (undo-tree-id50465 . -257) (undo-tree-id50466 . -257) (undo-tree-id50467 . -257) (undo-tree-id50468 . -257) (undo-tree-id50469 . -257) (undo-tree-id50470 . -257) (undo-tree-id50471 . -257) (undo-tree-id50472 . -257) (undo-tree-id50473 . -257) (undo-tree-id50474 . -110) (5893 . 6003) (#(" The following next_char() function uses this approach to pick the next character to add to the input text:" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 19 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 20 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 24 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 64 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 94 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 97 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6040)) nil (25767 12467 966736 145000) 0 nil])
([nil nil ((#("- The following next_char() function uses this approach to pick the next character to add to the input text:
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 20 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 21 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 25 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 65 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 73 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 95 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 98 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 108 109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6042) (undo-tree-id49973 . -108) (undo-tree-id49974 . 1) (undo-tree-id49975 . 107) (undo-tree-id49976 . -2) (undo-tree-id49977 . -2) (undo-tree-id49978 . -2) (undo-tree-id49979 . -2) (undo-tree-id49980 . -2) (undo-tree-id49981 . -2) (undo-tree-id49982 . -2) (undo-tree-id49983 . -2) (undo-tree-id49984 . -2) (undo-tree-id49985 . -2) (undo-tree-id49986 . -2) (undo-tree-id49987 . -2) (undo-tree-id49988 . -2) (undo-tree-id49989 . -2) (undo-tree-id49990 . -2) (undo-tree-id49991 . -2) (undo-tree-id49992 . -2) (undo-tree-id49993 . -1) (undo-tree-id49994 . -1) (undo-tree-id49995 . -1) (undo-tree-id49996 . -1) (undo-tree-id49997 . -1) (undo-tree-id49998 . -1) (undo-tree-id49999 . -1) (undo-tree-id50000 . -1) (undo-tree-id50001 . -1) (undo-tree-id50002 . -1) (undo-tree-id50003 . -1) (undo-tree-id50004 . -1) (undo-tree-id50005 . -1) (undo-tree-id50006 . -1) (undo-tree-id50007 . -1) (undo-tree-id50008 . -1) (undo-tree-id50009 . -1) (undo-tree-id50010 . -1) (undo-tree-id50011 . -1) (undo-tree-id50012 . -1) (undo-tree-id50013 . -1) (undo-tree-id50014 . -1) (undo-tree-id50015 . -1) (undo-tree-id50016 . -1) (undo-tree-id50017 . -1) (undo-tree-id50018 . -1) (undo-tree-id50019 . -1) (undo-tree-id50020 . -1) (undo-tree-id50021 . -1) (undo-tree-id50022 . -1) (undo-tree-id50023 . -109)) nil (25767 12467 965858 985000) 0 nil])
([nil nil ((#("def next_char(text, temperature=1):
X_new = preprocess([text])
y_proba = model.predict(X_new)[0, -1:, :]
rescaled_logits = tf.math.log(y_proba) / temperature
char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
return tokenizer.sequences_to_texts(char_id.numpy())[0]
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 9 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 13 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 38 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 41 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 65 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 70 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 88 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 89 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 92 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 105 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 113 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 114 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 120 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 136 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 137 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 142 158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 158 162 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 162 163 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 163 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 165 198 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 198 199 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 199 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 205 210 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 210 211 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 211 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 218 226 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 226 252 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 252 253 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 253 255 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 255 256 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 256 261 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 261 266 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 266 267 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 267 275 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 275 282 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6042) (undo-tree-id49931 . -281) (undo-tree-id49932 . -226) (undo-tree-id49933 . 282) (undo-tree-id49934 . 168) (undo-tree-id49935 . -120) (undo-tree-id49936 . 159) (undo-tree-id49937 . -125) (undo-tree-id49938 . -226) (undo-tree-id49939 . -282) (undo-tree-id49940 . -226) (undo-tree-id49941 . -36) (undo-tree-id49942 . -36) (undo-tree-id49943 . -36) (undo-tree-id49944 . -36) (undo-tree-id49945 . -36) (undo-tree-id49946 . -36) (undo-tree-id49947 . -63) (undo-tree-id49948 . -63) (undo-tree-id49949 . -63) (undo-tree-id49950 . -63) (undo-tree-id49951 . -63) (undo-tree-id49952 . -63) (undo-tree-id49953 . -105) (undo-tree-id49954 . -105) (undo-tree-id49955 . -105) (undo-tree-id49956 . -105) (undo-tree-id49957 . -105) (undo-tree-id49958 . -105) (undo-tree-id49959 . -158) (undo-tree-id49960 . -158) (undo-tree-id49961 . -158) (undo-tree-id49962 . -158) (undo-tree-id49963 . -158) (undo-tree-id49964 . -158) (undo-tree-id49965 . -226) (undo-tree-id49966 . -226) (undo-tree-id49967 . -226) (undo-tree-id49968 . -226) (undo-tree-id49969 . -226) (undo-tree-id49970 . -226) (undo-tree-id49971 . -226) (undo-tree-id49972 . -282) 6268) nil (25767 12467 965824 109000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7298 . 7299) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7580) (7298 . 7581)) nil (25767 12467 965782 477000) 0 nil])
([nil nil ((7544 . 7545) (7543 . 7544) (7542 . 7543) (7541 . 7542) (7472 . 7473) (7471 . 7472) (7470 . 7471) (7469 . 7470) (7415 . 7416) (7414 . 7415) (7413 . 7414) (7412 . 7413) (7369 . 7370) (7368 . 7369) (7367 . 7368) (7366 . 7367) (7335 . 7339) (t 25767 12468 28766 327000)) nil (25767 12473 534075 175000) 0 nil])
([nil nil ((#("This will" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5607) (undo-tree-id50915 . -8) (undo-tree-id50916 . -8) (undo-tree-id50917 . -8) (undo-tree-id50918 . -3) (undo-tree-id50919 . -3) (undo-tree-id50920 . -3) (undo-tree-id50921 . -3) (undo-tree-id50922 . -3) (undo-tree-id50923 . -3) (undo-tree-id50924 . -9) (undo-tree-id50925 . -8) (undo-tree-id50926 . -3) (undo-tree-id50927 . -3) (undo-tree-id50928 . -3) (undo-tree-id50929 . -3) (undo-tree-id50930 . -3) (undo-tree-id50931 . -3) (undo-tree-id50932 . -8) (undo-tree-id50933 . -8) (undo-tree-id50934 . -8) (undo-tree-id50935 . -8) (undo-tree-id50936 . -8) (undo-tree-id50937 . -8) (undo-tree-id50938 . -8) (undo-tree-id50939 . -9) 5615 (t 25767 12473 592836 104000)) nil (25767 12515 719777 322000) 0 nil])
([nil nil ((5607 . 5609) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5607) (undo-tree-id50842 . -1) (undo-tree-id50843 . -1) (undo-tree-id50844 . -1) (undo-tree-id50845 . -1) (undo-tree-id50846 . -1) (undo-tree-id50847 . -1) (undo-tree-id50848 . -1) (undo-tree-id50849 . -1) (undo-tree-id50850 . -1) (undo-tree-id50851 . -1) (undo-tree-id50852 . -1) (undo-tree-id50853 . -1) (undo-tree-id50854 . -1) (undo-tree-id50855 . -1) (undo-tree-id50856 . -1) (undo-tree-id50857 . -1) (undo-tree-id50858 . -1) (undo-tree-id50859 . -1) (undo-tree-id50860 . -1) (undo-tree-id50861 . -1) (undo-tree-id50862 . -1) (undo-tree-id50863 . -1) (undo-tree-id50864 . -1) (undo-tree-id50865 . -1) (undo-tree-id50866 . -1) (undo-tree-id50867 . -1) (undo-tree-id50868 . -1) (undo-tree-id50869 . -1) (undo-tree-id50870 . -1) (undo-tree-id50871 . -1) (undo-tree-id50872 . -1) (undo-tree-id50873 . -1) (undo-tree-id50874 . -1) (undo-tree-id50875 . -1) (undo-tree-id50876 . -1) (undo-tree-id50877 . -1) (undo-tree-id50878 . -1) (undo-tree-id50879 . -1) (undo-tree-id50880 . -1) (undo-tree-id50881 . -1) (undo-tree-id50882 . -1) (undo-tree-id50883 . -1) (undo-tree-id50884 . -1) (undo-tree-id50885 . -1) (undo-tree-id50886 . -1) (undo-tree-id50887 . -1) (undo-tree-id50888 . -1) (undo-tree-id50889 . -1) (undo-tree-id50890 . -1) (undo-tree-id50891 . -1) (undo-tree-id50892 . -1) (undo-tree-id50893 . -1) (undo-tree-id50894 . -1) (undo-tree-id50895 . -1) (undo-tree-id50896 . -1) (undo-tree-id50897 . -1) (#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5608) (undo-tree-id50898 . -1) (undo-tree-id50899 . -1) (undo-tree-id50900 . -1) (undo-tree-id50901 . -1) (undo-tree-id50902 . -1) (undo-tree-id50903 . -1) (undo-tree-id50904 . -1) (undo-tree-id50905 . -1) (undo-tree-id50906 . -1) (undo-tree-id50907 . -1) (undo-tree-id50908 . -1) (undo-tree-id50909 . -1) (undo-tree-id50910 . -1) (undo-tree-id50911 . -1) (undo-tree-id50912 . -1) (undo-tree-id50913 . -1) (undo-tree-id50914 . -1) 5609 (5607 . 5609)) nil (25767 12515 719757 15000) 0 nil])
([nil nil ((#("To generate more diverse and interesting text" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 12 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5607) (undo-tree-id50750 . -44) (undo-tree-id50751 . -44) (undo-tree-id50752 . 43) (undo-tree-id50753 . -2) (undo-tree-id50754 . -2) (undo-tree-id50755 . -44) (undo-tree-id50756 . -1) (undo-tree-id50757 . -1) (undo-tree-id50758 . -1) (undo-tree-id50759 . -1) (undo-tree-id50760 . -1) (undo-tree-id50761 . -1) (undo-tree-id50762 . -1) (undo-tree-id50763 . -1) (undo-tree-id50764 . -1) (undo-tree-id50765 . -1) (undo-tree-id50766 . -1) (undo-tree-id50767 . -1) (undo-tree-id50768 . -1) (undo-tree-id50769 . -1) (undo-tree-id50770 . -1) (undo-tree-id50771 . -1) (undo-tree-id50772 . -1) (undo-tree-id50773 . -1) (undo-tree-id50774 . -1) (undo-tree-id50775 . -1) (undo-tree-id50776 . -1) (undo-tree-id50777 . -1) (undo-tree-id50778 . -1) (undo-tree-id50779 . -1) (undo-tree-id50780 . -1) (undo-tree-id50781 . -1) (undo-tree-id50782 . -2) (undo-tree-id50783 . -2) (undo-tree-id50784 . -2) (undo-tree-id50785 . -2) (undo-tree-id50786 . -2) (undo-tree-id50787 . -2) (undo-tree-id50788 . -2) (undo-tree-id50789 . -2) (undo-tree-id50790 . -2) (undo-tree-id50791 . -2) (undo-tree-id50792 . -2) (undo-tree-id50793 . -2) (undo-tree-id50794 . -2) (undo-tree-id50795 . -1) (undo-tree-id50796 . -1) (undo-tree-id50797 . -1) (undo-tree-id50798 . -1) (undo-tree-id50799 . -1) (undo-tree-id50800 . -1) (undo-tree-id50801 . -1) (undo-tree-id50802 . -1) (undo-tree-id50803 . -1) (undo-tree-id50804 . -1) (undo-tree-id50805 . -1) (undo-tree-id50806 . -1) (undo-tree-id50807 . -1) (undo-tree-id50808 . -1) (undo-tree-id50809 . -1) (undo-tree-id50810 . -1) (undo-tree-id50811 . -1) (undo-tree-id50812 . -1) (undo-tree-id50813 . -1) (undo-tree-id50814 . -1) (undo-tree-id50815 . -1) (undo-tree-id50816 . -1) (undo-tree-id50817 . -1) (undo-tree-id50818 . -1) (undo-tree-id50819 . -1) (undo-tree-id50820 . -1) (undo-tree-id50821 . -1) (undo-tree-id50822 . -1) (undo-tree-id50823 . -1) (undo-tree-id50824 . -1) (undo-tree-id50825 . -1) (undo-tree-id50826 . -1) (undo-tree-id50827 . -1) (undo-tree-id50828 . -1) (undo-tree-id50829 . -1) (undo-tree-id50830 . -1) (undo-tree-id50831 . -45) (undo-tree-id50832 . -44) (undo-tree-id50833 . -1) (undo-tree-id50834 . -10) (undo-tree-id50835 . -15) (undo-tree-id50836 . -23) (undo-tree-id50837 . -27) (undo-tree-id50838 . -39) (undo-tree-id50839 . -44) (undo-tree-id50840 . -44) (undo-tree-id50841 . -45) 5651) nil (25767 12515 719702 506000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5560 . 5561) (nil fontified nil 5516 . 5561) (5516 . 5561) 5515) nil (25767 12515 719424 439000) 0 nil])
([nil nil ((5561 . 5563)) nil (25767 12515 719423 163000) 0 nil])
([nil nil ((5563 . 5564) (#("P" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5563)) nil (25767 12515 719421 568000) 0 nil])
([nil nil ((#("
- . 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5651) (undo-tree-id50475 . -5) (undo-tree-id50476 . -3) (undo-tree-id50477 . -1) (undo-tree-id50478 . -1) (undo-tree-id50479 . -1) (undo-tree-id50480 . -1) (undo-tree-id50481 . -1) (undo-tree-id50482 . -1) (undo-tree-id50483 . -1) (undo-tree-id50484 . -1) (undo-tree-id50485 . -1) (undo-tree-id50486 . -1) (undo-tree-id50487 . -1) (undo-tree-id50488 . -1) (undo-tree-id50489 . -1) (undo-tree-id50490 . -1) (undo-tree-id50491 . -1) (undo-tree-id50492 . -1) (undo-tree-id50493 . -1) (undo-tree-id50494 . -1) (undo-tree-id50495 . -1) (undo-tree-id50496 . -1) (undo-tree-id50497 . -1) (undo-tree-id50498 . -1) (undo-tree-id50499 . -1) (undo-tree-id50500 . -1) (undo-tree-id50501 . -1) (undo-tree-id50502 . -1) (undo-tree-id50503 . -1) (undo-tree-id50504 . -1) (undo-tree-id50505 . -1) (undo-tree-id50506 . -1) (undo-tree-id50507 . -1) (undo-tree-id50508 . -1) (undo-tree-id50509 . -1) (undo-tree-id50510 . -1) (undo-tree-id50511 . -1) (undo-tree-id50512 . -1) (undo-tree-id50513 . -1) (undo-tree-id50514 . -1) (undo-tree-id50515 . -1) (undo-tree-id50516 . -1) (undo-tree-id50517 . -1) (undo-tree-id50518 . -1) (undo-tree-id50519 . -1) (undo-tree-id50520 . -1) (undo-tree-id50521 . -1) (undo-tree-id50522 . -3) (undo-tree-id50523 . -6) (undo-tree-id50524 . -6) (undo-tree-id50525 . -6) (undo-tree-id50526 . -6) (undo-tree-id50527 . -6) (undo-tree-id50528 . -6) (undo-tree-id50529 . -3) (undo-tree-id50530 . -3) (undo-tree-id50531 . -3) (undo-tree-id50532 . -3) (undo-tree-id50533 . -3) (undo-tree-id50534 . -3) (undo-tree-id50535 . -1) (undo-tree-id50536 . -1) (undo-tree-id50537 . -1) (undo-tree-id50538 . -1) (undo-tree-id50539 . -1) (undo-tree-id50540 . -1) (undo-tree-id50541 . -3) (undo-tree-id50542 . -3) (undo-tree-id50543 . -3) (undo-tree-id50544 . -3) (undo-tree-id50545 . -3) (undo-tree-id50546 . -3) (undo-tree-id50547 . -3) (undo-tree-id50548 . -3) (undo-tree-id50549 . -3) (undo-tree-id50550 . -3) (undo-tree-id50551 . -3) (undo-tree-id50552 . -3) (undo-tree-id50553 . -3) (undo-tree-id50554 . -3) (undo-tree-id50555 . -3) (undo-tree-id50556 . -3) (undo-tree-id50557 . -3) (undo-tree-id50558 . -3) (undo-tree-id50559 . -3) (undo-tree-id50560 . -3) (undo-tree-id50561 . -3) (undo-tree-id50562 . -3) (undo-tree-id50563 . -3) (undo-tree-id50564 . -3) (undo-tree-id50565 . -3) (undo-tree-id50566 . -3) (undo-tree-id50567 . -3) (undo-tree-id50568 . -3) (undo-tree-id50569 . -3) (undo-tree-id50570 . -3) (undo-tree-id50571 . -3) (undo-tree-id50572 . -3) (undo-tree-id50573 . -3) (undo-tree-id50574 . -3) (undo-tree-id50575 . -3) (undo-tree-id50576 . -3) (undo-tree-id50577 . -3) (undo-tree-id50578 . -3) (undo-tree-id50579 . -3) (undo-tree-id50580 . -3) (undo-tree-id50581 . -3) (undo-tree-id50582 . -3) (undo-tree-id50583 . -3) (undo-tree-id50584 . -3) (undo-tree-id50585 . -3) (undo-tree-id50586 . -3) (undo-tree-id50587 . -3) (undo-tree-id50588 . -3) (undo-tree-id50589 . -3) (undo-tree-id50590 . -3) (undo-tree-id50591 . -3) (undo-tree-id50592 . -3) (undo-tree-id50593 . -3) (undo-tree-id50594 . -3) (undo-tree-id50595 . -3) (undo-tree-id50596 . -3) (undo-tree-id50597 . -3) (undo-tree-id50598 . -3) (undo-tree-id50599 . -3) (undo-tree-id50600 . -3) (undo-tree-id50601 . -3) (undo-tree-id50602 . -3) (undo-tree-id50603 . -3) (undo-tree-id50604 . -3) (undo-tree-id50605 . -3) (undo-tree-id50606 . -3) (undo-tree-id50607 . -3) (undo-tree-id50608 . -3) (undo-tree-id50609 . -3) (undo-tree-id50610 . -3) (undo-tree-id50611 . -3) (undo-tree-id50612 . -3) (undo-tree-id50613 . -3) (undo-tree-id50614 . -3) (undo-tree-id50615 . -3) (undo-tree-id50616 . -3) (undo-tree-id50617 . -3) (undo-tree-id50618 . -3) (undo-tree-id50619 . -3) (undo-tree-id50620 . -3) (undo-tree-id50621 . -3) (undo-tree-id50622 . -3) (undo-tree-id50623 . -3) (undo-tree-id50624 . -3) (undo-tree-id50625 . -3) (undo-tree-id50626 . -3) (undo-tree-id50627 . -3) (undo-tree-id50628 . -3) (undo-tree-id50629 . -3) (undo-tree-id50630 . -3) (undo-tree-id50631 . -3) (undo-tree-id50632 . -3) (undo-tree-id50633 . -3) (undo-tree-id50634 . -3) (undo-tree-id50635 . -3) (undo-tree-id50636 . -3) (undo-tree-id50637 . -3) (undo-tree-id50638 . -3) (undo-tree-id50639 . -3) (undo-tree-id50640 . -3) (undo-tree-id50641 . -3) (undo-tree-id50642 . -3) (undo-tree-id50643 . -3) (undo-tree-id50644 . -3) (undo-tree-id50645 . -3) (undo-tree-id50646 . -3) (undo-tree-id50647 . -3) (undo-tree-id50648 . -3) (undo-tree-id50649 . -3) (undo-tree-id50650 . -3) (undo-tree-id50651 . -3) (undo-tree-id50652 . -3) (undo-tree-id50653 . -3) (undo-tree-id50654 . -3) (undo-tree-id50655 . -3) (undo-tree-id50656 . -3) (undo-tree-id50657 . -3) (undo-tree-id50658 . -3) (undo-tree-id50659 . -3) (undo-tree-id50660 . -3) (undo-tree-id50661 . -3) (undo-tree-id50662 . -3) (undo-tree-id50663 . -3) (undo-tree-id50664 . -3) (undo-tree-id50665 . -3) (undo-tree-id50666 . -3) (undo-tree-id50667 . -3) (undo-tree-id50668 . -3) (undo-tree-id50669 . -3) (undo-tree-id50670 . -3) (undo-tree-id50671 . -3) (undo-tree-id50672 . -3) (undo-tree-id50673 . -3) (undo-tree-id50674 . -3) (undo-tree-id50675 . -3) (undo-tree-id50676 . -3) (undo-tree-id50677 . -3) (undo-tree-id50678 . -3) (undo-tree-id50679 . -3) (undo-tree-id50680 . -3) (undo-tree-id50681 . -3) (undo-tree-id50682 . -3) (undo-tree-id50683 . -3) (undo-tree-id50684 . -3) (undo-tree-id50685 . -3) (undo-tree-id50686 . -3) (undo-tree-id50687 . -3) (undo-tree-id50688 . -3) (undo-tree-id50689 . -3) (undo-tree-id50690 . -3) (undo-tree-id50691 . -3) (undo-tree-id50692 . -3) (undo-tree-id50693 . -3) (undo-tree-id50694 . -3) (undo-tree-id50695 . -3) (undo-tree-id50696 . -3) (undo-tree-id50697 . -3) (undo-tree-id50698 . -3) (undo-tree-id50699 . -3) (undo-tree-id50700 . -3) (undo-tree-id50701 . -3) (undo-tree-id50702 . -3) (undo-tree-id50703 . -3) (undo-tree-id50704 . -3) (undo-tree-id50705 . -3) (undo-tree-id50706 . -3) (undo-tree-id50707 . -3) (undo-tree-id50708 . -3) (undo-tree-id50709 . -3) (undo-tree-id50710 . -3) (undo-tree-id50711 . -3) (undo-tree-id50712 . -3) (undo-tree-id50713 . -1) (undo-tree-id50714 . -1) (undo-tree-id50715 . -1) (undo-tree-id50716 . -1) (undo-tree-id50717 . -1) (undo-tree-id50718 . -1) (undo-tree-id50719 . -3) (undo-tree-id50720 . -3) (undo-tree-id50721 . -3) (undo-tree-id50722 . -3) (undo-tree-id50723 . -3) (undo-tree-id50724 . -3) (undo-tree-id50725 . -3) (undo-tree-id50726 . -3) (undo-tree-id50727 . -3) (undo-tree-id50728 . -3) (undo-tree-id50729 . -3) (undo-tree-id50730 . -3) (undo-tree-id50731 . -3) (undo-tree-id50732 . -3) (undo-tree-id50733 . -3) (undo-tree-id50734 . -3) (undo-tree-id50735 . -3) (undo-tree-id50736 . -3) (undo-tree-id50737 . -3) (undo-tree-id50738 . -3) (undo-tree-id50739 . -3) (undo-tree-id50740 . -3) (undo-tree-id50741 . -3) (undo-tree-id50742 . -3) (undo-tree-id50743 . -3) (undo-tree-id50744 . -3) (undo-tree-id50745 . -3) (undo-tree-id50746 . -3) (undo-tree-id50747 . -3) (undo-tree-id50748 . -3) (undo-tree-id50749 . -5)) nil (25767 12515 719401 396000) 0 nil])
([nil nil ((5882 . 6032) (#("- while a very high temperature will give all characters an equal probability.

- A temperature close to 0 will favor the high-probability characters," 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 78 79 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 79 80 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 80 81 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 81 82 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 82 150 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 5882) (undo-tree-id50998 . -82) (undo-tree-id50999 . -82) (undo-tree-id51000 . -82) (undo-tree-id51001 . -82) (undo-tree-id51002 . -82) (undo-tree-id51003 . -82) (undo-tree-id51004 . -82) (undo-tree-id51005 . -82) (undo-tree-id51006 . -82) (undo-tree-id51007 . -82) (undo-tree-id51008 . -82) (undo-tree-id51009 . -82) (undo-tree-id51010 . -82) (undo-tree-id51011 . -82) (undo-tree-id51012 . -82) (undo-tree-id51013 . -82) (undo-tree-id51014 . -82) (undo-tree-id51015 . -82) (undo-tree-id51016 . -82) (undo-tree-id51017 . -82) (undo-tree-id51018 . -82) (undo-tree-id51019 . -82) (undo-tree-id51020 . -82) (undo-tree-id51021 . -82) (undo-tree-id51022 . -82) (undo-tree-id51023 . -82) (undo-tree-id51024 . -82) (undo-tree-id51025 . -150) (undo-tree-id51026 . -82) (undo-tree-id51027 . -82) (undo-tree-id51028 . -82) (undo-tree-id51029 . -82) (undo-tree-id51030 . -82) (undo-tree-id51031 . -82) (undo-tree-id51032 . -82) (undo-tree-id51033 . -82) (undo-tree-id51034 . -82) (undo-tree-id51035 . -82) (undo-tree-id51036 . -82) (undo-tree-id51037 . -82) (undo-tree-id51038 . -82) (undo-tree-id51039 . -82) (undo-tree-id51040 . -82) (undo-tree-id51041 . -82) (undo-tree-id51042 . -82) (undo-tree-id51043 . -82) (undo-tree-id51044 . -82) (undo-tree-id51045 . -82) (undo-tree-id51046 . -82) (undo-tree-id51047 . -82) (undo-tree-id51048 . -82) (undo-tree-id51049 . -82) (undo-tree-id51050 . -82) (undo-tree-id51051 . -82) (undo-tree-id51052 . -82) (undo-tree-id51053 . -82) (undo-tree-id51054 . -82) (undo-tree-id51055 . -139) (undo-tree-id51056 . -139) (undo-tree-id51057 . -139) (undo-tree-id51058 . -139) (undo-tree-id51059 . -139) (undo-tree-id51060 . -139) (undo-tree-id51061 . -139) (undo-tree-id51062 . -139) (undo-tree-id51063 . -139) (undo-tree-id51064 . -139) (undo-tree-id51065 . -139) (undo-tree-id51066 . -149) (undo-tree-id51067 . -149) (undo-tree-id51068 . -149) (undo-tree-id51069 . -149) (undo-tree-id51070 . -149) (undo-tree-id51071 . -149) (undo-tree-id51072 . -149) (undo-tree-id51073 . -149) (undo-tree-id51074 . -149) (undo-tree-id51075 . -149) (undo-tree-id51076 . -149) (undo-tree-id51077 . -150) (undo-tree-id51078 . -150) (undo-tree-id51079 . -150) (undo-tree-id51080 . -150) (undo-tree-id51081 . -150) (undo-tree-id51082 . -150) (undo-tree-id51083 . -150) (undo-tree-id51084 . -150) (undo-tree-id51085 . -150) (undo-tree-id51086 . -150) (undo-tree-id51087 . -150) (undo-tree-id51088 . -150) (undo-tree-id51089 . -150) (undo-tree-id51090 . -150) (undo-tree-id51091 . -150) (undo-tree-id51092 . -150) (undo-tree-id51093 . -150) (undo-tree-id51094 . -150) (undo-tree-id51095 . -150) (undo-tree-id51096 . -150) (undo-tree-id51097 . -150) (undo-tree-id51098 . -150) (undo-tree-id51099 . -150) (undo-tree-id51100 . -150) (undo-tree-id51101 . -150) (undo-tree-id51102 . -150) (undo-tree-id51103 . -150) (undo-tree-id51104 . -150) (undo-tree-id51105 . -150) (undo-tree-id51106 . -150) (undo-tree-id51107 . -150) (undo-tree-id51108 . -150) (undo-tree-id51109 . -150) (undo-tree-id51110 . -150) (undo-tree-id51111 . -150) (undo-tree-id51112 . -150) (undo-tree-id51113 . -150) (undo-tree-id51114 . -150) (undo-tree-id51115 . -150) (undo-tree-id51116 . -150) (undo-tree-id51117 . -80) (5882 . 5962) (#(" while a very high temperature will give all characters an equal probability." 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 5952) (undo-tree-id51118 . -1) (undo-tree-id51119 . -1) (undo-tree-id51120 . -1) (undo-tree-id51121 . -1) (undo-tree-id51122 . -1) (undo-tree-id51123 . -1) (undo-tree-id51124 . -1) (undo-tree-id51125 . -1) (undo-tree-id51126 . -1) (undo-tree-id51127 . -1) (undo-tree-id51128 . -1) (undo-tree-id51129 . -1) (undo-tree-id51130 . -1) (undo-tree-id51131 . -1) (undo-tree-id51132 . -1) (undo-tree-id51133 . -1) (undo-tree-id51134 . -1) (undo-tree-id51135 . -1) (undo-tree-id51136 . -1) (undo-tree-id51137 . -1) (undo-tree-id51138 . -1) (undo-tree-id51139 . -1) (undo-tree-id51140 . -1) (undo-tree-id51141 . -1) (undo-tree-id51142 . -1) (undo-tree-id51143 . -1) (undo-tree-id51144 . -1) (undo-tree-id51145 . -1) (undo-tree-id51146 . -1) (undo-tree-id51147 . -1) (undo-tree-id51148 . -1) (undo-tree-id51149 . -1) (undo-tree-id51150 . -1) (undo-tree-id51151 . -1) (undo-tree-id51152 . -1) (undo-tree-id51153 . -1) (undo-tree-id51154 . -1) (undo-tree-id51155 . -1) (undo-tree-id51156 . -1) (undo-tree-id51157 . -1) (undo-tree-id51158 . -1) 5953 (t 25767 12515 769374 943000)) nil (25767 12542 559137 709000) 0 nil])
([nil nil ((5951 . 5952) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5951) (undo-tree-id50997 . -1)) nil (25767 12542 557923 491000) 0 nil])
([nil nil ((5956 . 5957) (#("while a" 0 7 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 5956) (undo-tree-id50940 . -6) (undo-tree-id50941 . -6) (undo-tree-id50942 . 7) (undo-tree-id50943 . -6) (undo-tree-id50944 . -7) (undo-tree-id50945 . -6) (undo-tree-id50946 . -4) (undo-tree-id50947 . -4) (undo-tree-id50948 . -4) (undo-tree-id50949 . -4) (undo-tree-id50950 . -4) (undo-tree-id50951 . -4) (undo-tree-id50952 . -4) (undo-tree-id50953 . -4) (undo-tree-id50954 . -4) (undo-tree-id50955 . -4) (undo-tree-id50956 . -4) (undo-tree-id50957 . -4) (undo-tree-id50958 . -4) (undo-tree-id50959 . -4) (undo-tree-id50960 . -4) (undo-tree-id50961 . -4) (undo-tree-id50962 . -6) (undo-tree-id50963 . -6) (undo-tree-id50964 . -6) (undo-tree-id50965 . -6) (undo-tree-id50966 . -6) (undo-tree-id50967 . -6) (undo-tree-id50968 . -6) (undo-tree-id50969 . -6) (undo-tree-id50970 . -6) (undo-tree-id50971 . -6) (undo-tree-id50972 . -6) (undo-tree-id50973 . -6) (undo-tree-id50974 . -6) (undo-tree-id50975 . -6) (undo-tree-id50976 . -6) (undo-tree-id50977 . -6) (undo-tree-id50978 . -6) (undo-tree-id50979 . -6) (undo-tree-id50980 . -6) (undo-tree-id50981 . -6) (undo-tree-id50982 . -6) (undo-tree-id50983 . -6) (undo-tree-id50984 . -6) (undo-tree-id50985 . -6) (undo-tree-id50986 . -6) (undo-tree-id50987 . -6) (undo-tree-id50988 . -6) (undo-tree-id50989 . -6) (undo-tree-id50990 . -6) (undo-tree-id50991 . -6) (undo-tree-id50992 . -6) (undo-tree-id50993 . -6) (undo-tree-id50994 . -7) (undo-tree-id50995 . -7) (undo-tree-id50996 . -7) 5962) nil (25767 12542 557917 179000) 0 nil])
([nil nil ((#("Next, we can write a small function that will repeatedly call next_char()
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 66 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 67 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 71 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6028) (undo-tree-id51187 . -73) (undo-tree-id51188 . -74) (t 25767 12542 661727 233000)) nil (25767 12574 22986 371000) 0 nil])
([nil nil ((#("to get the next character and append it to the given text:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6028) (undo-tree-id51185 . -58) (undo-tree-id51186 . -59)) nil (25767 12574 22983 718000) 0 nil])
([nil nil ((#("def complete_text(text, n_chars=50, temperature=1):
for _ in range(n_chars):
text += next_char(text, temperature)
return text
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 13 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 17 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 26 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 31 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 49 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 68 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 69 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 74 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 77 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 89 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 90 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 94 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 114 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 124 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 125 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6028) (undo-tree-id51159 . -125) (undo-tree-id51160 . -114) (undo-tree-id51161 . -125) (undo-tree-id51162 . -114) (undo-tree-id51163 . -126) (undo-tree-id51164 . -114) (undo-tree-id51165 . -52) (undo-tree-id51166 . -52) (undo-tree-id51167 . -52) (undo-tree-id51168 . -52) (undo-tree-id51169 . -52) (undo-tree-id51170 . -52) (undo-tree-id51171 . -77) (undo-tree-id51172 . -77) (undo-tree-id51173 . -77) (undo-tree-id51174 . -77) (undo-tree-id51175 . -77) (undo-tree-id51176 . -77) (undo-tree-id51177 . -114) (undo-tree-id51178 . -114) (undo-tree-id51179 . -114) (undo-tree-id51180 . -114) (undo-tree-id51181 . -114) (undo-tree-id51182 . -114) (undo-tree-id51183 . -114) (undo-tree-id51184 . -126) 6142) nil (25767 12574 22979 760000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7328 . 7329) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7454) (7328 . 7455)) nil (25767 12574 22949 971000) 0 nil])
([nil nil ((7454 . 7455) (7453 . 7454) (7452 . 7453) (7451 . 7452) (7413 . 7414) (7412 . 7413) (7411 . 7412) (7410 . 7411) (7381 . 7385)) nil (25767 12580 450983 974000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 6028) (undo-tree-id51864 . 1) (undo-tree-id51865 . -1) (undo-tree-id51866 . -1) (undo-tree-id51867 . -1) (undo-tree-id51868 . -1) (undo-tree-id51869 . -1) (undo-tree-id51870 . -1) (undo-tree-id51871 . -1) (undo-tree-id51872 . -1) (undo-tree-id51873 . -1) (undo-tree-id51874 . -1) (undo-tree-id51875 . -1) (undo-tree-id51876 . -1) (undo-tree-id51877 . -1) (undo-tree-id51878 . -1) (undo-tree-id51879 . -1) (undo-tree-id51880 . -1) (undo-tree-id51881 . -1) (t 25767 12574 126147 492000)) nil (25767 12645 887488 304000) 0 nil] [nil nil ((#("We are now ready to generate some text! Let’s try with different
" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6029) (undo-tree-id51189 . -64) (undo-tree-id51190 . -3) (undo-tree-id51191 . -3) (undo-tree-id51192 . -3) (undo-tree-id51193 . -3) (undo-tree-id51194 . -3) (undo-tree-id51195 . -3) (undo-tree-id51196 . -65) (t 25767 12574 126147 492000)) ((6029 . 6094)) (25767 12580 450483 191000) 0 nil])
([nil nil ((6028 . 6030)) nil (25767 12645 887476 275000) 0 nil])
nil
([nil nil ((#("We are now ready to " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6030) (undo-tree-id51844 . -19) (undo-tree-id51845 . -19) (undo-tree-id51846 . 20) (undo-tree-id51847 . -19) (undo-tree-id51848 . -3) (undo-tree-id51849 . -3) (undo-tree-id51850 . -3) (undo-tree-id51851 . -3) (undo-tree-id51852 . -3) (undo-tree-id51853 . -3) (undo-tree-id51854 . -20) (undo-tree-id51855 . -19) (undo-tree-id51856 . -1) (undo-tree-id51857 . -5) (undo-tree-id51858 . -9) (undo-tree-id51859 . -15) (undo-tree-id51860 . -18) (undo-tree-id51861 . -19) (undo-tree-id51862 . -19) (undo-tree-id51863 . -20) 6049) nil (25767 12645 887474 603000) 0 nil])
([nil nil ((6030 . 6031) (#("g" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6030)) nil (25767 12645 887461 624000) 0 nil])
([nil nil ((6048 . 6049) (#("!" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6048) (undo-tree-id51841 . -1) (undo-tree-id51842 . -1) (undo-tree-id51843 . -1)) nil (25767 12645 887460 504000) 0 nil])
([nil nil ((#("Let’s try" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6050) (undo-tree-id51830 . -8) (undo-tree-id51831 . -8) (undo-tree-id51832 . -8) (undo-tree-id51833 . -9) (undo-tree-id51834 . -8) (undo-tree-id51835 . -2) (undo-tree-id51836 . -3) (undo-tree-id51837 . -4) (undo-tree-id51838 . -8) (undo-tree-id51839 . -8) (undo-tree-id51840 . -9) 6058) nil (25767 12645 887457 75000) 0 nil])
([nil nil ((6065 . 6066) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6065) (undo-tree-id51829 . -1) 6050) nil (25767 12645 887448 807000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6078) (undo-tree-id51815 . -1) (undo-tree-id51816 . -1) (undo-tree-id51817 . -1) (undo-tree-id51818 . -1) (undo-tree-id51819 . -1) (undo-tree-id51820 . -1) (undo-tree-id51821 . -1) (undo-tree-id51822 . -1) (undo-tree-id51823 . -1) (undo-tree-id51824 . -1) (undo-tree-id51825 . -1) 6079 (6078 . 6079) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6078) (undo-tree-id51826 . -1) (undo-tree-id51827 . -1) (undo-tree-id51828 . -1)) nil (25767 12645 887446 512000) 0 nil])
([nil nil ((#(">>> print(complete_text(\"t\", temperature=0.2))
the belly the great and who shall be the belly the
>>> print(complete_text(\"w\", temperature=1))
thing? or why you gremio.
who make which the first
>>> print(complete_text(\"w\", temperature=2))
th no cce:
yeolg-hormer firi. a play asks.
fol rusb
" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 19 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 23 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 98 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 116 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 117 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 121 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 143 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 169 194 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 194 212 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 212 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 213 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 217 239 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 239 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 250 282 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 282 291 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6079) (undo-tree-id51707 . -290) (undo-tree-id51708 . -282) (undo-tree-id51709 . 46) (undo-tree-id51710 . -248) (undo-tree-id51711 . -282) (undo-tree-id51712 . -291) (undo-tree-id51713 . -282) (undo-tree-id51714 . -47) (undo-tree-id51715 . -47) (undo-tree-id51716 . -47) (undo-tree-id51717 . -47) (undo-tree-id51718 . -47) (undo-tree-id51719 . -47) (undo-tree-id51720 . -47) (undo-tree-id51721 . -47) (undo-tree-id51722 . -47) (undo-tree-id51723 . -47) (undo-tree-id51724 . -47) (undo-tree-id51725 . -47) (undo-tree-id51726 . -47) (undo-tree-id51727 . -47) (undo-tree-id51728 . -47) (undo-tree-id51729 . -98) (undo-tree-id51730 . -98) (undo-tree-id51731 . -98) (undo-tree-id51732 . -98) (undo-tree-id51733 . -98) (undo-tree-id51734 . -98) (undo-tree-id51735 . -98) (undo-tree-id51736 . -98) (undo-tree-id51737 . -98) (undo-tree-id51738 . -98) (undo-tree-id51739 . -98) (undo-tree-id51740 . -98) (undo-tree-id51741 . -98) (undo-tree-id51742 . -98) (undo-tree-id51743 . -98) (undo-tree-id51744 . -143) (undo-tree-id51745 . -143) (undo-tree-id51746 . -143) (undo-tree-id51747 . -143) (undo-tree-id51748 . -143) (undo-tree-id51749 . -143) (undo-tree-id51750 . -143) (undo-tree-id51751 . -143) (undo-tree-id51752 . -143) (undo-tree-id51753 . -143) (undo-tree-id51754 . -143) (undo-tree-id51755 . -143) (undo-tree-id51756 . -143) (undo-tree-id51757 . -143) (undo-tree-id51758 . -143) (undo-tree-id51759 . -169) (undo-tree-id51760 . -169) (undo-tree-id51761 . -169) (undo-tree-id51762 . -169) (undo-tree-id51763 . -169) (undo-tree-id51764 . -169) (undo-tree-id51765 . -169) (undo-tree-id51766 . -169) (undo-tree-id51767 . -194) (undo-tree-id51768 . -194) (undo-tree-id51769 . -194) (undo-tree-id51770 . -194) (undo-tree-id51771 . -194) (undo-tree-id51772 . -194) (undo-tree-id51773 . -194) (undo-tree-id51774 . -194) (undo-tree-id51775 . -194) (undo-tree-id51776 . -194) (undo-tree-id51777 . -194) (undo-tree-id51778 . -194) (undo-tree-id51779 . -194) (undo-tree-id51780 . -194) (undo-tree-id51781 . -194) (undo-tree-id51782 . -239) (undo-tree-id51783 . -239) (undo-tree-id51784 . -239) (undo-tree-id51785 . -239) (undo-tree-id51786 . -239) (undo-tree-id51787 . -239) (undo-tree-id51788 . -239) (undo-tree-id51789 . -239) (undo-tree-id51790 . -239) (undo-tree-id51791 . -239) (undo-tree-id51792 . -239) (undo-tree-id51793 . -239) (undo-tree-id51794 . -239) (undo-tree-id51795 . -239) (undo-tree-id51796 . -239) (undo-tree-id51797 . -250) (undo-tree-id51798 . -250) (undo-tree-id51799 . -250) (undo-tree-id51800 . -250) (undo-tree-id51801 . -250) (undo-tree-id51802 . -250) (undo-tree-id51803 . -250) (undo-tree-id51804 . -250) (undo-tree-id51805 . -282) (undo-tree-id51806 . -282) (undo-tree-id51807 . -282) (undo-tree-id51808 . -282) (undo-tree-id51809 . -282) (undo-tree-id51810 . -282) (undo-tree-id51811 . -282) (undo-tree-id51812 . -282) (undo-tree-id51813 . -282) (undo-tree-id51814 . -291) 6361) nil (25767 12645 887433 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7147 . 7148) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -7438) (7147 . 7439)) nil (25767 12645 887367 678000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 7148) (undo-tree-id51703 . -3) (undo-tree-id51704 . 4) (undo-tree-id51705 . -1) (undo-tree-id51706 . -4)) nil (25767 12645 887366 511000) 0 nil])
([nil nil ((7191 . 7192)) nil (25767 12645 887363 667000) 0 nil])
([nil nil ((7192 . 7193)) nil (25767 12645 887362 818000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 7244) (undo-tree-id51682 . -3) (undo-tree-id51683 . -1) (undo-tree-id51684 . -1) (undo-tree-id51685 . -1) (undo-tree-id51686 . -1) (undo-tree-id51687 . -1) (undo-tree-id51688 . -1) (undo-tree-id51689 . -1) (undo-tree-id51690 . -1) (undo-tree-id51691 . -1) (undo-tree-id51692 . 4) (undo-tree-id51693 . -1) (undo-tree-id51694 . -1) (undo-tree-id51695 . -1) (undo-tree-id51696 . -1) (undo-tree-id51697 . -1) (undo-tree-id51698 . -1) (undo-tree-id51699 . -1) (undo-tree-id51700 . -1) (undo-tree-id51701 . -1) (undo-tree-id51702 . -4)) nil (25767 12645 887361 334000) 0 nil])
([nil nil ((6705 . 7435) (#("
def next_char(text, temperature=1):
    X_new = preprocess([text])
    y_proba = model.predict(X_new)[0, -1:, :]
    rescaled_logits = tf.math.log(y_proba) / temperature
    char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
    return tokenizer.sequences_to_texts(char_id.numpy())[0]

def complete_text(text, n_chars=50, temperature=1):
    for _ in range(n_chars):
    text += next_char(text, temperature)
    return text

print(complete_text(\"t\", temperature=0.2))
# the belly the great and who shall be the belly the
print(complete_text(\"w\", temperature=1))
thing? or why you gremio.
who make which the first
>>> print(complete_text(\"w\", temperature=2))
th no cce:
yeolg-hormer firi. a play asks.
fol rusb
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 2 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 10 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 15 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 35 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 43 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 46 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 61 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 74 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 79 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 98 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 103 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 114 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 118 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 126 127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 127 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 133 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 148 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 150 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 156 170 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 170 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 171 175 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 175 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 180 182 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 182 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 206 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 207 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 216 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 222 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 228 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 235 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 238 242 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 242 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 243 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 247 253 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 253 273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 273 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 274 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 276 277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 277 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 282 283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 283 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 287 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 288 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 297 298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 298 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 299 300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 302 303 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 303 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 304 305 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 305 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 308 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 317 321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 321 322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 322 329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 329 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 330 335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 335 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 354 356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 356 360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 360 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 363 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 366 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 369 374 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 374 375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 375 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 376 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 382 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 382 383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 383 385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 385 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 389 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 393 401 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 402 406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 406 407 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 407 424 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 424 425 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 425 426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 426 430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 430 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 436 440 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 440 441 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 441 442 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 442 443 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 443 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 449 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 458 461 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 461 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 462 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 463 465 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 465 466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 466 483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 483 484 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 484 485 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 485 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 486 488 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 488 508 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 508 511 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 511 539 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 539 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 544 545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 545 553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 554 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 558 559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 559 562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 562 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 578 579 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 579 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 580 587 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 587 589 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 589 606 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 606 631 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 631 635 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 635 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 640 641 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 641 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 649 650 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 650 654 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 654 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 655 658 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 658 673 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 673 674 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 674 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 675 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 676 687 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 687 719 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 719 727 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 727 728 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6705) (undo-tree-id51371 . -539) (undo-tree-id51372 . -539) (undo-tree-id51373 . -727) (undo-tree-id51374 . 240) (undo-tree-id51375 . -359) (undo-tree-id51376 . -580) (undo-tree-id51377 . -1) (undo-tree-id51378 . -1) (undo-tree-id51379 . -1) (undo-tree-id51380 . -1) (undo-tree-id51381 . -1) (undo-tree-id51382 . -1) (undo-tree-id51383 . -1) (undo-tree-id51384 . -1) (undo-tree-id51385 . -37) (undo-tree-id51386 . -37) (undo-tree-id51387 . -37) (undo-tree-id51388 . -37) (undo-tree-id51389 . -37) (undo-tree-id51390 . -37) (undo-tree-id51391 . -37) (undo-tree-id51392 . -37) (undo-tree-id51393 . -68) (undo-tree-id51394 . -68) (undo-tree-id51395 . -68) (undo-tree-id51396 . -68) (undo-tree-id51397 . -68) (undo-tree-id51398 . -68) (undo-tree-id51399 . -68) (undo-tree-id51400 . -68) (undo-tree-id51401 . -114) (undo-tree-id51402 . -114) (undo-tree-id51403 . -114) (undo-tree-id51404 . -114) (undo-tree-id51405 . -114) (undo-tree-id51406 . -114) (undo-tree-id51407 . -114) (undo-tree-id51408 . -114) (undo-tree-id51409 . -171) (undo-tree-id51410 . -171) (undo-tree-id51411 . -171) (undo-tree-id51412 . -171) (undo-tree-id51413 . -171) (undo-tree-id51414 . -171) (undo-tree-id51415 . -171) (undo-tree-id51416 . -171) (undo-tree-id51417 . -243) (undo-tree-id51418 . -243) (undo-tree-id51419 . -243) (undo-tree-id51420 . -243) (undo-tree-id51421 . -243) (undo-tree-id51422 . -243) (undo-tree-id51423 . -243) (undo-tree-id51424 . -243) (undo-tree-id51425 . -303) (undo-tree-id51426 . -303) (undo-tree-id51427 . -303) (undo-tree-id51428 . -303) (undo-tree-id51429 . -303) (undo-tree-id51430 . -303) (undo-tree-id51431 . -303) (undo-tree-id51432 . -303) (undo-tree-id51433 . -304) (undo-tree-id51434 . -304) (undo-tree-id51435 . -304) (undo-tree-id51436 . -304) (undo-tree-id51437 . -304) (undo-tree-id51438 . -304) (undo-tree-id51439 . -304) (undo-tree-id51440 . -304) (undo-tree-id51441 . -356) (undo-tree-id51442 . -356) (undo-tree-id51443 . -356) (undo-tree-id51444 . -356) (undo-tree-id51445 . -356) (undo-tree-id51446 . -356) (undo-tree-id51447 . -356) (undo-tree-id51448 . -356) (undo-tree-id51449 . -385) (undo-tree-id51450 . -385) (undo-tree-id51451 . -385) (undo-tree-id51452 . -385) (undo-tree-id51453 . -385) (undo-tree-id51454 . -385) (undo-tree-id51455 . -385) (undo-tree-id51456 . -385) (undo-tree-id51457 . -426) (undo-tree-id51458 . -426) (undo-tree-id51459 . -426) (undo-tree-id51460 . -426) (undo-tree-id51461 . -426) (undo-tree-id51462 . -426) (undo-tree-id51463 . -426) (undo-tree-id51464 . -426) (undo-tree-id51465 . -442) (undo-tree-id51466 . -442) (undo-tree-id51467 . -442) (undo-tree-id51468 . -442) (undo-tree-id51469 . -442) (undo-tree-id51470 . -442) (undo-tree-id51471 . -442) (undo-tree-id51472 . -442) (undo-tree-id51473 . -443) (undo-tree-id51474 . -443) (undo-tree-id51475 . -443) (undo-tree-id51476 . -443) (undo-tree-id51477 . -443) (undo-tree-id51478 . -443) (undo-tree-id51479 . -443) (undo-tree-id51480 . -443) (undo-tree-id51481 . -443) (undo-tree-id51482 . -443) (undo-tree-id51483 . -443) (undo-tree-id51484 . -443) (undo-tree-id51485 . -443) (undo-tree-id51486 . -443) (undo-tree-id51487 . -443) (undo-tree-id51488 . -443) (undo-tree-id51489 . -443) (undo-tree-id51490 . -443) (undo-tree-id51491 . -443) (undo-tree-id51492 . -443) (undo-tree-id51493 . -443) (undo-tree-id51494 . -443) (undo-tree-id51495 . -443) (undo-tree-id51496 . -443) (undo-tree-id51497 . -443) (undo-tree-id51498 . -443) (undo-tree-id51499 . -443) (undo-tree-id51500 . -443) (undo-tree-id51501 . -443) (undo-tree-id51502 . -443) (undo-tree-id51503 . -443) (undo-tree-id51504 . -443) (undo-tree-id51505 . -443) (undo-tree-id51506 . -443) (undo-tree-id51507 . -443) (undo-tree-id51508 . -443) (undo-tree-id51509 . -443) (undo-tree-id51510 . -443) (undo-tree-id51511 . -443) (undo-tree-id51512 . -443) (undo-tree-id51513 . -443) (undo-tree-id51514 . -443) (undo-tree-id51515 . -443) (undo-tree-id51516 . -443) (undo-tree-id51517 . -443) (undo-tree-id51518 . -443) (undo-tree-id51519 . -443) (undo-tree-id51520 . -443) (undo-tree-id51521 . -443) (undo-tree-id51522 . -486) (undo-tree-id51523 . -486) (undo-tree-id51524 . -486) (undo-tree-id51525 . -486) (undo-tree-id51526 . -486) (undo-tree-id51527 . -486) (undo-tree-id51528 . -486) (undo-tree-id51529 . -486) (undo-tree-id51530 . -486) (undo-tree-id51531 . -486) (undo-tree-id51532 . -486) (undo-tree-id51533 . -486) (undo-tree-id51534 . -486) (undo-tree-id51535 . -486) (undo-tree-id51536 . -486) (undo-tree-id51537 . -486) (undo-tree-id51538 . -486) (undo-tree-id51539 . -486) (undo-tree-id51540 . -487) (undo-tree-id51541 . -487) (undo-tree-id51542 . -487) (undo-tree-id51543 . -487) (undo-tree-id51544 . -487) (undo-tree-id51545 . -487) (undo-tree-id51546 . -487) (undo-tree-id51547 . -487) (undo-tree-id51548 . -487) (undo-tree-id51549 . -486) (undo-tree-id51550 . -486) (undo-tree-id51551 . -486) (undo-tree-id51552 . -486) (undo-tree-id51553 . -486) (undo-tree-id51554 . -486) (undo-tree-id51555 . -486) (undo-tree-id51556 . -486) (undo-tree-id51557 . -486) (undo-tree-id51558 . -486) (undo-tree-id51559 . -486) (undo-tree-id51560 . -486) (undo-tree-id51561 . -486) (undo-tree-id51562 . -486) (undo-tree-id51563 . -486) (undo-tree-id51564 . -486) (undo-tree-id51565 . -486) (undo-tree-id51566 . -486) (undo-tree-id51567 . -486) (undo-tree-id51568 . -487) (undo-tree-id51569 . -487) (undo-tree-id51570 . -487) (undo-tree-id51571 . -487) (undo-tree-id51572 . -487) (undo-tree-id51573 . -487) (undo-tree-id51574 . -487) (undo-tree-id51575 . -487) (undo-tree-id51576 . -487) (undo-tree-id51577 . -487) (undo-tree-id51578 . -488) (undo-tree-id51579 . -488) (undo-tree-id51580 . -488) (undo-tree-id51581 . -488) (undo-tree-id51582 . -488) (undo-tree-id51583 . -488) (undo-tree-id51584 . -488) (undo-tree-id51585 . -488) (undo-tree-id51586 . -488) (undo-tree-id51587 . -487) (undo-tree-id51588 . -487) (undo-tree-id51589 . -487) (undo-tree-id51590 . -487) (undo-tree-id51591 . -487) (undo-tree-id51592 . -487) (undo-tree-id51593 . -487) (undo-tree-id51594 . -487) (undo-tree-id51595 . -487) (undo-tree-id51596 . -487) (undo-tree-id51597 . -487) (undo-tree-id51598 . -487) (undo-tree-id51599 . -487) (undo-tree-id51600 . -487) (undo-tree-id51601 . -487) (undo-tree-id51602 . -487) (undo-tree-id51603 . -487) (undo-tree-id51604 . -487) (undo-tree-id51605 . -487) (undo-tree-id51606 . -487) (undo-tree-id51607 . -487) (undo-tree-id51608 . -487) (undo-tree-id51609 . -487) (undo-tree-id51610 . -487) (undo-tree-id51611 . -487) (undo-tree-id51612 . -487) (undo-tree-id51613 . -539) (undo-tree-id51614 . -539) (undo-tree-id51615 . -539) (undo-tree-id51616 . -539) (undo-tree-id51617 . -539) (undo-tree-id51618 . -539) (undo-tree-id51619 . -539) (undo-tree-id51620 . -539) (undo-tree-id51621 . -539) (undo-tree-id51622 . -539) (undo-tree-id51623 . -539) (undo-tree-id51624 . -539) (undo-tree-id51625 . -539) (undo-tree-id51626 . -539) (undo-tree-id51627 . -539) (undo-tree-id51628 . -539) (undo-tree-id51629 . -539) (undo-tree-id51630 . -539) (undo-tree-id51631 . -539) (undo-tree-id51632 . -539) (undo-tree-id51633 . -539) (undo-tree-id51634 . -539) (undo-tree-id51635 . -539) (undo-tree-id51636 . -539) (undo-tree-id51637 . -539) (undo-tree-id51638 . -539) (undo-tree-id51639 . -539) (undo-tree-id51640 . -539) (undo-tree-id51641 . -539) (undo-tree-id51642 . -539) (undo-tree-id51643 . -539) (undo-tree-id51644 . -539) (undo-tree-id51645 . -539) (undo-tree-id51646 . -539) (undo-tree-id51647 . -539) (undo-tree-id51648 . -539) (undo-tree-id51649 . -539) (undo-tree-id51650 . -539) (undo-tree-id51651 . -539) (undo-tree-id51652 . -539) (undo-tree-id51653 . -539) (undo-tree-id51654 . -539) (undo-tree-id51655 . -539) (undo-tree-id51656 . -539) (undo-tree-id51657 . -539) (undo-tree-id51658 . -539) (undo-tree-id51659 . -539) (undo-tree-id51660 . -539) (undo-tree-id51661 . -539) (undo-tree-id51662 . -539) (undo-tree-id51663 . -539) (undo-tree-id51664 . -539) (undo-tree-id51665 . -539) (undo-tree-id51666 . -539) (undo-tree-id51667 . -539) (undo-tree-id51668 . -539) (undo-tree-id51669 . -539) (undo-tree-id51670 . -539) (undo-tree-id51671 . -580) (undo-tree-id51672 . -580) (undo-tree-id51673 . -580) (undo-tree-id51674 . -580) (undo-tree-id51675 . -580) (undo-tree-id51676 . -580) (undo-tree-id51677 . -580) (undo-tree-id51678 . -580) (undo-tree-id51679 . -580) (undo-tree-id51680 . -580) (undo-tree-id51681 . -580) 7285) nil (25767 12645 887340 158000) 0 nil])
([nil nil ((6705 . 7437) (#("
def next_char(text, temperature=1):
    X_new = preprocess([text])
    y_proba = model.predict(X_new)[0, -1:, :]
    rescaled_logits = tf.math.log(y_proba) / temperature
    char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
    return tokenizer.sequences_to_texts(char_id.numpy())[0]

def complete_text(text, n_chars=50, temperature=1):
    for _ in range(n_chars):
    text += next_char(text, temperature)
    return text

print(complete_text(\"t\", temperature=0.2))
# the belly the great and who shall be the belly the
print(complete_text(\"w\", temperature=1))
# thing? or why you gremio.
who make which the first
>>> print(complete_text(\"w\", temperature=2))
th no cce:
yeolg-hormer firi. a play asks.
fol rusb
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 10 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 15 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 35 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 43 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 46 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 61 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 74 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 79 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 98 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 103 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 114 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 118 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 126 127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 127 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 133 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 148 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 150 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 156 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 171 175 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 175 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 180 182 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 182 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 206 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 207 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 216 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 222 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 228 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 235 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 238 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 243 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 247 253 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 253 273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 273 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 274 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 276 277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 277 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 282 283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 283 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 287 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 288 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 297 298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 298 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 299 300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 302 303 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 303 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 304 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 308 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 317 321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 321 322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 322 329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 329 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 330 335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 335 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 354 356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 356 360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 360 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 363 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 366 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 369 374 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 374 375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 375 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 376 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 382 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 382 383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 383 385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 385 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 389 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 393 401 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 402 406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 406 407 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 407 424 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 424 425 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 425 426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 426 430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 430 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 436 442 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 442 443 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 443 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 449 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 458 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 462 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 463 466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 466 483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 483 484 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 484 485 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 485 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 486 488 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 488 500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 500 539 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 539 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 544 545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 545 553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 554 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 558 559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 559 562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 562 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 578 579 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 579 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 580 582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 582 608 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 608 633 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 633 637 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 637 642 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 642 643 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 643 651 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 651 652 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 652 656 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 656 657 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 657 660 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 660 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 675 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 676 677 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 677 678 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 678 689 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 689 721 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 721 730 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6705) (undo-tree-id51341 . -608) (undo-tree-id51342 . -730) (undo-tree-id51343 . -580) (undo-tree-id51344 . -580) (undo-tree-id51345 . -580) (undo-tree-id51346 . -580) (undo-tree-id51347 . -580) (undo-tree-id51348 . -580) (undo-tree-id51349 . -580) (undo-tree-id51350 . -580) (undo-tree-id51351 . -580) (undo-tree-id51352 . -580) (undo-tree-id51353 . -580) (undo-tree-id51354 . -580) (undo-tree-id51355 . -580) (undo-tree-id51356 . -580) (undo-tree-id51357 . -580) (undo-tree-id51358 . -580) (undo-tree-id51359 . -580) (undo-tree-id51360 . -608) (undo-tree-id51361 . -608) (undo-tree-id51362 . -608) (undo-tree-id51363 . -608) (undo-tree-id51364 . -608) (undo-tree-id51365 . -608) (undo-tree-id51366 . -608) (undo-tree-id51367 . -608) (undo-tree-id51368 . -608) (undo-tree-id51369 . -608) (undo-tree-id51370 . -608) 7313) nil (25767 12645 886874 474000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 7340) (undo-tree-id51337 . -3) (undo-tree-id51338 . 4) (undo-tree-id51339 . -1) (undo-tree-id51340 . -4)) nil (25767 12645 886855 928000) 0 nil])
([nil nil ((6705 . 7435) (#("
def next_char(text, temperature=1):
    X_new = preprocess([text])
    y_proba = model.predict(X_new)[0, -1:, :]
    rescaled_logits = tf.math.log(y_proba) / temperature
    char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
    return tokenizer.sequences_to_texts(char_id.numpy())[0]

def complete_text(text, n_chars=50, temperature=1):
    for _ in range(n_chars):
    text += next_char(text, temperature)
    return text

print(complete_text(\"t\", temperature=0.2))
# the belly the great and who shall be the belly the
print(complete_text(\"w\", temperature=1))
# thing? or why you gremio.
# who make which the first
print(complete_text(\"w\", temperature=2))
th no cce:
yeolg-hormer firi. a play asks.
fol rusb
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 10 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 15 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 35 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 43 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 46 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 61 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 74 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 79 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 98 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 103 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 114 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 118 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 126 127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 127 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 133 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 148 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 150 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 156 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 171 175 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 175 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 180 182 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 182 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 206 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 207 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 216 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 222 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 228 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 235 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 238 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 243 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 247 253 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 253 273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 273 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 274 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 276 277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 277 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 282 283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 283 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 287 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 288 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 297 298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 298 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 299 300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 302 303 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 303 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 304 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 308 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 317 321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 321 322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 322 329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 329 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 330 335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 335 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 354 356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 356 360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 360 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 363 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 366 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 369 374 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 374 375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 375 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 376 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 382 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 382 383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 383 385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 385 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 389 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 393 401 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 402 406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 406 407 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 407 424 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 424 425 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 425 426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 426 430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 430 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 436 442 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 442 443 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 443 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 449 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 458 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 462 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 463 465 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 465 466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 466 483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 483 484 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 484 485 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 485 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 486 488 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 488 500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 500 539 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 539 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 544 545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 545 553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 554 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 558 559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 559 562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 562 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 578 579 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 579 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 580 582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 582 608 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 608 610 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 610 635 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 635 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 640 641 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 641 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 649 650 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 650 654 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 654 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 655 658 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 658 673 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 673 674 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 674 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 675 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 676 687 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 687 719 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 719 728 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6705) (undo-tree-id51257 . -635) (undo-tree-id51258 . -635) (undo-tree-id51259 . -676) (undo-tree-id51260 . -728) (undo-tree-id51261 . -608) (undo-tree-id51262 . -608) (undo-tree-id51263 . -608) (undo-tree-id51264 . -608) (undo-tree-id51265 . -608) (undo-tree-id51266 . -608) (undo-tree-id51267 . -608) (undo-tree-id51268 . -608) (undo-tree-id51269 . -608) (undo-tree-id51270 . -608) (undo-tree-id51271 . -608) (undo-tree-id51272 . -608) (undo-tree-id51273 . -608) (undo-tree-id51274 . -608) (undo-tree-id51275 . -608) (undo-tree-id51276 . -608) (undo-tree-id51277 . -608) (undo-tree-id51278 . -635) (undo-tree-id51279 . -635) (undo-tree-id51280 . -635) (undo-tree-id51281 . -635) (undo-tree-id51282 . -635) (undo-tree-id51283 . -635) (undo-tree-id51284 . -635) (undo-tree-id51285 . -635) (undo-tree-id51286 . -635) (undo-tree-id51287 . -635) (undo-tree-id51288 . -635) (undo-tree-id51289 . -635) (undo-tree-id51290 . -635) (undo-tree-id51291 . -635) (undo-tree-id51292 . -635) (undo-tree-id51293 . -635) (undo-tree-id51294 . -635) (undo-tree-id51295 . -635) (undo-tree-id51296 . -635) (undo-tree-id51297 . -635) (undo-tree-id51298 . -635) (undo-tree-id51299 . -635) (undo-tree-id51300 . -635) (undo-tree-id51301 . -635) (undo-tree-id51302 . -635) (undo-tree-id51303 . -635) (undo-tree-id51304 . -635) (undo-tree-id51305 . -635) (undo-tree-id51306 . -635) (undo-tree-id51307 . -635) (undo-tree-id51308 . -635) (undo-tree-id51309 . -635) (undo-tree-id51310 . -635) (undo-tree-id51311 . -635) (undo-tree-id51312 . -635) (undo-tree-id51313 . -635) (undo-tree-id51314 . -635) (undo-tree-id51315 . -635) (undo-tree-id51316 . -635) (undo-tree-id51317 . -635) (undo-tree-id51318 . -635) (undo-tree-id51319 . -635) (undo-tree-id51320 . -635) (undo-tree-id51321 . -635) (undo-tree-id51322 . -635) (undo-tree-id51323 . -635) (undo-tree-id51324 . -635) (undo-tree-id51325 . -635) (undo-tree-id51326 . -676) (undo-tree-id51327 . -676) (undo-tree-id51328 . -676) (undo-tree-id51329 . -676) (undo-tree-id51330 . -676) (undo-tree-id51331 . -676) (undo-tree-id51332 . -676) (undo-tree-id51333 . -676) (undo-tree-id51334 . -676) (undo-tree-id51335 . -676) (undo-tree-id51336 . -676) 7381) nil (25767 12645 886850 502000) 0 nil])
([nil nil ((6705 . 7437) (#("
def next_char(text, temperature=1):
    X_new = preprocess([text])
    y_proba = model.predict(X_new)[0, -1:, :]
    rescaled_logits = tf.math.log(y_proba) / temperature
    char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
    return tokenizer.sequences_to_texts(char_id.numpy())[0]

def complete_text(text, n_chars=50, temperature=1):
    for _ in range(n_chars):
    text += next_char(text, temperature)
    return text

print(complete_text(\"t\", temperature=0.2))
# the belly the great and who shall be the belly the
print(complete_text(\"w\", temperature=1))
# thing? or why you gremio.
# who make which the first
print(complete_text(\"w\", temperature=2))
# th no cce:
yeolg-hormer firi. a play asks.
fol rusb
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 10 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 15 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 35 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 43 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 46 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 61 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 74 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 79 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 98 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 103 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 114 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 118 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 126 127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 127 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 133 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 148 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 150 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 156 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 171 175 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 175 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 180 182 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 182 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 206 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 207 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 216 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 222 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 228 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 235 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 238 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 243 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 247 253 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 253 273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 273 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 274 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 276 277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 277 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 282 283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 283 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 287 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 288 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 297 298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 298 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 299 300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 302 303 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 303 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 304 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 308 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 317 321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 321 322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 322 329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 329 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 330 335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 335 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 354 356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 356 360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 360 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 363 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 366 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 369 374 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 374 375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 375 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 376 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 382 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 382 383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 383 385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 385 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 389 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 393 401 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 402 406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 406 407 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 407 424 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 424 425 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 425 426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 426 430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 430 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 436 442 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 442 443 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 443 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 449 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 458 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 462 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 463 466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 466 483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 483 484 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 484 485 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 485 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 486 488 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 488 500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 500 539 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 539 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 544 545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 545 553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 554 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 558 559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 559 562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 562 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 578 579 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 579 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 580 582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 582 608 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 608 610 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 610 635 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 635 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 640 641 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 641 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 649 650 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 650 654 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 654 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 655 658 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 658 673 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 673 674 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 674 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 675 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 676 678 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 678 689 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 689 721 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 721 730 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6705) (undo-tree-id51227 . -689) (undo-tree-id51228 . -730) (undo-tree-id51229 . -676) (undo-tree-id51230 . -676) (undo-tree-id51231 . -676) (undo-tree-id51232 . -676) (undo-tree-id51233 . -676) (undo-tree-id51234 . -676) (undo-tree-id51235 . -676) (undo-tree-id51236 . -676) (undo-tree-id51237 . -676) (undo-tree-id51238 . -676) (undo-tree-id51239 . -676) (undo-tree-id51240 . -676) (undo-tree-id51241 . -676) (undo-tree-id51242 . -676) (undo-tree-id51243 . -676) (undo-tree-id51244 . -676) (undo-tree-id51245 . -676) (undo-tree-id51246 . -689) (undo-tree-id51247 . -689) (undo-tree-id51248 . -689) (undo-tree-id51249 . -689) (undo-tree-id51250 . -689) (undo-tree-id51251 . -689) (undo-tree-id51252 . -689) (undo-tree-id51253 . -689) (undo-tree-id51254 . -689) (undo-tree-id51255 . -689) (undo-tree-id51256 . -689) 7394) nil (25767 12645 886795 113000) 0 nil])
([nil nil ((6705 . 7439) (#("
def next_char(text, temperature=1):
    X_new = preprocess([text])
    y_proba = model.predict(X_new)[0, -1:, :]
    rescaled_logits = tf.math.log(y_proba) / temperature
    char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
    return tokenizer.sequences_to_texts(char_id.numpy())[0]

def complete_text(text, n_chars=50, temperature=1):
    for _ in range(n_chars):
    text += next_char(text, temperature)
    return text

print(complete_text(\"t\", temperature=0.2))
# the belly the great and who shall be the belly the
print(complete_text(\"w\", temperature=1))
# thing? or why you gremio.
# who make which the first
print(complete_text(\"w\", temperature=2))
# th no cce:
# yeolg-hormer firi. a play asks.
fol rusb
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 10 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 15 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 35 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 43 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 46 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 61 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 74 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 79 95 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 97 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 98 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 103 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 113 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 114 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 118 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 126 127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 127 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 133 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 147 148 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 148 149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 149 150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 150 155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 155 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 156 171 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 171 175 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 175 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 180 182 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 182 206 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 206 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 207 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 216 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 222 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 228 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 235 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 238 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 243 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 247 253 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 253 273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 273 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 274 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 276 277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 277 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 282 283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 283 287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 287 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 288 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 297 298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 298 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 299 300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 302 303 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 303 304 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 304 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 308 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 317 321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 321 322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 322 329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 329 330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 330 335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 335 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 354 356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 356 360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 360 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 363 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 366 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 369 374 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 374 375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 375 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 376 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 382 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 382 383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 383 385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 385 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 389 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 393 401 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 402 406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 406 407 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 407 424 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 424 425 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 425 426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 426 430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 430 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 436 442 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 442 443 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 443 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 449 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 458 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 462 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 463 466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 466 483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 483 484 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 484 485 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 485 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 486 488 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 488 500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 500 539 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 539 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 544 545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 545 553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 554 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 558 559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 559 562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 562 577 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 577 578 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 578 579 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 579 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 580 582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 582 608 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 608 610 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 610 635 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 635 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 640 641 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 641 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 649 650 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 650 654 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 654 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 655 658 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 658 673 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 673 674 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 674 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 675 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 676 678 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 678 689 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 689 691 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 691 723 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 723 732 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 6705) (undo-tree-id51197 . -723) (undo-tree-id51198 . -732) (undo-tree-id51199 . -689) (undo-tree-id51200 . -689) (undo-tree-id51201 . -689) (undo-tree-id51202 . -689) (undo-tree-id51203 . -689) (undo-tree-id51204 . -689) (undo-tree-id51205 . -689) (undo-tree-id51206 . -689) (undo-tree-id51207 . -689) (undo-tree-id51208 . -689) (undo-tree-id51209 . -689) (undo-tree-id51210 . -689) (undo-tree-id51211 . -689) (undo-tree-id51212 . -689) (undo-tree-id51213 . -689) (undo-tree-id51214 . -689) (undo-tree-id51215 . -689) (undo-tree-id51216 . -723) (undo-tree-id51217 . -723) (undo-tree-id51218 . -723) (undo-tree-id51219 . -723) (undo-tree-id51220 . -723) (undo-tree-id51221 . -723) (undo-tree-id51222 . -723) (undo-tree-id51223 . -723) (undo-tree-id51224 . -723) (undo-tree-id51225 . -723) (undo-tree-id51226 . -723) 7428) nil (25767 12645 886769 77000) 0 nil])
([nil nil ((7438 . 7439) 7428) nil (25767 12645 886334 787000) 0 nil])
([nil nil ((6080 . 6082) (6079 . 6080) (t 25767 12645 947136 754000)) nil (25767 12700 518598 26000) 0 nil])
([nil nil ((6093 . 6097) (#("our" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6093) (undo-tree-id51911 . -2) (undo-tree-id51912 . -2) (undo-tree-id51913 . -2) (undo-tree-id51914 . -3) (undo-tree-id51915 . -2) (undo-tree-id51916 . -2) (undo-tree-id51917 . -3) (undo-tree-id51918 . -2) (undo-tree-id51919 . -2) (undo-tree-id51920 . -3) (undo-tree-id51921 . -3) (undo-tree-id51922 . -3) 6095) nil (25767 12700 518596 406000) 0 nil])
([nil nil ((6159 . 6161) (6158 . 6159) (6155 . 6158) 6153) nil (25767 12700 518586 744000) 0 nil])
([nil nil ((6160 . 6161) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6160) (undo-tree-id51882 . -1) (undo-tree-id51883 . -1) (undo-tree-id51884 . -1) (undo-tree-id51885 . -1) (undo-tree-id51886 . -1) (undo-tree-id51887 . -1) (undo-tree-id51888 . -1) (undo-tree-id51889 . -1) (undo-tree-id51890 . -1) (undo-tree-id51891 . -1) (undo-tree-id51892 . -1) (undo-tree-id51893 . -1) (undo-tree-id51894 . -1) (undo-tree-id51895 . -1) (undo-tree-id51896 . -1) (undo-tree-id51897 . -1) (undo-tree-id51898 . -1) (undo-tree-id51899 . -1) (undo-tree-id51900 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6161) (undo-tree-id51901 . 1) (undo-tree-id51902 . -1) (undo-tree-id51903 . -1) (undo-tree-id51904 . -1) (undo-tree-id51905 . -1) (undo-tree-id51906 . -1) (undo-tree-id51907 . -1) (undo-tree-id51908 . -1) (undo-tree-id51909 . -1) (undo-tree-id51910 . -1) 6160) nil (25767 12700 518583 699000) 0 nil])
([nil nil ((6235 . 6237)) nil (25767 12700 518553 589000) 0 nil])
([nil nil ((6312 . 6314)) nil (25767 12700 518548 124000) 0 nil])
([nil nil ((6382 . 6384) (6381 . 6382) (6378 . 6381) (t 25767 12700 583914 521000) 6320) nil (25767 12760 756200 62000) 0 nil])
([nil nil ((6596 . 6597) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6596) (undo-tree-id52506 . -1) (6524 . 6525) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6524) (undo-tree-id52507 . -1) (6454 . 6455) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6454) (undo-tree-id52508 . -1) (6383 . 6384) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 6383) (undo-tree-id52509 . -1) (undo-tree-id52510 . -1) (undo-tree-id52511 . -1) (undo-tree-id52512 . -1) (undo-tree-id52513 . -1) (undo-tree-id52514 . -1) (undo-tree-id52515 . -1) (undo-tree-id52516 . -1) (undo-tree-id52517 . -1) (undo-tree-id52518 . -1) (undo-tree-id52519 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6384) (undo-tree-id52520 . 1) (undo-tree-id52521 . -1) 6383) nil (25767 12760 756197 381000) 0 nil])
([nil nil ((6670 . 6671) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6670) (undo-tree-id52505 . -1) 6596) nil (25767 12760 756184 609000) 0 nil])
([nil nil ((#("Moreover, " 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6384) (undo-tree-id52372 . -9) (undo-tree-id52373 . -9) (undo-tree-id52374 . 10) (undo-tree-id52375 . -9) (undo-tree-id52376 . -7) (undo-tree-id52377 . -7) (undo-tree-id52378 . -7) (undo-tree-id52379 . -7) (undo-tree-id52380 . -7) (undo-tree-id52381 . -7) (undo-tree-id52382 . -7) (undo-tree-id52383 . -7) (undo-tree-id52384 . -8) (undo-tree-id52385 . -8) (undo-tree-id52386 . -8) (undo-tree-id52387 . -8) (undo-tree-id52388 . -8) (undo-tree-id52389 . -8) (undo-tree-id52390 . -8) (undo-tree-id52391 . -8) (undo-tree-id52392 . -10) (undo-tree-id52393 . -9) (undo-tree-id52394 . -7) (undo-tree-id52395 . -7) (undo-tree-id52396 . -7) (undo-tree-id52397 . -7) (undo-tree-id52398 . -7) (undo-tree-id52399 . -7) (undo-tree-id52400 . -7) (undo-tree-id52401 . -7) (undo-tree-id52402 . -7) (undo-tree-id52403 . -7) (undo-tree-id52404 . -7) (undo-tree-id52405 . -7) (undo-tree-id52406 . -7) (undo-tree-id52407 . -7) (undo-tree-id52408 . -7) (undo-tree-id52409 . -7) (undo-tree-id52410 . -7) (undo-tree-id52411 . -7) (undo-tree-id52412 . -7) (undo-tree-id52413 . -7) (undo-tree-id52414 . -7) (undo-tree-id52415 . -7) (undo-tree-id52416 . -8) (undo-tree-id52417 . -8) (undo-tree-id52418 . -8) (undo-tree-id52419 . -8) (undo-tree-id52420 . -8) (undo-tree-id52421 . -8) (undo-tree-id52422 . -8) (undo-tree-id52423 . -8) (undo-tree-id52424 . -8) (undo-tree-id52425 . -8) (undo-tree-id52426 . -8) (undo-tree-id52427 . -8) (undo-tree-id52428 . -8) (undo-tree-id52429 . -8) (undo-tree-id52430 . -8) (undo-tree-id52431 . -8) (undo-tree-id52432 . -8) (undo-tree-id52433 . -8) (undo-tree-id52434 . -8) (undo-tree-id52435 . -8) (undo-tree-id52436 . -8) (undo-tree-id52437 . -8) (undo-tree-id52438 . -10) (undo-tree-id52439 . -10) (undo-tree-id52440 . -10) (undo-tree-id52441 . -10) (undo-tree-id52442 . -10) (undo-tree-id52443 . -10) (undo-tree-id52444 . -10) (undo-tree-id52445 . -10) (undo-tree-id52446 . -10) (undo-tree-id52447 . -10) (undo-tree-id52448 . -10) (undo-tree-id52449 . -10) (undo-tree-id52450 . -10) (undo-tree-id52451 . -10) (undo-tree-id52452 . -10) (undo-tree-id52453 . -10) (undo-tree-id52454 . -10) (undo-tree-id52455 . -10) (undo-tree-id52456 . -10) (undo-tree-id52457 . -10) (undo-tree-id52458 . -10) (undo-tree-id52459 . -10) (undo-tree-id52460 . -9) (undo-tree-id52461 . -9) (undo-tree-id52462 . -9) (undo-tree-id52463 . -9) (undo-tree-id52464 . -9) (undo-tree-id52465 . -9) (undo-tree-id52466 . -9) (undo-tree-id52467 . -9) (undo-tree-id52468 . -9) (undo-tree-id52469 . -9) (undo-tree-id52470 . -9) (undo-tree-id52471 . -9) (undo-tree-id52472 . -9) (undo-tree-id52473 . -9) (undo-tree-id52474 . -9) (undo-tree-id52475 . -9) (undo-tree-id52476 . -9) (undo-tree-id52477 . -9) (undo-tree-id52478 . -9) (undo-tree-id52479 . -9) (undo-tree-id52480 . -9) (undo-tree-id52481 . -9) (undo-tree-id52482 . -9) (undo-tree-id52483 . -9) (undo-tree-id52484 . -9) (undo-tree-id52485 . -9) (undo-tree-id52486 . -9) (undo-tree-id52487 . -9) (undo-tree-id52488 . -9) (undo-tree-id52489 . -9) (undo-tree-id52490 . -9) (undo-tree-id52491 . -9) (undo-tree-id52492 . -9) (undo-tree-id52493 . -9) (undo-tree-id52494 . -9) (undo-tree-id52495 . -9) (undo-tree-id52496 . -9) (undo-tree-id52497 . -9) (undo-tree-id52498 . -9) (undo-tree-id52499 . -9) (undo-tree-id52500 . -9) (undo-tree-id52501 . -9) (undo-tree-id52502 . -9) (undo-tree-id52503 . -9) (undo-tree-id52504 . -10) 6393) nil (25767 12760 756179 99000) 0 nil])
([nil nil ((6384 . 6385) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6384)) nil (25767 12760 756101 272000) 0 nil])
([nil nil ((#("currently" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6397) (undo-tree-id52321 . -8) (undo-tree-id52322 . -8) (undo-tree-id52323 . -8) (undo-tree-id52324 . -5) (undo-tree-id52325 . -5) (undo-tree-id52326 . -5) (undo-tree-id52327 . -5) (undo-tree-id52328 . -5) (undo-tree-id52329 . -5) (undo-tree-id52330 . -5) (undo-tree-id52331 . -5) (undo-tree-id52332 . -5) (undo-tree-id52333 . -5) (undo-tree-id52334 . -5) (undo-tree-id52335 . -5) (undo-tree-id52336 . -5) (undo-tree-id52337 . -5) (undo-tree-id52338 . -5) (undo-tree-id52339 . -9) (undo-tree-id52340 . -8) (undo-tree-id52341 . -8) (undo-tree-id52342 . -8) (undo-tree-id52343 . -8) (undo-tree-id52344 . -8) (undo-tree-id52345 . -8) (undo-tree-id52346 . -8) (undo-tree-id52347 . -8) (undo-tree-id52348 . -8) (undo-tree-id52349 . -8) (undo-tree-id52350 . -8) (undo-tree-id52351 . -8) (undo-tree-id52352 . -8) (undo-tree-id52353 . -8) (undo-tree-id52354 . -8) (undo-tree-id52355 . -8) (undo-tree-id52356 . -8) (undo-tree-id52357 . -8) (undo-tree-id52358 . -8) (undo-tree-id52359 . -8) (undo-tree-id52360 . -8) (undo-tree-id52361 . -8) (undo-tree-id52362 . -8) (undo-tree-id52363 . -8) (undo-tree-id52364 . -8) (undo-tree-id52365 . -8) (undo-tree-id52366 . -8) (undo-tree-id52367 . -8) (undo-tree-id52368 . -8) (undo-tree-id52369 . -8) (undo-tree-id52370 . -8) (undo-tree-id52371 . -9) 6405) nil (25767 12760 756098 687000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6397) (undo-tree-id52318 . 1) (undo-tree-id52319 . -1) (undo-tree-id52320 . -1)) nil (25767 12760 756068 834000) 0 nil])
([nil nil ((6449 . 6451)) nil (25767 12760 756065 854000) 0 nil])
([nil nil ((#("which is just 100 characters" 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6451) (undo-tree-id52286 . -27) (undo-tree-id52287 . 28) (undo-tree-id52288 . -4) (undo-tree-id52289 . -4) (undo-tree-id52290 . -4) (undo-tree-id52291 . -4) (undo-tree-id52292 . -4) (undo-tree-id52293 . -4) (undo-tree-id52294 . -4) (undo-tree-id52295 . -4) (undo-tree-id52296 . -4) (undo-tree-id52297 . -4) (undo-tree-id52298 . -4) (undo-tree-id52299 . -4) (undo-tree-id52300 . -4) (undo-tree-id52301 . -4) (undo-tree-id52302 . -4) (undo-tree-id52303 . -4) (undo-tree-id52304 . -4) (undo-tree-id52305 . -4) (undo-tree-id52306 . -4) (undo-tree-id52307 . -4) (undo-tree-id52308 . -4) (undo-tree-id52309 . -4) (undo-tree-id52310 . -4) (undo-tree-id52311 . -4) (undo-tree-id52312 . -4) (undo-tree-id52313 . -4) (undo-tree-id52314 . -4) (undo-tree-id52315 . -4) (undo-tree-id52316 . -4) (undo-tree-id52317 . -28)) nil (25767 12760 756064 119000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 6451) (undo-tree-id52283 . 1) (undo-tree-id52284 . -1) (undo-tree-id52285 . -1)) nil (25767 12760 756045 751000) 0 nil])
([nil nil ((6451 . 6452) (#(" You could" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 6451) (undo-tree-id52207 . -9) (undo-tree-id52208 . -9) (undo-tree-id52209 . 10) (undo-tree-id52210 . -9) (undo-tree-id52211 . -5) (undo-tree-id52212 . -5) (undo-tree-id52213 . -5) (undo-tree-id52214 . -5) (undo-tree-id52215 . -5) (undo-tree-id52216 . -5) (undo-tree-id52217 . -5) (undo-tree-id52218 . -5) (undo-tree-id52219 . -5) (undo-tree-id52220 . -5) (undo-tree-id52221 . -5) (undo-tree-id52222 . -5) (undo-tree-id52223 . -5) (undo-tree-id52224 . -5) (undo-tree-id52225 . -5) (undo-tree-id52226 . -10) (undo-tree-id52227 . -9) (undo-tree-id52228 . -3) (undo-tree-id52229 . -3) (undo-tree-id52230 . -3) (undo-tree-id52231 . -3) (undo-tree-id52232 . -3) (undo-tree-id52233 . -3) (undo-tree-id52234 . -3) (undo-tree-id52235 . -3) (undo-tree-id52236 . -3) (undo-tree-id52237 . -3) (undo-tree-id52238 . -3) (undo-tree-id52239 . -3) (undo-tree-id52240 . -3) (undo-tree-id52241 . -3) (undo-tree-id52242 . -3) (undo-tree-id52243 . -3) (undo-tree-id52244 . -3) (undo-tree-id52245 . -3) (undo-tree-id52246 . -3) (undo-tree-id52247 . -3) (undo-tree-id52248 . -3) (undo-tree-id52249 . -3) (undo-tree-id52250 . -9) (undo-tree-id52251 . -9) (undo-tree-id52252 . -9) (undo-tree-id52253 . -9) (undo-tree-id52254 . -9) (undo-tree-id52255 . -9) (undo-tree-id52256 . -9) (undo-tree-id52257 . -9) (undo-tree-id52258 . -9) (undo-tree-id52259 . -9) (undo-tree-id52260 . -9) (undo-tree-id52261 . -9) (undo-tree-id52262 . -9) (undo-tree-id52263 . -9) (undo-tree-id52264 . -9) (undo-tree-id52265 . -9) (undo-tree-id52266 . -9) (undo-tree-id52267 . -9) (undo-tree-id52268 . -9) (undo-tree-id52269 . -9) (undo-tree-id52270 . -9) (undo-tree-id52271 . -9) (undo-tree-id52272 . -9) (undo-tree-id52273 . -9) (undo-tree-id52274 . -9) (undo-tree-id52275 . -9) (undo-tree-id52276 . -9) (undo-tree-id52277 . -9) (undo-tree-id52278 . -9) (undo-tree-id52279 . -9) (undo-tree-id52280 . -10) (undo-tree-id52281 . -10) (undo-tree-id52282 . -10) 6460) nil (25767 12760 756040 818000) 0 nil])
([nil nil ((6453 . 6454) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6453)) nil (25767 12760 755995 88000) 0 nil])
([nil nil ((#("but it will also make training harder, and even LSTM and GRU cells cannot handle very long sequences. Alternatively, you could" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 57 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6484) (undo-tree-id51927 . -125) (undo-tree-id51928 . -125) (undo-tree-id51929 . -125) (undo-tree-id51930 . -56) (undo-tree-id51931 . -56) (undo-tree-id51932 . -56) (undo-tree-id51933 . -56) (undo-tree-id51934 . -56) (undo-tree-id51935 . -56) (undo-tree-id51936 . -56) (undo-tree-id51937 . -56) (undo-tree-id51938 . -56) (undo-tree-id51939 . -56) (undo-tree-id51940 . -56) (undo-tree-id51941 . -56) (undo-tree-id51942 . -56) (undo-tree-id51943 . -56) (undo-tree-id51944 . -56) (undo-tree-id51945 . -56) (undo-tree-id51946 . -56) (undo-tree-id51947 . -56) (undo-tree-id51948 . -56) (undo-tree-id51949 . -56) (undo-tree-id51950 . -56) (undo-tree-id51951 . -56) (undo-tree-id51952 . -56) (undo-tree-id51953 . 78) (undo-tree-id51954 . -52) (undo-tree-id51955 . -50) (undo-tree-id51956 . -50) (undo-tree-id51957 . -50) (undo-tree-id51958 . -50) (undo-tree-id51959 . -50) (undo-tree-id51960 . -50) (undo-tree-id51961 . -50) (undo-tree-id51962 . -50) (undo-tree-id51963 . -50) (undo-tree-id51964 . -50) (undo-tree-id51965 . -50) (undo-tree-id51966 . -50) (undo-tree-id51967 . -50) (undo-tree-id51968 . -50) (undo-tree-id51969 . -50) (undo-tree-id51970 . -2) (undo-tree-id51971 . -2) (undo-tree-id51972 . -2) (undo-tree-id51973 . -2) (undo-tree-id51974 . -2) (undo-tree-id51975 . -2) (undo-tree-id51976 . -2) (undo-tree-id51977 . -2) (undo-tree-id51978 . -2) (undo-tree-id51979 . -2) (undo-tree-id51980 . -2) (undo-tree-id51981 . -2) (undo-tree-id51982 . -2) (undo-tree-id51983 . -2) (undo-tree-id51984 . -2) (undo-tree-id51985 . -2) (undo-tree-id51986 . -2) (undo-tree-id51987 . -2) (undo-tree-id51988 . -2) (undo-tree-id51989 . -2) (undo-tree-id51990 . -2) (undo-tree-id51991 . -2) (undo-tree-id51992 . -2) (undo-tree-id51993 . -2) (undo-tree-id51994 . -2) (undo-tree-id51995 . -2) (undo-tree-id51996 . -2) (undo-tree-id51997 . -2) (undo-tree-id51998 . -2) (undo-tree-id51999 . -2) (undo-tree-id52000 . -2) (undo-tree-id52001 . -2) (undo-tree-id52002 . -2) (undo-tree-id52003 . -2) (undo-tree-id52004 . -2) (undo-tree-id52005 . -2) (undo-tree-id52006 . -126) (undo-tree-id52007 . -125) (undo-tree-id52008 . -88) (undo-tree-id52009 . -88) (undo-tree-id52010 . -88) (undo-tree-id52011 . -88) (undo-tree-id52012 . -88) (undo-tree-id52013 . -88) (undo-tree-id52014 . -88) (undo-tree-id52015 . -88) (undo-tree-id52016 . -88) (undo-tree-id52017 . -88) (undo-tree-id52018 . -88) (undo-tree-id52019 . -88) (undo-tree-id52020 . -88) (undo-tree-id52021 . -88) (undo-tree-id52022 . -88) (undo-tree-id52023 . -88) (undo-tree-id52024 . -88) (undo-tree-id52025 . -88) (undo-tree-id52026 . -88) (undo-tree-id52027 . -88) (undo-tree-id52028 . -88) (undo-tree-id52029 . -88) (undo-tree-id52030 . -88) (undo-tree-id52031 . -88) (undo-tree-id52032 . -88) (undo-tree-id52033 . -88) (undo-tree-id52034 . -88) (undo-tree-id52035 . -88) (undo-tree-id52036 . -88) (undo-tree-id52037 . -88) (undo-tree-id52038 . -88) (undo-tree-id52039 . -88) (undo-tree-id52040 . -88) (undo-tree-id52041 . -88) (undo-tree-id52042 . -88) (undo-tree-id52043 . -88) (undo-tree-id52044 . -89) (undo-tree-id52045 . -89) (undo-tree-id52046 . -89) (undo-tree-id52047 . -89) (undo-tree-id52048 . -89) (undo-tree-id52049 . -89) (undo-tree-id52050 . -89) (undo-tree-id52051 . -89) (undo-tree-id52052 . -89) (undo-tree-id52053 . -89) (undo-tree-id52054 . -89) (undo-tree-id52055 . -89) (undo-tree-id52056 . -89) (undo-tree-id52057 . -89) (undo-tree-id52058 . -89) (undo-tree-id52059 . -89) (undo-tree-id52060 . -89) (undo-tree-id52061 . -89) (undo-tree-id52062 . -89) (undo-tree-id52063 . -89) (undo-tree-id52064 . -89) (undo-tree-id52065 . -89) (undo-tree-id52066 . -99) (undo-tree-id52067 . -99) (undo-tree-id52068 . -99) (undo-tree-id52069 . -99) (undo-tree-id52070 . -99) (undo-tree-id52071 . -99) (undo-tree-id52072 . -99) (undo-tree-id52073 . -99) (undo-tree-id52074 . -99) (undo-tree-id52075 . -99) (undo-tree-id52076 . -99) (undo-tree-id52077 . -99) (undo-tree-id52078 . -99) (undo-tree-id52079 . -99) (undo-tree-id52080 . -99) (undo-tree-id52081 . -99) (undo-tree-id52082 . -99) (undo-tree-id52083 . -99) (undo-tree-id52084 . -99) (undo-tree-id52085 . -99) (undo-tree-id52086 . -99) (undo-tree-id52087 . -99) (undo-tree-id52088 . -100) (undo-tree-id52089 . -100) (undo-tree-id52090 . -100) (undo-tree-id52091 . -100) (undo-tree-id52092 . -100) (undo-tree-id52093 . -100) (undo-tree-id52094 . -100) (undo-tree-id52095 . -100) (undo-tree-id52096 . -100) (undo-tree-id52097 . -100) (undo-tree-id52098 . -100) (undo-tree-id52099 . -100) (undo-tree-id52100 . -100) (undo-tree-id52101 . -100) (undo-tree-id52102 . -100) (undo-tree-id52103 . -100) (undo-tree-id52104 . -100) (undo-tree-id52105 . -100) (undo-tree-id52106 . -100) (undo-tree-id52107 . -100) (undo-tree-id52108 . -100) (undo-tree-id52109 . -100) (undo-tree-id52110 . -114) (undo-tree-id52111 . -114) (undo-tree-id52112 . -114) (undo-tree-id52113 . -114) (undo-tree-id52114 . -114) (undo-tree-id52115 . -114) (undo-tree-id52116 . -114) (undo-tree-id52117 . -114) (undo-tree-id52118 . -114) (undo-tree-id52119 . -114) (undo-tree-id52120 . -114) (undo-tree-id52121 . -114) (undo-tree-id52122 . -114) (undo-tree-id52123 . -114) (undo-tree-id52124 . -114) (undo-tree-id52125 . -114) (undo-tree-id52126 . -114) (undo-tree-id52127 . -114) (undo-tree-id52128 . -114) (undo-tree-id52129 . -114) (undo-tree-id52130 . -114) (undo-tree-id52131 . -114) (undo-tree-id52132 . -115) (undo-tree-id52133 . -115) (undo-tree-id52134 . -115) (undo-tree-id52135 . -115) (undo-tree-id52136 . -115) (undo-tree-id52137 . -115) (undo-tree-id52138 . -115) (undo-tree-id52139 . -115) (undo-tree-id52140 . -115) (undo-tree-id52141 . -115) (undo-tree-id52142 . -115) (undo-tree-id52143 . -115) (undo-tree-id52144 . -115) (undo-tree-id52145 . -115) (undo-tree-id52146 . -115) (undo-tree-id52147 . -115) (undo-tree-id52148 . -115) (undo-tree-id52149 . -115) (undo-tree-id52150 . -115) (undo-tree-id52151 . -115) (undo-tree-id52152 . -115) (undo-tree-id52153 . -115) (undo-tree-id52154 . -119) (undo-tree-id52155 . -119) (undo-tree-id52156 . -119) (undo-tree-id52157 . -119) (undo-tree-id52158 . -119) (undo-tree-id52159 . -119) (undo-tree-id52160 . -119) (undo-tree-id52161 . -119) (undo-tree-id52162 . -119) (undo-tree-id52163 . -119) (undo-tree-id52164 . -119) (undo-tree-id52165 . -119) (undo-tree-id52166 . -119) (undo-tree-id52167 . -119) (undo-tree-id52168 . -119) (undo-tree-id52169 . -119) (undo-tree-id52170 . -119) (undo-tree-id52171 . -119) (undo-tree-id52172 . -119) (undo-tree-id52173 . -119) (undo-tree-id52174 . -119) (undo-tree-id52175 . -119) (undo-tree-id52176 . -125) (undo-tree-id52177 . -125) (undo-tree-id52178 . -125) (undo-tree-id52179 . -125) (undo-tree-id52180 . -125) (undo-tree-id52181 . -125) (undo-tree-id52182 . -125) (undo-tree-id52183 . -125) (undo-tree-id52184 . -125) (undo-tree-id52185 . -125) (undo-tree-id52186 . -125) (undo-tree-id52187 . -125) (undo-tree-id52188 . -125) (undo-tree-id52189 . -125) (undo-tree-id52190 . -125) (undo-tree-id52191 . -125) (undo-tree-id52192 . -125) (undo-tree-id52193 . -125) (undo-tree-id52194 . -125) (undo-tree-id52195 . -125) (undo-tree-id52196 . -125) (undo-tree-id52197 . -125) (undo-tree-id52198 . -125) (undo-tree-id52199 . -125) (undo-tree-id52200 . -125) (undo-tree-id52201 . -125) (undo-tree-id52202 . -125) (undo-tree-id52203 . -125) (undo-tree-id52204 . -125) (undo-tree-id52205 . -125) (undo-tree-id52206 . -126) 6609) nil (25767 12760 755985 211000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 6484) (undo-tree-id51924 . 1) (undo-tree-id51925 . -1) (undo-tree-id51926 . -1)) nil (25767 12760 755689 615000) 0 nil])
([nil nil ((6486 . 6489) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -6486) (undo-tree-id51923 . -1) 6487) nil (25767 12760 755682 573000) 0 nil])
([nil nil ((7287 . 7289) (t 25767 12760 832794 531000)) nil (25767 12812 143112 216000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8085 . 8086) (nil fontified nil 8008 . 8086) (nil fontified nil 7936 . 8008) (nil fontified nil 7861 . 7936) (nil fontified nil 7828 . 7861) (nil fontified nil 7756 . 7828) (nil fontified nil 7684 . 7756) (nil fontified nil 7609 . 7684) (nil fontified nil 7534 . 7609) (nil fontified nil 7456 . 7534) (nil fontified nil 7378 . 7456) (nil fontified nil 7302 . 7378) (nil fontified nil 7289 . 7302) (7289 . 8086)) nil (25767 12812 143110 554000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7286) (undo-tree-id52522 . -1) (undo-tree-id52523 . -1) (undo-tree-id52524 . -1) (undo-tree-id52525 . -1) (undo-tree-id52526 . -1) (undo-tree-id52527 . -1) (undo-tree-id52528 . -1) (undo-tree-id52529 . -1) (undo-tree-id52530 . -1) (undo-tree-id52531 . -1) (undo-tree-id52532 . -1) (undo-tree-id52533 . -1) (undo-tree-id52534 . -1) (undo-tree-id52535 . -1) (undo-tree-id52536 . -1) (undo-tree-id52537 . -1) (undo-tree-id52538 . -2) (undo-tree-id52539 . -2) (undo-tree-id52540 . -2) (undo-tree-id52541 . -2) (undo-tree-id52542 . -2) (undo-tree-id52543 . -2) (undo-tree-id52544 . -2) (undo-tree-id52545 . -2) (undo-tree-id52546 . -2) (undo-tree-id52547 . -2) (undo-tree-id52548 . -2) (undo-tree-id52549 . -2) (undo-tree-id52550 . -2) (7289 . 7291)) nil (25767 12812 143106 358000) 0 nil])
([nil nil ((7286 . 7287) 7277) nil (25767 12812 143075 819000) 0 nil])
([nil nil ((8087 . 8088)) nil (25767 12812 143070 817000) 0 nil])
([nil nil ((7288 . 7289) (7287 . 7288) (t 25767 12812 253562 225000) 7287) nil (25767 12817 59897 101000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 7289) (undo-tree-id52551 . 1) (undo-tree-id52552 . -1) (undo-tree-id52553 . -1)) nil (25767 12839 391190 271000) 0 nil])
([nil nil ((7304 . 7306) (#("Until now, we have used only " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 13 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7304) (undo-tree-id52682 . -28) (undo-tree-id52683 . -28) (undo-tree-id52684 . 17) (undo-tree-id52685 . -4) (undo-tree-id52686 . -4) (undo-tree-id52687 . -4) (undo-tree-id52688 . -4) (undo-tree-id52689 . -4) (undo-tree-id52690 . -4) (undo-tree-id52691 . -4) (undo-tree-id52692 . -4) (undo-tree-id52693 . -4) (undo-tree-id52694 . -4) (undo-tree-id52695 . -4) (undo-tree-id52696 . -4) (undo-tree-id52697 . -4) (undo-tree-id52698 . -4) (undo-tree-id52699 . -4) (undo-tree-id52700 . -4) (undo-tree-id52701 . -4) (undo-tree-id52702 . -4) (undo-tree-id52703 . -4) (undo-tree-id52704 . -4) (undo-tree-id52705 . -4) (undo-tree-id52706 . -8) (undo-tree-id52707 . -8) (undo-tree-id52708 . -8) (undo-tree-id52709 . -8) (undo-tree-id52710 . -8) (undo-tree-id52711 . -8) (undo-tree-id52712 . -8) (undo-tree-id52713 . -8) (undo-tree-id52714 . -8) (undo-tree-id52715 . -8) (undo-tree-id52716 . -8) (undo-tree-id52717 . -8) (undo-tree-id52718 . -8) (undo-tree-id52719 . -8) (undo-tree-id52720 . -8) (undo-tree-id52721 . -8) (undo-tree-id52722 . -8) (undo-tree-id52723 . -8) (undo-tree-id52724 . -8) (undo-tree-id52725 . -8) (undo-tree-id52726 . -8) (undo-tree-id52727 . -8) (undo-tree-id52728 . -8) (undo-tree-id52729 . -8) (undo-tree-id52730 . -8) (undo-tree-id52731 . -8) (undo-tree-id52732 . -9) (undo-tree-id52733 . -9) (undo-tree-id52734 . -9) (undo-tree-id52735 . -9) (undo-tree-id52736 . -9) (undo-tree-id52737 . -9) (undo-tree-id52738 . -9) (undo-tree-id52739 . -9) (undo-tree-id52740 . -9) (undo-tree-id52741 . -9) (undo-tree-id52742 . -9) (undo-tree-id52743 . -9) (undo-tree-id52744 . -9) (undo-tree-id52745 . -9) (undo-tree-id52746 . -9) (undo-tree-id52747 . -9) (undo-tree-id52748 . -9) (undo-tree-id52749 . -9) (undo-tree-id52750 . -9) (undo-tree-id52751 . -9) (undo-tree-id52752 . -9) (undo-tree-id52753 . -12) (undo-tree-id52754 . -12) (undo-tree-id52755 . -12) (undo-tree-id52756 . -12) (undo-tree-id52757 . -12) (undo-tree-id52758 . -12) (undo-tree-id52759 . -12) (undo-tree-id52760 . -12) (undo-tree-id52761 . -12) (undo-tree-id52762 . -12) (undo-tree-id52763 . -12) (undo-tree-id52764 . -12) (undo-tree-id52765 . -12) (undo-tree-id52766 . -12) (undo-tree-id52767 . -12) (undo-tree-id52768 . -12) (undo-tree-id52769 . -12) (undo-tree-id52770 . -12) (undo-tree-id52771 . -12) (undo-tree-id52772 . -12) (undo-tree-id52773 . -12) (undo-tree-id52774 . -11) (undo-tree-id52775 . -11) (undo-tree-id52776 . -11) (undo-tree-id52777 . -11) (undo-tree-id52778 . -11) (undo-tree-id52779 . -11) (undo-tree-id52780 . -11) (undo-tree-id52781 . -11) (undo-tree-id52782 . -11) (undo-tree-id52783 . -11) (undo-tree-id52784 . -11) (undo-tree-id52785 . -11) (undo-tree-id52786 . -11) (undo-tree-id52787 . -11) (undo-tree-id52788 . -11) (undo-tree-id52789 . -11) (undo-tree-id52790 . -11) (undo-tree-id52791 . -11) (undo-tree-id52792 . -11) (undo-tree-id52793 . -11) (undo-tree-id52794 . -11) (undo-tree-id52795 . -28) (undo-tree-id52796 . -17) (undo-tree-id52797 . -17) (undo-tree-id52798 . -17) (undo-tree-id52799 . -17) (undo-tree-id52800 . -17) (undo-tree-id52801 . -17) (undo-tree-id52802 . -22) (undo-tree-id52803 . -22) (undo-tree-id52804 . -22) (undo-tree-id52805 . -22) (undo-tree-id52806 . -22) (undo-tree-id52807 . -22) (undo-tree-id52808 . -27) (undo-tree-id52809 . -27) (undo-tree-id52810 . -27) (undo-tree-id52811 . -27) (undo-tree-id52812 . -27) (undo-tree-id52813 . -27) (undo-tree-id52814 . -11) (undo-tree-id52815 . -11) (undo-tree-id52816 . -11) (undo-tree-id52817 . -11) (undo-tree-id52818 . -11) (undo-tree-id52819 . -11) (undo-tree-id52820 . -11) (undo-tree-id52821 . -11) (undo-tree-id52822 . -11) (undo-tree-id52823 . -11) (undo-tree-id52824 . -11) (undo-tree-id52825 . -11) (undo-tree-id52826 . -11) (undo-tree-id52827 . -11) (undo-tree-id52828 . -11) (undo-tree-id52829 . -11) (undo-tree-id52830 . -11) (undo-tree-id52831 . -11) (undo-tree-id52832 . -11) (undo-tree-id52833 . -11) (undo-tree-id52834 . -11) (undo-tree-id52835 . -11) (undo-tree-id52836 . -11) (undo-tree-id52837 . -11) (undo-tree-id52838 . -11) (undo-tree-id52839 . -11) (undo-tree-id52840 . -11) (undo-tree-id52841 . -11) (undo-tree-id52842 . -29) (undo-tree-id52843 . -28) (undo-tree-id52844 . -4) (undo-tree-id52845 . -4) (undo-tree-id52846 . -4) (undo-tree-id52847 . -4) (undo-tree-id52848 . -4) (undo-tree-id52849 . -4) (undo-tree-id52850 . -4) (undo-tree-id52851 . -4) (undo-tree-id52852 . -4) (undo-tree-id52853 . -4) (undo-tree-id52854 . -4) (undo-tree-id52855 . -4) (undo-tree-id52856 . -4) (undo-tree-id52857 . -4) (undo-tree-id52858 . -4) (undo-tree-id52859 . -4) (undo-tree-id52860 . -8) (undo-tree-id52861 . -8) (undo-tree-id52862 . -8) (undo-tree-id52863 . -8) (undo-tree-id52864 . -8) (undo-tree-id52865 . -8) (undo-tree-id52866 . -8) (undo-tree-id52867 . -8) (undo-tree-id52868 . -8) (undo-tree-id52869 . -8) (undo-tree-id52870 . -8) (undo-tree-id52871 . -8) (undo-tree-id52872 . -8) (undo-tree-id52873 . -8) (undo-tree-id52874 . -8) (undo-tree-id52875 . -8) (undo-tree-id52876 . -9) (undo-tree-id52877 . -9) (undo-tree-id52878 . -9) (undo-tree-id52879 . -9) (undo-tree-id52880 . -9) (undo-tree-id52881 . -9) (undo-tree-id52882 . -9) (undo-tree-id52883 . -9) (undo-tree-id52884 . -9) (undo-tree-id52885 . -9) (undo-tree-id52886 . -9) (undo-tree-id52887 . -9) (undo-tree-id52888 . -9) (undo-tree-id52889 . -9) (undo-tree-id52890 . -9) (undo-tree-id52891 . -9) (undo-tree-id52892 . -12) (undo-tree-id52893 . -12) (undo-tree-id52894 . -12) (undo-tree-id52895 . -12) (undo-tree-id52896 . -12) (undo-tree-id52897 . -12) (undo-tree-id52898 . -12) (undo-tree-id52899 . -12) (undo-tree-id52900 . -12) (undo-tree-id52901 . -12) (undo-tree-id52902 . -12) (undo-tree-id52903 . -12) (undo-tree-id52904 . -12) (undo-tree-id52905 . -12) (undo-tree-id52906 . -12) (undo-tree-id52907 . -12) (undo-tree-id52908 . -17) (undo-tree-id52909 . -17) (undo-tree-id52910 . -17) (undo-tree-id52911 . -17) (undo-tree-id52912 . -17) (undo-tree-id52913 . -17) (undo-tree-id52914 . -17) (undo-tree-id52915 . -17) (undo-tree-id52916 . -17) (undo-tree-id52917 . -17) (undo-tree-id52918 . -17) (undo-tree-id52919 . -17) (undo-tree-id52920 . -17) (undo-tree-id52921 . -17) (undo-tree-id52922 . -17) (undo-tree-id52923 . -17) (undo-tree-id52924 . -22) (undo-tree-id52925 . -22) (undo-tree-id52926 . -22) (undo-tree-id52927 . -22) (undo-tree-id52928 . -22) (undo-tree-id52929 . -22) (undo-tree-id52930 . -22) (undo-tree-id52931 . -22) (undo-tree-id52932 . -22) (undo-tree-id52933 . -22) (undo-tree-id52934 . -22) (undo-tree-id52935 . -22) (undo-tree-id52936 . -22) (undo-tree-id52937 . -22) (undo-tree-id52938 . -22) (undo-tree-id52939 . -22) (undo-tree-id52940 . -27) (undo-tree-id52941 . -27) (undo-tree-id52942 . -27) (undo-tree-id52943 . -27) (undo-tree-id52944 . -27) (undo-tree-id52945 . -27) (undo-tree-id52946 . -27) (undo-tree-id52947 . -27) (undo-tree-id52948 . -27) (undo-tree-id52949 . -27) (undo-tree-id52950 . -27) (undo-tree-id52951 . -27) (undo-tree-id52952 . -27) (undo-tree-id52953 . -27) (undo-tree-id52954 . -27) (undo-tree-id52955 . -27) (undo-tree-id52956 . -29) (undo-tree-id52957 . -29) (undo-tree-id52958 . -29) (undo-tree-id52959 . -29) (undo-tree-id52960 . -29) (undo-tree-id52961 . -29) (undo-tree-id52962 . -29) (undo-tree-id52963 . -29) (undo-tree-id52964 . -29) (undo-tree-id52965 . -29) (undo-tree-id52966 . -29) (undo-tree-id52967 . -29) (undo-tree-id52968 . -29) (undo-tree-id52969 . -29) (undo-tree-id52970 . -29) (undo-tree-id52971 . -29) (undo-tree-id52972 . -29) (undo-tree-id52973 . -29) (undo-tree-id52974 . -29) (undo-tree-id52975 . -29) (undo-tree-id52976 . -29) (undo-tree-id52977 . -28) (undo-tree-id52978 . -28) (undo-tree-id52979 . -28) (undo-tree-id52980 . -28) (undo-tree-id52981 . -28) (undo-tree-id52982 . -28) (undo-tree-id52983 . -28) (undo-tree-id52984 . -28) (undo-tree-id52985 . -28) (undo-tree-id52986 . -28) (undo-tree-id52987 . -28) (undo-tree-id52988 . -28) (undo-tree-id52989 . -28) (undo-tree-id52990 . -28) (undo-tree-id52991 . -28) (undo-tree-id52992 . -28) (undo-tree-id52993 . -28) (undo-tree-id52994 . -29) (undo-tree-id52995 . -29) (undo-tree-id52996 . -29) 7332) nil (25767 12874 168473 140000) 0 nil] [nil nil ((7304 . 7305) (#("Until now, w" 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7304) (undo-tree-id52554 . -11) (undo-tree-id52555 . -11) (undo-tree-id52556 . -11) (undo-tree-id52557 . -12) (undo-tree-id52558 . -11) (undo-tree-id52559 . -4) (undo-tree-id52560 . -4) (undo-tree-id52561 . -4) (undo-tree-id52562 . -4) (undo-tree-id52563 . -4) (undo-tree-id52564 . -4) (undo-tree-id52565 . -4) (undo-tree-id52566 . -4) (undo-tree-id52567 . -4) (undo-tree-id52568 . -4) (undo-tree-id52569 . -4) (undo-tree-id52570 . -4) (undo-tree-id52571 . -4) (undo-tree-id52572 . -4) (undo-tree-id52573 . -4) (undo-tree-id52574 . -4) (undo-tree-id52575 . -4) (undo-tree-id52576 . -4) (undo-tree-id52577 . -4) (undo-tree-id52578 . -4) (undo-tree-id52579 . -4) (undo-tree-id52580 . -8) (undo-tree-id52581 . -8) (undo-tree-id52582 . -8) (undo-tree-id52583 . -8) (undo-tree-id52584 . -8) (undo-tree-id52585 . -8) (undo-tree-id52586 . -8) (undo-tree-id52587 . -8) (undo-tree-id52588 . -8) (undo-tree-id52589 . -8) (undo-tree-id52590 . -8) (undo-tree-id52591 . -8) (undo-tree-id52592 . -8) (undo-tree-id52593 . -8) (undo-tree-id52594 . -8) (undo-tree-id52595 . -8) (undo-tree-id52596 . -8) (undo-tree-id52597 . -8) (undo-tree-id52598 . -8) (undo-tree-id52599 . -8) (undo-tree-id52600 . -8) (undo-tree-id52601 . -8) (undo-tree-id52602 . -8) (undo-tree-id52603 . -8) (undo-tree-id52604 . -8) (undo-tree-id52605 . -8) (undo-tree-id52606 . -9) (undo-tree-id52607 . -9) (undo-tree-id52608 . -9) (undo-tree-id52609 . -9) (undo-tree-id52610 . -9) (undo-tree-id52611 . -9) (undo-tree-id52612 . -9) (undo-tree-id52613 . -9) (undo-tree-id52614 . -9) (undo-tree-id52615 . -9) (undo-tree-id52616 . -9) (undo-tree-id52617 . -9) (undo-tree-id52618 . -9) (undo-tree-id52619 . -9) (undo-tree-id52620 . -9) (undo-tree-id52621 . -9) (undo-tree-id52622 . -9) (undo-tree-id52623 . -9) (undo-tree-id52624 . -9) (undo-tree-id52625 . -9) (undo-tree-id52626 . -9) (undo-tree-id52627 . -12) (undo-tree-id52628 . -12) (undo-tree-id52629 . -12) (undo-tree-id52630 . -12) (undo-tree-id52631 . -12) (undo-tree-id52632 . -12) (undo-tree-id52633 . -12) (undo-tree-id52634 . -12) (undo-tree-id52635 . -12) (undo-tree-id52636 . -12) (undo-tree-id52637 . -12) (undo-tree-id52638 . -12) (undo-tree-id52639 . -12) (undo-tree-id52640 . -12) (undo-tree-id52641 . -12) (undo-tree-id52642 . -12) (undo-tree-id52643 . -12) (undo-tree-id52644 . -12) (undo-tree-id52645 . -12) (undo-tree-id52646 . -12) (undo-tree-id52647 . -12) (undo-tree-id52648 . -11) (undo-tree-id52649 . -11) (undo-tree-id52650 . -11) (undo-tree-id52651 . -11) (undo-tree-id52652 . -11) (undo-tree-id52653 . -11) (undo-tree-id52654 . -11) (undo-tree-id52655 . -11) (undo-tree-id52656 . -11) (undo-tree-id52657 . -11) (undo-tree-id52658 . -11) (undo-tree-id52659 . -11) (undo-tree-id52660 . -11) (undo-tree-id52661 . -11) (undo-tree-id52662 . -11) (undo-tree-id52663 . -11) (undo-tree-id52664 . -11) (undo-tree-id52665 . -11) (undo-tree-id52666 . -11) (undo-tree-id52667 . -11) (undo-tree-id52668 . -11) (undo-tree-id52669 . -11) (undo-tree-id52670 . -12) (undo-tree-id52671 . -12) (undo-tree-id52672 . -12) 7315 (t 25767 12817 121635 640000)) ((7304 . 7316) (#("W" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7304) (undo-tree-id52673 . -1) (undo-tree-id52674 . -1) (undo-tree-id52675 . -1) (undo-tree-id52676 . -1) (undo-tree-id52677 . -1) (undo-tree-id52678 . -1) (t 25767 12825 665764 785000)) (25767 12825 597832 437000) 0 nil])
([nil nil ((7306 . 7307) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7306)) nil (25767 12874 167496 662000) 0 nil])
nil
([nil nil ((7352 . 7353) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -7352) (undo-tree-id52681 . -1) 7320) nil (25767 12874 167495 568000) 0 nil])
([nil nil ((7508 . 7509) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -7508) (undo-tree-id52679 . -1) (7430 . 7431) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -7430) (undo-tree-id52680 . -1) 7352) nil (25767 12874 167492 145000) 0 nil])
([nil nil ((7527 . 7529) (7525 . 7527)) nil (25767 12874 167476 144000) 0 nil])
([nil nil ((7303 . 7304) (t 25767 12874 230505 713000) 7293) nil (25767 12970 393892 669000) 0 nil])
([nil nil ((7735 . 7736) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7735) (undo-tree-id52997 . -1) (7663 . 7664) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -7663) (undo-tree-id52998 . -1) 7657 (t 25767 12970 460005 23000)) nil (25767 12987 981627 150000) 0 nil])
([nil nil ((#("stateful
RNN" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7799) (undo-tree-id53013 . -11) (undo-tree-id53014 . -11) (undo-tree-id53015 . -11) (undo-tree-id53016 . -11) 7810 (t 25767 12988 48283 94000)) nil (25767 13051 61994 248000) 0 nil])
([nil nil ((7529 . 7530)) nil (25767 13051 61990 634000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7541 . 7542) (nil fontified nil 7539 . 7542) (nil fontified nil 7530 . 7539) (7530 . 7542) 7529) nil (25767 13051 61989 903000) 0 nil])
([nil nil ((7601 . 7602) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -7601) (7538 . 7539) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -7538) 7530) nil (25767 13051 61988 210000) 0 nil])
([nil nil ((7530 . 7531) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7530)) nil (25767 13051 61986 384000) 0 nil])
([nil nil ((7542 . 7544)) nil (25767 13051 61985 660000) 0 nil])
([nil nil ((#("What if we told the RNN to " 0 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7545) (undo-tree-id53009 . -26) (undo-tree-id53010 . -26) (undo-tree-id53011 . -26) (undo-tree-id53012 . -26) 7571) nil (25767 13051 61984 722000) 0 nil])
([nil nil ((7545 . 7546) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7545)) nil (25767 13051 61980 995000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7556)) nil (25767 13051 61979 927000) 0 nil])
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7556)) nil (25767 13051 61979 232000) 0 nil])
([nil nil ((7556 . 7557)) nil (25767 13051 61978 555000) 0 nil])
([nil nil ((7665 . 7666) (#("?" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7665)) nil (25767 13051 61977 702000) 0 nil])
([nil nil ((7668 . 7670) (7667 . 7668)) nil (25767 13051 61976 420000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7668) (undo-tree-id52999 . -2) (undo-tree-id53000 . -2) (undo-tree-id53001 . -2) (undo-tree-id53002 . -2) (undo-tree-id53003 . -2) (undo-tree-id53004 . -2) (undo-tree-id53005 . -2) (undo-tree-id53006 . -2) (undo-tree-id53007 . -2) (undo-tree-id53008 . -2) 7670 (7667 . 7670) 7651) nil (25767 13051 61972 217000) 0 nil])
([nil nil ((#("This is called a ." 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 17 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7773) (undo-tree-id53017 . -17) (undo-tree-id53018 . -17) (undo-tree-id53019 . -17) (undo-tree-id53020 . -17) (undo-tree-id53021 . -3) (undo-tree-id53022 . -3) (undo-tree-id53023 . -3) (undo-tree-id53024 . -3) (undo-tree-id53025 . -3) (undo-tree-id53026 . -3) (undo-tree-id53027 . -3) (undo-tree-id53028 . -3) (undo-tree-id53029 . -3) (undo-tree-id53030 . -3) (undo-tree-id53031 . -3) (undo-tree-id53032 . -3) (undo-tree-id53033 . -3) (undo-tree-id53034 . -3) (undo-tree-id53035 . -3) (undo-tree-id53036 . -3) (undo-tree-id53037 . -3) (undo-tree-id53038 . -3) (undo-tree-id53039 . -3) (undo-tree-id53040 . -3) (undo-tree-id53041 . -3) (undo-tree-id53042 . -3) (undo-tree-id53043 . -3) (undo-tree-id53044 . -3) (undo-tree-id53045 . -3) (undo-tree-id53046 . -3) (undo-tree-id53047 . -18) (undo-tree-id53048 . -17) (undo-tree-id53049 . -3) (undo-tree-id53050 . -3) (undo-tree-id53051 . -3) (undo-tree-id53052 . -3) (undo-tree-id53053 . -3) (undo-tree-id53054 . -3) (undo-tree-id53055 . -3) (undo-tree-id53056 . -3) (undo-tree-id53057 . -3) (undo-tree-id53058 . -3) (undo-tree-id53059 . -3) (undo-tree-id53060 . -3) (undo-tree-id53061 . -3) (undo-tree-id53062 . -3) (undo-tree-id53063 . -3) (undo-tree-id53064 . -3) (undo-tree-id53065 . -6) (undo-tree-id53066 . -6) (undo-tree-id53067 . -6) (undo-tree-id53068 . -6) (undo-tree-id53069 . -6) (undo-tree-id53070 . -6) (undo-tree-id53071 . -6) (undo-tree-id53072 . -6) (undo-tree-id53073 . -6) (undo-tree-id53074 . -6) (undo-tree-id53075 . -6) (undo-tree-id53076 . -6) (undo-tree-id53077 . -6) (undo-tree-id53078 . -6) (undo-tree-id53079 . -6) (undo-tree-id53080 . -6) (undo-tree-id53081 . -13) (undo-tree-id53082 . -13) (undo-tree-id53083 . -13) (undo-tree-id53084 . -13) (undo-tree-id53085 . -13) (undo-tree-id53086 . -13) (undo-tree-id53087 . -13) (undo-tree-id53088 . -13) (undo-tree-id53089 . -13) (undo-tree-id53090 . -13) (undo-tree-id53091 . -13) (undo-tree-id53092 . -13) (undo-tree-id53093 . -13) (undo-tree-id53094 . -13) (undo-tree-id53095 . -13) (undo-tree-id53096 . -13) (undo-tree-id53097 . -15) (undo-tree-id53098 . -15) (undo-tree-id53099 . -15) (undo-tree-id53100 . -15) (undo-tree-id53101 . -15) (undo-tree-id53102 . -15) (undo-tree-id53103 . -15) (undo-tree-id53104 . -15) (undo-tree-id53105 . -15) (undo-tree-id53106 . -15) (undo-tree-id53107 . -15) (undo-tree-id53108 . -15) (undo-tree-id53109 . -15) (undo-tree-id53110 . -15) (undo-tree-id53111 . -15) (undo-tree-id53112 . -15) (undo-tree-id53113 . -17) (undo-tree-id53114 . -17) (undo-tree-id53115 . -17) (undo-tree-id53116 . -17) (undo-tree-id53117 . -17) (undo-tree-id53118 . -17) (undo-tree-id53119 . -17) (undo-tree-id53120 . -17) (undo-tree-id53121 . -17) (undo-tree-id53122 . -17) (undo-tree-id53123 . -17) (undo-tree-id53124 . -17) (undo-tree-id53125 . -17) (undo-tree-id53126 . -17) (undo-tree-id53127 . -17) (undo-tree-id53128 . -17) (undo-tree-id53129 . -17) (undo-tree-id53130 . -17) (undo-tree-id53131 . -17) (undo-tree-id53132 . -17) (undo-tree-id53133 . -17) (undo-tree-id53134 . -17) (undo-tree-id53135 . -18) 7790 (t 25767 13051 177290 277000)) nil (25767 13070 337554 388000) 0 nil])
([nil nil ((7775 . 7776) (7773 . 7775)) nil (25767 13070 337328 384000) 0 nil])
([nil nil ((#("Let’s see how to build one.
First, note that a " 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 28 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 7777) (undo-tree-id53136 . -46) (undo-tree-id53137 . -46) (undo-tree-id53138 . -46) (undo-tree-id53139 . -28) (undo-tree-id53140 . -28) (undo-tree-id53141 . -28) (undo-tree-id53142 . -28) (undo-tree-id53143 . -28) (undo-tree-id53144 . -28) (undo-tree-id53145 . -28) (undo-tree-id53146 . -28) (undo-tree-id53147 . -28) (undo-tree-id53148 . -28) (undo-tree-id53149 . -28) (undo-tree-id53150 . -47) (undo-tree-id53151 . -46) (undo-tree-id53152 . -2) (undo-tree-id53153 . -2) (undo-tree-id53154 . -2) (undo-tree-id53155 . -2) (undo-tree-id53156 . -2) (undo-tree-id53157 . -2) (undo-tree-id53158 . -3) (undo-tree-id53159 . -3) (undo-tree-id53160 . -3) (undo-tree-id53161 . -3) (undo-tree-id53162 . -3) (undo-tree-id53163 . -3) (undo-tree-id53164 . -4) (undo-tree-id53165 . -4) (undo-tree-id53166 . -4) (undo-tree-id53167 . -4) (undo-tree-id53168 . -4) (undo-tree-id53169 . -4) (undo-tree-id53170 . -8) (undo-tree-id53171 . -8) (undo-tree-id53172 . -8) (undo-tree-id53173 . -8) (undo-tree-id53174 . -8) (undo-tree-id53175 . -8) (undo-tree-id53176 . -12) (undo-tree-id53177 . -12) (undo-tree-id53178 . -12) (undo-tree-id53179 . -12) (undo-tree-id53180 . -12) (undo-tree-id53181 . -12) (undo-tree-id53182 . -15) (undo-tree-id53183 . -15) (undo-tree-id53184 . -15) (undo-tree-id53185 . -15) (undo-tree-id53186 . -15) (undo-tree-id53187 . -15) (undo-tree-id53188 . -21) (undo-tree-id53189 . -21) (undo-tree-id53190 . -21) (undo-tree-id53191 . -21) (undo-tree-id53192 . -21) (undo-tree-id53193 . -21) (undo-tree-id53194 . -25) (undo-tree-id53195 . -25) (undo-tree-id53196 . -25) (undo-tree-id53197 . -25) (undo-tree-id53198 . -25) (undo-tree-id53199 . -25) (undo-tree-id53200 . -26) (undo-tree-id53201 . -26) (undo-tree-id53202 . -26) (undo-tree-id53203 . -26) (undo-tree-id53204 . -26) (undo-tree-id53205 . -26) (undo-tree-id53206 . -32) (undo-tree-id53207 . -32) (undo-tree-id53208 . -32) (undo-tree-id53209 . -32) (undo-tree-id53210 . -32) (undo-tree-id53211 . -32) (undo-tree-id53212 . -32) (undo-tree-id53213 . -32) (undo-tree-id53214 . -32) (undo-tree-id53215 . -32) (undo-tree-id53216 . -32) (undo-tree-id53217 . -32) (undo-tree-id53218 . -32) (undo-tree-id53219 . -32) (undo-tree-id53220 . -32) (undo-tree-id53221 . -32) (undo-tree-id53222 . -32) (undo-tree-id53223 . -32) (undo-tree-id53224 . -32) (undo-tree-id53225 . -32) (undo-tree-id53226 . -32) (undo-tree-id53227 . -33) (undo-tree-id53228 . -33) (undo-tree-id53229 . -33) (undo-tree-id53230 . -33) (undo-tree-id53231 . -33) (undo-tree-id53232 . -33) (undo-tree-id53233 . -33) (undo-tree-id53234 . -33) (undo-tree-id53235 . -33) (undo-tree-id53236 . -33) (undo-tree-id53237 . -33) (undo-tree-id53238 . -33) (undo-tree-id53239 . -33) (undo-tree-id53240 . -33) (undo-tree-id53241 . -33) (undo-tree-id53242 . -33) (undo-tree-id53243 . -33) (undo-tree-id53244 . -33) (undo-tree-id53245 . -33) (undo-tree-id53246 . -33) (undo-tree-id53247 . -33) (undo-tree-id53248 . -38) (undo-tree-id53249 . -38) (undo-tree-id53250 . -38) (undo-tree-id53251 . -38) (undo-tree-id53252 . -38) (undo-tree-id53253 . -38) (undo-tree-id53254 . -38) (undo-tree-id53255 . -38) (undo-tree-id53256 . -38) (undo-tree-id53257 . -38) (undo-tree-id53258 . -38) (undo-tree-id53259 . -38) (undo-tree-id53260 . -38) (undo-tree-id53261 . -38) (undo-tree-id53262 . -38) (undo-tree-id53263 . -38) (undo-tree-id53264 . -43) (undo-tree-id53265 . -43) (undo-tree-id53266 . -43) (undo-tree-id53267 . -43) (undo-tree-id53268 . -43) (undo-tree-id53269 . -43) (undo-tree-id53270 . -43) (undo-tree-id53271 . -43) (undo-tree-id53272 . -43) (undo-tree-id53273 . -43) (undo-tree-id53274 . -43) (undo-tree-id53275 . -43) (undo-tree-id53276 . -43) (undo-tree-id53277 . -43) (undo-tree-id53278 . -43) (undo-tree-id53279 . -43) (undo-tree-id53280 . -45) (undo-tree-id53281 . -45) (undo-tree-id53282 . -45) (undo-tree-id53283 . -45) (undo-tree-id53284 . -45) (undo-tree-id53285 . -45) (undo-tree-id53286 . -45) (undo-tree-id53287 . -45) (undo-tree-id53288 . -45) (undo-tree-id53289 . -45) (undo-tree-id53290 . -45) (undo-tree-id53291 . -45) (undo-tree-id53292 . -45) (undo-tree-id53293 . -45) (undo-tree-id53294 . -45) (undo-tree-id53295 . -45) (undo-tree-id53296 . -45) (undo-tree-id53297 . -45) (undo-tree-id53298 . -45) (undo-tree-id53299 . -45) (undo-tree-id53300 . -45) (undo-tree-id53301 . -45) (undo-tree-id53302 . -45) (undo-tree-id53303 . -45) (undo-tree-id53304 . -45) (undo-tree-id53305 . -45) (undo-tree-id53306 . -46) (undo-tree-id53307 . -46) (undo-tree-id53308 . -46) (undo-tree-id53309 . -46) (undo-tree-id53310 . -46) (undo-tree-id53311 . -46) (undo-tree-id53312 . -46) (undo-tree-id53313 . -46) (undo-tree-id53314 . -46) (undo-tree-id53315 . -46) (undo-tree-id53316 . -46) (undo-tree-id53317 . -46) (undo-tree-id53318 . -46) (undo-tree-id53319 . -46) (undo-tree-id53320 . -46) (undo-tree-id53321 . -46) (undo-tree-id53322 . -46) (undo-tree-id53323 . -46) (undo-tree-id53324 . -46) (undo-tree-id53325 . -46) (undo-tree-id53326 . -46) (undo-tree-id53327 . -46) (undo-tree-id53328 . -47) 7823 (t 25767 13070 401599 649000)) nil (25767 13083 797722 344000) 0 nil])
([nil nil ((7777 . 7778) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7777)) nil (25767 13083 797293 248000) 0 nil])
([nil nil ((7833 . 7835) (t 25767 13083 857816 888000)) nil (25767 13097 323747 119000) 0 nil])
([nil nil ((7907 . 7909) (t 25767 13097 386035 849000)) nil (25767 13111 92575 249000) 0 nil])
([nil nil ((7832 . 7833) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 7832) (undo-tree-id53339 . -1) (undo-tree-id53340 . -1) (undo-tree-id53341 . -1) (undo-tree-id53342 . -1) (undo-tree-id53343 . -1) (undo-tree-id53344 . -1) (undo-tree-id53345 . -1) (undo-tree-id53346 . -1) (undo-tree-id53347 . -1) (undo-tree-id53348 . -1) (undo-tree-id53349 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -7832) (undo-tree-id53350 . -1) 7777 (t 25767 13111 158259 322000)) nil (25767 13143 756149 841000) 0 nil])
([nil nil ((7924 . 7926) (7923 . 7924)) nil (25767 13143 756139 983000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7924) (undo-tree-id53329 . -2) (undo-tree-id53330 . -2) (undo-tree-id53331 . -2) (undo-tree-id53332 . -2) (undo-tree-id53333 . -2) (undo-tree-id53334 . -2) (undo-tree-id53335 . -2) (undo-tree-id53336 . -2) (undo-tree-id53337 . -2) (undo-tree-id53338 . -2) 7926 (7923 . 7926) 7906) nil (25767 13143 756135 789000) 0 nil])
([nil nil ((7990 . 7992) (t 25767 13143 818791 455000)) nil (25767 13216 720967 427000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9392 . 9393) (nil fontified nil 9354 . 9393) (nil fontified nil 9324 . 9354) (nil fontified nil 9314 . 9324) (nil fontified nil 9253 . 9314) (nil fontified nil 9230 . 9253) (nil fontified nil 9157 . 9230) (nil fontified nil 9130 . 9157) (nil fontified nil 9059 . 9130) (nil fontified nil 9038 . 9059) (nil fontified nil 8983 . 9038) (nil fontified nil 8916 . 8983) (nil fontified nil 8847 . 8916) (nil fontified nil 8771 . 8847) (nil fontified nil 8693 . 8771) (nil fontified nil 8623 . 8693) (nil fontified nil 8548 . 8623) (nil fontified nil 8478 . 8548) (nil fontified nil 8405 . 8478) (nil fontified nil 8332 . 8405) (nil fontified nil 8259 . 8332) (nil fontified nil 8191 . 8259) (nil fontified nil 8128 . 8191) (nil fontified nil 8059 . 8128) (nil fontified nil 7992 . 8059) (7992 . 9393)) nil (25767 13216 720965 870000) 0 nil])
([nil nil ((#("So the first thing we need to do " 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7927) (undo-tree-id53410 . -32) (undo-tree-id53411 . -32) (undo-tree-id53412 . -31) (undo-tree-id53413 . -32) (undo-tree-id53414 . -1) (undo-tree-id53415 . -1) (undo-tree-id53416 . -1) (undo-tree-id53417 . -1) (undo-tree-id53418 . -1) (undo-tree-id53419 . -1) (undo-tree-id53420 . -5) (undo-tree-id53421 . -5) (undo-tree-id53422 . -5) (undo-tree-id53423 . -5) (undo-tree-id53424 . -5) (undo-tree-id53425 . -5) (undo-tree-id53426 . -11) (undo-tree-id53427 . -11) (undo-tree-id53428 . -11) (undo-tree-id53429 . -11) (undo-tree-id53430 . -11) (undo-tree-id53431 . -11) (undo-tree-id53432 . -17) (undo-tree-id53433 . -17) (undo-tree-id53434 . -17) (undo-tree-id53435 . -17) (undo-tree-id53436 . -17) (undo-tree-id53437 . -17) (undo-tree-id53438 . -20) (undo-tree-id53439 . -20) (undo-tree-id53440 . -20) (undo-tree-id53441 . -20) (undo-tree-id53442 . -20) (undo-tree-id53443 . -20) (undo-tree-id53444 . -25) (undo-tree-id53445 . -25) (undo-tree-id53446 . -25) (undo-tree-id53447 . -25) (undo-tree-id53448 . -25) (undo-tree-id53449 . -25) (undo-tree-id53450 . -28) (undo-tree-id53451 . -28) (undo-tree-id53452 . -28) (undo-tree-id53453 . -28) (undo-tree-id53454 . -28) (undo-tree-id53455 . -28) (undo-tree-id53456 . -31) (undo-tree-id53457 . -31) (undo-tree-id53458 . -31) (undo-tree-id53459 . -31) (undo-tree-id53460 . -31) (undo-tree-id53461 . -31) (undo-tree-id53462 . -31) (undo-tree-id53463 . -31) (undo-tree-id53464 . -31) (undo-tree-id53465 . -31) (undo-tree-id53466 . -31) (undo-tree-id53467 . -31) (undo-tree-id53468 . -31) (undo-tree-id53469 . -31) (undo-tree-id53470 . -31) (undo-tree-id53471 . -31) (undo-tree-id53472 . -31) (undo-tree-id53473 . -31) (undo-tree-id53474 . -31) (undo-tree-id53475 . -31) (undo-tree-id53476 . -33) (undo-tree-id53477 . -32) (undo-tree-id53478 . -1) (undo-tree-id53479 . -1) (undo-tree-id53480 . -1) (undo-tree-id53481 . -1) (undo-tree-id53482 . -1) (undo-tree-id53483 . -1) (undo-tree-id53484 . -5) (undo-tree-id53485 . -5) (undo-tree-id53486 . -5) (undo-tree-id53487 . -5) (undo-tree-id53488 . -5) (undo-tree-id53489 . -5) (undo-tree-id53490 . -11) (undo-tree-id53491 . -11) (undo-tree-id53492 . -11) (undo-tree-id53493 . -11) (undo-tree-id53494 . -11) (undo-tree-id53495 . -11) (undo-tree-id53496 . -17) (undo-tree-id53497 . -17) (undo-tree-id53498 . -17) (undo-tree-id53499 . -17) (undo-tree-id53500 . -17) (undo-tree-id53501 . -17) (undo-tree-id53502 . -20) (undo-tree-id53503 . -20) (undo-tree-id53504 . -20) (undo-tree-id53505 . -20) (undo-tree-id53506 . -20) (undo-tree-id53507 . -20) (undo-tree-id53508 . -25) (undo-tree-id53509 . -25) (undo-tree-id53510 . -25) (undo-tree-id53511 . -25) (undo-tree-id53512 . -25) (undo-tree-id53513 . -25) (undo-tree-id53514 . -28) (undo-tree-id53515 . -28) (undo-tree-id53516 . -28) (undo-tree-id53517 . -28) (undo-tree-id53518 . -28) (undo-tree-id53519 . -28) (undo-tree-id53520 . -31) (undo-tree-id53521 . -31) (undo-tree-id53522 . -31) (undo-tree-id53523 . -31) (undo-tree-id53524 . -31) (undo-tree-id53525 . -31) (undo-tree-id53526 . -33) (undo-tree-id53527 . -33) (undo-tree-id53528 . -33) (undo-tree-id53529 . -33) (undo-tree-id53530 . -33) (undo-tree-id53531 . -33) (undo-tree-id53532 . -32) (undo-tree-id53533 . -32) (undo-tree-id53534 . -32) (undo-tree-id53535 . -32) (undo-tree-id53536 . -32) (undo-tree-id53537 . -32) (undo-tree-id53538 . -32) (undo-tree-id53539 . -33) 7959) nil (25767 13216 720958 380000) 0 nil])
([nil nil ((7927 . 7928) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7927)) nil (25767 13216 720816 958000) 0 nil])
([nil nil ((7956 . 7957) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7956) (undo-tree-id53351 . -1) (undo-tree-id53352 . -1) (undo-tree-id53353 . -1) (undo-tree-id53354 . -1) (undo-tree-id53355 . -1) (undo-tree-id53356 . -1) (undo-tree-id53357 . -1) (undo-tree-id53358 . -1) (undo-tree-id53359 . -1) (undo-tree-id53360 . -1) (undo-tree-id53361 . -1) (undo-tree-id53362 . -1) (undo-tree-id53363 . -1) (undo-tree-id53364 . -1) (undo-tree-id53365 . -1) (undo-tree-id53366 . -1) (undo-tree-id53367 . -1) (undo-tree-id53368 . -1) (undo-tree-id53369 . -1) (undo-tree-id53370 . -1) (undo-tree-id53371 . -1) (undo-tree-id53372 . -1) (undo-tree-id53373 . -1) (undo-tree-id53374 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7956) (undo-tree-id53375 . -1) (undo-tree-id53376 . -1) (undo-tree-id53377 . -1) (undo-tree-id53378 . -1) (undo-tree-id53379 . -1) (undo-tree-id53380 . -1) (undo-tree-id53381 . -1) (undo-tree-id53382 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -7956) (undo-tree-id53383 . -1) (undo-tree-id53384 . -1) (undo-tree-id53385 . -1) (undo-tree-id53386 . -1) (undo-tree-id53387 . -1) (undo-tree-id53388 . -1) (undo-tree-id53389 . -1) (undo-tree-id53390 . -1) (undo-tree-id53391 . -1) (undo-tree-id53392 . -1) (undo-tree-id53393 . -1) (undo-tree-id53394 . -1) (undo-tree-id53395 . -1) (undo-tree-id53396 . -1) (undo-tree-id53397 . -1) (undo-tree-id53398 . -1) (undo-tree-id53399 . -1) (undo-tree-id53400 . -1) (undo-tree-id53401 . -1) (undo-tree-id53402 . -1) (undo-tree-id53403 . -1) (undo-tree-id53404 . -1) (undo-tree-id53405 . -1) (undo-tree-id53406 . -1) (undo-tree-id53407 . -1) (undo-tree-id53408 . -1) (undo-tree-id53409 . -1) 7927) nil (25767 13216 720813 33000) 0 nil])
([nil nil ((9358 . 9359)) nil (25767 13216 720763 193000) 0 nil])
([nil nil ((8023 . 8024) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8023) (undo-tree-id53540 . -1) 7954 (t 25767 13216 783990 498000)) nil (25767 13222 628006 134000) 0 nil])
([nil nil ((7927 . 7928) (#("To build a stateful RNN is to u" 0 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 29 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7927) (undo-tree-id53589 . -30) (undo-tree-id53590 . -30) (undo-tree-id53591 . -29) (undo-tree-id53592 . -29) (undo-tree-id53593 . -30) (undo-tree-id53594 . -31) (undo-tree-id53595 . -30) (undo-tree-id53596 . -1) (undo-tree-id53597 . -1) (undo-tree-id53598 . -1) (undo-tree-id53599 . -1) (undo-tree-id53600 . -1) (undo-tree-id53601 . -1) (undo-tree-id53602 . -1) (undo-tree-id53603 . -1) (undo-tree-id53604 . -1) (undo-tree-id53605 . -1) (undo-tree-id53606 . -1) (undo-tree-id53607 . -1) (undo-tree-id53608 . -1) (undo-tree-id53609 . -1) (undo-tree-id53610 . -1) (undo-tree-id53611 . -1) (undo-tree-id53612 . -7) (undo-tree-id53613 . -7) (undo-tree-id53614 . -7) (undo-tree-id53615 . -7) (undo-tree-id53616 . -7) (undo-tree-id53617 . -7) (undo-tree-id53618 . -7) (undo-tree-id53619 . -7) (undo-tree-id53620 . -7) (undo-tree-id53621 . -7) (undo-tree-id53622 . -7) (undo-tree-id53623 . -7) (undo-tree-id53624 . -7) (undo-tree-id53625 . -7) (undo-tree-id53626 . -7) (undo-tree-id53627 . -7) (undo-tree-id53628 . -9) (undo-tree-id53629 . -9) (undo-tree-id53630 . -9) (undo-tree-id53631 . -9) (undo-tree-id53632 . -9) (undo-tree-id53633 . -9) (undo-tree-id53634 . -9) (undo-tree-id53635 . -9) (undo-tree-id53636 . -9) (undo-tree-id53637 . -9) (undo-tree-id53638 . -9) (undo-tree-id53639 . -9) (undo-tree-id53640 . -9) (undo-tree-id53641 . -9) (undo-tree-id53642 . -9) (undo-tree-id53643 . -9) (undo-tree-id53644 . 20) (undo-tree-id53645 . -19) (undo-tree-id53646 . -18) (undo-tree-id53647 . -18) (undo-tree-id53648 . -18) (undo-tree-id53649 . -18) (undo-tree-id53650 . -18) (undo-tree-id53651 . -18) (undo-tree-id53652 . -18) (undo-tree-id53653 . -18) (undo-tree-id53654 . -18) (undo-tree-id53655 . -18) (undo-tree-id53656 . -18) (undo-tree-id53657 . -18) (undo-tree-id53658 . -18) (undo-tree-id53659 . -18) (undo-tree-id53660 . -18) (undo-tree-id53661 . -18) (undo-tree-id53662 . 11) (undo-tree-id53663 . -23) (undo-tree-id53664 . -22) (undo-tree-id53665 . -22) (undo-tree-id53666 . -22) (undo-tree-id53667 . -22) (undo-tree-id53668 . -22) (undo-tree-id53669 . -22) (undo-tree-id53670 . -22) (undo-tree-id53671 . -22) (undo-tree-id53672 . -22) (undo-tree-id53673 . -22) (undo-tree-id53674 . -22) (undo-tree-id53675 . -22) (undo-tree-id53676 . -22) (undo-tree-id53677 . -22) (undo-tree-id53678 . -22) (undo-tree-id53679 . -22) (undo-tree-id53680 . -25) (undo-tree-id53681 . -25) (undo-tree-id53682 . -25) (undo-tree-id53683 . -25) (undo-tree-id53684 . -25) (undo-tree-id53685 . -25) (undo-tree-id53686 . -25) (undo-tree-id53687 . -25) (undo-tree-id53688 . -25) (undo-tree-id53689 . -25) (undo-tree-id53690 . -25) (undo-tree-id53691 . -25) (undo-tree-id53692 . -25) (undo-tree-id53693 . -25) (undo-tree-id53694 . -25) (undo-tree-id53695 . -25) (undo-tree-id53696 . -28) (undo-tree-id53697 . -28) (undo-tree-id53698 . -28) (undo-tree-id53699 . -28) (undo-tree-id53700 . -28) (undo-tree-id53701 . -28) (undo-tree-id53702 . -28) (undo-tree-id53703 . -28) (undo-tree-id53704 . -28) (undo-tree-id53705 . -28) (undo-tree-id53706 . -28) (undo-tree-id53707 . -28) (undo-tree-id53708 . -28) (undo-tree-id53709 . -28) (undo-tree-id53710 . -28) (undo-tree-id53711 . -28) (undo-tree-id53712 . -31) (undo-tree-id53713 . -31) (undo-tree-id53714 . -31) (undo-tree-id53715 . -31) (undo-tree-id53716 . -31) (undo-tree-id53717 . -31) (undo-tree-id53718 . -31) (undo-tree-id53719 . -31) (undo-tree-id53720 . -31) (undo-tree-id53721 . -31) (undo-tree-id53722 . -31) (undo-tree-id53723 . -31) (undo-tree-id53724 . -31) (undo-tree-id53725 . -31) (undo-tree-id53726 . -31) (undo-tree-id53727 . -31) (undo-tree-id53728 . -30) (undo-tree-id53729 . -30) (undo-tree-id53730 . -30) (undo-tree-id53731 . -30) (undo-tree-id53732 . -30) (undo-tree-id53733 . -30) (undo-tree-id53734 . -30) (undo-tree-id53735 . -30) (undo-tree-id53736 . -30) (undo-tree-id53737 . -30) (undo-tree-id53738 . -30) (undo-tree-id53739 . -30) (undo-tree-id53740 . -30) (undo-tree-id53741 . -30) (undo-tree-id53742 . -30) (undo-tree-id53743 . -30) (undo-tree-id53744 . -30) (undo-tree-id53745 . -30) (undo-tree-id53746 . -30) (undo-tree-id53747 . -30) (undo-tree-id53748 . -30) (undo-tree-id53749 . -30) (undo-tree-id53750 . -31) (undo-tree-id53751 . -31) (undo-tree-id53752 . -31) 7957 (t 25767 13222 692273 948000)) nil (25767 13268 901007 429000) 0 nil])
([nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 7977) (undo-tree-id53585 . 1) (undo-tree-id53586 . -1) (undo-tree-id53587 . -1) (undo-tree-id53588 . -1)) nil (25767 13268 900795 656000) 0 nil])
([nil nil ((#("we used to train stateless RNNs)." 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8028) (undo-tree-id53541 . -32) (undo-tree-id53542 . 6) (undo-tree-id53543 . -31) (undo-tree-id53544 . -32) (undo-tree-id53545 . -32) (undo-tree-id53546 . -32) (undo-tree-id53547 . -32) (undo-tree-id53548 . -32) (undo-tree-id53549 . -32) (undo-tree-id53550 . -32) (undo-tree-id53551 . -32) (undo-tree-id53552 . -32) (undo-tree-id53553 . -32) (undo-tree-id53554 . -32) (undo-tree-id53555 . -32) (undo-tree-id53556 . -32) (undo-tree-id53557 . -32) (undo-tree-id53558 . -32) (undo-tree-id53559 . -32) (undo-tree-id53560 . -32) (undo-tree-id53561 . -32) (undo-tree-id53562 . -32) (undo-tree-id53563 . -32) (undo-tree-id53564 . -32) (undo-tree-id53565 . -32) (undo-tree-id53566 . -32) (undo-tree-id53567 . -32) (undo-tree-id53568 . -32) (undo-tree-id53569 . -32) (undo-tree-id53570 . -32) (undo-tree-id53571 . -32) (undo-tree-id53572 . -32) (undo-tree-id53573 . -32) (undo-tree-id53574 . -32) (undo-tree-id53575 . -32) (undo-tree-id53576 . -32) (undo-tree-id53577 . -32) (undo-tree-id53578 . -32) (undo-tree-id53579 . -32) (undo-tree-id53580 . -32) (undo-tree-id53581 . -32) (undo-tree-id53582 . -32) (undo-tree-id53583 . -33) (undo-tree-id53584 . -33)) nil (25767 13268 900788 572000) 0 nil])
([nil nil ((8028 . 8029) (8027 . 8028)) nil (25767 13268 900134 751000) 0 nil])
([nil nil ((8031 . 8032) (#("When creating the Dataset, we must therefore" 0 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8031) (undo-tree-id53753 . -43) (undo-tree-id53754 . -43) (undo-tree-id53755 . -43) (undo-tree-id53756 . -44) (undo-tree-id53757 . -43) (undo-tree-id53758 . -3) (undo-tree-id53759 . -3) (undo-tree-id53760 . -3) (undo-tree-id53761 . -3) (undo-tree-id53762 . -3) (undo-tree-id53763 . -3) (undo-tree-id53764 . -12) (undo-tree-id53765 . -12) (undo-tree-id53766 . -12) (undo-tree-id53767 . -12) (undo-tree-id53768 . -12) (undo-tree-id53769 . -12) (undo-tree-id53770 . -16) (undo-tree-id53771 . -16) (undo-tree-id53772 . -16) (undo-tree-id53773 . -16) (undo-tree-id53774 . -16) (undo-tree-id53775 . -16) (undo-tree-id53776 . 26) (undo-tree-id53777 . -25) (undo-tree-id53778 . -24) (undo-tree-id53779 . -24) (undo-tree-id53780 . -24) (undo-tree-id53781 . -24) (undo-tree-id53782 . -24) (undo-tree-id53783 . -24) (undo-tree-id53784 . -25) (undo-tree-id53785 . -25) (undo-tree-id53786 . -25) (undo-tree-id53787 . -25) (undo-tree-id53788 . -25) (undo-tree-id53789 . -25) (undo-tree-id53790 . -28) (undo-tree-id53791 . -28) (undo-tree-id53792 . -28) (undo-tree-id53793 . -28) (undo-tree-id53794 . -28) (undo-tree-id53795 . -28) (undo-tree-id53796 . -33) (undo-tree-id53797 . -33) (undo-tree-id53798 . -33) (undo-tree-id53799 . -33) (undo-tree-id53800 . -33) (undo-tree-id53801 . -33) (undo-tree-id53802 . -43) (undo-tree-id53803 . -43) (undo-tree-id53804 . -43) (undo-tree-id53805 . -43) (undo-tree-id53806 . -43) (undo-tree-id53807 . -43) (undo-tree-id53808 . -43) (undo-tree-id53809 . -44) (undo-tree-id53810 . -44) (undo-tree-id53811 . -44) 8074 (t 25767 13268 963243 400000)) nil (25767 13291 139262 595000) 0 nil])
([nil nil ((8033 . 8034) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8033)) nil (25767 13291 139019 139000) 0 nil])
([nil nil ((8050 . 8051) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8050) (undo-tree-id53823 . -1) 8033 (t 25767 13291 204611 383000)) nil (25767 13301 618259 427000) 0 nil])
([nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8051) (undo-tree-id53819 . 1) (undo-tree-id53820 . -1) (undo-tree-id53821 . -1) (undo-tree-id53822 . -1)) nil (25767 13301 618257 140000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8069) (undo-tree-id53815 . 1) (undo-tree-id53816 . -1) (undo-tree-id53817 . -1) (undo-tree-id53818 . -1)) nil (25767 13301 618589 587000) 0 nil])
([nil nil ((#(" when calling the window() method. Moreover, we" 0 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8069) (undo-tree-id53993 . -46) (undo-tree-id53994 . -47) (undo-tree-id53995 . -47)) nil (25767 13351 419988 100000) 0 nil] [nil nil ((#(" when calling the window() method. Moreover, we" 0 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8069) (undo-tree-id53812 . -46) (undo-tree-id53813 . -47) (undo-tree-id53814 . -47)) ((8069 . 8116)) (25767 13301 618245 263000) 0 nil])
([nil nil ((8071 . 8073) (8070 . 8071)) nil (25767 13351 419984 428000) 0 nil])
nil
([nil nil ((#("must obviously" 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8073) (undo-tree-id53953 . -13) (undo-tree-id53954 . -13) (undo-tree-id53955 . 14) (undo-tree-id53956 . -13) (undo-tree-id53957 . -14) (undo-tree-id53958 . -13) (undo-tree-id53959 . -3) (undo-tree-id53960 . -3) (undo-tree-id53961 . -3) (undo-tree-id53962 . -3) (undo-tree-id53963 . -3) (undo-tree-id53964 . -3) (undo-tree-id53965 . -3) (undo-tree-id53966 . -3) (undo-tree-id53967 . -3) (undo-tree-id53968 . -3) (undo-tree-id53969 . -3) (undo-tree-id53970 . -3) (undo-tree-id53971 . -3) (undo-tree-id53972 . -3) (undo-tree-id53973 . -3) (undo-tree-id53974 . -3) (undo-tree-id53975 . -13) (undo-tree-id53976 . -13) (undo-tree-id53977 . -13) (undo-tree-id53978 . -13) (undo-tree-id53979 . -13) (undo-tree-id53980 . -13) (undo-tree-id53981 . -13) (undo-tree-id53982 . -13) (undo-tree-id53983 . -13) (undo-tree-id53984 . -13) (undo-tree-id53985 . -13) (undo-tree-id53986 . -13) (undo-tree-id53987 . -13) (undo-tree-id53988 . -13) (undo-tree-id53989 . -13) (undo-tree-id53990 . -13) (undo-tree-id53991 . -13) (undo-tree-id53992 . -14) 8086) nil (25767 13351 419980 702000) 0 nil])
([nil nil ((8070 . 8071)) nil (25767 13351 418773 178000) 0 nil])
([nil nil ((#("d" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8070) (undo-tree-id53921 . -1) (undo-tree-id53922 . -1) (undo-tree-id53923 . -1) (undo-tree-id53924 . -1) (undo-tree-id53925 . -1) (undo-tree-id53926 . -1) (undo-tree-id53927 . -1) (undo-tree-id53928 . -1) (undo-tree-id53929 . -1) (undo-tree-id53930 . -1) (undo-tree-id53931 . -1) (undo-tree-id53932 . -1) (undo-tree-id53933 . -1) (undo-tree-id53934 . -1) (undo-tree-id53935 . -1) (undo-tree-id53936 . -1) (undo-tree-id53937 . -1) (undo-tree-id53938 . -1) (undo-tree-id53939 . -1) (undo-tree-id53940 . -1) (undo-tree-id53941 . -1) (undo-tree-id53942 . -1) (undo-tree-id53943 . -1) (undo-tree-id53944 . -1) (undo-tree-id53945 . -1) (undo-tree-id53946 . -1) (undo-tree-id53947 . -1) (undo-tree-id53948 . -1) (undo-tree-id53949 . -1) (undo-tree-id53950 . -1) (undo-tree-id53951 . -1) (undo-tree-id53952 . -1)) nil (25767 13351 418771 485000) 0 nil])
([nil nil ((#("C" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8073) (undo-tree-id53901 . -1) (undo-tree-id53902 . -1) (undo-tree-id53903 . -1) (undo-tree-id53904 . -1) (undo-tree-id53905 . -1) (undo-tree-id53906 . -1) (undo-tree-id53907 . -1) (undo-tree-id53908 . -1) 8074 (8073 . 8074) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8073) (undo-tree-id53909 . 1) (undo-tree-id53910 . -1) (undo-tree-id53911 . -1) (undo-tree-id53912 . -1) (undo-tree-id53913 . -1) (undo-tree-id53914 . -1) (undo-tree-id53915 . -1) (undo-tree-id53916 . -1) (undo-tree-id53917 . -1) (undo-tree-id53918 . -1) (undo-tree-id53919 . -1) (undo-tree-id53920 . -1) 8074) nil (25767 13351 418749 710000) 0 nil])
([nil nil ((8073 . 8075) (8072 . 8073)) nil (25767 13351 418735 433000) 0 nil])
([nil nil ((8107 . 8109)) nil (25767 13351 418734 328000) 0 nil])
([nil nil ((#("Unfortunately, " 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8109) (undo-tree-id53884 . -14) (undo-tree-id53885 . -14) (undo-tree-id53886 . 15) (undo-tree-id53887 . -14) (undo-tree-id53888 . -15) (undo-tree-id53889 . -14) (undo-tree-id53890 . -12) (undo-tree-id53891 . -12) (undo-tree-id53892 . -12) (undo-tree-id53893 . -12) (undo-tree-id53894 . -12) (undo-tree-id53895 . -12) (undo-tree-id53896 . -13) (undo-tree-id53897 . -15) (undo-tree-id53898 . -14) (undo-tree-id53899 . -14) (undo-tree-id53900 . -15) 8123) nil (25767 13351 418732 998000) 0 nil])
([nil nil ((8109 . 8111)) nil (25767 13351 418720 395000) 0 nil])
([nil nil ((8111 . 8112) (#("b" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8111)) nil (25767 13351 418719 246000) 0 nil])
([nil nil ((8195 . 8196) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8195) (undo-tree-id53882 . -1) (8122 . 8123) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8122) (undo-tree-id53883 . -1) 8111) nil (25767 13351 418717 824000) 0 nil])
([nil nil ((#("much" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8123) (undo-tree-id53879 . -3) (undo-tree-id53880 . -4) (undo-tree-id53881 . -4)) nil (25767 13351 418714 916000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 8122) (undo-tree-id53826 . -1) (undo-tree-id53827 . -1) (undo-tree-id53828 . -1) (undo-tree-id53829 . -1) (undo-tree-id53830 . -1) (undo-tree-id53831 . -1) (undo-tree-id53832 . -1) (undo-tree-id53833 . -1) (undo-tree-id53834 . -1) (undo-tree-id53835 . -1) (undo-tree-id53836 . -1) (undo-tree-id53837 . -1) (undo-tree-id53838 . -1) (undo-tree-id53839 . -1) (undo-tree-id53840 . -1) (undo-tree-id53841 . -1) (undo-tree-id53842 . -1) (undo-tree-id53843 . -1) (undo-tree-id53844 . -1) (undo-tree-id53845 . -1) (undo-tree-id53846 . -1) (undo-tree-id53847 . -1) (undo-tree-id53848 . -1) (undo-tree-id53849 . -1) (undo-tree-id53850 . -1) (undo-tree-id53851 . -1) (undo-tree-id53852 . -1) (undo-tree-id53853 . -1) (undo-tree-id53854 . -1) (undo-tree-id53855 . -1) (undo-tree-id53856 . -1) (undo-tree-id53857 . -1) (undo-tree-id53858 . -1) (undo-tree-id53859 . -1) (undo-tree-id53860 . -1) (undo-tree-id53861 . -1) (undo-tree-id53862 . -1) (undo-tree-id53863 . -1) (undo-tree-id53864 . -1) (undo-tree-id53865 . -1) (undo-tree-id53866 . -1) (undo-tree-id53867 . -1) (undo-tree-id53868 . -1) (undo-tree-id53869 . -1) (undo-tree-id53870 . -1) (undo-tree-id53871 . -1) (undo-tree-id53872 . -1) (undo-tree-id53873 . -1) (undo-tree-id53874 . -1) (undo-tree-id53875 . -1) (undo-tree-id53876 . -1) (undo-tree-id53877 . -1) (undo-tree-id53878 . -1)) nil (25767 13351 421109 645000) 0 nil])
([nil nil ((#("than it is for a stateless RNN" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 17 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8174) (undo-tree-id54285 . -29) (undo-tree-id54286 . -29) (undo-tree-id54287 . -29) (undo-tree-id54288 . -6) (undo-tree-id54289 . -30) (undo-tree-id54290 . -29) (undo-tree-id54291 . -3) (undo-tree-id54292 . -3) (undo-tree-id54293 . -3) (undo-tree-id54294 . -3) (undo-tree-id54295 . -3) (undo-tree-id54296 . -3) (undo-tree-id54297 . -3) (undo-tree-id54298 . -3) (undo-tree-id54299 . -3) (undo-tree-id54300 . -3) (undo-tree-id54301 . -3) (undo-tree-id54302 . -3) (undo-tree-id54303 . -3) (undo-tree-id54304 . -3) (undo-tree-id54305 . -3) (undo-tree-id54306 . -3) (undo-tree-id54307 . -3) (undo-tree-id54308 . -3) (undo-tree-id54309 . -3) (undo-tree-id54310 . -3) (undo-tree-id54311 . -3) (undo-tree-id54312 . -6) (undo-tree-id54313 . -6) (undo-tree-id54314 . -6) (undo-tree-id54315 . -6) (undo-tree-id54316 . -6) (undo-tree-id54317 . -6) (undo-tree-id54318 . -6) (undo-tree-id54319 . -6) (undo-tree-id54320 . -6) (undo-tree-id54321 . -6) (undo-tree-id54322 . -6) (undo-tree-id54323 . -6) (undo-tree-id54324 . -6) (undo-tree-id54325 . -6) (undo-tree-id54326 . -6) (undo-tree-id54327 . -6) (undo-tree-id54328 . -9) (undo-tree-id54329 . -9) (undo-tree-id54330 . -9) (undo-tree-id54331 . -9) (undo-tree-id54332 . -9) (undo-tree-id54333 . -9) (undo-tree-id54334 . -9) (undo-tree-id54335 . -9) (undo-tree-id54336 . -9) (undo-tree-id54337 . -9) (undo-tree-id54338 . -9) (undo-tree-id54339 . -9) (undo-tree-id54340 . -9) (undo-tree-id54341 . -9) (undo-tree-id54342 . -9) (undo-tree-id54343 . -9) (undo-tree-id54344 . -13) (undo-tree-id54345 . -13) (undo-tree-id54346 . -13) (undo-tree-id54347 . -13) (undo-tree-id54348 . -13) (undo-tree-id54349 . -13) (undo-tree-id54350 . -13) (undo-tree-id54351 . -13) (undo-tree-id54352 . -13) (undo-tree-id54353 . -13) (undo-tree-id54354 . -13) (undo-tree-id54355 . -13) (undo-tree-id54356 . -13) (undo-tree-id54357 . -13) (undo-tree-id54358 . -13) (undo-tree-id54359 . -13) (undo-tree-id54360 . -15) (undo-tree-id54361 . -15) (undo-tree-id54362 . -15) (undo-tree-id54363 . -15) (undo-tree-id54364 . -15) (undo-tree-id54365 . -15) (undo-tree-id54366 . -15) (undo-tree-id54367 . -15) (undo-tree-id54368 . -15) (undo-tree-id54369 . -15) (undo-tree-id54370 . -15) (undo-tree-id54371 . -15) (undo-tree-id54372 . -15) (undo-tree-id54373 . -15) (undo-tree-id54374 . -15) (undo-tree-id54375 . -15) (undo-tree-id54376 . -25) (undo-tree-id54377 . -25) (undo-tree-id54378 . -25) (undo-tree-id54379 . -25) (undo-tree-id54380 . -25) (undo-tree-id54381 . -25) (undo-tree-id54382 . -25) (undo-tree-id54383 . -25) (undo-tree-id54384 . -25) (undo-tree-id54385 . -25) (undo-tree-id54386 . -25) (undo-tree-id54387 . -25) (undo-tree-id54388 . -25) (undo-tree-id54389 . -25) (undo-tree-id54390 . -25) (undo-tree-id54391 . -25) (undo-tree-id54392 . -25) (undo-tree-id54393 . -25) (undo-tree-id54394 . -25) (undo-tree-id54395 . -25) (undo-tree-id54396 . -25) (undo-tree-id54397 . -25) (undo-tree-id54398 . -25) (undo-tree-id54399 . -25) (undo-tree-id54400 . -25) (undo-tree-id54401 . -25) (undo-tree-id54402 . 3) (undo-tree-id54403 . -30) (undo-tree-id54404 . -29) (undo-tree-id54405 . -29) (undo-tree-id54406 . -29) (undo-tree-id54407 . -29) (undo-tree-id54408 . -29) (undo-tree-id54409 . -29) (undo-tree-id54410 . -29) (undo-tree-id54411 . -29) (undo-tree-id54412 . -29) (undo-tree-id54413 . -29) (undo-tree-id54414 . -29) (undo-tree-id54415 . -29) (undo-tree-id54416 . -29) (undo-tree-id54417 . -29) (undo-tree-id54418 . -29) (undo-tree-id54419 . -29) (undo-tree-id54420 . -29) (undo-tree-id54421 . -29) (undo-tree-id54422 . -29) (undo-tree-id54423 . -29) (undo-tree-id54424 . -29) (undo-tree-id54425 . -29) (undo-tree-id54426 . -30) 8203) nil (25767 13396 793958 540000) 0 nil] [nil nil ((#("than" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8174) (undo-tree-id53824 . -3) (undo-tree-id53825 . -4)) ((8174 . 8178)) (25767 13351 418669 514000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8173) (undo-tree-id54085 . -1) (undo-tree-id54086 . -1) (undo-tree-id54087 . -1) (undo-tree-id54088 . -1) (undo-tree-id54089 . -1) (undo-tree-id54090 . -1) (undo-tree-id54091 . -1) (undo-tree-id54092 . -1) (undo-tree-id54093 . -1) (undo-tree-id54094 . -1) (undo-tree-id54095 . -1) (undo-tree-id54096 . -1) (undo-tree-id54097 . -1) (undo-tree-id54098 . -1) (undo-tree-id54099 . -1) (undo-tree-id54100 . -1) (undo-tree-id54101 . -1) (undo-tree-id54102 . -1) (undo-tree-id54103 . -1) (undo-tree-id54104 . -1) (undo-tree-id54105 . -1) (undo-tree-id54106 . -1) (undo-tree-id54107 . -1) (undo-tree-id54108 . -1) (undo-tree-id54109 . -1) (undo-tree-id54110 . -1) (undo-tree-id54111 . -1) (undo-tree-id54112 . -1) (undo-tree-id54113 . -1) (undo-tree-id54114 . -1) (undo-tree-id54115 . -1) (undo-tree-id54116 . -1) (undo-tree-id54117 . -1) (undo-tree-id54118 . -1) (undo-tree-id54119 . -1) (undo-tree-id54120 . -1) (undo-tree-id54121 . -1) (undo-tree-id54122 . -1) (undo-tree-id54123 . -1) (undo-tree-id54124 . -1) (undo-tree-id54125 . -1) (undo-tree-id54126 . -1) (undo-tree-id54127 . -1) (undo-tree-id54128 . -1) (undo-tree-id54129 . -1) (undo-tree-id54130 . -1) (undo-tree-id54131 . -1) (undo-tree-id54132 . -1) (undo-tree-id54133 . -1) (undo-tree-id54134 . -1) (undo-tree-id54135 . -1) (undo-tree-id54136 . -1) (undo-tree-id54137 . -1) (undo-tree-id54138 . -1) (undo-tree-id54139 . -1) (undo-tree-id54140 . -1) (undo-tree-id54141 . -1) (undo-tree-id54142 . -1) (undo-tree-id54143 . -1) (undo-tree-id54144 . -1) (undo-tree-id54145 . -1) (undo-tree-id54146 . -1) (undo-tree-id54147 . -1) (undo-tree-id54148 . -1) (undo-tree-id54149 . -1) (undo-tree-id54150 . -1) (undo-tree-id54151 . -1) (undo-tree-id54152 . -1) (undo-tree-id54153 . -1) (undo-tree-id54154 . -1) (undo-tree-id54155 . -1) (undo-tree-id54156 . -1) (undo-tree-id54157 . -1) (undo-tree-id54158 . -1) (undo-tree-id54159 . -1) (undo-tree-id54160 . -1) (undo-tree-id54161 . -1) (undo-tree-id54162 . -1) (undo-tree-id54163 . -1) (undo-tree-id54164 . -1) (undo-tree-id54165 . -1) (undo-tree-id54166 . -1) (undo-tree-id54167 . -1) (undo-tree-id54168 . -1) (undo-tree-id54169 . -1) (undo-tree-id54170 . -1) (undo-tree-id54171 . -1) (undo-tree-id54172 . -1) (undo-tree-id54173 . -1) (undo-tree-id54174 . -1) (undo-tree-id54175 . -1) (undo-tree-id54176 . -1) (undo-tree-id54177 . -1) (undo-tree-id54178 . -1) (undo-tree-id54179 . -1) (undo-tree-id54180 . -1) (undo-tree-id54181 . -1) (undo-tree-id54182 . -1) (undo-tree-id54183 . -1) (undo-tree-id54184 . -1) (undo-tree-id54185 . -1) (undo-tree-id54186 . -1) (undo-tree-id54187 . -1) (undo-tree-id54188 . -1) (undo-tree-id54189 . -1) (undo-tree-id54190 . -1) (undo-tree-id54191 . -1) (undo-tree-id54192 . -1) (undo-tree-id54193 . -1) (undo-tree-id54194 . -1) (undo-tree-id54195 . -1) (undo-tree-id54196 . -1) (undo-tree-id54197 . -1) (undo-tree-id54198 . -1) (undo-tree-id54199 . -1) (undo-tree-id54200 . -1) (undo-tree-id54201 . -1) (undo-tree-id54202 . -1) (undo-tree-id54203 . -1) (undo-tree-id54204 . -1) (undo-tree-id54205 . -1) (undo-tree-id54206 . -1) (undo-tree-id54207 . -1) (undo-tree-id54208 . -1) (undo-tree-id54209 . -1) (undo-tree-id54210 . -1) (undo-tree-id54211 . -1) (undo-tree-id54212 . -1) (undo-tree-id54213 . -1) (undo-tree-id54214 . -1) (undo-tree-id54215 . -1) (undo-tree-id54216 . -1) (undo-tree-id54217 . -1) (undo-tree-id54218 . -1) (undo-tree-id54219 . -1) (undo-tree-id54220 . -1) (undo-tree-id54221 . -1) (undo-tree-id54222 . -1) (undo-tree-id54223 . -1) (undo-tree-id54224 . -1) (undo-tree-id54225 . -1) (undo-tree-id54226 . -1) (undo-tree-id54227 . -1) (undo-tree-id54228 . -1) (undo-tree-id54229 . -1) (undo-tree-id54230 . -1) (undo-tree-id54231 . -1) (undo-tree-id54232 . -1) (undo-tree-id54233 . -1) (undo-tree-id54234 . -1) (undo-tree-id54235 . -1) (undo-tree-id54236 . -1) (undo-tree-id54237 . -1) (undo-tree-id54238 . -1) (undo-tree-id54239 . -1) (undo-tree-id54240 . -1) (undo-tree-id54241 . -1) (undo-tree-id54242 . -1) (undo-tree-id54243 . -1) (undo-tree-id54244 . -1) (undo-tree-id54245 . -1) (undo-tree-id54246 . -1) (undo-tree-id54247 . -1) (undo-tree-id54248 . -1) (undo-tree-id54249 . -1) (undo-tree-id54250 . -1) (undo-tree-id54251 . -1) (undo-tree-id54252 . -1) (undo-tree-id54253 . -1) (undo-tree-id54254 . -1) (undo-tree-id54255 . -1) (undo-tree-id54256 . -1) (undo-tree-id54257 . -1) (undo-tree-id54258 . -1) (undo-tree-id54259 . -1) (undo-tree-id54260 . -1) (undo-tree-id54261 . -1) (undo-tree-id54262 . -1) (undo-tree-id54263 . -1) (undo-tree-id54264 . -1) (undo-tree-id54265 . -1) (undo-tree-id54266 . -1) (undo-tree-id54267 . -1) (undo-tree-id54268 . -1) (undo-tree-id54269 . -1) (undo-tree-id54270 . -1) (undo-tree-id54271 . -1) (undo-tree-id54272 . -1) (undo-tree-id54273 . -1) (undo-tree-id54274 . -1) (undo-tree-id54275 . -1) (undo-tree-id54276 . -1) (undo-tree-id54277 . -1) (undo-tree-id54278 . -1) (undo-tree-id54279 . -1) (undo-tree-id54280 . -1) (undo-tree-id54281 . -1) (undo-tree-id54282 . -1) (undo-tree-id54283 . -1) (undo-tree-id54284 . -1)) nil (25767 13396 793361 804000) 0 nil])
nil
([nil nil ((8174 . 8180)) nil (25767 13396 793160 888000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8176) (undo-tree-id54071 . -1) (undo-tree-id54072 . -1) (undo-tree-id54073 . -1) (undo-tree-id54074 . -1) (undo-tree-id54075 . -1) (undo-tree-id54076 . -1) (undo-tree-id54077 . -1) (undo-tree-id54078 . -1) (undo-tree-id54079 . -1) (undo-tree-id54080 . -1) (undo-tree-id54081 . -1) (undo-tree-id54082 . -1) (undo-tree-id54083 . -1) (undo-tree-id54084 . -1)) nil (25767 13396 793159 241000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8176) (undo-tree-id54057 . -1) (undo-tree-id54058 . -1) (undo-tree-id54059 . -1) (undo-tree-id54060 . -1) (undo-tree-id54061 . -1) (undo-tree-id54062 . -1) (undo-tree-id54063 . -1) (undo-tree-id54064 . -1) (undo-tree-id54065 . -1) (undo-tree-id54066 . -1) (undo-tree-id54067 . -1) (undo-tree-id54068 . -1) (undo-tree-id54069 . -1) (undo-tree-id54070 . -1)) nil (25767 13396 793147 2000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8176) (undo-tree-id54043 . -1) (undo-tree-id54044 . -1) (undo-tree-id54045 . -1) (undo-tree-id54046 . -1) (undo-tree-id54047 . -1) (undo-tree-id54048 . -1) (undo-tree-id54049 . -1) (undo-tree-id54050 . -1) (undo-tree-id54051 . -1) (undo-tree-id54052 . -1) (undo-tree-id54053 . -1) (undo-tree-id54054 . -1) (undo-tree-id54055 . -1) (undo-tree-id54056 . -1)) nil (25767 13396 791954 379000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8176) (undo-tree-id54015 . -1) (undo-tree-id54016 . -1) (undo-tree-id54017 . -1) (undo-tree-id54018 . -1) (undo-tree-id54019 . -1) (undo-tree-id54020 . -1) (undo-tree-id54021 . -1) (undo-tree-id54022 . -1) (undo-tree-id54023 . -1) (undo-tree-id54024 . -1) (undo-tree-id54025 . -1) (undo-tree-id54026 . -1) (undo-tree-id54027 . -1) (undo-tree-id54028 . -1) (undo-tree-id54029 . -1) (undo-tree-id54030 . -1) (undo-tree-id54031 . -1) (undo-tree-id54032 . -1) (undo-tree-id54033 . -1) (undo-tree-id54034 . -1) (undo-tree-id54035 . -1) (undo-tree-id54036 . -1) (undo-tree-id54037 . -1) (undo-tree-id54038 . -1) (undo-tree-id54039 . -1) (undo-tree-id54040 . -1) (undo-tree-id54041 . -1) (undo-tree-id54042 . -1)) nil (25767 13396 791944 433000) 0 nil])
([nil nil ((8176 . 8177)) nil (25767 13396 791923 581000) 0 nil])
([nil nil ((#("Indeed, if we were to" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8178) (undo-tree-id53996 . -20) (undo-tree-id53997 . -20) (undo-tree-id53998 . -20) (undo-tree-id53999 . -5) (undo-tree-id54000 . -6) (undo-tree-id54001 . -9) (undo-tree-id54002 . -12) (undo-tree-id54003 . -17) (undo-tree-id54004 . -20) (undo-tree-id54005 . -21) (undo-tree-id54006 . -20) (undo-tree-id54007 . -5) (undo-tree-id54008 . -6) (undo-tree-id54009 . -9) (undo-tree-id54010 . -12) (undo-tree-id54011 . -17) (undo-tree-id54012 . -20) (undo-tree-id54013 . -20) (undo-tree-id54014 . -21) 8198) nil (25767 13396 791921 221000) 0 nil])
([nil nil ((8178 . 8180)) nil (25767 13396 791894 186000) 0 nil])
([nil nil ((8185 . 8187) (t 25767 13396 858639 385000)) nil (25767 13415 348327 120000) 0 nil])
([nil nil ((8363 . 8364) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8363) (undo-tree-id54427 . -1) (8288 . 8289) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8288) (undo-tree-id54428 . -1) (8218 . 8219) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8218) (undo-tree-id54429 . -1) 8199) nil (25767 13415 348322 768000) 0 nil])
([nil nil ((8176 . 8436) (#("- The first batch would contain windows 1 to 32 and the second batch would contain windows 33

- If called batch(32), then 32 consecutive windows would be put in the same batch, and the following batch would not continue each of these window where it left off." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 23 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 23 24 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 24 93 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 93 94 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 94 95 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 95 96 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 96 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 99 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 137 138 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 138 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 152 207 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 207 208 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 208 260 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 8176) (undo-tree-id54433 . -97) (undo-tree-id54434 . -97) (undo-tree-id54435 . 161) (undo-tree-id54436 . 154) (undo-tree-id54437 . -105) (undo-tree-id54438 . -260) (undo-tree-id54439 . -260) (undo-tree-id54440 . -260) (undo-tree-id54441 . -260) (undo-tree-id54442 . -260) (undo-tree-id54443 . -260) (undo-tree-id54444 . -260) (undo-tree-id54445 . -260) (undo-tree-id54446 . -260) (undo-tree-id54447 . -260) (undo-tree-id54448 . -260) (undo-tree-id54449 . -260) (undo-tree-id54450 . -260) (undo-tree-id54451 . -260) (undo-tree-id54452 . -260) (undo-tree-id54453 . -260) (undo-tree-id54454 . -260) (undo-tree-id54455 . -260) (undo-tree-id54456 . -260) (undo-tree-id54457 . -260) (undo-tree-id54458 . -260) (undo-tree-id54459 . -260) (undo-tree-id54460 . -260) (undo-tree-id54461 . -260) (undo-tree-id54462 . -260) (undo-tree-id54463 . -260) (undo-tree-id54464 . -218) (undo-tree-id54465 . -218) (undo-tree-id54466 . -218) (undo-tree-id54467 . -218) (undo-tree-id54468 . -218) (undo-tree-id54469 . -218) (undo-tree-id54470 . -218) (undo-tree-id54471 . -218) (undo-tree-id54472 . -218) (undo-tree-id54473 . -218) (undo-tree-id54474 . -218) (undo-tree-id54475 . -153) (undo-tree-id54476 . -153) (undo-tree-id54477 . -153) (undo-tree-id54478 . -153) (undo-tree-id54479 . -153) (undo-tree-id54480 . -153) (undo-tree-id54481 . -153) (undo-tree-id54482 . -153) (undo-tree-id54483 . -153) (undo-tree-id54484 . -153) (undo-tree-id54485 . -153) (undo-tree-id54486 . -153) (undo-tree-id54487 . -153) (undo-tree-id54488 . -153) (undo-tree-id54489 . -153) (undo-tree-id54490 . -153) (undo-tree-id54491 . -97) (undo-tree-id54492 . -97) (undo-tree-id54493 . -97) (undo-tree-id54494 . -97) (undo-tree-id54495 . -97) (undo-tree-id54496 . -97) (undo-tree-id54497 . -97) (undo-tree-id54498 . -97) (undo-tree-id54499 . -97) (undo-tree-id54500 . -97) (undo-tree-id54501 . -97) (undo-tree-id54502 . -98) (undo-tree-id54503 . -98) (undo-tree-id54504 . -98) (undo-tree-id54505 . -98) (undo-tree-id54506 . -98) (undo-tree-id54507 . -98) (undo-tree-id54508 . -98) (undo-tree-id54509 . -98) (undo-tree-id54510 . -98) (undo-tree-id54511 . -98) (undo-tree-id54512 . -98) (undo-tree-id54513 . -105) (undo-tree-id54514 . -105) (undo-tree-id54515 . -105) (undo-tree-id54516 . -105) (undo-tree-id54517 . -105) (undo-tree-id54518 . -105) (undo-tree-id54519 . -105) (undo-tree-id54520 . -105) (undo-tree-id54521 . -105) (undo-tree-id54522 . -105) (undo-tree-id54523 . -105) (undo-tree-id54524 . -111) (undo-tree-id54525 . -111) (undo-tree-id54526 . -111) (undo-tree-id54527 . -111) (undo-tree-id54528 . -111) (undo-tree-id54529 . -111) (undo-tree-id54530 . -111) (undo-tree-id54531 . -111) (undo-tree-id54532 . -111) (undo-tree-id54533 . -111) (undo-tree-id54534 . -111) (undo-tree-id54535 . -112) (undo-tree-id54536 . -112) (undo-tree-id54537 . -112) (undo-tree-id54538 . -112) (undo-tree-id54539 . -112) (undo-tree-id54540 . -112) (undo-tree-id54541 . -112) (undo-tree-id54542 . -112) (undo-tree-id54543 . -112) (undo-tree-id54544 . -112) (undo-tree-id54545 . -112) (undo-tree-id54546 . -112) (undo-tree-id54547 . -112) (undo-tree-id54548 . -112) (undo-tree-id54549 . -112) (undo-tree-id54550 . -112) (undo-tree-id54551 . -114) (undo-tree-id54552 . -114) (undo-tree-id54553 . -114) (undo-tree-id54554 . -114) (undo-tree-id54555 . -114) (undo-tree-id54556 . -114) (undo-tree-id54557 . -114) (undo-tree-id54558 . -114) (undo-tree-id54559 . -114) (undo-tree-id54560 . -114) (undo-tree-id54561 . -114) (undo-tree-id54562 . -116) (undo-tree-id54563 . -116) (undo-tree-id54564 . -116) (undo-tree-id54565 . -116) (undo-tree-id54566 . -116) (undo-tree-id54567 . -116) (undo-tree-id54568 . -116) (undo-tree-id54569 . -116) (undo-tree-id54570 . -116) (undo-tree-id54571 . -116) (undo-tree-id54572 . -116) (undo-tree-id54573 . -121) (undo-tree-id54574 . -121) (undo-tree-id54575 . -121) (undo-tree-id54576 . -121) (undo-tree-id54577 . -121) (undo-tree-id54578 . -121) (undo-tree-id54579 . -121) (undo-tree-id54580 . -121) (undo-tree-id54581 . -121) (undo-tree-id54582 . -121) (undo-tree-id54583 . -121) (undo-tree-id54584 . -124) (undo-tree-id54585 . -124) (undo-tree-id54586 . -124) (undo-tree-id54587 . -124) (undo-tree-id54588 . -124) (undo-tree-id54589 . -124) (undo-tree-id54590 . -124) (undo-tree-id54591 . -124) (undo-tree-id54592 . -124) (undo-tree-id54593 . -124) (undo-tree-id54594 . -124) (undo-tree-id54595 . -124) (undo-tree-id54596 . -124) (undo-tree-id54597 . -124) (undo-tree-id54598 . -124) (undo-tree-id54599 . -124) (undo-tree-id54600 . -124) (undo-tree-id54601 . -124) (undo-tree-id54602 . -124) (undo-tree-id54603 . -124) (undo-tree-id54604 . -124) (undo-tree-id54605 . -136) (undo-tree-id54606 . -136) (undo-tree-id54607 . -136) (undo-tree-id54608 . -136) (undo-tree-id54609 . -136) (undo-tree-id54610 . -136) (undo-tree-id54611 . -144) (undo-tree-id54612 . -144) (undo-tree-id54613 . -144) (undo-tree-id54614 . -144) (undo-tree-id54615 . -144) (undo-tree-id54616 . -144) (undo-tree-id54617 . -150) (undo-tree-id54618 . -150) (undo-tree-id54619 . -150) (undo-tree-id54620 . -150) (undo-tree-id54621 . -150) (undo-tree-id54622 . -150) (undo-tree-id54623 . -153) (undo-tree-id54624 . -153) (undo-tree-id54625 . -153) (undo-tree-id54626 . -153) (undo-tree-id54627 . -153) (undo-tree-id54628 . -153) (undo-tree-id54629 . -157) (undo-tree-id54630 . -157) (undo-tree-id54631 . -157) (undo-tree-id54632 . -157) (undo-tree-id54633 . -157) (undo-tree-id54634 . -157) (undo-tree-id54635 . -160) (undo-tree-id54636 . -160) (undo-tree-id54637 . -160) (undo-tree-id54638 . -160) (undo-tree-id54639 . -160) (undo-tree-id54640 . -160) (undo-tree-id54641 . -164) (undo-tree-id54642 . -164) (undo-tree-id54643 . -164) (undo-tree-id54644 . -164) (undo-tree-id54645 . -164) (undo-tree-id54646 . -164) (undo-tree-id54647 . -169) (undo-tree-id54648 . -169) (undo-tree-id54649 . -169) (undo-tree-id54650 . -169) (undo-tree-id54651 . -169) (undo-tree-id54652 . -169) (undo-tree-id54653 . -175) (undo-tree-id54654 . -175) (undo-tree-id54655 . -175) (undo-tree-id54656 . -175) (undo-tree-id54657 . -175) (undo-tree-id54658 . -175) (undo-tree-id54659 . -176) (undo-tree-id54660 . -176) (undo-tree-id54661 . -176) (undo-tree-id54662 . -176) (undo-tree-id54663 . -176) (undo-tree-id54664 . -176) (undo-tree-id54665 . -180) (undo-tree-id54666 . -180) (undo-tree-id54667 . -180) (undo-tree-id54668 . -180) (undo-tree-id54669 . -180) (undo-tree-id54670 . -180) (undo-tree-id54671 . -180) (undo-tree-id54672 . -180) (undo-tree-id54673 . -180) (undo-tree-id54674 . -180) (undo-tree-id54675 . -180) (undo-tree-id54676 . -180) (undo-tree-id54677 . -180) (undo-tree-id54678 . -180) (undo-tree-id54679 . -180) (undo-tree-id54680 . -180) (undo-tree-id54681 . -180) (undo-tree-id54682 . -180) (undo-tree-id54683 . -180) (undo-tree-id54684 . -180) (undo-tree-id54685 . -180) (undo-tree-id54686 . -184) (undo-tree-id54687 . -184) (undo-tree-id54688 . -184) (undo-tree-id54689 . -184) (undo-tree-id54690 . -184) (undo-tree-id54691 . -184) (undo-tree-id54692 . -184) (undo-tree-id54693 . -184) (undo-tree-id54694 . -184) (undo-tree-id54695 . -184) (undo-tree-id54696 . -184) (undo-tree-id54697 . -194) (undo-tree-id54698 . -194) (undo-tree-id54699 . -194) (undo-tree-id54700 . -194) (undo-tree-id54701 . -194) (undo-tree-id54702 . -194) (undo-tree-id54703 . -194) (undo-tree-id54704 . -194) (undo-tree-id54705 . -194) (undo-tree-id54706 . -194) (undo-tree-id54707 . -194) (undo-tree-id54708 . -200) (undo-tree-id54709 . -200) (undo-tree-id54710 . -200) (undo-tree-id54711 . -200) (undo-tree-id54712 . -200) (undo-tree-id54713 . -200) (undo-tree-id54714 . -200) (undo-tree-id54715 . -200) (undo-tree-id54716 . -200) (undo-tree-id54717 . -200) (undo-tree-id54718 . -200) (undo-tree-id54719 . -206) (undo-tree-id54720 . -206) (undo-tree-id54721 . -206) (undo-tree-id54722 . -206) (undo-tree-id54723 . -206) (undo-tree-id54724 . -206) (undo-tree-id54725 . -206) (undo-tree-id54726 . -206) (undo-tree-id54727 . -206) (undo-tree-id54728 . -206) (undo-tree-id54729 . -206) (undo-tree-id54730 . -210) (undo-tree-id54731 . -210) (undo-tree-id54732 . -210) (undo-tree-id54733 . -210) (undo-tree-id54734 . -210) (undo-tree-id54735 . -210) (undo-tree-id54736 . -210) (undo-tree-id54737 . -210) (undo-tree-id54738 . -210) (undo-tree-id54739 . -210) (undo-tree-id54740 . -210) (undo-tree-id54741 . -219) (undo-tree-id54742 . -219) (undo-tree-id54743 . -219) (undo-tree-id54744 . -219) (undo-tree-id54745 . -219) (undo-tree-id54746 . -219) (undo-tree-id54747 . -219) (undo-tree-id54748 . -219) (undo-tree-id54749 . -219) (undo-tree-id54750 . -219) (undo-tree-id54751 . -219) (undo-tree-id54752 . -224) (undo-tree-id54753 . -224) (undo-tree-id54754 . -224) (undo-tree-id54755 . -224) (undo-tree-id54756 . -224) (undo-tree-id54757 . -224) (undo-tree-id54758 . -224) (undo-tree-id54759 . -224) (undo-tree-id54760 . -224) (undo-tree-id54761 . -224) (undo-tree-id54762 . -224) (undo-tree-id54763 . -227) (undo-tree-id54764 . -227) (undo-tree-id54765 . -227) (undo-tree-id54766 . -227) (undo-tree-id54767 . -227) (undo-tree-id54768 . -227) (undo-tree-id54769 . -227) (undo-tree-id54770 . -227) (undo-tree-id54771 . -227) (undo-tree-id54772 . -227) (undo-tree-id54773 . -227) (undo-tree-id54774 . -233) (undo-tree-id54775 . -233) (undo-tree-id54776 . -233) (undo-tree-id54777 . -233) (undo-tree-id54778 . -233) (undo-tree-id54779 . -233) (undo-tree-id54780 . -233) (undo-tree-id54781 . -233) (undo-tree-id54782 . -233) (undo-tree-id54783 . -233) (undo-tree-id54784 . -233) (undo-tree-id54785 . -240) (undo-tree-id54786 . -240) (undo-tree-id54787 . -240) (undo-tree-id54788 . -240) (undo-tree-id54789 . -240) (undo-tree-id54790 . -240) (undo-tree-id54791 . -240) (undo-tree-id54792 . -240) (undo-tree-id54793 . -240) (undo-tree-id54794 . -240) (undo-tree-id54795 . -240) (undo-tree-id54796 . -246) (undo-tree-id54797 . -246) (undo-tree-id54798 . -246) (undo-tree-id54799 . -246) (undo-tree-id54800 . -246) (undo-tree-id54801 . -246) (undo-tree-id54802 . -246) (undo-tree-id54803 . -246) (undo-tree-id54804 . -246) (undo-tree-id54805 . -246) (undo-tree-id54806 . -246) (undo-tree-id54807 . -246) (undo-tree-id54808 . -246) (undo-tree-id54809 . -246) (undo-tree-id54810 . -246) (undo-tree-id54811 . -246) (undo-tree-id54812 . -246) (undo-tree-id54813 . -246) (undo-tree-id54814 . -246) (undo-tree-id54815 . -246) (undo-tree-id54816 . -246) (undo-tree-id54817 . -249) (undo-tree-id54818 . -249) (undo-tree-id54819 . -249) (undo-tree-id54820 . -249) (undo-tree-id54821 . -249) (undo-tree-id54822 . -249) (undo-tree-id54823 . -249) (undo-tree-id54824 . -249) (undo-tree-id54825 . -249) (undo-tree-id54826 . -249) (undo-tree-id54827 . -249) (undo-tree-id54828 . -254) (undo-tree-id54829 . -254) (undo-tree-id54830 . -254) (undo-tree-id54831 . -254) (undo-tree-id54832 . -254) (undo-tree-id54833 . -254) (undo-tree-id54834 . -254) (undo-tree-id54835 . -254) (undo-tree-id54836 . -254) (undo-tree-id54837 . -254) (undo-tree-id54838 . -254) (undo-tree-id54839 . -258) (undo-tree-id54840 . -258) (undo-tree-id54841 . -258) (undo-tree-id54842 . -258) (undo-tree-id54843 . -258) (undo-tree-id54844 . -258) (undo-tree-id54845 . -258) (undo-tree-id54846 . -258) (undo-tree-id54847 . -258) (undo-tree-id54848 . -258) (undo-tree-id54849 . -258) (undo-tree-id54850 . -259) (undo-tree-id54851 . -259) (undo-tree-id54852 . -259) (undo-tree-id54853 . -259) (undo-tree-id54854 . -259) (undo-tree-id54855 . -259) (undo-tree-id54856 . -259) (undo-tree-id54857 . -259) (undo-tree-id54858 . -259) (undo-tree-id54859 . -259) (undo-tree-id54860 . -259) (undo-tree-id54861 . -259) (undo-tree-id54862 . -259) (undo-tree-id54863 . -259) (undo-tree-id54864 . -259) (undo-tree-id54865 . -259) (undo-tree-id54866 . -259) (undo-tree-id54867 . -259) (undo-tree-id54868 . -259) (undo-tree-id54869 . -259) (undo-tree-id54870 . -259) (undo-tree-id54871 . -259) (undo-tree-id54872 . -259) (undo-tree-id54873 . -259) (undo-tree-id54874 . -259) (undo-tree-id54875 . -259) (undo-tree-id54876 . -260) (undo-tree-id54877 . -260) (undo-tree-id54878 . -260) (undo-tree-id54879 . -260) (undo-tree-id54880 . -260) (undo-tree-id54881 . -260) (undo-tree-id54882 . -260) (undo-tree-id54883 . -260) (undo-tree-id54884 . -260) (undo-tree-id54885 . -260) (undo-tree-id54886 . -260) (undo-tree-id54887 . -260) (undo-tree-id54888 . -260) (undo-tree-id54889 . -260) (undo-tree-id54890 . -260) (undo-tree-id54891 . -260) (undo-tree-id54892 . -260) (undo-tree-id54893 . -260) (undo-tree-id54894 . -260) (undo-tree-id54895 . -260) (undo-tree-id54896 . -260) (undo-tree-id54897 . -260) (undo-tree-id54898 . -260) (undo-tree-id54899 . -260) (undo-tree-id54900 . -260) (undo-tree-id54901 . -260) (undo-tree-id54902 . -260) (undo-tree-id54903 . -260) (undo-tree-id54904 . -260) (undo-tree-id54905 . -260) (undo-tree-id54906 . -260) (undo-tree-id54907 . -260) (undo-tree-id54908 . -260) (undo-tree-id54909 . -260) (undo-tree-id54910 . -260) (undo-tree-id54911 . -260) (undo-tree-id54912 . -260) (undo-tree-id54913 . -260) (undo-tree-id54914 . -260) (undo-tree-id54915 . -260) (undo-tree-id54916 . -260) (undo-tree-id54917 . -260) (undo-tree-id54918 . -260) (undo-tree-id54919 . -260) (undo-tree-id54920 . -260) (undo-tree-id54921 . -260) (undo-tree-id54922 . -260) (undo-tree-id54923 . -260) (undo-tree-id54924 . -260) (undo-tree-id54925 . -260) (undo-tree-id54926 . -260) (undo-tree-id54927 . -260) (undo-tree-id54928 . -260) (undo-tree-id54929 . -260) (undo-tree-id54930 . -260) (undo-tree-id54931 . -260) (undo-tree-id54932 . -260) (undo-tree-id54933 . -260) (undo-tree-id54934 . -260) (undo-tree-id54935 . -260) (undo-tree-id54936 . -260) (undo-tree-id54937 . -260) (undo-tree-id54938 . -260) (undo-tree-id54939 . -260) (undo-tree-id54940 . -260) (undo-tree-id54941 . -260) (undo-tree-id54942 . -260) (undo-tree-id54943 . -260) (undo-tree-id54944 . -260) (undo-tree-id54945 . -260) (undo-tree-id54946 . -260) (undo-tree-id54947 . -260) (undo-tree-id54948 . -260) (undo-tree-id54949 . -260) (undo-tree-id54950 . -260) (undo-tree-id54951 . -260) (undo-tree-id54952 . -260) (undo-tree-id54953 . -260) (undo-tree-id54954 . -260) (undo-tree-id54955 . -260) (undo-tree-id54956 . -260) (undo-tree-id54957 . -260) (undo-tree-id54958 . -260) (undo-tree-id54959 . -260) (undo-tree-id54960 . -260) (undo-tree-id54961 . -260) (undo-tree-id54962 . -260) (undo-tree-id54963 . -260) (undo-tree-id54964 . -260) (undo-tree-id54965 . -260) (undo-tree-id54966 . -260) (undo-tree-id54967 . -260) (undo-tree-id54968 . -260) (undo-tree-id54969 . -260) (undo-tree-id54970 . -260) (undo-tree-id54971 . -260) (undo-tree-id54972 . -260) (undo-tree-id54973 . -260) (undo-tree-id54974 . -260) (undo-tree-id54975 . -260) (undo-tree-id54976 . -260) (undo-tree-id54977 . -260) (undo-tree-id54978 . -260) (undo-tree-id54979 . -95) (8176 . 8271) (#(" The first batch would contain windows 1 to 32 and the second batch would contain windows 33" 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 23 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8341) (undo-tree-id54980 . -22) (undo-tree-id54981 . -1) (undo-tree-id54982 . -22) (undo-tree-id54983 . -22) (undo-tree-id54984 . -22) (undo-tree-id54985 . -22) (undo-tree-id54986 . -22) (undo-tree-id54987 . -22) (undo-tree-id54988 . -22) (undo-tree-id54989 . -22) (undo-tree-id54990 . -22) (undo-tree-id54991 . -22) (undo-tree-id54992 . -22) (undo-tree-id54993 . -22) (undo-tree-id54994 . -22) (undo-tree-id54995 . -22) (undo-tree-id54996 . -22) (undo-tree-id54997 . -22) (undo-tree-id54998 . -22) (undo-tree-id54999 . -22) (undo-tree-id55000 . -22) (undo-tree-id55001 . -22) (undo-tree-id55002 . -22) (undo-tree-id55003 . -22) (undo-tree-id55004 . -22) (undo-tree-id55005 . -22) (undo-tree-id55006 . -3) (undo-tree-id55007 . -3) (undo-tree-id55008 . -3) (undo-tree-id55009 . -3) (undo-tree-id55010 . -3) (undo-tree-id55011 . -3) (undo-tree-id55012 . -3) (undo-tree-id55013 . -3) (undo-tree-id55014 . -3) (undo-tree-id55015 . -3) (undo-tree-id55016 . -3) (undo-tree-id55017 . -3) (undo-tree-id55018 . -3) (undo-tree-id55019 . -3) (undo-tree-id55020 . -3) (undo-tree-id55021 . -3) (undo-tree-id55022 . -9) (undo-tree-id55023 . -9) (undo-tree-id55024 . -9) (undo-tree-id55025 . -9) (undo-tree-id55026 . -9) (undo-tree-id55027 . -9) (undo-tree-id55028 . -9) (undo-tree-id55029 . -9) (undo-tree-id55030 . -9) (undo-tree-id55031 . -9) (undo-tree-id55032 . -9) (undo-tree-id55033 . -9) (undo-tree-id55034 . -9) (undo-tree-id55035 . -9) (undo-tree-id55036 . -9) (undo-tree-id55037 . -9) (undo-tree-id55038 . -9) (undo-tree-id55039 . -9) (undo-tree-id55040 . -9) (undo-tree-id55041 . -9) (undo-tree-id55042 . -9) (undo-tree-id55043 . -9) (undo-tree-id55044 . -9) (undo-tree-id55045 . -9) (undo-tree-id55046 . -9) (undo-tree-id55047 . -9) (undo-tree-id55048 . -9) (undo-tree-id55049 . -9) (undo-tree-id55050 . -9) (undo-tree-id55051 . -9) (undo-tree-id55052 . -9) (undo-tree-id55053 . -9) (undo-tree-id55054 . -9) (undo-tree-id55055 . -9) (undo-tree-id55056 . -9) (undo-tree-id55057 . -9) (undo-tree-id55058 . -9) (undo-tree-id55059 . -9) (undo-tree-id55060 . -9) (undo-tree-id55061 . -9) (undo-tree-id55062 . -9) (undo-tree-id55063 . -5) (undo-tree-id55064 . -5) (undo-tree-id55065 . -5) (undo-tree-id55066 . -5) (undo-tree-id55067 . -5) (undo-tree-id55068 . -5) (undo-tree-id55069 . -5) (undo-tree-id55070 . -5) (undo-tree-id55071 . -5) (undo-tree-id55072 . -5) (undo-tree-id55073 . -5) (undo-tree-id55074 . -1) (undo-tree-id55075 . -1) (undo-tree-id55076 . -1) (undo-tree-id55077 . -1) (undo-tree-id55078 . -1) (undo-tree-id55079 . -1) (undo-tree-id55080 . -1) (undo-tree-id55081 . -1) (undo-tree-id55082 . -1) (undo-tree-id55083 . -1) (undo-tree-id55084 . -1) (undo-tree-id55085 . -1) (undo-tree-id55086 . -1) (undo-tree-id55087 . -1) (undo-tree-id55088 . -1) (undo-tree-id55089 . -1) (undo-tree-id55090 . -1) (undo-tree-id55091 . -1) (undo-tree-id55092 . -1) (undo-tree-id55093 . -1) (undo-tree-id55094 . -1) (undo-tree-id55095 . -1) (undo-tree-id55096 . -1) (undo-tree-id55097 . -1) (undo-tree-id55098 . -1) (undo-tree-id55099 . -1) (undo-tree-id55100 . -1) (undo-tree-id55101 . -1) (undo-tree-id55102 . -1) (undo-tree-id55103 . -1) (undo-tree-id55104 . -1) (undo-tree-id55105 . -1) (undo-tree-id55106 . -1) (undo-tree-id55107 . -1) (undo-tree-id55108 . -1) 8342 (t 25767 13415 463627 726000)) nil (25767 13460 141714 306000) 0 nil])
([nil nil ((8514 . 8515) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8514) (undo-tree-id54430 . -1) (8436 . 8437) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8436) (undo-tree-id54431 . 1) (undo-tree-id54432 . -1) 8344) nil (25767 13460 140000 53000) 0 nil])
([nil nil ((8343 . 8593) (#("- so if you consider, say, the first window of each batch (i.e., windows 1 and 33), you can see that they are not consecutive. The simplest solution

- The first batch would contain windows 1 to 32 and the second batch would contain windows 33 to 64." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 72 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 73 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 73 148 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 148 149 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 149 150 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 150 151 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 151 152 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 152 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 173 174 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 174 243 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 243 244 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 244 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 8343) (undo-tree-id55177 . 6) (undo-tree-id55178 . 98) (undo-tree-id55179 . -250) (undo-tree-id55180 . -250) (undo-tree-id55181 . -250) (undo-tree-id55182 . -250) (undo-tree-id55183 . -250) (undo-tree-id55184 . -250) (undo-tree-id55185 . -250) (undo-tree-id55186 . -250) (undo-tree-id55187 . -250) (undo-tree-id55188 . -250) (undo-tree-id55189 . -250) (undo-tree-id55190 . -250) (undo-tree-id55191 . -250) (undo-tree-id55192 . -250) (undo-tree-id55193 . -250) (undo-tree-id55194 . -250) (undo-tree-id55195 . -250) (undo-tree-id55196 . -250) (undo-tree-id55197 . -250) (undo-tree-id55198 . -250) (undo-tree-id55199 . -250) (undo-tree-id55200 . -250) (undo-tree-id55201 . -250) (undo-tree-id55202 . -250) (undo-tree-id55203 . -250) (undo-tree-id55204 . -250) (undo-tree-id55205 . -250) (undo-tree-id55206 . -250) (undo-tree-id55207 . -250) (undo-tree-id55208 . -250) (undo-tree-id55209 . -250) (undo-tree-id55210 . -250) (undo-tree-id55211 . -250) (undo-tree-id55212 . -250) (undo-tree-id55213 . -250) (undo-tree-id55214 . -213) (undo-tree-id55215 . -213) (undo-tree-id55216 . -213) (undo-tree-id55217 . -213) (undo-tree-id55218 . -213) (undo-tree-id55219 . -213) (undo-tree-id55220 . -213) (undo-tree-id55221 . -213) (undo-tree-id55222 . -213) (undo-tree-id55223 . -213) (undo-tree-id55224 . -213) (undo-tree-id55225 . -152) (undo-tree-id55226 . -152) (undo-tree-id55227 . -152) (undo-tree-id55228 . -152) (undo-tree-id55229 . -152) (undo-tree-id55230 . -152) (undo-tree-id55231 . -152) (undo-tree-id55232 . -152) (undo-tree-id55233 . -152) (undo-tree-id55234 . -152) (undo-tree-id55235 . -152) (undo-tree-id55236 . -152) (undo-tree-id55237 . -152) (undo-tree-id55238 . -152) (undo-tree-id55239 . -152) (undo-tree-id55240 . -152) (undo-tree-id55241 . -152) (undo-tree-id55242 . -152) (undo-tree-id55243 . -152) (undo-tree-id55244 . -152) (undo-tree-id55245 . -152) (undo-tree-id55246 . -152) (undo-tree-id55247 . -152) (undo-tree-id55248 . -152) (undo-tree-id55249 . -152) (undo-tree-id55250 . -152) (undo-tree-id55251 . -152) (undo-tree-id55252 . -152) (undo-tree-id55253 . -152) (undo-tree-id55254 . -152) (undo-tree-id55255 . -152) (undo-tree-id55256 . -152) (undo-tree-id55257 . -152) (undo-tree-id55258 . -152) (undo-tree-id55259 . -152) (undo-tree-id55260 . -152) (undo-tree-id55261 . -152) (undo-tree-id55262 . -152) (undo-tree-id55263 . -152) (undo-tree-id55264 . -152) (undo-tree-id55265 . -152) (undo-tree-id55266 . -152) (undo-tree-id55267 . -152) (undo-tree-id55268 . -152) (undo-tree-id55269 . -152) (undo-tree-id55270 . -152) (undo-tree-id55271 . -152) (undo-tree-id55272 . -250) (undo-tree-id55273 . -152) (undo-tree-id55274 . -152) (undo-tree-id55275 . -152) (undo-tree-id55276 . -152) (undo-tree-id55277 . -152) (undo-tree-id55278 . -152) (undo-tree-id55279 . -152) (undo-tree-id55280 . -152) (undo-tree-id55281 . -152) (undo-tree-id55282 . -152) (undo-tree-id55283 . -152) (undo-tree-id55284 . -152) (undo-tree-id55285 . -152) (undo-tree-id55286 . -152) (undo-tree-id55287 . -152) (undo-tree-id55288 . -152) (undo-tree-id55289 . -152) (undo-tree-id55290 . -152) (undo-tree-id55291 . -152) (undo-tree-id55292 . -152) (undo-tree-id55293 . -152) (undo-tree-id55294 . -152) (undo-tree-id55295 . -152) (undo-tree-id55296 . -152) (undo-tree-id55297 . -152) (undo-tree-id55298 . -152) (undo-tree-id55299 . -152) (undo-tree-id55300 . -152) (undo-tree-id55301 . -152) (undo-tree-id55302 . -152) (undo-tree-id55303 . -152) (undo-tree-id55304 . -152) (undo-tree-id55305 . -152) (undo-tree-id55306 . -152) (undo-tree-id55307 . -152) (undo-tree-id55308 . -152) (undo-tree-id55309 . -152) (undo-tree-id55310 . -152) (undo-tree-id55311 . -152) (undo-tree-id55312 . -152) (undo-tree-id55313 . -152) (undo-tree-id55314 . -152) (undo-tree-id55315 . -152) (undo-tree-id55316 . -152) (undo-tree-id55317 . -152) (undo-tree-id55318 . -152) (undo-tree-id55319 . -152) (undo-tree-id55320 . -152) (undo-tree-id55321 . -152) (undo-tree-id55322 . -152) (undo-tree-id55323 . -152) (undo-tree-id55324 . -152) (undo-tree-id55325 . -152) (undo-tree-id55326 . -152) (undo-tree-id55327 . -152) (undo-tree-id55328 . -152) (undo-tree-id55329 . -152) (undo-tree-id55330 . -152) (undo-tree-id55331 . -152) (undo-tree-id55332 . -152) (undo-tree-id55333 . -152) (undo-tree-id55334 . -152) (undo-tree-id55335 . -152) (undo-tree-id55336 . -152) (undo-tree-id55337 . -152) (undo-tree-id55338 . -152) (undo-tree-id55339 . -152) (undo-tree-id55340 . -152) (undo-tree-id55341 . -152) (undo-tree-id55342 . -213) (undo-tree-id55343 . -213) (undo-tree-id55344 . -213) (undo-tree-id55345 . -213) (undo-tree-id55346 . -213) (undo-tree-id55347 . -213) (undo-tree-id55348 . -213) (undo-tree-id55349 . -213) (undo-tree-id55350 . -213) (undo-tree-id55351 . -213) (undo-tree-id55352 . -213) (undo-tree-id55353 . -213) (undo-tree-id55354 . -213) (undo-tree-id55355 . -213) (undo-tree-id55356 . -213) (undo-tree-id55357 . -213) (undo-tree-id55358 . -213) (undo-tree-id55359 . -213) (undo-tree-id55360 . -213) (undo-tree-id55361 . -213) (undo-tree-id55362 . -213) (undo-tree-id55363 . -213) (undo-tree-id55364 . -213) (undo-tree-id55365 . -213) (undo-tree-id55366 . -213) (undo-tree-id55367 . -213) (undo-tree-id55368 . -213) (undo-tree-id55369 . -213) (undo-tree-id55370 . -213) (undo-tree-id55371 . -213) (undo-tree-id55372 . -213) (undo-tree-id55373 . -249) (undo-tree-id55374 . -249) (undo-tree-id55375 . -249) (undo-tree-id55376 . -249) (undo-tree-id55377 . -249) (undo-tree-id55378 . -249) (undo-tree-id55379 . -249) (undo-tree-id55380 . -249) (undo-tree-id55381 . -249) (undo-tree-id55382 . -249) (undo-tree-id55383 . -249) (undo-tree-id55384 . -249) (undo-tree-id55385 . -249) (undo-tree-id55386 . -249) (undo-tree-id55387 . -249) (undo-tree-id55388 . -249) (undo-tree-id55389 . -249) (undo-tree-id55390 . -249) (undo-tree-id55391 . -249) (undo-tree-id55392 . -249) (undo-tree-id55393 . -249) (undo-tree-id55394 . -249) (undo-tree-id55395 . -249) (undo-tree-id55396 . -249) (undo-tree-id55397 . -249) (undo-tree-id55398 . -249) (undo-tree-id55399 . -249) (undo-tree-id55400 . -249) (undo-tree-id55401 . -249) (undo-tree-id55402 . -249) (undo-tree-id55403 . -249) (undo-tree-id55404 . -249) (undo-tree-id55405 . -249) (undo-tree-id55406 . -249) (undo-tree-id55407 . -249) (undo-tree-id55408 . -249) (undo-tree-id55409 . -249) (undo-tree-id55410 . -249) (undo-tree-id55411 . -249) (undo-tree-id55412 . -249) (undo-tree-id55413 . -249) (undo-tree-id55414 . -249) (undo-tree-id55415 . -249) (undo-tree-id55416 . -249) (undo-tree-id55417 . -249) (undo-tree-id55418 . -249) (undo-tree-id55419 . -249) (undo-tree-id55420 . -249) (undo-tree-id55421 . -249) (undo-tree-id55422 . -249) (undo-tree-id55423 . -249) (undo-tree-id55424 . -249) (undo-tree-id55425 . -249) (undo-tree-id55426 . -249) (undo-tree-id55427 . -249) (undo-tree-id55428 . -249) (undo-tree-id55429 . -250) (undo-tree-id55430 . -250) (undo-tree-id55431 . -250) (undo-tree-id55432 . -250) (undo-tree-id55433 . -250) (undo-tree-id55434 . -250) (undo-tree-id55435 . -250) (undo-tree-id55436 . -250) (undo-tree-id55437 . -250) (undo-tree-id55438 . -250) (undo-tree-id55439 . -250) (undo-tree-id55440 . -250) (undo-tree-id55441 . -250) (undo-tree-id55442 . -250) (undo-tree-id55443 . -250) (undo-tree-id55444 . -250) (undo-tree-id55445 . -250) (undo-tree-id55446 . -250) (undo-tree-id55447 . -250) (undo-tree-id55448 . -250) (undo-tree-id55449 . -250) (undo-tree-id55450 . -250) (undo-tree-id55451 . -250) (undo-tree-id55452 . -150) (8343 . 8493) (#(" so if you consider, say, the first window of each batch (i.e., windows 1 and 33), you can see that they are not consecutive. The simplest solution" 0 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8443) (undo-tree-id55453 . -91) (undo-tree-id55454 . -91) (undo-tree-id55455 . -91) (undo-tree-id55456 . -91) (undo-tree-id55457 . -91) (undo-tree-id55458 . -91) (undo-tree-id55459 . -91) (undo-tree-id55460 . -91) (undo-tree-id55461 . -91) (undo-tree-id55462 . -91) (undo-tree-id55463 . -91) (undo-tree-id55464 . -91) (undo-tree-id55465 . -91) (undo-tree-id55466 . -91) (undo-tree-id55467 . -91) (undo-tree-id55468 . -91) (undo-tree-id55469 . -91) (undo-tree-id55470 . -91) (undo-tree-id55471 . -91) (undo-tree-id55472 . -91) (undo-tree-id55473 . -91) (undo-tree-id55474 . -91) (undo-tree-id55475 . -91) (undo-tree-id55476 . -91) (undo-tree-id55477 . -26) (undo-tree-id55478 . -26) (undo-tree-id55479 . -26) (undo-tree-id55480 . -26) (undo-tree-id55481 . -26) (undo-tree-id55482 . -26) (undo-tree-id55483 . -26) (undo-tree-id55484 . -26) (undo-tree-id55485 . -26) (undo-tree-id55486 . -26) (undo-tree-id55487 . -26) (8442 . 8443) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8442) (undo-tree-id55488 . -1) (undo-tree-id55489 . -1) (undo-tree-id55490 . -1) (undo-tree-id55491 . -1) (undo-tree-id55492 . -1) (undo-tree-id55493 . -1) (undo-tree-id55494 . -1) (undo-tree-id55495 . -1) (undo-tree-id55496 . -1) (undo-tree-id55497 . -1) (undo-tree-id55498 . -1) (undo-tree-id55499 . -1) (undo-tree-id55500 . -1) (undo-tree-id55501 . -1) (undo-tree-id55502 . -1) (undo-tree-id55503 . -1) (undo-tree-id55504 . -1) (undo-tree-id55505 . -1) (undo-tree-id55506 . -1) (undo-tree-id55507 . -1) 8443 (t 25767 13460 205924 307000)) nil (25767 13507 371302 535000) 0 nil])
([nil nil ((8447 . 8448) (#("so i" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8447) (undo-tree-id55109 . -3) (undo-tree-id55110 . -3) (undo-tree-id55111 . 4) (undo-tree-id55112 . -3) (undo-tree-id55113 . -4) (undo-tree-id55114 . -3) (undo-tree-id55115 . -1) (undo-tree-id55116 . -1) (undo-tree-id55117 . -1) (undo-tree-id55118 . -1) (undo-tree-id55119 . -1) (undo-tree-id55120 . -1) (undo-tree-id55121 . -1) (undo-tree-id55122 . -1) (undo-tree-id55123 . -1) (undo-tree-id55124 . -1) (undo-tree-id55125 . -1) (undo-tree-id55126 . -1) (undo-tree-id55127 . -1) (undo-tree-id55128 . -1) (undo-tree-id55129 . -1) (undo-tree-id55130 . -1) (undo-tree-id55131 . -4) (undo-tree-id55132 . -4) (undo-tree-id55133 . -4) (undo-tree-id55134 . -4) (undo-tree-id55135 . -4) (undo-tree-id55136 . -4) (undo-tree-id55137 . -4) (undo-tree-id55138 . -4) (undo-tree-id55139 . -4) (undo-tree-id55140 . -4) (undo-tree-id55141 . -4) (undo-tree-id55142 . -4) (undo-tree-id55143 . -4) (undo-tree-id55144 . -4) (undo-tree-id55145 . -4) (undo-tree-id55146 . -4) (undo-tree-id55147 . -4) (undo-tree-id55148 . -4) (undo-tree-id55149 . -4) (undo-tree-id55150 . -4) (undo-tree-id55151 . -4) (undo-tree-id55152 . -3) (undo-tree-id55153 . -3) (undo-tree-id55154 . -3) (undo-tree-id55155 . -3) (undo-tree-id55156 . -3) (undo-tree-id55157 . -3) (undo-tree-id55158 . -3) (undo-tree-id55159 . -3) (undo-tree-id55160 . -3) (undo-tree-id55161 . -3) (undo-tree-id55162 . -3) (undo-tree-id55163 . -3) (undo-tree-id55164 . -3) (undo-tree-id55165 . -3) (undo-tree-id55166 . -3) (undo-tree-id55167 . -3) (undo-tree-id55168 . -3) (undo-tree-id55169 . -3) (undo-tree-id55170 . -3) (undo-tree-id55171 . -3) (undo-tree-id55172 . -3) (undo-tree-id55173 . -3) (undo-tree-id55174 . -4) (undo-tree-id55175 . -4) (undo-tree-id55176 . -4) 8450) nil (25767 13507 369904 223000) 0 nil])
([nil nil ((8591 . 8593) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -8591) (undo-tree-id55915 . -1) (undo-tree-id55916 . -1) (undo-tree-id55917 . -1) (undo-tree-id55918 . -1) (undo-tree-id55919 . -1) (undo-tree-id55920 . -1) (undo-tree-id55921 . -1) (undo-tree-id55922 . -1) (undo-tree-id55923 . -1) (undo-tree-id55924 . -1) (undo-tree-id55925 . -1) (undo-tree-id55926 . -1) (undo-tree-id55927 . -1) (undo-tree-id55928 . -1) (undo-tree-id55929 . -1) (undo-tree-id55930 . -1) (undo-tree-id55931 . -1) (undo-tree-id55932 . -1) (undo-tree-id55933 . -1) (undo-tree-id55934 . -1) (undo-tree-id55935 . -1) (undo-tree-id55936 . -1) (undo-tree-id55937 . -1) (undo-tree-id55938 . -1) (undo-tree-id55939 . -1) (undo-tree-id55940 . -1) (undo-tree-id55941 . -1) (undo-tree-id55942 . -1) (undo-tree-id55943 . -1) (undo-tree-id55944 . -1) (undo-tree-id55945 . -1) (undo-tree-id55946 . -1) (undo-tree-id55947 . -1) (undo-tree-id55948 . -1) (undo-tree-id55949 . -1) (undo-tree-id55950 . -1) (undo-tree-id55951 . -1) (undo-tree-id55952 . -1) (undo-tree-id55953 . -1) (undo-tree-id55954 . -1) (undo-tree-id55955 . -1) (undo-tree-id55956 . -1) (undo-tree-id55957 . -1) (undo-tree-id55958 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -8592) (undo-tree-id55959 . -1) (undo-tree-id55960 . -1) (undo-tree-id55961 . -1) (undo-tree-id55962 . -1) (undo-tree-id55963 . -1) (undo-tree-id55964 . -1) (undo-tree-id55965 . -1) (undo-tree-id55966 . -1) (undo-tree-id55967 . -1) (undo-tree-id55968 . -1) (undo-tree-id55969 . -1) (undo-tree-id55970 . -1) (undo-tree-id55971 . -1) (undo-tree-id55972 . -1) (undo-tree-id55973 . -1) (undo-tree-id55974 . -1) (undo-tree-id55975 . -1) (undo-tree-id55976 . -1) (undo-tree-id55977 . -1) (undo-tree-id55978 . -1) (undo-tree-id55979 . -1) (undo-tree-id55980 . -1) (undo-tree-id55981 . -1) (undo-tree-id55982 . -1) (undo-tree-id55983 . -1) (undo-tree-id55984 . -1) (undo-tree-id55985 . -1) (undo-tree-id55986 . -1) (undo-tree-id55987 . -1) (undo-tree-id55988 . -1) (undo-tree-id55989 . -1) (undo-tree-id55990 . -1) (undo-tree-id55991 . -1) (undo-tree-id55992 . -1) (undo-tree-id55993 . -1) (undo-tree-id55994 . -1) (undo-tree-id55995 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -8593) (undo-tree-id55996 . -1) (undo-tree-id55997 . -1) (undo-tree-id55998 . -1) (undo-tree-id55999 . -1) (undo-tree-id56000 . -1) (undo-tree-id56001 . -1) (undo-tree-id56002 . -1) (undo-tree-id56003 . -1) (undo-tree-id56004 . -1) (undo-tree-id56005 . -1) (undo-tree-id56006 . -1) (undo-tree-id56007 . -1) (undo-tree-id56008 . -1) (undo-tree-id56009 . -1) (undo-tree-id56010 . -1) (undo-tree-id56011 . -1) (undo-tree-id56012 . -1) (undo-tree-id56013 . -1) (undo-tree-id56014 . -1) (undo-tree-id56015 . -1) (undo-tree-id56016 . -1) (undo-tree-id56017 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -8594) (undo-tree-id56018 . -1) (undo-tree-id56019 . -1) (undo-tree-id56020 . -1) (undo-tree-id56021 . -1) (undo-tree-id56022 . -1) (undo-tree-id56023 . -1) (undo-tree-id56024 . -1) (undo-tree-id56025 . -1) (undo-tree-id56026 . -1) 8595 (8593 . 8595) (8590 . 8593) (t 25767 13507 484236 419000) 8511) nil (25767 13587 697322 62000) 0 nil])
([nil nil ((8592 . 8593) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 8592) (undo-tree-id55904 . -1) (undo-tree-id55905 . -1) (undo-tree-id55906 . -1) (undo-tree-id55907 . -1) (undo-tree-id55908 . -1) (undo-tree-id55909 . -1) (undo-tree-id55910 . -1) (undo-tree-id55911 . -1) (undo-tree-id55912 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8593) (undo-tree-id55913 . 1) (undo-tree-id55914 . -1) 8592) nil (25767 13587 697256 271000) 0 nil])
([nil nil ((#("The simplest solution" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8569) (undo-tree-id55875 . -20) (undo-tree-id55876 . -4) (undo-tree-id55877 . -4) (undo-tree-id55878 . -4) (undo-tree-id55879 . -4) (undo-tree-id55880 . -4) (undo-tree-id55881 . -4) (undo-tree-id55882 . -4) (undo-tree-id55883 . -4) (undo-tree-id55884 . -4) (undo-tree-id55885 . -4) (undo-tree-id55886 . -4) (undo-tree-id55887 . -4) (undo-tree-id55888 . -4) (undo-tree-id55889 . -4) (undo-tree-id55890 . -4) (undo-tree-id55891 . -4) (undo-tree-id55892 . -4) (undo-tree-id55893 . -4) (undo-tree-id55894 . -4) (undo-tree-id55895 . -4) (undo-tree-id55896 . -4) (undo-tree-id55897 . -4) (undo-tree-id55898 . -4) (undo-tree-id55899 . -4) (undo-tree-id55900 . -4) (undo-tree-id55901 . -4) (undo-tree-id55902 . -21) (undo-tree-id55903 . -21)) nil (25767 13587 697246 551000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -8570) (undo-tree-id55865 . -2) (undo-tree-id55866 . -2) (undo-tree-id55867 . -2) (undo-tree-id55868 . -2) (undo-tree-id55869 . -2) (undo-tree-id55870 . -2) (undo-tree-id55871 . -2) (undo-tree-id55872 . -2) (undo-tree-id55873 . -2) (undo-tree-id55874 . -2) 8572 (8569 . 8572) 8568) nil (25767 13587 697227 807000) 0 nil])
([nil nil ((8573 . 8574) (#("to this problem is to j" 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8573) (undo-tree-id55729 . -22) (undo-tree-id55730 . -22) (undo-tree-id55731 . -22) (undo-tree-id55732 . -23) (undo-tree-id55733 . -22) (undo-tree-id55734 . -1) (undo-tree-id55735 . -1) (undo-tree-id55736 . -1) (undo-tree-id55737 . -1) (undo-tree-id55738 . -1) (undo-tree-id55739 . -1) (undo-tree-id55740 . -1) (undo-tree-id55741 . -1) (undo-tree-id55742 . -1) (undo-tree-id55743 . -1) (undo-tree-id55744 . -1) (undo-tree-id55745 . -1) (undo-tree-id55746 . -1) (undo-tree-id55747 . -1) (undo-tree-id55748 . -1) (undo-tree-id55749 . -1) (undo-tree-id55750 . -6) (undo-tree-id55751 . -6) (undo-tree-id55752 . -6) (undo-tree-id55753 . -6) (undo-tree-id55754 . -6) (undo-tree-id55755 . -6) (undo-tree-id55756 . -6) (undo-tree-id55757 . -6) (undo-tree-id55758 . -6) (undo-tree-id55759 . -6) (undo-tree-id55760 . -6) (undo-tree-id55761 . -6) (undo-tree-id55762 . -6) (undo-tree-id55763 . -6) (undo-tree-id55764 . -6) (undo-tree-id55765 . -6) (undo-tree-id55766 . -14) (undo-tree-id55767 . -14) (undo-tree-id55768 . -14) (undo-tree-id55769 . -14) (undo-tree-id55770 . -14) (undo-tree-id55771 . -14) (undo-tree-id55772 . -14) (undo-tree-id55773 . -14) (undo-tree-id55774 . -14) (undo-tree-id55775 . -14) (undo-tree-id55776 . -14) (undo-tree-id55777 . -14) (undo-tree-id55778 . -14) (undo-tree-id55779 . -14) (undo-tree-id55780 . -14) (undo-tree-id55781 . -14) (undo-tree-id55782 . -17) (undo-tree-id55783 . -17) (undo-tree-id55784 . -17) (undo-tree-id55785 . -17) (undo-tree-id55786 . -17) (undo-tree-id55787 . -17) (undo-tree-id55788 . -17) (undo-tree-id55789 . -17) (undo-tree-id55790 . -17) (undo-tree-id55791 . -17) (undo-tree-id55792 . -17) (undo-tree-id55793 . -17) (undo-tree-id55794 . -17) (undo-tree-id55795 . -17) (undo-tree-id55796 . -17) (undo-tree-id55797 . -17) (undo-tree-id55798 . -20) (undo-tree-id55799 . -20) (undo-tree-id55800 . -20) (undo-tree-id55801 . -20) (undo-tree-id55802 . -20) (undo-tree-id55803 . -20) (undo-tree-id55804 . -20) (undo-tree-id55805 . -20) (undo-tree-id55806 . -20) (undo-tree-id55807 . -20) (undo-tree-id55808 . -20) (undo-tree-id55809 . -20) (undo-tree-id55810 . -20) (undo-tree-id55811 . -20) (undo-tree-id55812 . -20) (undo-tree-id55813 . -20) (undo-tree-id55814 . -20) (undo-tree-id55815 . -20) (undo-tree-id55816 . -20) (undo-tree-id55817 . -20) (undo-tree-id55818 . -20) (undo-tree-id55819 . -20) (undo-tree-id55820 . -20) (undo-tree-id55821 . -20) (undo-tree-id55822 . -20) (undo-tree-id55823 . -20) (undo-tree-id55824 . -23) (undo-tree-id55825 . -23) (undo-tree-id55826 . -23) (undo-tree-id55827 . -23) (undo-tree-id55828 . -23) (undo-tree-id55829 . -23) (undo-tree-id55830 . -23) (undo-tree-id55831 . -23) (undo-tree-id55832 . -23) (undo-tree-id55833 . -23) (undo-tree-id55834 . -23) (undo-tree-id55835 . -23) (undo-tree-id55836 . -23) (undo-tree-id55837 . -23) (undo-tree-id55838 . -23) (undo-tree-id55839 . -23) (undo-tree-id55840 . -22) (undo-tree-id55841 . -22) (undo-tree-id55842 . -22) (undo-tree-id55843 . -22) (undo-tree-id55844 . -22) (undo-tree-id55845 . -22) (undo-tree-id55846 . -22) (undo-tree-id55847 . -22) (undo-tree-id55848 . -22) (undo-tree-id55849 . -22) (undo-tree-id55850 . -22) (undo-tree-id55851 . -22) (undo-tree-id55852 . -22) (undo-tree-id55853 . -22) (undo-tree-id55854 . -22) (undo-tree-id55855 . -22) (undo-tree-id55856 . -22) (undo-tree-id55857 . -22) (undo-tree-id55858 . -22) (undo-tree-id55859 . -22) (undo-tree-id55860 . -22) (undo-tree-id55861 . -22) (undo-tree-id55862 . -23) (undo-tree-id55863 . -23) (undo-tree-id55864 . -23) 8595) nil (25767 13587 697215 153000) 0 nil])
([nil nil ((8582 . 8583) (#("“" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8582) (undo-tree-id55728 . -1)) nil (25767 13587 696906 237000) 0 nil])
([nil nil ((8590 . 8591) (#("”" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8590) (undo-tree-id55727 . -1)) nil (25767 13587 696904 731000) 0 nil])
([nil nil ((8618 . 8619) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8618) (undo-tree-id55724 . -1) (undo-tree-id55725 . -1) (undo-tree-id55726 . -1)) nil (25767 13587 696903 6000) 0 nil])
([nil nil ((#("dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size])
dataset = dataset.window(window_length, shift=n_steps,
drop_remainder=True)
dataset = dataset.flat_map(lambda window: window.batch(window_length))
dataset = dataset.batch(1)
dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))
dataset = dataset.map(
lambda X_batch, Y_batch: (tf.one_hot(X_batch, depth=max_id),
Y_batch))
dataset = dataset.prefetch(1)
" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 31 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 37 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 38 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 44 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 60 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 64 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 98 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 99 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 105 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 114 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 115 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 120 122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 122 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 126 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 127 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 132 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 136 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 143 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 165 166 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 166 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 169 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 204 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 205 211 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 211 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 214 241 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 241 314 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 314 337 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 337 345 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 345 346 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 346 351 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 351 354 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 354 355 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 355 360 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 360 369 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 369 370 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 370 373 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 373 375 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 375 376 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 376 381 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 381 392 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 392 393 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 393 395 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 395 398 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 398 399 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 399 400 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 400 405 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 405 408 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 408 438 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8620) (undo-tree-id55653 . -437) (undo-tree-id55654 . -408) (undo-tree-id55655 . -408) (undo-tree-id55656 . 438) (undo-tree-id55657 . -7) (undo-tree-id55658 . -438) (undo-tree-id55659 . -408) (undo-tree-id55660 . 371) (undo-tree-id55661 . -74) (undo-tree-id55662 . -67) (undo-tree-id55663 . -67) (undo-tree-id55664 . -67) (undo-tree-id55665 . -67) (undo-tree-id55666 . -67) (undo-tree-id55667 . -67) (undo-tree-id55668 . -122) (undo-tree-id55669 . -122) (undo-tree-id55670 . -122) (undo-tree-id55671 . -122) (undo-tree-id55672 . -122) (undo-tree-id55673 . -122) (undo-tree-id55674 . -143) (undo-tree-id55675 . -143) (undo-tree-id55676 . -143) (undo-tree-id55677 . -143) (undo-tree-id55678 . -143) (undo-tree-id55679 . -143) (undo-tree-id55680 . -214) (undo-tree-id55681 . -214) (undo-tree-id55682 . -214) (undo-tree-id55683 . -214) (undo-tree-id55684 . -214) (undo-tree-id55685 . -214) (undo-tree-id55686 . -241) (undo-tree-id55687 . -241) (undo-tree-id55688 . -241) (undo-tree-id55689 . -241) (undo-tree-id55690 . -241) (undo-tree-id55691 . -241) (undo-tree-id55692 . -308) (undo-tree-id55693 . -308) (undo-tree-id55694 . -308) (undo-tree-id55695 . -308) (undo-tree-id55696 . -308) (undo-tree-id55697 . -308) (undo-tree-id55698 . -314) (undo-tree-id55699 . -314) (undo-tree-id55700 . -314) (undo-tree-id55701 . -314) (undo-tree-id55702 . -314) (undo-tree-id55703 . -314) (undo-tree-id55704 . -337) (undo-tree-id55705 . -337) (undo-tree-id55706 . -337) (undo-tree-id55707 . -337) (undo-tree-id55708 . -337) (undo-tree-id55709 . -337) (undo-tree-id55710 . -398) (undo-tree-id55711 . -398) (undo-tree-id55712 . -398) (undo-tree-id55713 . -398) (undo-tree-id55714 . -398) (undo-tree-id55715 . -398) (undo-tree-id55716 . -408) (undo-tree-id55717 . -408) (undo-tree-id55718 . -408) (undo-tree-id55719 . -408) (undo-tree-id55720 . -408) (undo-tree-id55721 . -408) (undo-tree-id55722 . -408) (undo-tree-id55723 . -438) 9028) nil (25767 13587 696896 934000) 0 nil])
([nil nil ((8673 . 8679) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8673 8679 nil nil nil t #s(yas--exit 8697 nil))) #s(yas--exit 8697 nil) 8 nil #s(yas--field 1 8673 8679 nil nil nil t #s(yas--exit 8697 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -8691) (undo-tree-id55608 . -2) (8661 . 8704) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8661) (undo-tree-id55609 . -2) (undo-tree-id55610 . -2) (undo-tree-id55611 . -1) (undo-tree-id55612 . -1) (undo-tree-id55613 . -1) (undo-tree-id55614 . -1) (undo-tree-id55615 . -1) (undo-tree-id55616 . -1) (undo-tree-id55617 . -1) (undo-tree-id55618 . -1) (undo-tree-id55619 . -1) (undo-tree-id55620 . -1) (undo-tree-id55621 . -1) (undo-tree-id55622 . -1) (undo-tree-id55623 . -1) (undo-tree-id55624 . -1) (undo-tree-id55625 . -1) (undo-tree-id55626 . -1) (undo-tree-id55627 . -1) (undo-tree-id55628 . -1) (undo-tree-id55629 . -1) (undo-tree-id55630 . -1) (undo-tree-id55631 . -1) (undo-tree-id55632 . -1) (undo-tree-id55633 . -1) (undo-tree-id55634 . -1) (undo-tree-id55635 . -1) (undo-tree-id55636 . -1) (undo-tree-id55637 . -1) (undo-tree-id55638 . -1) (undo-tree-id55639 . -2) (undo-tree-id55640 . -2) (undo-tree-id55641 . -2) (undo-tree-id55642 . -2) (undo-tree-id55643 . -2) (undo-tree-id55644 . -2) (undo-tree-id55645 . -2) (undo-tree-id55646 . -2) (undo-tree-id55647 . -2) (undo-tree-id55648 . -2) (undo-tree-id55649 . -2) (undo-tree-id55650 . -2) (undo-tree-id55651 . -2) (undo-tree-id55652 . -2) 8663 (8661 . 8663) (8660 . 8661)) nil (25767 13587 696147 153000) 0 nil])
([nil nil ((apply yas--snippet-revive 8661 8708 #s(yas--snippet nil (#s(yas--field 1 8673 8679 nil nil nil t #s(yas--exit 8697 nil))) #s(yas--exit 8697 nil) 8 nil #s(yas--field 1 8673 8679 nil nil nil t #s(yas--exit 8697 nil)) nil nil))) nil (25767 13587 696116 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8696 . 8697) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -9134) (8696 . 9135)) nil (25767 13587 697704 249000) 0 nil])
([nil nil ((#("Figure 16-2 summarizes the first steps.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 38 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8620) (undo-tree-id56027 . -39) (undo-tree-id56028 . 40) (undo-tree-id56029 . -40)) nil (25767 13597 995019 230000) 0 nil] [nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 8619) (undo-tree-id55508 . -1) (undo-tree-id55509 . -1) (undo-tree-id55510 . -1) (undo-tree-id55511 . -1) (undo-tree-id55512 . -1) (undo-tree-id55513 . -1) (undo-tree-id55514 . -1) (undo-tree-id55515 . -1) (undo-tree-id55516 . -1) (undo-tree-id55517 . -1) (undo-tree-id55518 . -1) (undo-tree-id55519 . -1) (undo-tree-id55520 . -1) (undo-tree-id55521 . -1) (undo-tree-id55522 . -1) (undo-tree-id55523 . -1) (undo-tree-id55524 . -1) (undo-tree-id55525 . -1) (undo-tree-id55526 . -1) (undo-tree-id55527 . -1) (undo-tree-id55528 . -1) (undo-tree-id55529 . -1) (undo-tree-id55530 . -1) (undo-tree-id55531 . -1) (undo-tree-id55532 . -1) (undo-tree-id55533 . -1) (undo-tree-id55534 . -1) (undo-tree-id55535 . -1) (undo-tree-id55536 . -1) (undo-tree-id55537 . -1) (undo-tree-id55538 . -1) (undo-tree-id55539 . -1) (undo-tree-id55540 . -1) (undo-tree-id55541 . -1) (undo-tree-id55542 . -1) (undo-tree-id55543 . -1) (undo-tree-id55544 . -1) (undo-tree-id55545 . -1) (undo-tree-id55546 . -1) (undo-tree-id55547 . -1) (undo-tree-id55548 . -1) (undo-tree-id55549 . -1) (undo-tree-id55550 . -1) (undo-tree-id55551 . -1) (undo-tree-id55552 . -1) (undo-tree-id55553 . -1) (undo-tree-id55554 . -1) (undo-tree-id55555 . -1) (undo-tree-id55556 . -1) (undo-tree-id55557 . -1) (undo-tree-id55558 . -1) (undo-tree-id55559 . -1) (undo-tree-id55560 . -1) (undo-tree-id55561 . -1) (undo-tree-id55562 . -1) (undo-tree-id55563 . -1) (undo-tree-id55564 . -1) (undo-tree-id55565 . -1) (undo-tree-id55566 . -1) (undo-tree-id55567 . -1) (undo-tree-id55568 . -1) (undo-tree-id55569 . -1) (undo-tree-id55570 . -1) (undo-tree-id55571 . -1) (undo-tree-id55572 . -1) (undo-tree-id55573 . -1) (undo-tree-id55574 . -1) (undo-tree-id55575 . -1) (undo-tree-id55576 . -1) (undo-tree-id55577 . -1) (undo-tree-id55578 . -1) (undo-tree-id55579 . -1) (undo-tree-id55580 . -1) (undo-tree-id55581 . -1) (undo-tree-id55582 . -1) (undo-tree-id55583 . -1) (undo-tree-id55584 . -1) (undo-tree-id55585 . -1) (undo-tree-id55586 . -1) (undo-tree-id55587 . -1) (undo-tree-id55588 . -1) (undo-tree-id55589 . -1) (undo-tree-id55590 . -1) (undo-tree-id55591 . -1) (undo-tree-id55592 . -1) (undo-tree-id55593 . -1) (undo-tree-id55594 . -1) (undo-tree-id55595 . -1) (undo-tree-id55596 . -1) (undo-tree-id55597 . -1) (undo-tree-id55598 . -1) (undo-tree-id55599 . -1) (undo-tree-id55600 . -1) (undo-tree-id55601 . -1) (undo-tree-id55602 . -1) (undo-tree-id55603 . -1) (undo-tree-id55604 . -1) (undo-tree-id55605 . -1) (undo-tree-id55606 . -1) (undo-tree-id55607 . -1)) ((8619 . 8620)) (25767 13587 696107 771000) 0 nil])
([nil nil ((8799 . 8800)) nil (25767 13609 247013 758000) 0 nil] [nil nil ((8750 . 8752) (8749 . 8750)) ((#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 8749) (undo-tree-id56030 . -1) (undo-tree-id56031 . -1) (undo-tree-id56032 . -1) (#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 8750) (undo-tree-id56033 . -1) (undo-tree-id56034 . -1) (undo-tree-id56035 . -1)) (25767 13597 994618 114000) 0 nil])
nil
([nil nil ((8972 . 8973) (8971 . 8972) 8966) nil (25767 13609 247012 666000) 0 nil])
nil
([nil nil ((9068 . 9069) (9067 . 9068) 9058) nil (25767 13609 247010 784000) 0 nil])
([nil nil ((9111 . 9112)) nil (25767 13609 247005 117000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 9100) (undo-tree-id56036 . -1) (t 25767 13609 312863 252000)) nil (25767 13611 496334 651000) 0 nil])
([nil nil ((8636 . 8642) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8636) (undo-tree-id56037 . -1) (undo-tree-id56038 . -1) (undo-tree-id56039 . -1) (undo-tree-id56040 . -1) (undo-tree-id56041 . -1) (undo-tree-id56042 . -1) (undo-tree-id56043 . -1) (undo-tree-id56044 . -1) (undo-tree-id56045 . -1) (undo-tree-id56046 . -1) (undo-tree-id56047 . -1) (undo-tree-id56048 . -1) (undo-tree-id56049 . -1) (undo-tree-id56050 . -1) (undo-tree-id56051 . -1) (undo-tree-id56052 . -1) (undo-tree-id56053 . -1) (undo-tree-id56054 . -1) (undo-tree-id56055 . -1) (undo-tree-id56056 . -1) (undo-tree-id56057 . -1) (undo-tree-id56058 . -1) (undo-tree-id56059 . -1) (undo-tree-id56060 . -1) (undo-tree-id56061 . -1) (undo-tree-id56062 . -1) (undo-tree-id56063 . -1) (undo-tree-id56064 . -1) (undo-tree-id56065 . -1) (undo-tree-id56066 . -1) (undo-tree-id56067 . -1) 8637 (8636 . 8637) (8633 . 8636) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8633) (undo-tree-id56068 . -1) (undo-tree-id56069 . -1) (undo-tree-id56070 . -1) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8634) (undo-tree-id56071 . -1) 8635 (8625 . 8635) (#("x" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8625) (undo-tree-id56072 . -1) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8626) (undo-tree-id56073 . -1) (#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -8627) (undo-tree-id56074 . -1) 8628 (8618 . 8628) (t 25767 13611 552960 127000)) nil (25767 13705 686012 48000) 0 nil])
([nil nil ((8640 . 8641)) nil (25767 13705 685973 273000) 0 nil])
([nil nil ((9136 . 9137) (t 25767 13705 748865 771000)) nil (25767 15689 904316 307000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10357 . 10358) (nil fontified nil 10356 . 10358) (nil fontified nil 10333 . 10356) (nil fontified nil 10277 . 10333) (nil fontified nil 10240 . 10277) (nil fontified nil 10180 . 10240) (nil fontified nil 10133 . 10180) (nil fontified nil 10097 . 10133) (nil fontified nil 10037 . 10097) (nil fontified nil 10003 . 10037) (nil fontified nil 9973 . 10003) (nil fontified nil 9899 . 9973) (nil fontified nil 9825 . 9899) (nil fontified nil 9749 . 9825) (nil fontified nil 9678 . 9749) (nil fontified nil 9607 . 9678) (nil fontified nil 9541 . 9607) (nil fontified nil 9467 . 9541) (nil fontified nil 9396 . 9467) (nil fontified nil 9344 . 9396) (nil fontified nil 9282 . 9344) (nil fontified nil 9210 . 9282) (nil fontified nil 9137 . 9210) (9137 . 10358)) nil (25767 15689 904314 871000) 0 nil])
([nil nil ((10358 . 10361)) nil (25767 15689 904311 352000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11420 . 11421) (nil fontified nil 11387 . 11421) (nil fontified nil 11314 . 11387) (nil fontified nil 11247 . 11314) (nil fontified nil 11172 . 11247) (nil fontified nil 11089 . 11172) (nil fontified nil 11000 . 11089) (nil fontified nil 10912 . 11000) (nil fontified nil 10908 . 10912) (nil fontified nil 10843 . 10908) (nil fontified nil 10771 . 10843) (nil fontified nil 10763 . 10771) (nil fontified nil 10692 . 10763) (nil fontified nil 10620 . 10692) (nil fontified nil 10594 . 10620) (nil fontified nil 10555 . 10594) (nil fontified nil 10502 . 10555) (nil fontified nil 10436 . 10502) (nil fontified nil 10361 . 10436) (10361 . 11421)) nil (25767 15689 904310 121000) 0 nil])
([nil nil ((9137 . 9139)) nil (25767 15689 904307 147000) 0 nil])
([nil nil ((9186 . 9188) (9185 . 9186)) nil (25767 15695 209753 467000) 0 nil])
([nil nil ((9348 . 9349) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9348) (undo-tree-id56096 . -1) (9286 . 9287) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9286) (undo-tree-id56097 . -1) (9214 . 9215) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9214) (undo-tree-id56098 . -1) 9213) nil (25767 15763 969560 824000) 0 nil] [nil nil ((11426 . 11427)) ((#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 11426) (undo-tree-id56084 . -1) (undo-tree-id56085 . -1) (t 25767 15691 373581 356000)) (25767 15691 258980 82000) 0 nil] [nil nil ((9187 . 9188) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9187) (undo-tree-id56075 . -1) (undo-tree-id56076 . -1) (undo-tree-id56077 . -1) (undo-tree-id56078 . -1) (undo-tree-id56079 . -1) (undo-tree-id56080 . -1) (undo-tree-id56081 . -1) (undo-tree-id56082 . -1)) ((9187 . 9188) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9187) (undo-tree-id56083 . 1)) (25767 15689 904301 743000) 0 nil])
([nil nil ((9400 . 9401) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9400) (undo-tree-id56136 . -1) 9366) nil (25767 15778 981124 408000) 0 nil] [nil nil ((9421 . 9422) (9420 . 9423)) ((#("
* " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 9420) (undo-tree-id56110 . -2) (undo-tree-id56111 . -2) (undo-tree-id56112 . -2) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9421)) (25767 15763 969063 382000) 0 nil] [nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9402) (undo-tree-id56086 . -1) (undo-tree-id56087 . -1) (undo-tree-id56088 . -1) (undo-tree-id56089 . -1) (undo-tree-id56090 . -1) (undo-tree-id56091 . -1) (undo-tree-id56092 . -1) (undo-tree-id56093 . -1) (undo-tree-id56094 . -1) (undo-tree-id56095 . -1) 9403 (9400 . 9403) 9371) ((#("
  " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9400) (undo-tree-id56099 . -1) (undo-tree-id56100 . -3) (undo-tree-id56101 . -3) (undo-tree-id56102 . -3) (undo-tree-id56103 . -3) (undo-tree-id56104 . -3) (undo-tree-id56105 . -3) (undo-tree-id56106 . -3) (undo-tree-id56107 . -3) (undo-tree-id56108 . -1) (undo-tree-id56109 . -1) (9402 . 9403)) (25767 15724 690990 162000) 0 nil])
nil
nil
([nil nil ((9334 . 9336) (9333 . 9334) (#("-" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9333) (undo-tree-id56123 . -1) (undo-tree-id56124 . -1) (undo-tree-id56125 . -1) (undo-tree-id56126 . -1) (undo-tree-id56127 . -1) (undo-tree-id56128 . -1) (undo-tree-id56129 . -1) (undo-tree-id56130 . -1) (undo-tree-id56131 . -1) (undo-tree-id56132 . -1) (undo-tree-id56133 . -1) (undo-tree-id56134 . -1) (undo-tree-id56135 . -1) 9334 (9333 . 9334)) nil (25767 15778 981121 968000) 0 nil])
nil
nil
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -9334) (undo-tree-id56113 . -2) (undo-tree-id56114 . -2) (undo-tree-id56115 . -2) (undo-tree-id56116 . -2) (undo-tree-id56117 . -2) (undo-tree-id56118 . -2) (undo-tree-id56119 . -2) (undo-tree-id56120 . -2) (undo-tree-id56121 . -2) (undo-tree-id56122 . -2) 9336 (9333 . 9336) 9315) nil (25767 15778 981110 707000) 0 nil])
([nil nil ((11430 . 11431)) nil (25767 15778 981089 989000) 0 nil])
([nil nil ((#("and finally" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9337) (undo-tree-id56164 . -10) (undo-tree-id56165 . -10) (undo-tree-id56166 . -10) (undo-tree-id56167 . -11) (undo-tree-id56168 . -10) (undo-tree-id56169 . -2) (undo-tree-id56170 . -2) (undo-tree-id56171 . -2) (undo-tree-id56172 . -2) (undo-tree-id56173 . -2) (undo-tree-id56174 . -2) (undo-tree-id56175 . -2) (undo-tree-id56176 . -2) (undo-tree-id56177 . -2) (undo-tree-id56178 . -2) (undo-tree-id56179 . -2) (undo-tree-id56180 . -2) (undo-tree-id56181 . -2) (undo-tree-id56182 . -2) (undo-tree-id56183 . -2) (undo-tree-id56184 . -2) (undo-tree-id56185 . -10) (undo-tree-id56186 . -10) (undo-tree-id56187 . -10) (undo-tree-id56188 . -10) (undo-tree-id56189 . -10) (undo-tree-id56190 . -10) (undo-tree-id56191 . -10) (undo-tree-id56192 . -10) (undo-tree-id56193 . -10) (undo-tree-id56194 . -10) (undo-tree-id56195 . -10) (undo-tree-id56196 . -10) (undo-tree-id56197 . -10) (undo-tree-id56198 . -10) (undo-tree-id56199 . -10) (undo-tree-id56200 . -10) (undo-tree-id56201 . -10) (undo-tree-id56202 . -10) (undo-tree-id56203 . -10) (undo-tree-id56204 . -10) (undo-tree-id56205 . -10) (undo-tree-id56206 . -10) (undo-tree-id56207 . -11) 9347 (t 25767 15779 48726 884000)) nil (25767 15805 328741 833000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9337) (undo-tree-id56161 . 1) (undo-tree-id56162 . -1) (undo-tree-id56163 . -1)) nil (25767 15805 328710 193000) 0 nil])
([nil nil ((9537 . 9538) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9537) (undo-tree-id56159 . -1) (9463 . 9464) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9463) (undo-tree-id56160 . -1) 9413) nil (25767 15805 328707 280000) 0 nil])
([nil nil ((9605 . 9607) (9604 . 9605) (#("-" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9604) (undo-tree-id56151 . -1) (undo-tree-id56152 . -1) (undo-tree-id56153 . -1) (undo-tree-id56154 . -1) (undo-tree-id56155 . -1) (undo-tree-id56156 . -1) (undo-tree-id56157 . -1) (undo-tree-id56158 . -1) 9605 (9604 . 9605) (9603 . 9604)) nil (25767 15805 328704 258000) 0 nil])
([nil nil ((9606 . 9607) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 9606) (undo-tree-id56140 . -1) (undo-tree-id56141 . -1) (undo-tree-id56142 . -1) (undo-tree-id56143 . -1) (undo-tree-id56144 . -1) (undo-tree-id56145 . -1) (undo-tree-id56146 . -1) (undo-tree-id56147 . -1) (undo-tree-id56148 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9607) (undo-tree-id56149 . 1) (undo-tree-id56150 . -1) 9606) nil (25767 15805 328696 570000) 0 nil])
([nil nil ((9824 . 9825) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9824) (undo-tree-id56137 . -1) (9748 . 9749) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9748) (undo-tree-id56138 . -1) (9677 . 9678) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9677) (undo-tree-id56139 . -1) 9606) nil (25767 15805 328684 333000) 0 nil])
([nil nil ((#("model = keras.models.Sequential([
keras.layers.GRU(128, return_sequences=True, stateful=True,
dropout=0.2, recurrent_dropout=0.2,
batch_input_shape=[batch_size, None, max_id]),
keras.layers.GRU(128, return_sequences=True, stateful=True,
dropout=0.2, recurrent_dropout=0.2),
keras.layers.TimeDistributed(keras.layers.Dense(max_id,
activation=\"softmax\"))
])

" 0 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 34 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 62 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 63 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 72 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 94 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 116 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 117 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 124 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 130 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 135 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 136 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 141 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 142 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 147 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 154 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 155 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 159 170 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 170 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 171 173 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 173 175 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 175 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 177 205 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 205 206 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 206 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 215 237 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 237 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 259 260 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 260 267 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 267 274 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 274 325 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 325 326 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 326 328 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 328 330 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 330 353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 353 354 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 354 355 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 355 356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 356 357 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10003) (undo-tree-id56208 . -356) (undo-tree-id56209 . -356) (undo-tree-id56210 . -355) (undo-tree-id56211 . -355) (undo-tree-id56212 . -355) (undo-tree-id56213 . -356) (undo-tree-id56214 . -357) (undo-tree-id56215 . -357) (undo-tree-id56216 . -357) (undo-tree-id56217 . -357) (undo-tree-id56218 . -357) (undo-tree-id56219 . -357) (undo-tree-id56220 . -356) (undo-tree-id56221 . -356) (undo-tree-id56222 . -356) (undo-tree-id56223 . -356) (undo-tree-id56224 . -356) (undo-tree-id56225 . -356) (undo-tree-id56226 . 15) (undo-tree-id56227 . -349) (undo-tree-id56228 . -354) (undo-tree-id56229 . -354) (undo-tree-id56230 . -354) (undo-tree-id56231 . -354) (undo-tree-id56232 . -354) (undo-tree-id56233 . -354) (undo-tree-id56234 . -351) (undo-tree-id56235 . -351) (undo-tree-id56236 . -351) (undo-tree-id56237 . -351) (undo-tree-id56238 . -351) (undo-tree-id56239 . -351) (undo-tree-id56240 . -328) (undo-tree-id56241 . -328) (undo-tree-id56242 . -328) (undo-tree-id56243 . -328) (undo-tree-id56244 . -328) (undo-tree-id56245 . -328) (undo-tree-id56246 . -272) (undo-tree-id56247 . -272) (undo-tree-id56248 . -272) (undo-tree-id56249 . -272) (undo-tree-id56250 . -272) (undo-tree-id56251 . -272) (undo-tree-id56252 . -235) (undo-tree-id56253 . -235) (undo-tree-id56254 . -235) (undo-tree-id56255 . -235) (undo-tree-id56256 . -235) (undo-tree-id56257 . -235) (undo-tree-id56258 . -175) (undo-tree-id56259 . -175) (undo-tree-id56260 . -175) (undo-tree-id56261 . -175) (undo-tree-id56262 . -175) (undo-tree-id56263 . -175) (undo-tree-id56264 . -128) (undo-tree-id56265 . -128) (undo-tree-id56266 . -128) (undo-tree-id56267 . -128) (undo-tree-id56268 . -128) (undo-tree-id56269 . -128) (undo-tree-id56270 . -92) (undo-tree-id56271 . -92) (undo-tree-id56272 . -92) (undo-tree-id56273 . -92) (undo-tree-id56274 . -92) (undo-tree-id56275 . -92) (undo-tree-id56276 . -32) (undo-tree-id56277 . -32) (undo-tree-id56278 . -32) (undo-tree-id56279 . -32) (undo-tree-id56280 . -32) (undo-tree-id56281 . -32) (undo-tree-id56282 . -7) (undo-tree-id56283 . -7) (undo-tree-id56284 . -7) (undo-tree-id56285 . -7) (undo-tree-id56286 . -7) (undo-tree-id56287 . -7) (undo-tree-id56288 . -6) (undo-tree-id56289 . -357) (undo-tree-id56290 . -356) (undo-tree-id56291 . 323) (undo-tree-id56292 . -39) (undo-tree-id56293 . -34) (undo-tree-id56294 . -34) (undo-tree-id56295 . -34) (undo-tree-id56296 . -34) (undo-tree-id56297 . -34) (undo-tree-id56298 . -34) (undo-tree-id56299 . -94) (undo-tree-id56300 . -94) (undo-tree-id56301 . -94) (undo-tree-id56302 . -94) (undo-tree-id56303 . -94) (undo-tree-id56304 . -94) (undo-tree-id56305 . -130) (undo-tree-id56306 . -130) (undo-tree-id56307 . -130) (undo-tree-id56308 . -130) (undo-tree-id56309 . -130) (undo-tree-id56310 . -130) (undo-tree-id56311 . -177) (undo-tree-id56312 . -177) (undo-tree-id56313 . -177) (undo-tree-id56314 . -177) (undo-tree-id56315 . -177) (undo-tree-id56316 . -177) (undo-tree-id56317 . -237) (undo-tree-id56318 . -237) (undo-tree-id56319 . -237) (undo-tree-id56320 . -237) (undo-tree-id56321 . -237) (undo-tree-id56322 . -237) (undo-tree-id56323 . -274) (undo-tree-id56324 . -274) (undo-tree-id56325 . -274) (undo-tree-id56326 . -274) (undo-tree-id56327 . -274) (undo-tree-id56328 . -274) (undo-tree-id56329 . -330) (undo-tree-id56330 . -330) (undo-tree-id56331 . -330) (undo-tree-id56332 . -330) (undo-tree-id56333 . -330) (undo-tree-id56334 . -330) (undo-tree-id56335 . -353) (undo-tree-id56336 . -353) (undo-tree-id56337 . -353) (undo-tree-id56338 . -353) (undo-tree-id56339 . -353) (undo-tree-id56340 . -353) (undo-tree-id56341 . -356) (undo-tree-id56342 . -356) (undo-tree-id56343 . -356) (undo-tree-id56344 . -356) (undo-tree-id56345 . -356) (undo-tree-id56346 . -356) (undo-tree-id56347 . -356) (undo-tree-id56348 . -357) 10359 (t 25767 15805 452540 63000)) nil (25767 15819 127268 541000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9125 . 9126) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -9482) (9125 . 9483)) nil (25767 15819 126554 250000) 0 nil])
([nil nil ((10256 . 10258) (t 25767 15819 192454 709000)) nil (25767 15835 782953 156000) 0 nil])
([nil nil ((10329 . 10330) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10329) (undo-tree-id56349 . -1) (10255 . 10256) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 10255) (undo-tree-id56350 . -1) (undo-tree-id56351 . -1) (undo-tree-id56352 . -1) (undo-tree-id56353 . -1) (undo-tree-id56354 . -1) (undo-tree-id56355 . -1) (undo-tree-id56356 . -1) (undo-tree-id56357 . -1) (undo-tree-id56358 . -1) (undo-tree-id56359 . -1) (undo-tree-id56360 . -1) (undo-tree-id56361 . -1) (undo-tree-id56362 . -1) (undo-tree-id56363 . -1) (undo-tree-id56364 . -1) (undo-tree-id56365 . -1) (undo-tree-id56366 . -1) (undo-tree-id56367 . -1) (undo-tree-id56368 . -1) (undo-tree-id56369 . -1) (undo-tree-id56370 . -1) (undo-tree-id56371 . -1) (undo-tree-id56372 . -1) (undo-tree-id56373 . -1) (undo-tree-id56374 . -1) (undo-tree-id56375 . -1) (undo-tree-id56376 . -1) (undo-tree-id56377 . -1) (undo-tree-id56378 . -1) (undo-tree-id56379 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10255) (undo-tree-id56380 . -1) 10203 (t 25767 15835 848361 732000)) nil (25767 15840 147033 758000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 7288) (undo-tree-id56493 . 1) (undo-tree-id56494 . -1) (undo-tree-id56495 . -1) (undo-tree-id56496 . -1) (t 25767 15840 208339 253000)) nil (25767 15906 782796 7000) 0 nil])
([nil nil ((#("
#+begin_src python :result outputs

dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size])
dataset = dataset.window(window_length, shift=n_steps,
drop_remainder=True)

dataset = dataset.flat_map(lambda window: window.batch(window_length))
dataset = dataset.batch(1)
dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))


dataset = dataset.map(
lambda X_batch, Y_batch: (tf.one_hot(X_batch, depth=max_id),
Y_batch))


dataset = dataset.prefetch(1)

model = keras.models.Sequential([
keras.layers.GRU(128, return_sequences=True, stateful=True,
dropout=0.2, recurrent_dropout=0.2,
batch_input_shape=[batch_size, None, max_id]),
keras.layers.GRU(128, return_sequences=True, stateful=True,
dropout=0.2, recurrent_dropout=0.2),
keras.layers.TimeDistributed(keras.layers.Dense(max_id,
activation=\"softmax\"))
])

#+end_src

" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 35 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 37 44 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 44 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 74 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 75 81 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 81 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 82 89 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 89 90 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 90 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 97 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 102 103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 103 104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 104 111 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 111 128 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 128 129 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 129 135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 135 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 136 142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 142 151 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 151 152 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 152 157 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 157 159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 159 163 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 163 164 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 164 169 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 169 173 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 173 174 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 174 178 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 178 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 179 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 180 181 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 181 188 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 188 203 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 203 204 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 204 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 207 208 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 208 214 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 214 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 235 236 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 236 242 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 242 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 243 249 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 249 250 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 250 251 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 251 252 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 252 259 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 259 275 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 275 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 276 277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 277 278 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 278 279 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 279 286 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 286 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 297 300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 300 301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 301 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 307 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 317 318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 318 325 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 325 326 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 326 332 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 332 333 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 333 342 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 342 343 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 343 348 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 348 349 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 349 350 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 350 351 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 351 352 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 352 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 354 361 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 361 372 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 372 375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 375 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 376 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 383 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 383 385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 385 386 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 386 391 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 391 394 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 394 395 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 395 400 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 400 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 402 403 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 403 409 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 409 410 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 410 413 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 413 414 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 414 415 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 415 416 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 416 421 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 421 432 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 432 433 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 433 435 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 435 436 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 436 438 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 438 439 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 439 440 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 440 445 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 445 446 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 446 447 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 447 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 448 449 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 449 450 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 450 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 457 476 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 476 477 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 477 478 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 478 479 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 479 480 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 480 481 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 481 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 486 512 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 512 513 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 513 514 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 514 515 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 515 531 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 531 532 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 532 543 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 543 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 544 553 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 553 554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 554 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 558 569 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 569 573 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 573 575 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 575 597 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 597 598 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 598 604 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 604 605 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 605 611 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 611 616 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 616 617 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 617 622 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 622 623 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 623 628 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 628 629 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 629 630 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 630 635 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 635 636 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 636 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 640 642 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 642 646 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 646 651 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 651 652 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 652 654 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 654 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 655 656 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 656 658 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 658 674 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 674 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 675 686 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 686 687 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 687 696 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 696 697 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 697 701 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 701 712 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 712 716 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 716 718 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 718 740 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 740 741 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 741 748 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 748 752 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 752 753 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 753 755 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 755 783 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 783 784 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 784 802 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 802 803 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 803 806 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 806 807 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 807 809 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 809 811 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 811 822 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 822 831 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 831 832 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 832 833 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 833 834 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 834 835 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 835 836 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 836 837 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 837 838 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 838 847 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 847 848 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line) 848 849 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 8644) (undo-tree-id56419 . -848) (undo-tree-id56420 . -848) (undo-tree-id56421 . -848) (undo-tree-id56422 . -849) (undo-tree-id56423 . -837) (undo-tree-id56424 . -512) (undo-tree-id56425 . -834) (undo-tree-id56426 . -848) (undo-tree-id56427 . -512) (undo-tree-id56428 . -849) (undo-tree-id56429 . -848) (undo-tree-id56430 . -1) (undo-tree-id56431 . -1) (undo-tree-id56432 . -1) (undo-tree-id56433 . -1) (undo-tree-id56434 . -1) (undo-tree-id56435 . -1) (undo-tree-id56436 . -1) (undo-tree-id56437 . -1) (undo-tree-id56438 . -1) (undo-tree-id56439 . -1) (undo-tree-id56440 . -1) (undo-tree-id56441 . -480) (undo-tree-id56442 . -480) (undo-tree-id56443 . -480) (undo-tree-id56444 . -480) (undo-tree-id56445 . -480) (undo-tree-id56446 . -480) (undo-tree-id56447 . -480) (undo-tree-id56448 . -480) (undo-tree-id56449 . -480) (undo-tree-id56450 . -480) (undo-tree-id56451 . -480) (undo-tree-id56452 . -480) (undo-tree-id56453 . -480) (undo-tree-id56454 . -480) (undo-tree-id56455 . -849) (undo-tree-id56456 . -849) (undo-tree-id56457 . -849) (undo-tree-id56458 . -849) (undo-tree-id56459 . -849) (undo-tree-id56460 . -849) (undo-tree-id56461 . -848) (undo-tree-id56462 . -848) (undo-tree-id56463 . -848) (undo-tree-id56464 . -848) (undo-tree-id56465 . -848) (undo-tree-id56466 . -848) (undo-tree-id56467 . -838) (undo-tree-id56468 . -838) (undo-tree-id56469 . -838) (undo-tree-id56470 . -838) (undo-tree-id56471 . -838) (undo-tree-id56472 . -838) (undo-tree-id56473 . -837) (undo-tree-id56474 . -837) (undo-tree-id56475 . -837) (undo-tree-id56476 . -837) (undo-tree-id56477 . -837) (undo-tree-id56478 . -837) (undo-tree-id56479 . -838) (undo-tree-id56480 . -838) (undo-tree-id56481 . -838) (undo-tree-id56482 . -838) (undo-tree-id56483 . -838) (undo-tree-id56484 . -838) (undo-tree-id56485 . -848) (undo-tree-id56486 . -848) (undo-tree-id56487 . -848) (undo-tree-id56488 . -848) (undo-tree-id56489 . -848) (undo-tree-id56490 . -848) (undo-tree-id56491 . -848) (undo-tree-id56492 . -849) 9492) nil (25767 15906 782789 560000) 0 nil])
([nil nil ((10573 . 10574) (10572 . 10573) 10572) nil (25767 15906 782596 195000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10574 . 10575) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -11423) (10574 . 11424)) nil (25767 15906 782594 628000) 0 nil])
([nil nil ((9511 . 9513)) nil (25767 15906 782593 249000) 0 nil])
([nil nil ((9587 . 9588) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9587) (undo-tree-id56412 . -1) (undo-tree-id56413 . -1) (undo-tree-id56414 . -1) (undo-tree-id56415 . -1) (undo-tree-id56416 . -1) (undo-tree-id56417 . -1) (undo-tree-id56418 . -1) 9512) nil (25767 15906 782591 488000) 0 nil])
([nil nil ((#("class ResetStatesCallback(keras.callbacks.Callback):
def on_epoch_begin(self, epoch, logs):
self.model.reset_states()
" 0 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 53 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 60 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 65 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 66 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 71 92 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 92 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 108 109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 109 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 115 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9654) (undo-tree-id56381 . -117) (undo-tree-id56382 . -92) (undo-tree-id56383 . -92) (undo-tree-id56384 . -92) (undo-tree-id56385 . -92) (undo-tree-id56386 . -92) (undo-tree-id56387 . -92) (undo-tree-id56388 . -92) (undo-tree-id56389 . -92) (undo-tree-id56390 . -53) (undo-tree-id56391 . -53) (undo-tree-id56392 . -53) (undo-tree-id56393 . -53) (undo-tree-id56394 . -53) (undo-tree-id56395 . -53) (undo-tree-id56396 . -118) (undo-tree-id56397 . -92) (undo-tree-id56398 . -53) (undo-tree-id56399 . -53) (undo-tree-id56400 . -53) (undo-tree-id56401 . -53) (undo-tree-id56402 . -53) (undo-tree-id56403 . -53) (undo-tree-id56404 . -92) (undo-tree-id56405 . -92) (undo-tree-id56406 . -92) (undo-tree-id56407 . -92) (undo-tree-id56408 . -92) (undo-tree-id56409 . -92) (undo-tree-id56410 . -92) (undo-tree-id56411 . -118) 9746) nil (25767 15906 782583 830000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11296 . 11297) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -11414) (11296 . 11415)) nil (25767 15906 782555 319000) 0 nil])
([nil nil ((11350 . 11354)) nil (25767 15906 782553 760000) 0 nil])
([nil nil ((11393 . 11397)) nil (25767 15906 782548 616000) 0 nil])
([nil nil ((9655 . 9657) (9653 . 9655) (t 25767 15906 900086 125000)) nil (25767 15949 674592 345000) 0 nil])
([nil nil ((9728 . 9729) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9728) (undo-tree-id56537 . -1) (9656 . 9657) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 9656) (undo-tree-id56538 . -1) (undo-tree-id56539 . 1) (undo-tree-id56540 . -1) (undo-tree-id56541 . -1) (undo-tree-id56542 . -1) (undo-tree-id56543 . -1) (undo-tree-id56544 . -1) (undo-tree-id56545 . -1) (undo-tree-id56546 . -1) (undo-tree-id56547 . -1) (undo-tree-id56548 . -1) (undo-tree-id56549 . -1) (undo-tree-id56550 . -1) (undo-tree-id56551 . -1) (undo-tree-id56552 . -1) (undo-tree-id56553 . -1) (undo-tree-id56554 . -1) (undo-tree-id56555 . -1) (undo-tree-id56556 . -1) (undo-tree-id56557 . -1) (undo-tree-id56558 . -1) (undo-tree-id56559 . -1) (undo-tree-id56560 . -1) (undo-tree-id56561 . -1) (undo-tree-id56562 . -1) (undo-tree-id56563 . -1) (undo-tree-id56564 . -1) (undo-tree-id56565 . -1) (undo-tree-id56566 . -1) (undo-tree-id56567 . -1) (undo-tree-id56568 . -1) (undo-tree-id56569 . -1) (undo-tree-id56570 . -1) (undo-tree-id56571 . -1) (undo-tree-id56572 . -1) (undo-tree-id56573 . -1) (undo-tree-id56574 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9657) (undo-tree-id56575 . -1) (undo-tree-id56576 . -1) (undo-tree-id56577 . -1) (undo-tree-id56578 . -1) (undo-tree-id56579 . -1) (undo-tree-id56580 . -1) (undo-tree-id56581 . -1) (undo-tree-id56582 . -1) (undo-tree-id56583 . -1) (undo-tree-id56584 . -1) (undo-tree-id56585 . -1) (undo-tree-id56586 . -1) (undo-tree-id56587 . -1) (undo-tree-id56588 . -1) (undo-tree-id56589 . -1) (undo-tree-id56590 . -1) (undo-tree-id56591 . -1) (undo-tree-id56592 . -1) (undo-tree-id56593 . -1) (undo-tree-id56594 . -1) (undo-tree-id56595 . -1) (undo-tree-id56596 . -1) (undo-tree-id56597 . -1) (undo-tree-id56598 . -1) (undo-tree-id56599 . -1) (undo-tree-id56600 . -1) (undo-tree-id56601 . -1) (undo-tree-id56602 . -1) 9655) nil (25767 15949 674588 970000) 0 nil])
([nil nil ((9799 . 9800) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9799) (undo-tree-id56530 . -1) (undo-tree-id56531 . -1) (undo-tree-id56532 . -1) (undo-tree-id56533 . -1) (undo-tree-id56534 . -1) (undo-tree-id56535 . -1) (undo-tree-id56536 . -1) 9778) nil (25767 15949 674546 898000) 0 nil])
([nil nil ((#("model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\")
model.fit(dataset, epochs=50, callbacks=[ResetStatesCallback()])
" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 27 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 38 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 39 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 51 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 72 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 90 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9808) (undo-tree-id56497 . -136) (undo-tree-id56498 . -95) (undo-tree-id56499 . -95) (undo-tree-id56500 . -23) (undo-tree-id56501 . -23) (undo-tree-id56502 . -23) (undo-tree-id56503 . -23) (undo-tree-id56504 . -23) (undo-tree-id56505 . -23) (undo-tree-id56506 . -137) (undo-tree-id56507 . -23) (undo-tree-id56508 . -95) (undo-tree-id56509 . -23) (undo-tree-id56510 . -23) (undo-tree-id56511 . -23) (undo-tree-id56512 . -23) (undo-tree-id56513 . -23) (undo-tree-id56514 . -23) (undo-tree-id56515 . -23) (undo-tree-id56516 . -23) (undo-tree-id56517 . -23) (undo-tree-id56518 . -23) (undo-tree-id56519 . -23) (undo-tree-id56520 . -23) (undo-tree-id56521 . -23) (undo-tree-id56522 . -95) (undo-tree-id56523 . -95) (undo-tree-id56524 . -95) (undo-tree-id56525 . -95) (undo-tree-id56526 . -95) (undo-tree-id56527 . -95) (undo-tree-id56528 . -95) (undo-tree-id56529 . -137) 9903) nil (25767 15949 674540 589000) 0 nil])
([nil nil ((11293 . 11295) (11288 . 11293) 11259) nil (25767 15949 674507 988000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11295 . 11296) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -11432) (11295 . 11433)) nil (25767 15949 674502 544000) 0 nil])
([nil nil ((#("TIP
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 9808) (undo-tree-id56603 . -3) (undo-tree-id56604 . -4) (undo-tree-id56605 . -4) (undo-tree-id56606 . -4) (undo-tree-id56607 . -4) (undo-tree-id56608 . -4) (undo-tree-id56609 . -4) (undo-tree-id56610 . -4) (undo-tree-id56611 . -4) (undo-tree-id56612 . -4) (undo-tree-id56613 . -4) (undo-tree-id56614 . -4) (undo-tree-id56615 . -4) (undo-tree-id56616 . -4) (undo-tree-id56617 . -4) (undo-tree-id56618 . -4) (undo-tree-id56619 . -4) (undo-tree-id56620 . -4) (undo-tree-id56621 . -4) (undo-tree-id56622 . -4) (undo-tree-id56623 . -4) (undo-tree-id56624 . -4) (undo-tree-id56625 . -4) (undo-tree-id56626 . -4) (undo-tree-id56627 . -4) (undo-tree-id56628 . -4) (undo-tree-id56629 . -4) (undo-tree-id56630 . -4) (undo-tree-id56631 . -4) (undo-tree-id56632 . -4) (undo-tree-id56633 . -4) (undo-tree-id56634 . -4) (undo-tree-id56635 . -4) (undo-tree-id56636 . -4) (undo-tree-id56637 . -4) (undo-tree-id56638 . -4) (undo-tree-id56639 . -4) (undo-tree-id56640 . -4) (undo-tree-id56641 . -4) (undo-tree-id56642 . -4) (undo-tree-id56643 . -4) (undo-tree-id56644 . -4) (undo-tree-id56645 . -4) (undo-tree-id56646 . -4) (undo-tree-id56647 . -4) (undo-tree-id56648 . -4) (undo-tree-id56649 . -4) (undo-tree-id56650 . -4) (undo-tree-id56651 . -4) (undo-tree-id56652 . -4) (undo-tree-id56653 . -4) (t 25767 15949 744006 988000)) nil (25767 15963 506614 846000) 0 nil])
([nil nil ((9809 . 9811) (9808 . 9809)) nil (25767 15963 506521 7000) 0 nil])
([nil nil ((9898 . 9899) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9898) (undo-tree-id56654 . -1) 9811 (t 25767 15963 575994 297000)) nil (25767 15968 287247 524000) 0 nil])
([nil nil ((9956 . 9958) (9954 . 9956) (t 25767 15968 359991 311000)) nil (25767 15995 851764 391000) 0 nil])
([nil nil ((10216 . 10217) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10216) (undo-tree-id56662 . -1) (10149 . 10150) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10149) (undo-tree-id56663 . -1) (10074 . 10075) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10074) (undo-tree-id56664 . -1) (9991 . 9992) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9991) (undo-tree-id56665 . -1) 9957) nil (25767 15995 851761 969000) 0 nil])
([nil nil ((10289 . 10290) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10289) (undo-tree-id56655 . -1) (undo-tree-id56656 . -1) (undo-tree-id56657 . -1) (undo-tree-id56658 . -1) (undo-tree-id56659 . -1) (undo-tree-id56660 . -1) (undo-tree-id56661 . -1) 10211) nil (25767 15995 851748 920000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -8693) (undo-tree-id56666 . -2) (undo-tree-id56667 . -2) (undo-tree-id56668 . -2) (undo-tree-id56669 . -2) (undo-tree-id56670 . -2) (undo-tree-id56671 . -2) (undo-tree-id56672 . -2) (undo-tree-id56673 . -2) (undo-tree-id56674 . -2) (undo-tree-id56675 . -2) 8695 (8692 . 8695) (t 25767 15995 919987 728000) 8654) nil (25767 16085 213166 198000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8839) (undo-tree-id56798 . -1) (undo-tree-id56799 . -1) (t 25767 16085 284123 852000)) nil (25767 16124 412631 778000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8839) (undo-tree-id56796 . -1) (undo-tree-id56797 . -1)) nil (25767 16124 412629 167000) 0 nil])
([nil nil ((8839 . 8840)) nil (25767 16124 412626 644000) 0 nil])
([nil nil ((#("For example, we could " 0 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8696) (undo-tree-id56676 . -21) (undo-tree-id56677 . -21) (undo-tree-id56678 . -14) (undo-tree-id56679 . -21) (undo-tree-id56680 . -6) (undo-tree-id56681 . -6) (undo-tree-id56682 . -6) (undo-tree-id56683 . -6) (undo-tree-id56684 . -6) (undo-tree-id56685 . -6) (undo-tree-id56686 . -6) (undo-tree-id56687 . -6) (undo-tree-id56688 . -6) (undo-tree-id56689 . -6) (undo-tree-id56690 . -6) (undo-tree-id56691 . -22) (undo-tree-id56692 . -21) (undo-tree-id56693 . -2) (undo-tree-id56694 . -2) (undo-tree-id56695 . -2) (undo-tree-id56696 . -2) (undo-tree-id56697 . -2) (undo-tree-id56698 . -2) (undo-tree-id56699 . -2) (undo-tree-id56700 . -2) (undo-tree-id56701 . -2) (undo-tree-id56702 . -2) (undo-tree-id56703 . -2) (undo-tree-id56704 . -2) (undo-tree-id56705 . -2) (undo-tree-id56706 . -2) (undo-tree-id56707 . -2) (undo-tree-id56708 . -2) (undo-tree-id56709 . -10) (undo-tree-id56710 . -10) (undo-tree-id56711 . -10) (undo-tree-id56712 . -10) (undo-tree-id56713 . -10) (undo-tree-id56714 . -10) (undo-tree-id56715 . -10) (undo-tree-id56716 . -10) (undo-tree-id56717 . -10) (undo-tree-id56718 . -10) (undo-tree-id56719 . -10) (undo-tree-id56720 . -10) (undo-tree-id56721 . -10) (undo-tree-id56722 . -10) (undo-tree-id56723 . -10) (undo-tree-id56724 . -10) (undo-tree-id56725 . -11) (undo-tree-id56726 . -11) (undo-tree-id56727 . -11) (undo-tree-id56728 . -11) (undo-tree-id56729 . -11) (undo-tree-id56730 . -11) (undo-tree-id56731 . -11) (undo-tree-id56732 . -11) (undo-tree-id56733 . -11) (undo-tree-id56734 . -11) (undo-tree-id56735 . -11) (undo-tree-id56736 . -11) (undo-tree-id56737 . -11) (undo-tree-id56738 . -11) (undo-tree-id56739 . -11) (undo-tree-id56740 . -11) (undo-tree-id56741 . -14) (undo-tree-id56742 . -14) (undo-tree-id56743 . -14) (undo-tree-id56744 . -14) (undo-tree-id56745 . -14) (undo-tree-id56746 . -14) (undo-tree-id56747 . -14) (undo-tree-id56748 . -14) (undo-tree-id56749 . -14) (undo-tree-id56750 . -14) (undo-tree-id56751 . -14) (undo-tree-id56752 . -14) (undo-tree-id56753 . -14) (undo-tree-id56754 . -14) (undo-tree-id56755 . -14) (undo-tree-id56756 . -14) (undo-tree-id56757 . -20) (undo-tree-id56758 . -20) (undo-tree-id56759 . -20) (undo-tree-id56760 . -20) (undo-tree-id56761 . -20) (undo-tree-id56762 . -20) (undo-tree-id56763 . -20) (undo-tree-id56764 . -20) (undo-tree-id56765 . -20) (undo-tree-id56766 . -20) (undo-tree-id56767 . -20) (undo-tree-id56768 . -20) (undo-tree-id56769 . -20) (undo-tree-id56770 . -20) (undo-tree-id56771 . -20) (undo-tree-id56772 . -20) (undo-tree-id56773 . -20) (undo-tree-id56774 . -20) (undo-tree-id56775 . -20) (undo-tree-id56776 . -20) (undo-tree-id56777 . -20) (undo-tree-id56778 . -21) (undo-tree-id56779 . -21) (undo-tree-id56780 . -21) (undo-tree-id56781 . -21) (undo-tree-id56782 . -21) (undo-tree-id56783 . -21) (undo-tree-id56784 . -21) (undo-tree-id56785 . -21) (undo-tree-id56786 . -21) (undo-tree-id56787 . -21) (undo-tree-id56788 . -21) (undo-tree-id56789 . -21) (undo-tree-id56790 . -21) (undo-tree-id56791 . -21) (undo-tree-id56792 . -21) (undo-tree-id56793 . -21) (undo-tree-id56794 . -21) (undo-tree-id56795 . -22) 8717) nil (25767 16124 412617 872000) 0 nil])
([nil nil ((#("(see the notebook for the full code)" 0 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9051) (undo-tree-id56873 . -35) (undo-tree-id56874 . -10) (undo-tree-id56875 . -10) (undo-tree-id56876 . -10) (undo-tree-id56877 . -10) (undo-tree-id56878 . -10) (undo-tree-id56879 . -10) (undo-tree-id56880 . -10) (undo-tree-id56881 . -10) (undo-tree-id56882 . -10) (undo-tree-id56883 . -10) (undo-tree-id56884 . -10) (undo-tree-id56885 . -10) (undo-tree-id56886 . -10) (undo-tree-id56887 . -10) (undo-tree-id56888 . -10) (undo-tree-id56889 . -10) (undo-tree-id56890 . -10) (undo-tree-id56891 . -10) (undo-tree-id56892 . -10) (undo-tree-id56893 . -10) (undo-tree-id56894 . -10) (undo-tree-id56895 . -10) (undo-tree-id56896 . -10) (undo-tree-id56897 . -10) (undo-tree-id56898 . -10) (undo-tree-id56899 . -10) (undo-tree-id56900 . -10) (undo-tree-id56901 . -10) (undo-tree-id56902 . -10) (undo-tree-id56903 . -10) (undo-tree-id56904 . -10) (undo-tree-id56905 . -10) (undo-tree-id56906 . -10) (undo-tree-id56907 . -10) (undo-tree-id56908 . -10) (undo-tree-id56909 . -10) (undo-tree-id56910 . -10) (undo-tree-id56911 . -10) (undo-tree-id56912 . -10) (undo-tree-id56913 . -10) (undo-tree-id56914 . -10) (undo-tree-id56915 . -10) (undo-tree-id56916 . -10) (undo-tree-id56917 . -10) (undo-tree-id56918 . -10) (undo-tree-id56919 . -36) 9061 (t 25767 16124 524248 77000)) nil (25767 16150 989867 118000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9050) (undo-tree-id56800 . -1) (undo-tree-id56801 . -1) (undo-tree-id56802 . -1) (undo-tree-id56803 . -1) (undo-tree-id56804 . -1) (undo-tree-id56805 . -1) (undo-tree-id56806 . -1) (undo-tree-id56807 . -1) (undo-tree-id56808 . -1) (undo-tree-id56809 . -1) (undo-tree-id56810 . -1) (undo-tree-id56811 . -1) (undo-tree-id56812 . -1) (undo-tree-id56813 . -1) (undo-tree-id56814 . -1) (undo-tree-id56815 . -1) (undo-tree-id56816 . -1) (undo-tree-id56817 . -1) (undo-tree-id56818 . -1) (undo-tree-id56819 . -1) (undo-tree-id56820 . -1) (undo-tree-id56821 . -1) (undo-tree-id56822 . -1) (undo-tree-id56823 . -1) (undo-tree-id56824 . -1) (undo-tree-id56825 . -1) (undo-tree-id56826 . -1) (undo-tree-id56827 . -1) (undo-tree-id56828 . -1) (undo-tree-id56829 . -1) (undo-tree-id56830 . -1) (undo-tree-id56831 . -1) (undo-tree-id56832 . -1) (undo-tree-id56833 . -1) (undo-tree-id56834 . -1) (undo-tree-id56835 . -1) (undo-tree-id56836 . -1) (undo-tree-id56837 . -1) (undo-tree-id56838 . -1) (undo-tree-id56839 . -1) (undo-tree-id56840 . -1) (undo-tree-id56841 . -1) (undo-tree-id56842 . -1) (undo-tree-id56843 . -1) (undo-tree-id56844 . -1) (undo-tree-id56845 . -1) (undo-tree-id56846 . -1) (undo-tree-id56847 . -1) (undo-tree-id56848 . -1) (undo-tree-id56849 . -1) (undo-tree-id56850 . -1) (undo-tree-id56851 . -1) (undo-tree-id56852 . -1) (undo-tree-id56853 . -1) (undo-tree-id56854 . -1) (undo-tree-id56855 . -1) (undo-tree-id56856 . -1) (undo-tree-id56857 . -1) (undo-tree-id56858 . -1) (undo-tree-id56859 . -1) (undo-tree-id56860 . -1) (undo-tree-id56861 . -1) (undo-tree-id56862 . -1) (undo-tree-id56863 . -1) (undo-tree-id56864 . -1) (undo-tree-id56865 . -1) (undo-tree-id56866 . -1) (undo-tree-id56867 . -1) (undo-tree-id56868 . -1) (undo-tree-id56869 . -1) (undo-tree-id56870 . -1) (undo-tree-id56871 . -1) (undo-tree-id56872 . -1)) nil (25767 16150 989833 23000) 0 nil])
([nil nil ((8937 . 8939) (8935 . 8937) (t 25767 16151 56352 193000)) nil (25767 16161 752869 719000) 0 nil])
([nil nil ((#("where " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 8939) (undo-tree-id56920 . -5) (undo-tree-id56921 . -5) (undo-tree-id56922 . 6) (undo-tree-id56923 . -5) (undo-tree-id56924 . -6) (undo-tree-id56925 . -5) (undo-tree-id56926 . -4) (undo-tree-id56927 . -4) (undo-tree-id56928 . -4) (undo-tree-id56929 . -4) (undo-tree-id56930 . -4) (undo-tree-id56931 . -4) (undo-tree-id56932 . -4) (undo-tree-id56933 . -4) (undo-tree-id56934 . -4) (undo-tree-id56935 . -4) (undo-tree-id56936 . -4) (undo-tree-id56937 . -4) (undo-tree-id56938 . -4) (undo-tree-id56939 . -4) (undo-tree-id56940 . -4) (undo-tree-id56941 . -4) (undo-tree-id56942 . -4) (undo-tree-id56943 . -4) (undo-tree-id56944 . -4) (undo-tree-id56945 . -4) (undo-tree-id56946 . -4) (undo-tree-id56947 . -4) (undo-tree-id56948 . -4) (undo-tree-id56949 . -4) (undo-tree-id56950 . -4) (undo-tree-id56951 . -4) (undo-tree-id56952 . -5) (undo-tree-id56953 . -5) (undo-tree-id56954 . -5) (undo-tree-id56955 . -5) (undo-tree-id56956 . -5) (undo-tree-id56957 . -5) (undo-tree-id56958 . -5) (undo-tree-id56959 . -5) (undo-tree-id56960 . -5) (undo-tree-id56961 . -5) (undo-tree-id56962 . -5) (undo-tree-id56963 . -5) (undo-tree-id56964 . -5) (undo-tree-id56965 . -5) (undo-tree-id56966 . -5) (undo-tree-id56967 . -5) (undo-tree-id56968 . -5) (undo-tree-id56969 . -5) (undo-tree-id56970 . -5) (undo-tree-id56971 . -5) (undo-tree-id56972 . -5) (undo-tree-id56973 . -5) (undo-tree-id56974 . -6) 8944) nil (25767 16161 752864 260000) 0 nil])
([nil nil ((#("Now let’s " 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9053) (undo-tree-id56975 . -9) (undo-tree-id56976 . -9) (undo-tree-id56977 . -9) (undo-tree-id56978 . -10) (undo-tree-id56979 . -9) (undo-tree-id56980 . -2) (undo-tree-id56981 . -2) (undo-tree-id56982 . -2) (undo-tree-id56983 . -2) (undo-tree-id56984 . -2) (undo-tree-id56985 . -2) (undo-tree-id56986 . -2) (undo-tree-id56987 . -2) (undo-tree-id56988 . -2) (undo-tree-id56989 . -2) (undo-tree-id56990 . -2) (undo-tree-id56991 . -2) (undo-tree-id56992 . -2) (undo-tree-id56993 . -2) (undo-tree-id56994 . -2) (undo-tree-id56995 . -2) (undo-tree-id56996 . -6) (undo-tree-id56997 . -6) (undo-tree-id56998 . -6) (undo-tree-id56999 . -6) (undo-tree-id57000 . -6) (undo-tree-id57001 . -6) (undo-tree-id57002 . -6) (undo-tree-id57003 . -6) (undo-tree-id57004 . -6) (undo-tree-id57005 . -6) (undo-tree-id57006 . -6) (undo-tree-id57007 . -6) (undo-tree-id57008 . -6) (undo-tree-id57009 . -6) (undo-tree-id57010 . -6) (undo-tree-id57011 . -6) (undo-tree-id57012 . -7) (undo-tree-id57013 . -7) (undo-tree-id57014 . -7) (undo-tree-id57015 . -7) (undo-tree-id57016 . -7) (undo-tree-id57017 . -7) (undo-tree-id57018 . -7) (undo-tree-id57019 . -7) (undo-tree-id57020 . -7) (undo-tree-id57021 . -7) (undo-tree-id57022 . -7) (undo-tree-id57023 . -7) (undo-tree-id57024 . -7) (undo-tree-id57025 . -7) (undo-tree-id57026 . -7) (undo-tree-id57027 . -7) (undo-tree-id57028 . -8) (undo-tree-id57029 . -8) (undo-tree-id57030 . -8) (undo-tree-id57031 . -8) (undo-tree-id57032 . -8) (undo-tree-id57033 . -8) (undo-tree-id57034 . -8) (undo-tree-id57035 . -8) (undo-tree-id57036 . -8) (undo-tree-id57037 . -8) (undo-tree-id57038 . -8) (undo-tree-id57039 . -8) (undo-tree-id57040 . -8) (undo-tree-id57041 . -8) (undo-tree-id57042 . -8) (undo-tree-id57043 . -8) (undo-tree-id57044 . -8) (undo-tree-id57045 . -8) (undo-tree-id57046 . -8) (undo-tree-id57047 . -8) (undo-tree-id57048 . -8) (undo-tree-id57049 . -9) (undo-tree-id57050 . -9) (undo-tree-id57051 . -9) (undo-tree-id57052 . -9) (undo-tree-id57053 . -9) (undo-tree-id57054 . -9) (undo-tree-id57055 . -9) (undo-tree-id57056 . -9) (undo-tree-id57057 . -9) (undo-tree-id57058 . -9) (undo-tree-id57059 . -9) (undo-tree-id57060 . -9) (undo-tree-id57061 . -9) (undo-tree-id57062 . -9) (undo-tree-id57063 . -9) (undo-tree-id57064 . -9) (undo-tree-id57065 . -9) (undo-tree-id57066 . -9) (undo-tree-id57067 . -9) (undo-tree-id57068 . -9) (undo-tree-id57069 . -9) (undo-tree-id57070 . -9) (undo-tree-id57071 . -10) 9062 (t 25767 16161 824398 851000)) nil (25767 16170 46800 498000) 0 nil])
([nil nil ((9080 . 9082) (9078 . 9080) (t 25767 16170 108436 430000)) nil (25767 16216 645717 876000) 0 nil])
([nil nil ((#("First, we need to " 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9082) (undo-tree-id58130 . -17) (undo-tree-id58131 . -17) (undo-tree-id58132 . 18) (undo-tree-id58133 . -17) (undo-tree-id58134 . -4) (undo-tree-id58135 . -4) (undo-tree-id58136 . -4) (undo-tree-id58137 . -4) (undo-tree-id58138 . -4) (undo-tree-id58139 . -4) (undo-tree-id58140 . -5) (undo-tree-id58141 . -5) (undo-tree-id58142 . -5) (undo-tree-id58143 . -5) (undo-tree-id58144 . -5) (undo-tree-id58145 . -5) (undo-tree-id58146 . -5) (undo-tree-id58147 . -5) (undo-tree-id58148 . -5) (undo-tree-id58149 . -5) (undo-tree-id58150 . -5) (undo-tree-id58151 . -5) (undo-tree-id58152 . -5) (undo-tree-id58153 . -5) (undo-tree-id58154 . -5) (undo-tree-id58155 . -5) (undo-tree-id58156 . -18) (undo-tree-id58157 . -17) (undo-tree-id58158 . -4) (undo-tree-id58159 . -4) (undo-tree-id58160 . -4) (undo-tree-id58161 . -4) (undo-tree-id58162 . -4) (undo-tree-id58163 . -4) (undo-tree-id58164 . -4) (undo-tree-id58165 . -4) (undo-tree-id58166 . -4) (undo-tree-id58167 . -4) (undo-tree-id58168 . -4) (undo-tree-id58169 . -4) (undo-tree-id58170 . -4) (undo-tree-id58171 . -4) (undo-tree-id58172 . -4) (undo-tree-id58173 . -4) (undo-tree-id58174 . -5) (undo-tree-id58175 . -5) (undo-tree-id58176 . -5) (undo-tree-id58177 . -5) (undo-tree-id58178 . -5) (undo-tree-id58179 . -5) (undo-tree-id58180 . -5) (undo-tree-id58181 . -5) (undo-tree-id58182 . -5) (undo-tree-id58183 . -5) (undo-tree-id58184 . -5) (undo-tree-id58185 . -5) (undo-tree-id58186 . -5) (undo-tree-id58187 . -5) (undo-tree-id58188 . -5) (undo-tree-id58189 . -5) (undo-tree-id58190 . -8) (undo-tree-id58191 . -8) (undo-tree-id58192 . -8) (undo-tree-id58193 . -8) (undo-tree-id58194 . -8) (undo-tree-id58195 . -8) (undo-tree-id58196 . -8) (undo-tree-id58197 . -8) (undo-tree-id58198 . -8) (undo-tree-id58199 . -8) (undo-tree-id58200 . -8) (undo-tree-id58201 . -8) (undo-tree-id58202 . -8) (undo-tree-id58203 . -8) (undo-tree-id58204 . -8) (undo-tree-id58205 . -8) (undo-tree-id58206 . -13) (undo-tree-id58207 . -13) (undo-tree-id58208 . -13) (undo-tree-id58209 . -13) (undo-tree-id58210 . -13) (undo-tree-id58211 . -13) (undo-tree-id58212 . -13) (undo-tree-id58213 . -13) (undo-tree-id58214 . -13) (undo-tree-id58215 . -13) (undo-tree-id58216 . -13) (undo-tree-id58217 . -13) (undo-tree-id58218 . -13) (undo-tree-id58219 . -13) (undo-tree-id58220 . -13) (undo-tree-id58221 . -13) (undo-tree-id58222 . -16) (undo-tree-id58223 . -16) (undo-tree-id58224 . -16) (undo-tree-id58225 . -16) (undo-tree-id58226 . -16) (undo-tree-id58227 . -16) (undo-tree-id58228 . -16) (undo-tree-id58229 . -16) (undo-tree-id58230 . -16) (undo-tree-id58231 . -16) (undo-tree-id58232 . -16) (undo-tree-id58233 . -16) (undo-tree-id58234 . -16) (undo-tree-id58235 . -16) (undo-tree-id58236 . -16) (undo-tree-id58237 . -16) (undo-tree-id58238 . -16) (undo-tree-id58239 . -16) (undo-tree-id58240 . -16) (undo-tree-id58241 . -16) (undo-tree-id58242 . -16) (undo-tree-id58243 . -17) (undo-tree-id58244 . -17) (undo-tree-id58245 . -17) (undo-tree-id58246 . -17) (undo-tree-id58247 . -17) (undo-tree-id58248 . -17) (undo-tree-id58249 . -17) (undo-tree-id58250 . -17) (undo-tree-id58251 . -17) (undo-tree-id58252 . -17) (undo-tree-id58253 . -17) (undo-tree-id58254 . -17) (undo-tree-id58255 . -17) (undo-tree-id58256 . -17) (undo-tree-id58257 . -17) (undo-tree-id58258 . -17) (undo-tree-id58259 . -17) (undo-tree-id58260 . -18) 9099) nil (25767 16216 645712 915000) 0 nil])
([nil nil ((#("when creating every recurrent layer" 0 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9100) (undo-tree-id58010 . -34) (undo-tree-id58011 . -34) (undo-tree-id58012 . -34) (undo-tree-id58013 . -3) (undo-tree-id58014 . -3) (undo-tree-id58015 . -3) (undo-tree-id58016 . -3) (undo-tree-id58017 . -3) (undo-tree-id58018 . -3) (undo-tree-id58019 . -3) (undo-tree-id58020 . -3) (undo-tree-id58021 . -3) (undo-tree-id58022 . -3) (undo-tree-id58023 . -3) (undo-tree-id58024 . -3) (undo-tree-id58025 . -3) (undo-tree-id58026 . -3) (undo-tree-id58027 . -3) (undo-tree-id58028 . -3) (undo-tree-id58029 . -3) (undo-tree-id58030 . -3) (undo-tree-id58031 . -3) (undo-tree-id58032 . -3) (undo-tree-id58033 . -3) (undo-tree-id58034 . -3) (undo-tree-id58035 . -3) (undo-tree-id58036 . -3) (undo-tree-id58037 . -3) (undo-tree-id58038 . -3) (undo-tree-id58039 . -3) (undo-tree-id58040 . -3) (undo-tree-id58041 . -3) (undo-tree-id58042 . -3) (undo-tree-id58043 . -3) (undo-tree-id58044 . -35) (undo-tree-id58045 . -34) (undo-tree-id58046 . -3) (undo-tree-id58047 . -3) (undo-tree-id58048 . -3) (undo-tree-id58049 . -3) (undo-tree-id58050 . -3) (undo-tree-id58051 . -3) (undo-tree-id58052 . -3) (undo-tree-id58053 . -3) (undo-tree-id58054 . -3) (undo-tree-id58055 . -3) (undo-tree-id58056 . -3) (undo-tree-id58057 . -3) (undo-tree-id58058 . -3) (undo-tree-id58059 . -3) (undo-tree-id58060 . -3) (undo-tree-id58061 . -3) (undo-tree-id58062 . -3) (undo-tree-id58063 . -3) (undo-tree-id58064 . -3) (undo-tree-id58065 . -3) (undo-tree-id58066 . -3) (undo-tree-id58067 . -12) (undo-tree-id58068 . -12) (undo-tree-id58069 . -12) (undo-tree-id58070 . -12) (undo-tree-id58071 . -12) (undo-tree-id58072 . -12) (undo-tree-id58073 . -18) (undo-tree-id58074 . -18) (undo-tree-id58075 . -18) (undo-tree-id58076 . -18) (undo-tree-id58077 . -18) (undo-tree-id58078 . -18) (undo-tree-id58079 . -28) (undo-tree-id58080 . -28) (undo-tree-id58081 . -28) (undo-tree-id58082 . -28) (undo-tree-id58083 . -28) (undo-tree-id58084 . -28) (undo-tree-id58085 . -34) (undo-tree-id58086 . -34) (undo-tree-id58087 . -34) (undo-tree-id58088 . -34) (undo-tree-id58089 . -34) (undo-tree-id58090 . -34) (undo-tree-id58091 . -35) (undo-tree-id58092 . -35) (undo-tree-id58093 . -35) (undo-tree-id58094 . -35) (undo-tree-id58095 . -35) (undo-tree-id58096 . -35) (undo-tree-id58097 . -35) (undo-tree-id58098 . -35) (undo-tree-id58099 . -35) (undo-tree-id58100 . -35) (undo-tree-id58101 . -35) (undo-tree-id58102 . -35) (undo-tree-id58103 . -35) (undo-tree-id58104 . -35) (undo-tree-id58105 . -35) (undo-tree-id58106 . -35) (undo-tree-id58107 . -35) (undo-tree-id58108 . -35) (undo-tree-id58109 . -35) (undo-tree-id58110 . -35) (undo-tree-id58111 . -35) (undo-tree-id58112 . -34) (undo-tree-id58113 . -34) (undo-tree-id58114 . -34) (undo-tree-id58115 . -34) (undo-tree-id58116 . -34) (undo-tree-id58117 . -34) (undo-tree-id58118 . -34) (undo-tree-id58119 . -34) (undo-tree-id58120 . -34) (undo-tree-id58121 . -34) (undo-tree-id58122 . -34) (undo-tree-id58123 . -34) (undo-tree-id58124 . -34) (undo-tree-id58125 . -34) (undo-tree-id58126 . -34) (undo-tree-id58127 . -34) (undo-tree-id58128 . -34) (undo-tree-id58129 . -35) 9134) nil (25767 16216 645637 534000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9100) (undo-tree-id58007 . 1) (undo-tree-id58008 . -1) (undo-tree-id58009 . -1)) nil (25767 16216 645575 723000) 0 nil])
([nil nil ((9080 . 9390) (#("- Second, the stateful RNN needs to know the batch size (since it will preserve a state for each input sequence in the batch), so we must set the batch_input_shape argument in the first layer. Note that we can leave the second dimension unspecified, since the inputs could have any length:

- set stateful=True" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 35 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 36 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 36 111 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 111 112 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 112 133 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 133 151 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 151 152 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 152 157 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 157 158 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 158 163 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 163 185 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 185 186 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 186 259 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 259 260 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 260 289 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 289 290 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 290 291 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 291 292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 292 293 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 293 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 9080) (undo-tree-id57276 . -310) (undo-tree-id57277 . -310) (undo-tree-id57278 . -310) (undo-tree-id57279 . -310) (undo-tree-id57280 . 17) (undo-tree-id57281 . -310) (undo-tree-id57282 . -293) (undo-tree-id57283 . -293) (undo-tree-id57284 . -293) (undo-tree-id57285 . -293) (undo-tree-id57286 . -293) (undo-tree-id57287 . -293) (undo-tree-id57288 . -293) (undo-tree-id57289 . -293) (undo-tree-id57290 . -293) (undo-tree-id57291 . -293) (undo-tree-id57292 . -293) (undo-tree-id57293 . -293) (undo-tree-id57294 . -293) (undo-tree-id57295 . -293) (undo-tree-id57296 . -293) (undo-tree-id57297 . -293) (undo-tree-id57298 . -293) (undo-tree-id57299 . -293) (undo-tree-id57300 . -293) (undo-tree-id57301 . -293) (undo-tree-id57302 . -293) (undo-tree-id57303 . -293) (undo-tree-id57304 . -292) (undo-tree-id57305 . -292) (undo-tree-id57306 . -292) (undo-tree-id57307 . -292) (undo-tree-id57308 . -292) (undo-tree-id57309 . -292) (undo-tree-id57310 . -292) (undo-tree-id57311 . -292) (undo-tree-id57312 . -292) (undo-tree-id57313 . -292) (undo-tree-id57314 . -292) (undo-tree-id57315 . -293) (undo-tree-id57316 . -293) (undo-tree-id57317 . -293) (undo-tree-id57318 . -293) (undo-tree-id57319 . -293) (undo-tree-id57320 . -293) (undo-tree-id57321 . -293) (undo-tree-id57322 . -293) (undo-tree-id57323 . -293) (undo-tree-id57324 . -293) (undo-tree-id57325 . -293) (undo-tree-id57326 . -293) (undo-tree-id57327 . -293) (undo-tree-id57328 . -293) (undo-tree-id57329 . -293) (undo-tree-id57330 . -293) (undo-tree-id57331 . -293) (undo-tree-id57332 . -292) (undo-tree-id57333 . -292) (undo-tree-id57334 . -292) (undo-tree-id57335 . -292) (undo-tree-id57336 . -292) (undo-tree-id57337 . -292) (undo-tree-id57338 . -292) (undo-tree-id57339 . -292) (undo-tree-id57340 . -292) (undo-tree-id57341 . -292) (undo-tree-id57342 . -292) (undo-tree-id57343 . -292) (undo-tree-id57344 . -292) (undo-tree-id57345 . -292) (undo-tree-id57346 . -292) (undo-tree-id57347 . -292) (undo-tree-id57348 . -292) (undo-tree-id57349 . -292) (undo-tree-id57350 . -292) (undo-tree-id57351 . -292) (undo-tree-id57352 . -292) (undo-tree-id57353 . -292) (undo-tree-id57354 . -292) (undo-tree-id57355 . -292) (undo-tree-id57356 . -292) (undo-tree-id57357 . -293) (undo-tree-id57358 . -293) (undo-tree-id57359 . -293) (undo-tree-id57360 . -293) (undo-tree-id57361 . -293) (undo-tree-id57362 . -293) (undo-tree-id57363 . -293) (undo-tree-id57364 . -293) (undo-tree-id57365 . -293) (undo-tree-id57366 . -293) (undo-tree-id57367 . -293) (undo-tree-id57368 . -293) (undo-tree-id57369 . -293) (undo-tree-id57370 . -293) (undo-tree-id57371 . -293) (undo-tree-id57372 . -293) (undo-tree-id57373 . -293) (undo-tree-id57374 . -293) (undo-tree-id57375 . -293) (undo-tree-id57376 . -293) (undo-tree-id57377 . -293) (undo-tree-id57378 . -293) (undo-tree-id57379 . -293) (undo-tree-id57380 . -293) (undo-tree-id57381 . -293) (undo-tree-id57382 . -293) (undo-tree-id57383 . -293) (undo-tree-id57384 . -293) (undo-tree-id57385 . -293) (undo-tree-id57386 . -293) (undo-tree-id57387 . -293) (undo-tree-id57388 . -293) (undo-tree-id57389 . -293) (undo-tree-id57390 . -293) (undo-tree-id57391 . -293) (undo-tree-id57392 . -293) (undo-tree-id57393 . -293) (undo-tree-id57394 . -293) (undo-tree-id57395 . -293) (undo-tree-id57396 . -293) (undo-tree-id57397 . -293) (undo-tree-id57398 . -293) (undo-tree-id57399 . -293) (undo-tree-id57400 . -293) (undo-tree-id57401 . -293) (undo-tree-id57402 . -293) (undo-tree-id57403 . -293) (undo-tree-id57404 . -293) (undo-tree-id57405 . -293) (undo-tree-id57406 . -293) (undo-tree-id57407 . -293) (undo-tree-id57408 . -293) (undo-tree-id57409 . -293) (undo-tree-id57410 . -293) (undo-tree-id57411 . -293) (undo-tree-id57412 . -293) (undo-tree-id57413 . -293) (undo-tree-id57414 . -293) (undo-tree-id57415 . -293) (undo-tree-id57416 . -293) (undo-tree-id57417 . -293) (undo-tree-id57418 . -293) (undo-tree-id57419 . -293) (undo-tree-id57420 . -293) (undo-tree-id57421 . -293) (undo-tree-id57422 . -293) (undo-tree-id57423 . -293) (undo-tree-id57424 . -293) (undo-tree-id57425 . -293) (undo-tree-id57426 . -293) (undo-tree-id57427 . -293) (undo-tree-id57428 . -293) (undo-tree-id57429 . -293) (undo-tree-id57430 . -293) (undo-tree-id57431 . -293) (undo-tree-id57432 . -293) (undo-tree-id57433 . -293) (undo-tree-id57434 . -293) (undo-tree-id57435 . -293) (undo-tree-id57436 . -293) (undo-tree-id57437 . -293) (undo-tree-id57438 . -293) (undo-tree-id57439 . -293) (undo-tree-id57440 . -293) (undo-tree-id57441 . -293) (undo-tree-id57442 . -293) (undo-tree-id57443 . -293) (undo-tree-id57444 . -293) (undo-tree-id57445 . -293) (undo-tree-id57446 . -293) (undo-tree-id57447 . -293) (undo-tree-id57448 . -293) (undo-tree-id57449 . -293) (undo-tree-id57450 . -293) (undo-tree-id57451 . -293) (undo-tree-id57452 . -293) (undo-tree-id57453 . -293) (undo-tree-id57454 . -293) (undo-tree-id57455 . -293) (undo-tree-id57456 . -293) (undo-tree-id57457 . -293) (undo-tree-id57458 . -293) (undo-tree-id57459 . -293) (undo-tree-id57460 . -293) (undo-tree-id57461 . -293) (undo-tree-id57462 . -293) (undo-tree-id57463 . -293) (undo-tree-id57464 . -293) (undo-tree-id57465 . -293) (undo-tree-id57466 . -293) (undo-tree-id57467 . -293) (undo-tree-id57468 . -293) (undo-tree-id57469 . -293) (undo-tree-id57470 . -293) (undo-tree-id57471 . -293) (undo-tree-id57472 . -293) (undo-tree-id57473 . -293) (undo-tree-id57474 . -293) (undo-tree-id57475 . -293) (undo-tree-id57476 . -293) (undo-tree-id57477 . -293) (undo-tree-id57478 . -293) (undo-tree-id57479 . -293) (undo-tree-id57480 . -293) (undo-tree-id57481 . -293) (undo-tree-id57482 . -293) (undo-tree-id57483 . -293) (undo-tree-id57484 . -293) (undo-tree-id57485 . -293) (undo-tree-id57486 . -293) (undo-tree-id57487 . -293) (undo-tree-id57488 . -293) (undo-tree-id57489 . -293) (undo-tree-id57490 . -293) (undo-tree-id57491 . -293) (undo-tree-id57492 . -293) (undo-tree-id57493 . -293) (undo-tree-id57494 . -293) (undo-tree-id57495 . -293) (undo-tree-id57496 . -293) (undo-tree-id57497 . -293) (undo-tree-id57498 . -293) (undo-tree-id57499 . -293) (undo-tree-id57500 . -293) (undo-tree-id57501 . -293) (undo-tree-id57502 . -293) (undo-tree-id57503 . -293) (undo-tree-id57504 . -293) (undo-tree-id57505 . -293) (undo-tree-id57506 . -293) (undo-tree-id57507 . -293) (undo-tree-id57508 . -293) (undo-tree-id57509 . -293) (undo-tree-id57510 . -293) (undo-tree-id57511 . -293) (undo-tree-id57512 . -293) (undo-tree-id57513 . -293) (undo-tree-id57514 . -293) (undo-tree-id57515 . -293) (undo-tree-id57516 . -293) (undo-tree-id57517 . -293) (undo-tree-id57518 . -293) (undo-tree-id57519 . -293) (undo-tree-id57520 . -295) (undo-tree-id57521 . -295) (undo-tree-id57522 . -295) (undo-tree-id57523 . -295) (undo-tree-id57524 . -295) (undo-tree-id57525 . -295) (undo-tree-id57526 . -295) (undo-tree-id57527 . -295) (undo-tree-id57528 . -295) (undo-tree-id57529 . -295) (undo-tree-id57530 . -295) (undo-tree-id57531 . 13) (undo-tree-id57532 . -305) (undo-tree-id57533 . -304) (undo-tree-id57534 . -304) (undo-tree-id57535 . -304) (undo-tree-id57536 . -304) (undo-tree-id57537 . -304) (undo-tree-id57538 . -304) (undo-tree-id57539 . -304) (undo-tree-id57540 . -304) (undo-tree-id57541 . -304) (undo-tree-id57542 . -304) (undo-tree-id57543 . -304) (undo-tree-id57544 . -304) (undo-tree-id57545 . -304) (undo-tree-id57546 . -304) (undo-tree-id57547 . -304) (undo-tree-id57548 . -304) (undo-tree-id57549 . -305) (undo-tree-id57550 . -305) (undo-tree-id57551 . -305) (undo-tree-id57552 . -305) (undo-tree-id57553 . -305) (undo-tree-id57554 . -305) (undo-tree-id57555 . -305) (undo-tree-id57556 . -305) (undo-tree-id57557 . -305) (undo-tree-id57558 . -305) (undo-tree-id57559 . -305) (undo-tree-id57560 . -309) (undo-tree-id57561 . -309) (undo-tree-id57562 . -309) (undo-tree-id57563 . -309) (undo-tree-id57564 . -309) (undo-tree-id57565 . -309) (undo-tree-id57566 . -309) (undo-tree-id57567 . -309) (undo-tree-id57568 . -309) (undo-tree-id57569 . -309) (undo-tree-id57570 . -309) (undo-tree-id57571 . -309) (undo-tree-id57572 . -309) (undo-tree-id57573 . -309) (undo-tree-id57574 . -309) (undo-tree-id57575 . -309) (undo-tree-id57576 . -310) (undo-tree-id57577 . -310) (undo-tree-id57578 . -310) (undo-tree-id57579 . -310) (undo-tree-id57580 . -310) (undo-tree-id57581 . -310) (undo-tree-id57582 . -310) (undo-tree-id57583 . -310) (undo-tree-id57584 . -310) (undo-tree-id57585 . -310) (undo-tree-id57586 . -310) (undo-tree-id57587 . -310) (undo-tree-id57588 . -310) (undo-tree-id57589 . -310) (undo-tree-id57590 . -310) (undo-tree-id57591 . -310) (undo-tree-id57592 . -310) (undo-tree-id57593 . -310) (undo-tree-id57594 . -310) (undo-tree-id57595 . -310) (undo-tree-id57596 . -310) (undo-tree-id57597 . -310) (undo-tree-id57598 . -310) (undo-tree-id57599 . -310) (undo-tree-id57600 . -310) (undo-tree-id57601 . -310) (undo-tree-id57602 . -310) (undo-tree-id57603 . -310) (undo-tree-id57604 . -310) (undo-tree-id57605 . -310) (undo-tree-id57606 . -310) (undo-tree-id57607 . -310) (undo-tree-id57608 . -310) (undo-tree-id57609 . -310) (undo-tree-id57610 . -310) (undo-tree-id57611 . -310) (undo-tree-id57612 . -310) (undo-tree-id57613 . -310) (undo-tree-id57614 . -310) (undo-tree-id57615 . -310) (undo-tree-id57616 . -310) (undo-tree-id57617 . -310) (undo-tree-id57618 . -310) (undo-tree-id57619 . -310) (undo-tree-id57620 . -310) (undo-tree-id57621 . -310) (undo-tree-id57622 . -310) (undo-tree-id57623 . -310) (undo-tree-id57624 . -310) (undo-tree-id57625 . -310) (undo-tree-id57626 . -310) (undo-tree-id57627 . -310) (undo-tree-id57628 . -310) (undo-tree-id57629 . -310) (undo-tree-id57630 . -310) (undo-tree-id57631 . -310) (undo-tree-id57632 . -310) (undo-tree-id57633 . -310) (undo-tree-id57634 . -310) (undo-tree-id57635 . -310) (undo-tree-id57636 . -310) (undo-tree-id57637 . -310) (undo-tree-id57638 . -310) (undo-tree-id57639 . -310) (undo-tree-id57640 . -310) (undo-tree-id57641 . -310) (undo-tree-id57642 . -310) (undo-tree-id57643 . -310) (undo-tree-id57644 . -310) (undo-tree-id57645 . -310) (undo-tree-id57646 . -310) (undo-tree-id57647 . -310) (undo-tree-id57648 . -310) (undo-tree-id57649 . -310) (undo-tree-id57650 . -310) (undo-tree-id57651 . -310) (undo-tree-id57652 . -310) (undo-tree-id57653 . -310) (undo-tree-id57654 . -310) (undo-tree-id57655 . -310) (undo-tree-id57656 . -310) (undo-tree-id57657 . -310) (undo-tree-id57658 . -310) (undo-tree-id57659 . -310) (undo-tree-id57660 . -310) (undo-tree-id57661 . -310) (undo-tree-id57662 . -310) (undo-tree-id57663 . -310) (undo-tree-id57664 . -310) (undo-tree-id57665 . -310) (undo-tree-id57666 . -310) (undo-tree-id57667 . -310) (undo-tree-id57668 . -310) (undo-tree-id57669 . -310) (undo-tree-id57670 . -310) (undo-tree-id57671 . -310) (undo-tree-id57672 . -310) (undo-tree-id57673 . -310) (undo-tree-id57674 . -310) (undo-tree-id57675 . -310) (undo-tree-id57676 . -310) (undo-tree-id57677 . -310) (undo-tree-id57678 . -310) (undo-tree-id57679 . -310) (undo-tree-id57680 . -310) (undo-tree-id57681 . -310) (undo-tree-id57682 . -310) (undo-tree-id57683 . -310) (undo-tree-id57684 . -310) (undo-tree-id57685 . -310) (undo-tree-id57686 . -310) (undo-tree-id57687 . -310) (undo-tree-id57688 . -310) (undo-tree-id57689 . -310) (undo-tree-id57690 . -310) (undo-tree-id57691 . -310) (undo-tree-id57692 . -310) (undo-tree-id57693 . -310) (undo-tree-id57694 . -310) (undo-tree-id57695 . -310) (undo-tree-id57696 . -310) (undo-tree-id57697 . -310) (undo-tree-id57698 . -310) (undo-tree-id57699 . -310) (undo-tree-id57700 . -310) (undo-tree-id57701 . -310) (undo-tree-id57702 . -310) (undo-tree-id57703 . -310) (undo-tree-id57704 . -310) (undo-tree-id57705 . -310) (undo-tree-id57706 . -310) (undo-tree-id57707 . -310) (undo-tree-id57708 . -310) (undo-tree-id57709 . -310) (undo-tree-id57710 . -310) (undo-tree-id57711 . -310) (undo-tree-id57712 . -310) (undo-tree-id57713 . -310) (undo-tree-id57714 . -310) (undo-tree-id57715 . -310) (undo-tree-id57716 . -310) (undo-tree-id57717 . -310) (undo-tree-id57718 . -310) (undo-tree-id57719 . -310) (undo-tree-id57720 . -310) (undo-tree-id57721 . -310) (undo-tree-id57722 . -310) (undo-tree-id57723 . -310) (undo-tree-id57724 . -310) (undo-tree-id57725 . -310) (undo-tree-id57726 . -310) (undo-tree-id57727 . -310) (undo-tree-id57728 . -310) (undo-tree-id57729 . -310) (undo-tree-id57730 . -310) (undo-tree-id57731 . -310) (undo-tree-id57732 . -310) (undo-tree-id57733 . -310) (undo-tree-id57734 . -310) (undo-tree-id57735 . -310) (undo-tree-id57736 . -310) (undo-tree-id57737 . -310) (undo-tree-id57738 . -310) (undo-tree-id57739 . -310) (undo-tree-id57740 . -310) (undo-tree-id57741 . -310) (undo-tree-id57742 . -310) (undo-tree-id57743 . -310) (undo-tree-id57744 . -310) (undo-tree-id57745 . -310) (undo-tree-id57746 . -310) (undo-tree-id57747 . -310) (undo-tree-id57748 . -310) (undo-tree-id57749 . -310) (undo-tree-id57750 . -310) (undo-tree-id57751 . -310) (undo-tree-id57752 . -310) (undo-tree-id57753 . -310) (undo-tree-id57754 . -310) (undo-tree-id57755 . -310) (undo-tree-id57756 . -310) (undo-tree-id57757 . -310) (undo-tree-id57758 . -310) (undo-tree-id57759 . -310) (undo-tree-id57760 . -310) (undo-tree-id57761 . -310) (undo-tree-id57762 . -310) (undo-tree-id57763 . -310) (undo-tree-id57764 . -310) (undo-tree-id57765 . -310) (undo-tree-id57766 . -310) (undo-tree-id57767 . -310) (undo-tree-id57768 . -310) (undo-tree-id57769 . -310) (undo-tree-id57770 . -310) (undo-tree-id57771 . -310) (undo-tree-id57772 . -310) (undo-tree-id57773 . -310) (undo-tree-id57774 . -310) (undo-tree-id57775 . -310) (undo-tree-id57776 . -310) (undo-tree-id57777 . -310) (undo-tree-id57778 . -310) (undo-tree-id57779 . -310) (undo-tree-id57780 . -310) (undo-tree-id57781 . -310) (undo-tree-id57782 . -310) (undo-tree-id57783 . -310) (undo-tree-id57784 . -310) (undo-tree-id57785 . -310) (undo-tree-id57786 . -310) (undo-tree-id57787 . -291) (9080 . 9371) (#("  Second, the stateful RNN needs to know the batch size (since it will preserve a state for each input sequence in the batch), so we must set the batch_input_shape argument in the first layer. Note that we can leave the second dimension unspecified, since the inputs could have any length:" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 35 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 36 111 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 111 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 112 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 133 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 151 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 152 157 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 157 158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 158 163 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 163 185 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 185 186 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 186 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 259 260 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 260 289 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9099) (undo-tree-id57788 . -1) (undo-tree-id57789 . -1) (undo-tree-id57790 . -1) (undo-tree-id57791 . -1) (undo-tree-id57792 . 288) (undo-tree-id57793 . 275) (undo-tree-id57794 . -22) (undo-tree-id57795 . -1) (undo-tree-id57796 . -1) (undo-tree-id57797 . -1) (undo-tree-id57798 . -1) (undo-tree-id57799 . -1) (undo-tree-id57800 . -1) (undo-tree-id57801 . -1) (undo-tree-id57802 . -1) (undo-tree-id57803 . -1) (undo-tree-id57804 . -1) (undo-tree-id57805 . -1) (undo-tree-id57806 . -1) (undo-tree-id57807 . -1) (undo-tree-id57808 . -1) (undo-tree-id57809 . -1) (undo-tree-id57810 . -1) (undo-tree-id57811 . -1) (undo-tree-id57812 . -1) (undo-tree-id57813 . -1) (undo-tree-id57814 . -1) (undo-tree-id57815 . -1) (undo-tree-id57816 . -1) (undo-tree-id57817 . -1) (undo-tree-id57818 . -1) (undo-tree-id57819 . -1) (undo-tree-id57820 . -1) (undo-tree-id57821 . -1) (undo-tree-id57822 . -1) (undo-tree-id57823 . -1) (undo-tree-id57824 . -1) (undo-tree-id57825 . -1) (undo-tree-id57826 . -1) (undo-tree-id57827 . -1) (undo-tree-id57828 . -1) (undo-tree-id57829 . -1) (undo-tree-id57830 . -1) (undo-tree-id57831 . -1) (undo-tree-id57832 . -1) (undo-tree-id57833 . -1) (undo-tree-id57834 . -1) (undo-tree-id57835 . -1) (undo-tree-id57836 . -1) (undo-tree-id57837 . -1) (undo-tree-id57838 . -1) (undo-tree-id57839 . -1) (undo-tree-id57840 . -1) (undo-tree-id57841 . -1) (undo-tree-id57842 . -1) (undo-tree-id57843 . -1) (undo-tree-id57844 . -1) (undo-tree-id57845 . -1) (undo-tree-id57846 . -1) (undo-tree-id57847 . -1) (undo-tree-id57848 . -1) (undo-tree-id57849 . -1) (undo-tree-id57850 . -1) (undo-tree-id57851 . -1) (undo-tree-id57852 . -1) (undo-tree-id57853 . -1) (undo-tree-id57854 . -1) (undo-tree-id57855 . -1) (undo-tree-id57856 . -1) (undo-tree-id57857 . -1) (undo-tree-id57858 . -1) (undo-tree-id57859 . -1) (undo-tree-id57860 . -1) (undo-tree-id57861 . -1) (undo-tree-id57862 . -1) (undo-tree-id57863 . -1) (undo-tree-id57864 . -1) (undo-tree-id57865 . -1) (undo-tree-id57866 . -1) (undo-tree-id57867 . -1) (undo-tree-id57868 . -1) (undo-tree-id57869 . -1) (undo-tree-id57870 . -1) (undo-tree-id57871 . -1) (undo-tree-id57872 . -1) (undo-tree-id57873 . -1) (undo-tree-id57874 . -1) (undo-tree-id57875 . -1) (undo-tree-id57876 . -1) (undo-tree-id57877 . -1) (undo-tree-id57878 . -1) (undo-tree-id57879 . -1) (undo-tree-id57880 . -1) (undo-tree-id57881 . -1) (undo-tree-id57882 . -1) (undo-tree-id57883 . -1) (undo-tree-id57884 . -1) (undo-tree-id57885 . -1) (undo-tree-id57886 . -1) (undo-tree-id57887 . -1) (undo-tree-id57888 . -1) (undo-tree-id57889 . -1) (undo-tree-id57890 . -1) (undo-tree-id57891 . -1) (undo-tree-id57892 . -1) (undo-tree-id57893 . -1) (undo-tree-id57894 . -1) (undo-tree-id57895 . -1) (undo-tree-id57896 . -1) (undo-tree-id57897 . -1) (undo-tree-id57898 . -1) (undo-tree-id57899 . -1) (undo-tree-id57900 . -1) (undo-tree-id57901 . -1) (undo-tree-id57902 . -1) (undo-tree-id57903 . -1) (undo-tree-id57904 . -1) (undo-tree-id57905 . -1) (undo-tree-id57906 . -1) (undo-tree-id57907 . -1) (undo-tree-id57908 . -1) (undo-tree-id57909 . -1) (undo-tree-id57910 . -1) (undo-tree-id57911 . -1) (undo-tree-id57912 . -1) (undo-tree-id57913 . -1) (undo-tree-id57914 . -1) (undo-tree-id57915 . -1) (undo-tree-id57916 . -1) (undo-tree-id57917 . -1) (undo-tree-id57918 . -1) (undo-tree-id57919 . -1) (undo-tree-id57920 . -1) (undo-tree-id57921 . -1) (undo-tree-id57922 . -1) (undo-tree-id57923 . -1) (undo-tree-id57924 . -1) (undo-tree-id57925 . -1) (undo-tree-id57926 . -1) (undo-tree-id57927 . -1) (undo-tree-id57928 . -1) (undo-tree-id57929 . -1) (undo-tree-id57930 . -1) (undo-tree-id57931 . -1) (undo-tree-id57932 . -1) (undo-tree-id57933 . -1) (undo-tree-id57934 . -1) (undo-tree-id57935 . -1) (undo-tree-id57936 . -1) (undo-tree-id57937 . -1) (undo-tree-id57938 . -1) (undo-tree-id57939 . -1) (undo-tree-id57940 . -1) (undo-tree-id57941 . -1) (undo-tree-id57942 . -1) (undo-tree-id57943 . -1) (undo-tree-id57944 . -1) (undo-tree-id57945 . -1) (undo-tree-id57946 . -1) (undo-tree-id57947 . -1) (undo-tree-id57948 . -1) (undo-tree-id57949 . -1) (undo-tree-id57950 . -1) (undo-tree-id57951 . -1) (undo-tree-id57952 . -1) (undo-tree-id57953 . -1) (undo-tree-id57954 . -1) (undo-tree-id57955 . -1) (undo-tree-id57956 . -1) (undo-tree-id57957 . -1) (undo-tree-id57958 . -1) (undo-tree-id57959 . -1) (undo-tree-id57960 . -1) (undo-tree-id57961 . -1) (undo-tree-id57962 . -1) (undo-tree-id57963 . -1) (undo-tree-id57964 . -1) (undo-tree-id57965 . -1) (undo-tree-id57966 . -1) (undo-tree-id57967 . -1) (undo-tree-id57968 . -1) (undo-tree-id57969 . -1) (undo-tree-id57970 . -1) (undo-tree-id57971 . -1) (undo-tree-id57972 . -1) (undo-tree-id57973 . -1) (undo-tree-id57974 . -1) (undo-tree-id57975 . -1) (undo-tree-id57976 . -1) (undo-tree-id57977 . -1) (undo-tree-id57978 . -1) (undo-tree-id57979 . -1) (undo-tree-id57980 . -1) (undo-tree-id57981 . -1) (undo-tree-id57982 . -1) (undo-tree-id57983 . -1) (undo-tree-id57984 . -1) (undo-tree-id57985 . -1) (undo-tree-id57986 . -1) (undo-tree-id57987 . -1) (undo-tree-id57988 . -1) (undo-tree-id57989 . -1) (undo-tree-id57990 . -1) (undo-tree-id57991 . -1) (undo-tree-id57992 . -1) (undo-tree-id57993 . -1) (undo-tree-id57994 . -1) (undo-tree-id57995 . -1) (undo-tree-id57996 . -1) (undo-tree-id57997 . -1) (undo-tree-id57998 . -1) (undo-tree-id57999 . -1) (undo-tree-id58000 . -1) (undo-tree-id58001 . -1) (undo-tree-id58002 . -1) (undo-tree-id58003 . -1) (undo-tree-id58004 . -1) (undo-tree-id58005 . -1) (undo-tree-id58006 . -1) 9100) nil (25767 16216 645551 506000) 0 nil])
([nil nil ((#("Second, " 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9103) (undo-tree-id57210 . -7) (undo-tree-id57211 . -7) (undo-tree-id57212 . 8) (undo-tree-id57213 . -7) (undo-tree-id57214 . -8) (undo-tree-id57215 . -7) (undo-tree-id57216 . -5) (undo-tree-id57217 . -5) (undo-tree-id57218 . -5) (undo-tree-id57219 . -5) (undo-tree-id57220 . -5) (undo-tree-id57221 . -5) (undo-tree-id57222 . -5) (undo-tree-id57223 . -5) (undo-tree-id57224 . -5) (undo-tree-id57225 . -5) (undo-tree-id57226 . -5) (undo-tree-id57227 . -5) (undo-tree-id57228 . -5) (undo-tree-id57229 . -5) (undo-tree-id57230 . -5) (undo-tree-id57231 . -5) (undo-tree-id57232 . -6) (undo-tree-id57233 . -6) (undo-tree-id57234 . -6) (undo-tree-id57235 . -6) (undo-tree-id57236 . -6) (undo-tree-id57237 . -6) (undo-tree-id57238 . -6) (undo-tree-id57239 . -6) (undo-tree-id57240 . -6) (undo-tree-id57241 . -6) (undo-tree-id57242 . -6) (undo-tree-id57243 . -6) (undo-tree-id57244 . -6) (undo-tree-id57245 . -6) (undo-tree-id57246 . -6) (undo-tree-id57247 . -6) (undo-tree-id57248 . -6) (undo-tree-id57249 . -6) (undo-tree-id57250 . -6) (undo-tree-id57251 . -6) (undo-tree-id57252 . -6) (undo-tree-id57253 . -6) (undo-tree-id57254 . -6) (undo-tree-id57255 . -6) (undo-tree-id57256 . -6) (undo-tree-id57257 . -6) (undo-tree-id57258 . -7) (undo-tree-id57259 . -7) (undo-tree-id57260 . -7) (undo-tree-id57261 . -7) (undo-tree-id57262 . -7) (undo-tree-id57263 . -7) (undo-tree-id57264 . -7) (undo-tree-id57265 . -7) (undo-tree-id57266 . -7) (undo-tree-id57267 . -7) (undo-tree-id57268 . -7) (undo-tree-id57269 . -7) (undo-tree-id57270 . -7) (undo-tree-id57271 . -7) (undo-tree-id57272 . -7) (undo-tree-id57273 . -7) (undo-tree-id57274 . -7) (undo-tree-id57275 . -8) 9110) nil (25767 16216 645110 222000) 0 nil])
([nil nil ((#("(since it will preserve a state for each input sequence in the batch)" 0 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 55 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 56 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9149) (undo-tree-id57208 . -68) (undo-tree-id57209 . -69) 9103) nil (25767 16216 644066 93000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9148) (undo-tree-id57127 . -1) (undo-tree-id57128 . -1) (undo-tree-id57129 . -1) (undo-tree-id57130 . -1) (undo-tree-id57131 . -1) (undo-tree-id57132 . -1) (undo-tree-id57133 . -1) (undo-tree-id57134 . -1) (undo-tree-id57135 . -1) (undo-tree-id57136 . -1) (undo-tree-id57137 . -1) (undo-tree-id57138 . -1) (undo-tree-id57139 . -1) (undo-tree-id57140 . -1) (undo-tree-id57141 . -1) (undo-tree-id57142 . -1) (undo-tree-id57143 . -1) (undo-tree-id57144 . -1) (undo-tree-id57145 . -1) (undo-tree-id57146 . -1) (undo-tree-id57147 . -1) (undo-tree-id57148 . -1) (undo-tree-id57149 . -1) (undo-tree-id57150 . -1) (undo-tree-id57151 . -1) (undo-tree-id57152 . -1) (undo-tree-id57153 . -1) (undo-tree-id57154 . -1) (undo-tree-id57155 . -1) (undo-tree-id57156 . -1) (undo-tree-id57157 . -1) (undo-tree-id57158 . -1) (undo-tree-id57159 . -1) (undo-tree-id57160 . -1) (undo-tree-id57161 . -1) (undo-tree-id57162 . -1) (undo-tree-id57163 . -1) (undo-tree-id57164 . -1) (undo-tree-id57165 . -1) (undo-tree-id57166 . -1) (undo-tree-id57167 . -1) (undo-tree-id57168 . -1) (undo-tree-id57169 . -1) (undo-tree-id57170 . -1) (undo-tree-id57171 . -1) (undo-tree-id57172 . -1) (undo-tree-id57173 . -1) (undo-tree-id57174 . -1) (undo-tree-id57175 . -1) (undo-tree-id57176 . -1) (undo-tree-id57177 . -1) (undo-tree-id57178 . -1) (undo-tree-id57179 . -1) (undo-tree-id57180 . -1) (undo-tree-id57181 . -1) (undo-tree-id57182 . -1) (undo-tree-id57183 . -1) (undo-tree-id57184 . -1) (undo-tree-id57185 . -1) (undo-tree-id57186 . -1) (undo-tree-id57187 . -1) (undo-tree-id57188 . -1) (undo-tree-id57189 . -1) (undo-tree-id57190 . -1) (undo-tree-id57191 . -1) (undo-tree-id57192 . -1) (undo-tree-id57193 . -1) (undo-tree-id57194 . -1) (undo-tree-id57195 . -1) (undo-tree-id57196 . -1) (undo-tree-id57197 . -1) (undo-tree-id57198 . -1) (undo-tree-id57199 . -1) (undo-tree-id57200 . -1) (undo-tree-id57201 . -1) (undo-tree-id57202 . -1) (undo-tree-id57203 . -1) (undo-tree-id57204 . -1) (undo-tree-id57205 . -1) (undo-tree-id57206 . -1) (undo-tree-id57207 . -1)) nil (25767 16216 644060 881000) 0 nil])
([nil nil ((9218 . 9220) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -9218) (undo-tree-id57072 . -1) (undo-tree-id57073 . -1) (undo-tree-id57074 . -1) (undo-tree-id57075 . -1) (undo-tree-id57076 . -1) (undo-tree-id57077 . -1) (undo-tree-id57078 . -1) (undo-tree-id57079 . -1) (undo-tree-id57080 . -1) (undo-tree-id57081 . -1) (undo-tree-id57082 . -1) (undo-tree-id57083 . -1) (undo-tree-id57084 . -1) (undo-tree-id57085 . -1) (undo-tree-id57086 . -1) (undo-tree-id57087 . -1) (undo-tree-id57088 . -1) (undo-tree-id57089 . -1) (undo-tree-id57090 . -1) (undo-tree-id57091 . -1) (undo-tree-id57092 . -1) (undo-tree-id57093 . -1) (undo-tree-id57094 . -1) (undo-tree-id57095 . -1) (undo-tree-id57096 . -1) (undo-tree-id57097 . -1) (undo-tree-id57098 . -1) (undo-tree-id57099 . -1) (undo-tree-id57100 . -1) (undo-tree-id57101 . -1) (undo-tree-id57102 . -1) (undo-tree-id57103 . -1) (undo-tree-id57104 . -1) (undo-tree-id57105 . -1) (undo-tree-id57106 . -1) (undo-tree-id57107 . -1) 9219 (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . -9219) (undo-tree-id57108 . -1) (undo-tree-id57109 . -1) (undo-tree-id57110 . -1) (undo-tree-id57111 . -1) (undo-tree-id57112 . -1) (undo-tree-id57113 . -1) (undo-tree-id57114 . -1) (undo-tree-id57115 . -1) (undo-tree-id57116 . -1) (undo-tree-id57117 . -1) (undo-tree-id57118 . -1) (undo-tree-id57119 . -1) (undo-tree-id57120 . -1) (undo-tree-id57121 . -1) (undo-tree-id57122 . -1) (undo-tree-id57123 . -1) (undo-tree-id57124 . -1) (undo-tree-id57125 . -1) (undo-tree-id57126 . -1) 9220 (9218 . 9220) (9216 . 9218)) nil (25767 16216 644004 356000) 0 nil])
([nil nil ((#("Note that we can " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9220) (undo-tree-id58261 . -16) (undo-tree-id58262 . -16) (undo-tree-id58263 . 17) (undo-tree-id58264 . -16) (undo-tree-id58265 . -17) (undo-tree-id58266 . -16) (undo-tree-id58267 . -3) (undo-tree-id58268 . -3) (undo-tree-id58269 . -3) (undo-tree-id58270 . -3) (undo-tree-id58271 . -3) (undo-tree-id58272 . -3) (undo-tree-id58273 . -3) (undo-tree-id58274 . -3) (undo-tree-id58275 . -3) (undo-tree-id58276 . -3) (undo-tree-id58277 . -3) (undo-tree-id58278 . -3) (undo-tree-id58279 . -3) (undo-tree-id58280 . -3) (undo-tree-id58281 . -3) (undo-tree-id58282 . -3) (undo-tree-id58283 . -8) (undo-tree-id58284 . -8) (undo-tree-id58285 . -8) (undo-tree-id58286 . -8) (undo-tree-id58287 . -8) (undo-tree-id58288 . -8) (undo-tree-id58289 . -8) (undo-tree-id58290 . -8) (undo-tree-id58291 . -8) (undo-tree-id58292 . -8) (undo-tree-id58293 . -8) (undo-tree-id58294 . -8) (undo-tree-id58295 . -8) (undo-tree-id58296 . -8) (undo-tree-id58297 . -8) (undo-tree-id58298 . -8) (undo-tree-id58299 . -11) (undo-tree-id58300 . -11) (undo-tree-id58301 . -11) (undo-tree-id58302 . -11) (undo-tree-id58303 . -11) (undo-tree-id58304 . -11) (undo-tree-id58305 . -11) (undo-tree-id58306 . -11) (undo-tree-id58307 . -11) (undo-tree-id58308 . -11) (undo-tree-id58309 . -11) (undo-tree-id58310 . -11) (undo-tree-id58311 . -11) (undo-tree-id58312 . -11) (undo-tree-id58313 . -11) (undo-tree-id58314 . -11) (undo-tree-id58315 . -11) (undo-tree-id58316 . -11) (undo-tree-id58317 . -11) (undo-tree-id58318 . -11) (undo-tree-id58319 . -11) (undo-tree-id58320 . -15) (undo-tree-id58321 . -15) (undo-tree-id58322 . -15) (undo-tree-id58323 . -15) (undo-tree-id58324 . -15) (undo-tree-id58325 . -15) (undo-tree-id58326 . -15) (undo-tree-id58327 . -15) (undo-tree-id58328 . -15) (undo-tree-id58329 . -15) (undo-tree-id58330 . -15) (undo-tree-id58331 . -15) (undo-tree-id58332 . -15) (undo-tree-id58333 . -15) (undo-tree-id58334 . -15) (undo-tree-id58335 . -15) (undo-tree-id58336 . -15) (undo-tree-id58337 . -15) (undo-tree-id58338 . -15) (undo-tree-id58339 . -15) (undo-tree-id58340 . -15) (undo-tree-id58341 . -15) (undo-tree-id58342 . -15) (undo-tree-id58343 . -15) (undo-tree-id58344 . -15) (undo-tree-id58345 . -15) (undo-tree-id58346 . -16) (undo-tree-id58347 . -16) (undo-tree-id58348 . -16) (undo-tree-id58349 . -16) (undo-tree-id58350 . -16) (undo-tree-id58351 . -16) (undo-tree-id58352 . -16) (undo-tree-id58353 . -16) (undo-tree-id58354 . -16) (undo-tree-id58355 . -16) (undo-tree-id58356 . -16) (undo-tree-id58357 . -16) (undo-tree-id58358 . -16) (undo-tree-id58359 . -16) (undo-tree-id58360 . -16) (undo-tree-id58361 . -16) (undo-tree-id58362 . -16) (undo-tree-id58363 . -17) 9236 (t 25767 16216 712673 928000)) nil (25767 16226 433461 541000) 0 nil])
([nil nil ((#("we need to " 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9329) (undo-tree-id58526 . -10) (undo-tree-id58527 . -10) (undo-tree-id58528 . -10) (undo-tree-id58529 . -10) 9339 (t 25767 16226 496729 186000)) nil (25767 16345 258654 45000) 0 nil])
([nil nil ((#("we" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9353) (undo-tree-id58522 . -1) (undo-tree-id58523 . -1) (undo-tree-id58524 . -1) (undo-tree-id58525 . -1) 9354) nil (25767 16345 258650 7000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9353) (undo-tree-id58521 . 1)) nil (25767 16345 258646 437000) 0 nil])
([nil nil ((9355 . 9358)) nil (25767 16345 258644 981000) 0 nil])
([nil nil ((#("For this, we can use a small callback:" 0 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9394) (undo-tree-id58520 . -37)) nil (25767 16345 258644 154000) 0 nil])
([nil nil ((#("And now we can " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9398) (undo-tree-id58516 . -14) (undo-tree-id58517 . -14) (undo-tree-id58518 . -14) (undo-tree-id58519 . -14) 9412) nil (25767 16345 258642 126000) 0 nil])
([nil nil ((#("(for more epochs, because each epoch is much shorter than earlier, and there is only one instance per batch)" 0 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 30 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 31 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 102 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9424) (undo-tree-id58514 . -107) (undo-tree-id58515 . -5) 9429) nil (25767 16345 258468 297000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9423)) nil (25767 16345 258466 123000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9423)) nil (25767 16345 258465 443000) 0 nil])
([nil nil ((#("this model is " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9433) (undo-tree-id58510 . -13) (undo-tree-id58511 . -13) (undo-tree-id58512 . -13) (undo-tree-id58513 . -13) 9446) nil (25767 16345 258464 488000) 0 nil])
([nil nil ((9439 . 9442) (#("d" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9439)) nil (25767 16345 258460 793000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9438)) nil (25767 16345 258459 752000) 0 nil])
([nil nil ((#("it will " 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9443) (undo-tree-id58506 . -7) (undo-tree-id58507 . -7) (undo-tree-id58508 . -7) (undo-tree-id58509 . -7) 9450) nil (25767 16345 258458 523000) 0 nil])
([nil nil ((#("be" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9448) (undo-tree-id58505 . -1)) nil (25767 16345 258455 534000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9447)) nil (25767 16345 258453 534000) 0 nil])
([nil nil ((#("were used during" 0 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9519) (undo-tree-id58500 . -15) (undo-tree-id58501 . -15) (undo-tree-id58502 . -15) (undo-tree-id58503 . -15) (undo-tree-id58504 . -15) 9534) nil (25767 16345 258452 354000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9519) (undo-tree-id58497 . 1) (undo-tree-id58498 . -1) (undo-tree-id58499 . -1)) nil (25767 16345 258447 567000) 0 nil])
([nil nil ((9525 . 9527) (#("g" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9525) (undo-tree-id58424 . -1) (undo-tree-id58425 . -1) (undo-tree-id58426 . -1) (undo-tree-id58427 . -1) (undo-tree-id58428 . -1) (undo-tree-id58429 . -1) (undo-tree-id58430 . -1) (undo-tree-id58431 . -1) (undo-tree-id58432 . -1) (undo-tree-id58433 . -1) (undo-tree-id58434 . -1) (undo-tree-id58435 . -1) (undo-tree-id58436 . -1) 9526 (9519 . 9526) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9519) (undo-tree-id58437 . -1) (undo-tree-id58438 . -1) (undo-tree-id58439 . -1) (undo-tree-id58440 . -1) (undo-tree-id58441 . -1) (undo-tree-id58442 . -1) (undo-tree-id58443 . -1) (undo-tree-id58444 . -1) (undo-tree-id58445 . -1) (undo-tree-id58446 . -1) (undo-tree-id58447 . -1) (undo-tree-id58448 . -1) (undo-tree-id58449 . -1) (undo-tree-id58450 . -1) (undo-tree-id58451 . -1) (undo-tree-id58452 . -1) (undo-tree-id58453 . -1) (undo-tree-id58454 . -1) (undo-tree-id58455 . -1) (undo-tree-id58456 . -1) (undo-tree-id58457 . -1) (undo-tree-id58458 . -1) (undo-tree-id58459 . -1) (undo-tree-id58460 . -1) (undo-tree-id58461 . -1) (undo-tree-id58462 . -1) (undo-tree-id58463 . -1) (undo-tree-id58464 . -1) (undo-tree-id58465 . 1) (undo-tree-id58466 . -1) (undo-tree-id58467 . -1) (undo-tree-id58468 . -1) (undo-tree-id58469 . -1) (undo-tree-id58470 . -1) (undo-tree-id58471 . -1) (undo-tree-id58472 . -1) (undo-tree-id58473 . -1) (undo-tree-id58474 . -1) (undo-tree-id58475 . -1) (undo-tree-id58476 . -1) (undo-tree-id58477 . -1) (undo-tree-id58478 . -1) (#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9520) (undo-tree-id58479 . -1) (undo-tree-id58480 . -1) (undo-tree-id58481 . -1) (undo-tree-id58482 . -1) (undo-tree-id58483 . -1) (undo-tree-id58484 . -1) (undo-tree-id58485 . -1) (undo-tree-id58486 . -1) (undo-tree-id58487 . -1) (undo-tree-id58488 . -1) (undo-tree-id58489 . -1) (undo-tree-id58490 . -1) (undo-tree-id58491 . -1) (undo-tree-id58492 . -1) (undo-tree-id58493 . -1) (undo-tree-id58494 . -1) (undo-tree-id58495 . -1) (undo-tree-id58496 . -1) 9521 (9519 . 9521)) nil (25767 16345 258438 947000) 0 nil])
([nil nil ((#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9524) (undo-tree-id58377 . -1) (undo-tree-id58378 . -1) (undo-tree-id58379 . -1) (undo-tree-id58380 . -1) (undo-tree-id58381 . -1) (undo-tree-id58382 . -1) (undo-tree-id58383 . -1) (undo-tree-id58384 . -1) (undo-tree-id58385 . -1) (undo-tree-id58386 . -1) (undo-tree-id58387 . -1) (undo-tree-id58388 . -1) (undo-tree-id58389 . -1) (undo-tree-id58390 . -1) (undo-tree-id58391 . -1) (undo-tree-id58392 . -1) (undo-tree-id58393 . -1) (undo-tree-id58394 . -1) (undo-tree-id58395 . -1) (undo-tree-id58396 . -1) (undo-tree-id58397 . -1) (undo-tree-id58398 . -1) (undo-tree-id58399 . -1) (undo-tree-id58400 . -1) (undo-tree-id58401 . -1) (undo-tree-id58402 . -1) (undo-tree-id58403 . -1) (undo-tree-id58404 . -1) (undo-tree-id58405 . -1) (undo-tree-id58406 . -1) (undo-tree-id58407 . -1) (undo-tree-id58408 . -1) (undo-tree-id58409 . -1) (undo-tree-id58410 . -1) (undo-tree-id58411 . -1) (undo-tree-id58412 . -1) (undo-tree-id58413 . -1) (undo-tree-id58414 . -1) (undo-tree-id58415 . -1) (undo-tree-id58416 . -1) (undo-tree-id58417 . -1) (undo-tree-id58418 . -1) (undo-tree-id58419 . -1) (undo-tree-id58420 . -1) (undo-tree-id58421 . -1) (undo-tree-id58422 . -1) (undo-tree-id58423 . -1)) nil (25767 16345 258210 49000) 0 nil])
([nil nil ((9524 . 9526) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9524) (undo-tree-id58364 . -1) (undo-tree-id58365 . -1) (undo-tree-id58366 . -1) (undo-tree-id58367 . -1) (undo-tree-id58368 . -1) (undo-tree-id58369 . -1) (undo-tree-id58370 . -1) (undo-tree-id58371 . -1) (undo-tree-id58372 . -1) (undo-tree-id58373 . -1) (undo-tree-id58374 . -1) (undo-tree-id58375 . -1) (undo-tree-id58376 . -1) 9525 (9524 . 9525)) nil (25767 16345 258166 430000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9523) (undo-tree-id58583 . -1) (undo-tree-id58584 . -1) (undo-tree-id58585 . -1) (undo-tree-id58586 . -1) (undo-tree-id58587 . -1) (undo-tree-id58588 . -1) (undo-tree-id58589 . -1) (undo-tree-id58590 . -1) (undo-tree-id58591 . -1) (undo-tree-id58592 . -1) (undo-tree-id58593 . -1) (undo-tree-id58594 . -1) (undo-tree-id58595 . -1) (undo-tree-id58596 . -1) (undo-tree-id58597 . -1) (undo-tree-id58598 . -1) (undo-tree-id58599 . -1) (undo-tree-id58600 . -1) (undo-tree-id58601 . -1) (undo-tree-id58602 . -1) (undo-tree-id58603 . -1) (undo-tree-id58604 . -1) (undo-tree-id58605 . -1) (undo-tree-id58606 . -1) (undo-tree-id58607 . -1) (undo-tree-id58608 . -1) (undo-tree-id58609 . -1) (undo-tree-id58610 . -1) (undo-tree-id58611 . -1) (undo-tree-id58612 . -1) (undo-tree-id58613 . -1) (undo-tree-id58614 . -1) (undo-tree-id58615 . -1) (undo-tree-id58616 . -1) (undo-tree-id58617 . -1) (undo-tree-id58618 . -1) (undo-tree-id58619 . -1) (undo-tree-id58620 . -1) (undo-tree-id58621 . -1) (undo-tree-id58622 . -1) (undo-tree-id58623 . -1) (undo-tree-id58624 . -1) (undo-tree-id58625 . -1) (undo-tree-id58626 . -1) (undo-tree-id58627 . -1) (undo-tree-id58628 . -1) (undo-tree-id58629 . -1) (undo-tree-id58630 . -1) (undo-tree-id58631 . -1) (undo-tree-id58632 . -1) (undo-tree-id58633 . -1) (undo-tree-id58634 . -1) (undo-tree-id58635 . -1) (undo-tree-id58636 . -1) (undo-tree-id58637 . -1) (undo-tree-id58638 . -1) (undo-tree-id58639 . -1) (undo-tree-id58640 . -1) (undo-tree-id58641 . -1) (undo-tree-id58642 . -1) (undo-tree-id58643 . -1) (undo-tree-id58644 . -1) (undo-tree-id58645 . -1) (undo-tree-id58646 . -1) (undo-tree-id58647 . -1) (undo-tree-id58648 . -1) (undo-tree-id58649 . -1) (undo-tree-id58650 . -1) (undo-tree-id58651 . -1) (undo-tree-id58652 . -1) (undo-tree-id58653 . -1) (undo-tree-id58654 . -1) (undo-tree-id58655 . -1) (undo-tree-id58656 . -1) (t 25767 16345 373534 214000)) nil (25767 16349 997036 983000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9523) (undo-tree-id58530 . -1) (undo-tree-id58531 . -1) (undo-tree-id58532 . -1) (undo-tree-id58533 . -1) (undo-tree-id58534 . -1) (undo-tree-id58535 . -1) (undo-tree-id58536 . -1) (undo-tree-id58537 . -1) (undo-tree-id58538 . -1) (undo-tree-id58539 . -1) (undo-tree-id58540 . -1) (undo-tree-id58541 . -1) (undo-tree-id58542 . -1) (undo-tree-id58543 . -1) (undo-tree-id58544 . -1) (undo-tree-id58545 . -1) (undo-tree-id58546 . -1) (undo-tree-id58547 . -1) (undo-tree-id58548 . -1) (undo-tree-id58549 . -1) (undo-tree-id58550 . -1) (undo-tree-id58551 . -1) (undo-tree-id58552 . -1) (undo-tree-id58553 . -1) (undo-tree-id58554 . -1) (undo-tree-id58555 . -1) (undo-tree-id58556 . -1) (undo-tree-id58557 . -1) (undo-tree-id58558 . -1) (undo-tree-id58559 . -1) (undo-tree-id58560 . -1) (undo-tree-id58561 . -1) (undo-tree-id58562 . -1) (undo-tree-id58563 . -1) (undo-tree-id58564 . -1) (undo-tree-id58565 . -1) (undo-tree-id58566 . -1) (undo-tree-id58567 . -1) (undo-tree-id58568 . -1) (undo-tree-id58569 . -1) (undo-tree-id58570 . -1) (undo-tree-id58571 . -1) (undo-tree-id58572 . -1) (undo-tree-id58573 . -1) (undo-tree-id58574 . -1) (undo-tree-id58575 . -1) (undo-tree-id58576 . -1) (undo-tree-id58577 . -1) (undo-tree-id58578 . -1) (undo-tree-id58579 . -1) (undo-tree-id58580 . -1) (undo-tree-id58581 . -1) (undo-tree-id58582 . -1)) nil (25767 16349 996944 486000) 0 nil])
([nil nil ((#("To avoid this restriction," 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 9540) (undo-tree-id60394 . -25) (undo-tree-id60395 . -25) (undo-tree-id60396 . -25) (undo-tree-id60397 . -26) (undo-tree-id60398 . -25) (undo-tree-id60399 . -1) (undo-tree-id60400 . -1) (undo-tree-id60401 . -1) (undo-tree-id60402 . -1) (undo-tree-id60403 . -1) (undo-tree-id60404 . -1) (undo-tree-id60405 . -1) (undo-tree-id60406 . -1) (undo-tree-id60407 . -1) (undo-tree-id60408 . -1) (undo-tree-id60409 . -1) (undo-tree-id60410 . -1) (undo-tree-id60411 . -1) (undo-tree-id60412 . -1) (undo-tree-id60413 . -1) (undo-tree-id60414 . -1) (undo-tree-id60415 . -7) (undo-tree-id60416 . -7) (undo-tree-id60417 . -7) (undo-tree-id60418 . -7) (undo-tree-id60419 . -7) (undo-tree-id60420 . -7) (undo-tree-id60421 . -7) (undo-tree-id60422 . -7) (undo-tree-id60423 . -7) (undo-tree-id60424 . -7) (undo-tree-id60425 . -7) (undo-tree-id60426 . -7) (undo-tree-id60427 . -7) (undo-tree-id60428 . -7) (undo-tree-id60429 . -7) (undo-tree-id60430 . -7) (undo-tree-id60431 . -12) (undo-tree-id60432 . -12) (undo-tree-id60433 . -12) (undo-tree-id60434 . -12) (undo-tree-id60435 . -12) (undo-tree-id60436 . -12) (undo-tree-id60437 . -12) (undo-tree-id60438 . -12) (undo-tree-id60439 . -12) (undo-tree-id60440 . -12) (undo-tree-id60441 . -12) (undo-tree-id60442 . -12) (undo-tree-id60443 . -12) (undo-tree-id60444 . -12) (undo-tree-id60445 . -12) (undo-tree-id60446 . -12) (undo-tree-id60447 . -24) (undo-tree-id60448 . -24) (undo-tree-id60449 . -24) (undo-tree-id60450 . -24) (undo-tree-id60451 . -24) (undo-tree-id60452 . -24) (undo-tree-id60453 . -24) (undo-tree-id60454 . -24) (undo-tree-id60455 . -24) (undo-tree-id60456 . -24) (undo-tree-id60457 . -24) (undo-tree-id60458 . -24) (undo-tree-id60459 . -24) (undo-tree-id60460 . -24) (undo-tree-id60461 . -24) (undo-tree-id60462 . -24) (undo-tree-id60463 . -24) (undo-tree-id60464 . -24) (undo-tree-id60465 . -24) (undo-tree-id60466 . -24) (undo-tree-id60467 . -24) (undo-tree-id60468 . -24) (undo-tree-id60469 . -24) (undo-tree-id60470 . -24) (undo-tree-id60471 . -24) (undo-tree-id60472 . -24) (undo-tree-id60473 . -25) (undo-tree-id60474 . -25) (undo-tree-id60475 . -25) (undo-tree-id60476 . -25) (undo-tree-id60477 . -25) (undo-tree-id60478 . -25) (undo-tree-id60479 . -25) (undo-tree-id60480 . -25) (undo-tree-id60481 . -25) (undo-tree-id60482 . -25) (undo-tree-id60483 . -25) (undo-tree-id60484 . -25) (undo-tree-id60485 . -25) (undo-tree-id60486 . -25) (undo-tree-id60487 . -25) (undo-tree-id60488 . -25) (undo-tree-id60489 . -25) (undo-tree-id60490 . -25) (undo-tree-id60491 . -25) (undo-tree-id60492 . -25) (undo-tree-id60493 . -25) (undo-tree-id60494 . -25) (undo-tree-id60495 . -26) 9565 (t 25767 16350 65570 630000)) nil (25767 16407 252234 396000) 0 nil])
([nil nil ((9540 . 9554) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -9540) (undo-tree-id60373 . 1) (undo-tree-id60374 . -1) (undo-tree-id60375 . -1) (undo-tree-id60376 . -1) (undo-tree-id60377 . -1) (undo-tree-id60378 . -1) (undo-tree-id60379 . -1) (undo-tree-id60380 . -1) (undo-tree-id60381 . -1) (undo-tree-id60382 . -1) (undo-tree-id60383 . -1) (undo-tree-id60384 . -1) (undo-tree-id60385 . -1) (undo-tree-id60386 . -1) (undo-tree-id60387 . -1) (undo-tree-id60388 . -1) (undo-tree-id60389 . -1) (undo-tree-id60390 . -1) (undo-tree-id60391 . -1) (undo-tree-id60392 . -1) (undo-tree-id60393 . -1) 9541) nil (25767 16407 252170 793000) 0 nil])
([nil nil ((9538 . 9896) (#("- Now that we have built a character-level model, it’s time to look at word- level models and tackle a common natural language processing task: sentiment analysis. In the process we will learn how to handle sequences of variable lengths using masking.

- alternatively create an identical stateless model, and copy the stateful model’s weights to this model." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 76 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 76 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 77 138 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 138 143 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 143 144 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 144 216 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 216 217 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 217 250 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 250 251 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 251 252 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 252 253 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 253 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 254 269 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 269 275 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 275 276 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 276 358 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 9538) (undo-tree-id59682 . -255) (undo-tree-id59683 . -255) (undo-tree-id59684 . -255) (undo-tree-id59685 . -255) (undo-tree-id59686 . 89) (undo-tree-id59687 . 89) (undo-tree-id59688 . -358) (undo-tree-id59689 . -255) (undo-tree-id59690 . -255) (undo-tree-id59691 . -255) (undo-tree-id59692 . -255) (undo-tree-id59693 . -255) (undo-tree-id59694 . -255) (undo-tree-id59695 . -255) (undo-tree-id59696 . -255) (undo-tree-id59697 . -255) (undo-tree-id59698 . -255) (undo-tree-id59699 . -255) (undo-tree-id59700 . -255) (undo-tree-id59701 . -255) (undo-tree-id59702 . -255) (undo-tree-id59703 . -255) (undo-tree-id59704 . -255) (undo-tree-id59705 . -255) (undo-tree-id59706 . -255) (undo-tree-id59707 . -255) (undo-tree-id59708 . -255) (undo-tree-id59709 . -255) (undo-tree-id59710 . -255) (undo-tree-id59711 . -255) (undo-tree-id59712 . -255) (undo-tree-id59713 . -255) (undo-tree-id59714 . -255) (undo-tree-id59715 . -255) (undo-tree-id59716 . -255) (undo-tree-id59717 . -255) (undo-tree-id59718 . -255) (undo-tree-id59719 . -255) (undo-tree-id59720 . -255) (undo-tree-id59721 . -255) (undo-tree-id59722 . -255) (undo-tree-id59723 . -255) (undo-tree-id59724 . -255) (undo-tree-id59725 . -255) (undo-tree-id59726 . -255) (undo-tree-id59727 . -255) (undo-tree-id59728 . -255) (undo-tree-id59729 . -255) (undo-tree-id59730 . -255) (undo-tree-id59731 . -255) (undo-tree-id59732 . -255) (undo-tree-id59733 . -255) (undo-tree-id59734 . -255) (undo-tree-id59735 . -255) (undo-tree-id59736 . -255) (undo-tree-id59737 . -255) (undo-tree-id59738 . -255) (undo-tree-id59739 . -255) (undo-tree-id59740 . -255) (undo-tree-id59741 . -255) (undo-tree-id59742 . -255) (undo-tree-id59743 . -255) (undo-tree-id59744 . -255) (undo-tree-id59745 . -255) (undo-tree-id59746 . -255) (undo-tree-id59747 . -255) (undo-tree-id59748 . -255) (undo-tree-id59749 . -255) (undo-tree-id59750 . -255) (undo-tree-id59751 . -255) (undo-tree-id59752 . -255) (undo-tree-id59753 . -255) (undo-tree-id59754 . -255) (undo-tree-id59755 . -255) (undo-tree-id59756 . -255) (undo-tree-id59757 . -255) (undo-tree-id59758 . -255) (undo-tree-id59759 . -255) (undo-tree-id59760 . -255) (undo-tree-id59761 . -255) (undo-tree-id59762 . -255) (undo-tree-id59763 . -255) (undo-tree-id59764 . -255) (undo-tree-id59765 . -255) (undo-tree-id59766 . -255) (undo-tree-id59767 . -255) (undo-tree-id59768 . -255) (undo-tree-id59769 . -255) (undo-tree-id59770 . -255) (undo-tree-id59771 . -255) (undo-tree-id59772 . -255) (undo-tree-id59773 . -255) (undo-tree-id59774 . -255) (undo-tree-id59775 . -255) (undo-tree-id59776 . -255) (undo-tree-id59777 . -255) (undo-tree-id59778 . -255) (undo-tree-id59779 . -255) (undo-tree-id59780 . -255) (undo-tree-id59781 . -255) (undo-tree-id59782 . -255) (undo-tree-id59783 . -255) (undo-tree-id59784 . -255) (undo-tree-id59785 . -255) (undo-tree-id59786 . -255) (undo-tree-id59787 . -255) (undo-tree-id59788 . -255) (undo-tree-id59789 . -255) (undo-tree-id59790 . -255) (undo-tree-id59791 . -255) (undo-tree-id59792 . -255) (undo-tree-id59793 . -255) (undo-tree-id59794 . -255) (undo-tree-id59795 . -255) (undo-tree-id59796 . -255) (undo-tree-id59797 . -255) (undo-tree-id59798 . -255) (undo-tree-id59799 . -255) (undo-tree-id59800 . -255) (undo-tree-id59801 . -255) (undo-tree-id59802 . -255) (undo-tree-id59803 . -255) (undo-tree-id59804 . -255) (undo-tree-id59805 . -255) (undo-tree-id59806 . -255) (undo-tree-id59807 . -255) (undo-tree-id59808 . -255) (undo-tree-id59809 . -255) (undo-tree-id59810 . -255) (undo-tree-id59811 . -255) (undo-tree-id59812 . -255) (undo-tree-id59813 . -255) (undo-tree-id59814 . -255) (undo-tree-id59815 . -255) (undo-tree-id59816 . -255) (undo-tree-id59817 . -255) (undo-tree-id59818 . -255) (undo-tree-id59819 . -255) (undo-tree-id59820 . -255) (undo-tree-id59821 . -255) (undo-tree-id59822 . -255) (undo-tree-id59823 . -255) (undo-tree-id59824 . -255) (undo-tree-id59825 . -255) (undo-tree-id59826 . -255) (undo-tree-id59827 . -255) (undo-tree-id59828 . -255) (undo-tree-id59829 . -255) (undo-tree-id59830 . -255) (undo-tree-id59831 . -255) (undo-tree-id59832 . -255) (undo-tree-id59833 . -255) (undo-tree-id59834 . -255) (undo-tree-id59835 . -255) (undo-tree-id59836 . -255) (undo-tree-id59837 . -255) (undo-tree-id59838 . -255) (undo-tree-id59839 . -255) (undo-tree-id59840 . -255) (undo-tree-id59841 . -255) (undo-tree-id59842 . -255) (undo-tree-id59843 . -255) (undo-tree-id59844 . -255) (undo-tree-id59845 . -255) (undo-tree-id59846 . -255) (undo-tree-id59847 . -255) (undo-tree-id59848 . -255) (undo-tree-id59849 . -255) (undo-tree-id59850 . -255) (undo-tree-id59851 . -255) (undo-tree-id59852 . -255) (undo-tree-id59853 . -255) (undo-tree-id59854 . -255) (undo-tree-id59855 . -255) (undo-tree-id59856 . -255) (undo-tree-id59857 . -255) (undo-tree-id59858 . -255) (undo-tree-id59859 . -255) (undo-tree-id59860 . -255) (undo-tree-id59861 . -255) (undo-tree-id59862 . -255) (undo-tree-id59863 . -255) (undo-tree-id59864 . -255) (undo-tree-id59865 . -255) (undo-tree-id59866 . -255) (undo-tree-id59867 . -255) (undo-tree-id59868 . -255) (undo-tree-id59869 . -255) (undo-tree-id59870 . -255) (undo-tree-id59871 . -255) (undo-tree-id59872 . -255) (undo-tree-id59873 . -255) (undo-tree-id59874 . -255) (undo-tree-id59875 . -255) (undo-tree-id59876 . -255) (undo-tree-id59877 . -255) (undo-tree-id59878 . -255) (undo-tree-id59879 . -255) (undo-tree-id59880 . -255) (undo-tree-id59881 . -255) (undo-tree-id59882 . -255) (undo-tree-id59883 . -255) (undo-tree-id59884 . -255) (undo-tree-id59885 . -255) (undo-tree-id59886 . -255) (undo-tree-id59887 . -255) (undo-tree-id59888 . -255) (undo-tree-id59889 . -255) (undo-tree-id59890 . -255) (undo-tree-id59891 . -255) (undo-tree-id59892 . -255) (undo-tree-id59893 . -255) (undo-tree-id59894 . -255) (undo-tree-id59895 . -255) (undo-tree-id59896 . -255) (undo-tree-id59897 . -255) (undo-tree-id59898 . -255) (undo-tree-id59899 . -255) (undo-tree-id59900 . -255) (undo-tree-id59901 . -256) (undo-tree-id59902 . -256) (undo-tree-id59903 . -256) (undo-tree-id59904 . -256) (undo-tree-id59905 . -256) (undo-tree-id59906 . -256) (undo-tree-id59907 . -256) (undo-tree-id59908 . -256) (undo-tree-id59909 . -256) (undo-tree-id59910 . -256) (undo-tree-id59911 . -256) (undo-tree-id59912 . -257) (undo-tree-id59913 . -257) (undo-tree-id59914 . -257) (undo-tree-id59915 . -257) (undo-tree-id59916 . -257) (undo-tree-id59917 . -257) (undo-tree-id59918 . -257) (undo-tree-id59919 . -257) (undo-tree-id59920 . -257) (undo-tree-id59921 . -257) (undo-tree-id59922 . -257) (undo-tree-id59923 . -258) (undo-tree-id59924 . -258) (undo-tree-id59925 . -258) (undo-tree-id59926 . -258) (undo-tree-id59927 . -258) (undo-tree-id59928 . -258) (undo-tree-id59929 . -258) (undo-tree-id59930 . -258) (undo-tree-id59931 . -258) (undo-tree-id59932 . -258) (undo-tree-id59933 . -258) (undo-tree-id59934 . -259) (undo-tree-id59935 . -259) (undo-tree-id59936 . -259) (undo-tree-id59937 . -259) (undo-tree-id59938 . -259) (undo-tree-id59939 . -259) (undo-tree-id59940 . -259) (undo-tree-id59941 . -259) (undo-tree-id59942 . -259) (undo-tree-id59943 . -259) (undo-tree-id59944 . -259) (undo-tree-id59945 . -260) (undo-tree-id59946 . -260) (undo-tree-id59947 . -260) (undo-tree-id59948 . -260) (undo-tree-id59949 . -260) (undo-tree-id59950 . -260) (undo-tree-id59951 . -260) (undo-tree-id59952 . -260) (undo-tree-id59953 . -260) (undo-tree-id59954 . -260) (undo-tree-id59955 . -260) (undo-tree-id59956 . -261) (undo-tree-id59957 . -261) (undo-tree-id59958 . -261) (undo-tree-id59959 . -261) (undo-tree-id59960 . -261) (undo-tree-id59961 . -261) (undo-tree-id59962 . -261) (undo-tree-id59963 . -261) (undo-tree-id59964 . -261) (undo-tree-id59965 . -261) (undo-tree-id59966 . -261) (undo-tree-id59967 . -261) (undo-tree-id59968 . -262) (undo-tree-id59969 . -262) (undo-tree-id59970 . -262) (undo-tree-id59971 . -262) (undo-tree-id59972 . -262) (undo-tree-id59973 . -262) (undo-tree-id59974 . -262) (undo-tree-id59975 . -262) (undo-tree-id59976 . -262) (undo-tree-id59977 . -262) (undo-tree-id59978 . -262) (undo-tree-id59979 . -263) (undo-tree-id59980 . -263) (undo-tree-id59981 . -263) (undo-tree-id59982 . -263) (undo-tree-id59983 . -263) (undo-tree-id59984 . -263) (undo-tree-id59985 . -263) (undo-tree-id59986 . -263) (undo-tree-id59987 . -263) (undo-tree-id59988 . -263) (undo-tree-id59989 . -263) (undo-tree-id59990 . -264) (undo-tree-id59991 . -264) (undo-tree-id59992 . -264) (undo-tree-id59993 . -264) (undo-tree-id59994 . -264) (undo-tree-id59995 . -264) (undo-tree-id59996 . -264) (undo-tree-id59997 . -264) (undo-tree-id59998 . -264) (undo-tree-id59999 . -264) (undo-tree-id60000 . -264) (undo-tree-id60001 . -265) (undo-tree-id60002 . -265) (undo-tree-id60003 . -265) (undo-tree-id60004 . -265) (undo-tree-id60005 . -265) (undo-tree-id60006 . -265) (undo-tree-id60007 . -265) (undo-tree-id60008 . -265) (undo-tree-id60009 . -265) (undo-tree-id60010 . -265) (undo-tree-id60011 . -265) (undo-tree-id60012 . -265) (undo-tree-id60013 . -265) (undo-tree-id60014 . -265) (undo-tree-id60015 . -265) (undo-tree-id60016 . -265) (undo-tree-id60017 . -265) (undo-tree-id60018 . -266) (undo-tree-id60019 . -266) (undo-tree-id60020 . -266) (undo-tree-id60021 . -266) (undo-tree-id60022 . -266) (undo-tree-id60023 . -266) (undo-tree-id60024 . -266) (undo-tree-id60025 . -266) (undo-tree-id60026 . -266) (undo-tree-id60027 . -266) (undo-tree-id60028 . -266) (undo-tree-id60029 . -267) (undo-tree-id60030 . -267) (undo-tree-id60031 . -267) (undo-tree-id60032 . -267) (undo-tree-id60033 . -267) (undo-tree-id60034 . -267) (undo-tree-id60035 . -267) (undo-tree-id60036 . -267) (undo-tree-id60037 . -267) (undo-tree-id60038 . -267) (undo-tree-id60039 . -267) (undo-tree-id60040 . -268) (undo-tree-id60041 . -268) (undo-tree-id60042 . -268) (undo-tree-id60043 . -268) (undo-tree-id60044 . -268) (undo-tree-id60045 . -268) (undo-tree-id60046 . -268) (undo-tree-id60047 . -268) (undo-tree-id60048 . -268) (undo-tree-id60049 . -268) (undo-tree-id60050 . -268) (undo-tree-id60051 . -269) (undo-tree-id60052 . -269) (undo-tree-id60053 . -269) (undo-tree-id60054 . -269) (undo-tree-id60055 . -269) (undo-tree-id60056 . -269) (undo-tree-id60057 . -269) (undo-tree-id60058 . -269) (undo-tree-id60059 . -269) (undo-tree-id60060 . -269) (undo-tree-id60061 . -269) (undo-tree-id60062 . -269) (undo-tree-id60063 . -269) (undo-tree-id60064 . -269) (undo-tree-id60065 . -269) (undo-tree-id60066 . -269) (undo-tree-id60067 . -269) (undo-tree-id60068 . -268) (undo-tree-id60069 . -268) (undo-tree-id60070 . -268) (undo-tree-id60071 . -268) (undo-tree-id60072 . -268) (undo-tree-id60073 . -268) (undo-tree-id60074 . -268) (undo-tree-id60075 . -268) (undo-tree-id60076 . -268) (undo-tree-id60077 . -268) (undo-tree-id60078 . -268) (undo-tree-id60079 . -268) (undo-tree-id60080 . -268) (undo-tree-id60081 . -268) (undo-tree-id60082 . -268) (undo-tree-id60083 . -268) (undo-tree-id60084 . -268) (undo-tree-id60085 . -268) (undo-tree-id60086 . -268) (undo-tree-id60087 . -268) (undo-tree-id60088 . -268) (undo-tree-id60089 . -268) (undo-tree-id60090 . -268) (undo-tree-id60091 . -268) (undo-tree-id60092 . -268) (undo-tree-id60093 . -274) (undo-tree-id60094 . -274) (undo-tree-id60095 . -274) (undo-tree-id60096 . -274) (undo-tree-id60097 . -274) (undo-tree-id60098 . -274) (undo-tree-id60099 . -274) (undo-tree-id60100 . -274) (undo-tree-id60101 . -274) (undo-tree-id60102 . -274) (undo-tree-id60103 . -274) (undo-tree-id60104 . -277) (undo-tree-id60105 . -277) (undo-tree-id60106 . -277) (undo-tree-id60107 . -277) (undo-tree-id60108 . -277) (undo-tree-id60109 . -277) (undo-tree-id60110 . -277) (undo-tree-id60111 . -277) (undo-tree-id60112 . -277) (undo-tree-id60113 . -277) (undo-tree-id60114 . -277) (undo-tree-id60115 . -277) (undo-tree-id60116 . -277) (undo-tree-id60117 . -277) (undo-tree-id60118 . -277) (undo-tree-id60119 . -277) (undo-tree-id60120 . -277) (undo-tree-id60121 . -277) (undo-tree-id60122 . -277) (undo-tree-id60123 . -277) (undo-tree-id60124 . -277) (undo-tree-id60125 . -287) (undo-tree-id60126 . -287) (undo-tree-id60127 . -287) (undo-tree-id60128 . -287) (undo-tree-id60129 . -287) (undo-tree-id60130 . -287) (undo-tree-id60131 . -287) (undo-tree-id60132 . -287) (undo-tree-id60133 . -287) (undo-tree-id60134 . -287) (undo-tree-id60135 . -287) (undo-tree-id60136 . -297) (undo-tree-id60137 . -297) (undo-tree-id60138 . -297) (undo-tree-id60139 . -297) (undo-tree-id60140 . -297) (undo-tree-id60141 . -297) (undo-tree-id60142 . -297) (undo-tree-id60143 . -297) (undo-tree-id60144 . -297) (undo-tree-id60145 . -297) (undo-tree-id60146 . -297) (undo-tree-id60147 . -303) (undo-tree-id60148 . -303) (undo-tree-id60149 . -303) (undo-tree-id60150 . -303) (undo-tree-id60151 . -303) (undo-tree-id60152 . -303) (undo-tree-id60153 . -303) (undo-tree-id60154 . -303) (undo-tree-id60155 . -303) (undo-tree-id60156 . -303) (undo-tree-id60157 . -303) (undo-tree-id60158 . -303) (undo-tree-id60159 . -303) (undo-tree-id60160 . -303) (undo-tree-id60161 . -303) (undo-tree-id60162 . -303) (undo-tree-id60163 . -303) (undo-tree-id60164 . -303) (undo-tree-id60165 . -303) (undo-tree-id60166 . -303) (undo-tree-id60167 . -303) (undo-tree-id60168 . -303) (undo-tree-id60169 . -303) (undo-tree-id60170 . -303) (undo-tree-id60171 . -303) (undo-tree-id60172 . -303) (undo-tree-id60173 . -303) (undo-tree-id60174 . -303) (undo-tree-id60175 . -303) (undo-tree-id60176 . -303) (undo-tree-id60177 . -303) (undo-tree-id60178 . -304) (undo-tree-id60179 . -304) (undo-tree-id60180 . -304) (undo-tree-id60181 . -304) (undo-tree-id60182 . -304) (undo-tree-id60183 . -304) (undo-tree-id60184 . -304) (undo-tree-id60185 . -304) (undo-tree-id60186 . -304) (undo-tree-id60187 . -304) (undo-tree-id60188 . -304) (undo-tree-id60189 . -304) (undo-tree-id60190 . -304) (undo-tree-id60191 . -304) (undo-tree-id60192 . -304) (undo-tree-id60193 . -304) (undo-tree-id60194 . -304) (undo-tree-id60195 . -304) (undo-tree-id60196 . -304) (undo-tree-id60197 . -304) (undo-tree-id60198 . -304) (undo-tree-id60199 . -308) (undo-tree-id60200 . -308) (undo-tree-id60201 . -308) (undo-tree-id60202 . -308) (undo-tree-id60203 . -308) (undo-tree-id60204 . -308) (undo-tree-id60205 . -308) (undo-tree-id60206 . -308) (undo-tree-id60207 . -308) (undo-tree-id60208 . -308) (undo-tree-id60209 . -308) (undo-tree-id60210 . -313) (undo-tree-id60211 . -313) (undo-tree-id60212 . -313) (undo-tree-id60213 . -313) (undo-tree-id60214 . -313) (undo-tree-id60215 . -313) (undo-tree-id60216 . -313) (undo-tree-id60217 . -313) (undo-tree-id60218 . -313) (undo-tree-id60219 . -313) (undo-tree-id60220 . -313) (undo-tree-id60221 . -317) (undo-tree-id60222 . -317) (undo-tree-id60223 . -317) (undo-tree-id60224 . -317) (undo-tree-id60225 . -317) (undo-tree-id60226 . -317) (undo-tree-id60227 . -317) (undo-tree-id60228 . -317) (undo-tree-id60229 . -317) (undo-tree-id60230 . -317) (undo-tree-id60231 . -317) (undo-tree-id60232 . 39) (undo-tree-id60233 . -327) (undo-tree-id60234 . -326) (undo-tree-id60235 . -326) (undo-tree-id60236 . -326) (undo-tree-id60237 . -326) (undo-tree-id60238 . -326) (undo-tree-id60239 . -326) (undo-tree-id60240 . -326) (undo-tree-id60241 . -326) (undo-tree-id60242 . -326) (undo-tree-id60243 . -326) (undo-tree-id60244 . -326) (undo-tree-id60245 . -332) (undo-tree-id60246 . -332) (undo-tree-id60247 . -332) (undo-tree-id60248 . -332) (undo-tree-id60249 . -332) (undo-tree-id60250 . -332) (undo-tree-id60251 . -332) (undo-tree-id60252 . -332) (undo-tree-id60253 . -332) (undo-tree-id60254 . -332) (undo-tree-id60255 . -332) (undo-tree-id60256 . -333) (undo-tree-id60257 . -333) (undo-tree-id60258 . -333) (undo-tree-id60259 . -333) (undo-tree-id60260 . -333) (undo-tree-id60261 . -333) (undo-tree-id60262 . -333) (undo-tree-id60263 . -333) (undo-tree-id60264 . -333) (undo-tree-id60265 . -333) (undo-tree-id60266 . -333) (undo-tree-id60267 . -333) (undo-tree-id60268 . -333) (undo-tree-id60269 . -333) (undo-tree-id60270 . -333) (undo-tree-id60271 . -333) (undo-tree-id60272 . -333) (undo-tree-id60273 . -333) (undo-tree-id60274 . -333) (undo-tree-id60275 . -333) (undo-tree-id60276 . -333) (undo-tree-id60277 . -334) (undo-tree-id60278 . -334) (undo-tree-id60279 . -334) (undo-tree-id60280 . -334) (undo-tree-id60281 . -334) (undo-tree-id60282 . -334) (undo-tree-id60283 . -334) (undo-tree-id60284 . -334) (undo-tree-id60285 . -334) (undo-tree-id60286 . -334) (undo-tree-id60287 . -334) (undo-tree-id60288 . -342) (undo-tree-id60289 . -342) (undo-tree-id60290 . -342) (undo-tree-id60291 . -342) (undo-tree-id60292 . -342) (undo-tree-id60293 . -342) (undo-tree-id60294 . -342) (undo-tree-id60295 . -342) (undo-tree-id60296 . -342) (undo-tree-id60297 . -342) (undo-tree-id60298 . -342) (undo-tree-id60299 . -345) (undo-tree-id60300 . -345) (undo-tree-id60301 . -345) (undo-tree-id60302 . -345) (undo-tree-id60303 . -345) (undo-tree-id60304 . -345) (undo-tree-id60305 . -345) (undo-tree-id60306 . -345) (undo-tree-id60307 . -345) (undo-tree-id60308 . -345) (undo-tree-id60309 . -345) (undo-tree-id60310 . -350) (undo-tree-id60311 . -350) (undo-tree-id60312 . -350) (undo-tree-id60313 . -350) (undo-tree-id60314 . -350) (undo-tree-id60315 . -350) (undo-tree-id60316 . -350) (undo-tree-id60317 . -350) (undo-tree-id60318 . -350) (undo-tree-id60319 . -350) (undo-tree-id60320 . -350) (undo-tree-id60321 . -356) (undo-tree-id60322 . -356) (undo-tree-id60323 . -356) (undo-tree-id60324 . -356) (undo-tree-id60325 . -356) (undo-tree-id60326 . -356) (undo-tree-id60327 . -356) (undo-tree-id60328 . -356) (undo-tree-id60329 . -356) (undo-tree-id60330 . -356) (undo-tree-id60331 . -356) (undo-tree-id60332 . -357) (undo-tree-id60333 . -357) (undo-tree-id60334 . -357) (undo-tree-id60335 . -357) (undo-tree-id60336 . -357) (undo-tree-id60337 . -357) (undo-tree-id60338 . -357) (undo-tree-id60339 . -357) (undo-tree-id60340 . -357) (undo-tree-id60341 . -357) (undo-tree-id60342 . -357) (undo-tree-id60343 . -357) (undo-tree-id60344 . -357) (undo-tree-id60345 . -357) (undo-tree-id60346 . -357) (undo-tree-id60347 . -357) (undo-tree-id60348 . -358) (undo-tree-id60349 . -358) (undo-tree-id60350 . -358) (undo-tree-id60351 . -358) (undo-tree-id60352 . -358) (undo-tree-id60353 . -358) (undo-tree-id60354 . -358) (undo-tree-id60355 . -358) (undo-tree-id60356 . -358) (undo-tree-id60357 . -358) (undo-tree-id60358 . -358) (undo-tree-id60359 . -358) (undo-tree-id60360 . -358) (undo-tree-id60361 . -358) (undo-tree-id60362 . -358) (undo-tree-id60363 . -358) (undo-tree-id60364 . -358) (undo-tree-id60365 . -358) (undo-tree-id60366 . -358) (undo-tree-id60367 . -358) (undo-tree-id60368 . -358) (undo-tree-id60369 . -358) (undo-tree-id60370 . -358) (undo-tree-id60371 . -358) (undo-tree-id60372 . -253) (9538 . 9791) (#(" Now that we have built a character-level model, it’s time to look at word- level models and tackle a common natural language processing task: sentiment analysis. In the process we will learn how to handle sequences of variable lengths using masking." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 75 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 76 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 137 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 142 143 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 143 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 215 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 216 249 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 249 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 9643)) nil (25767 16407 252137 548000) 0 nil])
([nil nil ((#("Now that we have built a character-level model, it’s time to look at word- level models and tackle a common natural language processing task: sentiment analysis. In the process we will learn how to handle sequences of variable lengths using masking.

" 0 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 74 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 75 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 136 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 141 142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 142 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 214 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 215 248 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 248 249 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 249 250 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 250 251 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 9647) (undo-tree-id59222 . -250) (undo-tree-id59223 . -250) (undo-tree-id59224 . 251) (undo-tree-id59225 . -250) (undo-tree-id59226 . -251) (undo-tree-id59227 . -250) (undo-tree-id59228 . -2) (undo-tree-id59229 . -2) (undo-tree-id59230 . -2) (undo-tree-id59231 . -2) (undo-tree-id59232 . -2) (undo-tree-id59233 . -2) (undo-tree-id59234 . -2) (undo-tree-id59235 . -2) (undo-tree-id59236 . -2) (undo-tree-id59237 . -2) (undo-tree-id59238 . -2) (undo-tree-id59239 . -2) (undo-tree-id59240 . -2) (undo-tree-id59241 . -2) (undo-tree-id59242 . -2) (undo-tree-id59243 . -2) (undo-tree-id59244 . -2) (undo-tree-id59245 . -2) (undo-tree-id59246 . -2) (undo-tree-id59247 . -2) (undo-tree-id59248 . -2) (undo-tree-id59249 . -7) (undo-tree-id59250 . -7) (undo-tree-id59251 . -7) (undo-tree-id59252 . -7) (undo-tree-id59253 . -7) (undo-tree-id59254 . -7) (undo-tree-id59255 . -10) (undo-tree-id59256 . -10) (undo-tree-id59257 . -10) (undo-tree-id59258 . -10) (undo-tree-id59259 . -10) (undo-tree-id59260 . -10) (undo-tree-id59261 . -15) (undo-tree-id59262 . -15) (undo-tree-id59263 . -15) (undo-tree-id59264 . -15) (undo-tree-id59265 . -15) (undo-tree-id59266 . -15) (undo-tree-id59267 . -21) (undo-tree-id59268 . -21) (undo-tree-id59269 . -21) (undo-tree-id59270 . -21) (undo-tree-id59271 . -21) (undo-tree-id59272 . -21) (undo-tree-id59273 . -23) (undo-tree-id59274 . -23) (undo-tree-id59275 . -23) (undo-tree-id59276 . -23) (undo-tree-id59277 . -23) (undo-tree-id59278 . -23) (undo-tree-id59279 . -33) (undo-tree-id59280 . -33) (undo-tree-id59281 . -33) (undo-tree-id59282 . -33) (undo-tree-id59283 . -33) (undo-tree-id59284 . -33) (undo-tree-id59285 . -34) (undo-tree-id59286 . -34) (undo-tree-id59287 . -34) (undo-tree-id59288 . -34) (undo-tree-id59289 . -34) (undo-tree-id59290 . -34) (undo-tree-id59291 . -39) (undo-tree-id59292 . -39) (undo-tree-id59293 . -39) (undo-tree-id59294 . -39) (undo-tree-id59295 . -39) (undo-tree-id59296 . -39) (undo-tree-id59297 . -45) (undo-tree-id59298 . -45) (undo-tree-id59299 . -45) (undo-tree-id59300 . -45) (undo-tree-id59301 . -45) (undo-tree-id59302 . -45) (undo-tree-id59303 . -46) (undo-tree-id59304 . -46) (undo-tree-id59305 . -46) (undo-tree-id59306 . -46) (undo-tree-id59307 . -46) (undo-tree-id59308 . -46) (undo-tree-id59309 . -46) (undo-tree-id59310 . -46) (undo-tree-id59311 . -46) (undo-tree-id59312 . -46) (undo-tree-id59313 . -46) (undo-tree-id59314 . -46) (undo-tree-id59315 . -46) (undo-tree-id59316 . -46) (undo-tree-id59317 . -46) (undo-tree-id59318 . -46) (undo-tree-id59319 . -46) (undo-tree-id59320 . -46) (undo-tree-id59321 . -46) (undo-tree-id59322 . -46) (undo-tree-id59323 . -46) (undo-tree-id59324 . -46) (undo-tree-id59325 . -46) (undo-tree-id59326 . -46) (undo-tree-id59327 . -46) (undo-tree-id59328 . -46) (undo-tree-id59329 . -49) (undo-tree-id59330 . -49) (undo-tree-id59331 . -49) (undo-tree-id59332 . -49) (undo-tree-id59333 . -49) (undo-tree-id59334 . -49) (undo-tree-id59335 . -49) (undo-tree-id59336 . -49) (undo-tree-id59337 . -49) (undo-tree-id59338 . -49) (undo-tree-id59339 . -49) (undo-tree-id59340 . -49) (undo-tree-id59341 . -49) (undo-tree-id59342 . -49) (undo-tree-id59343 . -49) (undo-tree-id59344 . -49) (undo-tree-id59345 . -50) (undo-tree-id59346 . -50) (undo-tree-id59347 . -50) (undo-tree-id59348 . -50) (undo-tree-id59349 . -50) (undo-tree-id59350 . -50) (undo-tree-id59351 . -50) (undo-tree-id59352 . -50) (undo-tree-id59353 . -50) (undo-tree-id59354 . -50) (undo-tree-id59355 . -50) (undo-tree-id59356 . -50) (undo-tree-id59357 . -50) (undo-tree-id59358 . -50) (undo-tree-id59359 . -50) (undo-tree-id59360 . -50) (undo-tree-id59361 . -50) (undo-tree-id59362 . -50) (undo-tree-id59363 . -50) (undo-tree-id59364 . -50) (undo-tree-id59365 . -50) (undo-tree-id59366 . -50) (undo-tree-id59367 . -50) (undo-tree-id59368 . -50) (undo-tree-id59369 . -50) (undo-tree-id59370 . -50) (undo-tree-id59371 . -50) (undo-tree-id59372 . -50) (undo-tree-id59373 . -50) (undo-tree-id59374 . -50) (undo-tree-id59375 . -50) (undo-tree-id59376 . -51) (undo-tree-id59377 . -51) (undo-tree-id59378 . -51) (undo-tree-id59379 . -51) (undo-tree-id59380 . -51) (undo-tree-id59381 . -51) (undo-tree-id59382 . -51) (undo-tree-id59383 . -51) (undo-tree-id59384 . -51) (undo-tree-id59385 . -51) (undo-tree-id59386 . -51) (undo-tree-id59387 . -51) (undo-tree-id59388 . -51) (undo-tree-id59389 . -51) (undo-tree-id59390 . -51) (undo-tree-id59391 . -51) (undo-tree-id59392 . -56) (undo-tree-id59393 . -56) (undo-tree-id59394 . -56) (undo-tree-id59395 . -56) (undo-tree-id59396 . -56) (undo-tree-id59397 . -56) (undo-tree-id59398 . -56) (undo-tree-id59399 . -56) (undo-tree-id59400 . -56) (undo-tree-id59401 . -56) (undo-tree-id59402 . -56) (undo-tree-id59403 . -56) (undo-tree-id59404 . -56) (undo-tree-id59405 . -56) (undo-tree-id59406 . -56) (undo-tree-id59407 . -56) (undo-tree-id59408 . -59) (undo-tree-id59409 . -59) (undo-tree-id59410 . -59) (undo-tree-id59411 . -59) (undo-tree-id59412 . -59) (undo-tree-id59413 . -59) (undo-tree-id59414 . -59) (undo-tree-id59415 . -59) (undo-tree-id59416 . -59) (undo-tree-id59417 . -59) (undo-tree-id59418 . -59) (undo-tree-id59419 . -59) (undo-tree-id59420 . -59) (undo-tree-id59421 . -59) (undo-tree-id59422 . -59) (undo-tree-id59423 . -59) (undo-tree-id59424 . -64) (undo-tree-id59425 . -64) (undo-tree-id59426 . -64) (undo-tree-id59427 . -64) (undo-tree-id59428 . -64) (undo-tree-id59429 . -64) (undo-tree-id59430 . -64) (undo-tree-id59431 . -64) (undo-tree-id59432 . -64) (undo-tree-id59433 . -64) (undo-tree-id59434 . -64) (undo-tree-id59435 . -64) (undo-tree-id59436 . -64) (undo-tree-id59437 . -64) (undo-tree-id59438 . -64) (undo-tree-id59439 . -64) (undo-tree-id59440 . -67) (undo-tree-id59441 . -67) (undo-tree-id59442 . -67) (undo-tree-id59443 . -67) (undo-tree-id59444 . -67) (undo-tree-id59445 . -67) (undo-tree-id59446 . -67) (undo-tree-id59447 . -67) (undo-tree-id59448 . -67) (undo-tree-id59449 . -67) (undo-tree-id59450 . -67) (undo-tree-id59451 . -67) (undo-tree-id59452 . -67) (undo-tree-id59453 . -67) (undo-tree-id59454 . -67) (undo-tree-id59455 . -67) (undo-tree-id59456 . -72) (undo-tree-id59457 . -72) (undo-tree-id59458 . -72) (undo-tree-id59459 . -72) (undo-tree-id59460 . -72) (undo-tree-id59461 . -72) (undo-tree-id59462 . -72) (undo-tree-id59463 . -72) (undo-tree-id59464 . -72) (undo-tree-id59465 . -72) (undo-tree-id59466 . -72) (undo-tree-id59467 . -72) (undo-tree-id59468 . -72) (undo-tree-id59469 . -72) (undo-tree-id59470 . -72) (undo-tree-id59471 . -72) (undo-tree-id59472 . -73) (undo-tree-id59473 . -73) (undo-tree-id59474 . -73) (undo-tree-id59475 . -73) (undo-tree-id59476 . -73) (undo-tree-id59477 . -73) (undo-tree-id59478 . -73) (undo-tree-id59479 . -73) (undo-tree-id59480 . -73) (undo-tree-id59481 . -73) (undo-tree-id59482 . -73) (undo-tree-id59483 . -73) (undo-tree-id59484 . -73) (undo-tree-id59485 . -73) (undo-tree-id59486 . -73) (undo-tree-id59487 . -73) (undo-tree-id59488 . -79) (undo-tree-id59489 . -79) (undo-tree-id59490 . -79) (undo-tree-id59491 . -79) (undo-tree-id59492 . -79) (undo-tree-id59493 . -79) (undo-tree-id59494 . -79) (undo-tree-id59495 . -79) (undo-tree-id59496 . -79) (undo-tree-id59497 . -79) (undo-tree-id59498 . -79) (undo-tree-id59499 . -79) (undo-tree-id59500 . -79) (undo-tree-id59501 . -79) (undo-tree-id59502 . -79) (undo-tree-id59503 . -79) (undo-tree-id59504 . -86) (undo-tree-id59505 . -86) (undo-tree-id59506 . -86) (undo-tree-id59507 . -86) (undo-tree-id59508 . -86) (undo-tree-id59509 . -86) (undo-tree-id59510 . -86) (undo-tree-id59511 . -86) (undo-tree-id59512 . -86) (undo-tree-id59513 . -86) (undo-tree-id59514 . -86) (undo-tree-id59515 . -86) (undo-tree-id59516 . -86) (undo-tree-id59517 . -86) (undo-tree-id59518 . -86) (undo-tree-id59519 . -86) (undo-tree-id59520 . -86) (undo-tree-id59521 . -86) (undo-tree-id59522 . -86) (undo-tree-id59523 . -86) (undo-tree-id59524 . -86) (undo-tree-id59525 . -90) (undo-tree-id59526 . -90) (undo-tree-id59527 . -90) (undo-tree-id59528 . -90) (undo-tree-id59529 . -90) (undo-tree-id59530 . -90) (undo-tree-id59531 . -97) (undo-tree-id59532 . -97) (undo-tree-id59533 . -97) (undo-tree-id59534 . -97) (undo-tree-id59535 . -97) (undo-tree-id59536 . -97) (undo-tree-id59537 . -99) (undo-tree-id59538 . -99) (undo-tree-id59539 . -99) (undo-tree-id59540 . -99) (undo-tree-id59541 . -99) (undo-tree-id59542 . -99) (undo-tree-id59543 . -106) (undo-tree-id59544 . -106) (undo-tree-id59545 . -106) (undo-tree-id59546 . -106) (undo-tree-id59547 . -106) (undo-tree-id59548 . -106) (undo-tree-id59549 . -114) (undo-tree-id59550 . -114) (undo-tree-id59551 . -114) (undo-tree-id59552 . -114) (undo-tree-id59553 . -114) (undo-tree-id59554 . -114) (undo-tree-id59555 . -123) (undo-tree-id59556 . -123) (undo-tree-id59557 . -123) (undo-tree-id59558 . -123) (undo-tree-id59559 . -123) (undo-tree-id59560 . -123) (undo-tree-id59561 . -134) (undo-tree-id59562 . -134) (undo-tree-id59563 . -134) (undo-tree-id59564 . -134) (undo-tree-id59565 . -134) (undo-tree-id59566 . -134) (undo-tree-id59567 . -139) (undo-tree-id59568 . -139) (undo-tree-id59569 . -139) (undo-tree-id59570 . -139) (undo-tree-id59571 . -139) (undo-tree-id59572 . -139) (undo-tree-id59573 . -140) (undo-tree-id59574 . -140) (undo-tree-id59575 . -140) (undo-tree-id59576 . -140) (undo-tree-id59577 . -140) (undo-tree-id59578 . -140) (undo-tree-id59579 . -150) (undo-tree-id59580 . -150) (undo-tree-id59581 . -150) (undo-tree-id59582 . -150) (undo-tree-id59583 . -150) (undo-tree-id59584 . -150) (undo-tree-id59585 . -159) (undo-tree-id59586 . -159) (undo-tree-id59587 . -159) (undo-tree-id59588 . -159) (undo-tree-id59589 . -159) (undo-tree-id59590 . -159) (undo-tree-id59591 . -159) (undo-tree-id59592 . -159) (undo-tree-id59593 . -159) (undo-tree-id59594 . -159) (undo-tree-id59595 . -159) (undo-tree-id59596 . -159) (undo-tree-id59597 . -159) (undo-tree-id59598 . -159) (undo-tree-id59599 . -159) (undo-tree-id59600 . -159) (undo-tree-id59601 . -159) (undo-tree-id59602 . -159) (undo-tree-id59603 . -159) (undo-tree-id59604 . -159) (undo-tree-id59605 . -159) (undo-tree-id59606 . -159) (undo-tree-id59607 . -159) (undo-tree-id59608 . -159) (undo-tree-id59609 . -159) (undo-tree-id59610 . -159) (undo-tree-id59611 . -160) (undo-tree-id59612 . -160) (undo-tree-id59613 . -160) (undo-tree-id59614 . -160) (undo-tree-id59615 . -160) (undo-tree-id59616 . -160) (undo-tree-id59617 . -160) (undo-tree-id59618 . -160) (undo-tree-id59619 . -160) (undo-tree-id59620 . -160) (undo-tree-id59621 . -160) (undo-tree-id59622 . -160) (undo-tree-id59623 . -160) (undo-tree-id59624 . -160) (undo-tree-id59625 . -160) (undo-tree-id59626 . -160) (undo-tree-id59627 . -163) (undo-tree-id59628 . -163) (undo-tree-id59629 . -163) (undo-tree-id59630 . -163) (undo-tree-id59631 . -163) (undo-tree-id59632 . -163) (undo-tree-id59633 . -163) (undo-tree-id59634 . -163) (undo-tree-id59635 . -163) (undo-tree-id59636 . -163) (undo-tree-id59637 . -163) (undo-tree-id59638 . -163) (undo-tree-id59639 . -163) (undo-tree-id59640 . -163) (undo-tree-id59641 . -163) (undo-tree-id59642 . -163) (undo-tree-id59643 . -163) (undo-tree-id59644 . -163) (undo-tree-id59645 . -163) (undo-tree-id59646 . -163) (undo-tree-id59647 . -163) (undo-tree-id59648 . -163) (undo-tree-id59649 . -163) (undo-tree-id59650 . -163) (undo-tree-id59651 . -163) (undo-tree-id59652 . -163) (undo-tree-id59653 . -163) (undo-tree-id59654 . -163) (undo-tree-id59655 . -163) (undo-tree-id59656 . -163) (undo-tree-id59657 . -163) (undo-tree-id59658 . -223) (undo-tree-id59659 . -223) (undo-tree-id59660 . -223) (undo-tree-id59661 . -223) (undo-tree-id59662 . -223) (undo-tree-id59663 . -223) (undo-tree-id59664 . -223) (undo-tree-id59665 . -223) (undo-tree-id59666 . -223) (undo-tree-id59667 . -223) (undo-tree-id59668 . -223) (undo-tree-id59669 . -223) (undo-tree-id59670 . -223) (undo-tree-id59671 . -223) (undo-tree-id59672 . -223) (undo-tree-id59673 . -223) (undo-tree-id59674 . -250) (undo-tree-id59675 . -250) (undo-tree-id59676 . -250) (undo-tree-id59677 . -250) (undo-tree-id59678 . -250) (undo-tree-id59679 . -250) (undo-tree-id59680 . -250) (undo-tree-id59681 . -251) 9897) nil (25767 16407 251703 185000) 0 nil])
([nil nil ((#("- 
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 9645) (undo-tree-id58660 . -2) (undo-tree-id58661 . -2) (undo-tree-id58662 . -2) (undo-tree-id58663 . 1) (undo-tree-id58664 . 1) (undo-tree-id58665 . -1) (undo-tree-id58666 . -2) (undo-tree-id58667 . -2) (undo-tree-id58668 . -2) (undo-tree-id58669 . -2) (undo-tree-id58670 . -2) (undo-tree-id58671 . -2) (undo-tree-id58672 . -2) (undo-tree-id58673 . -2) (undo-tree-id58674 . -2) (undo-tree-id58675 . -2) (undo-tree-id58676 . -2) (undo-tree-id58677 . -2) (undo-tree-id58678 . -2) (undo-tree-id58679 . -2) (undo-tree-id58680 . -2) (undo-tree-id58681 . -2) (undo-tree-id58682 . -2) (undo-tree-id58683 . -1) (undo-tree-id58684 . -1) (undo-tree-id58685 . -1) (undo-tree-id58686 . -1) (undo-tree-id58687 . -1) (undo-tree-id58688 . -1) (undo-tree-id58689 . -1) (undo-tree-id58690 . -1) (undo-tree-id58691 . -1) (undo-tree-id58692 . -1) (undo-tree-id58693 . -1) (undo-tree-id58694 . -1) (undo-tree-id58695 . -1) (undo-tree-id58696 . -1) (undo-tree-id58697 . -1) (undo-tree-id58698 . -1) (undo-tree-id58699 . -1) (undo-tree-id58700 . -1) (undo-tree-id58701 . -1) (undo-tree-id58702 . -1) (undo-tree-id58703 . -2) (undo-tree-id58704 . -2) (undo-tree-id58705 . -2) (undo-tree-id58706 . -2) (undo-tree-id58707 . -2) (undo-tree-id58708 . -2) (undo-tree-id58709 . -2) (undo-tree-id58710 . -2) (undo-tree-id58711 . -2) (undo-tree-id58712 . -2) (undo-tree-id58713 . -2) (undo-tree-id58714 . -2) (undo-tree-id58715 . -2) (undo-tree-id58716 . -2) (undo-tree-id58717 . -2) (undo-tree-id58718 . -2) (undo-tree-id58719 . -2) (undo-tree-id58720 . -2) (undo-tree-id58721 . -2) (undo-tree-id58722 . -2) (undo-tree-id58723 . -2) (undo-tree-id58724 . -2) (undo-tree-id58725 . -2) (undo-tree-id58726 . -2) (undo-tree-id58727 . -2) (undo-tree-id58728 . -2) (undo-tree-id58729 . -2) (undo-tree-id58730 . -2) (undo-tree-id58731 . -2) (undo-tree-id58732 . -2) (undo-tree-id58733 . -2) (undo-tree-id58734 . -2) (undo-tree-id58735 . -2) (undo-tree-id58736 . -2) (undo-tree-id58737 . -2) (undo-tree-id58738 . -2) (undo-tree-id58739 . -2) (undo-tree-id58740 . -2) (undo-tree-id58741 . -2) (undo-tree-id58742 . -2) (undo-tree-id58743 . -2) (undo-tree-id58744 . -2) (undo-tree-id58745 . -2) (undo-tree-id58746 . -2) (undo-tree-id58747 . -2) (undo-tree-id58748 . -2) (undo-tree-id58749 . -2) (undo-tree-id58750 . -2) (undo-tree-id58751 . -2) (undo-tree-id58752 . -2) (undo-tree-id58753 . -2) (undo-tree-id58754 . -2) (undo-tree-id58755 . -2) (undo-tree-id58756 . -2) (undo-tree-id58757 . -2) (undo-tree-id58758 . -2) (undo-tree-id58759 . -2) (undo-tree-id58760 . -2) (undo-tree-id58761 . -2) (undo-tree-id58762 . -2) (undo-tree-id58763 . -2) (undo-tree-id58764 . -2) (undo-tree-id58765 . -2) (undo-tree-id58766 . -2) (undo-tree-id58767 . -2) (undo-tree-id58768 . -2) (undo-tree-id58769 . -2) (undo-tree-id58770 . -2) (undo-tree-id58771 . -2) (undo-tree-id58772 . -2) (undo-tree-id58773 . -2) (undo-tree-id58774 . -2) (undo-tree-id58775 . -2) (undo-tree-id58776 . -2) (undo-tree-id58777 . -2) (undo-tree-id58778 . -2) (undo-tree-id58779 . -2) (undo-tree-id58780 . -2) (undo-tree-id58781 . -2) (undo-tree-id58782 . -2) (undo-tree-id58783 . -2) (undo-tree-id58784 . -2) (undo-tree-id58785 . -2) (undo-tree-id58786 . -2) (undo-tree-id58787 . -2) (undo-tree-id58788 . -2) (undo-tree-id58789 . -2) (undo-tree-id58790 . -2) (undo-tree-id58791 . -2) (undo-tree-id58792 . -2) (undo-tree-id58793 . -2) (undo-tree-id58794 . -2) (undo-tree-id58795 . -2) (undo-tree-id58796 . -2) (undo-tree-id58797 . -2) (undo-tree-id58798 . -2) (undo-tree-id58799 . -2) (undo-tree-id58800 . -2) (undo-tree-id58801 . -2) (undo-tree-id58802 . -2) (undo-tree-id58803 . -2) (undo-tree-id58804 . -2) (undo-tree-id58805 . -2) (undo-tree-id58806 . -2) (undo-tree-id58807 . -2) (undo-tree-id58808 . -2) (undo-tree-id58809 . -2) (undo-tree-id58810 . -2) (undo-tree-id58811 . -2) (undo-tree-id58812 . -2) (undo-tree-id58813 . -2) (undo-tree-id58814 . -2) (undo-tree-id58815 . -2) (undo-tree-id58816 . -2) (undo-tree-id58817 . -2) (undo-tree-id58818 . -2) (undo-tree-id58819 . -2) (undo-tree-id58820 . -2) (undo-tree-id58821 . -2) (undo-tree-id58822 . -2) (undo-tree-id58823 . -2) (undo-tree-id58824 . -2) (undo-tree-id58825 . -2) (undo-tree-id58826 . -2) (undo-tree-id58827 . -2) (undo-tree-id58828 . -2) (undo-tree-id58829 . -2) (undo-tree-id58830 . -2) (undo-tree-id58831 . -2) (undo-tree-id58832 . -2) (undo-tree-id58833 . -2) (undo-tree-id58834 . -2) (undo-tree-id58835 . -2) (undo-tree-id58836 . -2) (undo-tree-id58837 . -2) (undo-tree-id58838 . -2) (undo-tree-id58839 . -2) (undo-tree-id58840 . -2) (undo-tree-id58841 . -2) (undo-tree-id58842 . -2) (undo-tree-id58843 . -2) (undo-tree-id58844 . -2) (undo-tree-id58845 . -2) (undo-tree-id58846 . -2) (undo-tree-id58847 . -2) (undo-tree-id58848 . -2) (undo-tree-id58849 . -2) (undo-tree-id58850 . -2) (undo-tree-id58851 . -2) (undo-tree-id58852 . -2) (undo-tree-id58853 . -2) (undo-tree-id58854 . -2) (undo-tree-id58855 . -2) (undo-tree-id58856 . -2) (undo-tree-id58857 . -2) (undo-tree-id58858 . -2) (undo-tree-id58859 . -2) (undo-tree-id58860 . -2) (undo-tree-id58861 . -2) (undo-tree-id58862 . -2) (undo-tree-id58863 . -2) (undo-tree-id58864 . -2) (undo-tree-id58865 . -2) (undo-tree-id58866 . -2) (undo-tree-id58867 . -2) (undo-tree-id58868 . -2) (undo-tree-id58869 . -2) (undo-tree-id58870 . -2) (undo-tree-id58871 . -2) (undo-tree-id58872 . -2) (undo-tree-id58873 . -2) (undo-tree-id58874 . -2) (undo-tree-id58875 . -2) (undo-tree-id58876 . -2) (undo-tree-id58877 . -2) (undo-tree-id58878 . -2) (undo-tree-id58879 . -2) (undo-tree-id58880 . -2) (undo-tree-id58881 . -2) (undo-tree-id58882 . -2) (undo-tree-id58883 . -2) (undo-tree-id58884 . -2) (undo-tree-id58885 . -2) (undo-tree-id58886 . -2) (undo-tree-id58887 . -2) (undo-tree-id58888 . -2) (undo-tree-id58889 . -2) (undo-tree-id58890 . -2) (undo-tree-id58891 . -2) (undo-tree-id58892 . -2) (undo-tree-id58893 . -2) (undo-tree-id58894 . -2) (undo-tree-id58895 . -2) (undo-tree-id58896 . -2) (undo-tree-id58897 . -2) (undo-tree-id58898 . -2) (undo-tree-id58899 . -2) (undo-tree-id58900 . -2) (undo-tree-id58901 . -2) (undo-tree-id58902 . -2) (undo-tree-id58903 . -2) (undo-tree-id58904 . -2) (undo-tree-id58905 . -2) (undo-tree-id58906 . -2) (undo-tree-id58907 . -2) (undo-tree-id58908 . -2) (undo-tree-id58909 . -2) (undo-tree-id58910 . -2) (undo-tree-id58911 . -2) (undo-tree-id58912 . -2) (undo-tree-id58913 . -2) (undo-tree-id58914 . -2) (undo-tree-id58915 . -2) (undo-tree-id58916 . -2) (undo-tree-id58917 . -2) (undo-tree-id58918 . -2) (undo-tree-id58919 . -2) (undo-tree-id58920 . -2) (undo-tree-id58921 . -2) (undo-tree-id58922 . -2) (undo-tree-id58923 . -2) (undo-tree-id58924 . -2) (undo-tree-id58925 . -2) (undo-tree-id58926 . -2) (undo-tree-id58927 . -2) (undo-tree-id58928 . -2) (undo-tree-id58929 . -2) (undo-tree-id58930 . -2) (undo-tree-id58931 . -2) (undo-tree-id58932 . -2) (undo-tree-id58933 . -2) (undo-tree-id58934 . -2) (undo-tree-id58935 . -2) (undo-tree-id58936 . -2) (undo-tree-id58937 . -2) (undo-tree-id58938 . -2) (undo-tree-id58939 . -2) (undo-tree-id58940 . -2) (undo-tree-id58941 . -2) (undo-tree-id58942 . -2) (undo-tree-id58943 . -2) (undo-tree-id58944 . -2) (undo-tree-id58945 . -2) (undo-tree-id58946 . -2) (undo-tree-id58947 . -2) (undo-tree-id58948 . -2) (undo-tree-id58949 . -2) (undo-tree-id58950 . -2) (undo-tree-id58951 . -2) (undo-tree-id58952 . -2) (undo-tree-id58953 . -2) (undo-tree-id58954 . -2) (undo-tree-id58955 . -2) (undo-tree-id58956 . -2) (undo-tree-id58957 . -2) (undo-tree-id58958 . -2) (undo-tree-id58959 . -2) (undo-tree-id58960 . -2) (undo-tree-id58961 . -2) (undo-tree-id58962 . -2) (undo-tree-id58963 . -2) (undo-tree-id58964 . -2) (undo-tree-id58965 . -2) (undo-tree-id58966 . -2) (undo-tree-id58967 . -2) (undo-tree-id58968 . -2) (undo-tree-id58969 . -2) (undo-tree-id58970 . -2) (undo-tree-id58971 . -2) (undo-tree-id58972 . -2) (undo-tree-id58973 . -2) (undo-tree-id58974 . -2) (undo-tree-id58975 . -2) (undo-tree-id58976 . -2) (undo-tree-id58977 . -2) (undo-tree-id58978 . -2) (undo-tree-id58979 . -2) (undo-tree-id58980 . -2) (undo-tree-id58981 . -2) (undo-tree-id58982 . -2) (undo-tree-id58983 . -2) (undo-tree-id58984 . -2) (undo-tree-id58985 . -2) (undo-tree-id58986 . -2) (undo-tree-id58987 . -2) (undo-tree-id58988 . -2) (undo-tree-id58989 . -2) (undo-tree-id58990 . -2) (undo-tree-id58991 . -2) (undo-tree-id58992 . -2) (undo-tree-id58993 . -2) (undo-tree-id58994 . -2) (undo-tree-id58995 . -2) (undo-tree-id58996 . -2) (undo-tree-id58997 . -2) (undo-tree-id58998 . -2) (undo-tree-id58999 . -2) (undo-tree-id59000 . -2) (undo-tree-id59001 . -2) (undo-tree-id59002 . -2) (undo-tree-id59003 . -2) (undo-tree-id59004 . -2) (undo-tree-id59005 . -2) (undo-tree-id59006 . -2) (undo-tree-id59007 . -2) (undo-tree-id59008 . -2) (undo-tree-id59009 . -2) (undo-tree-id59010 . -2) (undo-tree-id59011 . -2) (undo-tree-id59012 . -2) (undo-tree-id59013 . -2) (undo-tree-id59014 . -2) (undo-tree-id59015 . -2) (undo-tree-id59016 . -2) (undo-tree-id59017 . -2) (undo-tree-id59018 . -2) (undo-tree-id59019 . -2) (undo-tree-id59020 . -2) (undo-tree-id59021 . -2) (undo-tree-id59022 . -2) (undo-tree-id59023 . -2) (undo-tree-id59024 . -2) (undo-tree-id59025 . -2) (undo-tree-id59026 . -2) (undo-tree-id59027 . -2) (undo-tree-id59028 . -2) (undo-tree-id59029 . -2) (undo-tree-id59030 . -2) (undo-tree-id59031 . -2) (undo-tree-id59032 . -2) (undo-tree-id59033 . -2) (undo-tree-id59034 . -2) (undo-tree-id59035 . -2) (undo-tree-id59036 . -2) (undo-tree-id59037 . -2) (undo-tree-id59038 . -2) (undo-tree-id59039 . -2) (undo-tree-id59040 . -2) (undo-tree-id59041 . -2) (undo-tree-id59042 . -2) (undo-tree-id59043 . -2) (undo-tree-id59044 . -2) (undo-tree-id59045 . -2) (undo-tree-id59046 . -2) (undo-tree-id59047 . -2) (undo-tree-id59048 . -2) (undo-tree-id59049 . -2) (undo-tree-id59050 . -2) (undo-tree-id59051 . -2) (undo-tree-id59052 . -2) (undo-tree-id59053 . -2) (undo-tree-id59054 . -2) (undo-tree-id59055 . -2) (undo-tree-id59056 . -2) (undo-tree-id59057 . -2) (undo-tree-id59058 . -2) (undo-tree-id59059 . -2) (undo-tree-id59060 . -2) (undo-tree-id59061 . -2) (undo-tree-id59062 . -2) (undo-tree-id59063 . -2) (undo-tree-id59064 . -2) (undo-tree-id59065 . -2) (undo-tree-id59066 . -2) (undo-tree-id59067 . -2) (undo-tree-id59068 . -2) (undo-tree-id59069 . -2) (undo-tree-id59070 . -2) (undo-tree-id59071 . -2) (undo-tree-id59072 . -2) (undo-tree-id59073 . -2) (undo-tree-id59074 . -2) (undo-tree-id59075 . -2) (undo-tree-id59076 . -2) (undo-tree-id59077 . -2) (undo-tree-id59078 . -2) (undo-tree-id59079 . -2) (undo-tree-id59080 . -2) (undo-tree-id59081 . -2) (undo-tree-id59082 . -2) (undo-tree-id59083 . -2) (undo-tree-id59084 . -2) (undo-tree-id59085 . -2) (undo-tree-id59086 . -2) (undo-tree-id59087 . -2) (undo-tree-id59088 . -2) (undo-tree-id59089 . -2) (undo-tree-id59090 . -2) (undo-tree-id59091 . -2) (undo-tree-id59092 . -2) (undo-tree-id59093 . -2) (undo-tree-id59094 . -2) (undo-tree-id59095 . -2) (undo-tree-id59096 . -2) (undo-tree-id59097 . -2) (undo-tree-id59098 . -2) (undo-tree-id59099 . -2) (undo-tree-id59100 . -2) (undo-tree-id59101 . -2) (undo-tree-id59102 . -2) (undo-tree-id59103 . -2) (undo-tree-id59104 . -2) (undo-tree-id59105 . -2) (undo-tree-id59106 . -2) (undo-tree-id59107 . -2) (undo-tree-id59108 . -2) (undo-tree-id59109 . -2) (undo-tree-id59110 . -2) (undo-tree-id59111 . -2) (undo-tree-id59112 . -2) (undo-tree-id59113 . -2) (undo-tree-id59114 . -2) (undo-tree-id59115 . -2) (undo-tree-id59116 . -2) (undo-tree-id59117 . -2) (undo-tree-id59118 . -2) (undo-tree-id59119 . -2) (undo-tree-id59120 . -2) (undo-tree-id59121 . -2) (undo-tree-id59122 . -2) (undo-tree-id59123 . -2) (undo-tree-id59124 . -2) (undo-tree-id59125 . -2) (undo-tree-id59126 . -2) (undo-tree-id59127 . -2) (undo-tree-id59128 . -2) (undo-tree-id59129 . -2) (undo-tree-id59130 . -2) (undo-tree-id59131 . -2) (undo-tree-id59132 . -2) (undo-tree-id59133 . -2) (undo-tree-id59134 . -2) (undo-tree-id59135 . -2) (undo-tree-id59136 . -2) (undo-tree-id59137 . -2) (undo-tree-id59138 . -2) (undo-tree-id59139 . -2) (undo-tree-id59140 . -2) (undo-tree-id59141 . -2) (undo-tree-id59142 . -2) (undo-tree-id59143 . -2) (undo-tree-id59144 . -2) (undo-tree-id59145 . -2) (undo-tree-id59146 . -2) (undo-tree-id59147 . -2) (undo-tree-id59148 . -2) (undo-tree-id59149 . -2) (undo-tree-id59150 . -2) (undo-tree-id59151 . -2) (undo-tree-id59152 . -2) (undo-tree-id59153 . -2) (undo-tree-id59154 . -2) (undo-tree-id59155 . -2) (undo-tree-id59156 . -2) (undo-tree-id59157 . -2) (undo-tree-id59158 . -2) (undo-tree-id59159 . -2) (undo-tree-id59160 . -2) (undo-tree-id59161 . -2) (undo-tree-id59162 . -2) (undo-tree-id59163 . -2) (undo-tree-id59164 . -2) (undo-tree-id59165 . -2) (undo-tree-id59166 . -2) (undo-tree-id59167 . -2) (undo-tree-id59168 . -2) (undo-tree-id59169 . -2) (undo-tree-id59170 . -2) (undo-tree-id59171 . -2) (undo-tree-id59172 . -2) (undo-tree-id59173 . -2) (undo-tree-id59174 . -2) (undo-tree-id59175 . -2) (undo-tree-id59176 . -2) (undo-tree-id59177 . -2) (undo-tree-id59178 . -2) (undo-tree-id59179 . -2) (undo-tree-id59180 . -2) (undo-tree-id59181 . -2) (undo-tree-id59182 . -2) (undo-tree-id59183 . -2) (undo-tree-id59184 . -2) (undo-tree-id59185 . -2) (undo-tree-id59186 . -2) (undo-tree-id59187 . -2) (undo-tree-id59188 . -2) (undo-tree-id59189 . -2) (undo-tree-id59190 . -2) (undo-tree-id59191 . -2) (undo-tree-id59192 . -2) (undo-tree-id59193 . -2) (undo-tree-id59194 . -2) (undo-tree-id59195 . -2) (undo-tree-id59196 . -2) (undo-tree-id59197 . -2) (undo-tree-id59198 . -2) (undo-tree-id59199 . -2) (undo-tree-id59200 . -2) (undo-tree-id59201 . -2) (undo-tree-id59202 . -2) (undo-tree-id59203 . -2) (undo-tree-id59204 . -2) (undo-tree-id59205 . -1) (undo-tree-id59206 . -1) (undo-tree-id59207 . -1) (undo-tree-id59208 . -1) (undo-tree-id59209 . -1) (undo-tree-id59210 . -1) (undo-tree-id59211 . -1) (undo-tree-id59212 . -1) (undo-tree-id59213 . -1) (undo-tree-id59214 . -1) (undo-tree-id59215 . -1) (undo-tree-id59216 . -1) (undo-tree-id59217 . -1) (undo-tree-id59218 . -1) (undo-tree-id59219 . -1) (undo-tree-id59220 . -1) (undo-tree-id59221 . -3) 9646) nil (25767 16450 722150 642000) 0 nil])
([nil nil ((10763 . 10766)) nil (25767 16528 628406 751000) 0 nil] [nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t)) . 9645) (undo-tree-id58657 . 1) (undo-tree-id58658 . 1) (undo-tree-id58659 . -1)) ((9645 . 9646) (t 25767 16407 366040 644000)) (25767 16407 249055 601000) 0 nil])
([nil nil ((10768 . 10770) (10767 . 10768)) nil (25767 16528 628406 188000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 11298 . 11299) (nil fontified nil 11224 . 11299) (nil fontified nil 11153 . 11224) (nil fontified nil 11082 . 11153) (nil fontified nil 11011 . 11082) (nil fontified nil 10937 . 11011) (nil fontified nil 10861 . 10937) (nil fontified nil 10789 . 10861) (nil fontified nil 10770 . 10789) (10770 . 11299) 10769) nil (25767 16528 628405 169000) 0 nil])
([nil nil ((10789 . 10791)) nil (25767 16528 628403 107000) 0 nil])
([nil nil ((11225 . 11226) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11225) (11154 . 11155) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11154) (11083 . 11084) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11083) (11012 . 11013) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11012) (10938 . 10939) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10938) (10862 . 10863) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -10862) 10791) nil (25767 16528 628401 724000) 0 nil])
([nil nil ((#("If MNIST is the “hello world” of computer vision, then the " 0 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10791) (undo-tree-id61772 . -58) (undo-tree-id61773 . -58) (undo-tree-id61774 . 59) (undo-tree-id61775 . -58) (undo-tree-id61776 . -58) 10849) nil (25767 16528 628399 238000) 0 nil])
([nil nil ((10811 . 10812)) nil (25767 16528 628395 800000) 0 nil])
([nil nil ((#("is the “hello world” of natural language processing: it" 0 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10813) (undo-tree-id61767 . -54) (undo-tree-id61768 . -54) (undo-tree-id61769 . -54) (undo-tree-id61770 . -52) (undo-tree-id61771 . -54) 10867) nil (25767 16528 628394 897000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10813) (undo-tree-id61766 . 1)) nil (25767 16528 628390 589000) 0 nil])
([nil nil ((#("for each review indicating whether it is negative (0) or positive (1)" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 57 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10984) (undo-tree-id61615 . -68) (undo-tree-id61616 . -68) (undo-tree-id61617 . -68) (undo-tree-id61618 . -56) (undo-tree-id61619 . -68) (undo-tree-id61620 . -4) (undo-tree-id61621 . -4) (undo-tree-id61622 . -4) (undo-tree-id61623 . -4) (undo-tree-id61624 . -4) (undo-tree-id61625 . -4) (undo-tree-id61626 . -4) (undo-tree-id61627 . -4) (undo-tree-id61628 . -4) (undo-tree-id61629 . -4) (undo-tree-id61630 . -4) (undo-tree-id61631 . -4) (undo-tree-id61632 . -4) (undo-tree-id61633 . -4) (undo-tree-id61634 . -4) (undo-tree-id61635 . -4) (undo-tree-id61636 . -4) (undo-tree-id61637 . -4) (undo-tree-id61638 . -4) (undo-tree-id61639 . -4) (undo-tree-id61640 . -4) (undo-tree-id61641 . -4) (undo-tree-id61642 . -4) (undo-tree-id61643 . -4) (undo-tree-id61644 . -4) (undo-tree-id61645 . -4) (undo-tree-id61646 . -4) (undo-tree-id61647 . -4) (undo-tree-id61648 . -4) (undo-tree-id61649 . -4) (undo-tree-id61650 . -4) (undo-tree-id61651 . -4) (undo-tree-id61652 . -4) (undo-tree-id61653 . -4) (undo-tree-id61654 . -4) (undo-tree-id61655 . -4) (undo-tree-id61656 . -4) (undo-tree-id61657 . -4) (undo-tree-id61658 . -4) (undo-tree-id61659 . -4) (undo-tree-id61660 . -4) (undo-tree-id61661 . -4) (undo-tree-id61662 . -4) (undo-tree-id61663 . -4) (undo-tree-id61664 . -4) (undo-tree-id61665 . -4) (undo-tree-id61666 . -4) (undo-tree-id61667 . -4) (undo-tree-id61668 . -4) (undo-tree-id61669 . -4) (undo-tree-id61670 . -4) (undo-tree-id61671 . -4) (undo-tree-id61672 . -4) (undo-tree-id61673 . -4) (undo-tree-id61674 . -69) (undo-tree-id61675 . -68) (undo-tree-id61676 . -64) (undo-tree-id61677 . -64) (undo-tree-id61678 . -64) (undo-tree-id61679 . -64) (undo-tree-id61680 . -64) (undo-tree-id61681 . -64) (undo-tree-id61682 . -64) (undo-tree-id61683 . -64) (undo-tree-id61684 . -64) (undo-tree-id61685 . -64) (undo-tree-id61686 . -64) (undo-tree-id61687 . -64) (undo-tree-id61688 . -64) (undo-tree-id61689 . -64) (undo-tree-id61690 . -64) (undo-tree-id61691 . -64) (undo-tree-id61692 . -64) (undo-tree-id61693 . -64) (undo-tree-id61694 . -64) (undo-tree-id61695 . -64) (undo-tree-id61696 . -64) (undo-tree-id61697 . -66) (undo-tree-id61698 . -66) (undo-tree-id61699 . -66) (undo-tree-id61700 . -66) (undo-tree-id61701 . -66) (undo-tree-id61702 . -66) (undo-tree-id61703 . -66) (undo-tree-id61704 . -66) (undo-tree-id61705 . -66) (undo-tree-id61706 . -66) (undo-tree-id61707 . -66) (undo-tree-id61708 . -66) (undo-tree-id61709 . -66) (undo-tree-id61710 . -66) (undo-tree-id61711 . -66) (undo-tree-id61712 . -66) (undo-tree-id61713 . -67) (undo-tree-id61714 . -67) (undo-tree-id61715 . -67) (undo-tree-id61716 . -67) (undo-tree-id61717 . -67) (undo-tree-id61718 . -67) (undo-tree-id61719 . -67) (undo-tree-id61720 . -67) (undo-tree-id61721 . -67) (undo-tree-id61722 . -67) (undo-tree-id61723 . -67) (undo-tree-id61724 . -67) (undo-tree-id61725 . -67) (undo-tree-id61726 . -67) (undo-tree-id61727 . -67) (undo-tree-id61728 . -67) (undo-tree-id61729 . -67) (undo-tree-id61730 . -67) (undo-tree-id61731 . -67) (undo-tree-id61732 . -67) (undo-tree-id61733 . -67) (undo-tree-id61734 . -67) (undo-tree-id61735 . -67) (undo-tree-id61736 . -67) (undo-tree-id61737 . -67) (undo-tree-id61738 . -67) (undo-tree-id61739 . -68) (undo-tree-id61740 . -68) (undo-tree-id61741 . -68) (undo-tree-id61742 . -68) (undo-tree-id61743 . -68) (undo-tree-id61744 . -68) (undo-tree-id61745 . -68) (undo-tree-id61746 . -68) (undo-tree-id61747 . -68) (undo-tree-id61748 . -68) (undo-tree-id61749 . 1) (undo-tree-id61750 . -69) (undo-tree-id61751 . 3) (undo-tree-id61752 . -67) (undo-tree-id61753 . -68) (undo-tree-id61754 . -68) (undo-tree-id61755 . -68) (undo-tree-id61756 . -68) (undo-tree-id61757 . -68) (undo-tree-id61758 . -68) (undo-tree-id61759 . -68) (undo-tree-id61760 . -68) (undo-tree-id61761 . -68) (undo-tree-id61762 . -68) (undo-tree-id61763 . -68) (undo-tree-id61764 . -68) (undo-tree-id61765 . -69) 11052) nil (25767 16528 628384 764000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10983) (undo-tree-id61405 . -1) (undo-tree-id61406 . -1) (undo-tree-id61407 . -1) (undo-tree-id61408 . -1) (undo-tree-id61409 . -1) (undo-tree-id61410 . -1) (undo-tree-id61411 . -1) (undo-tree-id61412 . -1) (undo-tree-id61413 . -1) (undo-tree-id61414 . -1) (undo-tree-id61415 . -1) (undo-tree-id61416 . -1) (undo-tree-id61417 . -1) (undo-tree-id61418 . -1) (undo-tree-id61419 . -1) (undo-tree-id61420 . -1) (undo-tree-id61421 . -1) (undo-tree-id61422 . -1) (undo-tree-id61423 . -1) (undo-tree-id61424 . -1) (undo-tree-id61425 . -1) (undo-tree-id61426 . -1) (undo-tree-id61427 . -1) (undo-tree-id61428 . -1) (undo-tree-id61429 . -1) (undo-tree-id61430 . -1) (undo-tree-id61431 . -1) (undo-tree-id61432 . -1) (undo-tree-id61433 . -1) (undo-tree-id61434 . -1) (undo-tree-id61435 . -1) (undo-tree-id61436 . -1) (undo-tree-id61437 . -1) (undo-tree-id61438 . -1) (undo-tree-id61439 . -1) (undo-tree-id61440 . -1) (undo-tree-id61441 . -1) (undo-tree-id61442 . -1) (undo-tree-id61443 . -1) (undo-tree-id61444 . -1) (undo-tree-id61445 . -1) (undo-tree-id61446 . -1) (undo-tree-id61447 . -1) (undo-tree-id61448 . -1) (undo-tree-id61449 . -1) (undo-tree-id61450 . -1) (undo-tree-id61451 . -1) (undo-tree-id61452 . -1) (undo-tree-id61453 . -1) (undo-tree-id61454 . -1) (undo-tree-id61455 . -1) (undo-tree-id61456 . -1) (undo-tree-id61457 . -1) (undo-tree-id61458 . -1) (undo-tree-id61459 . -1) (undo-tree-id61460 . -1) (undo-tree-id61461 . -1) (undo-tree-id61462 . -1) (undo-tree-id61463 . -1) (undo-tree-id61464 . -1) (undo-tree-id61465 . -1) (undo-tree-id61466 . -1) (undo-tree-id61467 . -1) (undo-tree-id61468 . -1) (undo-tree-id61469 . -1) (undo-tree-id61470 . -1) (undo-tree-id61471 . -1) (undo-tree-id61472 . -1) (undo-tree-id61473 . -1) (undo-tree-id61474 . -1) (undo-tree-id61475 . -1) (undo-tree-id61476 . -1) (undo-tree-id61477 . -1) (undo-tree-id61478 . -1) (undo-tree-id61479 . -1) (undo-tree-id61480 . -1) (undo-tree-id61481 . -1) (undo-tree-id61482 . -1) (undo-tree-id61483 . -1) (undo-tree-id61484 . -1) (undo-tree-id61485 . -1) (undo-tree-id61486 . -1) (undo-tree-id61487 . -1) (undo-tree-id61488 . -1) (undo-tree-id61489 . -1) (undo-tree-id61490 . -1) (undo-tree-id61491 . -1) (undo-tree-id61492 . -1) (undo-tree-id61493 . -1) (undo-tree-id61494 . -1) (undo-tree-id61495 . -1) (undo-tree-id61496 . -1) (undo-tree-id61497 . -1) (undo-tree-id61498 . -1) (undo-tree-id61499 . -1) (undo-tree-id61500 . -1) (undo-tree-id61501 . -1) (undo-tree-id61502 . -1) (undo-tree-id61503 . -1) (undo-tree-id61504 . -1) (undo-tree-id61505 . -1) (undo-tree-id61506 . -1) (undo-tree-id61507 . -1) (undo-tree-id61508 . -1) (undo-tree-id61509 . -1) (undo-tree-id61510 . -1) (undo-tree-id61511 . -1) (undo-tree-id61512 . -1) (undo-tree-id61513 . -1) (undo-tree-id61514 . -1) (undo-tree-id61515 . -1) (undo-tree-id61516 . -1) (undo-tree-id61517 . -1) (undo-tree-id61518 . -1) (undo-tree-id61519 . -1) (undo-tree-id61520 . -1) (undo-tree-id61521 . -1) (undo-tree-id61522 . -1) (undo-tree-id61523 . -1) (undo-tree-id61524 . -1) (undo-tree-id61525 . -1) (undo-tree-id61526 . -1) (undo-tree-id61527 . -1) (undo-tree-id61528 . -1) (undo-tree-id61529 . -1) (undo-tree-id61530 . -1) (undo-tree-id61531 . -1) (undo-tree-id61532 . -1) (undo-tree-id61533 . -1) (undo-tree-id61534 . -1) (undo-tree-id61535 . -1) (undo-tree-id61536 . -1) (undo-tree-id61537 . -1) (undo-tree-id61538 . -1) (undo-tree-id61539 . -1) (undo-tree-id61540 . -1) (undo-tree-id61541 . -1) (undo-tree-id61542 . -1) (undo-tree-id61543 . -1) (undo-tree-id61544 . -1) (undo-tree-id61545 . -1) (undo-tree-id61546 . -1) (undo-tree-id61547 . -1) (undo-tree-id61548 . -1) (undo-tree-id61549 . -1) (undo-tree-id61550 . -1) (undo-tree-id61551 . -1) (undo-tree-id61552 . -1) (undo-tree-id61553 . -1) (undo-tree-id61554 . -1) (undo-tree-id61555 . -1) (undo-tree-id61556 . -1) (undo-tree-id61557 . -1) (undo-tree-id61558 . -1) (undo-tree-id61559 . -1) (undo-tree-id61560 . -1) (undo-tree-id61561 . -1) (undo-tree-id61562 . -1) (undo-tree-id61563 . -1) (undo-tree-id61564 . -1) (undo-tree-id61565 . -1) (undo-tree-id61566 . -1) (undo-tree-id61567 . -1) (undo-tree-id61568 . -1) (undo-tree-id61569 . -1) (undo-tree-id61570 . -1) (undo-tree-id61571 . -1) (undo-tree-id61572 . -1) (undo-tree-id61573 . -1) (undo-tree-id61574 . -1) (undo-tree-id61575 . -1) (undo-tree-id61576 . -1) (undo-tree-id61577 . -1) (undo-tree-id61578 . -1) (undo-tree-id61579 . -1) (undo-tree-id61580 . -1) (undo-tree-id61581 . -1) (undo-tree-id61582 . -1) (undo-tree-id61583 . -1) (undo-tree-id61584 . -1) (undo-tree-id61585 . -1) (undo-tree-id61586 . -1) (undo-tree-id61587 . -1) (undo-tree-id61588 . -1) (undo-tree-id61589 . -1) (undo-tree-id61590 . -1) (undo-tree-id61591 . -1) (undo-tree-id61592 . -1) (undo-tree-id61593 . -1) (undo-tree-id61594 . -1) (undo-tree-id61595 . -1) (undo-tree-id61596 . -1) (undo-tree-id61597 . -1) (undo-tree-id61598 . -1) (undo-tree-id61599 . -1) (undo-tree-id61600 . -1) (undo-tree-id61601 . -1) (undo-tree-id61602 . -1) (undo-tree-id61603 . -1) (undo-tree-id61604 . -1) (undo-tree-id61605 . -1) (undo-tree-id61606 . -1) (undo-tree-id61607 . -1) (undo-tree-id61608 . -1) (undo-tree-id61609 . -1) (undo-tree-id61610 . -1) (undo-tree-id61611 . -1) (undo-tree-id61612 . -1) (undo-tree-id61613 . -1) (undo-tree-id61614 . -1)) nil (25767 16528 628292 665000) 0 nil])
([nil nil ((#("Just like MNIST, the IMDb reviews dataset is popular for good reasons: it is simple enough to be tackled on a laptop in a reasonable" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 56 57 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 57 131 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 131 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 10985) (undo-tree-id61238 . -131) (undo-tree-id61239 . -132) (undo-tree-id61240 . -132) (undo-tree-id61241 . -131) (undo-tree-id61242 . -56) (undo-tree-id61243 . -132) (undo-tree-id61244 . -132) (undo-tree-id61245 . -3) (undo-tree-id61246 . -3) (undo-tree-id61247 . -3) (undo-tree-id61248 . -3) (undo-tree-id61249 . -3) (undo-tree-id61250 . -3) (undo-tree-id61251 . -3) (undo-tree-id61252 . -3) (undo-tree-id61253 . -3) (undo-tree-id61254 . -3) (undo-tree-id61255 . -3) (undo-tree-id61256 . -3) (undo-tree-id61257 . -3) (undo-tree-id61258 . -3) (undo-tree-id61259 . -3) (undo-tree-id61260 . -3) (undo-tree-id61261 . -3) (undo-tree-id61262 . -3) (undo-tree-id61263 . -3) (undo-tree-id61264 . -3) (undo-tree-id61265 . -3) (undo-tree-id61266 . -8) (undo-tree-id61267 . -8) (undo-tree-id61268 . -8) (undo-tree-id61269 . -8) (undo-tree-id61270 . -8) (undo-tree-id61271 . -8) (undo-tree-id61272 . 122) (undo-tree-id61273 . -15) (undo-tree-id61274 . -14) (undo-tree-id61275 . -14) (undo-tree-id61276 . -14) (undo-tree-id61277 . -14) (undo-tree-id61278 . -14) (undo-tree-id61279 . -14) (undo-tree-id61280 . -15) (undo-tree-id61281 . -15) (undo-tree-id61282 . -15) (undo-tree-id61283 . -15) (undo-tree-id61284 . -15) (undo-tree-id61285 . -15) (undo-tree-id61286 . -19) (undo-tree-id61287 . -19) (undo-tree-id61288 . -19) (undo-tree-id61289 . -19) (undo-tree-id61290 . -19) (undo-tree-id61291 . -19) (undo-tree-id61292 . 111) (undo-tree-id61293 . -25) (undo-tree-id61294 . -24) (undo-tree-id61295 . -24) (undo-tree-id61296 . -24) (undo-tree-id61297 . -24) (undo-tree-id61298 . -24) (undo-tree-id61299 . -24) (undo-tree-id61300 . -32) (undo-tree-id61301 . -32) (undo-tree-id61302 . -32) (undo-tree-id61303 . -32) (undo-tree-id61304 . -32) (undo-tree-id61305 . -32) (undo-tree-id61306 . 98) (undo-tree-id61307 . -41) (undo-tree-id61308 . -40) (undo-tree-id61309 . -40) (undo-tree-id61310 . -40) (undo-tree-id61311 . -40) (undo-tree-id61312 . -40) (undo-tree-id61313 . -40) (undo-tree-id61314 . -43) (undo-tree-id61315 . -43) (undo-tree-id61316 . -43) (undo-tree-id61317 . -43) (undo-tree-id61318 . -43) (undo-tree-id61319 . -43) (undo-tree-id61320 . -51) (undo-tree-id61321 . -51) (undo-tree-id61322 . -51) (undo-tree-id61323 . -51) (undo-tree-id61324 . -51) (undo-tree-id61325 . -51) (undo-tree-id61326 . -55) (undo-tree-id61327 . -55) (undo-tree-id61328 . -55) (undo-tree-id61329 . -55) (undo-tree-id61330 . -55) (undo-tree-id61331 . -55) (undo-tree-id61332 . -60) (undo-tree-id61333 . -60) (undo-tree-id61334 . -60) (undo-tree-id61335 . -60) (undo-tree-id61336 . -60) (undo-tree-id61337 . -60) (undo-tree-id61338 . -68) (undo-tree-id61339 . -68) (undo-tree-id61340 . -68) (undo-tree-id61341 . -68) (undo-tree-id61342 . -68) (undo-tree-id61343 . -68) (undo-tree-id61344 . -69) (undo-tree-id61345 . -69) (undo-tree-id61346 . -69) (undo-tree-id61347 . -69) (undo-tree-id61348 . -69) (undo-tree-id61349 . -69) (undo-tree-id61350 . -72) (undo-tree-id61351 . -72) (undo-tree-id61352 . -72) (undo-tree-id61353 . -72) (undo-tree-id61354 . -72) (undo-tree-id61355 . -72) (undo-tree-id61356 . -75) (undo-tree-id61357 . -75) (undo-tree-id61358 . -75) (undo-tree-id61359 . -75) (undo-tree-id61360 . -75) (undo-tree-id61361 . -75) (undo-tree-id61362 . -75) (undo-tree-id61363 . -75) (undo-tree-id61364 . -75) (undo-tree-id61365 . -75) (undo-tree-id61366 . -75) (undo-tree-id61367 . -75) (undo-tree-id61368 . -75) (undo-tree-id61369 . -75) (undo-tree-id61370 . -75) (undo-tree-id61371 . -75) (undo-tree-id61372 . -75) (undo-tree-id61373 . -75) (undo-tree-id61374 . -75) (undo-tree-id61375 . -75) (undo-tree-id61376 . -75) (undo-tree-id61377 . -75) (undo-tree-id61378 . -75) (undo-tree-id61379 . -75) (undo-tree-id61380 . -75) (undo-tree-id61381 . -75) (undo-tree-id61382 . -75) (undo-tree-id61383 . -75) (undo-tree-id61384 . -75) (undo-tree-id61385 . -75) (undo-tree-id61386 . -75) (undo-tree-id61387 . -132) (undo-tree-id61388 . -132) (undo-tree-id61389 . -132) (undo-tree-id61390 . -132) (undo-tree-id61391 . -132) (undo-tree-id61392 . -132) (undo-tree-id61393 . -132) (undo-tree-id61394 . -132) (undo-tree-id61395 . -132) (undo-tree-id61396 . -132) (undo-tree-id61397 . -132) (undo-tree-id61398 . -132) (undo-tree-id61399 . -132) (undo-tree-id61400 . -132) (undo-tree-id61401 . -132) (undo-tree-id61402 . -132) (undo-tree-id61403 . -132) (undo-tree-id61404 . -132) 11117) nil (25767 16528 628160 7000) 0 nil])
([nil nil ((10789 . 10988) (#("- 

- IMDb reviews dataset: consists of 50,000 movie reviews in English (25,000 for training, 25,000 for testing) extracted from the famous Internet Movie Database, along with a simple binary target." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 6 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 18 19 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 19 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 39 40 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 40 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 113 114 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 114 184 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 184 185 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 185 198 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 198 199 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 10789) (undo-tree-id60496 . -199) (undo-tree-id60497 . -199) (undo-tree-id60498 . -199) (undo-tree-id60499 . -199) (undo-tree-id60500 . 172) (undo-tree-id60501 . -199) (undo-tree-id60502 . -199) (undo-tree-id60503 . -198) (undo-tree-id60504 . -199) (undo-tree-id60505 . -198) (undo-tree-id60506 . -198) (undo-tree-id60507 . -144) (undo-tree-id60508 . -83) (undo-tree-id60509 . -28) (undo-tree-id60510 . 193) (undo-tree-id60511 . -10) (undo-tree-id60512 . 180) (undo-tree-id60513 . -26) (undo-tree-id60514 . -192) (undo-tree-id60515 . -198) (undo-tree-id60516 . -198) (undo-tree-id60517 . -198) (undo-tree-id60518 . -198) (undo-tree-id60519 . -198) (undo-tree-id60520 . -198) (undo-tree-id60521 . -198) (undo-tree-id60522 . -198) (undo-tree-id60523 . -198) (undo-tree-id60524 . -198) (undo-tree-id60525 . -198) (undo-tree-id60526 . -198) (undo-tree-id60527 . -198) (undo-tree-id60528 . -198) (undo-tree-id60529 . -198) (undo-tree-id60530 . -198) (undo-tree-id60531 . -198) (undo-tree-id60532 . -198) (undo-tree-id60533 . -198) (undo-tree-id60534 . -198) (undo-tree-id60535 . -198) (undo-tree-id60536 . -198) (undo-tree-id60537 . -198) (undo-tree-id60538 . -198) (undo-tree-id60539 . -198) (undo-tree-id60540 . -198) (undo-tree-id60541 . -198) (undo-tree-id60542 . -198) (undo-tree-id60543 . -198) (undo-tree-id60544 . -198) (undo-tree-id60545 . -28) (undo-tree-id60546 . -140) (undo-tree-id60547 . -140) (undo-tree-id60548 . -140) (undo-tree-id60549 . -140) (undo-tree-id60550 . -140) (undo-tree-id60551 . -140) (undo-tree-id60552 . -140) (undo-tree-id60553 . -140) (undo-tree-id60554 . -140) (undo-tree-id60555 . -140) (undo-tree-id60556 . -140) (undo-tree-id60557 . -140) (undo-tree-id60558 . -140) (undo-tree-id60559 . -140) (undo-tree-id60560 . -140) (undo-tree-id60561 . -140) (undo-tree-id60562 . -140) (undo-tree-id60563 . -140) (undo-tree-id60564 . -140) (undo-tree-id60565 . -140) (undo-tree-id60566 . -140) (undo-tree-id60567 . -198) (undo-tree-id60568 . -198) (undo-tree-id60569 . -198) (undo-tree-id60570 . -198) (undo-tree-id60571 . -198) (undo-tree-id60572 . -198) (undo-tree-id60573 . -198) (undo-tree-id60574 . -198) (undo-tree-id60575 . -198) (undo-tree-id60576 . -198) (undo-tree-id60577 . -198) (undo-tree-id60578 . -198) (undo-tree-id60579 . -198) (undo-tree-id60580 . -198) (undo-tree-id60581 . -198) (undo-tree-id60582 . -198) (undo-tree-id60583 . -198) (undo-tree-id60584 . -198) (undo-tree-id60585 . -198) (undo-tree-id60586 . -198) (undo-tree-id60587 . -198) (undo-tree-id60588 . -198) (undo-tree-id60589 . -198) (undo-tree-id60590 . -198) (undo-tree-id60591 . -198) (undo-tree-id60592 . -198) (undo-tree-id60593 . -198) (undo-tree-id60594 . -198) (undo-tree-id60595 . -198) (undo-tree-id60596 . -198) (undo-tree-id60597 . -198) (undo-tree-id60598 . -198) (undo-tree-id60599 . -198) (undo-tree-id60600 . -198) (undo-tree-id60601 . -198) (undo-tree-id60602 . -198) (undo-tree-id60603 . -198) (undo-tree-id60604 . -198) (undo-tree-id60605 . -198) (undo-tree-id60606 . -198) (undo-tree-id60607 . -198) (undo-tree-id60608 . -198) (undo-tree-id60609 . -198) (undo-tree-id60610 . -198) (undo-tree-id60611 . -198) (undo-tree-id60612 . -198) (undo-tree-id60613 . -198) (undo-tree-id60614 . -198) (undo-tree-id60615 . -198) (undo-tree-id60616 . -198) (undo-tree-id60617 . -198) (undo-tree-id60618 . -198) (undo-tree-id60619 . -198) (undo-tree-id60620 . -198) (undo-tree-id60621 . -198) (undo-tree-id60622 . -198) (undo-tree-id60623 . -198) (undo-tree-id60624 . -198) (undo-tree-id60625 . -198) (undo-tree-id60626 . -198) (undo-tree-id60627 . -198) (undo-tree-id60628 . -198) (undo-tree-id60629 . -198) (undo-tree-id60630 . -198) (undo-tree-id60631 . -198) (undo-tree-id60632 . -198) (undo-tree-id60633 . -198) (undo-tree-id60634 . -198) (undo-tree-id60635 . -198) (undo-tree-id60636 . -198) (undo-tree-id60637 . -198) (undo-tree-id60638 . -198) (undo-tree-id60639 . -198) (undo-tree-id60640 . -198) (undo-tree-id60641 . -198) (undo-tree-id60642 . -198) (undo-tree-id60643 . -198) (undo-tree-id60644 . -198) (undo-tree-id60645 . -198) (undo-tree-id60646 . -198) (undo-tree-id60647 . -198) (undo-tree-id60648 . -198) (undo-tree-id60649 . -198) (undo-tree-id60650 . -198) (undo-tree-id60651 . -198) (undo-tree-id60652 . -198) (undo-tree-id60653 . -198) (undo-tree-id60654 . -198) (undo-tree-id60655 . -198) (undo-tree-id60656 . -198) (undo-tree-id60657 . -198) (undo-tree-id60658 . -198) (undo-tree-id60659 . -198) (undo-tree-id60660 . -198) (undo-tree-id60661 . -198) (undo-tree-id60662 . -198) (undo-tree-id60663 . -198) (undo-tree-id60664 . -198) (undo-tree-id60665 . -198) (undo-tree-id60666 . -198) (undo-tree-id60667 . -198) (undo-tree-id60668 . -198) (undo-tree-id60669 . -198) (undo-tree-id60670 . -198) (undo-tree-id60671 . -198) (undo-tree-id60672 . -198) (undo-tree-id60673 . -198) (undo-tree-id60674 . -198) (undo-tree-id60675 . -198) (undo-tree-id60676 . -198) (undo-tree-id60677 . -198) (undo-tree-id60678 . -198) (undo-tree-id60679 . -198) (undo-tree-id60680 . -198) (undo-tree-id60681 . -198) (undo-tree-id60682 . -198) (undo-tree-id60683 . -198) (undo-tree-id60684 . -198) (undo-tree-id60685 . -198) (undo-tree-id60686 . -198) (undo-tree-id60687 . -198) (undo-tree-id60688 . -198) (undo-tree-id60689 . -198) (undo-tree-id60690 . -198) (undo-tree-id60691 . -198) (undo-tree-id60692 . -198) (undo-tree-id60693 . -198) (undo-tree-id60694 . -198) (undo-tree-id60695 . -198) (undo-tree-id60696 . -198) (undo-tree-id60697 . -198) (undo-tree-id60698 . -198) (undo-tree-id60699 . -198) (undo-tree-id60700 . -198) (undo-tree-id60701 . -198) (undo-tree-id60702 . -198) (undo-tree-id60703 . -198) (undo-tree-id60704 . -198) (undo-tree-id60705 . -198) (undo-tree-id60706 . -198) (undo-tree-id60707 . -198) (undo-tree-id60708 . -198) (undo-tree-id60709 . -198) (undo-tree-id60710 . -198) (undo-tree-id60711 . -198) (undo-tree-id60712 . -198) (undo-tree-id60713 . -198) (undo-tree-id60714 . -198) (undo-tree-id60715 . -198) (undo-tree-id60716 . -198) (undo-tree-id60717 . -198) (undo-tree-id60718 . -198) (undo-tree-id60719 . -198) (undo-tree-id60720 . -198) (undo-tree-id60721 . -198) (undo-tree-id60722 . -198) (undo-tree-id60723 . -198) (undo-tree-id60724 . -198) (undo-tree-id60725 . -198) (undo-tree-id60726 . -198) (undo-tree-id60727 . -198) (undo-tree-id60728 . -198) (undo-tree-id60729 . -198) (undo-tree-id60730 . -198) (undo-tree-id60731 . -198) (undo-tree-id60732 . -198) (undo-tree-id60733 . -198) (undo-tree-id60734 . -198) (undo-tree-id60735 . -198) (undo-tree-id60736 . -198) (undo-tree-id60737 . -198) (undo-tree-id60738 . -198) (undo-tree-id60739 . -198) (undo-tree-id60740 . -198) (undo-tree-id60741 . -198) (undo-tree-id60742 . -198) (undo-tree-id60743 . -198) (undo-tree-id60744 . -198) (undo-tree-id60745 . -198) (undo-tree-id60746 . -198) (undo-tree-id60747 . -198) (undo-tree-id60748 . -198) (undo-tree-id60749 . -198) (undo-tree-id60750 . -198) (undo-tree-id60751 . -198) (undo-tree-id60752 . -198) (undo-tree-id60753 . -198) (undo-tree-id60754 . -198) (undo-tree-id60755 . -198) (undo-tree-id60756 . -198) (undo-tree-id60757 . -198) (undo-tree-id60758 . -198) (undo-tree-id60759 . -198) (undo-tree-id60760 . -198) (undo-tree-id60761 . -198) (undo-tree-id60762 . -198) (undo-tree-id60763 . -198) (undo-tree-id60764 . -198) (undo-tree-id60765 . -198) (undo-tree-id60766 . -198) (undo-tree-id60767 . -198) (undo-tree-id60768 . -199) (undo-tree-id60769 . -199) (undo-tree-id60770 . -199) (undo-tree-id60771 . -199) (undo-tree-id60772 . -199) (undo-tree-id60773 . -199) (undo-tree-id60774 . -199) (undo-tree-id60775 . -199) (undo-tree-id60776 . -199) (undo-tree-id60777 . -199) (undo-tree-id60778 . -199) (undo-tree-id60779 . -199) (undo-tree-id60780 . -199) (undo-tree-id60781 . -199) (undo-tree-id60782 . -199) (undo-tree-id60783 . -199) (undo-tree-id60784 . -199) (undo-tree-id60785 . -199) (undo-tree-id60786 . -199) (undo-tree-id60787 . -199) (undo-tree-id60788 . -199) (undo-tree-id60789 . -199) (undo-tree-id60790 . -199) (undo-tree-id60791 . -199) (undo-tree-id60792 . -199) (undo-tree-id60793 . -199) (undo-tree-id60794 . -199) (undo-tree-id60795 . -199) (undo-tree-id60796 . -199) (undo-tree-id60797 . -199) (undo-tree-id60798 . -199) (undo-tree-id60799 . -199) (undo-tree-id60800 . -199) (undo-tree-id60801 . -199) (undo-tree-id60802 . -199) (undo-tree-id60803 . -199) (undo-tree-id60804 . -199) (undo-tree-id60805 . -199) (undo-tree-id60806 . -199) (undo-tree-id60807 . -199) (undo-tree-id60808 . -199) (undo-tree-id60809 . -199) (undo-tree-id60810 . -199) (undo-tree-id60811 . -199) (undo-tree-id60812 . -199) (undo-tree-id60813 . -199) (undo-tree-id60814 . -199) (undo-tree-id60815 . -199) (undo-tree-id60816 . -199) (undo-tree-id60817 . -199) (undo-tree-id60818 . -199) (undo-tree-id60819 . -199) (undo-tree-id60820 . -199) (undo-tree-id60821 . -199) (undo-tree-id60822 . -199) (undo-tree-id60823 . -199) (undo-tree-id60824 . -199) (undo-tree-id60825 . -199) (undo-tree-id60826 . -199) (undo-tree-id60827 . -199) (undo-tree-id60828 . -199) (undo-tree-id60829 . -199) (undo-tree-id60830 . -199) (undo-tree-id60831 . -199) (undo-tree-id60832 . -199) (undo-tree-id60833 . -199) (undo-tree-id60834 . -199) (undo-tree-id60835 . -199) (undo-tree-id60836 . -199) (undo-tree-id60837 . -199) (undo-tree-id60838 . -199) (undo-tree-id60839 . -199) (undo-tree-id60840 . -199) (undo-tree-id60841 . -199) (undo-tree-id60842 . -199) (undo-tree-id60843 . -199) (undo-tree-id60844 . -199) (undo-tree-id60845 . -199) (undo-tree-id60846 . -199) (undo-tree-id60847 . -199) (undo-tree-id60848 . -199) (undo-tree-id60849 . -199) (undo-tree-id60850 . -199) (undo-tree-id60851 . -199) (undo-tree-id60852 . -199) (undo-tree-id60853 . -199) (undo-tree-id60854 . -199) (undo-tree-id60855 . -199) (undo-tree-id60856 . -199) (undo-tree-id60857 . -199) (undo-tree-id60858 . -199) (undo-tree-id60859 . -199) (undo-tree-id60860 . -199) (undo-tree-id60861 . -199) (undo-tree-id60862 . -199) (undo-tree-id60863 . -199) (undo-tree-id60864 . -199) (undo-tree-id60865 . -199) (undo-tree-id60866 . -199) (undo-tree-id60867 . -199) (undo-tree-id60868 . -199) (undo-tree-id60869 . -199) (undo-tree-id60870 . -199) (undo-tree-id60871 . -199) (undo-tree-id60872 . -199) (undo-tree-id60873 . -199) (undo-tree-id60874 . -199) (undo-tree-id60875 . -199) (undo-tree-id60876 . -199) (undo-tree-id60877 . -199) (undo-tree-id60878 . -199) (undo-tree-id60879 . -199) (undo-tree-id60880 . -199) (undo-tree-id60881 . -199) (undo-tree-id60882 . -199) (undo-tree-id60883 . -199) (undo-tree-id60884 . -199) (undo-tree-id60885 . -199) (undo-tree-id60886 . -199) (undo-tree-id60887 . -199) (undo-tree-id60888 . -199) (undo-tree-id60889 . -199) (undo-tree-id60890 . -199) (undo-tree-id60891 . -199) (undo-tree-id60892 . -199) (undo-tree-id60893 . -199) (undo-tree-id60894 . -199) (undo-tree-id60895 . -199) (undo-tree-id60896 . -199) (undo-tree-id60897 . -199) (undo-tree-id60898 . -199) (undo-tree-id60899 . -199) (undo-tree-id60900 . -199) (undo-tree-id60901 . -199) (undo-tree-id60902 . -199) (undo-tree-id60903 . -199) (undo-tree-id60904 . -199) (undo-tree-id60905 . -199) (undo-tree-id60906 . -199) (undo-tree-id60907 . -199) (undo-tree-id60908 . -199) (undo-tree-id60909 . -199) (undo-tree-id60910 . -199) (undo-tree-id60911 . -199) (undo-tree-id60912 . -199) (undo-tree-id60913 . -199) (undo-tree-id60914 . -199) (undo-tree-id60915 . -199) (undo-tree-id60916 . -199) (undo-tree-id60917 . -199) (undo-tree-id60918 . -199) (undo-tree-id60919 . -199) (undo-tree-id60920 . -199) (undo-tree-id60921 . -199) (undo-tree-id60922 . -199) (undo-tree-id60923 . -199) (undo-tree-id60924 . -199) (undo-tree-id60925 . -199) (undo-tree-id60926 . -199) (undo-tree-id60927 . -199) (undo-tree-id60928 . -199) (undo-tree-id60929 . -199) (undo-tree-id60930 . -199) (undo-tree-id60931 . -199) (undo-tree-id60932 . -199) (undo-tree-id60933 . -199) (undo-tree-id60934 . -199) (undo-tree-id60935 . -199) (undo-tree-id60936 . -199) (undo-tree-id60937 . -199) (undo-tree-id60938 . -199) (undo-tree-id60939 . -199) (undo-tree-id60940 . -199) (undo-tree-id60941 . -199) (undo-tree-id60942 . -199) (undo-tree-id60943 . -199) (undo-tree-id60944 . -199) (undo-tree-id60945 . -199) (undo-tree-id60946 . -199) (undo-tree-id60947 . -199) (undo-tree-id60948 . -199) (undo-tree-id60949 . -199) (undo-tree-id60950 . -199) (undo-tree-id60951 . -199) (undo-tree-id60952 . -199) (undo-tree-id60953 . -199) (undo-tree-id60954 . -199) (undo-tree-id60955 . -199) (undo-tree-id60956 . -199) (undo-tree-id60957 . -199) (undo-tree-id60958 . -199) (undo-tree-id60959 . -199) (undo-tree-id60960 . -199) (undo-tree-id60961 . -199) (undo-tree-id60962 . -199) (undo-tree-id60963 . -199) (undo-tree-id60964 . -199) (undo-tree-id60965 . -199) (undo-tree-id60966 . -199) (undo-tree-id60967 . -199) (undo-tree-id60968 . -199) (undo-tree-id60969 . -199) (undo-tree-id60970 . -199) (undo-tree-id60971 . -199) (undo-tree-id60972 . -199) (undo-tree-id60973 . -199) (undo-tree-id60974 . -199) (undo-tree-id60975 . -199) (undo-tree-id60976 . -199) (undo-tree-id60977 . -199) (undo-tree-id60978 . -199) (undo-tree-id60979 . -199) (undo-tree-id60980 . -199) (undo-tree-id60981 . -199) (undo-tree-id60982 . -199) (undo-tree-id60983 . -199) (undo-tree-id60984 . -199) (undo-tree-id60985 . -199) (undo-tree-id60986 . -199) (undo-tree-id60987 . -199) (undo-tree-id60988 . -199) (undo-tree-id60989 . -199) (undo-tree-id60990 . -199) (undo-tree-id60991 . -199) (undo-tree-id60992 . -199) (undo-tree-id60993 . -199) (undo-tree-id60994 . -199) (undo-tree-id60995 . -199) (undo-tree-id60996 . -199) (undo-tree-id60997 . -199) (undo-tree-id60998 . -199) (undo-tree-id60999 . -199) (undo-tree-id61000 . -4) (10789 . 10793) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 10984) (undo-tree-id61001 . -1) (undo-tree-id61002 . -1) (undo-tree-id61003 . -1) (undo-tree-id61004 . -1) (undo-tree-id61005 . -1) (undo-tree-id61006 . -1) (undo-tree-id61007 . -1) (undo-tree-id61008 . -1) (undo-tree-id61009 . -1) (undo-tree-id61010 . -1) (undo-tree-id61011 . -1) (undo-tree-id61012 . -1) (undo-tree-id61013 . -1) (undo-tree-id61014 . -1) (undo-tree-id61015 . -1) (undo-tree-id61016 . -1) (undo-tree-id61017 . -1) (undo-tree-id61018 . -1) (undo-tree-id61019 . -1) (undo-tree-id61020 . -1) (undo-tree-id61021 . -1) (undo-tree-id61022 . -1) (undo-tree-id61023 . -1) (undo-tree-id61024 . -1) (undo-tree-id61025 . -1) (undo-tree-id61026 . -1) (undo-tree-id61027 . -1) (undo-tree-id61028 . -1) (undo-tree-id61029 . -1) (undo-tree-id61030 . -1) (undo-tree-id61031 . -1) (undo-tree-id61032 . -1) (undo-tree-id61033 . -1) (undo-tree-id61034 . -1) (undo-tree-id61035 . -1) (undo-tree-id61036 . -1) (undo-tree-id61037 . -1) (undo-tree-id61038 . -1) (undo-tree-id61039 . -1) (undo-tree-id61040 . -1) (undo-tree-id61041 . -1) (undo-tree-id61042 . -1) (undo-tree-id61043 . -1) (undo-tree-id61044 . -1) (undo-tree-id61045 . -1) (undo-tree-id61046 . -1) (undo-tree-id61047 . -1) (undo-tree-id61048 . -1) (undo-tree-id61049 . -1) (undo-tree-id61050 . -1) (undo-tree-id61051 . -1) (undo-tree-id61052 . -1) (undo-tree-id61053 . -1) (undo-tree-id61054 . -1) (undo-tree-id61055 . -1) (undo-tree-id61056 . -1) (undo-tree-id61057 . -1) (undo-tree-id61058 . -1) (undo-tree-id61059 . -1) (undo-tree-id61060 . -1) (undo-tree-id61061 . -1) (undo-tree-id61062 . -1) (undo-tree-id61063 . -1) (undo-tree-id61064 . -1) (undo-tree-id61065 . -1) (undo-tree-id61066 . -1) (undo-tree-id61067 . -1) (undo-tree-id61068 . -1) (undo-tree-id61069 . -1) (undo-tree-id61070 . -1) (undo-tree-id61071 . -1) (undo-tree-id61072 . -1) (undo-tree-id61073 . -1) (undo-tree-id61074 . -1) (undo-tree-id61075 . -1) (undo-tree-id61076 . -1) (undo-tree-id61077 . -1) (undo-tree-id61078 . -1) (undo-tree-id61079 . -1) (undo-tree-id61080 . -1) (undo-tree-id61081 . -1) (undo-tree-id61082 . -1) (undo-tree-id61083 . -1) (undo-tree-id61084 . -1) (undo-tree-id61085 . -1) (undo-tree-id61086 . -1) (undo-tree-id61087 . -1) (undo-tree-id61088 . -1) (undo-tree-id61089 . -1) (undo-tree-id61090 . -1) (undo-tree-id61091 . -1) (undo-tree-id61092 . -1) (undo-tree-id61093 . -1) (undo-tree-id61094 . -1) (undo-tree-id61095 . -1) (undo-tree-id61096 . -1) (undo-tree-id61097 . -1) (undo-tree-id61098 . -1) (undo-tree-id61099 . -1) (undo-tree-id61100 . -1) (undo-tree-id61101 . -1) (undo-tree-id61102 . -1) (undo-tree-id61103 . -1) (undo-tree-id61104 . -1) (undo-tree-id61105 . -1) (undo-tree-id61106 . -1) (undo-tree-id61107 . -1) (undo-tree-id61108 . -1) (undo-tree-id61109 . -1) (undo-tree-id61110 . -1) (undo-tree-id61111 . -1) (undo-tree-id61112 . -1) (undo-tree-id61113 . -1) (undo-tree-id61114 . -1) (undo-tree-id61115 . -1) (undo-tree-id61116 . -1) (undo-tree-id61117 . -1) (undo-tree-id61118 . -1) (undo-tree-id61119 . -1) (undo-tree-id61120 . -1) (undo-tree-id61121 . -1) (undo-tree-id61122 . -1) (undo-tree-id61123 . -1) (undo-tree-id61124 . -1) (undo-tree-id61125 . -1) (undo-tree-id61126 . -1) (undo-tree-id61127 . -1) (undo-tree-id61128 . -1) (undo-tree-id61129 . -1) (undo-tree-id61130 . -1) (undo-tree-id61131 . -1) (undo-tree-id61132 . -1) (undo-tree-id61133 . -1) (undo-tree-id61134 . -1) (undo-tree-id61135 . -1) (undo-tree-id61136 . -1) (undo-tree-id61137 . -1) (undo-tree-id61138 . -1) (undo-tree-id61139 . -1) (undo-tree-id61140 . -1) (undo-tree-id61141 . -1) (undo-tree-id61142 . -1) (undo-tree-id61143 . -1) (undo-tree-id61144 . -1) (undo-tree-id61145 . -1) (undo-tree-id61146 . -1) (undo-tree-id61147 . -1) (undo-tree-id61148 . -1) (undo-tree-id61149 . -1) (undo-tree-id61150 . -1) (undo-tree-id61151 . -1) (undo-tree-id61152 . -1) (undo-tree-id61153 . -1) (undo-tree-id61154 . -1) (undo-tree-id61155 . -1) (undo-tree-id61156 . -1) (undo-tree-id61157 . -1) (undo-tree-id61158 . -1) (undo-tree-id61159 . -1) (undo-tree-id61160 . -1) (undo-tree-id61161 . -1) (undo-tree-id61162 . -1) (undo-tree-id61163 . -1) (undo-tree-id61164 . -1) (undo-tree-id61165 . -1) (undo-tree-id61166 . -1) (undo-tree-id61167 . -1) (undo-tree-id61168 . -1) (undo-tree-id61169 . -1) (undo-tree-id61170 . -1) (undo-tree-id61171 . -1) (undo-tree-id61172 . -1) (undo-tree-id61173 . -1) (undo-tree-id61174 . -1) (undo-tree-id61175 . -1) (undo-tree-id61176 . -1) (undo-tree-id61177 . -1) (undo-tree-id61178 . -1) (undo-tree-id61179 . -1) (undo-tree-id61180 . -1) (undo-tree-id61181 . -1) (undo-tree-id61182 . -1) (undo-tree-id61183 . -1) (undo-tree-id61184 . -1) (undo-tree-id61185 . -1) (undo-tree-id61186 . -1) (undo-tree-id61187 . -1) (undo-tree-id61188 . -1) (undo-tree-id61189 . -1) (undo-tree-id61190 . -1) (undo-tree-id61191 . -1) (undo-tree-id61192 . -1) (undo-tree-id61193 . -1) (undo-tree-id61194 . -1) (undo-tree-id61195 . -1) (undo-tree-id61196 . -1) (undo-tree-id61197 . -1) (undo-tree-id61198 . -1) (undo-tree-id61199 . -1) (undo-tree-id61200 . -1) (undo-tree-id61201 . -1) (undo-tree-id61202 . -1) (undo-tree-id61203 . -1) (undo-tree-id61204 . -1) (undo-tree-id61205 . -1) (undo-tree-id61206 . -1) (undo-tree-id61207 . -1) (undo-tree-id61208 . -1) (undo-tree-id61209 . -1) (undo-tree-id61210 . -1) (undo-tree-id61211 . -1) (undo-tree-id61212 . -1) (undo-tree-id61213 . -1) (undo-tree-id61214 . -1) (undo-tree-id61215 . -1) (undo-tree-id61216 . -1) (undo-tree-id61217 . -1) (undo-tree-id61218 . -1) (undo-tree-id61219 . -1) (undo-tree-id61220 . -1) (undo-tree-id61221 . -1) (#("

" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -10985) (undo-tree-id61222 . -2) (undo-tree-id61223 . -1) (undo-tree-id61224 . -1) (undo-tree-id61225 . -1) (undo-tree-id61226 . -1) (undo-tree-id61227 . -1) (undo-tree-id61228 . -1) (undo-tree-id61229 . -1) (undo-tree-id61230 . -2) (undo-tree-id61231 . -2) (undo-tree-id61232 . -2) (undo-tree-id61233 . -2) (undo-tree-id61234 . -2) (undo-tree-id61235 . -2) (undo-tree-id61236 . -2) (undo-tree-id61237 . -2) 10987 (10985 . 10987)) nil (25767 16528 628029 668000) 0 nil])
([nil nil ((10988 . 10989)) nil (25767 16528 627307 883000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12907 . 12908) (nil fontified nil 12838 . 12908) (nil fontified nil 12766 . 12838) (nil fontified nil 12693 . 12766) (nil fontified nil 12626 . 12693) (nil fontified nil 12554 . 12626) (nil fontified nil 12490 . 12554) (nil fontified nil 12415 . 12490) (nil fontified nil 12342 . 12415) (nil fontified nil 12267 . 12342) (nil fontified nil 12190 . 12267) (nil fontified nil 12122 . 12190) (nil fontified nil 12063 . 12122) (nil fontified nil 12059 . 12063) (nil fontified nil 12035 . 12059) (nil fontified nil 12031 . 12035) (nil fontified nil 11969 . 12031) (nil fontified nil 11900 . 11969) (nil fontified nil 11846 . 11900) (nil fontified nil 11817 . 11846) (nil fontified nil 11742 . 11817) (nil fontified nil 11671 . 11742) (nil fontified nil 11602 . 11671) (nil fontified nil 11533 . 11602) (nil fontified nil 11463 . 11533) (nil fontified nil 11388 . 11463) (nil fontified nil 11313 . 11388) (nil fontified nil 11239 . 11313) (nil fontified nil 11193 . 11239) (nil fontified nil 11173 . 11193) (nil fontified nil 11141 . 11173) (nil fontified nil 11098 . 11141) (nil fontified nil 11059 . 11098) (nil fontified nil 10989 . 11059) (10989 . 12908) (t 25767 16528 699172 956000)) nil (25767 16556 767485 697000) 0 nil])
([nil nil ((12924 . 12928) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -12924) (undo-tree-id61777 . -1) (undo-tree-id61778 . -1) (undo-tree-id61779 . -1) (undo-tree-id61780 . -1) (undo-tree-id61781 . -1) (undo-tree-id61782 . -1) (undo-tree-id61783 . -1) (undo-tree-id61784 . -1) (undo-tree-id61785 . -1) (undo-tree-id61786 . -1) (undo-tree-id61787 . -1) (undo-tree-id61788 . -1) (undo-tree-id61789 . -1) (undo-tree-id61790 . -1) (undo-tree-id61791 . -1) (undo-tree-id61792 . -1) (undo-tree-id61793 . -1) (undo-tree-id61794 . -1) (undo-tree-id61795 . -1) (undo-tree-id61796 . -1) (undo-tree-id61797 . -1) (undo-tree-id61798 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -12925) (undo-tree-id61799 . -1) (undo-tree-id61800 . -1) (undo-tree-id61801 . -1) (undo-tree-id61802 . -1) (undo-tree-id61803 . -1) (undo-tree-id61804 . -1) (undo-tree-id61805 . -1) (undo-tree-id61806 . -1) (undo-tree-id61807 . -1) 12926 (12922 . 12926) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12922 12928 nil nil nil t #s(yas--exit 12946 nil))) #s(yas--exit 12946 nil) 9 nil #s(yas--field 1 12922 12928 nil nil nil t #s(yas--exit 12946 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -12940) (undo-tree-id61808 . -2) (12910 . 12953) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 12910) (undo-tree-id61809 . -2) (undo-tree-id61810 . -2) (undo-tree-id61811 . -1) (undo-tree-id61812 . -1) (undo-tree-id61813 . -1) (undo-tree-id61814 . -1) (undo-tree-id61815 . -1) (undo-tree-id61816 . -1) (undo-tree-id61817 . -1) (undo-tree-id61818 . -1) (undo-tree-id61819 . -1) (undo-tree-id61820 . -1) (undo-tree-id61821 . -1) (undo-tree-id61822 . -1) (undo-tree-id61823 . -1) (undo-tree-id61824 . -1) (undo-tree-id61825 . -1) (undo-tree-id61826 . -1) (undo-tree-id61827 . -1) (undo-tree-id61828 . -1) (undo-tree-id61829 . -1) (undo-tree-id61830 . -1) (undo-tree-id61831 . -1) (undo-tree-id61832 . -1) (undo-tree-id61833 . -1) (undo-tree-id61834 . -1) (undo-tree-id61835 . -1) (undo-tree-id61836 . -1) (undo-tree-id61837 . -1) (undo-tree-id61838 . -1) (undo-tree-id61839 . -2) (undo-tree-id61840 . -2) (undo-tree-id61841 . -2) (undo-tree-id61842 . -2) (undo-tree-id61843 . -2) (undo-tree-id61844 . -2) (undo-tree-id61845 . -2) (undo-tree-id61846 . -2) (undo-tree-id61847 . -2) (undo-tree-id61848 . -2) (undo-tree-id61849 . -2) (undo-tree-id61850 . -2) (undo-tree-id61851 . -2) (undo-tree-id61852 . -2) 12912 (12910 . 12912) (12908 . 12910)) nil (25767 16556 767476 780000) 0 nil])
([nil nil ((apply yas--snippet-revive 12910 12957 #s(yas--snippet nil (#s(yas--field 1 12922 12928 nil nil nil t #s(yas--exit 12946 nil))) #s(yas--exit 12946 nil) 9 nil #s(yas--field 1 12922 12928 nil nil nil t #s(yas--exit 12946 nil)) nil nil))) nil (25767 16556 767418 918000) 0 nil])
([nil nil ((12957 . 12958)) nil (25767 16602 491567 871000) 0 nil])
([nil nil ((#("amount of time, but challenging enough to be fun and rewarding" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10989) (undo-tree-id62243 . -61) (undo-tree-id62244 . 61) (undo-tree-id62245 . -62) (t 25767 16556 839458 800000)) nil (25767 16638 124066 42000) 0 nil] [nil nil ((#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10989) (undo-tree-id61853 . -1) (undo-tree-id61854 . -1) (t 25767 16556 839458 800000)) ((10989 . 10990)) (25767 16602 491187 803000) 0 nil])
([nil nil ((10987 . 10988) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 10987) (undo-tree-id62110 . -1) (undo-tree-id62111 . -1) (undo-tree-id62112 . -1) (undo-tree-id62113 . -1) (undo-tree-id62114 . -1) (undo-tree-id62115 . -1) (undo-tree-id62116 . -1) (undo-tree-id62117 . -1) (undo-tree-id62118 . -1) (undo-tree-id62119 . -1) (undo-tree-id62120 . -1) (undo-tree-id62121 . -1) (undo-tree-id62122 . -1) (undo-tree-id62123 . -1) (undo-tree-id62124 . -1) (undo-tree-id62125 . -1) (undo-tree-id62126 . -1) (undo-tree-id62127 . -1) (undo-tree-id62128 . -1) (undo-tree-id62129 . -1) (undo-tree-id62130 . -1) (undo-tree-id62131 . -1) (undo-tree-id62132 . -1) (undo-tree-id62133 . -1) (undo-tree-id62134 . -1) (undo-tree-id62135 . -1) (undo-tree-id62136 . -1) (undo-tree-id62137 . -1) (undo-tree-id62138 . -1) (undo-tree-id62139 . -1) (undo-tree-id62140 . -1) (undo-tree-id62141 . -1) (undo-tree-id62142 . -1) (undo-tree-id62143 . -1) (undo-tree-id62144 . -1) (undo-tree-id62145 . -1) (undo-tree-id62146 . -1) (undo-tree-id62147 . -1) (undo-tree-id62148 . -1) (undo-tree-id62149 . -1) (undo-tree-id62150 . -1) (undo-tree-id62151 . -1) (undo-tree-id62152 . -1) (undo-tree-id62153 . -1) (undo-tree-id62154 . -1) (undo-tree-id62155 . -1) (undo-tree-id62156 . -1) (undo-tree-id62157 . -1) (undo-tree-id62158 . -1) (undo-tree-id62159 . -1) (undo-tree-id62160 . -1) (undo-tree-id62161 . -1) (undo-tree-id62162 . -1) (undo-tree-id62163 . -1) (undo-tree-id62164 . -1) (undo-tree-id62165 . -1) (undo-tree-id62166 . -1) (undo-tree-id62167 . -1) (undo-tree-id62168 . -1) (undo-tree-id62169 . -1) (undo-tree-id62170 . -1) (undo-tree-id62171 . -1) (undo-tree-id62172 . -1) (undo-tree-id62173 . -1) (undo-tree-id62174 . -1) (undo-tree-id62175 . -1) (undo-tree-id62176 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -10988) (undo-tree-id62177 . -1) (undo-tree-id62178 . -1) (undo-tree-id62179 . -1) (undo-tree-id62180 . -1) (undo-tree-id62181 . -1) (undo-tree-id62182 . -1) (undo-tree-id62183 . -1) (undo-tree-id62184 . -1) (undo-tree-id62185 . -1) (undo-tree-id62186 . -1) (undo-tree-id62187 . -1) (undo-tree-id62188 . -1) (undo-tree-id62189 . -1) (undo-tree-id62190 . -1) (undo-tree-id62191 . -1) (undo-tree-id62192 . -1) (undo-tree-id62193 . -1) (undo-tree-id62194 . -1) (undo-tree-id62195 . -1) (undo-tree-id62196 . -1) (undo-tree-id62197 . -1) (undo-tree-id62198 . -1) (undo-tree-id62199 . -1) (undo-tree-id62200 . -1) (undo-tree-id62201 . -1) (undo-tree-id62202 . -1) (undo-tree-id62203 . -1) (undo-tree-id62204 . -1) (undo-tree-id62205 . -1) (undo-tree-id62206 . -1) (undo-tree-id62207 . -1) (undo-tree-id62208 . -1) (undo-tree-id62209 . -1) (undo-tree-id62210 . -1) (undo-tree-id62211 . -1) (undo-tree-id62212 . -1) (undo-tree-id62213 . -1) (undo-tree-id62214 . -1) (undo-tree-id62215 . -1) (undo-tree-id62216 . -1) (undo-tree-id62217 . -1) (undo-tree-id62218 . -1) (undo-tree-id62219 . -1) (undo-tree-id62220 . -1) (undo-tree-id62221 . -1) (undo-tree-id62222 . -1) (undo-tree-id62223 . -1) (undo-tree-id62224 . -1) (undo-tree-id62225 . -1) (undo-tree-id62226 . -1) (undo-tree-id62227 . -1) (undo-tree-id62228 . -1) (undo-tree-id62229 . -1) (undo-tree-id62230 . -1) (undo-tree-id62231 . -1) (undo-tree-id62232 . -1) (undo-tree-id62233 . -1) (undo-tree-id62234 . -1) (undo-tree-id62235 . -1) (undo-tree-id62236 . -1) (undo-tree-id62237 . -1) (undo-tree-id62238 . -1) (undo-tree-id62239 . -1) (undo-tree-id62240 . -1) (undo-tree-id62241 . -1) (undo-tree-id62242 . -1) 10986) nil (25767 16638 124059 458000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 10987) (undo-tree-id62108 . -1) (undo-tree-id62109 . -1)) nil (25767 16638 123977 706000) 0 nil])
([nil nil ((#("-. Keras
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10986) (undo-tree-id62019 . -8) (undo-tree-id62020 . -1) (undo-tree-id62021 . -1) (undo-tree-id62022 . 8) (undo-tree-id62023 . -1) (undo-tree-id62024 . -1) (undo-tree-id62025 . -1) (undo-tree-id62026 . -1) (undo-tree-id62027 . -1) (undo-tree-id62028 . -1) (undo-tree-id62029 . -1) (undo-tree-id62030 . -1) (undo-tree-id62031 . -1) (undo-tree-id62032 . -1) (undo-tree-id62033 . -1) (undo-tree-id62034 . -1) (undo-tree-id62035 . -1) (undo-tree-id62036 . -1) (undo-tree-id62037 . -1) (undo-tree-id62038 . -1) (undo-tree-id62039 . -1) (undo-tree-id62040 . -1) (undo-tree-id62041 . -1) (undo-tree-id62042 . -1) (undo-tree-id62043 . -1) (undo-tree-id62044 . -1) (undo-tree-id62045 . -1) (undo-tree-id62046 . -1) (undo-tree-id62047 . -1) (undo-tree-id62048 . -1) (undo-tree-id62049 . -1) (undo-tree-id62050 . -1) (undo-tree-id62051 . -1) (undo-tree-id62052 . -1) (undo-tree-id62053 . -1) (undo-tree-id62054 . -1) (undo-tree-id62055 . -1) (undo-tree-id62056 . -1) (undo-tree-id62057 . -1) (undo-tree-id62058 . -1) (undo-tree-id62059 . -1) (undo-tree-id62060 . -1) (undo-tree-id62061 . -1) (undo-tree-id62062 . -1) (undo-tree-id62063 . -1) (undo-tree-id62064 . -1) (undo-tree-id62065 . -1) (undo-tree-id62066 . -1) (undo-tree-id62067 . -1) (undo-tree-id62068 . -1) (undo-tree-id62069 . -1) (undo-tree-id62070 . -1) (undo-tree-id62071 . -1) (undo-tree-id62072 . -1) (undo-tree-id62073 . -1) (undo-tree-id62074 . -1) (undo-tree-id62075 . -1) (undo-tree-id62076 . -1) (undo-tree-id62077 . -1) (undo-tree-id62078 . -1) (undo-tree-id62079 . -1) (undo-tree-id62080 . -1) (undo-tree-id62081 . -1) (undo-tree-id62082 . -1) (undo-tree-id62083 . -1) (undo-tree-id62084 . -1) (undo-tree-id62085 . -1) (undo-tree-id62086 . -1) (undo-tree-id62087 . -1) (undo-tree-id62088 . -1) (undo-tree-id62089 . -1) (undo-tree-id62090 . -1) (undo-tree-id62091 . -1) (undo-tree-id62092 . -1) (undo-tree-id62093 . -1) (undo-tree-id62094 . -1) (undo-tree-id62095 . -1) (undo-tree-id62096 . -1) (undo-tree-id62097 . -1) (undo-tree-id62098 . -1) (undo-tree-id62099 . -1) (undo-tree-id62100 . -1) (undo-tree-id62101 . -1) (undo-tree-id62102 . -1) (undo-tree-id62103 . -1) (undo-tree-id62104 . -1) (undo-tree-id62105 . -1) (undo-tree-id62106 . -1) (undo-tree-id62107 . -9) 10987) nil (25767 16638 123972 968000) 0 nil])
([nil nil ((#("provides a simple function to load it:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10986) (undo-tree-id61999 . -38) (undo-tree-id62000 . 39) (undo-tree-id62001 . -1) (undo-tree-id62002 . -1) (undo-tree-id62003 . -1) (undo-tree-id62004 . -1) (undo-tree-id62005 . -1) (undo-tree-id62006 . -1) (undo-tree-id62007 . -1) (undo-tree-id62008 . -1) (undo-tree-id62009 . -1) (undo-tree-id62010 . -1) (undo-tree-id62011 . -1) (undo-tree-id62012 . -1) (undo-tree-id62013 . -1) (undo-tree-id62014 . -1) (undo-tree-id62015 . -1) (undo-tree-id62016 . -1) (undo-tree-id62017 . -1) (undo-tree-id62018 . -39) 10987) nil (25767 16638 123908 322000) 0 nil])
([nil nil ((#(">>> " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10986) (undo-tree-id61971 . -3) (undo-tree-id61972 . -3) (undo-tree-id61973 . -3) (undo-tree-id61974 . -1) (undo-tree-id61975 . -1) (undo-tree-id61976 . -1) (undo-tree-id61977 . -1) (undo-tree-id61978 . -1) (undo-tree-id61979 . -1) (undo-tree-id61980 . -1) (undo-tree-id61981 . -1) (undo-tree-id61982 . -4) (undo-tree-id61983 . -3) (undo-tree-id61984 . -2) (undo-tree-id61985 . -2) (undo-tree-id61986 . -2) (undo-tree-id61987 . -2) (undo-tree-id61988 . -2) (undo-tree-id61989 . -2) (undo-tree-id61990 . -2) (undo-tree-id61991 . -2) (undo-tree-id61992 . -2) (undo-tree-id61993 . -2) (undo-tree-id61994 . -2) (undo-tree-id61995 . -4) (undo-tree-id61996 . -3) (undo-tree-id61997 . -3) (undo-tree-id61998 . -4) 10989) nil (25767 16638 123733 881000) 0 nil])
([nil nil ((11024 . 11025) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -11024) (undo-tree-id61970 . -1) 10986) nil (25767 16638 123469 389000) 0 nil])
([nil nil ((#(">>> " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11057) (undo-tree-id61966 . -3) (undo-tree-id61967 . 4) (undo-tree-id61968 . -1) (undo-tree-id61969 . -4)) nil (25767 16638 123467 334000) 0 nil])
([nil nil ((#("(X_train, y_train), (X_test, y_test) = keras.datasets.imdb.load_data()
X_train[0][:10]
[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65]
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 3 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 8 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 12 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 17 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 22 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 23 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 27 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 31 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 35 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 38 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 39 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 64 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 68 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 71 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 72 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 73 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 78 87 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 87 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10986) (undo-tree-id61855 . -132) (undo-tree-id61856 . -87) (undo-tree-id61857 . -15) (undo-tree-id61858 . -87) (undo-tree-id61859 . -38) (undo-tree-id61860 . -38) (undo-tree-id61861 . -38) (undo-tree-id61862 . -38) (undo-tree-id61863 . -38) (undo-tree-id61864 . -38) (undo-tree-id61865 . 94) (undo-tree-id61866 . -44) (undo-tree-id61867 . -39) (undo-tree-id61868 . -39) (undo-tree-id61869 . -39) (undo-tree-id61870 . -39) (undo-tree-id61871 . -39) (undo-tree-id61872 . -39) (undo-tree-id61873 . -85) (undo-tree-id61874 . -85) (undo-tree-id61875 . -85) (undo-tree-id61876 . -85) (undo-tree-id61877 . -85) (undo-tree-id61878 . -85) (undo-tree-id61879 . -85) (undo-tree-id61880 . -85) (undo-tree-id61881 . -85) (undo-tree-id61882 . -85) (undo-tree-id61883 . -85) (undo-tree-id61884 . -87) (undo-tree-id61885 . -87) (undo-tree-id61886 . -87) (undo-tree-id61887 . -87) (undo-tree-id61888 . -87) (undo-tree-id61889 . -87) (undo-tree-id61890 . -87) (undo-tree-id61891 . -87) (undo-tree-id61892 . -87) (undo-tree-id61893 . -87) (undo-tree-id61894 . -87) (undo-tree-id61895 . -87) (undo-tree-id61896 . -87) (undo-tree-id61897 . -87) (undo-tree-id61898 . -87) (undo-tree-id61899 . -87) (undo-tree-id61900 . -71) (undo-tree-id61901 . -71) (undo-tree-id61902 . -71) (undo-tree-id61903 . -71) (undo-tree-id61904 . -71) (undo-tree-id61905 . -71) (undo-tree-id61906 . -71) (undo-tree-id61907 . -71) (undo-tree-id61908 . -71) (undo-tree-id61909 . -71) (undo-tree-id61910 . -71) (undo-tree-id61911 . -71) (undo-tree-id61912 . -71) (undo-tree-id61913 . -71) (undo-tree-id61914 . -71) (undo-tree-id61915 . -71) (undo-tree-id61916 . -71) (undo-tree-id61917 . -71) (undo-tree-id61918 . -71) (undo-tree-id61919 . -71) (undo-tree-id61920 . -71) (undo-tree-id61921 . -71) (undo-tree-id61922 . -71) (undo-tree-id61923 . -71) (undo-tree-id61924 . -71) (undo-tree-id61925 . -71) (undo-tree-id61926 . -71) (undo-tree-id61927 . -71) (undo-tree-id61928 . -71) (undo-tree-id61929 . -71) (undo-tree-id61930 . -71) (undo-tree-id61931 . -71) (undo-tree-id61932 . -71) (undo-tree-id61933 . -71) (undo-tree-id61934 . -71) (undo-tree-id61935 . -71) (undo-tree-id61936 . -133) (undo-tree-id61937 . -87) (undo-tree-id61938 . -71) (undo-tree-id61939 . -71) (undo-tree-id61940 . -71) (undo-tree-id61941 . -71) (undo-tree-id61942 . -71) (undo-tree-id61943 . -71) (undo-tree-id61944 . -71) (undo-tree-id61945 . -71) (undo-tree-id61946 . -71) (undo-tree-id61947 . -71) (undo-tree-id61948 . -71) (undo-tree-id61949 . -87) (undo-tree-id61950 . -87) (undo-tree-id61951 . -87) (undo-tree-id61952 . -87) (undo-tree-id61953 . -87) (undo-tree-id61954 . 46) (undo-tree-id61955 . -88) (undo-tree-id61956 . 2) (undo-tree-id61957 . -132) (undo-tree-id61958 . -87) (undo-tree-id61959 . -87) (undo-tree-id61960 . -87) (undo-tree-id61961 . -87) (undo-tree-id61962 . -87) (undo-tree-id61963 . -87) (undo-tree-id61964 . -87) (undo-tree-id61965 . -133) 11073) nil (25767 16638 123460 449000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12692 . 12693) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -12825) (12692 . 12826)) nil (25767 16638 123372 89000) 0 nil])
([nil nil ((12780 . 12781)) nil (25767 16638 123366 926000) 0 nil])
([nil nil ((#("Where are the movie reviews? Well, as you can see, the dataset is already
preprocessed for you:" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 10986) (undo-tree-id62433 . -94) (undo-tree-id62434 . -94) (undo-tree-id62435 . -94) (undo-tree-id62436 . -95) (undo-tree-id62437 . -94) (undo-tree-id62438 . -4) (undo-tree-id62439 . -4) (undo-tree-id62440 . -4) (undo-tree-id62441 . -4) (undo-tree-id62442 . -4) (undo-tree-id62443 . -4) (undo-tree-id62444 . -4) (undo-tree-id62445 . -4) (undo-tree-id62446 . -4) (undo-tree-id62447 . -4) (undo-tree-id62448 . -4) (undo-tree-id62449 . -4) (undo-tree-id62450 . -4) (undo-tree-id62451 . -4) (undo-tree-id62452 . -4) (undo-tree-id62453 . -4) (undo-tree-id62454 . -4) (undo-tree-id62455 . -4) (undo-tree-id62456 . -4) (undo-tree-id62457 . -4) (undo-tree-id62458 . -4) (undo-tree-id62459 . -8) (undo-tree-id62460 . -8) (undo-tree-id62461 . -8) (undo-tree-id62462 . -8) (undo-tree-id62463 . -8) (undo-tree-id62464 . -8) (undo-tree-id62465 . -12) (undo-tree-id62466 . -12) (undo-tree-id62467 . -12) (undo-tree-id62468 . -12) (undo-tree-id62469 . -12) (undo-tree-id62470 . -12) (undo-tree-id62471 . -18) (undo-tree-id62472 . -18) (undo-tree-id62473 . -18) (undo-tree-id62474 . -18) (undo-tree-id62475 . -18) (undo-tree-id62476 . -18) (undo-tree-id62477 . -26) (undo-tree-id62478 . -26) (undo-tree-id62479 . -26) (undo-tree-id62480 . -26) (undo-tree-id62481 . -26) (undo-tree-id62482 . -26) (undo-tree-id62483 . -27) (undo-tree-id62484 . -27) (undo-tree-id62485 . -27) (undo-tree-id62486 . -27) (undo-tree-id62487 . -27) (undo-tree-id62488 . -27) (undo-tree-id62489 . -32) (undo-tree-id62490 . -32) (undo-tree-id62491 . -32) (undo-tree-id62492 . -32) (undo-tree-id62493 . -32) (undo-tree-id62494 . -32) (undo-tree-id62495 . -33) (undo-tree-id62496 . -33) (undo-tree-id62497 . -33) (undo-tree-id62498 . -33) (undo-tree-id62499 . -33) (undo-tree-id62500 . -33) (undo-tree-id62501 . -36) (undo-tree-id62502 . -36) (undo-tree-id62503 . -36) (undo-tree-id62504 . -36) (undo-tree-id62505 . -36) (undo-tree-id62506 . -36) (undo-tree-id62507 . -40) (undo-tree-id62508 . -40) (undo-tree-id62509 . -40) (undo-tree-id62510 . -40) (undo-tree-id62511 . -40) (undo-tree-id62512 . -40) (undo-tree-id62513 . -44) (undo-tree-id62514 . -44) (undo-tree-id62515 . -44) (undo-tree-id62516 . -44) (undo-tree-id62517 . -44) (undo-tree-id62518 . -44) (undo-tree-id62519 . -44) (undo-tree-id62520 . -44) (undo-tree-id62521 . -44) (undo-tree-id62522 . -44) (undo-tree-id62523 . -44) (undo-tree-id62524 . -44) (undo-tree-id62525 . -44) (undo-tree-id62526 . -44) (undo-tree-id62527 . -44) (undo-tree-id62528 . -44) (undo-tree-id62529 . -44) (undo-tree-id62530 . -44) (undo-tree-id62531 . -44) (undo-tree-id62532 . -44) (undo-tree-id62533 . -44) (undo-tree-id62534 . -48) (undo-tree-id62535 . -48) (undo-tree-id62536 . -48) (undo-tree-id62537 . -48) (undo-tree-id62538 . -48) (undo-tree-id62539 . -48) (undo-tree-id62540 . -48) (undo-tree-id62541 . -48) (undo-tree-id62542 . -48) (undo-tree-id62543 . -48) (undo-tree-id62544 . -48) (undo-tree-id62545 . -48) (undo-tree-id62546 . -48) (undo-tree-id62547 . -48) (undo-tree-id62548 . -48) (undo-tree-id62549 . -48) (undo-tree-id62550 . -48) (undo-tree-id62551 . -48) (undo-tree-id62552 . -48) (undo-tree-id62553 . -48) (undo-tree-id62554 . -48) (undo-tree-id62555 . -49) (undo-tree-id62556 . -49) (undo-tree-id62557 . -49) (undo-tree-id62558 . -49) (undo-tree-id62559 . -49) (undo-tree-id62560 . -49) (undo-tree-id62561 . -53) (undo-tree-id62562 . -53) (undo-tree-id62563 . -53) (undo-tree-id62564 . -53) (undo-tree-id62565 . -53) (undo-tree-id62566 . -53) (undo-tree-id62567 . 40) (undo-tree-id62568 . -62) (undo-tree-id62569 . -61) (undo-tree-id62570 . -61) (undo-tree-id62571 . -61) (undo-tree-id62572 . -61) (undo-tree-id62573 . -61) (undo-tree-id62574 . -61) (undo-tree-id62575 . -61) (undo-tree-id62576 . -61) (undo-tree-id62577 . -64) (undo-tree-id62578 . -64) (undo-tree-id62579 . -64) (undo-tree-id62580 . -64) (undo-tree-id62581 . -64) (undo-tree-id62582 . -64) (undo-tree-id62583 . -72) (undo-tree-id62584 . -72) (undo-tree-id62585 . -72) (undo-tree-id62586 . -72) (undo-tree-id62587 . -72) (undo-tree-id62588 . -72) (undo-tree-id62589 . 21) (undo-tree-id62590 . -86) (undo-tree-id62591 . -85) (undo-tree-id62592 . -85) (undo-tree-id62593 . -85) (undo-tree-id62594 . -85) (undo-tree-id62595 . -85) (undo-tree-id62596 . -85) (undo-tree-id62597 . -89) (undo-tree-id62598 . -89) (undo-tree-id62599 . -89) (undo-tree-id62600 . -89) (undo-tree-id62601 . -89) (undo-tree-id62602 . -89) (undo-tree-id62603 . -93) (undo-tree-id62604 . -93) (undo-tree-id62605 . -93) (undo-tree-id62606 . -93) (undo-tree-id62607 . -93) (undo-tree-id62608 . -93) (undo-tree-id62609 . -94) (undo-tree-id62610 . -94) (undo-tree-id62611 . -94) (undo-tree-id62612 . -94) (undo-tree-id62613 . -94) (undo-tree-id62614 . -94) (undo-tree-id62615 . -94) (undo-tree-id62616 . -94) (undo-tree-id62617 . -94) (undo-tree-id62618 . -94) (undo-tree-id62619 . -94) (undo-tree-id62620 . -94) (undo-tree-id62621 . -94) (undo-tree-id62622 . -94) (undo-tree-id62623 . -94) (undo-tree-id62624 . -94) (undo-tree-id62625 . -94) (undo-tree-id62626 . -94) (undo-tree-id62627 . -94) (undo-tree-id62628 . -94) (undo-tree-id62629 . -94) (undo-tree-id62630 . -94) (undo-tree-id62631 . -94) (undo-tree-id62632 . -94) (undo-tree-id62633 . -94) (undo-tree-id62634 . -94) (undo-tree-id62635 . -94) (undo-tree-id62636 . -94) (undo-tree-id62637 . -94) (undo-tree-id62638 . -94) (undo-tree-id62639 . -94) (undo-tree-id62640 . -94) (undo-tree-id62641 . -94) (undo-tree-id62642 . -95) 11080 (t 25767 16638 196327 505000)) nil (25767 16706 943011 758000) 0 nil])
([nil nil ((10986 . 10988)) nil (25767 16706 941913 845000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10987) (undo-tree-id62424 . -1) (undo-tree-id62425 . -1) (undo-tree-id62426 . -1) (undo-tree-id62427 . -1) (undo-tree-id62428 . -1) (undo-tree-id62429 . -1) (undo-tree-id62430 . -1) (undo-tree-id62431 . -1) (undo-tree-id62432 . -1)) nil (25767 16706 941912 496000) 0 nil])
([nil nil ((#("X_train consists of a list of reviews, " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10988) (undo-tree-id62360 . -38) (undo-tree-id62361 . -38) (undo-tree-id62362 . -38) (undo-tree-id62363 . -1) (undo-tree-id62364 . -1) (undo-tree-id62365 . -1) (undo-tree-id62366 . -1) (undo-tree-id62367 . -1) (undo-tree-id62368 . -1) (undo-tree-id62369 . -1) (undo-tree-id62370 . -1) (undo-tree-id62371 . -1) (undo-tree-id62372 . -1) (undo-tree-id62373 . -1) (undo-tree-id62374 . -1) (undo-tree-id62375 . -1) (undo-tree-id62376 . -1) (undo-tree-id62377 . -1) (undo-tree-id62378 . -1) (undo-tree-id62379 . -1) (undo-tree-id62380 . -1) (undo-tree-id62381 . -1) (undo-tree-id62382 . -1) (undo-tree-id62383 . -1) (undo-tree-id62384 . -1) (undo-tree-id62385 . -1) (undo-tree-id62386 . -1) (undo-tree-id62387 . -1) (undo-tree-id62388 . -1) (undo-tree-id62389 . -1) (undo-tree-id62390 . -1) (undo-tree-id62391 . -1) (undo-tree-id62392 . -1) (undo-tree-id62393 . -1) (undo-tree-id62394 . -1) (undo-tree-id62395 . -6) (undo-tree-id62396 . -15) (undo-tree-id62397 . -18) (undo-tree-id62398 . -20) (undo-tree-id62399 . -25) (undo-tree-id62400 . -28) (undo-tree-id62401 . -36) (undo-tree-id62402 . -37) (undo-tree-id62403 . -30) (undo-tree-id62404 . -27) (undo-tree-id62405 . -22) (undo-tree-id62406 . -20) (undo-tree-id62407 . -17) (undo-tree-id62408 . -8) (undo-tree-id62409 . -1) (undo-tree-id62410 . -39) (undo-tree-id62411 . -38) (undo-tree-id62412 . -1) (undo-tree-id62413 . -6) (undo-tree-id62414 . -15) (undo-tree-id62415 . -18) (undo-tree-id62416 . -20) (undo-tree-id62417 . -25) (undo-tree-id62418 . -28) (undo-tree-id62419 . -36) (undo-tree-id62420 . -37) (undo-tree-id62421 . -38) (undo-tree-id62422 . -38) (undo-tree-id62423 . -39) 11026) nil (25767 16706 941900 308000) 0 nil])
([nil nil ((11001 . 11002) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11001) (undo-tree-id62359 . -1) 10988) nil (25767 16706 941626 17000) 0 nil])
([nil nil ((10993 . 11000)) nil (25767 16706 941622 663000) 0 nil])
([nil nil ((#(" of which is" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 10 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10999) (undo-tree-id62247 . -11) (undo-tree-id62248 . -11) (undo-tree-id62249 . 11) (undo-tree-id62250 . -5) (undo-tree-id62251 . -5) (undo-tree-id62252 . -11) (undo-tree-id62253 . -9) (undo-tree-id62254 . -9) (undo-tree-id62255 . -9) (undo-tree-id62256 . -9) (undo-tree-id62257 . -9) (undo-tree-id62258 . -9) (undo-tree-id62259 . -9) (undo-tree-id62260 . -9) (undo-tree-id62261 . -9) (undo-tree-id62262 . -9) (undo-tree-id62263 . -9) (undo-tree-id62264 . -9) (undo-tree-id62265 . -9) (undo-tree-id62266 . -9) (undo-tree-id62267 . -9) (undo-tree-id62268 . -9) (undo-tree-id62269 . -9) (undo-tree-id62270 . -9) (undo-tree-id62271 . -9) (undo-tree-id62272 . -9) (undo-tree-id62273 . -9) (undo-tree-id62274 . -4) (undo-tree-id62275 . -4) (undo-tree-id62276 . -4) (undo-tree-id62277 . -4) (undo-tree-id62278 . -4) (undo-tree-id62279 . -4) (undo-tree-id62280 . -4) (undo-tree-id62281 . -4) (undo-tree-id62282 . -4) (undo-tree-id62283 . -4) (undo-tree-id62284 . -4) (undo-tree-id62285 . -1) (undo-tree-id62286 . -1) (undo-tree-id62287 . -1) (undo-tree-id62288 . -1) (undo-tree-id62289 . -1) (undo-tree-id62290 . -1) (undo-tree-id62291 . -1) (undo-tree-id62292 . -1) (undo-tree-id62293 . -1) (undo-tree-id62294 . -1) (undo-tree-id62295 . -1) (undo-tree-id62296 . -1) (undo-tree-id62297 . -1) (undo-tree-id62298 . -1) (undo-tree-id62299 . -1) (undo-tree-id62300 . -1) (undo-tree-id62301 . -1) (undo-tree-id62302 . -12) (undo-tree-id62303 . -11) (undo-tree-id62304 . -2) (undo-tree-id62305 . -2) (undo-tree-id62306 . -2) (undo-tree-id62307 . -2) (undo-tree-id62308 . -2) (undo-tree-id62309 . -2) (undo-tree-id62310 . -2) (undo-tree-id62311 . -2) (undo-tree-id62312 . -2) (undo-tree-id62313 . -2) (undo-tree-id62314 . -2) (undo-tree-id62315 . -2) (undo-tree-id62316 . -2) (undo-tree-id62317 . -2) (undo-tree-id62318 . -2) (undo-tree-id62319 . -2) (undo-tree-id62320 . -8) (undo-tree-id62321 . -8) (undo-tree-id62322 . -8) (undo-tree-id62323 . -8) (undo-tree-id62324 . -8) (undo-tree-id62325 . -8) (undo-tree-id62326 . -8) (undo-tree-id62327 . -8) (undo-tree-id62328 . -8) (undo-tree-id62329 . -8) (undo-tree-id62330 . -8) (undo-tree-id62331 . -8) (undo-tree-id62332 . -8) (undo-tree-id62333 . -8) (undo-tree-id62334 . -8) (undo-tree-id62335 . -8) (undo-tree-id62336 . -11) (undo-tree-id62337 . -11) (undo-tree-id62338 . -11) (undo-tree-id62339 . -11) (undo-tree-id62340 . -11) (undo-tree-id62341 . -11) (undo-tree-id62342 . -11) (undo-tree-id62343 . -11) (undo-tree-id62344 . -11) (undo-tree-id62345 . -11) (undo-tree-id62346 . -11) (undo-tree-id62347 . -11) (undo-tree-id62348 . -11) (undo-tree-id62349 . -11) (undo-tree-id62350 . -11) (undo-tree-id62351 . -11) (undo-tree-id62352 . -11) (undo-tree-id62353 . -11) (undo-tree-id62354 . -11) (undo-tree-id62355 . -11) (undo-tree-id62356 . -11) (undo-tree-id62357 . -11) (undo-tree-id62358 . -12) 11010) nil (25767 16706 941614 185000) 0 nil])
([nil nil ((10999 . 11002)) nil (25767 16706 940675 826000) 0 nil])
([nil nil ((11074 . 11075) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11074) (undo-tree-id62246 . -1) 11043) nil (25767 16706 940674 169000) 0 nil])
([nil nil ((11085 . 11087) (11083 . 11085)) nil (25767 16706 940663 591000) 0 nil])
([nil nil ((11149 . 11151)) nil (25767 16706 940657 343000) 0 nil])
([nil nil ((11219 . 11220) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11219) (undo-tree-id62643 . -1) 11216 (t 25767 16707 57106 538000)) nil (25767 16720 703234 870000) 0 nil])
([nil nil ((11262 . 11264) (11260 . 11262) (t 25767 16720 769265 967000)) nil (25767 16733 501831 459000) 0 nil])
([nil nil ((11292 . 11293) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11292) (undo-tree-id62644 . -1) 11263) nil (25767 16733 501827 18000) 0 nil])
([nil nil ((11403 . 11405) (t 25767 16733 617416 567000)) nil (25767 16767 765604 752000) 0 nil])
([nil nil ((11301 . 11303) (11300 . 11301) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11300) (undo-tree-id62724 . -1) (undo-tree-id62725 . -1) (undo-tree-id62726 . -1)) nil (25767 16767 765603 513000) 0 nil])
([nil nil ((11304 . 11305) (#("they" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11304) (undo-tree-id62714 . -3) (undo-tree-id62715 . -3) (undo-tree-id62716 . -3) (undo-tree-id62717 . -4) (undo-tree-id62718 . -3) (undo-tree-id62719 . -3) (undo-tree-id62720 . -3) (undo-tree-id62721 . -4) (undo-tree-id62722 . -4) (undo-tree-id62723 . -4) 11307) nil (25767 16767 765599 623000) 0 nil])
([nil nil ((11315 . 11316)) nil (25767 16767 765591 200000) 0 nil])
([nil nil ((11337 . 11339) (11336 . 11337)) nil (25767 16767 765589 994000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11303) (undo-tree-id62676 . -1) (undo-tree-id62677 . -1) (undo-tree-id62678 . -1) (undo-tree-id62679 . -1) (undo-tree-id62680 . -1) (undo-tree-id62681 . -1) (undo-tree-id62682 . -1) (undo-tree-id62683 . -1) (undo-tree-id62684 . -1) (undo-tree-id62685 . -1) (undo-tree-id62686 . -1) (undo-tree-id62687 . -1) (undo-tree-id62688 . -1) (undo-tree-id62689 . -1) (undo-tree-id62690 . -1) (undo-tree-id62691 . -1) (undo-tree-id62692 . -1) (undo-tree-id62693 . -1) (undo-tree-id62694 . -1) (undo-tree-id62695 . -1) (undo-tree-id62696 . -1) (undo-tree-id62697 . -1) (undo-tree-id62698 . -1) (undo-tree-id62699 . -1) (undo-tree-id62700 . -1) (undo-tree-id62701 . -1) (undo-tree-id62702 . -1) (undo-tree-id62703 . -1) (undo-tree-id62704 . -1) (undo-tree-id62705 . -1) (undo-tree-id62706 . -1) (undo-tree-id62707 . -1) (undo-tree-id62708 . -1) (undo-tree-id62709 . -1) (undo-tree-id62710 . -1) (undo-tree-id62711 . -1) (undo-tree-id62712 . -1) (undo-tree-id62713 . -1)) nil (25767 16767 766256 343000) 0 nil])
([nil nil ((11338 . 11343)) nil (25767 16792 337252 835000) 0 nil] [nil nil ((11305 . 11306) (11303 . 11304) (#("1" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11303) (undo-tree-id62645 . -1) (undo-tree-id62646 . -1) (undo-tree-id62647 . -1) (undo-tree-id62648 . -1) (undo-tree-id62649 . -1) (undo-tree-id62650 . -1) (undo-tree-id62651 . -1) (undo-tree-id62652 . -1) (undo-tree-id62653 . -1) (undo-tree-id62654 . -1) (undo-tree-id62655 . -1) (undo-tree-id62656 . -1) (undo-tree-id62657 . -1) (undo-tree-id62658 . -1) (undo-tree-id62659 . -1) (undo-tree-id62660 . -1) (undo-tree-id62661 . -1) (undo-tree-id62662 . -1) (undo-tree-id62663 . -1) (undo-tree-id62664 . -1) (undo-tree-id62665 . -1) (undo-tree-id62666 . -1) (undo-tree-id62667 . -1) (undo-tree-id62668 . -1) (undo-tree-id62669 . -1) (undo-tree-id62670 . -1) (undo-tree-id62671 . -1) (undo-tree-id62672 . -1) (undo-tree-id62673 . -1) (undo-tree-id62674 . -1) (undo-tree-id62675 . -1)) ((11303 . 11304) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11303) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11305)) (25767 16767 764402 901000) 0 nil])
([nil nil ((11344 . 11350) (11342 . 11344)) nil (25767 16792 337251 943000) 0 nil])
nil
([nil nil ((11378 . 11379) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11378) (undo-tree-id62942 . -1) 11363) nil (25767 16792 337250 224000) 0 nil])
([nil nil ((11387 . 11391) (11336 . 11456) (#("- and unknown words, respectively.

 If you want to visualize a review,
- 2 represents the start-of-sequence (SSS) token" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 35 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 35 36 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 36 71 (fontified nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 71 72 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 72 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 73 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 80 86 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 86 87 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 87 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 114 115 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 115 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 11336) (undo-tree-id62739 . -120) (undo-tree-id62740 . -120) (undo-tree-id62741 . 34) (undo-tree-id62742 . -79) (undo-tree-id62743 . -80) (undo-tree-id62744 . -120) (undo-tree-id62745 . -74) (undo-tree-id62746 . -74) (undo-tree-id62747 . -74) (undo-tree-id62748 . -74) (undo-tree-id62749 . -74) (undo-tree-id62750 . -74) (undo-tree-id62751 . -74) (undo-tree-id62752 . -74) (undo-tree-id62753 . -74) (undo-tree-id62754 . -74) (undo-tree-id62755 . -74) (undo-tree-id62756 . -74) (undo-tree-id62757 . -74) (undo-tree-id62758 . -74) (undo-tree-id62759 . -75) (undo-tree-id62760 . -75) (undo-tree-id62761 . -75) (undo-tree-id62762 . -75) (undo-tree-id62763 . -75) (undo-tree-id62764 . -75) (undo-tree-id62765 . -75) (undo-tree-id62766 . -76) (undo-tree-id62767 . -76) (undo-tree-id62768 . -76) (undo-tree-id62769 . -76) (undo-tree-id62770 . -76) (undo-tree-id62771 . -76) (undo-tree-id62772 . -76) (undo-tree-id62773 . -77) (undo-tree-id62774 . -77) (undo-tree-id62775 . -77) (undo-tree-id62776 . -77) (undo-tree-id62777 . -77) (undo-tree-id62778 . -77) (undo-tree-id62779 . -78) (undo-tree-id62780 . -78) (undo-tree-id62781 . -78) (undo-tree-id62782 . -78) (undo-tree-id62783 . -78) (undo-tree-id62784 . -78) (undo-tree-id62785 . -87) (undo-tree-id62786 . -87) (undo-tree-id62787 . -87) (undo-tree-id62788 . -87) (undo-tree-id62789 . -87) (undo-tree-id62790 . -87) (undo-tree-id62791 . -87) (undo-tree-id62792 . -78) (undo-tree-id62793 . -78) (undo-tree-id62794 . -78) (undo-tree-id62795 . -78) (undo-tree-id62796 . -78) (undo-tree-id62797 . -78) (undo-tree-id62798 . -78) (undo-tree-id62799 . -78) (undo-tree-id62800 . -78) (undo-tree-id62801 . -78) (undo-tree-id62802 . -78) (undo-tree-id62803 . -78) (undo-tree-id62804 . -78) (undo-tree-id62805 . -78) (undo-tree-id62806 . -78) (undo-tree-id62807 . -78) (undo-tree-id62808 . -78) (undo-tree-id62809 . -78) (undo-tree-id62810 . -78) (undo-tree-id62811 . -78) (undo-tree-id62812 . -78) (undo-tree-id62813 . -78) (undo-tree-id62814 . -78) (undo-tree-id62815 . -79) (undo-tree-id62816 . -79) (undo-tree-id62817 . -79) (undo-tree-id62818 . -79) (undo-tree-id62819 . -79) (undo-tree-id62820 . -79) (undo-tree-id62821 . -79) (undo-tree-id62822 . -79) (undo-tree-id62823 . -79) (undo-tree-id62824 . -79) (undo-tree-id62825 . -79) (undo-tree-id62826 . -79) (undo-tree-id62827 . -79) (undo-tree-id62828 . -79) (undo-tree-id62829 . -79) (undo-tree-id62830 . -79) (undo-tree-id62831 . -79) (undo-tree-id62832 . -79) (undo-tree-id62833 . -79) (undo-tree-id62834 . -79) (undo-tree-id62835 . -79) (undo-tree-id62836 . -79) (undo-tree-id62837 . -79) (undo-tree-id62838 . -79) (undo-tree-id62839 . -79) (undo-tree-id62840 . -79) (undo-tree-id62841 . -80) (undo-tree-id62842 . -80) (undo-tree-id62843 . -80) (undo-tree-id62844 . -80) (undo-tree-id62845 . -80) (undo-tree-id62846 . -80) (undo-tree-id62847 . -80) (undo-tree-id62848 . -80) (undo-tree-id62849 . -80) (undo-tree-id62850 . -80) (undo-tree-id62851 . -80) (undo-tree-id62852 . -80) (undo-tree-id62853 . -80) (undo-tree-id62854 . -86) (undo-tree-id62855 . -86) (undo-tree-id62856 . -86) (undo-tree-id62857 . -86) (undo-tree-id62858 . -86) (undo-tree-id62859 . -86) (undo-tree-id62860 . -86) (undo-tree-id62861 . -86) (undo-tree-id62862 . -85) (undo-tree-id62863 . -85) (undo-tree-id62864 . -85) (undo-tree-id62865 . -85) (undo-tree-id62866 . -85) (undo-tree-id62867 . -85) (undo-tree-id62868 . -85) (undo-tree-id62869 . -85) (undo-tree-id62870 . -85) (undo-tree-id62871 . -85) (undo-tree-id62872 . -85) (undo-tree-id62873 . -85) (undo-tree-id62874 . -85) (undo-tree-id62875 . -85) (undo-tree-id62876 . -85) (undo-tree-id62877 . -87) (undo-tree-id62878 . -91) (undo-tree-id62879 . -96) (undo-tree-id62880 . -97) (undo-tree-id62881 . -99) (undo-tree-id62882 . -114) (undo-tree-id62883 . -114) (undo-tree-id62884 . -114) (undo-tree-id62885 . -114) (undo-tree-id62886 . -114) (undo-tree-id62887 . -114) (undo-tree-id62888 . -114) (undo-tree-id62889 . -114) (undo-tree-id62890 . -114) (undo-tree-id62891 . -114) (undo-tree-id62892 . -114) (undo-tree-id62893 . -114) (undo-tree-id62894 . -114) (undo-tree-id62895 . -114) (undo-tree-id62896 . -114) (undo-tree-id62897 . -114) (undo-tree-id62898 . -114) (undo-tree-id62899 . -114) (undo-tree-id62900 . -114) (undo-tree-id62901 . -114) (undo-tree-id62902 . -114) (undo-tree-id62903 . -120) (undo-tree-id62904 . -120) (undo-tree-id62905 . -120) (undo-tree-id62906 . -120) (undo-tree-id62907 . -120) (undo-tree-id62908 . -120) (undo-tree-id62909 . -120) (undo-tree-id62910 . -120) (undo-tree-id62911 . -120) (undo-tree-id62912 . -120) (undo-tree-id62913 . -120) (undo-tree-id62914 . -120) (undo-tree-id62915 . -120) (undo-tree-id62916 . -120) (undo-tree-id62917 . -120) (undo-tree-id62918 . -120) (undo-tree-id62919 . -120) (undo-tree-id62920 . -120) (undo-tree-id62921 . -120) (undo-tree-id62922 . -120) (undo-tree-id62923 . -120) (undo-tree-id62924 . -120) (undo-tree-id62925 . -120) (undo-tree-id62926 . -120) (undo-tree-id62927 . -120) (undo-tree-id62928 . -120) (undo-tree-id62929 . -120) (undo-tree-id62930 . -120) (undo-tree-id62931 . -120) (undo-tree-id62932 . -120) (undo-tree-id62933 . -120) (undo-tree-id62934 . -120) (undo-tree-id62935 . -120) (undo-tree-id62936 . -120) (undo-tree-id62937 . -120) (undo-tree-id62938 . -72) (11336 . 11408) (#(" and unknown words, respectively.

 If you want to visualize a review," 0 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 11384) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11384) (undo-tree-id62939 . -1) (undo-tree-id62940 . -1) (undo-tree-id62941 . -1)) nil (25767 16792 337235 912000) 0 nil])
([nil nil ((11392 . 11399) (11390 . 11392)) nil (25767 16792 335424 156000) 0 nil])
([nil nil ((#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11400) (undo-tree-id62737 . -1) (undo-tree-id62738 . -1)) nil (25767 16792 335423 151000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11400) (undo-tree-id62733 . 1) (undo-tree-id62734 . 1) (undo-tree-id62735 . -1) (undo-tree-id62736 . -1)) nil (25767 16792 335418 975000) 0 nil])
([nil nil ((#("d" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11400) (undo-tree-id62730 . 1) (undo-tree-id62731 . -1) (undo-tree-id62732 . -1)) nil (25767 16792 335415 91000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11400) (undo-tree-id62727 . 1) (undo-tree-id62728 . -1) (undo-tree-id62729 . -1)) nil (25767 16792 335408 911000) 0 nil])
([nil nil ((#(", respectively." 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11413) (undo-tree-id63036 . -14) (undo-tree-id63037 . -15) (undo-tree-id63038 . -15) (t 25767 16792 406119 862000)) nil (25767 16822 892534 267000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11333) (undo-tree-id63034 . -1) (undo-tree-id63035 . -1)) nil (25767 16822 892531 165000) 0 nil])
([nil nil ((#(" If you want to visualize a review,
" 0 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 11414) (undo-tree-id63021 . -35) (undo-tree-id63022 . -1) (undo-tree-id63023 . -1) (undo-tree-id63024 . -1) (undo-tree-id63025 . -1) (undo-tree-id63026 . -1) (undo-tree-id63027 . -1) (undo-tree-id63028 . -1) (undo-tree-id63029 . -1) (undo-tree-id63030 . -1) (undo-tree-id63031 . -1) (undo-tree-id63032 . -1) (undo-tree-id63033 . -36)) nil (25767 16822 892528 7000) 0 nil])
([nil nil ((#("you can decode it like this:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11414) (undo-tree-id63019 . -28) (undo-tree-id63020 . -29)) nil (25767 16822 892516 729000) 0 nil])
([nil nil ((#(">>> word_index = keras.datasets.imdb.get_word_index()
>>> id_to_word = {id_ + 3: word for word, id_ in word_index.items()}
>>> for id_, token in enumerate((\"<pad>\", \"<sos>\", \"<unk>\")):
...
id_to_word[id_] = token
...
>>> \" \".join([id_to_word[id_] for id_ in X_train[0][:10]])
'<sos> this film was just brilliant casting location scenery story'
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 9 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 14 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 40 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 41 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 45 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 46 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 51 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 54 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 61 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 64 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 68 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 107 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 108 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 119 123 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 123 185 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 185 187 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 187 189 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 189 191 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 191 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 192 194 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 194 195 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 195 199 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 199 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 213 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 217 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 233 234 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 234 236 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 236 237 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 237 241 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 241 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 259 260 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 260 265 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 265 276 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 276 344 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11414) (undo-tree-id62943 . -343) (undo-tree-id62944 . -276) (undo-tree-id62945 . -276) (undo-tree-id62946 . -344) (undo-tree-id62947 . -276) (undo-tree-id62948 . -54) (undo-tree-id62949 . -54) (undo-tree-id62950 . -54) (undo-tree-id62951 . -54) (undo-tree-id62952 . -54) (undo-tree-id62953 . -54) (undo-tree-id62954 . -54) (undo-tree-id62955 . -54) (undo-tree-id62956 . -54) (undo-tree-id62957 . -54) (undo-tree-id62958 . -54) (undo-tree-id62959 . -123) (undo-tree-id62960 . -123) (undo-tree-id62961 . -123) (undo-tree-id62962 . -123) (undo-tree-id62963 . -123) (undo-tree-id62964 . -123) (undo-tree-id62965 . -123) (undo-tree-id62966 . -123) (undo-tree-id62967 . -123) (undo-tree-id62968 . -123) (undo-tree-id62969 . -123) (undo-tree-id62970 . -185) (undo-tree-id62971 . -185) (undo-tree-id62972 . -185) (undo-tree-id62973 . -185) (undo-tree-id62974 . -185) (undo-tree-id62975 . -185) (undo-tree-id62976 . -185) (undo-tree-id62977 . -185) (undo-tree-id62978 . -185) (undo-tree-id62979 . -185) (undo-tree-id62980 . -185) (undo-tree-id62981 . -189) (undo-tree-id62982 . -189) (undo-tree-id62983 . -189) (undo-tree-id62984 . -189) (undo-tree-id62985 . -189) (undo-tree-id62986 . -189) (undo-tree-id62987 . -213) (undo-tree-id62988 . -213) (undo-tree-id62989 . -213) (undo-tree-id62990 . -213) (undo-tree-id62991 . -213) (undo-tree-id62992 . -213) (undo-tree-id62993 . -217) (undo-tree-id62994 . -217) (undo-tree-id62995 . -217) (undo-tree-id62996 . -217) (undo-tree-id62997 . -217) (undo-tree-id62998 . -217) (undo-tree-id62999 . -217) (undo-tree-id63000 . -217) (undo-tree-id63001 . -217) (undo-tree-id63002 . -217) (undo-tree-id63003 . -217) (undo-tree-id63004 . -276) (undo-tree-id63005 . -276) (undo-tree-id63006 . -276) (undo-tree-id63007 . -276) (undo-tree-id63008 . -276) (undo-tree-id63009 . -276) (undo-tree-id63010 . -276) (undo-tree-id63011 . -276) (undo-tree-id63012 . -276) (undo-tree-id63013 . -276) (undo-tree-id63014 . -276) (undo-tree-id63015 . -276) (undo-tree-id63016 . -276) (undo-tree-id63017 . -276) (undo-tree-id63018 . -344) 11690) nil (25767 16822 892509 802000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12305 . 12306) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -12649) (12305 . 12650)) nil (25767 16822 892217 334000) 0 nil])
([nil nil ((#(">>> " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 12306) (undo-tree-id63051 . -3) (undo-tree-id63052 . 4) (undo-tree-id63053 . -1) (undo-tree-id63054 . -4) (t 25767 16823 10494 628000)) nil (25767 16847 662412 179000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 12356) (undo-tree-id63047 . -3) (undo-tree-id63048 . 4) (undo-tree-id63049 . -1) (undo-tree-id63050 . -4)) nil (25767 16847 662406 240000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 12421) (undo-tree-id63043 . -3) (undo-tree-id63044 . 4) (undo-tree-id63045 . -1) (undo-tree-id63046 . -4)) nil (25767 16847 662401 980000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 12511) (undo-tree-id63039 . -3) (undo-tree-id63040 . 4) (undo-tree-id63041 . -1) (undo-tree-id63042 . -4)) nil (25767 16847 662397 145000) 0 nil])
([nil nil ((12566 . 12567)) nil (25767 16847 662384 290000) 0 nil])
([nil nil ((12483 . 12487) (t 25767 16847 782801 992000)) nil (25767 16864 655156 203000) 0 nil])
([nil nil ((12515 . 12519)) nil (25767 16864 655150 66000) 0 nil])
([nil nil ((#("...
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 12479) (undo-tree-id63078 . -3) (undo-tree-id63079 . -2) (undo-tree-id63080 . -2) (undo-tree-id63081 . -2) (undo-tree-id63082 . -2) (undo-tree-id63083 . -2) (undo-tree-id63084 . -2) (undo-tree-id63085 . -2) (undo-tree-id63086 . -2) (undo-tree-id63087 . -2) (undo-tree-id63088 . -2) (undo-tree-id63089 . -2) (undo-tree-id63090 . -2) (undo-tree-id63091 . -2) (undo-tree-id63092 . -2) (undo-tree-id63093 . -2) (undo-tree-id63094 . -2) (undo-tree-id63095 . -2) (undo-tree-id63096 . -2) (undo-tree-id63097 . -2) (undo-tree-id63098 . -2) (undo-tree-id63099 . -2) (undo-tree-id63100 . -2) (undo-tree-id63101 . -2) (undo-tree-id63102 . -4) 12481 (t 25767 16864 727014 206000)) nil (25767 16875 670356 973000) 0 nil])
([nil nil ((#("...
" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 12507) (undo-tree-id63055 . -3) (undo-tree-id63056 . -2) (undo-tree-id63057 . -2) (undo-tree-id63058 . -2) (undo-tree-id63059 . -2) (undo-tree-id63060 . -2) (undo-tree-id63061 . -2) (undo-tree-id63062 . -2) (undo-tree-id63063 . -2) (undo-tree-id63064 . -2) (undo-tree-id63065 . -2) (undo-tree-id63066 . -2) (undo-tree-id63067 . -2) (undo-tree-id63068 . -2) (undo-tree-id63069 . -2) (undo-tree-id63070 . -2) (undo-tree-id63071 . -2) (undo-tree-id63072 . -2) (undo-tree-id63073 . -2) (undo-tree-id63074 . -2) (undo-tree-id63075 . -2) (undo-tree-id63076 . -2) (undo-tree-id63077 . -4) 12509) nil (25767 16875 670334 206000) 0 nil])
([nil nil ((11414 . 11416) (t 25767 16875 743153 5000)) nil (25767 16990 267703 910000) 0 nil])
([nil nil ((#("you will have to " 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11435) (undo-tree-id63469 . -16) (undo-tree-id63470 . -16) (undo-tree-id63471 . -16) (undo-tree-id63472 . -16) 11451) nil (25767 16990 267702 1000) 0 nil])
([nil nil ((11463 . 11464) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11463)) nil (25767 16990 267693 339000) 0 nil])
([nil nil ((#("You can do
that" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11465) (undo-tree-id63465 . -14) (undo-tree-id63466 . -14) (undo-tree-id63467 . -14) (undo-tree-id63468 . -14) 11479) nil (25767 16990 267691 375000) 0 nil])
([nil nil ((11465 . 11467)) nil (25767 16990 267685 375000) 0 nil])
([nil nil ((11499 . 11501) (#("we" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11499) (undo-tree-id63461 . -1) (undo-tree-id63462 . -1) (undo-tree-id63463 . -1) (undo-tree-id63464 . -1) 11500) nil (25767 16990 267683 545000) 0 nil])
([nil nil ((11516 . 11520) (#("but this time setting" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11516) (undo-tree-id63326 . -20) (undo-tree-id63327 . -20) (undo-tree-id63328 . -20) (undo-tree-id63329 . -21) (undo-tree-id63330 . -20) (undo-tree-id63331 . -2) (undo-tree-id63332 . -2) (undo-tree-id63333 . -2) (undo-tree-id63334 . -2) (undo-tree-id63335 . -2) (undo-tree-id63336 . -2) (undo-tree-id63337 . -2) (undo-tree-id63338 . -2) (undo-tree-id63339 . -2) (undo-tree-id63340 . -2) (undo-tree-id63341 . -2) (undo-tree-id63342 . -2) (undo-tree-id63343 . -2) (undo-tree-id63344 . -2) (undo-tree-id63345 . -2) (undo-tree-id63346 . -2) (undo-tree-id63347 . -7) (undo-tree-id63348 . -7) (undo-tree-id63349 . -7) (undo-tree-id63350 . -7) (undo-tree-id63351 . -7) (undo-tree-id63352 . -7) (undo-tree-id63353 . -7) (undo-tree-id63354 . -7) (undo-tree-id63355 . -7) (undo-tree-id63356 . -7) (undo-tree-id63357 . -7) (undo-tree-id63358 . -7) (undo-tree-id63359 . -7) (undo-tree-id63360 . -7) (undo-tree-id63361 . -7) (undo-tree-id63362 . -7) (undo-tree-id63363 . -12) (undo-tree-id63364 . -12) (undo-tree-id63365 . -12) (undo-tree-id63366 . -12) (undo-tree-id63367 . -12) (undo-tree-id63368 . -12) (undo-tree-id63369 . -12) (undo-tree-id63370 . -12) (undo-tree-id63371 . -12) (undo-tree-id63372 . -12) (undo-tree-id63373 . -12) (undo-tree-id63374 . -12) (undo-tree-id63375 . -12) (undo-tree-id63376 . -12) (undo-tree-id63377 . -12) (undo-tree-id63378 . -12) (undo-tree-id63379 . -12) (undo-tree-id63380 . -12) (undo-tree-id63381 . -12) (undo-tree-id63382 . -12) (undo-tree-id63383 . -12) (undo-tree-id63384 . -12) (undo-tree-id63385 . -12) (undo-tree-id63386 . -12) (undo-tree-id63387 . -12) (undo-tree-id63388 . -12) (undo-tree-id63389 . -12) (undo-tree-id63390 . -12) (undo-tree-id63391 . -12) (undo-tree-id63392 . -12) (undo-tree-id63393 . -12) (undo-tree-id63394 . -20) (undo-tree-id63395 . -20) (undo-tree-id63396 . -20) (undo-tree-id63397 . -20) (undo-tree-id63398 . -20) (undo-tree-id63399 . -20) (undo-tree-id63400 . -20) (undo-tree-id63401 . -20) (undo-tree-id63402 . -20) (undo-tree-id63403 . -20) (undo-tree-id63404 . -20) (undo-tree-id63405 . -20) (undo-tree-id63406 . -20) (undo-tree-id63407 . -20) (undo-tree-id63408 . -20) (undo-tree-id63409 . -20) (undo-tree-id63410 . -14) (undo-tree-id63411 . -14) (undo-tree-id63412 . -14) (undo-tree-id63413 . -14) (undo-tree-id63414 . -14) (undo-tree-id63415 . -14) (undo-tree-id63416 . -14) (undo-tree-id63417 . -14) (undo-tree-id63418 . -14) (undo-tree-id63419 . -14) (undo-tree-id63420 . -14) (undo-tree-id63421 . -14) (undo-tree-id63422 . -14) (undo-tree-id63423 . -14) (undo-tree-id63424 . -14) (undo-tree-id63425 . -14) (undo-tree-id63426 . -14) (undo-tree-id63427 . -14) (undo-tree-id63428 . -14) (undo-tree-id63429 . -14) (undo-tree-id63430 . -14) (undo-tree-id63431 . -20) (undo-tree-id63432 . -20) (undo-tree-id63433 . -20) (undo-tree-id63434 . -20) (undo-tree-id63435 . -20) (undo-tree-id63436 . -20) (undo-tree-id63437 . -20) (undo-tree-id63438 . -20) (undo-tree-id63439 . -20) (undo-tree-id63440 . -20) (undo-tree-id63441 . -20) (undo-tree-id63442 . -20) (undo-tree-id63443 . -20) (undo-tree-id63444 . -20) (undo-tree-id63445 . -20) (undo-tree-id63446 . -20) (undo-tree-id63447 . -20) (undo-tree-id63448 . -20) (undo-tree-id63449 . -20) (undo-tree-id63450 . -20) (undo-tree-id63451 . -20) (undo-tree-id63452 . -20) (undo-tree-id63453 . -20) (undo-tree-id63454 . -20) (undo-tree-id63455 . -20) (undo-tree-id63456 . -20) (undo-tree-id63457 . -20) (undo-tree-id63458 . -21) (undo-tree-id63459 . -21) (undo-tree-id63460 . -21) 11536) nil (25767 16990 267672 274000) 0 nil])
([nil nil ((#("h" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11519) (undo-tree-id63305 . -1) (undo-tree-id63306 . -1) (undo-tree-id63307 . -1) (undo-tree-id63308 . -1) (undo-tree-id63309 . -1) (undo-tree-id63310 . -1) (undo-tree-id63311 . -1) (undo-tree-id63312 . -1) (undo-tree-id63313 . -1) (undo-tree-id63314 . -1) (undo-tree-id63315 . -1) (undo-tree-id63316 . -1) (undo-tree-id63317 . -1) (undo-tree-id63318 . -1) (undo-tree-id63319 . -1) (undo-tree-id63320 . -1) (undo-tree-id63321 . -1) (undo-tree-id63322 . -1) (undo-tree-id63323 . -1) (undo-tree-id63324 . -1) (undo-tree-id63325 . -1)) nil (25767 16990 266560 443000) 0 nil])
([nil nil ((11519 . 11520) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11519) (undo-tree-id63265 . 1) (undo-tree-id63266 . 1) (undo-tree-id63267 . -1) (undo-tree-id63268 . -1) (undo-tree-id63269 . -1) (undo-tree-id63270 . -1) (undo-tree-id63271 . -1) (undo-tree-id63272 . -1) (undo-tree-id63273 . -1) (undo-tree-id63274 . -1) (undo-tree-id63275 . -1) (undo-tree-id63276 . -1) (undo-tree-id63277 . -1) (undo-tree-id63278 . -1) (undo-tree-id63279 . -1) (undo-tree-id63280 . -1) (undo-tree-id63281 . -1) (undo-tree-id63282 . -1) (undo-tree-id63283 . -1) (undo-tree-id63284 . -1) (undo-tree-id63285 . -1) (undo-tree-id63286 . -1) (undo-tree-id63287 . -1) (undo-tree-id63288 . -1) (undo-tree-id63289 . -1) (undo-tree-id63290 . -1) (undo-tree-id63291 . -1) (undo-tree-id63292 . -1) (undo-tree-id63293 . -1) (undo-tree-id63294 . -1) (undo-tree-id63295 . -1) (undo-tree-id63296 . -1) (undo-tree-id63297 . -1) (undo-tree-id63298 . -1) (undo-tree-id63299 . -1) (undo-tree-id63300 . -1) (undo-tree-id63301 . -1) (undo-tree-id63302 . -1) (undo-tree-id63303 . -1) (undo-tree-id63304 . -1) 11518) nil (25767 16990 266541 885000) 0 nil])
([nil nil ((#("(which is the default). " 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11537) (undo-tree-id63157 . -23) (undo-tree-id63158 . -23) (undo-tree-id63159 . -23) (undo-tree-id63160 . -24) (undo-tree-id63161 . -23) (undo-tree-id63162 . -5) (undo-tree-id63163 . -5) (undo-tree-id63164 . -5) (undo-tree-id63165 . -5) (undo-tree-id63166 . -5) (undo-tree-id63167 . -5) (undo-tree-id63168 . -5) (undo-tree-id63169 . -5) (undo-tree-id63170 . -5) (undo-tree-id63171 . -5) (undo-tree-id63172 . -5) (undo-tree-id63173 . -5) (undo-tree-id63174 . -5) (undo-tree-id63175 . -5) (undo-tree-id63176 . -5) (undo-tree-id63177 . -5) (undo-tree-id63178 . -8) (undo-tree-id63179 . -8) (undo-tree-id63180 . -8) (undo-tree-id63181 . -8) (undo-tree-id63182 . -8) (undo-tree-id63183 . -8) (undo-tree-id63184 . -8) (undo-tree-id63185 . -8) (undo-tree-id63186 . -8) (undo-tree-id63187 . -8) (undo-tree-id63188 . -8) (undo-tree-id63189 . -8) (undo-tree-id63190 . -8) (undo-tree-id63191 . -8) (undo-tree-id63192 . -8) (undo-tree-id63193 . -8) (undo-tree-id63194 . -12) (undo-tree-id63195 . -12) (undo-tree-id63196 . -12) (undo-tree-id63197 . -12) (undo-tree-id63198 . -12) (undo-tree-id63199 . -12) (undo-tree-id63200 . -12) (undo-tree-id63201 . -12) (undo-tree-id63202 . -12) (undo-tree-id63203 . -12) (undo-tree-id63204 . -12) (undo-tree-id63205 . -12) (undo-tree-id63206 . -12) (undo-tree-id63207 . -12) (undo-tree-id63208 . -12) (undo-tree-id63209 . -12) (undo-tree-id63210 . -20) (undo-tree-id63211 . -20) (undo-tree-id63212 . -20) (undo-tree-id63213 . -20) (undo-tree-id63214 . -20) (undo-tree-id63215 . -20) (undo-tree-id63216 . -20) (undo-tree-id63217 . -20) (undo-tree-id63218 . -20) (undo-tree-id63219 . -20) (undo-tree-id63220 . -20) (undo-tree-id63221 . -20) (undo-tree-id63222 . -20) (undo-tree-id63223 . -20) (undo-tree-id63224 . -20) (undo-tree-id63225 . -20) (undo-tree-id63226 . -22) (undo-tree-id63227 . -22) (undo-tree-id63228 . -22) (undo-tree-id63229 . -22) (undo-tree-id63230 . -22) (undo-tree-id63231 . -22) (undo-tree-id63232 . -22) (undo-tree-id63233 . -22) (undo-tree-id63234 . -22) (undo-tree-id63235 . -22) (undo-tree-id63236 . -22) (undo-tree-id63237 . -22) (undo-tree-id63238 . -22) (undo-tree-id63239 . -22) (undo-tree-id63240 . -22) (undo-tree-id63241 . -22) (undo-tree-id63242 . -22) (undo-tree-id63243 . -22) (undo-tree-id63244 . -22) (undo-tree-id63245 . -22) (undo-tree-id63246 . -22) (undo-tree-id63247 . -23) (undo-tree-id63248 . -23) (undo-tree-id63249 . -23) (undo-tree-id63250 . -23) (undo-tree-id63251 . -23) (undo-tree-id63252 . -23) (undo-tree-id63253 . -23) (undo-tree-id63254 . -23) (undo-tree-id63255 . -23) (undo-tree-id63256 . -23) (undo-tree-id63257 . -23) (undo-tree-id63258 . -23) (undo-tree-id63259 . -23) (undo-tree-id63260 . -23) (undo-tree-id63261 . -23) (undo-tree-id63262 . -23) (undo-tree-id63263 . -23) (undo-tree-id63264 . -24) 11560) nil (25767 16990 266294 829000) 0 nil])
([nil nil ((11540 . 11541) (11539 . 11540) (11537 . 11539)) nil (25767 16990 264816 316000) 0 nil])
([nil nil ((11783 . 11784) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11783) (undo-tree-id63153 . -1) (11711 . 11712) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11711) (undo-tree-id63154 . -1) (11647 . 11648) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11647) (undo-tree-id63155 . -1) (11572 . 11573) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11572) (undo-tree-id63156 . -1) 11540) nil (25767 16990 264813 920000) 0 nil])
([nil nil ((11709 . 11711) (#("*" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -11709) (undo-tree-id63103 . -1) (undo-tree-id63104 . -1) (undo-tree-id63105 . -1) (undo-tree-id63106 . -1) (undo-tree-id63107 . -1) (undo-tree-id63108 . -1) (undo-tree-id63109 . -1) (undo-tree-id63110 . -1) (undo-tree-id63111 . -1) (undo-tree-id63112 . -1) (undo-tree-id63113 . -1) (undo-tree-id63114 . -1) (undo-tree-id63115 . -1) (undo-tree-id63116 . -1) (undo-tree-id63117 . -1) (undo-tree-id63118 . -1) (undo-tree-id63119 . -1) (undo-tree-id63120 . -1) (undo-tree-id63121 . -1) (undo-tree-id63122 . -1) (undo-tree-id63123 . -1) (undo-tree-id63124 . -1) (undo-tree-id63125 . -1) (undo-tree-id63126 . -1) (undo-tree-id63127 . -1) (undo-tree-id63128 . -1) (undo-tree-id63129 . -1) (undo-tree-id63130 . -1) (undo-tree-id63131 . -1) (undo-tree-id63132 . -1) (undo-tree-id63133 . -1) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . -11710) (undo-tree-id63134 . -1) (undo-tree-id63135 . -1) (undo-tree-id63136 . -1) (undo-tree-id63137 . -1) (undo-tree-id63138 . -1) (undo-tree-id63139 . -1) (undo-tree-id63140 . -1) (undo-tree-id63141 . -1) (undo-tree-id63142 . -1) (undo-tree-id63143 . -1) (undo-tree-id63144 . -1) (undo-tree-id63145 . -1) (undo-tree-id63146 . -1) (undo-tree-id63147 . -1) (undo-tree-id63148 . -1) (undo-tree-id63149 . -1) (undo-tree-id63150 . -1) (undo-tree-id63151 . -1) (undo-tree-id63152 . -1) 11711 (11708 . 11709) (11708 . 11710) (11707 . 11708)) nil (25767 16990 264762 558000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -11855) (undo-tree-id63483 . -2) (undo-tree-id63484 . -2) (undo-tree-id63485 . -2) (undo-tree-id63486 . -2) (undo-tree-id63487 . -2) (undo-tree-id63488 . -2) (undo-tree-id63489 . -2) (undo-tree-id63490 . -2) (undo-tree-id63491 . -2) (undo-tree-id63492 . -2) 11857 (11854 . 11857) (t 25767 16990 388632 997000) 11726) nil (25767 17002 855663 796000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -11855) (undo-tree-id63473 . -2) (undo-tree-id63474 . -2) (undo-tree-id63475 . -2) (undo-tree-id63476 . -2) (undo-tree-id63477 . -2) (undo-tree-id63478 . -2) (undo-tree-id63479 . -2) (undo-tree-id63480 . -2) (undo-tree-id63481 . -2) (undo-tree-id63482 . -2) 11857 (11854 . 11857) 11709) nil (25767 17002 855654 366000) 0 nil])
([nil nil ((11774 . 11776) (11773 . 11774)) nil (25767 17002 855635 11000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -11857) (undo-tree-id63868 . -1) (undo-tree-id63869 . -1) (undo-tree-id63870 . -1) (undo-tree-id63871 . -1) (undo-tree-id63872 . -1) (undo-tree-id63873 . -1) (undo-tree-id63874 . -1) (undo-tree-id63875 . -1) (undo-tree-id63876 . -1) 11781 (t 25767 17002 928798 473000)) nil (25767 17025 655633 117000) 0 nil])
([nil nil ((#("(written languages)" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11822) (undo-tree-id63866 . -18) (undo-tree-id63867 . -19) 11801) nil (25767 17025 655625 501000) 0 nil])
([nil nil ((11838 . 11839) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11838) (undo-tree-id63856 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -11838) (undo-tree-id63857 . -1) (undo-tree-id63858 . -1) (undo-tree-id63859 . -1) (undo-tree-id63860 . -1) (undo-tree-id63861 . -1) (undo-tree-id63862 . -1) (undo-tree-id63863 . -1) (undo-tree-id63864 . -1) (undo-tree-id63865 . -1) 11830) nil (25767 17025 655622 881000) 0 nil])
([nil nil ((11852 . 11853) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11852) (undo-tree-id63855 . -1)) nil (25767 17025 655615 106000) 0 nil])
([nil nil ((#("but not all scripts use spaces this way. Chinese does not
use spaces between words, Vietnamese uses spaces even within words, and
languages such as German often attach multiple words together, without
" 0 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 58 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 130 199 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 199 200 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 200 201 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 11854) (undo-tree-id63493 . -200) (undo-tree-id63494 . -200) (undo-tree-id63495 . -199) (undo-tree-id63496 . -200) (undo-tree-id63497 . -201) (undo-tree-id63498 . -200) (undo-tree-id63499 . -2) (undo-tree-id63500 . -2) (undo-tree-id63501 . -2) (undo-tree-id63502 . -2) (undo-tree-id63503 . -2) (undo-tree-id63504 . -2) (undo-tree-id63505 . -2) (undo-tree-id63506 . -2) (undo-tree-id63507 . -2) (undo-tree-id63508 . -2) (undo-tree-id63509 . -2) (undo-tree-id63510 . -2) (undo-tree-id63511 . -2) (undo-tree-id63512 . -2) (undo-tree-id63513 . -2) (undo-tree-id63514 . -2) (undo-tree-id63515 . -2) (undo-tree-id63516 . -2) (undo-tree-id63517 . -2) (undo-tree-id63518 . -2) (undo-tree-id63519 . -2) (undo-tree-id63520 . -2) (undo-tree-id63521 . -2) (undo-tree-id63522 . -2) (undo-tree-id63523 . -2) (undo-tree-id63524 . -2) (undo-tree-id63525 . -6) (undo-tree-id63526 . -6) (undo-tree-id63527 . -6) (undo-tree-id63528 . -6) (undo-tree-id63529 . -6) (undo-tree-id63530 . -6) (undo-tree-id63531 . -10) (undo-tree-id63532 . -10) (undo-tree-id63533 . -10) (undo-tree-id63534 . -10) (undo-tree-id63535 . -10) (undo-tree-id63536 . -10) (undo-tree-id63537 . -18) (undo-tree-id63538 . -18) (undo-tree-id63539 . -18) (undo-tree-id63540 . -18) (undo-tree-id63541 . -18) (undo-tree-id63542 . -18) (undo-tree-id63543 . -22) (undo-tree-id63544 . -22) (undo-tree-id63545 . -22) (undo-tree-id63546 . -22) (undo-tree-id63547 . -22) (undo-tree-id63548 . -22) (undo-tree-id63549 . -29) (undo-tree-id63550 . -29) (undo-tree-id63551 . -29) (undo-tree-id63552 . -29) (undo-tree-id63553 . -29) (undo-tree-id63554 . -29) (undo-tree-id63555 . -34) (undo-tree-id63556 . -34) (undo-tree-id63557 . -34) (undo-tree-id63558 . -34) (undo-tree-id63559 . -34) (undo-tree-id63560 . -34) (undo-tree-id63561 . -38) (undo-tree-id63562 . -38) (undo-tree-id63563 . -38) (undo-tree-id63564 . -38) (undo-tree-id63565 . -38) (undo-tree-id63566 . -38) (undo-tree-id63567 . -39) (undo-tree-id63568 . -39) (undo-tree-id63569 . -39) (undo-tree-id63570 . -39) (undo-tree-id63571 . -39) (undo-tree-id63572 . -39) (undo-tree-id63573 . -47) (undo-tree-id63574 . -47) (undo-tree-id63575 . -47) (undo-tree-id63576 . -47) (undo-tree-id63577 . -47) (undo-tree-id63578 . -47) (undo-tree-id63579 . -47) (undo-tree-id63580 . -47) (undo-tree-id63581 . -47) (undo-tree-id63582 . -47) (undo-tree-id63583 . -47) (undo-tree-id63584 . -47) (undo-tree-id63585 . -47) (undo-tree-id63586 . -47) (undo-tree-id63587 . -47) (undo-tree-id63588 . -47) (undo-tree-id63589 . -52) (undo-tree-id63590 . -52) (undo-tree-id63591 . -52) (undo-tree-id63592 . -52) (undo-tree-id63593 . -52) (undo-tree-id63594 . -52) (undo-tree-id63595 . -52) (undo-tree-id63596 . -52) (undo-tree-id63597 . -52) (undo-tree-id63598 . -52) (undo-tree-id63599 . -52) (undo-tree-id63600 . -52) (undo-tree-id63601 . -52) (undo-tree-id63602 . -52) (undo-tree-id63603 . -52) (undo-tree-id63604 . -52) (undo-tree-id63605 . -56) (undo-tree-id63606 . -56) (undo-tree-id63607 . -56) (undo-tree-id63608 . -56) (undo-tree-id63609 . -56) (undo-tree-id63610 . -56) (undo-tree-id63611 . -56) (undo-tree-id63612 . -56) (undo-tree-id63613 . -56) (undo-tree-id63614 . -56) (undo-tree-id63615 . -56) (undo-tree-id63616 . -56) (undo-tree-id63617 . -56) (undo-tree-id63618 . -56) (undo-tree-id63619 . -56) (undo-tree-id63620 . -56) (undo-tree-id63621 . -56) (undo-tree-id63622 . -56) (undo-tree-id63623 . -56) (undo-tree-id63624 . -56) (undo-tree-id63625 . -56) (undo-tree-id63626 . -60) (undo-tree-id63627 . -60) (undo-tree-id63628 . -60) (undo-tree-id63629 . -60) (undo-tree-id63630 . -60) (undo-tree-id63631 . -60) (undo-tree-id63632 . -60) (undo-tree-id63633 . -60) (undo-tree-id63634 . -60) (undo-tree-id63635 . -60) (undo-tree-id63636 . -60) (undo-tree-id63637 . -60) (undo-tree-id63638 . -60) (undo-tree-id63639 . -60) (undo-tree-id63640 . -60) (undo-tree-id63641 . -60) (undo-tree-id63642 . -67) (undo-tree-id63643 . -67) (undo-tree-id63644 . -67) (undo-tree-id63645 . -67) (undo-tree-id63646 . -67) (undo-tree-id63647 . -67) (undo-tree-id63648 . -67) (undo-tree-id63649 . -67) (undo-tree-id63650 . -67) (undo-tree-id63651 . -67) (undo-tree-id63652 . -67) (undo-tree-id63653 . -67) (undo-tree-id63654 . -67) (undo-tree-id63655 . -67) (undo-tree-id63656 . -67) (undo-tree-id63657 . -67) (undo-tree-id63658 . -75) (undo-tree-id63659 . -75) (undo-tree-id63660 . -75) (undo-tree-id63661 . -75) (undo-tree-id63662 . -75) (undo-tree-id63663 . -75) (undo-tree-id63664 . -75) (undo-tree-id63665 . -75) (undo-tree-id63666 . -75) (undo-tree-id63667 . -75) (undo-tree-id63668 . -75) (undo-tree-id63669 . -75) (undo-tree-id63670 . -75) (undo-tree-id63671 . -75) (undo-tree-id63672 . -75) (undo-tree-id63673 . -75) (undo-tree-id63674 . -81) (undo-tree-id63675 . -81) (undo-tree-id63676 . -81) (undo-tree-id63677 . -81) (undo-tree-id63678 . -81) (undo-tree-id63679 . -81) (undo-tree-id63680 . -81) (undo-tree-id63681 . -81) (undo-tree-id63682 . -81) (undo-tree-id63683 . -81) (undo-tree-id63684 . -81) (undo-tree-id63685 . -81) (undo-tree-id63686 . -81) (undo-tree-id63687 . -81) (undo-tree-id63688 . -81) (undo-tree-id63689 . -81) (undo-tree-id63690 . -82) (undo-tree-id63691 . -82) (undo-tree-id63692 . -82) (undo-tree-id63693 . -82) (undo-tree-id63694 . -82) (undo-tree-id63695 . -82) (undo-tree-id63696 . -82) (undo-tree-id63697 . -82) (undo-tree-id63698 . -82) (undo-tree-id63699 . -82) (undo-tree-id63700 . -82) (undo-tree-id63701 . -82) (undo-tree-id63702 . -82) (undo-tree-id63703 . -82) (undo-tree-id63704 . -82) (undo-tree-id63705 . -82) (undo-tree-id63706 . -93) (undo-tree-id63707 . -93) (undo-tree-id63708 . -93) (undo-tree-id63709 . -93) (undo-tree-id63710 . -93) (undo-tree-id63711 . -93) (undo-tree-id63712 . -93) (undo-tree-id63713 . -93) (undo-tree-id63714 . -93) (undo-tree-id63715 . -93) (undo-tree-id63716 . -93) (undo-tree-id63717 . -93) (undo-tree-id63718 . -93) (undo-tree-id63719 . -93) (undo-tree-id63720 . -93) (undo-tree-id63721 . -93) (undo-tree-id63722 . -93) (undo-tree-id63723 . -93) (undo-tree-id63724 . -93) (undo-tree-id63725 . -93) (undo-tree-id63726 . -93) (undo-tree-id63727 . -98) (undo-tree-id63728 . -98) (undo-tree-id63729 . -98) (undo-tree-id63730 . -98) (undo-tree-id63731 . -98) (undo-tree-id63732 . -98) (undo-tree-id63733 . -105) (undo-tree-id63734 . -105) (undo-tree-id63735 . -105) (undo-tree-id63736 . -105) (undo-tree-id63737 . -105) (undo-tree-id63738 . -105) (undo-tree-id63739 . -110) (undo-tree-id63740 . -110) (undo-tree-id63741 . -110) (undo-tree-id63742 . -110) (undo-tree-id63743 . -110) (undo-tree-id63744 . -110) (undo-tree-id63745 . -117) (undo-tree-id63746 . -117) (undo-tree-id63747 . -117) (undo-tree-id63748 . -117) (undo-tree-id63749 . -117) (undo-tree-id63750 . -117) (undo-tree-id63751 . -123) (undo-tree-id63752 . -123) (undo-tree-id63753 . -123) (undo-tree-id63754 . -123) (undo-tree-id63755 . -123) (undo-tree-id63756 . -123) (undo-tree-id63757 . -124) (undo-tree-id63758 . -124) (undo-tree-id63759 . -124) (undo-tree-id63760 . -124) (undo-tree-id63761 . -124) (undo-tree-id63762 . -124) (undo-tree-id63763 . -128) (undo-tree-id63764 . -128) (undo-tree-id63765 . -128) (undo-tree-id63766 . -128) (undo-tree-id63767 . -128) (undo-tree-id63768 . -128) (undo-tree-id63769 . -138) (undo-tree-id63770 . -138) (undo-tree-id63771 . -138) (undo-tree-id63772 . -138) (undo-tree-id63773 . -138) (undo-tree-id63774 . -138) (undo-tree-id63775 . -138) (undo-tree-id63776 . -138) (undo-tree-id63777 . -138) (undo-tree-id63778 . -138) (undo-tree-id63779 . -138) (undo-tree-id63780 . -138) (undo-tree-id63781 . -138) (undo-tree-id63782 . -138) (undo-tree-id63783 . -138) (undo-tree-id63784 . -138) (undo-tree-id63785 . -143) (undo-tree-id63786 . -143) (undo-tree-id63787 . -143) (undo-tree-id63788 . -143) (undo-tree-id63789 . -143) (undo-tree-id63790 . -143) (undo-tree-id63791 . -143) (undo-tree-id63792 . -143) (undo-tree-id63793 . -143) (undo-tree-id63794 . -143) (undo-tree-id63795 . -143) (undo-tree-id63796 . -143) (undo-tree-id63797 . -143) (undo-tree-id63798 . -143) (undo-tree-id63799 . -143) (undo-tree-id63800 . -143) (undo-tree-id63801 . -143) (undo-tree-id63802 . -143) (undo-tree-id63803 . -143) (undo-tree-id63804 . -143) (undo-tree-id63805 . -143) (undo-tree-id63806 . -146) (undo-tree-id63807 . -146) (undo-tree-id63808 . -146) (undo-tree-id63809 . -146) (undo-tree-id63810 . -146) (undo-tree-id63811 . -146) (undo-tree-id63812 . -146) (undo-tree-id63813 . -146) (undo-tree-id63814 . -146) (undo-tree-id63815 . -146) (undo-tree-id63816 . -146) (undo-tree-id63817 . -146) (undo-tree-id63818 . -146) (undo-tree-id63819 . -146) (undo-tree-id63820 . -146) (undo-tree-id63821 . -146) (undo-tree-id63822 . -146) (undo-tree-id63823 . -146) (undo-tree-id63824 . -146) (undo-tree-id63825 . -146) (undo-tree-id63826 . -146) (undo-tree-id63827 . -146) (undo-tree-id63828 . -146) (undo-tree-id63829 . -146) (undo-tree-id63830 . -146) (undo-tree-id63831 . -146) (undo-tree-id63832 . -200) (undo-tree-id63833 . -200) (undo-tree-id63834 . -200) (undo-tree-id63835 . -200) (undo-tree-id63836 . -200) (undo-tree-id63837 . -200) (undo-tree-id63838 . -200) (undo-tree-id63839 . -200) (undo-tree-id63840 . -200) (undo-tree-id63841 . -200) (undo-tree-id63842 . -200) (undo-tree-id63843 . -200) (undo-tree-id63844 . -200) (undo-tree-id63845 . -200) (undo-tree-id63846 . -200) (undo-tree-id63847 . -200) (undo-tree-id63848 . -200) (undo-tree-id63849 . -200) (undo-tree-id63850 . -200) (undo-tree-id63851 . -200) (undo-tree-id63852 . -200) (undo-tree-id63853 . -200) (undo-tree-id63854 . -201) 12054) nil (25767 17025 655563 409000) 0 nil])
([nil nil ((11854 . 11855) (t 25767 17025 773101 564000)) nil (25767 17027 998520 238000) 0 nil])
([nil nil ((10988 . 10989) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 10988) (t 25767 17028 65132 89000)) nil (25767 17036 478229 549000) 0 nil])
([nil nil ((11114 . 11115) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11114) (undo-tree-id64295 . -1) (t 25767 17036 593245 844000)) nil (25767 17070 686013 320000) 0 nil])
([nil nil ((11117 . 11118) (11115 . 11117)) nil (25767 17070 686011 593000) 0 nil])
([nil nil ((11119 . 11120) (#("and then w" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11119) (undo-tree-id64282 . -9) (undo-tree-id64283 . -9) (undo-tree-id64284 . -9) (undo-tree-id64285 . -10) (undo-tree-id64286 . -9) (undo-tree-id64287 . -2) (undo-tree-id64288 . -7) (undo-tree-id64289 . -10) (undo-tree-id64290 . -9) (undo-tree-id64291 . -9) (undo-tree-id64292 . -10) (undo-tree-id64293 . -10) (undo-tree-id64294 . -10) 11128) nil (25767 17070 686010 159000) 0 nil])
([nil nil ((11142 . 11143) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 11142) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11142) (undo-tree-id64281 . -1) 11119) nil (25767 17070 686000 805000) 0 nil])
([nil nil ((11152 . 11156) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11152) (undo-tree-id64278 . -1) (undo-tree-id64279 . -1) (undo-tree-id64280 . -1)) nil (25767 17070 685998 833000) 0 nil])
([nil nil ((11117 . 11257) (#("- and finally indexed by frequency (so low integers correspond to frequent words). 

- Words were converted to lowercase and split by spaces" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 43 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 43 83 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 84 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 84 85 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 85 86 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 86 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 110 111 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 111 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 11117) (undo-tree-id63948 . -140) (undo-tree-id63949 . -140) (undo-tree-id63950 . -87) (undo-tree-id63951 . -87) (undo-tree-id63952 . 52) (undo-tree-id63953 . 16) (undo-tree-id63954 . -123) (undo-tree-id63955 . -124) (undo-tree-id63956 . -140) (undo-tree-id63957 . -86) (undo-tree-id63958 . -86) (undo-tree-id63959 . -86) (undo-tree-id63960 . -86) (undo-tree-id63961 . -86) (undo-tree-id63962 . -86) (undo-tree-id63963 . -87) (undo-tree-id63964 . -87) (undo-tree-id63965 . -87) (undo-tree-id63966 . -87) (undo-tree-id63967 . -87) (undo-tree-id63968 . -87) (undo-tree-id63969 . -87) (undo-tree-id63970 . -87) (undo-tree-id63971 . -87) (undo-tree-id63972 . -87) (undo-tree-id63973 . -87) (undo-tree-id63974 . -91) (undo-tree-id63975 . -90) (undo-tree-id63976 . -89) (undo-tree-id63977 . -87) (undo-tree-id63978 . -87) (undo-tree-id63979 . -87) (undo-tree-id63980 . -87) (undo-tree-id63981 . -87) (undo-tree-id63982 . -87) (undo-tree-id63983 . -87) (undo-tree-id63984 . -87) (undo-tree-id63985 . -87) (undo-tree-id63986 . -87) (undo-tree-id63987 . -88) (undo-tree-id63988 . -88) (undo-tree-id63989 . -88) (undo-tree-id63990 . -88) (undo-tree-id63991 . -88) (undo-tree-id63992 . -88) (undo-tree-id63993 . -87) (undo-tree-id63994 . -87) (undo-tree-id63995 . -87) (undo-tree-id63996 . -87) (undo-tree-id63997 . -87) (undo-tree-id63998 . -87) (undo-tree-id63999 . -87) (undo-tree-id64000 . -87) (undo-tree-id64001 . -87) (undo-tree-id64002 . -87) (undo-tree-id64003 . -87) (undo-tree-id64004 . -87) (undo-tree-id64005 . -87) (undo-tree-id64006 . -87) (undo-tree-id64007 . -87) (undo-tree-id64008 . -110) (undo-tree-id64009 . -110) (undo-tree-id64010 . -110) (undo-tree-id64011 . -110) (undo-tree-id64012 . -110) (undo-tree-id64013 . -110) (undo-tree-id64014 . -110) (undo-tree-id64015 . -110) (undo-tree-id64016 . -110) (undo-tree-id64017 . -110) (undo-tree-id64018 . -110) (undo-tree-id64019 . -110) (undo-tree-id64020 . -110) (undo-tree-id64021 . -110) (undo-tree-id64022 . -110) (undo-tree-id64023 . -110) (undo-tree-id64024 . -110) (undo-tree-id64025 . -111) (undo-tree-id64026 . -111) (undo-tree-id64027 . -111) (undo-tree-id64028 . -111) (undo-tree-id64029 . -111) (undo-tree-id64030 . -111) (undo-tree-id64031 . -111) (undo-tree-id64032 . -111) (undo-tree-id64033 . -111) (undo-tree-id64034 . -111) (undo-tree-id64035 . -111) (undo-tree-id64036 . -120) (undo-tree-id64037 . -120) (undo-tree-id64038 . -120) (undo-tree-id64039 . -120) (undo-tree-id64040 . -120) (undo-tree-id64041 . -120) (undo-tree-id64042 . -120) (undo-tree-id64043 . -120) (undo-tree-id64044 . -120) (undo-tree-id64045 . -120) (undo-tree-id64046 . -120) (undo-tree-id64047 . -120) (undo-tree-id64048 . -120) (undo-tree-id64049 . -120) (undo-tree-id64050 . -120) (undo-tree-id64051 . -120) (undo-tree-id64052 . -120) (undo-tree-id64053 . -120) (undo-tree-id64054 . -120) (undo-tree-id64055 . -120) (undo-tree-id64056 . -120) (undo-tree-id64057 . -120) (undo-tree-id64058 . -120) (undo-tree-id64059 . -120) (undo-tree-id64060 . -120) (undo-tree-id64061 . -120) (undo-tree-id64062 . -120) (undo-tree-id64063 . -120) (undo-tree-id64064 . -120) (undo-tree-id64065 . -120) (undo-tree-id64066 . -120) (undo-tree-id64067 . -120) (undo-tree-id64068 . -120) (undo-tree-id64069 . -120) (undo-tree-id64070 . -120) (undo-tree-id64071 . -120) (undo-tree-id64072 . -120) (undo-tree-id64073 . -120) (undo-tree-id64074 . -120) (undo-tree-id64075 . -120) (undo-tree-id64076 . -120) (undo-tree-id64077 . -120) (undo-tree-id64078 . -120) (undo-tree-id64079 . -120) (undo-tree-id64080 . -120) (undo-tree-id64081 . -120) (undo-tree-id64082 . -120) (undo-tree-id64083 . -120) (undo-tree-id64084 . -120) (undo-tree-id64085 . -121) (undo-tree-id64086 . -121) (undo-tree-id64087 . -121) (undo-tree-id64088 . -121) (undo-tree-id64089 . -121) (undo-tree-id64090 . -121) (undo-tree-id64091 . -121) (undo-tree-id64092 . -121) (undo-tree-id64093 . -121) (undo-tree-id64094 . -121) (undo-tree-id64095 . -121) (undo-tree-id64096 . -121) (undo-tree-id64097 . -121) (undo-tree-id64098 . -121) (undo-tree-id64099 . -121) (undo-tree-id64100 . -121) (undo-tree-id64101 . -121) (undo-tree-id64102 . -122) (undo-tree-id64103 . -122) (undo-tree-id64104 . -122) (undo-tree-id64105 . -122) (undo-tree-id64106 . -122) (undo-tree-id64107 . -122) (undo-tree-id64108 . -122) (undo-tree-id64109 . -122) (undo-tree-id64110 . -122) (undo-tree-id64111 . -122) (undo-tree-id64112 . -122) (undo-tree-id64113 . -122) (undo-tree-id64114 . -122) (undo-tree-id64115 . -122) (undo-tree-id64116 . -122) (undo-tree-id64117 . -122) (undo-tree-id64118 . -122) (undo-tree-id64119 . -122) (undo-tree-id64120 . -122) (undo-tree-id64121 . -122) (undo-tree-id64122 . -122) (undo-tree-id64123 . -122) (undo-tree-id64124 . -122) (undo-tree-id64125 . -122) (undo-tree-id64126 . -122) (undo-tree-id64127 . -122) (undo-tree-id64128 . -122) (undo-tree-id64129 . -122) (undo-tree-id64130 . -123) (undo-tree-id64131 . -123) (undo-tree-id64132 . -123) (undo-tree-id64133 . -123) (undo-tree-id64134 . -123) (undo-tree-id64135 . -123) (undo-tree-id64136 . -123) (undo-tree-id64137 . -123) (undo-tree-id64138 . -123) (undo-tree-id64139 . -123) (undo-tree-id64140 . -123) (undo-tree-id64141 . -123) (undo-tree-id64142 . -123) (undo-tree-id64143 . -123) (undo-tree-id64144 . -123) (undo-tree-id64145 . -123) (undo-tree-id64146 . -123) (undo-tree-id64147 . -123) (undo-tree-id64148 . -124) (undo-tree-id64149 . -124) (undo-tree-id64150 . -124) (undo-tree-id64151 . -124) (undo-tree-id64152 . -124) (undo-tree-id64153 . -124) (undo-tree-id64154 . -124) (undo-tree-id64155 . -124) (undo-tree-id64156 . -124) (undo-tree-id64157 . -124) (undo-tree-id64158 . -124) (undo-tree-id64159 . -124) (undo-tree-id64160 . -124) (undo-tree-id64161 . -124) (undo-tree-id64162 . -124) (undo-tree-id64163 . -124) (undo-tree-id64164 . -124) (undo-tree-id64165 . -124) (undo-tree-id64166 . -123) (undo-tree-id64167 . -123) (undo-tree-id64168 . -123) (undo-tree-id64169 . -123) (undo-tree-id64170 . -123) (undo-tree-id64171 . -123) (undo-tree-id64172 . -123) (undo-tree-id64173 . -123) (undo-tree-id64174 . -123) (undo-tree-id64175 . -123) (undo-tree-id64176 . -123) (undo-tree-id64177 . -123) (undo-tree-id64178 . -123) (undo-tree-id64179 . -123) (undo-tree-id64180 . -123) (undo-tree-id64181 . -123) (undo-tree-id64182 . -123) (undo-tree-id64183 . -123) (undo-tree-id64184 . -123) (undo-tree-id64185 . -123) (undo-tree-id64186 . -123) (undo-tree-id64187 . -123) (undo-tree-id64188 . -123) (undo-tree-id64189 . -123) (undo-tree-id64190 . -123) (undo-tree-id64191 . -123) (undo-tree-id64192 . -123) (undo-tree-id64193 . -123) (undo-tree-id64194 . -123) (undo-tree-id64195 . -123) (undo-tree-id64196 . -125) (undo-tree-id64197 . -125) (undo-tree-id64198 . -125) (undo-tree-id64199 . -125) (undo-tree-id64200 . -125) (undo-tree-id64201 . -125) (undo-tree-id64202 . -125) (undo-tree-id64203 . -125) (undo-tree-id64204 . -125) (undo-tree-id64205 . -125) (undo-tree-id64206 . -125) (undo-tree-id64207 . -131) (undo-tree-id64208 . -131) (undo-tree-id64209 . -131) (undo-tree-id64210 . -131) (undo-tree-id64211 . -131) (undo-tree-id64212 . -131) (undo-tree-id64213 . -131) (undo-tree-id64214 . -131) (undo-tree-id64215 . -131) (undo-tree-id64216 . -131) (undo-tree-id64217 . -131) (undo-tree-id64218 . -134) (undo-tree-id64219 . -134) (undo-tree-id64220 . -134) (undo-tree-id64221 . -134) (undo-tree-id64222 . -134) (undo-tree-id64223 . -134) (undo-tree-id64224 . -134) (undo-tree-id64225 . -134) (undo-tree-id64226 . -134) (undo-tree-id64227 . -134) (undo-tree-id64228 . -134) (undo-tree-id64229 . -140) (undo-tree-id64230 . -140) (undo-tree-id64231 . -140) (undo-tree-id64232 . -140) (undo-tree-id64233 . -140) (undo-tree-id64234 . -140) (undo-tree-id64235 . -140) (undo-tree-id64236 . -140) (undo-tree-id64237 . -140) (undo-tree-id64238 . -140) (undo-tree-id64239 . -140) (undo-tree-id64240 . -140) (undo-tree-id64241 . -140) (undo-tree-id64242 . -140) (undo-tree-id64243 . -140) (undo-tree-id64244 . -140) (undo-tree-id64245 . -140) (undo-tree-id64246 . -140) (undo-tree-id64247 . -140) (undo-tree-id64248 . -140) (undo-tree-id64249 . -140) (undo-tree-id64250 . -140) (undo-tree-id64251 . -140) (undo-tree-id64252 . -140) (undo-tree-id64253 . -140) (undo-tree-id64254 . -140) (undo-tree-id64255 . -140) (undo-tree-id64256 . -140) (undo-tree-id64257 . -140) (undo-tree-id64258 . -140) (undo-tree-id64259 . -140) (undo-tree-id64260 . -140) (undo-tree-id64261 . -140) (undo-tree-id64262 . -140) (undo-tree-id64263 . -140) (undo-tree-id64264 . -140) (undo-tree-id64265 . -140) (undo-tree-id64266 . -140) (undo-tree-id64267 . -140) (undo-tree-id64268 . -140) (undo-tree-id64269 . -140) (undo-tree-id64270 . -140) (undo-tree-id64271 . -140) (undo-tree-id64272 . -140) (undo-tree-id64273 . -140) (undo-tree-id64274 . -85) (11117 . 11202) (#(" and finally indexed by frequency (so low integers correspond to frequent words). " 0 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 41 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11172) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11172) (undo-tree-id64275 . -1) (undo-tree-id64276 . -1) (undo-tree-id64277 . -1)) nil (25767 17070 685984 4000) 0 nil])
([nil nil ((#("and finally " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11176) (undo-tree-id63877 . -11) (undo-tree-id63878 . -11) (undo-tree-id63879 . 12) (undo-tree-id63880 . -11) (undo-tree-id63881 . -12) (undo-tree-id63882 . -11) (undo-tree-id63883 . -2) (undo-tree-id63884 . -2) (undo-tree-id63885 . -2) (undo-tree-id63886 . -2) (undo-tree-id63887 . -2) (undo-tree-id63888 . -2) (undo-tree-id63889 . -2) (undo-tree-id63890 . -2) (undo-tree-id63891 . -2) (undo-tree-id63892 . -2) (undo-tree-id63893 . -2) (undo-tree-id63894 . -2) (undo-tree-id63895 . -2) (undo-tree-id63896 . -2) (undo-tree-id63897 . -2) (undo-tree-id63898 . -2) (undo-tree-id63899 . -10) (undo-tree-id63900 . -10) (undo-tree-id63901 . -10) (undo-tree-id63902 . -10) (undo-tree-id63903 . -10) (undo-tree-id63904 . -10) (undo-tree-id63905 . -10) (undo-tree-id63906 . -10) (undo-tree-id63907 . -10) (undo-tree-id63908 . -10) (undo-tree-id63909 . -10) (undo-tree-id63910 . -10) (undo-tree-id63911 . -10) (undo-tree-id63912 . -10) (undo-tree-id63913 . -10) (undo-tree-id63914 . -10) (undo-tree-id63915 . -10) (undo-tree-id63916 . -10) (undo-tree-id63917 . -10) (undo-tree-id63918 . -10) (undo-tree-id63919 . -10) (undo-tree-id63920 . -10) (undo-tree-id63921 . -10) (undo-tree-id63922 . -10) (undo-tree-id63923 . -10) (undo-tree-id63924 . -10) (undo-tree-id63925 . -11) (undo-tree-id63926 . -11) (undo-tree-id63927 . -11) (undo-tree-id63928 . -11) (undo-tree-id63929 . -11) (undo-tree-id63930 . -11) (undo-tree-id63931 . -11) (undo-tree-id63932 . -11) (undo-tree-id63933 . -11) (undo-tree-id63934 . -11) (undo-tree-id63935 . -11) (undo-tree-id63936 . -11) (undo-tree-id63937 . -11) (undo-tree-id63938 . -11) (undo-tree-id63939 . -11) (undo-tree-id63940 . -11) (undo-tree-id63941 . -11) (undo-tree-id63942 . -11) (undo-tree-id63943 . -11) (undo-tree-id63944 . -11) (undo-tree-id63945 . -11) (undo-tree-id63946 . -11) (undo-tree-id63947 . -12) 11187) nil (25767 17072 499649 234000) 0 nil])
([nil nil ((11176 . 11177) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11176) (t 25767 17070 753704 264000)) nil (25767 17076 860741 649000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 11244) (undo-tree-id64296 . -1) (undo-tree-id64297 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11245) (undo-tree-id64298 . -1) 11176 (t 25767 17070 753704 264000)) ((11244 . 11246)) (25767 17072 499104 734000) 0 nil])
([nil nil ((11524 . 11695) (#("- (but you can change this by setting the filters argument). 

- When encoding words, it filters out a lot of characters, including most punctuation, line breaks, and tabs" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 47 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 61 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 61 62 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 62 63 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 65 96 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 96 97 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 11524) (undo-tree-id64309 . -171) (undo-tree-id64310 . -171) (undo-tree-id64311 . -171) (undo-tree-id64312 . -171) (undo-tree-id64313 . -171) (undo-tree-id64314 . -171) (undo-tree-id64315 . -171) (undo-tree-id64316 . -122) (undo-tree-id64317 . -122) (undo-tree-id64318 . -122) (undo-tree-id64319 . -122) (undo-tree-id64320 . -122) (undo-tree-id64321 . -122) (undo-tree-id64322 . -64) (undo-tree-id64323 . -64) (undo-tree-id64324 . -64) (undo-tree-id64325 . -64) (undo-tree-id64326 . -64) (undo-tree-id64327 . -64) (undo-tree-id64328 . -64) (undo-tree-id64329 . -64) (undo-tree-id64330 . -64) (undo-tree-id64331 . -64) (undo-tree-id64332 . -64) (undo-tree-id64333 . -65) (undo-tree-id64334 . -65) (undo-tree-id64335 . -65) (undo-tree-id64336 . -65) (undo-tree-id64337 . -65) (undo-tree-id64338 . -65) (undo-tree-id64339 . -65) (undo-tree-id64340 . -65) (undo-tree-id64341 . -65) (undo-tree-id64342 . -65) (undo-tree-id64343 . -65) (undo-tree-id64344 . -65) (undo-tree-id64345 . -65) (undo-tree-id64346 . -65) (undo-tree-id64347 . -65) (undo-tree-id64348 . -65) (undo-tree-id64349 . -65) (undo-tree-id64350 . -65) (undo-tree-id64351 . -65) (undo-tree-id64352 . -65) (undo-tree-id64353 . -65) (undo-tree-id64354 . -65) (undo-tree-id64355 . -65) (undo-tree-id64356 . -65) (undo-tree-id64357 . -65) (undo-tree-id64358 . -65) (undo-tree-id64359 . -65) (undo-tree-id64360 . -65) (undo-tree-id64361 . -65) (undo-tree-id64362 . -65) (undo-tree-id64363 . -65) (undo-tree-id64364 . -65) (undo-tree-id64365 . -65) (undo-tree-id64366 . -65) (undo-tree-id64367 . -65) (undo-tree-id64368 . -65) (undo-tree-id64369 . -65) (undo-tree-id64370 . -65) (undo-tree-id64371 . -65) (undo-tree-id64372 . -65) (undo-tree-id64373 . -65) (undo-tree-id64374 . -65) (undo-tree-id64375 . -65) (undo-tree-id64376 . -65) (undo-tree-id64377 . -65) (undo-tree-id64378 . -65) (undo-tree-id64379 . -122) (undo-tree-id64380 . -122) (undo-tree-id64381 . -122) (undo-tree-id64382 . -122) (undo-tree-id64383 . -122) (undo-tree-id64384 . -122) (undo-tree-id64385 . -122) (undo-tree-id64386 . -122) (undo-tree-id64387 . -122) (undo-tree-id64388 . -122) (undo-tree-id64389 . -122) (undo-tree-id64390 . -122) (undo-tree-id64391 . -122) (undo-tree-id64392 . -122) (undo-tree-id64393 . -122) (undo-tree-id64394 . -122) (undo-tree-id64395 . -122) (undo-tree-id64396 . -122) (undo-tree-id64397 . -122) (undo-tree-id64398 . -122) (undo-tree-id64399 . -122) (undo-tree-id64400 . -122) (undo-tree-id64401 . -122) (undo-tree-id64402 . -122) (undo-tree-id64403 . -122) (undo-tree-id64404 . -122) (undo-tree-id64405 . -122) (undo-tree-id64406 . -122) (undo-tree-id64407 . -122) (undo-tree-id64408 . -122) (undo-tree-id64409 . -122) (undo-tree-id64410 . -122) (undo-tree-id64411 . -122) (undo-tree-id64412 . -122) (undo-tree-id64413 . -122) (undo-tree-id64414 . -122) (undo-tree-id64415 . -122) (undo-tree-id64416 . -122) (undo-tree-id64417 . -122) (undo-tree-id64418 . -122) (undo-tree-id64419 . -122) (undo-tree-id64420 . -122) (undo-tree-id64421 . -122) (undo-tree-id64422 . -122) (undo-tree-id64423 . -122) (undo-tree-id64424 . -122) (undo-tree-id64425 . -122) (undo-tree-id64426 . -122) (undo-tree-id64427 . -122) (undo-tree-id64428 . -122) (undo-tree-id64429 . -122) (undo-tree-id64430 . -122) (undo-tree-id64431 . -122) (undo-tree-id64432 . -122) (undo-tree-id64433 . -122) (undo-tree-id64434 . -122) (undo-tree-id64435 . -122) (undo-tree-id64436 . -122) (undo-tree-id64437 . -122) (undo-tree-id64438 . -122) (undo-tree-id64439 . -122) (undo-tree-id64440 . -122) (undo-tree-id64441 . -122) (undo-tree-id64442 . -122) (undo-tree-id64443 . -122) (undo-tree-id64444 . -122) (undo-tree-id64445 . -122) (undo-tree-id64446 . -122) (undo-tree-id64447 . -122) (undo-tree-id64448 . -122) (undo-tree-id64449 . -122) (undo-tree-id64450 . -122) (undo-tree-id64451 . -122) (undo-tree-id64452 . -122) (undo-tree-id64453 . -122) (undo-tree-id64454 . -122) (undo-tree-id64455 . -122) (undo-tree-id64456 . -122) (undo-tree-id64457 . -122) (undo-tree-id64458 . -122) (undo-tree-id64459 . -122) (undo-tree-id64460 . -171) (undo-tree-id64461 . -171) (undo-tree-id64462 . -171) (undo-tree-id64463 . -171) (undo-tree-id64464 . -171) (undo-tree-id64465 . -171) (undo-tree-id64466 . -171) (undo-tree-id64467 . -171) (undo-tree-id64468 . -171) (undo-tree-id64469 . -171) (undo-tree-id64470 . -171) (undo-tree-id64471 . -171) (undo-tree-id64472 . -171) (undo-tree-id64473 . -171) (undo-tree-id64474 . -171) (undo-tree-id64475 . -171) (undo-tree-id64476 . -171) (undo-tree-id64477 . -171) (undo-tree-id64478 . -171) (undo-tree-id64479 . -171) (undo-tree-id64480 . -171) (undo-tree-id64481 . -171) (undo-tree-id64482 . -171) (undo-tree-id64483 . -171) (undo-tree-id64484 . -171) (undo-tree-id64485 . -171) (undo-tree-id64486 . -171) (undo-tree-id64487 . -171) (undo-tree-id64488 . -171) (undo-tree-id64489 . -171) (undo-tree-id64490 . -171) (undo-tree-id64491 . -171) (undo-tree-id64492 . -171) (undo-tree-id64493 . -171) (undo-tree-id64494 . -171) (undo-tree-id64495 . -171) (undo-tree-id64496 . -171) (undo-tree-id64497 . -63) (11524 . 11587) (#(" (but you can change this by setting the filters argument). " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 46 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11632) (undo-tree-id64498 . -1) (undo-tree-id64499 . -14) (undo-tree-id64500 . -14) (undo-tree-id64501 . -14) (undo-tree-id64502 . -14) (undo-tree-id64503 . -14) (undo-tree-id64504 . -14) (undo-tree-id64505 . -1) (undo-tree-id64506 . -1) (undo-tree-id64507 . -1) (undo-tree-id64508 . -1) (undo-tree-id64509 . -1) (undo-tree-id64510 . 59) (undo-tree-id64511 . -2) (undo-tree-id64512 . 3) (undo-tree-id64513 . -58) (undo-tree-id64514 . -1) (undo-tree-id64515 . -1) (undo-tree-id64516 . -1) (undo-tree-id64517 . -1) (undo-tree-id64518 . -1) (undo-tree-id64519 . -1) (undo-tree-id64520 . -1) (undo-tree-id64521 . -1) (undo-tree-id64522 . -1) (undo-tree-id64523 . -1) (undo-tree-id64524 . -1) (undo-tree-id64525 . -1) (undo-tree-id64526 . -1) (undo-tree-id64527 . -1) (undo-tree-id64528 . -1) (undo-tree-id64529 . -1) (undo-tree-id64530 . -1) (undo-tree-id64531 . -1) (undo-tree-id64532 . -1) (undo-tree-id64533 . -1) (undo-tree-id64534 . -1) (undo-tree-id64535 . -1) (undo-tree-id64536 . -1) (undo-tree-id64537 . -1) (undo-tree-id64538 . -1) (undo-tree-id64539 . -1) (undo-tree-id64540 . -1) (undo-tree-id64541 . -1) (undo-tree-id64542 . -1) (undo-tree-id64543 . -1) 11633 (t 25767 17076 929787 600000)) nil (25767 17152 93746 6000) 0 nil])
nil
([nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11636) (undo-tree-id64304 . 1) (undo-tree-id64305 . 1) (undo-tree-id64306 . -1) (undo-tree-id64307 . -1) (undo-tree-id64308 . -1)) nil (25767 17152 91857 857000) 0 nil])
([nil nil ((#(")" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11691) (undo-tree-id64299 . -1) (undo-tree-id64300 . 1) (undo-tree-id64301 . -1) (undo-tree-id64302 . -1) (undo-tree-id64303 . -1)) nil (25767 17152 91850 603000) 0 nil])
([nil nil ((#("but you" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11636) (undo-tree-id64544 . -6) (undo-tree-id64545 . -6) (undo-tree-id64546 . 7) (undo-tree-id64547 . -6) (undo-tree-id64548 . -7) (undo-tree-id64549 . -6) (undo-tree-id64550 . -2) (undo-tree-id64551 . -2) (undo-tree-id64552 . -2) (undo-tree-id64553 . -2) (undo-tree-id64554 . -2) (undo-tree-id64555 . -2) (undo-tree-id64556 . -6) (undo-tree-id64557 . -6) (undo-tree-id64558 . -6) (undo-tree-id64559 . -6) (undo-tree-id64560 . -6) (undo-tree-id64561 . -6) (undo-tree-id64562 . -6) (undo-tree-id64563 . -7) 11642 (t 25767 17152 162813 165000)) nil (25767 17157 771530 282000) 0 nil])
([nil nil ((11637 . 11638) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11637)) nil (25767 17157 771504 759000) 0 nil])
([nil nil ((#("Most importantly, it uses " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 15 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11690) (undo-tree-id64577 . -25) (undo-tree-id64578 . -25) (undo-tree-id64579 . -25) (undo-tree-id64580 . -26) (undo-tree-id64581 . -25) (undo-tree-id64582 . -3) (undo-tree-id64583 . -3) (undo-tree-id64584 . -3) (undo-tree-id64585 . -3) (undo-tree-id64586 . -3) (undo-tree-id64587 . -3) (undo-tree-id64588 . -15) (undo-tree-id64589 . -15) (undo-tree-id64590 . -15) (undo-tree-id64591 . -15) (undo-tree-id64592 . -15) (undo-tree-id64593 . -15) (undo-tree-id64594 . -16) (undo-tree-id64595 . -16) (undo-tree-id64596 . -16) (undo-tree-id64597 . -16) (undo-tree-id64598 . -16) (undo-tree-id64599 . -16) (undo-tree-id64600 . -19) (undo-tree-id64601 . -19) (undo-tree-id64602 . -19) (undo-tree-id64603 . -19) (undo-tree-id64604 . -19) (undo-tree-id64605 . -19) (undo-tree-id64606 . -24) (undo-tree-id64607 . -24) (undo-tree-id64608 . -24) (undo-tree-id64609 . -24) (undo-tree-id64610 . -24) (undo-tree-id64611 . -24) (undo-tree-id64612 . -25) (undo-tree-id64613 . -25) (undo-tree-id64614 . -25) (undo-tree-id64615 . -25) (undo-tree-id64616 . -25) (undo-tree-id64617 . -25) (undo-tree-id64618 . -25) (undo-tree-id64619 . -26) 11715 (t 25767 17157 878891 831000)) nil (25767 17184 166221 0) 0 nil])
([nil nil ((11690 . 11691) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11690)) nil (25767 17184 166188 978000) 0 nil])
([nil nil ((11702 . 11705) (#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -11702) (undo-tree-id64574 . -1) (undo-tree-id64575 . -1) (undo-tree-id64576 . -1) 11703 (11696 . 11703)) nil (25767 17184 166186 978000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -11736) (undo-tree-id64564 . -2) (undo-tree-id64565 . -2) (undo-tree-id64566 . -2) (undo-tree-id64567 . -2) (undo-tree-id64568 . -2) (undo-tree-id64569 . -2) (undo-tree-id64570 . -2) (undo-tree-id64571 . -2) (undo-tree-id64572 . -2) (undo-tree-id64573 . -2) 11738 (11735 . 11738) 11704) nil (25767 17184 166179 686000) 0 nil])
([nil nil ((#("  that use spaces between words. " 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 17 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 18 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11784) (undo-tree-id64620 . -32) (undo-tree-id64621 . -33) (undo-tree-id64622 . -33) (undo-tree-id64623 . -33) (t 25767 17184 239255 864000)) nil (25767 17190 465026 305000) 0 nil])
([nil nil ((11784 . 11785) (t 25767 17190 535343 111000)) nil (25767 17193 486097 149000) 0 nil])
([nil nil ((11785 . 11788) (t 25767 17193 603385 666000)) nil (25767 17234 740655 287000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13706 . 13707) (nil fontified nil 13637 . 13707) (nil fontified nil 13565 . 13637) (nil fontified nil 13492 . 13565) (nil fontified nil 13425 . 13492) (nil fontified nil 13353 . 13425) (nil fontified nil 13289 . 13353) (nil fontified nil 13214 . 13289) (nil fontified nil 13141 . 13214) (nil fontified nil 13066 . 13141) (nil fontified nil 12989 . 13066) (nil fontified nil 12921 . 12989) (nil fontified nil 12862 . 12921) (nil fontified nil 12858 . 12862) (nil fontified nil 12834 . 12858) (nil fontified nil 12830 . 12834) (nil fontified nil 12768 . 12830) (nil fontified nil 12699 . 12768) (nil fontified nil 12645 . 12699) (nil fontified nil 12616 . 12645) (nil fontified nil 12541 . 12616) (nil fontified nil 12470 . 12541) (nil fontified nil 12401 . 12470) (nil fontified nil 12332 . 12401) (nil fontified nil 12262 . 12332) (nil fontified nil 12187 . 12262) (nil fontified nil 12112 . 12187) (nil fontified nil 12038 . 12112) (nil fontified nil 11992 . 12038) (nil fontified nil 11972 . 11992) (nil fontified nil 11940 . 11972) (nil fontified nil 11897 . 11940) (nil fontified nil 11858 . 11897) (nil fontified nil 11788 . 11858) (11788 . 13707)) nil (25767 17234 740652 740000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id64624 . -1) (undo-tree-id64625 . -1) (undo-tree-id64626 . -1) (undo-tree-id64627 . -1) (undo-tree-id64628 . -1) (undo-tree-id64629 . -1) (undo-tree-id64630 . -1) (undo-tree-id64631 . -1) (undo-tree-id64632 . -1) (undo-tree-id64633 . -1) (undo-tree-id64634 . -1) (undo-tree-id64635 . -1) (undo-tree-id64636 . -1) (undo-tree-id64637 . -1) (undo-tree-id64638 . -1) (undo-tree-id64639 . -1) (undo-tree-id64640 . -1) (undo-tree-id64641 . -1) (undo-tree-id64642 . -1) (undo-tree-id64643 . -1) (undo-tree-id64644 . -1) (undo-tree-id64645 . -1) (undo-tree-id64646 . -1) (undo-tree-id64647 . -1) (undo-tree-id64648 . -1)) nil (25767 17234 740643 856000) 0 nil])
([nil nil ((13707 . 13709) (t 25767 17234 811959 782000)) nil (25767 17255 266469 689000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15656 . 15657) (nil fontified nil 15593 . 15657) (nil fontified nil 15548 . 15593) (nil fontified nil 15514 . 15548) (nil fontified nil 15468 . 15514) (nil fontified nil 15421 . 15468) (nil fontified nil 15405 . 15421) (nil fontified nil 15342 . 15405) (nil fontified nil 15307 . 15342) (nil fontified nil 15259 . 15307) (nil fontified nil 15191 . 15259) (nil fontified nil 15114 . 15191) (nil fontified nil 15043 . 15114) (nil fontified nil 14970 . 15043) (nil fontified nil 14896 . 14970) (nil fontified nil 14828 . 14896) (nil fontified nil 14760 . 14828) (nil fontified nil 14691 . 14760) (nil fontified nil 14618 . 14691) (nil fontified nil 14545 . 14618) (nil fontified nil 14489 . 14545) (nil fontified nil 14418 . 14489) (nil fontified nil 14351 . 14418) (nil fontified nil 14275 . 14351) (nil fontified nil 14202 . 14275) (nil fontified nil 14126 . 14202) (nil fontified nil 14051 . 14126) (nil fontified nil 13978 . 14051) (nil fontified nil 13905 . 13978) (nil fontified nil 13837 . 13905) (nil fontified nil 13781 . 13837) (nil fontified nil 13709 . 13781) (13709 . 15657)) nil (25767 17255 266463 131000) 0 nil])
([nil nil ((16169 . 16171) (t 25767 17255 388248 131000)) nil (25767 17313 1668 638000) 0 nil])
([nil nil ((nil rear-nonsticky nil 17855 . 17856) (nil fontified nil 17794 . 17856) (nil fontified nil 17769 . 17794) (nil fontified nil 17750 . 17769) (nil fontified nil 17695 . 17750) (nil fontified nil 17629 . 17695) (nil fontified nil 17560 . 17629) (nil fontified nil 17507 . 17560) (nil fontified nil 17474 . 17507) (nil fontified nil 17431 . 17474) (nil fontified nil 17391 . 17431) (nil fontified nil 17368 . 17391) (nil fontified nil 17299 . 17368) (nil fontified nil 17276 . 17299) (nil fontified nil 17244 . 17276) (nil fontified nil 17187 . 17244) (nil fontified nil 17114 . 17187) (nil fontified nil 17039 . 17114) (nil fontified nil 16986 . 17039) (nil fontified nil 16916 . 16986) (nil fontified nil 16841 . 16916) (nil fontified nil 16772 . 16841) (nil fontified nil 16703 . 16772) (nil fontified nil 16629 . 16703) (nil fontified nil 16554 . 16629) (nil fontified nil 16479 . 16554) (nil fontified nil 16408 . 16479) (nil fontified nil 16330 . 16408) (nil fontified nil 16272 . 16330) (nil fontified nil 16236 . 16272) (nil fontified nil 16171 . 16236) (16171 . 17856)) nil (25767 17313 1666 875000) 0 nil])
([nil nil ((17856 . 17859)) nil (25767 17313 1662 622000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19433 . 19434) (nil fontified nil 19428 . 19434) (nil fontified nil 19354 . 19428) (nil fontified nil 19290 . 19354) (nil fontified nil 19221 . 19290) (nil fontified nil 19148 . 19221) (nil fontified nil 19085 . 19148) (nil fontified nil 19007 . 19085) (nil fontified nil 18928 . 19007) (nil fontified nil 18882 . 18928) (nil fontified nil 18801 . 18882) (nil fontified nil 18797 . 18801) (nil fontified nil 18777 . 18797) (nil fontified nil 18702 . 18777) (nil fontified nil 18629 . 18702) (nil fontified nil 18554 . 18629) (nil fontified nil 18544 . 18554) (nil fontified nil 18540 . 18544) (nil fontified nil 18536 . 18540) (nil fontified nil 18532 . 18536) (nil fontified nil 18485 . 18532) (nil fontified nil 18411 . 18485) (nil fontified nil 18349 . 18411) (nil fontified nil 18280 . 18349) (nil fontified nil 18257 . 18280) (nil fontified nil 18191 . 18257) (nil fontified nil 18128 . 18191) (nil fontified nil 18086 . 18128) (nil fontified nil 18077 . 18086) (nil fontified nil 18009 . 18077) (nil fontified nil 17932 . 18009) (nil fontified nil 17859 . 17932) (17859 . 19434)) nil (25767 17313 1660 911000) 0 nil])
([nil nil ((19434 . 19436)) nil (25767 17313 1655 895000) 0 nil])
([nil nil ((19434 . 19437)) nil (25767 17313 1654 566000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20990 . 20991) (nil fontified nil 20916 . 20991) (nil fontified nil 20844 . 20916) (nil fontified nil 20771 . 20844) (nil fontified nil 20701 . 20771) (nil fontified nil 20624 . 20701) (nil fontified nil 20549 . 20624) (nil fontified nil 20532 . 20549) (nil fontified nil 20462 . 20532) (nil fontified nil 20390 . 20462) (nil fontified nil 20316 . 20390) (nil fontified nil 20246 . 20316) (nil fontified nil 20182 . 20246) (nil fontified nil 20113 . 20182) (nil fontified nil 20041 . 20113) (nil fontified nil 20000 . 20041) (nil fontified nil 19978 . 20000) (nil fontified nil 19918 . 19978) (nil fontified nil 19915 . 19918) (nil fontified nil 19871 . 19915) (nil fontified nil 19848 . 19871) (nil fontified nil 19802 . 19848) (nil fontified nil 19781 . 19802) (nil fontified nil 19716 . 19781) (nil fontified nil 19682 . 19716) (nil fontified nil 19665 . 19682) (nil fontified nil 19619 . 19665) (nil fontified nil 19567 . 19619) (nil fontified nil 19511 . 19567) (nil fontified nil 19473 . 19511) (nil fontified nil 19437 . 19473) (19437 . 20991)) nil (25767 17331 77181 282000) 0 nil])
([nil nil ((#("amount of time, but challenging enough to be fun and rewarding. Keras
provides a simple function to load it:
>>> (X_train, y_train), (X_test, y_test) =
keras.datasets.imdb.load_data()
>>> X_train[0][:10]
[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65]
Where are the movie reviews? Well, as you can see, the dataset is already
preprocessed for you: X_train consists of a list of reviews, each of which
is represented as a NumPy array of integers, where each integer represents
a word. All punctuation was removed, and then words were converted to
lowercase, split by spaces, and finally indexed by frequency (so low
integers correspond to frequent words). The integers 0, 1, and 2 are
special: they represent the padding token, the start-of-sequence (SSS)
token, and unknown words, respectively. If you want to visualize a review,
you can decode it like this:
>>> word_index = keras.datasets.imdb.get_word_index()
>>> id_to_word = {id_ + 3: word for word, id_ in word_index.items()}
>>> for id_, token in enumerate((\"<pad>\", \"<sos>\", \"<unk>\")):
...
id_to_word[id_] = token
...
>>> \" \".join([id_to_word[id_] for id_ in X_train[0][:10]])
'<sos> this film was just brilliant casting location scenery story'
In a real project, you will have to preprocess the text yourself. You can do
that using the same Tokenizer class we used earlier, but this time setting
char_level=False (which is the default). When encoding words, it filters
out a lot of characters, including most punctuation, line breaks, and tabs
(but you can change this by setting the filters argument). Most
importantly, it uses spaces to identify word boundaries. This is OK for
English and many other scripts (written languages) that use spaces
between words, but not all scripts use spaces this way. Chinese does not
use spaces between words, Vietnamese uses spaces even within words, and
languages such as German often attach multiple words together, without


" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 70 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 71 109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 109 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 110 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 115 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 116 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 121 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 124 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 125 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 130 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 135 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 136 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 140 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 143 144 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 144 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 148 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 152 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 153 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 176 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 177 181 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 181 184 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 184 189 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 189 190 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 190 195 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 195 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 204 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 250 324 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 324 347 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 347 348 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 348 353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 353 399 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 399 474 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 474 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 500 544 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 544 613 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 613 682 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 682 753 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 753 828 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 828 857 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 857 865 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 865 866 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 866 871 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 871 897 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 897 898 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 898 902 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 902 903 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 903 908 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 908 911 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 911 917 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 917 918 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 918 920 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 920 921 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 921 925 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 925 964 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 964 965 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 965 976 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 976 980 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 980 1042 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1042 1044 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1044 1046 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1046 1048 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1048 1049 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 1049 1051 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1051 1052 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 1052 1056 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1056 1070 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1070 1074 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1074 1090 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1090 1091 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 1091 1093 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1093 1094 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 1094 1098 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1098 1116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1116 1117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 1117 1122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1122 1133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1133 1201 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1201 1278 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1278 1353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1353 1357 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1357 1358 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 1358 1363 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 1363 1426 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1426 1501 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1501 1546 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1546 1565 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1565 1637 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1637 1704 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1704 1777 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1777 1849 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1849 1918 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1918 1919 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 1919 1920 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1920 1921 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1921 1922 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id66982 . -1921) (undo-tree-id66983 . -1921) (undo-tree-id66984 . -1042) (undo-tree-id66985 . -1921) (undo-tree-id66986 . -64) (undo-tree-id66987 . -64) (undo-tree-id66988 . -64) (undo-tree-id66989 . -64) (undo-tree-id66990 . -64) (undo-tree-id66991 . -64) (undo-tree-id66992 . -70) (undo-tree-id66993 . -70) (undo-tree-id66994 . -70) (undo-tree-id66995 . -70) (undo-tree-id66996 . -70) (undo-tree-id66997 . -70) (undo-tree-id66998 . -109) (undo-tree-id66999 . -109) (undo-tree-id67000 . -109) (undo-tree-id67001 . -109) (undo-tree-id67002 . -109) (undo-tree-id67003 . -109) (undo-tree-id67004 . -152) (undo-tree-id67005 . -152) (undo-tree-id67006 . -152) (undo-tree-id67007 . -152) (undo-tree-id67008 . -152) (undo-tree-id67009 . -152) (undo-tree-id67010 . -152) (undo-tree-id67011 . -152) (undo-tree-id67012 . -152) (undo-tree-id67013 . -152) (undo-tree-id67014 . -152) (undo-tree-id67015 . -152) (undo-tree-id67016 . -109) (undo-tree-id67017 . -109) (undo-tree-id67018 . -109) (undo-tree-id67019 . -109) (undo-tree-id67020 . -109) (undo-tree-id67021 . -109) (undo-tree-id67022 . -109) (undo-tree-id67023 . -109) (undo-tree-id67024 . -109) (undo-tree-id67025 . -109) (undo-tree-id67026 . -109) (undo-tree-id67027 . -70) (undo-tree-id67028 . -70) (undo-tree-id67029 . -70) (undo-tree-id67030 . -70) (undo-tree-id67031 . -70) (undo-tree-id67032 . -70) (undo-tree-id67033 . -70) (undo-tree-id67034 . -70) (undo-tree-id67035 . -70) (undo-tree-id67036 . -70) (undo-tree-id67037 . -70) (undo-tree-id67038 . -64) (undo-tree-id67039 . -64) (undo-tree-id67040 . -64) (undo-tree-id67041 . -64) (undo-tree-id67042 . -64) (undo-tree-id67043 . -64) (undo-tree-id67044 . -64) (undo-tree-id67045 . -64) (undo-tree-id67046 . -64) (undo-tree-id67047 . -64) (undo-tree-id67048 . -64) (undo-tree-id67049 . 1770) (undo-tree-id67050 . -157) (undo-tree-id67051 . -59) (undo-tree-id67052 . -59) (undo-tree-id67053 . -59) (undo-tree-id67054 . -59) (undo-tree-id67055 . -59) (undo-tree-id67056 . -59) (undo-tree-id67057 . -59) (undo-tree-id67058 . -59) (undo-tree-id67059 . -59) (undo-tree-id67060 . -59) (undo-tree-id67061 . -59) (undo-tree-id67062 . -59) (undo-tree-id67063 . -59) (undo-tree-id67064 . -59) (undo-tree-id67065 . -59) (undo-tree-id67066 . -59) (undo-tree-id67067 . -59) (undo-tree-id67068 . -59) (undo-tree-id67069 . -59) (undo-tree-id67070 . -59) (undo-tree-id67071 . -59) (undo-tree-id67072 . -59) (undo-tree-id67073 . -59) (undo-tree-id67074 . -59) (undo-tree-id67075 . -59) (undo-tree-id67076 . -59) (undo-tree-id67077 . -59) (undo-tree-id67078 . -59) (undo-tree-id67079 . -59) (undo-tree-id67080 . -59) (undo-tree-id67081 . -59) (undo-tree-id67082 . -59) (undo-tree-id67083 . -59) (undo-tree-id67084 . -59) (undo-tree-id67085 . -59) (undo-tree-id67086 . -59) (undo-tree-id67087 . -59) (undo-tree-id67088 . -64) (undo-tree-id67089 . -64) (undo-tree-id67090 . -64) (undo-tree-id67091 . -64) (undo-tree-id67092 . -64) (undo-tree-id67093 . -64) (undo-tree-id67094 . -64) (undo-tree-id67095 . -64) (undo-tree-id67096 . -64) (undo-tree-id67097 . -64) (undo-tree-id67098 . -64) (undo-tree-id67099 . -64) (undo-tree-id67100 . -64) (undo-tree-id67101 . -64) (undo-tree-id67102 . -64) (undo-tree-id67103 . -64) (undo-tree-id67104 . -64) (undo-tree-id67105 . -64) (undo-tree-id67106 . -64) (undo-tree-id67107 . -64) (undo-tree-id67108 . -64) (undo-tree-id67109 . -70) (undo-tree-id67110 . -70) (undo-tree-id67111 . -70) (undo-tree-id67112 . -70) (undo-tree-id67113 . -70) (undo-tree-id67114 . -70) (undo-tree-id67115 . -109) (undo-tree-id67116 . -109) (undo-tree-id67117 . -109) (undo-tree-id67118 . -109) (undo-tree-id67119 . -109) (undo-tree-id67120 . -109) (undo-tree-id67121 . -152) (undo-tree-id67122 . -152) (undo-tree-id67123 . -152) (undo-tree-id67124 . -152) (undo-tree-id67125 . -152) (undo-tree-id67126 . -152) (undo-tree-id67127 . -184) (undo-tree-id67128 . -184) (undo-tree-id67129 . -184) (undo-tree-id67130 . -184) (undo-tree-id67131 . -184) (undo-tree-id67132 . -184) (undo-tree-id67133 . -204) (undo-tree-id67134 . -204) (undo-tree-id67135 . -204) (undo-tree-id67136 . -204) (undo-tree-id67137 . -204) (undo-tree-id67138 . -204) (undo-tree-id67139 . -250) (undo-tree-id67140 . -250) (undo-tree-id67141 . -250) (undo-tree-id67142 . -250) (undo-tree-id67143 . -250) (undo-tree-id67144 . -250) (undo-tree-id67145 . -316) (undo-tree-id67146 . -316) (undo-tree-id67147 . -316) (undo-tree-id67148 . -316) (undo-tree-id67149 . -316) (undo-tree-id67150 . -316) (undo-tree-id67151 . -324) (undo-tree-id67152 . -324) (undo-tree-id67153 . -324) (undo-tree-id67154 . -324) (undo-tree-id67155 . -324) (undo-tree-id67156 . -324) (undo-tree-id67157 . -324) (undo-tree-id67158 . -324) (undo-tree-id67159 . -393) (undo-tree-id67160 . -393) (undo-tree-id67161 . -393) (undo-tree-id67162 . -393) (undo-tree-id67163 . -393) (undo-tree-id67164 . -393) (undo-tree-id67165 . -393) (undo-tree-id67166 . -393) (undo-tree-id67167 . -393) (undo-tree-id67168 . -393) (undo-tree-id67169 . -393) (undo-tree-id67170 . -393) (undo-tree-id67171 . -393) (undo-tree-id67172 . -393) (undo-tree-id67173 . -393) (undo-tree-id67174 . -393) (undo-tree-id67175 . -393) (undo-tree-id67176 . -393) (undo-tree-id67177 . -393) (undo-tree-id67178 . -393) (undo-tree-id67179 . -393) (undo-tree-id67180 . -393) (undo-tree-id67181 . -393) (undo-tree-id67182 . -393) (undo-tree-id67183 . -393) (undo-tree-id67184 . -393) (undo-tree-id67185 . -393) (undo-tree-id67186 . -393) (undo-tree-id67187 . -393) (undo-tree-id67188 . -393) (undo-tree-id67189 . -393) (undo-tree-id67190 . -393) (undo-tree-id67191 . -393) (undo-tree-id67192 . -393) (undo-tree-id67193 . -393) (undo-tree-id67194 . -393) (undo-tree-id67195 . -393) (undo-tree-id67196 . -393) (undo-tree-id67197 . -393) (undo-tree-id67198 . -393) (undo-tree-id67199 . -393) (undo-tree-id67200 . -393) (undo-tree-id67201 . -393) (undo-tree-id67202 . -393) (undo-tree-id67203 . 1598) (undo-tree-id67204 . -336) (undo-tree-id67205 . -324) (undo-tree-id67206 . -324) (undo-tree-id67207 . -324) (undo-tree-id67208 . -324) (undo-tree-id67209 . -324) (undo-tree-id67210 . -324) (undo-tree-id67211 . -324) (undo-tree-id67212 . -324) (undo-tree-id67213 . -324) (undo-tree-id67214 . -324) (undo-tree-id67215 . -324) (undo-tree-id67216 . -324) (undo-tree-id67217 . -324) (undo-tree-id67218 . -324) (undo-tree-id67219 . -324) (undo-tree-id67220 . -324) (undo-tree-id67221 . -324) (undo-tree-id67222 . -324) (undo-tree-id67223 . -324) (undo-tree-id67224 . -324) (undo-tree-id67225 . -324) (undo-tree-id67226 . -316) (undo-tree-id67227 . -316) (undo-tree-id67228 . -316) (undo-tree-id67229 . -316) (undo-tree-id67230 . -316) (undo-tree-id67231 . -316) (undo-tree-id67232 . -250) (undo-tree-id67233 . -250) (undo-tree-id67234 . -250) (undo-tree-id67235 . -250) (undo-tree-id67236 . -250) (undo-tree-id67237 . -250) (undo-tree-id67238 . -204) (undo-tree-id67239 . -204) (undo-tree-id67240 . -204) (undo-tree-id67241 . -204) (undo-tree-id67242 . -204) (undo-tree-id67243 . -204) (undo-tree-id67244 . -184) (undo-tree-id67245 . -184) (undo-tree-id67246 . -184) (undo-tree-id67247 . -184) (undo-tree-id67248 . -184) (undo-tree-id67249 . -184) (undo-tree-id67250 . -152) (undo-tree-id67251 . -152) (undo-tree-id67252 . -152) (undo-tree-id67253 . -152) (undo-tree-id67254 . -152) (undo-tree-id67255 . -152) (undo-tree-id67256 . -109) (undo-tree-id67257 . -109) (undo-tree-id67258 . -109) (undo-tree-id67259 . -109) (undo-tree-id67260 . -109) (undo-tree-id67261 . -109) (undo-tree-id67262 . -70) (undo-tree-id67263 . -70) (undo-tree-id67264 . -70) (undo-tree-id67265 . -70) (undo-tree-id67266 . -70) (undo-tree-id67267 . -70) (undo-tree-id67268 . -64) (undo-tree-id67269 . -64) (undo-tree-id67270 . -64) (undo-tree-id67271 . -64) (undo-tree-id67272 . -64) (undo-tree-id67273 . -64) (undo-tree-id67274 . -64) (undo-tree-id67275 . -64) (undo-tree-id67276 . -64) (undo-tree-id67277 . -64) (undo-tree-id67278 . -64) (undo-tree-id67279 . -64) (undo-tree-id67280 . -64) (undo-tree-id67281 . -64) (undo-tree-id67282 . -64) (undo-tree-id67283 . -64) (undo-tree-id67284 . -64) (undo-tree-id67285 . -64) (undo-tree-id67286 . -64) (undo-tree-id67287 . -64) (undo-tree-id67288 . -64) (undo-tree-id67289 . -108) (undo-tree-id67290 . -108) (undo-tree-id67291 . -108) (undo-tree-id67292 . -108) (undo-tree-id67293 . -108) (undo-tree-id67294 . -108) (undo-tree-id67295 . -108) (undo-tree-id67296 . -108) (undo-tree-id67297 . -108) (undo-tree-id67298 . -108) (undo-tree-id67299 . -108) (undo-tree-id67300 . -108) (undo-tree-id67301 . -108) (undo-tree-id67302 . -108) (undo-tree-id67303 . -108) (undo-tree-id67304 . -108) (undo-tree-id67305 . -108) (undo-tree-id67306 . -108) (undo-tree-id67307 . -108) (undo-tree-id67308 . -108) (undo-tree-id67309 . -108) (undo-tree-id67310 . -108) (undo-tree-id67311 . -108) (undo-tree-id67312 . -108) (undo-tree-id67313 . -108) (undo-tree-id67314 . -108) (undo-tree-id67315 . -108) (undo-tree-id67316 . -108) (undo-tree-id67317 . -108) (undo-tree-id67318 . -108) (undo-tree-id67319 . -108) (undo-tree-id67320 . -108) (undo-tree-id67321 . -108) (undo-tree-id67322 . -108) (undo-tree-id67323 . -108) (undo-tree-id67324 . -108) (undo-tree-id67325 . -108) (undo-tree-id67326 . -108) (undo-tree-id67327 . -108) (undo-tree-id67328 . -108) (undo-tree-id67329 . -108) (undo-tree-id67330 . -108) (undo-tree-id67331 . -108) (undo-tree-id67332 . -108) (undo-tree-id67333 . -108) (undo-tree-id67334 . -108) (undo-tree-id67335 . -108) (undo-tree-id67336 . -108) (undo-tree-id67337 . -108) (undo-tree-id67338 . -108) (undo-tree-id67339 . -108) (undo-tree-id67340 . -108) (undo-tree-id67341 . -108) (undo-tree-id67342 . -108) (undo-tree-id67343 . -108) (undo-tree-id67344 . -108) (undo-tree-id67345 . -108) (undo-tree-id67346 . -69) (undo-tree-id67347 . -69) (undo-tree-id67348 . -69) (undo-tree-id67349 . -69) (undo-tree-id67350 . -69) (undo-tree-id67351 . -69) (undo-tree-id67352 . -69) (undo-tree-id67353 . -69) (undo-tree-id67354 . -69) (undo-tree-id67355 . -69) (undo-tree-id67356 . -69) (undo-tree-id67357 . -69) (undo-tree-id67358 . -69) (undo-tree-id67359 . -69) (undo-tree-id67360 . -69) (undo-tree-id67361 . -69) (undo-tree-id67362 . -38) (undo-tree-id67363 . -38) (undo-tree-id67364 . -38) (undo-tree-id67365 . -38) (undo-tree-id67366 . -38) (undo-tree-id67367 . -38) (undo-tree-id67368 . -38) (undo-tree-id67369 . -38) (undo-tree-id67370 . -38) (undo-tree-id67371 . -38) (undo-tree-id67372 . -38) (undo-tree-id67373 . -38) (undo-tree-id67374 . -38) (undo-tree-id67375 . -38) (undo-tree-id67376 . -38) (undo-tree-id67377 . -38) (undo-tree-id67378 . -38) (undo-tree-id67379 . -38) (undo-tree-id67380 . -38) (undo-tree-id67381 . -38) (undo-tree-id67382 . -38) (undo-tree-id67383 . -38) (undo-tree-id67384 . -38) (undo-tree-id67385 . -38) (undo-tree-id67386 . -38) (undo-tree-id67387 . -38) (undo-tree-id67388 . -38) (undo-tree-id67389 . -38) (undo-tree-id67390 . -38) (undo-tree-id67391 . -38) (undo-tree-id67392 . -38) (undo-tree-id67393 . -38) (undo-tree-id67394 . -38) (undo-tree-id67395 . -38) (undo-tree-id67396 . -38) (undo-tree-id67397 . -38) (undo-tree-id67398 . -38) (undo-tree-id67399 . -38) (undo-tree-id67400 . -38) (undo-tree-id67401 . -1922) (undo-tree-id67402 . -1921) (undo-tree-id67403 . 1858) (undo-tree-id67404 . -69) (undo-tree-id67405 . -64) (undo-tree-id67406 . -64) (undo-tree-id67407 . -64) (undo-tree-id67408 . -64) (undo-tree-id67409 . -64) (undo-tree-id67410 . -64) (undo-tree-id67411 . -64) (undo-tree-id67412 . -64) (undo-tree-id67413 . -64) (undo-tree-id67414 . -64) (undo-tree-id67415 . -64) (undo-tree-id67416 . -64) (undo-tree-id67417 . -64) (undo-tree-id67418 . -64) (undo-tree-id67419 . -64) (undo-tree-id67420 . -64) (undo-tree-id67421 . -64) (undo-tree-id67422 . -64) (undo-tree-id67423 . -64) (undo-tree-id67424 . -64) (undo-tree-id67425 . -64) (undo-tree-id67426 . -70) (undo-tree-id67427 . -70) (undo-tree-id67428 . -70) (undo-tree-id67429 . -70) (undo-tree-id67430 . -70) (undo-tree-id67431 . -70) (undo-tree-id67432 . -109) (undo-tree-id67433 . -109) (undo-tree-id67434 . -109) (undo-tree-id67435 . -109) (undo-tree-id67436 . -109) (undo-tree-id67437 . -109) (undo-tree-id67438 . -152) (undo-tree-id67439 . -152) (undo-tree-id67440 . -152) (undo-tree-id67441 . -152) (undo-tree-id67442 . -152) (undo-tree-id67443 . -152) (undo-tree-id67444 . -184) (undo-tree-id67445 . -184) (undo-tree-id67446 . -184) (undo-tree-id67447 . -184) (undo-tree-id67448 . -184) (undo-tree-id67449 . -184) (undo-tree-id67450 . -204) (undo-tree-id67451 . -204) (undo-tree-id67452 . -204) (undo-tree-id67453 . -204) (undo-tree-id67454 . -204) (undo-tree-id67455 . -204) (undo-tree-id67456 . -250) (undo-tree-id67457 . -250) (undo-tree-id67458 . -250) (undo-tree-id67459 . -250) (undo-tree-id67460 . -250) (undo-tree-id67461 . -250) (undo-tree-id67462 . -316) (undo-tree-id67463 . -316) (undo-tree-id67464 . -316) (undo-tree-id67465 . -316) (undo-tree-id67466 . -316) (undo-tree-id67467 . -316) (undo-tree-id67468 . -324) (undo-tree-id67469 . -324) (undo-tree-id67470 . -324) (undo-tree-id67471 . -324) (undo-tree-id67472 . -324) (undo-tree-id67473 . -324) (undo-tree-id67474 . -393) (undo-tree-id67475 . -393) (undo-tree-id67476 . -393) (undo-tree-id67477 . -393) (undo-tree-id67478 . -393) (undo-tree-id67479 . -393) (undo-tree-id67480 . -399) (undo-tree-id67481 . -399) (undo-tree-id67482 . -399) (undo-tree-id67483 . -399) (undo-tree-id67484 . -399) (undo-tree-id67485 . -399) (undo-tree-id67486 . -463) (undo-tree-id67487 . -463) (undo-tree-id67488 . -463) (undo-tree-id67489 . -463) (undo-tree-id67490 . -463) (undo-tree-id67491 . -463) (undo-tree-id67492 . -474) (undo-tree-id67493 . -474) (undo-tree-id67494 . -474) (undo-tree-id67495 . -474) (undo-tree-id67496 . -474) (undo-tree-id67497 . -474) (undo-tree-id67498 . -541) (undo-tree-id67499 . -541) (undo-tree-id67500 . -541) (undo-tree-id67501 . -541) (undo-tree-id67502 . -541) (undo-tree-id67503 . -541) (undo-tree-id67504 . -544) (undo-tree-id67505 . -544) (undo-tree-id67506 . -544) (undo-tree-id67507 . -544) (undo-tree-id67508 . -544) (undo-tree-id67509 . -544) (undo-tree-id67510 . -609) (undo-tree-id67511 . -609) (undo-tree-id67512 . -609) (undo-tree-id67513 . -609) (undo-tree-id67514 . -609) (undo-tree-id67515 . -609) (undo-tree-id67516 . -613) (undo-tree-id67517 . -613) (undo-tree-id67518 . -613) (undo-tree-id67519 . -613) (undo-tree-id67520 . -613) (undo-tree-id67521 . -613) (undo-tree-id67522 . -678) (undo-tree-id67523 . -678) (undo-tree-id67524 . -678) (undo-tree-id67525 . -678) (undo-tree-id67526 . -678) (undo-tree-id67527 . -678) (undo-tree-id67528 . -682) (undo-tree-id67529 . -682) (undo-tree-id67530 . -682) (undo-tree-id67531 . -682) (undo-tree-id67532 . -682) (undo-tree-id67533 . -682) (undo-tree-id67534 . -747) (undo-tree-id67535 . -747) (undo-tree-id67536 . -747) (undo-tree-id67537 . -747) (undo-tree-id67538 . -747) (undo-tree-id67539 . -747) (undo-tree-id67540 . -753) (undo-tree-id67541 . -753) (undo-tree-id67542 . -753) (undo-tree-id67543 . -753) (undo-tree-id67544 . -753) (undo-tree-id67545 . -753) (undo-tree-id67546 . -820) (undo-tree-id67547 . -820) (undo-tree-id67548 . -820) (undo-tree-id67549 . -820) (undo-tree-id67550 . -820) (undo-tree-id67551 . -820) (undo-tree-id67552 . -828) (undo-tree-id67553 . -828) (undo-tree-id67554 . -828) (undo-tree-id67555 . -828) (undo-tree-id67556 . -828) (undo-tree-id67557 . -828) (undo-tree-id67558 . -857) (undo-tree-id67559 . -857) (undo-tree-id67560 . -857) (undo-tree-id67561 . -857) (undo-tree-id67562 . -857) (undo-tree-id67563 . -857) (undo-tree-id67564 . -911) (undo-tree-id67565 . -911) (undo-tree-id67566 . -911) (undo-tree-id67567 . -911) (undo-tree-id67568 . -911) (undo-tree-id67569 . -911) (undo-tree-id67570 . -980) (undo-tree-id67571 . -980) (undo-tree-id67572 . -980) (undo-tree-id67573 . -980) (undo-tree-id67574 . -980) (undo-tree-id67575 . -980) (undo-tree-id67576 . -1042) (undo-tree-id67577 . -1042) (undo-tree-id67578 . -1042) (undo-tree-id67579 . -1042) (undo-tree-id67580 . -1042) (undo-tree-id67581 . -1042) (undo-tree-id67582 . -1046) (undo-tree-id67583 . -1046) (undo-tree-id67584 . -1046) (undo-tree-id67585 . -1046) (undo-tree-id67586 . -1046) (undo-tree-id67587 . -1046) (undo-tree-id67588 . -1070) (undo-tree-id67589 . -1070) (undo-tree-id67590 . -1070) (undo-tree-id67591 . -1070) (undo-tree-id67592 . -1070) (undo-tree-id67593 . -1070) (undo-tree-id67594 . -1070) (undo-tree-id67595 . -1070) (undo-tree-id67596 . -1074) (undo-tree-id67597 . -1074) (undo-tree-id67598 . -1074) (undo-tree-id67599 . -1074) (undo-tree-id67600 . -1074) (undo-tree-id67601 . -1074) (undo-tree-id67602 . -1074) (undo-tree-id67603 . -1074) (undo-tree-id67604 . -1074) (undo-tree-id67605 . -1074) (undo-tree-id67606 . -1074) (undo-tree-id67607 . -1133) (undo-tree-id67608 . -1133) (undo-tree-id67609 . -1133) (undo-tree-id67610 . -1133) (undo-tree-id67611 . -1133) (undo-tree-id67612 . -1133) (undo-tree-id67613 . -1133) (undo-tree-id67614 . -1133) (undo-tree-id67615 . -1133) (undo-tree-id67616 . -1133) (undo-tree-id67617 . -1133) (undo-tree-id67618 . -1201) (undo-tree-id67619 . -1201) (undo-tree-id67620 . -1201) (undo-tree-id67621 . -1201) (undo-tree-id67622 . -1201) (undo-tree-id67623 . -1201) (undo-tree-id67624 . -1201) (undo-tree-id67625 . -1201) (undo-tree-id67626 . -1201) (undo-tree-id67627 . -1201) (undo-tree-id67628 . -1201) (undo-tree-id67629 . -1201) (undo-tree-id67630 . -1201) (undo-tree-id67631 . -1201) (undo-tree-id67632 . -1201) (undo-tree-id67633 . -1201) (undo-tree-id67634 . -1267) (undo-tree-id67635 . -1267) (undo-tree-id67636 . -1267) (undo-tree-id67637 . -1267) (undo-tree-id67638 . -1267) (undo-tree-id67639 . -1267) (undo-tree-id67640 . -1267) (undo-tree-id67641 . -1267) (undo-tree-id67642 . -1267) (undo-tree-id67643 . -1267) (undo-tree-id67644 . -1267) (undo-tree-id67645 . -1267) (undo-tree-id67646 . -1267) (undo-tree-id67647 . -1267) (undo-tree-id67648 . -1267) (undo-tree-id67649 . -1267) (undo-tree-id67650 . -1278) (undo-tree-id67651 . -1278) (undo-tree-id67652 . -1278) (undo-tree-id67653 . -1278) (undo-tree-id67654 . -1278) (undo-tree-id67655 . -1278) (undo-tree-id67656 . -1278) (undo-tree-id67657 . -1278) (undo-tree-id67658 . -1278) (undo-tree-id67659 . -1278) (undo-tree-id67660 . -1278) (undo-tree-id67661 . -1278) (undo-tree-id67662 . -1278) (undo-tree-id67663 . -1278) (undo-tree-id67664 . -1278) (undo-tree-id67665 . -1278) (undo-tree-id67666 . -1345) (undo-tree-id67667 . -1345) (undo-tree-id67668 . -1345) (undo-tree-id67669 . -1345) (undo-tree-id67670 . -1345) (undo-tree-id67671 . -1345) (undo-tree-id67672 . -1345) (undo-tree-id67673 . -1345) (undo-tree-id67674 . -1345) (undo-tree-id67675 . -1345) (undo-tree-id67676 . -1345) (undo-tree-id67677 . -1345) (undo-tree-id67678 . -1345) (undo-tree-id67679 . -1345) (undo-tree-id67680 . -1345) (undo-tree-id67681 . -1345) (undo-tree-id67682 . -1353) (undo-tree-id67683 . -1353) (undo-tree-id67684 . -1353) (undo-tree-id67685 . -1353) (undo-tree-id67686 . -1353) (undo-tree-id67687 . -1353) (undo-tree-id67688 . -1353) (undo-tree-id67689 . -1353) (undo-tree-id67690 . -1353) (undo-tree-id67691 . -1353) (undo-tree-id67692 . -1353) (undo-tree-id67693 . -1353) (undo-tree-id67694 . -1353) (undo-tree-id67695 . -1353) (undo-tree-id67696 . -1353) (undo-tree-id67697 . -1353) (undo-tree-id67698 . -1353) (undo-tree-id67699 . -1353) (undo-tree-id67700 . -1353) (undo-tree-id67701 . -1353) (undo-tree-id67702 . -1353) (undo-tree-id67703 . -1418) (undo-tree-id67704 . -1418) (undo-tree-id67705 . -1418) (undo-tree-id67706 . -1418) (undo-tree-id67707 . -1418) (undo-tree-id67708 . -1418) (undo-tree-id67709 . -1418) (undo-tree-id67710 . -1418) (undo-tree-id67711 . -1418) (undo-tree-id67712 . -1418) (undo-tree-id67713 . -1418) (undo-tree-id67714 . -1418) (undo-tree-id67715 . -1418) (undo-tree-id67716 . -1418) (undo-tree-id67717 . -1418) (undo-tree-id67718 . -1418) (undo-tree-id67719 . -1426) (undo-tree-id67720 . -1426) (undo-tree-id67721 . -1426) (undo-tree-id67722 . -1426) (undo-tree-id67723 . -1426) (undo-tree-id67724 . -1426) (undo-tree-id67725 . -1426) (undo-tree-id67726 . -1426) (undo-tree-id67727 . -1426) (undo-tree-id67728 . -1426) (undo-tree-id67729 . -1426) (undo-tree-id67730 . -1426) (undo-tree-id67731 . -1426) (undo-tree-id67732 . -1426) (undo-tree-id67733 . -1426) (undo-tree-id67734 . -1426) (undo-tree-id67735 . -1492) (undo-tree-id67736 . -1492) (undo-tree-id67737 . -1492) (undo-tree-id67738 . -1492) (undo-tree-id67739 . -1492) (undo-tree-id67740 . -1492) (undo-tree-id67741 . -1492) (undo-tree-id67742 . -1492) (undo-tree-id67743 . -1492) (undo-tree-id67744 . -1492) (undo-tree-id67745 . -1492) (undo-tree-id67746 . -1492) (undo-tree-id67747 . -1492) (undo-tree-id67748 . -1492) (undo-tree-id67749 . -1492) (undo-tree-id67750 . -1492) (undo-tree-id67751 . -1501) (undo-tree-id67752 . -1501) (undo-tree-id67753 . -1501) (undo-tree-id67754 . -1501) (undo-tree-id67755 . -1501) (undo-tree-id67756 . -1501) (undo-tree-id67757 . -1501) (undo-tree-id67758 . -1501) (undo-tree-id67759 . -1501) (undo-tree-id67760 . -1501) (undo-tree-id67761 . -1501) (undo-tree-id67762 . -1565) (undo-tree-id67763 . -1565) (undo-tree-id67764 . -1565) (undo-tree-id67765 . -1565) (undo-tree-id67766 . -1565) (undo-tree-id67767 . -1565) (undo-tree-id67768 . -1565) (undo-tree-id67769 . -1565) (undo-tree-id67770 . -1565) (undo-tree-id67771 . -1565) (undo-tree-id67772 . -1565) (undo-tree-id67773 . -1565) (undo-tree-id67774 . -1565) (undo-tree-id67775 . -1565) (undo-tree-id67776 . -1565) (undo-tree-id67777 . -1565) (undo-tree-id67778 . -1630) (undo-tree-id67779 . -1630) (undo-tree-id67780 . -1630) (undo-tree-id67781 . -1630) (undo-tree-id67782 . -1630) (undo-tree-id67783 . -1630) (undo-tree-id67784 . -1630) (undo-tree-id67785 . -1630) (undo-tree-id67786 . -1630) (undo-tree-id67787 . -1630) (undo-tree-id67788 . -1630) (undo-tree-id67789 . -1630) (undo-tree-id67790 . -1630) (undo-tree-id67791 . -1630) (undo-tree-id67792 . -1630) (undo-tree-id67793 . -1630) (undo-tree-id67794 . -1637) (undo-tree-id67795 . -1637) (undo-tree-id67796 . -1637) (undo-tree-id67797 . -1637) (undo-tree-id67798 . -1637) (undo-tree-id67799 . -1637) (undo-tree-id67800 . -1704) (undo-tree-id67801 . -1704) (undo-tree-id67802 . -1704) (undo-tree-id67803 . -1704) (undo-tree-id67804 . -1704) (undo-tree-id67805 . -1704) (undo-tree-id67806 . -1704) (undo-tree-id67807 . -1704) (undo-tree-id67808 . -1704) (undo-tree-id67809 . -1704) (undo-tree-id67810 . -1704) (undo-tree-id67811 . -1704) (undo-tree-id67812 . -1704) (undo-tree-id67813 . -1704) (undo-tree-id67814 . -1704) (undo-tree-id67815 . -1704) (undo-tree-id67816 . -1704) (undo-tree-id67817 . -1704) (undo-tree-id67818 . -1704) (undo-tree-id67819 . -1704) (undo-tree-id67820 . -1704) (undo-tree-id67821 . -1768) (undo-tree-id67822 . -1768) (undo-tree-id67823 . -1768) (undo-tree-id67824 . -1768) (undo-tree-id67825 . -1768) (undo-tree-id67826 . -1768) (undo-tree-id67827 . -1768) (undo-tree-id67828 . -1768) (undo-tree-id67829 . -1768) (undo-tree-id67830 . -1768) (undo-tree-id67831 . -1768) (undo-tree-id67832 . -1768) (undo-tree-id67833 . -1768) (undo-tree-id67834 . -1768) (undo-tree-id67835 . -1768) (undo-tree-id67836 . -1768) (undo-tree-id67837 . -1768) (undo-tree-id67838 . -1768) (undo-tree-id67839 . -1768) (undo-tree-id67840 . -1768) (undo-tree-id67841 . -1768) (undo-tree-id67842 . -1777) (undo-tree-id67843 . -1777) (undo-tree-id67844 . -1777) (undo-tree-id67845 . -1777) (undo-tree-id67846 . -1777) (undo-tree-id67847 . -1777) (undo-tree-id67848 . -1777) (undo-tree-id67849 . -1777) (undo-tree-id67850 . -1777) (undo-tree-id67851 . -1777) (undo-tree-id67852 . -1777) (undo-tree-id67853 . -1777) (undo-tree-id67854 . -1777) (undo-tree-id67855 . -1777) (undo-tree-id67856 . -1777) (undo-tree-id67857 . -1777) (undo-tree-id67858 . -1777) (undo-tree-id67859 . -1777) (undo-tree-id67860 . -1777) (undo-tree-id67861 . -1777) (undo-tree-id67862 . -1777) (undo-tree-id67863 . -1777) (undo-tree-id67864 . -1777) (undo-tree-id67865 . -1838) (undo-tree-id67866 . -1838) (undo-tree-id67867 . -1838) (undo-tree-id67868 . -1838) (undo-tree-id67869 . -1838) (undo-tree-id67870 . -1838) (undo-tree-id67871 . -1838) (undo-tree-id67872 . -1838) (undo-tree-id67873 . -1838) (undo-tree-id67874 . -1838) (undo-tree-id67875 . -1838) (undo-tree-id67876 . -1838) (undo-tree-id67877 . -1838) (undo-tree-id67878 . -1838) (undo-tree-id67879 . -1838) (undo-tree-id67880 . -1838) (undo-tree-id67881 . -1849) (undo-tree-id67882 . -1849) (undo-tree-id67883 . -1849) (undo-tree-id67884 . -1849) (undo-tree-id67885 . -1849) (undo-tree-id67886 . -1849) (undo-tree-id67887 . -1849) (undo-tree-id67888 . -1849) (undo-tree-id67889 . -1849) (undo-tree-id67890 . -1849) (undo-tree-id67891 . -1849) (undo-tree-id67892 . -1849) (undo-tree-id67893 . -1849) (undo-tree-id67894 . -1849) (undo-tree-id67895 . -1849) (undo-tree-id67896 . -1849) (undo-tree-id67897 . -1912) (undo-tree-id67898 . -1912) (undo-tree-id67899 . -1912) (undo-tree-id67900 . -1912) (undo-tree-id67901 . -1912) (undo-tree-id67902 . -1912) (undo-tree-id67903 . -1912) (undo-tree-id67904 . -1912) (undo-tree-id67905 . -1912) (undo-tree-id67906 . -1912) (undo-tree-id67907 . -1912) (undo-tree-id67908 . -1912) (undo-tree-id67909 . -1912) (undo-tree-id67910 . -1912) (undo-tree-id67911 . -1912) (undo-tree-id67912 . -1912) (undo-tree-id67913 . -1920) (undo-tree-id67914 . -1920) (undo-tree-id67915 . -1920) (undo-tree-id67916 . -1920) (undo-tree-id67917 . -1920) (undo-tree-id67918 . -1920) (undo-tree-id67919 . -1921) (undo-tree-id67920 . -1921) (undo-tree-id67921 . -1921) (undo-tree-id67922 . -1921) (undo-tree-id67923 . -1921) (undo-tree-id67924 . -1921) (undo-tree-id67925 . -1921) (undo-tree-id67926 . -1922) 13708 (t 25767 17313 73062 26000)) nil (25767 17537 381442 794000) 0 nil] [nil nil ((#("amount of time, but challenging enough to be fun and rewarding. Keras
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id64684 . -69) (undo-tree-id64685 . -64) (undo-tree-id64686 . -64) (undo-tree-id64687 . -64) (undo-tree-id64688 . -64) (undo-tree-id64689 . -64) (undo-tree-id64690 . -64) (undo-tree-id64691 . -70) (undo-tree-id64692 . -70) (undo-tree-id64693 . -70) (undo-tree-id64694 . -70) (undo-tree-id64695 . -70) (undo-tree-id64696 . -70) (undo-tree-id64697 . -70) (undo-tree-id64698 . -70) (undo-tree-id64699 . -70) (undo-tree-id64700 . -70) (undo-tree-id64701 . -70) (undo-tree-id64702 . -70) (undo-tree-id64703 . -70) (undo-tree-id64704 . -70) (undo-tree-id64705 . -70) (undo-tree-id64706 . -70) (undo-tree-id64707 . -70) (undo-tree-id64708 . 6) (undo-tree-id64709 . -69) (undo-tree-id64710 . -64) (undo-tree-id64711 . -64) (undo-tree-id64712 . -64) (undo-tree-id64713 . -64) (undo-tree-id64714 . -64) (undo-tree-id64715 . -64) (undo-tree-id64716 . -64) (undo-tree-id64717 . -64) (undo-tree-id64718 . -64) (undo-tree-id64719 . -64) (undo-tree-id64720 . -64) (undo-tree-id64721 . -70) (t 25767 17313 73062 26000)) ((11787 . 11857)) (25767 17330 694168 255000) 0 nil])
([nil nil ((#("spaces" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id66979 . -5) (undo-tree-id66980 . 6) (undo-tree-id66981 . -6)) nil (25767 17537 380788 748000) 0 nil])
([nil nil ((#("provides a simple function to load it:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id64665 . -38) (undo-tree-id64666 . -39) (undo-tree-id64667 . -39) (undo-tree-id64668 . -39) (undo-tree-id64669 . -39) (undo-tree-id64670 . -39) (undo-tree-id64671 . -39) (undo-tree-id64672 . -39) (undo-tree-id64673 . -39) (undo-tree-id64674 . -39) (undo-tree-id64675 . -39) (undo-tree-id64676 . -39) (undo-tree-id64677 . -39) (undo-tree-id64678 . -39) (undo-tree-id64679 . -39) (undo-tree-id64680 . -39) (undo-tree-id64681 . -39) (undo-tree-id64682 . -39) (undo-tree-id64683 . -39)) ((11787 . 11826)) (25767 17330 521147 463000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id66976 . 1) (undo-tree-id66977 . -1) (undo-tree-id66978 . -1)) nil (25767 17537 380785 744000) 0 nil])
([nil nil ((#(">>> (X_train, y_train), (X_test, y_test) =
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 7 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 12 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 16 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 21 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 27 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 31 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 35 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 39 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11787) (undo-tree-id64649 . -42) (undo-tree-id64650 . -43) (undo-tree-id64651 . -43) (undo-tree-id64652 . -43) (undo-tree-id64653 . -43) (undo-tree-id64654 . -43) (undo-tree-id64655 . -43) (undo-tree-id64656 . -43) (undo-tree-id64657 . -43) (undo-tree-id64658 . -43) (undo-tree-id64659 . -43) (undo-tree-id64660 . -43) (undo-tree-id64661 . -43) (undo-tree-id64662 . 43) (undo-tree-id64663 . -1) (undo-tree-id64664 . -43)) ((11787 . 11830)) (25767 17330 520550 364000) 0 nil])
([nil nil ((11787 . 11788)) nil (25767 17537 380783 374000) 0 nil])
nil
([nil nil ((11789 . 11790) (#("Even i" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11789) (undo-tree-id66964 . -5) (undo-tree-id66965 . -5) (undo-tree-id66966 . -5) (undo-tree-id66967 . -6) (undo-tree-id66968 . -5) (undo-tree-id66969 . -3) (undo-tree-id66970 . -6) (undo-tree-id66971 . -5) (undo-tree-id66972 . -5) (undo-tree-id66973 . -6) (undo-tree-id66974 . -6) (undo-tree-id66975 . -6) 11794) nil (25767 17537 380782 161000) 0 nil])
([nil nil ((11848 . 11850)) nil (25767 17537 380775 61000) 0 nil])
([nil nil ((11856 . 11857)) nil (25767 17537 380774 436000) 0 nil])
([nil nil ((#("think of “" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11857) (undo-tree-id66951 . -9) (undo-tree-id66952 . -9) (undo-tree-id66953 . 10) (undo-tree-id66954 . -9) (undo-tree-id66955 . -10) (undo-tree-id66956 . -9) (undo-tree-id66957 . -4) (undo-tree-id66958 . -7) (undo-tree-id66959 . -9) (undo-tree-id66960 . -9) (undo-tree-id66961 . -10) (undo-tree-id66962 . -10) (undo-tree-id66963 . -10) 11866) nil (25767 17537 380773 269000) 0 nil])
([nil nil ((11870 . 11871) (#("”" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11870) (undo-tree-id66948 . -1) (undo-tree-id66949 . -1) (undo-tree-id66950 . -1)) nil (25767 17537 380764 490000) 0 nil])
([nil nil ((#("or “" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11872) (undo-tree-id66937 . -3) (undo-tree-id66938 . -3) (undo-tree-id66939 . -3) (undo-tree-id66940 . -3) (undo-tree-id66941 . -4) (undo-tree-id66942 . -3) (undo-tree-id66943 . -1) (undo-tree-id66944 . -2) (undo-tree-id66945 . -3) (undo-tree-id66946 . -3) (undo-tree-id66947 . -4) 11875) nil (25767 17537 380761 217000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11890) (undo-tree-id66934 . -1) (undo-tree-id66935 . -1) (undo-tree-id66936 . -1)) nil (25767 17537 380753 387000) 0 nil])
([nil nil ((11890 . 11891) (#("”" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11890) (undo-tree-id66931 . -1) (undo-tree-id66932 . -1) (undo-tree-id66933 . -1)) nil (25767 17537 380750 799000) 0 nil])
([nil nil ((11892 . 11894)) nil (25767 17537 380748 0) 0 nil])
([nil nil ((#("Fortunately, there are better options! The 2018 paper4 by Taku Kudo
introduced an " 0 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 68 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 11894) (undo-tree-id66571 . -81) (undo-tree-id66572 . -81) (undo-tree-id66573 . 82) (undo-tree-id66574 . -81) (undo-tree-id66575 . -82) (undo-tree-id66576 . -81) (undo-tree-id66577 . -10) (undo-tree-id66578 . -10) (undo-tree-id66579 . -10) (undo-tree-id66580 . -10) (undo-tree-id66581 . -10) (undo-tree-id66582 . -10) (undo-tree-id66583 . -10) (undo-tree-id66584 . -10) (undo-tree-id66585 . -10) (undo-tree-id66586 . -10) (undo-tree-id66587 . -10) (undo-tree-id66588 . -10) (undo-tree-id66589 . -10) (undo-tree-id66590 . -10) (undo-tree-id66591 . -10) (undo-tree-id66592 . -10) (undo-tree-id66593 . -11) (undo-tree-id66594 . -11) (undo-tree-id66595 . -11) (undo-tree-id66596 . -11) (undo-tree-id66597 . -11) (undo-tree-id66598 . -11) (undo-tree-id66599 . -11) (undo-tree-id66600 . -11) (undo-tree-id66601 . -11) (undo-tree-id66602 . -11) (undo-tree-id66603 . -11) (undo-tree-id66604 . -11) (undo-tree-id66605 . -11) (undo-tree-id66606 . -11) (undo-tree-id66607 . -11) (undo-tree-id66608 . -11) (undo-tree-id66609 . -17) (undo-tree-id66610 . -17) (undo-tree-id66611 . -17) (undo-tree-id66612 . -17) (undo-tree-id66613 . -17) (undo-tree-id66614 . -17) (undo-tree-id66615 . -17) (undo-tree-id66616 . -17) (undo-tree-id66617 . -17) (undo-tree-id66618 . -17) (undo-tree-id66619 . -17) (undo-tree-id66620 . -17) (undo-tree-id66621 . -17) (undo-tree-id66622 . -17) (undo-tree-id66623 . -17) (undo-tree-id66624 . -17) (undo-tree-id66625 . -17) (undo-tree-id66626 . -17) (undo-tree-id66627 . -17) (undo-tree-id66628 . -17) (undo-tree-id66629 . -17) (undo-tree-id66630 . -21) (undo-tree-id66631 . -21) (undo-tree-id66632 . -21) (undo-tree-id66633 . -21) (undo-tree-id66634 . -21) (undo-tree-id66635 . -21) (undo-tree-id66636 . -21) (undo-tree-id66637 . -21) (undo-tree-id66638 . -21) (undo-tree-id66639 . -21) (undo-tree-id66640 . -21) (undo-tree-id66641 . -21) (undo-tree-id66642 . -21) (undo-tree-id66643 . -21) (undo-tree-id66644 . -21) (undo-tree-id66645 . -21) (undo-tree-id66646 . -28) (undo-tree-id66647 . -28) (undo-tree-id66648 . -28) (undo-tree-id66649 . -28) (undo-tree-id66650 . -28) (undo-tree-id66651 . -28) (undo-tree-id66652 . -28) (undo-tree-id66653 . -28) (undo-tree-id66654 . -28) (undo-tree-id66655 . -28) (undo-tree-id66656 . -28) (undo-tree-id66657 . -28) (undo-tree-id66658 . -28) (undo-tree-id66659 . -28) (undo-tree-id66660 . -28) (undo-tree-id66661 . -28) (undo-tree-id66662 . -36) (undo-tree-id66663 . -36) (undo-tree-id66664 . -36) (undo-tree-id66665 . -36) (undo-tree-id66666 . -36) (undo-tree-id66667 . -36) (undo-tree-id66668 . -36) (undo-tree-id66669 . -36) (undo-tree-id66670 . -36) (undo-tree-id66671 . -36) (undo-tree-id66672 . -36) (undo-tree-id66673 . -36) (undo-tree-id66674 . -36) (undo-tree-id66675 . -36) (undo-tree-id66676 . -36) (undo-tree-id66677 . -36) (undo-tree-id66678 . -36) (undo-tree-id66679 . -36) (undo-tree-id66680 . -37) (undo-tree-id66681 . -37) (undo-tree-id66682 . -37) (undo-tree-id66683 . -37) (undo-tree-id66684 . -37) (undo-tree-id66685 . -37) (undo-tree-id66686 . -37) (undo-tree-id66687 . -37) (undo-tree-id66688 . -37) (undo-tree-id66689 . -37) (undo-tree-id66690 . -37) (undo-tree-id66691 . -37) (undo-tree-id66692 . -37) (undo-tree-id66693 . -37) (undo-tree-id66694 . -37) (undo-tree-id66695 . -37) (undo-tree-id66696 . -41) (undo-tree-id66697 . -41) (undo-tree-id66698 . -41) (undo-tree-id66699 . -41) (undo-tree-id66700 . -41) (undo-tree-id66701 . -41) (undo-tree-id66702 . -41) (undo-tree-id66703 . -41) (undo-tree-id66704 . -41) (undo-tree-id66705 . -41) (undo-tree-id66706 . -41) (undo-tree-id66707 . -41) (undo-tree-id66708 . -41) (undo-tree-id66709 . -41) (undo-tree-id66710 . -41) (undo-tree-id66711 . -41) (undo-tree-id66712 . -46) (undo-tree-id66713 . -46) (undo-tree-id66714 . -46) (undo-tree-id66715 . -46) (undo-tree-id66716 . -46) (undo-tree-id66717 . -46) (undo-tree-id66718 . -46) (undo-tree-id66719 . -46) (undo-tree-id66720 . -46) (undo-tree-id66721 . -46) (undo-tree-id66722 . -46) (undo-tree-id66723 . -46) (undo-tree-id66724 . -46) (undo-tree-id66725 . -46) (undo-tree-id66726 . -46) (undo-tree-id66727 . -46) (undo-tree-id66728 . -53) (undo-tree-id66729 . -53) (undo-tree-id66730 . -53) (undo-tree-id66731 . -53) (undo-tree-id66732 . -53) (undo-tree-id66733 . -53) (undo-tree-id66734 . -53) (undo-tree-id66735 . -53) (undo-tree-id66736 . -53) (undo-tree-id66737 . -53) (undo-tree-id66738 . -53) (undo-tree-id66739 . -53) (undo-tree-id66740 . -53) (undo-tree-id66741 . -53) (undo-tree-id66742 . -53) (undo-tree-id66743 . -53) (undo-tree-id66744 . -56) (undo-tree-id66745 . -56) (undo-tree-id66746 . -56) (undo-tree-id66747 . -56) (undo-tree-id66748 . -56) (undo-tree-id66749 . -56) (undo-tree-id66750 . -56) (undo-tree-id66751 . -56) (undo-tree-id66752 . -56) (undo-tree-id66753 . -56) (undo-tree-id66754 . -56) (undo-tree-id66755 . -56) (undo-tree-id66756 . -56) (undo-tree-id66757 . -56) (undo-tree-id66758 . -56) (undo-tree-id66759 . -56) (undo-tree-id66760 . 24) (undo-tree-id66761 . -62) (undo-tree-id66762 . -61) (undo-tree-id66763 . -61) (undo-tree-id66764 . -61) (undo-tree-id66765 . -61) (undo-tree-id66766 . -61) (undo-tree-id66767 . -61) (undo-tree-id66768 . -61) (undo-tree-id66769 . -61) (undo-tree-id66770 . -61) (undo-tree-id66771 . -61) (undo-tree-id66772 . -61) (undo-tree-id66773 . -61) (undo-tree-id66774 . -61) (undo-tree-id66775 . -61) (undo-tree-id66776 . -61) (undo-tree-id66777 . -61) (undo-tree-id66778 . 19) (undo-tree-id66779 . -67) (undo-tree-id66780 . -66) (undo-tree-id66781 . -66) (undo-tree-id66782 . -66) (undo-tree-id66783 . -66) (undo-tree-id66784 . -66) (undo-tree-id66785 . -66) (undo-tree-id66786 . -66) (undo-tree-id66787 . -66) (undo-tree-id66788 . -66) (undo-tree-id66789 . -66) (undo-tree-id66790 . -66) (undo-tree-id66791 . -66) (undo-tree-id66792 . -66) (undo-tree-id66793 . -66) (undo-tree-id66794 . -66) (undo-tree-id66795 . -66) (undo-tree-id66796 . -77) (undo-tree-id66797 . -77) (undo-tree-id66798 . -77) (undo-tree-id66799 . -77) (undo-tree-id66800 . -77) (undo-tree-id66801 . -77) (undo-tree-id66802 . -77) (undo-tree-id66803 . -77) (undo-tree-id66804 . -77) (undo-tree-id66805 . -77) (undo-tree-id66806 . -77) (undo-tree-id66807 . -77) (undo-tree-id66808 . -77) (undo-tree-id66809 . -77) (undo-tree-id66810 . -77) (undo-tree-id66811 . -77) (undo-tree-id66812 . -77) (undo-tree-id66813 . -77) (undo-tree-id66814 . -77) (undo-tree-id66815 . -77) (undo-tree-id66816 . -77) (undo-tree-id66817 . -80) (undo-tree-id66818 . -80) (undo-tree-id66819 . -80) (undo-tree-id66820 . -80) (undo-tree-id66821 . -80) (undo-tree-id66822 . -80) (undo-tree-id66823 . -80) (undo-tree-id66824 . -80) (undo-tree-id66825 . -80) (undo-tree-id66826 . -80) (undo-tree-id66827 . -80) (undo-tree-id66828 . -80) (undo-tree-id66829 . -80) (undo-tree-id66830 . -80) (undo-tree-id66831 . -80) (undo-tree-id66832 . -80) (undo-tree-id66833 . -82) (undo-tree-id66834 . -82) (undo-tree-id66835 . -82) (undo-tree-id66836 . -82) (undo-tree-id66837 . -82) (undo-tree-id66838 . -82) (undo-tree-id66839 . -81) (undo-tree-id66840 . -81) (undo-tree-id66841 . -81) (undo-tree-id66842 . -81) (undo-tree-id66843 . -81) (undo-tree-id66844 . -81) (undo-tree-id66845 . -80) (undo-tree-id66846 . -80) (undo-tree-id66847 . -80) (undo-tree-id66848 . -80) (undo-tree-id66849 . -80) (undo-tree-id66850 . -80) (undo-tree-id66851 . -80) (undo-tree-id66852 . -80) (undo-tree-id66853 . -80) (undo-tree-id66854 . -80) (undo-tree-id66855 . -80) (undo-tree-id66856 . -80) (undo-tree-id66857 . -80) (undo-tree-id66858 . -80) (undo-tree-id66859 . -80) (undo-tree-id66860 . -80) (undo-tree-id66861 . -80) (undo-tree-id66862 . -80) (undo-tree-id66863 . -80) (undo-tree-id66864 . -80) (undo-tree-id66865 . -80) (undo-tree-id66866 . -79) (undo-tree-id66867 . -79) (undo-tree-id66868 . -79) (undo-tree-id66869 . -79) (undo-tree-id66870 . -79) (undo-tree-id66871 . -79) (undo-tree-id66872 . -79) (undo-tree-id66873 . -79) (undo-tree-id66874 . -79) (undo-tree-id66875 . -79) (undo-tree-id66876 . -79) (undo-tree-id66877 . -79) (undo-tree-id66878 . -79) (undo-tree-id66879 . -79) (undo-tree-id66880 . -79) (undo-tree-id66881 . -79) (undo-tree-id66882 . -79) (undo-tree-id66883 . -79) (undo-tree-id66884 . -79) (undo-tree-id66885 . -79) (undo-tree-id66886 . -79) (undo-tree-id66887 . -79) (undo-tree-id66888 . -79) (undo-tree-id66889 . -79) (undo-tree-id66890 . -79) (undo-tree-id66891 . -79) (undo-tree-id66892 . -80) (undo-tree-id66893 . -80) (undo-tree-id66894 . -80) (undo-tree-id66895 . -80) (undo-tree-id66896 . -80) (undo-tree-id66897 . -80) (undo-tree-id66898 . -80) (undo-tree-id66899 . -80) (undo-tree-id66900 . -80) (undo-tree-id66901 . -80) (undo-tree-id66902 . -80) (undo-tree-id66903 . -80) (undo-tree-id66904 . -80) (undo-tree-id66905 . -80) (undo-tree-id66906 . -80) (undo-tree-id66907 . -80) (undo-tree-id66908 . -81) (undo-tree-id66909 . -81) (undo-tree-id66910 . -81) (undo-tree-id66911 . -81) (undo-tree-id66912 . -81) (undo-tree-id66913 . -81) (undo-tree-id66914 . -81) (undo-tree-id66915 . -81) (undo-tree-id66916 . -81) (undo-tree-id66917 . -81) (undo-tree-id66918 . -81) (undo-tree-id66919 . -81) (undo-tree-id66920 . -81) (undo-tree-id66921 . -81) (undo-tree-id66922 . -81) (undo-tree-id66923 . -81) (undo-tree-id66924 . -81) (undo-tree-id66925 . -81) (undo-tree-id66926 . -81) (undo-tree-id66927 . -81) (undo-tree-id66928 . -81) (undo-tree-id66929 . -81) (undo-tree-id66930 . -82) 11975) nil (25767 17537 380736 752000) 0 nil])
([nil nil ((11894 . 11895) (#("u" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11894)) nil (25767 17537 380536 290000) 0 nil])
([nil nil ((11953 . 11955)) nil (25767 17537 380535 483000) 0 nil])
([nil nil ((nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 11634 . 11635) (nil line-prefix #("  " 0 2 (face org-indent)) 11634 . 11635) (nil fontified t 11634 . 11635) (#("-  " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 11634) (11637 . 11639) (11892 . 12028) (#("- treating spaces
- Unsupervised learning technique to tokenize and detokenize
  text at the subword level in a language-independent way" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 17 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 17 18 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 18 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 19 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 20 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 79 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 81 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 11892) (undo-tree-id65266 . -136) (undo-tree-id65267 . -136) (undo-tree-id65268 . -20) (undo-tree-id65269 . -20) (undo-tree-id65270 . 115) (undo-tree-id65271 . 55) (undo-tree-id65272 . -136) (undo-tree-id65273 . -19) (undo-tree-id65274 . -19) (undo-tree-id65275 . -19) (undo-tree-id65276 . -19) (undo-tree-id65277 . -19) (undo-tree-id65278 . -19) (undo-tree-id65279 . -19) (undo-tree-id65280 . -19) (undo-tree-id65281 . -19) (undo-tree-id65282 . -19) (undo-tree-id65283 . -19) (undo-tree-id65284 . -19) (undo-tree-id65285 . -19) (undo-tree-id65286 . -19) (undo-tree-id65287 . -19) (undo-tree-id65288 . -19) (undo-tree-id65289 . -20) (undo-tree-id65290 . -20) (undo-tree-id65291 . -20) (undo-tree-id65292 . -20) (undo-tree-id65293 . -20) (undo-tree-id65294 . -20) (undo-tree-id65295 . -20) (undo-tree-id65296 . -20) (undo-tree-id65297 . -20) (undo-tree-id65298 . -20) (undo-tree-id65299 . -20) (undo-tree-id65300 . -20) (undo-tree-id65301 . -19) (undo-tree-id65302 . -19) (undo-tree-id65303 . -19) (undo-tree-id65304 . -19) (undo-tree-id65305 . -19) (undo-tree-id65306 . -19) (undo-tree-id65307 . -19) (undo-tree-id65308 . -19) (undo-tree-id65309 . -19) (undo-tree-id65310 . -19) (undo-tree-id65311 . -19) (undo-tree-id65312 . -19) (undo-tree-id65313 . -19) (undo-tree-id65314 . -19) (undo-tree-id65315 . -19) (undo-tree-id65316 . -19) (undo-tree-id65317 . -19) (undo-tree-id65318 . -19) (undo-tree-id65319 . -19) (undo-tree-id65320 . -19) (undo-tree-id65321 . -20) (undo-tree-id65322 . -20) (undo-tree-id65323 . -20) (undo-tree-id65324 . -20) (undo-tree-id65325 . -20) (undo-tree-id65326 . -20) (undo-tree-id65327 . -20) (undo-tree-id65328 . -20) (undo-tree-id65329 . -20) (undo-tree-id65330 . -20) (undo-tree-id65331 . -20) (undo-tree-id65332 . -20) (undo-tree-id65333 . -20) (undo-tree-id65334 . -20) (undo-tree-id65335 . -20) (undo-tree-id65336 . -20) (undo-tree-id65337 . -20) (undo-tree-id65338 . -20) (undo-tree-id65339 . -20) (undo-tree-id65340 . -20) (undo-tree-id65341 . -20) (undo-tree-id65342 . -20) (undo-tree-id65343 . -20) (undo-tree-id65344 . -20) (undo-tree-id65345 . -20) (undo-tree-id65346 . -20) (undo-tree-id65347 . -20) (undo-tree-id65348 . -20) (undo-tree-id65349 . -20) (undo-tree-id65350 . -20) (undo-tree-id65351 . -20) (undo-tree-id65352 . -20) (undo-tree-id65353 . -20) (undo-tree-id65354 . -20) (undo-tree-id65355 . -20) (undo-tree-id65356 . -20) (undo-tree-id65357 . -20) (undo-tree-id65358 . -20) (undo-tree-id65359 . -20) (undo-tree-id65360 . -20) (undo-tree-id65361 . -20) (undo-tree-id65362 . -20) (undo-tree-id65363 . -20) (undo-tree-id65364 . -20) (undo-tree-id65365 . -20) (undo-tree-id65366 . -20) (undo-tree-id65367 . -20) (undo-tree-id65368 . -20) (undo-tree-id65369 . -20) (undo-tree-id65370 . -20) (undo-tree-id65371 . -20) (undo-tree-id65372 . -20) (undo-tree-id65373 . -20) (undo-tree-id65374 . -20) (undo-tree-id65375 . -20) (undo-tree-id65376 . -20) (undo-tree-id65377 . -20) (undo-tree-id65378 . -20) (undo-tree-id65379 . -20) (undo-tree-id65380 . -20) (undo-tree-id65381 . -20) (undo-tree-id65382 . -20) (undo-tree-id65383 . -20) (undo-tree-id65384 . -20) (undo-tree-id65385 . -20) (undo-tree-id65386 . -20) (undo-tree-id65387 . -20) (undo-tree-id65388 . -20) (undo-tree-id65389 . -20) (undo-tree-id65390 . -20) (undo-tree-id65391 . -20) (undo-tree-id65392 . -20) (undo-tree-id65393 . -20) (undo-tree-id65394 . -20) (undo-tree-id65395 . -20) (undo-tree-id65396 . -20) (undo-tree-id65397 . -20) (undo-tree-id65398 . -20) (undo-tree-id65399 . -20) (undo-tree-id65400 . -20) (undo-tree-id65401 . -20) (undo-tree-id65402 . -20) (undo-tree-id65403 . -20) (undo-tree-id65404 . -20) (undo-tree-id65405 . -20) (undo-tree-id65406 . -20) (undo-tree-id65407 . -20) (undo-tree-id65408 . -20) (undo-tree-id65409 . -20) (undo-tree-id65410 . -20) (undo-tree-id65411 . -20) (undo-tree-id65412 . -20) (undo-tree-id65413 . -20) (undo-tree-id65414 . -20) (undo-tree-id65415 . -20) (undo-tree-id65416 . -20) (undo-tree-id65417 . -20) (undo-tree-id65418 . -20) (undo-tree-id65419 . -20) (undo-tree-id65420 . -20) (undo-tree-id65421 . -20) (undo-tree-id65422 . -20) (undo-tree-id65423 . -20) (undo-tree-id65424 . -20) (undo-tree-id65425 . -20) (undo-tree-id65426 . -20) (undo-tree-id65427 . -20) (undo-tree-id65428 . -20) (undo-tree-id65429 . -20) (undo-tree-id65430 . -20) (undo-tree-id65431 . -20) (undo-tree-id65432 . -20) (undo-tree-id65433 . -20) (undo-tree-id65434 . -20) (undo-tree-id65435 . -20) (undo-tree-id65436 . -20) (undo-tree-id65437 . -20) (undo-tree-id65438 . -20) (undo-tree-id65439 . -20) (undo-tree-id65440 . -20) (undo-tree-id65441 . -20) (undo-tree-id65442 . -20) (undo-tree-id65443 . -20) (undo-tree-id65444 . -20) (undo-tree-id65445 . -20) (undo-tree-id65446 . -20) (undo-tree-id65447 . -20) (undo-tree-id65448 . -20) (undo-tree-id65449 . -20) (undo-tree-id65450 . -20) (undo-tree-id65451 . -20) (undo-tree-id65452 . -20) (undo-tree-id65453 . -20) (undo-tree-id65454 . -20) (undo-tree-id65455 . -20) (undo-tree-id65456 . -20) (undo-tree-id65457 . -20) (undo-tree-id65458 . -20) (undo-tree-id65459 . -20) (undo-tree-id65460 . -20) (undo-tree-id65461 . -20) (undo-tree-id65462 . -20) (undo-tree-id65463 . -20) (undo-tree-id65464 . -20) (undo-tree-id65465 . -20) (undo-tree-id65466 . -20) (undo-tree-id65467 . -20) (undo-tree-id65468 . -20) (undo-tree-id65469 . -20) (undo-tree-id65470 . -20) (undo-tree-id65471 . -20) (undo-tree-id65472 . -20) (undo-tree-id65473 . -20) (undo-tree-id65474 . -20) (undo-tree-id65475 . -20) (undo-tree-id65476 . -20) (undo-tree-id65477 . -20) (undo-tree-id65478 . -20) (undo-tree-id65479 . -20) (undo-tree-id65480 . -20) (undo-tree-id65481 . -20) (undo-tree-id65482 . -20) (undo-tree-id65483 . -20) (undo-tree-id65484 . -20) (undo-tree-id65485 . -20) (undo-tree-id65486 . -20) (undo-tree-id65487 . -20) (undo-tree-id65488 . -20) (undo-tree-id65489 . -20) (undo-tree-id65490 . -20) (undo-tree-id65491 . -20) (undo-tree-id65492 . -20) (undo-tree-id65493 . -20) (undo-tree-id65494 . -20) (undo-tree-id65495 . -20) (undo-tree-id65496 . -20) (undo-tree-id65497 . -20) (undo-tree-id65498 . -20) (undo-tree-id65499 . -20) (undo-tree-id65500 . -20) (undo-tree-id65501 . -20) (undo-tree-id65502 . -20) (undo-tree-id65503 . -20) (undo-tree-id65504 . -20) (undo-tree-id65505 . -20) (undo-tree-id65506 . -20) (undo-tree-id65507 . -20) (undo-tree-id65508 . -20) (undo-tree-id65509 . -20) (undo-tree-id65510 . -20) (undo-tree-id65511 . -20) (undo-tree-id65512 . -20) (undo-tree-id65513 . -20) (undo-tree-id65514 . -20) (undo-tree-id65515 . -20) (undo-tree-id65516 . -20) (undo-tree-id65517 . -20) (undo-tree-id65518 . -20) (undo-tree-id65519 . -20) (undo-tree-id65520 . -20) (undo-tree-id65521 . -20) (undo-tree-id65522 . -20) (undo-tree-id65523 . -20) (undo-tree-id65524 . -20) (undo-tree-id65525 . -20) (undo-tree-id65526 . -20) (undo-tree-id65527 . -20) (undo-tree-id65528 . -20) (undo-tree-id65529 . -20) (undo-tree-id65530 . -20) (undo-tree-id65531 . -20) (undo-tree-id65532 . -20) (undo-tree-id65533 . -20) (undo-tree-id65534 . -20) (undo-tree-id65535 . -20) (undo-tree-id65536 . -20) (undo-tree-id65537 . -20) (undo-tree-id65538 . -20) (undo-tree-id65539 . -20) (undo-tree-id65540 . -20) (undo-tree-id65541 . -20) (undo-tree-id65542 . -20) (undo-tree-id65543 . -20) (undo-tree-id65544 . -20) (undo-tree-id65545 . -20) (undo-tree-id65546 . -20) (undo-tree-id65547 . -20) (undo-tree-id65548 . -20) (undo-tree-id65549 . -20) (undo-tree-id65550 . -20) (undo-tree-id65551 . -20) (undo-tree-id65552 . -20) (undo-tree-id65553 . -20) (undo-tree-id65554 . -20) (undo-tree-id65555 . -20) (undo-tree-id65556 . -20) (undo-tree-id65557 . -20) (undo-tree-id65558 . -20) (undo-tree-id65559 . -20) (undo-tree-id65560 . -20) (undo-tree-id65561 . -20) (undo-tree-id65562 . -20) (undo-tree-id65563 . -20) (undo-tree-id65564 . -20) (undo-tree-id65565 . -20) (undo-tree-id65566 . -20) (undo-tree-id65567 . -20) (undo-tree-id65568 . -20) (undo-tree-id65569 . -20) (undo-tree-id65570 . -20) (undo-tree-id65571 . -20) (undo-tree-id65572 . -20) (undo-tree-id65573 . -20) (undo-tree-id65574 . -20) (undo-tree-id65575 . -20) (undo-tree-id65576 . -20) (undo-tree-id65577 . -20) (undo-tree-id65578 . -20) (undo-tree-id65579 . -20) (undo-tree-id65580 . -20) (undo-tree-id65581 . -20) (undo-tree-id65582 . -20) (undo-tree-id65583 . -20) (undo-tree-id65584 . -20) (undo-tree-id65585 . -20) (undo-tree-id65586 . -20) (undo-tree-id65587 . -20) (undo-tree-id65588 . -20) (undo-tree-id65589 . -20) (undo-tree-id65590 . -20) (undo-tree-id65591 . -20) (undo-tree-id65592 . -20) (undo-tree-id65593 . -20) (undo-tree-id65594 . -20) (undo-tree-id65595 . -20) (undo-tree-id65596 . -20) (undo-tree-id65597 . -20) (undo-tree-id65598 . -20) (undo-tree-id65599 . -20) (undo-tree-id65600 . -20) (undo-tree-id65601 . -20) (undo-tree-id65602 . -31) (undo-tree-id65603 . -31) (undo-tree-id65604 . -31) (undo-tree-id65605 . -31) (undo-tree-id65606 . -31) (undo-tree-id65607 . -31) (undo-tree-id65608 . -31) (undo-tree-id65609 . -31) (undo-tree-id65610 . -31) (undo-tree-id65611 . -31) (undo-tree-id65612 . -31) (undo-tree-id65613 . -31) (undo-tree-id65614 . -31) (undo-tree-id65615 . -31) (undo-tree-id65616 . -31) (undo-tree-id65617 . -31) (undo-tree-id65618 . -31) (undo-tree-id65619 . -31) (undo-tree-id65620 . -31) (undo-tree-id65621 . -31) (undo-tree-id65622 . -31) (undo-tree-id65623 . -40) (undo-tree-id65624 . -40) (undo-tree-id65625 . -40) (undo-tree-id65626 . -40) (undo-tree-id65627 . -40) (undo-tree-id65628 . -40) (undo-tree-id65629 . -40) (undo-tree-id65630 . -40) (undo-tree-id65631 . -40) (undo-tree-id65632 . -40) (undo-tree-id65633 . -40) (undo-tree-id65634 . -40) (undo-tree-id65635 . -40) (undo-tree-id65636 . -40) (undo-tree-id65637 . -40) (undo-tree-id65638 . -40) (undo-tree-id65639 . -40) (undo-tree-id65640 . -40) (undo-tree-id65641 . -40) (undo-tree-id65642 . -40) (undo-tree-id65643 . -40) (undo-tree-id65644 . -50) (undo-tree-id65645 . -50) (undo-tree-id65646 . -50) (undo-tree-id65647 . -50) (undo-tree-id65648 . -50) (undo-tree-id65649 . -50) (undo-tree-id65650 . -50) (undo-tree-id65651 . -50) (undo-tree-id65652 . -50) (undo-tree-id65653 . -50) (undo-tree-id65654 . -50) (undo-tree-id65655 . -50) (undo-tree-id65656 . -50) (undo-tree-id65657 . -50) (undo-tree-id65658 . -50) (undo-tree-id65659 . -50) (undo-tree-id65660 . -53) (undo-tree-id65661 . -53) (undo-tree-id65662 . -53) (undo-tree-id65663 . -53) (undo-tree-id65664 . -53) (undo-tree-id65665 . -53) (undo-tree-id65666 . -53) (undo-tree-id65667 . -53) (undo-tree-id65668 . -53) (undo-tree-id65669 . -53) (undo-tree-id65670 . -53) (undo-tree-id65671 . -53) (undo-tree-id65672 . -53) (undo-tree-id65673 . -53) (undo-tree-id65674 . -53) (undo-tree-id65675 . -53) (undo-tree-id65676 . -62) (undo-tree-id65677 . -62) (undo-tree-id65678 . -62) (undo-tree-id65679 . -62) (undo-tree-id65680 . -62) (undo-tree-id65681 . -62) (undo-tree-id65682 . -62) (undo-tree-id65683 . -62) (undo-tree-id65684 . -62) (undo-tree-id65685 . -62) (undo-tree-id65686 . -62) (undo-tree-id65687 . -62) (undo-tree-id65688 . -62) (undo-tree-id65689 . -62) (undo-tree-id65690 . -62) (undo-tree-id65691 . -62) (undo-tree-id65692 . -66) (undo-tree-id65693 . -66) (undo-tree-id65694 . -66) (undo-tree-id65695 . -66) (undo-tree-id65696 . -66) (undo-tree-id65697 . -66) (undo-tree-id65698 . -66) (undo-tree-id65699 . -66) (undo-tree-id65700 . -66) (undo-tree-id65701 . -66) (undo-tree-id65702 . -66) (undo-tree-id65703 . -66) (undo-tree-id65704 . -66) (undo-tree-id65705 . -66) (undo-tree-id65706 . -66) (undo-tree-id65707 . -66) (undo-tree-id65708 . -77) (undo-tree-id65709 . -77) (undo-tree-id65710 . -77) (undo-tree-id65711 . -77) (undo-tree-id65712 . -77) (undo-tree-id65713 . -77) (undo-tree-id65714 . -77) (undo-tree-id65715 . -77) (undo-tree-id65716 . -77) (undo-tree-id65717 . -77) (undo-tree-id65718 . -77) (undo-tree-id65719 . -77) (undo-tree-id65720 . -77) (undo-tree-id65721 . -77) (undo-tree-id65722 . -77) (undo-tree-id65723 . -77) (undo-tree-id65724 . -77) (undo-tree-id65725 . -77) (undo-tree-id65726 . -77) (undo-tree-id65727 . -77) (undo-tree-id65728 . -77) (undo-tree-id65729 . -77) (undo-tree-id65730 . -77) (undo-tree-id65731 . -77) (undo-tree-id65732 . -77) (undo-tree-id65733 . -77) (undo-tree-id65734 . -77) (undo-tree-id65735 . -77) (undo-tree-id65736 . -77) (undo-tree-id65737 . -77) (undo-tree-id65738 . -77) (undo-tree-id65739 . -76) (undo-tree-id65740 . -76) (undo-tree-id65741 . -76) (undo-tree-id65742 . -76) (undo-tree-id65743 . -76) (undo-tree-id65744 . -76) (undo-tree-id65745 . -76) (undo-tree-id65746 . -76) (undo-tree-id65747 . -76) (undo-tree-id65748 . -76) (undo-tree-id65749 . -76) (undo-tree-id65750 . -76) (undo-tree-id65751 . -76) (undo-tree-id65752 . -76) (undo-tree-id65753 . -76) (undo-tree-id65754 . -76) (undo-tree-id65755 . -76) (undo-tree-id65756 . -76) (undo-tree-id65757 . -76) (undo-tree-id65758 . -76) (undo-tree-id65759 . -76) (undo-tree-id65760 . -75) (undo-tree-id65761 . -75) (undo-tree-id65762 . -75) (undo-tree-id65763 . -75) (undo-tree-id65764 . -75) (undo-tree-id65765 . -75) (undo-tree-id65766 . -74) (undo-tree-id65767 . -74) (undo-tree-id65768 . -74) (undo-tree-id65769 . -74) (undo-tree-id65770 . -74) (undo-tree-id65771 . -74) (undo-tree-id65772 . -73) (undo-tree-id65773 . -73) (undo-tree-id65774 . -73) (undo-tree-id65775 . -73) (undo-tree-id65776 . -73) (undo-tree-id65777 . -73) (undo-tree-id65778 . -72) (undo-tree-id65779 . -72) (undo-tree-id65780 . -72) (undo-tree-id65781 . -72) (undo-tree-id65782 . -72) (undo-tree-id65783 . -72) (undo-tree-id65784 . -71) (undo-tree-id65785 . -71) (undo-tree-id65786 . -71) (undo-tree-id65787 . -71) (undo-tree-id65788 . -71) (undo-tree-id65789 . -71) (undo-tree-id65790 . -70) (undo-tree-id65791 . -70) (undo-tree-id65792 . -70) (undo-tree-id65793 . -70) (undo-tree-id65794 . -70) (undo-tree-id65795 . -70) (undo-tree-id65796 . -69) (undo-tree-id65797 . -69) (undo-tree-id65798 . -69) (undo-tree-id65799 . -69) (undo-tree-id65800 . -69) (undo-tree-id65801 . -69) (undo-tree-id65802 . -68) (undo-tree-id65803 . -68) (undo-tree-id65804 . -68) (undo-tree-id65805 . -68) (undo-tree-id65806 . -68) (undo-tree-id65807 . -68) (undo-tree-id65808 . -67) (undo-tree-id65809 . -67) (undo-tree-id65810 . -67) (undo-tree-id65811 . -67) (undo-tree-id65812 . -67) (undo-tree-id65813 . -67) (undo-tree-id65814 . -66) (undo-tree-id65815 . -66) (undo-tree-id65816 . -66) (undo-tree-id65817 . -66) (undo-tree-id65818 . -66) (undo-tree-id65819 . -66) (undo-tree-id65820 . -65) (undo-tree-id65821 . -65) (undo-tree-id65822 . -65) (undo-tree-id65823 . -65) (undo-tree-id65824 . -65) (undo-tree-id65825 . -65) (undo-tree-id65826 . -64) (undo-tree-id65827 . -64) (undo-tree-id65828 . -64) (undo-tree-id65829 . -64) (undo-tree-id65830 . -64) (undo-tree-id65831 . -64) (undo-tree-id65832 . -63) (undo-tree-id65833 . -63) (undo-tree-id65834 . -63) (undo-tree-id65835 . -63) (undo-tree-id65836 . -63) (undo-tree-id65837 . -63) (undo-tree-id65838 . -62) (undo-tree-id65839 . -62) (undo-tree-id65840 . -62) (undo-tree-id65841 . -62) (undo-tree-id65842 . -62) (undo-tree-id65843 . -62) (undo-tree-id65844 . -61) (undo-tree-id65845 . -61) (undo-tree-id65846 . -61) (undo-tree-id65847 . -61) (undo-tree-id65848 . -61) (undo-tree-id65849 . -61) (undo-tree-id65850 . -60) (undo-tree-id65851 . -60) (undo-tree-id65852 . -60) (undo-tree-id65853 . -60) (undo-tree-id65854 . -60) (undo-tree-id65855 . -60) (undo-tree-id65856 . -59) (undo-tree-id65857 . -59) (undo-tree-id65858 . -59) (undo-tree-id65859 . -59) (undo-tree-id65860 . -59) (undo-tree-id65861 . -59) (undo-tree-id65862 . -58) (undo-tree-id65863 . -58) (undo-tree-id65864 . -58) (undo-tree-id65865 . -58) (undo-tree-id65866 . -58) (undo-tree-id65867 . -58) (undo-tree-id65868 . -57) (undo-tree-id65869 . -57) (undo-tree-id65870 . -57) (undo-tree-id65871 . -57) (undo-tree-id65872 . -57) (undo-tree-id65873 . -57) (undo-tree-id65874 . -56) (undo-tree-id65875 . -56) (undo-tree-id65876 . -56) (undo-tree-id65877 . -56) (undo-tree-id65878 . -56) (undo-tree-id65879 . -56) (undo-tree-id65880 . -55) (undo-tree-id65881 . -55) (undo-tree-id65882 . -55) (undo-tree-id65883 . -55) (undo-tree-id65884 . -55) (undo-tree-id65885 . -55) (undo-tree-id65886 . -54) (undo-tree-id65887 . -54) (undo-tree-id65888 . -54) (undo-tree-id65889 . -54) (undo-tree-id65890 . -54) (undo-tree-id65891 . -54) (undo-tree-id65892 . -53) (undo-tree-id65893 . -53) (undo-tree-id65894 . -53) (undo-tree-id65895 . -53) (undo-tree-id65896 . -53) (undo-tree-id65897 . -53) (undo-tree-id65898 . -52) (undo-tree-id65899 . -52) (undo-tree-id65900 . -52) (undo-tree-id65901 . -52) (undo-tree-id65902 . -52) (undo-tree-id65903 . -52) (undo-tree-id65904 . -51) (undo-tree-id65905 . -51) (undo-tree-id65906 . -51) (undo-tree-id65907 . -51) (undo-tree-id65908 . -51) (undo-tree-id65909 . -51) (undo-tree-id65910 . -50) (undo-tree-id65911 . -50) (undo-tree-id65912 . -50) (undo-tree-id65913 . -50) (undo-tree-id65914 . -50) (undo-tree-id65915 . -50) (undo-tree-id65916 . -49) (undo-tree-id65917 . -49) (undo-tree-id65918 . -49) (undo-tree-id65919 . -49) (undo-tree-id65920 . -49) (undo-tree-id65921 . -49) (undo-tree-id65922 . -48) (undo-tree-id65923 . -48) (undo-tree-id65924 . -48) (undo-tree-id65925 . -48) (undo-tree-id65926 . -48) (undo-tree-id65927 . -48) (undo-tree-id65928 . -47) (undo-tree-id65929 . -47) (undo-tree-id65930 . -47) (undo-tree-id65931 . -47) (undo-tree-id65932 . -47) (undo-tree-id65933 . -47) (undo-tree-id65934 . -46) (undo-tree-id65935 . -46) (undo-tree-id65936 . -46) (undo-tree-id65937 . -46) (undo-tree-id65938 . -46) (undo-tree-id65939 . -46) (undo-tree-id65940 . -45) (undo-tree-id65941 . -45) (undo-tree-id65942 . -45) (undo-tree-id65943 . -45) (undo-tree-id65944 . -45) (undo-tree-id65945 . -45) (undo-tree-id65946 . -44) (undo-tree-id65947 . -44) (undo-tree-id65948 . -44) (undo-tree-id65949 . -44) (undo-tree-id65950 . -44) (undo-tree-id65951 . -44) (undo-tree-id65952 . -43) (undo-tree-id65953 . -43) (undo-tree-id65954 . -43) (undo-tree-id65955 . -43) (undo-tree-id65956 . -43) (undo-tree-id65957 . -43) (undo-tree-id65958 . -42) (undo-tree-id65959 . -42) (undo-tree-id65960 . -42) (undo-tree-id65961 . -42) (undo-tree-id65962 . -42) (undo-tree-id65963 . -42) (undo-tree-id65964 . -41) (undo-tree-id65965 . -41) (undo-tree-id65966 . -41) (undo-tree-id65967 . -41) (undo-tree-id65968 . -41) (undo-tree-id65969 . -41) (undo-tree-id65970 . -40) (undo-tree-id65971 . -40) (undo-tree-id65972 . -40) (undo-tree-id65973 . -40) (undo-tree-id65974 . -40) (undo-tree-id65975 . -40) (undo-tree-id65976 . -39) (undo-tree-id65977 . -39) (undo-tree-id65978 . -39) (undo-tree-id65979 . -39) (undo-tree-id65980 . -39) (undo-tree-id65981 . -39) (undo-tree-id65982 . -38) (undo-tree-id65983 . -38) (undo-tree-id65984 . -38) (undo-tree-id65985 . -38) (undo-tree-id65986 . -38) (undo-tree-id65987 . -38) (undo-tree-id65988 . -37) (undo-tree-id65989 . -37) (undo-tree-id65990 . -37) (undo-tree-id65991 . -37) (undo-tree-id65992 . -37) (undo-tree-id65993 . -37) (undo-tree-id65994 . -36) (undo-tree-id65995 . -36) (undo-tree-id65996 . -36) (undo-tree-id65997 . -36) (undo-tree-id65998 . -36) (undo-tree-id65999 . -36) (undo-tree-id66000 . -35) (undo-tree-id66001 . -35) (undo-tree-id66002 . -35) (undo-tree-id66003 . -35) (undo-tree-id66004 . -35) (undo-tree-id66005 . -35) (undo-tree-id66006 . -34) (undo-tree-id66007 . -34) (undo-tree-id66008 . -34) (undo-tree-id66009 . -34) (undo-tree-id66010 . -34) (undo-tree-id66011 . -34) (undo-tree-id66012 . -33) (undo-tree-id66013 . -33) (undo-tree-id66014 . -33) (undo-tree-id66015 . -33) (undo-tree-id66016 . -33) (undo-tree-id66017 . -33) (undo-tree-id66018 . -32) (undo-tree-id66019 . -32) (undo-tree-id66020 . -32) (undo-tree-id66021 . -32) (undo-tree-id66022 . -32) (undo-tree-id66023 . -32) (undo-tree-id66024 . -31) (undo-tree-id66025 . -31) (undo-tree-id66026 . -31) (undo-tree-id66027 . -31) (undo-tree-id66028 . -31) (undo-tree-id66029 . -31) (undo-tree-id66030 . -30) (undo-tree-id66031 . -30) (undo-tree-id66032 . -30) (undo-tree-id66033 . -30) (undo-tree-id66034 . -30) (undo-tree-id66035 . -30) (undo-tree-id66036 . -29) (undo-tree-id66037 . -29) (undo-tree-id66038 . -29) (undo-tree-id66039 . -29) (undo-tree-id66040 . -29) (undo-tree-id66041 . -29) (undo-tree-id66042 . -28) (undo-tree-id66043 . -28) (undo-tree-id66044 . -28) (undo-tree-id66045 . -28) (undo-tree-id66046 . -28) (undo-tree-id66047 . -28) (undo-tree-id66048 . -27) (undo-tree-id66049 . -27) (undo-tree-id66050 . -27) (undo-tree-id66051 . -27) (undo-tree-id66052 . -27) (undo-tree-id66053 . -27) (undo-tree-id66054 . -26) (undo-tree-id66055 . -26) (undo-tree-id66056 . -26) (undo-tree-id66057 . -26) (undo-tree-id66058 . -26) (undo-tree-id66059 . -26) (undo-tree-id66060 . -25) (undo-tree-id66061 . -25) (undo-tree-id66062 . -25) (undo-tree-id66063 . -25) (undo-tree-id66064 . -25) (undo-tree-id66065 . -25) (undo-tree-id66066 . -24) (undo-tree-id66067 . -24) (undo-tree-id66068 . -24) (undo-tree-id66069 . -24) (undo-tree-id66070 . -24) (undo-tree-id66071 . -24) (undo-tree-id66072 . -23) (undo-tree-id66073 . -23) (undo-tree-id66074 . -23) (undo-tree-id66075 . -23) (undo-tree-id66076 . -23) (undo-tree-id66077 . -23) (undo-tree-id66078 . -22) (undo-tree-id66079 . -22) (undo-tree-id66080 . -22) (undo-tree-id66081 . -22) (undo-tree-id66082 . -22) (undo-tree-id66083 . -22) (undo-tree-id66084 . -21) (undo-tree-id66085 . -21) (undo-tree-id66086 . -21) (undo-tree-id66087 . -21) (undo-tree-id66088 . -21) (undo-tree-id66089 . -21) (undo-tree-id66090 . -20) (undo-tree-id66091 . -20) (undo-tree-id66092 . -20) (undo-tree-id66093 . -20) (undo-tree-id66094 . -20) (undo-tree-id66095 . -20) (undo-tree-id66096 . -20) (undo-tree-id66097 . -20) (undo-tree-id66098 . -20) (undo-tree-id66099 . -20) (undo-tree-id66100 . -20) (undo-tree-id66101 . -20) (undo-tree-id66102 . -20) (undo-tree-id66103 . -20) (undo-tree-id66104 . -20) (undo-tree-id66105 . -20) (undo-tree-id66106 . -20) (undo-tree-id66107 . -20) (undo-tree-id66108 . -20) (undo-tree-id66109 . -20) (undo-tree-id66110 . -20) (undo-tree-id66111 . -20) (undo-tree-id66112 . -20) (undo-tree-id66113 . -20) (undo-tree-id66114 . -20) (undo-tree-id66115 . -20) (undo-tree-id66116 . -20) (undo-tree-id66117 . -20) (undo-tree-id66118 . -20) (undo-tree-id66119 . -20) (undo-tree-id66120 . -20) (undo-tree-id66121 . -20) (undo-tree-id66122 . -20) (undo-tree-id66123 . -20) (undo-tree-id66124 . -20) (undo-tree-id66125 . -20) (undo-tree-id66126 . -20) (undo-tree-id66127 . -20) (undo-tree-id66128 . -20) (undo-tree-id66129 . -20) (undo-tree-id66130 . -20) (undo-tree-id66131 . -20) (undo-tree-id66132 . -20) (undo-tree-id66133 . -20) (undo-tree-id66134 . -20) (undo-tree-id66135 . -20) (undo-tree-id66136 . -20) (undo-tree-id66137 . -20) (undo-tree-id66138 . -20) (undo-tree-id66139 . -20) (undo-tree-id66140 . -20) (undo-tree-id66141 . -20) (undo-tree-id66142 . -20) (undo-tree-id66143 . -20) (undo-tree-id66144 . -20) (undo-tree-id66145 . -20) (undo-tree-id66146 . -20) (undo-tree-id66147 . -20) (undo-tree-id66148 . -20) (undo-tree-id66149 . -20) (undo-tree-id66150 . -20) (undo-tree-id66151 . -20) (undo-tree-id66152 . -20) (undo-tree-id66153 . -20) (undo-tree-id66154 . -20) (undo-tree-id66155 . -20) (undo-tree-id66156 . -20) (undo-tree-id66157 . -20) (undo-tree-id66158 . -20) (undo-tree-id66159 . -20) (undo-tree-id66160 . -20) (undo-tree-id66161 . -20) (undo-tree-id66162 . -20) (undo-tree-id66163 . -20) (undo-tree-id66164 . -20) (undo-tree-id66165 . -20) (undo-tree-id66166 . -20) (undo-tree-id66167 . -20) (undo-tree-id66168 . -20) (undo-tree-id66169 . -20) (undo-tree-id66170 . -20) (undo-tree-id66171 . -20) (undo-tree-id66172 . -20) (undo-tree-id66173 . -20) (undo-tree-id66174 . -20) (undo-tree-id66175 . -20) (undo-tree-id66176 . -20) (undo-tree-id66177 . -20) (undo-tree-id66178 . -20) (undo-tree-id66179 . -20) (undo-tree-id66180 . -20) (undo-tree-id66181 . -20) (undo-tree-id66182 . -20) (undo-tree-id66183 . -20) (undo-tree-id66184 . -20) (undo-tree-id66185 . -20) (undo-tree-id66186 . -20) (undo-tree-id66187 . -20) (undo-tree-id66188 . -20) (undo-tree-id66189 . -20) (undo-tree-id66190 . -20) (undo-tree-id66191 . -20) (undo-tree-id66192 . -20) (undo-tree-id66193 . -20) (undo-tree-id66194 . -20) (undo-tree-id66195 . -20) (undo-tree-id66196 . -20) (undo-tree-id66197 . -20) (undo-tree-id66198 . -20) (undo-tree-id66199 . -20) (undo-tree-id66200 . -20) (undo-tree-id66201 . -20) (undo-tree-id66202 . -20) (undo-tree-id66203 . -20) (undo-tree-id66204 . -20) (undo-tree-id66205 . -20) (undo-tree-id66206 . -20) (undo-tree-id66207 . -20) (undo-tree-id66208 . -20) (undo-tree-id66209 . -20) (undo-tree-id66210 . -31) (undo-tree-id66211 . -40) (undo-tree-id66212 . -50) (undo-tree-id66213 . -53) (undo-tree-id66214 . 81) (undo-tree-id66215 . -63) (undo-tree-id66216 . -62) (undo-tree-id66217 . -66) (undo-tree-id66218 . -77) (undo-tree-id66219 . -84) (undo-tree-id66220 . -84) (undo-tree-id66221 . -84) (undo-tree-id66222 . -84) (undo-tree-id66223 . -84) (undo-tree-id66224 . -84) (undo-tree-id66225 . -87) (undo-tree-id66226 . -87) (undo-tree-id66227 . -87) (undo-tree-id66228 . -87) (undo-tree-id66229 . -87) (undo-tree-id66230 . -87) (undo-tree-id66231 . -87) (undo-tree-id66232 . -87) (undo-tree-id66233 . -87) (undo-tree-id66234 . -87) (undo-tree-id66235 . -87) (undo-tree-id66236 . -87) (undo-tree-id66237 . -87) (undo-tree-id66238 . -87) (undo-tree-id66239 . -87) (undo-tree-id66240 . -87) (undo-tree-id66241 . -86) (undo-tree-id66242 . -86) (undo-tree-id66243 . -86) (undo-tree-id66244 . -86) (undo-tree-id66245 . -86) (undo-tree-id66246 . -86) (undo-tree-id66247 . -86) (undo-tree-id66248 . -86) (undo-tree-id66249 . -86) (undo-tree-id66250 . -86) (undo-tree-id66251 . -86) (undo-tree-id66252 . -79) (undo-tree-id66253 . -79) (undo-tree-id66254 . -79) (undo-tree-id66255 . -79) (undo-tree-id66256 . -79) (undo-tree-id66257 . -79) (undo-tree-id66258 . -79) (undo-tree-id66259 . -79) (undo-tree-id66260 . -79) (undo-tree-id66261 . -79) (undo-tree-id66262 . -79) (undo-tree-id66263 . -68) (undo-tree-id66264 . -68) (undo-tree-id66265 . -68) (undo-tree-id66266 . -68) (undo-tree-id66267 . -68) (undo-tree-id66268 . -68) (undo-tree-id66269 . -79) (undo-tree-id66270 . -79) (undo-tree-id66271 . -79) (undo-tree-id66272 . -79) (undo-tree-id66273 . -79) (undo-tree-id66274 . -79) (undo-tree-id66275 . -79) (undo-tree-id66276 . -79) (undo-tree-id66277 . -79) (undo-tree-id66278 . -79) (undo-tree-id66279 . -79) (undo-tree-id66280 . -79) (undo-tree-id66281 . -79) (undo-tree-id66282 . -79) (undo-tree-id66283 . -79) (undo-tree-id66284 . -79) (undo-tree-id66285 . -79) (undo-tree-id66286 . -79) (undo-tree-id66287 . -79) (undo-tree-id66288 . -79) (undo-tree-id66289 . -79) (undo-tree-id66290 . -79) (undo-tree-id66291 . -79) (undo-tree-id66292 . -79) (undo-tree-id66293 . -79) (undo-tree-id66294 . -79) (undo-tree-id66295 . -79) (undo-tree-id66296 . -79) (undo-tree-id66297 . -79) (undo-tree-id66298 . -80) (undo-tree-id66299 . -80) (undo-tree-id66300 . -80) (undo-tree-id66301 . -80) (undo-tree-id66302 . -80) (undo-tree-id66303 . -80) (undo-tree-id66304 . -80) (undo-tree-id66305 . -80) (undo-tree-id66306 . -80) (undo-tree-id66307 . -80) (undo-tree-id66308 . -80) (undo-tree-id66309 . -80) (undo-tree-id66310 . -80) (undo-tree-id66311 . -80) (undo-tree-id66312 . -80) (undo-tree-id66313 . -80) (undo-tree-id66314 . -80) (undo-tree-id66315 . 68) (undo-tree-id66316 . -78) (undo-tree-id66317 . -81) (undo-tree-id66318 . -81) (undo-tree-id66319 . -81) (undo-tree-id66320 . -81) (undo-tree-id66321 . -81) (undo-tree-id66322 . -81) (undo-tree-id66323 . -81) (undo-tree-id66324 . -81) (undo-tree-id66325 . -81) (undo-tree-id66326 . -81) (undo-tree-id66327 . -81) (undo-tree-id66328 . -81) (undo-tree-id66329 . -81) (undo-tree-id66330 . -81) (undo-tree-id66331 . -81) (undo-tree-id66332 . -81) (undo-tree-id66333 . -81) (undo-tree-id66334 . -80) (undo-tree-id66335 . -80) (undo-tree-id66336 . -80) (undo-tree-id66337 . -80) (undo-tree-id66338 . -80) (undo-tree-id66339 . -80) (undo-tree-id66340 . -80) (undo-tree-id66341 . -80) (undo-tree-id66342 . -80) (undo-tree-id66343 . -80) (undo-tree-id66344 . -80) (undo-tree-id66345 . -80) (undo-tree-id66346 . -80) (undo-tree-id66347 . -80) (undo-tree-id66348 . -80) (undo-tree-id66349 . -80) (undo-tree-id66350 . -80) (undo-tree-id66351 . -80) (undo-tree-id66352 . -80) (undo-tree-id66353 . -80) (undo-tree-id66354 . -80) (undo-tree-id66355 . -80) (undo-tree-id66356 . -80) (undo-tree-id66357 . -80) (undo-tree-id66358 . -80) (undo-tree-id66359 . -84) (undo-tree-id66360 . -84) (undo-tree-id66361 . -84) (undo-tree-id66362 . -84) (undo-tree-id66363 . -84) (undo-tree-id66364 . -84) (undo-tree-id66365 . -84) (undo-tree-id66366 . -84) (undo-tree-id66367 . -84) (undo-tree-id66368 . -84) (undo-tree-id66369 . -84) (undo-tree-id66370 . -84) (undo-tree-id66371 . -84) (undo-tree-id66372 . -84) (undo-tree-id66373 . -84) (undo-tree-id66374 . -84) (undo-tree-id66375 . -84) (undo-tree-id66376 . -84) (undo-tree-id66377 . -84) (undo-tree-id66378 . -84) (undo-tree-id66379 . -84) (undo-tree-id66380 . -84) (undo-tree-id66381 . -84) (undo-tree-id66382 . -84) (undo-tree-id66383 . -84) (undo-tree-id66384 . -84) (undo-tree-id66385 . -87) (undo-tree-id66386 . -87) (undo-tree-id66387 . -87) (undo-tree-id66388 . -87) (undo-tree-id66389 . -87) (undo-tree-id66390 . -87) (undo-tree-id66391 . -87) (undo-tree-id66392 . -87) (undo-tree-id66393 . -87) (undo-tree-id66394 . -87) (undo-tree-id66395 . -87) (undo-tree-id66396 . -87) (undo-tree-id66397 . -87) (undo-tree-id66398 . -87) (undo-tree-id66399 . -87) (undo-tree-id66400 . -87) (undo-tree-id66401 . -87) (undo-tree-id66402 . -87) (undo-tree-id66403 . -87) (undo-tree-id66404 . -87) (undo-tree-id66405 . -87) (undo-tree-id66406 . -91) (undo-tree-id66407 . -91) (undo-tree-id66408 . -91) (undo-tree-id66409 . -91) (undo-tree-id66410 . -91) (undo-tree-id66411 . -91) (undo-tree-id66412 . -91) (undo-tree-id66413 . -91) (undo-tree-id66414 . -91) (undo-tree-id66415 . -91) (undo-tree-id66416 . -91) (undo-tree-id66417 . -91) (undo-tree-id66418 . -91) (undo-tree-id66419 . -91) (undo-tree-id66420 . -91) (undo-tree-id66421 . -91) (undo-tree-id66422 . 43) (undo-tree-id66423 . -100) (undo-tree-id66424 . -99) (undo-tree-id66425 . -99) (undo-tree-id66426 . -99) (undo-tree-id66427 . -99) (undo-tree-id66428 . -99) (undo-tree-id66429 . -99) (undo-tree-id66430 . -99) (undo-tree-id66431 . -99) (undo-tree-id66432 . -99) (undo-tree-id66433 . -99) (undo-tree-id66434 . -99) (undo-tree-id66435 . -105) (undo-tree-id66436 . -105) (undo-tree-id66437 . -105) (undo-tree-id66438 . -105) (undo-tree-id66439 . -105) (undo-tree-id66440 . -105) (undo-tree-id66441 . -105) (undo-tree-id66442 . -105) (undo-tree-id66443 . -105) (undo-tree-id66444 . -105) (undo-tree-id66445 . -105) (undo-tree-id66446 . -105) (undo-tree-id66447 . -105) (undo-tree-id66448 . -105) (undo-tree-id66449 . -105) (undo-tree-id66450 . -105) (undo-tree-id66451 . -105) (undo-tree-id66452 . -105) (undo-tree-id66453 . -105) (undo-tree-id66454 . -105) (undo-tree-id66455 . -105) (undo-tree-id66456 . -108) (undo-tree-id66457 . -108) (undo-tree-id66458 . -108) (undo-tree-id66459 . -108) (undo-tree-id66460 . -108) (undo-tree-id66461 . -108) (undo-tree-id66462 . -108) (undo-tree-id66463 . -108) (undo-tree-id66464 . -108) (undo-tree-id66465 . -108) (undo-tree-id66466 . -108) (undo-tree-id66467 . -110) (undo-tree-id66468 . -110) (undo-tree-id66469 . -110) (undo-tree-id66470 . -110) (undo-tree-id66471 . -110) (undo-tree-id66472 . -110) (undo-tree-id66473 . -110) (undo-tree-id66474 . -110) (undo-tree-id66475 . -110) (undo-tree-id66476 . -110) (undo-tree-id66477 . -110) (undo-tree-id66478 . -110) (undo-tree-id66479 . -110) (undo-tree-id66480 . -110) (undo-tree-id66481 . -110) (undo-tree-id66482 . -110) (undo-tree-id66483 . -119) (undo-tree-id66484 . -119) (undo-tree-id66485 . -119) (undo-tree-id66486 . -119) (undo-tree-id66487 . -119) (undo-tree-id66488 . -119) (undo-tree-id66489 . -119) (undo-tree-id66490 . -119) (undo-tree-id66491 . -119) (undo-tree-id66492 . -119) (undo-tree-id66493 . -119) (undo-tree-id66494 . -120) (undo-tree-id66495 . -120) (undo-tree-id66496 . -120) (undo-tree-id66497 . -120) (undo-tree-id66498 . -120) (undo-tree-id66499 . -120) (undo-tree-id66500 . -120) (undo-tree-id66501 . -120) (undo-tree-id66502 . -120) (undo-tree-id66503 . -120) (undo-tree-id66504 . -120) (undo-tree-id66505 . -131) (undo-tree-id66506 . -131) (undo-tree-id66507 . -131) (undo-tree-id66508 . -131) (undo-tree-id66509 . -131) (undo-tree-id66510 . -131) (undo-tree-id66511 . -131) (undo-tree-id66512 . -131) (undo-tree-id66513 . -131) (undo-tree-id66514 . -131) (undo-tree-id66515 . -131) (undo-tree-id66516 . -135) (undo-tree-id66517 . -135) (undo-tree-id66518 . -135) (undo-tree-id66519 . -135) (undo-tree-id66520 . -135) (undo-tree-id66521 . -135) (undo-tree-id66522 . -135) (undo-tree-id66523 . -135) (undo-tree-id66524 . -135) (undo-tree-id66525 . -135) (undo-tree-id66526 . -135) (undo-tree-id66527 . -135) (undo-tree-id66528 . -135) (undo-tree-id66529 . -135) (undo-tree-id66530 . -135) (undo-tree-id66531 . -135) (undo-tree-id66532 . -136) (undo-tree-id66533 . -136) (undo-tree-id66534 . -136) (undo-tree-id66535 . -136) (undo-tree-id66536 . -136) (undo-tree-id66537 . -136) (undo-tree-id66538 . -136) (undo-tree-id66539 . -136) (undo-tree-id66540 . -136) (undo-tree-id66541 . -136) (undo-tree-id66542 . -136) (undo-tree-id66543 . -136) (undo-tree-id66544 . -136) (undo-tree-id66545 . -136) (undo-tree-id66546 . -136) (undo-tree-id66547 . -136) (undo-tree-id66548 . -136) (undo-tree-id66549 . -136) (undo-tree-id66550 . -136) (undo-tree-id66551 . -136) (undo-tree-id66552 . -136) (undo-tree-id66553 . -136) (undo-tree-id66554 . -136) (undo-tree-id66555 . -136) (undo-tree-id66556 . -136) (undo-tree-id66557 . -136) (undo-tree-id66558 . -136) (undo-tree-id66559 . -136) (undo-tree-id66560 . -136) (undo-tree-id66561 . -136) (undo-tree-id66562 . -136) (undo-tree-id66563 . -136) (undo-tree-id66564 . -136) (undo-tree-id66565 . -136) (undo-tree-id66566 . -136) (undo-tree-id66567 . -18) (11892 . 11910) (#(" treating spaces" 0 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12010) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12010) (undo-tree-id66568 . -1) (undo-tree-id66569 . -1) (undo-tree-id66570 . -1)) nil (25767 17537 380496 38000) 0 nil])
([nil nil ((12027 . 12028) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12027) (undo-tree-id65264 . 1) (undo-tree-id65265 . -1) 12012) nil (25767 17537 379709 857000) 0 nil])
([nil nil ((12012 . 12013) (#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12012)) nil (25767 17537 379707 459000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12017) (undo-tree-id65262 . -1) (undo-tree-id65263 . -1)) nil (25767 17537 379706 533000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12017) (undo-tree-id65260 . -1) (undo-tree-id65261 . -1)) nil (25767 17537 379704 660000) 0 nil])
([nil nil ((#("g" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12017) (undo-tree-id65257 . -1) (undo-tree-id65258 . -1) (undo-tree-id65259 . -1)) nil (25767 17537 379702 707000) 0 nil])
([nil nil ((12010 . 12100) (#("- With this approach, even if your model encounters a
- Treat spaces like other characters" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 53 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 53 54 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 54 55 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 55 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 56 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 68 69 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 69 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 12010) (undo-tree-id64863 . -90) (undo-tree-id64864 . -90) (undo-tree-id64865 . -56) (undo-tree-id64866 . -56) (undo-tree-id64867 . 33) (undo-tree-id64868 . -90) (undo-tree-id64869 . -56) (undo-tree-id64870 . -56) (undo-tree-id64871 . -56) (undo-tree-id64872 . -56) (undo-tree-id64873 . -56) (undo-tree-id64874 . -56) (undo-tree-id64875 . -56) (undo-tree-id64876 . -55) (undo-tree-id64877 . -55) (undo-tree-id64878 . -55) (undo-tree-id64879 . -55) (undo-tree-id64880 . -55) (undo-tree-id64881 . -55) (undo-tree-id64882 . -55) (undo-tree-id64883 . -55) (undo-tree-id64884 . -55) (undo-tree-id64885 . -55) (undo-tree-id64886 . -55) (undo-tree-id64887 . -55) (undo-tree-id64888 . -55) (undo-tree-id64889 . -55) (undo-tree-id64890 . -55) (undo-tree-id64891 . -56) (undo-tree-id64892 . -68) (undo-tree-id64893 . -68) (undo-tree-id64894 . -68) (undo-tree-id64895 . -68) (undo-tree-id64896 . -68) (undo-tree-id64897 . -68) (undo-tree-id64898 . -68) (undo-tree-id64899 . -68) (undo-tree-id64900 . -68) (undo-tree-id64901 . -68) (undo-tree-id64902 . -68) (undo-tree-id64903 . -68) (undo-tree-id64904 . -68) (undo-tree-id64905 . -68) (undo-tree-id64906 . -68) (undo-tree-id64907 . -68) (undo-tree-id64908 . -68) (undo-tree-id64909 . -68) (undo-tree-id64910 . -68) (undo-tree-id64911 . -68) (undo-tree-id64912 . -68) (undo-tree-id64913 . -62) (undo-tree-id64914 . -62) (undo-tree-id64915 . -62) (undo-tree-id64916 . -62) (undo-tree-id64917 . -62) (undo-tree-id64918 . -62) (undo-tree-id64919 . -62) (undo-tree-id64920 . -62) (undo-tree-id64921 . -62) (undo-tree-id64922 . -62) (undo-tree-id64923 . -62) (undo-tree-id64924 . -56) (undo-tree-id64925 . -56) (undo-tree-id64926 . -56) (undo-tree-id64927 . -56) (undo-tree-id64928 . -56) (undo-tree-id64929 . -56) (undo-tree-id64930 . -56) (undo-tree-id64931 . -56) (undo-tree-id64932 . -56) (undo-tree-id64933 . -56) (undo-tree-id64934 . -56) (undo-tree-id64935 . -56) (undo-tree-id64936 . -56) (undo-tree-id64937 . -56) (undo-tree-id64938 . -56) (undo-tree-id64939 . -56) (undo-tree-id64940 . -56) (undo-tree-id64941 . -56) (undo-tree-id64942 . -56) (undo-tree-id64943 . -56) (undo-tree-id64944 . -56) (undo-tree-id64945 . -56) (undo-tree-id64946 . -56) (undo-tree-id64947 . -56) (undo-tree-id64948 . -56) (undo-tree-id64949 . -56) (undo-tree-id64950 . -56) (undo-tree-id64951 . -56) (undo-tree-id64952 . -56) (undo-tree-id64953 . -56) (undo-tree-id64954 . -56) (undo-tree-id64955 . -56) (undo-tree-id64956 . -56) (undo-tree-id64957 . -56) (undo-tree-id64958 . -56) (undo-tree-id64959 . -56) (undo-tree-id64960 . -56) (undo-tree-id64961 . -56) (undo-tree-id64962 . -56) (undo-tree-id64963 . -56) (undo-tree-id64964 . -56) (undo-tree-id64965 . -56) (undo-tree-id64966 . -56) (undo-tree-id64967 . -56) (undo-tree-id64968 . -56) (undo-tree-id64969 . -56) (undo-tree-id64970 . -56) (undo-tree-id64971 . -56) (undo-tree-id64972 . -56) (undo-tree-id64973 . -56) (undo-tree-id64974 . -56) (undo-tree-id64975 . -56) (undo-tree-id64976 . -56) (undo-tree-id64977 . -56) (undo-tree-id64978 . -56) (undo-tree-id64979 . -56) (undo-tree-id64980 . -56) (undo-tree-id64981 . -56) (undo-tree-id64982 . -56) (undo-tree-id64983 . -56) (undo-tree-id64984 . -56) (undo-tree-id64985 . -56) (undo-tree-id64986 . -56) (undo-tree-id64987 . -56) (undo-tree-id64988 . -56) (undo-tree-id64989 . -56) (undo-tree-id64990 . -56) (undo-tree-id64991 . -56) (undo-tree-id64992 . -56) (undo-tree-id64993 . -56) (undo-tree-id64994 . -56) (undo-tree-id64995 . -56) (undo-tree-id64996 . -56) (undo-tree-id64997 . -57) (undo-tree-id64998 . -57) (undo-tree-id64999 . -57) (undo-tree-id65000 . -57) (undo-tree-id65001 . -57) (undo-tree-id65002 . -57) (undo-tree-id65003 . -57) (undo-tree-id65004 . -57) (undo-tree-id65005 . -57) (undo-tree-id65006 . -57) (undo-tree-id65007 . -57) (undo-tree-id65008 . -57) (undo-tree-id65009 . -57) (undo-tree-id65010 . -57) (undo-tree-id65011 . -57) (undo-tree-id65012 . -57) (undo-tree-id65013 . -58) (undo-tree-id65014 . -58) (undo-tree-id65015 . -58) (undo-tree-id65016 . -58) (undo-tree-id65017 . -58) (undo-tree-id65018 . -58) (undo-tree-id65019 . -58) (undo-tree-id65020 . -58) (undo-tree-id65021 . -58) (undo-tree-id65022 . -58) (undo-tree-id65023 . -58) (undo-tree-id65024 . -59) (undo-tree-id65025 . -59) (undo-tree-id65026 . -59) (undo-tree-id65027 . -59) (undo-tree-id65028 . -59) (undo-tree-id65029 . -59) (undo-tree-id65030 . -59) (undo-tree-id65031 . -59) (undo-tree-id65032 . -59) (undo-tree-id65033 . -59) (undo-tree-id65034 . -59) (undo-tree-id65035 . -60) (undo-tree-id65036 . -60) (undo-tree-id65037 . -60) (undo-tree-id65038 . -60) (undo-tree-id65039 . -60) (undo-tree-id65040 . -60) (undo-tree-id65041 . -60) (undo-tree-id65042 . -60) (undo-tree-id65043 . -60) (undo-tree-id65044 . -60) (undo-tree-id65045 . -60) (undo-tree-id65046 . -61) (undo-tree-id65047 . -61) (undo-tree-id65048 . -61) (undo-tree-id65049 . -61) (undo-tree-id65050 . -61) (undo-tree-id65051 . -61) (undo-tree-id65052 . -61) (undo-tree-id65053 . -61) (undo-tree-id65054 . -61) (undo-tree-id65055 . -61) (undo-tree-id65056 . -61) (undo-tree-id65057 . -61) (undo-tree-id65058 . -61) (undo-tree-id65059 . -61) (undo-tree-id65060 . -61) (undo-tree-id65061 . -61) (undo-tree-id65062 . -61) (undo-tree-id65063 . -61) (undo-tree-id65064 . -61) (undo-tree-id65065 . -61) (undo-tree-id65066 . -61) (undo-tree-id65067 . -61) (undo-tree-id65068 . -61) (undo-tree-id65069 . -61) (undo-tree-id65070 . -61) (undo-tree-id65071 . -61) (undo-tree-id65072 . -61) (undo-tree-id65073 . -61) (undo-tree-id65074 . -61) (undo-tree-id65075 . -61) (undo-tree-id65076 . -61) (undo-tree-id65077 . -61) (undo-tree-id65078 . -61) (undo-tree-id65079 . -61) (undo-tree-id65080 . -61) (undo-tree-id65081 . -61) (undo-tree-id65082 . -61) (undo-tree-id65083 . -61) (undo-tree-id65084 . -61) (undo-tree-id65085 . -61) (undo-tree-id65086 . -61) (undo-tree-id65087 . -61) (undo-tree-id65088 . -61) (undo-tree-id65089 . -61) (undo-tree-id65090 . -61) (undo-tree-id65091 . -61) (undo-tree-id65092 . -61) (undo-tree-id65093 . -61) (undo-tree-id65094 . -61) (undo-tree-id65095 . -61) (undo-tree-id65096 . -61) (undo-tree-id65097 . -61) (undo-tree-id65098 . -61) (undo-tree-id65099 . -61) (undo-tree-id65100 . -61) (undo-tree-id65101 . -61) (undo-tree-id65102 . -61) (undo-tree-id65103 . -67) (undo-tree-id65104 . -67) (undo-tree-id65105 . -67) (undo-tree-id65106 . -67) (undo-tree-id65107 . -67) (undo-tree-id65108 . -67) (undo-tree-id65109 . -67) (undo-tree-id65110 . -67) (undo-tree-id65111 . -67) (undo-tree-id65112 . -67) (undo-tree-id65113 . -67) (undo-tree-id65114 . -72) (undo-tree-id65115 . -72) (undo-tree-id65116 . -72) (undo-tree-id65117 . -72) (undo-tree-id65118 . -72) (undo-tree-id65119 . -72) (undo-tree-id65120 . -72) (undo-tree-id65121 . -72) (undo-tree-id65122 . -72) (undo-tree-id65123 . -72) (undo-tree-id65124 . -72) (undo-tree-id65125 . -72) (undo-tree-id65126 . -72) (undo-tree-id65127 . -72) (undo-tree-id65128 . -72) (undo-tree-id65129 . -72) (undo-tree-id65130 . -78) (undo-tree-id65131 . -78) (undo-tree-id65132 . -78) (undo-tree-id65133 . -78) (undo-tree-id65134 . -78) (undo-tree-id65135 . -78) (undo-tree-id65136 . -78) (undo-tree-id65137 . -78) (undo-tree-id65138 . -78) (undo-tree-id65139 . -78) (undo-tree-id65140 . -78) (undo-tree-id65141 . -89) (undo-tree-id65142 . -89) (undo-tree-id65143 . -89) (undo-tree-id65144 . -89) (undo-tree-id65145 . -89) (undo-tree-id65146 . -89) (undo-tree-id65147 . -89) (undo-tree-id65148 . -89) (undo-tree-id65149 . -89) (undo-tree-id65150 . -89) (undo-tree-id65151 . -89) (undo-tree-id65152 . -90) (undo-tree-id65153 . -90) (undo-tree-id65154 . -90) (undo-tree-id65155 . -90) (undo-tree-id65156 . -90) (undo-tree-id65157 . -90) (undo-tree-id65158 . -90) (undo-tree-id65159 . -90) (undo-tree-id65160 . -90) (undo-tree-id65161 . -90) (undo-tree-id65162 . -90) (undo-tree-id65163 . -90) (undo-tree-id65164 . -90) (undo-tree-id65165 . -90) (undo-tree-id65166 . -90) (undo-tree-id65167 . -90) (undo-tree-id65168 . -90) (undo-tree-id65169 . -90) (undo-tree-id65170 . -90) (undo-tree-id65171 . -90) (undo-tree-id65172 . -90) (undo-tree-id65173 . -90) (undo-tree-id65174 . -90) (undo-tree-id65175 . -90) (undo-tree-id65176 . -90) (undo-tree-id65177 . -90) (undo-tree-id65178 . -90) (undo-tree-id65179 . -90) (undo-tree-id65180 . -90) (undo-tree-id65181 . -90) (undo-tree-id65182 . -90) (undo-tree-id65183 . -90) (undo-tree-id65184 . -90) (undo-tree-id65185 . -90) (undo-tree-id65186 . -90) (undo-tree-id65187 . -90) (undo-tree-id65188 . -90) (undo-tree-id65189 . -90) (undo-tree-id65190 . -90) (undo-tree-id65191 . -90) (undo-tree-id65192 . -90) (undo-tree-id65193 . -90) (undo-tree-id65194 . -90) (undo-tree-id65195 . -90) (undo-tree-id65196 . -89) (undo-tree-id65197 . -89) (undo-tree-id65198 . -89) (undo-tree-id65199 . -89) (undo-tree-id65200 . -89) (undo-tree-id65201 . -89) (undo-tree-id65202 . -89) (undo-tree-id65203 . -89) (undo-tree-id65204 . -89) (undo-tree-id65205 . -89) (undo-tree-id65206 . -89) (undo-tree-id65207 . -89) (undo-tree-id65208 . -89) (undo-tree-id65209 . -89) (undo-tree-id65210 . -89) (undo-tree-id65211 . -89) (undo-tree-id65212 . -89) (undo-tree-id65213 . -89) (undo-tree-id65214 . -89) (undo-tree-id65215 . -89) (undo-tree-id65216 . -90) (undo-tree-id65217 . -90) (undo-tree-id65218 . -90) (undo-tree-id65219 . -90) (undo-tree-id65220 . -90) (undo-tree-id65221 . -90) (undo-tree-id65222 . -90) (undo-tree-id65223 . -90) (undo-tree-id65224 . -90) (undo-tree-id65225 . -90) (undo-tree-id65226 . -90) (undo-tree-id65227 . -90) (undo-tree-id65228 . -90) (undo-tree-id65229 . -90) (undo-tree-id65230 . -90) (undo-tree-id65231 . -90) (undo-tree-id65232 . -90) (undo-tree-id65233 . -90) (undo-tree-id65234 . -90) (undo-tree-id65235 . -90) (undo-tree-id65236 . -90) (undo-tree-id65237 . -90) (undo-tree-id65238 . -90) (undo-tree-id65239 . -90) (undo-tree-id65240 . -90) (undo-tree-id65241 . -90) (undo-tree-id65242 . -90) (undo-tree-id65243 . -90) (undo-tree-id65244 . -90) (undo-tree-id65245 . -90) (undo-tree-id65246 . -90) (undo-tree-id65247 . -90) (undo-tree-id65248 . -90) (undo-tree-id65249 . -90) (undo-tree-id65250 . -90) (undo-tree-id65251 . -54) (12010 . 12064) (#(" With this approach, even if your model encounters a" 0 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12046) (undo-tree-id65252 . 52) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12046) (undo-tree-id65253 . 1) (undo-tree-id65254 . -1) (undo-tree-id65255 . -1) (undo-tree-id65256 . -1)) nil (25767 17537 379683 790000) 0 nil])
([nil nil ((#("With this approach, even if" 0 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12049) (undo-tree-id64849 . -26) (undo-tree-id64850 . -26) (undo-tree-id64851 . 27) (undo-tree-id64852 . -26) (undo-tree-id64853 . -27) (undo-tree-id64854 . -26) (undo-tree-id64855 . -3) (undo-tree-id64856 . -8) (undo-tree-id64857 . -17) (undo-tree-id64858 . -18) (undo-tree-id64859 . -23) (undo-tree-id64860 . -26) (undo-tree-id64861 . -26) (undo-tree-id64862 . -27) 12075) nil (25767 17537 376695 74000) 0 nil])
([nil nil ((12049 . 12051)) nil (25767 17537 376684 6000) 0 nil])
([nil nil ((12075 . 12076) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12075) (undo-tree-id64848 . -1) 12050) nil (25767 17537 376683 2000) 0 nil])
([nil nil ((12152 . 12154)) nil (25767 17537 376680 865000) 0 nil])
([nil nil ((#("For example, " 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 7 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12154) (undo-tree-id64739 . -12) (undo-tree-id64740 . -12) (undo-tree-id64741 . 13) (undo-tree-id64742 . -12) (undo-tree-id64743 . -6) (undo-tree-id64744 . -6) (undo-tree-id64745 . -6) (undo-tree-id64746 . -6) (undo-tree-id64747 . -6) (undo-tree-id64748 . -6) (undo-tree-id64749 . -6) (undo-tree-id64750 . -6) (undo-tree-id64751 . -6) (undo-tree-id64752 . -6) (undo-tree-id64753 . -6) (undo-tree-id64754 . -4) (undo-tree-id64755 . -4) (undo-tree-id64756 . -4) (undo-tree-id64757 . -4) (undo-tree-id64758 . -4) (undo-tree-id64759 . -4) (undo-tree-id64760 . -4) (undo-tree-id64761 . -4) (undo-tree-id64762 . -4) (undo-tree-id64763 . -4) (undo-tree-id64764 . -4) (undo-tree-id64765 . -13) (undo-tree-id64766 . -12) (undo-tree-id64767 . -2) (undo-tree-id64768 . -2) (undo-tree-id64769 . -2) (undo-tree-id64770 . -2) (undo-tree-id64771 . -2) (undo-tree-id64772 . -2) (undo-tree-id64773 . -2) (undo-tree-id64774 . -2) (undo-tree-id64775 . -2) (undo-tree-id64776 . -2) (undo-tree-id64777 . -2) (undo-tree-id64778 . -2) (undo-tree-id64779 . -2) (undo-tree-id64780 . -2) (undo-tree-id64781 . -2) (undo-tree-id64782 . -2) (undo-tree-id64783 . -10) (undo-tree-id64784 . -10) (undo-tree-id64785 . -10) (undo-tree-id64786 . -10) (undo-tree-id64787 . -10) (undo-tree-id64788 . -10) (undo-tree-id64789 . -10) (undo-tree-id64790 . -10) (undo-tree-id64791 . -10) (undo-tree-id64792 . -10) (undo-tree-id64793 . -10) (undo-tree-id64794 . -10) (undo-tree-id64795 . -10) (undo-tree-id64796 . -10) (undo-tree-id64797 . -10) (undo-tree-id64798 . -10) (undo-tree-id64799 . -11) (undo-tree-id64800 . -11) (undo-tree-id64801 . -11) (undo-tree-id64802 . -11) (undo-tree-id64803 . -11) (undo-tree-id64804 . -11) (undo-tree-id64805 . -11) (undo-tree-id64806 . -11) (undo-tree-id64807 . -11) (undo-tree-id64808 . -11) (undo-tree-id64809 . -11) (undo-tree-id64810 . -11) (undo-tree-id64811 . -11) (undo-tree-id64812 . -11) (undo-tree-id64813 . -11) (undo-tree-id64814 . -11) (undo-tree-id64815 . -11) (undo-tree-id64816 . -11) (undo-tree-id64817 . -11) (undo-tree-id64818 . -11) (undo-tree-id64819 . -11) (undo-tree-id64820 . -11) (undo-tree-id64821 . -11) (undo-tree-id64822 . -11) (undo-tree-id64823 . -11) (undo-tree-id64824 . -11) (undo-tree-id64825 . -12) (undo-tree-id64826 . -12) (undo-tree-id64827 . -12) (undo-tree-id64828 . -12) (undo-tree-id64829 . -12) (undo-tree-id64830 . -12) (undo-tree-id64831 . -12) (undo-tree-id64832 . -12) (undo-tree-id64833 . -12) (undo-tree-id64834 . -12) (undo-tree-id64835 . -12) (undo-tree-id64836 . -12) (undo-tree-id64837 . -12) (undo-tree-id64838 . -12) (undo-tree-id64839 . -12) (undo-tree-id64840 . -12) (undo-tree-id64841 . -12) (undo-tree-id64842 . -12) (undo-tree-id64843 . -12) (undo-tree-id64844 . -12) (undo-tree-id64845 . -12) (undo-tree-id64846 . -12) (undo-tree-id64847 . -13) 12166) nil (25767 17537 376676 390000) 0 nil])
([nil nil ((12154 . 12155) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12154)) nil (25767 17537 376596 200000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -12152) (undo-tree-id64729 . -2) (undo-tree-id64730 . -2) (undo-tree-id64731 . -2) (undo-tree-id64732 . -2) (undo-tree-id64733 . -2) (undo-tree-id64734 . -2) (undo-tree-id64735 . -2) (undo-tree-id64736 . -2) (undo-tree-id64737 . -2) (undo-tree-id64738 . -2) 12154 (12151 . 12154) 12125) nil (25767 17537 376594 619000) 0 nil])
([nil nil ((12290 . 12291) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12290) (undo-tree-id64727 . -1) (12214 . 12215) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12214) (undo-tree-id64728 . -1) 12155) nil (25767 17537 376584 922000) 0 nil])
([nil nil ((12630 . 12631) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12630) (undo-tree-id64722 . -1) (12557 . 12558) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12557) (undo-tree-id64723 . -1) (12484 . 12485) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12484) (undo-tree-id64724 . -1) (12428 . 12429) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12428) (undo-tree-id64725 . -1) (12357 . 12358) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12357) (undo-tree-id64726 . -1) 12290) nil (25767 17537 376577 857000) 0 nil])
([nil nil ((12187 . 12188) (#("“" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12187) (undo-tree-id72668 . -1) (t 25767 17537 454807 546000)) nil (25767 17609 973703 295000) 0 nil])
([nil nil ((12196 . 12197) (#("”" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12196) (undo-tree-id72667 . -1)) nil (25767 17609 973701 783000) 0 nil])
([nil nil ((12247 . 12248) (#("“" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12247) (undo-tree-id72666 . -1)) nil (25767 17609 973700 262000) 0 nil])
([nil nil ((12253 . 12254) (#("”" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12253) (undo-tree-id72665 . -1)) nil (25767 17609 973698 576000) 0 nil])
([nil nil ((#("so it can infer the meaning of “smartest.”" 0 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12315) (undo-tree-id72505 . -41) (undo-tree-id72506 . -41) (undo-tree-id72507 . -41) (undo-tree-id72508 . -13) (undo-tree-id72509 . -13) (undo-tree-id72510 . -13) (undo-tree-id72511 . -13) (undo-tree-id72512 . -13) (undo-tree-id72513 . -13) (undo-tree-id72514 . -3) (undo-tree-id72515 . -3) (undo-tree-id72516 . -3) (undo-tree-id72517 . -3) (undo-tree-id72518 . -3) (undo-tree-id72519 . -3) (undo-tree-id72520 . -3) (undo-tree-id72521 . -3) (undo-tree-id72522 . -3) (undo-tree-id72523 . -3) (undo-tree-id72524 . -3) (undo-tree-id72525 . -3) (undo-tree-id72526 . -3) (undo-tree-id72527 . -3) (undo-tree-id72528 . -3) (undo-tree-id72529 . -3) (undo-tree-id72530 . -42) (undo-tree-id72531 . -41) (undo-tree-id72532 . -1) (undo-tree-id72533 . -1) (undo-tree-id72534 . -1) (undo-tree-id72535 . -1) (undo-tree-id72536 . -1) (undo-tree-id72537 . -1) (undo-tree-id72538 . -1) (undo-tree-id72539 . -1) (undo-tree-id72540 . -1) (undo-tree-id72541 . -1) (undo-tree-id72542 . -1) (undo-tree-id72543 . -1) (undo-tree-id72544 . -1) (undo-tree-id72545 . -1) (undo-tree-id72546 . -1) (undo-tree-id72547 . -1) (undo-tree-id72548 . -1) (undo-tree-id72549 . -1) (undo-tree-id72550 . -1) (undo-tree-id72551 . -1) (undo-tree-id72552 . -1) (undo-tree-id72553 . -4) (undo-tree-id72554 . -4) (undo-tree-id72555 . -4) (undo-tree-id72556 . -4) (undo-tree-id72557 . -4) (undo-tree-id72558 . -4) (undo-tree-id72559 . -8) (undo-tree-id72560 . -8) (undo-tree-id72561 . -8) (undo-tree-id72562 . -8) (undo-tree-id72563 . -8) (undo-tree-id72564 . -8) (undo-tree-id72565 . -14) (undo-tree-id72566 . -14) (undo-tree-id72567 . -14) (undo-tree-id72568 . -14) (undo-tree-id72569 . -14) (undo-tree-id72570 . -14) (undo-tree-id72571 . -18) (undo-tree-id72572 . -18) (undo-tree-id72573 . -18) (undo-tree-id72574 . -18) (undo-tree-id72575 . -18) (undo-tree-id72576 . -18) (undo-tree-id72577 . -26) (undo-tree-id72578 . -26) (undo-tree-id72579 . -26) (undo-tree-id72580 . -26) (undo-tree-id72581 . -26) (undo-tree-id72582 . -26) (undo-tree-id72583 . -29) (undo-tree-id72584 . -29) (undo-tree-id72585 . -29) (undo-tree-id72586 . -29) (undo-tree-id72587 . -29) (undo-tree-id72588 . -29) (undo-tree-id72589 . -31) (undo-tree-id72590 . -31) (undo-tree-id72591 . -31) (undo-tree-id72592 . -31) (undo-tree-id72593 . -31) (undo-tree-id72594 . -31) (undo-tree-id72595 . -39) (undo-tree-id72596 . -39) (undo-tree-id72597 . -39) (undo-tree-id72598 . -39) (undo-tree-id72599 . -39) (undo-tree-id72600 . -39) (undo-tree-id72601 . -39) (undo-tree-id72602 . -39) (undo-tree-id72603 . -39) (undo-tree-id72604 . -39) (undo-tree-id72605 . -39) (undo-tree-id72606 . -39) (undo-tree-id72607 . -39) (undo-tree-id72608 . -39) (undo-tree-id72609 . -39) (undo-tree-id72610 . -39) (undo-tree-id72611 . -39) (undo-tree-id72612 . -39) (undo-tree-id72613 . -39) (undo-tree-id72614 . -39) (undo-tree-id72615 . -39) (undo-tree-id72616 . -39) (undo-tree-id72617 . -39) (undo-tree-id72618 . -39) (undo-tree-id72619 . -39) (undo-tree-id72620 . -39) (undo-tree-id72621 . -40) (undo-tree-id72622 . -40) (undo-tree-id72623 . -40) (undo-tree-id72624 . -40) (undo-tree-id72625 . -40) (undo-tree-id72626 . -40) (undo-tree-id72627 . -40) (undo-tree-id72628 . -40) (undo-tree-id72629 . -40) (undo-tree-id72630 . -40) (undo-tree-id72631 . -40) (undo-tree-id72632 . -40) (undo-tree-id72633 . -40) (undo-tree-id72634 . -40) (undo-tree-id72635 . -40) (undo-tree-id72636 . -40) (undo-tree-id72637 . -41) (undo-tree-id72638 . -41) (undo-tree-id72639 . -41) (undo-tree-id72640 . -41) (undo-tree-id72641 . -41) (undo-tree-id72642 . -41) (undo-tree-id72643 . -41) (undo-tree-id72644 . -41) (undo-tree-id72645 . -41) (undo-tree-id72646 . -41) (undo-tree-id72647 . -41) (undo-tree-id72648 . -41) (undo-tree-id72649 . -41) (undo-tree-id72650 . -41) (undo-tree-id72651 . -41) (undo-tree-id72652 . -41) (undo-tree-id72653 . -41) (undo-tree-id72654 . -41) (undo-tree-id72655 . -41) (undo-tree-id72656 . -41) (undo-tree-id72657 . -41) (undo-tree-id72658 . -41) (undo-tree-id72659 . -41) (undo-tree-id72660 . -41) (undo-tree-id72661 . -41) (undo-tree-id72662 . -41) (undo-tree-id72663 . -41) (undo-tree-id72664 . -42) 12356) nil (25767 17609 973692 564000) 0 nil])
([nil nil ((#(" Google’s SentencePiece project provides an open source implementation, described in a paper5 by Taku Kudo and John Richardson. Another option was proposed in an earlier paper6 by Rico Sennrich et al. that explored " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 127 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 127 128 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 128 200 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 200 201 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 201 215 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12315) (undo-tree-id71817 . -214) (undo-tree-id71818 . -214) (undo-tree-id71819 . -214) (undo-tree-id71820 . -214) (undo-tree-id71821 . -214) (undo-tree-id71822 . -214) (undo-tree-id71823 . -214) (undo-tree-id71824 . -214) (undo-tree-id71825 . -214) (undo-tree-id71826 . -214) (undo-tree-id71827 . -214) (undo-tree-id71828 . -214) (undo-tree-id71829 . -214) (undo-tree-id71830 . -214) (undo-tree-id71831 . -214) (undo-tree-id71832 . -214) (undo-tree-id71833 . -214) (undo-tree-id71834 . -214) (undo-tree-id71835 . -214) (undo-tree-id71836 . -155) (undo-tree-id71837 . -155) (undo-tree-id71838 . -155) (undo-tree-id71839 . -155) (undo-tree-id71840 . -155) (undo-tree-id71841 . -155) (undo-tree-id71842 . -93) (undo-tree-id71843 . -93) (undo-tree-id71844 . -93) (undo-tree-id71845 . -93) (undo-tree-id71846 . -93) (undo-tree-id71847 . -93) (undo-tree-id71848 . -33) (undo-tree-id71849 . -33) (undo-tree-id71850 . -33) (undo-tree-id71851 . -33) (undo-tree-id71852 . -33) (undo-tree-id71853 . -33) (undo-tree-id71854 . -215) (undo-tree-id71855 . -214) (undo-tree-id71856 . -6) (undo-tree-id71857 . -6) (undo-tree-id71858 . -6) (undo-tree-id71859 . -6) (undo-tree-id71860 . -6) (undo-tree-id71861 . -6) (undo-tree-id71862 . -6) (undo-tree-id71863 . -6) (undo-tree-id71864 . -6) (undo-tree-id71865 . -6) (undo-tree-id71866 . -6) (undo-tree-id71867 . -6) (undo-tree-id71868 . -6) (undo-tree-id71869 . -6) (undo-tree-id71870 . -6) (undo-tree-id71871 . -6) (undo-tree-id71872 . -6) (undo-tree-id71873 . -6) (undo-tree-id71874 . -6) (undo-tree-id71875 . -6) (undo-tree-id71876 . -6) (undo-tree-id71877 . -6) (undo-tree-id71878 . -6) (undo-tree-id71879 . -6) (undo-tree-id71880 . -6) (undo-tree-id71881 . -6) (undo-tree-id71882 . -7) (undo-tree-id71883 . -7) (undo-tree-id71884 . -7) (undo-tree-id71885 . -7) (undo-tree-id71886 . -7) (undo-tree-id71887 . -7) (undo-tree-id71888 . -8) (undo-tree-id71889 . -8) (undo-tree-id71890 . -8) (undo-tree-id71891 . -8) (undo-tree-id71892 . -8) (undo-tree-id71893 . -8) (undo-tree-id71894 . 205) (undo-tree-id71895 . -23) (undo-tree-id71896 . -22) (undo-tree-id71897 . -22) (undo-tree-id71898 . -22) (undo-tree-id71899 . -22) (undo-tree-id71900 . -22) (undo-tree-id71901 . -22) (undo-tree-id71902 . -30) (undo-tree-id71903 . -30) (undo-tree-id71904 . -30) (undo-tree-id71905 . -30) (undo-tree-id71906 . -30) (undo-tree-id71907 . -30) (undo-tree-id71908 . -39) (undo-tree-id71909 . -39) (undo-tree-id71910 . -39) (undo-tree-id71911 . -39) (undo-tree-id71912 . -39) (undo-tree-id71913 . -39) (undo-tree-id71914 . -42) (undo-tree-id71915 . -42) (undo-tree-id71916 . -42) (undo-tree-id71917 . -42) (undo-tree-id71918 . -42) (undo-tree-id71919 . -42) (undo-tree-id71920 . -47) (undo-tree-id71921 . -47) (undo-tree-id71922 . -47) (undo-tree-id71923 . -47) (undo-tree-id71924 . -47) (undo-tree-id71925 . -47) (undo-tree-id71926 . -54) (undo-tree-id71927 . -54) (undo-tree-id71928 . -54) (undo-tree-id71929 . -54) (undo-tree-id71930 . -54) (undo-tree-id71931 . -54) (undo-tree-id71932 . -69) (undo-tree-id71933 . -69) (undo-tree-id71934 . -69) (undo-tree-id71935 . -69) (undo-tree-id71936 . -69) (undo-tree-id71937 . -69) (undo-tree-id71938 . -69) (undo-tree-id71939 . -69) (undo-tree-id71940 . -69) (undo-tree-id71941 . -69) (undo-tree-id71942 . -69) (undo-tree-id71943 . -69) (undo-tree-id71944 . -69) (undo-tree-id71945 . -69) (undo-tree-id71946 . -69) (undo-tree-id71947 . -69) (undo-tree-id71948 . -69) (undo-tree-id71949 . -69) (undo-tree-id71950 . -69) (undo-tree-id71951 . -69) (undo-tree-id71952 . -69) (undo-tree-id71953 . -69) (undo-tree-id71954 . -69) (undo-tree-id71955 . -69) (undo-tree-id71956 . -69) (undo-tree-id71957 . -69) (undo-tree-id71958 . -70) (undo-tree-id71959 . -70) (undo-tree-id71960 . -70) (undo-tree-id71961 . -70) (undo-tree-id71962 . -70) (undo-tree-id71963 . -70) (undo-tree-id71964 . -70) (undo-tree-id71965 . -70) (undo-tree-id71966 . -70) (undo-tree-id71967 . -70) (undo-tree-id71968 . -70) (undo-tree-id71969 . -70) (undo-tree-id71970 . -70) (undo-tree-id71971 . -70) (undo-tree-id71972 . -70) (undo-tree-id71973 . -70) (undo-tree-id71974 . -70) (undo-tree-id71975 . -70) (undo-tree-id71976 . -70) (undo-tree-id71977 . -70) (undo-tree-id71978 . -70) (undo-tree-id71979 . -80) (undo-tree-id71980 . -80) (undo-tree-id71981 . -80) (undo-tree-id71982 . -80) (undo-tree-id71983 . -80) (undo-tree-id71984 . -80) (undo-tree-id71985 . -80) (undo-tree-id71986 . -80) (undo-tree-id71987 . -80) (undo-tree-id71988 . -80) (undo-tree-id71989 . -80) (undo-tree-id71990 . -80) (undo-tree-id71991 . -80) (undo-tree-id71992 . -80) (undo-tree-id71993 . -80) (undo-tree-id71994 . -80) (undo-tree-id71995 . -80) (undo-tree-id71996 . -80) (undo-tree-id71997 . -80) (undo-tree-id71998 . -80) (undo-tree-id71999 . -80) (undo-tree-id72000 . -83) (undo-tree-id72001 . -83) (undo-tree-id72002 . -83) (undo-tree-id72003 . -83) (undo-tree-id72004 . -83) (undo-tree-id72005 . -83) (undo-tree-id72006 . -83) (undo-tree-id72007 . -83) (undo-tree-id72008 . -83) (undo-tree-id72009 . -83) (undo-tree-id72010 . -83) (undo-tree-id72011 . -83) (undo-tree-id72012 . -83) (undo-tree-id72013 . -83) (undo-tree-id72014 . -83) (undo-tree-id72015 . -83) (undo-tree-id72016 . -85) (undo-tree-id72017 . -85) (undo-tree-id72018 . -85) (undo-tree-id72019 . -85) (undo-tree-id72020 . -85) (undo-tree-id72021 . -85) (undo-tree-id72022 . -85) (undo-tree-id72023 . -85) (undo-tree-id72024 . -85) (undo-tree-id72025 . -85) (undo-tree-id72026 . -85) (undo-tree-id72027 . -85) (undo-tree-id72028 . -85) (undo-tree-id72029 . -85) (undo-tree-id72030 . -85) (undo-tree-id72031 . -85) (undo-tree-id72032 . -92) (undo-tree-id72033 . -92) (undo-tree-id72034 . -92) (undo-tree-id72035 . -92) (undo-tree-id72036 . -92) (undo-tree-id72037 . -92) (undo-tree-id72038 . -92) (undo-tree-id72039 . -92) (undo-tree-id72040 . -92) (undo-tree-id72041 . -92) (undo-tree-id72042 . -92) (undo-tree-id72043 . -92) (undo-tree-id72044 . -92) (undo-tree-id72045 . -92) (undo-tree-id72046 . -92) (undo-tree-id72047 . -92) (undo-tree-id72048 . -95) (undo-tree-id72049 . -95) (undo-tree-id72050 . -95) (undo-tree-id72051 . -95) (undo-tree-id72052 . -95) (undo-tree-id72053 . -95) (undo-tree-id72054 . -95) (undo-tree-id72055 . -95) (undo-tree-id72056 . -95) (undo-tree-id72057 . -95) (undo-tree-id72058 . -95) (undo-tree-id72059 . -95) (undo-tree-id72060 . -95) (undo-tree-id72061 . -95) (undo-tree-id72062 . -95) (undo-tree-id72063 . -95) (undo-tree-id72064 . 118) (undo-tree-id72065 . -101) (undo-tree-id72066 . -100) (undo-tree-id72067 . -100) (undo-tree-id72068 . -100) (undo-tree-id72069 . -100) (undo-tree-id72070 . -100) (undo-tree-id72071 . -100) (undo-tree-id72072 . -100) (undo-tree-id72073 . -100) (undo-tree-id72074 . -100) (undo-tree-id72075 . -100) (undo-tree-id72076 . -100) (undo-tree-id72077 . -100) (undo-tree-id72078 . -100) (undo-tree-id72079 . -100) (undo-tree-id72080 . -100) (undo-tree-id72081 . -100) (undo-tree-id72082 . -100) (undo-tree-id72083 . -100) (undo-tree-id72084 . -100) (undo-tree-id72085 . -100) (undo-tree-id72086 . -100) (undo-tree-id72087 . 113) (undo-tree-id72088 . -106) (undo-tree-id72089 . -105) (undo-tree-id72090 . -105) (undo-tree-id72091 . -105) (undo-tree-id72092 . -105) (undo-tree-id72093 . -105) (undo-tree-id72094 . -105) (undo-tree-id72095 . -105) (undo-tree-id72096 . -105) (undo-tree-id72097 . -105) (undo-tree-id72098 . -105) (undo-tree-id72099 . -105) (undo-tree-id72100 . -105) (undo-tree-id72101 . -105) (undo-tree-id72102 . -105) (undo-tree-id72103 . -105) (undo-tree-id72104 . -105) (undo-tree-id72105 . -105) (undo-tree-id72106 . -105) (undo-tree-id72107 . -105) (undo-tree-id72108 . -105) (undo-tree-id72109 . -105) (undo-tree-id72110 . -109) (undo-tree-id72111 . -109) (undo-tree-id72112 . -109) (undo-tree-id72113 . -109) (undo-tree-id72114 . -109) (undo-tree-id72115 . -109) (undo-tree-id72116 . -109) (undo-tree-id72117 . -109) (undo-tree-id72118 . -109) (undo-tree-id72119 . -109) (undo-tree-id72120 . -109) (undo-tree-id72121 . -109) (undo-tree-id72122 . -109) (undo-tree-id72123 . -109) (undo-tree-id72124 . -109) (undo-tree-id72125 . -109) (undo-tree-id72126 . -114) (undo-tree-id72127 . -114) (undo-tree-id72128 . -114) (undo-tree-id72129 . -114) (undo-tree-id72130 . -114) (undo-tree-id72131 . -114) (undo-tree-id72132 . -114) (undo-tree-id72133 . -114) (undo-tree-id72134 . -114) (undo-tree-id72135 . -114) (undo-tree-id72136 . -114) (undo-tree-id72137 . -114) (undo-tree-id72138 . -114) (undo-tree-id72139 . -114) (undo-tree-id72140 . -114) (undo-tree-id72141 . -114) (undo-tree-id72142 . -125) (undo-tree-id72143 . -125) (undo-tree-id72144 . -125) (undo-tree-id72145 . -125) (undo-tree-id72146 . -125) (undo-tree-id72147 . -125) (undo-tree-id72148 . -125) (undo-tree-id72149 . -125) (undo-tree-id72150 . -125) (undo-tree-id72151 . -125) (undo-tree-id72152 . -125) (undo-tree-id72153 . -125) (undo-tree-id72154 . -125) (undo-tree-id72155 . -125) (undo-tree-id72156 . -125) (undo-tree-id72157 . -125) (undo-tree-id72158 . -126) (undo-tree-id72159 . -126) (undo-tree-id72160 . -126) (undo-tree-id72161 . -126) (undo-tree-id72162 . -126) (undo-tree-id72163 . -126) (undo-tree-id72164 . -126) (undo-tree-id72165 . -126) (undo-tree-id72166 . -126) (undo-tree-id72167 . -126) (undo-tree-id72168 . -126) (undo-tree-id72169 . -126) (undo-tree-id72170 . -126) (undo-tree-id72171 . -126) (undo-tree-id72172 . -126) (undo-tree-id72173 . -126) (undo-tree-id72174 . -126) (undo-tree-id72175 . -126) (undo-tree-id72176 . -126) (undo-tree-id72177 . -126) (undo-tree-id72178 . -126) (undo-tree-id72179 . -126) (undo-tree-id72180 . -126) (undo-tree-id72181 . -126) (undo-tree-id72182 . -126) (undo-tree-id72183 . -126) (undo-tree-id72184 . -134) (undo-tree-id72185 . -134) (undo-tree-id72186 . -134) (undo-tree-id72187 . -134) (undo-tree-id72188 . -134) (undo-tree-id72189 . -134) (undo-tree-id72190 . -134) (undo-tree-id72191 . -134) (undo-tree-id72192 . -134) (undo-tree-id72193 . -134) (undo-tree-id72194 . -134) (undo-tree-id72195 . -134) (undo-tree-id72196 . -134) (undo-tree-id72197 . -134) (undo-tree-id72198 . -134) (undo-tree-id72199 . -134) (undo-tree-id72200 . -134) (undo-tree-id72201 . -134) (undo-tree-id72202 . -134) (undo-tree-id72203 . -134) (undo-tree-id72204 . -134) (undo-tree-id72205 . -141) (undo-tree-id72206 . -141) (undo-tree-id72207 . -141) (undo-tree-id72208 . -141) (undo-tree-id72209 . -141) (undo-tree-id72210 . -141) (undo-tree-id72211 . -141) (undo-tree-id72212 . -141) (undo-tree-id72213 . -141) (undo-tree-id72214 . -141) (undo-tree-id72215 . -141) (undo-tree-id72216 . -141) (undo-tree-id72217 . -141) (undo-tree-id72218 . -141) (undo-tree-id72219 . -141) (undo-tree-id72220 . -141) (undo-tree-id72221 . -145) (undo-tree-id72222 . -145) (undo-tree-id72223 . -145) (undo-tree-id72224 . -145) (undo-tree-id72225 . -145) (undo-tree-id72226 . -145) (undo-tree-id72227 . -145) (undo-tree-id72228 . -145) (undo-tree-id72229 . -145) (undo-tree-id72230 . -145) (undo-tree-id72231 . -145) (undo-tree-id72232 . -145) (undo-tree-id72233 . -145) (undo-tree-id72234 . -145) (undo-tree-id72235 . -145) (undo-tree-id72236 . -145) (undo-tree-id72237 . -145) (undo-tree-id72238 . -145) (undo-tree-id72239 . -145) (undo-tree-id72240 . -145) (undo-tree-id72241 . -145) (undo-tree-id72242 . -154) (undo-tree-id72243 . -154) (undo-tree-id72244 . -154) (undo-tree-id72245 . -154) (undo-tree-id72246 . -154) (undo-tree-id72247 . -154) (undo-tree-id72248 . -154) (undo-tree-id72249 . -154) (undo-tree-id72250 . -154) (undo-tree-id72251 . -154) (undo-tree-id72252 . -154) (undo-tree-id72253 . -154) (undo-tree-id72254 . -154) (undo-tree-id72255 . -154) (undo-tree-id72256 . -154) (undo-tree-id72257 . -154) (undo-tree-id72258 . -157) (undo-tree-id72259 . -157) (undo-tree-id72260 . -157) (undo-tree-id72261 . -157) (undo-tree-id72262 . -157) (undo-tree-id72263 . -157) (undo-tree-id72264 . -157) (undo-tree-id72265 . -157) (undo-tree-id72266 . -157) (undo-tree-id72267 . -157) (undo-tree-id72268 . -157) (undo-tree-id72269 . -157) (undo-tree-id72270 . -157) (undo-tree-id72271 . -157) (undo-tree-id72272 . -157) (undo-tree-id72273 . -157) (undo-tree-id72274 . -157) (undo-tree-id72275 . -157) (undo-tree-id72276 . -157) (undo-tree-id72277 . -157) (undo-tree-id72278 . -157) (undo-tree-id72279 . -160) (undo-tree-id72280 . -160) (undo-tree-id72281 . -160) (undo-tree-id72282 . -160) (undo-tree-id72283 . -160) (undo-tree-id72284 . -160) (undo-tree-id72285 . -160) (undo-tree-id72286 . -160) (undo-tree-id72287 . -160) (undo-tree-id72288 . -160) (undo-tree-id72289 . -160) (undo-tree-id72290 . -160) (undo-tree-id72291 . -160) (undo-tree-id72292 . -160) (undo-tree-id72293 . -160) (undo-tree-id72294 . -160) (undo-tree-id72295 . -168) (undo-tree-id72296 . -168) (undo-tree-id72297 . -168) (undo-tree-id72298 . -168) (undo-tree-id72299 . -168) (undo-tree-id72300 . -168) (undo-tree-id72301 . -168) (undo-tree-id72302 . -168) (undo-tree-id72303 . -168) (undo-tree-id72304 . -168) (undo-tree-id72305 . -168) (undo-tree-id72306 . -168) (undo-tree-id72307 . -168) (undo-tree-id72308 . -168) (undo-tree-id72309 . -168) (undo-tree-id72310 . -168) (undo-tree-id72311 . -175) (undo-tree-id72312 . -175) (undo-tree-id72313 . -175) (undo-tree-id72314 . -175) (undo-tree-id72315 . -175) (undo-tree-id72316 . -175) (undo-tree-id72317 . -175) (undo-tree-id72318 . -175) (undo-tree-id72319 . -175) (undo-tree-id72320 . -175) (undo-tree-id72321 . -175) (undo-tree-id72322 . -175) (undo-tree-id72323 . -175) (undo-tree-id72324 . -175) (undo-tree-id72325 . -175) (undo-tree-id72326 . -175) (undo-tree-id72327 . -178) (undo-tree-id72328 . -178) (undo-tree-id72329 . -178) (undo-tree-id72330 . -178) (undo-tree-id72331 . -178) (undo-tree-id72332 . -178) (undo-tree-id72333 . -178) (undo-tree-id72334 . -178) (undo-tree-id72335 . -178) (undo-tree-id72336 . -178) (undo-tree-id72337 . -178) (undo-tree-id72338 . -178) (undo-tree-id72339 . -178) (undo-tree-id72340 . -178) (undo-tree-id72341 . -178) (undo-tree-id72342 . -178) (undo-tree-id72343 . -183) (undo-tree-id72344 . -183) (undo-tree-id72345 . -183) (undo-tree-id72346 . -183) (undo-tree-id72347 . -183) (undo-tree-id72348 . -183) (undo-tree-id72349 . -183) (undo-tree-id72350 . -183) (undo-tree-id72351 . -183) (undo-tree-id72352 . -183) (undo-tree-id72353 . -183) (undo-tree-id72354 . -183) (undo-tree-id72355 . -183) (undo-tree-id72356 . -183) (undo-tree-id72357 . -183) (undo-tree-id72358 . -183) (undo-tree-id72359 . 30) (undo-tree-id72360 . -193) (undo-tree-id72361 . -192) (undo-tree-id72362 . -192) (undo-tree-id72363 . -192) (undo-tree-id72364 . -192) (undo-tree-id72365 . -192) (undo-tree-id72366 . -192) (undo-tree-id72367 . -192) (undo-tree-id72368 . -192) (undo-tree-id72369 . -192) (undo-tree-id72370 . -192) (undo-tree-id72371 . -192) (undo-tree-id72372 . -192) (undo-tree-id72373 . -192) (undo-tree-id72374 . -192) (undo-tree-id72375 . -192) (undo-tree-id72376 . -192) (undo-tree-id72377 . 21) (undo-tree-id72378 . -196) (undo-tree-id72379 . -195) (undo-tree-id72380 . -195) (undo-tree-id72381 . -195) (undo-tree-id72382 . -195) (undo-tree-id72383 . -195) (undo-tree-id72384 . -195) (undo-tree-id72385 . -195) (undo-tree-id72386 . -195) (undo-tree-id72387 . -195) (undo-tree-id72388 . -195) (undo-tree-id72389 . -195) (undo-tree-id72390 . -195) (undo-tree-id72391 . -195) (undo-tree-id72392 . -195) (undo-tree-id72393 . -195) (undo-tree-id72394 . -195) (undo-tree-id72395 . 18) (undo-tree-id72396 . -199) (undo-tree-id72397 . -198) (undo-tree-id72398 . -198) (undo-tree-id72399 . -198) (undo-tree-id72400 . -198) (undo-tree-id72401 . -198) (undo-tree-id72402 . -198) (undo-tree-id72403 . -198) (undo-tree-id72404 . -198) (undo-tree-id72405 . -198) (undo-tree-id72406 . -198) (undo-tree-id72407 . -198) (undo-tree-id72408 . -198) (undo-tree-id72409 . -198) (undo-tree-id72410 . -198) (undo-tree-id72411 . -198) (undo-tree-id72412 . -198) (undo-tree-id72413 . -199) (undo-tree-id72414 . -199) (undo-tree-id72415 . -199) (undo-tree-id72416 . -199) (undo-tree-id72417 . -199) (undo-tree-id72418 . -199) (undo-tree-id72419 . -199) (undo-tree-id72420 . -199) (undo-tree-id72421 . -199) (undo-tree-id72422 . -199) (undo-tree-id72423 . -199) (undo-tree-id72424 . -199) (undo-tree-id72425 . -199) (undo-tree-id72426 . -199) (undo-tree-id72427 . -199) (undo-tree-id72428 . -199) (undo-tree-id72429 . -199) (undo-tree-id72430 . -199) (undo-tree-id72431 . -199) (undo-tree-id72432 . -199) (undo-tree-id72433 . -199) (undo-tree-id72434 . -199) (undo-tree-id72435 . -199) (undo-tree-id72436 . -199) (undo-tree-id72437 . -199) (undo-tree-id72438 . -199) (undo-tree-id72439 . -204) (undo-tree-id72440 . -204) (undo-tree-id72441 . -204) (undo-tree-id72442 . -204) (undo-tree-id72443 . -204) (undo-tree-id72444 . -204) (undo-tree-id72445 . -204) (undo-tree-id72446 . -204) (undo-tree-id72447 . -204) (undo-tree-id72448 . -204) (undo-tree-id72449 . -204) (undo-tree-id72450 . -204) (undo-tree-id72451 . -204) (undo-tree-id72452 . -204) (undo-tree-id72453 . -204) (undo-tree-id72454 . -204) (undo-tree-id72455 . -204) (undo-tree-id72456 . -204) (undo-tree-id72457 . -204) (undo-tree-id72458 . -204) (undo-tree-id72459 . -204) (undo-tree-id72460 . -213) (undo-tree-id72461 . -213) (undo-tree-id72462 . -213) (undo-tree-id72463 . -213) (undo-tree-id72464 . -213) (undo-tree-id72465 . -213) (undo-tree-id72466 . -213) (undo-tree-id72467 . -213) (undo-tree-id72468 . -213) (undo-tree-id72469 . -213) (undo-tree-id72470 . -213) (undo-tree-id72471 . -213) (undo-tree-id72472 . -213) (undo-tree-id72473 . -213) (undo-tree-id72474 . -213) (undo-tree-id72475 . -213) (undo-tree-id72476 . -215) (undo-tree-id72477 . -215) (undo-tree-id72478 . -215) (undo-tree-id72479 . -215) (undo-tree-id72480 . -215) (undo-tree-id72481 . -215) (undo-tree-id72482 . -214) (undo-tree-id72483 . -214) (undo-tree-id72484 . -214) (undo-tree-id72485 . -214) (undo-tree-id72486 . -214) (undo-tree-id72487 . -214) (undo-tree-id72488 . -214) (undo-tree-id72489 . -214) (undo-tree-id72490 . -214) (undo-tree-id72491 . -214) (undo-tree-id72492 . -214) (undo-tree-id72493 . -214) (undo-tree-id72494 . -214) (undo-tree-id72495 . -214) (undo-tree-id72496 . -214) (undo-tree-id72497 . -214) (undo-tree-id72498 . -214) (undo-tree-id72499 . -214) (undo-tree-id72500 . -214) (undo-tree-id72501 . -214) (undo-tree-id72502 . -214) (undo-tree-id72503 . -214) (undo-tree-id72504 . -215) 12529) nil (25767 17609 973584 367000) 0 nil])
([nil nil ((12153 . 12445) (#("- other ways of creating subword encodings (e.g., using byte pair encoding). Last but not least, the TensorFlow team released the

- It may never have seen the word \"smartest\" during training, but perhaps it learned the word \"smart\" and it also learned that the suffix “est” means “the most,”" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 60 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 60 61 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 61 83 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 125 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 125 129 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 129 130 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 130 131 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 131 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 132 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 133 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 165 166 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 166 174 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 174 175 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 175 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 192 193 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 193 225 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 225 226 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 226 231 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 231 232 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 232 268 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 268 269 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 269 292 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 12153) (undo-tree-id68290 . -292) (undo-tree-id68291 . -292) (undo-tree-id68292 . -292) (undo-tree-id68293 . -292) (undo-tree-id68294 . -133) (undo-tree-id68295 . -133) (undo-tree-id68296 . -133) (undo-tree-id68297 . -133) (undo-tree-id68298 . -133) (undo-tree-id68299 . -133) (undo-tree-id68300 . -133) (undo-tree-id68301 . -133) (undo-tree-id68302 . -133) (undo-tree-id68303 . -133) (undo-tree-id68304 . -133) (undo-tree-id68305 . -133) (undo-tree-id68306 . -133) (undo-tree-id68307 . -133) (undo-tree-id68308 . -133) (undo-tree-id68309 . -133) (undo-tree-id68310 . -133) (undo-tree-id68311 . -133) (undo-tree-id68312 . -133) (undo-tree-id68313 . -133) (undo-tree-id68314 . -133) (undo-tree-id68315 . -133) (undo-tree-id68316 . -133) (undo-tree-id68317 . -133) (undo-tree-id68318 . -133) (undo-tree-id68319 . -133) (undo-tree-id68320 . -133) (undo-tree-id68321 . -133) (undo-tree-id68322 . -133) (undo-tree-id68323 . -133) (undo-tree-id68324 . -133) (undo-tree-id68325 . -133) (undo-tree-id68326 . -133) (undo-tree-id68327 . -133) (undo-tree-id68328 . -133) (undo-tree-id68329 . -133) (undo-tree-id68330 . -133) (undo-tree-id68331 . -133) (undo-tree-id68332 . -133) (undo-tree-id68333 . -133) (undo-tree-id68334 . -133) (undo-tree-id68335 . -133) (undo-tree-id68336 . -133) (undo-tree-id68337 . -133) (undo-tree-id68338 . -133) (undo-tree-id68339 . -133) (undo-tree-id68340 . -133) (undo-tree-id68341 . -133) (undo-tree-id68342 . -133) (undo-tree-id68343 . -133) (undo-tree-id68344 . -133) (undo-tree-id68345 . -133) (undo-tree-id68346 . -133) (undo-tree-id68347 . -133) (undo-tree-id68348 . -133) (undo-tree-id68349 . -133) (undo-tree-id68350 . -133) (undo-tree-id68351 . -133) (undo-tree-id68352 . -133) (undo-tree-id68353 . -133) (undo-tree-id68354 . -133) (undo-tree-id68355 . -133) (undo-tree-id68356 . -133) (undo-tree-id68357 . -133) (undo-tree-id68358 . -133) (undo-tree-id68359 . -133) (undo-tree-id68360 . -133) (undo-tree-id68361 . -133) (undo-tree-id68362 . -133) (undo-tree-id68363 . -133) (undo-tree-id68364 . -133) (undo-tree-id68365 . -133) (undo-tree-id68366 . -133) (undo-tree-id68367 . -133) (undo-tree-id68368 . -133) (undo-tree-id68369 . -133) (undo-tree-id68370 . -133) (undo-tree-id68371 . -133) (undo-tree-id68372 . -133) (undo-tree-id68373 . -133) (undo-tree-id68374 . -133) (undo-tree-id68375 . -133) (undo-tree-id68376 . -133) (undo-tree-id68377 . -133) (undo-tree-id68378 . -133) (undo-tree-id68379 . -133) (undo-tree-id68380 . -133) (undo-tree-id68381 . -133) (undo-tree-id68382 . -133) (undo-tree-id68383 . -133) (undo-tree-id68384 . -133) (undo-tree-id68385 . -133) (undo-tree-id68386 . -133) (undo-tree-id68387 . -133) (undo-tree-id68388 . -133) (undo-tree-id68389 . -133) (undo-tree-id68390 . -133) (undo-tree-id68391 . -133) (undo-tree-id68392 . -133) (undo-tree-id68393 . -133) (undo-tree-id68394 . -133) (undo-tree-id68395 . -292) (undo-tree-id68396 . -292) (undo-tree-id68397 . -292) (undo-tree-id68398 . -292) (undo-tree-id68399 . -292) (undo-tree-id68400 . -292) (undo-tree-id68401 . -292) (undo-tree-id68402 . -292) (undo-tree-id68403 . -292) (undo-tree-id68404 . -292) (undo-tree-id68405 . -292) (undo-tree-id68406 . -292) (undo-tree-id68407 . -292) (undo-tree-id68408 . -292) (undo-tree-id68409 . -292) (undo-tree-id68410 . -292) (undo-tree-id68411 . -292) (undo-tree-id68412 . -292) (undo-tree-id68413 . -292) (undo-tree-id68414 . -292) (undo-tree-id68415 . -292) (undo-tree-id68416 . -292) (undo-tree-id68417 . -292) (undo-tree-id68418 . -292) (undo-tree-id68419 . -292) (undo-tree-id68420 . -292) (undo-tree-id68421 . -292) (undo-tree-id68422 . -292) (undo-tree-id68423 . -292) (undo-tree-id68424 . -292) (undo-tree-id68425 . -292) (undo-tree-id68426 . -292) (undo-tree-id68427 . -292) (undo-tree-id68428 . -292) (undo-tree-id68429 . -292) (undo-tree-id68430 . -292) (undo-tree-id68431 . -292) (undo-tree-id68432 . -292) (undo-tree-id68433 . -292) (undo-tree-id68434 . -292) (undo-tree-id68435 . -292) (undo-tree-id68436 . -292) (undo-tree-id68437 . -292) (undo-tree-id68438 . -292) (undo-tree-id68439 . -292) (undo-tree-id68440 . -292) (undo-tree-id68441 . -292) (undo-tree-id68442 . -292) (undo-tree-id68443 . -292) (undo-tree-id68444 . -292) (undo-tree-id68445 . -292) (undo-tree-id68446 . -292) (undo-tree-id68447 . -292) (undo-tree-id68448 . -292) (undo-tree-id68449 . -292) (undo-tree-id68450 . -292) (undo-tree-id68451 . -292) (undo-tree-id68452 . -292) (undo-tree-id68453 . -292) (undo-tree-id68454 . -292) (undo-tree-id68455 . -292) (undo-tree-id68456 . -292) (undo-tree-id68457 . -292) (undo-tree-id68458 . -292) (undo-tree-id68459 . -292) (undo-tree-id68460 . -292) (undo-tree-id68461 . -241) (undo-tree-id68462 . -241) (undo-tree-id68463 . -241) (undo-tree-id68464 . -241) (undo-tree-id68465 . -241) (undo-tree-id68466 . -241) (undo-tree-id68467 . -177) (undo-tree-id68468 . -177) (undo-tree-id68469 . -177) (undo-tree-id68470 . -177) (undo-tree-id68471 . -177) (undo-tree-id68472 . -177) (undo-tree-id68473 . -133) (undo-tree-id68474 . -133) (undo-tree-id68475 . -133) (undo-tree-id68476 . -133) (undo-tree-id68477 . -133) (undo-tree-id68478 . -133) (undo-tree-id68479 . -133) (undo-tree-id68480 . -133) (undo-tree-id68481 . -133) (undo-tree-id68482 . -133) (undo-tree-id68483 . -133) (undo-tree-id68484 . -134) (undo-tree-id68485 . -134) (undo-tree-id68486 . -134) (undo-tree-id68487 . -134) (undo-tree-id68488 . -134) (undo-tree-id68489 . -134) (undo-tree-id68490 . -134) (undo-tree-id68491 . -134) (undo-tree-id68492 . -134) (undo-tree-id68493 . -134) (undo-tree-id68494 . -134) (undo-tree-id68495 . -134) (undo-tree-id68496 . -134) (undo-tree-id68497 . -134) (undo-tree-id68498 . -134) (undo-tree-id68499 . -134) (undo-tree-id68500 . -134) (undo-tree-id68501 . -134) (undo-tree-id68502 . -134) (undo-tree-id68503 . -134) (undo-tree-id68504 . -134) (undo-tree-id68505 . -138) (undo-tree-id68506 . -138) (undo-tree-id68507 . -138) (undo-tree-id68508 . -138) (undo-tree-id68509 . -138) (undo-tree-id68510 . -138) (undo-tree-id68511 . -144) (undo-tree-id68512 . -144) (undo-tree-id68513 . -144) (undo-tree-id68514 . -144) (undo-tree-id68515 . -144) (undo-tree-id68516 . -144) (undo-tree-id68517 . -149) (undo-tree-id68518 . -149) (undo-tree-id68519 . -149) (undo-tree-id68520 . -149) (undo-tree-id68521 . -149) (undo-tree-id68522 . -149) (undo-tree-id68523 . -154) (undo-tree-id68524 . -154) (undo-tree-id68525 . -154) (undo-tree-id68526 . -154) (undo-tree-id68527 . -154) (undo-tree-id68528 . -154) (undo-tree-id68529 . -158) (undo-tree-id68530 . -158) (undo-tree-id68531 . -158) (undo-tree-id68532 . -158) (undo-tree-id68533 . -158) (undo-tree-id68534 . -158) (undo-tree-id68535 . -158) (undo-tree-id68536 . -158) (undo-tree-id68537 . -158) (undo-tree-id68538 . -158) (undo-tree-id68539 . -158) (undo-tree-id68540 . -163) (undo-tree-id68541 . -163) (undo-tree-id68542 . -163) (undo-tree-id68543 . -163) (undo-tree-id68544 . -163) (undo-tree-id68545 . -163) (undo-tree-id68546 . -163) (undo-tree-id68547 . -163) (undo-tree-id68548 . -163) (undo-tree-id68549 . -163) (undo-tree-id68550 . -163) (undo-tree-id68551 . -165) (undo-tree-id68552 . -165) (undo-tree-id68553 . -165) (undo-tree-id68554 . -165) (undo-tree-id68555 . -165) (undo-tree-id68556 . -165) (undo-tree-id68557 . -165) (undo-tree-id68558 . -165) (undo-tree-id68559 . -165) (undo-tree-id68560 . -165) (undo-tree-id68561 . -165) (undo-tree-id68562 . -165) (undo-tree-id68563 . -165) (undo-tree-id68564 . -165) (undo-tree-id68565 . -165) (undo-tree-id68566 . -165) (undo-tree-id68567 . -165) (undo-tree-id68568 . -165) (undo-tree-id68569 . -165) (undo-tree-id68570 . -165) (undo-tree-id68571 . -165) (undo-tree-id68572 . -165) (undo-tree-id68573 . -165) (undo-tree-id68574 . -165) (undo-tree-id68575 . -165) (undo-tree-id68576 . -165) (undo-tree-id68577 . -165) (undo-tree-id68578 . -165) (undo-tree-id68579 . -165) (undo-tree-id68580 . -165) (undo-tree-id68581 . -165) (undo-tree-id68582 . -165) (undo-tree-id68583 . -165) (undo-tree-id68584 . -165) (undo-tree-id68585 . -165) (undo-tree-id68586 . -165) (undo-tree-id68587 . -165) (undo-tree-id68588 . -165) (undo-tree-id68589 . -165) (undo-tree-id68590 . -165) (undo-tree-id68591 . -165) (undo-tree-id68592 . -165) (undo-tree-id68593 . -165) (undo-tree-id68594 . -165) (undo-tree-id68595 . -165) (undo-tree-id68596 . -165) (undo-tree-id68597 . -165) (undo-tree-id68598 . -165) (undo-tree-id68599 . -173) (undo-tree-id68600 . -173) (undo-tree-id68601 . -173) (undo-tree-id68602 . -173) (undo-tree-id68603 . -173) (undo-tree-id68604 . -173) (undo-tree-id68605 . -173) (undo-tree-id68606 . -173) (undo-tree-id68607 . -173) (undo-tree-id68608 . -173) (undo-tree-id68609 . -173) (undo-tree-id68610 . -173) (undo-tree-id68611 . -173) (undo-tree-id68612 . -173) (undo-tree-id68613 . -173) (undo-tree-id68614 . -173) (undo-tree-id68615 . -174) (undo-tree-id68616 . -174) (undo-tree-id68617 . -174) (undo-tree-id68618 . -174) (undo-tree-id68619 . -174) (undo-tree-id68620 . -174) (undo-tree-id68621 . -174) (undo-tree-id68622 . -174) (undo-tree-id68623 . -174) (undo-tree-id68624 . -174) (undo-tree-id68625 . -174) (undo-tree-id68626 . -174) (undo-tree-id68627 . -174) (undo-tree-id68628 . -174) (undo-tree-id68629 . -174) (undo-tree-id68630 . -174) (undo-tree-id68631 . -174) (undo-tree-id68632 . -174) (undo-tree-id68633 . -174) (undo-tree-id68634 . -174) (undo-tree-id68635 . -174) (undo-tree-id68636 . -174) (undo-tree-id68637 . -174) (undo-tree-id68638 . -174) (undo-tree-id68639 . -174) (undo-tree-id68640 . -174) (undo-tree-id68641 . -174) (undo-tree-id68642 . -174) (undo-tree-id68643 . -174) (undo-tree-id68644 . -174) (undo-tree-id68645 . -174) (undo-tree-id68646 . -174) (undo-tree-id68647 . -174) (undo-tree-id68648 . -174) (undo-tree-id68649 . -174) (undo-tree-id68650 . -174) (undo-tree-id68651 . -174) (undo-tree-id68652 . -174) (undo-tree-id68653 . -174) (undo-tree-id68654 . -174) (undo-tree-id68655 . -174) (undo-tree-id68656 . -174) (undo-tree-id68657 . -174) (undo-tree-id68658 . -174) (undo-tree-id68659 . -174) (undo-tree-id68660 . -174) (undo-tree-id68661 . -174) (undo-tree-id68662 . -181) (undo-tree-id68663 . -181) (undo-tree-id68664 . -181) (undo-tree-id68665 . -181) (undo-tree-id68666 . -181) (undo-tree-id68667 . -181) (undo-tree-id68668 . -181) (undo-tree-id68669 . -181) (undo-tree-id68670 . -181) (undo-tree-id68671 . -181) (undo-tree-id68672 . -181) (undo-tree-id68673 . -190) (undo-tree-id68674 . -190) (undo-tree-id68675 . -190) (undo-tree-id68676 . -190) (undo-tree-id68677 . -190) (undo-tree-id68678 . -190) (undo-tree-id68679 . -190) (undo-tree-id68680 . -190) (undo-tree-id68681 . -190) (undo-tree-id68682 . -190) (undo-tree-id68683 . -190) (undo-tree-id68684 . -191) (undo-tree-id68685 . -191) (undo-tree-id68686 . -191) (undo-tree-id68687 . -191) (undo-tree-id68688 . -191) (undo-tree-id68689 . -191) (undo-tree-id68690 . -191) (undo-tree-id68691 . -191) (undo-tree-id68692 . -191) (undo-tree-id68693 . -191) (undo-tree-id68694 . -191) (undo-tree-id68695 . -195) (undo-tree-id68696 . -195) (undo-tree-id68697 . -195) (undo-tree-id68698 . -195) (undo-tree-id68699 . -195) (undo-tree-id68700 . -195) (undo-tree-id68701 . -195) (undo-tree-id68702 . -195) (undo-tree-id68703 . -195) (undo-tree-id68704 . -195) (undo-tree-id68705 . -195) (undo-tree-id68706 . -203) (undo-tree-id68707 . -203) (undo-tree-id68708 . -203) (undo-tree-id68709 . -203) (undo-tree-id68710 . -203) (undo-tree-id68711 . -203) (undo-tree-id68712 . -203) (undo-tree-id68713 . -203) (undo-tree-id68714 . -203) (undo-tree-id68715 . -203) (undo-tree-id68716 . -203) (undo-tree-id68717 . -206) (undo-tree-id68718 . -206) (undo-tree-id68719 . -206) (undo-tree-id68720 . -206) (undo-tree-id68721 . -206) (undo-tree-id68722 . -206) (undo-tree-id68723 . -206) (undo-tree-id68724 . -206) (undo-tree-id68725 . -206) (undo-tree-id68726 . -206) (undo-tree-id68727 . -206) (undo-tree-id68728 . -214) (undo-tree-id68729 . -214) (undo-tree-id68730 . -214) (undo-tree-id68731 . -214) (undo-tree-id68732 . -214) (undo-tree-id68733 . -214) (undo-tree-id68734 . -214) (undo-tree-id68735 . -214) (undo-tree-id68736 . -214) (undo-tree-id68737 . -214) (undo-tree-id68738 . -214) (undo-tree-id68739 . -218) (undo-tree-id68740 . -218) (undo-tree-id68741 . -218) (undo-tree-id68742 . -218) (undo-tree-id68743 . -218) (undo-tree-id68744 . -218) (undo-tree-id68745 . -218) (undo-tree-id68746 . -218) (undo-tree-id68747 . -218) (undo-tree-id68748 . -218) (undo-tree-id68749 . -218) (undo-tree-id68750 . -223) (undo-tree-id68751 . -223) (undo-tree-id68752 . -223) (undo-tree-id68753 . -223) (undo-tree-id68754 . -223) (undo-tree-id68755 . -223) (undo-tree-id68756 . -223) (undo-tree-id68757 . -223) (undo-tree-id68758 . -223) (undo-tree-id68759 . -223) (undo-tree-id68760 . -223) (undo-tree-id68761 . -225) (undo-tree-id68762 . -225) (undo-tree-id68763 . -225) (undo-tree-id68764 . -225) (undo-tree-id68765 . -225) (undo-tree-id68766 . -225) (undo-tree-id68767 . -225) (undo-tree-id68768 . -225) (undo-tree-id68769 . -225) (undo-tree-id68770 . -225) (undo-tree-id68771 . -225) (undo-tree-id68772 . -225) (undo-tree-id68773 . -225) (undo-tree-id68774 . -225) (undo-tree-id68775 . -225) (undo-tree-id68776 . -225) (undo-tree-id68777 . -225) (undo-tree-id68778 . -225) (undo-tree-id68779 . -225) (undo-tree-id68780 . -225) (undo-tree-id68781 . -225) (undo-tree-id68782 . -225) (undo-tree-id68783 . -225) (undo-tree-id68784 . -225) (undo-tree-id68785 . -225) (undo-tree-id68786 . -225) (undo-tree-id68787 . -225) (undo-tree-id68788 . -225) (undo-tree-id68789 . -225) (undo-tree-id68790 . -225) (undo-tree-id68791 . -225) (undo-tree-id68792 . -225) (undo-tree-id68793 . -225) (undo-tree-id68794 . -225) (undo-tree-id68795 . -225) (undo-tree-id68796 . -225) (undo-tree-id68797 . -225) (undo-tree-id68798 . -225) (undo-tree-id68799 . -225) (undo-tree-id68800 . -225) (undo-tree-id68801 . -225) (undo-tree-id68802 . -225) (undo-tree-id68803 . -225) (undo-tree-id68804 . -225) (undo-tree-id68805 . -225) (undo-tree-id68806 . -225) (undo-tree-id68807 . -225) (undo-tree-id68808 . -230) (undo-tree-id68809 . -230) (undo-tree-id68810 . -230) (undo-tree-id68811 . -230) (undo-tree-id68812 . -230) (undo-tree-id68813 . -230) (undo-tree-id68814 . -230) (undo-tree-id68815 . -230) (undo-tree-id68816 . -230) (undo-tree-id68817 . -230) (undo-tree-id68818 . -230) (undo-tree-id68819 . -230) (undo-tree-id68820 . -230) (undo-tree-id68821 . -230) (undo-tree-id68822 . -230) (undo-tree-id68823 . -230) (undo-tree-id68824 . -231) (undo-tree-id68825 . -231) (undo-tree-id68826 . -231) (undo-tree-id68827 . -231) (undo-tree-id68828 . -231) (undo-tree-id68829 . -231) (undo-tree-id68830 . -231) (undo-tree-id68831 . -231) (undo-tree-id68832 . -231) (undo-tree-id68833 . -231) (undo-tree-id68834 . -231) (undo-tree-id68835 . -231) (undo-tree-id68836 . -231) (undo-tree-id68837 . -231) (undo-tree-id68838 . -231) (undo-tree-id68839 . -231) (undo-tree-id68840 . -231) (undo-tree-id68841 . -231) (undo-tree-id68842 . -231) (undo-tree-id68843 . -231) (undo-tree-id68844 . -231) (undo-tree-id68845 . -231) (undo-tree-id68846 . -231) (undo-tree-id68847 . -231) (undo-tree-id68848 . -231) (undo-tree-id68849 . -231) (undo-tree-id68850 . -231) (undo-tree-id68851 . -231) (undo-tree-id68852 . -231) (undo-tree-id68853 . -231) (undo-tree-id68854 . -231) (undo-tree-id68855 . -231) (undo-tree-id68856 . -231) (undo-tree-id68857 . -231) (undo-tree-id68858 . -231) (undo-tree-id68859 . -231) (undo-tree-id68860 . -231) (undo-tree-id68861 . -233) (undo-tree-id68862 . -233) (undo-tree-id68863 . -233) (undo-tree-id68864 . -233) (undo-tree-id68865 . -233) (undo-tree-id68866 . -233) (undo-tree-id68867 . -233) (undo-tree-id68868 . -233) (undo-tree-id68869 . -233) (undo-tree-id68870 . -233) (undo-tree-id68871 . -233) (undo-tree-id68872 . -237) (undo-tree-id68873 . -237) (undo-tree-id68874 . -237) (undo-tree-id68875 . -237) (undo-tree-id68876 . -237) (undo-tree-id68877 . -237) (undo-tree-id68878 . -237) (undo-tree-id68879 . -237) (undo-tree-id68880 . -237) (undo-tree-id68881 . -237) (undo-tree-id68882 . -237) (undo-tree-id68883 . -237) (undo-tree-id68884 . -237) (undo-tree-id68885 . -237) (undo-tree-id68886 . -237) (undo-tree-id68887 . -237) (undo-tree-id68888 . -240) (undo-tree-id68889 . -240) (undo-tree-id68890 . -240) (undo-tree-id68891 . -240) (undo-tree-id68892 . -240) (undo-tree-id68893 . -240) (undo-tree-id68894 . -240) (undo-tree-id68895 . -240) (undo-tree-id68896 . -240) (undo-tree-id68897 . -240) (undo-tree-id68898 . -240) (undo-tree-id68899 . -245) (undo-tree-id68900 . -245) (undo-tree-id68901 . -245) (undo-tree-id68902 . -245) (undo-tree-id68903 . -245) (undo-tree-id68904 . -245) (undo-tree-id68905 . -245) (undo-tree-id68906 . -245) (undo-tree-id68907 . -245) (undo-tree-id68908 . -245) (undo-tree-id68909 . -245) (undo-tree-id68910 . -253) (undo-tree-id68911 . -253) (undo-tree-id68912 . -253) (undo-tree-id68913 . -253) (undo-tree-id68914 . -253) (undo-tree-id68915 . -253) (undo-tree-id68916 . -253) (undo-tree-id68917 . -253) (undo-tree-id68918 . -253) (undo-tree-id68919 . -253) (undo-tree-id68920 . -253) (undo-tree-id68921 . -258) (undo-tree-id68922 . -258) (undo-tree-id68923 . -258) (undo-tree-id68924 . -258) (undo-tree-id68925 . -258) (undo-tree-id68926 . -258) (undo-tree-id68927 . -258) (undo-tree-id68928 . -258) (undo-tree-id68929 . -258) (undo-tree-id68930 . -258) (undo-tree-id68931 . -258) (undo-tree-id68932 . -258) (undo-tree-id68933 . -258) (undo-tree-id68934 . -258) (undo-tree-id68935 . -258) (undo-tree-id68936 . -258) (undo-tree-id68937 . -262) (undo-tree-id68938 . -262) (undo-tree-id68939 . -262) (undo-tree-id68940 . -262) (undo-tree-id68941 . -262) (undo-tree-id68942 . -262) (undo-tree-id68943 . -262) (undo-tree-id68944 . -262) (undo-tree-id68945 . -262) (undo-tree-id68946 . -262) (undo-tree-id68947 . -262) (undo-tree-id68948 . -262) (undo-tree-id68949 . -262) (undo-tree-id68950 . -262) (undo-tree-id68951 . -262) (undo-tree-id68952 . -262) (undo-tree-id68953 . -269) (undo-tree-id68954 . -269) (undo-tree-id68955 . -269) (undo-tree-id68956 . -269) (undo-tree-id68957 . -269) (undo-tree-id68958 . -269) (undo-tree-id68959 . -269) (undo-tree-id68960 . -269) (undo-tree-id68961 . -269) (undo-tree-id68962 . -269) (undo-tree-id68963 . -269) (undo-tree-id68964 . -269) (undo-tree-id68965 . -269) (undo-tree-id68966 . -269) (undo-tree-id68967 . -269) (undo-tree-id68968 . -269) (undo-tree-id68969 . -270) (undo-tree-id68970 . -270) (undo-tree-id68971 . -270) (undo-tree-id68972 . -270) (undo-tree-id68973 . -270) (undo-tree-id68974 . -270) (undo-tree-id68975 . -270) (undo-tree-id68976 . -270) (undo-tree-id68977 . -270) (undo-tree-id68978 . -270) (undo-tree-id68979 . -270) (undo-tree-id68980 . -273) (undo-tree-id68981 . -273) (undo-tree-id68982 . -273) (undo-tree-id68983 . -273) (undo-tree-id68984 . -273) (undo-tree-id68985 . -273) (undo-tree-id68986 . -273) (undo-tree-id68987 . -273) (undo-tree-id68988 . -273) (undo-tree-id68989 . -273) (undo-tree-id68990 . -273) (undo-tree-id68991 . -275) (undo-tree-id68992 . -275) (undo-tree-id68993 . -275) (undo-tree-id68994 . -275) (undo-tree-id68995 . -275) (undo-tree-id68996 . -275) (undo-tree-id68997 . -275) (undo-tree-id68998 . -275) (undo-tree-id68999 . -275) (undo-tree-id69000 . -275) (undo-tree-id69001 . -275) (undo-tree-id69002 . -281) (undo-tree-id69003 . -281) (undo-tree-id69004 . -281) (undo-tree-id69005 . -281) (undo-tree-id69006 . -281) (undo-tree-id69007 . -281) (undo-tree-id69008 . -281) (undo-tree-id69009 . -281) (undo-tree-id69010 . -281) (undo-tree-id69011 . -281) (undo-tree-id69012 . -281) (undo-tree-id69013 . -282) (undo-tree-id69014 . -282) (undo-tree-id69015 . -282) (undo-tree-id69016 . -282) (undo-tree-id69017 . -282) (undo-tree-id69018 . -282) (undo-tree-id69019 . -282) (undo-tree-id69020 . -282) (undo-tree-id69021 . -282) (undo-tree-id69022 . -282) (undo-tree-id69023 . -282) (undo-tree-id69024 . -286) (undo-tree-id69025 . -286) (undo-tree-id69026 . -286) (undo-tree-id69027 . -286) (undo-tree-id69028 . -286) (undo-tree-id69029 . -286) (undo-tree-id69030 . -286) (undo-tree-id69031 . -286) (undo-tree-id69032 . -286) (undo-tree-id69033 . -286) (undo-tree-id69034 . -286) (undo-tree-id69035 . -290) (undo-tree-id69036 . -290) (undo-tree-id69037 . -290) (undo-tree-id69038 . -290) (undo-tree-id69039 . -290) (undo-tree-id69040 . -290) (undo-tree-id69041 . -290) (undo-tree-id69042 . -290) (undo-tree-id69043 . -290) (undo-tree-id69044 . -290) (undo-tree-id69045 . -290) (undo-tree-id69046 . -292) (undo-tree-id69047 . -292) (undo-tree-id69048 . -292) (undo-tree-id69049 . -292) (undo-tree-id69050 . -292) (undo-tree-id69051 . -292) (undo-tree-id69052 . -292) (undo-tree-id69053 . -292) (undo-tree-id69054 . -292) (undo-tree-id69055 . -292) (undo-tree-id69056 . -292) (undo-tree-id69057 . -292) (undo-tree-id69058 . -292) (undo-tree-id69059 . -292) (undo-tree-id69060 . -292) (undo-tree-id69061 . -292) (undo-tree-id69062 . -292) (undo-tree-id69063 . -292) (undo-tree-id69064 . -292) (undo-tree-id69065 . -292) (undo-tree-id69066 . -292) (undo-tree-id69067 . -292) (undo-tree-id69068 . -292) (undo-tree-id69069 . -292) (undo-tree-id69070 . -292) (undo-tree-id69071 . -292) (undo-tree-id69072 . -292) (undo-tree-id69073 . -292) (undo-tree-id69074 . -292) (undo-tree-id69075 . -292) (undo-tree-id69076 . -292) (undo-tree-id69077 . -292) (undo-tree-id69078 . -292) (undo-tree-id69079 . -292) (undo-tree-id69080 . -292) (undo-tree-id69081 . -292) (undo-tree-id69082 . -292) (undo-tree-id69083 . -292) (undo-tree-id69084 . -292) (undo-tree-id69085 . -292) (undo-tree-id69086 . -292) (undo-tree-id69087 . -292) (undo-tree-id69088 . -292) (undo-tree-id69089 . -292) (undo-tree-id69090 . -292) (undo-tree-id69091 . -292) (undo-tree-id69092 . -292) (undo-tree-id69093 . -292) (undo-tree-id69094 . -292) (undo-tree-id69095 . -292) (undo-tree-id69096 . -292) (undo-tree-id69097 . -292) (undo-tree-id69098 . -292) (undo-tree-id69099 . -292) (undo-tree-id69100 . -292) (undo-tree-id69101 . -292) (undo-tree-id69102 . -292) (undo-tree-id69103 . -292) (undo-tree-id69104 . -292) (undo-tree-id69105 . -292) (undo-tree-id69106 . -292) (undo-tree-id69107 . -292) (undo-tree-id69108 . -292) (undo-tree-id69109 . -292) (undo-tree-id69110 . -292) (undo-tree-id69111 . -292) (undo-tree-id69112 . -292) (undo-tree-id69113 . -292) (undo-tree-id69114 . -292) (undo-tree-id69115 . -292) (undo-tree-id69116 . -292) (undo-tree-id69117 . -292) (undo-tree-id69118 . -292) (undo-tree-id69119 . -292) (undo-tree-id69120 . -292) (undo-tree-id69121 . -292) (undo-tree-id69122 . -292) (undo-tree-id69123 . -292) (undo-tree-id69124 . -292) (undo-tree-id69125 . -292) (undo-tree-id69126 . -292) (undo-tree-id69127 . -292) (undo-tree-id69128 . -292) (undo-tree-id69129 . -292) (undo-tree-id69130 . -292) (undo-tree-id69131 . -292) (undo-tree-id69132 . -292) (undo-tree-id69133 . -292) (undo-tree-id69134 . -292) (undo-tree-id69135 . -292) (undo-tree-id69136 . -292) (undo-tree-id69137 . -292) (undo-tree-id69138 . -292) (undo-tree-id69139 . -292) (undo-tree-id69140 . -292) (undo-tree-id69141 . -292) (undo-tree-id69142 . -292) (undo-tree-id69143 . -292) (undo-tree-id69144 . -292) (undo-tree-id69145 . -292) (undo-tree-id69146 . -292) (undo-tree-id69147 . -292) (undo-tree-id69148 . -292) (undo-tree-id69149 . -292) (undo-tree-id69150 . -292) (undo-tree-id69151 . -292) (undo-tree-id69152 . -292) (undo-tree-id69153 . -292) (undo-tree-id69154 . -292) (undo-tree-id69155 . -292) (undo-tree-id69156 . -292) (undo-tree-id69157 . -292) (undo-tree-id69158 . -292) (undo-tree-id69159 . -292) (undo-tree-id69160 . -292) (undo-tree-id69161 . -292) (undo-tree-id69162 . -292) (undo-tree-id69163 . -292) (undo-tree-id69164 . -292) (undo-tree-id69165 . -292) (undo-tree-id69166 . -292) (undo-tree-id69167 . -292) (undo-tree-id69168 . -292) (undo-tree-id69169 . -292) (undo-tree-id69170 . -292) (undo-tree-id69171 . -292) (undo-tree-id69172 . -292) (undo-tree-id69173 . -292) (undo-tree-id69174 . -292) (undo-tree-id69175 . -292) (undo-tree-id69176 . -292) (undo-tree-id69177 . -292) (undo-tree-id69178 . -292) (undo-tree-id69179 . -292) (undo-tree-id69180 . -292) (undo-tree-id69181 . -292) (undo-tree-id69182 . -292) (undo-tree-id69183 . -292) (undo-tree-id69184 . -292) (undo-tree-id69185 . -292) (undo-tree-id69186 . -292) (undo-tree-id69187 . -292) (undo-tree-id69188 . -292) (undo-tree-id69189 . -292) (undo-tree-id69190 . -292) (undo-tree-id69191 . -292) (undo-tree-id69192 . -292) (undo-tree-id69193 . -292) (undo-tree-id69194 . -292) (undo-tree-id69195 . -292) (undo-tree-id69196 . -292) (undo-tree-id69197 . -292) (undo-tree-id69198 . -292) (undo-tree-id69199 . -292) (undo-tree-id69200 . -292) (undo-tree-id69201 . -292) (undo-tree-id69202 . -292) (undo-tree-id69203 . -292) (undo-tree-id69204 . -292) (undo-tree-id69205 . -292) (undo-tree-id69206 . -292) (undo-tree-id69207 . -292) (undo-tree-id69208 . -292) (undo-tree-id69209 . -292) (undo-tree-id69210 . -292) (undo-tree-id69211 . -292) (undo-tree-id69212 . -292) (undo-tree-id69213 . -292) (undo-tree-id69214 . -292) (undo-tree-id69215 . -292) (undo-tree-id69216 . -292) (undo-tree-id69217 . -292) (undo-tree-id69218 . -292) (undo-tree-id69219 . -292) (undo-tree-id69220 . -292) (undo-tree-id69221 . -292) (undo-tree-id69222 . -292) (undo-tree-id69223 . -292) (undo-tree-id69224 . -292) (undo-tree-id69225 . -292) (undo-tree-id69226 . -292) (undo-tree-id69227 . -292) (undo-tree-id69228 . -292) (undo-tree-id69229 . -292) (undo-tree-id69230 . -292) (undo-tree-id69231 . -292) (undo-tree-id69232 . -292) (undo-tree-id69233 . -292) (undo-tree-id69234 . -292) (undo-tree-id69235 . -292) (undo-tree-id69236 . -292) (undo-tree-id69237 . -292) (undo-tree-id69238 . -292) (undo-tree-id69239 . -292) (undo-tree-id69240 . -292) (undo-tree-id69241 . -292) (undo-tree-id69242 . -292) (undo-tree-id69243 . -292) (undo-tree-id69244 . -292) (undo-tree-id69245 . -292) (undo-tree-id69246 . -292) (undo-tree-id69247 . -292) (undo-tree-id69248 . -292) (undo-tree-id69249 . -292) (undo-tree-id69250 . -292) (undo-tree-id69251 . -292) (undo-tree-id69252 . -292) (undo-tree-id69253 . -292) (undo-tree-id69254 . -292) (undo-tree-id69255 . -292) (undo-tree-id69256 . -292) (undo-tree-id69257 . -292) (undo-tree-id69258 . -292) (undo-tree-id69259 . -292) (undo-tree-id69260 . -292) (undo-tree-id69261 . -292) (undo-tree-id69262 . -292) (undo-tree-id69263 . -292) (undo-tree-id69264 . -292) (undo-tree-id69265 . -292) (undo-tree-id69266 . -292) (undo-tree-id69267 . -292) (undo-tree-id69268 . -292) (undo-tree-id69269 . -292) (undo-tree-id69270 . -292) (undo-tree-id69271 . -292) (undo-tree-id69272 . -292) (undo-tree-id69273 . -292) (undo-tree-id69274 . -292) (undo-tree-id69275 . -292) (undo-tree-id69276 . -292) (undo-tree-id69277 . -292) (undo-tree-id69278 . -292) (undo-tree-id69279 . -292) (undo-tree-id69280 . -292) (undo-tree-id69281 . -292) (undo-tree-id69282 . -292) (undo-tree-id69283 . -292) (undo-tree-id69284 . -292) (undo-tree-id69285 . -292) (undo-tree-id69286 . -292) (undo-tree-id69287 . -292) (undo-tree-id69288 . -292) (undo-tree-id69289 . -292) (undo-tree-id69290 . -292) (undo-tree-id69291 . -292) (undo-tree-id69292 . -292) (undo-tree-id69293 . -292) (undo-tree-id69294 . -292) (undo-tree-id69295 . -292) (undo-tree-id69296 . -292) (undo-tree-id69297 . -292) (undo-tree-id69298 . -292) (undo-tree-id69299 . -292) (undo-tree-id69300 . -292) (undo-tree-id69301 . -292) (undo-tree-id69302 . -292) (undo-tree-id69303 . -292) (undo-tree-id69304 . -292) (undo-tree-id69305 . -292) (undo-tree-id69306 . -292) (undo-tree-id69307 . -292) (undo-tree-id69308 . -292) (undo-tree-id69309 . -292) (undo-tree-id69310 . -292) (undo-tree-id69311 . -292) (undo-tree-id69312 . -292) (undo-tree-id69313 . -292) (undo-tree-id69314 . -292) (undo-tree-id69315 . -292) (undo-tree-id69316 . -292) (undo-tree-id69317 . -292) (undo-tree-id69318 . -292) (undo-tree-id69319 . -292) (undo-tree-id69320 . -292) (undo-tree-id69321 . -292) (undo-tree-id69322 . -292) (undo-tree-id69323 . -292) (undo-tree-id69324 . -292) (undo-tree-id69325 . -292) (undo-tree-id69326 . -292) (undo-tree-id69327 . -292) (undo-tree-id69328 . -292) (undo-tree-id69329 . -292) (undo-tree-id69330 . -292) (undo-tree-id69331 . -292) (undo-tree-id69332 . -292) (undo-tree-id69333 . -292) (undo-tree-id69334 . -292) (undo-tree-id69335 . -292) (undo-tree-id69336 . -292) (undo-tree-id69337 . -292) (undo-tree-id69338 . -292) (undo-tree-id69339 . -292) (undo-tree-id69340 . -292) (undo-tree-id69341 . -292) (undo-tree-id69342 . -292) (undo-tree-id69343 . -292) (undo-tree-id69344 . -292) (undo-tree-id69345 . -292) (undo-tree-id69346 . -292) (undo-tree-id69347 . -292) (undo-tree-id69348 . -292) (undo-tree-id69349 . -292) (undo-tree-id69350 . -292) (undo-tree-id69351 . -292) (undo-tree-id69352 . -292) (undo-tree-id69353 . -292) (undo-tree-id69354 . -292) (undo-tree-id69355 . -292) (undo-tree-id69356 . -292) (undo-tree-id69357 . -292) (undo-tree-id69358 . -292) (undo-tree-id69359 . -292) (undo-tree-id69360 . -292) (undo-tree-id69361 . -292) (undo-tree-id69362 . -292) (undo-tree-id69363 . -292) (undo-tree-id69364 . -292) (undo-tree-id69365 . -292) (undo-tree-id69366 . -292) (undo-tree-id69367 . -292) (undo-tree-id69368 . -292) (undo-tree-id69369 . -292) (undo-tree-id69370 . -292) (undo-tree-id69371 . -292) (undo-tree-id69372 . -292) (undo-tree-id69373 . -292) (undo-tree-id69374 . -292) (undo-tree-id69375 . -292) (undo-tree-id69376 . -292) (undo-tree-id69377 . -292) (undo-tree-id69378 . -292) (undo-tree-id69379 . -292) (undo-tree-id69380 . -292) (undo-tree-id69381 . -292) (undo-tree-id69382 . -292) (undo-tree-id69383 . -292) (undo-tree-id69384 . -292) (undo-tree-id69385 . -292) (undo-tree-id69386 . -292) (undo-tree-id69387 . -292) (undo-tree-id69388 . -292) (undo-tree-id69389 . -292) (undo-tree-id69390 . -292) (undo-tree-id69391 . -292) (undo-tree-id69392 . -292) (undo-tree-id69393 . -292) (undo-tree-id69394 . -292) (undo-tree-id69395 . -292) (undo-tree-id69396 . -292) (undo-tree-id69397 . -292) (undo-tree-id69398 . -292) (undo-tree-id69399 . -292) (undo-tree-id69400 . -292) (undo-tree-id69401 . -292) (undo-tree-id69402 . -292) (undo-tree-id69403 . -292) (undo-tree-id69404 . -292) (undo-tree-id69405 . -292) (undo-tree-id69406 . -292) (undo-tree-id69407 . -292) (undo-tree-id69408 . -292) (undo-tree-id69409 . -292) (undo-tree-id69410 . -292) (undo-tree-id69411 . -292) (undo-tree-id69412 . -292) (undo-tree-id69413 . -292) (undo-tree-id69414 . -292) (undo-tree-id69415 . -292) (undo-tree-id69416 . -292) (undo-tree-id69417 . -292) (undo-tree-id69418 . -292) (undo-tree-id69419 . -292) (undo-tree-id69420 . -292) (undo-tree-id69421 . -292) (undo-tree-id69422 . -292) (undo-tree-id69423 . -292) (undo-tree-id69424 . -292) (undo-tree-id69425 . -292) (undo-tree-id69426 . -292) (undo-tree-id69427 . -292) (undo-tree-id69428 . -292) (undo-tree-id69429 . -292) (undo-tree-id69430 . -292) (undo-tree-id69431 . -292) (undo-tree-id69432 . -292) (undo-tree-id69433 . -292) (undo-tree-id69434 . -292) (undo-tree-id69435 . -292) (undo-tree-id69436 . -292) (undo-tree-id69437 . -292) (undo-tree-id69438 . -292) (undo-tree-id69439 . -292) (undo-tree-id69440 . -292) (undo-tree-id69441 . -292) (undo-tree-id69442 . -292) (undo-tree-id69443 . -292) (undo-tree-id69444 . -292) (undo-tree-id69445 . -292) (undo-tree-id69446 . -292) (undo-tree-id69447 . -292) (undo-tree-id69448 . -292) (undo-tree-id69449 . -292) (undo-tree-id69450 . -292) (undo-tree-id69451 . -292) (undo-tree-id69452 . -292) (undo-tree-id69453 . -292) (undo-tree-id69454 . -292) (undo-tree-id69455 . -292) (undo-tree-id69456 . -292) (undo-tree-id69457 . -292) (undo-tree-id69458 . -292) (undo-tree-id69459 . -292) (undo-tree-id69460 . -292) (undo-tree-id69461 . -292) (undo-tree-id69462 . -292) (undo-tree-id69463 . -292) (undo-tree-id69464 . -292) (undo-tree-id69465 . -292) (undo-tree-id69466 . -292) (undo-tree-id69467 . -292) (undo-tree-id69468 . -292) (undo-tree-id69469 . -292) (undo-tree-id69470 . -292) (undo-tree-id69471 . -292) (undo-tree-id69472 . -292) (undo-tree-id69473 . -292) (undo-tree-id69474 . -292) (undo-tree-id69475 . -292) (undo-tree-id69476 . -292) (undo-tree-id69477 . -292) (undo-tree-id69478 . -292) (undo-tree-id69479 . -292) (undo-tree-id69480 . -292) (undo-tree-id69481 . -292) (undo-tree-id69482 . -292) (undo-tree-id69483 . -292) (undo-tree-id69484 . -292) (undo-tree-id69485 . -292) (undo-tree-id69486 . -292) (undo-tree-id69487 . -292) (undo-tree-id69488 . -292) (undo-tree-id69489 . -292) (undo-tree-id69490 . -292) (undo-tree-id69491 . -292) (undo-tree-id69492 . -292) (undo-tree-id69493 . -292) (undo-tree-id69494 . -292) (undo-tree-id69495 . -292) (undo-tree-id69496 . -292) (undo-tree-id69497 . -292) (undo-tree-id69498 . -292) (undo-tree-id69499 . -292) (undo-tree-id69500 . -292) (undo-tree-id69501 . -292) (undo-tree-id69502 . -292) (undo-tree-id69503 . -292) (undo-tree-id69504 . -292) (undo-tree-id69505 . -292) (undo-tree-id69506 . -292) (undo-tree-id69507 . -292) (undo-tree-id69508 . -292) (undo-tree-id69509 . -292) (undo-tree-id69510 . -292) (undo-tree-id69511 . -292) (undo-tree-id69512 . -292) (undo-tree-id69513 . -292) (undo-tree-id69514 . -292) (undo-tree-id69515 . -292) (undo-tree-id69516 . -292) (undo-tree-id69517 . -292) (undo-tree-id69518 . -292) (undo-tree-id69519 . -292) (undo-tree-id69520 . -292) (undo-tree-id69521 . -292) (undo-tree-id69522 . -292) (undo-tree-id69523 . -292) (undo-tree-id69524 . -292) (undo-tree-id69525 . -292) (undo-tree-id69526 . -292) (undo-tree-id69527 . -292) (undo-tree-id69528 . -292) (undo-tree-id69529 . -292) (undo-tree-id69530 . -292) (undo-tree-id69531 . -292) (undo-tree-id69532 . -292) (undo-tree-id69533 . -292) (undo-tree-id69534 . -292) (undo-tree-id69535 . -292) (undo-tree-id69536 . -292) (undo-tree-id69537 . -292) (undo-tree-id69538 . -292) (undo-tree-id69539 . -292) (undo-tree-id69540 . -292) (undo-tree-id69541 . -292) (undo-tree-id69542 . -292) (undo-tree-id69543 . -292) (undo-tree-id69544 . -292) (undo-tree-id69545 . -292) (undo-tree-id69546 . -292) (undo-tree-id69547 . -292) (undo-tree-id69548 . -292) (undo-tree-id69549 . -292) (undo-tree-id69550 . -292) (undo-tree-id69551 . -292) (undo-tree-id69552 . -292) (undo-tree-id69553 . -292) (undo-tree-id69554 . -292) (undo-tree-id69555 . -292) (undo-tree-id69556 . -292) (undo-tree-id69557 . -292) (undo-tree-id69558 . -292) (undo-tree-id69559 . -292) (undo-tree-id69560 . -292) (undo-tree-id69561 . -292) (undo-tree-id69562 . -292) (undo-tree-id69563 . -292) (undo-tree-id69564 . -292) (undo-tree-id69565 . -292) (undo-tree-id69566 . -292) (undo-tree-id69567 . -292) (undo-tree-id69568 . -292) (undo-tree-id69569 . -292) (undo-tree-id69570 . -292) (undo-tree-id69571 . -292) (undo-tree-id69572 . -292) (undo-tree-id69573 . -292) (undo-tree-id69574 . -292) (undo-tree-id69575 . -292) (undo-tree-id69576 . -292) (undo-tree-id69577 . -292) (undo-tree-id69578 . -292) (undo-tree-id69579 . -292) (undo-tree-id69580 . -292) (undo-tree-id69581 . -292) (undo-tree-id69582 . -292) (undo-tree-id69583 . -292) (undo-tree-id69584 . -292) (undo-tree-id69585 . -292) (undo-tree-id69586 . -292) (undo-tree-id69587 . -292) (undo-tree-id69588 . -292) (undo-tree-id69589 . -292) (undo-tree-id69590 . -292) (undo-tree-id69591 . -292) (undo-tree-id69592 . -292) (undo-tree-id69593 . -292) (undo-tree-id69594 . -292) (undo-tree-id69595 . -292) (undo-tree-id69596 . -292) (undo-tree-id69597 . -292) (undo-tree-id69598 . -292) (undo-tree-id69599 . -292) (undo-tree-id69600 . -292) (undo-tree-id69601 . -292) (undo-tree-id69602 . -292) (undo-tree-id69603 . -292) (undo-tree-id69604 . -292) (undo-tree-id69605 . -292) (undo-tree-id69606 . -292) (undo-tree-id69607 . -292) (undo-tree-id69608 . -292) (undo-tree-id69609 . -292) (undo-tree-id69610 . -292) (undo-tree-id69611 . -292) (undo-tree-id69612 . -292) (undo-tree-id69613 . -292) (undo-tree-id69614 . -292) (undo-tree-id69615 . -292) (undo-tree-id69616 . -292) (undo-tree-id69617 . -292) (undo-tree-id69618 . -292) (undo-tree-id69619 . -292) (undo-tree-id69620 . -292) (undo-tree-id69621 . -292) (undo-tree-id69622 . -292) (undo-tree-id69623 . -292) (undo-tree-id69624 . -292) (undo-tree-id69625 . -292) (undo-tree-id69626 . -292) (undo-tree-id69627 . -292) (undo-tree-id69628 . -292) (undo-tree-id69629 . -292) (undo-tree-id69630 . -292) (undo-tree-id69631 . -292) (undo-tree-id69632 . -292) (undo-tree-id69633 . -292) (undo-tree-id69634 . -292) (undo-tree-id69635 . -292) (undo-tree-id69636 . -292) (undo-tree-id69637 . -292) (undo-tree-id69638 . -292) (undo-tree-id69639 . -292) (undo-tree-id69640 . -292) (undo-tree-id69641 . -292) (undo-tree-id69642 . -292) (undo-tree-id69643 . -292) (undo-tree-id69644 . -292) (undo-tree-id69645 . -292) (undo-tree-id69646 . -292) (undo-tree-id69647 . -292) (undo-tree-id69648 . -292) (undo-tree-id69649 . -292) (undo-tree-id69650 . -292) (undo-tree-id69651 . -292) (undo-tree-id69652 . -292) (undo-tree-id69653 . -292) (undo-tree-id69654 . -292) (undo-tree-id69655 . -292) (undo-tree-id69656 . -292) (undo-tree-id69657 . -292) (undo-tree-id69658 . -292) (undo-tree-id69659 . -292) (undo-tree-id69660 . -292) (undo-tree-id69661 . -292) (undo-tree-id69662 . -292) (undo-tree-id69663 . -292) (undo-tree-id69664 . -292) (undo-tree-id69665 . -292) (undo-tree-id69666 . -292) (undo-tree-id69667 . -292) (undo-tree-id69668 . -292) (undo-tree-id69669 . -292) (undo-tree-id69670 . -292) (undo-tree-id69671 . -292) (undo-tree-id69672 . -292) (undo-tree-id69673 . -292) (undo-tree-id69674 . -292) (undo-tree-id69675 . -292) (undo-tree-id69676 . -292) (undo-tree-id69677 . -292) (undo-tree-id69678 . -292) (undo-tree-id69679 . -292) (undo-tree-id69680 . -292) (undo-tree-id69681 . -292) (undo-tree-id69682 . -292) (undo-tree-id69683 . -292) (undo-tree-id69684 . -292) (undo-tree-id69685 . -292) (undo-tree-id69686 . -292) (undo-tree-id69687 . -292) (undo-tree-id69688 . -292) (undo-tree-id69689 . -292) (undo-tree-id69690 . -292) (undo-tree-id69691 . -292) (undo-tree-id69692 . -292) (undo-tree-id69693 . -292) (undo-tree-id69694 . -292) (undo-tree-id69695 . -292) (undo-tree-id69696 . -292) (undo-tree-id69697 . -292) (undo-tree-id69698 . -292) (undo-tree-id69699 . -292) (undo-tree-id69700 . -292) (undo-tree-id69701 . -292) (undo-tree-id69702 . -292) (undo-tree-id69703 . -292) (undo-tree-id69704 . -292) (undo-tree-id69705 . -292) (undo-tree-id69706 . -292) (undo-tree-id69707 . -292) (undo-tree-id69708 . -292) (undo-tree-id69709 . -292) (undo-tree-id69710 . -292) (undo-tree-id69711 . -292) (undo-tree-id69712 . -292) (undo-tree-id69713 . -292) (undo-tree-id69714 . -292) (undo-tree-id69715 . -292) (undo-tree-id69716 . -292) (undo-tree-id69717 . -292) (undo-tree-id69718 . -292) (undo-tree-id69719 . -292) (undo-tree-id69720 . -292) (undo-tree-id69721 . -292) (undo-tree-id69722 . -292) (undo-tree-id69723 . -292) (undo-tree-id69724 . -292) (undo-tree-id69725 . -292) (undo-tree-id69726 . -292) (undo-tree-id69727 . -292) (undo-tree-id69728 . -292) (undo-tree-id69729 . -292) (undo-tree-id69730 . -292) (undo-tree-id69731 . -292) (undo-tree-id69732 . -292) (undo-tree-id69733 . -292) (undo-tree-id69734 . -292) (undo-tree-id69735 . -292) (undo-tree-id69736 . -292) (undo-tree-id69737 . -292) (undo-tree-id69738 . -292) (undo-tree-id69739 . -292) (undo-tree-id69740 . -292) (undo-tree-id69741 . -292) (undo-tree-id69742 . -292) (undo-tree-id69743 . -292) (undo-tree-id69744 . -292) (undo-tree-id69745 . -292) (undo-tree-id69746 . -292) (undo-tree-id69747 . -292) (undo-tree-id69748 . -292) (undo-tree-id69749 . -292) (undo-tree-id69750 . -292) (undo-tree-id69751 . -292) (undo-tree-id69752 . -292) (undo-tree-id69753 . -292) (undo-tree-id69754 . -292) (undo-tree-id69755 . -292) (undo-tree-id69756 . -292) (undo-tree-id69757 . -292) (undo-tree-id69758 . -292) (undo-tree-id69759 . -292) (undo-tree-id69760 . -292) (undo-tree-id69761 . -292) (undo-tree-id69762 . -292) (undo-tree-id69763 . -292) (undo-tree-id69764 . -292) (undo-tree-id69765 . -292) (undo-tree-id69766 . -292) (undo-tree-id69767 . -292) (undo-tree-id69768 . -292) (undo-tree-id69769 . -292) (undo-tree-id69770 . -292) (undo-tree-id69771 . -292) (undo-tree-id69772 . -292) (undo-tree-id69773 . -292) (undo-tree-id69774 . -292) (undo-tree-id69775 . -292) (undo-tree-id69776 . -292) (undo-tree-id69777 . -292) (undo-tree-id69778 . -292) (undo-tree-id69779 . -292) (undo-tree-id69780 . -292) (undo-tree-id69781 . -292) (undo-tree-id69782 . -292) (undo-tree-id69783 . -292) (undo-tree-id69784 . -292) (undo-tree-id69785 . -292) (undo-tree-id69786 . -292) (undo-tree-id69787 . -292) (undo-tree-id69788 . -292) (undo-tree-id69789 . -292) (undo-tree-id69790 . -292) (undo-tree-id69791 . -292) (undo-tree-id69792 . -292) (undo-tree-id69793 . -292) (undo-tree-id69794 . -292) (undo-tree-id69795 . -292) (undo-tree-id69796 . -292) (undo-tree-id69797 . -292) (undo-tree-id69798 . -292) (undo-tree-id69799 . -292) (undo-tree-id69800 . -292) (undo-tree-id69801 . -292) (undo-tree-id69802 . -292) (undo-tree-id69803 . -292) (undo-tree-id69804 . -292) (undo-tree-id69805 . -292) (undo-tree-id69806 . -292) (undo-tree-id69807 . -292) (undo-tree-id69808 . -292) (undo-tree-id69809 . -292) (undo-tree-id69810 . -292) (undo-tree-id69811 . -292) (undo-tree-id69812 . -292) (undo-tree-id69813 . -292) (undo-tree-id69814 . -292) (undo-tree-id69815 . -292) (undo-tree-id69816 . -292) (undo-tree-id69817 . -292) (undo-tree-id69818 . -292) (undo-tree-id69819 . -292) (undo-tree-id69820 . -292) (undo-tree-id69821 . -292) (undo-tree-id69822 . -292) (undo-tree-id69823 . -292) (undo-tree-id69824 . -292) (undo-tree-id69825 . -292) (undo-tree-id69826 . -292) (undo-tree-id69827 . -292) (undo-tree-id69828 . -292) (undo-tree-id69829 . -292) (undo-tree-id69830 . -292) (undo-tree-id69831 . -292) (undo-tree-id69832 . -292) (undo-tree-id69833 . -292) (undo-tree-id69834 . -292) (undo-tree-id69835 . -292) (undo-tree-id69836 . -292) (undo-tree-id69837 . -292) (undo-tree-id69838 . -292) (undo-tree-id69839 . -292) (undo-tree-id69840 . -292) (undo-tree-id69841 . -292) (undo-tree-id69842 . -292) (undo-tree-id69843 . -292) (undo-tree-id69844 . -292) (undo-tree-id69845 . -292) (undo-tree-id69846 . -292) (undo-tree-id69847 . -292) (undo-tree-id69848 . -292) (undo-tree-id69849 . -292) (undo-tree-id69850 . -292) (undo-tree-id69851 . -292) (undo-tree-id69852 . -292) (undo-tree-id69853 . -292) (undo-tree-id69854 . -292) (undo-tree-id69855 . -292) (undo-tree-id69856 . -292) (undo-tree-id69857 . -292) (undo-tree-id69858 . -292) (undo-tree-id69859 . -292) (undo-tree-id69860 . -292) (undo-tree-id69861 . -292) (undo-tree-id69862 . -292) (undo-tree-id69863 . -292) (undo-tree-id69864 . -292) (undo-tree-id69865 . -292) (undo-tree-id69866 . -292) (undo-tree-id69867 . -292) (undo-tree-id69868 . -292) (undo-tree-id69869 . -292) (undo-tree-id69870 . -292) (undo-tree-id69871 . -292) (undo-tree-id69872 . -292) (undo-tree-id69873 . -292) (undo-tree-id69874 . -292) (undo-tree-id69875 . -292) (undo-tree-id69876 . -292) (undo-tree-id69877 . -292) (undo-tree-id69878 . -292) (undo-tree-id69879 . -292) (undo-tree-id69880 . -292) (undo-tree-id69881 . -292) (undo-tree-id69882 . -292) (undo-tree-id69883 . -292) (undo-tree-id69884 . -292) (undo-tree-id69885 . -292) (undo-tree-id69886 . -292) (undo-tree-id69887 . -292) (undo-tree-id69888 . -292) (undo-tree-id69889 . -292) (undo-tree-id69890 . -292) (undo-tree-id69891 . -292) (undo-tree-id69892 . -292) (undo-tree-id69893 . -292) (undo-tree-id69894 . -292) (undo-tree-id69895 . -292) (undo-tree-id69896 . -292) (undo-tree-id69897 . -292) (undo-tree-id69898 . -292) (undo-tree-id69899 . -292) (undo-tree-id69900 . -292) (undo-tree-id69901 . -292) (undo-tree-id69902 . -292) (undo-tree-id69903 . -292) (undo-tree-id69904 . -292) (undo-tree-id69905 . -292) (undo-tree-id69906 . -292) (undo-tree-id69907 . -292) (undo-tree-id69908 . -292) (undo-tree-id69909 . -292) (undo-tree-id69910 . -292) (undo-tree-id69911 . -292) (undo-tree-id69912 . -292) (undo-tree-id69913 . -292) (undo-tree-id69914 . -292) (undo-tree-id69915 . -292) (undo-tree-id69916 . -292) (undo-tree-id69917 . -292) (undo-tree-id69918 . -292) (undo-tree-id69919 . -292) (undo-tree-id69920 . -292) (undo-tree-id69921 . -292) (undo-tree-id69922 . -292) (undo-tree-id69923 . -292) (undo-tree-id69924 . -292) (undo-tree-id69925 . -292) (undo-tree-id69926 . -292) (undo-tree-id69927 . -292) (undo-tree-id69928 . -292) (undo-tree-id69929 . -292) (undo-tree-id69930 . -292) (undo-tree-id69931 . -292) (undo-tree-id69932 . -292) (undo-tree-id69933 . -292) (undo-tree-id69934 . -292) (undo-tree-id69935 . -292) (undo-tree-id69936 . -292) (undo-tree-id69937 . -292) (undo-tree-id69938 . -292) (undo-tree-id69939 . -292) (undo-tree-id69940 . -292) (undo-tree-id69941 . -292) (undo-tree-id69942 . -292) (undo-tree-id69943 . -292) (undo-tree-id69944 . -292) (undo-tree-id69945 . -292) (undo-tree-id69946 . -292) (undo-tree-id69947 . -292) (undo-tree-id69948 . -292) (undo-tree-id69949 . -292) (undo-tree-id69950 . -292) (undo-tree-id69951 . -292) (undo-tree-id69952 . -292) (undo-tree-id69953 . -292) (undo-tree-id69954 . -292) (undo-tree-id69955 . -292) (undo-tree-id69956 . -292) (undo-tree-id69957 . -292) (undo-tree-id69958 . -292) (undo-tree-id69959 . -292) (undo-tree-id69960 . -292) (undo-tree-id69961 . -292) (undo-tree-id69962 . -292) (undo-tree-id69963 . -292) (undo-tree-id69964 . -292) (undo-tree-id69965 . -292) (undo-tree-id69966 . -292) (undo-tree-id69967 . -292) (undo-tree-id69968 . -292) (undo-tree-id69969 . -292) (undo-tree-id69970 . -292) (undo-tree-id69971 . -292) (undo-tree-id69972 . -292) (undo-tree-id69973 . -292) (undo-tree-id69974 . -292) (undo-tree-id69975 . -292) (undo-tree-id69976 . -292) (undo-tree-id69977 . -292) (undo-tree-id69978 . -292) (undo-tree-id69979 . -292) (undo-tree-id69980 . -292) (undo-tree-id69981 . -292) (undo-tree-id69982 . -292) (undo-tree-id69983 . -292) (undo-tree-id69984 . -292) (undo-tree-id69985 . -292) (undo-tree-id69986 . -292) (undo-tree-id69987 . -292) (undo-tree-id69988 . -292) (undo-tree-id69989 . -292) (undo-tree-id69990 . -292) (undo-tree-id69991 . -292) (undo-tree-id69992 . -292) (undo-tree-id69993 . -292) (undo-tree-id69994 . -292) (undo-tree-id69995 . -292) (undo-tree-id69996 . -292) (undo-tree-id69997 . -292) (undo-tree-id69998 . -292) (undo-tree-id69999 . -292) (undo-tree-id70000 . -292) (undo-tree-id70001 . -292) (undo-tree-id70002 . -292) (undo-tree-id70003 . -292) (undo-tree-id70004 . -292) (undo-tree-id70005 . -292) (undo-tree-id70006 . -292) (undo-tree-id70007 . -292) (undo-tree-id70008 . -292) (undo-tree-id70009 . -292) (undo-tree-id70010 . -292) (undo-tree-id70011 . -292) (undo-tree-id70012 . -292) (undo-tree-id70013 . -292) (undo-tree-id70014 . -292) (undo-tree-id70015 . -292) (undo-tree-id70016 . -292) (undo-tree-id70017 . -292) (undo-tree-id70018 . -292) (undo-tree-id70019 . -292) (undo-tree-id70020 . -292) (undo-tree-id70021 . -292) (undo-tree-id70022 . -292) (undo-tree-id70023 . -292) (undo-tree-id70024 . -292) (undo-tree-id70025 . -292) (undo-tree-id70026 . -292) (undo-tree-id70027 . -292) (undo-tree-id70028 . -292) (undo-tree-id70029 . -292) (undo-tree-id70030 . -292) (undo-tree-id70031 . -292) (undo-tree-id70032 . -292) (undo-tree-id70033 . -292) (undo-tree-id70034 . -292) (undo-tree-id70035 . -292) (undo-tree-id70036 . -292) (undo-tree-id70037 . -292) (undo-tree-id70038 . -292) (undo-tree-id70039 . -292) (undo-tree-id70040 . -292) (undo-tree-id70041 . -292) (undo-tree-id70042 . -292) (undo-tree-id70043 . -292) (undo-tree-id70044 . -292) (undo-tree-id70045 . -292) (undo-tree-id70046 . -292) (undo-tree-id70047 . -292) (undo-tree-id70048 . -292) (undo-tree-id70049 . -292) (undo-tree-id70050 . -292) (undo-tree-id70051 . -292) (undo-tree-id70052 . -292) (undo-tree-id70053 . -292) (undo-tree-id70054 . -292) (undo-tree-id70055 . -292) (undo-tree-id70056 . -292) (undo-tree-id70057 . -292) (undo-tree-id70058 . -292) (undo-tree-id70059 . -292) (undo-tree-id70060 . -292) (undo-tree-id70061 . -292) (undo-tree-id70062 . -292) (undo-tree-id70063 . -292) (undo-tree-id70064 . -292) (undo-tree-id70065 . -292) (undo-tree-id70066 . -292) (undo-tree-id70067 . -292) (undo-tree-id70068 . -292) (undo-tree-id70069 . -292) (undo-tree-id70070 . -292) (undo-tree-id70071 . -292) (undo-tree-id70072 . -292) (undo-tree-id70073 . -292) (undo-tree-id70074 . -292) (undo-tree-id70075 . -292) (undo-tree-id70076 . -292) (undo-tree-id70077 . -292) (undo-tree-id70078 . -292) (undo-tree-id70079 . -292) (undo-tree-id70080 . -292) (undo-tree-id70081 . -292) (undo-tree-id70082 . -292) (undo-tree-id70083 . -292) (undo-tree-id70084 . -292) (undo-tree-id70085 . -292) (undo-tree-id70086 . -292) (undo-tree-id70087 . -292) (undo-tree-id70088 . -292) (undo-tree-id70089 . -292) (undo-tree-id70090 . -292) (undo-tree-id70091 . -292) (undo-tree-id70092 . -292) (undo-tree-id70093 . -292) (undo-tree-id70094 . -292) (undo-tree-id70095 . -292) (undo-tree-id70096 . -292) (undo-tree-id70097 . -292) (undo-tree-id70098 . -292) (undo-tree-id70099 . -292) (undo-tree-id70100 . -292) (undo-tree-id70101 . -292) (undo-tree-id70102 . -292) (undo-tree-id70103 . -292) (undo-tree-id70104 . -292) (undo-tree-id70105 . -292) (undo-tree-id70106 . -292) (undo-tree-id70107 . -292) (undo-tree-id70108 . -292) (undo-tree-id70109 . -292) (undo-tree-id70110 . -292) (undo-tree-id70111 . -292) (undo-tree-id70112 . -292) (undo-tree-id70113 . -292) (undo-tree-id70114 . -292) (undo-tree-id70115 . -292) (undo-tree-id70116 . -292) (undo-tree-id70117 . -292) (undo-tree-id70118 . -292) (undo-tree-id70119 . -292) (undo-tree-id70120 . -292) (undo-tree-id70121 . -292) (undo-tree-id70122 . -292) (undo-tree-id70123 . -292) (undo-tree-id70124 . -292) (undo-tree-id70125 . -292) (undo-tree-id70126 . -292) (undo-tree-id70127 . -292) (undo-tree-id70128 . -292) (undo-tree-id70129 . -292) (undo-tree-id70130 . -292) (undo-tree-id70131 . -292) (undo-tree-id70132 . -292) (undo-tree-id70133 . -292) (undo-tree-id70134 . -292) (undo-tree-id70135 . -292) (undo-tree-id70136 . -292) (undo-tree-id70137 . -292) (undo-tree-id70138 . -292) (undo-tree-id70139 . -292) (undo-tree-id70140 . -292) (undo-tree-id70141 . -292) (undo-tree-id70142 . -292) (undo-tree-id70143 . -292) (undo-tree-id70144 . -292) (undo-tree-id70145 . -292) (undo-tree-id70146 . -292) (undo-tree-id70147 . -292) (undo-tree-id70148 . -292) (undo-tree-id70149 . -292) (undo-tree-id70150 . -292) (undo-tree-id70151 . -292) (undo-tree-id70152 . -292) (undo-tree-id70153 . -292) (undo-tree-id70154 . -292) (undo-tree-id70155 . -292) (undo-tree-id70156 . -292) (undo-tree-id70157 . -292) (undo-tree-id70158 . -292) (undo-tree-id70159 . -292) (undo-tree-id70160 . -292) (undo-tree-id70161 . -292) (undo-tree-id70162 . -292) (undo-tree-id70163 . -292) (undo-tree-id70164 . -292) (undo-tree-id70165 . -292) (undo-tree-id70166 . -292) (undo-tree-id70167 . -292) (undo-tree-id70168 . -292) (undo-tree-id70169 . -292) (undo-tree-id70170 . -292) (undo-tree-id70171 . -292) (undo-tree-id70172 . -292) (undo-tree-id70173 . -292) (undo-tree-id70174 . -292) (undo-tree-id70175 . -292) (undo-tree-id70176 . -292) (undo-tree-id70177 . -292) (undo-tree-id70178 . -292) (undo-tree-id70179 . -292) (undo-tree-id70180 . -292) (undo-tree-id70181 . -292) (undo-tree-id70182 . -292) (undo-tree-id70183 . -292) (undo-tree-id70184 . -292) (undo-tree-id70185 . -292) (undo-tree-id70186 . -292) (undo-tree-id70187 . -292) (undo-tree-id70188 . -292) (undo-tree-id70189 . -292) (undo-tree-id70190 . -292) (undo-tree-id70191 . -292) (undo-tree-id70192 . -292) (undo-tree-id70193 . -292) (undo-tree-id70194 . -292) (undo-tree-id70195 . -292) (undo-tree-id70196 . -292) (undo-tree-id70197 . -292) (undo-tree-id70198 . -292) (undo-tree-id70199 . -292) (undo-tree-id70200 . -292) (undo-tree-id70201 . -292) (undo-tree-id70202 . -292) (undo-tree-id70203 . -292) (undo-tree-id70204 . -292) (undo-tree-id70205 . -292) (undo-tree-id70206 . -292) (undo-tree-id70207 . -292) (undo-tree-id70208 . -292) (undo-tree-id70209 . -292) (undo-tree-id70210 . -292) (undo-tree-id70211 . -292) (undo-tree-id70212 . -292) (undo-tree-id70213 . -292) (undo-tree-id70214 . -292) (undo-tree-id70215 . -292) (undo-tree-id70216 . -292) (undo-tree-id70217 . -292) (undo-tree-id70218 . -292) (undo-tree-id70219 . -292) (undo-tree-id70220 . -292) (undo-tree-id70221 . -292) (undo-tree-id70222 . -292) (undo-tree-id70223 . -292) (undo-tree-id70224 . -292) (undo-tree-id70225 . -292) (undo-tree-id70226 . -292) (undo-tree-id70227 . -292) (undo-tree-id70228 . -292) (undo-tree-id70229 . -292) (undo-tree-id70230 . -292) (undo-tree-id70231 . -292) (undo-tree-id70232 . -292) (undo-tree-id70233 . -292) (undo-tree-id70234 . -292) (undo-tree-id70235 . -292) (undo-tree-id70236 . -292) (undo-tree-id70237 . -292) (undo-tree-id70238 . -292) (undo-tree-id70239 . -292) (undo-tree-id70240 . -292) (undo-tree-id70241 . -292) (undo-tree-id70242 . -292) (undo-tree-id70243 . -292) (undo-tree-id70244 . -292) (undo-tree-id70245 . -292) (undo-tree-id70246 . -292) (undo-tree-id70247 . -292) (undo-tree-id70248 . -292) (undo-tree-id70249 . -292) (undo-tree-id70250 . -292) (undo-tree-id70251 . -292) (undo-tree-id70252 . -292) (undo-tree-id70253 . -292) (undo-tree-id70254 . -292) (undo-tree-id70255 . -292) (undo-tree-id70256 . -292) (undo-tree-id70257 . -292) (undo-tree-id70258 . -292) (undo-tree-id70259 . -292) (undo-tree-id70260 . -292) (undo-tree-id70261 . -292) (undo-tree-id70262 . -292) (undo-tree-id70263 . -292) (undo-tree-id70264 . -292) (undo-tree-id70265 . -292) (undo-tree-id70266 . -292) (undo-tree-id70267 . -292) (undo-tree-id70268 . -292) (undo-tree-id70269 . -292) (undo-tree-id70270 . -292) (undo-tree-id70271 . -292) (undo-tree-id70272 . -292) (undo-tree-id70273 . -292) (undo-tree-id70274 . -292) (undo-tree-id70275 . -292) (undo-tree-id70276 . -292) (undo-tree-id70277 . -292) (undo-tree-id70278 . -292) (undo-tree-id70279 . -292) (undo-tree-id70280 . -292) (undo-tree-id70281 . -292) (undo-tree-id70282 . -292) (undo-tree-id70283 . -292) (undo-tree-id70284 . -292) (undo-tree-id70285 . -292) (undo-tree-id70286 . -292) (undo-tree-id70287 . -292) (undo-tree-id70288 . -292) (undo-tree-id70289 . -292) (undo-tree-id70290 . -292) (undo-tree-id70291 . -292) (undo-tree-id70292 . -292) (undo-tree-id70293 . -292) (undo-tree-id70294 . -292) (undo-tree-id70295 . -292) (undo-tree-id70296 . -292) (undo-tree-id70297 . -292) (undo-tree-id70298 . -292) (undo-tree-id70299 . -292) (undo-tree-id70300 . -292) (undo-tree-id70301 . -292) (undo-tree-id70302 . -292) (undo-tree-id70303 . -292) (undo-tree-id70304 . -292) (undo-tree-id70305 . -292) (undo-tree-id70306 . -292) (undo-tree-id70307 . -292) (undo-tree-id70308 . -292) (undo-tree-id70309 . -292) (undo-tree-id70310 . -292) (undo-tree-id70311 . -292) (undo-tree-id70312 . -292) (undo-tree-id70313 . -292) (undo-tree-id70314 . -292) (undo-tree-id70315 . -292) (undo-tree-id70316 . -292) (undo-tree-id70317 . -292) (undo-tree-id70318 . -292) (undo-tree-id70319 . -292) (undo-tree-id70320 . -292) (undo-tree-id70321 . -292) (undo-tree-id70322 . -292) (undo-tree-id70323 . -292) (undo-tree-id70324 . -292) (undo-tree-id70325 . -292) (undo-tree-id70326 . -292) (undo-tree-id70327 . -292) (undo-tree-id70328 . -292) (undo-tree-id70329 . -292) (undo-tree-id70330 . -292) (undo-tree-id70331 . -292) (undo-tree-id70332 . -292) (undo-tree-id70333 . -292) (undo-tree-id70334 . -292) (undo-tree-id70335 . -292) (undo-tree-id70336 . -292) (undo-tree-id70337 . -292) (undo-tree-id70338 . -292) (undo-tree-id70339 . -292) (undo-tree-id70340 . -292) (undo-tree-id70341 . -292) (undo-tree-id70342 . -292) (undo-tree-id70343 . -292) (undo-tree-id70344 . -292) (undo-tree-id70345 . -292) (undo-tree-id70346 . -292) (undo-tree-id70347 . -292) (undo-tree-id70348 . -292) (undo-tree-id70349 . -292) (undo-tree-id70350 . -292) (undo-tree-id70351 . -292) (undo-tree-id70352 . -292) (undo-tree-id70353 . -292) (undo-tree-id70354 . -292) (undo-tree-id70355 . -292) (undo-tree-id70356 . -292) (undo-tree-id70357 . -292) (undo-tree-id70358 . -292) (undo-tree-id70359 . -292) (undo-tree-id70360 . -292) (undo-tree-id70361 . -292) (undo-tree-id70362 . -292) (undo-tree-id70363 . -292) (undo-tree-id70364 . -292) (undo-tree-id70365 . -292) (undo-tree-id70366 . -292) (undo-tree-id70367 . -292) (undo-tree-id70368 . -292) (undo-tree-id70369 . -292) (undo-tree-id70370 . -292) (undo-tree-id70371 . -292) (undo-tree-id70372 . -292) (undo-tree-id70373 . -292) (undo-tree-id70374 . -292) (undo-tree-id70375 . -292) (undo-tree-id70376 . -292) (undo-tree-id70377 . -292) (undo-tree-id70378 . -292) (undo-tree-id70379 . -292) (undo-tree-id70380 . -292) (undo-tree-id70381 . -292) (undo-tree-id70382 . -292) (undo-tree-id70383 . -292) (undo-tree-id70384 . -292) (undo-tree-id70385 . -292) (undo-tree-id70386 . -292) (undo-tree-id70387 . -292) (undo-tree-id70388 . -292) (undo-tree-id70389 . -292) (undo-tree-id70390 . -292) (undo-tree-id70391 . -292) (undo-tree-id70392 . -292) (undo-tree-id70393 . -131) (12153 . 12284) (#(" other ways of creating subword encodings (e.g., using byte pair encoding). Last but not least, the TensorFlow team released the" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 60 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 82 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 124 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12314) (undo-tree-id70394 . -1) (undo-tree-id70395 . -1) (undo-tree-id70396 . -1) (undo-tree-id70397 . -1) (undo-tree-id70398 . 127) (undo-tree-id70399 . 126) (undo-tree-id70400 . -59) (undo-tree-id70401 . -1) (undo-tree-id70402 . -59) (undo-tree-id70403 . -59) (undo-tree-id70404 . -59) (undo-tree-id70405 . -59) (undo-tree-id70406 . -59) (undo-tree-id70407 . -59) (undo-tree-id70408 . -59) (undo-tree-id70409 . -59) (undo-tree-id70410 . -59) (undo-tree-id70411 . -59) (undo-tree-id70412 . -59) (undo-tree-id70413 . -59) (undo-tree-id70414 . -59) (undo-tree-id70415 . -59) (undo-tree-id70416 . -59) (undo-tree-id70417 . -59) (undo-tree-id70418 . -59) (undo-tree-id70419 . -59) (undo-tree-id70420 . -59) (undo-tree-id70421 . -59) (undo-tree-id70422 . -59) (undo-tree-id70423 . -59) (undo-tree-id70424 . -59) (undo-tree-id70425 . -59) (undo-tree-id70426 . -1) (undo-tree-id70427 . -1) (undo-tree-id70428 . -1) (undo-tree-id70429 . -1) (undo-tree-id70430 . -1) (undo-tree-id70431 . -1) (undo-tree-id70432 . -1) (undo-tree-id70433 . -1) (undo-tree-id70434 . -1) (undo-tree-id70435 . -1) (undo-tree-id70436 . -1) (undo-tree-id70437 . -1) (undo-tree-id70438 . -1) (undo-tree-id70439 . -1) (undo-tree-id70440 . -1) (undo-tree-id70441 . -1) (undo-tree-id70442 . -1) (undo-tree-id70443 . -1) (undo-tree-id70444 . -1) (undo-tree-id70445 . -1) (undo-tree-id70446 . -1) (undo-tree-id70447 . -1) (undo-tree-id70448 . -1) (undo-tree-id70449 . -1) (undo-tree-id70450 . -1) (undo-tree-id70451 . -1) (undo-tree-id70452 . -1) (undo-tree-id70453 . -1) (undo-tree-id70454 . -1) (undo-tree-id70455 . -1) (undo-tree-id70456 . -1) (undo-tree-id70457 . -1) (undo-tree-id70458 . -1) (undo-tree-id70459 . -1) (undo-tree-id70460 . -1) (undo-tree-id70461 . -1) (undo-tree-id70462 . -1) (undo-tree-id70463 . -1) (undo-tree-id70464 . -1) (undo-tree-id70465 . -1) (undo-tree-id70466 . -1) (undo-tree-id70467 . -1) (undo-tree-id70468 . -1) (undo-tree-id70469 . -1) (undo-tree-id70470 . -1) (undo-tree-id70471 . -1) (undo-tree-id70472 . -1) (undo-tree-id70473 . -1) (undo-tree-id70474 . -1) (undo-tree-id70475 . -1) (undo-tree-id70476 . -1) (undo-tree-id70477 . -1) (undo-tree-id70478 . -1) (undo-tree-id70479 . -1) (undo-tree-id70480 . -1) (undo-tree-id70481 . -1) (undo-tree-id70482 . -1) (undo-tree-id70483 . -1) (undo-tree-id70484 . -1) (undo-tree-id70485 . -1) (undo-tree-id70486 . -1) (undo-tree-id70487 . -1) (undo-tree-id70488 . -1) (undo-tree-id70489 . -1) (undo-tree-id70490 . -1) (undo-tree-id70491 . -1) (undo-tree-id70492 . -1) (undo-tree-id70493 . -1) (undo-tree-id70494 . -1) (undo-tree-id70495 . -1) (undo-tree-id70496 . -1) (undo-tree-id70497 . -1) (undo-tree-id70498 . -1) (undo-tree-id70499 . -1) (undo-tree-id70500 . -1) (undo-tree-id70501 . -1) (undo-tree-id70502 . -1) (undo-tree-id70503 . -1) (undo-tree-id70504 . -1) (undo-tree-id70505 . -1) (undo-tree-id70506 . -1) (undo-tree-id70507 . -1) (undo-tree-id70508 . -1) (undo-tree-id70509 . -1) (undo-tree-id70510 . -1) (undo-tree-id70511 . -1) (undo-tree-id70512 . -1) (undo-tree-id70513 . -1) (undo-tree-id70514 . -1) (undo-tree-id70515 . -1) (undo-tree-id70516 . -1) (undo-tree-id70517 . -1) (undo-tree-id70518 . -1) (undo-tree-id70519 . -1) (undo-tree-id70520 . -1) (undo-tree-id70521 . -1) (undo-tree-id70522 . -1) (undo-tree-id70523 . -1) (undo-tree-id70524 . -1) (undo-tree-id70525 . -1) (undo-tree-id70526 . -1) (undo-tree-id70527 . -1) (undo-tree-id70528 . -1) (undo-tree-id70529 . -1) (undo-tree-id70530 . -1) (undo-tree-id70531 . -1) (undo-tree-id70532 . -1) (undo-tree-id70533 . -1) (undo-tree-id70534 . -1) (undo-tree-id70535 . -1) (undo-tree-id70536 . -1) (undo-tree-id70537 . -1) (undo-tree-id70538 . -1) (undo-tree-id70539 . -1) (undo-tree-id70540 . -1) (undo-tree-id70541 . -1) (undo-tree-id70542 . -1) (undo-tree-id70543 . -1) (undo-tree-id70544 . -1) (undo-tree-id70545 . -1) (undo-tree-id70546 . -1) (undo-tree-id70547 . -1) (undo-tree-id70548 . -1) (undo-tree-id70549 . -1) (undo-tree-id70550 . -1) (undo-tree-id70551 . -1) (undo-tree-id70552 . -1) (undo-tree-id70553 . -1) (undo-tree-id70554 . -1) (undo-tree-id70555 . -1) (undo-tree-id70556 . -1) (undo-tree-id70557 . -1) (undo-tree-id70558 . -1) (undo-tree-id70559 . -1) (undo-tree-id70560 . -1) (undo-tree-id70561 . -1) (undo-tree-id70562 . -1) (undo-tree-id70563 . -1) (undo-tree-id70564 . -1) (undo-tree-id70565 . -1) (undo-tree-id70566 . -1) (undo-tree-id70567 . -1) (undo-tree-id70568 . -1) (undo-tree-id70569 . -1) (undo-tree-id70570 . -1) (undo-tree-id70571 . -1) (undo-tree-id70572 . -1) (undo-tree-id70573 . -1) (undo-tree-id70574 . -1) (undo-tree-id70575 . -1) (undo-tree-id70576 . -1) (undo-tree-id70577 . -1) (undo-tree-id70578 . -1) (undo-tree-id70579 . -1) (undo-tree-id70580 . -1) (undo-tree-id70581 . -1) (undo-tree-id70582 . -1) (undo-tree-id70583 . -1) (undo-tree-id70584 . -1) (undo-tree-id70585 . -1) (undo-tree-id70586 . -1) (undo-tree-id70587 . -1) (undo-tree-id70588 . -1) (undo-tree-id70589 . -1) (undo-tree-id70590 . -1) (undo-tree-id70591 . -1) (undo-tree-id70592 . -1) (undo-tree-id70593 . -1) (undo-tree-id70594 . -1) (undo-tree-id70595 . -1) (undo-tree-id70596 . -1) (undo-tree-id70597 . -1) (undo-tree-id70598 . -1) (undo-tree-id70599 . -1) (undo-tree-id70600 . -1) (undo-tree-id70601 . -1) (undo-tree-id70602 . -1) (undo-tree-id70603 . -1) (undo-tree-id70604 . -1) (undo-tree-id70605 . -1) (undo-tree-id70606 . -1) (undo-tree-id70607 . -1) (undo-tree-id70608 . -1) (undo-tree-id70609 . -1) (undo-tree-id70610 . -1) (undo-tree-id70611 . -1) (undo-tree-id70612 . -1) (undo-tree-id70613 . -1) (undo-tree-id70614 . -1) (undo-tree-id70615 . -1) (undo-tree-id70616 . -1) (undo-tree-id70617 . -1) (undo-tree-id70618 . -1) (undo-tree-id70619 . -1) (undo-tree-id70620 . -1) (undo-tree-id70621 . -1) (undo-tree-id70622 . -1) (undo-tree-id70623 . -1) (undo-tree-id70624 . -1) (undo-tree-id70625 . -1) (undo-tree-id70626 . -1) (undo-tree-id70627 . -1) (undo-tree-id70628 . -1) (undo-tree-id70629 . -1) (undo-tree-id70630 . -1) (undo-tree-id70631 . -1) (undo-tree-id70632 . -1) (undo-tree-id70633 . -1) (undo-tree-id70634 . -1) (undo-tree-id70635 . -1) (undo-tree-id70636 . -1) (undo-tree-id70637 . -1) (undo-tree-id70638 . -1) (undo-tree-id70639 . -1) (undo-tree-id70640 . -1) (undo-tree-id70641 . -1) (undo-tree-id70642 . -1) (undo-tree-id70643 . -1) (undo-tree-id70644 . -1) (undo-tree-id70645 . -1) (undo-tree-id70646 . -1) (undo-tree-id70647 . -1) (undo-tree-id70648 . -1) (undo-tree-id70649 . -1) (undo-tree-id70650 . -1) (undo-tree-id70651 . -1) (undo-tree-id70652 . -1) (undo-tree-id70653 . -1) (undo-tree-id70654 . -1) (undo-tree-id70655 . -1) (undo-tree-id70656 . -1) (undo-tree-id70657 . -1) (undo-tree-id70658 . -1) (undo-tree-id70659 . -1) (undo-tree-id70660 . -1) (undo-tree-id70661 . -1) (undo-tree-id70662 . -1) (undo-tree-id70663 . -1) (undo-tree-id70664 . -1) (undo-tree-id70665 . -1) (undo-tree-id70666 . -1) (undo-tree-id70667 . -1) (undo-tree-id70668 . -1) (undo-tree-id70669 . -1) (undo-tree-id70670 . -1) (undo-tree-id70671 . -1) (undo-tree-id70672 . -1) (undo-tree-id70673 . -1) (undo-tree-id70674 . -1) (undo-tree-id70675 . -1) (undo-tree-id70676 . -1) (undo-tree-id70677 . -1) (undo-tree-id70678 . -1) (undo-tree-id70679 . -1) (undo-tree-id70680 . -1) (undo-tree-id70681 . -1) (undo-tree-id70682 . -1) (undo-tree-id70683 . -1) (undo-tree-id70684 . -1) (undo-tree-id70685 . -1) (undo-tree-id70686 . -1) (undo-tree-id70687 . -1) (undo-tree-id70688 . -1) (undo-tree-id70689 . -1) (undo-tree-id70690 . -1) (undo-tree-id70691 . -1) (undo-tree-id70692 . -1) (undo-tree-id70693 . -1) (undo-tree-id70694 . -1) (undo-tree-id70695 . -1) (undo-tree-id70696 . -1) (undo-tree-id70697 . -1) (undo-tree-id70698 . -1) (undo-tree-id70699 . -1) (undo-tree-id70700 . -1) (undo-tree-id70701 . -1) (undo-tree-id70702 . -1) (undo-tree-id70703 . -1) (undo-tree-id70704 . -1) (undo-tree-id70705 . -1) (undo-tree-id70706 . -1) (undo-tree-id70707 . -1) (undo-tree-id70708 . -1) (undo-tree-id70709 . -1) (undo-tree-id70710 . -1) (undo-tree-id70711 . -1) (undo-tree-id70712 . -1) (undo-tree-id70713 . -1) (undo-tree-id70714 . -1) (undo-tree-id70715 . -1) (undo-tree-id70716 . -1) (undo-tree-id70717 . -1) (undo-tree-id70718 . -1) (undo-tree-id70719 . -1) (undo-tree-id70720 . -1) (undo-tree-id70721 . -1) (undo-tree-id70722 . -1) (undo-tree-id70723 . -1) (undo-tree-id70724 . -1) (undo-tree-id70725 . -1) (undo-tree-id70726 . -1) (undo-tree-id70727 . -1) (undo-tree-id70728 . -1) (undo-tree-id70729 . -1) (undo-tree-id70730 . -1) (undo-tree-id70731 . -1) (undo-tree-id70732 . -1) (undo-tree-id70733 . -1) (undo-tree-id70734 . -1) (undo-tree-id70735 . -1) (undo-tree-id70736 . -1) (undo-tree-id70737 . -1) (undo-tree-id70738 . -1) (undo-tree-id70739 . -1) (undo-tree-id70740 . -1) (undo-tree-id70741 . -1) (undo-tree-id70742 . -1) (undo-tree-id70743 . -1) (undo-tree-id70744 . -1) (undo-tree-id70745 . -1) (undo-tree-id70746 . -1) (undo-tree-id70747 . -1) (undo-tree-id70748 . -1) (undo-tree-id70749 . -1) (undo-tree-id70750 . -1) (undo-tree-id70751 . -1) (undo-tree-id70752 . -1) (undo-tree-id70753 . -1) (undo-tree-id70754 . -1) (undo-tree-id70755 . -1) (undo-tree-id70756 . -1) (undo-tree-id70757 . -1) (undo-tree-id70758 . -1) (undo-tree-id70759 . -1) (undo-tree-id70760 . -1) (undo-tree-id70761 . -1) (undo-tree-id70762 . -1) (undo-tree-id70763 . -1) (undo-tree-id70764 . -1) (undo-tree-id70765 . -1) (undo-tree-id70766 . -1) (undo-tree-id70767 . -1) (undo-tree-id70768 . -1) (undo-tree-id70769 . -1) (undo-tree-id70770 . -1) (undo-tree-id70771 . -1) (undo-tree-id70772 . -1) (undo-tree-id70773 . -1) (undo-tree-id70774 . -1) (undo-tree-id70775 . -1) (undo-tree-id70776 . -1) (undo-tree-id70777 . -1) (undo-tree-id70778 . -1) (undo-tree-id70779 . -1) (undo-tree-id70780 . -1) (undo-tree-id70781 . -1) (undo-tree-id70782 . -1) (undo-tree-id70783 . -1) (undo-tree-id70784 . -1) (undo-tree-id70785 . -1) (undo-tree-id70786 . -1) (undo-tree-id70787 . -1) (undo-tree-id70788 . -1) (undo-tree-id70789 . -1) (undo-tree-id70790 . -1) (undo-tree-id70791 . -1) (undo-tree-id70792 . -1) (undo-tree-id70793 . -1) (undo-tree-id70794 . -1) (undo-tree-id70795 . -1) (undo-tree-id70796 . -1) (undo-tree-id70797 . -1) (undo-tree-id70798 . -1) (undo-tree-id70799 . -1) (undo-tree-id70800 . -1) (undo-tree-id70801 . -1) (undo-tree-id70802 . -1) (undo-tree-id70803 . -1) (undo-tree-id70804 . -1) (undo-tree-id70805 . -1) (undo-tree-id70806 . -1) (undo-tree-id70807 . -1) (undo-tree-id70808 . -1) (undo-tree-id70809 . -1) (undo-tree-id70810 . -1) (undo-tree-id70811 . -1) (undo-tree-id70812 . -1) (undo-tree-id70813 . -1) (undo-tree-id70814 . -1) (undo-tree-id70815 . -1) (undo-tree-id70816 . -1) (undo-tree-id70817 . -1) (undo-tree-id70818 . -1) (undo-tree-id70819 . -1) (undo-tree-id70820 . -1) (undo-tree-id70821 . -1) (undo-tree-id70822 . -1) (undo-tree-id70823 . -1) (undo-tree-id70824 . -1) (undo-tree-id70825 . -1) (undo-tree-id70826 . -1) (undo-tree-id70827 . -1) (undo-tree-id70828 . -1) (undo-tree-id70829 . -1) (undo-tree-id70830 . -1) (undo-tree-id70831 . -1) (undo-tree-id70832 . -1) (undo-tree-id70833 . -1) (undo-tree-id70834 . -1) (undo-tree-id70835 . -1) (undo-tree-id70836 . -1) (undo-tree-id70837 . -1) (undo-tree-id70838 . -1) (undo-tree-id70839 . -1) (undo-tree-id70840 . -1) (undo-tree-id70841 . -1) (undo-tree-id70842 . -1) (undo-tree-id70843 . -1) (undo-tree-id70844 . -1) (undo-tree-id70845 . -1) (undo-tree-id70846 . -1) (undo-tree-id70847 . -1) (undo-tree-id70848 . -1) (undo-tree-id70849 . -1) (undo-tree-id70850 . -1) (undo-tree-id70851 . -1) (undo-tree-id70852 . -1) (undo-tree-id70853 . -1) (undo-tree-id70854 . -1) (undo-tree-id70855 . -1) (undo-tree-id70856 . -1) (undo-tree-id70857 . -1) (undo-tree-id70858 . -1) (undo-tree-id70859 . -1) (undo-tree-id70860 . -1) (undo-tree-id70861 . -1) (undo-tree-id70862 . -1) (undo-tree-id70863 . -1) (undo-tree-id70864 . -1) (undo-tree-id70865 . -1) (undo-tree-id70866 . -1) (undo-tree-id70867 . -1) (undo-tree-id70868 . -1) (undo-tree-id70869 . -1) (undo-tree-id70870 . -1) (undo-tree-id70871 . -1) (undo-tree-id70872 . -1) (undo-tree-id70873 . -1) (undo-tree-id70874 . -1) (undo-tree-id70875 . -1) (undo-tree-id70876 . -1) (undo-tree-id70877 . -1) (undo-tree-id70878 . -1) (undo-tree-id70879 . -1) (undo-tree-id70880 . -1) (undo-tree-id70881 . -1) (undo-tree-id70882 . -1) (undo-tree-id70883 . -1) (undo-tree-id70884 . -1) (undo-tree-id70885 . -1) (undo-tree-id70886 . -1) (undo-tree-id70887 . -1) (undo-tree-id70888 . -1) (undo-tree-id70889 . -1) (undo-tree-id70890 . -1) (undo-tree-id70891 . -1) (undo-tree-id70892 . -1) (undo-tree-id70893 . -1) (undo-tree-id70894 . -1) (undo-tree-id70895 . -1) (undo-tree-id70896 . -1) (undo-tree-id70897 . -1) (undo-tree-id70898 . -1) (undo-tree-id70899 . -1) (undo-tree-id70900 . -1) (undo-tree-id70901 . -1) (undo-tree-id70902 . -1) (undo-tree-id70903 . -1) (undo-tree-id70904 . -1) (undo-tree-id70905 . -1) (undo-tree-id70906 . -1) (undo-tree-id70907 . -1) (undo-tree-id70908 . -1) (undo-tree-id70909 . -1) (undo-tree-id70910 . -1) (undo-tree-id70911 . -1) (undo-tree-id70912 . -1) (undo-tree-id70913 . -1) (undo-tree-id70914 . -1) (undo-tree-id70915 . -1) (undo-tree-id70916 . -1) (undo-tree-id70917 . -1) (undo-tree-id70918 . -1) (undo-tree-id70919 . -1) (undo-tree-id70920 . -1) (undo-tree-id70921 . -1) (undo-tree-id70922 . -1) (undo-tree-id70923 . -1) (undo-tree-id70924 . -1) (undo-tree-id70925 . -1) (undo-tree-id70926 . -1) (undo-tree-id70927 . -1) (undo-tree-id70928 . -1) (undo-tree-id70929 . -1) (undo-tree-id70930 . -1) (undo-tree-id70931 . -1) (undo-tree-id70932 . -1) (undo-tree-id70933 . -1) (undo-tree-id70934 . -1) (undo-tree-id70935 . -1) (undo-tree-id70936 . -1) (undo-tree-id70937 . -1) (undo-tree-id70938 . -1) (undo-tree-id70939 . -1) (undo-tree-id70940 . -1) (undo-tree-id70941 . -1) (undo-tree-id70942 . -1) (undo-tree-id70943 . -1) (undo-tree-id70944 . -1) (undo-tree-id70945 . -1) (undo-tree-id70946 . -1) (undo-tree-id70947 . -1) (undo-tree-id70948 . -1) (undo-tree-id70949 . -1) (undo-tree-id70950 . -1) (undo-tree-id70951 . -1) (undo-tree-id70952 . -1) (undo-tree-id70953 . -1) (undo-tree-id70954 . -1) (undo-tree-id70955 . -1) (undo-tree-id70956 . -1) (undo-tree-id70957 . -1) (undo-tree-id70958 . -1) (undo-tree-id70959 . -1) (undo-tree-id70960 . -1) (undo-tree-id70961 . -1) (undo-tree-id70962 . -1) (undo-tree-id70963 . -1) (undo-tree-id70964 . -1) (undo-tree-id70965 . -1) (undo-tree-id70966 . -1) (undo-tree-id70967 . -1) (undo-tree-id70968 . -1) (undo-tree-id70969 . -1) (undo-tree-id70970 . -1) (undo-tree-id70971 . -1) (undo-tree-id70972 . -1) (undo-tree-id70973 . -1) (undo-tree-id70974 . -1) (undo-tree-id70975 . -1) (undo-tree-id70976 . -1) (undo-tree-id70977 . -1) (undo-tree-id70978 . -1) (undo-tree-id70979 . -1) (undo-tree-id70980 . -1) (undo-tree-id70981 . -1) (undo-tree-id70982 . -1) (undo-tree-id70983 . -1) (undo-tree-id70984 . -1) (undo-tree-id70985 . -1) (undo-tree-id70986 . -1) (undo-tree-id70987 . -1) (undo-tree-id70988 . -1) (undo-tree-id70989 . -1) (undo-tree-id70990 . -1) (undo-tree-id70991 . -1) (undo-tree-id70992 . -1) (undo-tree-id70993 . -1) (undo-tree-id70994 . -1) (undo-tree-id70995 . -1) (undo-tree-id70996 . -1) (undo-tree-id70997 . -1) (undo-tree-id70998 . -1) (undo-tree-id70999 . -1) (undo-tree-id71000 . -1) (undo-tree-id71001 . -1) (undo-tree-id71002 . -1) (undo-tree-id71003 . -1) (undo-tree-id71004 . -1) (undo-tree-id71005 . -1) (undo-tree-id71006 . -1) (undo-tree-id71007 . -1) (undo-tree-id71008 . -1) (undo-tree-id71009 . -1) (undo-tree-id71010 . -1) (undo-tree-id71011 . -1) (undo-tree-id71012 . -1) (undo-tree-id71013 . -1) (undo-tree-id71014 . -1) (undo-tree-id71015 . -1) (undo-tree-id71016 . -1) (undo-tree-id71017 . -1) (undo-tree-id71018 . -1) (undo-tree-id71019 . -1) (undo-tree-id71020 . -1) (undo-tree-id71021 . -1) (undo-tree-id71022 . -1) (undo-tree-id71023 . -1) (undo-tree-id71024 . -1) (undo-tree-id71025 . -1) (undo-tree-id71026 . -1) (undo-tree-id71027 . -1) (undo-tree-id71028 . -1) (undo-tree-id71029 . -1) (undo-tree-id71030 . -1) (undo-tree-id71031 . -1) (undo-tree-id71032 . -1) (undo-tree-id71033 . -1) (undo-tree-id71034 . -1) (undo-tree-id71035 . -1) (undo-tree-id71036 . -1) (undo-tree-id71037 . -1) (undo-tree-id71038 . -1) (undo-tree-id71039 . -1) (undo-tree-id71040 . -1) (undo-tree-id71041 . -1) (undo-tree-id71042 . -1) (undo-tree-id71043 . -1) (undo-tree-id71044 . -1) (undo-tree-id71045 . -1) (undo-tree-id71046 . -1) (undo-tree-id71047 . -1) (undo-tree-id71048 . -1) (undo-tree-id71049 . -1) (undo-tree-id71050 . -1) (undo-tree-id71051 . -1) (undo-tree-id71052 . -1) (undo-tree-id71053 . -1) (undo-tree-id71054 . -1) (undo-tree-id71055 . -1) (undo-tree-id71056 . -1) (undo-tree-id71057 . -1) (undo-tree-id71058 . -1) (undo-tree-id71059 . -1) (undo-tree-id71060 . -1) (undo-tree-id71061 . -1) (undo-tree-id71062 . -1) (undo-tree-id71063 . -1) (undo-tree-id71064 . -1) (undo-tree-id71065 . -1) (undo-tree-id71066 . -1) (undo-tree-id71067 . -1) (undo-tree-id71068 . -1) (undo-tree-id71069 . -1) (undo-tree-id71070 . -1) (undo-tree-id71071 . -1) (undo-tree-id71072 . -1) (undo-tree-id71073 . -1) (undo-tree-id71074 . -1) (undo-tree-id71075 . -1) (undo-tree-id71076 . -1) (undo-tree-id71077 . -1) (undo-tree-id71078 . -1) (undo-tree-id71079 . -1) (undo-tree-id71080 . -1) (undo-tree-id71081 . -1) (undo-tree-id71082 . -1) (undo-tree-id71083 . -1) (undo-tree-id71084 . -1) (undo-tree-id71085 . -1) (undo-tree-id71086 . -1) (undo-tree-id71087 . -1) (undo-tree-id71088 . -1) (undo-tree-id71089 . -1) (undo-tree-id71090 . -1) (undo-tree-id71091 . -1) (undo-tree-id71092 . -1) (undo-tree-id71093 . -1) (undo-tree-id71094 . -1) (undo-tree-id71095 . -1) (undo-tree-id71096 . -1) (undo-tree-id71097 . -1) (undo-tree-id71098 . -1) (undo-tree-id71099 . -1) (undo-tree-id71100 . -1) (undo-tree-id71101 . -1) (undo-tree-id71102 . -1) (undo-tree-id71103 . -1) (undo-tree-id71104 . -1) (undo-tree-id71105 . -1) (undo-tree-id71106 . -1) (undo-tree-id71107 . -1) (undo-tree-id71108 . -1) (undo-tree-id71109 . -1) (undo-tree-id71110 . -1) (undo-tree-id71111 . -1) (undo-tree-id71112 . -1) (undo-tree-id71113 . -1) (undo-tree-id71114 . -1) (undo-tree-id71115 . -1) (undo-tree-id71116 . -1) (undo-tree-id71117 . -1) (undo-tree-id71118 . -1) (undo-tree-id71119 . -1) (undo-tree-id71120 . -1) (undo-tree-id71121 . -1) (undo-tree-id71122 . -1) (undo-tree-id71123 . -1) (undo-tree-id71124 . -1) (undo-tree-id71125 . -1) (undo-tree-id71126 . -1) (undo-tree-id71127 . -1) (undo-tree-id71128 . -1) (undo-tree-id71129 . -1) (undo-tree-id71130 . -1) (undo-tree-id71131 . -1) (undo-tree-id71132 . -1) (undo-tree-id71133 . -1) (undo-tree-id71134 . -1) (undo-tree-id71135 . -1) (undo-tree-id71136 . -1) (undo-tree-id71137 . -1) (undo-tree-id71138 . -1) (undo-tree-id71139 . -1) (undo-tree-id71140 . -1) (undo-tree-id71141 . -1) (undo-tree-id71142 . -1) (undo-tree-id71143 . -1) (undo-tree-id71144 . -1) (undo-tree-id71145 . -1) (undo-tree-id71146 . -1) (undo-tree-id71147 . -1) (undo-tree-id71148 . -1) (undo-tree-id71149 . -1) (undo-tree-id71150 . -1) (undo-tree-id71151 . -1) (undo-tree-id71152 . -1) (undo-tree-id71153 . -1) (undo-tree-id71154 . -1) (undo-tree-id71155 . -1) (undo-tree-id71156 . -1) (undo-tree-id71157 . -1) (undo-tree-id71158 . -1) (undo-tree-id71159 . -1) (undo-tree-id71160 . -1) (undo-tree-id71161 . -1) (undo-tree-id71162 . -1) (undo-tree-id71163 . -1) (undo-tree-id71164 . -1) (undo-tree-id71165 . -1) (undo-tree-id71166 . -1) (undo-tree-id71167 . -1) (undo-tree-id71168 . -1) (undo-tree-id71169 . -1) (undo-tree-id71170 . -1) (undo-tree-id71171 . -1) (undo-tree-id71172 . -1) (undo-tree-id71173 . -1) (undo-tree-id71174 . -1) (undo-tree-id71175 . -1) (undo-tree-id71176 . -1) (undo-tree-id71177 . -1) (undo-tree-id71178 . -1) (undo-tree-id71179 . -1) (undo-tree-id71180 . -1) (undo-tree-id71181 . -1) (undo-tree-id71182 . -1) (undo-tree-id71183 . -1) (undo-tree-id71184 . -1) (undo-tree-id71185 . -1) (undo-tree-id71186 . -1) (undo-tree-id71187 . -1) (undo-tree-id71188 . -1) (undo-tree-id71189 . -1) (undo-tree-id71190 . -1) (undo-tree-id71191 . -1) (undo-tree-id71192 . -1) (undo-tree-id71193 . -1) (undo-tree-id71194 . -1) (undo-tree-id71195 . -1) (undo-tree-id71196 . -1) (undo-tree-id71197 . -1) (undo-tree-id71198 . -1) (undo-tree-id71199 . -1) (undo-tree-id71200 . -1) (undo-tree-id71201 . -1) (undo-tree-id71202 . -1) (undo-tree-id71203 . -1) (undo-tree-id71204 . -1) (undo-tree-id71205 . -1) (undo-tree-id71206 . -1) (undo-tree-id71207 . -1) (undo-tree-id71208 . -1) (undo-tree-id71209 . -1) (undo-tree-id71210 . -1) (undo-tree-id71211 . -1) (undo-tree-id71212 . -1) (undo-tree-id71213 . -1) (undo-tree-id71214 . -1) (undo-tree-id71215 . -1) (undo-tree-id71216 . -1) (undo-tree-id71217 . -1) (undo-tree-id71218 . -1) (undo-tree-id71219 . -1) (undo-tree-id71220 . -1) (undo-tree-id71221 . -1) (undo-tree-id71222 . -1) (undo-tree-id71223 . -1) (undo-tree-id71224 . -1) (undo-tree-id71225 . -1) (undo-tree-id71226 . -1) (undo-tree-id71227 . -1) (undo-tree-id71228 . -1) (undo-tree-id71229 . -1) (undo-tree-id71230 . -1) (undo-tree-id71231 . -1) (undo-tree-id71232 . -1) (undo-tree-id71233 . -1) (undo-tree-id71234 . -1) (undo-tree-id71235 . -1) (undo-tree-id71236 . -1) (undo-tree-id71237 . -1) (undo-tree-id71238 . -1) (undo-tree-id71239 . -1) (undo-tree-id71240 . -1) (undo-tree-id71241 . -1) (undo-tree-id71242 . -1) (undo-tree-id71243 . -1) (undo-tree-id71244 . -1) (undo-tree-id71245 . -1) (undo-tree-id71246 . -1) (undo-tree-id71247 . -1) (undo-tree-id71248 . -1) (undo-tree-id71249 . -1) (undo-tree-id71250 . -1) (undo-tree-id71251 . -1) (undo-tree-id71252 . -1) (undo-tree-id71253 . -1) (undo-tree-id71254 . -1) (undo-tree-id71255 . -1) (undo-tree-id71256 . -1) (undo-tree-id71257 . -1) (undo-tree-id71258 . -1) (undo-tree-id71259 . -1) (undo-tree-id71260 . -1) (undo-tree-id71261 . -1) (undo-tree-id71262 . -1) (undo-tree-id71263 . -1) (undo-tree-id71264 . -1) (undo-tree-id71265 . -1) (undo-tree-id71266 . -1) (undo-tree-id71267 . -1) (undo-tree-id71268 . -1) (undo-tree-id71269 . -1) (undo-tree-id71270 . -1) (undo-tree-id71271 . -1) (undo-tree-id71272 . -1) (undo-tree-id71273 . -1) (undo-tree-id71274 . -1) (undo-tree-id71275 . -1) (undo-tree-id71276 . -1) (undo-tree-id71277 . -1) (undo-tree-id71278 . -1) (undo-tree-id71279 . -1) (undo-tree-id71280 . -1) (undo-tree-id71281 . -1) (undo-tree-id71282 . -1) (undo-tree-id71283 . -1) (undo-tree-id71284 . -1) (undo-tree-id71285 . -1) (undo-tree-id71286 . -1) (undo-tree-id71287 . -1) (undo-tree-id71288 . -1) (undo-tree-id71289 . -1) (undo-tree-id71290 . -1) (undo-tree-id71291 . -1) (undo-tree-id71292 . -1) (undo-tree-id71293 . -1) (undo-tree-id71294 . -1) (undo-tree-id71295 . -1) (undo-tree-id71296 . -1) (undo-tree-id71297 . -1) (undo-tree-id71298 . -1) (undo-tree-id71299 . -1) (undo-tree-id71300 . -1) (undo-tree-id71301 . -1) (undo-tree-id71302 . -1) (undo-tree-id71303 . -1) (undo-tree-id71304 . -1) (undo-tree-id71305 . -1) (undo-tree-id71306 . -1) (undo-tree-id71307 . -1) (undo-tree-id71308 . -1) (undo-tree-id71309 . -1) (undo-tree-id71310 . -1) (undo-tree-id71311 . -1) (undo-tree-id71312 . -1) (undo-tree-id71313 . -1) (undo-tree-id71314 . -5) (undo-tree-id71315 . -5) (undo-tree-id71316 . -5) (undo-tree-id71317 . -5) (undo-tree-id71318 . -5) (undo-tree-id71319 . -5) (undo-tree-id71320 . -5) (undo-tree-id71321 . -5) (undo-tree-id71322 . -5) (undo-tree-id71323 . -5) (undo-tree-id71324 . -5) (undo-tree-id71325 . -5) (undo-tree-id71326 . -5) (undo-tree-id71327 . -5) (undo-tree-id71328 . -5) (undo-tree-id71329 . -5) (undo-tree-id71330 . -10) (undo-tree-id71331 . -10) (undo-tree-id71332 . -10) (undo-tree-id71333 . -10) (undo-tree-id71334 . -10) (undo-tree-id71335 . -10) (undo-tree-id71336 . -10) (undo-tree-id71337 . -10) (undo-tree-id71338 . -10) (undo-tree-id71339 . -10) (undo-tree-id71340 . -10) (undo-tree-id71341 . -10) (undo-tree-id71342 . -10) (undo-tree-id71343 . -10) (undo-tree-id71344 . -10) (undo-tree-id71345 . -10) (undo-tree-id71346 . -10) (undo-tree-id71347 . -10) (undo-tree-id71348 . -10) (undo-tree-id71349 . -10) (undo-tree-id71350 . -10) (undo-tree-id71351 . -13) (undo-tree-id71352 . -13) (undo-tree-id71353 . -13) (undo-tree-id71354 . -13) (undo-tree-id71355 . -13) (undo-tree-id71356 . -13) (undo-tree-id71357 . -13) (undo-tree-id71358 . -13) (undo-tree-id71359 . -13) (undo-tree-id71360 . -13) (undo-tree-id71361 . -13) (undo-tree-id71362 . -13) (undo-tree-id71363 . -13) (undo-tree-id71364 . -13) (undo-tree-id71365 . -13) (undo-tree-id71366 . -13) (undo-tree-id71367 . -22) (undo-tree-id71368 . -22) (undo-tree-id71369 . -22) (undo-tree-id71370 . -22) (undo-tree-id71371 . -22) (undo-tree-id71372 . -22) (undo-tree-id71373 . -22) (undo-tree-id71374 . -22) (undo-tree-id71375 . -22) (undo-tree-id71376 . -22) (undo-tree-id71377 . -22) (undo-tree-id71378 . -22) (undo-tree-id71379 . -22) (undo-tree-id71380 . -22) (undo-tree-id71381 . -22) (undo-tree-id71382 . -22) (undo-tree-id71383 . -30) (undo-tree-id71384 . -30) (undo-tree-id71385 . -30) (undo-tree-id71386 . -30) (undo-tree-id71387 . -30) (undo-tree-id71388 . -30) (undo-tree-id71389 . -30) (undo-tree-id71390 . -30) (undo-tree-id71391 . -30) (undo-tree-id71392 . -30) (undo-tree-id71393 . -30) (undo-tree-id71394 . -30) (undo-tree-id71395 . -30) (undo-tree-id71396 . -30) (undo-tree-id71397 . -30) (undo-tree-id71398 . -30) (undo-tree-id71399 . 96) (undo-tree-id71400 . -41) (undo-tree-id71401 . -40) (undo-tree-id71402 . -40) (undo-tree-id71403 . -40) (undo-tree-id71404 . -40) (undo-tree-id71405 . -40) (undo-tree-id71406 . -40) (undo-tree-id71407 . -40) (undo-tree-id71408 . -40) (undo-tree-id71409 . -40) (undo-tree-id71410 . -40) (undo-tree-id71411 . -40) (undo-tree-id71412 . -40) (undo-tree-id71413 . -40) (undo-tree-id71414 . -40) (undo-tree-id71415 . -40) (undo-tree-id71416 . -40) (undo-tree-id71417 . -42) (undo-tree-id71418 . -42) (undo-tree-id71419 . -42) (undo-tree-id71420 . -42) (undo-tree-id71421 . -42) (undo-tree-id71422 . -42) (undo-tree-id71423 . -42) (undo-tree-id71424 . -42) (undo-tree-id71425 . -42) (undo-tree-id71426 . -42) (undo-tree-id71427 . -42) (undo-tree-id71428 . -42) (undo-tree-id71429 . -42) (undo-tree-id71430 . -42) (undo-tree-id71431 . -42) (undo-tree-id71432 . -42) (undo-tree-id71433 . -42) (undo-tree-id71434 . -42) (undo-tree-id71435 . -42) (undo-tree-id71436 . -42) (undo-tree-id71437 . -42) (undo-tree-id71438 . -42) (undo-tree-id71439 . -42) (undo-tree-id71440 . -42) (undo-tree-id71441 . -42) (undo-tree-id71442 . -42) (undo-tree-id71443 . -42) (undo-tree-id71444 . -42) (undo-tree-id71445 . -42) (undo-tree-id71446 . -42) (undo-tree-id71447 . -42) (undo-tree-id71448 . -41) (undo-tree-id71449 . -41) (undo-tree-id71450 . -41) (undo-tree-id71451 . -41) (undo-tree-id71452 . -41) (undo-tree-id71453 . -41) (undo-tree-id71454 . -41) (undo-tree-id71455 . -41) (undo-tree-id71456 . -41) (undo-tree-id71457 . -41) (undo-tree-id71458 . -41) (undo-tree-id71459 . -41) (undo-tree-id71460 . -41) (undo-tree-id71461 . -41) (undo-tree-id71462 . -41) (undo-tree-id71463 . -41) (undo-tree-id71464 . -41) (undo-tree-id71465 . -41) (undo-tree-id71466 . -41) (undo-tree-id71467 . -41) (undo-tree-id71468 . -41) (undo-tree-id71469 . -40) (undo-tree-id71470 . -40) (undo-tree-id71471 . -40) (undo-tree-id71472 . -40) (undo-tree-id71473 . -40) (undo-tree-id71474 . -40) (undo-tree-id71475 . -39) (undo-tree-id71476 . -39) (undo-tree-id71477 . -39) (undo-tree-id71478 . -39) (undo-tree-id71479 . -39) (undo-tree-id71480 . -39) (undo-tree-id71481 . -38) (undo-tree-id71482 . -38) (undo-tree-id71483 . -38) (undo-tree-id71484 . -38) (undo-tree-id71485 . -38) (undo-tree-id71486 . -38) (undo-tree-id71487 . -37) (undo-tree-id71488 . -37) (undo-tree-id71489 . -37) (undo-tree-id71490 . -37) (undo-tree-id71491 . -37) (undo-tree-id71492 . -37) (undo-tree-id71493 . -36) (undo-tree-id71494 . -36) (undo-tree-id71495 . -36) (undo-tree-id71496 . -36) (undo-tree-id71497 . -36) (undo-tree-id71498 . -36) (undo-tree-id71499 . -35) (undo-tree-id71500 . -35) (undo-tree-id71501 . -35) (undo-tree-id71502 . -35) (undo-tree-id71503 . -35) (undo-tree-id71504 . -35) (undo-tree-id71505 . -34) (undo-tree-id71506 . -34) (undo-tree-id71507 . -34) (undo-tree-id71508 . -34) (undo-tree-id71509 . -34) (undo-tree-id71510 . -34) (undo-tree-id71511 . -33) (undo-tree-id71512 . -33) (undo-tree-id71513 . -33) (undo-tree-id71514 . -33) (undo-tree-id71515 . -33) (undo-tree-id71516 . -33) (undo-tree-id71517 . -32) (undo-tree-id71518 . -32) (undo-tree-id71519 . -32) (undo-tree-id71520 . -32) (undo-tree-id71521 . -32) (undo-tree-id71522 . -32) (undo-tree-id71523 . 104) (undo-tree-id71524 . -31) (undo-tree-id71525 . -31) (undo-tree-id71526 . -31) (undo-tree-id71527 . -31) (undo-tree-id71528 . -31) (undo-tree-id71529 . -31) (undo-tree-id71530 . -31) (undo-tree-id71531 . -30) (undo-tree-id71532 . -30) (undo-tree-id71533 . -30) (undo-tree-id71534 . -30) (undo-tree-id71535 . -30) (undo-tree-id71536 . -30) (undo-tree-id71537 . -29) (undo-tree-id71538 . -29) (undo-tree-id71539 . -29) (undo-tree-id71540 . -29) (undo-tree-id71541 . -29) (undo-tree-id71542 . -29) (undo-tree-id71543 . -28) (undo-tree-id71544 . -28) (undo-tree-id71545 . -28) (undo-tree-id71546 . -28) (undo-tree-id71547 . -28) (undo-tree-id71548 . -28) (undo-tree-id71549 . -27) (undo-tree-id71550 . -27) (undo-tree-id71551 . -27) (undo-tree-id71552 . -27) (undo-tree-id71553 . -27) (undo-tree-id71554 . -27) (undo-tree-id71555 . -26) (undo-tree-id71556 . -26) (undo-tree-id71557 . -26) (undo-tree-id71558 . -26) (undo-tree-id71559 . -26) (undo-tree-id71560 . -26) (undo-tree-id71561 . -25) (undo-tree-id71562 . -25) (undo-tree-id71563 . -25) (undo-tree-id71564 . -25) (undo-tree-id71565 . -25) (undo-tree-id71566 . -25) (undo-tree-id71567 . -24) (undo-tree-id71568 . -24) (undo-tree-id71569 . -24) (undo-tree-id71570 . -24) (undo-tree-id71571 . -24) (undo-tree-id71572 . -24) (undo-tree-id71573 . -23) (undo-tree-id71574 . -23) (undo-tree-id71575 . -23) (undo-tree-id71576 . -23) (undo-tree-id71577 . -23) (undo-tree-id71578 . -23) (undo-tree-id71579 . -22) (undo-tree-id71580 . -22) (undo-tree-id71581 . -22) (undo-tree-id71582 . -22) (undo-tree-id71583 . -22) (undo-tree-id71584 . -22) (undo-tree-id71585 . -21) (undo-tree-id71586 . -21) (undo-tree-id71587 . -21) (undo-tree-id71588 . -21) (undo-tree-id71589 . -21) (undo-tree-id71590 . -21) (undo-tree-id71591 . -20) (undo-tree-id71592 . -20) (undo-tree-id71593 . -20) (undo-tree-id71594 . -20) (undo-tree-id71595 . -20) (undo-tree-id71596 . -20) (undo-tree-id71597 . -19) (undo-tree-id71598 . -19) (undo-tree-id71599 . -19) (undo-tree-id71600 . -19) (undo-tree-id71601 . -19) (undo-tree-id71602 . -19) (undo-tree-id71603 . -18) (undo-tree-id71604 . -18) (undo-tree-id71605 . -18) (undo-tree-id71606 . -18) (undo-tree-id71607 . -18) (undo-tree-id71608 . -18) (undo-tree-id71609 . -17) (undo-tree-id71610 . -17) (undo-tree-id71611 . -17) (undo-tree-id71612 . -17) (undo-tree-id71613 . -17) (undo-tree-id71614 . -17) (undo-tree-id71615 . -16) (undo-tree-id71616 . -16) (undo-tree-id71617 . -16) (undo-tree-id71618 . -16) (undo-tree-id71619 . -16) (undo-tree-id71620 . -16) (undo-tree-id71621 . -15) (undo-tree-id71622 . -15) (undo-tree-id71623 . -15) (undo-tree-id71624 . -15) (undo-tree-id71625 . -15) (undo-tree-id71626 . -15) (undo-tree-id71627 . -14) (undo-tree-id71628 . -14) (undo-tree-id71629 . -14) (undo-tree-id71630 . -14) (undo-tree-id71631 . -14) (undo-tree-id71632 . -14) (undo-tree-id71633 . -13) (undo-tree-id71634 . -13) (undo-tree-id71635 . -13) (undo-tree-id71636 . -13) (undo-tree-id71637 . -13) (undo-tree-id71638 . -13) (undo-tree-id71639 . -12) (undo-tree-id71640 . -12) (undo-tree-id71641 . -12) (undo-tree-id71642 . -12) (undo-tree-id71643 . -12) (undo-tree-id71644 . -12) (undo-tree-id71645 . -11) (undo-tree-id71646 . -11) (undo-tree-id71647 . -11) (undo-tree-id71648 . -11) (undo-tree-id71649 . -11) (undo-tree-id71650 . -11) (undo-tree-id71651 . -10) (undo-tree-id71652 . -10) (undo-tree-id71653 . -10) (undo-tree-id71654 . -10) (undo-tree-id71655 . -10) (undo-tree-id71656 . -10) (undo-tree-id71657 . -9) (undo-tree-id71658 . -9) (undo-tree-id71659 . -9) (undo-tree-id71660 . -9) (undo-tree-id71661 . -9) (undo-tree-id71662 . -9) (undo-tree-id71663 . -8) (undo-tree-id71664 . -8) (undo-tree-id71665 . -8) (undo-tree-id71666 . -8) (undo-tree-id71667 . -8) (undo-tree-id71668 . -8) (undo-tree-id71669 . -7) (undo-tree-id71670 . -7) (undo-tree-id71671 . -7) (undo-tree-id71672 . -7) (undo-tree-id71673 . -7) (undo-tree-id71674 . -7) (undo-tree-id71675 . -6) (undo-tree-id71676 . -6) (undo-tree-id71677 . -6) (undo-tree-id71678 . -6) (undo-tree-id71679 . -6) (undo-tree-id71680 . -6) (undo-tree-id71681 . -5) (undo-tree-id71682 . -5) (undo-tree-id71683 . -5) (undo-tree-id71684 . -5) (undo-tree-id71685 . -5) (undo-tree-id71686 . -5) (undo-tree-id71687 . -4) (undo-tree-id71688 . -4) (undo-tree-id71689 . -4) (undo-tree-id71690 . -4) (undo-tree-id71691 . -4) (undo-tree-id71692 . -4) (undo-tree-id71693 . -3) (undo-tree-id71694 . -3) (undo-tree-id71695 . -3) (undo-tree-id71696 . -3) (undo-tree-id71697 . -3) (undo-tree-id71698 . -3) (undo-tree-id71699 . -2) (undo-tree-id71700 . -2) (undo-tree-id71701 . -2) (undo-tree-id71702 . -2) (undo-tree-id71703 . -2) (undo-tree-id71704 . -2) (undo-tree-id71705 . -1) (undo-tree-id71706 . -1) (undo-tree-id71707 . -1) (undo-tree-id71708 . -1) (undo-tree-id71709 . -1) (undo-tree-id71710 . -1) (undo-tree-id71711 . -1) (undo-tree-id71712 . -1) (undo-tree-id71713 . -1) (undo-tree-id71714 . -1) (undo-tree-id71715 . -1) (undo-tree-id71716 . -1) (undo-tree-id71717 . -1) (undo-tree-id71718 . -1) (undo-tree-id71719 . -1) (undo-tree-id71720 . -1) (undo-tree-id71721 . -1) (undo-tree-id71722 . -1) (undo-tree-id71723 . -1) (undo-tree-id71724 . -1) (undo-tree-id71725 . -1) (undo-tree-id71726 . -1) (undo-tree-id71727 . -1) (undo-tree-id71728 . -1) (undo-tree-id71729 . -1) (undo-tree-id71730 . -1) (undo-tree-id71731 . -1) (undo-tree-id71732 . -1) (undo-tree-id71733 . -1) (undo-tree-id71734 . -1) (undo-tree-id71735 . -1) (undo-tree-id71736 . -1) (undo-tree-id71737 . -1) (undo-tree-id71738 . -1) (undo-tree-id71739 . -1) (undo-tree-id71740 . -1) (undo-tree-id71741 . -1) (undo-tree-id71742 . -1) (undo-tree-id71743 . -1) (undo-tree-id71744 . -1) (undo-tree-id71745 . -1) (undo-tree-id71746 . -1) (undo-tree-id71747 . -1) (undo-tree-id71748 . -1) (undo-tree-id71749 . -1) (undo-tree-id71750 . -2) (undo-tree-id71751 . -2) (undo-tree-id71752 . -2) (undo-tree-id71753 . -2) (undo-tree-id71754 . -2) (undo-tree-id71755 . -2) (undo-tree-id71756 . -2) (undo-tree-id71757 . -2) (undo-tree-id71758 . -2) (undo-tree-id71759 . -2) (undo-tree-id71760 . -2) (undo-tree-id71761 . -2) (undo-tree-id71762 . -2) (undo-tree-id71763 . -2) (undo-tree-id71764 . -2) (undo-tree-id71765 . -2) (undo-tree-id71766 . -2) (undo-tree-id71767 . -2) (undo-tree-id71768 . -2) (undo-tree-id71769 . -2) (undo-tree-id71770 . -2) (undo-tree-id71771 . -2) (undo-tree-id71772 . -2) (undo-tree-id71773 . -2) (undo-tree-id71774 . -2) (undo-tree-id71775 . -2) (undo-tree-id71776 . -2) (undo-tree-id71777 . -2) (undo-tree-id71778 . -1) (undo-tree-id71779 . -1) (undo-tree-id71780 . -1) (undo-tree-id71781 . -1) (undo-tree-id71782 . -1) (undo-tree-id71783 . -1) (undo-tree-id71784 . -1) (undo-tree-id71785 . -1) (undo-tree-id71786 . -1) (undo-tree-id71787 . -1) (undo-tree-id71788 . -1) (undo-tree-id71789 . -1) (undo-tree-id71790 . -1) (undo-tree-id71791 . -1) (undo-tree-id71792 . -1) (undo-tree-id71793 . -1) (undo-tree-id71794 . -1) (undo-tree-id71795 . -1) (undo-tree-id71796 . -1) (undo-tree-id71797 . -1) (undo-tree-id71798 . -1) (undo-tree-id71799 . -1) (undo-tree-id71800 . -1) (undo-tree-id71801 . -1) (undo-tree-id71802 . -1) (undo-tree-id71803 . -1) (undo-tree-id71804 . -1) (undo-tree-id71805 . -1) (undo-tree-id71806 . -1) (undo-tree-id71807 . -1) (undo-tree-id71808 . -1) (undo-tree-id71809 . -1) (undo-tree-id71810 . -1) (undo-tree-id71811 . -1) (undo-tree-id71812 . -1) (undo-tree-id71813 . -1) (undo-tree-id71814 . -1) (undo-tree-id71815 . -1) (undo-tree-id71816 . -1) 12315) nil (25767 17609 973096 196000) 0 nil])
([nil nil ((12318 . 12319) (#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12318)) nil (25767 17609 970836 958000) 0 nil])
([nil nil ((12316 . 12448) (#("- Last but not least, the TensorFlow team released the

- Other ways of creating subword encodings (e.g., using byte pair encoding)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 8 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 8 50 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 50 54 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 54 55 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 55 56 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 56 57 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 57 58 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 58 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 116 117 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 117 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 12316) (undo-tree-id67927 . -58) (undo-tree-id67928 . -58) (undo-tree-id67929 . -58) (undo-tree-id67930 . -58) (undo-tree-id67931 . 73) (undo-tree-id67932 . 74) (undo-tree-id67933 . -132) (undo-tree-id67934 . -58) (undo-tree-id67935 . -58) (undo-tree-id67936 . -58) (undo-tree-id67937 . -58) (undo-tree-id67938 . -58) (undo-tree-id67939 . -58) (undo-tree-id67940 . -58) (undo-tree-id67941 . -58) (undo-tree-id67942 . -58) (undo-tree-id67943 . -58) (undo-tree-id67944 . -58) (undo-tree-id67945 . -58) (undo-tree-id67946 . -58) (undo-tree-id67947 . -58) (undo-tree-id67948 . -58) (undo-tree-id67949 . -58) (undo-tree-id67950 . -58) (undo-tree-id67951 . -57) (undo-tree-id67952 . -57) (undo-tree-id67953 . -57) (undo-tree-id67954 . -57) (undo-tree-id67955 . -57) (undo-tree-id67956 . -57) (undo-tree-id67957 . -57) (undo-tree-id67958 . -57) (undo-tree-id67959 . -57) (undo-tree-id67960 . -57) (undo-tree-id67961 . -57) (undo-tree-id67962 . -57) (undo-tree-id67963 . -57) (undo-tree-id67964 . -57) (undo-tree-id67965 . -57) (undo-tree-id67966 . -57) (undo-tree-id67967 . -57) (undo-tree-id67968 . -57) (undo-tree-id67969 . -57) (undo-tree-id67970 . -57) (undo-tree-id67971 . -58) (undo-tree-id67972 . -58) (undo-tree-id67973 . -58) (undo-tree-id67974 . -58) (undo-tree-id67975 . -58) (undo-tree-id67976 . -58) (undo-tree-id67977 . -58) (undo-tree-id67978 . -58) (undo-tree-id67979 . -58) (undo-tree-id67980 . -58) (undo-tree-id67981 . -58) (undo-tree-id67982 . -58) (undo-tree-id67983 . -58) (undo-tree-id67984 . -58) (undo-tree-id67985 . -58) (undo-tree-id67986 . -58) (undo-tree-id67987 . -58) (undo-tree-id67988 . -58) (undo-tree-id67989 . -58) (undo-tree-id67990 . -58) (undo-tree-id67991 . -58) (undo-tree-id67992 . -58) (undo-tree-id67993 . -58) (undo-tree-id67994 . -58) (undo-tree-id67995 . -58) (undo-tree-id67996 . -58) (undo-tree-id67997 . -58) (undo-tree-id67998 . -58) (undo-tree-id67999 . -58) (undo-tree-id68000 . -58) (undo-tree-id68001 . -58) (undo-tree-id68002 . -58) (undo-tree-id68003 . -58) (undo-tree-id68004 . -58) (undo-tree-id68005 . -58) (undo-tree-id68006 . -58) (undo-tree-id68007 . -58) (undo-tree-id68008 . -58) (undo-tree-id68009 . -58) (undo-tree-id68010 . -58) (undo-tree-id68011 . -58) (undo-tree-id68012 . -58) (undo-tree-id68013 . -58) (undo-tree-id68014 . -58) (undo-tree-id68015 . -58) (undo-tree-id68016 . -58) (undo-tree-id68017 . -58) (undo-tree-id68018 . -58) (undo-tree-id68019 . -58) (undo-tree-id68020 . -58) (undo-tree-id68021 . -58) (undo-tree-id68022 . -58) (undo-tree-id68023 . -62) (undo-tree-id68024 . -62) (undo-tree-id68025 . -62) (undo-tree-id68026 . -62) (undo-tree-id68027 . -62) (undo-tree-id68028 . -62) (undo-tree-id68029 . -62) (undo-tree-id68030 . -62) (undo-tree-id68031 . -62) (undo-tree-id68032 . -62) (undo-tree-id68033 . -62) (undo-tree-id68034 . -67) (undo-tree-id68035 . -67) (undo-tree-id68036 . -67) (undo-tree-id68037 . -67) (undo-tree-id68038 . -67) (undo-tree-id68039 . -67) (undo-tree-id68040 . -67) (undo-tree-id68041 . -67) (undo-tree-id68042 . -67) (undo-tree-id68043 . -67) (undo-tree-id68044 . -67) (undo-tree-id68045 . -67) (undo-tree-id68046 . -67) (undo-tree-id68047 . -67) (undo-tree-id68048 . -67) (undo-tree-id68049 . -67) (undo-tree-id68050 . -70) (undo-tree-id68051 . -70) (undo-tree-id68052 . -70) (undo-tree-id68053 . -70) (undo-tree-id68054 . -70) (undo-tree-id68055 . -70) (undo-tree-id68056 . -70) (undo-tree-id68057 . -70) (undo-tree-id68058 . -70) (undo-tree-id68059 . -70) (undo-tree-id68060 . -70) (undo-tree-id68061 . -79) (undo-tree-id68062 . -79) (undo-tree-id68063 . -79) (undo-tree-id68064 . -79) (undo-tree-id68065 . -79) (undo-tree-id68066 . -79) (undo-tree-id68067 . -79) (undo-tree-id68068 . -79) (undo-tree-id68069 . -79) (undo-tree-id68070 . -79) (undo-tree-id68071 . -79) (undo-tree-id68072 . 51) (undo-tree-id68073 . -88) (undo-tree-id68074 . -87) (undo-tree-id68075 . -87) (undo-tree-id68076 . -87) (undo-tree-id68077 . -87) (undo-tree-id68078 . -87) (undo-tree-id68079 . -87) (undo-tree-id68080 . -87) (undo-tree-id68081 . -87) (undo-tree-id68082 . -87) (undo-tree-id68083 . -87) (undo-tree-id68084 . -87) (undo-tree-id68085 . 43) (undo-tree-id68086 . -98) (undo-tree-id68087 . -97) (undo-tree-id68088 . -97) (undo-tree-id68089 . -97) (undo-tree-id68090 . -97) (undo-tree-id68091 . -97) (undo-tree-id68092 . -97) (undo-tree-id68093 . -97) (undo-tree-id68094 . -97) (undo-tree-id68095 . -97) (undo-tree-id68096 . -97) (undo-tree-id68097 . -97) (undo-tree-id68098 . -97) (undo-tree-id68099 . -97) (undo-tree-id68100 . -97) (undo-tree-id68101 . -97) (undo-tree-id68102 . -97) (undo-tree-id68103 . -97) (undo-tree-id68104 . -97) (undo-tree-id68105 . -97) (undo-tree-id68106 . -97) (undo-tree-id68107 . -97) (undo-tree-id68108 . -99) (undo-tree-id68109 . -99) (undo-tree-id68110 . -99) (undo-tree-id68111 . -99) (undo-tree-id68112 . -99) (undo-tree-id68113 . -99) (undo-tree-id68114 . -99) (undo-tree-id68115 . -99) (undo-tree-id68116 . -99) (undo-tree-id68117 . -99) (undo-tree-id68118 . -99) (undo-tree-id68119 . -99) (undo-tree-id68120 . -99) (undo-tree-id68121 . -99) (undo-tree-id68122 . -99) (undo-tree-id68123 . -99) (undo-tree-id68124 . -100) (undo-tree-id68125 . -100) (undo-tree-id68126 . -100) (undo-tree-id68127 . -100) (undo-tree-id68128 . -100) (undo-tree-id68129 . -100) (undo-tree-id68130 . -100) (undo-tree-id68131 . -100) (undo-tree-id68132 . -100) (undo-tree-id68133 . -100) (undo-tree-id68134 . -100) (undo-tree-id68135 . -101) (undo-tree-id68136 . -101) (undo-tree-id68137 . -101) (undo-tree-id68138 . -101) (undo-tree-id68139 . -101) (undo-tree-id68140 . -101) (undo-tree-id68141 . -101) (undo-tree-id68142 . -101) (undo-tree-id68143 . -101) (undo-tree-id68144 . -101) (undo-tree-id68145 . -101) (undo-tree-id68146 . -102) (undo-tree-id68147 . -102) (undo-tree-id68148 . -102) (undo-tree-id68149 . -102) (undo-tree-id68150 . -102) (undo-tree-id68151 . -102) (undo-tree-id68152 . -102) (undo-tree-id68153 . -102) (undo-tree-id68154 . -102) (undo-tree-id68155 . -102) (undo-tree-id68156 . -102) (undo-tree-id68157 . -103) (undo-tree-id68158 . -103) (undo-tree-id68159 . -103) (undo-tree-id68160 . -103) (undo-tree-id68161 . -103) (undo-tree-id68162 . -103) (undo-tree-id68163 . -103) (undo-tree-id68164 . -103) (undo-tree-id68165 . -103) (undo-tree-id68166 . -103) (undo-tree-id68167 . -103) (undo-tree-id68168 . -106) (undo-tree-id68169 . -106) (undo-tree-id68170 . -106) (undo-tree-id68171 . -106) (undo-tree-id68172 . -106) (undo-tree-id68173 . -106) (undo-tree-id68174 . -106) (undo-tree-id68175 . -106) (undo-tree-id68176 . -106) (undo-tree-id68177 . -106) (undo-tree-id68178 . -106) (undo-tree-id68179 . -112) (undo-tree-id68180 . -112) (undo-tree-id68181 . -112) (undo-tree-id68182 . -112) (undo-tree-id68183 . -112) (undo-tree-id68184 . -112) (undo-tree-id68185 . -112) (undo-tree-id68186 . -112) (undo-tree-id68187 . -112) (undo-tree-id68188 . -112) (undo-tree-id68189 . -112) (undo-tree-id68190 . -112) (undo-tree-id68191 . -112) (undo-tree-id68192 . -112) (undo-tree-id68193 . -112) (undo-tree-id68194 . -112) (undo-tree-id68195 . -117) (undo-tree-id68196 . -117) (undo-tree-id68197 . -117) (undo-tree-id68198 . -117) (undo-tree-id68199 . -117) (undo-tree-id68200 . -117) (undo-tree-id68201 . -117) (undo-tree-id68202 . -117) (undo-tree-id68203 . -117) (undo-tree-id68204 . -117) (undo-tree-id68205 . -117) (undo-tree-id68206 . -122) (undo-tree-id68207 . -122) (undo-tree-id68208 . -122) (undo-tree-id68209 . -122) (undo-tree-id68210 . -122) (undo-tree-id68211 . -122) (undo-tree-id68212 . -122) (undo-tree-id68213 . -122) (undo-tree-id68214 . -122) (undo-tree-id68215 . -122) (undo-tree-id68216 . -122) (undo-tree-id68217 . -130) (undo-tree-id68218 . -130) (undo-tree-id68219 . -130) (undo-tree-id68220 . -130) (undo-tree-id68221 . -130) (undo-tree-id68222 . -130) (undo-tree-id68223 . -130) (undo-tree-id68224 . -130) (undo-tree-id68225 . -130) (undo-tree-id68226 . -130) (undo-tree-id68227 . -130) (undo-tree-id68228 . -132) (undo-tree-id68229 . -132) (undo-tree-id68230 . -132) (undo-tree-id68231 . -132) (undo-tree-id68232 . -132) (undo-tree-id68233 . -132) (undo-tree-id68234 . -132) (undo-tree-id68235 . -132) (undo-tree-id68236 . -132) (undo-tree-id68237 . -132) (undo-tree-id68238 . -132) (undo-tree-id68239 . -132) (undo-tree-id68240 . -132) (undo-tree-id68241 . -132) (undo-tree-id68242 . -132) (undo-tree-id68243 . -132) (undo-tree-id68244 . -132) (undo-tree-id68245 . -132) (undo-tree-id68246 . -132) (undo-tree-id68247 . -132) (undo-tree-id68248 . -132) (undo-tree-id68249 . -132) (undo-tree-id68250 . -132) (undo-tree-id68251 . -132) (undo-tree-id68252 . -132) (undo-tree-id68253 . -132) (undo-tree-id68254 . -132) (undo-tree-id68255 . -132) (undo-tree-id68256 . -132) (undo-tree-id68257 . -132) (undo-tree-id68258 . -56) (12316 . 12372) (#(" Last but not least, the TensorFlow team released the" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 7 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 49 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12392) (undo-tree-id68259 . -1) (undo-tree-id68260 . -1) (undo-tree-id68261 . -1) (undo-tree-id68262 . -1) (undo-tree-id68263 . -1) (undo-tree-id68264 . -1) (undo-tree-id68265 . -1) (undo-tree-id68266 . -1) (undo-tree-id68267 . -1) (undo-tree-id68268 . -1) (undo-tree-id68269 . -1) (undo-tree-id68270 . -1) (undo-tree-id68271 . -1) (undo-tree-id68272 . -1) (undo-tree-id68273 . -1) (undo-tree-id68274 . -1) (undo-tree-id68275 . -1) (undo-tree-id68276 . -1) (undo-tree-id68277 . -1) (undo-tree-id68278 . -1) (undo-tree-id68279 . -1) (undo-tree-id68280 . -1) (undo-tree-id68281 . -1) (undo-tree-id68282 . -1) (undo-tree-id68283 . -1) (undo-tree-id68284 . -1) (undo-tree-id68285 . -1) (undo-tree-id68286 . -1) (undo-tree-id68287 . -1) (undo-tree-id68288 . -1) (undo-tree-id68289 . -1) 12393) nil (25767 17609 970817 81000) 0 nil])
([nil nil ((#("Last but not least, the TensorFlow team released the
TF.Text library in June 2019, which implements various tokenization
strategies, including WordPiece7 (a variant of byte pair encoding).
If you want to deploy your model to a mobile device or a web browser, and
you don’t want to have to write a different preprocessing function every
time, then you will want to handle preprocessing using only TensorFlow
operations, so it can be included in the model itself. Let’s see how." 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 6 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 48 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 52 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 53 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 68 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 121 189 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 189 263 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 263 336 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 336 407 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 407 476 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12396) (undo-tree-id72675 . -475) (undo-tree-id72676 . -475) (undo-tree-id72677 . 476) (undo-tree-id72678 . -475) (undo-tree-id72679 . -473) (undo-tree-id72680 . -473) (undo-tree-id72681 . -473) (undo-tree-id72682 . -473) (undo-tree-id72683 . -473) (undo-tree-id72684 . -473) (undo-tree-id72685 . -408) (undo-tree-id72686 . -408) (undo-tree-id72687 . -408) (undo-tree-id72688 . -408) (undo-tree-id72689 . -408) (undo-tree-id72690 . -408) (undo-tree-id72691 . -397) (undo-tree-id72692 . -397) (undo-tree-id72693 . -397) (undo-tree-id72694 . -397) (undo-tree-id72695 . -397) (undo-tree-id72696 . -397) (undo-tree-id72697 . -337) (undo-tree-id72698 . -337) (undo-tree-id72699 . -337) (undo-tree-id72700 . -337) (undo-tree-id72701 . -337) (undo-tree-id72702 . -337) (undo-tree-id72703 . -331) (undo-tree-id72704 . -331) (undo-tree-id72705 . -331) (undo-tree-id72706 . -331) (undo-tree-id72707 . -331) (undo-tree-id72708 . -331) (undo-tree-id72709 . -264) (undo-tree-id72710 . -264) (undo-tree-id72711 . -264) (undo-tree-id72712 . -264) (undo-tree-id72713 . -264) (undo-tree-id72714 . -264) (undo-tree-id72715 . -251) (undo-tree-id72716 . -251) (undo-tree-id72717 . -251) (undo-tree-id72718 . -251) (undo-tree-id72719 . -251) (undo-tree-id72720 . -251) (undo-tree-id72721 . -251) (undo-tree-id72722 . -251) (undo-tree-id72723 . -251) (undo-tree-id72724 . -251) (undo-tree-id72725 . -251) (undo-tree-id72726 . -190) (undo-tree-id72727 . -190) (undo-tree-id72728 . -190) (undo-tree-id72729 . -190) (undo-tree-id72730 . -190) (undo-tree-id72731 . -190) (undo-tree-id72732 . -190) (undo-tree-id72733 . -190) (undo-tree-id72734 . -190) (undo-tree-id72735 . -190) (undo-tree-id72736 . -190) (undo-tree-id72737 . -122) (undo-tree-id72738 . -122) (undo-tree-id72739 . -122) (undo-tree-id72740 . -122) (undo-tree-id72741 . -122) (undo-tree-id72742 . -122) (undo-tree-id72743 . -54) (undo-tree-id72744 . -54) (undo-tree-id72745 . -54) (undo-tree-id72746 . -54) (undo-tree-id72747 . -54) (undo-tree-id72748 . -54) (undo-tree-id72749 . -476) (undo-tree-id72750 . -475) (undo-tree-id72751 . -3) (undo-tree-id72752 . -3) (undo-tree-id72753 . -3) (undo-tree-id72754 . -3) (undo-tree-id72755 . -3) (undo-tree-id72756 . -3) (undo-tree-id72757 . -7) (undo-tree-id72758 . -7) (undo-tree-id72759 . -7) (undo-tree-id72760 . -7) (undo-tree-id72761 . -7) (undo-tree-id72762 . -7) (undo-tree-id72763 . -11) (undo-tree-id72764 . -11) (undo-tree-id72765 . -11) (undo-tree-id72766 . -11) (undo-tree-id72767 . -11) (undo-tree-id72768 . -11) (undo-tree-id72769 . -17) (undo-tree-id72770 . -17) (undo-tree-id72771 . -17) (undo-tree-id72772 . -17) (undo-tree-id72773 . -17) (undo-tree-id72774 . -17) (undo-tree-id72775 . -18) (undo-tree-id72776 . -18) (undo-tree-id72777 . -18) (undo-tree-id72778 . -18) (undo-tree-id72779 . -18) (undo-tree-id72780 . -18) (undo-tree-id72781 . -22) (undo-tree-id72782 . -22) (undo-tree-id72783 . -22) (undo-tree-id72784 . -22) (undo-tree-id72785 . -22) (undo-tree-id72786 . -22) (undo-tree-id72787 . -33) (undo-tree-id72788 . -33) (undo-tree-id72789 . -33) (undo-tree-id72790 . -33) (undo-tree-id72791 . -33) (undo-tree-id72792 . -33) (undo-tree-id72793 . -38) (undo-tree-id72794 . -38) (undo-tree-id72795 . -38) (undo-tree-id72796 . -38) (undo-tree-id72797 . -38) (undo-tree-id72798 . -38) (undo-tree-id72799 . -47) (undo-tree-id72800 . -47) (undo-tree-id72801 . -47) (undo-tree-id72802 . -47) (undo-tree-id72803 . -47) (undo-tree-id72804 . -47) (undo-tree-id72805 . -51) (undo-tree-id72806 . -51) (undo-tree-id72807 . -51) (undo-tree-id72808 . -51) (undo-tree-id72809 . -51) (undo-tree-id72810 . -51) (undo-tree-id72811 . 423) (undo-tree-id72812 . -55) (undo-tree-id72813 . -54) (undo-tree-id72814 . -54) (undo-tree-id72815 . -54) (undo-tree-id72816 . -54) (undo-tree-id72817 . -54) (undo-tree-id72818 . -54) (undo-tree-id72819 . -55) (undo-tree-id72820 . -55) (undo-tree-id72821 . -55) (undo-tree-id72822 . -55) (undo-tree-id72823 . -55) (undo-tree-id72824 . -55) (undo-tree-id72825 . -59) (undo-tree-id72826 . -59) (undo-tree-id72827 . -59) (undo-tree-id72828 . -59) (undo-tree-id72829 . -59) (undo-tree-id72830 . -59) (undo-tree-id72831 . -67) (undo-tree-id72832 . -67) (undo-tree-id72833 . -67) (undo-tree-id72834 . -67) (undo-tree-id72835 . -67) (undo-tree-id72836 . -67) (undo-tree-id72837 . -70) (undo-tree-id72838 . -70) (undo-tree-id72839 . -70) (undo-tree-id72840 . -70) (undo-tree-id72841 . -70) (undo-tree-id72842 . -70) (undo-tree-id72843 . -75) (undo-tree-id72844 . -75) (undo-tree-id72845 . -75) (undo-tree-id72846 . -75) (undo-tree-id72847 . -75) (undo-tree-id72848 . -75) (undo-tree-id72849 . -80) (undo-tree-id72850 . -80) (undo-tree-id72851 . -80) (undo-tree-id72852 . -80) (undo-tree-id72853 . -80) (undo-tree-id72854 . -80) (undo-tree-id72855 . -81) (undo-tree-id72856 . -81) (undo-tree-id72857 . -81) (undo-tree-id72858 . -81) (undo-tree-id72859 . -81) (undo-tree-id72860 . -81) (undo-tree-id72861 . -87) (undo-tree-id72862 . -87) (undo-tree-id72863 . -87) (undo-tree-id72864 . -87) (undo-tree-id72865 . -87) (undo-tree-id72866 . -87) (undo-tree-id72867 . -98) (undo-tree-id72868 . -98) (undo-tree-id72869 . -98) (undo-tree-id72870 . -98) (undo-tree-id72871 . -98) (undo-tree-id72872 . -98) (undo-tree-id72873 . -106) (undo-tree-id72874 . -106) (undo-tree-id72875 . -106) (undo-tree-id72876 . -106) (undo-tree-id72877 . -106) (undo-tree-id72878 . -106) (undo-tree-id72879 . 368) (undo-tree-id72880 . -120) (undo-tree-id72881 . -119) (undo-tree-id72882 . -119) (undo-tree-id72883 . -119) (undo-tree-id72884 . -119) (undo-tree-id72885 . -119) (undo-tree-id72886 . -119) (undo-tree-id72887 . -130) (undo-tree-id72888 . -130) (undo-tree-id72889 . -130) (undo-tree-id72890 . -130) (undo-tree-id72891 . -130) (undo-tree-id72892 . -130) (undo-tree-id72893 . -131) (undo-tree-id72894 . -131) (undo-tree-id72895 . -131) (undo-tree-id72896 . -131) (undo-tree-id72897 . -131) (undo-tree-id72898 . -131) (undo-tree-id72899 . -141) (undo-tree-id72900 . -141) (undo-tree-id72901 . -141) (undo-tree-id72902 . -141) (undo-tree-id72903 . -141) (undo-tree-id72904 . -141) (undo-tree-id72905 . 333) (undo-tree-id72906 . -152) (undo-tree-id72907 . -152) (undo-tree-id72908 . -152) (undo-tree-id72909 . -152) (undo-tree-id72910 . -152) (undo-tree-id72911 . -152) (undo-tree-id72912 . -152) (undo-tree-id72913 . -154) (undo-tree-id72914 . -154) (undo-tree-id72915 . -154) (undo-tree-id72916 . -154) (undo-tree-id72917 . -154) (undo-tree-id72918 . -154) (undo-tree-id72919 . -154) (undo-tree-id72920 . -154) (undo-tree-id72921 . -154) (undo-tree-id72922 . -154) (undo-tree-id72923 . -154) (undo-tree-id72924 . -155) (undo-tree-id72925 . -155) (undo-tree-id72926 . -155) (undo-tree-id72927 . -155) (undo-tree-id72928 . -155) (undo-tree-id72929 . -155) (undo-tree-id72930 . -155) (undo-tree-id72931 . -155) (undo-tree-id72932 . -155) (undo-tree-id72933 . -155) (undo-tree-id72934 . -155) (undo-tree-id72935 . -163) (undo-tree-id72936 . -163) (undo-tree-id72937 . -163) (undo-tree-id72938 . -163) (undo-tree-id72939 . -163) (undo-tree-id72940 . -163) (undo-tree-id72941 . -166) (undo-tree-id72942 . -166) (undo-tree-id72943 . -166) (undo-tree-id72944 . -166) (undo-tree-id72945 . -166) (undo-tree-id72946 . -166) (undo-tree-id72947 . -171) (undo-tree-id72948 . -171) (undo-tree-id72949 . -171) (undo-tree-id72950 . -171) (undo-tree-id72951 . -171) (undo-tree-id72952 . -171) (undo-tree-id72953 . -176) (undo-tree-id72954 . -176) (undo-tree-id72955 . -176) (undo-tree-id72956 . -176) (undo-tree-id72957 . -176) (undo-tree-id72958 . -176) (undo-tree-id72959 . -185) (undo-tree-id72960 . -185) (undo-tree-id72961 . -185) (undo-tree-id72962 . -185) (undo-tree-id72963 . -185) (undo-tree-id72964 . -185) (undo-tree-id72965 . -187) (undo-tree-id72966 . -187) (undo-tree-id72967 . -187) (undo-tree-id72968 . -187) (undo-tree-id72969 . -187) (undo-tree-id72970 . -187) (undo-tree-id72971 . -190) (undo-tree-id72972 . -190) (undo-tree-id72973 . -190) (undo-tree-id72974 . -190) (undo-tree-id72975 . -190) (undo-tree-id72976 . -190) (undo-tree-id72977 . -190) (undo-tree-id72978 . -190) (undo-tree-id72979 . -190) (undo-tree-id72980 . -190) (undo-tree-id72981 . -190) (undo-tree-id72982 . -190) (undo-tree-id72983 . -190) (undo-tree-id72984 . -190) (undo-tree-id72985 . -190) (undo-tree-id72986 . -190) (undo-tree-id72987 . -190) (undo-tree-id72988 . -190) (undo-tree-id72989 . -190) (undo-tree-id72990 . -190) (undo-tree-id72991 . -190) (undo-tree-id72992 . -190) (undo-tree-id72993 . -190) (undo-tree-id72994 . -190) (undo-tree-id72995 . -190) (undo-tree-id72996 . -190) (undo-tree-id72997 . -190) (undo-tree-id72998 . -190) (undo-tree-id72999 . -190) (undo-tree-id73000 . -190) (undo-tree-id73001 . -190) (undo-tree-id73002 . -194) (undo-tree-id73003 . -194) (undo-tree-id73004 . -194) (undo-tree-id73005 . -194) (undo-tree-id73006 . -194) (undo-tree-id73007 . -194) (undo-tree-id73008 . -194) (undo-tree-id73009 . -194) (undo-tree-id73010 . -194) (undo-tree-id73011 . -194) (undo-tree-id73012 . -194) (undo-tree-id73013 . -194) (undo-tree-id73014 . -194) (undo-tree-id73015 . -194) (undo-tree-id73016 . -194) (undo-tree-id73017 . -194) (undo-tree-id73018 . -194) (undo-tree-id73019 . -194) (undo-tree-id73020 . -194) (undo-tree-id73021 . -194) (undo-tree-id73022 . -194) (undo-tree-id73023 . -199) (undo-tree-id73024 . -199) (undo-tree-id73025 . -199) (undo-tree-id73026 . -199) (undo-tree-id73027 . -199) (undo-tree-id73028 . -199) (undo-tree-id73029 . -202) (undo-tree-id73030 . -202) (undo-tree-id73031 . -202) (undo-tree-id73032 . -202) (undo-tree-id73033 . -202) (undo-tree-id73034 . -202) (undo-tree-id73035 . -209) (undo-tree-id73036 . -209) (undo-tree-id73037 . -209) (undo-tree-id73038 . -209) (undo-tree-id73039 . -209) (undo-tree-id73040 . -209) (undo-tree-id73041 . -214) (undo-tree-id73042 . -214) (undo-tree-id73043 . -214) (undo-tree-id73044 . -214) (undo-tree-id73045 . -214) (undo-tree-id73046 . -214) (undo-tree-id73047 . -220) (undo-tree-id73048 . -220) (undo-tree-id73049 . -220) (undo-tree-id73050 . -220) (undo-tree-id73051 . -220) (undo-tree-id73052 . -220) (undo-tree-id73053 . -223) (undo-tree-id73054 . -223) (undo-tree-id73055 . -223) (undo-tree-id73056 . -223) (undo-tree-id73057 . -223) (undo-tree-id73058 . -223) (undo-tree-id73059 . -225) (undo-tree-id73060 . -225) (undo-tree-id73061 . -225) (undo-tree-id73062 . -225) (undo-tree-id73063 . -225) (undo-tree-id73064 . -225) (undo-tree-id73065 . -232) (undo-tree-id73066 . -232) (undo-tree-id73067 . -232) (undo-tree-id73068 . -232) (undo-tree-id73069 . -232) (undo-tree-id73070 . -232) (undo-tree-id73071 . -239) (undo-tree-id73072 . -239) (undo-tree-id73073 . -239) (undo-tree-id73074 . -239) (undo-tree-id73075 . -239) (undo-tree-id73076 . -239) (undo-tree-id73077 . -242) (undo-tree-id73078 . -242) (undo-tree-id73079 . -242) (undo-tree-id73080 . -242) (undo-tree-id73081 . -242) (undo-tree-id73082 . -242) (undo-tree-id73083 . -244) (undo-tree-id73084 . -244) (undo-tree-id73085 . -244) (undo-tree-id73086 . -244) (undo-tree-id73087 . -244) (undo-tree-id73088 . -244) (undo-tree-id73089 . -244) (undo-tree-id73090 . -244) (undo-tree-id73091 . -244) (undo-tree-id73092 . -244) (undo-tree-id73093 . -244) (undo-tree-id73094 . -244) (undo-tree-id73095 . -244) (undo-tree-id73096 . -244) (undo-tree-id73097 . -244) (undo-tree-id73098 . -244) (undo-tree-id73099 . -244) (undo-tree-id73100 . -244) (undo-tree-id73101 . -244) (undo-tree-id73102 . -244) (undo-tree-id73103 . -244) (undo-tree-id73104 . -244) (undo-tree-id73105 . -244) (undo-tree-id73106 . -244) (undo-tree-id73107 . -244) (undo-tree-id73108 . -244) (undo-tree-id73109 . -244) (undo-tree-id73110 . -244) (undo-tree-id73111 . -244) (undo-tree-id73112 . -244) (undo-tree-id73113 . -244) (undo-tree-id73114 . -248) (undo-tree-id73115 . -248) (undo-tree-id73116 . -248) (undo-tree-id73117 . -248) (undo-tree-id73118 . -248) (undo-tree-id73119 . -248) (undo-tree-id73120 . -248) (undo-tree-id73121 . -248) (undo-tree-id73122 . -248) (undo-tree-id73123 . -248) (undo-tree-id73124 . -248) (undo-tree-id73125 . -248) (undo-tree-id73126 . -248) (undo-tree-id73127 . -248) (undo-tree-id73128 . -248) (undo-tree-id73129 . -248) (undo-tree-id73130 . -248) (undo-tree-id73131 . -248) (undo-tree-id73132 . -248) (undo-tree-id73133 . -248) (undo-tree-id73134 . -248) (undo-tree-id73135 . -256) (undo-tree-id73136 . -256) (undo-tree-id73137 . -256) (undo-tree-id73138 . -256) (undo-tree-id73139 . -256) (undo-tree-id73140 . -256) (undo-tree-id73141 . -256) (undo-tree-id73142 . -256) (undo-tree-id73143 . -256) (undo-tree-id73144 . -256) (undo-tree-id73145 . -256) (undo-tree-id73146 . -256) (undo-tree-id73147 . -256) (undo-tree-id73148 . -256) (undo-tree-id73149 . -256) (undo-tree-id73150 . -256) (undo-tree-id73151 . -257) (undo-tree-id73152 . -257) (undo-tree-id73153 . -257) (undo-tree-id73154 . -257) (undo-tree-id73155 . -257) (undo-tree-id73156 . -257) (undo-tree-id73157 . -257) (undo-tree-id73158 . -257) (undo-tree-id73159 . -257) (undo-tree-id73160 . -257) (undo-tree-id73161 . -257) (undo-tree-id73162 . -257) (undo-tree-id73163 . -257) (undo-tree-id73164 . -257) (undo-tree-id73165 . -257) (undo-tree-id73166 . -257) (undo-tree-id73167 . -261) (undo-tree-id73168 . -261) (undo-tree-id73169 . -261) (undo-tree-id73170 . -261) (undo-tree-id73171 . -261) (undo-tree-id73172 . -261) (undo-tree-id73173 . -261) (undo-tree-id73174 . -261) (undo-tree-id73175 . -261) (undo-tree-id73176 . -261) (undo-tree-id73177 . -261) (undo-tree-id73178 . -261) (undo-tree-id73179 . -261) (undo-tree-id73180 . -261) (undo-tree-id73181 . -261) (undo-tree-id73182 . -261) (undo-tree-id73183 . -265) (undo-tree-id73184 . -265) (undo-tree-id73185 . -265) (undo-tree-id73186 . -265) (undo-tree-id73187 . -265) (undo-tree-id73188 . -265) (undo-tree-id73189 . -265) (undo-tree-id73190 . -265) (undo-tree-id73191 . -265) (undo-tree-id73192 . -265) (undo-tree-id73193 . -265) (undo-tree-id73194 . -265) (undo-tree-id73195 . -265) (undo-tree-id73196 . -265) (undo-tree-id73197 . -265) (undo-tree-id73198 . -265) (undo-tree-id73199 . -269) (undo-tree-id73200 . -269) (undo-tree-id73201 . -269) (undo-tree-id73202 . -269) (undo-tree-id73203 . -269) (undo-tree-id73204 . -269) (undo-tree-id73205 . -269) (undo-tree-id73206 . -269) (undo-tree-id73207 . -269) (undo-tree-id73208 . -269) (undo-tree-id73209 . -269) (undo-tree-id73210 . -269) (undo-tree-id73211 . -269) (undo-tree-id73212 . -269) (undo-tree-id73213 . -269) (undo-tree-id73214 . -269) (undo-tree-id73215 . -270) (undo-tree-id73216 . -270) (undo-tree-id73217 . -270) (undo-tree-id73218 . -270) (undo-tree-id73219 . -270) (undo-tree-id73220 . -270) (undo-tree-id73221 . -270) (undo-tree-id73222 . -270) (undo-tree-id73223 . -270) (undo-tree-id73224 . -270) (undo-tree-id73225 . -270) (undo-tree-id73226 . -270) (undo-tree-id73227 . -270) (undo-tree-id73228 . -270) (undo-tree-id73229 . -270) (undo-tree-id73230 . -270) (undo-tree-id73231 . -270) (undo-tree-id73232 . -270) (undo-tree-id73233 . -270) (undo-tree-id73234 . -270) (undo-tree-id73235 . -270) (undo-tree-id73236 . -271) (undo-tree-id73237 . -271) (undo-tree-id73238 . -271) (undo-tree-id73239 . -271) (undo-tree-id73240 . -271) (undo-tree-id73241 . -271) (undo-tree-id73242 . -276) (undo-tree-id73243 . -276) (undo-tree-id73244 . -276) (undo-tree-id73245 . -276) (undo-tree-id73246 . -276) (undo-tree-id73247 . -276) (undo-tree-id73248 . -279) (undo-tree-id73249 . -279) (undo-tree-id73250 . -279) (undo-tree-id73251 . -279) (undo-tree-id73252 . -279) (undo-tree-id73253 . -279) (undo-tree-id73254 . -284) (undo-tree-id73255 . -284) (undo-tree-id73256 . -284) (undo-tree-id73257 . -284) (undo-tree-id73258 . -284) (undo-tree-id73259 . -284) (undo-tree-id73260 . -284) (undo-tree-id73261 . -284) (undo-tree-id73262 . -284) (undo-tree-id73263 . -284) (undo-tree-id73264 . -284) (undo-tree-id73265 . -284) (undo-tree-id73266 . -284) (undo-tree-id73267 . -284) (undo-tree-id73268 . -284) (undo-tree-id73269 . -284) (undo-tree-id73270 . -287) (undo-tree-id73271 . -287) (undo-tree-id73272 . -287) (undo-tree-id73273 . -287) (undo-tree-id73274 . -287) (undo-tree-id73275 . -287) (undo-tree-id73276 . -287) (undo-tree-id73277 . -287) (undo-tree-id73278 . -287) (undo-tree-id73279 . -287) (undo-tree-id73280 . -287) (undo-tree-id73281 . -287) (undo-tree-id73282 . -287) (undo-tree-id73283 . -287) (undo-tree-id73284 . -287) (undo-tree-id73285 . -287) (undo-tree-id73286 . -287) (undo-tree-id73287 . -287) (undo-tree-id73288 . -287) (undo-tree-id73289 . -287) (undo-tree-id73290 . -287) (undo-tree-id73291 . -293) (undo-tree-id73292 . -293) (undo-tree-id73293 . -293) (undo-tree-id73294 . -293) (undo-tree-id73295 . -293) (undo-tree-id73296 . -293) (undo-tree-id73297 . -295) (undo-tree-id73298 . -295) (undo-tree-id73299 . -295) (undo-tree-id73300 . -295) (undo-tree-id73301 . -295) (undo-tree-id73302 . -295) (undo-tree-id73303 . -305) (undo-tree-id73304 . -305) (undo-tree-id73305 . -305) (undo-tree-id73306 . -305) (undo-tree-id73307 . -305) (undo-tree-id73308 . -305) (undo-tree-id73309 . 169) (undo-tree-id73310 . -320) (undo-tree-id73311 . -319) (undo-tree-id73312 . -319) (undo-tree-id73313 . -319) (undo-tree-id73314 . -319) (undo-tree-id73315 . -319) (undo-tree-id73316 . -319) (undo-tree-id73317 . -328) (undo-tree-id73318 . -328) (undo-tree-id73319 . -328) (undo-tree-id73320 . -328) (undo-tree-id73321 . -328) (undo-tree-id73322 . -328) (undo-tree-id73323 . -334) (undo-tree-id73324 . -334) (undo-tree-id73325 . -334) (undo-tree-id73326 . -334) (undo-tree-id73327 . -334) (undo-tree-id73328 . -334) (undo-tree-id73329 . -339) (undo-tree-id73330 . -339) (undo-tree-id73331 . -339) (undo-tree-id73332 . -339) (undo-tree-id73333 . -339) (undo-tree-id73334 . -339) (undo-tree-id73335 . -340) (undo-tree-id73336 . -340) (undo-tree-id73337 . -340) (undo-tree-id73338 . -340) (undo-tree-id73339 . -340) (undo-tree-id73340 . -340) (undo-tree-id73341 . -345) (undo-tree-id73342 . -345) (undo-tree-id73343 . -345) (undo-tree-id73344 . -345) (undo-tree-id73345 . -345) (undo-tree-id73346 . -345) (undo-tree-id73347 . -349) (undo-tree-id73348 . -349) (undo-tree-id73349 . -349) (undo-tree-id73350 . -349) (undo-tree-id73351 . -349) (undo-tree-id73352 . -349) (undo-tree-id73353 . -354) (undo-tree-id73354 . -354) (undo-tree-id73355 . -354) (undo-tree-id73356 . -354) (undo-tree-id73357 . -354) (undo-tree-id73358 . -354) (undo-tree-id73359 . -354) (undo-tree-id73360 . -354) (undo-tree-id73361 . -354) (undo-tree-id73362 . -354) (undo-tree-id73363 . -354) (undo-tree-id73364 . -354) (undo-tree-id73365 . -354) (undo-tree-id73366 . -354) (undo-tree-id73367 . -354) (undo-tree-id73368 . -354) (undo-tree-id73369 . -354) (undo-tree-id73370 . -354) (undo-tree-id73371 . -354) (undo-tree-id73372 . -354) (undo-tree-id73373 . -354) (undo-tree-id73374 . -354) (undo-tree-id73375 . -354) (undo-tree-id73376 . -354) (undo-tree-id73377 . -354) (undo-tree-id73378 . -354) (undo-tree-id73379 . -354) (undo-tree-id73380 . -354) (undo-tree-id73381 . -354) (undo-tree-id73382 . -354) (undo-tree-id73383 . -354) (undo-tree-id73384 . -354) (undo-tree-id73385 . -354) (undo-tree-id73386 . -354) (undo-tree-id73387 . -354) (undo-tree-id73388 . -354) (undo-tree-id73389 . -359) (undo-tree-id73390 . -359) (undo-tree-id73391 . -359) (undo-tree-id73392 . -359) (undo-tree-id73393 . -359) (undo-tree-id73394 . -359) (undo-tree-id73395 . -359) (undo-tree-id73396 . -359) (undo-tree-id73397 . -359) (undo-tree-id73398 . -359) (undo-tree-id73399 . -359) (undo-tree-id73400 . -359) (undo-tree-id73401 . -359) (undo-tree-id73402 . -359) (undo-tree-id73403 . -359) (undo-tree-id73404 . -359) (undo-tree-id73405 . -359) (undo-tree-id73406 . -359) (undo-tree-id73407 . -359) (undo-tree-id73408 . -359) (undo-tree-id73409 . -359) (undo-tree-id73410 . -362) (undo-tree-id73411 . -362) (undo-tree-id73412 . -362) (undo-tree-id73413 . -362) (undo-tree-id73414 . -362) (undo-tree-id73415 . -362) (undo-tree-id73416 . -369) (undo-tree-id73417 . -369) (undo-tree-id73418 . -369) (undo-tree-id73419 . -369) (undo-tree-id73420 . -369) (undo-tree-id73421 . -369) (undo-tree-id73422 . 105) (undo-tree-id73423 . -384) (undo-tree-id73424 . -383) (undo-tree-id73425 . -383) (undo-tree-id73426 . -383) (undo-tree-id73427 . -383) (undo-tree-id73428 . -383) (undo-tree-id73429 . -383) (undo-tree-id73430 . -389) (undo-tree-id73431 . -389) (undo-tree-id73432 . -389) (undo-tree-id73433 . -389) (undo-tree-id73434 . -389) (undo-tree-id73435 . -389) (undo-tree-id73436 . -394) (undo-tree-id73437 . -394) (undo-tree-id73438 . -394) (undo-tree-id73439 . -394) (undo-tree-id73440 . -394) (undo-tree-id73441 . -394) (undo-tree-id73442 . -405) (undo-tree-id73443 . -405) (undo-tree-id73444 . -405) (undo-tree-id73445 . -405) (undo-tree-id73446 . -405) (undo-tree-id73447 . -405) (undo-tree-id73448 . -416) (undo-tree-id73449 . -416) (undo-tree-id73450 . -416) (undo-tree-id73451 . -416) (undo-tree-id73452 . -416) (undo-tree-id73453 . -416) (undo-tree-id73454 . -417) (undo-tree-id73455 . -417) (undo-tree-id73456 . -417) (undo-tree-id73457 . -417) (undo-tree-id73458 . -417) (undo-tree-id73459 . -417) (undo-tree-id73460 . -417) (undo-tree-id73461 . -417) (undo-tree-id73462 . -417) (undo-tree-id73463 . -417) (undo-tree-id73464 . -417) (undo-tree-id73465 . -417) (undo-tree-id73466 . -417) (undo-tree-id73467 . -417) (undo-tree-id73468 . -417) (undo-tree-id73469 . -417) (undo-tree-id73470 . -417) (undo-tree-id73471 . -417) (undo-tree-id73472 . -417) (undo-tree-id73473 . -417) (undo-tree-id73474 . -417) (undo-tree-id73475 . -417) (undo-tree-id73476 . -417) (undo-tree-id73477 . -417) (undo-tree-id73478 . -417) (undo-tree-id73479 . -417) (undo-tree-id73480 . -417) (undo-tree-id73481 . -417) (undo-tree-id73482 . -417) (undo-tree-id73483 . -417) (undo-tree-id73484 . -417) (undo-tree-id73485 . -420) (undo-tree-id73486 . -420) (undo-tree-id73487 . -420) (undo-tree-id73488 . -420) (undo-tree-id73489 . -420) (undo-tree-id73490 . -420) (undo-tree-id73491 . -420) (undo-tree-id73492 . -420) (undo-tree-id73493 . -420) (undo-tree-id73494 . -420) (undo-tree-id73495 . -420) (undo-tree-id73496 . -420) (undo-tree-id73497 . -420) (undo-tree-id73498 . -420) (undo-tree-id73499 . -420) (undo-tree-id73500 . -420) (undo-tree-id73501 . -420) (undo-tree-id73502 . -420) (undo-tree-id73503 . -420) (undo-tree-id73504 . -420) (undo-tree-id73505 . -420) (undo-tree-id73506 . -423) (undo-tree-id73507 . -423) (undo-tree-id73508 . -423) (undo-tree-id73509 . -423) (undo-tree-id73510 . -423) (undo-tree-id73511 . -423) (undo-tree-id73512 . -427) (undo-tree-id73513 . -427) (undo-tree-id73514 . -427) (undo-tree-id73515 . -427) (undo-tree-id73516 . -427) (undo-tree-id73517 . -427) (undo-tree-id73518 . -430) (undo-tree-id73519 . -430) (undo-tree-id73520 . -430) (undo-tree-id73521 . -430) (undo-tree-id73522 . -430) (undo-tree-id73523 . -430) (undo-tree-id73524 . -439) (undo-tree-id73525 . -439) (undo-tree-id73526 . -439) (undo-tree-id73527 . -439) (undo-tree-id73528 . -439) (undo-tree-id73529 . -439) (undo-tree-id73530 . -442) (undo-tree-id73531 . -442) (undo-tree-id73532 . -442) (undo-tree-id73533 . -442) (undo-tree-id73534 . -442) (undo-tree-id73535 . -442) (undo-tree-id73536 . -446) (undo-tree-id73537 . -446) (undo-tree-id73538 . -446) (undo-tree-id73539 . -446) (undo-tree-id73540 . -446) (undo-tree-id73541 . -446) (undo-tree-id73542 . -452) (undo-tree-id73543 . -452) (undo-tree-id73544 . -452) (undo-tree-id73545 . -452) (undo-tree-id73546 . -452) (undo-tree-id73547 . -452) (undo-tree-id73548 . -459) (undo-tree-id73549 . -459) (undo-tree-id73550 . -459) (undo-tree-id73551 . -459) (undo-tree-id73552 . -459) (undo-tree-id73553 . -459) (undo-tree-id73554 . -459) (undo-tree-id73555 . -459) (undo-tree-id73556 . -459) (undo-tree-id73557 . -459) (undo-tree-id73558 . -459) (undo-tree-id73559 . -459) (undo-tree-id73560 . -459) (undo-tree-id73561 . -459) (undo-tree-id73562 . -459) (undo-tree-id73563 . -459) (undo-tree-id73564 . -460) (undo-tree-id73565 . -460) (undo-tree-id73566 . -460) (undo-tree-id73567 . -460) (undo-tree-id73568 . -460) (undo-tree-id73569 . -460) (undo-tree-id73570 . -460) (undo-tree-id73571 . -460) (undo-tree-id73572 . -460) (undo-tree-id73573 . -460) (undo-tree-id73574 . -460) (undo-tree-id73575 . -460) (undo-tree-id73576 . -460) (undo-tree-id73577 . -460) (undo-tree-id73578 . -460) (undo-tree-id73579 . -460) (undo-tree-id73580 . -464) (undo-tree-id73581 . -464) (undo-tree-id73582 . -464) (undo-tree-id73583 . -464) (undo-tree-id73584 . -464) (undo-tree-id73585 . -464) (undo-tree-id73586 . -464) (undo-tree-id73587 . -464) (undo-tree-id73588 . -464) (undo-tree-id73589 . -464) (undo-tree-id73590 . -464) (undo-tree-id73591 . -464) (undo-tree-id73592 . -464) (undo-tree-id73593 . -464) (undo-tree-id73594 . -464) (undo-tree-id73595 . -464) (undo-tree-id73596 . -465) (undo-tree-id73597 . -465) (undo-tree-id73598 . -465) (undo-tree-id73599 . -465) (undo-tree-id73600 . -465) (undo-tree-id73601 . -465) (undo-tree-id73602 . -465) (undo-tree-id73603 . -465) (undo-tree-id73604 . -465) (undo-tree-id73605 . -465) (undo-tree-id73606 . -465) (undo-tree-id73607 . -465) (undo-tree-id73608 . -465) (undo-tree-id73609 . -465) (undo-tree-id73610 . -465) (undo-tree-id73611 . -465) (undo-tree-id73612 . -466) (undo-tree-id73613 . -466) (undo-tree-id73614 . -466) (undo-tree-id73615 . -466) (undo-tree-id73616 . -466) (undo-tree-id73617 . -466) (undo-tree-id73618 . -466) (undo-tree-id73619 . -466) (undo-tree-id73620 . -466) (undo-tree-id73621 . -466) (undo-tree-id73622 . -466) (undo-tree-id73623 . -466) (undo-tree-id73624 . -466) (undo-tree-id73625 . -466) (undo-tree-id73626 . -466) (undo-tree-id73627 . -466) (undo-tree-id73628 . -470) (undo-tree-id73629 . -470) (undo-tree-id73630 . -470) (undo-tree-id73631 . -470) (undo-tree-id73632 . -470) (undo-tree-id73633 . -470) (undo-tree-id73634 . -470) (undo-tree-id73635 . -470) (undo-tree-id73636 . -470) (undo-tree-id73637 . -470) (undo-tree-id73638 . -470) (undo-tree-id73639 . -470) (undo-tree-id73640 . -470) (undo-tree-id73641 . -470) (undo-tree-id73642 . -470) (undo-tree-id73643 . -470) (undo-tree-id73644 . -470) (undo-tree-id73645 . -470) (undo-tree-id73646 . -470) (undo-tree-id73647 . -470) (undo-tree-id73648 . -470) (undo-tree-id73649 . -474) (undo-tree-id73650 . -474) (undo-tree-id73651 . -474) (undo-tree-id73652 . -474) (undo-tree-id73653 . -474) (undo-tree-id73654 . -474) (undo-tree-id73655 . -474) (undo-tree-id73656 . -474) (undo-tree-id73657 . -474) (undo-tree-id73658 . -474) (undo-tree-id73659 . -474) (undo-tree-id73660 . -474) (undo-tree-id73661 . -474) (undo-tree-id73662 . -474) (undo-tree-id73663 . -474) (undo-tree-id73664 . -474) (undo-tree-id73665 . -475) (undo-tree-id73666 . -475) (undo-tree-id73667 . -475) (undo-tree-id73668 . -475) (undo-tree-id73669 . -475) (undo-tree-id73670 . -475) (undo-tree-id73671 . -475) (undo-tree-id73672 . -475) (undo-tree-id73673 . -475) (undo-tree-id73674 . -475) (undo-tree-id73675 . -475) (undo-tree-id73676 . -475) (undo-tree-id73677 . -475) (undo-tree-id73678 . -475) (undo-tree-id73679 . -475) (undo-tree-id73680 . -475) (undo-tree-id73681 . -475) (undo-tree-id73682 . -475) (undo-tree-id73683 . -475) (undo-tree-id73684 . -475) (undo-tree-id73685 . -475) (undo-tree-id73686 . -475) (undo-tree-id73687 . -475) (undo-tree-id73688 . -475) (undo-tree-id73689 . -475) (undo-tree-id73690 . -475) (undo-tree-id73691 . -475) (undo-tree-id73692 . -475) (undo-tree-id73693 . -475) (undo-tree-id73694 . -475) (undo-tree-id73695 . -475) (undo-tree-id73696 . -475) (undo-tree-id73697 . -476) 12871 (t 25767 17610 93560 262000)) nil (25767 17666 641153 545000) 0 nil])
([nil nil ((12471 . 12472) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12471) (undo-tree-id72673 . -1) (12403 . 12404) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -12403) (undo-tree-id72674 . -1) 12396) nil (25767 17666 638724 187000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12396) (undo-tree-id72669 . 1) (undo-tree-id72670 . 1) (undo-tree-id72671 . -1) (undo-tree-id72672 . -1)) nil (25767 17666 638717 168000) 0 nil])
([nil nil ((12406 . 12407) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12406) (undo-tree-id73932 . -1) (t 25767 17666 755591 286000)) nil (25767 17710 894030 819000) 0 nil])
([nil nil ((#("(introduced in Chapter 13)" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12491) (undo-tree-id73926 . -25) (undo-tree-id73927 . 26) (undo-tree-id73928 . -1) (undo-tree-id73929 . 1) (undo-tree-id73930 . -26) (undo-tree-id73931 . -26)) nil (25767 17710 894028 337000) 0 nil])
([nil nil ((12396 . 12397) (#("First, let's l" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 11 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12396) (undo-tree-id73745 . -13) (undo-tree-id73746 . -13) (undo-tree-id73747 . 14) (undo-tree-id73748 . -13) (undo-tree-id73749 . -8) (undo-tree-id73750 . -8) (undo-tree-id73751 . -8) (undo-tree-id73752 . -8) (undo-tree-id73753 . -8) (undo-tree-id73754 . -8) (undo-tree-id73755 . -8) (undo-tree-id73756 . -8) (undo-tree-id73757 . -8) (undo-tree-id73758 . -8) (undo-tree-id73759 . -8) (undo-tree-id73760 . -9) (undo-tree-id73761 . -9) (undo-tree-id73762 . -9) (undo-tree-id73763 . -9) (undo-tree-id73764 . -9) (undo-tree-id73765 . -9) (undo-tree-id73766 . -9) (undo-tree-id73767 . -9) (undo-tree-id73768 . -9) (undo-tree-id73769 . -9) (undo-tree-id73770 . -9) (undo-tree-id73771 . -9) (undo-tree-id73772 . -9) (undo-tree-id73773 . -9) (undo-tree-id73774 . -9) (undo-tree-id73775 . -9) (undo-tree-id73776 . -10) (undo-tree-id73777 . -10) (undo-tree-id73778 . -10) (undo-tree-id73779 . -10) (undo-tree-id73780 . -10) (undo-tree-id73781 . -10) (undo-tree-id73782 . -10) (undo-tree-id73783 . -10) (undo-tree-id73784 . -10) (undo-tree-id73785 . -10) (undo-tree-id73786 . -10) (undo-tree-id73787 . -10) (undo-tree-id73788 . -10) (undo-tree-id73789 . -10) (undo-tree-id73790 . -10) (undo-tree-id73791 . -10) (undo-tree-id73792 . -10) (undo-tree-id73793 . -10) (undo-tree-id73794 . -10) (undo-tree-id73795 . -10) (undo-tree-id73796 . -10) (undo-tree-id73797 . -10) (undo-tree-id73798 . -10) (undo-tree-id73799 . -10) (undo-tree-id73800 . -10) (undo-tree-id73801 . -10) (undo-tree-id73802 . -10) (undo-tree-id73803 . -10) (undo-tree-id73804 . -10) (undo-tree-id73805 . -10) (undo-tree-id73806 . -10) (undo-tree-id73807 . -10) (undo-tree-id73808 . -10) (undo-tree-id73809 . -10) (undo-tree-id73810 . -10) (undo-tree-id73811 . -10) (undo-tree-id73812 . -10) (undo-tree-id73813 . -10) (undo-tree-id73814 . -10) (undo-tree-id73815 . -10) (undo-tree-id73816 . -10) (undo-tree-id73817 . -10) (undo-tree-id73818 . -10) (undo-tree-id73819 . -10) (undo-tree-id73820 . -10) (undo-tree-id73821 . -10) (undo-tree-id73822 . -10) (undo-tree-id73823 . -10) (undo-tree-id73824 . -10) (undo-tree-id73825 . -10) (undo-tree-id73826 . -10) (undo-tree-id73827 . -10) (undo-tree-id73828 . -10) (undo-tree-id73829 . -11) (undo-tree-id73830 . -11) (undo-tree-id73831 . -11) (undo-tree-id73832 . -11) (undo-tree-id73833 . -11) (undo-tree-id73834 . -11) (undo-tree-id73835 . -11) (undo-tree-id73836 . -11) (undo-tree-id73837 . -11) (undo-tree-id73838 . -11) (undo-tree-id73839 . -11) (undo-tree-id73840 . -14) (undo-tree-id73841 . -13) (undo-tree-id73842 . -4) (undo-tree-id73843 . -4) (undo-tree-id73844 . -4) (undo-tree-id73845 . -4) (undo-tree-id73846 . -4) (undo-tree-id73847 . -4) (undo-tree-id73848 . -4) (undo-tree-id73849 . -4) (undo-tree-id73850 . -4) (undo-tree-id73851 . -4) (undo-tree-id73852 . -4) (undo-tree-id73853 . -4) (undo-tree-id73854 . -4) (undo-tree-id73855 . -4) (undo-tree-id73856 . -4) (undo-tree-id73857 . -4) (undo-tree-id73858 . -5) (undo-tree-id73859 . -5) (undo-tree-id73860 . -5) (undo-tree-id73861 . -5) (undo-tree-id73862 . -5) (undo-tree-id73863 . -5) (undo-tree-id73864 . -5) (undo-tree-id73865 . -5) (undo-tree-id73866 . -5) (undo-tree-id73867 . -5) (undo-tree-id73868 . -5) (undo-tree-id73869 . -5) (undo-tree-id73870 . -5) (undo-tree-id73871 . -5) (undo-tree-id73872 . -5) (undo-tree-id73873 . -5) (undo-tree-id73874 . -11) (undo-tree-id73875 . -11) (undo-tree-id73876 . -11) (undo-tree-id73877 . -11) (undo-tree-id73878 . -11) (undo-tree-id73879 . -11) (undo-tree-id73880 . -11) (undo-tree-id73881 . -11) (undo-tree-id73882 . -11) (undo-tree-id73883 . -11) (undo-tree-id73884 . -11) (undo-tree-id73885 . -11) (undo-tree-id73886 . -11) (undo-tree-id73887 . -11) (undo-tree-id73888 . -11) (undo-tree-id73889 . -11) (undo-tree-id73890 . -14) (undo-tree-id73891 . -14) (undo-tree-id73892 . -14) (undo-tree-id73893 . -14) (undo-tree-id73894 . -14) (undo-tree-id73895 . -14) (undo-tree-id73896 . -14) (undo-tree-id73897 . -14) (undo-tree-id73898 . -14) (undo-tree-id73899 . -14) (undo-tree-id73900 . -14) (undo-tree-id73901 . -14) (undo-tree-id73902 . -14) (undo-tree-id73903 . -14) (undo-tree-id73904 . -14) (undo-tree-id73905 . -14) (undo-tree-id73906 . -13) (undo-tree-id73907 . -13) (undo-tree-id73908 . -13) (undo-tree-id73909 . -13) (undo-tree-id73910 . -13) (undo-tree-id73911 . -13) (undo-tree-id73912 . -13) (undo-tree-id73913 . -13) (undo-tree-id73914 . -13) (undo-tree-id73915 . -13) (undo-tree-id73916 . -13) (undo-tree-id73917 . -13) (undo-tree-id73918 . -13) (undo-tree-id73919 . -13) (undo-tree-id73920 . -13) (undo-tree-id73921 . -13) (undo-tree-id73922 . -13) (undo-tree-id73923 . -14) (undo-tree-id73924 . -14) (undo-tree-id73925 . -14) 12409) nil (25767 17710 894011 870000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12478) (undo-tree-id73743 . -1) (undo-tree-id73744 . -1)) nil (25767 17710 893457 160000) 0 nil])
([nil nil ((#("import tensorflow_datasets as tfds
datasets, info = tfds.load(\"imdb_reviews\", as_supervised=True,
with_info=True)
train_size = info.splits[\"train\"].num_examples
" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 18 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 21 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 26 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 68 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 75 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 80 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 81 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 91 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 98 102 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 102 103 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 103 107 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 107 114 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 114 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 119 120 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 120 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 124 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 151 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 152 160 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 160 161 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12479) (undo-tree-id73716 . -160) (undo-tree-id73717 . -114) (undo-tree-id73718 . -114) (undo-tree-id73719 . -161) (undo-tree-id73720 . -114) (undo-tree-id73721 . 126) (undo-tree-id73722 . -43) (undo-tree-id73723 . -35) (undo-tree-id73724 . -35) (undo-tree-id73725 . -35) (undo-tree-id73726 . -35) (undo-tree-id73727 . -35) (undo-tree-id73728 . -35) (undo-tree-id73729 . -98) (undo-tree-id73730 . -98) (undo-tree-id73731 . -98) (undo-tree-id73732 . -98) (undo-tree-id73733 . -98) (undo-tree-id73734 . -98) (undo-tree-id73735 . -114) (undo-tree-id73736 . -114) (undo-tree-id73737 . -114) (undo-tree-id73738 . -114) (undo-tree-id73739 . -114) (undo-tree-id73740 . -114) (undo-tree-id73741 . -114) (undo-tree-id73742 . -161) 12593) nil (25767 17710 893453 993000) 0 nil])
([nil nil ((13170 . 13171) (13169 . 13170) 13101) nil (25767 17710 893416 417000) 0 nil])
([nil nil ((13170 . 13171) 13170) nil (25767 17710 893415 435000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13171 . 13172) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -13332) (13171 . 13333)) nil (25767 17712 26871 956000) 0 nil])
([nil nil ((12479 . 12481)) nil (25767 17735 474087 112000) 0 nil] [nil nil ((12479 . 12480)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12479) (undo-tree-id73933 . -1) (undo-tree-id73934 . -1) (undo-tree-id73935 . -1) (undo-tree-id73936 . -1) (undo-tree-id73937 . -1) (undo-tree-id73938 . -1) (undo-tree-id73939 . -1) (undo-tree-id73940 . -1) (undo-tree-id73941 . -1) (undo-tree-id73942 . -1) (undo-tree-id73943 . -1) (undo-tree-id73944 . -1) (undo-tree-id73945 . -1) (undo-tree-id73946 . -1) (undo-tree-id73947 . -1) (undo-tree-id73948 . -1) (undo-tree-id73949 . -1) (undo-tree-id73950 . -1) (undo-tree-id73951 . -1)) (25767 17711 360557 189000) 0 nil])
([nil nil ((#("Next, let’s " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12481) (undo-tree-id73973 . -11) (undo-tree-id73974 . -11) (undo-tree-id73975 . 12) (undo-tree-id73976 . -11) (undo-tree-id73977 . -12) (undo-tree-id73978 . -11) (undo-tree-id73979 . -3) (undo-tree-id73980 . -4) (undo-tree-id73981 . -8) (undo-tree-id73982 . -9) (undo-tree-id73983 . -10) (undo-tree-id73984 . -11) (undo-tree-id73985 . -11) (undo-tree-id73986 . -12) 12492) nil (25767 17735 474085 461000) 0 nil])
([nil nil ((#("Next, let’s write the preprocessing function:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 12480) (undo-tree-id73698 . -45) (undo-tree-id73699 . 46) (undo-tree-id73700 . 46) (undo-tree-id73701 . -46) (undo-tree-id73702 . -46) (undo-tree-id73703 . -46) (undo-tree-id73704 . -46) (undo-tree-id73705 . -46) (undo-tree-id73706 . -46) (undo-tree-id73707 . -46) (undo-tree-id73708 . -46) (undo-tree-id73709 . -46) (undo-tree-id73710 . -46) (undo-tree-id73711 . -46) (undo-tree-id73712 . -46) (undo-tree-id73713 . -46) (undo-tree-id73714 . -46) (undo-tree-id73715 . -46)) ((12480 . 12526) (t 25767 17710 973113 73000)) (25767 17710 893408 414000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 12513) (undo-tree-id73971 . -1) (undo-tree-id73972 . -1)) nil (25767 17735 474072 611000) 0 nil])
nil
([nil nil ((#("def preprocess(X_batch, y_batch):
X_batch = tf.strings.substr(X_batch, 0, 300)
X_batch = tf.strings.regex_replace(X_batch, b\"<br\\\\s*/?>\", b\" \")
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 17 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 22 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 26 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 31 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 36 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 41 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 64 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 69 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 79 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 80 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 81 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 86 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 105 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 106 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 113 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 115 116 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 116 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 121 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 142 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 143 144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 12514) (undo-tree-id73952 . -143) (undo-tree-id73953 . -79) (undo-tree-id73954 . -79) (undo-tree-id73955 . -144) (undo-tree-id73956 . -79) (undo-tree-id73957 . -34) (undo-tree-id73958 . -34) (undo-tree-id73959 . -34) (undo-tree-id73960 . -34) (undo-tree-id73961 . -34) (undo-tree-id73962 . -34) (undo-tree-id73963 . -79) (undo-tree-id73964 . -79) (undo-tree-id73965 . -79) (undo-tree-id73966 . -79) (undo-tree-id73967 . -79) (undo-tree-id73968 . -79) (undo-tree-id73969 . -79) (undo-tree-id73970 . -144) 12593) nil (25767 17735 474627 872000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13178 . 13179) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 13322) (13178 . 13323)) ((#("
def preprocess(X_batch, y_batch):
X_batch = tf.strings.substr(X_batch, 0, 300)
X_batch = tf.strings.regex_replace(X_batch, b\"<br\\\\s*/?>\", b\" \")
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky nil font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 2 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 5 15 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 15 16 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 16 17 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 17 18 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 18 23 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 26 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 26 27 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 27 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 32 33 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 33 35 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 35 36 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 36 37 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 37 42 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 42 62 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 62 63 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 63 64 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 64 65 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 70 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 70 78 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 78 79 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 79 80 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 80 81 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 81 82 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 82 87 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 87 106 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 106 107 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 107 114 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 114 115 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 115 116 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 116 117 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 117 122 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 122 125 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 125 137 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 137 140 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 140 143 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 143 144 (rear-nonsticky t fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 144 145 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 13178) (undo-tree-id73987 . -34) (undo-tree-id73988 . -34) (undo-tree-id73989 . 111) (13322 . 13323) (nil rear-nonsticky t 13178 . 13179)) (25767 17737 310999 622000) 0 nil])
([nil nil ((13213 . 13217)) nil (25767 17752 994103 731000) 0 nil])
([nil nil ((13262 . 13266)) nil (25767 17752 994098 210000) 0 nil])
([nil nil ((#("X_batch = tf.strings.regex_replace(X_batch, b\"[^a-zA-Z']\", b\" \")
X_batch = tf.strings.split(X_batch)
return X_batch.to_tensor(default_value=b\"<pad>\"), y_batch
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 2 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 7 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 27 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 34 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 37 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 42 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 48 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise 0.3) (height 0.7))) 49 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 65 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 66 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 67 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 72 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 93 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 94 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 99 101 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 101 109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 109 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 110 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 118 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 119 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 125 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 133 134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 134 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 139 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 152 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 153 158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 158 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13343) (undo-tree-id74000 . -158) (undo-tree-id74001 . -101) (undo-tree-id74002 . -101) (undo-tree-id74003 . -159) (undo-tree-id74004 . -101) (undo-tree-id74005 . -65) (undo-tree-id74006 . -65) (undo-tree-id74007 . -65) (undo-tree-id74008 . -65) (undo-tree-id74009 . -65) (undo-tree-id74010 . -65) (undo-tree-id74011 . -101) (undo-tree-id74012 . -101) (undo-tree-id74013 . -101) (undo-tree-id74014 . -101) (undo-tree-id74015 . -101) (undo-tree-id74016 . -101) (undo-tree-id74017 . -101) (undo-tree-id74018 . -159) 13444 (t 25767 17753 70515 22000)) nil (25767 17783 704500 706000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -13331) (undo-tree-id73990 . -4) (undo-tree-id73991 . -4) (undo-tree-id73992 . -4) (undo-tree-id73993 . -4) (undo-tree-id73994 . -4) (undo-tree-id73995 . -4) (undo-tree-id73996 . -4) (undo-tree-id73997 . -4) (undo-tree-id73998 . -4) (undo-tree-id73999 . -4) 13335 (13330 . 13335) 13262) nil (25767 17783 704483 924000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13331 . 13332) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -13490) (13331 . 13491)) nil (25767 17783 704466 51000) 0 nil])
([nil nil ((13332 . 13336)) nil (25767 17783 704464 401000) 0 nil])
([nil nil ((13401 . 13405)) nil (25767 17783 704462 854000) 0 nil])
([nil nil ((13441 . 13445)) nil (25767 17783 704457 618000) 0 nil])
([nil nil ((13515 . 13517) (#("It starts by t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13515) (undo-tree-id74810 . -13) (undo-tree-id74811 . -13) (undo-tree-id74812 . -13) (undo-tree-id74813 . -1) (undo-tree-id74814 . -1) (undo-tree-id74815 . -1) (undo-tree-id74816 . -1) (undo-tree-id74817 . -1) (undo-tree-id74818 . -1) (undo-tree-id74819 . -1) (undo-tree-id74820 . -1) (undo-tree-id74821 . -1) (undo-tree-id74822 . -1) (undo-tree-id74823 . -1) (undo-tree-id74824 . -8) (undo-tree-id74825 . -8) (undo-tree-id74826 . -8) (undo-tree-id74827 . -8) (undo-tree-id74828 . -8) (undo-tree-id74829 . -8) (undo-tree-id74830 . -8) (undo-tree-id74831 . -8) (undo-tree-id74832 . -8) (undo-tree-id74833 . -8) (undo-tree-id74834 . -8) (undo-tree-id74835 . -11) (undo-tree-id74836 . -11) (undo-tree-id74837 . -11) (undo-tree-id74838 . -11) (undo-tree-id74839 . -11) (undo-tree-id74840 . -11) (undo-tree-id74841 . -11) (undo-tree-id74842 . -11) (undo-tree-id74843 . -11) (undo-tree-id74844 . -11) (undo-tree-id74845 . -11) (undo-tree-id74846 . -11) (undo-tree-id74847 . -11) (undo-tree-id74848 . -11) (undo-tree-id74849 . -11) (undo-tree-id74850 . -11) (undo-tree-id74851 . -11) (undo-tree-id74852 . -11) (undo-tree-id74853 . -11) (undo-tree-id74854 . -11) (undo-tree-id74855 . -11) (undo-tree-id74856 . -14) (undo-tree-id74857 . -13) (undo-tree-id74858 . -1) (undo-tree-id74859 . -1) (undo-tree-id74860 . -1) (undo-tree-id74861 . -1) (undo-tree-id74862 . -1) (undo-tree-id74863 . -1) (undo-tree-id74864 . -1) (undo-tree-id74865 . -1) (undo-tree-id74866 . -1) (undo-tree-id74867 . -1) (undo-tree-id74868 . -1) (undo-tree-id74869 . -1) (undo-tree-id74870 . -1) (undo-tree-id74871 . -1) (undo-tree-id74872 . -1) (undo-tree-id74873 . -1) (undo-tree-id74874 . -8) (undo-tree-id74875 . -8) (undo-tree-id74876 . -8) (undo-tree-id74877 . -8) (undo-tree-id74878 . -8) (undo-tree-id74879 . -8) (undo-tree-id74880 . -8) (undo-tree-id74881 . -8) (undo-tree-id74882 . -8) (undo-tree-id74883 . -8) (undo-tree-id74884 . -8) (undo-tree-id74885 . -8) (undo-tree-id74886 . -8) (undo-tree-id74887 . -8) (undo-tree-id74888 . -8) (undo-tree-id74889 . -8) (undo-tree-id74890 . -11) (undo-tree-id74891 . -11) (undo-tree-id74892 . -11) (undo-tree-id74893 . -11) (undo-tree-id74894 . -11) (undo-tree-id74895 . -11) (undo-tree-id74896 . -11) (undo-tree-id74897 . -11) (undo-tree-id74898 . -11) (undo-tree-id74899 . -11) (undo-tree-id74900 . -11) (undo-tree-id74901 . -11) (undo-tree-id74902 . -11) (undo-tree-id74903 . -11) (undo-tree-id74904 . -11) (undo-tree-id74905 . -11) (undo-tree-id74906 . -11) (undo-tree-id74907 . -11) (undo-tree-id74908 . -11) (undo-tree-id74909 . -11) (undo-tree-id74910 . -11) (undo-tree-id74911 . -12) (undo-tree-id74912 . -12) (undo-tree-id74913 . -12) (undo-tree-id74914 . -12) (undo-tree-id74915 . -12) (undo-tree-id74916 . -12) (undo-tree-id74917 . -12) (undo-tree-id74918 . -12) (undo-tree-id74919 . -12) (undo-tree-id74920 . -12) (undo-tree-id74921 . -12) (undo-tree-id74922 . -12) (undo-tree-id74923 . -12) (undo-tree-id74924 . -12) (undo-tree-id74925 . -12) (undo-tree-id74926 . -12) (undo-tree-id74927 . -13) (undo-tree-id74928 . -13) (undo-tree-id74929 . -13) (undo-tree-id74930 . -13) (undo-tree-id74931 . -13) (undo-tree-id74932 . -13) (undo-tree-id74933 . -13) (undo-tree-id74934 . -13) (undo-tree-id74935 . -13) (undo-tree-id74936 . -13) (undo-tree-id74937 . -13) (undo-tree-id74938 . -13) (undo-tree-id74939 . -13) (undo-tree-id74940 . -13) (undo-tree-id74941 . -13) (undo-tree-id74942 . -13) (undo-tree-id74943 . -13) (undo-tree-id74944 . -13) (undo-tree-id74945 . -13) (undo-tree-id74946 . -13) (undo-tree-id74947 . -13) (undo-tree-id74948 . -13) (undo-tree-id74949 . -14) (undo-tree-id74950 . -14) (undo-tree-id74951 . -14) 13528 (t 25767 17783 827512 531000)) nil (25767 17885 548679 494000) 0 nil])
([nil nil ((13517 . 13518)) nil (25767 17885 548592 425000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13524) (undo-tree-id74807 . -1) (undo-tree-id74808 . -1) (undo-tree-id74809 . -1)) nil (25767 17885 548591 611000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13524) (undo-tree-id74804 . -1) (undo-tree-id74805 . -1) (undo-tree-id74806 . -1)) nil (25767 17885 548589 146000) 0 nil])
([nil nil ((#("g" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13524) (undo-tree-id74800 . -1) (undo-tree-id74801 . -1) (undo-tree-id74802 . -1) (undo-tree-id74803 . -1)) nil (25767 17885 548586 869000) 0 nil])
([nil nil ((13524 . 13525)) nil (25767 17885 548584 173000) 0 nil])
([nil nil ((#("of
each: " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13577) (undo-tree-id74712 . -8) (undo-tree-id74713 . -8) (undo-tree-id74714 . -8) (undo-tree-id74715 . -3) (undo-tree-id74716 . -3) (undo-tree-id74717 . -3) (undo-tree-id74718 . -3) (undo-tree-id74719 . -3) (undo-tree-id74720 . -3) (undo-tree-id74721 . -3) (undo-tree-id74722 . -3) (undo-tree-id74723 . -3) (undo-tree-id74724 . -3) (undo-tree-id74725 . -3) (undo-tree-id74726 . -3) (undo-tree-id74727 . -3) (undo-tree-id74728 . -3) (undo-tree-id74729 . -3) (undo-tree-id74730 . -3) (undo-tree-id74731 . -3) (undo-tree-id74732 . -9) (undo-tree-id74733 . -8) (undo-tree-id74734 . -1) (undo-tree-id74735 . -6) (undo-tree-id74736 . -6) (undo-tree-id74737 . -6) (undo-tree-id74738 . -6) (undo-tree-id74739 . -6) (undo-tree-id74740 . -6) (undo-tree-id74741 . -6) (undo-tree-id74742 . -6) (undo-tree-id74743 . -6) (undo-tree-id74744 . -6) (undo-tree-id74745 . -6) (undo-tree-id74746 . -6) (undo-tree-id74747 . -6) (undo-tree-id74748 . -6) (undo-tree-id74749 . -6) (undo-tree-id74750 . -6) (undo-tree-id74751 . -6) (undo-tree-id74752 . -6) (undo-tree-id74753 . -6) (undo-tree-id74754 . -6) (undo-tree-id74755 . -6) (undo-tree-id74756 . -7) (undo-tree-id74757 . -7) (undo-tree-id74758 . -7) (undo-tree-id74759 . -7) (undo-tree-id74760 . -7) (undo-tree-id74761 . -7) (undo-tree-id74762 . -7) (undo-tree-id74763 . -7) (undo-tree-id74764 . -7) (undo-tree-id74765 . -7) (undo-tree-id74766 . -7) (undo-tree-id74767 . -7) (undo-tree-id74768 . -7) (undo-tree-id74769 . -7) (undo-tree-id74770 . -7) (undo-tree-id74771 . -7) (undo-tree-id74772 . -8) (undo-tree-id74773 . -8) (undo-tree-id74774 . -8) (undo-tree-id74775 . -8) (undo-tree-id74776 . -8) (undo-tree-id74777 . -8) (undo-tree-id74778 . -8) (undo-tree-id74779 . -8) (undo-tree-id74780 . -8) (undo-tree-id74781 . -8) (undo-tree-id74782 . -8) (undo-tree-id74783 . -8) (undo-tree-id74784 . -8) (undo-tree-id74785 . -8) (undo-tree-id74786 . -8) (undo-tree-id74787 . -8) (undo-tree-id74788 . -8) (undo-tree-id74789 . -8) (undo-tree-id74790 . -8) (undo-tree-id74791 . -8) (undo-tree-id74792 . -8) (undo-tree-id74793 . -8) (undo-tree-id74794 . -8) (undo-tree-id74795 . -8) (undo-tree-id74796 . -8) (undo-tree-id74797 . -8) (undo-tree-id74798 . -8) (undo-tree-id74799 . -9) 13585) nil (25767 17885 548580 951000) 0 nil])
([nil nil ((13515 . 13643) (#("- this will speed up training, and it won’t impact performance too
- Truncate the reviews, keeping only the first 300 characters" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 66 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 66 67 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 67 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 68 70 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 70 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 71 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 13515) (undo-tree-id74229 . -128) (undo-tree-id74230 . -128) (undo-tree-id74231 . -128) (undo-tree-id74232 . -128) (undo-tree-id74233 . 51) (undo-tree-id74234 . -77) (undo-tree-id74235 . -77) (undo-tree-id74236 . -128) (undo-tree-id74237 . -118) (undo-tree-id74238 . -118) (undo-tree-id74239 . -118) (undo-tree-id74240 . -118) (undo-tree-id74241 . -118) (undo-tree-id74242 . -118) (undo-tree-id74243 . -118) (undo-tree-id74244 . -118) (undo-tree-id74245 . -118) (undo-tree-id74246 . -118) (undo-tree-id74247 . -118) (undo-tree-id74248 . -118) (undo-tree-id74249 . -118) (undo-tree-id74250 . -118) (undo-tree-id74251 . -118) (undo-tree-id74252 . -118) (undo-tree-id74253 . -118) (undo-tree-id74254 . -118) (undo-tree-id74255 . -118) (undo-tree-id74256 . -118) (undo-tree-id74257 . -118) (undo-tree-id74258 . -128) (undo-tree-id74259 . -128) (undo-tree-id74260 . -128) (undo-tree-id74261 . -128) (undo-tree-id74262 . -128) (undo-tree-id74263 . -128) (undo-tree-id74264 . -128) (undo-tree-id74265 . -128) (undo-tree-id74266 . -128) (undo-tree-id74267 . -128) (undo-tree-id74268 . -128) (undo-tree-id74269 . -128) (undo-tree-id74270 . -128) (undo-tree-id74271 . -128) (undo-tree-id74272 . -128) (undo-tree-id74273 . -128) (undo-tree-id74274 . -128) (undo-tree-id74275 . -128) (undo-tree-id74276 . -128) (undo-tree-id74277 . -128) (undo-tree-id74278 . -128) (undo-tree-id74279 . -128) (undo-tree-id74280 . -128) (undo-tree-id74281 . -128) (undo-tree-id74282 . -128) (undo-tree-id74283 . -128) (undo-tree-id74284 . -128) (undo-tree-id74285 . -128) (undo-tree-id74286 . -128) (undo-tree-id74287 . -128) (undo-tree-id74288 . -128) (undo-tree-id74289 . -128) (undo-tree-id74290 . -128) (undo-tree-id74291 . -128) (undo-tree-id74292 . -118) (undo-tree-id74293 . -118) (undo-tree-id74294 . -118) (undo-tree-id74295 . -118) (undo-tree-id74296 . -118) (undo-tree-id74297 . -118) (undo-tree-id74298 . -118) (undo-tree-id74299 . -118) (undo-tree-id74300 . -118) (undo-tree-id74301 . -118) (undo-tree-id74302 . -118) (undo-tree-id74303 . -118) (undo-tree-id74304 . -118) (undo-tree-id74305 . -118) (undo-tree-id74306 . -118) (undo-tree-id74307 . -118) (undo-tree-id74308 . -68) (undo-tree-id74309 . -68) (undo-tree-id74310 . -68) (undo-tree-id74311 . -68) (undo-tree-id74312 . -68) (undo-tree-id74313 . -68) (undo-tree-id74314 . -69) (undo-tree-id74315 . -69) (undo-tree-id74316 . -69) (undo-tree-id74317 . -69) (undo-tree-id74318 . -69) (undo-tree-id74319 . -69) (undo-tree-id74320 . -69) (undo-tree-id74321 . -68) (undo-tree-id74322 . -68) (undo-tree-id74323 . -68) (undo-tree-id74324 . -68) (undo-tree-id74325 . -68) (undo-tree-id74326 . -68) (undo-tree-id74327 . -68) (undo-tree-id74328 . -68) (undo-tree-id74329 . -68) (undo-tree-id74330 . -68) (undo-tree-id74331 . -68) (undo-tree-id74332 . -68) (undo-tree-id74333 . -68) (undo-tree-id74334 . -68) (undo-tree-id74335 . -68) (undo-tree-id74336 . -69) (undo-tree-id74337 . -69) (undo-tree-id74338 . -69) (undo-tree-id74339 . -69) (undo-tree-id74340 . -69) (undo-tree-id74341 . -69) (undo-tree-id74342 . -69) (undo-tree-id74343 . -69) (undo-tree-id74344 . -70) (undo-tree-id74345 . -70) (undo-tree-id74346 . -70) (undo-tree-id74347 . -70) (undo-tree-id74348 . -70) (undo-tree-id74349 . -70) (undo-tree-id74350 . -69) (undo-tree-id74351 . -69) (undo-tree-id74352 . -69) (undo-tree-id74353 . -69) (undo-tree-id74354 . -69) (undo-tree-id74355 . -69) (undo-tree-id74356 . -69) (undo-tree-id74357 . -69) (undo-tree-id74358 . -69) (undo-tree-id74359 . -69) (undo-tree-id74360 . -69) (undo-tree-id74361 . -69) (undo-tree-id74362 . -69) (undo-tree-id74363 . -69) (undo-tree-id74364 . -69) (undo-tree-id74365 . -78) (undo-tree-id74366 . -76) (undo-tree-id74367 . -76) (undo-tree-id74368 . -76) (undo-tree-id74369 . -76) (undo-tree-id74370 . -76) (undo-tree-id74371 . -76) (undo-tree-id74372 . -76) (undo-tree-id74373 . -76) (undo-tree-id74374 . -76) (undo-tree-id74375 . -76) (undo-tree-id74376 . -76) (undo-tree-id74377 . -76) (undo-tree-id74378 . -76) (undo-tree-id74379 . -76) (undo-tree-id74380 . -76) (undo-tree-id74381 . -76) (undo-tree-id74382 . -76) (undo-tree-id74383 . -76) (undo-tree-id74384 . -76) (undo-tree-id74385 . -76) (undo-tree-id74386 . -76) (undo-tree-id74387 . -76) (undo-tree-id74388 . -76) (undo-tree-id74389 . -76) (undo-tree-id74390 . -76) (undo-tree-id74391 . -76) (undo-tree-id74392 . -76) (undo-tree-id74393 . -76) (undo-tree-id74394 . -76) (undo-tree-id74395 . -76) (undo-tree-id74396 . -76) (undo-tree-id74397 . -76) (undo-tree-id74398 . -76) (undo-tree-id74399 . -77) (undo-tree-id74400 . -77) (undo-tree-id74401 . -77) (undo-tree-id74402 . -77) (undo-tree-id74403 . -77) (undo-tree-id74404 . -77) (undo-tree-id74405 . -77) (undo-tree-id74406 . -77) (undo-tree-id74407 . -77) (undo-tree-id74408 . -77) (undo-tree-id74409 . -77) (undo-tree-id74410 . -77) (undo-tree-id74411 . -77) (undo-tree-id74412 . -77) (undo-tree-id74413 . -77) (undo-tree-id74414 . -77) (undo-tree-id74415 . -77) (undo-tree-id74416 . -77) (undo-tree-id74417 . -77) (undo-tree-id74418 . -77) (undo-tree-id74419 . -77) (undo-tree-id74420 . -77) (undo-tree-id74421 . -77) (undo-tree-id74422 . -77) (undo-tree-id74423 . -77) (undo-tree-id74424 . -77) (undo-tree-id74425 . -76) (undo-tree-id74426 . -76) (undo-tree-id74427 . -76) (undo-tree-id74428 . -76) (undo-tree-id74429 . -76) (undo-tree-id74430 . -76) (undo-tree-id74431 . -76) (undo-tree-id74432 . -76) (undo-tree-id74433 . -76) (undo-tree-id74434 . -76) (undo-tree-id74435 . -76) (undo-tree-id74436 . -76) (undo-tree-id74437 . -76) (undo-tree-id74438 . -76) (undo-tree-id74439 . -76) (undo-tree-id74440 . -76) (undo-tree-id74441 . -76) (undo-tree-id74442 . -76) (undo-tree-id74443 . -76) (undo-tree-id74444 . -76) (undo-tree-id74445 . -76) (undo-tree-id74446 . -76) (undo-tree-id74447 . -76) (undo-tree-id74448 . -76) (undo-tree-id74449 . -76) (undo-tree-id74450 . -99) (undo-tree-id74451 . -128) (undo-tree-id74452 . -128) (undo-tree-id74453 . -128) (undo-tree-id74454 . -128) (undo-tree-id74455 . -128) (undo-tree-id74456 . -128) (undo-tree-id74457 . -128) (undo-tree-id74458 . -128) (undo-tree-id74459 . -128) (undo-tree-id74460 . -128) (undo-tree-id74461 . -128) (undo-tree-id74462 . -128) (undo-tree-id74463 . -128) (undo-tree-id74464 . -128) (undo-tree-id74465 . -128) (undo-tree-id74466 . -128) (undo-tree-id74467 . -128) (undo-tree-id74468 . -128) (undo-tree-id74469 . -128) (undo-tree-id74470 . -128) (undo-tree-id74471 . -128) (undo-tree-id74472 . -128) (undo-tree-id74473 . -128) (undo-tree-id74474 . -128) (undo-tree-id74475 . -128) (undo-tree-id74476 . -128) (undo-tree-id74477 . -128) (undo-tree-id74478 . -128) (undo-tree-id74479 . -128) (undo-tree-id74480 . -128) (undo-tree-id74481 . -128) (undo-tree-id74482 . -128) (undo-tree-id74483 . -128) (undo-tree-id74484 . -128) (undo-tree-id74485 . -128) (undo-tree-id74486 . -128) (undo-tree-id74487 . -128) (undo-tree-id74488 . -128) (undo-tree-id74489 . -128) (undo-tree-id74490 . -128) (undo-tree-id74491 . -128) (undo-tree-id74492 . -128) (undo-tree-id74493 . -128) (undo-tree-id74494 . -128) (undo-tree-id74495 . -128) (undo-tree-id74496 . -128) (undo-tree-id74497 . -128) (undo-tree-id74498 . -128) (undo-tree-id74499 . -128) (undo-tree-id74500 . -128) (undo-tree-id74501 . -128) (undo-tree-id74502 . -128) (undo-tree-id74503 . -128) (undo-tree-id74504 . -128) (undo-tree-id74505 . -128) (undo-tree-id74506 . -128) (undo-tree-id74507 . -128) (undo-tree-id74508 . -128) (undo-tree-id74509 . -128) (undo-tree-id74510 . -128) (undo-tree-id74511 . -128) (undo-tree-id74512 . -128) (undo-tree-id74513 . -128) (undo-tree-id74514 . -128) (undo-tree-id74515 . -128) (undo-tree-id74516 . -128) (undo-tree-id74517 . -128) (undo-tree-id74518 . -128) (undo-tree-id74519 . -128) (undo-tree-id74520 . -128) (undo-tree-id74521 . -128) (undo-tree-id74522 . -128) (undo-tree-id74523 . -128) (undo-tree-id74524 . -128) (undo-tree-id74525 . -128) (undo-tree-id74526 . -128) (undo-tree-id74527 . -128) (undo-tree-id74528 . -128) (undo-tree-id74529 . -128) (undo-tree-id74530 . -128) (undo-tree-id74531 . -128) (undo-tree-id74532 . -128) (undo-tree-id74533 . -128) (undo-tree-id74534 . -128) (undo-tree-id74535 . -128) (undo-tree-id74536 . -128) (undo-tree-id74537 . -128) (undo-tree-id74538 . -128) (undo-tree-id74539 . -128) (undo-tree-id74540 . -128) (undo-tree-id74541 . -128) (undo-tree-id74542 . -128) (undo-tree-id74543 . -128) (undo-tree-id74544 . -128) (undo-tree-id74545 . -128) (undo-tree-id74546 . -128) (undo-tree-id74547 . -128) (undo-tree-id74548 . -128) (undo-tree-id74549 . -128) (undo-tree-id74550 . -128) (undo-tree-id74551 . -128) (undo-tree-id74552 . -128) (undo-tree-id74553 . -128) (undo-tree-id74554 . -128) (undo-tree-id74555 . -128) (undo-tree-id74556 . -128) (undo-tree-id74557 . -128) (undo-tree-id74558 . -128) (undo-tree-id74559 . -128) (undo-tree-id74560 . -128) (undo-tree-id74561 . -67) (13515 . 13582) (#(" this will speed up training, and it won’t impact performance too" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13576) (undo-tree-id74562 . -1) (undo-tree-id74563 . -1) (undo-tree-id74564 . -1) (undo-tree-id74565 . -1) (undo-tree-id74566 . 64) (undo-tree-id74567 . -1) (undo-tree-id74568 . -1) (undo-tree-id74569 . -1) (undo-tree-id74570 . -1) (undo-tree-id74571 . -1) (undo-tree-id74572 . -1) (undo-tree-id74573 . -1) (undo-tree-id74574 . -62) (undo-tree-id74575 . -62) (undo-tree-id74576 . -62) (undo-tree-id74577 . -62) (undo-tree-id74578 . -62) (undo-tree-id74579 . -62) (undo-tree-id74580 . -62) (undo-tree-id74581 . -62) (undo-tree-id74582 . -62) (undo-tree-id74583 . -62) (undo-tree-id74584 . -62) (undo-tree-id74585 . -62) (undo-tree-id74586 . -62) (undo-tree-id74587 . -62) (undo-tree-id74588 . -62) (undo-tree-id74589 . -62) (undo-tree-id74590 . -62) (undo-tree-id74591 . -1) (undo-tree-id74592 . -1) (undo-tree-id74593 . -1) (undo-tree-id74594 . -1) (undo-tree-id74595 . -1) (undo-tree-id74596 . -1) (undo-tree-id74597 . -1) (undo-tree-id74598 . -1) (undo-tree-id74599 . -1) (undo-tree-id74600 . -1) (undo-tree-id74601 . -1) (undo-tree-id74602 . -1) (undo-tree-id74603 . -1) (undo-tree-id74604 . -1) (undo-tree-id74605 . -1) (undo-tree-id74606 . -1) (undo-tree-id74607 . -1) (undo-tree-id74608 . -1) (undo-tree-id74609 . -1) (undo-tree-id74610 . -1) (undo-tree-id74611 . -1) (undo-tree-id74612 . -1) (undo-tree-id74613 . -1) (undo-tree-id74614 . -1) (undo-tree-id74615 . -1) (undo-tree-id74616 . -1) (undo-tree-id74617 . -1) (undo-tree-id74618 . -1) (undo-tree-id74619 . -1) (undo-tree-id74620 . -1) (undo-tree-id74621 . -1) (undo-tree-id74622 . -1) (undo-tree-id74623 . -1) (undo-tree-id74624 . -1) (undo-tree-id74625 . -1) (undo-tree-id74626 . -1) (undo-tree-id74627 . -1) (undo-tree-id74628 . -1) (undo-tree-id74629 . -1) (undo-tree-id74630 . -1) (undo-tree-id74631 . -1) (undo-tree-id74632 . -1) (undo-tree-id74633 . -1) (undo-tree-id74634 . -1) (undo-tree-id74635 . -1) (undo-tree-id74636 . -1) (undo-tree-id74637 . -1) (undo-tree-id74638 . -1) (undo-tree-id74639 . -1) (undo-tree-id74640 . -1) (undo-tree-id74641 . -1) (undo-tree-id74642 . -1) (undo-tree-id74643 . -1) (undo-tree-id74644 . -1) (undo-tree-id74645 . -1) (undo-tree-id74646 . -1) (undo-tree-id74647 . -1) (undo-tree-id74648 . -1) (undo-tree-id74649 . -1) (undo-tree-id74650 . -1) (undo-tree-id74651 . -1) (undo-tree-id74652 . -1) (undo-tree-id74653 . -1) (undo-tree-id74654 . -1) (undo-tree-id74655 . -1) (undo-tree-id74656 . -1) (undo-tree-id74657 . -1) (undo-tree-id74658 . -1) (undo-tree-id74659 . -1) (undo-tree-id74660 . -1) (undo-tree-id74661 . -1) (undo-tree-id74662 . -1) (undo-tree-id74663 . -1) (undo-tree-id74664 . -1) (undo-tree-id74665 . -1) (undo-tree-id74666 . -1) (undo-tree-id74667 . -1) (undo-tree-id74668 . -1) (undo-tree-id74669 . -1) (undo-tree-id74670 . -1) (undo-tree-id74671 . -1) (undo-tree-id74672 . -1) (undo-tree-id74673 . -1) (undo-tree-id74674 . -1) (undo-tree-id74675 . -1) (undo-tree-id74676 . -1) (undo-tree-id74677 . -1) (undo-tree-id74678 . -1) (undo-tree-id74679 . -1) (undo-tree-id74680 . -1) (undo-tree-id74681 . -1) (undo-tree-id74682 . -1) (undo-tree-id74683 . -1) (undo-tree-id74684 . -1) (undo-tree-id74685 . -1) (undo-tree-id74686 . -1) (undo-tree-id74687 . -1) (undo-tree-id74688 . -1) (undo-tree-id74689 . -1) (undo-tree-id74690 . -1) (undo-tree-id74691 . -1) (undo-tree-id74692 . -1) (undo-tree-id74693 . -1) (undo-tree-id74694 . -1) (undo-tree-id74695 . -1) (undo-tree-id74696 . -1) (undo-tree-id74697 . -1) (undo-tree-id74698 . -1) (undo-tree-id74699 . -1) (undo-tree-id74700 . -1) (undo-tree-id74701 . -1) (undo-tree-id74702 . -1) (undo-tree-id74703 . -1) (undo-tree-id74704 . -1) (undo-tree-id74705 . -1) (undo-tree-id74706 . -1) (undo-tree-id74707 . -1) (undo-tree-id74708 . -1) (undo-tree-id74709 . -1) (undo-tree-id74710 . -1) (undo-tree-id74711 . -1) 13577) nil (25767 17885 548518 22000) 0 nil])
([nil nil ((#("- this will speed up training, and it won’t impact performance too
much because you can generally tell whether a review is positive or not in
" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 66 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 67 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13577) (undo-tree-id74080 . -141) (undo-tree-id74081 . -134) (undo-tree-id74082 . 140) (undo-tree-id74083 . -134) (undo-tree-id74084 . -67) (undo-tree-id74085 . -67) (undo-tree-id74086 . -67) (undo-tree-id74087 . -67) (undo-tree-id74088 . -67) (undo-tree-id74089 . -67) (undo-tree-id74090 . -132) (undo-tree-id74091 . -132) (undo-tree-id74092 . -132) (undo-tree-id74093 . -132) (undo-tree-id74094 . -132) (undo-tree-id74095 . -132) (undo-tree-id74096 . -142) (undo-tree-id74097 . -142) (undo-tree-id74098 . -142) (undo-tree-id74099 . -142) (undo-tree-id74100 . -142) (undo-tree-id74101 . -142) (undo-tree-id74102 . -142) (undo-tree-id74103 . -142) (undo-tree-id74104 . -142) (undo-tree-id74105 . -142) (undo-tree-id74106 . -142) (undo-tree-id74107 . -142) (undo-tree-id74108 . -132) (undo-tree-id74109 . -132) (undo-tree-id74110 . -132) (undo-tree-id74111 . -132) (undo-tree-id74112 . -132) (undo-tree-id74113 . -132) (undo-tree-id74114 . -132) (undo-tree-id74115 . -132) (undo-tree-id74116 . -132) (undo-tree-id74117 . -132) (undo-tree-id74118 . -132) (undo-tree-id74119 . -67) (undo-tree-id74120 . -67) (undo-tree-id74121 . -67) (undo-tree-id74122 . -67) (undo-tree-id74123 . -67) (undo-tree-id74124 . -67) (undo-tree-id74125 . -67) (undo-tree-id74126 . -67) (undo-tree-id74127 . -67) (undo-tree-id74128 . -67) (undo-tree-id74129 . -67) (undo-tree-id74130 . -2) (undo-tree-id74131 . -2) (undo-tree-id74132 . -2) (undo-tree-id74133 . -2) (undo-tree-id74134 . -2) (undo-tree-id74135 . -2) (undo-tree-id74136 . -2) (undo-tree-id74137 . -1) (undo-tree-id74138 . -1) (undo-tree-id74139 . -1) (undo-tree-id74140 . -1) (undo-tree-id74141 . -1) (undo-tree-id74142 . -1) (undo-tree-id74143 . -1) (undo-tree-id74144 . -1) (undo-tree-id74145 . -1) (undo-tree-id74146 . -1) (undo-tree-id74147 . -1) (undo-tree-id74148 . -1) (undo-tree-id74149 . -1) (undo-tree-id74150 . -1) (undo-tree-id74151 . -1) (undo-tree-id74152 . -2) (undo-tree-id74153 . -142) (undo-tree-id74154 . -2) (undo-tree-id74155 . -134) (undo-tree-id74156 . -2) (undo-tree-id74157 . -2) (undo-tree-id74158 . -2) (undo-tree-id74159 . -2) (undo-tree-id74160 . -2) (undo-tree-id74161 . -2) (undo-tree-id74162 . -2) (undo-tree-id74163 . -2) (undo-tree-id74164 . -2) (undo-tree-id74165 . -2) (undo-tree-id74166 . -2) (undo-tree-id74167 . -2) (undo-tree-id74168 . -2) (undo-tree-id74169 . -69) (undo-tree-id74170 . -69) (undo-tree-id74171 . -69) (undo-tree-id74172 . -69) (undo-tree-id74173 . -69) (undo-tree-id74174 . -69) (undo-tree-id74175 . -69) (undo-tree-id74176 . -69) (undo-tree-id74177 . -69) (undo-tree-id74178 . -69) (undo-tree-id74179 . -69) (undo-tree-id74180 . -69) (undo-tree-id74181 . -69) (undo-tree-id74182 . -69) (undo-tree-id74183 . -69) (undo-tree-id74184 . -69) (undo-tree-id74185 . -134) (undo-tree-id74186 . -134) (undo-tree-id74187 . -134) (undo-tree-id74188 . -134) (undo-tree-id74189 . -134) (undo-tree-id74190 . -134) (undo-tree-id74191 . -134) (undo-tree-id74192 . -134) (undo-tree-id74193 . -134) (undo-tree-id74194 . -134) (undo-tree-id74195 . -134) (undo-tree-id74196 . -134) (undo-tree-id74197 . -134) (undo-tree-id74198 . -134) (undo-tree-id74199 . -134) (undo-tree-id74200 . -134) (undo-tree-id74201 . -134) (undo-tree-id74202 . -134) (undo-tree-id74203 . -134) (undo-tree-id74204 . -134) (undo-tree-id74205 . -134) (undo-tree-id74206 . -134) (undo-tree-id74207 . -134) (undo-tree-id74208 . -134) (undo-tree-id74209 . -134) (undo-tree-id74210 . -134) (undo-tree-id74211 . -134) (undo-tree-id74212 . -134) (undo-tree-id74213 . -134) (undo-tree-id74214 . -134) (undo-tree-id74215 . -134) (undo-tree-id74216 . -134) (undo-tree-id74217 . -134) (undo-tree-id74218 . -134) (undo-tree-id74219 . -134) (undo-tree-id74220 . -134) (undo-tree-id74221 . -134) (undo-tree-id74222 . -134) (undo-tree-id74223 . -134) (undo-tree-id74224 . -134) (undo-tree-id74225 . -134) (undo-tree-id74226 . -134) (undo-tree-id74227 . -134) (undo-tree-id74228 . -142) 13711) nil (25767 17885 548212 621000) 0 nil])
([nil nil ((#("the first sentence or two" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13577) (undo-tree-id74045 . -24) (undo-tree-id74046 . 25) (undo-tree-id74047 . 25) (undo-tree-id74048 . -2) (undo-tree-id74049 . -2) (undo-tree-id74050 . -2) (undo-tree-id74051 . -2) (undo-tree-id74052 . -2) (undo-tree-id74053 . -2) (undo-tree-id74054 . -2) (undo-tree-id74055 . -2) (undo-tree-id74056 . -2) (undo-tree-id74057 . -2) (undo-tree-id74058 . -2) (undo-tree-id74059 . -2) (undo-tree-id74060 . -2) (undo-tree-id74061 . -2) (undo-tree-id74062 . -2) (undo-tree-id74063 . -2) (undo-tree-id74064 . -2) (undo-tree-id74065 . -2) (undo-tree-id74066 . -2) (undo-tree-id74067 . -2) (undo-tree-id74068 . -2) (undo-tree-id74069 . -2) (undo-tree-id74070 . -2) (undo-tree-id74071 . -2) (undo-tree-id74072 . -2) (undo-tree-id74073 . -2) (undo-tree-id74074 . -2) (undo-tree-id74075 . -2) (undo-tree-id74076 . -2) (undo-tree-id74077 . -2) (undo-tree-id74078 . -2) (undo-tree-id74079 . -25)) nil (25767 17885 547511 351000) 0 nil])
([nil nil ((13577 . 13579)) nil (25767 17885 547486 278000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13579) (undo-tree-id74041 . 1) (undo-tree-id74042 . 1) (undo-tree-id74043 . -1) (undo-tree-id74044 . -1)) nil (25767 17885 547485 380000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13579) (undo-tree-id74037 . 1) (undo-tree-id74038 . 1) (undo-tree-id74039 . -1) (undo-tree-id74040 . -1)) nil (25767 17885 547481 706000) 0 nil])
([nil nil ((#("Then " 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13579) (undo-tree-id74024 . -4) (undo-tree-id74025 . -4) (undo-tree-id74026 . 5) (undo-tree-id74027 . -4) (undo-tree-id74028 . -5) (undo-tree-id74029 . -4) (undo-tree-id74030 . -3) (undo-tree-id74031 . -5) (undo-tree-id74032 . -4) (undo-tree-id74033 . -3) (undo-tree-id74034 . -4) (undo-tree-id74035 . -4) (undo-tree-id74036 . -5) 13583) nil (25767 17885 547477 807000) 0 nil])
([nil nil ((13517 . 13520)) nil (25767 17885 547466 485000) 0 nil])
([nil nil ((13520 . 13521) (#("T" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 13520) (undo-tree-id74020 . 1) (undo-tree-id74021 . -1) (undo-tree-id74022 . -1) (undo-tree-id74023 . -1)) nil (25767 17885 547465 391000) 0 nil])
([nil nil ((13528 . 13529)) nil (25767 17885 547460 748000) 0 nil])
([nil nil ((13625 . 13626) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -13625) (undo-tree-id74019 . -1) 13594) nil (25767 17885 547456 892000) 0 nil])
([nil nil ((13699 . 13700) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -13699) (undo-tree-id76080 . -1) 13688 (t 25767 17885 670671 340000)) nil (25767 17983 958760 169000) 0 nil])
([nil nil ((13581 . 13770) (#("- For example, the text \"Well, I can't<br />\" will
- it uses regular expressions to replace <br /> tags with spaces, and to replace any characters other than letters and quotes with spaces." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 50 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 50 51 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 51 52 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 52 53 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 53 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 95 96 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 138 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 138 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 169 170 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 170 189 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 13581) (undo-tree-id75592 . -168) (undo-tree-id75593 . -53) (undo-tree-id75594 . -53) (undo-tree-id75595 . 136) (undo-tree-id75596 . -53) (undo-tree-id75597 . -53) (undo-tree-id75598 . -53) (undo-tree-id75599 . -53) (undo-tree-id75600 . -53) (undo-tree-id75601 . 96) (undo-tree-id75602 . -95) (undo-tree-id75603 . -95) (undo-tree-id75604 . -189) (undo-tree-id75605 . -95) (undo-tree-id75606 . -95) (undo-tree-id75607 . -95) (undo-tree-id75608 . -95) (undo-tree-id75609 . -95) (undo-tree-id75610 . -95) (undo-tree-id75611 . -95) (undo-tree-id75612 . -95) (undo-tree-id75613 . -95) (undo-tree-id75614 . -95) (undo-tree-id75615 . -95) (undo-tree-id75616 . -95) (undo-tree-id75617 . -95) (undo-tree-id75618 . -95) (undo-tree-id75619 . -95) (undo-tree-id75620 . -95) (undo-tree-id75621 . -95) (undo-tree-id75622 . -95) (undo-tree-id75623 . -95) (undo-tree-id75624 . -95) (undo-tree-id75625 . -95) (undo-tree-id75626 . -95) (undo-tree-id75627 . -95) (undo-tree-id75628 . -95) (undo-tree-id75629 . -95) (undo-tree-id75630 . -95) (undo-tree-id75631 . -95) (undo-tree-id75632 . -95) (undo-tree-id75633 . -95) (undo-tree-id75634 . -95) (undo-tree-id75635 . -95) (undo-tree-id75636 . -95) (undo-tree-id75637 . -95) (undo-tree-id75638 . -95) (undo-tree-id75639 . -95) (undo-tree-id75640 . -95) (undo-tree-id75641 . -95) (undo-tree-id75642 . -95) (undo-tree-id75643 . -95) (undo-tree-id75644 . -95) (undo-tree-id75645 . -95) (undo-tree-id75646 . -95) (undo-tree-id75647 . -95) (undo-tree-id75648 . -95) (undo-tree-id75649 . -96) (undo-tree-id75650 . -96) (undo-tree-id75651 . -96) (undo-tree-id75652 . -96) (undo-tree-id75653 . -96) (undo-tree-id75654 . -96) (undo-tree-id75655 . -96) (undo-tree-id75656 . -96) (undo-tree-id75657 . -96) (undo-tree-id75658 . -96) (undo-tree-id75659 . -96) (undo-tree-id75660 . -99) (undo-tree-id75661 . -99) (undo-tree-id75662 . -99) (undo-tree-id75663 . -99) (undo-tree-id75664 . -99) (undo-tree-id75665 . -99) (undo-tree-id75666 . -99) (undo-tree-id75667 . -99) (undo-tree-id75668 . -99) (undo-tree-id75669 . -99) (undo-tree-id75670 . -99) (undo-tree-id75671 . -104) (undo-tree-id75672 . -104) (undo-tree-id75673 . -104) (undo-tree-id75674 . -104) (undo-tree-id75675 . -104) (undo-tree-id75676 . -104) (undo-tree-id75677 . -104) (undo-tree-id75678 . -104) (undo-tree-id75679 . -104) (undo-tree-id75680 . -104) (undo-tree-id75681 . -104) (undo-tree-id75682 . -109) (undo-tree-id75683 . -109) (undo-tree-id75684 . -109) (undo-tree-id75685 . -109) (undo-tree-id75686 . -109) (undo-tree-id75687 . -109) (undo-tree-id75688 . -109) (undo-tree-id75689 . -109) (undo-tree-id75690 . -109) (undo-tree-id75691 . -109) (undo-tree-id75692 . -109) (undo-tree-id75693 . -115) (undo-tree-id75694 . -115) (undo-tree-id75695 . -115) (undo-tree-id75696 . -115) (undo-tree-id75697 . -115) (undo-tree-id75698 . -115) (undo-tree-id75699 . -115) (undo-tree-id75700 . -115) (undo-tree-id75701 . -115) (undo-tree-id75702 . -115) (undo-tree-id75703 . -115) (undo-tree-id75704 . -115) (undo-tree-id75705 . -115) (undo-tree-id75706 . -115) (undo-tree-id75707 . -115) (undo-tree-id75708 . -115) (undo-tree-id75709 . -115) (undo-tree-id75710 . -115) (undo-tree-id75711 . -115) (undo-tree-id75712 . -115) (undo-tree-id75713 . -115) (undo-tree-id75714 . -117) (undo-tree-id75715 . -117) (undo-tree-id75716 . -117) (undo-tree-id75717 . -117) (undo-tree-id75718 . -117) (undo-tree-id75719 . -117) (undo-tree-id75720 . -117) (undo-tree-id75721 . -117) (undo-tree-id75722 . -117) (undo-tree-id75723 . -117) (undo-tree-id75724 . -117) (undo-tree-id75725 . -117) (undo-tree-id75726 . -117) (undo-tree-id75727 . -117) (undo-tree-id75728 . -117) (undo-tree-id75729 . -117) (undo-tree-id75730 . -121) (undo-tree-id75731 . -121) (undo-tree-id75732 . -121) (undo-tree-id75733 . -121) (undo-tree-id75734 . -121) (undo-tree-id75735 . -121) (undo-tree-id75736 . -121) (undo-tree-id75737 . -121) (undo-tree-id75738 . -121) (undo-tree-id75739 . -121) (undo-tree-id75740 . -121) (undo-tree-id75741 . -121) (undo-tree-id75742 . -121) (undo-tree-id75743 . -121) (undo-tree-id75744 . -121) (undo-tree-id75745 . -121) (undo-tree-id75746 . -121) (undo-tree-id75747 . -121) (undo-tree-id75748 . -121) (undo-tree-id75749 . -121) (undo-tree-id75750 . -121) (undo-tree-id75751 . -121) (undo-tree-id75752 . -121) (undo-tree-id75753 . -121) (undo-tree-id75754 . -121) (undo-tree-id75755 . -121) (undo-tree-id75756 . -121) (undo-tree-id75757 . -121) (undo-tree-id75758 . -121) (undo-tree-id75759 . -121) (undo-tree-id75760 . -121) (undo-tree-id75761 . -124) (undo-tree-id75762 . -124) (undo-tree-id75763 . -124) (undo-tree-id75764 . -124) (undo-tree-id75765 . -124) (undo-tree-id75766 . -124) (undo-tree-id75767 . -124) (undo-tree-id75768 . -124) (undo-tree-id75769 . -124) (undo-tree-id75770 . -124) (undo-tree-id75771 . -124) (undo-tree-id75772 . -132) (undo-tree-id75773 . -132) (undo-tree-id75774 . -132) (undo-tree-id75775 . -132) (undo-tree-id75776 . -132) (undo-tree-id75777 . -132) (undo-tree-id75778 . -132) (undo-tree-id75779 . -132) (undo-tree-id75780 . -132) (undo-tree-id75781 . -132) (undo-tree-id75782 . -132) (undo-tree-id75783 . -136) (undo-tree-id75784 . -136) (undo-tree-id75785 . -136) (undo-tree-id75786 . -136) (undo-tree-id75787 . -136) (undo-tree-id75788 . -136) (undo-tree-id75789 . -136) (undo-tree-id75790 . -136) (undo-tree-id75791 . -136) (undo-tree-id75792 . -136) (undo-tree-id75793 . -136) (undo-tree-id75794 . -147) (undo-tree-id75795 . -147) (undo-tree-id75796 . -147) (undo-tree-id75797 . -147) (undo-tree-id75798 . -147) (undo-tree-id75799 . -147) (undo-tree-id75800 . -147) (undo-tree-id75801 . -147) (undo-tree-id75802 . -147) (undo-tree-id75803 . -147) (undo-tree-id75804 . -147) (undo-tree-id75805 . -147) (undo-tree-id75806 . -147) (undo-tree-id75807 . -147) (undo-tree-id75808 . -147) (undo-tree-id75809 . -147) (undo-tree-id75810 . -147) (undo-tree-id75811 . -147) (undo-tree-id75812 . -147) (undo-tree-id75813 . -147) (undo-tree-id75814 . -147) (undo-tree-id75815 . -153) (undo-tree-id75816 . -153) (undo-tree-id75817 . -153) (undo-tree-id75818 . -153) (undo-tree-id75819 . -153) (undo-tree-id75820 . -153) (undo-tree-id75821 . -153) (undo-tree-id75822 . -153) (undo-tree-id75823 . -153) (undo-tree-id75824 . -153) (undo-tree-id75825 . -153) (undo-tree-id75826 . -153) (undo-tree-id75827 . -153) (undo-tree-id75828 . -153) (undo-tree-id75829 . -153) (undo-tree-id75830 . -153) (undo-tree-id75831 . -153) (undo-tree-id75832 . -153) (undo-tree-id75833 . -153) (undo-tree-id75834 . -153) (undo-tree-id75835 . -153) (undo-tree-id75836 . -158) (undo-tree-id75837 . -158) (undo-tree-id75838 . -158) (undo-tree-id75839 . -158) (undo-tree-id75840 . -158) (undo-tree-id75841 . -158) (undo-tree-id75842 . -158) (undo-tree-id75843 . -158) (undo-tree-id75844 . -158) (undo-tree-id75845 . -158) (undo-tree-id75846 . -158) (undo-tree-id75847 . -158) (undo-tree-id75848 . -158) (undo-tree-id75849 . -158) (undo-tree-id75850 . -158) (undo-tree-id75851 . -158) (undo-tree-id75852 . -158) (undo-tree-id75853 . -158) (undo-tree-id75854 . -158) (undo-tree-id75855 . -158) (undo-tree-id75856 . -158) (undo-tree-id75857 . -158) (undo-tree-id75858 . -158) (undo-tree-id75859 . -158) (undo-tree-id75860 . -158) (undo-tree-id75861 . -158) (undo-tree-id75862 . -169) (undo-tree-id75863 . -169) (undo-tree-id75864 . -169) (undo-tree-id75865 . -169) (undo-tree-id75866 . -169) (undo-tree-id75867 . -169) (undo-tree-id75868 . -169) (undo-tree-id75869 . -169) (undo-tree-id75870 . -169) (undo-tree-id75871 . -169) (undo-tree-id75872 . -169) (undo-tree-id75873 . -169) (undo-tree-id75874 . -169) (undo-tree-id75875 . -169) (undo-tree-id75876 . -169) (undo-tree-id75877 . -169) (undo-tree-id75878 . -169) (undo-tree-id75879 . -169) (undo-tree-id75880 . -169) (undo-tree-id75881 . -169) (undo-tree-id75882 . -169) (undo-tree-id75883 . -169) (undo-tree-id75884 . -170) (undo-tree-id75885 . -170) (undo-tree-id75886 . -170) (undo-tree-id75887 . -170) (undo-tree-id75888 . -170) (undo-tree-id75889 . -170) (undo-tree-id75890 . -170) (undo-tree-id75891 . -170) (undo-tree-id75892 . -170) (undo-tree-id75893 . -170) (undo-tree-id75894 . -170) (undo-tree-id75895 . -177) (undo-tree-id75896 . -177) (undo-tree-id75897 . -177) (undo-tree-id75898 . -177) (undo-tree-id75899 . -177) (undo-tree-id75900 . -177) (undo-tree-id75901 . -177) (undo-tree-id75902 . -177) (undo-tree-id75903 . -177) (undo-tree-id75904 . -177) (undo-tree-id75905 . -177) (undo-tree-id75906 . -182) (undo-tree-id75907 . -182) (undo-tree-id75908 . -182) (undo-tree-id75909 . -182) (undo-tree-id75910 . -182) (undo-tree-id75911 . -182) (undo-tree-id75912 . -182) (undo-tree-id75913 . -182) (undo-tree-id75914 . -182) (undo-tree-id75915 . -182) (undo-tree-id75916 . -182) (undo-tree-id75917 . -188) (undo-tree-id75918 . -188) (undo-tree-id75919 . -188) (undo-tree-id75920 . -188) (undo-tree-id75921 . -188) (undo-tree-id75922 . -188) (undo-tree-id75923 . -188) (undo-tree-id75924 . -188) (undo-tree-id75925 . -188) (undo-tree-id75926 . -188) (undo-tree-id75927 . -188) (undo-tree-id75928 . -188) (undo-tree-id75929 . -188) (undo-tree-id75930 . -188) (undo-tree-id75931 . -188) (undo-tree-id75932 . -188) (undo-tree-id75933 . -188) (undo-tree-id75934 . -188) (undo-tree-id75935 . -188) (undo-tree-id75936 . -188) (undo-tree-id75937 . -188) (undo-tree-id75938 . -189) (undo-tree-id75939 . -189) (undo-tree-id75940 . -189) (undo-tree-id75941 . -189) (undo-tree-id75942 . -189) (undo-tree-id75943 . -189) (undo-tree-id75944 . -189) (undo-tree-id75945 . -189) (undo-tree-id75946 . -189) (undo-tree-id75947 . -189) (undo-tree-id75948 . -189) (undo-tree-id75949 . -189) (undo-tree-id75950 . -189) (undo-tree-id75951 . -189) (undo-tree-id75952 . -189) (undo-tree-id75953 . -189) (undo-tree-id75954 . -189) (undo-tree-id75955 . -189) (undo-tree-id75956 . -189) (undo-tree-id75957 . -189) (undo-tree-id75958 . -189) (undo-tree-id75959 . -189) (undo-tree-id75960 . -189) (undo-tree-id75961 . -189) (undo-tree-id75962 . -189) (undo-tree-id75963 . -189) (undo-tree-id75964 . -189) (undo-tree-id75965 . -189) (undo-tree-id75966 . -189) (undo-tree-id75967 . -189) (undo-tree-id75968 . -189) (undo-tree-id75969 . -189) (undo-tree-id75970 . -189) (undo-tree-id75971 . -189) (undo-tree-id75972 . -189) (undo-tree-id75973 . -189) (undo-tree-id75974 . -189) (undo-tree-id75975 . -189) (undo-tree-id75976 . -189) (undo-tree-id75977 . -189) (undo-tree-id75978 . -189) (undo-tree-id75979 . -189) (undo-tree-id75980 . -189) (undo-tree-id75981 . -189) (undo-tree-id75982 . -189) (undo-tree-id75983 . -189) (undo-tree-id75984 . -189) (undo-tree-id75985 . -189) (undo-tree-id75986 . -189) (undo-tree-id75987 . -189) (undo-tree-id75988 . -189) (undo-tree-id75989 . -189) (undo-tree-id75990 . -189) (undo-tree-id75991 . -189) (undo-tree-id75992 . -189) (undo-tree-id75993 . -189) (undo-tree-id75994 . -189) (undo-tree-id75995 . -189) (undo-tree-id75996 . -189) (undo-tree-id75997 . -189) (undo-tree-id75998 . -189) (undo-tree-id75999 . -189) (undo-tree-id76000 . -189) (undo-tree-id76001 . -189) (undo-tree-id76002 . -189) (undo-tree-id76003 . -189) (undo-tree-id76004 . -189) (undo-tree-id76005 . -189) (undo-tree-id76006 . -189) (undo-tree-id76007 . -189) (undo-tree-id76008 . -51) (13581 . 13632) (#(" For example, the text \"Well, I can't<br />\" will" 0 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13719) (undo-tree-id76009 . -1) (undo-tree-id76010 . -1) (undo-tree-id76011 . -1) (undo-tree-id76012 . -1) (undo-tree-id76013 . -1) (undo-tree-id76014 . -1) (undo-tree-id76015 . -1) (undo-tree-id76016 . -1) (undo-tree-id76017 . -1) (undo-tree-id76018 . -1) (undo-tree-id76019 . -1) (undo-tree-id76020 . -1) (undo-tree-id76021 . -1) (undo-tree-id76022 . -1) (undo-tree-id76023 . -1) (undo-tree-id76024 . -1) (undo-tree-id76025 . -1) (undo-tree-id76026 . -1) (undo-tree-id76027 . -1) (undo-tree-id76028 . -1) (undo-tree-id76029 . -1) (undo-tree-id76030 . -1) (undo-tree-id76031 . -1) (undo-tree-id76032 . -1) (undo-tree-id76033 . -1) (undo-tree-id76034 . -1) (undo-tree-id76035 . -1) (undo-tree-id76036 . -1) (undo-tree-id76037 . -1) (undo-tree-id76038 . -1) (undo-tree-id76039 . -1) (undo-tree-id76040 . -1) (undo-tree-id76041 . -1) (undo-tree-id76042 . -1) (undo-tree-id76043 . -1) (undo-tree-id76044 . -1) (undo-tree-id76045 . -1) (undo-tree-id76046 . -1) (undo-tree-id76047 . -1) (undo-tree-id76048 . -1) (undo-tree-id76049 . -1) (undo-tree-id76050 . -1) (undo-tree-id76051 . -1) (undo-tree-id76052 . -1) (undo-tree-id76053 . -1) (undo-tree-id76054 . -1) (undo-tree-id76055 . -1) (undo-tree-id76056 . -1) (undo-tree-id76057 . -1) (undo-tree-id76058 . -1) (undo-tree-id76059 . -1) (undo-tree-id76060 . -1) (undo-tree-id76061 . -1) (undo-tree-id76062 . -1) (undo-tree-id76063 . -1) (undo-tree-id76064 . -1) (undo-tree-id76065 . -1) (undo-tree-id76066 . -1) (undo-tree-id76067 . -1) (undo-tree-id76068 . -1) (undo-tree-id76069 . -1) (undo-tree-id76070 . -1) (undo-tree-id76071 . -1) (undo-tree-id76072 . -1) (undo-tree-id76073 . -1) (undo-tree-id76074 . -1) (undo-tree-id76075 . -1) (undo-tree-id76076 . -1) (undo-tree-id76077 . -1) (undo-tree-id76078 . -1) (undo-tree-id76079 . -1) 13720) nil (25767 17983 958743 681000) 0 nil])
([nil nil ((13770 . 13771) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -13770) (undo-tree-id75590 . 1) (undo-tree-id75591 . -1) 13721) nil (25767 17983 958449 259000) 0 nil])
([nil nil ((13720 . 13841) (#("- Finally, the preprocess() function splits the
- For example, the text \"Well, I can't<br />\" will become \"Well I can't\"." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 47 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 48 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 49 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 49 50 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 50 98 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 98 99 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 99 121 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 13720) (undo-tree-id75367 . -97) (undo-tree-id75368 . 22) (undo-tree-id75369 . 71) (undo-tree-id75370 . -121) (undo-tree-id75371 . -50) (undo-tree-id75372 . -50) (undo-tree-id75373 . -50) (undo-tree-id75374 . -50) (undo-tree-id75375 . -50) (undo-tree-id75376 . -50) (undo-tree-id75377 . -50) (undo-tree-id75378 . -49) (undo-tree-id75379 . -49) (undo-tree-id75380 . -49) (undo-tree-id75381 . -49) (undo-tree-id75382 . -49) (undo-tree-id75383 . -49) (undo-tree-id75384 . -49) (undo-tree-id75385 . -49) (undo-tree-id75386 . -49) (undo-tree-id75387 . -49) (undo-tree-id75388 . -49) (undo-tree-id75389 . -49) (undo-tree-id75390 . -49) (undo-tree-id75391 . -49) (undo-tree-id75392 . -49) (undo-tree-id75393 . -49) (undo-tree-id75394 . -98) (undo-tree-id75395 . -98) (undo-tree-id75396 . -98) (undo-tree-id75397 . -98) (undo-tree-id75398 . -98) (undo-tree-id75399 . -98) (undo-tree-id75400 . -98) (undo-tree-id75401 . -98) (undo-tree-id75402 . -98) (undo-tree-id75403 . -98) (undo-tree-id75404 . -98) (undo-tree-id75405 . -98) (undo-tree-id75406 . -98) (undo-tree-id75407 . -98) (undo-tree-id75408 . -98) (undo-tree-id75409 . -98) (undo-tree-id75410 . -98) (undo-tree-id75411 . -98) (undo-tree-id75412 . -98) (undo-tree-id75413 . -98) (undo-tree-id75414 . -98) (undo-tree-id75415 . -104) (undo-tree-id75416 . -104) (undo-tree-id75417 . -104) (undo-tree-id75418 . -104) (undo-tree-id75419 . -104) (undo-tree-id75420 . -104) (undo-tree-id75421 . -104) (undo-tree-id75422 . -104) (undo-tree-id75423 . -104) (undo-tree-id75424 . -104) (undo-tree-id75425 . -104) (undo-tree-id75426 . -106) (undo-tree-id75427 . -106) (undo-tree-id75428 . -106) (undo-tree-id75429 . -106) (undo-tree-id75430 . -106) (undo-tree-id75431 . -106) (undo-tree-id75432 . -106) (undo-tree-id75433 . -106) (undo-tree-id75434 . -106) (undo-tree-id75435 . -106) (undo-tree-id75436 . -106) (undo-tree-id75437 . -110) (undo-tree-id75438 . -110) (undo-tree-id75439 . -110) (undo-tree-id75440 . -110) (undo-tree-id75441 . -110) (undo-tree-id75442 . -110) (undo-tree-id75443 . -110) (undo-tree-id75444 . -110) (undo-tree-id75445 . -110) (undo-tree-id75446 . -110) (undo-tree-id75447 . -110) (undo-tree-id75448 . -112) (undo-tree-id75449 . -112) (undo-tree-id75450 . -112) (undo-tree-id75451 . -112) (undo-tree-id75452 . -112) (undo-tree-id75453 . -112) (undo-tree-id75454 . -112) (undo-tree-id75455 . -112) (undo-tree-id75456 . -112) (undo-tree-id75457 . -112) (undo-tree-id75458 . -112) (undo-tree-id75459 . -118) (undo-tree-id75460 . -118) (undo-tree-id75461 . -118) (undo-tree-id75462 . -118) (undo-tree-id75463 . -118) (undo-tree-id75464 . -118) (undo-tree-id75465 . -118) (undo-tree-id75466 . -118) (undo-tree-id75467 . -118) (undo-tree-id75468 . -118) (undo-tree-id75469 . -118) (undo-tree-id75470 . -120) (undo-tree-id75471 . -120) (undo-tree-id75472 . -120) (undo-tree-id75473 . -120) (undo-tree-id75474 . -120) (undo-tree-id75475 . -120) (undo-tree-id75476 . -120) (undo-tree-id75477 . -120) (undo-tree-id75478 . -120) (undo-tree-id75479 . -120) (undo-tree-id75480 . -120) (undo-tree-id75481 . -120) (undo-tree-id75482 . -120) (undo-tree-id75483 . -120) (undo-tree-id75484 . -120) (undo-tree-id75485 . -120) (undo-tree-id75486 . -121) (undo-tree-id75487 . -121) (undo-tree-id75488 . -121) (undo-tree-id75489 . -121) (undo-tree-id75490 . -121) (undo-tree-id75491 . -121) (undo-tree-id75492 . -121) (undo-tree-id75493 . -121) (undo-tree-id75494 . -121) (undo-tree-id75495 . -121) (undo-tree-id75496 . -121) (undo-tree-id75497 . -121) (undo-tree-id75498 . -121) (undo-tree-id75499 . -121) (undo-tree-id75500 . -121) (undo-tree-id75501 . -121) (undo-tree-id75502 . -121) (undo-tree-id75503 . -121) (undo-tree-id75504 . -121) (undo-tree-id75505 . -121) (undo-tree-id75506 . -121) (undo-tree-id75507 . -121) (undo-tree-id75508 . -121) (undo-tree-id75509 . -121) (undo-tree-id75510 . -121) (undo-tree-id75511 . -121) (undo-tree-id75512 . -121) (undo-tree-id75513 . -121) (undo-tree-id75514 . -121) (undo-tree-id75515 . -121) (undo-tree-id75516 . -121) (undo-tree-id75517 . -121) (undo-tree-id75518 . -121) (undo-tree-id75519 . -121) (undo-tree-id75520 . -121) (undo-tree-id75521 . -121) (undo-tree-id75522 . -121) (undo-tree-id75523 . -121) (undo-tree-id75524 . -121) (undo-tree-id75525 . -121) (undo-tree-id75526 . -121) (undo-tree-id75527 . -121) (undo-tree-id75528 . -121) (undo-tree-id75529 . -121) (undo-tree-id75530 . -121) (undo-tree-id75531 . -121) (undo-tree-id75532 . -121) (undo-tree-id75533 . -121) (undo-tree-id75534 . -121) (undo-tree-id75535 . -121) (undo-tree-id75536 . -121) (undo-tree-id75537 . -48) (13720 . 13768) (#(" Finally, the preprocess() function splits the" 0 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13793) (undo-tree-id75538 . -1) (undo-tree-id75539 . -7) (undo-tree-id75540 . -7) (undo-tree-id75541 . -7) (undo-tree-id75542 . -7) (undo-tree-id75543 . -7) (undo-tree-id75544 . -7) (undo-tree-id75545 . -7) (undo-tree-id75546 . -7) (undo-tree-id75547 . -7) (undo-tree-id75548 . -7) (undo-tree-id75549 . -7) (undo-tree-id75550 . -7) (undo-tree-id75551 . -7) (undo-tree-id75552 . -7) (undo-tree-id75553 . -7) (undo-tree-id75554 . -7) (undo-tree-id75555 . -1) (undo-tree-id75556 . -1) (undo-tree-id75557 . -1) (undo-tree-id75558 . -1) (undo-tree-id75559 . -1) (undo-tree-id75560 . -1) (undo-tree-id75561 . -1) (undo-tree-id75562 . -1) (undo-tree-id75563 . -1) (undo-tree-id75564 . -1) (undo-tree-id75565 . -1) (undo-tree-id75566 . -1) (undo-tree-id75567 . -1) (undo-tree-id75568 . -1) (undo-tree-id75569 . -1) (undo-tree-id75570 . -1) (undo-tree-id75571 . -1) (undo-tree-id75572 . -1) (undo-tree-id75573 . -1) (undo-tree-id75574 . -1) (undo-tree-id75575 . -1) (undo-tree-id75576 . -1) (undo-tree-id75577 . -1) (undo-tree-id75578 . -1) (undo-tree-id75579 . -1) (undo-tree-id75580 . -1) (undo-tree-id75581 . -1) (undo-tree-id75582 . -1) (undo-tree-id75583 . -1) (undo-tree-id75584 . -1) (undo-tree-id75585 . -1) (undo-tree-id75586 . -1) (undo-tree-id75587 . -1) (undo-tree-id75588 . -1) (undo-tree-id75589 . -1) 13794) nil (25767 17983 958440 271000) 0 nil])
([nil nil ((13796 . 13797) (#("Finally, t" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 13796) (undo-tree-id75353 . -9) (undo-tree-id75354 . -9) (undo-tree-id75355 . 10) (undo-tree-id75356 . -9) (undo-tree-id75357 . -10) (undo-tree-id75358 . -9) (undo-tree-id75359 . -6) (undo-tree-id75360 . -7) (undo-tree-id75361 . -8) (undo-tree-id75362 . -9) (undo-tree-id75363 . -9) (undo-tree-id75364 . -10) (undo-tree-id75365 . -10) (undo-tree-id75366 . -10) 13805) nil (25767 17983 958257 694000) 0 nil])
([nil nil ((13832 . 13833) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -13832) (undo-tree-id75352 . -1) 13796) nil (25767 17983 958245 408000) 0 nil])
([nil nil ((13907 . 13908) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -13907) (undo-tree-id75351 . -1) 13889) nil (25767 17983 958243 307000) 0 nil])
([nil nil ((13978 . 13980)) nil (25767 17983 958240 722000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -14033) (undo-tree-id75341 . -2) (undo-tree-id75342 . -2) (undo-tree-id75343 . -2) (undo-tree-id75344 . -2) (undo-tree-id75345 . -2) (undo-tree-id75346 . -2) (undo-tree-id75347 . -2) (undo-tree-id75348 . -2) (undo-tree-id75349 . -2) (undo-tree-id75350 . -2) 14035 (14032 . 14035) 13992) nil (25767 17983 958239 288000) 0 nil])
([nil nil ((14034 . 14036)) nil (25767 17983 958229 724000) 0 nil])
([nil nil ((#("Next, we need to " 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14036) (undo-tree-id75232 . -16) (undo-tree-id75233 . -16) (undo-tree-id75234 . 17) (undo-tree-id75235 . -16) (undo-tree-id75236 . -17) (undo-tree-id75237 . -16) (undo-tree-id75238 . -3) (undo-tree-id75239 . -3) (undo-tree-id75240 . -3) (undo-tree-id75241 . -3) (undo-tree-id75242 . -3) (undo-tree-id75243 . -3) (undo-tree-id75244 . -3) (undo-tree-id75245 . -3) (undo-tree-id75246 . -3) (undo-tree-id75247 . -3) (undo-tree-id75248 . -3) (undo-tree-id75249 . -3) (undo-tree-id75250 . -3) (undo-tree-id75251 . -3) (undo-tree-id75252 . -3) (undo-tree-id75253 . -3) (undo-tree-id75254 . -4) (undo-tree-id75255 . -4) (undo-tree-id75256 . -4) (undo-tree-id75257 . -4) (undo-tree-id75258 . -4) (undo-tree-id75259 . -4) (undo-tree-id75260 . -4) (undo-tree-id75261 . -4) (undo-tree-id75262 . -4) (undo-tree-id75263 . -4) (undo-tree-id75264 . -4) (undo-tree-id75265 . -4) (undo-tree-id75266 . -4) (undo-tree-id75267 . -4) (undo-tree-id75268 . -4) (undo-tree-id75269 . -4) (undo-tree-id75270 . -4) (undo-tree-id75271 . -4) (undo-tree-id75272 . -4) (undo-tree-id75273 . -4) (undo-tree-id75274 . -4) (undo-tree-id75275 . -7) (undo-tree-id75276 . -7) (undo-tree-id75277 . -7) (undo-tree-id75278 . -7) (undo-tree-id75279 . -7) (undo-tree-id75280 . -7) (undo-tree-id75281 . -7) (undo-tree-id75282 . -7) (undo-tree-id75283 . -7) (undo-tree-id75284 . -7) (undo-tree-id75285 . -7) (undo-tree-id75286 . -7) (undo-tree-id75287 . -7) (undo-tree-id75288 . -7) (undo-tree-id75289 . -7) (undo-tree-id75290 . -7) (undo-tree-id75291 . -12) (undo-tree-id75292 . -12) (undo-tree-id75293 . -12) (undo-tree-id75294 . -12) (undo-tree-id75295 . -12) (undo-tree-id75296 . -12) (undo-tree-id75297 . -12) (undo-tree-id75298 . -12) (undo-tree-id75299 . -12) (undo-tree-id75300 . -12) (undo-tree-id75301 . -12) (undo-tree-id75302 . -12) (undo-tree-id75303 . -12) (undo-tree-id75304 . -12) (undo-tree-id75305 . -12) (undo-tree-id75306 . -12) (undo-tree-id75307 . -15) (undo-tree-id75308 . -15) (undo-tree-id75309 . -15) (undo-tree-id75310 . -15) (undo-tree-id75311 . -15) (undo-tree-id75312 . -15) (undo-tree-id75313 . -15) (undo-tree-id75314 . -15) (undo-tree-id75315 . -15) (undo-tree-id75316 . -15) (undo-tree-id75317 . -15) (undo-tree-id75318 . -15) (undo-tree-id75319 . -15) (undo-tree-id75320 . -15) (undo-tree-id75321 . -15) (undo-tree-id75322 . -15) (undo-tree-id75323 . -16) (undo-tree-id75324 . -16) (undo-tree-id75325 . -16) (undo-tree-id75326 . -16) (undo-tree-id75327 . -16) (undo-tree-id75328 . -16) (undo-tree-id75329 . -16) (undo-tree-id75330 . -16) (undo-tree-id75331 . -16) (undo-tree-id75332 . -16) (undo-tree-id75333 . -16) (undo-tree-id75334 . -16) (undo-tree-id75335 . -16) (undo-tree-id75336 . -16) (undo-tree-id75337 . -16) (undo-tree-id75338 . -16) (undo-tree-id75339 . -16) (undo-tree-id75340 . -17) 14052) nil (25767 17983 958222 742000) 0 nil])
([nil nil ((14036 . 14037) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14036)) nil (25767 17983 957508 984000) 0 nil])
([nil nil ((14060 . 14061) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14060) (undo-tree-id75229 . -1) (undo-tree-id75230 . -1) (undo-tree-id75231 . -1)) nil (25767 17983 957507 531000) 0 nil])
([nil nil ((14034 . 14096) (#("- This requires going through the

- Construct the vocabulary:" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 33 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 33 34 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 34 35 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 35 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 37 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 14034) (undo-tree-id74954 . -61) (undo-tree-id74955 . -61) (undo-tree-id74956 . -37) (undo-tree-id74957 . -37) (undo-tree-id74958 . 24) (undo-tree-id74959 . -62) (undo-tree-id74960 . -36) (undo-tree-id74961 . -36) (undo-tree-id74962 . -36) (undo-tree-id74963 . -36) (undo-tree-id74964 . -36) (undo-tree-id74965 . -36) (undo-tree-id74966 . -36) (undo-tree-id74967 . -36) (undo-tree-id74968 . -36) (undo-tree-id74969 . -36) (undo-tree-id74970 . -36) (undo-tree-id74971 . -37) (undo-tree-id74972 . -37) (undo-tree-id74973 . -37) (undo-tree-id74974 . -37) (undo-tree-id74975 . -37) (undo-tree-id74976 . -37) (undo-tree-id74977 . -37) (undo-tree-id74978 . -37) (undo-tree-id74979 . -37) (undo-tree-id74980 . -37) (undo-tree-id74981 . -37) (undo-tree-id74982 . -37) (undo-tree-id74983 . -37) (undo-tree-id74984 . -37) (undo-tree-id74985 . -37) (undo-tree-id74986 . -37) (undo-tree-id74987 . -37) (undo-tree-id74988 . -36) (undo-tree-id74989 . -36) (undo-tree-id74990 . -36) (undo-tree-id74991 . -36) (undo-tree-id74992 . -36) (undo-tree-id74993 . -36) (undo-tree-id74994 . -36) (undo-tree-id74995 . -36) (undo-tree-id74996 . -36) (undo-tree-id74997 . -36) (undo-tree-id74998 . -36) (undo-tree-id74999 . -36) (undo-tree-id75000 . -36) (undo-tree-id75001 . -36) (undo-tree-id75002 . -36) (undo-tree-id75003 . -36) (undo-tree-id75004 . -36) (undo-tree-id75005 . -36) (undo-tree-id75006 . -36) (undo-tree-id75007 . -36) (undo-tree-id75008 . -37) (undo-tree-id75009 . -37) (undo-tree-id75010 . -37) (undo-tree-id75011 . -37) (undo-tree-id75012 . -37) (undo-tree-id75013 . -37) (undo-tree-id75014 . -37) (undo-tree-id75015 . -37) (undo-tree-id75016 . -37) (undo-tree-id75017 . -37) (undo-tree-id75018 . -37) (undo-tree-id75019 . -37) (undo-tree-id75020 . -37) (undo-tree-id75021 . -37) (undo-tree-id75022 . -37) (undo-tree-id75023 . -37) (undo-tree-id75024 . -37) (undo-tree-id75025 . -37) (undo-tree-id75026 . -37) (undo-tree-id75027 . -37) (undo-tree-id75028 . -37) (undo-tree-id75029 . -37) (undo-tree-id75030 . -37) (undo-tree-id75031 . -37) (undo-tree-id75032 . -37) (undo-tree-id75033 . -37) (undo-tree-id75034 . -37) (undo-tree-id75035 . -37) (undo-tree-id75036 . -37) (undo-tree-id75037 . -37) (undo-tree-id75038 . -37) (undo-tree-id75039 . -37) (undo-tree-id75040 . -37) (undo-tree-id75041 . -37) (undo-tree-id75042 . -37) (undo-tree-id75043 . -37) (undo-tree-id75044 . -37) (undo-tree-id75045 . -37) (undo-tree-id75046 . -37) (undo-tree-id75047 . -37) (undo-tree-id75048 . -37) (undo-tree-id75049 . -37) (undo-tree-id75050 . -37) (undo-tree-id75051 . -37) (undo-tree-id75052 . -37) (undo-tree-id75053 . -37) (undo-tree-id75054 . -37) (undo-tree-id75055 . -37) (undo-tree-id75056 . -37) (undo-tree-id75057 . -37) (undo-tree-id75058 . -37) (undo-tree-id75059 . -37) (undo-tree-id75060 . -37) (undo-tree-id75061 . -37) (undo-tree-id75062 . -37) (undo-tree-id75063 . -37) (undo-tree-id75064 . -37) (undo-tree-id75065 . -37) (undo-tree-id75066 . -37) (undo-tree-id75067 . -37) (undo-tree-id75068 . -37) (undo-tree-id75069 . -37) (undo-tree-id75070 . -37) (undo-tree-id75071 . -37) (undo-tree-id75072 . -37) (undo-tree-id75073 . -37) (undo-tree-id75074 . -37) (undo-tree-id75075 . -37) (undo-tree-id75076 . -37) (undo-tree-id75077 . -37) (undo-tree-id75078 . -37) (undo-tree-id75079 . -37) (undo-tree-id75080 . -37) (undo-tree-id75081 . -37) (undo-tree-id75082 . -37) (undo-tree-id75083 . -37) (undo-tree-id75084 . -37) (undo-tree-id75085 . -37) (undo-tree-id75086 . -37) (undo-tree-id75087 . -37) (undo-tree-id75088 . -37) (undo-tree-id75089 . -37) (undo-tree-id75090 . -37) (undo-tree-id75091 . -37) (undo-tree-id75092 . -37) (undo-tree-id75093 . -37) (undo-tree-id75094 . -37) (undo-tree-id75095 . -37) (undo-tree-id75096 . -37) (undo-tree-id75097 . -37) (undo-tree-id75098 . -37) (undo-tree-id75099 . -37) (undo-tree-id75100 . -37) (undo-tree-id75101 . -37) (undo-tree-id75102 . -37) (undo-tree-id75103 . -37) (undo-tree-id75104 . -37) (undo-tree-id75105 . -37) (undo-tree-id75106 . -37) (undo-tree-id75107 . -37) (undo-tree-id75108 . -37) (undo-tree-id75109 . -37) (undo-tree-id75110 . -37) (undo-tree-id75111 . -37) (undo-tree-id75112 . -37) (undo-tree-id75113 . -37) (undo-tree-id75114 . -37) (undo-tree-id75115 . -37) (undo-tree-id75116 . -37) (undo-tree-id75117 . -37) (undo-tree-id75118 . -37) (undo-tree-id75119 . -37) (undo-tree-id75120 . -37) (undo-tree-id75121 . -37) (undo-tree-id75122 . -37) (undo-tree-id75123 . -37) (undo-tree-id75124 . -37) (undo-tree-id75125 . -37) (undo-tree-id75126 . -37) (undo-tree-id75127 . -37) (undo-tree-id75128 . -37) (undo-tree-id75129 . -37) (undo-tree-id75130 . -37) (undo-tree-id75131 . -37) (undo-tree-id75132 . -37) (undo-tree-id75133 . -37) (undo-tree-id75134 . -37) (undo-tree-id75135 . -37) (undo-tree-id75136 . -37) (undo-tree-id75137 . -37) (undo-tree-id75138 . -37) (undo-tree-id75139 . -37) (undo-tree-id75140 . -37) (undo-tree-id75141 . -37) (undo-tree-id75142 . -37) (undo-tree-id75143 . -37) (undo-tree-id75144 . -37) (undo-tree-id75145 . -37) (undo-tree-id75146 . -37) (undo-tree-id75147 . -37) (undo-tree-id75148 . -37) (undo-tree-id75149 . -37) (undo-tree-id75150 . -37) (undo-tree-id75151 . -37) (undo-tree-id75152 . -37) (undo-tree-id75153 . -37) (undo-tree-id75154 . -37) (undo-tree-id75155 . -37) (undo-tree-id75156 . -37) (undo-tree-id75157 . -37) (undo-tree-id75158 . -37) (undo-tree-id75159 . -37) (undo-tree-id75160 . -37) (undo-tree-id75161 . -37) (undo-tree-id75162 . -37) (undo-tree-id75163 . -37) (undo-tree-id75164 . -37) (undo-tree-id75165 . -37) (undo-tree-id75166 . -37) (undo-tree-id75167 . -37) (undo-tree-id75168 . -37) (undo-tree-id75169 . -37) (undo-tree-id75170 . -37) (undo-tree-id75171 . -37) (undo-tree-id75172 . -45) (undo-tree-id75173 . -49) (undo-tree-id75174 . -60) (undo-tree-id75175 . -61) (undo-tree-id75176 . -61) (undo-tree-id75177 . -61) (undo-tree-id75178 . -61) (undo-tree-id75179 . -61) (undo-tree-id75180 . -61) (undo-tree-id75181 . -61) (undo-tree-id75182 . -61) (undo-tree-id75183 . -61) (undo-tree-id75184 . -62) (undo-tree-id75185 . -62) (undo-tree-id75186 . -62) (undo-tree-id75187 . -62) (undo-tree-id75188 . -62) (undo-tree-id75189 . -62) (undo-tree-id75190 . -62) (undo-tree-id75191 . -61) (undo-tree-id75192 . -61) (undo-tree-id75193 . -61) (undo-tree-id75194 . -61) (undo-tree-id75195 . -61) (undo-tree-id75196 . -61) (undo-tree-id75197 . -61) (undo-tree-id75198 . -61) (undo-tree-id75199 . -61) (undo-tree-id75200 . -61) (undo-tree-id75201 . -61) (undo-tree-id75202 . -61) (undo-tree-id75203 . -61) (undo-tree-id75204 . -61) (undo-tree-id75205 . -61) (undo-tree-id75206 . -62) (undo-tree-id75207 . -62) (undo-tree-id75208 . -62) (undo-tree-id75209 . -62) (undo-tree-id75210 . -62) (undo-tree-id75211 . -62) (undo-tree-id75212 . -62) (undo-tree-id75213 . -62) (undo-tree-id75214 . -62) (undo-tree-id75215 . -62) (undo-tree-id75216 . -35) (14034 . 14069) (#(" This requires going through the" 0 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14061) (undo-tree-id75217 . 32) (undo-tree-id75218 . -1) (undo-tree-id75219 . -1) (undo-tree-id75220 . -1) (undo-tree-id75221 . -1) (undo-tree-id75222 . -1) (undo-tree-id75223 . -1) (undo-tree-id75224 . -1) (undo-tree-id75225 . -1) (undo-tree-id75226 . -1) (undo-tree-id75227 . -1) (undo-tree-id75228 . -1) 14062) nil (25767 17983 957488 577000) 0 nil])
([nil nil ((14096 . 14097) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -14096) (undo-tree-id74952 . 1) (undo-tree-id74953 . -1) 14065) nil (25767 17983 956088 755000) 0 nil])
([nil nil ((14169 . 14170) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -14169) (undo-tree-id76081 . -1) 14122 (t 25767 17984 33541 53000)) nil (25767 17987 502187 588000) 0 nil])
([nil nil ((14225 . 14226) (#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14225) (undo-tree-id76208 . -1) (undo-tree-id76209 . -1) (undo-tree-id76210 . -1) (t 25767 17987 573641 434000)) nil (25767 18016 675353 357000) 0 nil])
([nil nil ((#("from collections import Counter
vocabulary = Counter()
for X_batch, y_batch in datasets[\"train\"].batch(32).map(preprocess):
for review in X_batch:
vocabulary.update(list(review.numpy()))
Let’s look at the three most common words:
>>> vocabulary.most_common()[:3]
[(b'<pad>', 215797), (b'the', 61137), (b'a', 38564)]
" 0 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 32 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 55 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 61 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 66 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 69 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 70 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 75 124 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 124 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 139 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 140 145 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 145 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 147 187 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 187 230 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 230 249 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 249 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 250 256 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 256 263 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 263 316 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14227) (undo-tree-id76082 . -315) (undo-tree-id76083 . -263) (undo-tree-id76084 . 14) (undo-tree-id76085 . -305) (undo-tree-id76086 . -263) (undo-tree-id76087 . -316) (undo-tree-id76088 . -263) (undo-tree-id76089 . -32) (undo-tree-id76090 . -32) (undo-tree-id76091 . -32) (undo-tree-id76092 . -32) (undo-tree-id76093 . -32) (undo-tree-id76094 . -32) (undo-tree-id76095 . -55) (undo-tree-id76096 . -55) (undo-tree-id76097 . -55) (undo-tree-id76098 . -55) (undo-tree-id76099 . -55) (undo-tree-id76100 . -55) (undo-tree-id76101 . -124) (undo-tree-id76102 . -124) (undo-tree-id76103 . -124) (undo-tree-id76104 . -124) (undo-tree-id76105 . -124) (undo-tree-id76106 . -124) (undo-tree-id76107 . -147) (undo-tree-id76108 . -147) (undo-tree-id76109 . -147) (undo-tree-id76110 . -147) (undo-tree-id76111 . -147) (undo-tree-id76112 . -147) (undo-tree-id76113 . -187) (undo-tree-id76114 . -187) (undo-tree-id76115 . -187) (undo-tree-id76116 . -187) (undo-tree-id76117 . -187) (undo-tree-id76118 . -187) (undo-tree-id76119 . -230) (undo-tree-id76120 . -230) (undo-tree-id76121 . -230) (undo-tree-id76122 . -230) (undo-tree-id76123 . -230) (undo-tree-id76124 . -230) (undo-tree-id76125 . -230) (undo-tree-id76126 . -230) (undo-tree-id76127 . -230) (undo-tree-id76128 . -230) (undo-tree-id76129 . -230) (undo-tree-id76130 . -263) (undo-tree-id76131 . -263) (undo-tree-id76132 . -263) (undo-tree-id76133 . -263) (undo-tree-id76134 . -263) (undo-tree-id76135 . -263) (undo-tree-id76136 . -263) (undo-tree-id76137 . -263) (undo-tree-id76138 . -263) (undo-tree-id76139 . -263) (undo-tree-id76140 . -263) (undo-tree-id76141 . -316) (undo-tree-id76142 . -316) (undo-tree-id76143 . -316) (undo-tree-id76144 . -316) (undo-tree-id76145 . -316) (undo-tree-id76146 . -316) (undo-tree-id76147 . -316) (undo-tree-id76148 . -316) (undo-tree-id76149 . -316) (undo-tree-id76150 . -316) (undo-tree-id76151 . -316) (undo-tree-id76152 . -316) (undo-tree-id76153 . -316) (undo-tree-id76154 . -316) (undo-tree-id76155 . -316) (undo-tree-id76156 . -316) (undo-tree-id76157 . -316) (undo-tree-id76158 . -316) (undo-tree-id76159 . -316) (undo-tree-id76160 . -316) (undo-tree-id76161 . -316) (undo-tree-id76162 . -316) (undo-tree-id76163 . -316) (undo-tree-id76164 . -316) (undo-tree-id76165 . -316) (undo-tree-id76166 . -316) (undo-tree-id76167 . -316) (undo-tree-id76168 . -316) (undo-tree-id76169 . -263) (undo-tree-id76170 . -263) (undo-tree-id76171 . -263) (undo-tree-id76172 . -263) (undo-tree-id76173 . -263) (undo-tree-id76174 . 53) (undo-tree-id76175 . -264) (undo-tree-id76176 . -263) (undo-tree-id76177 . -263) (undo-tree-id76178 . -263) (undo-tree-id76179 . -263) (undo-tree-id76180 . -263) (undo-tree-id76181 . -263) (undo-tree-id76182 . -230) (undo-tree-id76183 . -230) (undo-tree-id76184 . -230) (undo-tree-id76185 . -230) (undo-tree-id76186 . -230) (undo-tree-id76187 . -230) (undo-tree-id76188 . -230) (undo-tree-id76189 . -230) (undo-tree-id76190 . -230) (undo-tree-id76191 . -230) (undo-tree-id76192 . -230) (undo-tree-id76193 . -263) (undo-tree-id76194 . -263) (undo-tree-id76195 . -263) (undo-tree-id76196 . -263) (undo-tree-id76197 . -263) (undo-tree-id76198 . 2) (undo-tree-id76199 . -315) (undo-tree-id76200 . -263) (undo-tree-id76201 . -263) (undo-tree-id76202 . -263) (undo-tree-id76203 . -263) (undo-tree-id76204 . -263) (undo-tree-id76205 . -263) (undo-tree-id76206 . -263) (undo-tree-id76207 . -316) 14490) nil (25767 18016 675312 107000) 0 nil])
([nil nil ((13507 . 13508) (13502 . 13507) 13441) nil (25767 18016 675075 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13508 . 13509) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -13824) (13508 . 13825)) nil (25767 18016 675069 560000) 0 nil])
([nil nil ((13633 . 13637) (t 25767 18016 802463 176000)) nil (25767 18045 453602 774000) 0 nil])
([nil nil ((13660 . 13668)) nil (25767 18045 453601 767000) 0 nil])
([nil nil ((13708 . 13709)) nil (25767 18045 453600 701000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 13752) (undo-tree-id76211 . -3) (undo-tree-id76212 . 4) (undo-tree-id76213 . -1) (undo-tree-id76214 . -4)) nil (25767 18045 453598 313000) 0 nil])
([nil nil ((13781 . 13782)) nil (25767 18045 453582 510000) 0 nil])
([nil nil ((#("Great! We probably don’t need our model to know all the words in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14559) (undo-tree-id76266 . -68) (undo-tree-id76267 . -69) (undo-tree-id76268 . -69) (undo-tree-id76269 . -69) (undo-tree-id76270 . -69) (undo-tree-id76271 . -69) (undo-tree-id76272 . -69) (undo-tree-id76273 . -69) (undo-tree-id76274 . -69) (undo-tree-id76275 . -69) (undo-tree-id76276 . -69) (undo-tree-id76277 . -69) (undo-tree-id76278 . -69) (undo-tree-id76279 . -69) (undo-tree-id76280 . -69) (undo-tree-id76281 . -69) (undo-tree-id76282 . -69) (undo-tree-id76283 . -69) (undo-tree-id76284 . -69) (undo-tree-id76285 . -69) (undo-tree-id76286 . -69) (undo-tree-id76287 . -69) (undo-tree-id76288 . -69) (undo-tree-id76289 . -65) (undo-tree-id76290 . -65) (undo-tree-id76291 . -65) (undo-tree-id76292 . -65) (undo-tree-id76293 . -65) (undo-tree-id76294 . -65) (undo-tree-id76295 . -65) (undo-tree-id76296 . -65) (undo-tree-id76297 . -65) (undo-tree-id76298 . -65) (undo-tree-id76299 . -65) (undo-tree-id76300 . -69) (t 25767 18045 579260 388000)) nil (25767 18099 622159 610000) 0 nil])
([nil nil ((#("dictionary to get good performance" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14559) (undo-tree-id76263 . -33) (undo-tree-id76264 . 33) (undo-tree-id76265 . -34)) nil (25767 18099 620173 240000) 0 nil])
([nil nil ((14560 . 14562) (14559 . 14560) (#(", though, so let’s " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14559) (undo-tree-id76242 . -18) (undo-tree-id76243 . -18) (undo-tree-id76244 . -18) (undo-tree-id76245 . -19) (undo-tree-id76246 . -18) (undo-tree-id76247 . -7) (undo-tree-id76248 . -7) (undo-tree-id76249 . -7) (undo-tree-id76250 . -7) (undo-tree-id76251 . -7) (undo-tree-id76252 . -7) (undo-tree-id76253 . -8) (undo-tree-id76254 . -11) (undo-tree-id76255 . -15) (undo-tree-id76256 . -16) (undo-tree-id76257 . -17) (undo-tree-id76258 . -18) (undo-tree-id76259 . -18) (undo-tree-id76260 . -19) (undo-tree-id76261 . -19) (undo-tree-id76262 . -19) 14577) nil (25767 18099 620169 508000) 0 nil])
([nil nil ((14574 . 14575) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -14574) (undo-tree-id76241 . -1) 14561) nil (25767 18099 620152 450000) 0 nil])
([nil nil ((#("vocab_size = 10000
truncated_vocabulary = [
word for word, count in vocabulary.most_common()[:vocab_size]]

" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 6 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 10 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 28 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 29 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 39 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 83 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 84 90 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 90 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 99 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 100 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 104 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 105 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 106 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 107 108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 14630) (undo-tree-id76215 . -107) (undo-tree-id76216 . -107) (undo-tree-id76217 . -106) (undo-tree-id76218 . -107) (undo-tree-id76219 . -108) (undo-tree-id76220 . -107) (undo-tree-id76221 . -19) (undo-tree-id76222 . -19) (undo-tree-id76223 . -19) (undo-tree-id76224 . -19) (undo-tree-id76225 . -19) (undo-tree-id76226 . -19) (undo-tree-id76227 . -44) (undo-tree-id76228 . -44) (undo-tree-id76229 . -44) (undo-tree-id76230 . -44) (undo-tree-id76231 . -44) (undo-tree-id76232 . -44) (undo-tree-id76233 . -107) (undo-tree-id76234 . -107) (undo-tree-id76235 . -107) (undo-tree-id76236 . -107) (undo-tree-id76237 . -107) (undo-tree-id76238 . -107) (undo-tree-id76239 . -107) (undo-tree-id76240 . -108) 14737) nil (25767 18099 620149 517000) 0 nil])
([nil nil ((13835 . 13837) (13834 . 13835) 13781) nil (25767 18099 620123 998000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13836 . 13837) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -13944) (13836 . 13945)) nil (25767 18099 620117 941000) 0 nil])
([nil nil ((13942 . 13943) (t 25767 18099 752731 562000)) nil (25767 18110 217072 707000) 0 nil])
([nil nil ((14743 . 14745) (#("Now we need to " 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14743) (undo-tree-id76926 . -14) (undo-tree-id76927 . -14) (undo-tree-id76928 . -14) (undo-tree-id76929 . -15) (undo-tree-id76930 . -14) (undo-tree-id76931 . -2) (undo-tree-id76932 . -2) (undo-tree-id76933 . -2) (undo-tree-id76934 . -2) (undo-tree-id76935 . -2) (undo-tree-id76936 . -2) (undo-tree-id76937 . -2) (undo-tree-id76938 . -2) (undo-tree-id76939 . -2) (undo-tree-id76940 . -2) (undo-tree-id76941 . -2) (undo-tree-id76942 . -2) (undo-tree-id76943 . -2) (undo-tree-id76944 . -2) (undo-tree-id76945 . -2) (undo-tree-id76946 . -2) (undo-tree-id76947 . -5) (undo-tree-id76948 . -5) (undo-tree-id76949 . -5) (undo-tree-id76950 . -5) (undo-tree-id76951 . -5) (undo-tree-id76952 . -5) (undo-tree-id76953 . -5) (undo-tree-id76954 . -5) (undo-tree-id76955 . -5) (undo-tree-id76956 . -5) (undo-tree-id76957 . -5) (undo-tree-id76958 . -5) (undo-tree-id76959 . -5) (undo-tree-id76960 . -5) (undo-tree-id76961 . -5) (undo-tree-id76962 . -5) (undo-tree-id76963 . -5) (undo-tree-id76964 . -5) (undo-tree-id76965 . -5) (undo-tree-id76966 . -5) (undo-tree-id76967 . -5) (undo-tree-id76968 . -10) (undo-tree-id76969 . -10) (undo-tree-id76970 . -10) (undo-tree-id76971 . -10) (undo-tree-id76972 . -10) (undo-tree-id76973 . -10) (undo-tree-id76974 . -10) (undo-tree-id76975 . -10) (undo-tree-id76976 . -10) (undo-tree-id76977 . -10) (undo-tree-id76978 . -10) (undo-tree-id76979 . -10) (undo-tree-id76980 . -10) (undo-tree-id76981 . -10) (undo-tree-id76982 . -10) (undo-tree-id76983 . -10) (undo-tree-id76984 . -13) (undo-tree-id76985 . -13) (undo-tree-id76986 . -13) (undo-tree-id76987 . -13) (undo-tree-id76988 . -13) (undo-tree-id76989 . -13) (undo-tree-id76990 . -13) (undo-tree-id76991 . -13) (undo-tree-id76992 . -13) (undo-tree-id76993 . -13) (undo-tree-id76994 . -13) (undo-tree-id76995 . -13) (undo-tree-id76996 . -13) (undo-tree-id76997 . -13) (undo-tree-id76998 . -13) (undo-tree-id76999 . -13) (undo-tree-id77000 . -13) (undo-tree-id77001 . -13) (undo-tree-id77002 . -13) (undo-tree-id77003 . -13) (undo-tree-id77004 . -13) (undo-tree-id77005 . -13) (undo-tree-id77006 . -13) (undo-tree-id77007 . -13) (undo-tree-id77008 . -13) (undo-tree-id77009 . -13) (undo-tree-id77010 . -14) (undo-tree-id77011 . -14) (undo-tree-id77012 . -14) (undo-tree-id77013 . -14) (undo-tree-id77014 . -14) (undo-tree-id77015 . -14) (undo-tree-id77016 . -14) (undo-tree-id77017 . -14) (undo-tree-id77018 . -14) (undo-tree-id77019 . -14) (undo-tree-id77020 . -14) (undo-tree-id77021 . -14) (undo-tree-id77022 . -14) (undo-tree-id77023 . -14) (undo-tree-id77024 . -14) (undo-tree-id77025 . -14) (undo-tree-id77026 . -14) (undo-tree-id77027 . -15) (undo-tree-id77028 . -15) (undo-tree-id77029 . -15) 14757 (t 25767 18110 305013 896000)) nil (25767 18198 879506 174000) 0 nil])
([nil nil ((#("(i.e., its in" 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14803) (undo-tree-id76922 . -12) (undo-tree-id76923 . 13) (undo-tree-id76924 . -1) (undo-tree-id76925 . -13)) nil (25767 18198 879432 635000) 0 nil])
([nil nil ((#("dex in the vocabulary)." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14803) (undo-tree-id76877 . -22) (undo-tree-id76878 . -11) (undo-tree-id76879 . -21) (undo-tree-id76880 . -11) (undo-tree-id76881 . -11) (undo-tree-id76882 . -11) (undo-tree-id76883 . -11) (undo-tree-id76884 . -11) (undo-tree-id76885 . -11) (undo-tree-id76886 . -11) (undo-tree-id76887 . -11) (undo-tree-id76888 . -11) (undo-tree-id76889 . -11) (undo-tree-id76890 . -11) (undo-tree-id76891 . -11) (undo-tree-id76892 . -11) (undo-tree-id76893 . -11) (undo-tree-id76894 . -11) (undo-tree-id76895 . -11) (undo-tree-id76896 . -11) (undo-tree-id76897 . -11) (undo-tree-id76898 . -11) (undo-tree-id76899 . -11) (undo-tree-id76900 . -11) (undo-tree-id76901 . -11) (undo-tree-id76902 . -11) (undo-tree-id76903 . -11) (undo-tree-id76904 . -11) (undo-tree-id76905 . -11) (undo-tree-id76906 . -11) (undo-tree-id76907 . -11) (undo-tree-id76908 . -11) (undo-tree-id76909 . -11) (undo-tree-id76910 . -11) (undo-tree-id76911 . -11) (undo-tree-id76912 . -11) (undo-tree-id76913 . -11) (undo-tree-id76914 . -11) (undo-tree-id76915 . -11) (undo-tree-id76916 . -11) (undo-tree-id76917 . -7) (undo-tree-id76918 . -4) (undo-tree-id76919 . 23) (undo-tree-id76920 . -3) (undo-tree-id76921 . -23)) nil (25767 18198 879427 391000) 0 nil])
([nil nil ((14803 . 14804)) nil (25767 18198 879395 874000) 0 nil])
([nil nil ((#("Just like we did in Chapter 13, we will" 0 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14805) (undo-tree-id76854 . -38) (undo-tree-id76855 . -38) (undo-tree-id76856 . -38) (undo-tree-id76857 . -28) (undo-tree-id76858 . -28) (undo-tree-id76859 . -28) (undo-tree-id76860 . -28) (undo-tree-id76861 . -28) (undo-tree-id76862 . -28) (undo-tree-id76863 . -39) (undo-tree-id76864 . -38) (undo-tree-id76865 . -3) (undo-tree-id76866 . -8) (undo-tree-id76867 . -11) (undo-tree-id76868 . -15) (undo-tree-id76869 . -18) (undo-tree-id76870 . -26) (undo-tree-id76871 . -29) (undo-tree-id76872 . -30) (undo-tree-id76873 . -33) (undo-tree-id76874 . -38) (undo-tree-id76875 . -38) (undo-tree-id76876 . -39) 14843) nil (25767 18198 879393 999000) 0 nil])
([nil nil ((14804 . 14805) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 14804) (undo-tree-id76807 . -1) (undo-tree-id76808 . -1) (undo-tree-id76809 . -1) (undo-tree-id76810 . -1) (undo-tree-id76811 . 1) (undo-tree-id76812 . -1) (undo-tree-id76813 . -1) (undo-tree-id76814 . -1) (undo-tree-id76815 . -1) (undo-tree-id76816 . -1) (undo-tree-id76817 . -1) (undo-tree-id76818 . -1) (undo-tree-id76819 . -1) (undo-tree-id76820 . -1) (undo-tree-id76821 . -1) (undo-tree-id76822 . -1) (undo-tree-id76823 . -1) (undo-tree-id76824 . -1) (undo-tree-id76825 . -1) (undo-tree-id76826 . -1) (undo-tree-id76827 . -1) (undo-tree-id76828 . -1) (undo-tree-id76829 . -1) (undo-tree-id76830 . -1) (undo-tree-id76831 . -1) (undo-tree-id76832 . -1) (undo-tree-id76833 . -1) (undo-tree-id76834 . -1) (undo-tree-id76835 . -1) (undo-tree-id76836 . -1) (undo-tree-id76837 . -1) (undo-tree-id76838 . -1) (undo-tree-id76839 . -1) (undo-tree-id76840 . -1) (undo-tree-id76841 . -1) (undo-tree-id76842 . -1) (undo-tree-id76843 . -1) (undo-tree-id76844 . -1) (undo-tree-id76845 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -14805) (undo-tree-id76846 . 1) (undo-tree-id76847 . -1) (undo-tree-id76848 . -1) (undo-tree-id76849 . -1) (undo-tree-id76850 . -1) (undo-tree-id76851 . -1) (undo-tree-id76852 . -1) (undo-tree-id76853 . -1) 14804) nil (25767 18198 879375 280000) 0 nil])
([nil nil ((14805 . 14806) (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14805)) nil (25767 18198 879341 51000) 0 nil])
([nil nil ((14745 . 14746) (#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 14745)) nil (25767 18198 879339 946000) 0 nil])
([nil nil ((14872 . 14873) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -14872) (undo-tree-id76800 . -1) (undo-tree-id76801 . -1) (undo-tree-id76802 . -1) (undo-tree-id76803 . -1) (undo-tree-id76804 . -1) (undo-tree-id76805 . -1) (undo-tree-id76806 . -1) 14843) nil (25767 18198 879338 531000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -14882) (undo-tree-id76790 . -2) (undo-tree-id76791 . -2) (undo-tree-id76792 . -2) (undo-tree-id76793 . -2) (undo-tree-id76794 . -2) (undo-tree-id76795 . -2) (undo-tree-id76796 . -2) (undo-tree-id76797 . -2) (undo-tree-id76798 . -2) (undo-tree-id76799 . -2) 14884 (14881 . 14884) 14872) nil (25767 18198 879330 859000) 0 nil])
([nil nil ((#("words = tf.constant(truncated_vocabulary)
word_ids = tf.range(len(truncated_vocabulary), dtype=tf.int64)
vocab_init = tf.lookup.KeyValueTensorInitializer(words, word_ids)
num_oov_buckets = 1000
table = tf.lookup.StaticVocabularyTable(vocab_init, num_oov_buckets)
We can then use this table to look up the IDs of a few words:
>>> table.lookup(tf.constant([b\"This movie was faaaaaantastic\".split()]))
<tf.Tensor: [...], dtype=int64, numpy=array([[
22,
12,
11,
10054]])>
" 0 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 30 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 40 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 47 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 50 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 76 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 86 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 105 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 110 111 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 111 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 115 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 165 166 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 166 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 169 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 171 174 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 174 175 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 175 178 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 178 179 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 179 186 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 186 194 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 194 239 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 239 240 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 240 244 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 244 249 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 249 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 250 253 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 253 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 254 261 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 261 263 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 263 273 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 273 325 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 325 399 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 399 443 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 443 444 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 444 445 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 445 446 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 446 450 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 450 454 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 454 458 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 458 462 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 462 463 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 463 464 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 464 465 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  22, 12, 11, 10054" htmlize-link (:uri " 22, 12, 11, 10054") font-lock-multiline t) 465 468 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 14883) (undo-tree-id76641 . -467) (undo-tree-id76642 . -458) (undo-tree-id76643 . -458) (undo-tree-id76644 . -263) (undo-tree-id76645 . -263) (undo-tree-id76646 . -263) (undo-tree-id76647 . -263) (undo-tree-id76648 . -263) (undo-tree-id76649 . -263) (undo-tree-id76650 . -263) (undo-tree-id76651 . -263) (undo-tree-id76652 . -263) (undo-tree-id76653 . -263) (undo-tree-id76654 . -263) (undo-tree-id76655 . -263) (undo-tree-id76656 . -263) (undo-tree-id76657 . -263) (undo-tree-id76658 . -194) (undo-tree-id76659 . -194) (undo-tree-id76660 . -194) (undo-tree-id76661 . -194) (undo-tree-id76662 . -194) (undo-tree-id76663 . -194) (undo-tree-id76664 . -171) (undo-tree-id76665 . -171) (undo-tree-id76666 . -171) (undo-tree-id76667 . -171) (undo-tree-id76668 . -171) (undo-tree-id76669 . -171) (undo-tree-id76670 . -105) (undo-tree-id76671 . -105) (undo-tree-id76672 . -105) (undo-tree-id76673 . -105) (undo-tree-id76674 . -105) (undo-tree-id76675 . -105) (undo-tree-id76676 . -42) (undo-tree-id76677 . -42) (undo-tree-id76678 . -42) (undo-tree-id76679 . -42) (undo-tree-id76680 . -42) (undo-tree-id76681 . -42) (undo-tree-id76682 . -468) (undo-tree-id76683 . -458) (undo-tree-id76684 . -42) (undo-tree-id76685 . -42) (undo-tree-id76686 . -42) (undo-tree-id76687 . -42) (undo-tree-id76688 . -42) (undo-tree-id76689 . -42) (undo-tree-id76690 . -105) (undo-tree-id76691 . -105) (undo-tree-id76692 . -105) (undo-tree-id76693 . -105) (undo-tree-id76694 . -105) (undo-tree-id76695 . -105) (undo-tree-id76696 . -171) (undo-tree-id76697 . -171) (undo-tree-id76698 . -171) (undo-tree-id76699 . -171) (undo-tree-id76700 . -171) (undo-tree-id76701 . -171) (undo-tree-id76702 . -194) (undo-tree-id76703 . -194) (undo-tree-id76704 . -194) (undo-tree-id76705 . -194) (undo-tree-id76706 . -194) (undo-tree-id76707 . -194) (undo-tree-id76708 . -263) (undo-tree-id76709 . -263) (undo-tree-id76710 . -263) (undo-tree-id76711 . -263) (undo-tree-id76712 . -263) (undo-tree-id76713 . -263) (undo-tree-id76714 . -325) (undo-tree-id76715 . -325) (undo-tree-id76716 . -325) (undo-tree-id76717 . -325) (undo-tree-id76718 . -325) (undo-tree-id76719 . -325) (undo-tree-id76720 . -325) (undo-tree-id76721 . -325) (undo-tree-id76722 . -325) (undo-tree-id76723 . -325) (undo-tree-id76724 . -325) (undo-tree-id76725 . -325) (undo-tree-id76726 . -325) (undo-tree-id76727 . -325) (undo-tree-id76728 . -325) (undo-tree-id76729 . -325) (undo-tree-id76730 . 96) (undo-tree-id76731 . -386) (undo-tree-id76732 . -372) (undo-tree-id76733 . -372) (undo-tree-id76734 . -372) (undo-tree-id76735 . -372) (undo-tree-id76736 . -372) (undo-tree-id76737 . -372) (undo-tree-id76738 . -372) (undo-tree-id76739 . -372) (undo-tree-id76740 . -372) (undo-tree-id76741 . -372) (undo-tree-id76742 . -372) (undo-tree-id76743 . -372) (undo-tree-id76744 . -372) (undo-tree-id76745 . -372) (undo-tree-id76746 . -372) (undo-tree-id76747 . -372) (undo-tree-id76748 . -399) (undo-tree-id76749 . -399) (undo-tree-id76750 . -399) (undo-tree-id76751 . -399) (undo-tree-id76752 . -399) (undo-tree-id76753 . -399) (undo-tree-id76754 . -399) (undo-tree-id76755 . -399) (undo-tree-id76756 . -399) (undo-tree-id76757 . -399) (undo-tree-id76758 . -399) (undo-tree-id76759 . -446) (undo-tree-id76760 . -446) (undo-tree-id76761 . -446) (undo-tree-id76762 . -446) (undo-tree-id76763 . -446) (undo-tree-id76764 . -446) (undo-tree-id76765 . -446) (undo-tree-id76766 . -446) (undo-tree-id76767 . -446) (undo-tree-id76768 . -446) (undo-tree-id76769 . -446) (undo-tree-id76770 . -450) (undo-tree-id76771 . -450) (undo-tree-id76772 . -450) (undo-tree-id76773 . -450) (undo-tree-id76774 . -450) (undo-tree-id76775 . -450) (undo-tree-id76776 . -454) (undo-tree-id76777 . -454) (undo-tree-id76778 . -454) (undo-tree-id76779 . -454) (undo-tree-id76780 . -454) (undo-tree-id76781 . -454) (undo-tree-id76782 . -458) (undo-tree-id76783 . -458) (undo-tree-id76784 . -458) (undo-tree-id76785 . -458) (undo-tree-id76786 . -458) (undo-tree-id76787 . -458) (undo-tree-id76788 . -458) (undo-tree-id76789 . -468) 15341) nil (25767 18198 879317 489000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13945 . 13946) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -14413) (13945 . 14414)) nil (25767 18198 879210 94000) 0 nil])
([nil nil ((14209 . 14210)) nil (25767 18198 879208 902000) 0 nil])
([nil nil ((#(">>> " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 14272) (undo-tree-id76637 . -3) (undo-tree-id76638 . 4) (undo-tree-id76639 . -1) (undo-tree-id76640 . -4)) nil (25767 18198 879207 114000) 0 nil])
([nil nil ((12549 . 14508) (#("
(X_train, y_train), (X_test, y_test) = keras.datasets.imdb.load_data()
X_train[0][:10]
#[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65]


word_index = keras.datasets.imdb.get_word_index()
id_to_word = {id_ + 3: word for word, id_ in word_index.items()}
for id_, token in enumerate((\"<pad>\", \"<sos>\", \"<unk>\")):
    id_to_word[id_] = token
    \" \".join([id_to_word[id_] for id_ in X_train[0][:10]])
#'<sos> this film was just brilliant casting location scenery story'


import tensorflow_datasets as tfds
datasets, info = tfds.load(\"imdb_reviews\", as_supervised=True,
with_info=True)
train_size = info.splits[\"train\"].num_examples

def preprocess(X_batch, y_batch):
    X_batch = tf.strings.substr(X_batch, 0, 300)
    X_batch = tf.strings.regex_replace(X_batch, b\"<br\\\\s*/?>\", b\" \")

    X_batch = tf.strings.regex_replace(X_batch, b\"[^a-zA-Z']\", b\" \")
    X_batch = tf.strings.split(X_batch)
    return X_batch.to_tensor(default_value=b\"<pad>\"), y_batch
    

from collections import Counter
vocabulary = Counter()
for X_batch, y_batch in datasets[\"train\"].batch(32).map(preprocess):
    for review in X_batch:
        vocabulary.update(list(review.numpy()))
#Let’s look at the three most common words:
vocabulary.most_common()[:3]
#[(b'<pad>', 215797), (b'the', 61137), (b'a', 38564)]


vocab_size = 10000
truncated_vocabulary = [
word for word, count in vocabulary.most_common()[:vocab_size]
]

words = tf.constant(truncated_vocabulary)
word_ids = tf.range(len(truncated_vocabulary), dtype=tf.int64)
vocab_init = tf.lookup.KeyValueTensorInitializer(words, word_ids)
num_oov_buckets = 1000
table = tf.lookup.StaticVocabularyTable(vocab_init, num_oov_buckets)
#We can then use this table to look up the IDs of a few words:
table.lookup(tf.constant([b\"This movie was faaaaaantastic\".split()]))
<tf.Tensor: [...], dtype=int64, numpy=array([[
22,
12,
11,
10054]])>

" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 4 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 9 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 13 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 19 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 24 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 28 31 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 32 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 36 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 37 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 40 64 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 64 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 69 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 70 71 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 71 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 74 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 79 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 80 81 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 81 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 82 83 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 83 86 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 86 87 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 87 88 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 88 89 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 89 90 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 90 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 133 134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 134 135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 135 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 136 137 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 137 141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 141 142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 142 147 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 147 173 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 173 174 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 174 178 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 178 179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 179 184 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 184 185 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 185 186 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 186 187 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 187 189 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 189 190 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 190 192 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 192 193 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 193 197 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 197 200 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 200 201 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 201 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 218 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 218 229 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 229 231 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 231 236 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 236 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 248 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 248 249 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 249 250 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 250 251 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 251 252 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 252 255 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 255 267 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 267 269 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 269 270 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 270 279 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 279 280 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 280 281 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 281 288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 288 290 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 290 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 297 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 299 306 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 306 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 308 310 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 310 314 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 314 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 317 319 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 319 320 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 320 324 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 324 325 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 325 328 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 328 329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 329 337 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 337 338 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 338 342 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 342 345 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-doc-face org-block)) 345 350 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 350 351 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 351 352 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 352 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 354 355 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 355 357 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 357 358 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 358 362 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 362 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 363 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 366 367 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 367 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 368 371 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 371 376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 376 378 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 378 380 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 380 381 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 381 386 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 386 387 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 387 388 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 388 389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 389 390 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 390 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 393 394 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 394 395 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 395 396 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 396 397 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 397 398 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 398 450 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 450 454 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 454 457 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 457 458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 458 459 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 459 460 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 460 461 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 461 462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 462 463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 463 464 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 464 465 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 465 466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 466 467 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 467 468 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 468 474 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 474 485 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 485 486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 486 489 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 489 494 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 494 495 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 495 497 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 497 499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 499 500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 500 503 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 503 511 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 511 513 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 513 517 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 517 529 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 529 530 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 530 535 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 535 536 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 536 543 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 543 544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 544 548 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 548 549 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 549 559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 559 560 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 560 564 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 564 566 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 566 570 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 570 571 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 571 575 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 575 576 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 576 580 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 580 581 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 581 582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 582 587 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 587 588 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 588 592 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 592 606 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 606 607 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 607 614 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 614 615 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 615 619 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 619 620 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 620 628 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 628 629 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 629 630 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 630 631 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 631 633 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 633 634 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 634 644 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 644 645 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 645 646 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 646 647 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 647 652 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 652 655 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 655 656 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 656 661 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 661 662 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 662 664 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 664 668 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 668 669 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 669 670 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 670 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 675 695 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 695 696 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 696 697 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 697 698 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 698 703 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 703 711 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 711 712 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 712 713 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 713 717 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 717 718 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 718 719 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 719 724 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 724 743 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 743 744 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 744 751 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 751 752 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 752 753 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 753 754 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 754 759 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 759 762 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 762 774 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 774 777 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 777 780 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 780 781 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 781 782 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 782 783 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 783 787 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 787 788 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 788 789 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 789 794 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 794 813 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 813 814 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 814 821 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 821 822 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 822 823 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 823 824 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 824 829 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 829 832 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 832 834 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 834 835 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 835 836 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 836 844 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 844 847 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 847 850 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 850 851 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 851 852 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 852 856 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 856 857 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 857 858 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 858 863 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 863 882 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 882 883 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 883 884 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 884 885 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 885 890 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 890 891 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 891 892 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 892 896 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 896 902 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 902 904 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 904 905 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 905 913 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 913 914 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 914 920 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 920 921 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 921 928 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 928 929 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 929 934 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 934 936 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 936 943 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 943 944 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 944 947 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 947 948 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 948 953 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 953 954 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 954 959 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 959 960 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 960 964 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 964 977 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 977 983 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 983 992 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 992 1002 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1002 1003 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1003 1012 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1012 1013 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1013 1014 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1014 1015 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1015 1018 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1018 1020 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1020 1021 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1021 1026 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1026 1029 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1029 1030 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1030 1035 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1035 1036 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1036 1038 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1038 1047 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1047 1048 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1048 1055 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1055 1056 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1056 1062 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1062 1063 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1063 1065 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1065 1066 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1066 1067 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1067 1070 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1070 1071 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1071 1081 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1081 1082 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1082 1084 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1084 1088 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1088 1091 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1091 1099 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1099 1101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1101 1103 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1103 1104 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1104 1109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1109 1111 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1111 1119 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1119 1136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1136 1137 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1137 1141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1141 1142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1142 1154 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1154 1155 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1155 1156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1156 1157 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1157 1158 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1158 1159 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1159 1160 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1160 1203 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1203 1218 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1218 1219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1219 1225 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1225 1226 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1226 1227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1227 1228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1228 1230 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1230 1231 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1231 1232 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1232 1233 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1233 1234 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1234 1235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1235 1236 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1236 1243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1243 1251 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1251 1252 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1252 1254 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1254 1255 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1255 1256 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1256 1261 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1261 1268 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1268 1269 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1269 1271 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1271 1272 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1272 1273 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1273 1276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1276 1283 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1283 1284 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1284 1285 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1285 1286 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1286 1287 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1287 1288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1288 1293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1293 1294 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1294 1298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1298 1307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1307 1316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1316 1317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1317 1327 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1327 1330 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1330 1331 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1331 1332 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1332 1337 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1337 1340 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1340 1353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1353 1355 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1355 1371 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1371 1372 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1372 1378 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1378 1379 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1379 1380 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1380 1381 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1381 1387 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1387 1388 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1388 1392 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1392 1393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1393 1394 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1394 1395 (rear-nonsticky t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1395 1396 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1396 1397 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1397 1402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1402 1416 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1416 1417 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1417 1426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1426 1427 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1427 1437 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1437 1438 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1438 1439 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1439 1443 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1443 1444 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1444 1447 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1447 1453 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1453 1458 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1458 1459 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1459 1462 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1462 1463 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1463 1472 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1472 1473 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1473 1483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1483 1484 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1484 1500 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1500 1501 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1501 1502 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1502 1507 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1507 1508 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1508 1512 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1512 1550 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1550 1551 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1551 1562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1562 1563 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1563 1566 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1566 1567 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1567 1568 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1568 1571 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1571 1572 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1572 1575 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1575 1576 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1576 1583 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1583 1591 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1591 1596 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1596 1630 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1630 1631 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1631 1636 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1636 1637 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1637 1641 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1641 1646 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1646 1647 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1647 1650 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1650 1651 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1651 1658 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1658 1659 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1659 1660 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1660 1661 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1661 1671 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1671 1723 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1723 1735 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1735 1736 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1736 1747 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1747 1748 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1748 1749 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1749 1750 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1750 1781 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1781 1787 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1787 1788 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 1788 1789 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 1789 1790 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1790 1791 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1791 1792 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1792 1793 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1793 1805 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1805 1806 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1806 1809 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1809 1810 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1810 1812 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1812 1817 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1817 1818 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1818 1823 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1823 1825 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1825 1830 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1830 1836 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1836 1837 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1837 1838 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1838 1839 (htmlize-link (:uri " 22, 12, 11, 10054") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1839 1840 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (org-block)) 1840 1844 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (org-block)) 1844 1848 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (org-block)) 1848 1852 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (org-block)) 1852 1856 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (org-block)) 1856 1857 (htmlize-link (:uri " 22, 12, 11, 10054") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (org-block)) 1857 1858 (htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1858 1859 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri " 22, 12, 11, 10054") fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t help-echo "LINK:  22, 12, 11, 10054" mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1859 1860 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1860 1861 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1861 1862 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1862 1863 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 12549) (undo-tree-id76301 . -1793) (undo-tree-id76302 . -1852) (undo-tree-id76303 . -1793) (undo-tree-id76304 . -1793) (undo-tree-id76305 . 1) (undo-tree-id76306 . 202) (undo-tree-id76307 . -582) (undo-tree-id76308 . -465) (undo-tree-id76309 . -200) (undo-tree-id76310 . -448) (undo-tree-id76311 . -629) (undo-tree-id76312 . -782) (undo-tree-id76313 . -782) (undo-tree-id76314 . -782) (undo-tree-id76315 . -782) (undo-tree-id76316 . -782) (undo-tree-id76317 . -782) (undo-tree-id76318 . -782) (undo-tree-id76319 . -782) (undo-tree-id76320 . -1159) (undo-tree-id76321 . -1852) (undo-tree-id76322 . -1394) (undo-tree-id76323 . -1394) (undo-tree-id76324 . -1394) (undo-tree-id76325 . -1394) (undo-tree-id76326 . -1394) (undo-tree-id76327 . -1394) (undo-tree-id76328 . -1394) (undo-tree-id76329 . -1394) (undo-tree-id76330 . -1394) (undo-tree-id76331 . -1394) (undo-tree-id76332 . -1394) (undo-tree-id76333 . -1394) (undo-tree-id76334 . -1394) (undo-tree-id76335 . -1394) (undo-tree-id76336 . -1394) (undo-tree-id76337 . -1394) (undo-tree-id76338 . -1394) (undo-tree-id76339 . -1394) (undo-tree-id76340 . -1394) (undo-tree-id76341 . -1111) (undo-tree-id76342 . -1111) (undo-tree-id76343 . -1111) (undo-tree-id76344 . -1111) (undo-tree-id76345 . -1111) (undo-tree-id76346 . -1111) (undo-tree-id76347 . -1111) (undo-tree-id76348 . -1111) (undo-tree-id76349 . -1111) (undo-tree-id76350 . -1111) (undo-tree-id76351 . -1111) (undo-tree-id76352 . -1111) (undo-tree-id76353 . -1111) (undo-tree-id76354 . -1111) (undo-tree-id76355 . -1159) (undo-tree-id76356 . -1159) (undo-tree-id76357 . -1159) (undo-tree-id76358 . -1159) (undo-tree-id76359 . -1159) (undo-tree-id76360 . -1159) (undo-tree-id76361 . -1203) (undo-tree-id76362 . -1203) (undo-tree-id76363 . -1203) (undo-tree-id76364 . -1203) (undo-tree-id76365 . -1203) (undo-tree-id76366 . -1203) (undo-tree-id76367 . -1232) (undo-tree-id76368 . -1232) (undo-tree-id76369 . -1232) (undo-tree-id76370 . -1232) (undo-tree-id76371 . -1232) (undo-tree-id76372 . -1232) (undo-tree-id76373 . -1286) (undo-tree-id76374 . -1286) (undo-tree-id76375 . -1286) (undo-tree-id76376 . -1286) (undo-tree-id76377 . -1286) (undo-tree-id76378 . -1286) (undo-tree-id76379 . -1287) (undo-tree-id76380 . -1287) (undo-tree-id76381 . -1287) (undo-tree-id76382 . -1287) (undo-tree-id76383 . -1287) (undo-tree-id76384 . -1287) (undo-tree-id76385 . -1288) (undo-tree-id76386 . -1288) (undo-tree-id76387 . -1288) (undo-tree-id76388 . -1288) (undo-tree-id76389 . -1288) (undo-tree-id76390 . -1288) (undo-tree-id76391 . -1307) (undo-tree-id76392 . -1307) (undo-tree-id76393 . -1307) (undo-tree-id76394 . -1307) (undo-tree-id76395 . -1307) (undo-tree-id76396 . -1307) (undo-tree-id76397 . -1332) (undo-tree-id76398 . -1332) (undo-tree-id76399 . -1332) (undo-tree-id76400 . -1332) (undo-tree-id76401 . -1332) (undo-tree-id76402 . -1332) (undo-tree-id76403 . -1394) (undo-tree-id76404 . -1394) (undo-tree-id76405 . -1394) (undo-tree-id76406 . -1394) (undo-tree-id76407 . -1394) (undo-tree-id76408 . -1394) (undo-tree-id76409 . -1396) (undo-tree-id76410 . -1396) (undo-tree-id76411 . -1396) (undo-tree-id76412 . -1396) (undo-tree-id76413 . -1396) (undo-tree-id76414 . -1396) (undo-tree-id76415 . -1862) (undo-tree-id76416 . -1862) (undo-tree-id76417 . -1862) (undo-tree-id76418 . -1862) (undo-tree-id76419 . -1862) (undo-tree-id76420 . -1862) (undo-tree-id76421 . -1396) (undo-tree-id76422 . -1396) (undo-tree-id76423 . -1396) (undo-tree-id76424 . -1396) (undo-tree-id76425 . -1396) (undo-tree-id76426 . -1396) (undo-tree-id76427 . -503) (undo-tree-id76428 . -1397) (undo-tree-id76429 . -1397) (undo-tree-id76430 . -1397) (undo-tree-id76431 . -1397) (undo-tree-id76432 . -1397) (undo-tree-id76433 . -1397) (undo-tree-id76434 . -1397) (undo-tree-id76435 . -1397) (undo-tree-id76436 . -1397) (undo-tree-id76437 . -1397) (undo-tree-id76438 . -1397) (undo-tree-id76439 . -1397) (undo-tree-id76440 . -1863) (undo-tree-id76441 . -1439) (undo-tree-id76442 . -1439) (undo-tree-id76443 . -1439) (undo-tree-id76444 . -1439) (undo-tree-id76445 . -1439) (undo-tree-id76446 . -1439) (undo-tree-id76447 . -1439) (undo-tree-id76448 . -1439) (undo-tree-id76449 . -1502) (undo-tree-id76450 . -1502) (undo-tree-id76451 . -1502) (undo-tree-id76452 . -1502) (undo-tree-id76453 . -1502) (undo-tree-id76454 . -1502) (undo-tree-id76455 . -1568) (undo-tree-id76456 . -1568) (undo-tree-id76457 . -1568) (undo-tree-id76458 . -1568) (undo-tree-id76459 . -1568) (undo-tree-id76460 . -1568) (undo-tree-id76461 . -1591) (undo-tree-id76462 . -1591) (undo-tree-id76463 . -1591) (undo-tree-id76464 . -1591) (undo-tree-id76465 . -1591) (undo-tree-id76466 . -1591) (undo-tree-id76467 . -1660) (undo-tree-id76468 . -1660) (undo-tree-id76469 . -1660) (undo-tree-id76470 . -1660) (undo-tree-id76471 . -1660) (undo-tree-id76472 . -1660) (undo-tree-id76473 . -1660) (undo-tree-id76474 . -1660) (undo-tree-id76475 . -1660) (undo-tree-id76476 . -1660) (undo-tree-id76477 . -1660) (undo-tree-id76478 . -1660) (undo-tree-id76479 . -1660) (undo-tree-id76480 . -1660) (undo-tree-id76481 . -503) (undo-tree-id76482 . -1661) (undo-tree-id76483 . -1661) (undo-tree-id76484 . -1661) (undo-tree-id76485 . -1661) (undo-tree-id76486 . -1661) (undo-tree-id76487 . -1661) (undo-tree-id76488 . -1661) (undo-tree-id76489 . -1660) (undo-tree-id76490 . -1660) (undo-tree-id76491 . -1660) (undo-tree-id76492 . -1660) (undo-tree-id76493 . -1660) (undo-tree-id76494 . -1660) (undo-tree-id76495 . -1660) (undo-tree-id76496 . -1660) (undo-tree-id76497 . -1660) (undo-tree-id76498 . -1660) (undo-tree-id76499 . -1660) (undo-tree-id76500 . -1660) (undo-tree-id76501 . -1660) (undo-tree-id76502 . -1660) (undo-tree-id76503 . -1660) (undo-tree-id76504 . -1660) (undo-tree-id76505 . -1660) (undo-tree-id76506 . -1660) (undo-tree-id76507 . -1660) (undo-tree-id76508 . -1660) (undo-tree-id76509 . -1723) (undo-tree-id76510 . -1723) (undo-tree-id76511 . -1723) (undo-tree-id76512 . -1723) (undo-tree-id76513 . -1723) (undo-tree-id76514 . -1723) (undo-tree-id76515 . -1723) (undo-tree-id76516 . -1723) (undo-tree-id76517 . -1723) (undo-tree-id76518 . -1723) (undo-tree-id76519 . -1723) (undo-tree-id76520 . -1723) (undo-tree-id76521 . -1723) (undo-tree-id76522 . -1723) (undo-tree-id76523 . -1723) (undo-tree-id76524 . -1723) (undo-tree-id76525 . -1723) (undo-tree-id76526 . -1723) (undo-tree-id76527 . -1723) (undo-tree-id76528 . -1723) (undo-tree-id76529 . -1723) (undo-tree-id76530 . -1723) (undo-tree-id76531 . -1723) (undo-tree-id76532 . -1723) (undo-tree-id76533 . -503) (undo-tree-id76534 . -1723) (undo-tree-id76535 . -1723) (undo-tree-id76536 . -1723) (undo-tree-id76537 . -1723) (undo-tree-id76538 . -1723) (undo-tree-id76539 . -1723) (undo-tree-id76540 . -1723) (undo-tree-id76541 . -1723) (undo-tree-id76542 . -1723) (undo-tree-id76543 . -1723) (undo-tree-id76544 . -1723) (undo-tree-id76545 . -1723) (undo-tree-id76546 . -1793) (undo-tree-id76547 . -1793) (undo-tree-id76548 . -1793) (undo-tree-id76549 . -1793) (undo-tree-id76550 . -1793) (undo-tree-id76551 . -1793) (undo-tree-id76552 . -1793) (undo-tree-id76553 . -1793) (undo-tree-id76554 . -1793) (undo-tree-id76555 . -1793) (undo-tree-id76556 . -1793) (undo-tree-id76557 . -1840) (undo-tree-id76558 . -1840) (undo-tree-id76559 . -1840) (undo-tree-id76560 . -1840) (undo-tree-id76561 . -1840) (undo-tree-id76562 . -1840) (undo-tree-id76563 . -1840) (undo-tree-id76564 . -1840) (undo-tree-id76565 . -1840) (undo-tree-id76566 . -1840) (undo-tree-id76567 . -1840) (undo-tree-id76568 . -1840) (undo-tree-id76569 . -1840) (undo-tree-id76570 . -1793) (undo-tree-id76571 . -1793) (undo-tree-id76572 . -1793) (undo-tree-id76573 . -1793) (undo-tree-id76574 . -1793) (undo-tree-id76575 . -1793) (undo-tree-id76576 . -1793) (undo-tree-id76577 . -1793) (undo-tree-id76578 . -1793) (undo-tree-id76579 . -1793) (undo-tree-id76580 . -1793) (undo-tree-id76581 . -1793) (undo-tree-id76582 . -1862) (undo-tree-id76583 . -1793) (undo-tree-id76584 . -1852) (undo-tree-id76585 . -1793) (undo-tree-id76586 . -1793) (undo-tree-id76587 . -1793) (undo-tree-id76588 . -1793) (undo-tree-id76589 . -1793) (undo-tree-id76590 . -1793) (undo-tree-id76591 . -1793) (undo-tree-id76592 . -1793) (undo-tree-id76593 . -1793) (undo-tree-id76594 . -1793) (undo-tree-id76595 . -1793) (undo-tree-id76596 . -1793) (undo-tree-id76597 . -1793) (undo-tree-id76598 . -1793) (undo-tree-id76599 . -1793) (undo-tree-id76600 . -1793) (undo-tree-id76601 . -1793) (undo-tree-id76602 . -1793) (undo-tree-id76603 . -1840) (undo-tree-id76604 . -1840) (undo-tree-id76605 . -1840) (undo-tree-id76606 . -1840) (undo-tree-id76607 . -1840) (undo-tree-id76608 . -1840) (undo-tree-id76609 . -1840) (undo-tree-id76610 . -1840) (undo-tree-id76611 . -1840) (undo-tree-id76612 . -1840) (undo-tree-id76613 . -1840) (undo-tree-id76614 . -1844) (undo-tree-id76615 . -1844) (undo-tree-id76616 . -1844) (undo-tree-id76617 . -1844) (undo-tree-id76618 . -1844) (undo-tree-id76619 . -1844) (undo-tree-id76620 . -1848) (undo-tree-id76621 . -1848) (undo-tree-id76622 . -1848) (undo-tree-id76623 . -1848) (undo-tree-id76624 . -1848) (undo-tree-id76625 . -1848) (undo-tree-id76626 . -1852) (undo-tree-id76627 . -1852) (undo-tree-id76628 . -1852) (undo-tree-id76629 . -1852) (undo-tree-id76630 . -1852) (undo-tree-id76631 . -1862) (undo-tree-id76632 . -1862) (undo-tree-id76633 . -1862) (undo-tree-id76634 . -1862) (undo-tree-id76635 . -1793) (undo-tree-id76636 . -1793) 14342) nil (25767 18198 879180 871000) 0 nil])
([nil nil ((15444 . 15446) (t 25767 18199 7337 811000)) nil (25767 18273 603182 159000) 0 nil])
([nil nil ((15520 . 15521) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15520) 15454) nil (25767 18273 603181 7000) 0 nil])
([nil nil ((15444 . 15596) (#("- while the word “faaaaaantastic” was not

- Note that the words “this,” “movie,” and “was” were found in the table, so their IDs are lower than 10,000," 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 41 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 41 42 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 43 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 44 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 45 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 46 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 53 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 119 120 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 120 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 15444) (undo-tree-id77037 . -118) (undo-tree-id77038 . -45) (undo-tree-id77039 . -45) (undo-tree-id77040 . 98) (undo-tree-id77041 . 107) (undo-tree-id77042 . -152) (15444 . 15487) (#(" while the word “faaaaaantastic” was not" 0 40 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15553) (undo-tree-id77043 . -1) 15554) nil (25767 18273 603178 938000) 0 nil])
([nil nil ((#(" while" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15556) (undo-tree-id77032 . -5) (undo-tree-id77033 . -5) (undo-tree-id77034 . 5) (undo-tree-id77035 . -5) (undo-tree-id77036 . -5) 15561) nil (25767 18273 603172 223000) 0 nil])
([nil nil ((15665 . 15666) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15665) (15590 . 15591) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15590) 15556) nil (25767 18273 603166 809000) 0 nil])
([nil nil ((#("TIP" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 15686) (undo-tree-id77031 . -2)) nil (25767 18273 603164 906000) 0 nil])
([nil nil ((15687 . 15688) (15686 . 15687)) nil (25767 18273 603162 353000) 0 nil])
([nil nil ((15688 . 15689) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15688) (undo-tree-id77030 . 1) 15687) nil (25767 18273 603158 524000) 0 nil])
([nil nil ((#("(introduced in Chapter 13)" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15702) (undo-tree-id77298 . -25) (undo-tree-id77299 . 26) (undo-tree-id77300 . -1) (undo-tree-id77301 . 1) (undo-tree-id77302 . -26) (undo-tree-id77303 . -26) (t 25767 18273 689233 216000)) nil (25767 18314 494054 675000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15702) (undo-tree-id77296 . -1) (undo-tree-id77297 . -1)) nil (25767 18314 494049 637000) 0 nil])
([nil nil ((#("- TF Transform provides some useful functions to handle
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15687) (undo-tree-id77172 . -55) (undo-tree-id77173 . 54) (undo-tree-id77174 . -3) (undo-tree-id77175 . -36) (undo-tree-id77176 . -36) (undo-tree-id77177 . -36) (undo-tree-id77178 . -36) (undo-tree-id77179 . -36) (undo-tree-id77180 . -36) (undo-tree-id77181 . -56) (undo-tree-id77182 . -56) (undo-tree-id77183 . -56) (undo-tree-id77184 . -56) (undo-tree-id77185 . -56) (undo-tree-id77186 . -56) (undo-tree-id77187 . -36) (undo-tree-id77188 . -36) (undo-tree-id77189 . -36) (undo-tree-id77190 . -36) (undo-tree-id77191 . -36) (undo-tree-id77192 . -36) (undo-tree-id77193 . -36) (undo-tree-id77194 . -36) (undo-tree-id77195 . -36) (undo-tree-id77196 . -36) (undo-tree-id77197 . -36) (undo-tree-id77198 . -2) (undo-tree-id77199 . -2) (undo-tree-id77200 . -2) (undo-tree-id77201 . -2) (undo-tree-id77202 . -2) (undo-tree-id77203 . -2) (undo-tree-id77204 . -2) (undo-tree-id77205 . -2) (undo-tree-id77206 . -2) (undo-tree-id77207 . -2) (undo-tree-id77208 . -2) (undo-tree-id77209 . -5) (undo-tree-id77210 . -5) (undo-tree-id77211 . -5) (undo-tree-id77212 . -5) (undo-tree-id77213 . -5) (undo-tree-id77214 . -5) (undo-tree-id77215 . -5) (undo-tree-id77216 . -5) (undo-tree-id77217 . -5) (undo-tree-id77218 . -5) (undo-tree-id77219 . -5) (undo-tree-id77220 . -15) (undo-tree-id77221 . -15) (undo-tree-id77222 . -15) (undo-tree-id77223 . -15) (undo-tree-id77224 . -15) (undo-tree-id77225 . -15) (undo-tree-id77226 . -15) (undo-tree-id77227 . -15) (undo-tree-id77228 . -15) (undo-tree-id77229 . -15) (undo-tree-id77230 . -15) (undo-tree-id77231 . -15) (undo-tree-id77232 . -15) (undo-tree-id77233 . -15) (undo-tree-id77234 . -15) (undo-tree-id77235 . -15) (undo-tree-id77236 . -15) (undo-tree-id77237 . -15) (undo-tree-id77238 . -15) (undo-tree-id77239 . -15) (undo-tree-id77240 . -15) (undo-tree-id77241 . -15) (undo-tree-id77242 . -15) (undo-tree-id77243 . -15) (undo-tree-id77244 . -15) (undo-tree-id77245 . -15) (undo-tree-id77246 . -15) (undo-tree-id77247 . -15) (undo-tree-id77248 . -15) (undo-tree-id77249 . -15) (undo-tree-id77250 . -15) (undo-tree-id77251 . -15) (undo-tree-id77252 . -15) (undo-tree-id77253 . -15) (undo-tree-id77254 . -15) (undo-tree-id77255 . -15) (undo-tree-id77256 . -15) (undo-tree-id77257 . -15) (undo-tree-id77258 . -15) (undo-tree-id77259 . -15) (undo-tree-id77260 . -15) (undo-tree-id77261 . -15) (undo-tree-id77262 . -15) (undo-tree-id77263 . -15) (undo-tree-id77264 . -15) (undo-tree-id77265 . -15) (undo-tree-id77266 . -15) (undo-tree-id77267 . -15) (undo-tree-id77268 . -15) (undo-tree-id77269 . -15) (undo-tree-id77270 . -15) (undo-tree-id77271 . -15) (undo-tree-id77272 . -15) (undo-tree-id77273 . -22) (undo-tree-id77274 . -27) (undo-tree-id77275 . -34) (undo-tree-id77276 . -44) (undo-tree-id77277 . -47) (undo-tree-id77278 . -54) (undo-tree-id77279 . 54) (undo-tree-id77280 . -4) (undo-tree-id77281 . -3) (undo-tree-id77282 . -3) (undo-tree-id77283 . -3) (undo-tree-id77284 . -3) (undo-tree-id77285 . -3) (undo-tree-id77286 . -3) (undo-tree-id77287 . -3) (undo-tree-id77288 . -3) (undo-tree-id77289 . -3) (undo-tree-id77290 . -3) (undo-tree-id77291 . -3) (undo-tree-id77292 . -3) (undo-tree-id77293 . -3) (undo-tree-id77294 . -3) (undo-tree-id77295 . -56) 15690) nil (25767 18314 494043 837000) 0 nil])
([nil nil ((#("such vocabularies. For example, check out the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 29 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 15687) (undo-tree-id77141 . -45) (undo-tree-id77142 . 46) (undo-tree-id77143 . -3) (undo-tree-id77144 . -3) (undo-tree-id77145 . -3) (undo-tree-id77146 . -3) (undo-tree-id77147 . -3) (undo-tree-id77148 . -3) (undo-tree-id77149 . -3) (undo-tree-id77150 . -3) (undo-tree-id77151 . -3) (undo-tree-id77152 . -3) (undo-tree-id77153 . -3) (undo-tree-id77154 . -3) (undo-tree-id77155 . -3) (undo-tree-id77156 . -3) (undo-tree-id77157 . -3) (undo-tree-id77158 . -3) (undo-tree-id77159 . -3) (undo-tree-id77160 . -3) (undo-tree-id77161 . -3) (undo-tree-id77162 . -3) (undo-tree-id77163 . -3) (undo-tree-id77164 . -3) (undo-tree-id77165 . -3) (undo-tree-id77166 . -3) (undo-tree-id77167 . -3) (undo-tree-id77168 . -3) (undo-tree-id77169 . -3) (undo-tree-id77170 . -3) (undo-tree-id77171 . -46) 15690) nil (25767 18314 493912 594000) 0 nil])
([nil nil ((#("tft.compute_and_apply_vocabulary() function: it will go through the dataset to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 12 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 16 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 22 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 32 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 15687) (undo-tree-id77099 . -78) (undo-tree-id77100 . 79) (undo-tree-id77101 . -3) (undo-tree-id77102 . 79) (undo-tree-id77103 . -3) (undo-tree-id77104 . -3) (undo-tree-id77105 . -3) (undo-tree-id77106 . -3) (undo-tree-id77107 . -3) (undo-tree-id77108 . -3) (undo-tree-id77109 . -3) (undo-tree-id77110 . -3) (undo-tree-id77111 . -3) (undo-tree-id77112 . -3) (undo-tree-id77113 . -3) (undo-tree-id77114 . -3) (undo-tree-id77115 . -3) (undo-tree-id77116 . -3) (undo-tree-id77117 . -3) (undo-tree-id77118 . -3) (undo-tree-id77119 . -3) (undo-tree-id77120 . -3) (undo-tree-id77121 . -3) (undo-tree-id77122 . -3) (undo-tree-id77123 . -3) (undo-tree-id77124 . -3) (undo-tree-id77125 . -3) (undo-tree-id77126 . -3) (undo-tree-id77127 . -3) (undo-tree-id77128 . -3) (undo-tree-id77129 . -3) (undo-tree-id77130 . -3) (undo-tree-id77131 . -3) (undo-tree-id77132 . -3) (undo-tree-id77133 . -3) (undo-tree-id77134 . -3) (undo-tree-id77135 . -3) (undo-tree-id77136 . -3) (undo-tree-id77137 . -3) (undo-tree-id77138 . -3) (undo-tree-id77139 . -3) (undo-tree-id77140 . -79) 15690) nil (25767 18314 493050 102000) 0 nil])
([nil nil ((#("find all distinct words and build the vocabulary, and it will generate the TF
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 15687) (undo-tree-id77064 . -77) (undo-tree-id77065 . 78) (undo-tree-id77066 . -3) (undo-tree-id77067 . -3) (undo-tree-id77068 . -3) (undo-tree-id77069 . -3) (undo-tree-id77070 . -3) (undo-tree-id77071 . -3) (undo-tree-id77072 . -3) (undo-tree-id77073 . -3) (undo-tree-id77074 . -3) (undo-tree-id77075 . -3) (undo-tree-id77076 . -3) (undo-tree-id77077 . -3) (undo-tree-id77078 . -3) (undo-tree-id77079 . -3) (undo-tree-id77080 . -3) (undo-tree-id77081 . -3) (undo-tree-id77082 . -3) (undo-tree-id77083 . -3) (undo-tree-id77084 . -3) (undo-tree-id77085 . -3) (undo-tree-id77086 . -3) (undo-tree-id77087 . -3) (undo-tree-id77088 . -3) (undo-tree-id77089 . -3) (undo-tree-id77090 . -3) (undo-tree-id77091 . -3) (undo-tree-id77092 . -3) (undo-tree-id77093 . -3) (undo-tree-id77094 . -3) (undo-tree-id77095 . -3) (undo-tree-id77096 . -3) (undo-tree-id77097 . -3) (undo-tree-id77098 . -78) 15690) nil (25767 18314 493021 671000) 0 nil])
([nil nil ((#("operations required to encode each word using this vocabulary.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 15687) (undo-tree-id77044 . -62) (undo-tree-id77045 . 63) (undo-tree-id77046 . -3) (undo-tree-id77047 . -3) (undo-tree-id77048 . -3) (undo-tree-id77049 . -3) (undo-tree-id77050 . -3) (undo-tree-id77051 . -3) (undo-tree-id77052 . -3) (undo-tree-id77053 . -3) (undo-tree-id77054 . -3) (undo-tree-id77055 . -3) (undo-tree-id77056 . -3) (undo-tree-id77057 . -3) (undo-tree-id77058 . -3) (undo-tree-id77059 . -3) (undo-tree-id77060 . -3) (undo-tree-id77061 . -3) (undo-tree-id77062 . -3) (undo-tree-id77063 . -63) 15690) nil (25767 18314 492994 873000) 0 nil])
([nil nil ((15687 . 15689) (t 25767 18314 622251 332000)) nil (25767 18323 701794 469000) 0 nil])
([nil nil ((15689 . 15690) (#("Now we are ready to c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15689) (undo-tree-id77304 . -20) (undo-tree-id77305 . -20) (undo-tree-id77306 . 21) (undo-tree-id77307 . -3) (undo-tree-id77308 . -20) (undo-tree-id77309 . -3) (undo-tree-id77310 . -3) (undo-tree-id77311 . -3) (undo-tree-id77312 . -3) (undo-tree-id77313 . -3) (undo-tree-id77314 . -3) (undo-tree-id77315 . -3) (undo-tree-id77316 . -3) (undo-tree-id77317 . -3) (undo-tree-id77318 . -3) (undo-tree-id77319 . -3) (undo-tree-id77320 . -3) (undo-tree-id77321 . -3) (undo-tree-id77322 . -3) (undo-tree-id77323 . -3) (undo-tree-id77324 . -3) (undo-tree-id77325 . -3) (undo-tree-id77326 . -3) (undo-tree-id77327 . -3) (undo-tree-id77328 . -3) (undo-tree-id77329 . -3) (undo-tree-id77330 . -3) (undo-tree-id77331 . -3) (undo-tree-id77332 . -3) (undo-tree-id77333 . -3) (undo-tree-id77334 . -3) (undo-tree-id77335 . -3) (undo-tree-id77336 . -3) (undo-tree-id77337 . -3) (undo-tree-id77338 . -21) (undo-tree-id77339 . -20) (undo-tree-id77340 . -2) (undo-tree-id77341 . -2) (undo-tree-id77342 . -2) (undo-tree-id77343 . -2) (undo-tree-id77344 . -2) (undo-tree-id77345 . -2) (undo-tree-id77346 . -2) (undo-tree-id77347 . -2) (undo-tree-id77348 . -2) (undo-tree-id77349 . -2) (undo-tree-id77350 . -2) (undo-tree-id77351 . -2) (undo-tree-id77352 . -2) (undo-tree-id77353 . -2) (undo-tree-id77354 . -2) (undo-tree-id77355 . -2) (undo-tree-id77356 . -5) (undo-tree-id77357 . -5) (undo-tree-id77358 . -5) (undo-tree-id77359 . -5) (undo-tree-id77360 . -5) (undo-tree-id77361 . -5) (undo-tree-id77362 . -5) (undo-tree-id77363 . -5) (undo-tree-id77364 . -5) (undo-tree-id77365 . -5) (undo-tree-id77366 . -5) (undo-tree-id77367 . -5) (undo-tree-id77368 . -5) (undo-tree-id77369 . -5) (undo-tree-id77370 . -5) (undo-tree-id77371 . -5) (undo-tree-id77372 . -9) (undo-tree-id77373 . -9) (undo-tree-id77374 . -9) (undo-tree-id77375 . -9) (undo-tree-id77376 . -9) (undo-tree-id77377 . -9) (undo-tree-id77378 . -9) (undo-tree-id77379 . -9) (undo-tree-id77380 . -9) (undo-tree-id77381 . -9) (undo-tree-id77382 . -9) (undo-tree-id77383 . -9) (undo-tree-id77384 . -9) (undo-tree-id77385 . -9) (undo-tree-id77386 . -9) (undo-tree-id77387 . -9) (undo-tree-id77388 . -15) (undo-tree-id77389 . -15) (undo-tree-id77390 . -15) (undo-tree-id77391 . -15) (undo-tree-id77392 . -15) (undo-tree-id77393 . -15) (undo-tree-id77394 . -15) (undo-tree-id77395 . -15) (undo-tree-id77396 . -15) (undo-tree-id77397 . -15) (undo-tree-id77398 . -15) (undo-tree-id77399 . -15) (undo-tree-id77400 . -15) (undo-tree-id77401 . -15) (undo-tree-id77402 . -15) (undo-tree-id77403 . -15) (undo-tree-id77404 . -15) (undo-tree-id77405 . -15) (undo-tree-id77406 . -15) (undo-tree-id77407 . -15) (undo-tree-id77408 . -15) (undo-tree-id77409 . -15) (undo-tree-id77410 . -15) (undo-tree-id77411 . -15) (undo-tree-id77412 . -15) (undo-tree-id77413 . -15) (undo-tree-id77414 . -16) (undo-tree-id77415 . -16) (undo-tree-id77416 . -16) (undo-tree-id77417 . -16) (undo-tree-id77418 . -16) (undo-tree-id77419 . -16) (undo-tree-id77420 . -16) (undo-tree-id77421 . -16) (undo-tree-id77422 . -16) (undo-tree-id77423 . -16) (undo-tree-id77424 . -16) (undo-tree-id77425 . -16) (undo-tree-id77426 . -16) (undo-tree-id77427 . -16) (undo-tree-id77428 . -16) (undo-tree-id77429 . -16) (undo-tree-id77430 . -17) (undo-tree-id77431 . -17) (undo-tree-id77432 . -17) (undo-tree-id77433 . -17) (undo-tree-id77434 . -17) (undo-tree-id77435 . -17) (undo-tree-id77436 . -17) (undo-tree-id77437 . -17) (undo-tree-id77438 . -17) (undo-tree-id77439 . -17) (undo-tree-id77440 . -17) (undo-tree-id77441 . -17) (undo-tree-id77442 . -17) (undo-tree-id77443 . -17) (undo-tree-id77444 . -17) (undo-tree-id77445 . -17) (undo-tree-id77446 . -18) (undo-tree-id77447 . -18) (undo-tree-id77448 . -18) (undo-tree-id77449 . -18) (undo-tree-id77450 . -18) (undo-tree-id77451 . -18) (undo-tree-id77452 . -18) (undo-tree-id77453 . -18) (undo-tree-id77454 . -18) (undo-tree-id77455 . -18) (undo-tree-id77456 . -18) (undo-tree-id77457 . -18) (undo-tree-id77458 . -18) (undo-tree-id77459 . -18) (undo-tree-id77460 . -18) (undo-tree-id77461 . -18) (undo-tree-id77462 . -19) (undo-tree-id77463 . -19) (undo-tree-id77464 . -19) (undo-tree-id77465 . -19) (undo-tree-id77466 . -19) (undo-tree-id77467 . -19) (undo-tree-id77468 . -19) (undo-tree-id77469 . -19) (undo-tree-id77470 . -19) (undo-tree-id77471 . -19) (undo-tree-id77472 . -19) (undo-tree-id77473 . -19) (undo-tree-id77474 . -19) (undo-tree-id77475 . -19) (undo-tree-id77476 . -19) (undo-tree-id77477 . -19) (undo-tree-id77478 . -20) (undo-tree-id77479 . -20) (undo-tree-id77480 . -20) (undo-tree-id77481 . -20) (undo-tree-id77482 . -20) (undo-tree-id77483 . -20) (undo-tree-id77484 . -20) (undo-tree-id77485 . -20) (undo-tree-id77486 . -20) (undo-tree-id77487 . -20) (undo-tree-id77488 . -20) (undo-tree-id77489 . -20) (undo-tree-id77490 . -20) (undo-tree-id77491 . -20) (undo-tree-id77492 . -20) (undo-tree-id77493 . -20) (undo-tree-id77494 . -20) (undo-tree-id77495 . -21) (undo-tree-id77496 . -21) (undo-tree-id77497 . -21) 15709) nil (25767 18323 701783 17000) 0 nil])
([nil nil ((15722 . 15724) (15720 . 15722) (t 25767 18323 830478 504000)) nil (25767 18341 997341 296000) 0 nil])
([nil nil ((15952 . 15953) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15952) (undo-tree-id77498 . -1) (15878 . 15879) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15878) (undo-tree-id77499 . -1) (15814 . 15815) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15814) (undo-tree-id77500 . -1) (15745 . 15746) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15745) (undo-tree-id77501 . -1) 15723 (t 25767 18342 78926 764000)) nil (25767 18348 204731 139000) 0 nil])
([nil nil ((#("We " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15724) (undo-tree-id78382 . -2) (undo-tree-id78383 . -2) (undo-tree-id78384 . 3) (undo-tree-id78385 . -2) (undo-tree-id78386 . -3) (undo-tree-id78387 . -2) (undo-tree-id78388 . -1) (undo-tree-id78389 . -1) (undo-tree-id78390 . -1) (undo-tree-id78391 . -1) (undo-tree-id78392 . -1) (undo-tree-id78393 . -1) (undo-tree-id78394 . -1) (undo-tree-id78395 . -1) (undo-tree-id78396 . -1) (undo-tree-id78397 . -1) (undo-tree-id78398 . -1) (undo-tree-id78399 . -1) (undo-tree-id78400 . -1) (undo-tree-id78401 . -1) (undo-tree-id78402 . -1) (undo-tree-id78403 . -1) (undo-tree-id78404 . -1) (undo-tree-id78405 . -1) (undo-tree-id78406 . -1) (undo-tree-id78407 . -1) (undo-tree-id78408 . -1) (undo-tree-id78409 . -2) (undo-tree-id78410 . -2) (undo-tree-id78411 . -2) (undo-tree-id78412 . -2) (undo-tree-id78413 . -2) (undo-tree-id78414 . -2) (undo-tree-id78415 . -2) (undo-tree-id78416 . -2) (undo-tree-id78417 . -2) (undo-tree-id78418 . -2) (undo-tree-id78419 . -2) (undo-tree-id78420 . -2) (undo-tree-id78421 . -2) (undo-tree-id78422 . -2) (undo-tree-id78423 . -2) (undo-tree-id78424 . -2) (undo-tree-id78425 . -2) (undo-tree-id78426 . -3) 15726 (t 25767 18348 287078 691000)) nil (25767 18375 280851 592000) 0 nil])
([nil nil ((15722 . 15958) (#("- then convert them to short sequences of words using the preprocess() function, then encode these words using a simple encode_words() function that uses the table we just built, and finally prefetch the next batch:

- batch the reviews" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 70 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 70 71 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 71 126 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 126 127 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 127 132 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 132 134 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 134 135 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 135 208 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 208 209 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 209 214 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 214 215 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 215 216 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 216 217 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 217 218 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 218 219 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 219 236 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 15722) (undo-tree-id78097 . -236) (undo-tree-id78098 . -236) (undo-tree-id78099 . -219) (undo-tree-id78100 . -219) (undo-tree-id78101 . 17) (undo-tree-id78102 . 17) (undo-tree-id78103 . -236) (undo-tree-id78104 . -236) (undo-tree-id78105 . -236) (undo-tree-id78106 . -236) (undo-tree-id78107 . -236) (undo-tree-id78108 . -236) (undo-tree-id78109 . -236) (undo-tree-id78110 . -236) (undo-tree-id78111 . -236) (undo-tree-id78112 . -236) (undo-tree-id78113 . -236) (undo-tree-id78114 . -236) (undo-tree-id78115 . -236) (undo-tree-id78116 . -236) (undo-tree-id78117 . -236) (undo-tree-id78118 . -236) (undo-tree-id78119 . -236) (undo-tree-id78120 . -236) (undo-tree-id78121 . -236) (undo-tree-id78122 . -236) (undo-tree-id78123 . -236) (undo-tree-id78124 . -236) (undo-tree-id78125 . -236) (undo-tree-id78126 . -236) (undo-tree-id78127 . -236) (undo-tree-id78128 . -236) (undo-tree-id78129 . -236) (undo-tree-id78130 . -236) (undo-tree-id78131 . -236) (undo-tree-id78132 . -236) (undo-tree-id78133 . -236) (undo-tree-id78134 . -236) (undo-tree-id78135 . -236) (undo-tree-id78136 . -236) (undo-tree-id78137 . -236) (undo-tree-id78138 . -236) (undo-tree-id78139 . -236) (undo-tree-id78140 . -236) (undo-tree-id78141 . -236) (undo-tree-id78142 . -236) (undo-tree-id78143 . -236) (undo-tree-id78144 . -236) (undo-tree-id78145 . -236) (undo-tree-id78146 . -236) (undo-tree-id78147 . -236) (undo-tree-id78148 . -236) (undo-tree-id78149 . -236) (undo-tree-id78150 . -236) (undo-tree-id78151 . -236) (undo-tree-id78152 . -236) (undo-tree-id78153 . -236) (undo-tree-id78154 . -236) (undo-tree-id78155 . -236) (undo-tree-id78156 . -236) (undo-tree-id78157 . -236) (undo-tree-id78158 . -236) (undo-tree-id78159 . -236) (undo-tree-id78160 . -236) (undo-tree-id78161 . -236) (undo-tree-id78162 . -236) (undo-tree-id78163 . -219) (undo-tree-id78164 . -219) (undo-tree-id78165 . -219) (undo-tree-id78166 . -219) (undo-tree-id78167 . -219) (undo-tree-id78168 . -219) (undo-tree-id78169 . -219) (undo-tree-id78170 . -219) (undo-tree-id78171 . -219) (undo-tree-id78172 . -219) (undo-tree-id78173 . -219) (undo-tree-id78174 . -219) (undo-tree-id78175 . -219) (undo-tree-id78176 . -219) (undo-tree-id78177 . -219) (undo-tree-id78178 . -219) (undo-tree-id78179 . -219) (undo-tree-id78180 . -219) (undo-tree-id78181 . -219) (undo-tree-id78182 . -219) (undo-tree-id78183 . -219) (undo-tree-id78184 . -219) (undo-tree-id78185 . -219) (undo-tree-id78186 . -219) (undo-tree-id78187 . -219) (undo-tree-id78188 . -219) (undo-tree-id78189 . -219) (undo-tree-id78190 . -219) (undo-tree-id78191 . -219) (undo-tree-id78192 . -219) (undo-tree-id78193 . -219) (undo-tree-id78194 . -219) (undo-tree-id78195 . -219) (undo-tree-id78196 . -219) (undo-tree-id78197 . -219) (undo-tree-id78198 . -219) (undo-tree-id78199 . -219) (undo-tree-id78200 . -219) (undo-tree-id78201 . -219) (undo-tree-id78202 . -219) (undo-tree-id78203 . -219) (undo-tree-id78204 . -219) (undo-tree-id78205 . -219) (undo-tree-id78206 . -219) (undo-tree-id78207 . -219) (undo-tree-id78208 . -219) (undo-tree-id78209 . -219) (undo-tree-id78210 . -219) (undo-tree-id78211 . -219) (undo-tree-id78212 . -219) (undo-tree-id78213 . -219) (undo-tree-id78214 . -219) (undo-tree-id78215 . -219) (undo-tree-id78216 . -219) (undo-tree-id78217 . -219) (undo-tree-id78218 . -219) (undo-tree-id78219 . -219) (undo-tree-id78220 . -219) (undo-tree-id78221 . -219) (undo-tree-id78222 . -219) (undo-tree-id78223 . -219) (undo-tree-id78224 . -219) (undo-tree-id78225 . -219) (undo-tree-id78226 . -219) (undo-tree-id78227 . -219) (undo-tree-id78228 . -219) (undo-tree-id78229 . -219) (undo-tree-id78230 . -219) (undo-tree-id78231 . -219) (undo-tree-id78232 . -219) (undo-tree-id78233 . -219) (undo-tree-id78234 . -219) (undo-tree-id78235 . -219) (undo-tree-id78236 . -219) (undo-tree-id78237 . -219) (undo-tree-id78238 . -219) (undo-tree-id78239 . -219) (undo-tree-id78240 . -219) (undo-tree-id78241 . -219) (undo-tree-id78242 . -219) (undo-tree-id78243 . -219) (undo-tree-id78244 . -219) (undo-tree-id78245 . -219) (undo-tree-id78246 . -219) (undo-tree-id78247 . -219) (undo-tree-id78248 . -219) (undo-tree-id78249 . -219) (undo-tree-id78250 . -219) (undo-tree-id78251 . -219) (undo-tree-id78252 . -219) (undo-tree-id78253 . -219) (undo-tree-id78254 . -219) (undo-tree-id78255 . -219) (undo-tree-id78256 . -219) (undo-tree-id78257 . -219) (undo-tree-id78258 . -219) (undo-tree-id78259 . -219) (undo-tree-id78260 . -219) (undo-tree-id78261 . -219) (undo-tree-id78262 . -219) (undo-tree-id78263 . -219) (undo-tree-id78264 . -219) (undo-tree-id78265 . -219) (undo-tree-id78266 . -219) (undo-tree-id78267 . -219) (undo-tree-id78268 . -219) (undo-tree-id78269 . -219) (undo-tree-id78270 . -219) (undo-tree-id78271 . -219) (undo-tree-id78272 . -219) (undo-tree-id78273 . -219) (undo-tree-id78274 . -219) (undo-tree-id78275 . -219) (undo-tree-id78276 . -219) (undo-tree-id78277 . -219) (undo-tree-id78278 . -219) (undo-tree-id78279 . -219) (undo-tree-id78280 . -219) (undo-tree-id78281 . -219) (undo-tree-id78282 . -236) (undo-tree-id78283 . -236) (undo-tree-id78284 . -236) (undo-tree-id78285 . -236) (undo-tree-id78286 . -236) (undo-tree-id78287 . -236) (undo-tree-id78288 . -236) (undo-tree-id78289 . -236) (undo-tree-id78290 . -236) (undo-tree-id78291 . -236) (undo-tree-id78292 . -236) (undo-tree-id78293 . -236) (undo-tree-id78294 . -236) (undo-tree-id78295 . -236) (undo-tree-id78296 . -236) (undo-tree-id78297 . -236) (undo-tree-id78298 . -236) (undo-tree-id78299 . -236) (undo-tree-id78300 . -236) (undo-tree-id78301 . -236) (undo-tree-id78302 . -236) (undo-tree-id78303 . -236) (undo-tree-id78304 . -236) (undo-tree-id78305 . -236) (undo-tree-id78306 . -236) (undo-tree-id78307 . -236) (undo-tree-id78308 . -236) (undo-tree-id78309 . -236) (undo-tree-id78310 . -236) (undo-tree-id78311 . -236) (undo-tree-id78312 . -236) (undo-tree-id78313 . -236) (undo-tree-id78314 . -236) (undo-tree-id78315 . -236) (undo-tree-id78316 . -236) (undo-tree-id78317 . -217) (15722 . 15939) (#(" then convert them to short sequences of words using the preprocess() function, then encode these words using a simple encode_words() function that uses the table we just built, and finally prefetch the next batch:" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 69 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 70 125 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 125 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 126 131 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 131 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 133 134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 134 207 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 207 208 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 208 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 213 214 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 15741) (undo-tree-id78318 . -214) (undo-tree-id78319 . 157) (undo-tree-id78320 . -67) (undo-tree-id78321 . -207) (undo-tree-id78322 . -207) (undo-tree-id78323 . -207) (undo-tree-id78324 . -207) (undo-tree-id78325 . -207) (undo-tree-id78326 . -207) (undo-tree-id78327 . -207) (undo-tree-id78328 . -207) (undo-tree-id78329 . -207) (undo-tree-id78330 . -207) (undo-tree-id78331 . -207) (undo-tree-id78332 . -207) (undo-tree-id78333 . -207) (undo-tree-id78334 . -207) (undo-tree-id78335 . -207) (undo-tree-id78336 . -207) (undo-tree-id78337 . -207) (undo-tree-id78338 . -207) (undo-tree-id78339 . -207) (undo-tree-id78340 . -207) (undo-tree-id78341 . -207) (undo-tree-id78342 . -207) (undo-tree-id78343 . -207) (undo-tree-id78344 . -207) (undo-tree-id78345 . -207) (undo-tree-id78346 . -142) (undo-tree-id78347 . -142) (undo-tree-id78348 . -142) (undo-tree-id78349 . -142) (undo-tree-id78350 . -142) (undo-tree-id78351 . -142) (undo-tree-id78352 . -142) (undo-tree-id78353 . -142) (undo-tree-id78354 . -142) (undo-tree-id78355 . -142) (undo-tree-id78356 . -142) (undo-tree-id78357 . -77) (undo-tree-id78358 . -77) (undo-tree-id78359 . -77) (undo-tree-id78360 . -77) (undo-tree-id78361 . -77) (undo-tree-id78362 . -77) (undo-tree-id78363 . -77) (undo-tree-id78364 . -77) (undo-tree-id78365 . -77) (undo-tree-id78366 . -77) (undo-tree-id78367 . -77) (undo-tree-id78368 . -15) (undo-tree-id78369 . -15) (undo-tree-id78370 . -15) (undo-tree-id78371 . -15) (undo-tree-id78372 . -15) (undo-tree-id78373 . -15) (undo-tree-id78374 . -15) (undo-tree-id78375 . -15) (undo-tree-id78376 . -15) (undo-tree-id78377 . -15) (undo-tree-id78378 . -15) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15741) (undo-tree-id78379 . -1) (undo-tree-id78380 . -1) (undo-tree-id78381 . -1)) nil (25767 18375 280810 793000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -15958) (undo-tree-id78096 . -1) 15789) nil (25767 18375 280635 43000) 0 nil])
([nil nil ((15743 . 15960) (#("- then encode these words using a simple encode_words() function that uses the table we just built, and finally prefetch the next batch:

- then convert them to short sequences of words using the preprocess() function" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 47 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 48 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 48 53 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 53 55 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 55 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 56 129 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 129 130 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 130 135 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 135 136 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 136 137 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 137 138 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 138 139 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 139 140 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 140 208 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 208 209 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 209 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 15743) (undo-tree-id77674 . -217) (undo-tree-id77675 . -140) (undo-tree-id77676 . -140) (undo-tree-id77677 . 72) (undo-tree-id77678 . 77) (undo-tree-id77679 . -217) (undo-tree-id77680 . -140) (undo-tree-id77681 . -140) (undo-tree-id77682 . -140) (undo-tree-id77683 . -140) (undo-tree-id77684 . -140) (undo-tree-id77685 . -140) (undo-tree-id77686 . -140) (undo-tree-id77687 . -140) (undo-tree-id77688 . -140) (undo-tree-id77689 . -140) (undo-tree-id77690 . -140) (undo-tree-id77691 . -140) (undo-tree-id77692 . -140) (undo-tree-id77693 . -140) (undo-tree-id77694 . -140) (undo-tree-id77695 . -140) (undo-tree-id77696 . -140) (undo-tree-id77697 . -139) (undo-tree-id77698 . -139) (undo-tree-id77699 . -139) (undo-tree-id77700 . -139) (undo-tree-id77701 . -139) (undo-tree-id77702 . -139) (undo-tree-id77703 . -139) (undo-tree-id77704 . -139) (undo-tree-id77705 . -139) (undo-tree-id77706 . -139) (undo-tree-id77707 . -139) (undo-tree-id77708 . -139) (undo-tree-id77709 . -139) (undo-tree-id77710 . -139) (undo-tree-id77711 . -139) (undo-tree-id77712 . -139) (undo-tree-id77713 . -139) (undo-tree-id77714 . -139) (undo-tree-id77715 . -139) (undo-tree-id77716 . -139) (undo-tree-id77717 . -140) (undo-tree-id77718 . -140) (undo-tree-id77719 . -140) (undo-tree-id77720 . -140) (undo-tree-id77721 . -140) (undo-tree-id77722 . -140) (undo-tree-id77723 . -140) (undo-tree-id77724 . -140) (undo-tree-id77725 . -140) (undo-tree-id77726 . -140) (undo-tree-id77727 . -140) (undo-tree-id77728 . -140) (undo-tree-id77729 . -140) (undo-tree-id77730 . -140) (undo-tree-id77731 . -140) (undo-tree-id77732 . -140) (undo-tree-id77733 . -140) (undo-tree-id77734 . -140) (undo-tree-id77735 . -140) (undo-tree-id77736 . -140) (undo-tree-id77737 . -140) (undo-tree-id77738 . -140) (undo-tree-id77739 . -140) (undo-tree-id77740 . -140) (undo-tree-id77741 . -140) (undo-tree-id77742 . -140) (undo-tree-id77743 . -140) (undo-tree-id77744 . -140) (undo-tree-id77745 . -140) (undo-tree-id77746 . -143) (undo-tree-id77747 . -143) (undo-tree-id77748 . -143) (undo-tree-id77749 . -143) (undo-tree-id77750 . -143) (undo-tree-id77751 . -143) (undo-tree-id77752 . -143) (undo-tree-id77753 . -143) (undo-tree-id77754 . -143) (undo-tree-id77755 . -143) (undo-tree-id77756 . -143) (undo-tree-id77757 . -143) (undo-tree-id77758 . -143) (undo-tree-id77759 . -143) (undo-tree-id77760 . -143) (undo-tree-id77761 . -143) (undo-tree-id77762 . -143) (undo-tree-id77763 . -143) (undo-tree-id77764 . -143) (undo-tree-id77765 . -143) (undo-tree-id77766 . -143) (undo-tree-id77767 . -144) (undo-tree-id77768 . -144) (undo-tree-id77769 . -144) (undo-tree-id77770 . -144) (undo-tree-id77771 . -144) (undo-tree-id77772 . -144) (undo-tree-id77773 . -144) (undo-tree-id77774 . -144) (undo-tree-id77775 . -144) (undo-tree-id77776 . -144) (undo-tree-id77777 . -144) (undo-tree-id77778 . -144) (undo-tree-id77779 . -144) (undo-tree-id77780 . -144) (undo-tree-id77781 . -144) (undo-tree-id77782 . -144) (undo-tree-id77783 . -144) (undo-tree-id77784 . -144) (undo-tree-id77785 . -144) (undo-tree-id77786 . -144) (undo-tree-id77787 . -144) (undo-tree-id77788 . -144) (undo-tree-id77789 . -144) (undo-tree-id77790 . -144) (undo-tree-id77791 . -144) (undo-tree-id77792 . -144) (undo-tree-id77793 . -144) (undo-tree-id77794 . -144) (undo-tree-id77795 . -144) (undo-tree-id77796 . -144) (undo-tree-id77797 . -144) (undo-tree-id77798 . -144) (undo-tree-id77799 . -144) (undo-tree-id77800 . -144) (undo-tree-id77801 . -144) (undo-tree-id77802 . -144) (undo-tree-id77803 . -144) (undo-tree-id77804 . -144) (undo-tree-id77805 . -144) (undo-tree-id77806 . -144) (undo-tree-id77807 . -144) (undo-tree-id77808 . -144) (undo-tree-id77809 . -144) (undo-tree-id77810 . -144) (undo-tree-id77811 . -151) (undo-tree-id77812 . -151) (undo-tree-id77813 . -151) (undo-tree-id77814 . -151) (undo-tree-id77815 . -151) (undo-tree-id77816 . -151) (undo-tree-id77817 . -151) (undo-tree-id77818 . -151) (undo-tree-id77819 . -151) (undo-tree-id77820 . -151) (undo-tree-id77821 . -151) (undo-tree-id77822 . -151) (undo-tree-id77823 . -151) (undo-tree-id77824 . -151) (undo-tree-id77825 . -151) (undo-tree-id77826 . -151) (undo-tree-id77827 . -156) (undo-tree-id77828 . -156) (undo-tree-id77829 . -156) (undo-tree-id77830 . -156) (undo-tree-id77831 . -156) (undo-tree-id77832 . -156) (undo-tree-id77833 . -159) (undo-tree-id77834 . -159) (undo-tree-id77835 . -159) (undo-tree-id77836 . -159) (undo-tree-id77837 . -159) (undo-tree-id77838 . -159) (undo-tree-id77839 . -165) (undo-tree-id77840 . -165) (undo-tree-id77841 . -165) (undo-tree-id77842 . -165) (undo-tree-id77843 . -165) (undo-tree-id77844 . -165) (undo-tree-id77845 . -175) (undo-tree-id77846 . -175) (undo-tree-id77847 . -175) (undo-tree-id77848 . -175) (undo-tree-id77849 . -175) (undo-tree-id77850 . -175) (undo-tree-id77851 . -178) (undo-tree-id77852 . -178) (undo-tree-id77853 . -178) (undo-tree-id77854 . -178) (undo-tree-id77855 . -178) (undo-tree-id77856 . -178) (undo-tree-id77857 . -184) (undo-tree-id77858 . -184) (undo-tree-id77859 . -184) (undo-tree-id77860 . -184) (undo-tree-id77861 . -184) (undo-tree-id77862 . -184) (undo-tree-id77863 . -184) (undo-tree-id77864 . -184) (undo-tree-id77865 . -184) (undo-tree-id77866 . -184) (undo-tree-id77867 . -184) (undo-tree-id77868 . -184) (undo-tree-id77869 . -184) (undo-tree-id77870 . -184) (undo-tree-id77871 . -184) (undo-tree-id77872 . -184) (undo-tree-id77873 . -184) (undo-tree-id77874 . -184) (undo-tree-id77875 . -184) (undo-tree-id77876 . -184) (undo-tree-id77877 . -184) (undo-tree-id77878 . -217) (undo-tree-id77879 . -217) (undo-tree-id77880 . -217) (undo-tree-id77881 . -217) (undo-tree-id77882 . -217) (undo-tree-id77883 . -217) (undo-tree-id77884 . -217) (undo-tree-id77885 . -217) (undo-tree-id77886 . -217) (undo-tree-id77887 . -217) (undo-tree-id77888 . -217) (undo-tree-id77889 . -217) (undo-tree-id77890 . -217) (undo-tree-id77891 . -217) (undo-tree-id77892 . -217) (undo-tree-id77893 . -217) (undo-tree-id77894 . -217) (undo-tree-id77895 . -217) (undo-tree-id77896 . -217) (undo-tree-id77897 . -217) (undo-tree-id77898 . -217) (undo-tree-id77899 . -217) (undo-tree-id77900 . -217) (undo-tree-id77901 . -217) (undo-tree-id77902 . -217) (undo-tree-id77903 . -217) (undo-tree-id77904 . -217) (undo-tree-id77905 . -217) (undo-tree-id77906 . -217) (undo-tree-id77907 . -217) (undo-tree-id77908 . -217) (undo-tree-id77909 . -217) (undo-tree-id77910 . -217) (undo-tree-id77911 . -217) (undo-tree-id77912 . -217) (undo-tree-id77913 . -217) (undo-tree-id77914 . -217) (undo-tree-id77915 . -217) (undo-tree-id77916 . -217) (undo-tree-id77917 . -217) (undo-tree-id77918 . -217) (undo-tree-id77919 . -217) (undo-tree-id77920 . -217) (undo-tree-id77921 . -217) (undo-tree-id77922 . -217) (undo-tree-id77923 . -217) (undo-tree-id77924 . -217) (undo-tree-id77925 . -217) (undo-tree-id77926 . -217) (undo-tree-id77927 . -217) (undo-tree-id77928 . -217) (undo-tree-id77929 . -217) (undo-tree-id77930 . -217) (undo-tree-id77931 . -217) (undo-tree-id77932 . -217) (undo-tree-id77933 . -217) (undo-tree-id77934 . -217) (undo-tree-id77935 . -217) (undo-tree-id77936 . -217) (undo-tree-id77937 . -217) (undo-tree-id77938 . -217) (undo-tree-id77939 . -217) (undo-tree-id77940 . -217) (undo-tree-id77941 . -217) (undo-tree-id77942 . -217) (undo-tree-id77943 . -217) (undo-tree-id77944 . -217) (undo-tree-id77945 . -217) (undo-tree-id77946 . -217) (undo-tree-id77947 . -217) (undo-tree-id77948 . -217) (undo-tree-id77949 . -217) (undo-tree-id77950 . -217) (undo-tree-id77951 . -217) (undo-tree-id77952 . -217) (undo-tree-id77953 . -217) (undo-tree-id77954 . -217) (undo-tree-id77955 . -217) (undo-tree-id77956 . -217) (undo-tree-id77957 . -217) (undo-tree-id77958 . -217) (undo-tree-id77959 . -217) (undo-tree-id77960 . -217) (undo-tree-id77961 . -217) (undo-tree-id77962 . -217) (undo-tree-id77963 . -217) (undo-tree-id77964 . -217) (undo-tree-id77965 . -217) (undo-tree-id77966 . -217) (undo-tree-id77967 . -217) (undo-tree-id77968 . -217) (undo-tree-id77969 . -217) (undo-tree-id77970 . -217) (undo-tree-id77971 . -217) (undo-tree-id77972 . -217) (undo-tree-id77973 . -217) (undo-tree-id77974 . -217) (undo-tree-id77975 . -217) (undo-tree-id77976 . -217) (undo-tree-id77977 . -217) (undo-tree-id77978 . -217) (undo-tree-id77979 . -217) (undo-tree-id77980 . -217) (undo-tree-id77981 . -217) (undo-tree-id77982 . -217) (undo-tree-id77983 . -217) (undo-tree-id77984 . -217) (undo-tree-id77985 . -217) (undo-tree-id77986 . -217) (undo-tree-id77987 . -217) (undo-tree-id77988 . -217) (undo-tree-id77989 . -217) (undo-tree-id77990 . -217) (undo-tree-id77991 . -217) (undo-tree-id77992 . -217) (undo-tree-id77993 . -217) (undo-tree-id77994 . -217) (undo-tree-id77995 . -217) (undo-tree-id77996 . -217) (undo-tree-id77997 . -217) (undo-tree-id77998 . -217) (undo-tree-id77999 . -217) (undo-tree-id78000 . -217) (undo-tree-id78001 . -217) (undo-tree-id78002 . -138) (15743 . 15881) (#(" then encode these words using a simple encode_words() function that uses the table we just built, and finally prefetch the next batch:" 0 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 47 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 52 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 54 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 55 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 128 129 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 129 134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 134 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 15822) (undo-tree-id78003 . -134) (undo-tree-id78004 . -135) (undo-tree-id78005 . -134) (undo-tree-id78006 . -134) (undo-tree-id78007 . -134) (undo-tree-id78008 . -134) (undo-tree-id78009 . -134) (undo-tree-id78010 . -134) (undo-tree-id78011 . -134) (undo-tree-id78012 . -134) (undo-tree-id78013 . -134) (undo-tree-id78014 . -134) (undo-tree-id78015 . -134) (undo-tree-id78016 . -134) (undo-tree-id78017 . -134) (undo-tree-id78018 . -134) (undo-tree-id78019 . -134) (undo-tree-id78020 . -134) (undo-tree-id78021 . -134) (undo-tree-id78022 . -134) (undo-tree-id78023 . -134) (undo-tree-id78024 . -134) (undo-tree-id78025 . -134) (undo-tree-id78026 . -134) (undo-tree-id78027 . -73) (undo-tree-id78028 . -73) (undo-tree-id78029 . -73) (undo-tree-id78030 . -73) (undo-tree-id78031 . -73) (undo-tree-id78032 . -73) (undo-tree-id78033 . -73) (undo-tree-id78034 . -73) (undo-tree-id78035 . -73) (undo-tree-id78036 . -73) (undo-tree-id78037 . -73) (undo-tree-id78038 . -9) (undo-tree-id78039 . -9) (undo-tree-id78040 . -9) (undo-tree-id78041 . -9) (undo-tree-id78042 . -9) (undo-tree-id78043 . -9) (undo-tree-id78044 . -9) (undo-tree-id78045 . -9) (undo-tree-id78046 . -9) (undo-tree-id78047 . -9) (undo-tree-id78048 . -9) (undo-tree-id78049 . -9) (undo-tree-id78050 . -9) (undo-tree-id78051 . -9) (undo-tree-id78052 . -9) (undo-tree-id78053 . -9) (undo-tree-id78054 . -6) (undo-tree-id78055 . -6) (undo-tree-id78056 . -6) (undo-tree-id78057 . -6) (undo-tree-id78058 . -6) (undo-tree-id78059 . -6) (undo-tree-id78060 . -6) (undo-tree-id78061 . -6) (undo-tree-id78062 . -6) (undo-tree-id78063 . -6) (undo-tree-id78064 . -6) (undo-tree-id78065 . -1) (undo-tree-id78066 . -1) (undo-tree-id78067 . -1) (undo-tree-id78068 . -1) (undo-tree-id78069 . -1) (undo-tree-id78070 . -1) (undo-tree-id78071 . -1) (undo-tree-id78072 . -1) (undo-tree-id78073 . -1) (undo-tree-id78074 . -1) (undo-tree-id78075 . -1) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -15822) (undo-tree-id78076 . -1) (undo-tree-id78077 . -1) (undo-tree-id78078 . -1) (undo-tree-id78079 . -1) (undo-tree-id78080 . -1) (undo-tree-id78081 . -1) (undo-tree-id78082 . -1) (undo-tree-id78083 . -1) (undo-tree-id78084 . -1) (undo-tree-id78085 . -1) (undo-tree-id78086 . -1) (undo-tree-id78087 . -1) (undo-tree-id78088 . -1) (undo-tree-id78089 . -1) (undo-tree-id78090 . -1) (undo-tree-id78091 . -1) (undo-tree-id78092 . -1) (undo-tree-id78093 . -1) (undo-tree-id78094 . -1) (undo-tree-id78095 . -1) 15823) nil (25767 18375 282231 854000) 0 nil])
([nil nil ((15824 . 15959) (#("- finally prefetch the next batch:

- then encode these words using a simple encode_words() function that uses the table we just built," 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 27 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 27 28 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 28 33 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 33 34 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 35 36 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 36 37 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 37 38 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 38 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 83 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 84 89 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 89 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 91 92 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 92 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 100 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 15824) (undo-tree-id78571 . -135) (undo-tree-id78572 . -135) (undo-tree-id78573 . -135) (undo-tree-id78574 . -135) (undo-tree-id78575 . 97) (undo-tree-id78576 . -135) (undo-tree-id78577 . -38) (undo-tree-id78578 . -38) (undo-tree-id78579 . -38) (undo-tree-id78580 . -38) (undo-tree-id78581 . -38) (undo-tree-id78582 . -38) (undo-tree-id78583 . -38) (undo-tree-id78584 . -38) (undo-tree-id78585 . -38) (undo-tree-id78586 . -38) (undo-tree-id78587 . -38) (undo-tree-id78588 . -38) (undo-tree-id78589 . -37) (undo-tree-id78590 . -37) (undo-tree-id78591 . -37) (undo-tree-id78592 . -37) (undo-tree-id78593 . -37) (undo-tree-id78594 . -37) (undo-tree-id78595 . -37) (undo-tree-id78596 . -37) (undo-tree-id78597 . -37) (undo-tree-id78598 . -37) (undo-tree-id78599 . -37) (undo-tree-id78600 . -37) (undo-tree-id78601 . -37) (undo-tree-id78602 . -37) (undo-tree-id78603 . -37) (undo-tree-id78604 . -37) (undo-tree-id78605 . -37) (undo-tree-id78606 . -37) (undo-tree-id78607 . -37) (undo-tree-id78608 . -37) (undo-tree-id78609 . -37) (undo-tree-id78610 . -37) (undo-tree-id78611 . -37) (undo-tree-id78612 . -37) (undo-tree-id78613 . -37) (undo-tree-id78614 . -37) (undo-tree-id78615 . -37) (undo-tree-id78616 . -37) (undo-tree-id78617 . -37) (undo-tree-id78618 . -37) (undo-tree-id78619 . -37) (undo-tree-id78620 . -37) (undo-tree-id78621 . -37) (undo-tree-id78622 . -37) (undo-tree-id78623 . -37) (undo-tree-id78624 . -135) (undo-tree-id78625 . -135) (undo-tree-id78626 . -135) (undo-tree-id78627 . -135) (undo-tree-id78628 . -135) (undo-tree-id78629 . -135) (undo-tree-id78630 . -101) (undo-tree-id78631 . -101) (undo-tree-id78632 . -101) (undo-tree-id78633 . -101) (undo-tree-id78634 . -101) (undo-tree-id78635 . -101) (undo-tree-id78636 . -37) (undo-tree-id78637 . -37) (undo-tree-id78638 . -37) (undo-tree-id78639 . -37) (undo-tree-id78640 . -37) (undo-tree-id78641 . -37) (undo-tree-id78642 . -37) (undo-tree-id78643 . -37) (undo-tree-id78644 . -37) (undo-tree-id78645 . -37) (undo-tree-id78646 . -37) (undo-tree-id78647 . -37) (undo-tree-id78648 . -37) (undo-tree-id78649 . -37) (undo-tree-id78650 . -37) (undo-tree-id78651 . -37) (undo-tree-id78652 . -37) (undo-tree-id78653 . -101) (undo-tree-id78654 . -101) (undo-tree-id78655 . -101) (undo-tree-id78656 . -101) (undo-tree-id78657 . -101) (undo-tree-id78658 . -101) (undo-tree-id78659 . -101) (undo-tree-id78660 . -101) (undo-tree-id78661 . -101) (undo-tree-id78662 . -101) (undo-tree-id78663 . -101) (undo-tree-id78664 . -101) (undo-tree-id78665 . -101) (undo-tree-id78666 . -101) (undo-tree-id78667 . -101) (undo-tree-id78668 . -101) (undo-tree-id78669 . -101) (undo-tree-id78670 . -101) (undo-tree-id78671 . -101) (undo-tree-id78672 . -101) (undo-tree-id78673 . -101) (undo-tree-id78674 . -101) (undo-tree-id78675 . -101) (undo-tree-id78676 . -101) (undo-tree-id78677 . -101) (undo-tree-id78678 . -101) (undo-tree-id78679 . -101) (undo-tree-id78680 . -101) (undo-tree-id78681 . -101) (undo-tree-id78682 . -101) (undo-tree-id78683 . -101) (undo-tree-id78684 . -101) (undo-tree-id78685 . -101) (undo-tree-id78686 . -101) (undo-tree-id78687 . -101) (undo-tree-id78688 . -101) (undo-tree-id78689 . -101) (undo-tree-id78690 . -101) (undo-tree-id78691 . -101) (undo-tree-id78692 . -101) (undo-tree-id78693 . -101) (undo-tree-id78694 . -101) (undo-tree-id78695 . -101) (undo-tree-id78696 . -101) (undo-tree-id78697 . -101) (undo-tree-id78698 . -101) (undo-tree-id78699 . -101) (undo-tree-id78700 . -101) (undo-tree-id78701 . -101) (undo-tree-id78702 . -101) (undo-tree-id78703 . -101) (undo-tree-id78704 . -101) (undo-tree-id78705 . -101) (undo-tree-id78706 . -101) (undo-tree-id78707 . -101) (undo-tree-id78708 . -101) (undo-tree-id78709 . -101) (undo-tree-id78710 . -101) (undo-tree-id78711 . -101) (undo-tree-id78712 . -101) (undo-tree-id78713 . -101) (undo-tree-id78714 . -101) (undo-tree-id78715 . -101) (undo-tree-id78716 . -101) (undo-tree-id78717 . -101) (undo-tree-id78718 . -101) (undo-tree-id78719 . -101) (undo-tree-id78720 . -101) (undo-tree-id78721 . -101) (undo-tree-id78722 . -101) (undo-tree-id78723 . -101) (undo-tree-id78724 . -101) (undo-tree-id78725 . -101) (undo-tree-id78726 . -101) (undo-tree-id78727 . -101) (undo-tree-id78728 . -101) (undo-tree-id78729 . -134) (undo-tree-id78730 . -134) (undo-tree-id78731 . -134) (undo-tree-id78732 . -134) (undo-tree-id78733 . -134) (undo-tree-id78734 . -134) (undo-tree-id78735 . -134) (undo-tree-id78736 . -134) (undo-tree-id78737 . -134) (undo-tree-id78738 . -134) (undo-tree-id78739 . -134) (undo-tree-id78740 . -134) (undo-tree-id78741 . -134) (undo-tree-id78742 . -134) (undo-tree-id78743 . -134) (undo-tree-id78744 . -134) (undo-tree-id78745 . -135) (undo-tree-id78746 . -135) (undo-tree-id78747 . -135) (undo-tree-id78748 . -135) (undo-tree-id78749 . -135) (undo-tree-id78750 . -135) (undo-tree-id78751 . -135) (undo-tree-id78752 . -135) (undo-tree-id78753 . -135) (undo-tree-id78754 . -135) (undo-tree-id78755 . -135) (undo-tree-id78756 . -135) (undo-tree-id78757 . -135) (undo-tree-id78758 . -135) (undo-tree-id78759 . -135) (undo-tree-id78760 . -135) (undo-tree-id78761 . -135) (undo-tree-id78762 . -135) (undo-tree-id78763 . -135) (undo-tree-id78764 . -135) (undo-tree-id78765 . -135) (undo-tree-id78766 . -135) (undo-tree-id78767 . -135) (undo-tree-id78768 . -135) (undo-tree-id78769 . -135) (undo-tree-id78770 . -135) (undo-tree-id78771 . -135) (undo-tree-id78772 . -135) (undo-tree-id78773 . -135) (undo-tree-id78774 . -135) (undo-tree-id78775 . -135) (undo-tree-id78776 . -135) (undo-tree-id78777 . -135) (undo-tree-id78778 . -135) (undo-tree-id78779 . -135) (undo-tree-id78780 . -135) (undo-tree-id78781 . -135) (undo-tree-id78782 . -135) (undo-tree-id78783 . -135) (undo-tree-id78784 . -135) (undo-tree-id78785 . -135) (undo-tree-id78786 . -135) (undo-tree-id78787 . -135) (undo-tree-id78788 . -135) (undo-tree-id78789 . -135) (undo-tree-id78790 . -135) (undo-tree-id78791 . -135) (undo-tree-id78792 . -135) (undo-tree-id78793 . -135) (undo-tree-id78794 . -135) (undo-tree-id78795 . -135) (undo-tree-id78796 . -135) (undo-tree-id78797 . -135) (undo-tree-id78798 . -135) (undo-tree-id78799 . -135) (undo-tree-id78800 . -135) (undo-tree-id78801 . -135) (undo-tree-id78802 . -135) (undo-tree-id78803 . -135) (undo-tree-id78804 . -135) (undo-tree-id78805 . -135) (undo-tree-id78806 . -135) (undo-tree-id78807 . -135) (undo-tree-id78808 . -135) (undo-tree-id78809 . -135) (undo-tree-id78810 . -135) (undo-tree-id78811 . -135) (undo-tree-id78812 . -135) (undo-tree-id78813 . -135) (undo-tree-id78814 . -36) (15824 . 15860) (#("  finally prefetch the next batch:" 0 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 27 28 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 28 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 33 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 15923) (undo-tree-id78815 . -1) (undo-tree-id78816 . -1) (undo-tree-id78817 . -1) (undo-tree-id78818 . -1) (undo-tree-id78819 . 33) (undo-tree-id78820 . -1) (undo-tree-id78821 . -28) (undo-tree-id78822 . -28) (undo-tree-id78823 . -28) (undo-tree-id78824 . -28) (undo-tree-id78825 . -28) (undo-tree-id78826 . -28) (undo-tree-id78827 . -1) (undo-tree-id78828 . -1) (undo-tree-id78829 . -1) (undo-tree-id78830 . -1) (undo-tree-id78831 . -1) (undo-tree-id78832 . -1) (undo-tree-id78833 . -1) (undo-tree-id78834 . -1) (undo-tree-id78835 . -1) (undo-tree-id78836 . -1) (undo-tree-id78837 . -1) (undo-tree-id78838 . -1) (undo-tree-id78839 . -1) (undo-tree-id78840 . -1) (undo-tree-id78841 . -1) (undo-tree-id78842 . -1) (undo-tree-id78843 . -1) (undo-tree-id78844 . -1) (undo-tree-id78845 . -1) (undo-tree-id78846 . -1) (undo-tree-id78847 . -1) (undo-tree-id78848 . -1) (undo-tree-id78849 . -1) (undo-tree-id78850 . -1) (undo-tree-id78851 . -1) (undo-tree-id78852 . -1) (undo-tree-id78853 . -1) (undo-tree-id78854 . -1) (undo-tree-id78855 . -1) (undo-tree-id78856 . -1) (undo-tree-id78857 . -1) (undo-tree-id78858 . -1) (undo-tree-id78859 . -1) (undo-tree-id78860 . -1) (undo-tree-id78861 . -1) (undo-tree-id78862 . -1) (undo-tree-id78863 . -1) (undo-tree-id78864 . -1) (undo-tree-id78865 . -1) (undo-tree-id78866 . -1) (undo-tree-id78867 . -1) (undo-tree-id78868 . -1) (undo-tree-id78869 . -1) (undo-tree-id78870 . -1) (undo-tree-id78871 . -1) (undo-tree-id78872 . -1) (undo-tree-id78873 . -1) (undo-tree-id78874 . -1) (undo-tree-id78875 . -1) (undo-tree-id78876 . -1) (undo-tree-id78877 . -1) (undo-tree-id78878 . -1) (undo-tree-id78879 . -1) (undo-tree-id78880 . -1) (undo-tree-id78881 . -1) (undo-tree-id78882 . -1) (undo-tree-id78883 . -1) (undo-tree-id78884 . -1) (undo-tree-id78885 . -1) (undo-tree-id78886 . -1) (undo-tree-id78887 . -1) (undo-tree-id78888 . -1) (undo-tree-id78889 . -1) (undo-tree-id78890 . -1) (undo-tree-id78891 . -1) (undo-tree-id78892 . -1) (undo-tree-id78893 . -1) (undo-tree-id78894 . -1) (undo-tree-id78895 . -1) 15924 (#("and" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15924) (undo-tree-id78896 . -2) (undo-tree-id78897 . -2) (undo-tree-id78898 . -2) (undo-tree-id78899 . -3) (undo-tree-id78900 . -2) (undo-tree-id78901 . -2) (undo-tree-id78902 . -2) (undo-tree-id78903 . -2) (undo-tree-id78904 . -2) (undo-tree-id78905 . -2) (undo-tree-id78906 . -2) (undo-tree-id78907 . -2) (undo-tree-id78908 . -2) (undo-tree-id78909 . -2) (undo-tree-id78910 . -2) (undo-tree-id78911 . -2) (undo-tree-id78912 . -2) (undo-tree-id78913 . -2) (undo-tree-id78914 . -2) (undo-tree-id78915 . -2) (undo-tree-id78916 . -2) (undo-tree-id78917 . -2) (undo-tree-id78918 . -3) (undo-tree-id78919 . -3) (undo-tree-id78920 . -3) 15926) nil (25767 18402 836764 557000) 0 nil] [nil nil ((15824 . 15963) (#("- that uses the table we just built, and finally prefetch the next batch:

- then encode these words using a simple encode_words() function" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 66 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 72 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 73 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 74 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 75 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 75 76 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 76 77 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 77 122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 122 123 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 123 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 128 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 130 131 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 131 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 15824) (undo-tree-id77502 . 62) (undo-tree-id77503 . -139) (undo-tree-id77504 . -77) (undo-tree-id77505 . -77) (undo-tree-id77506 . -77) (undo-tree-id77507 . -77) (undo-tree-id77508 . -77) (undo-tree-id77509 . -77) (undo-tree-id77510 . -77) (undo-tree-id77511 . -77) (undo-tree-id77512 . -77) (undo-tree-id77513 . -77) (undo-tree-id77514 . -77) (undo-tree-id77515 . -77) (undo-tree-id77516 . -76) (undo-tree-id77517 . -76) (undo-tree-id77518 . -76) (undo-tree-id77519 . -76) (undo-tree-id77520 . -76) (undo-tree-id77521 . -76) (undo-tree-id77522 . -76) (undo-tree-id77523 . -76) (undo-tree-id77524 . -76) (undo-tree-id77525 . -76) (undo-tree-id77526 . -76) (undo-tree-id77527 . -76) (undo-tree-id77528 . -76) (undo-tree-id77529 . -76) (undo-tree-id77530 . -76) (undo-tree-id77531 . -76) (undo-tree-id77532 . -76) (undo-tree-id77533 . -76) (undo-tree-id77534 . -76) (undo-tree-id77535 . -76) (undo-tree-id77536 . -76) (undo-tree-id77537 . -76) (undo-tree-id77538 . -76) (undo-tree-id77539 . -76) (undo-tree-id77540 . -76) (undo-tree-id77541 . -76) (undo-tree-id77542 . -76) (undo-tree-id77543 . -76) (undo-tree-id77544 . -76) (undo-tree-id77545 . -76) (undo-tree-id77546 . -76) (undo-tree-id77547 . -76) (undo-tree-id77548 . -76) (undo-tree-id77549 . -76) (undo-tree-id77550 . -76) (undo-tree-id77551 . -139) (undo-tree-id77552 . -139) (undo-tree-id77553 . -139) (undo-tree-id77554 . -139) (undo-tree-id77555 . -139) (undo-tree-id77556 . -139) (undo-tree-id77557 . -139) (undo-tree-id77558 . -139) (undo-tree-id77559 . -139) (undo-tree-id77560 . -139) (undo-tree-id77561 . -139) (undo-tree-id77562 . -139) (undo-tree-id77563 . -76) (undo-tree-id77564 . -76) (undo-tree-id77565 . -76) (undo-tree-id77566 . -76) (undo-tree-id77567 . -76) (undo-tree-id77568 . -76) (undo-tree-id77569 . -76) (undo-tree-id77570 . -76) (undo-tree-id77571 . -76) (undo-tree-id77572 . -76) (undo-tree-id77573 . -76) (undo-tree-id77574 . -76) (undo-tree-id77575 . -76) (undo-tree-id77576 . -76) (undo-tree-id77577 . -76) (undo-tree-id77578 . -76) (undo-tree-id77579 . -76) (undo-tree-id77580 . -139) (undo-tree-id77581 . -139) (undo-tree-id77582 . -139) (undo-tree-id77583 . -139) (undo-tree-id77584 . -139) (undo-tree-id77585 . -139) (undo-tree-id77586 . -139) (undo-tree-id77587 . -139) (undo-tree-id77588 . -139) (undo-tree-id77589 . -139) (undo-tree-id77590 . -139) (undo-tree-id77591 . -139) (undo-tree-id77592 . -139) (undo-tree-id77593 . -139) (undo-tree-id77594 . -139) (undo-tree-id77595 . -139) (undo-tree-id77596 . -139) (undo-tree-id77597 . -139) (undo-tree-id77598 . -139) (undo-tree-id77599 . -139) (undo-tree-id77600 . -139) (undo-tree-id77601 . -139) (undo-tree-id77602 . -139) (undo-tree-id77603 . -139) (undo-tree-id77604 . -139) (undo-tree-id77605 . -139) (undo-tree-id77606 . -139) (undo-tree-id77607 . -139) (undo-tree-id77608 . -139) (undo-tree-id77609 . -139) (undo-tree-id77610 . -139) (undo-tree-id77611 . -139) (undo-tree-id77612 . -139) (undo-tree-id77613 . -139) (undo-tree-id77614 . -139) (undo-tree-id77615 . -139) (undo-tree-id77616 . -139) (undo-tree-id77617 . -139) (undo-tree-id77618 . -139) (undo-tree-id77619 . -139) (undo-tree-id77620 . -75) (15824 . 15899) (#(" that uses the table we just built, and finally prefetch the next batch:" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 66 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 71 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 15888) (undo-tree-id77621 . -1) (undo-tree-id77622 . -66) (undo-tree-id77623 . -66) (undo-tree-id77624 . -66) (undo-tree-id77625 . -66) (undo-tree-id77626 . -66) (undo-tree-id77627 . -66) (undo-tree-id77628 . -1) (undo-tree-id77629 . -1) (undo-tree-id77630 . -1) (undo-tree-id77631 . -1) (undo-tree-id77632 . -1) (undo-tree-id77633 . -1) (undo-tree-id77634 . -1) (undo-tree-id77635 . -1) (undo-tree-id77636 . -1) (undo-tree-id77637 . -1) (undo-tree-id77638 . -1) (undo-tree-id77639 . -1) (undo-tree-id77640 . -1) (undo-tree-id77641 . -1) (undo-tree-id77642 . -1) (undo-tree-id77643 . -1) (undo-tree-id77644 . -1) (undo-tree-id77645 . -1) (undo-tree-id77646 . -1) (undo-tree-id77647 . -1) (undo-tree-id77648 . -1) (undo-tree-id77649 . -1) (undo-tree-id77650 . -1) (undo-tree-id77651 . -1) (undo-tree-id77652 . -1) (undo-tree-id77653 . -1) (undo-tree-id77654 . -1) (undo-tree-id77655 . -1) (undo-tree-id77656 . -1) (undo-tree-id77657 . -1) (undo-tree-id77658 . -1) (undo-tree-id77659 . -1) (undo-tree-id77660 . -1) (undo-tree-id77661 . -1) (undo-tree-id77662 . -1) (undo-tree-id77663 . -1) (undo-tree-id77664 . -1) (undo-tree-id77665 . -1) (undo-tree-id77666 . -1) (undo-tree-id77667 . -1) (undo-tree-id77668 . -1) (undo-tree-id77669 . -1) (undo-tree-id77670 . -1) (undo-tree-id77671 . -1) (undo-tree-id77672 . -1) (undo-tree-id77673 . -1) 15889) ((15888 . 15960) (#("- that uses the table we just built, and finally prefetch the next batch:

" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 66 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 67 72 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 72 73 (rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 73 74 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 74 75 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 15824) (15824 . 15963) (#("- then encode these words using a simple encode_words() function

- that uses the table we just built, and finally prefetch the next batch:" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 47 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 47 48 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) invisible t) 48 53 (display ((raise -0.3) (height 0.7)) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 53 55 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 55 56 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 56 64 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 64 65 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 65 66 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226])) 67 68 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 68 132 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 132 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 133 138 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 138 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 15824) (undo-tree-id78427 . 71) (undo-tree-id78428 . -67) (undo-tree-id78429 . -67) (undo-tree-id78430 . -67)) (25767 18375 279984 336000) 0 nil])
([nil nil ((#("finally " 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 15927) (undo-tree-id78561 . -7) (undo-tree-id78562 . -7) (undo-tree-id78563 . 8) (undo-tree-id78564 . -7) (undo-tree-id78565 . -8) (undo-tree-id78566 . -7) (undo-tree-id78567 . -6) (undo-tree-id78568 . -7) (undo-tree-id78569 . -7) (undo-tree-id78570 . -8) 15934) nil (25767 18402 836357 988000) 0 nil])
nil
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t)) . 15950) (undo-tree-id78558 . -1) (undo-tree-id78559 . -1) (undo-tree-id78560 . -1)) nil (25767 18402 836350 55000) 0 nil])
([nil nil ((#("def encode_words(X_batch, y_batch):
return table.lookup(X_batch), y_batch
train_set = datasets[\"train\"].batch(32).map(preprocess)
train_set = train_set.map(encode_words).prefetch(1)
At last we can create the model and train it:
embed_size = 128
model = keras.models.Sequential([
keras.layers.Embedding(vocab_size + num_oov_buckets, embed_size,
input_shape=[None]),
keras.layers.GRU(128, return_sequences=True),
keras.layers.GRU(128),
keras.layers.Dense(1, activation=\"sigmoid\")
])
model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\",
metrics=[\"accuracy\"])
history = model.fit(train_set, epochs=5)
" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 11 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 16 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 19 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 24 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 28 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 33 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 57 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 58 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 63 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 67 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 68 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 73 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 79 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 80 83 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 83 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 130 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 135 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 136 139 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 139 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 147 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 148 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 155 162 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 162 163 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 163 168 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 168 182 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 182 228 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 228 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 233 234 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 234 238 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 238 245 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 245 279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 279 307 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 307 308 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 308 312 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 312 318 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 318 319 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 319 322 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 322 323 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 323 330 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 330 337 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 337 338 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 338 342 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 342 344 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 344 349 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 349 350 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 350 355 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 355 365 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 365 393 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 393 394 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 394 403 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 403 411 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 411 434 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 434 478 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 478 481 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 481 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 500 507 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 507 508 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 508 520 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 520 541 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 541 563 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 563 588 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 588 589 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 589 592 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 592 604 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 15952) (undo-tree-id78431 . -603) (undo-tree-id78432 . -563) (undo-tree-id78433 . 486) (undo-tree-id78434 . -128) (undo-tree-id78435 . -563) (undo-tree-id78436 . 136) (undo-tree-id78437 . -475) (undo-tree-id78438 . -604) (undo-tree-id78439 . -563) (undo-tree-id78440 . -36) (undo-tree-id78441 . -36) (undo-tree-id78442 . -36) (undo-tree-id78443 . -36) (undo-tree-id78444 . -36) (undo-tree-id78445 . -36) (undo-tree-id78446 . -74) (undo-tree-id78447 . -74) (undo-tree-id78448 . -74) (undo-tree-id78449 . -74) (undo-tree-id78450 . -74) (undo-tree-id78451 . -74) (undo-tree-id78452 . -130) (undo-tree-id78453 . -130) (undo-tree-id78454 . -130) (undo-tree-id78455 . -130) (undo-tree-id78456 . -130) (undo-tree-id78457 . -130) (undo-tree-id78458 . -182) (undo-tree-id78459 . -182) (undo-tree-id78460 . -182) (undo-tree-id78461 . -182) (undo-tree-id78462 . -182) (undo-tree-id78463 . -182) (undo-tree-id78464 . -228) (undo-tree-id78465 . -228) (undo-tree-id78466 . -228) (undo-tree-id78467 . -228) (undo-tree-id78468 . -228) (undo-tree-id78469 . -228) (undo-tree-id78470 . -245) (undo-tree-id78471 . -245) (undo-tree-id78472 . -245) (undo-tree-id78473 . -245) (undo-tree-id78474 . -245) (undo-tree-id78475 . -245) (undo-tree-id78476 . -279) (undo-tree-id78477 . -279) (undo-tree-id78478 . -279) (undo-tree-id78479 . -279) (undo-tree-id78480 . -279) (undo-tree-id78481 . -279) (undo-tree-id78482 . -344) (undo-tree-id78483 . -344) (undo-tree-id78484 . -344) (undo-tree-id78485 . -344) (undo-tree-id78486 . -344) (undo-tree-id78487 . -344) (undo-tree-id78488 . -365) (undo-tree-id78489 . -365) (undo-tree-id78490 . -365) (undo-tree-id78491 . -365) (undo-tree-id78492 . -365) (undo-tree-id78493 . -365) (undo-tree-id78494 . -411) (undo-tree-id78495 . -411) (undo-tree-id78496 . -411) (undo-tree-id78497 . -411) (undo-tree-id78498 . -411) (undo-tree-id78499 . -411) (undo-tree-id78500 . -434) (undo-tree-id78501 . -434) (undo-tree-id78502 . -434) (undo-tree-id78503 . -434) (undo-tree-id78504 . -434) (undo-tree-id78505 . -434) (undo-tree-id78506 . -478) (undo-tree-id78507 . -478) (undo-tree-id78508 . -478) (undo-tree-id78509 . -478) (undo-tree-id78510 . -478) (undo-tree-id78511 . -478) (undo-tree-id78512 . -481) (undo-tree-id78513 . -481) (undo-tree-id78514 . -481) (undo-tree-id78515 . -481) (undo-tree-id78516 . -481) (undo-tree-id78517 . -481) (undo-tree-id78518 . -481) (undo-tree-id78519 . -481) (undo-tree-id78520 . -541) (undo-tree-id78521 . -541) (undo-tree-id78522 . -541) (undo-tree-id78523 . -541) (undo-tree-id78524 . -541) (undo-tree-id78525 . -541) (undo-tree-id78526 . -563) (undo-tree-id78527 . -563) (undo-tree-id78528 . -563) (undo-tree-id78529 . -563) (undo-tree-id78530 . -563) (undo-tree-id78531 . -563) (undo-tree-id78532 . -541) (undo-tree-id78533 . -541) (undo-tree-id78534 . -541) (undo-tree-id78535 . -541) (undo-tree-id78536 . -541) (undo-tree-id78537 . -541) (undo-tree-id78538 . -481) (undo-tree-id78539 . -481) (undo-tree-id78540 . -481) (undo-tree-id78541 . -481) (undo-tree-id78542 . -481) (undo-tree-id78543 . -481) (undo-tree-id78544 . -541) (undo-tree-id78545 . -541) (undo-tree-id78546 . -541) (undo-tree-id78547 . -541) (undo-tree-id78548 . -541) (undo-tree-id78549 . -541) (undo-tree-id78550 . -563) (undo-tree-id78551 . -563) (undo-tree-id78552 . -563) (undo-tree-id78553 . -563) (undo-tree-id78554 . -563) (undo-tree-id78555 . -563) (undo-tree-id78556 . -563) (undo-tree-id78557 . -604) 16515) nil (25767 18402 836341 215000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14507 . 14508) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -15111) (14507 . 15112)) nil (25767 18402 835974 87000) 0 nil])
([nil nil ((14545 . 14548) (14544 . 14545) (t 25767 18402 920403 740000)) nil (25767 18412 685286 81000) 0 nil])
([nil nil ((14694 . 14695)) nil (25767 18412 685279 503000) 0 nil])
([nil nil ((16561 . 16563) (t 25767 18412 828641 858000)) nil (25767 18444 451795 659000) 0 nil])
([nil nil ((16634 . 16635) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16634) (undo-tree-id79061 . -1) (undo-tree-id79062 . -1) (undo-tree-id79063 . -1) (undo-tree-id79064 . -1) (undo-tree-id79065 . -1) (undo-tree-id79066 . -1) (undo-tree-id79067 . -1) (undo-tree-id79068 . -1) (undo-tree-id79069 . -1) (undo-tree-id79070 . -1) (undo-tree-id79071 . -1) (undo-tree-id79072 . -1) 16621) nil (25767 18444 451793 668000) 0 nil])
([nil nil ((#("(introduced in Chapter 13)" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16646) (undo-tree-id79014 . -25) (undo-tree-id79015 . -1) (undo-tree-id79016 . -1) (undo-tree-id79017 . -1) (undo-tree-id79018 . -1) (undo-tree-id79019 . -1) (undo-tree-id79020 . -1) (undo-tree-id79021 . -1) (undo-tree-id79022 . -1) (undo-tree-id79023 . -1) (undo-tree-id79024 . -1) (undo-tree-id79025 . -1) (undo-tree-id79026 . -1) (undo-tree-id79027 . -1) (undo-tree-id79028 . -1) (undo-tree-id79029 . -1) (undo-tree-id79030 . -1) (undo-tree-id79031 . -1) (undo-tree-id79032 . -1) (undo-tree-id79033 . -1) (undo-tree-id79034 . -1) (undo-tree-id79035 . -1) (undo-tree-id79036 . -1) (undo-tree-id79037 . -1) (undo-tree-id79038 . -1) (undo-tree-id79039 . -1) (undo-tree-id79040 . -1) (undo-tree-id79041 . -1) (undo-tree-id79042 . -1) (undo-tree-id79043 . -1) (undo-tree-id79044 . -1) (undo-tree-id79045 . -1) (undo-tree-id79046 . -1) (undo-tree-id79047 . -1) (undo-tree-id79048 . -1) (undo-tree-id79049 . -1) (undo-tree-id79050 . -1) (undo-tree-id79051 . -1) (undo-tree-id79052 . -1) (undo-tree-id79053 . -1) (undo-tree-id79054 . -1) (undo-tree-id79055 . -1) (undo-tree-id79056 . -1) (undo-tree-id79057 . -1) (undo-tree-id79058 . -1) (undo-tree-id79059 . -1) (undo-tree-id79060 . -26) 16647) nil (25767 18444 451782 748000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16645) (undo-tree-id78940 . -1) (undo-tree-id78941 . -1) (undo-tree-id78942 . -1) (undo-tree-id78943 . -1) (undo-tree-id78944 . -1) (undo-tree-id78945 . -1) (undo-tree-id78946 . -1) (undo-tree-id78947 . -1) (undo-tree-id78948 . -1) (undo-tree-id78949 . -1) (undo-tree-id78950 . -1) (undo-tree-id78951 . -1) (undo-tree-id78952 . -1) (undo-tree-id78953 . -1) (undo-tree-id78954 . -1) (undo-tree-id78955 . -1) (undo-tree-id78956 . -1) (undo-tree-id78957 . -1) (undo-tree-id78958 . -1) (undo-tree-id78959 . -1) (undo-tree-id78960 . -1) (undo-tree-id78961 . -1) (undo-tree-id78962 . -1) (undo-tree-id78963 . -1) (undo-tree-id78964 . -1) (undo-tree-id78965 . -1) (undo-tree-id78966 . -1) (undo-tree-id78967 . -1) (undo-tree-id78968 . -1) (undo-tree-id78969 . -1) (undo-tree-id78970 . -1) (undo-tree-id78971 . -1) (undo-tree-id78972 . -1) (undo-tree-id78973 . -1) (undo-tree-id78974 . -1) (undo-tree-id78975 . -1) (undo-tree-id78976 . -1) (undo-tree-id78977 . -1) (undo-tree-id78978 . -1) (undo-tree-id78979 . -1) (undo-tree-id78980 . -1) (undo-tree-id78981 . -1) (undo-tree-id78982 . -1) (undo-tree-id78983 . -1) (undo-tree-id78984 . -1) (undo-tree-id78985 . -1) (undo-tree-id78986 . -1) (undo-tree-id78987 . -1) (undo-tree-id78988 . -1) (undo-tree-id78989 . -1) (undo-tree-id78990 . -1) (undo-tree-id78991 . -1) (undo-tree-id78992 . -1) (undo-tree-id78993 . -1) (undo-tree-id78994 . -1) (undo-tree-id78995 . -1) (undo-tree-id78996 . -1) (undo-tree-id78997 . -1) (undo-tree-id78998 . -1) (undo-tree-id78999 . -1) (undo-tree-id79000 . -1) (undo-tree-id79001 . -1) (undo-tree-id79002 . -1) (undo-tree-id79003 . -1) (undo-tree-id79004 . -1) (undo-tree-id79005 . -1) (undo-tree-id79006 . -1) (undo-tree-id79007 . -1) (undo-tree-id79008 . -1) (undo-tree-id79009 . -1) (undo-tree-id79010 . -1) (undo-tree-id79011 . -1) (undo-tree-id79012 . -1) (undo-tree-id79013 . -1)) nil (25767 18444 451198 59000) 0 nil])
([nil nil ((16648 . 16650) (16647 . 16648)) nil (25767 18444 451148 139000) 0 nil])
([nil nil ((16679 . 16680) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16679) (undo-tree-id78933 . -1) (undo-tree-id78934 . -1) (undo-tree-id78935 . -1) (undo-tree-id78936 . -1) (undo-tree-id78937 . -1) (undo-tree-id78938 . -1) (undo-tree-id78939 . -1) 16649) nil (25767 18444 451146 392000) 0 nil])
([nil nil ((16743 . 16744) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16743) (undo-tree-id78921 . -1) (undo-tree-id78922 . -1) (undo-tree-id78923 . -1) (undo-tree-id78924 . -1) (undo-tree-id78925 . -1) (undo-tree-id78926 . -1) (undo-tree-id78927 . -1) (undo-tree-id78928 . -1) (undo-tree-id78929 . -1) (undo-tree-id78930 . -1) (undo-tree-id78931 . -1) (undo-tree-id78932 . -1) 16742) nil (25767 18444 451136 654000) 0 nil])
([nil nil ((16813 . 16814) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16813) (undo-tree-id79593 . -1) 16743 (t 25767 18444 581400 690000)) nil (25767 18466 683736 624000) 0 nil])
([nil nil ((#("you could tune" 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16839) (undo-tree-id79358 . -13) (undo-tree-id79359 . -13) (undo-tree-id79360 . -13) (undo-tree-id79361 . -4) (undo-tree-id79362 . -4) (undo-tree-id79363 . -4) (undo-tree-id79364 . -4) (undo-tree-id79365 . -4) (undo-tree-id79366 . -4) (undo-tree-id79367 . -4) (undo-tree-id79368 . -4) (undo-tree-id79369 . -4) (undo-tree-id79370 . -4) (undo-tree-id79371 . -4) (undo-tree-id79372 . -4) (undo-tree-id79373 . -4) (undo-tree-id79374 . -4) (undo-tree-id79375 . -4) (undo-tree-id79376 . -4) (undo-tree-id79377 . -4) (undo-tree-id79378 . -4) (undo-tree-id79379 . -4) (undo-tree-id79380 . -4) (undo-tree-id79381 . -4) (undo-tree-id79382 . -14) (undo-tree-id79383 . -13) (undo-tree-id79384 . -2) (undo-tree-id79385 . -2) (undo-tree-id79386 . -2) (undo-tree-id79387 . -2) (undo-tree-id79388 . -2) (undo-tree-id79389 . -2) (undo-tree-id79390 . -2) (undo-tree-id79391 . -2) (undo-tree-id79392 . -2) (undo-tree-id79393 . -2) (undo-tree-id79394 . -2) (undo-tree-id79395 . -2) (undo-tree-id79396 . -2) (undo-tree-id79397 . -2) (undo-tree-id79398 . -2) (undo-tree-id79399 . -2) (undo-tree-id79400 . -2) (undo-tree-id79401 . -2) (undo-tree-id79402 . -2) (undo-tree-id79403 . -2) (undo-tree-id79404 . -2) (undo-tree-id79405 . -3) (undo-tree-id79406 . -3) (undo-tree-id79407 . -3) (undo-tree-id79408 . -3) (undo-tree-id79409 . -3) (undo-tree-id79410 . -3) (undo-tree-id79411 . -3) (undo-tree-id79412 . -3) (undo-tree-id79413 . -3) (undo-tree-id79414 . -3) (undo-tree-id79415 . -3) (undo-tree-id79416 . -3) (undo-tree-id79417 . -3) (undo-tree-id79418 . -3) (undo-tree-id79419 . -3) (undo-tree-id79420 . -3) (undo-tree-id79421 . -4) (undo-tree-id79422 . -4) (undo-tree-id79423 . -4) (undo-tree-id79424 . -4) (undo-tree-id79425 . -4) (undo-tree-id79426 . -4) (undo-tree-id79427 . -4) (undo-tree-id79428 . -4) (undo-tree-id79429 . -4) (undo-tree-id79430 . -4) (undo-tree-id79431 . -4) (undo-tree-id79432 . -4) (undo-tree-id79433 . -4) (undo-tree-id79434 . -4) (undo-tree-id79435 . -4) (undo-tree-id79436 . -4) (undo-tree-id79437 . -5) (undo-tree-id79438 . -5) (undo-tree-id79439 . -5) (undo-tree-id79440 . -5) (undo-tree-id79441 . -5) (undo-tree-id79442 . -5) (undo-tree-id79443 . -5) (undo-tree-id79444 . -5) (undo-tree-id79445 . -5) (undo-tree-id79446 . -5) (undo-tree-id79447 . -5) (undo-tree-id79448 . -5) (undo-tree-id79449 . -5) (undo-tree-id79450 . -5) (undo-tree-id79451 . -5) (undo-tree-id79452 . -5) (undo-tree-id79453 . -6) (undo-tree-id79454 . -6) (undo-tree-id79455 . -6) (undo-tree-id79456 . -6) (undo-tree-id79457 . -6) (undo-tree-id79458 . -6) (undo-tree-id79459 . -6) (undo-tree-id79460 . -6) (undo-tree-id79461 . -6) (undo-tree-id79462 . -6) (undo-tree-id79463 . -6) (undo-tree-id79464 . -6) (undo-tree-id79465 . -6) (undo-tree-id79466 . -6) (undo-tree-id79467 . -6) (undo-tree-id79468 . -6) (undo-tree-id79469 . -7) (undo-tree-id79470 . -7) (undo-tree-id79471 . -7) (undo-tree-id79472 . -7) (undo-tree-id79473 . -7) (undo-tree-id79474 . -7) (undo-tree-id79475 . -7) (undo-tree-id79476 . -7) (undo-tree-id79477 . -7) (undo-tree-id79478 . -7) (undo-tree-id79479 . -7) (undo-tree-id79480 . -7) (undo-tree-id79481 . -7) (undo-tree-id79482 . -7) (undo-tree-id79483 . -7) (undo-tree-id79484 . -7) (undo-tree-id79485 . -8) (undo-tree-id79486 . -8) (undo-tree-id79487 . -8) (undo-tree-id79488 . -8) (undo-tree-id79489 . -8) (undo-tree-id79490 . -8) (undo-tree-id79491 . -8) (undo-tree-id79492 . -8) (undo-tree-id79493 . -8) (undo-tree-id79494 . -8) (undo-tree-id79495 . -8) (undo-tree-id79496 . -8) (undo-tree-id79497 . -8) (undo-tree-id79498 . -8) (undo-tree-id79499 . -8) (undo-tree-id79500 . -8) (undo-tree-id79501 . -9) (undo-tree-id79502 . -9) (undo-tree-id79503 . -9) (undo-tree-id79504 . -9) (undo-tree-id79505 . -9) (undo-tree-id79506 . -9) (undo-tree-id79507 . -9) (undo-tree-id79508 . -9) (undo-tree-id79509 . -9) (undo-tree-id79510 . -9) (undo-tree-id79511 . -9) (undo-tree-id79512 . -9) (undo-tree-id79513 . -9) (undo-tree-id79514 . -9) (undo-tree-id79515 . -9) (undo-tree-id79516 . -9) (undo-tree-id79517 . -10) (undo-tree-id79518 . -10) (undo-tree-id79519 . -10) (undo-tree-id79520 . -10) (undo-tree-id79521 . -10) (undo-tree-id79522 . -10) (undo-tree-id79523 . -10) (undo-tree-id79524 . -10) (undo-tree-id79525 . -10) (undo-tree-id79526 . -10) (undo-tree-id79527 . -10) (undo-tree-id79528 . -10) (undo-tree-id79529 . -10) (undo-tree-id79530 . -10) (undo-tree-id79531 . -10) (undo-tree-id79532 . -10) (undo-tree-id79533 . -11) (undo-tree-id79534 . -11) (undo-tree-id79535 . -11) (undo-tree-id79536 . -11) (undo-tree-id79537 . -11) (undo-tree-id79538 . -11) (undo-tree-id79539 . -11) (undo-tree-id79540 . -11) (undo-tree-id79541 . -11) (undo-tree-id79542 . -11) (undo-tree-id79543 . -11) (undo-tree-id79544 . -11) (undo-tree-id79545 . -11) (undo-tree-id79546 . -11) (undo-tree-id79547 . -11) (undo-tree-id79548 . -11) (undo-tree-id79549 . -11) (undo-tree-id79550 . -11) (undo-tree-id79551 . -11) (undo-tree-id79552 . -11) (undo-tree-id79553 . -11) (undo-tree-id79554 . -12) (undo-tree-id79555 . -12) (undo-tree-id79556 . -12) (undo-tree-id79557 . -12) (undo-tree-id79558 . -12) (undo-tree-id79559 . -12) (undo-tree-id79560 . -12) (undo-tree-id79561 . -12) (undo-tree-id79562 . -12) (undo-tree-id79563 . -12) (undo-tree-id79564 . -12) (undo-tree-id79565 . -12) (undo-tree-id79566 . -12) (undo-tree-id79567 . -12) (undo-tree-id79568 . -12) (undo-tree-id79569 . -12) (undo-tree-id79570 . -13) (undo-tree-id79571 . -13) (undo-tree-id79572 . -13) (undo-tree-id79573 . -13) (undo-tree-id79574 . -13) (undo-tree-id79575 . -13) (undo-tree-id79576 . -13) (undo-tree-id79577 . -13) (undo-tree-id79578 . -13) (undo-tree-id79579 . -13) (undo-tree-id79580 . -13) (undo-tree-id79581 . -13) (undo-tree-id79582 . -13) (undo-tree-id79583 . -13) (undo-tree-id79584 . -13) (undo-tree-id79585 . -13) (undo-tree-id79586 . -13) (undo-tree-id79587 . -13) (undo-tree-id79588 . -13) (undo-tree-id79589 . -13) (undo-tree-id79590 . -13) (undo-tree-id79591 . -13) (undo-tree-id79592 . -14) 16852) nil (25767 18466 683726 820000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16838) (undo-tree-id79073 . -1) (undo-tree-id79074 . -1) (undo-tree-id79075 . -1) (undo-tree-id79076 . -1) (undo-tree-id79077 . -1) (undo-tree-id79078 . -1) (undo-tree-id79079 . -1) (undo-tree-id79080 . -1) (undo-tree-id79081 . -1) (undo-tree-id79082 . -1) (undo-tree-id79083 . -1) (undo-tree-id79084 . -1) (undo-tree-id79085 . -1) (undo-tree-id79086 . -1) (undo-tree-id79087 . -1) (undo-tree-id79088 . -1) (undo-tree-id79089 . -1) (undo-tree-id79090 . -1) (undo-tree-id79091 . -1) (undo-tree-id79092 . -1) (undo-tree-id79093 . -1) (undo-tree-id79094 . -1) (undo-tree-id79095 . -1) (undo-tree-id79096 . -1) (undo-tree-id79097 . -1) (undo-tree-id79098 . -1) (undo-tree-id79099 . -1) (undo-tree-id79100 . -1) (undo-tree-id79101 . -1) (undo-tree-id79102 . -1) (undo-tree-id79103 . -1) (undo-tree-id79104 . -1) (undo-tree-id79105 . -1) (undo-tree-id79106 . -1) (undo-tree-id79107 . -1) (undo-tree-id79108 . -1) (undo-tree-id79109 . -1) (undo-tree-id79110 . -1) (undo-tree-id79111 . -1) (undo-tree-id79112 . -1) (undo-tree-id79113 . -1) (undo-tree-id79114 . -1) (undo-tree-id79115 . -1) (undo-tree-id79116 . -1) (undo-tree-id79117 . -1) (undo-tree-id79118 . -1) (undo-tree-id79119 . -1) (undo-tree-id79120 . -1) (undo-tree-id79121 . -1) (undo-tree-id79122 . -1) (undo-tree-id79123 . -1) (undo-tree-id79124 . -1) (undo-tree-id79125 . -1) (undo-tree-id79126 . -1) (undo-tree-id79127 . -1) (undo-tree-id79128 . -1) (undo-tree-id79129 . -1) (undo-tree-id79130 . -1) (undo-tree-id79131 . -1) (undo-tree-id79132 . -1) (undo-tree-id79133 . -1) (undo-tree-id79134 . -1) (undo-tree-id79135 . -1) (undo-tree-id79136 . -1) (undo-tree-id79137 . -1) (undo-tree-id79138 . -1) (undo-tree-id79139 . -1) (undo-tree-id79140 . -1) (undo-tree-id79141 . -1) (undo-tree-id79142 . -1) (undo-tree-id79143 . -1) (undo-tree-id79144 . -1) (undo-tree-id79145 . -1) (undo-tree-id79146 . -1) (undo-tree-id79147 . -1) (undo-tree-id79148 . -1) (undo-tree-id79149 . -1) (undo-tree-id79150 . -1) (undo-tree-id79151 . -1) (undo-tree-id79152 . -1) (undo-tree-id79153 . -1) (undo-tree-id79154 . -1) (undo-tree-id79155 . -1) (undo-tree-id79156 . -1) (undo-tree-id79157 . -1) (undo-tree-id79158 . -1) (undo-tree-id79159 . -1) (undo-tree-id79160 . -1) (undo-tree-id79161 . -1) (undo-tree-id79162 . -1) (undo-tree-id79163 . -1) (undo-tree-id79164 . -1) (undo-tree-id79165 . -1) (undo-tree-id79166 . -1) (undo-tree-id79167 . -1) (undo-tree-id79168 . -1) (undo-tree-id79169 . -1) (undo-tree-id79170 . -1) (undo-tree-id79171 . -1) (undo-tree-id79172 . -1) (undo-tree-id79173 . -1) (undo-tree-id79174 . -1) (undo-tree-id79175 . -1) (undo-tree-id79176 . -1) (undo-tree-id79177 . -1) (undo-tree-id79178 . -1) (undo-tree-id79179 . -1) (undo-tree-id79180 . -1) (undo-tree-id79181 . -1) (undo-tree-id79182 . -1) (undo-tree-id79183 . -1) (undo-tree-id79184 . -1) (undo-tree-id79185 . -1) (undo-tree-id79186 . -1) (undo-tree-id79187 . -1) (undo-tree-id79188 . -1) (undo-tree-id79189 . -1) (undo-tree-id79190 . -1) (undo-tree-id79191 . -1) (undo-tree-id79192 . -1) (undo-tree-id79193 . -1) (undo-tree-id79194 . -1) (undo-tree-id79195 . -1) (undo-tree-id79196 . -1) (undo-tree-id79197 . -1) (undo-tree-id79198 . -1) (undo-tree-id79199 . -1) (undo-tree-id79200 . -1) (undo-tree-id79201 . -1) (undo-tree-id79202 . -1) (undo-tree-id79203 . -1) (undo-tree-id79204 . -1) (undo-tree-id79205 . -1) (undo-tree-id79206 . -1) (undo-tree-id79207 . -1) (undo-tree-id79208 . -1) (undo-tree-id79209 . -1) (undo-tree-id79210 . -1) (undo-tree-id79211 . -1) (undo-tree-id79212 . -1) (undo-tree-id79213 . -1) (undo-tree-id79214 . -1) (undo-tree-id79215 . -1) (undo-tree-id79216 . -1) (undo-tree-id79217 . -1) (undo-tree-id79218 . -1) (undo-tree-id79219 . -1) (undo-tree-id79220 . -1) (undo-tree-id79221 . -1) (undo-tree-id79222 . -1) (undo-tree-id79223 . -1) (undo-tree-id79224 . -1) (undo-tree-id79225 . -1) (undo-tree-id79226 . -1) (undo-tree-id79227 . -1) (undo-tree-id79228 . -1) (undo-tree-id79229 . -1) (undo-tree-id79230 . -1) (undo-tree-id79231 . -1) (undo-tree-id79232 . -1) (undo-tree-id79233 . -1) (undo-tree-id79234 . -1) (undo-tree-id79235 . -1) (undo-tree-id79236 . -1) (undo-tree-id79237 . -1) (undo-tree-id79238 . -1) (undo-tree-id79239 . -1) (undo-tree-id79240 . -1) (undo-tree-id79241 . -1) (undo-tree-id79242 . -1) (undo-tree-id79243 . -1) (undo-tree-id79244 . -1) (undo-tree-id79245 . -1) (undo-tree-id79246 . -1) (undo-tree-id79247 . -1) (undo-tree-id79248 . -1) (undo-tree-id79249 . -1) (undo-tree-id79250 . -1) (undo-tree-id79251 . -1) (undo-tree-id79252 . -1) (undo-tree-id79253 . -1) (undo-tree-id79254 . -1) (undo-tree-id79255 . -1) (undo-tree-id79256 . -1) (undo-tree-id79257 . -1) (undo-tree-id79258 . -1) (undo-tree-id79259 . -1) (undo-tree-id79260 . -1) (undo-tree-id79261 . -1) (undo-tree-id79262 . -1) (undo-tree-id79263 . -1) (undo-tree-id79264 . -1) (undo-tree-id79265 . -1) (undo-tree-id79266 . -1) (undo-tree-id79267 . -1) (undo-tree-id79268 . -1) (undo-tree-id79269 . -1) (undo-tree-id79270 . -1) (undo-tree-id79271 . -1) (undo-tree-id79272 . -1) (undo-tree-id79273 . -1) (undo-tree-id79274 . -1) (undo-tree-id79275 . -1) (undo-tree-id79276 . -1) (undo-tree-id79277 . -1) (undo-tree-id79278 . -1) (undo-tree-id79279 . -1) (undo-tree-id79280 . -1) (undo-tree-id79281 . -1) (undo-tree-id79282 . -1) (undo-tree-id79283 . -1) (undo-tree-id79284 . -1) (undo-tree-id79285 . -1) (undo-tree-id79286 . -1) (undo-tree-id79287 . -1) (undo-tree-id79288 . -1) (undo-tree-id79289 . -1) (undo-tree-id79290 . -1) (undo-tree-id79291 . -1) (undo-tree-id79292 . -1) (undo-tree-id79293 . -1) (undo-tree-id79294 . -1) (undo-tree-id79295 . -1) (undo-tree-id79296 . -1) (undo-tree-id79297 . -1) (undo-tree-id79298 . -1) (undo-tree-id79299 . -1) (undo-tree-id79300 . -1) (undo-tree-id79301 . -1) (undo-tree-id79302 . -1) (undo-tree-id79303 . -1) (undo-tree-id79304 . -1) (undo-tree-id79305 . -1) (undo-tree-id79306 . -1) (undo-tree-id79307 . -1) (undo-tree-id79308 . -1) (undo-tree-id79309 . -1) (undo-tree-id79310 . -1) (undo-tree-id79311 . -1) (undo-tree-id79312 . -1) (undo-tree-id79313 . -1) (undo-tree-id79314 . -1) (undo-tree-id79315 . -1) (undo-tree-id79316 . -1) (undo-tree-id79317 . -1) (undo-tree-id79318 . -1) (undo-tree-id79319 . -1) (undo-tree-id79320 . -1) (undo-tree-id79321 . -1) (undo-tree-id79322 . -1) (undo-tree-id79323 . -1) (undo-tree-id79324 . -1) (undo-tree-id79325 . -1) (undo-tree-id79326 . -1) (undo-tree-id79327 . -1) (undo-tree-id79328 . -1) (undo-tree-id79329 . -1) (undo-tree-id79330 . -1) (undo-tree-id79331 . -1) (undo-tree-id79332 . -1) (undo-tree-id79333 . -1) (undo-tree-id79334 . -1) (undo-tree-id79335 . -1) (undo-tree-id79336 . -1) (undo-tree-id79337 . -1) (undo-tree-id79338 . -1) (undo-tree-id79339 . -1) (undo-tree-id79340 . -1) (undo-tree-id79341 . -1) (undo-tree-id79342 . -1) (undo-tree-id79343 . -1) (undo-tree-id79344 . -1) (undo-tree-id79345 . -1) (undo-tree-id79346 . -1) (undo-tree-id79347 . -1) (undo-tree-id79348 . -1) (undo-tree-id79349 . -1) (undo-tree-id79350 . -1) (undo-tree-id79351 . -1) (undo-tree-id79352 . -1) (undo-tree-id79353 . -1) (undo-tree-id79354 . -1) (undo-tree-id79355 . -1) (undo-tree-id79356 . -1) (undo-tree-id79357 . -1)) nil (25767 18466 683417 7000) 0 nil])
([nil nil ((16843 . 16845) (16841 . 16843) (#("-" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16841) (undo-tree-id79594 . -1) (undo-tree-id79595 . -1) (undo-tree-id79596 . -1) (undo-tree-id79597 . -1) (undo-tree-id79598 . -1) (undo-tree-id79599 . -1) (undo-tree-id79600 . -1) (undo-tree-id79601 . -1) (undo-tree-id79602 . -1) (undo-tree-id79603 . -1) (undo-tree-id79604 . -1) (undo-tree-id79605 . -1) (undo-tree-id79606 . -1) (undo-tree-id79607 . -1) (undo-tree-id79608 . -1) (undo-tree-id79609 . -1) (undo-tree-id79610 . -1) (undo-tree-id79611 . -1) (undo-tree-id79612 . -1) 16842 (16841 . 16842) (t 25767 18466 765927 161000)) nil (25767 18471 906706 359000) 0 nil])
([nil nil ((16876 . 16877) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16876) (undo-tree-id79613 . -1) 16844 (t 25767 18471 990050 713000)) nil (25767 18473 847017 414000) 0 nil])
([nil nil ((#("Whereas the " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16845) (undo-tree-id79614 . -11) (undo-tree-id79615 . -11) (undo-tree-id79616 . 12) (undo-tree-id79617 . -11) (undo-tree-id79618 . -12) (undo-tree-id79619 . -11) (undo-tree-id79620 . -6) (undo-tree-id79621 . -6) (undo-tree-id79622 . -6) (undo-tree-id79623 . -6) (undo-tree-id79624 . -6) (undo-tree-id79625 . -6) (undo-tree-id79626 . -6) (undo-tree-id79627 . -6) (undo-tree-id79628 . -6) (undo-tree-id79629 . -6) (undo-tree-id79630 . -6) (undo-tree-id79631 . -6) (undo-tree-id79632 . -6) (undo-tree-id79633 . -6) (undo-tree-id79634 . -6) (undo-tree-id79635 . -6) (undo-tree-id79636 . -10) (undo-tree-id79637 . -10) (undo-tree-id79638 . -10) (undo-tree-id79639 . -10) (undo-tree-id79640 . -10) (undo-tree-id79641 . -10) (undo-tree-id79642 . -10) (undo-tree-id79643 . -10) (undo-tree-id79644 . -10) (undo-tree-id79645 . -10) (undo-tree-id79646 . -10) (undo-tree-id79647 . -10) (undo-tree-id79648 . -10) (undo-tree-id79649 . -10) (undo-tree-id79650 . -10) (undo-tree-id79651 . -10) (undo-tree-id79652 . -10) (undo-tree-id79653 . -10) (undo-tree-id79654 . -10) (undo-tree-id79655 . -10) (undo-tree-id79656 . -10) (undo-tree-id79657 . -11) (undo-tree-id79658 . -11) (undo-tree-id79659 . -11) (undo-tree-id79660 . -11) (undo-tree-id79661 . -11) (undo-tree-id79662 . -11) (undo-tree-id79663 . -11) (undo-tree-id79664 . -11) (undo-tree-id79665 . -11) (undo-tree-id79666 . -11) (undo-tree-id79667 . -11) (undo-tree-id79668 . -11) (undo-tree-id79669 . -11) (undo-tree-id79670 . -11) (undo-tree-id79671 . -11) (undo-tree-id79672 . -11) (undo-tree-id79673 . -11) (undo-tree-id79674 . -12) (undo-tree-id79675 . -12) (undo-tree-id79676 . -12) 16856 (t 25767 18473 926096 461000)) nil (25767 18480 974170 36000) 0 nil])
([nil nil ((16845 . 16846) (#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16845)) nil (25767 18480 974064 491000) 0 nil])
([nil nil ((16843 . 16938) (#("- the output of the

- Inputs of the model will be 2D tensors of shape [batch size, time steps]" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 19 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 19 20 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 21 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 22 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 23 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 42 43 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 16843) (undo-tree-id79679 . -95) (undo-tree-id79680 . -95) (undo-tree-id79681 . -23) (undo-tree-id79682 . -23) (undo-tree-id79683 . 71) (undo-tree-id79684 . 72) (undo-tree-id79685 . -23) (undo-tree-id79686 . -23) (undo-tree-id79687 . -23) (undo-tree-id79688 . -23) (undo-tree-id79689 . -23) (undo-tree-id79690 . -23) (undo-tree-id79691 . -23) (undo-tree-id79692 . -23) (undo-tree-id79693 . -23) (undo-tree-id79694 . -23) (undo-tree-id79695 . -23) (undo-tree-id79696 . -23) (undo-tree-id79697 . -23) (undo-tree-id79698 . -23) (undo-tree-id79699 . -23) (undo-tree-id79700 . -23) (undo-tree-id79701 . -23) (undo-tree-id79702 . -23) (undo-tree-id79703 . -23) (undo-tree-id79704 . -23) (undo-tree-id79705 . -23) (undo-tree-id79706 . -23) (undo-tree-id79707 . -23) (undo-tree-id79708 . -23) (undo-tree-id79709 . -23) (undo-tree-id79710 . -23) (undo-tree-id79711 . -23) (undo-tree-id79712 . -23) (undo-tree-id79713 . -23) (undo-tree-id79714 . -23) (undo-tree-id79715 . -23) (undo-tree-id79716 . -23) (undo-tree-id79717 . -23) (undo-tree-id79718 . -23) (undo-tree-id79719 . -23) (undo-tree-id79720 . -23) (undo-tree-id79721 . -23) (undo-tree-id79722 . -23) (undo-tree-id79723 . -23) (undo-tree-id79724 . -23) (undo-tree-id79725 . -23) (undo-tree-id79726 . -23) (undo-tree-id79727 . -23) (undo-tree-id79728 . -23) (undo-tree-id79729 . -23) (undo-tree-id79730 . -23) (undo-tree-id79731 . -23) (undo-tree-id79732 . -23) (undo-tree-id79733 . -23) (undo-tree-id79734 . -23) (undo-tree-id79735 . -23) (undo-tree-id79736 . -23) (undo-tree-id79737 . -23) (undo-tree-id79738 . -23) (undo-tree-id79739 . -95) (undo-tree-id79740 . -23) (undo-tree-id79741 . -23) (undo-tree-id79742 . -23) (undo-tree-id79743 . -23) (undo-tree-id79744 . -23) (undo-tree-id79745 . -23) (undo-tree-id79746 . -23) (undo-tree-id79747 . -23) (undo-tree-id79748 . -23) (undo-tree-id79749 . -23) (undo-tree-id79750 . -23) (undo-tree-id79751 . -23) (undo-tree-id79752 . -23) (undo-tree-id79753 . -23) (undo-tree-id79754 . -23) (undo-tree-id79755 . -23) (undo-tree-id79756 . -23) (undo-tree-id79757 . -23) (undo-tree-id79758 . -23) (undo-tree-id79759 . -23) (undo-tree-id79760 . -23) (undo-tree-id79761 . -23) (undo-tree-id79762 . -23) (undo-tree-id79763 . -23) (undo-tree-id79764 . -28) (undo-tree-id79765 . -28) (undo-tree-id79766 . -28) (undo-tree-id79767 . -28) (undo-tree-id79768 . -28) (undo-tree-id79769 . -28) (undo-tree-id79770 . -28) (undo-tree-id79771 . -28) (undo-tree-id79772 . -28) (undo-tree-id79773 . -28) (undo-tree-id79774 . -28) (undo-tree-id79775 . -31) (undo-tree-id79776 . -31) (undo-tree-id79777 . -31) (undo-tree-id79778 . -31) (undo-tree-id79779 . -31) (undo-tree-id79780 . -31) (undo-tree-id79781 . -31) (undo-tree-id79782 . -31) (undo-tree-id79783 . -31) (undo-tree-id79784 . -31) (undo-tree-id79785 . -31) (undo-tree-id79786 . -31) (undo-tree-id79787 . -31) (undo-tree-id79788 . -31) (undo-tree-id79789 . -31) (undo-tree-id79790 . -31) (undo-tree-id79791 . -35) (undo-tree-id79792 . -35) (undo-tree-id79793 . -35) (undo-tree-id79794 . -35) (undo-tree-id79795 . -35) (undo-tree-id79796 . -35) (undo-tree-id79797 . -41) (undo-tree-id79798 . -41) (undo-tree-id79799 . -41) (undo-tree-id79800 . -41) (undo-tree-id79801 . -41) (undo-tree-id79802 . -41) (undo-tree-id79803 . -46) (undo-tree-id79804 . -46) (undo-tree-id79805 . -46) (undo-tree-id79806 . -46) (undo-tree-id79807 . -46) (undo-tree-id79808 . -46) (undo-tree-id79809 . -49) (undo-tree-id79810 . -49) (undo-tree-id79811 . -49) (undo-tree-id79812 . -49) (undo-tree-id79813 . -49) (undo-tree-id79814 . -49) (undo-tree-id79815 . -52) (undo-tree-id79816 . -52) (undo-tree-id79817 . -52) (undo-tree-id79818 . -52) (undo-tree-id79819 . -52) (undo-tree-id79820 . -52) (undo-tree-id79821 . -60) (undo-tree-id79822 . -60) (undo-tree-id79823 . -60) (undo-tree-id79824 . -60) (undo-tree-id79825 . -60) (undo-tree-id79826 . -60) (undo-tree-id79827 . -63) (undo-tree-id79828 . -63) (undo-tree-id79829 . -63) (undo-tree-id79830 . -63) (undo-tree-id79831 . -63) (undo-tree-id79832 . -63) (undo-tree-id79833 . -69) (undo-tree-id79834 . -69) (undo-tree-id79835 . -69) (undo-tree-id79836 . -69) (undo-tree-id79837 . -69) (undo-tree-id79838 . -69) (undo-tree-id79839 . -69) (undo-tree-id79840 . -69) (undo-tree-id79841 . -69) (undo-tree-id79842 . -69) (undo-tree-id79843 . -69) (undo-tree-id79844 . -69) (undo-tree-id79845 . -69) (undo-tree-id79846 . -69) (undo-tree-id79847 . -69) (undo-tree-id79848 . -69) (undo-tree-id79849 . -69) (undo-tree-id79850 . -69) (undo-tree-id79851 . -69) (undo-tree-id79852 . -69) (undo-tree-id79853 . -69) (undo-tree-id79854 . -69) (undo-tree-id79855 . -69) (undo-tree-id79856 . -69) (undo-tree-id79857 . -69) (undo-tree-id79858 . -69) (undo-tree-id79859 . -71) (undo-tree-id79860 . -71) (undo-tree-id79861 . -71) (undo-tree-id79862 . -71) (undo-tree-id79863 . -71) (undo-tree-id79864 . -71) (undo-tree-id79865 . -71) (undo-tree-id79866 . -71) (undo-tree-id79867 . -71) (undo-tree-id79868 . -71) (undo-tree-id79869 . -71) (undo-tree-id79870 . -76) (undo-tree-id79871 . -76) (undo-tree-id79872 . -76) (undo-tree-id79873 . -76) (undo-tree-id79874 . -76) (undo-tree-id79875 . -76) (undo-tree-id79876 . -76) (undo-tree-id79877 . -76) (undo-tree-id79878 . -76) (undo-tree-id79879 . -76) (undo-tree-id79880 . -76) (undo-tree-id79881 . -76) (undo-tree-id79882 . -76) (undo-tree-id79883 . -76) (undo-tree-id79884 . -76) (undo-tree-id79885 . -76) (undo-tree-id79886 . -81) (undo-tree-id79887 . -81) (undo-tree-id79888 . -81) (undo-tree-id79889 . -81) (undo-tree-id79890 . -81) (undo-tree-id79891 . -81) (undo-tree-id79892 . -81) (undo-tree-id79893 . -81) (undo-tree-id79894 . -81) (undo-tree-id79895 . -81) (undo-tree-id79896 . -81) (undo-tree-id79897 . -82) (undo-tree-id79898 . -82) (undo-tree-id79899 . -82) (undo-tree-id79900 . -82) (undo-tree-id79901 . -82) (undo-tree-id79902 . -82) (undo-tree-id79903 . -82) (undo-tree-id79904 . -82) (undo-tree-id79905 . -82) (undo-tree-id79906 . -82) (undo-tree-id79907 . -82) (undo-tree-id79908 . -87) (undo-tree-id79909 . -87) (undo-tree-id79910 . -87) (undo-tree-id79911 . -87) (undo-tree-id79912 . -87) (undo-tree-id79913 . -87) (undo-tree-id79914 . -87) (undo-tree-id79915 . -87) (undo-tree-id79916 . -87) (undo-tree-id79917 . -87) (undo-tree-id79918 . -87) (undo-tree-id79919 . -93) (undo-tree-id79920 . -93) (undo-tree-id79921 . -93) (undo-tree-id79922 . -93) (undo-tree-id79923 . -93) (undo-tree-id79924 . -93) (undo-tree-id79925 . -93) (undo-tree-id79926 . -93) (undo-tree-id79927 . -93) (undo-tree-id79928 . -93) (undo-tree-id79929 . -93) (undo-tree-id79930 . -95) (undo-tree-id79931 . -95) (undo-tree-id79932 . -95) (undo-tree-id79933 . -95) (undo-tree-id79934 . -95) (undo-tree-id79935 . -95) (undo-tree-id79936 . -95) (undo-tree-id79937 . -95) (undo-tree-id79938 . -95) (undo-tree-id79939 . -95) (undo-tree-id79940 . -95) (undo-tree-id79941 . -95) (undo-tree-id79942 . -95) (undo-tree-id79943 . -95) (undo-tree-id79944 . -95) (undo-tree-id79945 . -95) (undo-tree-id79946 . -95) (undo-tree-id79947 . -95) (undo-tree-id79948 . -95) (undo-tree-id79949 . -95) (undo-tree-id79950 . -95) (undo-tree-id79951 . -95) (undo-tree-id79952 . -95) (undo-tree-id79953 . -95) (undo-tree-id79954 . -95) (undo-tree-id79955 . -95) (undo-tree-id79956 . -95) (undo-tree-id79957 . -95) (undo-tree-id79958 . -95) (undo-tree-id79959 . -95) (undo-tree-id79960 . -95) (undo-tree-id79961 . -95) (undo-tree-id79962 . -95) (undo-tree-id79963 . -95) (undo-tree-id79964 . -95) (undo-tree-id79965 . -95) (undo-tree-id79966 . -95) (undo-tree-id79967 . -95) (undo-tree-id79968 . -95) (undo-tree-id79969 . -95) (undo-tree-id79970 . -95) (undo-tree-id79971 . -95) (undo-tree-id79972 . -95) (undo-tree-id79973 . -95) (undo-tree-id79974 . -95) (undo-tree-id79975 . -95) (undo-tree-id79976 . -95) (undo-tree-id79977 . -95) (undo-tree-id79978 . -95) (undo-tree-id79979 . -95) (undo-tree-id79980 . -95) (undo-tree-id79981 . -95) (undo-tree-id79982 . -95) (undo-tree-id79983 . -95) (undo-tree-id79984 . -95) (undo-tree-id79985 . -95) (undo-tree-id79986 . -95) (undo-tree-id79987 . -95) (undo-tree-id79988 . -95) (undo-tree-id79989 . -95) (undo-tree-id79990 . -95) (undo-tree-id79991 . -95) (undo-tree-id79992 . -95) (undo-tree-id79993 . -95) (undo-tree-id79994 . -95) (undo-tree-id79995 . -95) (undo-tree-id79996 . -95) (undo-tree-id79997 . -95) (undo-tree-id79998 . -95) (undo-tree-id79999 . -95) (undo-tree-id80000 . -95) (undo-tree-id80001 . -95) (undo-tree-id80002 . -95) (undo-tree-id80003 . -95) (undo-tree-id80004 . -95) (undo-tree-id80005 . -95) (undo-tree-id80006 . -95) (undo-tree-id80007 . -95) (undo-tree-id80008 . -95) (undo-tree-id80009 . -95) (undo-tree-id80010 . -95) (undo-tree-id80011 . -95) (undo-tree-id80012 . -95) (undo-tree-id80013 . -95) (undo-tree-id80014 . -95) (undo-tree-id80015 . -95) (undo-tree-id80016 . -95) (undo-tree-id80017 . -95) (undo-tree-id80018 . -95) (undo-tree-id80019 . -95) (undo-tree-id80020 . -95) (undo-tree-id80021 . -95) (undo-tree-id80022 . -95) (undo-tree-id80023 . -95) (undo-tree-id80024 . -95) (undo-tree-id80025 . -95) (undo-tree-id80026 . -95) (undo-tree-id80027 . -95) (undo-tree-id80028 . 1) (undo-tree-id80029 . -95) (undo-tree-id80030 . 24) (undo-tree-id80031 . -72) (undo-tree-id80032 . -95) (undo-tree-id80033 . -95) (undo-tree-id80034 . -95) (undo-tree-id80035 . -95) (undo-tree-id80036 . -95) (undo-tree-id80037 . -95) (undo-tree-id80038 . -95) (undo-tree-id80039 . -95) (undo-tree-id80040 . -95) (undo-tree-id80041 . -95) (undo-tree-id80042 . -95) (undo-tree-id80043 . -95) (undo-tree-id80044 . -95) (undo-tree-id80045 . -95) (undo-tree-id80046 . -95) (undo-tree-id80047 . -95) (undo-tree-id80048 . -95) (undo-tree-id80049 . -95) (undo-tree-id80050 . -95) (undo-tree-id80051 . -95) (undo-tree-id80052 . -95) (undo-tree-id80053 . -95) (undo-tree-id80054 . -21) (16843 . 16864) (#(" the output of the" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16917) (undo-tree-id80055 . -3) (undo-tree-id80056 . -3) (undo-tree-id80057 . -3) (undo-tree-id80058 . -3) (undo-tree-id80059 . -3) (undo-tree-id80060 . -3) (undo-tree-id80061 . -3) (undo-tree-id80062 . -3) (undo-tree-id80063 . -3) (undo-tree-id80064 . -3) (undo-tree-id80065 . -3) (undo-tree-id80066 . -3) (undo-tree-id80067 . -3) (undo-tree-id80068 . -3) (undo-tree-id80069 . -3) (undo-tree-id80070 . -3) (undo-tree-id80071 . -2) (undo-tree-id80072 . -2) (undo-tree-id80073 . -2) (undo-tree-id80074 . -2) (undo-tree-id80075 . -2) (undo-tree-id80076 . -2) (undo-tree-id80077 . -2) (undo-tree-id80078 . -2) (undo-tree-id80079 . -2) (undo-tree-id80080 . -2) (undo-tree-id80081 . -2) (undo-tree-id80082 . -1) (undo-tree-id80083 . -1) (undo-tree-id80084 . -1) (undo-tree-id80085 . -1) (undo-tree-id80086 . -1) (undo-tree-id80087 . -1) (undo-tree-id80088 . -1) (undo-tree-id80089 . -1) (undo-tree-id80090 . -1) (undo-tree-id80091 . -1) (undo-tree-id80092 . -1) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16917) (undo-tree-id80093 . -1) (undo-tree-id80094 . -1) (undo-tree-id80095 . -1) (undo-tree-id80096 . -1) (undo-tree-id80097 . -1) (undo-tree-id80098 . -1) (undo-tree-id80099 . -1) (undo-tree-id80100 . -1) (undo-tree-id80101 . -1) (undo-tree-id80102 . -1) (undo-tree-id80103 . -1) (undo-tree-id80104 . -1) (undo-tree-id80105 . -1) (undo-tree-id80106 . -1) (t 25767 18481 58264 803000)) nil (25767 18493 211612 479000) 0 nil])
([nil nil ((16938 . 16939) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16938) (undo-tree-id79677 . 1) (undo-tree-id79678 . -1) 16921) nil (25767 18493 210520 472000) 0 nil])
([nil nil ((17008 . 17009) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17008) (undo-tree-id80107 . -1) 16984 (t 25767 18493 342554 71000)) nil (25767 18499 922570 254000) 0 nil])
([nil nil ((17029 . 17030) (17028 . 17029) (17025 . 17028) (t 25767 18500 14710 834000) 17008) nil (25767 18544 412679 581000) 0 nil])
([nil nil ((17030 . 17031)) nil (25767 18544 412678 206000) 0 nil])
([nil nil ((17030 . 17031) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 17030) (undo-tree-id80739 . -1) (undo-tree-id80740 . -1) (undo-tree-id80741 . -1) (undo-tree-id80742 . -1) (undo-tree-id80743 . -1) (undo-tree-id80744 . -1) (undo-tree-id80745 . -1) (undo-tree-id80746 . -1) (undo-tree-id80747 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17031) (undo-tree-id80748 . 1) (undo-tree-id80749 . -1) 17030) nil (25767 18544 412676 716000) 0 nil])
([nil nil ((#("- The rest of the model is fairly straightforward: it is composed of two GRU
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 17029) (undo-tree-id80431 . -76) (undo-tree-id80432 . -2) (undo-tree-id80433 . -2) (undo-tree-id80434 . 75) (undo-tree-id80435 . -54) (undo-tree-id80436 . -1) (undo-tree-id80437 . -1) (undo-tree-id80438 . -1) (undo-tree-id80439 . -1) (undo-tree-id80440 . -1) (undo-tree-id80441 . -1) (undo-tree-id80442 . -1) (undo-tree-id80443 . -1) (undo-tree-id80444 . -1) (undo-tree-id80445 . -1) (undo-tree-id80446 . -1) (undo-tree-id80447 . -1) (undo-tree-id80448 . -1) (undo-tree-id80449 . -1) (undo-tree-id80450 . -1) (undo-tree-id80451 . -1) (undo-tree-id80452 . -1) (undo-tree-id80453 . -1) (undo-tree-id80454 . -1) (undo-tree-id80455 . -1) (undo-tree-id80456 . -1) (undo-tree-id80457 . -1) (undo-tree-id80458 . -1) (undo-tree-id80459 . -1) (undo-tree-id80460 . -1) (undo-tree-id80461 . -1) (undo-tree-id80462 . -1) (undo-tree-id80463 . -1) (undo-tree-id80464 . -1) (undo-tree-id80465 . -1) (undo-tree-id80466 . -1) (undo-tree-id80467 . -1) (undo-tree-id80468 . -1) (undo-tree-id80469 . -1) (undo-tree-id80470 . -1) (undo-tree-id80471 . -1) (undo-tree-id80472 . -1) (undo-tree-id80473 . -1) (undo-tree-id80474 . -1) (undo-tree-id80475 . -1) (undo-tree-id80476 . -1) (undo-tree-id80477 . -1) (undo-tree-id80478 . -1) (undo-tree-id80479 . -1) (undo-tree-id80480 . -1) (undo-tree-id80481 . -1) (undo-tree-id80482 . -1) (undo-tree-id80483 . -1) (undo-tree-id80484 . -1) (undo-tree-id80485 . -1) (undo-tree-id80486 . -1) (undo-tree-id80487 . -1) (undo-tree-id80488 . -1) (undo-tree-id80489 . -1) (undo-tree-id80490 . -1) (undo-tree-id80491 . -1) (undo-tree-id80492 . -1) (undo-tree-id80493 . -1) (undo-tree-id80494 . -2) (undo-tree-id80495 . -2) (undo-tree-id80496 . -2) (undo-tree-id80497 . -2) (undo-tree-id80498 . -2) (undo-tree-id80499 . -2) (undo-tree-id80500 . -2) (undo-tree-id80501 . -2) (undo-tree-id80502 . -2) (undo-tree-id80503 . -2) (undo-tree-id80504 . -2) (undo-tree-id80505 . -2) (undo-tree-id80506 . -2) (undo-tree-id80507 . -2) (undo-tree-id80508 . -2) (undo-tree-id80509 . -2) (undo-tree-id80510 . -2) (undo-tree-id80511 . -2) (undo-tree-id80512 . -2) (undo-tree-id80513 . -2) (undo-tree-id80514 . -2) (undo-tree-id80515 . -2) (undo-tree-id80516 . -2) (undo-tree-id80517 . -2) (undo-tree-id80518 . -2) (undo-tree-id80519 . -2) (undo-tree-id80520 . -2) (undo-tree-id80521 . -2) (undo-tree-id80522 . -2) (undo-tree-id80523 . -2) (undo-tree-id80524 . -2) (undo-tree-id80525 . -2) (undo-tree-id80526 . -2) (undo-tree-id80527 . -2) (undo-tree-id80528 . -2) (undo-tree-id80529 . -2) (undo-tree-id80530 . -2) (undo-tree-id80531 . -2) (undo-tree-id80532 . -2) (undo-tree-id80533 . -2) (undo-tree-id80534 . -2) (undo-tree-id80535 . -2) (undo-tree-id80536 . -2) (undo-tree-id80537 . -2) (undo-tree-id80538 . -2) (undo-tree-id80539 . -2) (undo-tree-id80540 . -2) (undo-tree-id80541 . -2) (undo-tree-id80542 . -2) (undo-tree-id80543 . -4) (undo-tree-id80544 . -4) (undo-tree-id80545 . -4) (undo-tree-id80546 . -4) (undo-tree-id80547 . -4) (undo-tree-id80548 . -4) (undo-tree-id80549 . -4) (undo-tree-id80550 . -4) (undo-tree-id80551 . -4) (undo-tree-id80552 . -4) (undo-tree-id80553 . -4) (undo-tree-id80554 . -4) (undo-tree-id80555 . -4) (undo-tree-id80556 . -4) (undo-tree-id80557 . -4) (undo-tree-id80558 . -4) (undo-tree-id80559 . -4) (undo-tree-id80560 . -4) (undo-tree-id80561 . -4) (undo-tree-id80562 . -4) (undo-tree-id80563 . -4) (undo-tree-id80564 . -9) (undo-tree-id80565 . -9) (undo-tree-id80566 . -9) (undo-tree-id80567 . -9) (undo-tree-id80568 . -9) (undo-tree-id80569 . -9) (undo-tree-id80570 . -12) (undo-tree-id80571 . -12) (undo-tree-id80572 . -12) (undo-tree-id80573 . -12) (undo-tree-id80574 . -12) (undo-tree-id80575 . -12) (undo-tree-id80576 . -16) (undo-tree-id80577 . -16) (undo-tree-id80578 . -16) (undo-tree-id80579 . -16) (undo-tree-id80580 . -16) (undo-tree-id80581 . -16) (undo-tree-id80582 . -22) (undo-tree-id80583 . -22) (undo-tree-id80584 . -22) (undo-tree-id80585 . -22) (undo-tree-id80586 . -22) (undo-tree-id80587 . -22) (undo-tree-id80588 . -25) (undo-tree-id80589 . -25) (undo-tree-id80590 . -25) (undo-tree-id80591 . -25) (undo-tree-id80592 . -25) (undo-tree-id80593 . -25) (undo-tree-id80594 . -32) (undo-tree-id80595 . -32) (undo-tree-id80596 . -32) (undo-tree-id80597 . -32) (undo-tree-id80598 . -32) (undo-tree-id80599 . -32) (undo-tree-id80600 . -48) (undo-tree-id80601 . -48) (undo-tree-id80602 . -48) (undo-tree-id80603 . -48) (undo-tree-id80604 . -48) (undo-tree-id80605 . -48) (undo-tree-id80606 . -49) (undo-tree-id80607 . -49) (undo-tree-id80608 . -49) (undo-tree-id80609 . -49) (undo-tree-id80610 . -49) (undo-tree-id80611 . -49) (undo-tree-id80612 . -52) (undo-tree-id80613 . -52) (undo-tree-id80614 . -52) (undo-tree-id80615 . -52) (undo-tree-id80616 . -52) (undo-tree-id80617 . -52) (undo-tree-id80618 . -55) (undo-tree-id80619 . -55) (undo-tree-id80620 . -55) (undo-tree-id80621 . -55) (undo-tree-id80622 . -55) (undo-tree-id80623 . -55) (undo-tree-id80624 . -64) (undo-tree-id80625 . -64) (undo-tree-id80626 . -64) (undo-tree-id80627 . -64) (undo-tree-id80628 . -64) (undo-tree-id80629 . -64) (undo-tree-id80630 . -67) (undo-tree-id80631 . -67) (undo-tree-id80632 . -67) (undo-tree-id80633 . -67) (undo-tree-id80634 . -67) (undo-tree-id80635 . -67) (undo-tree-id80636 . -71) (undo-tree-id80637 . -71) (undo-tree-id80638 . -71) (undo-tree-id80639 . -71) (undo-tree-id80640 . -71) (undo-tree-id80641 . -71) (undo-tree-id80642 . -75) (undo-tree-id80643 . -75) (undo-tree-id80644 . -75) (undo-tree-id80645 . -75) (undo-tree-id80646 . -75) (undo-tree-id80647 . -75) (undo-tree-id80648 . 4) (undo-tree-id80649 . -76) (undo-tree-id80650 . -75) (undo-tree-id80651 . -75) (undo-tree-id80652 . -75) (undo-tree-id80653 . -75) (undo-tree-id80654 . -75) (undo-tree-id80655 . -75) (undo-tree-id80656 . -75) (undo-tree-id80657 . -75) (undo-tree-id80658 . -75) (undo-tree-id80659 . -75) (undo-tree-id80660 . -75) (undo-tree-id80661 . -45) (undo-tree-id80662 . -45) (undo-tree-id80663 . -45) (undo-tree-id80664 . -45) (undo-tree-id80665 . -45) (undo-tree-id80666 . -45) (undo-tree-id80667 . -45) (undo-tree-id80668 . -45) (undo-tree-id80669 . -45) (undo-tree-id80670 . -45) (undo-tree-id80671 . -45) (undo-tree-id80672 . -49) (undo-tree-id80673 . -49) (undo-tree-id80674 . -49) (undo-tree-id80675 . -49) (undo-tree-id80676 . -49) (undo-tree-id80677 . -49) (undo-tree-id80678 . -49) (undo-tree-id80679 . -49) (undo-tree-id80680 . -49) (undo-tree-id80681 . -49) (undo-tree-id80682 . -49) (undo-tree-id80683 . -49) (undo-tree-id80684 . -49) (undo-tree-id80685 . -49) (undo-tree-id80686 . -49) (undo-tree-id80687 . -49) (undo-tree-id80688 . -51) (undo-tree-id80689 . -51) (undo-tree-id80690 . -51) (undo-tree-id80691 . -51) (undo-tree-id80692 . -51) (undo-tree-id80693 . -51) (undo-tree-id80694 . -51) (undo-tree-id80695 . -51) (undo-tree-id80696 . -51) (undo-tree-id80697 . -51) (undo-tree-id80698 . -51) (undo-tree-id80699 . -54) (undo-tree-id80700 . -54) (undo-tree-id80701 . -54) (undo-tree-id80702 . -54) (undo-tree-id80703 . -54) (undo-tree-id80704 . -54) (undo-tree-id80705 . -54) (undo-tree-id80706 . -54) (undo-tree-id80707 . -54) (undo-tree-id80708 . -54) (undo-tree-id80709 . -54) (undo-tree-id80710 . -54) (undo-tree-id80711 . -54) (undo-tree-id80712 . -54) (undo-tree-id80713 . -54) (undo-tree-id80714 . -54) (undo-tree-id80715 . -54) (undo-tree-id80716 . -54) (undo-tree-id80717 . -54) (undo-tree-id80718 . -54) (undo-tree-id80719 . -54) (undo-tree-id80720 . -54) (undo-tree-id80721 . -54) (undo-tree-id80722 . -54) (undo-tree-id80723 . -54) (undo-tree-id80724 . -54) (undo-tree-id80725 . -54) (undo-tree-id80726 . -54) (undo-tree-id80727 . -54) (undo-tree-id80728 . -54) (undo-tree-id80729 . -54) (undo-tree-id80730 . -54) (undo-tree-id80731 . -54) (undo-tree-id80732 . -54) (undo-tree-id80733 . -54) (undo-tree-id80734 . -54) (undo-tree-id80735 . -54) (undo-tree-id80736 . -54) (undo-tree-id80737 . -54) (undo-tree-id80738 . -77) 17083) nil (25767 18544 412658 943000) 0 nil])
([nil nil ((#("layers, with the second one returning only the output of the last time step.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17029) (undo-tree-id80286 . -76) (undo-tree-id80287 . 31) (undo-tree-id80288 . 77) (undo-tree-id80289 . -54) (undo-tree-id80290 . -5) (undo-tree-id80291 . -5) (undo-tree-id80292 . -5) (undo-tree-id80293 . -5) (undo-tree-id80294 . -5) (undo-tree-id80295 . -5) (undo-tree-id80296 . -5) (undo-tree-id80297 . -5) (undo-tree-id80298 . -6) (undo-tree-id80299 . -6) (undo-tree-id80300 . -6) (undo-tree-id80301 . -6) (undo-tree-id80302 . -6) (undo-tree-id80303 . -6) (undo-tree-id80304 . -11) (undo-tree-id80305 . -11) (undo-tree-id80306 . -11) (undo-tree-id80307 . -11) (undo-tree-id80308 . -11) (undo-tree-id80309 . -11) (undo-tree-id80310 . -15) (undo-tree-id80311 . -15) (undo-tree-id80312 . -15) (undo-tree-id80313 . -15) (undo-tree-id80314 . -15) (undo-tree-id80315 . -15) (undo-tree-id80316 . -22) (undo-tree-id80317 . -22) (undo-tree-id80318 . -22) (undo-tree-id80319 . -22) (undo-tree-id80320 . -22) (undo-tree-id80321 . -22) (undo-tree-id80322 . -26) (undo-tree-id80323 . -26) (undo-tree-id80324 . -26) (undo-tree-id80325 . -26) (undo-tree-id80326 . -26) (undo-tree-id80327 . -26) (undo-tree-id80328 . -36) (undo-tree-id80329 . -36) (undo-tree-id80330 . -36) (undo-tree-id80331 . -36) (undo-tree-id80332 . -36) (undo-tree-id80333 . -36) (undo-tree-id80334 . -41) (undo-tree-id80335 . -41) (undo-tree-id80336 . -41) (undo-tree-id80337 . -41) (undo-tree-id80338 . -41) (undo-tree-id80339 . -41) (undo-tree-id80340 . -45) (undo-tree-id80341 . -45) (undo-tree-id80342 . -45) (undo-tree-id80343 . -45) (undo-tree-id80344 . -45) (undo-tree-id80345 . -45) (undo-tree-id80346 . -45) (undo-tree-id80347 . -45) (undo-tree-id80348 . -45) (undo-tree-id80349 . -45) (undo-tree-id80350 . -45) (undo-tree-id80351 . -45) (undo-tree-id80352 . -45) (undo-tree-id80353 . -45) (undo-tree-id80354 . -45) (undo-tree-id80355 . -45) (undo-tree-id80356 . -45) (undo-tree-id80357 . -45) (undo-tree-id80358 . -45) (undo-tree-id80359 . -45) (undo-tree-id80360 . -45) (undo-tree-id80361 . -45) (undo-tree-id80362 . -45) (undo-tree-id80363 . -45) (undo-tree-id80364 . -45) (undo-tree-id80365 . -45) (undo-tree-id80366 . -45) (undo-tree-id80367 . -45) (undo-tree-id80368 . -45) (undo-tree-id80369 . -45) (undo-tree-id80370 . -45) (undo-tree-id80371 . -45) (undo-tree-id80372 . -45) (undo-tree-id80373 . -45) (undo-tree-id80374 . -45) (undo-tree-id80375 . -45) (undo-tree-id80376 . -45) (undo-tree-id80377 . -45) (undo-tree-id80378 . -45) (undo-tree-id80379 . -45) (undo-tree-id80380 . -45) (undo-tree-id80381 . -45) (undo-tree-id80382 . -45) (undo-tree-id80383 . -45) (undo-tree-id80384 . -45) (undo-tree-id80385 . -45) (undo-tree-id80386 . -45) (undo-tree-id80387 . -45) (undo-tree-id80388 . -45) (undo-tree-id80389 . -45) (undo-tree-id80390 . -45) (undo-tree-id80391 . -45) (undo-tree-id80392 . -45) (undo-tree-id80393 . -45) (undo-tree-id80394 . -45) (undo-tree-id80395 . -45) (undo-tree-id80396 . -45) (undo-tree-id80397 . -45) (undo-tree-id80398 . -45) (undo-tree-id80399 . -54) (undo-tree-id80400 . -54) (undo-tree-id80401 . -54) (undo-tree-id80402 . -54) (undo-tree-id80403 . -54) (undo-tree-id80404 . -54) (undo-tree-id80405 . -54) (undo-tree-id80406 . -54) (undo-tree-id80407 . -54) (undo-tree-id80408 . -54) (undo-tree-id80409 . -54) (undo-tree-id80410 . -54) (undo-tree-id80411 . -54) (undo-tree-id80412 . -54) (undo-tree-id80413 . -54) (undo-tree-id80414 . -54) (undo-tree-id80415 . -54) (undo-tree-id80416 . -54) (undo-tree-id80417 . -54) (undo-tree-id80418 . -54) (undo-tree-id80419 . -54) (undo-tree-id80420 . -54) (undo-tree-id80421 . -54) (undo-tree-id80422 . -54) (undo-tree-id80423 . -54) (undo-tree-id80424 . -54) (undo-tree-id80425 . -54) (undo-tree-id80426 . -54) (undo-tree-id80427 . -54) (undo-tree-id80428 . -54) (undo-tree-id80429 . -54) (undo-tree-id80430 . -77) 17083) nil (25767 18544 412024 764000) 0 nil])
([nil nil ((#("The output layer is just a single neuron using the sigmoid activation
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17029) (undo-tree-id80253 . -69) (undo-tree-id80254 . 70) (undo-tree-id80255 . 70) (undo-tree-id80256 . -54) (undo-tree-id80257 . 19) (undo-tree-id80258 . -58) (undo-tree-id80259 . -54) (undo-tree-id80260 . -54) (undo-tree-id80261 . -54) (undo-tree-id80262 . -54) (undo-tree-id80263 . -54) (undo-tree-id80264 . -54) (undo-tree-id80265 . -54) (undo-tree-id80266 . -54) (undo-tree-id80267 . -54) (undo-tree-id80268 . -54) (undo-tree-id80269 . -54) (undo-tree-id80270 . -54) (undo-tree-id80271 . -54) (undo-tree-id80272 . -54) (undo-tree-id80273 . -54) (undo-tree-id80274 . -54) (undo-tree-id80275 . -54) (undo-tree-id80276 . -54) (undo-tree-id80277 . -54) (undo-tree-id80278 . -54) (undo-tree-id80279 . -54) (undo-tree-id80280 . -54) (undo-tree-id80281 . -54) (undo-tree-id80282 . -54) (undo-tree-id80283 . -54) (undo-tree-id80284 . -54) (undo-tree-id80285 . -70) 17083) nil (25767 18544 411857 525000) 0 nil])
([nil nil ((#("function to output the estimated probability that the review expresses a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17029) (undo-tree-id80212 . -72) (undo-tree-id80213 . 73) (undo-tree-id80214 . 73) (undo-tree-id80215 . -54) (undo-tree-id80216 . -54) (undo-tree-id80217 . -54) (undo-tree-id80218 . -54) (undo-tree-id80219 . -54) (undo-tree-id80220 . -54) (undo-tree-id80221 . -54) (undo-tree-id80222 . -54) (undo-tree-id80223 . -54) (undo-tree-id80224 . -54) (undo-tree-id80225 . -54) (undo-tree-id80226 . -54) (undo-tree-id80227 . -54) (undo-tree-id80228 . -54) (undo-tree-id80229 . -54) (undo-tree-id80230 . -54) (undo-tree-id80231 . -54) (undo-tree-id80232 . -54) (undo-tree-id80233 . -54) (undo-tree-id80234 . -54) (undo-tree-id80235 . -54) (undo-tree-id80236 . -54) (undo-tree-id80237 . -54) (undo-tree-id80238 . -54) (undo-tree-id80239 . -54) (undo-tree-id80240 . -54) (undo-tree-id80241 . -54) (undo-tree-id80242 . -54) (undo-tree-id80243 . -54) (undo-tree-id80244 . -54) (undo-tree-id80245 . -54) (undo-tree-id80246 . -54) (undo-tree-id80247 . -54) (undo-tree-id80248 . -54) (undo-tree-id80249 . -54) (undo-tree-id80250 . -54) (undo-tree-id80251 . -54) (undo-tree-id80252 . -73) 17083) nil (25767 18544 411834 691000) 0 nil])
([nil nil ((#("positive sentiment regarding the movie. We then compile the model quite
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 17029) (undo-tree-id80171 . -71) (undo-tree-id80172 . 72) (undo-tree-id80173 . 72) (undo-tree-id80174 . -54) (undo-tree-id80175 . -54) (undo-tree-id80176 . -54) (undo-tree-id80177 . -54) (undo-tree-id80178 . -54) (undo-tree-id80179 . -54) (undo-tree-id80180 . -54) (undo-tree-id80181 . -54) (undo-tree-id80182 . -54) (undo-tree-id80183 . -54) (undo-tree-id80184 . -54) (undo-tree-id80185 . -54) (undo-tree-id80186 . -54) (undo-tree-id80187 . -54) (undo-tree-id80188 . -54) (undo-tree-id80189 . -54) (undo-tree-id80190 . -54) (undo-tree-id80191 . -54) (undo-tree-id80192 . -54) (undo-tree-id80193 . -54) (undo-tree-id80194 . -54) (undo-tree-id80195 . -54) (undo-tree-id80196 . -54) (undo-tree-id80197 . -54) (undo-tree-id80198 . -54) (undo-tree-id80199 . -54) (undo-tree-id80200 . -54) (undo-tree-id80201 . -54) (undo-tree-id80202 . -54) (undo-tree-id80203 . -54) (undo-tree-id80204 . -54) (undo-tree-id80205 . -54) (undo-tree-id80206 . -54) (undo-tree-id80207 . -54) (undo-tree-id80208 . -54) (undo-tree-id80209 . -54) (undo-tree-id80210 . -54) (undo-tree-id80211 . -72) 17083) nil (25767 18544 411803 755000) 0 nil])
([nil nil ((#("simply, and we fit it on the dataset we prepared earlier, for a few epochs.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 75 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 17029) (undo-tree-id80130 . -75) (undo-tree-id80131 . 76) (undo-tree-id80132 . 76) (undo-tree-id80133 . -54) (undo-tree-id80134 . -54) (undo-tree-id80135 . -54) (undo-tree-id80136 . -54) (undo-tree-id80137 . -54) (undo-tree-id80138 . -54) (undo-tree-id80139 . -54) (undo-tree-id80140 . -54) (undo-tree-id80141 . -54) (undo-tree-id80142 . -54) (undo-tree-id80143 . -54) (undo-tree-id80144 . -54) (undo-tree-id80145 . -54) (undo-tree-id80146 . -54) (undo-tree-id80147 . -54) (undo-tree-id80148 . -54) (undo-tree-id80149 . -54) (undo-tree-id80150 . -54) (undo-tree-id80151 . -54) (undo-tree-id80152 . -54) (undo-tree-id80153 . -54) (undo-tree-id80154 . -54) (undo-tree-id80155 . -54) (undo-tree-id80156 . -54) (undo-tree-id80157 . -54) (undo-tree-id80158 . -54) (undo-tree-id80159 . -54) (undo-tree-id80160 . -54) (undo-tree-id80161 . -54) (undo-tree-id80162 . -54) (undo-tree-id80163 . -54) (undo-tree-id80164 . -54) (undo-tree-id80165 . -54) (undo-tree-id80166 . -54) (undo-tree-id80167 . -54) (undo-tree-id80168 . -54) (undo-tree-id80169 . -54) (undo-tree-id80170 . -76) 17083) nil (25767 18544 410878 77000) 0 nil])
([nil nil ((#("#+begin_src python :result outputs

  (X_train, y_train), (X_test, y_test) = keras.datasets.imdb.load_data()
  X_train[0][:10]
  #[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65]


  word_index = keras.datasets.imdb.get_word_index()
  id_to_word = {id_ + 3: word for word, id_ in word_index.items()}
  for id_, token in enumerate((\"<pad>\", \"<sos>\", \"<unk>\")):
      id_to_word[id_] = token
      \" \".join([id_to_word[id_] for id_ in X_train[0][:10]])
  #'<sos> this film was just brilliant casting location scenery story'


  import tensorflow_datasets as tfds
  datasets, info = tfds.load(\"imdb_reviews\", as_supervised=True,
  with_info=True)
  train_size = info.splits[\"train\"].num_examples

  def preprocess(X_batch, y_batch):
      X_batch = tf.strings.substr(X_batch, 0, 300)
      X_batch = tf.strings.regex_replace(X_batch, b\"<br\\\\s*/?>\", b\" \")

      X_batch = tf.strings.regex_replace(X_batch, b\"[^a-zA-Z']\", b\" \")
      X_batch = tf.strings.split(X_batch)
      return X_batch.to_tensor(default_value=b\"<pad>\"), y_batch
    

  from collections import Counter
  vocabulary = Counter()
  for X_batch, y_batch in datasets[\"train\"].batch(32).map(preprocess):
      for review in X_batch:
          vocabulary.update(list(review.numpy()))
  #Let’s look at the three most common words:
  vocabulary.most_common()[:3]
  #[(b'<pad>', 215797), (b'the', 61137), (b'a', 38564)]


  vocab_size = 10000
  truncated_vocabulary = [
  word for word, count in vocabulary.most_common()[:vocab_size]
  ]

  words = tf.constant(truncated_vocabulary)
  word_ids = tf.range(len(truncated_vocabulary), dtype=tf.int64)
  vocab_init = tf.lookup.KeyValueTensorInitializer(words, word_ids)
  num_oov_buckets = 1000
  table = tf.lookup.StaticVocabularyTable(vocab_init, num_oov_buckets)
  #We can then use this table to look up the IDs of a few words:
  table.lookup(tf.constant([b\"This movie was faaaaaantastic\".split()]))
  # <tf.Tensor: [...], dtype=int64, numpy=array([[
  # 22,
  # 12,
  # 11,
  # 10054]])>

def encode_words(X_batch, y_batch):
    return table.lookup(X_batch), y_batch
train_set = datasets[\"train\"].batch(32).map(preprocess)
train_set = train_set.map(encode_words).prefetch(1)
#At last we can create the model and train it:
embed_size = 128
model = keras.models.Sequential([
keras.layers.Embedding(vocab_size + num_oov_buckets, embed_size,
input_shape=[None]),
keras.layers.GRU(128, return_sequences=True),
keras.layers.GRU(128),
keras.layers.Dense(1, activation=\"sigmoid\")
])
model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\",
metrics=[\"accuracy\"])
history = model.fit(train_set, epochs=5)
#+end_src
" 0 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 35 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 36 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 38 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 39 40 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 40 41 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 41 46 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 46 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 49 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 50 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 55 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 56 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 58 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 61 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 65 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 69 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 74 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 101 102 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 102 106 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 106 107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 107 108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 108 109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 109 112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 112 113 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 113 118 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 118 119 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 119 120 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 120 121 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 121 122 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 122 125 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 125 126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 126 127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 127 129 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 129 130 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 130 176 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 176 177 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 177 178 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 178 180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 180 184 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 184 185 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 185 190 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 190 216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 216 217 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 217 221 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 221 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 222 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 228 229 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 229 230 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 230 232 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 232 234 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 234 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 235 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 237 238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 238 242 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 242 245 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 245 246 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 246 260 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 260 263 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 263 274 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 274 276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 276 281 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 281 282 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 282 293 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 293 294 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 294 295 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 295 296 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 296 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 297 299 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 299 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 302 314 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 314 316 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 316 317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 317 326 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 326 327 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 327 328 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 328 335 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 335 337 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 337 344 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 344 346 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 346 353 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 353 354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 354 355 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 355 357 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 357 363 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 363 365 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 365 366 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 366 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 369 373 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 373 374 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 374 377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 377 378 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 378 387 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 387 393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 393 396 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-doc-face org-block)) 396 401 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 401 402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 402 403 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 403 405 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 405 406 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 406 408 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 408 409 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 409 413 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 413 414 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 414 417 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 417 418 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 418 419 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 419 422 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 422 427 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 427 429 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 429 431 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 431 432 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 432 437 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 437 438 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 438 439 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 439 440 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 440 441 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 441 444 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 444 445 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 445 446 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 446 447 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 447 448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 448 450 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 450 451 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 451 519 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 519 520 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 520 521 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 521 523 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 523 529 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 529 535 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 535 540 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 540 541 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 541 549 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 549 550 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 550 552 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 552 558 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 558 560 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 560 568 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 568 570 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 570 574 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 574 586 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 586 587 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 587 592 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 592 593 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 593 600 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 600 601 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 601 605 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 605 606 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 606 616 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 616 617 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 617 621 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 621 623 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 623 629 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 629 630 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 630 634 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 634 635 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 635 639 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 639 640 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 640 641 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 641 643 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 643 648 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 648 649 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 649 653 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 653 667 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 667 668 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 668 675 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 675 676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 676 680 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 680 681 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 681 689 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 689 690 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 690 691 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 691 693 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 693 696 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 696 697 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 697 707 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 707 708 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 708 709 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 709 710 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 710 715 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 715 718 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 718 719 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 719 724 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 724 725 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 725 727 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 727 733 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 733 734 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 734 735 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 735 740 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 740 760 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 760 761 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 761 762 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 762 763 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 763 768 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 768 776 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 776 777 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 777 778 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 778 784 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 784 785 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 785 786 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 786 791 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 791 810 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 810 811 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 811 818 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 818 819 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 819 820 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 820 821 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 821 826 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 826 829 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 829 841 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 841 844 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 844 847 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 847 848 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 848 849 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 849 850 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 850 856 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 856 857 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 857 858 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 858 863 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 863 882 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 882 883 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 883 890 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 890 891 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 891 892 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 892 893 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 893 898 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 898 901 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 901 903 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 903 904 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 904 905 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 905 913 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 913 916 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 916 919 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 919 920 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 920 921 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 921 927 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 927 928 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 928 929 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 929 934 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 934 953 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 953 954 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 954 955 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 955 956 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 956 961 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 961 962 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 962 963 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 963 969 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 969 975 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 975 977 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 977 978 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 978 986 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 986 987 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 987 993 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 993 994 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 994 1001 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1001 1002 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1002 1007 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1007 1009 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1009 1016 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1016 1017 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1017 1020 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1020 1021 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1021 1026 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1026 1027 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1027 1032 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1032 1033 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1033 1035 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1035 1039 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1039 1052 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1052 1058 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1058 1067 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1067 1069 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1069 1079 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1079 1089 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1089 1090 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1090 1091 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1091 1092 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1092 1094 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1094 1097 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1097 1099 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1099 1100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1100 1105 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1105 1108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1108 1109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1109 1114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1114 1115 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1115 1117 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1117 1126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1126 1127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1127 1134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1134 1135 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1135 1141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1141 1142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1142 1144 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1144 1145 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1145 1146 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1146 1149 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1149 1150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1150 1160 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1160 1161 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1161 1163 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1163 1169 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1169 1172 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1172 1180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1180 1182 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1182 1184 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1184 1185 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1185 1190 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1190 1192 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1192 1219 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1219 1220 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1220 1224 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1224 1225 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1225 1237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1237 1238 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1238 1239 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1239 1240 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1240 1241 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1241 1242 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1242 1244 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1244 1245 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1245 1288 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1288 1305 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1305 1306 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1306 1312 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1312 1313 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1313 1314 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1314 1315 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1315 1317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1317 1318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1318 1319 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1319 1321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1321 1322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1322 1375 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1375 1376 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1376 1377 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1377 1379 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1379 1384 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1384 1385 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1385 1389 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1389 1398 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1398 1400 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1400 1409 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1409 1410 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1410 1420 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1420 1423 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1423 1424 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1424 1425 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1425 1432 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1432 1435 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1435 1448 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1448 1450 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1450 1466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1466 1467 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1467 1473 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1473 1474 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1474 1475 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1475 1476 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1476 1482 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1482 1483 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1483 1487 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1487 1488 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1488 1489 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1489 1491 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1491 1492 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1492 1493 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1493 1494 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1494 1496 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1496 1501 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1501 1515 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1515 1516 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1516 1525 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1525 1526 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1526 1536 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1536 1537 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1537 1538 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1538 1540 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1540 1544 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1544 1545 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1545 1548 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1548 1554 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1554 1559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1559 1560 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1560 1563 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1563 1564 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1564 1573 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1573 1574 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1574 1584 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1584 1585 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1585 1601 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1601 1602 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1602 1603 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1603 1605 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1605 1610 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1610 1611 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1611 1615 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1615 1653 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1653 1654 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1654 1665 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1665 1666 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1666 1669 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1669 1670 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1670 1671 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1671 1673 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1673 1676 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1676 1677 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1677 1680 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1680 1681 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1681 1688 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1688 1696 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1696 1698 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1698 1703 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 1703 1737 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1737 1738 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1738 1743 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1743 1744 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1744 1748 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1748 1753 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1753 1754 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1754 1757 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1757 1758 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1758 1765 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1765 1766 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1766 1767 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1767 1769 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1769 1770 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1770 1832 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1832 1846 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1846 1847 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1847 1858 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1858 1859 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1859 1860 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1860 1861 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1861 1877 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1877 1892 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1892 1898 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1898 1899 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 1899 1900 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 1900 1901 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 1901 1902 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 1902 1903 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 1903 1904 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1904 1906 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1906 1908 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1908 1955 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1955 1957 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1957 1959 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1959 1963 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1963 1965 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1965 1967 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1967 1971 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1971 1973 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1973 1975 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1975 1979 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1979 1981 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1981 1983 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1983 1993 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1993 1994 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1994 1997 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1997 1998 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1998 2004 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 2004 2005 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 2005 2010 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 2010 2011 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2011 2012 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2012 2013 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2013 2018 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2018 2021 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2021 2022 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2022 2027 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2027 2028 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2028 2030 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2030 2034 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2034 2040 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 2040 2053 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2053 2054 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2054 2055 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2055 2056 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2056 2061 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2061 2062 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2062 2065 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2065 2066 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2066 2071 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2071 2072 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2072 2077 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2077 2078 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2078 2081 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2081 2092 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2092 2093 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2093 2100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2100 2101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2101 2107 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2107 2108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2108 2110 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2110 2111 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2111 2112 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2112 2115 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2115 2116 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2116 2126 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2126 2127 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2127 2128 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2128 2133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2133 2134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2134 2137 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2137 2145 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2145 2146 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2146 2150 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2150 2153 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2153 2154 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2154 2160 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2160 2161 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2161 2166 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2166 2167 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2167 2176 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2176 2177 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2177 2178 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2178 2179 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2179 2180 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2180 2181 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 2181 2213 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 2213 2216 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 2216 2227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 2227 2232 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2232 2233 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2233 2237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2237 2244 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2244 2249 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2249 2275 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2275 2276 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2276 2277 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 2277 2278 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2278 2300 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2300 2301 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2301 2306 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2306 2307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2307 2311 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2311 2317 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2317 2318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2318 2321 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2321 2322 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2322 2329 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2329 2336 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2336 2337 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2337 2341 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2341 2343 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2343 2348 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2348 2349 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2349 2354 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2354 2355 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2355 2356 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 2356 2360 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 2360 2361 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block)) 2361 2362 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2362 2364 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2364 2380 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2380 2381 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2381 2392 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2392 2393 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2393 2402 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2402 2403 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2403 2407 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 2407 2408 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2408 2410 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2410 2426 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2426 2427 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2427 2430 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2430 2431 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2431 2433 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2433 2451 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2451 2452 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2452 2466 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2466 2475 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2475 2476 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block)) 2476 2477 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2477 2478 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 2478 2479 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2479 2480 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2480 2486 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2486 2493 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2493 2494 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2494 2499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2499 2506 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2506 2507 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2507 2519 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2519 2520 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2520 2532 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2532 2538 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2538 2540 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2540 2548 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2548 2549 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 2549 2559 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2559 2560 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 2560 2561 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2561 2562 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2562 2569 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 2569 2581 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2581 2582 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2582 2587 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2587 2588 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2588 2591 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2591 2601 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2601 2602 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 2602 2603 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2603 2612 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 2612 2613 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 12514) (undo-tree-id80108 . -2612) (undo-tree-id80109 . -35) (undo-tree-id80110 . -35) (undo-tree-id80111 . -35) (undo-tree-id80112 . -35) (undo-tree-id80113 . -2613) (undo-tree-id80114 . -35) (undo-tree-id80115 . -2613) (undo-tree-id80116 . -2613) (undo-tree-id80117 . -2613) (undo-tree-id80118 . -2613) (undo-tree-id80119 . -2613) (undo-tree-id80120 . -2613) (undo-tree-id80121 . -2603) (undo-tree-id80122 . -2603) (undo-tree-id80123 . -2603) (undo-tree-id80124 . -2603) (undo-tree-id80125 . -2603) (undo-tree-id80126 . -2603) (undo-tree-id80127 . 2579) (undo-tree-id80128 . -2612) (undo-tree-id80129 . -2613)) nil (25767 18544 410849 73000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14417 . 14418) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -17030) (14417 . 17031)) nil (25767 18544 410825 399000) 0 nil])
([nil nil ((17030 . 17031)) nil (25767 18544 410819 732000) 0 nil])
([nil nil ((#("- 1 is used for _____ 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t invisible org-link) 17 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t) 19 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t) 20 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (underline) font-lock-multiline t org-emphasis t invisible org-link) 21 22 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . 330) (undo-tree-id80752 . -22) (undo-tree-id80753 . -23) (t 25767 18544 547751 3000)) nil (25767 18564 320954 213000) 0 nil])
([nil nil ((#("- 2 is used for 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky t)) . 330) (undo-tree-id80750 . -16) (undo-tree-id80751 . -17)) nil (25767 18564 320948 148000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 10727) (undo-tree-id80754 . -1) (t 25767 18564 408211 610000)) nil (25767 18570 59435 829000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 206) (undo-tree-id80755 . -1) (undo-tree-id80756 . -1) (t 25767 18570 144344 281000)) nil (25767 34847 416303 578000) 0 nil])
([nil nil ((#("- here, the tokenizer converts the text to lowercase by default. 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t composition (1 1 [8226])) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 11 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 42 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 370) (undo-tree-id80757 . -65) (undo-tree-id80758 . 54) (undo-tree-id80759 . -21) (undo-tree-id80760 . -2) (undo-tree-id80761 . -2) (undo-tree-id80762 . -2) (undo-tree-id80763 . -2) (undo-tree-id80764 . -2) (undo-tree-id80765 . -2) (undo-tree-id80766 . -15) (undo-tree-id80767 . -15) (undo-tree-id80768 . -15) (undo-tree-id80769 . -15) (undo-tree-id80770 . -15) (undo-tree-id80771 . -15) (undo-tree-id80772 . -15) (undo-tree-id80773 . -15) (undo-tree-id80774 . -15) (undo-tree-id80775 . -15) (undo-tree-id80776 . -15) (undo-tree-id80777 . -15) (undo-tree-id80778 . -15) (undo-tree-id80779 . -15) (undo-tree-id80780 . -15) (undo-tree-id80781 . -66) 385 (t 25767 34847 509438 565000)) nil (25767 34888 879492 520000) 0 nil])
([nil nil ((nil rear-nonsticky nil 304 . 305) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -370) (304 . 371) 275) nil (25767 34888 879179 501000) 0 nil])
([nil nil ((#("here, " 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 307) (undo-tree-id80782 . -5) (undo-tree-id80783 . -5) (undo-tree-id80784 . -5) (undo-tree-id80785 . -4) (undo-tree-id80786 . -6) (undo-tree-id80787 . -5) (undo-tree-id80788 . -3) (undo-tree-id80789 . -3) (undo-tree-id80790 . -3) (undo-tree-id80791 . -3) (undo-tree-id80792 . -3) (undo-tree-id80793 . -3) (undo-tree-id80794 . -4) (undo-tree-id80795 . -4) (undo-tree-id80796 . -4) (undo-tree-id80797 . -4) (undo-tree-id80798 . -4) (undo-tree-id80799 . -4) (undo-tree-id80800 . -5) (undo-tree-id80801 . -5) (undo-tree-id80802 . -5) (undo-tree-id80803 . -5) (undo-tree-id80804 . -5) (undo-tree-id80805 . -5) (undo-tree-id80806 . -6) (undo-tree-id80807 . -6) (undo-tree-id80808 . -6) (undo-tree-id80809 . -6) (undo-tree-id80810 . -6) (undo-tree-id80811 . -6) (undo-tree-id80812 . -5) (undo-tree-id80813 . -5) (undo-tree-id80814 . -5) (undo-tree-id80815 . -5) (undo-tree-id80816 . -5) (undo-tree-id80817 . -5) (undo-tree-id80818 . -5) (undo-tree-id80819 . -6) 312 (t 25767 34888 969853 715000)) nil (25767 34894 983046 801000) 0 nil])
([nil nil ((307 . 308) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 307) (t 25767 34895 69915 837000)) nil (25767 34896 548771 54000) 0 nil])
([nil nil ((#("the" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1267) (undo-tree-id80858 . -2) (undo-tree-id80859 . -3) (undo-tree-id80860 . -3) (t 25767 34896 633931 808000)) nil (25767 34915 480497 390000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1266) (undo-tree-id80820 . -1) (undo-tree-id80821 . -1) (undo-tree-id80822 . -1) (undo-tree-id80823 . -1) (undo-tree-id80824 . -1) (undo-tree-id80825 . -1) (undo-tree-id80826 . -1) (undo-tree-id80827 . -1) (undo-tree-id80828 . -1) (undo-tree-id80829 . -1) (undo-tree-id80830 . -1) (undo-tree-id80831 . -1) (undo-tree-id80832 . -1) (undo-tree-id80833 . -1) (undo-tree-id80834 . -1) (undo-tree-id80835 . -1) (undo-tree-id80836 . -1) (undo-tree-id80837 . -1) (undo-tree-id80838 . -1) (undo-tree-id80839 . -1) (undo-tree-id80840 . -1) (undo-tree-id80841 . -1) (undo-tree-id80842 . -1) (undo-tree-id80843 . -1) (undo-tree-id80844 . -1) (undo-tree-id80845 . -1) (undo-tree-id80846 . -1) (undo-tree-id80847 . -1) (undo-tree-id80848 . -1) (undo-tree-id80849 . -1) (undo-tree-id80850 . -1) (undo-tree-id80851 . -1) (undo-tree-id80852 . -1) (undo-tree-id80853 . -1) (undo-tree-id80854 . -1) (undo-tree-id80855 . -1) (undo-tree-id80856 . -1) (undo-tree-id80857 . -1)) nil (25767 34915 480486 923000) 0 nil])
([nil nil ((#("any " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1218) (undo-tree-id80861 . -3) (undo-tree-id80862 . -3) (undo-tree-id80863 . -3) (undo-tree-id80864 . -4) (undo-tree-id80865 . -3) (undo-tree-id80866 . -2) (undo-tree-id80867 . -2) (undo-tree-id80868 . -2) (undo-tree-id80869 . -2) (undo-tree-id80870 . -2) (undo-tree-id80871 . -2) (undo-tree-id80872 . -3) (undo-tree-id80873 . -3) (undo-tree-id80874 . -3) (undo-tree-id80875 . -3) (undo-tree-id80876 . -3) (undo-tree-id80877 . -3) (undo-tree-id80878 . -3) (undo-tree-id80879 . -4) 1221 (t 25767 34915 574126 518000)) nil (25767 34920 224609 171000) 0 nil])
([nil nil ((#("a " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1282) (undo-tree-id80880 . -1) (undo-tree-id80881 . -1) (undo-tree-id80882 . -1) (undo-tree-id80883 . -2) (undo-tree-id80884 . -2) (undo-tree-id80885 . -2) (undo-tree-id80886 . -2) (undo-tree-id80887 . -2) (undo-tree-id80888 . -2) (undo-tree-id80889 . -2) (undo-tree-id80890 . -2) (undo-tree-id80891 . -2) (undo-tree-id80892 . -2) (undo-tree-id80893 . -2) (undo-tree-id80894 . -2) (undo-tree-id80895 . -1) (undo-tree-id80896 . -1) (undo-tree-id80897 . -1) (undo-tree-id80898 . -1) (undo-tree-id80899 . -1) (undo-tree-id80900 . -1) (undo-tree-id80901 . -1) (undo-tree-id80902 . -1) (undo-tree-id80903 . -1) (undo-tree-id80904 . -1) (undo-tree-id80905 . -1) (undo-tree-id80906 . -1) (undo-tree-id80907 . -1) (undo-tree-id80908 . -1) (undo-tree-id80909 . -1) (undo-tree-id80910 . -1) (undo-tree-id80911 . -1) (undo-tree-id80912 . -1) (undo-tree-id80913 . -1) (undo-tree-id80914 . -1) (undo-tree-id80915 . -1) (undo-tree-id80916 . -1) (undo-tree-id80917 . -1) (undo-tree-id80918 . -1) (undo-tree-id80919 . -1) (undo-tree-id80920 . -1) (undo-tree-id80921 . -1) (undo-tree-id80922 . -1) (undo-tree-id80923 . -2) 1283 (t 25767 34920 306175 541000)) nil (25767 34931 239615 239000) 0 nil])
([nil nil ((1353 . 1354) (#("It is o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 1353) (undo-tree-id80924 . -6) (undo-tree-id80925 . -6) (undo-tree-id80926 . -6) (undo-tree-id80927 . -7) (undo-tree-id80928 . -6) (undo-tree-id80929 . -1) (undo-tree-id80930 . -1) (undo-tree-id80931 . -1) (undo-tree-id80932 . -1) (undo-tree-id80933 . -1) (undo-tree-id80934 . -1) (undo-tree-id80935 . -1) (undo-tree-id80936 . -1) (undo-tree-id80937 . -1) (undo-tree-id80938 . -1) (undo-tree-id80939 . -1) (undo-tree-id80940 . -1) (undo-tree-id80941 . -1) (undo-tree-id80942 . -1) (undo-tree-id80943 . -1) (undo-tree-id80944 . -1) (undo-tree-id80945 . -2) (undo-tree-id80946 . -2) (undo-tree-id80947 . -2) (undo-tree-id80948 . -2) (undo-tree-id80949 . -2) (undo-tree-id80950 . -2) (undo-tree-id80951 . -2) (undo-tree-id80952 . -2) (undo-tree-id80953 . -2) (undo-tree-id80954 . -2) (undo-tree-id80955 . -2) (undo-tree-id80956 . -2) (undo-tree-id80957 . -2) (undo-tree-id80958 . -2) (undo-tree-id80959 . -2) (undo-tree-id80960 . -2) (undo-tree-id80961 . -2) (undo-tree-id80962 . -2) (undo-tree-id80963 . -2) (undo-tree-id80964 . -2) (undo-tree-id80965 . -2) (undo-tree-id80966 . -3) (undo-tree-id80967 . -3) (undo-tree-id80968 . -3) (undo-tree-id80969 . -3) (undo-tree-id80970 . -3) (undo-tree-id80971 . -3) (undo-tree-id80972 . -3) (undo-tree-id80973 . -3) (undo-tree-id80974 . -3) (undo-tree-id80975 . -3) (undo-tree-id80976 . -3) (undo-tree-id80977 . -3) (undo-tree-id80978 . -3) (undo-tree-id80979 . -3) (undo-tree-id80980 . -3) (undo-tree-id80981 . -3) (undo-tree-id80982 . -4) (undo-tree-id80983 . -4) (undo-tree-id80984 . -4) (undo-tree-id80985 . -4) (undo-tree-id80986 . -4) (undo-tree-id80987 . -4) (undo-tree-id80988 . -4) (undo-tree-id80989 . -4) (undo-tree-id80990 . -4) (undo-tree-id80991 . -4) (undo-tree-id80992 . -4) (undo-tree-id80993 . -4) (undo-tree-id80994 . -4) (undo-tree-id80995 . -4) (undo-tree-id80996 . -4) (undo-tree-id80997 . -4) (undo-tree-id80998 . -5) (undo-tree-id80999 . -5) (undo-tree-id81000 . -5) (undo-tree-id81001 . -5) (undo-tree-id81002 . -5) (undo-tree-id81003 . -5) (undo-tree-id81004 . -5) (undo-tree-id81005 . -5) (undo-tree-id81006 . -5) (undo-tree-id81007 . -5) (undo-tree-id81008 . -5) (undo-tree-id81009 . -5) (undo-tree-id81010 . -5) (undo-tree-id81011 . -5) (undo-tree-id81012 . -5) (undo-tree-id81013 . -5) (undo-tree-id81014 . -5) (undo-tree-id81015 . -5) (undo-tree-id81016 . -5) (undo-tree-id81017 . -5) (undo-tree-id81018 . -5) (undo-tree-id81019 . -6) (undo-tree-id81020 . -6) (undo-tree-id81021 . -6) (undo-tree-id81022 . -6) (undo-tree-id81023 . -6) (undo-tree-id81024 . -6) (undo-tree-id81025 . -6) (undo-tree-id81026 . -6) (undo-tree-id81027 . -6) (undo-tree-id81028 . -6) (undo-tree-id81029 . -6) (undo-tree-id81030 . -6) (undo-tree-id81031 . -6) (undo-tree-id81032 . -6) (undo-tree-id81033 . -6) (undo-tree-id81034 . -6) (undo-tree-id81035 . -6) (undo-tree-id81036 . -7) (undo-tree-id81037 . -7) (undo-tree-id81038 . -7) 1359 (t 25767 34931 330290 316000)) nil (25767 34948 261352 800000) 0 nil])
([nil nil ((1472 . 1473) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1472) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1472) (undo-tree-id81039 . -1) (1418 . 1419) (#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1418) (undo-tree-id81040 . -2) (undo-tree-id81041 . -2) (undo-tree-id81042 . -2) (undo-tree-id81043 . -2) (undo-tree-id81044 . -2) (undo-tree-id81045 . -2) (undo-tree-id81046 . -2) (undo-tree-id81047 . -2) (undo-tree-id81048 . -2) (undo-tree-id81049 . -2) (undo-tree-id81050 . -2) (undo-tree-id81051 . -2) (undo-tree-id81052 . -2) (undo-tree-id81053 . -2) (undo-tree-id81054 . -2) (undo-tree-id81055 . -2) (undo-tree-id81056 . -2) (undo-tree-id81057 . -2) (undo-tree-id81058 . -2) (undo-tree-id81059 . -2) (undo-tree-id81060 . -2) (undo-tree-id81061 . -2) (undo-tree-id81062 . -2) (undo-tree-id81063 . -2) (undo-tree-id81064 . -2) (undo-tree-id81065 . -2) (undo-tree-id81066 . -2) (undo-tree-id81067 . -2) (undo-tree-id81068 . -2) (undo-tree-id81069 . -2) (undo-tree-id81070 . -2) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -1418) (undo-tree-id81071 . -1) 1353 (t 25767 34948 350469 56000)) nil (25767 34959 858614 697000) 0 nil])
([nil nil ((1646 . 1647) (#("    " 0 2 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 4 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1646) (undo-tree-id81072 . -2) (undo-tree-id81073 . -2) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1648) (undo-tree-id81074 . -1) 1636 (t 25767 34959 950591 915000)) nil (25767 34980 205415 271000) 0 nil])
([nil nil ((1849 . 1850) (#("    " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 3 4 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 1849) (undo-tree-id81075 . -2) (undo-tree-id81076 . -2) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1851) (undo-tree-id81077 . -1) (1780 . 1781) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1780) (undo-tree-id81078 . -1) (undo-tree-id81079 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1781) (undo-tree-id81080 . -1) 1706 (t 25767 34980 294809 355000)) nil (25767 34999 975771 32000) 0 nil])
([nil nil ((1700 . 2107) (#("- set), and create a tf.data.Dataset that will return each character one by one
  from this set: 
  #+begin_src python :result outputs
  train_size = dataset_size * 90 // 100 
  dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size]) 
  #+end_src
- If the model performs much better on the first part of the validation set than on the last part, then the time series may not be stationary enough." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 5 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 5 6 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 6 11 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 11 12 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 12 43 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 43 79 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 79 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 80 81 (font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 81 82 (font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 82 86 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 86 87 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 87 96 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 96 97 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 97 98 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 98 100 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 100 115 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 115 116 (face org-block-begin-line font-lock-multiline t font-lock-fontified t rear-nonsticky t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 116 134 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 134 135 (face org-block-begin-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 135 137 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 137 142 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 142 143 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 143 147 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 147 157 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 157 158 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 158 162 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 162 174 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 174 175 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 175 176 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 176 178 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 178 185 (face (font-lock-variable-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 185 187 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 187 188 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 188 208 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 208 209 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 209 215 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 215 216 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 216 222 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 222 223 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 223 230 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 230 231 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 231 237 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 237 238 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 238 242 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 242 243 (face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 243 244 (face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 244 245 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 245 246 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 246 248 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 248 257 (face org-block-end-line font-lock-multiline t font-lock-fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 257 258 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 258 259 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 259 260 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 260 264 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 264 281 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 281 282 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 282 338 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 338 339 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 339 340 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 340 361 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 361 362 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 362 407 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 1700) (undo-tree-id81252 . -260) (undo-tree-id81253 . -407) (undo-tree-id81254 . -407) (undo-tree-id81255 . -407) (undo-tree-id81256 . -407) (undo-tree-id81257 . -407) (undo-tree-id81258 . -407) (undo-tree-id81259 . -407) (undo-tree-id81260 . -407) (undo-tree-id81261 . -407) (undo-tree-id81262 . -407) (undo-tree-id81263 . -407) (undo-tree-id81264 . -407) (undo-tree-id81265 . -407) (undo-tree-id81266 . -407) (undo-tree-id81267 . -407) (undo-tree-id81268 . -407) (undo-tree-id81269 . -407) (undo-tree-id81270 . -407) (undo-tree-id81271 . -407) (undo-tree-id81272 . -407) (undo-tree-id81273 . -407) (undo-tree-id81274 . -407) (undo-tree-id81275 . -407) (undo-tree-id81276 . -407) (undo-tree-id81277 . -407) (undo-tree-id81278 . -407) (undo-tree-id81279 . -344) (undo-tree-id81280 . -344) (undo-tree-id81281 . -344) (undo-tree-id81282 . -344) (undo-tree-id81283 . -344) (undo-tree-id81284 . -344) (undo-tree-id81285 . -344) (undo-tree-id81286 . -344) (undo-tree-id81287 . -344) (undo-tree-id81288 . -344) (undo-tree-id81289 . -344) (undo-tree-id81290 . -285) (undo-tree-id81291 . -285) (undo-tree-id81292 . -285) (undo-tree-id81293 . -285) (undo-tree-id81294 . -285) (undo-tree-id81295 . -285) (undo-tree-id81296 . -285) (undo-tree-id81297 . -285) (undo-tree-id81298 . -285) (undo-tree-id81299 . -285) (undo-tree-id81300 . -285) (undo-tree-id81301 . -282) (undo-tree-id81302 . -282) (undo-tree-id81303 . -282) (undo-tree-id81304 . -282) (undo-tree-id81305 . -282) (undo-tree-id81306 . -282) (undo-tree-id81307 . -282) (undo-tree-id81308 . -282) (undo-tree-id81309 . -282) (undo-tree-id81310 . -282) (undo-tree-id81311 . -282) (undo-tree-id81312 . -273) (undo-tree-id81313 . -273) (undo-tree-id81314 . -273) (undo-tree-id81315 . -273) (undo-tree-id81316 . -273) (undo-tree-id81317 . -273) (undo-tree-id81318 . -273) (undo-tree-id81319 . -273) (undo-tree-id81320 . -273) (undo-tree-id81321 . -273) (undo-tree-id81322 . -273) (undo-tree-id81323 . -282) (undo-tree-id81324 . -282) (undo-tree-id81325 . -282) (undo-tree-id81326 . -282) (undo-tree-id81327 . -282) (undo-tree-id81328 . -282) (undo-tree-id81329 . -282) (undo-tree-id81330 . -282) (undo-tree-id81331 . -282) (undo-tree-id81332 . -282) (undo-tree-id81333 . -282) (undo-tree-id81334 . -287) (undo-tree-id81335 . -287) (undo-tree-id81336 . -287) (undo-tree-id81337 . -287) (undo-tree-id81338 . -287) (undo-tree-id81339 . -287) (undo-tree-id81340 . -287) (undo-tree-id81341 . -287) (undo-tree-id81342 . -287) (undo-tree-id81343 . -287) (undo-tree-id81344 . -287) (undo-tree-id81345 . -294) (undo-tree-id81346 . -294) (undo-tree-id81347 . -294) (undo-tree-id81348 . -294) (undo-tree-id81349 . -294) (undo-tree-id81350 . -294) (undo-tree-id81351 . -294) (undo-tree-id81352 . -294) (undo-tree-id81353 . -294) (undo-tree-id81354 . -294) (undo-tree-id81355 . -294) (undo-tree-id81356 . -294) (undo-tree-id81357 . -294) (undo-tree-id81358 . -294) (undo-tree-id81359 . -294) (undo-tree-id81360 . -294) (undo-tree-id81361 . -297) (undo-tree-id81362 . -297) (undo-tree-id81363 . -297) (undo-tree-id81364 . -297) (undo-tree-id81365 . -297) (undo-tree-id81366 . -297) (undo-tree-id81367 . -297) (undo-tree-id81368 . -297) (undo-tree-id81369 . -297) (undo-tree-id81370 . -297) (undo-tree-id81371 . -297) (undo-tree-id81372 . -301) (undo-tree-id81373 . -301) (undo-tree-id81374 . -301) (undo-tree-id81375 . -301) (undo-tree-id81376 . -301) (undo-tree-id81377 . -301) (undo-tree-id81378 . -301) (undo-tree-id81379 . -301) (undo-tree-id81380 . -301) (undo-tree-id81381 . -301) (undo-tree-id81382 . -301) (undo-tree-id81383 . -301) (undo-tree-id81384 . -301) (undo-tree-id81385 . -301) (undo-tree-id81386 . -301) (undo-tree-id81387 . -301) (undo-tree-id81388 . -307) (undo-tree-id81389 . -307) (undo-tree-id81390 . -307) (undo-tree-id81391 . -307) (undo-tree-id81392 . -307) (undo-tree-id81393 . -307) (undo-tree-id81394 . -307) (undo-tree-id81395 . -307) (undo-tree-id81396 . -307) (undo-tree-id81397 . -307) (undo-tree-id81398 . -307) (undo-tree-id81399 . -312) (undo-tree-id81400 . -312) (undo-tree-id81401 . -312) (undo-tree-id81402 . -312) (undo-tree-id81403 . -312) (undo-tree-id81404 . -312) (undo-tree-id81405 . -312) (undo-tree-id81406 . -312) (undo-tree-id81407 . -312) (undo-tree-id81408 . -312) (undo-tree-id81409 . -312) (undo-tree-id81410 . -315) (undo-tree-id81411 . -315) (undo-tree-id81412 . -315) (undo-tree-id81413 . -315) (undo-tree-id81414 . -315) (undo-tree-id81415 . -315) (undo-tree-id81416 . -315) (undo-tree-id81417 . -315) (undo-tree-id81418 . -315) (undo-tree-id81419 . -315) (undo-tree-id81420 . -315) (undo-tree-id81421 . -315) (undo-tree-id81422 . -315) (undo-tree-id81423 . -315) (undo-tree-id81424 . -315) (undo-tree-id81425 . -315) (undo-tree-id81426 . -315) (undo-tree-id81427 . -315) (undo-tree-id81428 . -315) (undo-tree-id81429 . -315) (undo-tree-id81430 . -315) (undo-tree-id81431 . -374) (undo-tree-id81432 . -374) (undo-tree-id81433 . -374) (undo-tree-id81434 . -374) (undo-tree-id81435 . -374) (undo-tree-id81436 . -374) (undo-tree-id81437 . -374) (undo-tree-id81438 . -374) (undo-tree-id81439 . -374) (undo-tree-id81440 . -374) (undo-tree-id81441 . -374) (undo-tree-id81442 . -378) (undo-tree-id81443 . -378) (undo-tree-id81444 . -378) (undo-tree-id81445 . -378) (undo-tree-id81446 . -378) (undo-tree-id81447 . -378) (undo-tree-id81448 . -378) (undo-tree-id81449 . -378) (undo-tree-id81450 . -378) (undo-tree-id81451 . -378) (undo-tree-id81452 . -378) (undo-tree-id81453 . -382) (undo-tree-id81454 . -382) (undo-tree-id81455 . -382) (undo-tree-id81456 . -382) (undo-tree-id81457 . -382) (undo-tree-id81458 . -382) (undo-tree-id81459 . -382) (undo-tree-id81460 . -382) (undo-tree-id81461 . -382) (undo-tree-id81462 . -382) (undo-tree-id81463 . -382) (undo-tree-id81464 . -382) (undo-tree-id81465 . -382) (undo-tree-id81466 . -382) (undo-tree-id81467 . -382) (undo-tree-id81468 . -382) (undo-tree-id81469 . -382) (undo-tree-id81470 . -382) (undo-tree-id81471 . -382) (undo-tree-id81472 . -382) (undo-tree-id81473 . -382) (undo-tree-id81474 . -382) (undo-tree-id81475 . -382) (undo-tree-id81476 . -382) (undo-tree-id81477 . -382) (undo-tree-id81478 . -382) (undo-tree-id81479 . -386) (undo-tree-id81480 . -386) (undo-tree-id81481 . -386) (undo-tree-id81482 . -386) (undo-tree-id81483 . -386) (undo-tree-id81484 . -386) (undo-tree-id81485 . -386) (undo-tree-id81486 . -386) (undo-tree-id81487 . -386) (undo-tree-id81488 . -386) (undo-tree-id81489 . -386) (undo-tree-id81490 . -389) (undo-tree-id81491 . -389) (undo-tree-id81492 . -389) (undo-tree-id81493 . -389) (undo-tree-id81494 . -389) (undo-tree-id81495 . -389) (undo-tree-id81496 . -389) (undo-tree-id81497 . -389) (undo-tree-id81498 . -389) (undo-tree-id81499 . -389) (undo-tree-id81500 . -389) (undo-tree-id81501 . -400) (undo-tree-id81502 . -400) (undo-tree-id81503 . -400) (undo-tree-id81504 . -400) (undo-tree-id81505 . -400) (undo-tree-id81506 . -400) (undo-tree-id81507 . -400) (undo-tree-id81508 . -400) (undo-tree-id81509 . -400) (undo-tree-id81510 . -400) (undo-tree-id81511 . -400) (undo-tree-id81512 . -406) (undo-tree-id81513 . -406) (undo-tree-id81514 . -406) (undo-tree-id81515 . -406) (undo-tree-id81516 . -406) (undo-tree-id81517 . -406) (undo-tree-id81518 . -406) (undo-tree-id81519 . -406) (undo-tree-id81520 . -406) (undo-tree-id81521 . -406) (undo-tree-id81522 . -406) (undo-tree-id81523 . -407) (undo-tree-id81524 . -407) (undo-tree-id81525 . -407) (undo-tree-id81526 . -407) (undo-tree-id81527 . -407) (undo-tree-id81528 . -407) (undo-tree-id81529 . -407) (undo-tree-id81530 . -407) (undo-tree-id81531 . -407) (undo-tree-id81532 . -407) (undo-tree-id81533 . -407) (undo-tree-id81534 . -407) (undo-tree-id81535 . -407) (undo-tree-id81536 . -407) (undo-tree-id81537 . -407) (undo-tree-id81538 . -407) (undo-tree-id81539 . -407) (undo-tree-id81540 . -407) (undo-tree-id81541 . -407) (undo-tree-id81542 . -407) (undo-tree-id81543 . -407) (undo-tree-id81544 . -407) (undo-tree-id81545 . -407) (undo-tree-id81546 . -407) (undo-tree-id81547 . -407) (undo-tree-id81548 . -407) (undo-tree-id81549 . -407) (undo-tree-id81550 . -407) (undo-tree-id81551 . -407) (undo-tree-id81552 . -407) (undo-tree-id81553 . -407) (undo-tree-id81554 . -407) (undo-tree-id81555 . -407) (undo-tree-id81556 . -407) (undo-tree-id81557 . -407) (undo-tree-id81558 . -258) (1700 . 1958) (#(" set), and create a tf.data.Dataset that will return each character one by one
  from this set: 
  #+begin_src python :result outputs
  train_size = dataset_size * 90 // 100 
  dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size]) 
  #+end_src" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 5 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 11 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 42 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 79 80 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t) 80 81 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t) 81 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 85 86 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 86 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 95 96 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 97 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 97 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 99 114 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 114 115 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 115 133 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 133 134 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 134 136 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 136 141 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 141 142 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 142 146 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 146 156 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 156 157 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 157 161 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 161 173 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 173 174 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 174 175 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 175 177 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 177 184 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 184 186 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 186 187 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 187 207 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 207 208 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 208 214 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 214 215 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 215 221 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 221 222 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 222 229 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 229 230 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 230 236 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 236 237 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 237 241 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 241 242 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block)) 242 243 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block)) 243 244 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 244 245 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 245 247 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 247 256 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 1849) (undo-tree-id81559 . -1) (undo-tree-id81560 . -1) (undo-tree-id81561 . -1) (undo-tree-id81562 . -1) (undo-tree-id81563 . -1) (undo-tree-id81564 . -1) (undo-tree-id81565 . -1) (undo-tree-id81566 . -1) (undo-tree-id81567 . -1) (undo-tree-id81568 . -1) (undo-tree-id81569 . -1) (undo-tree-id81570 . -1) (undo-tree-id81571 . -1) (undo-tree-id81572 . -1) (undo-tree-id81573 . -1) (undo-tree-id81574 . -1) (undo-tree-id81575 . -1) (undo-tree-id81576 . -1) (undo-tree-id81577 . -1) (undo-tree-id81578 . -1) (undo-tree-id81579 . -1) (undo-tree-id81580 . -1) (undo-tree-id81581 . -1) (undo-tree-id81582 . -1) (undo-tree-id81583 . -1) (undo-tree-id81584 . -1) (undo-tree-id81585 . -1) (undo-tree-id81586 . -1) (undo-tree-id81587 . -1) (undo-tree-id81588 . -1) (undo-tree-id81589 . -1) (undo-tree-id81590 . -1) (undo-tree-id81591 . -1) (undo-tree-id81592 . -1) (undo-tree-id81593 . -1) (undo-tree-id81594 . -1) 1850 (t 25767 35000 75023 94000)) nil (25767 35019 403035 942000) 0 nil])
([nil nil ((#("set), and " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 1852) (undo-tree-id81081 . -9) (undo-tree-id81082 . -9) (undo-tree-id81083 . 10) (undo-tree-id81084 . -9) (undo-tree-id81085 . -10) (undo-tree-id81086 . -9) (undo-tree-id81087 . -2) (undo-tree-id81088 . -2) (undo-tree-id81089 . -2) (undo-tree-id81090 . -2) (undo-tree-id81091 . -2) (undo-tree-id81092 . -2) (undo-tree-id81093 . -2) (undo-tree-id81094 . -2) (undo-tree-id81095 . -2) (undo-tree-id81096 . -2) (undo-tree-id81097 . -2) (undo-tree-id81098 . -2) (undo-tree-id81099 . -2) (undo-tree-id81100 . -2) (undo-tree-id81101 . -2) (undo-tree-id81102 . -2) (undo-tree-id81103 . -2) (undo-tree-id81104 . -2) (undo-tree-id81105 . -2) (undo-tree-id81106 . -2) (undo-tree-id81107 . -2) (undo-tree-id81108 . -3) (undo-tree-id81109 . -3) (undo-tree-id81110 . -3) (undo-tree-id81111 . -3) (undo-tree-id81112 . -3) (undo-tree-id81113 . -3) (undo-tree-id81114 . -3) (undo-tree-id81115 . -3) (undo-tree-id81116 . -3) (undo-tree-id81117 . -3) (undo-tree-id81118 . -3) (undo-tree-id81119 . -3) (undo-tree-id81120 . -3) (undo-tree-id81121 . -3) (undo-tree-id81122 . -3) (undo-tree-id81123 . -3) (undo-tree-id81124 . -3) (undo-tree-id81125 . -3) (undo-tree-id81126 . -3) (undo-tree-id81127 . -3) (undo-tree-id81128 . -3) (undo-tree-id81129 . -3) (undo-tree-id81130 . -3) (undo-tree-id81131 . -3) (undo-tree-id81132 . -3) (undo-tree-id81133 . -3) (undo-tree-id81134 . -3) (undo-tree-id81135 . -3) (undo-tree-id81136 . -3) (undo-tree-id81137 . -3) (undo-tree-id81138 . -3) (undo-tree-id81139 . -4) (undo-tree-id81140 . -4) (undo-tree-id81141 . -4) (undo-tree-id81142 . -4) (undo-tree-id81143 . -4) (undo-tree-id81144 . -4) (undo-tree-id81145 . -4) (undo-tree-id81146 . -4) (undo-tree-id81147 . -4) (undo-tree-id81148 . -4) (undo-tree-id81149 . -4) (undo-tree-id81150 . -4) (undo-tree-id81151 . -4) (undo-tree-id81152 . -4) (undo-tree-id81153 . -4) (undo-tree-id81154 . -4) (undo-tree-id81155 . -5) (undo-tree-id81156 . -5) (undo-tree-id81157 . -5) (undo-tree-id81158 . -5) (undo-tree-id81159 . -5) (undo-tree-id81160 . -5) (undo-tree-id81161 . -5) (undo-tree-id81162 . -5) (undo-tree-id81163 . -5) (undo-tree-id81164 . -5) (undo-tree-id81165 . -5) (undo-tree-id81166 . -5) (undo-tree-id81167 . -5) (undo-tree-id81168 . -5) (undo-tree-id81169 . -5) (undo-tree-id81170 . -5) (undo-tree-id81171 . -5) (undo-tree-id81172 . -5) (undo-tree-id81173 . -5) (undo-tree-id81174 . -5) (undo-tree-id81175 . -5) (undo-tree-id81176 . -6) (undo-tree-id81177 . -6) (undo-tree-id81178 . -6) (undo-tree-id81179 . -6) (undo-tree-id81180 . -6) (undo-tree-id81181 . -6) (undo-tree-id81182 . -6) (undo-tree-id81183 . -6) (undo-tree-id81184 . -6) (undo-tree-id81185 . -6) (undo-tree-id81186 . -6) (undo-tree-id81187 . -6) (undo-tree-id81188 . -6) (undo-tree-id81189 . -6) (undo-tree-id81190 . -6) (undo-tree-id81191 . -6) (undo-tree-id81192 . -7) (undo-tree-id81193 . -7) (undo-tree-id81194 . -7) (undo-tree-id81195 . -7) (undo-tree-id81196 . -7) (undo-tree-id81197 . -7) (undo-tree-id81198 . -7) (undo-tree-id81199 . -7) (undo-tree-id81200 . -7) (undo-tree-id81201 . -7) (undo-tree-id81202 . -7) (undo-tree-id81203 . -7) (undo-tree-id81204 . -7) (undo-tree-id81205 . -7) (undo-tree-id81206 . -7) (undo-tree-id81207 . -7) (undo-tree-id81208 . -8) (undo-tree-id81209 . -8) (undo-tree-id81210 . -8) (undo-tree-id81211 . -8) (undo-tree-id81212 . -8) (undo-tree-id81213 . -8) (undo-tree-id81214 . -8) (undo-tree-id81215 . -8) (undo-tree-id81216 . -8) (undo-tree-id81217 . -8) (undo-tree-id81218 . -8) (undo-tree-id81219 . -8) (undo-tree-id81220 . -8) (undo-tree-id81221 . -8) (undo-tree-id81222 . -8) (undo-tree-id81223 . -8) (undo-tree-id81224 . -8) (undo-tree-id81225 . -8) (undo-tree-id81226 . -8) (undo-tree-id81227 . -8) (undo-tree-id81228 . -8) (undo-tree-id81229 . -9) (undo-tree-id81230 . -9) (undo-tree-id81231 . -9) (undo-tree-id81232 . -9) (undo-tree-id81233 . -9) (undo-tree-id81234 . -9) (undo-tree-id81235 . -9) (undo-tree-id81236 . -9) (undo-tree-id81237 . -9) (undo-tree-id81238 . -9) (undo-tree-id81239 . -9) (undo-tree-id81240 . -9) (undo-tree-id81241 . -9) (undo-tree-id81242 . -9) (undo-tree-id81243 . -9) (undo-tree-id81244 . -9) (undo-tree-id81245 . -9) (undo-tree-id81246 . -9) (undo-tree-id81247 . -9) (undo-tree-id81248 . -9) (undo-tree-id81249 . -9) (undo-tree-id81250 . -9) (undo-tree-id81251 . -10) 1861) nil (25767 35019 402174 899000) 0 nil])
([nil nil ((1919 . 1920) (#("  " 0 1 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t) 1 2 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . 1919) (#("
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -1919) (undo-tree-id81595 . -1) 1852 (t 25767 35019 495235 87000)) nil (25767 35040 191985 596000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -1936) (undo-tree-id81596 . -2) (undo-tree-id81597 . -2) (undo-tree-id81598 . -2) (undo-tree-id81599 . -2) (undo-tree-id81600 . -2) (undo-tree-id81601 . -2) (undo-tree-id81602 . -2) (undo-tree-id81603 . -2) (undo-tree-id81604 . -2) (undo-tree-id81605 . -2) 1938 (1935 . 1938) (t 25767 35040 279464 242000) 1919) nil (25767 35042 653389 78000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2154) (undo-tree-id81606 . -1) (undo-tree-id81607 . -1) (undo-tree-id81608 . -1) (undo-tree-id81609 . -1) (undo-tree-id81610 . -1) (undo-tree-id81611 . -1) (undo-tree-id81612 . -1) (undo-tree-id81613 . -1) (undo-tree-id81614 . -1) (undo-tree-id81615 . -1) (undo-tree-id81616 . -1) (undo-tree-id81617 . -1) (undo-tree-id81618 . -1) (undo-tree-id81619 . -1) (undo-tree-id81620 . -1) (undo-tree-id81621 . -1) (undo-tree-id81622 . -1) (t 25767 35042 743491 558000)) nil (25767 35057 950424 874000) 0 nil])
([nil nil ((2412 . 2413) (t 25767 35058 43661 880000)) nil (25767 35101 693338 243000) 0 nil])
([nil nil ((2541 . 2543) (2536 . 2541) (t 25767 35101 788155 246000)) nil (25767 35137 29700 764000) 0 nil])
([nil nil ((#("that contains windows, (a nested dataset)" 0 24 (font-lock-fontified t fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 24 41 (font-lock-fontified t fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2552) (undo-tree-id81623 . -40) (undo-tree-id81624 . 8) (undo-tree-id81625 . -40) (undo-tree-id81626 . -26) (undo-tree-id81627 . -26) (undo-tree-id81628 . -26) (undo-tree-id81629 . -26) (undo-tree-id81630 . -26) (undo-tree-id81631 . -26) (undo-tree-id81632 . -26) (undo-tree-id81633 . -26) (undo-tree-id81634 . -26) (undo-tree-id81635 . -26) (undo-tree-id81636 . -26) (undo-tree-id81637 . -26) (undo-tree-id81638 . -26) (undo-tree-id81639 . -26) (undo-tree-id81640 . -26) (undo-tree-id81641 . -26) (undo-tree-id81642 . -26) (undo-tree-id81643 . -26) (undo-tree-id81644 . -26) (undo-tree-id81645 . -26) (undo-tree-id81646 . -26) (undo-tree-id81647 . -26) (undo-tree-id81648 . -26) (undo-tree-id81649 . -26) (undo-tree-id81650 . -26) (undo-tree-id81651 . -26) (undo-tree-id81652 . -41) (undo-tree-id81653 . -41)) nil (25767 35137 29695 199000) 0 nil])
([nil nil ((2551 . 2552) (#(" " 0 1 (font-lock-fontified t fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2551) (undo-tree-id81654 . -1) (undo-tree-id81655 . -1) (undo-tree-id81656 . -1) (undo-tree-id81657 . -1) (undo-tree-id81658 . -1) (undo-tree-id81659 . -1) (undo-tree-id81660 . -1) (undo-tree-id81661 . -1) (undo-tree-id81662 . -1) (undo-tree-id81663 . -1) (undo-tree-id81664 . -1) (undo-tree-id81665 . -1) (undo-tree-id81666 . -1) (undo-tree-id81667 . -1) (undo-tree-id81668 . -1) (undo-tree-id81669 . -1) (undo-tree-id81670 . -1) (undo-tree-id81671 . -1) (undo-tree-id81672 . -1) (undo-tree-id81673 . -1) (undo-tree-id81674 . -1) (undo-tree-id81675 . -1) (undo-tree-id81676 . -1) (undo-tree-id81677 . -1) (undo-tree-id81678 . -1) (undo-tree-id81679 . -1) (undo-tree-id81680 . -1) (undo-tree-id81681 . -1) (undo-tree-id81682 . -1) (undo-tree-id81683 . -1) (undo-tree-id81684 . -1) (undo-tree-id81685 . -1) (undo-tree-id81686 . -1) (undo-tree-id81687 . -1) (undo-tree-id81688 . -1) (undo-tree-id81689 . -1) 2552 (t 25767 35137 120560 237000)) nil (25767 35140 184427 372000) 0 nil])
([nil nil ((#("Moreover, " 0 10 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2767) (undo-tree-id81690 . -9) (undo-tree-id81691 . -9) (undo-tree-id81692 . -9) (undo-tree-id81693 . -7) (undo-tree-id81694 . -8) (undo-tree-id81695 . -10) (undo-tree-id81696 . -9) (undo-tree-id81697 . -7) (undo-tree-id81698 . -7) (undo-tree-id81699 . -7) (undo-tree-id81700 . -7) (undo-tree-id81701 . -7) (undo-tree-id81702 . -7) (undo-tree-id81703 . -8) (undo-tree-id81704 . -8) (undo-tree-id81705 . -8) (undo-tree-id81706 . -8) (undo-tree-id81707 . -8) (undo-tree-id81708 . -8) (undo-tree-id81709 . -9) (undo-tree-id81710 . -9) (undo-tree-id81711 . -9) (undo-tree-id81712 . -9) (undo-tree-id81713 . -9) (undo-tree-id81714 . -9) (undo-tree-id81715 . -9) (undo-tree-id81716 . -10) 2776 (t 25767 35140 272596 633000)) nil (25767 35184 971282 115000) 0 nil])
([nil nil ((2767 . 2768) (#("t" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2767)) nil (25767 35184 971247 83000) 0 nil])
([nil nil ((2820 . 2821) (t 25767 35185 57118 233000)) nil (25767 35190 506308 919000) 0 nil])
([nil nil ((2872 . 2873) (t 25767 35190 593183 273000)) nil (25767 35206 689083 896000) 0 nil])
([nil nil ((#("when the instances in the training set are independent and identically distributed)." 0 34 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 34 35 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 35 83 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 83 84 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 2874) (undo-tree-id81717 . -83) (undo-tree-id81718 . -84) (undo-tree-id81719 . -84)) nil (25767 35206 689080 40000) 0 nil])
([nil nil ((2877 . 2878) (#("Then we can b" 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 2877) (undo-tree-id81720 . -12) (undo-tree-id81721 . -12) (undo-tree-id81722 . -12) (undo-tree-id81723 . -3) (undo-tree-id81724 . -3) (undo-tree-id81725 . -3) (undo-tree-id81726 . -3) (undo-tree-id81727 . -3) (undo-tree-id81728 . -3) (undo-tree-id81729 . -3) (undo-tree-id81730 . -3) (undo-tree-id81731 . -3) (undo-tree-id81732 . -3) (undo-tree-id81733 . -3) (undo-tree-id81734 . -3) (undo-tree-id81735 . -3) (undo-tree-id81736 . -3) (undo-tree-id81737 . -3) (undo-tree-id81738 . -3) (undo-tree-id81739 . -3) (undo-tree-id81740 . -3) (undo-tree-id81741 . -3) (undo-tree-id81742 . -3) (undo-tree-id81743 . -3) (undo-tree-id81744 . -3) (undo-tree-id81745 . -3) (undo-tree-id81746 . -3) (undo-tree-id81747 . -3) (undo-tree-id81748 . -3) (undo-tree-id81749 . -3) (undo-tree-id81750 . -3) (undo-tree-id81751 . -3) (undo-tree-id81752 . -3) (undo-tree-id81753 . -3) (undo-tree-id81754 . -13) (undo-tree-id81755 . -12) (undo-tree-id81756 . -3) (undo-tree-id81757 . -3) (undo-tree-id81758 . -3) (undo-tree-id81759 . -3) (undo-tree-id81760 . -3) (undo-tree-id81761 . -3) (undo-tree-id81762 . -3) (undo-tree-id81763 . -3) (undo-tree-id81764 . -3) (undo-tree-id81765 . -3) (undo-tree-id81766 . -3) (undo-tree-id81767 . -3) (undo-tree-id81768 . -3) (undo-tree-id81769 . -3) (undo-tree-id81770 . -3) (undo-tree-id81771 . -3) (undo-tree-id81772 . -6) (undo-tree-id81773 . -6) (undo-tree-id81774 . -6) (undo-tree-id81775 . -6) (undo-tree-id81776 . -6) (undo-tree-id81777 . -6) (undo-tree-id81778 . -6) (undo-tree-id81779 . -6) (undo-tree-id81780 . -6) (undo-tree-id81781 . -6) (undo-tree-id81782 . -6) (undo-tree-id81783 . -6) (undo-tree-id81784 . -6) (undo-tree-id81785 . -6) (undo-tree-id81786 . -6) (undo-tree-id81787 . -6) (undo-tree-id81788 . -10) (undo-tree-id81789 . -10) (undo-tree-id81790 . -10) (undo-tree-id81791 . -10) (undo-tree-id81792 . -10) (undo-tree-id81793 . -10) (undo-tree-id81794 . -10) (undo-tree-id81795 . -10) (undo-tree-id81796 . -10) (undo-tree-id81797 . -10) (undo-tree-id81798 . -10) (undo-tree-id81799 . -10) (undo-tree-id81800 . -10) (undo-tree-id81801 . -10) (undo-tree-id81802 . -10) (undo-tree-id81803 . -10) (undo-tree-id81804 . -10) (undo-tree-id81805 . -10) (undo-tree-id81806 . -10) (undo-tree-id81807 . -10) (undo-tree-id81808 . -10) (undo-tree-id81809 . -12) (undo-tree-id81810 . -12) (undo-tree-id81811 . -12) (undo-tree-id81812 . -12) (undo-tree-id81813 . -12) (undo-tree-id81814 . -12) (undo-tree-id81815 . -12) (undo-tree-id81816 . -12) (undo-tree-id81817 . -12) (undo-tree-id81818 . -12) (undo-tree-id81819 . -12) (undo-tree-id81820 . -12) (undo-tree-id81821 . -12) (undo-tree-id81822 . -12) (undo-tree-id81823 . -12) (undo-tree-id81824 . -12) (undo-tree-id81825 . -12) (undo-tree-id81826 . -12) (undo-tree-id81827 . -12) (undo-tree-id81828 . -12) (undo-tree-id81829 . -12) (undo-tree-id81830 . -12) (undo-tree-id81831 . -12) (undo-tree-id81832 . -12) (undo-tree-id81833 . -12) (undo-tree-id81834 . -12) (undo-tree-id81835 . -12) (undo-tree-id81836 . -13) (undo-tree-id81837 . -13) (undo-tree-id81838 . -13) 2889 (t 25767 35206 825374 657000)) nil (25767 35217 305088 379000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3622) (undo-tree-id81839 . -1) (undo-tree-id81840 . -1) (undo-tree-id81841 . -1) (t 25767 35217 389499 746000)) nil (25767 35240 981095 799000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3696) (undo-tree-id82035 . -1) (t 25767 35241 65781 577000)) nil (25767 35267 803835 47000) 0 nil])
([nil nil ((3709 . 3713) (#("is" 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3709) (undo-tree-id82000 . -1) (undo-tree-id82001 . -1) (undo-tree-id82002 . -1) (undo-tree-id82003 . -2) (undo-tree-id82004 . -1) (undo-tree-id82005 . -1) (undo-tree-id82006 . -1) (undo-tree-id82007 . -1) (undo-tree-id82008 . -1) (undo-tree-id82009 . -1) (undo-tree-id82010 . -1) (undo-tree-id82011 . -1) (undo-tree-id82012 . -1) (undo-tree-id82013 . -1) (undo-tree-id82014 . -1) (undo-tree-id82015 . -1) (undo-tree-id82016 . -1) (undo-tree-id82017 . -1) (undo-tree-id82018 . -1) (undo-tree-id82019 . -1) (undo-tree-id82020 . -1) (undo-tree-id82021 . -1) (undo-tree-id82022 . -1) (undo-tree-id82023 . -1) (undo-tree-id82024 . -1) (undo-tree-id82025 . -1) (undo-tree-id82026 . -1) (undo-tree-id82027 . -1) (undo-tree-id82028 . -1) (undo-tree-id82029 . -1) (undo-tree-id82030 . -1) (undo-tree-id82031 . -1) (undo-tree-id82032 . -2) (undo-tree-id82033 . -2) (undo-tree-id82034 . -2) 3710) nil (25767 35267 803346 853000) 0 nil])
([nil nil ((#("of " 0 3 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3714) (undo-tree-id81951 . -2) (undo-tree-id81952 . -2) (undo-tree-id81953 . -2) (undo-tree-id81954 . -3) (undo-tree-id81955 . -2) (undo-tree-id81956 . -1) (undo-tree-id81957 . -1) (undo-tree-id81958 . -1) (undo-tree-id81959 . -1) (undo-tree-id81960 . -1) (undo-tree-id81961 . -1) (undo-tree-id81962 . -1) (undo-tree-id81963 . -1) (undo-tree-id81964 . -1) (undo-tree-id81965 . -1) (undo-tree-id81966 . -1) (undo-tree-id81967 . -1) (undo-tree-id81968 . -1) (undo-tree-id81969 . -1) (undo-tree-id81970 . -1) (undo-tree-id81971 . -1) (undo-tree-id81972 . -1) (undo-tree-id81973 . -1) (undo-tree-id81974 . -1) (undo-tree-id81975 . -1) (undo-tree-id81976 . -1) (undo-tree-id81977 . -2) (undo-tree-id81978 . -2) (undo-tree-id81979 . -2) (undo-tree-id81980 . -2) (undo-tree-id81981 . -2) (undo-tree-id81982 . -2) (undo-tree-id81983 . -2) (undo-tree-id81984 . -2) (undo-tree-id81985 . -2) (undo-tree-id81986 . -2) (undo-tree-id81987 . -2) (undo-tree-id81988 . -2) (undo-tree-id81989 . -2) (undo-tree-id81990 . -2) (undo-tree-id81991 . -2) (undo-tree-id81992 . -2) (undo-tree-id81993 . -2) (undo-tree-id81994 . -2) (undo-tree-id81995 . -2) (undo-tree-id81996 . -2) (undo-tree-id81997 . -2) (undo-tree-id81998 . -2) (undo-tree-id81999 . -3) 3716) nil (25767 35267 801244 876000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -3723) (undo-tree-id81843 . -1) (undo-tree-id81844 . -1) (undo-tree-id81845 . -1) (undo-tree-id81846 . -1) (undo-tree-id81847 . -1) (undo-tree-id81848 . -1) (undo-tree-id81849 . -1) (undo-tree-id81850 . -1) (undo-tree-id81851 . -1) (undo-tree-id81852 . -1) (undo-tree-id81853 . -1) (undo-tree-id81854 . -1) (undo-tree-id81855 . -1) (undo-tree-id81856 . -1) (undo-tree-id81857 . -1) (undo-tree-id81858 . -1) (undo-tree-id81859 . -1) (undo-tree-id81860 . -1) (undo-tree-id81861 . -1) (undo-tree-id81862 . -1) (undo-tree-id81863 . -1) (undo-tree-id81864 . -1) (undo-tree-id81865 . -1) (undo-tree-id81866 . -1) (undo-tree-id81867 . -1) (undo-tree-id81868 . -1) (undo-tree-id81869 . -1) (undo-tree-id81870 . -1) (undo-tree-id81871 . -1) (undo-tree-id81872 . -1) (undo-tree-id81873 . -1) (undo-tree-id81874 . -1) (undo-tree-id81875 . -1) (undo-tree-id81876 . -1) (undo-tree-id81877 . -1) (undo-tree-id81878 . -1) (undo-tree-id81879 . -1) (undo-tree-id81880 . -1) (undo-tree-id81881 . -1) (undo-tree-id81882 . -1) (undo-tree-id81883 . -1) (undo-tree-id81884 . -1) (undo-tree-id81885 . -1) (undo-tree-id81886 . -1) (undo-tree-id81887 . -1) (undo-tree-id81888 . -1) (undo-tree-id81889 . -1) (undo-tree-id81890 . -1) (undo-tree-id81891 . -1) (undo-tree-id81892 . -1) (undo-tree-id81893 . -1) (undo-tree-id81894 . -1) (undo-tree-id81895 . -1) (undo-tree-id81896 . -1) (undo-tree-id81897 . -1) (undo-tree-id81898 . -1) (undo-tree-id81899 . -1) (undo-tree-id81900 . -1) (undo-tree-id81901 . -1) (undo-tree-id81902 . -1) (undo-tree-id81903 . -1) (undo-tree-id81904 . -1) (undo-tree-id81905 . -1) (undo-tree-id81906 . -1) (undo-tree-id81907 . -1) 3724 (#("each" 0 4 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3724) (undo-tree-id81908 . -3) (undo-tree-id81909 . -3) (undo-tree-id81910 . -3) (undo-tree-id81911 . -3) (undo-tree-id81912 . -3) (undo-tree-id81913 . -3) (undo-tree-id81914 . -3) (undo-tree-id81915 . -3) (undo-tree-id81916 . -3) (undo-tree-id81917 . -3) (undo-tree-id81918 . -3) (undo-tree-id81919 . -3) (undo-tree-id81920 . -3) (undo-tree-id81921 . -3) (undo-tree-id81922 . -3) (undo-tree-id81923 . -3) (undo-tree-id81924 . -3) (undo-tree-id81925 . -3) (undo-tree-id81926 . -3) (undo-tree-id81927 . -3) (undo-tree-id81928 . -3) (undo-tree-id81929 . -3) (undo-tree-id81930 . -3) (undo-tree-id81931 . -3) (undo-tree-id81932 . -3) (undo-tree-id81933 . -3) (undo-tree-id81934 . -3) (undo-tree-id81935 . -3) (undo-tree-id81936 . -3) (undo-tree-id81937 . -3) (undo-tree-id81938 . -3) (undo-tree-id81939 . -3) (undo-tree-id81940 . -3) (undo-tree-id81941 . -3) (undo-tree-id81942 . -3) (undo-tree-id81943 . -3) (undo-tree-id81944 . -3) (undo-tree-id81945 . -3) (undo-tree-id81946 . -3) (undo-tree-id81947 . -3) (undo-tree-id81948 . -3) (undo-tree-id81949 . -4) (undo-tree-id81950 . -4) 3727) nil (25767 35267 801174 619000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3812) (undo-tree-id81842 . -1)) nil (25767 35267 801056 900000) 0 nil])
([nil nil ((3814 . 3817) (#("We can" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 6 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3814) (undo-tree-id82038 . -5) (undo-tree-id82039 . -5) (undo-tree-id82040 . -5) (undo-tree-id82041 . -6) (undo-tree-id82042 . -5) (undo-tree-id82043 . -1) (undo-tree-id82044 . -1) (undo-tree-id82045 . -1) (undo-tree-id82046 . -1) (undo-tree-id82047 . -1) (undo-tree-id82048 . -1) (undo-tree-id82049 . -5) (undo-tree-id82050 . -5) (undo-tree-id82051 . -5) (undo-tree-id82052 . -5) (undo-tree-id82053 . -5) (undo-tree-id82054 . -5) (undo-tree-id82055 . -5) (undo-tree-id82056 . -6) (undo-tree-id82057 . -6) (undo-tree-id82058 . -6) 3819 (t 25767 35267 930103 744000)) nil (25767 35284 797464 421000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3853) (undo-tree-id82037 . -1)) nil (25767 35284 797444 996000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3907) (undo-tree-id82036 . -1)) nil (25767 35284 797439 685000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 3949) (undo-tree-id82059 . -1) (t 25767 35284 934308 918000)) nil (25767 35296 39387 808000) 0 nil])
([nil nil ((3951 . 3952) (#("We want to o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 12 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 3951) (undo-tree-id82060 . -11) (undo-tree-id82061 . -11) (undo-tree-id82062 . -11) (undo-tree-id82063 . -1) (undo-tree-id82064 . -1) (undo-tree-id82065 . -1) (undo-tree-id82066 . -1) (undo-tree-id82067 . -1) (undo-tree-id82068 . -1) (undo-tree-id82069 . -1) (undo-tree-id82070 . -1) (undo-tree-id82071 . -1) (undo-tree-id82072 . -1) (undo-tree-id82073 . -1) (undo-tree-id82074 . -1) (undo-tree-id82075 . -1) (undo-tree-id82076 . -1) (undo-tree-id82077 . -1) (undo-tree-id82078 . -1) (undo-tree-id82079 . -1) (undo-tree-id82080 . -1) (undo-tree-id82081 . -1) (undo-tree-id82082 . -1) (undo-tree-id82083 . -1) (undo-tree-id82084 . -12) (undo-tree-id82085 . -11) (undo-tree-id82086 . -1) (undo-tree-id82087 . -1) (undo-tree-id82088 . -1) (undo-tree-id82089 . -1) (undo-tree-id82090 . -1) (undo-tree-id82091 . -1) (undo-tree-id82092 . -1) (undo-tree-id82093 . -1) (undo-tree-id82094 . -1) (undo-tree-id82095 . -1) (undo-tree-id82096 . -1) (undo-tree-id82097 . -1) (undo-tree-id82098 . -1) (undo-tree-id82099 . -1) (undo-tree-id82100 . -1) (undo-tree-id82101 . -1) (undo-tree-id82102 . -1) (undo-tree-id82103 . -1) (undo-tree-id82104 . -1) (undo-tree-id82105 . -1) (undo-tree-id82106 . -1) (undo-tree-id82107 . -6) (undo-tree-id82108 . -6) (undo-tree-id82109 . -6) (undo-tree-id82110 . -6) (undo-tree-id82111 . -6) (undo-tree-id82112 . -6) (undo-tree-id82113 . -6) (undo-tree-id82114 . -6) (undo-tree-id82115 . -6) (undo-tree-id82116 . -6) (undo-tree-id82117 . -6) (undo-tree-id82118 . -6) (undo-tree-id82119 . -6) (undo-tree-id82120 . -6) (undo-tree-id82121 . -6) (undo-tree-id82122 . -6) (undo-tree-id82123 . -9) (undo-tree-id82124 . -9) (undo-tree-id82125 . -9) (undo-tree-id82126 . -9) (undo-tree-id82127 . -9) (undo-tree-id82128 . -9) (undo-tree-id82129 . -9) (undo-tree-id82130 . -9) (undo-tree-id82131 . -9) (undo-tree-id82132 . -9) (undo-tree-id82133 . -9) (undo-tree-id82134 . -9) (undo-tree-id82135 . -9) (undo-tree-id82136 . -9) (undo-tree-id82137 . -9) (undo-tree-id82138 . -9) (undo-tree-id82139 . -9) (undo-tree-id82140 . -9) (undo-tree-id82141 . -9) (undo-tree-id82142 . -9) (undo-tree-id82143 . -9) (undo-tree-id82144 . -9) (undo-tree-id82145 . -9) (undo-tree-id82146 . -9) (undo-tree-id82147 . -9) (undo-tree-id82148 . -9) (undo-tree-id82149 . -10) (undo-tree-id82150 . -10) (undo-tree-id82151 . -10) (undo-tree-id82152 . -10) (undo-tree-id82153 . -10) (undo-tree-id82154 . -10) (undo-tree-id82155 . -10) (undo-tree-id82156 . -10) (undo-tree-id82157 . -10) (undo-tree-id82158 . -10) (undo-tree-id82159 . -10) (undo-tree-id82160 . -10) (undo-tree-id82161 . -10) (undo-tree-id82162 . -10) (undo-tree-id82163 . -10) (undo-tree-id82164 . -10) (undo-tree-id82165 . -11) (undo-tree-id82166 . -11) (undo-tree-id82167 . -11) (undo-tree-id82168 . -11) (undo-tree-id82169 . -11) (undo-tree-id82170 . -11) (undo-tree-id82171 . -11) (undo-tree-id82172 . -11) (undo-tree-id82173 . -11) (undo-tree-id82174 . -11) (undo-tree-id82175 . -11) (undo-tree-id82176 . -11) (undo-tree-id82177 . -11) (undo-tree-id82178 . -11) (undo-tree-id82179 . -11) (undo-tree-id82180 . -11) (undo-tree-id82181 . -11) (undo-tree-id82182 . -12) (undo-tree-id82183 . -12) (undo-tree-id82184 . -12) 3962 (t 25767 35296 126444 478000)) nil (25767 35302 310578 993000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4021) (undo-tree-id82185 . -1) (t 25767 35302 394520 571000)) nil (25767 35311 72111 606000) 0 nil])
([nil nil ((4021 . 4167) (#("- so we apply the softmax activation function to the outputs of the Dense layer.

- The output probabilities should sum up to 1 at each time step." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 67 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 68 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 80 81 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 81 82 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 82 83 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 83 84 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 84 121 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 121 124 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 124 140 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 140 141 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 141 146 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4021) (undo-tree-id82254 . -145) (undo-tree-id82255 . -145) (undo-tree-id82256 . -146) (undo-tree-id82257 . -84) (undo-tree-id82258 . -84) (undo-tree-id82259 . -84) (undo-tree-id82260 . -84) (undo-tree-id82261 . -84) (undo-tree-id82262 . -84) (undo-tree-id82263 . -84) (undo-tree-id82264 . -84) (undo-tree-id82265 . -84) (undo-tree-id82266 . -84) (undo-tree-id82267 . -84) (undo-tree-id82268 . -88) (undo-tree-id82269 . -88) (undo-tree-id82270 . -88) (undo-tree-id82271 . -88) (undo-tree-id82272 . -88) (undo-tree-id82273 . -88) (undo-tree-id82274 . -88) (undo-tree-id82275 . -88) (undo-tree-id82276 . -88) (undo-tree-id82277 . -88) (undo-tree-id82278 . -88) (undo-tree-id82279 . -95) (undo-tree-id82280 . -95) (undo-tree-id82281 . -95) (undo-tree-id82282 . -95) (undo-tree-id82283 . -95) (undo-tree-id82284 . -95) (undo-tree-id82285 . -95) (undo-tree-id82286 . -95) (undo-tree-id82287 . -95) (undo-tree-id82288 . -95) (undo-tree-id82289 . -95) (undo-tree-id82290 . -109) (undo-tree-id82291 . -109) (undo-tree-id82292 . -109) (undo-tree-id82293 . -109) (undo-tree-id82294 . -109) (undo-tree-id82295 . -109) (undo-tree-id82296 . -109) (undo-tree-id82297 . -109) (undo-tree-id82298 . -109) (undo-tree-id82299 . -109) (undo-tree-id82300 . -109) (undo-tree-id82301 . -116) (undo-tree-id82302 . -116) (undo-tree-id82303 . -116) (undo-tree-id82304 . -116) (undo-tree-id82305 . -116) (undo-tree-id82306 . -116) (undo-tree-id82307 . -116) (undo-tree-id82308 . -116) (undo-tree-id82309 . -116) (undo-tree-id82310 . -116) (undo-tree-id82311 . -116) (undo-tree-id82312 . -116) (undo-tree-id82313 . -116) (undo-tree-id82314 . -116) (undo-tree-id82315 . -116) (undo-tree-id82316 . -116) (undo-tree-id82317 . -120) (undo-tree-id82318 . -120) (undo-tree-id82319 . -120) (undo-tree-id82320 . -120) (undo-tree-id82321 . -120) (undo-tree-id82322 . -120) (undo-tree-id82323 . -120) (undo-tree-id82324 . -120) (undo-tree-id82325 . -120) (undo-tree-id82326 . -120) (undo-tree-id82327 . -120) (undo-tree-id82328 . -120) (undo-tree-id82329 . -120) (undo-tree-id82330 . -120) (undo-tree-id82331 . -120) (undo-tree-id82332 . -120) (undo-tree-id82333 . -123) (undo-tree-id82334 . -123) (undo-tree-id82335 . -123) (undo-tree-id82336 . -123) (undo-tree-id82337 . -123) (undo-tree-id82338 . -123) (undo-tree-id82339 . -123) (undo-tree-id82340 . -123) (undo-tree-id82341 . -123) (undo-tree-id82342 . -123) (undo-tree-id82343 . -123) (undo-tree-id82344 . -126) (undo-tree-id82345 . -126) (undo-tree-id82346 . -126) (undo-tree-id82347 . -126) (undo-tree-id82348 . -126) (undo-tree-id82349 . -126) (undo-tree-id82350 . -126) (undo-tree-id82351 . -126) (undo-tree-id82352 . -126) (undo-tree-id82353 . -126) (undo-tree-id82354 . -126) (undo-tree-id82355 . -126) (undo-tree-id82356 . -126) (undo-tree-id82357 . -126) (undo-tree-id82358 . -126) (undo-tree-id82359 . -126) (undo-tree-id82360 . -128) (undo-tree-id82361 . -128) (undo-tree-id82362 . -128) (undo-tree-id82363 . -128) (undo-tree-id82364 . -128) (undo-tree-id82365 . -128) (undo-tree-id82366 . -128) (undo-tree-id82367 . -128) (undo-tree-id82368 . -128) (undo-tree-id82369 . -128) (undo-tree-id82370 . -128) (undo-tree-id82371 . -128) (undo-tree-id82372 . -128) (undo-tree-id82373 . -128) (undo-tree-id82374 . -128) (undo-tree-id82375 . -128) (undo-tree-id82376 . -131) (undo-tree-id82377 . -131) (undo-tree-id82378 . -131) (undo-tree-id82379 . -131) (undo-tree-id82380 . -131) (undo-tree-id82381 . -131) (undo-tree-id82382 . -131) (undo-tree-id82383 . -131) (undo-tree-id82384 . -131) (undo-tree-id82385 . -131) (undo-tree-id82386 . -131) (undo-tree-id82387 . -136) (undo-tree-id82388 . -136) (undo-tree-id82389 . -136) (undo-tree-id82390 . -136) (undo-tree-id82391 . -136) (undo-tree-id82392 . -136) (undo-tree-id82393 . -136) (undo-tree-id82394 . -136) (undo-tree-id82395 . -136) (undo-tree-id82396 . -136) (undo-tree-id82397 . -136) (undo-tree-id82398 . -136) (undo-tree-id82399 . -136) (undo-tree-id82400 . -136) (undo-tree-id82401 . -136) (undo-tree-id82402 . -136) (undo-tree-id82403 . -141) (undo-tree-id82404 . -141) (undo-tree-id82405 . -141) (undo-tree-id82406 . -141) (undo-tree-id82407 . -141) (undo-tree-id82408 . -141) (undo-tree-id82409 . -141) (undo-tree-id82410 . -141) (undo-tree-id82411 . -141) (undo-tree-id82412 . -141) (undo-tree-id82413 . -141) (undo-tree-id82414 . -141) (undo-tree-id82415 . -141) (undo-tree-id82416 . -141) (undo-tree-id82417 . -141) (undo-tree-id82418 . -141) (undo-tree-id82419 . -142) (undo-tree-id82420 . -142) (undo-tree-id82421 . -142) (undo-tree-id82422 . -142) (undo-tree-id82423 . -142) (undo-tree-id82424 . -142) (undo-tree-id82425 . -142) (undo-tree-id82426 . -142) (undo-tree-id82427 . -142) (undo-tree-id82428 . -142) (undo-tree-id82429 . -142) (undo-tree-id82430 . -142) (undo-tree-id82431 . -142) (undo-tree-id82432 . -142) (undo-tree-id82433 . -142) (undo-tree-id82434 . -142) (undo-tree-id82435 . -143) (undo-tree-id82436 . -143) (undo-tree-id82437 . -143) (undo-tree-id82438 . -143) (undo-tree-id82439 . -143) (undo-tree-id82440 . -143) (undo-tree-id82441 . -143) (undo-tree-id82442 . -143) (undo-tree-id82443 . -143) (undo-tree-id82444 . -143) (undo-tree-id82445 . -143) (undo-tree-id82446 . -143) (undo-tree-id82447 . -143) (undo-tree-id82448 . -143) (undo-tree-id82449 . -143) (undo-tree-id82450 . -143) (undo-tree-id82451 . -144) (undo-tree-id82452 . -144) (undo-tree-id82453 . -144) (undo-tree-id82454 . -144) (undo-tree-id82455 . -144) (undo-tree-id82456 . -144) (undo-tree-id82457 . -144) (undo-tree-id82458 . -144) (undo-tree-id82459 . -144) (undo-tree-id82460 . -144) (undo-tree-id82461 . -144) (undo-tree-id82462 . -145) (undo-tree-id82463 . -145) (undo-tree-id82464 . -145) (undo-tree-id82465 . -145) (undo-tree-id82466 . -145) (undo-tree-id82467 . -145) (undo-tree-id82468 . -145) (undo-tree-id82469 . -145) (undo-tree-id82470 . -145) (undo-tree-id82471 . -145) (undo-tree-id82472 . -145) (undo-tree-id82473 . -145) (undo-tree-id82474 . -145) (undo-tree-id82475 . -145) (undo-tree-id82476 . -145) (undo-tree-id82477 . -145) (undo-tree-id82478 . -145) (undo-tree-id82479 . -145) (undo-tree-id82480 . -145) (undo-tree-id82481 . -145) (undo-tree-id82482 . -145) (undo-tree-id82483 . -145) (undo-tree-id82484 . -145) (undo-tree-id82485 . -145) (undo-tree-id82486 . -145) (undo-tree-id82487 . -145) (undo-tree-id82488 . -145) (undo-tree-id82489 . -145) (undo-tree-id82490 . -145) (undo-tree-id82491 . -145) (undo-tree-id82492 . -145) (undo-tree-id82493 . -145) (undo-tree-id82494 . -145) (undo-tree-id82495 . -145) (undo-tree-id82496 . -146) (undo-tree-id82497 . -146) (undo-tree-id82498 . -146) (undo-tree-id82499 . -146) (undo-tree-id82500 . -146) (undo-tree-id82501 . -146) (undo-tree-id82502 . -146) (undo-tree-id82503 . -146) (undo-tree-id82504 . -146) (undo-tree-id82505 . -146) (undo-tree-id82506 . -146) (undo-tree-id82507 . -146) (undo-tree-id82508 . -146) (undo-tree-id82509 . -146) (undo-tree-id82510 . -146) (undo-tree-id82511 . -146) (undo-tree-id82512 . -146) (undo-tree-id82513 . -146) (undo-tree-id82514 . -146) (undo-tree-id82515 . -146) (undo-tree-id82516 . -146) (undo-tree-id82517 . -146) (undo-tree-id82518 . -146) (undo-tree-id82519 . -146) (undo-tree-id82520 . -146) (undo-tree-id82521 . -146) (undo-tree-id82522 . -146) (undo-tree-id82523 . -146) (undo-tree-id82524 . -82) (4021 . 4103) (#(" so we apply the softmax activation function to the outputs of the Dense layer." 0 66 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 66 67 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 67 79 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4085) (undo-tree-id82525 . 62) (undo-tree-id82526 . -24) (4084 . 4085) (#("," 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4084) (undo-tree-id82527 . -1) (undo-tree-id82528 . -1) (undo-tree-id82529 . -1) (t 25767 35311 162627 217000)) nil (25767 35326 528681 63000) 0 nil])
([nil nil ((#("so we " 0 6 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4089) (undo-tree-id82186 . -5) (undo-tree-id82187 . -5) (undo-tree-id82188 . 6) (undo-tree-id82189 . -5) (undo-tree-id82190 . -6) (undo-tree-id82191 . -5) (undo-tree-id82192 . -1) (undo-tree-id82193 . -1) (undo-tree-id82194 . -1) (undo-tree-id82195 . -1) (undo-tree-id82196 . -1) (undo-tree-id82197 . -1) (undo-tree-id82198 . -1) (undo-tree-id82199 . -1) (undo-tree-id82200 . -1) (undo-tree-id82201 . -1) (undo-tree-id82202 . -1) (undo-tree-id82203 . -1) (undo-tree-id82204 . -1) (undo-tree-id82205 . -1) (undo-tree-id82206 . -1) (undo-tree-id82207 . -1) (undo-tree-id82208 . -4) (undo-tree-id82209 . -4) (undo-tree-id82210 . -4) (undo-tree-id82211 . -4) (undo-tree-id82212 . -4) (undo-tree-id82213 . -4) (undo-tree-id82214 . -4) (undo-tree-id82215 . -4) (undo-tree-id82216 . -4) (undo-tree-id82217 . -4) (undo-tree-id82218 . -4) (undo-tree-id82219 . -4) (undo-tree-id82220 . -4) (undo-tree-id82221 . -4) (undo-tree-id82222 . -4) (undo-tree-id82223 . -4) (undo-tree-id82224 . -4) (undo-tree-id82225 . -4) (undo-tree-id82226 . -4) (undo-tree-id82227 . -4) (undo-tree-id82228 . -4) (undo-tree-id82229 . -5) (undo-tree-id82230 . -5) (undo-tree-id82231 . -5) (undo-tree-id82232 . -5) (undo-tree-id82233 . -5) (undo-tree-id82234 . -5) (undo-tree-id82235 . -5) (undo-tree-id82236 . -5) (undo-tree-id82237 . -5) (undo-tree-id82238 . -5) (undo-tree-id82239 . -5) (undo-tree-id82240 . -5) (undo-tree-id82241 . -5) (undo-tree-id82242 . -5) (undo-tree-id82243 . -5) (undo-tree-id82244 . -5) (undo-tree-id82245 . -5) (undo-tree-id82246 . -5) (undo-tree-id82247 . -5) (undo-tree-id82248 . -5) (undo-tree-id82249 . -5) (undo-tree-id82250 . -5) (undo-tree-id82251 . -6) (undo-tree-id82252 . -6) (undo-tree-id82253 . -6) 4094) nil (25767 35326 528026 954000) 0 nil])
([nil nil ((4089 . 4090) (#("a" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 4089)) nil (25767 35326 527967 676000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4904) (undo-tree-id82530 . -1) (t 25767 35326 622815 831000)) nil (25767 35350 778811 137000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 5208) (undo-tree-id82531 . -1) (t 25767 35350 867113 38000)) nil (25767 35370 192451 4000) 0 nil])
([nil nil ((5259 . 5260) (#("Y" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -5259) (undo-tree-id82532 . -1) (undo-tree-id82533 . -1) (undo-tree-id82534 . -1) (undo-tree-id82535 . -1) (undo-tree-id82536 . -1) (undo-tree-id82537 . -1) (undo-tree-id82538 . -1) (undo-tree-id82539 . -1) (undo-tree-id82540 . -1) (undo-tree-id82541 . -1) (undo-tree-id82542 . -1) (undo-tree-id82543 . -1) (undo-tree-id82544 . -1) 5260 (5259 . 5260) (#("To generate more diverse and interesting text, p" 0 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 44 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t rear-nonsticky t) 45 47 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 5259) (undo-tree-id82545 . -47) (undo-tree-id82546 . -47) (undo-tree-id82547 . -47) (undo-tree-id82548 . -48) (undo-tree-id82549 . -47) (undo-tree-id82550 . -1) (undo-tree-id82551 . -1) (undo-tree-id82552 . -1) (undo-tree-id82553 . -1) (undo-tree-id82554 . -1) (undo-tree-id82555 . -1) (undo-tree-id82556 . -1) (undo-tree-id82557 . -1) (undo-tree-id82558 . -1) (undo-tree-id82559 . -1) (undo-tree-id82560 . -1) (undo-tree-id82561 . -1) (undo-tree-id82562 . -1) (undo-tree-id82563 . -1) (undo-tree-id82564 . -1) (undo-tree-id82565 . -1) (undo-tree-id82566 . -10) (undo-tree-id82567 . -10) (undo-tree-id82568 . -10) (undo-tree-id82569 . -10) (undo-tree-id82570 . -10) (undo-tree-id82571 . -10) (undo-tree-id82572 . -10) (undo-tree-id82573 . -10) (undo-tree-id82574 . -10) (undo-tree-id82575 . -10) (undo-tree-id82576 . -10) (undo-tree-id82577 . -10) (undo-tree-id82578 . -10) (undo-tree-id82579 . -10) (undo-tree-id82580 . -10) (undo-tree-id82581 . -10) (undo-tree-id82582 . -10) (undo-tree-id82583 . -10) (undo-tree-id82584 . -10) (undo-tree-id82585 . -10) (undo-tree-id82586 . -10) (undo-tree-id82587 . -15) (undo-tree-id82588 . -15) (undo-tree-id82589 . -15) (undo-tree-id82590 . -15) (undo-tree-id82591 . -15) (undo-tree-id82592 . -15) (undo-tree-id82593 . -23) (undo-tree-id82594 . -23) (undo-tree-id82595 . -23) (undo-tree-id82596 . -23) (undo-tree-id82597 . -23) (undo-tree-id82598 . -23) (undo-tree-id82599 . -27) (undo-tree-id82600 . -27) (undo-tree-id82601 . -27) (undo-tree-id82602 . -27) (undo-tree-id82603 . -27) (undo-tree-id82604 . -27) (undo-tree-id82605 . -39) (undo-tree-id82606 . -39) (undo-tree-id82607 . -39) (undo-tree-id82608 . -39) (undo-tree-id82609 . -39) (undo-tree-id82610 . -39) (undo-tree-id82611 . -44) (undo-tree-id82612 . -44) (undo-tree-id82613 . -44) (undo-tree-id82614 . -44) (undo-tree-id82615 . -44) (undo-tree-id82616 . -44) (undo-tree-id82617 . -45) (undo-tree-id82618 . -45) (undo-tree-id82619 . -45) (undo-tree-id82620 . -45) (undo-tree-id82621 . -45) (undo-tree-id82622 . -45) (undo-tree-id82623 . -45) (undo-tree-id82624 . -45) (undo-tree-id82625 . -45) (undo-tree-id82626 . -45) (undo-tree-id82627 . -45) (undo-tree-id82628 . -45) (undo-tree-id82629 . -45) (undo-tree-id82630 . -45) (undo-tree-id82631 . -45) (undo-tree-id82632 . -45) (undo-tree-id82633 . -45) (undo-tree-id82634 . -45) (undo-tree-id82635 . -45) (undo-tree-id82636 . -45) (undo-tree-id82637 . -45) (undo-tree-id82638 . -48) (undo-tree-id82639 . -48) (undo-tree-id82640 . -48) (undo-tree-id82641 . -48) (undo-tree-id82642 . -48) (undo-tree-id82643 . -48) (undo-tree-id82644 . -48) (undo-tree-id82645 . -48) (undo-tree-id82646 . -48) (undo-tree-id82647 . -48) (undo-tree-id82648 . -48) (undo-tree-id82649 . -48) (undo-tree-id82650 . -48) (undo-tree-id82651 . -48) (undo-tree-id82652 . -48) (undo-tree-id82653 . -48) (undo-tree-id82654 . -47) (undo-tree-id82655 . -47) (undo-tree-id82656 . -47) (undo-tree-id82657 . -47) (undo-tree-id82658 . -47) (undo-tree-id82659 . -47) (undo-tree-id82660 . -47) (undo-tree-id82661 . -47) (undo-tree-id82662 . -47) (undo-tree-id82663 . -47) (undo-tree-id82664 . -47) (undo-tree-id82665 . -47) (undo-tree-id82666 . -47) (undo-tree-id82667 . -47) (undo-tree-id82668 . -47) (undo-tree-id82669 . -47) (undo-tree-id82670 . -47) (undo-tree-id82671 . -48) (undo-tree-id82672 . -48) (undo-tree-id82673 . -48) 5306 (t 25767 35370 283352 267000)) nil (25767 35389 945644 564000) 0 nil])
([nil nil ((#("we can " 0 7 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 5517) (undo-tree-id82674 . -6) (undo-tree-id82675 . -6) (undo-tree-id82676 . -6) (undo-tree-id82677 . -7) (undo-tree-id82678 . -6) (undo-tree-id82679 . -1) (undo-tree-id82680 . -1) (undo-tree-id82681 . -1) (undo-tree-id82682 . -1) (undo-tree-id82683 . -1) (undo-tree-id82684 . -1) (undo-tree-id82685 . -1) (undo-tree-id82686 . -1) (undo-tree-id82687 . -1) (undo-tree-id82688 . -1) (undo-tree-id82689 . -1) (undo-tree-id82690 . -1) (undo-tree-id82691 . -1) (undo-tree-id82692 . -1) (undo-tree-id82693 . -1) (undo-tree-id82694 . -1) (undo-tree-id82695 . -5) (undo-tree-id82696 . -5) (undo-tree-id82697 . -5) (undo-tree-id82698 . -5) (undo-tree-id82699 . -5) (undo-tree-id82700 . -5) (undo-tree-id82701 . -5) (undo-tree-id82702 . -5) (undo-tree-id82703 . -5) (undo-tree-id82704 . -5) (undo-tree-id82705 . -5) (undo-tree-id82706 . -5) (undo-tree-id82707 . -5) (undo-tree-id82708 . -5) (undo-tree-id82709 . -5) (undo-tree-id82710 . -5) (undo-tree-id82711 . -6) (undo-tree-id82712 . -6) (undo-tree-id82713 . -6) (undo-tree-id82714 . -6) (undo-tree-id82715 . -6) (undo-tree-id82716 . -6) (undo-tree-id82717 . -6) (undo-tree-id82718 . -6) (undo-tree-id82719 . -6) (undo-tree-id82720 . -6) (undo-tree-id82721 . -6) (undo-tree-id82722 . -6) (undo-tree-id82723 . -6) (undo-tree-id82724 . -6) (undo-tree-id82725 . -6) (undo-tree-id82726 . -6) (undo-tree-id82727 . -6) (undo-tree-id82728 . -7) 5523 (t 25767 35390 35596 695000)) nil (25767 35409 462826 659000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5737) (undo-tree-id82847 . -1) (undo-tree-id82848 . -1) (t 25767 35409 551839 211000)) nil (25767 35498 520695 30000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5737) (undo-tree-id82845 . -1) (undo-tree-id82846 . -1)) nil (25767 35498 520692 840000) 0 nil])
([nil nil ((#("Apparently this " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5769) (undo-tree-id82729 . -15) (undo-tree-id82730 . -15) (undo-tree-id82731 . -15) (undo-tree-id82732 . -9) (undo-tree-id82733 . -9) (undo-tree-id82734 . -9) (undo-tree-id82735 . -9) (undo-tree-id82736 . -9) (undo-tree-id82737 . -9) (undo-tree-id82738 . -9) (undo-tree-id82739 . -9) (undo-tree-id82740 . -9) (undo-tree-id82741 . -9) (undo-tree-id82742 . -9) (undo-tree-id82743 . -9) (undo-tree-id82744 . -9) (undo-tree-id82745 . -9) (undo-tree-id82746 . -9) (undo-tree-id82747 . -9) (undo-tree-id82748 . -9) (undo-tree-id82749 . -9) (undo-tree-id82750 . -9) (undo-tree-id82751 . -9) (undo-tree-id82752 . -9) (undo-tree-id82753 . -9) (undo-tree-id82754 . -9) (undo-tree-id82755 . -9) (undo-tree-id82756 . -9) (undo-tree-id82757 . -9) (undo-tree-id82758 . -9) (undo-tree-id82759 . -9) (undo-tree-id82760 . -9) (undo-tree-id82761 . -9) (undo-tree-id82762 . -9) (undo-tree-id82763 . -16) (undo-tree-id82764 . -15) (undo-tree-id82765 . -9) (undo-tree-id82766 . -9) (undo-tree-id82767 . -9) (undo-tree-id82768 . -9) (undo-tree-id82769 . -9) (undo-tree-id82770 . -9) (undo-tree-id82771 . -9) (undo-tree-id82772 . -9) (undo-tree-id82773 . -9) (undo-tree-id82774 . -9) (undo-tree-id82775 . -9) (undo-tree-id82776 . -9) (undo-tree-id82777 . -9) (undo-tree-id82778 . -9) (undo-tree-id82779 . -9) (undo-tree-id82780 . -9) (undo-tree-id82781 . -14) (undo-tree-id82782 . -14) (undo-tree-id82783 . -14) (undo-tree-id82784 . -14) (undo-tree-id82785 . -14) (undo-tree-id82786 . -14) (undo-tree-id82787 . -14) (undo-tree-id82788 . -14) (undo-tree-id82789 . -14) (undo-tree-id82790 . -14) (undo-tree-id82791 . -14) (undo-tree-id82792 . -14) (undo-tree-id82793 . -14) (undo-tree-id82794 . -14) (undo-tree-id82795 . -14) (undo-tree-id82796 . -14) (undo-tree-id82797 . -14) (undo-tree-id82798 . -14) (undo-tree-id82799 . -14) (undo-tree-id82800 . -14) (undo-tree-id82801 . -14) (undo-tree-id82802 . -14) (undo-tree-id82803 . -14) (undo-tree-id82804 . -14) (undo-tree-id82805 . -14) (undo-tree-id82806 . -14) (undo-tree-id82807 . -14) (undo-tree-id82808 . -14) (undo-tree-id82809 . -14) (undo-tree-id82810 . -14) (undo-tree-id82811 . -14) (undo-tree-id82812 . -14) (undo-tree-id82813 . -14) (undo-tree-id82814 . -14) (undo-tree-id82815 . -14) (undo-tree-id82816 . -14) (undo-tree-id82817 . -15) (undo-tree-id82818 . -15) (undo-tree-id82819 . -15) (undo-tree-id82820 . -15) (undo-tree-id82821 . -15) (undo-tree-id82822 . -15) (undo-tree-id82823 . -15) (undo-tree-id82824 . -15) (undo-tree-id82825 . -15) (undo-tree-id82826 . -15) (undo-tree-id82827 . -15) (undo-tree-id82828 . -15) (undo-tree-id82829 . -15) (undo-tree-id82830 . -15) (undo-tree-id82831 . -15) (undo-tree-id82832 . -15) (undo-tree-id82833 . -15) (undo-tree-id82834 . -15) (undo-tree-id82835 . -15) (undo-tree-id82836 . -15) (undo-tree-id82837 . -15) (undo-tree-id82838 . -15) (undo-tree-id82839 . -15) (undo-tree-id82840 . -15) (undo-tree-id82841 . -15) (undo-tree-id82842 . -15) (undo-tree-id82843 . -15) (undo-tree-id82844 . -16) 5784) nil (25767 35498 521242 523000) 0 nil])
([nil nil ((5786 . 5787)) nil (25767 35504 533837 681000) 0 nil] [nil nil ((5781 . 5784) (5780 . 5781)) ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 5780) (undo-tree-id82849 . -1) (undo-tree-id82850 . -1) (undo-tree-id82851 . -1) (undo-tree-id82852 . -1) (#("may" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5781) (undo-tree-id82853 . -2) (undo-tree-id82854 . -2) (undo-tree-id82855 . -2) (undo-tree-id82856 . -2)) (25767 35498 519421 670000) 0 nil])
([nil nil ((5787 . 5790) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -5787) (undo-tree-id82857 . -1) (undo-tree-id82858 . -1) (undo-tree-id82859 . -1) (undo-tree-id82860 . -1) (undo-tree-id82861 . -1) (undo-tree-id82862 . -1) (undo-tree-id82863 . -1) (undo-tree-id82864 . -1) (undo-tree-id82865 . -1) (undo-tree-id82866 . -1) (undo-tree-id82867 . -1) (undo-tree-id82868 . -1) (undo-tree-id82869 . -1) (undo-tree-id82870 . -1) (undo-tree-id82871 . -1) (undo-tree-id82872 . -1) (undo-tree-id82873 . -1) (undo-tree-id82874 . -1) (undo-tree-id82875 . -1) (undo-tree-id82876 . -1) (undo-tree-id82877 . -1) (undo-tree-id82878 . -1) (undo-tree-id82879 . -1) (undo-tree-id82880 . -1) (undo-tree-id82881 . -1) (undo-tree-id82882 . -1) (undo-tree-id82883 . -1) (undo-tree-id82884 . -1) (undo-tree-id82885 . -1) 5788 (5787 . 5788)) nil (25767 35504 533832 774000) 0 nil])
nil
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5795) (undo-tree-id83453 . -1) (undo-tree-id83454 . -1) (t 25767 35504 625033 776000)) nil (25767 35538 28298 744000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5828) (undo-tree-id83451 . -1) (undo-tree-id83452 . -1)) nil (25767 35538 28296 371000) 0 nil])
([nil nil ((5868 . 5871) (#("you could try using" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5868) (undo-tree-id83373 . -18) (undo-tree-id83374 . -18) (undo-tree-id83375 . -18) (undo-tree-id83376 . -19) (undo-tree-id83377 . -18) (undo-tree-id83378 . -2) (undo-tree-id83379 . -2) (undo-tree-id83380 . -2) (undo-tree-id83381 . -2) (undo-tree-id83382 . -2) (undo-tree-id83383 . -2) (undo-tree-id83384 . -2) (undo-tree-id83385 . -2) (undo-tree-id83386 . -2) (undo-tree-id83387 . -2) (undo-tree-id83388 . -2) (undo-tree-id83389 . -2) (undo-tree-id83390 . -2) (undo-tree-id83391 . -2) (undo-tree-id83392 . -2) (undo-tree-id83393 . -2) (undo-tree-id83394 . -8) (undo-tree-id83395 . -8) (undo-tree-id83396 . -8) (undo-tree-id83397 . -8) (undo-tree-id83398 . -8) (undo-tree-id83399 . -8) (undo-tree-id83400 . -8) (undo-tree-id83401 . -8) (undo-tree-id83402 . -8) (undo-tree-id83403 . -8) (undo-tree-id83404 . -8) (undo-tree-id83405 . -8) (undo-tree-id83406 . -8) (undo-tree-id83407 . -8) (undo-tree-id83408 . -8) (undo-tree-id83409 . -8) (undo-tree-id83410 . -12) (undo-tree-id83411 . -12) (undo-tree-id83412 . -12) (undo-tree-id83413 . -12) (undo-tree-id83414 . -12) (undo-tree-id83415 . -12) (undo-tree-id83416 . -12) (undo-tree-id83417 . -12) (undo-tree-id83418 . -12) (undo-tree-id83419 . -12) (undo-tree-id83420 . -12) (undo-tree-id83421 . -12) (undo-tree-id83422 . -12) (undo-tree-id83423 . -12) (undo-tree-id83424 . -12) (undo-tree-id83425 . -12) (undo-tree-id83426 . -18) (undo-tree-id83427 . -18) (undo-tree-id83428 . -18) (undo-tree-id83429 . -18) (undo-tree-id83430 . -18) (undo-tree-id83431 . -18) (undo-tree-id83432 . -18) (undo-tree-id83433 . -18) (undo-tree-id83434 . -18) (undo-tree-id83435 . -18) (undo-tree-id83436 . -18) (undo-tree-id83437 . -18) (undo-tree-id83438 . -18) (undo-tree-id83439 . -18) (undo-tree-id83440 . -18) (undo-tree-id83441 . -18) (undo-tree-id83442 . -18) (undo-tree-id83443 . -18) (undo-tree-id83444 . -18) (undo-tree-id83445 . -18) (undo-tree-id83446 . -18) (undo-tree-id83447 . -18) (undo-tree-id83448 . -19) (undo-tree-id83449 . -19) (undo-tree-id83450 . -19) 5886) nil (25767 35538 28291 603000) 0 nil])
([nil nil ((#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5967) (undo-tree-id83371 . -1) (undo-tree-id83372 . -1)) nil (25767 35538 28237 535000) 0 nil])
([nil nil ((#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5966) (undo-tree-id83351 . -1) (undo-tree-id83352 . -1) (undo-tree-id83353 . -1) (undo-tree-id83354 . -1) (undo-tree-id83355 . -1) (undo-tree-id83356 . -1) (undo-tree-id83357 . -1) (undo-tree-id83358 . -1) (undo-tree-id83359 . -1) (undo-tree-id83360 . -1) (undo-tree-id83361 . -1) (undo-tree-id83362 . -1) (undo-tree-id83363 . -1) (undo-tree-id83364 . -1) (undo-tree-id83365 . -1) (undo-tree-id83366 . -1) (undo-tree-id83367 . -1) (undo-tree-id83368 . -1) (undo-tree-id83369 . -1) (undo-tree-id83370 . -1)) nil (25767 35538 28234 700000) 0 nil])
([nil nil ((#("f" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5965) (undo-tree-id83309 . -1) (undo-tree-id83310 . -1) (undo-tree-id83311 . -1) (undo-tree-id83312 . -1) (undo-tree-id83313 . -1) (undo-tree-id83314 . -1) (undo-tree-id83315 . -1) (undo-tree-id83316 . -1) (undo-tree-id83317 . -1) (undo-tree-id83318 . -1) (undo-tree-id83319 . -1) (undo-tree-id83320 . -1) (undo-tree-id83321 . -1) (undo-tree-id83322 . -1) (undo-tree-id83323 . -1) (undo-tree-id83324 . -1) (undo-tree-id83325 . -1) (undo-tree-id83326 . -1) (undo-tree-id83327 . -1) (undo-tree-id83328 . -1) (undo-tree-id83329 . -1) (undo-tree-id83330 . -1) (undo-tree-id83331 . -1) (undo-tree-id83332 . -1) (undo-tree-id83333 . -1) (undo-tree-id83334 . -1) (undo-tree-id83335 . -1) (undo-tree-id83336 . -1) (undo-tree-id83337 . -1) (undo-tree-id83338 . -1) (undo-tree-id83339 . -1) (undo-tree-id83340 . -1) (undo-tree-id83341 . -1) (undo-tree-id83342 . -1) (undo-tree-id83343 . -1) (undo-tree-id83344 . -1) (undo-tree-id83345 . -1) (undo-tree-id83346 . -1) (undo-tree-id83347 . -1) (undo-tree-id83348 . -1) (undo-tree-id83349 . -1) (undo-tree-id83350 . -1)) nil (25767 35541 725702 265000) 0 nil])
([nil nil ((#("(
  example, you could set recurrent_dropout=0.3 in the GRU layers)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 10 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 37 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 44 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5964) (undo-tree-id83612 . -66) (undo-tree-id83613 . 11) (undo-tree-id83614 . -59) (undo-tree-id83615 . -1) (undo-tree-id83616 . -1) (undo-tree-id83617 . -1) (undo-tree-id83618 . -1) (undo-tree-id83619 . -1) (undo-tree-id83620 . -1) (undo-tree-id83621 . -1) (undo-tree-id83622 . -1) (undo-tree-id83623 . -1) (undo-tree-id83624 . -1) (undo-tree-id83625 . -1) (undo-tree-id83626 . -1) (undo-tree-id83627 . -1) (undo-tree-id83628 . -1) (undo-tree-id83629 . -1) (undo-tree-id83630 . -1) (undo-tree-id83631 . -1) (undo-tree-id83632 . -1) (undo-tree-id83633 . -1) (undo-tree-id83634 . -1) (undo-tree-id83635 . -1) (undo-tree-id83636 . -1) (undo-tree-id83637 . -1) (undo-tree-id83638 . -1) (undo-tree-id83639 . -1) (undo-tree-id83640 . -1) (undo-tree-id83641 . -1) (undo-tree-id83642 . -1) (undo-tree-id83643 . -1) (undo-tree-id83644 . -1) (undo-tree-id83645 . -1) (undo-tree-id83646 . -1) (undo-tree-id83647 . -1) (undo-tree-id83648 . -1) (undo-tree-id83649 . -1) (undo-tree-id83650 . -1) (undo-tree-id83651 . -1) (undo-tree-id83652 . -1) (undo-tree-id83653 . -1) (undo-tree-id83654 . -1) (undo-tree-id83655 . -1) (undo-tree-id83656 . -1) (undo-tree-id83657 . -1) (undo-tree-id83658 . -1) (undo-tree-id83659 . -1) (undo-tree-id83660 . -1) (undo-tree-id83661 . -1) (undo-tree-id83662 . -1) (undo-tree-id83663 . -67) 5949 (t 25767 35543 365526 201000)) nil (25767 35578 779024 599000) 0 nil] [nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5964) (undo-tree-id83259 . -1) (undo-tree-id83260 . -1) (undo-tree-id83261 . -1) (undo-tree-id83262 . -1) (undo-tree-id83263 . -1) (undo-tree-id83264 . -1) (undo-tree-id83265 . -1) (undo-tree-id83266 . -1) (undo-tree-id83267 . -1) (undo-tree-id83268 . -1) (undo-tree-id83269 . -1) (undo-tree-id83270 . -1) (undo-tree-id83271 . -1) (undo-tree-id83272 . -1) (undo-tree-id83273 . -1) (undo-tree-id83274 . -1) (undo-tree-id83275 . -1) (undo-tree-id83276 . -1) (undo-tree-id83277 . -1) (undo-tree-id83278 . -1) (undo-tree-id83279 . -1) (undo-tree-id83280 . -1) (undo-tree-id83281 . -1) (undo-tree-id83282 . -1) (undo-tree-id83283 . -1) (undo-tree-id83284 . -1) (undo-tree-id83285 . -1) (undo-tree-id83286 . -1) (undo-tree-id83287 . -1) (undo-tree-id83288 . -1) (undo-tree-id83289 . -1) (undo-tree-id83290 . -1) (undo-tree-id83291 . -1) (undo-tree-id83292 . -1) (undo-tree-id83293 . -1) (undo-tree-id83294 . -1) (undo-tree-id83295 . -1) (undo-tree-id83296 . -1) (undo-tree-id83297 . -1) (undo-tree-id83298 . -1) (undo-tree-id83299 . -1) (undo-tree-id83300 . -1) (undo-tree-id83301 . -1) (undo-tree-id83302 . -1) (undo-tree-id83303 . -1) (undo-tree-id83304 . -1) (undo-tree-id83305 . -1) (undo-tree-id83306 . -1) (undo-tree-id83307 . -1) (undo-tree-id83308 . -1)) ((5964 . 5965)) (25767 35541 181049 958000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5963) (undo-tree-id83455 . -1) (undo-tree-id83456 . -1) (undo-tree-id83457 . -1) (undo-tree-id83458 . -1) (undo-tree-id83459 . -1) (undo-tree-id83460 . -1) (undo-tree-id83461 . -1) (undo-tree-id83462 . -1) (undo-tree-id83463 . -1) (undo-tree-id83464 . -1) (undo-tree-id83465 . -1) (undo-tree-id83466 . -1) (undo-tree-id83467 . -1) (undo-tree-id83468 . -1) (undo-tree-id83469 . -1) (undo-tree-id83470 . -1) (undo-tree-id83471 . -1) (undo-tree-id83472 . -1) (undo-tree-id83473 . -1) (undo-tree-id83474 . -1) (undo-tree-id83475 . -1) (undo-tree-id83476 . -1) (undo-tree-id83477 . -1) (undo-tree-id83478 . -1) (undo-tree-id83479 . -1) (undo-tree-id83480 . -1) (undo-tree-id83481 . -1) (undo-tree-id83482 . -1) (undo-tree-id83483 . -1) (undo-tree-id83484 . -1) (undo-tree-id83485 . -1) (undo-tree-id83486 . -1) (undo-tree-id83487 . -1) (undo-tree-id83488 . -1) (undo-tree-id83489 . -1) (undo-tree-id83490 . -1) (undo-tree-id83491 . -1) (undo-tree-id83492 . -1) (undo-tree-id83493 . -1) (undo-tree-id83494 . -1) (undo-tree-id83495 . -1) (undo-tree-id83496 . -1) (undo-tree-id83497 . -1) (undo-tree-id83498 . -1) (undo-tree-id83499 . -1) (undo-tree-id83500 . -1) (undo-tree-id83501 . -1) (undo-tree-id83502 . -1) (undo-tree-id83503 . -1) (undo-tree-id83504 . -1) (undo-tree-id83505 . -1) (undo-tree-id83506 . -1) (undo-tree-id83507 . -1) (undo-tree-id83508 . -1) (undo-tree-id83509 . -1) (undo-tree-id83510 . -1) (undo-tree-id83511 . -1) (undo-tree-id83512 . -1) (undo-tree-id83513 . -1) (undo-tree-id83514 . -1) (undo-tree-id83515 . -1) (undo-tree-id83516 . -1) (undo-tree-id83517 . -1) (undo-tree-id83518 . -1) (undo-tree-id83519 . -1) (undo-tree-id83520 . -1) (undo-tree-id83521 . -1) (undo-tree-id83522 . -1) (undo-tree-id83523 . -1) (undo-tree-id83524 . -1) (undo-tree-id83525 . -1) (undo-tree-id83526 . -1) (undo-tree-id83527 . -1) (undo-tree-id83528 . -1) (undo-tree-id83529 . -1) (undo-tree-id83530 . -1) (undo-tree-id83531 . -1) (undo-tree-id83532 . -1) (undo-tree-id83533 . -1) (undo-tree-id83534 . -1) (undo-tree-id83535 . -1) (undo-tree-id83536 . -1) (undo-tree-id83537 . -1) (undo-tree-id83538 . -1) (undo-tree-id83539 . -1) (undo-tree-id83540 . -1) (undo-tree-id83541 . -1) (undo-tree-id83542 . -1) (undo-tree-id83543 . -1) (undo-tree-id83544 . -1) (undo-tree-id83545 . -1) (undo-tree-id83546 . -1) (undo-tree-id83547 . -1) (undo-tree-id83548 . -1) (undo-tree-id83549 . -1) (undo-tree-id83550 . -1) (undo-tree-id83551 . -1) (undo-tree-id83552 . -1) (undo-tree-id83553 . -1) (undo-tree-id83554 . -1) (undo-tree-id83555 . -1) (undo-tree-id83556 . -1) (undo-tree-id83557 . -1) (undo-tree-id83558 . -1) (undo-tree-id83559 . -1) (undo-tree-id83560 . -1) (undo-tree-id83561 . -1) (undo-tree-id83562 . -1) (undo-tree-id83563 . -1) (undo-tree-id83564 . -1) (undo-tree-id83565 . -1) (undo-tree-id83566 . -1) (undo-tree-id83567 . -1) (undo-tree-id83568 . -1) (undo-tree-id83569 . -1) (undo-tree-id83570 . -1) (undo-tree-id83571 . -1) (undo-tree-id83572 . -1) (undo-tree-id83573 . -1) (undo-tree-id83574 . -1) (undo-tree-id83575 . -1) (undo-tree-id83576 . -1) (undo-tree-id83577 . -1) (undo-tree-id83578 . -1) (undo-tree-id83579 . -1) (undo-tree-id83580 . -1) (undo-tree-id83581 . -1) (undo-tree-id83582 . -1) (undo-tree-id83583 . -1) (undo-tree-id83584 . -1) (undo-tree-id83585 . -1) (undo-tree-id83586 . -1) (undo-tree-id83587 . -1) (undo-tree-id83588 . -1) (undo-tree-id83589 . -1) (undo-tree-id83590 . -1) (undo-tree-id83591 . -1) (undo-tree-id83592 . -1) (undo-tree-id83593 . -1) (undo-tree-id83594 . -1) (undo-tree-id83595 . -1) (undo-tree-id83596 . -1) (undo-tree-id83597 . -1) (undo-tree-id83598 . -1) (undo-tree-id83599 . -1) (undo-tree-id83600 . -1) (undo-tree-id83601 . -1) (undo-tree-id83602 . -1) (undo-tree-id83603 . -1) (undo-tree-id83604 . -1) (undo-tree-id83605 . -1) (undo-tree-id83606 . -1) (undo-tree-id83607 . -1) (undo-tree-id83608 . -1) (undo-tree-id83609 . -1) (undo-tree-id83610 . -1) (undo-tree-id83611 . -1)) nil (25767 36247 825978 418000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5963) (undo-tree-id83201 . -1) (undo-tree-id83202 . -1) (undo-tree-id83203 . -1) (undo-tree-id83204 . -1) (undo-tree-id83205 . -1) (undo-tree-id83206 . -1) (undo-tree-id83207 . -1) (undo-tree-id83208 . -1) (undo-tree-id83209 . -1) (undo-tree-id83210 . -1) (undo-tree-id83211 . -1) (undo-tree-id83212 . -1) (undo-tree-id83213 . -1) (undo-tree-id83214 . -1) (undo-tree-id83215 . -1) (undo-tree-id83216 . -1) (undo-tree-id83217 . -1) (undo-tree-id83218 . -1) (undo-tree-id83219 . -1) (undo-tree-id83220 . -1) (undo-tree-id83221 . -1) (undo-tree-id83222 . -1) (undo-tree-id83223 . -1) (undo-tree-id83224 . -1) (undo-tree-id83225 . -1) (undo-tree-id83226 . -1) (undo-tree-id83227 . -1) (undo-tree-id83228 . -1) (undo-tree-id83229 . -1) (undo-tree-id83230 . -1) (undo-tree-id83231 . -1) (undo-tree-id83232 . -1) (undo-tree-id83233 . -1) (undo-tree-id83234 . -1) (undo-tree-id83235 . -1) (undo-tree-id83236 . -1) (undo-tree-id83237 . -1) (undo-tree-id83238 . -1) (undo-tree-id83239 . -1) (undo-tree-id83240 . -1) (undo-tree-id83241 . -1) (undo-tree-id83242 . -1) (undo-tree-id83243 . -1) (undo-tree-id83244 . -1) (undo-tree-id83245 . -1) (undo-tree-id83246 . -1) (undo-tree-id83247 . -1) (undo-tree-id83248 . -1) (undo-tree-id83249 . -1) (undo-tree-id83250 . -1) (undo-tree-id83251 . -1) (undo-tree-id83252 . -1) (undo-tree-id83253 . -1) (undo-tree-id83254 . -1) (undo-tree-id83255 . -1) (undo-tree-id83256 . -1) (undo-tree-id83257 . -1) (undo-tree-id83258 . -1)) ((5963 . 5964)) (25767 35540 244290 516000) 0 nil])
([nil nil ((14111 . 14112) (#("  " 0 2 (font-lock-fontified t src-block t fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face (org-block))) . 14111) (#("
" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face (org-block))) . -14111) (undo-tree-id83667 . -1) 14079 (t 25767 35578 869980 67000)) nil (25767 36259 883927 872000) 0 nil] [nil nil ((14111 . 14112) (#("  " 0 2 (font-lock-fontified t src-block t fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face (org-block))) . 14111) (#("
" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face (org-block))) . -14111) (undo-tree-id83664 . -1) 14079 (t 25767 35578 869980 67000)) ((14111 . 14112) (14111 . 14113) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 14111)) (25767 36247 825038 953000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5962) (undo-tree-id83135 . -1) (undo-tree-id83136 . -1) (undo-tree-id83137 . -1) (undo-tree-id83138 . -1) (undo-tree-id83139 . -1) (undo-tree-id83140 . -1) (undo-tree-id83141 . -1) (undo-tree-id83142 . -1) (undo-tree-id83143 . -1) (undo-tree-id83144 . -1) (undo-tree-id83145 . -1) (undo-tree-id83146 . -1) (undo-tree-id83147 . -1) (undo-tree-id83148 . -1) (undo-tree-id83149 . -1) (undo-tree-id83150 . -1) (undo-tree-id83151 . -1) (undo-tree-id83152 . -1) (undo-tree-id83153 . -1) (undo-tree-id83154 . -1) (undo-tree-id83155 . -1) (undo-tree-id83156 . -1) (undo-tree-id83157 . -1) (undo-tree-id83158 . -1) (undo-tree-id83159 . -1) (undo-tree-id83160 . -1) (undo-tree-id83161 . -1) (undo-tree-id83162 . -1) (undo-tree-id83163 . -1) (undo-tree-id83164 . -1) (undo-tree-id83165 . -1) (undo-tree-id83166 . -1) (undo-tree-id83167 . -1) (undo-tree-id83168 . -1) (undo-tree-id83169 . -1) (undo-tree-id83170 . -1) (undo-tree-id83171 . -1) (undo-tree-id83172 . -1) (undo-tree-id83173 . -1) (undo-tree-id83174 . -1) (undo-tree-id83175 . -1) (undo-tree-id83176 . -1) (undo-tree-id83177 . -1) (undo-tree-id83178 . -1) (undo-tree-id83179 . -1) (undo-tree-id83180 . -1) (undo-tree-id83181 . -1) (undo-tree-id83182 . -1) (undo-tree-id83183 . -1) (undo-tree-id83184 . -1) (undo-tree-id83185 . -1) (undo-tree-id83186 . -1) (undo-tree-id83187 . -1) (undo-tree-id83188 . -1) (undo-tree-id83189 . -1) (undo-tree-id83190 . -1) (undo-tree-id83191 . -1) (undo-tree-id83192 . -1) (undo-tree-id83193 . -1) (undo-tree-id83194 . -1) (undo-tree-id83195 . -1) (undo-tree-id83196 . -1) (undo-tree-id83197 . -1) (undo-tree-id83198 . -1) (undo-tree-id83199 . -1) (undo-tree-id83200 . -1)) ((5962 . 5963)) (25767 35539 680512 746000) 0 nil])
([nil nil ((14111 . 14113)) nil (25767 36259 884293 11000) 0 nil])
nil
([nil nil ((#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5961) (undo-tree-id83060 . -1) (undo-tree-id83061 . -1) (undo-tree-id83062 . -1) (undo-tree-id83063 . -1) (undo-tree-id83064 . -1) (undo-tree-id83065 . -1) (undo-tree-id83066 . -1) (undo-tree-id83067 . -1) (undo-tree-id83068 . -1) (undo-tree-id83069 . -1) (undo-tree-id83070 . -1) (undo-tree-id83071 . -1) (undo-tree-id83072 . -1) (undo-tree-id83073 . -1) (undo-tree-id83074 . -1) (undo-tree-id83075 . -1) (undo-tree-id83076 . -1) (undo-tree-id83077 . -1) (undo-tree-id83078 . -1) (undo-tree-id83079 . -1) (undo-tree-id83080 . -1) (undo-tree-id83081 . -1) (undo-tree-id83082 . -1) (undo-tree-id83083 . -1) (undo-tree-id83084 . -1) (undo-tree-id83085 . -1) (undo-tree-id83086 . -1) (undo-tree-id83087 . -1) (undo-tree-id83088 . -1) (undo-tree-id83089 . -1) (undo-tree-id83090 . -1) (undo-tree-id83091 . -1) (undo-tree-id83092 . -1) (undo-tree-id83093 . -1) (undo-tree-id83094 . -1) (undo-tree-id83095 . -1) (undo-tree-id83096 . -1) (undo-tree-id83097 . -1) (undo-tree-id83098 . -1) (undo-tree-id83099 . -1) (undo-tree-id83100 . -1) (undo-tree-id83101 . -1) (undo-tree-id83102 . -1) (undo-tree-id83103 . -1) (undo-tree-id83104 . -1) (undo-tree-id83105 . -1) (undo-tree-id83106 . -1) (undo-tree-id83107 . -1) (undo-tree-id83108 . -1) (undo-tree-id83109 . -1) (undo-tree-id83110 . -1) (undo-tree-id83111 . -1) (undo-tree-id83112 . -1) (undo-tree-id83113 . -1) (undo-tree-id83114 . -1) (undo-tree-id83115 . -1) (undo-tree-id83116 . -1) (undo-tree-id83117 . -1) (undo-tree-id83118 . -1) (undo-tree-id83119 . -1) (undo-tree-id83120 . -1) (undo-tree-id83121 . -1) (undo-tree-id83122 . -1) (undo-tree-id83123 . -1) (undo-tree-id83124 . -1) (undo-tree-id83125 . -1) (undo-tree-id83126 . -1) (undo-tree-id83127 . -1) (undo-tree-id83128 . -1) (undo-tree-id83129 . -1) (undo-tree-id83130 . -1) (undo-tree-id83131 . -1) (undo-tree-id83132 . -1) (undo-tree-id83133 . -1) (undo-tree-id83134 . -1)) ((5961 . 5962)) (25767 35539 38371 345000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face (org-block))) . 14039) (undo-tree-id83673 . -1) (undo-tree-id83674 . -1)) nil (25767 36266 93816 517000) 0 nil] [nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face (org-block))) . 14039) (undo-tree-id83665 . -1) (undo-tree-id83666 . -1)) ((14039 . 14040)) (25767 36259 883920 261000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5960) (undo-tree-id82977 . -1) (undo-tree-id82978 . -1) (undo-tree-id82979 . -1) (undo-tree-id82980 . -1) (undo-tree-id82981 . -1) (undo-tree-id82982 . -1) (undo-tree-id82983 . -1) (undo-tree-id82984 . -1) (undo-tree-id82985 . -1) (undo-tree-id82986 . -1) (undo-tree-id82987 . -1) (undo-tree-id82988 . -1) (undo-tree-id82989 . -1) (undo-tree-id82990 . -1) (undo-tree-id82991 . -1) (undo-tree-id82992 . -1) (undo-tree-id82993 . -1) (undo-tree-id82994 . -1) (undo-tree-id82995 . -1) (undo-tree-id82996 . -1) (undo-tree-id82997 . -1) (undo-tree-id82998 . -1) (undo-tree-id82999 . -1) (undo-tree-id83000 . -1) (undo-tree-id83001 . -1) (undo-tree-id83002 . -1) (undo-tree-id83003 . -1) (undo-tree-id83004 . -1) (undo-tree-id83005 . -1) (undo-tree-id83006 . -1) (undo-tree-id83007 . -1) (undo-tree-id83008 . -1) (undo-tree-id83009 . -1) (undo-tree-id83010 . -1) (undo-tree-id83011 . -1) (undo-tree-id83012 . -1) (undo-tree-id83013 . -1) (undo-tree-id83014 . -1) (undo-tree-id83015 . -1) (undo-tree-id83016 . -1) (undo-tree-id83017 . -1) (undo-tree-id83018 . -1) (undo-tree-id83019 . -1) (undo-tree-id83020 . -1) (undo-tree-id83021 . -1) (undo-tree-id83022 . -1) (undo-tree-id83023 . -1) (undo-tree-id83024 . -1) (undo-tree-id83025 . -1) (undo-tree-id83026 . -1) (undo-tree-id83027 . -1) (undo-tree-id83028 . -1) (undo-tree-id83029 . -1) (undo-tree-id83030 . -1) (undo-tree-id83031 . -1) (undo-tree-id83032 . -1) (undo-tree-id83033 . -1) (undo-tree-id83034 . -1) (undo-tree-id83035 . -1) (undo-tree-id83036 . -1) (undo-tree-id83037 . -1) (undo-tree-id83038 . -1) (undo-tree-id83039 . -1) (undo-tree-id83040 . -1) (undo-tree-id83041 . -1) (undo-tree-id83042 . -1) (undo-tree-id83043 . -1) (undo-tree-id83044 . -1) (undo-tree-id83045 . -1) (undo-tree-id83046 . -1) (undo-tree-id83047 . -1) (undo-tree-id83048 . -1) (undo-tree-id83049 . -1) (undo-tree-id83050 . -1) (undo-tree-id83051 . -1) (undo-tree-id83052 . -1) (undo-tree-id83053 . -1) (undo-tree-id83054 . -1) (undo-tree-id83055 . -1) (undo-tree-id83056 . -1) (undo-tree-id83057 . -1) (undo-tree-id83058 . -1) (undo-tree-id83059 . -1)) ((5960 . 5961)) (25767 35538 28636 342000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 14112) (undo-tree-id83670 . 1) (undo-tree-id83671 . -1) (undo-tree-id83672 . -1)) nil (25767 36266 93813 395000) 0 nil])
nil
([nil nil ((#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 5959) (undo-tree-id82886 . -1) (undo-tree-id82887 . -1) (undo-tree-id82888 . -1) (undo-tree-id82889 . -1) (undo-tree-id82890 . -1) (undo-tree-id82891 . -1) (undo-tree-id82892 . -1) (undo-tree-id82893 . -1) (undo-tree-id82894 . -1) (undo-tree-id82895 . -1) (undo-tree-id82896 . -1) (undo-tree-id82897 . -1) (undo-tree-id82898 . -1) (undo-tree-id82899 . -1) (undo-tree-id82900 . -1) (undo-tree-id82901 . -1) (undo-tree-id82902 . -1) (undo-tree-id82903 . -1) (undo-tree-id82904 . -1) (undo-tree-id82905 . -1) (undo-tree-id82906 . -1) (undo-tree-id82907 . -1) (undo-tree-id82908 . -1) (undo-tree-id82909 . -1) (undo-tree-id82910 . -1) (undo-tree-id82911 . -1) (undo-tree-id82912 . -1) (undo-tree-id82913 . -1) (undo-tree-id82914 . -1) (undo-tree-id82915 . -1) (undo-tree-id82916 . -1) (undo-tree-id82917 . -1) (undo-tree-id82918 . -1) (undo-tree-id82919 . -1) (undo-tree-id82920 . -1) (undo-tree-id82921 . -1) (undo-tree-id82922 . -1) (undo-tree-id82923 . -1) (undo-tree-id82924 . -1) (undo-tree-id82925 . -1) (undo-tree-id82926 . -1) (undo-tree-id82927 . -1) (undo-tree-id82928 . -1) (undo-tree-id82929 . -1) (undo-tree-id82930 . -1) (undo-tree-id82931 . -1) (undo-tree-id82932 . -1) (undo-tree-id82933 . -1) (undo-tree-id82934 . -1) (undo-tree-id82935 . -1) (undo-tree-id82936 . -1) (undo-tree-id82937 . -1) (undo-tree-id82938 . -1) (undo-tree-id82939 . -1) (undo-tree-id82940 . -1) (undo-tree-id82941 . -1) (undo-tree-id82942 . -1) (undo-tree-id82943 . -1) (undo-tree-id82944 . -1) (undo-tree-id82945 . -1) (undo-tree-id82946 . -1) (undo-tree-id82947 . -1) (undo-tree-id82948 . -1) (undo-tree-id82949 . -1) (undo-tree-id82950 . -1) (undo-tree-id82951 . -1) (undo-tree-id82952 . -1) (undo-tree-id82953 . -1) (undo-tree-id82954 . -1) (undo-tree-id82955 . -1) (undo-tree-id82956 . -1) (undo-tree-id82957 . -1) (undo-tree-id82958 . -1) (undo-tree-id82959 . -1) (undo-tree-id82960 . -1) (undo-tree-id82961 . -1) (undo-tree-id82962 . -1) (undo-tree-id82963 . -1) (undo-tree-id82964 . -1) (undo-tree-id82965 . -1) (undo-tree-id82966 . -1) (undo-tree-id82967 . -1) (undo-tree-id82968 . -1) (undo-tree-id82969 . -1) (undo-tree-id82970 . -1) (undo-tree-id82971 . -1) (undo-tree-id82972 . -1) (undo-tree-id82973 . -1) (undo-tree-id82974 . -1) (undo-tree-id82975 . -1) (undo-tree-id82976 . -1)) ((5959 . 5960)) (25767 35538 26651 525000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-multiline t face (org-block))) . 14039) (undo-tree-id83668 . -1) (undo-tree-id83669 . -1)) nil (25767 36266 93807 185000) 0 nil])
nil
([nil nil ((#("
" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face (org-block))) . 14110) (undo-tree-id83675 . -1) (t 25767 36266 230548 55000)) nil (25767 36270 250005 328000) 0 nil])
([nil nil ((16613 . 16615) (16612 . 16613) (t 25767 36270 342724 686000)) nil (25767 36406 896640 599000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16621 . 16622) (nil fontified nil 16615 . 16622) (16615 . 16622) 16614) nil (25767 36406 896639 574000) 0 nil])
([nil nil ((16622 . 16624)) nil (25767 36406 896638 500000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18655 . 18656) (nil fontified nil 18599 . 18656) (nil fontified nil 18519 . 18599) (nil fontified nil 18435 . 18519) (nil fontified nil 18349 . 18435) (nil fontified nil 18267 . 18349) (nil fontified nil 18191 . 18267) (nil fontified nil 18183 . 18191) (nil fontified nil 18136 . 18183) (nil fontified nil 18060 . 18136) (nil fontified nil 17985 . 18060) (nil fontified nil 17912 . 17985) (nil fontified nil 17844 . 17912) (nil fontified nil 17772 . 17844) (nil fontified nil 17695 . 17772) (nil fontified nil 17620 . 17695) (nil fontified nil 17542 . 17620) (nil fontified nil 17469 . 17542) (nil fontified nil 17395 . 17469) (nil fontified nil 17320 . 17395) (nil fontified nil 17247 . 17320) (nil fontified nil 17172 . 17247) (nil fontified nil 17105 . 17172) (nil fontified nil 17036 . 17105) (nil fontified nil 16990 . 17036) (nil fontified nil 16917 . 16990) (nil fontified nil 16850 . 16917) (nil fontified nil 16774 . 16850) (nil fontified nil 16701 . 16774) (nil fontified nil 16624 . 16701) (16624 . 18656)) nil (25767 36406 896637 29000) 0 nil])
([nil nil ((18656 . 18658)) nil (25767 36406 896632 859000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20717 . 20718) (nil fontified nil 20654 . 20718) (nil fontified nil 20584 . 20654) (nil fontified nil 20510 . 20584) (nil fontified nil 20440 . 20510) (nil fontified nil 20384 . 20440) (nil fontified nil 20327 . 20384) (nil fontified nil 20287 . 20327) (nil fontified nil 20224 . 20287) (nil fontified nil 20215 . 20224) (nil fontified nil 20146 . 20215) (nil fontified nil 20072 . 20146) (nil fontified nil 20030 . 20072) (nil fontified nil 20012 . 20030) (nil fontified nil 19938 . 20012) (nil fontified nil 19864 . 19938) (nil fontified nil 19789 . 19864) (nil fontified nil 19714 . 19789) (nil fontified nil 19640 . 19714) (nil fontified nil 19573 . 19640) (nil fontified nil 19506 . 19573) (nil fontified nil 19452 . 19506) (nil fontified nil 19377 . 19452) (nil fontified nil 19313 . 19377) (nil fontified nil 19257 . 19313) (nil fontified nil 19206 . 19257) (nil fontified nil 19138 . 19206) (nil fontified nil 19075 . 19138) (nil fontified nil 19007 . 19075) (nil fontified nil 18941 . 19007) (nil fontified nil 18872 . 18941) (nil fontified nil 18802 . 18872) (nil fontified nil 18724 . 18802) (nil fontified nil 18658 . 18724) (18658 . 20718)) nil (25767 36406 896631 258000) 0 nil])
([nil nil ((20718 . 20721)) nil (25767 36406 896626 668000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22038 . 22039) (nil fontified nil 22006 . 22039) (nil fontified nil 21933 . 22006) (nil fontified nil 21859 . 21933) (nil fontified nil 21783 . 21859) (nil fontified nil 21709 . 21783) (nil fontified nil 21639 . 21709) (nil fontified nil 21565 . 21639) (nil fontified nil 21501 . 21565) (nil fontified nil 21427 . 21501) (nil fontified nil 21363 . 21427) (nil fontified nil 21284 . 21363) (nil fontified nil 21219 . 21284) (nil fontified nil 21152 . 21219) (nil fontified nil 21083 . 21152) (nil fontified nil 21009 . 21083) (nil fontified nil 20939 . 21009) (nil fontified nil 20863 . 20939) (nil fontified nil 20791 . 20863) (nil fontified nil 20721 . 20791) (20721 . 22039)) nil (25767 36406 896624 829000) 0 nil])
([nil nil ((22039 . 22041)) nil (25767 36406 896618 362000) 0 nil])
([nil nil ((16624 . 16626) (#("As it stands, " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16624) (undo-tree-id85386 . -13) (undo-tree-id85387 . -13) (undo-tree-id85388 . -13) (undo-tree-id85389 . -3) (undo-tree-id85390 . -3) (undo-tree-id85391 . -3) (undo-tree-id85392 . -3) (undo-tree-id85393 . -3) (undo-tree-id85394 . -3) (undo-tree-id85395 . -3) (undo-tree-id85396 . -3) (undo-tree-id85397 . -3) (undo-tree-id85398 . -3) (undo-tree-id85399 . -3) (undo-tree-id85400 . -3) (undo-tree-id85401 . -3) (undo-tree-id85402 . -3) (undo-tree-id85403 . -3) (undo-tree-id85404 . -3) (undo-tree-id85405 . -3) (undo-tree-id85406 . -3) (undo-tree-id85407 . -3) (undo-tree-id85408 . -3) (undo-tree-id85409 . -3) (undo-tree-id85410 . -3) (undo-tree-id85411 . -3) (undo-tree-id85412 . -3) (undo-tree-id85413 . -3) (undo-tree-id85414 . -3) (undo-tree-id85415 . -14) (undo-tree-id85416 . -13) (undo-tree-id85417 . -1) (undo-tree-id85418 . -1) (undo-tree-id85419 . -1) (undo-tree-id85420 . -1) (undo-tree-id85421 . -1) (undo-tree-id85422 . -1) (undo-tree-id85423 . -1) (undo-tree-id85424 . -1) (undo-tree-id85425 . -1) (undo-tree-id85426 . -1) (undo-tree-id85427 . -1) (undo-tree-id85428 . -1) (undo-tree-id85429 . -1) (undo-tree-id85430 . -1) (undo-tree-id85431 . -1) (undo-tree-id85432 . -1) (undo-tree-id85433 . -4) (undo-tree-id85434 . -4) (undo-tree-id85435 . -4) (undo-tree-id85436 . -4) (undo-tree-id85437 . -4) (undo-tree-id85438 . -4) (undo-tree-id85439 . -4) (undo-tree-id85440 . -4) (undo-tree-id85441 . -4) (undo-tree-id85442 . -4) (undo-tree-id85443 . -4) (undo-tree-id85444 . -4) (undo-tree-id85445 . -4) (undo-tree-id85446 . -4) (undo-tree-id85447 . -4) (undo-tree-id85448 . -4) (undo-tree-id85449 . -11) (undo-tree-id85450 . -11) (undo-tree-id85451 . -11) (undo-tree-id85452 . -11) (undo-tree-id85453 . -11) (undo-tree-id85454 . -11) (undo-tree-id85455 . -11) (undo-tree-id85456 . -11) (undo-tree-id85457 . -11) (undo-tree-id85458 . -11) (undo-tree-id85459 . -11) (undo-tree-id85460 . -11) (undo-tree-id85461 . -11) (undo-tree-id85462 . -11) (undo-tree-id85463 . -11) (undo-tree-id85464 . -11) (undo-tree-id85465 . -12) (undo-tree-id85466 . -12) (undo-tree-id85467 . -12) (undo-tree-id85468 . -12) (undo-tree-id85469 . -12) (undo-tree-id85470 . -12) (undo-tree-id85471 . -12) (undo-tree-id85472 . -12) (undo-tree-id85473 . -12) (undo-tree-id85474 . -12) (undo-tree-id85475 . -12) (undo-tree-id85476 . -12) (undo-tree-id85477 . -12) (undo-tree-id85478 . -12) (undo-tree-id85479 . -12) (undo-tree-id85480 . -12) (undo-tree-id85481 . -12) (undo-tree-id85482 . -12) (undo-tree-id85483 . -12) (undo-tree-id85484 . -12) (undo-tree-id85485 . -12) (undo-tree-id85486 . -12) (undo-tree-id85487 . -12) (undo-tree-id85488 . -12) (undo-tree-id85489 . -12) (undo-tree-id85490 . -12) (undo-tree-id85491 . -14) (undo-tree-id85492 . -14) (undo-tree-id85493 . -14) (undo-tree-id85494 . -14) (undo-tree-id85495 . -14) (undo-tree-id85496 . -14) (undo-tree-id85497 . -14) (undo-tree-id85498 . -14) (undo-tree-id85499 . -14) (undo-tree-id85500 . -14) (undo-tree-id85501 . -14) (undo-tree-id85502 . -14) (undo-tree-id85503 . -14) (undo-tree-id85504 . -14) (undo-tree-id85505 . -14) (undo-tree-id85506 . -14) (undo-tree-id85507 . -13) (undo-tree-id85508 . -13) (undo-tree-id85509 . -13) (undo-tree-id85510 . -13) (undo-tree-id85511 . -13) (undo-tree-id85512 . -13) (undo-tree-id85513 . -13) (undo-tree-id85514 . -13) (undo-tree-id85515 . -13) (undo-tree-id85516 . -13) (undo-tree-id85517 . -13) (undo-tree-id85518 . -13) (undo-tree-id85519 . -13) (undo-tree-id85520 . -13) (undo-tree-id85521 . -13) (undo-tree-id85522 . -13) (undo-tree-id85523 . -13) (undo-tree-id85524 . -14) (undo-tree-id85525 . -14) (undo-tree-id85526 . -14) 16637 (t 25767 36406 992220 41000)) nil (25767 36467 192947 522000) 0 nil])
([nil nil ((16688 . 16689) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16688) (undo-tree-id85374 . -1) (undo-tree-id85375 . -1) (undo-tree-id85376 . -1) (undo-tree-id85377 . -1) (undo-tree-id85378 . -1) (undo-tree-id85379 . -1) (undo-tree-id85380 . -1) (undo-tree-id85381 . -1) (undo-tree-id85382 . -1) (undo-tree-id85383 . -1) (undo-tree-id85384 . -1) (undo-tree-id85385 . -1) 16630) nil (25767 36467 192860 859000) 0 nil])
([nil nil ((16624 . 16743) (#("- simply add mask_zero=True when creating the
- the model will need to learn that the padding tokens should be ignored." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 17 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 17 18 (invisible t fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 18 22 (display ((raise -0.3) (height 0.7)) fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 22 45 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 45 46 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 46 47 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 47 48 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 48 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 49 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 52 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 110 111 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 111 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 16624) (undo-tree-id83691 . -119) (undo-tree-id83692 . -119) (undo-tree-id83693 . -119) (undo-tree-id83694 . -119) (undo-tree-id83695 . 71) (undo-tree-id83696 . -119) (undo-tree-id83697 . -119) (undo-tree-id83698 . -119) (undo-tree-id83699 . -119) (undo-tree-id83700 . -119) (undo-tree-id83701 . -119) (undo-tree-id83702 . -119) (undo-tree-id83703 . -119) (undo-tree-id83704 . -119) (undo-tree-id83705 . -119) (undo-tree-id83706 . -119) (undo-tree-id83707 . -119) (undo-tree-id83708 . -119) (undo-tree-id83709 . -119) (undo-tree-id83710 . -119) (undo-tree-id83711 . -119) (undo-tree-id83712 . -119) (undo-tree-id83713 . -119) (undo-tree-id83714 . -119) (undo-tree-id83715 . -119) (undo-tree-id83716 . -119) (undo-tree-id83717 . -119) (undo-tree-id83718 . -119) (undo-tree-id83719 . -119) (undo-tree-id83720 . -119) (undo-tree-id83721 . -119) (undo-tree-id83722 . -119) (undo-tree-id83723 . -119) (undo-tree-id83724 . -119) (undo-tree-id83725 . -119) (undo-tree-id83726 . -119) (undo-tree-id83727 . -119) (undo-tree-id83728 . -119) (undo-tree-id83729 . -119) (undo-tree-id83730 . -119) (undo-tree-id83731 . -119) (undo-tree-id83732 . -119) (undo-tree-id83733 . -119) (undo-tree-id83734 . -119) (undo-tree-id83735 . -119) (undo-tree-id83736 . -110) (undo-tree-id83737 . -110) (undo-tree-id83738 . -110) (undo-tree-id83739 . -110) (undo-tree-id83740 . -110) (undo-tree-id83741 . -110) (undo-tree-id83742 . -110) (undo-tree-id83743 . -110) (undo-tree-id83744 . -110) (undo-tree-id83745 . -110) (undo-tree-id83746 . -110) (undo-tree-id83747 . -101) (undo-tree-id83748 . -101) (undo-tree-id83749 . -101) (undo-tree-id83750 . -101) (undo-tree-id83751 . -101) (undo-tree-id83752 . -101) (undo-tree-id83753 . -101) (undo-tree-id83754 . -101) (undo-tree-id83755 . -101) (undo-tree-id83756 . -101) (undo-tree-id83757 . -101) (undo-tree-id83758 . -101) (undo-tree-id83759 . -101) (undo-tree-id83760 . -101) (undo-tree-id83761 . -101) (undo-tree-id83762 . -101) (undo-tree-id83763 . -101) (undo-tree-id83764 . -101) (undo-tree-id83765 . -101) (undo-tree-id83766 . -101) (undo-tree-id83767 . -101) (undo-tree-id83768 . -50) (undo-tree-id83769 . -50) (undo-tree-id83770 . -50) (undo-tree-id83771 . -50) (undo-tree-id83772 . -50) (undo-tree-id83773 . -50) (undo-tree-id83774 . -50) (undo-tree-id83775 . -50) (undo-tree-id83776 . -50) (undo-tree-id83777 . -50) (undo-tree-id83778 . -50) (undo-tree-id83779 . -50) (undo-tree-id83780 . -50) (undo-tree-id83781 . -50) (undo-tree-id83782 . -50) (undo-tree-id83783 . -50) (undo-tree-id83784 . -50) (undo-tree-id83785 . -50) (undo-tree-id83786 . -50) (undo-tree-id83787 . -50) (undo-tree-id83788 . -50) (undo-tree-id83789 . -50) (undo-tree-id83790 . -50) (undo-tree-id83791 . -50) (undo-tree-id83792 . -50) (undo-tree-id83793 . -50) (undo-tree-id83794 . -50) (undo-tree-id83795 . -50) (undo-tree-id83796 . -50) (undo-tree-id83797 . -50) (undo-tree-id83798 . -50) (undo-tree-id83799 . -49) (undo-tree-id83800 . -49) (undo-tree-id83801 . -49) (undo-tree-id83802 . -49) (undo-tree-id83803 . -49) (undo-tree-id83804 . -49) (undo-tree-id83805 . -49) (undo-tree-id83806 . -49) (undo-tree-id83807 . -49) (undo-tree-id83808 . -49) (undo-tree-id83809 . -49) (undo-tree-id83810 . -49) (undo-tree-id83811 . -49) (undo-tree-id83812 . -49) (undo-tree-id83813 . -49) (undo-tree-id83814 . -49) (undo-tree-id83815 . -47) (undo-tree-id83816 . -47) (undo-tree-id83817 . -47) (undo-tree-id83818 . -47) (undo-tree-id83819 . -47) (undo-tree-id83820 . -47) (undo-tree-id83821 . -48) (undo-tree-id83822 . -48) (undo-tree-id83823 . -48) (undo-tree-id83824 . -48) (undo-tree-id83825 . -48) (undo-tree-id83826 . -48) (undo-tree-id83827 . -48) (undo-tree-id83828 . -47) (undo-tree-id83829 . -47) (undo-tree-id83830 . -47) (undo-tree-id83831 . -47) (undo-tree-id83832 . -47) (undo-tree-id83833 . -47) (undo-tree-id83834 . -47) (undo-tree-id83835 . -47) (undo-tree-id83836 . -47) (undo-tree-id83837 . -47) (undo-tree-id83838 . -47) (undo-tree-id83839 . -47) (undo-tree-id83840 . -47) (undo-tree-id83841 . -47) (undo-tree-id83842 . -47) (undo-tree-id83843 . -47) (undo-tree-id83844 . -47) (undo-tree-id83845 . -47) (undo-tree-id83846 . -47) (undo-tree-id83847 . -47) (undo-tree-id83848 . -112) (undo-tree-id83849 . -112) (undo-tree-id83850 . -112) (undo-tree-id83851 . -112) (undo-tree-id83852 . -112) (undo-tree-id83853 . -112) (undo-tree-id83854 . -112) (undo-tree-id83855 . -112) (undo-tree-id83856 . -112) (undo-tree-id83857 . -112) (undo-tree-id83858 . -112) (undo-tree-id83859 . -112) (undo-tree-id83860 . -112) (undo-tree-id83861 . -112) (undo-tree-id83862 . -112) (undo-tree-id83863 . -112) (undo-tree-id83864 . -117) (undo-tree-id83865 . -117) (undo-tree-id83866 . -117) (undo-tree-id83867 . -117) (undo-tree-id83868 . -117) (undo-tree-id83869 . -117) (undo-tree-id83870 . -117) (undo-tree-id83871 . -117) (undo-tree-id83872 . -117) (undo-tree-id83873 . -117) (undo-tree-id83874 . -117) (undo-tree-id83875 . -117) (undo-tree-id83876 . -117) (undo-tree-id83877 . -117) (undo-tree-id83878 . -117) (undo-tree-id83879 . -117) (undo-tree-id83880 . -117) (undo-tree-id83881 . -117) (undo-tree-id83882 . -117) (undo-tree-id83883 . -117) (undo-tree-id83884 . -117) (undo-tree-id83885 . -52) (undo-tree-id83886 . -52) (undo-tree-id83887 . -52) (undo-tree-id83888 . -52) (undo-tree-id83889 . -52) (undo-tree-id83890 . -52) (undo-tree-id83891 . -52) (undo-tree-id83892 . -110) (undo-tree-id83893 . -110) (undo-tree-id83894 . -110) (undo-tree-id83895 . -110) (undo-tree-id83896 . -110) (undo-tree-id83897 . -110) (undo-tree-id83898 . -110) (undo-tree-id83899 . -110) (undo-tree-id83900 . -110) (undo-tree-id83901 . -110) (undo-tree-id83902 . -110) (undo-tree-id83903 . -110) (undo-tree-id83904 . -110) (undo-tree-id83905 . -110) (undo-tree-id83906 . -110) (undo-tree-id83907 . -110) (undo-tree-id83908 . -110) (undo-tree-id83909 . -110) (undo-tree-id83910 . -110) (undo-tree-id83911 . -110) (undo-tree-id83912 . -110) (undo-tree-id83913 . -119) (undo-tree-id83914 . -119) (undo-tree-id83915 . -119) (undo-tree-id83916 . -119) (undo-tree-id83917 . -119) (undo-tree-id83918 . -119) (undo-tree-id83919 . -119) (undo-tree-id83920 . -119) (undo-tree-id83921 . -119) (undo-tree-id83922 . -119) (undo-tree-id83923 . -119) (undo-tree-id83924 . -110) (undo-tree-id83925 . -110) (undo-tree-id83926 . -110) (undo-tree-id83927 . -110) (undo-tree-id83928 . -110) (undo-tree-id83929 . -110) (undo-tree-id83930 . -110) (undo-tree-id83931 . -110) (undo-tree-id83932 . -110) (undo-tree-id83933 . -110) (undo-tree-id83934 . -110) (undo-tree-id83935 . -111) (undo-tree-id83936 . -111) (undo-tree-id83937 . -111) (undo-tree-id83938 . -111) (undo-tree-id83939 . -111) (undo-tree-id83940 . -111) (undo-tree-id83941 . -111) (undo-tree-id83942 . -111) (undo-tree-id83943 . -111) (undo-tree-id83944 . -111) (undo-tree-id83945 . -111) (undo-tree-id83946 . -111) (undo-tree-id83947 . -111) (undo-tree-id83948 . -111) (undo-tree-id83949 . -111) (undo-tree-id83950 . -111) (undo-tree-id83951 . -118) (undo-tree-id83952 . -118) (undo-tree-id83953 . -118) (undo-tree-id83954 . -118) (undo-tree-id83955 . -118) (undo-tree-id83956 . -118) (undo-tree-id83957 . -118) (undo-tree-id83958 . -118) (undo-tree-id83959 . -118) (undo-tree-id83960 . -118) (undo-tree-id83961 . -118) (undo-tree-id83962 . -119) (undo-tree-id83963 . -119) (undo-tree-id83964 . -119) (undo-tree-id83965 . -119) (undo-tree-id83966 . -119) (undo-tree-id83967 . -119) (undo-tree-id83968 . -119) (undo-tree-id83969 . -119) (undo-tree-id83970 . -119) (undo-tree-id83971 . -119) (undo-tree-id83972 . -119) (undo-tree-id83973 . -119) (undo-tree-id83974 . -119) (undo-tree-id83975 . -119) (undo-tree-id83976 . -119) (undo-tree-id83977 . -119) (undo-tree-id83978 . -119) (undo-tree-id83979 . -119) (undo-tree-id83980 . -119) (undo-tree-id83981 . -119) (undo-tree-id83982 . -119) (undo-tree-id83983 . -119) (undo-tree-id83984 . -119) (undo-tree-id83985 . -119) (undo-tree-id83986 . -119) (undo-tree-id83987 . -119) (undo-tree-id83988 . -119) (undo-tree-id83989 . -119) (undo-tree-id83990 . -119) (undo-tree-id83991 . -119) (undo-tree-id83992 . -119) (undo-tree-id83993 . -119) (undo-tree-id83994 . -119) (undo-tree-id83995 . -119) (undo-tree-id83996 . -119) (undo-tree-id83997 . -119) (undo-tree-id83998 . -119) (undo-tree-id83999 . -119) (undo-tree-id84000 . -119) (undo-tree-id84001 . -119) (undo-tree-id84002 . -119) (undo-tree-id84003 . -119) (undo-tree-id84004 . -119) (undo-tree-id84005 . -119) (undo-tree-id84006 . -119) (undo-tree-id84007 . -119) (undo-tree-id84008 . -119) (undo-tree-id84009 . -119) (undo-tree-id84010 . -119) (undo-tree-id84011 . -119) (undo-tree-id84012 . -119) (undo-tree-id84013 . -119) (undo-tree-id84014 . -119) (undo-tree-id84015 . -119) (undo-tree-id84016 . -119) (undo-tree-id84017 . -119) (undo-tree-id84018 . -119) (undo-tree-id84019 . -119) (undo-tree-id84020 . -119) (undo-tree-id84021 . -119) (undo-tree-id84022 . -119) (undo-tree-id84023 . -119) (undo-tree-id84024 . -119) (undo-tree-id84025 . -119) (undo-tree-id84026 . -119) (undo-tree-id84027 . -119) (undo-tree-id84028 . -119) (undo-tree-id84029 . -119) (undo-tree-id84030 . -119) (undo-tree-id84031 . -119) (undo-tree-id84032 . -119) (undo-tree-id84033 . -119) (undo-tree-id84034 . -119) (undo-tree-id84035 . -119) (undo-tree-id84036 . -119) (undo-tree-id84037 . -119) (undo-tree-id84038 . -119) (undo-tree-id84039 . -119) (undo-tree-id84040 . -119) (undo-tree-id84041 . -119) (undo-tree-id84042 . -119) (undo-tree-id84043 . -119) (undo-tree-id84044 . -119) (undo-tree-id84045 . -119) (undo-tree-id84046 . -119) (undo-tree-id84047 . -119) (undo-tree-id84048 . -119) (undo-tree-id84049 . -119) (undo-tree-id84050 . -119) (undo-tree-id84051 . -119) (undo-tree-id84052 . -119) (undo-tree-id84053 . -119) (undo-tree-id84054 . -119) (undo-tree-id84055 . -119) (undo-tree-id84056 . -119) (undo-tree-id84057 . -119) (undo-tree-id84058 . -119) (undo-tree-id84059 . -119) (undo-tree-id84060 . -119) (undo-tree-id84061 . -119) (undo-tree-id84062 . -119) (undo-tree-id84063 . -119) (undo-tree-id84064 . -119) (undo-tree-id84065 . -119) (undo-tree-id84066 . -119) (undo-tree-id84067 . -119) (undo-tree-id84068 . -119) (undo-tree-id84069 . -119) (undo-tree-id84070 . -119) (undo-tree-id84071 . -119) (undo-tree-id84072 . -119) (undo-tree-id84073 . -119) (undo-tree-id84074 . -119) (undo-tree-id84075 . -119) (undo-tree-id84076 . -119) (undo-tree-id84077 . -119) (undo-tree-id84078 . -119) (undo-tree-id84079 . -119) (undo-tree-id84080 . -119) (undo-tree-id84081 . -119) (undo-tree-id84082 . -119) (undo-tree-id84083 . -119) (undo-tree-id84084 . -119) (undo-tree-id84085 . -119) (undo-tree-id84086 . -119) (undo-tree-id84087 . -119) (undo-tree-id84088 . -119) (undo-tree-id84089 . -119) (undo-tree-id84090 . -119) (undo-tree-id84091 . -119) (undo-tree-id84092 . -119) (undo-tree-id84093 . -119) (undo-tree-id84094 . -119) (undo-tree-id84095 . -119) (undo-tree-id84096 . -119) (undo-tree-id84097 . -119) (undo-tree-id84098 . -119) (undo-tree-id84099 . -119) (undo-tree-id84100 . -119) (undo-tree-id84101 . -119) (undo-tree-id84102 . -119) (undo-tree-id84103 . -119) (undo-tree-id84104 . -119) (undo-tree-id84105 . -119) (undo-tree-id84106 . -119) (undo-tree-id84107 . -119) (undo-tree-id84108 . -119) (undo-tree-id84109 . -119) (undo-tree-id84110 . -119) (undo-tree-id84111 . -119) (undo-tree-id84112 . -119) (undo-tree-id84113 . -119) (undo-tree-id84114 . -119) (undo-tree-id84115 . -119) (undo-tree-id84116 . -119) (undo-tree-id84117 . -119) (undo-tree-id84118 . -119) (undo-tree-id84119 . -119) (undo-tree-id84120 . -119) (undo-tree-id84121 . -119) (undo-tree-id84122 . -119) (undo-tree-id84123 . -119) (undo-tree-id84124 . -119) (undo-tree-id84125 . -119) (undo-tree-id84126 . -119) (undo-tree-id84127 . -119) (undo-tree-id84128 . -119) (undo-tree-id84129 . -119) (undo-tree-id84130 . -119) (undo-tree-id84131 . -119) (undo-tree-id84132 . -119) (undo-tree-id84133 . -119) (undo-tree-id84134 . -119) (undo-tree-id84135 . -119) (undo-tree-id84136 . -119) (undo-tree-id84137 . -119) (undo-tree-id84138 . -119) (undo-tree-id84139 . -119) (undo-tree-id84140 . -119) (undo-tree-id84141 . -119) (undo-tree-id84142 . -119) (undo-tree-id84143 . -119) (undo-tree-id84144 . -119) (undo-tree-id84145 . -119) (undo-tree-id84146 . -119) (undo-tree-id84147 . -119) (undo-tree-id84148 . -119) (undo-tree-id84149 . -119) (undo-tree-id84150 . -119) (undo-tree-id84151 . -119) (undo-tree-id84152 . -119) (undo-tree-id84153 . -119) (undo-tree-id84154 . -119) (undo-tree-id84155 . -119) (undo-tree-id84156 . -119) (undo-tree-id84157 . -119) (undo-tree-id84158 . -119) (undo-tree-id84159 . -119) (undo-tree-id84160 . -119) (undo-tree-id84161 . -119) (undo-tree-id84162 . -119) (undo-tree-id84163 . -119) (undo-tree-id84164 . -119) (undo-tree-id84165 . -119) (undo-tree-id84166 . -119) (undo-tree-id84167 . -119) (undo-tree-id84168 . -119) (undo-tree-id84169 . -119) (undo-tree-id84170 . -119) (undo-tree-id84171 . -119) (undo-tree-id84172 . -119) (undo-tree-id84173 . -119) (undo-tree-id84174 . -119) (undo-tree-id84175 . -119) (undo-tree-id84176 . -119) (undo-tree-id84177 . -119) (undo-tree-id84178 . -119) (undo-tree-id84179 . -119) (undo-tree-id84180 . -119) (undo-tree-id84181 . -119) (undo-tree-id84182 . -119) (undo-tree-id84183 . -119) (undo-tree-id84184 . -119) (undo-tree-id84185 . -119) (undo-tree-id84186 . -119) (undo-tree-id84187 . -119) (undo-tree-id84188 . -119) (undo-tree-id84189 . -119) (undo-tree-id84190 . -119) (undo-tree-id84191 . -119) (undo-tree-id84192 . -119) (undo-tree-id84193 . -119) (undo-tree-id84194 . -119) (undo-tree-id84195 . -119) (undo-tree-id84196 . -119) (undo-tree-id84197 . -119) (undo-tree-id84198 . -119) (undo-tree-id84199 . -119) (undo-tree-id84200 . -119) (undo-tree-id84201 . -119) (undo-tree-id84202 . -119) (undo-tree-id84203 . -119) (undo-tree-id84204 . -119) (undo-tree-id84205 . -119) (undo-tree-id84206 . -119) (undo-tree-id84207 . -119) (undo-tree-id84208 . -119) (undo-tree-id84209 . -119) (undo-tree-id84210 . -119) (undo-tree-id84211 . -119) (undo-tree-id84212 . -119) (undo-tree-id84213 . -119) (undo-tree-id84214 . -119) (undo-tree-id84215 . -119) (undo-tree-id84216 . -119) (undo-tree-id84217 . -119) (undo-tree-id84218 . -119) (undo-tree-id84219 . -119) (undo-tree-id84220 . -119) (undo-tree-id84221 . -119) (undo-tree-id84222 . -119) (undo-tree-id84223 . -119) (undo-tree-id84224 . -119) (undo-tree-id84225 . -119) (undo-tree-id84226 . -119) (undo-tree-id84227 . -119) (undo-tree-id84228 . -119) (undo-tree-id84229 . -119) (undo-tree-id84230 . -119) (undo-tree-id84231 . -119) (undo-tree-id84232 . -119) (undo-tree-id84233 . -119) (undo-tree-id84234 . -119) (undo-tree-id84235 . -119) (undo-tree-id84236 . -119) (undo-tree-id84237 . -119) (undo-tree-id84238 . -119) (undo-tree-id84239 . -119) (undo-tree-id84240 . -119) (undo-tree-id84241 . -119) (undo-tree-id84242 . -119) (undo-tree-id84243 . -119) (undo-tree-id84244 . -119) (undo-tree-id84245 . -119) (undo-tree-id84246 . -119) (undo-tree-id84247 . -119) (undo-tree-id84248 . -119) (undo-tree-id84249 . -119) (undo-tree-id84250 . -119) (undo-tree-id84251 . -119) (undo-tree-id84252 . -119) (undo-tree-id84253 . -119) (undo-tree-id84254 . -119) (undo-tree-id84255 . -119) (undo-tree-id84256 . -119) (undo-tree-id84257 . -119) (undo-tree-id84258 . -119) (undo-tree-id84259 . -119) (undo-tree-id84260 . -119) (undo-tree-id84261 . -119) (undo-tree-id84262 . -119) (undo-tree-id84263 . -119) (undo-tree-id84264 . -119) (undo-tree-id84265 . -119) (undo-tree-id84266 . -119) (undo-tree-id84267 . -119) (undo-tree-id84268 . -119) (undo-tree-id84269 . -119) (undo-tree-id84270 . -119) (undo-tree-id84271 . -119) (undo-tree-id84272 . -119) (undo-tree-id84273 . -119) (undo-tree-id84274 . -119) (undo-tree-id84275 . -119) (undo-tree-id84276 . -119) (undo-tree-id84277 . -119) (undo-tree-id84278 . -119) (undo-tree-id84279 . -119) (undo-tree-id84280 . -119) (undo-tree-id84281 . -119) (undo-tree-id84282 . -119) (undo-tree-id84283 . -119) (undo-tree-id84284 . -119) (undo-tree-id84285 . -119) (undo-tree-id84286 . -119) (undo-tree-id84287 . -119) (undo-tree-id84288 . -119) (undo-tree-id84289 . -119) (undo-tree-id84290 . -119) (undo-tree-id84291 . -119) (undo-tree-id84292 . -119) (undo-tree-id84293 . -119) (undo-tree-id84294 . -119) (undo-tree-id84295 . -119) (undo-tree-id84296 . -119) (undo-tree-id84297 . -119) (undo-tree-id84298 . -119) (undo-tree-id84299 . -119) (undo-tree-id84300 . -119) (undo-tree-id84301 . -119) (undo-tree-id84302 . -119) (undo-tree-id84303 . -119) (undo-tree-id84304 . -119) (undo-tree-id84305 . -119) (undo-tree-id84306 . -119) (undo-tree-id84307 . -119) (undo-tree-id84308 . -119) (undo-tree-id84309 . -119) (undo-tree-id84310 . -119) (undo-tree-id84311 . -119) (undo-tree-id84312 . -119) (undo-tree-id84313 . -119) (undo-tree-id84314 . -119) (undo-tree-id84315 . -119) (undo-tree-id84316 . -119) (undo-tree-id84317 . -119) (undo-tree-id84318 . -119) (undo-tree-id84319 . -119) (undo-tree-id84320 . -119) (undo-tree-id84321 . -119) (undo-tree-id84322 . -119) (undo-tree-id84323 . -119) (undo-tree-id84324 . -119) (undo-tree-id84325 . -119) (undo-tree-id84326 . -119) (undo-tree-id84327 . -119) (undo-tree-id84328 . -119) (undo-tree-id84329 . -119) (undo-tree-id84330 . -119) (undo-tree-id84331 . -119) (undo-tree-id84332 . -119) (undo-tree-id84333 . -119) (undo-tree-id84334 . -119) (undo-tree-id84335 . -119) (undo-tree-id84336 . -119) (undo-tree-id84337 . -119) (undo-tree-id84338 . -119) (undo-tree-id84339 . -119) (undo-tree-id84340 . -119) (undo-tree-id84341 . -119) (undo-tree-id84342 . -119) (undo-tree-id84343 . -119) (undo-tree-id84344 . -119) (undo-tree-id84345 . -119) (undo-tree-id84346 . -119) (undo-tree-id84347 . -119) (undo-tree-id84348 . -119) (undo-tree-id84349 . -119) (undo-tree-id84350 . -119) (undo-tree-id84351 . -119) (undo-tree-id84352 . -119) (undo-tree-id84353 . -119) (undo-tree-id84354 . -119) (undo-tree-id84355 . -119) (undo-tree-id84356 . -119) (undo-tree-id84357 . -119) (undo-tree-id84358 . -119) (undo-tree-id84359 . -119) (undo-tree-id84360 . -119) (undo-tree-id84361 . -119) (undo-tree-id84362 . -119) (undo-tree-id84363 . -119) (undo-tree-id84364 . -119) (undo-tree-id84365 . -119) (undo-tree-id84366 . -119) (undo-tree-id84367 . -119) (undo-tree-id84368 . -119) (undo-tree-id84369 . -119) (undo-tree-id84370 . -119) (undo-tree-id84371 . -119) (undo-tree-id84372 . -119) (undo-tree-id84373 . -119) (undo-tree-id84374 . -119) (undo-tree-id84375 . -119) (undo-tree-id84376 . -119) (undo-tree-id84377 . -119) (undo-tree-id84378 . -119) (undo-tree-id84379 . -119) (undo-tree-id84380 . -119) (undo-tree-id84381 . -119) (undo-tree-id84382 . -119) (undo-tree-id84383 . -119) (undo-tree-id84384 . -119) (undo-tree-id84385 . -119) (undo-tree-id84386 . -119) (undo-tree-id84387 . -119) (undo-tree-id84388 . -119) (undo-tree-id84389 . -119) (undo-tree-id84390 . -119) (undo-tree-id84391 . -119) (undo-tree-id84392 . -119) (undo-tree-id84393 . -119) (undo-tree-id84394 . -119) (undo-tree-id84395 . -119) (undo-tree-id84396 . -119) (undo-tree-id84397 . -119) (undo-tree-id84398 . -119) (undo-tree-id84399 . -119) (undo-tree-id84400 . -119) (undo-tree-id84401 . -119) (undo-tree-id84402 . -119) (undo-tree-id84403 . -119) (undo-tree-id84404 . -119) (undo-tree-id84405 . -119) (undo-tree-id84406 . -119) (undo-tree-id84407 . -119) (undo-tree-id84408 . -119) (undo-tree-id84409 . -119) (undo-tree-id84410 . -119) (undo-tree-id84411 . -119) (undo-tree-id84412 . -119) (undo-tree-id84413 . -119) (undo-tree-id84414 . -119) (undo-tree-id84415 . -119) (undo-tree-id84416 . -119) (undo-tree-id84417 . -119) (undo-tree-id84418 . -119) (undo-tree-id84419 . -119) (undo-tree-id84420 . -119) (undo-tree-id84421 . -119) (undo-tree-id84422 . -119) (undo-tree-id84423 . -119) (undo-tree-id84424 . -119) (undo-tree-id84425 . -46) (16624 . 16670) (#(" simply add mask_zero=True when creating the" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 16 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t) 17 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 21 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16697) (undo-tree-id84426 . -1) (undo-tree-id84427 . -1) (undo-tree-id84428 . -1) (undo-tree-id84429 . -1) (undo-tree-id84430 . 43) (undo-tree-id84431 . -1) (undo-tree-id84432 . -1) (undo-tree-id84433 . -1) (undo-tree-id84434 . -1) (undo-tree-id84435 . -1) (undo-tree-id84436 . -1) (undo-tree-id84437 . -1) (undo-tree-id84438 . -1) (undo-tree-id84439 . -1) (undo-tree-id84440 . -1) (undo-tree-id84441 . -1) (undo-tree-id84442 . -1) (undo-tree-id84443 . -1) (undo-tree-id84444 . -1) (undo-tree-id84445 . -1) (undo-tree-id84446 . -1) (undo-tree-id84447 . -1) (undo-tree-id84448 . -1) (undo-tree-id84449 . -1) (undo-tree-id84450 . -1) (undo-tree-id84451 . -1) (undo-tree-id84452 . -1) (undo-tree-id84453 . -1) (undo-tree-id84454 . -1) (undo-tree-id84455 . -1) (undo-tree-id84456 . -1) (undo-tree-id84457 . -1) (undo-tree-id84458 . -1) (undo-tree-id84459 . -1) (undo-tree-id84460 . -1) (undo-tree-id84461 . -1) (undo-tree-id84462 . -1) (undo-tree-id84463 . -1) (undo-tree-id84464 . -1) (undo-tree-id84465 . -1) (undo-tree-id84466 . -1) (undo-tree-id84467 . -1) (undo-tree-id84468 . -1) (undo-tree-id84469 . -1) (undo-tree-id84470 . -1) (undo-tree-id84471 . -1) (undo-tree-id84472 . -1) (undo-tree-id84473 . -1) (undo-tree-id84474 . -1) (undo-tree-id84475 . -1) (undo-tree-id84476 . -1) (undo-tree-id84477 . -1) (undo-tree-id84478 . -1) (undo-tree-id84479 . -1) (undo-tree-id84480 . -1) (undo-tree-id84481 . -1) (undo-tree-id84482 . -1) (undo-tree-id84483 . -1) (undo-tree-id84484 . -1) (undo-tree-id84485 . -1) (undo-tree-id84486 . -1) (undo-tree-id84487 . -1) (undo-tree-id84488 . -1) (undo-tree-id84489 . -1) (undo-tree-id84490 . -1) (undo-tree-id84491 . -1) (undo-tree-id84492 . -1) (undo-tree-id84493 . -1) (undo-tree-id84494 . -1) (undo-tree-id84495 . -1) (undo-tree-id84496 . -1) (undo-tree-id84497 . -1) (undo-tree-id84498 . -1) (undo-tree-id84499 . -1) (undo-tree-id84500 . -1) (undo-tree-id84501 . -1) (undo-tree-id84502 . -1) (undo-tree-id84503 . -1) (undo-tree-id84504 . -1) (undo-tree-id84505 . -1) (undo-tree-id84506 . -1) (undo-tree-id84507 . -1) (undo-tree-id84508 . -1) (undo-tree-id84509 . -1) (undo-tree-id84510 . -1) (undo-tree-id84511 . -1) (undo-tree-id84512 . -1) (undo-tree-id84513 . -1) (undo-tree-id84514 . -1) (undo-tree-id84515 . -1) (undo-tree-id84516 . -1) (undo-tree-id84517 . -1) (undo-tree-id84518 . -1) (undo-tree-id84519 . -1) (undo-tree-id84520 . -1) (undo-tree-id84521 . -1) (undo-tree-id84522 . -1) (undo-tree-id84523 . -1) (undo-tree-id84524 . -1) (undo-tree-id84525 . -1) (undo-tree-id84526 . -1) (undo-tree-id84527 . -1) (undo-tree-id84528 . -1) (undo-tree-id84529 . -1) (undo-tree-id84530 . -1) (undo-tree-id84531 . -1) (undo-tree-id84532 . -1) (undo-tree-id84533 . -1) (undo-tree-id84534 . -1) (undo-tree-id84535 . -1) (undo-tree-id84536 . -1) (undo-tree-id84537 . -1) (undo-tree-id84538 . -1) (undo-tree-id84539 . -1) (undo-tree-id84540 . -1) (undo-tree-id84541 . -1) (undo-tree-id84542 . -1) (undo-tree-id84543 . -1) (undo-tree-id84544 . -1) (undo-tree-id84545 . -1) (undo-tree-id84546 . -1) (undo-tree-id84547 . -1) (undo-tree-id84548 . -1) (undo-tree-id84549 . -1) (undo-tree-id84550 . -1) (undo-tree-id84551 . -1) (undo-tree-id84552 . -1) (undo-tree-id84553 . -1) (undo-tree-id84554 . -1) (undo-tree-id84555 . -1) (undo-tree-id84556 . -1) (undo-tree-id84557 . -1) (undo-tree-id84558 . -1) (undo-tree-id84559 . -1) (undo-tree-id84560 . -1) (undo-tree-id84561 . -1) (undo-tree-id84562 . -1) (undo-tree-id84563 . -1) (undo-tree-id84564 . -1) (undo-tree-id84565 . -1) (undo-tree-id84566 . -1) (undo-tree-id84567 . -1) (undo-tree-id84568 . -1) (undo-tree-id84569 . -1) (undo-tree-id84570 . -1) (undo-tree-id84571 . -1) (undo-tree-id84572 . -1) (undo-tree-id84573 . -1) (undo-tree-id84574 . -1) (undo-tree-id84575 . -1) (undo-tree-id84576 . -1) (undo-tree-id84577 . -1) (undo-tree-id84578 . -1) (undo-tree-id84579 . -1) (undo-tree-id84580 . -1) (undo-tree-id84581 . -1) (undo-tree-id84582 . -1) (undo-tree-id84583 . -1) (undo-tree-id84584 . -1) (undo-tree-id84585 . -1) (undo-tree-id84586 . -1) (undo-tree-id84587 . -1) (undo-tree-id84588 . -1) (undo-tree-id84589 . -1) (undo-tree-id84590 . -1) (undo-tree-id84591 . -1) (undo-tree-id84592 . -1) (undo-tree-id84593 . -1) (undo-tree-id84594 . -1) (undo-tree-id84595 . -1) (undo-tree-id84596 . -1) (undo-tree-id84597 . -1) (undo-tree-id84598 . -1) (undo-tree-id84599 . -1) (undo-tree-id84600 . -1) (undo-tree-id84601 . -1) (undo-tree-id84602 . -1) (undo-tree-id84603 . -1) (undo-tree-id84604 . -1) (undo-tree-id84605 . -1) (undo-tree-id84606 . -1) (undo-tree-id84607 . -1) (undo-tree-id84608 . -1) (undo-tree-id84609 . -1) (undo-tree-id84610 . -1) (undo-tree-id84611 . -1) (undo-tree-id84612 . -1) (undo-tree-id84613 . -1) (undo-tree-id84614 . -1) (undo-tree-id84615 . -1) (undo-tree-id84616 . -1) (undo-tree-id84617 . -1) (undo-tree-id84618 . -1) (undo-tree-id84619 . -1) (undo-tree-id84620 . -1) (undo-tree-id84621 . -1) (undo-tree-id84622 . -1) (undo-tree-id84623 . -1) (undo-tree-id84624 . -1) (undo-tree-id84625 . -1) (undo-tree-id84626 . -1) (undo-tree-id84627 . -1) (undo-tree-id84628 . -1) (undo-tree-id84629 . -1) (undo-tree-id84630 . -1) (undo-tree-id84631 . -1) (undo-tree-id84632 . -1) (undo-tree-id84633 . -1) (undo-tree-id84634 . -1) (undo-tree-id84635 . -1) (undo-tree-id84636 . -1) (undo-tree-id84637 . -1) (undo-tree-id84638 . -1) (undo-tree-id84639 . -1) (undo-tree-id84640 . -1) (undo-tree-id84641 . -1) (undo-tree-id84642 . -1) (undo-tree-id84643 . -1) (undo-tree-id84644 . -1) (undo-tree-id84645 . -1) (undo-tree-id84646 . -1) (undo-tree-id84647 . -1) (undo-tree-id84648 . -1) (undo-tree-id84649 . -1) (undo-tree-id84650 . -1) (undo-tree-id84651 . -1) (undo-tree-id84652 . -1) (undo-tree-id84653 . -1) (undo-tree-id84654 . -1) (undo-tree-id84655 . -1) (undo-tree-id84656 . -1) (undo-tree-id84657 . -1) (undo-tree-id84658 . -1) (undo-tree-id84659 . -1) (undo-tree-id84660 . -1) (undo-tree-id84661 . -1) (undo-tree-id84662 . -1) (undo-tree-id84663 . -1) (undo-tree-id84664 . -1) (undo-tree-id84665 . -1) (undo-tree-id84666 . -1) (undo-tree-id84667 . -1) (undo-tree-id84668 . -1) (undo-tree-id84669 . -1) (undo-tree-id84670 . -1) (undo-tree-id84671 . -1) (undo-tree-id84672 . -1) (undo-tree-id84673 . -1) (undo-tree-id84674 . -1) (undo-tree-id84675 . -1) (undo-tree-id84676 . -1) (undo-tree-id84677 . -1) (undo-tree-id84678 . -1) (undo-tree-id84679 . -1) (undo-tree-id84680 . -1) (undo-tree-id84681 . -1) (undo-tree-id84682 . -1) (undo-tree-id84683 . -1) (undo-tree-id84684 . -1) (undo-tree-id84685 . -1) (undo-tree-id84686 . -1) (undo-tree-id84687 . -1) (undo-tree-id84688 . -1) (undo-tree-id84689 . -1) (undo-tree-id84690 . -1) (undo-tree-id84691 . -1) (undo-tree-id84692 . -1) (undo-tree-id84693 . -1) (undo-tree-id84694 . -1) (undo-tree-id84695 . -1) (undo-tree-id84696 . -1) (undo-tree-id84697 . -1) (undo-tree-id84698 . -1) (undo-tree-id84699 . -1) (undo-tree-id84700 . -1) (undo-tree-id84701 . -1) (undo-tree-id84702 . -1) (undo-tree-id84703 . -1) (undo-tree-id84704 . -1) (undo-tree-id84705 . -1) (undo-tree-id84706 . -1) (undo-tree-id84707 . -1) (undo-tree-id84708 . -1) (undo-tree-id84709 . -1) (undo-tree-id84710 . -1) (undo-tree-id84711 . -1) (undo-tree-id84712 . -1) (undo-tree-id84713 . -1) (undo-tree-id84714 . -1) (undo-tree-id84715 . -1) (undo-tree-id84716 . -1) (undo-tree-id84717 . -1) (undo-tree-id84718 . -1) (undo-tree-id84719 . -1) (undo-tree-id84720 . -1) (undo-tree-id84721 . -1) (undo-tree-id84722 . -1) (undo-tree-id84723 . -1) (undo-tree-id84724 . -1) (undo-tree-id84725 . -1) (undo-tree-id84726 . -1) (undo-tree-id84727 . -1) (undo-tree-id84728 . -1) (undo-tree-id84729 . -1) (undo-tree-id84730 . -1) (undo-tree-id84731 . -1) (undo-tree-id84732 . -1) (undo-tree-id84733 . -1) (undo-tree-id84734 . -1) (undo-tree-id84735 . -1) (undo-tree-id84736 . -1) (undo-tree-id84737 . -1) (undo-tree-id84738 . -1) (undo-tree-id84739 . -1) (undo-tree-id84740 . -1) (undo-tree-id84741 . -1) (undo-tree-id84742 . -1) (undo-tree-id84743 . -1) (undo-tree-id84744 . -1) (undo-tree-id84745 . -1) (undo-tree-id84746 . -1) (undo-tree-id84747 . -1) (undo-tree-id84748 . -1) (undo-tree-id84749 . -1) (undo-tree-id84750 . -1) (undo-tree-id84751 . -1) (undo-tree-id84752 . -1) (undo-tree-id84753 . -1) (undo-tree-id84754 . -1) (undo-tree-id84755 . -1) (undo-tree-id84756 . -1) (undo-tree-id84757 . -1) (undo-tree-id84758 . -1) (undo-tree-id84759 . -1) (undo-tree-id84760 . -1) (undo-tree-id84761 . -1) (undo-tree-id84762 . -1) (undo-tree-id84763 . -1) (undo-tree-id84764 . -1) (undo-tree-id84765 . -1) (undo-tree-id84766 . -1) (undo-tree-id84767 . -1) (undo-tree-id84768 . -1) (undo-tree-id84769 . -1) (undo-tree-id84770 . -1) (undo-tree-id84771 . -1) (undo-tree-id84772 . -1) (undo-tree-id84773 . -1) (undo-tree-id84774 . -1) (undo-tree-id84775 . -1) (undo-tree-id84776 . -1) (undo-tree-id84777 . -1) (undo-tree-id84778 . -1) (undo-tree-id84779 . -1) (undo-tree-id84780 . -1) (undo-tree-id84781 . -1) (undo-tree-id84782 . -1) (undo-tree-id84783 . -1) (undo-tree-id84784 . -1) (undo-tree-id84785 . -1) (undo-tree-id84786 . -1) (undo-tree-id84787 . -1) (undo-tree-id84788 . -1) (undo-tree-id84789 . -1) (undo-tree-id84790 . -1) (undo-tree-id84791 . -1) (undo-tree-id84792 . -1) (undo-tree-id84793 . -1) (undo-tree-id84794 . -1) (undo-tree-id84795 . -1) (undo-tree-id84796 . -1) (undo-tree-id84797 . -1) (undo-tree-id84798 . -1) (undo-tree-id84799 . -1) (undo-tree-id84800 . -1) (undo-tree-id84801 . -1) (undo-tree-id84802 . -1) (undo-tree-id84803 . -1) (undo-tree-id84804 . -1) (undo-tree-id84805 . -1) (undo-tree-id84806 . -1) (undo-tree-id84807 . -1) (undo-tree-id84808 . -1) (undo-tree-id84809 . -1) (undo-tree-id84810 . -1) (undo-tree-id84811 . -1) (undo-tree-id84812 . -1) (undo-tree-id84813 . -1) (undo-tree-id84814 . -1) (undo-tree-id84815 . -1) (undo-tree-id84816 . -1) (undo-tree-id84817 . -1) (undo-tree-id84818 . -1) (undo-tree-id84819 . -1) (undo-tree-id84820 . -1) (undo-tree-id84821 . -1) (undo-tree-id84822 . -1) (undo-tree-id84823 . -1) (undo-tree-id84824 . -1) (undo-tree-id84825 . -1) (undo-tree-id84826 . -1) (undo-tree-id84827 . -1) (undo-tree-id84828 . -1) (undo-tree-id84829 . -1) (undo-tree-id84830 . -1) (undo-tree-id84831 . -1) (undo-tree-id84832 . -1) (undo-tree-id84833 . -1) (undo-tree-id84834 . -1) (undo-tree-id84835 . -1) (undo-tree-id84836 . -1) (undo-tree-id84837 . -1) (undo-tree-id84838 . -1) (undo-tree-id84839 . -1) (undo-tree-id84840 . -1) (undo-tree-id84841 . -1) (undo-tree-id84842 . -1) (undo-tree-id84843 . -1) (undo-tree-id84844 . -1) (undo-tree-id84845 . -1) (undo-tree-id84846 . -1) (undo-tree-id84847 . -1) (undo-tree-id84848 . -1) (undo-tree-id84849 . -1) (undo-tree-id84850 . -1) (undo-tree-id84851 . -1) (undo-tree-id84852 . -1) (undo-tree-id84853 . -1) (undo-tree-id84854 . -1) (undo-tree-id84855 . -1) (undo-tree-id84856 . -1) (undo-tree-id84857 . -1) (undo-tree-id84858 . -1) (undo-tree-id84859 . -1) (undo-tree-id84860 . -1) (undo-tree-id84861 . -1) (undo-tree-id84862 . -1) (undo-tree-id84863 . -1) (undo-tree-id84864 . -1) (undo-tree-id84865 . -1) (undo-tree-id84866 . -1) (undo-tree-id84867 . -1) (undo-tree-id84868 . -1) (undo-tree-id84869 . -1) (undo-tree-id84870 . -1) (undo-tree-id84871 . -1) (undo-tree-id84872 . -1) (undo-tree-id84873 . -1) (undo-tree-id84874 . -6) (undo-tree-id84875 . -6) (undo-tree-id84876 . -6) (undo-tree-id84877 . -6) (undo-tree-id84878 . -6) (undo-tree-id84879 . -6) (undo-tree-id84880 . -5) (undo-tree-id84881 . -5) (undo-tree-id84882 . -5) (undo-tree-id84883 . -5) (undo-tree-id84884 . -5) (undo-tree-id84885 . -5) (undo-tree-id84886 . -4) (undo-tree-id84887 . -4) (undo-tree-id84888 . -4) (undo-tree-id84889 . -4) (undo-tree-id84890 . -4) (undo-tree-id84891 . -4) (undo-tree-id84892 . -3) (undo-tree-id84893 . -3) (undo-tree-id84894 . -3) (undo-tree-id84895 . -3) (undo-tree-id84896 . -3) (undo-tree-id84897 . -3) (undo-tree-id84898 . -2) (undo-tree-id84899 . -2) (undo-tree-id84900 . -2) (undo-tree-id84901 . -2) (undo-tree-id84902 . -2) (undo-tree-id84903 . -2) (undo-tree-id84904 . -1) (undo-tree-id84905 . -1) (undo-tree-id84906 . -1) (undo-tree-id84907 . -1) (undo-tree-id84908 . -1) (undo-tree-id84909 . -1) (undo-tree-id84910 . -1) (undo-tree-id84911 . -1) (undo-tree-id84912 . -1) (undo-tree-id84913 . -1) (undo-tree-id84914 . -1) (undo-tree-id84915 . -1) (undo-tree-id84916 . -1) (undo-tree-id84917 . -1) (undo-tree-id84918 . -1) (undo-tree-id84919 . -1) (undo-tree-id84920 . -1) (undo-tree-id84921 . -1) (undo-tree-id84922 . -1) (undo-tree-id84923 . -1) (undo-tree-id84924 . -1) (undo-tree-id84925 . -1) (undo-tree-id84926 . -1) (undo-tree-id84927 . -1) (undo-tree-id84928 . -1) (undo-tree-id84929 . -1) (undo-tree-id84930 . -1) (undo-tree-id84931 . -1) (undo-tree-id84932 . -1) (undo-tree-id84933 . -1) (undo-tree-id84934 . -1) (undo-tree-id84935 . -1) (undo-tree-id84936 . -1) (undo-tree-id84937 . -1) (undo-tree-id84938 . -1) (undo-tree-id84939 . -1) (undo-tree-id84940 . -1) (undo-tree-id84941 . -1) (undo-tree-id84942 . -1) (undo-tree-id84943 . -1) (undo-tree-id84944 . -1) 16698 (#("But we already know that! Why don’t we tell the model to ignore
the padding tokens, so that it can focus on the data that actually matters?
It’s actually trivial: " 0 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 64 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 140 163 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 16698) (undo-tree-id84945 . -162) (undo-tree-id84946 . -162) (undo-tree-id84947 . -162) (undo-tree-id84948 . -140) (undo-tree-id84949 . -140) (undo-tree-id84950 . -140) (undo-tree-id84951 . -140) (undo-tree-id84952 . -140) (undo-tree-id84953 . -140) (undo-tree-id84954 . -131) (undo-tree-id84955 . -131) (undo-tree-id84956 . -131) (undo-tree-id84957 . -131) (undo-tree-id84958 . -131) (undo-tree-id84959 . -131) (undo-tree-id84960 . -131) (undo-tree-id84961 . -131) (undo-tree-id84962 . -131) (undo-tree-id84963 . -131) (undo-tree-id84964 . -131) (undo-tree-id84965 . -64) (undo-tree-id84966 . -64) (undo-tree-id84967 . -64) (undo-tree-id84968 . -64) (undo-tree-id84969 . -64) (undo-tree-id84970 . -64) (undo-tree-id84971 . -64) (undo-tree-id84972 . -64) (undo-tree-id84973 . -64) (undo-tree-id84974 . -64) (undo-tree-id84975 . -64) (undo-tree-id84976 . -57) (undo-tree-id84977 . -57) (undo-tree-id84978 . -57) (undo-tree-id84979 . -57) (undo-tree-id84980 . -57) (undo-tree-id84981 . -57) (undo-tree-id84982 . -57) (undo-tree-id84983 . -57) (undo-tree-id84984 . -57) (undo-tree-id84985 . -57) (undo-tree-id84986 . -57) (undo-tree-id84987 . -53) (undo-tree-id84988 . -53) (undo-tree-id84989 . -53) (undo-tree-id84990 . -53) (undo-tree-id84991 . -53) (undo-tree-id84992 . -53) (undo-tree-id84993 . -53) (undo-tree-id84994 . -53) (undo-tree-id84995 . -53) (undo-tree-id84996 . -53) (undo-tree-id84997 . -53) (undo-tree-id84998 . -163) (undo-tree-id84999 . -162) (undo-tree-id85000 . -2) (undo-tree-id85001 . -2) (undo-tree-id85002 . -2) (undo-tree-id85003 . -2) (undo-tree-id85004 . -2) (undo-tree-id85005 . -2) (undo-tree-id85006 . -2) (undo-tree-id85007 . -2) (undo-tree-id85008 . -2) (undo-tree-id85009 . -2) (undo-tree-id85010 . -2) (undo-tree-id85011 . -2) (undo-tree-id85012 . -2) (undo-tree-id85013 . -2) (undo-tree-id85014 . -2) (undo-tree-id85015 . -2) (undo-tree-id85016 . -2) (undo-tree-id85017 . -2) (undo-tree-id85018 . -2) (undo-tree-id85019 . -2) (undo-tree-id85020 . -2) (undo-tree-id85021 . -2) (undo-tree-id85022 . -2) (undo-tree-id85023 . -2) (undo-tree-id85024 . -2) (undo-tree-id85025 . -2) (undo-tree-id85026 . -5) (undo-tree-id85027 . -5) (undo-tree-id85028 . -5) (undo-tree-id85029 . -5) (undo-tree-id85030 . -5) (undo-tree-id85031 . -5) (undo-tree-id85032 . -13) (undo-tree-id85033 . -13) (undo-tree-id85034 . -13) (undo-tree-id85035 . -13) (undo-tree-id85036 . -13) (undo-tree-id85037 . -13) (undo-tree-id85038 . -18) (undo-tree-id85039 . -18) (undo-tree-id85040 . -18) (undo-tree-id85041 . -18) (undo-tree-id85042 . -18) (undo-tree-id85043 . -18) (undo-tree-id85044 . -23) (undo-tree-id85045 . -23) (undo-tree-id85046 . -23) (undo-tree-id85047 . -23) (undo-tree-id85048 . -23) (undo-tree-id85049 . -23) (undo-tree-id85050 . -24) (undo-tree-id85051 . -24) (undo-tree-id85052 . -24) (undo-tree-id85053 . -24) (undo-tree-id85054 . -24) (undo-tree-id85055 . -24) (undo-tree-id85056 . -28) (undo-tree-id85057 . -28) (undo-tree-id85058 . -28) (undo-tree-id85059 . -28) (undo-tree-id85060 . -28) (undo-tree-id85061 . -28) (undo-tree-id85062 . -32) (undo-tree-id85063 . -32) (undo-tree-id85064 . -32) (undo-tree-id85065 . -32) (undo-tree-id85066 . -32) (undo-tree-id85067 . -32) (undo-tree-id85068 . -33) (undo-tree-id85069 . -33) (undo-tree-id85070 . -33) (undo-tree-id85071 . -33) (undo-tree-id85072 . -33) (undo-tree-id85073 . -33) (undo-tree-id85074 . -34) (undo-tree-id85075 . -34) (undo-tree-id85076 . -34) (undo-tree-id85077 . -34) (undo-tree-id85078 . -34) (undo-tree-id85079 . -34) (undo-tree-id85080 . -34) (undo-tree-id85081 . -34) (undo-tree-id85082 . -34) (undo-tree-id85083 . -34) (undo-tree-id85084 . -34) (undo-tree-id85085 . -34) (undo-tree-id85086 . -34) (undo-tree-id85087 . -34) (undo-tree-id85088 . -34) (undo-tree-id85089 . -34) (undo-tree-id85090 . -37) (undo-tree-id85091 . -37) (undo-tree-id85092 . -37) (undo-tree-id85093 . -37) (undo-tree-id85094 . -37) (undo-tree-id85095 . -37) (undo-tree-id85096 . -37) (undo-tree-id85097 . -37) (undo-tree-id85098 . -37) (undo-tree-id85099 . -37) (undo-tree-id85100 . -37) (undo-tree-id85101 . -37) (undo-tree-id85102 . -37) (undo-tree-id85103 . -37) (undo-tree-id85104 . -37) (undo-tree-id85105 . -37) (undo-tree-id85106 . -42) (undo-tree-id85107 . -42) (undo-tree-id85108 . -42) (undo-tree-id85109 . -42) (undo-tree-id85110 . -42) (undo-tree-id85111 . -42) (undo-tree-id85112 . -42) (undo-tree-id85113 . -42) (undo-tree-id85114 . -42) (undo-tree-id85115 . -42) (undo-tree-id85116 . -42) (undo-tree-id85117 . -42) (undo-tree-id85118 . -42) (undo-tree-id85119 . -42) (undo-tree-id85120 . -42) (undo-tree-id85121 . -42) (undo-tree-id85122 . -46) (undo-tree-id85123 . -46) (undo-tree-id85124 . -46) (undo-tree-id85125 . -46) (undo-tree-id85126 . -46) (undo-tree-id85127 . -46) (undo-tree-id85128 . -46) (undo-tree-id85129 . -46) (undo-tree-id85130 . -46) (undo-tree-id85131 . -46) (undo-tree-id85132 . -46) (undo-tree-id85133 . -46) (undo-tree-id85134 . -46) (undo-tree-id85135 . -46) (undo-tree-id85136 . -46) (undo-tree-id85137 . -46) (undo-tree-id85138 . -52) (undo-tree-id85139 . -52) (undo-tree-id85140 . -52) (undo-tree-id85141 . -52) (undo-tree-id85142 . -52) (undo-tree-id85143 . -52) (undo-tree-id85144 . -52) (undo-tree-id85145 . -52) (undo-tree-id85146 . -52) (undo-tree-id85147 . -52) (undo-tree-id85148 . -52) (undo-tree-id85149 . -52) (undo-tree-id85150 . -52) (undo-tree-id85151 . -52) (undo-tree-id85152 . -52) (undo-tree-id85153 . -52) (undo-tree-id85154 . -55) (undo-tree-id85155 . -55) (undo-tree-id85156 . -55) (undo-tree-id85157 . -55) (undo-tree-id85158 . -55) (undo-tree-id85159 . -55) (undo-tree-id85160 . -55) (undo-tree-id85161 . -55) (undo-tree-id85162 . -55) (undo-tree-id85163 . -55) (undo-tree-id85164 . -55) (undo-tree-id85165 . -55) (undo-tree-id85166 . -55) (undo-tree-id85167 . -55) (undo-tree-id85168 . -55) (undo-tree-id85169 . -55) (undo-tree-id85170 . -62) (undo-tree-id85171 . -62) (undo-tree-id85172 . -62) (undo-tree-id85173 . -62) (undo-tree-id85174 . -62) (undo-tree-id85175 . -62) (undo-tree-id85176 . -62) (undo-tree-id85177 . -62) (undo-tree-id85178 . -62) (undo-tree-id85179 . -62) (undo-tree-id85180 . -62) (undo-tree-id85181 . -62) (undo-tree-id85182 . -62) (undo-tree-id85183 . -62) (undo-tree-id85184 . -62) (undo-tree-id85185 . -62) (undo-tree-id85186 . -62) (undo-tree-id85187 . -62) (undo-tree-id85188 . -62) (undo-tree-id85189 . -62) (undo-tree-id85190 . -62) (undo-tree-id85191 . -66) (undo-tree-id85192 . -66) (undo-tree-id85193 . -66) (undo-tree-id85194 . -66) (undo-tree-id85195 . -66) (undo-tree-id85196 . -66) (undo-tree-id85197 . -74) (undo-tree-id85198 . -74) (undo-tree-id85199 . -74) (undo-tree-id85200 . -74) (undo-tree-id85201 . -74) (undo-tree-id85202 . -74) (undo-tree-id85203 . -81) (undo-tree-id85204 . -81) (undo-tree-id85205 . -81) (undo-tree-id85206 . -81) (undo-tree-id85207 . -81) (undo-tree-id85208 . -81) (undo-tree-id85209 . -82) (undo-tree-id85210 . -82) (undo-tree-id85211 . -82) (undo-tree-id85212 . -82) (undo-tree-id85213 . -82) (undo-tree-id85214 . -82) (undo-tree-id85215 . -85) (undo-tree-id85216 . -85) (undo-tree-id85217 . -85) (undo-tree-id85218 . -85) (undo-tree-id85219 . -85) (undo-tree-id85220 . -85) (undo-tree-id85221 . -90) (undo-tree-id85222 . -90) (undo-tree-id85223 . -90) (undo-tree-id85224 . -90) (undo-tree-id85225 . -90) (undo-tree-id85226 . -90) (undo-tree-id85227 . -93) (undo-tree-id85228 . -93) (undo-tree-id85229 . -93) (undo-tree-id85230 . -93) (undo-tree-id85231 . -93) (undo-tree-id85232 . -93) (undo-tree-id85233 . -97) (undo-tree-id85234 . -97) (undo-tree-id85235 . -97) (undo-tree-id85236 . -97) (undo-tree-id85237 . -97) (undo-tree-id85238 . -97) (undo-tree-id85239 . -103) (undo-tree-id85240 . -103) (undo-tree-id85241 . -103) (undo-tree-id85242 . -103) (undo-tree-id85243 . -103) (undo-tree-id85244 . -103) (undo-tree-id85245 . -106) (undo-tree-id85246 . -106) (undo-tree-id85247 . -106) (undo-tree-id85248 . -106) (undo-tree-id85249 . -106) (undo-tree-id85250 . -106) (undo-tree-id85251 . -110) (undo-tree-id85252 . -110) (undo-tree-id85253 . -110) (undo-tree-id85254 . -110) (undo-tree-id85255 . -110) (undo-tree-id85256 . -110) (undo-tree-id85257 . -110) (undo-tree-id85258 . -110) (undo-tree-id85259 . -110) (undo-tree-id85260 . -110) (undo-tree-id85261 . -110) (undo-tree-id85262 . -110) (undo-tree-id85263 . -110) (undo-tree-id85264 . -110) (undo-tree-id85265 . -110) (undo-tree-id85266 . -110) (undo-tree-id85267 . -110) (undo-tree-id85268 . -110) (undo-tree-id85269 . -110) (undo-tree-id85270 . -110) (undo-tree-id85271 . -110) (undo-tree-id85272 . -110) (undo-tree-id85273 . -110) (undo-tree-id85274 . -110) (undo-tree-id85275 . -110) (undo-tree-id85276 . -110) (undo-tree-id85277 . -115) (undo-tree-id85278 . -115) (undo-tree-id85279 . -115) (undo-tree-id85280 . -115) (undo-tree-id85281 . -115) (undo-tree-id85282 . -115) (undo-tree-id85283 . -115) (undo-tree-id85284 . -115) (undo-tree-id85285 . -115) (undo-tree-id85286 . -115) (undo-tree-id85287 . -115) (undo-tree-id85288 . -115) (undo-tree-id85289 . -115) (undo-tree-id85290 . -115) (undo-tree-id85291 . -115) (undo-tree-id85292 . -115) (undo-tree-id85293 . -115) (undo-tree-id85294 . -115) (undo-tree-id85295 . -115) (undo-tree-id85296 . -115) (undo-tree-id85297 . -115) (undo-tree-id85298 . -120) (undo-tree-id85299 . -120) (undo-tree-id85300 . -120) (undo-tree-id85301 . -120) (undo-tree-id85302 . -120) (undo-tree-id85303 . -120) (undo-tree-id85304 . -129) (undo-tree-id85305 . -129) (undo-tree-id85306 . -129) (undo-tree-id85307 . -129) (undo-tree-id85308 . -129) (undo-tree-id85309 . -129) (undo-tree-id85310 . -137) (undo-tree-id85311 . -137) (undo-tree-id85312 . -137) (undo-tree-id85313 . -137) (undo-tree-id85314 . -137) (undo-tree-id85315 . -137) (undo-tree-id85316 . -138) (undo-tree-id85317 . -138) (undo-tree-id85318 . -138) (undo-tree-id85319 . -138) (undo-tree-id85320 . -138) (undo-tree-id85321 . -138) (undo-tree-id85322 . -141) (undo-tree-id85323 . -141) (undo-tree-id85324 . -141) (undo-tree-id85325 . -141) (undo-tree-id85326 . -141) (undo-tree-id85327 . -141) (undo-tree-id85328 . -142) (undo-tree-id85329 . -142) (undo-tree-id85330 . -142) (undo-tree-id85331 . -142) (undo-tree-id85332 . -142) (undo-tree-id85333 . -142) (undo-tree-id85334 . -143) (undo-tree-id85335 . -143) (undo-tree-id85336 . -143) (undo-tree-id85337 . -143) (undo-tree-id85338 . -143) (undo-tree-id85339 . -143) (undo-tree-id85340 . -152) (undo-tree-id85341 . -152) (undo-tree-id85342 . -152) (undo-tree-id85343 . -152) (undo-tree-id85344 . -152) (undo-tree-id85345 . -152) (undo-tree-id85346 . -160) (undo-tree-id85347 . -160) (undo-tree-id85348 . -160) (undo-tree-id85349 . -160) (undo-tree-id85350 . -160) (undo-tree-id85351 . -160) (undo-tree-id85352 . -161) (undo-tree-id85353 . -161) (undo-tree-id85354 . -161) (undo-tree-id85355 . -161) (undo-tree-id85356 . -161) (undo-tree-id85357 . -161) (undo-tree-id85358 . -163) (undo-tree-id85359 . -163) (undo-tree-id85360 . -163) (undo-tree-id85361 . -163) (undo-tree-id85362 . -163) (undo-tree-id85363 . -163) (undo-tree-id85364 . -162) (undo-tree-id85365 . -162) (undo-tree-id85366 . -162) (undo-tree-id85367 . -162) (undo-tree-id85368 . -162) (undo-tree-id85369 . -162) (undo-tree-id85370 . -162) (undo-tree-id85371 . -163) (undo-tree-id85372 . -163) (undo-tree-id85373 . -163) 16860) nil (25767 36467 192794 424000) 0 nil])
([nil nil ((16743 . 16744) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16743) (undo-tree-id83683 . 1) (undo-tree-id83684 . -1) (undo-tree-id83685 . -1) (undo-tree-id83686 . -1) (undo-tree-id83687 . -1) (undo-tree-id83688 . -1) (undo-tree-id83689 . -1) (undo-tree-id83690 . -1) 16729) nil (25767 36467 193530 461000) 0 nil])
([nil nil ((16698 . 16817) (#("- This means that padding tokens (whose ID is 0)8 will be
- simply add mask_zero=True when creating the Embedding layer" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 57 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 57 58 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 58 59 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 59 60 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 60 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 76 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 80 103 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 103 104 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 104 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 16698) (undo-tree-id85537 . -119) (undo-tree-id85538 . -119) (undo-tree-id85539 . 15) (undo-tree-id85540 . 59) (undo-tree-id85541 . -119) (undo-tree-id85542 . -103) (undo-tree-id85543 . -103) (undo-tree-id85544 . -103) (undo-tree-id85545 . -103) (undo-tree-id85546 . -103) (undo-tree-id85547 . -103) (undo-tree-id85548 . -119) (undo-tree-id85549 . -119) (undo-tree-id85550 . -119) (undo-tree-id85551 . -119) (undo-tree-id85552 . -119) (undo-tree-id85553 . -119) (undo-tree-id85554 . -119) (undo-tree-id85555 . -119) (undo-tree-id85556 . -119) (undo-tree-id85557 . -119) (undo-tree-id85558 . -119) (undo-tree-id85559 . -119) (undo-tree-id85560 . -119) (undo-tree-id85561 . -119) (undo-tree-id85562 . -119) (undo-tree-id85563 . -119) (undo-tree-id85564 . -119) (undo-tree-id85565 . -119) (undo-tree-id85566 . -119) (undo-tree-id85567 . -119) (undo-tree-id85568 . -119) (undo-tree-id85569 . -119) (undo-tree-id85570 . -119) (undo-tree-id85571 . -119) (undo-tree-id85572 . -119) (undo-tree-id85573 . -119) (undo-tree-id85574 . -119) (undo-tree-id85575 . -119) (undo-tree-id85576 . -119) (undo-tree-id85577 . -119) (undo-tree-id85578 . -119) (undo-tree-id85579 . -119) (undo-tree-id85580 . -119) (undo-tree-id85581 . -119) (undo-tree-id85582 . -119) (undo-tree-id85583 . -119) (undo-tree-id85584 . -119) (undo-tree-id85585 . -119) (undo-tree-id85586 . -119) (undo-tree-id85587 . -119) (undo-tree-id85588 . -119) (undo-tree-id85589 . -119) (undo-tree-id85590 . -58) (16698 . 16756) (#(" This means that padding tokens (whose ID is 0)8 will be" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16759) (undo-tree-id85591 . -56) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16759) (undo-tree-id85592 . -1) (undo-tree-id85593 . -1) (undo-tree-id85594 . -1)) nil (25767 36480 670723 569000) 0 nil] [nil nil ((16816 . 16817) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16816) (undo-tree-id83676 . -1) (undo-tree-id83677 . -1) (undo-tree-id83678 . -1) (undo-tree-id83679 . -1) (undo-tree-id83680 . -1) (undo-tree-id83681 . -1) (undo-tree-id83682 . -1) 16759) ((16816 . 16817) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 16816)) (25767 36467 190755 507000) 0 nil])
([nil nil ((#("8" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16808) (undo-tree-id85535 . -1) (undo-tree-id85536 . -1)) nil (25767 36480 670528 450000) 0 nil])
nil
([nil nil ((16816 . 16817) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16816) (undo-tree-id85527 . 1) (undo-tree-id85528 . -1) (undo-tree-id85529 . -1) (undo-tree-id85530 . -1) (undo-tree-id85531 . -1) (undo-tree-id85532 . -1) (undo-tree-id85533 . -1) (undo-tree-id85534 . -1) 16808) nil (25767 36480 670522 761000) 0 nil])
([nil nil ((#("That’s all!" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16851) (undo-tree-id85995 . -10) (undo-tree-id85996 . -10) (undo-tree-id85997 . -10) (undo-tree-id85998 . -11) (undo-tree-id85999 . -10) (undo-tree-id86000 . -3) (undo-tree-id86001 . -3) (undo-tree-id86002 . -3) (undo-tree-id86003 . -3) (undo-tree-id86004 . -3) (undo-tree-id86005 . -3) (undo-tree-id86006 . -3) (undo-tree-id86007 . -3) (undo-tree-id86008 . -3) (undo-tree-id86009 . -3) (undo-tree-id86010 . -3) (undo-tree-id86011 . -3) (undo-tree-id86012 . -3) (undo-tree-id86013 . -3) (undo-tree-id86014 . -3) (undo-tree-id86015 . -3) (undo-tree-id86016 . -4) (undo-tree-id86017 . -4) (undo-tree-id86018 . -4) (undo-tree-id86019 . -4) (undo-tree-id86020 . -4) (undo-tree-id86021 . -4) (undo-tree-id86022 . -4) (undo-tree-id86023 . -4) (undo-tree-id86024 . -4) (undo-tree-id86025 . -4) (undo-tree-id86026 . -4) (undo-tree-id86027 . -4) (undo-tree-id86028 . -4) (undo-tree-id86029 . -4) (undo-tree-id86030 . -4) (undo-tree-id86031 . -4) (undo-tree-id86032 . -5) (undo-tree-id86033 . -5) (undo-tree-id86034 . -5) (undo-tree-id86035 . -5) (undo-tree-id86036 . -5) (undo-tree-id86037 . -5) (undo-tree-id86038 . -5) (undo-tree-id86039 . -5) (undo-tree-id86040 . -5) (undo-tree-id86041 . -5) (undo-tree-id86042 . -5) (undo-tree-id86043 . -5) (undo-tree-id86044 . -5) (undo-tree-id86045 . -5) (undo-tree-id86046 . -5) (undo-tree-id86047 . -5) (undo-tree-id86048 . -9) (undo-tree-id86049 . -9) (undo-tree-id86050 . -9) (undo-tree-id86051 . -9) (undo-tree-id86052 . -9) (undo-tree-id86053 . -9) (undo-tree-id86054 . -9) (undo-tree-id86055 . -9) (undo-tree-id86056 . -9) (undo-tree-id86057 . -9) (undo-tree-id86058 . -9) (undo-tree-id86059 . -9) (undo-tree-id86060 . -9) (undo-tree-id86061 . -9) (undo-tree-id86062 . -9) (undo-tree-id86063 . -9) (undo-tree-id86064 . -10) (undo-tree-id86065 . -10) (undo-tree-id86066 . -10) (undo-tree-id86067 . -10) (undo-tree-id86068 . -10) (undo-tree-id86069 . -10) (undo-tree-id86070 . -10) (undo-tree-id86071 . -10) (undo-tree-id86072 . -10) (undo-tree-id86073 . -10) (undo-tree-id86074 . -10) (undo-tree-id86075 . -10) (undo-tree-id86076 . -10) (undo-tree-id86077 . -10) (undo-tree-id86078 . -10) (undo-tree-id86079 . -10) (undo-tree-id86080 . -10) (undo-tree-id86081 . -11) 16861 (t 25767 36480 810925 395000)) nil (25767 36489 254097 245000) 0 nil])
([nil nil ((16760 . 16853) (#("- 
- This means that padding tokens (whose ID is 0) will be ignored by all downstream layers." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 4 5 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 5 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 59 60 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 60 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 16760) (undo-tree-id85595 . -93) (undo-tree-id85596 . -93) (undo-tree-id85597 . -93) (undo-tree-id85598 . -93) (undo-tree-id85599 . 88) (undo-tree-id85600 . -59) (undo-tree-id85601 . -59) (undo-tree-id85602 . -59) (undo-tree-id85603 . -59) (undo-tree-id85604 . -59) (undo-tree-id85605 . -59) (undo-tree-id85606 . -59) (undo-tree-id85607 . -93) (undo-tree-id85608 . -59) (undo-tree-id85609 . -59) (undo-tree-id85610 . -59) (undo-tree-id85611 . -59) (undo-tree-id85612 . -59) (undo-tree-id85613 . -59) (undo-tree-id85614 . -59) (undo-tree-id85615 . -59) (undo-tree-id85616 . -59) (undo-tree-id85617 . -59) (undo-tree-id85618 . -59) (undo-tree-id85619 . -59) (undo-tree-id85620 . -59) (undo-tree-id85621 . -59) (undo-tree-id85622 . -59) (undo-tree-id85623 . -59) (undo-tree-id85624 . -59) (undo-tree-id85625 . -59) (undo-tree-id85626 . -59) (undo-tree-id85627 . -59) (undo-tree-id85628 . -59) (undo-tree-id85629 . -59) (undo-tree-id85630 . -59) (undo-tree-id85631 . -59) (undo-tree-id85632 . -59) (undo-tree-id85633 . -59) (undo-tree-id85634 . -59) (undo-tree-id85635 . -59) (undo-tree-id85636 . -59) (undo-tree-id85637 . -60) (undo-tree-id85638 . -60) (undo-tree-id85639 . -60) (undo-tree-id85640 . -60) (undo-tree-id85641 . -60) (undo-tree-id85642 . -60) (undo-tree-id85643 . -60) (undo-tree-id85644 . -60) (undo-tree-id85645 . -60) (undo-tree-id85646 . -60) (undo-tree-id85647 . -60) (undo-tree-id85648 . -68) (undo-tree-id85649 . -68) (undo-tree-id85650 . -68) (undo-tree-id85651 . -68) (undo-tree-id85652 . -68) (undo-tree-id85653 . -68) (undo-tree-id85654 . -68) (undo-tree-id85655 . -68) (undo-tree-id85656 . -68) (undo-tree-id85657 . -68) (undo-tree-id85658 . -68) (undo-tree-id85659 . -71) (undo-tree-id85660 . -71) (undo-tree-id85661 . -71) (undo-tree-id85662 . -71) (undo-tree-id85663 . -71) (undo-tree-id85664 . -71) (undo-tree-id85665 . -71) (undo-tree-id85666 . -71) (undo-tree-id85667 . -71) (undo-tree-id85668 . -71) (undo-tree-id85669 . -71) (undo-tree-id85670 . -75) (undo-tree-id85671 . -75) (undo-tree-id85672 . -75) (undo-tree-id85673 . -75) (undo-tree-id85674 . -75) (undo-tree-id85675 . -75) (undo-tree-id85676 . -75) (undo-tree-id85677 . -75) (undo-tree-id85678 . -75) (undo-tree-id85679 . -75) (undo-tree-id85680 . -75) (undo-tree-id85681 . -86) (undo-tree-id85682 . -86) (undo-tree-id85683 . -86) (undo-tree-id85684 . -86) (undo-tree-id85685 . -86) (undo-tree-id85686 . -86) (undo-tree-id85687 . -86) (undo-tree-id85688 . -86) (undo-tree-id85689 . -86) (undo-tree-id85690 . -86) (undo-tree-id85691 . -86) (undo-tree-id85692 . -92) (undo-tree-id85693 . -92) (undo-tree-id85694 . -92) (undo-tree-id85695 . -92) (undo-tree-id85696 . -92) (undo-tree-id85697 . -92) (undo-tree-id85698 . -92) (undo-tree-id85699 . -92) (undo-tree-id85700 . -92) (undo-tree-id85701 . -92) (undo-tree-id85702 . -92) (undo-tree-id85703 . -92) (undo-tree-id85704 . -92) (undo-tree-id85705 . -92) (undo-tree-id85706 . -92) (undo-tree-id85707 . -92) (undo-tree-id85708 . -93) (undo-tree-id85709 . -93) (undo-tree-id85710 . -93) (undo-tree-id85711 . -93) (undo-tree-id85712 . -93) (undo-tree-id85713 . -93) (undo-tree-id85714 . -93) (undo-tree-id85715 . -93) (undo-tree-id85716 . -93) (undo-tree-id85717 . -93) (undo-tree-id85718 . -93) (undo-tree-id85719 . -93) (undo-tree-id85720 . -93) (undo-tree-id85721 . -93) (undo-tree-id85722 . -93) (undo-tree-id85723 . -93) (undo-tree-id85724 . -93) (undo-tree-id85725 . -93) (undo-tree-id85726 . -93) (undo-tree-id85727 . -93) (undo-tree-id85728 . -93) (undo-tree-id85729 . -93) (undo-tree-id85730 . -93) (undo-tree-id85731 . -93) (undo-tree-id85732 . -93) (undo-tree-id85733 . -93) (undo-tree-id85734 . -93) (undo-tree-id85735 . -93) (undo-tree-id85736 . -93) (undo-tree-id85737 . -93) (undo-tree-id85738 . -93) (undo-tree-id85739 . -93) (undo-tree-id85740 . -93) (undo-tree-id85741 . -93) (undo-tree-id85742 . -93) (undo-tree-id85743 . -93) (undo-tree-id85744 . -93) (undo-tree-id85745 . -93) (undo-tree-id85746 . -93) (undo-tree-id85747 . -93) (undo-tree-id85748 . -93) (undo-tree-id85749 . -93) (undo-tree-id85750 . -93) (undo-tree-id85751 . -93) (undo-tree-id85752 . -93) (undo-tree-id85753 . -93) (undo-tree-id85754 . -93) (undo-tree-id85755 . -93) (undo-tree-id85756 . -93) (undo-tree-id85757 . -93) (undo-tree-id85758 . -93) (undo-tree-id85759 . -93) (undo-tree-id85760 . -93) (undo-tree-id85761 . -93) (undo-tree-id85762 . -93) (undo-tree-id85763 . -93) (undo-tree-id85764 . -93) (undo-tree-id85765 . -93) (undo-tree-id85766 . -93) (undo-tree-id85767 . -93) (undo-tree-id85768 . -93) (undo-tree-id85769 . -93) (undo-tree-id85770 . -93) (undo-tree-id85771 . -93) (undo-tree-id85772 . -93) (undo-tree-id85773 . -93) (undo-tree-id85774 . -93) (undo-tree-id85775 . -93) (undo-tree-id85776 . -93) (undo-tree-id85777 . -93) (undo-tree-id85778 . -93) (undo-tree-id85779 . -93) (undo-tree-id85780 . -93) (undo-tree-id85781 . -93) (undo-tree-id85782 . -93) (undo-tree-id85783 . -93) (undo-tree-id85784 . -93) (undo-tree-id85785 . -93) (undo-tree-id85786 . -93) (undo-tree-id85787 . -93) (undo-tree-id85788 . -93) (undo-tree-id85789 . -93) (undo-tree-id85790 . -93) (undo-tree-id85791 . -93) (undo-tree-id85792 . -93) (undo-tree-id85793 . -93) (undo-tree-id85794 . -93) (undo-tree-id85795 . -93) (undo-tree-id85796 . -93) (undo-tree-id85797 . -93) (undo-tree-id85798 . -93) (undo-tree-id85799 . -93) (undo-tree-id85800 . -93) (undo-tree-id85801 . -93) (undo-tree-id85802 . -93) (undo-tree-id85803 . -93) (undo-tree-id85804 . -93) (undo-tree-id85805 . -93) (undo-tree-id85806 . -93) (undo-tree-id85807 . -93) (undo-tree-id85808 . -93) (undo-tree-id85809 . -93) (undo-tree-id85810 . -93) (undo-tree-id85811 . -93) (undo-tree-id85812 . -93) (undo-tree-id85813 . -93) (undo-tree-id85814 . -93) (undo-tree-id85815 . -93) (undo-tree-id85816 . -93) (undo-tree-id85817 . -93) (undo-tree-id85818 . -93) (undo-tree-id85819 . -93) (undo-tree-id85820 . -93) (undo-tree-id85821 . -93) (undo-tree-id85822 . -93) (undo-tree-id85823 . -93) (undo-tree-id85824 . -93) (undo-tree-id85825 . -93) (undo-tree-id85826 . -93) (undo-tree-id85827 . -93) (undo-tree-id85828 . -93) (undo-tree-id85829 . -93) (undo-tree-id85830 . -93) (undo-tree-id85831 . -93) (undo-tree-id85832 . -93) (undo-tree-id85833 . -93) (undo-tree-id85834 . -93) (undo-tree-id85835 . -93) (undo-tree-id85836 . -93) (undo-tree-id85837 . -93) (undo-tree-id85838 . -93) (undo-tree-id85839 . -93) (undo-tree-id85840 . -93) (undo-tree-id85841 . -93) (undo-tree-id85842 . -93) (undo-tree-id85843 . -93) (undo-tree-id85844 . -93) (undo-tree-id85845 . -93) (undo-tree-id85846 . -93) (undo-tree-id85847 . -93) (undo-tree-id85848 . -93) (undo-tree-id85849 . -93) (undo-tree-id85850 . -93) (undo-tree-id85851 . -93) (undo-tree-id85852 . -93) (undo-tree-id85853 . -93) (undo-tree-id85854 . -93) (undo-tree-id85855 . -93) (undo-tree-id85856 . -93) (undo-tree-id85857 . -93) (undo-tree-id85858 . -93) (undo-tree-id85859 . -93) (undo-tree-id85860 . -93) (undo-tree-id85861 . -93) (undo-tree-id85862 . -93) (undo-tree-id85863 . -93) (undo-tree-id85864 . -93) (undo-tree-id85865 . -93) (undo-tree-id85866 . -93) (undo-tree-id85867 . -93) (undo-tree-id85868 . -93) (undo-tree-id85869 . -93) (undo-tree-id85870 . -3) (16760 . 16763) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 16850) (undo-tree-id85871 . -1) (undo-tree-id85872 . -1) (undo-tree-id85873 . -1) (undo-tree-id85874 . -1) (undo-tree-id85875 . -1) (undo-tree-id85876 . -1) (undo-tree-id85877 . -1) (undo-tree-id85878 . -1) (undo-tree-id85879 . -1) (undo-tree-id85880 . -1) (undo-tree-id85881 . -1) (undo-tree-id85882 . -1) (undo-tree-id85883 . -1) (undo-tree-id85884 . -1) (undo-tree-id85885 . -1) (undo-tree-id85886 . -1) (undo-tree-id85887 . -1) (undo-tree-id85888 . -1) (undo-tree-id85889 . -1) (undo-tree-id85890 . -1) (undo-tree-id85891 . -1) (undo-tree-id85892 . -1) (undo-tree-id85893 . -1) (undo-tree-id85894 . -1) (undo-tree-id85895 . -1) (undo-tree-id85896 . -1) (undo-tree-id85897 . -1) (undo-tree-id85898 . -1) (undo-tree-id85899 . -1) (undo-tree-id85900 . -1) (undo-tree-id85901 . -1) (undo-tree-id85902 . -1) (undo-tree-id85903 . -1) (undo-tree-id85904 . -1) (undo-tree-id85905 . -1) (undo-tree-id85906 . -1) (undo-tree-id85907 . -1) (undo-tree-id85908 . -1) (undo-tree-id85909 . -1) (undo-tree-id85910 . -1) (undo-tree-id85911 . -1) (undo-tree-id85912 . -1) (undo-tree-id85913 . -1) (undo-tree-id85914 . -1) (undo-tree-id85915 . -1) (undo-tree-id85916 . -1) (undo-tree-id85917 . -1) (undo-tree-id85918 . -1) (undo-tree-id85919 . -1) (undo-tree-id85920 . -1) (undo-tree-id85921 . -1) (undo-tree-id85922 . -1) (undo-tree-id85923 . -1) (undo-tree-id85924 . -1) (undo-tree-id85925 . -1) (undo-tree-id85926 . -1) (undo-tree-id85927 . -1) (undo-tree-id85928 . -1) (undo-tree-id85929 . -1) (undo-tree-id85930 . -1) (undo-tree-id85931 . -1) (undo-tree-id85932 . -1) (undo-tree-id85933 . -1) (undo-tree-id85934 . -1) (undo-tree-id85935 . -1) (undo-tree-id85936 . -1) (undo-tree-id85937 . -1) (undo-tree-id85938 . -1) (undo-tree-id85939 . -1) (undo-tree-id85940 . -1) (undo-tree-id85941 . -1) (undo-tree-id85942 . -1) (undo-tree-id85943 . -1) (undo-tree-id85944 . -1) (undo-tree-id85945 . -1) (undo-tree-id85946 . -1) (undo-tree-id85947 . -1) (undo-tree-id85948 . -1) (undo-tree-id85949 . -1) (undo-tree-id85950 . -1) (undo-tree-id85951 . -1) (undo-tree-id85952 . -1) (undo-tree-id85953 . -1) (undo-tree-id85954 . -1) (undo-tree-id85955 . -1) (undo-tree-id85956 . -1) (undo-tree-id85957 . -1) (undo-tree-id85958 . -1) (undo-tree-id85959 . -1) (undo-tree-id85960 . -1) (undo-tree-id85961 . -1) (undo-tree-id85962 . -1) (undo-tree-id85963 . -1) (undo-tree-id85964 . -1) (undo-tree-id85965 . -1) (undo-tree-id85966 . -1) (undo-tree-id85967 . -1) (undo-tree-id85968 . -1) (undo-tree-id85969 . -1) (undo-tree-id85970 . -1) (undo-tree-id85971 . -1) (undo-tree-id85972 . -1) (undo-tree-id85973 . -1) (undo-tree-id85974 . -1) (undo-tree-id85975 . -1) (undo-tree-id85976 . -1) (undo-tree-id85977 . -1) (undo-tree-id85978 . -1) (undo-tree-id85979 . -1) (undo-tree-id85980 . -1) (undo-tree-id85981 . -1) (undo-tree-id85982 . -1) (undo-tree-id85983 . -1) (undo-tree-id85984 . -1) (undo-tree-id85985 . -1) (undo-tree-id85986 . -1) (undo-tree-id85987 . -1) (undo-tree-id85988 . -1) (undo-tree-id85989 . -1) (undo-tree-id85990 . -1) (undo-tree-id85991 . -1) (undo-tree-id85992 . -1) (undo-tree-id85993 . -1) (undo-tree-id85994 . -1)) nil (25767 36489 253983 623000) 0 nil])
([nil nil ((16852 . 16853) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 16852) (undo-tree-id86085 . -1) (undo-tree-id86086 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16853) (undo-tree-id86087 . 1) (undo-tree-id86088 . 1) (undo-tree-id86089 . -1) 16852 (t 25767 36489 347227 944000)) nil (25767 36506 164536 91000) 0 nil])
([nil nil ((16921 . 16922) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16921) (undo-tree-id86084 . -1) 16853) nil (25767 36506 164531 147000) 0 nil])
([nil nil ((17063 . 17064) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17063) (undo-tree-id86082 . -1) (16988 . 16989) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -16988) (undo-tree-id86083 . -1) 16921) nil (25767 36506 164526 8000) 0 nil])
([nil nil ((16851 . 17138) (#("- This mask tensor is then
- The way this works is that the Embedding layer creates a mask tensor equal to K.not_equal(inputs, 0) (where K = keras.backend): it is a Boolean tensor with the same shape as the inputs, and it is equal to False anywhere the word IDs are 0, or True otherwise." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 26 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 26 27 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 27 28 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 28 29 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 29 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 97 98 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 98 112 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 112 113 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil invisible t) 113 117 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 117 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil display ((raise -0.3) (height 0.7))) 118 164 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 164 165 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 165 239 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 239 240 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 240 287 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 16851) (undo-tree-id86090 . 258) (undo-tree-id86091 . 258) (undo-tree-id86092 . -239) (undo-tree-id86093 . -287) (undo-tree-id86094 . -239) (undo-tree-id86095 . -239) (undo-tree-id86096 . -239) (undo-tree-id86097 . -239) (undo-tree-id86098 . -239) (undo-tree-id86099 . -239) (undo-tree-id86100 . -239) (undo-tree-id86101 . -239) (undo-tree-id86102 . -239) (undo-tree-id86103 . -239) (undo-tree-id86104 . -239) (undo-tree-id86105 . -239) (undo-tree-id86106 . -239) (undo-tree-id86107 . -239) (undo-tree-id86108 . -239) (undo-tree-id86109 . -239) (undo-tree-id86110 . -239) (undo-tree-id86111 . -239) (undo-tree-id86112 . -239) (undo-tree-id86113 . -239) (undo-tree-id86114 . -239) (undo-tree-id86115 . -239) (undo-tree-id86116 . -239) (undo-tree-id86117 . -239) (undo-tree-id86118 . -174) (undo-tree-id86119 . -174) (undo-tree-id86120 . -174) (undo-tree-id86121 . -174) (undo-tree-id86122 . -174) (undo-tree-id86123 . -174) (undo-tree-id86124 . -174) (undo-tree-id86125 . -174) (undo-tree-id86126 . -174) (undo-tree-id86127 . -174) (undo-tree-id86128 . -174) (undo-tree-id86129 . -108) (undo-tree-id86130 . -108) (undo-tree-id86131 . -108) (undo-tree-id86132 . -108) (undo-tree-id86133 . -108) (undo-tree-id86134 . -108) (undo-tree-id86135 . -108) (undo-tree-id86136 . -108) (undo-tree-id86137 . -108) (undo-tree-id86138 . -108) (undo-tree-id86139 . -108) (undo-tree-id86140 . -46) (undo-tree-id86141 . -46) (undo-tree-id86142 . -46) (undo-tree-id86143 . -46) (undo-tree-id86144 . -46) (undo-tree-id86145 . -46) (undo-tree-id86146 . -46) (undo-tree-id86147 . -46) (undo-tree-id86148 . -46) (undo-tree-id86149 . -46) (undo-tree-id86150 . -46) (undo-tree-id86151 . -29) (undo-tree-id86152 . -29) (undo-tree-id86153 . -29) (undo-tree-id86154 . -29) (undo-tree-id86155 . -29) (undo-tree-id86156 . -29) (undo-tree-id86157 . -29) (undo-tree-id86158 . -29) (undo-tree-id86159 . -29) (undo-tree-id86160 . -29) (undo-tree-id86161 . -29) (undo-tree-id86162 . -29) (undo-tree-id86163 . -29) (undo-tree-id86164 . -29) (undo-tree-id86165 . -29) (undo-tree-id86166 . -29) (undo-tree-id86167 . -29) (undo-tree-id86168 . -29) (undo-tree-id86169 . -29) (undo-tree-id86170 . -29) (undo-tree-id86171 . -29) (undo-tree-id86172 . -29) (undo-tree-id86173 . -29) (undo-tree-id86174 . -29) (undo-tree-id86175 . -29) (undo-tree-id86176 . -29) (undo-tree-id86177 . -29) (undo-tree-id86178 . -29) (undo-tree-id86179 . -29) (undo-tree-id86180 . -29) (undo-tree-id86181 . -29) (undo-tree-id86182 . -29) (undo-tree-id86183 . -29) (undo-tree-id86184 . -29) (undo-tree-id86185 . -29) (undo-tree-id86186 . -29) (undo-tree-id86187 . -29) (undo-tree-id86188 . -29) (undo-tree-id86189 . -29) (undo-tree-id86190 . -29) (undo-tree-id86191 . -29) (undo-tree-id86192 . -29) (undo-tree-id86193 . -29) (undo-tree-id86194 . -29) (undo-tree-id86195 . -29) (undo-tree-id86196 . -29) (undo-tree-id86197 . -29) (undo-tree-id86198 . -29) (undo-tree-id86199 . -29) (undo-tree-id86200 . -29) (undo-tree-id86201 . -29) (undo-tree-id86202 . -29) (undo-tree-id86203 . -29) (undo-tree-id86204 . -29) (undo-tree-id86205 . -29) (undo-tree-id86206 . -29) (undo-tree-id86207 . -29) (undo-tree-id86208 . -29) (undo-tree-id86209 . -29) (undo-tree-id86210 . -29) (undo-tree-id86211 . -29) (undo-tree-id86212 . -29) (undo-tree-id86213 . -29) (undo-tree-id86214 . -29) (undo-tree-id86215 . -29) (undo-tree-id86216 . -29) (undo-tree-id86217 . -29) (undo-tree-id86218 . -29) (undo-tree-id86219 . -29) (undo-tree-id86220 . -29) (undo-tree-id86221 . -29) (undo-tree-id86222 . -29) (undo-tree-id86223 . -29) (undo-tree-id86224 . -29) (undo-tree-id86225 . -29) (undo-tree-id86226 . -29) (undo-tree-id86227 . -29) (undo-tree-id86228 . -29) (undo-tree-id86229 . -29) (undo-tree-id86230 . -29) (undo-tree-id86231 . -29) (undo-tree-id86232 . -29) (undo-tree-id86233 . -29) (undo-tree-id86234 . -29) (undo-tree-id86235 . -29) (undo-tree-id86236 . -29) (undo-tree-id86237 . -29) (undo-tree-id86238 . -29) (undo-tree-id86239 . -29) (undo-tree-id86240 . -29) (undo-tree-id86241 . -29) (undo-tree-id86242 . -29) (undo-tree-id86243 . -29) (undo-tree-id86244 . -29) (undo-tree-id86245 . -29) (undo-tree-id86246 . -29) (undo-tree-id86247 . -29) (undo-tree-id86248 . -29) (undo-tree-id86249 . -29) (undo-tree-id86250 . -29) (undo-tree-id86251 . -29) (undo-tree-id86252 . -29) (undo-tree-id86253 . -29) (undo-tree-id86254 . -29) (undo-tree-id86255 . -29) (undo-tree-id86256 . -29) (undo-tree-id86257 . -29) (undo-tree-id86258 . -29) (undo-tree-id86259 . -29) (undo-tree-id86260 . -29) (undo-tree-id86261 . -29) (undo-tree-id86262 . -29) (undo-tree-id86263 . -29) (undo-tree-id86264 . -29) (undo-tree-id86265 . -29) (undo-tree-id86266 . -29) (undo-tree-id86267 . -29) (undo-tree-id86268 . -29) (undo-tree-id86269 . -29) (undo-tree-id86270 . -29) (undo-tree-id86271 . -29) (undo-tree-id86272 . -29) (undo-tree-id86273 . -29) (undo-tree-id86274 . -29) (undo-tree-id86275 . -29) (undo-tree-id86276 . -29) (undo-tree-id86277 . -91) (undo-tree-id86278 . -91) (undo-tree-id86279 . -91) (undo-tree-id86280 . -91) (undo-tree-id86281 . -91) (undo-tree-id86282 . -91) (undo-tree-id86283 . -91) (undo-tree-id86284 . -91) (undo-tree-id86285 . -91) (undo-tree-id86286 . -91) (undo-tree-id86287 . -91) (undo-tree-id86288 . -157) (undo-tree-id86289 . -157) (undo-tree-id86290 . -157) (undo-tree-id86291 . -157) (undo-tree-id86292 . -157) (undo-tree-id86293 . -157) (undo-tree-id86294 . -157) (undo-tree-id86295 . -157) (undo-tree-id86296 . -157) (undo-tree-id86297 . -157) (undo-tree-id86298 . -157) (undo-tree-id86299 . -222) (undo-tree-id86300 . -222) (undo-tree-id86301 . -222) (undo-tree-id86302 . -222) (undo-tree-id86303 . -222) (undo-tree-id86304 . -222) (undo-tree-id86305 . -222) (undo-tree-id86306 . -222) (undo-tree-id86307 . -222) (undo-tree-id86308 . -222) (undo-tree-id86309 . -222) (undo-tree-id86310 . -277) (undo-tree-id86311 . -277) (undo-tree-id86312 . -277) (undo-tree-id86313 . -277) (undo-tree-id86314 . -277) (undo-tree-id86315 . -277) (undo-tree-id86316 . -277) (undo-tree-id86317 . -277) (undo-tree-id86318 . -277) (undo-tree-id86319 . -277) (undo-tree-id86320 . -277) (undo-tree-id86321 . -277) (undo-tree-id86322 . -277) (undo-tree-id86323 . -277) (undo-tree-id86324 . -277) (undo-tree-id86325 . -277) (undo-tree-id86326 . -277) (undo-tree-id86327 . -277) (undo-tree-id86328 . -277) (undo-tree-id86329 . -277) (undo-tree-id86330 . -277) (undo-tree-id86331 . -286) (undo-tree-id86332 . -286) (undo-tree-id86333 . -286) (undo-tree-id86334 . -286) (undo-tree-id86335 . -286) (undo-tree-id86336 . -286) (undo-tree-id86337 . -286) (undo-tree-id86338 . -286) (undo-tree-id86339 . -286) (undo-tree-id86340 . -286) (undo-tree-id86341 . -286) (undo-tree-id86342 . -286) (undo-tree-id86343 . -286) (undo-tree-id86344 . -286) (undo-tree-id86345 . -286) (undo-tree-id86346 . -286) (undo-tree-id86347 . -287) (undo-tree-id86348 . -287) (undo-tree-id86349 . -287) (undo-tree-id86350 . -287) (undo-tree-id86351 . -287) (undo-tree-id86352 . -287) (undo-tree-id86353 . -287) (undo-tree-id86354 . -287) (undo-tree-id86355 . -287) (undo-tree-id86356 . -287) (undo-tree-id86357 . -287) (undo-tree-id86358 . -287) (undo-tree-id86359 . -287) (undo-tree-id86360 . -287) (undo-tree-id86361 . -287) (undo-tree-id86362 . -287) (undo-tree-id86363 . -287) (undo-tree-id86364 . -287) (undo-tree-id86365 . -287) (undo-tree-id86366 . -27) (16851 . 16878) (#(" This mask tensor is then" 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 17111) (t 25767 36506 303822 997000)) nil (25767 36582 2748 112000) 0 nil])
([nil nil ((17138 . 17139) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17138) (undo-tree-id86377 . 1) (undo-tree-id86378 . -1) 17113 (t 25767 36582 94392 347000)) nil (25767 36586 729102 549000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -17112) (undo-tree-id86367 . -2) (undo-tree-id86368 . -2) (undo-tree-id86369 . -2) (undo-tree-id86370 . -2) (undo-tree-id86371 . -2) (undo-tree-id86372 . -2) (undo-tree-id86373 . -2) (undo-tree-id86374 . -2) (undo-tree-id86375 . -2) (undo-tree-id86376 . -2) 17114 (17111 . 17114) 17070) nil (25767 36586 729094 277000) 0 nil])
([nil nil ((17214 . 17215) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17214) (undo-tree-id86379 . -1) 17115 (t 25767 36586 830548 305000)) nil (25767 36592 806813 106000) 0 nil])
([nil nil ((17113 . 17291) (#("- So in this example, both GRU layers will

- This mask tensor is then automatically propagated by the model to all subsequent layers, as long as the time dimension is preserved." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 42 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 42 43 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 43 44 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 44 45 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 45 46 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 46 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 70 71 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 71 145 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 145 146 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 146 178 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 17113) (undo-tree-id86380 . 107) (undo-tree-id86381 . -145) (undo-tree-id86382 . -178) (undo-tree-id86383 . -145) (undo-tree-id86384 . -145) (undo-tree-id86385 . -145) (undo-tree-id86386 . -145) (undo-tree-id86387 . -145) (undo-tree-id86388 . -145) (undo-tree-id86389 . -145) (undo-tree-id86390 . -145) (undo-tree-id86391 . -145) (undo-tree-id86392 . -145) (undo-tree-id86393 . -145) (undo-tree-id86394 . -145) (undo-tree-id86395 . -145) (undo-tree-id86396 . -145) (undo-tree-id86397 . -145) (undo-tree-id86398 . -145) (undo-tree-id86399 . -145) (undo-tree-id86400 . -145) (undo-tree-id86401 . -145) (undo-tree-id86402 . -145) (undo-tree-id86403 . -145) (undo-tree-id86404 . -145) (undo-tree-id86405 . -145) (undo-tree-id86406 . -145) (undo-tree-id86407 . -145) (undo-tree-id86408 . -145) (undo-tree-id86409 . -145) (undo-tree-id86410 . -145) (undo-tree-id86411 . -145) (undo-tree-id86412 . -145) (undo-tree-id86413 . -145) (undo-tree-id86414 . -145) (undo-tree-id86415 . -145) (undo-tree-id86416 . -145) (undo-tree-id86417 . -82) (undo-tree-id86418 . -82) (undo-tree-id86419 . -82) (undo-tree-id86420 . -82) (undo-tree-id86421 . -82) (undo-tree-id86422 . -82) (undo-tree-id86423 . -82) (undo-tree-id86424 . -82) (undo-tree-id86425 . -82) (undo-tree-id86426 . -82) (undo-tree-id86427 . -82) (undo-tree-id86428 . -85) (undo-tree-id86429 . -85) (undo-tree-id86430 . -85) (undo-tree-id86431 . -85) (undo-tree-id86432 . -85) (undo-tree-id86433 . -85) (undo-tree-id86434 . -85) (undo-tree-id86435 . -85) (undo-tree-id86436 . -85) (undo-tree-id86437 . -85) (undo-tree-id86438 . -85) (undo-tree-id86439 . -85) (undo-tree-id86440 . -85) (undo-tree-id86441 . -85) (undo-tree-id86442 . -85) (undo-tree-id86443 . -85) (undo-tree-id86444 . -85) (undo-tree-id86445 . -85) (undo-tree-id86446 . -85) (undo-tree-id86447 . -85) (undo-tree-id86448 . -85) (undo-tree-id86449 . -49) (undo-tree-id86450 . -49) (undo-tree-id86451 . -49) (undo-tree-id86452 . -49) (undo-tree-id86453 . -49) (undo-tree-id86454 . -49) (undo-tree-id86455 . -49) (undo-tree-id86456 . -49) (undo-tree-id86457 . -49) (undo-tree-id86458 . -49) (undo-tree-id86459 . -49) (undo-tree-id86460 . -54) (undo-tree-id86461 . -54) (undo-tree-id86462 . -54) (undo-tree-id86463 . -54) (undo-tree-id86464 . -54) (undo-tree-id86465 . -54) (undo-tree-id86466 . -54) (undo-tree-id86467 . -54) (undo-tree-id86468 . -54) (undo-tree-id86469 . -54) (undo-tree-id86470 . -54) (undo-tree-id86471 . -54) (undo-tree-id86472 . -54) (undo-tree-id86473 . -54) (undo-tree-id86474 . -54) (undo-tree-id86475 . -54) (undo-tree-id86476 . -61) (undo-tree-id86477 . -61) (undo-tree-id86478 . -61) (undo-tree-id86479 . -61) (undo-tree-id86480 . -61) (undo-tree-id86481 . -61) (undo-tree-id86482 . -61) (undo-tree-id86483 . -61) (undo-tree-id86484 . -61) (undo-tree-id86485 . -61) (undo-tree-id86486 . -61) (undo-tree-id86487 . -64) (undo-tree-id86488 . -64) (undo-tree-id86489 . -64) (undo-tree-id86490 . -64) (undo-tree-id86491 . -64) (undo-tree-id86492 . -64) (undo-tree-id86493 . -64) (undo-tree-id86494 . -64) (undo-tree-id86495 . -64) (undo-tree-id86496 . -64) (undo-tree-id86497 . -64) (undo-tree-id86498 . -64) (undo-tree-id86499 . -64) (undo-tree-id86500 . -64) (undo-tree-id86501 . -64) (undo-tree-id86502 . -64) (undo-tree-id86503 . -69) (undo-tree-id86504 . -69) (undo-tree-id86505 . -69) (undo-tree-id86506 . -69) (undo-tree-id86507 . -69) (undo-tree-id86508 . -69) (undo-tree-id86509 . -69) (undo-tree-id86510 . -69) (undo-tree-id86511 . -69) (undo-tree-id86512 . -69) (undo-tree-id86513 . -69) (undo-tree-id86514 . -83) (undo-tree-id86515 . -83) (undo-tree-id86516 . -83) (undo-tree-id86517 . -83) (undo-tree-id86518 . -83) (undo-tree-id86519 . -83) (undo-tree-id86520 . -83) (undo-tree-id86521 . -83) (undo-tree-id86522 . -83) (undo-tree-id86523 . -83) (undo-tree-id86524 . -83) (undo-tree-id86525 . -83) (undo-tree-id86526 . -83) (undo-tree-id86527 . -83) (undo-tree-id86528 . -83) (undo-tree-id86529 . -83) (undo-tree-id86530 . -94) (undo-tree-id86531 . -94) (undo-tree-id86532 . -94) (undo-tree-id86533 . -94) (undo-tree-id86534 . -94) (undo-tree-id86535 . -94) (undo-tree-id86536 . -94) (undo-tree-id86537 . -94) (undo-tree-id86538 . -94) (undo-tree-id86539 . -94) (undo-tree-id86540 . -94) (undo-tree-id86541 . -97) (undo-tree-id86542 . -97) (undo-tree-id86543 . -97) (undo-tree-id86544 . -97) (undo-tree-id86545 . -97) (undo-tree-id86546 . -97) (undo-tree-id86547 . -97) (undo-tree-id86548 . -97) (undo-tree-id86549 . -97) (undo-tree-id86550 . -97) (undo-tree-id86551 . -97) (undo-tree-id86552 . -97) (undo-tree-id86553 . -97) (undo-tree-id86554 . -97) (undo-tree-id86555 . -97) (undo-tree-id86556 . -97) (undo-tree-id86557 . -101) (undo-tree-id86558 . -101) (undo-tree-id86559 . -101) (undo-tree-id86560 . -101) (undo-tree-id86561 . -101) (undo-tree-id86562 . -101) (undo-tree-id86563 . -101) (undo-tree-id86564 . -101) (undo-tree-id86565 . -101) (undo-tree-id86566 . -101) (undo-tree-id86567 . -101) (undo-tree-id86568 . -107) (undo-tree-id86569 . -107) (undo-tree-id86570 . -107) (undo-tree-id86571 . -107) (undo-tree-id86572 . -107) (undo-tree-id86573 . -107) (undo-tree-id86574 . -107) (undo-tree-id86575 . -107) (undo-tree-id86576 . -107) (undo-tree-id86577 . -107) (undo-tree-id86578 . -107) (undo-tree-id86579 . -107) (undo-tree-id86580 . -107) (undo-tree-id86581 . -107) (undo-tree-id86582 . -107) (undo-tree-id86583 . -107) (undo-tree-id86584 . -110) (undo-tree-id86585 . -110) (undo-tree-id86586 . -110) (undo-tree-id86587 . -110) (undo-tree-id86588 . -110) (undo-tree-id86589 . -110) (undo-tree-id86590 . -110) (undo-tree-id86591 . -110) (undo-tree-id86592 . -110) (undo-tree-id86593 . -110) (undo-tree-id86594 . -110) (undo-tree-id86595 . -114) (undo-tree-id86596 . -114) (undo-tree-id86597 . -114) (undo-tree-id86598 . -114) (undo-tree-id86599 . -114) (undo-tree-id86600 . -114) (undo-tree-id86601 . -114) (undo-tree-id86602 . -114) (undo-tree-id86603 . -114) (undo-tree-id86604 . -114) (undo-tree-id86605 . -114) (undo-tree-id86606 . -114) (undo-tree-id86607 . -114) (undo-tree-id86608 . -114) (undo-tree-id86609 . -114) (undo-tree-id86610 . -114) (undo-tree-id86611 . -125) (undo-tree-id86612 . -125) (undo-tree-id86613 . -125) (undo-tree-id86614 . -125) (undo-tree-id86615 . -125) (undo-tree-id86616 . -125) (undo-tree-id86617 . -125) (undo-tree-id86618 . -125) (undo-tree-id86619 . -125) (undo-tree-id86620 . -125) (undo-tree-id86621 . -125) (undo-tree-id86622 . -132) (undo-tree-id86623 . -132) (undo-tree-id86624 . -132) (undo-tree-id86625 . -132) (undo-tree-id86626 . -132) (undo-tree-id86627 . -132) (undo-tree-id86628 . -132) (undo-tree-id86629 . -132) (undo-tree-id86630 . -132) (undo-tree-id86631 . -132) (undo-tree-id86632 . -132) (undo-tree-id86633 . -133) (undo-tree-id86634 . -133) (undo-tree-id86635 . -133) (undo-tree-id86636 . -133) (undo-tree-id86637 . -133) (undo-tree-id86638 . -133) (undo-tree-id86639 . -133) (undo-tree-id86640 . -133) (undo-tree-id86641 . -133) (undo-tree-id86642 . -133) (undo-tree-id86643 . -133) (undo-tree-id86644 . -136) (undo-tree-id86645 . -136) (undo-tree-id86646 . -136) (undo-tree-id86647 . -136) (undo-tree-id86648 . -136) (undo-tree-id86649 . -136) (undo-tree-id86650 . -136) (undo-tree-id86651 . -136) (undo-tree-id86652 . -136) (undo-tree-id86653 . -136) (undo-tree-id86654 . -136) (undo-tree-id86655 . -136) (undo-tree-id86656 . -136) (undo-tree-id86657 . -136) (undo-tree-id86658 . -136) (undo-tree-id86659 . -136) (undo-tree-id86660 . -136) (undo-tree-id86661 . -136) (undo-tree-id86662 . -136) (undo-tree-id86663 . -136) (undo-tree-id86664 . -136) (undo-tree-id86665 . -136) (undo-tree-id86666 . -136) (undo-tree-id86667 . -136) (undo-tree-id86668 . -136) (undo-tree-id86669 . -136) (undo-tree-id86670 . -141) (undo-tree-id86671 . -141) (undo-tree-id86672 . -141) (undo-tree-id86673 . -141) (undo-tree-id86674 . -141) (undo-tree-id86675 . -141) (undo-tree-id86676 . -141) (undo-tree-id86677 . -141) (undo-tree-id86678 . -141) (undo-tree-id86679 . -141) (undo-tree-id86680 . -141) (undo-tree-id86681 . -144) (undo-tree-id86682 . -144) (undo-tree-id86683 . -144) (undo-tree-id86684 . -144) (undo-tree-id86685 . -144) (undo-tree-id86686 . -144) (undo-tree-id86687 . -144) (undo-tree-id86688 . -144) (undo-tree-id86689 . -144) (undo-tree-id86690 . -144) (undo-tree-id86691 . -144) (undo-tree-id86692 . -144) (undo-tree-id86693 . -144) (undo-tree-id86694 . -144) (undo-tree-id86695 . -144) (undo-tree-id86696 . -144) (undo-tree-id86697 . -148) (undo-tree-id86698 . -148) (undo-tree-id86699 . -148) (undo-tree-id86700 . -148) (undo-tree-id86701 . -148) (undo-tree-id86702 . -148) (undo-tree-id86703 . -148) (undo-tree-id86704 . -148) (undo-tree-id86705 . -148) (undo-tree-id86706 . -148) (undo-tree-id86707 . -148) (undo-tree-id86708 . -153) (undo-tree-id86709 . -153) (undo-tree-id86710 . -153) (undo-tree-id86711 . -153) (undo-tree-id86712 . -153) (undo-tree-id86713 . -153) (undo-tree-id86714 . -153) (undo-tree-id86715 . -153) (undo-tree-id86716 . -153) (undo-tree-id86717 . -153) (undo-tree-id86718 . -153) (undo-tree-id86719 . -163) (undo-tree-id86720 . -163) (undo-tree-id86721 . -163) (undo-tree-id86722 . -163) (undo-tree-id86723 . -163) (undo-tree-id86724 . -163) (undo-tree-id86725 . -163) (undo-tree-id86726 . -163) (undo-tree-id86727 . -163) (undo-tree-id86728 . -163) (undo-tree-id86729 . -163) (undo-tree-id86730 . -166) (undo-tree-id86731 . -166) (undo-tree-id86732 . -166) (undo-tree-id86733 . -166) (undo-tree-id86734 . -166) (undo-tree-id86735 . -166) (undo-tree-id86736 . -166) (undo-tree-id86737 . -166) (undo-tree-id86738 . -166) (undo-tree-id86739 . -166) (undo-tree-id86740 . -166) (undo-tree-id86741 . -176) (undo-tree-id86742 . -176) (undo-tree-id86743 . -176) (undo-tree-id86744 . -176) (undo-tree-id86745 . -176) (undo-tree-id86746 . -176) (undo-tree-id86747 . -176) (undo-tree-id86748 . -176) (undo-tree-id86749 . -176) (undo-tree-id86750 . -176) (undo-tree-id86751 . -176) (undo-tree-id86752 . -177) (undo-tree-id86753 . -177) (undo-tree-id86754 . -177) (undo-tree-id86755 . -177) (undo-tree-id86756 . -177) (undo-tree-id86757 . -177) (undo-tree-id86758 . -177) (undo-tree-id86759 . -177) (undo-tree-id86760 . -177) (undo-tree-id86761 . -177) (undo-tree-id86762 . -177) (undo-tree-id86763 . -177) (undo-tree-id86764 . -177) (undo-tree-id86765 . -177) (undo-tree-id86766 . -177) (undo-tree-id86767 . -177) (undo-tree-id86768 . -178) (undo-tree-id86769 . -178) (undo-tree-id86770 . -178) (undo-tree-id86771 . -178) (undo-tree-id86772 . -178) (undo-tree-id86773 . -178) (undo-tree-id86774 . -178) (undo-tree-id86775 . -178) (undo-tree-id86776 . -178) (undo-tree-id86777 . -178) (undo-tree-id86778 . -178) (undo-tree-id86779 . -178) (undo-tree-id86780 . -178) (undo-tree-id86781 . -178) (undo-tree-id86782 . -178) (undo-tree-id86783 . -178) (undo-tree-id86784 . -178) (undo-tree-id86785 . -178) (undo-tree-id86786 . -178) (undo-tree-id86787 . -178) (undo-tree-id86788 . -178) (undo-tree-id86789 . -178) (undo-tree-id86790 . -178) (undo-tree-id86791 . -178) (undo-tree-id86792 . -178) (undo-tree-id86793 . -178) (undo-tree-id86794 . -178) (undo-tree-id86795 . -178) (undo-tree-id86796 . -178) (undo-tree-id86797 . -178) (undo-tree-id86798 . -178) (undo-tree-id86799 . -178) (undo-tree-id86800 . -178) (undo-tree-id86801 . -178) (undo-tree-id86802 . -178) (undo-tree-id86803 . -178) (undo-tree-id86804 . -178) (undo-tree-id86805 . -178) (undo-tree-id86806 . -178) (undo-tree-id86807 . -178) (undo-tree-id86808 . -178) (undo-tree-id86809 . -178) (undo-tree-id86810 . -178) (undo-tree-id86811 . -178) (undo-tree-id86812 . -178) (undo-tree-id86813 . -178) (undo-tree-id86814 . -44) (17113 . 17157) (#(" So in this example, both GRU layers will" 0 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 17247) (undo-tree-id86815 . -1) (undo-tree-id86816 . -2) (undo-tree-id86817 . -2) (undo-tree-id86818 . -2) (undo-tree-id86819 . -2) (undo-tree-id86820 . -2) (undo-tree-id86821 . -2) (undo-tree-id86822 . -2) (undo-tree-id86823 . -2) (undo-tree-id86824 . -2) (undo-tree-id86825 . -2) (undo-tree-id86826 . -2) (undo-tree-id86827 . -2) (undo-tree-id86828 . -2) (undo-tree-id86829 . -2) (undo-tree-id86830 . -2) (undo-tree-id86831 . -2) (undo-tree-id86832 . -1) (undo-tree-id86833 . -1) (undo-tree-id86834 . -1) (undo-tree-id86835 . -1) (undo-tree-id86836 . -1) (undo-tree-id86837 . -1) (undo-tree-id86838 . -1) (undo-tree-id86839 . -1) (undo-tree-id86840 . -1) (undo-tree-id86841 . -1) (undo-tree-id86842 . -1) (undo-tree-id86843 . -1) (undo-tree-id86844 . -1) (undo-tree-id86845 . -1) (undo-tree-id86846 . -1) (undo-tree-id86847 . -1) (undo-tree-id86848 . -1) (undo-tree-id86849 . -1) (undo-tree-id86850 . -1) (undo-tree-id86851 . -1) (undo-tree-id86852 . -1) (undo-tree-id86853 . -1) (undo-tree-id86854 . -1) (undo-tree-id86855 . -1) (undo-tree-id86856 . -1) (undo-tree-id86857 . -1) (undo-tree-id86858 . -1) (undo-tree-id86859 . -1) (undo-tree-id86860 . -1) (undo-tree-id86861 . -1) 17248 (t 25767 36592 898747 379000)) nil (25767 36609 818962 517000) 0 nil])
([nil nil ((17291 . 17292) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17291) (undo-tree-id86863 . -1) 17269 (t 25767 36609 911301 103000)) nil (25767 36619 22840 415000) 0 nil])
([nil nil ((17364 . 17365) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17364) (undo-tree-id86862 . -1) 17291) nil (25767 36619 22834 627000) 0 nil])
([nil nil ((17442 . 17443) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17442) (undo-tree-id87431 . -1) 17382 (t 25767 36619 127598 427000)) nil (25767 36641 515280 602000) 0 nil])
([nil nil ((17249 . 17520) (#("- Each layer may handle the mask

- So in this example, both GRU layers will receive this mask automatically, but since the second GRU layer does not return sequences (it only returns the output of the last time step), the mask will not be transmitted to the Dense layer." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 10 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 10 32 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 32 33 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 34 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 34 35 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 35 36 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 36 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 76 77 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 77 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 149 150 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 150 167 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 167 227 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 227 228 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 228 271 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 17249) (undo-tree-id86864 . -226) (undo-tree-id86865 . -36) (undo-tree-id86866 . -36) (undo-tree-id86867 . 216) (undo-tree-id86868 . 235) (undo-tree-id86869 . -149) (undo-tree-id86870 . -271) (undo-tree-id86871 . -149) (undo-tree-id86872 . -149) (undo-tree-id86873 . -149) (undo-tree-id86874 . -149) (undo-tree-id86875 . -149) (undo-tree-id86876 . -149) (undo-tree-id86877 . -149) (undo-tree-id86878 . -149) (undo-tree-id86879 . -149) (undo-tree-id86880 . -149) (undo-tree-id86881 . -149) (undo-tree-id86882 . -149) (undo-tree-id86883 . -149) (undo-tree-id86884 . -149) (undo-tree-id86885 . -149) (undo-tree-id86886 . -149) (undo-tree-id86887 . -149) (undo-tree-id86888 . -149) (undo-tree-id86889 . -149) (undo-tree-id86890 . -149) (undo-tree-id86891 . -149) (undo-tree-id86892 . -149) (undo-tree-id86893 . -149) (undo-tree-id86894 . -149) (undo-tree-id86895 . -90) (undo-tree-id86896 . -90) (undo-tree-id86897 . -90) (undo-tree-id86898 . -90) (undo-tree-id86899 . -90) (undo-tree-id86900 . -90) (undo-tree-id86901 . -90) (undo-tree-id86902 . -90) (undo-tree-id86903 . -90) (undo-tree-id86904 . -90) (undo-tree-id86905 . -90) (undo-tree-id86906 . -37) (undo-tree-id86907 . -37) (undo-tree-id86908 . -37) (undo-tree-id86909 . -37) (undo-tree-id86910 . -37) (undo-tree-id86911 . -37) (undo-tree-id86912 . -37) (undo-tree-id86913 . -37) (undo-tree-id86914 . -37) (undo-tree-id86915 . -37) (undo-tree-id86916 . -37) (undo-tree-id86917 . -40) (undo-tree-id86918 . -40) (undo-tree-id86919 . -40) (undo-tree-id86920 . -40) (undo-tree-id86921 . -40) (undo-tree-id86922 . -40) (undo-tree-id86923 . -40) (undo-tree-id86924 . -40) (undo-tree-id86925 . -40) (undo-tree-id86926 . -40) (undo-tree-id86927 . -40) (undo-tree-id86928 . -45) (undo-tree-id86929 . -45) (undo-tree-id86930 . -45) (undo-tree-id86931 . -45) (undo-tree-id86932 . -45) (undo-tree-id86933 . -45) (undo-tree-id86934 . -45) (undo-tree-id86935 . -45) (undo-tree-id86936 . -45) (undo-tree-id86937 . -45) (undo-tree-id86938 . -45) (undo-tree-id86939 . -45) (undo-tree-id86940 . -45) (undo-tree-id86941 . -45) (undo-tree-id86942 . -45) (undo-tree-id86943 . -45) (undo-tree-id86944 . -53) (undo-tree-id86945 . -53) (undo-tree-id86946 . -53) (undo-tree-id86947 . -53) (undo-tree-id86948 . -53) (undo-tree-id86949 . -53) (undo-tree-id86950 . -53) (undo-tree-id86951 . -53) (undo-tree-id86952 . -53) (undo-tree-id86953 . -53) (undo-tree-id86954 . -53) (undo-tree-id86955 . -54) (undo-tree-id86956 . -54) (undo-tree-id86957 . -54) (undo-tree-id86958 . -54) (undo-tree-id86959 . -54) (undo-tree-id86960 . -54) (undo-tree-id86961 . -59) (undo-tree-id86962 . -59) (undo-tree-id86963 . -59) (undo-tree-id86964 . -59) (undo-tree-id86965 . -59) (undo-tree-id86966 . -59) (undo-tree-id86967 . 210) (undo-tree-id86968 . -64) (undo-tree-id86969 . -63) (undo-tree-id86970 . -63) (undo-tree-id86971 . -63) (undo-tree-id86972 . -63) (undo-tree-id86973 . -63) (undo-tree-id86974 . -63) (undo-tree-id86975 . -70) (undo-tree-id86976 . -70) (undo-tree-id86977 . -70) (undo-tree-id86978 . -70) (undo-tree-id86979 . -70) (undo-tree-id86980 . -70) (undo-tree-id86981 . -75) (undo-tree-id86982 . -75) (undo-tree-id86983 . -75) (undo-tree-id86984 . -75) (undo-tree-id86985 . -75) (undo-tree-id86986 . -75) (undo-tree-id86987 . -83) (undo-tree-id86988 . -83) (undo-tree-id86989 . -83) (undo-tree-id86990 . -83) (undo-tree-id86991 . -83) (undo-tree-id86992 . -83) (undo-tree-id86993 . -88) (undo-tree-id86994 . -88) (undo-tree-id86995 . -88) (undo-tree-id86996 . -88) (undo-tree-id86997 . -88) (undo-tree-id86998 . -88) (undo-tree-id86999 . -88) (undo-tree-id87000 . -88) (undo-tree-id87001 . -88) (undo-tree-id87002 . -88) (undo-tree-id87003 . -88) (undo-tree-id87004 . -93) (undo-tree-id87005 . -93) (undo-tree-id87006 . -93) (undo-tree-id87007 . -93) (undo-tree-id87008 . -93) (undo-tree-id87009 . -93) (undo-tree-id87010 . -93) (undo-tree-id87011 . -93) (undo-tree-id87012 . -93) (undo-tree-id87013 . -93) (undo-tree-id87014 . -93) (undo-tree-id87015 . -107) (undo-tree-id87016 . -107) (undo-tree-id87017 . -107) (undo-tree-id87018 . -107) (undo-tree-id87019 . -107) (undo-tree-id87020 . -107) (undo-tree-id87021 . -107) (undo-tree-id87022 . -107) (undo-tree-id87023 . -107) (undo-tree-id87024 . -107) (undo-tree-id87025 . -107) (undo-tree-id87026 . -108) (undo-tree-id87027 . -108) (undo-tree-id87028 . -108) (undo-tree-id87029 . -108) (undo-tree-id87030 . -108) (undo-tree-id87031 . -108) (undo-tree-id87032 . -108) (undo-tree-id87033 . -108) (undo-tree-id87034 . -108) (undo-tree-id87035 . -108) (undo-tree-id87036 . -108) (undo-tree-id87037 . -108) (undo-tree-id87038 . -108) (undo-tree-id87039 . -108) (undo-tree-id87040 . -108) (undo-tree-id87041 . -108) (undo-tree-id87042 . -112) (undo-tree-id87043 . -112) (undo-tree-id87044 . -112) (undo-tree-id87045 . -112) (undo-tree-id87046 . -112) (undo-tree-id87047 . -112) (undo-tree-id87048 . -112) (undo-tree-id87049 . -112) (undo-tree-id87050 . -112) (undo-tree-id87051 . -112) (undo-tree-id87052 . -112) (undo-tree-id87053 . -112) (undo-tree-id87054 . -112) (undo-tree-id87055 . -112) (undo-tree-id87056 . -112) (undo-tree-id87057 . -112) (undo-tree-id87058 . -112) (undo-tree-id87059 . -112) (undo-tree-id87060 . -112) (undo-tree-id87061 . -112) (undo-tree-id87062 . -112) (undo-tree-id87063 . -118) (undo-tree-id87064 . -118) (undo-tree-id87065 . -118) (undo-tree-id87066 . -118) (undo-tree-id87067 . -118) (undo-tree-id87068 . -118) (undo-tree-id87069 . -118) (undo-tree-id87070 . -118) (undo-tree-id87071 . -118) (undo-tree-id87072 . -118) (undo-tree-id87073 . -118) (undo-tree-id87074 . -122) (undo-tree-id87075 . -122) (undo-tree-id87076 . -122) (undo-tree-id87077 . -122) (undo-tree-id87078 . -122) (undo-tree-id87079 . -122) (undo-tree-id87080 . -122) (undo-tree-id87081 . -122) (undo-tree-id87082 . -122) (undo-tree-id87083 . -122) (undo-tree-id87084 . -122) (undo-tree-id87085 . -129) (undo-tree-id87086 . -129) (undo-tree-id87087 . -129) (undo-tree-id87088 . -129) (undo-tree-id87089 . -129) (undo-tree-id87090 . -129) (undo-tree-id87091 . -129) (undo-tree-id87092 . -129) (undo-tree-id87093 . -129) (undo-tree-id87094 . -129) (undo-tree-id87095 . -129) (undo-tree-id87096 . 140) (undo-tree-id87097 . -134) (undo-tree-id87098 . -133) (undo-tree-id87099 . -133) (undo-tree-id87100 . -133) (undo-tree-id87101 . -133) (undo-tree-id87102 . -133) (undo-tree-id87103 . -133) (undo-tree-id87104 . -133) (undo-tree-id87105 . -133) (undo-tree-id87106 . -133) (undo-tree-id87107 . -133) (undo-tree-id87108 . -133) (undo-tree-id87109 . -139) (undo-tree-id87110 . -139) (undo-tree-id87111 . -139) (undo-tree-id87112 . -139) (undo-tree-id87113 . -139) (undo-tree-id87114 . -139) (undo-tree-id87115 . -139) (undo-tree-id87116 . -139) (undo-tree-id87117 . -139) (undo-tree-id87118 . -139) (undo-tree-id87119 . -139) (undo-tree-id87120 . -144) (undo-tree-id87121 . -144) (undo-tree-id87122 . -144) (undo-tree-id87123 . -144) (undo-tree-id87124 . -144) (undo-tree-id87125 . -144) (undo-tree-id87126 . -144) (undo-tree-id87127 . -144) (undo-tree-id87128 . -144) (undo-tree-id87129 . -144) (undo-tree-id87130 . -144) (undo-tree-id87131 . -148) (undo-tree-id87132 . -148) (undo-tree-id87133 . -148) (undo-tree-id87134 . -148) (undo-tree-id87135 . -148) (undo-tree-id87136 . -148) (undo-tree-id87137 . -148) (undo-tree-id87138 . -148) (undo-tree-id87139 . -148) (undo-tree-id87140 . -148) (undo-tree-id87141 . -148) (undo-tree-id87142 . -155) (undo-tree-id87143 . -155) (undo-tree-id87144 . -155) (undo-tree-id87145 . -155) (undo-tree-id87146 . -155) (undo-tree-id87147 . -155) (undo-tree-id87148 . -155) (undo-tree-id87149 . -155) (undo-tree-id87150 . -155) (undo-tree-id87151 . -155) (undo-tree-id87152 . -155) (undo-tree-id87153 . -165) (undo-tree-id87154 . -165) (undo-tree-id87155 . -165) (undo-tree-id87156 . -165) (undo-tree-id87157 . -165) (undo-tree-id87158 . -165) (undo-tree-id87159 . -165) (undo-tree-id87160 . -165) (undo-tree-id87161 . -165) (undo-tree-id87162 . -165) (undo-tree-id87163 . -165) (undo-tree-id87164 . -167) (undo-tree-id87165 . -167) (undo-tree-id87166 . -167) (undo-tree-id87167 . -167) (undo-tree-id87168 . -167) (undo-tree-id87169 . -167) (undo-tree-id87170 . -167) (undo-tree-id87171 . -167) (undo-tree-id87172 . -167) (undo-tree-id87173 . -167) (undo-tree-id87174 . -167) (undo-tree-id87175 . -167) (undo-tree-id87176 . -167) (undo-tree-id87177 . -167) (undo-tree-id87178 . -167) (undo-tree-id87179 . -167) (undo-tree-id87180 . -167) (undo-tree-id87181 . -167) (undo-tree-id87182 . -167) (undo-tree-id87183 . -167) (undo-tree-id87184 . -167) (undo-tree-id87185 . -167) (undo-tree-id87186 . -167) (undo-tree-id87187 . -167) (undo-tree-id87188 . -167) (undo-tree-id87189 . -167) (undo-tree-id87190 . -167) (undo-tree-id87191 . -167) (undo-tree-id87192 . -167) (undo-tree-id87193 . -167) (undo-tree-id87194 . -167) (undo-tree-id87195 . -167) (undo-tree-id87196 . -167) (undo-tree-id87197 . -167) (undo-tree-id87198 . -167) (undo-tree-id87199 . -167) (undo-tree-id87200 . -167) (undo-tree-id87201 . -167) (undo-tree-id87202 . -167) (undo-tree-id87203 . -167) (undo-tree-id87204 . -167) (undo-tree-id87205 . -167) (undo-tree-id87206 . -227) (undo-tree-id87207 . -227) (undo-tree-id87208 . -227) (undo-tree-id87209 . -227) (undo-tree-id87210 . -227) (undo-tree-id87211 . -227) (undo-tree-id87212 . -227) (undo-tree-id87213 . -227) (undo-tree-id87214 . -227) (undo-tree-id87215 . -227) (undo-tree-id87216 . -227) (undo-tree-id87217 . -227) (undo-tree-id87218 . -227) (undo-tree-id87219 . -227) (undo-tree-id87220 . -227) (undo-tree-id87221 . -227) (undo-tree-id87222 . -227) (undo-tree-id87223 . -227) (undo-tree-id87224 . -227) (undo-tree-id87225 . -227) (undo-tree-id87226 . -227) (undo-tree-id87227 . -227) (undo-tree-id87228 . -231) (undo-tree-id87229 . -231) (undo-tree-id87230 . -231) (undo-tree-id87231 . -231) (undo-tree-id87232 . -231) (undo-tree-id87233 . -231) (undo-tree-id87234 . -231) (undo-tree-id87235 . -231) (undo-tree-id87236 . -231) (undo-tree-id87237 . -231) (undo-tree-id87238 . -231) (undo-tree-id87239 . -235) (undo-tree-id87240 . -235) (undo-tree-id87241 . -235) (undo-tree-id87242 . -235) (undo-tree-id87243 . -235) (undo-tree-id87244 . -235) (undo-tree-id87245 . -235) (undo-tree-id87246 . -235) (undo-tree-id87247 . -235) (undo-tree-id87248 . -235) (undo-tree-id87249 . -235) (undo-tree-id87250 . -238) (undo-tree-id87251 . -238) (undo-tree-id87252 . -238) (undo-tree-id87253 . -238) (undo-tree-id87254 . -238) (undo-tree-id87255 . -238) (undo-tree-id87256 . -238) (undo-tree-id87257 . -238) (undo-tree-id87258 . -238) (undo-tree-id87259 . -238) (undo-tree-id87260 . -238) (undo-tree-id87261 . -250) (undo-tree-id87262 . -250) (undo-tree-id87263 . -250) (undo-tree-id87264 . -250) (undo-tree-id87265 . -250) (undo-tree-id87266 . -250) (undo-tree-id87267 . -250) (undo-tree-id87268 . -250) (undo-tree-id87269 . -250) (undo-tree-id87270 . -250) (undo-tree-id87271 . -250) (undo-tree-id87272 . -253) (undo-tree-id87273 . -253) (undo-tree-id87274 . -253) (undo-tree-id87275 . -253) (undo-tree-id87276 . -253) (undo-tree-id87277 . -253) (undo-tree-id87278 . -253) (undo-tree-id87279 . -253) (undo-tree-id87280 . -253) (undo-tree-id87281 . -253) (undo-tree-id87282 . -253) (undo-tree-id87283 . -257) (undo-tree-id87284 . -257) (undo-tree-id87285 . -257) (undo-tree-id87286 . -257) (undo-tree-id87287 . -257) (undo-tree-id87288 . -257) (undo-tree-id87289 . -257) (undo-tree-id87290 . -257) (undo-tree-id87291 . -257) (undo-tree-id87292 . -257) (undo-tree-id87293 . -257) (undo-tree-id87294 . -263) (undo-tree-id87295 . -263) (undo-tree-id87296 . -263) (undo-tree-id87297 . -263) (undo-tree-id87298 . -263) (undo-tree-id87299 . -263) (undo-tree-id87300 . -263) (undo-tree-id87301 . -263) (undo-tree-id87302 . -263) (undo-tree-id87303 . -263) (undo-tree-id87304 . -263) (undo-tree-id87305 . -269) (undo-tree-id87306 . -269) (undo-tree-id87307 . -269) (undo-tree-id87308 . -269) (undo-tree-id87309 . -269) (undo-tree-id87310 . -269) (undo-tree-id87311 . -269) (undo-tree-id87312 . -269) (undo-tree-id87313 . -269) (undo-tree-id87314 . -269) (undo-tree-id87315 . -269) (undo-tree-id87316 . -270) (undo-tree-id87317 . -270) (undo-tree-id87318 . -270) (undo-tree-id87319 . -270) (undo-tree-id87320 . -270) (undo-tree-id87321 . -270) (undo-tree-id87322 . -270) (undo-tree-id87323 . -270) (undo-tree-id87324 . -270) (undo-tree-id87325 . -270) (undo-tree-id87326 . -270) (undo-tree-id87327 . -271) (undo-tree-id87328 . -271) (undo-tree-id87329 . -271) (undo-tree-id87330 . -271) (undo-tree-id87331 . -271) (undo-tree-id87332 . -271) (undo-tree-id87333 . -271) (undo-tree-id87334 . -271) (undo-tree-id87335 . -271) (undo-tree-id87336 . -271) (undo-tree-id87337 . -271) (undo-tree-id87338 . -271) (undo-tree-id87339 . -271) (undo-tree-id87340 . -271) (undo-tree-id87341 . -271) (undo-tree-id87342 . -271) (undo-tree-id87343 . -271) (undo-tree-id87344 . -271) (undo-tree-id87345 . -271) (undo-tree-id87346 . -271) (undo-tree-id87347 . -271) (undo-tree-id87348 . -271) (undo-tree-id87349 . -271) (undo-tree-id87350 . -271) (undo-tree-id87351 . -271) (undo-tree-id87352 . -271) (undo-tree-id87353 . -271) (undo-tree-id87354 . -271) (undo-tree-id87355 . -271) (undo-tree-id87356 . -271) (undo-tree-id87357 . -271) (undo-tree-id87358 . -271) (undo-tree-id87359 . -271) (undo-tree-id87360 . -271) (undo-tree-id87361 . -271) (undo-tree-id87362 . -271) (undo-tree-id87363 . -271) (undo-tree-id87364 . -271) (undo-tree-id87365 . -271) (undo-tree-id87366 . -271) (undo-tree-id87367 . -271) (undo-tree-id87368 . -271) (undo-tree-id87369 . -271) (undo-tree-id87370 . -271) (undo-tree-id87371 . -271) (undo-tree-id87372 . -271) (undo-tree-id87373 . -271) (undo-tree-id87374 . -271) (undo-tree-id87375 . -271) (undo-tree-id87376 . -271) (undo-tree-id87377 . -271) (undo-tree-id87378 . -34) (17249 . 17283) (#(" Each layer may handle the mask" 0 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 17486) (undo-tree-id87379 . -1) (undo-tree-id87380 . -4) (undo-tree-id87381 . -4) (undo-tree-id87382 . -4) (undo-tree-id87383 . -4) (undo-tree-id87384 . -4) (undo-tree-id87385 . -4) (undo-tree-id87386 . -4) (undo-tree-id87387 . -4) (undo-tree-id87388 . -4) (undo-tree-id87389 . -4) (undo-tree-id87390 . -4) (undo-tree-id87391 . -4) (undo-tree-id87392 . -4) (undo-tree-id87393 . -4) (undo-tree-id87394 . -4) (undo-tree-id87395 . -4) (undo-tree-id87396 . -1) (undo-tree-id87397 . -1) (undo-tree-id87398 . -1) (undo-tree-id87399 . -1) (undo-tree-id87400 . -1) (undo-tree-id87401 . -1) (undo-tree-id87402 . -1) (undo-tree-id87403 . -1) (undo-tree-id87404 . -1) (undo-tree-id87405 . -1) (undo-tree-id87406 . -1) (undo-tree-id87407 . -1) (undo-tree-id87408 . -1) (undo-tree-id87409 . -1) (undo-tree-id87410 . -1) (undo-tree-id87411 . -1) (undo-tree-id87412 . -1) (undo-tree-id87413 . -1) (undo-tree-id87414 . -1) (undo-tree-id87415 . -1) (undo-tree-id87416 . -1) (undo-tree-id87417 . -1) (undo-tree-id87418 . -1) (undo-tree-id87419 . -1) (undo-tree-id87420 . -1) (undo-tree-id87421 . -1) (undo-tree-id87422 . -1) (undo-tree-id87423 . -1) (undo-tree-id87424 . -1) (undo-tree-id87425 . -1) (undo-tree-id87426 . -1) (undo-tree-id87427 . -1) (undo-tree-id87428 . -1) (undo-tree-id87429 . -1) (undo-tree-id87430 . -1) 17487) nil (25767 36641 515257 118000) 0 nil])
([nil nil ((17597 . 17598) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17597) (undo-tree-id87432 . -1) (17520 . 17521) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17520) (undo-tree-id87433 . 1) (undo-tree-id87434 . -1) 17489 (t 25767 36641 656317 629000)) nil (25767 36644 733819 237000) 0 nil])
([nil nil ((17488 . 17672) (#("- For example, when a recurrent layer

- Each layer may handle the mask differently, but in general they simply ignore masked time steps (i.e., time steps for which the mask is False)." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 37 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 37 38 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 38 39 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 39 40 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 40 41 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 41 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 49 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 71 72 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 72 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 148 149 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 149 184 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 17488) (undo-tree-id87435 . -41) (undo-tree-id87436 . -41) (undo-tree-id87437 . 118) (undo-tree-id87438 . 143) (undo-tree-id87439 . -148) (undo-tree-id87440 . -148) (undo-tree-id87441 . -148) (undo-tree-id87442 . -148) (undo-tree-id87443 . -148) (undo-tree-id87444 . -148) (undo-tree-id87445 . -148) (undo-tree-id87446 . -148) (undo-tree-id87447 . -148) (undo-tree-id87448 . -148) (undo-tree-id87449 . -148) (undo-tree-id87450 . -148) (undo-tree-id87451 . -148) (undo-tree-id87452 . -148) (undo-tree-id87453 . -148) (undo-tree-id87454 . -148) (undo-tree-id87455 . -148) (undo-tree-id87456 . -148) (undo-tree-id87457 . -148) (undo-tree-id87458 . -148) (undo-tree-id87459 . -148) (undo-tree-id87460 . -148) (undo-tree-id87461 . -148) (undo-tree-id87462 . -148) (undo-tree-id87463 . -84) (undo-tree-id87464 . -84) (undo-tree-id87465 . -84) (undo-tree-id87466 . -84) (undo-tree-id87467 . -84) (undo-tree-id87468 . -84) (undo-tree-id87469 . -84) (undo-tree-id87470 . -84) (undo-tree-id87471 . -84) (undo-tree-id87472 . -84) (undo-tree-id87473 . -84) (undo-tree-id87474 . -41) (undo-tree-id87475 . -41) (undo-tree-id87476 . -41) (undo-tree-id87477 . -41) (undo-tree-id87478 . -41) (undo-tree-id87479 . -41) (undo-tree-id87480 . -41) (undo-tree-id87481 . -41) (undo-tree-id87482 . -41) (undo-tree-id87483 . -41) (undo-tree-id87484 . -41) (undo-tree-id87485 . -41) (undo-tree-id87486 . -41) (undo-tree-id87487 . -41) (undo-tree-id87488 . -41) (undo-tree-id87489 . -41) (undo-tree-id87490 . -41) (undo-tree-id87491 . -41) (undo-tree-id87492 . -41) (undo-tree-id87493 . -41) (undo-tree-id87494 . -41) (undo-tree-id87495 . -41) (undo-tree-id87496 . -41) (undo-tree-id87497 . -41) (undo-tree-id87498 . -41) (undo-tree-id87499 . -41) (undo-tree-id87500 . -41) (undo-tree-id87501 . -41) (undo-tree-id87502 . -41) (undo-tree-id87503 . -41) (undo-tree-id87504 . -41) (undo-tree-id87505 . -41) (undo-tree-id87506 . -41) (undo-tree-id87507 . -41) (undo-tree-id87508 . -41) (undo-tree-id87509 . -41) (undo-tree-id87510 . -41) (undo-tree-id87511 . -41) (undo-tree-id87512 . -41) (undo-tree-id87513 . -41) (undo-tree-id87514 . -41) (undo-tree-id87515 . -41) (undo-tree-id87516 . -41) (undo-tree-id87517 . -41) (undo-tree-id87518 . -41) (undo-tree-id87519 . -41) (undo-tree-id87520 . -41) (undo-tree-id87521 . -41) (undo-tree-id87522 . -41) (undo-tree-id87523 . -41) (undo-tree-id87524 . -41) (undo-tree-id87525 . -41) (undo-tree-id87526 . -41) (undo-tree-id87527 . -41) (undo-tree-id87528 . -41) (undo-tree-id87529 . -41) (undo-tree-id87530 . -41) (undo-tree-id87531 . -41) (undo-tree-id87532 . -41) (undo-tree-id87533 . -41) (undo-tree-id87534 . -41) (undo-tree-id87535 . -41) (undo-tree-id87536 . -41) (undo-tree-id87537 . -41) (undo-tree-id87538 . -41) (undo-tree-id87539 . -41) (undo-tree-id87540 . -41) (undo-tree-id87541 . -41) (undo-tree-id87542 . -41) (undo-tree-id87543 . -41) (undo-tree-id87544 . -41) (undo-tree-id87545 . -41) (undo-tree-id87546 . -41) (undo-tree-id87547 . -41) (undo-tree-id87548 . -41) (undo-tree-id87549 . -41) (undo-tree-id87550 . -41) (undo-tree-id87551 . -41) (undo-tree-id87552 . -41) (undo-tree-id87553 . -41) (undo-tree-id87554 . -41) (undo-tree-id87555 . -41) (undo-tree-id87556 . -41) (undo-tree-id87557 . -44) (undo-tree-id87558 . -44) (undo-tree-id87559 . -44) (undo-tree-id87560 . -44) (undo-tree-id87561 . -44) (undo-tree-id87562 . -44) (undo-tree-id87563 . -44) (undo-tree-id87564 . -44) (undo-tree-id87565 . -44) (undo-tree-id87566 . -44) (undo-tree-id87567 . -44) (undo-tree-id87568 . -44) (undo-tree-id87569 . -44) (undo-tree-id87570 . -44) (undo-tree-id87571 . -44) (undo-tree-id87572 . -44) (undo-tree-id87573 . -50) (undo-tree-id87574 . -50) (undo-tree-id87575 . -50) (undo-tree-id87576 . -50) (undo-tree-id87577 . -50) (undo-tree-id87578 . -50) (undo-tree-id87579 . -50) (undo-tree-id87580 . -50) (undo-tree-id87581 . -50) (undo-tree-id87582 . -50) (undo-tree-id87583 . -50) (undo-tree-id87584 . -50) (undo-tree-id87585 . -50) (undo-tree-id87586 . -50) (undo-tree-id87587 . -50) (undo-tree-id87588 . -50) (undo-tree-id87589 . -50) (undo-tree-id87590 . -50) (undo-tree-id87591 . -50) (undo-tree-id87592 . -50) (undo-tree-id87593 . -50) (undo-tree-id87594 . -54) (undo-tree-id87595 . -54) (undo-tree-id87596 . -54) (undo-tree-id87597 . -54) (undo-tree-id87598 . -54) (undo-tree-id87599 . -54) (undo-tree-id87600 . -54) (undo-tree-id87601 . -54) (undo-tree-id87602 . -54) (undo-tree-id87603 . -54) (undo-tree-id87604 . -54) (undo-tree-id87605 . -54) (undo-tree-id87606 . -54) (undo-tree-id87607 . -54) (undo-tree-id87608 . -54) (undo-tree-id87609 . -54) (undo-tree-id87610 . -61) (undo-tree-id87611 . -61) (undo-tree-id87612 . -61) (undo-tree-id87613 . -61) (undo-tree-id87614 . -61) (undo-tree-id87615 . -61) (undo-tree-id87616 . -61) (undo-tree-id87617 . -61) (undo-tree-id87618 . -61) (undo-tree-id87619 . -61) (undo-tree-id87620 . -61) (undo-tree-id87621 . -61) (undo-tree-id87622 . -61) (undo-tree-id87623 . -61) (undo-tree-id87624 . -61) (undo-tree-id87625 . -61) (undo-tree-id87626 . -65) (undo-tree-id87627 . -65) (undo-tree-id87628 . -65) (undo-tree-id87629 . -65) (undo-tree-id87630 . -65) (undo-tree-id87631 . -65) (undo-tree-id87632 . -65) (undo-tree-id87633 . -65) (undo-tree-id87634 . -65) (undo-tree-id87635 . -65) (undo-tree-id87636 . -65) (undo-tree-id87637 . -65) (undo-tree-id87638 . -65) (undo-tree-id87639 . -65) (undo-tree-id87640 . -65) (undo-tree-id87641 . -65) (undo-tree-id87642 . -65) (undo-tree-id87643 . -65) (undo-tree-id87644 . -65) (undo-tree-id87645 . -65) (undo-tree-id87646 . -65) (undo-tree-id87647 . -65) (undo-tree-id87648 . -65) (undo-tree-id87649 . -65) (undo-tree-id87650 . -65) (undo-tree-id87651 . -65) (undo-tree-id87652 . -65) (undo-tree-id87653 . -65) (undo-tree-id87654 . -65) (undo-tree-id87655 . -65) (undo-tree-id87656 . -65) (undo-tree-id87657 . -65) (undo-tree-id87658 . -65) (undo-tree-id87659 . -65) (undo-tree-id87660 . -65) (undo-tree-id87661 . -65) (undo-tree-id87662 . -65) (undo-tree-id87663 . -65) (undo-tree-id87664 . -65) (undo-tree-id87665 . -65) (undo-tree-id87666 . -65) (undo-tree-id87667 . -65) (undo-tree-id87668 . -65) (undo-tree-id87669 . -65) (undo-tree-id87670 . -65) (undo-tree-id87671 . -65) (undo-tree-id87672 . -65) (undo-tree-id87673 . -65) (undo-tree-id87674 . -65) (undo-tree-id87675 . -65) (undo-tree-id87676 . -184) (undo-tree-id87677 . -65) (undo-tree-id87678 . -65) (undo-tree-id87679 . -65) (undo-tree-id87680 . -65) (undo-tree-id87681 . -65) (undo-tree-id87682 . -65) (undo-tree-id87683 . -65) (undo-tree-id87684 . -65) (undo-tree-id87685 . -65) (undo-tree-id87686 . -65) (undo-tree-id87687 . -65) (undo-tree-id87688 . -65) (undo-tree-id87689 . -65) (undo-tree-id87690 . -65) (undo-tree-id87691 . -65) (undo-tree-id87692 . -65) (undo-tree-id87693 . -65) (undo-tree-id87694 . -65) (undo-tree-id87695 . -65) (undo-tree-id87696 . -41) (undo-tree-id87697 . -41) (undo-tree-id87698 . -41) (undo-tree-id87699 . -41) (undo-tree-id87700 . -41) (undo-tree-id87701 . -41) (undo-tree-id87702 . -41) (undo-tree-id87703 . -41) (undo-tree-id87704 . -41) (undo-tree-id87705 . -41) (undo-tree-id87706 . -41) (undo-tree-id87707 . -41) (undo-tree-id87708 . -41) (undo-tree-id87709 . -41) (undo-tree-id87710 . -41) (undo-tree-id87711 . -41) (undo-tree-id87712 . -41) (undo-tree-id87713 . -41) (undo-tree-id87714 . -41) (undo-tree-id87715 . -41) (undo-tree-id87716 . -41) (undo-tree-id87717 . -44) (undo-tree-id87718 . -44) (undo-tree-id87719 . -44) (undo-tree-id87720 . -44) (undo-tree-id87721 . -44) (undo-tree-id87722 . -44) (undo-tree-id87723 . -44) (undo-tree-id87724 . -44) (undo-tree-id87725 . -44) (undo-tree-id87726 . -44) (undo-tree-id87727 . -44) (undo-tree-id87728 . -50) (undo-tree-id87729 . -50) (undo-tree-id87730 . -50) (undo-tree-id87731 . -50) (undo-tree-id87732 . -50) (undo-tree-id87733 . -50) (undo-tree-id87734 . -50) (undo-tree-id87735 . -50) (undo-tree-id87736 . -50) (undo-tree-id87737 . -50) (undo-tree-id87738 . -50) (undo-tree-id87739 . -54) (undo-tree-id87740 . -54) (undo-tree-id87741 . -54) (undo-tree-id87742 . -54) (undo-tree-id87743 . -54) (undo-tree-id87744 . -54) (undo-tree-id87745 . -54) (undo-tree-id87746 . -54) (undo-tree-id87747 . -54) (undo-tree-id87748 . -54) (undo-tree-id87749 . -54) (undo-tree-id87750 . -54) (undo-tree-id87751 . -54) (undo-tree-id87752 . -54) (undo-tree-id87753 . -54) (undo-tree-id87754 . -54) (undo-tree-id87755 . -61) (undo-tree-id87756 . -61) (undo-tree-id87757 . -61) (undo-tree-id87758 . -61) (undo-tree-id87759 . -61) (undo-tree-id87760 . -61) (undo-tree-id87761 . -65) (undo-tree-id87762 . -65) (undo-tree-id87763 . -65) (undo-tree-id87764 . -65) (undo-tree-id87765 . -65) (undo-tree-id87766 . -65) (undo-tree-id87767 . -70) (undo-tree-id87768 . -70) (undo-tree-id87769 . -70) (undo-tree-id87770 . -70) (undo-tree-id87771 . -70) (undo-tree-id87772 . -70) (undo-tree-id87773 . -70) (undo-tree-id87774 . -70) (undo-tree-id87775 . -70) (undo-tree-id87776 . -70) (undo-tree-id87777 . -70) (undo-tree-id87778 . -82) (undo-tree-id87779 . -82) (undo-tree-id87780 . -82) (undo-tree-id87781 . -82) (undo-tree-id87782 . -82) (undo-tree-id87783 . -82) (undo-tree-id87784 . -83) (undo-tree-id87785 . -83) (undo-tree-id87786 . -83) (undo-tree-id87787 . -83) (undo-tree-id87788 . -83) (undo-tree-id87789 . -83) (undo-tree-id87790 . -87) (undo-tree-id87791 . -87) (undo-tree-id87792 . -87) (undo-tree-id87793 . -87) (undo-tree-id87794 . -87) (undo-tree-id87795 . -87) (undo-tree-id87796 . -90) (undo-tree-id87797 . -90) (undo-tree-id87798 . -90) (undo-tree-id87799 . -90) (undo-tree-id87800 . -90) (undo-tree-id87801 . -90) (undo-tree-id87802 . -98) (undo-tree-id87803 . -98) (undo-tree-id87804 . -98) (undo-tree-id87805 . -98) (undo-tree-id87806 . -98) (undo-tree-id87807 . -98) (undo-tree-id87808 . -103) (undo-tree-id87809 . -103) (undo-tree-id87810 . -103) (undo-tree-id87811 . -103) (undo-tree-id87812 . -103) (undo-tree-id87813 . -103) (undo-tree-id87814 . -110) (undo-tree-id87815 . -110) (undo-tree-id87816 . -110) (undo-tree-id87817 . -110) (undo-tree-id87818 . -110) (undo-tree-id87819 . -110) (undo-tree-id87820 . -117) (undo-tree-id87821 . -117) (undo-tree-id87822 . -117) (undo-tree-id87823 . -117) (undo-tree-id87824 . -117) (undo-tree-id87825 . -117) (undo-tree-id87826 . -124) (undo-tree-id87827 . -124) (undo-tree-id87828 . -124) (undo-tree-id87829 . -124) (undo-tree-id87830 . -124) (undo-tree-id87831 . -124) (undo-tree-id87832 . -124) (undo-tree-id87833 . -124) (undo-tree-id87834 . -124) (undo-tree-id87835 . -124) (undo-tree-id87836 . -124) (undo-tree-id87837 . -124) (undo-tree-id87838 . -124) (undo-tree-id87839 . -124) (undo-tree-id87840 . -124) (undo-tree-id87841 . -124) (undo-tree-id87842 . -124) (undo-tree-id87843 . -124) (undo-tree-id87844 . -124) (undo-tree-id87845 . -124) (undo-tree-id87846 . -124) (undo-tree-id87847 . -129) (undo-tree-id87848 . -129) (undo-tree-id87849 . -129) (undo-tree-id87850 . -129) (undo-tree-id87851 . -129) (undo-tree-id87852 . -129) (undo-tree-id87853 . -129) (undo-tree-id87854 . -129) (undo-tree-id87855 . -129) (undo-tree-id87856 . -129) (undo-tree-id87857 . -129) (undo-tree-id87858 . -129) (undo-tree-id87859 . -129) (undo-tree-id87860 . -129) (undo-tree-id87861 . -129) (undo-tree-id87862 . -129) (undo-tree-id87863 . -135) (undo-tree-id87864 . -135) (undo-tree-id87865 . -135) (undo-tree-id87866 . -135) (undo-tree-id87867 . -135) (undo-tree-id87868 . -135) (undo-tree-id87869 . -135) (undo-tree-id87870 . -135) (undo-tree-id87871 . -135) (undo-tree-id87872 . -135) (undo-tree-id87873 . -135) (undo-tree-id87874 . -137) (undo-tree-id87875 . -137) (undo-tree-id87876 . -137) (undo-tree-id87877 . -137) (undo-tree-id87878 . -137) (undo-tree-id87879 . -137) (undo-tree-id87880 . -137) (undo-tree-id87881 . -137) (undo-tree-id87882 . -137) (undo-tree-id87883 . -137) (undo-tree-id87884 . -137) (undo-tree-id87885 . -137) (undo-tree-id87886 . -137) (undo-tree-id87887 . -137) (undo-tree-id87888 . -137) (undo-tree-id87889 . -137) (undo-tree-id87890 . -138) (undo-tree-id87891 . -138) (undo-tree-id87892 . -138) (undo-tree-id87893 . -138) (undo-tree-id87894 . -138) (undo-tree-id87895 . -138) (undo-tree-id87896 . -138) (undo-tree-id87897 . -138) (undo-tree-id87898 . -138) (undo-tree-id87899 . -138) (undo-tree-id87900 . -138) (undo-tree-id87901 . -139) (undo-tree-id87902 . -139) (undo-tree-id87903 . -139) (undo-tree-id87904 . -139) (undo-tree-id87905 . -139) (undo-tree-id87906 . -139) (undo-tree-id87907 . -139) (undo-tree-id87908 . -139) (undo-tree-id87909 . -139) (undo-tree-id87910 . -139) (undo-tree-id87911 . -139) (undo-tree-id87912 . -140) (undo-tree-id87913 . -140) (undo-tree-id87914 . -140) (undo-tree-id87915 . -140) (undo-tree-id87916 . -140) (undo-tree-id87917 . -140) (undo-tree-id87918 . -140) (undo-tree-id87919 . -140) (undo-tree-id87920 . -140) (undo-tree-id87921 . -140) (undo-tree-id87922 . -140) (undo-tree-id87923 . -142) (undo-tree-id87924 . -142) (undo-tree-id87925 . -142) (undo-tree-id87926 . -142) (undo-tree-id87927 . -142) (undo-tree-id87928 . -142) (undo-tree-id87929 . -142) (undo-tree-id87930 . -142) (undo-tree-id87931 . -142) (undo-tree-id87932 . -142) (undo-tree-id87933 . -142) (undo-tree-id87934 . -147) (undo-tree-id87935 . -147) (undo-tree-id87936 . -147) (undo-tree-id87937 . -147) (undo-tree-id87938 . -147) (undo-tree-id87939 . -147) (undo-tree-id87940 . -147) (undo-tree-id87941 . -147) (undo-tree-id87942 . -147) (undo-tree-id87943 . -147) (undo-tree-id87944 . -147) (undo-tree-id87945 . -153) (undo-tree-id87946 . -153) (undo-tree-id87947 . -153) (undo-tree-id87948 . -153) (undo-tree-id87949 . -153) (undo-tree-id87950 . -153) (undo-tree-id87951 . -153) (undo-tree-id87952 . -153) (undo-tree-id87953 . -153) (undo-tree-id87954 . -153) (undo-tree-id87955 . -153) (undo-tree-id87956 . -153) (undo-tree-id87957 . -153) (undo-tree-id87958 . -153) (undo-tree-id87959 . -153) (undo-tree-id87960 . -153) (undo-tree-id87961 . -157) (undo-tree-id87962 . -157) (undo-tree-id87963 . -157) (undo-tree-id87964 . -157) (undo-tree-id87965 . -157) (undo-tree-id87966 . -157) (undo-tree-id87967 . -157) (undo-tree-id87968 . -157) (undo-tree-id87969 . -157) (undo-tree-id87970 . -157) (undo-tree-id87971 . -157) (undo-tree-id87972 . -163) (undo-tree-id87973 . -163) (undo-tree-id87974 . -163) (undo-tree-id87975 . -163) (undo-tree-id87976 . -163) (undo-tree-id87977 . -163) (undo-tree-id87978 . -163) (undo-tree-id87979 . -163) (undo-tree-id87980 . -163) (undo-tree-id87981 . -163) (undo-tree-id87982 . -163) (undo-tree-id87983 . -167) (undo-tree-id87984 . -167) (undo-tree-id87985 . -167) (undo-tree-id87986 . -167) (undo-tree-id87987 . -167) (undo-tree-id87988 . -167) (undo-tree-id87989 . -167) (undo-tree-id87990 . -167) (undo-tree-id87991 . -167) (undo-tree-id87992 . -167) (undo-tree-id87993 . -167) (undo-tree-id87994 . -172) (undo-tree-id87995 . -172) (undo-tree-id87996 . -172) (undo-tree-id87997 . -172) (undo-tree-id87998 . -172) (undo-tree-id87999 . -172) (undo-tree-id88000 . -172) (undo-tree-id88001 . -172) (undo-tree-id88002 . -172) (undo-tree-id88003 . -172) (undo-tree-id88004 . -172) (undo-tree-id88005 . -175) (undo-tree-id88006 . -175) (undo-tree-id88007 . -175) (undo-tree-id88008 . -175) (undo-tree-id88009 . -175) (undo-tree-id88010 . -175) (undo-tree-id88011 . -175) (undo-tree-id88012 . -175) (undo-tree-id88013 . -175) (undo-tree-id88014 . -175) (undo-tree-id88015 . -175) (undo-tree-id88016 . -181) (undo-tree-id88017 . -181) (undo-tree-id88018 . -181) (undo-tree-id88019 . -181) (undo-tree-id88020 . -181) (undo-tree-id88021 . -181) (undo-tree-id88022 . -181) (undo-tree-id88023 . -181) (undo-tree-id88024 . -181) (undo-tree-id88025 . -181) (undo-tree-id88026 . -181) (undo-tree-id88027 . -183) (undo-tree-id88028 . -183) (undo-tree-id88029 . -183) (undo-tree-id88030 . -183) (undo-tree-id88031 . -183) (undo-tree-id88032 . -183) (undo-tree-id88033 . -183) (undo-tree-id88034 . -183) (undo-tree-id88035 . -183) (undo-tree-id88036 . -183) (undo-tree-id88037 . -183) (undo-tree-id88038 . -183) (undo-tree-id88039 . -183) (undo-tree-id88040 . -183) (undo-tree-id88041 . -183) (undo-tree-id88042 . -183) (undo-tree-id88043 . -183) (undo-tree-id88044 . -183) (undo-tree-id88045 . -183) (undo-tree-id88046 . -183) (undo-tree-id88047 . -183) (undo-tree-id88048 . -184) (undo-tree-id88049 . -184) (undo-tree-id88050 . -184) (undo-tree-id88051 . -184) (undo-tree-id88052 . -184) (undo-tree-id88053 . -184) (undo-tree-id88054 . -184) (undo-tree-id88055 . -184) (undo-tree-id88056 . -184) (undo-tree-id88057 . -184) (undo-tree-id88058 . -184) (undo-tree-id88059 . -184) (undo-tree-id88060 . -184) (undo-tree-id88061 . -184) (undo-tree-id88062 . -184) (undo-tree-id88063 . -184) (undo-tree-id88064 . -184) (undo-tree-id88065 . -184) (undo-tree-id88066 . -184) (undo-tree-id88067 . -39) (17488 . 17527) (#(" For example, when a recurrent layer" 0 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 17633) (t 25767 36644 824417 923000)) nil (25767 36670 52994 569000) 0 nil])
([nil nil ((17964 . 17965) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17964) (undo-tree-id88068 . -1) (17888 . 17889) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17888) (undo-tree-id88069 . -1) (17813 . 17814) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17813) (undo-tree-id88070 . -1) (17740 . 17741) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17740) (undo-tree-id88071 . -1) (17672 . 17673) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -17672) (undo-tree-id88072 . 1) (undo-tree-id88073 . -1) 17636 (t 25767 36670 145212 266000)) nil (25767 36688 762714 1000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -18012) (undo-tree-id88319 . -2) (undo-tree-id88320 . -2) (undo-tree-id88321 . -2) (undo-tree-id88322 . -2) (undo-tree-id88323 . -2) (undo-tree-id88324 . -2) (undo-tree-id88325 . -2) (undo-tree-id88326 . -2) (undo-tree-id88327 . -2) (undo-tree-id88328 . -2) 18014 (18011 . 18014) (t 25767 36675 593381 538000) 17737) nil (25767 36695 910826 128000) 0 nil] [nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -18012) (undo-tree-id88074 . -2) (undo-tree-id88075 . -2) (undo-tree-id88076 . -2) (undo-tree-id88077 . -2) (undo-tree-id88078 . -2) (undo-tree-id88079 . -2) (undo-tree-id88080 . -2) (undo-tree-id88081 . -2) (undo-tree-id88082 . -2) (undo-tree-id88083 . -2) 18014 (18011 . 18014) (t 25767 36675 593381 538000) 17737) ((#("
  " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 18011) (undo-tree-id88084 . -3) (undo-tree-id88085 . -3) (undo-tree-id88086 . -3) (undo-tree-id88087 . -3) (undo-tree-id88088 . -3) (undo-tree-id88089 . -3) (undo-tree-id88090 . -3) (undo-tree-id88091 . -3) (undo-tree-id88092 . -3) (undo-tree-id88093 . -1) (undo-tree-id88094 . -1) (18012 . 18014)) (25767 36688 762046 726000) 0 nil])
([nil nil ((17635 . 18014) (#("- If the mask propagates all the way to the output (in models that output sequences, which is not the case in this example), then it will be applied to the losses as well, so the masked time steps will not contribute to the loss (their loss will be 0).

- For example, when a recurrent layer encounters a masked time step, it simply copies the output from the previous time step." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 54 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 54 55 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 55 129 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 129 130 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 130 205 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 205 206 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 206 252 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 252 253 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 253 254 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 254 255 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 255 256 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 256 291 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 291 292 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 292 356 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 356 359 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 359 360 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 360 379 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 17635) (undo-tree-id88095 . 87) (undo-tree-id88096 . -379) (undo-tree-id88097 . -379) (undo-tree-id88098 . -379) (undo-tree-id88099 . -379) (undo-tree-id88100 . -379) (undo-tree-id88101 . -379) (undo-tree-id88102 . -379) (undo-tree-id88103 . -379) (undo-tree-id88104 . -379) (undo-tree-id88105 . -379) (undo-tree-id88106 . -379) (undo-tree-id88107 . -356) (undo-tree-id88108 . -356) (undo-tree-id88109 . -356) (undo-tree-id88110 . -356) (undo-tree-id88111 . -356) (undo-tree-id88112 . -356) (undo-tree-id88113 . -356) (undo-tree-id88114 . -356) (undo-tree-id88115 . -356) (undo-tree-id88116 . -356) (undo-tree-id88117 . -356) (undo-tree-id88118 . -356) (undo-tree-id88119 . -356) (undo-tree-id88120 . -356) (undo-tree-id88121 . -356) (undo-tree-id88122 . -356) (undo-tree-id88123 . -356) (undo-tree-id88124 . -356) (undo-tree-id88125 . -356) (undo-tree-id88126 . -356) (undo-tree-id88127 . -356) (undo-tree-id88128 . -356) (undo-tree-id88129 . -356) (undo-tree-id88130 . -356) (undo-tree-id88131 . -295) (undo-tree-id88132 . -295) (undo-tree-id88133 . -295) (undo-tree-id88134 . -295) (undo-tree-id88135 . -295) (undo-tree-id88136 . -295) (undo-tree-id88137 . -295) (undo-tree-id88138 . -295) (undo-tree-id88139 . -295) (undo-tree-id88140 . -295) (undo-tree-id88141 . -295) (undo-tree-id88142 . -295) (undo-tree-id88143 . -295) (undo-tree-id88144 . -295) (undo-tree-id88145 . -295) (undo-tree-id88146 . -295) (undo-tree-id88147 . -295) (undo-tree-id88148 . -295) (undo-tree-id88149 . -295) (undo-tree-id88150 . -295) (undo-tree-id88151 . -295) (undo-tree-id88152 . -356) (undo-tree-id88153 . -356) (undo-tree-id88154 . -356) (undo-tree-id88155 . -356) (undo-tree-id88156 . -356) (undo-tree-id88157 . -356) (undo-tree-id88158 . -356) (undo-tree-id88159 . -356) (undo-tree-id88160 . -356) (undo-tree-id88161 . -356) (undo-tree-id88162 . -356) (undo-tree-id88163 . -356) (undo-tree-id88164 . -379) (undo-tree-id88165 . -379) (undo-tree-id88166 . -379) (undo-tree-id88167 . -379) (undo-tree-id88168 . -379) (undo-tree-id88169 . -379) (undo-tree-id88170 . -379) (undo-tree-id88171 . -379) (undo-tree-id88172 . -379) (undo-tree-id88173 . -379) (undo-tree-id88174 . -379) (undo-tree-id88175 . -379) (undo-tree-id88176 . -379) (undo-tree-id88177 . -379) (undo-tree-id88178 . -379) (undo-tree-id88179 . -379) (undo-tree-id88180 . -379) (undo-tree-id88181 . -379) (undo-tree-id88182 . -379) (undo-tree-id88183 . -379) (undo-tree-id88184 . -379) (undo-tree-id88185 . -379) (undo-tree-id88186 . -379) (undo-tree-id88187 . -379) (undo-tree-id88188 . -379) (undo-tree-id88189 . -379) (undo-tree-id88190 . -379) (undo-tree-id88191 . -379) (undo-tree-id88192 . -379) (undo-tree-id88193 . -379) (undo-tree-id88194 . -379) (undo-tree-id88195 . -379) (undo-tree-id88196 . -379) (undo-tree-id88197 . -379) (undo-tree-id88198 . -379) (undo-tree-id88199 . -379) (undo-tree-id88200 . -379) (undo-tree-id88201 . -379) (undo-tree-id88202 . -379) (undo-tree-id88203 . -379) (undo-tree-id88204 . -379) (undo-tree-id88205 . -379) (undo-tree-id88206 . -379) (undo-tree-id88207 . -379) (undo-tree-id88208 . -317) (undo-tree-id88209 . -317) (undo-tree-id88210 . -317) (undo-tree-id88211 . -317) (undo-tree-id88212 . -317) (undo-tree-id88213 . -317) (undo-tree-id88214 . -317) (undo-tree-id88215 . -317) (undo-tree-id88216 . -317) (undo-tree-id88217 . -317) (undo-tree-id88218 . -317) (undo-tree-id88219 . -317) (undo-tree-id88220 . -317) (undo-tree-id88221 . -317) (undo-tree-id88222 . -317) (undo-tree-id88223 . -317) (undo-tree-id88224 . -317) (undo-tree-id88225 . -317) (undo-tree-id88226 . -317) (undo-tree-id88227 . -317) (undo-tree-id88228 . -317) (undo-tree-id88229 . -378) (undo-tree-id88230 . -378) (undo-tree-id88231 . -378) (undo-tree-id88232 . -378) (undo-tree-id88233 . -378) (undo-tree-id88234 . -378) (undo-tree-id88235 . -378) (undo-tree-id88236 . -378) (undo-tree-id88237 . -378) (undo-tree-id88238 . -378) (undo-tree-id88239 . -378) (undo-tree-id88240 . -378) (undo-tree-id88241 . -378) (undo-tree-id88242 . -378) (undo-tree-id88243 . -378) (undo-tree-id88244 . -378) (undo-tree-id88245 . -379) (undo-tree-id88246 . -379) (undo-tree-id88247 . -379) (undo-tree-id88248 . -379) (undo-tree-id88249 . -379) (undo-tree-id88250 . -379) (undo-tree-id88251 . -379) (undo-tree-id88252 . -379) (undo-tree-id88253 . -379) (undo-tree-id88254 . -379) (undo-tree-id88255 . -379) (undo-tree-id88256 . -379) (undo-tree-id88257 . -379) (undo-tree-id88258 . -379) (undo-tree-id88259 . -379) (undo-tree-id88260 . -379) (undo-tree-id88261 . -379) (undo-tree-id88262 . -379) (undo-tree-id88263 . -379) (undo-tree-id88264 . -254) (17635 . 17889) (#(" If the mask propagates all the way to the output (in models that output sequences, which is not the case in this example), then it will be applied to the losses as well, so the masked time steps will not contribute to the loss (their loss will be 0)." 0 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 53 54 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 54 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 128 129 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 129 204 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 204 205 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 205 251 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 17760) (undo-tree-id88265 . -204) (undo-tree-id88266 . -251) (undo-tree-id88267 . -251) (undo-tree-id88268 . -251) (undo-tree-id88269 . -251) (undo-tree-id88270 . -251) (undo-tree-id88271 . -251) (undo-tree-id88272 . -251) (undo-tree-id88273 . -251) (undo-tree-id88274 . -251) (undo-tree-id88275 . -190) (undo-tree-id88276 . -190) (undo-tree-id88277 . -190) (undo-tree-id88278 . -190) (undo-tree-id88279 . -190) (undo-tree-id88280 . -190) (undo-tree-id88281 . -190) (undo-tree-id88282 . -190) (undo-tree-id88283 . -190) (undo-tree-id88284 . -190) (undo-tree-id88285 . -190) (undo-tree-id88286 . -129) (undo-tree-id88287 . -129) (undo-tree-id88288 . -129) (undo-tree-id88289 . -129) (undo-tree-id88290 . -129) (undo-tree-id88291 . -129) (undo-tree-id88292 . -129) (undo-tree-id88293 . -129) (undo-tree-id88294 . -129) (undo-tree-id88295 . -129) (undo-tree-id88296 . -129) (undo-tree-id88297 . -66) (undo-tree-id88298 . -66) (undo-tree-id88299 . -66) (undo-tree-id88300 . -66) (undo-tree-id88301 . -66) (undo-tree-id88302 . -66) (undo-tree-id88303 . -66) (undo-tree-id88304 . -66) (undo-tree-id88305 . -66) (undo-tree-id88306 . -66) (undo-tree-id88307 . -66) (undo-tree-id88308 . -1) (undo-tree-id88309 . -1) (undo-tree-id88310 . -1) (undo-tree-id88311 . -1) (undo-tree-id88312 . -1) (undo-tree-id88313 . -1) (undo-tree-id88314 . -1) (undo-tree-id88315 . -1) (undo-tree-id88316 . -1) (undo-tree-id88317 . -1) (undo-tree-id88318 . -1)) nil (25767 36715 431035 355000) 0 nil])
nil
([nil nil ((#("WARNING
" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 18016) (undo-tree-id88501 . -7) (undo-tree-id88502 . -6) (undo-tree-id88503 . -6) (undo-tree-id88504 . -6) (undo-tree-id88505 . -6) (undo-tree-id88506 . -6) (undo-tree-id88507 . -6) (undo-tree-id88508 . -6) (undo-tree-id88509 . -6) (undo-tree-id88510 . -6) (undo-tree-id88511 . -6) (undo-tree-id88512 . -6) (undo-tree-id88513 . -6) (undo-tree-id88514 . -6) (undo-tree-id88515 . -6) (undo-tree-id88516 . -6) (undo-tree-id88517 . -6) (undo-tree-id88518 . -6) (undo-tree-id88519 . -6) (undo-tree-id88520 . -6) (undo-tree-id88521 . -6) (undo-tree-id88522 . -6) (undo-tree-id88523 . -6) (undo-tree-id88524 . -6) (undo-tree-id88525 . -6) (undo-tree-id88526 . -6) (undo-tree-id88527 . -6) (undo-tree-id88528 . -6) (undo-tree-id88529 . -6) (undo-tree-id88530 . -6) (undo-tree-id88531 . -6) (undo-tree-id88532 . -6) (undo-tree-id88533 . -6) (undo-tree-id88534 . -6) (undo-tree-id88535 . -6) (undo-tree-id88536 . -6) (undo-tree-id88537 . -6) (undo-tree-id88538 . -6) (undo-tree-id88539 . -6) (undo-tree-id88540 . -6) (undo-tree-id88541 . -6) (undo-tree-id88542 . -6) (undo-tree-id88543 . -6) (undo-tree-id88544 . -6) (undo-tree-id88545 . -6) (undo-tree-id88546 . -6) (undo-tree-id88547 . -6) (undo-tree-id88548 . -6) (undo-tree-id88549 . -6) (undo-tree-id88550 . -6) (undo-tree-id88551 . -6) (undo-tree-id88552 . -8) 18022 (t 25767 36695 998010 494000)) nil (25767 36735 576578 46000) 0 nil] [nil nil ((#("WARNING
" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 18016) (undo-tree-id88329 . -7) (undo-tree-id88330 . -6) (undo-tree-id88331 . -6) (undo-tree-id88332 . -6) (undo-tree-id88333 . -6) (undo-tree-id88334 . -6) (undo-tree-id88335 . -6) (undo-tree-id88336 . -6) (undo-tree-id88337 . -6) (undo-tree-id88338 . -6) (undo-tree-id88339 . -6) (undo-tree-id88340 . -6) (undo-tree-id88341 . -6) (undo-tree-id88342 . -6) (undo-tree-id88343 . -6) (undo-tree-id88344 . -6) (undo-tree-id88345 . -6) (undo-tree-id88346 . -6) (undo-tree-id88347 . -6) (undo-tree-id88348 . -6) (undo-tree-id88349 . -6) (undo-tree-id88350 . -6) (undo-tree-id88351 . -6) (undo-tree-id88352 . -6) (undo-tree-id88353 . -6) (undo-tree-id88354 . -6) (undo-tree-id88355 . -6) (undo-tree-id88356 . -6) (undo-tree-id88357 . -6) (undo-tree-id88358 . -6) (undo-tree-id88359 . -6) (undo-tree-id88360 . -6) (undo-tree-id88361 . -6) (undo-tree-id88362 . -6) (undo-tree-id88363 . -6) (undo-tree-id88364 . -6) (undo-tree-id88365 . -8) 18022 (t 25767 36695 998010 494000)) ((18016 . 18024)) (25767 36715 430564 743000) 0 nil])
([nil nil ((18016 . 18017) (18015 . 18016)) nil (25767 36735 576313 340000) 0 nil])
nil
([nil nil ((18017 . 18018)) nil (25767 36735 576311 941000) 0 nil])
([nil current ((18175 . 18176) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -18175) (undo-tree-id88366 . -1) (18093 . 18094) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -18093) (undo-tree-id88367 . -1) (18017 . 18018) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 18017) (undo-tree-id88368 . -1) (undo-tree-id88369 . -1) (undo-tree-id88370 . -1) (undo-tree-id88371 . -1) (undo-tree-id88372 . -1) (undo-tree-id88373 . -1) (undo-tree-id88374 . -1) (undo-tree-id88375 . -1) (undo-tree-id88376 . -1) (undo-tree-id88377 . -1) (undo-tree-id88378 . -1) (undo-tree-id88379 . -1) (undo-tree-id88380 . -1) (undo-tree-id88381 . -1) (undo-tree-id88382 . -1) (undo-tree-id88383 . -1) (undo-tree-id88384 . -1) (undo-tree-id88385 . -1) (undo-tree-id88386 . -1) (undo-tree-id88387 . -1) (undo-tree-id88388 . -1) (undo-tree-id88389 . -1) (undo-tree-id88390 . -1) (undo-tree-id88391 . -1) (undo-tree-id88392 . -1) (undo-tree-id88393 . -1) (undo-tree-id88394 . -1) (undo-tree-id88395 . -1) (undo-tree-id88396 . -1) (undo-tree-id88397 . -1) (undo-tree-id88398 . -1) (undo-tree-id88399 . -1) (undo-tree-id88400 . -1) (undo-tree-id88401 . -1) (undo-tree-id88402 . -1) (undo-tree-id88403 . -1) (undo-tree-id88404 . -1) (undo-tree-id88405 . -1) (undo-tree-id88406 . -1) (undo-tree-id88407 . -1) (undo-tree-id88408 . -1) (undo-tree-id88409 . -1) (undo-tree-id88410 . -1) (undo-tree-id88411 . -1) (undo-tree-id88412 . -1) (undo-tree-id88413 . -1) (undo-tree-id88414 . -1) (undo-tree-id88415 . -1) (undo-tree-id88416 . -1) (undo-tree-id88417 . -1) (undo-tree-id88418 . -1) (undo-tree-id88419 . -1) (undo-tree-id88420 . -1) (undo-tree-id88421 . -1) (undo-tree-id88422 . -1) (undo-tree-id88423 . -1) (undo-tree-id88424 . -1) (undo-tree-id88425 . -1) (undo-tree-id88426 . -1) (undo-tree-id88427 . -1) (undo-tree-id88428 . -1) (undo-tree-id88429 . -1) (undo-tree-id88430 . -1) (undo-tree-id88431 . -1) (undo-tree-id88432 . -1) (undo-tree-id88433 . -1) (undo-tree-id88434 . -1) (undo-tree-id88435 . -1) (undo-tree-id88436 . -1) (undo-tree-id88437 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -18018) (undo-tree-id88438 . -1) (undo-tree-id88439 . -1) (undo-tree-id88440 . 1) (undo-tree-id88441 . -1) (undo-tree-id88442 . -1) (undo-tree-id88443 . -1) (undo-tree-id88444 . -1) (undo-tree-id88445 . -1) (undo-tree-id88446 . -1) (undo-tree-id88447 . -1) (undo-tree-id88448 . -1) (undo-tree-id88449 . -1) (undo-tree-id88450 . -1) (undo-tree-id88451 . -1) (undo-tree-id88452 . -1) (undo-tree-id88453 . -1) (undo-tree-id88454 . -1) (undo-tree-id88455 . -1) (undo-tree-id88456 . -1) (undo-tree-id88457 . -1) (undo-tree-id88458 . -1) (undo-tree-id88459 . -1) (undo-tree-id88460 . -1) (undo-tree-id88461 . -1) (undo-tree-id88462 . -1) (undo-tree-id88463 . -1) (undo-tree-id88464 . -1) (undo-tree-id88465 . -1) (undo-tree-id88466 . -1) (undo-tree-id88467 . -1) (undo-tree-id88468 . -1) (undo-tree-id88469 . -1) (undo-tree-id88470 . -1) (undo-tree-id88471 . -1) (undo-tree-id88472 . -1) (undo-tree-id88473 . -1) (undo-tree-id88474 . -1) (undo-tree-id88475 . -1) (undo-tree-id88476 . -1) (undo-tree-id88477 . -1) (undo-tree-id88478 . -1) (undo-tree-id88479 . -1) (undo-tree-id88480 . -1) (undo-tree-id88481 . -1) (undo-tree-id88482 . -1) (undo-tree-id88483 . -1) (undo-tree-id88484 . -1) (undo-tree-id88485 . -1) (undo-tree-id88486 . -1) (undo-tree-id88487 . -1) (undo-tree-id88488 . -1) (undo-tree-id88489 . -1) (undo-tree-id88490 . -1) (undo-tree-id88491 . -1) (undo-tree-id88492 . -1) (undo-tree-id88493 . -1) (undo-tree-id88494 . -1) (undo-tree-id88495 . -1) (undo-tree-id88496 . -1) (undo-tree-id88497 . -1) (undo-tree-id88498 . -1) (undo-tree-id88499 . -1) (undo-tree-id88500 . -1) 18017) nil (25767 36735 576303 944000) 0 nil])
nil
