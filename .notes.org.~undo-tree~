(undo-tree-save-format-version . 1)
"05b4d997c601ab33e7c120386019ef7437c0824f"
[nil nil nil nil (25755 7153 807666 622000) 0 nil]
([nil nil ((#("m" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21901) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) 21902 (#("p" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21902) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("l" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21903) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("e" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21904) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (#("m" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21905) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (#("e" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21906) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("n" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21907) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("t" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21908) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("a" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21909) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("t" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21910) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("i" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21911) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (#("o" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21912) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (#("n" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21913) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) 21914 (21906 . 21914) (#("n" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21906) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (#("t" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -21907) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) 21908 (21899 . 21908) (t 25755 6058 815559 160000)) nil (25755 7153 807592 953000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 21900) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1)) nil (25755 7153 806577 112000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25062 . 25063) (nil fontified nil 25050 . 25063) (nil fontified nil 24977 . 25050) (nil fontified nil 24907 . 24977) (nil fontified nil 24837 . 24907) (nil fontified nil 24774 . 24837) (nil fontified nil 24700 . 24774) (nil fontified nil 24679 . 24700) (nil fontified nil 24606 . 24679) (nil fontified nil 24532 . 24606) (nil fontified nil 24454 . 24532) (nil fontified nil 24382 . 24454) (nil fontified nil 24258 . 24382) (nil fontified nil 24224 . 24258) (nil fontified nil 24182 . 24224) (nil fontified nil 24159 . 24182) (nil fontified nil 24109 . 24159) (nil fontified nil 24063 . 24109) (nil fontified nil 24002 . 24063) (nil fontified nil 23984 . 24002) (nil fontified nil 23910 . 23984) (nil fontified nil 23867 . 23910) (nil fontified nil 23822 . 23867) (nil fontified nil 23789 . 23822) (nil fontified nil 23785 . 23789) (nil fontified nil 23714 . 23785) (nil fontified nil 23680 . 23714) (nil fontified nil 23625 . 23680) (nil fontified nil 23549 . 23625) (nil fontified nil 23479 . 23549) (nil fontified nil 23409 . 23479) (nil fontified nil 23335 . 23409) (nil fontified nil 23260 . 23335) (nil fontified nil 23185 . 23260) (nil fontified nil 23109 . 23185) (nil fontified nil 23039 . 23109) (nil fontified nil 23004 . 23039) (nil fontified nil 22981 . 23004) (nil fontified nil 22950 . 22981) (nil fontified nil 22934 . 22950) (nil fontified nil 22921 . 22934) (nil fontified nil 22890 . 22921) (nil fontified nil 22879 . 22890) (nil fontified nil 22855 . 22879) (nil fontified nil 22820 . 22855) (nil fontified nil 22787 . 22820) (nil fontified nil 22738 . 22787) (nil fontified nil 22717 . 22738) (nil fontified nil 22701 . 22717) (nil fontified nil 22645 . 22701) (nil fontified nil 22612 . 22645) (nil fontified nil 22569 . 22612) (nil fontified nil 22552 . 22569) (nil fontified nil 22517 . 22552) (nil fontified nil 22484 . 22517) (nil fontified nil 22435 . 22484) (nil fontified nil 22414 . 22435) (nil fontified nil 22362 . 22414) (nil fontified nil 22335 . 22362) (nil fontified nil 22266 . 22335) (nil fontified nil 22226 . 22266) (nil fontified nil 22219 . 22226) (nil fontified nil 22148 . 22219) (nil fontified nil 22077 . 22148) (nil fontified nil 22011 . 22077) (nil fontified nil 21941 . 22011) (nil fontified nil 21900 . 21941) (21900 . 25063) 21899 (t 25755 7153 829128 993000)) nil (25755 7188 771114 653000) 0 nil])
([nil nil ((apply yas--snippet-revive 21941 22021 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (21941 . 22021) (#("src" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 21941) (undo-tree-id1421 . -1) (undo-tree-id1422 . -3) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -3) (undo-tree-id1461 . -3) (undo-tree-id1462 . -3) (undo-tree-id1463 . -3) (undo-tree-id1464 . -3) (undo-tree-id1465 . -3) (undo-tree-id1466 . -3) 21944 (21941 . 21944) (21940 . 21941) 21910) nil (25755 7188 771097 188000) 0 nil])
([nil nil ((#("Directory ‘/home/aulw/Dropbox/selfstudy/mlds/’ does not exist; create? (y or n) 
" 0 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 80 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1387 . -80) (undo-tree-id1388 . 1) (undo-tree-id1389 . -79) (undo-tree-id1390 . -80) (undo-tree-id1391 . -80) (undo-tree-id1392 . -80) (undo-tree-id1393 . -80) (undo-tree-id1394 . -80) (undo-tree-id1395 . -80) (undo-tree-id1396 . -80) (undo-tree-id1397 . -79) (undo-tree-id1398 . -79) (undo-tree-id1399 . -79) (undo-tree-id1400 . -79) (undo-tree-id1401 . -79) (undo-tree-id1402 . -79) (undo-tree-id1403 . -79) (undo-tree-id1404 . -79) (undo-tree-id1405 . -79) (undo-tree-id1406 . -79) (undo-tree-id1407 . -79) (undo-tree-id1408 . -79) (undo-tree-id1409 . -79) (undo-tree-id1410 . -79) (undo-tree-id1411 . -79) (undo-tree-id1412 . -79) (undo-tree-id1413 . -79) (undo-tree-id1414 . -79) (undo-tree-id1415 . -79) (undo-tree-id1416 . -79) (undo-tree-id1417 . -79) (undo-tree-id1418 . -79) (undo-tree-id1419 . -79) (undo-tree-id1420 . -81) 22020) nil (25755 7188 771043 847000) 0 nil])
([nil nil ((#("Most CNN architectures described so far are fairly straightforward to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1524 . -69) (undo-tree-id1525 . 70) (undo-tree-id1526 . -68) (undo-tree-id1527 . -68) (undo-tree-id1528 . -68) (undo-tree-id1529 . -68) (undo-tree-id1530 . -68) (undo-tree-id1531 . -68) (undo-tree-id1532 . -68) (undo-tree-id1533 . -68) (undo-tree-id1534 . -68) (undo-tree-id1535 . -68) (undo-tree-id1536 . -68) (undo-tree-id1537 . -68) (undo-tree-id1538 . -68) (undo-tree-id1539 . -68) (undo-tree-id1540 . -68) (undo-tree-id1541 . -70) (t 25755 7188 781128 442000)) nil (25755 7220 838777 128000) 0 nil])
([nil nil ((#("implement (although generally you would load a pretrained network
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1521 . -65) (undo-tree-id1522 . 66) (undo-tree-id1523 . -66)) nil (25755 7220 838761 906000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1518 . 1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1)) nil (25755 7220 838758 609000) 0 nil])
([nil nil ((#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21943) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1)) nil (25755 7220 838753 570000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1511 . 1) (undo-tree-id1512 . 1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1)) nil (25755 7220 838750 96000) 0 nil])
([nil nil ((#("sead" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1487 . -3) (undo-tree-id1488 . 4) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . 4) (undo-tree-id1509 . -4) (undo-tree-id1510 . -4)) nil (25755 7220 838744 370000) 0 nil])
([nil nil ((#(", " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1484 . -1) (undo-tree-id1485 . 2) (undo-tree-id1486 . -2)) nil (25755 7220 838722 789000) 0 nil])
([nil nil ((#("as " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1481 . -2) (undo-tree-id1482 . 3) (undo-tree-id1483 . -3)) nil (25755 7220 838719 286000) 0 nil])
([nil nil ((#("we " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1478 . -2) (undo-tree-id1479 . 3) (undo-tree-id1480 . -3)) nil (25755 7220 838715 731000) 0 nil])
([nil nil ((#("will " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1475 . -4) (undo-tree-id1476 . 5) (undo-tree-id1477 . -5)) nil (25755 7220 838711 997000) 0 nil])
([nil nil ((#("see" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1472 . -2) (undo-tree-id1473 . 3) (undo-tree-id1474 . -3)) nil (25755 7220 838705 365000) 0 nil])
([nil nil ((#("). " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1467 . -2) (undo-tree-id1468 . 3) (undo-tree-id1469 . 3) (undo-tree-id1470 . -1) (undo-tree-id1471 . -3)) nil (25755 7220 838698 615000) 0 nil])
([nil nil ((#("To illustrate the process, let’s implement a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1551 . -44) (undo-tree-id1552 . 45) (undo-tree-id1553 . -45) (t 25755 7220 896429 811000)) nil (25755 7235 743457 882000) 0 nil])
([nil nil ((#("ResNet-34 from scratch using Keras." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21941) (undo-tree-id1546 . -34) (undo-tree-id1547 . 35) (undo-tree-id1548 . 35) (undo-tree-id1549 . -6) (undo-tree-id1550 . -35)) nil (25755 7235 743453 651000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 21941) (undo-tree-id1543 . 1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1)) nil (25755 7235 743448 77000) 0 nil])
([nil nil ((21975 . 21976) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -21975) (undo-tree-id1542 . -1) 21941) nil (25755 7235 743440 299000) 0 nil])
([nil nil ((apply yas--snippet-revive 21983 22063 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (21983 . 22063) (#("src" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 21983) (undo-tree-id1831 . -1) (undo-tree-id1832 . -3) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -2) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -3) (undo-tree-id1868 . -3) (undo-tree-id1869 . -3) (undo-tree-id1870 . -3) (undo-tree-id1871 . -3) (undo-tree-id1872 . -3) (undo-tree-id1873 . 3) (undo-tree-id1874 . -3) (undo-tree-id1875 . -3) (undo-tree-id1876 . -3) (undo-tree-id1877 . -3) (undo-tree-id1878 . -3) (undo-tree-id1879 . -3) (undo-tree-id1880 . -3) (undo-tree-id1881 . -3) 21986 (21983 . 21986) (21982 . 21983) (t 25755 7235 749848 43000) 21980) nil (25755 7362 171873 942000) 0 nil])
([nil nil ((#("Directory ‘/home/aulw/Dropbox/selfstudy/mlds/’ does not exist; create? (y or n) 
" 0 80 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 80 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 21983) (undo-tree-id1797 . -80) (undo-tree-id1798 . 1) (undo-tree-id1799 . -79) (undo-tree-id1800 . -80) (undo-tree-id1801 . -80) (undo-tree-id1802 . -80) (undo-tree-id1803 . -80) (undo-tree-id1804 . -80) (undo-tree-id1805 . -80) (undo-tree-id1806 . -80) (undo-tree-id1807 . -79) (undo-tree-id1808 . -79) (undo-tree-id1809 . -79) (undo-tree-id1810 . -79) (undo-tree-id1811 . -79) (undo-tree-id1812 . -79) (undo-tree-id1813 . -79) (undo-tree-id1814 . -79) (undo-tree-id1815 . -79) (undo-tree-id1816 . -79) (undo-tree-id1817 . -79) (undo-tree-id1818 . -79) (undo-tree-id1819 . -79) (undo-tree-id1820 . -79) (undo-tree-id1821 . -79) (undo-tree-id1822 . -79) (undo-tree-id1823 . -79) (undo-tree-id1824 . -79) (undo-tree-id1825 . -79) (undo-tree-id1826 . -79) (undo-tree-id1827 . -79) (undo-tree-id1828 . -79) (undo-tree-id1829 . -79) (undo-tree-id1830 . -81) 22062) nil (25755 7362 171831 561000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 21995 21995 nil nil nil nil #s(yas--exit 22013 nil))) #s(yas--exit 22013 nil) 3 nil #s(yas--field 1 21995 21995 nil nil nil nil #s(yas--exit 22013 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -22013) (undo-tree-id1676 . -2) (21983 . 22026) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 21983) (undo-tree-id1677 . -1) (undo-tree-id1678 . -2) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) 21985 (21983 . 21985) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -21983) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) 21984 (21983 . 21984) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -21983) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -21984) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) 21985 (21983 . 21985) (21982 . 21983) 21978) nil (25755 7362 171800 309000) 0 nil])
([nil nil ((apply yas--snippet-revive 21983 22024 #s(yas--snippet nil (#s(yas--field 1 21995 21995 nil nil nil nil #s(yas--exit 22013 nil))) #s(yas--exit 22013 nil) 3 nil #s(yas--field 1 21995 21995 nil nil nil nil #s(yas--exit 22013 nil)) nil nil))) nil (25755 7362 171282 227000) 0 nil])
([nil nil ((21995 . 22001)) nil (25755 7362 363464 180000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22018) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1)) nil (25755 7371 497397 219000) 0 nil] [nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 22021) (undo-tree-id1577 . -9) (undo-tree-id1578 . -10) (undo-tree-id1579 . -10) (undo-tree-id1580 . -10) (undo-tree-id1581 . -10) (undo-tree-id1582 . -10) (undo-tree-id1583 . -10) (undo-tree-id1584 . -10) (undo-tree-id1585 . -10) (undo-tree-id1586 . -10) (undo-tree-id1587 . -10) (undo-tree-id1588 . -10) (undo-tree-id1589 . -10) (undo-tree-id1590 . -10) (undo-tree-id1591 . -10) (undo-tree-id1592 . -10) (undo-tree-id1593 . -10) (undo-tree-id1594 . -10) (undo-tree-id1595 . -10) (undo-tree-id1596 . -10) (undo-tree-id1597 . -10) (undo-tree-id1598 . -10) (undo-tree-id1599 . -10) (undo-tree-id1600 . -10) (undo-tree-id1601 . -10) (undo-tree-id1602 . -10) (undo-tree-id1603 . -10) (undo-tree-id1604 . -10) (undo-tree-id1605 . -10) (undo-tree-id1606 . -10) (undo-tree-id1607 . -10) (undo-tree-id1608 . -10) (undo-tree-id1609 . -10) (undo-tree-id1610 . -10) (undo-tree-id1611 . -10) (undo-tree-id1612 . -10) (undo-tree-id1613 . -10) (undo-tree-id1614 . -10) (undo-tree-id1615 . -10) (undo-tree-id1616 . -10) (undo-tree-id1617 . -10) (undo-tree-id1618 . -10) (undo-tree-id1619 . -10) (undo-tree-id1620 . -10) (undo-tree-id1621 . -10) (undo-tree-id1622 . -10) (undo-tree-id1623 . -10) (undo-tree-id1624 . -10) (undo-tree-id1625 . -10) (undo-tree-id1626 . -10) (undo-tree-id1627 . -10) (undo-tree-id1628 . -10) (undo-tree-id1629 . -10) (undo-tree-id1630 . -10) (undo-tree-id1631 . -10) (undo-tree-id1632 . -10) (undo-tree-id1633 . -10) (undo-tree-id1634 . -10) (undo-tree-id1635 . -10) (undo-tree-id1636 . -10) (undo-tree-id1637 . -10) (undo-tree-id1638 . -10) (undo-tree-id1639 . -10) (undo-tree-id1640 . -10) (undo-tree-id1641 . -10) (undo-tree-id1642 . -10) (undo-tree-id1643 . -10) (undo-tree-id1644 . -10) (undo-tree-id1645 . -10) (undo-tree-id1646 . -10) (undo-tree-id1647 . -10) (undo-tree-id1648 . -10) (undo-tree-id1649 . -10) (undo-tree-id1650 . -10) (undo-tree-id1651 . -10) (undo-tree-id1652 . -10) (undo-tree-id1653 . -8) (undo-tree-id1654 . -9) (undo-tree-id1655 . -9) (undo-tree-id1656 . -9) (undo-tree-id1657 . -9) (undo-tree-id1658 . -9) (undo-tree-id1659 . -9) (undo-tree-id1660 . -9) (undo-tree-id1661 . -8) (undo-tree-id1662 . -8) (undo-tree-id1663 . -8) (undo-tree-id1664 . -8) (undo-tree-id1665 . -8) (undo-tree-id1666 . -8) (undo-tree-id1667 . -8) (undo-tree-id1668 . -8) (undo-tree-id1669 . -8) (undo-tree-id1670 . -8) (undo-tree-id1671 . -8) (undo-tree-id1672 . -8) (undo-tree-id1673 . -8) (undo-tree-id1674 . -8) (undo-tree-id1675 . -10) 22029) ((22021 . 22031)) (25755 7362 172162 27000) 0 nil])
([nil nil ((#("#+end_src
" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 22020) (undo-tree-id1882 . -9) (undo-tree-id1883 . -10) (undo-tree-id1884 . -10) (undo-tree-id1885 . -10) (undo-tree-id1886 . -10) (undo-tree-id1887 . -10) (undo-tree-id1888 . -10) (undo-tree-id1889 . -10) (undo-tree-id1890 . -10) (undo-tree-id1891 . -10) (undo-tree-id1892 . -10) (undo-tree-id1893 . -10) (undo-tree-id1894 . -10) (undo-tree-id1895 . -10) (undo-tree-id1896 . -10) (undo-tree-id1897 . -10) (undo-tree-id1898 . -10) (undo-tree-id1899 . -10) (undo-tree-id1900 . -10) (undo-tree-id1901 . -10) (undo-tree-id1902 . -10) (undo-tree-id1903 . -10) (undo-tree-id1904 . -10) (undo-tree-id1905 . -10) (undo-tree-id1906 . -10) (undo-tree-id1907 . -10) (undo-tree-id1908 . -10) (undo-tree-id1909 . -10) (undo-tree-id1910 . -10) (undo-tree-id1911 . -10) (undo-tree-id1912 . -10) (undo-tree-id1913 . -10) (undo-tree-id1914 . -10) (undo-tree-id1915 . -10) (undo-tree-id1916 . -10) (undo-tree-id1917 . -10) (undo-tree-id1918 . -10) (undo-tree-id1919 . -10) (undo-tree-id1920 . -10) (undo-tree-id1921 . -10) (undo-tree-id1922 . -10) (undo-tree-id1923 . -10) (undo-tree-id1924 . -10) (undo-tree-id1925 . -10) (undo-tree-id1926 . -10) (undo-tree-id1927 . -10) (undo-tree-id1928 . -10) (undo-tree-id1929 . -10) (undo-tree-id1930 . -10) (undo-tree-id1931 . -10) (undo-tree-id1932 . -10) (undo-tree-id1933 . -10) (undo-tree-id1934 . -10) (undo-tree-id1935 . -10) (undo-tree-id1936 . -10) (undo-tree-id1937 . -10) (undo-tree-id1938 . -10) (undo-tree-id1939 . -10) (undo-tree-id1940 . -10) (undo-tree-id1941 . -10) (undo-tree-id1942 . -10) (undo-tree-id1943 . -10) (undo-tree-id1944 . -10) (undo-tree-id1945 . -10) (undo-tree-id1946 . -10) (undo-tree-id1947 . -10) (undo-tree-id1948 . -10) (undo-tree-id1949 . -10) (undo-tree-id1950 . -10) (undo-tree-id1951 . -10) (undo-tree-id1952 . -10) (undo-tree-id1953 . -10) (undo-tree-id1954 . -10) (undo-tree-id1955 . -10) (undo-tree-id1956 . -10) (undo-tree-id1957 . -10) (undo-tree-id1958 . -9) (undo-tree-id1959 . -9) (undo-tree-id1960 . -9) (undo-tree-id1961 . -9) (undo-tree-id1962 . -9) (undo-tree-id1963 . -9) (undo-tree-id1964 . -9) (undo-tree-id1965 . -8) (undo-tree-id1966 . -8) (undo-tree-id1967 . -8) (undo-tree-id1968 . -8) (undo-tree-id1969 . -8) (undo-tree-id1970 . -8) (undo-tree-id1971 . -8) (undo-tree-id1972 . -8) (undo-tree-id1973 . -8) (undo-tree-id1974 . -8) (undo-tree-id1975 . -8) (undo-tree-id1976 . -8) (undo-tree-id1977 . -8) (undo-tree-id1978 . -8) (undo-tree-id1979 . -8) (undo-tree-id1980 . -8) (undo-tree-id1981 . -8) (undo-tree-id1982 . -8) (undo-tree-id1983 . -8) (undo-tree-id1984 . -8) (undo-tree-id1985 . -8) (undo-tree-id1986 . -8) (undo-tree-id1987 . -8) (undo-tree-id1988 . -8) (undo-tree-id1989 . -8) (undo-tree-id1990 . -8) (undo-tree-id1991 . -10)) nil (25755 7371 497385 405000) 0 nil])
([nil nil ((#("layer(skip_Z)
return s" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 12 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 22785) (undo-tree-id1554 . -21) (undo-tree-id1555 . -22) (undo-tree-id1556 . -22) (undo-tree-id1557 . -22) (undo-tree-id1558 . -22) (undo-tree-id1559 . -22) (undo-tree-id1560 . -22) (undo-tree-id1561 . -22) (undo-tree-id1562 . -22) (undo-tree-id1563 . -22) (undo-tree-id1564 . -22) (undo-tree-id1565 . -22) (undo-tree-id1566 . -22) (undo-tree-id1567 . -22) (undo-tree-id1568 . -22) (undo-tree-id1569 . -22) (undo-tree-id1570 . -22) (undo-tree-id1571 . -22) (undo-tree-id1572 . -22) (undo-tree-id1573 . -22) (undo-tree-id1574 . -22) (undo-tree-id1575 . -22) (undo-tree-id1576 . -22) 22807) ((22785 . 22807)) (25755 7362 171204 37000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22832 . 22833) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -22842) (22832 . 22843) 22798) nil (25755 7371 497077 529000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22018) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (t 25755 7371 556285 115000)) nil (25755 7376 817012 401000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22018) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1)) nil (25755 7376 817000 393000) 0 nil])
([nil nil ((22217 . 22218) (22216 . 22217) (22215 . 22216) (22214 . 22215) (22161 . 22162) (22160 . 22161) (22159 . 22160) (22158 . 22159) (22127 . 22131) (t 25755 7376 820614 783000)) nil (25755 7406 109243 851000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22238) (undo-tree-id2121 . -1) 22217 (t 25755 7406 118368 327000)) nil (25755 7412 225507 891000) 0 nil])
([nil nil ((22286 . 22287) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22286) (undo-tree-id2122 . -1) 22238 (t 25755 7412 238718 166000)) nil (25755 7416 439009 189000) 0 nil])
([nil nil ((22213 . 22214) (#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22213) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22213) (undo-tree-id2123 . -1) 22193 (t 25755 7416 450955 797000)) nil (25755 7427 181746 427000) 0 nil])
([nil nil ((22315 . 22316) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22315) (undo-tree-id2124 . -1) 22213 (t 25755 7427 195550 685000)) nil (25755 7469 878245 641000) 0 nil])
([nil nil ((22214 . 22215) (t 25755 7471 465843 348000)) nil (25755 7517 61909 612000) 0 nil] [nil nil ((22351 . 22355) (t 25755 7437 112085 803000)) ((#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22351) (undo-tree-id2125 . -3) (undo-tree-id2126 . -3) (undo-tree-id2127 . -3) (undo-tree-id2128 . -3) (undo-tree-id2129 . -3) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -3) (undo-tree-id2133 . -3) (undo-tree-id2134 . -3) (undo-tree-id2135 . -3) (undo-tree-id2136 . -3) (t 25755 7451 140820 995000)) (25755 7451 133652 270000) 0 nil])
([nil nil ((22215 . 22219)) nil (25755 7517 61904 570000) 0 nil])
nil
([nil nil ((22356 . 22359) (t 25755 7517 71971 104000)) nil (25755 7525 710099 246000) 0 nil])
([nil nil ((22359 . 22361) (t 25755 7525 724351 226000)) nil (25755 7552 442977 503000) 0 nil])
([nil nil ((22420 . 22421) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22420) (undo-tree-id2139 . -1) (22377 . 22378) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22377) (undo-tree-id2140 . -1) 22360) nil (25755 7552 443500 28000) 0 nil])
([nil nil ((22488 . 22489)) nil (25755 7569 324444 893000) 0 nil] [nil nil ((22509 . 22510) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22509) (undo-tree-id2137 . -1) (22453 . 22454) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22453) (undo-tree-id2138 . -1) 22420) ((22453 . 22454) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22453) (22509 . 22510) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 22509)) (25755 7552 442969 173000) 0 nil])
([nil nil ((22454 . 22460)) nil (25755 7569 324444 247000) 0 nil])
nil
([nil nil ((22495 . 22501) 22500) nil (25755 7569 324443 644000) 0 nil])
([nil nil ((22523 . 22529) 22534) nil (25755 7569 324442 853000) 0 nil])
([nil nil ((22545 . 22551) 22562) nil (25755 7569 324442 99000) 0 nil])
([nil nil ((22572 . 22578) 22595) nil (25755 7569 324441 391000) 0 nil])
([nil nil ((22627 . 22633) 22656) nil (25755 7569 324440 570000) 0 nil])
([nil nil ((22666 . 22672) 22699) nil (25755 7569 324439 591000) 0 nil])
([nil nil ((22707 . 22713) 22729) nil (25755 7569 324438 660000) 0 nil])
([nil nil ((22737 . 22743) 22746) nil (25755 7569 324437 286000) 0 nil])
([nil nil ((22754 . 22760) 22769) nil (25755 7569 324436 217000) 0 nil])
([nil nil ((22791 . 22797) 22802) nil (25755 7569 324435 411000) 0 nil])
([nil nil ((22810 . 22816) 22824) nil (25755 7569 324434 622000) 0 nil])
([nil nil ((22832 . 22838) 22852) nil (25755 7569 324433 726000) 0 nil])
([nil nil ((22869 . 22875) 22890) nil (25755 7569 324432 238000) 0 nil])
([nil nil ((22898 . 22904) 22925) nil (25755 7569 324427 373000) 0 nil])
([nil nil ((22355 . 22356) (#("     " 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22355) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22355) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) 22339 (t 25755 7569 334166 577000)) nil (25755 7658 430133 566000) 0 nil])
([nil nil ((22489 . 22490) (t 25755 7658 441439 729000)) nil (25755 7670 990915 929000) 0 nil])
([nil nil ((22448 . 22449) (#("      " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22448) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22448) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) 22304) nil (25755 7670 990911 524000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22484) (undo-tree-id2296 . 1) (undo-tree-id2297 . -1) (t 25755 7671 1862 221000)) nil (25755 7699 535501 485000) 0 nil])
([nil nil ((#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22127)) nil (25755 7699 535492 976000) 0 nil])
([nil nil ((22127 . 22131)) nil (25755 7699 535490 987000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22488) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1)) nil (25755 7699 535489 1000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22488) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1)) nil (25755 7699 535484 423000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22514) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1)) nil (25755 7699 535480 41000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22514) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1)) nil (25755 7699 535474 986000) 0 nil])
([nil nil ((22530 . 22538) (22529 . 22530)) nil (25755 7699 535470 999000) 0 nil])
([nil nil ((22538 . 22539)) nil (25755 7699 535469 12000) 0 nil])
([nil nil ((22539 . 22540) (#("      " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22539) (undo-tree-id2277 . 6) (undo-tree-id2278 . -4) (undo-tree-id2279 . -4) (undo-tree-id2280 . -4) (undo-tree-id2281 . -4) (undo-tree-id2282 . -4) (undo-tree-id2283 . -4) (undo-tree-id2284 . -4) (undo-tree-id2285 . -4) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22539) (undo-tree-id2286 . 1) (undo-tree-id2287 . -1) 22538) nil (25755 7699 535465 246000) 0 nil])
([nil nil ((#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22538) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1)) nil (25755 7699 535439 543000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("           " 0 2 (face org-indent) 2 11 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22538) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1)) nil (25755 7699 535348 900000) 0 nil])
([nil nil ((22639 . 22640) (#("      " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22639) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22639) (undo-tree-id2298 . -1) (22606 . 22607) (#("      " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22606) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22606) (undo-tree-id2299 . -1) (#("      " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22558) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22558) (undo-tree-id2300 . -1) 22538 (t 25755 7699 550792 432000)) nil (25755 7707 816190 310000) 0 nil])
([nil nil ((22058 . 22062) (t 25755 7707 827054 788000)) nil (25755 7761 298552 32000) 0 nil])
([nil nil ((22790 . 22791) (22789 . 22790) (22788 . 22789) (22787 . 22788) (22759 . 22787) (#("      " 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("        " 0 2 (face org-indent) 2 8 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22759) (undo-tree-id2301 . -5) (undo-tree-id2302 . 1) (undo-tree-id2303 . -4) (undo-tree-id2304 . -4) (undo-tree-id2305 . -4) (undo-tree-id2306 . -4) (undo-tree-id2307 . -4) (undo-tree-id2308 . -4) (undo-tree-id2309 . -4) (undo-tree-id2310 . -4) (undo-tree-id2311 . -4) (undo-tree-id2312 . -4) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -5) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -5) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) 22763 (22621 . 22622) (22620 . 22621) (22619 . 22620) (22618 . 22619) (22594 . 22618) (#("        " 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22594) (undo-tree-id2338 . -8) (undo-tree-id2339 . -8) (undo-tree-id2340 . -8) (undo-tree-id2341 . -8) (undo-tree-id2342 . -8) (undo-tree-id2343 . -8) (undo-tree-id2344 . -8) (undo-tree-id2345 . -8) (undo-tree-id2346 . -8) (undo-tree-id2347 . -8) (undo-tree-id2348 . -8) (undo-tree-id2349 . -8) (undo-tree-id2350 . -8) (undo-tree-id2351 . -8) (undo-tree-id2352 . -8) (undo-tree-id2353 . -8) (undo-tree-id2354 . -8) (undo-tree-id2355 . -8) (undo-tree-id2356 . -8) (undo-tree-id2357 . -8) (undo-tree-id2358 . -8) (undo-tree-id2359 . -8) (undo-tree-id2360 . -8) (undo-tree-id2361 . -8) (undo-tree-id2362 . -8) (undo-tree-id2363 . -8) (undo-tree-id2364 . -8) (undo-tree-id2365 . -8) (undo-tree-id2366 . -8) (undo-tree-id2367 . -8) (undo-tree-id2368 . -8) (undo-tree-id2369 . -8) (undo-tree-id2370 . -8) (undo-tree-id2371 . -8) (undo-tree-id2372 . -8) (undo-tree-id2373 . -8) (undo-tree-id2374 . -8) (undo-tree-id2375 . -8) (undo-tree-id2376 . -8) (undo-tree-id2377 . -8) (undo-tree-id2378 . -8) (undo-tree-id2379 . -8) (undo-tree-id2380 . -8) (undo-tree-id2381 . -8) (undo-tree-id2382 . -8) (undo-tree-id2383 . -8) (undo-tree-id2384 . -8) (undo-tree-id2385 . -8) (undo-tree-id2386 . -8) (undo-tree-id2387 . -8) (undo-tree-id2388 . -8) (undo-tree-id2389 . -8) (undo-tree-id2390 . -8) (undo-tree-id2391 . -8) (undo-tree-id2392 . -8) (undo-tree-id2393 . -8) (undo-tree-id2394 . -8) (undo-tree-id2395 . -8) (undo-tree-id2396 . -8) (undo-tree-id2397 . -8) (undo-tree-id2398 . -8) (undo-tree-id2399 . -8) (undo-tree-id2400 . -8) (undo-tree-id2401 . -8) (undo-tree-id2402 . -8) (undo-tree-id2403 . -8) (undo-tree-id2404 . -8) (undo-tree-id2405 . -8) (undo-tree-id2406 . -8) (undo-tree-id2407 . -8) (undo-tree-id2408 . -8) (undo-tree-id2409 . -8) (undo-tree-id2410 . -8) (undo-tree-id2411 . -4) (undo-tree-id2412 . -4) (undo-tree-id2413 . -4) (undo-tree-id2414 . -4) (undo-tree-id2415 . -4) (undo-tree-id2416 . -4) (undo-tree-id2417 . -4) (undo-tree-id2418 . -4) (undo-tree-id2419 . -4) (undo-tree-id2420 . -4) (undo-tree-id2421 . -4) (undo-tree-id2422 . -4) (undo-tree-id2423 . -4) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) 22598 (22577 . 22578) (22576 . 22577) (22575 . 22576) (22574 . 22575) (22554 . 22574) (#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22554) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) 22558 (22531 . 22532) (22530 . 22531) (22529 . 22530) (22528 . 22529) (22512 . 22528) (#("    " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22512) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) 22516 (22246 . 22247) (22245 . 22246) (22244 . 22245) (22243 . 22244) (22231 . 22243) (#("    " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22231) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) (undo-tree-id2483 . -4) (undo-tree-id2484 . -4) (undo-tree-id2485 . -4) (undo-tree-id2486 . -4) (undo-tree-id2487 . -4) (undo-tree-id2488 . -4) (undo-tree-id2489 . -4) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) (undo-tree-id2494 . -4) (undo-tree-id2495 . -4) (undo-tree-id2496 . -4) (undo-tree-id2497 . -4) (undo-tree-id2498 . -4) (undo-tree-id2499 . -4) (undo-tree-id2500 . -4) (undo-tree-id2501 . -4) (undo-tree-id2502 . -4) (undo-tree-id2503 . -4) (undo-tree-id2504 . -4) (undo-tree-id2505 . -4) (undo-tree-id2506 . -4) 22235 (22177 . 22178) (22176 . 22177) (22175 . 22176) (22174 . 22175) (22166 . 22174) (#("    " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22166) (undo-tree-id2507 . -4) (undo-tree-id2508 . -4) (undo-tree-id2509 . -4) (undo-tree-id2510 . -4) (undo-tree-id2511 . -4) (undo-tree-id2512 . -4) (undo-tree-id2513 . -4) (undo-tree-id2514 . -4) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) (undo-tree-id2517 . -4) (undo-tree-id2518 . -4) (undo-tree-id2519 . -4) (undo-tree-id2520 . -4) (undo-tree-id2521 . -4) (undo-tree-id2522 . -4) (undo-tree-id2523 . -4) 22170 (22135 . 22139)) nil (25755 7761 298537 158000) 0 nil])
([nil nil ((#("     " 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                      " 0 2 (face org-indent) 2 22 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22527) (undo-tree-id2557 . -4) (undo-tree-id2558 . -5) (t 25755 7761 352680 850000)) nil (25755 7792 796221 208000) 0 nil])
([nil nil ((#("   " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                 " 0 2 (face org-indent) 2 17 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22524) (undo-tree-id2526 . -2) (undo-tree-id2527 . -3) (undo-tree-id2528 . -3) (undo-tree-id2529 . -3) (undo-tree-id2530 . -3) (undo-tree-id2531 . -3) (undo-tree-id2532 . -3) (undo-tree-id2533 . -3) (undo-tree-id2534 . -3) (undo-tree-id2535 . -3) (undo-tree-id2536 . -3) (undo-tree-id2537 . -3) (undo-tree-id2538 . -3) (undo-tree-id2539 . -3) (undo-tree-id2540 . -3) (undo-tree-id2541 . -3) (undo-tree-id2542 . -3) (undo-tree-id2543 . -3) (undo-tree-id2544 . -3) (undo-tree-id2545 . -3) (undo-tree-id2546 . -3) (undo-tree-id2547 . -3) (undo-tree-id2548 . -3) (undo-tree-id2549 . -3) (undo-tree-id2550 . -3) (undo-tree-id2551 . -3) (undo-tree-id2552 . -3) (undo-tree-id2553 . -3) (undo-tree-id2554 . -2) (undo-tree-id2555 . -1) (undo-tree-id2556 . -3)) nil (25755 7792 796217 666000) 0 nil])
([nil nil ((#("            " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                          " 0 2 (face org-indent) 2 26 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22558) (undo-tree-id2524 . -11) (undo-tree-id2525 . -12)) nil (25755 7792 796191 978000) 0 nil])
([nil nil ((#("                " 0 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                              " 0 2 (face org-indent) 2 30 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22586)) nil (25755 7792 796183 221000) 0 nil])
([nil nil ((22586 . 22590)) nil (25755 7792 796178 898000) 0 nil])
([nil nil ((#("                 " 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                                  " 0 2 (face org-indent) 2 34 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 22742) (undo-tree-id3387 . -16) (undo-tree-id3388 . -17) (t 25755 7792 805585 762000)) nil (25755 7817 331576 970000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("         " 0 2 (face org-indent) 2 9 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22733) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("          " 0 2 (face org-indent) 2 10 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22734) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("           " 0 2 (face org-indent) 2 11 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22735) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("            " 0 2 (face org-indent) 2 12 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22736) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("             " 0 2 (face org-indent) 2 13 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22737) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("              " 0 2 (face org-indent) 2 14 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22738) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("               " 0 2 (face org-indent) 2 15 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22739) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                " 0 2 (face org-indent) 2 16 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22740) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("                 " 0 2 (face org-indent) 2 17 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -22741) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) 22742) nil (25755 7817 331540 442000) 0 nil])
([nil nil ((22951 . 22952) (22950 . 22951) (22949 . 22950) (22948 . 22949) (22918 . 22919) (22917 . 22918) (22916 . 22917) (22915 . 22916) (22877 . 22878) (22876 . 22877) (22875 . 22876) (22874 . 22875) (22851 . 22852) (22850 . 22851) (22849 . 22850) (22848 . 22849) (22828 . 22829) (22827 . 22828) (22826 . 22827) (22825 . 22826) (22787 . 22788) (22786 . 22787) (22785 . 22786) (22784 . 22785) (22763 . 22767)) nil (25755 7817 330262 727000) 0 nil])
([nil nil ((22829 . 22833) (t 25755 7817 390270 494000)) nil (25755 7828 889127 146000) 0 nil])
([nil nil ((22923 . 22927)) nil (25755 7828 889121 489000) 0 nil])
([nil nil ((#("As you can see, this code matches Figure 14-18 pretty closely" 0 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23005) (undo-tree-id3402 . -60) (undo-tree-id3403 . -61) (t 25755 7828 902584 903000)) nil (25755 7993 306764 283000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23005) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1)) nil (25755 7993 306761 529000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 23005) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1)) nil (25755 7993 306758 513000) 0 nil])
([nil nil ((23011 . 23012) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23011) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) 23005) nil (25755 7993 306752 745000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23084) (nil fontified nil 23083 . 23084) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23083 . 23084) (23083 . 23084) 23011 (t 25755 7993 319729 45000)) nil (25755 8002 413227 18000) 0 nil])
([nil nil ((23616 . 23617) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23616) (undo-tree-id3404 . -1) (23582 . 23583) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23582) (undo-tree-id3405 . -1) (23527 . 23528) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23527) (undo-tree-id3406 . -1) (23451 . 23452) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23451) (undo-tree-id3407 . -1) (23381 . 23382) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23381) (undo-tree-id3408 . -1) (23311 . 23312) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23311) (undo-tree-id3409 . -1) (23237 . 23238) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23237) (undo-tree-id3410 . -1) (23162 . 23163) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23162) (undo-tree-id3411 . -1) (23087 . 23088) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23087) (undo-tree-id3412 . 1) (undo-tree-id3413 . -1) 23084) nil (25755 8019 339170 904000) 0 nil])
([nil nil ((#("In the constructor, we create all the layers we will need: the main layers are
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23005) (undo-tree-id3597 . -78) (undo-tree-id3598 . -75) (undo-tree-id3599 . -79) (undo-tree-id3600 . -79) (undo-tree-id3601 . -79) (undo-tree-id3602 . -79) (undo-tree-id3603 . -79) (undo-tree-id3604 . -79) (undo-tree-id3605 . -79) (undo-tree-id3606 . -79) (undo-tree-id3607 . -66) (undo-tree-id3608 . -66) (undo-tree-id3609 . -66) (undo-tree-id3610 . -66) (undo-tree-id3611 . -66) (undo-tree-id3612 . -66) (undo-tree-id3613 . -66) (undo-tree-id3614 . -66) (undo-tree-id3615 . -68) (undo-tree-id3616 . -75) (undo-tree-id3617 . -75) (undo-tree-id3618 . -75) (undo-tree-id3619 . -75) (undo-tree-id3620 . -75) (undo-tree-id3621 . -75) (undo-tree-id3622 . -75) (undo-tree-id3623 . -75) (undo-tree-id3624 . -75) (undo-tree-id3625 . -75) (undo-tree-id3626 . -75) (undo-tree-id3627 . -79) 23080) nil (25755 8024 471721 152000) 0 nil] [nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23617) (nil fontified nil 23616 . 23617) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23616 . 23617) (23616 . 23617) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23550) (nil fontified nil 23549 . 23550) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23549 . 23550) (23549 . 23550) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23471) (nil fontified nil 23470 . 23471) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23470 . 23471) (23470 . 23471) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23395) (nil fontified nil 23394 . 23395) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23394 . 23395) (23394 . 23395) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23316) (nil fontified nil 23315 . 23316) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23315 . 23316) (23315 . 23316) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23238) (nil fontified nil 23237 . 23238) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23237 . 23238) (23237 . 23238) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23163) (nil fontified nil 23162 . 23163) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23162 . 23163) (23162 . 23163) 23616) ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 23162) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23162 . 23163) (nil fontified t 23162 . 23163) (23163 . 23164) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 23237) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23237 . 23238) (nil fontified t 23237 . 23238) (23238 . 23239) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23315) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23315 . 23316) (nil fontified t 23315 . 23316) (23316 . 23317) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23394) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23394 . 23395) (nil fontified t 23394 . 23395) (23395 . 23396) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23470) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23470 . 23471) (nil fontified t 23470 . 23471) (23471 . 23472) (#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23549) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23549 . 23550) (nil fontified t 23549 . 23550) (23550 . 23551) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 23616) (undo-tree-id3424 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23616 . 23617) (nil fontified t 23616 . 23617) (23617 . 23618) (t 25755 8002 423089 56000)) (25755 8018 962218 267000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23538) (nil fontified nil 23537 . 23538) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23537 . 23538) (23537 . 23538) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23471) (nil fontified nil 23470 . 23471) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23470 . 23471) (23470 . 23471) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23392) (nil fontified nil 23391 . 23392) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23391 . 23392) (23391 . 23392) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23316) (nil fontified nil 23315 . 23316) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23315 . 23316) (23315 . 23316) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23237) (nil fontified nil 23236 . 23237) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23236 . 23237) (23236 . 23237) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23159) (nil fontified nil 23158 . 23159) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23158 . 23159) (23158 . 23159) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23084) (nil fontified nil 23083 . 23084) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23083 . 23084) (23083 . 23084) 23158) nil (25755 8053 536200 883000) 0 nil] [nil nil ((#("the ones on the right side of the diagram, and the skip layers are the ones on the left (only needed if the stride is greater than 1). Then in the call() method, we make the inputs go through the main layers and the skip layers (if any), then we add both outputs and apply the activation function. Next, we can build the ResNet-34 using a Sequential model, since it’s really just a long sequence of layers (we can treat each residual unit as a single layer now that we have the ResidualUnit class): model = keras.models.Sequential() model.add(keras.layers.Conv2D(64, 7, strides=2, input_shape=[224, 224,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 79 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 80 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 153 154 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 154 155 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 155 227 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 227 228 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 228 231 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 231 232 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 232 233 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 233 240 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 240 297 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 297 298 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 298 310 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 310 311 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 311 312 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 312 367 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 367 368 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 368 386 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 386 387 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 387 388 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 388 443 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 443 444 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 444 465 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 465 466 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 466 467 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 467 498 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 498 499 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 499 500 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 500 532 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 532 533 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 533 534 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 534 586 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 586 587 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 587 592 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 592 604 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23005) (undo-tree-id3425 . -603) (undo-tree-id3426 . -532) (undo-tree-id3427 . -75) (undo-tree-id3428 . -532) (undo-tree-id3429 . -532) (undo-tree-id3430 . -532) (undo-tree-id3431 . -532) (undo-tree-id3432 . -532) (undo-tree-id3433 . -532) (undo-tree-id3434 . -532) (undo-tree-id3435 . -532) (undo-tree-id3436 . -532) (undo-tree-id3437 . -532) (undo-tree-id3438 . -532) (undo-tree-id3439 . -532) (undo-tree-id3440 . -532) (undo-tree-id3441 . -532) (undo-tree-id3442 . -532) (undo-tree-id3443 . -532) (undo-tree-id3444 . -532) (undo-tree-id3445 . -532) (undo-tree-id3446 . -532) (undo-tree-id3447 . -532) (undo-tree-id3448 . -532) (undo-tree-id3449 . -532) (undo-tree-id3450 . -532) (undo-tree-id3451 . -532) (undo-tree-id3452 . -532) (undo-tree-id3453 . -532) (undo-tree-id3454 . -532) (undo-tree-id3455 . -532) (undo-tree-id3456 . -532) (undo-tree-id3457 . -532) (undo-tree-id3458 . -532) (undo-tree-id3459 . -532) (undo-tree-id3460 . -532) (undo-tree-id3461 . -532) (undo-tree-id3462 . -532) (undo-tree-id3463 . -532) (undo-tree-id3464 . -532) (undo-tree-id3465 . -532) (undo-tree-id3466 . -532) (undo-tree-id3467 . -532) (undo-tree-id3468 . -532) (undo-tree-id3469 . -532) (undo-tree-id3470 . -532) (undo-tree-id3471 . -532) (undo-tree-id3472 . -453) (undo-tree-id3473 . -453) (undo-tree-id3474 . -453) (undo-tree-id3475 . -453) (undo-tree-id3476 . -453) (undo-tree-id3477 . -453) (undo-tree-id3478 . -453) (undo-tree-id3479 . -453) (undo-tree-id3480 . -453) (undo-tree-id3481 . -453) (undo-tree-id3482 . -453) (undo-tree-id3483 . -453) (undo-tree-id3484 . -453) (undo-tree-id3485 . -453) (undo-tree-id3486 . -453) (undo-tree-id3487 . -377) (undo-tree-id3488 . -377) (undo-tree-id3489 . -377) (undo-tree-id3490 . -377) (undo-tree-id3491 . -377) (undo-tree-id3492 . -377) (undo-tree-id3493 . -377) (undo-tree-id3494 . -377) (undo-tree-id3495 . -377) (undo-tree-id3496 . -377) (undo-tree-id3497 . -377) (undo-tree-id3498 . -377) (undo-tree-id3499 . -377) (undo-tree-id3500 . -377) (undo-tree-id3501 . -377) (undo-tree-id3502 . -298) (undo-tree-id3503 . -298) (undo-tree-id3504 . -298) (undo-tree-id3505 . -298) (undo-tree-id3506 . -298) (undo-tree-id3507 . -298) (undo-tree-id3508 . -298) (undo-tree-id3509 . -298) (undo-tree-id3510 . -298) (undo-tree-id3511 . -298) (undo-tree-id3512 . -298) (undo-tree-id3513 . -298) (undo-tree-id3514 . -298) (undo-tree-id3515 . -298) (undo-tree-id3516 . -298) (undo-tree-id3517 . -220) (undo-tree-id3518 . -220) (undo-tree-id3519 . -220) (undo-tree-id3520 . -220) (undo-tree-id3521 . -220) (undo-tree-id3522 . -220) (undo-tree-id3523 . -220) (undo-tree-id3524 . -220) (undo-tree-id3525 . -220) (undo-tree-id3526 . -220) (undo-tree-id3527 . -220) (undo-tree-id3528 . -220) (undo-tree-id3529 . -220) (undo-tree-id3530 . -220) (undo-tree-id3531 . -220) (undo-tree-id3532 . -145) (undo-tree-id3533 . -145) (undo-tree-id3534 . -145) (undo-tree-id3535 . -145) (undo-tree-id3536 . -145) (undo-tree-id3537 . -145) (undo-tree-id3538 . -145) (undo-tree-id3539 . -145) (undo-tree-id3540 . -145) (undo-tree-id3541 . -145) (undo-tree-id3542 . -145) (undo-tree-id3543 . -145) (undo-tree-id3544 . -145) (undo-tree-id3545 . -145) (undo-tree-id3546 . -145) (undo-tree-id3547 . -66) (undo-tree-id3548 . -66) (undo-tree-id3549 . -66) (undo-tree-id3550 . -66) (undo-tree-id3551 . -66) (undo-tree-id3552 . -66) (undo-tree-id3553 . -66) (undo-tree-id3554 . -66) (undo-tree-id3555 . -66) (undo-tree-id3556 . -66) (undo-tree-id3557 . -66) (undo-tree-id3558 . -66) (undo-tree-id3559 . -66) (undo-tree-id3560 . -66) (undo-tree-id3561 . -66) (undo-tree-id3562 . -75) (undo-tree-id3563 . -75) (undo-tree-id3564 . -75) (undo-tree-id3565 . -75) (undo-tree-id3566 . -75) (undo-tree-id3567 . -75) (undo-tree-id3568 . -75) (undo-tree-id3569 . -75) (undo-tree-id3570 . -75) (undo-tree-id3571 . -75) (undo-tree-id3572 . -75) (undo-tree-id3573 . -75) (undo-tree-id3574 . -75) (undo-tree-id3575 . -75) (undo-tree-id3576 . -75) (undo-tree-id3577 . -75) (undo-tree-id3578 . -75) (undo-tree-id3579 . -75) (undo-tree-id3580 . -75) (undo-tree-id3581 . -75) (undo-tree-id3582 . -75) (undo-tree-id3583 . -75) (undo-tree-id3584 . -75) (undo-tree-id3585 . -75) (undo-tree-id3586 . -75) (undo-tree-id3587 . -75) (undo-tree-id3588 . -75) (undo-tree-id3589 . -75) (undo-tree-id3590 . -75) (undo-tree-id3591 . -75) (undo-tree-id3592 . -75) (undo-tree-id3593 . -75) (undo-tree-id3594 . -75) (undo-tree-id3595 . -75) (undo-tree-id3596 . -604) 23080) ((23005 . 23609)) (25755 8024 471304 723000) 0 nil])
([nil nil ((#("In the constructor, we create all the layers we will need: the main layers are
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 23005) (undo-tree-id3414 . -78) (undo-tree-id3415 . -79) (undo-tree-id3416 . -79) (undo-tree-id3417 . -79) (undo-tree-id3418 . -79) (undo-tree-id3419 . -79) (undo-tree-id3420 . -79) (undo-tree-id3421 . -79) (undo-tree-id3422 . -79) (undo-tree-id3423 . -79) (t 25755 8002 423089 56000)) ((23005 . 23084)) (25755 8018 961835 638000) 0 nil])
([nil nil ((#("the ones on the right side of the diagram, and the skip layers are the ones on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23005) (undo-tree-id3689 . -78) (undo-tree-id3690 . -66) (undo-tree-id3691 . -66) (undo-tree-id3692 . -66) (undo-tree-id3693 . -66) (undo-tree-id3694 . -66) (undo-tree-id3695 . -66) (undo-tree-id3696 . -66) (undo-tree-id3697 . -66) (undo-tree-id3698 . -66) (undo-tree-id3699 . -66) (undo-tree-id3700 . -66) (undo-tree-id3701 . -66) (undo-tree-id3702 . -66) (undo-tree-id3703 . -66) (undo-tree-id3704 . -66) (undo-tree-id3705 . -75) (undo-tree-id3706 . -75) (undo-tree-id3707 . -75) (undo-tree-id3708 . -75) (undo-tree-id3709 . -75) (undo-tree-id3710 . -75) (undo-tree-id3711 . -75) (undo-tree-id3712 . -75) (undo-tree-id3713 . -75) (undo-tree-id3714 . -75) (undo-tree-id3715 . -75) (undo-tree-id3716 . -75) (undo-tree-id3717 . -75) (undo-tree-id3718 . -75) (undo-tree-id3719 . -75) (undo-tree-id3720 . -75) (undo-tree-id3721 . -75) (undo-tree-id3722 . -75) (undo-tree-id3723 . -75) (undo-tree-id3724 . -75) (undo-tree-id3725 . -75) (undo-tree-id3726 . -75) (undo-tree-id3727 . -75) (undo-tree-id3728 . -75) (undo-tree-id3729 . -75) (undo-tree-id3730 . -75) (undo-tree-id3731 . -75) (undo-tree-id3732 . -75) (undo-tree-id3733 . -75) (undo-tree-id3734 . -75) (undo-tree-id3735 . -75) (undo-tree-id3736 . -75) (undo-tree-id3737 . -75) (undo-tree-id3738 . -75) (undo-tree-id3739 . -75) (undo-tree-id3740 . -75) (undo-tree-id3741 . -75) (undo-tree-id3742 . -75) (undo-tree-id3743 . -75) (undo-tree-id3744 . -75) (undo-tree-id3745 . -75) (undo-tree-id3746 . -75) (undo-tree-id3747 . -75) (undo-tree-id3748 . -75) (undo-tree-id3749 . -75) (undo-tree-id3750 . -75) (undo-tree-id3751 . -75) (undo-tree-id3752 . -75) (undo-tree-id3753 . -75) (undo-tree-id3754 . -75) (undo-tree-id3755 . -75) (undo-tree-id3756 . -75) (undo-tree-id3757 . -75) (undo-tree-id3758 . -75) (undo-tree-id3759 . -75) (undo-tree-id3760 . -75) (undo-tree-id3761 . -75) (undo-tree-id3762 . -75) (undo-tree-id3763 . -75) (undo-tree-id3764 . -75) (undo-tree-id3765 . -75) (undo-tree-id3766 . -75) (undo-tree-id3767 . -75) (undo-tree-id3768 . -75) (undo-tree-id3769 . -75) (undo-tree-id3770 . -75) (undo-tree-id3771 . -75) (undo-tree-id3772 . -75) (undo-tree-id3773 . -75) (undo-tree-id3774 . -75) (undo-tree-id3775 . -75) (undo-tree-id3776 . -75) (undo-tree-id3777 . -75) (undo-tree-id3778 . -75) (undo-tree-id3779 . -75) (undo-tree-id3780 . -75) (undo-tree-id3781 . -75) (undo-tree-id3782 . -75) (undo-tree-id3783 . -75) (undo-tree-id3784 . -75) (undo-tree-id3785 . -75) (undo-tree-id3786 . -75) (undo-tree-id3787 . -75) (undo-tree-id3788 . -75) (undo-tree-id3789 . -75) (undo-tree-id3790 . -75) (undo-tree-id3791 . -75) (undo-tree-id3792 . -75) (undo-tree-id3793 . -75) (undo-tree-id3794 . -75) (undo-tree-id3795 . -75) (undo-tree-id3796 . -75) (undo-tree-id3797 . -75) (undo-tree-id3798 . -75) (undo-tree-id3799 . -75) (undo-tree-id3800 . -75) (undo-tree-id3801 . -75) (undo-tree-id3802 . -75) (undo-tree-id3803 . -75) (undo-tree-id3804 . -75) (undo-tree-id3805 . -75) (undo-tree-id3806 . -75) (undo-tree-id3807 . -75) (undo-tree-id3808 . -75) (undo-tree-id3809 . -75) (undo-tree-id3810 . -75) (undo-tree-id3811 . -75) (undo-tree-id3812 . -75) (undo-tree-id3813 . -75) (undo-tree-id3814 . -75) (undo-tree-id3815 . -75) (undo-tree-id3816 . -75) (undo-tree-id3817 . -75) (undo-tree-id3818 . -75) (undo-tree-id3819 . -75) (undo-tree-id3820 . -75) (undo-tree-id3821 . -75) (undo-tree-id3822 . -75) (undo-tree-id3823 . -75) (undo-tree-id3824 . -75) (undo-tree-id3825 . -75) (undo-tree-id3826 . -75) (undo-tree-id3827 . -75) (undo-tree-id3828 . -75) (undo-tree-id3829 . -75) (undo-tree-id3830 . -75) (undo-tree-id3831 . -75) (undo-tree-id3832 . -75) (undo-tree-id3833 . -75) (undo-tree-id3834 . -75) (undo-tree-id3835 . -75) (undo-tree-id3836 . -75) (undo-tree-id3837 . -75) (undo-tree-id3838 . -75) (undo-tree-id3839 . -75) (undo-tree-id3840 . -75) (undo-tree-id3841 . -75) (undo-tree-id3842 . -75) (undo-tree-id3843 . -75) (undo-tree-id3844 . -75) (undo-tree-id3845 . -75) (undo-tree-id3846 . -75) (undo-tree-id3847 . -75) (undo-tree-id3848 . -75) (undo-tree-id3849 . -75) (undo-tree-id3850 . -75) (undo-tree-id3851 . -75) (undo-tree-id3852 . -75) (undo-tree-id3853 . -75) (undo-tree-id3854 . -75) (undo-tree-id3855 . -75) (undo-tree-id3856 . -75) (undo-tree-id3857 . -75) (undo-tree-id3858 . -75) (undo-tree-id3859 . -75) (undo-tree-id3860 . -75) (undo-tree-id3861 . -75) (undo-tree-id3862 . -75) (undo-tree-id3863 . -75) (undo-tree-id3864 . -75) (undo-tree-id3865 . -75) (undo-tree-id3866 . -75) (undo-tree-id3867 . -75) (undo-tree-id3868 . -75) (undo-tree-id3869 . -75) (undo-tree-id3870 . -75) (undo-tree-id3871 . -75) (undo-tree-id3872 . -75) (undo-tree-id3873 . -75) (undo-tree-id3874 . -75) (undo-tree-id3875 . -75) (undo-tree-id3876 . -75) (undo-tree-id3877 . -75) (undo-tree-id3878 . -75) (undo-tree-id3879 . -75) (undo-tree-id3880 . -75) (undo-tree-id3881 . -75) (undo-tree-id3882 . -75) (undo-tree-id3883 . -75) (undo-tree-id3884 . -75) (undo-tree-id3885 . -75) (undo-tree-id3886 . -75) (undo-tree-id3887 . -75) (undo-tree-id3888 . -75) (undo-tree-id3889 . -75) (undo-tree-id3890 . -75) (undo-tree-id3891 . -75) (undo-tree-id3892 . -75) (undo-tree-id3893 . -75) (undo-tree-id3894 . -75) (undo-tree-id3895 . -75) (undo-tree-id3896 . -79) (undo-tree-id3897 . -79) (undo-tree-id3898 . -79) (undo-tree-id3899 . -79) (undo-tree-id3900 . -79) (undo-tree-id3901 . -79) (undo-tree-id3902 . -79) (undo-tree-id3903 . -79) (undo-tree-id3904 . -79) (undo-tree-id3905 . -79)) nil (25755 8053 536189 453000) 0 nil])
nil
nil
([nil nil ((#("(only needed if the stride is greater than 1)" 0 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23014) (undo-tree-id3687 . -44) (undo-tree-id3688 . -45) 23005) nil (25755 8053 535861 551000) 0 nil])
([nil nil ((#("the left ." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23005) (undo-tree-id3674 . -9) (undo-tree-id3675 . -9) (undo-tree-id3676 . -9) (undo-tree-id3677 . -9) (undo-tree-id3678 . -9) (undo-tree-id3679 . -9) (undo-tree-id3680 . -9) (undo-tree-id3681 . -9) (undo-tree-id3682 . -9) (undo-tree-id3683 . -9) (undo-tree-id3684 . -9) (undo-tree-id3685 . -4) (undo-tree-id3686 . -10)) nil (25755 8053 535858 706000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 23005) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1)) nil (25755 8053 535847 885000) 0 nil])
([nil nil ((#("(if
any)" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23098) (undo-tree-id3662 . -7) (undo-tree-id3663 . -4) (undo-tree-id3664 . -4) (undo-tree-id3665 . -4) (undo-tree-id3666 . -4) (undo-tree-id3667 . -4) (undo-tree-id3668 . -4) (undo-tree-id3669 . -4) (undo-tree-id3670 . -4) (undo-tree-id3671 . -8) 23024) nil (25755 8053 535844 971000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 23097) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1)) nil (25755 8053 535833 319000) 0 nil])
([nil nil ((23023 . 23024) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -23023) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) 23005 (t 25755 8053 547594 679000)) nil (25755 8073 358190 209000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23165) (nil fontified nil 23164 . 23165) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23164 . 23165) (23164 . 23165) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -23086) (nil fontified nil 23085 . 23086) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23085 . 23086) (23085 . 23086) 23023) nil (25755 8073 358143 405000) 0 nil])
([nil nil ((23085 . 23086) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23085) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) 23082) nil (25755 8073 358139 643000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -23086) (nil fontified nil 23085 . 23086) (nil wrap-prefix #("  " 0 2 (face org-indent)) 23085 . 23086) (23085 . 23086)) nil (25755 8073 358118 162000) 0 nil])
([nil nil ((23159 . 23161) (t 25755 8073 371539 872000)) nil (25755 8108 500397 430000) 0 nil])
([nil nil ((23173 . 23174) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23173) (undo-tree-id3985 . -1) (23166 . 23167) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -23166) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) 23161) nil (25755 8108 500394 709000) 0 nil])
([nil nil ((#("since it’s really just a long" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23220) (undo-tree-id3982 . -28) (undo-tree-id3983 . -29) (undo-tree-id3984 . -29)) nil (25755 8108 500723 659000) 0 nil])
([nil nil ((23346 . 23352) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 23346 23352 nil nil nil t #s(yas--exit 23370 nil))) #s(yas--exit 23370 nil) 4 nil #s(yas--field 1 23346 23352 nil nil nil t #s(yas--exit 23370 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -23364) (undo-tree-id5082 . -2) (23334 . 23377) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 23334) (undo-tree-id5083 . -2) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -2) (undo-tree-id5093 . -2) (undo-tree-id5094 . -2) (undo-tree-id5095 . -2) (undo-tree-id5096 . -2) (undo-tree-id5097 . -2) (undo-tree-id5098 . -2) (undo-tree-id5099 . -2) (undo-tree-id5100 . -2) 23336 (23334 . 23336) (23333 . 23334)) nil (25755 8190 867028 800000) 0 nil] [nil nil ((#("(we can treat each residual unit as a single layer now that
we have the ResidualUnit class)" 0 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 37 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 38 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 60 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 61 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23240) (undo-tree-id3980 . -90) (undo-tree-id3981 . -91) 23221) ((23240 . 23331)) (25755 8108 500172 697000) 0 nil])
([nil nil ((apply yas--snippet-revive 23334 23381 #s(yas--snippet nil (#s(yas--field 1 23346 23352 nil nil nil t #s(yas--exit 23370 nil))) #s(yas--exit 23370 nil) 4 nil #s(yas--field 1 23346 23352 nil nil nil t #s(yas--exit 23370 nil)) nil nil))) nil (25755 8190 867014 277000) 0 nil])
nil
([nil nil ((23369 . 23370) (23368 . 23369) 23352) nil (25755 8190 867013 443000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 23369) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1)) nil (25755 8190 867011 280000) 0 nil])
([nil nil ((23346 . 23352) (#("python" 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 23346) (undo-tree-id4942 . -5) (undo-tree-id4943 . -6) (undo-tree-id4944 . -5) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -2) (undo-tree-id4954 . -2) (undo-tree-id4955 . -2) (undo-tree-id4956 . -2) (undo-tree-id4957 . -2) (undo-tree-id4958 . -2) (undo-tree-id4959 . -2) (undo-tree-id4960 . -2) (undo-tree-id4961 . -3) (undo-tree-id4962 . -3) (undo-tree-id4963 . -3) (undo-tree-id4964 . -3) (undo-tree-id4965 . -3) (undo-tree-id4966 . -3) (undo-tree-id4967 . -3) (undo-tree-id4968 . -3) (undo-tree-id4969 . -4) (undo-tree-id4970 . -4) (undo-tree-id4971 . -4) (undo-tree-id4972 . -4) (undo-tree-id4973 . -4) (undo-tree-id4974 . -4) (undo-tree-id4975 . -4) (undo-tree-id4976 . -4) (undo-tree-id4977 . -5) (undo-tree-id4978 . -5) (undo-tree-id4979 . -5) (undo-tree-id4980 . -5) (undo-tree-id4981 . -5) (undo-tree-id4982 . -5) (undo-tree-id4983 . -5) (undo-tree-id4984 . -5) (undo-tree-id4985 . -6) (undo-tree-id4986 . -6) (undo-tree-id4987 . -6) (undo-tree-id4988 . -6) (undo-tree-id4989 . -6) (undo-tree-id4990 . -6) (undo-tree-id4991 . -6) (undo-tree-id4992 . -6) (undo-tree-id4993 . -5) (undo-tree-id4994 . -5) (undo-tree-id4995 . -5) (undo-tree-id4996 . -5) (undo-tree-id4997 . -5) (undo-tree-id4998 . -5) (undo-tree-id4999 . -5) (undo-tree-id5000 . -5) (undo-tree-id5001 . -5) (undo-tree-id5002 . -5) (undo-tree-id5003 . -5) (undo-tree-id5004 . -5) (undo-tree-id5005 . -5) (undo-tree-id5006 . -5) (undo-tree-id5007 . -5) (undo-tree-id5008 . -5) (undo-tree-id5009 . -5) (undo-tree-id5010 . -5) (undo-tree-id5011 . -5) (undo-tree-id5012 . -5) (undo-tree-id5013 . -5) (undo-tree-id5014 . -5) (undo-tree-id5015 . -5) (undo-tree-id5016 . -5) (undo-tree-id5017 . -5) (undo-tree-id5018 . -5) (undo-tree-id5019 . -5) (undo-tree-id5020 . -5) (undo-tree-id5021 . -5) (undo-tree-id5022 . -5) (undo-tree-id5023 . -5) (undo-tree-id5024 . -5) (undo-tree-id5025 . -5) (undo-tree-id5026 . -5) (undo-tree-id5027 . -6) (undo-tree-id5028 . -6) (undo-tree-id5029 . -6) (undo-tree-id5030 . -6) (undo-tree-id5031 . -5) (undo-tree-id5032 . -5) (undo-tree-id5033 . -5) (undo-tree-id5034 . -5) (undo-tree-id5035 . -5) (undo-tree-id5036 . -5) (undo-tree-id5037 . -5) (undo-tree-id5038 . -5) (undo-tree-id5039 . -5) (undo-tree-id5040 . -5) (undo-tree-id5041 . -5) (undo-tree-id5042 . -6) (undo-tree-id5043 . -6) 23351) nil (25755 8190 866984 86000) 0 nil])
([nil nil ((23382 . 23383)) nil (25755 8190 866918 118000) 0 nil])
([nil nil ((#("model = keras.models.Sequential()
model.add(keras.layers.Conv2D(64, 7, strides=2, input_shape=[224, 224,
3],
padding=\"same\", use_bias=False))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.Activation(\"relu\"))
model.add(keras.layers.MaxPool2D(pool_size=3, strides=2, padding=\"same\"))
prev_filters = 64
for filters in [64] * 3 + [128] * 4 + [256] * 6 + [512] * 3:
strides = 1 if filters == prev_filters else 2
model.add(ResidualUnit(filters, strides=strides))
prev_filters = filters
model.add(keras.layers.GlobalAvgPool2D())
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(10, activation=\"softmax\"))The only slightly tricky part in this code is the loop that adds the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 34 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 34 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 76 87 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 87 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 88 93 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 93 105 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 105 106 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 106 109 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 109 128 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 128 129 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 129 133 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 133 142 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 142 187 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 187 230 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 230 267 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 267 268 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 268 272 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 272 299 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 299 304 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 304 308 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 308 309 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 309 316 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 316 322 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 322 383 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 383 413 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 413 414 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 414 421 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 421 429 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 429 479 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 479 483 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 483 484 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 484 491 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 491 502 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 502 544 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 544 578 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 578 702 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 23383) (undo-tree-id4133 . -701) (undo-tree-id4134 . -611) (undo-tree-id4135 . 702) (undo-tree-id4136 . -611) (undo-tree-id4137 . -611) (undo-tree-id4138 . 694) (undo-tree-id4139 . -13) (undo-tree-id4140 . -8) (undo-tree-id4141 . -8) (undo-tree-id4142 . -8) (undo-tree-id4143 . -8) (undo-tree-id4144 . -8) (undo-tree-id4145 . -8) (undo-tree-id4146 . -8) (undo-tree-id4147 . -8) (undo-tree-id4148 . -6) (undo-tree-id4149 . -6) (undo-tree-id4150 . -6) (undo-tree-id4151 . -6) (undo-tree-id4152 . -6) (undo-tree-id4153 . -6) (undo-tree-id4154 . -6) (undo-tree-id4155 . -6) (undo-tree-id4156 . -6) (undo-tree-id4157 . -702) (undo-tree-id4158 . -611) (undo-tree-id4159 . -34) (undo-tree-id4160 . -34) (undo-tree-id4161 . -34) (undo-tree-id4162 . -34) (undo-tree-id4163 . -34) (undo-tree-id4164 . -34) (undo-tree-id4165 . -34) (undo-tree-id4166 . -34) (undo-tree-id4167 . -105) (undo-tree-id4168 . -105) (undo-tree-id4169 . -105) (undo-tree-id4170 . -105) (undo-tree-id4171 . -105) (undo-tree-id4172 . -105) (undo-tree-id4173 . -105) (undo-tree-id4174 . -105) (undo-tree-id4175 . -109) (undo-tree-id4176 . -109) (undo-tree-id4177 . -109) (undo-tree-id4178 . -109) (undo-tree-id4179 . -109) (undo-tree-id4180 . -109) (undo-tree-id4181 . -109) (undo-tree-id4182 . -109) (undo-tree-id4183 . -142) (undo-tree-id4184 . -142) (undo-tree-id4185 . -142) (undo-tree-id4186 . -142) (undo-tree-id4187 . -142) (undo-tree-id4188 . -142) (undo-tree-id4189 . -142) (undo-tree-id4190 . -142) (undo-tree-id4191 . -187) (undo-tree-id4192 . -187) (undo-tree-id4193 . -187) (undo-tree-id4194 . -187) (undo-tree-id4195 . -187) (undo-tree-id4196 . -187) (undo-tree-id4197 . -187) (undo-tree-id4198 . -187) (undo-tree-id4199 . -230) (undo-tree-id4200 . -230) (undo-tree-id4201 . -230) (undo-tree-id4202 . -230) (undo-tree-id4203 . -230) (undo-tree-id4204 . -230) (undo-tree-id4205 . -230) (undo-tree-id4206 . -230) (undo-tree-id4207 . -304) (undo-tree-id4208 . -304) (undo-tree-id4209 . -304) (undo-tree-id4210 . -304) (undo-tree-id4211 . -304) (undo-tree-id4212 . -304) (undo-tree-id4213 . -304) (undo-tree-id4214 . -304) (undo-tree-id4215 . -322) (undo-tree-id4216 . -322) (undo-tree-id4217 . -322) (undo-tree-id4218 . -322) (undo-tree-id4219 . -322) (undo-tree-id4220 . -322) (undo-tree-id4221 . -322) (undo-tree-id4222 . -322) (undo-tree-id4223 . -383) (undo-tree-id4224 . -383) (undo-tree-id4225 . -383) (undo-tree-id4226 . -383) (undo-tree-id4227 . -383) (undo-tree-id4228 . -383) (undo-tree-id4229 . -383) (undo-tree-id4230 . -383) (undo-tree-id4231 . -429) (undo-tree-id4232 . -429) (undo-tree-id4233 . -429) (undo-tree-id4234 . -429) (undo-tree-id4235 . -429) (undo-tree-id4236 . -429) (undo-tree-id4237 . -429) (undo-tree-id4238 . -429) (undo-tree-id4239 . -479) (undo-tree-id4240 . -479) (undo-tree-id4241 . -479) (undo-tree-id4242 . -479) (undo-tree-id4243 . -479) (undo-tree-id4244 . -479) (undo-tree-id4245 . -479) (undo-tree-id4246 . -479) (undo-tree-id4247 . -502) (undo-tree-id4248 . -502) (undo-tree-id4249 . -502) (undo-tree-id4250 . -502) (undo-tree-id4251 . -502) (undo-tree-id4252 . -502) (undo-tree-id4253 . -502) (undo-tree-id4254 . -502) (undo-tree-id4255 . -544) (undo-tree-id4256 . -544) (undo-tree-id4257 . -544) (undo-tree-id4258 . -544) (undo-tree-id4259 . -544) (undo-tree-id4260 . -544) (undo-tree-id4261 . -544) (undo-tree-id4262 . -544) (undo-tree-id4263 . -578) (undo-tree-id4264 . -578) (undo-tree-id4265 . -578) (undo-tree-id4266 . -578) (undo-tree-id4267 . -578) (undo-tree-id4268 . -578) (undo-tree-id4269 . -578) (undo-tree-id4270 . -578) (undo-tree-id4271 . -578) (undo-tree-id4272 . -578) (undo-tree-id4273 . -578) (undo-tree-id4274 . -578) (undo-tree-id4275 . -578) (undo-tree-id4276 . -578) (undo-tree-id4277 . -578) (undo-tree-id4278 . -578) (undo-tree-id4279 . -578) (undo-tree-id4280 . -578) (undo-tree-id4281 . -578) (undo-tree-id4282 . -578) (undo-tree-id4283 . -578) (undo-tree-id4284 . -578) (undo-tree-id4285 . -578) (undo-tree-id4286 . -578) (undo-tree-id4287 . -578) (undo-tree-id4288 . -578) (undo-tree-id4289 . -578) (undo-tree-id4290 . -578) (undo-tree-id4291 . -578) (undo-tree-id4292 . -578) (undo-tree-id4293 . -578) (undo-tree-id4294 . -578) (undo-tree-id4295 . -578) (undo-tree-id4296 . -578) (undo-tree-id4297 . -578) (undo-tree-id4298 . -578) (undo-tree-id4299 . -578) (undo-tree-id4300 . -578) (undo-tree-id4301 . -544) (undo-tree-id4302 . -544) (undo-tree-id4303 . -544) (undo-tree-id4304 . -544) (undo-tree-id4305 . -544) (undo-tree-id4306 . -544) (undo-tree-id4307 . -544) (undo-tree-id4308 . -544) (undo-tree-id4309 . -502) (undo-tree-id4310 . -502) (undo-tree-id4311 . -502) (undo-tree-id4312 . -502) (undo-tree-id4313 . -502) (undo-tree-id4314 . -502) (undo-tree-id4315 . -502) (undo-tree-id4316 . -502) (undo-tree-id4317 . -544) (undo-tree-id4318 . -544) (undo-tree-id4319 . -544) (undo-tree-id4320 . -544) (undo-tree-id4321 . -544) (undo-tree-id4322 . -544) (undo-tree-id4323 . -544) (undo-tree-id4324 . -544) (undo-tree-id4325 . -578) (undo-tree-id4326 . -578) (undo-tree-id4327 . -578) (undo-tree-id4328 . -578) (undo-tree-id4329 . -578) (undo-tree-id4330 . -578) (undo-tree-id4331 . -578) (undo-tree-id4332 . -578) (undo-tree-id4333 . -578) (undo-tree-id4334 . -578) (undo-tree-id4335 . -578) (undo-tree-id4336 . -578) (undo-tree-id4337 . -578) (undo-tree-id4338 . -578) (undo-tree-id4339 . -578) (undo-tree-id4340 . -578) (undo-tree-id4341 . -578) (undo-tree-id4342 . -578) (undo-tree-id4343 . -578) (undo-tree-id4344 . -578) (undo-tree-id4345 . -578) (undo-tree-id4346 . -578) (undo-tree-id4347 . -578) (undo-tree-id4348 . -578) (undo-tree-id4349 . -578) (undo-tree-id4350 . -578) (undo-tree-id4351 . -578) (undo-tree-id4352 . -578) (undo-tree-id4353 . -578) (undo-tree-id4354 . -544) (undo-tree-id4355 . -544) (undo-tree-id4356 . -544) (undo-tree-id4357 . -544) (undo-tree-id4358 . -544) (undo-tree-id4359 . -544) (undo-tree-id4360 . -544) (undo-tree-id4361 . -544) (undo-tree-id4362 . -578) (undo-tree-id4363 . -578) (undo-tree-id4364 . -578) (undo-tree-id4365 . -578) (undo-tree-id4366 . -578) (undo-tree-id4367 . -578) (undo-tree-id4368 . -578) (undo-tree-id4369 . -578) (undo-tree-id4370 . -578) (undo-tree-id4371 . -578) (undo-tree-id4372 . -578) (undo-tree-id4373 . -578) (undo-tree-id4374 . -578) (undo-tree-id4375 . -578) (undo-tree-id4376 . -578) (undo-tree-id4377 . -578) (undo-tree-id4378 . -578) (undo-tree-id4379 . -578) (undo-tree-id4380 . -578) (undo-tree-id4381 . -578) (undo-tree-id4382 . -578) (undo-tree-id4383 . -578) (undo-tree-id4384 . -578) (undo-tree-id4385 . -578) (undo-tree-id4386 . -578) (undo-tree-id4387 . -578) (undo-tree-id4388 . -578) (undo-tree-id4389 . -578) (undo-tree-id4390 . -578) (undo-tree-id4391 . -578) (undo-tree-id4392 . -578) (undo-tree-id4393 . -578) (undo-tree-id4394 . -578) (undo-tree-id4395 . -578) (undo-tree-id4396 . -578) (undo-tree-id4397 . -578) (undo-tree-id4398 . -578) (undo-tree-id4399 . -578) (undo-tree-id4400 . -578) (undo-tree-id4401 . -578) (undo-tree-id4402 . -578) (undo-tree-id4403 . -578) (undo-tree-id4404 . -578) (undo-tree-id4405 . -578) (undo-tree-id4406 . -578) (undo-tree-id4407 . -578) (undo-tree-id4408 . -578) (undo-tree-id4409 . -578) (undo-tree-id4410 . -578) (undo-tree-id4411 . -578) (undo-tree-id4412 . -578) (undo-tree-id4413 . -578) (undo-tree-id4414 . -578) (undo-tree-id4415 . -578) (undo-tree-id4416 . -578) (undo-tree-id4417 . -578) (undo-tree-id4418 . -578) (undo-tree-id4419 . -578) (undo-tree-id4420 . -578) (undo-tree-id4421 . -578) (undo-tree-id4422 . -578) (undo-tree-id4423 . -578) (undo-tree-id4424 . -578) (undo-tree-id4425 . -578) (undo-tree-id4426 . -578) (undo-tree-id4427 . -578) (undo-tree-id4428 . -578) (undo-tree-id4429 . -578) (undo-tree-id4430 . -578) (undo-tree-id4431 . -578) (undo-tree-id4432 . -578) (undo-tree-id4433 . -578) (undo-tree-id4434 . -579) (undo-tree-id4435 . -579) (undo-tree-id4436 . -579) (undo-tree-id4437 . -579) (undo-tree-id4438 . -579) (undo-tree-id4439 . -579) (undo-tree-id4440 . -579) (undo-tree-id4441 . -579) (undo-tree-id4442 . -579) (undo-tree-id4443 . -579) (undo-tree-id4444 . -579) (undo-tree-id4445 . -579) (undo-tree-id4446 . -579) (undo-tree-id4447 . -579) (undo-tree-id4448 . -579) (undo-tree-id4449 . -579) (undo-tree-id4450 . -579) (undo-tree-id4451 . -579) (undo-tree-id4452 . -579) (undo-tree-id4453 . -579) (undo-tree-id4454 . -579) (undo-tree-id4455 . -579) (undo-tree-id4456 . -579) (undo-tree-id4457 . -579) (undo-tree-id4458 . -579) (undo-tree-id4459 . -579) (undo-tree-id4460 . -579) (undo-tree-id4461 . -579) (undo-tree-id4462 . -579) (undo-tree-id4463 . -578) (undo-tree-id4464 . -578) (undo-tree-id4465 . -578) (undo-tree-id4466 . -578) (undo-tree-id4467 . -578) (undo-tree-id4468 . -578) (undo-tree-id4469 . -578) (undo-tree-id4470 . -578) (undo-tree-id4471 . -578) (undo-tree-id4472 . -578) (undo-tree-id4473 . -578) (undo-tree-id4474 . -578) (undo-tree-id4475 . -578) (undo-tree-id4476 . -578) (undo-tree-id4477 . -578) (undo-tree-id4478 . -578) (undo-tree-id4479 . -578) (undo-tree-id4480 . -578) (undo-tree-id4481 . -578) (undo-tree-id4482 . -578) (undo-tree-id4483 . -578) (undo-tree-id4484 . -578) (undo-tree-id4485 . -578) (undo-tree-id4486 . -578) (undo-tree-id4487 . -578) (undo-tree-id4488 . -578) (undo-tree-id4489 . -578) (undo-tree-id4490 . -578) (undo-tree-id4491 . -578) (undo-tree-id4492 . -578) (undo-tree-id4493 . -578) (undo-tree-id4494 . -578) (undo-tree-id4495 . -578) (undo-tree-id4496 . -578) (undo-tree-id4497 . -578) (undo-tree-id4498 . -578) (undo-tree-id4499 . -578) (undo-tree-id4500 . -578) (undo-tree-id4501 . -578) (undo-tree-id4502 . -578) (undo-tree-id4503 . -578) (undo-tree-id4504 . -578) (undo-tree-id4505 . -578) (undo-tree-id4506 . -578) (undo-tree-id4507 . -578) (undo-tree-id4508 . -578) (undo-tree-id4509 . -578) (undo-tree-id4510 . -578) (undo-tree-id4511 . -578) (undo-tree-id4512 . -578) (undo-tree-id4513 . -578) (undo-tree-id4514 . -578) (undo-tree-id4515 . -578) (undo-tree-id4516 . -578) (undo-tree-id4517 . -578) (undo-tree-id4518 . -578) (undo-tree-id4519 . -578) (undo-tree-id4520 . -578) (undo-tree-id4521 . -578) (undo-tree-id4522 . -578) (undo-tree-id4523 . -578) (undo-tree-id4524 . -578) (undo-tree-id4525 . -578) (undo-tree-id4526 . -578) (undo-tree-id4527 . -578) (undo-tree-id4528 . -578) (undo-tree-id4529 . -578) (undo-tree-id4530 . -578) (undo-tree-id4531 . -578) (undo-tree-id4532 . -578) (undo-tree-id4533 . -578) (undo-tree-id4534 . -578) (undo-tree-id4535 . -578) (undo-tree-id4536 . -578) (undo-tree-id4537 . -578) (undo-tree-id4538 . -578) (undo-tree-id4539 . -578) (undo-tree-id4540 . -578) (undo-tree-id4541 . -578) (undo-tree-id4542 . -578) (undo-tree-id4543 . -578) (undo-tree-id4544 . -578) (undo-tree-id4545 . -578) (undo-tree-id4546 . -578) (undo-tree-id4547 . -578) (undo-tree-id4548 . -578) (undo-tree-id4549 . -578) (undo-tree-id4550 . -544) (undo-tree-id4551 . -544) (undo-tree-id4552 . -544) (undo-tree-id4553 . -544) (undo-tree-id4554 . -544) (undo-tree-id4555 . -544) (undo-tree-id4556 . -544) (undo-tree-id4557 . -544) (undo-tree-id4558 . -545) (undo-tree-id4559 . -545) (undo-tree-id4560 . -545) (undo-tree-id4561 . -545) (undo-tree-id4562 . -545) (undo-tree-id4563 . -545) (undo-tree-id4564 . -545) (undo-tree-id4565 . -545) (undo-tree-id4566 . -546) (undo-tree-id4567 . -546) (undo-tree-id4568 . -546) (undo-tree-id4569 . -546) (undo-tree-id4570 . -546) (undo-tree-id4571 . -546) (undo-tree-id4572 . -546) (undo-tree-id4573 . -546) (undo-tree-id4574 . -547) (undo-tree-id4575 . -547) (undo-tree-id4576 . -547) (undo-tree-id4577 . -547) (undo-tree-id4578 . -547) (undo-tree-id4579 . -547) (undo-tree-id4580 . -547) (undo-tree-id4581 . -547) (undo-tree-id4582 . -548) (undo-tree-id4583 . -548) (undo-tree-id4584 . -548) (undo-tree-id4585 . -548) (undo-tree-id4586 . -548) (undo-tree-id4587 . -548) (undo-tree-id4588 . -548) (undo-tree-id4589 . -548) (undo-tree-id4590 . -549) (undo-tree-id4591 . -549) (undo-tree-id4592 . -549) (undo-tree-id4593 . -549) (undo-tree-id4594 . -549) (undo-tree-id4595 . -549) (undo-tree-id4596 . -549) (undo-tree-id4597 . -549) (undo-tree-id4598 . -550) (undo-tree-id4599 . -550) (undo-tree-id4600 . -550) (undo-tree-id4601 . -550) (undo-tree-id4602 . -550) (undo-tree-id4603 . -550) (undo-tree-id4604 . -550) (undo-tree-id4605 . -550) (undo-tree-id4606 . -551) (undo-tree-id4607 . -551) (undo-tree-id4608 . -551) (undo-tree-id4609 . -551) (undo-tree-id4610 . -551) (undo-tree-id4611 . -551) (undo-tree-id4612 . -551) (undo-tree-id4613 . -551) (undo-tree-id4614 . -552) (undo-tree-id4615 . -552) (undo-tree-id4616 . -552) (undo-tree-id4617 . -552) (undo-tree-id4618 . -552) (undo-tree-id4619 . -552) (undo-tree-id4620 . -552) (undo-tree-id4621 . -552) (undo-tree-id4622 . -553) (undo-tree-id4623 . -553) (undo-tree-id4624 . -553) (undo-tree-id4625 . -553) (undo-tree-id4626 . -553) (undo-tree-id4627 . -553) (undo-tree-id4628 . -553) (undo-tree-id4629 . -553) (undo-tree-id4630 . 148) (undo-tree-id4631 . -559) (undo-tree-id4632 . -554) (undo-tree-id4633 . -554) (undo-tree-id4634 . -554) (undo-tree-id4635 . -554) (undo-tree-id4636 . -554) (undo-tree-id4637 . -554) (undo-tree-id4638 . -554) (undo-tree-id4639 . -554) (undo-tree-id4640 . -555) (undo-tree-id4641 . -555) (undo-tree-id4642 . -555) (undo-tree-id4643 . -555) (undo-tree-id4644 . -555) (undo-tree-id4645 . -555) (undo-tree-id4646 . -555) (undo-tree-id4647 . -555) (undo-tree-id4648 . -556) (undo-tree-id4649 . -556) (undo-tree-id4650 . -556) (undo-tree-id4651 . -556) (undo-tree-id4652 . -556) (undo-tree-id4653 . -556) (undo-tree-id4654 . -556) (undo-tree-id4655 . -556) (undo-tree-id4656 . -557) (undo-tree-id4657 . -557) (undo-tree-id4658 . -557) (undo-tree-id4659 . -557) (undo-tree-id4660 . -557) (undo-tree-id4661 . -557) (undo-tree-id4662 . -557) (undo-tree-id4663 . -557) (undo-tree-id4664 . -558) (undo-tree-id4665 . -558) (undo-tree-id4666 . -558) (undo-tree-id4667 . -558) (undo-tree-id4668 . -558) (undo-tree-id4669 . -558) (undo-tree-id4670 . -558) (undo-tree-id4671 . -558) (undo-tree-id4672 . -559) (undo-tree-id4673 . -559) (undo-tree-id4674 . -559) (undo-tree-id4675 . -559) (undo-tree-id4676 . -559) (undo-tree-id4677 . -559) (undo-tree-id4678 . -559) (undo-tree-id4679 . -559) (undo-tree-id4680 . -560) (undo-tree-id4681 . -560) (undo-tree-id4682 . -560) (undo-tree-id4683 . -560) (undo-tree-id4684 . -560) (undo-tree-id4685 . -560) (undo-tree-id4686 . -560) (undo-tree-id4687 . -560) (undo-tree-id4688 . -561) (undo-tree-id4689 . -561) (undo-tree-id4690 . -561) (undo-tree-id4691 . -561) (undo-tree-id4692 . -561) (undo-tree-id4693 . -561) (undo-tree-id4694 . -561) (undo-tree-id4695 . -561) (undo-tree-id4696 . -562) (undo-tree-id4697 . -562) (undo-tree-id4698 . -562) (undo-tree-id4699 . -562) (undo-tree-id4700 . -562) (undo-tree-id4701 . -562) (undo-tree-id4702 . -562) (undo-tree-id4703 . -562) (undo-tree-id4704 . -563) (undo-tree-id4705 . -563) (undo-tree-id4706 . -563) (undo-tree-id4707 . -563) (undo-tree-id4708 . -563) (undo-tree-id4709 . -563) (undo-tree-id4710 . -563) (undo-tree-id4711 . -563) (undo-tree-id4712 . -564) (undo-tree-id4713 . -564) (undo-tree-id4714 . -564) (undo-tree-id4715 . -564) (undo-tree-id4716 . -564) (undo-tree-id4717 . -564) (undo-tree-id4718 . -564) (undo-tree-id4719 . -564) (undo-tree-id4720 . -565) (undo-tree-id4721 . -565) (undo-tree-id4722 . -565) (undo-tree-id4723 . -565) (undo-tree-id4724 . -565) (undo-tree-id4725 . -565) (undo-tree-id4726 . -565) (undo-tree-id4727 . -565) (undo-tree-id4728 . -566) (undo-tree-id4729 . -566) (undo-tree-id4730 . -566) (undo-tree-id4731 . -566) (undo-tree-id4732 . -566) (undo-tree-id4733 . -566) (undo-tree-id4734 . -566) (undo-tree-id4735 . -566) (undo-tree-id4736 . -567) (undo-tree-id4737 . -567) (undo-tree-id4738 . -567) (undo-tree-id4739 . -567) (undo-tree-id4740 . -567) (undo-tree-id4741 . -567) (undo-tree-id4742 . -567) (undo-tree-id4743 . -567) (undo-tree-id4744 . -568) (undo-tree-id4745 . -568) (undo-tree-id4746 . -568) (undo-tree-id4747 . -568) (undo-tree-id4748 . -568) (undo-tree-id4749 . -568) (undo-tree-id4750 . -568) (undo-tree-id4751 . -568) (undo-tree-id4752 . -569) (undo-tree-id4753 . -569) (undo-tree-id4754 . -569) (undo-tree-id4755 . -569) (undo-tree-id4756 . -569) (undo-tree-id4757 . -569) (undo-tree-id4758 . -569) (undo-tree-id4759 . -569) (undo-tree-id4760 . -570) (undo-tree-id4761 . -570) (undo-tree-id4762 . -570) (undo-tree-id4763 . -570) (undo-tree-id4764 . -570) (undo-tree-id4765 . -570) (undo-tree-id4766 . -570) (undo-tree-id4767 . -570) (undo-tree-id4768 . -571) (undo-tree-id4769 . -571) (undo-tree-id4770 . -571) (undo-tree-id4771 . -571) (undo-tree-id4772 . -571) (undo-tree-id4773 . -571) (undo-tree-id4774 . -571) (undo-tree-id4775 . -571) (undo-tree-id4776 . -572) (undo-tree-id4777 . -572) (undo-tree-id4778 . -572) (undo-tree-id4779 . -572) (undo-tree-id4780 . -572) (undo-tree-id4781 . -572) (undo-tree-id4782 . -572) (undo-tree-id4783 . -572) (undo-tree-id4784 . -573) (undo-tree-id4785 . -573) (undo-tree-id4786 . -573) (undo-tree-id4787 . -573) (undo-tree-id4788 . -573) (undo-tree-id4789 . -573) (undo-tree-id4790 . -573) (undo-tree-id4791 . -573) (undo-tree-id4792 . -574) (undo-tree-id4793 . -574) (undo-tree-id4794 . -574) (undo-tree-id4795 . -574) (undo-tree-id4796 . -574) (undo-tree-id4797 . -574) (undo-tree-id4798 . -574) (undo-tree-id4799 . -574) (undo-tree-id4800 . -575) (undo-tree-id4801 . -575) (undo-tree-id4802 . -575) (undo-tree-id4803 . -575) (undo-tree-id4804 . -575) (undo-tree-id4805 . -575) (undo-tree-id4806 . -575) (undo-tree-id4807 . -575) (undo-tree-id4808 . -576) (undo-tree-id4809 . -576) (undo-tree-id4810 . -576) (undo-tree-id4811 . -576) (undo-tree-id4812 . -576) (undo-tree-id4813 . -576) (undo-tree-id4814 . -576) (undo-tree-id4815 . -576) (undo-tree-id4816 . -577) (undo-tree-id4817 . -577) (undo-tree-id4818 . -577) (undo-tree-id4819 . -577) (undo-tree-id4820 . -577) (undo-tree-id4821 . -577) (undo-tree-id4822 . -577) (undo-tree-id4823 . -577) (undo-tree-id4824 . -577) (undo-tree-id4825 . -577) (undo-tree-id4826 . -577) (undo-tree-id4827 . -577) (undo-tree-id4828 . -577) (undo-tree-id4829 . -577) (undo-tree-id4830 . -577) (undo-tree-id4831 . -577) (undo-tree-id4832 . -577) (undo-tree-id4833 . -577) (undo-tree-id4834 . -577) (undo-tree-id4835 . -577) (undo-tree-id4836 . -577) (undo-tree-id4837 . -577) (undo-tree-id4838 . -577) (undo-tree-id4839 . -577) (undo-tree-id4840 . -577) (undo-tree-id4841 . -577) (undo-tree-id4842 . -577) (undo-tree-id4843 . -577) (undo-tree-id4844 . -577) (undo-tree-id4845 . -577) (undo-tree-id4846 . -577) (undo-tree-id4847 . -577) (undo-tree-id4848 . -577) (undo-tree-id4849 . -577) (undo-tree-id4850 . -577) (undo-tree-id4851 . -577) (undo-tree-id4852 . -577) (undo-tree-id4853 . -577) (undo-tree-id4854 . -577) (undo-tree-id4855 . -577) (undo-tree-id4856 . -577) (undo-tree-id4857 . -577) (undo-tree-id4858 . -577) (undo-tree-id4859 . -577) (undo-tree-id4860 . -577) (undo-tree-id4861 . -577) (undo-tree-id4862 . -577) (undo-tree-id4863 . -577) (undo-tree-id4864 . -577) (undo-tree-id4865 . -577) (undo-tree-id4866 . -577) (undo-tree-id4867 . -577) (undo-tree-id4868 . -577) (undo-tree-id4869 . -577) (undo-tree-id4870 . -577) (undo-tree-id4871 . -577) (undo-tree-id4872 . -577) (undo-tree-id4873 . -577) (undo-tree-id4874 . -577) (undo-tree-id4875 . -577) (undo-tree-id4876 . -577) (undo-tree-id4877 . -577) (undo-tree-id4878 . -577) (undo-tree-id4879 . -577) (undo-tree-id4880 . -577) (undo-tree-id4881 . -577) (undo-tree-id4882 . -577) (undo-tree-id4883 . -577) (undo-tree-id4884 . -577) (undo-tree-id4885 . -577) (undo-tree-id4886 . -577) (undo-tree-id4887 . -577) (undo-tree-id4888 . -577) (undo-tree-id4889 . -577) (undo-tree-id4890 . -577) (undo-tree-id4891 . -577) (undo-tree-id4892 . -577) (undo-tree-id4893 . -577) (undo-tree-id4894 . -577) (undo-tree-id4895 . -577) (undo-tree-id4896 . -577) (undo-tree-id4897 . -577) (undo-tree-id4898 . -577) (undo-tree-id4899 . -577) (undo-tree-id4900 . -577) (undo-tree-id4901 . -577) (undo-tree-id4902 . -577) (undo-tree-id4903 . -577) (undo-tree-id4904 . -577) (undo-tree-id4905 . -577) (undo-tree-id4906 . -577) (undo-tree-id4907 . -577) (undo-tree-id4908 . -577) (undo-tree-id4909 . -577) (undo-tree-id4910 . -577) (undo-tree-id4911 . -611) (undo-tree-id4912 . -611) (undo-tree-id4913 . -611) (undo-tree-id4914 . -611) (undo-tree-id4915 . -611) (undo-tree-id4916 . -611) (undo-tree-id4917 . -611) (undo-tree-id4918 . -611) (undo-tree-id4919 . -611) (undo-tree-id4920 . -611) (undo-tree-id4921 . -611) (undo-tree-id4922 . -611) (undo-tree-id4923 . -611) (undo-tree-id4924 . -611) (undo-tree-id4925 . -611) (undo-tree-id4926 . -611) (undo-tree-id4927 . -611) (undo-tree-id4928 . -611) (undo-tree-id4929 . -611) (undo-tree-id4930 . -611) (undo-tree-id4931 . -611) (undo-tree-id4932 . -611) (undo-tree-id4933 . -611) (undo-tree-id4934 . -611) (undo-tree-id4935 . -611) (undo-tree-id4936 . -611) (undo-tree-id4937 . -611) (undo-tree-id4938 . -611) (undo-tree-id4939 . -611) (undo-tree-id4940 . -611) (undo-tree-id4941 . -702) 23994) nil (25755 8190 866889 631000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23369 . 23370) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24071) (23369 . 24072)) nil (25755 8190 865623 1000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 23369) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1)) nil (25755 8190 865621 73000) 0 nil])
([nil nil ((24002 . 24003)) nil (25755 8190 865610 50000) 0 nil])
([nil nil ((#("The only slightly tricky part in this code is the loop that adds the
" 0 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 30 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 32 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 43 45 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 45 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24003) (undo-tree-id4080 . -68) (undo-tree-id4081 . 69) (undo-tree-id4082 . -69) (undo-tree-id4083 . -69) (undo-tree-id4084 . -69) (undo-tree-id4085 . -69) (undo-tree-id4086 . -69) (undo-tree-id4087 . -69) (undo-tree-id4088 . -69) (undo-tree-id4089 . -69) (undo-tree-id4090 . -69) (undo-tree-id4091 . -69) (undo-tree-id4092 . -69) (undo-tree-id4093 . -69) (undo-tree-id4094 . -69) (undo-tree-id4095 . -69) (undo-tree-id4096 . -69) (undo-tree-id4097 . -69) (undo-tree-id4098 . -69) (undo-tree-id4099 . -69) (undo-tree-id4100 . -69) (undo-tree-id4101 . -69) (undo-tree-id4102 . -69) (undo-tree-id4103 . -69) (undo-tree-id4104 . -69) (undo-tree-id4105 . -69) (undo-tree-id4106 . -69) (undo-tree-id4107 . -69) (undo-tree-id4108 . -69) (undo-tree-id4109 . -69) (undo-tree-id4110 . -69) (undo-tree-id4111 . -69) (undo-tree-id4112 . -69) (undo-tree-id4113 . -69) (undo-tree-id4114 . -68) (undo-tree-id4115 . -69)) nil (25755 8190 865608 133000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24015 . 24016) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24084) (24015 . 24085) 24006) nil (25755 8190 865585 854000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24003) (undo-tree-id4036 . 1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1)) nil (25755 8190 865582 748000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24003) (undo-tree-id4002 . 1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1)) nil (25755 8190 865551 576000) 0 nil])
([nil nil ((#("The only slightly tricky part in this code is the loop that adds the
" 0 30 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 30 32 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 32 43 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 43 45 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 45 68 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 24014) (undo-tree-id5118 . -68) (undo-tree-id5119 . -68) (undo-tree-id5120 . -69) (undo-tree-id5121 . -69) (undo-tree-id5122 . -69) (undo-tree-id5123 . -69) (undo-tree-id5124 . -69) (undo-tree-id5125 . -69) (undo-tree-id5126 . -69) (undo-tree-id5127 . -69) (undo-tree-id5128 . -69) (undo-tree-id5129 . -69) (undo-tree-id5130 . -69) (undo-tree-id5131 . -69) (undo-tree-id5132 . -69) (undo-tree-id5133 . -69) (undo-tree-id5134 . -69) (undo-tree-id5135 . -69) (undo-tree-id5136 . -69) (undo-tree-id5137 . -69) (undo-tree-id5138 . -69) (undo-tree-id5139 . -69) (undo-tree-id5140 . -69) (undo-tree-id5141 . -69) (undo-tree-id5142 . -69) (undo-tree-id5143 . -69) (undo-tree-id5144 . -69) (undo-tree-id5145 . -69) (undo-tree-id5146 . -69) (undo-tree-id5147 . -69) (undo-tree-id5148 . -69) (undo-tree-id5149 . -69) (undo-tree-id5150 . -69) (undo-tree-id5151 . -69) (undo-tree-id5152 . -69) (undo-tree-id5153 . -69) (undo-tree-id5154 . -69) (undo-tree-id5155 . -69) (undo-tree-id5156 . -69) (undo-tree-id5157 . -69) (undo-tree-id5158 . -69) (undo-tree-id5159 . -69) (undo-tree-id5160 . -69) (undo-tree-id5161 . -69) (undo-tree-id5162 . -69) (undo-tree-id5163 . -69) (undo-tree-id5164 . -69) (undo-tree-id5165 . -69) (undo-tree-id5166 . -69) (undo-tree-id5167 . -69) (undo-tree-id5168 . -69) (undo-tree-id5169 . -69) (undo-tree-id5170 . -69) (undo-tree-id5171 . -69) (undo-tree-id5172 . -69) (undo-tree-id5173 . -69) (undo-tree-id5174 . -69) (undo-tree-id5175 . -69) (undo-tree-id5176 . -69) (undo-tree-id5177 . -69) (undo-tree-id5178 . -69) (undo-tree-id5179 . -69) (undo-tree-id5180 . -69) (undo-tree-id5181 . -69) (undo-tree-id5182 . -69) (undo-tree-id5183 . -69) (undo-tree-id5184 . -69) (undo-tree-id5185 . -69) (undo-tree-id5186 . -69) (undo-tree-id5187 . -69) (undo-tree-id5188 . -69) (undo-tree-id5189 . -69) (undo-tree-id5190 . -69) (undo-tree-id5191 . -69) (undo-tree-id5192 . -69) (undo-tree-id5193 . -69) (undo-tree-id5194 . -69) (undo-tree-id5195 . -69) (undo-tree-id5196 . -69) (undo-tree-id5197 . -69) (undo-tree-id5198 . -69) (undo-tree-id5199 . -69) (undo-tree-id5200 . -69) (undo-tree-id5201 . -69) (undo-tree-id5202 . -69) (undo-tree-id5203 . -69) (undo-tree-id5204 . -69) (undo-tree-id5205 . -69) (undo-tree-id5206 . -69) (undo-tree-id5207 . -69) (undo-tree-id5208 . -69) (undo-tree-id5209 . -69) (undo-tree-id5210 . -69) (undo-tree-id5211 . -69) (undo-tree-id5212 . -69) (undo-tree-id5213 . -69) (undo-tree-id5214 . -69) (undo-tree-id5215 . -69) (undo-tree-id5216 . -69) (undo-tree-id5217 . -69) (undo-tree-id5218 . -69) (undo-tree-id5219 . -69) (undo-tree-id5220 . -69) (undo-tree-id5221 . -69) (undo-tree-id5222 . -69) (undo-tree-id5223 . -69) (undo-tree-id5224 . -69) (undo-tree-id5225 . -69) (undo-tree-id5226 . -69) (undo-tree-id5227 . -69) (undo-tree-id5228 . -69) (undo-tree-id5229 . -69) (undo-tree-id5230 . -69) (undo-tree-id5231 . -69) (undo-tree-id5232 . -69) (undo-tree-id5233 . -69) (undo-tree-id5234 . -69) (undo-tree-id5235 . -69) (undo-tree-id5236 . -69) (undo-tree-id5237 . -69) (undo-tree-id5238 . -69) (undo-tree-id5239 . -69) (undo-tree-id5240 . -69) (undo-tree-id5241 . -69) (undo-tree-id5242 . -69) (undo-tree-id5243 . -69) (undo-tree-id5244 . -69) (undo-tree-id5245 . -69) (undo-tree-id5246 . -69) (undo-tree-id5247 . -69) (undo-tree-id5248 . -69) (undo-tree-id5249 . -69) (undo-tree-id5250 . -69) (undo-tree-id5251 . -69) (undo-tree-id5252 . -69) (undo-tree-id5253 . -69) (undo-tree-id5254 . -69) (undo-tree-id5255 . -69) (undo-tree-id5256 . -69) (undo-tree-id5257 . -69) (undo-tree-id5258 . -69) (undo-tree-id5259 . -69) (undo-tree-id5260 . -69) (undo-tree-id5261 . -69) (undo-tree-id5262 . -69) (undo-tree-id5263 . -69) (undo-tree-id5264 . -69) (undo-tree-id5265 . -69) (undo-tree-id5266 . -69) (undo-tree-id5267 . -69) (undo-tree-id5268 . -69) (undo-tree-id5269 . -69) (undo-tree-id5270 . -69) (undo-tree-id5271 . -69) (undo-tree-id5272 . -69) (undo-tree-id5273 . -69) (undo-tree-id5274 . -69) (undo-tree-id5275 . -69) (undo-tree-id5276 . -69) (undo-tree-id5277 . -69) (undo-tree-id5278 . -69) (undo-tree-id5279 . -69) (undo-tree-id5280 . -69) (undo-tree-id5281 . -69) (undo-tree-id5282 . -69) (undo-tree-id5283 . -69) (undo-tree-id5284 . -69) (undo-tree-id5285 . -69) (undo-tree-id5286 . -69) (undo-tree-id5287 . -69) (undo-tree-id5288 . -69) (undo-tree-id5289 . -69) (undo-tree-id5290 . -69) (undo-tree-id5291 . -69) (undo-tree-id5292 . -69) (undo-tree-id5293 . -69) (undo-tree-id5294 . -69) (undo-tree-id5295 . -69) (undo-tree-id5296 . -69) (undo-tree-id5297 . -69) (undo-tree-id5298 . -69) (undo-tree-id5299 . -69) (undo-tree-id5300 . -69) (undo-tree-id5301 . -69) (undo-tree-id5302 . -69) (undo-tree-id5303 . -69) (undo-tree-id5304 . -69) (undo-tree-id5305 . -69) (undo-tree-id5306 . -69) (undo-tree-id5307 . -69) (undo-tree-id5308 . -69) (undo-tree-id5309 . -69) (undo-tree-id5310 . -69) (undo-tree-id5311 . -69) (undo-tree-id5312 . -69) (undo-tree-id5313 . -69) (undo-tree-id5314 . -69) (undo-tree-id5315 . -69) (undo-tree-id5316 . -69) (undo-tree-id5317 . -69) (undo-tree-id5318 . -69) (undo-tree-id5319 . -69) (undo-tree-id5320 . -69) (undo-tree-id5321 . -69) (undo-tree-id5322 . -69) (undo-tree-id5323 . -69) (undo-tree-id5324 . -69) (undo-tree-id5325 . -69) (undo-tree-id5326 . -69) (undo-tree-id5327 . -69) (undo-tree-id5328 . -69) (undo-tree-id5329 . -69) (undo-tree-id5330 . -69) (undo-tree-id5331 . -69) (undo-tree-id5332 . -69) (undo-tree-id5333 . -69) (undo-tree-id5334 . -69) (undo-tree-id5335 . -69) (undo-tree-id5336 . -69) (undo-tree-id5337 . -69) (undo-tree-id5338 . -69) (undo-tree-id5339 . -69) (undo-tree-id5340 . -69) (undo-tree-id5341 . -69) (undo-tree-id5342 . -69) (undo-tree-id5343 . -69) (undo-tree-id5344 . -69) (undo-tree-id5345 . -69) (undo-tree-id5346 . -69) (undo-tree-id5347 . -69) (undo-tree-id5348 . -69) (undo-tree-id5349 . -69) (undo-tree-id5350 . -69) (undo-tree-id5351 . -69) (undo-tree-id5352 . -69) (undo-tree-id5353 . -69) (undo-tree-id5354 . -69) (undo-tree-id5355 . -69) (undo-tree-id5356 . -69) (undo-tree-id5357 . -69) (undo-tree-id5358 . -69) (undo-tree-id5359 . -69) (undo-tree-id5360 . -69) (undo-tree-id5361 . -69) (undo-tree-id5362 . -69) (undo-tree-id5363 . -69) (undo-tree-id5364 . -69) (undo-tree-id5365 . -69) (undo-tree-id5366 . -69) (undo-tree-id5367 . -69) (undo-tree-id5368 . -69) (undo-tree-id5369 . -69) (undo-tree-id5370 . -69) (undo-tree-id5371 . -69) (undo-tree-id5372 . -69) (undo-tree-id5373 . -69) (undo-tree-id5374 . -69) (undo-tree-id5375 . -69) (undo-tree-id5376 . -69) (undo-tree-id5377 . -69) (undo-tree-id5378 . -69) (undo-tree-id5379 . -69) (undo-tree-id5380 . -69) (undo-tree-id5381 . -69) (undo-tree-id5382 . -69) (undo-tree-id5383 . -69) (undo-tree-id5384 . -69) (undo-tree-id5385 . -69) (undo-tree-id5386 . -69) (undo-tree-id5387 . -69) (undo-tree-id5388 . -69) (undo-tree-id5389 . -69) (undo-tree-id5390 . -69) (undo-tree-id5391 . -69) (undo-tree-id5392 . -69) (undo-tree-id5393 . -69) (undo-tree-id5394 . -69) (undo-tree-id5395 . -69) (undo-tree-id5396 . -69) (undo-tree-id5397 . -69) (undo-tree-id5398 . -69) (undo-tree-id5399 . -69) (undo-tree-id5400 . -69) (undo-tree-id5401 . -69) (undo-tree-id5402 . -69) (undo-tree-id5403 . -69) (undo-tree-id5404 . -69) (undo-tree-id5405 . -69) (undo-tree-id5406 . -69) (undo-tree-id5407 . -69) (undo-tree-id5408 . -69) (undo-tree-id5409 . -69) (undo-tree-id5410 . -69) (undo-tree-id5411 . -69) (undo-tree-id5412 . -69) (undo-tree-id5413 . -69) (undo-tree-id5414 . -69) (undo-tree-id5415 . -69) (undo-tree-id5416 . -69) (undo-tree-id5417 . -69) (undo-tree-id5418 . -69) (undo-tree-id5419 . -69) (undo-tree-id5420 . -69) (undo-tree-id5421 . -69) (undo-tree-id5422 . -69) (undo-tree-id5423 . -69) (undo-tree-id5424 . -69) (undo-tree-id5425 . -69) (undo-tree-id5426 . -69) (undo-tree-id5427 . -69) (undo-tree-id5428 . -69) (undo-tree-id5429 . -69) (undo-tree-id5430 . -69) (undo-tree-id5431 . -69) (undo-tree-id5432 . -69) (undo-tree-id5433 . -69) (undo-tree-id5434 . -69) (undo-tree-id5435 . -69) (undo-tree-id5436 . -69) (undo-tree-id5437 . -69) (undo-tree-id5438 . -69) (undo-tree-id5439 . -69) (undo-tree-id5440 . -69) (undo-tree-id5441 . -69) (undo-tree-id5442 . -69) (undo-tree-id5443 . -69) (undo-tree-id5444 . -69) (undo-tree-id5445 . -69) (undo-tree-id5446 . -69) (undo-tree-id5447 . -69) (undo-tree-id5448 . -69) (undo-tree-id5449 . -69) (undo-tree-id5450 . -69) (undo-tree-id5451 . -69) (undo-tree-id5452 . -69) (undo-tree-id5453 . -69) (undo-tree-id5454 . -69) (undo-tree-id5455 . -69) (undo-tree-id5456 . -69) (undo-tree-id5457 . -69) (undo-tree-id5458 . -69) (undo-tree-id5459 . -69) (undo-tree-id5460 . -69) (undo-tree-id5461 . -69) (undo-tree-id5462 . -69) (undo-tree-id5463 . -69) (undo-tree-id5464 . -69) (undo-tree-id5465 . -69) (undo-tree-id5466 . -69) (undo-tree-id5467 . -69) (undo-tree-id5468 . -69) (undo-tree-id5469 . -69) (undo-tree-id5470 . -69) (undo-tree-id5471 . -69) (undo-tree-id5472 . -69) (undo-tree-id5473 . -69) (undo-tree-id5474 . -69) (undo-tree-id5475 . -69) (undo-tree-id5476 . -69) (undo-tree-id5477 . -69) (undo-tree-id5478 . -69) (undo-tree-id5479 . -69) (undo-tree-id5480 . -69) (undo-tree-id5481 . -69) (undo-tree-id5482 . -69) (undo-tree-id5483 . -69) (undo-tree-id5484 . -69) (undo-tree-id5485 . -69) (undo-tree-id5486 . -69) (undo-tree-id5487 . -69) (undo-tree-id5488 . -69) (undo-tree-id5489 . -69) (undo-tree-id5490 . -69) (undo-tree-id5491 . -69) (undo-tree-id5492 . -69) (undo-tree-id5493 . -69) (undo-tree-id5494 . -69) (undo-tree-id5495 . -69) (undo-tree-id5496 . -69) (undo-tree-id5497 . -69) (undo-tree-id5498 . -69) (undo-tree-id5499 . -69) (undo-tree-id5500 . -69) (undo-tree-id5501 . -69) (undo-tree-id5502 . -69) (undo-tree-id5503 . -69) (undo-tree-id5504 . -69) (undo-tree-id5505 . -69) (undo-tree-id5506 . -69) (undo-tree-id5507 . -69) (undo-tree-id5508 . -69) (undo-tree-id5509 . -69) (undo-tree-id5510 . -69) (undo-tree-id5511 . -69) (undo-tree-id5512 . -69) (undo-tree-id5513 . -69) (undo-tree-id5514 . -69) (undo-tree-id5515 . -69) (undo-tree-id5516 . -69) (undo-tree-id5517 . -69) (undo-tree-id5518 . -69) (undo-tree-id5519 . -69) (undo-tree-id5520 . -69) (undo-tree-id5521 . -69) (undo-tree-id5522 . -69) (undo-tree-id5523 . -69) (undo-tree-id5524 . -69) (undo-tree-id5525 . -69) (undo-tree-id5526 . -69) (undo-tree-id5527 . -69) (undo-tree-id5528 . -69) (undo-tree-id5529 . -69) (undo-tree-id5530 . -69) (undo-tree-id5531 . -69) (undo-tree-id5532 . -69) (undo-tree-id5533 . -69) (undo-tree-id5534 . -69) (undo-tree-id5535 . -69) (undo-tree-id5536 . -69) (undo-tree-id5537 . -69) (undo-tree-id5538 . -69) (undo-tree-id5539 . -69) (undo-tree-id5540 . -69) (undo-tree-id5541 . -69) (undo-tree-id5542 . -69) (undo-tree-id5543 . -69) (undo-tree-id5544 . -69) (undo-tree-id5545 . -69) (undo-tree-id5546 . -69) (undo-tree-id5547 . -69) (undo-tree-id5548 . -69) (undo-tree-id5549 . -69) (undo-tree-id5550 . -69) (undo-tree-id5551 . -69) (undo-tree-id5552 . -69) (undo-tree-id5553 . -69) (undo-tree-id5554 . -69) (undo-tree-id5555 . -69) (undo-tree-id5556 . -69) (undo-tree-id5557 . -69) (undo-tree-id5558 . -69) (undo-tree-id5559 . -69) (undo-tree-id5560 . -69) (undo-tree-id5561 . -69) (undo-tree-id5562 . -69) (undo-tree-id5563 . -69) (undo-tree-id5564 . -69) (undo-tree-id5565 . -69) (undo-tree-id5566 . -69) (undo-tree-id5567 . -69) (undo-tree-id5568 . -69) (undo-tree-id5569 . -69) (undo-tree-id5570 . -69) (undo-tree-id5571 . -69) (undo-tree-id5572 . -69) (undo-tree-id5573 . -69) (undo-tree-id5574 . -69) (undo-tree-id5575 . -69) (undo-tree-id5576 . -69) (undo-tree-id5577 . -69) (undo-tree-id5578 . -69) (undo-tree-id5579 . -69) (undo-tree-id5580 . -69) (undo-tree-id5581 . -69) (undo-tree-id5582 . -69) (undo-tree-id5583 . -69) (undo-tree-id5584 . -69) (undo-tree-id5585 . -69) (undo-tree-id5586 . -69) (undo-tree-id5587 . -69) (undo-tree-id5588 . -69) (undo-tree-id5589 . -69) (undo-tree-id5590 . -69) (undo-tree-id5591 . -69) (undo-tree-id5592 . -69) (undo-tree-id5593 . -69) (undo-tree-id5594 . -69) (undo-tree-id5595 . -69) (undo-tree-id5596 . -69) (undo-tree-id5597 . -69) (undo-tree-id5598 . -69) (undo-tree-id5599 . -69) (undo-tree-id5600 . -69) (undo-tree-id5601 . -69) (undo-tree-id5602 . -69) (undo-tree-id5603 . -69) (undo-tree-id5604 . -69) (undo-tree-id5605 . -69) (undo-tree-id5606 . -69) (undo-tree-id5607 . -69) (undo-tree-id5608 . -69) (undo-tree-id5609 . -69) (undo-tree-id5610 . -69) (undo-tree-id5611 . -69) (undo-tree-id5612 . -69) (undo-tree-id5613 . -69) (undo-tree-id5614 . -69) (undo-tree-id5615 . -69) (undo-tree-id5616 . -69) (undo-tree-id5617 . -69) (undo-tree-id5618 . -69) (undo-tree-id5619 . -69) (undo-tree-id5620 . -69) (undo-tree-id5621 . -69) (undo-tree-id5622 . -69) (undo-tree-id5623 . -69) (undo-tree-id5624 . -69) (undo-tree-id5625 . -69) (undo-tree-id5626 . -69) (undo-tree-id5627 . -69) (undo-tree-id5628 . -69) (undo-tree-id5629 . -69) (undo-tree-id5630 . -69) (undo-tree-id5631 . -69) (undo-tree-id5632 . -69) (undo-tree-id5633 . -69) (undo-tree-id5634 . -69) (undo-tree-id5635 . -69) (undo-tree-id5636 . -69) (undo-tree-id5637 . -69) (undo-tree-id5638 . -69) (undo-tree-id5639 . -69) (undo-tree-id5640 . -69) (undo-tree-id5641 . -69) (undo-tree-id5642 . -69) (undo-tree-id5643 . -69) (undo-tree-id5644 . -69) (undo-tree-id5645 . -69) (undo-tree-id5646 . -69) (undo-tree-id5647 . -69) (undo-tree-id5648 . -69) (undo-tree-id5649 . -69) (undo-tree-id5650 . -69) (undo-tree-id5651 . -69) (undo-tree-id5652 . -69) (undo-tree-id5653 . -69) (undo-tree-id5654 . -69) (undo-tree-id5655 . -69) (undo-tree-id5656 . -69) (undo-tree-id5657 . -69) (undo-tree-id5658 . -69) (undo-tree-id5659 . -69) (undo-tree-id5660 . -69) (undo-tree-id5661 . -69) (undo-tree-id5662 . -69) (undo-tree-id5663 . -69) (undo-tree-id5664 . -69) (undo-tree-id5665 . -69) (undo-tree-id5666 . -69) (undo-tree-id5667 . -69) (undo-tree-id5668 . -69) (undo-tree-id5669 . -69) (undo-tree-id5670 . -69) (undo-tree-id5671 . -69) (undo-tree-id5672 . -69) (undo-tree-id5673 . -69) (undo-tree-id5674 . -69) (undo-tree-id5675 . -69) (undo-tree-id5676 . -69) (undo-tree-id5677 . -69) (undo-tree-id5678 . -69) (undo-tree-id5679 . -69) (undo-tree-id5680 . -69) (undo-tree-id5681 . -69) (undo-tree-id5682 . -69) (undo-tree-id5683 . -69) (undo-tree-id5684 . -69) (undo-tree-id5685 . -69) (undo-tree-id5686 . -69) (undo-tree-id5687 . -69) (undo-tree-id5688 . -69) (undo-tree-id5689 . -69) (undo-tree-id5690 . -69) (undo-tree-id5691 . -69) (undo-tree-id5692 . -69) (undo-tree-id5693 . -69) (undo-tree-id5694 . -69) (undo-tree-id5695 . -69) (undo-tree-id5696 . -69) (undo-tree-id5697 . -69) (undo-tree-id5698 . -69) (undo-tree-id5699 . -69) (undo-tree-id5700 . -69) (undo-tree-id5701 . -69) (undo-tree-id5702 . -69) (undo-tree-id5703 . -69) (undo-tree-id5704 . -69) (undo-tree-id5705 . -69) (undo-tree-id5706 . -69) (undo-tree-id5707 . -69) (undo-tree-id5708 . -69) (undo-tree-id5709 . -69) (undo-tree-id5710 . -69) (undo-tree-id5711 . -69) (undo-tree-id5712 . -69) (undo-tree-id5713 . -69) (undo-tree-id5714 . -69) (undo-tree-id5715 . -69) (undo-tree-id5716 . -69) (undo-tree-id5717 . -69) (undo-tree-id5718 . -69) (undo-tree-id5719 . -69) (undo-tree-id5720 . -69) (undo-tree-id5721 . -69) (undo-tree-id5722 . -69) (undo-tree-id5723 . -69) (undo-tree-id5724 . -69) (undo-tree-id5725 . -69) (undo-tree-id5726 . -69) (undo-tree-id5727 . -69) (undo-tree-id5728 . -69) (undo-tree-id5729 . -69) (undo-tree-id5730 . -69) (undo-tree-id5731 . -69) (undo-tree-id5732 . -69) (undo-tree-id5733 . -69) (undo-tree-id5734 . -69) (undo-tree-id5735 . -69) (undo-tree-id5736 . -69) (undo-tree-id5737 . -69) (undo-tree-id5738 . -69) (undo-tree-id5739 . -69) (undo-tree-id5740 . -69) (undo-tree-id5741 . -69) (undo-tree-id5742 . -69) (undo-tree-id5743 . -69) (undo-tree-id5744 . -69) (undo-tree-id5745 . -69) (undo-tree-id5746 . -69) (undo-tree-id5747 . -69) (undo-tree-id5748 . -69) (undo-tree-id5749 . -69) (undo-tree-id5750 . -69) (undo-tree-id5751 . -69) (undo-tree-id5752 . -69) (undo-tree-id5753 . -69) (undo-tree-id5754 . -69) (undo-tree-id5755 . -69) (undo-tree-id5756 . -69) (undo-tree-id5757 . -69) (undo-tree-id5758 . -69) (undo-tree-id5759 . -69) (undo-tree-id5760 . -69) (undo-tree-id5761 . -69) (undo-tree-id5762 . -69) (undo-tree-id5763 . -69) (undo-tree-id5764 . -69) (undo-tree-id5765 . -69) (undo-tree-id5766 . -69) (undo-tree-id5767 . -69) (undo-tree-id5768 . -69) (undo-tree-id5769 . -69) (undo-tree-id5770 . -69) (undo-tree-id5771 . -69) (undo-tree-id5772 . -69) (undo-tree-id5773 . -69) (undo-tree-id5774 . -69) (undo-tree-id5775 . -69) (undo-tree-id5776 . -69) (undo-tree-id5777 . -69) (undo-tree-id5778 . -69) (undo-tree-id5779 . -69) (undo-tree-id5780 . -69) (undo-tree-id5781 . -69) (undo-tree-id5782 . -69) (undo-tree-id5783 . -69) (undo-tree-id5784 . -69) (undo-tree-id5785 . -69) (undo-tree-id5786 . -69) (undo-tree-id5787 . -69) (undo-tree-id5788 . -69) (undo-tree-id5789 . -69) (undo-tree-id5790 . -69) (undo-tree-id5791 . -69) (undo-tree-id5792 . -69) (undo-tree-id5793 . -69) (undo-tree-id5794 . -69) (undo-tree-id5795 . -69) (undo-tree-id5796 . -69) (undo-tree-id5797 . -69) (undo-tree-id5798 . -69) (undo-tree-id5799 . -69) (undo-tree-id5800 . -69) (undo-tree-id5801 . -69) (undo-tree-id5802 . -69) (undo-tree-id5803 . -69) (undo-tree-id5804 . -69) (undo-tree-id5805 . -69) (undo-tree-id5806 . -69) (undo-tree-id5807 . -69) (undo-tree-id5808 . -69) (undo-tree-id5809 . -69) (undo-tree-id5810 . -69) (undo-tree-id5811 . -69) (undo-tree-id5812 . -69) (undo-tree-id5813 . -69) (undo-tree-id5814 . -69) (undo-tree-id5815 . -69) (undo-tree-id5816 . -69) (undo-tree-id5817 . -69) (undo-tree-id5818 . -69) (undo-tree-id5819 . -69) (undo-tree-id5820 . -69) (undo-tree-id5821 . -69) (undo-tree-id5822 . -69) (undo-tree-id5823 . -69) (undo-tree-id5824 . -69) (undo-tree-id5825 . -69) (undo-tree-id5826 . -69) (undo-tree-id5827 . -69) (undo-tree-id5828 . -69) (undo-tree-id5829 . -69) (undo-tree-id5830 . -69) (undo-tree-id5831 . -69) (undo-tree-id5832 . -69) (undo-tree-id5833 . -69) (undo-tree-id5834 . -69) (undo-tree-id5835 . -69) (undo-tree-id5836 . -69) (undo-tree-id5837 . -69) (undo-tree-id5838 . -69) (undo-tree-id5839 . -69) (undo-tree-id5840 . -69) (undo-tree-id5841 . -69) (undo-tree-id5842 . -69) (undo-tree-id5843 . -69) (undo-tree-id5844 . -69) (undo-tree-id5845 . -69) (undo-tree-id5846 . -69) (undo-tree-id5847 . -69) (undo-tree-id5848 . -69) (undo-tree-id5849 . -69) (undo-tree-id5850 . -69) (undo-tree-id5851 . -69) (undo-tree-id5852 . -69) (undo-tree-id5853 . -69) (undo-tree-id5854 . -69) (undo-tree-id5855 . -69) (undo-tree-id5856 . -69) (undo-tree-id5857 . -69) (undo-tree-id5858 . -69) (undo-tree-id5859 . -69) (undo-tree-id5860 . -69) (undo-tree-id5861 . -69) (undo-tree-id5862 . -69) (undo-tree-id5863 . -69) (undo-tree-id5864 . -69) (undo-tree-id5865 . -69) (undo-tree-id5866 . -69) (undo-tree-id5867 . -69) (undo-tree-id5868 . -69) (undo-tree-id5869 . -69) (undo-tree-id5870 . -69) (undo-tree-id5871 . -69) (undo-tree-id5872 . -69) (undo-tree-id5873 . -69) (undo-tree-id5874 . -69) (undo-tree-id5875 . -69) (undo-tree-id5876 . -69) (undo-tree-id5877 . -69) (undo-tree-id5878 . -69) (undo-tree-id5879 . -69) (undo-tree-id5880 . -69) (undo-tree-id5881 . -69) (undo-tree-id5882 . -69) (undo-tree-id5883 . -69) (undo-tree-id5884 . -69) (undo-tree-id5885 . -69) (undo-tree-id5886 . -69) (undo-tree-id5887 . -69) (undo-tree-id5888 . -69) (undo-tree-id5889 . -69) (undo-tree-id5890 . -69) (undo-tree-id5891 . -69) (undo-tree-id5892 . -69) (undo-tree-id5893 . -69) (undo-tree-id5894 . -69) (undo-tree-id5895 . -69) (undo-tree-id5896 . -69) (undo-tree-id5897 . -69) (undo-tree-id5898 . -69) (undo-tree-id5899 . -69) (undo-tree-id5900 . -69) (undo-tree-id5901 . -69) (undo-tree-id5902 . -69) (undo-tree-id5903 . -69) (undo-tree-id5904 . -69) (undo-tree-id5905 . -69) (undo-tree-id5906 . -69) (undo-tree-id5907 . -69) (undo-tree-id5908 . -69) (undo-tree-id5909 . -69) (undo-tree-id5910 . -69) (undo-tree-id5911 . -69) (undo-tree-id5912 . -69) (undo-tree-id5913 . -69) (undo-tree-id5914 . -69) (undo-tree-id5915 . -69) (undo-tree-id5916 . -69) (undo-tree-id5917 . -69) (undo-tree-id5918 . -69) (undo-tree-id5919 . -69) (undo-tree-id5920 . -69) (undo-tree-id5921 . -69) (undo-tree-id5922 . -69) (undo-tree-id5923 . -69) (undo-tree-id5924 . -69) (undo-tree-id5925 . -69) (undo-tree-id5926 . -69) (undo-tree-id5927 . -69) (t 25755 8190 925299 211000)) nil (25755 8245 825744 354000) 0 nil])
([nil nil ((#("ResidualUnit layers to the model: as explained earlier, the first 3 RUs
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5113 . -71) (undo-tree-id5114 . 72) (undo-tree-id5115 . 72) (undo-tree-id5116 . -12) (undo-tree-id5117 . -72)) nil (25755 8245 824732 736000) 0 nil])
([nil nil ((#("have 64 filters, then the next 4 RUs have 128 filters, and so on. We then set
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5110 . -77) (undo-tree-id5111 . 78) (undo-tree-id5112 . -78)) nil (25755 8245 824727 963000) 0 nil])
([nil nil ((#("the stride to 1 when the number of filters is the same as in the previous
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5107 . -73) (undo-tree-id5108 . 74) (undo-tree-id5109 . -74)) nil (25755 8245 824722 767000) 0 nil])
([nil nil ((#("RU, or else we set it to 2. Then we add the ResidualUnit, and finally we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5104 . -72) (undo-tree-id5105 . 73) (undo-tree-id5106 . -73)) nil (25755 8245 824719 469000) 0 nil])
([nil nil ((#("update prev_filters.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 12 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 19 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5101 . -20) (undo-tree-id5102 . 21) (undo-tree-id5103 . -21)) nil (25755 8245 824713 337000) 0 nil])
([nil nil ((#("It is amazing that in fewer than 40 lines of code, we can build the model
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5945 . -73) (undo-tree-id5946 . 74) (undo-tree-id5947 . -74) (t 25755 8245 839794 623000)) nil (25755 8263 514518 993000) 0 nil])
([nil nil ((#("that won the ILSVRC 2015 challenge! This demonstrates both the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5942 . -62) (undo-tree-id5943 . 63) (undo-tree-id5944 . -63)) nil (25755 8263 514515 365000) 0 nil])
([nil nil ((#("elegance of the ResNet model and the expressiveness of the Keras API.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5939 . -69) (undo-tree-id5940 . 70) (undo-tree-id5941 . -70)) nil (25755 8263 514512 284000) 0 nil])
([nil nil ((#("Implementing the other CNN architectures is not much harder. However,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5936 . -69) (undo-tree-id5937 . 70) (undo-tree-id5938 . -70)) nil (25755 8263 514508 715000) 0 nil])
([nil nil ((#("Keras comes with several of these architectures built in, so why not use
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24014) (undo-tree-id5931 . -72) (undo-tree-id5932 . 73) (undo-tree-id5933 . 73) (undo-tree-id5934 . -5) (undo-tree-id5935 . -73)) nil (25755 8263 514504 822000) 0 nil])
([nil nil ((#("them instead?
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 24014) (undo-tree-id5928 . -13) (undo-tree-id5929 . 14) (undo-tree-id5930 . -14)) nil (25755 8263 514426 176000) 0 nil])
([nil nil ((24013 . 24014) (t 25755 8263 527902 171000) 24004) nil (25755 8266 929011 658000) 0 nil])
([nil nil ((23473 . 23474) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -23473) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) 23403 (t 25755 8266 935175 441000)) nil (25755 8293 241342 269000) 0 nil])
([nil nil ((23477 . 23478) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -23477) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) 23473) nil (25755 8293 241333 54000) 0 nil])
([nil nil ((23752 . 23756)) nil (25755 8293 241316 767000) 0 nil])
([nil nil ((23802 . 23806)) nil (25755 8293 241315 164000) 0 nil])
([nil nil ((23856 . 23860)) nil (25755 8293 241310 124000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -23883) (undo-tree-id5966 . -4) (undo-tree-id5967 . -4) (undo-tree-id5968 . -4) (undo-tree-id5969 . -4) (undo-tree-id5970 . -4) (undo-tree-id5971 . -4) (undo-tree-id5972 . -4) (undo-tree-id5973 . -4) (undo-tree-id5974 . -4) (undo-tree-id5975 . -4) (undo-tree-id5976 . -4) (undo-tree-id5977 . -4) 23887 (23882 . 23887) (t 25755 8293 301789 907000) 23859) nil (25755 8299 231634 507000) 0 nil])
([nil nil ((23672 . 23673) 23599) nil (25755 8299 231612 135000) 0 nil])
([nil nil ((23691 . 23692) 23674) nil (25755 8299 231606 716000) 0 nil])
([nil nil ((23368 . 23369) (t 25755 8299 240632 279000) 23334) nil (25755 8344 897878 857000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27362 . 27363) (nil fontified nil 27316 . 27363) (nil fontified nil 27245 . 27316) (nil fontified nil 27170 . 27245) (nil fontified nil 27101 . 27170) (nil fontified nil 27029 . 27101) (nil fontified nil 26964 . 27029) (nil fontified nil 26901 . 26964) (nil fontified nil 26828 . 26901) (nil fontified nil 26795 . 26828) (nil fontified nil 26724 . 26795) (nil fontified nil 26650 . 26724) (nil fontified nil 26644 . 26650) (nil fontified nil 26638 . 26644) (nil fontified nil 26614 . 26638) (nil fontified nil 26598 . 26614) (nil fontified nil 26581 . 26598) (nil fontified nil 26572 . 26581) (nil fontified nil 26565 . 26572) (nil fontified nil 26558 . 26565) (nil fontified nil 26530 . 26558) (nil fontified nil 26508 . 26530) (nil fontified nil 26489 . 26508) (nil fontified nil 26480 . 26489) (nil fontified nil 26445 . 26480) (nil fontified nil 26439 . 26445) (nil fontified nil 26377 . 26439) (nil fontified nil 26326 . 26377) (nil fontified nil 26287 . 26326) (nil fontified nil 26248 . 26287) (nil fontified nil 26177 . 26248) (nil fontified nil 26103 . 26177) (nil fontified nil 26030 . 26103) (nil fontified nil 25963 . 26030) (nil fontified nil 25897 . 25963) (nil fontified nil 25823 . 25897) (nil fontified nil 25750 . 25823) (nil fontified nil 25678 . 25750) (nil fontified nil 25646 . 25678) (nil fontified nil 25589 . 25646) (nil fontified nil 25584 . 25589) (nil fontified nil 25513 . 25584) (nil fontified nil 25452 . 25513) (nil fontified nil 25382 . 25452) (nil fontified nil 25313 . 25382) (nil fontified nil 25243 . 25313) (nil fontified nil 25168 . 25243) (nil fontified nil 25101 . 25168) (nil fontified nil 25043 . 25101) (nil fontified nil 24958 . 25043) (nil fontified nil 24874 . 24958) (nil fontified nil 24818 . 24874) (nil fontified nil 24799 . 24818) (nil fontified nil 24728 . 24799) (nil fontified nil 24654 . 24728) (nil fontified nil 24585 . 24654) (nil fontified nil 24508 . 24585) (nil fontified nil 24440 . 24508) (nil fontified nil 24375 . 24440) (nil fontified nil 24361 . 24375) (nil fontified nil 24288 . 24361) (nil fontified nil 24216 . 24288) (nil fontified nil 24141 . 24216) (nil fontified nil 24070 . 24141) (nil fontified nil 24035 . 24070) (24035 . 27363) (t 25755 8345 916174 610000)) nil (25755 8511 904646 630000) 0 nil] [nil nil ((#("(" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block))) . 23413) (t 25755 8305 287473 531000) (23414 . 23415) 23413 (t 25755 8305 287473 531000)) ((#("w" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 23414) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (23413 . 23414)) (25755 8344 462151 847000) 0 nil])
([nil nil ((24032 . 24033) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24032) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 24032) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -24033) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) 24032) nil (25755 8511 904544 432000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 23413) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1)) ((23413 . 23414) (t 25755 8343 524582 140000)) (25755 8343 513989 486000) 0 nil])
([nil nil ((27361 . 27362)) nil (25755 8511 902858 475000) 0 nil])
nil
([nil nil ((24087 . 24088) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24087) (undo-tree-id6664 . -1) (t 25755 8511 973111 751000)) nil (25755 8568 997282 530000) 0 nil])
([nil nil ((#("In general, you won't have to implement standard models like GoogLeNet
" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 20 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068) (undo-tree-id6644 . -70) (undo-tree-id6645 . -3) (undo-tree-id6646 . -10) (undo-tree-id6647 . -12) (undo-tree-id6648 . -16) (undo-tree-id6649 . -19) (undo-tree-id6650 . -19) (undo-tree-id6651 . -19) (undo-tree-id6652 . -19) (undo-tree-id6653 . -19) (undo-tree-id6654 . -19) (undo-tree-id6655 . -19) (undo-tree-id6656 . -19) (undo-tree-id6657 . -19) (undo-tree-id6658 . -19) (undo-tree-id6659 . -16) (undo-tree-id6660 . -12) (undo-tree-id6661 . -10) (undo-tree-id6662 . -3) (undo-tree-id6663 . -71)) nil (25755 8568 997279 748000) 0 nil])
([nil nil ((#("or ResNet manually," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068) (undo-tree-id6642 . -18) (undo-tree-id6643 . -19)) nil (25755 8568 997263 767000) 0 nil])
([nil nil ((#(" since pretrained networks are readily available with a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 24068) (undo-tree-id6640 . -55) (undo-tree-id6641 . -56)) nil (25755 8568 997232 335000) 0 nil])
([nil nil ((#("single line of code in the keras" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068) (undo-tree-id6638 . -31) (undo-tree-id6639 . -32)) nil (25755 8568 997230 496000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1)) nil (25755 8568 997228 473000) 0 nil])
([nil nil ((#("applications package. For example, you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068) (undo-tree-id6634 . -38) (undo-tree-id6635 . -39)) nil (25755 8568 997226 195000) 0 nil])
([nil nil ((#("x" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24068) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . 1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (#("y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24069) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) 24070 (24068 . 24070)) nil (25755 8568 997222 997000) 0 nil])
([nil nil ((#("can" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068) (undo-tree-id6592 . -2) (undo-tree-id6593 . 3) (undo-tree-id6594 . -3) (undo-tree-id6595 . -3)) nil (25755 8568 997194 845000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 24068) (undo-tree-id6589 . 1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1)) nil (25755 8568 997191 193000) 0 nil])
([nil nil ((24068 . 24069) (#("l" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24068)) nil (25755 8568 997188 417000) 0 nil])
([nil nil ((#("with the following" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24118) (undo-tree-id6583 . -17) (undo-tree-id6584 . -17) (undo-tree-id6585 . -9) (undo-tree-id6586 . -5) (undo-tree-id6587 . -18) (undo-tree-id6588 . -18)) nil (25755 8568 997187 87000) 0 nil])
([nil nil ((#("line of code:
" 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24119) (undo-tree-id6581 . -13) (undo-tree-id6582 . -14)) nil (25755 8568 997181 460000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 24132 24132 nil nil nil nil #s(yas--exit 24150 nil))) #s(yas--exit 24150 nil) 5 nil #s(yas--field 1 24132 24132 nil nil nil nil #s(yas--exit 24150 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -24150) (undo-tree-id6492 . -2) (24120 . 24163) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 24120) (undo-tree-id6493 . -1) (undo-tree-id6494 . -2) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -2) (undo-tree-id6532 . -2) (undo-tree-id6533 . -2) (undo-tree-id6534 . -2) (undo-tree-id6535 . -2) (undo-tree-id6536 . -2) (undo-tree-id6537 . -2) (undo-tree-id6538 . -2) (undo-tree-id6539 . -2) (undo-tree-id6540 . -2) (undo-tree-id6541 . -2) 24122 (24120 . 24122) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24120) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) 24121 (24120 . 24121) (24119 . 24120) (24118 . 24119) 24068) nil (25755 8568 997174 43000) 0 nil])
([nil nil ((apply yas--snippet-revive 24120 24161 #s(yas--snippet nil (#s(yas--field 1 24132 24132 nil nil nil nil #s(yas--exit 24150 nil))) #s(yas--exit 24150 nil) 5 nil #s(yas--field 1 24132 24132 nil nil nil nil #s(yas--exit 24150 nil)) nil nil))) nil (25755 8568 996711 664000) 0 nil])
([nil nil ((24132 . 24138)) nil (25755 8568 996710 715000) 0 nil])
([nil nil ((24155 . 24156) (24154 . 24155) 24137) nil (25755 8568 996709 639000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24156) (undo-tree-id6490 . 1) (undo-tree-id6491 . -1)) nil (25755 8568 996696 184000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24156) (undo-tree-id6488 . 1) (undo-tree-id6489 . -1)) nil (25755 8568 996690 782000) 0 nil])
([nil nil ((#("model = keras.applications.resnet50.ResNet50(weights=\"imagenet\")
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24168) (undo-tree-id6747 . -64) (undo-tree-id6748 . -65) (t 25755 8569 54969 345000)) nil (25755 8579 44856 687000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24156 . 24157) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24221) (24156 . 24222)) nil (25755 8579 44849 963000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24155) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1)) nil (25755 8579 44842 686000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24221) (undo-tree-id6766 . -1) (t 25755 8579 57961 249000)) nil (25755 8582 847020 631000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24155) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1)) nil (25755 8582 847014 414000) 0 nil])
([nil nil ((24229 . 24230) (t 25755 8582 853583 587000) 24220) nil (25755 8586 109010 392000) 0 nil])
([nil nil ((24235 . 24236) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24235) (undo-tree-id6767 . -1) (t 25755 8586 121260 536000)) nil (25755 8592 115697 646000) 0 nil])
([nil nil ((#("That's all! " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 5 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24231) (undo-tree-id6771 . -11) (undo-tree-id6772 . -11) (undo-tree-id6773 . -11) (undo-tree-id6774 . -4) (undo-tree-id6775 . -11) (undo-tree-id6776 . -4) (undo-tree-id6777 . -4) (undo-tree-id6778 . -4) (undo-tree-id6779 . -4) (undo-tree-id6780 . -4) (undo-tree-id6781 . -4) (undo-tree-id6782 . -4) (undo-tree-id6783 . -4) (undo-tree-id6784 . -4) (undo-tree-id6785 . -4) (undo-tree-id6786 . -4) (undo-tree-id6787 . -7) (undo-tree-id6788 . -7) (undo-tree-id6789 . -7) (undo-tree-id6790 . -7) (undo-tree-id6791 . -7) (undo-tree-id6792 . -7) (undo-tree-id6793 . -7) (undo-tree-id6794 . -7) (undo-tree-id6795 . -12) (undo-tree-id6796 . -11) (undo-tree-id6797 . -5) (undo-tree-id6798 . -5) (undo-tree-id6799 . -5) (undo-tree-id6800 . -5) (undo-tree-id6801 . -5) (undo-tree-id6802 . -5) (undo-tree-id6803 . -5) (undo-tree-id6804 . -5) (undo-tree-id6805 . -9) (undo-tree-id6806 . -9) (undo-tree-id6807 . -9) (undo-tree-id6808 . -9) (undo-tree-id6809 . -9) (undo-tree-id6810 . -9) (undo-tree-id6811 . -9) (undo-tree-id6812 . -9) (undo-tree-id6813 . -10) (undo-tree-id6814 . -10) (undo-tree-id6815 . -10) (undo-tree-id6816 . -10) (undo-tree-id6817 . -10) (undo-tree-id6818 . -10) (undo-tree-id6819 . -10) (undo-tree-id6820 . -10) (undo-tree-id6821 . -11) (undo-tree-id6822 . -11) (undo-tree-id6823 . -11) (undo-tree-id6824 . -11) (undo-tree-id6825 . -11) (undo-tree-id6826 . -11) (undo-tree-id6827 . -11) (undo-tree-id6828 . -11) (undo-tree-id6829 . -11) (undo-tree-id6830 . -12) 24242 (t 25755 8592 124671 990000)) nil (25755 8616 136599 634000) 0 nil])
([nil nil ((24286 . 24287) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24286) (undo-tree-id6770 . -1) 24231) nil (25755 8616 136559 60000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -24305) (nil fontified nil 24304 . 24305) (nil wrap-prefix #("  " 0 2 (face org-indent)) 24304 . 24305) (24304 . 24305) 24286) nil (25755 8616 136556 593000) 0 nil])
([nil nil ((24323 . 24325)) nil (25755 8616 136554 720000) 0 nil])
([nil nil ((24365 . 24366) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24365) (undo-tree-id6768 . 1) (undo-tree-id6769 . -1) 24325) nil (25755 8616 136550 736000) 0 nil])
([nil nil ((24398 . 24399) (t 25755 8616 198373 674000)) nil (25755 8638 801114 399000) 0 nil])
([nil nil ((24435 . 24436) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24435) (undo-tree-id6988 . -1) 24399) nil (25755 8638 801113 132000) 0 nil])
([nil nil ((#("-" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24434) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1)) nil (25755 8638 801110 236000) 0 nil])
([nil nil ((#("(other models may expect other sizes, such as 299 × 299)" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24448) (undo-tree-id6951 . -55) (undo-tree-id6952 . 56) (undo-tree-id6953 . -1) (undo-tree-id6954 . 1) (undo-tree-id6955 . -56) (undo-tree-id6956 . -56)) nil (25755 8638 801070 608000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24447) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1)) nil (25755 8638 801061 444000) 0 nil])
([nil nil ((24449 . 24450)) nil (25755 8638 800967 393000) 0 nil])
([nil nil ((24452 . 24453) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24452) (undo-tree-id6831 . -1) 24450) nil (25755 8638 800962 814000) 0 nil])
([nil nil ((#("earlier" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24534) (undo-tree-id7409 . -6) (undo-tree-id7410 . -7) (undo-tree-id7411 . -7) (undo-tree-id7412 . -7) (undo-tree-id7413 . -7) (undo-tree-id7414 . -7) (undo-tree-id7415 . -7) (undo-tree-id7416 . -7) (undo-tree-id7417 . -7) (undo-tree-id7418 . -7) (undo-tree-id7419 . -7) (undo-tree-id7420 . -7) (undo-tree-id7421 . -7) (undo-tree-id7422 . -7) (undo-tree-id7423 . -7) (undo-tree-id7424 . -7) (undo-tree-id7425 . -7) (undo-tree-id7426 . -7) (undo-tree-id7427 . -7) (undo-tree-id7428 . -7) (undo-tree-id7429 . -7) 24541 (t 25755 8638 864294 134000)) nil (25755 8692 935037 757000) 0 nil])
([nil nil ((#("we loaded :" 0 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24524) (undo-tree-id7378 . -10) (undo-tree-id7379 . -10) (undo-tree-id7380 . -10) (undo-tree-id7381 . -10) (undo-tree-id7382 . -10) (undo-tree-id7383 . -10) (undo-tree-id7384 . -10) (undo-tree-id7385 . -10) (undo-tree-id7386 . -10) (undo-tree-id7387 . -10) (undo-tree-id7388 . -10) (undo-tree-id7389 . -10) (undo-tree-id7390 . -10) (undo-tree-id7391 . -10) (undo-tree-id7392 . -10) (undo-tree-id7393 . -10) (undo-tree-id7394 . -10) (undo-tree-id7395 . -10) (undo-tree-id7396 . -10) (undo-tree-id7397 . -10) (undo-tree-id7398 . -10) (undo-tree-id7399 . -10) (undo-tree-id7400 . -10) (undo-tree-id7401 . -10) (undo-tree-id7402 . -10) (undo-tree-id7403 . -10) (undo-tree-id7404 . -10) (undo-tree-id7405 . -10) (undo-tree-id7406 . -3) (undo-tree-id7407 . -11) (undo-tree-id7408 . -11)) nil (25755 8692 935022 319000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 24536 24536 nil nil nil nil #s(yas--exit 24554 nil))) #s(yas--exit 24554 nil) 6 nil #s(yas--field 1 24536 24536 nil nil nil nil #s(yas--exit 24554 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -24554) (undo-tree-id7328 . -2) (24524 . 24567) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24524) (undo-tree-id7329 . -1) (undo-tree-id7330 . -2) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -2) (undo-tree-id7368 . -2) (undo-tree-id7369 . -2) (undo-tree-id7370 . -2) (undo-tree-id7371 . -2) (undo-tree-id7372 . -2) (undo-tree-id7373 . -2) (undo-tree-id7374 . -2) (undo-tree-id7375 . -2) (undo-tree-id7376 . -2) (undo-tree-id7377 . -2) 24526 (24524 . 24526)) nil (25755 8692 934999 61000) 0 nil])
([nil nil ((apply yas--snippet-revive 24524 24565 #s(yas--snippet nil (#s(yas--field 1 24536 24536 nil nil nil nil #s(yas--exit 24554 nil))) #s(yas--exit 24554 nil) 6 nil #s(yas--field 1 24536 24536 nil nil nil nil #s(yas--exit 24554 nil)) nil nil))) nil (25755 8692 934964 461000) 0 nil])
([nil nil ((24536 . 24542)) nil (25755 8692 934963 675000) 0 nil])
([nil nil ((#("images_resized = tf.image.resize(images, [224, 224])TIP
" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 7 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 14 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24572) (undo-tree-id7307 . -55) (undo-tree-id7308 . -19) (undo-tree-id7309 . -19) (undo-tree-id7310 . -19) (undo-tree-id7311 . -19) (undo-tree-id7312 . -19) (undo-tree-id7313 . -19) (undo-tree-id7314 . -19) (undo-tree-id7315 . -19) (undo-tree-id7316 . -19) (undo-tree-id7317 . -19) (undo-tree-id7318 . -19) (undo-tree-id7319 . -19) (undo-tree-id7320 . -19) (undo-tree-id7321 . -19) (undo-tree-id7322 . -19) (undo-tree-id7323 . -19) (undo-tree-id7324 . -19) (undo-tree-id7325 . -19) (undo-tree-id7326 . -19) (undo-tree-id7327 . -56) 24591) nil (25755 8692 934961 933000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24559 . 24560) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24615) (24559 . 24616)) nil (25755 8692 934946 704000) 0 nil])
([nil nil ((24627 . 24628) 24618) nil (25755 8692 934945 641000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 24541) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1)) nil (25755 8692 934943 786000) 0 nil])
([nil nil ((24541 . 24542)) nil (25755 8692 934935 678000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t)) . 24559) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1)) nil (25755 8692 934933 713000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 24615) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1)) nil (25755 8692 934909 611000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t)) . 24615) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1)) nil (25755 8692 934641 696000) 0 nil])
([nil nil ((24625 . 24626) 24625) nil (25755 8692 934629 600000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 24626) (undo-tree-id7194 . 1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1)) nil (25755 8692 934627 836000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24558 . 24559) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24593) (24558 . 24594) 24526) nil (25755 8692 934612 459000) 0 nil])
([nil nil ((#("#+begin_src pyhton :result outputs
" 0 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 24524) (undo-tree-id6989 . -34) (undo-tree-id6990 . -12) (undo-tree-id6991 . -12) (undo-tree-id6992 . -12) (undo-tree-id6993 . -12) (undo-tree-id6994 . -12) (undo-tree-id6995 . -12) (undo-tree-id6996 . -12) (undo-tree-id6997 . -12) (undo-tree-id6998 . -11) (undo-tree-id6999 . -11) (undo-tree-id7000 . -11) (undo-tree-id7001 . -11) (undo-tree-id7002 . -11) (undo-tree-id7003 . -11) (undo-tree-id7004 . -11) (undo-tree-id7005 . -11) (undo-tree-id7006 . -11) (undo-tree-id7007 . -11) (undo-tree-id7008 . -11) (undo-tree-id7009 . -11) (undo-tree-id7010 . -11) (undo-tree-id7011 . -11) (undo-tree-id7012 . -11) (undo-tree-id7013 . -11) (undo-tree-id7014 . -11) (undo-tree-id7015 . -11) (undo-tree-id7016 . -11) (undo-tree-id7017 . -12) (undo-tree-id7018 . -12) (undo-tree-id7019 . -12) (undo-tree-id7020 . -12) (undo-tree-id7021 . -12) (undo-tree-id7022 . -12) (undo-tree-id7023 . -12) (undo-tree-id7024 . -12) (undo-tree-id7025 . -12) (undo-tree-id7026 . -12) (undo-tree-id7027 . -13) (undo-tree-id7028 . -13) (undo-tree-id7029 . -13) (undo-tree-id7030 . -13) (undo-tree-id7031 . -13) (undo-tree-id7032 . -13) (undo-tree-id7033 . -13) (undo-tree-id7034 . -13) (undo-tree-id7035 . -14) (undo-tree-id7036 . -14) (undo-tree-id7037 . -14) (undo-tree-id7038 . -14) (undo-tree-id7039 . -14) (undo-tree-id7040 . -14) (undo-tree-id7041 . -14) (undo-tree-id7042 . -14) (undo-tree-id7043 . -15) (undo-tree-id7044 . -15) (undo-tree-id7045 . -15) (undo-tree-id7046 . -15) (undo-tree-id7047 . -15) (undo-tree-id7048 . -15) (undo-tree-id7049 . -15) (undo-tree-id7050 . -15) (undo-tree-id7051 . -16) (undo-tree-id7052 . -16) (undo-tree-id7053 . -16) (undo-tree-id7054 . -16) (undo-tree-id7055 . -16) (undo-tree-id7056 . -16) (undo-tree-id7057 . -16) (undo-tree-id7058 . -16) (undo-tree-id7059 . -17) (undo-tree-id7060 . -17) (undo-tree-id7061 . -17) (undo-tree-id7062 . -17) (undo-tree-id7063 . -17) (undo-tree-id7064 . -17) (undo-tree-id7065 . -17) (undo-tree-id7066 . -17) (undo-tree-id7067 . -17) (undo-tree-id7068 . -17) (undo-tree-id7069 . -17) (undo-tree-id7070 . -17) (undo-tree-id7071 . -17) (undo-tree-id7072 . -17) (undo-tree-id7073 . -17) (undo-tree-id7074 . -17) (undo-tree-id7075 . -17) (undo-tree-id7076 . -17) (undo-tree-id7077 . -17) (undo-tree-id7078 . -17) (undo-tree-id7079 . -17) (undo-tree-id7080 . -17) (undo-tree-id7081 . -17) (undo-tree-id7082 . -17) (undo-tree-id7083 . -17) (undo-tree-id7084 . -17) (undo-tree-id7085 . -17) (undo-tree-id7086 . -17) (undo-tree-id7087 . -17) (undo-tree-id7088 . -17) (undo-tree-id7089 . -17) (undo-tree-id7090 . -17) (undo-tree-id7091 . -17) (undo-tree-id7092 . -17) (undo-tree-id7093 . -17) (undo-tree-id7094 . -17) (undo-tree-id7095 . -17) (undo-tree-id7096 . -17) (undo-tree-id7097 . -17) (undo-tree-id7098 . -17) (undo-tree-id7099 . -17) (undo-tree-id7100 . -17) (undo-tree-id7101 . -2) (undo-tree-id7102 . -7) (undo-tree-id7103 . -8) (undo-tree-id7104 . -12) (undo-tree-id7105 . -19) (undo-tree-id7106 . -17) (undo-tree-id7107 . -17) (undo-tree-id7108 . -17) (undo-tree-id7109 . -17) (undo-tree-id7110 . -17) (undo-tree-id7111 . -17) (undo-tree-id7112 . -17) (undo-tree-id7113 . -17) (undo-tree-id7114 . -17) (undo-tree-id7115 . -17) (undo-tree-id7116 . -17) (undo-tree-id7117 . -17) (undo-tree-id7118 . -17) (undo-tree-id7119 . -17) (undo-tree-id7120 . -17) (undo-tree-id7121 . -17) (undo-tree-id7122 . -17) (undo-tree-id7123 . -17) (undo-tree-id7124 . -17) (undo-tree-id7125 . -17) (undo-tree-id7126 . -17) (undo-tree-id7127 . -18) (undo-tree-id7128 . -18) (undo-tree-id7129 . -18) (undo-tree-id7130 . -18) (undo-tree-id7131 . -18) (undo-tree-id7132 . -18) (undo-tree-id7133 . -18) (undo-tree-id7134 . -18) (undo-tree-id7135 . -17) (undo-tree-id7136 . -17) (undo-tree-id7137 . -17) (undo-tree-id7138 . -17) (undo-tree-id7139 . -17) (undo-tree-id7140 . -17) (undo-tree-id7141 . -17) (undo-tree-id7142 . -17) (undo-tree-id7143 . -17) (undo-tree-id7144 . -17) (undo-tree-id7145 . -17) (undo-tree-id7146 . -17) (undo-tree-id7147 . -17) (undo-tree-id7148 . -17) (undo-tree-id7149 . -17) (undo-tree-id7150 . -17) (undo-tree-id7151 . -17) (undo-tree-id7152 . -17) (undo-tree-id7153 . -17) (undo-tree-id7154 . -17) (undo-tree-id7155 . -17) (undo-tree-id7156 . -17) (undo-tree-id7157 . -17) (undo-tree-id7158 . -17) (undo-tree-id7159 . -17) (undo-tree-id7160 . -17) (undo-tree-id7161 . -2) (undo-tree-id7162 . -2) (undo-tree-id7163 . -2) (undo-tree-id7164 . -2) (undo-tree-id7165 . -2) (undo-tree-id7166 . -2) (undo-tree-id7167 . -2) (undo-tree-id7168 . -2) (undo-tree-id7169 . -2) (undo-tree-id7170 . -2) (undo-tree-id7171 . -2) (undo-tree-id7172 . -2) (undo-tree-id7173 . -2) (undo-tree-id7174 . -2) (undo-tree-id7175 . -2) (undo-tree-id7176 . -2) (undo-tree-id7177 . -35) (undo-tree-id7178 . -35) (undo-tree-id7179 . -35) (undo-tree-id7180 . -35) (undo-tree-id7181 . -35) (undo-tree-id7182 . -35) (undo-tree-id7183 . -35) (undo-tree-id7184 . -35) (undo-tree-id7185 . -35) (undo-tree-id7186 . -35) (undo-tree-id7187 . -35) (undo-tree-id7188 . -35) (undo-tree-id7189 . -35) (undo-tree-id7190 . -35) (undo-tree-id7191 . -35) (undo-tree-id7192 . -35) (undo-tree-id7193 . -35)) nil (25755 8692 934600 251000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24558 . 24559) (#("
" 0 1 (rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24593) (24558 . 24594) 24524 (t 25755 8692 995618 394000)) nil (25755 8701 148163 390000) 0 nil])
([nil nil ((#("#+begin_src pyhton :result outputs
" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1 34 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . 24559) (undo-tree-id7448 . -34) (undo-tree-id7449 . -34) (undo-tree-id7450 . -11) (undo-tree-id7451 . -1) (undo-tree-id7452 . -2) (undo-tree-id7453 . -3) (undo-tree-id7454 . -4) (undo-tree-id7455 . -5) (undo-tree-id7456 . -6) (undo-tree-id7457 . -7) (undo-tree-id7458 . -8) (undo-tree-id7459 . -9) (undo-tree-id7460 . -10) (undo-tree-id7461 . -11) (undo-tree-id7462 . -11) (undo-tree-id7463 . -11) (undo-tree-id7464 . -11) (undo-tree-id7465 . -11) (undo-tree-id7466 . -11) (undo-tree-id7467 . -11) (undo-tree-id7468 . -11) (undo-tree-id7469 . -11) (undo-tree-id7470 . -11) (undo-tree-id7471 . -11) (undo-tree-id7472 . -35) 24570) nil (25755 8737 282923 34000) 0 nil] [nil nil ((#("#+begin_src python :result outputs
" 0 34 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-multiline t face org-block-begin-line) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 24524) (undo-tree-id7430 . -34) (undo-tree-id7431 . -35) (undo-tree-id7432 . -35) (undo-tree-id7433 . -35) (undo-tree-id7434 . -35) (undo-tree-id7435 . -35) (undo-tree-id7436 . -35) (undo-tree-id7437 . -35) (undo-tree-id7438 . -35) (undo-tree-id7439 . -35) (undo-tree-id7440 . -35) (undo-tree-id7441 . -35) (undo-tree-id7442 . -35) (undo-tree-id7443 . -35) (undo-tree-id7444 . -35) (undo-tree-id7445 . -35) (undo-tree-id7446 . -35) (undo-tree-id7447 . -35)) ((24524 . 24559)) (25755 8701 147562 915000) 0 nil])
([nil nil ((#("If this is a problem, try" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24684) (undo-tree-id7797 . -24) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1) (undo-tree-id7823 . -1) (undo-tree-id7824 . -1) (undo-tree-id7825 . -1) (undo-tree-id7826 . -1) (undo-tree-id7827 . -1) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -24) (undo-tree-id7861 . -24) (undo-tree-id7862 . -24) (undo-tree-id7863 . -24) (undo-tree-id7864 . -24) (undo-tree-id7865 . -24) (undo-tree-id7866 . -24) (undo-tree-id7867 . -24) (undo-tree-id7868 . -24) (undo-tree-id7869 . -24) (undo-tree-id7870 . -24) (undo-tree-id7871 . -24) (undo-tree-id7872 . -24) (undo-tree-id7873 . -24) (undo-tree-id7874 . -24) (undo-tree-id7875 . -24) (undo-tree-id7876 . -24) (undo-tree-id7877 . -24) (undo-tree-id7878 . -24) (undo-tree-id7879 . -24) (undo-tree-id7880 . -24) (undo-tree-id7881 . -24) (undo-tree-id7882 . -22) (undo-tree-id7883 . -22) (undo-tree-id7884 . -22) (undo-tree-id7885 . -22) (undo-tree-id7886 . -22) (undo-tree-id7887 . -22) (undo-tree-id7888 . -22) (undo-tree-id7889 . -22) (undo-tree-id7890 . -22) (undo-tree-id7891 . -22) (undo-tree-id7892 . -22) (undo-tree-id7893 . -22) (undo-tree-id7894 . -22) (undo-tree-id7895 . -22) (undo-tree-id7896 . -22) (undo-tree-id7897 . -22) (undo-tree-id7898 . -22) (undo-tree-id7899 . -22) (undo-tree-id7900 . -22) (undo-tree-id7901 . -22) (undo-tree-id7902 . -22) (undo-tree-id7903 . -22) (undo-tree-id7904 . -20) (undo-tree-id7905 . -20) (undo-tree-id7906 . -20) (undo-tree-id7907 . -20) (undo-tree-id7908 . -20) (undo-tree-id7909 . -20) (undo-tree-id7910 . -20) (undo-tree-id7911 . -20) (undo-tree-id7912 . -20) (undo-tree-id7913 . -20) (undo-tree-id7914 . -20) (undo-tree-id7915 . -20) (undo-tree-id7916 . -20) (undo-tree-id7917 . -20) (undo-tree-id7918 . -20) (undo-tree-id7919 . -13) (undo-tree-id7920 . -13) (undo-tree-id7921 . -13) (undo-tree-id7922 . -13) (undo-tree-id7923 . -13) (undo-tree-id7924 . -13) (undo-tree-id7925 . -13) (undo-tree-id7926 . -13) (undo-tree-id7927 . -13) (undo-tree-id7928 . -13) (undo-tree-id7929 . -13) (undo-tree-id7930 . -13) (undo-tree-id7931 . -13) (undo-tree-id7932 . -13) (undo-tree-id7933 . -13) (undo-tree-id7934 . -11) (undo-tree-id7935 . -11) (undo-tree-id7936 . -11) (undo-tree-id7937 . -11) (undo-tree-id7938 . -11) (undo-tree-id7939 . -11) (undo-tree-id7940 . -11) (undo-tree-id7941 . -11) (undo-tree-id7942 . -11) (undo-tree-id7943 . -11) (undo-tree-id7944 . -11) (undo-tree-id7945 . -11) (undo-tree-id7946 . -11) (undo-tree-id7947 . -11) (undo-tree-id7948 . -11) (undo-tree-id7949 . -8) (undo-tree-id7950 . -8) (undo-tree-id7951 . -8) (undo-tree-id7952 . -8) (undo-tree-id7953 . -8) (undo-tree-id7954 . -8) (undo-tree-id7955 . -8) (undo-tree-id7956 . -8) (undo-tree-id7957 . -8) (undo-tree-id7958 . -8) (undo-tree-id7959 . -8) (undo-tree-id7960 . -8) (undo-tree-id7961 . -8) (undo-tree-id7962 . -8) (undo-tree-id7963 . -8) (undo-tree-id7964 . -3) (undo-tree-id7965 . -3) (undo-tree-id7966 . -3) (undo-tree-id7967 . -3) (undo-tree-id7968 . -3) (undo-tree-id7969 . -3) (undo-tree-id7970 . -3) (undo-tree-id7971 . -3) (undo-tree-id7972 . -3) (undo-tree-id7973 . -3) (undo-tree-id7974 . -3) (undo-tree-id7975 . -3) (undo-tree-id7976 . -3) (undo-tree-id7977 . -3) (undo-tree-id7978 . -3) (undo-tree-id7979 . -25) (undo-tree-id7980 . -25) (t 25755 8709 486266 67000)) nil (25755 8747 839138 654000) 0 nil] [nil nil ((#("If this is a problem, try" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24684) (undo-tree-id7575 . -24) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -24) (undo-tree-id7639 . -24) (undo-tree-id7640 . -24) (undo-tree-id7641 . -24) (undo-tree-id7642 . -24) (undo-tree-id7643 . -24) (undo-tree-id7644 . -24) (undo-tree-id7645 . -24) (undo-tree-id7646 . -24) (undo-tree-id7647 . -24) (undo-tree-id7648 . -24) (undo-tree-id7649 . -24) (undo-tree-id7650 . -24) (undo-tree-id7651 . -24) (undo-tree-id7652 . -24) (undo-tree-id7653 . -24) (undo-tree-id7654 . -24) (undo-tree-id7655 . -24) (undo-tree-id7656 . -24) (undo-tree-id7657 . -24) (undo-tree-id7658 . -24) (undo-tree-id7659 . -24) (undo-tree-id7660 . -22) (undo-tree-id7661 . -22) (undo-tree-id7662 . -22) (undo-tree-id7663 . -22) (undo-tree-id7664 . -22) (undo-tree-id7665 . -22) (undo-tree-id7666 . -22) (undo-tree-id7667 . -22) (undo-tree-id7668 . -22) (undo-tree-id7669 . -22) (undo-tree-id7670 . -22) (undo-tree-id7671 . -22) (undo-tree-id7672 . -22) (undo-tree-id7673 . -22) (undo-tree-id7674 . -22) (undo-tree-id7675 . -22) (undo-tree-id7676 . -22) (undo-tree-id7677 . -22) (undo-tree-id7678 . -22) (undo-tree-id7679 . -22) (undo-tree-id7680 . -22) (undo-tree-id7681 . -22) (undo-tree-id7682 . -20) (undo-tree-id7683 . -20) (undo-tree-id7684 . -20) (undo-tree-id7685 . -20) (undo-tree-id7686 . -20) (undo-tree-id7687 . -20) (undo-tree-id7688 . -20) (undo-tree-id7689 . -20) (undo-tree-id7690 . -20) (undo-tree-id7691 . -20) (undo-tree-id7692 . -20) (undo-tree-id7693 . -20) (undo-tree-id7694 . -20) (undo-tree-id7695 . -20) (undo-tree-id7696 . -20) (undo-tree-id7697 . -13) (undo-tree-id7698 . -13) (undo-tree-id7699 . -13) (undo-tree-id7700 . -13) (undo-tree-id7701 . -13) (undo-tree-id7702 . -13) (undo-tree-id7703 . -13) (undo-tree-id7704 . -13) (undo-tree-id7705 . -13) (undo-tree-id7706 . -13) (undo-tree-id7707 . -13) (undo-tree-id7708 . -13) (undo-tree-id7709 . -13) (undo-tree-id7710 . -13) (undo-tree-id7711 . -13) (undo-tree-id7712 . -11) (undo-tree-id7713 . -11) (undo-tree-id7714 . -11) (undo-tree-id7715 . -11) (undo-tree-id7716 . -11) (undo-tree-id7717 . -11) (undo-tree-id7718 . -11) (undo-tree-id7719 . -11) (undo-tree-id7720 . -11) (undo-tree-id7721 . -11) (undo-tree-id7722 . -11) (undo-tree-id7723 . -11) (undo-tree-id7724 . -11) (undo-tree-id7725 . -11) (undo-tree-id7726 . -11) (undo-tree-id7727 . -8) (undo-tree-id7728 . -8) (undo-tree-id7729 . -8) (undo-tree-id7730 . -8) (undo-tree-id7731 . -8) (undo-tree-id7732 . -8) (undo-tree-id7733 . -8) (undo-tree-id7734 . -8) (undo-tree-id7735 . -8) (undo-tree-id7736 . -8) (undo-tree-id7737 . -8) (undo-tree-id7738 . -8) (undo-tree-id7739 . -8) (undo-tree-id7740 . -8) (undo-tree-id7741 . -8) (undo-tree-id7742 . -3) (undo-tree-id7743 . -3) (undo-tree-id7744 . -3) (undo-tree-id7745 . -3) (undo-tree-id7746 . -3) (undo-tree-id7747 . -3) (undo-tree-id7748 . -3) (undo-tree-id7749 . -3) (undo-tree-id7750 . -3) (undo-tree-id7751 . -3) (undo-tree-id7752 . -3) (undo-tree-id7753 . -3) (undo-tree-id7754 . -3) (undo-tree-id7755 . -3) (undo-tree-id7756 . -3) (undo-tree-id7757 . -25) (undo-tree-id7758 . -25) (t 25755 8709 486266 67000)) ((24684 . 24709)) (25755 8737 282394 310000) 0 nil] [nil nil ((#("The tf.image.resize() will not preserve the aspect ratio. If this is a problem, try
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24626) (undo-tree-id7473 . -83) (undo-tree-id7474 . 84) (undo-tree-id7475 . -59) (undo-tree-id7476 . 80) (undo-tree-id7477 . -6) (undo-tree-id7478 . -6) (undo-tree-id7479 . -6) (undo-tree-id7480 . -6) (undo-tree-id7481 . -6) (undo-tree-id7482 . -6) (undo-tree-id7483 . -6) (undo-tree-id7484 . -6) (undo-tree-id7485 . -6) (undo-tree-id7486 . -6) (undo-tree-id7487 . -6) (undo-tree-id7488 . -6) (undo-tree-id7489 . -6) (undo-tree-id7490 . -6) (undo-tree-id7491 . -6) (undo-tree-id7492 . -6) (undo-tree-id7493 . -6) (undo-tree-id7494 . -6) (undo-tree-id7495 . -6) (undo-tree-id7496 . -6) (undo-tree-id7497 . -6) (undo-tree-id7498 . -6) (undo-tree-id7499 . -6) (undo-tree-id7500 . -6) (undo-tree-id7501 . -6) (undo-tree-id7502 . -6) (undo-tree-id7503 . -6) (undo-tree-id7504 . -6) (undo-tree-id7505 . -6) (undo-tree-id7506 . -6) (undo-tree-id7507 . -6) (undo-tree-id7508 . -6) (undo-tree-id7509 . -6) (undo-tree-id7510 . -6) (undo-tree-id7511 . -6) (undo-tree-id7512 . -6) (undo-tree-id7513 . -6) (undo-tree-id7514 . -12) (undo-tree-id7515 . -12) (undo-tree-id7516 . -12) (undo-tree-id7517 . -12) (undo-tree-id7518 . -12) (undo-tree-id7519 . -12) (undo-tree-id7520 . -12) (undo-tree-id7521 . -12) (undo-tree-id7522 . -12) (undo-tree-id7523 . -12) (undo-tree-id7524 . -12) (undo-tree-id7525 . -12) (undo-tree-id7526 . -12) (undo-tree-id7527 . -12) (undo-tree-id7528 . -12) (undo-tree-id7529 . -12) (undo-tree-id7530 . -12) (undo-tree-id7531 . -12) (undo-tree-id7532 . -12) (undo-tree-id7533 . -12) (undo-tree-id7534 . -12) (undo-tree-id7535 . -12) (undo-tree-id7536 . -12) (undo-tree-id7537 . -12) (undo-tree-id7538 . -12) (undo-tree-id7539 . -12) (undo-tree-id7540 . -12) (undo-tree-id7541 . -12) (undo-tree-id7542 . -12) (undo-tree-id7543 . -12) (undo-tree-id7544 . -12) (undo-tree-id7545 . -12) (undo-tree-id7546 . -12) (undo-tree-id7547 . -12) (undo-tree-id7548 . -12) (undo-tree-id7549 . -12) (undo-tree-id7550 . -12) (undo-tree-id7551 . -12) (undo-tree-id7552 . -12) (undo-tree-id7553 . -12) (undo-tree-id7554 . -12) (undo-tree-id7555 . -12) (undo-tree-id7556 . -12) (undo-tree-id7557 . -59) (undo-tree-id7558 . -59) (undo-tree-id7559 . -59) (undo-tree-id7560 . -59) (undo-tree-id7561 . -59) (undo-tree-id7562 . -59) (undo-tree-id7563 . -59) (undo-tree-id7564 . -59) (undo-tree-id7565 . -59) (undo-tree-id7566 . -59) (undo-tree-id7567 . -59) (undo-tree-id7568 . -59) (undo-tree-id7569 . -59) (undo-tree-id7570 . -59) (undo-tree-id7571 . -59) (undo-tree-id7572 . -59) (undo-tree-id7573 . -59) (undo-tree-id7574 . -84) 24685 (t 25755 8709 486266 67000)) ((24626 . 24710)) (25755 8722 797353 568000) 0 nil])
nil
([nil nil ((24685 . 24692) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24685) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) 24686 (24685 . 24686)) nil (25755 8747 838910 847000) 0 nil])
nil
nil
([nil nil ((24685 . 24688) (t 25755 8747 855232 485000)) nil (25755 8831 139818 839000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -24754) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (nil fontified nil 24753 . 24754) (nil wrap-prefix #("  " 0 2 (face org-indent)) 24753 . 24754) (24753 . 24754) 24687) nil (25755 8831 139817 158000) 0 nil])
([nil nil ((#("Both operations" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24764) (undo-tree-id8136 . -14) (undo-tree-id8137 . -15) (undo-tree-id8138 . -15) (undo-tree-id8139 . -15)) nil (25755 8831 139804 751000) 0 nil])
([nil nil ((#("can be done in one shot with tf.image.crop_and_resize() ." 0 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 43 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 47 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 53 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24765) (undo-tree-id8132 . -56) (undo-tree-id8133 . 57) (undo-tree-id8134 . -57) (undo-tree-id8135 . -57)) nil (25755 8831 139800 922000) 0 nil])
([nil nil ((#("The pretrained models assume that the images are preprocessed in a
" 0 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24766) (undo-tree-id8114 . -66) (undo-tree-id8115 . -67) (undo-tree-id8116 . -67) (undo-tree-id8117 . -67) (undo-tree-id8118 . -67) (undo-tree-id8119 . -67) (undo-tree-id8120 . -67) (undo-tree-id8121 . -67) (undo-tree-id8122 . -67) (undo-tree-id8123 . -67) (undo-tree-id8124 . -67) (undo-tree-id8125 . -67) (undo-tree-id8126 . -67) (undo-tree-id8127 . -67) (undo-tree-id8128 . -67) (undo-tree-id8129 . -67) (undo-tree-id8130 . -67) (undo-tree-id8131 . -67)) nil (25755 8831 139796 661000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24765) (undo-tree-id8046 . 1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1)) nil (25755 8831 139504 21000) 0 nil])
([nil nil ((#("specific way. In some cases they may expect the inputs to be scaled from 0
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24765) (undo-tree-id8025 . -74) (undo-tree-id8026 . 75) (undo-tree-id8027 . -75) (undo-tree-id8028 . -75) (undo-tree-id8029 . -75) (undo-tree-id8030 . -75) (undo-tree-id8031 . -75) (undo-tree-id8032 . -75) (undo-tree-id8033 . -75) (undo-tree-id8034 . -75) (undo-tree-id8035 . -75) (undo-tree-id8036 . -75) (undo-tree-id8037 . -75) (undo-tree-id8038 . -75) (undo-tree-id8039 . -75) (undo-tree-id8040 . -75) (undo-tree-id8041 . -75) (undo-tree-id8042 . -75) (undo-tree-id8043 . -75) (undo-tree-id8044 . -75) (undo-tree-id8045 . -75)) nil (25755 8831 139455 303000) 0 nil])
([nil nil ((#("to 1, or –1 to 1, and so on" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24765) (undo-tree-id8022 . -26) (undo-tree-id8023 . 27) (undo-tree-id8024 . -27)) nil (25755 8831 139439 935000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24765) (undo-tree-id8019 . 1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1)) nil (25755 8831 139435 248000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 24765) (undo-tree-id8016 . 1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1)) nil (25755 8831 139432 312000) 0 nil])
([nil nil ((24805 . 24806) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24805) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) 24765) nil (25755 8831 139426 73000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -24846) (nil fontified nil 24845 . 24846) (nil wrap-prefix #("  " 0 2 (face org-indent)) 24845 . 24846) (24845 . 24846) 24824) nil (25755 8831 138369 904000) 0 nil])
([nil nil ((24859 . 24860)) nil (25755 8831 138368 272000) 0 nil])
([nil nil ((24875 . 24876) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24875) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . 1) (undo-tree-id7998 . -1) 24860) nil (25755 8831 138364 115000) 0 nil])
([nil nil ((#("These functions assume that the pixel values range from 0 to 255, so we must multiply
" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 16 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24860) (undo-tree-id8480 . -85) (undo-tree-id8481 . 86) (undo-tree-id8482 . -15) (undo-tree-id8483 . -15) (undo-tree-id8484 . -15) (undo-tree-id8485 . -15) (undo-tree-id8486 . -15) (undo-tree-id8487 . -15) (undo-tree-id8488 . -15) (undo-tree-id8489 . -15) (undo-tree-id8490 . -15) (undo-tree-id8491 . -15) (undo-tree-id8492 . -15) (undo-tree-id8493 . -15) (undo-tree-id8494 . -15) (undo-tree-id8495 . -15) (undo-tree-id8496 . -15) (undo-tree-id8497 . -15) (undo-tree-id8498 . 70) (undo-tree-id8499 . -15) (undo-tree-id8500 . -64) (undo-tree-id8501 . -15) (undo-tree-id8502 . -15) (undo-tree-id8503 . -15) (undo-tree-id8504 . -15) (undo-tree-id8505 . -15) (undo-tree-id8506 . -15) (undo-tree-id8507 . -15) (undo-tree-id8508 . -15) (undo-tree-id8509 . -15) (undo-tree-id8510 . -15) (undo-tree-id8511 . -15) (undo-tree-id8512 . -15) (undo-tree-id8513 . -15) (undo-tree-id8514 . -15) (undo-tree-id8515 . -15) (undo-tree-id8516 . -15) (undo-tree-id8517 . -15) (undo-tree-id8518 . -15) (undo-tree-id8519 . -15) (undo-tree-id8520 . -15) (undo-tree-id8521 . -15) (undo-tree-id8522 . -15) (undo-tree-id8523 . -15) (undo-tree-id8524 . -15) (undo-tree-id8525 . -15) (undo-tree-id8526 . -15) (undo-tree-id8527 . -15) (undo-tree-id8528 . -15) (undo-tree-id8529 . -15) (undo-tree-id8530 . -15) (undo-tree-id8531 . -15) (undo-tree-id8532 . -15) (undo-tree-id8533 . -15) (undo-tree-id8534 . -15) (undo-tree-id8535 . -15) (undo-tree-id8536 . -15) (undo-tree-id8537 . -15) (undo-tree-id8538 . -15) (undo-tree-id8539 . -15) (undo-tree-id8540 . -15) (undo-tree-id8541 . -15) (undo-tree-id8542 . -15) (undo-tree-id8543 . -15) (undo-tree-id8544 . -15) (undo-tree-id8545 . -15) (undo-tree-id8546 . -15) (undo-tree-id8547 . -15) (undo-tree-id8548 . -15) (undo-tree-id8549 . -15) (undo-tree-id8550 . -15) (undo-tree-id8551 . -15) (undo-tree-id8552 . -15) (undo-tree-id8553 . -15) (undo-tree-id8554 . -16) (undo-tree-id8555 . -16) (undo-tree-id8556 . -16) (undo-tree-id8557 . -16) (undo-tree-id8558 . -16) (undo-tree-id8559 . -16) (undo-tree-id8560 . -16) (undo-tree-id8561 . -16) (undo-tree-id8562 . -16) (undo-tree-id8563 . -16) (undo-tree-id8564 . -16) (undo-tree-id8565 . -16) (undo-tree-id8566 . -16) (undo-tree-id8567 . -16) (undo-tree-id8568 . -16) (undo-tree-id8569 . -23) (undo-tree-id8570 . -23) (undo-tree-id8571 . -23) (undo-tree-id8572 . -23) (undo-tree-id8573 . -23) (undo-tree-id8574 . -23) (undo-tree-id8575 . -23) (undo-tree-id8576 . -23) (undo-tree-id8577 . -23) (undo-tree-id8578 . -23) (undo-tree-id8579 . -23) (undo-tree-id8580 . -23) (undo-tree-id8581 . -23) (undo-tree-id8582 . -23) (undo-tree-id8583 . -23) (undo-tree-id8584 . -23) (undo-tree-id8585 . -23) (undo-tree-id8586 . -23) (undo-tree-id8587 . -23) (undo-tree-id8588 . -23) (undo-tree-id8589 . -23) (undo-tree-id8590 . -23) (undo-tree-id8591 . -23) (undo-tree-id8592 . -23) (undo-tree-id8593 . -23) (undo-tree-id8594 . -23) (undo-tree-id8595 . -23) (undo-tree-id8596 . -23) (undo-tree-id8597 . -23) (undo-tree-id8598 . -28) (undo-tree-id8599 . -28) (undo-tree-id8600 . -28) (undo-tree-id8601 . -28) (undo-tree-id8602 . -28) (undo-tree-id8603 . -28) (undo-tree-id8604 . -28) (undo-tree-id8605 . -28) (undo-tree-id8606 . -28) (undo-tree-id8607 . -28) (undo-tree-id8608 . -28) (undo-tree-id8609 . -28) (undo-tree-id8610 . -28) (undo-tree-id8611 . -28) (undo-tree-id8612 . -28) (undo-tree-id8613 . -32) (undo-tree-id8614 . -32) (undo-tree-id8615 . -32) (undo-tree-id8616 . -32) (undo-tree-id8617 . -32) (undo-tree-id8618 . -32) (undo-tree-id8619 . -32) (undo-tree-id8620 . -32) (undo-tree-id8621 . -32) (undo-tree-id8622 . -32) (undo-tree-id8623 . -32) (undo-tree-id8624 . -32) (undo-tree-id8625 . -32) (undo-tree-id8626 . -32) (undo-tree-id8627 . -32) (undo-tree-id8628 . -38) (undo-tree-id8629 . -38) (undo-tree-id8630 . -38) (undo-tree-id8631 . -38) (undo-tree-id8632 . -38) (undo-tree-id8633 . -38) (undo-tree-id8634 . -38) (undo-tree-id8635 . -38) (undo-tree-id8636 . -38) (undo-tree-id8637 . -38) (undo-tree-id8638 . -38) (undo-tree-id8639 . -38) (undo-tree-id8640 . -38) (undo-tree-id8641 . -38) (undo-tree-id8642 . -38) (undo-tree-id8643 . -38) (undo-tree-id8644 . -38) (undo-tree-id8645 . -38) (undo-tree-id8646 . -38) (undo-tree-id8647 . -38) (undo-tree-id8648 . -38) (undo-tree-id8649 . -38) (undo-tree-id8650 . -45) (undo-tree-id8651 . -45) (undo-tree-id8652 . -45) (undo-tree-id8653 . -45) (undo-tree-id8654 . -45) (undo-tree-id8655 . -45) (undo-tree-id8656 . -45) (undo-tree-id8657 . -45) (undo-tree-id8658 . -45) (undo-tree-id8659 . -45) (undo-tree-id8660 . -45) (undo-tree-id8661 . -45) (undo-tree-id8662 . -45) (undo-tree-id8663 . -45) (undo-tree-id8664 . -45) (undo-tree-id8665 . -51) (undo-tree-id8666 . -51) (undo-tree-id8667 . -51) (undo-tree-id8668 . -51) (undo-tree-id8669 . -51) (undo-tree-id8670 . -51) (undo-tree-id8671 . -51) (undo-tree-id8672 . -51) (undo-tree-id8673 . -51) (undo-tree-id8674 . -51) (undo-tree-id8675 . -51) (undo-tree-id8676 . -51) (undo-tree-id8677 . -51) (undo-tree-id8678 . -51) (undo-tree-id8679 . -51) (undo-tree-id8680 . -56) (undo-tree-id8681 . -56) (undo-tree-id8682 . -56) (undo-tree-id8683 . -56) (undo-tree-id8684 . -56) (undo-tree-id8685 . -56) (undo-tree-id8686 . -56) (undo-tree-id8687 . -56) (undo-tree-id8688 . -56) (undo-tree-id8689 . -56) (undo-tree-id8690 . -56) (undo-tree-id8691 . -56) (undo-tree-id8692 . -56) (undo-tree-id8693 . -56) (undo-tree-id8694 . -56) (undo-tree-id8695 . -58) (undo-tree-id8696 . -58) (undo-tree-id8697 . -58) (undo-tree-id8698 . -58) (undo-tree-id8699 . -58) (undo-tree-id8700 . -58) (undo-tree-id8701 . -58) (undo-tree-id8702 . -58) (undo-tree-id8703 . -58) (undo-tree-id8704 . -58) (undo-tree-id8705 . -58) (undo-tree-id8706 . -58) (undo-tree-id8707 . -58) (undo-tree-id8708 . -58) (undo-tree-id8709 . -58) (undo-tree-id8710 . -58) (undo-tree-id8711 . -58) (undo-tree-id8712 . -58) (undo-tree-id8713 . -58) (undo-tree-id8714 . -58) (undo-tree-id8715 . -58) (undo-tree-id8716 . -58) (undo-tree-id8717 . -61) (undo-tree-id8718 . -61) (undo-tree-id8719 . -61) (undo-tree-id8720 . -61) (undo-tree-id8721 . -61) (undo-tree-id8722 . -61) (undo-tree-id8723 . -61) (undo-tree-id8724 . -61) (undo-tree-id8725 . -61) (undo-tree-id8726 . -61) (undo-tree-id8727 . -61) (undo-tree-id8728 . -61) (undo-tree-id8729 . -61) (undo-tree-id8730 . -61) (undo-tree-id8731 . -61) (undo-tree-id8732 . -64) (undo-tree-id8733 . -64) (undo-tree-id8734 . -64) (undo-tree-id8735 . -64) (undo-tree-id8736 . -64) (undo-tree-id8737 . -64) (undo-tree-id8738 . -64) (undo-tree-id8739 . -64) (undo-tree-id8740 . -64) (undo-tree-id8741 . -64) (undo-tree-id8742 . -64) (undo-tree-id8743 . -64) (undo-tree-id8744 . -64) (undo-tree-id8745 . -64) (undo-tree-id8746 . -64) (undo-tree-id8747 . -64) (undo-tree-id8748 . -64) (undo-tree-id8749 . -64) (undo-tree-id8750 . -64) (undo-tree-id8751 . -64) (undo-tree-id8752 . -64) (undo-tree-id8753 . -64) (undo-tree-id8754 . -64) (undo-tree-id8755 . -64) (undo-tree-id8756 . -64) (undo-tree-id8757 . -64) (undo-tree-id8758 . -64) (undo-tree-id8759 . -64) (undo-tree-id8760 . -64) (undo-tree-id8761 . -64) (undo-tree-id8762 . -64) (undo-tree-id8763 . -64) (undo-tree-id8764 . -64) (undo-tree-id8765 . -64) (undo-tree-id8766 . -64) (undo-tree-id8767 . -64) (undo-tree-id8768 . -64) (undo-tree-id8769 . -64) (undo-tree-id8770 . -64) (undo-tree-id8771 . -64) (undo-tree-id8772 . -64) (undo-tree-id8773 . -64) (undo-tree-id8774 . -64) (undo-tree-id8775 . -64) (undo-tree-id8776 . -64) (undo-tree-id8777 . -64) (undo-tree-id8778 . -86) 24924 (t 25755 8831 197099 372000)) nil (25755 8845 885740 99000) 0 nil])
([nil nil ((#("them by 255 (since earlier we scaled them to the 0–1 range):" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24860) (undo-tree-id8917 . -59) (undo-tree-id8918 . 60) (undo-tree-id8919 . 60) (undo-tree-id8920 . -59) (undo-tree-id8921 . -59) (undo-tree-id8922 . -59) (undo-tree-id8923 . -59) (undo-tree-id8924 . -59) (undo-tree-id8925 . -59) (undo-tree-id8926 . -59) (undo-tree-id8927 . -59) (undo-tree-id8928 . -59) (undo-tree-id8929 . -59) (undo-tree-id8930 . -59) (undo-tree-id8931 . -59) (undo-tree-id8932 . -59) (undo-tree-id8933 . -59) (undo-tree-id8934 . -59) (undo-tree-id8935 . -59) (undo-tree-id8936 . -59) (undo-tree-id8937 . -59) (undo-tree-id8938 . -59) (undo-tree-id8939 . -59) (undo-tree-id8940 . -59) (undo-tree-id8941 . -59) (undo-tree-id8942 . -59) (undo-tree-id8943 . -59) (undo-tree-id8944 . -59) (undo-tree-id8945 . -59) (undo-tree-id8946 . -59) (undo-tree-id8947 . -59) (undo-tree-id8948 . -59) (undo-tree-id8949 . -59) (undo-tree-id8950 . -59) (undo-tree-id8951 . -59) (undo-tree-id8952 . -59) (undo-tree-id8953 . -59) (undo-tree-id8954 . -59) (undo-tree-id8955 . -59) (undo-tree-id8956 . -59) (undo-tree-id8957 . -59) (undo-tree-id8958 . -59) (undo-tree-id8959 . -59) (undo-tree-id8960 . -59) (undo-tree-id8961 . -59) (undo-tree-id8962 . -60) (undo-tree-id8963 . -60)) nil (25755 8862 871961 234000) 0 nil] [nil nil ((#("
them by 255 (since earlier we scaled them to the 0–1 range)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24859) (undo-tree-id8155 . -59) (undo-tree-id8156 . 59) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . 59) (undo-tree-id8174 . -1) (undo-tree-id8175 . -60) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -60) (undo-tree-id8453 . -60) (undo-tree-id8454 . -60) (undo-tree-id8455 . -60) (undo-tree-id8456 . -60) (undo-tree-id8457 . -60) (undo-tree-id8458 . -60) (undo-tree-id8459 . -60) (undo-tree-id8460 . -60) (undo-tree-id8461 . -60) (undo-tree-id8462 . -60) (undo-tree-id8463 . -60) (undo-tree-id8464 . -60) (undo-tree-id8465 . -60) (undo-tree-id8466 . -60) (undo-tree-id8467 . -60) (undo-tree-id8468 . -60) (undo-tree-id8469 . -60) (undo-tree-id8470 . -60) (undo-tree-id8471 . -60) (undo-tree-id8472 . -60) (undo-tree-id8473 . -60) (undo-tree-id8474 . -60) (undo-tree-id8475 . -60) (undo-tree-id8476 . -60) (undo-tree-id8477 . -60) (undo-tree-id8478 . -60) (undo-tree-id8479 . -60) 24919) ((24859 . 24919)) (25755 8845 885023 82000) 0 nil])
([nil nil ((24872 . 24878) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 24872 24878 nil nil nil t #s(yas--exit 24896 nil))) #s(yas--exit 24896 nil) 7 nil #s(yas--field 1 24872 24878 nil nil nil t #s(yas--exit 24896 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -24890) (undo-tree-id8838 . -2) (24860 . 24903) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24860) (undo-tree-id8839 . -1) (undo-tree-id8840 . -2) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -2) (undo-tree-id8878 . -2) (undo-tree-id8879 . -2) (undo-tree-id8880 . -2) (undo-tree-id8881 . -2) (undo-tree-id8882 . -2) (undo-tree-id8883 . -2) (undo-tree-id8884 . -2) (undo-tree-id8885 . -2) (undo-tree-id8886 . -2) (undo-tree-id8887 . -2) (undo-tree-id8888 . -2) (undo-tree-id8889 . -2) (undo-tree-id8890 . -2) (undo-tree-id8891 . -2) (undo-tree-id8892 . -2) (undo-tree-id8893 . -2) (undo-tree-id8894 . -2) (undo-tree-id8895 . 2) (undo-tree-id8896 . -2) (undo-tree-id8897 . -2) (undo-tree-id8898 . -2) (undo-tree-id8899 . -2) (undo-tree-id8900 . -2) (undo-tree-id8901 . -2) (undo-tree-id8902 . -2) (undo-tree-id8903 . -2) (undo-tree-id8904 . -2) (undo-tree-id8905 . -2) (undo-tree-id8906 . -2) 24862 (#("c" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -24862) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -1) 24863 (24860 . 24863)) nil (25755 8862 871755 109000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 24860 24907 #s(yas--snippet nil (#s(yas--field 1 24872 24878 nil nil nil t #s(yas--exit 24896 nil))) #s(yas--exit 24896 nil) 7 nil #s(yas--field 1 24872 24878 nil nil nil t #s(yas--exit 24896 nil)) nil nil))) nil (25755 8862 871678 253000) 0 nil])
([nil nil ((#("inputs = keras.applications.resnet50.preprocess_input(images_resized *
" 0 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 48 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 53 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 60 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 61 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 68 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 24908) (undo-tree-id8817 . -70) (undo-tree-id8818 . -17) (undo-tree-id8819 . -17) (undo-tree-id8820 . -17) (undo-tree-id8821 . -17) (undo-tree-id8822 . -17) (undo-tree-id8823 . -17) (undo-tree-id8824 . -17) (undo-tree-id8825 . -17) (undo-tree-id8826 . -17) (undo-tree-id8827 . -17) (undo-tree-id8828 . -17) (undo-tree-id8829 . -17) (undo-tree-id8830 . -17) (undo-tree-id8831 . -17) (undo-tree-id8832 . -17) (undo-tree-id8833 . -17) (undo-tree-id8834 . -17) (undo-tree-id8835 . -17) (undo-tree-id8836 . -17) (undo-tree-id8837 . -71) 24925) nil (25755 8862 871676 648000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24895 . 24896) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24966) (24895 . 24967)) nil (25755 8862 871662 687000) 0 nil])
([nil nil ((#("255)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("       " 0 2 (face org-indent) 2 7 (face org-indent)) fontified t)) . 24979) (undo-tree-id8798 . -4) (undo-tree-id8799 . -3) (undo-tree-id8800 . -3) (undo-tree-id8801 . -3) (undo-tree-id8802 . -3) (undo-tree-id8803 . -3) (undo-tree-id8804 . -3) (undo-tree-id8805 . -3) (undo-tree-id8806 . -3) (undo-tree-id8807 . -3) (undo-tree-id8808 . -3) (undo-tree-id8809 . -3) (undo-tree-id8810 . -3) (undo-tree-id8811 . -3) (undo-tree-id8812 . -3) (undo-tree-id8813 . -3) (undo-tree-id8814 . -3) (undo-tree-id8815 . -3) (undo-tree-id8816 . -5)) nil (25755 8862 871660 751000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24966 . 24967) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -24971) (24966 . 24972) 24896) nil (25755 8862 871645 867000) 0 nil])
([nil nil ((24966 . 24967) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -24966) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) 24896) nil (25755 8862 871640 967000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 24966) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (t 25755 8862 886901 479000)) nil (25755 8865 194453 770000) 0 nil])
([nil nil ((24966 . 24967) (t 25755 8865 202743 340000)) nil (25755 8867 695012 887000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24895) (undo-tree-id8968 . -1) (t 25755 8867 702572 997000)) nil (25755 8872 790945 92000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24971) (undo-tree-id8967 . -1)) nil (25755 8872 790942 587000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 24971) (undo-tree-id8966 . -1)) nil (25755 8872 790936 440000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25037 . 25038) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face org-block-begin-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25072) (25037 . 25073) 24989 (t 25755 8872 798226 912000)) nil (25755 8919 334125 604000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25104 . 25105) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25114) (25104 . 25115) 25073) nil (25755 8919 334118 296000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25186 . 25187) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25196) (25186 . 25197) 25115 (t 25755 8919 367130 451000)) nil (25755 8926 316732 281000) 0 nil])
([nil nil ((#("#+end_src
" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 1 2 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 2 5 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 5 6 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 6 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25187) (undo-tree-id8970 . -9) (undo-tree-id8971 . -9) (undo-tree-id8972 . -10) (t 25755 8927 266616 185000)) nil (25755 8935 419235 311000) 0 nil] [nil nil ((25187 . 25188) (#("#" 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line)) . 25187) (undo-tree-id8969 . -1)) ((25187 . 25188) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25187)) (25755 8926 316322 633000) 0 nil])
([nil nil ((#("(in this case, there are 1,000 classes)" 0 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25204) (undo-tree-id9029 . -38) (undo-tree-id9030 . -5) (undo-tree-id9031 . -5) (undo-tree-id9032 . -5) (undo-tree-id9033 . -5) (undo-tree-id9034 . -5) (undo-tree-id9035 . -5) (undo-tree-id9036 . -5) (undo-tree-id9037 . -5) (undo-tree-id9038 . -5) (undo-tree-id9039 . -5) (undo-tree-id9040 . -5) (undo-tree-id9041 . -5) (undo-tree-id9042 . -5) (undo-tree-id9043 . -5) (undo-tree-id9044 . -5) (undo-tree-id9045 . -5) (undo-tree-id9046 . -5) (undo-tree-id9047 . -5) (undo-tree-id9048 . -5) (undo-tree-id9049 . -5) (undo-tree-id9050 . -5) (undo-tree-id9051 . -5) (undo-tree-id9052 . -5) (undo-tree-id9053 . -5) (undo-tree-id9054 . -5) (undo-tree-id9055 . -5) (undo-tree-id9056 . -5) (undo-tree-id9057 . -5) (undo-tree-id9058 . -5) (undo-tree-id9059 . -5) (undo-tree-id9060 . -5) (undo-tree-id9061 . -5) (undo-tree-id9062 . -5) (undo-tree-id9063 . -5) (undo-tree-id9064 . -5) (undo-tree-id9065 . -5) (undo-tree-id9066 . -5) (undo-tree-id9067 . -5) (undo-tree-id9068 . -5) (undo-tree-id9069 . -5) (undo-tree-id9070 . -5) (undo-tree-id9071 . -5) (undo-tree-id9072 . -5) (undo-tree-id9073 . -5) (undo-tree-id9074 . -5) (undo-tree-id9075 . -5) (undo-tree-id9076 . -39) 25209 (t 25755 8935 434087 559000)) nil (25755 8961 818798 736000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25203) (undo-tree-id8973 . -1) (undo-tree-id8974 . -1) (undo-tree-id8975 . -1) (undo-tree-id8976 . -1) (undo-tree-id8977 . -1) (undo-tree-id8978 . -1) (undo-tree-id8979 . -1) (undo-tree-id8980 . -1) (undo-tree-id8981 . -1) (undo-tree-id8982 . -1) (undo-tree-id8983 . -1) (undo-tree-id8984 . -1) (undo-tree-id8985 . -1) (undo-tree-id8986 . -1) (undo-tree-id8987 . -1) (undo-tree-id8988 . -1) (undo-tree-id8989 . -1) (undo-tree-id8990 . -1) (undo-tree-id8991 . -1) (undo-tree-id8992 . -1) (undo-tree-id8993 . -1) (undo-tree-id8994 . -1) (undo-tree-id8995 . -1) (undo-tree-id8996 . -1) (undo-tree-id8997 . -1) (undo-tree-id8998 . -1) (undo-tree-id8999 . -1) (undo-tree-id9000 . -1) (undo-tree-id9001 . -1) (undo-tree-id9002 . -1) (undo-tree-id9003 . -1) (undo-tree-id9004 . -1) (undo-tree-id9005 . -1) (undo-tree-id9006 . -1) (undo-tree-id9007 . -1) (undo-tree-id9008 . -1) (undo-tree-id9009 . -1) (undo-tree-id9010 . -1) (undo-tree-id9011 . -1) (undo-tree-id9012 . -1) (undo-tree-id9013 . -1) (undo-tree-id9014 . -1) (undo-tree-id9015 . -1) (undo-tree-id9016 . -1) (undo-tree-id9017 . -1) (undo-tree-id9018 . -1) (undo-tree-id9019 . -1) (undo-tree-id9020 . -1) (undo-tree-id9021 . -1) (undo-tree-id9022 . -1) (undo-tree-id9023 . -1) (undo-tree-id9024 . -1) (undo-tree-id9025 . -1) (undo-tree-id9026 . -1) (undo-tree-id9027 . -1) (undo-tree-id9028 . -1)) nil (25755 8961 818764 194000) 0 nil])
([nil nil ((25205 . 25207) (t 25755 8961 833127 485000)) nil (25755 8966 960237 669000) 0 nil])
([nil nil ((25221 . 25222) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25221) (undo-tree-id9077 . -1) 25207) nil (25755 8966 960233 598000) 0 nil])
([nil nil ((25278 . 25279) (t 25755 8966 970041 200000)) nil (25755 8995 737041 433000) 0 nil])
([nil nil ((25296 . 25297) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25296) (undo-tree-id9087 . -1) 25279) nil (25755 8995 737039 918000) 0 nil])
([nil nil ((25334 . 25335)) nil (25755 8995 737038 80000) 0 nil])
([nil nil ((25363 . 25364) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25363) (undo-tree-id9078 . -1) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) 25335) nil (25755 8995 737035 644000) 0 nil])
([nil nil ((25374 . 25376)) nil (25755 8995 736874 707000) 0 nil])
([nil nil ((#("For each image, it returns an array containing the top K
" 0 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25376) (undo-tree-id9481 . -56) (undo-tree-id9482 . 57) (undo-tree-id9483 . -57) (t 25755 8995 750565 912000)) nil (25755 9062 883453 826000) 0 nil])
([nil nil ((#("predictions, where each prediction is represented as an array containing
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25376) (undo-tree-id9478 . -72) (undo-tree-id9479 . 73) (undo-tree-id9480 . -73)) nil (25755 9062 883451 173000) 0 nil])
([nil nil ((#("the class identifier,23 its name, and the corresponding confidence score:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 43 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25376) (undo-tree-id9475 . -73) (undo-tree-id9476 . 74) (undo-tree-id9477 . -74)) nil (25755 9062 883448 415000) 0 nil])
([nil nil ((25387 . 25393) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 25387 25393 nil nil nil t #s(yas--exit 25411 nil))) #s(yas--exit 25411 nil) 8 nil #s(yas--field 1 25387 25393 nil nil nil t #s(yas--exit 25411 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25405) (undo-tree-id9425 . -2) (25375 . 25418) (#("sr" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25375) (undo-tree-id9426 . -1) (undo-tree-id9427 . -2) (undo-tree-id9428 . -1) (undo-tree-id9429 . -1) (undo-tree-id9430 . -1) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -1) (undo-tree-id9436 . -1) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -1) (undo-tree-id9440 . -1) (undo-tree-id9441 . -1) (undo-tree-id9442 . -1) (undo-tree-id9443 . -1) (undo-tree-id9444 . -1) (undo-tree-id9445 . -1) (undo-tree-id9446 . -1) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1) (undo-tree-id9450 . -1) (undo-tree-id9451 . -1) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (undo-tree-id9458 . -1) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (undo-tree-id9461 . -1) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -2) (undo-tree-id9465 . -2) (undo-tree-id9466 . -2) (undo-tree-id9467 . -2) (undo-tree-id9468 . -2) (undo-tree-id9469 . -2) (undo-tree-id9470 . -2) (undo-tree-id9471 . -2) (undo-tree-id9472 . -2) (undo-tree-id9473 . -2) (undo-tree-id9474 . -2) 25377 (25375 . 25377)) nil (25755 9062 883443 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 25375 25422 #s(yas--snippet nil (#s(yas--field 1 25387 25393 nil nil nil t #s(yas--exit 25411 nil))) #s(yas--exit 25411 nil) 8 nil #s(yas--field 1 25387 25393 nil nil nil t #s(yas--exit 25411 nil)) nil nil))) nil (25755 9062 883407 563000) 0 nil])
([nil nil ((#("top_K = keras.applications.resnet50.decode_predictions(Y_proba, top=3)
for image_index in range(len(images)):
print(\"Image #{}\".format(image_index))
for class_id, name, y_proba in top_K[image_index]:
print(\" {} - {:12s} {:.2f}%\".format(class_id, name, y_proba *
100))
print()The output looks like this:
Image #0
n03877845 - palace
n02825657 - bell_cote
n03781244 - monastery42.87%
40.57%
14.56%
Image #1
n04522168 - vase
n07930864 - cup
n11939491 - daisy46.83%
7.78%
4.87%
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 5 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 42 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 43 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 54 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 56 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 57 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 62 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 71 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 80 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 81 86 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 86 110 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 110 140 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 140 141 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 141 146 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 146 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 149 158 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 158 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 159 161 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 161 170 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 170 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 171 176 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 176 183 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 183 184 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 184 185 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 185 191 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 191 192 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 192 197 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 197 200 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 200 241 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 241 242 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 242 244 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 244 253 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 253 254 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 254 259 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 259 262 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 262 268 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 268 303 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 303 312 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 312 331 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 331 347 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 347 348 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 348 352 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 352 353 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 353 381 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 381 388 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 388 395 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 395 404 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 404 421 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 421 437 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 437 461 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 461 467 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 467 473 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25423) (undo-tree-id9117 . -472) (undo-tree-id9118 . -472) (undo-tree-id9119 . -26) (undo-tree-id9120 . -472) (undo-tree-id9121 . -472) (undo-tree-id9122 . -18) (undo-tree-id9123 . -18) (undo-tree-id9124 . -18) (undo-tree-id9125 . -18) (undo-tree-id9126 . -18) (undo-tree-id9127 . -18) (undo-tree-id9128 . -18) (undo-tree-id9129 . -18) (undo-tree-id9130 . -26) (undo-tree-id9131 . -473) (undo-tree-id9132 . -26) (undo-tree-id9133 . -472) (undo-tree-id9134 . -26) (undo-tree-id9135 . -26) (undo-tree-id9136 . -26) (undo-tree-id9137 . -26) (undo-tree-id9138 . -26) (undo-tree-id9139 . -26) (undo-tree-id9140 . -26) (undo-tree-id9141 . -26) (undo-tree-id9142 . -26) (undo-tree-id9143 . -26) (undo-tree-id9144 . -26) (undo-tree-id9145 . -26) (undo-tree-id9146 . -26) (undo-tree-id9147 . -26) (undo-tree-id9148 . -26) (undo-tree-id9149 . -26) (undo-tree-id9150 . -26) (undo-tree-id9151 . 377) (undo-tree-id9152 . -99) (undo-tree-id9153 . -98) (undo-tree-id9154 . -98) (undo-tree-id9155 . -98) (undo-tree-id9156 . -98) (undo-tree-id9157 . -98) (undo-tree-id9158 . -98) (undo-tree-id9159 . -98) (undo-tree-id9160 . -98) (undo-tree-id9161 . -134) (undo-tree-id9162 . -134) (undo-tree-id9163 . -134) (undo-tree-id9164 . -134) (undo-tree-id9165 . -134) (undo-tree-id9166 . -134) (undo-tree-id9167 . -134) (undo-tree-id9168 . -134) (undo-tree-id9169 . -134) (undo-tree-id9170 . -134) (undo-tree-id9171 . -134) (undo-tree-id9172 . -134) (undo-tree-id9173 . -134) (undo-tree-id9174 . -134) (undo-tree-id9175 . -134) (undo-tree-id9176 . -177) (undo-tree-id9177 . -177) (undo-tree-id9178 . -177) (undo-tree-id9179 . -177) (undo-tree-id9180 . -177) (undo-tree-id9181 . -177) (undo-tree-id9182 . -177) (undo-tree-id9183 . -177) (undo-tree-id9184 . -177) (undo-tree-id9185 . -177) (undo-tree-id9186 . -177) (undo-tree-id9187 . -177) (undo-tree-id9188 . -177) (undo-tree-id9189 . -177) (undo-tree-id9190 . -177) (undo-tree-id9191 . -224) (undo-tree-id9192 . -224) (undo-tree-id9193 . -224) (undo-tree-id9194 . -224) (undo-tree-id9195 . -224) (undo-tree-id9196 . -224) (undo-tree-id9197 . -224) (undo-tree-id9198 . -224) (undo-tree-id9199 . 219) (undo-tree-id9200 . -259) (undo-tree-id9201 . -267) (undo-tree-id9202 . -267) (undo-tree-id9203 . -267) (undo-tree-id9204 . -267) (undo-tree-id9205 . -267) (undo-tree-id9206 . -267) (undo-tree-id9207 . -267) (undo-tree-id9208 . -267) (undo-tree-id9209 . -292) (undo-tree-id9210 . -292) (undo-tree-id9211 . -292) (undo-tree-id9212 . -292) (undo-tree-id9213 . -292) (undo-tree-id9214 . -292) (undo-tree-id9215 . -292) (undo-tree-id9216 . -292) (undo-tree-id9217 . -311) (undo-tree-id9218 . -311) (undo-tree-id9219 . -311) (undo-tree-id9220 . -311) (undo-tree-id9221 . -311) (undo-tree-id9222 . -311) (undo-tree-id9223 . -311) (undo-tree-id9224 . -311) (undo-tree-id9225 . -311) (undo-tree-id9226 . -311) (undo-tree-id9227 . -311) (undo-tree-id9228 . -311) (undo-tree-id9229 . -311) (undo-tree-id9230 . -311) (undo-tree-id9231 . -311) (undo-tree-id9232 . -311) (undo-tree-id9233 . -311) (undo-tree-id9234 . -311) (undo-tree-id9235 . -311) (undo-tree-id9236 . -311) (undo-tree-id9237 . -311) (undo-tree-id9238 . -311) (undo-tree-id9239 . -311) (undo-tree-id9240 . -311) (undo-tree-id9241 . -311) (undo-tree-id9242 . -311) (undo-tree-id9243 . -311) (undo-tree-id9244 . -311) (undo-tree-id9245 . -311) (undo-tree-id9246 . -311) (undo-tree-id9247 . -311) (undo-tree-id9248 . -311) (undo-tree-id9249 . -311) (undo-tree-id9250 . -311) (undo-tree-id9251 . -311) (undo-tree-id9252 . -311) (undo-tree-id9253 . -311) (undo-tree-id9254 . -311) (undo-tree-id9255 . -311) (undo-tree-id9256 . -311) (undo-tree-id9257 . -311) (undo-tree-id9258 . -311) (undo-tree-id9259 . -311) (undo-tree-id9260 . -311) (undo-tree-id9261 . -311) (undo-tree-id9262 . -311) (undo-tree-id9263 . -311) (undo-tree-id9264 . -311) (undo-tree-id9265 . -311) (undo-tree-id9266 . -311) (undo-tree-id9267 . -311) (undo-tree-id9268 . -311) (undo-tree-id9269 . -311) (undo-tree-id9270 . -311) (undo-tree-id9271 . -311) (undo-tree-id9272 . -311) (undo-tree-id9273 . -311) (undo-tree-id9274 . -311) (undo-tree-id9275 . -311) (undo-tree-id9276 . -311) (undo-tree-id9277 . -311) (undo-tree-id9278 . -311) (undo-tree-id9279 . -311) (undo-tree-id9280 . -311) (undo-tree-id9281 . -311) (undo-tree-id9282 . -311) (undo-tree-id9283 . -311) (undo-tree-id9284 . -311) (undo-tree-id9285 . -311) (undo-tree-id9286 . -311) (undo-tree-id9287 . -311) (undo-tree-id9288 . -311) (undo-tree-id9289 . -311) (undo-tree-id9290 . -311) (undo-tree-id9291 . -311) (undo-tree-id9292 . -311) (undo-tree-id9293 . -311) (undo-tree-id9294 . -311) (undo-tree-id9295 . -311) (undo-tree-id9296 . -311) (undo-tree-id9297 . -311) (undo-tree-id9298 . -311) (undo-tree-id9299 . -311) (undo-tree-id9300 . -311) (undo-tree-id9301 . -311) (undo-tree-id9302 . -311) (undo-tree-id9303 . -311) (undo-tree-id9304 . -311) (undo-tree-id9305 . -311) (undo-tree-id9306 . -311) (undo-tree-id9307 . -311) (undo-tree-id9308 . -311) (undo-tree-id9309 . -311) (undo-tree-id9310 . -311) (undo-tree-id9311 . -311) (undo-tree-id9312 . -311) (undo-tree-id9313 . -311) (undo-tree-id9314 . -311) (undo-tree-id9315 . -311) (undo-tree-id9316 . -311) (undo-tree-id9317 . -311) (undo-tree-id9318 . -311) (undo-tree-id9319 . -311) (undo-tree-id9320 . -311) (undo-tree-id9321 . -311) (undo-tree-id9322 . -311) (undo-tree-id9323 . -311) (undo-tree-id9324 . -311) (undo-tree-id9325 . -311) (undo-tree-id9326 . -311) (undo-tree-id9327 . -311) (undo-tree-id9328 . -311) (undo-tree-id9329 . -311) (undo-tree-id9330 . -311) (undo-tree-id9331 . -311) (undo-tree-id9332 . -311) (undo-tree-id9333 . -311) (undo-tree-id9334 . -311) (undo-tree-id9335 . -330) (undo-tree-id9336 . -330) (undo-tree-id9337 . -330) (undo-tree-id9338 . -330) (undo-tree-id9339 . -330) (undo-tree-id9340 . -330) (undo-tree-id9341 . -330) (undo-tree-id9342 . -330) (undo-tree-id9343 . -352) (undo-tree-id9344 . -352) (undo-tree-id9345 . -352) (undo-tree-id9346 . -352) (undo-tree-id9347 . -352) (undo-tree-id9348 . -352) (undo-tree-id9349 . -352) (undo-tree-id9350 . -352) (undo-tree-id9351 . -377) (undo-tree-id9352 . -377) (undo-tree-id9353 . -377) (undo-tree-id9354 . -377) (undo-tree-id9355 . -377) (undo-tree-id9356 . -377) (undo-tree-id9357 . -377) (undo-tree-id9358 . -377) (undo-tree-id9359 . -387) (undo-tree-id9360 . -387) (undo-tree-id9361 . -387) (undo-tree-id9362 . -387) (undo-tree-id9363 . -387) (undo-tree-id9364 . -387) (undo-tree-id9365 . -387) (undo-tree-id9366 . -387) (undo-tree-id9367 . -394) (undo-tree-id9368 . -394) (undo-tree-id9369 . -394) (undo-tree-id9370 . -394) (undo-tree-id9371 . -394) (undo-tree-id9372 . -394) (undo-tree-id9373 . -394) (undo-tree-id9374 . -394) (undo-tree-id9375 . -403) (undo-tree-id9376 . -403) (undo-tree-id9377 . -403) (undo-tree-id9378 . -403) (undo-tree-id9379 . -403) (undo-tree-id9380 . -403) (undo-tree-id9381 . -403) (undo-tree-id9382 . -403) (undo-tree-id9383 . -420) (undo-tree-id9384 . -420) (undo-tree-id9385 . -420) (undo-tree-id9386 . -420) (undo-tree-id9387 . -420) (undo-tree-id9388 . -420) (undo-tree-id9389 . -420) (undo-tree-id9390 . -420) (undo-tree-id9391 . -436) (undo-tree-id9392 . -436) (undo-tree-id9393 . -436) (undo-tree-id9394 . -436) (undo-tree-id9395 . -436) (undo-tree-id9396 . -436) (undo-tree-id9397 . -436) (undo-tree-id9398 . -436) (undo-tree-id9399 . -460) (undo-tree-id9400 . -460) (undo-tree-id9401 . -460) (undo-tree-id9402 . -460) (undo-tree-id9403 . -460) (undo-tree-id9404 . -460) (undo-tree-id9405 . -460) (undo-tree-id9406 . -460) (undo-tree-id9407 . -466) (undo-tree-id9408 . -466) (undo-tree-id9409 . -466) (undo-tree-id9410 . -466) (undo-tree-id9411 . -466) (undo-tree-id9412 . -466) (undo-tree-id9413 . -466) (undo-tree-id9414 . -466) (undo-tree-id9415 . -472) (undo-tree-id9416 . -472) (undo-tree-id9417 . -472) (undo-tree-id9418 . -472) (undo-tree-id9419 . -472) (undo-tree-id9420 . -472) (undo-tree-id9421 . -472) (undo-tree-id9422 . -472) (undo-tree-id9423 . -472) (undo-tree-id9424 . -473) 25895) nil (25755 9062 883395 510000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25410 . 25411) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25883) (25410 . 25884)) nil (25755 9062 881710 78000) 0 nil])
([nil nil ((25521 . 25525) (#("   " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -25521) (undo-tree-id9088 . -3) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) (undo-tree-id9095 . -1) (undo-tree-id9096 . -1) (undo-tree-id9097 . -1) (undo-tree-id9098 . -2) (undo-tree-id9099 . -2) (undo-tree-id9100 . -2) (undo-tree-id9101 . -2) (undo-tree-id9102 . -2) (undo-tree-id9103 . -2) (undo-tree-id9104 . -2) (undo-tree-id9105 . -2) (undo-tree-id9106 . -2) (undo-tree-id9107 . -3) (undo-tree-id9108 . -3) (undo-tree-id9109 . -3) (undo-tree-id9110 . -3) (undo-tree-id9111 . -3) (undo-tree-id9112 . -3) (undo-tree-id9113 . -3) (undo-tree-id9114 . -3) (undo-tree-id9115 . -3) (undo-tree-id9116 . -3) 25524 (25521 . 25524)) nil (25755 9062 881706 888000) 0 nil])
([nil nil ((25615 . 25619)) nil (25755 9062 881675 176000) 0 nil])
([nil nil ((25680 . 25681) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -25680) (undo-tree-id9484 . -1) 25618 (t 25755 9062 898660 401000)) nil (25755 9064 529519 624000) 0 nil])
([nil nil ((25687 . 25691) (t 25755 9064 545042 442000)) nil (25755 9076 989803 981000) 0 nil])
([nil nil ((#("The output looks like this:" 0 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 25698) (undo-tree-id9485 . -26) (undo-tree-id9486 . -26) (undo-tree-id9487 . -26) (undo-tree-id9488 . -26) (undo-tree-id9489 . -26) (undo-tree-id9490 . -26) (undo-tree-id9491 . -26) (undo-tree-id9492 . -26) (undo-tree-id9493 . -26) (undo-tree-id9494 . -26) (undo-tree-id9495 . -26) (undo-tree-id9496 . -26) (undo-tree-id9497 . -26) (undo-tree-id9498 . -26) (undo-tree-id9499 . -26) (undo-tree-id9500 . -26) (undo-tree-id9501 . -26) (undo-tree-id9502 . -22) (undo-tree-id9503 . -17) (undo-tree-id9504 . -11) (undo-tree-id9505 . -4) (undo-tree-id9506 . -27) (undo-tree-id9507 . -27)) nil (25755 9076 989799 568000) 0 nil])
([nil nil ((25803 . 25804) (25802 . 25803) (25801 . 25802) (25800 . 25801) (25792 . 25793) (25791 . 25792) (25790 . 25791) (25789 . 25790) (25760 . 25761) (25759 . 25760) (25758 . 25759) (25757 . 25758) (25734 . 25735) (25733 . 25734) (25732 . 25733) (25731 . 25732) (25708 . 25712) (t 25755 9077 51072 630000)) nil (25755 9090 946674 653000) 0 nil])
([nil nil ((25902 . 25903) (25901 . 25902) (25900 . 25901) (25899 . 25900) (25892 . 25893) (25891 . 25892) (25890 . 25891) (25889 . 25890) (25864 . 25865) (25863 . 25864) (25862 . 25863) (25861 . 25862) (25844 . 25845) (25843 . 25844) (25842 . 25843) (25841 . 25842) (25820 . 25824)) nil (25755 9090 946666 386000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -25699) (undo-tree-id9541 . -4) (undo-tree-id9542 . -4) (undo-tree-id9543 . -4) (undo-tree-id9544 . -4) (undo-tree-id9545 . -4) (undo-tree-id9546 . -4) (undo-tree-id9547 . -4) (undo-tree-id9548 . -4) (undo-tree-id9549 . -4) (undo-tree-id9550 . -4) (undo-tree-id9551 . -4) (undo-tree-id9552 . -4) 25703 (25698 . 25703) (t 25755 9091 11606 926000) 25690) nil (25755 9104 590202 468000) 0 nil])
([nil nil ((25923 . 25924) (25922 . 25923) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25922) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) 25923 (25922 . 25923) (25911 . 25912) (25910 . 25911) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25910) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) 25911 (25910 . 25911) (25881 . 25882) (25880 . 25881) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25880) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) 25881 (25880 . 25881) (25859 . 25860) (25858 . 25859) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25858) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) 25859 (25858 . 25859) (25836 . 25837) (25835 . 25836) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25835) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) 25836 (25835 . 25836) (25825 . 25826) (25824 . 25825) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25824) (undo-tree-id9518 . -1) (undo-tree-id9519 . -1) 25825 (25824 . 25825) (25812 . 25813) (25811 . 25812) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25811) (undo-tree-id9520 . -1) (undo-tree-id9521 . -1) 25812 (25811 . 25812) (25799 . 25800) (25798 . 25799) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25798) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) 25799 (25798 . 25799) (25765 . 25766) (25764 . 25765) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25764) (undo-tree-id9524 . -1) (undo-tree-id9525 . -1) 25765 (25764 . 25765) (25737 . 25738) (25736 . 25737) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25736) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) 25737 (25736 . 25737) (25712 . 25713) (25711 . 25712) (#("$" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -25711) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) 25712 (25711 . 25712) (25700 . 25702) (#("$" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -25700) (undo-tree-id9530 . -1) (undo-tree-id9531 . -1) (undo-tree-id9532 . -1) (undo-tree-id9533 . -1) (undo-tree-id9534 . -1) (undo-tree-id9535 . -1) (undo-tree-id9536 . -1) (undo-tree-id9537 . -1) (undo-tree-id9538 . -1) (undo-tree-id9539 . -1) (undo-tree-id9540 . -1) 25701 (25700 . 25701)) nil (25755 9104 590177 521000) 0 nil])
([nil nil ((#("The correct classes (monastery and daisy) appear in the top three results
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9576 . -73) (undo-tree-id9577 . 73) (undo-tree-id9578 . -4) (undo-tree-id9579 . -12) (undo-tree-id9580 . -20) (undo-tree-id9581 . -20) (undo-tree-id9582 . -20) (undo-tree-id9583 . -20) (undo-tree-id9584 . -20) (undo-tree-id9585 . -20) (undo-tree-id9586 . -20) (undo-tree-id9587 . -20) (undo-tree-id9588 . -21) (undo-tree-id9589 . -21) (undo-tree-id9590 . -21) (undo-tree-id9591 . -21) (undo-tree-id9592 . -21) (undo-tree-id9593 . -21) (undo-tree-id9594 . -21) (undo-tree-id9595 . -21) (undo-tree-id9596 . -31) (undo-tree-id9597 . -35) (undo-tree-id9598 . -40) (undo-tree-id9599 . -40) (undo-tree-id9600 . -40) (undo-tree-id9601 . -40) (undo-tree-id9602 . -40) (undo-tree-id9603 . -40) (undo-tree-id9604 . -40) (undo-tree-id9605 . -40) (undo-tree-id9606 . -42) (undo-tree-id9607 . -42) (undo-tree-id9608 . -42) (undo-tree-id9609 . -42) (undo-tree-id9610 . -42) (undo-tree-id9611 . -42) (undo-tree-id9612 . -42) (undo-tree-id9613 . -42) (undo-tree-id9614 . -49) (undo-tree-id9615 . -52) (undo-tree-id9616 . -56) (undo-tree-id9617 . -60) (undo-tree-id9618 . -66) (undo-tree-id9619 . -74) (undo-tree-id9620 . -74) (undo-tree-id9621 . -74) (undo-tree-id9622 . -74) (undo-tree-id9623 . -74) (undo-tree-id9624 . -74) (undo-tree-id9625 . -74) (undo-tree-id9626 . -74) (undo-tree-id9627 . -37) (undo-tree-id9628 . -37) (undo-tree-id9629 . -37) (undo-tree-id9630 . -37) (undo-tree-id9631 . -37) (undo-tree-id9632 . -37) (undo-tree-id9633 . -37) (undo-tree-id9634 . -37) (undo-tree-id9635 . -74) (t 25755 9104 654754 839000)) nil (25755 9142 170505 78000) 0 nil])
([nil nil ((#("for both images. That’s pretty good, considering that the model had to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9556 . -70) (undo-tree-id9557 . 71) (undo-tree-id9558 . -4) (undo-tree-id9559 . -9) (undo-tree-id9560 . -15) (undo-tree-id9561 . -17) (undo-tree-id9562 . -21) (undo-tree-id9563 . -22) (undo-tree-id9564 . -24) (undo-tree-id9565 . -31) (undo-tree-id9566 . -35) (undo-tree-id9567 . -37) (undo-tree-id9568 . -37) (undo-tree-id9569 . -37) (undo-tree-id9570 . -37) (undo-tree-id9571 . -37) (undo-tree-id9572 . -37) (undo-tree-id9573 . -37) (undo-tree-id9574 . -37) (undo-tree-id9575 . -71)) nil (25755 9142 170466 440000) 0 nil])
([nil nil ((#("choose from among 1,000 classes.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9553 . -32) (undo-tree-id9554 . 33) (undo-tree-id9555 . -33)) nil (25755 9142 170450 449000) 0 nil])
([nil nil ((#("As you can see, it is very easy to create a pretty good image classifier
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9650 . -72) (undo-tree-id9651 . 73) (undo-tree-id9652 . -73) (t 25755 9142 235903 813000)) nil (25755 9162 997289 596000) 0 nil])
([nil nil ((#("using a pretrained model. Other vision models are available in
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9647 . -62) (undo-tree-id9648 . 63) (undo-tree-id9649 . -63)) nil (25755 9162 997286 622000) 0 nil])
([nil nil ((#("keras.applications, including several ResNet variants, GoogLeNet
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9642 . -64) (undo-tree-id9643 . 65) (undo-tree-id9644 . 65) (undo-tree-id9645 . -5) (undo-tree-id9646 . -65)) nil (25755 9162 997283 285000) 0 nil])
([nil nil ((#("variants like Inception-v3 and Xception, VGGNet variants, and MobileNet
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9639 . -71) (undo-tree-id9640 . 72) (undo-tree-id9641 . -72)) nil (25755 9162 997278 473000) 0 nil])
([nil nil ((#("and MobileNetV2 (lightweight models for use in mobile applications).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9636 . -68) (undo-tree-id9637 . 69) (undo-tree-id9638 . -69)) nil (25755 9162 997269 693000) 0 nil])
([nil nil ((#("But what if you want to use an image classifier for classes of images that
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9661 . -74) (undo-tree-id9662 . 75) (undo-tree-id9663 . -75) (t 25755 9163 14069 122000)) nil (25755 9171 960407 972000) 0 nil])
([nil nil ((#("are not part of ImageNet? In that case, you may still benefit from the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25946) (undo-tree-id9658 . -70) (undo-tree-id9659 . 71) (undo-tree-id9660 . -71)) nil (25755 9171 960403 70000) 0 nil])
([nil nil ((#("pretrained models to perform transfer learning.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 47 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25946) (undo-tree-id9653 . -47) (undo-tree-id9654 . 48) (undo-tree-id9655 . 48) (undo-tree-id9656 . -10) (undo-tree-id9657 . -48)) nil (25755 9171 960399 306000) 0 nil])
([nil nil ((25946 . 25947) 25946) nil (25755 9171 960382 443000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28549 . 28550) (nil fontified nil 28491 . 28550) (nil fontified nil 28419 . 28491) (nil fontified nil 28352 . 28419) (nil fontified nil 28283 . 28352) (nil fontified nil 28210 . 28283) (nil fontified nil 28073 . 28210) (nil fontified nil 28005 . 28073) (nil fontified nil 27937 . 28005) (nil fontified nil 27901 . 27937) (nil fontified nil 27885 . 27901) (nil fontified nil 27817 . 27885) (nil fontified nil 27742 . 27817) (nil fontified nil 27716 . 27742) (nil fontified nil 27656 . 27716) (nil fontified nil 27642 . 27656) (nil fontified nil 27591 . 27642) (nil fontified nil 27561 . 27591) (nil fontified nil 27521 . 27561) (nil fontified nil 27455 . 27521) (nil fontified nil 27385 . 27455) (nil fontified nil 27365 . 27385) (nil fontified nil 27310 . 27365) (nil fontified nil 27290 . 27310) (nil fontified nil 27235 . 27290) (nil fontified nil 27162 . 27235) (nil fontified nil 27157 . 27162) (nil fontified nil 27083 . 27157) (nil fontified nil 27073 . 27083) (nil fontified nil 26997 . 27073) (nil fontified nil 26926 . 26997) (nil fontified nil 26848 . 26926) (nil fontified nil 26776 . 26848) (nil fontified nil 26709 . 26776) (nil fontified nil 26646 . 26709) (nil fontified nil 26595 . 26646) (nil fontified nil 26467 . 26595) (nil fontified nil 26451 . 26467) (nil fontified nil 26391 . 26451) (nil fontified nil 26356 . 26391) (nil fontified nil 26282 . 26356) (nil fontified nil 26206 . 26282) (nil fontified nil 26130 . 26206) (nil fontified nil 26055 . 26130) (nil fontified nil 25987 . 26055) (nil fontified nil 25947 . 25987) (25947 . 28550) (t 25755 9171 973477 195000)) nil (25755 9287 889231 242000) 0 nil])
([nil nil ((25947 . 25949)) nil (25755 9287 889223 937000) 0 nil])
([nil nil ((28552 . 28553)) nil (25755 9287 889219 337000) 0 nil])
([nil nil ((#("If you want to build an image classifier but you do not have enough
" 0 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25989) (undo-tree-id9712 . -67) (undo-tree-id9713 . -68) (t 25755 9287 954559 761000)) nil (25755 9321 205847 473000) 0 nil])
([nil nil ((#("training data, then it is often a good idea to reuse the lower layers of a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25989) (undo-tree-id9710 . -74) (undo-tree-id9711 . -75)) nil (25755 9321 205845 238000) 0 nil])
([nil nil ((#("pretraine" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25989) (undo-tree-id9707 . -8) (undo-tree-id9708 . 9) (undo-tree-id9709 . -9)) nil (25755 9321 205843 67000) 0 nil])
([nil nil ((#("d model, as we discussed in Chapter " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25989) (undo-tree-id9705 . -35) (undo-tree-id9706 . -36)) nil (25755 9321 205840 500000) 0 nil])
([nil nil ((#("1" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 25989) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1)) nil (25755 9321 205838 206000) 0 nil])
([nil nil ((#("1" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 25989) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1)) nil (25755 9321 205835 953000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25989) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1)) nil (25755 9321 205833 750000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 25989) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1)) nil (25755 9321 205831 98000) 0 nil])
([nil nil ((25989 . 25990) (#("I" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25989) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) (undo-tree-id9671 . -1) (undo-tree-id9672 . -1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1) 25990 (25989 . 25990) (#("For example, l" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25989) (undo-tree-id9675 . -13) (undo-tree-id9676 . -13) (undo-tree-id9677 . -13) (undo-tree-id9678 . -13) (undo-tree-id9679 . -14) (undo-tree-id9680 . -13) (undo-tree-id9681 . -2) (undo-tree-id9682 . -2) (undo-tree-id9683 . -2) (undo-tree-id9684 . -2) (undo-tree-id9685 . -2) (undo-tree-id9686 . -2) (undo-tree-id9687 . -2) (undo-tree-id9688 . -2) (undo-tree-id9689 . -10) (undo-tree-id9690 . -11) (undo-tree-id9691 . -14) (undo-tree-id9692 . -13) (undo-tree-id9693 . -13) (undo-tree-id9694 . -14) (undo-tree-id9695 . -14) (undo-tree-id9696 . -14) 26002) nil (25755 9321 205826 935000) 0 nil])
([nil nil ((26002 . 26003) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -26002) (undo-tree-id9664 . -1) 25989) nil (25755 9321 205646 593000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -26063) (nil fontified nil 26062 . 26063) (nil wrap-prefix #("  " 0 2 (face org-indent)) 26062 . 26063) (26062 . 26063) 26021 (t 25755 9321 269690 548000)) nil (25755 9351 345991 883000) 0 nil])
([nil nil ((#("First, let’s load the dataset using TensorFlow Datasets (see Chapter 13):
" 0 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26079) (undo-tree-id9764 . -73) (undo-tree-id9765 . -18) (undo-tree-id9766 . 74) (undo-tree-id9767 . -5) (undo-tree-id9768 . -7) (undo-tree-id9769 . -10) (undo-tree-id9770 . -11) (undo-tree-id9771 . -13) (undo-tree-id9772 . -18) (undo-tree-id9773 . -18) (undo-tree-id9774 . -18) (undo-tree-id9775 . -18) (undo-tree-id9776 . -18) (undo-tree-id9777 . -18) (undo-tree-id9778 . -18) (undo-tree-id9779 . -18) (undo-tree-id9780 . -18) (undo-tree-id9781 . -18) (undo-tree-id9782 . -18) (undo-tree-id9783 . -18) (undo-tree-id9784 . -18) (undo-tree-id9785 . -18) (undo-tree-id9786 . -18) (undo-tree-id9787 . -18) (undo-tree-id9788 . -18) (undo-tree-id9789 . -18) (undo-tree-id9790 . -18) (undo-tree-id9791 . -18) (undo-tree-id9792 . -18) (undo-tree-id9793 . -18) (undo-tree-id9794 . -18) (undo-tree-id9795 . -18) (undo-tree-id9796 . -18) (undo-tree-id9797 . -18) (undo-tree-id9798 . -18) (undo-tree-id9799 . -18) (undo-tree-id9800 . -18) (undo-tree-id9801 . -18) (undo-tree-id9802 . -18) (undo-tree-id9803 . -18) (undo-tree-id9804 . -18) (undo-tree-id9805 . -18) (undo-tree-id9806 . -18) (undo-tree-id9807 . -18) (undo-tree-id9808 . -18) (undo-tree-id9809 . -18) (undo-tree-id9810 . -18) (undo-tree-id9811 . -18) (undo-tree-id9812 . -18) (undo-tree-id9813 . -18) (undo-tree-id9814 . -18) (undo-tree-id9815 . -18) (undo-tree-id9816 . -18) (undo-tree-id9817 . -18) (undo-tree-id9818 . -18) (undo-tree-id9819 . -18) (undo-tree-id9820 . -18) (undo-tree-id9821 . -18) (undo-tree-id9822 . -18) (undo-tree-id9823 . -18) (undo-tree-id9824 . -18) (undo-tree-id9825 . -18) (undo-tree-id9826 . -18) (undo-tree-id9827 . -18) (undo-tree-id9828 . -18) (undo-tree-id9829 . -18) (undo-tree-id9830 . -18) (undo-tree-id9831 . -18) (undo-tree-id9832 . -18) (undo-tree-id9833 . -18) (undo-tree-id9834 . -18) (undo-tree-id9835 . -18) (undo-tree-id9836 . -18) (undo-tree-id9837 . -18) (undo-tree-id9838 . -18) (undo-tree-id9839 . -18) (undo-tree-id9840 . -18) (undo-tree-id9841 . -18) (undo-tree-id9842 . -18) (undo-tree-id9843 . -18) (undo-tree-id9844 . -18) (undo-tree-id9845 . -18) (undo-tree-id9846 . -18) (undo-tree-id9847 . -18) (undo-tree-id9848 . -18) (undo-tree-id9849 . -18) (undo-tree-id9850 . -18) (undo-tree-id9851 . -18) (undo-tree-id9852 . -18) (undo-tree-id9853 . -18) (undo-tree-id9854 . -18) (undo-tree-id9855 . -18) (undo-tree-id9856 . -18) (undo-tree-id9857 . -18) (undo-tree-id9858 . -18) (undo-tree-id9859 . -18) (undo-tree-id9860 . -18) (undo-tree-id9861 . -18) (undo-tree-id9862 . -18) (undo-tree-id9863 . -18) (undo-tree-id9864 . -18) (undo-tree-id9865 . -18) (undo-tree-id9866 . -18) (undo-tree-id9867 . -18) (undo-tree-id9868 . -18) (undo-tree-id9869 . -18) (undo-tree-id9870 . -18) (undo-tree-id9871 . -18) (undo-tree-id9872 . -18) (undo-tree-id9873 . -18) (undo-tree-id9874 . -18) (undo-tree-id9875 . -18) (undo-tree-id9876 . -18) (undo-tree-id9877 . -18) (undo-tree-id9878 . -18) (undo-tree-id9879 . -18) (undo-tree-id9880 . -18) (undo-tree-id9881 . -18) (undo-tree-id9882 . -18) (undo-tree-id9883 . -18) (undo-tree-id9884 . -18) (undo-tree-id9885 . -18) (undo-tree-id9886 . -18) (undo-tree-id9887 . -18) (undo-tree-id9888 . -18) (undo-tree-id9889 . -18) (undo-tree-id9890 . -18) (undo-tree-id9891 . -74) 26097) nil (25755 9351 345985 815000) 0 nil])
([nil nil ((26092 . 26098) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 26092 26098 nil nil nil t #s(yas--exit 26116 nil))) #s(yas--exit 26116 nil) 9 nil #s(yas--field 1 26092 26098 nil nil nil t #s(yas--exit 26116 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -26110) (undo-tree-id9714 . -2) (26080 . 26123) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26080) (undo-tree-id9715 . -1) (undo-tree-id9716 . -2) (undo-tree-id9717 . -1) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) (undo-tree-id9720 . -1) (undo-tree-id9721 . -1) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -1) (undo-tree-id9753 . -2) (undo-tree-id9754 . -2) (undo-tree-id9755 . -2) (undo-tree-id9756 . -2) (undo-tree-id9757 . -2) (undo-tree-id9758 . -2) (undo-tree-id9759 . -2) (undo-tree-id9760 . -2) (undo-tree-id9761 . -2) (undo-tree-id9762 . -2) (undo-tree-id9763 . -2) 26082 (26080 . 26082) (26079 . 26080) (26078 . 26079) 26076) nil (25755 9351 345742 936000) 0 nil])
([nil nil ((apply yas--snippet-revive 26080 26127 #s(yas--snippet nil (#s(yas--field 1 26092 26098 nil nil nil t #s(yas--exit 26116 nil))) #s(yas--exit 26116 nil) 9 nil #s(yas--field 1 26092 26098 nil nil nil t #s(yas--exit 26116 nil)) nil nil))) nil (25755 9366 929835 608000) 0 nil])
([nil nil ((#("import tensorflow_datasets as tfds
dataset, info = tfds.load(\"tf_flowers\", as_supervised=True,
with_info=True)
dataset_size = info.splits[\"train\"].num_examples # 3670class_names = info.features[\"label\"].names # [\"dandelion\", \"daisy\", ...]
n_classes = info.features[\"label\"].num_classes # 5
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 18 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 26 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 35 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 64 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 65 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 72 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 77 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 78 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 88 91 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 91 95 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 95 99 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 99 100 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 100 104 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 104 111 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 111 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 118 119 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 119 123 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 123 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 150 151 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 151 159 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 159 171 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 171 172 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 172 177 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 177 239 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 239 240 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 240 241 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 241 248 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 248 277 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 277 278 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 278 285 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 285 290 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26128) (undo-tree-id9892 . -289) (undo-tree-id9893 . -239) (undo-tree-id9894 . -239) (undo-tree-id9895 . 290) (undo-tree-id9896 . 272) (undo-tree-id9897 . -26) (undo-tree-id9898 . -18) (undo-tree-id9899 . -18) (undo-tree-id9900 . -18) (undo-tree-id9901 . -18) (undo-tree-id9902 . -18) (undo-tree-id9903 . -18) (undo-tree-id9904 . -18) (undo-tree-id9905 . -18) (undo-tree-id9906 . -239) (undo-tree-id9907 . -290) (undo-tree-id9908 . -239) (undo-tree-id9909 . 255) (undo-tree-id9910 . -42) (undo-tree-id9911 . -35) (undo-tree-id9912 . -35) (undo-tree-id9913 . -35) (undo-tree-id9914 . -35) (undo-tree-id9915 . -35) (undo-tree-id9916 . -35) (undo-tree-id9917 . -35) (undo-tree-id9918 . -35) (undo-tree-id9919 . -95) (undo-tree-id9920 . -95) (undo-tree-id9921 . -95) (undo-tree-id9922 . -95) (undo-tree-id9923 . -95) (undo-tree-id9924 . -95) (undo-tree-id9925 . -95) (undo-tree-id9926 . -95) (undo-tree-id9927 . -111) (undo-tree-id9928 . -111) (undo-tree-id9929 . -111) (undo-tree-id9930 . -111) (undo-tree-id9931 . -111) (undo-tree-id9932 . -111) (undo-tree-id9933 . -111) (undo-tree-id9934 . -111) (undo-tree-id9935 . -111) (undo-tree-id9936 . -111) (undo-tree-id9937 . -111) (undo-tree-id9938 . -111) (undo-tree-id9939 . -111) (undo-tree-id9940 . -111) (undo-tree-id9941 . -111) (undo-tree-id9942 . -111) (undo-tree-id9943 . -111) (undo-tree-id9944 . -111) (undo-tree-id9945 . -111) (undo-tree-id9946 . -111) (undo-tree-id9947 . -111) (undo-tree-id9948 . -111) (undo-tree-id9949 . -180) (undo-tree-id9950 . -180) (undo-tree-id9951 . -180) (undo-tree-id9952 . -180) (undo-tree-id9953 . -180) (undo-tree-id9954 . -180) (undo-tree-id9955 . -180) (undo-tree-id9956 . -180) (undo-tree-id9957 . -180) (undo-tree-id9958 . -180) (undo-tree-id9959 . -180) (undo-tree-id9960 . -180) (undo-tree-id9961 . -180) (undo-tree-id9962 . -180) (undo-tree-id9963 . -180) (undo-tree-id9964 . -180) (undo-tree-id9965 . -180) (undo-tree-id9966 . -180) (undo-tree-id9967 . -180) (undo-tree-id9968 . -180) (undo-tree-id9969 . -180) (undo-tree-id9970 . -180) (undo-tree-id9971 . -239) (undo-tree-id9972 . -239) (undo-tree-id9973 . -239) (undo-tree-id9974 . -239) (undo-tree-id9975 . -239) (undo-tree-id9976 . -239) (undo-tree-id9977 . -239) (undo-tree-id9978 . -239) (undo-tree-id9979 . -239) (undo-tree-id9980 . -239) (undo-tree-id9981 . -239) (undo-tree-id9982 . -290) 26367 (t 25755 9351 362499 66000)) nil (25755 9366 929830 691000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26115 . 26116) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -26405) (26115 . 26406)) nil (25755 9366 929522 567000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 26115) (undo-tree-id9983 . -1) (undo-tree-id9984 . -1) (undo-tree-id9985 . -1) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) (undo-tree-id9990 . -1) (undo-tree-id9991 . -1) (undo-tree-id9992 . -1) (undo-tree-id9993 . -1) (undo-tree-id9994 . -1) (undo-tree-id9995 . -1) (undo-tree-id9996 . -1) (undo-tree-id9997 . -1) (undo-tree-id9998 . -1) (undo-tree-id9999 . -1) (undo-tree-id10000 . -1) (undo-tree-id10001 . -1) (undo-tree-id10002 . -1) (t 25755 9366 946304 59000)) nil (25755 9368 788168 933000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 26405) (undo-tree-id10004 . -1) (t 25755 9368 798127 658000)) nil (25755 9372 460342 44000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 26405) (undo-tree-id10003 . -1)) nil (25755 9372 460336 604000) 0 nil])
([nil nil ((26209 . 26210) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -26209) (undo-tree-id10005 . -1) 26150 (t 25755 9372 480298 666000)) nil (25755 9412 619797 491000) 0 nil])
([nil nil ((#("Note that you can get information about the dataset by setting
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10178 . -62) (undo-tree-id10179 . -63) (t 25755 9412 639301 311000)) nil (25755 9453 771517 621000) 0 nil])
([nil nil ((#("with_info=True. Here, we get the dataset size and the names of the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 5 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 9 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10176 . -66) (undo-tree-id10177 . -67)) nil (25755 9453 771515 202000) 0 nil])
([nil nil ((#("classes. Unfortunately, there is only a \"train\" dataset, no test set or
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10174 . -71) (undo-tree-id10175 . -72)) nil (25755 9453 771512 792000) 0 nil])
([nil nil ((#("validation set, so we need to split the training set. The TF Datasets project
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10172 . -77) (undo-tree-id10173 . -78)) nil (25755 9453 771510 385000) 0 nil])
([nil nil ((#("provides an API for this. For example, let’s take the first 10% of the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10170 . -70) (undo-tree-id10171 . -71)) nil (25755 9453 771508 165000) 0 nil])
([nil nil ((#("dataset for testing, the next 15% for validation, and the remaining 75% for
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10166 . -75) (undo-tree-id10167 . 76) (undo-tree-id10168 . -7) (undo-tree-id10169 . -76)) nil (25755 9453 771505 477000) 0 nil])
([nil nil ((#("training:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26415) (undo-tree-id10164 . -9) (undo-tree-id10165 . -10)) nil (25755 9453 771488 171000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 26405) (undo-tree-id10006 . -9) (undo-tree-id10007 . -8) (undo-tree-id10008 . -8) (undo-tree-id10009 . -8) (undo-tree-id10010 . -8) (undo-tree-id10011 . -8) (undo-tree-id10012 . -8) (undo-tree-id10013 . -8) (undo-tree-id10014 . -8) (undo-tree-id10015 . -10) (undo-tree-id10016 . -10) (undo-tree-id10017 . -10) (undo-tree-id10018 . -10) (undo-tree-id10019 . -10) (undo-tree-id10020 . -10) (undo-tree-id10021 . -10) (undo-tree-id10022 . -10) (undo-tree-id10023 . -10) (undo-tree-id10024 . -10) (undo-tree-id10025 . -10) (undo-tree-id10026 . -10) (undo-tree-id10027 . -10) (undo-tree-id10028 . -10) (undo-tree-id10029 . -10) (undo-tree-id10030 . -10) (undo-tree-id10031 . -10) (undo-tree-id10032 . -10) (undo-tree-id10033 . -10) (undo-tree-id10034 . -10) (undo-tree-id10035 . -10) (undo-tree-id10036 . -10) (undo-tree-id10037 . -10) (undo-tree-id10038 . -10) (undo-tree-id10039 . -10) (undo-tree-id10040 . -10) (undo-tree-id10041 . -10) (undo-tree-id10042 . -10) (undo-tree-id10043 . -10) (undo-tree-id10044 . -10) (undo-tree-id10045 . -10) (undo-tree-id10046 . -10) (undo-tree-id10047 . -10) (undo-tree-id10048 . -10) (undo-tree-id10049 . -10) (undo-tree-id10050 . -10) (undo-tree-id10051 . -10) (undo-tree-id10052 . -10) (undo-tree-id10053 . -10) (undo-tree-id10054 . -10) (undo-tree-id10055 . -10) (undo-tree-id10056 . -10) (undo-tree-id10057 . -10) (undo-tree-id10058 . -10) (undo-tree-id10059 . -10) (undo-tree-id10060 . -10) (undo-tree-id10061 . -10) (undo-tree-id10062 . -10) (undo-tree-id10063 . -10) (undo-tree-id10064 . -10) (undo-tree-id10065 . -10) (undo-tree-id10066 . -10) (undo-tree-id10067 . -10) (undo-tree-id10068 . -10) (undo-tree-id10069 . -10) (undo-tree-id10070 . -10) (undo-tree-id10071 . -10) (undo-tree-id10072 . -10) (undo-tree-id10073 . -10) (undo-tree-id10074 . -10) (undo-tree-id10075 . -10) (undo-tree-id10076 . -10) (undo-tree-id10077 . -10) (undo-tree-id10078 . -10) (undo-tree-id10079 . -10) (undo-tree-id10080 . -10) (undo-tree-id10081 . -10) (undo-tree-id10082 . -10) (undo-tree-id10083 . -10) (undo-tree-id10084 . -10) (undo-tree-id10085 . -10) (undo-tree-id10086 . -10) (undo-tree-id10087 . -10) (undo-tree-id10088 . -10) (undo-tree-id10089 . -10) (undo-tree-id10090 . -10) (undo-tree-id10091 . -10) (undo-tree-id10092 . -10) (undo-tree-id10093 . -10) (undo-tree-id10094 . -10) (undo-tree-id10095 . -10) (undo-tree-id10096 . -10) (undo-tree-id10097 . -10) (undo-tree-id10098 . -10) (undo-tree-id10099 . -10) (undo-tree-id10100 . -10) (undo-tree-id10101 . -10) (undo-tree-id10102 . -10) (undo-tree-id10103 . -10) (undo-tree-id10104 . -10) (undo-tree-id10105 . -10) (undo-tree-id10106 . -10) (undo-tree-id10107 . -10) (undo-tree-id10108 . -10) (undo-tree-id10109 . -10) (undo-tree-id10110 . -10) (undo-tree-id10111 . -10) (undo-tree-id10112 . -10) (undo-tree-id10113 . -10) (undo-tree-id10114 . -10) (undo-tree-id10115 . -10) (undo-tree-id10116 . -10) (undo-tree-id10117 . -10) (undo-tree-id10118 . -10) (undo-tree-id10119 . -10) (undo-tree-id10120 . -10) (undo-tree-id10121 . -10) (undo-tree-id10122 . -10) (undo-tree-id10123 . -10) (undo-tree-id10124 . -10) (undo-tree-id10125 . -10) (undo-tree-id10126 . -10) (undo-tree-id10127 . -10) (undo-tree-id10128 . -10) (undo-tree-id10129 . -10) (undo-tree-id10130 . -10) (undo-tree-id10131 . -10) (undo-tree-id10132 . -10) (undo-tree-id10133 . -10) (undo-tree-id10134 . -10) (undo-tree-id10135 . -10) (undo-tree-id10136 . -10) (undo-tree-id10137 . -10) (undo-tree-id10138 . -10) (undo-tree-id10139 . -10) (undo-tree-id10140 . -10) (undo-tree-id10141 . -10) (undo-tree-id10142 . -10) (undo-tree-id10143 . -10) (undo-tree-id10144 . -10) (undo-tree-id10145 . -10) (undo-tree-id10146 . -10) (undo-tree-id10147 . -10) (undo-tree-id10148 . -10) (undo-tree-id10149 . -10) (undo-tree-id10150 . -10) (undo-tree-id10151 . -10) (undo-tree-id10152 . -10) (undo-tree-id10153 . -10) (undo-tree-id10154 . -10) (undo-tree-id10155 . -10) (undo-tree-id10156 . -10) (undo-tree-id10157 . -10) (undo-tree-id10158 . -10) (undo-tree-id10159 . -10) (undo-tree-id10160 . -10) (undo-tree-id10161 . -10) (undo-tree-id10162 . -10) (undo-tree-id10163 . -10)) nil (25755 9453 771479 610000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26706 . 26707) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -26716) (26706 . 26717) 26687) nil (25755 9453 771115 768000) 0 nil])
([nil nil ((26478 . 26479) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -26478) (undo-tree-id10198 . -1) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) 26405 (t 25755 9453 786630 341000)) nil (25755 9464 140200 682000) 0 nil])
([nil nil ((26611 . 26612) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -26611) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) 26610) nil (25755 9464 140191 782000) 0 nil])
([nil nil ((26686 . 26687) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -26686) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) (undo-tree-id10185 . -1) (undo-tree-id10186 . -1) (undo-tree-id10187 . -1) (undo-tree-id10188 . -1) 26685) nil (25755 9464 140180 545000) 0 nil])
([nil nil ((26753 . 26754) (t 25755 9464 150290 945000)) nil (25755 9485 406362 765000) 0 nil])
([nil nil ((26815 . 26816)) nil (25755 9496 645830 463000) 0 nil] [nil nil ((#("The CNN expects 224 × 224 images,
" 0 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26754) (undo-tree-id10207 . -33) (undo-tree-id10208 . 34) (undo-tree-id10209 . -34) (undo-tree-id10210 . -34) (undo-tree-id10211 . -34) (undo-tree-id10212 . -34) (undo-tree-id10213 . -34) (undo-tree-id10214 . -34) (undo-tree-id10215 . -34) (undo-tree-id10216 . -34) (undo-tree-id10217 . -34) (undo-tree-id10218 . -34) (undo-tree-id10219 . -34) (undo-tree-id10220 . -34) (undo-tree-id10221 . -34) (undo-tree-id10222 . -34) (undo-tree-id10223 . -34) (undo-tree-id10224 . -34) (undo-tree-id10225 . -34) (undo-tree-id10226 . -34) (undo-tree-id10227 . -34) (undo-tree-id10228 . -34) 26788) ((26754 . 26788)) (25755 9485 406127 497000) 0 nil])
([nil nil ((26854 . 26855) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -26854) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) 26816 (t 25755 9496 710626 243000)) nil (25755 9506 731613 480000) 0 nil])
nil
([nil nil ((26907 . 26913) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 26907 26913 nil nil nil t #s(yas--exit 26931 nil))) #s(yas--exit 26931 nil) 10 nil #s(yas--field 1 26907 26913 nil nil nil t #s(yas--exit 26931 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -26925) (undo-tree-id10500 . -2) (26895 . 26938) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26895) (undo-tree-id10501 . -1) (undo-tree-id10502 . -2) (undo-tree-id10503 . -1) (undo-tree-id10504 . -1) (undo-tree-id10505 . -1) (undo-tree-id10506 . -1) (undo-tree-id10507 . -1) (undo-tree-id10508 . -1) (undo-tree-id10509 . -1) (undo-tree-id10510 . -1) (undo-tree-id10511 . -1) (undo-tree-id10512 . -1) (undo-tree-id10513 . -1) (undo-tree-id10514 . -1) (undo-tree-id10515 . -1) (undo-tree-id10516 . -1) (undo-tree-id10517 . -1) (undo-tree-id10518 . -1) (undo-tree-id10519 . -1) (undo-tree-id10520 . -1) (undo-tree-id10521 . -1) (undo-tree-id10522 . -1) (undo-tree-id10523 . -1) (undo-tree-id10524 . -1) (undo-tree-id10525 . -1) (undo-tree-id10526 . -1) (undo-tree-id10527 . -1) (undo-tree-id10528 . -1) (undo-tree-id10529 . -1) (undo-tree-id10530 . -1) (undo-tree-id10531 . -1) (undo-tree-id10532 . -1) (undo-tree-id10533 . -1) (undo-tree-id10534 . -1) (undo-tree-id10535 . -1) (undo-tree-id10536 . -1) (undo-tree-id10537 . -1) (undo-tree-id10538 . -1) (undo-tree-id10539 . -2) (undo-tree-id10540 . -2) (undo-tree-id10541 . -2) (undo-tree-id10542 . -2) (undo-tree-id10543 . -2) (undo-tree-id10544 . -2) (undo-tree-id10545 . -2) (undo-tree-id10546 . -2) (undo-tree-id10547 . -2) (undo-tree-id10548 . -2) (undo-tree-id10549 . -2) 26897 (26895 . 26897) (26894 . 26895) (t 25755 9506 743054 73000) 26816) nil (25755 9558 704101 421000) 0 nil])
([nil nil ((apply yas--snippet-revive 26895 26942 #s(yas--snippet nil (#s(yas--field 1 26907 26913 nil nil nil t #s(yas--exit 26931 nil))) #s(yas--exit 26931 nil) 10 nil #s(yas--field 1 26907 26913 nil nil nil t #s(yas--exit 26931 nil)) nil nil))) nil (25755 9558 704068 781000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 26933) (undo-tree-id10238 . -9) (undo-tree-id10239 . -8) (undo-tree-id10240 . -10) (undo-tree-id10241 . -10) (undo-tree-id10242 . -10) (undo-tree-id10243 . -10) (undo-tree-id10244 . -10) (undo-tree-id10245 . -10) (undo-tree-id10246 . -10) (undo-tree-id10247 . -10) (undo-tree-id10248 . -10) (undo-tree-id10249 . -10) (undo-tree-id10250 . -10) (undo-tree-id10251 . -10) (undo-tree-id10252 . -10) (undo-tree-id10253 . -10) (undo-tree-id10254 . -10) (undo-tree-id10255 . -10) (undo-tree-id10256 . -10) (undo-tree-id10257 . -10) (undo-tree-id10258 . -10) (undo-tree-id10259 . -10) (undo-tree-id10260 . -10) (undo-tree-id10261 . -10) (undo-tree-id10262 . -10) (undo-tree-id10263 . -10) (undo-tree-id10264 . -10) (undo-tree-id10265 . -10) (undo-tree-id10266 . -10) (undo-tree-id10267 . -10) (undo-tree-id10268 . -10) (undo-tree-id10269 . -10) (undo-tree-id10270 . -10) (undo-tree-id10271 . -10) (undo-tree-id10272 . -10) (undo-tree-id10273 . -10) (undo-tree-id10274 . -10) (undo-tree-id10275 . -10) (undo-tree-id10276 . -10) (undo-tree-id10277 . -10) (undo-tree-id10278 . -10) (undo-tree-id10279 . -10) (undo-tree-id10280 . -10) (undo-tree-id10281 . -10) (undo-tree-id10282 . -10) (undo-tree-id10283 . -10) (undo-tree-id10284 . -10) (undo-tree-id10285 . -10) (undo-tree-id10286 . -10) (undo-tree-id10287 . -10) (undo-tree-id10288 . -10) (undo-tree-id10289 . -10) (undo-tree-id10290 . -10) (undo-tree-id10291 . -10) (undo-tree-id10292 . -10) (undo-tree-id10293 . -10) (undo-tree-id10294 . -10) (undo-tree-id10295 . -10) (undo-tree-id10296 . -10) (undo-tree-id10297 . -10) (undo-tree-id10298 . -10) (undo-tree-id10299 . -10) (undo-tree-id10300 . -10) (undo-tree-id10301 . -10) (undo-tree-id10302 . -10) (undo-tree-id10303 . -10) (undo-tree-id10304 . -10) (undo-tree-id10305 . -10) (undo-tree-id10306 . -10) (undo-tree-id10307 . -10) (undo-tree-id10308 . -10) (undo-tree-id10309 . -10) (undo-tree-id10310 . -10) (undo-tree-id10311 . -10) (undo-tree-id10312 . -10) (undo-tree-id10313 . -10) (undo-tree-id10314 . -10) (undo-tree-id10315 . -10) (undo-tree-id10316 . -10) (undo-tree-id10317 . -10) (undo-tree-id10318 . -10) (undo-tree-id10319 . -10) (undo-tree-id10320 . -10) (undo-tree-id10321 . -10) (undo-tree-id10322 . -10) (undo-tree-id10323 . -10) (undo-tree-id10324 . -10) (undo-tree-id10325 . -10) (undo-tree-id10326 . -10) (undo-tree-id10327 . -10) (undo-tree-id10328 . -10) (undo-tree-id10329 . -10) (undo-tree-id10330 . -10) (undo-tree-id10331 . -10) (undo-tree-id10332 . -10) (undo-tree-id10333 . -10) (undo-tree-id10334 . -10) (undo-tree-id10335 . -10) (undo-tree-id10336 . -10) (undo-tree-id10337 . -10) (undo-tree-id10338 . -10) (undo-tree-id10339 . -10) (undo-tree-id10340 . -10) (undo-tree-id10341 . -10) (undo-tree-id10342 . -10) (undo-tree-id10343 . -10) (undo-tree-id10344 . -10) (undo-tree-id10345 . -10) (undo-tree-id10346 . -10) (undo-tree-id10347 . -10) (undo-tree-id10348 . -10) (undo-tree-id10349 . -10) (undo-tree-id10350 . -10) (undo-tree-id10351 . -10) (undo-tree-id10352 . -10) (undo-tree-id10353 . -10) (undo-tree-id10354 . -10) (undo-tree-id10355 . -10) (undo-tree-id10356 . -10) (undo-tree-id10357 . -10) (undo-tree-id10358 . -10) (undo-tree-id10359 . -10) (undo-tree-id10360 . -10) (undo-tree-id10361 . -10) (undo-tree-id10362 . -10) (undo-tree-id10363 . -10) (undo-tree-id10364 . -10) (undo-tree-id10365 . -10) (undo-tree-id10366 . -10) (undo-tree-id10367 . -10) (undo-tree-id10368 . -10) (undo-tree-id10369 . -10) (undo-tree-id10370 . -10) (undo-tree-id10371 . -10) (undo-tree-id10372 . -10) (undo-tree-id10373 . -10) (undo-tree-id10374 . -10) (undo-tree-id10375 . -10) (undo-tree-id10376 . -10) (undo-tree-id10377 . -10) (undo-tree-id10378 . -10) (undo-tree-id10379 . -10) (undo-tree-id10380 . -10) (undo-tree-id10381 . -10) (undo-tree-id10382 . -10) (undo-tree-id10383 . -10) (undo-tree-id10384 . -10) (undo-tree-id10385 . -10) (undo-tree-id10386 . -10) (undo-tree-id10387 . -10) (undo-tree-id10388 . -10) (undo-tree-id10389 . -10) (undo-tree-id10390 . -10) (undo-tree-id10391 . -10) (undo-tree-id10392 . -10) (undo-tree-id10393 . -10) (undo-tree-id10394 . -10) (undo-tree-id10395 . -10) (undo-tree-id10396 . -10) (undo-tree-id10397 . -10) (undo-tree-id10398 . -10) (undo-tree-id10399 . -10) (undo-tree-id10400 . -10) (undo-tree-id10401 . -10) (undo-tree-id10402 . -10) (undo-tree-id10403 . -10) (undo-tree-id10404 . -10) (undo-tree-id10405 . -10) (undo-tree-id10406 . -10) (undo-tree-id10407 . -10) (undo-tree-id10408 . -10) (undo-tree-id10409 . -10) (undo-tree-id10410 . -10) (undo-tree-id10411 . -10) (undo-tree-id10412 . -10) (undo-tree-id10413 . -10) (undo-tree-id10414 . -10) (undo-tree-id10415 . -10) (undo-tree-id10416 . -10) (undo-tree-id10417 . -10) (undo-tree-id10418 . -10) (undo-tree-id10419 . -10) (undo-tree-id10420 . -10) (undo-tree-id10421 . -10) (undo-tree-id10422 . -10) (undo-tree-id10423 . -10) (undo-tree-id10424 . -10) (undo-tree-id10425 . -10) (undo-tree-id10426 . -10) (undo-tree-id10427 . -10) (undo-tree-id10428 . -10) (undo-tree-id10429 . -10) (undo-tree-id10430 . -10) (undo-tree-id10431 . -10) (undo-tree-id10432 . -10) (undo-tree-id10433 . -10) (undo-tree-id10434 . -10) (undo-tree-id10435 . -10) (undo-tree-id10436 . -10) (undo-tree-id10437 . -10) (undo-tree-id10438 . -10) (undo-tree-id10439 . -10) (undo-tree-id10440 . -10) (undo-tree-id10441 . -10) (undo-tree-id10442 . -10) (undo-tree-id10443 . -10) (undo-tree-id10444 . -10) (undo-tree-id10445 . -10) (undo-tree-id10446 . -10) (undo-tree-id10447 . -10) (undo-tree-id10448 . -10) (undo-tree-id10449 . -10) (undo-tree-id10450 . -10) (undo-tree-id10451 . -10) (undo-tree-id10452 . -10) (undo-tree-id10453 . -10) (undo-tree-id10454 . -10) (undo-tree-id10455 . -10) (undo-tree-id10456 . -10) (undo-tree-id10457 . -10) (undo-tree-id10458 . -10) (undo-tree-id10459 . -10) (undo-tree-id10460 . -10) (undo-tree-id10461 . -10) (undo-tree-id10462 . -10) (undo-tree-id10463 . -10) (undo-tree-id10464 . -10) (undo-tree-id10465 . -10) (undo-tree-id10466 . -10) (undo-tree-id10467 . -10) (undo-tree-id10468 . -10) (undo-tree-id10469 . -10) (undo-tree-id10470 . -10) (undo-tree-id10471 . -10) (undo-tree-id10472 . -9) (undo-tree-id10473 . -9) (undo-tree-id10474 . -9) (undo-tree-id10475 . -9) (undo-tree-id10476 . -9) (undo-tree-id10477 . -9) (undo-tree-id10478 . -9) (undo-tree-id10479 . -9) (undo-tree-id10480 . -9) (undo-tree-id10481 . -8) (undo-tree-id10482 . -8) (undo-tree-id10483 . -8) (undo-tree-id10484 . -8) (undo-tree-id10485 . -8) (undo-tree-id10486 . -8) (undo-tree-id10487 . -8) (undo-tree-id10488 . -8) (undo-tree-id10489 . -8) (undo-tree-id10490 . -8) (undo-tree-id10491 . -8) (undo-tree-id10492 . -8) (undo-tree-id10493 . -8) (undo-tree-id10494 . -8) (undo-tree-id10495 . -8) (undo-tree-id10496 . -8) (undo-tree-id10497 . -8) (undo-tree-id10498 . -8) (undo-tree-id10499 . -10) 26941) nil (25755 9558 704059 90000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27113 . 27114) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -27123) (27113 . 27124) 27096) nil (25755 9558 703158 766000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 26930) (undo-tree-id10826 . -1) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (t 25755 9558 766782 195000)) nil (25755 9570 558702 138000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 26930) (undo-tree-id10817 . -1) (undo-tree-id10818 . -1) (undo-tree-id10819 . -1) (undo-tree-id10820 . -1) (undo-tree-id10821 . -1) (undo-tree-id10822 . -1) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1)) nil (25755 9570 558694 906000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 26930) (undo-tree-id10550 . -1) (undo-tree-id10551 . -1) (undo-tree-id10552 . -1) (undo-tree-id10553 . -1) (undo-tree-id10554 . -1) (undo-tree-id10555 . -1) (undo-tree-id10556 . -1) (undo-tree-id10557 . -1) (undo-tree-id10558 . -1) (undo-tree-id10559 . -1) (undo-tree-id10560 . -1) (undo-tree-id10561 . -1) (undo-tree-id10562 . -1) (undo-tree-id10563 . -1) (undo-tree-id10564 . -1) (undo-tree-id10565 . -1) (undo-tree-id10566 . -1) (undo-tree-id10567 . -1) (undo-tree-id10568 . -1) (undo-tree-id10569 . -1) (undo-tree-id10570 . -1) (undo-tree-id10571 . -1) (undo-tree-id10572 . -1) (undo-tree-id10573 . -1) (undo-tree-id10574 . -1) (undo-tree-id10575 . -1) (undo-tree-id10576 . -1) (undo-tree-id10577 . -1) (undo-tree-id10578 . -1) (undo-tree-id10579 . -1) (undo-tree-id10580 . -1) (undo-tree-id10581 . -1) (undo-tree-id10582 . -1) (undo-tree-id10583 . -1) (undo-tree-id10584 . -1) (undo-tree-id10585 . -1) (undo-tree-id10586 . -1) (undo-tree-id10587 . -1) (undo-tree-id10588 . -1) (undo-tree-id10589 . -1) (undo-tree-id10590 . -1) (undo-tree-id10591 . -1) (undo-tree-id10592 . -1) (undo-tree-id10593 . -1) (undo-tree-id10594 . -1) (undo-tree-id10595 . -1) (undo-tree-id10596 . -1) (undo-tree-id10597 . -1) (undo-tree-id10598 . -1) (undo-tree-id10599 . -1) (undo-tree-id10600 . -1) (undo-tree-id10601 . -1) (undo-tree-id10602 . -1) (undo-tree-id10603 . -1) (undo-tree-id10604 . -1) (undo-tree-id10605 . -1) (undo-tree-id10606 . -1) (undo-tree-id10607 . -1) (undo-tree-id10608 . -1) (undo-tree-id10609 . -1) (undo-tree-id10610 . -1) (undo-tree-id10611 . -1) (undo-tree-id10612 . -1) (undo-tree-id10613 . -1) (undo-tree-id10614 . -1) (undo-tree-id10615 . -1) (undo-tree-id10616 . -1) (undo-tree-id10617 . -1) (undo-tree-id10618 . -1) (undo-tree-id10619 . -1) (undo-tree-id10620 . -1) (undo-tree-id10621 . -1) (undo-tree-id10622 . -1) (undo-tree-id10623 . -1) (undo-tree-id10624 . -1) (undo-tree-id10625 . -1) (undo-tree-id10626 . -1) (undo-tree-id10627 . -1) (undo-tree-id10628 . -1) (undo-tree-id10629 . -1) (undo-tree-id10630 . -1) (undo-tree-id10631 . -1) (undo-tree-id10632 . -1) (undo-tree-id10633 . -1) (undo-tree-id10634 . -1) (undo-tree-id10635 . -1) (undo-tree-id10636 . -1) (undo-tree-id10637 . -1) (undo-tree-id10638 . -1) (undo-tree-id10639 . -1) (undo-tree-id10640 . -1) (undo-tree-id10641 . -1) (undo-tree-id10642 . -1) (undo-tree-id10643 . -1) (undo-tree-id10644 . -1) (undo-tree-id10645 . -1) (undo-tree-id10646 . -1) (undo-tree-id10647 . -1) (undo-tree-id10648 . -1) (undo-tree-id10649 . -1) (undo-tree-id10650 . -1) (undo-tree-id10651 . -1) (undo-tree-id10652 . -1) (undo-tree-id10653 . -1) (undo-tree-id10654 . -1) (undo-tree-id10655 . -1) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1) (undo-tree-id10658 . -1) (undo-tree-id10659 . -1) (undo-tree-id10660 . -1) (undo-tree-id10661 . -1) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1) (undo-tree-id10664 . -1) (undo-tree-id10665 . -1) (undo-tree-id10666 . -1) (undo-tree-id10667 . -1) (undo-tree-id10668 . -1) (undo-tree-id10669 . -1) (undo-tree-id10670 . -1) (undo-tree-id10671 . -1) (undo-tree-id10672 . -1) (undo-tree-id10673 . -1) (undo-tree-id10674 . -1) (undo-tree-id10675 . -1) (undo-tree-id10676 . -1) (undo-tree-id10677 . -1) (undo-tree-id10678 . -1) (undo-tree-id10679 . -1) (undo-tree-id10680 . -1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1) (undo-tree-id10683 . -1) (undo-tree-id10684 . -1) (undo-tree-id10685 . -1) (undo-tree-id10686 . -1) (undo-tree-id10687 . -1) (undo-tree-id10688 . -1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1) (undo-tree-id10691 . -1) (undo-tree-id10692 . -1) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1) (undo-tree-id10695 . -1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) (undo-tree-id10721 . -1) (undo-tree-id10722 . -1) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) (undo-tree-id10725 . -1) (undo-tree-id10726 . -1) (undo-tree-id10727 . -1) (undo-tree-id10728 . -1) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1) (undo-tree-id10732 . -1) (undo-tree-id10733 . -1) (undo-tree-id10734 . -1) (undo-tree-id10735 . -1) (undo-tree-id10736 . -1) (undo-tree-id10737 . -1) (undo-tree-id10738 . -1) (undo-tree-id10739 . -1) (undo-tree-id10740 . -1) (undo-tree-id10741 . -1) (undo-tree-id10742 . -1) (undo-tree-id10743 . -1) (undo-tree-id10744 . -1) (undo-tree-id10745 . -1) (undo-tree-id10746 . -1) (undo-tree-id10747 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) (undo-tree-id10750 . -1) (undo-tree-id10751 . -1) (undo-tree-id10752 . -1) (undo-tree-id10753 . -1) (undo-tree-id10754 . -1) (undo-tree-id10755 . -1) (undo-tree-id10756 . -1) (undo-tree-id10757 . -1) (undo-tree-id10758 . -1) (undo-tree-id10759 . -1) (undo-tree-id10760 . -1) (undo-tree-id10761 . -1) (undo-tree-id10762 . -1) (undo-tree-id10763 . -1) (undo-tree-id10764 . -1) (undo-tree-id10765 . -1) (undo-tree-id10766 . -1) (undo-tree-id10767 . -1) (undo-tree-id10768 . -1) (undo-tree-id10769 . -1) (undo-tree-id10770 . -1) (undo-tree-id10771 . -1) (undo-tree-id10772 . -1) (undo-tree-id10773 . -1) (undo-tree-id10774 . -1) (undo-tree-id10775 . -1) (undo-tree-id10776 . -1) (undo-tree-id10777 . -1) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) (undo-tree-id10782 . -1) (undo-tree-id10783 . -1) (undo-tree-id10784 . -1) (undo-tree-id10785 . -1) (undo-tree-id10786 . -1) (undo-tree-id10787 . -1) (undo-tree-id10788 . -1) (undo-tree-id10789 . -1) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (undo-tree-id10809 . -1) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) (undo-tree-id10814 . -1) (undo-tree-id10815 . -1) (undo-tree-id10816 . -1)) nil (25755 9570 558677 557000) 0 nil])
([nil nil ((27100 . 27101) (27099 . 27100) (27098 . 27099) (27097 . 27098) (27036 . 27037) (27035 . 27036) (27034 . 27035) (27033 . 27034) (27018 . 27019) (27017 . 27018) (27016 . 27017) (27015 . 27016) (26962 . 26964) (26960 . 26962)) nil (25755 9570 558306 974000) 0 nil])
([nil nil ((#("W" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -26816) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) (undo-tree-id10849 . -1) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1) (undo-tree-id10854 . -1) (undo-tree-id10855 . -1) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1) (undo-tree-id10858 . -1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) (undo-tree-id10861 . -1) (undo-tree-id10862 . -1) (undo-tree-id10863 . -1) (undo-tree-id10864 . -1) (undo-tree-id10865 . -1) (undo-tree-id10866 . -1) (undo-tree-id10867 . -1) (undo-tree-id10868 . -1) (undo-tree-id10869 . -1) (undo-tree-id10870 . -1) (undo-tree-id10871 . -1) (undo-tree-id10872 . -1) (undo-tree-id10873 . -1) (undo-tree-id10874 . -1) (undo-tree-id10875 . -1) (undo-tree-id10876 . -1) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (undo-tree-id10899 . -1) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (undo-tree-id10908 . -1) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1) (undo-tree-id10935 . -1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (undo-tree-id10938 . -1) (undo-tree-id10939 . -1) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) (undo-tree-id10975 . -1) (undo-tree-id10976 . -1) (undo-tree-id10977 . -1) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -26817) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (undo-tree-id10998 . -1) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (undo-tree-id11016 . -1) (undo-tree-id11017 . -1) (undo-tree-id11018 . -1) (undo-tree-id11019 . -1) (undo-tree-id11020 . -1) (undo-tree-id11021 . -1) (undo-tree-id11022 . -1) (undo-tree-id11023 . -1) (undo-tree-id11024 . -1) (undo-tree-id11025 . -1) (undo-tree-id11026 . -1) (undo-tree-id11027 . -1) (undo-tree-id11028 . -1) (undo-tree-id11029 . -1) (undo-tree-id11030 . -1) (undo-tree-id11031 . -1) (undo-tree-id11032 . -1) (undo-tree-id11033 . -1) (undo-tree-id11034 . -1) (undo-tree-id11035 . -1) (undo-tree-id11036 . -1) (undo-tree-id11037 . -1) (undo-tree-id11038 . -1) (undo-tree-id11039 . -1) (undo-tree-id11040 . -1) (undo-tree-id11041 . -1) (undo-tree-id11042 . -1) (undo-tree-id11043 . -1) (undo-tree-id11044 . -1) (undo-tree-id11045 . -1) (undo-tree-id11046 . -1) (undo-tree-id11047 . -1) (undo-tree-id11048 . -1) (undo-tree-id11049 . -1) (undo-tree-id11050 . -1) (undo-tree-id11051 . -1) (undo-tree-id11052 . -1) (undo-tree-id11053 . -1) (undo-tree-id11054 . -1) (undo-tree-id11055 . -1) (undo-tree-id11056 . -1) (undo-tree-id11057 . -1) (undo-tree-id11058 . -1) (undo-tree-id11059 . -1) (undo-tree-id11060 . -1) (undo-tree-id11061 . -1) (undo-tree-id11062 . -1) (undo-tree-id11063 . -1) (undo-tree-id11064 . -1) (undo-tree-id11065 . -1) (undo-tree-id11066 . -1) (undo-tree-id11067 . -1) (undo-tree-id11068 . -1) (undo-tree-id11069 . -1) (undo-tree-id11070 . -1) (undo-tree-id11071 . -1) (undo-tree-id11072 . -1) (undo-tree-id11073 . -1) (undo-tree-id11074 . -1) (undo-tree-id11075 . -1) (undo-tree-id11076 . -1) (undo-tree-id11077 . -1) (undo-tree-id11078 . -1) (undo-tree-id11079 . -1) (undo-tree-id11080 . -1) (undo-tree-id11081 . -1) (undo-tree-id11082 . -1) (undo-tree-id11083 . -1) (undo-tree-id11084 . -1) (undo-tree-id11085 . -1) (undo-tree-id11086 . -1) (undo-tree-id11087 . -1) (undo-tree-id11088 . -1) (undo-tree-id11089 . -1) (undo-tree-id11090 . -1) (undo-tree-id11091 . -1) (undo-tree-id11092 . -1) (undo-tree-id11093 . -1) (undo-tree-id11094 . -1) (undo-tree-id11095 . -1) (undo-tree-id11096 . -1) (undo-tree-id11097 . -1) (undo-tree-id11098 . -1) (undo-tree-id11099 . -1) (undo-tree-id11100 . -1) (undo-tree-id11101 . -1) (undo-tree-id11102 . -1) (undo-tree-id11103 . -1) (undo-tree-id11104 . -1) (undo-tree-id11105 . -1) (undo-tree-id11106 . -1) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . -1) (undo-tree-id11117 . -1) (undo-tree-id11118 . -1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (undo-tree-id11127 . -1) (undo-tree-id11128 . -1) (undo-tree-id11129 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -26818) (undo-tree-id11130 . -1) (undo-tree-id11131 . -1) (undo-tree-id11132 . -1) (undo-tree-id11133 . -1) (undo-tree-id11134 . -1) (undo-tree-id11135 . -1) (undo-tree-id11136 . -1) (undo-tree-id11137 . -1) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1) (undo-tree-id11142 . -1) (undo-tree-id11143 . -1) (undo-tree-id11144 . -1) (undo-tree-id11145 . -1) (undo-tree-id11146 . -1) (undo-tree-id11147 . -1) (undo-tree-id11148 . -1) (undo-tree-id11149 . -1) (undo-tree-id11150 . -1) (undo-tree-id11151 . -1) (undo-tree-id11152 . -1) (undo-tree-id11153 . -1) (undo-tree-id11154 . -1) (undo-tree-id11155 . -1) (undo-tree-id11156 . -1) (undo-tree-id11157 . -1) (undo-tree-id11158 . -1) (undo-tree-id11159 . -1) (undo-tree-id11160 . -1) (undo-tree-id11161 . -1) (undo-tree-id11162 . -1) (undo-tree-id11163 . -1) (undo-tree-id11164 . -1) (undo-tree-id11165 . -1) (undo-tree-id11166 . -1) (undo-tree-id11167 . -1) (undo-tree-id11168 . -1) (undo-tree-id11169 . -1) (undo-tree-id11170 . -1) (undo-tree-id11171 . -1) (undo-tree-id11172 . -1) (undo-tree-id11173 . -1) (undo-tree-id11174 . -1) (undo-tree-id11175 . -1) (undo-tree-id11176 . -1) (undo-tree-id11177 . -1) (undo-tree-id11178 . -1) (undo-tree-id11179 . -1) (undo-tree-id11180 . -1) (undo-tree-id11181 . -1) (undo-tree-id11182 . -1) (undo-tree-id11183 . -1) (undo-tree-id11184 . -1) (undo-tree-id11185 . -1) (undo-tree-id11186 . -1) (undo-tree-id11187 . -1) (undo-tree-id11188 . -1) (undo-tree-id11189 . -1) (undo-tree-id11190 . -1) (undo-tree-id11191 . -1) (undo-tree-id11192 . -1) (undo-tree-id11193 . -1) (undo-tree-id11194 . -1) (undo-tree-id11195 . -1) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) (undo-tree-id11198 . -1) (undo-tree-id11199 . -1) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (undo-tree-id11231 . -1) (undo-tree-id11232 . -1) (undo-tree-id11233 . -1) (undo-tree-id11234 . -1) (undo-tree-id11235 . -1) (undo-tree-id11236 . -1) (undo-tree-id11237 . -1) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (#("b" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -26819) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) (undo-tree-id11282 . -1) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (undo-tree-id11292 . -1) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) 26820 (26819 . 26820) (#("also need to" 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 26819) (undo-tree-id11300 . -11) (undo-tree-id11301 . -11) (undo-tree-id11302 . -11) (undo-tree-id11303 . -11) (undo-tree-id11304 . -5) (undo-tree-id11305 . -10) (undo-tree-id11306 . -10) (undo-tree-id11307 . -5) (undo-tree-id11308 . -12) (undo-tree-id11309 . -11) (undo-tree-id11310 . -3) (undo-tree-id11311 . -3) (undo-tree-id11312 . -3) (undo-tree-id11313 . -3) (undo-tree-id11314 . -3) (undo-tree-id11315 . -3) (undo-tree-id11316 . -3) (undo-tree-id11317 . -3) (undo-tree-id11318 . -8) (undo-tree-id11319 . -8) (undo-tree-id11320 . -8) (undo-tree-id11321 . -8) (undo-tree-id11322 . -8) (undo-tree-id11323 . -8) (undo-tree-id11324 . -8) (undo-tree-id11325 . -8) (undo-tree-id11326 . -11) (undo-tree-id11327 . -11) (undo-tree-id11328 . -11) (undo-tree-id11329 . -11) (undo-tree-id11330 . -11) (undo-tree-id11331 . -11) (undo-tree-id11332 . -11) (undo-tree-id11333 . -11) (undo-tree-id11334 . -11) (undo-tree-id11335 . -12) (undo-tree-id11336 . -12) (undo-tree-id11337 . -12) 26830 (t 25755 9570 567867 485000)) nil (25755 9600 606134 603000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 26816) (undo-tree-id10835 . 1) (undo-tree-id10836 . 1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1)) nil (25755 9600 605281 35000) 0 nil])
([nil nil ((27120 . 27121) (t 25755 9600 622872 233000) 27119) nil (25755 9605 751299 606000) 0 nil])
([nil nil ((27125 . 27126) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27125) (undo-tree-id11338 . -1) (t 25755 9605 763413 158000)) nil (25755 9615 86788 830000) 0 nil])
([nil nil ((#("Let's apply this preprocessing function to all three datasets, shuffle the
" 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27122) (undo-tree-id11411 . -74) (undo-tree-id11412 . -3) (undo-tree-id11413 . -6) (undo-tree-id11414 . -3) (undo-tree-id11415 . -3) (undo-tree-id11416 . -3) (undo-tree-id11417 . -3) (undo-tree-id11418 . -3) (undo-tree-id11419 . -3) (undo-tree-id11420 . -3) (undo-tree-id11421 . -3) (undo-tree-id11422 . -3) (undo-tree-id11423 . -3) (undo-tree-id11424 . -3) (undo-tree-id11425 . -6) (undo-tree-id11426 . -6) (undo-tree-id11427 . -6) (undo-tree-id11428 . -6) (undo-tree-id11429 . -6) (undo-tree-id11430 . -6) (undo-tree-id11431 . -6) (undo-tree-id11432 . -6) (undo-tree-id11433 . -6) (undo-tree-id11434 . -6) (undo-tree-id11435 . -6) (undo-tree-id11436 . -75) 27128 (t 25755 9615 100411 537000)) nil (25755 9667 794766 425000) 0 nil])
([nil nil ((#("training set, and add batching and prefetching to all the datasets:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27122) (undo-tree-id11388 . -67) (undo-tree-id11389 . -6) (undo-tree-id11390 . -6) (undo-tree-id11391 . -6) (undo-tree-id11392 . -6) (undo-tree-id11393 . -6) (undo-tree-id11394 . -6) (undo-tree-id11395 . -6) (undo-tree-id11396 . -6) (undo-tree-id11397 . -6) (undo-tree-id11398 . -6) (undo-tree-id11399 . -6) (undo-tree-id11400 . -6) (undo-tree-id11401 . -6) (undo-tree-id11402 . -6) (undo-tree-id11403 . -6) (undo-tree-id11404 . -6) (undo-tree-id11405 . -6) (undo-tree-id11406 . -6) (undo-tree-id11407 . -6) (undo-tree-id11408 . -6) (undo-tree-id11409 . -6) (undo-tree-id11410 . -68) 27128) nil (25755 9667 794707 459000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27390) (nil fontified nil 27389 . 27390) (nil wrap-prefix #("  " 0 2 (face org-indent)) 27389 . 27390) (27389 . 27390) 27310) nil (25755 9667 794691 614000) 0 nil])
([nil nil ((27363 . 27364) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -27363) (undo-tree-id11376 . -1) (undo-tree-id11377 . -1) (undo-tree-id11378 . -1) (undo-tree-id11379 . -1) (undo-tree-id11380 . -1) (undo-tree-id11381 . -1) (undo-tree-id11382 . -1) (undo-tree-id11383 . -1) (undo-tree-id11384 . -1) (undo-tree-id11385 . -1) (undo-tree-id11386 . -1) (undo-tree-id11387 . -1) 27364) nil (25755 9667 794689 407000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 27111) (undo-tree-id11339 . -9) (undo-tree-id11340 . -8) (undo-tree-id11341 . -10) (undo-tree-id11342 . -10) (undo-tree-id11343 . -10) (undo-tree-id11344 . -10) (undo-tree-id11345 . -10) (undo-tree-id11346 . -10) (undo-tree-id11347 . -10) (undo-tree-id11348 . -10) (undo-tree-id11349 . -10) (undo-tree-id11350 . -10) (undo-tree-id11351 . -10) (undo-tree-id11352 . -10) (undo-tree-id11353 . -10) (undo-tree-id11354 . -10) (undo-tree-id11355 . -10) (undo-tree-id11356 . -10) (undo-tree-id11357 . -8) (undo-tree-id11358 . -8) (undo-tree-id11359 . -8) (undo-tree-id11360 . -8) (undo-tree-id11361 . -8) (undo-tree-id11362 . -8) (undo-tree-id11363 . -8) (undo-tree-id11364 . -8) (undo-tree-id11365 . -8) (undo-tree-id11366 . -8) (undo-tree-id11367 . -8) (undo-tree-id11368 . -8) (undo-tree-id11369 . -8) (undo-tree-id11370 . -8) (undo-tree-id11371 . -8) (undo-tree-id11372 . -8) (undo-tree-id11373 . -8) (undo-tree-id11374 . -8) (undo-tree-id11375 . -10) 27119) nil (25755 9667 794678 27000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27353 . 27354) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -27363) (27353 . 27364) 27300) nil (25755 9667 794641 878000) 0 nil])
([nil nil ((#("prefetch(1)If you want to
" 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 26 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 27364) (undo-tree-id11489 . -25) (undo-tree-id11490 . 26) (undo-tree-id11491 . 26) (undo-tree-id11492 . 26) (undo-tree-id11493 . -8) (undo-tree-id11494 . -26) (t 25755 9667 859493 45000)) nil (25755 9681 341614 508000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27353 . 27354) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -27379) (27353 . 27380) 27300) nil (25755 9681 341609 334000) 0 nil])
([nil nil ((27353 . 27354) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -27353) (undo-tree-id11470 . -1) (undo-tree-id11471 . -1) (undo-tree-id11472 . -1) (undo-tree-id11473 . -1) (undo-tree-id11474 . -1) (undo-tree-id11475 . -1) (undo-tree-id11476 . -1) (undo-tree-id11477 . -1) (undo-tree-id11478 . -1) (undo-tree-id11479 . -1) (undo-tree-id11480 . -1) (undo-tree-id11481 . -1) (undo-tree-id11482 . -1) (undo-tree-id11483 . -1) (undo-tree-id11484 . -1) (undo-tree-id11485 . -1) (undo-tree-id11486 . -1) (undo-tree-id11487 . -1) (undo-tree-id11488 . -1) 27300) nil (25755 9681 341607 354000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 27353) (undo-tree-id11468 . -1) (undo-tree-id11469 . -1)) nil (25755 9681 341593 856000) 0 nil])
([nil nil ((27353 . 27354)) nil (25755 9681 341589 769000) 0 nil])
([nil nil ((27365 . 27366)) nil (25755 9681 341588 998000) 0 nil])
([nil nil ((#("If you want to
" 0 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 27366) (undo-tree-id11437 . -14) (undo-tree-id11438 . -14) (undo-tree-id11439 . 15) (undo-tree-id11440 . -15) (undo-tree-id11441 . -15) (undo-tree-id11442 . -15) (undo-tree-id11443 . -15) (undo-tree-id11444 . -15) (undo-tree-id11445 . -15) (undo-tree-id11446 . -15) (undo-tree-id11447 . -15) (undo-tree-id11448 . -15) (undo-tree-id11449 . -15) (undo-tree-id11450 . -15) (undo-tree-id11451 . -15) (undo-tree-id11452 . -15) (undo-tree-id11453 . -15) (undo-tree-id11454 . -15) (undo-tree-id11455 . -15) (undo-tree-id11456 . -15) (undo-tree-id11457 . -15) (undo-tree-id11458 . -15) (undo-tree-id11459 . -15) (undo-tree-id11460 . -15) (undo-tree-id11461 . -15) (undo-tree-id11462 . -15) (undo-tree-id11463 . -15) (undo-tree-id11464 . -15) (undo-tree-id11465 . -15) (undo-tree-id11466 . -15) (undo-tree-id11467 . -15)) nil (25755 9681 341586 640000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27375 . 27376) (#("
" 0 1 (rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -27390) (27375 . 27391) 27366) nil (25755 9681 341551 570000) 0 nil])
([nil nil ((#("If you want" 0 3 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3 11 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27376) (undo-tree-id11513 . -10) (undo-tree-id11514 . -10) (undo-tree-id11515 . -10) (undo-tree-id11516 . -10) (undo-tree-id11517 . -11) (undo-tree-id11518 . -10) (undo-tree-id11519 . -1) (undo-tree-id11520 . -1) (undo-tree-id11521 . -1) (undo-tree-id11522 . -1) (undo-tree-id11523 . -1) (undo-tree-id11524 . -1) (undo-tree-id11525 . -1) (undo-tree-id11526 . -1) (undo-tree-id11527 . -5) (undo-tree-id11528 . -5) (undo-tree-id11529 . -5) (undo-tree-id11530 . -5) (undo-tree-id11531 . -5) (undo-tree-id11532 . -5) (undo-tree-id11533 . -5) (undo-tree-id11534 . -5) (undo-tree-id11535 . -10) (undo-tree-id11536 . -10) (undo-tree-id11537 . -10) (undo-tree-id11538 . -10) (undo-tree-id11539 . -10) (undo-tree-id11540 . -10) (undo-tree-id11541 . -10) (undo-tree-id11542 . -10) (undo-tree-id11543 . -10) (undo-tree-id11544 . -11) 27386 (t 25755 9681 360445 883000)) nil (25755 9713 904274 720000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 27376) (undo-tree-id11510 . 1) (undo-tree-id11511 . -1) (undo-tree-id11512 . -1)) nil (25755 9713 904247 98000) 0 nil])
([nil nil ((27378 . 27379) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -27378) (undo-tree-id11509 . -1) 27376) nil (25755 9713 904241 353000) 0 nil])
([nil nil ((#("For example, use tf.image.random_crop() to randomly" 0 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 33 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 37 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27526) (undo-tree-id11506 . -50) (undo-tree-id11507 . -51) (undo-tree-id11508 . -51)) nil (25755 9713 904239 513000) 0 nil])
([nil nil ((#("crop the images, use tf.image.random_flip_left_right() to randomly" 0 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 36 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 37 41 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 41 42 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 42 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 46 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 47 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 52 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27527) (undo-tree-id11503 . -65) (undo-tree-id11504 . -66) (undo-tree-id11505 . -66)) nil (25755 9713 904236 93000) 0 nil])
([nil nil ((#("flip the images horizontally, and so on (see the “Pretrained Models for
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27528) (undo-tree-id11498 . -71) (undo-tree-id11499 . 22) (undo-tree-id11500 . -60) (undo-tree-id11501 . -58) (undo-tree-id11502 . -72)) nil (25755 9713 904232 455000) 0 nil])
([nil nil ((#("Transfer Learning” section of the notebook for an example).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 58 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27528) (undo-tree-id11495 . -59) (undo-tree-id11496 . -58) (undo-tree-id11497 . -60)) nil (25755 9713 904224 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30733 . 30734) (nil fontified nil 30717 . 30734) (nil fontified nil 30645 . 30717) (nil fontified nil 30496 . 30645) (nil fontified nil 30423 . 30496) (nil fontified nil 30398 . 30423) (nil fontified nil 30379 . 30398) (nil fontified nil 30310 . 30379) (nil fontified nil 30287 . 30310) (nil fontified nil 30255 . 30287) (nil fontified nil 30235 . 30255) (nil fontified nil 30169 . 30235) (nil fontified nil 30097 . 30169) (nil fontified nil 30020 . 30097) (nil fontified nil 29944 . 30020) (nil fontified nil 29874 . 29944) (nil fontified nil 29800 . 29874) (nil fontified nil 29745 . 29800) (nil fontified nil 29669 . 29745) (nil fontified nil 29587 . 29669) (nil fontified nil 29579 . 29587) (nil fontified nil 29511 . 29579) (nil fontified nil 29489 . 29511) (nil fontified nil 29468 . 29489) (nil fontified nil 29414 . 29468) (nil fontified nil 29347 . 29414) (nil fontified nil 29293 . 29347) (nil fontified nil 29221 . 29293) (nil fontified nil 29139 . 29221) (nil fontified nil 29111 . 29139) (nil fontified nil 29079 . 29111) (nil fontified nil 29014 . 29079) (nil fontified nil 28939 . 29014) (nil fontified nil 28878 . 28939) (nil fontified nil 28812 . 28878) (nil fontified nil 28749 . 28812) (nil fontified nil 28730 . 28749) (nil fontified nil 28660 . 28730) (nil fontified nil 28603 . 28660) (nil fontified nil 28527 . 28603) (nil fontified nil 28454 . 28527) (nil fontified nil 28381 . 28454) (nil fontified nil 28310 . 28381) (nil fontified nil 28240 . 28310) (nil fontified nil 28175 . 28240) (nil fontified nil 28090 . 28175) (nil fontified nil 28012 . 28090) (nil fontified nil 27930 . 28012) (nil fontified nil 27849 . 27930) (nil fontified nil 27764 . 27849) (nil fontified nil 27682 . 27764) (nil fontified nil 27600 . 27682) (nil fontified nil 27528 . 27600) (27528 . 30734) (t 25755 9713 923287 376000)) nil (25755 9733 265873 664000) 0 nil])
([nil nil ((30734 . 30735)) nil (25755 9733 265862 472000) 0 nil])
([nil nil ((27375 . 27376) (t 25755 9733 281108 14000) 27374) nil (25755 9747 945697 818000) 0 nil])
([nil nil ((27377 . 27378) (#("t" 0 1 (font-lock-fontified t src-block t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27377) (undo-tree-id11549 . 1) (undo-tree-id11550 . -1) (t 25755 9747 965263 160000)) nil (25755 9789 947703 407000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27676) (nil fontified nil 27675 . 27676) (nil wrap-prefix #("  " 0 2 (face org-indent)) 27675 . 27676) (27675 . 27676) 27612) nil (25755 9789 947700 856000) 0 nil])
([nil nil ((27682 . 27683) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -27682) (undo-tree-id11547 . 1) (undo-tree-id11548 . -1) 27676) nil (25755 9789 947699 417000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27755) (nil fontified nil 27754 . 27755) (nil wrap-prefix #("  " 0 2 (face org-indent)) 27754 . 27755) (27754 . 27755) 27682) nil (25755 9789 947696 782000) 0 nil])
([nil nil ((27764 . 27765) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -27764) (undo-tree-id11545 . 1) (undo-tree-id11546 . -1) 27755) nil (25755 9789 947695 13000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27833) (nil fontified nil 27832 . 27833) (nil wrap-prefix #("  " 0 2 (face org-indent)) 27832 . 27833) (27832 . 27833) 27764) nil (25755 9789 947682 0) 0 nil])
([nil nil ((27849 . 27850) 27833) nil (25755 9789 947676 361000) 0 nil])
([nil nil ((#("The keras.preprocessing.image.ImageDataGenerator class makes it easy to
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11755 . -71) (undo-tree-id11756 . -72) (undo-tree-id11757 . -72) (undo-tree-id11758 . -72) (undo-tree-id11759 . -72) (undo-tree-id11760 . -72) (undo-tree-id11761 . -72) (undo-tree-id11762 . -72) (undo-tree-id11763 . -72) (undo-tree-id11764 . 68) (undo-tree-id11765 . -9) (undo-tree-id11766 . -4) (undo-tree-id11767 . -4) (undo-tree-id11768 . -4) (undo-tree-id11769 . -4) (undo-tree-id11770 . -4) (undo-tree-id11771 . -4) (undo-tree-id11772 . -4) (undo-tree-id11773 . -4) (undo-tree-id11774 . -9) (undo-tree-id11775 . 62) (undo-tree-id11776 . -23) (undo-tree-id11777 . -10) (undo-tree-id11778 . -10) (undo-tree-id11779 . -10) (undo-tree-id11780 . -10) (undo-tree-id11781 . -10) (undo-tree-id11782 . -10) (undo-tree-id11783 . -10) (undo-tree-id11784 . -10) (undo-tree-id11785 . -23) (undo-tree-id11786 . -24) (undo-tree-id11787 . -29) (undo-tree-id11788 . 42) (undo-tree-id11789 . -48) (undo-tree-id11790 . -30) (undo-tree-id11791 . -30) (undo-tree-id11792 . -30) (undo-tree-id11793 . -30) (undo-tree-id11794 . -30) (undo-tree-id11795 . -30) (undo-tree-id11796 . -30) (undo-tree-id11797 . -30) (undo-tree-id11798 . -49) (undo-tree-id11799 . -55) (undo-tree-id11800 . -61) (undo-tree-id11801 . -64) (undo-tree-id11802 . -69) (undo-tree-id11803 . -72) (undo-tree-id11804 . -72) (undo-tree-id11805 . -72) (undo-tree-id11806 . -72) (undo-tree-id11807 . -72) (undo-tree-id11808 . -72) (undo-tree-id11809 . -72) (undo-tree-id11810 . -72) (undo-tree-id11811 . -50) (undo-tree-id11812 . -50) (undo-tree-id11813 . -50) (undo-tree-id11814 . -50) (undo-tree-id11815 . -50) (undo-tree-id11816 . -50) (undo-tree-id11817 . -50) (undo-tree-id11818 . -50) (undo-tree-id11819 . -72) (t 25755 9789 968129 79000)) nil (25755 9839 123365 410000) 0 nil])
([nil nil ((#("load images from disk and augment them in various ways: you can shift each
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 11 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 75 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 27529) (undo-tree-id11714 . -74) (undo-tree-id11715 . -11) (undo-tree-id11716 . -75) (undo-tree-id11717 . -75) (undo-tree-id11718 . -75) (undo-tree-id11719 . -75) (undo-tree-id11720 . -75) (undo-tree-id11721 . -75) (undo-tree-id11722 . -75) (undo-tree-id11723 . -75) (undo-tree-id11724 . -5) (undo-tree-id11725 . -12) (undo-tree-id11726 . -17) (undo-tree-id11727 . -22) (undo-tree-id11728 . -26) (undo-tree-id11729 . -34) (undo-tree-id11730 . -39) (undo-tree-id11731 . -42) (undo-tree-id11732 . -50) (undo-tree-id11733 . -54) (undo-tree-id11734 . -56) (undo-tree-id11735 . -60) (undo-tree-id11736 . -64) (undo-tree-id11737 . -70) (undo-tree-id11738 . -75) (undo-tree-id11739 . -75) (undo-tree-id11740 . -75) (undo-tree-id11741 . -75) (undo-tree-id11742 . -75) (undo-tree-id11743 . -75) (undo-tree-id11744 . -75) (undo-tree-id11745 . -75) (undo-tree-id11746 . -50) (undo-tree-id11747 . -50) (undo-tree-id11748 . -50) (undo-tree-id11749 . -50) (undo-tree-id11750 . -50) (undo-tree-id11751 . -50) (undo-tree-id11752 . -50) (undo-tree-id11753 . -50) (undo-tree-id11754 . -75)) nil (25755 9839 123326 124000) 0 nil])
([nil nil ((#("image, rotate it, rescale it, flip it horizontally or vertically, shear it, or
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 27529) (undo-tree-id11661 . -78) (undo-tree-id11662 . 72) (undo-tree-id11663 . -79) (undo-tree-id11664 . -79) (undo-tree-id11665 . -79) (undo-tree-id11666 . -79) (undo-tree-id11667 . -79) (undo-tree-id11668 . -79) (undo-tree-id11669 . -79) (undo-tree-id11670 . -79) (undo-tree-id11671 . -5) (undo-tree-id11672 . -7) (undo-tree-id11673 . -14) (undo-tree-id11674 . -16) (undo-tree-id11675 . 61) (undo-tree-id11676 . -25) (undo-tree-id11677 . -18) (undo-tree-id11678 . -18) (undo-tree-id11679 . -18) (undo-tree-id11680 . -18) (undo-tree-id11681 . -18) (undo-tree-id11682 . -18) (undo-tree-id11683 . -18) (undo-tree-id11684 . -18) (undo-tree-id11685 . -26) (undo-tree-id11686 . -28) (undo-tree-id11687 . -30) (undo-tree-id11688 . -35) (undo-tree-id11689 . -38) (undo-tree-id11690 . -51) (undo-tree-id11691 . -54) (undo-tree-id11692 . -64) (undo-tree-id11693 . -66) (undo-tree-id11694 . -72) (undo-tree-id11695 . -74) (undo-tree-id11696 . -76) (undo-tree-id11697 . -79) (undo-tree-id11698 . -79) (undo-tree-id11699 . -79) (undo-tree-id11700 . -79) (undo-tree-id11701 . -79) (undo-tree-id11702 . -79) (undo-tree-id11703 . -79) (undo-tree-id11704 . -79) (undo-tree-id11705 . -50) (undo-tree-id11706 . -50) (undo-tree-id11707 . -50) (undo-tree-id11708 . -50) (undo-tree-id11709 . -50) (undo-tree-id11710 . -50) (undo-tree-id11711 . -50) (undo-tree-id11712 . -50) (undo-tree-id11713 . -79)) nil (25755 9839 123283 35000) 0 nil])
([nil nil ((#("apply any transformation function you want to it. This is very convenient for
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 10 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 77 78 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 27529) (undo-tree-id11587 . -77) (undo-tree-id11588 . 78) (undo-tree-id11589 . 68) (undo-tree-id11590 . -78) (undo-tree-id11591 . -78) (undo-tree-id11592 . -78) (undo-tree-id11593 . -78) (undo-tree-id11594 . -78) (undo-tree-id11595 . -78) (undo-tree-id11596 . -78) (undo-tree-id11597 . -78) (undo-tree-id11598 . -6) (undo-tree-id11599 . -10) (undo-tree-id11600 . -25) (undo-tree-id11601 . -34) (undo-tree-id11602 . -38) (undo-tree-id11603 . -43) (undo-tree-id11604 . -46) (undo-tree-id11605 . -48) (undo-tree-id11606 . -50) (undo-tree-id11607 . -50) (undo-tree-id11608 . -50) (undo-tree-id11609 . -50) (undo-tree-id11610 . -50) (undo-tree-id11611 . -50) (undo-tree-id11612 . -50) (undo-tree-id11613 . -50) (undo-tree-id11614 . -50) (undo-tree-id11615 . -50) (undo-tree-id11616 . -50) (undo-tree-id11617 . -50) (undo-tree-id11618 . -50) (undo-tree-id11619 . -50) (undo-tree-id11620 . -50) (undo-tree-id11621 . -50) (undo-tree-id11622 . -50) (undo-tree-id11623 . -50) (undo-tree-id11624 . -50) (undo-tree-id11625 . -50) (undo-tree-id11626 . -50) (undo-tree-id11627 . -50) (undo-tree-id11628 . -50) (undo-tree-id11629 . -50) (undo-tree-id11630 . -50) (undo-tree-id11631 . -50) (undo-tree-id11632 . -50) (undo-tree-id11633 . -50) (undo-tree-id11634 . -50) (undo-tree-id11635 . -50) (undo-tree-id11636 . -50) (undo-tree-id11637 . -50) (undo-tree-id11638 . -50) (undo-tree-id11639 . -50) (undo-tree-id11640 . -50) (undo-tree-id11641 . -50) (undo-tree-id11642 . -50) (undo-tree-id11643 . -50) (undo-tree-id11644 . -50) (undo-tree-id11645 . -50) (undo-tree-id11646 . -50) (undo-tree-id11647 . -50) (undo-tree-id11648 . -50) (undo-tree-id11649 . -50) (undo-tree-id11650 . -50) (undo-tree-id11651 . -50) (undo-tree-id11652 . -50) (undo-tree-id11653 . -50) (undo-tree-id11654 . -50) (undo-tree-id11655 . -50) (undo-tree-id11656 . -50) (undo-tree-id11657 . -50) (undo-tree-id11658 . -50) (undo-tree-id11659 . -50) (undo-tree-id11660 . -78)) nil (25755 9839 123249 797000) 0 nil])
([nil nil ((#("simple projects.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27529) (undo-tree-id11565 . -16) (undo-tree-id11566 . 17) (undo-tree-id11567 . 17) (undo-tree-id11568 . -17) (undo-tree-id11569 . -17) (undo-tree-id11570 . -17) (undo-tree-id11571 . -17) (undo-tree-id11572 . -17) (undo-tree-id11573 . -17) (undo-tree-id11574 . -17) (undo-tree-id11575 . -17) (undo-tree-id11576 . -17) (undo-tree-id11577 . -17) (undo-tree-id11578 . -17) (undo-tree-id11579 . -17) (undo-tree-id11580 . -17) (undo-tree-id11581 . -17) (undo-tree-id11582 . -17) (undo-tree-id11583 . -17) (undo-tree-id11584 . -17) (undo-tree-id11585 . -17) (undo-tree-id11586 . -17)) nil (25755 9839 123201 696000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11561 . 1) (undo-tree-id11562 . 1) (undo-tree-id11563 . 1) (undo-tree-id11564 . -1)) nil (25755 9839 122979 917000) 0 nil])
([nil nil ((#("However, building a tf.data pipeline has many advantages: it can read the images
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11556 . -80) (undo-tree-id11557 . 81) (undo-tree-id11558 . 81) (undo-tree-id11559 . 81) (undo-tree-id11560 . -81)) nil (25755 9839 123748 666000) 0 nil])
([nil nil ((#("efficiently (e.g., in parallel) from any source, not just the local disk; you can
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11835 . -81) (undo-tree-id11836 . 82) (undo-tree-id11837 . 82) (undo-tree-id11838 . 82) (undo-tree-id11839 . -82)) nil (25755 9870 766209 831000) 0 nil] [nil nil ((#("efficiently (e.g., in parallel) from any source, not just the local disk; you can
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11551 . -81) (undo-tree-id11552 . 82) (undo-tree-id11553 . 82) (undo-tree-id11554 . 82) (undo-tree-id11555 . -82)) ((27529 . 27611)) (25755 9839 122968 944000) 0 nil])
([nil nil ((#("manipulate the Dataset as you wish; and if you write a preprocessing function
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11830 . -77) (undo-tree-id11831 . 78) (undo-tree-id11832 . 78) (undo-tree-id11833 . 78) (undo-tree-id11834 . -78)) nil (25755 9870 766205 671000) 0 nil])
nil
([nil nil ((#("based on tf.image operations, this function can be used both in the tf.data pipeline
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11825 . -84) (undo-tree-id11826 . 85) (undo-tree-id11827 . 85) (undo-tree-id11828 . 85) (undo-tree-id11829 . -85)) nil (25755 9870 766200 737000) 0 nil])
([nil nil ((#("and in the model you will deploy to production (see Chapter 19).
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27529) (undo-tree-id11820 . -64) (undo-tree-id11821 . 65) (undo-tree-id11822 . 65) (undo-tree-id11823 . 65) (undo-tree-id11824 . -65)) nil (25755 9870 766191 536000) 0 nil])
([nil nil ((27588 . 27589) (t 25755 9870 830033 335000)) nil (25755 9920 84642 857000) 0 nil])
([nil nil ((27599 . 27600) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -27599) (undo-tree-id11883 . -1) 27589) nil (25755 9920 84641 834000) 0 nil])
([nil nil ((#("We exclude the top of the network by setting include_top=False: this excludes the
" 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 10 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 11 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 53 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 56 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27589) (undo-tree-id11861 . -81) (undo-tree-id11862 . 82) (undo-tree-id11863 . -10) (undo-tree-id11864 . -10) (undo-tree-id11865 . -10) (undo-tree-id11866 . -10) (undo-tree-id11867 . -10) (undo-tree-id11868 . -10) (undo-tree-id11869 . -10) (undo-tree-id11870 . -10) (undo-tree-id11871 . -10) (undo-tree-id11872 . -10) (undo-tree-id11873 . -10) (undo-tree-id11874 . -10) (undo-tree-id11875 . -10) (undo-tree-id11876 . -10) (undo-tree-id11877 . -10) (undo-tree-id11878 . -10) (undo-tree-id11879 . -10) (undo-tree-id11880 . -10) (undo-tree-id11881 . -10) (undo-tree-id11882 . -82) 27599) nil (25755 9920 84639 546000) 0 nil])
([nil nil ((#("global average pooling layer and the dense output layer" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27589) (undo-tree-id11847 . -54) (undo-tree-id11848 . 55) (undo-tree-id11849 . -10) (undo-tree-id11850 . -10) (undo-tree-id11851 . -10) (undo-tree-id11852 . -10) (undo-tree-id11853 . -10) (undo-tree-id11854 . -10) (undo-tree-id11855 . -10) (undo-tree-id11856 . -10) (undo-tree-id11857 . -10) (undo-tree-id11858 . -10) (undo-tree-id11859 . -7) (undo-tree-id11860 . -55)) nil (25755 9920 84623 614000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 27589) (undo-tree-id11844 . 1) (undo-tree-id11845 . -1) (undo-tree-id11846 . -1)) nil (25755 9920 84613 659000) 0 nil])
([nil nil ((27605 . 27606) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27605) (undo-tree-id11843 . -1) 27589) nil (25755 9920 84610 847000) 0 nil])
([nil nil ((27667 . 27668) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27667) (nil fontified nil 27666 . 27667) (nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) 27666 . 27667) (27666 . 27667) 27640) nil (25755 9920 84608 885000) 0 nil])
([nil nil ((27679 . 27680) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27679) (undo-tree-id11841 . 1) (undo-tree-id11842 . -1) 27668) nil (25755 9920 84607 420000) 0 nil])
([nil nil ((27755 . 27756) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27755) (undo-tree-id11840 . -1) 27731) nil (25755 9920 84603 674000) 0 nil])
([nil nil ((27748 . 27749) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -27748) (nil fontified nil 27747 . 27748) (nil wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) 27747 . 27748) (27747 . 27748) 27755) nil (25755 9920 84591 405000) 0 nil])
([nil nil ((27529 . 27530)) nil (25755 9920 84585 831000) 0 nil])
([nil nil ((27682 . 27683) (27681 . 27682) (t 25755 9920 103699 352000)) nil (25755 9945 446843 133000) 0 nil])
([nil nil ((27782 . 27784) (27781 . 27782)) nil (25755 9945 446838 354000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 27834 27834 nil nil nil nil #s(yas--exit 27854 nil))) #s(yas--exit 27854 nil) 11 nil #s(yas--field 1 27834 27834 nil nil nil nil #s(yas--exit 27854 nil)) nil nil)) (27856 . 27858) (27822 . 27865) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27822) (undo-tree-id12148 . -1) (undo-tree-id12149 . -2) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -1) (undo-tree-id12162 . -1) (undo-tree-id12163 . -1) (undo-tree-id12164 . -1) (undo-tree-id12165 . -1) (undo-tree-id12166 . -1) (undo-tree-id12167 . -1) (undo-tree-id12168 . -1) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1) (undo-tree-id12181 . -1) (undo-tree-id12182 . -1) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -2) (undo-tree-id12189 . -2) (undo-tree-id12190 . -2) (undo-tree-id12191 . -2) (undo-tree-id12192 . -2) (undo-tree-id12193 . -2) (undo-tree-id12194 . -2) (undo-tree-id12195 . -2) (undo-tree-id12196 . -2) (undo-tree-id12197 . -2) (undo-tree-id12198 . -2) 27824 (27822 . 27824) (27819 . 27822) (t 25755 9945 468434 146000) 27783) nil (25755 9973 33290 869000) 0 nil])
([nil nil ((apply yas--snippet-revive 27822 27867 #s(yas--snippet nil (#s(yas--field 1 27834 27834 nil nil nil nil #s(yas--exit 27854 nil))) #s(yas--exit 27854 nil) 11 nil #s(yas--field 1 27834 27834 nil nil nil nil #s(yas--exit 27854 nil)) nil nil))) nil (25755 9973 33261 703000) 0 nil])
([nil nil ((#("  #+end_src
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 2 11 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 11 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t face org-block-end-line)) . 27856) (undo-tree-id12118 . -11) (undo-tree-id12119 . -10) (undo-tree-id12120 . -11) (undo-tree-id12121 . -11) (undo-tree-id12122 . -11) (undo-tree-id12123 . -11) (undo-tree-id12124 . -11) (undo-tree-id12125 . -11) (undo-tree-id12126 . -11) (undo-tree-id12127 . -11) (undo-tree-id12128 . -11) (undo-tree-id12129 . -10) (undo-tree-id12130 . -10) (undo-tree-id12131 . -10) (undo-tree-id12132 . -10) (undo-tree-id12133 . -10) (undo-tree-id12134 . -10) (undo-tree-id12135 . -10) (undo-tree-id12136 . -10) (undo-tree-id12137 . -10) (undo-tree-id12138 . -10) (undo-tree-id12139 . -10) (undo-tree-id12140 . -10) (undo-tree-id12141 . -10) (undo-tree-id12142 . -10) (undo-tree-id12143 . -10) (undo-tree-id12144 . -10) (undo-tree-id12145 . -10) (undo-tree-id12146 . -10) (undo-tree-id12147 . -12) 27866) nil (25755 9973 33260 36000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28136 . 28137) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28146) (28134 . 28147) 28082) nil (25755 9973 33242 727000) 0 nil])
([nil nil ((27833 . 27840)) nil (25755 9973 33241 588000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 27821) (undo-tree-id12048 . -1) (undo-tree-id12049 . -1) (undo-tree-id12050 . -1) (undo-tree-id12051 . -1) (undo-tree-id12052 . -1) (undo-tree-id12053 . -1) (undo-tree-id12054 . -1) (undo-tree-id12055 . -1) (undo-tree-id12056 . -1) (undo-tree-id12057 . -1) (undo-tree-id12058 . -1) (undo-tree-id12059 . -1) (undo-tree-id12060 . -1) (undo-tree-id12061 . -1) (undo-tree-id12062 . -1) (undo-tree-id12063 . -1) (undo-tree-id12064 . -1) (undo-tree-id12065 . -1) (undo-tree-id12066 . -1) (undo-tree-id12067 . -1) (undo-tree-id12068 . -1) (undo-tree-id12069 . -1) (undo-tree-id12070 . -1) (undo-tree-id12071 . -1) (undo-tree-id12072 . -1) (undo-tree-id12073 . -1) (undo-tree-id12074 . -1) (undo-tree-id12075 . -1) (undo-tree-id12076 . -1) (undo-tree-id12077 . -1) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -1) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1) (undo-tree-id12100 . -1) (undo-tree-id12101 . -1) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) (undo-tree-id12106 . -1) (undo-tree-id12107 . -1) (undo-tree-id12108 . -1) (undo-tree-id12109 . -1) (undo-tree-id12110 . -1) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1)) nil (25755 9973 33238 157000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 27820) (undo-tree-id11968 . -1) (undo-tree-id11969 . -1) (undo-tree-id11970 . -1) (undo-tree-id11971 . -1) (undo-tree-id11972 . -1) (undo-tree-id11973 . -1) (undo-tree-id11974 . -1) (undo-tree-id11975 . -1) (undo-tree-id11976 . -1) (undo-tree-id11977 . -1) (undo-tree-id11978 . -1) (undo-tree-id11979 . -1) (undo-tree-id11980 . -1) (undo-tree-id11981 . -1) (undo-tree-id11982 . -1) (undo-tree-id11983 . -1) (undo-tree-id11984 . -1) (undo-tree-id11985 . -1) (undo-tree-id11986 . -1) (undo-tree-id11987 . -1) (undo-tree-id11988 . -1) (undo-tree-id11989 . -1) (undo-tree-id11990 . -1) (undo-tree-id11991 . -1) (undo-tree-id11992 . -1) (undo-tree-id11993 . -1) (undo-tree-id11994 . -1) (undo-tree-id11995 . -1) (undo-tree-id11996 . -1) (undo-tree-id11997 . -1) (undo-tree-id11998 . -1) (undo-tree-id11999 . -1) (undo-tree-id12000 . -1) (undo-tree-id12001 . -1) (undo-tree-id12002 . -1) (undo-tree-id12003 . -1) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1) (undo-tree-id12006 . -1) (undo-tree-id12007 . -1) (undo-tree-id12008 . -1) (undo-tree-id12009 . -1) (undo-tree-id12010 . -1) (undo-tree-id12011 . -1) (undo-tree-id12012 . -1) (undo-tree-id12013 . -1) (undo-tree-id12014 . -1) (undo-tree-id12015 . -1) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (undo-tree-id12018 . -1) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) (undo-tree-id12027 . -1) (undo-tree-id12028 . -1) (undo-tree-id12029 . -1) (undo-tree-id12030 . -1) (undo-tree-id12031 . -1) (undo-tree-id12032 . -1) (undo-tree-id12033 . -1) (undo-tree-id12034 . -1) (undo-tree-id12035 . -1) (undo-tree-id12036 . -1) (undo-tree-id12037 . -1) (undo-tree-id12038 . -1) (undo-tree-id12039 . -1) (undo-tree-id12040 . -1) (undo-tree-id12041 . -1) (undo-tree-id12042 . -1) (undo-tree-id12043 . -1) (undo-tree-id12044 . -1) (undo-tree-id12045 . -1) (undo-tree-id12046 . -1) (undo-tree-id12047 . -1)) nil (25755 9973 32991 696000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 27856) (undo-tree-id11967 . -1)) nil (25755 9973 32944 586000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 27856) (undo-tree-id11932 . -2) (undo-tree-id11933 . -1) (undo-tree-id11934 . -1) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (undo-tree-id11940 . -1) (undo-tree-id11941 . -3) (undo-tree-id11942 . -3) (undo-tree-id11943 . -3) (undo-tree-id11944 . -3) (undo-tree-id11945 . -3) (undo-tree-id11946 . -3) (undo-tree-id11947 . -3) (undo-tree-id11948 . -3) (undo-tree-id11949 . -3) (undo-tree-id11950 . -3) (undo-tree-id11951 . -3) (undo-tree-id11952 . -3) (undo-tree-id11953 . -3) (undo-tree-id11954 . -3) (undo-tree-id11955 . -3) (undo-tree-id11956 . -3) (undo-tree-id11957 . -1) (undo-tree-id11958 . -1) (undo-tree-id11959 . -1) (undo-tree-id11960 . -1) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (undo-tree-id11963 . -1) (undo-tree-id11964 . -1) (undo-tree-id11965 . -2) (undo-tree-id11966 . -3)) nil (25755 9973 32942 209000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 27856) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) (undo-tree-id11907 . -1) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1) (undo-tree-id11913 . -1) (undo-tree-id11914 . -1) (undo-tree-id11915 . -1) (undo-tree-id11916 . -1) (undo-tree-id11917 . -1) (undo-tree-id11918 . -1) (undo-tree-id11919 . -1) (undo-tree-id11920 . -1) (undo-tree-id11921 . -1) (undo-tree-id11922 . -1) (undo-tree-id11923 . -1) (undo-tree-id11924 . -1) (undo-tree-id11925 . -1) (undo-tree-id11926 . -1) (undo-tree-id11927 . -1) (undo-tree-id11928 . -1) (undo-tree-id11929 . -1) (undo-tree-id11930 . -1) (undo-tree-id11931 . -1)) nil (25755 9973 32917 229000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-multiline t face org-block-end-line)) . 28135) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1)) nil (25755 9973 32898 841000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) rear-nonsticky t font-lock-multiline t face org-block-end-line)) . 28135) (undo-tree-id11884 . -1) (undo-tree-id11885 . -1) (undo-tree-id11886 . -1) (undo-tree-id11887 . -1) (undo-tree-id11888 . -1) (undo-tree-id11889 . -1) (undo-tree-id11890 . -1) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1)) nil (25755 9973 32891 796000) 0 nil])
([nil nil ((28144 . 28145) (t 25755 9973 49440 943000) 28135) nil (25755 10016 137869 549000) 0 nil])
([nil nil ((#("As explained in Chapter 11, it’s usually a good idea to freeze the weights
" 0 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28146) (undo-tree-id12223 . -74) (undo-tree-id12224 . -75) (undo-tree-id12225 . -75) (undo-tree-id12226 . -75) (undo-tree-id12227 . -75) (undo-tree-id12228 . -75) (undo-tree-id12229 . -75) (undo-tree-id12230 . -75) (undo-tree-id12231 . -75) (undo-tree-id12232 . -75) (undo-tree-id12233 . -75) (undo-tree-id12234 . -75) (undo-tree-id12235 . -75) (undo-tree-id12236 . -75) (undo-tree-id12237 . -75) (undo-tree-id12238 . -75) (undo-tree-id12239 . -75) (undo-tree-id12240 . -75) (t 25755 9985 407643 981000)) nil (25755 10025 833835 420000) 0 nil] [nil nil ((#("As explained in Chapter 11, it’s usually a good idea to freeze the weights
" 0 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28146) (undo-tree-id12199 . -74) (undo-tree-id12200 . -75) (undo-tree-id12201 . -75) (undo-tree-id12202 . -75) (undo-tree-id12203 . -75) (undo-tree-id12204 . -75) (undo-tree-id12205 . -75) (undo-tree-id12206 . -75) (undo-tree-id12207 . -75) (undo-tree-id12208 . -75) (undo-tree-id12209 . -75) (undo-tree-id12210 . -75) (undo-tree-id12211 . -75) (undo-tree-id12212 . -75) (undo-tree-id12213 . -75) (undo-tree-id12214 . -75) (undo-tree-id12215 . -75) (undo-tree-id12216 . -75) (t 25755 9985 407643 981000)) ((28146 . 28221)) (25755 10016 137481 398000) 0 nil])
([nil nil ((#("of the pretrained layers, at least at the beginning of training:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28146) (undo-tree-id12221 . -64) (undo-tree-id12222 . -65)) nil (25755 10029 349400 790000) 0 nil])
nil
([nil nil ((#("for layer in base_model.layers:
layer.trainable = FalseNOTE
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 18 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 24 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28146) (undo-tree-id12256 . -59) (undo-tree-id12257 . -4) (undo-tree-id12258 . -4) (undo-tree-id12259 . -4) (undo-tree-id12260 . -4) (undo-tree-id12261 . -4) (undo-tree-id12262 . -4) (undo-tree-id12263 . -4) (undo-tree-id12264 . -4) (undo-tree-id12265 . -60)) nil (25755 10039 621877 266000) 0 nil] [nil nil ((#("for layer in base_model.layers:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 18 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 24 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 30 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28146) (undo-tree-id12219 . -31) (undo-tree-id12220 . -32)) ((28146 . 28178)) (25755 10028 641455 128000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28134 . 28135) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -28194) (28134 . 28195) 28074) nil (25755 10039 621858 319000) 0 nil])
([nil nil ((#("layer.trainable = FalseNOTE
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28146) (undo-tree-id12217 . -27) (undo-tree-id12218 . -28)) ((28146 . 28174)) (25755 10028 71028 597000) 0 nil])
([nil nil ((28167 . 28171)) nil (25755 10039 621853 39000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28134 . 28135) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -28162) (28134 . 28163) 28074) ((#("
layer.trainable = FalseNOTE
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky nil font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 2 16 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t) 16 28 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 28 29 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 28134) (undo-tree-id12241 . -28) (undo-tree-id12242 . -1) (undo-tree-id12243 . -1) (undo-tree-id12244 . -1) (undo-tree-id12245 . -1) (undo-tree-id12246 . -1) (undo-tree-id12247 . -1) (undo-tree-id12248 . -1) (undo-tree-id12249 . -1) (undo-tree-id12250 . -1) (undo-tree-id12251 . -1) (undo-tree-id12252 . -1) (undo-tree-id12253 . -1) (undo-tree-id12254 . -1) (undo-tree-id12255 . -1) (28162 . 28163) (nil rear-nonsticky t 28134 . 28135) (t 25755 10025 854712 662000)) (25755 10025 833798 565000) 0 nil])
([nil nil ((#("Since our model uses the base model’s layers directly, rather than the base_model
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 76 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 81 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28210) (undo-tree-id12268 . -81) (undo-tree-id12269 . -3) (undo-tree-id12270 . -3) (undo-tree-id12271 . -3) (undo-tree-id12272 . -3) (undo-tree-id12273 . -3) (undo-tree-id12274 . -3) (undo-tree-id12275 . -3) (undo-tree-id12276 . -3) (undo-tree-id12277 . -3) (undo-tree-id12278 . -3) (undo-tree-id12279 . -3) (undo-tree-id12280 . -3) (undo-tree-id12281 . -3) (undo-tree-id12282 . -3) (undo-tree-id12283 . -3) (undo-tree-id12284 . -3) (undo-tree-id12285 . -3) (undo-tree-id12286 . -3) (undo-tree-id12287 . -3) (undo-tree-id12288 . -3) (undo-tree-id12289 . -3) (undo-tree-id12290 . -3) (undo-tree-id12291 . -3) (undo-tree-id12292 . -3) (undo-tree-id12293 . -3) (undo-tree-id12294 . -3) (undo-tree-id12295 . -3) (undo-tree-id12296 . -3) (undo-tree-id12297 . -3) (undo-tree-id12298 . -3) (undo-tree-id12299 . -3) (undo-tree-id12300 . -6) (undo-tree-id12301 . -10) (undo-tree-id12302 . -16) (undo-tree-id12303 . -21) (undo-tree-id12304 . -25) (undo-tree-id12305 . -30) (undo-tree-id12306 . -35) (undo-tree-id12307 . -36) (undo-tree-id12308 . -38) (undo-tree-id12309 . -45) (undo-tree-id12310 . -53) (undo-tree-id12311 . -55) (undo-tree-id12312 . -55) (undo-tree-id12313 . -55) (undo-tree-id12314 . -55) (undo-tree-id12315 . -55) (undo-tree-id12316 . -55) (undo-tree-id12317 . -55) (undo-tree-id12318 . -55) (undo-tree-id12319 . -82) (t 25755 10039 685087 854000)) nil (25755 10064 365053 214000) 0 nil])
nil
([nil nil ((#("object itself, setting base_model.trainable=False would have no effect.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 27 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t invisible t) 28 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 43 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28210) (undo-tree-id12266 . -71) (undo-tree-id12267 . -72)) nil (25755 10064 364836 112000) 0 nil])
([nil nil ((#("Finally, we can compile the model and start training:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28210) (undo-tree-id12424 . -53) (undo-tree-id12425 . -54) (t 25755 10064 377285 400000)) nil (25755 10072 625676 910000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (font-lock-fontified t fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-end-line) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 28199) (undo-tree-id12434 . -9) (undo-tree-id12435 . -9) (undo-tree-id12436 . -9) (undo-tree-id12437 . -10) (undo-tree-id12438 . -10) (undo-tree-id12439 . -10) (undo-tree-id12440 . -10) (undo-tree-id12441 . -10) (undo-tree-id12442 . -10) (undo-tree-id12443 . -10) (undo-tree-id12444 . -10) (undo-tree-id12445 . -10) (undo-tree-id12446 . -10) (undo-tree-id12447 . -10) (undo-tree-id12448 . -10) (undo-tree-id12449 . -10) (undo-tree-id12450 . -10) (undo-tree-id12451 . -10) (undo-tree-id12452 . -10) (undo-tree-id12453 . -10)) nil (25755 10098 269168 13000) 0 nil] [nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 28209) (undo-tree-id12320 . -1) (undo-tree-id12321 . -1) (undo-tree-id12322 . -1) (undo-tree-id12323 . -1) (undo-tree-id12324 . -1) (undo-tree-id12325 . -1) (undo-tree-id12326 . -1) (undo-tree-id12327 . -1) (undo-tree-id12328 . -1) (undo-tree-id12329 . -1) (undo-tree-id12330 . -1) (undo-tree-id12331 . -1) (undo-tree-id12332 . -1) (undo-tree-id12333 . -1) (undo-tree-id12334 . -1) (undo-tree-id12335 . -1) (undo-tree-id12336 . -1) (undo-tree-id12337 . -1) (undo-tree-id12338 . -1) (undo-tree-id12339 . -1) (undo-tree-id12340 . -1) (undo-tree-id12341 . -1) (undo-tree-id12342 . -1) (undo-tree-id12343 . -1) (undo-tree-id12344 . -1) (undo-tree-id12345 . -1) (undo-tree-id12346 . -1) (undo-tree-id12347 . -1) (undo-tree-id12348 . -1) (undo-tree-id12349 . -1) (undo-tree-id12350 . -1) (undo-tree-id12351 . -1) (undo-tree-id12352 . -1) (undo-tree-id12353 . -1) (undo-tree-id12354 . -1) (undo-tree-id12355 . -1) (undo-tree-id12356 . -1) (undo-tree-id12357 . -1) (undo-tree-id12358 . -1) (undo-tree-id12359 . -1) (undo-tree-id12360 . -1) (undo-tree-id12361 . -1) (undo-tree-id12362 . -1) (undo-tree-id12363 . -1) (undo-tree-id12364 . -1) (undo-tree-id12365 . -1) (undo-tree-id12366 . -1) (undo-tree-id12367 . -1) (undo-tree-id12368 . -1) (undo-tree-id12369 . -1) (undo-tree-id12370 . -1) (undo-tree-id12371 . -1) (undo-tree-id12372 . -1) (undo-tree-id12373 . -1) (undo-tree-id12374 . -1) (undo-tree-id12375 . -1) (undo-tree-id12376 . -1) (undo-tree-id12377 . -1) (undo-tree-id12378 . -1) (undo-tree-id12379 . -1) (undo-tree-id12380 . -1) (undo-tree-id12381 . -1) (undo-tree-id12382 . -1) (undo-tree-id12383 . -1) (undo-tree-id12384 . -1) (undo-tree-id12385 . -1) (undo-tree-id12386 . -1) (undo-tree-id12387 . -1) (undo-tree-id12388 . -1) (undo-tree-id12389 . -1) (undo-tree-id12390 . -1) (undo-tree-id12391 . -1) (undo-tree-id12392 . -1) (undo-tree-id12393 . -1) (undo-tree-id12394 . -1) (undo-tree-id12395 . -1) (undo-tree-id12396 . -1) (undo-tree-id12397 . -1) (undo-tree-id12398 . -1) (undo-tree-id12399 . -1) (undo-tree-id12400 . -1) (undo-tree-id12401 . -1) (undo-tree-id12402 . -1) (undo-tree-id12403 . -1) (undo-tree-id12404 . -1) (undo-tree-id12405 . -1) (undo-tree-id12406 . -1) (undo-tree-id12407 . -1) (undo-tree-id12408 . -1) (undo-tree-id12409 . -1) (undo-tree-id12410 . -1) (undo-tree-id12411 . -1) (undo-tree-id12412 . -1) (undo-tree-id12413 . -1) (undo-tree-id12414 . -1) (undo-tree-id12415 . -1) (undo-tree-id12416 . -1) (undo-tree-id12417 . -1) (undo-tree-id12418 . -1) (undo-tree-id12419 . -1) (undo-tree-id12420 . -1) (undo-tree-id12421 . -1) (undo-tree-id12422 . -1) (undo-tree-id12423 . -1)) ((28209 . 28210)) (25755 10071 825779 249000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28431 . 28432) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -28441) (28431 . 28442) 28364) nil (25755 10098 269142 846000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28208 . 28209) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -28209) (28208 . 28210) 28199) ((#("

" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky nil face org-block-end-line) 1 2 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 28208) (undo-tree-id12426 . -1) (undo-tree-id12427 . -1) (undo-tree-id12428 . -1) (undo-tree-id12429 . -1) (undo-tree-id12430 . -1) (undo-tree-id12431 . -1) (28209 . 28210) (nil rear-nonsticky t 28208 . 28209)) (25755 10071 825260 658000) 0 nil])
([nil nil ((#("WARNING
" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28442) (undo-tree-id12432 . -7) (undo-tree-id12433 . -8)) nil (25755 10098 269136 813000) 0 nil])
nil
([nil nil ((#("This will be very slow, unless you have a GPU. If you do not, then you should run
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 24 82 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28442) (undo-tree-id12458 . -81) (undo-tree-id12459 . -82) (t 25755 10098 286975 282000)) nil (25755 10109 219708 804000) 0 nil])
([nil nil ((#("this chapter’s notebook in Colab, using a GPU runtime (it’s free!). See the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28442) (undo-tree-id12456 . -75) (undo-tree-id12457 . -76)) nil (25755 10109 219705 893000) 0 nil])
([nil nil ((#("instructions at https://github.com/ageron/handson-ml2.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t help-echo "LINK: https://github.com/ageron/handson-ml2" htmlize-link (:uri "https://github.com/ageron/handson-ml2") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 52 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo "LINK: https://github.com/ageron/handson-ml2" htmlize-link (:uri "https://github.com/ageron/handson-ml2") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 53 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28442) (undo-tree-id12454 . -54) (undo-tree-id12455 . -55)) nil (25755 10109 219700 814000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 28199) (undo-tree-id12460 . -1) (undo-tree-id12461 . -1) (undo-tree-id12462 . -1) (undo-tree-id12463 . -1) (undo-tree-id12464 . -1) (undo-tree-id12465 . -1) (undo-tree-id12466 . -1) (undo-tree-id12467 . -1) (undo-tree-id12468 . -1) (t 25755 10109 228795 934000)) nil (25755 10130 683032 146000) 0 nil])
([nil nil ((28565 . 28567) (t 25755 10119 6417 398000)) nil (25755 10136 568489 592000) 0 nil] [nil nil ((#("After training the model for a few epochs, its validation accuracy should
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28441) (undo-tree-id12469 . -73) (undo-tree-id12470 . -74) (t 25755 10119 6417 398000)) ((28441 . 28515)) (25755 10130 682640 718000) 0 nil])
([nil nil ((28586 . 28587) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -28586) (undo-tree-id12471 . -1) 28567) nil (25755 10136 568485 505000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -28646) (nil fontified nil 28645 . 28646) (nil wrap-prefix #("  " 0 2 (face org-indent)) 28645 . 28646) (28645 . 28646) 28586 (t 25755 10136 585282 917000)) nil (25755 10168 150981 773000) 0 nil])
([nil nil ((28662 . 28663) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -28662) (undo-tree-id12495 . 1) (undo-tree-id12496 . -1) 28646) nil (25755 10168 150980 77000) 0 nil])
([nil nil ((#("(or you could try unfreezing just the top ones)" 0 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28670) (undo-tree-id12493 . -46) (undo-tree-id12494 . -47) 28662) nil (25755 10168 150976 883000) 0 nil])
([nil nil ((#("(don’t forget to compile the model when you freeze or unfreeze layers).
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28693) (undo-tree-id12472 . -71) (undo-tree-id12473 . -23) (undo-tree-id12474 . -23) (undo-tree-id12475 . -23) (undo-tree-id12476 . -23) (undo-tree-id12477 . -23) (undo-tree-id12478 . -23) (undo-tree-id12479 . -23) (undo-tree-id12480 . -23) (undo-tree-id12481 . -23) (undo-tree-id12482 . -23) (undo-tree-id12483 . -23) (undo-tree-id12484 . -23) (undo-tree-id12485 . -23) (undo-tree-id12486 . -23) (undo-tree-id12487 . -23) (undo-tree-id12488 . -23) (undo-tree-id12489 . -23) (undo-tree-id12490 . -23) (undo-tree-id12491 . -23) (undo-tree-id12492 . -72) 28716) nil (25755 10168 150970 511000) 0 nil])
([nil nil ((28791 . 28797) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 28791 28797 nil nil nil t #s(yas--exit 28815 nil))) #s(yas--exit 28815 nil) 12 nil #s(yas--field 1 28791 28797 nil nil nil t #s(yas--exit 28815 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28809) (undo-tree-id12593 . -2) (28779 . 28822) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 28779) (undo-tree-id12594 . -1) (undo-tree-id12595 . -2) (undo-tree-id12596 . -1) (undo-tree-id12597 . -1) (undo-tree-id12598 . -1) (undo-tree-id12599 . -1) (undo-tree-id12600 . -1) (undo-tree-id12601 . -1) (undo-tree-id12602 . -1) (undo-tree-id12603 . -1) (undo-tree-id12604 . -1) (undo-tree-id12605 . -1) (undo-tree-id12606 . -1) (undo-tree-id12607 . -1) (undo-tree-id12608 . -1) (undo-tree-id12609 . -1) (undo-tree-id12610 . -1) (undo-tree-id12611 . -1) (undo-tree-id12612 . -1) (undo-tree-id12613 . -1) (undo-tree-id12614 . -1) (undo-tree-id12615 . -1) (undo-tree-id12616 . -1) (undo-tree-id12617 . -1) (undo-tree-id12618 . -1) (undo-tree-id12619 . -1) (undo-tree-id12620 . -1) (undo-tree-id12621 . -1) (undo-tree-id12622 . -1) (undo-tree-id12623 . -1) (undo-tree-id12624 . -1) (undo-tree-id12625 . -1) (undo-tree-id12626 . -1) (undo-tree-id12627 . -1) (undo-tree-id12628 . -1) (undo-tree-id12629 . -1) (undo-tree-id12630 . -1) (undo-tree-id12631 . -1) (undo-tree-id12632 . -2) (undo-tree-id12633 . -2) (undo-tree-id12634 . -2) (undo-tree-id12635 . -2) (undo-tree-id12636 . -2) (undo-tree-id12637 . -2) (undo-tree-id12638 . -2) (undo-tree-id12639 . -2) (undo-tree-id12640 . -2) (undo-tree-id12641 . -2) (undo-tree-id12642 . -2) 28781 (28779 . 28781) (28778 . 28779) (t 25755 10168 172329 942000) 28777) nil (25755 10182 407844 248000) 0 nil])
([nil nil ((apply yas--snippet-revive 28779 28826 #s(yas--snippet nil (#s(yas--field 1 28791 28797 nil nil nil t #s(yas--exit 28815 nil))) #s(yas--exit 28815 nil) 12 nil #s(yas--field 1 28791 28797 nil nil nil t #s(yas--exit 28815 nil)) nil nil))) nil (25755 10182 407812 301000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 28815) (undo-tree-id12576 . -1) (undo-tree-id12577 . -1) (undo-tree-id12578 . -1) (undo-tree-id12579 . -1) (undo-tree-id12580 . -1) (undo-tree-id12581 . -1) (undo-tree-id12582 . -1) (undo-tree-id12583 . -1) (undo-tree-id12584 . -1) (undo-tree-id12585 . -1) (undo-tree-id12586 . -1) (undo-tree-id12587 . -1) (undo-tree-id12588 . -1) (undo-tree-id12589 . -1) (undo-tree-id12590 . -1) (undo-tree-id12591 . -1) (undo-tree-id12592 . -1)) nil (25755 10182 407810 604000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 28814) (undo-tree-id12516 . -1) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) (undo-tree-id12548 . -1) (undo-tree-id12549 . -1) (undo-tree-id12550 . -1) (undo-tree-id12551 . -1) (undo-tree-id12552 . -1) (undo-tree-id12553 . -1) (undo-tree-id12554 . -1) (undo-tree-id12555 . -1) (undo-tree-id12556 . -1) (undo-tree-id12557 . -1) (undo-tree-id12558 . -1) (undo-tree-id12559 . -1) (undo-tree-id12560 . -1) (undo-tree-id12561 . -1) (undo-tree-id12562 . -1) (undo-tree-id12563 . -1) (undo-tree-id12564 . -1) (undo-tree-id12565 . -1) (undo-tree-id12566 . -1) (undo-tree-id12567 . -1) (undo-tree-id12568 . -1) (undo-tree-id12569 . -1) (undo-tree-id12570 . -1) (undo-tree-id12571 . -1) (undo-tree-id12572 . -1) (undo-tree-id12573 . -1) (undo-tree-id12574 . -1) (undo-tree-id12575 . -1)) nil (25755 10182 407799 312000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 28815) (undo-tree-id12497 . -9) (undo-tree-id12498 . -9) (undo-tree-id12499 . -9) (undo-tree-id12500 . -9) (undo-tree-id12501 . -9) (undo-tree-id12502 . -9) (undo-tree-id12503 . -9) (undo-tree-id12504 . -9) (undo-tree-id12505 . -9) (undo-tree-id12506 . -9) (undo-tree-id12507 . -8) (undo-tree-id12508 . -8) (undo-tree-id12509 . -8) (undo-tree-id12510 . -8) (undo-tree-id12511 . -8) (undo-tree-id12512 . -8) (undo-tree-id12513 . -8) (undo-tree-id12514 . -8) (undo-tree-id12515 . -10)) nil (25755 10182 407758 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28982 . 28983) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -28992) (28982 . 28993) 28958) nil (25755 10182 407604 328000) 0 nil])
([nil nil ((28847 . 28851) (t 25755 10182 466864 275000)) nil (25755 10189 478865 651000) 0 nil])
([nil nil ((#("It will take a while" 0 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28997) (undo-tree-id12649 . -19) (undo-tree-id12650 . 20) (undo-tree-id12651 . -20) (t 25755 10189 498606 637000)) nil (25755 10200 497155 890000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28997) (undo-tree-id12646 . 1) (undo-tree-id12647 . -1) (undo-tree-id12648 . -1)) nil (25755 10200 497396 807000) 0 nil])
([nil nil ((#(" but this model should reach around 95% accuracy on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 2 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 28997) (undo-tree-id12661 . -51) (undo-tree-id12662 . 52) (undo-tree-id12663 . -52)) nil (25755 10215 489043 140000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 28997) (undo-tree-id12643 . 1) (undo-tree-id12644 . -1) (undo-tree-id12645 . -1)) ((28997 . 28998)) (25755 10200 497144 56000) 0 nil])
([nil nil ((#("the test set. With that, you can start training amazing image classifiers!But there’s more to computer vision than just classification. For example,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28997) (undo-tree-id12658 . -148) (undo-tree-id12659 . 149) (undo-tree-id12660 . -149)) nil (25755 10215 489039 728000) 0 nil])
nil
([nil nil ((#("what if you also want to know where the flower is in the picture? Let’s
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 28997) (undo-tree-id12655 . -71) (undo-tree-id12656 . 72) (undo-tree-id12657 . -72)) nil (25755 10215 489036 312000) 0 nil])
([nil nil ((#("look at this now.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 16 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 17 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 28997) (undo-tree-id12652 . -17) (undo-tree-id12653 . 18) (undo-tree-id12654 . -18)) nil (25755 10215 489029 905000) 0 nil])
([nil nil ((28998 . 28999) (28997 . 28998) (t 25755 10215 504881 139000) 28997) nil (25755 13459 889365 380000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32510 . 32511) (nil fontified nil 32505 . 32511) (nil fontified nil 32437 . 32505) (nil fontified nil 32361 . 32437) (nil fontified nil 32289 . 32361) (nil fontified nil 32216 . 32289) (nil fontified nil 32148 . 32216) (nil fontified nil 32073 . 32148) (nil fontified nil 32009 . 32073) (nil fontified nil 31929 . 32009) (nil fontified nil 31844 . 31929) (nil fontified nil 31763 . 31844) (nil fontified nil 31687 . 31763) (nil fontified nil 31683 . 31687) (nil fontified nil 31676 . 31683) (nil fontified nil 31610 . 31676) (nil fontified nil 31554 . 31610) (nil fontified nil 31485 . 31554) (nil fontified nil 31412 . 31485) (nil fontified nil 31337 . 31412) (nil fontified nil 31265 . 31337) (nil fontified nil 31227 . 31265) (nil fontified nil 31155 . 31227) (nil fontified nil 31084 . 31155) (nil fontified nil 31005 . 31084) (nil fontified nil 30928 . 31005) (nil fontified nil 30857 . 30928) (nil fontified nil 30713 . 30857) (nil fontified nil 30642 . 30713) (nil fontified nil 30570 . 30642) (nil fontified nil 30500 . 30570) (nil fontified nil 30437 . 30500) (nil fontified nil 30369 . 30437) (nil fontified nil 30289 . 30369) (nil fontified nil 30217 . 30289) (nil fontified nil 30142 . 30217) (nil fontified nil 30072 . 30142) (nil fontified nil 30029 . 30072) (nil fontified nil 30023 . 30029) (nil fontified nil 29966 . 30023) (nil fontified nil 29903 . 29966) (nil fontified nil 29867 . 29903) (nil fontified nil 29822 . 29867) (nil fontified nil 29782 . 29822) (nil fontified nil 29710 . 29782) (nil fontified nil 29647 . 29710) (nil fontified nil 29628 . 29647) (nil fontified nil 29558 . 29628) (nil fontified nil 29548 . 29558) (nil fontified nil 29474 . 29548) (nil fontified nil 29399 . 29474) (nil fontified nil 29325 . 29399) (nil fontified nil 29252 . 29325) (nil fontified nil 29179 . 29252) (nil fontified nil 29107 . 29179) (nil fontified nil 29031 . 29107) (nil fontified nil 28999 . 29031) (28999 . 32511)) nil (25755 13459 889362 487000) 0 nil])
([nil nil ((28999 . 29001)) nil (25755 13459 889354 534000) 0 nil])
([nil nil ((32513 . 32514)) nil (25755 13459 889349 313000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 28998) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (t 25755 13459 958571 990000)) nil (25755 13462 141477 644000) 0 nil])
([nil nil ((29103 . 29104) (#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29103) (undo-tree-id12674 . -1) (t 25755 13462 162630 530000)) nil (25755 13491 263772 266000) 0 nil])
([nil nil ((29103 . 29104) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 29103) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1)) nil (25755 13491 263770 91000) 0 nil])
([nil nil ((29103 . 29104) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 29103) (undo-tree-id12671 . -1)) nil (25755 13491 456109 116000) 0 nil])
([nil nil ((29105 . 29106)) nil (25755 13499 563121 196000) 0 nil] [nil nil ((#("as" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29105) (undo-tree-id12668 . -1) (undo-tree-id12669 . -2) (undo-tree-id12670 . -2)) ((29105 . 29107)) (25755 13491 264057 746000) 0 nil])
([nil nil ((#("as
" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29106) (undo-tree-id12681 . -2) (undo-tree-id12682 . 3) (undo-tree-id12683 . -3) (undo-tree-id12684 . -3) (undo-tree-id12685 . -3) (undo-tree-id12686 . -3) (undo-tree-id12687 . -3) (undo-tree-id12688 . -3) (undo-tree-id12689 . -3) (undo-tree-id12690 . -3) (undo-tree-id12691 . -3) (undo-tree-id12692 . -3) (undo-tree-id12693 . -3)) nil (25755 13499 563119 866000) 0 nil])
([nil nil ((#("discussed in Chapter 10: to predict a bounding box around the object, a
" 0 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29106) (undo-tree-id12666 . -71) (undo-tree-id12667 . -72)) ((29106 . 29178)) (25755 13491 263758 418000) 0 nil])
([nil nil ((#("discussed in Chapter 10:" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29106) (undo-tree-id12678 . -23) (undo-tree-id12679 . 24) (undo-tree-id12680 . -24)) nil (25755 13499 563110 16000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 29106) (undo-tree-id12675 . 1) (undo-tree-id12676 . -1) (undo-tree-id12677 . -1)) nil (25755 13499 563104 135000) 0 nil])
([nil nil ((#("to" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29106) (undo-tree-id12736 . -1) (undo-tree-id12737 . 2) (undo-tree-id12738 . -2) (undo-tree-id12739 . -2) (t 25755 13499 587626 989000)) nil (25755 13562 790197 921000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 29106) (undo-tree-id12732 . 1) (undo-tree-id12733 . -1) (undo-tree-id12734 . -1) (undo-tree-id12735 . -1)) nil (25755 13562 790194 588000) 0 nil])
([nil nil ((29106 . 29107) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 29106) (undo-tree-id12729 . -1) (29106 . 29107) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29106) (undo-tree-id12730 . 1) (undo-tree-id12731 . -1)) nil (25755 13562 790191 32000) 0 nil])
([nil nil ((29148 . 29149)) nil (25755 13562 790188 245000) 0 nil])
([nil nil ((#("a
" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29149) (undo-tree-id12716 . -1) (undo-tree-id12717 . -1) (undo-tree-id12718 . 2) (undo-tree-id12719 . -1) (undo-tree-id12720 . -1) (undo-tree-id12721 . -1) (undo-tree-id12722 . -1) (undo-tree-id12723 . -1) (undo-tree-id12724 . -1) (undo-tree-id12725 . -1) (undo-tree-id12726 . -1) (undo-tree-id12727 . -1) (undo-tree-id12728 . -2)) nil (25755 13562 790186 903000) 0 nil])
([nil nil ((#("common approach is to " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29149) (undo-tree-id12695 . -21) (undo-tree-id12696 . -21) (undo-tree-id12697 . 22) (undo-tree-id12698 . -21) (undo-tree-id12699 . -21) (undo-tree-id12700 . -22) (undo-tree-id12701 . -21) (undo-tree-id12702 . -5) (undo-tree-id12703 . -5) (undo-tree-id12704 . -5) (undo-tree-id12705 . -5) (undo-tree-id12706 . -5) (undo-tree-id12707 . -5) (undo-tree-id12708 . -5) (undo-tree-id12709 . -5) (undo-tree-id12710 . -14) (undo-tree-id12711 . -17) (undo-tree-id12712 . -20) (undo-tree-id12713 . -21) (undo-tree-id12714 . -21) (undo-tree-id12715 . -22) 29170) nil (25755 13562 790175 92000) 0 nil])
([nil nil ((29199 . 29200) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -29199) (undo-tree-id12694 . -1) 29197) nil (25755 13562 790155 93000) 0 nil])
([nil nil ((29221 . 29222)) nil (25755 13562 790144 390000) 0 nil])
([nil nil ((29255 . 29257)) nil (25755 13562 790139 427000) 0 nil])
([nil nil ((29222 . 29223) (#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29222) (29149 . 29150) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29149) (t 25755 13562 861321 504000)) nil (25755 13569 917496 6000) 0 nil])
([nil nil ((#("This means we have
" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29257) (undo-tree-id12897 . -18) (undo-tree-id12898 . 19) (undo-tree-id12899 . -19) (undo-tree-id12900 . -19) (undo-tree-id12901 . -19) (undo-tree-id12902 . -19) (undo-tree-id12903 . -19) (undo-tree-id12904 . -19) (undo-tree-id12905 . -19) (undo-tree-id12906 . -19) (undo-tree-id12907 . -19) (t 25755 13569 937511 723000)) nil (25755 13619 674825 481000) 0 nil])
([nil nil ((#("four numbers to predict." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29257) (undo-tree-id12894 . -23) (undo-tree-id12895 . 24) (undo-tree-id12896 . -24)) nil (25755 13619 674650 292000) 0 nil])
([nil nil ((#(" It does not require much change to the model" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 29257) (undo-tree-id12891 . -44) (undo-tree-id12892 . 45) (undo-tree-id12893 . -45)) nil (25755 13619 674464 405000) 0 nil])
([nil nil ((#(";" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29257) (undo-tree-id12888 . 1) (undo-tree-id12889 . -1) (undo-tree-id12890 . -1)) nil (25755 13619 674461 941000) 0 nil])
([nil nil ((#(" we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 29257) (undo-tree-id12885 . -3) (undo-tree-id12886 . 4) (undo-tree-id12887 . -4)) nil (25755 13619 674459 592000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29256) (undo-tree-id12768 . -1) (undo-tree-id12769 . -1) (undo-tree-id12770 . -1) (undo-tree-id12771 . -1) (undo-tree-id12772 . -1) (undo-tree-id12773 . -1) (undo-tree-id12774 . -1) (undo-tree-id12775 . -1) (undo-tree-id12776 . -1) (undo-tree-id12777 . -1) (undo-tree-id12778 . -1) (undo-tree-id12779 . -1) (undo-tree-id12780 . -1) (undo-tree-id12781 . -1) (undo-tree-id12782 . -1) (undo-tree-id12783 . -1) (undo-tree-id12784 . -1) (undo-tree-id12785 . -1) (undo-tree-id12786 . -1) (undo-tree-id12787 . -1) (undo-tree-id12788 . -1) (undo-tree-id12789 . -1) (undo-tree-id12790 . -1) (undo-tree-id12791 . -1) (undo-tree-id12792 . -1) (undo-tree-id12793 . -1) (undo-tree-id12794 . -1) (undo-tree-id12795 . -1) (undo-tree-id12796 . -1) (undo-tree-id12797 . -1) (undo-tree-id12798 . -1) (undo-tree-id12799 . -1) (undo-tree-id12800 . -1) (undo-tree-id12801 . -1) (undo-tree-id12802 . -1) (undo-tree-id12803 . -1) (undo-tree-id12804 . -1) (undo-tree-id12805 . -1) (undo-tree-id12806 . -1) (undo-tree-id12807 . -1) (undo-tree-id12808 . -1) (undo-tree-id12809 . -1) (undo-tree-id12810 . -1) (undo-tree-id12811 . -1) (undo-tree-id12812 . -1) (undo-tree-id12813 . -1) (undo-tree-id12814 . -1) (undo-tree-id12815 . -1) (undo-tree-id12816 . -1) (undo-tree-id12817 . -1) (undo-tree-id12818 . -1) (undo-tree-id12819 . -1) (undo-tree-id12820 . -1) (undo-tree-id12821 . -1) (undo-tree-id12822 . -1) (undo-tree-id12823 . -1) (undo-tree-id12824 . -1) (undo-tree-id12825 . -1) (undo-tree-id12826 . -1) (undo-tree-id12827 . -1) (undo-tree-id12828 . -1) (undo-tree-id12829 . -1) (undo-tree-id12830 . -1) (undo-tree-id12831 . -1) (undo-tree-id12832 . -1) (undo-tree-id12833 . -1) (undo-tree-id12834 . -1) (undo-tree-id12835 . -1) (undo-tree-id12836 . -1) (undo-tree-id12837 . -1) (undo-tree-id12838 . -1) (undo-tree-id12839 . -1) (undo-tree-id12840 . -1) (undo-tree-id12841 . -1) (undo-tree-id12842 . -1) (undo-tree-id12843 . -1) (undo-tree-id12844 . -1) (undo-tree-id12845 . -1) (undo-tree-id12846 . -1) (undo-tree-id12847 . -1) (undo-tree-id12848 . -1) (undo-tree-id12849 . -1) (undo-tree-id12850 . -1) (undo-tree-id12851 . -1) (undo-tree-id12852 . -1) (undo-tree-id12853 . -1) (undo-tree-id12854 . -1) (undo-tree-id12855 . -1) (undo-tree-id12856 . -1) (undo-tree-id12857 . -1) (undo-tree-id12858 . -1) (undo-tree-id12859 . -1) (undo-tree-id12860 . -1) (undo-tree-id12861 . -1) (undo-tree-id12862 . -1) (undo-tree-id12863 . -1) (undo-tree-id12864 . -1) (undo-tree-id12865 . -1) (undo-tree-id12866 . -1) (undo-tree-id12867 . -1) (undo-tree-id12868 . -1) (undo-tree-id12869 . -1) (undo-tree-id12870 . -1) (undo-tree-id12871 . -1) (undo-tree-id12872 . -1) (undo-tree-id12873 . -1) (undo-tree-id12874 . -1) (undo-tree-id12875 . -1) (undo-tree-id12876 . -1) (undo-tree-id12877 . -1) (undo-tree-id12878 . -1) (undo-tree-id12879 . -1) (undo-tree-id12880 . -1) (undo-tree-id12881 . -1) (undo-tree-id12882 . -1) (undo-tree-id12883 . -1) (undo-tree-id12884 . -1)) nil (25755 13619 674453 762000) 0 nil])
([nil nil ((#("(typically on
top of the global average pooling layer)" 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 39 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29317) (undo-tree-id12766 . -53) (undo-tree-id12767 . -54) 29256) nil (25755 13619 674380 80000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29316) (undo-tree-id12740 . -1) (undo-tree-id12741 . -1) (undo-tree-id12742 . -1) (undo-tree-id12743 . -1) (undo-tree-id12744 . -1) (undo-tree-id12745 . -1) (undo-tree-id12746 . -1) (undo-tree-id12747 . -1) (undo-tree-id12748 . -1) (undo-tree-id12749 . -1) (undo-tree-id12750 . -1) (undo-tree-id12751 . -1) (undo-tree-id12752 . -1) (undo-tree-id12753 . -1) (undo-tree-id12754 . -1) (undo-tree-id12755 . -1) (undo-tree-id12756 . -1) (undo-tree-id12757 . -1) (undo-tree-id12758 . -1) (undo-tree-id12759 . -1) (undo-tree-id12760 . -1) (undo-tree-id12761 . -1) (undo-tree-id12762 . -1) (undo-tree-id12763 . -1) (undo-tree-id12764 . -1) (undo-tree-id12765 . -1)) nil (25755 13619 674375 679000) 0 nil])
([nil nil ((29318 . 29319)) nil (25755 13619 674340 818000) 0 nil])
([nil nil ((#("and it can be trained using the
" 0 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29319) (undo-tree-id13179 . -31) (undo-tree-id13180 . 32) (undo-tree-id13181 . -32) (t 25755 13619 698853 145000)) nil (25755 13653 90024 593000) 0 nil])
([nil nil ((29318 . 29319) 29256) nil (25755 13653 90021 650000) 0 nil])
([nil nil ((#("MSE loss:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29320) (undo-tree-id13109 . -9) (undo-tree-id13110 . -9) (undo-tree-id13111 . -9) (undo-tree-id13112 . -9) (undo-tree-id13113 . -9) (undo-tree-id13114 . -9) (undo-tree-id13115 . -9) (undo-tree-id13116 . -9) (undo-tree-id13117 . -9) (undo-tree-id13118 . -9) (undo-tree-id13119 . -9) (undo-tree-id13120 . -9) (undo-tree-id13121 . -9) (undo-tree-id13122 . -9) (undo-tree-id13123 . -9) (undo-tree-id13124 . -9) (undo-tree-id13125 . -9) (undo-tree-id13126 . -9) (undo-tree-id13127 . -9) (undo-tree-id13128 . -9) (undo-tree-id13129 . -9) (undo-tree-id13130 . -9) (undo-tree-id13131 . -9) (undo-tree-id13132 . -9) (undo-tree-id13133 . -9) (undo-tree-id13134 . -9) (undo-tree-id13135 . -9) (undo-tree-id13136 . -9) (undo-tree-id13137 . -9) (undo-tree-id13138 . -9) (undo-tree-id13139 . -9) (undo-tree-id13140 . -9) (undo-tree-id13141 . -9) (undo-tree-id13142 . -9) (undo-tree-id13143 . -9) (undo-tree-id13144 . -9) (undo-tree-id13145 . -9) (undo-tree-id13146 . -9) (undo-tree-id13147 . -9) (undo-tree-id13148 . -9) (undo-tree-id13149 . -9) (undo-tree-id13150 . -9) (undo-tree-id13151 . -9) (undo-tree-id13152 . -9) (undo-tree-id13153 . -9) (undo-tree-id13154 . -9) (undo-tree-id13155 . -9) (undo-tree-id13156 . -9) (undo-tree-id13157 . -9) (undo-tree-id13158 . -8) (undo-tree-id13159 . -8) (undo-tree-id13160 . -8) (undo-tree-id13161 . -8) (undo-tree-id13162 . -8) (undo-tree-id13163 . -8) (undo-tree-id13164 . -8) (undo-tree-id13165 . -8) (undo-tree-id13166 . -8) (undo-tree-id13167 . -8) (undo-tree-id13168 . -8) (undo-tree-id13169 . -8) (undo-tree-id13170 . -8) (undo-tree-id13171 . -8) (undo-tree-id13172 . -8) (undo-tree-id13173 . -8) (undo-tree-id13174 . -8) (undo-tree-id13175 . -8) (undo-tree-id13176 . 10) (undo-tree-id13177 . -3) (undo-tree-id13178 . -10)) nil (25755 13653 90017 949000) 0 nil])
([nil nil ((29332 . 29338) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 29332 29338 nil nil nil t #s(yas--exit 29356 nil))) #s(yas--exit 29356 nil) 13 nil #s(yas--field 1 29332 29338 nil nil nil t #s(yas--exit 29356 nil)) nil nil)) (#("  " 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -29350) (undo-tree-id13059 . -2) (29320 . 29363) (#("sr" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 29320) (undo-tree-id13060 . -1) (undo-tree-id13061 . -2) (undo-tree-id13062 . -1) (undo-tree-id13063 . -1) (undo-tree-id13064 . -1) (undo-tree-id13065 . -1) (undo-tree-id13066 . -1) (undo-tree-id13067 . -1) (undo-tree-id13068 . -1) (undo-tree-id13069 . -1) (undo-tree-id13070 . -1) (undo-tree-id13071 . -1) (undo-tree-id13072 . -1) (undo-tree-id13073 . -1) (undo-tree-id13074 . -1) (undo-tree-id13075 . -1) (undo-tree-id13076 . -1) (undo-tree-id13077 . -1) (undo-tree-id13078 . -1) (undo-tree-id13079 . -1) (undo-tree-id13080 . -1) (undo-tree-id13081 . -1) (undo-tree-id13082 . -1) (undo-tree-id13083 . -1) (undo-tree-id13084 . -1) (undo-tree-id13085 . -1) (undo-tree-id13086 . -1) (undo-tree-id13087 . -1) (undo-tree-id13088 . -1) (undo-tree-id13089 . -1) (undo-tree-id13090 . -1) (undo-tree-id13091 . -1) (undo-tree-id13092 . -1) (undo-tree-id13093 . -1) (undo-tree-id13094 . -1) (undo-tree-id13095 . -1) (undo-tree-id13096 . -1) (undo-tree-id13097 . -1) (undo-tree-id13098 . -2) (undo-tree-id13099 . -2) (undo-tree-id13100 . -2) (undo-tree-id13101 . -2) (undo-tree-id13102 . -2) (undo-tree-id13103 . -2) (undo-tree-id13104 . -2) (undo-tree-id13105 . -2) (undo-tree-id13106 . -2) (undo-tree-id13107 . -2) (undo-tree-id13108 . -2) 29322 (29320 . 29322) (29319 . 29320)) nil (25755 13653 89566 978000) 0 nil])
([nil nil ((apply yas--snippet-revive 29320 29367 #s(yas--snippet nil (#s(yas--field 1 29332 29338 nil nil nil t #s(yas--exit 29356 nil))) #s(yas--exit 29356 nil) 13 nil #s(yas--field 1 29332 29338 nil nil nil t #s(yas--exit 29356 nil)) nil nil))) nil (25755 13653 89234 531000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 29356) (undo-tree-id13058 . -1)) nil (25755 13653 89233 683000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 29356) (undo-tree-id13057 . -1)) nil (25755 13653 89232 81000) 0 nil])
([nil nil ((#("#+end_src
" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 9 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face org-block-end-line)) . 29356) (undo-tree-id12908 . -9) (undo-tree-id12909 . -10) (undo-tree-id12910 . -10) (undo-tree-id12911 . -10) (undo-tree-id12912 . -10) (undo-tree-id12913 . -10) (undo-tree-id12914 . -10) (undo-tree-id12915 . -10) (undo-tree-id12916 . -10) (undo-tree-id12917 . -10) (undo-tree-id12918 . -10) (undo-tree-id12919 . -10) (undo-tree-id12920 . -10) (undo-tree-id12921 . -10) (undo-tree-id12922 . -10) (undo-tree-id12923 . -10) (undo-tree-id12924 . -10) (undo-tree-id12925 . -10) (undo-tree-id12926 . -10) (undo-tree-id12927 . -10) (undo-tree-id12928 . -10) (undo-tree-id12929 . -10) (undo-tree-id12930 . -10) (undo-tree-id12931 . -10) (undo-tree-id12932 . -10) (undo-tree-id12933 . -10) (undo-tree-id12934 . -10) (undo-tree-id12935 . -10) (undo-tree-id12936 . -10) (undo-tree-id12937 . -10) (undo-tree-id12938 . -10) (undo-tree-id12939 . -10) (undo-tree-id12940 . -10) (undo-tree-id12941 . -10) (undo-tree-id12942 . -10) (undo-tree-id12943 . -10) (undo-tree-id12944 . -10) (undo-tree-id12945 . -10) (undo-tree-id12946 . -10) (undo-tree-id12947 . -10) (undo-tree-id12948 . -10) (undo-tree-id12949 . -10) (undo-tree-id12950 . -10) (undo-tree-id12951 . -10) (undo-tree-id12952 . -10) (undo-tree-id12953 . -10) (undo-tree-id12954 . -10) (undo-tree-id12955 . -10) (undo-tree-id12956 . -10) (undo-tree-id12957 . -10) (undo-tree-id12958 . -10) (undo-tree-id12959 . -10) (undo-tree-id12960 . -10) (undo-tree-id12961 . -10) (undo-tree-id12962 . -10) (undo-tree-id12963 . -10) (undo-tree-id12964 . -10) (undo-tree-id12965 . -10) (undo-tree-id12966 . -10) (undo-tree-id12967 . -10) (undo-tree-id12968 . -10) (undo-tree-id12969 . -10) (undo-tree-id12970 . -10) (undo-tree-id12971 . -10) (undo-tree-id12972 . -10) (undo-tree-id12973 . -10) (undo-tree-id12974 . -10) (undo-tree-id12975 . -10) (undo-tree-id12976 . -10) (undo-tree-id12977 . -10) (undo-tree-id12978 . -10) (undo-tree-id12979 . -10) (undo-tree-id12980 . -10) (undo-tree-id12981 . -10) (undo-tree-id12982 . -10) (undo-tree-id12983 . -10) (undo-tree-id12984 . -10) (undo-tree-id12985 . -10) (undo-tree-id12986 . -10) (undo-tree-id12987 . -10) (undo-tree-id12988 . -10) (undo-tree-id12989 . -10) (undo-tree-id12990 . -10) (undo-tree-id12991 . -10) (undo-tree-id12992 . -10) (undo-tree-id12993 . -10) (undo-tree-id12994 . -10) (undo-tree-id12995 . -10) (undo-tree-id12996 . -10) (undo-tree-id12997 . -10) (undo-tree-id12998 . -10) (undo-tree-id12999 . -10) (undo-tree-id13000 . -10) (undo-tree-id13001 . -10) (undo-tree-id13002 . -10) (undo-tree-id13003 . -10) (undo-tree-id13004 . -10) (undo-tree-id13005 . -10) (undo-tree-id13006 . -10) (undo-tree-id13007 . -10) (undo-tree-id13008 . -10) (undo-tree-id13009 . -10) (undo-tree-id13010 . -10) (undo-tree-id13011 . -10) (undo-tree-id13012 . -10) (undo-tree-id13013 . -10) (undo-tree-id13014 . -10) (undo-tree-id13015 . -10) (undo-tree-id13016 . -10) (undo-tree-id13017 . -10) (undo-tree-id13018 . -10) (undo-tree-id13019 . -10) (undo-tree-id13020 . -10) (undo-tree-id13021 . -10) (undo-tree-id13022 . -10) (undo-tree-id13023 . -10) (undo-tree-id13024 . -10) (undo-tree-id13025 . -10) (undo-tree-id13026 . -10) (undo-tree-id13027 . -10) (undo-tree-id13028 . -10) (undo-tree-id13029 . -10) (undo-tree-id13030 . -10) (undo-tree-id13031 . -10) (undo-tree-id13032 . -10) (undo-tree-id13033 . -10) (undo-tree-id13034 . -10) (undo-tree-id13035 . -10) (undo-tree-id13036 . -10) (undo-tree-id13037 . -10) (undo-tree-id13038 . -10) (undo-tree-id13039 . -10) (undo-tree-id13040 . -10) (undo-tree-id13041 . -10) (undo-tree-id13042 . -10) (undo-tree-id13043 . -10) (undo-tree-id13044 . -10) (undo-tree-id13045 . -10) (undo-tree-id13046 . -9) (undo-tree-id13047 . -9) (undo-tree-id13048 . -9) (undo-tree-id13049 . -9) (undo-tree-id13050 . -9) (undo-tree-id13051 . -9) (undo-tree-id13052 . -9) (undo-tree-id13053 . -9) (undo-tree-id13054 . -9) (undo-tree-id13055 . -9) (undo-tree-id13056 . -10)) nil (25755 13653 89225 753000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29869 . 29870) (#("
" 0 1 (face org-block-end-line fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -29879) (29869 . 29880) 29827) nil (25755 13653 89106 261000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 29355) (undo-tree-id13200 . -1) (undo-tree-id13201 . -1) (undo-tree-id13202 . -1) (undo-tree-id13203 . -1) (undo-tree-id13204 . -1) (undo-tree-id13205 . -1) (undo-tree-id13206 . -1) (undo-tree-id13207 . -1) (undo-tree-id13208 . -1) (undo-tree-id13209 . -1) (undo-tree-id13210 . -1) (undo-tree-id13211 . -1) (undo-tree-id13212 . -1) (undo-tree-id13213 . -1) (undo-tree-id13214 . -1) (undo-tree-id13215 . -1) (undo-tree-id13216 . -1) (undo-tree-id13217 . -1) (undo-tree-id13218 . -1) (undo-tree-id13219 . -1) (undo-tree-id13220 . -1) (undo-tree-id13221 . -1) (undo-tree-id13222 . -1) (undo-tree-id13223 . -1) (undo-tree-id13224 . -1) (undo-tree-id13225 . -1) (undo-tree-id13226 . -1) (undo-tree-id13227 . -1) (undo-tree-id13228 . -1) (undo-tree-id13229 . -1) (undo-tree-id13230 . -1) (undo-tree-id13231 . -1) (undo-tree-id13232 . -1) (undo-tree-id13233 . -1) (undo-tree-id13234 . -1) (undo-tree-id13235 . -1) (undo-tree-id13236 . -1) (undo-tree-id13237 . -1) (undo-tree-id13238 . -1) (undo-tree-id13239 . -1) (undo-tree-id13240 . -1) (undo-tree-id13241 . -1) (undo-tree-id13242 . -1) (undo-tree-id13243 . -1) (undo-tree-id13244 . -1) (undo-tree-id13245 . -1) (undo-tree-id13246 . -1) (undo-tree-id13247 . -1) (undo-tree-id13248 . -1) (undo-tree-id13249 . -1) (undo-tree-id13250 . -1) (undo-tree-id13251 . -1) (undo-tree-id13252 . -1) (undo-tree-id13253 . -1) (undo-tree-id13254 . -1) (undo-tree-id13255 . -1) (undo-tree-id13256 . -1) (undo-tree-id13257 . -1) (undo-tree-id13258 . -1) (undo-tree-id13259 . -1) (undo-tree-id13260 . -1) (undo-tree-id13261 . -1) (undo-tree-id13262 . -1) (undo-tree-id13263 . -1) (undo-tree-id13264 . -1) (undo-tree-id13265 . -1) (undo-tree-id13266 . -1) (undo-tree-id13267 . -1) (undo-tree-id13268 . -1) (undo-tree-id13269 . -1) (undo-tree-id13270 . -1) (undo-tree-id13271 . -1) (undo-tree-id13272 . -1) (undo-tree-id13273 . -1) (undo-tree-id13274 . -1) (undo-tree-id13275 . -1) (undo-tree-id13276 . -1) (undo-tree-id13277 . -1) (undo-tree-id13278 . -1) (undo-tree-id13279 . -1) (undo-tree-id13280 . -1) (undo-tree-id13281 . -1) (undo-tree-id13282 . -1) (undo-tree-id13283 . -1) (undo-tree-id13284 . -1) (undo-tree-id13285 . -1) (undo-tree-id13286 . -1) (undo-tree-id13287 . -1) (undo-tree-id13288 . -1) (undo-tree-id13289 . -1) (undo-tree-id13290 . -1) (undo-tree-id13291 . -1) (undo-tree-id13292 . -1) (undo-tree-id13293 . -1) (undo-tree-id13294 . -1) (undo-tree-id13295 . -1) (undo-tree-id13296 . -1) (undo-tree-id13297 . -1) (undo-tree-id13298 . -1) (undo-tree-id13299 . -1) (undo-tree-id13300 . -1) (undo-tree-id13301 . -1) (undo-tree-id13302 . -1) (undo-tree-id13303 . -1) (undo-tree-id13304 . -1) (undo-tree-id13305 . -1) (undo-tree-id13306 . -1) (undo-tree-id13307 . -1) (undo-tree-id13308 . -1) (undo-tree-id13309 . -1) (undo-tree-id13310 . -1) (undo-tree-id13311 . -1) (undo-tree-id13312 . -1) (undo-tree-id13313 . -1) (undo-tree-id13314 . -1) (undo-tree-id13315 . -1) (undo-tree-id13316 . -1) (undo-tree-id13317 . -1) (undo-tree-id13318 . -1) (undo-tree-id13319 . -1) (undo-tree-id13320 . -1) (undo-tree-id13321 . -1) (undo-tree-id13322 . -1) (undo-tree-id13323 . -1) (undo-tree-id13324 . -1) (undo-tree-id13325 . -1) (undo-tree-id13326 . -1) (undo-tree-id13327 . -1) (undo-tree-id13328 . -1) (undo-tree-id13329 . -1) (undo-tree-id13330 . -1) (undo-tree-id13331 . -1) (undo-tree-id13332 . -1) (undo-tree-id13333 . -1) (undo-tree-id13334 . -1) (undo-tree-id13335 . -1) (undo-tree-id13336 . -1) (undo-tree-id13337 . -1) (undo-tree-id13338 . -1) (undo-tree-id13339 . -1) (undo-tree-id13340 . -1) (undo-tree-id13341 . -1) (undo-tree-id13342 . -1) (undo-tree-id13343 . -1) (undo-tree-id13344 . -1) (undo-tree-id13345 . -1) (undo-tree-id13346 . -1) (undo-tree-id13347 . -1) (undo-tree-id13348 . -1) (undo-tree-id13349 . -1) (undo-tree-id13350 . -1) (undo-tree-id13351 . -1) (undo-tree-id13352 . -1) (undo-tree-id13353 . -1) (undo-tree-id13354 . -1) (t 25755 13653 111757 340000)) nil (25755 13673 337591 61000) 0 nil])
([nil nil ((29424 . 29425) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -29424) (undo-tree-id13191 . -1) (undo-tree-id13192 . -1) (undo-tree-id13193 . -1) (undo-tree-id13194 . -1) (undo-tree-id13195 . -1) (undo-tree-id13196 . -1) (undo-tree-id13197 . -1) (undo-tree-id13198 . -1) (undo-tree-id13199 . -1) 29355) nil (25755 13673 337227 766000) 0 nil])
([nil nil ((29663 . 29664) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -29663) (undo-tree-id13182 . -1) (undo-tree-id13183 . -1) (undo-tree-id13184 . -1) (undo-tree-id13185 . -1) (undo-tree-id13186 . -1) (undo-tree-id13187 . -1) (undo-tree-id13188 . -1) (undo-tree-id13189 . -1) (undo-tree-id13190 . -1) 29619) nil (25755 13673 337212 729000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 29663) (undo-tree-id13355 . -1) (undo-tree-id13356 . -1) (undo-tree-id13357 . -1) (undo-tree-id13358 . -1) (t 25755 13673 356306 454000)) nil (25755 13690 330291 680000) 0 nil])
([nil nil ((29818 . 29819) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) . -29818) (undo-tree-id13360 . -1) (undo-tree-id13361 . -1) (undo-tree-id13362 . -1) (undo-tree-id13363 . -1) (undo-tree-id13364 . -1) (undo-tree-id13365 . -1) (undo-tree-id13366 . -1) (undo-tree-id13367 . -1) (undo-tree-id13368 . -1) 29762 (t 25755 13679 292467 642000)) nil (25755 13697 339511 839000) 0 nil] [nil nil ((29761 . 29762) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -29761) (undo-tree-id13359 . -1) 29699 (t 25755 13679 292467 642000)) ((29761 . 29762) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 29761)) (25755 13690 329785 272000) 0 nil])
([nil nil ((29825 . 29840) (t 25755 13697 360958 748000)) nil (25755 13717 907530 260000) 0 nil])
nil
([nil nil ((29892 . 29893) (t 25755 13717 929518 639000) 29883) nil (25755 13730 235898 630000) 0 nil])
([nil nil ((#("But now we have a problem: the flowers " 0 39 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29894) (undo-tree-id13382 . -38) (undo-tree-id13383 . -39) (t 25755 13730 258423 907000)) nil (25755 13766 45132 144000) 0 nil])
([nil nil ((29894 . 29898)) nil (25755 13766 45130 23000) 0 nil])
([nil nil ((29928 . 29929) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -29928) (undo-tree-id13381 . -1) 29897) nil (25755 13766 45128 981000) 0 nil])
([nil nil ((29955 . 29956)) nil (25755 13766 45127 124000) 0 nil])
([nil nil ((29991 . 29992)) nil (25755 13766 45126 531000) 0 nil])
([nil nil ((#("This is often
" 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29992) (undo-tree-id13378 . -13) (undo-tree-id13379 . 14) (undo-tree-id13380 . -14)) nil (25755 13766 45125 404000) 0 nil])
([nil nil ((#("one of the hardest and most costly parts of a Machine Learning project:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29992) (undo-tree-id13375 . -71) (undo-tree-id13376 . 72) (undo-tree-id13377 . -72)) nil (25755 13766 45120 284000) 0 nil])
([nil nil ((#("getting the labels. It’s a good idea to spend time looking for the right tools.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29992) (undo-tree-id13372 . -79) (undo-tree-id13373 . 80) (undo-tree-id13374 . -80)) nil (25755 13770 579382 589000) 0 nil])
([nil nil ((#("To annotate images with bounding boxes, you may want to use an o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29992) (undo-tree-id13824 . -63) (undo-tree-id13825 . 64) (undo-tree-id13826 . -64)) nil (25755 13816 413508 429000) 0 nil] [nil nil ((nil rear-nonsticky nil 30059 . 30060) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -30127) (30059 . 30128) 29992) ((#("
To annotate images with bounding boxes, you may want to use an open
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky nil) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 68 69 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 30059) (undo-tree-id13384 . -1) (undo-tree-id13385 . -68) (undo-tree-id13386 . -68) (undo-tree-id13387 . -1) (undo-tree-id13388 . -1) (undo-tree-id13389 . -1) (30127 . 30128) (nil rear-nonsticky t 30059 . 30060)) (25755 13770 578945 847000) 0 nil] [nil nil ((#("To annotate images with bounding boxes, you may want to use an open
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 29992) (undo-tree-id13369 . -67) (undo-tree-id13370 . 68) (undo-tree-id13371 . -68)) ((29992 . 30060)) (25755 13766 45110 566000) 0 nil])
([nil nil ((29992 . 29993)) nil (25755 13816 413506 357000) 0 nil])
nil
nil
([nil nil ((29996 . 29997) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -29996) (undo-tree-id13823 . -1) 29992) nil (25755 13816 413505 474000) 0 nil])
([nil nil ((30024 . 30025) (30023 . 30024)) nil (25755 13816 413503 805000) 0 nil])
([nil nil ((#("like " 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 30026) (undo-tree-id13813 . -4) (undo-tree-id13814 . -4) (undo-tree-id13815 . -4) (undo-tree-id13816 . -4) (undo-tree-id13817 . -5) (undo-tree-id13818 . -4) (undo-tree-id13819 . -3) (undo-tree-id13820 . -4) (undo-tree-id13821 . -4) (undo-tree-id13822 . -5) 30030) nil (25755 13816 413502 333000) 0 nil])
([nil nil ((30026 . 30027)) nil (25755 13816 413495 798000) 0 nil])
([nil nil ((30027 . 30028)) nil (25755 13816 413495 70000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30047) (undo-tree-id13810 . -1) (undo-tree-id13811 . -1) (undo-tree-id13812 . -1)) nil (25755 13816 413494 13000) 0 nil])
([nil nil ((30025 . 30060) (#(" - LabelImg,
 - VGG Image Annotator" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 3 12 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 12 13 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil) 14 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil composition (1 1 [8226])) 15 35 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil)) . 30025) (undo-tree-id13605 . -35) (undo-tree-id13606 . -35) (undo-tree-id13607 . -14) (undo-tree-id13608 . -14) (undo-tree-id13609 . 19) (undo-tree-id13610 . -14) (undo-tree-id13611 . -14) (undo-tree-id13612 . -35) (undo-tree-id13613 . -14) (undo-tree-id13614 . -14) (undo-tree-id13615 . -14) (undo-tree-id13616 . -14) (undo-tree-id13617 . -14) (undo-tree-id13618 . -14) (undo-tree-id13619 . -14) (undo-tree-id13620 . -14) (undo-tree-id13621 . -14) (undo-tree-id13622 . -14) (undo-tree-id13623 . -14) (undo-tree-id13624 . -14) (undo-tree-id13625 . -14) (undo-tree-id13626 . -14) (undo-tree-id13627 . -14) (undo-tree-id13628 . -14) (undo-tree-id13629 . -14) (undo-tree-id13630 . -14) (undo-tree-id13631 . -14) (undo-tree-id13632 . -14) (undo-tree-id13633 . -14) (undo-tree-id13634 . -14) (undo-tree-id13635 . -14) (undo-tree-id13636 . -14) (undo-tree-id13637 . -14) (undo-tree-id13638 . -14) (undo-tree-id13639 . -14) (undo-tree-id13640 . -14) (undo-tree-id13641 . -14) (undo-tree-id13642 . -14) (undo-tree-id13643 . -14) (undo-tree-id13644 . -14) (undo-tree-id13645 . -14) (undo-tree-id13646 . -14) (undo-tree-id13647 . -15) (undo-tree-id13648 . -15) (undo-tree-id13649 . -15) (undo-tree-id13650 . -15) (undo-tree-id13651 . -15) (undo-tree-id13652 . -15) (undo-tree-id13653 . -15) (undo-tree-id13654 . -15) (undo-tree-id13655 . -14) (undo-tree-id13656 . -14) (undo-tree-id13657 . -14) (undo-tree-id13658 . -14) (undo-tree-id13659 . -14) (undo-tree-id13660 . -14) (undo-tree-id13661 . -14) (undo-tree-id13662 . -14) (undo-tree-id13663 . -14) (undo-tree-id13664 . -14) (undo-tree-id13665 . -14) (undo-tree-id13666 . -14) (undo-tree-id13667 . -14) (undo-tree-id13668 . -14) (undo-tree-id13669 . -14) (undo-tree-id13670 . -14) (undo-tree-id13671 . -14) (undo-tree-id13672 . -14) (undo-tree-id13673 . -14) (undo-tree-id13674 . -15) (undo-tree-id13675 . -20) (undo-tree-id13676 . -26) (undo-tree-id13677 . -20) (undo-tree-id13678 . -15) (undo-tree-id13679 . -15) (undo-tree-id13680 . -15) (undo-tree-id13681 . -15) (undo-tree-id13682 . -15) (undo-tree-id13683 . -15) (undo-tree-id13684 . -15) (undo-tree-id13685 . -15) (undo-tree-id13686 . -15) (undo-tree-id13687 . -15) (undo-tree-id13688 . -15) (undo-tree-id13689 . -16) (undo-tree-id13690 . -16) (undo-tree-id13691 . -16) (undo-tree-id13692 . -16) (undo-tree-id13693 . -16) (undo-tree-id13694 . -16) (undo-tree-id13695 . -16) (undo-tree-id13696 . -16) (undo-tree-id13697 . -16) (undo-tree-id13698 . -15) (undo-tree-id13699 . -15) (undo-tree-id13700 . -15) (undo-tree-id13701 . -15) (undo-tree-id13702 . -15) (undo-tree-id13703 . -15) (undo-tree-id13704 . -15) (undo-tree-id13705 . -15) (undo-tree-id13706 . -15) (undo-tree-id13707 . -15) (undo-tree-id13708 . -15) (undo-tree-id13709 . -15) (undo-tree-id13710 . -15) (undo-tree-id13711 . -15) (undo-tree-id13712 . -15) (undo-tree-id13713 . -15) (undo-tree-id13714 . -15) (undo-tree-id13715 . -15) (undo-tree-id13716 . -15) (undo-tree-id13717 . 19) (undo-tree-id13718 . -19) (undo-tree-id13719 . -18) (undo-tree-id13720 . -24) (undo-tree-id13721 . -34) (undo-tree-id13722 . -35) (undo-tree-id13723 . -35) (undo-tree-id13724 . -35) (undo-tree-id13725 . -21) (undo-tree-id13726 . -21) (undo-tree-id13727 . -21) (undo-tree-id13728 . -21) (undo-tree-id13729 . -21) (undo-tree-id13730 . -21) (undo-tree-id13731 . -21) (undo-tree-id13732 . -21) (undo-tree-id13733 . -35) (undo-tree-id13734 . -35) (undo-tree-id13735 . -35) (undo-tree-id13736 . -35) (undo-tree-id13737 . -35) (undo-tree-id13738 . -35) (undo-tree-id13739 . -35) (undo-tree-id13740 . -35) (undo-tree-id13741 . -35) (undo-tree-id13742 . -35) (undo-tree-id13743 . -35) (undo-tree-id13744 . -34) (undo-tree-id13745 . -34) (undo-tree-id13746 . -34) (undo-tree-id13747 . -34) (undo-tree-id13748 . -34) (undo-tree-id13749 . -34) (undo-tree-id13750 . -34) (undo-tree-id13751 . -34) (undo-tree-id13752 . -34) (undo-tree-id13753 . -34) (undo-tree-id13754 . -34) (undo-tree-id13755 . -34) (undo-tree-id13756 . -34) (undo-tree-id13757 . -34) (undo-tree-id13758 . -34) (undo-tree-id13759 . -34) (undo-tree-id13760 . -34) (undo-tree-id13761 . -34) (undo-tree-id13762 . -34) (undo-tree-id13763 . -35) (undo-tree-id13764 . -35) (undo-tree-id13765 . -35) (undo-tree-id13766 . -35) (undo-tree-id13767 . -35) (undo-tree-id13768 . -35) (undo-tree-id13769 . -35) (undo-tree-id13770 . -35) (undo-tree-id13771 . -35) (undo-tree-id13772 . -35) (undo-tree-id13773 . -35) (undo-tree-id13774 . -35) (undo-tree-id13775 . -35) (undo-tree-id13776 . -35) (undo-tree-id13777 . -35) (undo-tree-id13778 . -35) (undo-tree-id13779 . -35) (undo-tree-id13780 . -35) (undo-tree-id13781 . -35) (undo-tree-id13782 . -35) (undo-tree-id13783 . -13) (30025 . 30038) (#(" LabelImg," 0 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30047) (undo-tree-id13784 . 10) (undo-tree-id13785 . -1) (undo-tree-id13786 . -8) (undo-tree-id13787 . -9) (undo-tree-id13788 . 9) (undo-tree-id13789 . -9) (undo-tree-id13790 . -1) (undo-tree-id13791 . -1) (undo-tree-id13792 . -1) (undo-tree-id13793 . -1) (undo-tree-id13794 . -1) (undo-tree-id13795 . -1) (undo-tree-id13796 . -1) (undo-tree-id13797 . -1) (undo-tree-id13798 . -1) (undo-tree-id13799 . -1) (undo-tree-id13800 . -1) (undo-tree-id13801 . -1) (undo-tree-id13802 . -1) (undo-tree-id13803 . -1) (undo-tree-id13804 . -1) (undo-tree-id13805 . -1) (undo-tree-id13806 . -1) (undo-tree-id13807 . -1) (undo-tree-id13808 . -1) (undo-tree-id13809 . -1) 30048) nil (25755 13816 413485 585000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30059) (undo-tree-id13603 . -1) (undo-tree-id13604 . -1)) nil (25755 13816 413364 250000) 0 nil])
([nil nil ((30048 . 30063) (#(" - 
 - LabelImg" 0 1 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 4 5 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 5 6 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 6 7 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 7 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil)) . 30048) (undo-tree-id13545 . -15) (undo-tree-id13546 . -15) (undo-tree-id13547 . 8) (undo-tree-id13548 . -15) (undo-tree-id13549 . -7) (undo-tree-id13550 . -7) (undo-tree-id13551 . -7) (undo-tree-id13552 . -7) (undo-tree-id13553 . -7) (undo-tree-id13554 . -7) (undo-tree-id13555 . -7) (undo-tree-id13556 . -7) (undo-tree-id13557 . -7) (undo-tree-id13558 . -6) (undo-tree-id13559 . -6) (undo-tree-id13560 . -6) (undo-tree-id13561 . -6) (undo-tree-id13562 . -6) (undo-tree-id13563 . -6) (undo-tree-id13564 . -6) (undo-tree-id13565 . -6) (undo-tree-id13566 . -6) (undo-tree-id13567 . -6) (undo-tree-id13568 . -6) (undo-tree-id13569 . -6) (undo-tree-id13570 . -6) (undo-tree-id13571 . -6) (undo-tree-id13572 . -6) (undo-tree-id13573 . -6) (undo-tree-id13574 . -6) (undo-tree-id13575 . -6) (undo-tree-id13576 . -6) (undo-tree-id13577 . 8) (undo-tree-id13578 . -15) (undo-tree-id13579 . -7) (undo-tree-id13580 . -15) (undo-tree-id13581 . -15) (undo-tree-id13582 . -14) (undo-tree-id13583 . -14) (undo-tree-id13584 . -14) (undo-tree-id13585 . -14) (undo-tree-id13586 . -14) (undo-tree-id13587 . -14) (undo-tree-id13588 . -14) (undo-tree-id13589 . -14) (undo-tree-id13590 . -14) (undo-tree-id13591 . -15) (undo-tree-id13592 . -15) (undo-tree-id13593 . -15) (undo-tree-id13594 . -15) (undo-tree-id13595 . -15) (undo-tree-id13596 . -15) (undo-tree-id13597 . -15) (undo-tree-id13598 . -15) (undo-tree-id13599 . -15) (undo-tree-id13600 . -15) (undo-tree-id13601 . -15) (undo-tree-id13602 . -4) (30048 . 30052) 30059) nil (25755 13816 413360 158000) 0 nil])
([nil nil ((30062 . 30063) (#(" " 0 1 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 30062) (undo-tree-id13531 . -1) (undo-tree-id13532 . -1) (undo-tree-id13533 . -1) (undo-tree-id13534 . -1) (undo-tree-id13535 . -1) (undo-tree-id13536 . -1) (undo-tree-id13537 . -1) (undo-tree-id13538 . -1) (undo-tree-id13539 . -1) (undo-tree-id13540 . -1) (undo-tree-id13541 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . -30063) (undo-tree-id13542 . 1) (undo-tree-id13543 . 1) (undo-tree-id13544 . -1) 30062) nil (25755 13816 412991 235000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30074) (undo-tree-id13529 . -1) (undo-tree-id13530 . -1)) nil (25755 13816 412982 823000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30074) (undo-tree-id13527 . -1) (undo-tree-id13528 . -1)) nil (25755 13816 412980 938000) 0 nil])
([nil nil ((#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30074) (undo-tree-id13525 . -1) (undo-tree-id13526 . -1)) nil (25755 13816 412979 45000) 0 nil])
([nil nil ((#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30074) (undo-tree-id13522 . -1) (undo-tree-id13523 . -1) (undo-tree-id13524 . -1)) nil (25755 13816 412975 936000) 0 nil])
([nil nil ((30060 . 30131) (#(" - ImgLab, or perhaps a commercial tool like LabelBox or
 - OpenLabeler" 0 1 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 3 56 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 56 57 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 57 58 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 58 59 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 59 60 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 60 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil)) . 30060) (undo-tree-id13407 . -71) (undo-tree-id13408 . -71) (undo-tree-id13409 . 11) (undo-tree-id13410 . 11) (undo-tree-id13411 . -71) (undo-tree-id13412 . -70) (undo-tree-id13413 . -70) (undo-tree-id13414 . -70) (undo-tree-id13415 . -70) (undo-tree-id13416 . -70) (undo-tree-id13417 . -70) (undo-tree-id13418 . -70) (undo-tree-id13419 . -70) (undo-tree-id13420 . -69) (undo-tree-id13421 . -68) (undo-tree-id13422 . -68) (undo-tree-id13423 . -68) (undo-tree-id13424 . -68) (undo-tree-id13425 . -68) (undo-tree-id13426 . -68) (undo-tree-id13427 . -68) (undo-tree-id13428 . -68) (undo-tree-id13429 . -59) (undo-tree-id13430 . -59) (undo-tree-id13431 . -59) (undo-tree-id13432 . -59) (undo-tree-id13433 . -59) (undo-tree-id13434 . -59) (undo-tree-id13435 . -59) (undo-tree-id13436 . -59) (undo-tree-id13437 . -59) (undo-tree-id13438 . -59) (undo-tree-id13439 . -59) (undo-tree-id13440 . -59) (undo-tree-id13441 . -59) (undo-tree-id13442 . -59) (undo-tree-id13443 . -59) (undo-tree-id13444 . -59) (undo-tree-id13445 . -59) (undo-tree-id13446 . -59) (undo-tree-id13447 . -59) (undo-tree-id13448 . -59) (undo-tree-id13449 . -59) (undo-tree-id13450 . -59) (undo-tree-id13451 . -59) (undo-tree-id13452 . -59) (undo-tree-id13453 . -59) (undo-tree-id13454 . -59) (undo-tree-id13455 . -59) (undo-tree-id13456 . -59) (undo-tree-id13457 . -59) (undo-tree-id13458 . -59) (undo-tree-id13459 . -59) (undo-tree-id13460 . -59) (undo-tree-id13461 . -59) (undo-tree-id13462 . -59) (undo-tree-id13463 . -59) (undo-tree-id13464 . -59) (undo-tree-id13465 . -59) (undo-tree-id13466 . -60) (undo-tree-id13467 . -71) (undo-tree-id13468 . -71) (undo-tree-id13469 . -71) (undo-tree-id13470 . -71) (undo-tree-id13471 . -71) (undo-tree-id13472 . -71) (undo-tree-id13473 . -71) (undo-tree-id13474 . -71) (undo-tree-id13475 . -71) (undo-tree-id13476 . -71) (undo-tree-id13477 . -71) (undo-tree-id13478 . -71) (undo-tree-id13479 . -71) (undo-tree-id13480 . -71) (undo-tree-id13481 . -71) (undo-tree-id13482 . -71) (undo-tree-id13483 . -71) (undo-tree-id13484 . -71) (undo-tree-id13485 . -71) (undo-tree-id13486 . -71) (undo-tree-id13487 . -71) (undo-tree-id13488 . -71) (undo-tree-id13489 . -71) (undo-tree-id13490 . -71) (undo-tree-id13491 . -71) (undo-tree-id13492 . -71) (undo-tree-id13493 . -71) (undo-tree-id13494 . -71) (undo-tree-id13495 . -71) (undo-tree-id13496 . -71) (undo-tree-id13497 . -71) (undo-tree-id13498 . -71) (undo-tree-id13499 . -71) (undo-tree-id13500 . -71) (undo-tree-id13501 . -71) (undo-tree-id13502 . -71) (undo-tree-id13503 . -71) (undo-tree-id13504 . 11) (undo-tree-id13505 . -71) (undo-tree-id13506 . -71) (undo-tree-id13507 . -71) (undo-tree-id13508 . -71) (undo-tree-id13509 . -71) (undo-tree-id13510 . -71) (undo-tree-id13511 . -71) (undo-tree-id13512 . -71) (undo-tree-id13513 . -71) (undo-tree-id13514 . -71) (undo-tree-id13515 . -71) (undo-tree-id13516 . -71) (undo-tree-id13517 . -57) (30060 . 30117) (#("ImgLab, or perhaps a commercial tool like LabelBox or" 0 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30074) (undo-tree-id13518 . -6) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30074) (undo-tree-id13519 . -1) (undo-tree-id13520 . -1) (undo-tree-id13521 . -1)) nil (25755 13816 412969 835000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13405 . -1) (undo-tree-id13406 . -1)) nil (25755 13816 412894 975000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13403 . -1) (undo-tree-id13404 . -1)) nil (25755 13816 412892 960000) 0 nil])
([nil nil ((#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13401 . -1) (undo-tree-id13402 . -1)) nil (25755 13816 412891 109000) 0 nil])
([nil nil ((#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13398 . -1) (undo-tree-id13399 . -1) (undo-tree-id13400 . -1)) nil (25755 13817 507048 3000) 0 nil])
([nil nil ((30075 . 30130) (#(" - perhaps a commercial tool like LabelBox or
 - ImgLab" 0 1 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 3 4 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 4 5 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 5 6 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 6 45 (fontified nil wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 45 46 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 46 47 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 47 48 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 48 49 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 49 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified nil)) . 30075) (undo-tree-id13839 . -55) (undo-tree-id13840 . -55) (undo-tree-id13841 . 6) (undo-tree-id13842 . -55) (undo-tree-id13843 . -55) (undo-tree-id13844 . -55) (undo-tree-id13845 . -55) (undo-tree-id13846 . -55) (undo-tree-id13847 . -55) (undo-tree-id13848 . -55) (undo-tree-id13849 . -55) (undo-tree-id13850 . -55) (undo-tree-id13851 . -55) (undo-tree-id13852 . -55) (undo-tree-id13853 . -55) (undo-tree-id13854 . -55) (undo-tree-id13855 . -55) (undo-tree-id13856 . -55) (undo-tree-id13857 . -55) (undo-tree-id13858 . -55) (undo-tree-id13859 . -55) (undo-tree-id13860 . -55) (undo-tree-id13861 . -55) (undo-tree-id13862 . -55) (undo-tree-id13863 . -55) (undo-tree-id13864 . -55) (undo-tree-id13865 . -55) (undo-tree-id13866 . -55) (undo-tree-id13867 . -55) (undo-tree-id13868 . -55) (undo-tree-id13869 . -55) (undo-tree-id13870 . -55) (undo-tree-id13871 . 6) (undo-tree-id13872 . -55) (undo-tree-id13873 . -55) (undo-tree-id13874 . -55) (undo-tree-id13875 . -55) (undo-tree-id13876 . -55) (undo-tree-id13877 . -55) (undo-tree-id13878 . -55) (undo-tree-id13879 . -55) (undo-tree-id13880 . -55) (undo-tree-id13881 . -55) (undo-tree-id13882 . -55) (undo-tree-id13883 . -55) (undo-tree-id13884 . -55) (undo-tree-id13885 . -55) (undo-tree-id13886 . -55) (undo-tree-id13887 . -55) (undo-tree-id13888 . -55) (undo-tree-id13889 . -55) (undo-tree-id13890 . -55) (undo-tree-id13891 . -55) (undo-tree-id13892 . -55) (undo-tree-id13893 . -46) (30075 . 30121) (#(" perhaps a commercial tool like LabelBox or" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 4 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084)) nil (25755 13824 990143 659000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13396 . -1) (undo-tree-id13397 . -1)) ((30084 . 30085)) (25755 13817 121753 502000) 0 nil])
([nil nil ((#("perhaps a " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 3 10 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30088) (undo-tree-id13827 . -9) (undo-tree-id13828 . -9) (undo-tree-id13829 . 10) (undo-tree-id13830 . -9) (undo-tree-id13831 . -9) (undo-tree-id13832 . -10) (undo-tree-id13833 . -9) (undo-tree-id13834 . -6) (undo-tree-id13835 . -8) (undo-tree-id13836 . -9) (undo-tree-id13837 . -9) (undo-tree-id13838 . -10) 30097) nil (25755 13824 989846 133000) 0 nil])
([nil nil ((#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13394 . -1) (undo-tree-id13395 . -1)) ((30084 . 30085)) (25755 13816 729611 490000) 0 nil])
([nil nil ((30120 . 30121) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . -30120) (undo-tree-id13936 . -1) (undo-tree-id13937 . -1) (undo-tree-id13938 . -1) (undo-tree-id13939 . -1) (undo-tree-id13940 . -1) (undo-tree-id13941 . -1) (undo-tree-id13942 . -1) (undo-tree-id13943 . -1) (undo-tree-id13944 . -1) (undo-tree-id13945 . -1) (undo-tree-id13946 . -1) (undo-tree-id13947 . -1) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) 30085 (t 25755 13825 14930 317000)) nil (25755 13832 746734 227000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13392 . -1) (undo-tree-id13393 . -1)) ((30084 . 30085)) (25755 13816 413818 739000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30132) (undo-tree-id13919 . -1) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -1) (undo-tree-id13926 . -1) (undo-tree-id13927 . -1) (undo-tree-id13928 . -1) (undo-tree-id13929 . -1) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1)) nil (25755 13832 746718 431000) 0 nil])
([nil nil ((#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 30084) (undo-tree-id13390 . -1) (undo-tree-id13391 . -1)) ((30084 . 30085)) (25755 13816 412874 163000) 0 nil])
([nil nil ((30132 . 30134)) nil (25755 13832 746699 24000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 30134) (undo-tree-id13894 . 1) (undo-tree-id13895 . -1) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1)) nil (25755 13832 746694 6000) 0 nil])
([nil nil ((#("You may also want to consider crowdsourcing platforms such
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14079 . -58) (undo-tree-id14080 . 59) (undo-tree-id14081 . -59) (undo-tree-id14082 . -59) (undo-tree-id14083 . -59) (undo-tree-id14084 . -59) (undo-tree-id14085 . -59) (undo-tree-id14086 . -59) (undo-tree-id14087 . -59) (undo-tree-id14088 . -59) (undo-tree-id14089 . -59) (undo-tree-id14090 . -59) (undo-tree-id14091 . -59) (undo-tree-id14092 . -59) (undo-tree-id14093 . -59) (undo-tree-id14094 . -59) (undo-tree-id14095 . -59) (undo-tree-id14096 . -59) (undo-tree-id14097 . -59) (t 25755 13832 771588 501000)) nil (25755 13936 675746 866000) 0 nil])
([nil nil ((#("as Amazon Mechanical Turk if you have a very large number of images to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14061 . -70) (undo-tree-id14062 . 71) (undo-tree-id14063 . -71) (undo-tree-id14064 . -71) (undo-tree-id14065 . -71) (undo-tree-id14066 . -71) (undo-tree-id14067 . -71) (undo-tree-id14068 . -71) (undo-tree-id14069 . -71) (undo-tree-id14070 . -71) (undo-tree-id14071 . -71) (undo-tree-id14072 . -71) (undo-tree-id14073 . -71) (undo-tree-id14074 . -71) (undo-tree-id14075 . -71) (undo-tree-id14076 . -71) (undo-tree-id14077 . -71) (undo-tree-id14078 . -71)) nil (25755 13936 674821 89000) 0 nil])
([nil nil ((#("annotate" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14058 . -7) (undo-tree-id14059 . 8) (undo-tree-id14060 . -8)) nil (25755 13936 674797 965000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14055 . 1) (undo-tree-id14056 . -1) (undo-tree-id14057 . -1)) nil (25755 13936 674793 597000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 30134) (undo-tree-id14052 . 1) (undo-tree-id14053 . -1) (undo-tree-id14054 . -1)) nil (25755 13936 674788 753000) 0 nil])
([nil nil ((#("However, it is quite a lot of work to set up a crowdsourcingplatform, prepare the form to be sent to the workers, supervise them, and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 134 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14033 . -133) (undo-tree-id14034 . 134) (undo-tree-id14035 . -134) (undo-tree-id14036 . -134) (undo-tree-id14037 . -134) (undo-tree-id14038 . -134) (undo-tree-id14039 . -134) (undo-tree-id14040 . -134) (undo-tree-id14041 . -134) (undo-tree-id14042 . -134) (undo-tree-id14043 . -70) (undo-tree-id14044 . -70) (undo-tree-id14045 . -70) (undo-tree-id14046 . -70) (undo-tree-id14047 . -70) (undo-tree-id14048 . -70) (undo-tree-id14049 . -70) (undo-tree-id14050 . -70) (undo-tree-id14051 . -134)) nil (25755 13936 674740 857000) 0 nil])
([nil nil ((#("ensure that the quality of the bounding boxes they produce is good, so
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14022 . -70) (undo-tree-id14023 . 71) (undo-tree-id14024 . -71) (undo-tree-id14025 . -71) (undo-tree-id14026 . -71) (undo-tree-id14027 . -71) (undo-tree-id14028 . -71) (undo-tree-id14029 . -71) (undo-tree-id14030 . -71) (undo-tree-id14031 . -71) (undo-tree-id14032 . -71)) nil (25755 13936 674723 806000) 0 nil])
([nil nil ((#("make sure it is worth the effort. If there are just a few thousand images to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14011 . -76) (undo-tree-id14012 . 77) (undo-tree-id14013 . -77) (undo-tree-id14014 . -77) (undo-tree-id14015 . -77) (undo-tree-id14016 . -77) (undo-tree-id14017 . -77) (undo-tree-id14018 . -77) (undo-tree-id14019 . -77) (undo-tree-id14020 . -77) (undo-tree-id14021 . -77)) nil (25755 13936 674703 303000) 0 nil])
([nil nil ((#("label, and you don’t plan to do this frequently, it may be preferable to do it
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id14000 . -78) (undo-tree-id14001 . 79) (undo-tree-id14002 . -79) (undo-tree-id14003 . -79) (undo-tree-id14004 . -79) (undo-tree-id14005 . -79) (undo-tree-id14006 . -79) (undo-tree-id14007 . -79) (undo-tree-id14008 . -79) (undo-tree-id14009 . -79) (undo-tree-id14010 . -79)) nil (25755 13936 674686 530000) 0 nil])
([nil nil ((#("yourself. Adriana Kovashka et al. wrote a very practical paper24 about
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 58 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30134) (undo-tree-id13989 . -70) (undo-tree-id13990 . 71) (undo-tree-id13991 . -71) (undo-tree-id13992 . -71) (undo-tree-id13993 . -71) (undo-tree-id13994 . -71) (undo-tree-id13995 . -71) (undo-tree-id13996 . -71) (undo-tree-id13997 . -71) (undo-tree-id13998 . -71) (undo-tree-id13999 . -71)) nil (25755 13936 674672 327000) 0 nil])
([nil nil ((30134 . 30135) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30134) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1) (undo-tree-id13982 . -1) (undo-tree-id13983 . -1) (undo-tree-id13984 . -1) (undo-tree-id13985 . -1) (undo-tree-id13986 . -1) (undo-tree-id13987 . -1) (undo-tree-id13988 . -1) 30135 (30134 . 30135)) nil (25755 13936 674658 70000) 0 nil])
([nil nil ((30167 . 30168)) nil (25755 13936 674633 771000) 0 nil])
([nil nil ((#("*" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 30167) (undo-tree-id13967 . -1) (undo-tree-id13968 . -1) (undo-tree-id13969 . -1) (undo-tree-id13970 . -1) (undo-tree-id13971 . -1) (undo-tree-id13972 . -1) (undo-tree-id13973 . -1) (undo-tree-id13974 . -1) (undo-tree-id13975 . -1) (undo-tree-id13976 . -1) (undo-tree-id13977 . -1)) nil (25755 13936 674631 873000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30167) (undo-tree-id13963 . 1) (undo-tree-id13964 . -1) (undo-tree-id13965 . -1) (undo-tree-id13966 . -1)) nil (25755 13936 674608 300000) 0 nil])
([nil nil ((30168 . 30169)) nil (25755 13936 674599 73000) 0 nil])
([nil nil ((#("I recommend you check it out, even if
" 0 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30169) (undo-tree-id13952 . -37) (undo-tree-id13953 . 38) (undo-tree-id13954 . -38) (undo-tree-id13955 . -38) (undo-tree-id13956 . -38) (undo-tree-id13957 . -38) (undo-tree-id13958 . -38) (undo-tree-id13959 . -38) (undo-tree-id13960 . -38) (undo-tree-id13961 . -38) (undo-tree-id13962 . -38)) nil (25755 13936 674593 723000) 0 nil])
([nil nil ((30168 . 30169) 30134) nil (25755 13936 674523 219000) 0 nil])
([nil nil ((30167 . 30168) (t 25755 13936 747924 340000)) nil (25755 13950 391531 286000) 0 nil])
([nil nil ((#("you do not plan to use crowdsourcing.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30171) (undo-tree-id14098 . -37) (undo-tree-id14099 . -38) (t 25755 13950 412957 755000)) nil (25755 13955 62956 537000) 0 nil])
([nil nil ((30174 . 30175) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30174) (undo-tree-id14100 . -1) (t 25755 13955 85308 54000)) nil (25755 13958 276277 684000) 0 nil])
([nil nil ((30188 . 30189) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30188) (undo-tree-id14101 . -1) (t 25755 13958 293547 687000)) nil (25755 13981 969577 548000) 0 nil])
([nil nil ((#("(for now we will assume there is a single bounding box per
image)" 0 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30259) (undo-tree-id14114 . -64) (undo-tree-id14115 . -65) 30257 (t 25755 13981 987295 545000)) nil (25755 14002 667488 377000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30258) (undo-tree-id14102 . -1) (undo-tree-id14103 . -1) (undo-tree-id14104 . -1) (undo-tree-id14105 . -1) (undo-tree-id14106 . -1) (undo-tree-id14107 . -1) (undo-tree-id14108 . -1) (undo-tree-id14109 . -1) (undo-tree-id14110 . -1) (undo-tree-id14111 . -1) (undo-tree-id14112 . -1) (undo-tree-id14113 . -1)) nil (25755 14002 667480 275000) 0 nil])
([nil nil ((30260 . 30262)) nil (25755 14002 667453 645000) 0 nil])
([nil nil ((30403 . 30405) (t 25755 14002 688791 979000)) nil (25755 14016 245355 350000) 0 nil])
([nil nil ((30453 . 30454) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30453) (undo-tree-id14116 . -1) 30405 (t 25755 14016 269758 743000)) nil (25755 14026 658046 527000) 0 nil])
([nil nil ((30487 . 30489)) nil (25755 14026 658030 677000) 0 nil])
([nil nil ((30024 . 30025) (t 25755 14026 730495 544000) 29992) nil (25755 14032 844389 303000) 0 nil])
([nil nil ((#("Then you are ready to train your
" 0 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14121 . -32) (undo-tree-id14122 . -33) (t 25755 14032 870924 927000)) nil (25755 14048 602955 108000) 0 nil])
([nil nil ((#("model!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14119 . -6) (undo-tree-id14120 . -7)) nil (25755 14048 602950 324000) 0 nil])
([nil nil ((#("TIP
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14117 . -3) (undo-tree-id14118 . -4)) nil (25755 14048 602940 459000) 0 nil])
([nil nil ((#("The bounding boxes should be normalized so that the horizontal and vertical
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14533 . -75) (undo-tree-id14534 . -4) (undo-tree-id14535 . -4) (undo-tree-id14536 . -4) (undo-tree-id14537 . -4) (undo-tree-id14538 . -4) (undo-tree-id14539 . -4) (undo-tree-id14540 . -4) (undo-tree-id14541 . -4) (undo-tree-id14542 . -4) (undo-tree-id14543 . -4) (undo-tree-id14544 . -4) (undo-tree-id14545 . -4) (undo-tree-id14546 . -76) 30494 (t 25755 14048 640017 253000)) nil (25755 14085 3722 481000) 0 nil])
([nil nil ((#("coordinates, as well as the height and width, all range from 0 to 1. Also, it is
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14510 . -80) (undo-tree-id14511 . -4) (undo-tree-id14512 . -4) (undo-tree-id14513 . -4) (undo-tree-id14514 . -4) (undo-tree-id14515 . -4) (undo-tree-id14516 . -4) (undo-tree-id14517 . -4) (undo-tree-id14518 . -4) (undo-tree-id14519 . -4) (undo-tree-id14520 . -4) (undo-tree-id14521 . -4) (undo-tree-id14522 . -4) (undo-tree-id14523 . -4) (undo-tree-id14524 . -4) (undo-tree-id14525 . -4) (undo-tree-id14526 . -4) (undo-tree-id14527 . -4) (undo-tree-id14528 . -4) (undo-tree-id14529 . -4) (undo-tree-id14530 . -4) (undo-tree-id14531 . -4) (undo-tree-id14532 . -81) 30494) nil (25755 14085 3712 28000) 0 nil])
([nil nil ((#("common to predict the square root of the height and width rather than the height and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 85 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14459 . -84) (undo-tree-id14460 . -4) (undo-tree-id14461 . -4) (undo-tree-id14462 . -4) (undo-tree-id14463 . -4) (undo-tree-id14464 . -4) (undo-tree-id14465 . -4) (undo-tree-id14466 . -4) (undo-tree-id14467 . -4) (undo-tree-id14468 . -4) (undo-tree-id14469 . -4) (undo-tree-id14470 . -4) (undo-tree-id14471 . -4) (undo-tree-id14472 . -4) (undo-tree-id14473 . -4) (undo-tree-id14474 . -4) (undo-tree-id14475 . -4) (undo-tree-id14476 . -4) (undo-tree-id14477 . -4) (undo-tree-id14478 . -4) (undo-tree-id14479 . -4) (undo-tree-id14480 . -4) (undo-tree-id14481 . -4) (undo-tree-id14482 . -4) (undo-tree-id14483 . -4) (undo-tree-id14484 . -4) (undo-tree-id14485 . -4) (undo-tree-id14486 . -4) (undo-tree-id14487 . -4) (undo-tree-id14488 . -4) (undo-tree-id14489 . -4) (undo-tree-id14490 . -4) (undo-tree-id14491 . -4) (undo-tree-id14492 . -4) (undo-tree-id14493 . -4) (undo-tree-id14494 . -4) (undo-tree-id14495 . -4) (undo-tree-id14496 . -4) (undo-tree-id14497 . -4) (undo-tree-id14498 . -4) (undo-tree-id14499 . -4) (undo-tree-id14500 . -4) (undo-tree-id14501 . -4) (undo-tree-id14502 . -4) (undo-tree-id14503 . -4) (undo-tree-id14504 . -4) (undo-tree-id14505 . -4) (undo-tree-id14506 . -4) (undo-tree-id14507 . -4) (undo-tree-id14508 . -4) (undo-tree-id14509 . -85) 30494) nil (25755 14092 531181 564000) 0 nil])
([nil nil ((#("width directly: this way, a 10-pixel error for a large bounding box will not be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 80 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14924 . -79) (undo-tree-id14925 . -4) (undo-tree-id14926 . -4) (undo-tree-id14927 . -4) (undo-tree-id14928 . -4) (undo-tree-id14929 . -4) (undo-tree-id14930 . -4) (undo-tree-id14931 . -4) (undo-tree-id14932 . -4) (undo-tree-id14933 . -4) (undo-tree-id14934 . -4) (undo-tree-id14935 . -4) (undo-tree-id14936 . -4) (undo-tree-id14937 . -4) (undo-tree-id14938 . -4) (undo-tree-id14939 . -4) (undo-tree-id14940 . -4) (undo-tree-id14941 . -4) (undo-tree-id14942 . -4) (undo-tree-id14943 . -4) (undo-tree-id14944 . -4) (undo-tree-id14945 . -4) (undo-tree-id14946 . -4) (undo-tree-id14947 . -4) (undo-tree-id14948 . -4) (undo-tree-id14949 . -4) (undo-tree-id14950 . -4) (undo-tree-id14951 . -4) (undo-tree-id14952 . -4) (undo-tree-id14953 . -4) (undo-tree-id14954 . -4) (undo-tree-id14955 . -4) (undo-tree-id14956 . -4) (undo-tree-id14957 . -4) (undo-tree-id14958 . -4) (undo-tree-id14959 . -4) (undo-tree-id14960 . -4) (undo-tree-id14961 . -4) (undo-tree-id14962 . -4) (undo-tree-id14963 . -4) (undo-tree-id14964 . -4) (undo-tree-id14965 . -4) (undo-tree-id14966 . -4) (undo-tree-id14967 . -4) (undo-tree-id14968 . -4) (undo-tree-id14969 . -4) (undo-tree-id14970 . -4) (undo-tree-id14971 . -4) (undo-tree-id14972 . -4) (undo-tree-id14973 . -4) (undo-tree-id14974 . -4) (undo-tree-id14975 . -4) (undo-tree-id14976 . -4) (undo-tree-id14977 . -4) (undo-tree-id14978 . -4) (undo-tree-id14979 . -4) (undo-tree-id14980 . -4) (undo-tree-id14981 . -4) (undo-tree-id14982 . -4) (undo-tree-id14983 . -4) (undo-tree-id14984 . -4) (undo-tree-id14985 . -4) (undo-tree-id14986 . -4) (undo-tree-id14987 . -4) (undo-tree-id14988 . -4) (undo-tree-id14989 . -4) (undo-tree-id14990 . -4) (undo-tree-id14991 . -4) (undo-tree-id14992 . -4) (undo-tree-id14993 . -4) (undo-tree-id14994 . -4) (undo-tree-id14995 . -4) (undo-tree-id14996 . -4) (undo-tree-id14997 . -4) (undo-tree-id14998 . -4) (undo-tree-id14999 . -4) (undo-tree-id15000 . -4) (undo-tree-id15001 . -4) (undo-tree-id15002 . -4) (undo-tree-id15003 . -4) (undo-tree-id15004 . -4) (undo-tree-id15005 . -4) (undo-tree-id15006 . -4) (undo-tree-id15007 . -4) (undo-tree-id15008 . -4) (undo-tree-id15009 . -4) (undo-tree-id15010 . -4) (undo-tree-id15011 . -4) (undo-tree-id15012 . -4) (undo-tree-id15013 . -4) (undo-tree-id15014 . -4) (undo-tree-id15015 . -4) (undo-tree-id15016 . -4) (undo-tree-id15017 . -4) (undo-tree-id15018 . -4) (undo-tree-id15019 . -4) (undo-tree-id15020 . -4) (undo-tree-id15021 . -4) (undo-tree-id15022 . -4) (undo-tree-id15023 . -4) (undo-tree-id15024 . -4) (undo-tree-id15025 . -4) (undo-tree-id15026 . -4) (undo-tree-id15027 . -4) (undo-tree-id15028 . -4) (undo-tree-id15029 . -4) (undo-tree-id15030 . -4) (undo-tree-id15031 . -4) (undo-tree-id15032 . -4) (undo-tree-id15033 . -4) (undo-tree-id15034 . -4) (undo-tree-id15035 . -4) (undo-tree-id15036 . -4) (undo-tree-id15037 . -4) (undo-tree-id15038 . -4) (undo-tree-id15039 . -4) (undo-tree-id15040 . -4) (undo-tree-id15041 . -4) (undo-tree-id15042 . -4) (undo-tree-id15043 . -4) (undo-tree-id15044 . -4) (undo-tree-id15045 . -4) (undo-tree-id15046 . -4) (undo-tree-id15047 . -4) (undo-tree-id15048 . -4) (undo-tree-id15049 . -4) (undo-tree-id15050 . -4) (undo-tree-id15051 . -4) (undo-tree-id15052 . -4) (undo-tree-id15053 . -4) (undo-tree-id15054 . -4) (undo-tree-id15055 . -4) (undo-tree-id15056 . -4) (undo-tree-id15057 . -4) (undo-tree-id15058 . -4) (undo-tree-id15059 . -4) (undo-tree-id15060 . -4) (undo-tree-id15061 . -4) (undo-tree-id15062 . -4) (undo-tree-id15063 . -4) (undo-tree-id15064 . -4) (undo-tree-id15065 . -4) (undo-tree-id15066 . -4) (undo-tree-id15067 . -4) (undo-tree-id15068 . -4) (undo-tree-id15069 . -4) (undo-tree-id15070 . -4) (undo-tree-id15071 . -4) (undo-tree-id15072 . -4) (undo-tree-id15073 . -4) (undo-tree-id15074 . -4) (undo-tree-id15075 . -4) (undo-tree-id15076 . -4) (undo-tree-id15077 . -4) (undo-tree-id15078 . -4) (undo-tree-id15079 . -4) (undo-tree-id15080 . -4) (undo-tree-id15081 . -4) (undo-tree-id15082 . -4) (undo-tree-id15083 . -4) (undo-tree-id15084 . -4) (undo-tree-id15085 . -4) (undo-tree-id15086 . -4) (undo-tree-id15087 . -4) (undo-tree-id15088 . -4) (undo-tree-id15089 . -4) (undo-tree-id15090 . -4) (undo-tree-id15091 . -4) (undo-tree-id15092 . -4) (undo-tree-id15093 . -4) (undo-tree-id15094 . -4) (undo-tree-id15095 . -4) (undo-tree-id15096 . -4) (undo-tree-id15097 . -4) (undo-tree-id15098 . -4) (undo-tree-id15099 . -4) (undo-tree-id15100 . -4) (undo-tree-id15101 . -4) (undo-tree-id15102 . -4) (undo-tree-id15103 . -4) (undo-tree-id15104 . -4) (undo-tree-id15105 . -4) (undo-tree-id15106 . -4) (undo-tree-id15107 . -4) (undo-tree-id15108 . -4) (undo-tree-id15109 . -4) (undo-tree-id15110 . -4) (undo-tree-id15111 . -4) (undo-tree-id15112 . -4) (undo-tree-id15113 . -4) (undo-tree-id15114 . -4) (undo-tree-id15115 . -4) (undo-tree-id15116 . -4) (undo-tree-id15117 . -4) (undo-tree-id15118 . -4) (undo-tree-id15119 . -4) (undo-tree-id15120 . -4) (undo-tree-id15121 . -4) (undo-tree-id15122 . -4) (undo-tree-id15123 . -4) (undo-tree-id15124 . -4) (undo-tree-id15125 . -4) (undo-tree-id15126 . -4) (undo-tree-id15127 . -4) (undo-tree-id15128 . -4) (undo-tree-id15129 . -4) (undo-tree-id15130 . -4) (undo-tree-id15131 . -4) (undo-tree-id15132 . -4) (undo-tree-id15133 . -4) (undo-tree-id15134 . -4) (undo-tree-id15135 . -4) (undo-tree-id15136 . -4) (undo-tree-id15137 . -4) (undo-tree-id15138 . -4) (undo-tree-id15139 . -4) (undo-tree-id15140 . -4) (undo-tree-id15141 . -4) (undo-tree-id15142 . -4) (undo-tree-id15143 . -4) (undo-tree-id15144 . -4) (undo-tree-id15145 . -4) (undo-tree-id15146 . -4) (undo-tree-id15147 . -4) (undo-tree-id15148 . -4) (undo-tree-id15149 . -4) (undo-tree-id15150 . -4) (undo-tree-id15151 . -4) (undo-tree-id15152 . -4) (undo-tree-id15153 . -4) (undo-tree-id15154 . -4) (undo-tree-id15155 . -4) (undo-tree-id15156 . -4) (undo-tree-id15157 . -4) (undo-tree-id15158 . -4) (undo-tree-id15159 . -4) (undo-tree-id15160 . -4) (undo-tree-id15161 . -4) (undo-tree-id15162 . -4) (undo-tree-id15163 . -4) (undo-tree-id15164 . -4) (undo-tree-id15165 . -4) (undo-tree-id15166 . -4) (undo-tree-id15167 . -4) (undo-tree-id15168 . -4) (undo-tree-id15169 . -4) (undo-tree-id15170 . -4) (undo-tree-id15171 . -4) (undo-tree-id15172 . -4) (undo-tree-id15173 . -4) (undo-tree-id15174 . -4) (undo-tree-id15175 . -4) (undo-tree-id15176 . -4) (undo-tree-id15177 . -4) (undo-tree-id15178 . -4) (undo-tree-id15179 . -4) (undo-tree-id15180 . -4) (undo-tree-id15181 . -4) (undo-tree-id15182 . -4) (undo-tree-id15183 . -4) (undo-tree-id15184 . -4) (undo-tree-id15185 . -4) (undo-tree-id15186 . -4) (undo-tree-id15187 . -4) (undo-tree-id15188 . -4) (undo-tree-id15189 . -4) (undo-tree-id15190 . -4) (undo-tree-id15191 . -4) (undo-tree-id15192 . -4) (undo-tree-id15193 . -4) (undo-tree-id15194 . -4) (undo-tree-id15195 . -4) (undo-tree-id15196 . -4) (undo-tree-id15197 . -4) (undo-tree-id15198 . -80) 30494) nil (25755 14102 222713 396000) 0 nil] [nil nil ((#("
widt" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30489) (undo-tree-id14547 . -4) (undo-tree-id14548 . -1) (undo-tree-id14549 . -1) (undo-tree-id14550 . -1) (undo-tree-id14551 . -1) (undo-tree-id14552 . -1) (undo-tree-id14553 . -1) (undo-tree-id14554 . -1) (undo-tree-id14555 . -1) (undo-tree-id14556 . -1) (undo-tree-id14557 . -1) (undo-tree-id14558 . -1) (undo-tree-id14559 . -1) (undo-tree-id14560 . -1) (undo-tree-id14561 . -1) (undo-tree-id14562 . -1) (undo-tree-id14563 . -1) (undo-tree-id14564 . -1) (undo-tree-id14565 . -1) (undo-tree-id14566 . -1) (undo-tree-id14567 . -1) (undo-tree-id14568 . -1) (undo-tree-id14569 . -1) (undo-tree-id14570 . -1) (undo-tree-id14571 . -1) (undo-tree-id14572 . -1) (undo-tree-id14573 . -1) (undo-tree-id14574 . -1) (undo-tree-id14575 . -1) (undo-tree-id14576 . -1) (undo-tree-id14577 . -1) (undo-tree-id14578 . -1) (undo-tree-id14579 . -1) (undo-tree-id14580 . -1) (undo-tree-id14581 . -1) (undo-tree-id14582 . -1) (undo-tree-id14583 . -1) (undo-tree-id14584 . -1) (undo-tree-id14585 . -1) (undo-tree-id14586 . -1) (undo-tree-id14587 . -1) (undo-tree-id14588 . -1) (undo-tree-id14589 . -1) (undo-tree-id14590 . -1) (undo-tree-id14591 . -1) (undo-tree-id14592 . -1) (undo-tree-id14593 . -1) (undo-tree-id14594 . -1) (undo-tree-id14595 . -1) (undo-tree-id14596 . -1) (undo-tree-id14597 . -1) (undo-tree-id14598 . -1) (undo-tree-id14599 . -1) (undo-tree-id14600 . -1) (undo-tree-id14601 . -1) (undo-tree-id14602 . -1) (undo-tree-id14603 . -1) (undo-tree-id14604 . -1) (undo-tree-id14605 . -1) (undo-tree-id14606 . -1) (undo-tree-id14607 . -1) (undo-tree-id14608 . -1) (undo-tree-id14609 . -1) (undo-tree-id14610 . -1) (undo-tree-id14611 . -1) (undo-tree-id14612 . -1) (undo-tree-id14613 . -1) (undo-tree-id14614 . -1) (undo-tree-id14615 . -1) (undo-tree-id14616 . -1) (undo-tree-id14617 . -1) (undo-tree-id14618 . -1) (undo-tree-id14619 . -1) (undo-tree-id14620 . -1) (undo-tree-id14621 . -1) (undo-tree-id14622 . -1) (undo-tree-id14623 . -1) (undo-tree-id14624 . -1) (undo-tree-id14625 . -1) (undo-tree-id14626 . -1) (undo-tree-id14627 . -1) (undo-tree-id14628 . -1) (undo-tree-id14629 . -1) (undo-tree-id14630 . -1) (undo-tree-id14631 . -1) (undo-tree-id14632 . -1) (undo-tree-id14633 . -1) (undo-tree-id14634 . -1) (undo-tree-id14635 . -1) (undo-tree-id14636 . -1) (undo-tree-id14637 . -1) (undo-tree-id14638 . -1) (undo-tree-id14639 . -1) (undo-tree-id14640 . -1) (undo-tree-id14641 . -1) (undo-tree-id14642 . -1) (undo-tree-id14643 . -1) (undo-tree-id14644 . -1) (undo-tree-id14645 . -1) (undo-tree-id14646 . -5) (undo-tree-id14647 . -5) (undo-tree-id14648 . -5) (undo-tree-id14649 . -5) (undo-tree-id14650 . -5) (undo-tree-id14651 . -5) (undo-tree-id14652 . -5) (undo-tree-id14653 . -5) (undo-tree-id14654 . -5) (undo-tree-id14655 . -5) (undo-tree-id14656 . -5) (undo-tree-id14657 . -5) (undo-tree-id14658 . -5) (undo-tree-id14659 . -5) (undo-tree-id14660 . -5) (undo-tree-id14661 . -5) (undo-tree-id14662 . -5) (undo-tree-id14663 . -5) (undo-tree-id14664 . -5) (undo-tree-id14665 . -5) (undo-tree-id14666 . -5) (undo-tree-id14667 . -5) (undo-tree-id14668 . -5) (undo-tree-id14669 . -5) (undo-tree-id14670 . -5) (undo-tree-id14671 . -5) (undo-tree-id14672 . -5) (undo-tree-id14673 . -5) (undo-tree-id14674 . -5) (undo-tree-id14675 . -5) (undo-tree-id14676 . -5) (undo-tree-id14677 . -5) (undo-tree-id14678 . -5) (undo-tree-id14679 . -5) (undo-tree-id14680 . -5) (undo-tree-id14681 . -5) (undo-tree-id14682 . -5) (undo-tree-id14683 . -5) (undo-tree-id14684 . -5) (undo-tree-id14685 . -5) (undo-tree-id14686 . -5) (undo-tree-id14687 . -5) (undo-tree-id14688 . -5) (undo-tree-id14689 . -5) (undo-tree-id14690 . -5) (undo-tree-id14691 . -5) (undo-tree-id14692 . -5) (undo-tree-id14693 . -5) (undo-tree-id14694 . -5) (undo-tree-id14695 . -5) (undo-tree-id14696 . -5) (undo-tree-id14697 . -5) (undo-tree-id14698 . -5) (undo-tree-id14699 . -5) (undo-tree-id14700 . -5) (undo-tree-id14701 . -5) (undo-tree-id14702 . -5) (undo-tree-id14703 . -5) (undo-tree-id14704 . -5) (undo-tree-id14705 . -5) (undo-tree-id14706 . -5) (undo-tree-id14707 . -5) (undo-tree-id14708 . -5) (undo-tree-id14709 . -5) (undo-tree-id14710 . -5) (undo-tree-id14711 . -5) (undo-tree-id14712 . -5) (undo-tree-id14713 . -5) (undo-tree-id14714 . -5) (undo-tree-id14715 . -5) (undo-tree-id14716 . -5) (undo-tree-id14717 . -5) (undo-tree-id14718 . -5) (undo-tree-id14719 . -5) (undo-tree-id14720 . -5) (undo-tree-id14721 . -5) (undo-tree-id14722 . -5) (undo-tree-id14723 . -5) (undo-tree-id14724 . -5) (undo-tree-id14725 . -5) (undo-tree-id14726 . -5) (undo-tree-id14727 . -5) (undo-tree-id14728 . -5) (undo-tree-id14729 . -5) (undo-tree-id14730 . -5) (undo-tree-id14731 . -5) (undo-tree-id14732 . -5) (undo-tree-id14733 . -5) (undo-tree-id14734 . -5) (undo-tree-id14735 . -5) (undo-tree-id14736 . -5) (undo-tree-id14737 . -5) (undo-tree-id14738 . -5) (undo-tree-id14739 . -5) (undo-tree-id14740 . -5) (undo-tree-id14741 . -5) (undo-tree-id14742 . -5) (undo-tree-id14743 . -5) (undo-tree-id14744 . -5) (undo-tree-id14745 . -5) (undo-tree-id14746 . -5) (undo-tree-id14747 . -5) (undo-tree-id14748 . -5) (undo-tree-id14749 . -5) (undo-tree-id14750 . -5) (undo-tree-id14751 . -5) (undo-tree-id14752 . -5) (undo-tree-id14753 . -5) (undo-tree-id14754 . -5) (undo-tree-id14755 . -5) (undo-tree-id14756 . -5) (undo-tree-id14757 . -5) (undo-tree-id14758 . -5) (undo-tree-id14759 . -5) (undo-tree-id14760 . -5) (undo-tree-id14761 . -5) (undo-tree-id14762 . -5) (undo-tree-id14763 . -5) (undo-tree-id14764 . -5) (undo-tree-id14765 . -5) (undo-tree-id14766 . -5) (undo-tree-id14767 . -5) (undo-tree-id14768 . -5) (undo-tree-id14769 . -5) (undo-tree-id14770 . -5) (undo-tree-id14771 . -5) (undo-tree-id14772 . -5) (undo-tree-id14773 . -5) (undo-tree-id14774 . -5) (undo-tree-id14775 . -5) (undo-tree-id14776 . -5) (undo-tree-id14777 . -5) (undo-tree-id14778 . -5) (undo-tree-id14779 . -5) (undo-tree-id14780 . -5) (undo-tree-id14781 . -5) (undo-tree-id14782 . -5) (undo-tree-id14783 . -5) (undo-tree-id14784 . -5) (undo-tree-id14785 . -5) (undo-tree-id14786 . -5) (undo-tree-id14787 . -5) (undo-tree-id14788 . -5) (undo-tree-id14789 . -5) (undo-tree-id14790 . -5) (undo-tree-id14791 . -5) (undo-tree-id14792 . -5) (undo-tree-id14793 . -5) (undo-tree-id14794 . -5) (undo-tree-id14795 . -5) (undo-tree-id14796 . -5) (undo-tree-id14797 . -5) (undo-tree-id14798 . -5) (undo-tree-id14799 . -5) (undo-tree-id14800 . -5) (undo-tree-id14801 . -5) (undo-tree-id14802 . -5) (undo-tree-id14803 . -5) (undo-tree-id14804 . -5) (undo-tree-id14805 . -5) (undo-tree-id14806 . -5) (undo-tree-id14807 . -5) (undo-tree-id14808 . -5) (undo-tree-id14809 . -5) (undo-tree-id14810 . -5) (undo-tree-id14811 . -5) (undo-tree-id14812 . -5) (undo-tree-id14813 . -5) (undo-tree-id14814 . -5) (undo-tree-id14815 . -5) (undo-tree-id14816 . -5) (undo-tree-id14817 . -5) (undo-tree-id14818 . -5) (undo-tree-id14819 . -5) (undo-tree-id14820 . -5) (undo-tree-id14821 . -5) (undo-tree-id14822 . -5) (undo-tree-id14823 . -5) (undo-tree-id14824 . -5) (undo-tree-id14825 . -5) (undo-tree-id14826 . -5) (undo-tree-id14827 . -5) (undo-tree-id14828 . -5) (undo-tree-id14829 . -5) (undo-tree-id14830 . -5) (undo-tree-id14831 . -5) (undo-tree-id14832 . -5) (undo-tree-id14833 . -5) (undo-tree-id14834 . -5) (undo-tree-id14835 . -5) (undo-tree-id14836 . -5) (undo-tree-id14837 . -5) (undo-tree-id14838 . -5) (undo-tree-id14839 . -5) (undo-tree-id14840 . -5) (undo-tree-id14841 . -5) (undo-tree-id14842 . -5) (undo-tree-id14843 . -5) (undo-tree-id14844 . -5) (undo-tree-id14845 . -5) (undo-tree-id14846 . -5) (undo-tree-id14847 . -5) (undo-tree-id14848 . -5) (undo-tree-id14849 . -5) (undo-tree-id14850 . -5) (undo-tree-id14851 . -5) (undo-tree-id14852 . -5) (undo-tree-id14853 . -5) (undo-tree-id14854 . -5) (undo-tree-id14855 . -5) (undo-tree-id14856 . -5) (undo-tree-id14857 . -5) (undo-tree-id14858 . -5) (undo-tree-id14859 . -5) (undo-tree-id14860 . -5) (undo-tree-id14861 . -5) (undo-tree-id14862 . -5) (undo-tree-id14863 . -5) (undo-tree-id14864 . -5) (undo-tree-id14865 . -5) (undo-tree-id14866 . -5) (undo-tree-id14867 . -5) (undo-tree-id14868 . -5) (undo-tree-id14869 . -5) (undo-tree-id14870 . -5) (undo-tree-id14871 . -5) (undo-tree-id14872 . -5) (undo-tree-id14873 . -5) (undo-tree-id14874 . -5) (undo-tree-id14875 . -5) (undo-tree-id14876 . -5) (undo-tree-id14877 . -5) (undo-tree-id14878 . -5) (undo-tree-id14879 . -5) (undo-tree-id14880 . -5) (undo-tree-id14881 . -5) (undo-tree-id14882 . -5) (undo-tree-id14883 . -5) (undo-tree-id14884 . -5) (undo-tree-id14885 . -5) (undo-tree-id14886 . -5) (undo-tree-id14887 . -5) (undo-tree-id14888 . -5) (undo-tree-id14889 . -5) (undo-tree-id14890 . -5) (undo-tree-id14891 . -5) (undo-tree-id14892 . -5) (undo-tree-id14893 . -5) (undo-tree-id14894 . -5) (undo-tree-id14895 . -5) (undo-tree-id14896 . -5) (undo-tree-id14897 . -5) (undo-tree-id14898 . -5) (undo-tree-id14899 . -5) (undo-tree-id14900 . -5) 30494) ((30489 . 30494)) (25755 14092 530122 86000) 0 nil] [nil nil ((#("
widt" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30489) (undo-tree-id14123 . -4) (undo-tree-id14124 . -1) (undo-tree-id14125 . -1) (undo-tree-id14126 . -1) (undo-tree-id14127 . -1) (undo-tree-id14128 . -1) (undo-tree-id14129 . -1) (undo-tree-id14130 . -1) (undo-tree-id14131 . -1) (undo-tree-id14132 . -1) (undo-tree-id14133 . -1) (undo-tree-id14134 . -1) (undo-tree-id14135 . -1) (undo-tree-id14136 . -1) (undo-tree-id14137 . -1) (undo-tree-id14138 . -1) (undo-tree-id14139 . -1) (undo-tree-id14140 . -1) (undo-tree-id14141 . -1) (undo-tree-id14142 . -1) (undo-tree-id14143 . -1) (undo-tree-id14144 . -1) (undo-tree-id14145 . -1) (undo-tree-id14146 . -1) (undo-tree-id14147 . -1) (undo-tree-id14148 . -1) (undo-tree-id14149 . -1) (undo-tree-id14150 . -1) (undo-tree-id14151 . -1) (undo-tree-id14152 . -1) (undo-tree-id14153 . -1) (undo-tree-id14154 . -1) (undo-tree-id14155 . -1) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (undo-tree-id14159 . -1) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) (undo-tree-id14162 . -1) (undo-tree-id14163 . -1) (undo-tree-id14164 . -1) (undo-tree-id14165 . -1) (undo-tree-id14166 . -1) (undo-tree-id14167 . -1) (undo-tree-id14168 . -1) (undo-tree-id14169 . -1) (undo-tree-id14170 . -1) (undo-tree-id14171 . -1) (undo-tree-id14172 . -1) (undo-tree-id14173 . -1) (undo-tree-id14174 . -1) (undo-tree-id14175 . -1) (undo-tree-id14176 . -1) (undo-tree-id14177 . -1) (undo-tree-id14178 . -1) (undo-tree-id14179 . -1) (undo-tree-id14180 . -1) (undo-tree-id14181 . -1) (undo-tree-id14182 . -1) (undo-tree-id14183 . -1) (undo-tree-id14184 . -1) (undo-tree-id14185 . -1) (undo-tree-id14186 . -1) (undo-tree-id14187 . -1) (undo-tree-id14188 . -1) (undo-tree-id14189 . -1) (undo-tree-id14190 . -1) (undo-tree-id14191 . -1) (undo-tree-id14192 . -1) (undo-tree-id14193 . -1) (undo-tree-id14194 . -1) (undo-tree-id14195 . -1) (undo-tree-id14196 . -1) (undo-tree-id14197 . -1) (undo-tree-id14198 . -1) (undo-tree-id14199 . -1) (undo-tree-id14200 . -1) (undo-tree-id14201 . -1) (undo-tree-id14202 . -1) (undo-tree-id14203 . -1) (undo-tree-id14204 . -1) (undo-tree-id14205 . -1) (undo-tree-id14206 . -1) (undo-tree-id14207 . -1) (undo-tree-id14208 . -1) (undo-tree-id14209 . -1) (undo-tree-id14210 . -1) (undo-tree-id14211 . -1) (undo-tree-id14212 . -1) (undo-tree-id14213 . -1) (undo-tree-id14214 . -1) (undo-tree-id14215 . -1) (undo-tree-id14216 . -1) (undo-tree-id14217 . -1) (undo-tree-id14218 . -1) (undo-tree-id14219 . -1) (undo-tree-id14220 . -1) (undo-tree-id14221 . -1) (undo-tree-id14222 . -5) (undo-tree-id14223 . -5) (undo-tree-id14224 . -5) (undo-tree-id14225 . -5) (undo-tree-id14226 . -5) (undo-tree-id14227 . -5) (undo-tree-id14228 . -5) (undo-tree-id14229 . -5) (undo-tree-id14230 . -5) (undo-tree-id14231 . -5) (undo-tree-id14232 . -5) (undo-tree-id14233 . -5) (undo-tree-id14234 . -5) (undo-tree-id14235 . -5) (undo-tree-id14236 . -5) (undo-tree-id14237 . -5) (undo-tree-id14238 . -5) (undo-tree-id14239 . -5) (undo-tree-id14240 . -5) (undo-tree-id14241 . -5) (undo-tree-id14242 . -5) (undo-tree-id14243 . -5) (undo-tree-id14244 . -5) (undo-tree-id14245 . -5) (undo-tree-id14246 . -5) (undo-tree-id14247 . -5) (undo-tree-id14248 . -5) (undo-tree-id14249 . -5) (undo-tree-id14250 . -5) (undo-tree-id14251 . -5) (undo-tree-id14252 . -5) (undo-tree-id14253 . -5) (undo-tree-id14254 . -5) (undo-tree-id14255 . -5) (undo-tree-id14256 . -5) (undo-tree-id14257 . -5) (undo-tree-id14258 . -5) (undo-tree-id14259 . -5) (undo-tree-id14260 . -5) (undo-tree-id14261 . -5) (undo-tree-id14262 . -5) (undo-tree-id14263 . -5) (undo-tree-id14264 . -5) (undo-tree-id14265 . -5) (undo-tree-id14266 . -5) (undo-tree-id14267 . -5) (undo-tree-id14268 . -5) (undo-tree-id14269 . -5) (undo-tree-id14270 . -5) (undo-tree-id14271 . -5) (undo-tree-id14272 . -5) (undo-tree-id14273 . -5) (undo-tree-id14274 . -5) (undo-tree-id14275 . -5) (undo-tree-id14276 . -5) (undo-tree-id14277 . -5) (undo-tree-id14278 . -5) (undo-tree-id14279 . -5) (undo-tree-id14280 . -5) (undo-tree-id14281 . -5) (undo-tree-id14282 . -5) (undo-tree-id14283 . -5) (undo-tree-id14284 . -5) (undo-tree-id14285 . -5) (undo-tree-id14286 . -5) (undo-tree-id14287 . -5) (undo-tree-id14288 . -5) (undo-tree-id14289 . -5) (undo-tree-id14290 . -5) (undo-tree-id14291 . -5) (undo-tree-id14292 . -5) (undo-tree-id14293 . -5) (undo-tree-id14294 . -5) (undo-tree-id14295 . -5) (undo-tree-id14296 . -5) (undo-tree-id14297 . -5) (undo-tree-id14298 . -5) (undo-tree-id14299 . -5) (undo-tree-id14300 . -5) (undo-tree-id14301 . -5) (undo-tree-id14302 . -5) (undo-tree-id14303 . -5) (undo-tree-id14304 . -5) (undo-tree-id14305 . -5) (undo-tree-id14306 . -5) (undo-tree-id14307 . -5) (undo-tree-id14308 . -5) (undo-tree-id14309 . -5) (undo-tree-id14310 . -5) (undo-tree-id14311 . -5) (undo-tree-id14312 . -5) (undo-tree-id14313 . -5) (undo-tree-id14314 . -5) (undo-tree-id14315 . -5) (undo-tree-id14316 . -5) (undo-tree-id14317 . -5) (undo-tree-id14318 . -5) (undo-tree-id14319 . -5) (undo-tree-id14320 . -5) (undo-tree-id14321 . -5) (undo-tree-id14322 . -5) (undo-tree-id14323 . -5) (undo-tree-id14324 . -5) (undo-tree-id14325 . -5) (undo-tree-id14326 . -5) (undo-tree-id14327 . -5) (undo-tree-id14328 . -5) (undo-tree-id14329 . -5) (undo-tree-id14330 . -5) (undo-tree-id14331 . -5) (undo-tree-id14332 . -5) (undo-tree-id14333 . -5) (undo-tree-id14334 . -5) (undo-tree-id14335 . -5) (undo-tree-id14336 . -5) (undo-tree-id14337 . -5) (undo-tree-id14338 . -5) (undo-tree-id14339 . -5) (undo-tree-id14340 . -5) (undo-tree-id14341 . -5) (undo-tree-id14342 . -5) (undo-tree-id14343 . -5) (undo-tree-id14344 . -5) (undo-tree-id14345 . -5) (undo-tree-id14346 . -5) (undo-tree-id14347 . -5) (undo-tree-id14348 . -5) (undo-tree-id14349 . -5) (undo-tree-id14350 . -5) (undo-tree-id14351 . -5) (undo-tree-id14352 . -5) (undo-tree-id14353 . -5) (undo-tree-id14354 . -5) (undo-tree-id14355 . -5) (undo-tree-id14356 . -5) (undo-tree-id14357 . -5) (undo-tree-id14358 . -5) (undo-tree-id14359 . -5) (undo-tree-id14360 . -5) (undo-tree-id14361 . -5) (undo-tree-id14362 . -5) (undo-tree-id14363 . -5) (undo-tree-id14364 . -5) (undo-tree-id14365 . -5) (undo-tree-id14366 . -5) (undo-tree-id14367 . -5) (undo-tree-id14368 . -5) (undo-tree-id14369 . -5) (undo-tree-id14370 . -5) (undo-tree-id14371 . -5) (undo-tree-id14372 . -5) (undo-tree-id14373 . -5) (undo-tree-id14374 . -5) (undo-tree-id14375 . -5) (undo-tree-id14376 . -5) (undo-tree-id14377 . -5) (undo-tree-id14378 . -5) (undo-tree-id14379 . -5) (undo-tree-id14380 . -5) (undo-tree-id14381 . -5) (undo-tree-id14382 . -5) (undo-tree-id14383 . -5) (undo-tree-id14384 . -5) (undo-tree-id14385 . -5) (undo-tree-id14386 . -5) (undo-tree-id14387 . -5) (undo-tree-id14388 . -5) (undo-tree-id14389 . -5) (undo-tree-id14390 . -5) (undo-tree-id14391 . -5) (undo-tree-id14392 . -5) (undo-tree-id14393 . -5) (undo-tree-id14394 . -5) (undo-tree-id14395 . -5) (undo-tree-id14396 . -5) (undo-tree-id14397 . -5) (undo-tree-id14398 . -5) (undo-tree-id14399 . -5) (undo-tree-id14400 . -5) (undo-tree-id14401 . -5) (undo-tree-id14402 . -5) (undo-tree-id14403 . -5) (undo-tree-id14404 . -5) (undo-tree-id14405 . -5) (undo-tree-id14406 . -5) (undo-tree-id14407 . -5) (undo-tree-id14408 . -5) (undo-tree-id14409 . -5) (undo-tree-id14410 . -5) (undo-tree-id14411 . -5) (undo-tree-id14412 . -5) (undo-tree-id14413 . -5) (undo-tree-id14414 . -5) (undo-tree-id14415 . -5) (undo-tree-id14416 . -5) (undo-tree-id14417 . -5) (undo-tree-id14418 . -5) (undo-tree-id14419 . -5) (undo-tree-id14420 . -5) (undo-tree-id14421 . -5) (undo-tree-id14422 . -5) (undo-tree-id14423 . -5) (undo-tree-id14424 . -5) (undo-tree-id14425 . -5) (undo-tree-id14426 . -5) (undo-tree-id14427 . -5) (undo-tree-id14428 . -5) (undo-tree-id14429 . -5) (undo-tree-id14430 . -5) (undo-tree-id14431 . -5) (undo-tree-id14432 . -5) (undo-tree-id14433 . -5) (undo-tree-id14434 . -5) (undo-tree-id14435 . -5) (undo-tree-id14436 . -5) (undo-tree-id14437 . -5) (undo-tree-id14438 . -5) (undo-tree-id14439 . -5) (undo-tree-id14440 . -5) (undo-tree-id14441 . -5) (undo-tree-id14442 . -5) (undo-tree-id14443 . -5) (undo-tree-id14444 . -5) (undo-tree-id14445 . -5) (undo-tree-id14446 . -5) (undo-tree-id14447 . -5) (undo-tree-id14448 . -5) (undo-tree-id14449 . -5) (undo-tree-id14450 . -5) (undo-tree-id14451 . -5) (undo-tree-id14452 . -5) (undo-tree-id14453 . -5) (undo-tree-id14454 . -5) (undo-tree-id14455 . -5) (undo-tree-id14456 . -5) (undo-tree-id14457 . -5) (undo-tree-id14458 . -5) 30494) ((30489 . 30494)) (25755 14085 3644 649000) 0 nil])
([nil nil ((#("penalized as much as a 10-pixel error for a small bounding box.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 45 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30490) (undo-tree-id14901 . -63) (undo-tree-id14902 . -4) (undo-tree-id14903 . -4) (undo-tree-id14904 . -4) (undo-tree-id14905 . -4) (undo-tree-id14906 . -4) (undo-tree-id14907 . -4) (undo-tree-id14908 . -4) (undo-tree-id14909 . -4) (undo-tree-id14910 . -4) (undo-tree-id14911 . -4) (undo-tree-id14912 . -4) (undo-tree-id14913 . -4) (undo-tree-id14914 . -4) (undo-tree-id14915 . -4) (undo-tree-id14916 . -4) (undo-tree-id14917 . -4) (undo-tree-id14918 . -4) (undo-tree-id14919 . -4) (undo-tree-id14920 . -4) (undo-tree-id14921 . -4) (undo-tree-id14922 . -4) (undo-tree-id14923 . -64) 30494) nil (25755 14102 222493 479000) 0 nil])
nil
nil
([nil nil ((#("often works fairly well as a cost function to train the model, but" 0 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30498) (undo-tree-id15245 . -65) (undo-tree-id15246 . 65) (undo-tree-id15247 . -66) (t 25755 14102 251624 804000)) nil (25755 14144 519756 827000) 0 nil])
([nil nil ((30497 . 30498) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 30497) (undo-tree-id15204 . -1) (undo-tree-id15205 . -1) (undo-tree-id15206 . -1) (undo-tree-id15207 . -1) (undo-tree-id15208 . -1) (undo-tree-id15209 . -1) (undo-tree-id15210 . -1) (undo-tree-id15211 . -1) (undo-tree-id15212 . -1) (undo-tree-id15213 . -1) (undo-tree-id15214 . -1) (undo-tree-id15215 . -1) (undo-tree-id15216 . -1) (undo-tree-id15217 . -1) (undo-tree-id15218 . -1) (undo-tree-id15219 . -1) (undo-tree-id15220 . -1) (undo-tree-id15221 . -1) (undo-tree-id15222 . -1) (undo-tree-id15223 . -1) (undo-tree-id15224 . -1) (undo-tree-id15225 . -1) (undo-tree-id15226 . -1) (undo-tree-id15227 . -1) (undo-tree-id15228 . -1) (undo-tree-id15229 . -1) (undo-tree-id15230 . -1) (undo-tree-id15231 . -1) (undo-tree-id15232 . -1) (undo-tree-id15233 . -1) (undo-tree-id15234 . -1) (undo-tree-id15235 . -1) (undo-tree-id15236 . -1) (undo-tree-id15237 . -1) (undo-tree-id15238 . -1) (undo-tree-id15239 . -1) (undo-tree-id15240 . -1) (undo-tree-id15241 . -1) (undo-tree-id15242 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30498) (undo-tree-id15243 . 1) (undo-tree-id15244 . -1) 30497) nil (25755 14144 519751 694000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 30497) (undo-tree-id15203 . -1)) nil (25755 14144 519716 663000) 0 nil])
([nil nil ((#("it " 0 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30497) (undo-tree-id15199 . -2) (undo-tree-id15200 . 3) (undo-tree-id15201 . -2) (undo-tree-id15202 . -3)) nil (25755 14144 519714 6000) 0 nil])
([nil nil ((30497 . 30498)) nil (25755 14144 519703 258000) 0 nil])
([nil nil ((30579 . 30581)) nil (25755 14144 519697 94000) 0 nil])
([nil nil ((30637 . 30638) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30637) (undo-tree-id15263 . -1) 30581 (t 25755 14144 538362 666000)) nil (25755 14156 699721 212000) 0 nil])
([nil nil ((30651 . 30652)) nil (25755 14156 699718 714000) 0 nil])
([nil nil ((#("the area of overlap between the predicted bounding box and
" 0 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30652) (undo-tree-id15260 . -58) (undo-tree-id15261 . 59) (undo-tree-id15262 . -59)) nil (25755 14156 699717 620000) 0 nil])
([nil nil ((#("the target bounding box, divided by the area of their union (see Figure 14-
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30652) (undo-tree-id15257 . -75) (undo-tree-id15258 . 76) (undo-tree-id15259 . -76)) nil (25755 14156 699714 203000) 0 nil])
([nil nil ((#("23). In tf.keras, it is implemented by the tf.keras.metrics.MeanIoU
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30652) (undo-tree-id15254 . -67) (undo-tree-id15255 . 68) (undo-tree-id15256 . -68)) nil (25755 14156 699709 616000) 0 nil])
([nil nil ((#("class.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 30652) (undo-tree-id15248 . -6) (undo-tree-id15249 . 7) (undo-tree-id15250 . -5) (undo-tree-id15251 . -5) (undo-tree-id15252 . -5) (undo-tree-id15253 . -7)) nil (25755 14156 699701 102000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31732 . 31733) (nil fontified nil 31700 . 31733) (nil fontified nil 31626 . 31700) (nil fontified nil 31553 . 31626) (nil fontified nil 31482 . 31553) (nil fontified nil 31409 . 31482) (nil fontified nil 31331 . 31409) (nil fontified nil 31255 . 31331) (nil fontified nil 31183 . 31255) (nil fontified nil 31105 . 31183) (nil fontified nil 31032 . 31105) (nil fontified nil 30960 . 31032) (nil fontified nil 30886 . 30960) (nil fontified nil 30813 . 30886) (nil fontified nil 30740 . 30813) (nil fontified nil 30669 . 30740) (nil fontified nil 30652 . 30669) (30652 . 31733) (t 25755 14156 771138 194000)) nil (25755 14199 900784 830000) 0 nil])
([nil nil ((31733 . 31735)) nil (25755 14199 900774 791000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33342 . 33343) (nil fontified nil 33315 . 33343) (nil fontified nil 33253 . 33315) (nil fontified nil 33180 . 33253) (nil fontified nil 33104 . 33180) (nil fontified nil 33100 . 33104) (nil fontified nil 33031 . 33100) (nil fontified nil 33008 . 33031) (nil fontified nil 32943 . 33008) (nil fontified nil 32882 . 32943) (nil fontified nil 32816 . 32882) (nil fontified nil 32751 . 32816) (nil fontified nil 32617 . 32751) (nil fontified nil 32549 . 32617) (nil fontified nil 32505 . 32549) (nil fontified nil 32442 . 32505) (nil fontified nil 32378 . 32442) (nil fontified nil 32314 . 32378) (nil fontified nil 32247 . 32314) (nil fontified nil 32181 . 32247) (nil fontified nil 32117 . 32181) (nil fontified nil 32048 . 32117) (nil fontified nil 32033 . 32048) (nil fontified nil 31961 . 32033) (nil fontified nil 31887 . 31961) (nil fontified nil 31811 . 31887) (nil fontified nil 31735 . 31811) (31735 . 33343)) nil (25755 14199 900771 11000) 0 nil])
([nil nil ((30653 . 30656) (30652 . 30653) (30651 . 30652) 30587) nil (25755 14199 900756 882000) 0 nil])
([nil nil ((nil keymap (keymap) 30655 . 30656) (nil face org-level-1 30655 . 30656) (nil line-prefix #("  " 0 2 (face org-indent)) 30655 . 30656) (nil wrap-prefix #("  " 0 2 (face org-indent)) 30655 . 30656) (nil fontified nil 30655 . 30656) (30655 . 30656) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 30655) (undo-tree-id15264 . -1) (undo-tree-id15265 . -1) (undo-tree-id15266 . -1) (undo-tree-id15267 . -1) (undo-tree-id15268 . -1) (undo-tree-id15269 . -1) (undo-tree-id15270 . -1) (undo-tree-id15271 . -1) (undo-tree-id15272 . -1) (undo-tree-id15273 . -1) (undo-tree-id15274 . -1) (undo-tree-id15275 . -1) (undo-tree-id15276 . -1) (undo-tree-id15277 . -1) (undo-tree-id15278 . -1) (undo-tree-id15279 . -1) (undo-tree-id15280 . -1) (undo-tree-id15281 . -1) (undo-tree-id15282 . -1) (undo-tree-id15283 . -1) (undo-tree-id15284 . -1) (undo-tree-id15285 . -1) (undo-tree-id15286 . -1) (undo-tree-id15287 . -1) (undo-tree-id15288 . -1) (undo-tree-id15289 . -1) (undo-tree-id15290 . -1) (undo-tree-id15291 . -1) (undo-tree-id15292 . -1) (undo-tree-id15293 . -1) (undo-tree-id15294 . -1) (undo-tree-id15295 . -1) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) (undo-tree-id15299 . -1) (undo-tree-id15300 . -1) (undo-tree-id15301 . -1) (undo-tree-id15302 . -1) (undo-tree-id15303 . -1) (undo-tree-id15304 . -1) (undo-tree-id15305 . -1) (undo-tree-id15306 . -1) (undo-tree-id15307 . -1) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) (undo-tree-id15317 . -1) (undo-tree-id15318 . -1) (undo-tree-id15319 . -1) (undo-tree-id15320 . -1) (undo-tree-id15321 . -1) (undo-tree-id15322 . -1) (undo-tree-id15323 . -1) (undo-tree-id15324 . -1) (undo-tree-id15325 . -1) (undo-tree-id15326 . -1) (undo-tree-id15327 . -1) (undo-tree-id15328 . -1) (undo-tree-id15329 . -1) (undo-tree-id15330 . -1) (undo-tree-id15331 . -1) (undo-tree-id15332 . -1) (undo-tree-id15333 . -1) (undo-tree-id15334 . -1) (undo-tree-id15335 . -1) (undo-tree-id15336 . -1) (undo-tree-id15337 . -1) (undo-tree-id15338 . -1) (undo-tree-id15339 . -1) (undo-tree-id15340 . -1) (undo-tree-id15341 . -1) (undo-tree-id15342 . -1) (undo-tree-id15343 . -1) (undo-tree-id15344 . -1) (undo-tree-id15345 . -1) (undo-tree-id15346 . -1) (undo-tree-id15347 . -1) (undo-tree-id15348 . -1) (undo-tree-id15349 . -1) (undo-tree-id15350 . -1) (undo-tree-id15351 . -1) (undo-tree-id15352 . -1) (undo-tree-id15353 . -1) (undo-tree-id15354 . -1) (undo-tree-id15355 . -1) (undo-tree-id15356 . -1) (undo-tree-id15357 . -1) (undo-tree-id15358 . -1) (undo-tree-id15359 . -1) (undo-tree-id15360 . -1) (undo-tree-id15361 . -1) (undo-tree-id15362 . -1) (undo-tree-id15363 . -1) (undo-tree-id15364 . -1) (undo-tree-id15365 . -1) (undo-tree-id15366 . -1) (undo-tree-id15367 . -1) (undo-tree-id15368 . -1) (undo-tree-id15369 . -1) (undo-tree-id15370 . -1) (undo-tree-id15371 . -1) (undo-tree-id15372 . -1) (undo-tree-id15373 . -1) (undo-tree-id15374 . -1) (undo-tree-id15375 . -1) (undo-tree-id15376 . -1) (undo-tree-id15377 . -1) (undo-tree-id15378 . -1) (undo-tree-id15379 . -1) (undo-tree-id15380 . -1) (undo-tree-id15381 . -1) (undo-tree-id15382 . -1) (undo-tree-id15383 . -1) (undo-tree-id15384 . -1) (undo-tree-id15385 . -1) (undo-tree-id15386 . -1) (undo-tree-id15387 . -1) (undo-tree-id15388 . -1) (undo-tree-id15389 . -1) (undo-tree-id15390 . -1) (undo-tree-id15391 . -1) (undo-tree-id15392 . -1) (undo-tree-id15393 . -1) (undo-tree-id15394 . -1) (undo-tree-id15395 . -1) (undo-tree-id15396 . -1) (undo-tree-id15397 . -1) (undo-tree-id15398 . -1) (undo-tree-id15399 . -1) (undo-tree-id15400 . -1) (undo-tree-id15401 . -1) (undo-tree-id15402 . -1) (undo-tree-id15403 . -1) (undo-tree-id15404 . -1) (undo-tree-id15405 . -1) (undo-tree-id15406 . -1) (undo-tree-id15407 . -1) (undo-tree-id15408 . -1) (undo-tree-id15409 . -1) (undo-tree-id15410 . -1) (undo-tree-id15411 . -1) (undo-tree-id15412 . -1) (undo-tree-id15413 . -1) (undo-tree-id15414 . -1) (undo-tree-id15415 . -1) (undo-tree-id15416 . -1) (undo-tree-id15417 . -1) (undo-tree-id15418 . -1) (undo-tree-id15419 . -1) (#("
" 0 1 (line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) fontified t)) . -30656) (undo-tree-id15420 . 1) (undo-tree-id15421 . -1) (undo-tree-id15422 . -1) (undo-tree-id15423 . -1) (undo-tree-id15424 . -1) (undo-tree-id15425 . -1) (undo-tree-id15426 . -1) (undo-tree-id15427 . -1) (undo-tree-id15428 . -1) (undo-tree-id15429 . -1) (undo-tree-id15430 . -1) (undo-tree-id15431 . -1) (undo-tree-id15432 . -1) (undo-tree-id15433 . -1) (undo-tree-id15434 . -1) (undo-tree-id15435 . -1) (undo-tree-id15436 . -1) (undo-tree-id15437 . -1) (undo-tree-id15438 . -1) (undo-tree-id15439 . -1) (undo-tree-id15440 . -1) (undo-tree-id15441 . -1) (undo-tree-id15442 . -1) (undo-tree-id15443 . -1) (undo-tree-id15444 . -1) (undo-tree-id15445 . -1) (undo-tree-id15446 . -1) (undo-tree-id15447 . -1) (undo-tree-id15448 . -1) (undo-tree-id15449 . -1) (undo-tree-id15450 . -1) (undo-tree-id15451 . -1) (undo-tree-id15452 . -1) (undo-tree-id15453 . -1) (undo-tree-id15454 . -1) (undo-tree-id15455 . -1) (undo-tree-id15456 . -1) (undo-tree-id15457 . -1) (undo-tree-id15458 . -1) (undo-tree-id15459 . -1) (undo-tree-id15460 . -1) (undo-tree-id15461 . -1) (undo-tree-id15462 . -1) (undo-tree-id15463 . -1) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (undo-tree-id15468 . -1) (undo-tree-id15469 . -1) (undo-tree-id15470 . -1) (undo-tree-id15471 . -1) (undo-tree-id15472 . -1) (undo-tree-id15473 . -1) (undo-tree-id15474 . -1) (undo-tree-id15475 . -1) (undo-tree-id15476 . -1) (undo-tree-id15477 . -1) (undo-tree-id15478 . -1) (undo-tree-id15479 . -1) (undo-tree-id15480 . -1) (undo-tree-id15481 . -1) (undo-tree-id15482 . -1) (undo-tree-id15483 . -1) (undo-tree-id15484 . -1) (undo-tree-id15485 . -1) (undo-tree-id15486 . -1) (undo-tree-id15487 . -1) (undo-tree-id15488 . -1) (undo-tree-id15489 . -1) (undo-tree-id15490 . -1) (undo-tree-id15491 . -1) (undo-tree-id15492 . -1) (undo-tree-id15493 . -1) (undo-tree-id15494 . -1) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (undo-tree-id15497 . -1) (undo-tree-id15498 . -1) (undo-tree-id15499 . -1) (undo-tree-id15500 . -1) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -1) (undo-tree-id15504 . -1) (undo-tree-id15505 . -1) (undo-tree-id15506 . -1) (undo-tree-id15507 . -1) (undo-tree-id15508 . -1) (undo-tree-id15509 . -1) (undo-tree-id15510 . -1) (undo-tree-id15511 . -1) (undo-tree-id15512 . -1) (undo-tree-id15513 . -1) (undo-tree-id15514 . -1) (undo-tree-id15515 . -1) (undo-tree-id15516 . -1) (undo-tree-id15517 . -1) (undo-tree-id15518 . -1) (undo-tree-id15519 . -1) (undo-tree-id15520 . -1) (undo-tree-id15521 . -1) (undo-tree-id15522 . -1) (undo-tree-id15523 . -1) (undo-tree-id15524 . -1) (undo-tree-id15525 . -1) (undo-tree-id15526 . -1) (undo-tree-id15527 . -1) (undo-tree-id15528 . -1) (undo-tree-id15529 . -1) (undo-tree-id15530 . -1) (undo-tree-id15531 . -1) (undo-tree-id15532 . -1) (undo-tree-id15533 . -1) (undo-tree-id15534 . -1) (undo-tree-id15535 . -1) (undo-tree-id15536 . -1) (undo-tree-id15537 . -1) (undo-tree-id15538 . -1) (undo-tree-id15539 . -1) (undo-tree-id15540 . -1) (undo-tree-id15541 . -1) (undo-tree-id15542 . -1) (undo-tree-id15543 . -1) (undo-tree-id15544 . -1) (undo-tree-id15545 . -1) (undo-tree-id15546 . -1) (undo-tree-id15547 . -1) (undo-tree-id15548 . -1) (undo-tree-id15549 . -1) (undo-tree-id15550 . -1) (undo-tree-id15551 . -1) (undo-tree-id15552 . -1) (undo-tree-id15553 . -1) (undo-tree-id15554 . -1) (undo-tree-id15555 . -1) (undo-tree-id15556 . -1) (undo-tree-id15557 . -1) (undo-tree-id15558 . -1) (undo-tree-id15559 . -1) (undo-tree-id15560 . -1) (undo-tree-id15561 . -1) (undo-tree-id15562 . -1) (undo-tree-id15563 . -1) (undo-tree-id15564 . -1) (undo-tree-id15565 . -1) (undo-tree-id15566 . -1) 30655) nil (25755 14199 900724 711000) 0 nil])
([nil nil ((33347 . 33348)) nil (25755 14199 897308 466000) 0 nil])
([nil nil ((30769 . 30771) (t 25755 14199 933819 127000)) nil (25755 14224 335900 897000) 0 nil])
([nil nil ((#("Until a few years ago, " 0 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30771) (undo-tree-id15571 . -22) (undo-tree-id15572 . -22) (undo-tree-id15573 . 23) (undo-tree-id15574 . -22) (undo-tree-id15575 . -22) (undo-tree-id15576 . -23) (undo-tree-id15577 . -22) (undo-tree-id15578 . -4) (undo-tree-id15579 . -4) (undo-tree-id15580 . -4) (undo-tree-id15581 . -4) (undo-tree-id15582 . -4) (undo-tree-id15583 . -4) (undo-tree-id15584 . -4) (undo-tree-id15585 . -4) (undo-tree-id15586 . -6) (undo-tree-id15587 . -10) (undo-tree-id15588 . -16) (undo-tree-id15589 . -20) (undo-tree-id15590 . -21) (undo-tree-id15591 . -22) (undo-tree-id15592 . -22) (undo-tree-id15593 . -23) 30793) nil (25755 14224 336647 478000) 0 nil])
([nil nil ((30795 . 30796) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30795) (undo-tree-id15594 . -1) 30771) nil (25755 14225 966366 50000) 0 nil] [nil nil ((#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30771) (undo-tree-id15567 . 1) (undo-tree-id15568 . 1) (undo-tree-id15569 . -1) (undo-tree-id15570 . -1)) ((30771 . 30772)) (25755 14224 335828 418000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -30849) (nil fontified nil 30848 . 30849) (nil wrap-prefix #("  " 0 2 (face org-indent)) 30848 . 30849) (30848 . 30849) 30803 (t 25755 14226 3398 658000)) nil (25755 14242 507527 467000) 0 nil])
nil
([nil nil ((30868 . 30869) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30868) (undo-tree-id15634 . 1) (undo-tree-id15635 . -1) 30864) nil (25755 14242 507524 218000) 0 nil])
([nil nil ((#(", as shown in Figure 14-24" 0 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30894) (undo-tree-id15595 . -25) (undo-tree-id15596 . -2) (undo-tree-id15597 . -2) (undo-tree-id15598 . -2) (undo-tree-id15599 . -2) (undo-tree-id15600 . -2) (undo-tree-id15601 . -2) (undo-tree-id15602 . -2) (undo-tree-id15603 . -2) (undo-tree-id15604 . -2) (undo-tree-id15605 . -2) (undo-tree-id15606 . -2) (undo-tree-id15607 . -2) (undo-tree-id15608 . -2) (undo-tree-id15609 . -2) (undo-tree-id15610 . -2) (undo-tree-id15611 . -2) (undo-tree-id15612 . -2) (undo-tree-id15613 . -2) (undo-tree-id15614 . -2) (undo-tree-id15615 . -2) (undo-tree-id15616 . -2) (undo-tree-id15617 . -2) (undo-tree-id15618 . -1) (undo-tree-id15619 . -1) (undo-tree-id15620 . -1) (undo-tree-id15621 . -1) (undo-tree-id15622 . -1) (undo-tree-id15623 . -1) (undo-tree-id15624 . -1) (undo-tree-id15625 . -1) (undo-tree-id15626 . -1) (undo-tree-id15627 . -1) (undo-tree-id15628 . -1) (undo-tree-id15629 . -1) (undo-tree-id15630 . -1) (undo-tree-id15631 . -1) (undo-tree-id15632 . -1) (undo-tree-id15633 . -26)) nil (25755 14242 507517 732000) 0 nil])
([nil nil ((30896 . 30898)) nil (25755 14242 507459 260000) 0 nil])
([nil nil ((30771 . 30772) (#("a" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30771) (undo-tree-id15636 . 1) (undo-tree-id15637 . -1) (undo-tree-id15638 . -1) (undo-tree-id15639 . -1) (undo-tree-id15640 . -1) (undo-tree-id15641 . -1) (undo-tree-id15642 . -1) (undo-tree-id15643 . -1) (undo-tree-id15644 . -1) (undo-tree-id15645 . -1) (undo-tree-id15646 . -1) (undo-tree-id15647 . -1) (undo-tree-id15648 . -1) 30772 (t 25755 14242 540385 956000)) nil (25755 14248 122103 310000) 0 nil])
([nil nil ((#("In this example" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15653 . -14) (undo-tree-id15654 . -15) (t 25755 14248 148718 289000)) nil (25755 14272 373064 812000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15651 . -1) (undo-tree-id15652 . -1)) nil (25755 14272 373980 584000) 0 nil])
([nil nil ((#(" the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t) 2 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 30898) (undo-tree-id15704 . -4) (undo-tree-id15705 . -5)) nil (25755 14321 846290 829000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 30898) (undo-tree-id15649 . -1) (undo-tree-id15650 . -1)) ((30898 . 30899)) (25755 14272 373046 295000) 0 nil])
([nil nil ((#("(the thick black
rectangle)" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 17 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30953) (undo-tree-id15702 . -26) (undo-tree-id15703 . -27) 30898) nil (25755 14321 846702 130000) 0 nil])
nil
([nil nil ((#("image was chopped into a 6 × 8 grid, and we show a CNN  sliding across all 3 × 3 regions. When the CNN was looking at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 55 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15706 . -117) (undo-tree-id15707 . -55) (undo-tree-id15708 . -55) (undo-tree-id15709 . -55) (undo-tree-id15710 . -55) (undo-tree-id15711 . -55) (undo-tree-id15712 . -55) (undo-tree-id15713 . -55) (undo-tree-id15714 . -55) (undo-tree-id15715 . -55) (undo-tree-id15716 . -55) (undo-tree-id15717 . -55) (undo-tree-id15718 . -55) (undo-tree-id15719 . -55) (undo-tree-id15720 . -55) (undo-tree-id15721 . -55) (undo-tree-id15722 . -55) (undo-tree-id15723 . -55) (undo-tree-id15724 . -55) (undo-tree-id15725 . -55) (undo-tree-id15726 . -55) (undo-tree-id15727 . -55) (undo-tree-id15728 . -55) (undo-tree-id15729 . -55) (undo-tree-id15730 . -55) (undo-tree-id15731 . -55) (undo-tree-id15732 . -55) (undo-tree-id15733 . -55) (undo-tree-id15734 . -55) (undo-tree-id15735 . -55) (undo-tree-id15736 . -55) (undo-tree-id15737 . -55) (undo-tree-id15738 . -55) (undo-tree-id15739 . -55) (undo-tree-id15740 . -55) (undo-tree-id15741 . -55) (undo-tree-id15742 . -55) (undo-tree-id15743 . -55) (undo-tree-id15744 . -55) (undo-tree-id15745 . -55) (undo-tree-id15746 . -55) (undo-tree-id15747 . -55) (undo-tree-id15748 . -55) (undo-tree-id15749 . -55) (undo-tree-id15750 . -55) (undo-tree-id15751 . -55) (undo-tree-id15752 . -118)) nil (25755 14325 25531 826000) 0 nil] [nil nil ((#("image was chopped into a 6 × 8 grid, and we show a CNN  sliding across all 3 × 3 regions. When the CNN was looking at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 55 118 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15655 . -117) (undo-tree-id15656 . -55) (undo-tree-id15657 . -55) (undo-tree-id15658 . -55) (undo-tree-id15659 . -55) (undo-tree-id15660 . -55) (undo-tree-id15661 . -55) (undo-tree-id15662 . -55) (undo-tree-id15663 . -55) (undo-tree-id15664 . -55) (undo-tree-id15665 . -55) (undo-tree-id15666 . -55) (undo-tree-id15667 . -55) (undo-tree-id15668 . -55) (undo-tree-id15669 . -55) (undo-tree-id15670 . -55) (undo-tree-id15671 . -55) (undo-tree-id15672 . -55) (undo-tree-id15673 . -55) (undo-tree-id15674 . -55) (undo-tree-id15675 . -55) (undo-tree-id15676 . -55) (undo-tree-id15677 . -55) (undo-tree-id15678 . -55) (undo-tree-id15679 . -55) (undo-tree-id15680 . -55) (undo-tree-id15681 . -55) (undo-tree-id15682 . -55) (undo-tree-id15683 . -55) (undo-tree-id15684 . -55) (undo-tree-id15685 . -55) (undo-tree-id15686 . -55) (undo-tree-id15687 . -55) (undo-tree-id15688 . -55) (undo-tree-id15689 . -55) (undo-tree-id15690 . -55) (undo-tree-id15691 . -55) (undo-tree-id15692 . -55) (undo-tree-id15693 . -55) (undo-tree-id15694 . -55) (undo-tree-id15695 . -55) (undo-tree-id15696 . -55) (undo-tree-id15697 . -55) (undo-tree-id15698 . -55) (undo-tree-id15699 . -55) (undo-tree-id15700 . -55) (undo-tree-id15701 . -118)) ((30898 . 31016)) (25755 14321 846281 289000) 0 nil])
([nil nil ((#("the top left of the image, it detected part of the leftmost rose, and then it
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 47 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15771 . -77) (undo-tree-id15772 . -78) (undo-tree-id15773 . -78) (undo-tree-id15774 . -78) (undo-tree-id15775 . -78) (undo-tree-id15776 . -78) (undo-tree-id15777 . -78) (undo-tree-id15778 . -78) (undo-tree-id15779 . -78) (undo-tree-id15780 . -78) (t 25755 14325 45154 936000)) nil (25755 14391 368713 435000) 0 nil])
nil
([nil nil ((#("detected that same rose again when it was first shifted one step to the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15769 . -71) (undo-tree-id15770 . -72)) nil (25755 14391 368703 551000) 0 nil])
([nil nil ((#("right. At the next step, it started detecting part of the topmost rose, and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15767 . -75) (undo-tree-id15768 . -76)) nil (25755 14391 368701 157000) 0 nil])
([nil nil ((#("then it detected it again once it was shifted one more step to the right. You
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15765 . -77) (undo-tree-id15766 . -78)) nil (25755 14391 368699 163000) 0 nil])
([nil nil ((#("would then continue to slide the CNN through the whole image, looking at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15763 . -72) (undo-tree-id15764 . -73)) nil (25755 14391 368696 734000) 0 nil])
([nil nil ((#("all 3 × 3 regions. Moreover, since objects can have varying sizes, you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15761 . -70) (undo-tree-id15762 . -71)) nil (25755 14391 368648 997000) 0 nil])
([nil nil ((#("would also slide the CNN across regions of different sizes. For example,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15759 . -72) (undo-tree-id15760 . -73)) nil (25755 14391 368646 671000) 0 nil])
([nil nil ((#("once you are done with the 3 × 3 regions, you might want to slide the CNN
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 57 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15757 . -73) (undo-tree-id15758 . -74)) nil (25755 14391 368644 264000) 0 nil])
([nil nil ((#("across all 4 × 4 regions as well.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 32 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 33 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 30898) (undo-tree-id15755 . -33) (undo-tree-id15756 . -34)) nil (25755 14391 368641 127000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 30898) (undo-tree-id15753 . -1) (undo-tree-id15754 . -1)) nil (25755 14430 324804 598000) 0 nil])
([nil nil ((#("This technique is fairly straightforward, but as you can see it will detect
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15793 . -75) (undo-tree-id15794 . -76) (t 25755 14391 392819 708000)) nil (25755 14448 949893 313000) 0 nil] [nil nil ((#("This technique is fairly straightforward, but as you can see it will detect
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15781 . -75) (undo-tree-id15782 . -76) (t 25755 14391 392819 708000)) ((30898 . 30974)) (25755 14430 324276 157000) 0 nil])
([nil nil ((#("the same object multiple times, at slightly different positions. Some post-
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15791 . -75) (undo-tree-id15792 . -76)) nil (25755 14448 949886 648000) 0 nil])
nil
([nil nil ((#("processing will then be needed to get rid of all the unnecessary bounding
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15789 . -73) (undo-tree-id15790 . -74)) nil (25755 14448 949883 318000) 0 nil])
([nil nil ((#("boxes" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15787 . -4) (undo-tree-id15788 . -5)) nil (25755 14448 949879 960000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15785 . -1) (undo-tree-id15786 . -1)) nil (25755 14448 949874 714000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 30898) (undo-tree-id15783 . -1) (undo-tree-id15784 . -1)) nil (25755 14448 949866 829000) 0 nil])
([nil nil ((#("A common approach for this is called " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 37 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30898) (undo-tree-id15795 . -36) (undo-tree-id15796 . -36) (undo-tree-id15797 . -36) (undo-tree-id15798 . -36) (undo-tree-id15799 . -37) (undo-tree-id15800 . -36) (undo-tree-id15801 . -7) (undo-tree-id15802 . -7) (undo-tree-id15803 . -7) (undo-tree-id15804 . -7) (undo-tree-id15805 . -7) (undo-tree-id15806 . -7) (undo-tree-id15807 . -7) (undo-tree-id15808 . -7) (undo-tree-id15809 . -16) (undo-tree-id15810 . -16) (undo-tree-id15811 . -16) (undo-tree-id15812 . -16) (undo-tree-id15813 . -16) (undo-tree-id15814 . -16) (undo-tree-id15815 . -16) (undo-tree-id15816 . -16) (undo-tree-id15817 . -20) (undo-tree-id15818 . -20) (undo-tree-id15819 . -20) (undo-tree-id15820 . -20) (undo-tree-id15821 . -20) (undo-tree-id15822 . -20) (undo-tree-id15823 . -20) (undo-tree-id15824 . -20) (undo-tree-id15825 . -25) (undo-tree-id15826 . -25) (undo-tree-id15827 . -25) (undo-tree-id15828 . -25) (undo-tree-id15829 . -25) (undo-tree-id15830 . -25) (undo-tree-id15831 . -25) (undo-tree-id15832 . -25) (undo-tree-id15833 . -28) (undo-tree-id15834 . -28) (undo-tree-id15835 . -28) (undo-tree-id15836 . -28) (undo-tree-id15837 . -28) (undo-tree-id15838 . -28) (undo-tree-id15839 . -28) (undo-tree-id15840 . -28) (undo-tree-id15841 . -35) (undo-tree-id15842 . -35) (undo-tree-id15843 . -35) (undo-tree-id15844 . -35) (undo-tree-id15845 . -35) (undo-tree-id15846 . -35) (undo-tree-id15847 . -35) (undo-tree-id15848 . -35) (undo-tree-id15849 . -37) (undo-tree-id15850 . -37) (undo-tree-id15851 . -37) (undo-tree-id15852 . -37) (undo-tree-id15853 . -37) (undo-tree-id15854 . -37) (undo-tree-id15855 . -37) (undo-tree-id15856 . -37) (undo-tree-id15857 . -36) (undo-tree-id15858 . -36) (undo-tree-id15859 . -36) (undo-tree-id15860 . -36) (undo-tree-id15861 . -36) (undo-tree-id15862 . -36) (undo-tree-id15863 . -36) (undo-tree-id15864 . -36) (undo-tree-id15865 . -36) (undo-tree-id15866 . -37) 30934 (t 25755 14448 975892 872000)) nil (25755 14454 625192 223000) 0 nil])
([nil nil ((30898 . 30899) (t 25755 14454 656191 52000)) nil (25755 14479 859822 853000) 0 nil])
([nil nil ((30918 . 30919)) nil (25755 14479 859821 646000) 0 nil])
([nil nil ((#("*" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . 30918) (undo-tree-id15883 . -1) (undo-tree-id15884 . -1) (undo-tree-id15885 . -1) (undo-tree-id15886 . -1) (undo-tree-id15887 . -1) (undo-tree-id15888 . -1) (undo-tree-id15889 . -1) (undo-tree-id15890 . -1) (undo-tree-id15891 . -1) (undo-tree-id15892 . -1) (undo-tree-id15893 . -1)) nil (25755 14479 859819 585000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30918) (undo-tree-id15880 . 1) (undo-tree-id15881 . -1) (undo-tree-id15882 . -1)) nil (25755 14479 859806 435000) 0 nil])
([nil nil ((30918 . 30920) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -30918) (undo-tree-id15867 . 1) (undo-tree-id15868 . -1) (undo-tree-id15869 . -1) (undo-tree-id15870 . -1) (undo-tree-id15871 . -1) (undo-tree-id15872 . -1) (undo-tree-id15873 . -1) (undo-tree-id15874 . -1) (undo-tree-id15875 . -1) (undo-tree-id15876 . -1) (undo-tree-id15877 . -1) (undo-tree-id15878 . -1) (undo-tree-id15879 . -1) 30919) nil (25755 14479 859799 905000) 0 nil])
([nil nil ((30920 . 30921)) nil (25755 14479 859765 828000) 0 nil])
([nil nil ((#("Here’s
" 0 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30921) (undo-tree-id15911 . -6) (undo-tree-id15912 . 7) (undo-tree-id15913 . -7) (t 25755 14479 885505 266000)) nil (25755 14486 131561 317000) 0 nil])
([nil nil ((#("how you do it:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30921) (undo-tree-id15908 . -14) (undo-tree-id15909 . 15) (undo-tree-id15910 . -15)) nil (25755 14486 131557 551000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 30897) (undo-tree-id15894 . -1) (undo-tree-id15895 . -1) (undo-tree-id15896 . -1) (undo-tree-id15897 . -1) (undo-tree-id15898 . -1) (undo-tree-id15899 . -1) (undo-tree-id15900 . -1) (undo-tree-id15901 . -1) (undo-tree-id15902 . -1) (undo-tree-id15903 . -1) (undo-tree-id15904 . -1) (undo-tree-id15905 . -1) (undo-tree-id15906 . -1) (undo-tree-id15907 . -1)) nil (25755 14486 131550 264000) 0 nil])
([nil nil ((30897 . 30899) (t 25755 14486 149829 65000)) nil (25755 14503 517239 828000) 0 nil])
([nil nil ((30900 . 30901)) nil (25755 14503 517237 923000) 0 nil])
([nil nil ((#("*" 0 1 (line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t face org-level-3)) . 30920) (undo-tree-id15914 . -1) (undo-tree-id15915 . -1)) nil (25755 14503 517231 843000) 0 nil])
([nil nil ((30925 . 30926) (t 25755 14503 546723 220000)) nil (25755 14546 75653 81000) 0 nil])
([nil nil ((30924 . 30925) (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified nil)) . 30924) (undo-tree-id15985 . -1) (undo-tree-id15986 . -1) (undo-tree-id15987 . -1) (undo-tree-id15988 . -1) (undo-tree-id15989 . -1) (undo-tree-id15990 . -1) (undo-tree-id15991 . -1) (undo-tree-id15992 . -1) (undo-tree-id15993 . -1) (undo-tree-id15994 . -1) (undo-tree-id15995 . -1) (undo-tree-id15996 . -1) (undo-tree-id15997 . -1) (undo-tree-id15998 . -1) (undo-tree-id15999 . -1) (undo-tree-id16000 . -1) (undo-tree-id16001 . -1) (undo-tree-id16002 . -1) (undo-tree-id16003 . -1) (undo-tree-id16004 . -1) (undo-tree-id16005 . -1) (undo-tree-id16006 . -1) (undo-tree-id16007 . -1) (undo-tree-id16008 . -1) (undo-tree-id16009 . -1) (undo-tree-id16010 . -1) (undo-tree-id16011 . -1) (undo-tree-id16012 . -1) (undo-tree-id16013 . -1) (undo-tree-id16014 . -1) (undo-tree-id16015 . -1) (undo-tree-id16016 . -1) (undo-tree-id16017 . -1) (undo-tree-id16018 . -1) (undo-tree-id16019 . -1) (undo-tree-id16020 . -1) (undo-tree-id16021 . -1) (undo-tree-id16022 . -1) (undo-tree-id16023 . -1) (undo-tree-id16024 . -1) (undo-tree-id16025 . -1) (undo-tree-id16026 . -1) (undo-tree-id16027 . -1) (undo-tree-id16028 . -1) (undo-tree-id16029 . -1) (undo-tree-id16030 . -1) (undo-tree-id16031 . -1) (undo-tree-id16032 . -1) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -30925) (undo-tree-id16033 . -1) (undo-tree-id16034 . -1) (undo-tree-id16035 . -1) (undo-tree-id16036 . -1) (undo-tree-id16037 . -1) (undo-tree-id16038 . -1) (undo-tree-id16039 . -1) (undo-tree-id16040 . -1) (undo-tree-id16041 . -1) (undo-tree-id16042 . -1) (undo-tree-id16043 . -1) (undo-tree-id16044 . -1) (undo-tree-id16045 . -1) (undo-tree-id16046 . -1) (undo-tree-id16047 . -1) (undo-tree-id16048 . -1) (undo-tree-id16049 . -1) (undo-tree-id16050 . -1) (undo-tree-id16051 . -1) (undo-tree-id16052 . -1) (undo-tree-id16053 . -1) (undo-tree-id16054 . -1) (undo-tree-id16055 . -1) (undo-tree-id16056 . -1) (undo-tree-id16057 . -1) (undo-tree-id16058 . -1) (undo-tree-id16059 . -1) (undo-tree-id16060 . -1) (undo-tree-id16061 . -1) (undo-tree-id16062 . -1) (undo-tree-id16063 . -1) (undo-tree-id16064 . -1) (undo-tree-id16065 . -1) (undo-tree-id16066 . -1) (undo-tree-id16067 . -1) (undo-tree-id16068 . -1) 30922) nil (25755 14546 75646 774000) 0 nil])
([nil nil ((#("First, you need to " 0 19 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 30925) (undo-tree-id15968 . -18) (undo-tree-id15969 . -18) (undo-tree-id15970 . 19) (undo-tree-id15971 . -18) (undo-tree-id15972 . -18) (undo-tree-id15973 . -4) (undo-tree-id15974 . -19) (undo-tree-id15975 . -18) (undo-tree-id15976 . -4) (undo-tree-id15977 . -5) (undo-tree-id15978 . -9) (undo-tree-id15979 . -14) (undo-tree-id15980 . -17) (undo-tree-id15981 . -19) (undo-tree-id15982 . -18) (undo-tree-id15983 . -18) (undo-tree-id15984 . -19) 30943) nil (25755 14546 75436 20000) 0 nil])
([nil nil ((30971 . 30972) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -30971) (undo-tree-id15967 . -1) 30969) nil (25755 14546 75421 294000) 0 nil])
([nil nil ((#("(alternatively, you could add a “no-flower” class, but this
usually does not work as well)" 0 48 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 48 60 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 60 90 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31042) (undo-tree-id15946 . -89) (undo-tree-id15947 . -43) (undo-tree-id15948 . -43) (undo-tree-id15949 . -43) (undo-tree-id15950 . -43) (undo-tree-id15951 . -43) (undo-tree-id15952 . -43) (undo-tree-id15953 . -43) (undo-tree-id15954 . -43) (undo-tree-id15955 . -43) (undo-tree-id15956 . -43) (undo-tree-id15957 . -43) (undo-tree-id15958 . -43) (undo-tree-id15959 . -43) (undo-tree-id15960 . -43) (undo-tree-id15961 . -43) (undo-tree-id15962 . -43) (undo-tree-id15963 . -43) (undo-tree-id15964 . -43) (undo-tree-id15965 . -43) (undo-tree-id15966 . -90) 31085) nil (25755 14546 75418 462000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31041) (undo-tree-id15917 . -1) (undo-tree-id15918 . -1) (undo-tree-id15919 . -1) (undo-tree-id15920 . -1) (undo-tree-id15921 . -1) (undo-tree-id15922 . -1) (undo-tree-id15923 . -1) (undo-tree-id15924 . -1) (undo-tree-id15925 . -1) (undo-tree-id15926 . -1) (undo-tree-id15927 . -1) (undo-tree-id15928 . -1) (undo-tree-id15929 . -1) (undo-tree-id15930 . -1) (undo-tree-id15931 . -1) (undo-tree-id15932 . -1) (undo-tree-id15933 . -1) (undo-tree-id15934 . -1) (undo-tree-id15935 . -1) (undo-tree-id15936 . -1) (undo-tree-id15937 . -1) (undo-tree-id15938 . -1) (undo-tree-id15939 . -1) (undo-tree-id15940 . -1) (undo-tree-id15941 . -1) (undo-tree-id15942 . -1) (undo-tree-id15943 . -1) (undo-tree-id15944 . -1) (undo-tree-id15945 . -1)) nil (25755 14546 75398 327000) 0 nil])
([nil nil ((31035 . 31036) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31035) (undo-tree-id15916 . -1) 30999) nil (25755 14564 540652 365000) 0 nil])
([nil nil ((31268 . 31269) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31268) (undo-tree-id16074 . -1) (31205 . 31206) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31205) (undo-tree-id16075 . -1) (31141 . 31142) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31141) (undo-tree-id16076 . -1) (31077 . 31078) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31077) (undo-tree-id16077 . -1) 31043 (t 25755 14546 96880 37000)) nil (25755 14570 585926 101000) 0 nil] [nil nil ((31312 . 31313) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31312) (undo-tree-id16069 . -1) (31268 . 31269) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31268) (undo-tree-id16070 . -1) (31205 . 31206) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31205) (undo-tree-id16071 . -1) (31141 . 31142) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31141) (undo-tree-id16072 . -1) (31077 . 31078) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31077) (undo-tree-id16073 . -1) 31043 (t 25755 14546 96880 37000)) ((31077 . 31078) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)))) . 31077) (31141 . 31142) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)))) . 31141) (31205 . 31206) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)))) . 31205) (31268 . 31269) (#(" " 0 1 (fontified nil line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)))) . 31268) (31312 . 31313) (#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)))) . 31312)) (25755 14564 538762 476000) 0 nil])
([nil nil ((#("and you can train it using" 0 26 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 31088) (undo-tree-id16995 . -25) (undo-tree-id16996 . -25) (undo-tree-id16997 . -25) (undo-tree-id16998 . -25) (undo-tree-id16999 . -4) (undo-tree-id17000 . -4) (undo-tree-id17001 . -4) (undo-tree-id17002 . -4) (undo-tree-id17003 . -4) (undo-tree-id17004 . -4) (undo-tree-id17005 . -4) (undo-tree-id17006 . -4) (undo-tree-id17007 . -4) (undo-tree-id17008 . -4) (undo-tree-id17009 . -4) (undo-tree-id17010 . -4) (undo-tree-id17011 . -4) (undo-tree-id17012 . -4) (undo-tree-id17013 . -4) (undo-tree-id17014 . -4) (undo-tree-id17015 . -4) (undo-tree-id17016 . -4) (undo-tree-id17017 . -4) (undo-tree-id17018 . -4) (undo-tree-id17019 . -4) (undo-tree-id17020 . -4) (undo-tree-id17021 . -8) (undo-tree-id17022 . -8) (undo-tree-id17023 . -8) (undo-tree-id17024 . -8) (undo-tree-id17025 . -8) (undo-tree-id17026 . -8) (undo-tree-id17027 . -8) (undo-tree-id17028 . -8) (undo-tree-id17029 . -8) (undo-tree-id17030 . -8) (undo-tree-id17031 . -8) (undo-tree-id17032 . -8) (undo-tree-id17033 . -8) (undo-tree-id17034 . -8) (undo-tree-id17035 . -8) (undo-tree-id17036 . -12) (undo-tree-id17037 . -12) (undo-tree-id17038 . -12) (undo-tree-id17039 . -12) (undo-tree-id17040 . -12) (undo-tree-id17041 . -12) (undo-tree-id17042 . -12) (undo-tree-id17043 . -12) (undo-tree-id17044 . -12) (undo-tree-id17045 . -12) (undo-tree-id17046 . -12) (undo-tree-id17047 . -12) (undo-tree-id17048 . -12) (undo-tree-id17049 . -12) (undo-tree-id17050 . -12) (undo-tree-id17051 . -12) (undo-tree-id17052 . -12) (undo-tree-id17053 . -12) (undo-tree-id17054 . -12) (undo-tree-id17055 . -12) (undo-tree-id17056 . -12) (undo-tree-id17057 . -12) (undo-tree-id17058 . -26) (undo-tree-id17059 . -25) (undo-tree-id17060 . -2) (undo-tree-id17061 . -2) (undo-tree-id17062 . -2) (undo-tree-id17063 . -2) (undo-tree-id17064 . -2) (undo-tree-id17065 . -2) (undo-tree-id17066 . -2) (undo-tree-id17067 . -2) (undo-tree-id17068 . -2) (undo-tree-id17069 . -2) (undo-tree-id17070 . -2) (undo-tree-id17071 . -2) (undo-tree-id17072 . -2) (undo-tree-id17073 . -2) (undo-tree-id17074 . -2) (undo-tree-id17075 . -2) (undo-tree-id17076 . -2) (undo-tree-id17077 . -2) (undo-tree-id17078 . -2) (undo-tree-id17079 . -2) (undo-tree-id17080 . -2) (undo-tree-id17081 . -2) (undo-tree-id17082 . -6) (undo-tree-id17083 . -6) (undo-tree-id17084 . -6) (undo-tree-id17085 . -6) (undo-tree-id17086 . -6) (undo-tree-id17087 . -6) (undo-tree-id17088 . -6) (undo-tree-id17089 . -6) (undo-tree-id17090 . -6) (undo-tree-id17091 . -6) (undo-tree-id17092 . -6) (undo-tree-id17093 . -6) (undo-tree-id17094 . -6) (undo-tree-id17095 . -6) (undo-tree-id17096 . -6) (undo-tree-id17097 . -6) (undo-tree-id17098 . -6) (undo-tree-id17099 . -6) (undo-tree-id17100 . -6) (undo-tree-id17101 . -6) (undo-tree-id17102 . -6) (undo-tree-id17103 . -6) (undo-tree-id17104 . -10) (undo-tree-id17105 . -10) (undo-tree-id17106 . -10) (undo-tree-id17107 . -10) (undo-tree-id17108 . -10) (undo-tree-id17109 . -10) (undo-tree-id17110 . -10) (undo-tree-id17111 . -10) (undo-tree-id17112 . -10) (undo-tree-id17113 . -10) (undo-tree-id17114 . -10) (undo-tree-id17115 . -10) (undo-tree-id17116 . -10) (undo-tree-id17117 . -10) (undo-tree-id17118 . -10) (undo-tree-id17119 . -10) (undo-tree-id17120 . -10) (undo-tree-id17121 . -10) (undo-tree-id17122 . -10) (undo-tree-id17123 . -10) (undo-tree-id17124 . -10) (undo-tree-id17125 . -10) (undo-tree-id17126 . -16) (undo-tree-id17127 . -16) (undo-tree-id17128 . -16) (undo-tree-id17129 . -16) (undo-tree-id17130 . -16) (undo-tree-id17131 . -16) (undo-tree-id17132 . -16) (undo-tree-id17133 . -16) (undo-tree-id17134 . -16) (undo-tree-id17135 . -16) (undo-tree-id17136 . -16) (undo-tree-id17137 . -16) (undo-tree-id17138 . -16) (undo-tree-id17139 . -16) (undo-tree-id17140 . -16) (undo-tree-id17141 . -16) (undo-tree-id17142 . -16) (undo-tree-id17143 . -16) (undo-tree-id17144 . -16) (undo-tree-id17145 . -16) (undo-tree-id17146 . -16) (undo-tree-id17147 . -16) (undo-tree-id17148 . -19) (undo-tree-id17149 . -19) (undo-tree-id17150 . -19) (undo-tree-id17151 . -19) (undo-tree-id17152 . -19) (undo-tree-id17153 . -19) (undo-tree-id17154 . -19) (undo-tree-id17155 . -19) (undo-tree-id17156 . -19) (undo-tree-id17157 . -19) (undo-tree-id17158 . -19) (undo-tree-id17159 . -19) (undo-tree-id17160 . -19) (undo-tree-id17161 . -19) (undo-tree-id17162 . -19) (undo-tree-id17163 . -19) (undo-tree-id17164 . -19) (undo-tree-id17165 . -19) (undo-tree-id17166 . -19) (undo-tree-id17167 . -19) (undo-tree-id17168 . -19) (undo-tree-id17169 . -19) (undo-tree-id17170 . -25) (undo-tree-id17171 . -25) (undo-tree-id17172 . -25) (undo-tree-id17173 . -25) (undo-tree-id17174 . -25) (undo-tree-id17175 . -25) (undo-tree-id17176 . -25) (undo-tree-id17177 . -25) (undo-tree-id17178 . -25) (undo-tree-id17179 . -25) (undo-tree-id17180 . -25) (undo-tree-id17181 . -25) (undo-tree-id17182 . -25) (undo-tree-id17183 . -25) (undo-tree-id17184 . -25) (undo-tree-id17185 . -25) (undo-tree-id17186 . -25) (undo-tree-id17187 . -25) (undo-tree-id17188 . -25) (undo-tree-id17189 . -25) (undo-tree-id17190 . -25) (undo-tree-id17191 . -25) (undo-tree-id17192 . -25) (undo-tree-id17193 . -25) (undo-tree-id17194 . -25) (undo-tree-id17195 . -25) (undo-tree-id17196 . -25) (undo-tree-id17197 . -25) (undo-tree-id17198 . -25) (undo-tree-id17199 . -25) (undo-tree-id17200 . -25) (undo-tree-id17201 . -25) (undo-tree-id17202 . -25) (undo-tree-id17203 . -25) (undo-tree-id17204 . -25) (undo-tree-id17205 . -25) (undo-tree-id17206 . -24) (undo-tree-id17207 . -24) (undo-tree-id17208 . -24) (undo-tree-id17209 . -24) (undo-tree-id17210 . -24) (undo-tree-id17211 . -24) (undo-tree-id17212 . -24) (undo-tree-id17213 . -24) (undo-tree-id17214 . -24) (undo-tree-id17215 . -24) (undo-tree-id17216 . -24) (undo-tree-id17217 . -24) (undo-tree-id17218 . -24) (undo-tree-id17219 . -24) (undo-tree-id17220 . -24) (undo-tree-id17221 . -24) (undo-tree-id17222 . -24) (undo-tree-id17223 . -24) (undo-tree-id17224 . -24) (undo-tree-id17225 . -24) (undo-tree-id17226 . -24) (undo-tree-id17227 . -24) (undo-tree-id17228 . -24) (undo-tree-id17229 . -24) (undo-tree-id17230 . -24) (undo-tree-id17231 . -24) (undo-tree-id17232 . -24) (undo-tree-id17233 . -24) (undo-tree-id17234 . -24) (undo-tree-id17235 . -24) (undo-tree-id17236 . -24) (undo-tree-id17237 . -24) (undo-tree-id17238 . -24) (undo-tree-id17239 . -24) (undo-tree-id17240 . -24) (undo-tree-id17241 . -24) (undo-tree-id17242 . -25) (undo-tree-id17243 . -25) (undo-tree-id17244 . -25) (undo-tree-id17245 . -25) (undo-tree-id17246 . -25) (undo-tree-id17247 . -25) (undo-tree-id17248 . -25) (undo-tree-id17249 . -25) (undo-tree-id17250 . -25) (undo-tree-id17251 . -25) (undo-tree-id17252 . -25) (undo-tree-id17253 . -25) (undo-tree-id17254 . -25) (undo-tree-id17255 . -25) (undo-tree-id17256 . -25) (undo-tree-id17257 . -25) (undo-tree-id17258 . -25) (undo-tree-id17259 . -25) (undo-tree-id17260 . -25) (undo-tree-id17261 . -25) (undo-tree-id17262 . -25) (undo-tree-id17263 . -25) (undo-tree-id17264 . -25) (undo-tree-id17265 . -25) (undo-tree-id17266 . -25) (undo-tree-id17267 . -25) (undo-tree-id17268 . -25) (undo-tree-id17269 . -25) (undo-tree-id17270 . -25) (undo-tree-id17271 . -25) (undo-tree-id17272 . -25) (undo-tree-id17273 . -25) (undo-tree-id17274 . -25) (undo-tree-id17275 . -25) (undo-tree-id17276 . -25) (undo-tree-id17277 . -25) (undo-tree-id17278 . -25) (undo-tree-id17279 . -26) 31113 (t 25755 14570 610104 189000)) nil (25755 14629 163542 671000) 0 nil])
nil
([nil nil ((31086 . 31090) (#("a" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31086) (undo-tree-id16078 . -1) (undo-tree-id16079 . -1) (undo-tree-id16080 . -1) (undo-tree-id16081 . -1) (undo-tree-id16082 . -1) (undo-tree-id16083 . -1) (undo-tree-id16084 . -1) (undo-tree-id16085 . -1) (undo-tree-id16086 . -1) (undo-tree-id16087 . -1) (undo-tree-id16088 . -1) (undo-tree-id16089 . -1) (undo-tree-id16090 . -1) (undo-tree-id16091 . -1) (undo-tree-id16092 . -1) (undo-tree-id16093 . -1) (undo-tree-id16094 . -1) (undo-tree-id16095 . -1) (undo-tree-id16096 . -1) (undo-tree-id16097 . -1) (undo-tree-id16098 . -1) (undo-tree-id16099 . -1) (undo-tree-id16100 . -1) (undo-tree-id16101 . -1) (undo-tree-id16102 . -1) (undo-tree-id16103 . -1) (undo-tree-id16104 . -1) (undo-tree-id16105 . -1) (undo-tree-id16106 . -1) (undo-tree-id16107 . -1) (undo-tree-id16108 . -1) (undo-tree-id16109 . -1) (undo-tree-id16110 . -1) (undo-tree-id16111 . -1) (undo-tree-id16112 . -1) (undo-tree-id16113 . -1) (undo-tree-id16114 . -1) (undo-tree-id16115 . -1) (undo-tree-id16116 . -1) (undo-tree-id16117 . -1) (undo-tree-id16118 . -1) (undo-tree-id16119 . -1) (undo-tree-id16120 . -1) 31087 (31086 . 31087) (#("," 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31086) (undo-tree-id16121 . -1) (undo-tree-id16122 . -1) (undo-tree-id16123 . -1) (undo-tree-id16124 . -1) (undo-tree-id16125 . -1) (undo-tree-id16126 . -1) (undo-tree-id16127 . -1) (undo-tree-id16128 . -1) (undo-tree-id16129 . -1) (undo-tree-id16130 . -1) (undo-tree-id16131 . -1) (undo-tree-id16132 . -1) (undo-tree-id16133 . -1) (undo-tree-id16134 . -1) (undo-tree-id16135 . -1) (undo-tree-id16136 . -1) (undo-tree-id16137 . -1) (undo-tree-id16138 . -1) (undo-tree-id16139 . -1) (undo-tree-id16140 . -1) (undo-tree-id16141 . -1) (undo-tree-id16142 . -1) (undo-tree-id16143 . -1) (undo-tree-id16144 . -1) (undo-tree-id16145 . -1) (undo-tree-id16146 . -1) (undo-tree-id16147 . -1) (undo-tree-id16148 . -1) (undo-tree-id16149 . -1) (undo-tree-id16150 . -1) (undo-tree-id16151 . -1) (undo-tree-id16152 . -1) (undo-tree-id16153 . -1) (undo-tree-id16154 . -1) (undo-tree-id16155 . -1) (undo-tree-id16156 . -1) (undo-tree-id16157 . -1) (undo-tree-id16158 . -1) (undo-tree-id16159 . -1) (undo-tree-id16160 . -1) (undo-tree-id16161 . -1) (undo-tree-id16162 . -1) (undo-tree-id16163 . -1) (undo-tree-id16164 . -1) (undo-tree-id16165 . -1) (undo-tree-id16166 . -1) (undo-tree-id16167 . -1) (undo-tree-id16168 . -1) (undo-tree-id16169 . -1) (undo-tree-id16170 . -1) (undo-tree-id16171 . -1) (undo-tree-id16172 . -1) (undo-tree-id16173 . -1) (undo-tree-id16174 . -1) (undo-tree-id16175 . -1) (undo-tree-id16176 . -1) (undo-tree-id16177 . -1) (undo-tree-id16178 . -1) (undo-tree-id16179 . -1) (undo-tree-id16180 . -1) (undo-tree-id16181 . -1) (undo-tree-id16182 . -1) (undo-tree-id16183 . -1) (undo-tree-id16184 . -1) (undo-tree-id16185 . -1) (undo-tree-id16186 . -1) (undo-tree-id16187 . -1) (undo-tree-id16188 . -1) (undo-tree-id16189 . -1) (undo-tree-id16190 . -1) (undo-tree-id16191 . -1) (undo-tree-id16192 . -1) (undo-tree-id16193 . -1) (undo-tree-id16194 . -1) (undo-tree-id16195 . -1) (undo-tree-id16196 . -1) (undo-tree-id16197 . -1) (undo-tree-id16198 . -1) (undo-tree-id16199 . -1) (undo-tree-id16200 . -1) (undo-tree-id16201 . -1) (undo-tree-id16202 . -1) (undo-tree-id16203 . -1) (undo-tree-id16204 . -1) (undo-tree-id16205 . -1) (undo-tree-id16206 . -1) (undo-tree-id16207 . -1) (undo-tree-id16208 . -1) (undo-tree-id16209 . -1) (undo-tree-id16210 . -1) (undo-tree-id16211 . -1) (undo-tree-id16212 . -1) (undo-tree-id16213 . -1) (undo-tree-id16214 . -1) (undo-tree-id16215 . -1) (undo-tree-id16216 . -1) (undo-tree-id16217 . -1) (undo-tree-id16218 . -1) (undo-tree-id16219 . -1) (undo-tree-id16220 . -1) (undo-tree-id16221 . -1) (undo-tree-id16222 . -1) (undo-tree-id16223 . -1) (undo-tree-id16224 . -1) (undo-tree-id16225 . -1) (undo-tree-id16226 . -1) (undo-tree-id16227 . -1) (undo-tree-id16228 . -1) (undo-tree-id16229 . -1) (undo-tree-id16230 . -1) (undo-tree-id16231 . -1) (undo-tree-id16232 . -1) (undo-tree-id16233 . -1) (undo-tree-id16234 . -1) (undo-tree-id16235 . -1) (undo-tree-id16236 . -1) (undo-tree-id16237 . -1) (undo-tree-id16238 . -1) (undo-tree-id16239 . -1) (undo-tree-id16240 . -1) (undo-tree-id16241 . -1) (undo-tree-id16242 . -1) (undo-tree-id16243 . -1) (undo-tree-id16244 . -1) (undo-tree-id16245 . -1) (undo-tree-id16246 . -1) (undo-tree-id16247 . -1) (undo-tree-id16248 . -1) (undo-tree-id16249 . -1) (undo-tree-id16250 . -1) (undo-tree-id16251 . -1) (undo-tree-id16252 . -1) (undo-tree-id16253 . -1) (undo-tree-id16254 . -1) (undo-tree-id16255 . -1) (undo-tree-id16256 . -1) (undo-tree-id16257 . -1) (undo-tree-id16258 . -1) (undo-tree-id16259 . -1) (undo-tree-id16260 . -1) (undo-tree-id16261 . -1) (undo-tree-id16262 . -1) (undo-tree-id16263 . -1) (undo-tree-id16264 . -1) (undo-tree-id16265 . -1) (undo-tree-id16266 . -1) (undo-tree-id16267 . -1) (undo-tree-id16268 . -1) (undo-tree-id16269 . -1) (undo-tree-id16270 . -1) (undo-tree-id16271 . -1) (undo-tree-id16272 . -1) (undo-tree-id16273 . -1) (undo-tree-id16274 . -1) (undo-tree-id16275 . -1) (undo-tree-id16276 . -1) (undo-tree-id16277 . -1) (undo-tree-id16278 . -1) (undo-tree-id16279 . -1) (undo-tree-id16280 . -1) (undo-tree-id16281 . -1) (undo-tree-id16282 . -1) (undo-tree-id16283 . -1) (undo-tree-id16284 . -1) (undo-tree-id16285 . -1) (undo-tree-id16286 . -1) (undo-tree-id16287 . -1) (undo-tree-id16288 . -1) (undo-tree-id16289 . -1) (undo-tree-id16290 . -1) (undo-tree-id16291 . -1) (undo-tree-id16292 . -1) (undo-tree-id16293 . -1) (undo-tree-id16294 . -1) (undo-tree-id16295 . -1) (undo-tree-id16296 . -1) (undo-tree-id16297 . -1) (undo-tree-id16298 . -1) (undo-tree-id16299 . -1) (undo-tree-id16300 . -1) (undo-tree-id16301 . -1) (undo-tree-id16302 . -1) (undo-tree-id16303 . -1) (undo-tree-id16304 . -1) (undo-tree-id16305 . -1) (undo-tree-id16306 . -1) (undo-tree-id16307 . -1) (undo-tree-id16308 . -1) (undo-tree-id16309 . -1) (undo-tree-id16310 . -1) (undo-tree-id16311 . -1) (undo-tree-id16312 . -1) (undo-tree-id16313 . -1) (undo-tree-id16314 . -1) (undo-tree-id16315 . -1) (undo-tree-id16316 . -1) (undo-tree-id16317 . -1) (undo-tree-id16318 . -1) (undo-tree-id16319 . -1) (undo-tree-id16320 . -1) (undo-tree-id16321 . -1) (undo-tree-id16322 . -1) (undo-tree-id16323 . -1) (undo-tree-id16324 . -1) (undo-tree-id16325 . -1) (undo-tree-id16326 . -1) (undo-tree-id16327 . -1) (undo-tree-id16328 . -1) (undo-tree-id16329 . -1) (undo-tree-id16330 . -1) (undo-tree-id16331 . -1) (undo-tree-id16332 . -1) (undo-tree-id16333 . -1) (undo-tree-id16334 . -1) (undo-tree-id16335 . -1) (undo-tree-id16336 . -1) (undo-tree-id16337 . -1) (undo-tree-id16338 . -1) (undo-tree-id16339 . -1) (undo-tree-id16340 . -1) (undo-tree-id16341 . -1) (undo-tree-id16342 . -1) (undo-tree-id16343 . -1) (undo-tree-id16344 . -1) (undo-tree-id16345 . -1) (undo-tree-id16346 . -1) (undo-tree-id16347 . -1) (undo-tree-id16348 . -1) (undo-tree-id16349 . -1) (undo-tree-id16350 . -1) (undo-tree-id16351 . -1) (undo-tree-id16352 . -1) (undo-tree-id16353 . -1) (undo-tree-id16354 . -1) (undo-tree-id16355 . -1) (undo-tree-id16356 . -1) (undo-tree-id16357 . -1) (undo-tree-id16358 . -1) (undo-tree-id16359 . -1) (undo-tree-id16360 . -1) (undo-tree-id16361 . -1) (undo-tree-id16362 . -1) (undo-tree-id16363 . -1) (undo-tree-id16364 . -1) (undo-tree-id16365 . -1) (undo-tree-id16366 . -1) (undo-tree-id16367 . -1) (undo-tree-id16368 . -1) (undo-tree-id16369 . -1) (undo-tree-id16370 . -1) (undo-tree-id16371 . -1) (undo-tree-id16372 . -1) (undo-tree-id16373 . -1) (undo-tree-id16374 . -1) (undo-tree-id16375 . -1) (undo-tree-id16376 . -1) (undo-tree-id16377 . -1) (undo-tree-id16378 . -1) (undo-tree-id16379 . -1) (undo-tree-id16380 . -1) (undo-tree-id16381 . -1) (undo-tree-id16382 . -1) (undo-tree-id16383 . -1) (undo-tree-id16384 . -1) (undo-tree-id16385 . -1) (undo-tree-id16386 . -1) (undo-tree-id16387 . -1) (undo-tree-id16388 . -1) (undo-tree-id16389 . -1) (undo-tree-id16390 . -1) (undo-tree-id16391 . -1) (undo-tree-id16392 . -1) (undo-tree-id16393 . -1) (undo-tree-id16394 . -1) (undo-tree-id16395 . -1) (undo-tree-id16396 . -1) (undo-tree-id16397 . -1) (undo-tree-id16398 . -1) (undo-tree-id16399 . -1) (undo-tree-id16400 . -1) (undo-tree-id16401 . -1) (undo-tree-id16402 . -1) (undo-tree-id16403 . -1) (undo-tree-id16404 . -1) (undo-tree-id16405 . -1) (undo-tree-id16406 . -1) (undo-tree-id16407 . -1) (undo-tree-id16408 . -1) (undo-tree-id16409 . -1) (undo-tree-id16410 . -1) (undo-tree-id16411 . -1) (undo-tree-id16412 . -1) (undo-tree-id16413 . -1) (undo-tree-id16414 . -1) (undo-tree-id16415 . -1) (undo-tree-id16416 . -1) (undo-tree-id16417 . -1) (undo-tree-id16418 . -1) (undo-tree-id16419 . -1) (undo-tree-id16420 . -1) (undo-tree-id16421 . -1) (undo-tree-id16422 . -1) (undo-tree-id16423 . -1) (undo-tree-id16424 . -1) (undo-tree-id16425 . -1) (undo-tree-id16426 . -1) (undo-tree-id16427 . -1) (undo-tree-id16428 . -1) (undo-tree-id16429 . -1) (undo-tree-id16430 . -1) (undo-tree-id16431 . -1) (undo-tree-id16432 . -1) (undo-tree-id16433 . -1) (undo-tree-id16434 . -1) (undo-tree-id16435 . -1) (undo-tree-id16436 . -1) (undo-tree-id16437 . -1) (undo-tree-id16438 . -1) (undo-tree-id16439 . -1) (undo-tree-id16440 . -1) (undo-tree-id16441 . -1) (undo-tree-id16442 . -1) (undo-tree-id16443 . -1) (undo-tree-id16444 . -1) (undo-tree-id16445 . -1) (undo-tree-id16446 . -1) (undo-tree-id16447 . -1) (undo-tree-id16448 . -1) (undo-tree-id16449 . -1) (undo-tree-id16450 . -1) (undo-tree-id16451 . -1) (undo-tree-id16452 . -1) (undo-tree-id16453 . -1) (undo-tree-id16454 . -1) (undo-tree-id16455 . -1) (undo-tree-id16456 . -1) (undo-tree-id16457 . -1) (undo-tree-id16458 . -1) (undo-tree-id16459 . -1) (undo-tree-id16460 . -1) (undo-tree-id16461 . -1) (undo-tree-id16462 . -1) (undo-tree-id16463 . -1) (undo-tree-id16464 . -1) (undo-tree-id16465 . -1) (undo-tree-id16466 . -1) (undo-tree-id16467 . -1) (undo-tree-id16468 . -1) (undo-tree-id16469 . -1) (undo-tree-id16470 . -1) (undo-tree-id16471 . -1) (undo-tree-id16472 . -1) (undo-tree-id16473 . -1) (undo-tree-id16474 . -1) (undo-tree-id16475 . -1) (undo-tree-id16476 . -1) (undo-tree-id16477 . -1) (undo-tree-id16478 . -1) (undo-tree-id16479 . -1) (undo-tree-id16480 . -1) (undo-tree-id16481 . -1) (undo-tree-id16482 . -1) (undo-tree-id16483 . -1) (undo-tree-id16484 . -1) (undo-tree-id16485 . -1) (undo-tree-id16486 . -1) (undo-tree-id16487 . -1) (undo-tree-id16488 . -1) (undo-tree-id16489 . -1) (undo-tree-id16490 . -1) (undo-tree-id16491 . -1) (undo-tree-id16492 . -1) (undo-tree-id16493 . -1) (undo-tree-id16494 . -1) (undo-tree-id16495 . -1) (undo-tree-id16496 . -1) (undo-tree-id16497 . -1) (undo-tree-id16498 . -1) (undo-tree-id16499 . -1) (undo-tree-id16500 . -1) (undo-tree-id16501 . -1) (undo-tree-id16502 . -1) (undo-tree-id16503 . -1) (undo-tree-id16504 . -1) (undo-tree-id16505 . -1) (undo-tree-id16506 . -1) (undo-tree-id16507 . -1) (undo-tree-id16508 . -1) (undo-tree-id16509 . -1) (undo-tree-id16510 . -1) (undo-tree-id16511 . -1) (undo-tree-id16512 . -1) (undo-tree-id16513 . -1) (undo-tree-id16514 . -1) (undo-tree-id16515 . -1) (undo-tree-id16516 . -1) (undo-tree-id16517 . -1) (undo-tree-id16518 . -1) (undo-tree-id16519 . -1) (undo-tree-id16520 . -1) (undo-tree-id16521 . -1) (undo-tree-id16522 . -1) (undo-tree-id16523 . -1) (undo-tree-id16524 . -1) (undo-tree-id16525 . -1) (undo-tree-id16526 . -1) (undo-tree-id16527 . -1) (undo-tree-id16528 . -1) (undo-tree-id16529 . -1) (undo-tree-id16530 . -1) (undo-tree-id16531 . -1) (undo-tree-id16532 . -1) (undo-tree-id16533 . -1) (undo-tree-id16534 . -1) (undo-tree-id16535 . -1) (undo-tree-id16536 . -1) (undo-tree-id16537 . -1) (undo-tree-id16538 . -1) (undo-tree-id16539 . -1) (undo-tree-id16540 . -1) (undo-tree-id16541 . -1) (undo-tree-id16542 . -1) (undo-tree-id16543 . -1) (undo-tree-id16544 . -1) (undo-tree-id16545 . -1) (undo-tree-id16546 . -1) (undo-tree-id16547 . -1) (undo-tree-id16548 . -1) (undo-tree-id16549 . -1) (undo-tree-id16550 . -1) (undo-tree-id16551 . -1) (undo-tree-id16552 . -1) (undo-tree-id16553 . -1) (undo-tree-id16554 . -1) (undo-tree-id16555 . -1) (undo-tree-id16556 . -1) (undo-tree-id16557 . -1) (undo-tree-id16558 . -1) (undo-tree-id16559 . -1) (undo-tree-id16560 . -1) (undo-tree-id16561 . -1) (undo-tree-id16562 . -1) (undo-tree-id16563 . -1) (undo-tree-id16564 . -1) (undo-tree-id16565 . -1) (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . -31087) (undo-tree-id16566 . -1) (undo-tree-id16567 . -1) (undo-tree-id16568 . -1) (undo-tree-id16569 . -1) (undo-tree-id16570 . -1) (undo-tree-id16571 . -1) (undo-tree-id16572 . -1) (undo-tree-id16573 . -1) (undo-tree-id16574 . -1) (undo-tree-id16575 . -1) (undo-tree-id16576 . -1) (undo-tree-id16577 . -1) (undo-tree-id16578 . -1) (undo-tree-id16579 . -1) (undo-tree-id16580 . -1) (undo-tree-id16581 . -1) (undo-tree-id16582 . -1) (undo-tree-id16583 . -1) (undo-tree-id16584 . -1) (undo-tree-id16585 . -1) (undo-tree-id16586 . -1) (undo-tree-id16587 . -1) (undo-tree-id16588 . -1) (undo-tree-id16589 . -1) (undo-tree-id16590 . -1) (undo-tree-id16591 . -1) (undo-tree-id16592 . -1) (undo-tree-id16593 . -1) (undo-tree-id16594 . -1) (undo-tree-id16595 . -1) (undo-tree-id16596 . -1) (undo-tree-id16597 . -1) (undo-tree-id16598 . -1) (undo-tree-id16599 . -1) (undo-tree-id16600 . -1) (undo-tree-id16601 . -1) (undo-tree-id16602 . -1) (undo-tree-id16603 . -1) (undo-tree-id16604 . -1) (undo-tree-id16605 . -1) (undo-tree-id16606 . -1) (undo-tree-id16607 . -1) (undo-tree-id16608 . -1) (undo-tree-id16609 . -1) (undo-tree-id16610 . -1) (undo-tree-id16611 . -1) (undo-tree-id16612 . -1) (undo-tree-id16613 . -1) (undo-tree-id16614 . -1) (undo-tree-id16615 . -1) (undo-tree-id16616 . -1) (undo-tree-id16617 . -1) (undo-tree-id16618 . -1) (undo-tree-id16619 . -1) (undo-tree-id16620 . -1) (undo-tree-id16621 . -1) (undo-tree-id16622 . -1) (undo-tree-id16623 . -1) (undo-tree-id16624 . -1) (undo-tree-id16625 . -1) (undo-tree-id16626 . -1) (undo-tree-id16627 . -1) (undo-tree-id16628 . -1) (undo-tree-id16629 . -1) (undo-tree-id16630 . -1) (undo-tree-id16631 . -1) (undo-tree-id16632 . -1) (undo-tree-id16633 . -1) (undo-tree-id16634 . -1) (undo-tree-id16635 . -1) (undo-tree-id16636 . -1) (undo-tree-id16637 . -1) (undo-tree-id16638 . -1) (undo-tree-id16639 . -1) (undo-tree-id16640 . -1) (undo-tree-id16641 . -1) (undo-tree-id16642 . -1) (undo-tree-id16643 . -1) (undo-tree-id16644 . -1) (undo-tree-id16645 . -1) (undo-tree-id16646 . -1) (undo-tree-id16647 . -1) (undo-tree-id16648 . -1) (undo-tree-id16649 . -1) (undo-tree-id16650 . -1) (undo-tree-id16651 . -1) (undo-tree-id16652 . -1) (undo-tree-id16653 . -1) (undo-tree-id16654 . -1) (undo-tree-id16655 . -1) (undo-tree-id16656 . -1) (undo-tree-id16657 . -1) (undo-tree-id16658 . -1) (undo-tree-id16659 . -1) (undo-tree-id16660 . -1) (undo-tree-id16661 . -1) (undo-tree-id16662 . -1) (undo-tree-id16663 . -1) (undo-tree-id16664 . -1) (undo-tree-id16665 . -1) (undo-tree-id16666 . -1) (undo-tree-id16667 . -1) (undo-tree-id16668 . -1) (undo-tree-id16669 . -1) (undo-tree-id16670 . -1) (undo-tree-id16671 . -1) (undo-tree-id16672 . -1) (undo-tree-id16673 . -1) (undo-tree-id16674 . -1) (undo-tree-id16675 . -1) (undo-tree-id16676 . -1) (undo-tree-id16677 . -1) (undo-tree-id16678 . -1) (undo-tree-id16679 . -1) (undo-tree-id16680 . -1) (undo-tree-id16681 . -1) (undo-tree-id16682 . -1) (undo-tree-id16683 . -1) (undo-tree-id16684 . -1) (undo-tree-id16685 . -1) (undo-tree-id16686 . -1) (undo-tree-id16687 . -1) (undo-tree-id16688 . -1) (undo-tree-id16689 . -1) (undo-tree-id16690 . -1) (undo-tree-id16691 . -1) (undo-tree-id16692 . -1) (undo-tree-id16693 . -1) (undo-tree-id16694 . -1) (undo-tree-id16695 . -1) (undo-tree-id16696 . -1) (undo-tree-id16697 . -1) (undo-tree-id16698 . -1) (undo-tree-id16699 . -1) (undo-tree-id16700 . -1) (undo-tree-id16701 . -1) (undo-tree-id16702 . -1) (undo-tree-id16703 . -1) (undo-tree-id16704 . -1) (undo-tree-id16705 . -1) (undo-tree-id16706 . -1) (undo-tree-id16707 . -1) (undo-tree-id16708 . -1) (undo-tree-id16709 . -1) (undo-tree-id16710 . -1) (undo-tree-id16711 . -1) (undo-tree-id16712 . -1) (undo-tree-id16713 . -1) (undo-tree-id16714 . -1) (undo-tree-id16715 . -1) (undo-tree-id16716 . -1) (undo-tree-id16717 . -1) (undo-tree-id16718 . -1) (undo-tree-id16719 . -1) (undo-tree-id16720 . -1) (undo-tree-id16721 . -1) (undo-tree-id16722 . -1) (undo-tree-id16723 . -1) (undo-tree-id16724 . -1) (undo-tree-id16725 . -1) (undo-tree-id16726 . -1) (undo-tree-id16727 . -1) (undo-tree-id16728 . -1) (undo-tree-id16729 . -1) (undo-tree-id16730 . -1) (undo-tree-id16731 . -1) (undo-tree-id16732 . -1) (undo-tree-id16733 . -1) (undo-tree-id16734 . -1) (undo-tree-id16735 . -1) (undo-tree-id16736 . -1) (undo-tree-id16737 . -1) (undo-tree-id16738 . -1) (undo-tree-id16739 . -1) (undo-tree-id16740 . -1) (undo-tree-id16741 . -1) (undo-tree-id16742 . -1) (undo-tree-id16743 . -1) (undo-tree-id16744 . -1) (undo-tree-id16745 . -1) (undo-tree-id16746 . -1) (undo-tree-id16747 . -1) (undo-tree-id16748 . -1) (undo-tree-id16749 . -1) (undo-tree-id16750 . -1) (undo-tree-id16751 . -1) (undo-tree-id16752 . -1) (undo-tree-id16753 . -1) (undo-tree-id16754 . -1) (undo-tree-id16755 . -1) (undo-tree-id16756 . -1) (undo-tree-id16757 . -1) (undo-tree-id16758 . -1) (undo-tree-id16759 . -1) (undo-tree-id16760 . -1) (undo-tree-id16761 . -1) (undo-tree-id16762 . -1) (undo-tree-id16763 . -1) (undo-tree-id16764 . -1) (undo-tree-id16765 . -1) (undo-tree-id16766 . -1) (undo-tree-id16767 . -1) (undo-tree-id16768 . -1) (undo-tree-id16769 . -1) (undo-tree-id16770 . -1) (undo-tree-id16771 . -1) (undo-tree-id16772 . -1) (undo-tree-id16773 . -1) (undo-tree-id16774 . -1) (undo-tree-id16775 . -1) (undo-tree-id16776 . -1) (undo-tree-id16777 . -1) (undo-tree-id16778 . -1) (undo-tree-id16779 . -1) (undo-tree-id16780 . -1) (undo-tree-id16781 . -1) (undo-tree-id16782 . -1) (undo-tree-id16783 . -1) (undo-tree-id16784 . -1) (undo-tree-id16785 . -1) (undo-tree-id16786 . -1) (undo-tree-id16787 . -1) (undo-tree-id16788 . -1) (undo-tree-id16789 . -1) (undo-tree-id16790 . -1) (undo-tree-id16791 . -1) (undo-tree-id16792 . -1) (undo-tree-id16793 . -1) (undo-tree-id16794 . -1) (undo-tree-id16795 . -1) (undo-tree-id16796 . -1) (undo-tree-id16797 . -1) (undo-tree-id16798 . -1) (undo-tree-id16799 . -1) (undo-tree-id16800 . -1) (undo-tree-id16801 . -1) (undo-tree-id16802 . -1) (undo-tree-id16803 . -1) (undo-tree-id16804 . -1) (undo-tree-id16805 . -1) (undo-tree-id16806 . -1) (undo-tree-id16807 . -1) (undo-tree-id16808 . -1) (undo-tree-id16809 . -1) (undo-tree-id16810 . -1) (undo-tree-id16811 . -1) (undo-tree-id16812 . -1) (undo-tree-id16813 . -1) (undo-tree-id16814 . -1) (undo-tree-id16815 . -1) (undo-tree-id16816 . -1) (undo-tree-id16817 . -1) (undo-tree-id16818 . -1) (undo-tree-id16819 . -1) (undo-tree-id16820 . -1) (undo-tree-id16821 . -1) (undo-tree-id16822 . -1) (undo-tree-id16823 . -1) (undo-tree-id16824 . -1) (undo-tree-id16825 . -1) (undo-tree-id16826 . -1) (undo-tree-id16827 . -1) (undo-tree-id16828 . -1) (undo-tree-id16829 . -1) (undo-tree-id16830 . -1) (undo-tree-id16831 . -1) (undo-tree-id16832 . -1) (undo-tree-id16833 . -1) (undo-tree-id16834 . -1) (undo-tree-id16835 . -1) (undo-tree-id16836 . -1) (undo-tree-id16837 . -1) (undo-tree-id16838 . -1) (undo-tree-id16839 . -1) (undo-tree-id16840 . -1) (undo-tree-id16841 . -1) (undo-tree-id16842 . -1) (undo-tree-id16843 . -1) (undo-tree-id16844 . -1) (undo-tree-id16845 . -1) (undo-tree-id16846 . -1) (undo-tree-id16847 . -1) (undo-tree-id16848 . -1) (undo-tree-id16849 . -1) (undo-tree-id16850 . -1) (undo-tree-id16851 . -1) (undo-tree-id16852 . -1) (undo-tree-id16853 . -1) (undo-tree-id16854 . -1) (undo-tree-id16855 . -1) (undo-tree-id16856 . -1) (undo-tree-id16857 . -1) (undo-tree-id16858 . -1) (undo-tree-id16859 . -1) (undo-tree-id16860 . -1) (undo-tree-id16861 . -1) (undo-tree-id16862 . -1) (undo-tree-id16863 . -1) (undo-tree-id16864 . -1) (undo-tree-id16865 . -1) (undo-tree-id16866 . -1) (undo-tree-id16867 . -1) (undo-tree-id16868 . -1) (undo-tree-id16869 . -1) (undo-tree-id16870 . -1) (undo-tree-id16871 . -1) (undo-tree-id16872 . -1) (undo-tree-id16873 . -1) (undo-tree-id16874 . -1) (undo-tree-id16875 . -1) (undo-tree-id16876 . -1) (undo-tree-id16877 . -1) (undo-tree-id16878 . -1) (undo-tree-id16879 . -1) (undo-tree-id16880 . -1) (undo-tree-id16881 . -1) (undo-tree-id16882 . -1) (undo-tree-id16883 . -1) (undo-tree-id16884 . -1) (undo-tree-id16885 . -1) (undo-tree-id16886 . -1) (undo-tree-id16887 . -1) (undo-tree-id16888 . -1) (undo-tree-id16889 . -1) (undo-tree-id16890 . -1) (undo-tree-id16891 . -1) (undo-tree-id16892 . -1) (undo-tree-id16893 . -1) (undo-tree-id16894 . -1) (undo-tree-id16895 . -1) (undo-tree-id16896 . -1) (undo-tree-id16897 . -1) (undo-tree-id16898 . -1) (undo-tree-id16899 . -1) (undo-tree-id16900 . -1) (undo-tree-id16901 . -1) (undo-tree-id16902 . -1) (undo-tree-id16903 . -1) (undo-tree-id16904 . -1) (undo-tree-id16905 . -1) (undo-tree-id16906 . -1) (undo-tree-id16907 . -1) (undo-tree-id16908 . -1) (undo-tree-id16909 . -1) (undo-tree-id16910 . -1) (undo-tree-id16911 . -1) (undo-tree-id16912 . -1) (undo-tree-id16913 . -1) (undo-tree-id16914 . -1) (undo-tree-id16915 . -1) (undo-tree-id16916 . -1) (undo-tree-id16917 . -1) (undo-tree-id16918 . -1) (undo-tree-id16919 . -1) (undo-tree-id16920 . -1) (undo-tree-id16921 . -1) (undo-tree-id16922 . -1) (undo-tree-id16923 . -1) (undo-tree-id16924 . -1) (undo-tree-id16925 . -1) (undo-tree-id16926 . -1) (undo-tree-id16927 . -1) (undo-tree-id16928 . -1) (undo-tree-id16929 . -1) (undo-tree-id16930 . -1) (undo-tree-id16931 . -1) (undo-tree-id16932 . -1) (undo-tree-id16933 . -1) (undo-tree-id16934 . -1) (undo-tree-id16935 . -1) (undo-tree-id16936 . -1) (undo-tree-id16937 . -1) (undo-tree-id16938 . -1) (undo-tree-id16939 . -1) (undo-tree-id16940 . -1) (undo-tree-id16941 . -1) (undo-tree-id16942 . -1) (undo-tree-id16943 . -1) (undo-tree-id16944 . -1) (undo-tree-id16945 . -1) (undo-tree-id16946 . -1) (undo-tree-id16947 . -1) (undo-tree-id16948 . -1) (undo-tree-id16949 . -1) (undo-tree-id16950 . -1) (undo-tree-id16951 . -1) (undo-tree-id16952 . -1) (undo-tree-id16953 . -1) (undo-tree-id16954 . -1) (undo-tree-id16955 . -1) (undo-tree-id16956 . -1) (undo-tree-id16957 . -1) (undo-tree-id16958 . -1) (undo-tree-id16959 . -1) (undo-tree-id16960 . -1) (undo-tree-id16961 . -1) (undo-tree-id16962 . -1) (undo-tree-id16963 . -1) (undo-tree-id16964 . -1) (undo-tree-id16965 . -1) (undo-tree-id16966 . -1) (undo-tree-id16967 . -1) (undo-tree-id16968 . -1) (undo-tree-id16969 . -1) (undo-tree-id16970 . -1) (undo-tree-id16971 . -1) (undo-tree-id16972 . -1) (undo-tree-id16973 . -1) (undo-tree-id16974 . -1) (undo-tree-id16975 . -1) (undo-tree-id16976 . -1) (undo-tree-id16977 . -1) (undo-tree-id16978 . -1) (undo-tree-id16979 . -1) (undo-tree-id16980 . -1) (undo-tree-id16981 . -1) (undo-tree-id16982 . -1) (undo-tree-id16983 . -1) (undo-tree-id16984 . -1) (undo-tree-id16985 . -1) (undo-tree-id16986 . -1) (undo-tree-id16987 . -1) (undo-tree-id16988 . -1) (undo-tree-id16989 . -1) (undo-tree-id16990 . -1) (undo-tree-id16991 . -1) (undo-tree-id16992 . -1) (undo-tree-id16993 . -1) (undo-tree-id16994 . -1) 31088) nil (25755 14629 163330 770000) 0 nil])
([nil nil ((31091 . 31103)) nil (25755 14629 161505 601000) 0 nil])
([nil nil ((31130 . 31131)) nil (25755 14629 161504 937000) 0 nil])
([nil nil ((31131 . 31134)) nil (25755 14629 161503 737000) 0 nil])
([nil nil ((30997 . 30998)) nil (25755 14646 104625 518000) 0 nil])
([nil nil ((#("1" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 30922) (undo-tree-id17434 . -1) (undo-tree-id17435 . -1) (t 25755 14629 228981 270000)) nil (25755 14652 573676 488000) 0 nil] [nil nil ((#("1" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 30922) (undo-tree-id17368 . -1) (undo-tree-id17369 . -1) (t 25755 14629 228981 270000)) ((30922 . 30923)) (25755 14645 647414 113000) 0 nil])
([nil nil ((30924 . 30925) (#("a" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 30924)) nil (25755 14677 170483 339000) 0 nil] [nil nil ((30922 . 30923) (#("." 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 30922) (undo-tree-id17431 . -1) (undo-tree-id17432 . -1) (undo-tree-id17433 . -1)) ((30922 . 30923) (#("-" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t composition (1 1 [8226]))) . 30922)) (25755 14652 573375 248000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 30922) (undo-tree-id17366 . -1) (undo-tree-id17367 . -1)) ((30922 . 30923)) (25755 14644 440286 466000) 0 nil])
([nil nil ((30995 . 30996)) nil (25755 14677 170482 111000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)))) . 30922) (undo-tree-id17364 . -1) (undo-tree-id17365 . -1)) ((30922 . 30923)) (25755 14642 209406 591000) 0 nil])
([nil nil ((#(" 
" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) fontified t)) . 30996) (undo-tree-id17436 . -1) (undo-tree-id17437 . 2) (undo-tree-id17438 . -2) (undo-tree-id17439 . -2) (undo-tree-id17440 . -2) (undo-tree-id17441 . -2) (undo-tree-id17442 . -2) (undo-tree-id17443 . -2) (undo-tree-id17444 . -2) (undo-tree-id17445 . -2) (undo-tree-id17446 . -2) (undo-tree-id17447 . -2) (undo-tree-id17448 . -2) (undo-tree-id17449 . -2) (undo-tree-id17450 . -2) (undo-tree-id17451 . -2) (undo-tree-id17452 . -2) (undo-tree-id17453 . -2) (undo-tree-id17454 . -2) (undo-tree-id17455 . -2) (undo-tree-id17456 . -2) (undo-tree-id17457 . -2) (undo-tree-id17458 . -2) (undo-tree-id17459 . -2) (undo-tree-id17460 . -2) (undo-tree-id17461 . -2) (undo-tree-id17462 . -2) (undo-tree-id17463 . -2) (undo-tree-id17464 . -2) (undo-tree-id17465 . -2) (undo-tree-id17466 . -2) (undo-tree-id17467 . -2) (undo-tree-id17468 . -2) (undo-tree-id17469 . -2) (undo-tree-id17470 . -2) (undo-tree-id17471 . -2) (undo-tree-id17472 . -2) (undo-tree-id17473 . -2) (undo-tree-id17474 . -2) (undo-tree-id17475 . -2) (undo-tree-id17476 . -2) (undo-tree-id17477 . -2) (undo-tree-id17478 . -2) (undo-tree-id17479 . -2) (undo-tree-id17480 . -2) (undo-tree-id17481 . -2) (undo-tree-id17482 . -2) (undo-tree-id17483 . -2) (undo-tree-id17484 . -2) (undo-tree-id17485 . -2) (undo-tree-id17486 . -2) (undo-tree-id17487 . -2) (undo-tree-id17488 . -2) (undo-tree-id17489 . -2) (undo-tree-id17490 . -2) (undo-tree-id17491 . -2) (undo-tree-id17492 . -2) (undo-tree-id17493 . -2) (undo-tree-id17494 . -2) (undo-tree-id17495 . -2) (undo-tree-id17496 . -2) (undo-tree-id17497 . -2) (undo-tree-id17498 . -2) (undo-tree-id17499 . -2) (undo-tree-id17500 . -2) (undo-tree-id17501 . -2) (undo-tree-id17502 . -2) (undo-tree-id17503 . -2) (undo-tree-id17504 . -2) (undo-tree-id17505 . -2) (undo-tree-id17506 . -2) (undo-tree-id17507 . -2) (undo-tree-id17508 . -2) (undo-tree-id17509 . -2) (undo-tree-id17510 . -2) (undo-tree-id17511 . -2) (undo-tree-id17512 . -2) (undo-tree-id17513 . -2) (undo-tree-id17514 . -2) (undo-tree-id17515 . -2) (undo-tree-id17516 . -2) (undo-tree-id17517 . -2) (undo-tree-id17518 . -2) (undo-tree-id17519 . -2) (undo-tree-id17520 . -2) (undo-tree-id17521 . -2) (undo-tree-id17522 . -2) (undo-tree-id17523 . -2) (undo-tree-id17524 . -2) (undo-tree-id17525 . -2) (undo-tree-id17526 . -2) (undo-tree-id17527 . -2) (undo-tree-id17528 . -2) (undo-tree-id17529 . -2) (undo-tree-id17530 . -2) (undo-tree-id17531 . -2) (undo-tree-id17532 . -2) (undo-tree-id17533 . -2) (undo-tree-id17534 . -2) (undo-tree-id17535 . -2) (undo-tree-id17536 . -2) (undo-tree-id17537 . -2) (undo-tree-id17538 . -2) (undo-tree-id17539 . -2) (undo-tree-id17540 . -2) (undo-tree-id17541 . -2) (undo-tree-id17542 . -2) (undo-tree-id17543 . -2) (undo-tree-id17544 . -2) (undo-tree-id17545 . -2) (undo-tree-id17546 . -2) (undo-tree-id17547 . -2) (undo-tree-id17548 . -2) (undo-tree-id17549 . -2) (undo-tree-id17550 . -2) (undo-tree-id17551 . -2) (undo-tree-id17552 . -2) (undo-tree-id17553 . -2) (undo-tree-id17554 . -2)) nil (25755 14677 170474 666000) 0 nil])
([nil nil ((30923 . 30925) (#("-" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -30923) (undo-tree-id17280 . -1) (undo-tree-id17281 . -1) (undo-tree-id17282 . -1) (undo-tree-id17283 . -1) (undo-tree-id17284 . -1) (undo-tree-id17285 . -1) (undo-tree-id17286 . -1) (undo-tree-id17287 . -1) (undo-tree-id17288 . -1) (undo-tree-id17289 . -1) (undo-tree-id17290 . -1) (undo-tree-id17291 . -1) (undo-tree-id17292 . -1) (undo-tree-id17293 . -1) (undo-tree-id17294 . -1) (undo-tree-id17295 . -1) (undo-tree-id17296 . -1) (undo-tree-id17297 . -1) (undo-tree-id17298 . -1) (undo-tree-id17299 . -1) (undo-tree-id17300 . -1) (undo-tree-id17301 . -1) (undo-tree-id17302 . -1) (undo-tree-id17303 . -1) (undo-tree-id17304 . -1) (undo-tree-id17305 . -1) (undo-tree-id17306 . -1) (undo-tree-id17307 . -1) (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -30924) (undo-tree-id17308 . -1) (undo-tree-id17309 . -1) (undo-tree-id17310 . -1) (undo-tree-id17311 . -1) (undo-tree-id17312 . -1) (undo-tree-id17313 . -1) (undo-tree-id17314 . -1) (undo-tree-id17315 . -1) (undo-tree-id17316 . -1) (undo-tree-id17317 . -1) (undo-tree-id17318 . -1) 30925 (30922 . 30925) (#("a" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -30922) (undo-tree-id17319 . -1) (undo-tree-id17320 . -1) (undo-tree-id17321 . -1) (undo-tree-id17322 . -1) (undo-tree-id17323 . -1) (undo-tree-id17324 . -1) (undo-tree-id17325 . -1) (undo-tree-id17326 . -1) (undo-tree-id17327 . -1) (undo-tree-id17328 . -1) (undo-tree-id17329 . -1) (undo-tree-id17330 . -1) (undo-tree-id17331 . -1) (undo-tree-id17332 . -1) (undo-tree-id17333 . -1) (undo-tree-id17334 . -1) (undo-tree-id17335 . -1) (undo-tree-id17336 . -1) (undo-tree-id17337 . -1) (undo-tree-id17338 . -1) (undo-tree-id17339 . -1) (undo-tree-id17340 . -1) (undo-tree-id17341 . -1) (undo-tree-id17342 . -1) (undo-tree-id17343 . 1) (undo-tree-id17344 . -1) (undo-tree-id17345 . -1) (undo-tree-id17346 . -1) (undo-tree-id17347 . -1) (undo-tree-id17348 . -1) (undo-tree-id17349 . -1) (undo-tree-id17350 . -1) (undo-tree-id17351 . -1) (undo-tree-id17352 . -1) (undo-tree-id17353 . -1) (#("-" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -30923) (undo-tree-id17354 . -1) (undo-tree-id17355 . -1) (undo-tree-id17356 . -1) (undo-tree-id17357 . -1) (undo-tree-id17358 . -1) (undo-tree-id17359 . -1) (undo-tree-id17360 . -1) (undo-tree-id17361 . -1) (undo-tree-id17362 . -1) (undo-tree-id17363 . -1) 30924 (30922 . 30924)) ((#("a-" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil) 1 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 30922) (undo-tree-id17373 . -1) (undo-tree-id17374 . -1) (undo-tree-id17375 . -1) (undo-tree-id17376 . -1) (undo-tree-id17377 . -1) (undo-tree-id17378 . -1) (undo-tree-id17379 . -1) (undo-tree-id17380 . -1) (undo-tree-id17381 . -1) (undo-tree-id17382 . -1) (undo-tree-id17383 . -1) (undo-tree-id17384 . -1) (undo-tree-id17385 . -1) (undo-tree-id17386 . -1) (undo-tree-id17387 . -1) (undo-tree-id17388 . -2) (undo-tree-id17389 . -2) (undo-tree-id17390 . -2) (undo-tree-id17391 . -2) (undo-tree-id17392 . -2) (undo-tree-id17393 . -2) (undo-tree-id17394 . -2) (undo-tree-id17395 . -2) (undo-tree-id17396 . -1) (undo-tree-id17397 . -1) (undo-tree-id17398 . -1) (undo-tree-id17399 . -1) (undo-tree-id17400 . -1) (undo-tree-id17401 . -1) (undo-tree-id17402 . -1) (undo-tree-id17403 . -1) (undo-tree-id17404 . -1) (30922 . 30924) (#("1- " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil) 1 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil) 2 3 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified nil)) . 30922) (undo-tree-id17405 . -2) (undo-tree-id17406 . -2) (undo-tree-id17407 . -2) (undo-tree-id17408 . -2) (undo-tree-id17409 . -2) (undo-tree-id17410 . -2) (undo-tree-id17411 . -2) (undo-tree-id17412 . -2) (undo-tree-id17413 . -3) (undo-tree-id17414 . -3) (undo-tree-id17415 . -3) (undo-tree-id17416 . -3) (undo-tree-id17417 . -3) (undo-tree-id17418 . -3) (undo-tree-id17419 . -3) (undo-tree-id17420 . -3) (undo-tree-id17421 . -3) (undo-tree-id17422 . -2) (undo-tree-id17423 . -2) (undo-tree-id17424 . -2) (undo-tree-id17425 . -2) (undo-tree-id17426 . -2) (undo-tree-id17427 . -2) (undo-tree-id17428 . -2) (undo-tree-id17429 . -2) (undo-tree-id17430 . -2) (30923 . 30925) (#(". " 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 30923)) (25755 14640 870157 867000) 0 nil])
([nil nil ((30996 . 30998)) nil (25755 14677 170083 917000) 0 nil])
([nil nil ((31073 . 31078)) ((#("
*** " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent))) 1 3 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) face org-hide keymap (keymap)) 3 4 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) composition (2 1 [9675]) keymap (keymap) face org-level-3) 4 5 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) keymap (keymap) face org-level-3)) . 31073) (undo-tree-id17370 . -5) (undo-tree-id17371 . -5) (undo-tree-id17372 . -5)) (25755 14640 869688 724000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)))) . 31134) (undo-tree-id17609 . -1) (undo-tree-id17610 . -1) (t 25755 14677 239289 188000)) nil (25755 14701 739744 49000) 0 nil])
nil
([nil nil ((#(": this will drop all the bounding boxes that don’t actually contain a flower." 0 33 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t) 33 34 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent))) 34 77 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t)) . 31227) (undo-tree-id17705 . -76) (undo-tree-id17706 . -2) (undo-tree-id17707 . -2) (undo-tree-id17708 . -2) (undo-tree-id17709 . -2) (undo-tree-id17710 . -2) (undo-tree-id17711 . -2) (undo-tree-id17712 . -2) (undo-tree-id17713 . -2) (undo-tree-id17714 . -2) (undo-tree-id17715 . -2) (undo-tree-id17716 . -2) (undo-tree-id17717 . -2) (undo-tree-id17718 . -2) (undo-tree-id17719 . -2) (undo-tree-id17720 . -2) (undo-tree-id17721 . -2) (undo-tree-id17722 . -2) (undo-tree-id17723 . -2) (undo-tree-id17724 . -2) (undo-tree-id17725 . -2) (undo-tree-id17726 . -2) (undo-tree-id17727 . -2) (undo-tree-id17728 . -2) (undo-tree-id17729 . -2) (undo-tree-id17730 . -2) (undo-tree-id17731 . -2) (undo-tree-id17732 . -2) (undo-tree-id17733 . -2) (undo-tree-id17734 . -2) (undo-tree-id17735 . -1) (undo-tree-id17736 . -1) (undo-tree-id17737 . -1) (undo-tree-id17738 . -1) (undo-tree-id17739 . -1) (undo-tree-id17740 . -1) (undo-tree-id17741 . -1) (undo-tree-id17742 . -1) (undo-tree-id17743 . -1) (undo-tree-id17744 . -1) (undo-tree-id17745 . -1) (undo-tree-id17746 . -1) (undo-tree-id17747 . -1) (undo-tree-id17748 . -1) (undo-tree-id17749 . -1) (undo-tree-id17750 . -1) (undo-tree-id17751 . -1) (undo-tree-id17752 . -1) (undo-tree-id17753 . -1) (undo-tree-id17754 . -1) (undo-tree-id17755 . -1) (undo-tree-id17756 . -1) (undo-tree-id17757 . -77) (undo-tree-id17758 . -77)) nil (25755 14778 19575 329000) 0 nil] [nil nil ((#(": this will drop all the bounding boxes that don’t actually contain a flower." 0 33 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t) 33 34 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent))) 34 77 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t)) . 31227) (undo-tree-id17555 . -76) (undo-tree-id17556 . -2) (undo-tree-id17557 . -2) (undo-tree-id17558 . -2) (undo-tree-id17559 . -2) (undo-tree-id17560 . -2) (undo-tree-id17561 . -2) (undo-tree-id17562 . -2) (undo-tree-id17563 . -2) (undo-tree-id17564 . -2) (undo-tree-id17565 . -2) (undo-tree-id17566 . -2) (undo-tree-id17567 . -2) (undo-tree-id17568 . -2) (undo-tree-id17569 . -2) (undo-tree-id17570 . -2) (undo-tree-id17571 . -2) (undo-tree-id17572 . -2) (undo-tree-id17573 . -2) (undo-tree-id17574 . -2) (undo-tree-id17575 . -2) (undo-tree-id17576 . -2) (undo-tree-id17577 . -2) (undo-tree-id17578 . -2) (undo-tree-id17579 . -2) (undo-tree-id17580 . -2) (undo-tree-id17581 . -2) (undo-tree-id17582 . -2) (undo-tree-id17583 . -2) (undo-tree-id17584 . -2) (undo-tree-id17585 . -1) (undo-tree-id17586 . -1) (undo-tree-id17587 . -1) (undo-tree-id17588 . -1) (undo-tree-id17589 . -1) (undo-tree-id17590 . -1) (undo-tree-id17591 . -1) (undo-tree-id17592 . -1) (undo-tree-id17593 . -1) (undo-tree-id17594 . -1) (undo-tree-id17595 . -1) (undo-tree-id17596 . -1) (undo-tree-id17597 . -1) (undo-tree-id17598 . -1) (undo-tree-id17599 . -1) (undo-tree-id17600 . -1) (undo-tree-id17601 . -1) (undo-tree-id17602 . -1) (undo-tree-id17603 . -1) (undo-tree-id17604 . -1) (undo-tree-id17605 . -1) (undo-tree-id17606 . -1) (undo-tree-id17607 . -77) (undo-tree-id17608 . -77)) ((31227 . 31304)) (25755 14701 739472 727000) 0 nil])
([nil nil ((31227 . 31228)) nil (25755 14778 19538 286000) 0 nil])
nil
([nil nil ((31228 . 31229)) nil (25755 14778 19537 385000) 0 nil])
([nil nil ((#("2" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 31230) (undo-tree-id17703 . -1) (undo-tree-id17704 . -1)) nil (25755 14778 19536 378000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31230) (undo-tree-id17701 . -1) (undo-tree-id17702 . -1)) nil (25755 14778 19533 895000) 0 nil])
([nil nil ((31230 . 31232) (#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) fontified t)) . 31230) (undo-tree-id17698 . -1) (undo-tree-id17699 . -1) (undo-tree-id17700 . -1)) nil (25755 14778 19529 685000) 0 nil])
([nil nil ((#("(e.g.,with an IoU greater than 60%)" 0 35 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31360) (undo-tree-id17670 . -34) (undo-tree-id17671 . -16) (undo-tree-id17672 . -16) (undo-tree-id17673 . -16) (undo-tree-id17674 . -16) (undo-tree-id17675 . -16) (undo-tree-id17676 . -16) (undo-tree-id17677 . -16) (undo-tree-id17678 . -16) (undo-tree-id17679 . -16) (undo-tree-id17680 . -16) (undo-tree-id17681 . -16) (undo-tree-id17682 . -16) (undo-tree-id17683 . -16) (undo-tree-id17684 . -16) (undo-tree-id17685 . -16) (undo-tree-id17686 . -16) (undo-tree-id17687 . -16) (undo-tree-id17688 . -16) (undo-tree-id17689 . -16) (undo-tree-id17690 . -16) (undo-tree-id17691 . -16) (undo-tree-id17692 . -16) (undo-tree-id17693 . -16) (undo-tree-id17694 . -16) (undo-tree-id17695 . 21) (undo-tree-id17696 . -17) (undo-tree-id17697 . -35) 31331) nil (25755 14778 19278 252000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31359) (undo-tree-id17620 . -1) (undo-tree-id17621 . -1) (undo-tree-id17622 . -1) (undo-tree-id17623 . -1) (undo-tree-id17624 . -1) (undo-tree-id17625 . -1) (undo-tree-id17626 . -1) (undo-tree-id17627 . -1) (undo-tree-id17628 . -1) (undo-tree-id17629 . -1) (undo-tree-id17630 . -1) (undo-tree-id17631 . -1) (undo-tree-id17632 . -1) (undo-tree-id17633 . -1) (undo-tree-id17634 . -1) (undo-tree-id17635 . -1) (undo-tree-id17636 . -1) (undo-tree-id17637 . -1) (undo-tree-id17638 . -1) (undo-tree-id17639 . -1) (undo-tree-id17640 . -1) (undo-tree-id17641 . -1) (undo-tree-id17642 . -1) (undo-tree-id17643 . -1) (undo-tree-id17644 . -1) (undo-tree-id17645 . -1) (undo-tree-id17646 . -1) (undo-tree-id17647 . -1) (undo-tree-id17648 . -1) (undo-tree-id17649 . -1) (undo-tree-id17650 . -1) (undo-tree-id17651 . -1) (undo-tree-id17652 . -1) (undo-tree-id17653 . -1) (undo-tree-id17654 . -1) (undo-tree-id17655 . -1) (undo-tree-id17656 . -1) (undo-tree-id17657 . -1) (undo-tree-id17658 . -1) (undo-tree-id17659 . -1) (undo-tree-id17660 . -1) (undo-tree-id17661 . -1) (undo-tree-id17662 . -1) (undo-tree-id17663 . -1) (undo-tree-id17664 . -1) (undo-tree-id17665 . -1) (undo-tree-id17666 . -1) (undo-tree-id17667 . -1) (undo-tree-id17668 . -1) (undo-tree-id17669 . -1)) nil (25755 14778 19259 981000) 0 nil])
([nil nil ((31361 . 31362)) nil (25755 14783 363641 811000) 0 nil])
([nil nil ((#("For example, in Figure 14-24, the
" 0 30 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 30 34 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31362) (undo-tree-id17777 . -33) (undo-tree-id17778 . 34) (undo-tree-id17779 . -34)) nil (25755 14809 121650 432000) 0 nil] [nil nil ((#("For example, in Figure 14-24, the
" 0 30 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 30 34 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31362) (undo-tree-id17759 . -33) (undo-tree-id17760 . 34) (undo-tree-id17761 . -34)) ((31362 . 31396)) (25755 14783 363360 602000) 0 nil] [nil nil ((#("For example, in Figure 14-24, the
" 0 30 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 30 34 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31362) (undo-tree-id17617 . -33) (undo-tree-id17618 . 34) (undo-tree-id17619 . -34)) ((31362 . 31396)) (25755 14778 585010 539000) 0 nil])
([nil nil ((#("(the objectness score is represented by
the thickness of the bounding boxes)" 0 40 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 40 41 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 41 76 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31453) (undo-tree-id17775 . -75) (undo-tree-id17776 . -76) 31427) nil (25755 14809 121647 483000) 0 nil])
nil
([nil nil ((#("box over the topmost rose (the objectness score is represented by
" 0 66 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31427) (undo-tree-id17615 . -65) (undo-tree-id17616 . -66)) ((31427 . 31493)) (25755 14778 240510 439000) 0 nil])
([nil nil ((#("The other bounding box" 0 22 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31455) (undo-tree-id17772 . -21) (undo-tree-id17773 . -22) (undo-tree-id17774 . -22)) nil (25755 14809 121644 535000) 0 nil])
([nil nil ((#("the thickness of the bounding boxes). The other bounding box
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 61 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31427) (undo-tree-id17613 . -60) (undo-tree-id17614 . -61)) ((31427 . 31488)) (25755 14778 19799 524000) 0 nil])
([nil nil ((#("over that same rose overlaps a lot with the max bounding box, so
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 65 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31456) (undo-tree-id17770 . -64) (undo-tree-id17771 . -65)) nil (25755 14809 121641 359000) 0 nil])
([nil nil ((#("over that same rose overlaps a lot with the max bounding box, so
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 65 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31427) (undo-tree-id17611 . -64) (undo-tree-id17612 . -65)) ((31427 . 31492)) (25755 14778 19212 861000) 0 nil])
([nil nil ((#("we will get rid of it.
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 23 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31456) (undo-tree-id17768 . -22) (undo-tree-id17769 . -23)) nil (25755 14809 121638 400000) 0 nil])
nil
([nil nil ((#("3" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) fontified t)) . 31456) (undo-tree-id17766 . -1) (undo-tree-id17767 . -1)) nil (25755 14809 121633 621000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31456) (undo-tree-id17764 . -1) (undo-tree-id17765 . -1)) nil (25755 14809 121630 756000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) fontified t)) . 31456) (undo-tree-id17762 . -1) (undo-tree-id17763 . -1)) nil (25755 14809 121627 737000) 0 nil])
([nil nil ((31456 . 31458)) nil (25755 14809 121616 863000) 0 nil])
([nil nil ((31297 . 31299)) nil (25755 14809 121616 63000) 0 nil])
([nil nil ((31364 . 31366)) nil (25755 14809 121614 548000) 0 nil])
([nil nil ((31431 . 31433)) nil (25755 14809 121609 720000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)))) . -31462) (undo-tree-id17780 . -2) (undo-tree-id17781 . -2) (undo-tree-id17782 . -2) (undo-tree-id17783 . -2) (undo-tree-id17784 . -2) (undo-tree-id17785 . -2) (undo-tree-id17786 . -2) (undo-tree-id17787 . -2) (undo-tree-id17788 . -2) (undo-tree-id17789 . -2) (undo-tree-id17790 . -2) (undo-tree-id17791 . -2) 31464 (31461 . 31464) (t 25755 14809 189439 353000) 31432) nil (25755 14811 51816 700000) 0 nil])
([nil nil ((31530 . 31531) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("        " 0 6 (face org-indent) 6 8 (face org-indent)) fontified t)) . -31530) (undo-tree-id17991 . -1) 31503 (t 25755 14811 73525 354000)) nil (25755 14930 429717 787000) 0 nil])
([nil nil ((#("simple" 0 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31540) (undo-tree-id17975 . -5) (undo-tree-id17976 . -5) (undo-tree-id17977 . -5) (undo-tree-id17978 . -5) (undo-tree-id17979 . -6) (undo-tree-id17980 . -5) (undo-tree-id17981 . -5) (undo-tree-id17982 . -5) (undo-tree-id17983 . -5) (undo-tree-id17984 . -5) (undo-tree-id17985 . -5) (undo-tree-id17986 . -5) (undo-tree-id17987 . -5) (undo-tree-id17988 . -5) (undo-tree-id17989 . -5) (undo-tree-id17990 . -6) 31545) nil (25755 14930 429715 105000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31540) (undo-tree-id17970 . 1) (undo-tree-id17971 . -1) (undo-tree-id17972 . -1) (undo-tree-id17973 . -1) (undo-tree-id17974 . -1)) nil (25755 14930 429702 152000) 0 nil])
([nil nil ((#("to object detection " 0 20 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31549) (undo-tree-id17958 . -19) (undo-tree-id17959 . -19) (undo-tree-id17960 . -19) (undo-tree-id17961 . -19) (undo-tree-id17962 . -20) (undo-tree-id17963 . -19) (undo-tree-id17964 . -1) (undo-tree-id17965 . -8) (undo-tree-id17966 . -18) (undo-tree-id17967 . -19) (undo-tree-id17968 . -19) (undo-tree-id17969 . -20) 31568) nil (25755 14930 429697 862000) 0 nil])
([nil nil ((#("pretty" 0 6 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31555) (undo-tree-id17949 . -5) (undo-tree-id17950 . -5) (undo-tree-id17951 . -5) (undo-tree-id17952 . -5) (undo-tree-id17953 . -6) (undo-tree-id17954 . -5) (undo-tree-id17955 . -5) (undo-tree-id17956 . -5) (undo-tree-id17957 . -6) 31560) nil (25755 14930 429689 404000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31555) (undo-tree-id17946 . 1) (undo-tree-id17947 . -1) (undo-tree-id17948 . -1)) nil (25755 14930 429680 56000) 0 nil])
([nil nil ((#("it" 0 2 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31565) (undo-tree-id17943 . -1) (undo-tree-id17944 . -2) (undo-tree-id17945 . -2)) nil (25755 14930 429677 158000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31564) (undo-tree-id17921 . -1) (undo-tree-id17922 . -1) (undo-tree-id17923 . -1) (undo-tree-id17924 . -1) (undo-tree-id17925 . -1) (undo-tree-id17926 . -1) (undo-tree-id17927 . -1) (undo-tree-id17928 . -1) (undo-tree-id17929 . -1) (undo-tree-id17930 . -1) (undo-tree-id17931 . -1) (undo-tree-id17932 . -1) (undo-tree-id17933 . -1) (undo-tree-id17934 . -1) (undo-tree-id17935 . -1) (undo-tree-id17936 . -1) (undo-tree-id17937 . -1) (undo-tree-id17938 . -1) (undo-tree-id17939 . -1) (undo-tree-id17940 . -1) (undo-tree-id17941 . -1) (undo-tree-id17942 . -1)) nil (25755 14930 429674 28000) 0 nil])
([nil nil ((31573 . 31574) (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . -31573) (undo-tree-id17920 . -1) 31564) nil (25755 14930 429659 305000) 0 nil])
([nil nil ((31600 . 31601) (#("," 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31600) (undo-tree-id17919 . -1)) nil (25755 14930 429657 600000) 0 nil])
([nil nil ((31602 . 31604)) nil (25755 14930 429655 701000) 0 nil])
([nil nil ((#("so it is quite slow. Fortunately, there is a
" 0 43 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 43 45 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31604) (undo-tree-id17916 . -44) (undo-tree-id17917 . 45) (undo-tree-id17918 . -45)) nil (25755 14930 429654 557000) 0 nil])
([nil nil ((#("much faster way to slide a CNN across an image: using a fully
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 62 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31604) (undo-tree-id17913 . -61) (undo-tree-id17914 . 62) (undo-tree-id17915 . -62)) nil (25755 14930 429651 969000) 0 nil])
([nil nil ((#("convolutional network (FCN).
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 1 27 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t) 27 28 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t rear-nonsticky t) 28 29 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . 31604) (undo-tree-id17905 . -28) (undo-tree-id17906 . 29) (undo-tree-id17907 . -27) (undo-tree-id17908 . 6) (undo-tree-id17909 . -26) (undo-tree-id17910 . 29) (undo-tree-id17911 . -13) (undo-tree-id17912 . -29)) nil (25755 14930 429646 943000) 0 nil])
([nil nil ((31604 . 31605) (#("*" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)))) . -31604) (undo-tree-id17792 . -1) (undo-tree-id17793 . -1) (undo-tree-id17794 . -1) (undo-tree-id17795 . -1) (undo-tree-id17796 . -1) (undo-tree-id17797 . -1) (undo-tree-id17798 . -1) (undo-tree-id17799 . -1) (undo-tree-id17800 . -1) (undo-tree-id17801 . -1) (undo-tree-id17802 . -1) (undo-tree-id17803 . -1) (undo-tree-id17804 . -1) (undo-tree-id17805 . -1) (undo-tree-id17806 . -1) (undo-tree-id17807 . -1) (undo-tree-id17808 . -1) (undo-tree-id17809 . -1) (undo-tree-id17810 . -1) (undo-tree-id17811 . -1) (undo-tree-id17812 . -1) (undo-tree-id17813 . -1) (undo-tree-id17814 . -1) (undo-tree-id17815 . -1) (undo-tree-id17816 . -1) (undo-tree-id17817 . -1) (undo-tree-id17818 . -1) (undo-tree-id17819 . -1) (undo-tree-id17820 . -1) (undo-tree-id17821 . -1) (undo-tree-id17822 . -1) (undo-tree-id17823 . -1) (undo-tree-id17824 . -1) (undo-tree-id17825 . -1) (undo-tree-id17826 . -1) (undo-tree-id17827 . -1) (undo-tree-id17828 . -1) (undo-tree-id17829 . -1) (undo-tree-id17830 . -1) (undo-tree-id17831 . -1) (undo-tree-id17832 . -1) (undo-tree-id17833 . -1) (undo-tree-id17834 . -1) (undo-tree-id17835 . -1) (undo-tree-id17836 . -1) (undo-tree-id17837 . -1) (#("*" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link)) . -31605) (undo-tree-id17838 . -1) (undo-tree-id17839 . -1) (undo-tree-id17840 . -1) (undo-tree-id17841 . -1) (undo-tree-id17842 . -1) (undo-tree-id17843 . -1) (undo-tree-id17844 . -1) (undo-tree-id17845 . -1) (undo-tree-id17846 . -1) (undo-tree-id17847 . -1) (undo-tree-id17848 . -1) (undo-tree-id17849 . -1) (undo-tree-id17850 . -1) (undo-tree-id17851 . -1) (undo-tree-id17852 . -1) (undo-tree-id17853 . -1) (undo-tree-id17854 . -1) (undo-tree-id17855 . -1) (undo-tree-id17856 . -1) (undo-tree-id17857 . -1) (undo-tree-id17858 . -1) (undo-tree-id17859 . -1) (undo-tree-id17860 . -1) (undo-tree-id17861 . -1) (undo-tree-id17862 . -1) (undo-tree-id17863 . -1) (undo-tree-id17864 . -1) (undo-tree-id17865 . -1) (undo-tree-id17866 . -1) (undo-tree-id17867 . -1) (undo-tree-id17868 . -1) (undo-tree-id17869 . -1) (undo-tree-id17870 . -1) (undo-tree-id17871 . -1) (undo-tree-id17872 . -1) (undo-tree-id17873 . -1) (undo-tree-id17874 . -1) (#(" " 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) keymap (keymap) face org-level-3)) . -31606) (undo-tree-id17875 . -1) (undo-tree-id17876 . -1) (undo-tree-id17877 . -1) (undo-tree-id17878 . -1) (undo-tree-id17879 . -1) (undo-tree-id17880 . -1) (undo-tree-id17881 . -1) (undo-tree-id17882 . -1) (undo-tree-id17883 . -1) (undo-tree-id17884 . -1) 31607 (31606 . 31607) (#(" " 0 1 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)) keymap (keymap) face org-level-3)) . -31606) (undo-tree-id17885 . -1) (undo-tree-id17886 . -1) (undo-tree-id17887 . -1) (undo-tree-id17888 . -1) (undo-tree-id17889 . -1) (undo-tree-id17890 . -1) (undo-tree-id17891 . -1) (undo-tree-id17892 . -1) (undo-tree-id17893 . -1) (undo-tree-id17894 . -1) (undo-tree-id17895 . -1) 31607 (#("
" 0 1 (line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) fontified t)) . 31602) (undo-tree-id17896 . -1) (undo-tree-id17897 . -1) (undo-tree-id17898 . -1) (undo-tree-id17899 . -1) (undo-tree-id17900 . -1) (undo-tree-id17901 . -1) (undo-tree-id17902 . -1) (undo-tree-id17903 . -1) (undo-tree-id17904 . -1) (31604 . 31608)) nil (25755 14930 429635 20000) 0 nil])
([nil nil ((31604 . 31605)) nil (25755 14930 429403 239000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35944 . 35945) (nil fontified nil 35881 . 35945) (nil fontified nil 35808 . 35881) (nil fontified nil 35735 . 35808) (nil fontified nil 35663 . 35735) (nil fontified nil 35586 . 35663) (nil fontified nil 35511 . 35586) (nil fontified nil 35437 . 35511) (nil fontified nil 35359 . 35437) (nil fontified nil 35286 . 35359) (nil fontified nil 35213 . 35286) (nil fontified nil 35140 . 35213) (nil fontified nil 35067 . 35140) (nil fontified nil 34918 . 35067) (nil fontified nil 34843 . 34918) (nil fontified nil 34766 . 34843) (nil fontified nil 34693 . 34766) (nil fontified nil 34622 . 34693) (nil fontified nil 34589 . 34622) (nil fontified nil 34517 . 34589) (nil fontified nil 34441 . 34517) (nil fontified nil 34365 . 34441) (nil fontified nil 34290 . 34365) (nil fontified nil 34213 . 34290) (nil fontified nil 34141 . 34213) (nil fontified nil 34068 . 34141) (nil fontified nil 33994 . 34068) (nil fontified nil 33922 . 33994) (nil fontified nil 33848 . 33922) (nil fontified nil 33797 . 33848) (nil fontified nil 33721 . 33797) (nil fontified nil 33654 . 33721) (nil fontified nil 33579 . 33654) (nil fontified nil 33503 . 33579) (nil fontified nil 33426 . 33503) (nil fontified nil 33352 . 33426) (nil fontified nil 33283 . 33352) (nil fontified nil 33200 . 33283) (nil fontified nil 33112 . 33200) (nil fontified nil 33032 . 33112) (nil fontified nil 33028 . 33032) (nil fontified nil 32978 . 33028) (nil fontified nil 32828 . 32978) (nil fontified nil 32757 . 32828) (nil fontified nil 32684 . 32757) (nil fontified nil 32607 . 32684) (nil fontified nil 32532 . 32607) (nil fontified nil 32458 . 32532) (nil fontified nil 32382 . 32458) (nil fontified nil 32308 . 32382) (nil fontified nil 32231 . 32308) (nil fontified nil 32156 . 32231) (nil fontified nil 32080 . 32156) (nil fontified nil 32007 . 32080) (nil fontified nil 31931 . 32007) (nil fontified nil 31856 . 31931) (nil fontified nil 31785 . 31856) (nil fontified nil 31708 . 31785) (nil fontified nil 31635 . 31708) (nil fontified nil 31606 . 31635) (31606 . 35945) 31605) nil (25755 14930 429400 719000) 0 nil])
([nil nil ((35945 . 35947)) nil (25755 14930 429392 939000) 0 nil])
([nil nil ((nil rear-nonsticky nil 43427 . 43428) (nil fontified nil 43412 . 43428) (nil fontified nil 43337 . 43412) (nil fontified nil 43265 . 43337) (nil fontified nil 43231 . 43265) (nil fontified nil 43158 . 43231) (nil fontified nil 43079 . 43158) (nil fontified nil 43005 . 43079) (nil fontified nil 42933 . 43005) (nil fontified nil 42860 . 42933) (nil fontified nil 42855 . 42860) (nil fontified nil 42779 . 42855) (nil fontified nil 42706 . 42779) (nil fontified nil 42635 . 42706) (nil fontified nil 42568 . 42635) (nil fontified nil 42492 . 42568) (nil fontified nil 42421 . 42492) (nil fontified nil 42350 . 42421) (nil fontified nil 42283 . 42350) (nil fontified nil 42224 . 42283) (nil fontified nil 42155 . 42224) (nil fontified nil 42102 . 42155) (nil fontified nil 42042 . 42102) (nil fontified nil 41970 . 42042) (nil fontified nil 41902 . 41970) (nil fontified nil 41837 . 41902) (nil fontified nil 41715 . 41837) (nil fontified nil 41642 . 41715) (nil fontified nil 41581 . 41642) (nil fontified nil 41514 . 41581) (nil fontified nil 41445 . 41514) (nil fontified nil 41375 . 41445) (nil fontified nil 41312 . 41375) (nil fontified nil 41258 . 41312) (nil fontified nil 41189 . 41258) (nil fontified nil 41123 . 41189) (nil fontified nil 41056 . 41123) (nil fontified nil 40987 . 41056) (nil fontified nil 40922 . 40987) (nil fontified nil 40852 . 40922) (nil fontified nil 40781 . 40852) (nil fontified nil 40710 . 40781) (nil fontified nil 40638 . 40710) (nil fontified nil 40570 . 40638) (nil fontified nil 40501 . 40570) (nil fontified nil 40437 . 40501) (nil fontified nil 40365 . 40437) (nil fontified nil 40293 . 40365) (nil fontified nil 40225 . 40293) (nil fontified nil 40157 . 40225) (nil fontified nil 40088 . 40157) (nil fontified nil 40016 . 40088) (nil fontified nil 39944 . 40016) (nil fontified nil 39872 . 39944) (nil fontified nil 39812 . 39872) (nil fontified nil 39748 . 39812) (nil fontified nil 39684 . 39748) (nil fontified nil 39608 . 39684) (nil fontified nil 39542 . 39608) (nil fontified nil 39467 . 39542) (nil fontified nil 39390 . 39467) (nil fontified nil 39316 . 39390) (nil fontified nil 39246 . 39316) (nil fontified nil 39180 . 39246) (nil fontified nil 39111 . 39180) (nil fontified nil 39039 . 39111) (nil fontified nil 38965 . 39039) (nil fontified nil 38892 . 38965) (nil fontified nil 38828 . 38892) (nil fontified nil 38761 . 38828) (nil fontified nil 38695 . 38761) (nil fontified nil 38628 . 38695) (nil fontified nil 38569 . 38628) (nil fontified nil 38509 . 38569) (nil fontified nil 38442 . 38509) (nil fontified nil 38416 . 38442) (nil fontified nil 38353 . 38416) (nil fontified nil 38288 . 38353) (nil fontified nil 38227 . 38288) (nil fontified nil 38160 . 38227) (nil fontified nil 38094 . 38160) (nil fontified nil 38028 . 38094) (nil fontified nil 37898 . 38028) (nil fontified nil 37836 . 37898) (nil fontified nil 37773 . 37836) (nil fontified nil 37704 . 37773) (nil fontified nil 37643 . 37704) (nil fontified nil 37580 . 37643) (nil fontified nil 37524 . 37580) (nil fontified nil 37460 . 37524) (nil fontified nil 37399 . 37460) (nil fontified nil 37337 . 37399) (nil fontified nil 37272 . 37337) (nil fontified nil 37213 . 37272) (nil fontified nil 37149 . 37213) (nil fontified nil 37083 . 37149) (nil fontified nil 37015 . 37083) (nil fontified nil 36950 . 37015) (nil fontified nil 36879 . 36950) (nil fontified nil 36813 . 36879) (nil fontified nil 36746 . 36813) (nil fontified nil 36678 . 36746) (nil fontified nil 36613 . 36678) (nil fontified nil 36550 . 36613) (nil fontified nil 36481 . 36550) (nil fontified nil 36418 . 36481) (nil fontified nil 36351 . 36418) (nil fontified nil 36317 . 36351) (nil fontified nil 36244 . 36317) (nil fontified nil 36182 . 36244) (nil fontified nil 36111 . 36182) (nil fontified nil 36042 . 36111) (nil fontified nil 35973 . 36042) (nil fontified nil 35947 . 35973) (35947 . 43428)) nil (25755 14930 429388 512000) 0 nil])
([nil nil ((43428 . 43429)) nil (25755 14930 429369 747000) 0 nil])
([nil nil ((#("The idea of FCNs was first introduced in a 2015 paper25 by Jonathan Long
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (undo-tree-id17998 . -72) (undo-tree-id17999 . -4) (undo-tree-id18000 . -9) (undo-tree-id18001 . -4) (undo-tree-id18002 . -73) (t 25755 14930 502888 202000)) nil (25755 14948 262443 307000) 0 nil])
([nil nil ((#("et al., for semantic segmentation (the task of classifying every pixel in an
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (undo-tree-id17994 . -76) (undo-tree-id17995 . 77) (undo-tree-id17996 . -2) (undo-tree-id17997 . -77)) nil (25755 14999 660211 166000) 0 nil])
([nil nil ((#("image according to the class of the object it belongs to). The authors
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (undo-tree-id18010 . -70) (undo-tree-id18011 . -71)) nil (25755 15024 732487 705000) 0 nil] [nil nil ((#("image according to the class of the object it belongs to). The authors
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (undo-tree-id17992 . -70)) ((31635 . 31706)) (25755 14999 100126 626000) 0 nil])
([nil nil ((#("pointed out that you could " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 2 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (undo-tree-id18007 . -26) (undo-tree-id18008 . 26) (undo-tree-id18009 . -27)) nil (25755 15024 732482 227000) 0 nil])
([nil nil ((31635 . 31636) (#("p" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (t 25755 14948 283673 13000)) ((31635 . 31636) (#("P" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (t 25755 14984 177247 697000)) (25755 14998 150308 957000) 0 nil])
([nil nil ((31635 . 31636) (#("r" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635)) nil (25755 15024 732473 267000) 0 nil])
([nil nil ((#("Pointed out that you could replace the dense layers at the top of a CNN by
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31635) (undo-tree-id18003 . -74) (undo-tree-id18004 . 74) (undo-tree-id18005 . -75) (t 25755 14984 177247 697000)) ((31635 . 31710)) (25755 14998 149916 800000) 0 nil])
([nil nil ((31682 . 31683) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -31682) (undo-tree-id18006 . -1) 31671) nil (25755 15024 732469 433000) 0 nil])
nil
([nil nil ((31706 . 31707) (31705 . 31706)) nil (25755 15024 732445 503000) 0 nil])
([nil nil ((#("To understand this, let’s look at an example: suppose
" 0 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31707) (undo-tree-id18012 . -53) (undo-tree-id18013 . -53) (undo-tree-id18014 . 54) (undo-tree-id18015 . -53) (undo-tree-id18016 . -53) (undo-tree-id18017 . -53) (undo-tree-id18018 . -53) (undo-tree-id18019 . -53) (undo-tree-id18020 . -53) (undo-tree-id18021 . -53) (undo-tree-id18022 . -53) (undo-tree-id18023 . -53) (undo-tree-id18024 . -53) (undo-tree-id18025 . -53) (undo-tree-id18026 . -53) (undo-tree-id18027 . -53) (undo-tree-id18028 . -53) (undo-tree-id18029 . -53) (undo-tree-id18030 . -53) (undo-tree-id18031 . -53) (undo-tree-id18032 . -53) (undo-tree-id18033 . -53) (undo-tree-id18034 . -53) (undo-tree-id18035 . -53) (undo-tree-id18036 . -53) (undo-tree-id18037 . -53) (undo-tree-id18038 . -53) (undo-tree-id18039 . -53) (undo-tree-id18040 . -53) (undo-tree-id18041 . -53) (undo-tree-id18042 . -53) (undo-tree-id18043 . -52) (undo-tree-id18044 . -53) (undo-tree-id18045 . -53) (undo-tree-id18046 . -53) (undo-tree-id18047 . -53) (undo-tree-id18048 . -53) (undo-tree-id18049 . -53) (undo-tree-id18050 . -53) (undo-tree-id18051 . -53) (undo-tree-id18052 . -53) (undo-tree-id18053 . -53) (undo-tree-id18054 . -53) (undo-tree-id18055 . -52) (undo-tree-id18056 . -52) (undo-tree-id18057 . -52) (undo-tree-id18058 . -52) (undo-tree-id18059 . -52) (undo-tree-id18060 . -52) (undo-tree-id18061 . -52) (undo-tree-id18062 . -52) (undo-tree-id18063 . -52) (undo-tree-id18064 . -52) (undo-tree-id18065 . -52) (undo-tree-id18066 . -52) (undo-tree-id18067 . -52) (undo-tree-id18068 . -52) (undo-tree-id18069 . -52) (undo-tree-id18070 . -52) (undo-tree-id18071 . -52) (undo-tree-id18072 . -54) (t 25755 15024 819016 123000)) nil (25755 15076 156255 685000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31706) (undo-tree-id18073 . -1) (undo-tree-id18074 . -1) (undo-tree-id18075 . -1) (undo-tree-id18076 . -1) (undo-tree-id18077 . -1) (undo-tree-id18078 . -1) (undo-tree-id18079 . -1) (undo-tree-id18080 . -1) (undo-tree-id18081 . -1) (undo-tree-id18082 . -1) (undo-tree-id18083 . -1) (undo-tree-id18084 . -1) (undo-tree-id18085 . -1) (undo-tree-id18086 . -1) (undo-tree-id18087 . -1) (undo-tree-id18088 . -1) (undo-tree-id18089 . -1) (undo-tree-id18090 . -1) (undo-tree-id18091 . -1) (undo-tree-id18092 . -1) (undo-tree-id18093 . -1) (undo-tree-id18094 . -1) (undo-tree-id18095 . -1) (undo-tree-id18096 . -1) (undo-tree-id18097 . -1) (undo-tree-id18098 . -1) (undo-tree-id18099 . -1) (undo-tree-id18100 . -1) (undo-tree-id18101 . -1) (undo-tree-id18102 . -1) (undo-tree-id18103 . -1) (undo-tree-id18104 . -1) (undo-tree-id18105 . -1) (undo-tree-id18106 . -1) (undo-tree-id18107 . -1) (undo-tree-id18108 . -1) (undo-tree-id18109 . -1) (undo-tree-id18110 . -1) (undo-tree-id18111 . -1) (undo-tree-id18112 . -1) (undo-tree-id18113 . -1) (undo-tree-id18114 . -1) (undo-tree-id18115 . -1) (undo-tree-id18116 . -1) (undo-tree-id18117 . -1) (undo-tree-id18118 . -1) (undo-tree-id18119 . -1) (undo-tree-id18120 . -1) (undo-tree-id18121 . -1) (undo-tree-id18122 . -1) (undo-tree-id18123 . -1) (undo-tree-id18124 . -1) (undo-tree-id18125 . -1) (undo-tree-id18126 . -1) (undo-tree-id18127 . -1) (undo-tree-id18128 . -1) (undo-tree-id18129 . -1) (undo-tree-id18130 . -1) (undo-tree-id18131 . -1) (undo-tree-id18132 . -1) (undo-tree-id18133 . -1) (undo-tree-id18134 . -1) (undo-tree-id18135 . -1) (undo-tree-id18136 . -1) (undo-tree-id18137 . -1) (undo-tree-id18138 . -1) (undo-tree-id18139 . -1) (undo-tree-id18140 . -1) (undo-tree-id18141 . -1) (undo-tree-id18142 . -1) (undo-tree-id18143 . -1) (undo-tree-id18144 . -1) (undo-tree-id18145 . -1) (undo-tree-id18146 . -1) (undo-tree-id18147 . -1) (undo-tree-id18148 . -1) (undo-tree-id18149 . -1) (undo-tree-id18150 . -1) (t 25755 15076 181230 660000)) nil (25755 15085 408053 16000) 0 nil])
([nil nil ((#("(this is the feature map size,
not the kernel size)" 0 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 31 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31824) (undo-tree-id18216 . -50) (undo-tree-id18217 . -1) (undo-tree-id18218 . -1) (undo-tree-id18219 . -1) (undo-tree-id18220 . -1) (undo-tree-id18221 . -1) (undo-tree-id18222 . -1) (undo-tree-id18223 . -1) (undo-tree-id18224 . -1) (undo-tree-id18225 . -1) (undo-tree-id18226 . -1) (undo-tree-id18227 . -1) (undo-tree-id18228 . -1) (undo-tree-id18229 . -1) (undo-tree-id18230 . -1) (undo-tree-id18231 . -1) (undo-tree-id18232 . -1) (undo-tree-id18233 . -1) (undo-tree-id18234 . -1) (undo-tree-id18235 . -1) (undo-tree-id18236 . -51) 31825 (t 25755 15085 433627 326000)) nil (25755 15111 799728 55000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31823) (undo-tree-id18151 . -1) (undo-tree-id18152 . -1) (undo-tree-id18153 . -1) (undo-tree-id18154 . -1) (undo-tree-id18155 . -1) (undo-tree-id18156 . -1) (undo-tree-id18157 . -1) (undo-tree-id18158 . -1) (undo-tree-id18159 . -1) (undo-tree-id18160 . -1) (undo-tree-id18161 . -1) (undo-tree-id18162 . -1) (undo-tree-id18163 . -1) (undo-tree-id18164 . -1) (undo-tree-id18165 . -1) (undo-tree-id18166 . -1) (undo-tree-id18167 . -1) (undo-tree-id18168 . -1) (undo-tree-id18169 . -1) (undo-tree-id18170 . -1) (undo-tree-id18171 . -1) (undo-tree-id18172 . -1) (undo-tree-id18173 . -1) (undo-tree-id18174 . -1) (undo-tree-id18175 . -1) (undo-tree-id18176 . -1) (undo-tree-id18177 . -1) (undo-tree-id18178 . -1) (undo-tree-id18179 . -1) (undo-tree-id18180 . -1) (undo-tree-id18181 . -1) (undo-tree-id18182 . -1) (undo-tree-id18183 . -1) (undo-tree-id18184 . -1) (undo-tree-id18185 . -1) (undo-tree-id18186 . -1) (undo-tree-id18187 . -1) (undo-tree-id18188 . -1) (undo-tree-id18189 . -1) (undo-tree-id18190 . -1) (undo-tree-id18191 . -1) (undo-tree-id18192 . -1) (undo-tree-id18193 . -1) (undo-tree-id18194 . -1) (undo-tree-id18195 . -1) (undo-tree-id18196 . -1) (undo-tree-id18197 . -1) (undo-tree-id18198 . -1) (undo-tree-id18199 . -1) (undo-tree-id18200 . -1) (undo-tree-id18201 . -1) (undo-tree-id18202 . -1) (undo-tree-id18203 . -1) (undo-tree-id18204 . -1) (undo-tree-id18205 . -1) (undo-tree-id18206 . -1) (undo-tree-id18207 . -1) (undo-tree-id18208 . -1) (undo-tree-id18209 . -1) (undo-tree-id18210 . -1) (undo-tree-id18211 . -1) (undo-tree-id18212 . -1) (undo-tree-id18213 . -1) (undo-tree-id18214 . -1) (undo-tree-id18215 . -1)) nil (25755 15111 799708 189000) 0 nil])
([nil nil ((31824 . 31825) (t 25755 15111 822755 93000)) nil (25755 15114 657018 693000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 31825) (undo-tree-id18237 . 1) (undo-tree-id18238 . -1) (undo-tree-id18239 . -1)) nil (25755 15114 657014 440000) 0 nil])
([nil nil ((31877 . 31878) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -31877) (undo-tree-id18240 . -1) 31825 (t 25755 15114 682877 14000)) nil (25755 15143 591113 295000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -31905) (nil fontified nil 31904 . 31905) (nil wrap-prefix #("  " 0 2 (face org-indent)) 31904 . 31905) (31904 . 31905) 31825) nil (25755 15143 591098 656000) 0 nil])
([nil nil ((#("Each neuron will compute a weighted sum of all 100 × 7 × 7 activations from the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 53 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 53 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 79 80 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 31825) (undo-tree-id18277 . -79) (undo-tree-id18278 . 80) (undo-tree-id18279 . -80) (undo-tree-id18280 . -80) (undo-tree-id18281 . -80) (undo-tree-id18282 . -80) (undo-tree-id18283 . -80) (undo-tree-id18284 . -80) (undo-tree-id18285 . -80) (undo-tree-id18286 . -80) (undo-tree-id18287 . -80) (undo-tree-id18288 . -80) (undo-tree-id18289 . -80) (undo-tree-id18290 . -80) (undo-tree-id18291 . -80) (undo-tree-id18292 . -80) (undo-tree-id18293 . -80) (undo-tree-id18294 . -80) (undo-tree-id18295 . -80) (undo-tree-id18296 . -80) (undo-tree-id18297 . -5) (undo-tree-id18298 . -10) (undo-tree-id18299 . -15) (undo-tree-id18300 . -23) (undo-tree-id18301 . -25) (undo-tree-id18302 . -34) (undo-tree-id18303 . -38) (undo-tree-id18304 . -41) (undo-tree-id18305 . -45) (undo-tree-id18306 . -49) (undo-tree-id18307 . -51) (undo-tree-id18308 . -53) (undo-tree-id18309 . -55) (undo-tree-id18310 . -57) (undo-tree-id18311 . -69) (undo-tree-id18312 . -69) (undo-tree-id18313 . -69) (undo-tree-id18314 . -69) (undo-tree-id18315 . -69) (undo-tree-id18316 . -69) (undo-tree-id18317 . -69) (undo-tree-id18318 . -69) (undo-tree-id18319 . -69) (undo-tree-id18320 . -69) (undo-tree-id18321 . -69) (undo-tree-id18322 . -69) (undo-tree-id18323 . -69) (undo-tree-id18324 . -69) (undo-tree-id18325 . -69) (undo-tree-id18326 . -3) (undo-tree-id18327 . -10) (undo-tree-id18328 . -5) (undo-tree-id18329 . -3) (undo-tree-id18330 . -3) (undo-tree-id18331 . -3) (undo-tree-id18332 . -3) (undo-tree-id18333 . -3) (undo-tree-id18334 . -3) (undo-tree-id18335 . -3) (undo-tree-id18336 . -3) (undo-tree-id18337 . -10) (undo-tree-id18338 . -10) (undo-tree-id18339 . -10) (undo-tree-id18340 . -10) (undo-tree-id18341 . -10) (undo-tree-id18342 . -10) (undo-tree-id18343 . -10) (undo-tree-id18344 . -10) (undo-tree-id18345 . -15) (undo-tree-id18346 . -15) (undo-tree-id18347 . -15) (undo-tree-id18348 . -15) (undo-tree-id18349 . -15) (undo-tree-id18350 . -15) (undo-tree-id18351 . -15) (undo-tree-id18352 . -15) (undo-tree-id18353 . -23) (undo-tree-id18354 . -23) (undo-tree-id18355 . -23) (undo-tree-id18356 . -23) (undo-tree-id18357 . -23) (undo-tree-id18358 . -23) (undo-tree-id18359 . -23) (undo-tree-id18360 . -23) (undo-tree-id18361 . -25) (undo-tree-id18362 . -25) (undo-tree-id18363 . -25) (undo-tree-id18364 . -25) (undo-tree-id18365 . -25) (undo-tree-id18366 . -25) (undo-tree-id18367 . -25) (undo-tree-id18368 . -25) (undo-tree-id18369 . -34) (undo-tree-id18370 . -34) (undo-tree-id18371 . -34) (undo-tree-id18372 . -34) (undo-tree-id18373 . -34) (undo-tree-id18374 . -34) (undo-tree-id18375 . -34) (undo-tree-id18376 . -34) (undo-tree-id18377 . -38) (undo-tree-id18378 . -38) (undo-tree-id18379 . -38) (undo-tree-id18380 . -38) (undo-tree-id18381 . -38) (undo-tree-id18382 . -38) (undo-tree-id18383 . -38) (undo-tree-id18384 . -38) (undo-tree-id18385 . -41) (undo-tree-id18386 . -41) (undo-tree-id18387 . -41) (undo-tree-id18388 . -41) (undo-tree-id18389 . -41) (undo-tree-id18390 . -41) (undo-tree-id18391 . -41) (undo-tree-id18392 . -41) (undo-tree-id18393 . -45) (undo-tree-id18394 . -45) (undo-tree-id18395 . -45) (undo-tree-id18396 . -45) (undo-tree-id18397 . -45) (undo-tree-id18398 . -45) (undo-tree-id18399 . -45) (undo-tree-id18400 . -45) (undo-tree-id18401 . -49) (undo-tree-id18402 . -49) (undo-tree-id18403 . -49) (undo-tree-id18404 . -49) (undo-tree-id18405 . -49) (undo-tree-id18406 . -49) (undo-tree-id18407 . -49) (undo-tree-id18408 . -49) (undo-tree-id18409 . -51) (undo-tree-id18410 . -51) (undo-tree-id18411 . -51) (undo-tree-id18412 . -51) (undo-tree-id18413 . -51) (undo-tree-id18414 . -51) (undo-tree-id18415 . -51) (undo-tree-id18416 . -51) (undo-tree-id18417 . -53) (undo-tree-id18418 . -53) (undo-tree-id18419 . -53) (undo-tree-id18420 . -53) (undo-tree-id18421 . -53) (undo-tree-id18422 . -53) (undo-tree-id18423 . -53) (undo-tree-id18424 . -53) (undo-tree-id18425 . -55) (undo-tree-id18426 . -55) (undo-tree-id18427 . -55) (undo-tree-id18428 . -55) (undo-tree-id18429 . -55) (undo-tree-id18430 . -55) (undo-tree-id18431 . -55) (undo-tree-id18432 . -55) (undo-tree-id18433 . -57) (undo-tree-id18434 . -57) (undo-tree-id18435 . -57) (undo-tree-id18436 . -57) (undo-tree-id18437 . -57) (undo-tree-id18438 . -57) (undo-tree-id18439 . -57) (undo-tree-id18440 . -57) (undo-tree-id18441 . -69) (undo-tree-id18442 . -69) (undo-tree-id18443 . -69) (undo-tree-id18444 . -69) (undo-tree-id18445 . -69) (undo-tree-id18446 . -69) (undo-tree-id18447 . -69) (undo-tree-id18448 . -69) (undo-tree-id18449 . -74) (undo-tree-id18450 . -74) (undo-tree-id18451 . -74) (undo-tree-id18452 . -74) (undo-tree-id18453 . -74) (undo-tree-id18454 . -74) (undo-tree-id18455 . -74) (undo-tree-id18456 . -74) (undo-tree-id18457 . -78) (undo-tree-id18458 . -78) (undo-tree-id18459 . -78) (undo-tree-id18460 . -78) (undo-tree-id18461 . -78) (undo-tree-id18462 . -78) (undo-tree-id18463 . -78) (undo-tree-id18464 . -78) (undo-tree-id18465 . -12) (undo-tree-id18466 . -12) (undo-tree-id18467 . -12) (undo-tree-id18468 . -12) (undo-tree-id18469 . -12) (undo-tree-id18470 . -12) (undo-tree-id18471 . -12) (undo-tree-id18472 . -12) (undo-tree-id18473 . -17) (undo-tree-id18474 . -25) (undo-tree-id18475 . -27) (undo-tree-id18476 . -36) (undo-tree-id18477 . -40) (undo-tree-id18478 . -43) (undo-tree-id18479 . -47) (undo-tree-id18480 . -51) (undo-tree-id18481 . -53) (undo-tree-id18482 . -55) (undo-tree-id18483 . -57) (undo-tree-id18484 . 21) (undo-tree-id18485 . -70) (undo-tree-id18486 . -59) (undo-tree-id18487 . -59) (undo-tree-id18488 . -59) (undo-tree-id18489 . -59) (undo-tree-id18490 . -59) (undo-tree-id18491 . -59) (undo-tree-id18492 . -59) (undo-tree-id18493 . -59) (undo-tree-id18494 . -71) (undo-tree-id18495 . -76) (undo-tree-id18496 . -80) (undo-tree-id18497 . -80) (undo-tree-id18498 . -80) (undo-tree-id18499 . -80) (undo-tree-id18500 . -80) (undo-tree-id18501 . -80) (undo-tree-id18502 . -80) (undo-tree-id18503 . -80) (undo-tree-id18504 . -80) (undo-tree-id18505 . -80) (undo-tree-id18506 . -80) (undo-tree-id18507 . -80) (undo-tree-id18508 . -80) (undo-tree-id18509 . -80) (undo-tree-id18510 . -80) (undo-tree-id18511 . -80) (t 25755 15143 664109 101000)) nil (25755 15187 351646 242000) 0 nil])
([nil nil ((#("convolutional layer (plus a bias term). Now let’s
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18245 . -49) (undo-tree-id18246 . 50) (undo-tree-id18247 . 37) (undo-tree-id18248 . -12) (undo-tree-id18249 . -12) (undo-tree-id18250 . -12) (undo-tree-id18251 . -12) (undo-tree-id18252 . -12) (undo-tree-id18253 . -12) (undo-tree-id18254 . -12) (undo-tree-id18255 . -12) (undo-tree-id18256 . -12) (undo-tree-id18257 . -12) (undo-tree-id18258 . -12) (undo-tree-id18259 . -12) (undo-tree-id18260 . -12) (undo-tree-id18261 . -12) (undo-tree-id18262 . -12) (undo-tree-id18263 . -12) (undo-tree-id18264 . -12) (undo-tree-id18265 . -12) (undo-tree-id18266 . -12) (undo-tree-id18267 . -12) (undo-tree-id18268 . -12) (undo-tree-id18269 . -12) (undo-tree-id18270 . -12) (undo-tree-id18271 . -12) (undo-tree-id18272 . -12) (undo-tree-id18273 . -12) (undo-tree-id18274 . 50) (undo-tree-id18275 . -13) (undo-tree-id18276 . -50)) nil (25755 15191 180002 731000) 0 nil])
([nil nil ((#("see what happens if we replace the dense layer with a convolutional layer
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18524 . -73) (undo-tree-id18525 . 74) (undo-tree-id18526 . 74) (undo-tree-id18527 . -74)) nil (25755 15210 482964 197000) 0 nil] [nil nil ((#("see what happens if we replace the dense layer with a convolutional layer
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18241 . -73) (undo-tree-id18242 . 74) (undo-tree-id18243 . 74) (undo-tree-id18244 . -74)) ((31825 . 31899) (t 25755 15187 373956 533000)) (25755 15187 351133 974000) 0 nil])
([nil nil ((#("using 200 filters, each of size 7 × 7, and with \"valid\" padding. This layer
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18520 . -75) (undo-tree-id18521 . 76) (undo-tree-id18522 . 76) (undo-tree-id18523 . -76)) nil (25755 15210 482958 403000) 0 nil])
nil
([nil nil ((#("will output 200 feature maps, each 1 × 1 (since the kernel is exactly the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18516 . -73) (undo-tree-id18517 . 74) (undo-tree-id18518 . 74) (undo-tree-id18519 . -74)) nil (25755 15210 483277 232000) 0 nil])
([nil nil ((#("size of the input feature maps and we are using \"valid\" padding). In other
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18540 . -74) (undo-tree-id18541 . 75) (undo-tree-id18542 . 75) (undo-tree-id18543 . -75)) nil (25755 15233 77935 670000) 0 nil] [nil nil ((#("size of the input feature maps and we are using \"valid\" padding). In other
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18512 . -74) (undo-tree-id18513 . 75) (undo-tree-id18514 . 75) (undo-tree-id18515 . -75)) ((31825 . 31900)) (25755 15210 482947 5000) 0 nil])
([nil nil ((#("words, it will output 200 numbers, just like the dense layer did; and if you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 49 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18536 . -76) (undo-tree-id18537 . 77) (undo-tree-id18538 . 77) (undo-tree-id18539 . -77)) nil (25755 15233 77932 97000) 0 nil])
nil
([nil nil ((#("look closely at the computations performed by a convolutional layer, you
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18532 . -72) (undo-tree-id18533 . 73) (undo-tree-id18534 . 73) (undo-tree-id18535 . -73)) nil (25755 15233 77928 127000) 0 nil])
([nil nil ((#("will notice that these numbers will be precisely the same as those the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18528 . -70) (undo-tree-id18529 . 71) (undo-tree-id18530 . 71) (undo-tree-id18531 . -71)) nil (25755 15255 102521 7000) 0 nil])
([nil nil ((#("dense layer produced. The only difference is that the dense layer’s outputwas a tensor of shape [batch size, 200], while the convolutional layer will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18556 . -149) (undo-tree-id18557 . 150) (undo-tree-id18558 . 150) (undo-tree-id18559 . -150) (t 25755 15233 151878 461000)) nil (25755 15264 639171 531000) 0 nil] [nil nil ((#("dense layer produced. The only difference is that the dense layer’s outputwas a tensor of shape [batch size, 200], while the convolutional layer will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18544 . -149) (undo-tree-id18545 . 150) (undo-tree-id18546 . 150) (undo-tree-id18547 . -150) (t 25755 15233 151878 461000)) ((31825 . 31975)) (25755 15255 102141 448000) 0 nil])
([nil nil ((#("output a tensor of shape [batch size, 1, 1, 200].
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18552 . -49) (undo-tree-id18553 . 50) (undo-tree-id18554 . 50) (undo-tree-id18555 . -50)) nil (25755 15264 639167 664000) 0 nil])
nil
([nil nil ((#("TIP
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31825) (undo-tree-id18548 . -3) (undo-tree-id18549 . 4) (undo-tree-id18550 . 4) (undo-tree-id18551 . -4)) nil (25755 15264 639160 961000) 0 nil])
([nil nil ((#("a dense layer with 200 neurons sits on top of a convolutional layer that
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31706) (undo-tree-id18616 . -72) (undo-tree-id18617 . 25) (undo-tree-id18618 . -61) (undo-tree-id18619 . -1) (undo-tree-id18620 . -1) (undo-tree-id18621 . -1) (undo-tree-id18622 . -1) (undo-tree-id18623 . -1) (undo-tree-id18624 . -1) (undo-tree-id18625 . -1) (undo-tree-id18626 . -1) (undo-tree-id18627 . -1) (undo-tree-id18628 . -1) (undo-tree-id18629 . -1) (undo-tree-id18630 . -1) (undo-tree-id18631 . -1) (undo-tree-id18632 . -1) (undo-tree-id18633 . -1) (undo-tree-id18634 . -1) (undo-tree-id18635 . -1) (undo-tree-id18636 . -1) (undo-tree-id18637 . -1) (undo-tree-id18638 . -73) 31707 (t 25755 15264 665194 414000)) nil (25755 15271 905922 406000) 0 nil])
([nil nil ((#("outputs 100 feature maps, each of size 7 × 7.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 25 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 46 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31706) (undo-tree-id18560 . -45) (undo-tree-id18561 . -46) (undo-tree-id18562 . -46) (undo-tree-id18563 . -46) (undo-tree-id18564 . -46) (undo-tree-id18565 . -1) (undo-tree-id18566 . -46) (undo-tree-id18567 . -46) (undo-tree-id18568 . -46) (undo-tree-id18569 . -46) (undo-tree-id18570 . -46) (undo-tree-id18571 . -46) (undo-tree-id18572 . -46) (undo-tree-id18573 . -46) (undo-tree-id18574 . -46) (undo-tree-id18575 . -46) (undo-tree-id18576 . -46) (undo-tree-id18577 . -46) (undo-tree-id18578 . -46) (undo-tree-id18579 . -46) (undo-tree-id18580 . -46) (undo-tree-id18581 . -46) (undo-tree-id18582 . -46) (undo-tree-id18583 . -46) (undo-tree-id18584 . -46) (undo-tree-id18585 . -46) (undo-tree-id18586 . -46) (undo-tree-id18587 . -1) (undo-tree-id18588 . -1) (undo-tree-id18589 . -1) (undo-tree-id18590 . -1) (undo-tree-id18591 . -1) (undo-tree-id18592 . -1) (undo-tree-id18593 . -1) (undo-tree-id18594 . -1) (undo-tree-id18595 . -1) (undo-tree-id18596 . -1) (undo-tree-id18597 . -1) (undo-tree-id18598 . -1) (undo-tree-id18599 . -1) (undo-tree-id18600 . -1) (undo-tree-id18601 . -1) (undo-tree-id18602 . -1) (undo-tree-id18603 . -1) (undo-tree-id18604 . -1) (undo-tree-id18605 . -1) (undo-tree-id18606 . -1) (undo-tree-id18607 . -1) (undo-tree-id18608 . -1) (undo-tree-id18609 . -1) (undo-tree-id18610 . -1) (undo-tree-id18611 . -1) (undo-tree-id18612 . -1) (undo-tree-id18613 . -1) (undo-tree-id18614 . -1) (undo-tree-id18615 . -46) 31707) nil (25755 15271 905828 260000) 0 nil])
([nil nil ((32814 . 32815) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32814) (undo-tree-id18639 . -1) (32741 . 32742) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32741) (undo-tree-id18640 . -1) (32667 . 32668) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32667) (undo-tree-id18641 . -1) (32595 . 32596) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32595) (undo-tree-id18642 . -1) (32521 . 32522) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32521) (undo-tree-id18643 . -1) (32470 . 32471) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32470) (undo-tree-id18644 . -1) (32394 . 32395) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32394) (undo-tree-id18645 . -1) (32327 . 32328) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32327) (undo-tree-id18646 . -1) (32252 . 32253) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32252) (undo-tree-id18647 . -1) (32176 . 32177) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32176) (undo-tree-id18648 . -1) (32099 . 32100) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32099) (undo-tree-id18649 . -1) (32025 . 32026) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32025) (undo-tree-id18650 . -1) (31956 . 31957) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -31956) (undo-tree-id18651 . -1) (31873 . 31874) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -31873) (undo-tree-id18652 . -1) 31872 (t 25755 15271 929496 982000)) nil (25755 15363 823652 956000) 0 nil])
([nil nil ((31863 . 31864)) nil (25755 15363 823630 49000) 0 nil])
([nil nil ((31933 . 31934)) nil (25755 15363 823624 392000) 0 nil])
([nil nil ((31968 . 31970) (t 25755 15363 893304 300000)) nil (25755 15369 650722 156000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 31969) (undo-tree-id18653 . -1) (undo-tree-id18654 . -1) (undo-tree-id18655 . -1) (undo-tree-id18656 . -1) (undo-tree-id18657 . -1) (undo-tree-id18658 . -1) (undo-tree-id18659 . -1) (undo-tree-id18660 . -1) (undo-tree-id18661 . -1) (undo-tree-id18662 . -1) (undo-tree-id18663 . -1) (undo-tree-id18664 . -1) (undo-tree-id18665 . -1) (undo-tree-id18666 . -1) (undo-tree-id18667 . -1) (undo-tree-id18668 . -1) (undo-tree-id18669 . -1) (undo-tree-id18670 . -1) (undo-tree-id18671 . -1) (undo-tree-id18672 . -1) (undo-tree-id18673 . -1) (undo-tree-id18674 . -1) (undo-tree-id18675 . -1) (undo-tree-id18676 . -1) (undo-tree-id18677 . -1) (undo-tree-id18678 . -1) (undo-tree-id18679 . -1) (undo-tree-id18680 . -1) (undo-tree-id18681 . -1) (undo-tree-id18682 . -1) (undo-tree-id18683 . -1) (undo-tree-id18684 . -1) (undo-tree-id18685 . -1) (undo-tree-id18686 . -1) (undo-tree-id18687 . -1) (undo-tree-id18688 . -1) (undo-tree-id18689 . -1) (undo-tree-id18690 . -1) (undo-tree-id18691 . -1) (undo-tree-id18692 . -1) (undo-tree-id18693 . -1) (undo-tree-id18694 . -1) (undo-tree-id18695 . -1) (undo-tree-id18696 . -1) (undo-tree-id18697 . -1) (undo-tree-id18698 . -1) (undo-tree-id18699 . -1) (undo-tree-id18700 . -1) (undo-tree-id18701 . -1) (undo-tree-id18702 . -1) (undo-tree-id18703 . -1) (undo-tree-id18704 . -1) (undo-tree-id18705 . -1) (undo-tree-id18706 . -1) (undo-tree-id18707 . -1) (undo-tree-id18708 . -1) (undo-tree-id18709 . -1) (undo-tree-id18710 . -1) (undo-tree-id18711 . -1) (undo-tree-id18712 . -1) (undo-tree-id18713 . -1) (undo-tree-id18714 . -1) (undo-tree-id18715 . -1) (undo-tree-id18716 . -1) (undo-tree-id18717 . -1) (undo-tree-id18718 . -1) (undo-tree-id18719 . -1) (undo-tree-id18720 . -1) (undo-tree-id18721 . -1) (undo-tree-id18722 . -1) (undo-tree-id18723 . -1) (undo-tree-id18724 . -1) (undo-tree-id18725 . -1) (undo-tree-id18726 . -1) (undo-tree-id18727 . -1) (undo-tree-id18728 . -1) (t 25755 15369 673542 267000)) nil (25755 15379 736669 398000) 0 nil])
([nil nil ((#(", as we will see shortly" 0 24 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32003) (undo-tree-id18729 . -23) (undo-tree-id18730 . -3) (undo-tree-id18731 . -3) (undo-tree-id18732 . -3) (undo-tree-id18733 . -3) (undo-tree-id18734 . -3) (undo-tree-id18735 . -3) (undo-tree-id18736 . -3) (undo-tree-id18737 . -3) (undo-tree-id18738 . -3) (undo-tree-id18739 . -3) (undo-tree-id18740 . -3) (undo-tree-id18741 . -3) (undo-tree-id18742 . -3) (undo-tree-id18743 . -3) (undo-tree-id18744 . -3) (undo-tree-id18745 . -3) (undo-tree-id18746 . -3) (undo-tree-id18747 . -3) (undo-tree-id18748 . -3) (undo-tree-id18749 . -3) (undo-tree-id18750 . -3) (undo-tree-id18751 . -3) (undo-tree-id18752 . -3) (undo-tree-id18753 . -3) (undo-tree-id18754 . -3) (undo-tree-id18755 . -3) (undo-tree-id18756 . -3) (undo-tree-id18757 . -3) (undo-tree-id18758 . -3) (undo-tree-id18759 . -3) (undo-tree-id18760 . -3) (undo-tree-id18761 . -3) (undo-tree-id18762 . -3) (undo-tree-id18763 . -3) (undo-tree-id18764 . -3) (undo-tree-id18765 . -3) (undo-tree-id18766 . -2) (undo-tree-id18767 . -2) (undo-tree-id18768 . -2) (undo-tree-id18769 . -2) (undo-tree-id18770 . -2) (undo-tree-id18771 . -2) (undo-tree-id18772 . -2) (undo-tree-id18773 . -2) (undo-tree-id18774 . -2) (undo-tree-id18775 . -2) (undo-tree-id18776 . -2) (undo-tree-id18777 . -2) (undo-tree-id18778 . -2) (undo-tree-id18779 . -2) (undo-tree-id18780 . -2) (undo-tree-id18781 . -1) (undo-tree-id18782 . -1) (undo-tree-id18783 . -1) (undo-tree-id18784 . -1) (undo-tree-id18785 . -1) (undo-tree-id18786 . -1) (undo-tree-id18787 . -1) (undo-tree-id18788 . -1) (undo-tree-id18789 . -1) (undo-tree-id18790 . -1) (undo-tree-id18791 . -1) (undo-tree-id18792 . -1) (undo-tree-id18793 . -1) (undo-tree-id18794 . -1) (undo-tree-id18795 . -1) (undo-tree-id18796 . -24) (t 25755 15379 761957 245000)) nil (25755 15394 222360 35000) 0 nil])
([nil nil ((32005 . 32007)) nil (25755 15394 222255 883000) 0 nil])
([nil nil ((#("Why is this important? Well, while a dense layer expects a specific input size (since it has one weight per input feature), a convolutional layer will happily process images of any size26 (however, it does expect its inputs to have a specific number of channels, since each kernel contains a different set of weights for each input channel). Since an FCN contains only convolutional layers (and pooling layers, which have the same property), it can be trained and executed on images of any size! For example, suppose we’d already trained a CNN for flower classification and localization. It was trained on 224 × 224 images, and it outputs 10 numbers: outputs 0 to 4 are sent through the softmax activation function, and this gives the class probabilities (one per class); output 5 is sent through the logistic activation function, and this gives the objectness
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 74 150 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 150 151 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 151 226 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 226 227 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 227 301 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 301 302 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 302 348 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 348 368 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 368 369 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 369 444 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 444 445 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 445 464 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 464 495 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 495 496 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 496 569 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 569 570 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 570 641 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 641 642 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 642 715 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 715 716 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 716 788 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 788 789 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 789 861 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18806 . -860) (undo-tree-id18807 . 861) (undo-tree-id18808 . -861) (t 25755 15394 246552 286000)) nil (25755 15424 486370 902000) 0 nil])
([nil nil ((#("score; outputs 6 to 9 do not use any activation function, and they represent
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18803 . -76) (undo-tree-id18804 . 77) (undo-tree-id18805 . -77)) nil (25755 15424 486367 864000) 0 nil])
([nil nil ((#("the bounding box’s center coordinates, as well as its height and width. We
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18800 . -74) (undo-tree-id18801 . 75) (undo-tree-id18802 . -75)) nil (25755 15424 486364 376000) 0 nil])
([nil nil ((#("can now convert its dense layers to convolutional layers. In fact, we don’t
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18797 . -75) (undo-tree-id18798 . 76) (undo-tree-id18799 . -76)) nil (25755 15424 486358 508000) 0 nil])
([nil nil ((#("even need to retrain it; we can just copy the weights from the dense layers
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18815 . -75) (undo-tree-id18816 . 76) (undo-tree-id18817 . -76) (t 25755 15424 511792 781000)) nil (25755 15468 911770 461000) 0 nil])
([nil nil ((#("to the convolutional layers! Alternatively, we could have converted the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18812 . -71) (undo-tree-id18813 . 72) (undo-tree-id18814 . -72)) nil (25755 15468 911767 41000) 0 nil])
([nil nil ((#("CNN into an FCN before training.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18809 . -32) (undo-tree-id18810 . 33) (undo-tree-id18811 . -33)) nil (25755 15468 911761 578000) 0 nil])
([nil nil ((#("Now suppose the last convolutional layer before the output layer (also
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18821 . -70) (undo-tree-id18822 . 71) (undo-tree-id18823 . -71) (t 25755 15468 937607 161000)) nil (25755 15486 362480 235000) 0 nil])
([nil nil ((#("called the bottleneck layer) outputs 7 × 7 feature maps when the network
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18835 . -72) (undo-tree-id18836 . 73) (undo-tree-id18837 . -73)) nil (25755 15500 745740 264000) 0 nil] [nil nil ((#("called the bottleneck layer) outputs 7 × 7 feature maps when the network
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18818 . -72) (undo-tree-id18819 . 73) (undo-tree-id18820 . -73)) ((32007 . 32080)) (25755 15486 362249 383000) 0 nil])
([nil nil ((#("is fed a 224 × 224 image (see the left side of Figure 14-25). If we feed the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18832 . -76) (undo-tree-id18833 . 77) (undo-tree-id18834 . -77)) nil (25755 15500 745737 301000) 0 nil])
nil
([nil nil ((#("FCN a 448 × 448 image (see the right side of Figure 14-25), the bottleneck
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18827 . -74) (undo-tree-id18828 . 75) (undo-tree-id18829 . 75) (undo-tree-id18830 . -3) (undo-tree-id18831 . -75)) nil (25755 15500 746019 71000) 0 nil])
([nil nil ((#("layer will now output 14 × 14 feature maps.27 Since the dense output layerwas replaced by a convolutional layer using 10 filters of size 7 × 7, with
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18841 . -148) (undo-tree-id18842 . 149) (undo-tree-id18843 . -149)) nil (25755 15508 334407 978000) 0 nil] [nil nil ((#("layer will now output 14 × 14 feature maps.27 Since the dense output layerwas replaced by a convolutional layer using 10 filters of size 7 × 7, with
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 149 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18824 . -148) (undo-tree-id18825 . 149) (undo-tree-id18826 . -149)) ((32007 . 32156)) (25755 15500 745726 33000) 0 nil])
([nil nil ((#("\"valid\" padding and stride 1, the output will be composed of 10 features
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18838 . -72) (undo-tree-id18839 . 73) (undo-tree-id18840 . -73)) nil (25755 15508 334401 683000) 0 nil])
nil
([nil nil ((#("maps, each of size 8 × 8 (since 14 – 7 + 1 = 8). In other words, the FCN
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 53 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18844 . -72) (undo-tree-id18845 . 73) (undo-tree-id18846 . -73) (t 25755 15508 407213 73000)) nil (25755 15514 651472 321000) 0 nil])
([nil nil ((#("will process the whole image only once, and it will output an 8 × 8 grid
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18853 . -72) (undo-tree-id18854 . 73) (undo-tree-id18855 . -73) (t 25755 15514 675467 618000)) nil (25755 15528 951600 33000) 0 nil])
([nil nil ((#("where each cell contains 10 numbers (5 class probabilities, 1 objectness
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18850 . -72) (undo-tree-id18851 . 73) (undo-tree-id18852 . -73)) nil (25755 15528 951831 862000) 0 nil])
([nil nil ((#("score, and 4 bounding box coordinates). It’s exactly like taking the original
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18859 . -77) (undo-tree-id18860 . 78) (undo-tree-id18861 . -78)) nil (25755 15538 233285 149000) 0 nil] [nil nil ((#("score, and 4 bounding box coordinates). It’s exactly like taking the original
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18847 . -77) (undo-tree-id18848 . 78) (undo-tree-id18849 . -78)) ((32007 . 32085)) (25755 15528 951590 338000) 0 nil])
([nil nil ((#("CNN and sliding it across the image using 8 steps per row and 8 steps per
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18856 . -73) (undo-tree-id18857 . 74) (undo-tree-id18858 . -74)) nil (25755 15538 233275 838000) 0 nil])
nil
([nil nil ((#("column. To visualize this, imagine chopping the original image into a 14 ×
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18999 . -74) (undo-tree-id19000 . 75) (undo-tree-id19001 . -6) (undo-tree-id19002 . -6) (undo-tree-id19003 . -6) (undo-tree-id19004 . -6) (undo-tree-id19005 . -6) (undo-tree-id19006 . -6) (undo-tree-id19007 . -6) (undo-tree-id19008 . -6) (undo-tree-id19009 . -6) (undo-tree-id19010 . -6) (undo-tree-id19011 . -6) (undo-tree-id19012 . -6) (undo-tree-id19013 . -75) 32013 (t 25755 15538 260424 214000)) nil (25755 15565 535841 853000) 0 nil])
([nil nil ((#("14 grid, then sliding a 7 × 7 window across this grid; there will be 8 × 8 =
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18975 . -76) (undo-tree-id18976 . 77) (undo-tree-id18977 . -6) (undo-tree-id18978 . -6) (undo-tree-id18979 . -6) (undo-tree-id18980 . -6) (undo-tree-id18981 . -6) (undo-tree-id18982 . -6) (undo-tree-id18983 . -6) (undo-tree-id18984 . -6) (undo-tree-id18985 . -6) (undo-tree-id18986 . -6) (undo-tree-id18987 . -6) (undo-tree-id18988 . -6) (undo-tree-id18989 . -6) (undo-tree-id18990 . -6) (undo-tree-id18991 . -6) (undo-tree-id18992 . -6) (undo-tree-id18993 . -6) (undo-tree-id18994 . -6) (undo-tree-id18995 . -6) (undo-tree-id18996 . -6) (undo-tree-id18997 . -6) (undo-tree-id18998 . -77) 32013) nil (25755 15565 535830 652000) 0 nil])
([nil nil ((#("64 possible locations for the window, hence 8 × 8 predictions. However,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 50 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18951 . -71) (undo-tree-id18952 . 72) (undo-tree-id18953 . -6) (undo-tree-id18954 . -6) (undo-tree-id18955 . -6) (undo-tree-id18956 . -6) (undo-tree-id18957 . -6) (undo-tree-id18958 . -6) (undo-tree-id18959 . -6) (undo-tree-id18960 . -6) (undo-tree-id18961 . -6) (undo-tree-id18962 . -6) (undo-tree-id18963 . -6) (undo-tree-id18964 . -6) (undo-tree-id18965 . -6) (undo-tree-id18966 . -6) (undo-tree-id18967 . -6) (undo-tree-id18968 . -6) (undo-tree-id18969 . -6) (undo-tree-id18970 . -6) (undo-tree-id18971 . -6) (undo-tree-id18972 . -6) (undo-tree-id18973 . -6) (undo-tree-id18974 . -72) 32013) nil (25755 15565 535813 786000) 0 nil])
([nil nil ((#("the FCN approach is much more efficient, since the network only looks at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18925 . -72) (undo-tree-id18926 . 73) (undo-tree-id18927 . -6) (undo-tree-id18928 . 69) (undo-tree-id18929 . -7) (undo-tree-id18930 . -6) (undo-tree-id18931 . -6) (undo-tree-id18932 . -6) (undo-tree-id18933 . -6) (undo-tree-id18934 . -6) (undo-tree-id18935 . -6) (undo-tree-id18936 . -6) (undo-tree-id18937 . -6) (undo-tree-id18938 . -6) (undo-tree-id18939 . -6) (undo-tree-id18940 . -6) (undo-tree-id18941 . -6) (undo-tree-id18942 . -6) (undo-tree-id18943 . -6) (undo-tree-id18944 . -6) (undo-tree-id18945 . -6) (undo-tree-id18946 . -6) (undo-tree-id18947 . -6) (undo-tree-id18948 . -6) (undo-tree-id18949 . -6) (undo-tree-id18950 . -73) 32013) nil (25755 15565 535797 122000) 0 nil])
([nil nil ((#("the image once. In fact, You Only Look Once (YOLO) is the name of a very
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32007) (undo-tree-id18901 . -72) (undo-tree-id18902 . 73) (undo-tree-id18903 . -6) (undo-tree-id18904 . -6) (undo-tree-id18905 . -6) (undo-tree-id18906 . -6) (undo-tree-id18907 . -6) (undo-tree-id18908 . -6) (undo-tree-id18909 . -6) (undo-tree-id18910 . -6) (undo-tree-id18911 . -6) (undo-tree-id18912 . -6) (undo-tree-id18913 . -6) (undo-tree-id18914 . -6) (undo-tree-id18915 . -6) (undo-tree-id18916 . -6) (undo-tree-id18917 . -6) (undo-tree-id18918 . -6) (undo-tree-id18919 . -6) (undo-tree-id18920 . -6) (undo-tree-id18921 . -6) (undo-tree-id18922 . -6) (undo-tree-id18923 . -6) (undo-tree-id18924 . -73) 32013) nil (25755 15565 535778 526000) 0 nil])
([nil nil ((#("popular object detection architecture, which we’ll look at next.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 63 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 64 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 32007) (undo-tree-id18877 . -64) (undo-tree-id18878 . 65) (undo-tree-id18879 . -6) (undo-tree-id18880 . -6) (undo-tree-id18881 . -6) (undo-tree-id18882 . -6) (undo-tree-id18883 . -6) (undo-tree-id18884 . -6) (undo-tree-id18885 . -6) (undo-tree-id18886 . -6) (undo-tree-id18887 . -6) (undo-tree-id18888 . -6) (undo-tree-id18889 . -6) (undo-tree-id18890 . -6) (undo-tree-id18891 . -6) (undo-tree-id18892 . -6) (undo-tree-id18893 . -6) (undo-tree-id18894 . -6) (undo-tree-id18895 . -6) (undo-tree-id18896 . -6) (undo-tree-id18897 . -6) (undo-tree-id18898 . -6) (undo-tree-id18899 . -6) (undo-tree-id18900 . -65) 32013) nil (25755 15565 535758 739000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 32005) (32007 . 32009)) nil (25755 15565 535739 906000) 0 nil])
([nil nil ((nil keymap (keymap) 32007 . 32008) (nil face org-level-1 32007 . 32008) (nil line-prefix #("  " 0 2 (face org-indent)) 32007 . 32008) (nil wrap-prefix #("  " 0 2 (face org-indent)) 32007 . 32008) (nil fontified nil 32007 . 32008) (32007 . 32008) (#(" " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 32007) (undo-tree-id18862 . -1) (undo-tree-id18863 . -1) (undo-tree-id18864 . -1) (undo-tree-id18865 . -1) (undo-tree-id18866 . -1) (undo-tree-id18867 . -1) (undo-tree-id18868 . -1) (undo-tree-id18869 . -1) (undo-tree-id18870 . -1) (undo-tree-id18871 . -1) (undo-tree-id18872 . -1) (undo-tree-id18873 . -1) (#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) . -32008) (undo-tree-id18874 . 1) (undo-tree-id18875 . -1) (undo-tree-id18876 . -1) 32007) nil (25755 15565 535735 240000) 0 nil])
([nil nil ((#("YOLO is an extremely fast and accurate object detection architecture
" 0 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32034) (undo-tree-id19095 . -68) (undo-tree-id19096 . -5) (undo-tree-id19097 . -8) (undo-tree-id19098 . -11) (undo-tree-id19099 . -21) (undo-tree-id19100 . -26) (undo-tree-id19101 . -30) (undo-tree-id19102 . -39) (undo-tree-id19103 . -46) (undo-tree-id19104 . -56) (undo-tree-id19105 . -69) (undo-tree-id19106 . -69) (undo-tree-id19107 . -69) (undo-tree-id19108 . -69) (undo-tree-id19109 . -69) (undo-tree-id19110 . -69) (undo-tree-id19111 . -69) (undo-tree-id19112 . -69) (undo-tree-id19113 . -69) (undo-tree-id19114 . -69) (undo-tree-id19115 . -69) (undo-tree-id19116 . -69) (undo-tree-id19117 . -69) (undo-tree-id19118 . -69) (undo-tree-id19119 . -69) (undo-tree-id19120 . 69) (undo-tree-id19121 . -4) (undo-tree-id19122 . -7) (undo-tree-id19123 . -3) (undo-tree-id19124 . -6) (undo-tree-id19125 . -9) (undo-tree-id19126 . -19) (undo-tree-id19127 . -24) (undo-tree-id19128 . -28) (undo-tree-id19129 . -37) (undo-tree-id19130 . -44) (undo-tree-id19131 . -54) (undo-tree-id19132 . -67) (undo-tree-id19133 . -7) (undo-tree-id19134 . -7) (undo-tree-id19135 . -7) (undo-tree-id19136 . -7) (undo-tree-id19137 . -7) (undo-tree-id19138 . -7) (undo-tree-id19139 . -7) (undo-tree-id19140 . -7) (undo-tree-id19141 . -7) (undo-tree-id19142 . -7) (undo-tree-id19143 . -7) (undo-tree-id19144 . -7) (undo-tree-id19145 . -7) (undo-tree-id19146 . -7) (undo-tree-id19147 . -7) (undo-tree-id19148 . -7) (undo-tree-id19149 . -7) (undo-tree-id19150 . -7) (undo-tree-id19151 . -69) 32041 (t 25755 15565 605531 107000)) nil (25755 15617 536085 569000) 0 nil])
([nil nil ((#("proposed by Joseph Redmon et al. in a 2015 paper,28 and subsequently
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32034) (undo-tree-id19057 . -68) (undo-tree-id19058 . -7) (undo-tree-id19059 . -7) (undo-tree-id19060 . -7) (undo-tree-id19061 . -7) (undo-tree-id19062 . -7) (undo-tree-id19063 . -7) (undo-tree-id19064 . -7) (undo-tree-id19065 . -7) (undo-tree-id19066 . -7) (undo-tree-id19067 . -7) (undo-tree-id19068 . -7) (undo-tree-id19069 . -7) (undo-tree-id19070 . -7) (undo-tree-id19071 . -7) (undo-tree-id19072 . -7) (undo-tree-id19073 . -7) (undo-tree-id19074 . -7) (undo-tree-id19075 . -7) (undo-tree-id19076 . -7) (undo-tree-id19077 . -7) (undo-tree-id19078 . -7) (undo-tree-id19079 . -7) (undo-tree-id19080 . -7) (undo-tree-id19081 . -7) (undo-tree-id19082 . -7) (undo-tree-id19083 . -7) (undo-tree-id19084 . -7) (undo-tree-id19085 . -7) (undo-tree-id19086 . -7) (undo-tree-id19087 . -7) (undo-tree-id19088 . -7) (undo-tree-id19089 . -7) (undo-tree-id19090 . -7) (undo-tree-id19091 . -7) (undo-tree-id19092 . -7) (undo-tree-id19093 . -7) (undo-tree-id19094 . -69) 32041) nil (25755 15617 536046 326000) 0 nil])
([nil nil ((#("improved in 201629 (YOLOv2) and in 201830 (YOLOv3)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 50 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32034) (undo-tree-id19045 . -49) (undo-tree-id19046 . -7) (undo-tree-id19047 . -7) (undo-tree-id19048 . -7) (undo-tree-id19049 . -7) (undo-tree-id19050 . -7) (undo-tree-id19051 . -7) (undo-tree-id19052 . -7) (undo-tree-id19053 . -7) (undo-tree-id19054 . -7) (undo-tree-id19055 . -7) (undo-tree-id19056 . -50)) nil (25755 15617 536014 943000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32034) (undo-tree-id19043 . -1) (undo-tree-id19044 . -1)) nil (25755 15617 536001 326000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 32034) (undo-tree-id19041 . -1) (undo-tree-id19042 . -1)) nil (25755 15617 535997 869000) 0 nil])
([nil nil ((32052 . 32053) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32052) (undo-tree-id19040 . -1) 32034) nil (25755 15617 535993 695000) 0 nil])
([nil nil ((#("It is so fast that it can run in real time on a video, as seen in Redmon’s demo.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 19 81 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32034) (undo-tree-id19019 . -80) (undo-tree-id19020 . -18) (undo-tree-id19021 . -18) (undo-tree-id19022 . -18) (undo-tree-id19023 . -18) (undo-tree-id19024 . -18) (undo-tree-id19025 . -18) (undo-tree-id19026 . -18) (undo-tree-id19027 . -18) (undo-tree-id19028 . -18) (undo-tree-id19029 . -18) (undo-tree-id19030 . -18) (undo-tree-id19031 . -18) (undo-tree-id19032 . -18) (undo-tree-id19033 . -18) (undo-tree-id19034 . -18) (undo-tree-id19035 . -18) (undo-tree-id19036 . -18) (undo-tree-id19037 . -80) (undo-tree-id19038 . 1) (undo-tree-id19039 . -81)) nil (25755 15663 11302 798000) 0 nil])
([nil nil ((32040 . 32041) (#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32040) (undo-tree-id19161 . -1)) nil (25755 15690 284627 443000) 0 nil] [nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32039) (undo-tree-id19016 . -1) (undo-tree-id19017 . -1) (undo-tree-id19018 . -1)) ((32039 . 32040)) (25755 15661 462070 99000) 0 nil])
([nil nil ((#(" is quite similar to the one we just discussed, but" 0 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32055) (undo-tree-id19244 . -50) (undo-tree-id19245 . -1) (undo-tree-id19246 . -4) (undo-tree-id19247 . -1) (undo-tree-id19248 . -1) (undo-tree-id19249 . -1) (undo-tree-id19250 . -2) (undo-tree-id19251 . -1) (undo-tree-id19252 . -51) (undo-tree-id19253 . -51)) nil (25755 15714 784442 447000) 0 nil] [nil nil ((#("YOLOv3's architecture is quite similar to the one we just discussed, but
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 7 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 72 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32034) (undo-tree-id19162 . -72) (undo-tree-id19163 . -13) (undo-tree-id19164 . -5) (undo-tree-id19165 . -21) (undo-tree-id19166 . -22) (undo-tree-id19167 . -25) (undo-tree-id19168 . -22) (undo-tree-id19169 . -22) (undo-tree-id19170 . -22) (undo-tree-id19171 . -23) (undo-tree-id19172 . -22) (undo-tree-id19173 . 73) (undo-tree-id19174 . -5) (undo-tree-id19175 . -21) (undo-tree-id19176 . -21) (undo-tree-id19177 . -21) (undo-tree-id19178 . -21) (undo-tree-id19179 . -21) (undo-tree-id19180 . -21) (undo-tree-id19181 . -21) (undo-tree-id19182 . -21) (undo-tree-id19183 . -21) (undo-tree-id19184 . -21) (undo-tree-id19185 . -21) (undo-tree-id19186 . -21) (undo-tree-id19187 . -21) (undo-tree-id19188 . -21) (undo-tree-id19189 . -21) (undo-tree-id19190 . -21) (undo-tree-id19191 . -21) (undo-tree-id19192 . -21) (undo-tree-id19193 . -21) (undo-tree-id19194 . -73) 32055) ((32034 . 32107)) (25755 15690 284352 256000) 0 nil] [nil nil ((#(" is quite similar to the one we just discussed, but" 0 51 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32055) (undo-tree-id19152 . -50) (undo-tree-id19153 . -1) (undo-tree-id19154 . -4) (undo-tree-id19155 . -1) (undo-tree-id19156 . -1) (undo-tree-id19157 . -1) (undo-tree-id19158 . -2) (undo-tree-id19159 . -1) (undo-tree-id19160 . -51)) ((32055 . 32106)) (25755 15686 207275 927000) 0 nil])
([nil nil ((#("’" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32039) (undo-tree-id19014 . -1) (undo-tree-id19015 . -1)) ((32039 . 32040) (t 25755 15617 563628 197000)) (25755 15617 535954 29000) 0 nil])
([nil nil ((#("with a few important differences:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32056) (undo-tree-id19241 . -33) (undo-tree-id19242 . -21) (undo-tree-id19243 . -34)) nil (25755 15714 784434 275000) 0 nil])
nil
nil
nil
([nil nil ((32056 . 32058)) nil (25755 15714 784431 517000) 0 nil])
([nil nil ((#("(instead of just
one)" 0 17 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 17 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32108) (undo-tree-id19239 . -20) (undo-tree-id19240 . -21) 32059) nil (25755 15714 784430 402000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32107) (undo-tree-id19206 . -1) (undo-tree-id19207 . -1) (undo-tree-id19208 . -1) (undo-tree-id19209 . -1) (undo-tree-id19210 . -1) (undo-tree-id19211 . -1) (undo-tree-id19212 . -1) (undo-tree-id19213 . -1) (undo-tree-id19214 . -1) (undo-tree-id19215 . -1) (undo-tree-id19216 . -1) (undo-tree-id19217 . -1) (undo-tree-id19218 . -1) (undo-tree-id19219 . -1) (undo-tree-id19220 . -1) (undo-tree-id19221 . -1) (undo-tree-id19222 . -1) (undo-tree-id19223 . -1) (undo-tree-id19224 . -1) (undo-tree-id19225 . -1) (undo-tree-id19226 . -1) (undo-tree-id19227 . -1) (undo-tree-id19228 . -1) (undo-tree-id19229 . -1) (undo-tree-id19230 . -1) (undo-tree-id19231 . -1) (undo-tree-id19232 . -1) (undo-tree-id19233 . -1) (undo-tree-id19234 . -1) (undo-tree-id19235 . -1) (undo-tree-id19236 . -1) (undo-tree-id19237 . -1) (undo-tree-id19238 . -1)) nil (25755 15714 784425 119000) 0 nil])
([nil nil ((32110 . 32113) (32109 . 32110)) nil (25755 15714 784399 316000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 32112) (undo-tree-id19195 . -1) (undo-tree-id19196 . -1) (undo-tree-id19197 . -1) (undo-tree-id19198 . -1) (undo-tree-id19199 . -1) (undo-tree-id19200 . -1) (undo-tree-id19201 . -1) (undo-tree-id19202 . -1) (undo-tree-id19203 . -1) (undo-tree-id19204 . -1) (undo-tree-id19205 . -1)) nil (25755 15714 784394 833000) 0 nil])
([nil nil ((32167 . 32169) (32166 . 32167) (t 25755 15714 859535 948000)) nil (25755 15725 863208 204000) 0 nil])
([nil nil ((32171 . 32172) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -32171) (undo-tree-id19254 . -1) 32168) nil (25755 15725 863203 795000) 0 nil])
([nil nil ((32241 . 32243) (t 25755 15725 891977 627000)) nil (25755 15745 921323 531000) 0 nil])
([nil nil ((#(", as it was trained" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32221) (undo-tree-id19391 . -18) (undo-tree-id19392 . -19) (t 25755 15739 276513 107000)) nil (25755 15776 568441 776000) 0 nil] [nil nil ((#("  It also outputs 20 class probabilities per grid cell, as it was trained
" 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 4 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32167) (undo-tree-id19255 . -73) (undo-tree-id19256 . -5) (undo-tree-id19257 . -5) (undo-tree-id19258 . -5) (undo-tree-id19259 . -5) (undo-tree-id19260 . -5) (undo-tree-id19261 . -5) (undo-tree-id19262 . -5) (undo-tree-id19263 . -5) (undo-tree-id19264 . -5) (undo-tree-id19265 . -5) (undo-tree-id19266 . -5) (undo-tree-id19267 . -5) (undo-tree-id19268 . -5) (undo-tree-id19269 . -5) (undo-tree-id19270 . -5) (undo-tree-id19271 . -5) (undo-tree-id19272 . -5) (undo-tree-id19273 . -5) (undo-tree-id19274 . -5) (undo-tree-id19275 . -74) 32172 (t 25755 15739 276513 107000)) ((32167 . 32241)) (25755 15745 920937 901000) 0 nil])
([nil nil ((#("on the PASCAL VOC dataset, which contains 20 classes" 0 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32224) (undo-tree-id19388 . -51) (undo-tree-id19389 . 52) (undo-tree-id19390 . -52)) nil (25755 15776 568439 473000) 0 nil])
nil
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32224) (undo-tree-id19385 . 1) (undo-tree-id19386 . -1) (undo-tree-id19387 . -1)) nil (25755 15779 12486 119000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 32224) (undo-tree-id19443 . 1) (undo-tree-id19444 . -1) (undo-tree-id19445 . -1)) nil (25755 15802 489947 154000) 0 nil] [nil nil ((#("   That’s a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t) 2 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 32222) (undo-tree-id19333 . -11) (undo-tree-id19334 . 10) (undo-tree-id19335 . -1) (undo-tree-id19336 . -2) (undo-tree-id19337 . -2) (undo-tree-id19338 . -2) (undo-tree-id19339 . -2) (undo-tree-id19340 . -2) (undo-tree-id19341 . -2) (undo-tree-id19342 . -2) (undo-tree-id19343 . -2) (undo-tree-id19344 . -2) (undo-tree-id19345 . -2) (undo-tree-id19346 . -2) (undo-tree-id19347 . -2) (undo-tree-id19348 . -2) (undo-tree-id19349 . -2) (undo-tree-id19350 . -2) (undo-tree-id19351 . -2) (undo-tree-id19352 . -2) (undo-tree-id19353 . -2) (undo-tree-id19354 . -2) (undo-tree-id19355 . -2) (undo-tree-id19356 . -2) (undo-tree-id19357 . -2) (undo-tree-id19358 . -2) (undo-tree-id19359 . -2) (undo-tree-id19360 . -2) (undo-tree-id19361 . -2) (undo-tree-id19362 . -2) (undo-tree-id19363 . -2) (undo-tree-id19364 . -2) (undo-tree-id19365 . -2) (undo-tree-id19366 . -2) (undo-tree-id19367 . -2) (undo-tree-id19368 . -2) (undo-tree-id19369 . -2) (undo-tree-id19370 . -2) (undo-tree-id19371 . -2) (undo-tree-id19372 . -2) (undo-tree-id19373 . -2) (undo-tree-id19374 . -2) (undo-tree-id19375 . -2) (undo-tree-id19376 . -2) (undo-tree-id19377 . -2) (undo-tree-id19378 . -2) (undo-tree-id19379 . -2) (undo-tree-id19380 . -2) (undo-tree-id19381 . -2) (undo-tree-id19382 . -2) (undo-tree-id19383 . -2) (undo-tree-id19384 . -12) 32224) ((32222 . 32234)) (25755 15778 453202 570000) 0 nil])
([nil nil ((32232 . 32233) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -32232) (undo-tree-id19442 . -1) 32224) nil (25755 15802 489940 485000) 0 nil])
([nil nil ((32222 . 32224)) ((#("  " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32222) (undo-tree-id19393 . -1) (undo-tree-id19394 . -1) (undo-tree-id19395 . -2) (undo-tree-id19396 . -2) (undo-tree-id19397 . -2) (undo-tree-id19398 . -2) (undo-tree-id19399 . -2) (undo-tree-id19400 . -2) (undo-tree-id19401 . -2) (undo-tree-id19402 . -2) (undo-tree-id19403 . -2) (undo-tree-id19404 . -1) (undo-tree-id19405 . -1) (undo-tree-id19406 . -1) (undo-tree-id19407 . -1) (undo-tree-id19408 . -1) (undo-tree-id19409 . -1) (undo-tree-id19410 . -1) (undo-tree-id19411 . -1) (undo-tree-id19412 . -1) (undo-tree-id19413 . -1) (undo-tree-id19414 . -1) (undo-tree-id19415 . -1) (undo-tree-id19416 . -1) (undo-tree-id19417 . -1) (undo-tree-id19418 . -1) (undo-tree-id19419 . -1) (undo-tree-id19420 . -1) (undo-tree-id19421 . -1) (undo-tree-id19422 . -1) (undo-tree-id19423 . -1) (undo-tree-id19424 . -1) (undo-tree-id19425 . -1) (undo-tree-id19426 . -1) (undo-tree-id19427 . -1) (undo-tree-id19428 . -1) (undo-tree-id19429 . -1) (undo-tree-id19430 . -1) (undo-tree-id19431 . -1) (undo-tree-id19432 . -1) (undo-tree-id19433 . -1) (undo-tree-id19434 . -1) (undo-tree-id19435 . -1) (undo-tree-id19436 . -1) (undo-tree-id19437 . -1) (undo-tree-id19438 . -1) (undo-tree-id19439 . -1) (undo-tree-id19440 . -1) (undo-tree-id19441 . -1)) (25755 15777 591596 468000) 0 nil])
([nil nil ((32269 . 32272) (32268 . 32269) (t 25755 15802 565718 55000)) nil (25755 15811 691242 102000) 0 nil])
([nil nil ((#(" total of 45 numbers per grid cell" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32223) (undo-tree-id19282 . -33) (undo-tree-id19283 . 33) (undo-tree-id19284 . -3) (undo-tree-id19285 . -3) (undo-tree-id19286 . -3) (undo-tree-id19287 . -3) (undo-tree-id19288 . -3) (undo-tree-id19289 . -3) (undo-tree-id19290 . -3) (undo-tree-id19291 . -3) (undo-tree-id19292 . -3) (undo-tree-id19293 . -3) (undo-tree-id19294 . -3) (undo-tree-id19295 . -3) (undo-tree-id19296 . -3) (undo-tree-id19297 . -3) (undo-tree-id19298 . -3) (undo-tree-id19299 . -3) (undo-tree-id19300 . -3) (undo-tree-id19301 . -3) (undo-tree-id19302 . -3) (undo-tree-id19303 . -3) (undo-tree-id19304 . -2) (undo-tree-id19305 . -2) (undo-tree-id19306 . -2) (undo-tree-id19307 . -2) (undo-tree-id19308 . -2) (undo-tree-id19309 . -2) (undo-tree-id19310 . -2) (undo-tree-id19311 . -2) (undo-tree-id19312 . -2) (undo-tree-id19313 . -2) (undo-tree-id19314 . -2) (undo-tree-id19315 . -2) (undo-tree-id19316 . -2) (undo-tree-id19317 . -2) (undo-tree-id19318 . -2) (undo-tree-id19319 . -2) (undo-tree-id19320 . -2) (undo-tree-id19321 . -2) (undo-tree-id19322 . -2) (undo-tree-id19323 . -1) (undo-tree-id19324 . -1) (undo-tree-id19325 . -1) (undo-tree-id19326 . -1) (undo-tree-id19327 . -1) (undo-tree-id19328 . -1) (undo-tree-id19329 . -1) (undo-tree-id19330 . -1) (undo-tree-id19331 . -1) (undo-tree-id19332 . -34)) ((32223 . 32257)) (25755 15777 173201 223000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 32271) (undo-tree-id19447 . -1) (undo-tree-id19448 . -1) (undo-tree-id19449 . -1) (undo-tree-id19450 . -1) (undo-tree-id19451 . -1) (undo-tree-id19452 . -1) (undo-tree-id19453 . -1) (undo-tree-id19454 . -1) (undo-tree-id19455 . -1) (undo-tree-id19456 . -1) (undo-tree-id19457 . -1)) nil (25755 15811 691239 960000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t face org-code)) . 32223) (undo-tree-id19279 . 1) (undo-tree-id19280 . -1) (undo-tree-id19281 . -1)) ((32223 . 32224)) (25755 15776 828990 409000) 0 nil])
([nil nil ((32300 . 32301) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -32300) (undo-tree-id19446 . -1) 32287) nil (25755 15811 691224 788000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32223) (undo-tree-id19276 . 1) (undo-tree-id19277 . -1) (undo-tree-id19278 . -1)) ((32223 . 32224)) (25755 15776 568673 106000) 0 nil])
([nil nil ((32315 . 32318) (32314 . 32315) (t 25755 15811 716643 780000)) nil (25755 15822 134589 727000) 0 nil])
([nil nil ((32223 . 32224)) ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32223)) (25755 15776 568340 433000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 32317) (undo-tree-id19458 . -1) (undo-tree-id19459 . -1) (undo-tree-id19460 . -1) (undo-tree-id19461 . -1) (undo-tree-id19462 . -1) (undo-tree-id19463 . -1) (undo-tree-id19464 . -1) (undo-tree-id19465 . -1) (undo-tree-id19466 . -1) (undo-tree-id19467 . -1) (undo-tree-id19468 . -1)) nil (25755 15822 134587 330000) 0 nil])
nil
([nil nil ((32344 . 32347) (32343 . 32344)) nil (25755 15822 134566 67000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 32346) (undo-tree-id19469 . -1) (undo-tree-id19470 . -1) (t 25755 15822 163444 689000)) nil (25755 15827 443024 69000) 0 nil])
([nil nil ((32375 . 32377)) nil (25755 15827 443006 613000) 0 nil])
([nil nil ((#("Instead of predicting the absolute coordinates of the bounding box
centers, " 0 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 67 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32377) (undo-tree-id19483 . -75) (undo-tree-id19484 . -75) (undo-tree-id19485 . 76) (undo-tree-id19486 . -75) (undo-tree-id19487 . -75) (undo-tree-id19488 . -6) (undo-tree-id19489 . -9) (undo-tree-id19490 . -20) (undo-tree-id19491 . -24) (undo-tree-id19492 . -33) (undo-tree-id19493 . -45) (undo-tree-id19494 . -48) (undo-tree-id19495 . -52) (undo-tree-id19496 . -61) (undo-tree-id19497 . -65) (undo-tree-id19498 . -67) (undo-tree-id19499 . -67) (undo-tree-id19500 . -67) (undo-tree-id19501 . -67) (undo-tree-id19502 . -67) (undo-tree-id19503 . -67) (undo-tree-id19504 . -67) (undo-tree-id19505 . -67) (undo-tree-id19506 . -67) (undo-tree-id19507 . -67) (undo-tree-id19508 . -67) (undo-tree-id19509 . -67) (undo-tree-id19510 . -67) (undo-tree-id19511 . -67) (undo-tree-id19512 . -67) (undo-tree-id19513 . -76) (undo-tree-id19514 . -75) (undo-tree-id19515 . -69) (undo-tree-id19516 . -69) (undo-tree-id19517 . -69) (undo-tree-id19518 . -69) (undo-tree-id19519 . -69) (undo-tree-id19520 . -69) (undo-tree-id19521 . -69) (undo-tree-id19522 . -69) (undo-tree-id19523 . -70) (undo-tree-id19524 . -70) (undo-tree-id19525 . -70) (undo-tree-id19526 . -70) (undo-tree-id19527 . -70) (undo-tree-id19528 . -70) (undo-tree-id19529 . -70) (undo-tree-id19530 . -70) (undo-tree-id19531 . -71) (undo-tree-id19532 . -71) (undo-tree-id19533 . -71) (undo-tree-id19534 . -71) (undo-tree-id19535 . -71) (undo-tree-id19536 . -71) (undo-tree-id19537 . -71) (undo-tree-id19538 . -71) (undo-tree-id19539 . -72) (undo-tree-id19540 . -72) (undo-tree-id19541 . -72) (undo-tree-id19542 . -72) (undo-tree-id19543 . -72) (undo-tree-id19544 . -72) (undo-tree-id19545 . -72) (undo-tree-id19546 . -72) (undo-tree-id19547 . -73) (undo-tree-id19548 . -73) (undo-tree-id19549 . -73) (undo-tree-id19550 . -73) (undo-tree-id19551 . -73) (undo-tree-id19552 . -73) (undo-tree-id19553 . -73) (undo-tree-id19554 . -73) (undo-tree-id19555 . -74) (undo-tree-id19556 . -74) (undo-tree-id19557 . -74) (undo-tree-id19558 . -74) (undo-tree-id19559 . -74) (undo-tree-id19560 . -74) (undo-tree-id19561 . -74) (undo-tree-id19562 . -74) (undo-tree-id19563 . -75) (undo-tree-id19564 . -75) (undo-tree-id19565 . -75) (undo-tree-id19566 . -75) (undo-tree-id19567 . -75) (undo-tree-id19568 . -75) (undo-tree-id19569 . -75) (undo-tree-id19570 . -75) (undo-tree-id19571 . -75) (undo-tree-id19572 . -76) 32452 (t 25755 15827 466846 941000)) nil (25755 15869 213787 131000) 0 nil])
([nil nil ((32433 . 32434) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -32433) (undo-tree-id19482 . -1) 32377) nil (25755 15869 213424 717000) 0 nil])
([nil nil ((32450 . 32452) (32449 . 32450)) nil (25755 15869 213423 20000) 0 nil])
([nil nil ((32506 . 32507)) nil (25755 15869 213422 190000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32506) (undo-tree-id19471 . -1) (undo-tree-id19472 . -1) (undo-tree-id19473 . -1) (undo-tree-id19474 . -1) (undo-tree-id19475 . -1) (undo-tree-id19476 . -1) (undo-tree-id19477 . -1) (undo-tree-id19478 . -1) (undo-tree-id19479 . -1) (undo-tree-id19480 . -1) (undo-tree-id19481 . -1)) nil (25755 15869 213420 477000) 0 nil])
([nil nil ((32507 . 32508)) nil (25755 15869 213405 344000) 0 nil])
([nil nil ((32509 . 32511)) nil (25755 15869 213400 987000) 0 nil])
([nil nil ((32537 . 32539) (32535 . 32537) (t 25755 15869 286382 508000)) nil (25755 15875 791180 32000) 0 nil])
([nil nil ((32579 . 32580) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -32579) (undo-tree-id19644 . -1) (undo-tree-id19645 . -1) (undo-tree-id19646 . -1) (undo-tree-id19647 . -1) (undo-tree-id19648 . -1) (undo-tree-id19649 . -1) (undo-tree-id19650 . -1) (undo-tree-id19651 . -1) (undo-tree-id19652 . -1) 32537 (t 25755 15875 817723 809000)) nil (25755 15903 93529 472000) 0 nil])
([nil nil ((32614 . 32616) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -32614) (nil fontified nil 32613 . 32614) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 32613 . 32614) (32613 . 32614) 32579) nil (25755 15911 612256 999000) 0 nil])
([nil nil ((#("(but the
bounding box itself generally extends well beyond the grid cell)" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32641) (undo-tree-id19793 . -72) (undo-tree-id19794 . 73) (undo-tree-id19795 . -1) (undo-tree-id19796 . 1) (undo-tree-id19797 . -73) (undo-tree-id19798 . -73)) nil (25755 15972 658486 686000) 0 nil] [nil nil ((#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32641) (undo-tree-id19653 . 1) (undo-tree-id19654 . -1) (undo-tree-id19655 . -1) (undo-tree-id19656 . -1)) ((32641 . 32642)) (25755 15911 612028 360000) 0 nil] [nil nil ((#("(but the
bounding box itself generally extends well beyond the grid cell)" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 8 9 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 9 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32641) (undo-tree-id19626 . -72) (undo-tree-id19627 . -8) (undo-tree-id19628 . 64) (undo-tree-id19629 . 65) (undo-tree-id19630 . -8) (undo-tree-id19631 . -11) (undo-tree-id19632 . -11) (undo-tree-id19633 . -11) (undo-tree-id19634 . -11) (undo-tree-id19635 . -11) (undo-tree-id19636 . -11) (undo-tree-id19637 . -11) (undo-tree-id19638 . -11) (undo-tree-id19639 . 73) (undo-tree-id19640 . -1) (undo-tree-id19641 . 1) (undo-tree-id19642 . -73) (undo-tree-id19643 . -73)) ((32641 . 32714)) (25755 15903 93786 723000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32640) (undo-tree-id19741 . -1) (undo-tree-id19742 . -1) (undo-tree-id19743 . -1) (undo-tree-id19744 . -1) (undo-tree-id19745 . -1) (undo-tree-id19746 . -1) (undo-tree-id19747 . -1) (undo-tree-id19748 . -1) (undo-tree-id19749 . -1) (undo-tree-id19750 . -1) (undo-tree-id19751 . -1) (undo-tree-id19752 . -1) (undo-tree-id19753 . -1) (undo-tree-id19754 . -1) (undo-tree-id19755 . -1) (undo-tree-id19756 . -1) (undo-tree-id19757 . -1) (undo-tree-id19758 . -1) (undo-tree-id19759 . -1) (undo-tree-id19760 . -1) (undo-tree-id19761 . -1) (undo-tree-id19762 . -1) (undo-tree-id19763 . -1) (undo-tree-id19764 . -1) (undo-tree-id19765 . -1) (undo-tree-id19766 . -1) (undo-tree-id19767 . -1) (undo-tree-id19768 . -1) (undo-tree-id19769 . -1) (undo-tree-id19770 . -1) (undo-tree-id19771 . -1) (undo-tree-id19772 . -1) (undo-tree-id19773 . -1) (undo-tree-id19774 . -1) (undo-tree-id19775 . -1) (undo-tree-id19776 . -1) (undo-tree-id19777 . -1) (undo-tree-id19778 . -1) (undo-tree-id19779 . -1) (undo-tree-id19780 . -1) (undo-tree-id19781 . -1) (undo-tree-id19782 . -1) (undo-tree-id19783 . -1) (undo-tree-id19784 . -1) (undo-tree-id19785 . -1) (undo-tree-id19786 . -1) (undo-tree-id19787 . -1) (undo-tree-id19788 . -1) (undo-tree-id19789 . -1) (undo-tree-id19790 . -1) (undo-tree-id19791 . -1) (undo-tree-id19792 . -1)) nil (25755 15972 658481 363000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32640) (undo-tree-id19573 . -1) (undo-tree-id19574 . -1) (undo-tree-id19575 . -1) (undo-tree-id19576 . -1) (undo-tree-id19577 . -1) (undo-tree-id19578 . -1) (undo-tree-id19579 . -1) (undo-tree-id19580 . -1) (undo-tree-id19581 . -1) (undo-tree-id19582 . -1) (undo-tree-id19583 . -1) (undo-tree-id19584 . -1) (undo-tree-id19585 . -1) (undo-tree-id19586 . -1) (undo-tree-id19587 . -1) (undo-tree-id19588 . -1) (undo-tree-id19589 . -1) (undo-tree-id19590 . -1) (undo-tree-id19591 . -1) (undo-tree-id19592 . -1) (undo-tree-id19593 . -1) (undo-tree-id19594 . -1) (undo-tree-id19595 . -1) (undo-tree-id19596 . -1) (undo-tree-id19597 . -1) (undo-tree-id19598 . -1) (undo-tree-id19599 . -1) (undo-tree-id19600 . -1) (undo-tree-id19601 . -1) (undo-tree-id19602 . -1) (undo-tree-id19603 . -1) (undo-tree-id19604 . -1) (undo-tree-id19605 . -1) (undo-tree-id19606 . -1) (undo-tree-id19607 . -1) (undo-tree-id19608 . -1) (undo-tree-id19609 . -1) (undo-tree-id19610 . -1) (undo-tree-id19611 . -1) (undo-tree-id19612 . -1) (undo-tree-id19613 . -1) (undo-tree-id19614 . -1) (undo-tree-id19615 . -1) (undo-tree-id19616 . -1) (undo-tree-id19617 . -1) (undo-tree-id19618 . -1) (undo-tree-id19619 . -1) (undo-tree-id19620 . -1) (undo-tree-id19621 . -1) (undo-tree-id19622 . -1) (undo-tree-id19623 . -1) (undo-tree-id19624 . -1) (undo-tree-id19625 . -1)) ((32640 . 32641)) (25755 15903 93504 388000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -32642) (undo-tree-id19729 . -2) (undo-tree-id19730 . -2) (undo-tree-id19731 . -2) (undo-tree-id19732 . -2) (undo-tree-id19733 . -2) (undo-tree-id19734 . -2) (undo-tree-id19735 . -2) (undo-tree-id19736 . -2) (undo-tree-id19737 . -2) (undo-tree-id19738 . -2) (undo-tree-id19739 . -2) (undo-tree-id19740 . -2) 32644 (32641 . 32644) 32616) nil (25755 15972 658448 81000) 0 nil])
nil
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32642) (undo-tree-id19712 . 1) (undo-tree-id19713 . -1) (undo-tree-id19714 . -1) (undo-tree-id19715 . -1) (undo-tree-id19716 . -1) (undo-tree-id19717 . -1) (undo-tree-id19718 . -1) (undo-tree-id19719 . -1) (undo-tree-id19720 . -1) (undo-tree-id19721 . -1) (undo-tree-id19722 . -1) (undo-tree-id19723 . -1) (undo-tree-id19724 . -1) (undo-tree-id19725 . -1) (undo-tree-id19726 . -1) (undo-tree-id19727 . -1) (undo-tree-id19728 . -1)) nil (25755 15972 658439 180000) 0 nil])
([nil nil ((32643 . 32645) (32642 . 32643)) nil (25755 15972 658426 992000) 0 nil])
([nil nil ((32709 . 32711)) nil (25755 15972 658426 25000) 0 nil])
([nil nil ((32772 . 32773) (32769 . 32772) 32768) nil (25755 15972 658425 254000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -32773) (undo-tree-id19710 . 1) (undo-tree-id19711 . -1)) nil (25755 15972 658424 95000) 0 nil])
([nil nil ((32773 . 32775)) nil (25755 15972 658422 290000) 0 nil])
([nil nil ((#("the neural net," 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32791) (undo-tree-id19697 . -14) (undo-tree-id19698 . -14) (undo-tree-id19699 . -14) (undo-tree-id19700 . -14) (undo-tree-id19701 . -4) (undo-tree-id19702 . -15) (undo-tree-id19703 . -14) (undo-tree-id19704 . -2) (undo-tree-id19705 . -9) (undo-tree-id19706 . -13) (undo-tree-id19707 . -14) (undo-tree-id19708 . -14) (undo-tree-id19709 . -15) 32805) nil (25755 15972 658420 876000) 0 nil])
([nil nil ((32790 . 32791)) nil (25755 15972 658410 50000) 0 nil])
([nil nil ((32826 . 32828)) nil (25755 15972 658408 794000) 0 nil])
([nil nil ((#(":" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -32892) (undo-tree-id19657 . -1) (undo-tree-id19658 . -1) (undo-tree-id19659 . -1) (undo-tree-id19660 . -1) (undo-tree-id19661 . -1) (undo-tree-id19662 . -1) (undo-tree-id19663 . -1) (undo-tree-id19664 . -1) (undo-tree-id19665 . -1) (undo-tree-id19666 . -1) (undo-tree-id19667 . -1) (undo-tree-id19668 . -1) (undo-tree-id19669 . -1) (undo-tree-id19670 . -1) (undo-tree-id19671 . -1) (undo-tree-id19672 . -1) (undo-tree-id19673 . -1) (undo-tree-id19674 . -1) (undo-tree-id19675 . -1) (undo-tree-id19676 . -1) (undo-tree-id19677 . -1) (undo-tree-id19678 . -1) (undo-tree-id19679 . -1) (undo-tree-id19680 . -1) (undo-tree-id19681 . -1) (undo-tree-id19682 . -1) (undo-tree-id19683 . -1) (undo-tree-id19684 . -1) (undo-tree-id19685 . -1) (#("_" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t invisible t)) . -32893) (undo-tree-id19686 . -1) (undo-tree-id19687 . -1) (undo-tree-id19688 . -1) (undo-tree-id19689 . -1) (undo-tree-id19690 . -1) (undo-tree-id19691 . -1) (undo-tree-id19692 . -1) (undo-tree-id19693 . -1) (undo-tree-id19694 . -1) (undo-tree-id19695 . -1) (undo-tree-id19696 . -1) 32894 (32890 . 32894)) nil (25755 15972 658403 506000) 0 nil])
([nil nil ((#("(see
Chapter 9)" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 5 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 32948) (undo-tree-id19860 . -14) (undo-tree-id19861 . -15) 32936 (t 25755 15972 685068 35000)) nil (25755 16002 767286 979000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 32947) (undo-tree-id19813 . -1) (undo-tree-id19814 . -1) (undo-tree-id19815 . -1) (undo-tree-id19816 . -1) (undo-tree-id19817 . -1) (undo-tree-id19818 . -1) (undo-tree-id19819 . -1) (undo-tree-id19820 . -1) (undo-tree-id19821 . -1) (undo-tree-id19822 . -1) (undo-tree-id19823 . -1) (undo-tree-id19824 . -1) (undo-tree-id19825 . -1) (undo-tree-id19826 . -1) (undo-tree-id19827 . -1) (undo-tree-id19828 . -1) (undo-tree-id19829 . -1) (undo-tree-id19830 . -1) (undo-tree-id19831 . -1) (undo-tree-id19832 . -1) (undo-tree-id19833 . -1) (undo-tree-id19834 . -1) (undo-tree-id19835 . -1) (undo-tree-id19836 . -1) (undo-tree-id19837 . -1) (undo-tree-id19838 . -1) (undo-tree-id19839 . -1) (undo-tree-id19840 . -1) (undo-tree-id19841 . -1) (undo-tree-id19842 . -1) (undo-tree-id19843 . -1) (undo-tree-id19844 . -1) (undo-tree-id19845 . -1) (undo-tree-id19846 . -1) (undo-tree-id19847 . -1) (undo-tree-id19848 . -1) (undo-tree-id19849 . -1) (undo-tree-id19850 . -1) (undo-tree-id19851 . -1) (undo-tree-id19852 . -1) (undo-tree-id19853 . -1) (undo-tree-id19854 . -1) (undo-tree-id19855 . -1) (undo-tree-id19856 . -1) (undo-tree-id19857 . -1) (undo-tree-id19858 . -1) (undo-tree-id19859 . -1)) nil (25755 16002 767283 235000) 0 nil])
([nil nil ((32966 . 32968) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -32966) (nil fontified nil 32965 . 32966) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 32965 . 32966) (32965 . 32966) 32962) nil (25755 16002 767250 295000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -33003) (undo-tree-id19801 . -2) (undo-tree-id19802 . -2) (undo-tree-id19803 . -2) (undo-tree-id19804 . -2) (undo-tree-id19805 . -2) (undo-tree-id19806 . -2) (undo-tree-id19807 . -2) (undo-tree-id19808 . -2) (undo-tree-id19809 . -2) (undo-tree-id19810 . -2) (undo-tree-id19811 . -2) (undo-tree-id19812 . -2) 33005 (33002 . 33005) 32968) nil (25755 16002 767247 828000) 0 nil])
([nil nil ((32773 . 32774)) nil (25755 16002 767236 808000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 32775) (undo-tree-id19799 . -1) (undo-tree-id19800 . -1)) nil (25755 16002 767232 404000) 0 nil])
([nil nil ((33002 . 33003) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33002) (undo-tree-id19862 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -33002) (undo-tree-id19863 . -1) (undo-tree-id19864 . -1) (undo-tree-id19865 . -1) (undo-tree-id19866 . -1) (undo-tree-id19867 . -1) (undo-tree-id19868 . -1) (undo-tree-id19869 . -1) (undo-tree-id19870 . -1) (undo-tree-id19871 . -1) (undo-tree-id19872 . -1) (undo-tree-id19873 . -1) (undo-tree-id19874 . -1) (undo-tree-id19875 . -1) (undo-tree-id19876 . -1) (undo-tree-id19877 . -1) (undo-tree-id19878 . -1) (undo-tree-id19879 . -1) (undo-tree-id19880 . -1) (undo-tree-id19881 . -1) 32968 (t 25755 16002 794767 240000)) nil (25755 16010 984792 682000) 0 nil])
([nil nil ((33010 . 33012)) nil (25755 16010 984763 534000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19903 . -1) (t 25755 16011 10168 807000)) nil (25755 16068 876582 587000) 0 nil])
([nil nil ((#("For example, if the training images contain many
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 49 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19900 . -48) (undo-tree-id19901 . 49) (undo-tree-id19902 . -49)) nil (25755 16068 876580 906000) 0 nil])
([nil nil ((#("pedestrians, then one of the anchor boxes will likely have the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19897 . -62) (undo-tree-id19898 . 63) (undo-tree-id19899 . -63)) nil (25755 16068 876578 20000) 0 nil])
([nil nil ((#("dimensions of a typical pedestrian. Then when the neural net
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19894 . -60) (undo-tree-id19895 . 61) (undo-tree-id19896 . -61)) nil (25755 16068 876575 495000) 0 nil])
([nil nil ((#("predicts five bounding boxes per grid cell, it actually predicts how
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19891 . -68) (undo-tree-id19892 . 69) (undo-tree-id19893 . -69)) nil (25755 16068 876572 916000) 0 nil])
([nil nil ((#("much to rescale each of the anchor boxes. For example, suppose
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19888 . -62) (undo-tree-id19889 . 63) (undo-tree-id19890 . -63)) nil (25755 16068 876569 513000) 0 nil])
([nil nil ((#("one anchor box is 100 pixels tall and 50 pixels wide, and the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 62 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19885 . -61) (undo-tree-id19886 . 62) (undo-tree-id19887 . -62)) nil (25755 16116 442847 336000) 0 nil])
([nil nil ((33555 . 33557)) nil (25755 16132 905003 65000) 0 nil] [nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -33085) (nil fontified nil 33084 . 33085) (nil wrap-prefix #("  " 0 2 (face org-indent)) 33084 . 33085) (33084 . 33085) 33011) ((#("
" 0 1 (fontified nil wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 33084) (undo-tree-id20063 . -1) (undo-tree-id20064 . -1) (undo-tree-id20065 . -1) (undo-tree-id20066 . -1) (undo-tree-id20067 . -1) (undo-tree-id20068 . -1) (undo-tree-id20069 . -1) (undo-tree-id20070 . -1) (undo-tree-id20071 . -1) (undo-tree-id20072 . -1) (undo-tree-id20073 . -1) (undo-tree-id20074 . -1) (undo-tree-id20075 . -1) (undo-tree-id20076 . -1) (undo-tree-id20077 . -1) (undo-tree-id20078 . -1) (undo-tree-id20079 . -1) (nil wrap-prefix #("  " 0 2 (face org-indent)) 33084 . 33085) (nil fontified t 33084 . 33085) (33085 . 33086)) (25755 16116 195049 522000) 0 nil] [nil nil ((#("network predicts, say, a vertical rescaling factor of 1.5 and ahorizontal rescaling of 0.9 (for one of the grid cells). This will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 126 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19882 . -129) (undo-tree-id19883 . 130) (undo-tree-id19884 . -130)) ((33011 . 33141)) (25755 16068 876557 873000) 0 nil])
([nil nil ((#("network predicts, say, a vertical rescaling factor of 1.5 and ahorizontal rescaling of 0.9 (for one of the grid cells). This will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 74 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 75 126 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 126 130 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20121 . -129) (undo-tree-id20122 . -129) (undo-tree-id20123 . 1) (undo-tree-id20124 . -73) (undo-tree-id20125 . -73) (undo-tree-id20126 . -73) (undo-tree-id20127 . -73) (undo-tree-id20128 . -73) (undo-tree-id20129 . -73) (undo-tree-id20130 . -73) (undo-tree-id20131 . -73) (undo-tree-id20132 . -73) (undo-tree-id20133 . -73) (undo-tree-id20134 . -73) (undo-tree-id20135 . -73) (undo-tree-id20136 . -73) (undo-tree-id20137 . -73) (undo-tree-id20138 . -73) (undo-tree-id20139 . -73) (undo-tree-id20140 . -73) (undo-tree-id20141 . -1) (undo-tree-id20142 . 68) (undo-tree-id20143 . -73) (undo-tree-id20144 . 56) (undo-tree-id20145 . -83) (undo-tree-id20146 . -74) (undo-tree-id20147 . -74) (undo-tree-id20148 . -74) (undo-tree-id20149 . -74) (undo-tree-id20150 . -74) (undo-tree-id20151 . -74) (undo-tree-id20152 . -74) (undo-tree-id20153 . -74) (undo-tree-id20154 . -74) (undo-tree-id20155 . -74) (undo-tree-id20156 . -74) (undo-tree-id20157 . -74) (undo-tree-id20158 . -74) (undo-tree-id20159 . -74) (undo-tree-id20160 . -74) (undo-tree-id20161 . -74) (undo-tree-id20162 . -74) (undo-tree-id20163 . -74) (undo-tree-id20164 . -74) (undo-tree-id20165 . -74) (undo-tree-id20166 . -74) (undo-tree-id20167 . -74) (undo-tree-id20168 . -74) (undo-tree-id20169 . -74) (undo-tree-id20170 . -74) (undo-tree-id20171 . -74) (undo-tree-id20172 . -74) (undo-tree-id20173 . -74) (undo-tree-id20174 . -74) (undo-tree-id20175 . -74) (undo-tree-id20176 . -74) (undo-tree-id20177 . -74) (undo-tree-id20178 . -74) (undo-tree-id20179 . -74) (undo-tree-id20180 . -74) (undo-tree-id20181 . -74) (undo-tree-id20182 . -74) (undo-tree-id20183 . -74) (undo-tree-id20184 . -74) (undo-tree-id20185 . -74) (undo-tree-id20186 . -74) (undo-tree-id20187 . -74) (undo-tree-id20188 . -74) (undo-tree-id20189 . -130) (undo-tree-id20190 . -130) (undo-tree-id20191 . -130) (undo-tree-id20192 . -130) (undo-tree-id20193 . -130) (undo-tree-id20194 . -130) (undo-tree-id20195 . -130) (undo-tree-id20196 . -130) (undo-tree-id20197 . -75) (undo-tree-id20198 . -75) (undo-tree-id20199 . -75) (undo-tree-id20200 . -75) (undo-tree-id20201 . -75) (undo-tree-id20202 . -75) (undo-tree-id20203 . -75) (undo-tree-id20204 . -75) (undo-tree-id20205 . -75) (undo-tree-id20206 . -75) (undo-tree-id20207 . -75) (undo-tree-id20208 . -75) (undo-tree-id20209 . -75) (undo-tree-id20210 . -75) (undo-tree-id20211 . -75) (undo-tree-id20212 . -75) (undo-tree-id20213 . -75) (undo-tree-id20214 . -75) (undo-tree-id20215 . -75) (undo-tree-id20216 . -75) (undo-tree-id20217 . -75) (undo-tree-id20218 . -75) (undo-tree-id20219 . -1) (undo-tree-id20220 . -1) (undo-tree-id20221 . -1) (undo-tree-id20222 . -1) (undo-tree-id20223 . -1) (undo-tree-id20224 . -1) (undo-tree-id20225 . -1) (undo-tree-id20226 . -1) (undo-tree-id20227 . -1) (undo-tree-id20228 . -1) (undo-tree-id20229 . -1) (undo-tree-id20230 . -1) (undo-tree-id20231 . -1) (undo-tree-id20232 . -1) (undo-tree-id20233 . -1) (undo-tree-id20234 . -1) (undo-tree-id20235 . -1) (undo-tree-id20236 . -1) (undo-tree-id20237 . -1) (undo-tree-id20238 . -1) (undo-tree-id20239 . -1) (undo-tree-id20240 . -1) (undo-tree-id20241 . -1) (undo-tree-id20242 . -1) (undo-tree-id20243 . -1) (undo-tree-id20244 . -1) (undo-tree-id20245 . -1) (undo-tree-id20246 . -1) (undo-tree-id20247 . -1) (undo-tree-id20248 . -1) (undo-tree-id20249 . -1) (undo-tree-id20250 . -1) (undo-tree-id20251 . -1) (undo-tree-id20252 . -1) (undo-tree-id20253 . -1) (undo-tree-id20254 . -1) (undo-tree-id20255 . -1) (undo-tree-id20256 . -1) (undo-tree-id20257 . -1) (undo-tree-id20258 . -130) 33012) nil (25755 16137 193655 267000) 0 nil])
([nil nil ((33011 . 33013)) ((#("

" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id19968 . -2) (undo-tree-id19969 . -2) (undo-tree-id19970 . -2) (undo-tree-id19971 . -2) (undo-tree-id19972 . -2) (undo-tree-id19973 . -2) (undo-tree-id19974 . -2) (undo-tree-id19975 . -2) (undo-tree-id19976 . -2) (undo-tree-id19977 . -2) (undo-tree-id19978 . -2) (undo-tree-id19979 . -2) (undo-tree-id19980 . -2) (undo-tree-id19981 . -2) (undo-tree-id19982 . -2) (undo-tree-id19983 . -2) (undo-tree-id19984 . -2) (undo-tree-id19985 . -2) (undo-tree-id19986 . -2) (undo-tree-id19987 . -2) (undo-tree-id19988 . -2) (undo-tree-id19989 . -2) (undo-tree-id19990 . -2) (undo-tree-id19991 . -2) (undo-tree-id19992 . -2) (undo-tree-id19993 . -2) (undo-tree-id19994 . -2) (undo-tree-id19995 . -2) (undo-tree-id19996 . -2) (undo-tree-id19997 . -2) (undo-tree-id19998 . -2) (undo-tree-id19999 . -2) (undo-tree-id20000 . -2) (undo-tree-id20001 . -2) (undo-tree-id20002 . -2) (undo-tree-id20003 . -2) (undo-tree-id20004 . -2) (undo-tree-id20005 . -2) (undo-tree-id20006 . -2) (undo-tree-id20007 . -2) (undo-tree-id20008 . -2) (undo-tree-id20009 . -2) (undo-tree-id20010 . -2) (undo-tree-id20011 . -2) (undo-tree-id20012 . -2) (undo-tree-id20013 . -2) (undo-tree-id20014 . -2) (undo-tree-id20015 . -2) (undo-tree-id20016 . -2) (undo-tree-id20017 . -2) (undo-tree-id20018 . -2) (undo-tree-id20019 . -2) (undo-tree-id20020 . -2) (undo-tree-id20021 . -2) (undo-tree-id20022 . -2) (undo-tree-id20023 . -2) (undo-tree-id20024 . -2) (undo-tree-id20025 . -2) (undo-tree-id20026 . -2) (undo-tree-id20027 . -2) (undo-tree-id20028 . -2) (undo-tree-id20029 . -2) (undo-tree-id20030 . -2) (undo-tree-id20031 . -2) (undo-tree-id20032 . -2) (undo-tree-id20033 . -2) (undo-tree-id20034 . -2) (undo-tree-id20035 . -2) (undo-tree-id20036 . -2) (undo-tree-id20037 . -2) (undo-tree-id20038 . -2) (undo-tree-id20039 . -2) (undo-tree-id20040 . -2) (undo-tree-id20041 . -2) (undo-tree-id20042 . -2) (undo-tree-id20043 . -2) (undo-tree-id20044 . -2) (undo-tree-id20045 . -2) (undo-tree-id20046 . -2) (undo-tree-id20047 . -2) (undo-tree-id20048 . -2) (undo-tree-id20049 . -2) (undo-tree-id20050 . -2) (undo-tree-id20051 . -2) (undo-tree-id20052 . -2) (undo-tree-id20053 . -2) (undo-tree-id20054 . -2) (undo-tree-id20055 . -2) (undo-tree-id20056 . -2) (undo-tree-id20057 . -2) (undo-tree-id20058 . -2) (undo-tree-id20059 . -2) (undo-tree-id20060 . -2) (undo-tree-id20061 . -2) (undo-tree-id20062 . -2)) (25755 16115 966929 31000) 0 nil])
nil
([nil nil ((#("result in a predicted bounding box of size 150 × 45 pixels" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 58 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20391 . -57) (undo-tree-id20392 . -1) (undo-tree-id20393 . -1) (undo-tree-id20394 . -1) (undo-tree-id20395 . -1) (undo-tree-id20396 . -1) (undo-tree-id20397 . -1) (undo-tree-id20398 . -1) (undo-tree-id20399 . -1) (undo-tree-id20400 . -1) (undo-tree-id20401 . -1) (undo-tree-id20402 . -1) (undo-tree-id20403 . -1) (undo-tree-id20404 . -1) (undo-tree-id20405 . -1) (undo-tree-id20406 . -1) (undo-tree-id20407 . -1) (undo-tree-id20408 . -1) (undo-tree-id20409 . -1) (undo-tree-id20410 . -1) (undo-tree-id20411 . -1) (undo-tree-id20412 . -1) (undo-tree-id20413 . -1) (undo-tree-id20414 . -1) (undo-tree-id20415 . -1) (undo-tree-id20416 . -1) (undo-tree-id20417 . -1) (undo-tree-id20418 . -1) (undo-tree-id20419 . -1) (undo-tree-id20420 . -1) (undo-tree-id20421 . -58)) nil (25755 16170 436147 57000) 0 nil] [nil nil ((#("result in a predicted bounding box of size 150 × 45 pixels. To be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20272 . -65) (undo-tree-id20273 . -1) (undo-tree-id20274 . -66) (undo-tree-id20275 . -66) (undo-tree-id20276 . -66) (undo-tree-id20277 . -66) (undo-tree-id20278 . -66) (undo-tree-id20279 . -66) (undo-tree-id20280 . -66) (undo-tree-id20281 . -66) (undo-tree-id20282 . -1) (undo-tree-id20283 . -1) (undo-tree-id20284 . -1) (undo-tree-id20285 . -1) (undo-tree-id20286 . -1) (undo-tree-id20287 . -1) (undo-tree-id20288 . -1) (undo-tree-id20289 . -1) (undo-tree-id20290 . -1) (undo-tree-id20291 . -1) (undo-tree-id20292 . -1) (undo-tree-id20293 . -1) (undo-tree-id20294 . -1) (undo-tree-id20295 . -1) (undo-tree-id20296 . -1) (undo-tree-id20297 . -1) (undo-tree-id20298 . -1) (undo-tree-id20299 . -1) (undo-tree-id20300 . -1) (undo-tree-id20301 . -1) (undo-tree-id20302 . -66) 33012) ((33011 . 33077)) (25755 16137 193310 812000) 0 nil] [nil nil ((#("esult in a predicted bounding box of size 150 × 45 pixels. To be
m" 0 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil) 65 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33012) (undo-tree-id20259 . -65) (undo-tree-id20260 . -66) (undo-tree-id20261 . -65) (undo-tree-id20262 . -65) (undo-tree-id20263 . -65) (undo-tree-id20264 . -65) (undo-tree-id20265 . -65) (undo-tree-id20266 . -65) (undo-tree-id20267 . -65) (undo-tree-id20268 . -65) (undo-tree-id20269 . -66) (undo-tree-id20270 . -66) (undo-tree-id20271 . -66)) ((33012 . 33078)) (25755 16133 363327 760000) 0 nil] [nil nil ((#("result in a predicted bounding box of size 150 × 45 pixels. To be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20080 . -65) (undo-tree-id20081 . 66) (undo-tree-id20082 . 66) (undo-tree-id20083 . -1) (undo-tree-id20084 . -66) (undo-tree-id20085 . -66) (undo-tree-id20086 . -66) (undo-tree-id20087 . -66) (undo-tree-id20088 . -66) (undo-tree-id20089 . -66) (undo-tree-id20090 . -66) (undo-tree-id20091 . -66) (undo-tree-id20092 . -1) (undo-tree-id20093 . -1) (undo-tree-id20094 . -1) (undo-tree-id20095 . -1) (undo-tree-id20096 . -1) (undo-tree-id20097 . -1) (undo-tree-id20098 . -1) (undo-tree-id20099 . -1) (undo-tree-id20100 . -1) (undo-tree-id20101 . -1) (undo-tree-id20102 . -1) (undo-tree-id20103 . -1) (undo-tree-id20104 . -1) (undo-tree-id20105 . -1) (undo-tree-id20106 . -1) (undo-tree-id20107 . -1) (undo-tree-id20108 . -1) (undo-tree-id20109 . -1) (undo-tree-id20110 . -1) (undo-tree-id20111 . -1) (undo-tree-id20112 . -1) (undo-tree-id20113 . -1) (undo-tree-id20114 . -1) (undo-tree-id20115 . -1) (undo-tree-id20116 . -1) (undo-tree-id20117 . -1) (undo-tree-id20118 . -1) (undo-tree-id20119 . -1) (undo-tree-id20120 . -66) 33012) ((33011 . 33077)) (25755 16132 904466 286000) 0 nil])
([nil nil ((#("network predicts, say, a vertical rescaling factor of 1.5 and ahorizontal
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 73 74 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 33013) (undo-tree-id19946 . -73) (undo-tree-id19947 . 74) (undo-tree-id19948 . 12) (undo-tree-id19949 . -73) (undo-tree-id19950 . -74) (undo-tree-id19951 . -74) (undo-tree-id19952 . -74) (undo-tree-id19953 . -74) (undo-tree-id19954 . -74) (undo-tree-id19955 . -74) (undo-tree-id19956 . -74) (undo-tree-id19957 . -74) (undo-tree-id19958 . -74) (undo-tree-id19959 . -74) (undo-tree-id19960 . -74) (undo-tree-id19961 . -74) (undo-tree-id19962 . -74) (undo-tree-id19963 . -74) (undo-tree-id19964 . -74) (undo-tree-id19965 . -74) (undo-tree-id19966 . -74) (undo-tree-id19967 . -74)) ((33013 . 33087)) (25755 16115 699813 335000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20389 . -1) (undo-tree-id20390 . -1)) nil (25755 16170 436124 711000) 0 nil])
nil
nil
nil
([nil nil ((#("rescaling of 0.9 (for one of the grid cells). This will
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 52 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19939 . -55) (undo-tree-id19940 . 56) (undo-tree-id19941 . -55) (undo-tree-id19942 . 1) (undo-tree-id19943 . 56) (undo-tree-id19944 . -9) (undo-tree-id19945 . -56)) ((33013 . 33069)) (25755 16115 459160 751000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 33011) (undo-tree-id20387 . -1) (undo-tree-id20388 . -1)) nil (25755 16170 436122 791000) 0 nil])
([nil nil ((#("result in a predicted bounding box of size 150 × 45 pixels. To be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19934 . -65) (undo-tree-id19935 . 66) (undo-tree-id19936 . 66) (undo-tree-id19937 . 66) (undo-tree-id19938 . -66)) ((33013 . 33079)) (25755 16115 140321 797000) 0 nil])
([nil nil ((#("To be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20377 . -5) (undo-tree-id20378 . -6) (undo-tree-id20379 . -6) (undo-tree-id20380 . -6) (undo-tree-id20381 . -6) (undo-tree-id20382 . -6) (undo-tree-id20383 . -6) (undo-tree-id20384 . -6) (undo-tree-id20385 . -6) (undo-tree-id20386 . -6)) nil (25755 16170 436120 8000) 0 nil])
([nil nil ((#("more precise, for each grid cell and each anchor box, the network
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19929 . -65) (undo-tree-id19930 . 66) (undo-tree-id19931 . 66) (undo-tree-id19932 . 66) (undo-tree-id19933 . -66)) ((33013 . 33079)) (25755 16114 864841 708000) 0 nil])
([nil nil ((#("more precise" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33011) (undo-tree-id20374 . -11) (undo-tree-id20375 . -1) (undo-tree-id20376 . -12)) nil (25755 16170 436113 299000) 0 nil])
([nil nil ((#("predicts the log of the vertical and horizontal rescaling factors.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19924 . -66) (undo-tree-id19925 . 67) (undo-tree-id19926 . 67) (undo-tree-id19927 . 67) (undo-tree-id19928 . -67)) ((33013 . 33080)) (25755 16114 615965 296000) 0 nil])
([nil nil ((33011 . 33013)) nil (25755 16170 436110 871000) 0 nil])
([nil nil ((#("Having these priors makes the network more likely to predict
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19919 . -60) (undo-tree-id19920 . 61) (undo-tree-id19921 . 61) (undo-tree-id19922 . 61) (undo-tree-id19923 . -61)) ((33013 . 33074)) (25755 16114 327220 771000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33013) (undo-tree-id20371 . 1) (undo-tree-id20372 . -1) (undo-tree-id20373 . -1)) nil (25755 16170 436109 995000) 0 nil])
([nil nil ((#("bounding boxes of the appropriate dimensions, and it also speeds
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19914 . -64) (undo-tree-id19915 . 65) (undo-tree-id19916 . 65) (undo-tree-id19917 . 65) (undo-tree-id19918 . -65)) ((33013 . 33078)) (25755 16114 73795 324000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) fontified t)) . 33013) (undo-tree-id20368 . 1) (undo-tree-id20369 . -1) (undo-tree-id20370 . -1)) nil (25755 16170 436106 44000) 0 nil])
([nil nil ((#("up training because it will more quickly learn what reasonable
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19909 . -62) (undo-tree-id19910 . 63) (undo-tree-id19911 . 63) (undo-tree-id19912 . 63) (undo-tree-id19913 . -63)) ((33013 . 33076)) (25755 16113 753785 333000) 0 nil])
([nil nil ((33320 . 33321) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33320) (undo-tree-id20363 . -1) (33257 . 33258) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33257) (undo-tree-id20364 . -1) (33192 . 33193) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33192) (undo-tree-id20365 . -1) (33131 . 33132) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33131) (undo-tree-id20366 . -1) (33064 . 33065) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33064) (undo-tree-id20367 . -1) 33013) nil (25755 16170 436102 470000) 0 nil])
([nil nil ((#("bounding boxes look like.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33013) (undo-tree-id19904 . -25) (undo-tree-id19905 . 26) (undo-tree-id19906 . 26) (undo-tree-id19907 . 26) (undo-tree-id19908 . -26)) ((33013 . 33039) (t 25755 16102 644278 363000)) (25755 16102 567934 49000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -33347) (undo-tree-id20351 . -2) (undo-tree-id20352 . -2) (undo-tree-id20353 . -2) (undo-tree-id20354 . -2) (undo-tree-id20355 . -2) (undo-tree-id20356 . -2) (undo-tree-id20357 . -2) (undo-tree-id20358 . -2) (undo-tree-id20359 . -2) (undo-tree-id20360 . -2) (undo-tree-id20361 . -2) (undo-tree-id20362 . -2) 33349 (33346 . 33349) 33320) nil (25755 16170 436095 761000) 0 nil])
nil
([nil nil ((33316 . 33318) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -33316) (undo-tree-id20303 . -1) (undo-tree-id20304 . -1) (undo-tree-id20305 . -1) (undo-tree-id20306 . -1) (undo-tree-id20307 . -1) (undo-tree-id20308 . -1) (undo-tree-id20309 . -1) (undo-tree-id20310 . -1) (undo-tree-id20311 . -1) (undo-tree-id20312 . -1) (undo-tree-id20313 . -1) (undo-tree-id20314 . -1) (undo-tree-id20315 . -1) (undo-tree-id20316 . -1) (undo-tree-id20317 . -1) (undo-tree-id20318 . -1) (undo-tree-id20319 . -1) (undo-tree-id20320 . -1) (undo-tree-id20321 . -1) (undo-tree-id20322 . -1) (undo-tree-id20323 . -1) (undo-tree-id20324 . -1) (undo-tree-id20325 . -1) (undo-tree-id20326 . -1) (undo-tree-id20327 . -1) (undo-tree-id20328 . -1) (undo-tree-id20329 . -1) (undo-tree-id20330 . -1) (undo-tree-id20331 . -1) (undo-tree-id20332 . -1) (undo-tree-id20333 . -1) (undo-tree-id20334 . -1) (undo-tree-id20335 . -1) (undo-tree-id20336 . -1) (undo-tree-id20337 . -1) (undo-tree-id20338 . -1) (undo-tree-id20339 . -1) (undo-tree-id20340 . -1) (undo-tree-id20341 . -1) (undo-tree-id20342 . -1) (undo-tree-id20343 . -1) (undo-tree-id20344 . -1) (undo-tree-id20345 . -1) (undo-tree-id20346 . -1) (undo-tree-id20347 . -1) (undo-tree-id20348 . -1) (undo-tree-id20349 . -1) (undo-tree-id20350 . -1) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 33315 . 33316) (33315 . 33316) (33243 . 33245) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -33243) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 33242 . 33243) (33242 . 33243) (33164 . 33166) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . -33164) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 33163 . 33164) (33163 . 33164) (33089 . 33091) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -33089) (nil fontified nil 33088 . 33089) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 33088 . 33089) (33088 . 33089) 33310) nil (25755 16170 436082 199000) 0 nil])
([nil nil ((33136 . 33138) (33134 . 33136)) nil (25755 16170 436031 70000) 0 nil])
([nil nil ((#("  Having these priors makes the
" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 3 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 31 32 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 33136) (undo-tree-id20551 . -31) (undo-tree-id20552 . 30) (undo-tree-id20553 . -1) (undo-tree-id20554 . -9) (undo-tree-id20555 . -1) (undo-tree-id20556 . -1) (undo-tree-id20557 . -1) (undo-tree-id20558 . -1) (undo-tree-id20559 . -1) (undo-tree-id20560 . -1) (undo-tree-id20561 . -1) (undo-tree-id20562 . -1) (undo-tree-id20563 . -1) (undo-tree-id20564 . -1) (undo-tree-id20565 . -1) (undo-tree-id20566 . -2) (undo-tree-id20567 . -2) (undo-tree-id20568 . -2) (undo-tree-id20569 . -2) (undo-tree-id20570 . -2) (undo-tree-id20571 . -2) (undo-tree-id20572 . -2) (undo-tree-id20573 . -2) (undo-tree-id20574 . -2) (undo-tree-id20575 . -2) (undo-tree-id20576 . -2) (undo-tree-id20577 . -2) (undo-tree-id20578 . -2) (undo-tree-id20579 . -2) (undo-tree-id20580 . -2) (undo-tree-id20581 . -2) (undo-tree-id20582 . -9) (undo-tree-id20583 . -9) (undo-tree-id20584 . -9) (undo-tree-id20585 . -9) (undo-tree-id20586 . -9) (undo-tree-id20587 . -9) (undo-tree-id20588 . -9) (undo-tree-id20589 . -9) (undo-tree-id20590 . -9) (undo-tree-id20591 . -9) (undo-tree-id20592 . -9) (undo-tree-id20593 . -32) 33145 (t 25755 16170 460750 796000)) nil (25755 16181 678888 452000) 0 nil])
([nil nil ((#("  network more likely to predict bounding boxes of the appropriate dimensions,
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 32 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 32 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 33 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 34 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 78 79 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 33136) (undo-tree-id20527 . -78) (undo-tree-id20528 . 79) (undo-tree-id20529 . -9) (undo-tree-id20530 . -9) (undo-tree-id20531 . -9) (undo-tree-id20532 . -9) (undo-tree-id20533 . -9) (undo-tree-id20534 . -9) (undo-tree-id20535 . -9) (undo-tree-id20536 . -9) (undo-tree-id20537 . -9) (undo-tree-id20538 . -9) (undo-tree-id20539 . -9) (undo-tree-id20540 . -9) (undo-tree-id20541 . -9) (undo-tree-id20542 . -9) (undo-tree-id20543 . -9) (undo-tree-id20544 . -9) (undo-tree-id20545 . -9) (undo-tree-id20546 . -9) (undo-tree-id20547 . -9) (undo-tree-id20548 . -9) (undo-tree-id20549 . -9) (undo-tree-id20550 . -79) 33145) nil (25755 16181 678857 941000) 0 nil])
([nil nil ((#("  and it also speeds up training because it will more quickly learn what
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 20 21 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 22 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 72 73 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 33136) (undo-tree-id20503 . -72) (undo-tree-id20504 . 73) (undo-tree-id20505 . -9) (undo-tree-id20506 . -9) (undo-tree-id20507 . -9) (undo-tree-id20508 . -9) (undo-tree-id20509 . -9) (undo-tree-id20510 . -9) (undo-tree-id20511 . -9) (undo-tree-id20512 . -9) (undo-tree-id20513 . -9) (undo-tree-id20514 . -9) (undo-tree-id20515 . -9) (undo-tree-id20516 . -9) (undo-tree-id20517 . -9) (undo-tree-id20518 . -9) (undo-tree-id20519 . -9) (undo-tree-id20520 . -9) (undo-tree-id20521 . -9) (undo-tree-id20522 . -9) (undo-tree-id20523 . -9) (undo-tree-id20524 . -9) (undo-tree-id20525 . -9) (undo-tree-id20526 . -73) 33145) nil (25755 16181 678759 444000) 0 nil])
([nil nil ((#("  reasonable bounding boxes look like.
" 0 1 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 2 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 14 38 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 38 39 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 33136) (undo-tree-id20424 . -38) (undo-tree-id20425 . 39) (undo-tree-id20426 . -39) (undo-tree-id20427 . -39) (undo-tree-id20428 . -39) (undo-tree-id20429 . -39) (undo-tree-id20430 . -39) (undo-tree-id20431 . -39) (undo-tree-id20432 . -39) (undo-tree-id20433 . -39) (undo-tree-id20434 . -39) (undo-tree-id20435 . -39) (undo-tree-id20436 . -2) (undo-tree-id20437 . -2) (undo-tree-id20438 . -2) (undo-tree-id20439 . -2) (undo-tree-id20440 . -2) (undo-tree-id20441 . -2) (undo-tree-id20442 . -2) (undo-tree-id20443 . -2) (undo-tree-id20444 . -2) (undo-tree-id20445 . -2) (undo-tree-id20446 . -2) (undo-tree-id20447 . -2) (undo-tree-id20448 . -2) (undo-tree-id20449 . -2) (undo-tree-id20450 . -2) (undo-tree-id20451 . -2) (undo-tree-id20452 . -2) (undo-tree-id20453 . -2) (undo-tree-id20454 . -2) (undo-tree-id20455 . -2) (undo-tree-id20456 . -2) (undo-tree-id20457 . -2) (undo-tree-id20458 . -2) (undo-tree-id20459 . -2) (undo-tree-id20460 . -2) (undo-tree-id20461 . -2) (undo-tree-id20462 . -2) (undo-tree-id20463 . -2) (undo-tree-id20464 . -2) (undo-tree-id20465 . -2) (undo-tree-id20466 . -2) (undo-tree-id20467 . -2) (undo-tree-id20468 . -2) (undo-tree-id20469 . -2) (undo-tree-id20470 . -2) (undo-tree-id20471 . -2) (undo-tree-id20472 . -2) (undo-tree-id20473 . -2) (undo-tree-id20474 . -2) (undo-tree-id20475 . -2) (undo-tree-id20476 . -2) (undo-tree-id20477 . -2) (undo-tree-id20478 . -2) (undo-tree-id20479 . -2) (undo-tree-id20480 . -2) (undo-tree-id20481 . -9) (undo-tree-id20482 . -9) (undo-tree-id20483 . -9) (undo-tree-id20484 . -9) (undo-tree-id20485 . -9) (undo-tree-id20486 . -9) (undo-tree-id20487 . -9) (undo-tree-id20488 . -9) (undo-tree-id20489 . -9) (undo-tree-id20490 . -9) (undo-tree-id20491 . -9) (undo-tree-id20492 . -9) (undo-tree-id20493 . -9) (undo-tree-id20494 . -9) (undo-tree-id20495 . -9) (undo-tree-id20496 . -9) (undo-tree-id20497 . -9) (undo-tree-id20498 . -9) (undo-tree-id20499 . -9) (undo-tree-id20500 . -9) (undo-tree-id20501 . -9) (undo-tree-id20502 . -39) 33145) nil (25755 16181 678738 478000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33136) (undo-tree-id20422 . 1) (undo-tree-id20423 . -1)) nil (25755 16181 678533 824000) 0 nil])
([nil nil ((33587 . 33588) (t 25755 16181 708226 861000) 33538) nil (25755 16217 513386 513000) 0 nil])
([nil nil ((33534 . 33536) (33465 . 33467) (33397 . 33399) (33328 . 33330) (33267 . 33269) (33205 . 33207)) ((#("  " 0 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33205) (undo-tree-id20615 . -1) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 33267) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33268) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 33328) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33329) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 33397) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33398) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 33465) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33466) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 33534) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33535) (t 25755 16201 239355 778000)) (25755 16218 934952 448000) 0 nil])
([nil nil ((#("(from 330 × 330 to 608 × 608 pixels)" 0 36 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33285) (undo-tree-id20616 . -35) (undo-tree-id20617 . -7) (undo-tree-id20618 . -7) (undo-tree-id20619 . -7) (undo-tree-id20620 . -7) (undo-tree-id20621 . -7) (undo-tree-id20622 . -7) (undo-tree-id20623 . -7) (undo-tree-id20624 . -7) (undo-tree-id20625 . -7) (undo-tree-id20626 . -7) (undo-tree-id20627 . -7) (undo-tree-id20628 . -7) (undo-tree-id20629 . -7) (undo-tree-id20630 . -7) (undo-tree-id20631 . -7) (undo-tree-id20632 . -7) (undo-tree-id20633 . -7) (undo-tree-id20634 . -7) (undo-tree-id20635 . -7) (undo-tree-id20636 . -7) (undo-tree-id20637 . -7) (undo-tree-id20638 . -7) (undo-tree-id20639 . -7) (undo-tree-id20640 . -7) (undo-tree-id20641 . -7) (undo-tree-id20642 . -7) (undo-tree-id20643 . -7) (undo-tree-id20644 . -6) (t 25755 16201 239355 778000)) ((33285 . 33321)) (25755 16219 382127 901000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33284) (undo-tree-id20820 . -1) (undo-tree-id20821 . -1) (undo-tree-id20822 . -1) (undo-tree-id20823 . -1) (undo-tree-id20824 . -1) (undo-tree-id20825 . -1) (undo-tree-id20826 . -1) (undo-tree-id20827 . -1) (undo-tree-id20828 . -1) (undo-tree-id20829 . -1) (undo-tree-id20830 . -1) (undo-tree-id20831 . -1) (undo-tree-id20832 . -1) (undo-tree-id20833 . -1) (undo-tree-id20834 . -1) (undo-tree-id20835 . -1) (undo-tree-id20836 . -1) (undo-tree-id20837 . -1) (undo-tree-id20838 . -1) (undo-tree-id20839 . -1) (undo-tree-id20840 . -1) (undo-tree-id20841 . -1) (undo-tree-id20842 . -1) (undo-tree-id20843 . -1) (undo-tree-id20844 . -1) (undo-tree-id20845 . -1) (undo-tree-id20846 . -1) (undo-tree-id20847 . -1) (undo-tree-id20848 . -1) (undo-tree-id20849 . -1) (undo-tree-id20850 . -1) (undo-tree-id20851 . -1) (undo-tree-id20852 . -1) (undo-tree-id20853 . -1) (undo-tree-id20854 . -1) (undo-tree-id20855 . -1) (undo-tree-id20856 . -1) (undo-tree-id20857 . -1) (undo-tree-id20858 . -1) (undo-tree-id20859 . -1) (undo-tree-id20860 . -1)) nil (25755 16260 998906 526000) 0 nil])
([nil nil ((#("This" 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33286) (undo-tree-id20817 . -3) (undo-tree-id20818 . -4) (undo-tree-id20819 . -4)) nil (25755 16260 998880 629000) 0 nil])
([nil nil ((33284 . 33285) (#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33284) (undo-tree-id20805 . -1) (undo-tree-id20806 . -1) (undo-tree-id20807 . -1) (undo-tree-id20808 . -1) (undo-tree-id20809 . -1) (undo-tree-id20810 . -1) (undo-tree-id20811 . -1) (undo-tree-id20812 . -1) (undo-tree-id20813 . -1) (undo-tree-id20814 . -1) (undo-tree-id20815 . -1) (undo-tree-id20816 . -1)) nil (25755 16260 998877 814000) 0 nil])
([nil nil ((33284 . 33285) (#("    " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 3 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 33284) (undo-tree-id20743 . -4) (undo-tree-id20744 . 3) (undo-tree-id20745 . -4) (undo-tree-id20746 . -2) (undo-tree-id20747 . -2) (undo-tree-id20748 . -2) (undo-tree-id20749 . -2) (undo-tree-id20750 . -2) (undo-tree-id20751 . -2) (undo-tree-id20752 . -2) (undo-tree-id20753 . -2) (undo-tree-id20754 . -2) (undo-tree-id20755 . -2) (undo-tree-id20756 . -2) (undo-tree-id20757 . -2) (undo-tree-id20758 . -2) (undo-tree-id20759 . -2) (undo-tree-id20760 . -2) (undo-tree-id20761 . -2) (undo-tree-id20762 . -2) (undo-tree-id20763 . -2) (undo-tree-id20764 . -2) (undo-tree-id20765 . -2) (undo-tree-id20766 . -2) (undo-tree-id20767 . -4) (undo-tree-id20768 . -4) (undo-tree-id20769 . -4) (undo-tree-id20770 . -4) (undo-tree-id20771 . -4) (undo-tree-id20772 . -4) (undo-tree-id20773 . -4) (undo-tree-id20774 . -4) (undo-tree-id20775 . -4) (undo-tree-id20776 . -4) (undo-tree-id20777 . -4) (undo-tree-id20778 . -4) (undo-tree-id20779 . -4) (undo-tree-id20780 . -4) (undo-tree-id20781 . -4) (undo-tree-id20782 . -4) (undo-tree-id20783 . -4) (undo-tree-id20784 . -4) (undo-tree-id20785 . -4) (undo-tree-id20786 . -4) (undo-tree-id20787 . -4) (undo-tree-id20788 . -4) (undo-tree-id20789 . -4) (undo-tree-id20790 . -4) (undo-tree-id20791 . -4) (undo-tree-id20792 . -4) (undo-tree-id20793 . -1) (undo-tree-id20794 . -1) (undo-tree-id20795 . -1) (undo-tree-id20796 . -1) (undo-tree-id20797 . -1) (undo-tree-id20798 . -1) (undo-tree-id20799 . -1) (undo-tree-id20800 . -1) (undo-tree-id20801 . -1) (undo-tree-id20802 . -2) (undo-tree-id20803 . -2) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . -33286) (undo-tree-id20804 . -1) 33284) nil (25755 16260 998866 331000) 0 nil])
([nil nil ((33290 . 33293) (#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33290) (undo-tree-id20725 . -1) (undo-tree-id20726 . -1) (undo-tree-id20727 . -1) (undo-tree-id20728 . -1) (undo-tree-id20729 . -1) (undo-tree-id20730 . -1) (undo-tree-id20731 . -1) (undo-tree-id20732 . -1) (undo-tree-id20733 . -1) (undo-tree-id20734 . -1) (undo-tree-id20735 . -1) (undo-tree-id20736 . -1) (undo-tree-id20737 . -1) (undo-tree-id20738 . -1) (undo-tree-id20739 . -1) (undo-tree-id20740 . -1) (undo-tree-id20741 . -1) (undo-tree-id20742 . -1)) nil (25755 16260 998805 18000) 0 nil])
([nil nil ((33346 . 33348) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -33346) (nil fontified nil 33345 . 33346) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 33345 . 33346) (33345 . 33346) 33333) nil (25755 16260 998791 386000) 0 nil])
([nil nil ((#("  Moreover, it makes it possible to use YOLOv3 at different scales:
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33356) (undo-tree-id20703 . -67) (undo-tree-id20704 . -2) (undo-tree-id20705 . 68) (undo-tree-id20706 . -2) (undo-tree-id20707 . -2) (undo-tree-id20708 . -2) (undo-tree-id20709 . -2) (undo-tree-id20710 . -2) (undo-tree-id20711 . -2) (undo-tree-id20712 . -2) (undo-tree-id20713 . -2) (undo-tree-id20714 . -2) (undo-tree-id20715 . -2) (undo-tree-id20716 . -2) (undo-tree-id20717 . -2) (undo-tree-id20718 . -2) (undo-tree-id20719 . -2) (undo-tree-id20720 . -2) (undo-tree-id20721 . -2) (undo-tree-id20722 . -2) (undo-tree-id20723 . -2) (undo-tree-id20724 . -68) 33358) nil (25755 16260 998788 902000) 0 nil])
([nil nil ((#("  the smaller scale will be less accurate but faster than the larger
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t)) . 33356) (undo-tree-id20679 . -68) (undo-tree-id20680 . -2) (undo-tree-id20681 . 69) (undo-tree-id20682 . -2) (undo-tree-id20683 . -2) (undo-tree-id20684 . -2) (undo-tree-id20685 . -2) (undo-tree-id20686 . -2) (undo-tree-id20687 . -2) (undo-tree-id20688 . -2) (undo-tree-id20689 . -2) (undo-tree-id20690 . -2) (undo-tree-id20691 . -2) (undo-tree-id20692 . -2) (undo-tree-id20693 . -2) (undo-tree-id20694 . -2) (undo-tree-id20695 . -2) (undo-tree-id20696 . -2) (undo-tree-id20697 . -2) (undo-tree-id20698 . -2) (undo-tree-id20699 . -2) (undo-tree-id20700 . -2) (undo-tree-id20701 . -2) (undo-tree-id20702 . -69) 33358) nil (25755 16260 998772 132000) 0 nil])
([nil nil ((#("  scale, so you can choose the right trade-off for your use case.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 2 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 16 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 33356) (undo-tree-id20645 . -65) (undo-tree-id20646 . -2) (undo-tree-id20647 . -1) (undo-tree-id20648 . -1) (undo-tree-id20649 . -1) (undo-tree-id20650 . -1) (undo-tree-id20651 . -1) (undo-tree-id20652 . -1) (undo-tree-id20653 . -1) (undo-tree-id20654 . -1) (undo-tree-id20655 . -1) (undo-tree-id20656 . -1) (undo-tree-id20657 . 66) (undo-tree-id20658 . -2) (undo-tree-id20659 . -2) (undo-tree-id20660 . -2) (undo-tree-id20661 . -2) (undo-tree-id20662 . -2) (undo-tree-id20663 . -2) (undo-tree-id20664 . -2) (undo-tree-id20665 . -2) (undo-tree-id20666 . -2) (undo-tree-id20667 . -2) (undo-tree-id20668 . -2) (undo-tree-id20669 . -2) (undo-tree-id20670 . -2) (undo-tree-id20671 . -2) (undo-tree-id20672 . -2) (undo-tree-id20673 . -2) (undo-tree-id20674 . -2) (undo-tree-id20675 . -2) (undo-tree-id20676 . -2) (undo-tree-id20677 . -2) (undo-tree-id20678 . -66) 33358) nil (25755 16260 998573 328000) 0 nil])
([nil nil ((#("There are a few more innovations you might be interested in, such as the
" 0 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21694 . -72) (undo-tree-id21695 . -73) (t 25755 16261 72975 677000)) nil (25755 16373 912150 462000) 0 nil])
([nil nil ((#("use of skip connections to recover some of the spatial resolution that is
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21692 . -73) (undo-tree-id21693 . -74)) nil (25755 16373 912147 131000) 0 nil])
([nil nil ((#("lost in the CNN (we will discuss this shortly, when we look at semantic
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 30 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 30 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21690 . -71) (undo-tree-id21691 . -72)) nil (25755 16373 912144 849000) 0 nil])
([nil nil ((#("segmentation). In the 2016 paper, the authors introduce the YOLO9000
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21688 . -68) (undo-tree-id21689 . -69)) nil (25755 16373 912142 594000) 0 nil])
([nil nil ((#("model that uses hierarchical classification: the model predicts a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21686 . -65) (undo-tree-id21687 . -66)) nil (25755 16373 912140 278000) 0 nil])
([nil nil ((#("probability for each node in a visual hierarchy called WordTree. This
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21684 . -69) (undo-tree-id21685 . -70)) nil (25755 16373 912137 903000) 0 nil])
([nil nil ((#("makes it possible for the network to predict with high confidence that an
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21646 . -73) (undo-tree-id21647 . -74) (undo-tree-id21648 . -74) (undo-tree-id21649 . -74) (undo-tree-id21650 . -74) (undo-tree-id21651 . -74) (undo-tree-id21652 . -74) (undo-tree-id21653 . -74) (undo-tree-id21654 . -74) (undo-tree-id21655 . -74) (undo-tree-id21656 . -74) (undo-tree-id21657 . -74) (undo-tree-id21658 . -74) (undo-tree-id21659 . -74) (undo-tree-id21660 . -74) (undo-tree-id21661 . -74) (undo-tree-id21662 . -74) (undo-tree-id21663 . -74) (undo-tree-id21664 . -74) (undo-tree-id21665 . -74) (undo-tree-id21666 . -74) (undo-tree-id21667 . -74) (undo-tree-id21668 . -74) (undo-tree-id21669 . -74) (undo-tree-id21670 . -74) (undo-tree-id21671 . -74) (undo-tree-id21672 . -74) (undo-tree-id21673 . -74) (undo-tree-id21674 . -74) (undo-tree-id21675 . -74) (undo-tree-id21676 . -74) (undo-tree-id21677 . -74) (undo-tree-id21678 . -74) (undo-tree-id21679 . -74) (undo-tree-id21680 . -74) (undo-tree-id21681 . -74) (undo-tree-id21682 . -74) (undo-tree-id21683 . -74)) nil (25755 16373 912134 769000) 0 nil])
([nil nil ((#("image represents, say, a dog, even though it is unsure what specific type of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21374 . -76) (undo-tree-id21375 . -77) (undo-tree-id21376 . -77) (undo-tree-id21377 . -77) (undo-tree-id21378 . -77) (undo-tree-id21379 . -77) (undo-tree-id21380 . -77) (undo-tree-id21381 . -77) (undo-tree-id21382 . -77) (undo-tree-id21383 . -77) (undo-tree-id21384 . -77) (undo-tree-id21385 . -77) (undo-tree-id21386 . -77) (undo-tree-id21387 . -77) (undo-tree-id21388 . -77) (undo-tree-id21389 . -77) (undo-tree-id21390 . -77) (undo-tree-id21391 . -77) (undo-tree-id21392 . -77) (undo-tree-id21393 . -77) (undo-tree-id21394 . -77) (undo-tree-id21395 . -77) (undo-tree-id21396 . -77) (undo-tree-id21397 . -77) (undo-tree-id21398 . -77) (undo-tree-id21399 . -77) (undo-tree-id21400 . -77) (undo-tree-id21401 . -77) (undo-tree-id21402 . -77) (undo-tree-id21403 . -77) (undo-tree-id21404 . -77) (undo-tree-id21405 . -77) (undo-tree-id21406 . -77) (undo-tree-id21407 . -77) (undo-tree-id21408 . -77) (undo-tree-id21409 . -77) (undo-tree-id21410 . -77) (undo-tree-id21411 . -77) (undo-tree-id21412 . -77) (undo-tree-id21413 . -77) (undo-tree-id21414 . -77) (undo-tree-id21415 . -77) (undo-tree-id21416 . -77) (undo-tree-id21417 . -77) (undo-tree-id21418 . -77) (undo-tree-id21419 . -77) (undo-tree-id21420 . -77) (undo-tree-id21421 . -77) (undo-tree-id21422 . -77) (undo-tree-id21423 . -77) (undo-tree-id21424 . -77) (undo-tree-id21425 . -77) (undo-tree-id21426 . -77) (undo-tree-id21427 . -77) (undo-tree-id21428 . -77) (undo-tree-id21429 . -77) (undo-tree-id21430 . -77) (undo-tree-id21431 . -77) (undo-tree-id21432 . -77) (undo-tree-id21433 . -77) (undo-tree-id21434 . -77) (undo-tree-id21435 . -77) (undo-tree-id21436 . -77) (undo-tree-id21437 . -77) (undo-tree-id21438 . -77) (undo-tree-id21439 . -77) (undo-tree-id21440 . -77) (undo-tree-id21441 . -77) (undo-tree-id21442 . -77) (undo-tree-id21443 . -77) (undo-tree-id21444 . -77) (undo-tree-id21445 . -77) (undo-tree-id21446 . -77) (undo-tree-id21447 . -77) (undo-tree-id21448 . -77) (undo-tree-id21449 . -77) (undo-tree-id21450 . -77) (undo-tree-id21451 . -77) (undo-tree-id21452 . -77) (undo-tree-id21453 . -77) (undo-tree-id21454 . -77) (undo-tree-id21455 . -77) (undo-tree-id21456 . -77) (undo-tree-id21457 . -77) (undo-tree-id21458 . -77) (undo-tree-id21459 . -77) (undo-tree-id21460 . -77) (undo-tree-id21461 . -77) (undo-tree-id21462 . -77) (undo-tree-id21463 . -77) (undo-tree-id21464 . -77) (undo-tree-id21465 . -77) (undo-tree-id21466 . -77) (undo-tree-id21467 . -77) (undo-tree-id21468 . -77) (undo-tree-id21469 . -77) (undo-tree-id21470 . -77) (undo-tree-id21471 . -77) (undo-tree-id21472 . -77) (undo-tree-id21473 . -77) (undo-tree-id21474 . -77) (undo-tree-id21475 . -77) (undo-tree-id21476 . -77) (undo-tree-id21477 . -77) (undo-tree-id21478 . -77) (undo-tree-id21479 . -77) (undo-tree-id21480 . -77) (undo-tree-id21481 . -77) (undo-tree-id21482 . -77) (undo-tree-id21483 . -77) (undo-tree-id21484 . -77) (undo-tree-id21485 . -77) (undo-tree-id21486 . -77) (undo-tree-id21487 . -77) (undo-tree-id21488 . -77) (undo-tree-id21489 . -77) (undo-tree-id21490 . -77) (undo-tree-id21491 . -77) (undo-tree-id21492 . -77) (undo-tree-id21493 . -77) (undo-tree-id21494 . -77) (undo-tree-id21495 . -77) (undo-tree-id21496 . -77) (undo-tree-id21497 . -77) (undo-tree-id21498 . -77) (undo-tree-id21499 . -77) (undo-tree-id21500 . -77) (undo-tree-id21501 . -77) (undo-tree-id21502 . -77) (undo-tree-id21503 . -77) (undo-tree-id21504 . -77) (undo-tree-id21505 . -77) (undo-tree-id21506 . -77) (undo-tree-id21507 . -77) (undo-tree-id21508 . -77) (undo-tree-id21509 . -77) (undo-tree-id21510 . -77) (undo-tree-id21511 . -77) (undo-tree-id21512 . -77) (undo-tree-id21513 . -77) (undo-tree-id21514 . -77) (undo-tree-id21515 . -77) (undo-tree-id21516 . -77) (undo-tree-id21517 . -77) (undo-tree-id21518 . -77) (undo-tree-id21519 . -77) (undo-tree-id21520 . -77) (undo-tree-id21521 . -77) (undo-tree-id21522 . -77) (undo-tree-id21523 . -77) (undo-tree-id21524 . -77) (undo-tree-id21525 . -77) (undo-tree-id21526 . -77) (undo-tree-id21527 . -77) (undo-tree-id21528 . -77) (undo-tree-id21529 . -77) (undo-tree-id21530 . -77) (undo-tree-id21531 . -77) (undo-tree-id21532 . -77) (undo-tree-id21533 . -77) (undo-tree-id21534 . -77) (undo-tree-id21535 . -77) (undo-tree-id21536 . -77) (undo-tree-id21537 . -77) (undo-tree-id21538 . -77) (undo-tree-id21539 . -77) (undo-tree-id21540 . -77) (undo-tree-id21541 . -77) (undo-tree-id21542 . -77) (undo-tree-id21543 . -77) (undo-tree-id21544 . -77) (undo-tree-id21545 . -77) (undo-tree-id21546 . -77) (undo-tree-id21547 . -77) (undo-tree-id21548 . -77) (undo-tree-id21549 . -77) (undo-tree-id21550 . -77) (undo-tree-id21551 . -77) (undo-tree-id21552 . -77) (undo-tree-id21553 . -77) (undo-tree-id21554 . -77) (undo-tree-id21555 . -77) (undo-tree-id21556 . -77) (undo-tree-id21557 . -77) (undo-tree-id21558 . -77) (undo-tree-id21559 . -77) (undo-tree-id21560 . -77) (undo-tree-id21561 . -77) (undo-tree-id21562 . -77) (undo-tree-id21563 . -77) (undo-tree-id21564 . -77) (undo-tree-id21565 . -77) (undo-tree-id21566 . -77) (undo-tree-id21567 . -77) (undo-tree-id21568 . -77) (undo-tree-id21569 . -77) (undo-tree-id21570 . -77) (undo-tree-id21571 . -77) (undo-tree-id21572 . -77) (undo-tree-id21573 . -77) (undo-tree-id21574 . -77) (undo-tree-id21575 . -77) (undo-tree-id21576 . -77) (undo-tree-id21577 . -77) (undo-tree-id21578 . -77) (undo-tree-id21579 . -77) (undo-tree-id21580 . -77) (undo-tree-id21581 . -77) (undo-tree-id21582 . -77) (undo-tree-id21583 . -77) (undo-tree-id21584 . -77) (undo-tree-id21585 . -77) (undo-tree-id21586 . -77) (undo-tree-id21587 . -77) (undo-tree-id21588 . -77) (undo-tree-id21589 . -77) (undo-tree-id21590 . -77) (undo-tree-id21591 . -77) (undo-tree-id21592 . -77) (undo-tree-id21593 . -77) (undo-tree-id21594 . -77) (undo-tree-id21595 . -77) (undo-tree-id21596 . -77) (undo-tree-id21597 . -77) (undo-tree-id21598 . -77) (undo-tree-id21599 . -77) (undo-tree-id21600 . -77) (undo-tree-id21601 . -77) (undo-tree-id21602 . -77) (undo-tree-id21603 . -77) (undo-tree-id21604 . -77) (undo-tree-id21605 . -77) (undo-tree-id21606 . -77) (undo-tree-id21607 . -77) (undo-tree-id21608 . -77) (undo-tree-id21609 . -77) (undo-tree-id21610 . -77) (undo-tree-id21611 . -77) (undo-tree-id21612 . -77) (undo-tree-id21613 . -77) (undo-tree-id21614 . -77) (undo-tree-id21615 . -77) (undo-tree-id21616 . -77) (undo-tree-id21617 . -77) (undo-tree-id21618 . -77) (undo-tree-id21619 . -77) (undo-tree-id21620 . -77) (undo-tree-id21621 . -77) (undo-tree-id21622 . -77) (undo-tree-id21623 . -77) (undo-tree-id21624 . -77) (undo-tree-id21625 . -77) (undo-tree-id21626 . -77) (undo-tree-id21627 . -77) (undo-tree-id21628 . -77) (undo-tree-id21629 . -77) (undo-tree-id21630 . -77) (undo-tree-id21631 . -77) (undo-tree-id21632 . -77) (undo-tree-id21633 . -77) (undo-tree-id21634 . -77) (undo-tree-id21635 . -77) (undo-tree-id21636 . -77) (undo-tree-id21637 . -77) (undo-tree-id21638 . -77) (undo-tree-id21639 . -77) (undo-tree-id21640 . -77) (undo-tree-id21641 . -77) (undo-tree-id21642 . -77) (undo-tree-id21643 . -77) (undo-tree-id21644 . -77) (undo-tree-id21645 . -77)) nil (25755 16373 912100 333000) 0 nil])
([nil nil ((#("dog. I encourage you to go ahead and read all three papers: they are quite
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21372 . -74) (undo-tree-id21373 . -75)) nil (25755 16373 911626 996000) 0 nil])
([nil nil ((#("pleasant to read, and they provide excellent examples of how Deep
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21370 . -65) (undo-tree-id21371 . -66)) nil (25755 16373 911624 813000) 0 nil])
([nil nil ((#("Learning systems can be incrementally improved.MEAN AVERAGE PRECISION (MAP)
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 3 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21368 . -75) (undo-tree-id21369 . -76)) nil (25755 16373 911622 256000) 0 nil])
([nil nil ((#("A very common metric used in object detection tasks is the mean
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21366 . -63) (undo-tree-id21367 . -64)) nil (25755 16373 911620 207000) 0 nil])
([nil nil ((#("Average Precision (mAP). “Mean Average” sounds a bit redundant,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21364 . -63) (undo-tree-id21365 . -64)) nil (25755 16373 911618 116000) 0 nil])
([nil nil ((#("doesn’t it? To understand this metric, let’s go back to two
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21360 . -59) (undo-tree-id21361 . 60) (undo-tree-id21362 . -5) (undo-tree-id21363 . -60)) nil (25755 16373 911615 828000) 0 nil])
([nil nil ((#("classification metrics we discussed in Chapter 3: precision and recall.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21358 . -71) (undo-tree-id21359 . -72)) nil (25755 16373 911612 362000) 0 nil])
([nil nil ((#("Remember the trade-off: the higher the recall, the lower the precision.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21356 . -71) (undo-tree-id21357 . -72)) nil (25755 16373 911609 316000) 0 nil])
([nil nil ((#("You can visualize this in a precision/recall curve (see Figure 3-5). To
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21354 . -71) (undo-tree-id21355 . -72)) nil (25755 16373 911606 856000) 0 nil])
([nil nil ((#("summarize this curve into a single number, we could compute its area
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21352 . -68) (undo-tree-id21353 . -69)) nil (25755 16373 911604 719000) 0 nil])
([nil nil ((#("under the curve (AUC). But note that the precision/recall curve may
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 27 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21350 . -67) (undo-tree-id21351 . -68)) nil (25755 16373 911602 652000) 0 nil])
([nil nil ((#("contain a few sections where precision actually goes up when recall
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21348 . -67) (undo-tree-id21349 . -68)) nil (25755 16373 911600 703000) 0 nil])
([nil nil ((#("increases, especially at low recall values (you can see this at the top
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21346 . -71) (undo-tree-id21347 . -72)) nil (25755 16373 911598 504000) 0 nil])
([nil nil ((#("left of Figure 3-5). This is one of the motivations for the mAP metric.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21344 . -71) (undo-tree-id21345 . -72)) nil (25755 16373 911596 170000) 0 nil])
([nil nil ((#("Suppose the classifier has 90% precision at 10% recall, but 96%
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21342 . -63) (undo-tree-id21343 . -64)) nil (25755 16373 911594 224000) 0 nil])
([nil nil ((#("precision at 20% recall. There’s really no trade-off here: it simply
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21340 . -68) (undo-tree-id21341 . -69)) nil (25755 16373 911592 26000) 0 nil])
([nil nil ((#("makes more sense to use the classifier at 20% recall rather than at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21338 . -67) (undo-tree-id21339 . -68)) nil (25755 16373 911589 915000) 0 nil])
([nil nil ((#("10% recall, as you will get both higher recall and higher precision. So
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21336 . -71) (undo-tree-id21337 . -72)) nil (25755 16373 911587 740000) 0 nil])
([nil nil ((#("instead of looking at the precision at 10% recall, we should really be
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20877 . -70) (undo-tree-id20878 . -71) (undo-tree-id20879 . -71) (undo-tree-id20880 . -71) (undo-tree-id20881 . -71) (undo-tree-id20882 . -71) (undo-tree-id20883 . -71) (undo-tree-id20884 . -71) (undo-tree-id20885 . -71) (undo-tree-id20886 . -71) (undo-tree-id20887 . -71) (undo-tree-id20888 . -71) (undo-tree-id20889 . -71) (undo-tree-id20890 . -71) (undo-tree-id20891 . -71) (undo-tree-id20892 . -71) (undo-tree-id20893 . -71) (undo-tree-id20894 . -71) (undo-tree-id20895 . -71) (undo-tree-id20896 . -71) (undo-tree-id20897 . -71) (undo-tree-id20898 . -71) (undo-tree-id20899 . -71) (undo-tree-id20900 . -71) (undo-tree-id20901 . -71) (undo-tree-id20902 . -71) (undo-tree-id20903 . -71) (undo-tree-id20904 . -71) (undo-tree-id20905 . -71) (undo-tree-id20906 . -71) (undo-tree-id20907 . -71) (undo-tree-id20908 . -71) (undo-tree-id20909 . -71) (undo-tree-id20910 . -71) (undo-tree-id20911 . -71) (undo-tree-id20912 . -71) (undo-tree-id20913 . -71) (undo-tree-id20914 . -71) (undo-tree-id20915 . -71) (undo-tree-id20916 . -71) (undo-tree-id20917 . -71) (undo-tree-id20918 . -71) (undo-tree-id20919 . -71) (undo-tree-id20920 . -71) (undo-tree-id20921 . -71) (undo-tree-id20922 . -71) (undo-tree-id20923 . -71) (undo-tree-id20924 . -71) (undo-tree-id20925 . -71) (undo-tree-id20926 . -71) (undo-tree-id20927 . -71) (undo-tree-id20928 . -71) (undo-tree-id20929 . -71) (undo-tree-id20930 . -71) (undo-tree-id20931 . -71) (undo-tree-id20932 . -71) (undo-tree-id20933 . -71) (undo-tree-id20934 . -71) (undo-tree-id20935 . -71) (undo-tree-id20936 . -71) (undo-tree-id20937 . -71) (undo-tree-id20938 . -71) (undo-tree-id20939 . -71) (undo-tree-id20940 . -71) (undo-tree-id20941 . -71) (undo-tree-id20942 . -71) (undo-tree-id20943 . -71) (undo-tree-id20944 . -71) (undo-tree-id20945 . -71) (undo-tree-id20946 . -71) (undo-tree-id20947 . -71) (undo-tree-id20948 . -71) (undo-tree-id20949 . -71) (undo-tree-id20950 . -71) (undo-tree-id20951 . -71) (undo-tree-id20952 . -71) (undo-tree-id20953 . -71) (undo-tree-id20954 . -71) (undo-tree-id20955 . -71) (undo-tree-id20956 . -71) (undo-tree-id20957 . -71) (undo-tree-id20958 . -71) (undo-tree-id20959 . -71) (undo-tree-id20960 . -71) (undo-tree-id20961 . -71) (undo-tree-id20962 . -71) (undo-tree-id20963 . -71) (undo-tree-id20964 . -71) (undo-tree-id20965 . -71) (undo-tree-id20966 . -71) (undo-tree-id20967 . -71) (undo-tree-id20968 . -71) (undo-tree-id20969 . -71) (undo-tree-id20970 . -71) (undo-tree-id20971 . -71) (undo-tree-id20972 . -71) (undo-tree-id20973 . -71) (undo-tree-id20974 . -71) (undo-tree-id20975 . -71) (undo-tree-id20976 . -71) (undo-tree-id20977 . -71) (undo-tree-id20978 . -71) (undo-tree-id20979 . -71) (undo-tree-id20980 . -71) (undo-tree-id20981 . -71) (undo-tree-id20982 . -71) (undo-tree-id20983 . -71) (undo-tree-id20984 . -71) (undo-tree-id20985 . -71) (undo-tree-id20986 . -71) (undo-tree-id20987 . -71) (undo-tree-id20988 . -71) (undo-tree-id20989 . -71) (undo-tree-id20990 . -71) (undo-tree-id20991 . -71) (undo-tree-id20992 . -71) (undo-tree-id20993 . -71) (undo-tree-id20994 . -71) (undo-tree-id20995 . -71) (undo-tree-id20996 . -71) (undo-tree-id20997 . -71) (undo-tree-id20998 . -71) (undo-tree-id20999 . -71) (undo-tree-id21000 . -71) (undo-tree-id21001 . -71) (undo-tree-id21002 . -71) (undo-tree-id21003 . -71) (undo-tree-id21004 . -71) (undo-tree-id21005 . -71) (undo-tree-id21006 . -71) (undo-tree-id21007 . -71) (undo-tree-id21008 . -71) (undo-tree-id21009 . -71) (undo-tree-id21010 . -71) (undo-tree-id21011 . -71) (undo-tree-id21012 . -71) (undo-tree-id21013 . -71) (undo-tree-id21014 . -71) (undo-tree-id21015 . -71) (undo-tree-id21016 . -71) (undo-tree-id21017 . -71) (undo-tree-id21018 . -71) (undo-tree-id21019 . -71) (undo-tree-id21020 . -71) (undo-tree-id21021 . -71) (undo-tree-id21022 . -71) (undo-tree-id21023 . -71) (undo-tree-id21024 . -71) (undo-tree-id21025 . -71) (undo-tree-id21026 . -71) (undo-tree-id21027 . -71) (undo-tree-id21028 . -71) (undo-tree-id21029 . -71) (undo-tree-id21030 . -71) (undo-tree-id21031 . -71) (undo-tree-id21032 . -71) (undo-tree-id21033 . -71) (undo-tree-id21034 . -71) (undo-tree-id21035 . -71) (undo-tree-id21036 . -71) (undo-tree-id21037 . -71) (undo-tree-id21038 . -71) (undo-tree-id21039 . -71) (undo-tree-id21040 . -71) (undo-tree-id21041 . -71) (undo-tree-id21042 . -71) (undo-tree-id21043 . -71) (undo-tree-id21044 . -71) (undo-tree-id21045 . -71) (undo-tree-id21046 . -71) (undo-tree-id21047 . -71) (undo-tree-id21048 . -71) (undo-tree-id21049 . -71) (undo-tree-id21050 . -71) (undo-tree-id21051 . -71) (undo-tree-id21052 . -71) (undo-tree-id21053 . -71) (undo-tree-id21054 . -71) (undo-tree-id21055 . -71) (undo-tree-id21056 . -71) (undo-tree-id21057 . -71) (undo-tree-id21058 . -71) (undo-tree-id21059 . -71) (undo-tree-id21060 . -71) (undo-tree-id21061 . -71) (undo-tree-id21062 . -71) (undo-tree-id21063 . -71) (undo-tree-id21064 . -71) (undo-tree-id21065 . -71) (undo-tree-id21066 . -71) (undo-tree-id21067 . -71) (undo-tree-id21068 . -71) (undo-tree-id21069 . -71) (undo-tree-id21070 . -71) (undo-tree-id21071 . -71) (undo-tree-id21072 . -71) (undo-tree-id21073 . -71) (undo-tree-id21074 . -71) (undo-tree-id21075 . -71) (undo-tree-id21076 . -71) (undo-tree-id21077 . -71) (undo-tree-id21078 . -71) (undo-tree-id21079 . -71) (undo-tree-id21080 . -71) (undo-tree-id21081 . -71) (undo-tree-id21082 . -71) (undo-tree-id21083 . -71) (undo-tree-id21084 . -71) (undo-tree-id21085 . -71) (undo-tree-id21086 . -71) (undo-tree-id21087 . -71) (undo-tree-id21088 . -71) (undo-tree-id21089 . -71) (undo-tree-id21090 . -71) (undo-tree-id21091 . -71) (undo-tree-id21092 . -71) (undo-tree-id21093 . -71) (undo-tree-id21094 . -71) (undo-tree-id21095 . -71) (undo-tree-id21096 . -71) (undo-tree-id21097 . -71) (undo-tree-id21098 . -71) (undo-tree-id21099 . -71) (undo-tree-id21100 . -71) (undo-tree-id21101 . -71) (undo-tree-id21102 . -71) (undo-tree-id21103 . -71) (undo-tree-id21104 . -71) (undo-tree-id21105 . -71) (undo-tree-id21106 . -71) (undo-tree-id21107 . -71) (undo-tree-id21108 . -71) (undo-tree-id21109 . -71) (undo-tree-id21110 . -71) (undo-tree-id21111 . -71) (undo-tree-id21112 . -71) (undo-tree-id21113 . -71) (undo-tree-id21114 . -71) (undo-tree-id21115 . -71) (undo-tree-id21116 . -71) (undo-tree-id21117 . -71) (undo-tree-id21118 . -71) (undo-tree-id21119 . -71) (undo-tree-id21120 . -71) (undo-tree-id21121 . -71) (undo-tree-id21122 . -71) (undo-tree-id21123 . -71) (undo-tree-id21124 . -71) (undo-tree-id21125 . -71) (undo-tree-id21126 . -71) (undo-tree-id21127 . -71) (undo-tree-id21128 . -71) (undo-tree-id21129 . -71) (undo-tree-id21130 . -71) (undo-tree-id21131 . -71) (undo-tree-id21132 . -71) (undo-tree-id21133 . -71) (undo-tree-id21134 . -71) (undo-tree-id21135 . -71) (undo-tree-id21136 . -71) (undo-tree-id21137 . -71) (undo-tree-id21138 . -71) (undo-tree-id21139 . -71) (undo-tree-id21140 . -71) (undo-tree-id21141 . -71) (undo-tree-id21142 . -71) (undo-tree-id21143 . -71) (undo-tree-id21144 . -71) (undo-tree-id21145 . -71) (undo-tree-id21146 . -71) (undo-tree-id21147 . -71) (undo-tree-id21148 . -71) (undo-tree-id21149 . -71) (undo-tree-id21150 . -71) (undo-tree-id21151 . -71) (undo-tree-id21152 . -71) (undo-tree-id21153 . -71) (undo-tree-id21154 . -71) (undo-tree-id21155 . -71) (undo-tree-id21156 . -71) (undo-tree-id21157 . -71) (undo-tree-id21158 . -71) (undo-tree-id21159 . -71) (undo-tree-id21160 . -71) (undo-tree-id21161 . -71) (undo-tree-id21162 . -71) (undo-tree-id21163 . -71) (undo-tree-id21164 . -71) (undo-tree-id21165 . -71) (undo-tree-id21166 . -71) (undo-tree-id21167 . -71) (undo-tree-id21168 . -71) (undo-tree-id21169 . -71) (undo-tree-id21170 . -71) (undo-tree-id21171 . -71) (undo-tree-id21172 . -71) (undo-tree-id21173 . -71) (undo-tree-id21174 . -71) (undo-tree-id21175 . -71) (undo-tree-id21176 . -71) (undo-tree-id21177 . -71) (undo-tree-id21178 . -71) (undo-tree-id21179 . -71) (undo-tree-id21180 . -71) (undo-tree-id21181 . -71) (undo-tree-id21182 . -71) (undo-tree-id21183 . -71) (undo-tree-id21184 . -71) (undo-tree-id21185 . -71) (undo-tree-id21186 . -71) (undo-tree-id21187 . -71) (undo-tree-id21188 . -71) (undo-tree-id21189 . -71) (undo-tree-id21190 . -71) (undo-tree-id21191 . -71) (undo-tree-id21192 . -71) (undo-tree-id21193 . -71) (undo-tree-id21194 . -71) (undo-tree-id21195 . -71) (undo-tree-id21196 . -71) (undo-tree-id21197 . -71) (undo-tree-id21198 . -71) (undo-tree-id21199 . -71) (undo-tree-id21200 . -71) (undo-tree-id21201 . -71) (undo-tree-id21202 . -71) (undo-tree-id21203 . -71) (undo-tree-id21204 . -71) (undo-tree-id21205 . -71) (undo-tree-id21206 . -71) (undo-tree-id21207 . -71) (undo-tree-id21208 . -71) (undo-tree-id21209 . -71) (undo-tree-id21210 . -71) (undo-tree-id21211 . -71) (undo-tree-id21212 . -71) (undo-tree-id21213 . -71) (undo-tree-id21214 . -71) (undo-tree-id21215 . -71) (undo-tree-id21216 . -71) (undo-tree-id21217 . -71) (undo-tree-id21218 . -71) (undo-tree-id21219 . -71) (undo-tree-id21220 . -71) (undo-tree-id21221 . -71) (undo-tree-id21222 . -71) (undo-tree-id21223 . -71) (undo-tree-id21224 . -71) (undo-tree-id21225 . -71) (undo-tree-id21226 . -71) (undo-tree-id21227 . -71) (undo-tree-id21228 . -71) (undo-tree-id21229 . -71) (undo-tree-id21230 . -71) (undo-tree-id21231 . -71) (undo-tree-id21232 . -71) (undo-tree-id21233 . -71) (undo-tree-id21234 . -71) (undo-tree-id21235 . -71) (undo-tree-id21236 . -71) (undo-tree-id21237 . -71) (undo-tree-id21238 . -71) (undo-tree-id21239 . -71) (undo-tree-id21240 . -71) (undo-tree-id21241 . -71) (undo-tree-id21242 . -71) (undo-tree-id21243 . -71) (undo-tree-id21244 . -71) (undo-tree-id21245 . -71) (undo-tree-id21246 . -71) (undo-tree-id21247 . -71) (undo-tree-id21248 . -71) (undo-tree-id21249 . -71) (undo-tree-id21250 . -71) (undo-tree-id21251 . -71) (undo-tree-id21252 . -71) (undo-tree-id21253 . -71) (undo-tree-id21254 . -71) (undo-tree-id21255 . -71) (undo-tree-id21256 . -71) (undo-tree-id21257 . -71) (undo-tree-id21258 . -71) (undo-tree-id21259 . -71) (undo-tree-id21260 . -71) (undo-tree-id21261 . -71) (undo-tree-id21262 . -71) (undo-tree-id21263 . -71) (undo-tree-id21264 . -71) (undo-tree-id21265 . -71) (undo-tree-id21266 . -71) (undo-tree-id21267 . -71) (undo-tree-id21268 . -71) (undo-tree-id21269 . -71) (undo-tree-id21270 . -71) (undo-tree-id21271 . -71) (undo-tree-id21272 . -71) (undo-tree-id21273 . -71) (undo-tree-id21274 . -71) (undo-tree-id21275 . -71) (undo-tree-id21276 . -71) (undo-tree-id21277 . -71) (undo-tree-id21278 . -71) (undo-tree-id21279 . -71) (undo-tree-id21280 . -71) (undo-tree-id21281 . -71) (undo-tree-id21282 . -71) (undo-tree-id21283 . -71) (undo-tree-id21284 . -71) (undo-tree-id21285 . -71) (undo-tree-id21286 . -71) (undo-tree-id21287 . -71) (undo-tree-id21288 . -71) (undo-tree-id21289 . -71) (undo-tree-id21290 . -71) (undo-tree-id21291 . -71) (undo-tree-id21292 . -71) (undo-tree-id21293 . -71) (undo-tree-id21294 . -71) (undo-tree-id21295 . -71) (undo-tree-id21296 . -71) (undo-tree-id21297 . -71) (undo-tree-id21298 . -71) (undo-tree-id21299 . -71) (undo-tree-id21300 . -71) (undo-tree-id21301 . -71) (undo-tree-id21302 . -71) (undo-tree-id21303 . -71) (undo-tree-id21304 . -71) (undo-tree-id21305 . -71) (undo-tree-id21306 . -71) (undo-tree-id21307 . -71) (undo-tree-id21308 . -71) (undo-tree-id21309 . -71) (undo-tree-id21310 . -71) (undo-tree-id21311 . -71) (undo-tree-id21312 . -71) (undo-tree-id21313 . -71) (undo-tree-id21314 . -71) (undo-tree-id21315 . -71) (undo-tree-id21316 . -71) (undo-tree-id21317 . -71) (undo-tree-id21318 . -71) (undo-tree-id21319 . -71) (undo-tree-id21320 . -71) (undo-tree-id21321 . -71) (undo-tree-id21322 . -71) (undo-tree-id21323 . -71) (undo-tree-id21324 . -71) (undo-tree-id21325 . -71) (undo-tree-id21326 . -71) (undo-tree-id21327 . -71) (undo-tree-id21328 . -71) (undo-tree-id21329 . -71) (undo-tree-id21330 . -71) (undo-tree-id21331 . -71) (undo-tree-id21332 . -71) (undo-tree-id21333 . -71) (undo-tree-id21334 . -71) (undo-tree-id21335 . -71)) nil (25755 16373 911566 51000) 0 nil])
([nil nil ((#("looking at the maximum precision that the classifier can offer with at
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20875 . -70) (undo-tree-id20876 . -71)) nil (25755 16373 910508 69000) 0 nil])
([nil nil ((#("least 10% recall. It would be 96%, not 90%. Therefore, one way to get
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20873 . -69) (undo-tree-id20874 . -70)) nil (25755 16373 910505 665000) 0 nil])
([nil nil ((#("a fair idea of the model’s performance is to compute the maximum
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20871 . -64) (undo-tree-id20872 . -65)) nil (25755 16373 910503 243000) 0 nil])
([nil nil ((#("precision you can get with at least 0% recall, then 10% recall, 20%,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20869 . -68) (undo-tree-id20870 . -69)) nil (25755 16373 910500 725000) 0 nil])
([nil nil ((#("and so on up to 100%, and then calculate the mean of these maximum
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20867 . -66) (undo-tree-id20868 . -67)) nil (25755 16377 61498 61000) 0 nil])
([nil nil ((#("precisions. This is called the Average Precision (AP) metric. Now
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21724 . -65) (undo-tree-id21725 . 66) (undo-tree-id21726 . -10) (undo-tree-id21727 . -66)) nil (25755 16392 861981 845000) 0 nil] [nil nil ((#("precisions. This is called the Average Precision (AP) metric. Now
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20863 . -65) (undo-tree-id20864 . 66) (undo-tree-id20865 . -10) (undo-tree-id20866 . -66)) ((33357 . 33423)) (25755 16373 912439 711000) 0 nil])
([nil nil ((#("when there are more than two classes, we can compute the AP for each
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21722 . -68) (undo-tree-id21723 . -69)) nil (25755 16392 861978 145000) 0 nil])
([nil nil ((#("when there are more than two classes, we can compute the AP for each
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id20861 . -68) (undo-tree-id20862 . -69)) ((33357 . 33426)) (25755 16373 910487 21000) 0 nil])
([nil nil ((#("class, and then compute the mean AP (mAP). That’s it!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 23 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 23 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21720 . -53) (undo-tree-id21721 . -54)) nil (25755 16392 861975 947000) 0 nil])
nil
([nil nil ((#("In an object detection system, there is an additional level of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 63 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21718 . -62) (undo-tree-id21719 . -63)) nil (25755 16392 861973 897000) 0 nil])
([nil nil ((#("complexity: what if the system detected the correct class, but at the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21716 . -69) (undo-tree-id21717 . -70)) nil (25755 16392 861971 685000) 0 nil])
([nil nil ((#("wrong location (i.e., the bounding box is completely off)? Surely we
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21714 . -68) (undo-tree-id21715 . -69)) nil (25755 16392 861969 433000) 0 nil])
([nil nil ((#("should not count this as a positive prediction. One approach is to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21712 . -66) (undo-tree-id21713 . -67)) nil (25755 16392 861967 135000) 0 nil])
([nil nil ((#("define an IOU threshold: for example, we may consider that a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21710 . -60) (undo-tree-id21711 . -61)) nil (25755 16392 861964 873000) 0 nil])
([nil nil ((#("prediction is correct only if the IOU is greater than, say, 0.5, and the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21708 . -72) (undo-tree-id21709 . -73)) nil (25755 16392 861962 635000) 0 nil])
([nil nil ((#("predicted class is correct. The corresponding mAP is generally notedmAP@0.5 (or mAP@50%, or sometimes just AP50). In some
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 97 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 97 122 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21706 . -121) (undo-tree-id21707 . -122)) nil (25755 16392 861960 545000) 0 nil])
([nil nil ((#("competitions (such as the PASCAL VOC challenge), this is what is
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21704 . -64) (undo-tree-id21705 . -65)) nil (25755 16392 861958 194000) 0 nil])
([nil nil ((#("done. In others (such as the COCO competition), the mAP is computed
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 68 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21702 . -67) (undo-tree-id21703 . -68)) nil (25755 16392 861954 668000) 0 nil])
([nil nil ((#("for different IOU thresholds (0.50, 0.55, 0.60, …, 0.95), and the final
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21700 . -71) (undo-tree-id21701 . -72)) nil (25755 16392 861952 212000) 0 nil])
([nil nil ((#("metric is the mean of all these mAPs (noted AP@[.50:.95] or
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 60 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21698 . -59) (undo-tree-id21699 . -60)) nil (25755 16392 861949 267000) 0 nil])
([nil nil ((#("AP@[.50:0.05:.95]). Yes, that’s a mean mean average.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 53 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21696 . -52) (undo-tree-id21697 . -53)) nil (25755 16392 861943 255000) 0 nil])
([nil nil ((#("Several YOLO implementations built using TensorFlow are available on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21750 . -68) (undo-tree-id21751 . -69) (t 25755 16392 885073 30000)) nil (25755 16417 965428 142000) 0 nil])
([nil nil ((#("GitHub. In particular, check out Zihao Zang’s TensorFlow 2
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21748 . -58) (undo-tree-id21749 . -59)) nil (25755 16417 965425 956000) 0 nil])
([nil nil ((#("implementation. Other object detection models are available in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 54 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21746 . -66) (undo-tree-id21747 . -67)) nil (25755 16417 965423 736000) 0 nil])
([nil nil ((#("TensorFlow Models project, many with pretrained weights; and some have
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21744 . -70) (undo-tree-id21745 . -71)) nil (25755 16417 965421 675000) 0 nil])
([nil nil ((#("even been ported to TF Hub, such as SSD31 and Faster-RCNN,32 which are
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21742 . -70) (undo-tree-id21743 . -71)) nil (25755 16417 965419 218000) 0 nil])
([nil nil ((#("both quite popular. SSD is also a “single shot” detection model, similar to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21740 . -75) (undo-tree-id21741 . -76)) nil (25755 16417 965417 189000) 0 nil])
([nil nil ((#("YOLO. Faster R-CNN is more complex: the image first goes through a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21736 . -66) (undo-tree-id21737 . 67) (undo-tree-id21738 . -4) (undo-tree-id21739 . -67)) nil (25755 16417 965414 267000) 0 nil])
([nil nil ((#("CNN, then the output is passed to a Region Proposal Network (RPN) that
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21734 . -70) (undo-tree-id21735 . -71)) nil (25755 16417 965409 806000) 0 nil])
([nil nil ((#("proposes bounding boxes that are most likely to contain an object, and a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21732 . -72) (undo-tree-id21733 . -73)) nil (25755 16417 965407 355000) 0 nil])
([nil nil ((#("classifier is run for each bounding box, based on the cropped output of the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21730 . -75) (undo-tree-id21731 . -76)) nil (25755 16417 965404 368000) 0 nil])
([nil nil ((#("CNN.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21728 . -4) (undo-tree-id21729 . -5)) nil (25755 16426 993809 27000) 0 nil])
([nil nil ((#("The choice of detection system depends on many factors: speed, accuracy,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 61 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21756 . -72) (undo-tree-id21757 . -73) (t 25755 16417 996510 974000)) nil (25755 16433 310558 844000) 0 nil] [nil nil ((#("The choice of detection system depends on many factors: speed, accuracy,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 61 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 61 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21752 . -72) (undo-tree-id21753 . -73) (t 25755 16417 996510 974000)) ((33357 . 33430)) (25755 16426 993436 341000) 0 nil])
([nil nil ((#("available pretrained models, training time, complexity, etc. The papers
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21772 . -71) (undo-tree-id21773 . -72)) nil (25755 16449 100279 338000) 0 nil] [nil nil ((#("available pretrained models, training time, complexity, etc. The papers
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21754 . -71) (undo-tree-id21755 . -72)) ((33357 . 33429)) (25755 16433 310327 595000) 0 nil])
nil
([nil nil ((#("contain tables of metrics, but there is quite a lot of variability in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21770 . -73) (undo-tree-id21771 . -74)) nil (25755 16449 100277 301000) 0 nil])
nil
([nil nil ((#("testing environments, and the technologies evolve so fast that it is difficult
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21768 . -78) (undo-tree-id21769 . -79)) nil (25755 16449 100274 848000) 0 nil])
([nil nil ((#("to make a fair comparison that will be useful for most people and remain
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21766 . -72) (undo-tree-id21767 . -73)) nil (25755 16449 100272 366000) 0 nil])
([nil nil ((#("valid for more than a few months.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21764 . -33) (undo-tree-id21765 . -34)) nil (25755 16449 100269 428000) 0 nil])
([nil nil ((#("So, we can locate objects by drawing bounding boxes around them. Great!
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21762 . -71) (undo-tree-id21763 . -72)) nil (25755 16449 100266 878000) 0 nil])
([nil nil ((#("But perhaps you want to be a bit more precise. Let’s see how to go down to
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33357) (undo-tree-id21760 . -74) (undo-tree-id21761 . -75)) nil (25755 16449 100263 758000) 0 nil])
([nil nil ((#("the pixel level.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 15 16 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 33357) (undo-tree-id21758 . -16) (undo-tree-id21759 . -17)) nil (25755 16449 100258 424000) 0 nil])
([nil nil ((33357 . 33359) (#("-" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33357) (undo-tree-id21774 . -1) (undo-tree-id21775 . -1) (undo-tree-id21776 . -1) (undo-tree-id21777 . -1) (undo-tree-id21778 . -1) (undo-tree-id21779 . -1) (undo-tree-id21780 . -1) (undo-tree-id21781 . -1) (undo-tree-id21782 . -1) (undo-tree-id21783 . -1) (undo-tree-id21784 . -1) (undo-tree-id21785 . -1) (undo-tree-id21786 . -1) (undo-tree-id21787 . -1) (undo-tree-id21788 . -1) (undo-tree-id21789 . -1) (undo-tree-id21790 . -1) (undo-tree-id21791 . -1) (undo-tree-id21792 . -1) (undo-tree-id21793 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33358) (undo-tree-id21794 . -1) (undo-tree-id21795 . -1) (undo-tree-id21796 . -1) (undo-tree-id21797 . -1) (undo-tree-id21798 . -1) (undo-tree-id21799 . -1) (undo-tree-id21800 . -1) (undo-tree-id21801 . -1) (undo-tree-id21802 . -1) (undo-tree-id21803 . -1) (undo-tree-id21804 . -1) 33359 (33136 . 33359) (#("- 

- The network is trained using images of different scales: every few
  batches during training, the network randomly chooses a new
  image dimension allowing the network to learn to detect objects at different
  scales." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil composition (1 1 [8226])) 5 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 6 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 7 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 73 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 75 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 76 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 94 135 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 135 136 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 136 137 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 137 152 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 152 153 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 153 213 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 213 214 (fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 214 216 (fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent))) 216 217 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil) 217 223 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil)) . 33136) (undo-tree-id21805 . -223) (undo-tree-id21806 . -223) (undo-tree-id21807 . -223) (undo-tree-id21808 . 62) (undo-tree-id21809 . -174) (undo-tree-id21810 . 48) (undo-tree-id21811 . -174) (undo-tree-id21812 . -174) (undo-tree-id21813 . -223) (undo-tree-id21814 . -223) (undo-tree-id21815 . -223) (undo-tree-id21816 . -223) (undo-tree-id21817 . -223) (undo-tree-id21818 . -223) (undo-tree-id21819 . -223) (undo-tree-id21820 . -223) (undo-tree-id21821 . -223) (undo-tree-id21822 . -223) (undo-tree-id21823 . -223) (undo-tree-id21824 . -223) (undo-tree-id21825 . -223) (undo-tree-id21826 . -223) (undo-tree-id21827 . -223) (undo-tree-id21828 . -223) (undo-tree-id21829 . -223) (undo-tree-id21830 . -223) (undo-tree-id21831 . -223) (undo-tree-id21832 . -223) (undo-tree-id21833 . -223) (undo-tree-id21834 . -223) (undo-tree-id21835 . -223) (undo-tree-id21836 . -223) (undo-tree-id21837 . -223) (undo-tree-id21838 . -223) (undo-tree-id21839 . -223) (undo-tree-id21840 . -223) (undo-tree-id21841 . -223) (undo-tree-id21842 . -223) (undo-tree-id21843 . -223) (undo-tree-id21844 . -223) (undo-tree-id21845 . -223) (undo-tree-id21846 . -223) (undo-tree-id21847 . -223) (undo-tree-id21848 . -223) (undo-tree-id21849 . -223) (undo-tree-id21850 . -223) (undo-tree-id21851 . -223) (undo-tree-id21852 . -223) (undo-tree-id21853 . -223) (undo-tree-id21854 . -223) (undo-tree-id21855 . -223) (undo-tree-id21856 . -223) (undo-tree-id21857 . -223) (undo-tree-id21858 . -223) (undo-tree-id21859 . -223) (undo-tree-id21860 . -223) (undo-tree-id21861 . -223) (undo-tree-id21862 . -223) (undo-tree-id21863 . -223) (undo-tree-id21864 . -223) (undo-tree-id21865 . -223) (undo-tree-id21866 . -223) (undo-tree-id21867 . -223) (undo-tree-id21868 . -223) (undo-tree-id21869 . -223) (undo-tree-id21870 . -223) (undo-tree-id21871 . -223) (undo-tree-id21872 . -223) (undo-tree-id21873 . -223) (undo-tree-id21874 . -223) (undo-tree-id21875 . -223) (undo-tree-id21876 . -223) (undo-tree-id21877 . -223) (undo-tree-id21878 . -223) (undo-tree-id21879 . -223) (undo-tree-id21880 . -223) (undo-tree-id21881 . -223) (undo-tree-id21882 . -223) (undo-tree-id21883 . -223) (undo-tree-id21884 . -223) (undo-tree-id21885 . -223) (undo-tree-id21886 . -223) (undo-tree-id21887 . -223) (undo-tree-id21888 . -223) (undo-tree-id21889 . -223) (undo-tree-id21890 . -223) (undo-tree-id21891 . -223) (undo-tree-id21892 . -223) (undo-tree-id21893 . -223) (undo-tree-id21894 . -223) (undo-tree-id21895 . -223) (undo-tree-id21896 . -223) (undo-tree-id21897 . -223) (undo-tree-id21898 . -223) (undo-tree-id21899 . -223) (undo-tree-id21900 . -223) (undo-tree-id21901 . -223) (undo-tree-id21902 . -223) (undo-tree-id21903 . -223) (undo-tree-id21904 . -223) (undo-tree-id21905 . -223) (undo-tree-id21906 . -223) (undo-tree-id21907 . -223) (undo-tree-id21908 . -223) (undo-tree-id21909 . -223) (undo-tree-id21910 . -223) (undo-tree-id21911 . -223) (undo-tree-id21912 . -223) (undo-tree-id21913 . -223) (undo-tree-id21914 . -223) (undo-tree-id21915 . -223) (undo-tree-id21916 . -223) (undo-tree-id21917 . -223) (undo-tree-id21918 . -223) (undo-tree-id21919 . -223) (undo-tree-id21920 . -223) (undo-tree-id21921 . -223) (undo-tree-id21922 . -223) (undo-tree-id21923 . -223) (undo-tree-id21924 . -223) (undo-tree-id21925 . -223) (undo-tree-id21926 . -223) (undo-tree-id21927 . -223) (undo-tree-id21928 . -223) (undo-tree-id21929 . -223) (undo-tree-id21930 . -223) (undo-tree-id21931 . -223) (undo-tree-id21932 . -223) (undo-tree-id21933 . -223) (undo-tree-id21934 . -223) (undo-tree-id21935 . -223) (undo-tree-id21936 . -223) (undo-tree-id21937 . -223) (undo-tree-id21938 . -223) (undo-tree-id21939 . -223) (undo-tree-id21940 . -223) (undo-tree-id21941 . -223) (undo-tree-id21942 . -223) (undo-tree-id21943 . -223) (undo-tree-id21944 . -223) (undo-tree-id21945 . -223) (undo-tree-id21946 . -223) (undo-tree-id21947 . -223) (undo-tree-id21948 . -223) (undo-tree-id21949 . -223) (undo-tree-id21950 . -223) (undo-tree-id21951 . -223) (undo-tree-id21952 . -223) (undo-tree-id21953 . -223) (undo-tree-id21954 . -223) (undo-tree-id21955 . -223) (undo-tree-id21956 . -223) (undo-tree-id21957 . -223) (undo-tree-id21958 . -223) (undo-tree-id21959 . -223) (undo-tree-id21960 . -223) (undo-tree-id21961 . -223) (undo-tree-id21962 . -223) (undo-tree-id21963 . -223) (undo-tree-id21964 . -223) (undo-tree-id21965 . -223) (undo-tree-id21966 . -223) (undo-tree-id21967 . -223) (undo-tree-id21968 . -223) (undo-tree-id21969 . -223) (undo-tree-id21970 . -223) (undo-tree-id21971 . -223) (undo-tree-id21972 . -223) (undo-tree-id21973 . -223) (undo-tree-id21974 . -223) (undo-tree-id21975 . -223) (undo-tree-id21976 . -223) (undo-tree-id21977 . -223) (undo-tree-id21978 . -223) (undo-tree-id21979 . -223) (undo-tree-id21980 . -223) (undo-tree-id21981 . -223) (undo-tree-id21982 . -223) (undo-tree-id21983 . -223) (undo-tree-id21984 . -223) (undo-tree-id21985 . -223) (undo-tree-id21986 . -223) (undo-tree-id21987 . -223) (undo-tree-id21988 . -223) (undo-tree-id21989 . -223) (undo-tree-id21990 . -223) (undo-tree-id21991 . -223) (undo-tree-id21992 . -223) (undo-tree-id21993 . -223) (undo-tree-id21994 . -223) (undo-tree-id21995 . -223) (undo-tree-id21996 . -223) (undo-tree-id21997 . -223) (undo-tree-id21998 . -223) (undo-tree-id21999 . -223) (undo-tree-id22000 . -223) (undo-tree-id22001 . -223) (undo-tree-id22002 . -223) (undo-tree-id22003 . -223) (undo-tree-id22004 . -223) (undo-tree-id22005 . -223) (undo-tree-id22006 . -223) (undo-tree-id22007 . -223) (undo-tree-id22008 . -223) (undo-tree-id22009 . -223) (undo-tree-id22010 . -223) (undo-tree-id22011 . -223) (undo-tree-id22012 . -223) (undo-tree-id22013 . -223) (undo-tree-id22014 . -223) (undo-tree-id22015 . -223) (undo-tree-id22016 . -223) (undo-tree-id22017 . -223) (undo-tree-id22018 . -223) (undo-tree-id22019 . -223) (undo-tree-id22020 . -223) (undo-tree-id22021 . -223) (undo-tree-id22022 . -223) (undo-tree-id22023 . -223) (undo-tree-id22024 . -223) (undo-tree-id22025 . -223) (undo-tree-id22026 . -223) (undo-tree-id22027 . -223) (undo-tree-id22028 . -223) (undo-tree-id22029 . -223) (undo-tree-id22030 . -223) (undo-tree-id22031 . -223) (undo-tree-id22032 . -223) (undo-tree-id22033 . -223) (undo-tree-id22034 . -223) (undo-tree-id22035 . -223) (undo-tree-id22036 . -223) (undo-tree-id22037 . -223) (undo-tree-id22038 . -223) (undo-tree-id22039 . -223) (undo-tree-id22040 . -223) (undo-tree-id22041 . -223) (undo-tree-id22042 . -223) (undo-tree-id22043 . -223) (undo-tree-id22044 . -223) (undo-tree-id22045 . -223) (undo-tree-id22046 . -223) (undo-tree-id22047 . -223) (undo-tree-id22048 . -223) (undo-tree-id22049 . -223) (undo-tree-id22050 . -223) (undo-tree-id22051 . -223) (undo-tree-id22052 . -223) (undo-tree-id22053 . -223) (undo-tree-id22054 . -223) (undo-tree-id22055 . -223) (undo-tree-id22056 . -223) (undo-tree-id22057 . -223) (undo-tree-id22058 . -223) (undo-tree-id22059 . -223) (undo-tree-id22060 . -223) (undo-tree-id22061 . -223) (undo-tree-id22062 . -223) (undo-tree-id22063 . -223) (undo-tree-id22064 . -223) (undo-tree-id22065 . -223) (undo-tree-id22066 . -223) (undo-tree-id22067 . -223) (undo-tree-id22068 . -223) (undo-tree-id22069 . -223) (undo-tree-id22070 . -223) (undo-tree-id22071 . -223) (undo-tree-id22072 . -223) (undo-tree-id22073 . -223) (undo-tree-id22074 . -223) (undo-tree-id22075 . -223) (undo-tree-id22076 . -223) (undo-tree-id22077 . -223) (undo-tree-id22078 . -223) (undo-tree-id22079 . -223) (undo-tree-id22080 . -223) (undo-tree-id22081 . -223) (undo-tree-id22082 . -223) (undo-tree-id22083 . -223) (undo-tree-id22084 . -223) (undo-tree-id22085 . -223) (undo-tree-id22086 . -223) (undo-tree-id22087 . -223) (undo-tree-id22088 . -223) (undo-tree-id22089 . -223) (undo-tree-id22090 . -223) (undo-tree-id22091 . -223) (undo-tree-id22092 . -223) (undo-tree-id22093 . -223) (undo-tree-id22094 . -223) (undo-tree-id22095 . -223) (undo-tree-id22096 . -4) (33136 . 33140) (#("

" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified t) 1 2 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33355) (undo-tree-id22097 . -2) (undo-tree-id22098 . -2) (undo-tree-id22099 . -2) (undo-tree-id22100 . -2) (undo-tree-id22101 . -2) (undo-tree-id22102 . -2) (undo-tree-id22103 . -2) (undo-tree-id22104 . -2) (undo-tree-id22105 . -2) (undo-tree-id22106 . -2) (undo-tree-id22107 . -2) (undo-tree-id22108 . -2) (undo-tree-id22109 . -2) (undo-tree-id22110 . -2) (undo-tree-id22111 . -2) (undo-tree-id22112 . -2) (undo-tree-id22113 . -2) (undo-tree-id22114 . -2) (undo-tree-id22115 . -2) (undo-tree-id22116 . -2) (undo-tree-id22117 . -2) (undo-tree-id22118 . -2) (undo-tree-id22119 . -2) (undo-tree-id22120 . -2) (undo-tree-id22121 . -2) (undo-tree-id22122 . -2) (undo-tree-id22123 . -2) (undo-tree-id22124 . -2) (undo-tree-id22125 . -2) (undo-tree-id22126 . -2) (undo-tree-id22127 . -2) (undo-tree-id22128 . -2) (undo-tree-id22129 . -2) (undo-tree-id22130 . -2) (undo-tree-id22131 . -2) (undo-tree-id22132 . -2) (undo-tree-id22133 . -2) (undo-tree-id22134 . -2) (undo-tree-id22135 . -2) (undo-tree-id22136 . -2) (undo-tree-id22137 . -2) (undo-tree-id22138 . -2) (undo-tree-id22139 . -2) (undo-tree-id22140 . -2) (undo-tree-id22141 . -2) (undo-tree-id22142 . -2) (undo-tree-id22143 . -2) (undo-tree-id22144 . -2) (undo-tree-id22145 . -2) (undo-tree-id22146 . -2) (undo-tree-id22147 . -2) (undo-tree-id22148 . -2) (undo-tree-id22149 . -2) (undo-tree-id22150 . -2) (undo-tree-id22151 . -2) (undo-tree-id22152 . -2) (undo-tree-id22153 . -2) (undo-tree-id22154 . -2) (undo-tree-id22155 . -2) (undo-tree-id22156 . -2) (undo-tree-id22157 . -2) (undo-tree-id22158 . -2) (undo-tree-id22159 . -2) (undo-tree-id22160 . -2) (undo-tree-id22161 . -2) (undo-tree-id22162 . -2) (undo-tree-id22163 . -2) (undo-tree-id22164 . -2) (undo-tree-id22165 . -2) (undo-tree-id22166 . -2) (undo-tree-id22167 . -2) (undo-tree-id22168 . -2) (undo-tree-id22169 . -2) (undo-tree-id22170 . -2) (undo-tree-id22171 . -2) (undo-tree-id22172 . -2) (undo-tree-id22173 . -2) (undo-tree-id22174 . -2) (undo-tree-id22175 . -2) (undo-tree-id22176 . -2) (undo-tree-id22177 . -2) (undo-tree-id22178 . -2) (undo-tree-id22179 . -2) (undo-tree-id22180 . -2) (undo-tree-id22181 . -2) (undo-tree-id22182 . -2) (undo-tree-id22183 . -2) (undo-tree-id22184 . -2) (undo-tree-id22185 . -2) (undo-tree-id22186 . -2) (undo-tree-id22187 . -2) (undo-tree-id22188 . -2) (undo-tree-id22189 . -2) (undo-tree-id22190 . -2) (undo-tree-id22191 . -2) (undo-tree-id22192 . -2) (undo-tree-id22193 . -2) (undo-tree-id22194 . -2) (undo-tree-id22195 . -2) (undo-tree-id22196 . -2) (undo-tree-id22197 . -2) (undo-tree-id22198 . -2) (undo-tree-id22199 . -2) (undo-tree-id22200 . -2) (undo-tree-id22201 . -2) (undo-tree-id22202 . -2) (undo-tree-id22203 . -2) (undo-tree-id22204 . -2) (undo-tree-id22205 . -2) (undo-tree-id22206 . -2) (undo-tree-id22207 . -2) (undo-tree-id22208 . -2) (undo-tree-id22209 . -2) (undo-tree-id22210 . -2) (undo-tree-id22211 . -2) (undo-tree-id22212 . -2) (undo-tree-id22213 . -2) (undo-tree-id22214 . -2) (undo-tree-id22215 . -2) (undo-tree-id22216 . -2) (undo-tree-id22217 . -2) (undo-tree-id22218 . -2) (undo-tree-id22219 . -2) (undo-tree-id22220 . -2) (undo-tree-id22221 . -2) (undo-tree-id22222 . -2) (undo-tree-id22223 . -2) (undo-tree-id22224 . -2) (undo-tree-id22225 . -2) (undo-tree-id22226 . -2) (undo-tree-id22227 . -2) (undo-tree-id22228 . -2) (undo-tree-id22229 . -2) (undo-tree-id22230 . -2) (undo-tree-id22231 . -2) (undo-tree-id22232 . -2) (undo-tree-id22233 . -2) (undo-tree-id22234 . -2) (undo-tree-id22235 . -2) (undo-tree-id22236 . -2) (undo-tree-id22237 . -2) (undo-tree-id22238 . -2) (undo-tree-id22239 . -2) (undo-tree-id22240 . -2) (undo-tree-id22241 . -2) (undo-tree-id22242 . -2) (undo-tree-id22243 . -2) (undo-tree-id22244 . -2) (undo-tree-id22245 . -2) (undo-tree-id22246 . -2) (undo-tree-id22247 . -2) (undo-tree-id22248 . -2) (undo-tree-id22249 . -2) (undo-tree-id22250 . -2) (undo-tree-id22251 . -2) (undo-tree-id22252 . -2) (undo-tree-id22253 . -2) (undo-tree-id22254 . -2) (undo-tree-id22255 . -2) (undo-tree-id22256 . -2) (undo-tree-id22257 . -2) (undo-tree-id22258 . -2) (undo-tree-id22259 . -2) (undo-tree-id22260 . -2) (undo-tree-id22261 . -2) (undo-tree-id22262 . -2) (undo-tree-id22263 . -2) (undo-tree-id22264 . -2) (undo-tree-id22265 . -2) (undo-tree-id22266 . -2) (undo-tree-id22267 . -2) (undo-tree-id22268 . -2) (undo-tree-id22269 . -2) (undo-tree-id22270 . -2) (undo-tree-id22271 . -2) (undo-tree-id22272 . -2) (undo-tree-id22273 . -2) (undo-tree-id22274 . -2) (undo-tree-id22275 . -2) (undo-tree-id22276 . -2) (undo-tree-id22277 . -2) (undo-tree-id22278 . -2) (undo-tree-id22279 . -2) (undo-tree-id22280 . -2) (undo-tree-id22281 . -2) (undo-tree-id22282 . -2) (undo-tree-id22283 . -2) (undo-tree-id22284 . -2) (undo-tree-id22285 . -2) (undo-tree-id22286 . -2) (undo-tree-id22287 . -2) (undo-tree-id22288 . -2) (undo-tree-id22289 . -2) (undo-tree-id22290 . -2) (undo-tree-id22291 . -2) (undo-tree-id22292 . -2) (undo-tree-id22293 . -2) (undo-tree-id22294 . -2) (undo-tree-id22295 . -2) (undo-tree-id22296 . -2) (undo-tree-id22297 . -2) (undo-tree-id22298 . -2) (undo-tree-id22299 . -2) (undo-tree-id22300 . -2) (undo-tree-id22301 . -2) (undo-tree-id22302 . -2) (undo-tree-id22303 . -2) (undo-tree-id22304 . -2) (undo-tree-id22305 . -2) (undo-tree-id22306 . -2) (undo-tree-id22307 . -2) (undo-tree-id22308 . -2) (undo-tree-id22309 . -2) (undo-tree-id22310 . -2) (undo-tree-id22311 . -2) (undo-tree-id22312 . -2) (undo-tree-id22313 . -2) (undo-tree-id22314 . -2) (undo-tree-id22315 . -2) (undo-tree-id22316 . -2) (undo-tree-id22317 . -2) (undo-tree-id22318 . -2) (undo-tree-id22319 . -2) (undo-tree-id22320 . -2) (undo-tree-id22321 . -2) (undo-tree-id22322 . -2) (undo-tree-id22323 . -2) (undo-tree-id22324 . -2) (undo-tree-id22325 . -2) (undo-tree-id22326 . -2) (undo-tree-id22327 . -2) (undo-tree-id22328 . -2) (undo-tree-id22329 . -2) (undo-tree-id22330 . -2) (undo-tree-id22331 . -2) (undo-tree-id22332 . -2) (undo-tree-id22333 . -2) (undo-tree-id22334 . -2) (undo-tree-id22335 . -2) (undo-tree-id22336 . -2) (undo-tree-id22337 . -2) (undo-tree-id22338 . -2) (undo-tree-id22339 . -2) (undo-tree-id22340 . -2) (undo-tree-id22341 . -2) (undo-tree-id22342 . -2) (undo-tree-id22343 . -2) (undo-tree-id22344 . -2) (undo-tree-id22345 . -2) (undo-tree-id22346 . -2) (undo-tree-id22347 . -2) (undo-tree-id22348 . -2) (undo-tree-id22349 . -2) (undo-tree-id22350 . -2) (undo-tree-id22351 . -2) (undo-tree-id22352 . -2) (undo-tree-id22353 . -2) (undo-tree-id22354 . -2) (undo-tree-id22355 . -2) (undo-tree-id22356 . -2) (undo-tree-id22357 . -2) (undo-tree-id22358 . -2) (undo-tree-id22359 . -2) (undo-tree-id22360 . -2) (undo-tree-id22361 . -2) (undo-tree-id22362 . -2) (undo-tree-id22363 . -2) (undo-tree-id22364 . -2) (undo-tree-id22365 . -2) (undo-tree-id22366 . -2) (undo-tree-id22367 . -2) (undo-tree-id22368 . -2) (undo-tree-id22369 . -2) (undo-tree-id22370 . -2) (undo-tree-id22371 . -2) (undo-tree-id22372 . -2) (undo-tree-id22373 . -2) (undo-tree-id22374 . -2) (undo-tree-id22375 . -2) (undo-tree-id22376 . -2) (undo-tree-id22377 . -2) (undo-tree-id22378 . -2) (undo-tree-id22379 . -2) (undo-tree-id22380 . -2) (undo-tree-id22381 . -2) (undo-tree-id22382 . -2) 33357 (t 25755 16449 131885 293000)) nil (25755 16482 490135 47000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34654 . 34655) (nil fontified nil 34649 . 34655) (nil fontified nil 34572 . 34649) (nil fontified nil 34499 . 34572) (nil fontified nil 34424 . 34499) (nil fontified nil 34347 . 34424) (nil fontified nil 34274 . 34347) (nil fontified nil 34201 . 34274) (nil fontified nil 34129 . 34201) (nil fontified nil 34051 . 34129) (nil fontified nil 34045 . 34051) (nil fontified nil 33973 . 34045) (nil fontified nil 33901 . 33973) (nil fontified nil 33822 . 33901) (nil fontified nil 33751 . 33822) (nil fontified nil 33678 . 33751) (nil fontified nil 33538 . 33678) (nil fontified nil 33457 . 33538) (nil fontified nil 33380 . 33457) (nil fontified nil 33358 . 33380) (33358 . 34655) 33357) nil (25755 16482 489361 669000) 0 nil])
([nil nil ((33358 . 33359)) nil (25755 16482 489357 916000) 0 nil])
([nil nil ((34657 . 34658)) nil (25755 16482 489353 388000) 0 nil])
([nil nil ((#("(e.g., road, car, pedestrian, building, etc.)" 0 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33483) (undo-tree-id22675 . -44) (undo-tree-id22676 . -45) 33462 (t 25755 16482 519296 961000)) nil (25755 17213 53917 629000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33482) (undo-tree-id22663 . -1) (undo-tree-id22664 . -1) (undo-tree-id22665 . -1) (undo-tree-id22666 . -1) (undo-tree-id22667 . -1) (undo-tree-id22668 . -1) (undo-tree-id22669 . -1) (undo-tree-id22670 . -1) (undo-tree-id22671 . -1) (undo-tree-id22672 . -1) (undo-tree-id22673 . -1) (undo-tree-id22674 . -1)) nil (25755 17213 53915 99000) 0 nil])
([nil nil ((#("as shown" 0 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33484) (undo-tree-id22660 . -7) (undo-tree-id22661 . -8) (undo-tree-id22662 . -8)) nil (25755 17213 53906 6000) 0 nil])
([nil nil ((#("in Figure 14-26" 0 15 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33485) (undo-tree-id22658 . -14) (undo-tree-id22659 . -15)) nil (25755 17213 53902 365000) 0 nil])
([nil nil ((33483 . 33484) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 33483) (undo-tree-id22497 . -1) (undo-tree-id22498 . -1) (undo-tree-id22499 . -1) (undo-tree-id22500 . -1) (undo-tree-id22501 . -1) (undo-tree-id22502 . -1) (undo-tree-id22503 . -1) (undo-tree-id22504 . -1) (undo-tree-id22505 . -1) (undo-tree-id22506 . -1) (undo-tree-id22507 . -1) (undo-tree-id22508 . -1) (undo-tree-id22509 . -1) (undo-tree-id22510 . -1) (undo-tree-id22511 . -1) (undo-tree-id22512 . -1) (undo-tree-id22513 . -1) (undo-tree-id22514 . -1) (undo-tree-id22515 . -1) (undo-tree-id22516 . -1) (undo-tree-id22517 . -1) (undo-tree-id22518 . -1) (undo-tree-id22519 . -1) (undo-tree-id22520 . -1) (undo-tree-id22521 . -1) (undo-tree-id22522 . -1) (undo-tree-id22523 . -1) (undo-tree-id22524 . -1) (undo-tree-id22525 . -1) (undo-tree-id22526 . -1) (undo-tree-id22527 . -1) (undo-tree-id22528 . -1) (undo-tree-id22529 . -1) (undo-tree-id22530 . -1) (undo-tree-id22531 . -1) (undo-tree-id22532 . -1) (undo-tree-id22533 . -1) (undo-tree-id22534 . -1) (undo-tree-id22535 . -1) (undo-tree-id22536 . -1) (undo-tree-id22537 . -1) (undo-tree-id22538 . -1) (undo-tree-id22539 . -1) (undo-tree-id22540 . -1) (undo-tree-id22541 . -1) (undo-tree-id22542 . -1) (undo-tree-id22543 . -1) (undo-tree-id22544 . -1) (undo-tree-id22545 . -1) (undo-tree-id22546 . -1) (undo-tree-id22547 . -1) (undo-tree-id22548 . -1) (undo-tree-id22549 . -1) (undo-tree-id22550 . -1) (undo-tree-id22551 . -1) (undo-tree-id22552 . -1) (undo-tree-id22553 . -1) (undo-tree-id22554 . -1) (undo-tree-id22555 . -1) (undo-tree-id22556 . -1) (undo-tree-id22557 . -1) (undo-tree-id22558 . -1) (undo-tree-id22559 . -1) (undo-tree-id22560 . -1) (undo-tree-id22561 . -1) (undo-tree-id22562 . -1) (undo-tree-id22563 . -1) (undo-tree-id22564 . -1) (undo-tree-id22565 . -1) (undo-tree-id22566 . -1) (undo-tree-id22567 . -1) (undo-tree-id22568 . -1) (undo-tree-id22569 . -1) (undo-tree-id22570 . -1) (undo-tree-id22571 . -1) (undo-tree-id22572 . -1) (undo-tree-id22573 . -1) (undo-tree-id22574 . -1) (undo-tree-id22575 . -1) (undo-tree-id22576 . -1) (undo-tree-id22577 . -1) (undo-tree-id22578 . -1) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33484) (undo-tree-id22579 . -1) (undo-tree-id22580 . -1) (undo-tree-id22581 . -1) (undo-tree-id22582 . -1) (undo-tree-id22583 . -1) (undo-tree-id22584 . -1) (undo-tree-id22585 . -1) (undo-tree-id22586 . -1) (undo-tree-id22587 . -1) (undo-tree-id22588 . -1) (undo-tree-id22589 . -1) (undo-tree-id22590 . -1) (undo-tree-id22591 . -1) (undo-tree-id22592 . -1) (undo-tree-id22593 . -1) (undo-tree-id22594 . -1) (undo-tree-id22595 . -1) (undo-tree-id22596 . -1) (undo-tree-id22597 . -1) (undo-tree-id22598 . -1) (undo-tree-id22599 . -1) (undo-tree-id22600 . -1) (undo-tree-id22601 . -1) (undo-tree-id22602 . -1) (undo-tree-id22603 . -1) (undo-tree-id22604 . -1) (undo-tree-id22605 . -1) (undo-tree-id22606 . -1) (undo-tree-id22607 . -1) (undo-tree-id22608 . -1) (undo-tree-id22609 . -1) (undo-tree-id22610 . -1) (undo-tree-id22611 . -1) (undo-tree-id22612 . -1) (undo-tree-id22613 . -1) (undo-tree-id22614 . -1) (undo-tree-id22615 . -1) (undo-tree-id22616 . -1) (undo-tree-id22617 . -1) (undo-tree-id22618 . -1) (undo-tree-id22619 . -1) (undo-tree-id22620 . -1) (undo-tree-id22621 . -1) (undo-tree-id22622 . -1) (undo-tree-id22623 . -1) (undo-tree-id22624 . -1) (undo-tree-id22625 . -1) (undo-tree-id22626 . -1) (undo-tree-id22627 . -1) (undo-tree-id22628 . -1) (undo-tree-id22629 . -1) (undo-tree-id22630 . -1) (undo-tree-id22631 . -1) (undo-tree-id22632 . -1) (undo-tree-id22633 . -1) (undo-tree-id22634 . -1) (undo-tree-id22635 . -1) (undo-tree-id22636 . -1) (undo-tree-id22637 . -1) (undo-tree-id22638 . -1) (undo-tree-id22639 . -1) (undo-tree-id22640 . -1) (undo-tree-id22641 . -1) (undo-tree-id22642 . -1) (undo-tree-id22643 . -1) (undo-tree-id22644 . -1) (undo-tree-id22645 . -1) (undo-tree-id22646 . -1) (undo-tree-id22647 . -1) (undo-tree-id22648 . -1) (undo-tree-id22649 . -1) (undo-tree-id22650 . -1) (undo-tree-id22651 . -1) (undo-tree-id22652 . -1) (undo-tree-id22653 . -1) (undo-tree-id22654 . -1) (undo-tree-id22655 . -1) (undo-tree-id22656 . -1) (undo-tree-id22657 . -1) 33458) nil (25755 17213 53894 267000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33482) (undo-tree-id22385 . -1) (undo-tree-id22386 . -1) (undo-tree-id22387 . -1) (undo-tree-id22388 . -1) (undo-tree-id22389 . -1) (undo-tree-id22390 . -1) (undo-tree-id22391 . -1) (undo-tree-id22392 . -1) (undo-tree-id22393 . -1) (undo-tree-id22394 . -1) (undo-tree-id22395 . -1) (undo-tree-id22396 . -1) (undo-tree-id22397 . -1) (undo-tree-id22398 . -1) (undo-tree-id22399 . -1) (undo-tree-id22400 . -1) (undo-tree-id22401 . -1) (undo-tree-id22402 . -1) (undo-tree-id22403 . -1) (undo-tree-id22404 . -1) (undo-tree-id22405 . -1) (undo-tree-id22406 . -1) (undo-tree-id22407 . -1) (undo-tree-id22408 . -1) (undo-tree-id22409 . -1) (undo-tree-id22410 . -1) (undo-tree-id22411 . -1) (undo-tree-id22412 . -1) (undo-tree-id22413 . -1) (undo-tree-id22414 . -1) (undo-tree-id22415 . -1) (undo-tree-id22416 . -1) (undo-tree-id22417 . -1) (undo-tree-id22418 . -1) (undo-tree-id22419 . -1) (undo-tree-id22420 . -1) (undo-tree-id22421 . -1) (undo-tree-id22422 . -1) (undo-tree-id22423 . -1) (undo-tree-id22424 . -1) (undo-tree-id22425 . -1) (undo-tree-id22426 . -1) (undo-tree-id22427 . -1) (undo-tree-id22428 . -1) (undo-tree-id22429 . -1) (undo-tree-id22430 . -1) (undo-tree-id22431 . -1) (undo-tree-id22432 . -1) (undo-tree-id22433 . -1) (undo-tree-id22434 . -1) (undo-tree-id22435 . -1) (undo-tree-id22436 . -1) (undo-tree-id22437 . -1) (undo-tree-id22438 . -1) (undo-tree-id22439 . -1) (undo-tree-id22440 . -1) (undo-tree-id22441 . -1) (undo-tree-id22442 . -1) (undo-tree-id22443 . -1) (undo-tree-id22444 . -1) (undo-tree-id22445 . -1) (undo-tree-id22446 . -1) (undo-tree-id22447 . -1) (undo-tree-id22448 . -1) (undo-tree-id22449 . -1) (undo-tree-id22450 . -1) (undo-tree-id22451 . -1) (undo-tree-id22452 . -1) (undo-tree-id22453 . -1) (undo-tree-id22454 . -1) (undo-tree-id22455 . -1) (undo-tree-id22456 . -1) (undo-tree-id22457 . -1) (undo-tree-id22458 . -1) (undo-tree-id22459 . -1) (undo-tree-id22460 . -1) (undo-tree-id22461 . -1) (undo-tree-id22462 . -1) (undo-tree-id22463 . -1) (undo-tree-id22464 . -1) (undo-tree-id22465 . -1) (undo-tree-id22466 . -1) (undo-tree-id22467 . -1) (undo-tree-id22468 . -1) (undo-tree-id22469 . -1) (undo-tree-id22470 . -1) (undo-tree-id22471 . -1) (undo-tree-id22472 . -1) (undo-tree-id22473 . -1) (undo-tree-id22474 . -1) (undo-tree-id22475 . -1) (undo-tree-id22476 . -1) (undo-tree-id22477 . -1) (undo-tree-id22478 . -1) (undo-tree-id22479 . -1) (undo-tree-id22480 . -1) (undo-tree-id22481 . -1) (undo-tree-id22482 . -1) (undo-tree-id22483 . -1) (undo-tree-id22484 . -1) (undo-tree-id22485 . -1) (undo-tree-id22486 . -1) (undo-tree-id22487 . -1) (undo-tree-id22488 . -1) (undo-tree-id22489 . -1) (undo-tree-id22490 . -1) (undo-tree-id22491 . -1) (undo-tree-id22492 . -1) (undo-tree-id22493 . -1) (undo-tree-id22494 . -1) (undo-tree-id22495 . -1) (undo-tree-id22496 . -1)) nil (25755 17213 53128 309000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 33482) (undo-tree-id22383 . -1) (undo-tree-id22384 . -1)) nil (25755 17213 53052 153000) 0 nil])
([nil nil ((33484 . 33486)) nil (25755 17213 53037 756000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33485) (undo-tree-id22677 . -1) (undo-tree-id22678 . -1) (undo-tree-id22679 . -1) (undo-tree-id22680 . -1) (undo-tree-id22681 . -1) (undo-tree-id22682 . -1) (undo-tree-id22683 . -1) (undo-tree-id22684 . -1) (undo-tree-id22685 . -1) (undo-tree-id22686 . -1) (undo-tree-id22687 . -1) (undo-tree-id22688 . -1) (undo-tree-id22689 . -1) (undo-tree-id22690 . -1) (undo-tree-id22691 . -1) (undo-tree-id22692 . -1) (undo-tree-id22693 . -1) (undo-tree-id22694 . -1) (undo-tree-id22695 . -1) (undo-tree-id22696 . -1) (undo-tree-id22697 . -1) (undo-tree-id22698 . -1) (undo-tree-id22699 . -1) (undo-tree-id22700 . -1) (undo-tree-id22701 . -1) (undo-tree-id22702 . -1) (undo-tree-id22703 . -1) (undo-tree-id22704 . -1) (undo-tree-id22705 . -1) (undo-tree-id22706 . -1) (undo-tree-id22707 . -1) (undo-tree-id22708 . -1) (undo-tree-id22709 . -1) (undo-tree-id22710 . -1) (undo-tree-id22711 . -1) (undo-tree-id22712 . -1) (undo-tree-id22713 . -1) (undo-tree-id22714 . -1) (undo-tree-id22715 . -1) (undo-tree-id22716 . -1) (undo-tree-id22717 . -1) (undo-tree-id22718 . -1) (undo-tree-id22719 . -1) (undo-tree-id22720 . -1) (undo-tree-id22721 . -1) (undo-tree-id22722 . -1) (undo-tree-id22723 . -1) (undo-tree-id22724 . -1) (undo-tree-id22725 . -1) (undo-tree-id22726 . -1) (undo-tree-id22727 . -1) (undo-tree-id22728 . -1) (undo-tree-id22729 . -1) (undo-tree-id22730 . -1) (undo-tree-id22731 . -1) (undo-tree-id22732 . -1) (undo-tree-id22733 . -1) (undo-tree-id22734 . -1) (undo-tree-id22735 . -1) (undo-tree-id22736 . -1) (undo-tree-id22737 . -1) (undo-tree-id22738 . -1) (t 25755 17213 131891 315000)) nil (25755 17215 831279 660000) 0 nil])
([nil nil ((#("Note that d" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 11 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33485) (undo-tree-id22739 . -10) (undo-tree-id22740 . -10) (undo-tree-id22741 . 11) (undo-tree-id22742 . -10) (undo-tree-id22743 . -10) (undo-tree-id22744 . -11) (undo-tree-id22745 . -10) (undo-tree-id22746 . -3) (undo-tree-id22747 . -3) (undo-tree-id22748 . -3) (undo-tree-id22749 . -3) (undo-tree-id22750 . -3) (undo-tree-id22751 . -3) (undo-tree-id22752 . -3) (undo-tree-id22753 . -3) (undo-tree-id22754 . -3) (undo-tree-id22755 . -3) (undo-tree-id22756 . -3) (undo-tree-id22757 . -3) (undo-tree-id22758 . -3) (undo-tree-id22759 . -3) (undo-tree-id22760 . -3) (undo-tree-id22761 . -3) (undo-tree-id22762 . -3) (undo-tree-id22763 . -3) (undo-tree-id22764 . -3) (undo-tree-id22765 . -3) (undo-tree-id22766 . -3) (undo-tree-id22767 . -3) (undo-tree-id22768 . -3) (undo-tree-id22769 . -3) (undo-tree-id22770 . -3) (undo-tree-id22771 . -3) (undo-tree-id22772 . -3) (undo-tree-id22773 . -3) (undo-tree-id22774 . -3) (undo-tree-id22775 . -8) (undo-tree-id22776 . -8) (undo-tree-id22777 . -8) (undo-tree-id22778 . -8) (undo-tree-id22779 . -8) (undo-tree-id22780 . -8) (undo-tree-id22781 . -8) (undo-tree-id22782 . -8) (undo-tree-id22783 . -8) (undo-tree-id22784 . -8) (undo-tree-id22785 . -8) (undo-tree-id22786 . -8) (undo-tree-id22787 . -8) (undo-tree-id22788 . -8) (undo-tree-id22789 . -8) (undo-tree-id22790 . -8) (undo-tree-id22791 . -8) (undo-tree-id22792 . -8) (undo-tree-id22793 . -8) (undo-tree-id22794 . -8) (undo-tree-id22795 . -8) (undo-tree-id22796 . -8) (undo-tree-id22797 . -10) (undo-tree-id22798 . -10) (undo-tree-id22799 . -10) (undo-tree-id22800 . -10) (undo-tree-id22801 . -10) (undo-tree-id22802 . -10) (undo-tree-id22803 . -10) (undo-tree-id22804 . -10) (undo-tree-id22805 . -10) (undo-tree-id22806 . -10) (undo-tree-id22807 . -10) (undo-tree-id22808 . -10) (undo-tree-id22809 . -10) (undo-tree-id22810 . -10) (undo-tree-id22811 . -10) (undo-tree-id22812 . -10) (undo-tree-id22813 . -10) (undo-tree-id22814 . -10) (undo-tree-id22815 . -10) (undo-tree-id22816 . -10) (undo-tree-id22817 . -10) (undo-tree-id22818 . -10) (undo-tree-id22819 . -10) (undo-tree-id22820 . -10) (undo-tree-id22821 . -10) (undo-tree-id22822 . -10) (undo-tree-id22823 . -10) (undo-tree-id22824 . -10) (undo-tree-id22825 . -10) (undo-tree-id22826 . -10) (undo-tree-id22827 . -10) (undo-tree-id22828 . -10) (undo-tree-id22829 . -10) (undo-tree-id22830 . -10) (undo-tree-id22831 . -10) (undo-tree-id22832 . -10) (undo-tree-id22833 . -10) (undo-tree-id22834 . -11) 33495 (t 25755 17215 863923 11000)) nil (25755 17224 240939 845000) 0 nil])
([nil nil ((33485 . 33486)) nil (25755 17224 240793 31000) 0 nil])
([nil nil ((33484 . 33485) (t 25755 17224 272021 356000) 33481) nil (25755 17229 704904 604000) 0 nil])
([nil nil ((33544 . 33545) (t 25755 17229 736085 908000)) nil (25755 17243 934618 973000) 0 nil])
([nil nil ((#("For example, all the bicycles on the right side of the
" 0 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33545) (undo-tree-id22973 . -54) (undo-tree-id22974 . 55) (undo-tree-id22975 . -55) (t 25755 17241 536227 7000)) nil (25755 17299 983652 249000) 0 nil] [nil nil ((#("For example, all the bicycles on the right side of the
" 0 55 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33545) (undo-tree-id22835 . -54) (undo-tree-id22836 . 55) (undo-tree-id22837 . -55) (t 25755 17241 536227 7000)) ((33545 . 33600)) (25755 17243 934240 118000) 0 nil])
([nil nil ((#("segmented image end up as one big lump of pixels" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 48 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33545) (undo-tree-id22970 . -47) (undo-tree-id22971 . 48) (undo-tree-id22972 . -48)) nil (25755 17299 983647 10000) 0 nil])
nil
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33545) (undo-tree-id22967 . 1) (undo-tree-id22968 . -1) (undo-tree-id22969 . -1)) nil (25755 17299 983644 23000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 33545) (undo-tree-id22964 . 1) (undo-tree-id22965 . -1) (undo-tree-id22966 . -1)) nil (25755 17299 983641 4000) 0 nil])
([nil nil ((33567 . 33568) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33567) (undo-tree-id22963 . -1) 33545) nil (25755 17299 983637 487000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -33624) (nil fontified nil 33623 . 33624) (nil wrap-prefix #("  " 0 2 (face org-indent)) 33623 . 33624) (33623 . 33624) 33609) nil (25755 17299 983635 175000) 0 nil])
([nil nil ((33638 . 33639) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33638) (undo-tree-id22961 . 1) (undo-tree-id22962 . -1) 33624) nil (25755 17299 983633 337000) 0 nil])
([nil nil ((#("(due to the layers with strides greater than 1)" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 47 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33669) (undo-tree-id22955 . -46) (undo-tree-id22956 . 47) (undo-tree-id22957 . -1) (undo-tree-id22958 . 1) (undo-tree-id22959 . -47) (undo-tree-id22960 . -47)) nil (25755 17299 983630 236000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33668) (undo-tree-id22870 . -1) (undo-tree-id22871 . -1) (undo-tree-id22872 . -1) (undo-tree-id22873 . -1) (undo-tree-id22874 . -1) (undo-tree-id22875 . -1) (undo-tree-id22876 . -1) (undo-tree-id22877 . -1) (undo-tree-id22878 . -1) (undo-tree-id22879 . -1) (undo-tree-id22880 . -1) (undo-tree-id22881 . -1) (undo-tree-id22882 . -1) (undo-tree-id22883 . -1) (undo-tree-id22884 . -1) (undo-tree-id22885 . -1) (undo-tree-id22886 . -1) (undo-tree-id22887 . -1) (undo-tree-id22888 . -1) (undo-tree-id22889 . -1) (undo-tree-id22890 . -1) (undo-tree-id22891 . -1) (undo-tree-id22892 . -1) (undo-tree-id22893 . -1) (undo-tree-id22894 . -1) (undo-tree-id22895 . -1) (undo-tree-id22896 . -1) (undo-tree-id22897 . -1) (undo-tree-id22898 . -1) (undo-tree-id22899 . -1) (undo-tree-id22900 . -1) (undo-tree-id22901 . -1) (undo-tree-id22902 . -1) (undo-tree-id22903 . -1) (undo-tree-id22904 . -1) (undo-tree-id22905 . -1) (undo-tree-id22906 . -1) (undo-tree-id22907 . -1) (undo-tree-id22908 . -1) (undo-tree-id22909 . -1) (undo-tree-id22910 . -1) (undo-tree-id22911 . -1) (undo-tree-id22912 . -1) (undo-tree-id22913 . -1) (undo-tree-id22914 . -1) (undo-tree-id22915 . -1) (undo-tree-id22916 . -1) (undo-tree-id22917 . -1) (undo-tree-id22918 . -1) (undo-tree-id22919 . -1) (undo-tree-id22920 . -1) (undo-tree-id22921 . -1) (undo-tree-id22922 . -1) (undo-tree-id22923 . -1) (undo-tree-id22924 . -1) (undo-tree-id22925 . -1) (undo-tree-id22926 . -1) (undo-tree-id22927 . -1) (undo-tree-id22928 . -1) (undo-tree-id22929 . -1) (undo-tree-id22930 . -1) (undo-tree-id22931 . -1) (undo-tree-id22932 . -1) (undo-tree-id22933 . -1) (undo-tree-id22934 . -1) (undo-tree-id22935 . -1) (undo-tree-id22936 . -1) (undo-tree-id22937 . -1) (undo-tree-id22938 . -1) (undo-tree-id22939 . -1) (undo-tree-id22940 . -1) (undo-tree-id22941 . -1) (undo-tree-id22942 . -1) (undo-tree-id22943 . -1) (undo-tree-id22944 . -1) (undo-tree-id22945 . -1) (undo-tree-id22946 . -1) (undo-tree-id22947 . -1) (undo-tree-id22948 . -1) (undo-tree-id22949 . -1) (undo-tree-id22950 . -1) (undo-tree-id22951 . -1) (undo-tree-id22952 . -1) (undo-tree-id22953 . -1) (undo-tree-id22954 . -1)) nil (25755 17299 983621 982000) 0 nil])
([nil nil ((#("so, " 0 4 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33670) (undo-tree-id22838 . -3) (undo-tree-id22839 . -3) (undo-tree-id22840 . -3) (undo-tree-id22841 . -3) (undo-tree-id22842 . -4) (undo-tree-id22843 . -3) (undo-tree-id22844 . -1) (undo-tree-id22845 . -1) (undo-tree-id22846 . -1) (undo-tree-id22847 . -1) (undo-tree-id22848 . -1) (undo-tree-id22849 . -1) (undo-tree-id22850 . -1) (undo-tree-id22851 . -1) (undo-tree-id22852 . -2) (undo-tree-id22853 . -2) (undo-tree-id22854 . -2) (undo-tree-id22855 . -2) (undo-tree-id22856 . -2) (undo-tree-id22857 . -2) (undo-tree-id22858 . -2) (undo-tree-id22859 . -2) (undo-tree-id22860 . -3) (undo-tree-id22861 . -3) (undo-tree-id22862 . -3) (undo-tree-id22863 . -3) (undo-tree-id22864 . -3) (undo-tree-id22865 . -3) (undo-tree-id22866 . -3) (undo-tree-id22867 . -3) (undo-tree-id22868 . -3) (undo-tree-id22869 . -4) 33673) nil (25755 17299 983551 291000) 0 nil])
([nil nil ((33815 . 33816) (t 25755 17300 12958 739000) 33810) nil (25755 17302 467503 229000) 0 nil])
([nil nil ((#("Just like for object detection, there are many different approaches to tackle
" 0 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33817) (undo-tree-id23045 . -77) (undo-tree-id23046 . -78) (undo-tree-id23047 . -78) (undo-tree-id23048 . -78) (undo-tree-id23049 . -78) (undo-tree-id23050 . -78) (undo-tree-id23051 . -78) (undo-tree-id23052 . -78) (undo-tree-id23053 . -78) (undo-tree-id23054 . -5) (undo-tree-id23055 . -10) (undo-tree-id23056 . -10) (undo-tree-id23057 . -10) (undo-tree-id23058 . -10) (undo-tree-id23059 . -10) (undo-tree-id23060 . -10) (undo-tree-id23061 . -10) (undo-tree-id23062 . -10) (undo-tree-id23063 . -78) (t 25755 17302 496990 968000)) nil (25755 17379 768925 770000) 0 nil])
([nil nil ((#("this problem, some quite complex. However, a fairly simple solution was
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33817) (undo-tree-id23043 . -71) (undo-tree-id23044 . -72)) nil (25755 17379 768913 237000) 0 nil])
([nil nil ((#("proposed in the 2015 paper by Jonathan Long et al. we discussed earlier.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33817) (undo-tree-id23041 . -72) (undo-tree-id23042 . -73)) nil (25755 17379 768910 941000) 0 nil])
([nil nil ((33817 . 33818) (#("The authors start by t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33817) (undo-tree-id23007 . -21) (undo-tree-id23008 . -21) (undo-tree-id23009 . -21) (undo-tree-id23010 . -21) (undo-tree-id23011 . -2) (undo-tree-id23012 . -2) (undo-tree-id23013 . -2) (undo-tree-id23014 . -2) (undo-tree-id23015 . -2) (undo-tree-id23016 . -2) (undo-tree-id23017 . -2) (undo-tree-id23018 . -2) (undo-tree-id23019 . -10) (undo-tree-id23020 . -16) (undo-tree-id23021 . -19) (undo-tree-id23022 . -22) (undo-tree-id23023 . -21) (undo-tree-id23024 . -2) (undo-tree-id23025 . -2) (undo-tree-id23026 . -2) (undo-tree-id23027 . -2) (undo-tree-id23028 . -2) (undo-tree-id23029 . -2) (undo-tree-id23030 . -2) (undo-tree-id23031 . -2) (undo-tree-id23032 . -10) (undo-tree-id23033 . -16) (undo-tree-id23034 . -19) (undo-tree-id23035 . -22) (undo-tree-id23036 . -21) (undo-tree-id23037 . -21) (undo-tree-id23038 . -22) (undo-tree-id23039 . -22) (undo-tree-id23040 . -22) 33838) nil (25755 17379 768907 500000) 0 nil])
([nil nil ((#("i" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33849) (undo-tree-id23004 . -1) (undo-tree-id23005 . -1) (undo-tree-id23006 . -1)) nil (25755 17379 768882 653000) 0 nil])
([nil nil ((#("n" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33849) (undo-tree-id23001 . -1) (undo-tree-id23002 . -1) (undo-tree-id23003 . -1)) nil (25755 17379 768879 309000) 0 nil])
([nil nil ((#("g" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33849) (undo-tree-id22998 . -1) (undo-tree-id22999 . -1) (undo-tree-id23000 . -1)) nil (25755 17379 768424 110000) 0 nil])
([nil nil ((33865 . 33866) 33861) nil (25755 17379 768421 487000) 0 nil])
([nil nil ((#("(i.e., if you add
up all the strides greater than 1)" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 52 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33926) (undo-tree-id22996 . -51) (undo-tree-id22997 . -52) 33918) nil (25755 17379 768420 450000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 33925) (undo-tree-id22977 . -1) (undo-tree-id22978 . -1) (undo-tree-id22979 . -1) (undo-tree-id22980 . -1) (undo-tree-id22981 . -1) (undo-tree-id22982 . -1) (undo-tree-id22983 . -1) (undo-tree-id22984 . -1) (undo-tree-id22985 . -1) (undo-tree-id22986 . -1) (undo-tree-id22987 . -1) (undo-tree-id22988 . -1) (undo-tree-id22989 . -1) (undo-tree-id22990 . -1) (undo-tree-id22991 . -1) (undo-tree-id22992 . -1) (undo-tree-id22993 . -1) (undo-tree-id22994 . -1) (undo-tree-id22995 . -1)) nil (25755 17379 768415 242000) 0 nil])
([nil nil ((33927 . 33928)) nil (25755 17379 768401 773000) 0 nil])
([nil nil ((33966 . 33967) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -33966) (undo-tree-id22976 . -1) 33928) nil (25755 17379 768400 285000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -34007) (nil fontified nil 34006 . 34007) (nil wrap-prefix #("  " 0 2 (face org-indent)) 34006 . 34007) (34006 . 34007) 33977) nil (25755 17379 768389 786000) 0 nil])
([nil nil ((34020 . 34022)) nil (25755 17379 768384 599000) 0 nil])
([nil nil ((#("This is clearly too
" 0 20 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23070 . -19) (undo-tree-id23071 . 20) (undo-tree-id23072 . -20) (t 25755 17379 798036 369000)) nil (25755 17388 93903 117000) 0 nil])
([nil nil ((#("coarse" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23067 . -5) (undo-tree-id23068 . 6) (undo-tree-id23069 . -6)) nil (25755 17388 94139 856000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23221 . 1) (undo-tree-id23222 . -1) (undo-tree-id23223 . -1)) nil (25755 17400 356366 363000) 0 nil] [nil nil ((#(", so they add a single upsampling layer that multiplies the resolution
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23064 . -70) (undo-tree-id23065 . 71) (undo-tree-id23066 . -71)) ((34022 . 34093)) (25755 17388 93892 406000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 34022) (undo-tree-id23218 . 1) (undo-tree-id23219 . -1) (undo-tree-id23220 . -1)) nil (25755 17400 356363 884000) 0 nil])
nil
([nil nil ((#("s" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23215 . 1) (undo-tree-id23216 . -1) (undo-tree-id23217 . -1)) nil (25755 17400 356361 379000) 0 nil])
([nil nil ((#("o" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23212 . 1) (undo-tree-id23213 . -1) (undo-tree-id23214 . -1)) nil (25755 17400 356358 745000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 34022) (undo-tree-id23209 . 1) (undo-tree-id23210 . -1) (undo-tree-id23211 . -1)) nil (25755 17400 356356 128000) 0 nil])
([nil nil ((#("t" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23206 . 1) (undo-tree-id23207 . -1) (undo-tree-id23208 . -1)) nil (25755 17400 356353 335000) 0 nil])
([nil nil ((#("h" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23203 . 1) (undo-tree-id23204 . -1) (undo-tree-id23205 . -1)) nil (25755 17400 356350 54000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23199 . 1) (undo-tree-id23200 . 1) (undo-tree-id23201 . -1) (undo-tree-id23202 . -1)) nil (25755 17400 356347 586000) 0 nil])
([nil nil ((#("y" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34022) (undo-tree-id23196 . 1) (undo-tree-id23197 . -1) (undo-tree-id23198 . -1)) nil (25755 17400 356343 877000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34021) (undo-tree-id23077 . -1) (undo-tree-id23078 . -1) (undo-tree-id23079 . -1) (undo-tree-id23080 . -1) (undo-tree-id23081 . -1) (undo-tree-id23082 . -1) (undo-tree-id23083 . -1) (undo-tree-id23084 . -1) (undo-tree-id23085 . -1) (undo-tree-id23086 . -1) (undo-tree-id23087 . -1) (undo-tree-id23088 . -1) (undo-tree-id23089 . -1) (undo-tree-id23090 . -1) (undo-tree-id23091 . -1) (undo-tree-id23092 . -1) (undo-tree-id23093 . -1) (undo-tree-id23094 . -1) (undo-tree-id23095 . -1) (undo-tree-id23096 . -1) (undo-tree-id23097 . -1) (undo-tree-id23098 . -1) (undo-tree-id23099 . -1) (undo-tree-id23100 . -1) (undo-tree-id23101 . -1) (undo-tree-id23102 . -1) (undo-tree-id23103 . -1) (undo-tree-id23104 . -1) (undo-tree-id23105 . -1) (undo-tree-id23106 . -1) (undo-tree-id23107 . -1) (undo-tree-id23108 . -1) (undo-tree-id23109 . -1) (undo-tree-id23110 . -1) (undo-tree-id23111 . -1) (undo-tree-id23112 . -1) (undo-tree-id23113 . -1) (undo-tree-id23114 . -1) (undo-tree-id23115 . -1) (undo-tree-id23116 . -1) (undo-tree-id23117 . -1) (undo-tree-id23118 . -1) (undo-tree-id23119 . -1) (undo-tree-id23120 . -1) (undo-tree-id23121 . -1) (undo-tree-id23122 . -1) (undo-tree-id23123 . -1) (undo-tree-id23124 . -1) (undo-tree-id23125 . -1) (undo-tree-id23126 . -1) (undo-tree-id23127 . -1) (undo-tree-id23128 . -1) (undo-tree-id23129 . -1) (undo-tree-id23130 . -1) (undo-tree-id23131 . -1) (undo-tree-id23132 . -1) (undo-tree-id23133 . -1) (undo-tree-id23134 . -1) (undo-tree-id23135 . -1) (undo-tree-id23136 . -1) (undo-tree-id23137 . -1) (undo-tree-id23138 . -1) (undo-tree-id23139 . -1) (undo-tree-id23140 . -1) (undo-tree-id23141 . -1) (undo-tree-id23142 . -1) (undo-tree-id23143 . -1) (undo-tree-id23144 . -1) (undo-tree-id23145 . -1) (undo-tree-id23146 . -1) (undo-tree-id23147 . -1) (undo-tree-id23148 . -1) (undo-tree-id23149 . -1) (undo-tree-id23150 . -1) (undo-tree-id23151 . -1) (undo-tree-id23152 . -1) (undo-tree-id23153 . -1) (undo-tree-id23154 . -1) (undo-tree-id23155 . -1) (undo-tree-id23156 . -1) (undo-tree-id23157 . -1) (undo-tree-id23158 . -1) (undo-tree-id23159 . -1) (undo-tree-id23160 . -1) (undo-tree-id23161 . -1) (undo-tree-id23162 . -1) (undo-tree-id23163 . -1) (undo-tree-id23164 . -1) (undo-tree-id23165 . -1) (undo-tree-id23166 . -1) (undo-tree-id23167 . -1) (undo-tree-id23168 . -1) (undo-tree-id23169 . -1) (undo-tree-id23170 . -1) (undo-tree-id23171 . -1) (undo-tree-id23172 . -1) (undo-tree-id23173 . -1) (undo-tree-id23174 . -1) (undo-tree-id23175 . -1) (undo-tree-id23176 . -1) (undo-tree-id23177 . -1) (undo-tree-id23178 . -1) (undo-tree-id23179 . -1) (undo-tree-id23180 . -1) (undo-tree-id23181 . -1) (undo-tree-id23182 . -1) (undo-tree-id23183 . -1) (undo-tree-id23184 . -1) (undo-tree-id23185 . -1) (undo-tree-id23186 . -1) (undo-tree-id23187 . -1) (undo-tree-id23188 . -1) (undo-tree-id23189 . -1) (undo-tree-id23190 . -1) (undo-tree-id23191 . -1) (undo-tree-id23192 . -1) (undo-tree-id23193 . -1) (undo-tree-id23194 . -1) (undo-tree-id23195 . -1)) nil (25755 17400 356337 460000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 34021) (undo-tree-id23074 . 1) (undo-tree-id23075 . -1) (undo-tree-id23076 . -1)) nil (25755 17400 356256 216000) 0 nil])
([nil nil ((34081 . 34082) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34081) (undo-tree-id23073 . -1) 34022) nil (25755 17400 356249 167000) 0 nil])
([nil nil ((34089 . 34090) (t 25755 17400 390327 883000) 34081) nil (25755 17402 893327 728000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34849 . 34850) (nil fontified nil 34828 . 34850) (nil fontified nil 34758 . 34828) (nil fontified nil 34679 . 34758) (nil fontified nil 34614 . 34679) (nil fontified nil 34460 . 34614) (nil fontified nil 34392 . 34460) (nil fontified nil 34317 . 34392) (nil fontified nil 34242 . 34317) (nil fontified nil 34165 . 34242) (nil fontified nil 34091 . 34165) (34091 . 34850) (t 25755 17402 918364 23000)) nil (25755 17431 553268 937000) 0 nil])
([nil nil ((34850 . 34851)) nil (25755 17454 359048 287000) 0 nil])
([nil nil ((#("(increasing the size
of an image)" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34144) (undo-tree-id23351 . -32) (undo-tree-id23352 . -33) 34091) nil (25755 17465 702162 924000) 0 nil] [nil nil ((#("(increasing the size
of an image)" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34144) (undo-tree-id23271 . -32) (undo-tree-id23272 . -33) 34091 (t 25755 17431 582779 51000)) ((34144 . 34177)) (25755 17453 801582 304000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34143) (undo-tree-id23273 . -1) (undo-tree-id23274 . -1) (undo-tree-id23275 . -1) (undo-tree-id23276 . -1) (undo-tree-id23277 . -1) (undo-tree-id23278 . -1) (undo-tree-id23279 . -1) (undo-tree-id23280 . -1) (undo-tree-id23281 . -1) (undo-tree-id23282 . -1) (undo-tree-id23283 . -1) (undo-tree-id23284 . -1) (undo-tree-id23285 . -1) (undo-tree-id23286 . -1) (undo-tree-id23287 . -1) (undo-tree-id23288 . -1) (undo-tree-id23289 . -1) (undo-tree-id23290 . -1) (undo-tree-id23291 . -1) (undo-tree-id23292 . -1) (undo-tree-id23293 . -1) (undo-tree-id23294 . -1) (undo-tree-id23295 . -1) (undo-tree-id23296 . -1) (undo-tree-id23297 . -1) (undo-tree-id23298 . -1) (undo-tree-id23299 . -1) (undo-tree-id23300 . -1) (undo-tree-id23301 . -1) (undo-tree-id23302 . -1) (undo-tree-id23303 . -1) (undo-tree-id23304 . -1) (undo-tree-id23305 . -1) (undo-tree-id23306 . -1) (undo-tree-id23307 . -1) (undo-tree-id23308 . -1) (undo-tree-id23309 . -1) (undo-tree-id23310 . -1) (undo-tree-id23311 . -1) (undo-tree-id23312 . -1) (undo-tree-id23313 . -1) (undo-tree-id23314 . -1) (undo-tree-id23315 . -1) (undo-tree-id23316 . -1) (undo-tree-id23317 . -1) (undo-tree-id23318 . -1) (undo-tree-id23319 . -1) (undo-tree-id23320 . -1) (undo-tree-id23321 . -1) (undo-tree-id23322 . -1) (undo-tree-id23323 . -1) (undo-tree-id23324 . -1) (undo-tree-id23325 . -1) (undo-tree-id23326 . -1) (undo-tree-id23327 . -1) (undo-tree-id23328 . -1) (undo-tree-id23329 . -1) (undo-tree-id23330 . -1) (undo-tree-id23331 . -1) (undo-tree-id23332 . -1) (undo-tree-id23333 . -1) (undo-tree-id23334 . -1) (undo-tree-id23335 . -1) (undo-tree-id23336 . -1) (undo-tree-id23337 . -1) (undo-tree-id23338 . -1) (undo-tree-id23339 . -1) (undo-tree-id23340 . -1) (undo-tree-id23341 . -1) (undo-tree-id23342 . -1) (undo-tree-id23343 . -1) (undo-tree-id23344 . -1) (undo-tree-id23345 . -1) (undo-tree-id23346 . -1) (undo-tree-id23347 . -1) (undo-tree-id23348 . -1) (undo-tree-id23349 . -1) (undo-tree-id23350 . -1)) nil (25755 17465 702155 524000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34143) (undo-tree-id23224 . -1) (undo-tree-id23225 . -1) (undo-tree-id23226 . -1) (undo-tree-id23227 . -1) (undo-tree-id23228 . -1) (undo-tree-id23229 . -1) (undo-tree-id23230 . -1) (undo-tree-id23231 . -1) (undo-tree-id23232 . -1) (undo-tree-id23233 . -1) (undo-tree-id23234 . -1) (undo-tree-id23235 . -1) (undo-tree-id23236 . -1) (undo-tree-id23237 . -1) (undo-tree-id23238 . -1) (undo-tree-id23239 . -1) (undo-tree-id23240 . -1) (undo-tree-id23241 . -1) (undo-tree-id23242 . -1) (undo-tree-id23243 . -1) (undo-tree-id23244 . -1) (undo-tree-id23245 . -1) (undo-tree-id23246 . -1) (undo-tree-id23247 . -1) (undo-tree-id23248 . -1) (undo-tree-id23249 . -1) (undo-tree-id23250 . -1) (undo-tree-id23251 . -1) (undo-tree-id23252 . -1) (undo-tree-id23253 . -1) (undo-tree-id23254 . -1) (undo-tree-id23255 . -1) (undo-tree-id23256 . -1) (undo-tree-id23257 . -1) (undo-tree-id23258 . -1) (undo-tree-id23259 . -1) (undo-tree-id23260 . -1) (undo-tree-id23261 . -1) (undo-tree-id23262 . -1) (undo-tree-id23263 . -1) (undo-tree-id23264 . -1) (undo-tree-id23265 . -1) (undo-tree-id23266 . -1) (undo-tree-id23267 . -1) (undo-tree-id23268 . -1) (undo-tree-id23269 . -1) (undo-tree-id23270 . -1)) ((34143 . 34144) (t 25755 17453 519102 931000)) (25755 17453 485423 473000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -34162) (nil fontified nil 34161 . 34162) (nil wrap-prefix #("  " 0 2 (face org-indent)) 34161 . 34162) (34161 . 34162) 34145 (t 25755 17465 783286 278000)) nil (25755 17470 881842 896000) 0 nil])
nil
([nil nil ((34207 . 34208) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34207) (undo-tree-id23374 . -1) 34206 (t 25755 17470 915363 476000)) nil (25755 17494 195151 200000) 0 nil])
([nil nil ((34229 . 34231)) nil (25755 17494 195147 311000) 0 nil])
([nil nil ((#("Instead, they " 0 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34231) (undo-tree-id23353 . -13) (undo-tree-id23354 . -13) (undo-tree-id23355 . 14) (undo-tree-id23356 . -13) (undo-tree-id23357 . -13) (undo-tree-id23358 . -14) (undo-tree-id23359 . -13) (undo-tree-id23360 . -6) (undo-tree-id23361 . -6) (undo-tree-id23362 . -6) (undo-tree-id23363 . -6) (undo-tree-id23364 . -6) (undo-tree-id23365 . -6) (undo-tree-id23366 . -6) (undo-tree-id23367 . -6) (undo-tree-id23368 . -7) (undo-tree-id23369 . -12) (undo-tree-id23370 . -14) (undo-tree-id23371 . -13) (undo-tree-id23372 . -13) (undo-tree-id23373 . -14) 34244) nil (25755 17494 195143 19000) 0 nil])
([nil nil ((34270 . 34271) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34270) (undo-tree-id23423 . -1) 34231 (t 25755 17494 275718 289000)) nil (25755 17513 525820 173000) 0 nil])
([nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34268) (undo-tree-id23812 . -1) (undo-tree-id23813 . -1)) nil (25755 17573 382747 139000) 0 nil] [nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34268) (undo-tree-id23421 . -1) (undo-tree-id23422 . -1)) ((34268 . 34269)) (25755 17512 739164 372000) 0 nil])
([nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34268) (undo-tree-id23766 . -1) (undo-tree-id23767 . -1) (undo-tree-id23768 . -1) (undo-tree-id23769 . -1) (undo-tree-id23770 . -1) (undo-tree-id23771 . -1) (undo-tree-id23772 . -1) (undo-tree-id23773 . -1) (undo-tree-id23774 . -1) (undo-tree-id23775 . -1) (undo-tree-id23776 . -1) (undo-tree-id23777 . -1) (undo-tree-id23778 . -1) (undo-tree-id23779 . -1) (undo-tree-id23780 . -1) (undo-tree-id23781 . -1) (undo-tree-id23782 . -1) (undo-tree-id23783 . -1) (undo-tree-id23784 . -1) (undo-tree-id23785 . -1) (undo-tree-id23786 . -1) (undo-tree-id23787 . -1) (undo-tree-id23788 . -1) (undo-tree-id23789 . -1) (undo-tree-id23790 . -1) (undo-tree-id23791 . -1) (undo-tree-id23792 . -1) (undo-tree-id23793 . -1) (undo-tree-id23794 . -1) (undo-tree-id23795 . -1) (undo-tree-id23796 . -1) (undo-tree-id23797 . -1) (undo-tree-id23798 . -1) (undo-tree-id23799 . -1) (undo-tree-id23800 . -1) (undo-tree-id23801 . -1) (undo-tree-id23802 . -1) (undo-tree-id23803 . -1) (undo-tree-id23804 . -1) (undo-tree-id23805 . -1) (undo-tree-id23806 . -1) (undo-tree-id23807 . -1) (undo-tree-id23808 . -1) (undo-tree-id23809 . -1) (undo-tree-id23810 . -1) (undo-tree-id23811 . -1)) nil (25755 17573 382743 693000) 0 nil])
([nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34268) (undo-tree-id23375 . -1) (undo-tree-id23376 . -1) (undo-tree-id23377 . -1) (undo-tree-id23378 . -1) (undo-tree-id23379 . -1) (undo-tree-id23380 . -1) (undo-tree-id23381 . -1) (undo-tree-id23382 . -1) (undo-tree-id23383 . -1) (undo-tree-id23384 . -1) (undo-tree-id23385 . -1) (undo-tree-id23386 . -1) (undo-tree-id23387 . -1) (undo-tree-id23388 . -1) (undo-tree-id23389 . -1) (undo-tree-id23390 . -1) (undo-tree-id23391 . -1) (undo-tree-id23392 . -1) (undo-tree-id23393 . -1) (undo-tree-id23394 . -1) (undo-tree-id23395 . -1) (undo-tree-id23396 . -1) (undo-tree-id23397 . -1) (undo-tree-id23398 . -1) (undo-tree-id23399 . -1) (undo-tree-id23400 . -1) (undo-tree-id23401 . -1) (undo-tree-id23402 . -1) (undo-tree-id23403 . -1) (undo-tree-id23404 . -1) (undo-tree-id23405 . -1) (undo-tree-id23406 . -1) (undo-tree-id23407 . -1) (undo-tree-id23408 . -1) (undo-tree-id23409 . -1) (undo-tree-id23410 . -1) (undo-tree-id23411 . -1) (undo-tree-id23412 . -1) (undo-tree-id23413 . -1) (undo-tree-id23414 . -1) (undo-tree-id23415 . -1) (undo-tree-id23416 . -1) (undo-tree-id23417 . -1) (undo-tree-id23418 . -1) (undo-tree-id23419 . -1) (undo-tree-id23420 . -1)) ((34268 . 34269)) (25755 17512 738501 178000) 0 nil])
([nil nil ((34269 . 34270)) nil (25755 17573 382714 683000) 0 nil])
nil
([nil nil ((#("(see
Figure 14-27)" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34408) (undo-tree-id23764 . -17) (undo-tree-id23765 . -18) 34388) nil (25755 17573 382713 570000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34407) (undo-tree-id23442 . -1) (undo-tree-id23443 . -1) (undo-tree-id23444 . -1) (undo-tree-id23445 . -1) (undo-tree-id23446 . -1) (undo-tree-id23447 . -1) (undo-tree-id23448 . -1) (undo-tree-id23449 . -1) (undo-tree-id23450 . -1) (undo-tree-id23451 . -1) (undo-tree-id23452 . -1) (undo-tree-id23453 . -1) (undo-tree-id23454 . -1) (undo-tree-id23455 . -1) (undo-tree-id23456 . -1) (undo-tree-id23457 . -1) (undo-tree-id23458 . -1) (undo-tree-id23459 . -1) (undo-tree-id23460 . -1) (undo-tree-id23461 . -1) (undo-tree-id23462 . -1) (undo-tree-id23463 . -1) (undo-tree-id23464 . -1) (undo-tree-id23465 . -1) (undo-tree-id23466 . -1) (undo-tree-id23467 . -1) (undo-tree-id23468 . -1) (undo-tree-id23469 . -1) (undo-tree-id23470 . -1) (undo-tree-id23471 . -1) (undo-tree-id23472 . -1) (undo-tree-id23473 . -1) (undo-tree-id23474 . -1) (undo-tree-id23475 . -1) (undo-tree-id23476 . -1) (undo-tree-id23477 . -1) (undo-tree-id23478 . -1) (undo-tree-id23479 . -1) (undo-tree-id23480 . -1) (undo-tree-id23481 . -1) (undo-tree-id23482 . -1) (undo-tree-id23483 . -1) (undo-tree-id23484 . -1) (undo-tree-id23485 . -1) (undo-tree-id23486 . -1) (undo-tree-id23487 . -1) (undo-tree-id23488 . -1) (undo-tree-id23489 . -1) (undo-tree-id23490 . -1) (undo-tree-id23491 . -1) (undo-tree-id23492 . -1) (undo-tree-id23493 . -1) (undo-tree-id23494 . -1) (undo-tree-id23495 . -1) (undo-tree-id23496 . -1) (undo-tree-id23497 . -1) (undo-tree-id23498 . -1) (undo-tree-id23499 . -1) (undo-tree-id23500 . -1) (undo-tree-id23501 . -1) (undo-tree-id23502 . -1) (undo-tree-id23503 . -1) (undo-tree-id23504 . -1) (undo-tree-id23505 . -1) (undo-tree-id23506 . -1) (undo-tree-id23507 . -1) (undo-tree-id23508 . -1) (undo-tree-id23509 . -1) (undo-tree-id23510 . -1) (undo-tree-id23511 . -1) (undo-tree-id23512 . -1) (undo-tree-id23513 . -1) (undo-tree-id23514 . -1) (undo-tree-id23515 . -1) (undo-tree-id23516 . -1) (undo-tree-id23517 . -1) (undo-tree-id23518 . -1) (undo-tree-id23519 . -1) (undo-tree-id23520 . -1) (undo-tree-id23521 . -1) (undo-tree-id23522 . -1) (undo-tree-id23523 . -1) (undo-tree-id23524 . -1) (undo-tree-id23525 . -1) (undo-tree-id23526 . -1) (undo-tree-id23527 . -1) (undo-tree-id23528 . -1) (undo-tree-id23529 . -1) (undo-tree-id23530 . -1) (undo-tree-id23531 . -1) (undo-tree-id23532 . -1) (undo-tree-id23533 . -1) (undo-tree-id23534 . -1) (undo-tree-id23535 . -1) (undo-tree-id23536 . -1) (undo-tree-id23537 . -1) (undo-tree-id23538 . -1) (undo-tree-id23539 . -1) (undo-tree-id23540 . -1) (undo-tree-id23541 . -1) (undo-tree-id23542 . -1) (undo-tree-id23543 . -1) (undo-tree-id23544 . -1) (undo-tree-id23545 . -1) (undo-tree-id23546 . -1) (undo-tree-id23547 . -1) (undo-tree-id23548 . -1) (undo-tree-id23549 . -1) (undo-tree-id23550 . -1) (undo-tree-id23551 . -1) (undo-tree-id23552 . -1) (undo-tree-id23553 . -1) (undo-tree-id23554 . -1) (undo-tree-id23555 . -1) (undo-tree-id23556 . -1) (undo-tree-id23557 . -1) (undo-tree-id23558 . -1) (undo-tree-id23559 . -1) (undo-tree-id23560 . -1) (undo-tree-id23561 . -1) (undo-tree-id23562 . -1) (undo-tree-id23563 . -1) (undo-tree-id23564 . -1) (undo-tree-id23565 . -1) (undo-tree-id23566 . -1) (undo-tree-id23567 . -1) (undo-tree-id23568 . -1) (undo-tree-id23569 . -1) (undo-tree-id23570 . -1) (undo-tree-id23571 . -1) (undo-tree-id23572 . -1) (undo-tree-id23573 . -1) (undo-tree-id23574 . -1) (undo-tree-id23575 . -1) (undo-tree-id23576 . -1) (undo-tree-id23577 . -1) (undo-tree-id23578 . -1) (undo-tree-id23579 . -1) (undo-tree-id23580 . -1) (undo-tree-id23581 . -1) (undo-tree-id23582 . -1) (undo-tree-id23583 . -1) (undo-tree-id23584 . -1) (undo-tree-id23585 . -1) (undo-tree-id23586 . -1) (undo-tree-id23587 . -1) (undo-tree-id23588 . -1) (undo-tree-id23589 . -1) (undo-tree-id23590 . -1) (undo-tree-id23591 . -1) (undo-tree-id23592 . -1) (undo-tree-id23593 . -1) (undo-tree-id23594 . -1) (undo-tree-id23595 . -1) (undo-tree-id23596 . -1) (undo-tree-id23597 . -1) (undo-tree-id23598 . -1) (undo-tree-id23599 . -1) (undo-tree-id23600 . -1) (undo-tree-id23601 . -1) (undo-tree-id23602 . -1) (undo-tree-id23603 . -1) (undo-tree-id23604 . -1) (undo-tree-id23605 . -1) (undo-tree-id23606 . -1) (undo-tree-id23607 . -1) (undo-tree-id23608 . -1) (undo-tree-id23609 . -1) (undo-tree-id23610 . -1) (undo-tree-id23611 . -1) (undo-tree-id23612 . -1) (undo-tree-id23613 . -1) (undo-tree-id23614 . -1) (undo-tree-id23615 . -1) (undo-tree-id23616 . -1) (undo-tree-id23617 . -1) (undo-tree-id23618 . -1) (undo-tree-id23619 . -1) (undo-tree-id23620 . -1) (undo-tree-id23621 . -1) (undo-tree-id23622 . -1) (undo-tree-id23623 . -1) (undo-tree-id23624 . -1) (undo-tree-id23625 . -1) (undo-tree-id23626 . -1) (undo-tree-id23627 . -1) (undo-tree-id23628 . -1) (undo-tree-id23629 . -1) (undo-tree-id23630 . -1) (undo-tree-id23631 . -1) (undo-tree-id23632 . -1) (undo-tree-id23633 . -1) (undo-tree-id23634 . -1) (undo-tree-id23635 . -1) (undo-tree-id23636 . -1) (undo-tree-id23637 . -1) (undo-tree-id23638 . -1) (undo-tree-id23639 . -1) (undo-tree-id23640 . -1) (undo-tree-id23641 . -1) (undo-tree-id23642 . -1) (undo-tree-id23643 . -1) (undo-tree-id23644 . -1) (undo-tree-id23645 . -1) (undo-tree-id23646 . -1) (undo-tree-id23647 . -1) (undo-tree-id23648 . -1) (undo-tree-id23649 . -1) (undo-tree-id23650 . -1) (undo-tree-id23651 . -1) (undo-tree-id23652 . -1) (undo-tree-id23653 . -1) (undo-tree-id23654 . -1) (undo-tree-id23655 . -1) (undo-tree-id23656 . -1) (undo-tree-id23657 . -1) (undo-tree-id23658 . -1) (undo-tree-id23659 . -1) (undo-tree-id23660 . -1) (undo-tree-id23661 . -1) (undo-tree-id23662 . -1) (undo-tree-id23663 . -1) (undo-tree-id23664 . -1) (undo-tree-id23665 . -1) (undo-tree-id23666 . -1) (undo-tree-id23667 . -1) (undo-tree-id23668 . -1) (undo-tree-id23669 . -1) (undo-tree-id23670 . -1) (undo-tree-id23671 . -1) (undo-tree-id23672 . -1) (undo-tree-id23673 . -1) (undo-tree-id23674 . -1) (undo-tree-id23675 . -1) (undo-tree-id23676 . -1) (undo-tree-id23677 . -1) (undo-tree-id23678 . -1) (undo-tree-id23679 . -1) (undo-tree-id23680 . -1) (undo-tree-id23681 . -1) (undo-tree-id23682 . -1) (undo-tree-id23683 . -1) (undo-tree-id23684 . -1) (undo-tree-id23685 . -1) (undo-tree-id23686 . -1) (undo-tree-id23687 . -1) (undo-tree-id23688 . -1) (undo-tree-id23689 . -1) (undo-tree-id23690 . -1) (undo-tree-id23691 . -1) (undo-tree-id23692 . -1) (undo-tree-id23693 . -1) (undo-tree-id23694 . -1) (undo-tree-id23695 . -1) (undo-tree-id23696 . -1) (undo-tree-id23697 . -1) (undo-tree-id23698 . -1) (undo-tree-id23699 . -1) (undo-tree-id23700 . -1) (undo-tree-id23701 . -1) (undo-tree-id23702 . -1) (undo-tree-id23703 . -1) (undo-tree-id23704 . -1) (undo-tree-id23705 . -1) (undo-tree-id23706 . -1) (undo-tree-id23707 . -1) (undo-tree-id23708 . -1) (undo-tree-id23709 . -1) (undo-tree-id23710 . -1) (undo-tree-id23711 . -1) (undo-tree-id23712 . -1) (undo-tree-id23713 . -1) (undo-tree-id23714 . -1) (undo-tree-id23715 . -1) (undo-tree-id23716 . -1) (undo-tree-id23717 . -1) (undo-tree-id23718 . -1) (undo-tree-id23719 . -1) (undo-tree-id23720 . -1) (undo-tree-id23721 . -1) (undo-tree-id23722 . -1) (undo-tree-id23723 . -1) (undo-tree-id23724 . -1) (undo-tree-id23725 . -1) (undo-tree-id23726 . -1) (undo-tree-id23727 . -1) (undo-tree-id23728 . -1) (undo-tree-id23729 . -1) (undo-tree-id23730 . -1) (undo-tree-id23731 . -1) (undo-tree-id23732 . -1) (undo-tree-id23733 . -1) (undo-tree-id23734 . -1) (undo-tree-id23735 . -1) (undo-tree-id23736 . -1) (undo-tree-id23737 . -1) (undo-tree-id23738 . -1) (undo-tree-id23739 . -1) (undo-tree-id23740 . -1) (undo-tree-id23741 . -1) (undo-tree-id23742 . -1) (undo-tree-id23743 . -1) (undo-tree-id23744 . -1) (undo-tree-id23745 . -1) (undo-tree-id23746 . -1) (undo-tree-id23747 . -1) (undo-tree-id23748 . -1) (undo-tree-id23749 . -1) (undo-tree-id23750 . -1) (undo-tree-id23751 . -1) (undo-tree-id23752 . -1) (undo-tree-id23753 . -1) (undo-tree-id23754 . -1) (undo-tree-id23755 . -1) (undo-tree-id23756 . -1) (undo-tree-id23757 . -1) (undo-tree-id23758 . -1) (undo-tree-id23759 . -1) (undo-tree-id23760 . -1) (undo-tree-id23761 . -1) (undo-tree-id23762 . -1) (undo-tree-id23763 . -1)) nil (25755 17573 382699 917000) 0 nil])
([nil nil ((34409 . 34411)) nil (25755 17573 381898 451000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . -34492) (nil fontified nil 34491 . 34492) (nil wrap-prefix #("  " 0 2 (face org-indent)) 34491 . 34492) (34491 . 34492) 34426) nil (25755 17573 381897 261000) 0 nil])
([nil nil ((34486 . 34487)) nil (25755 17573 381895 604000) 0 nil])
([nil nil ((34492 . 34493) (#("
" 0 1 (fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -34492) (undo-tree-id23424 . -1) (undo-tree-id23425 . -1) (undo-tree-id23426 . -1) (undo-tree-id23427 . -1) (undo-tree-id23428 . -1) (undo-tree-id23429 . -1) (undo-tree-id23430 . -1) (undo-tree-id23431 . -1) (undo-tree-id23432 . -1) (undo-tree-id23433 . -1) (undo-tree-id23434 . -1) (undo-tree-id23435 . -1) (undo-tree-id23436 . -1) (undo-tree-id23437 . -1) (undo-tree-id23438 . -1) (undo-tree-id23439 . -1) (undo-tree-id23440 . -1) (undo-tree-id23441 . -1) 34487) nil (25755 17573 381891 493000) 0 nil])
([nil nil ((#("(e.g., 1/2 in Figure 14-27)" 0 6 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 6 27 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34522) (undo-tree-id23826 . -26) (undo-tree-id23827 . -27) 34492 (t 25755 17573 464960 65000)) nil (25755 17585 458069 430000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34521) (undo-tree-id23814 . -1) (undo-tree-id23815 . -1) (undo-tree-id23816 . -1) (undo-tree-id23817 . -1) (undo-tree-id23818 . -1) (undo-tree-id23819 . -1) (undo-tree-id23820 . -1) (undo-tree-id23821 . -1) (undo-tree-id23822 . -1) (undo-tree-id23823 . -1) (undo-tree-id23824 . -1) (undo-tree-id23825 . -1)) nil (25755 17585 458064 885000) 0 nil])
([nil nil ((34523 . 34524)) nil (25755 17585 458042 148000) 0 nil])
([nil nil ((34630 . 34632) (t 25755 17585 533154 213000)) nil (25755 17600 663080 82000) 0 nil])
([nil nil ((34667 . 34669) (t 25755 17600 693399 822000)) nil (25755 17604 619323 969000) 0 nil])
([nil nil ((34671 . 34672) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34671) (undo-tree-id23828 . -1) 34669) nil (25755 17604 619320 246000) 0 nil])
([nil nil ((#("In tf.keras, you can use the" 0 28 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34713) (undo-tree-id23833 . -27) (undo-tree-id23834 . -28) (undo-tree-id23835 . -28) (t 25755 17604 645464 155000)) nil (25755 17622 13424 969000) 0 nil])
([nil nil ((#("Conv2DTranspose layer.
" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 22 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 22 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 34714) (undo-tree-id23829 . -22) (undo-tree-id23830 . 23) (undo-tree-id23831 . -4) (undo-tree-id23832 . -23)) nil (25755 17622 13420 777000) 0 nil])
([nil nil ((34714 . 34715) 34714) nil (25755 17622 13404 171000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36946 . 36947) (nil fontified nil 36913 . 36947) (nil fontified nil 36838 . 36913) (nil fontified nil 36762 . 36838) (nil fontified nil 36691 . 36762) (nil fontified nil 36614 . 36691) (nil fontified nil 36539 . 36614) (nil fontified nil 36466 . 36539) (nil fontified nil 36392 . 36466) (nil fontified nil 36244 . 36392) (nil fontified nil 36173 . 36244) (nil fontified nil 36097 . 36173) (nil fontified nil 36029 . 36097) (nil fontified nil 35951 . 36029) (nil fontified nil 35945 . 35951) (nil fontified nil 35874 . 35945) (nil fontified nil 35806 . 35874) (nil fontified nil 35739 . 35806) (nil fontified nil 35676 . 35739) (nil fontified nil 35651 . 35676) (nil fontified nil 35600 . 35651) (nil fontified nil 35544 . 35600) (nil fontified nil 35479 . 35544) (nil fontified nil 35411 . 35479) (nil fontified nil 35341 . 35411) (nil fontified nil 35273 . 35341) (nil fontified nil 35203 . 35273) (nil fontified nil 35134 . 35203) (nil fontified nil 35072 . 35134) (nil fontified nil 35058 . 35072) (nil fontified nil 34991 . 35058) (nil fontified nil 34971 . 34991) (nil fontified nil 34903 . 34971) (nil fontified nil 34835 . 34903) (nil fontified nil 34815 . 34835) (nil fontified nil 34749 . 34815) (nil fontified nil 34715 . 34749) (34715 . 36947) (t 25755 17622 45748 881000)) nil (25755 17667 269898 174000) 0 nil])
([nil nil ((36947 . 36948)) nil (25755 17667 269887 419000) 0 nil])
([nil nil ((33381 . 33382) (t 25755 17667 306500 297000)) nil (25755 17677 277163 160000) 0 nil])
([nil nil ((34716 . 34719) (t 25755 17677 306668 326000)) nil (25755 17696 937978 881000) 0 nil])
([nil nil ((#("TensorFlow also offers a few other kinds of convolutional layers:
" 0 66 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23880 . -65) (undo-tree-id23881 . -66) (t 25755 17696 971000 750000)) nil (25755 17728 736506 732000) 0 nil])
([nil nil ((#("keras.layers.Conv1D
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 20 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23876 . -19) (undo-tree-id23877 . 20) (undo-tree-id23878 . -5) (undo-tree-id23879 . -20)) nil (25755 17728 736504 288000) 0 nil])
([nil nil ((#("Creates a convolutional layer for 1D inputs, such as time series or
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 68 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23874 . -67) (undo-tree-id23875 . -68)) nil (25755 17728 736499 513000) 0 nil])
([nil nil ((#("text (sequences of letters or words), as we will see in Chapter 15.
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 68 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23872 . -67) (undo-tree-id23873 . -68)) nil (25755 17728 736497 562000) 0 nil])
([nil nil ((#("keras.layers.Conv3D
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 20 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23868 . -19) (undo-tree-id23869 . 20) (undo-tree-id23870 . -5) (undo-tree-id23871 . -20)) nil (25755 17728 736495 520000) 0 nil])
([nil nil ((#("Creates a convolutional layer for 3D inputs, such as 3D PET scans.
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 67 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23866 . -66) (undo-tree-id23867 . -67)) nil (25755 17728 736492 375000) 0 nil])
([nil nil ((#("dilation_rate
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 8 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 8 9 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 9 13 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 13 14 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23864 . -13) (undo-tree-id23865 . -14)) nil (25755 17728 736489 854000) 0 nil])
([nil nil ((#("Setting the dilation_rate hyperparameter of any convolutional
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 20 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 20 21 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 21 25 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 25 62 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23862 . -61) (undo-tree-id23863 . -62)) nil (25755 17728 736487 598000) 0 nil])
([nil nil ((#("layer to a value of 2 or more creates an à-trous convolutional layer
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 69 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23860 . -68) (undo-tree-id23861 . -69)) nil (25755 17728 736485 671000) 0 nil])
([nil nil ((#("(“à trous” is French for “with holes”). This is equivalent to using a
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 12 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 12 70 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23854 . -69) (undo-tree-id23855 . 70) (undo-tree-id23856 . -1) (undo-tree-id23857 . 33) (undo-tree-id23858 . -38) (undo-tree-id23859 . -70)) nil (25755 17728 736483 171000) 0 nil])
([nil nil ((#("regular convolutional layer with a filter dilated by inserting rows
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 68 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23852 . -67) (undo-tree-id23853 . -68)) nil (25755 17728 736477 225000) 0 nil])
([nil nil ((#("and columns of zeros (i.e., holes). For example, a 1 × 3 filter equal
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 70 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23850 . -69) (undo-tree-id23851 . -70)) nil (25755 17728 736332 852000) 0 nil])
([nil nil ((#("to [[1,2,3]] may be dilated with a dilation rate of 4, resulting in
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 3 4 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1,2,3" htmlize-link (:uri "1,2,3") invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 4 5 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1,2,3" htmlize-link (:uri "1,2,3") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 5 9 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1,2,3" htmlize-link (:uri "1,2,3") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 9 10 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1,2,3" htmlize-link (:uri "1,2,3") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 10 11 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1,2,3" htmlize-link (:uri "1,2,3") invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 11 12 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo "LINK: 1,2,3" htmlize-link (:uri "1,2,3") invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 12 68 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23848 . -67) (undo-tree-id23849 . -68)) nil (25755 17728 736330 743000) 0 nil])
([nil nil ((#("a dilated filter of [[1, 0, 0, 0, 2, 0, 0, 0, 3]]. This lets the
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 20 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 20 21 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1, 0, 0, 0, 2, 0, 0, 0, 3" htmlize-link (:uri "1, 0, 0, 0, 2, 0, 0, 0, 3") invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 21 22 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1, 0, 0, 0, 2, 0, 0, 0, 3" htmlize-link (:uri "1, 0, 0, 0, 2, 0, 0, 0, 3") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 22 46 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1, 0, 0, 0, 2, 0, 0, 0, 3" htmlize-link (:uri "1, 0, 0, 0, 2, 0, 0, 0, 3") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 46 47 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1, 0, 0, 0, 2, 0, 0, 0, 3" htmlize-link (:uri "1, 0, 0, 0, 2, 0, 0, 0, 3") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 47 48 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t help-echo "LINK: 1, 0, 0, 0, 2, 0, 0, 0, 3" htmlize-link (:uri "1, 0, 0, 0, 2, 0, 0, 0, 3") invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 48 49 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo "LINK: 1, 0, 0, 0, 2, 0, 0, 0, 3" htmlize-link (:uri "1, 0, 0, 0, 2, 0, 0, 0, 3") invisible org-link face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 49 65 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23846 . -64) (undo-tree-id23847 . -65)) nil (25755 17728 736328 699000) 0 nil])
([nil nil ((#("convolutional layer have a larger receptive field at no
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 56 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23842 . -55) (undo-tree-id23843 . 56) (undo-tree-id23844 . -13) (undo-tree-id23845 . -56)) nil (25755 17728 736326 656000) 0 nil])
([nil nil ((#("computational price and using no extra parameters.
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 51 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23840 . -50) (undo-tree-id23841 . -51)) nil (25755 17728 736322 525000) 0 nil])
([nil nil ((#("tf.nn.depthwise_conv2d()
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 15 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 15 16 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t invisible t) 16 22 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t display ((raise -0.3) (height 0.7))) 22 25 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23836 . -24) (undo-tree-id23837 . 25) (undo-tree-id23838 . -2) (undo-tree-id23839 . -25)) nil (25755 17728 736317 180000) 0 nil])
([nil nil ((#("Can be used to create a depthwise convolutional layer (but you
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 63 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23884 . -62) (undo-tree-id23885 . 39) (undo-tree-id23886 . -33) (undo-tree-id23887 . -63) (t 25755 17728 771543 780000)) nil (25755 17733 361894 308000) 0 nil])
([nil nil ((#("need to create the variables yourself). It applies every filter to
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 34 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 34 67 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23894 . -66) (undo-tree-id23895 . -67)) nil (25755 17740 175750 697000) 0 nil] [nil nil ((#("need to create the variables yourself). It applies every filter to
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 34 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 34 67 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23882 . -66) (undo-tree-id23883 . -67)) ((34753 . 34820)) (25755 17733 361567 723000) 0 nil])
([nil nil ((#("every individual input channel independently. Thus, if there are fn
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 68 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23892 . -67) (undo-tree-id23893 . -68)) nil (25755 17740 175747 963000) 0 nil])
nil
([nil nil ((#("filters and fn′ input channels, then this will output fn × fn′ feature
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 71 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23890 . -70) (undo-tree-id23891 . -71)) nil (25755 17740 175744 906000) 0 nil])
([nil nil ((#("maps.
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 6 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id23888 . -5) (undo-tree-id23889 . -6)) nil (25755 17740 175739 933000) 0 nil])
([nil nil ((#("This solution is OK, but still too imprecise. To do better, the authors added
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 78 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24262 . -77) (undo-tree-id24263 . -78) (t 25755 17740 255741 472000)) nil (25755 17792 763731 251000) 0 nil])
([nil nil ((#("skip connections from lower layers: for example, they upsampled the
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 68 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24260 . -67) (undo-tree-id24261 . -68)) nil (25755 17792 763727 715000) 0 nil])
([nil nil ((#("output image by a factor of 2 (instead of 32), and they added the output of
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 76 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24258 . -75) (undo-tree-id24259 . -76)) nil (25755 17792 763725 72000) 0 nil])
([nil nil ((#("a lower layer that had this double resolution. Then they upsampled the
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 71 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24256 . -70) (undo-tree-id24257 . -71)) nil (25755 17792 763722 670000) 0 nil])
([nil nil ((#("result by a factor of 16, leading to a total upsampling factor of 32 (seeFigure 14-28). This recovered some of the spatial resolution that was lost
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 62 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 62 148 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24254 . -147) (undo-tree-id24255 . -148)) nil (25755 17792 763560 672000) 0 nil])
([nil nil ((#("in earlier pooling layers. In their best architecture, they used a second
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 74 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24252 . -73) (undo-tree-id24253 . -74)) nil (25755 17792 763558 349000) 0 nil])
([nil nil ((#("similar skip connection to recover even finer details from an even lower
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 73 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24250 . -72) (undo-tree-id24251 . -73)) nil (25755 17792 763556 384000) 0 nil])
([nil nil ((#("layer. In short, the output of the original CNN goes through the following
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 75 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24248 . -74) (undo-tree-id24249 . -75)) nil (25755 17792 763554 503000) 0 nil])
([nil nil ((#("extra steps: upscale ×2, add the output of a lower layer (of the appropriate
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 77 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24246 . -76) (undo-tree-id24247 . -77)) nil (25755 17792 763552 620000) 0 nil])
([nil nil ((#("scale), upscale ×2, add the output of an even lower layer, and finally
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t) 1 71 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) fontified t)) . 34753) (undo-tree-id24244 . -70) (undo-tree-id24245 . -71)) nil (25755 17792 763550 193000) 0 nil])
([nil nil ((#("TENSORFLOW CONVOLUTION OPERATIONS" 0 33 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t face org-level-2)) . 34719) (undo-tree-id24241 . -32) (undo-tree-id24242 . 33) (undo-tree-id24243 . -33) 34753) nil (25755 17792 763548 40000) 0 nil])
([nil nil ((#("** 
" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-hide keymap (keymap)) 1 2 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) composition (3 1 [9679]) keymap (keymap) face org-level-2) 2 3 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) keymap (keymap) face org-level-2) 3 4 (line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) fontified t)) . 34716) (undo-tree-id23988 . -3) (undo-tree-id23989 . 1) (undo-tree-id23990 . -4) (undo-tree-id23991 . -2) (undo-tree-id23992 . -4) (undo-tree-id23993 . -4) (undo-tree-id23994 . -4) (undo-tree-id23995 . -4) (undo-tree-id23996 . -4) (undo-tree-id23997 . -4) (undo-tree-id23998 . -4) (undo-tree-id23999 . -4) (undo-tree-id24000 . -4) (undo-tree-id24001 . -4) (undo-tree-id24002 . -4) (undo-tree-id24003 . -4) (undo-tree-id24004 . -4) (undo-tree-id24005 . -4) (undo-tree-id24006 . -4) (undo-tree-id24007 . -4) (undo-tree-id24008 . -4) (undo-tree-id24009 . -4) (undo-tree-id24010 . -4) (undo-tree-id24011 . -4) (undo-tree-id24012 . -4) (undo-tree-id24013 . -4) (undo-tree-id24014 . -4) (undo-tree-id24015 . -4) (undo-tree-id24016 . -4) (undo-tree-id24017 . -4) (undo-tree-id24018 . -4) (undo-tree-id24019 . -4) (undo-tree-id24020 . -4) (undo-tree-id24021 . -4) (undo-tree-id24022 . -4) (undo-tree-id24023 . -4) (undo-tree-id24024 . -4) (undo-tree-id24025 . -4) (undo-tree-id24026 . -4) (undo-tree-id24027 . -4) (undo-tree-id24028 . -4) (undo-tree-id24029 . -4) (undo-tree-id24030 . -4) (undo-tree-id24031 . -4) (undo-tree-id24032 . -4) (undo-tree-id24033 . -4) (undo-tree-id24034 . -4) (undo-tree-id24035 . -4) (undo-tree-id24036 . -4) (undo-tree-id24037 . -4) (undo-tree-id24038 . -4) (undo-tree-id24039 . -4) (undo-tree-id24040 . -4) (undo-tree-id24041 . -4) (undo-tree-id24042 . -4) (undo-tree-id24043 . -4) (undo-tree-id24044 . -4) (undo-tree-id24045 . -4) (undo-tree-id24046 . -4) (undo-tree-id24047 . -4) (undo-tree-id24048 . -4) (undo-tree-id24049 . -4) (undo-tree-id24050 . -4) (undo-tree-id24051 . -4) (undo-tree-id24052 . -4) (undo-tree-id24053 . -4) (undo-tree-id24054 . -4) (undo-tree-id24055 . -4) (undo-tree-id24056 . -4) (undo-tree-id24057 . -4) (undo-tree-id24058 . -4) (undo-tree-id24059 . -4) (undo-tree-id24060 . -4) (undo-tree-id24061 . -4) (undo-tree-id24062 . -4) (undo-tree-id24063 . -4) (undo-tree-id24064 . -4) (undo-tree-id24065 . -4) (undo-tree-id24066 . -4) (undo-tree-id24067 . -4) (undo-tree-id24068 . -4) (undo-tree-id24069 . -4) (undo-tree-id24070 . -4) (undo-tree-id24071 . -4) (undo-tree-id24072 . -4) (undo-tree-id24073 . -4) (undo-tree-id24074 . -4) (undo-tree-id24075 . -4) (undo-tree-id24076 . -4) (undo-tree-id24077 . -4) (undo-tree-id24078 . -4) (undo-tree-id24079 . -4) (undo-tree-id24080 . -4) (undo-tree-id24081 . -4) (undo-tree-id24082 . -4) (undo-tree-id24083 . -4) (undo-tree-id24084 . -4) (undo-tree-id24085 . -4) (undo-tree-id24086 . -4) (undo-tree-id24087 . -4) (undo-tree-id24088 . -4) (undo-tree-id24089 . -4) (undo-tree-id24090 . -4) (undo-tree-id24091 . -4) (undo-tree-id24092 . -4) (undo-tree-id24093 . -4) (undo-tree-id24094 . -4) (undo-tree-id24095 . -4) (undo-tree-id24096 . -4) (undo-tree-id24097 . -4) (undo-tree-id24098 . -4) (undo-tree-id24099 . -4) (undo-tree-id24100 . -4) (undo-tree-id24101 . -4) (undo-tree-id24102 . -4) (undo-tree-id24103 . -4) (undo-tree-id24104 . -4) (undo-tree-id24105 . -4) (undo-tree-id24106 . -4) (undo-tree-id24107 . -4) (undo-tree-id24108 . -4) (undo-tree-id24109 . -4) (undo-tree-id24110 . -4) (undo-tree-id24111 . -4) (undo-tree-id24112 . -4) (undo-tree-id24113 . -4) (undo-tree-id24114 . -4) (undo-tree-id24115 . -4) (undo-tree-id24116 . -4) (undo-tree-id24117 . -4) (undo-tree-id24118 . -4) (undo-tree-id24119 . -4) (undo-tree-id24120 . -4) (undo-tree-id24121 . -4) (undo-tree-id24122 . -4) (undo-tree-id24123 . -4) (undo-tree-id24124 . -4) (undo-tree-id24125 . -4) (undo-tree-id24126 . -4) (undo-tree-id24127 . -4) (undo-tree-id24128 . -4) (undo-tree-id24129 . -4) (undo-tree-id24130 . -4) (undo-tree-id24131 . -4) (undo-tree-id24132 . -4) (undo-tree-id24133 . -4) (undo-tree-id24134 . -4) (undo-tree-id24135 . -4) (undo-tree-id24136 . -4) (undo-tree-id24137 . -4) (undo-tree-id24138 . -4) (undo-tree-id24139 . -4) (undo-tree-id24140 . -4) (undo-tree-id24141 . -4) (undo-tree-id24142 . -4) (undo-tree-id24143 . -4) (undo-tree-id24144 . -4) (undo-tree-id24145 . -4) (undo-tree-id24146 . -4) (undo-tree-id24147 . -4) (undo-tree-id24148 . -4) (undo-tree-id24149 . -4) (undo-tree-id24150 . -4) (undo-tree-id24151 . -4) (undo-tree-id24152 . -4) (undo-tree-id24153 . -4) (undo-tree-id24154 . -4) (undo-tree-id24155 . -4) (undo-tree-id24156 . -4) (undo-tree-id24157 . -4) (undo-tree-id24158 . -4) (undo-tree-id24159 . -4) (undo-tree-id24160 . -4) (undo-tree-id24161 . -4) (undo-tree-id24162 . -4) (undo-tree-id24163 . -4) (undo-tree-id24164 . -4) (undo-tree-id24165 . -4) (undo-tree-id24166 . -4) (undo-tree-id24167 . -4) (undo-tree-id24168 . -4) (undo-tree-id24169 . -4) (undo-tree-id24170 . -4) (undo-tree-id24171 . -4) (undo-tree-id24172 . -4) (undo-tree-id24173 . -4) (undo-tree-id24174 . -4) (undo-tree-id24175 . -4) (undo-tree-id24176 . -4) (undo-tree-id24177 . -4) (undo-tree-id24178 . -4) (undo-tree-id24179 . -4) (undo-tree-id24180 . -4) (undo-tree-id24181 . -4) (undo-tree-id24182 . -4) (undo-tree-id24183 . -4) (undo-tree-id24184 . -4) (undo-tree-id24185 . -4) (undo-tree-id24186 . -4) (undo-tree-id24187 . -4) (undo-tree-id24188 . -4) (undo-tree-id24189 . -4) (undo-tree-id24190 . -4) (undo-tree-id24191 . -4) (undo-tree-id24192 . -4) (undo-tree-id24193 . -4) (undo-tree-id24194 . -4) (undo-tree-id24195 . -4) (undo-tree-id24196 . -4) (undo-tree-id24197 . -4) (undo-tree-id24198 . -4) (undo-tree-id24199 . -4) (undo-tree-id24200 . -4) (undo-tree-id24201 . -4) (undo-tree-id24202 . -4) (undo-tree-id24203 . -4) (undo-tree-id24204 . -4) (undo-tree-id24205 . -4) (undo-tree-id24206 . -4) (undo-tree-id24207 . -4) (undo-tree-id24208 . -4) (undo-tree-id24209 . -3) (undo-tree-id24210 . -2) (undo-tree-id24211 . -2) (undo-tree-id24212 . -2) (undo-tree-id24213 . -2) (undo-tree-id24214 . -2) (undo-tree-id24215 . -2) (undo-tree-id24216 . -2) (undo-tree-id24217 . -2) (undo-tree-id24218 . -2) (undo-tree-id24219 . -2) (undo-tree-id24220 . -2) (undo-tree-id24221 . -2) (undo-tree-id24222 . -2) (undo-tree-id24223 . -2) (undo-tree-id24224 . -2) (undo-tree-id24225 . -2) (undo-tree-id24226 . -2) (undo-tree-id24227 . -2) (undo-tree-id24228 . -2) (undo-tree-id24229 . -2) (undo-tree-id24230 . -2) (undo-tree-id24231 . -2) (undo-tree-id24232 . -2) (undo-tree-id24233 . -2) (undo-tree-id24234 . -2) (undo-tree-id24235 . -2) (undo-tree-id24236 . -2) (undo-tree-id24237 . -2) (undo-tree-id24238 . -2) (undo-tree-id24239 . -2) (undo-tree-id24240 . -4) 34718) nil (25755 17792 763537 935000) 0 nil])
([nil nil ((#("upscale ×8. It is even possible to scale up beyond the size of the original
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id23964 . -75) (undo-tree-id23965 . 76) (undo-tree-id23966 . -2) (undo-tree-id23967 . -2) (undo-tree-id23968 . -2) (undo-tree-id23969 . -2) (undo-tree-id23970 . -2) (undo-tree-id23971 . -2) (undo-tree-id23972 . -2) (undo-tree-id23973 . -2) (undo-tree-id23974 . -2) (undo-tree-id23975 . -2) (undo-tree-id23976 . -2) (undo-tree-id23977 . -2) (undo-tree-id23978 . -2) (undo-tree-id23979 . -2) (undo-tree-id23980 . -2) (undo-tree-id23981 . -2) (undo-tree-id23982 . -2) (undo-tree-id23983 . -2) (undo-tree-id23984 . -2) (undo-tree-id23985 . -2) (undo-tree-id23986 . -2) (undo-tree-id23987 . -76) 34718) nil (25755 17792 763295 933000) 0 nil])
([nil nil ((#("image: this can be used to increase the resolution of an image, which is a
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 54 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id23940 . -74) (undo-tree-id23941 . 75) (undo-tree-id23942 . -2) (undo-tree-id23943 . -2) (undo-tree-id23944 . -2) (undo-tree-id23945 . -2) (undo-tree-id23946 . -2) (undo-tree-id23947 . -2) (undo-tree-id23948 . -2) (undo-tree-id23949 . -2) (undo-tree-id23950 . -2) (undo-tree-id23951 . -2) (undo-tree-id23952 . -2) (undo-tree-id23953 . -2) (undo-tree-id23954 . -2) (undo-tree-id23955 . -2) (undo-tree-id23956 . -2) (undo-tree-id23957 . -2) (undo-tree-id23958 . -2) (undo-tree-id23959 . -2) (undo-tree-id23960 . -2) (undo-tree-id23961 . -2) (undo-tree-id23962 . -2) (undo-tree-id23963 . -75) 34718) nil (25755 17792 763275 535000) 0 nil])
([nil nil ((#("technique called super-resolution.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 33 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 33 34 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 34 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 34716) (undo-tree-id23916 . -34) (undo-tree-id23917 . 35) (undo-tree-id23918 . -2) (undo-tree-id23919 . -2) (undo-tree-id23920 . -2) (undo-tree-id23921 . -2) (undo-tree-id23922 . -2) (undo-tree-id23923 . -2) (undo-tree-id23924 . -2) (undo-tree-id23925 . -2) (undo-tree-id23926 . -2) (undo-tree-id23927 . -2) (undo-tree-id23928 . -2) (undo-tree-id23929 . -2) (undo-tree-id23930 . -2) (undo-tree-id23931 . -2) (undo-tree-id23932 . -2) (undo-tree-id23933 . -2) (undo-tree-id23934 . -2) (undo-tree-id23935 . -2) (undo-tree-id23936 . -2) (undo-tree-id23937 . -2) (undo-tree-id23938 . -2) (undo-tree-id23939 . -35) 34718) nil (25755 17792 762961 781000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35710 . 35711) (nil fontified nil 35678 . 35711) (nil fontified nil 35603 . 35678) (nil fontified nil 35527 . 35603) (nil fontified nil 35456 . 35527) (nil fontified nil 35379 . 35456) (nil fontified nil 35304 . 35379) (nil fontified nil 35231 . 35304) (nil fontified nil 35157 . 35231) (nil fontified nil 35009 . 35157) (nil fontified nil 34938 . 35009) (nil fontified nil 34862 . 34938) (nil fontified nil 34794 . 34862) (nil fontified nil 34716 . 34794) (34716 . 35711)) nil (25755 17792 762944 670000) 0 nil])
([nil nil ((35711 . 35713)) nil (25755 17792 762942 371000) 0 nil])
([nil nil ((nil rear-nonsticky nil 37622 . 37623) (nil fontified nil 37550 . 37623) (nil fontified nil 37475 . 37550) (nil fontified nil 37404 . 37475) (nil fontified nil 37334 . 37404) (nil fontified nil 37269 . 37334) (nil fontified nil 37190 . 37269) (nil fontified nil 37117 . 37190) (nil fontified nil 37042 . 37117) (nil fontified nil 36972 . 37042) (nil fontified nil 36905 . 36972) (nil fontified nil 36762 . 36905) (nil fontified nil 36693 . 36762) (nil fontified nil 36618 . 36693) (nil fontified nil 36564 . 36618) (nil fontified nil 36487 . 36564) (nil fontified nil 36413 . 36487) (nil fontified nil 36344 . 36413) (nil fontified nil 36270 . 36344) (nil fontified nil 36199 . 36270) (nil fontified nil 36128 . 36199) (nil fontified nil 36052 . 36128) (nil fontified nil 35976 . 36052) (nil fontified nil 35904 . 35976) (nil fontified nil 35838 . 35904) (nil fontified nil 35769 . 35838) (nil fontified nil 35713 . 35769) (35713 . 37623)) nil (25755 17792 762940 809000) 0 nil])
([nil nil ((#("T" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id23914 . -1) (undo-tree-id23915 . -1)) nil (25755 17802 376921 527000) 0 nil])
([nil nil ((#("his solution is OK, but still too imprecise" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id24328 . -42) (undo-tree-id24329 . 43) (undo-tree-id24330 . -43) (undo-tree-id24331 . -43) (undo-tree-id24332 . -43) (undo-tree-id24333 . -43) (undo-tree-id24334 . -43) (undo-tree-id24335 . -43) (undo-tree-id24336 . -43) (undo-tree-id24337 . -43) (undo-tree-id24338 . -43) (undo-tree-id24339 . -43) (undo-tree-id24340 . -43) (undo-tree-id24341 . -43) (undo-tree-id24342 . -43) (undo-tree-id24343 . -43) (undo-tree-id24344 . -43) (undo-tree-id24345 . -43) (undo-tree-id24346 . -43) (undo-tree-id24347 . -43) (undo-tree-id24348 . -43) (undo-tree-id24349 . -43) (undo-tree-id24350 . -43) (undo-tree-id24351 . -43) (undo-tree-id24352 . -43) (undo-tree-id24353 . -43) (undo-tree-id24354 . -43) (undo-tree-id24355 . -43) (undo-tree-id24356 . -43) (undo-tree-id24357 . -43) (undo-tree-id24358 . -43) (undo-tree-id24359 . -43) (undo-tree-id24360 . -43) (undo-tree-id24361 . -43) (undo-tree-id24362 . -43) (undo-tree-id24363 . -43) (undo-tree-id24364 . -43) (undo-tree-id24365 . -43) (undo-tree-id24366 . -43) (undo-tree-id24367 . -43) (undo-tree-id24368 . -43) (undo-tree-id24369 . -43) (undo-tree-id24370 . -43) (undo-tree-id24371 . -43) (undo-tree-id24372 . -43) (undo-tree-id24373 . -43) (undo-tree-id24374 . -43) (undo-tree-id24375 . -43) (undo-tree-id24376 . -43) (undo-tree-id24377 . -43) (undo-tree-id24378 . -43) (undo-tree-id24379 . -43) (undo-tree-id24380 . -43) (undo-tree-id24381 . -43) (undo-tree-id24382 . -43) (undo-tree-id24383 . -43) (undo-tree-id24384 . -43) (undo-tree-id24385 . -43) (undo-tree-id24386 . -43) (undo-tree-id24387 . -43) (undo-tree-id24388 . -43) (undo-tree-id24389 . -43) (undo-tree-id24390 . -43) (undo-tree-id24391 . -43) (undo-tree-id24392 . -43) (undo-tree-id24393 . -43) (undo-tree-id24394 . -43) (undo-tree-id24395 . -43) (undo-tree-id24396 . -4) (undo-tree-id24397 . -13) (undo-tree-id24398 . -16) (undo-tree-id24399 . -18) (undo-tree-id24400 . -20) (undo-tree-id24401 . -24) (undo-tree-id24402 . -30) (undo-tree-id24403 . -34) (undo-tree-id24404 . -43) (undo-tree-id24405 . -43) (undo-tree-id24406 . -43) (undo-tree-id24407 . -43) (undo-tree-id24408 . -43) (undo-tree-id24409 . -43) (undo-tree-id24410 . -43) (undo-tree-id24411 . -43) (undo-tree-id24412 . -43) (undo-tree-id24413 . -43) (undo-tree-id24414 . -43) (undo-tree-id24415 . -43) (undo-tree-id24416 . -43) (undo-tree-id24417 . -43) (undo-tree-id24418 . -43) (undo-tree-id24419 . -43) (undo-tree-id24420 . -43) (undo-tree-id24421 . -43) (undo-tree-id24422 . -43) (undo-tree-id24423 . -43) (undo-tree-id24424 . -43) (undo-tree-id24425 . -43) (undo-tree-id24426 . -43) (undo-tree-id24427 . -43) (undo-tree-id24428 . -43) (undo-tree-id24429 . -43) (undo-tree-id24430 . -43) (undo-tree-id24431 . -43) (undo-tree-id24432 . -43) (undo-tree-id24433 . -43) (undo-tree-id24434 . -43) (undo-tree-id24435 . -43) 34759) nil (25755 17820 6634 961000) 0 nil] [nil nil ((#("his solution is OK, but still too imprecise. To do better, the authors added
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 43 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 43 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id24264 . -76) (undo-tree-id24265 . 77) (undo-tree-id24266 . -43) (undo-tree-id24267 . -47) (undo-tree-id24268 . -47) (undo-tree-id24269 . -45) (undo-tree-id24270 . -43) (undo-tree-id24271 . -43) (undo-tree-id24272 . -43) (undo-tree-id24273 . -43) (undo-tree-id24274 . -43) (undo-tree-id24275 . -43) (undo-tree-id24276 . -43) (undo-tree-id24277 . -43) (undo-tree-id24278 . -43) (undo-tree-id24279 . -43) (undo-tree-id24280 . -43) (undo-tree-id24281 . -43) (undo-tree-id24282 . -43) (undo-tree-id24283 . -43) (undo-tree-id24284 . -43) (undo-tree-id24285 . -43) (undo-tree-id24286 . -43) (undo-tree-id24287 . -43) (undo-tree-id24288 . -43) (undo-tree-id24289 . -43) (undo-tree-id24290 . -43) (undo-tree-id24291 . -43) (undo-tree-id24292 . -43) (undo-tree-id24293 . -43) (undo-tree-id24294 . -43) (undo-tree-id24295 . -43) (undo-tree-id24296 . -43) (undo-tree-id24297 . -43) (undo-tree-id24298 . -43) (undo-tree-id24299 . -43) (undo-tree-id24300 . -43) (undo-tree-id24301 . -43) (undo-tree-id24302 . -43) (undo-tree-id24303 . -43) (undo-tree-id24304 . -43) (undo-tree-id24305 . -43) (undo-tree-id24306 . -43) (undo-tree-id24307 . -43) (undo-tree-id24308 . -43) (undo-tree-id24309 . -43) (undo-tree-id24310 . -43) (undo-tree-id24311 . -43) (undo-tree-id24312 . -43) (undo-tree-id24313 . -43) (undo-tree-id24314 . -43) (undo-tree-id24315 . -43) (undo-tree-id24316 . -43) (undo-tree-id24317 . -43) (undo-tree-id24318 . -43) (undo-tree-id24319 . -77) 34759) ((34716 . 34793)) (25755 17802 376617 852000) 0 nil] [nil nil ((#("his solution is OK, but still too imprecise. To do better, the authors added
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id23896 . -76) (undo-tree-id23897 . 77) (undo-tree-id23898 . -43) (undo-tree-id23899 . -47) (undo-tree-id23900 . -47) (undo-tree-id23901 . -45) (undo-tree-id23902 . -43) (undo-tree-id23903 . -43) (undo-tree-id23904 . -43) (undo-tree-id23905 . -43) (undo-tree-id23906 . -43) (undo-tree-id23907 . -43) (undo-tree-id23908 . -43) (undo-tree-id23909 . -43) (undo-tree-id23910 . -43) (undo-tree-id23911 . -43) (undo-tree-id23912 . -43) (undo-tree-id23913 . -77) 34759) ((34716 . 34793)) (25755 17792 762930 102000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34716) (undo-tree-id24325 . 1) (undo-tree-id24326 . -1) (undo-tree-id24327 . -1)) nil (25755 17820 6557 714000) 0 nil])
nil
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 34716) (undo-tree-id24320 . 1) (undo-tree-id24321 . -1) (undo-tree-id24322 . -1) (undo-tree-id24323 . -1) (undo-tree-id24324 . -1)) nil (25755 17820 6553 835000) 0 nil])
([nil nil ((37577 . 37578)) nil (25755 17820 6536 231000) 0 nil])
([nil nil ((#("the authors " 0 12 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34730) (undo-tree-id24451 . -11) (undo-tree-id24452 . -11) (undo-tree-id24453 . -11) (undo-tree-id24454 . -11) (undo-tree-id24455 . -12) (undo-tree-id24456 . -11) (undo-tree-id24457 . -2) (undo-tree-id24458 . -2) (undo-tree-id24459 . -2) (undo-tree-id24460 . -2) (undo-tree-id24461 . -2) (undo-tree-id24462 . -2) (undo-tree-id24463 . -2) (undo-tree-id24464 . -2) (undo-tree-id24465 . -10) (undo-tree-id24466 . -10) (undo-tree-id24467 . -10) (undo-tree-id24468 . -10) (undo-tree-id24469 . -10) (undo-tree-id24470 . -10) (undo-tree-id24471 . -10) (undo-tree-id24472 . -10) (undo-tree-id24473 . -12) (undo-tree-id24474 . -12) (undo-tree-id24475 . -12) (undo-tree-id24476 . -12) (undo-tree-id24477 . -12) (undo-tree-id24478 . -12) (undo-tree-id24479 . -12) (undo-tree-id24480 . -12) (undo-tree-id24481 . -11) (undo-tree-id24482 . -11) (undo-tree-id24483 . -11) (undo-tree-id24484 . -11) (undo-tree-id24485 . -11) (undo-tree-id24486 . -11) (undo-tree-id24487 . -11) (undo-tree-id24488 . -11) (undo-tree-id24489 . -11) (undo-tree-id24490 . -12) 34741 (t 25755 17820 37136 271000)) nil (25755 17856 478938 457000) 0 nil])
([nil nil ((#("e" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34733) (undo-tree-id24441 . -1) (undo-tree-id24442 . -1) (undo-tree-id24443 . -1) (undo-tree-id24444 . -1) (undo-tree-id24445 . -1) (undo-tree-id24446 . -1) (undo-tree-id24447 . -1) (undo-tree-id24448 . -1) (undo-tree-id24449 . -1) (undo-tree-id24450 . -1)) nil (25755 17856 478781 703000) 0 nil])
([nil nil ((#("d" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34733) (undo-tree-id24438 . -1) (undo-tree-id24439 . -1) (undo-tree-id24440 . -1)) nil (25755 17856 478771 846000) 0 nil])
([nil nil ((34733 . 34734) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34733) (undo-tree-id24437 . -1) 34732) nil (25755 17856 478768 197000) 0 nil])
([nil nil ((34770 . 34771)) nil (25755 17856 478765 288000) 0 nil])
([nil nil ((34802 . 34803) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34802) (undo-tree-id24436 . -1) 34771) nil (25755 17863 370946 982000) 0 nil])
([nil nil ((#("they upsampled the output image by a factor of 2 (instead of 32)" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 19 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 64 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34784) (undo-tree-id24780 . -63) (undo-tree-id24781 . -18) (undo-tree-id24782 . -18) (undo-tree-id24783 . -18) (undo-tree-id24784 . -18) (undo-tree-id24785 . -18) (undo-tree-id24786 . -18) (undo-tree-id24787 . -18) (undo-tree-id24788 . -18) (undo-tree-id24789 . -18) (undo-tree-id24790 . -18) (undo-tree-id24791 . -18) (undo-tree-id24792 . -18) (undo-tree-id24793 . -18) (undo-tree-id24794 . -18) (undo-tree-id24795 . -18) (undo-tree-id24796 . -18) (undo-tree-id24797 . -18) (undo-tree-id24798 . -18) (undo-tree-id24799 . -18) (undo-tree-id24800 . -18) (undo-tree-id24801 . -18) (undo-tree-id24802 . -18) (undo-tree-id24803 . -18) (undo-tree-id24804 . -18) (undo-tree-id24805 . -18) (undo-tree-id24806 . -18) (undo-tree-id24807 . -18) (undo-tree-id24808 . -18) (undo-tree-id24809 . -18) (undo-tree-id24810 . -18) (undo-tree-id24811 . -18) (undo-tree-id24812 . -18) (undo-tree-id24813 . -18) (undo-tree-id24814 . -19) (undo-tree-id24815 . -19) (undo-tree-id24816 . -19) (undo-tree-id24817 . -19) (undo-tree-id24818 . -19) (undo-tree-id24819 . -19) (undo-tree-id24820 . -19) (undo-tree-id24821 . -19) (undo-tree-id24822 . -19) (undo-tree-id24823 . -19) (undo-tree-id24824 . -19) (undo-tree-id24825 . -19) (undo-tree-id24826 . -19) (undo-tree-id24827 . -19) (undo-tree-id24828 . -19) (undo-tree-id24829 . -26) (undo-tree-id24830 . -26) (undo-tree-id24831 . -26) (undo-tree-id24832 . -26) (undo-tree-id24833 . -26) (undo-tree-id24834 . -26) (undo-tree-id24835 . -26) (undo-tree-id24836 . -26) (undo-tree-id24837 . -26) (undo-tree-id24838 . -26) (undo-tree-id24839 . -26) (undo-tree-id24840 . -26) (undo-tree-id24841 . -26) (undo-tree-id24842 . -26) (undo-tree-id24843 . -26) (undo-tree-id24844 . -26) (undo-tree-id24845 . -26) (undo-tree-id24846 . -26) (undo-tree-id24847 . -26) (undo-tree-id24848 . -26) (undo-tree-id24849 . -26) (undo-tree-id24850 . -26) (undo-tree-id24851 . -26) (undo-tree-id24852 . -26) (undo-tree-id24853 . -26) (undo-tree-id24854 . -26) (undo-tree-id24855 . -26) (undo-tree-id24856 . -26) (undo-tree-id24857 . -26) (undo-tree-id24858 . -26) (undo-tree-id24859 . -26) (undo-tree-id24860 . -26) (undo-tree-id24861 . -26) (undo-tree-id24862 . -26) (undo-tree-id24863 . -26) (undo-tree-id24864 . -26) (undo-tree-id24865 . -26) (undo-tree-id24866 . -26) (undo-tree-id24867 . -26) (undo-tree-id24868 . -26) (undo-tree-id24869 . -26) (undo-tree-id24870 . -26) (undo-tree-id24871 . -26) (undo-tree-id24872 . -26) (undo-tree-id24873 . -26) (undo-tree-id24874 . -26) (undo-tree-id24875 . -26) (undo-tree-id24876 . -26) (undo-tree-id24877 . -26) (undo-tree-id24878 . -26) (undo-tree-id24879 . -26) (undo-tree-id24880 . -26) (undo-tree-id24881 . -26) (undo-tree-id24882 . -26) (undo-tree-id24883 . -26) (undo-tree-id24884 . -26) (undo-tree-id24885 . -26) (undo-tree-id24886 . -26) (undo-tree-id24887 . -26) (undo-tree-id24888 . -26) (undo-tree-id24889 . -26) (undo-tree-id24890 . -26) (undo-tree-id24891 . -26) (undo-tree-id24892 . -26) (undo-tree-id24893 . -26) (undo-tree-id24894 . -26) (undo-tree-id24895 . -26) (undo-tree-id24896 . -26) (undo-tree-id24897 . -26) (undo-tree-id24898 . -26) (undo-tree-id24899 . -26) (undo-tree-id24900 . -26) (undo-tree-id24901 . -26) (undo-tree-id24902 . -26) (undo-tree-id24903 . -26) (undo-tree-id24904 . -26) (undo-tree-id24905 . -26) (undo-tree-id24906 . -26) (undo-tree-id24907 . -26) (undo-tree-id24908 . -26) (undo-tree-id24909 . -26) (undo-tree-id24910 . -26) (undo-tree-id24911 . -26) (undo-tree-id24912 . -26) (undo-tree-id24913 . -19) (undo-tree-id24914 . -19) (undo-tree-id24915 . -19) (undo-tree-id24916 . -19) (undo-tree-id24917 . -19) (undo-tree-id24918 . -19) (undo-tree-id24919 . -19) (undo-tree-id24920 . -19) (undo-tree-id24921 . -19) (undo-tree-id24922 . -19) (undo-tree-id24923 . -19) (undo-tree-id24924 . -19) (undo-tree-id24925 . -19) (undo-tree-id24926 . -19) (undo-tree-id24927 . -19) (undo-tree-id24928 . -15) (undo-tree-id24929 . -15) (undo-tree-id24930 . -15) (undo-tree-id24931 . -15) (undo-tree-id24932 . -15) (undo-tree-id24933 . -15) (undo-tree-id24934 . -15) (undo-tree-id24935 . -15) (undo-tree-id24936 . -15) (undo-tree-id24937 . -15) (undo-tree-id24938 . -15) (undo-tree-id24939 . -15) (undo-tree-id24940 . -15) (undo-tree-id24941 . -15) (undo-tree-id24942 . -15) (undo-tree-id24943 . -5) (undo-tree-id24944 . -5) (undo-tree-id24945 . -5) (undo-tree-id24946 . -5) (undo-tree-id24947 . -5) (undo-tree-id24948 . -5) (undo-tree-id24949 . -5) (undo-tree-id24950 . -5) (undo-tree-id24951 . -5) (undo-tree-id24952 . -5) (undo-tree-id24953 . -5) (undo-tree-id24954 . -5) (undo-tree-id24955 . -5) (undo-tree-id24956 . -5) (undo-tree-id24957 . -5) (undo-tree-id24958 . -64) (t 25755 17856 553786 191000)) nil (25755 17879 967528 947000) 0 nil] [nil nil ((#("they upsampled the output image by a factor of 2 (instead of 32), and they added the output of" 0 18 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 19 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 26 94 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34784) (undo-tree-id24589 . -93) (undo-tree-id24590 . -18) (undo-tree-id24591 . -18) (undo-tree-id24592 . -18) (undo-tree-id24593 . -18) (undo-tree-id24594 . -18) (undo-tree-id24595 . -18) (undo-tree-id24596 . -18) (undo-tree-id24597 . -18) (undo-tree-id24598 . -18) (undo-tree-id24599 . -18) (undo-tree-id24600 . -18) (undo-tree-id24601 . -18) (undo-tree-id24602 . -18) (undo-tree-id24603 . -18) (undo-tree-id24604 . -18) (undo-tree-id24605 . -18) (undo-tree-id24606 . -18) (undo-tree-id24607 . -18) (undo-tree-id24608 . -18) (undo-tree-id24609 . -18) (undo-tree-id24610 . -18) (undo-tree-id24611 . -18) (undo-tree-id24612 . -18) (undo-tree-id24613 . -18) (undo-tree-id24614 . -18) (undo-tree-id24615 . -18) (undo-tree-id24616 . -18) (undo-tree-id24617 . -18) (undo-tree-id24618 . -18) (undo-tree-id24619 . -18) (undo-tree-id24620 . -18) (undo-tree-id24621 . -18) (undo-tree-id24622 . -18) (undo-tree-id24623 . -19) (undo-tree-id24624 . -19) (undo-tree-id24625 . -19) (undo-tree-id24626 . -19) (undo-tree-id24627 . -19) (undo-tree-id24628 . -19) (undo-tree-id24629 . -19) (undo-tree-id24630 . -19) (undo-tree-id24631 . -19) (undo-tree-id24632 . -19) (undo-tree-id24633 . -19) (undo-tree-id24634 . -19) (undo-tree-id24635 . -19) (undo-tree-id24636 . -19) (undo-tree-id24637 . -19) (undo-tree-id24638 . -26) (undo-tree-id24639 . -26) (undo-tree-id24640 . -26) (undo-tree-id24641 . -26) (undo-tree-id24642 . -26) (undo-tree-id24643 . -26) (undo-tree-id24644 . -26) (undo-tree-id24645 . -26) (undo-tree-id24646 . -26) (undo-tree-id24647 . -26) (undo-tree-id24648 . -26) (undo-tree-id24649 . -26) (undo-tree-id24650 . -26) (undo-tree-id24651 . -26) (undo-tree-id24652 . -26) (undo-tree-id24653 . -26) (undo-tree-id24654 . -26) (undo-tree-id24655 . -26) (undo-tree-id24656 . -26) (undo-tree-id24657 . -26) (undo-tree-id24658 . -26) (undo-tree-id24659 . -26) (undo-tree-id24660 . -26) (undo-tree-id24661 . -26) (undo-tree-id24662 . -26) (undo-tree-id24663 . -26) (undo-tree-id24664 . -26) (undo-tree-id24665 . -26) (undo-tree-id24666 . -26) (undo-tree-id24667 . -26) (undo-tree-id24668 . -26) (undo-tree-id24669 . -26) (undo-tree-id24670 . -26) (undo-tree-id24671 . -26) (undo-tree-id24672 . -26) (undo-tree-id24673 . -26) (undo-tree-id24674 . -26) (undo-tree-id24675 . -26) (undo-tree-id24676 . -26) (undo-tree-id24677 . -26) (undo-tree-id24678 . -26) (undo-tree-id24679 . -26) (undo-tree-id24680 . -26) (undo-tree-id24681 . -26) (undo-tree-id24682 . -26) (undo-tree-id24683 . -26) (undo-tree-id24684 . -26) (undo-tree-id24685 . -26) (undo-tree-id24686 . -26) (undo-tree-id24687 . -26) (undo-tree-id24688 . -26) (undo-tree-id24689 . -26) (undo-tree-id24690 . -26) (undo-tree-id24691 . -26) (undo-tree-id24692 . -26) (undo-tree-id24693 . -26) (undo-tree-id24694 . -26) (undo-tree-id24695 . -26) (undo-tree-id24696 . -26) (undo-tree-id24697 . -26) (undo-tree-id24698 . -26) (undo-tree-id24699 . -26) (undo-tree-id24700 . -26) (undo-tree-id24701 . -26) (undo-tree-id24702 . -26) (undo-tree-id24703 . -26) (undo-tree-id24704 . -26) (undo-tree-id24705 . -26) (undo-tree-id24706 . -26) (undo-tree-id24707 . -26) (undo-tree-id24708 . -26) (undo-tree-id24709 . -26) (undo-tree-id24710 . -26) (undo-tree-id24711 . -26) (undo-tree-id24712 . -26) (undo-tree-id24713 . -26) (undo-tree-id24714 . -26) (undo-tree-id24715 . -26) (undo-tree-id24716 . -26) (undo-tree-id24717 . -26) (undo-tree-id24718 . -26) (undo-tree-id24719 . -26) (undo-tree-id24720 . -26) (undo-tree-id24721 . -26) (undo-tree-id24722 . -19) (undo-tree-id24723 . -19) (undo-tree-id24724 . -19) (undo-tree-id24725 . -19) (undo-tree-id24726 . -19) (undo-tree-id24727 . -19) (undo-tree-id24728 . -19) (undo-tree-id24729 . -19) (undo-tree-id24730 . -19) (undo-tree-id24731 . -19) (undo-tree-id24732 . -19) (undo-tree-id24733 . -19) (undo-tree-id24734 . -19) (undo-tree-id24735 . -19) (undo-tree-id24736 . -19) (undo-tree-id24737 . -15) (undo-tree-id24738 . -15) (undo-tree-id24739 . -15) (undo-tree-id24740 . -15) (undo-tree-id24741 . -15) (undo-tree-id24742 . -15) (undo-tree-id24743 . -15) (undo-tree-id24744 . -15) (undo-tree-id24745 . -15) (undo-tree-id24746 . -15) (undo-tree-id24747 . -15) (undo-tree-id24748 . -15) (undo-tree-id24749 . -15) (undo-tree-id24750 . -15) (undo-tree-id24751 . -15) (undo-tree-id24752 . 89) (undo-tree-id24753 . -14) (undo-tree-id24754 . -5) (undo-tree-id24755 . -5) (undo-tree-id24756 . -5) (undo-tree-id24757 . -5) (undo-tree-id24758 . -5) (undo-tree-id24759 . -5) (undo-tree-id24760 . -5) (undo-tree-id24761 . -5) (undo-tree-id24762 . -5) (undo-tree-id24763 . -5) (undo-tree-id24764 . -5) (undo-tree-id24765 . -5) (undo-tree-id24766 . -5) (undo-tree-id24767 . -5) (undo-tree-id24768 . -5) (undo-tree-id24769 . -94) (undo-tree-id24770 . -94) (t 25755 17856 553786 191000)) ((34784 . 34878)) (25755 17863 370437 776000) 0 nil] [nil nil ((#("for example, they upsampled the output image by a factor of 2 (instead of 32), and they added the output of
" 0 31 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 31 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 32 108 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34771) (undo-tree-id24491 . -107) (undo-tree-id24492 . 108) (undo-tree-id24493 . -31) (undo-tree-id24494 . -39) (undo-tree-id24495 . -31) (undo-tree-id24496 . -31) (undo-tree-id24497 . -31) (undo-tree-id24498 . -31) (undo-tree-id24499 . -31) (undo-tree-id24500 . -31) (undo-tree-id24501 . -31) (undo-tree-id24502 . -31) (undo-tree-id24503 . -31) (undo-tree-id24504 . -31) (undo-tree-id24505 . -31) (undo-tree-id24506 . -31) (undo-tree-id24507 . -31) (undo-tree-id24508 . -31) (undo-tree-id24509 . -31) (undo-tree-id24510 . -31) (undo-tree-id24511 . -31) (undo-tree-id24512 . -31) (undo-tree-id24513 . -31) (undo-tree-id24514 . -31) (undo-tree-id24515 . -31) (undo-tree-id24516 . -31) (undo-tree-id24517 . -31) (undo-tree-id24518 . -31) (undo-tree-id24519 . -31) (undo-tree-id24520 . -31) (undo-tree-id24521 . -31) (undo-tree-id24522 . -31) (undo-tree-id24523 . -31) (undo-tree-id24524 . -31) (undo-tree-id24525 . -31) (undo-tree-id24526 . -31) (undo-tree-id24527 . -32) (undo-tree-id24528 . -32) (undo-tree-id24529 . -32) (undo-tree-id24530 . -32) (undo-tree-id24531 . -32) (undo-tree-id24532 . -32) (undo-tree-id24533 . -32) (undo-tree-id24534 . -32) (undo-tree-id24535 . -32) (undo-tree-id24536 . -32) (undo-tree-id24537 . -32) (undo-tree-id24538 . -32) (undo-tree-id24539 . -32) (undo-tree-id24540 . -32) (undo-tree-id24541 . -32) (undo-tree-id24542 . -39) (undo-tree-id24543 . -39) (undo-tree-id24544 . -39) (undo-tree-id24545 . -39) (undo-tree-id24546 . -39) (undo-tree-id24547 . -39) (undo-tree-id24548 . -39) (undo-tree-id24549 . -39) (undo-tree-id24550 . -39) (undo-tree-id24551 . -39) (undo-tree-id24552 . -39) (undo-tree-id24553 . -39) (undo-tree-id24554 . -39) (undo-tree-id24555 . -39) (undo-tree-id24556 . -39) (undo-tree-id24557 . -39) (undo-tree-id24558 . -39) (undo-tree-id24559 . -39) (undo-tree-id24560 . -39) (undo-tree-id24561 . -39) (undo-tree-id24562 . -39) (undo-tree-id24563 . -39) (undo-tree-id24564 . -39) (undo-tree-id24565 . -39) (undo-tree-id24566 . -39) (undo-tree-id24567 . -39) (undo-tree-id24568 . -39) (undo-tree-id24569 . -39) (undo-tree-id24570 . -39) (undo-tree-id24571 . -39) (undo-tree-id24572 . -39) (undo-tree-id24573 . -39) (undo-tree-id24574 . -39) (undo-tree-id24575 . -39) (undo-tree-id24576 . -39) (undo-tree-id24577 . -39) (undo-tree-id24578 . -39) (undo-tree-id24579 . -39) (undo-tree-id24580 . -39) (undo-tree-id24581 . -39) (undo-tree-id24582 . -39) (undo-tree-id24583 . -39) (undo-tree-id24584 . -39) (undo-tree-id24585 . -39) (undo-tree-id24586 . -39) (undo-tree-id24587 . -39) (undo-tree-id24588 . -108) 34810 (t 25755 17856 553786 191000)) ((34771 . 34879)) (25755 17860 224487 925000) 0 nil])
([nil nil ((#("," 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34784) (undo-tree-id24778 . -1) (undo-tree-id24779 . -1)) nil (25755 17879 967337 345000) 0 nil])
nil
nil
([nil nil ((#(" and they added the output of" 0 29 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34784) (undo-tree-id24775 . -28) (undo-tree-id24776 . -29) (undo-tree-id24777 . -29)) nil (25755 17879 967334 412000) 0 nil])
([nil nil ((#("a lower layer that had this double resolution. Then they upsampled the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id24773 . -70) (undo-tree-id24774 . -71)) nil (25755 17879 967757 828000) 0 nil])
([nil nil ((#("result by a factor of 16, leading to a total upsampling factor of 3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id24963 . -66) (undo-tree-id24964 . -67)) nil (25755 17885 14755 187000) 0 nil] [nil nil ((#("result by a factor of 16, leading to a total upsampling factor of 32 (seeFigure 14-28). This recovered some of the spatial resolution that was lost
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 148 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id24771 . -147) (undo-tree-id24772 . -148)) ((34785 . 34933)) (25755 17879 967325 966000) 0 nil])
([nil nil ((#("2" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id24961 . -1) (undo-tree-id24962 . -1)) nil (25755 17885 14752 213000) 0 nil])
nil
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 34785) (undo-tree-id24959 . -1) (undo-tree-id24960 . -1)) nil (25755 17885 14745 917000) 0 nil])
([nil nil ((#("(seeFigure 14-28). This recovered some of the spatial resolution that was lost
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id25082 . -78) (undo-tree-id25083 . 79) (undo-tree-id25084 . -1) (undo-tree-id25085 . 63) (undo-tree-id25086 . -17) (undo-tree-id25087 . -79) (t 25755 17885 46297 861000)) nil (25755 17932 49812 69000) 0 nil])
([nil nil ((#("in earlier pooling layers. In their best architecture, they used a second
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 59 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 59 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id25080 . -73) (undo-tree-id25081 . -74)) nil (25755 17932 49808 115000) 0 nil])
([nil nil ((#("similar skip connection to recover even finer details from an even lower
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34785) (undo-tree-id25078 . -72) (undo-tree-id25079 . -73)) nil (25755 17932 49806 41000) 0 nil])
([nil nil ((#("for example, 
" 0 13 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 13 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34771) (undo-tree-id24985 . -13) (undo-tree-id24986 . 14) (undo-tree-id24987 . -14) (undo-tree-id24988 . -14) (undo-tree-id24989 . -14) (undo-tree-id24990 . -14) (undo-tree-id24991 . -14) (undo-tree-id24992 . -14) (undo-tree-id24993 . -14) (undo-tree-id24994 . -14) (undo-tree-id24995 . -14) (undo-tree-id24996 . -14) (undo-tree-id24997 . -14) (undo-tree-id24998 . -14) (undo-tree-id24999 . -14) (undo-tree-id25000 . -14) (undo-tree-id25001 . -14) (undo-tree-id25002 . -14) (undo-tree-id25003 . -14) (undo-tree-id25004 . -14) (undo-tree-id25005 . -14) (undo-tree-id25006 . -14) (undo-tree-id25007 . -14) (undo-tree-id25008 . -14) (undo-tree-id25009 . -14) (undo-tree-id25010 . -14) (undo-tree-id25011 . -14) (undo-tree-id25012 . -14) (undo-tree-id25013 . -14) (undo-tree-id25014 . -14) (undo-tree-id25015 . -14) (undo-tree-id25016 . -14) (undo-tree-id25017 . -14) (undo-tree-id25018 . -14) (undo-tree-id25019 . -14) (undo-tree-id25020 . -14) (undo-tree-id25021 . -14) (undo-tree-id25022 . -14) (undo-tree-id25023 . -14) (undo-tree-id25024 . -14) (undo-tree-id25025 . -14) (undo-tree-id25026 . -14) (undo-tree-id25027 . -14) (undo-tree-id25028 . -14) (undo-tree-id25029 . -14) (undo-tree-id25030 . -14) (undo-tree-id25031 . -14) (undo-tree-id25032 . -14) (undo-tree-id25033 . -14) (undo-tree-id25034 . -14) (undo-tree-id25035 . -14) (undo-tree-id25036 . -14) (undo-tree-id25037 . -14) (undo-tree-id25038 . -14) (undo-tree-id25039 . -14) (undo-tree-id25040 . -14) (undo-tree-id25041 . -14) (undo-tree-id25042 . -14) (undo-tree-id25043 . -14) (undo-tree-id25044 . -14) (undo-tree-id25045 . -14) (undo-tree-id25046 . -14) (undo-tree-id25047 . -14) (undo-tree-id25048 . -14) (undo-tree-id25049 . -14) (undo-tree-id25050 . -14) (undo-tree-id25051 . -14) (undo-tree-id25052 . -14) (undo-tree-id25053 . -14) (undo-tree-id25054 . -14) (undo-tree-id25055 . -14) (undo-tree-id25056 . -14) (undo-tree-id25057 . -14) (undo-tree-id25058 . -14) (undo-tree-id25059 . -14) (undo-tree-id25060 . -14) (undo-tree-id25061 . -14) (undo-tree-id25062 . -14) (undo-tree-id25063 . -14) (undo-tree-id25064 . -14) (undo-tree-id25065 . -14) (undo-tree-id25066 . -14) (undo-tree-id25067 . -14) (undo-tree-id25068 . -14) (undo-tree-id25069 . -14) (undo-tree-id25070 . -14) (undo-tree-id25071 . -14) (undo-tree-id25072 . -14) (undo-tree-id25073 . -14) (undo-tree-id25074 . -14) (undo-tree-id25075 . -14) (undo-tree-id25076 . -14) (undo-tree-id25077 . -14)) nil (25755 17932 49800 986000) 0 nil])
([nil nil ((#("layer. " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 7 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34771) (undo-tree-id24966 . -6) (undo-tree-id24967 . -6) (undo-tree-id24968 . 7) (undo-tree-id24969 . -6) (undo-tree-id24970 . -6) (undo-tree-id24971 . -7) (undo-tree-id24972 . -6) (undo-tree-id24973 . -4) (undo-tree-id24974 . -4) (undo-tree-id24975 . -4) (undo-tree-id24976 . -4) (undo-tree-id24977 . -4) (undo-tree-id24978 . -4) (undo-tree-id24979 . -4) (undo-tree-id24980 . -4) (undo-tree-id24981 . -5) (undo-tree-id24982 . -6) (undo-tree-id24983 . -6) (undo-tree-id24984 . -7) 34777) nil (25755 17932 49736 396000) 0 nil])
([nil nil ((34771 . 34772)) nil (25755 17932 49719 354000) 0 nil])
([nil nil ((34782 . 34783)) nil (25755 17932 49718 585000) 0 nil])
([nil nil ((34840 . 34841) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34840) (undo-tree-id24965 . -1) 34783) nil (25755 17932 49716 609000) 0 nil])
([nil nil ((34854 . 34856)) nil (25755 17932 49700 123000) 0 nil])
([nil nil ((34868 . 34869) (t 25755 17932 83150 691000)) nil (25755 17975 878512 425000) 0 nil])
([nil nil ((34920 . 34921) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -34920) (undo-tree-id25197 . -1) (undo-tree-id25198 . -1) (undo-tree-id25199 . -1) (undo-tree-id25200 . -1) (undo-tree-id25201 . -1) (undo-tree-id25202 . -1) (undo-tree-id25203 . -1) (undo-tree-id25204 . -1) (undo-tree-id25205 . -1) 34869) nil (25755 17975 878511 3000) 0 nil])
([nil nil ((#("(of the appropriate scale)" 0 19 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 19 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 20 26 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34901) (undo-tree-id25151 . -25) (undo-tree-id25152 . -19) (undo-tree-id25153 . -19) (undo-tree-id25154 . -19) (undo-tree-id25155 . -19) (undo-tree-id25156 . -19) (undo-tree-id25157 . -19) (undo-tree-id25158 . -19) (undo-tree-id25159 . -19) (undo-tree-id25160 . -19) (undo-tree-id25161 . -19) (undo-tree-id25162 . -19) (undo-tree-id25163 . -19) (undo-tree-id25164 . -19) (undo-tree-id25165 . -19) (undo-tree-id25166 . -19) (undo-tree-id25167 . -19) (undo-tree-id25168 . -19) (undo-tree-id25169 . -19) (undo-tree-id25170 . -19) (undo-tree-id25171 . -19) (undo-tree-id25172 . -19) (undo-tree-id25173 . -19) (undo-tree-id25174 . -19) (undo-tree-id25175 . -19) (undo-tree-id25176 . -19) (undo-tree-id25177 . -19) (undo-tree-id25178 . -19) (undo-tree-id25179 . -19) (undo-tree-id25180 . -19) (undo-tree-id25181 . -19) (undo-tree-id25182 . -19) (undo-tree-id25183 . -19) (undo-tree-id25184 . -19) (undo-tree-id25185 . -19) (undo-tree-id25186 . -19) (undo-tree-id25187 . -19) (undo-tree-id25188 . -19) (undo-tree-id25189 . -19) (undo-tree-id25190 . -19) (undo-tree-id25191 . -19) (undo-tree-id25192 . -19) (undo-tree-id25193 . -19) (undo-tree-id25194 . -19) (undo-tree-id25195 . -19) (undo-tree-id25196 . -26) 34869) nil (25755 17975 878500 881000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34900) (undo-tree-id25088 . -1) (undo-tree-id25089 . -1) (undo-tree-id25090 . -1) (undo-tree-id25091 . -1) (undo-tree-id25092 . -1) (undo-tree-id25093 . -1) (undo-tree-id25094 . -1) (undo-tree-id25095 . -1) (undo-tree-id25096 . -1) (undo-tree-id25097 . -1) (undo-tree-id25098 . -1) (undo-tree-id25099 . -1) (undo-tree-id25100 . -1) (undo-tree-id25101 . -1) (undo-tree-id25102 . -1) (undo-tree-id25103 . -1) (undo-tree-id25104 . -1) (undo-tree-id25105 . -1) (undo-tree-id25106 . -1) (undo-tree-id25107 . -1) (undo-tree-id25108 . -1) (undo-tree-id25109 . -1) (undo-tree-id25110 . -1) (undo-tree-id25111 . -1) (undo-tree-id25112 . -1) (undo-tree-id25113 . -1) (undo-tree-id25114 . -1) (undo-tree-id25115 . -1) (undo-tree-id25116 . -1) (undo-tree-id25117 . -1) (undo-tree-id25118 . -1) (undo-tree-id25119 . -1) (undo-tree-id25120 . -1) (undo-tree-id25121 . -1) (undo-tree-id25122 . -1) (undo-tree-id25123 . -1) (undo-tree-id25124 . -1) (undo-tree-id25125 . -1) (undo-tree-id25126 . -1) (undo-tree-id25127 . -1) (undo-tree-id25128 . -1) (undo-tree-id25129 . -1) (undo-tree-id25130 . -1) (undo-tree-id25131 . -1) (undo-tree-id25132 . -1) (undo-tree-id25133 . -1) (undo-tree-id25134 . -1) (undo-tree-id25135 . -1) (undo-tree-id25136 . -1) (undo-tree-id25137 . -1) (undo-tree-id25138 . -1) (undo-tree-id25139 . -1) (undo-tree-id25140 . -1) (undo-tree-id25141 . -1) (undo-tree-id25142 . -1) (undo-tree-id25143 . -1) (undo-tree-id25144 . -1) (undo-tree-id25145 . -1) (undo-tree-id25146 . -1) (undo-tree-id25147 . -1) (undo-tree-id25148 . -1) (undo-tree-id25149 . -1) (undo-tree-id25150 . -1)) nil (25755 17975 878290 926000) 0 nil])
([nil nil ((34902 . 34903)) nil (25755 17975 878237 890000) 0 nil])
([nil nil ((34915 . 34916)) nil (25755 17975 878237 128000) 0 nil])
([nil nil ((34959 . 34960)) nil (25755 18059 897861 637000) 0 nil])
([nil nil ((34980 . 34981)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 34980)) (25755 18060 783786 503000) 0 nil])
([nil nil ((#("Once again, many GitHub repositories provide TensorFlow
" 0 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25583 . -55) (undo-tree-id25584 . -5) (undo-tree-id25585 . -5) (undo-tree-id25586 . -5) (undo-tree-id25587 . -5) (undo-tree-id25588 . -5) (undo-tree-id25589 . -5) (undo-tree-id25590 . -5) (undo-tree-id25591 . -5) (undo-tree-id25592 . -5) (undo-tree-id25593 . -5) (undo-tree-id25594 . -56)) nil (25755 18094 610529 277000) 0 nil] [nil nil ((#("Once again, many GitHub repositories provide TensorFlow
" 0 56 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25275 . -55) (undo-tree-id25276 . -5) (undo-tree-id25278 . -5) (undo-tree-id25280 . -5) (undo-tree-id25282 . -5) (undo-tree-id25284 . -5) (undo-tree-id25286 . -5) (undo-tree-id25288 . -56) 35160 (t 25755 17975 959954 684000)) ((35155 . 35211)) (25755 18059 41159 889000) 0 nil])
([nil nil ((#("implementations of semantic segmentation (TensorFlow 1 for now), and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25571 . -68) (undo-tree-id25572 . -5) (undo-tree-id25573 . -5) (undo-tree-id25574 . -5) (undo-tree-id25575 . -5) (undo-tree-id25576 . -5) (undo-tree-id25577 . -5) (undo-tree-id25578 . -5) (undo-tree-id25579 . -5) (undo-tree-id25580 . -5) (undo-tree-id25581 . -5) (undo-tree-id25582 . -69)) nil (25755 18094 610520 408000) 0 nil])
([nil nil ((#("implementations of semantic segmentation (TensorFlow 1 for now), and
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25252 . -68) (undo-tree-id25253 . -5) (undo-tree-id25255 . -5) (undo-tree-id25257 . -5) (undo-tree-id25259 . -5) (undo-tree-id25261 . -5) (undo-tree-id25263 . -5) (undo-tree-id25265 . -5) (undo-tree-id25267 . -5) (undo-tree-id25269 . -5) (undo-tree-id25271 . -5) (undo-tree-id25273 . -5) 35160) ((35155 . 35224)) (25755 18058 303795 839000) 0 nil])
([nil nil ((#("you will even find pretrained instance segmentation models in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25559 . -65) (undo-tree-id25560 . -5) (undo-tree-id25561 . -5) (undo-tree-id25562 . -5) (undo-tree-id25563 . -5) (undo-tree-id25564 . -5) (undo-tree-id25565 . -5) (undo-tree-id25566 . -5) (undo-tree-id25567 . -5) (undo-tree-id25568 . -5) (undo-tree-id25569 . -5) (undo-tree-id25570 . -66)) nil (25755 18094 610511 123000) 0 nil])
([nil nil ((#("you will even find pretrained instance segmentation models in the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 66 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25229 . -65) (undo-tree-id25230 . -5) (undo-tree-id25232 . -5) (undo-tree-id25234 . -5) (undo-tree-id25236 . -5) (undo-tree-id25238 . -5) (undo-tree-id25240 . -5) (undo-tree-id25242 . -5) (undo-tree-id25244 . -5) (undo-tree-id25246 . -5) (undo-tree-id25248 . -5) (undo-tree-id25250 . -5) 35160) ((35155 . 35221)) (25755 18057 337041 99000) 0 nil])
([nil nil ((#("TensorFlow Models project" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 5 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 5 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25547 . -24) (undo-tree-id25548 . -5) (undo-tree-id25549 . -5) (undo-tree-id25550 . -5) (undo-tree-id25551 . -5) (undo-tree-id25552 . -5) (undo-tree-id25553 . -5) (undo-tree-id25554 . -5) (undo-tree-id25555 . -5) (undo-tree-id25556 . -5) (undo-tree-id25557 . -5) (undo-tree-id25558 . -25)) nil (25755 18094 610502 478000) 0 nil])
([nil nil ((#("TensorFlow Models project. Instance segmentation is similar to semantic
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25206 . -71) (undo-tree-id25207 . -5) (undo-tree-id25209 . -5) (undo-tree-id25211 . -5) (undo-tree-id25213 . -5) (undo-tree-id25215 . -5) (undo-tree-id25217 . -5) (undo-tree-id25219 . -5) (undo-tree-id25221 . -5) (undo-tree-id25223 . -5) (undo-tree-id25225 . -5) (undo-tree-id25227 . -5) 35160) ((35155 . 35227)) (25755 18056 875864 355000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25545 . -1) (undo-tree-id25546 . -1)) nil (25755 18094 610493 674000) 0 nil])
([nil nil ((#("segmentation, but instead of merging all objects of the same class into one
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 76 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25289 . -75) (undo-tree-id25290 . -5) (undo-tree-id25291 . -5) (undo-tree-id25293 . -5) (undo-tree-id25295 . -5) (undo-tree-id25297 . -5) (undo-tree-id25299 . -5) (undo-tree-id25301 . -5) (undo-tree-id25303 . -5) (undo-tree-id25305 . -5) (undo-tree-id25307 . -5) (undo-tree-id25309 . -5) (undo-tree-id25311 . -5) (undo-tree-id25313 . -76) 35160 (t 25755 17999 804394 782000)) ((35155 . 35231)) (25755 18056 524517 227000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 35155) (undo-tree-id25543 . -1) (undo-tree-id25544 . -1)) nil (25755 18094 610491 440000) 0 nil])
([nil nil ((#("(e.g., it identifies
each individual bicycle)" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35210) (undo-tree-id25383 . -44) 35155 (t 25755 18016 68696 191000)) ((35210 . 35255)) (25755 18056 145547 213000) 0 nil])
([nil nil ((35199 . 35200) (#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . -35199) (undo-tree-id25542 . -1) 35155) nil (25755 18094 610489 65000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35209) (undo-tree-id25315 . -1) (undo-tree-id25317 . -1) (undo-tree-id25319 . -1) (undo-tree-id25321 . -1) (undo-tree-id25323 . -1) (undo-tree-id25325 . -1) (undo-tree-id25327 . -1) (undo-tree-id25329 . -1) (undo-tree-id25331 . -1) (undo-tree-id25333 . -1) (undo-tree-id25335 . -1) (undo-tree-id25337 . -1) (undo-tree-id25339 . -1) (undo-tree-id25341 . -1) (undo-tree-id25343 . -1) (undo-tree-id25345 . -1) (undo-tree-id25347 . -1) (undo-tree-id25349 . -1) (undo-tree-id25351 . -1) (undo-tree-id25353 . -1) (undo-tree-id25355 . -1) (undo-tree-id25357 . -1) (undo-tree-id25359 . -1) (undo-tree-id25361 . -1) (undo-tree-id25363 . -1) (undo-tree-id25365 . -1) (undo-tree-id25367 . -1) (undo-tree-id25369 . -1) (undo-tree-id25371 . -1) (undo-tree-id25373 . -1) (undo-tree-id25375 . -1) (undo-tree-id25377 . -1) (undo-tree-id25379 . -1) (undo-tree-id25381 . -1)) ((35209 . 35210)) (25755 18055 776661 933000) 0 nil])
([nil nil ((35214 . 35215)) nil (25755 18094 610486 879000) 0 nil])
([nil nil ((35211 . 35212)) ((#("
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35211) (undo-tree-id25513 . -1) (t 25755 18025 844877 819000)) (25755 18055 327775 646000) 0 nil])
([nil nil ((#("(e.g., it identifies
each individual bicycle)" 0 21 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 21 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35332) (undo-tree-id25540 . -44) (undo-tree-id25541 . -45) 35330) nil (25755 18094 610485 767000) 0 nil])
([nil nil ((#("big lump, each object is distinguished from the others. 
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 54 57 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25403 . -56) (undo-tree-id25405 . -54) (undo-tree-id25407 . -54) (undo-tree-id25409 . -54) (undo-tree-id25411 . -54) (undo-tree-id25413 . -54) (undo-tree-id25415 . -54) (undo-tree-id25417 . -54) (undo-tree-id25419 . -54) (undo-tree-id25421 . -54) (undo-tree-id25423 . -54) (undo-tree-id25425 . -54) (undo-tree-id25427 . -54) (undo-tree-id25429 . -54) (undo-tree-id25431 . -54) (undo-tree-id25433 . -54) (undo-tree-id25435 . -54) (undo-tree-id25437 . -54) (undo-tree-id25439 . -54) (undo-tree-id25441 . -54) (undo-tree-id25443 . -54) (undo-tree-id25445 . -54) (undo-tree-id25447 . -54) (undo-tree-id25449 . -54) (undo-tree-id25451 . -54) (undo-tree-id25453 . -54) (undo-tree-id25455 . -54) (undo-tree-id25457 . -54) (undo-tree-id25459 . -54) (undo-tree-id25461 . -54) (undo-tree-id25463 . -54) (undo-tree-id25465 . -54) (undo-tree-id25467 . -54) (undo-tree-id25469 . -54) (undo-tree-id25470 . -57) (undo-tree-id25472 . -57) (undo-tree-id25474 . -57) (undo-tree-id25476 . -57) (undo-tree-id25478 . -57) (undo-tree-id25480 . -57) (undo-tree-id25482 . -57) (undo-tree-id25484 . -57) (undo-tree-id25486 . -57) (undo-tree-id25488 . -57) (t 25755 18025 844877 819000)) ((35155 . 35212)) (25755 18054 512420 549000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35331) (undo-tree-id25514 . -1) (undo-tree-id25515 . -1) (undo-tree-id25516 . -1) (undo-tree-id25517 . -1) (undo-tree-id25518 . -1) (undo-tree-id25519 . -1) (undo-tree-id25520 . -1) (undo-tree-id25521 . -1) (undo-tree-id25522 . -1) (undo-tree-id25523 . -1) (undo-tree-id25524 . -1) (undo-tree-id25525 . -1) (undo-tree-id25526 . -1) (undo-tree-id25527 . -1) (undo-tree-id25528 . -1) (undo-tree-id25529 . -1) (undo-tree-id25530 . -1) (undo-tree-id25531 . -1) (undo-tree-id25532 . -1) (undo-tree-id25533 . -1) (undo-tree-id25534 . -1) (undo-tree-id25535 . -1) (undo-tree-id25536 . -1) (undo-tree-id25537 . -1) (undo-tree-id25538 . -1) (undo-tree-id25539 . -1)) nil (25755 18094 610481 661000) 0 nil])
([nil nil ((#("At present, the instance segmentation models
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25400 . -44) (undo-tree-id25401 . 45)) ((35155 . 35200)) (25755 18054 168049 995000) 0 nil])
([nil nil ((35333 . 35335)) nil (25755 18094 610448 584000) 0 nil])
([nil nil ((#("available in the TensorFlow Models project are based on the Mask R-CNN
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25397 . -70) (undo-tree-id25398 . 71)) ((35155 . 35226)) (25755 18053 827484 388000) 0 nil])
([nil nil ((#("3" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35500) (undo-tree-id25832 . -1) (undo-tree-id25833 . -1) (t 25755 18094 646165 204000)) nil (25755 18159 654210 27000) 0 nil])
([nil nil ((#("architecture, which was proposed in a 2017 paper:34 it extends the Faster
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25394 . -73) (undo-tree-id25395 . 74)) ((35155 . 35229)) (25755 18053 479484 221000) 0 nil])
([nil nil ((#("4" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35500) (undo-tree-id25830 . -1) (undo-tree-id25831 . -1)) nil (25755 18159 654208 76000) 0 nil])
([nil nil ((#("R-CNN model by additionally producing a pixel mask for each bounding
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25391 . -68) (undo-tree-id25392 . 69)) ((35155 . 35224)) (25755 18053 69842 65000) 0 nil])
([nil nil ((#("At present, the instance segmentation models
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25744 . -44) (undo-tree-id25745 . 45) (undo-tree-id25746 . -45) (undo-tree-id25747 . -45) (undo-tree-id25748 . -45) (undo-tree-id25749 . -45) (undo-tree-id25750 . -45) (undo-tree-id25751 . -45) (undo-tree-id25752 . -45) (undo-tree-id25753 . -45) (undo-tree-id25754 . -45) (undo-tree-id25755 . -45) (undo-tree-id25756 . -45) (undo-tree-id25757 . -45) (undo-tree-id25758 . -45) (undo-tree-id25759 . -45) (undo-tree-id25760 . -45) (undo-tree-id25761 . -45) (undo-tree-id25762 . -45) (undo-tree-id25763 . -45) (undo-tree-id25764 . -45) (undo-tree-id25765 . -45) (undo-tree-id25766 . -45) (undo-tree-id25767 . -45) (undo-tree-id25768 . -45) (undo-tree-id25769 . -45) (undo-tree-id25770 . -45) (undo-tree-id25771 . -45) (undo-tree-id25772 . -45) (undo-tree-id25773 . -45) (undo-tree-id25774 . -45) (undo-tree-id25775 . -45) (undo-tree-id25776 . -45) (undo-tree-id25777 . -45) (undo-tree-id25778 . -45) (undo-tree-id25779 . -45) (undo-tree-id25780 . -45) (undo-tree-id25781 . -45) (undo-tree-id25782 . -45) (undo-tree-id25783 . -45) (undo-tree-id25784 . -45) (undo-tree-id25785 . -45) (undo-tree-id25786 . -45) (undo-tree-id25787 . -45) (undo-tree-id25788 . -45) (undo-tree-id25789 . -45) (undo-tree-id25790 . -45) (undo-tree-id25791 . -45) (undo-tree-id25792 . -45) (undo-tree-id25793 . -10) (undo-tree-id25794 . -12) (undo-tree-id25795 . -16) (undo-tree-id25796 . -25) (undo-tree-id25797 . -38) (undo-tree-id25798 . -45) (undo-tree-id25799 . -45) (undo-tree-id25800 . -45) (undo-tree-id25801 . -45) (undo-tree-id25802 . -45) (undo-tree-id25803 . -45) (undo-tree-id25804 . -45) (undo-tree-id25805 . -45) (undo-tree-id25806 . -43) (undo-tree-id25807 . -43) (undo-tree-id25808 . -43) (undo-tree-id25809 . -43) (undo-tree-id25810 . -43) (undo-tree-id25811 . -43) (undo-tree-id25812 . -43) (undo-tree-id25813 . -43) (undo-tree-id25814 . -45) (undo-tree-id25815 . -45) (undo-tree-id25816 . -45) (undo-tree-id25817 . -45) (undo-tree-id25818 . -45) (undo-tree-id25819 . -45) (undo-tree-id25820 . -45) (undo-tree-id25821 . -45) (undo-tree-id25822 . -45) (undo-tree-id25823 . -45) (undo-tree-id25824 . -45) (undo-tree-id25825 . -45) (undo-tree-id25826 . -45) (undo-tree-id25827 . -45) (undo-tree-id25828 . -45) (undo-tree-id25829 . -45)) nil (25755 18159 654203 450000) 0 nil])
([nil nil ((#("box. So not only do you get a bounding box around each object, with a set
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25510 . -73) (undo-tree-id25511 . 74) (undo-tree-id25512 . -74)) ((35155 . 35229)) (25755 18052 749960 819000) 0 nil] [nil nil ((#("box. So not only do you get a bounding box around each object, with a set
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 74 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25388 . -73) (undo-tree-id25389 . 74) (undo-tree-id25390 . -74)) ((35155 . 35229)) (25755 18043 19751 867000) 0 nil])
([nil nil ((#("available in the TensorFlow Models project are based on the Mask R-CNN
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 14 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 14 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25696 . -70) (undo-tree-id25697 . 71) (undo-tree-id25698 . -71) (undo-tree-id25699 . -71) (undo-tree-id25700 . -71) (undo-tree-id25701 . -71) (undo-tree-id25702 . -71) (undo-tree-id25703 . -71) (undo-tree-id25704 . -71) (undo-tree-id25705 . -71) (undo-tree-id25706 . -71) (undo-tree-id25707 . -71) (undo-tree-id25708 . -71) (undo-tree-id25709 . -71) (undo-tree-id25710 . -71) (undo-tree-id25711 . -71) (undo-tree-id25712 . -71) (undo-tree-id25713 . -71) (undo-tree-id25714 . -10) (undo-tree-id25715 . -13) (undo-tree-id25716 . -17) (undo-tree-id25717 . -28) (undo-tree-id25718 . -35) (undo-tree-id25719 . -43) (undo-tree-id25720 . -47) (undo-tree-id25721 . -53) (undo-tree-id25722 . -56) (undo-tree-id25723 . -60) (undo-tree-id25724 . -65) (undo-tree-id25725 . -66) (undo-tree-id25726 . -67) (undo-tree-id25727 . -71) (undo-tree-id25728 . -71) (undo-tree-id25729 . -71) (undo-tree-id25730 . -71) (undo-tree-id25731 . -71) (undo-tree-id25732 . -71) (undo-tree-id25733 . -71) (undo-tree-id25734 . -71) (undo-tree-id25735 . -49) (undo-tree-id25736 . -49) (undo-tree-id25737 . -49) (undo-tree-id25738 . -49) (undo-tree-id25739 . -49) (undo-tree-id25740 . -49) (undo-tree-id25741 . -49) (undo-tree-id25742 . -49) (undo-tree-id25743 . -71)) nil (25755 18159 653931 754000) 0 nil])
([nil nil ((#("of estimated class probabilities, but you also get a pixel mask that locates
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25507 . -76) (undo-tree-id25508 . 77) (undo-tree-id25509 . -77)) ((35155 . 35232)) (25755 18052 175061 295000) 0 nil])
([nil nil ((#("of estimated class probabilities, but you also get a pixel mask that locates
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25385 . -76) (undo-tree-id25386 . 77) (undo-tree-id25387 . -77)) ((35155 . 35232)) (25755 18043 19048 721000) 0 nil])
([nil nil ((#("architecture, which was proposed in a 2017 paper: it extends the Faster
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25642 . -71) (undo-tree-id25643 . 72) (undo-tree-id25644 . -72) (undo-tree-id25645 . -72) (undo-tree-id25646 . -72) (undo-tree-id25647 . -72) (undo-tree-id25648 . -72) (undo-tree-id25649 . -72) (undo-tree-id25650 . -72) (undo-tree-id25651 . -72) (undo-tree-id25652 . -72) (undo-tree-id25653 . -72) (undo-tree-id25654 . -72) (undo-tree-id25655 . -72) (undo-tree-id25656 . -72) (undo-tree-id25657 . -72) (undo-tree-id25658 . -72) (undo-tree-id25659 . -72) (undo-tree-id25660 . -12) (undo-tree-id25661 . -14) (undo-tree-id25662 . -20) (undo-tree-id25663 . -24) (undo-tree-id25664 . -33) (undo-tree-id25665 . -36) (undo-tree-id25666 . -38) (undo-tree-id25667 . -43) (undo-tree-id25668 . -48) (undo-tree-id25669 . -49) (undo-tree-id25670 . -49) (undo-tree-id25671 . -49) (undo-tree-id25672 . -49) (undo-tree-id25673 . -49) (undo-tree-id25674 . -49) (undo-tree-id25675 . -49) (undo-tree-id25676 . -49) (undo-tree-id25677 . -49) (undo-tree-id25678 . -49) (undo-tree-id25679 . -49) (undo-tree-id25680 . -49) (undo-tree-id25681 . -49) (undo-tree-id25682 . -49) (undo-tree-id25683 . -49) (undo-tree-id25684 . -49) (undo-tree-id25685 . -49) (undo-tree-id25686 . -49) (undo-tree-id25687 . -49) (undo-tree-id25688 . -49) (undo-tree-id25689 . -49) (undo-tree-id25690 . -49) (undo-tree-id25691 . -49) (undo-tree-id25692 . -49) (undo-tree-id25693 . -49) (undo-tree-id25694 . -49) (undo-tree-id25695 . -72)) nil (25755 18159 653900 327000) 0 nil])
([nil nil ((#("pixels in the bounding box that belong to the object.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25504 . -53) (undo-tree-id25505 . 54) (undo-tree-id25506 . -54)) ((35155 . 35209)) (25755 18051 953478 724000) 0 nil])
nil
([nil nil ((#("R-CNN model by additionally producing a pixel mask for each bounding
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25621 . -68) (undo-tree-id25622 . 69) (undo-tree-id25623 . -69) (undo-tree-id25624 . -69) (undo-tree-id25625 . -69) (undo-tree-id25626 . -69) (undo-tree-id25627 . -69) (undo-tree-id25628 . -69) (undo-tree-id25629 . -69) (undo-tree-id25630 . -69) (undo-tree-id25631 . -69) (undo-tree-id25632 . -69) (undo-tree-id25633 . -69) (undo-tree-id25634 . -69) (undo-tree-id25635 . -69) (undo-tree-id25636 . -69) (undo-tree-id25637 . -69) (undo-tree-id25638 . -69) (undo-tree-id25639 . -69) (undo-tree-id25640 . -69) (undo-tree-id25641 . -69)) nil (25755 18159 653861 12000) 0 nil])
([nil nil ((#("As you can see, the field of Deep Computer Vision is vast and moving fast,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25501 . -74) (undo-tree-id25502 . 75) (undo-tree-id25503 . -75)) ((35155 . 35230)) (25755 18051 706836 407000) 0 nil])
([nil nil ((#("box" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25618 . -2) (undo-tree-id25619 . 3) (undo-tree-id25620 . -3)) nil (25755 18159 653844 120000) 0 nil])
([nil nil ((#("with all sorts of architectures popping out every year, all based on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25498 . -68) (undo-tree-id25499 . 69) (undo-tree-id25500 . -69)) ((35155 . 35224)) (25755 18051 467716 390000) 0 nil])
([nil nil ((#("." 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25615 . 1) (undo-tree-id25616 . -1) (undo-tree-id25617 . -1)) nil (25755 18159 653840 826000) 0 nil])
([nil nil ((#("convolutional neural networks. The progress made in just a few years hasbeen astounding, and researchers are now focusing on harder and harder
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25493 . -142) (undo-tree-id25494 . 143) (undo-tree-id25495 . 143) (undo-tree-id25496 . -13) (undo-tree-id25497 . -143)) ((35155 . 35298)) (25755 18048 714769 45000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified t)) . 35335) (undo-tree-id25612 . 1) (undo-tree-id25613 . -1) (undo-tree-id25614 . -1)) nil (25755 18159 653838 173000) 0 nil])
([nil nil ((#("problems, such as adversarial learning (which attempts to make the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35155) (undo-tree-id25490 . -66) (undo-tree-id25491 . 67) (undo-tree-id25492 . -67)) ((35155 . 35222)) (25755 18048 714520 638000) 0 nil])
([nil nil ((#("So not only do you get a bounding box around each object, with a set
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25601 . -68) (undo-tree-id25602 . 69) (undo-tree-id25603 . -69) (undo-tree-id25604 . -69) (undo-tree-id25605 . -69) (undo-tree-id25606 . -69) (undo-tree-id25607 . -69) (undo-tree-id25608 . -69) (undo-tree-id25609 . -69) (undo-tree-id25610 . -69) (undo-tree-id25611 . -69)) nil (25755 18159 653835 22000) 0 nil])
nil
([nil nil ((#("of estimated class probabilities, but you also get a pixel mask that locates
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 77 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25598 . -76) (undo-tree-id25599 . 77) (undo-tree-id25600 . -77)) nil (25755 18159 653826 153000) 0 nil])
([nil nil ((#("pixels in the bounding box that belong to the object.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 54 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25595 . -53) (undo-tree-id25596 . 54) (undo-tree-id25597 . -54)) nil (25755 18159 653820 112000) 0 nil])
([nil nil ((#("As you can see, the field of Deep Computer Vision is vast and moving fast,
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25848 . -74) (undo-tree-id25849 . 75) (undo-tree-id25850 . -75) (t 25755 18159 687395 679000)) nil (25755 18191 954346 8000) 0 nil])
([nil nil ((#("with all sorts of architectures popping out every year, all based on
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 69 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25845 . -68) (undo-tree-id25846 . 69) (undo-tree-id25847 . -69)) nil (25755 18191 954343 34000) 0 nil])
([nil nil ((#("convolutional neural networks. The progress made in just a few years hasbeen astounding, and researchers are now focusing on harder and harder
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 8 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 8 143 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25840 . -142) (undo-tree-id25841 . 143) (undo-tree-id25842 . 143) (undo-tree-id25843 . -13) (undo-tree-id25844 . -143)) nil (25755 18191 954339 831000) 0 nil])
([nil nil ((#("problems, such as adversarial learning (which attempts to make the
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 67 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25837 . -66) (undo-tree-id25838 . 67) (undo-tree-id25839 . -67)) nil (25755 18191 954334 844000) 0 nil])
([nil nil ((#("network more resistant to images designed to fool it), explainability
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25834 . -69) (undo-tree-id25835 . 70) (undo-tree-id25836 . -70)) nil (25755 18191 954326 794000) 0 nil])
([nil nil ((#("(understanding why the network makes a specific classification), realistic
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25872 . -74) (undo-tree-id25873 . 75) (undo-tree-id25874 . 75) (undo-tree-id25875 . -1) (undo-tree-id25876 . 13) (undo-tree-id25877 . -63) (undo-tree-id25878 . -75) (t 25755 18192 36012 22000)) nil (25755 18227 498027 776000) 0 nil])
([nil nil ((#("image generation (which we will come back to in Chapter 17), and single-
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25869 . -72) (undo-tree-id25870 . 73) (undo-tree-id25871 . -73)) nil (25755 18227 498022 424000) 0 nil])
([nil nil ((#("shot learning (a system that can recognize an object after it has seen it just
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 79 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25866 . -78) (undo-tree-id25867 . 79) (undo-tree-id25868 . -79)) nil (25755 18227 498019 599000) 0 nil])
([nil nil ((#("once). Some even explore completely novel architectures, such as
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 65 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25863 . -64) (undo-tree-id25864 . 65) (undo-tree-id25865 . -65)) nil (25755 18227 498016 763000) 0 nil])
([nil nil ((#("Geoffrey Hinton’s capsule networks35 (I presented them in a couple of
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 70 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25860 . -69) (undo-tree-id25861 . 70) (undo-tree-id25862 . -70)) nil (25755 18227 498014 74000) 0 nil])
([nil nil ((#("videos, with the corresponding code in a notebook). Now on to the next
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 71 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25857 . -70) (undo-tree-id25858 . 71) (undo-tree-id25859 . -71)) nil (25755 18227 498011 270000) 0 nil])
([nil nil ((#("chapter, where we will look at how to process sequential data such as time
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 75 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 35335) (undo-tree-id25854 . -74) (undo-tree-id25855 . 75) (undo-tree-id25856 . -75)) nil (25755 18227 498005 446000) 0 nil])
([nil current ((#("series using recurrent neural networks and convolutional neural networks.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 72 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 72 73 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 73 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 35335) (undo-tree-id25851 . -73) (undo-tree-id25852 . 74) (undo-tree-id25853 . -74)) nil (25755 18227 497999 380000) 0 nil])
nil
